
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000552  00800200  00007286  0000731a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e23  00800752  00800752  0000786c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000786c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000078c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c10  00000000  00000000  00007908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eb41  00000000  00000000  00008518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b09  00000000  00000000  00017059  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007498  00000000  00000000  0001ab62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b3c  00000000  00000000  00021ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a78  00000000  00000000  00024b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d5f3  00000000  00000000  000295b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  00036ba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__vector_25>
      68:	0c 94 84 2b 	jmp	0x5708	; 0x5708 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__vector_36>
      94:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 32 30 	jmp	0x6064	; 0x6064 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5e 2c 	jmp	0x58bc	; 0x58bc <__vector_51>
      d0:	0c 94 b0 2c 	jmp	0x5960	; 0x5960 <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__vector_54>
      dc:	0c 94 46 2d 	jmp	0x5a8c	; 0x5a8c <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	69 21       	and	r22, r9
      e6:	69 21       	and	r22, r9
      e8:	69 21       	and	r22, r9
      ea:	a0 21       	and	r26, r0
      ec:	a8 21       	and	r26, r8
      ee:	bd 21       	and	r27, r13
      f0:	69 21       	and	r22, r9
      f2:	69 21       	and	r22, r9
      f4:	a0 21       	and	r26, r0
      f6:	a8 21       	and	r26, r8
      f8:	54 30       	cpi	r21, 0x04	; 4
      fa:	c4 30       	cpi	r28, 0x04	; 4
      fc:	c4 30       	cpi	r28, 0x04	; 4
      fe:	c4 30       	cpi	r28, 0x04	; 4
     100:	c4 30       	cpi	r28, 0x04	; 4
     102:	c4 30       	cpi	r28, 0x04	; 4
     104:	c4 30       	cpi	r28, 0x04	; 4
     106:	c4 30       	cpi	r28, 0x04	; 4
     108:	54 30       	cpi	r21, 0x04	; 4
     10a:	c4 30       	cpi	r28, 0x04	; 4
     10c:	c4 30       	cpi	r28, 0x04	; 4
     10e:	c4 30       	cpi	r28, 0x04	; 4
     110:	c4 30       	cpi	r28, 0x04	; 4
     112:	c4 30       	cpi	r28, 0x04	; 4
     114:	c4 30       	cpi	r28, 0x04	; 4
     116:	c4 30       	cpi	r28, 0x04	; 4
     118:	56 30       	cpi	r21, 0x06	; 6
     11a:	c4 30       	cpi	r28, 0x04	; 4
     11c:	c4 30       	cpi	r28, 0x04	; 4
     11e:	c4 30       	cpi	r28, 0x04	; 4
     120:	c4 30       	cpi	r28, 0x04	; 4
     122:	c4 30       	cpi	r28, 0x04	; 4
     124:	c4 30       	cpi	r28, 0x04	; 4
     126:	c4 30       	cpi	r28, 0x04	; 4
     128:	c4 30       	cpi	r28, 0x04	; 4
     12a:	c4 30       	cpi	r28, 0x04	; 4
     12c:	c4 30       	cpi	r28, 0x04	; 4
     12e:	c4 30       	cpi	r28, 0x04	; 4
     130:	c4 30       	cpi	r28, 0x04	; 4
     132:	c4 30       	cpi	r28, 0x04	; 4
     134:	c4 30       	cpi	r28, 0x04	; 4
     136:	c4 30       	cpi	r28, 0x04	; 4
     138:	56 30       	cpi	r21, 0x06	; 6
     13a:	c4 30       	cpi	r28, 0x04	; 4
     13c:	c4 30       	cpi	r28, 0x04	; 4
     13e:	c4 30       	cpi	r28, 0x04	; 4
     140:	c4 30       	cpi	r28, 0x04	; 4
     142:	c4 30       	cpi	r28, 0x04	; 4
     144:	c4 30       	cpi	r28, 0x04	; 4
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	c4 30       	cpi	r28, 0x04	; 4
     14a:	c4 30       	cpi	r28, 0x04	; 4
     14c:	c4 30       	cpi	r28, 0x04	; 4
     14e:	c4 30       	cpi	r28, 0x04	; 4
     150:	c4 30       	cpi	r28, 0x04	; 4
     152:	c4 30       	cpi	r28, 0x04	; 4
     154:	c4 30       	cpi	r28, 0x04	; 4
     156:	c4 30       	cpi	r28, 0x04	; 4
     158:	c0 30       	cpi	r28, 0x00	; 0
     15a:	c4 30       	cpi	r28, 0x04	; 4
     15c:	c4 30       	cpi	r28, 0x04	; 4
     15e:	c4 30       	cpi	r28, 0x04	; 4
     160:	c4 30       	cpi	r28, 0x04	; 4
     162:	c4 30       	cpi	r28, 0x04	; 4
     164:	c4 30       	cpi	r28, 0x04	; 4
     166:	c4 30       	cpi	r28, 0x04	; 4
     168:	8b 30       	cpi	r24, 0x0B	; 11
     16a:	c4 30       	cpi	r28, 0x04	; 4
     16c:	c4 30       	cpi	r28, 0x04	; 4
     16e:	c4 30       	cpi	r28, 0x04	; 4
     170:	c4 30       	cpi	r28, 0x04	; 4
     172:	c4 30       	cpi	r28, 0x04	; 4
     174:	c4 30       	cpi	r28, 0x04	; 4
     176:	c4 30       	cpi	r28, 0x04	; 4
     178:	c4 30       	cpi	r28, 0x04	; 4
     17a:	c4 30       	cpi	r28, 0x04	; 4
     17c:	c4 30       	cpi	r28, 0x04	; 4
     17e:	c4 30       	cpi	r28, 0x04	; 4
     180:	c4 30       	cpi	r28, 0x04	; 4
     182:	c4 30       	cpi	r28, 0x04	; 4
     184:	c4 30       	cpi	r28, 0x04	; 4
     186:	c4 30       	cpi	r28, 0x04	; 4
     188:	7f 30       	cpi	r23, 0x0F	; 15
     18a:	c4 30       	cpi	r28, 0x04	; 4
     18c:	c4 30       	cpi	r28, 0x04	; 4
     18e:	c4 30       	cpi	r28, 0x04	; 4
     190:	c4 30       	cpi	r28, 0x04	; 4
     192:	c4 30       	cpi	r28, 0x04	; 4
     194:	c4 30       	cpi	r28, 0x04	; 4
     196:	c4 30       	cpi	r28, 0x04	; 4
     198:	a3 30       	cpi	r26, 0x03	; 3

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 aa 13 	call	0x2754	; 0x2754 <prvCheckTasksWaitingTermination>
     2a0:	80 91 99 13 	lds	r24, 0x1399	; 0x801399 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
     2ac:	0e 94 e6 21 	call	0x43cc	; 0x43cc <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 db 20 	call	0x41b6	; 0x41b6 <prvProcessTimerOrBlockTask>
     2ca:	0e 94 32 21 	call	0x4264	; 0x4264 <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	17 e0       	ldi	r17, 0x07	; 7
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	e6 e8       	ldi	r30, 0x86	; 134
     2e8:	f2 e7       	ldi	r31, 0x72	; 114
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a2 35       	cpi	r26, 0x52	; 82
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	25 e1       	ldi	r18, 0x15	; 21
     2fc:	a2 e5       	ldi	r26, 0x52	; 82
     2fe:	b7 e0       	ldi	r27, 0x07	; 7
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a5 37       	cpi	r26, 0x75	; 117
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <main>
     30e:	0c 94 41 39 	jmp	0x7282	; 0x7282 <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:

/*
* Callback function called by the driver when the new CO2 measure is received.
*/
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 54 15 	sts	0x1554, r25	; 0x801554 <ppm+0x1>
     318:	80 93 53 15 	sts	0x1553, r24	; 0x801553 <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:
}

/*
* Task for taking the CO2 measurements and setting the CO2 value accordingly.
*/
void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskGetTickCount>
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     336:	40 ee       	ldi	r20, 0xE0	; 224
     338:	53 e0       	ldi	r21, 0x03	; 3
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 11 17 	call	0x2e22	; 0x2e22 <xTaskDelayUntil>
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     346:	40 91 55 15 	lds	r20, 0x1555	; 0x801555 <ready_bit>
     34a:	50 91 56 15 	lds	r21, 0x1556	; 0x801556 <ready_bit+0x1>
     34e:	60 91 57 15 	lds	r22, 0x1557	; 0x801557 <ready_bit+0x2>
     352:	70 91 58 15 	lds	r23, 0x1558	; 0x801558 <ready_bit+0x3>
     356:	cc 24       	eor	r12, r12
     358:	ca 94       	dec	r12
     35a:	dc 2c       	mov	r13, r12
     35c:	76 01       	movw	r14, r12
     35e:	01 e0       	ldi	r16, 0x01	; 1
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	80 91 59 15 	lds	r24, 0x1559	; 0x801559 <group_start>
     366:	90 91 5a 15 	lds	r25, 0x155A	; 0x80155a <group_start+0x1>
     36a:	be d5       	rcall	.+2940   	; 0xee8 <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     36c:	00 91 55 15 	lds	r16, 0x1555	; 0x801555 <ready_bit>
     370:	10 91 56 15 	lds	r17, 0x1556	; 0x801556 <ready_bit+0x1>
     374:	20 91 57 15 	lds	r18, 0x1557	; 0x801557 <ready_bit+0x2>
     378:	30 91 58 15 	lds	r19, 0x1558	; 0x801558 <ready_bit+0x3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	80 23       	and	r24, r16
     382:	91 23       	and	r25, r17
     384:	a2 23       	and	r26, r18
     386:	b3 23       	and	r27, r19
     388:	08 17       	cp	r16, r24
     38a:	19 07       	cpc	r17, r25
     38c:	2a 07       	cpc	r18, r26
     38e:	3b 07       	cpc	r19, r27
     390:	91 f6       	brne	.-92     	; 0x336 <startReadingCO2+0x18>
			rc = mh_z19_takeMeassuring();
     392:	0e 94 8c 29 	call	0x5318	; 0x5318 <mh_z19_takeMeassuring>
     396:	80 93 52 15 	sts	0x1552, r24	; 0x801552 <rc>
			if (rc != MHZ19_OK){
     39a:	81 11       	cpse	r24, r1
				// Something went wrong
				} else {
				set_co2_mutex();
     39c:	cc cf       	rjmp	.-104    	; 0x336 <startReadingCO2+0x18>
     39e:	cb d2       	rcall	.+1430   	; 0x936 <set_co2_mutex>
     3a0:	ca cf       	rjmp	.-108    	; 0x336 <startReadingCO2+0x18>

000003a2 <CO2_handler_init>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	08 2f       	mov	r16, r24
     3ae:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     3b0:	40 91 55 15 	lds	r20, 0x1555	; 0x801555 <ready_bit>
     3b4:	50 91 56 15 	lds	r21, 0x1556	; 0x801556 <ready_bit+0x1>
     3b8:	60 91 57 15 	lds	r22, 0x1557	; 0x801557 <ready_bit+0x2>
     3bc:	70 91 58 15 	lds	r23, 0x1558	; 0x801558 <ready_bit+0x3>
     3c0:	80 91 59 15 	lds	r24, 0x1559	; 0x801559 <group_start>
     3c4:	90 91 5a 15 	lds	r25, 0x155A	; 0x80155a <group_start+0x1>
     3c8:	2f d6       	rcall	.+3166   	; 0x1028 <xEventGroupSetBits>

	xTaskCreate(
     3ca:	e1 2c       	mov	r14, r1
     3cc:	f1 2c       	mov	r15, r1
     3ce:	9e 01       	movw	r18, r28
     3d0:	44 e2       	ldi	r20, 0x24	; 36
     3d2:	51 e0       	ldi	r21, 0x01	; 1
     3d4:	6f e6       	ldi	r22, 0x6F	; 111
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	8f e8       	ldi	r24, 0x8F	; 143
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 71 14 	call	0x28e2	; 0x28e2 <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <createCO2>:
/*
* Method used for allocating memory for CO2 struct and returning it, initializing the CO2 value to 0, setting groups and bits,
* initializing the driver, injecting callback and creating a CO2 task.
*/
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     3ec:	af 92       	push	r10
     3ee:	bf 92       	push	r11
     3f0:	cf 92       	push	r12
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	8c 01       	movw	r16, r24
     402:	5b 01       	movw	r10, r22
     404:	69 01       	movw	r12, r18
     406:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <malloc>
     410:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     412:	89 2b       	or	r24, r25
     414:	d9 f0       	breq	.+54     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     416:	19 82       	std	Y+1, r1	; 0x01
     418:	18 82       	st	Y, r1
	
	group_start = taskBits;
     41a:	b0 92 5a 15 	sts	0x155A, r11	; 0x80155a <group_start+0x1>
     41e:	a0 92 59 15 	sts	0x1559, r10	; 0x801559 <group_start>
	ready_bit = bit;
     422:	c0 92 55 15 	sts	0x1555, r12	; 0x801555 <ready_bit>
     426:	d0 92 56 15 	sts	0x1556, r13	; 0x801556 <ready_bit+0x1>
     42a:	e0 92 57 15 	sts	0x1557, r14	; 0x801557 <ready_bit+0x2>
     42e:	f0 92 58 15 	sts	0x1558, r15	; 0x801558 <ready_bit+0x3>
	
	mh_z19_initialise(ser_USART3);
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	0e 94 62 29 	call	0x52c4	; 0x52c4 <mh_z19_initialise>
	mh_z19_injectCallBack(CO2_callback);
     438:	8a e8       	ldi	r24, 0x8A	; 138
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 87 29 	call	0x530e	; 0x530e <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     440:	be 01       	movw	r22, r28
     442:	c8 01       	movw	r24, r16
     444:	ae df       	rcall	.-164    	; 0x3a2 <CO2_handler_init>
	return new_measure;
     446:	8c 2f       	mov	r24, r28
     448:	9d 2f       	mov	r25, r29
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
	mh_z19_initialise(ser_USART3);
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	bf 90       	pop	r11
     462:	af 90       	pop	r10
     464:	08 95       	ret

00000466 <getCO2>:
/*
* Method used for returning the CO2 value.
*/
uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	08 95       	ret

0000046e <set_co2>:

void set_co2(CO2_t self){
	((CO2_t)self)->CO2 = ppm;
     46e:	20 91 53 15 	lds	r18, 0x1553	; 0x801553 <ppm>
     472:	30 91 54 15 	lds	r19, 0x1554	; 0x801554 <ppm+0x1>
     476:	fc 01       	movw	r30, r24
     478:	31 83       	std	Z+1, r19	; 0x01
     47a:	20 83       	st	Z, r18
     47c:	08 95       	ret

0000047e <DownLinkHandler_Create>:
//uint16_t openWindow;
static lora_driver_payload_t downlinkPayload;

void lora_downlink_handler_task(void* messageBuffer);

void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	08 2f       	mov	r16, r24
     48a:	eb 01       	movw	r28, r22
	
	printf("downlink 1");
     48c:	87 e7       	ldi	r24, 0x77	; 119
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <printf>
	xTaskCreate(
     498:	e1 2c       	mov	r14, r1
     49a:	f1 2c       	mov	r15, r1
     49c:	9e 01       	movw	r18, r28
     49e:	48 e8       	ldi	r20, 0x88	; 136
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	62 e8       	ldi	r22, 0x82	; 130
     4a4:	72 e0       	ldi	r23, 0x02	; 2
     4a6:	84 e9       	ldi	r24, 0x94	; 148
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 71 14 	call	0x28e2	; 0x28e2 <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	08 95       	ret

000004be <lora_DownLinkHandler_StartTask>:


void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
	
	
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     4c6:	0f ef       	ldi	r16, 0xFF	; 255
     4c8:	1f ef       	ldi	r17, 0xFF	; 255
     4ca:	98 01       	movw	r18, r16
     4cc:	46 e1       	ldi	r20, 0x16	; 22
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	62 e5       	ldi	r22, 0x52	; 82
     4d2:	77 e0       	ldi	r23, 0x07	; 7
     4d4:	0e 94 d6 11 	call	0x23ac	; 0x23ac <xStreamBufferReceive>
	printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     4d8:	c2 e5       	ldi	r28, 0x52	; 82
     4da:	d7 e0       	ldi	r29, 0x07	; 7
     4dc:	99 81       	ldd	r25, Y+1	; 0x01
     4de:	88 81       	ld	r24, Y
     4e0:	1f 92       	push	r1
     4e2:	9f 93       	push	r25
     4e4:	1f 92       	push	r1
     4e6:	8f 93       	push	r24
     4e8:	8c e9       	ldi	r24, 0x9C	; 156
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
     4f0:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <printf>
	if (1 == downlinkPayload.len){
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	61 f4       	brne	.+24     	; 0x51e <lora_DownLinkHandler_StartTask+0x60>
		if(downlinkPayload.bytes[0] == 1){
     506:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <__data_end+0x2>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	21 f4       	brne	.+8      	; 0x516 <lora_DownLinkHandler_StartTask+0x58>
			rc_servo_setPosition(1,-100);
     50e:	6c e9       	ldi	r22, 0x9C	; 156
     510:	0e 94 bb 29 	call	0x5376	; 0x5376 <rc_servo_setPosition>
     514:	04 c0       	rjmp	.+8      	; 0x51e <lora_DownLinkHandler_StartTask+0x60>
		}
		else{
			rc_servo_setPosition(1, 100);
     516:	64 e6       	ldi	r22, 0x64	; 100
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 bb 29 	call	0x5376	; 0x5376 <rc_servo_setPosition>
		}
		
	}
	
	
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	08 95       	ret

00000528 <lora_downlink_handler_task>:


void lora_downlink_handler_task(void* downLinkMessageBuffer){
     528:	ec 01       	movw	r28, r24
	for(;;){
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     52a:	ce 01       	movw	r24, r28
     52c:	c8 df       	rcall	.-112    	; 0x4be <lora_DownLinkHandler_StartTask>
     52e:	fd cf       	rjmp	.-6      	; 0x52a <lora_downlink_handler_task+0x2>

00000530 <tsl2591Callback>:

/*
* Callback function called when the new lux data is fetched.
*/
void tsl2591Callback(tsl2591_returnCode_t rc, LightHandler_t self)
{
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	00 d0       	rcall	.+0      	; 0x536 <tsl2591Callback+0x6>
     536:	1f 92       	push	r1
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
	
	float _lux;
	switch (rc)
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	71 f5       	brne	.+92     	; 0x59c <tsl2591Callback+0x6c>
	{
		case TSL2591_DATA_READY:
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <tsl2591_getLux>
     548:	81 11       	cpse	r24, r1
     54a:	1f c0       	rjmp	.+62     	; 0x58a <tsl2591Callback+0x5a>
		{
			lux_val = _lux;
     54c:	69 81       	ldd	r22, Y+1	; 0x01
     54e:	7a 81       	ldd	r23, Y+2	; 0x02
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	0e 94 83 22 	call	0x4506	; 0x4506 <__fixunssfsi>
     558:	70 93 69 07 	sts	0x0769, r23	; 0x800769 <lux_val+0x1>
     55c:	60 93 68 07 	sts	0x0768, r22	; 0x800768 <lux_val>
			//setting data using the shared sensor data c file
			set_light_mutex();
     560:	43 d2       	rcall	.+1158   	; 0x9e8 <set_light_mutex>
			print_sharedf("Lux: %5.4f\n", _lux);
     562:	8c 81       	ldd	r24, Y+4	; 0x04
     564:	8f 93       	push	r24
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	8f 93       	push	r24
     56a:	8a 81       	ldd	r24, Y+2	; 0x02
     56c:	8f 93       	push	r24
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	8f 93       	push	r24
     572:	8d ec       	ldi	r24, 0xCD	; 205
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	f2 d0       	rcall	.+484    	; 0x760 <print_sharedf>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	09 c0       	rjmp	.+18     	; 0x59c <tsl2591Callback+0x6c>
		}
		else if( TSL2591_OVERFLOW == rc )
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	39 f4       	brne	.+14     	; 0x59c <tsl2591Callback+0x6c>
		{
			print_sharedf("Lux overflow - change gain and integration time\n"); //switch
     58e:	89 ed       	ldi	r24, 0xD9	; 217
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	e4 d0       	rcall	.+456    	; 0x760 <print_sharedf>
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
		break;
		
		default:
		break;
	}
}
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <createLightTask>:
} LightHandler;

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void createLightTask(UBaseType_t light_priority, LightHandler_t self){
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	08 2f       	mov	r16, r24
     5b6:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     5b8:	40 91 55 15 	lds	r20, 0x1555	; 0x801555 <ready_bit>
     5bc:	50 91 56 15 	lds	r21, 0x1556	; 0x801556 <ready_bit+0x1>
     5c0:	60 91 57 15 	lds	r22, 0x1557	; 0x801557 <ready_bit+0x2>
     5c4:	70 91 58 15 	lds	r23, 0x1558	; 0x801558 <ready_bit+0x3>
     5c8:	80 91 59 15 	lds	r24, 0x1559	; 0x801559 <group_start>
     5cc:	90 91 5a 15 	lds	r25, 0x155A	; 0x80155a <group_start+0x1>
     5d0:	2b d5       	rcall	.+2646   	; 0x1028 <xEventGroupSetBits>
	
	xTaskCreate(startReadingLight
     5d2:	e1 2c       	mov	r14, r1
     5d4:	f1 2c       	mov	r15, r1
     5d6:	9e 01       	movw	r18, r28
     5d8:	48 e8       	ldi	r20, 0x88	; 136
     5da:	51 e0       	ldi	r21, 0x01	; 1
     5dc:	6a e0       	ldi	r22, 0x0A	; 10
     5de:	73 e0       	ldi	r23, 0x03	; 3
     5e0:	8e e7       	ldi	r24, 0x7E	; 126
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <xTaskCreate>
	, "Light task"
	, configMINIMAL_STACK_SIZE + 200,
	(void*) self,
	light_priority,
	NULL);
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <createLightSensor>:
/*
* Method used for allocating memory for LightHandler struct and returning it, initializing the lux value to 0, setting groups and bits,
* initializing the driver, injecting callback, enabling the driver and creating a light task.
*/
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
     5f4:	8f 92       	push	r8
     5f6:	9f 92       	push	r9
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	18 2f       	mov	r17, r24
     608:	7b 01       	movw	r14, r22
     60a:	49 01       	movw	r8, r18
     60c:	5a 01       	movw	r10, r20
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
     60e:	62 e0       	ldi	r22, 0x02	; 2
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <calloc>
     61a:	ec 01       	movw	r28, r24
	
	if(new_measure == NULL){
     61c:	89 2b       	or	r24, r25
     61e:	19 f1       	breq	.+70     	; 0x666 <createLightSensor+0x72>
		return NULL;
	}
	new_measure -> lux = 0;
     620:	19 82       	std	Y+1, r1	; 0x01
     622:	18 82       	st	Y, r1
	ready_bit = bits;
     624:	80 92 55 15 	sts	0x1555, r8	; 0x801555 <ready_bit>
     628:	90 92 56 15 	sts	0x1556, r9	; 0x801556 <ready_bit+0x1>
     62c:	a0 92 57 15 	sts	0x1557, r10	; 0x801557 <ready_bit+0x2>
     630:	b0 92 58 15 	sts	0x1558, r11	; 0x801558 <ready_bit+0x3>
	group_start = eventBits;
     634:	f0 92 5a 15 	sts	0x155A, r15	; 0x80155a <group_start+0x1>
     638:	e0 92 59 15 	sts	0x1559, r14	; 0x801559 <group_start>
	
	//initialize sensor with the callback function
	if ( TSL2591_OK == tsl2591_initialise(tsl2591Callback))
     63c:	88 e9       	ldi	r24, 0x98	; 152
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <tsl2591_initialise>
     644:	81 11       	cpse	r24, r1
     646:	07 c0       	rjmp	.+14     	; 0x656 <createLightSensor+0x62>
	{
		print_sharedf("Light sensor initialized");
     648:	85 e1       	ldi	r24, 0x15	; 21
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	87 d0       	rcall	.+270    	; 0x760 <print_sharedf>
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
	}
	
	//enable sensor
	if ( TSL2591_OK != tsl2591_enable() )
     656:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <tsl2591_enable>
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
     65a:	be 01       	movw	r22, r28
     65c:	81 2f       	mov	r24, r17
     65e:	a5 df       	rcall	.-182    	; 0x5aa <createLightTask>
	return new_measure;
     660:	8c 2f       	mov	r24, r28
     662:	9d 2f       	mov	r25, r29
     664:	02 c0       	rjmp	.+4      	; 0x66a <createLightSensor+0x76>
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
	
	if(new_measure == NULL){
		return NULL;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
	return new_measure;
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	08 95       	ret

0000067e <measure_light>:

//method for measuring
void measure_light(LightHandler_t self){
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	ec 01       	movw	r28, r24
	
	//set bits
	EventBits_t readyBits = xEventGroupWaitBits(group_start,
     690:	40 91 55 15 	lds	r20, 0x1555	; 0x801555 <ready_bit>
     694:	50 91 56 15 	lds	r21, 0x1556	; 0x801556 <ready_bit+0x1>
     698:	60 91 57 15 	lds	r22, 0x1557	; 0x801557 <ready_bit+0x2>
     69c:	70 91 58 15 	lds	r23, 0x1558	; 0x801558 <ready_bit+0x3>
     6a0:	cc 24       	eor	r12, r12
     6a2:	ca 94       	dec	r12
     6a4:	dc 2c       	mov	r13, r12
     6a6:	76 01       	movw	r14, r12
     6a8:	01 e0       	ldi	r16, 0x01	; 1
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	80 91 59 15 	lds	r24, 0x1559	; 0x801559 <group_start>
     6b0:	90 91 5a 15 	lds	r25, 0x155A	; 0x80155a <group_start+0x1>
     6b4:	19 d4       	rcall	.+2098   	; 0xee8 <xEventGroupWaitBits>
	pdFALSE,
	pdTRUE,
	portMAX_DELAY);
	
	//check if all bits are set
	if ((readyBits & (ready_bit)) == (ready_bit)) {
     6b6:	00 91 55 15 	lds	r16, 0x1555	; 0x801555 <ready_bit>
     6ba:	10 91 56 15 	lds	r17, 0x1556	; 0x801556 <ready_bit+0x1>
     6be:	20 91 57 15 	lds	r18, 0x1557	; 0x801557 <ready_bit+0x2>
     6c2:	30 91 58 15 	lds	r19, 0x1558	; 0x801558 <ready_bit+0x3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	80 23       	and	r24, r16
     6cc:	91 23       	and	r25, r17
     6ce:	a2 23       	and	r26, r18
     6d0:	b3 23       	and	r27, r19
     6d2:	08 17       	cp	r16, r24
     6d4:	19 07       	cpc	r17, r25
     6d6:	2a 07       	cpc	r18, r26
     6d8:	3b 07       	cpc	r19, r27
     6da:	39 f4       	brne	.+14     	; 0x6ea <measure_light+0x6c>
		if ( TSL2591_OK != tsl2591_fetchData() )
     6dc:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <tsl2591_fetchData>
     6e0:	81 11       	cpse	r24, r1
     6e2:	03 c0       	rjmp	.+6      	; 0x6ea <measure_light+0x6c>
			// Investigate the return code further
		}
		else
		{
			//The light data will be ready after the driver calls the call back function with
			tsl2591Callback(TSL2591_DATA_READY, self);
     6e4:	be 01       	movw	r22, r28
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	23 df       	rcall	.-442    	; 0x530 <tsl2591Callback>
		}
	}
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	08 95       	ret

000006fc <startReadingLight>:

//reading task for sensors
void startReadingLight(void* self){
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	00 d0       	rcall	.+0      	; 0x702 <startReadingLight+0x6>
     702:	1f 92       	push	r1
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     70a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskGetTickCount>
     70e:	69 83       	std	Y+1, r22	; 0x01
     710:	7a 83       	std	Y+2, r23	; 0x02
     712:	8b 83       	std	Y+3, r24	; 0x03
     714:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds to read
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     716:	42 ea       	ldi	r20, 0xA2	; 162
     718:	53 e0       	ldi	r21, 0x03	; 3
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	ce 01       	movw	r24, r28
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	0e 94 11 17 	call	0x2e22	; 0x2e22 <xTaskDelayUntil>
		measure_light((LightHandler_t) self);
     726:	c8 01       	movw	r24, r16
     728:	aa df       	rcall	.-172    	; 0x67e <measure_light>
     72a:	f5 cf       	rjmp	.-22     	; 0x716 <startReadingLight+0x1a>

0000072c <getLight>:
}


uint16_t getLight(LightHandler_t self){
	return self->lux;
}
     72c:	fc 01       	movw	r30, r24
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	08 95       	ret

00000734 <setLight>:

void setLight(LightHandler_t self){
	self->lux = lux_val;
     734:	20 91 68 07 	lds	r18, 0x0768	; 0x800768 <lux_val>
     738:	30 91 69 07 	lds	r19, 0x0769	; 0x800769 <lux_val+0x1>
     73c:	fc 01       	movw	r30, r24
     73e:	31 83       	std	Z+1, r19	; 0x01
     740:	20 83       	st	Z, r18
     742:	08 95       	ret

00000744 <create_shared_printf>:

/*
* Initialize the semaphore mutex used to print text to the terminal
*/
void create_shared_printf(){
	if (xMutexPrint == NULL ){
     744:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <xMutexPrint>
     748:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <xMutexPrint+0x1>
     74c:	89 2b       	or	r24, r25
     74e:	39 f4       	brne	.+14     	; 0x75e <create_shared_printf+0x1a>
		xMutexPrint = xSemaphoreCreateMutex();
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <xQueueCreateMutex>
     756:	90 93 5c 15 	sts	0x155C, r25	; 0x80155c <xMutexPrint+0x1>
     75a:	80 93 5b 15 	sts	0x155B, r24	; 0x80155b <xMutexPrint>
     75e:	08 95       	ret

00000760 <print_sharedf>:
}

/*
* Method used to print to the terminal, synchronized with the mutex
*/
void print_sharedf(char* format, ...){
     760:	0f 93       	push	r16
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
	va_list lst;
	if (xSemaphoreTake(xMutexPrint, (TickType_t) 300) == pdTRUE) {
     76a:	4c e2       	ldi	r20, 0x2C	; 44
     76c:	51 e0       	ldi	r21, 0x01	; 1
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <xMutexPrint>
     776:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <xMutexPrint+0x1>
     77a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	99 f4       	brne	.+38     	; 0x7a8 <print_sharedf+0x48>
		va_start(lst, format);
		vprintf(format, lst);
     782:	be 01       	movw	r22, r28
     784:	67 5f       	subi	r22, 0xF7	; 247
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	8f 81       	ldd	r24, Y+7	; 0x07
     78a:	98 85       	ldd	r25, Y+8	; 0x08
     78c:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <vprintf>
		xSemaphoreGive(xMutexPrint);
     790:	00 e0       	ldi	r16, 0x00	; 0
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	a9 01       	movw	r20, r18
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <xMutexPrint>
     7a0:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <xMutexPrint+0x1>
     7a4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xQueueGenericSend>
	}
	else {}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret

000007b0 <create_semaphore_mutex_and_sensors>:
SemaphoreHandle_t xMutexSemaphore;

/*
* Method used to initialize pointers to the necessary structs and initializing the mutex for the shared data
*/
void create_semaphore_mutex_and_sensors(Temperature_t temperatureObject, CO2_t co2Object, LightHandler_t lightObject){
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	7c 01       	movw	r14, r24
     7be:	8b 01       	movw	r16, r22
     7c0:	ea 01       	movw	r28, r20
	if (xMutexSemaphore == NULL){
     7c2:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     7c6:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     7ca:	89 2b       	or	r24, r25
     7cc:	39 f4       	brne	.+14     	; 0x7dc <create_semaphore_mutex_and_sensors+0x2c>
		xMutexSemaphore = xSemaphoreCreateMutex();
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <xQueueCreateMutex>
     7d4:	90 93 64 15 	sts	0x1564, r25	; 0x801564 <xMutexSemaphore+0x1>
     7d8:	80 93 63 15 	sts	0x1563, r24	; 0x801563 <xMutexSemaphore>
	}
	
	tempHum = temperatureObject;
     7dc:	f0 92 5e 15 	sts	0x155E, r15	; 0x80155e <tempHum+0x1>
     7e0:	e0 92 5d 15 	sts	0x155D, r14	; 0x80155d <tempHum>
	co2 = co2Object;
     7e4:	10 93 60 15 	sts	0x1560, r17	; 0x801560 <co2+0x1>
     7e8:	00 93 5f 15 	sts	0x155F, r16	; 0x80155f <co2>
	light = lightObject;
     7ec:	d0 93 62 15 	sts	0x1562, r29	; 0x801562 <light+0x1>
     7f0:	c0 93 61 15 	sts	0x1561, r28	; 0x801561 <light>
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	08 95       	ret

00000802 <set_temp_hum_mutex>:

/*
* Method used to set the temperature and humidity, protected by the mutex 
*/
void set_temp_hum_mutex(){
     802:	0f 93       	push	r16
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     804:	4c e2       	ldi	r20, 0x2C	; 44
     806:	51 e0       	ldi	r21, 0x01	; 1
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     810:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     814:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	91 f4       	brne	.+36     	; 0x840 <set_temp_hum_mutex+0x3e>
		temp_hum_set(tempHum);
     81c:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <tempHum>
     820:	90 91 5e 15 	lds	r25, 0x155E	; 0x80155e <tempHum+0x1>
     824:	ff d1       	rcall	.+1022   	; 0xc24 <temp_hum_set>
		xSemaphoreGive(xMutexSemaphore);
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	a9 01       	movw	r20, r18
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     836:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     83a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xQueueGenericSend>
     83e:	07 c0       	rjmp	.+14     	; 0x84e <set_temp_hum_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     840:	8e e2       	ldi	r24, 0x2E	; 46
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	8b df       	rcall	.-234    	; 0x760 <print_sharedf>
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
	}
}
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <get_humidity_val>:

/*
* Getter for the humidity, protected by the mutex
*/
uint16_t get_humidity_val(){
     852:	0f 93       	push	r16
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
	uint16_t tmp;

	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     858:	4c e2       	ldi	r20, 0x2C	; 44
     85a:	51 e0       	ldi	r21, 0x01	; 1
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     864:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     868:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	b1 f4       	brne	.+44     	; 0x89c <get_humidity_val+0x4a>
		tmp = getHumidity(tempHum);
     870:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <tempHum>
     874:	90 91 5e 15 	lds	r25, 0x155E	; 0x80155e <tempHum+0x1>
     878:	d1 d1       	rcall	.+930    	; 0xc1c <getHumidity>
     87a:	d8 2f       	mov	r29, r24
     87c:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     87e:	00 e0       	ldi	r16, 0x00	; 0
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     88e:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     892:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xQueueGenericSend>
		return tmp;
     896:	8d 2f       	mov	r24, r29
     898:	9c 2f       	mov	r25, r28
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <get_humidity_val+0x5c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     89c:	8e e2       	ldi	r24, 0x2E	; 46
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	5d df       	rcall	.-326    	; 0x760 <print_sharedf>
		return 0;
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <get_temp_val>:

/*
* Getter for the temperature, protected by the mutex
*/
float get_temp_val(){
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
	float tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     8c0:	4c e2       	ldi	r20, 0x2C	; 44
     8c2:	51 e0       	ldi	r21, 0x01	; 1
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     8cc:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     8d0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	d1 f4       	brne	.+52     	; 0x90c <get_temp_val+0x56>
		tmp = getTemperature(tempHum);
     8d8:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <tempHum>
     8dc:	90 91 5e 15 	lds	r25, 0x155E	; 0x80155e <tempHum+0x1>
     8e0:	97 d1       	rcall	.+814    	; 0xc10 <getTemperature>
     8e2:	f6 2e       	mov	r15, r22
     8e4:	17 2f       	mov	r17, r23
     8e6:	d8 2f       	mov	r29, r24
     8e8:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	a9 01       	movw	r20, r18
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     8fa:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     8fe:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xQueueGenericSend>
		return tmp;
     902:	5f 2d       	mov	r21, r15
     904:	41 2f       	mov	r20, r17
     906:	3d 2f       	mov	r19, r29
     908:	2c 2f       	mov	r18, r28
     90a:	0b c0       	rjmp	.+22     	; 0x922 <get_temp_val+0x6c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     90c:	8e e2       	ldi	r24, 0x2E	; 46
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	25 df       	rcall	.-438    	; 0x760 <print_sharedf>
		return 0.0;
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     922:	65 2f       	mov	r22, r21
     924:	74 2f       	mov	r23, r20
     926:	83 2f       	mov	r24, r19
     928:	92 2f       	mov	r25, r18
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	08 95       	ret

00000936 <set_co2_mutex>:

/*
* Setter for the co2, protected by the mutex
*/
void set_co2_mutex(){
     936:	0f 93       	push	r16
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     938:	4c e2       	ldi	r20, 0x2C	; 44
     93a:	51 e0       	ldi	r21, 0x01	; 1
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     944:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     948:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	91 f4       	brne	.+36     	; 0x974 <set_co2_mutex+0x3e>
		set_co2(co2);
     950:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <co2>
     954:	90 91 60 15 	lds	r25, 0x1560	; 0x801560 <co2+0x1>
     958:	8a dd       	rcall	.-1260   	; 0x46e <set_co2>
		xSemaphoreGive(xMutexSemaphore);
     95a:	00 e0       	ldi	r16, 0x00	; 0
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	a9 01       	movw	r20, r18
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     96a:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     96e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xQueueGenericSend>
     972:	07 c0       	rjmp	.+14     	; 0x982 <set_co2_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     974:	8e e2       	ldi	r24, 0x2E	; 46
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	f1 de       	rcall	.-542    	; 0x760 <print_sharedf>
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
	}
}
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <get_co2_mutex>:

/*
* Getter for co2, protected by the mutex
*/
uint16_t get_co2_mutex(){
     986:	0f 93       	push	r16
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     98c:	4c e2       	ldi	r20, 0x2C	; 44
     98e:	51 e0       	ldi	r21, 0x01	; 1
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     998:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     99c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	a9 f4       	brne	.+42     	; 0x9ce <get_co2_mutex+0x48>
		tmp = getCO2(co2);
     9a4:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <co2>
     9a8:	90 91 60 15 	lds	r25, 0x1560	; 0x801560 <co2+0x1>
     9ac:	5c dd       	rcall	.-1352   	; 0x466 <getCO2>
     9ae:	d8 2f       	mov	r29, r24
     9b0:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	a9 01       	movw	r20, r18
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     9c2:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     9c6:	fd d7       	rcall	.+4090   	; 0x19c2 <xQueueGenericSend>
		return tmp;
     9c8:	8d 2f       	mov	r24, r29
     9ca:	9c 2f       	mov	r25, r28
     9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <get_co2_mutex+0x5a>
		} else{
		print_sharedf("The mutex could not be obtained.");
     9ce:	8e e2       	ldi	r24, 0x2E	; 46
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	9f 93       	push	r25
     9d4:	8f 93       	push	r24
     9d6:	c4 de       	rcall	.-632    	; 0x760 <print_sharedf>
		return 0;
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	0f 91       	pop	r16
     9e6:	08 95       	ret

000009e8 <set_light_mutex>:

/*
* Setter for light levels, protected by the mutex
*/
void set_light_mutex(){
     9e8:	0f 93       	push	r16
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     9ea:	4c e2       	ldi	r20, 0x2C	; 44
     9ec:	51 e0       	ldi	r21, 0x01	; 1
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     9f6:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     9fa:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	89 f4       	brne	.+34     	; 0xa24 <set_light_mutex+0x3c>
		setLight(light);
     a02:	80 91 61 15 	lds	r24, 0x1561	; 0x801561 <light>
     a06:	90 91 62 15 	lds	r25, 0x1562	; 0x801562 <light+0x1>
     a0a:	94 de       	rcall	.-728    	; 0x734 <setLight>
		xSemaphoreGive(xMutexSemaphore);
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	a9 01       	movw	r20, r18
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     a1c:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     a20:	d0 d7       	rcall	.+4000   	; 0x19c2 <xQueueGenericSend>
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <set_light_mutex+0x4a>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a24:	8e e2       	ldi	r24, 0x2E	; 46
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	99 de       	rcall	.-718    	; 0x760 <print_sharedf>
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
	}
}
     a32:	0f 91       	pop	r16
     a34:	08 95       	ret

00000a36 <get_light_mutex>:

/*
* Getter for the light levels, protected by the mutex
*/
uint16_t get_light_mutex(){
     a36:	0f 93       	push	r16
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     a3c:	4c e2       	ldi	r20, 0x2C	; 44
     a3e:	51 e0       	ldi	r21, 0x01	; 1
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     a48:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     a4c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <xQueueSemaphoreTake>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	a9 f4       	brne	.+42     	; 0xa7e <get_light_mutex+0x48>
		tmp = getLight(light);
     a54:	80 91 61 15 	lds	r24, 0x1561	; 0x801561 <light>
     a58:	90 91 62 15 	lds	r25, 0x1562	; 0x801562 <light+0x1>
     a5c:	67 de       	rcall	.-818    	; 0x72c <getLight>
     a5e:	d8 2f       	mov	r29, r24
     a60:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	a9 01       	movw	r20, r18
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xMutexSemaphore>
     a72:	90 91 64 15 	lds	r25, 0x1564	; 0x801564 <xMutexSemaphore+0x1>
     a76:	a5 d7       	rcall	.+3914   	; 0x19c2 <xQueueGenericSend>
		return tmp;
     a78:	8d 2f       	mov	r24, r29
     a7a:	9c 2f       	mov	r25, r28
     a7c:	09 c0       	rjmp	.+18     	; 0xa90 <get_light_mutex+0x5a>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a7e:	8e e2       	ldi	r24, 0x2E	; 46
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	6c de       	rcall	.-808    	; 0x760 <print_sharedf>
		return 0;
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
	}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <temperature_handler_init>:
} TemperatureHandler;

/*
* initialize bits and create the task
*/
void temperature_handler_init(Temperature_t self, uint16_t priority){
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ec 01       	movw	r28, r24
     aa4:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     aa6:	40 91 55 15 	lds	r20, 0x1555	; 0x801555 <ready_bit>
     aaa:	50 91 56 15 	lds	r21, 0x1556	; 0x801556 <ready_bit+0x1>
     aae:	60 91 57 15 	lds	r22, 0x1557	; 0x801557 <ready_bit+0x2>
     ab2:	70 91 58 15 	lds	r23, 0x1558	; 0x801558 <ready_bit+0x3>
     ab6:	80 91 59 15 	lds	r24, 0x1559	; 0x801559 <group_start>
     aba:	90 91 5a 15 	lds	r25, 0x155A	; 0x80155a <group_start+0x1>
     abe:	b4 d2       	rcall	.+1384   	; 0x1028 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     ac0:	e1 2c       	mov	r14, r1
     ac2:	f1 2c       	mov	r15, r1
     ac4:	9e 01       	movw	r18, r28
     ac6:	40 ec       	ldi	r20, 0xC0	; 192
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	6f e4       	ldi	r22, 0x4F	; 79
     acc:	73 e0       	ldi	r23, 0x03	; 3
     ace:	85 eb       	ldi	r24, 0xB5	; 181
     ad0:	95 e0       	ldi	r25, 0x05	; 5
     ad2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <xTaskCreate>
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <createTemp>:

/*
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	8c 01       	movw	r16, r24
     af8:	5b 01       	movw	r10, r22
     afa:	69 01       	movw	r12, r18
     afc:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     afe:	86 e0       	ldi	r24, 0x06	; 6
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <malloc>
     b06:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     b08:	89 2b       	or	r24, r25
     b0a:	01 f1       	breq	.+64     	; 0xb4c <createTemp+0x6a>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     b0c:	18 82       	st	Y, r1
     b0e:	19 82       	std	Y+1, r1	; 0x01
     b10:	1a 82       	std	Y+2, r1	; 0x02
     b12:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     b14:	1d 82       	std	Y+5, r1	; 0x05
     b16:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     b18:	b0 92 5a 15 	sts	0x155A, r11	; 0x80155a <group_start+0x1>
     b1c:	a0 92 59 15 	sts	0x1559, r10	; 0x801559 <group_start>
	ready_bit = bit;
     b20:	c0 92 55 15 	sts	0x1555, r12	; 0x801555 <ready_bit>
     b24:	d0 92 56 15 	sts	0x1556, r13	; 0x801556 <ready_bit+0x1>
     b28:	e0 92 57 15 	sts	0x1557, r14	; 0x801557 <ready_bit+0x2>
     b2c:	f0 92 58 15 	sts	0x1558, r15	; 0x801558 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     b30:	0e 94 28 24 	call	0x4850	; 0x4850 <hih8120_initialise>
     b34:	81 11       	cpse	r24, r1
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <createTemp+0x5e>
	{
		puts("Temp sensor initialized.");
     b38:	80 e6       	ldi	r24, 0x60	; 96
     b3a:	93 e0       	ldi	r25, 0x03	; 3
     b3c:	0e 94 7e 38 	call	0x70fc	; 0x70fc <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     b40:	b8 01       	movw	r22, r16
     b42:	ce 01       	movw	r24, r28
     b44:	a9 df       	rcall	.-174    	; 0xa98 <temperature_handler_init>
	return new_measure;
     b46:	8c 2f       	mov	r24, r28
     b48:	9d 2f       	mov	r25, r29
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <createTemp+0x6e>
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	bf 90       	pop	r11
     b62:	af 90       	pop	r10
     b64:	08 95       	ret

00000b66 <measureTempAndHum>:

/*
* set data using the shared sensor data c file
*/
void measureTempAndHum(Temperature_t self){
	set_temp_hum_mutex();
     b66:	4d ce       	rjmp	.-870    	; 0x802 <set_temp_hum_mutex>
     b68:	08 95       	ret

00000b6a <startReading>:
}

/*
* start reading data
*/
void startReading(void* self){
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <startReading+0x6>
     b70:	1f 92       	push	r1
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     b78:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskGetTickCount>
     b7c:	69 83       	std	Y+1, r22	; 0x01
     b7e:	7a 83       	std	Y+2, r23	; 0x02
     b80:	8b 83       	std	Y+3, r24	; 0x03
     b82:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     b84:	42 ea       	ldi	r20, 0xA2	; 162
     b86:	53 e0       	ldi	r21, 0x03	; 3
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 11 17 	call	0x2e22	; 0x2e22 <xTaskDelayUntil>
		//wake-up sensor
		if (HIH8120_OK != hih8120_wakeup())
     b94:	0e 94 40 24 	call	0x4880	; 0x4880 <hih8120_wakeup>
     b98:	88 23       	and	r24, r24
     b9a:	21 f0       	breq	.+8      	; 0xba4 <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     b9c:	89 e7       	ldi	r24, 0x79	; 121
     b9e:	93 e0       	ldi	r25, 0x03	; 3
     ba0:	0e 94 7e 38 	call	0x70fc	; 0x70fc <puts>
		}
		
		//set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     ba4:	40 91 55 15 	lds	r20, 0x1555	; 0x801555 <ready_bit>
     ba8:	50 91 56 15 	lds	r21, 0x1556	; 0x801556 <ready_bit+0x1>
     bac:	60 91 57 15 	lds	r22, 0x1557	; 0x801557 <ready_bit+0x2>
     bb0:	70 91 58 15 	lds	r23, 0x1558	; 0x801558 <ready_bit+0x3>
     bb4:	cc 24       	eor	r12, r12
     bb6:	ca 94       	dec	r12
     bb8:	dc 2c       	mov	r13, r12
     bba:	76 01       	movw	r14, r12
     bbc:	01 e0       	ldi	r16, 0x01	; 1
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	80 91 59 15 	lds	r24, 0x1559	; 0x801559 <group_start>
     bc4:	90 91 5a 15 	lds	r25, 0x155A	; 0x80155a <group_start+0x1>
     bc8:	8f d1       	rcall	.+798    	; 0xee8 <xEventGroupWaitBits>
     bca:	6b 01       	movw	r12, r22
     bcc:	7c 01       	movw	r14, r24
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		//give the sensor time to wake up
		vTaskDelay(pdMS_TO_TICKS(70));
     bce:	64 e0       	ldi	r22, 0x04	; 4
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 76 17 	call	0x2eec	; 0x2eec <vTaskDelay>
		//check if the bits are set
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     bda:	80 91 55 15 	lds	r24, 0x1555	; 0x801555 <ready_bit>
     bde:	90 91 56 15 	lds	r25, 0x1556	; 0x801556 <ready_bit+0x1>
     be2:	a0 91 57 15 	lds	r26, 0x1557	; 0x801557 <ready_bit+0x2>
     be6:	b0 91 58 15 	lds	r27, 0x1558	; 0x801558 <ready_bit+0x3>
     bea:	c8 22       	and	r12, r24
     bec:	d9 22       	and	r13, r25
     bee:	ea 22       	and	r14, r26
     bf0:	fb 22       	and	r15, r27
     bf2:	8c 15       	cp	r24, r12
     bf4:	9d 05       	cpc	r25, r13
     bf6:	ae 05       	cpc	r26, r14
     bf8:	bf 05       	cpc	r27, r15
     bfa:	21 f6       	brne	.-120    	; 0xb84 <startReading+0x1a>
			hih8120_measure(); //measure temperature and humidity
     bfc:	0e 94 55 24 	call	0x48aa	; 0x48aa <hih8120_measure>
			vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	cb 01       	movw	r24, r22
     c06:	0e 94 76 17 	call	0x2eec	; 0x2eec <vTaskDelay>
			
			measureTempAndHum((Temperature_t) self);
     c0a:	c5 01       	movw	r24, r10
     c0c:	ac df       	rcall	.-168    	; 0xb66 <measureTempAndHum>
     c0e:	ba cf       	rjmp	.-140    	; 0xb84 <startReading+0x1a>

00000c10 <getTemperature>:

/*
* getter for temperature
*/
float getTemperature(Temperature_t self){
	return self->temperature;
     c10:	fc 01       	movw	r30, r24
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	93 81       	ldd	r25, Z+3	; 0x03
}
     c1a:	08 95       	ret

00000c1c <getHumidity>:
/*
* getter for humidity
*/
uint16_t getHumidity(Temperature_t self){
	return self -> humidity;
}
     c1c:	fc 01       	movw	r30, r24
     c1e:	84 81       	ldd	r24, Z+4	; 0x04
     c20:	95 81       	ldd	r25, Z+5	; 0x05
     c22:	08 95       	ret

00000c24 <temp_hum_set>:

/*
* setter for both temperature and humidity
*/
void temp_hum_set(Temperature_t self){
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     c2a:	0e 94 83 24 	call	0x4906	; 0x4906 <hih8120_getTemperature>
     c2e:	68 83       	st	Y, r22
     c30:	79 83       	std	Y+1, r23	; 0x01
     c32:	8a 83       	std	Y+2, r24	; 0x02
     c34:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10()/10;
     c36:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <hih8120_getHumidityPercent_x10>
     c3a:	9c 01       	movw	r18, r24
     c3c:	ad ec       	ldi	r26, 0xCD	; 205
     c3e:	bc ec       	ldi	r27, 0xCC	; 204
     c40:	0e 94 94 35 	call	0x6b28	; 0x6b28 <__umulhisi3>
     c44:	96 95       	lsr	r25
     c46:	87 95       	ror	r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	96 95       	lsr	r25
     c4e:	87 95       	ror	r24
     c50:	9d 83       	std	Y+5, r25	; 0x05
     c52:	8c 83       	std	Y+4, r24	; 0x04
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	64 97       	sbiw	r28, 0x14	; 20
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;

	// Factory reset the transceiver
	lora_driver_rn2483FactoryReset();
     c72:	0e 94 09 26 	call	0x4c12	; 0x4c12 <lora_driver_rn2483FactoryReset>
	
	// Configure to EU868 LoRaWAN standards
	lora_driver_configureToEu868();
     c76:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <lora_driver_configureToEu868>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <lora_driver_getRn2483Hweui>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	lora_driver_setDeviceIdentifier(_out_buf);
     c82:	ce 01       	movw	r24, r28
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <lora_driver_setDeviceIdentifier>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf);
     c8a:	ae 01       	movw	r20, r28
     c8c:	4f 5f       	subi	r20, 0xFF	; 255
     c8e:	5f 4f       	sbci	r21, 0xFF	; 255
     c90:	63 e9       	ldi	r22, 0x93	; 147
     c92:	73 e0       	ldi	r23, 0x03	; 3
     c94:	84 eb       	ldi	r24, 0xB4	; 180
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	0e 94 65 28 	call	0x50ca	; 0x50ca <lora_driver_setOtaaIdentity>

	// Save all the MAC settings in the transceiver
	lora_driver_saveMac();
     c9c:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <lora_driver_saveMac>

	// Enable Adaptive Data Rate
	lora_driver_setAdaptiveDataRate(LORA_ON);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <lora_driver_setAdaptiveDataRate>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	lora_driver_setReceiveDelay(500);
     ca6:	84 ef       	ldi	r24, 0xF4	; 244
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 6f 27 	call	0x4ede	; 0x4ede <lora_driver_setReceiveDelay>

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     cae:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <lora_driver_join>
     cb6:	08 2f       	mov	r16, r24
		print_sharedf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     cb8:	0e 94 86 28 	call	0x510c	; 0x510c <lora_driver_mapReturnCodeToText>
     cbc:	9f 93       	push	r25
     cbe:	8f 93       	push	r24
     cc0:	1f 92       	push	r1
     cc2:	1f 93       	push	r17
     cc4:	85 ec       	ldi	r24, 0xC5	; 197
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	49 dd       	rcall	.-1390   	; 0x760 <print_sharedf>

		if ( rc != LORA_ACCEPTED)
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	08 30       	cpi	r16, 0x08	; 8
     cdc:	41 f0       	breq	.+16     	; 0xcee <_lora_setup+0x94>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     cde:	66 e3       	ldi	r22, 0x36	; 54
     ce0:	71 e0       	ldi	r23, 0x01	; 1
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 76 17 	call	0x2eec	; 0x2eec <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     cea:	11 50       	subi	r17, 0x01	; 1
     cec:	09 f7       	brne	.-62     	; 0xcb0 <_lora_setup+0x56>

	if (rc == LORA_ACCEPTED)
     cee:	08 30       	cpi	r16, 0x08	; 8
     cf0:	41 f4       	brne	.+16     	; 0xd02 <_lora_setup+0xa8>
	{
		// Connected to LoRaWAN :-)
		print_sharedf("Connected to the LoRaWAN Network successfully.");
     cf2:	85 ee       	ldi	r24, 0xE5	; 229
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	32 dd       	rcall	.-1436   	; 0x760 <print_sharedf>
		while (1)
		{
			taskYIELD();
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
	{
		// Something went wrong
		// Lets stay here
		while (1)
		{
			taskYIELD();
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <_lora_setup+0xac>
     d02:	47 d4       	rcall	.+2190   	; 0x1592 <vPortYield>
     d04:	fe cf       	rjmp	.-4      	; 0xd02 <_lora_setup+0xa8>
		}
	}
}
     d06:	64 96       	adiw	r28, 0x14	; 20
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <lora_handler_task>:

void lora_handler_task(void* pvParameters){
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <lora_driver_resetRn2483>
	vTaskDelay(2);
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 76 17 	call	0x2eec	; 0x2eec <vTaskDelay>
	lora_driver_resetRn2483(0);
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     d48:	66 e9       	ldi	r22, 0x96	; 150
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 76 17 	call	0x2eec	; 0x2eec <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     d54:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <lora_driver_flushBuffers>

	_lora_setup();
     d58:	80 df       	rcall	.-256    	; 0xc5a <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     d5a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskGetTickCount>
     d5e:	69 83       	std	Y+1, r22	; 0x01
     d60:	7a 83       	std	Y+2, r23	; 0x02
     d62:	8b 83       	std	Y+3, r24	; 0x03
     d64:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     d66:	44 e4       	ldi	r20, 0x44	; 68
     d68:	57 e0       	ldi	r21, 0x07	; 7
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	ce 01       	movw	r24, r28
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	0e 94 11 17 	call	0x2e22	; 0x2e22 <xTaskDelayUntil>
		_uplink_payload.len = 7;
     d76:	0a e6       	ldi	r16, 0x6A	; 106
     d78:	17 e0       	ldi	r17, 0x07	; 7
     d7a:	87 e0       	ldi	r24, 0x07	; 7
     d7c:	f8 01       	movw	r30, r16
     d7e:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
		
		double temp = (double) get_temp_val();
     d82:	80 83       	st	Z, r24
     d84:	98 dd       	rcall	.-1232   	; 0x8b6 <get_temp_val>
     d86:	36 2e       	mov	r3, r22
     d88:	87 2e       	mov	r8, r23
     d8a:	a8 2e       	mov	r10, r24
		uint16_t humidity = get_humidity_val();
     d8c:	99 2e       	mov	r9, r25
     d8e:	61 dd       	rcall	.-1342   	; 0x852 <get_humidity_val>
     d90:	b8 2e       	mov	r11, r24
		uint16_t co2_val = get_co2_mutex();
     d92:	29 2e       	mov	r2, r25
     d94:	f8 dd       	rcall	.-1040   	; 0x986 <get_co2_mutex>
     d96:	d8 2e       	mov	r13, r24
		uint16_t light_val = get_light_mutex();
     d98:	c9 2e       	mov	r12, r25
     d9a:	4d de       	rcall	.-870    	; 0xa36 <get_light_mutex>
     d9c:	f8 2e       	mov	r15, r24
     d9e:	e9 2e       	mov	r14, r25
		
		double val1=0;
     da0:	1d 82       	std	Y+5, r1	; 0x05
     da2:	1e 82       	std	Y+6, r1	; 0x06
     da4:	1f 82       	std	Y+7, r1	; 0x07
     da6:	18 86       	std	Y+8, r1	; 0x08
		double val2=0;
		val2 = modf(temp, &val1);
     da8:	ae 01       	movw	r20, r28
     daa:	4b 5f       	subi	r20, 0xFB	; 251
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	63 2d       	mov	r22, r3
     db0:	78 2d       	mov	r23, r8
     db2:	8a 2d       	mov	r24, r10
     db4:	99 2d       	mov	r25, r9
     db6:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <modf>
		val2 = val2 * 100;
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	48 ec       	ldi	r20, 0xC8	; 200
     dc0:	52 e4       	ldi	r21, 0x42	; 66
     dc2:	0e 94 0b 23 	call	0x4616	; 0x4616 <__mulsf3>
     dc6:	2b 01       	movw	r4, r22
     dc8:	3c 01       	movw	r6, r24
		
		//temperature
		print_sharedf("\ntemp: %f", temp);
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	8f 92       	push	r8
     dd0:	3f 92       	push	r3
     dd2:	84 e1       	ldi	r24, 0x14	; 20
     dd4:	94 e0       	ldi	r25, 0x04	; 4
     dd6:	9f 93       	push	r25
     dd8:	8f 93       	push	r24
     dda:	c2 dc       	rcall	.-1660   	; 0x760 <print_sharedf>
		_uplink_payload.bytes[0] = (int) val1;
     ddc:	6d 81       	ldd	r22, Y+5	; 0x05
     dde:	7e 81       	ldd	r23, Y+6	; 0x06
     de0:	8f 81       	ldd	r24, Y+7	; 0x07
     de2:	98 85       	ldd	r25, Y+8	; 0x08
     de4:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__fixsfsi>
     de8:	f8 01       	movw	r30, r16
     dea:	62 83       	std	Z+2, r22	; 0x02
		_uplink_payload.bytes[1] = (int) val2;
     dec:	c3 01       	movw	r24, r6
     dee:	b2 01       	movw	r22, r4
     df0:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__fixsfsi>
     df4:	f8 01       	movw	r30, r16
     df6:	63 83       	std	Z+3, r22	; 0x03
		
		//humidity
		print_sharedf("\nhumidity: %d", humidity);
     df8:	2f 92       	push	r2
     dfa:	bf 92       	push	r11
     dfc:	8e e1       	ldi	r24, 0x1E	; 30
     dfe:	94 e0       	ldi	r25, 0x04	; 4
     e00:	9f 93       	push	r25
     e02:	8f 93       	push	r24
     e04:	ad dc       	rcall	.-1702   	; 0x760 <print_sharedf>
		_uplink_payload.bytes[2] = humidity;
     e06:	f8 01       	movw	r30, r16
		
		//co2
		print_sharedf("\nco2: %d", co2_val);
     e08:	b4 82       	std	Z+4, r11	; 0x04
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	8c e2       	ldi	r24, 0x2C	; 44
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	9f 93       	push	r25
     e14:	8f 93       	push	r24
     e16:	a4 dc       	rcall	.-1720   	; 0x760 <print_sharedf>
		_uplink_payload.bytes[3] = co2_val >> 8;
     e18:	f8 01       	movw	r30, r16
		_uplink_payload.bytes[4] = co2_val & 0xFF;
     e1a:	c5 82       	std	Z+5, r12	; 0x05
		
		//light
		print_sharedf("\nlight in lux: %d", light_val);
     e1c:	d6 82       	std	Z+6, r13	; 0x06
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	85 e3       	ldi	r24, 0x35	; 53
     e24:	94 e0       	ldi	r25, 0x04	; 4
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	9a dc       	rcall	.-1740   	; 0x760 <print_sharedf>
		_uplink_payload.bytes[5] = light_val >> 8;
     e2c:	f8 01       	movw	r30, r16
     e2e:	e7 82       	std	Z+7, r14	; 0x07
		_uplink_payload.bytes[6] = light_val & 0xFF;
     e30:	f0 86       	std	Z+8, r15	; 0x08
		
		print_sharedf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     e32:	b8 01       	movw	r22, r16
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 99 26 	call	0x4d32	; 0x4d32 <lora_driver_sendUploadMessage>
     e3a:	0e 94 86 28 	call	0x510c	; 0x510c <lora_driver_mapReturnCodeToText>
     e3e:	9f 93       	push	r25
     e40:	8f 93       	push	r24
     e42:	87 e4       	ldi	r24, 0x47	; 71
     e44:	94 e0       	ldi	r25, 0x04	; 4
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	8a dc       	rcall	.-1772   	; 0x760 <print_sharedf>
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	87 cf       	rjmp	.-242    	; 0xd66 <lora_handler_task+0x4a>

00000e58 <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;


void lora_handler_task(void* pvParameters);

void lora_handler_initialize(uint16_t lora_handler_task_priority){
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
	
	xTaskCreate(
     e5e:	e1 2c       	mov	r14, r1
     e60:	f1 2c       	mov	r15, r1
     e62:	08 2f       	mov	r16, r24
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	48 e8       	ldi	r20, 0x88	; 136
     e6a:	51 e0       	ldi	r21, 0x01	; 1
     e6c:	6c e5       	ldi	r22, 0x5C	; 92
     e6e:	74 e0       	ldi	r23, 0x04	; 4
     e70:	8e e8       	ldi	r24, 0x8E	; 142
     e72:	96 e0       	ldi	r25, 0x06	; 6
     e74:	0e 94 71 14 	call	0x28e2	; 0x28e2 <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	08 95       	ret

00000e80 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     e80:	0f 93       	push	r16
     e82:	01 11       	cpse	r16, r1
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <prvTestWaitCondition+0x1e>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	82 23       	and	r24, r18
     e8c:	93 23       	and	r25, r19
     e8e:	a4 23       	and	r26, r20
     e90:	b5 23       	and	r27, r21
     e92:	89 2b       	or	r24, r25
     e94:	8a 2b       	or	r24, r26
     e96:	8b 2b       	or	r24, r27
     e98:	79 f4       	brne	.+30     	; 0xeb8 <prvTestWaitCondition+0x38>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <prvTestWaitCondition+0x3e>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	82 23       	and	r24, r18
     ea4:	93 23       	and	r25, r19
     ea6:	a4 23       	and	r26, r20
     ea8:	b5 23       	and	r27, r21
     eaa:	28 17       	cp	r18, r24
     eac:	39 07       	cpc	r19, r25
     eae:	4a 07       	cpc	r20, r26
     eb0:	5b 07       	cpc	r21, r27
     eb2:	21 f0       	breq	.+8      	; 0xebc <prvTestWaitCondition+0x3c>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <prvTestWaitCondition+0x3e>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	01 c0       	rjmp	.+2      	; 0xebe <prvTestWaitCondition+0x3e>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <xEventGroupCreate>:
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	8f e0       	ldi	r24, 0x0F	; 15
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	af d1       	rcall	.+862    	; 0x122a <pvPortMalloc>
     ecc:	ec 01       	movw	r28, r24
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	39 f0       	breq	.+14     	; 0xee0 <xEventGroupCreate+0x1e>
     ed2:	fc 01       	movw	r30, r24
     ed4:	11 92       	st	Z+, r1
     ed6:	11 92       	st	Z+, r1
     ed8:	11 92       	st	Z+, r1
     eda:	11 92       	st	Z+, r1
     edc:	cf 01       	movw	r24, r30
     ede:	8b d2       	rcall	.+1302   	; 0x13f6 <vListInitialise>
     ee0:	ce 01       	movw	r24, r28
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <xEventGroupWaitBits>:
     ee8:	2f 92       	push	r2
     eea:	3f 92       	push	r3
     eec:	4f 92       	push	r4
     eee:	5f 92       	push	r5
     ef0:	6f 92       	push	r6
     ef2:	7f 92       	push	r7
     ef4:	8f 92       	push	r8
     ef6:	9f 92       	push	r9
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ec 01       	movw	r28, r24
     f0e:	4a 01       	movw	r8, r20
     f10:	5b 01       	movw	r10, r22
     f12:	62 2e       	mov	r6, r18
     f14:	70 2e       	mov	r7, r16
     f16:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vTaskSuspendAll>
     f1a:	28 80       	ld	r2, Y
     f1c:	39 80       	ldd	r3, Y+1	; 0x01
     f1e:	4a 80       	ldd	r4, Y+2	; 0x02
     f20:	5b 80       	ldd	r5, Y+3	; 0x03
     f22:	a5 01       	movw	r20, r10
     f24:	94 01       	movw	r18, r8
     f26:	c2 01       	movw	r24, r4
     f28:	b1 01       	movw	r22, r2
     f2a:	aa df       	rcall	.-172    	; 0xe80 <prvTestWaitCondition>
     f2c:	88 23       	and	r24, r24
     f2e:	a1 f0       	breq	.+40     	; 0xf58 <xEventGroupWaitBits+0x70>
     f30:	66 20       	and	r6, r6
     f32:	89 f1       	breq	.+98     	; 0xf96 <xEventGroupWaitBits+0xae>
     f34:	d5 01       	movw	r26, r10
     f36:	c4 01       	movw	r24, r8
     f38:	80 95       	com	r24
     f3a:	90 95       	com	r25
     f3c:	a0 95       	com	r26
     f3e:	b0 95       	com	r27
     f40:	82 21       	and	r24, r2
     f42:	93 21       	and	r25, r3
     f44:	a4 21       	and	r26, r4
     f46:	b5 21       	and	r27, r5
     f48:	88 83       	st	Y, r24
     f4a:	99 83       	std	Y+1, r25	; 0x01
     f4c:	aa 83       	std	Y+2, r26	; 0x02
     f4e:	bb 83       	std	Y+3, r27	; 0x03
     f50:	c1 2c       	mov	r12, r1
     f52:	d1 2c       	mov	r13, r1
     f54:	76 01       	movw	r14, r12
     f56:	22 c0       	rjmp	.+68     	; 0xf9c <xEventGroupWaitBits+0xb4>
     f58:	c1 14       	cp	r12, r1
     f5a:	d1 04       	cpc	r13, r1
     f5c:	e1 04       	cpc	r14, r1
     f5e:	f1 04       	cpc	r15, r1
     f60:	e9 f0       	breq	.+58     	; 0xf9c <xEventGroupWaitBits+0xb4>
     f62:	61 10       	cpse	r6, r1
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <xEventGroupWaitBits+0x86>
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	ba 01       	movw	r22, r20
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <xEventGroupWaitBits+0x8e>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	71 e0       	ldi	r23, 0x01	; 1
     f76:	71 10       	cpse	r7, r1
     f78:	74 60       	ori	r23, 0x04	; 4
     f7a:	48 29       	or	r20, r8
     f7c:	59 29       	or	r21, r9
     f7e:	6a 29       	or	r22, r10
     f80:	7b 29       	or	r23, r11
     f82:	97 01       	movw	r18, r14
     f84:	86 01       	movw	r16, r12
     f86:	ce 01       	movw	r24, r28
     f88:	04 96       	adiw	r24, 0x04	; 4
     f8a:	0e 94 0d 18 	call	0x301a	; 0x301a <vTaskPlaceOnUnorderedEventList>
     f8e:	21 2c       	mov	r2, r1
     f90:	31 2c       	mov	r3, r1
     f92:	21 01       	movw	r4, r2
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <xEventGroupWaitBits+0xb4>
     f96:	c1 2c       	mov	r12, r1
     f98:	d1 2c       	mov	r13, r1
     f9a:	76 01       	movw	r14, r12
     f9c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
     fa0:	cd 28       	or	r12, r13
     fa2:	ce 28       	or	r12, r14
     fa4:	cf 28       	or	r12, r15
     fa6:	59 f1       	breq	.+86     	; 0xffe <xEventGroupWaitBits+0x116>
     fa8:	81 11       	cpse	r24, r1
     faa:	01 c0       	rjmp	.+2      	; 0xfae <xEventGroupWaitBits+0xc6>
     fac:	f2 d2       	rcall	.+1508   	; 0x1592 <vPortYield>
     fae:	0e 94 cf 1b 	call	0x379e	; 0x379e <uxTaskResetEventItemValue>
     fb2:	6b 01       	movw	r12, r22
     fb4:	7c 01       	movw	r14, r24
     fb6:	91 fd       	sbrc	r25, 1
     fb8:	1f c0       	rjmp	.+62     	; 0xff8 <xEventGroupWaitBits+0x110>
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	0f 92       	push	r0
     fc0:	c8 80       	ld	r12, Y
     fc2:	d9 80       	ldd	r13, Y+1	; 0x01
     fc4:	ea 80       	ldd	r14, Y+2	; 0x02
     fc6:	fb 80       	ldd	r15, Y+3	; 0x03
     fc8:	07 2d       	mov	r16, r7
     fca:	a5 01       	movw	r20, r10
     fcc:	94 01       	movw	r18, r8
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	56 df       	rcall	.-340    	; 0xe80 <prvTestWaitCondition>
     fd4:	88 23       	and	r24, r24
     fd6:	71 f0       	breq	.+28     	; 0xff4 <xEventGroupWaitBits+0x10c>
     fd8:	66 20       	and	r6, r6
     fda:	61 f0       	breq	.+24     	; 0xff4 <xEventGroupWaitBits+0x10c>
     fdc:	80 94       	com	r8
     fde:	90 94       	com	r9
     fe0:	a0 94       	com	r10
     fe2:	b0 94       	com	r11
     fe4:	8c 20       	and	r8, r12
     fe6:	9d 20       	and	r9, r13
     fe8:	ae 20       	and	r10, r14
     fea:	bf 20       	and	r11, r15
     fec:	88 82       	st	Y, r8
     fee:	99 82       	std	Y+1, r9	; 0x01
     ff0:	aa 82       	std	Y+2, r10	; 0x02
     ff2:	bb 82       	std	Y+3, r11	; 0x03
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	16 01       	movw	r2, r12
     ffa:	27 01       	movw	r4, r14
     ffc:	55 24       	eor	r5, r5
     ffe:	c2 01       	movw	r24, r4
    1000:	b1 01       	movw	r22, r2
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	7f 90       	pop	r7
    101c:	6f 90       	pop	r6
    101e:	5f 90       	pop	r5
    1020:	4f 90       	pop	r4
    1022:	3f 90       	pop	r3
    1024:	2f 90       	pop	r2
    1026:	08 95       	ret

00001028 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
    1028:	4f 92       	push	r4
    102a:	5f 92       	push	r5
    102c:	6f 92       	push	r6
    102e:	7f 92       	push	r7
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	6a 01       	movw	r12, r20
    1048:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    104a:	8c 01       	movw	r16, r24
    104c:	09 5f       	subi	r16, 0xF9	; 249
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1050:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1054:	eb 85       	ldd	r30, Y+11	; 0x0b
    1056:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1058:	88 81       	ld	r24, Y
    105a:	99 81       	ldd	r25, Y+1	; 0x01
    105c:	aa 81       	ldd	r26, Y+2	; 0x02
    105e:	bb 81       	ldd	r27, Y+3	; 0x03
    1060:	c8 2a       	or	r12, r24
    1062:	d9 2a       	or	r13, r25
    1064:	ea 2a       	or	r14, r26
    1066:	fb 2a       	or	r15, r27
    1068:	c8 82       	st	Y, r12
    106a:	d9 82       	std	Y+1, r13	; 0x01
    106c:	ea 82       	std	Y+2, r14	; 0x02
    106e:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1070:	c1 2c       	mov	r12, r1
    1072:	d1 2c       	mov	r13, r1
    1074:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1076:	3d c0       	rjmp	.+122    	; 0x10f2 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
    1078:	a4 80       	ldd	r10, Z+4	; 0x04
    107a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	a2 81       	ldd	r26, Z+2	; 0x02
    1082:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1084:	ac 01       	movw	r20, r24
    1086:	bd 01       	movw	r22, r26
    1088:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    108a:	b2 fd       	sbrc	r27, 2
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    108e:	48 80       	ld	r4, Y
    1090:	59 80       	ldd	r5, Y+1	; 0x01
    1092:	6a 80       	ldd	r6, Y+2	; 0x02
    1094:	7b 80       	ldd	r7, Y+3	; 0x03
    1096:	44 22       	and	r4, r20
    1098:	55 22       	and	r5, r21
    109a:	66 22       	and	r6, r22
    109c:	77 22       	and	r7, r23
    109e:	45 28       	or	r4, r5
    10a0:	46 28       	or	r4, r6
    10a2:	47 28       	or	r4, r7
    10a4:	89 f4       	brne	.+34     	; 0x10c8 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	12 c0       	rjmp	.+36     	; 0x10ce <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    10aa:	48 80       	ld	r4, Y
    10ac:	59 80       	ldd	r5, Y+1	; 0x01
    10ae:	6a 80       	ldd	r6, Y+2	; 0x02
    10b0:	7b 80       	ldd	r7, Y+3	; 0x03
    10b2:	44 22       	and	r4, r20
    10b4:	55 22       	and	r5, r21
    10b6:	66 22       	and	r6, r22
    10b8:	77 22       	and	r7, r23
    10ba:	44 15       	cp	r20, r4
    10bc:	55 05       	cpc	r21, r5
    10be:	66 05       	cpc	r22, r6
    10c0:	77 05       	cpc	r23, r7
    10c2:	21 f0       	breq	.+8      	; 0x10cc <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    10cc:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    10ce:	22 23       	and	r18, r18
    10d0:	71 f0       	breq	.+28     	; 0x10ee <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    10d2:	b0 ff       	sbrs	r27, 0
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    10d6:	c4 2a       	or	r12, r20
    10d8:	d5 2a       	or	r13, r21
    10da:	e6 2a       	or	r14, r22
    10dc:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    10de:	48 81       	ld	r20, Y
    10e0:	59 81       	ldd	r21, Y+1	; 0x01
    10e2:	6a 81       	ldd	r22, Y+2	; 0x02
    10e4:	7b 81       	ldd	r23, Y+3	; 0x03
    10e6:	72 60       	ori	r23, 0x02	; 2
    10e8:	cf 01       	movw	r24, r30
    10ea:	0e 94 48 19 	call	0x3290	; 0x3290 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    10ee:	ea 2d       	mov	r30, r10
    10f0:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10f2:	e0 17       	cp	r30, r16
    10f4:	f1 07       	cpc	r31, r17
    10f6:	09 f0       	breq	.+2      	; 0x10fa <xEventGroupSetBits+0xd2>
    10f8:	bf cf       	rjmp	.-130    	; 0x1078 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    10fa:	c0 94       	com	r12
    10fc:	d0 94       	com	r13
    10fe:	e0 94       	com	r14
    1100:	f0 94       	com	r15
    1102:	88 81       	ld	r24, Y
    1104:	99 81       	ldd	r25, Y+1	; 0x01
    1106:	aa 81       	ldd	r26, Y+2	; 0x02
    1108:	bb 81       	ldd	r27, Y+3	; 0x03
    110a:	c8 22       	and	r12, r24
    110c:	d9 22       	and	r13, r25
    110e:	ea 22       	and	r14, r26
    1110:	fb 22       	and	r15, r27
    1112:	c8 82       	st	Y, r12
    1114:	d9 82       	std	Y+1, r13	; 0x01
    1116:	ea 82       	std	Y+2, r14	; 0x02
    1118:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    111a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    111e:	68 81       	ld	r22, Y
    1120:	79 81       	ldd	r23, Y+1	; 0x01
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	7f 90       	pop	r7
    113c:	6f 90       	pop	r6
    113e:	5f 90       	pop	r5
    1140:	4f 90       	pop	r4
    1142:	08 95       	ret

00001144 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1144:	ec e8       	ldi	r30, 0x8C	; 140
    1146:	f7 e0       	ldi	r31, 0x07	; 7
    1148:	a0 e9       	ldi	r26, 0x90	; 144
    114a:	b7 e0       	ldi	r27, 0x07	; 7
    114c:	b1 83       	std	Z+1, r27	; 0x01
    114e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    1150:	13 82       	std	Z+3, r1	; 0x03
    1152:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    1154:	e4 e4       	ldi	r30, 0x44	; 68
    1156:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1158:	f0 93 8b 07 	sts	0x078B, r31	; 0x80078b <pxEnd+0x1>
    115c:	e0 93 8a 07 	sts	0x078A, r30	; 0x80078a <pxEnd>
    pxEnd->xBlockSize = 0;
    1160:	13 82       	std	Z+3, r1	; 0x03
    1162:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    1164:	11 82       	std	Z+1, r1	; 0x01
    1166:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1168:	84 eb       	ldi	r24, 0xB4	; 180
    116a:	9b e0       	ldi	r25, 0x0B	; 11
    116c:	13 96       	adiw	r26, 0x03	; 3
    116e:	9c 93       	st	X, r25
    1170:	8e 93       	st	-X, r24
    1172:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1174:	ed 93       	st	X+, r30
    1176:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1178:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <xMinimumEverFreeBytesRemaining+0x1>
    117c:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1180:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <xFreeBytesRemaining+0x1>
    1184:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e8       	ldi	r25, 0x80	; 128
    118c:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <xBlockAllocatedBit+0x1>
    1190:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <xBlockAllocatedBit>
    1194:	08 95       	ret

00001196 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    119c:	ac e8       	ldi	r26, 0x8C	; 140
    119e:	b7 e0       	ldi	r27, 0x07	; 7
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <prvInsertBlockIntoFreeList+0xe>
    11a2:	df 01       	movw	r26, r30
    11a4:	ed 91       	ld	r30, X+
    11a6:	fc 91       	ld	r31, X
    11a8:	11 97       	sbiw	r26, 0x01	; 1
    11aa:	ec 17       	cp	r30, r28
    11ac:	fd 07       	cpc	r31, r29
    11ae:	c8 f3       	brcs	.-14     	; 0x11a2 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    11b0:	12 96       	adiw	r26, 0x02	; 2
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	13 97       	sbiw	r26, 0x03	; 3
    11b8:	9d 01       	movw	r18, r26
    11ba:	28 0f       	add	r18, r24
    11bc:	39 1f       	adc	r19, r25
    11be:	c2 17       	cp	r28, r18
    11c0:	d3 07       	cpc	r29, r19
    11c2:	49 f4       	brne	.+18     	; 0x11d6 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    11c4:	2a 81       	ldd	r18, Y+2	; 0x02
    11c6:	3b 81       	ldd	r19, Y+3	; 0x03
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
    11cc:	13 96       	adiw	r26, 0x03	; 3
    11ce:	9c 93       	st	X, r25
    11d0:	8e 93       	st	-X, r24
    11d2:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    11d4:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	9e 01       	movw	r18, r28
    11dc:	28 0f       	add	r18, r24
    11de:	39 1f       	adc	r19, r25
    11e0:	e2 17       	cp	r30, r18
    11e2:	f3 07       	cpc	r31, r19
    11e4:	c1 f4       	brne	.+48     	; 0x1216 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    11e6:	20 91 8a 07 	lds	r18, 0x078A	; 0x80078a <pxEnd>
    11ea:	30 91 8b 07 	lds	r19, 0x078B	; 0x80078b <pxEnd+0x1>
    11ee:	e2 17       	cp	r30, r18
    11f0:	f3 07       	cpc	r31, r19
    11f2:	71 f0       	breq	.+28     	; 0x1210 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11f4:	22 81       	ldd	r18, Z+2	; 0x02
    11f6:	33 81       	ldd	r19, Z+3	; 0x03
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	9b 83       	std	Y+3, r25	; 0x03
    11fe:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1200:	ed 91       	ld	r30, X+
    1202:	fc 91       	ld	r31, X
    1204:	11 97       	sbiw	r26, 0x01	; 1
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	99 83       	std	Y+1, r25	; 0x01
    120c:	88 83       	st	Y, r24
    120e:	05 c0       	rjmp	.+10     	; 0x121a <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1210:	39 83       	std	Y+1, r19	; 0x01
    1212:	28 83       	st	Y, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1216:	f9 83       	std	Y+1, r31	; 0x01
    1218:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    121a:	ca 17       	cp	r28, r26
    121c:	db 07       	cpc	r29, r27
    121e:	11 f0       	breq	.+4      	; 0x1224 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1220:	cd 93       	st	X+, r28
    1222:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    1238:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    123c:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxEnd>
    1240:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxEnd+0x1>
    1244:	89 2b       	or	r24, r25
    1246:	09 f4       	brne	.+2      	; 0x124a <pvPortMalloc+0x20>
        {
            prvHeapInit();
    1248:	7d df       	rcall	.-262    	; 0x1144 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    124a:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <xBlockAllocatedBit>
    124e:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <xBlockAllocatedBit+0x1>
    1252:	80 23       	and	r24, r16
    1254:	91 23       	and	r25, r17
    1256:	89 2b       	or	r24, r25
    1258:	09 f0       	breq	.+2      	; 0x125c <pvPortMalloc+0x32>
    125a:	76 c0       	rjmp	.+236    	; 0x1348 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    125c:	01 15       	cp	r16, r1
    125e:	11 05       	cpc	r17, r1
    1260:	49 f0       	breq	.+18     	; 0x1274 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1262:	c8 01       	movw	r24, r16
    1264:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1266:	08 17       	cp	r16, r24
    1268:	19 07       	cpc	r17, r25
    126a:	18 f0       	brcs	.+6      	; 0x1272 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    1272:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1274:	01 15       	cp	r16, r1
    1276:	11 05       	cpc	r17, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <pvPortMalloc+0x52>
    127a:	69 c0       	rjmp	.+210    	; 0x134e <pvPortMalloc+0x124>
    127c:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <xFreeBytesRemaining>
    1280:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <xFreeBytesRemaining+0x1>
    1284:	80 17       	cp	r24, r16
    1286:	91 07       	cpc	r25, r17
    1288:	08 f4       	brcc	.+2      	; 0x128c <pvPortMalloc+0x62>
    128a:	64 c0       	rjmp	.+200    	; 0x1354 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    128c:	c0 91 8c 07 	lds	r28, 0x078C	; 0x80078c <xStart>
    1290:	d0 91 8d 07 	lds	r29, 0x078D	; 0x80078d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    1294:	ec e8       	ldi	r30, 0x8C	; 140
    1296:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1298:	02 c0       	rjmp	.+4      	; 0x129e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    129a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    129c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	9b 81       	ldd	r25, Y+3	; 0x03
    12a2:	80 17       	cp	r24, r16
    12a4:	91 07       	cpc	r25, r17
    12a6:	20 f4       	brcc	.+8      	; 0x12b0 <pvPortMalloc+0x86>
    12a8:	88 81       	ld	r24, Y
    12aa:	99 81       	ldd	r25, Y+1	; 0x01
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	a9 f7       	brne	.-22     	; 0x129a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    12b0:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxEnd>
    12b4:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxEnd+0x1>
    12b8:	c8 17       	cp	r28, r24
    12ba:	d9 07       	cpc	r29, r25
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <pvPortMalloc+0x96>
    12be:	4d c0       	rjmp	.+154    	; 0x135a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    12c0:	e0 80       	ld	r14, Z
    12c2:	f1 80       	ldd	r15, Z+1	; 0x01
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	e8 0e       	add	r14, r24
    12c8:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    12ca:	88 81       	ld	r24, Y
    12cc:	99 81       	ldd	r25, Y+1	; 0x01
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    12d2:	2a 81       	ldd	r18, Y+2	; 0x02
    12d4:	3b 81       	ldd	r19, Y+3	; 0x03
    12d6:	20 1b       	sub	r18, r16
    12d8:	31 0b       	sbc	r19, r17
    12da:	29 30       	cpi	r18, 0x09	; 9
    12dc:	31 05       	cpc	r19, r1
    12de:	48 f0       	brcs	.+18     	; 0x12f2 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    12e0:	ce 01       	movw	r24, r28
    12e2:	80 0f       	add	r24, r16
    12e4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    12e6:	fc 01       	movw	r30, r24
    12e8:	33 83       	std	Z+3, r19	; 0x03
    12ea:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    12ec:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    12ee:	0a 83       	std	Y+2, r16	; 0x02
    12f0:	52 df       	rcall	.-348    	; 0x1196 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    12f2:	2a 81       	ldd	r18, Y+2	; 0x02
    12f4:	3b 81       	ldd	r19, Y+3	; 0x03
    12f6:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <xFreeBytesRemaining>
    12fa:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <xFreeBytesRemaining+0x1>
    12fe:	82 1b       	sub	r24, r18
    1300:	93 0b       	sbc	r25, r19
    1302:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <xFreeBytesRemaining+0x1>
    1306:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    130a:	40 91 86 07 	lds	r20, 0x0786	; 0x800786 <xMinimumEverFreeBytesRemaining>
    130e:	50 91 87 07 	lds	r21, 0x0787	; 0x800787 <xMinimumEverFreeBytesRemaining+0x1>
    1312:	84 17       	cp	r24, r20
    1314:	95 07       	cpc	r25, r21
    1316:	20 f4       	brcc	.+8      	; 0x1320 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1318:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <xMinimumEverFreeBytesRemaining+0x1>
    131c:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1320:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <xBlockAllocatedBit>
    1324:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <xBlockAllocatedBit+0x1>
    1328:	28 2b       	or	r18, r24
    132a:	39 2b       	or	r19, r25
    132c:	3b 83       	std	Y+3, r19	; 0x03
    132e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    1334:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <xNumberOfSuccessfulAllocations>
    1338:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <xNumberOfSuccessfulAllocations+0x1>
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <xNumberOfSuccessfulAllocations+0x1>
    1342:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <xNumberOfSuccessfulAllocations>
    1346:	0b c0       	rjmp	.+22     	; 0x135e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    1348:	e1 2c       	mov	r14, r1
    134a:	f1 2c       	mov	r15, r1
    134c:	08 c0       	rjmp	.+16     	; 0x135e <pvPortMalloc+0x134>
    134e:	e1 2c       	mov	r14, r1
    1350:	f1 2c       	mov	r15, r1
    1352:	05 c0       	rjmp	.+10     	; 0x135e <pvPortMalloc+0x134>
    1354:	e1 2c       	mov	r14, r1
    1356:	f1 2c       	mov	r15, r1
    1358:	02 c0       	rjmp	.+4      	; 0x135e <pvPortMalloc+0x134>
    135a:	e1 2c       	mov	r14, r1
    135c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    135e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    1362:	e1 14       	cp	r14, r1
    1364:	f1 04       	cpc	r15, r1
    1366:	11 f4       	brne	.+4      	; 0x136c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    1368:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    136c:	c7 01       	movw	r24, r14
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	08 95       	ret

0000137c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	91 f1       	breq	.+100    	; 0x13ec <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    1388:	ec 01       	movw	r28, r24
    138a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    138c:	4a 81       	ldd	r20, Y+2	; 0x02
    138e:	5b 81       	ldd	r21, Y+3	; 0x03
    1390:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <xBlockAllocatedBit>
    1394:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <xBlockAllocatedBit+0x1>
    1398:	ba 01       	movw	r22, r20
    139a:	62 23       	and	r22, r18
    139c:	73 23       	and	r23, r19
    139e:	67 2b       	or	r22, r23
    13a0:	29 f1       	breq	.+74     	; 0x13ec <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    13a2:	68 81       	ld	r22, Y
    13a4:	79 81       	ldd	r23, Y+1	; 0x01
    13a6:	67 2b       	or	r22, r23
    13a8:	09 f5       	brne	.+66     	; 0x13ec <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13aa:	20 95       	com	r18
    13ac:	30 95       	com	r19
    13ae:	24 23       	and	r18, r20
    13b0:	35 23       	and	r19, r21
    13b2:	3b 83       	std	Y+3, r19	; 0x03
    13b4:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    13b6:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xFreeBytesRemaining>
    13c2:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xFreeBytesRemaining+0x1>
    13c6:	82 0f       	add	r24, r18
    13c8:	93 1f       	adc	r25, r19
    13ca:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <xFreeBytesRemaining+0x1>
    13ce:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    13d2:	ce 01       	movw	r24, r28
    13d4:	e0 de       	rcall	.-576    	; 0x1196 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    13d6:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <xNumberOfSuccessfulFrees>
    13da:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <xNumberOfSuccessfulFrees+0x1>
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <xNumberOfSuccessfulFrees+0x1>
    13e4:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    13e8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    13f6:	fc 01       	movw	r30, r24
    13f8:	03 96       	adiw	r24, 0x03	; 3
    13fa:	92 83       	std	Z+2, r25	; 0x02
    13fc:	81 83       	std	Z+1, r24	; 0x01
    13fe:	4f ef       	ldi	r20, 0xFF	; 255
    1400:	5f ef       	ldi	r21, 0xFF	; 255
    1402:	ba 01       	movw	r22, r20
    1404:	43 83       	std	Z+3, r20	; 0x03
    1406:	54 83       	std	Z+4, r21	; 0x04
    1408:	65 83       	std	Z+5, r22	; 0x05
    140a:	76 83       	std	Z+6, r23	; 0x06
    140c:	90 87       	std	Z+8, r25	; 0x08
    140e:	87 83       	std	Z+7, r24	; 0x07
    1410:	92 87       	std	Z+10, r25	; 0x0a
    1412:	81 87       	std	Z+9, r24	; 0x09
    1414:	10 82       	st	Z, r1
    1416:	08 95       	ret

00001418 <vListInitialiseItem>:
    1418:	fc 01       	movw	r30, r24
    141a:	13 86       	std	Z+11, r1	; 0x0b
    141c:	12 86       	std	Z+10, r1	; 0x0a
    141e:	08 95       	ret

00001420 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    142a:	08 81       	ld	r16, Y
    142c:	19 81       	ldd	r17, Y+1	; 0x01
    142e:	2a 81       	ldd	r18, Y+2	; 0x02
    1430:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1432:	0f 3f       	cpi	r16, 0xFF	; 255
    1434:	4f ef       	ldi	r20, 0xFF	; 255
    1436:	14 07       	cpc	r17, r20
    1438:	24 07       	cpc	r18, r20
    143a:	34 07       	cpc	r19, r20
    143c:	21 f4       	brne	.+8      	; 0x1446 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    143e:	fc 01       	movw	r30, r24
    1440:	a1 85       	ldd	r26, Z+9	; 0x09
    1442:	b2 85       	ldd	r27, Z+10	; 0x0a
    1444:	11 c0       	rjmp	.+34     	; 0x1468 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1446:	dc 01       	movw	r26, r24
    1448:	13 96       	adiw	r26, 0x03	; 3
    144a:	01 c0       	rjmp	.+2      	; 0x144e <vListInsert+0x2e>
    144c:	df 01       	movw	r26, r30
    144e:	14 96       	adiw	r26, 0x04	; 4
    1450:	ed 91       	ld	r30, X+
    1452:	fc 91       	ld	r31, X
    1454:	15 97       	sbiw	r26, 0x05	; 5
    1456:	40 81       	ld	r20, Z
    1458:	51 81       	ldd	r21, Z+1	; 0x01
    145a:	62 81       	ldd	r22, Z+2	; 0x02
    145c:	73 81       	ldd	r23, Z+3	; 0x03
    145e:	04 17       	cp	r16, r20
    1460:	15 07       	cpc	r17, r21
    1462:	26 07       	cpc	r18, r22
    1464:	37 07       	cpc	r19, r23
    1466:	90 f7       	brcc	.-28     	; 0x144c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1468:	14 96       	adiw	r26, 0x04	; 4
    146a:	ed 91       	ld	r30, X+
    146c:	fc 91       	ld	r31, X
    146e:	15 97       	sbiw	r26, 0x05	; 5
    1470:	fd 83       	std	Y+5, r31	; 0x05
    1472:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1474:	d7 83       	std	Z+7, r29	; 0x07
    1476:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1478:	bf 83       	std	Y+7, r27	; 0x07
    147a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    147c:	15 96       	adiw	r26, 0x05	; 5
    147e:	dc 93       	st	X, r29
    1480:	ce 93       	st	-X, r28
    1482:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1484:	9b 87       	std	Y+11, r25	; 0x0b
    1486:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1488:	fc 01       	movw	r30, r24
    148a:	20 81       	ld	r18, Z
    148c:	2f 5f       	subi	r18, 0xFF	; 255
    148e:	20 83       	st	Z, r18
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    14a0:	a2 85       	ldd	r26, Z+10	; 0x0a
    14a2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14a4:	c4 81       	ldd	r28, Z+4	; 0x04
    14a6:	d5 81       	ldd	r29, Z+5	; 0x05
    14a8:	86 81       	ldd	r24, Z+6	; 0x06
    14aa:	97 81       	ldd	r25, Z+7	; 0x07
    14ac:	9f 83       	std	Y+7, r25	; 0x07
    14ae:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14b0:	c6 81       	ldd	r28, Z+6	; 0x06
    14b2:	d7 81       	ldd	r29, Z+7	; 0x07
    14b4:	84 81       	ldd	r24, Z+4	; 0x04
    14b6:	95 81       	ldd	r25, Z+5	; 0x05
    14b8:	9d 83       	std	Y+5, r25	; 0x05
    14ba:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    14bc:	11 96       	adiw	r26, 0x01	; 1
    14be:	8d 91       	ld	r24, X+
    14c0:	9c 91       	ld	r25, X
    14c2:	12 97       	sbiw	r26, 0x02	; 2
    14c4:	e8 17       	cp	r30, r24
    14c6:	f9 07       	cpc	r31, r25
    14c8:	31 f4       	brne	.+12     	; 0x14d6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    14ca:	86 81       	ldd	r24, Z+6	; 0x06
    14cc:	97 81       	ldd	r25, Z+7	; 0x07
    14ce:	12 96       	adiw	r26, 0x02	; 2
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    14d6:	13 86       	std	Z+11, r1	; 0x0b
    14d8:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    14da:	8c 91       	ld	r24, X
    14dc:	81 50       	subi	r24, 0x01	; 1
    14de:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    14e0:	8c 91       	ld	r24, X
}
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    14e8:	a8 95       	wdr
    14ea:	90 ec       	ldi	r25, 0xC0	; 192
    14ec:	88 e1       	ldi	r24, 0x18	; 24
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	a8 95       	wdr
    14f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    14fe:	08 95       	ret

00001500 <pxPortInitialiseStack>:
    1500:	fc 01       	movw	r30, r24
    1502:	60 83       	st	Z, r22
    1504:	31 97       	sbiw	r30, 0x01	; 1
    1506:	70 83       	st	Z, r23
    1508:	31 97       	sbiw	r30, 0x01	; 1
    150a:	10 82       	st	Z, r1
    150c:	31 97       	sbiw	r30, 0x01	; 1
    150e:	10 82       	st	Z, r1
    1510:	31 97       	sbiw	r30, 0x01	; 1
    1512:	20 e8       	ldi	r18, 0x80	; 128
    1514:	20 83       	st	Z, r18
    1516:	31 97       	sbiw	r30, 0x01	; 1
    1518:	10 82       	st	Z, r1
    151a:	31 97       	sbiw	r30, 0x01	; 1
    151c:	10 82       	st	Z, r1
    151e:	31 97       	sbiw	r30, 0x01	; 1
    1520:	10 82       	st	Z, r1
    1522:	77 97       	sbiw	r30, 0x17	; 23
    1524:	40 83       	st	Z, r20
    1526:	31 97       	sbiw	r30, 0x01	; 1
    1528:	50 83       	st	Z, r21
    152a:	86 97       	sbiw	r24, 0x26	; 38
    152c:	08 95       	ret

0000152e <xPortStartScheduler>:
    152e:	dc df       	rcall	.-72     	; 0x14e8 <prvSetupTimerInterrupt>
    1530:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    1534:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    1538:	cd 91       	ld	r28, X+
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	dd 91       	ld	r29, X+
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	bf 91       	pop	r27
    154a:	af 91       	pop	r26
    154c:	9f 91       	pop	r25
    154e:	8f 91       	pop	r24
    1550:	7f 91       	pop	r23
    1552:	6f 91       	pop	r22
    1554:	5f 91       	pop	r21
    1556:	4f 91       	pop	r20
    1558:	3f 91       	pop	r19
    155a:	2f 91       	pop	r18
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	3f 90       	pop	r3
    157a:	2f 90       	pop	r2
    157c:	1f 90       	pop	r1
    157e:	0f 90       	pop	r0
    1580:	0c be       	out	0x3c, r0	; 60
    1582:	0f 90       	pop	r0
    1584:	0b be       	out	0x3b, r0	; 59
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	08 95       	ret
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	08 95       	ret

00001592 <vPortYield>:
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	0f 92       	push	r0
    159a:	0b b6       	in	r0, 0x3b	; 59
    159c:	0f 92       	push	r0
    159e:	0c b6       	in	r0, 0x3c	; 60
    15a0:	0f 92       	push	r0
    15a2:	1f 92       	push	r1
    15a4:	11 24       	eor	r1, r1
    15a6:	2f 92       	push	r2
    15a8:	3f 92       	push	r3
    15aa:	4f 92       	push	r4
    15ac:	5f 92       	push	r5
    15ae:	6f 92       	push	r6
    15b0:	7f 92       	push	r7
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	4f 93       	push	r20
    15cc:	5f 93       	push	r21
    15ce:	6f 93       	push	r22
    15d0:	7f 93       	push	r23
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	af 93       	push	r26
    15d8:	bf 93       	push	r27
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
    15e2:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    15e6:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    15ea:	0d b6       	in	r0, 0x3d	; 61
    15ec:	0d 92       	st	X+, r0
    15ee:	0e b6       	in	r0, 0x3e	; 62
    15f0:	0d 92       	st	X+, r0
    15f2:	0e 94 91 17 	call	0x2f22	; 0x2f22 <vTaskSwitchContext>
    15f6:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    15fa:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    15fe:	cd 91       	ld	r28, X+
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	dd 91       	ld	r29, X+
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	7f 90       	pop	r7
    1638:	6f 90       	pop	r6
    163a:	5f 90       	pop	r5
    163c:	4f 90       	pop	r4
    163e:	3f 90       	pop	r3
    1640:	2f 90       	pop	r2
    1642:	1f 90       	pop	r1
    1644:	0f 90       	pop	r0
    1646:	0c be       	out	0x3c, r0	; 60
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	08 95       	ret

00001654 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	0f 92       	push	r0
    165c:	0b b6       	in	r0, 0x3b	; 59
    165e:	0f 92       	push	r0
    1660:	0c b6       	in	r0, 0x3c	; 60
    1662:	0f 92       	push	r0
    1664:	1f 92       	push	r1
    1666:	11 24       	eor	r1, r1
    1668:	2f 92       	push	r2
    166a:	3f 92       	push	r3
    166c:	4f 92       	push	r4
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    16a8:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    16ac:	0d b6       	in	r0, 0x3d	; 61
    16ae:	0d 92       	st	X+, r0
    16b0:	0e b6       	in	r0, 0x3e	; 62
    16b2:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    16b4:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    16b6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <xTaskIncrementTick>
    16ba:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    16bc:	0e 94 91 17 	call	0x2f22	; 0x2f22 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    16c0:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    16c4:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    16c8:	cd 91       	ld	r28, X+
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	dd 91       	ld	r29, X+
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	cf 90       	pop	r12
    16f8:	bf 90       	pop	r11
    16fa:	af 90       	pop	r10
    16fc:	9f 90       	pop	r9
    16fe:	8f 90       	pop	r8
    1700:	7f 90       	pop	r7
    1702:	6f 90       	pop	r6
    1704:	5f 90       	pop	r5
    1706:	4f 90       	pop	r4
    1708:	3f 90       	pop	r3
    170a:	2f 90       	pop	r2
    170c:	1f 90       	pop	r1
    170e:	0f 90       	pop	r0
    1710:	0c be       	out	0x3c, r0	; 60
    1712:	0f 90       	pop	r0
    1714:	0b be       	out	0x3b, r0	; 59
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    171c:	08 95       	ret

0000171e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    171e:	9a df       	rcall	.-204    	; 0x1654 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1720:	18 95       	reti

00001722 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1722:	dc 01       	movw	r26, r24
    1724:	53 96       	adiw	r26, 0x13	; 19
    1726:	2c 91       	ld	r18, X
    1728:	53 97       	sbiw	r26, 0x13	; 19
    172a:	22 23       	and	r18, r18
    172c:	41 f0       	breq	.+16     	; 0x173e <prvGetDisinheritPriorityAfterTimeout+0x1c>
    172e:	5a 96       	adiw	r26, 0x1a	; 26
    1730:	ed 91       	ld	r30, X+
    1732:	fc 91       	ld	r31, X
    1734:	5b 97       	sbiw	r26, 0x1b	; 27
    1736:	90 81       	ld	r25, Z
    1738:	8a e0       	ldi	r24, 0x0A	; 10
    173a:	89 1b       	sub	r24, r25
    173c:	08 95       	ret
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	08 95       	ret

00001742 <prvIsQueueEmpty>:
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	0f 92       	push	r0
    1748:	fc 01       	movw	r30, r24
    174a:	86 8d       	ldd	r24, Z+30	; 0x1e
    174c:	81 11       	cpse	r24, r1
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <prvIsQueueEmpty+0x12>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <prvIsQueueEmpty+0x14>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	08 95       	ret

0000175c <prvIsQueueFull>:
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	0f 92       	push	r0
    1762:	fc 01       	movw	r30, r24
    1764:	26 8d       	ldd	r18, Z+30	; 0x1e
    1766:	87 8d       	ldd	r24, Z+31	; 0x1f
    1768:	28 13       	cpse	r18, r24
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <prvIsQueueFull+0x14>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <prvIsQueueFull+0x16>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	08 95       	ret

00001778 <prvCopyDataToQueue>:
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
    1782:	04 2f       	mov	r16, r20
    1784:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1786:	48 a1       	ldd	r20, Y+32	; 0x20
    1788:	41 11       	cpse	r20, r1
    178a:	0c c0       	rjmp	.+24     	; 0x17a4 <prvCopyDataToQueue+0x2c>
    178c:	88 81       	ld	r24, Y
    178e:	99 81       	ldd	r25, Y+1	; 0x01
    1790:	89 2b       	or	r24, r25
    1792:	09 f0       	breq	.+2      	; 0x1796 <prvCopyDataToQueue+0x1e>
    1794:	42 c0       	rjmp	.+132    	; 0x181a <prvCopyDataToQueue+0xa2>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	0e 94 0d 1b 	call	0x361a	; 0x361a <xTaskPriorityDisinherit>
    179e:	1d 82       	std	Y+5, r1	; 0x05
    17a0:	1c 82       	std	Y+4, r1	; 0x04
    17a2:	42 c0       	rjmp	.+132    	; 0x1828 <prvCopyDataToQueue+0xb0>
    17a4:	01 11       	cpse	r16, r1
    17a6:	17 c0       	rjmp	.+46     	; 0x17d6 <prvCopyDataToQueue+0x5e>
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	9b 81       	ldd	r25, Y+3	; 0x03
    17ae:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <memcpy>
    17b2:	28 a1       	ldd	r18, Y+32	; 0x20
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	9b 81       	ldd	r25, Y+3	; 0x03
    17b8:	82 0f       	add	r24, r18
    17ba:	91 1d       	adc	r25, r1
    17bc:	9b 83       	std	Y+3, r25	; 0x03
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	82 17       	cp	r24, r18
    17c6:	93 07       	cpc	r25, r19
    17c8:	50 f1       	brcs	.+84     	; 0x181e <prvCopyDataToQueue+0xa6>
    17ca:	88 81       	ld	r24, Y
    17cc:	99 81       	ldd	r25, Y+1	; 0x01
    17ce:	9b 83       	std	Y+3, r25	; 0x03
    17d0:	8a 83       	std	Y+2, r24	; 0x02
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	29 c0       	rjmp	.+82     	; 0x1828 <prvCopyDataToQueue+0xb0>
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <memcpy>
    17e0:	88 a1       	ldd	r24, Y+32	; 0x20
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	91 95       	neg	r25
    17e6:	81 95       	neg	r24
    17e8:	91 09       	sbc	r25, r1
    17ea:	2e 81       	ldd	r18, Y+6	; 0x06
    17ec:	3f 81       	ldd	r19, Y+7	; 0x07
    17ee:	28 0f       	add	r18, r24
    17f0:	39 1f       	adc	r19, r25
    17f2:	3f 83       	std	Y+7, r19	; 0x07
    17f4:	2e 83       	std	Y+6, r18	; 0x06
    17f6:	48 81       	ld	r20, Y
    17f8:	59 81       	ldd	r21, Y+1	; 0x01
    17fa:	24 17       	cp	r18, r20
    17fc:	35 07       	cpc	r19, r21
    17fe:	30 f4       	brcc	.+12     	; 0x180c <prvCopyDataToQueue+0x94>
    1800:	2c 81       	ldd	r18, Y+4	; 0x04
    1802:	3d 81       	ldd	r19, Y+5	; 0x05
    1804:	82 0f       	add	r24, r18
    1806:	93 1f       	adc	r25, r19
    1808:	9f 83       	std	Y+7, r25	; 0x07
    180a:	8e 83       	std	Y+6, r24	; 0x06
    180c:	02 30       	cpi	r16, 0x02	; 2
    180e:	49 f4       	brne	.+18     	; 0x1822 <prvCopyDataToQueue+0xaa>
    1810:	11 23       	and	r17, r17
    1812:	49 f0       	breq	.+18     	; 0x1826 <prvCopyDataToQueue+0xae>
    1814:	11 50       	subi	r17, 0x01	; 1
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <prvCopyDataToQueue+0xb0>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <prvCopyDataToQueue+0xb0>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <prvCopyDataToQueue+0xb0>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <prvCopyDataToQueue+0xb0>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	1f 5f       	subi	r17, 0xFF	; 255
    182a:	1e 8f       	std	Y+30, r17	; 0x1e
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	08 95       	ret

00001836 <prvCopyDataFromQueue>:
    1836:	fc 01       	movw	r30, r24
    1838:	40 a1       	ldd	r20, Z+32	; 0x20
    183a:	44 23       	and	r20, r20
    183c:	a9 f0       	breq	.+42     	; 0x1868 <prvCopyDataFromQueue+0x32>
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	26 81       	ldd	r18, Z+6	; 0x06
    1842:	37 81       	ldd	r19, Z+7	; 0x07
    1844:	24 0f       	add	r18, r20
    1846:	35 1f       	adc	r19, r21
    1848:	37 83       	std	Z+7, r19	; 0x07
    184a:	26 83       	std	Z+6, r18	; 0x06
    184c:	84 81       	ldd	r24, Z+4	; 0x04
    184e:	95 81       	ldd	r25, Z+5	; 0x05
    1850:	28 17       	cp	r18, r24
    1852:	39 07       	cpc	r19, r25
    1854:	20 f0       	brcs	.+8      	; 0x185e <prvCopyDataFromQueue+0x28>
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	97 83       	std	Z+7, r25	; 0x07
    185c:	86 83       	std	Z+6, r24	; 0x06
    185e:	cb 01       	movw	r24, r22
    1860:	66 81       	ldd	r22, Z+6	; 0x06
    1862:	77 81       	ldd	r23, Z+7	; 0x07
    1864:	0c 94 c5 37 	jmp	0x6f8a	; 0x6f8a <memcpy>
    1868:	08 95       	ret

0000186a <prvUnlockQueue>:
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	0f 92       	push	r0
    1878:	1a a1       	ldd	r17, Y+34	; 0x22
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <prvUnlockQueue+0x28>
    187c:	8b 89       	ldd	r24, Y+19	; 0x13
    187e:	88 23       	and	r24, r24
    1880:	51 f0       	breq	.+20     	; 0x1896 <prvUnlockQueue+0x2c>
    1882:	ce 01       	movw	r24, r28
    1884:	43 96       	adiw	r24, 0x13	; 19
    1886:	0e 94 99 18 	call	0x3132	; 0x3132 <xTaskRemoveFromEventList>
    188a:	81 11       	cpse	r24, r1
    188c:	0e 94 6f 1a 	call	0x34de	; 0x34de <vTaskMissedYield>
    1890:	11 50       	subi	r17, 0x01	; 1
    1892:	11 16       	cp	r1, r17
    1894:	9c f3       	brlt	.-26     	; 0x187c <prvUnlockQueue+0x12>
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	8a a3       	std	Y+34, r24	; 0x22
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	0f 92       	push	r0
    18a4:	19 a1       	ldd	r17, Y+33	; 0x21
    18a6:	0b c0       	rjmp	.+22     	; 0x18be <prvUnlockQueue+0x54>
    18a8:	88 85       	ldd	r24, Y+8	; 0x08
    18aa:	88 23       	and	r24, r24
    18ac:	51 f0       	breq	.+20     	; 0x18c2 <prvUnlockQueue+0x58>
    18ae:	ce 01       	movw	r24, r28
    18b0:	08 96       	adiw	r24, 0x08	; 8
    18b2:	0e 94 99 18 	call	0x3132	; 0x3132 <xTaskRemoveFromEventList>
    18b6:	81 11       	cpse	r24, r1
    18b8:	0e 94 6f 1a 	call	0x34de	; 0x34de <vTaskMissedYield>
    18bc:	11 50       	subi	r17, 0x01	; 1
    18be:	11 16       	cp	r1, r17
    18c0:	9c f3       	brlt	.-26     	; 0x18a8 <prvUnlockQueue+0x3e>
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	89 a3       	std	Y+33, r24	; 0x21
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	08 95       	ret

000018d2 <xQueueGenericReset>:
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	ec 01       	movw	r28, r24
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	0f 92       	push	r0
    18de:	e8 81       	ld	r30, Y
    18e0:	f9 81       	ldd	r31, Y+1	; 0x01
    18e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e4:	28 a1       	ldd	r18, Y+32	; 0x20
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	82 9f       	mul	r24, r18
    18ec:	a0 01       	movw	r20, r0
    18ee:	83 9f       	mul	r24, r19
    18f0:	50 0d       	add	r21, r0
    18f2:	92 9f       	mul	r25, r18
    18f4:	50 0d       	add	r21, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	4e 0f       	add	r20, r30
    18fa:	5f 1f       	adc	r21, r31
    18fc:	5d 83       	std	Y+5, r21	; 0x05
    18fe:	4c 83       	std	Y+4, r20	; 0x04
    1900:	1e 8e       	std	Y+30, r1	; 0x1e
    1902:	fb 83       	std	Y+3, r31	; 0x03
    1904:	ea 83       	std	Y+2, r30	; 0x02
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	28 9f       	mul	r18, r24
    190a:	a0 01       	movw	r20, r0
    190c:	29 9f       	mul	r18, r25
    190e:	50 0d       	add	r21, r0
    1910:	38 9f       	mul	r19, r24
    1912:	50 0d       	add	r21, r0
    1914:	11 24       	eor	r1, r1
    1916:	cf 01       	movw	r24, r30
    1918:	84 0f       	add	r24, r20
    191a:	95 1f       	adc	r25, r21
    191c:	9f 83       	std	Y+7, r25	; 0x07
    191e:	8e 83       	std	Y+6, r24	; 0x06
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	89 a3       	std	Y+33, r24	; 0x21
    1924:	8a a3       	std	Y+34, r24	; 0x22
    1926:	61 11       	cpse	r22, r1
    1928:	0b c0       	rjmp	.+22     	; 0x1940 <xQueueGenericReset+0x6e>
    192a:	88 85       	ldd	r24, Y+8	; 0x08
    192c:	88 23       	and	r24, r24
    192e:	71 f0       	breq	.+28     	; 0x194c <xQueueGenericReset+0x7a>
    1930:	ce 01       	movw	r24, r28
    1932:	08 96       	adiw	r24, 0x08	; 8
    1934:	0e 94 99 18 	call	0x3132	; 0x3132 <xTaskRemoveFromEventList>
    1938:	88 23       	and	r24, r24
    193a:	41 f0       	breq	.+16     	; 0x194c <xQueueGenericReset+0x7a>
    193c:	2a de       	rcall	.-940    	; 0x1592 <vPortYield>
    193e:	06 c0       	rjmp	.+12     	; 0x194c <xQueueGenericReset+0x7a>
    1940:	ce 01       	movw	r24, r28
    1942:	08 96       	adiw	r24, 0x08	; 8
    1944:	58 dd       	rcall	.-1360   	; 0x13f6 <vListInitialise>
    1946:	ce 01       	movw	r24, r28
    1948:	43 96       	adiw	r24, 0x13	; 19
    194a:	55 dd       	rcall	.-1366   	; 0x13f6 <vListInitialise>
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <prvInitialiseNewQueue>:
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	f8 01       	movw	r30, r16
    195e:	61 11       	cpse	r22, r1
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <prvInitialiseNewQueue+0x10>
    1962:	11 83       	std	Z+1, r17	; 0x01
    1964:	00 83       	st	Z, r16
    1966:	02 c0       	rjmp	.+4      	; 0x196c <prvInitialiseNewQueue+0x14>
    1968:	51 83       	std	Z+1, r21	; 0x01
    196a:	40 83       	st	Z, r20
    196c:	87 8f       	std	Z+31, r24	; 0x1f
    196e:	60 a3       	std	Z+32, r22	; 0x20
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	cf 01       	movw	r24, r30
    1974:	ae df       	rcall	.-164    	; 0x18d2 <xQueueGenericReset>
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <xQueueGenericCreate>:
    197c:	df 92       	push	r13
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	f8 2e       	mov	r15, r24
    198c:	e6 2e       	mov	r14, r22
    198e:	d4 2e       	mov	r13, r20
    1990:	86 9f       	mul	r24, r22
    1992:	c0 01       	movw	r24, r0
    1994:	11 24       	eor	r1, r1
    1996:	83 96       	adiw	r24, 0x23	; 35
    1998:	48 dc       	rcall	.-1904   	; 0x122a <pvPortMalloc>
    199a:	ec 01       	movw	r28, r24
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	41 f0       	breq	.+16     	; 0x19b0 <xQueueGenericCreate+0x34>
    19a0:	8c 01       	movw	r16, r24
    19a2:	2d 2d       	mov	r18, r13
    19a4:	ac 01       	movw	r20, r24
    19a6:	4d 5d       	subi	r20, 0xDD	; 221
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	6e 2d       	mov	r22, r14
    19ac:	8f 2d       	mov	r24, r15
    19ae:	d4 df       	rcall	.-88     	; 0x1958 <prvInitialiseNewQueue>
    19b0:	ce 01       	movw	r24, r28
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	08 95       	ret

000019c2 <xQueueGenericSend>:
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	29 97       	sbiw	r28, 0x09	; 9
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	7c 01       	movw	r14, r24
    19e4:	6b 01       	movw	r12, r22
    19e6:	2e 83       	std	Y+6, r18	; 0x06
    19e8:	3f 83       	std	Y+7, r19	; 0x07
    19ea:	48 87       	std	Y+8, r20	; 0x08
    19ec:	59 87       	std	Y+9, r21	; 0x09
    19ee:	10 e0       	ldi	r17, 0x00	; 0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	0f 92       	push	r0
    19f6:	f7 01       	movw	r30, r14
    19f8:	96 8d       	ldd	r25, Z+30	; 0x1e
    19fa:	87 8d       	ldd	r24, Z+31	; 0x1f
    19fc:	98 17       	cp	r25, r24
    19fe:	10 f0       	brcs	.+4      	; 0x1a04 <xQueueGenericSend+0x42>
    1a00:	02 30       	cpi	r16, 0x02	; 2
    1a02:	b1 f4       	brne	.+44     	; 0x1a30 <xQueueGenericSend+0x6e>
    1a04:	40 2f       	mov	r20, r16
    1a06:	b6 01       	movw	r22, r12
    1a08:	c7 01       	movw	r24, r14
    1a0a:	b6 de       	rcall	.-660    	; 0x1778 <prvCopyDataToQueue>
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	93 89       	ldd	r25, Z+19	; 0x13
    1a10:	99 23       	and	r25, r25
    1a12:	41 f0       	breq	.+16     	; 0x1a24 <xQueueGenericSend+0x62>
    1a14:	c7 01       	movw	r24, r14
    1a16:	43 96       	adiw	r24, 0x13	; 19
    1a18:	0e 94 99 18 	call	0x3132	; 0x3132 <xTaskRemoveFromEventList>
    1a1c:	88 23       	and	r24, r24
    1a1e:	21 f0       	breq	.+8      	; 0x1a28 <xQueueGenericSend+0x66>
    1a20:	b8 dd       	rcall	.-1168   	; 0x1592 <vPortYield>
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <xQueueGenericSend+0x66>
    1a24:	81 11       	cpse	r24, r1
    1a26:	b5 dd       	rcall	.-1174   	; 0x1592 <vPortYield>
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	4c c0       	rjmp	.+152    	; 0x1ac8 <xQueueGenericSend+0x106>
    1a30:	8e 81       	ldd	r24, Y+6	; 0x06
    1a32:	9f 81       	ldd	r25, Y+7	; 0x07
    1a34:	a8 85       	ldd	r26, Y+8	; 0x08
    1a36:	b9 85       	ldd	r27, Y+9	; 0x09
    1a38:	89 2b       	or	r24, r25
    1a3a:	8a 2b       	or	r24, r26
    1a3c:	8b 2b       	or	r24, r27
    1a3e:	21 f4       	brne	.+8      	; 0x1a48 <xQueueGenericSend+0x86>
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	40 c0       	rjmp	.+128    	; 0x1ac8 <xQueueGenericSend+0x106>
    1a48:	11 11       	cpse	r17, r1
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <xQueueGenericSend+0x94>
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <vTaskInternalSetTimeOutState>
    1a54:	11 e0       	ldi	r17, 0x01	; 1
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	c7 d7       	rcall	.+3982   	; 0x29ea <vTaskSuspendAll>
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	0f 92       	push	r0
    1a62:	f7 01       	movw	r30, r14
    1a64:	81 a1       	ldd	r24, Z+33	; 0x21
    1a66:	8f 3f       	cpi	r24, 0xFF	; 255
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <xQueueGenericSend+0xaa>
    1a6a:	11 a2       	std	Z+33, r1	; 0x21
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	82 a1       	ldd	r24, Z+34	; 0x22
    1a70:	8f 3f       	cpi	r24, 0xFF	; 255
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <xQueueGenericSend+0xb4>
    1a74:	12 a2       	std	Z+34, r1	; 0x22
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	be 01       	movw	r22, r28
    1a7c:	6a 5f       	subi	r22, 0xFA	; 250
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	ce 01       	movw	r24, r28
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	0e 94 09 1a 	call	0x3412	; 0x3412 <xTaskCheckForTimeOut>
    1a88:	81 11       	cpse	r24, r1
    1a8a:	19 c0       	rjmp	.+50     	; 0x1abe <xQueueGenericSend+0xfc>
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	66 de       	rcall	.-820    	; 0x175c <prvIsQueueFull>
    1a90:	88 23       	and	r24, r24
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <xQueueGenericSend+0xf2>
    1a94:	4e 81       	ldd	r20, Y+6	; 0x06
    1a96:	5f 81       	ldd	r21, Y+7	; 0x07
    1a98:	68 85       	ldd	r22, Y+8	; 0x08
    1a9a:	79 85       	ldd	r23, Y+9	; 0x09
    1a9c:	c7 01       	movw	r24, r14
    1a9e:	08 96       	adiw	r24, 0x08	; 8
    1aa0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <vTaskPlaceOnEventList>
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	e1 de       	rcall	.-574    	; 0x186a <prvUnlockQueue>
    1aa8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
    1aac:	81 11       	cpse	r24, r1
    1aae:	a0 cf       	rjmp	.-192    	; 0x19f0 <xQueueGenericSend+0x2e>
    1ab0:	70 dd       	rcall	.-1312   	; 0x1592 <vPortYield>
    1ab2:	9e cf       	rjmp	.-196    	; 0x19f0 <xQueueGenericSend+0x2e>
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	d9 de       	rcall	.-590    	; 0x186a <prvUnlockQueue>
    1ab8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
    1abc:	99 cf       	rjmp	.-206    	; 0x19f0 <xQueueGenericSend+0x2e>
    1abe:	c7 01       	movw	r24, r14
    1ac0:	d4 de       	rcall	.-600    	; 0x186a <prvUnlockQueue>
    1ac2:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	29 96       	adiw	r28, 0x09	; 9
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	08 95       	ret

00001ae6 <prvInitialiseMutex>:
    1ae6:	0f 93       	push	r16
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f0       	breq	.+26     	; 0x1b06 <prvInitialiseMutex+0x20>
    1aec:	fc 01       	movw	r30, r24
    1aee:	15 82       	std	Z+5, r1	; 0x05
    1af0:	14 82       	std	Z+4, r1	; 0x04
    1af2:	11 82       	std	Z+1, r1	; 0x01
    1af4:	10 82       	st	Z, r1
    1af6:	16 82       	std	Z+6, r1	; 0x06
    1af8:	00 e0       	ldi	r16, 0x00	; 0
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	a9 01       	movw	r20, r18
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	5e df       	rcall	.-324    	; 0x19c2 <xQueueGenericSend>
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <xQueueCreateMutex>:
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	48 2f       	mov	r20, r24
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	33 df       	rcall	.-410    	; 0x197c <xQueueGenericCreate>
    1b16:	ec 01       	movw	r28, r24
    1b18:	e6 df       	rcall	.-52     	; 0x1ae6 <prvInitialiseMutex>
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <xQueueGenericSendFromISR>:
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	8a 01       	movw	r16, r20
    1b30:	fc 01       	movw	r30, r24
    1b32:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b34:	37 8d       	ldd	r19, Z+31	; 0x1f
    1b36:	53 17       	cp	r21, r19
    1b38:	10 f0       	brcs	.+4      	; 0x1b3e <xQueueGenericSendFromISR+0x1c>
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	f9 f4       	brne	.+62     	; 0x1b7c <xQueueGenericSendFromISR+0x5a>
    1b3e:	42 2f       	mov	r20, r18
    1b40:	78 01       	movw	r14, r16
    1b42:	ec 01       	movw	r28, r24
    1b44:	1a a1       	ldd	r17, Y+34	; 0x22
    1b46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b48:	ce 01       	movw	r24, r28
    1b4a:	16 de       	rcall	.-980    	; 0x1778 <prvCopyDataToQueue>
    1b4c:	1f 3f       	cpi	r17, 0xFF	; 255
    1b4e:	81 f4       	brne	.+32     	; 0x1b70 <xQueueGenericSendFromISR+0x4e>
    1b50:	8b 89       	ldd	r24, Y+19	; 0x13
    1b52:	88 23       	and	r24, r24
    1b54:	a9 f0       	breq	.+42     	; 0x1b80 <xQueueGenericSendFromISR+0x5e>
    1b56:	ce 01       	movw	r24, r28
    1b58:	43 96       	adiw	r24, 0x13	; 19
    1b5a:	0e 94 99 18 	call	0x3132	; 0x3132 <xTaskRemoveFromEventList>
    1b5e:	88 23       	and	r24, r24
    1b60:	89 f0       	breq	.+34     	; 0x1b84 <xQueueGenericSendFromISR+0x62>
    1b62:	e1 14       	cp	r14, r1
    1b64:	f1 04       	cpc	r15, r1
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <xQueueGenericSendFromISR+0x66>
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	f7 01       	movw	r30, r14
    1b6c:	80 83       	st	Z, r24
    1b6e:	0d c0       	rjmp	.+26     	; 0x1b8a <xQueueGenericSendFromISR+0x68>
    1b70:	ff 24       	eor	r15, r15
    1b72:	f3 94       	inc	r15
    1b74:	f1 0e       	add	r15, r17
    1b76:	fa a2       	std	Y+34, r15	; 0x22
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <xQueueGenericSendFromISR+0x68>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <xQueueGenericSendFromISR+0x68>
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <xQueueGenericSendFromISR+0x68>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <xQueueGenericSendFromISR+0x68>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	08 95       	ret

00001b98 <xQueueReceive>:
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	29 97       	sbiw	r28, 0x09	; 9
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	8c 01       	movw	r16, r24
    1bba:	6b 01       	movw	r12, r22
    1bbc:	2e 83       	std	Y+6, r18	; 0x06
    1bbe:	3f 83       	std	Y+7, r19	; 0x07
    1bc0:	48 87       	std	Y+8, r20	; 0x08
    1bc2:	59 87       	std	Y+9, r21	; 0x09
    1bc4:	e1 2c       	mov	r14, r1
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	0f 92       	push	r0
    1bcc:	f8 01       	movw	r30, r16
    1bce:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1bd0:	ff 20       	and	r15, r15
    1bd2:	99 f0       	breq	.+38     	; 0x1bfa <xQueueReceive+0x62>
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	c8 01       	movw	r24, r16
    1bd8:	2e de       	rcall	.-932    	; 0x1836 <prvCopyDataFromQueue>
    1bda:	fa 94       	dec	r15
    1bdc:	f8 01       	movw	r30, r16
    1bde:	f6 8e       	std	Z+30, r15	; 0x1e
    1be0:	80 85       	ldd	r24, Z+8	; 0x08
    1be2:	88 23       	and	r24, r24
    1be4:	31 f0       	breq	.+12     	; 0x1bf2 <xQueueReceive+0x5a>
    1be6:	c8 01       	movw	r24, r16
    1be8:	08 96       	adiw	r24, 0x08	; 8
    1bea:	0e 94 99 18 	call	0x3132	; 0x3132 <xTaskRemoveFromEventList>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	d0 dc       	rcall	.-1632   	; 0x1592 <vPortYield>
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	4f c0       	rjmp	.+158    	; 0x1c98 <xQueueReceive+0x100>
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfe:	a8 85       	ldd	r26, Y+8	; 0x08
    1c00:	b9 85       	ldd	r27, Y+9	; 0x09
    1c02:	89 2b       	or	r24, r25
    1c04:	8a 2b       	or	r24, r26
    1c06:	8b 2b       	or	r24, r27
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <xQueueReceive+0x7a>
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	43 c0       	rjmp	.+134    	; 0x1c98 <xQueueReceive+0x100>
    1c12:	e1 10       	cpse	r14, r1
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <xQueueReceive+0x8a>
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <vTaskInternalSetTimeOutState>
    1c1e:	ee 24       	eor	r14, r14
    1c20:	e3 94       	inc	r14
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	e1 d6       	rcall	.+3522   	; 0x29ea <vTaskSuspendAll>
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	0f 92       	push	r0
    1c2e:	f8 01       	movw	r30, r16
    1c30:	81 a1       	ldd	r24, Z+33	; 0x21
    1c32:	8f 3f       	cpi	r24, 0xFF	; 255
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <xQueueReceive+0xa0>
    1c36:	11 a2       	std	Z+33, r1	; 0x21
    1c38:	f8 01       	movw	r30, r16
    1c3a:	82 a1       	ldd	r24, Z+34	; 0x22
    1c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <xQueueReceive+0xaa>
    1c40:	12 a2       	std	Z+34, r1	; 0x22
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	be 01       	movw	r22, r28
    1c48:	6a 5f       	subi	r22, 0xFA	; 250
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	0e 94 09 1a 	call	0x3412	; 0x3412 <xTaskCheckForTimeOut>
    1c54:	81 11       	cpse	r24, r1
    1c56:	17 c0       	rjmp	.+46     	; 0x1c86 <xQueueReceive+0xee>
    1c58:	c8 01       	movw	r24, r16
    1c5a:	73 dd       	rcall	.-1306   	; 0x1742 <prvIsQueueEmpty>
    1c5c:	88 23       	and	r24, r24
    1c5e:	79 f0       	breq	.+30     	; 0x1c7e <xQueueReceive+0xe6>
    1c60:	4e 81       	ldd	r20, Y+6	; 0x06
    1c62:	5f 81       	ldd	r21, Y+7	; 0x07
    1c64:	68 85       	ldd	r22, Y+8	; 0x08
    1c66:	79 85       	ldd	r23, Y+9	; 0x09
    1c68:	c8 01       	movw	r24, r16
    1c6a:	43 96       	adiw	r24, 0x13	; 19
    1c6c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <vTaskPlaceOnEventList>
    1c70:	c8 01       	movw	r24, r16
    1c72:	fb dd       	rcall	.-1034   	; 0x186a <prvUnlockQueue>
    1c74:	fa d7       	rcall	.+4084   	; 0x2c6a <xTaskResumeAll>
    1c76:	81 11       	cpse	r24, r1
    1c78:	a6 cf       	rjmp	.-180    	; 0x1bc6 <xQueueReceive+0x2e>
    1c7a:	8b dc       	rcall	.-1770   	; 0x1592 <vPortYield>
    1c7c:	a4 cf       	rjmp	.-184    	; 0x1bc6 <xQueueReceive+0x2e>
    1c7e:	c8 01       	movw	r24, r16
    1c80:	f4 dd       	rcall	.-1048   	; 0x186a <prvUnlockQueue>
    1c82:	f3 d7       	rcall	.+4070   	; 0x2c6a <xTaskResumeAll>
    1c84:	a0 cf       	rjmp	.-192    	; 0x1bc6 <xQueueReceive+0x2e>
    1c86:	c8 01       	movw	r24, r16
    1c88:	f0 dd       	rcall	.-1056   	; 0x186a <prvUnlockQueue>
    1c8a:	ef d7       	rcall	.+4062   	; 0x2c6a <xTaskResumeAll>
    1c8c:	c8 01       	movw	r24, r16
    1c8e:	59 dd       	rcall	.-1358   	; 0x1742 <prvIsQueueEmpty>
    1c90:	88 23       	and	r24, r24
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <xQueueReceive+0xfe>
    1c94:	98 cf       	rjmp	.-208    	; 0x1bc6 <xQueueReceive+0x2e>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	29 96       	adiw	r28, 0x09	; 9
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	08 95       	ret

00001cb6 <xQueueSemaphoreTake>:
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	29 97       	sbiw	r28, 0x09	; 9
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	8c 01       	movw	r16, r24
    1cd4:	4e 83       	std	Y+6, r20	; 0x06
    1cd6:	5f 83       	std	Y+7, r21	; 0x07
    1cd8:	68 87       	std	Y+8, r22	; 0x08
    1cda:	79 87       	std	Y+9, r23	; 0x09
    1cdc:	e1 2c       	mov	r14, r1
    1cde:	f1 2c       	mov	r15, r1
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	0f 92       	push	r0
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cea:	88 23       	and	r24, r24
    1cec:	c9 f0       	breq	.+50     	; 0x1d20 <xQueueSemaphoreTake+0x6a>
    1cee:	81 50       	subi	r24, 0x01	; 1
    1cf0:	86 8f       	std	Z+30, r24	; 0x1e
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	89 2b       	or	r24, r25
    1cf8:	29 f4       	brne	.+10     	; 0x1d04 <xQueueSemaphoreTake+0x4e>
    1cfa:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <pvTaskIncrementMutexHeldCount>
    1cfe:	f8 01       	movw	r30, r16
    1d00:	95 83       	std	Z+5, r25	; 0x05
    1d02:	84 83       	std	Z+4, r24	; 0x04
    1d04:	f8 01       	movw	r30, r16
    1d06:	80 85       	ldd	r24, Z+8	; 0x08
    1d08:	88 23       	and	r24, r24
    1d0a:	31 f0       	breq	.+12     	; 0x1d18 <xQueueSemaphoreTake+0x62>
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	08 96       	adiw	r24, 0x08	; 8
    1d10:	0e 94 99 18 	call	0x3132	; 0x3132 <xTaskRemoveFromEventList>
    1d14:	81 11       	cpse	r24, r1
    1d16:	3d dc       	rcall	.-1926   	; 0x1592 <vPortYield>
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	6f c0       	rjmp	.+222    	; 0x1dfe <xQueueSemaphoreTake+0x148>
    1d20:	8e 81       	ldd	r24, Y+6	; 0x06
    1d22:	9f 81       	ldd	r25, Y+7	; 0x07
    1d24:	a8 85       	ldd	r26, Y+8	; 0x08
    1d26:	b9 85       	ldd	r27, Y+9	; 0x09
    1d28:	89 2b       	or	r24, r25
    1d2a:	8a 2b       	or	r24, r26
    1d2c:	8b 2b       	or	r24, r27
    1d2e:	21 f4       	brne	.+8      	; 0x1d38 <xQueueSemaphoreTake+0x82>
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	63 c0       	rjmp	.+198    	; 0x1dfe <xQueueSemaphoreTake+0x148>
    1d38:	f1 10       	cpse	r15, r1
    1d3a:	06 c0       	rjmp	.+12     	; 0x1d48 <xQueueSemaphoreTake+0x92>
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <vTaskInternalSetTimeOutState>
    1d44:	ff 24       	eor	r15, r15
    1d46:	f3 94       	inc	r15
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	4e d6       	rcall	.+3228   	; 0x29ea <vTaskSuspendAll>
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	0f 92       	push	r0
    1d54:	f8 01       	movw	r30, r16
    1d56:	81 a1       	ldd	r24, Z+33	; 0x21
    1d58:	8f 3f       	cpi	r24, 0xFF	; 255
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <xQueueSemaphoreTake+0xa8>
    1d5c:	11 a2       	std	Z+33, r1	; 0x21
    1d5e:	f8 01       	movw	r30, r16
    1d60:	82 a1       	ldd	r24, Z+34	; 0x22
    1d62:	8f 3f       	cpi	r24, 0xFF	; 255
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <xQueueSemaphoreTake+0xb2>
    1d66:	12 a2       	std	Z+34, r1	; 0x22
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	be 01       	movw	r22, r28
    1d6e:	6a 5f       	subi	r22, 0xFA	; 250
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	0e 94 09 1a 	call	0x3412	; 0x3412 <xTaskCheckForTimeOut>
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	26 c0       	rjmp	.+76     	; 0x1dca <xQueueSemaphoreTake+0x114>
    1d7e:	c8 01       	movw	r24, r16
    1d80:	e0 dc       	rcall	.-1600   	; 0x1742 <prvIsQueueEmpty>
    1d82:	88 23       	and	r24, r24
    1d84:	f1 f0       	breq	.+60     	; 0x1dc2 <xQueueSemaphoreTake+0x10c>
    1d86:	f8 01       	movw	r30, r16
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	89 2b       	or	r24, r25
    1d8e:	51 f4       	brne	.+20     	; 0x1da4 <xQueueSemaphoreTake+0xee>
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	0f 92       	push	r0
    1d96:	84 81       	ldd	r24, Z+4	; 0x04
    1d98:	95 81       	ldd	r25, Z+5	; 0x05
    1d9a:	0e 94 86 1a 	call	0x350c	; 0x350c <xTaskPriorityInherit>
    1d9e:	e8 2e       	mov	r14, r24
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	4e 81       	ldd	r20, Y+6	; 0x06
    1da6:	5f 81       	ldd	r21, Y+7	; 0x07
    1da8:	68 85       	ldd	r22, Y+8	; 0x08
    1daa:	79 85       	ldd	r23, Y+9	; 0x09
    1dac:	c8 01       	movw	r24, r16
    1dae:	43 96       	adiw	r24, 0x13	; 19
    1db0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <vTaskPlaceOnEventList>
    1db4:	c8 01       	movw	r24, r16
    1db6:	59 dd       	rcall	.-1358   	; 0x186a <prvUnlockQueue>
    1db8:	58 d7       	rcall	.+3760   	; 0x2c6a <xTaskResumeAll>
    1dba:	81 11       	cpse	r24, r1
    1dbc:	91 cf       	rjmp	.-222    	; 0x1ce0 <xQueueSemaphoreTake+0x2a>
    1dbe:	e9 db       	rcall	.-2094   	; 0x1592 <vPortYield>
    1dc0:	8f cf       	rjmp	.-226    	; 0x1ce0 <xQueueSemaphoreTake+0x2a>
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	52 dd       	rcall	.-1372   	; 0x186a <prvUnlockQueue>
    1dc6:	51 d7       	rcall	.+3746   	; 0x2c6a <xTaskResumeAll>
    1dc8:	8b cf       	rjmp	.-234    	; 0x1ce0 <xQueueSemaphoreTake+0x2a>
    1dca:	c8 01       	movw	r24, r16
    1dcc:	4e dd       	rcall	.-1380   	; 0x186a <prvUnlockQueue>
    1dce:	4d d7       	rcall	.+3738   	; 0x2c6a <xTaskResumeAll>
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	b7 dc       	rcall	.-1682   	; 0x1742 <prvIsQueueEmpty>
    1dd4:	88 23       	and	r24, r24
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <xQueueSemaphoreTake+0x124>
    1dd8:	83 cf       	rjmp	.-250    	; 0x1ce0 <xQueueSemaphoreTake+0x2a>
    1dda:	ee 20       	and	r14, r14
    1ddc:	79 f0       	breq	.+30     	; 0x1dfc <xQueueSemaphoreTake+0x146>
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	0f 92       	push	r0
    1de4:	c8 01       	movw	r24, r16
    1de6:	9d dc       	rcall	.-1734   	; 0x1722 <prvGetDisinheritPriorityAfterTimeout>
    1de8:	68 2f       	mov	r22, r24
    1dea:	f8 01       	movw	r30, r16
    1dec:	84 81       	ldd	r24, Z+4	; 0x04
    1dee:	95 81       	ldd	r25, Z+5	; 0x05
    1df0:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <vTaskPriorityDisinheritAfterTimeout>
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	01 c0       	rjmp	.+2      	; 0x1dfe <xQueueSemaphoreTake+0x148>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	29 96       	adiw	r28, 0x09	; 9
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	08 95       	ret

00001e18 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	0f 92       	push	r0
    1e24:	89 a1       	ldd	r24, Y+33	; 0x21
    1e26:	8f 3f       	cpi	r24, 0xFF	; 255
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <vQueueWaitForMessageRestricted+0x14>
    1e2a:	19 a2       	std	Y+33, r1	; 0x21
    1e2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <vQueueWaitForMessageRestricted+0x1c>
    1e32:	1a a2       	std	Y+34, r1	; 0x22
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1e38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1e3e:	ce 01       	movw	r24, r28
    1e40:	43 96       	adiw	r24, 0x13	; 19
    1e42:	0e 94 57 18 	call	0x30ae	; 0x30ae <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1e46:	ce 01       	movw	r24, r28
    1e48:	10 dd       	rcall	.-1504   	; 0x186a <prvUnlockQueue>
    }
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1e50:	fc 01       	movw	r30, r24
    1e52:	44 81       	ldd	r20, Z+4	; 0x04
    1e54:	55 81       	ldd	r21, Z+5	; 0x05
    1e56:	22 81       	ldd	r18, Z+2	; 0x02
    1e58:	33 81       	ldd	r19, Z+3	; 0x03
    1e5a:	24 0f       	add	r18, r20
    1e5c:	35 1f       	adc	r19, r21
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	b9 01       	movw	r22, r18
    1e64:	68 1b       	sub	r22, r24
    1e66:	79 0b       	sbc	r23, r25
    1e68:	cb 01       	movw	r24, r22
    1e6a:	64 17       	cp	r22, r20
    1e6c:	75 07       	cpc	r23, r21
    1e6e:	10 f0       	brcs	.+4      	; 0x1e74 <prvBytesInBuffer+0x24>
    1e70:	84 1b       	sub	r24, r20
    1e72:	95 0b       	sbc	r25, r21
    1e74:	08 95       	ret

00001e76 <prvInitialiseNewStreamBuffer>:
    1e76:	0f 93       	push	r16
    1e78:	fc 01       	movw	r30, r24
    1e7a:	8f e0       	ldi	r24, 0x0F	; 15
    1e7c:	df 01       	movw	r26, r30
    1e7e:	1d 92       	st	X+, r1
    1e80:	8a 95       	dec	r24
    1e82:	e9 f7       	brne	.-6      	; 0x1e7e <prvInitialiseNewStreamBuffer+0x8>
    1e84:	75 87       	std	Z+13, r23	; 0x0d
    1e86:	64 87       	std	Z+12, r22	; 0x0c
    1e88:	55 83       	std	Z+5, r21	; 0x05
    1e8a:	44 83       	std	Z+4, r20	; 0x04
    1e8c:	37 83       	std	Z+7, r19	; 0x07
    1e8e:	26 83       	std	Z+6, r18	; 0x06
    1e90:	06 87       	std	Z+14, r16	; 0x0e
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <prvWriteBytesToBuffer>:
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	6c 01       	movw	r12, r24
    1eac:	5b 01       	movw	r10, r22
    1eae:	7a 01       	movw	r14, r20
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	c2 81       	ldd	r28, Z+2	; 0x02
    1eb4:	d3 81       	ldd	r29, Z+3	; 0x03
    1eb6:	04 81       	ldd	r16, Z+4	; 0x04
    1eb8:	15 81       	ldd	r17, Z+5	; 0x05
    1eba:	0c 1b       	sub	r16, r28
    1ebc:	1d 0b       	sbc	r17, r29
    1ebe:	40 17       	cp	r20, r16
    1ec0:	51 07       	cpc	r21, r17
    1ec2:	08 f4       	brcc	.+2      	; 0x1ec6 <prvWriteBytesToBuffer+0x30>
    1ec4:	8a 01       	movw	r16, r20
    1ec6:	f6 01       	movw	r30, r12
    1ec8:	84 85       	ldd	r24, Z+12	; 0x0c
    1eca:	95 85       	ldd	r25, Z+13	; 0x0d
    1ecc:	a8 01       	movw	r20, r16
    1ece:	b5 01       	movw	r22, r10
    1ed0:	8c 0f       	add	r24, r28
    1ed2:	9d 1f       	adc	r25, r29
    1ed4:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <memcpy>
    1ed8:	0e 15       	cp	r16, r14
    1eda:	1f 05       	cpc	r17, r15
    1edc:	58 f4       	brcc	.+22     	; 0x1ef4 <prvWriteBytesToBuffer+0x5e>
    1ede:	a7 01       	movw	r20, r14
    1ee0:	40 1b       	sub	r20, r16
    1ee2:	51 0b       	sbc	r21, r17
    1ee4:	b5 01       	movw	r22, r10
    1ee6:	60 0f       	add	r22, r16
    1ee8:	71 1f       	adc	r23, r17
    1eea:	f6 01       	movw	r30, r12
    1eec:	84 85       	ldd	r24, Z+12	; 0x0c
    1eee:	95 85       	ldd	r25, Z+13	; 0x0d
    1ef0:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <memcpy>
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	8e 0d       	add	r24, r14
    1ef8:	9f 1d       	adc	r25, r15
    1efa:	f6 01       	movw	r30, r12
    1efc:	24 81       	ldd	r18, Z+4	; 0x04
    1efe:	35 81       	ldd	r19, Z+5	; 0x05
    1f00:	82 17       	cp	r24, r18
    1f02:	93 07       	cpc	r25, r19
    1f04:	10 f0       	brcs	.+4      	; 0x1f0a <prvWriteBytesToBuffer+0x74>
    1f06:	82 1b       	sub	r24, r18
    1f08:	93 0b       	sbc	r25, r19
    1f0a:	f6 01       	movw	r30, r12
    1f0c:	93 83       	std	Z+3, r25	; 0x03
    1f0e:	82 83       	std	Z+2, r24	; 0x02
    1f10:	c7 01       	movw	r24, r14
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	af 90       	pop	r10
    1f26:	08 95       	ret

00001f28 <prvWriteMessageToBuffer>:
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	1f 92       	push	r1
    1f3a:	1f 92       	push	r1
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	7c 01       	movw	r14, r24
    1f42:	6b 01       	movw	r12, r22
    1f44:	5a 83       	std	Y+2, r21	; 0x02
    1f46:	49 83       	std	Y+1, r20	; 0x01
    1f48:	21 15       	cp	r18, r1
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	c1 f0       	breq	.+48     	; 0x1f7e <prvWriteMessageToBuffer+0x56>
    1f4e:	fc 01       	movw	r30, r24
    1f50:	86 85       	ldd	r24, Z+14	; 0x0e
    1f52:	80 fd       	sbrc	r24, 0
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <prvWriteMessageToBuffer+0x3e>
    1f56:	42 17       	cp	r20, r18
    1f58:	53 07       	cpc	r21, r19
    1f5a:	08 f4       	brcc	.+2      	; 0x1f5e <prvWriteMessageToBuffer+0x36>
    1f5c:	9a 01       	movw	r18, r20
    1f5e:	3a 83       	std	Y+2, r19	; 0x02
    1f60:	29 83       	std	Y+1, r18	; 0x01
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <prvWriteMessageToBuffer+0x5c>
    1f66:	20 17       	cp	r18, r16
    1f68:	31 07       	cpc	r19, r17
    1f6a:	58 f0       	brcs	.+22     	; 0x1f82 <prvWriteMessageToBuffer+0x5a>
    1f6c:	42 e0       	ldi	r20, 0x02	; 2
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	be 01       	movw	r22, r28
    1f72:	6f 5f       	subi	r22, 0xFF	; 255
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	c7 01       	movw	r24, r14
    1f78:	8e df       	rcall	.-228    	; 0x1e96 <prvWriteBytesToBuffer>
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <prvWriteMessageToBuffer+0x5c>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <prvWriteMessageToBuffer+0x5c>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	88 23       	and	r24, r24
    1f86:	31 f0       	breq	.+12     	; 0x1f94 <prvWriteMessageToBuffer+0x6c>
    1f88:	49 81       	ldd	r20, Y+1	; 0x01
    1f8a:	5a 81       	ldd	r21, Y+2	; 0x02
    1f8c:	b6 01       	movw	r22, r12
    1f8e:	c7 01       	movw	r24, r14
    1f90:	82 df       	rcall	.-252    	; 0x1e96 <prvWriteBytesToBuffer>
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <prvWriteMessageToBuffer+0x70>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	df 90       	pop	r13
    1faa:	cf 90       	pop	r12
    1fac:	08 95       	ret

00001fae <prvReadBytesFromBuffer>:
    1fae:	af 92       	push	r10
    1fb0:	bf 92       	push	r11
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	7c 01       	movw	r14, r24
    1fc4:	5b 01       	movw	r10, r22
    1fc6:	e9 01       	movw	r28, r18
    1fc8:	42 17       	cp	r20, r18
    1fca:	53 07       	cpc	r21, r19
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <prvReadBytesFromBuffer+0x22>
    1fce:	ea 01       	movw	r28, r20
    1fd0:	20 97       	sbiw	r28, 0x00	; 0
    1fd2:	81 f1       	breq	.+96     	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    1fd4:	f7 01       	movw	r30, r14
    1fd6:	00 81       	ld	r16, Z
    1fd8:	11 81       	ldd	r17, Z+1	; 0x01
    1fda:	84 81       	ldd	r24, Z+4	; 0x04
    1fdc:	95 81       	ldd	r25, Z+5	; 0x05
    1fde:	80 1b       	sub	r24, r16
    1fe0:	91 0b       	sbc	r25, r17
    1fe2:	6e 01       	movw	r12, r28
    1fe4:	8c 17       	cp	r24, r28
    1fe6:	9d 07       	cpc	r25, r29
    1fe8:	08 f4       	brcc	.+2      	; 0x1fec <prvReadBytesFromBuffer+0x3e>
    1fea:	6c 01       	movw	r12, r24
    1fec:	f7 01       	movw	r30, r14
    1fee:	64 85       	ldd	r22, Z+12	; 0x0c
    1ff0:	75 85       	ldd	r23, Z+13	; 0x0d
    1ff2:	60 0f       	add	r22, r16
    1ff4:	71 1f       	adc	r23, r17
    1ff6:	a6 01       	movw	r20, r12
    1ff8:	c5 01       	movw	r24, r10
    1ffa:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <memcpy>
    1ffe:	cc 16       	cp	r12, r28
    2000:	dd 06       	cpc	r13, r29
    2002:	58 f4       	brcc	.+22     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2004:	ae 01       	movw	r20, r28
    2006:	4c 19       	sub	r20, r12
    2008:	5d 09       	sbc	r21, r13
    200a:	f7 01       	movw	r30, r14
    200c:	64 85       	ldd	r22, Z+12	; 0x0c
    200e:	75 85       	ldd	r23, Z+13	; 0x0d
    2010:	c5 01       	movw	r24, r10
    2012:	8c 0d       	add	r24, r12
    2014:	9d 1d       	adc	r25, r13
    2016:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <memcpy>
    201a:	0c 0f       	add	r16, r28
    201c:	1d 1f       	adc	r17, r29
    201e:	f7 01       	movw	r30, r14
    2020:	84 81       	ldd	r24, Z+4	; 0x04
    2022:	95 81       	ldd	r25, Z+5	; 0x05
    2024:	08 17       	cp	r16, r24
    2026:	19 07       	cpc	r17, r25
    2028:	10 f0       	brcs	.+4      	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    202a:	08 1b       	sub	r16, r24
    202c:	19 0b       	sbc	r17, r25
    202e:	f7 01       	movw	r30, r14
    2030:	11 83       	std	Z+1, r17	; 0x01
    2032:	00 83       	st	Z, r16
    2034:	ce 01       	movw	r24, r28
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	ff 90       	pop	r15
    2040:	ef 90       	pop	r14
    2042:	df 90       	pop	r13
    2044:	cf 90       	pop	r12
    2046:	bf 90       	pop	r11
    2048:	af 90       	pop	r10
    204a:	08 95       	ret

0000204c <prvReadMessageFromBuffer>:
    204c:	6f 92       	push	r6
    204e:	7f 92       	push	r7
    2050:	8f 92       	push	r8
    2052:	9f 92       	push	r9
    2054:	af 92       	push	r10
    2056:	bf 92       	push	r11
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	1f 92       	push	r1
    206a:	1f 92       	push	r1
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	6c 01       	movw	r12, r24
    2072:	4b 01       	movw	r8, r22
    2074:	5a 01       	movw	r10, r20
    2076:	79 01       	movw	r14, r18
    2078:	01 15       	cp	r16, r1
    207a:	11 05       	cpc	r17, r1
    207c:	b1 f0       	breq	.+44     	; 0x20aa <prvReadMessageFromBuffer+0x5e>
    207e:	fc 01       	movw	r30, r24
    2080:	60 80       	ld	r6, Z
    2082:	71 80       	ldd	r7, Z+1	; 0x01
    2084:	a8 01       	movw	r20, r16
    2086:	be 01       	movw	r22, r28
    2088:	6f 5f       	subi	r22, 0xFF	; 255
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	90 df       	rcall	.-224    	; 0x1fae <prvReadBytesFromBuffer>
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	e0 1a       	sub	r14, r16
    2094:	f1 0a       	sbc	r15, r17
    2096:	a8 16       	cp	r10, r24
    2098:	b9 06       	cpc	r11, r25
    209a:	30 f4       	brcc	.+12     	; 0x20a8 <prvReadMessageFromBuffer+0x5c>
    209c:	f6 01       	movw	r30, r12
    209e:	71 82       	std	Z+1, r7	; 0x01
    20a0:	60 82       	st	Z, r6
    20a2:	a1 2c       	mov	r10, r1
    20a4:	b1 2c       	mov	r11, r1
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <prvReadMessageFromBuffer+0x5e>
    20a8:	5c 01       	movw	r10, r24
    20aa:	97 01       	movw	r18, r14
    20ac:	a5 01       	movw	r20, r10
    20ae:	b4 01       	movw	r22, r8
    20b0:	c6 01       	movw	r24, r12
    20b2:	7d df       	rcall	.-262    	; 0x1fae <prvReadBytesFromBuffer>
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	9f 90       	pop	r9
    20ce:	8f 90       	pop	r8
    20d0:	7f 90       	pop	r7
    20d2:	6f 90       	pop	r6
    20d4:	08 95       	ret

000020d6 <xStreamBufferGenericCreate>:
    20d6:	cf 92       	push	r12
    20d8:	df 92       	push	r13
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	ec 01       	movw	r28, r24
    20e6:	6b 01       	movw	r12, r22
    20e8:	41 30       	cpi	r20, 0x01	; 1
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <xStreamBufferGenericCreate+0x1a>
    20ec:	01 e0       	ldi	r16, 0x01	; 1
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <xStreamBufferGenericCreate+0x1c>
    20f0:	00 e0       	ldi	r16, 0x00	; 0
    20f2:	c1 14       	cp	r12, r1
    20f4:	d1 04       	cpc	r13, r1
    20f6:	19 f4       	brne	.+6      	; 0x20fe <xStreamBufferGenericCreate+0x28>
    20f8:	cc 24       	eor	r12, r12
    20fa:	c3 94       	inc	r12
    20fc:	d1 2c       	mov	r13, r1
    20fe:	ce 01       	movw	r24, r28
    2100:	40 96       	adiw	r24, 0x10	; 16
    2102:	c8 17       	cp	r28, r24
    2104:	d9 07       	cpc	r29, r25
    2106:	20 f4       	brcc	.+8      	; 0x2110 <xStreamBufferGenericCreate+0x3a>
    2108:	21 96       	adiw	r28, 0x01	; 1
    210a:	8f d8       	rcall	.-3810   	; 0x122a <pvPortMalloc>
    210c:	7c 01       	movw	r14, r24
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <xStreamBufferGenericCreate+0x3e>
    2110:	e1 2c       	mov	r14, r1
    2112:	f1 2c       	mov	r15, r1
    2114:	e1 14       	cp	r14, r1
    2116:	f1 04       	cpc	r15, r1
    2118:	39 f0       	breq	.+14     	; 0x2128 <xStreamBufferGenericCreate+0x52>
    211a:	96 01       	movw	r18, r12
    211c:	ae 01       	movw	r20, r28
    211e:	b7 01       	movw	r22, r14
    2120:	61 5f       	subi	r22, 0xF1	; 241
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	c7 01       	movw	r24, r14
    2126:	a7 de       	rcall	.-690    	; 0x1e76 <prvInitialiseNewStreamBuffer>
    2128:	c7 01       	movw	r24, r14
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	08 95       	ret

0000213a <xStreamBufferReset>:
    213a:	0f 93       	push	r16
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	0f 92       	push	r0
    2142:	fc 01       	movw	r30, r24
    2144:	20 85       	ldd	r18, Z+8	; 0x08
    2146:	31 85       	ldd	r19, Z+9	; 0x09
    2148:	23 2b       	or	r18, r19
    214a:	71 f4       	brne	.+28     	; 0x2168 <xStreamBufferReset+0x2e>
    214c:	22 85       	ldd	r18, Z+10	; 0x0a
    214e:	33 85       	ldd	r19, Z+11	; 0x0b
    2150:	23 2b       	or	r18, r19
    2152:	61 f4       	brne	.+24     	; 0x216c <xStreamBufferReset+0x32>
    2154:	26 81       	ldd	r18, Z+6	; 0x06
    2156:	37 81       	ldd	r19, Z+7	; 0x07
    2158:	44 81       	ldd	r20, Z+4	; 0x04
    215a:	55 81       	ldd	r21, Z+5	; 0x05
    215c:	64 85       	ldd	r22, Z+12	; 0x0c
    215e:	75 85       	ldd	r23, Z+13	; 0x0d
    2160:	06 85       	ldd	r16, Z+14	; 0x0e
    2162:	89 de       	rcall	.-750    	; 0x1e76 <prvInitialiseNewStreamBuffer>
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	03 c0       	rjmp	.+6      	; 0x216e <xStreamBufferReset+0x34>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	01 c0       	rjmp	.+2      	; 0x216e <xStreamBufferReset+0x34>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <xStreamBufferSpacesAvailable>:
    2176:	fc 01       	movw	r30, r24
    2178:	24 81       	ldd	r18, Z+4	; 0x04
    217a:	35 81       	ldd	r19, Z+5	; 0x05
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	82 0f       	add	r24, r18
    2182:	93 1f       	adc	r25, r19
    2184:	42 81       	ldd	r20, Z+2	; 0x02
    2186:	53 81       	ldd	r21, Z+3	; 0x03
    2188:	84 1b       	sub	r24, r20
    218a:	95 0b       	sbc	r25, r21
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	82 17       	cp	r24, r18
    2190:	93 07       	cpc	r25, r19
    2192:	10 f0       	brcs	.+4      	; 0x2198 <xStreamBufferSpacesAvailable+0x22>
    2194:	82 1b       	sub	r24, r18
    2196:	93 0b       	sbc	r25, r19
    2198:	08 95       	ret

0000219a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    219a:	2f 92       	push	r2
    219c:	3f 92       	push	r3
    219e:	4f 92       	push	r4
    21a0:	5f 92       	push	r5
    21a2:	6f 92       	push	r6
    21a4:	7f 92       	push	r7
    21a6:	8f 92       	push	r8
    21a8:	9f 92       	push	r9
    21aa:	af 92       	push	r10
    21ac:	bf 92       	push	r11
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	2b 97       	sbiw	r28, 0x0b	; 11
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	4c 01       	movw	r8, r24
    21d0:	7b 87       	std	Y+11, r23	; 0x0b
    21d2:	6a 87       	std	Y+10, r22	; 0x0a
    21d4:	1a 01       	movw	r2, r20
    21d6:	0e 83       	std	Y+6, r16	; 0x06
    21d8:	1f 83       	std	Y+7, r17	; 0x07
    21da:	28 87       	std	Y+8, r18	; 0x08
    21dc:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    21de:	fc 01       	movw	r30, r24
    21e0:	84 81       	ldd	r24, Z+4	; 0x04
    21e2:	95 81       	ldd	r25, Z+5	; 0x05
    21e4:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    21e6:	26 85       	ldd	r18, Z+14	; 0x0e
    21e8:	20 ff       	sbrs	r18, 0
    21ea:	0c c0       	rjmp	.+24     	; 0x2204 <__stack+0x5>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    21ec:	2a 01       	movw	r4, r20
    21ee:	f2 e0       	ldi	r31, 0x02	; 2
    21f0:	4f 0e       	add	r4, r31
    21f2:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    21f4:	84 15       	cp	r24, r4
    21f6:	95 05       	cpc	r25, r5
    21f8:	58 f4       	brcc	.+22     	; 0x2210 <__stack+0x11>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    21fa:	1e 82       	std	Y+6, r1	; 0x06
    21fc:	1f 82       	std	Y+7, r1	; 0x07
    21fe:	18 86       	std	Y+8, r1	; 0x08
    2200:	19 86       	std	Y+9, r1	; 0x09
    2202:	06 c0       	rjmp	.+12     	; 0x2210 <__stack+0x11>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    2204:	84 17       	cp	r24, r20
    2206:	95 07       	cpc	r25, r21
    2208:	10 f0       	brcs	.+4      	; 0x220e <__stack+0xf>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    220a:	2a 01       	movw	r4, r20
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <__stack+0x11>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    220e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2210:	8e 81       	ldd	r24, Y+6	; 0x06
    2212:	9f 81       	ldd	r25, Y+7	; 0x07
    2214:	a8 85       	ldd	r26, Y+8	; 0x08
    2216:	b9 85       	ldd	r27, Y+9	; 0x09
    2218:	89 2b       	or	r24, r25
    221a:	8a 2b       	or	r24, r26
    221c:	8b 2b       	or	r24, r27
    221e:	09 f4       	brne	.+2      	; 0x2222 <__stack+0x23>
    2220:	38 c0       	rjmp	.+112    	; 0x2292 <__stack+0x93>
    {
        vTaskSetTimeOutState( &xTimeOut );
    2222:	ce 01       	movw	r24, r28
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2230:	c4 01       	movw	r24, r8
    2232:	a1 df       	rcall	.-190    	; 0x2176 <xStreamBufferSpacesAvailable>
    2234:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    2236:	84 15       	cp	r24, r4
    2238:	95 05       	cpc	r25, r5
    223a:	40 f5       	brcc	.+80     	; 0x228c <__stack+0x8d>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2246:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <xTaskGetCurrentTaskHandle>
    224a:	f4 01       	movw	r30, r8
    224c:	93 87       	std	Z+11, r25	; 0x0b
    224e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2250:	0f 90       	pop	r0
    2252:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2254:	ae 80       	ldd	r10, Y+6	; 0x06
    2256:	bf 80       	ldd	r11, Y+7	; 0x07
    2258:	c8 84       	ldd	r12, Y+8	; 0x08
    225a:	d9 84       	ldd	r13, Y+9	; 0x09
    225c:	e1 2c       	mov	r14, r1
    225e:	f1 2c       	mov	r15, r1
    2260:	00 e0       	ldi	r16, 0x00	; 0
    2262:	10 e0       	ldi	r17, 0x00	; 0
    2264:	98 01       	movw	r18, r16
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	ba 01       	movw	r22, r20
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2272:	f4 01       	movw	r30, r8
    2274:	13 86       	std	Z+11, r1	; 0x0b
    2276:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2278:	be 01       	movw	r22, r28
    227a:	6a 5f       	subi	r22, 0xFA	; 250
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	ce 01       	movw	r24, r28
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	0e 94 09 1a 	call	0x3412	; 0x3412 <xTaskCheckForTimeOut>
    2286:	88 23       	and	r24, r24
    2288:	81 f2       	breq	.-96     	; 0x222a <__stack+0x2b>
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <__stack+0x97>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
                    break;
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <__stack+0x97>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    2292:	61 2c       	mov	r6, r1
    2294:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2296:	61 14       	cp	r6, r1
    2298:	71 04       	cpc	r7, r1
    229a:	19 f4       	brne	.+6      	; 0x22a2 <__stack+0xa3>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    229c:	c4 01       	movw	r24, r8
    229e:	6b df       	rcall	.-298    	; 0x2176 <xStreamBufferSpacesAvailable>
    22a0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    22a2:	82 01       	movw	r16, r4
    22a4:	93 01       	movw	r18, r6
    22a6:	a1 01       	movw	r20, r2
    22a8:	6a 85       	ldd	r22, Y+10	; 0x0a
    22aa:	7b 85       	ldd	r23, Y+11	; 0x0b
    22ac:	c4 01       	movw	r24, r8
    22ae:	3c de       	rcall	.-904    	; 0x1f28 <prvWriteMessageToBuffer>
    22b0:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    22b2:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    22b4:	e9 f0       	breq	.+58     	; 0x22f0 <__stack+0xf1>
    22b6:	c4 01       	movw	r24, r8
    22b8:	cb dd       	rcall	.-1130   	; 0x1e50 <prvBytesInBuffer>
    22ba:	f4 01       	movw	r30, r8
    22bc:	26 81       	ldd	r18, Z+6	; 0x06
    22be:	37 81       	ldd	r19, Z+7	; 0x07
    22c0:	82 17       	cp	r24, r18
    22c2:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    22c4:	a8 f0       	brcs	.+42     	; 0x22f0 <__stack+0xf1>
    22c6:	91 d3       	rcall	.+1826   	; 0x29ea <vTaskSuspendAll>
    22c8:	f4 01       	movw	r30, r8
    22ca:	80 85       	ldd	r24, Z+8	; 0x08
    22cc:	91 85       	ldd	r25, Z+9	; 0x09
    22ce:	89 2b       	or	r24, r25
    22d0:	71 f0       	breq	.+28     	; 0x22ee <__stack+0xef>
    22d2:	80 85       	ldd	r24, Z+8	; 0x08
    22d4:	91 85       	ldd	r25, Z+9	; 0x09
    22d6:	e1 2c       	mov	r14, r1
    22d8:	f1 2c       	mov	r15, r1
    22da:	00 e0       	ldi	r16, 0x00	; 0
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	a9 01       	movw	r20, r18
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskGenericNotify>
    22e8:	f4 01       	movw	r30, r8
    22ea:	11 86       	std	Z+9, r1	; 0x09
    22ec:	10 86       	std	Z+8, r1	; 0x08
    22ee:	bd d4       	rcall	.+2426   	; 0x2c6a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    22f0:	c6 01       	movw	r24, r12
    22f2:	2b 96       	adiw	r28, 0x0b	; 11
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	9f 90       	pop	r9
    2314:	8f 90       	pop	r8
    2316:	7f 90       	pop	r7
    2318:	6f 90       	pop	r6
    231a:	5f 90       	pop	r5
    231c:	4f 90       	pop	r4
    231e:	3f 90       	pop	r3
    2320:	2f 90       	pop	r2
    2322:	08 95       	ret

00002324 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2324:	af 92       	push	r10
    2326:	bf 92       	push	r11
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	ec 01       	movw	r28, r24
    233a:	7b 01       	movw	r14, r22
    233c:	5a 01       	movw	r10, r20
    233e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2340:	8e 85       	ldd	r24, Y+14	; 0x0e
    2342:	80 ff       	sbrs	r24, 0
    2344:	04 c0       	rjmp	.+8      	; 0x234e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2346:	8a 01       	movw	r16, r20
    2348:	0e 5f       	subi	r16, 0xFE	; 254
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    234e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2350:	ce 01       	movw	r24, r28
    2352:	11 df       	rcall	.-478    	; 0x2176 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2354:	9c 01       	movw	r18, r24
    2356:	a5 01       	movw	r20, r10
    2358:	b7 01       	movw	r22, r14
    235a:	ce 01       	movw	r24, r28
    235c:	e5 dd       	rcall	.-1078   	; 0x1f28 <prvWriteMessageToBuffer>
    235e:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    2360:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2362:	c1 f0       	breq	.+48     	; 0x2394 <xStreamBufferSendFromISR+0x70>
    2364:	ce 01       	movw	r24, r28
    2366:	74 dd       	rcall	.-1304   	; 0x1e50 <prvBytesInBuffer>
    2368:	2e 81       	ldd	r18, Y+6	; 0x06
    236a:	3f 81       	ldd	r19, Y+7	; 0x07
    236c:	82 17       	cp	r24, r18
    236e:	93 07       	cpc	r25, r19
    2370:	88 f0       	brcs	.+34     	; 0x2394 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2372:	88 85       	ldd	r24, Y+8	; 0x08
    2374:	99 85       	ldd	r25, Y+9	; 0x09
    2376:	89 2b       	or	r24, r25
    2378:	69 f0       	breq	.+26     	; 0x2394 <xStreamBufferSendFromISR+0x70>
    237a:	88 85       	ldd	r24, Y+8	; 0x08
    237c:	99 85       	ldd	r25, Y+9	; 0x09
    237e:	e1 2c       	mov	r14, r1
    2380:	f1 2c       	mov	r15, r1
    2382:	00 e0       	ldi	r16, 0x00	; 0
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	a9 01       	movw	r20, r18
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <xTaskGenericNotifyFromISR>
    2390:	19 86       	std	Y+9, r1	; 0x09
    2392:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2394:	c5 01       	movw	r24, r10
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	df 90       	pop	r13
    23a4:	cf 90       	pop	r12
    23a6:	bf 90       	pop	r11
    23a8:	af 90       	pop	r10
    23aa:	08 95       	ret

000023ac <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    23ac:	4f 92       	push	r4
    23ae:	5f 92       	push	r5
    23b0:	6f 92       	push	r6
    23b2:	7f 92       	push	r7
    23b4:	8f 92       	push	r8
    23b6:	9f 92       	push	r9
    23b8:	af 92       	push	r10
    23ba:	bf 92       	push	r11
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	ec 01       	movw	r28, r24
    23ce:	2b 01       	movw	r4, r22
    23d0:	3a 01       	movw	r6, r20
    23d2:	58 01       	movw	r10, r16
    23d4:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    23d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d8:	80 ff       	sbrs	r24, 0
    23da:	05 c0       	rjmp	.+10     	; 0x23e6 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    23dc:	68 94       	set
    23de:	88 24       	eor	r8, r8
    23e0:	81 f8       	bld	r8, 1
    23e2:	91 2c       	mov	r9, r1
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    23e6:	81 2c       	mov	r8, r1
    23e8:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    23ea:	a1 14       	cp	r10, r1
    23ec:	b1 04       	cpc	r11, r1
    23ee:	c1 04       	cpc	r12, r1
    23f0:	d1 04       	cpc	r13, r1
    23f2:	41 f1       	breq	.+80     	; 0x2444 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    23fa:	ce 01       	movw	r24, r28
    23fc:	29 dd       	rcall	.-1454   	; 0x1e50 <prvBytesInBuffer>
    23fe:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2400:	88 16       	cp	r8, r24
    2402:	99 06       	cpc	r9, r25
    2404:	48 f0       	brcs	.+18     	; 0x2418 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2410:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <xTaskGetCurrentTaskHandle>
    2414:	99 87       	std	Y+9, r25	; 0x09
    2416:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2418:	0f 90       	pop	r0
    241a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    241c:	8e 14       	cp	r8, r14
    241e:	9f 04       	cpc	r9, r15
    2420:	a0 f0       	brcs	.+40     	; 0x244a <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2422:	e1 2c       	mov	r14, r1
    2424:	f1 2c       	mov	r15, r1
    2426:	00 e0       	ldi	r16, 0x00	; 0
    2428:	10 e0       	ldi	r17, 0x00	; 0
    242a:	98 01       	movw	r18, r16
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	ba 01       	movw	r22, r20
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	0e 94 0b 1c 	call	0x3816	; 0x3816 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2438:	19 86       	std	Y+9, r1	; 0x09
    243a:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    243c:	ce 01       	movw	r24, r28
    243e:	08 dd       	rcall	.-1520   	; 0x1e50 <prvBytesInBuffer>
    2440:	7c 01       	movw	r14, r24
    2442:	03 c0       	rjmp	.+6      	; 0x244a <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2444:	ce 01       	movw	r24, r28
    2446:	04 dd       	rcall	.-1528   	; 0x1e50 <prvBytesInBuffer>
    2448:	7c 01       	movw	r14, r24
    244a:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    244c:	9f 04       	cpc	r9, r15
    244e:	e8 f4       	brcc	.+58     	; 0x248a <xStreamBufferReceive+0xde>
    2450:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    2452:	97 01       	movw	r18, r14
    2454:	a3 01       	movw	r20, r6
    2456:	b2 01       	movw	r22, r4
    2458:	ce 01       	movw	r24, r28
    245a:	f8 dd       	rcall	.-1040   	; 0x204c <prvReadMessageFromBuffer>
    245c:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    245e:	89 2b       	or	r24, r25
    2460:	b1 f0       	breq	.+44     	; 0x248e <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2462:	c3 d2       	rcall	.+1414   	; 0x29ea <vTaskSuspendAll>
    2464:	8a 85       	ldd	r24, Y+10	; 0x0a
    2466:	9b 85       	ldd	r25, Y+11	; 0x0b
    2468:	89 2b       	or	r24, r25
    246a:	69 f0       	breq	.+26     	; 0x2486 <xStreamBufferReceive+0xda>
    246c:	8a 85       	ldd	r24, Y+10	; 0x0a
    246e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2470:	e1 2c       	mov	r14, r1
    2472:	f1 2c       	mov	r15, r1
    2474:	00 e0       	ldi	r16, 0x00	; 0
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	a9 01       	movw	r20, r18
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskGenericNotify>
    2482:	1b 86       	std	Y+11, r1	; 0x0b
    2484:	1a 86       	std	Y+10, r1	; 0x0a
    2486:	f1 d3       	rcall	.+2018   	; 0x2c6a <xTaskResumeAll>
    2488:	02 c0       	rjmp	.+4      	; 0x248e <xStreamBufferReceive+0xe2>
    248a:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    248c:	d1 2c       	mov	r13, r1
    248e:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	ff 90       	pop	r15
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	bf 90       	pop	r11
    24a2:	af 90       	pop	r10
    24a4:	9f 90       	pop	r9
    24a6:	8f 90       	pop	r8
    24a8:	7f 90       	pop	r7
    24aa:	6f 90       	pop	r6
    24ac:	5f 90       	pop	r5
    24ae:	4f 90       	pop	r4
    24b0:	08 95       	ret

000024b2 <prvResetNextTaskUnblockTime>:
    24b2:	e0 91 81 13 	lds	r30, 0x1381	; 0x801381 <pxDelayedTaskList>
    24b6:	f0 91 82 13 	lds	r31, 0x1382	; 0x801382 <pxDelayedTaskList+0x1>
    24ba:	80 81       	ld	r24, Z
    24bc:	81 11       	cpse	r24, r1
    24be:	0c c0       	rjmp	.+24     	; 0x24d8 <prvResetNextTaskUnblockTime+0x26>
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	9f ef       	ldi	r25, 0xFF	; 255
    24c4:	dc 01       	movw	r26, r24
    24c6:	80 93 4b 13 	sts	0x134B, r24	; 0x80134b <xNextTaskUnblockTime>
    24ca:	90 93 4c 13 	sts	0x134C, r25	; 0x80134c <xNextTaskUnblockTime+0x1>
    24ce:	a0 93 4d 13 	sts	0x134D, r26	; 0x80134d <xNextTaskUnblockTime+0x2>
    24d2:	b0 93 4e 13 	sts	0x134E, r27	; 0x80134e <xNextTaskUnblockTime+0x3>
    24d6:	08 95       	ret
    24d8:	e0 91 81 13 	lds	r30, 0x1381	; 0x801381 <pxDelayedTaskList>
    24dc:	f0 91 82 13 	lds	r31, 0x1382	; 0x801382 <pxDelayedTaskList+0x1>
    24e0:	07 80       	ldd	r0, Z+7	; 0x07
    24e2:	f0 85       	ldd	r31, Z+8	; 0x08
    24e4:	e0 2d       	mov	r30, r0
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	a2 81       	ldd	r26, Z+2	; 0x02
    24ec:	b3 81       	ldd	r27, Z+3	; 0x03
    24ee:	80 93 4b 13 	sts	0x134B, r24	; 0x80134b <xNextTaskUnblockTime>
    24f2:	90 93 4c 13 	sts	0x134C, r25	; 0x80134c <xNextTaskUnblockTime+0x1>
    24f6:	a0 93 4d 13 	sts	0x134D, r26	; 0x80134d <xNextTaskUnblockTime+0x2>
    24fa:	b0 93 4e 13 	sts	0x134E, r27	; 0x80134e <xNextTaskUnblockTime+0x3>
    24fe:	08 95       	ret

00002500 <prvDeleteTCB>:
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	ec 01       	movw	r28, r24
    2506:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2508:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250a:	0e 94 be 09 	call	0x137c	; 0x137c <vPortFree>
    250e:	ce 01       	movw	r24, r28
    2510:	0e 94 be 09 	call	0x137c	; 0x137c <vPortFree>
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <prvInitialiseNewTask>:
    251a:	4f 92       	push	r4
    251c:	5f 92       	push	r5
    251e:	6f 92       	push	r6
    2520:	7f 92       	push	r7
    2522:	8f 92       	push	r8
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	2c 01       	movw	r4, r24
    253a:	5b 01       	movw	r10, r22
    253c:	4a 01       	movw	r8, r20
    253e:	39 01       	movw	r6, r18
    2540:	e6 01       	movw	r28, r12
    2542:	65 ea       	ldi	r22, 0xA5	; 165
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254a:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <memset>
    254e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2552:	21 e0       	ldi	r18, 0x01	; 1
    2554:	82 1a       	sub	r8, r18
    2556:	91 08       	sbc	r9, r1
    2558:	88 0e       	add	r8, r24
    255a:	99 1e       	adc	r9, r25
    255c:	a1 14       	cp	r10, r1
    255e:	b1 04       	cpc	r11, r1
    2560:	89 f4       	brne	.+34     	; 0x2584 <prvInitialiseNewTask+0x6a>
    2562:	15 c0       	rjmp	.+42     	; 0x258e <prvInitialiseNewTask+0x74>
    2564:	82 2f       	mov	r24, r18
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	f5 01       	movw	r30, r10
    256a:	e8 0f       	add	r30, r24
    256c:	f9 1f       	adc	r31, r25
    256e:	30 81       	ld	r19, Z
    2570:	de 01       	movw	r26, r28
    2572:	a8 0f       	add	r26, r24
    2574:	b9 1f       	adc	r27, r25
    2576:	5d 96       	adiw	r26, 0x1d	; 29
    2578:	3c 93       	st	X, r19
    257a:	80 81       	ld	r24, Z
    257c:	88 23       	and	r24, r24
    257e:	29 f0       	breq	.+10     	; 0x258a <prvInitialiseNewTask+0x70>
    2580:	2f 5f       	subi	r18, 0xFF	; 255
    2582:	01 c0       	rjmp	.+2      	; 0x2586 <prvInitialiseNewTask+0x6c>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	20 31       	cpi	r18, 0x10	; 16
    2588:	68 f3       	brcs	.-38     	; 0x2564 <prvInitialiseNewTask+0x4a>
    258a:	1c a6       	std	Y+44, r1	; 0x2c
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <prvInitialiseNewTask+0x76>
    258e:	1d 8e       	std	Y+29, r1	; 0x1d
    2590:	0a 30       	cpi	r16, 0x0A	; 10
    2592:	08 f0       	brcs	.+2      	; 0x2596 <prvInitialiseNewTask+0x7c>
    2594:	09 e0       	ldi	r16, 0x09	; 9
    2596:	0a 8f       	std	Y+26, r16	; 0x1a
    2598:	0d a7       	std	Y+45, r16	; 0x2d
    259a:	1e a6       	std	Y+46, r1	; 0x2e
    259c:	ce 01       	movw	r24, r28
    259e:	02 96       	adiw	r24, 0x02	; 2
    25a0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <vListInitialiseItem>
    25a4:	ce 01       	movw	r24, r28
    25a6:	0e 96       	adiw	r24, 0x0e	; 14
    25a8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <vListInitialiseItem>
    25ac:	db 87       	std	Y+11, r29	; 0x0b
    25ae:	ca 87       	std	Y+10, r28	; 0x0a
    25b0:	8a e0       	ldi	r24, 0x0A	; 10
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 e0       	ldi	r26, 0x00	; 0
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	80 1b       	sub	r24, r16
    25ba:	91 09       	sbc	r25, r1
    25bc:	a1 09       	sbc	r26, r1
    25be:	b1 09       	sbc	r27, r1
    25c0:	8e 87       	std	Y+14, r24	; 0x0e
    25c2:	9f 87       	std	Y+15, r25	; 0x0f
    25c4:	a8 8b       	std	Y+16, r26	; 0x10
    25c6:	b9 8b       	std	Y+17, r27	; 0x11
    25c8:	df 8b       	std	Y+23, r29	; 0x17
    25ca:	ce 8b       	std	Y+22, r28	; 0x16
    25cc:	84 e0       	ldi	r24, 0x04	; 4
    25ce:	fe 01       	movw	r30, r28
    25d0:	bf 96       	adiw	r30, 0x2f	; 47
    25d2:	df 01       	movw	r26, r30
    25d4:	1d 92       	st	X+, r1
    25d6:	8a 95       	dec	r24
    25d8:	e9 f7       	brne	.-6      	; 0x25d4 <prvInitialiseNewTask+0xba>
    25da:	1b aa       	std	Y+51, r1	; 0x33
    25dc:	a3 01       	movw	r20, r6
    25de:	b2 01       	movw	r22, r4
    25e0:	c4 01       	movw	r24, r8
    25e2:	0e 94 80 0a 	call	0x1500	; 0x1500 <pxPortInitialiseStack>
    25e6:	99 83       	std	Y+1, r25	; 0x01
    25e8:	88 83       	st	Y, r24
    25ea:	e1 14       	cp	r14, r1
    25ec:	f1 04       	cpc	r15, r1
    25ee:	19 f0       	breq	.+6      	; 0x25f6 <prvInitialiseNewTask+0xdc>
    25f0:	f7 01       	movw	r30, r14
    25f2:	d1 83       	std	Z+1, r29	; 0x01
    25f4:	c0 83       	st	Z, r28
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	bf 90       	pop	r11
    2606:	af 90       	pop	r10
    2608:	9f 90       	pop	r9
    260a:	8f 90       	pop	r8
    260c:	7f 90       	pop	r7
    260e:	6f 90       	pop	r6
    2610:	5f 90       	pop	r5
    2612:	4f 90       	pop	r4
    2614:	08 95       	ret

00002616 <prvInitialiseTaskLists>:
    2616:	cf 93       	push	r28
    2618:	c0 e0       	ldi	r28, 0x00	; 0
    261a:	09 c0       	rjmp	.+18     	; 0x262e <prvInitialiseTaskLists+0x18>
    261c:	2b e0       	ldi	r18, 0x0B	; 11
    261e:	c2 9f       	mul	r28, r18
    2620:	c0 01       	movw	r24, r0
    2622:	11 24       	eor	r1, r1
    2624:	87 56       	subi	r24, 0x67	; 103
    2626:	9c 4e       	sbci	r25, 0xEC	; 236
    2628:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    262c:	cf 5f       	subi	r28, 0xFF	; 255
    262e:	ca 30       	cpi	r28, 0x0A	; 10
    2630:	a8 f3       	brcs	.-22     	; 0x261c <prvInitialiseTaskLists+0x6>
    2632:	8e e8       	ldi	r24, 0x8E	; 142
    2634:	93 e1       	ldi	r25, 0x13	; 19
    2636:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    263a:	83 e8       	ldi	r24, 0x83	; 131
    263c:	93 e1       	ldi	r25, 0x13	; 19
    263e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    2642:	84 e7       	ldi	r24, 0x74	; 116
    2644:	93 e1       	ldi	r25, 0x13	; 19
    2646:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    264a:	89 e6       	ldi	r24, 0x69	; 105
    264c:	93 e1       	ldi	r25, 0x13	; 19
    264e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    2652:	8d e5       	ldi	r24, 0x5D	; 93
    2654:	93 e1       	ldi	r25, 0x13	; 19
    2656:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    265a:	8e e8       	ldi	r24, 0x8E	; 142
    265c:	93 e1       	ldi	r25, 0x13	; 19
    265e:	90 93 82 13 	sts	0x1382, r25	; 0x801382 <pxDelayedTaskList+0x1>
    2662:	80 93 81 13 	sts	0x1381, r24	; 0x801381 <pxDelayedTaskList>
    2666:	83 e8       	ldi	r24, 0x83	; 131
    2668:	93 e1       	ldi	r25, 0x13	; 19
    266a:	90 93 80 13 	sts	0x1380, r25	; 0x801380 <pxOverflowDelayedTaskList+0x1>
    266e:	80 93 7f 13 	sts	0x137F, r24	; 0x80137f <pxOverflowDelayedTaskList>
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <prvAddNewTaskToReadyList>:
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	ec 01       	movw	r28, r24
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	0f 92       	push	r0
    2682:	80 91 5c 13 	lds	r24, 0x135C	; 0x80135c <uxCurrentNumberOfTasks>
    2686:	8f 5f       	subi	r24, 0xFF	; 255
    2688:	80 93 5c 13 	sts	0x135C, r24	; 0x80135c <uxCurrentNumberOfTasks>
    268c:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    2690:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2694:	89 2b       	or	r24, r25
    2696:	51 f4       	brne	.+20     	; 0x26ac <prvAddNewTaskToReadyList+0x36>
    2698:	d0 93 08 14 	sts	0x1408, r29	; 0x801408 <pxCurrentTCB+0x1>
    269c:	c0 93 07 14 	sts	0x1407, r28	; 0x801407 <pxCurrentTCB>
    26a0:	80 91 5c 13 	lds	r24, 0x135C	; 0x80135c <uxCurrentNumberOfTasks>
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	91 f4       	brne	.+36     	; 0x26cc <prvAddNewTaskToReadyList+0x56>
    26a8:	b6 df       	rcall	.-148    	; 0x2616 <prvInitialiseTaskLists>
    26aa:	10 c0       	rjmp	.+32     	; 0x26cc <prvAddNewTaskToReadyList+0x56>
    26ac:	80 91 56 13 	lds	r24, 0x1356	; 0x801356 <xSchedulerRunning>
    26b0:	81 11       	cpse	r24, r1
    26b2:	0c c0       	rjmp	.+24     	; 0x26cc <prvAddNewTaskToReadyList+0x56>
    26b4:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    26b8:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    26bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    26be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26c0:	89 17       	cp	r24, r25
    26c2:	20 f0       	brcs	.+8      	; 0x26cc <prvAddNewTaskToReadyList+0x56>
    26c4:	d0 93 08 14 	sts	0x1408, r29	; 0x801408 <pxCurrentTCB+0x1>
    26c8:	c0 93 07 14 	sts	0x1407, r28	; 0x801407 <pxCurrentTCB>
    26cc:	80 91 4f 13 	lds	r24, 0x134F	; 0x80134f <uxTaskNumber>
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	80 93 4f 13 	sts	0x134F, r24	; 0x80134f <uxTaskNumber>
    26d6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26d8:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    26dc:	8e 17       	cp	r24, r30
    26de:	10 f4       	brcc	.+4      	; 0x26e4 <prvAddNewTaskToReadyList+0x6e>
    26e0:	e0 93 57 13 	sts	0x1357, r30	; 0x801357 <uxTopReadyPriority>
    26e4:	8b e0       	ldi	r24, 0x0B	; 11
    26e6:	8e 9f       	mul	r24, r30
    26e8:	f0 01       	movw	r30, r0
    26ea:	11 24       	eor	r1, r1
    26ec:	e7 56       	subi	r30, 0x67	; 103
    26ee:	fc 4e       	sbci	r31, 0xEC	; 236
    26f0:	01 80       	ldd	r0, Z+1	; 0x01
    26f2:	f2 81       	ldd	r31, Z+2	; 0x02
    26f4:	e0 2d       	mov	r30, r0
    26f6:	ff 83       	std	Y+7, r31	; 0x07
    26f8:	ee 83       	std	Y+6, r30	; 0x06
    26fa:	26 81       	ldd	r18, Z+6	; 0x06
    26fc:	37 81       	ldd	r19, Z+7	; 0x07
    26fe:	39 87       	std	Y+9, r19	; 0x09
    2700:	28 87       	std	Y+8, r18	; 0x08
    2702:	a6 81       	ldd	r26, Z+6	; 0x06
    2704:	b7 81       	ldd	r27, Z+7	; 0x07
    2706:	9e 01       	movw	r18, r28
    2708:	2e 5f       	subi	r18, 0xFE	; 254
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	15 96       	adiw	r26, 0x05	; 5
    270e:	3c 93       	st	X, r19
    2710:	2e 93       	st	-X, r18
    2712:	14 97       	sbiw	r26, 0x04	; 4
    2714:	37 83       	std	Z+7, r19	; 0x07
    2716:	26 83       	std	Z+6, r18	; 0x06
    2718:	ea 8d       	ldd	r30, Y+26	; 0x1a
    271a:	8e 9f       	mul	r24, r30
    271c:	f0 01       	movw	r30, r0
    271e:	11 24       	eor	r1, r1
    2720:	e7 56       	subi	r30, 0x67	; 103
    2722:	fc 4e       	sbci	r31, 0xEC	; 236
    2724:	fd 87       	std	Y+13, r31	; 0x0d
    2726:	ec 87       	std	Y+12, r30	; 0x0c
    2728:	80 81       	ld	r24, Z
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	80 83       	st	Z, r24
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	80 91 56 13 	lds	r24, 0x1356	; 0x801356 <xSchedulerRunning>
    2736:	88 23       	and	r24, r24
    2738:	51 f0       	breq	.+20     	; 0x274e <prvAddNewTaskToReadyList+0xd8>
    273a:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    273e:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2742:	92 8d       	ldd	r25, Z+26	; 0x1a
    2744:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2746:	98 17       	cp	r25, r24
    2748:	10 f4       	brcc	.+4      	; 0x274e <prvAddNewTaskToReadyList+0xd8>
    274a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <prvCheckTasksWaitingTermination>:
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	1b c0       	rjmp	.+54     	; 0x2790 <prvCheckTasksWaitingTermination+0x3c>
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	0f 92       	push	r0
    2760:	e0 91 70 13 	lds	r30, 0x1370	; 0x801370 <xTasksWaitingTermination+0x7>
    2764:	f0 91 71 13 	lds	r31, 0x1371	; 0x801371 <xTasksWaitingTermination+0x8>
    2768:	c0 85       	ldd	r28, Z+8	; 0x08
    276a:	d1 85       	ldd	r29, Z+9	; 0x09
    276c:	ce 01       	movw	r24, r28
    276e:	02 96       	adiw	r24, 0x02	; 2
    2770:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
    2774:	80 91 5c 13 	lds	r24, 0x135C	; 0x80135c <uxCurrentNumberOfTasks>
    2778:	81 50       	subi	r24, 0x01	; 1
    277a:	80 93 5c 13 	sts	0x135C, r24	; 0x80135c <uxCurrentNumberOfTasks>
    277e:	80 91 68 13 	lds	r24, 0x1368	; 0x801368 <uxDeletedTasksWaitingCleanUp>
    2782:	81 50       	subi	r24, 0x01	; 1
    2784:	80 93 68 13 	sts	0x1368, r24	; 0x801368 <uxDeletedTasksWaitingCleanUp>
    2788:	0f 90       	pop	r0
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	ce 01       	movw	r24, r28
    278e:	b8 de       	rcall	.-656    	; 0x2500 <prvDeleteTCB>
    2790:	80 91 68 13 	lds	r24, 0x1368	; 0x801368 <uxDeletedTasksWaitingCleanUp>
    2794:	81 11       	cpse	r24, r1
    2796:	e1 cf       	rjmp	.-62     	; 0x275a <prvCheckTasksWaitingTermination+0x6>
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	08 95       	ret

0000279e <prvAddCurrentTaskToDelayedList>:
    279e:	8f 92       	push	r8
    27a0:	9f 92       	push	r9
    27a2:	af 92       	push	r10
    27a4:	bf 92       	push	r11
    27a6:	cf 92       	push	r12
    27a8:	df 92       	push	r13
    27aa:	ef 92       	push	r14
    27ac:	ff 92       	push	r15
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	6b 01       	movw	r12, r22
    27b4:	7c 01       	movw	r14, r24
    27b6:	c4 2f       	mov	r28, r20
    27b8:	80 90 58 13 	lds	r8, 0x1358	; 0x801358 <xTickCount>
    27bc:	90 90 59 13 	lds	r9, 0x1359	; 0x801359 <xTickCount+0x1>
    27c0:	a0 90 5a 13 	lds	r10, 0x135A	; 0x80135a <xTickCount+0x2>
    27c4:	b0 90 5b 13 	lds	r11, 0x135B	; 0x80135b <xTickCount+0x3>
    27c8:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    27cc:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    27d0:	02 96       	adiw	r24, 0x02	; 2
    27d2:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	c8 16       	cp	r12, r24
    27da:	d8 06       	cpc	r13, r24
    27dc:	e8 06       	cpc	r14, r24
    27de:	f8 06       	cpc	r15, r24
    27e0:	b1 f5       	brne	.+108    	; 0x284e <prvAddCurrentTaskToDelayedList+0xb0>
    27e2:	cc 23       	and	r28, r28
    27e4:	a1 f1       	breq	.+104    	; 0x284e <prvAddCurrentTaskToDelayedList+0xb0>
    27e6:	ed e5       	ldi	r30, 0x5D	; 93
    27e8:	f3 e1       	ldi	r31, 0x13	; 19
    27ea:	a1 81       	ldd	r26, Z+1	; 0x01
    27ec:	b2 81       	ldd	r27, Z+2	; 0x02
    27ee:	c0 91 07 14 	lds	r28, 0x1407	; 0x801407 <pxCurrentTCB>
    27f2:	d0 91 08 14 	lds	r29, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    27f6:	bf 83       	std	Y+7, r27	; 0x07
    27f8:	ae 83       	std	Y+6, r26	; 0x06
    27fa:	c0 91 07 14 	lds	r28, 0x1407	; 0x801407 <pxCurrentTCB>
    27fe:	d0 91 08 14 	lds	r29, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2802:	16 96       	adiw	r26, 0x06	; 6
    2804:	8d 91       	ld	r24, X+
    2806:	9c 91       	ld	r25, X
    2808:	17 97       	sbiw	r26, 0x07	; 7
    280a:	99 87       	std	Y+9, r25	; 0x09
    280c:	88 87       	std	Y+8, r24	; 0x08
    280e:	16 96       	adiw	r26, 0x06	; 6
    2810:	cd 91       	ld	r28, X+
    2812:	dc 91       	ld	r29, X
    2814:	17 97       	sbiw	r26, 0x07	; 7
    2816:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    281a:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    281e:	02 96       	adiw	r24, 0x02	; 2
    2820:	9d 83       	std	Y+5, r25	; 0x05
    2822:	8c 83       	std	Y+4, r24	; 0x04
    2824:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    2828:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    282c:	02 96       	adiw	r24, 0x02	; 2
    282e:	17 96       	adiw	r26, 0x07	; 7
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
    2834:	16 97       	sbiw	r26, 0x06	; 6
    2836:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    283a:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    283e:	1d 96       	adiw	r26, 0x0d	; 13
    2840:	fc 93       	st	X, r31
    2842:	ee 93       	st	-X, r30
    2844:	1c 97       	sbiw	r26, 0x0c	; 12
    2846:	80 81       	ld	r24, Z
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	80 83       	st	Z, r24
    284c:	3f c0       	rjmp	.+126    	; 0x28cc <prvAddCurrentTaskToDelayedList+0x12e>
    284e:	c8 0c       	add	r12, r8
    2850:	d9 1c       	adc	r13, r9
    2852:	ea 1c       	adc	r14, r10
    2854:	fb 1c       	adc	r15, r11
    2856:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    285a:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    285e:	c2 82       	std	Z+2, r12	; 0x02
    2860:	d3 82       	std	Z+3, r13	; 0x03
    2862:	e4 82       	std	Z+4, r14	; 0x04
    2864:	f5 82       	std	Z+5, r15	; 0x05
    2866:	c8 14       	cp	r12, r8
    2868:	d9 04       	cpc	r13, r9
    286a:	ea 04       	cpc	r14, r10
    286c:	fb 04       	cpc	r15, r11
    286e:	68 f4       	brcc	.+26     	; 0x288a <prvAddCurrentTaskToDelayedList+0xec>
    2870:	60 91 07 14 	lds	r22, 0x1407	; 0x801407 <pxCurrentTCB>
    2874:	70 91 08 14 	lds	r23, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2878:	80 91 7f 13 	lds	r24, 0x137F	; 0x80137f <pxOverflowDelayedTaskList>
    287c:	90 91 80 13 	lds	r25, 0x1380	; 0x801380 <pxOverflowDelayedTaskList+0x1>
    2880:	6e 5f       	subi	r22, 0xFE	; 254
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	0e 94 10 0a 	call	0x1420	; 0x1420 <vListInsert>
    2888:	21 c0       	rjmp	.+66     	; 0x28cc <prvAddCurrentTaskToDelayedList+0x12e>
    288a:	60 91 07 14 	lds	r22, 0x1407	; 0x801407 <pxCurrentTCB>
    288e:	70 91 08 14 	lds	r23, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2892:	80 91 81 13 	lds	r24, 0x1381	; 0x801381 <pxDelayedTaskList>
    2896:	90 91 82 13 	lds	r25, 0x1382	; 0x801382 <pxDelayedTaskList+0x1>
    289a:	6e 5f       	subi	r22, 0xFE	; 254
    289c:	7f 4f       	sbci	r23, 0xFF	; 255
    289e:	0e 94 10 0a 	call	0x1420	; 0x1420 <vListInsert>
    28a2:	80 91 4b 13 	lds	r24, 0x134B	; 0x80134b <xNextTaskUnblockTime>
    28a6:	90 91 4c 13 	lds	r25, 0x134C	; 0x80134c <xNextTaskUnblockTime+0x1>
    28aa:	a0 91 4d 13 	lds	r26, 0x134D	; 0x80134d <xNextTaskUnblockTime+0x2>
    28ae:	b0 91 4e 13 	lds	r27, 0x134E	; 0x80134e <xNextTaskUnblockTime+0x3>
    28b2:	c8 16       	cp	r12, r24
    28b4:	d9 06       	cpc	r13, r25
    28b6:	ea 06       	cpc	r14, r26
    28b8:	fb 06       	cpc	r15, r27
    28ba:	40 f4       	brcc	.+16     	; 0x28cc <prvAddCurrentTaskToDelayedList+0x12e>
    28bc:	c0 92 4b 13 	sts	0x134B, r12	; 0x80134b <xNextTaskUnblockTime>
    28c0:	d0 92 4c 13 	sts	0x134C, r13	; 0x80134c <xNextTaskUnblockTime+0x1>
    28c4:	e0 92 4d 13 	sts	0x134D, r14	; 0x80134d <xNextTaskUnblockTime+0x2>
    28c8:	f0 92 4e 13 	sts	0x134E, r15	; 0x80134e <xNextTaskUnblockTime+0x3>
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
    28d8:	bf 90       	pop	r11
    28da:	af 90       	pop	r10
    28dc:	9f 90       	pop	r9
    28de:	8f 90       	pop	r8
    28e0:	08 95       	ret

000028e2 <xTaskCreate>:
    28e2:	2f 92       	push	r2
    28e4:	3f 92       	push	r3
    28e6:	4f 92       	push	r4
    28e8:	5f 92       	push	r5
    28ea:	6f 92       	push	r6
    28ec:	7f 92       	push	r7
    28ee:	8f 92       	push	r8
    28f0:	9f 92       	push	r9
    28f2:	af 92       	push	r10
    28f4:	bf 92       	push	r11
    28f6:	cf 92       	push	r12
    28f8:	df 92       	push	r13
    28fa:	ef 92       	push	r14
    28fc:	ff 92       	push	r15
    28fe:	0f 93       	push	r16
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	3c 01       	movw	r6, r24
    2906:	1b 01       	movw	r2, r22
    2908:	4a 01       	movw	r8, r20
    290a:	29 01       	movw	r4, r18
    290c:	ca 01       	movw	r24, r20
    290e:	0e 94 15 09 	call	0x122a	; 0x122a <pvPortMalloc>
    2912:	6c 01       	movw	r12, r24
    2914:	89 2b       	or	r24, r25
    2916:	71 f0       	breq	.+28     	; 0x2934 <xTaskCreate+0x52>
    2918:	84 e3       	ldi	r24, 0x34	; 52
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 15 09 	call	0x122a	; 0x122a <pvPortMalloc>
    2920:	ec 01       	movw	r28, r24
    2922:	89 2b       	or	r24, r25
    2924:	19 f0       	breq	.+6      	; 0x292c <xTaskCreate+0x4a>
    2926:	dc 8e       	std	Y+28, r13	; 0x1c
    2928:	cb 8e       	std	Y+27, r12	; 0x1b
    292a:	06 c0       	rjmp	.+12     	; 0x2938 <xTaskCreate+0x56>
    292c:	c6 01       	movw	r24, r12
    292e:	0e 94 be 09 	call	0x137c	; 0x137c <vPortFree>
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <xTaskCreate+0x56>
    2934:	c0 e0       	ldi	r28, 0x00	; 0
    2936:	d0 e0       	ldi	r29, 0x00	; 0
    2938:	20 97       	sbiw	r28, 0x00	; 0
    293a:	61 f0       	breq	.+24     	; 0x2954 <xTaskCreate+0x72>
    293c:	a1 2c       	mov	r10, r1
    293e:	b1 2c       	mov	r11, r1
    2940:	6e 01       	movw	r12, r28
    2942:	92 01       	movw	r18, r4
    2944:	a4 01       	movw	r20, r8
    2946:	b1 01       	movw	r22, r2
    2948:	c3 01       	movw	r24, r6
    294a:	e7 dd       	rcall	.-1074   	; 0x251a <prvInitialiseNewTask>
    294c:	ce 01       	movw	r24, r28
    294e:	93 de       	rcall	.-730    	; 0x2676 <prvAddNewTaskToReadyList>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	01 c0       	rjmp	.+2      	; 0x2956 <xTaskCreate+0x74>
    2954:	8f ef       	ldi	r24, 0xFF	; 255
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	df 90       	pop	r13
    2962:	cf 90       	pop	r12
    2964:	bf 90       	pop	r11
    2966:	af 90       	pop	r10
    2968:	9f 90       	pop	r9
    296a:	8f 90       	pop	r8
    296c:	7f 90       	pop	r7
    296e:	6f 90       	pop	r6
    2970:	5f 90       	pop	r5
    2972:	4f 90       	pop	r4
    2974:	3f 90       	pop	r3
    2976:	2f 90       	pop	r2
    2978:	08 95       	ret

0000297a <vTaskStartScheduler>:
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	0f 2e       	mov	r0, r31
    2982:	f9 e4       	ldi	r31, 0x49	; 73
    2984:	ef 2e       	mov	r14, r31
    2986:	f3 e1       	ldi	r31, 0x13	; 19
    2988:	ff 2e       	mov	r15, r31
    298a:	f0 2d       	mov	r31, r0
    298c:	00 e0       	ldi	r16, 0x00	; 0
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 ec       	ldi	r20, 0xC0	; 192
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	69 e6       	ldi	r22, 0x69	; 105
    2998:	74 e0       	ldi	r23, 0x04	; 4
    299a:	8e e4       	ldi	r24, 0x4E	; 78
    299c:	91 e0       	ldi	r25, 0x01	; 1
    299e:	a1 df       	rcall	.-190    	; 0x28e2 <xTaskCreate>
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <vTaskStartScheduler+0x2e>
    29a4:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <xTimerCreateTimerTask>
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	c9 f4       	brne	.+50     	; 0x29de <vTaskStartScheduler+0x64>
    29ac:	f8 94       	cli
    29ae:	8f ef       	ldi	r24, 0xFF	; 255
    29b0:	9f ef       	ldi	r25, 0xFF	; 255
    29b2:	dc 01       	movw	r26, r24
    29b4:	80 93 4b 13 	sts	0x134B, r24	; 0x80134b <xNextTaskUnblockTime>
    29b8:	90 93 4c 13 	sts	0x134C, r25	; 0x80134c <xNextTaskUnblockTime+0x1>
    29bc:	a0 93 4d 13 	sts	0x134D, r26	; 0x80134d <xNextTaskUnblockTime+0x2>
    29c0:	b0 93 4e 13 	sts	0x134E, r27	; 0x80134e <xNextTaskUnblockTime+0x3>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	80 93 56 13 	sts	0x1356, r24	; 0x801356 <xSchedulerRunning>
    29ca:	10 92 58 13 	sts	0x1358, r1	; 0x801358 <xTickCount>
    29ce:	10 92 59 13 	sts	0x1359, r1	; 0x801359 <xTickCount+0x1>
    29d2:	10 92 5a 13 	sts	0x135A, r1	; 0x80135a <xTickCount+0x2>
    29d6:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <xTickCount+0x3>
    29da:	0e 94 97 0a 	call	0x152e	; 0x152e <xPortStartScheduler>
    29de:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    29e2:	0f 91       	pop	r16
    29e4:	ff 90       	pop	r15
    29e6:	ef 90       	pop	r14
    29e8:	08 95       	ret

000029ea <vTaskSuspendAll>:
    29ea:	80 91 48 13 	lds	r24, 0x1348	; 0x801348 <uxSchedulerSuspended>
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	80 93 48 13 	sts	0x1348, r24	; 0x801348 <uxSchedulerSuspended>
    29f4:	08 95       	ret

000029f6 <xTaskGetTickCount>:
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	0f 92       	push	r0
    29fc:	60 91 58 13 	lds	r22, 0x1358	; 0x801358 <xTickCount>
    2a00:	70 91 59 13 	lds	r23, 0x1359	; 0x801359 <xTickCount+0x1>
    2a04:	80 91 5a 13 	lds	r24, 0x135A	; 0x80135a <xTickCount+0x2>
    2a08:	90 91 5b 13 	lds	r25, 0x135B	; 0x80135b <xTickCount+0x3>
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	08 95       	ret

00002a12 <xTaskIncrementTick>:
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	80 91 48 13 	lds	r24, 0x1348	; 0x801348 <uxSchedulerSuspended>
    2a22:	81 11       	cpse	r24, r1
    2a24:	05 c1       	rjmp	.+522    	; 0x2c30 <xTaskIncrementTick+0x21e>
    2a26:	c0 90 58 13 	lds	r12, 0x1358	; 0x801358 <xTickCount>
    2a2a:	d0 90 59 13 	lds	r13, 0x1359	; 0x801359 <xTickCount+0x1>
    2a2e:	e0 90 5a 13 	lds	r14, 0x135A	; 0x80135a <xTickCount+0x2>
    2a32:	f0 90 5b 13 	lds	r15, 0x135B	; 0x80135b <xTickCount+0x3>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	c8 1a       	sub	r12, r24
    2a3a:	d8 0a       	sbc	r13, r24
    2a3c:	e8 0a       	sbc	r14, r24
    2a3e:	f8 0a       	sbc	r15, r24
    2a40:	c0 92 58 13 	sts	0x1358, r12	; 0x801358 <xTickCount>
    2a44:	d0 92 59 13 	sts	0x1359, r13	; 0x801359 <xTickCount+0x1>
    2a48:	e0 92 5a 13 	sts	0x135A, r14	; 0x80135a <xTickCount+0x2>
    2a4c:	f0 92 5b 13 	sts	0x135B, r15	; 0x80135b <xTickCount+0x3>
    2a50:	c1 14       	cp	r12, r1
    2a52:	d1 04       	cpc	r13, r1
    2a54:	e1 04       	cpc	r14, r1
    2a56:	f1 04       	cpc	r15, r1
    2a58:	b1 f4       	brne	.+44     	; 0x2a86 <xTaskIncrementTick+0x74>
    2a5a:	80 91 81 13 	lds	r24, 0x1381	; 0x801381 <pxDelayedTaskList>
    2a5e:	90 91 82 13 	lds	r25, 0x1382	; 0x801382 <pxDelayedTaskList+0x1>
    2a62:	20 91 7f 13 	lds	r18, 0x137F	; 0x80137f <pxOverflowDelayedTaskList>
    2a66:	30 91 80 13 	lds	r19, 0x1380	; 0x801380 <pxOverflowDelayedTaskList+0x1>
    2a6a:	30 93 82 13 	sts	0x1382, r19	; 0x801382 <pxDelayedTaskList+0x1>
    2a6e:	20 93 81 13 	sts	0x1381, r18	; 0x801381 <pxDelayedTaskList>
    2a72:	90 93 80 13 	sts	0x1380, r25	; 0x801380 <pxOverflowDelayedTaskList+0x1>
    2a76:	80 93 7f 13 	sts	0x137F, r24	; 0x80137f <pxOverflowDelayedTaskList>
    2a7a:	80 91 50 13 	lds	r24, 0x1350	; 0x801350 <xNumOfOverflows>
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	80 93 50 13 	sts	0x1350, r24	; 0x801350 <xNumOfOverflows>
    2a84:	16 dd       	rcall	.-1492   	; 0x24b2 <prvResetNextTaskUnblockTime>
    2a86:	80 91 4b 13 	lds	r24, 0x134B	; 0x80134b <xNextTaskUnblockTime>
    2a8a:	90 91 4c 13 	lds	r25, 0x134C	; 0x80134c <xNextTaskUnblockTime+0x1>
    2a8e:	a0 91 4d 13 	lds	r26, 0x134D	; 0x80134d <xNextTaskUnblockTime+0x2>
    2a92:	b0 91 4e 13 	lds	r27, 0x134E	; 0x80134e <xNextTaskUnblockTime+0x3>
    2a96:	c8 16       	cp	r12, r24
    2a98:	d9 06       	cpc	r13, r25
    2a9a:	ea 06       	cpc	r14, r26
    2a9c:	fb 06       	cpc	r15, r27
    2a9e:	20 f4       	brcc	.+8      	; 0x2aa8 <xTaskIncrementTick+0x96>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	b2 c0       	rjmp	.+356    	; 0x2c08 <xTaskIncrementTick+0x1f6>
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	01 c0       	rjmp	.+2      	; 0x2aaa <xTaskIncrementTick+0x98>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	e0 91 81 13 	lds	r30, 0x1381	; 0x801381 <pxDelayedTaskList>
    2aae:	f0 91 82 13 	lds	r31, 0x1382	; 0x801382 <pxDelayedTaskList+0x1>
    2ab2:	90 81       	ld	r25, Z
    2ab4:	91 11       	cpse	r25, r1
    2ab6:	0c c0       	rjmp	.+24     	; 0x2ad0 <xTaskIncrementTick+0xbe>
    2ab8:	4f ef       	ldi	r20, 0xFF	; 255
    2aba:	5f ef       	ldi	r21, 0xFF	; 255
    2abc:	ba 01       	movw	r22, r20
    2abe:	40 93 4b 13 	sts	0x134B, r20	; 0x80134b <xNextTaskUnblockTime>
    2ac2:	50 93 4c 13 	sts	0x134C, r21	; 0x80134c <xNextTaskUnblockTime+0x1>
    2ac6:	60 93 4d 13 	sts	0x134D, r22	; 0x80134d <xNextTaskUnblockTime+0x2>
    2aca:	70 93 4e 13 	sts	0x134E, r23	; 0x80134e <xNextTaskUnblockTime+0x3>
    2ace:	9c c0       	rjmp	.+312    	; 0x2c08 <xTaskIncrementTick+0x1f6>
    2ad0:	e0 91 81 13 	lds	r30, 0x1381	; 0x801381 <pxDelayedTaskList>
    2ad4:	f0 91 82 13 	lds	r31, 0x1382	; 0x801382 <pxDelayedTaskList+0x1>
    2ad8:	07 80       	ldd	r0, Z+7	; 0x07
    2ada:	f0 85       	ldd	r31, Z+8	; 0x08
    2adc:	e0 2d       	mov	r30, r0
    2ade:	00 84       	ldd	r0, Z+8	; 0x08
    2ae0:	f1 85       	ldd	r31, Z+9	; 0x09
    2ae2:	e0 2d       	mov	r30, r0
    2ae4:	42 81       	ldd	r20, Z+2	; 0x02
    2ae6:	53 81       	ldd	r21, Z+3	; 0x03
    2ae8:	64 81       	ldd	r22, Z+4	; 0x04
    2aea:	75 81       	ldd	r23, Z+5	; 0x05
    2aec:	c4 16       	cp	r12, r20
    2aee:	d5 06       	cpc	r13, r21
    2af0:	e6 06       	cpc	r14, r22
    2af2:	f7 06       	cpc	r15, r23
    2af4:	48 f4       	brcc	.+18     	; 0x2b08 <xTaskIncrementTick+0xf6>
    2af6:	40 93 4b 13 	sts	0x134B, r20	; 0x80134b <xNextTaskUnblockTime>
    2afa:	50 93 4c 13 	sts	0x134C, r21	; 0x80134c <xNextTaskUnblockTime+0x1>
    2afe:	60 93 4d 13 	sts	0x134D, r22	; 0x80134d <xNextTaskUnblockTime+0x2>
    2b02:	70 93 4e 13 	sts	0x134E, r23	; 0x80134e <xNextTaskUnblockTime+0x3>
    2b06:	80 c0       	rjmp	.+256    	; 0x2c08 <xTaskIncrementTick+0x1f6>
    2b08:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b0a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b0c:	c6 81       	ldd	r28, Z+6	; 0x06
    2b0e:	d7 81       	ldd	r29, Z+7	; 0x07
    2b10:	20 85       	ldd	r18, Z+8	; 0x08
    2b12:	31 85       	ldd	r19, Z+9	; 0x09
    2b14:	3f 83       	std	Y+7, r19	; 0x07
    2b16:	2e 83       	std	Y+6, r18	; 0x06
    2b18:	c0 85       	ldd	r28, Z+8	; 0x08
    2b1a:	d1 85       	ldd	r29, Z+9	; 0x09
    2b1c:	26 81       	ldd	r18, Z+6	; 0x06
    2b1e:	37 81       	ldd	r19, Z+7	; 0x07
    2b20:	3d 83       	std	Y+5, r19	; 0x05
    2b22:	2c 83       	std	Y+4, r18	; 0x04
    2b24:	11 96       	adiw	r26, 0x01	; 1
    2b26:	4d 91       	ld	r20, X+
    2b28:	5c 91       	ld	r21, X
    2b2a:	12 97       	sbiw	r26, 0x02	; 2
    2b2c:	9f 01       	movw	r18, r30
    2b2e:	2e 5f       	subi	r18, 0xFE	; 254
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	42 17       	cp	r20, r18
    2b34:	53 07       	cpc	r21, r19
    2b36:	31 f4       	brne	.+12     	; 0x2b44 <xTaskIncrementTick+0x132>
    2b38:	40 85       	ldd	r20, Z+8	; 0x08
    2b3a:	51 85       	ldd	r21, Z+9	; 0x09
    2b3c:	12 96       	adiw	r26, 0x02	; 2
    2b3e:	5c 93       	st	X, r21
    2b40:	4e 93       	st	-X, r20
    2b42:	11 97       	sbiw	r26, 0x01	; 1
    2b44:	15 86       	std	Z+13, r1	; 0x0d
    2b46:	14 86       	std	Z+12, r1	; 0x0c
    2b48:	9c 91       	ld	r25, X
    2b4a:	91 50       	subi	r25, 0x01	; 1
    2b4c:	9c 93       	st	X, r25
    2b4e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2b50:	b1 8d       	ldd	r27, Z+25	; 0x19
    2b52:	10 97       	sbiw	r26, 0x00	; 0
    2b54:	09 f1       	breq	.+66     	; 0x2b98 <xTaskIncrementTick+0x186>
    2b56:	c2 89       	ldd	r28, Z+18	; 0x12
    2b58:	d3 89       	ldd	r29, Z+19	; 0x13
    2b5a:	44 89       	ldd	r20, Z+20	; 0x14
    2b5c:	55 89       	ldd	r21, Z+21	; 0x15
    2b5e:	5f 83       	std	Y+7, r21	; 0x07
    2b60:	4e 83       	std	Y+6, r20	; 0x06
    2b62:	c4 89       	ldd	r28, Z+20	; 0x14
    2b64:	d5 89       	ldd	r29, Z+21	; 0x15
    2b66:	42 89       	ldd	r20, Z+18	; 0x12
    2b68:	53 89       	ldd	r21, Z+19	; 0x13
    2b6a:	5d 83       	std	Y+5, r21	; 0x05
    2b6c:	4c 83       	std	Y+4, r20	; 0x04
    2b6e:	11 96       	adiw	r26, 0x01	; 1
    2b70:	6d 91       	ld	r22, X+
    2b72:	7c 91       	ld	r23, X
    2b74:	12 97       	sbiw	r26, 0x02	; 2
    2b76:	af 01       	movw	r20, r30
    2b78:	42 5f       	subi	r20, 0xF2	; 242
    2b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b7c:	64 17       	cp	r22, r20
    2b7e:	75 07       	cpc	r23, r21
    2b80:	31 f4       	brne	.+12     	; 0x2b8e <xTaskIncrementTick+0x17c>
    2b82:	44 89       	ldd	r20, Z+20	; 0x14
    2b84:	55 89       	ldd	r21, Z+21	; 0x15
    2b86:	12 96       	adiw	r26, 0x02	; 2
    2b88:	5c 93       	st	X, r21
    2b8a:	4e 93       	st	-X, r20
    2b8c:	11 97       	sbiw	r26, 0x01	; 1
    2b8e:	11 8e       	std	Z+25, r1	; 0x19
    2b90:	10 8e       	std	Z+24, r1	; 0x18
    2b92:	9c 91       	ld	r25, X
    2b94:	91 50       	subi	r25, 0x01	; 1
    2b96:	9c 93       	st	X, r25
    2b98:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b9a:	90 91 57 13 	lds	r25, 0x1357	; 0x801357 <uxTopReadyPriority>
    2b9e:	9a 17       	cp	r25, r26
    2ba0:	10 f4       	brcc	.+4      	; 0x2ba6 <xTaskIncrementTick+0x194>
    2ba2:	a0 93 57 13 	sts	0x1357, r26	; 0x801357 <uxTopReadyPriority>
    2ba6:	9b e0       	ldi	r25, 0x0B	; 11
    2ba8:	9a 9f       	mul	r25, r26
    2baa:	d0 01       	movw	r26, r0
    2bac:	11 24       	eor	r1, r1
    2bae:	a7 56       	subi	r26, 0x67	; 103
    2bb0:	bc 4e       	sbci	r27, 0xEC	; 236
    2bb2:	11 96       	adiw	r26, 0x01	; 1
    2bb4:	0d 90       	ld	r0, X+
    2bb6:	bc 91       	ld	r27, X
    2bb8:	a0 2d       	mov	r26, r0
    2bba:	b7 83       	std	Z+7, r27	; 0x07
    2bbc:	a6 83       	std	Z+6, r26	; 0x06
    2bbe:	16 96       	adiw	r26, 0x06	; 6
    2bc0:	4d 91       	ld	r20, X+
    2bc2:	5c 91       	ld	r21, X
    2bc4:	17 97       	sbiw	r26, 0x07	; 7
    2bc6:	51 87       	std	Z+9, r21	; 0x09
    2bc8:	40 87       	std	Z+8, r20	; 0x08
    2bca:	16 96       	adiw	r26, 0x06	; 6
    2bcc:	cd 91       	ld	r28, X+
    2bce:	dc 91       	ld	r29, X
    2bd0:	17 97       	sbiw	r26, 0x07	; 7
    2bd2:	3d 83       	std	Y+5, r19	; 0x05
    2bd4:	2c 83       	std	Y+4, r18	; 0x04
    2bd6:	17 96       	adiw	r26, 0x07	; 7
    2bd8:	3c 93       	st	X, r19
    2bda:	2e 93       	st	-X, r18
    2bdc:	16 97       	sbiw	r26, 0x06	; 6
    2bde:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2be0:	9a 9f       	mul	r25, r26
    2be2:	d0 01       	movw	r26, r0
    2be4:	11 24       	eor	r1, r1
    2be6:	a7 56       	subi	r26, 0x67	; 103
    2be8:	bc 4e       	sbci	r27, 0xEC	; 236
    2bea:	b5 87       	std	Z+13, r27	; 0x0d
    2bec:	a4 87       	std	Z+12, r26	; 0x0c
    2bee:	9c 91       	ld	r25, X
    2bf0:	9f 5f       	subi	r25, 0xFF	; 255
    2bf2:	9c 93       	st	X, r25
    2bf4:	22 8d       	ldd	r18, Z+26	; 0x1a
    2bf6:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    2bfa:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2bfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c00:	29 17       	cp	r18, r25
    2c02:	08 f0       	brcs	.+2      	; 0x2c06 <xTaskIncrementTick+0x1f4>
    2c04:	4f cf       	rjmp	.-354    	; 0x2aa4 <xTaskIncrementTick+0x92>
    2c06:	51 cf       	rjmp	.-350    	; 0x2aaa <xTaskIncrementTick+0x98>
    2c08:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    2c0c:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2c10:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c12:	9b e0       	ldi	r25, 0x0B	; 11
    2c14:	e9 9f       	mul	r30, r25
    2c16:	f0 01       	movw	r30, r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	e7 56       	subi	r30, 0x67	; 103
    2c1c:	fc 4e       	sbci	r31, 0xEC	; 236
    2c1e:	90 81       	ld	r25, Z
    2c20:	92 30       	cpi	r25, 0x02	; 2
    2c22:	08 f0       	brcs	.+2      	; 0x2c26 <xTaskIncrementTick+0x214>
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 91 51 13 	lds	r25, 0x1351	; 0x801351 <xYieldPending>
    2c2a:	91 11       	cpse	r25, r1
    2c2c:	16 c0       	rjmp	.+44     	; 0x2c5a <xTaskIncrementTick+0x248>
    2c2e:	16 c0       	rjmp	.+44     	; 0x2c5c <xTaskIncrementTick+0x24a>
    2c30:	80 91 52 13 	lds	r24, 0x1352	; 0x801352 <xPendedTicks>
    2c34:	90 91 53 13 	lds	r25, 0x1353	; 0x801353 <xPendedTicks+0x1>
    2c38:	a0 91 54 13 	lds	r26, 0x1354	; 0x801354 <xPendedTicks+0x2>
    2c3c:	b0 91 55 13 	lds	r27, 0x1355	; 0x801355 <xPendedTicks+0x3>
    2c40:	01 96       	adiw	r24, 0x01	; 1
    2c42:	a1 1d       	adc	r26, r1
    2c44:	b1 1d       	adc	r27, r1
    2c46:	80 93 52 13 	sts	0x1352, r24	; 0x801352 <xPendedTicks>
    2c4a:	90 93 53 13 	sts	0x1353, r25	; 0x801353 <xPendedTicks+0x1>
    2c4e:	a0 93 54 13 	sts	0x1354, r26	; 0x801354 <xPendedTicks+0x2>
    2c52:	b0 93 55 13 	sts	0x1355, r27	; 0x801355 <xPendedTicks+0x3>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	01 c0       	rjmp	.+2      	; 0x2c5c <xTaskIncrementTick+0x24a>
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
    2c68:	08 95       	ret

00002c6a <xTaskResumeAll>:
    2c6a:	cf 92       	push	r12
    2c6c:	df 92       	push	r13
    2c6e:	ef 92       	push	r14
    2c70:	ff 92       	push	r15
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	0f 92       	push	r0
    2c7c:	80 91 48 13 	lds	r24, 0x1348	; 0x801348 <uxSchedulerSuspended>
    2c80:	81 50       	subi	r24, 0x01	; 1
    2c82:	80 93 48 13 	sts	0x1348, r24	; 0x801348 <uxSchedulerSuspended>
    2c86:	80 91 48 13 	lds	r24, 0x1348	; 0x801348 <uxSchedulerSuspended>
    2c8a:	81 11       	cpse	r24, r1
    2c8c:	be c0       	rjmp	.+380    	; 0x2e0a <xTaskResumeAll+0x1a0>
    2c8e:	80 91 5c 13 	lds	r24, 0x135C	; 0x80135c <uxCurrentNumberOfTasks>
    2c92:	81 11       	cpse	r24, r1
    2c94:	88 c0       	rjmp	.+272    	; 0x2da6 <xTaskResumeAll+0x13c>
    2c96:	bc c0       	rjmp	.+376    	; 0x2e10 <xTaskResumeAll+0x1a6>
    2c98:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <xPendingReadyList+0x7>
    2c9c:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <xPendingReadyList+0x8>
    2ca0:	00 84       	ldd	r0, Z+8	; 0x08
    2ca2:	f1 85       	ldd	r31, Z+9	; 0x09
    2ca4:	e0 2d       	mov	r30, r0
    2ca6:	a0 8d       	ldd	r26, Z+24	; 0x18
    2ca8:	b1 8d       	ldd	r27, Z+25	; 0x19
    2caa:	c2 89       	ldd	r28, Z+18	; 0x12
    2cac:	d3 89       	ldd	r29, Z+19	; 0x13
    2cae:	84 89       	ldd	r24, Z+20	; 0x14
    2cb0:	95 89       	ldd	r25, Z+21	; 0x15
    2cb2:	9f 83       	std	Y+7, r25	; 0x07
    2cb4:	8e 83       	std	Y+6, r24	; 0x06
    2cb6:	c4 89       	ldd	r28, Z+20	; 0x14
    2cb8:	d5 89       	ldd	r29, Z+21	; 0x15
    2cba:	82 89       	ldd	r24, Z+18	; 0x12
    2cbc:	93 89       	ldd	r25, Z+19	; 0x13
    2cbe:	9d 83       	std	Y+5, r25	; 0x05
    2cc0:	8c 83       	std	Y+4, r24	; 0x04
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	2d 91       	ld	r18, X+
    2cc6:	3c 91       	ld	r19, X
    2cc8:	12 97       	sbiw	r26, 0x02	; 2
    2cca:	cf 01       	movw	r24, r30
    2ccc:	0e 96       	adiw	r24, 0x0e	; 14
    2cce:	28 17       	cp	r18, r24
    2cd0:	39 07       	cpc	r19, r25
    2cd2:	31 f4       	brne	.+12     	; 0x2ce0 <xTaskResumeAll+0x76>
    2cd4:	84 89       	ldd	r24, Z+20	; 0x14
    2cd6:	95 89       	ldd	r25, Z+21	; 0x15
    2cd8:	12 96       	adiw	r26, 0x02	; 2
    2cda:	9c 93       	st	X, r25
    2cdc:	8e 93       	st	-X, r24
    2cde:	11 97       	sbiw	r26, 0x01	; 1
    2ce0:	11 8e       	std	Z+25, r1	; 0x19
    2ce2:	10 8e       	std	Z+24, r1	; 0x18
    2ce4:	8c 91       	ld	r24, X
    2ce6:	81 50       	subi	r24, 0x01	; 1
    2ce8:	8c 93       	st	X, r24
    2cea:	a4 85       	ldd	r26, Z+12	; 0x0c
    2cec:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cee:	c6 81       	ldd	r28, Z+6	; 0x06
    2cf0:	d7 81       	ldd	r29, Z+7	; 0x07
    2cf2:	80 85       	ldd	r24, Z+8	; 0x08
    2cf4:	91 85       	ldd	r25, Z+9	; 0x09
    2cf6:	9f 83       	std	Y+7, r25	; 0x07
    2cf8:	8e 83       	std	Y+6, r24	; 0x06
    2cfa:	c0 85       	ldd	r28, Z+8	; 0x08
    2cfc:	d1 85       	ldd	r29, Z+9	; 0x09
    2cfe:	86 81       	ldd	r24, Z+6	; 0x06
    2d00:	97 81       	ldd	r25, Z+7	; 0x07
    2d02:	9d 83       	std	Y+5, r25	; 0x05
    2d04:	8c 83       	std	Y+4, r24	; 0x04
    2d06:	11 96       	adiw	r26, 0x01	; 1
    2d08:	8d 91       	ld	r24, X+
    2d0a:	9c 91       	ld	r25, X
    2d0c:	12 97       	sbiw	r26, 0x02	; 2
    2d0e:	9f 01       	movw	r18, r30
    2d10:	2e 5f       	subi	r18, 0xFE	; 254
    2d12:	3f 4f       	sbci	r19, 0xFF	; 255
    2d14:	82 17       	cp	r24, r18
    2d16:	93 07       	cpc	r25, r19
    2d18:	31 f4       	brne	.+12     	; 0x2d26 <xTaskResumeAll+0xbc>
    2d1a:	80 85       	ldd	r24, Z+8	; 0x08
    2d1c:	91 85       	ldd	r25, Z+9	; 0x09
    2d1e:	12 96       	adiw	r26, 0x02	; 2
    2d20:	9c 93       	st	X, r25
    2d22:	8e 93       	st	-X, r24
    2d24:	11 97       	sbiw	r26, 0x01	; 1
    2d26:	15 86       	std	Z+13, r1	; 0x0d
    2d28:	14 86       	std	Z+12, r1	; 0x0c
    2d2a:	8c 91       	ld	r24, X
    2d2c:	81 50       	subi	r24, 0x01	; 1
    2d2e:	8c 93       	st	X, r24
    2d30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d32:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    2d36:	8a 17       	cp	r24, r26
    2d38:	10 f4       	brcc	.+4      	; 0x2d3e <xTaskResumeAll+0xd4>
    2d3a:	a0 93 57 13 	sts	0x1357, r26	; 0x801357 <uxTopReadyPriority>
    2d3e:	8b e0       	ldi	r24, 0x0B	; 11
    2d40:	8a 9f       	mul	r24, r26
    2d42:	d0 01       	movw	r26, r0
    2d44:	11 24       	eor	r1, r1
    2d46:	a7 56       	subi	r26, 0x67	; 103
    2d48:	bc 4e       	sbci	r27, 0xEC	; 236
    2d4a:	11 96       	adiw	r26, 0x01	; 1
    2d4c:	0d 90       	ld	r0, X+
    2d4e:	bc 91       	ld	r27, X
    2d50:	a0 2d       	mov	r26, r0
    2d52:	b7 83       	std	Z+7, r27	; 0x07
    2d54:	a6 83       	std	Z+6, r26	; 0x06
    2d56:	16 96       	adiw	r26, 0x06	; 6
    2d58:	4d 91       	ld	r20, X+
    2d5a:	5c 91       	ld	r21, X
    2d5c:	17 97       	sbiw	r26, 0x07	; 7
    2d5e:	51 87       	std	Z+9, r21	; 0x09
    2d60:	40 87       	std	Z+8, r20	; 0x08
    2d62:	16 96       	adiw	r26, 0x06	; 6
    2d64:	cd 91       	ld	r28, X+
    2d66:	dc 91       	ld	r29, X
    2d68:	17 97       	sbiw	r26, 0x07	; 7
    2d6a:	3d 83       	std	Y+5, r19	; 0x05
    2d6c:	2c 83       	std	Y+4, r18	; 0x04
    2d6e:	17 96       	adiw	r26, 0x07	; 7
    2d70:	3c 93       	st	X, r19
    2d72:	2e 93       	st	-X, r18
    2d74:	16 97       	sbiw	r26, 0x06	; 6
    2d76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d78:	8a 9f       	mul	r24, r26
    2d7a:	d0 01       	movw	r26, r0
    2d7c:	11 24       	eor	r1, r1
    2d7e:	a7 56       	subi	r26, 0x67	; 103
    2d80:	bc 4e       	sbci	r27, 0xEC	; 236
    2d82:	b5 87       	std	Z+13, r27	; 0x0d
    2d84:	a4 87       	std	Z+12, r26	; 0x0c
    2d86:	8c 91       	ld	r24, X
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	8c 93       	st	X, r24
    2d8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d8e:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    2d92:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2d96:	5a 96       	adiw	r26, 0x1a	; 26
    2d98:	8c 91       	ld	r24, X
    2d9a:	98 17       	cp	r25, r24
    2d9c:	30 f0       	brcs	.+12     	; 0x2daa <xTaskResumeAll+0x140>
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <xYieldPending>
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <xTaskResumeAll+0x140>
    2da6:	e0 e0       	ldi	r30, 0x00	; 0
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 91 74 13 	lds	r24, 0x1374	; 0x801374 <xPendingReadyList>
    2dae:	81 11       	cpse	r24, r1
    2db0:	73 cf       	rjmp	.-282    	; 0x2c98 <xTaskResumeAll+0x2e>
    2db2:	ef 2b       	or	r30, r31
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <xTaskResumeAll+0x14e>
    2db6:	7d db       	rcall	.-2310   	; 0x24b2 <prvResetNextTaskUnblockTime>
    2db8:	c0 90 52 13 	lds	r12, 0x1352	; 0x801352 <xPendedTicks>
    2dbc:	d0 90 53 13 	lds	r13, 0x1353	; 0x801353 <xPendedTicks+0x1>
    2dc0:	e0 90 54 13 	lds	r14, 0x1354	; 0x801354 <xPendedTicks+0x2>
    2dc4:	f0 90 55 13 	lds	r15, 0x1355	; 0x801355 <xPendedTicks+0x3>
    2dc8:	c1 14       	cp	r12, r1
    2dca:	d1 04       	cpc	r13, r1
    2dcc:	e1 04       	cpc	r14, r1
    2dce:	f1 04       	cpc	r15, r1
    2dd0:	a1 f0       	breq	.+40     	; 0x2dfa <xTaskResumeAll+0x190>
    2dd2:	1f de       	rcall	.-962    	; 0x2a12 <xTaskIncrementTick>
    2dd4:	88 23       	and	r24, r24
    2dd6:	19 f0       	breq	.+6      	; 0x2dde <xTaskResumeAll+0x174>
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <xYieldPending>
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	c8 1a       	sub	r12, r24
    2de2:	d1 08       	sbc	r13, r1
    2de4:	e1 08       	sbc	r14, r1
    2de6:	f1 08       	sbc	r15, r1
    2de8:	a1 f7       	brne	.-24     	; 0x2dd2 <xTaskResumeAll+0x168>
    2dea:	10 92 52 13 	sts	0x1352, r1	; 0x801352 <xPendedTicks>
    2dee:	10 92 53 13 	sts	0x1353, r1	; 0x801353 <xPendedTicks+0x1>
    2df2:	10 92 54 13 	sts	0x1354, r1	; 0x801354 <xPendedTicks+0x2>
    2df6:	10 92 55 13 	sts	0x1355, r1	; 0x801355 <xPendedTicks+0x3>
    2dfa:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <xYieldPending>
    2dfe:	88 23       	and	r24, r24
    2e00:	31 f0       	breq	.+12     	; 0x2e0e <xTaskResumeAll+0x1a4>
    2e02:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <xTaskResumeAll+0x1a6>
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <xTaskResumeAll+0x1a6>
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	0f 90       	pop	r0
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	ff 90       	pop	r15
    2e1a:	ef 90       	pop	r14
    2e1c:	df 90       	pop	r13
    2e1e:	cf 90       	pop	r12
    2e20:	08 95       	ret

00002e22 <xTaskDelayUntil>:
    2e22:	8f 92       	push	r8
    2e24:	9f 92       	push	r9
    2e26:	af 92       	push	r10
    2e28:	bf 92       	push	r11
    2e2a:	cf 92       	push	r12
    2e2c:	df 92       	push	r13
    2e2e:	ef 92       	push	r14
    2e30:	ff 92       	push	r15
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	ec 01       	movw	r28, r24
    2e3a:	6a 01       	movw	r12, r20
    2e3c:	7b 01       	movw	r14, r22
    2e3e:	d5 dd       	rcall	.-1110   	; 0x29ea <vTaskSuspendAll>
    2e40:	80 90 58 13 	lds	r8, 0x1358	; 0x801358 <xTickCount>
    2e44:	90 90 59 13 	lds	r9, 0x1359	; 0x801359 <xTickCount+0x1>
    2e48:	a0 90 5a 13 	lds	r10, 0x135A	; 0x80135a <xTickCount+0x2>
    2e4c:	b0 90 5b 13 	lds	r11, 0x135B	; 0x80135b <xTickCount+0x3>
    2e50:	88 81       	ld	r24, Y
    2e52:	99 81       	ldd	r25, Y+1	; 0x01
    2e54:	aa 81       	ldd	r26, Y+2	; 0x02
    2e56:	bb 81       	ldd	r27, Y+3	; 0x03
    2e58:	ac 01       	movw	r20, r24
    2e5a:	bd 01       	movw	r22, r26
    2e5c:	4c 0d       	add	r20, r12
    2e5e:	5d 1d       	adc	r21, r13
    2e60:	6e 1d       	adc	r22, r14
    2e62:	7f 1d       	adc	r23, r15
    2e64:	88 16       	cp	r8, r24
    2e66:	99 06       	cpc	r9, r25
    2e68:	aa 06       	cpc	r10, r26
    2e6a:	bb 06       	cpc	r11, r27
    2e6c:	60 f4       	brcc	.+24     	; 0x2e86 <xTaskDelayUntil+0x64>
    2e6e:	48 17       	cp	r20, r24
    2e70:	59 07       	cpc	r21, r25
    2e72:	6a 07       	cpc	r22, r26
    2e74:	7b 07       	cpc	r23, r27
    2e76:	98 f4       	brcc	.+38     	; 0x2e9e <xTaskDelayUntil+0x7c>
    2e78:	84 16       	cp	r8, r20
    2e7a:	95 06       	cpc	r9, r21
    2e7c:	a6 06       	cpc	r10, r22
    2e7e:	b7 06       	cpc	r11, r23
    2e80:	80 f0       	brcs	.+32     	; 0x2ea2 <xTaskDelayUntil+0x80>
    2e82:	10 e0       	ldi	r17, 0x00	; 0
    2e84:	13 c0       	rjmp	.+38     	; 0x2eac <xTaskDelayUntil+0x8a>
    2e86:	48 17       	cp	r20, r24
    2e88:	59 07       	cpc	r21, r25
    2e8a:	6a 07       	cpc	r22, r26
    2e8c:	7b 07       	cpc	r23, r27
    2e8e:	58 f0       	brcs	.+22     	; 0x2ea6 <xTaskDelayUntil+0x84>
    2e90:	84 16       	cp	r8, r20
    2e92:	95 06       	cpc	r9, r21
    2e94:	a6 06       	cpc	r10, r22
    2e96:	b7 06       	cpc	r11, r23
    2e98:	40 f0       	brcs	.+16     	; 0x2eaa <xTaskDelayUntil+0x88>
    2e9a:	10 e0       	ldi	r17, 0x00	; 0
    2e9c:	07 c0       	rjmp	.+14     	; 0x2eac <xTaskDelayUntil+0x8a>
    2e9e:	10 e0       	ldi	r17, 0x00	; 0
    2ea0:	05 c0       	rjmp	.+10     	; 0x2eac <xTaskDelayUntil+0x8a>
    2ea2:	11 e0       	ldi	r17, 0x01	; 1
    2ea4:	03 c0       	rjmp	.+6      	; 0x2eac <xTaskDelayUntil+0x8a>
    2ea6:	11 e0       	ldi	r17, 0x01	; 1
    2ea8:	01 c0       	rjmp	.+2      	; 0x2eac <xTaskDelayUntil+0x8a>
    2eaa:	11 e0       	ldi	r17, 0x01	; 1
    2eac:	48 83       	st	Y, r20
    2eae:	59 83       	std	Y+1, r21	; 0x01
    2eb0:	6a 83       	std	Y+2, r22	; 0x02
    2eb2:	7b 83       	std	Y+3, r23	; 0x03
    2eb4:	11 23       	and	r17, r17
    2eb6:	41 f0       	breq	.+16     	; 0x2ec8 <xTaskDelayUntil+0xa6>
    2eb8:	cb 01       	movw	r24, r22
    2eba:	ba 01       	movw	r22, r20
    2ebc:	68 19       	sub	r22, r8
    2ebe:	79 09       	sbc	r23, r9
    2ec0:	8a 09       	sbc	r24, r10
    2ec2:	9b 09       	sbc	r25, r11
    2ec4:	40 e0       	ldi	r20, 0x00	; 0
    2ec6:	6b dc       	rcall	.-1834   	; 0x279e <prvAddCurrentTaskToDelayedList>
    2ec8:	d0 de       	rcall	.-608    	; 0x2c6a <xTaskResumeAll>
    2eca:	81 11       	cpse	r24, r1
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <xTaskDelayUntil+0xb0>
    2ece:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    2ed2:	81 2f       	mov	r24, r17
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	ff 90       	pop	r15
    2edc:	ef 90       	pop	r14
    2ede:	df 90       	pop	r13
    2ee0:	cf 90       	pop	r12
    2ee2:	bf 90       	pop	r11
    2ee4:	af 90       	pop	r10
    2ee6:	9f 90       	pop	r9
    2ee8:	8f 90       	pop	r8
    2eea:	08 95       	ret

00002eec <vTaskDelay>:
    2eec:	cf 92       	push	r12
    2eee:	df 92       	push	r13
    2ef0:	ef 92       	push	r14
    2ef2:	ff 92       	push	r15
    2ef4:	6b 01       	movw	r12, r22
    2ef6:	7c 01       	movw	r14, r24
    2ef8:	67 2b       	or	r22, r23
    2efa:	68 2b       	or	r22, r24
    2efc:	69 2b       	or	r22, r25
    2efe:	39 f0       	breq	.+14     	; 0x2f0e <vTaskDelay+0x22>
    2f00:	74 dd       	rcall	.-1304   	; 0x29ea <vTaskSuspendAll>
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	c7 01       	movw	r24, r14
    2f06:	b6 01       	movw	r22, r12
    2f08:	4a dc       	rcall	.-1900   	; 0x279e <prvAddCurrentTaskToDelayedList>
    2f0a:	af de       	rcall	.-674    	; 0x2c6a <xTaskResumeAll>
    2f0c:	01 c0       	rjmp	.+2      	; 0x2f10 <vTaskDelay+0x24>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	81 11       	cpse	r24, r1
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <vTaskDelay+0x2c>
    2f14:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	08 95       	ret

00002f22 <vTaskSwitchContext>:
    2f22:	80 91 48 13 	lds	r24, 0x1348	; 0x801348 <uxSchedulerSuspended>
    2f26:	88 23       	and	r24, r24
    2f28:	21 f0       	breq	.+8      	; 0x2f32 <vTaskSwitchContext+0x10>
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <xYieldPending>
    2f30:	08 95       	ret
    2f32:	10 92 51 13 	sts	0x1351, r1	; 0x801351 <xYieldPending>
    2f36:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    2f3a:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2f3e:	20 81       	ld	r18, Z
    2f40:	31 81       	ldd	r19, Z+1	; 0x01
    2f42:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    2f46:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2f4a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2f4c:	94 8d       	ldd	r25, Z+28	; 0x1c
    2f4e:	82 17       	cp	r24, r18
    2f50:	93 07       	cpc	r25, r19
    2f52:	60 f0       	brcs	.+24     	; 0x2f6c <vTaskSwitchContext+0x4a>
    2f54:	60 91 07 14 	lds	r22, 0x1407	; 0x801407 <pxCurrentTCB>
    2f58:	70 91 08 14 	lds	r23, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2f5c:	63 5e       	subi	r22, 0xE3	; 227
    2f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f60:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    2f64:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    2f68:	0e 94 fe 21 	call	0x43fc	; 0x43fc <vApplicationStackOverflowHook>
    2f6c:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    2f70:	01 c0       	rjmp	.+2      	; 0x2f74 <vTaskSwitchContext+0x52>
    2f72:	81 50       	subi	r24, 0x01	; 1
    2f74:	28 2f       	mov	r18, r24
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	9b e0       	ldi	r25, 0x0B	; 11
    2f7a:	92 9f       	mul	r25, r18
    2f7c:	f0 01       	movw	r30, r0
    2f7e:	93 9f       	mul	r25, r19
    2f80:	f0 0d       	add	r31, r0
    2f82:	11 24       	eor	r1, r1
    2f84:	e7 56       	subi	r30, 0x67	; 103
    2f86:	fc 4e       	sbci	r31, 0xEC	; 236
    2f88:	90 81       	ld	r25, Z
    2f8a:	99 23       	and	r25, r25
    2f8c:	91 f3       	breq	.-28     	; 0x2f72 <vTaskSwitchContext+0x50>
    2f8e:	9b e0       	ldi	r25, 0x0B	; 11
    2f90:	92 9f       	mul	r25, r18
    2f92:	a0 01       	movw	r20, r0
    2f94:	93 9f       	mul	r25, r19
    2f96:	50 0d       	add	r21, r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	df 01       	movw	r26, r30
    2f9c:	01 80       	ldd	r0, Z+1	; 0x01
    2f9e:	f2 81       	ldd	r31, Z+2	; 0x02
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	04 80       	ldd	r0, Z+4	; 0x04
    2fa4:	f5 81       	ldd	r31, Z+5	; 0x05
    2fa6:	e0 2d       	mov	r30, r0
    2fa8:	12 96       	adiw	r26, 0x02	; 2
    2faa:	fc 93       	st	X, r31
    2fac:	ee 93       	st	-X, r30
    2fae:	11 97       	sbiw	r26, 0x01	; 1
    2fb0:	44 56       	subi	r20, 0x64	; 100
    2fb2:	5c 4e       	sbci	r21, 0xEC	; 236
    2fb4:	e4 17       	cp	r30, r20
    2fb6:	f5 07       	cpc	r31, r21
    2fb8:	29 f4       	brne	.+10     	; 0x2fc4 <vTaskSwitchContext+0xa2>
    2fba:	44 81       	ldd	r20, Z+4	; 0x04
    2fbc:	55 81       	ldd	r21, Z+5	; 0x05
    2fbe:	fd 01       	movw	r30, r26
    2fc0:	52 83       	std	Z+2, r21	; 0x02
    2fc2:	41 83       	std	Z+1, r20	; 0x01
    2fc4:	9b e0       	ldi	r25, 0x0B	; 11
    2fc6:	92 9f       	mul	r25, r18
    2fc8:	f0 01       	movw	r30, r0
    2fca:	93 9f       	mul	r25, r19
    2fcc:	f0 0d       	add	r31, r0
    2fce:	11 24       	eor	r1, r1
    2fd0:	e7 56       	subi	r30, 0x67	; 103
    2fd2:	fc 4e       	sbci	r31, 0xEC	; 236
    2fd4:	01 80       	ldd	r0, Z+1	; 0x01
    2fd6:	f2 81       	ldd	r31, Z+2	; 0x02
    2fd8:	e0 2d       	mov	r30, r0
    2fda:	20 85       	ldd	r18, Z+8	; 0x08
    2fdc:	31 85       	ldd	r19, Z+9	; 0x09
    2fde:	30 93 08 14 	sts	0x1408, r19	; 0x801408 <pxCurrentTCB+0x1>
    2fe2:	20 93 07 14 	sts	0x1407, r18	; 0x801407 <pxCurrentTCB>
    2fe6:	80 93 57 13 	sts	0x1357, r24	; 0x801357 <uxTopReadyPriority>
    2fea:	08 95       	ret

00002fec <vTaskPlaceOnEventList>:
    2fec:	cf 92       	push	r12
    2fee:	df 92       	push	r13
    2ff0:	ef 92       	push	r14
    2ff2:	ff 92       	push	r15
    2ff4:	6a 01       	movw	r12, r20
    2ff6:	7b 01       	movw	r14, r22
    2ff8:	60 91 07 14 	lds	r22, 0x1407	; 0x801407 <pxCurrentTCB>
    2ffc:	70 91 08 14 	lds	r23, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3000:	62 5f       	subi	r22, 0xF2	; 242
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	0e 94 10 0a 	call	0x1420	; 0x1420 <vListInsert>
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	c7 01       	movw	r24, r14
    300c:	b6 01       	movw	r22, r12
    300e:	c7 db       	rcall	.-2162   	; 0x279e <prvAddCurrentTaskToDelayedList>
    3010:	ff 90       	pop	r15
    3012:	ef 90       	pop	r14
    3014:	df 90       	pop	r13
    3016:	cf 90       	pop	r12
    3018:	08 95       	ret

0000301a <vTaskPlaceOnUnorderedEventList>:
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	fc 01       	movw	r30, r24
    3024:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    3028:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    302c:	70 68       	ori	r23, 0x80	; 128
    302e:	1e 96       	adiw	r26, 0x0e	; 14
    3030:	4d 93       	st	X+, r20
    3032:	5d 93       	st	X+, r21
    3034:	6d 93       	st	X+, r22
    3036:	7c 93       	st	X, r23
    3038:	51 97       	sbiw	r26, 0x11	; 17
    303a:	a1 81       	ldd	r26, Z+1	; 0x01
    303c:	b2 81       	ldd	r27, Z+2	; 0x02
    303e:	c0 91 07 14 	lds	r28, 0x1407	; 0x801407 <pxCurrentTCB>
    3042:	d0 91 08 14 	lds	r29, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3046:	bb 8b       	std	Y+19, r27	; 0x13
    3048:	aa 8b       	std	Y+18, r26	; 0x12
    304a:	c0 91 07 14 	lds	r28, 0x1407	; 0x801407 <pxCurrentTCB>
    304e:	d0 91 08 14 	lds	r29, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3052:	16 96       	adiw	r26, 0x06	; 6
    3054:	8d 91       	ld	r24, X+
    3056:	9c 91       	ld	r25, X
    3058:	17 97       	sbiw	r26, 0x07	; 7
    305a:	9d 8b       	std	Y+21, r25	; 0x15
    305c:	8c 8b       	std	Y+20, r24	; 0x14
    305e:	16 96       	adiw	r26, 0x06	; 6
    3060:	cd 91       	ld	r28, X+
    3062:	dc 91       	ld	r29, X
    3064:	17 97       	sbiw	r26, 0x07	; 7
    3066:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    306a:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    306e:	0e 96       	adiw	r24, 0x0e	; 14
    3070:	9d 83       	std	Y+5, r25	; 0x05
    3072:	8c 83       	std	Y+4, r24	; 0x04
    3074:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    3078:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    307c:	0e 96       	adiw	r24, 0x0e	; 14
    307e:	17 96       	adiw	r26, 0x07	; 7
    3080:	9c 93       	st	X, r25
    3082:	8e 93       	st	-X, r24
    3084:	16 97       	sbiw	r26, 0x06	; 6
    3086:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    308a:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    308e:	59 96       	adiw	r26, 0x19	; 25
    3090:	fc 93       	st	X, r31
    3092:	ee 93       	st	-X, r30
    3094:	58 97       	sbiw	r26, 0x18	; 24
    3096:	80 81       	ld	r24, Z
    3098:	8f 5f       	subi	r24, 0xFF	; 255
    309a:	80 83       	st	Z, r24
    309c:	41 e0       	ldi	r20, 0x01	; 1
    309e:	c9 01       	movw	r24, r18
    30a0:	b8 01       	movw	r22, r16
    30a2:	7d db       	rcall	.-2310   	; 0x279e <prvAddCurrentTaskToDelayedList>
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	08 95       	ret

000030ae <vTaskPlaceOnEventListRestricted>:
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	fc 01       	movw	r30, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	ba 01       	movw	r22, r20
    30b8:	a1 81       	ldd	r26, Z+1	; 0x01
    30ba:	b2 81       	ldd	r27, Z+2	; 0x02
    30bc:	c0 91 07 14 	lds	r28, 0x1407	; 0x801407 <pxCurrentTCB>
    30c0:	d0 91 08 14 	lds	r29, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    30c4:	bb 8b       	std	Y+19, r27	; 0x13
    30c6:	aa 8b       	std	Y+18, r26	; 0x12
    30c8:	c0 91 07 14 	lds	r28, 0x1407	; 0x801407 <pxCurrentTCB>
    30cc:	d0 91 08 14 	lds	r29, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    30d0:	16 96       	adiw	r26, 0x06	; 6
    30d2:	4d 91       	ld	r20, X+
    30d4:	5c 91       	ld	r21, X
    30d6:	17 97       	sbiw	r26, 0x07	; 7
    30d8:	5d 8b       	std	Y+21, r21	; 0x15
    30da:	4c 8b       	std	Y+20, r20	; 0x14
    30dc:	16 96       	adiw	r26, 0x06	; 6
    30de:	cd 91       	ld	r28, X+
    30e0:	dc 91       	ld	r29, X
    30e2:	17 97       	sbiw	r26, 0x07	; 7
    30e4:	40 91 07 14 	lds	r20, 0x1407	; 0x801407 <pxCurrentTCB>
    30e8:	50 91 08 14 	lds	r21, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    30ec:	42 5f       	subi	r20, 0xF2	; 242
    30ee:	5f 4f       	sbci	r21, 0xFF	; 255
    30f0:	5d 83       	std	Y+5, r21	; 0x05
    30f2:	4c 83       	std	Y+4, r20	; 0x04
    30f4:	40 91 07 14 	lds	r20, 0x1407	; 0x801407 <pxCurrentTCB>
    30f8:	50 91 08 14 	lds	r21, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    30fc:	42 5f       	subi	r20, 0xF2	; 242
    30fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3100:	17 96       	adiw	r26, 0x07	; 7
    3102:	5c 93       	st	X, r21
    3104:	4e 93       	st	-X, r20
    3106:	16 97       	sbiw	r26, 0x06	; 6
    3108:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    310c:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3110:	59 96       	adiw	r26, 0x19	; 25
    3112:	fc 93       	st	X, r31
    3114:	ee 93       	st	-X, r30
    3116:	58 97       	sbiw	r26, 0x18	; 24
    3118:	30 81       	ld	r19, Z
    311a:	3f 5f       	subi	r19, 0xFF	; 255
    311c:	30 83       	st	Z, r19
    311e:	22 23       	and	r18, r18
    3120:	19 f0       	breq	.+6      	; 0x3128 <vTaskPlaceOnEventListRestricted+0x7a>
    3122:	6f ef       	ldi	r22, 0xFF	; 255
    3124:	7f ef       	ldi	r23, 0xFF	; 255
    3126:	cb 01       	movw	r24, r22
    3128:	42 2f       	mov	r20, r18
    312a:	39 db       	rcall	.-2446   	; 0x279e <prvAddCurrentTaskToDelayedList>
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	08 95       	ret

00003132 <xTaskRemoveFromEventList>:
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	dc 01       	movw	r26, r24
    3138:	17 96       	adiw	r26, 0x07	; 7
    313a:	ed 91       	ld	r30, X+
    313c:	fc 91       	ld	r31, X
    313e:	18 97       	sbiw	r26, 0x08	; 8
    3140:	00 84       	ldd	r0, Z+8	; 0x08
    3142:	f1 85       	ldd	r31, Z+9	; 0x09
    3144:	e0 2d       	mov	r30, r0
    3146:	a0 8d       	ldd	r26, Z+24	; 0x18
    3148:	b1 8d       	ldd	r27, Z+25	; 0x19
    314a:	c2 89       	ldd	r28, Z+18	; 0x12
    314c:	d3 89       	ldd	r29, Z+19	; 0x13
    314e:	84 89       	ldd	r24, Z+20	; 0x14
    3150:	95 89       	ldd	r25, Z+21	; 0x15
    3152:	9f 83       	std	Y+7, r25	; 0x07
    3154:	8e 83       	std	Y+6, r24	; 0x06
    3156:	c4 89       	ldd	r28, Z+20	; 0x14
    3158:	d5 89       	ldd	r29, Z+21	; 0x15
    315a:	82 89       	ldd	r24, Z+18	; 0x12
    315c:	93 89       	ldd	r25, Z+19	; 0x13
    315e:	9d 83       	std	Y+5, r25	; 0x05
    3160:	8c 83       	std	Y+4, r24	; 0x04
    3162:	11 96       	adiw	r26, 0x01	; 1
    3164:	8d 91       	ld	r24, X+
    3166:	9c 91       	ld	r25, X
    3168:	12 97       	sbiw	r26, 0x02	; 2
    316a:	9f 01       	movw	r18, r30
    316c:	22 5f       	subi	r18, 0xF2	; 242
    316e:	3f 4f       	sbci	r19, 0xFF	; 255
    3170:	82 17       	cp	r24, r18
    3172:	93 07       	cpc	r25, r19
    3174:	31 f4       	brne	.+12     	; 0x3182 <xTaskRemoveFromEventList+0x50>
    3176:	84 89       	ldd	r24, Z+20	; 0x14
    3178:	95 89       	ldd	r25, Z+21	; 0x15
    317a:	12 96       	adiw	r26, 0x02	; 2
    317c:	9c 93       	st	X, r25
    317e:	8e 93       	st	-X, r24
    3180:	11 97       	sbiw	r26, 0x01	; 1
    3182:	11 8e       	std	Z+25, r1	; 0x19
    3184:	10 8e       	std	Z+24, r1	; 0x18
    3186:	8c 91       	ld	r24, X
    3188:	81 50       	subi	r24, 0x01	; 1
    318a:	8c 93       	st	X, r24
    318c:	80 91 48 13 	lds	r24, 0x1348	; 0x801348 <uxSchedulerSuspended>
    3190:	81 11       	cpse	r24, r1
    3192:	52 c0       	rjmp	.+164    	; 0x3238 <xTaskRemoveFromEventList+0x106>
    3194:	a4 85       	ldd	r26, Z+12	; 0x0c
    3196:	b5 85       	ldd	r27, Z+13	; 0x0d
    3198:	c6 81       	ldd	r28, Z+6	; 0x06
    319a:	d7 81       	ldd	r29, Z+7	; 0x07
    319c:	80 85       	ldd	r24, Z+8	; 0x08
    319e:	91 85       	ldd	r25, Z+9	; 0x09
    31a0:	9f 83       	std	Y+7, r25	; 0x07
    31a2:	8e 83       	std	Y+6, r24	; 0x06
    31a4:	c0 85       	ldd	r28, Z+8	; 0x08
    31a6:	d1 85       	ldd	r29, Z+9	; 0x09
    31a8:	86 81       	ldd	r24, Z+6	; 0x06
    31aa:	97 81       	ldd	r25, Z+7	; 0x07
    31ac:	9d 83       	std	Y+5, r25	; 0x05
    31ae:	8c 83       	std	Y+4, r24	; 0x04
    31b0:	11 96       	adiw	r26, 0x01	; 1
    31b2:	8d 91       	ld	r24, X+
    31b4:	9c 91       	ld	r25, X
    31b6:	12 97       	sbiw	r26, 0x02	; 2
    31b8:	9f 01       	movw	r18, r30
    31ba:	2e 5f       	subi	r18, 0xFE	; 254
    31bc:	3f 4f       	sbci	r19, 0xFF	; 255
    31be:	82 17       	cp	r24, r18
    31c0:	93 07       	cpc	r25, r19
    31c2:	31 f4       	brne	.+12     	; 0x31d0 <xTaskRemoveFromEventList+0x9e>
    31c4:	80 85       	ldd	r24, Z+8	; 0x08
    31c6:	91 85       	ldd	r25, Z+9	; 0x09
    31c8:	12 96       	adiw	r26, 0x02	; 2
    31ca:	9c 93       	st	X, r25
    31cc:	8e 93       	st	-X, r24
    31ce:	11 97       	sbiw	r26, 0x01	; 1
    31d0:	15 86       	std	Z+13, r1	; 0x0d
    31d2:	14 86       	std	Z+12, r1	; 0x0c
    31d4:	8c 91       	ld	r24, X
    31d6:	81 50       	subi	r24, 0x01	; 1
    31d8:	8c 93       	st	X, r24
    31da:	a2 8d       	ldd	r26, Z+26	; 0x1a
    31dc:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    31e0:	8a 17       	cp	r24, r26
    31e2:	10 f4       	brcc	.+4      	; 0x31e8 <xTaskRemoveFromEventList+0xb6>
    31e4:	a0 93 57 13 	sts	0x1357, r26	; 0x801357 <uxTopReadyPriority>
    31e8:	8b e0       	ldi	r24, 0x0B	; 11
    31ea:	8a 9f       	mul	r24, r26
    31ec:	d0 01       	movw	r26, r0
    31ee:	11 24       	eor	r1, r1
    31f0:	a7 56       	subi	r26, 0x67	; 103
    31f2:	bc 4e       	sbci	r27, 0xEC	; 236
    31f4:	11 96       	adiw	r26, 0x01	; 1
    31f6:	0d 90       	ld	r0, X+
    31f8:	bc 91       	ld	r27, X
    31fa:	a0 2d       	mov	r26, r0
    31fc:	b7 83       	std	Z+7, r27	; 0x07
    31fe:	a6 83       	std	Z+6, r26	; 0x06
    3200:	16 96       	adiw	r26, 0x06	; 6
    3202:	4d 91       	ld	r20, X+
    3204:	5c 91       	ld	r21, X
    3206:	17 97       	sbiw	r26, 0x07	; 7
    3208:	51 87       	std	Z+9, r21	; 0x09
    320a:	40 87       	std	Z+8, r20	; 0x08
    320c:	16 96       	adiw	r26, 0x06	; 6
    320e:	cd 91       	ld	r28, X+
    3210:	dc 91       	ld	r29, X
    3212:	17 97       	sbiw	r26, 0x07	; 7
    3214:	3d 83       	std	Y+5, r19	; 0x05
    3216:	2c 83       	std	Y+4, r18	; 0x04
    3218:	17 96       	adiw	r26, 0x07	; 7
    321a:	3c 93       	st	X, r19
    321c:	2e 93       	st	-X, r18
    321e:	16 97       	sbiw	r26, 0x06	; 6
    3220:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3222:	8a 9f       	mul	r24, r26
    3224:	d0 01       	movw	r26, r0
    3226:	11 24       	eor	r1, r1
    3228:	a7 56       	subi	r26, 0x67	; 103
    322a:	bc 4e       	sbci	r27, 0xEC	; 236
    322c:	b5 87       	std	Z+13, r27	; 0x0d
    322e:	a4 87       	std	Z+12, r26	; 0x0c
    3230:	8c 91       	ld	r24, X
    3232:	8f 5f       	subi	r24, 0xFF	; 255
    3234:	8c 93       	st	X, r24
    3236:	1c c0       	rjmp	.+56     	; 0x3270 <xTaskRemoveFromEventList+0x13e>
    3238:	44 e7       	ldi	r20, 0x74	; 116
    323a:	53 e1       	ldi	r21, 0x13	; 19
    323c:	da 01       	movw	r26, r20
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	cd 91       	ld	r28, X+
    3242:	dc 91       	ld	r29, X
    3244:	12 97       	sbiw	r26, 0x02	; 2
    3246:	d3 8b       	std	Z+19, r29	; 0x13
    3248:	c2 8b       	std	Z+18, r28	; 0x12
    324a:	8e 81       	ldd	r24, Y+6	; 0x06
    324c:	9f 81       	ldd	r25, Y+7	; 0x07
    324e:	95 8b       	std	Z+21, r25	; 0x15
    3250:	84 8b       	std	Z+20, r24	; 0x14
    3252:	8e 81       	ldd	r24, Y+6	; 0x06
    3254:	9f 81       	ldd	r25, Y+7	; 0x07
    3256:	dc 01       	movw	r26, r24
    3258:	15 96       	adiw	r26, 0x05	; 5
    325a:	3c 93       	st	X, r19
    325c:	2e 93       	st	-X, r18
    325e:	14 97       	sbiw	r26, 0x04	; 4
    3260:	3f 83       	std	Y+7, r19	; 0x07
    3262:	2e 83       	std	Y+6, r18	; 0x06
    3264:	51 8f       	std	Z+25, r21	; 0x19
    3266:	40 8f       	std	Z+24, r20	; 0x18
    3268:	da 01       	movw	r26, r20
    326a:	8c 91       	ld	r24, X
    326c:	8f 5f       	subi	r24, 0xFF	; 255
    326e:	8c 93       	st	X, r24
    3270:	92 8d       	ldd	r25, Z+26	; 0x1a
    3272:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    3276:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    327a:	82 8d       	ldd	r24, Z+26	; 0x1a
    327c:	89 17       	cp	r24, r25
    327e:	20 f4       	brcc	.+8      	; 0x3288 <xTaskRemoveFromEventList+0x156>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <xYieldPending>
    3286:	01 c0       	rjmp	.+2      	; 0x328a <xTaskRemoveFromEventList+0x158>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	08 95       	ret

00003290 <vTaskRemoveFromUnorderedEventList>:
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	dc 01       	movw	r26, r24
    3296:	70 68       	ori	r23, 0x80	; 128
    3298:	4d 93       	st	X+, r20
    329a:	5d 93       	st	X+, r21
    329c:	6d 93       	st	X+, r22
    329e:	7c 93       	st	X, r23
    32a0:	13 97       	sbiw	r26, 0x03	; 3
    32a2:	18 96       	adiw	r26, 0x08	; 8
    32a4:	ed 91       	ld	r30, X+
    32a6:	fc 91       	ld	r31, X
    32a8:	19 97       	sbiw	r26, 0x09	; 9
    32aa:	1a 96       	adiw	r26, 0x0a	; 10
    32ac:	4d 91       	ld	r20, X+
    32ae:	5c 91       	ld	r21, X
    32b0:	1b 97       	sbiw	r26, 0x0b	; 11
    32b2:	14 96       	adiw	r26, 0x04	; 4
    32b4:	8d 91       	ld	r24, X+
    32b6:	9c 91       	ld	r25, X
    32b8:	15 97       	sbiw	r26, 0x05	; 5
    32ba:	16 96       	adiw	r26, 0x06	; 6
    32bc:	2d 91       	ld	r18, X+
    32be:	3c 91       	ld	r19, X
    32c0:	17 97       	sbiw	r26, 0x07	; 7
    32c2:	ec 01       	movw	r28, r24
    32c4:	3f 83       	std	Y+7, r19	; 0x07
    32c6:	2e 83       	std	Y+6, r18	; 0x06
    32c8:	16 96       	adiw	r26, 0x06	; 6
    32ca:	8d 91       	ld	r24, X+
    32cc:	9c 91       	ld	r25, X
    32ce:	17 97       	sbiw	r26, 0x07	; 7
    32d0:	14 96       	adiw	r26, 0x04	; 4
    32d2:	2d 91       	ld	r18, X+
    32d4:	3c 91       	ld	r19, X
    32d6:	15 97       	sbiw	r26, 0x05	; 5
    32d8:	ec 01       	movw	r28, r24
    32da:	3d 83       	std	Y+5, r19	; 0x05
    32dc:	2c 83       	std	Y+4, r18	; 0x04
    32de:	ea 01       	movw	r28, r20
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	a8 17       	cp	r26, r24
    32e6:	b9 07       	cpc	r27, r25
    32e8:	31 f4       	brne	.+12     	; 0x32f6 <vTaskRemoveFromUnorderedEventList+0x66>
    32ea:	16 96       	adiw	r26, 0x06	; 6
    32ec:	8d 91       	ld	r24, X+
    32ee:	9c 91       	ld	r25, X
    32f0:	17 97       	sbiw	r26, 0x07	; 7
    32f2:	9a 83       	std	Y+2, r25	; 0x02
    32f4:	89 83       	std	Y+1, r24	; 0x01
    32f6:	1b 96       	adiw	r26, 0x0b	; 11
    32f8:	1c 92       	st	X, r1
    32fa:	1e 92       	st	-X, r1
    32fc:	1a 97       	sbiw	r26, 0x0a	; 10
    32fe:	da 01       	movw	r26, r20
    3300:	8c 91       	ld	r24, X
    3302:	81 50       	subi	r24, 0x01	; 1
    3304:	8c 93       	st	X, r24
    3306:	a4 85       	ldd	r26, Z+12	; 0x0c
    3308:	b5 85       	ldd	r27, Z+13	; 0x0d
    330a:	c6 81       	ldd	r28, Z+6	; 0x06
    330c:	d7 81       	ldd	r29, Z+7	; 0x07
    330e:	80 85       	ldd	r24, Z+8	; 0x08
    3310:	91 85       	ldd	r25, Z+9	; 0x09
    3312:	9f 83       	std	Y+7, r25	; 0x07
    3314:	8e 83       	std	Y+6, r24	; 0x06
    3316:	c0 85       	ldd	r28, Z+8	; 0x08
    3318:	d1 85       	ldd	r29, Z+9	; 0x09
    331a:	86 81       	ldd	r24, Z+6	; 0x06
    331c:	97 81       	ldd	r25, Z+7	; 0x07
    331e:	9d 83       	std	Y+5, r25	; 0x05
    3320:	8c 83       	std	Y+4, r24	; 0x04
    3322:	11 96       	adiw	r26, 0x01	; 1
    3324:	8d 91       	ld	r24, X+
    3326:	9c 91       	ld	r25, X
    3328:	12 97       	sbiw	r26, 0x02	; 2
    332a:	9f 01       	movw	r18, r30
    332c:	2e 5f       	subi	r18, 0xFE	; 254
    332e:	3f 4f       	sbci	r19, 0xFF	; 255
    3330:	82 17       	cp	r24, r18
    3332:	93 07       	cpc	r25, r19
    3334:	31 f4       	brne	.+12     	; 0x3342 <vTaskRemoveFromUnorderedEventList+0xb2>
    3336:	80 85       	ldd	r24, Z+8	; 0x08
    3338:	91 85       	ldd	r25, Z+9	; 0x09
    333a:	12 96       	adiw	r26, 0x02	; 2
    333c:	9c 93       	st	X, r25
    333e:	8e 93       	st	-X, r24
    3340:	11 97       	sbiw	r26, 0x01	; 1
    3342:	15 86       	std	Z+13, r1	; 0x0d
    3344:	14 86       	std	Z+12, r1	; 0x0c
    3346:	8c 91       	ld	r24, X
    3348:	81 50       	subi	r24, 0x01	; 1
    334a:	8c 93       	st	X, r24
    334c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    334e:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    3352:	8a 17       	cp	r24, r26
    3354:	10 f4       	brcc	.+4      	; 0x335a <vTaskRemoveFromUnorderedEventList+0xca>
    3356:	a0 93 57 13 	sts	0x1357, r26	; 0x801357 <uxTopReadyPriority>
    335a:	8b e0       	ldi	r24, 0x0B	; 11
    335c:	8a 9f       	mul	r24, r26
    335e:	d0 01       	movw	r26, r0
    3360:	11 24       	eor	r1, r1
    3362:	a7 56       	subi	r26, 0x67	; 103
    3364:	bc 4e       	sbci	r27, 0xEC	; 236
    3366:	11 96       	adiw	r26, 0x01	; 1
    3368:	0d 90       	ld	r0, X+
    336a:	bc 91       	ld	r27, X
    336c:	a0 2d       	mov	r26, r0
    336e:	b7 83       	std	Z+7, r27	; 0x07
    3370:	a6 83       	std	Z+6, r26	; 0x06
    3372:	16 96       	adiw	r26, 0x06	; 6
    3374:	4d 91       	ld	r20, X+
    3376:	5c 91       	ld	r21, X
    3378:	17 97       	sbiw	r26, 0x07	; 7
    337a:	51 87       	std	Z+9, r21	; 0x09
    337c:	40 87       	std	Z+8, r20	; 0x08
    337e:	16 96       	adiw	r26, 0x06	; 6
    3380:	cd 91       	ld	r28, X+
    3382:	dc 91       	ld	r29, X
    3384:	17 97       	sbiw	r26, 0x07	; 7
    3386:	3d 83       	std	Y+5, r19	; 0x05
    3388:	2c 83       	std	Y+4, r18	; 0x04
    338a:	17 96       	adiw	r26, 0x07	; 7
    338c:	3c 93       	st	X, r19
    338e:	2e 93       	st	-X, r18
    3390:	16 97       	sbiw	r26, 0x06	; 6
    3392:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3394:	8a 9f       	mul	r24, r26
    3396:	d0 01       	movw	r26, r0
    3398:	11 24       	eor	r1, r1
    339a:	a7 56       	subi	r26, 0x67	; 103
    339c:	bc 4e       	sbci	r27, 0xEC	; 236
    339e:	b5 87       	std	Z+13, r27	; 0x0d
    33a0:	a4 87       	std	Z+12, r26	; 0x0c
    33a2:	8c 91       	ld	r24, X
    33a4:	8f 5f       	subi	r24, 0xFF	; 255
    33a6:	8c 93       	st	X, r24
    33a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    33aa:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    33ae:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    33b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b4:	89 17       	cp	r24, r25
    33b6:	18 f4       	brcc	.+6      	; 0x33be <vTaskRemoveFromUnorderedEventList+0x12e>
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <xYieldPending>
    33be:	df 91       	pop	r29
    33c0:	cf 91       	pop	r28
    33c2:	08 95       	ret

000033c4 <vTaskSetTimeOutState>:
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	0f 92       	push	r0
    33ca:	20 91 50 13 	lds	r18, 0x1350	; 0x801350 <xNumOfOverflows>
    33ce:	fc 01       	movw	r30, r24
    33d0:	20 83       	st	Z, r18
    33d2:	40 91 58 13 	lds	r20, 0x1358	; 0x801358 <xTickCount>
    33d6:	50 91 59 13 	lds	r21, 0x1359	; 0x801359 <xTickCount+0x1>
    33da:	60 91 5a 13 	lds	r22, 0x135A	; 0x80135a <xTickCount+0x2>
    33de:	70 91 5b 13 	lds	r23, 0x135B	; 0x80135b <xTickCount+0x3>
    33e2:	41 83       	std	Z+1, r20	; 0x01
    33e4:	52 83       	std	Z+2, r21	; 0x02
    33e6:	63 83       	std	Z+3, r22	; 0x03
    33e8:	74 83       	std	Z+4, r23	; 0x04
    33ea:	0f 90       	pop	r0
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	08 95       	ret

000033f0 <vTaskInternalSetTimeOutState>:
    33f0:	20 91 50 13 	lds	r18, 0x1350	; 0x801350 <xNumOfOverflows>
    33f4:	fc 01       	movw	r30, r24
    33f6:	20 83       	st	Z, r18
    33f8:	40 91 58 13 	lds	r20, 0x1358	; 0x801358 <xTickCount>
    33fc:	50 91 59 13 	lds	r21, 0x1359	; 0x801359 <xTickCount+0x1>
    3400:	60 91 5a 13 	lds	r22, 0x135A	; 0x80135a <xTickCount+0x2>
    3404:	70 91 5b 13 	lds	r23, 0x135B	; 0x80135b <xTickCount+0x3>
    3408:	41 83       	std	Z+1, r20	; 0x01
    340a:	52 83       	std	Z+2, r21	; 0x02
    340c:	63 83       	std	Z+3, r22	; 0x03
    340e:	74 83       	std	Z+4, r23	; 0x04
    3410:	08 95       	ret

00003412 <xTaskCheckForTimeOut>:
    3412:	8f 92       	push	r8
    3414:	9f 92       	push	r9
    3416:	af 92       	push	r10
    3418:	bf 92       	push	r11
    341a:	cf 92       	push	r12
    341c:	df 92       	push	r13
    341e:	ef 92       	push	r14
    3420:	ff 92       	push	r15
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	fb 01       	movw	r30, r22
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	0f 92       	push	r0
    3432:	c0 90 58 13 	lds	r12, 0x1358	; 0x801358 <xTickCount>
    3436:	d0 90 59 13 	lds	r13, 0x1359	; 0x801359 <xTickCount+0x1>
    343a:	e0 90 5a 13 	lds	r14, 0x135A	; 0x80135a <xTickCount+0x2>
    343e:	f0 90 5b 13 	lds	r15, 0x135B	; 0x80135b <xTickCount+0x3>
    3442:	dc 01       	movw	r26, r24
    3444:	11 96       	adiw	r26, 0x01	; 1
    3446:	0d 91       	ld	r16, X+
    3448:	1d 91       	ld	r17, X+
    344a:	2d 91       	ld	r18, X+
    344c:	3c 91       	ld	r19, X
    344e:	14 97       	sbiw	r26, 0x04	; 4
    3450:	46 01       	movw	r8, r12
    3452:	57 01       	movw	r10, r14
    3454:	80 1a       	sub	r8, r16
    3456:	91 0a       	sbc	r9, r17
    3458:	a2 0a       	sbc	r10, r18
    345a:	b3 0a       	sbc	r11, r19
    345c:	40 81       	ld	r20, Z
    345e:	51 81       	ldd	r21, Z+1	; 0x01
    3460:	62 81       	ldd	r22, Z+2	; 0x02
    3462:	73 81       	ldd	r23, Z+3	; 0x03
    3464:	4f 3f       	cpi	r20, 0xFF	; 255
    3466:	bf ef       	ldi	r27, 0xFF	; 255
    3468:	5b 07       	cpc	r21, r27
    346a:	6b 07       	cpc	r22, r27
    346c:	7b 07       	cpc	r23, r27
    346e:	39 f1       	breq	.+78     	; 0x34be <xTaskCheckForTimeOut+0xac>
    3470:	ec 01       	movw	r28, r24
    3472:	b8 81       	ld	r27, Y
    3474:	a0 91 50 13 	lds	r26, 0x1350	; 0x801350 <xNumOfOverflows>
    3478:	ba 17       	cp	r27, r26
    347a:	59 f0       	breq	.+22     	; 0x3492 <xTaskCheckForTimeOut+0x80>
    347c:	c0 16       	cp	r12, r16
    347e:	d1 06       	cpc	r13, r17
    3480:	e2 06       	cpc	r14, r18
    3482:	f3 06       	cpc	r15, r19
    3484:	30 f0       	brcs	.+12     	; 0x3492 <xTaskCheckForTimeOut+0x80>
    3486:	10 82       	st	Z, r1
    3488:	11 82       	std	Z+1, r1	; 0x01
    348a:	12 82       	std	Z+2, r1	; 0x02
    348c:	13 82       	std	Z+3, r1	; 0x03
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	17 c0       	rjmp	.+46     	; 0x34c0 <xTaskCheckForTimeOut+0xae>
    3492:	84 16       	cp	r8, r20
    3494:	95 06       	cpc	r9, r21
    3496:	a6 06       	cpc	r10, r22
    3498:	b7 06       	cpc	r11, r23
    349a:	58 f4       	brcc	.+22     	; 0x34b2 <xTaskCheckForTimeOut+0xa0>
    349c:	48 19       	sub	r20, r8
    349e:	59 09       	sbc	r21, r9
    34a0:	6a 09       	sbc	r22, r10
    34a2:	7b 09       	sbc	r23, r11
    34a4:	40 83       	st	Z, r20
    34a6:	51 83       	std	Z+1, r21	; 0x01
    34a8:	62 83       	std	Z+2, r22	; 0x02
    34aa:	73 83       	std	Z+3, r23	; 0x03
    34ac:	a1 df       	rcall	.-190    	; 0x33f0 <vTaskInternalSetTimeOutState>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	07 c0       	rjmp	.+14     	; 0x34c0 <xTaskCheckForTimeOut+0xae>
    34b2:	10 82       	st	Z, r1
    34b4:	11 82       	std	Z+1, r1	; 0x01
    34b6:	12 82       	std	Z+2, r1	; 0x02
    34b8:	13 82       	std	Z+3, r1	; 0x03
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	01 c0       	rjmp	.+2      	; 0x34c0 <xTaskCheckForTimeOut+0xae>
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	0f 90       	pop	r0
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	ff 90       	pop	r15
    34ce:	ef 90       	pop	r14
    34d0:	df 90       	pop	r13
    34d2:	cf 90       	pop	r12
    34d4:	bf 90       	pop	r11
    34d6:	af 90       	pop	r10
    34d8:	9f 90       	pop	r9
    34da:	8f 90       	pop	r8
    34dc:	08 95       	ret

000034de <vTaskMissedYield>:
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <xYieldPending>
    34e4:	08 95       	ret

000034e6 <xTaskGetCurrentTaskHandle>:
    34e6:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    34ea:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    34ee:	08 95       	ret

000034f0 <xTaskGetSchedulerState>:
    34f0:	80 91 56 13 	lds	r24, 0x1356	; 0x801356 <xSchedulerRunning>
    34f4:	88 23       	and	r24, r24
    34f6:	31 f0       	breq	.+12     	; 0x3504 <xTaskGetSchedulerState+0x14>
    34f8:	80 91 48 13 	lds	r24, 0x1348	; 0x801348 <uxSchedulerSuspended>
    34fc:	81 11       	cpse	r24, r1
    34fe:	04 c0       	rjmp	.+8      	; 0x3508 <xTaskGetSchedulerState+0x18>
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	08 95       	ret
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	08 95       	ret
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	08 95       	ret

0000350c <xTaskPriorityInherit>:
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	fc 01       	movw	r30, r24
    3516:	89 2b       	or	r24, r25
    3518:	09 f4       	brne	.+2      	; 0x351c <xTaskPriorityInherit+0x10>
    351a:	77 c0       	rjmp	.+238    	; 0x360a <xTaskPriorityInherit+0xfe>
    351c:	82 8d       	ldd	r24, Z+26	; 0x1a
    351e:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    3522:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3526:	5a 96       	adiw	r26, 0x1a	; 26
    3528:	9c 91       	ld	r25, X
    352a:	89 17       	cp	r24, r25
    352c:	08 f0       	brcs	.+2      	; 0x3530 <xTaskPriorityInherit+0x24>
    352e:	63 c0       	rjmp	.+198    	; 0x35f6 <xTaskPriorityInherit+0xea>
    3530:	46 85       	ldd	r20, Z+14	; 0x0e
    3532:	57 85       	ldd	r21, Z+15	; 0x0f
    3534:	60 89       	ldd	r22, Z+16	; 0x10
    3536:	71 89       	ldd	r23, Z+17	; 0x11
    3538:	77 23       	and	r23, r23
    353a:	94 f0       	brlt	.+36     	; 0x3560 <xTaskPriorityInherit+0x54>
    353c:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    3540:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3544:	5a 96       	adiw	r26, 0x1a	; 26
    3546:	9c 91       	ld	r25, X
    3548:	4a e0       	ldi	r20, 0x0A	; 10
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	60 e0       	ldi	r22, 0x00	; 0
    354e:	70 e0       	ldi	r23, 0x00	; 0
    3550:	49 1b       	sub	r20, r25
    3552:	51 09       	sbc	r21, r1
    3554:	61 09       	sbc	r22, r1
    3556:	71 09       	sbc	r23, r1
    3558:	46 87       	std	Z+14, r20	; 0x0e
    355a:	57 87       	std	Z+15, r21	; 0x0f
    355c:	60 8b       	std	Z+16, r22	; 0x10
    355e:	71 8b       	std	Z+17, r23	; 0x11
    3560:	24 85       	ldd	r18, Z+12	; 0x0c
    3562:	35 85       	ldd	r19, Z+13	; 0x0d
    3564:	4b e0       	ldi	r20, 0x0B	; 11
    3566:	84 9f       	mul	r24, r20
    3568:	c0 01       	movw	r24, r0
    356a:	11 24       	eor	r1, r1
    356c:	87 56       	subi	r24, 0x67	; 103
    356e:	9c 4e       	sbci	r25, 0xEC	; 236
    3570:	28 17       	cp	r18, r24
    3572:	39 07       	cpc	r19, r25
    3574:	b9 f5       	brne	.+110    	; 0x35e4 <xTaskPriorityInherit+0xd8>
    3576:	ef 01       	movw	r28, r30
    3578:	8f 01       	movw	r16, r30
    357a:	0e 5f       	subi	r16, 0xFE	; 254
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	c8 01       	movw	r24, r16
    3580:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
    3584:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    3588:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    358c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    358e:	ea 8f       	std	Y+26, r30	; 0x1a
    3590:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    3594:	8e 17       	cp	r24, r30
    3596:	10 f4       	brcc	.+4      	; 0x359c <xTaskPriorityInherit+0x90>
    3598:	e0 93 57 13 	sts	0x1357, r30	; 0x801357 <uxTopReadyPriority>
    359c:	8b e0       	ldi	r24, 0x0B	; 11
    359e:	8e 9f       	mul	r24, r30
    35a0:	f0 01       	movw	r30, r0
    35a2:	11 24       	eor	r1, r1
    35a4:	e7 56       	subi	r30, 0x67	; 103
    35a6:	fc 4e       	sbci	r31, 0xEC	; 236
    35a8:	01 80       	ldd	r0, Z+1	; 0x01
    35aa:	f2 81       	ldd	r31, Z+2	; 0x02
    35ac:	e0 2d       	mov	r30, r0
    35ae:	ff 83       	std	Y+7, r31	; 0x07
    35b0:	ee 83       	std	Y+6, r30	; 0x06
    35b2:	26 81       	ldd	r18, Z+6	; 0x06
    35b4:	37 81       	ldd	r19, Z+7	; 0x07
    35b6:	39 87       	std	Y+9, r19	; 0x09
    35b8:	28 87       	std	Y+8, r18	; 0x08
    35ba:	a6 81       	ldd	r26, Z+6	; 0x06
    35bc:	b7 81       	ldd	r27, Z+7	; 0x07
    35be:	15 96       	adiw	r26, 0x05	; 5
    35c0:	1c 93       	st	X, r17
    35c2:	0e 93       	st	-X, r16
    35c4:	14 97       	sbiw	r26, 0x04	; 4
    35c6:	17 83       	std	Z+7, r17	; 0x07
    35c8:	06 83       	std	Z+6, r16	; 0x06
    35ca:	ea 8d       	ldd	r30, Y+26	; 0x1a
    35cc:	8e 9f       	mul	r24, r30
    35ce:	f0 01       	movw	r30, r0
    35d0:	11 24       	eor	r1, r1
    35d2:	e7 56       	subi	r30, 0x67	; 103
    35d4:	fc 4e       	sbci	r31, 0xEC	; 236
    35d6:	fd 87       	std	Y+13, r31	; 0x0d
    35d8:	ec 87       	std	Y+12, r30	; 0x0c
    35da:	80 81       	ld	r24, Z
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	80 83       	st	Z, r24
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	16 c0       	rjmp	.+44     	; 0x3610 <xTaskPriorityInherit+0x104>
    35e4:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    35e8:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    35ec:	5a 96       	adiw	r26, 0x1a	; 26
    35ee:	8c 91       	ld	r24, X
    35f0:	82 8f       	std	Z+26, r24	; 0x1a
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	0d c0       	rjmp	.+26     	; 0x3610 <xTaskPriorityInherit+0x104>
    35f6:	95 a5       	ldd	r25, Z+45	; 0x2d
    35f8:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    35fc:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3600:	82 8d       	ldd	r24, Z+26	; 0x1a
    3602:	98 17       	cp	r25, r24
    3604:	20 f0       	brcs	.+8      	; 0x360e <xTaskPriorityInherit+0x102>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	03 c0       	rjmp	.+6      	; 0x3610 <xTaskPriorityInherit+0x104>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	01 c0       	rjmp	.+2      	; 0x3610 <xTaskPriorityInherit+0x104>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	08 95       	ret

0000361a <xTaskPriorityDisinherit>:
    361a:	0f 93       	push	r16
    361c:	1f 93       	push	r17
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	fc 01       	movw	r30, r24
    3624:	89 2b       	or	r24, r25
    3626:	09 f4       	brne	.+2      	; 0x362a <xTaskPriorityDisinherit+0x10>
    3628:	49 c0       	rjmp	.+146    	; 0x36bc <xTaskPriorityDisinherit+0xa2>
    362a:	86 a5       	ldd	r24, Z+46	; 0x2e
    362c:	81 50       	subi	r24, 0x01	; 1
    362e:	86 a7       	std	Z+46, r24	; 0x2e
    3630:	22 8d       	ldd	r18, Z+26	; 0x1a
    3632:	95 a5       	ldd	r25, Z+45	; 0x2d
    3634:	29 17       	cp	r18, r25
    3636:	09 f4       	brne	.+2      	; 0x363a <xTaskPriorityDisinherit+0x20>
    3638:	43 c0       	rjmp	.+134    	; 0x36c0 <xTaskPriorityDisinherit+0xa6>
    363a:	81 11       	cpse	r24, r1
    363c:	43 c0       	rjmp	.+134    	; 0x36c4 <xTaskPriorityDisinherit+0xaa>
    363e:	ef 01       	movw	r28, r30
    3640:	8f 01       	movw	r16, r30
    3642:	0e 5f       	subi	r16, 0xFE	; 254
    3644:	1f 4f       	sbci	r17, 0xFF	; 255
    3646:	c8 01       	movw	r24, r16
    3648:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
    364c:	ed a5       	ldd	r30, Y+45	; 0x2d
    364e:	ea 8f       	std	Y+26, r30	; 0x1a
    3650:	8a e0       	ldi	r24, 0x0A	; 10
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a0 e0       	ldi	r26, 0x00	; 0
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	8e 1b       	sub	r24, r30
    365a:	91 09       	sbc	r25, r1
    365c:	a1 09       	sbc	r26, r1
    365e:	b1 09       	sbc	r27, r1
    3660:	8e 87       	std	Y+14, r24	; 0x0e
    3662:	9f 87       	std	Y+15, r25	; 0x0f
    3664:	a8 8b       	std	Y+16, r26	; 0x10
    3666:	b9 8b       	std	Y+17, r27	; 0x11
    3668:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    366c:	8e 17       	cp	r24, r30
    366e:	10 f4       	brcc	.+4      	; 0x3674 <xTaskPriorityDisinherit+0x5a>
    3670:	e0 93 57 13 	sts	0x1357, r30	; 0x801357 <uxTopReadyPriority>
    3674:	8b e0       	ldi	r24, 0x0B	; 11
    3676:	8e 9f       	mul	r24, r30
    3678:	f0 01       	movw	r30, r0
    367a:	11 24       	eor	r1, r1
    367c:	e7 56       	subi	r30, 0x67	; 103
    367e:	fc 4e       	sbci	r31, 0xEC	; 236
    3680:	01 80       	ldd	r0, Z+1	; 0x01
    3682:	f2 81       	ldd	r31, Z+2	; 0x02
    3684:	e0 2d       	mov	r30, r0
    3686:	ff 83       	std	Y+7, r31	; 0x07
    3688:	ee 83       	std	Y+6, r30	; 0x06
    368a:	26 81       	ldd	r18, Z+6	; 0x06
    368c:	37 81       	ldd	r19, Z+7	; 0x07
    368e:	39 87       	std	Y+9, r19	; 0x09
    3690:	28 87       	std	Y+8, r18	; 0x08
    3692:	a6 81       	ldd	r26, Z+6	; 0x06
    3694:	b7 81       	ldd	r27, Z+7	; 0x07
    3696:	15 96       	adiw	r26, 0x05	; 5
    3698:	1c 93       	st	X, r17
    369a:	0e 93       	st	-X, r16
    369c:	14 97       	sbiw	r26, 0x04	; 4
    369e:	17 83       	std	Z+7, r17	; 0x07
    36a0:	06 83       	std	Z+6, r16	; 0x06
    36a2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    36a4:	8e 9f       	mul	r24, r30
    36a6:	f0 01       	movw	r30, r0
    36a8:	11 24       	eor	r1, r1
    36aa:	e7 56       	subi	r30, 0x67	; 103
    36ac:	fc 4e       	sbci	r31, 0xEC	; 236
    36ae:	fd 87       	std	Y+13, r31	; 0x0d
    36b0:	ec 87       	std	Y+12, r30	; 0x0c
    36b2:	80 81       	ld	r24, Z
    36b4:	8f 5f       	subi	r24, 0xFF	; 255
    36b6:	80 83       	st	Z, r24
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	05 c0       	rjmp	.+10     	; 0x36c6 <xTaskPriorityDisinherit+0xac>
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <xTaskPriorityDisinherit+0xac>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	01 c0       	rjmp	.+2      	; 0x36c6 <xTaskPriorityDisinherit+0xac>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	1f 91       	pop	r17
    36cc:	0f 91       	pop	r16
    36ce:	08 95       	ret

000036d0 <vTaskPriorityDisinheritAfterTimeout>:
    36d0:	0f 93       	push	r16
    36d2:	1f 93       	push	r17
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	fc 01       	movw	r30, r24
    36da:	89 2b       	or	r24, r25
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    36de:	5a c0       	rjmp	.+180    	; 0x3794 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    36e0:	85 a5       	ldd	r24, Z+45	; 0x2d
    36e2:	86 17       	cp	r24, r22
    36e4:	08 f4       	brcc	.+2      	; 0x36e8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    36e6:	86 2f       	mov	r24, r22
    36e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    36ea:	89 17       	cp	r24, r25
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <vTaskPriorityDisinheritAfterTimeout+0x20>
    36ee:	52 c0       	rjmp	.+164    	; 0x3794 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    36f0:	26 a5       	ldd	r18, Z+46	; 0x2e
    36f2:	21 30       	cpi	r18, 0x01	; 1
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <vTaskPriorityDisinheritAfterTimeout+0x28>
    36f6:	4e c0       	rjmp	.+156    	; 0x3794 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    36f8:	82 8f       	std	Z+26, r24	; 0x1a
    36fa:	46 85       	ldd	r20, Z+14	; 0x0e
    36fc:	57 85       	ldd	r21, Z+15	; 0x0f
    36fe:	60 89       	ldd	r22, Z+16	; 0x10
    3700:	71 89       	ldd	r23, Z+17	; 0x11
    3702:	77 23       	and	r23, r23
    3704:	64 f0       	brlt	.+24     	; 0x371e <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3706:	4a e0       	ldi	r20, 0x0A	; 10
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	48 1b       	sub	r20, r24
    3710:	51 09       	sbc	r21, r1
    3712:	61 09       	sbc	r22, r1
    3714:	71 09       	sbc	r23, r1
    3716:	46 87       	std	Z+14, r20	; 0x0e
    3718:	57 87       	std	Z+15, r21	; 0x0f
    371a:	60 8b       	std	Z+16, r22	; 0x10
    371c:	71 8b       	std	Z+17, r23	; 0x11
    371e:	24 85       	ldd	r18, Z+12	; 0x0c
    3720:	35 85       	ldd	r19, Z+13	; 0x0d
    3722:	4b e0       	ldi	r20, 0x0B	; 11
    3724:	94 9f       	mul	r25, r20
    3726:	c0 01       	movw	r24, r0
    3728:	11 24       	eor	r1, r1
    372a:	87 56       	subi	r24, 0x67	; 103
    372c:	9c 4e       	sbci	r25, 0xEC	; 236
    372e:	28 17       	cp	r18, r24
    3730:	39 07       	cpc	r19, r25
    3732:	81 f5       	brne	.+96     	; 0x3794 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3734:	ef 01       	movw	r28, r30
    3736:	8f 01       	movw	r16, r30
    3738:	0e 5f       	subi	r16, 0xFE	; 254
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	c8 01       	movw	r24, r16
    373e:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
    3742:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3744:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    3748:	8e 17       	cp	r24, r30
    374a:	10 f4       	brcc	.+4      	; 0x3750 <vTaskPriorityDisinheritAfterTimeout+0x80>
    374c:	e0 93 57 13 	sts	0x1357, r30	; 0x801357 <uxTopReadyPriority>
    3750:	8b e0       	ldi	r24, 0x0B	; 11
    3752:	8e 9f       	mul	r24, r30
    3754:	f0 01       	movw	r30, r0
    3756:	11 24       	eor	r1, r1
    3758:	e7 56       	subi	r30, 0x67	; 103
    375a:	fc 4e       	sbci	r31, 0xEC	; 236
    375c:	01 80       	ldd	r0, Z+1	; 0x01
    375e:	f2 81       	ldd	r31, Z+2	; 0x02
    3760:	e0 2d       	mov	r30, r0
    3762:	ff 83       	std	Y+7, r31	; 0x07
    3764:	ee 83       	std	Y+6, r30	; 0x06
    3766:	26 81       	ldd	r18, Z+6	; 0x06
    3768:	37 81       	ldd	r19, Z+7	; 0x07
    376a:	39 87       	std	Y+9, r19	; 0x09
    376c:	28 87       	std	Y+8, r18	; 0x08
    376e:	a6 81       	ldd	r26, Z+6	; 0x06
    3770:	b7 81       	ldd	r27, Z+7	; 0x07
    3772:	15 96       	adiw	r26, 0x05	; 5
    3774:	1c 93       	st	X, r17
    3776:	0e 93       	st	-X, r16
    3778:	14 97       	sbiw	r26, 0x04	; 4
    377a:	17 83       	std	Z+7, r17	; 0x07
    377c:	06 83       	std	Z+6, r16	; 0x06
    377e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3780:	8e 9f       	mul	r24, r30
    3782:	f0 01       	movw	r30, r0
    3784:	11 24       	eor	r1, r1
    3786:	e7 56       	subi	r30, 0x67	; 103
    3788:	fc 4e       	sbci	r31, 0xEC	; 236
    378a:	fd 87       	std	Y+13, r31	; 0x0d
    378c:	ec 87       	std	Y+12, r30	; 0x0c
    378e:	80 81       	ld	r24, Z
    3790:	8f 5f       	subi	r24, 0xFF	; 255
    3792:	80 83       	st	Z, r24
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	08 95       	ret

0000379e <uxTaskResetEventItemValue>:
    379e:	cf 92       	push	r12
    37a0:	df 92       	push	r13
    37a2:	ef 92       	push	r14
    37a4:	ff 92       	push	r15
    37a6:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    37aa:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    37ae:	66 85       	ldd	r22, Z+14	; 0x0e
    37b0:	77 85       	ldd	r23, Z+15	; 0x0f
    37b2:	80 89       	ldd	r24, Z+16	; 0x10
    37b4:	91 89       	ldd	r25, Z+17	; 0x11
    37b6:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    37ba:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    37be:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <pxCurrentTCB>
    37c2:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    37c6:	5a 96       	adiw	r26, 0x1a	; 26
    37c8:	2c 91       	ld	r18, X
    37ca:	0f 2e       	mov	r0, r31
    37cc:	fa e0       	ldi	r31, 0x0A	; 10
    37ce:	cf 2e       	mov	r12, r31
    37d0:	d1 2c       	mov	r13, r1
    37d2:	e1 2c       	mov	r14, r1
    37d4:	f1 2c       	mov	r15, r1
    37d6:	f0 2d       	mov	r31, r0
    37d8:	c2 1a       	sub	r12, r18
    37da:	d1 08       	sbc	r13, r1
    37dc:	e1 08       	sbc	r14, r1
    37de:	f1 08       	sbc	r15, r1
    37e0:	c6 86       	std	Z+14, r12	; 0x0e
    37e2:	d7 86       	std	Z+15, r13	; 0x0f
    37e4:	e0 8a       	std	Z+16, r14	; 0x10
    37e6:	f1 8a       	std	Z+17, r15	; 0x11
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	08 95       	ret

000037f2 <pvTaskIncrementMutexHeldCount>:
    37f2:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    37f6:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    37fa:	89 2b       	or	r24, r25
    37fc:	39 f0       	breq	.+14     	; 0x380c <pvTaskIncrementMutexHeldCount+0x1a>
    37fe:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    3802:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3806:	86 a5       	ldd	r24, Z+46	; 0x2e
    3808:	8f 5f       	subi	r24, 0xFF	; 255
    380a:	86 a7       	std	Z+46, r24	; 0x2e
    380c:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    3810:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3814:	08 95       	ret

00003816 <xTaskGenericNotifyWait>:
    3816:	4f 92       	push	r4
    3818:	5f 92       	push	r5
    381a:	6f 92       	push	r6
    381c:	7f 92       	push	r7
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	28 01       	movw	r4, r16
    3834:	39 01       	movw	r6, r18
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	f8 94       	cli
    383a:	0f 92       	push	r0
    383c:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    3840:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3844:	c8 2f       	mov	r28, r24
    3846:	d0 e0       	ldi	r29, 0x00	; 0
    3848:	ec 0f       	add	r30, r28
    384a:	fd 1f       	adc	r31, r29
    384c:	83 a9       	ldd	r24, Z+51	; 0x33
    384e:	82 30       	cpi	r24, 0x02	; 2
    3850:	79 f1       	breq	.+94     	; 0x38b0 <xTaskGenericNotifyWait+0x9a>
    3852:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    3856:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    385a:	ce 01       	movw	r24, r28
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	e8 0f       	add	r30, r24
    3866:	f9 1f       	adc	r31, r25
    3868:	87 a5       	ldd	r24, Z+47	; 0x2f
    386a:	90 a9       	ldd	r25, Z+48	; 0x30
    386c:	a1 a9       	ldd	r26, Z+49	; 0x31
    386e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3870:	40 95       	com	r20
    3872:	50 95       	com	r21
    3874:	60 95       	com	r22
    3876:	70 95       	com	r23
    3878:	48 23       	and	r20, r24
    387a:	59 23       	and	r21, r25
    387c:	6a 23       	and	r22, r26
    387e:	7b 23       	and	r23, r27
    3880:	47 a7       	std	Z+47, r20	; 0x2f
    3882:	50 ab       	std	Z+48, r21	; 0x30
    3884:	61 ab       	std	Z+49, r22	; 0x31
    3886:	72 ab       	std	Z+50, r23	; 0x32
    3888:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    388c:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3890:	ec 0f       	add	r30, r28
    3892:	fd 1f       	adc	r31, r29
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	83 ab       	std	Z+51, r24	; 0x33
    3898:	a1 14       	cp	r10, r1
    389a:	b1 04       	cpc	r11, r1
    389c:	c1 04       	cpc	r12, r1
    389e:	d1 04       	cpc	r13, r1
    38a0:	39 f0       	breq	.+14     	; 0x38b0 <xTaskGenericNotifyWait+0x9a>
    38a2:	41 e0       	ldi	r20, 0x01	; 1
    38a4:	c6 01       	movw	r24, r12
    38a6:	b5 01       	movw	r22, r10
    38a8:	0e 94 cf 13 	call	0x279e	; 0x279e <prvAddCurrentTaskToDelayedList>
    38ac:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    38b0:	0f 90       	pop	r0
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	0f 92       	push	r0
    38ba:	e1 14       	cp	r14, r1
    38bc:	f1 04       	cpc	r15, r1
    38be:	a1 f0       	breq	.+40     	; 0x38e8 <xTaskGenericNotifyWait+0xd2>
    38c0:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    38c4:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    38c8:	ce 01       	movw	r24, r28
    38ca:	88 0f       	add	r24, r24
    38cc:	99 1f       	adc	r25, r25
    38ce:	88 0f       	add	r24, r24
    38d0:	99 1f       	adc	r25, r25
    38d2:	e8 0f       	add	r30, r24
    38d4:	f9 1f       	adc	r31, r25
    38d6:	87 a5       	ldd	r24, Z+47	; 0x2f
    38d8:	90 a9       	ldd	r25, Z+48	; 0x30
    38da:	a1 a9       	ldd	r26, Z+49	; 0x31
    38dc:	b2 a9       	ldd	r27, Z+50	; 0x32
    38de:	f7 01       	movw	r30, r14
    38e0:	80 83       	st	Z, r24
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	a2 83       	std	Z+2, r26	; 0x02
    38e6:	b3 83       	std	Z+3, r27	; 0x03
    38e8:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    38ec:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    38f0:	ec 0f       	add	r30, r28
    38f2:	fd 1f       	adc	r31, r29
    38f4:	83 a9       	ldd	r24, Z+51	; 0x33
    38f6:	82 30       	cpi	r24, 0x02	; 2
    38f8:	e9 f4       	brne	.+58     	; 0x3934 <xTaskGenericNotifyWait+0x11e>
    38fa:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    38fe:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3902:	ce 01       	movw	r24, r28
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	e8 0f       	add	r30, r24
    390e:	f9 1f       	adc	r31, r25
    3910:	87 a5       	ldd	r24, Z+47	; 0x2f
    3912:	90 a9       	ldd	r25, Z+48	; 0x30
    3914:	a1 a9       	ldd	r26, Z+49	; 0x31
    3916:	b2 a9       	ldd	r27, Z+50	; 0x32
    3918:	40 94       	com	r4
    391a:	50 94       	com	r5
    391c:	60 94       	com	r6
    391e:	70 94       	com	r7
    3920:	48 22       	and	r4, r24
    3922:	59 22       	and	r5, r25
    3924:	6a 22       	and	r6, r26
    3926:	7b 22       	and	r7, r27
    3928:	47 a6       	std	Z+47, r4	; 0x2f
    392a:	50 aa       	std	Z+48, r5	; 0x30
    392c:	61 aa       	std	Z+49, r6	; 0x31
    392e:	72 aa       	std	Z+50, r7	; 0x32
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	01 c0       	rjmp	.+2      	; 0x3936 <xTaskGenericNotifyWait+0x120>
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	20 91 07 14 	lds	r18, 0x1407	; 0x801407 <pxCurrentTCB>
    393a:	30 91 08 14 	lds	r19, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    393e:	c2 0f       	add	r28, r18
    3940:	d3 1f       	adc	r29, r19
    3942:	1b aa       	std	Y+51, r1	; 0x33
    3944:	0f 90       	pop	r0
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	ff 90       	pop	r15
    3952:	ef 90       	pop	r14
    3954:	df 90       	pop	r13
    3956:	cf 90       	pop	r12
    3958:	bf 90       	pop	r11
    395a:	af 90       	pop	r10
    395c:	7f 90       	pop	r7
    395e:	6f 90       	pop	r6
    3960:	5f 90       	pop	r5
    3962:	4f 90       	pop	r4
    3964:	08 95       	ret

00003966 <xTaskGenericNotify>:
    3966:	8f 92       	push	r8
    3968:	9f 92       	push	r9
    396a:	af 92       	push	r10
    396c:	bf 92       	push	r11
    396e:	ef 92       	push	r14
    3970:	ff 92       	push	r15
    3972:	0f 93       	push	r16
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	dc 01       	movw	r26, r24
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	0f 92       	push	r0
    3980:	e1 14       	cp	r14, r1
    3982:	f1 04       	cpc	r15, r1
    3984:	89 f0       	breq	.+34     	; 0x39a8 <xTaskGenericNotify+0x42>
    3986:	e6 2f       	mov	r30, r22
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	ee 0f       	add	r30, r30
    398c:	ff 1f       	adc	r31, r31
    398e:	ee 0f       	add	r30, r30
    3990:	ff 1f       	adc	r31, r31
    3992:	e8 0f       	add	r30, r24
    3994:	f9 1f       	adc	r31, r25
    3996:	87 a4       	ldd	r8, Z+47	; 0x2f
    3998:	90 a8       	ldd	r9, Z+48	; 0x30
    399a:	a1 a8       	ldd	r10, Z+49	; 0x31
    399c:	b2 a8       	ldd	r11, Z+50	; 0x32
    399e:	f7 01       	movw	r30, r14
    39a0:	80 82       	st	Z, r8
    39a2:	91 82       	std	Z+1, r9	; 0x01
    39a4:	a2 82       	std	Z+2, r10	; 0x02
    39a6:	b3 82       	std	Z+3, r11	; 0x03
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	fd 01       	movw	r30, r26
    39ac:	e6 0f       	add	r30, r22
    39ae:	f7 1f       	adc	r31, r23
    39b0:	83 a9       	ldd	r24, Z+51	; 0x33
    39b2:	92 e0       	ldi	r25, 0x02	; 2
    39b4:	93 ab       	std	Z+51, r25	; 0x33
    39b6:	02 30       	cpi	r16, 0x02	; 2
    39b8:	01 f1       	breq	.+64     	; 0x39fa <xTaskGenericNotify+0x94>
    39ba:	18 f4       	brcc	.+6      	; 0x39c2 <xTaskGenericNotify+0x5c>
    39bc:	01 30       	cpi	r16, 0x01	; 1
    39be:	31 f0       	breq	.+12     	; 0x39cc <xTaskGenericNotify+0x66>
    39c0:	4d c0       	rjmp	.+154    	; 0x3a5c <xTaskGenericNotify+0xf6>
    39c2:	03 30       	cpi	r16, 0x03	; 3
    39c4:	79 f1       	breq	.+94     	; 0x3a24 <xTaskGenericNotify+0xbe>
    39c6:	04 30       	cpi	r16, 0x04	; 4
    39c8:	d1 f1       	breq	.+116    	; 0x3a3e <xTaskGenericNotify+0xd8>
    39ca:	48 c0       	rjmp	.+144    	; 0x3a5c <xTaskGenericNotify+0xf6>
    39cc:	66 0f       	add	r22, r22
    39ce:	77 1f       	adc	r23, r23
    39d0:	66 0f       	add	r22, r22
    39d2:	77 1f       	adc	r23, r23
    39d4:	fd 01       	movw	r30, r26
    39d6:	e6 0f       	add	r30, r22
    39d8:	f7 1f       	adc	r31, r23
    39da:	87 a4       	ldd	r8, Z+47	; 0x2f
    39dc:	90 a8       	ldd	r9, Z+48	; 0x30
    39de:	a1 a8       	ldd	r10, Z+49	; 0x31
    39e0:	b2 a8       	ldd	r11, Z+50	; 0x32
    39e2:	ba 01       	movw	r22, r20
    39e4:	a9 01       	movw	r20, r18
    39e6:	48 29       	or	r20, r8
    39e8:	59 29       	or	r21, r9
    39ea:	6a 29       	or	r22, r10
    39ec:	7b 29       	or	r23, r11
    39ee:	47 a7       	std	Z+47, r20	; 0x2f
    39f0:	50 ab       	std	Z+48, r21	; 0x30
    39f2:	61 ab       	std	Z+49, r22	; 0x31
    39f4:	72 ab       	std	Z+50, r23	; 0x32
    39f6:	01 e0       	ldi	r16, 0x01	; 1
    39f8:	34 c0       	rjmp	.+104    	; 0x3a62 <xTaskGenericNotify+0xfc>
    39fa:	66 0f       	add	r22, r22
    39fc:	77 1f       	adc	r23, r23
    39fe:	66 0f       	add	r22, r22
    3a00:	77 1f       	adc	r23, r23
    3a02:	fd 01       	movw	r30, r26
    3a04:	e6 0f       	add	r30, r22
    3a06:	f7 1f       	adc	r31, r23
    3a08:	47 a5       	ldd	r20, Z+47	; 0x2f
    3a0a:	50 a9       	ldd	r21, Z+48	; 0x30
    3a0c:	61 a9       	ldd	r22, Z+49	; 0x31
    3a0e:	72 a9       	ldd	r23, Z+50	; 0x32
    3a10:	4f 5f       	subi	r20, 0xFF	; 255
    3a12:	5f 4f       	sbci	r21, 0xFF	; 255
    3a14:	6f 4f       	sbci	r22, 0xFF	; 255
    3a16:	7f 4f       	sbci	r23, 0xFF	; 255
    3a18:	47 a7       	std	Z+47, r20	; 0x2f
    3a1a:	50 ab       	std	Z+48, r21	; 0x30
    3a1c:	61 ab       	std	Z+49, r22	; 0x31
    3a1e:	72 ab       	std	Z+50, r23	; 0x32
    3a20:	01 e0       	ldi	r16, 0x01	; 1
    3a22:	1f c0       	rjmp	.+62     	; 0x3a62 <xTaskGenericNotify+0xfc>
    3a24:	66 0f       	add	r22, r22
    3a26:	77 1f       	adc	r23, r23
    3a28:	66 0f       	add	r22, r22
    3a2a:	77 1f       	adc	r23, r23
    3a2c:	fd 01       	movw	r30, r26
    3a2e:	e6 0f       	add	r30, r22
    3a30:	f7 1f       	adc	r31, r23
    3a32:	27 a7       	std	Z+47, r18	; 0x2f
    3a34:	30 ab       	std	Z+48, r19	; 0x30
    3a36:	41 ab       	std	Z+49, r20	; 0x31
    3a38:	52 ab       	std	Z+50, r21	; 0x32
    3a3a:	01 e0       	ldi	r16, 0x01	; 1
    3a3c:	12 c0       	rjmp	.+36     	; 0x3a62 <xTaskGenericNotify+0xfc>
    3a3e:	82 30       	cpi	r24, 0x02	; 2
    3a40:	79 f0       	breq	.+30     	; 0x3a60 <xTaskGenericNotify+0xfa>
    3a42:	66 0f       	add	r22, r22
    3a44:	77 1f       	adc	r23, r23
    3a46:	66 0f       	add	r22, r22
    3a48:	77 1f       	adc	r23, r23
    3a4a:	fd 01       	movw	r30, r26
    3a4c:	e6 0f       	add	r30, r22
    3a4e:	f7 1f       	adc	r31, r23
    3a50:	27 a7       	std	Z+47, r18	; 0x2f
    3a52:	30 ab       	std	Z+48, r19	; 0x30
    3a54:	41 ab       	std	Z+49, r20	; 0x31
    3a56:	52 ab       	std	Z+50, r21	; 0x32
    3a58:	01 e0       	ldi	r16, 0x01	; 1
    3a5a:	03 c0       	rjmp	.+6      	; 0x3a62 <xTaskGenericNotify+0xfc>
    3a5c:	01 e0       	ldi	r16, 0x01	; 1
    3a5e:	01 c0       	rjmp	.+2      	; 0x3a62 <xTaskGenericNotify+0xfc>
    3a60:	00 e0       	ldi	r16, 0x00	; 0
    3a62:	81 30       	cpi	r24, 0x01	; 1
    3a64:	09 f0       	breq	.+2      	; 0x3a68 <xTaskGenericNotify+0x102>
    3a66:	69 c0       	rjmp	.+210    	; 0x3b3a <xTaskGenericNotify+0x1d4>
    3a68:	1c 96       	adiw	r26, 0x0c	; 12
    3a6a:	ed 91       	ld	r30, X+
    3a6c:	fc 91       	ld	r31, X
    3a6e:	1d 97       	sbiw	r26, 0x0d	; 13
    3a70:	16 96       	adiw	r26, 0x06	; 6
    3a72:	cd 91       	ld	r28, X+
    3a74:	dc 91       	ld	r29, X
    3a76:	17 97       	sbiw	r26, 0x07	; 7
    3a78:	18 96       	adiw	r26, 0x08	; 8
    3a7a:	8d 91       	ld	r24, X+
    3a7c:	9c 91       	ld	r25, X
    3a7e:	19 97       	sbiw	r26, 0x09	; 9
    3a80:	9f 83       	std	Y+7, r25	; 0x07
    3a82:	8e 83       	std	Y+6, r24	; 0x06
    3a84:	18 96       	adiw	r26, 0x08	; 8
    3a86:	cd 91       	ld	r28, X+
    3a88:	dc 91       	ld	r29, X
    3a8a:	19 97       	sbiw	r26, 0x09	; 9
    3a8c:	16 96       	adiw	r26, 0x06	; 6
    3a8e:	8d 91       	ld	r24, X+
    3a90:	9c 91       	ld	r25, X
    3a92:	17 97       	sbiw	r26, 0x07	; 7
    3a94:	9d 83       	std	Y+5, r25	; 0x05
    3a96:	8c 83       	std	Y+4, r24	; 0x04
    3a98:	81 81       	ldd	r24, Z+1	; 0x01
    3a9a:	92 81       	ldd	r25, Z+2	; 0x02
    3a9c:	9d 01       	movw	r18, r26
    3a9e:	2e 5f       	subi	r18, 0xFE	; 254
    3aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa2:	82 17       	cp	r24, r18
    3aa4:	93 07       	cpc	r25, r19
    3aa6:	31 f4       	brne	.+12     	; 0x3ab4 <xTaskGenericNotify+0x14e>
    3aa8:	18 96       	adiw	r26, 0x08	; 8
    3aaa:	8d 91       	ld	r24, X+
    3aac:	9c 91       	ld	r25, X
    3aae:	19 97       	sbiw	r26, 0x09	; 9
    3ab0:	92 83       	std	Z+2, r25	; 0x02
    3ab2:	81 83       	std	Z+1, r24	; 0x01
    3ab4:	1d 96       	adiw	r26, 0x0d	; 13
    3ab6:	1c 92       	st	X, r1
    3ab8:	1e 92       	st	-X, r1
    3aba:	1c 97       	sbiw	r26, 0x0c	; 12
    3abc:	80 81       	ld	r24, Z
    3abe:	81 50       	subi	r24, 0x01	; 1
    3ac0:	80 83       	st	Z, r24
    3ac2:	5a 96       	adiw	r26, 0x1a	; 26
    3ac4:	ec 91       	ld	r30, X
    3ac6:	5a 97       	sbiw	r26, 0x1a	; 26
    3ac8:	80 91 57 13 	lds	r24, 0x1357	; 0x801357 <uxTopReadyPriority>
    3acc:	8e 17       	cp	r24, r30
    3ace:	10 f4       	brcc	.+4      	; 0x3ad4 <xTaskGenericNotify+0x16e>
    3ad0:	e0 93 57 13 	sts	0x1357, r30	; 0x801357 <uxTopReadyPriority>
    3ad4:	8b e0       	ldi	r24, 0x0B	; 11
    3ad6:	8e 9f       	mul	r24, r30
    3ad8:	f0 01       	movw	r30, r0
    3ada:	11 24       	eor	r1, r1
    3adc:	e7 56       	subi	r30, 0x67	; 103
    3ade:	fc 4e       	sbci	r31, 0xEC	; 236
    3ae0:	01 80       	ldd	r0, Z+1	; 0x01
    3ae2:	f2 81       	ldd	r31, Z+2	; 0x02
    3ae4:	e0 2d       	mov	r30, r0
    3ae6:	17 96       	adiw	r26, 0x07	; 7
    3ae8:	fc 93       	st	X, r31
    3aea:	ee 93       	st	-X, r30
    3aec:	16 97       	sbiw	r26, 0x06	; 6
    3aee:	46 81       	ldd	r20, Z+6	; 0x06
    3af0:	57 81       	ldd	r21, Z+7	; 0x07
    3af2:	19 96       	adiw	r26, 0x09	; 9
    3af4:	5c 93       	st	X, r21
    3af6:	4e 93       	st	-X, r20
    3af8:	18 97       	sbiw	r26, 0x08	; 8
    3afa:	c6 81       	ldd	r28, Z+6	; 0x06
    3afc:	d7 81       	ldd	r29, Z+7	; 0x07
    3afe:	3d 83       	std	Y+5, r19	; 0x05
    3b00:	2c 83       	std	Y+4, r18	; 0x04
    3b02:	37 83       	std	Z+7, r19	; 0x07
    3b04:	26 83       	std	Z+6, r18	; 0x06
    3b06:	5a 96       	adiw	r26, 0x1a	; 26
    3b08:	ec 91       	ld	r30, X
    3b0a:	5a 97       	sbiw	r26, 0x1a	; 26
    3b0c:	8e 9f       	mul	r24, r30
    3b0e:	f0 01       	movw	r30, r0
    3b10:	11 24       	eor	r1, r1
    3b12:	e7 56       	subi	r30, 0x67	; 103
    3b14:	fc 4e       	sbci	r31, 0xEC	; 236
    3b16:	1d 96       	adiw	r26, 0x0d	; 13
    3b18:	fc 93       	st	X, r31
    3b1a:	ee 93       	st	-X, r30
    3b1c:	1c 97       	sbiw	r26, 0x0c	; 12
    3b1e:	80 81       	ld	r24, Z
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	80 83       	st	Z, r24
    3b24:	5a 96       	adiw	r26, 0x1a	; 26
    3b26:	9c 91       	ld	r25, X
    3b28:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    3b2c:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3b30:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b32:	89 17       	cp	r24, r25
    3b34:	10 f4       	brcc	.+4      	; 0x3b3a <xTaskGenericNotify+0x1d4>
    3b36:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	80 2f       	mov	r24, r16
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	0f 91       	pop	r16
    3b46:	ff 90       	pop	r15
    3b48:	ef 90       	pop	r14
    3b4a:	bf 90       	pop	r11
    3b4c:	af 90       	pop	r10
    3b4e:	9f 90       	pop	r9
    3b50:	8f 90       	pop	r8
    3b52:	08 95       	ret

00003b54 <xTaskGenericNotifyFromISR>:
    3b54:	8f 92       	push	r8
    3b56:	9f 92       	push	r9
    3b58:	af 92       	push	r10
    3b5a:	bf 92       	push	r11
    3b5c:	cf 92       	push	r12
    3b5e:	df 92       	push	r13
    3b60:	ef 92       	push	r14
    3b62:	ff 92       	push	r15
    3b64:	0f 93       	push	r16
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	e1 14       	cp	r14, r1
    3b6e:	f1 04       	cpc	r15, r1
    3b70:	89 f0       	breq	.+34     	; 0x3b94 <xTaskGenericNotifyFromISR+0x40>
    3b72:	e6 2f       	mov	r30, r22
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	ee 0f       	add	r30, r30
    3b78:	ff 1f       	adc	r31, r31
    3b7a:	ee 0f       	add	r30, r30
    3b7c:	ff 1f       	adc	r31, r31
    3b7e:	e8 0f       	add	r30, r24
    3b80:	f9 1f       	adc	r31, r25
    3b82:	87 a4       	ldd	r8, Z+47	; 0x2f
    3b84:	90 a8       	ldd	r9, Z+48	; 0x30
    3b86:	a1 a8       	ldd	r10, Z+49	; 0x31
    3b88:	b2 a8       	ldd	r11, Z+50	; 0x32
    3b8a:	f7 01       	movw	r30, r14
    3b8c:	80 82       	st	Z, r8
    3b8e:	91 82       	std	Z+1, r9	; 0x01
    3b90:	a2 82       	std	Z+2, r10	; 0x02
    3b92:	b3 82       	std	Z+3, r11	; 0x03
    3b94:	70 e0       	ldi	r23, 0x00	; 0
    3b96:	fd 01       	movw	r30, r26
    3b98:	e6 0f       	add	r30, r22
    3b9a:	f7 1f       	adc	r31, r23
    3b9c:	93 a9       	ldd	r25, Z+51	; 0x33
    3b9e:	82 e0       	ldi	r24, 0x02	; 2
    3ba0:	83 ab       	std	Z+51, r24	; 0x33
    3ba2:	02 30       	cpi	r16, 0x02	; 2
    3ba4:	01 f1       	breq	.+64     	; 0x3be6 <xTaskGenericNotifyFromISR+0x92>
    3ba6:	18 f4       	brcc	.+6      	; 0x3bae <xTaskGenericNotifyFromISR+0x5a>
    3ba8:	01 30       	cpi	r16, 0x01	; 1
    3baa:	31 f0       	breq	.+12     	; 0x3bb8 <xTaskGenericNotifyFromISR+0x64>
    3bac:	4d c0       	rjmp	.+154    	; 0x3c48 <xTaskGenericNotifyFromISR+0xf4>
    3bae:	03 30       	cpi	r16, 0x03	; 3
    3bb0:	79 f1       	breq	.+94     	; 0x3c10 <xTaskGenericNotifyFromISR+0xbc>
    3bb2:	04 30       	cpi	r16, 0x04	; 4
    3bb4:	d1 f1       	breq	.+116    	; 0x3c2a <xTaskGenericNotifyFromISR+0xd6>
    3bb6:	48 c0       	rjmp	.+144    	; 0x3c48 <xTaskGenericNotifyFromISR+0xf4>
    3bb8:	66 0f       	add	r22, r22
    3bba:	77 1f       	adc	r23, r23
    3bbc:	66 0f       	add	r22, r22
    3bbe:	77 1f       	adc	r23, r23
    3bc0:	fd 01       	movw	r30, r26
    3bc2:	e6 0f       	add	r30, r22
    3bc4:	f7 1f       	adc	r31, r23
    3bc6:	87 a4       	ldd	r8, Z+47	; 0x2f
    3bc8:	90 a8       	ldd	r9, Z+48	; 0x30
    3bca:	a1 a8       	ldd	r10, Z+49	; 0x31
    3bcc:	b2 a8       	ldd	r11, Z+50	; 0x32
    3bce:	ba 01       	movw	r22, r20
    3bd0:	a9 01       	movw	r20, r18
    3bd2:	48 29       	or	r20, r8
    3bd4:	59 29       	or	r21, r9
    3bd6:	6a 29       	or	r22, r10
    3bd8:	7b 29       	or	r23, r11
    3bda:	47 a7       	std	Z+47, r20	; 0x2f
    3bdc:	50 ab       	std	Z+48, r21	; 0x30
    3bde:	61 ab       	std	Z+49, r22	; 0x31
    3be0:	72 ab       	std	Z+50, r23	; 0x32
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	34 c0       	rjmp	.+104    	; 0x3c4e <xTaskGenericNotifyFromISR+0xfa>
    3be6:	66 0f       	add	r22, r22
    3be8:	77 1f       	adc	r23, r23
    3bea:	66 0f       	add	r22, r22
    3bec:	77 1f       	adc	r23, r23
    3bee:	fd 01       	movw	r30, r26
    3bf0:	e6 0f       	add	r30, r22
    3bf2:	f7 1f       	adc	r31, r23
    3bf4:	47 a5       	ldd	r20, Z+47	; 0x2f
    3bf6:	50 a9       	ldd	r21, Z+48	; 0x30
    3bf8:	61 a9       	ldd	r22, Z+49	; 0x31
    3bfa:	72 a9       	ldd	r23, Z+50	; 0x32
    3bfc:	4f 5f       	subi	r20, 0xFF	; 255
    3bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    3c00:	6f 4f       	sbci	r22, 0xFF	; 255
    3c02:	7f 4f       	sbci	r23, 0xFF	; 255
    3c04:	47 a7       	std	Z+47, r20	; 0x2f
    3c06:	50 ab       	std	Z+48, r21	; 0x30
    3c08:	61 ab       	std	Z+49, r22	; 0x31
    3c0a:	72 ab       	std	Z+50, r23	; 0x32
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	1f c0       	rjmp	.+62     	; 0x3c4e <xTaskGenericNotifyFromISR+0xfa>
    3c10:	66 0f       	add	r22, r22
    3c12:	77 1f       	adc	r23, r23
    3c14:	66 0f       	add	r22, r22
    3c16:	77 1f       	adc	r23, r23
    3c18:	fd 01       	movw	r30, r26
    3c1a:	e6 0f       	add	r30, r22
    3c1c:	f7 1f       	adc	r31, r23
    3c1e:	27 a7       	std	Z+47, r18	; 0x2f
    3c20:	30 ab       	std	Z+48, r19	; 0x30
    3c22:	41 ab       	std	Z+49, r20	; 0x31
    3c24:	52 ab       	std	Z+50, r21	; 0x32
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	12 c0       	rjmp	.+36     	; 0x3c4e <xTaskGenericNotifyFromISR+0xfa>
    3c2a:	92 30       	cpi	r25, 0x02	; 2
    3c2c:	79 f0       	breq	.+30     	; 0x3c4c <xTaskGenericNotifyFromISR+0xf8>
    3c2e:	66 0f       	add	r22, r22
    3c30:	77 1f       	adc	r23, r23
    3c32:	66 0f       	add	r22, r22
    3c34:	77 1f       	adc	r23, r23
    3c36:	fd 01       	movw	r30, r26
    3c38:	e6 0f       	add	r30, r22
    3c3a:	f7 1f       	adc	r31, r23
    3c3c:	27 a7       	std	Z+47, r18	; 0x2f
    3c3e:	30 ab       	std	Z+48, r19	; 0x30
    3c40:	41 ab       	std	Z+49, r20	; 0x31
    3c42:	52 ab       	std	Z+50, r21	; 0x32
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	03 c0       	rjmp	.+6      	; 0x3c4e <xTaskGenericNotifyFromISR+0xfa>
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <xTaskGenericNotifyFromISR+0xfa>
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	91 30       	cpi	r25, 0x01	; 1
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <xTaskGenericNotifyFromISR+0x100>
    3c52:	96 c0       	rjmp	.+300    	; 0x3d80 <xTaskGenericNotifyFromISR+0x22c>
    3c54:	90 91 48 13 	lds	r25, 0x1348	; 0x801348 <uxSchedulerSuspended>
    3c58:	91 11       	cpse	r25, r1
    3c5a:	5f c0       	rjmp	.+190    	; 0x3d1a <xTaskGenericNotifyFromISR+0x1c6>
    3c5c:	1c 96       	adiw	r26, 0x0c	; 12
    3c5e:	ed 91       	ld	r30, X+
    3c60:	fc 91       	ld	r31, X
    3c62:	1d 97       	sbiw	r26, 0x0d	; 13
    3c64:	16 96       	adiw	r26, 0x06	; 6
    3c66:	cd 91       	ld	r28, X+
    3c68:	dc 91       	ld	r29, X
    3c6a:	17 97       	sbiw	r26, 0x07	; 7
    3c6c:	18 96       	adiw	r26, 0x08	; 8
    3c6e:	2d 91       	ld	r18, X+
    3c70:	3c 91       	ld	r19, X
    3c72:	19 97       	sbiw	r26, 0x09	; 9
    3c74:	3f 83       	std	Y+7, r19	; 0x07
    3c76:	2e 83       	std	Y+6, r18	; 0x06
    3c78:	18 96       	adiw	r26, 0x08	; 8
    3c7a:	cd 91       	ld	r28, X+
    3c7c:	dc 91       	ld	r29, X
    3c7e:	19 97       	sbiw	r26, 0x09	; 9
    3c80:	16 96       	adiw	r26, 0x06	; 6
    3c82:	2d 91       	ld	r18, X+
    3c84:	3c 91       	ld	r19, X
    3c86:	17 97       	sbiw	r26, 0x07	; 7
    3c88:	3d 83       	std	Y+5, r19	; 0x05
    3c8a:	2c 83       	std	Y+4, r18	; 0x04
    3c8c:	41 81       	ldd	r20, Z+1	; 0x01
    3c8e:	52 81       	ldd	r21, Z+2	; 0x02
    3c90:	9d 01       	movw	r18, r26
    3c92:	2e 5f       	subi	r18, 0xFE	; 254
    3c94:	3f 4f       	sbci	r19, 0xFF	; 255
    3c96:	42 17       	cp	r20, r18
    3c98:	53 07       	cpc	r21, r19
    3c9a:	31 f4       	brne	.+12     	; 0x3ca8 <xTaskGenericNotifyFromISR+0x154>
    3c9c:	18 96       	adiw	r26, 0x08	; 8
    3c9e:	4d 91       	ld	r20, X+
    3ca0:	5c 91       	ld	r21, X
    3ca2:	19 97       	sbiw	r26, 0x09	; 9
    3ca4:	52 83       	std	Z+2, r21	; 0x02
    3ca6:	41 83       	std	Z+1, r20	; 0x01
    3ca8:	1d 96       	adiw	r26, 0x0d	; 13
    3caa:	1c 92       	st	X, r1
    3cac:	1e 92       	st	-X, r1
    3cae:	1c 97       	sbiw	r26, 0x0c	; 12
    3cb0:	90 81       	ld	r25, Z
    3cb2:	91 50       	subi	r25, 0x01	; 1
    3cb4:	90 83       	st	Z, r25
    3cb6:	5a 96       	adiw	r26, 0x1a	; 26
    3cb8:	ec 91       	ld	r30, X
    3cba:	5a 97       	sbiw	r26, 0x1a	; 26
    3cbc:	90 91 57 13 	lds	r25, 0x1357	; 0x801357 <uxTopReadyPriority>
    3cc0:	9e 17       	cp	r25, r30
    3cc2:	10 f4       	brcc	.+4      	; 0x3cc8 <xTaskGenericNotifyFromISR+0x174>
    3cc4:	e0 93 57 13 	sts	0x1357, r30	; 0x801357 <uxTopReadyPriority>
    3cc8:	9b e0       	ldi	r25, 0x0B	; 11
    3cca:	9e 9f       	mul	r25, r30
    3ccc:	f0 01       	movw	r30, r0
    3cce:	11 24       	eor	r1, r1
    3cd0:	e7 56       	subi	r30, 0x67	; 103
    3cd2:	fc 4e       	sbci	r31, 0xEC	; 236
    3cd4:	01 80       	ldd	r0, Z+1	; 0x01
    3cd6:	f2 81       	ldd	r31, Z+2	; 0x02
    3cd8:	e0 2d       	mov	r30, r0
    3cda:	17 96       	adiw	r26, 0x07	; 7
    3cdc:	fc 93       	st	X, r31
    3cde:	ee 93       	st	-X, r30
    3ce0:	16 97       	sbiw	r26, 0x06	; 6
    3ce2:	46 81       	ldd	r20, Z+6	; 0x06
    3ce4:	57 81       	ldd	r21, Z+7	; 0x07
    3ce6:	19 96       	adiw	r26, 0x09	; 9
    3ce8:	5c 93       	st	X, r21
    3cea:	4e 93       	st	-X, r20
    3cec:	18 97       	sbiw	r26, 0x08	; 8
    3cee:	c6 81       	ldd	r28, Z+6	; 0x06
    3cf0:	d7 81       	ldd	r29, Z+7	; 0x07
    3cf2:	3d 83       	std	Y+5, r19	; 0x05
    3cf4:	2c 83       	std	Y+4, r18	; 0x04
    3cf6:	37 83       	std	Z+7, r19	; 0x07
    3cf8:	26 83       	std	Z+6, r18	; 0x06
    3cfa:	5a 96       	adiw	r26, 0x1a	; 26
    3cfc:	ec 91       	ld	r30, X
    3cfe:	5a 97       	sbiw	r26, 0x1a	; 26
    3d00:	9e 9f       	mul	r25, r30
    3d02:	f0 01       	movw	r30, r0
    3d04:	11 24       	eor	r1, r1
    3d06:	e7 56       	subi	r30, 0x67	; 103
    3d08:	fc 4e       	sbci	r31, 0xEC	; 236
    3d0a:	1d 96       	adiw	r26, 0x0d	; 13
    3d0c:	fc 93       	st	X, r31
    3d0e:	ee 93       	st	-X, r30
    3d10:	1c 97       	sbiw	r26, 0x0c	; 12
    3d12:	90 81       	ld	r25, Z
    3d14:	9f 5f       	subi	r25, 0xFF	; 255
    3d16:	90 83       	st	Z, r25
    3d18:	21 c0       	rjmp	.+66     	; 0x3d5c <xTaskGenericNotifyFromISR+0x208>
    3d1a:	64 e7       	ldi	r22, 0x74	; 116
    3d1c:	73 e1       	ldi	r23, 0x13	; 19
    3d1e:	fb 01       	movw	r30, r22
    3d20:	c1 81       	ldd	r28, Z+1	; 0x01
    3d22:	d2 81       	ldd	r29, Z+2	; 0x02
    3d24:	53 96       	adiw	r26, 0x13	; 19
    3d26:	dc 93       	st	X, r29
    3d28:	ce 93       	st	-X, r28
    3d2a:	52 97       	sbiw	r26, 0x12	; 18
    3d2c:	2e 81       	ldd	r18, Y+6	; 0x06
    3d2e:	3f 81       	ldd	r19, Y+7	; 0x07
    3d30:	55 96       	adiw	r26, 0x15	; 21
    3d32:	3c 93       	st	X, r19
    3d34:	2e 93       	st	-X, r18
    3d36:	54 97       	sbiw	r26, 0x14	; 20
    3d38:	4e 81       	ldd	r20, Y+6	; 0x06
    3d3a:	5f 81       	ldd	r21, Y+7	; 0x07
    3d3c:	9d 01       	movw	r18, r26
    3d3e:	22 5f       	subi	r18, 0xF2	; 242
    3d40:	3f 4f       	sbci	r19, 0xFF	; 255
    3d42:	fa 01       	movw	r30, r20
    3d44:	35 83       	std	Z+5, r19	; 0x05
    3d46:	24 83       	std	Z+4, r18	; 0x04
    3d48:	3f 83       	std	Y+7, r19	; 0x07
    3d4a:	2e 83       	std	Y+6, r18	; 0x06
    3d4c:	59 96       	adiw	r26, 0x19	; 25
    3d4e:	7c 93       	st	X, r23
    3d50:	6e 93       	st	-X, r22
    3d52:	58 97       	sbiw	r26, 0x18	; 24
    3d54:	fb 01       	movw	r30, r22
    3d56:	90 81       	ld	r25, Z
    3d58:	9f 5f       	subi	r25, 0xFF	; 255
    3d5a:	90 83       	st	Z, r25
    3d5c:	5a 96       	adiw	r26, 0x1a	; 26
    3d5e:	2c 91       	ld	r18, X
    3d60:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <pxCurrentTCB>
    3d64:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <pxCurrentTCB+0x1>
    3d68:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d6a:	92 17       	cp	r25, r18
    3d6c:	48 f4       	brcc	.+18     	; 0x3d80 <xTaskGenericNotifyFromISR+0x22c>
    3d6e:	c1 14       	cp	r12, r1
    3d70:	d1 04       	cpc	r13, r1
    3d72:	19 f0       	breq	.+6      	; 0x3d7a <xTaskGenericNotifyFromISR+0x226>
    3d74:	91 e0       	ldi	r25, 0x01	; 1
    3d76:	f6 01       	movw	r30, r12
    3d78:	90 83       	st	Z, r25
    3d7a:	91 e0       	ldi	r25, 0x01	; 1
    3d7c:	90 93 51 13 	sts	0x1351, r25	; 0x801351 <xYieldPending>
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	0f 91       	pop	r16
    3d86:	ff 90       	pop	r15
    3d88:	ef 90       	pop	r14
    3d8a:	df 90       	pop	r13
    3d8c:	cf 90       	pop	r12
    3d8e:	bf 90       	pop	r11
    3d90:	af 90       	pop	r10
    3d92:	9f 90       	pop	r9
    3d94:	8f 90       	pop	r8
    3d96:	08 95       	ret

00003d98 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3d98:	00 97       	sbiw	r24, 0x00	; 0
    3d9a:	21 f4       	brne	.+8      	; 0x3da4 <xTaskGenericNotifyStateClear+0xc>
    3d9c:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxCurrentTCB>
    3da0:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3daa:	70 e0       	ldi	r23, 0x00	; 0
    3dac:	fc 01       	movw	r30, r24
    3dae:	e6 0f       	add	r30, r22
    3db0:	f7 1f       	adc	r31, r23
    3db2:	23 a9       	ldd	r18, Z+51	; 0x33
    3db4:	22 30       	cpi	r18, 0x02	; 2
    3db6:	31 f4       	brne	.+12     	; 0x3dc4 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3db8:	fc 01       	movw	r30, r24
    3dba:	e6 0f       	add	r30, r22
    3dbc:	f7 1f       	adc	r31, r23
    3dbe:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	01 c0       	rjmp	.+2      	; 0x3dc6 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3dc6:	0f 90       	pop	r0
    3dc8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3dca:	08 95       	ret

00003dcc <prvGetNextExpireTime>:
    3dcc:	dc 01       	movw	r26, r24
    3dce:	e0 91 13 14 	lds	r30, 0x1413	; 0x801413 <pxCurrentTimerList>
    3dd2:	f0 91 14 14 	lds	r31, 0x1414	; 0x801414 <pxCurrentTimerList+0x1>
    3dd6:	80 81       	ld	r24, Z
    3dd8:	91 e0       	ldi	r25, 0x01	; 1
    3dda:	81 11       	cpse	r24, r1
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	9c 93       	st	X, r25
    3de0:	91 11       	cpse	r25, r1
    3de2:	08 c0       	rjmp	.+16     	; 0x3df4 <prvGetNextExpireTime+0x28>
    3de4:	07 80       	ldd	r0, Z+7	; 0x07
    3de6:	f0 85       	ldd	r31, Z+8	; 0x08
    3de8:	e0 2d       	mov	r30, r0
    3dea:	60 81       	ld	r22, Z
    3dec:	71 81       	ldd	r23, Z+1	; 0x01
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	08 95       	ret
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	cb 01       	movw	r24, r22
    3dfa:	08 95       	ret

00003dfc <prvInsertTimerInActiveList>:
    3dfc:	cf 92       	push	r12
    3dfe:	df 92       	push	r13
    3e00:	ef 92       	push	r14
    3e02:	ff 92       	push	r15
    3e04:	0f 93       	push	r16
    3e06:	1f 93       	push	r17
    3e08:	fc 01       	movw	r30, r24
    3e0a:	42 83       	std	Z+2, r20	; 0x02
    3e0c:	53 83       	std	Z+3, r21	; 0x03
    3e0e:	64 83       	std	Z+4, r22	; 0x04
    3e10:	75 83       	std	Z+5, r23	; 0x05
    3e12:	93 87       	std	Z+11, r25	; 0x0b
    3e14:	82 87       	std	Z+10, r24	; 0x0a
    3e16:	04 17       	cp	r16, r20
    3e18:	15 07       	cpc	r17, r21
    3e1a:	26 07       	cpc	r18, r22
    3e1c:	37 07       	cpc	r19, r23
    3e1e:	c0 f0       	brcs	.+48     	; 0x3e50 <prvInsertTimerInActiveList+0x54>
    3e20:	0c 19       	sub	r16, r12
    3e22:	1d 09       	sbc	r17, r13
    3e24:	2e 09       	sbc	r18, r14
    3e26:	3f 09       	sbc	r19, r15
    3e28:	86 85       	ldd	r24, Z+14	; 0x0e
    3e2a:	97 85       	ldd	r25, Z+15	; 0x0f
    3e2c:	a0 89       	ldd	r26, Z+16	; 0x10
    3e2e:	b1 89       	ldd	r27, Z+17	; 0x11
    3e30:	08 17       	cp	r16, r24
    3e32:	19 07       	cpc	r17, r25
    3e34:	2a 07       	cpc	r18, r26
    3e36:	3b 07       	cpc	r19, r27
    3e38:	00 f5       	brcc	.+64     	; 0x3e7a <prvInsertTimerInActiveList+0x7e>
    3e3a:	bf 01       	movw	r22, r30
    3e3c:	6e 5f       	subi	r22, 0xFE	; 254
    3e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e40:	80 91 11 14 	lds	r24, 0x1411	; 0x801411 <pxOverflowTimerList>
    3e44:	90 91 12 14 	lds	r25, 0x1412	; 0x801412 <pxOverflowTimerList+0x1>
    3e48:	0e 94 10 0a 	call	0x1420	; 0x1420 <vListInsert>
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	18 c0       	rjmp	.+48     	; 0x3e80 <prvInsertTimerInActiveList+0x84>
    3e50:	0c 15       	cp	r16, r12
    3e52:	1d 05       	cpc	r17, r13
    3e54:	2e 05       	cpc	r18, r14
    3e56:	3f 05       	cpc	r19, r15
    3e58:	28 f4       	brcc	.+10     	; 0x3e64 <prvInsertTimerInActiveList+0x68>
    3e5a:	4c 15       	cp	r20, r12
    3e5c:	5d 05       	cpc	r21, r13
    3e5e:	6e 05       	cpc	r22, r14
    3e60:	7f 05       	cpc	r23, r15
    3e62:	68 f4       	brcc	.+26     	; 0x3e7e <prvInsertTimerInActiveList+0x82>
    3e64:	bf 01       	movw	r22, r30
    3e66:	6e 5f       	subi	r22, 0xFE	; 254
    3e68:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6a:	80 91 13 14 	lds	r24, 0x1413	; 0x801413 <pxCurrentTimerList>
    3e6e:	90 91 14 14 	lds	r25, 0x1414	; 0x801414 <pxCurrentTimerList+0x1>
    3e72:	0e 94 10 0a 	call	0x1420	; 0x1420 <vListInsert>
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	03 c0       	rjmp	.+6      	; 0x3e80 <prvInsertTimerInActiveList+0x84>
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	01 c0       	rjmp	.+2      	; 0x3e80 <prvInsertTimerInActiveList+0x84>
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	1f 91       	pop	r17
    3e82:	0f 91       	pop	r16
    3e84:	ff 90       	pop	r15
    3e86:	ef 90       	pop	r14
    3e88:	df 90       	pop	r13
    3e8a:	cf 90       	pop	r12
    3e8c:	08 95       	ret

00003e8e <prvCheckForValidListAndQueue>:
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	0f 92       	push	r0
    3e94:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <xTimerQueue>
    3e98:	90 91 10 14 	lds	r25, 0x1410	; 0x801410 <xTimerQueue+0x1>
    3e9c:	89 2b       	or	r24, r25
    3e9e:	e9 f4       	brne	.+58     	; 0x3eda <prvCheckForValidListAndQueue+0x4c>
    3ea0:	80 e2       	ldi	r24, 0x20	; 32
    3ea2:	94 e1       	ldi	r25, 0x14	; 20
    3ea4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    3ea8:	85 e1       	ldi	r24, 0x15	; 21
    3eaa:	94 e1       	ldi	r25, 0x14	; 20
    3eac:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    3eb0:	80 e2       	ldi	r24, 0x20	; 32
    3eb2:	94 e1       	ldi	r25, 0x14	; 20
    3eb4:	90 93 14 14 	sts	0x1414, r25	; 0x801414 <pxCurrentTimerList+0x1>
    3eb8:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <pxCurrentTimerList>
    3ebc:	85 e1       	ldi	r24, 0x15	; 21
    3ebe:	94 e1       	ldi	r25, 0x14	; 20
    3ec0:	90 93 12 14 	sts	0x1412, r25	; 0x801412 <pxOverflowTimerList+0x1>
    3ec4:	80 93 11 14 	sts	0x1411, r24	; 0x801411 <pxOverflowTimerList>
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	67 e0       	ldi	r22, 0x07	; 7
    3ecc:	8a e0       	ldi	r24, 0x0A	; 10
    3ece:	0e 94 be 0c 	call	0x197c	; 0x197c <xQueueGenericCreate>
    3ed2:	90 93 10 14 	sts	0x1410, r25	; 0x801410 <xTimerQueue+0x1>
    3ed6:	80 93 0f 14 	sts	0x140F, r24	; 0x80140f <xTimerQueue>
    3eda:	0f 90       	pop	r0
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	08 95       	ret

00003ee0 <xTimerCreateTimerTask>:
    3ee0:	ef 92       	push	r14
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	d3 df       	rcall	.-90     	; 0x3e8e <prvCheckForValidListAndQueue>
    3ee8:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <xTimerQueue>
    3eec:	90 91 10 14 	lds	r25, 0x1410	; 0x801410 <xTimerQueue+0x1>
    3ef0:	89 2b       	or	r24, r25
    3ef2:	91 f0       	breq	.+36     	; 0x3f18 <xTimerCreateTimerTask+0x38>
    3ef4:	0f 2e       	mov	r0, r31
    3ef6:	fd e0       	ldi	r31, 0x0D	; 13
    3ef8:	ef 2e       	mov	r14, r31
    3efa:	f4 e1       	ldi	r31, 0x14	; 20
    3efc:	ff 2e       	mov	r15, r31
    3efe:	f0 2d       	mov	r31, r0
    3f00:	03 e0       	ldi	r16, 0x03	; 3
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 ec       	ldi	r20, 0xC0	; 192
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	6e e6       	ldi	r22, 0x6E	; 110
    3f0c:	74 e0       	ldi	r23, 0x04	; 4
    3f0e:	89 e5       	ldi	r24, 0x59	; 89
    3f10:	91 e0       	ldi	r25, 0x01	; 1
    3f12:	0e 94 71 14 	call	0x28e2	; 0x28e2 <xTaskCreate>
    3f16:	01 c0       	rjmp	.+2      	; 0x3f1a <xTimerCreateTimerTask+0x3a>
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	0f 91       	pop	r16
    3f1c:	ff 90       	pop	r15
    3f1e:	ef 90       	pop	r14
    3f20:	08 95       	ret

00003f22 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3f22:	8f 92       	push	r8
    3f24:	9f 92       	push	r9
    3f26:	af 92       	push	r10
    3f28:	bf 92       	push	r11
    3f2a:	cf 92       	push	r12
    3f2c:	df 92       	push	r13
    3f2e:	ef 92       	push	r14
    3f30:	ff 92       	push	r15
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	27 97       	sbiw	r28, 0x07	; 7
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	f8 94       	cli
    3f44:	de bf       	out	0x3e, r29	; 62
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3f4a:	e0 91 0f 14 	lds	r30, 0x140F	; 0x80140f <xTimerQueue>
    3f4e:	f0 91 10 14 	lds	r31, 0x1410	; 0x801410 <xTimerQueue+0x1>
    3f52:	30 97       	sbiw	r30, 0x00	; 0
    3f54:	81 f1       	breq	.+96     	; 0x3fb6 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3f56:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3f58:	2a 83       	std	Y+2, r18	; 0x02
    3f5a:	3b 83       	std	Y+3, r19	; 0x03
    3f5c:	4c 83       	std	Y+4, r20	; 0x04
    3f5e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3f60:	9f 83       	std	Y+7, r25	; 0x07
    3f62:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3f64:	66 30       	cpi	r22, 0x06	; 6
    3f66:	f4 f4       	brge	.+60     	; 0x3fa4 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3f68:	c3 da       	rcall	.-2682   	; 0x34f0 <xTaskGetSchedulerState>
    3f6a:	82 30       	cpi	r24, 0x02	; 2
    3f6c:	69 f4       	brne	.+26     	; 0x3f88 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3f6e:	00 e0       	ldi	r16, 0x00	; 0
    3f70:	a7 01       	movw	r20, r14
    3f72:	96 01       	movw	r18, r12
    3f74:	be 01       	movw	r22, r28
    3f76:	6f 5f       	subi	r22, 0xFF	; 255
    3f78:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7a:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <xTimerQueue>
    3f7e:	90 91 10 14 	lds	r25, 0x1410	; 0x801410 <xTimerQueue+0x1>
    3f82:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xQueueGenericSend>
    3f86:	18 c0       	rjmp	.+48     	; 0x3fb8 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3f88:	00 e0       	ldi	r16, 0x00	; 0
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	a9 01       	movw	r20, r18
    3f90:	be 01       	movw	r22, r28
    3f92:	6f 5f       	subi	r22, 0xFF	; 255
    3f94:	7f 4f       	sbci	r23, 0xFF	; 255
    3f96:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <xTimerQueue>
    3f9a:	90 91 10 14 	lds	r25, 0x1410	; 0x801410 <xTimerQueue+0x1>
    3f9e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xQueueGenericSend>
    3fa2:	0a c0       	rjmp	.+20     	; 0x3fb8 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	a8 01       	movw	r20, r16
    3fa8:	be 01       	movw	r22, r28
    3faa:	6f 5f       	subi	r22, 0xFF	; 255
    3fac:	7f 4f       	sbci	r23, 0xFF	; 255
    3fae:	cf 01       	movw	r24, r30
    3fb0:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <xQueueGenericSendFromISR>
    3fb4:	01 c0       	rjmp	.+2      	; 0x3fb8 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3fb8:	27 96       	adiw	r28, 0x07	; 7
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	df 90       	pop	r13
    3fd2:	cf 90       	pop	r12
    3fd4:	bf 90       	pop	r11
    3fd6:	af 90       	pop	r10
    3fd8:	9f 90       	pop	r9
    3fda:	8f 90       	pop	r8
    3fdc:	08 95       	ret

00003fde <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3fde:	8f 92       	push	r8
    3fe0:	9f 92       	push	r9
    3fe2:	af 92       	push	r10
    3fe4:	bf 92       	push	r11
    3fe6:	cf 92       	push	r12
    3fe8:	df 92       	push	r13
    3fea:	ef 92       	push	r14
    3fec:	ff 92       	push	r15
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ff6:	3b c0       	rjmp	.+118    	; 0x406e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3ff8:	07 80       	ldd	r0, Z+7	; 0x07
    3ffa:	f0 85       	ldd	r31, Z+8	; 0x08
    3ffc:	e0 2d       	mov	r30, r0
    3ffe:	80 80       	ld	r8, Z
    4000:	91 80       	ldd	r9, Z+1	; 0x01
    4002:	a2 80       	ldd	r10, Z+2	; 0x02
    4004:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4006:	c0 85       	ldd	r28, Z+8	; 0x08
    4008:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    400a:	8e 01       	movw	r16, r28
    400c:	0e 5f       	subi	r16, 0xFE	; 254
    400e:	1f 4f       	sbci	r17, 0xFF	; 255
    4010:	c8 01       	movw	r24, r16
    4012:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4016:	ec 89       	ldd	r30, Y+20	; 0x14
    4018:	fd 89       	ldd	r31, Y+21	; 0x15
    401a:	ce 01       	movw	r24, r28
    401c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    401e:	8e 89       	ldd	r24, Y+22	; 0x16
    4020:	82 ff       	sbrs	r24, 2
    4022:	25 c0       	rjmp	.+74     	; 0x406e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4024:	8e 85       	ldd	r24, Y+14	; 0x0e
    4026:	9f 85       	ldd	r25, Y+15	; 0x0f
    4028:	a8 89       	ldd	r26, Y+16	; 0x10
    402a:	b9 89       	ldd	r27, Y+17	; 0x11
    402c:	88 0d       	add	r24, r8
    402e:	99 1d       	adc	r25, r9
    4030:	aa 1d       	adc	r26, r10
    4032:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    4034:	88 16       	cp	r8, r24
    4036:	99 06       	cpc	r9, r25
    4038:	aa 06       	cpc	r10, r26
    403a:	bb 06       	cpc	r11, r27
    403c:	70 f4       	brcc	.+28     	; 0x405a <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    403e:	8a 83       	std	Y+2, r24	; 0x02
    4040:	9b 83       	std	Y+3, r25	; 0x03
    4042:	ac 83       	std	Y+4, r26	; 0x04
    4044:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4046:	db 87       	std	Y+11, r29	; 0x0b
    4048:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    404a:	b8 01       	movw	r22, r16
    404c:	80 91 13 14 	lds	r24, 0x1413	; 0x801413 <pxCurrentTimerList>
    4050:	90 91 14 14 	lds	r25, 0x1414	; 0x801414 <pxCurrentTimerList+0x1>
    4054:	0e 94 10 0a 	call	0x1420	; 0x1420 <vListInsert>
    4058:	0a c0       	rjmp	.+20     	; 0x406e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    405a:	c1 2c       	mov	r12, r1
    405c:	d1 2c       	mov	r13, r1
    405e:	76 01       	movw	r14, r12
    4060:	00 e0       	ldi	r16, 0x00	; 0
    4062:	10 e0       	ldi	r17, 0x00	; 0
    4064:	a5 01       	movw	r20, r10
    4066:	94 01       	movw	r18, r8
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	ce 01       	movw	r24, r28
    406c:	5a df       	rcall	.-332    	; 0x3f22 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    406e:	e0 91 13 14 	lds	r30, 0x1413	; 0x801413 <pxCurrentTimerList>
    4072:	f0 91 14 14 	lds	r31, 0x1414	; 0x801414 <pxCurrentTimerList+0x1>
    4076:	80 81       	ld	r24, Z
    4078:	81 11       	cpse	r24, r1
    407a:	be cf       	rjmp	.-132    	; 0x3ff8 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    407c:	80 91 11 14 	lds	r24, 0x1411	; 0x801411 <pxOverflowTimerList>
    4080:	90 91 12 14 	lds	r25, 0x1412	; 0x801412 <pxOverflowTimerList+0x1>
    4084:	90 93 14 14 	sts	0x1414, r25	; 0x801414 <pxCurrentTimerList+0x1>
    4088:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    408c:	f0 93 12 14 	sts	0x1412, r31	; 0x801412 <pxOverflowTimerList+0x1>
    4090:	e0 93 11 14 	sts	0x1411, r30	; 0x801411 <pxOverflowTimerList>
    }
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	ff 90       	pop	r15
    409e:	ef 90       	pop	r14
    40a0:	df 90       	pop	r13
    40a2:	cf 90       	pop	r12
    40a4:	bf 90       	pop	r11
    40a6:	af 90       	pop	r10
    40a8:	9f 90       	pop	r9
    40aa:	8f 90       	pop	r8
    40ac:	08 95       	ret

000040ae <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    40ae:	cf 92       	push	r12
    40b0:	df 92       	push	r13
    40b2:	ef 92       	push	r14
    40b4:	ff 92       	push	r15
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    40bc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskGetTickCount>
    40c0:	6b 01       	movw	r12, r22
    40c2:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    40c4:	80 91 09 14 	lds	r24, 0x1409	; 0x801409 <xLastTime.2436>
    40c8:	90 91 0a 14 	lds	r25, 0x140A	; 0x80140a <xLastTime.2436+0x1>
    40cc:	a0 91 0b 14 	lds	r26, 0x140B	; 0x80140b <xLastTime.2436+0x2>
    40d0:	b0 91 0c 14 	lds	r27, 0x140C	; 0x80140c <xLastTime.2436+0x3>
    40d4:	c8 16       	cp	r12, r24
    40d6:	d9 06       	cpc	r13, r25
    40d8:	ea 06       	cpc	r14, r26
    40da:	fb 06       	cpc	r15, r27
    40dc:	20 f4       	brcc	.+8      	; 0x40e6 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    40de:	7f df       	rcall	.-258    	; 0x3fde <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	88 83       	st	Y, r24
    40e4:	01 c0       	rjmp	.+2      	; 0x40e8 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    40e6:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    40e8:	c0 92 09 14 	sts	0x1409, r12	; 0x801409 <xLastTime.2436>
    40ec:	d0 92 0a 14 	sts	0x140A, r13	; 0x80140a <xLastTime.2436+0x1>
    40f0:	e0 92 0b 14 	sts	0x140B, r14	; 0x80140b <xLastTime.2436+0x2>
    40f4:	f0 92 0c 14 	sts	0x140C, r15	; 0x80140c <xLastTime.2436+0x3>

        return xTimeNow;
    }
    40f8:	c7 01       	movw	r24, r14
    40fa:	b6 01       	movw	r22, r12
    40fc:	df 91       	pop	r29
    40fe:	cf 91       	pop	r28
    4100:	ff 90       	pop	r15
    4102:	ef 90       	pop	r14
    4104:	df 90       	pop	r13
    4106:	cf 90       	pop	r12
    4108:	08 95       	ret

0000410a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    410a:	4f 92       	push	r4
    410c:	5f 92       	push	r5
    410e:	6f 92       	push	r6
    4110:	7f 92       	push	r7
    4112:	8f 92       	push	r8
    4114:	9f 92       	push	r9
    4116:	af 92       	push	r10
    4118:	bf 92       	push	r11
    411a:	cf 92       	push	r12
    411c:	df 92       	push	r13
    411e:	ef 92       	push	r14
    4120:	ff 92       	push	r15
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	4b 01       	movw	r8, r22
    412c:	5c 01       	movw	r10, r24
    412e:	29 01       	movw	r4, r18
    4130:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4132:	e0 91 13 14 	lds	r30, 0x1413	; 0x801413 <pxCurrentTimerList>
    4136:	f0 91 14 14 	lds	r31, 0x1414	; 0x801414 <pxCurrentTimerList+0x1>
    413a:	07 80       	ldd	r0, Z+7	; 0x07
    413c:	f0 85       	ldd	r31, Z+8	; 0x08
    413e:	e0 2d       	mov	r30, r0
    4140:	c0 85       	ldd	r28, Z+8	; 0x08
    4142:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4144:	ce 01       	movw	r24, r28
    4146:	02 96       	adiw	r24, 0x02	; 2
    4148:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    414c:	8e 89       	ldd	r24, Y+22	; 0x16
    414e:	82 ff       	sbrs	r24, 2
    4150:	1b c0       	rjmp	.+54     	; 0x4188 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    4152:	4e 85       	ldd	r20, Y+14	; 0x0e
    4154:	5f 85       	ldd	r21, Y+15	; 0x0f
    4156:	68 89       	ldd	r22, Y+16	; 0x10
    4158:	79 89       	ldd	r23, Y+17	; 0x11
    415a:	48 0d       	add	r20, r8
    415c:	59 1d       	adc	r21, r9
    415e:	6a 1d       	adc	r22, r10
    4160:	7b 1d       	adc	r23, r11
    4162:	75 01       	movw	r14, r10
    4164:	64 01       	movw	r12, r8
    4166:	93 01       	movw	r18, r6
    4168:	82 01       	movw	r16, r4
    416a:	ce 01       	movw	r24, r28
    416c:	47 de       	rcall	.-882    	; 0x3dfc <prvInsertTimerInActiveList>
    416e:	88 23       	and	r24, r24
    4170:	69 f0       	breq	.+26     	; 0x418c <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4172:	c1 2c       	mov	r12, r1
    4174:	d1 2c       	mov	r13, r1
    4176:	76 01       	movw	r14, r12
    4178:	00 e0       	ldi	r16, 0x00	; 0
    417a:	10 e0       	ldi	r17, 0x00	; 0
    417c:	a5 01       	movw	r20, r10
    417e:	94 01       	movw	r18, r8
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	ce 01       	movw	r24, r28
    4184:	ce de       	rcall	.-612    	; 0x3f22 <xTimerGenericCommand>
    4186:	02 c0       	rjmp	.+4      	; 0x418c <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4188:	8e 7f       	andi	r24, 0xFE	; 254
    418a:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    418c:	ec 89       	ldd	r30, Y+20	; 0x14
    418e:	fd 89       	ldd	r31, Y+21	; 0x15
    4190:	ce 01       	movw	r24, r28
    4192:	19 95       	eicall
    }
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	1f 91       	pop	r17
    419a:	0f 91       	pop	r16
    419c:	ff 90       	pop	r15
    419e:	ef 90       	pop	r14
    41a0:	df 90       	pop	r13
    41a2:	cf 90       	pop	r12
    41a4:	bf 90       	pop	r11
    41a6:	af 90       	pop	r10
    41a8:	9f 90       	pop	r9
    41aa:	8f 90       	pop	r8
    41ac:	7f 90       	pop	r7
    41ae:	6f 90       	pop	r6
    41b0:	5f 90       	pop	r5
    41b2:	4f 90       	pop	r4
    41b4:	08 95       	ret

000041b6 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    41b6:	8f 92       	push	r8
    41b8:	9f 92       	push	r9
    41ba:	af 92       	push	r10
    41bc:	bf 92       	push	r11
    41be:	cf 92       	push	r12
    41c0:	df 92       	push	r13
    41c2:	ef 92       	push	r14
    41c4:	ff 92       	push	r15
    41c6:	1f 93       	push	r17
    41c8:	cf 93       	push	r28
    41ca:	df 93       	push	r29
    41cc:	1f 92       	push	r1
    41ce:	cd b7       	in	r28, 0x3d	; 61
    41d0:	de b7       	in	r29, 0x3e	; 62
    41d2:	6b 01       	movw	r12, r22
    41d4:	7c 01       	movw	r14, r24
    41d6:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    41d8:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    41dc:	ce 01       	movw	r24, r28
    41de:	01 96       	adiw	r24, 0x01	; 1
    41e0:	66 df       	rcall	.-308    	; 0x40ae <prvSampleTimeNow>
    41e2:	4b 01       	movw	r8, r22
    41e4:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	81 11       	cpse	r24, r1
    41ea:	2d c0       	rjmp	.+90     	; 0x4246 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    41ec:	11 11       	cpse	r17, r1
    41ee:	0d c0       	rjmp	.+26     	; 0x420a <prvProcessTimerOrBlockTask+0x54>
    41f0:	8c 14       	cp	r8, r12
    41f2:	9d 04       	cpc	r9, r13
    41f4:	ae 04       	cpc	r10, r14
    41f6:	bf 04       	cpc	r11, r15
    41f8:	40 f0       	brcs	.+16     	; 0x420a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    41fa:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    41fe:	a5 01       	movw	r20, r10
    4200:	94 01       	movw	r18, r8
    4202:	c7 01       	movw	r24, r14
    4204:	b6 01       	movw	r22, r12
    4206:	81 df       	rcall	.-254    	; 0x410a <prvProcessExpiredTimer>
    4208:	20 c0       	rjmp	.+64     	; 0x424a <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    420a:	11 23       	and	r17, r17
    420c:	41 f0       	breq	.+16     	; 0x421e <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    420e:	e0 91 11 14 	lds	r30, 0x1411	; 0x801411 <pxOverflowTimerList>
    4212:	f0 91 12 14 	lds	r31, 0x1412	; 0x801412 <pxOverflowTimerList+0x1>
    4216:	80 81       	ld	r24, Z
    4218:	11 e0       	ldi	r17, 0x01	; 1
    421a:	81 11       	cpse	r24, r1
    421c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    421e:	b7 01       	movw	r22, r14
    4220:	a6 01       	movw	r20, r12
    4222:	48 19       	sub	r20, r8
    4224:	59 09       	sbc	r21, r9
    4226:	6a 09       	sbc	r22, r10
    4228:	7b 09       	sbc	r23, r11
    422a:	21 2f       	mov	r18, r17
    422c:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <xTimerQueue>
    4230:	90 91 10 14 	lds	r25, 0x1410	; 0x801410 <xTimerQueue+0x1>
    4234:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    4238:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
    423c:	81 11       	cpse	r24, r1
    423e:	05 c0       	rjmp	.+10     	; 0x424a <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    4240:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    4244:	02 c0       	rjmp	.+4      	; 0x424a <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    4246:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskResumeAll>
            }
        }
    }
    424a:	0f 90       	pop	r0
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	ff 90       	pop	r15
    4254:	ef 90       	pop	r14
    4256:	df 90       	pop	r13
    4258:	cf 90       	pop	r12
    425a:	bf 90       	pop	r11
    425c:	af 90       	pop	r10
    425e:	9f 90       	pop	r9
    4260:	8f 90       	pop	r8
    4262:	08 95       	ret

00004264 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    4264:	af 92       	push	r10
    4266:	bf 92       	push	r11
    4268:	cf 92       	push	r12
    426a:	df 92       	push	r13
    426c:	ef 92       	push	r14
    426e:	ff 92       	push	r15
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	28 97       	sbiw	r28, 0x08	; 8
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4288:	82 c0       	rjmp	.+260    	; 0x438e <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	88 23       	and	r24, r24
    428e:	0c f4       	brge	.+2      	; 0x4292 <prvProcessReceivedCommands+0x2e>
    4290:	7e c0       	rjmp	.+252    	; 0x438e <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4292:	ae 80       	ldd	r10, Y+6	; 0x06
    4294:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    4296:	d5 01       	movw	r26, r10
    4298:	1c 96       	adiw	r26, 0x0c	; 12
    429a:	8d 91       	ld	r24, X+
    429c:	9c 91       	ld	r25, X
    429e:	1d 97       	sbiw	r26, 0x0d	; 13
    42a0:	89 2b       	or	r24, r25
    42a2:	21 f0       	breq	.+8      	; 0x42ac <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    42a4:	c5 01       	movw	r24, r10
    42a6:	02 96       	adiw	r24, 0x02	; 2
    42a8:	0e 94 4d 0a 	call	0x149a	; 0x149a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    42ac:	ce 01       	movw	r24, r28
    42ae:	08 96       	adiw	r24, 0x08	; 8
    42b0:	fe de       	rcall	.-516    	; 0x40ae <prvSampleTimeNow>
    42b2:	8b 01       	movw	r16, r22
    42b4:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    42b6:	e9 81       	ldd	r30, Y+1	; 0x01
    42b8:	0e 2e       	mov	r0, r30
    42ba:	00 0c       	add	r0, r0
    42bc:	ff 0b       	sbc	r31, r31
    42be:	ea 30       	cpi	r30, 0x0A	; 10
    42c0:	f1 05       	cpc	r31, r1
    42c2:	08 f0       	brcs	.+2      	; 0x42c6 <prvProcessReceivedCommands+0x62>
    42c4:	64 c0       	rjmp	.+200    	; 0x438e <prvProcessReceivedCommands+0x12a>
    42c6:	88 27       	eor	r24, r24
    42c8:	ee 58       	subi	r30, 0x8E	; 142
    42ca:	ff 4f       	sbci	r31, 0xFF	; 255
    42cc:	8f 4f       	sbci	r24, 0xFF	; 255
    42ce:	0c 94 8c 35 	jmp	0x6b18	; 0x6b18 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    42d2:	f5 01       	movw	r30, r10
    42d4:	86 89       	ldd	r24, Z+22	; 0x16
    42d6:	81 60       	ori	r24, 0x01	; 1
    42d8:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    42da:	ca 80       	ldd	r12, Y+2	; 0x02
    42dc:	db 80       	ldd	r13, Y+3	; 0x03
    42de:	ec 80       	ldd	r14, Y+4	; 0x04
    42e0:	fd 80       	ldd	r15, Y+5	; 0x05
    42e2:	46 85       	ldd	r20, Z+14	; 0x0e
    42e4:	57 85       	ldd	r21, Z+15	; 0x0f
    42e6:	60 89       	ldd	r22, Z+16	; 0x10
    42e8:	71 89       	ldd	r23, Z+17	; 0x11
    42ea:	4c 0d       	add	r20, r12
    42ec:	5d 1d       	adc	r21, r13
    42ee:	6e 1d       	adc	r22, r14
    42f0:	7f 1d       	adc	r23, r15
    42f2:	c5 01       	movw	r24, r10
    42f4:	83 dd       	rcall	.-1274   	; 0x3dfc <prvInsertTimerInActiveList>
    42f6:	88 23       	and	r24, r24
    42f8:	09 f4       	brne	.+2      	; 0x42fc <prvProcessReceivedCommands+0x98>
    42fa:	49 c0       	rjmp	.+146    	; 0x438e <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    42fc:	d5 01       	movw	r26, r10
    42fe:	54 96       	adiw	r26, 0x14	; 20
    4300:	ed 91       	ld	r30, X+
    4302:	fc 91       	ld	r31, X
    4304:	55 97       	sbiw	r26, 0x15	; 21
    4306:	c5 01       	movw	r24, r10
    4308:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    430a:	f5 01       	movw	r30, r10
    430c:	86 89       	ldd	r24, Z+22	; 0x16
    430e:	82 ff       	sbrs	r24, 2
    4310:	3e c0       	rjmp	.+124    	; 0x438e <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4312:	4a 81       	ldd	r20, Y+2	; 0x02
    4314:	5b 81       	ldd	r21, Y+3	; 0x03
    4316:	6c 81       	ldd	r22, Y+4	; 0x04
    4318:	7d 81       	ldd	r23, Y+5	; 0x05
    431a:	86 85       	ldd	r24, Z+14	; 0x0e
    431c:	97 85       	ldd	r25, Z+15	; 0x0f
    431e:	a0 89       	ldd	r26, Z+16	; 0x10
    4320:	b1 89       	ldd	r27, Z+17	; 0x11
    4322:	9a 01       	movw	r18, r20
    4324:	ab 01       	movw	r20, r22
    4326:	28 0f       	add	r18, r24
    4328:	39 1f       	adc	r19, r25
    432a:	4a 1f       	adc	r20, r26
    432c:	5b 1f       	adc	r21, r27
    432e:	c1 2c       	mov	r12, r1
    4330:	d1 2c       	mov	r13, r1
    4332:	76 01       	movw	r14, r12
    4334:	00 e0       	ldi	r16, 0x00	; 0
    4336:	10 e0       	ldi	r17, 0x00	; 0
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	c5 01       	movw	r24, r10
    433c:	f2 dd       	rcall	.-1052   	; 0x3f22 <xTimerGenericCommand>
    433e:	27 c0       	rjmp	.+78     	; 0x438e <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4340:	d5 01       	movw	r26, r10
    4342:	56 96       	adiw	r26, 0x16	; 22
    4344:	8c 91       	ld	r24, X
    4346:	56 97       	sbiw	r26, 0x16	; 22
    4348:	8e 7f       	andi	r24, 0xFE	; 254
    434a:	56 96       	adiw	r26, 0x16	; 22
    434c:	8c 93       	st	X, r24
                        break;
    434e:	1f c0       	rjmp	.+62     	; 0x438e <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4350:	f5 01       	movw	r30, r10
    4352:	86 89       	ldd	r24, Z+22	; 0x16
    4354:	81 60       	ori	r24, 0x01	; 1
    4356:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4358:	4a 81       	ldd	r20, Y+2	; 0x02
    435a:	5b 81       	ldd	r21, Y+3	; 0x03
    435c:	6c 81       	ldd	r22, Y+4	; 0x04
    435e:	7d 81       	ldd	r23, Y+5	; 0x05
    4360:	46 87       	std	Z+14, r20	; 0x0e
    4362:	57 87       	std	Z+15, r21	; 0x0f
    4364:	60 8b       	std	Z+16, r22	; 0x10
    4366:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4368:	40 0f       	add	r20, r16
    436a:	51 1f       	adc	r21, r17
    436c:	62 1f       	adc	r22, r18
    436e:	73 1f       	adc	r23, r19
    4370:	68 01       	movw	r12, r16
    4372:	79 01       	movw	r14, r18
    4374:	c5 01       	movw	r24, r10
    4376:	42 dd       	rcall	.-1404   	; 0x3dfc <prvInsertTimerInActiveList>
                        break;
    4378:	0a c0       	rjmp	.+20     	; 0x438e <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    437a:	f5 01       	movw	r30, r10
    437c:	86 89       	ldd	r24, Z+22	; 0x16
    437e:	81 fd       	sbrc	r24, 1
    4380:	04 c0       	rjmp	.+8      	; 0x438a <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    4382:	c5 01       	movw	r24, r10
    4384:	0e 94 be 09 	call	0x137c	; 0x137c <vPortFree>
    4388:	02 c0       	rjmp	.+4      	; 0x438e <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    438a:	8e 7f       	andi	r24, 0xFE	; 254
    438c:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	a9 01       	movw	r20, r18
    4394:	be 01       	movw	r22, r28
    4396:	6f 5f       	subi	r22, 0xFF	; 255
    4398:	7f 4f       	sbci	r23, 0xFF	; 255
    439a:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <xTimerQueue>
    439e:	90 91 10 14 	lds	r25, 0x1410	; 0x801410 <xTimerQueue+0x1>
    43a2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <xQueueReceive>
    43a6:	81 11       	cpse	r24, r1
    43a8:	70 cf       	rjmp	.-288    	; 0x428a <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    43aa:	28 96       	adiw	r28, 0x08	; 8
    43ac:	0f b6       	in	r0, 0x3f	; 63
    43ae:	f8 94       	cli
    43b0:	de bf       	out	0x3e, r29	; 62
    43b2:	0f be       	out	0x3f, r0	; 63
    43b4:	cd bf       	out	0x3d, r28	; 61
    43b6:	df 91       	pop	r29
    43b8:	cf 91       	pop	r28
    43ba:	1f 91       	pop	r17
    43bc:	0f 91       	pop	r16
    43be:	ff 90       	pop	r15
    43c0:	ef 90       	pop	r14
    43c2:	df 90       	pop	r13
    43c4:	cf 90       	pop	r12
    43c6:	bf 90       	pop	r11
    43c8:	af 90       	pop	r10
    43ca:	08 95       	ret

000043cc <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    43cc:	08 95       	ret

000043ce <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    43ce:	84 b1       	in	r24, 0x04	; 4
    43d0:	80 68       	ori	r24, 0x80	; 128
    43d2:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    43d4:	85 b1       	in	r24, 0x05	; 5
    43d6:	80 68       	ori	r24, 0x80	; 128
    43d8:	85 b9       	out	0x05, r24	; 5
    43da:	08 95       	ret

000043dc <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    43dc:	83 b1       	in	r24, 0x03	; 3
    43de:	80 68       	ori	r24, 0x80	; 128
    43e0:	83 b9       	out	0x03, r24	; 3
    43e2:	08 95       	ret

000043e4 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    43e4:	f4 df       	rcall	.-24     	; 0x43ce <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    43e6:	2f ef       	ldi	r18, 0xFF	; 255
    43e8:	80 e7       	ldi	r24, 0x70	; 112
    43ea:	92 e0       	ldi	r25, 0x02	; 2
    43ec:	21 50       	subi	r18, 0x01	; 1
    43ee:	80 40       	sbci	r24, 0x00	; 0
    43f0:	90 40       	sbci	r25, 0x00	; 0
    43f2:	e1 f7       	brne	.-8      	; 0x43ec <vApplicationMallocFailedHook+0x8>
    43f4:	00 c0       	rjmp	.+0      	; 0x43f6 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    43f6:	00 00       	nop
    43f8:	f1 df       	rcall	.-30     	; 0x43dc <prvBlinkMainLed>
    43fa:	f5 cf       	rjmp	.-22     	; 0x43e6 <vApplicationMallocFailedHook+0x2>

000043fc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    43fc:	e8 df       	rcall	.-48     	; 0x43ce <prvSetMainLedOn>
    43fe:	2f ef       	ldi	r18, 0xFF	; 255
    4400:	87 ea       	ldi	r24, 0xA7	; 167
    4402:	91 e6       	ldi	r25, 0x61	; 97
    4404:	21 50       	subi	r18, 0x01	; 1
    4406:	80 40       	sbci	r24, 0x00	; 0
    4408:	90 40       	sbci	r25, 0x00	; 0
    440a:	e1 f7       	brne	.-8      	; 0x4404 <vApplicationStackOverflowHook+0x8>
    440c:	00 c0       	rjmp	.+0      	; 0x440e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    440e:	00 00       	nop
    4410:	e5 df       	rcall	.-54     	; 0x43dc <prvBlinkMainLed>
    4412:	f5 cf       	rjmp	.-22     	; 0x43fe <vApplicationStackOverflowHook+0x2>

00004414 <createTasksForSensors>:
#define BIT_TEMP_READY (1 << 0)
#define BIT_CO2_READY (1 << 1)
#define BIT_LIGHT_READY (1 << 2)

void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    4414:	60 91 2d 14 	lds	r22, 0x142D	; 0x80142d <taskReadyBits>
    4418:	70 91 2e 14 	lds	r23, 0x142E	; 0x80142e <taskReadyBits+0x1>
    441c:	21 e0       	ldi	r18, 0x01	; 1
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e0       	ldi	r20, 0x00	; 0
    4422:	50 e0       	ldi	r21, 0x00	; 0
    4424:	83 e0       	ldi	r24, 0x03	; 3
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	0e 94 71 05 	call	0xae2	; 0xae2 <createTemp>
    442c:	90 93 66 15 	sts	0x1566, r25	; 0x801566 <temperature_sensor+0x1>
    4430:	80 93 65 15 	sts	0x1565, r24	; 0x801565 <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    4434:	60 91 2d 14 	lds	r22, 0x142D	; 0x80142d <taskReadyBits>
    4438:	70 91 2e 14 	lds	r23, 0x142E	; 0x80142e <taskReadyBits+0x1>
    443c:	22 e0       	ldi	r18, 0x02	; 2
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e0       	ldi	r20, 0x00	; 0
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	83 e0       	ldi	r24, 0x03	; 3
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	0e 94 f6 01 	call	0x3ec	; 0x3ec <createCO2>
    444c:	90 93 6a 15 	sts	0x156A, r25	; 0x80156a <co2_sensor+0x1>
    4450:	80 93 69 15 	sts	0x1569, r24	; 0x801569 <co2_sensor>
	lighthandler = createLightSensor(3, taskReadyBits, BIT_LIGHT_READY);
    4454:	60 91 2d 14 	lds	r22, 0x142D	; 0x80142d <taskReadyBits>
    4458:	70 91 2e 14 	lds	r23, 0x142E	; 0x80142e <taskReadyBits+0x1>
    445c:	24 e0       	ldi	r18, 0x04	; 4
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	40 e0       	ldi	r20, 0x00	; 0
    4462:	50 e0       	ldi	r21, 0x00	; 0
    4464:	83 e0       	ldi	r24, 0x03	; 3
    4466:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <createLightSensor>
    446a:	90 93 68 15 	sts	0x1568, r25	; 0x801568 <lighthandler+0x1>
    446e:	80 93 67 15 	sts	0x1567, r24	; 0x801567 <lighthandler>
    4472:	08 95       	ret

00004474 <create_tasks_and_semaphores>:
}

void create_tasks_and_semaphores(void)
{
	create_shared_printf();
    4474:	0e 94 a2 03 	call	0x744	; 0x744 <create_shared_printf>
	print_sharedf("Board started.");
    4478:	86 e7       	ldi	r24, 0x76	; 118
    447a:	94 e0       	ldi	r25, 0x04	; 4
    447c:	9f 93       	push	r25
    447e:	8f 93       	push	r24
    4480:	0e 94 b0 03 	call	0x760	; 0x760 <print_sharedf>
	createTasksForSensors();
    4484:	c7 df       	rcall	.-114    	; 0x4414 <createTasksForSensors>
	create_semaphore_mutex_and_sensors(temperature_sensor, co2_sensor, lighthandler);
    4486:	40 91 67 15 	lds	r20, 0x1567	; 0x801567 <lighthandler>
    448a:	50 91 68 15 	lds	r21, 0x1568	; 0x801568 <lighthandler+0x1>
    448e:	60 91 69 15 	lds	r22, 0x1569	; 0x801569 <co2_sensor>
    4492:	70 91 6a 15 	lds	r23, 0x156A	; 0x80156a <co2_sensor+0x1>
    4496:	80 91 65 15 	lds	r24, 0x1565	; 0x801565 <temperature_sensor>
    449a:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <temperature_sensor+0x1>
    449e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <create_semaphore_mutex_and_sensors>
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
    44a2:	60 91 2b 14 	lds	r22, 0x142B	; 0x80142b <downLinkMessageBufferHandle>
    44a6:	70 91 2c 14 	lds	r23, 0x142C	; 0x80142c <downLinkMessageBufferHandle+0x1>
    44aa:	84 e0       	ldi	r24, 0x04	; 4
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 3f 02 	call	0x47e	; 0x47e <DownLinkHandler_Create>
	lora_handler_initialize(2);
    44b2:	82 e0       	ldi	r24, 0x02	; 2
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	0e 94 2c 07 	call	0xe58	; 0xe58 <lora_handler_initialize>
}
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	08 95       	ret

000044c0 <initializeSystem>:

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    44c0:	0e 94 61 07 	call	0xec2	; 0xec2 <xEventGroupCreate>
    44c4:	90 93 2e 14 	sts	0x142E, r25	; 0x80142e <taskReadyBits+0x1>
    44c8:	80 93 2d 14 	sts	0x142D, r24	; 0x80142d <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <stdio_initialise>
	
	
	rc_servo_initialise();
    44d2:	69 d7       	rcall	.+3794   	; 0x53a6 <rc_servo_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    44d4:	41 e0       	ldi	r20, 0x01	; 1
    44d6:	60 e0       	ldi	r22, 0x00	; 0
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	8c e2       	ldi	r24, 0x2C	; 44
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <xStreamBufferGenericCreate>
    44e2:	90 93 2c 14 	sts	0x142C, r25	; 0x80142c <downLinkMessageBufferHandle+0x1>
    44e6:	80 93 2b 14 	sts	0x142B, r24	; 0x80142b <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    44ea:	bc 01       	movw	r22, r24
    44ec:	81 e0       	ldi	r24, 0x01	; 1
	create_tasks_and_semaphores();
    44ee:	43 d3       	rcall	.+1670   	; 0x4b76 <lora_driver_initialise>
    44f0:	c1 cf       	rjmp	.-126    	; 0x4474 <create_tasks_and_semaphores>
    44f2:	08 95       	ret

000044f4 <main>:
}

int main(void){
	initializeSystem();
    44f4:	e5 df       	rcall	.-54     	; 0x44c0 <initializeSystem>
	vTaskStartScheduler();
    44f6:	0e 94 bd 14 	call	0x297a	; 0x297a <vTaskStartScheduler>
    44fa:	ff cf       	rjmp	.-2      	; 0x44fa <main+0x6>

000044fc <__fixsfsi>:
    44fc:	04 d0       	rcall	.+8      	; 0x4506 <__fixunssfsi>
    44fe:	68 94       	set
    4500:	b1 11       	cpse	r27, r1
    4502:	50 c0       	rjmp	.+160    	; 0x45a4 <__fp_szero>
    4504:	08 95       	ret

00004506 <__fixunssfsi>:
    4506:	33 d0       	rcall	.+102    	; 0x456e <__fp_splitA>
    4508:	88 f0       	brcs	.+34     	; 0x452c <__fixunssfsi+0x26>
    450a:	9f 57       	subi	r25, 0x7F	; 127
    450c:	90 f0       	brcs	.+36     	; 0x4532 <__fixunssfsi+0x2c>
    450e:	b9 2f       	mov	r27, r25
    4510:	99 27       	eor	r25, r25
    4512:	b7 51       	subi	r27, 0x17	; 23
    4514:	a0 f0       	brcs	.+40     	; 0x453e <__fixunssfsi+0x38>
    4516:	d1 f0       	breq	.+52     	; 0x454c <__fixunssfsi+0x46>
    4518:	66 0f       	add	r22, r22
    451a:	77 1f       	adc	r23, r23
    451c:	88 1f       	adc	r24, r24
    451e:	99 1f       	adc	r25, r25
    4520:	1a f0       	brmi	.+6      	; 0x4528 <__fixunssfsi+0x22>
    4522:	ba 95       	dec	r27
    4524:	c9 f7       	brne	.-14     	; 0x4518 <__fixunssfsi+0x12>
    4526:	12 c0       	rjmp	.+36     	; 0x454c <__fixunssfsi+0x46>
    4528:	b1 30       	cpi	r27, 0x01	; 1
    452a:	81 f0       	breq	.+32     	; 0x454c <__fixunssfsi+0x46>
    452c:	3a d0       	rcall	.+116    	; 0x45a2 <__fp_zero>
    452e:	b1 e0       	ldi	r27, 0x01	; 1
    4530:	08 95       	ret
    4532:	37 c0       	rjmp	.+110    	; 0x45a2 <__fp_zero>
    4534:	67 2f       	mov	r22, r23
    4536:	78 2f       	mov	r23, r24
    4538:	88 27       	eor	r24, r24
    453a:	b8 5f       	subi	r27, 0xF8	; 248
    453c:	39 f0       	breq	.+14     	; 0x454c <__fixunssfsi+0x46>
    453e:	b9 3f       	cpi	r27, 0xF9	; 249
    4540:	cc f3       	brlt	.-14     	; 0x4534 <__fixunssfsi+0x2e>
    4542:	86 95       	lsr	r24
    4544:	77 95       	ror	r23
    4546:	67 95       	ror	r22
    4548:	b3 95       	inc	r27
    454a:	d9 f7       	brne	.-10     	; 0x4542 <__fixunssfsi+0x3c>
    454c:	3e f4       	brtc	.+14     	; 0x455c <__fixunssfsi+0x56>
    454e:	90 95       	com	r25
    4550:	80 95       	com	r24
    4552:	70 95       	com	r23
    4554:	61 95       	neg	r22
    4556:	7f 4f       	sbci	r23, 0xFF	; 255
    4558:	8f 4f       	sbci	r24, 0xFF	; 255
    455a:	9f 4f       	sbci	r25, 0xFF	; 255
    455c:	08 95       	ret

0000455e <__fp_split3>:
    455e:	57 fd       	sbrc	r21, 7
    4560:	90 58       	subi	r25, 0x80	; 128
    4562:	44 0f       	add	r20, r20
    4564:	55 1f       	adc	r21, r21
    4566:	59 f0       	breq	.+22     	; 0x457e <__fp_splitA+0x10>
    4568:	5f 3f       	cpi	r21, 0xFF	; 255
    456a:	71 f0       	breq	.+28     	; 0x4588 <__fp_splitA+0x1a>
    456c:	47 95       	ror	r20

0000456e <__fp_splitA>:
    456e:	88 0f       	add	r24, r24
    4570:	97 fb       	bst	r25, 7
    4572:	99 1f       	adc	r25, r25
    4574:	61 f0       	breq	.+24     	; 0x458e <__fp_splitA+0x20>
    4576:	9f 3f       	cpi	r25, 0xFF	; 255
    4578:	79 f0       	breq	.+30     	; 0x4598 <__fp_splitA+0x2a>
    457a:	87 95       	ror	r24
    457c:	08 95       	ret
    457e:	12 16       	cp	r1, r18
    4580:	13 06       	cpc	r1, r19
    4582:	14 06       	cpc	r1, r20
    4584:	55 1f       	adc	r21, r21
    4586:	f2 cf       	rjmp	.-28     	; 0x456c <__fp_split3+0xe>
    4588:	46 95       	lsr	r20
    458a:	f1 df       	rcall	.-30     	; 0x456e <__fp_splitA>
    458c:	08 c0       	rjmp	.+16     	; 0x459e <__fp_splitA+0x30>
    458e:	16 16       	cp	r1, r22
    4590:	17 06       	cpc	r1, r23
    4592:	18 06       	cpc	r1, r24
    4594:	99 1f       	adc	r25, r25
    4596:	f1 cf       	rjmp	.-30     	; 0x457a <__fp_splitA+0xc>
    4598:	86 95       	lsr	r24
    459a:	71 05       	cpc	r23, r1
    459c:	61 05       	cpc	r22, r1
    459e:	08 94       	sec
    45a0:	08 95       	ret

000045a2 <__fp_zero>:
    45a2:	e8 94       	clt

000045a4 <__fp_szero>:
    45a4:	bb 27       	eor	r27, r27
    45a6:	66 27       	eor	r22, r22
    45a8:	77 27       	eor	r23, r23
    45aa:	cb 01       	movw	r24, r22
    45ac:	97 f9       	bld	r25, 7
    45ae:	08 95       	ret

000045b0 <modf>:
    45b0:	fa 01       	movw	r30, r20
    45b2:	dc 01       	movw	r26, r24
    45b4:	aa 0f       	add	r26, r26
    45b6:	bb 1f       	adc	r27, r27
    45b8:	9b 01       	movw	r18, r22
    45ba:	ac 01       	movw	r20, r24
    45bc:	bf 57       	subi	r27, 0x7F	; 127
    45be:	28 f4       	brcc	.+10     	; 0x45ca <modf+0x1a>
    45c0:	22 27       	eor	r18, r18
    45c2:	33 27       	eor	r19, r19
    45c4:	44 27       	eor	r20, r20
    45c6:	50 78       	andi	r21, 0x80	; 128
    45c8:	1f c0       	rjmp	.+62     	; 0x4608 <modf+0x58>
    45ca:	b7 51       	subi	r27, 0x17	; 23
    45cc:	88 f4       	brcc	.+34     	; 0x45f0 <modf+0x40>
    45ce:	ab 2f       	mov	r26, r27
    45d0:	00 24       	eor	r0, r0
    45d2:	46 95       	lsr	r20
    45d4:	37 95       	ror	r19
    45d6:	27 95       	ror	r18
    45d8:	01 1c       	adc	r0, r1
    45da:	a3 95       	inc	r26
    45dc:	d2 f3       	brmi	.-12     	; 0x45d2 <modf+0x22>
    45de:	00 20       	and	r0, r0
    45e0:	69 f0       	breq	.+26     	; 0x45fc <modf+0x4c>
    45e2:	22 0f       	add	r18, r18
    45e4:	33 1f       	adc	r19, r19
    45e6:	44 1f       	adc	r20, r20
    45e8:	b3 95       	inc	r27
    45ea:	da f3       	brmi	.-10     	; 0x45e2 <modf+0x32>
    45ec:	0d d0       	rcall	.+26     	; 0x4608 <modf+0x58>
    45ee:	76 c0       	rjmp	.+236    	; 0x46dc <__subsf3>
    45f0:	61 30       	cpi	r22, 0x01	; 1
    45f2:	71 05       	cpc	r23, r1
    45f4:	a0 e8       	ldi	r26, 0x80	; 128
    45f6:	8a 07       	cpc	r24, r26
    45f8:	b9 46       	sbci	r27, 0x69	; 105
    45fa:	30 f4       	brcc	.+12     	; 0x4608 <modf+0x58>
    45fc:	9b 01       	movw	r18, r22
    45fe:	ac 01       	movw	r20, r24
    4600:	66 27       	eor	r22, r22
    4602:	77 27       	eor	r23, r23
    4604:	88 27       	eor	r24, r24
    4606:	90 78       	andi	r25, 0x80	; 128
    4608:	30 96       	adiw	r30, 0x00	; 0
    460a:	21 f0       	breq	.+8      	; 0x4614 <modf+0x64>
    460c:	20 83       	st	Z, r18
    460e:	31 83       	std	Z+1, r19	; 0x01
    4610:	42 83       	std	Z+2, r20	; 0x02
    4612:	53 83       	std	Z+3, r21	; 0x03
    4614:	08 95       	ret

00004616 <__mulsf3>:
    4616:	0b d0       	rcall	.+22     	; 0x462e <__mulsf3x>
    4618:	dd c0       	rjmp	.+442    	; 0x47d4 <__fp_round>
    461a:	ce d0       	rcall	.+412    	; 0x47b8 <__fp_pscA>
    461c:	28 f0       	brcs	.+10     	; 0x4628 <__mulsf3+0x12>
    461e:	d3 d0       	rcall	.+422    	; 0x47c6 <__fp_pscB>
    4620:	18 f0       	brcs	.+6      	; 0x4628 <__mulsf3+0x12>
    4622:	95 23       	and	r25, r21
    4624:	09 f0       	breq	.+2      	; 0x4628 <__mulsf3+0x12>
    4626:	bf c0       	rjmp	.+382    	; 0x47a6 <__fp_inf>
    4628:	c4 c0       	rjmp	.+392    	; 0x47b2 <__fp_nan>
    462a:	11 24       	eor	r1, r1
    462c:	bb cf       	rjmp	.-138    	; 0x45a4 <__fp_szero>

0000462e <__mulsf3x>:
    462e:	97 df       	rcall	.-210    	; 0x455e <__fp_split3>
    4630:	a0 f3       	brcs	.-24     	; 0x461a <__mulsf3+0x4>

00004632 <__mulsf3_pse>:
    4632:	95 9f       	mul	r25, r21
    4634:	d1 f3       	breq	.-12     	; 0x462a <__mulsf3+0x14>
    4636:	95 0f       	add	r25, r21
    4638:	50 e0       	ldi	r21, 0x00	; 0
    463a:	55 1f       	adc	r21, r21
    463c:	62 9f       	mul	r22, r18
    463e:	f0 01       	movw	r30, r0
    4640:	72 9f       	mul	r23, r18
    4642:	bb 27       	eor	r27, r27
    4644:	f0 0d       	add	r31, r0
    4646:	b1 1d       	adc	r27, r1
    4648:	63 9f       	mul	r22, r19
    464a:	aa 27       	eor	r26, r26
    464c:	f0 0d       	add	r31, r0
    464e:	b1 1d       	adc	r27, r1
    4650:	aa 1f       	adc	r26, r26
    4652:	64 9f       	mul	r22, r20
    4654:	66 27       	eor	r22, r22
    4656:	b0 0d       	add	r27, r0
    4658:	a1 1d       	adc	r26, r1
    465a:	66 1f       	adc	r22, r22
    465c:	82 9f       	mul	r24, r18
    465e:	22 27       	eor	r18, r18
    4660:	b0 0d       	add	r27, r0
    4662:	a1 1d       	adc	r26, r1
    4664:	62 1f       	adc	r22, r18
    4666:	73 9f       	mul	r23, r19
    4668:	b0 0d       	add	r27, r0
    466a:	a1 1d       	adc	r26, r1
    466c:	62 1f       	adc	r22, r18
    466e:	83 9f       	mul	r24, r19
    4670:	a0 0d       	add	r26, r0
    4672:	61 1d       	adc	r22, r1
    4674:	22 1f       	adc	r18, r18
    4676:	74 9f       	mul	r23, r20
    4678:	33 27       	eor	r19, r19
    467a:	a0 0d       	add	r26, r0
    467c:	61 1d       	adc	r22, r1
    467e:	23 1f       	adc	r18, r19
    4680:	84 9f       	mul	r24, r20
    4682:	60 0d       	add	r22, r0
    4684:	21 1d       	adc	r18, r1
    4686:	82 2f       	mov	r24, r18
    4688:	76 2f       	mov	r23, r22
    468a:	6a 2f       	mov	r22, r26
    468c:	11 24       	eor	r1, r1
    468e:	9f 57       	subi	r25, 0x7F	; 127
    4690:	50 40       	sbci	r21, 0x00	; 0
    4692:	8a f0       	brmi	.+34     	; 0x46b6 <__mulsf3_pse+0x84>
    4694:	e1 f0       	breq	.+56     	; 0x46ce <__mulsf3_pse+0x9c>
    4696:	88 23       	and	r24, r24
    4698:	4a f0       	brmi	.+18     	; 0x46ac <__mulsf3_pse+0x7a>
    469a:	ee 0f       	add	r30, r30
    469c:	ff 1f       	adc	r31, r31
    469e:	bb 1f       	adc	r27, r27
    46a0:	66 1f       	adc	r22, r22
    46a2:	77 1f       	adc	r23, r23
    46a4:	88 1f       	adc	r24, r24
    46a6:	91 50       	subi	r25, 0x01	; 1
    46a8:	50 40       	sbci	r21, 0x00	; 0
    46aa:	a9 f7       	brne	.-22     	; 0x4696 <__mulsf3_pse+0x64>
    46ac:	9e 3f       	cpi	r25, 0xFE	; 254
    46ae:	51 05       	cpc	r21, r1
    46b0:	70 f0       	brcs	.+28     	; 0x46ce <__mulsf3_pse+0x9c>
    46b2:	79 c0       	rjmp	.+242    	; 0x47a6 <__fp_inf>
    46b4:	77 cf       	rjmp	.-274    	; 0x45a4 <__fp_szero>
    46b6:	5f 3f       	cpi	r21, 0xFF	; 255
    46b8:	ec f3       	brlt	.-6      	; 0x46b4 <__mulsf3_pse+0x82>
    46ba:	98 3e       	cpi	r25, 0xE8	; 232
    46bc:	dc f3       	brlt	.-10     	; 0x46b4 <__mulsf3_pse+0x82>
    46be:	86 95       	lsr	r24
    46c0:	77 95       	ror	r23
    46c2:	67 95       	ror	r22
    46c4:	b7 95       	ror	r27
    46c6:	f7 95       	ror	r31
    46c8:	e7 95       	ror	r30
    46ca:	9f 5f       	subi	r25, 0xFF	; 255
    46cc:	c1 f7       	brne	.-16     	; 0x46be <__mulsf3_pse+0x8c>
    46ce:	fe 2b       	or	r31, r30
    46d0:	88 0f       	add	r24, r24
    46d2:	91 1d       	adc	r25, r1
    46d4:	96 95       	lsr	r25
    46d6:	87 95       	ror	r24
    46d8:	97 f9       	bld	r25, 7
    46da:	08 95       	ret

000046dc <__subsf3>:
    46dc:	50 58       	subi	r21, 0x80	; 128

000046de <__addsf3>:
    46de:	bb 27       	eor	r27, r27
    46e0:	aa 27       	eor	r26, r26
    46e2:	0e d0       	rcall	.+28     	; 0x4700 <__addsf3x>
    46e4:	77 c0       	rjmp	.+238    	; 0x47d4 <__fp_round>
    46e6:	68 d0       	rcall	.+208    	; 0x47b8 <__fp_pscA>
    46e8:	30 f0       	brcs	.+12     	; 0x46f6 <__addsf3+0x18>
    46ea:	6d d0       	rcall	.+218    	; 0x47c6 <__fp_pscB>
    46ec:	20 f0       	brcs	.+8      	; 0x46f6 <__addsf3+0x18>
    46ee:	31 f4       	brne	.+12     	; 0x46fc <__addsf3+0x1e>
    46f0:	9f 3f       	cpi	r25, 0xFF	; 255
    46f2:	11 f4       	brne	.+4      	; 0x46f8 <__addsf3+0x1a>
    46f4:	1e f4       	brtc	.+6      	; 0x46fc <__addsf3+0x1e>
    46f6:	5d c0       	rjmp	.+186    	; 0x47b2 <__fp_nan>
    46f8:	0e f4       	brtc	.+2      	; 0x46fc <__addsf3+0x1e>
    46fa:	e0 95       	com	r30
    46fc:	e7 fb       	bst	r30, 7
    46fe:	53 c0       	rjmp	.+166    	; 0x47a6 <__fp_inf>

00004700 <__addsf3x>:
    4700:	e9 2f       	mov	r30, r25
    4702:	2d df       	rcall	.-422    	; 0x455e <__fp_split3>
    4704:	80 f3       	brcs	.-32     	; 0x46e6 <__addsf3+0x8>
    4706:	ba 17       	cp	r27, r26
    4708:	62 07       	cpc	r22, r18
    470a:	73 07       	cpc	r23, r19
    470c:	84 07       	cpc	r24, r20
    470e:	95 07       	cpc	r25, r21
    4710:	18 f0       	brcs	.+6      	; 0x4718 <__addsf3x+0x18>
    4712:	71 f4       	brne	.+28     	; 0x4730 <__addsf3x+0x30>
    4714:	9e f5       	brtc	.+102    	; 0x477c <__addsf3x+0x7c>
    4716:	45 cf       	rjmp	.-374    	; 0x45a2 <__fp_zero>
    4718:	0e f4       	brtc	.+2      	; 0x471c <__addsf3x+0x1c>
    471a:	e0 95       	com	r30
    471c:	0b 2e       	mov	r0, r27
    471e:	ba 2f       	mov	r27, r26
    4720:	a0 2d       	mov	r26, r0
    4722:	0b 01       	movw	r0, r22
    4724:	b9 01       	movw	r22, r18
    4726:	90 01       	movw	r18, r0
    4728:	0c 01       	movw	r0, r24
    472a:	ca 01       	movw	r24, r20
    472c:	a0 01       	movw	r20, r0
    472e:	11 24       	eor	r1, r1
    4730:	ff 27       	eor	r31, r31
    4732:	59 1b       	sub	r21, r25
    4734:	99 f0       	breq	.+38     	; 0x475c <__addsf3x+0x5c>
    4736:	59 3f       	cpi	r21, 0xF9	; 249
    4738:	50 f4       	brcc	.+20     	; 0x474e <__addsf3x+0x4e>
    473a:	50 3e       	cpi	r21, 0xE0	; 224
    473c:	68 f1       	brcs	.+90     	; 0x4798 <__addsf3x+0x98>
    473e:	1a 16       	cp	r1, r26
    4740:	f0 40       	sbci	r31, 0x00	; 0
    4742:	a2 2f       	mov	r26, r18
    4744:	23 2f       	mov	r18, r19
    4746:	34 2f       	mov	r19, r20
    4748:	44 27       	eor	r20, r20
    474a:	58 5f       	subi	r21, 0xF8	; 248
    474c:	f3 cf       	rjmp	.-26     	; 0x4734 <__addsf3x+0x34>
    474e:	46 95       	lsr	r20
    4750:	37 95       	ror	r19
    4752:	27 95       	ror	r18
    4754:	a7 95       	ror	r26
    4756:	f0 40       	sbci	r31, 0x00	; 0
    4758:	53 95       	inc	r21
    475a:	c9 f7       	brne	.-14     	; 0x474e <__addsf3x+0x4e>
    475c:	7e f4       	brtc	.+30     	; 0x477c <__addsf3x+0x7c>
    475e:	1f 16       	cp	r1, r31
    4760:	ba 0b       	sbc	r27, r26
    4762:	62 0b       	sbc	r22, r18
    4764:	73 0b       	sbc	r23, r19
    4766:	84 0b       	sbc	r24, r20
    4768:	ba f0       	brmi	.+46     	; 0x4798 <__addsf3x+0x98>
    476a:	91 50       	subi	r25, 0x01	; 1
    476c:	a1 f0       	breq	.+40     	; 0x4796 <__addsf3x+0x96>
    476e:	ff 0f       	add	r31, r31
    4770:	bb 1f       	adc	r27, r27
    4772:	66 1f       	adc	r22, r22
    4774:	77 1f       	adc	r23, r23
    4776:	88 1f       	adc	r24, r24
    4778:	c2 f7       	brpl	.-16     	; 0x476a <__addsf3x+0x6a>
    477a:	0e c0       	rjmp	.+28     	; 0x4798 <__addsf3x+0x98>
    477c:	ba 0f       	add	r27, r26
    477e:	62 1f       	adc	r22, r18
    4780:	73 1f       	adc	r23, r19
    4782:	84 1f       	adc	r24, r20
    4784:	48 f4       	brcc	.+18     	; 0x4798 <__addsf3x+0x98>
    4786:	87 95       	ror	r24
    4788:	77 95       	ror	r23
    478a:	67 95       	ror	r22
    478c:	b7 95       	ror	r27
    478e:	f7 95       	ror	r31
    4790:	9e 3f       	cpi	r25, 0xFE	; 254
    4792:	08 f0       	brcs	.+2      	; 0x4796 <__addsf3x+0x96>
    4794:	b3 cf       	rjmp	.-154    	; 0x46fc <__addsf3+0x1e>
    4796:	93 95       	inc	r25
    4798:	88 0f       	add	r24, r24
    479a:	08 f0       	brcs	.+2      	; 0x479e <__addsf3x+0x9e>
    479c:	99 27       	eor	r25, r25
    479e:	ee 0f       	add	r30, r30
    47a0:	97 95       	ror	r25
    47a2:	87 95       	ror	r24
    47a4:	08 95       	ret

000047a6 <__fp_inf>:
    47a6:	97 f9       	bld	r25, 7
    47a8:	9f 67       	ori	r25, 0x7F	; 127
    47aa:	80 e8       	ldi	r24, 0x80	; 128
    47ac:	70 e0       	ldi	r23, 0x00	; 0
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	08 95       	ret

000047b2 <__fp_nan>:
    47b2:	9f ef       	ldi	r25, 0xFF	; 255
    47b4:	80 ec       	ldi	r24, 0xC0	; 192
    47b6:	08 95       	ret

000047b8 <__fp_pscA>:
    47b8:	00 24       	eor	r0, r0
    47ba:	0a 94       	dec	r0
    47bc:	16 16       	cp	r1, r22
    47be:	17 06       	cpc	r1, r23
    47c0:	18 06       	cpc	r1, r24
    47c2:	09 06       	cpc	r0, r25
    47c4:	08 95       	ret

000047c6 <__fp_pscB>:
    47c6:	00 24       	eor	r0, r0
    47c8:	0a 94       	dec	r0
    47ca:	12 16       	cp	r1, r18
    47cc:	13 06       	cpc	r1, r19
    47ce:	14 06       	cpc	r1, r20
    47d0:	05 06       	cpc	r0, r21
    47d2:	08 95       	ret

000047d4 <__fp_round>:
    47d4:	09 2e       	mov	r0, r25
    47d6:	03 94       	inc	r0
    47d8:	00 0c       	add	r0, r0
    47da:	11 f4       	brne	.+4      	; 0x47e0 <__fp_round+0xc>
    47dc:	88 23       	and	r24, r24
    47de:	52 f0       	brmi	.+20     	; 0x47f4 <__fp_round+0x20>
    47e0:	bb 0f       	add	r27, r27
    47e2:	40 f4       	brcc	.+16     	; 0x47f4 <__fp_round+0x20>
    47e4:	bf 2b       	or	r27, r31
    47e6:	11 f4       	brne	.+4      	; 0x47ec <__fp_round+0x18>
    47e8:	60 ff       	sbrs	r22, 0
    47ea:	04 c0       	rjmp	.+8      	; 0x47f4 <__fp_round+0x20>
    47ec:	6f 5f       	subi	r22, 0xFF	; 255
    47ee:	7f 4f       	sbci	r23, 0xFF	; 255
    47f0:	8f 4f       	sbci	r24, 0xFF	; 255
    47f2:	9f 4f       	sbci	r25, 0xFF	; 255
    47f4:	08 95       	ret

000047f6 <_hihTwiCallback>:
    47f6:	65 30       	cpi	r22, 0x05	; 5
    47f8:	f1 f4       	brne	.+60     	; 0x4836 <_hihTwiCallback+0x40>
    47fa:	fa 01       	movw	r30, r20
    47fc:	80 81       	ld	r24, Z
    47fe:	8f 73       	andi	r24, 0x3F	; 63
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	98 2f       	mov	r25, r24
    4804:	88 27       	eor	r24, r24
    4806:	21 81       	ldd	r18, Z+1	; 0x01
    4808:	82 2b       	or	r24, r18
    480a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    480e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4812:	82 81       	ldd	r24, Z+2	; 0x02
    4814:	f0 e4       	ldi	r31, 0x40	; 64
    4816:	8f 9f       	mul	r24, r31
    4818:	c0 01       	movw	r24, r0
    481a:	11 24       	eor	r1, r1
    481c:	fa 01       	movw	r30, r20
    481e:	23 81       	ldd	r18, Z+3	; 0x03
    4820:	26 95       	lsr	r18
    4822:	26 95       	lsr	r18
    4824:	82 2b       	or	r24, r18
    4826:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    482a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	80 93 2f 14 	sts	0x142F, r24	; 0x80142f <_measuringIsReady>
    4834:	08 95       	ret
    4836:	64 30       	cpi	r22, 0x04	; 4
    4838:	51 f0       	breq	.+20     	; 0x484e <_hihTwiCallback+0x58>
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	90 e4       	ldi	r25, 0x40	; 64
    483e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4842:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4846:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    484a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    484e:	08 95       	ret

00004850 <hih8120_initialise>:
    4850:	0f 93       	push	r16
    4852:	1f 93       	push	r17
    4854:	0b ef       	ldi	r16, 0xFB	; 251
    4856:	13 e2       	ldi	r17, 0x23	; 35
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	34 e2       	ldi	r19, 0x24	; 36
    485c:	44 ef       	ldi	r20, 0xF4	; 244
    485e:	50 e0       	ldi	r21, 0x00	; 0
    4860:	60 e0       	ldi	r22, 0x00	; 0
    4862:	87 e2       	ldi	r24, 0x27	; 39
    4864:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <twiCreate>
    4868:	90 93 31 14 	sts	0x1431, r25	; 0x801431 <_hih8120Handler+0x1>
    486c:	80 93 30 14 	sts	0x1430, r24	; 0x801430 <_hih8120Handler>
    4870:	21 e0       	ldi	r18, 0x01	; 1
    4872:	89 2b       	or	r24, r25
    4874:	09 f0       	breq	.+2      	; 0x4878 <hih8120_initialise+0x28>
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	82 2f       	mov	r24, r18
    487a:	1f 91       	pop	r17
    487c:	0f 91       	pop	r16
    487e:	08 95       	ret

00004880 <hih8120_wakeup>:
    4880:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <_hih8120Handler>
    4884:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <_hih8120Handler+0x1>
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	59 f0       	breq	.+22     	; 0x48a2 <hih8120_wakeup+0x22>
    488c:	40 e0       	ldi	r20, 0x00	; 0
    488e:	60 e0       	ldi	r22, 0x00	; 0
    4890:	70 e0       	ldi	r23, 0x00	; 0
    4892:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <twiTransmit>
    4896:	84 30       	cpi	r24, 0x04	; 4
    4898:	31 f4       	brne	.+12     	; 0x48a6 <hih8120_wakeup+0x26>
    489a:	10 92 2f 14 	sts	0x142F, r1	; 0x80142f <_measuringIsReady>
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	08 95       	ret
    48a2:	82 e0       	ldi	r24, 0x02	; 2
    48a4:	08 95       	ret
    48a6:	83 e0       	ldi	r24, 0x03	; 3
    48a8:	08 95       	ret

000048aa <hih8120_measure>:
    48aa:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <_hih8120Handler>
    48ae:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <_hih8120Handler+0x1>
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	39 f0       	breq	.+14     	; 0x48c4 <hih8120_measure+0x1a>
    48b6:	64 e0       	ldi	r22, 0x04	; 4
    48b8:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <twiReceive>
    48bc:	85 30       	cpi	r24, 0x05	; 5
    48be:	21 f0       	breq	.+8      	; 0x48c8 <hih8120_measure+0x1e>
    48c0:	83 e0       	ldi	r24, 0x03	; 3
    48c2:	08 95       	ret
    48c4:	82 e0       	ldi	r24, 0x02	; 2
    48c6:	08 95       	ret
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	08 95       	ret

000048cc <hih8120_getHumidity>:
    48cc:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    48d0:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	0e 94 05 35 	call	0x6a0a	; 0x6a0a <__floatunsisf>
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	48 ec       	ldi	r20, 0xC8	; 200
    48e2:	52 e4       	ldi	r21, 0x42	; 66
    48e4:	98 de       	rcall	.-720    	; 0x4616 <__mulsf3>
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	38 ef       	ldi	r19, 0xF8	; 248
    48ea:	4f e7       	ldi	r20, 0x7F	; 127
    48ec:	56 e4       	ldi	r21, 0x46	; 70
    48ee:	0c 94 94 34 	jmp	0x6928	; 0x6928 <__divsf3>
    48f2:	08 95       	ret

000048f4 <hih8120_getHumidityPercent_x10>:
    48f4:	eb df       	rcall	.-42     	; 0x48cc <hih8120_getHumidity>
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	40 e2       	ldi	r20, 0x20	; 32
    48fc:	51 e4       	ldi	r21, 0x41	; 65
    48fe:	8b de       	rcall	.-746    	; 0x4616 <__mulsf3>
    4900:	02 de       	rcall	.-1020   	; 0x4506 <__fixunssfsi>
    4902:	cb 01       	movw	r24, r22
    4904:	08 95       	ret

00004906 <hih8120_getTemperature>:
    4906:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    490a:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    490e:	80 e0       	ldi	r24, 0x00	; 0
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	0e 94 05 35 	call	0x6a0a	; 0x6a0a <__floatunsisf>
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	45 e2       	ldi	r20, 0x25	; 37
    491c:	53 e4       	ldi	r21, 0x43	; 67
    491e:	7b de       	rcall	.-778    	; 0x4616 <__mulsf3>
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	38 ef       	ldi	r19, 0xF8	; 248
    4924:	4f e7       	ldi	r20, 0x7F	; 127
    4926:	56 e4       	ldi	r21, 0x46	; 70
    4928:	0e 94 94 34 	call	0x6928	; 0x6928 <__divsf3>
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	40 e2       	ldi	r20, 0x20	; 32
    4932:	52 e4       	ldi	r21, 0x42	; 66
    4934:	d3 ce       	rjmp	.-602    	; 0x46dc <__subsf3>
    4936:	08 95       	ret

00004938 <_serialCallBack>:
    4938:	0f 93       	push	r16
    493a:	1f 93       	push	r17
    493c:	cf 93       	push	r28
    493e:	df 93       	push	r29
    4940:	1f 92       	push	r1
    4942:	1f 92       	push	r1
    4944:	cd b7       	in	r28, 0x3d	; 61
    4946:	de b7       	in	r29, 0x3e	; 62
    4948:	8c 01       	movw	r16, r24
    494a:	19 82       	std	Y+1, r1	; 0x01
    494c:	2d c0       	rjmp	.+90     	; 0x49a8 <_serialCallBack+0x70>
    494e:	e0 91 69 14 	lds	r30, 0x1469	; 0x801469 <rec_buf_inp.2878>
    4952:	ec 32       	cpi	r30, 0x2C	; 44
    4954:	50 f4       	brcc	.+20     	; 0x496a <_serialCallBack+0x32>
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	8e 0f       	add	r24, r30
    495a:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <rec_buf_inp.2878>
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	e5 56       	subi	r30, 0x65	; 101
    4962:	fb 4e       	sbci	r31, 0xEB	; 235
    4964:	8a 81       	ldd	r24, Y+2	; 0x02
    4966:	80 83       	st	Z, r24
    4968:	02 c0       	rjmp	.+4      	; 0x496e <_serialCallBack+0x36>
    496a:	10 92 69 14 	sts	0x1469, r1	; 0x801469 <rec_buf_inp.2878>
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
    4970:	8a 30       	cpi	r24, 0x0A	; 10
    4972:	d1 f4       	brne	.+52     	; 0x49a8 <_serialCallBack+0x70>
    4974:	40 91 69 14 	lds	r20, 0x1469	; 0x801469 <rec_buf_inp.2878>
    4978:	50 e0       	ldi	r21, 0x00	; 0
    497a:	fa 01       	movw	r30, r20
    497c:	e7 56       	subi	r30, 0x67	; 103
    497e:	fb 4e       	sbci	r31, 0xEB	; 235
    4980:	10 82       	st	Z, r1
    4982:	41 50       	subi	r20, 0x01	; 1
    4984:	51 09       	sbc	r21, r1
    4986:	9e 01       	movw	r18, r28
    4988:	2f 5f       	subi	r18, 0xFF	; 255
    498a:	3f 4f       	sbci	r19, 0xFF	; 255
    498c:	6b e9       	ldi	r22, 0x9B	; 155
    498e:	74 e1       	ldi	r23, 0x14	; 20
    4990:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <_serialReplyBufferHandle>
    4994:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <_serialReplyBufferHandle+0x1>
    4998:	0e 94 92 11 	call	0x2324	; 0x2324 <xStreamBufferSendFromISR>
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	81 11       	cpse	r24, r1
    49a0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vPortYield>
    49a4:	10 92 69 14 	sts	0x1469, r1	; 0x801469 <rec_buf_inp.2878>
    49a8:	be 01       	movw	r22, r28
    49aa:	6e 5f       	subi	r22, 0xFE	; 254
    49ac:	7f 4f       	sbci	r23, 0xFF	; 255
    49ae:	c8 01       	movw	r24, r16
    49b0:	39 d6       	rcall	.+3186   	; 0x5624 <serial_getByte>
    49b2:	88 23       	and	r24, r24
    49b4:	61 f2       	breq	.-104    	; 0x494e <_serialCallBack+0x16>
    49b6:	0f 90       	pop	r0
    49b8:	0f 90       	pop	r0
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	1f 91       	pop	r17
    49c0:	0f 91       	pop	r16
    49c2:	08 95       	ret

000049c4 <_uploadMessage>:
    49c4:	0f 93       	push	r16
    49c6:	1f 93       	push	r17
    49c8:	cf 93       	push	r28
    49ca:	df 93       	push	r29
    49cc:	8c 01       	movw	r16, r24
    49ce:	eb 01       	movw	r28, r22
    49d0:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <_serialReplyBufferHandle>
    49d4:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <_serialReplyBufferHandle+0x1>
    49d8:	0e 94 9d 10 	call	0x213a	; 0x213a <xStreamBufferReset>
    49dc:	b8 01       	movw	r22, r16
    49de:	82 e3       	ldi	r24, 0x32	; 50
    49e0:	94 e1       	ldi	r25, 0x14	; 20
    49e2:	0e 94 05 38 	call	0x700a	; 0x700a <strcpy>
    49e6:	20 97       	sbiw	r28, 0x00	; 0
    49e8:	79 f0       	breq	.+30     	; 0x4a08 <_uploadMessage+0x44>
    49ea:	e2 e3       	ldi	r30, 0x32	; 50
    49ec:	f4 e1       	ldi	r31, 0x14	; 20
    49ee:	01 90       	ld	r0, Z+
    49f0:	00 20       	and	r0, r0
    49f2:	e9 f7       	brne	.-6      	; 0x49ee <_uploadMessage+0x2a>
    49f4:	31 97       	sbiw	r30, 0x01	; 1
    49f6:	80 e2       	ldi	r24, 0x20	; 32
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	91 83       	std	Z+1, r25	; 0x01
    49fc:	80 83       	st	Z, r24
    49fe:	be 01       	movw	r22, r28
    4a00:	82 e3       	ldi	r24, 0x32	; 50
    4a02:	94 e1       	ldi	r25, 0x14	; 20
    4a04:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <strcat>
    4a08:	e2 e3       	ldi	r30, 0x32	; 50
    4a0a:	f4 e1       	ldi	r31, 0x14	; 20
    4a0c:	df 01       	movw	r26, r30
    4a0e:	0d 90       	ld	r0, X+
    4a10:	00 20       	and	r0, r0
    4a12:	e9 f7       	brne	.-6      	; 0x4a0e <_uploadMessage+0x4a>
    4a14:	11 97       	sbiw	r26, 0x01	; 1
    4a16:	8d e0       	ldi	r24, 0x0D	; 13
    4a18:	9a e0       	ldi	r25, 0x0A	; 10
    4a1a:	11 96       	adiw	r26, 0x01	; 1
    4a1c:	9c 93       	st	X, r25
    4a1e:	8e 93       	st	-X, r24
    4a20:	12 96       	adiw	r26, 0x02	; 2
    4a22:	1c 92       	st	X, r1
    4a24:	01 90       	ld	r0, Z+
    4a26:	00 20       	and	r0, r0
    4a28:	e9 f7       	brne	.-6      	; 0x4a24 <_uploadMessage+0x60>
    4a2a:	31 97       	sbiw	r30, 0x01	; 1
    4a2c:	e2 53       	subi	r30, 0x32	; 50
    4a2e:	f4 41       	sbci	r31, 0x14	; 20
    4a30:	ae 2f       	mov	r26, r30
    4a32:	82 e3       	ldi	r24, 0x32	; 50
    4a34:	94 e1       	ldi	r25, 0x14	; 20
    4a36:	ac 01       	movw	r20, r24
    4a38:	6a 2f       	mov	r22, r26
    4a3a:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <_rn2483_serial>
    4a3e:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <_rn2483_serial+0x1>
    4a42:	9b d5       	rcall	.+2870   	; 0x557a <serial_sendBytes>
    4a44:	81 11       	cpse	r24, r1
    4a46:	11 c0       	rjmp	.+34     	; 0x4a6a <_uploadMessage+0xa6>
    4a48:	08 e2       	ldi	r16, 0x28	; 40
    4a4a:	15 e0       	ldi	r17, 0x05	; 5
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	4d e2       	ldi	r20, 0x2D	; 45
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	65 ef       	ldi	r22, 0xF5	; 245
    4a56:	74 e1       	ldi	r23, 0x14	; 20
    4a58:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <_serialReplyBufferHandle>
    4a5c:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <_serialReplyBufferHandle+0x1>
    4a60:	0e 94 d6 11 	call	0x23ac	; 0x23ac <xStreamBufferReceive>
    4a64:	85 ef       	ldi	r24, 0xF5	; 245
    4a66:	94 e1       	ldi	r25, 0x14	; 20
    4a68:	02 c0       	rjmp	.+4      	; 0x4a6e <_uploadMessage+0xaa>
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	df 91       	pop	r29
    4a70:	cf 91       	pop	r28
    4a72:	1f 91       	pop	r17
    4a74:	0f 91       	pop	r16
    4a76:	08 95       	ret

00004a78 <_reply2ReturnCode>:
    4a78:	2f 92       	push	r2
    4a7a:	3f 92       	push	r3
    4a7c:	4f 92       	push	r4
    4a7e:	5f 92       	push	r5
    4a80:	6f 92       	push	r6
    4a82:	7f 92       	push	r7
    4a84:	8f 92       	push	r8
    4a86:	9f 92       	push	r9
    4a88:	af 92       	push	r10
    4a8a:	bf 92       	push	r11
    4a8c:	cf 92       	push	r12
    4a8e:	df 92       	push	r13
    4a90:	ef 92       	push	r14
    4a92:	ff 92       	push	r15
    4a94:	0f 93       	push	r16
    4a96:	1f 93       	push	r17
    4a98:	cf 93       	push	r28
    4a9a:	df 93       	push	r29
    4a9c:	5c 01       	movw	r10, r24
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	01 90       	ld	r0, Z+
    4aa2:	00 20       	and	r0, r0
    4aa4:	e9 f7       	brne	.-6      	; 0x4aa0 <_reply2ReturnCode+0x28>
    4aa6:	31 97       	sbiw	r30, 0x01	; 1
    4aa8:	6f 01       	movw	r12, r30
    4aaa:	c8 1a       	sub	r12, r24
    4aac:	d9 0a       	sbc	r13, r25
    4aae:	5c 2c       	mov	r5, r12
    4ab0:	0f 2e       	mov	r0, r31
    4ab2:	fe e1       	ldi	r31, 0x1E	; 30
    4ab4:	8f 2e       	mov	r8, r31
    4ab6:	f7 e0       	ldi	r31, 0x07	; 7
    4ab8:	9f 2e       	mov	r9, r31
    4aba:	f0 2d       	mov	r31, r0
    4abc:	e1 2c       	mov	r14, r1
    4abe:	f1 2c       	mov	r15, r1
    4ac0:	4c 2c       	mov	r4, r12
    4ac2:	37 01       	movw	r6, r14
    4ac4:	f4 01       	movw	r30, r8
    4ac6:	01 81       	ldd	r16, Z+1	; 0x01
    4ac8:	12 81       	ldd	r17, Z+2	; 0x02
    4aca:	e8 01       	movw	r28, r16
    4acc:	09 90       	ld	r0, Y+
    4ace:	00 20       	and	r0, r0
    4ad0:	e9 f7       	brne	.-6      	; 0x4acc <_reply2ReturnCode+0x54>
    4ad2:	21 97       	sbiw	r28, 0x01	; 1
    4ad4:	c0 1b       	sub	r28, r16
    4ad6:	d1 0b       	sbc	r29, r17
    4ad8:	3c 2e       	mov	r3, r28
    4ada:	f9 e0       	ldi	r31, 0x09	; 9
    4adc:	cf 16       	cp	r12, r31
    4ade:	d1 04       	cpc	r13, r1
    4ae0:	58 f0       	brcs	.+22     	; 0x4af8 <_reply2ReturnCode+0x80>
    4ae2:	f4 01       	movw	r30, r8
    4ae4:	20 80       	ld	r2, Z
    4ae6:	fe e0       	ldi	r31, 0x0E	; 14
    4ae8:	2f 12       	cpse	r2, r31
    4aea:	06 c0       	rjmp	.+12     	; 0x4af8 <_reply2ReturnCode+0x80>
    4aec:	b8 01       	movw	r22, r16
    4aee:	c5 01       	movw	r24, r10
    4af0:	0e 94 d5 37 	call	0x6faa	; 0x6faa <strcasestr>
    4af4:	89 2b       	or	r24, r25
    4af6:	09 f5       	brne	.+66     	; 0x4b3a <_reply2ReturnCode+0xc2>
    4af8:	44 2d       	mov	r20, r4
    4afa:	35 14       	cp	r3, r5
    4afc:	08 f4       	brcc	.+2      	; 0x4b00 <_reply2ReturnCode+0x88>
    4afe:	4c 2f       	mov	r20, r28
    4b00:	50 e0       	ldi	r21, 0x00	; 0
    4b02:	b8 01       	movw	r22, r16
    4b04:	c5 01       	movw	r24, r10
    4b06:	0e 94 0c 38 	call	0x7018	; 0x7018 <strncasecmp>
    4b0a:	89 2b       	or	r24, r25
    4b0c:	49 f4       	brne	.+18     	; 0x4b20 <_reply2ReturnCode+0xa8>
    4b0e:	f3 01       	movw	r30, r6
    4b10:	ee 0f       	add	r30, r30
    4b12:	ff 1f       	adc	r31, r31
    4b14:	e6 0d       	add	r30, r6
    4b16:	f7 1d       	adc	r31, r7
    4b18:	e2 5e       	subi	r30, 0xE2	; 226
    4b1a:	f8 4f       	sbci	r31, 0xF8	; 248
    4b1c:	20 80       	ld	r2, Z
    4b1e:	0d c0       	rjmp	.+26     	; 0x4b3a <_reply2ReturnCode+0xc2>
    4b20:	8f ef       	ldi	r24, 0xFF	; 255
    4b22:	e8 1a       	sub	r14, r24
    4b24:	f8 0a       	sbc	r15, r24
    4b26:	e3 e0       	ldi	r30, 0x03	; 3
    4b28:	8e 0e       	add	r8, r30
    4b2a:	91 1c       	adc	r9, r1
    4b2c:	f1 e1       	ldi	r31, 0x11	; 17
    4b2e:	ef 16       	cp	r14, r31
    4b30:	f1 04       	cpc	r15, r1
    4b32:	39 f6       	brne	.-114    	; 0x4ac2 <_reply2ReturnCode+0x4a>
    4b34:	68 94       	set
    4b36:	22 24       	eor	r2, r2
    4b38:	24 f8       	bld	r2, 4
    4b3a:	82 2d       	mov	r24, r2
    4b3c:	df 91       	pop	r29
    4b3e:	cf 91       	pop	r28
    4b40:	1f 91       	pop	r17
    4b42:	0f 91       	pop	r16
    4b44:	ff 90       	pop	r15
    4b46:	ef 90       	pop	r14
    4b48:	df 90       	pop	r13
    4b4a:	cf 90       	pop	r12
    4b4c:	bf 90       	pop	r11
    4b4e:	af 90       	pop	r10
    4b50:	9f 90       	pop	r9
    4b52:	8f 90       	pop	r8
    4b54:	7f 90       	pop	r7
    4b56:	6f 90       	pop	r6
    4b58:	5f 90       	pop	r5
    4b5a:	4f 90       	pop	r4
    4b5c:	3f 90       	pop	r3
    4b5e:	2f 90       	pop	r2
    4b60:	08 95       	ret

00004b62 <_uploadMessageRc>:
    4b62:	30 df       	rcall	.-416    	; 0x49c4 <_uploadMessage>
    4b64:	89 cf       	rjmp	.-238    	; 0x4a78 <_reply2ReturnCode>
    4b66:	08 95       	ret

00004b68 <lora_driver_flushBuffers>:
    4b68:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <_serialReplyBufferHandle>
    4b6c:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <_serialReplyBufferHandle+0x1>
    4b70:	0c 94 9d 10 	jmp	0x213a	; 0x213a <xStreamBufferReset>
    4b74:	08 95       	ret

00004b76 <lora_driver_initialise>:
    4b76:	8f 92       	push	r8
    4b78:	9f 92       	push	r9
    4b7a:	af 92       	push	r10
    4b7c:	cf 92       	push	r12
    4b7e:	ef 92       	push	r14
    4b80:	0f 93       	push	r16
    4b82:	1f 93       	push	r17
    4b84:	cf 93       	push	r28
    4b86:	c8 2f       	mov	r28, r24
    4b88:	8b 01       	movw	r16, r22
    4b8a:	41 e0       	ldi	r20, 0x01	; 1
    4b8c:	60 e0       	ldi	r22, 0x00	; 0
    4b8e:	70 e0       	ldi	r23, 0x00	; 0
    4b90:	88 ec       	ldi	r24, 0xC8	; 200
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <xStreamBufferGenericCreate>
    4b98:	90 93 6d 14 	sts	0x146D, r25	; 0x80146d <_serialReplyBufferHandle+0x1>
    4b9c:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <_serialReplyBufferHandle>
    4ba0:	10 93 6b 14 	sts	0x146B, r17	; 0x80146b <_downlinkMessageBuffer+0x1>
    4ba4:	00 93 6a 14 	sts	0x146A, r16	; 0x80146a <_downlinkMessageBuffer>
    4ba8:	0f 2e       	mov	r0, r31
    4baa:	fc e9       	ldi	r31, 0x9C	; 156
    4bac:	8f 2e       	mov	r8, r31
    4bae:	f4 e2       	ldi	r31, 0x24	; 36
    4bb0:	9f 2e       	mov	r9, r31
    4bb2:	f0 2d       	mov	r31, r0
    4bb4:	68 94       	set
    4bb6:	aa 24       	eor	r10, r10
    4bb8:	a6 f8       	bld	r10, 6
    4bba:	68 94       	set
    4bbc:	cc 24       	eor	r12, r12
    4bbe:	c6 f8       	bld	r12, 6
    4bc0:	e1 2c       	mov	r14, r1
    4bc2:	00 e0       	ldi	r16, 0x00	; 0
    4bc4:	23 e0       	ldi	r18, 0x03	; 3
    4bc6:	40 e0       	ldi	r20, 0x00	; 0
    4bc8:	51 ee       	ldi	r21, 0xE1	; 225
    4bca:	60 e0       	ldi	r22, 0x00	; 0
    4bcc:	70 e0       	ldi	r23, 0x00	; 0
    4bce:	8c 2f       	mov	r24, r28
    4bd0:	06 d4       	rcall	.+2060   	; 0x53de <serial_create>
    4bd2:	90 93 6f 14 	sts	0x146F, r25	; 0x80146f <_rn2483_serial+0x1>
    4bd6:	80 93 6e 14 	sts	0x146E, r24	; 0x80146e <_rn2483_serial>
    4bda:	e7 e0       	ldi	r30, 0x07	; 7
    4bdc:	f1 e0       	ldi	r31, 0x01	; 1
    4bde:	80 81       	ld	r24, Z
    4be0:	80 61       	ori	r24, 0x10	; 16
    4be2:	80 83       	st	Z, r24
    4be4:	cf 91       	pop	r28
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	ef 90       	pop	r14
    4bec:	cf 90       	pop	r12
    4bee:	af 90       	pop	r10
    4bf0:	9f 90       	pop	r9
    4bf2:	8f 90       	pop	r8
    4bf4:	08 95       	ret

00004bf6 <lora_driver_resetRn2483>:
    4bf6:	88 23       	and	r24, r24
    4bf8:	31 f0       	breq	.+12     	; 0x4c06 <lora_driver_resetRn2483+0x10>
    4bfa:	e8 e0       	ldi	r30, 0x08	; 8
    4bfc:	f1 e0       	ldi	r31, 0x01	; 1
    4bfe:	80 81       	ld	r24, Z
    4c00:	8f 7e       	andi	r24, 0xEF	; 239
    4c02:	80 83       	st	Z, r24
    4c04:	08 95       	ret
    4c06:	e8 e0       	ldi	r30, 0x08	; 8
    4c08:	f1 e0       	ldi	r31, 0x01	; 1
    4c0a:	80 81       	ld	r24, Z
    4c0c:	80 61       	ori	r24, 0x10	; 16
    4c0e:	80 83       	st	Z, r24
    4c10:	08 95       	ret

00004c12 <lora_driver_rn2483FactoryReset>:
    4c12:	60 e0       	ldi	r22, 0x00	; 0
    4c14:	70 e0       	ldi	r23, 0x00	; 0
    4c16:	84 ea       	ldi	r24, 0xA4	; 164
    4c18:	94 e0       	ldi	r25, 0x04	; 4
    4c1a:	d4 de       	rcall	.-600    	; 0x49c4 <_uploadMessage>
    4c1c:	e5 ef       	ldi	r30, 0xF5	; 245
    4c1e:	f4 e1       	ldi	r31, 0x14	; 20
    4c20:	01 90       	ld	r0, Z+
    4c22:	00 20       	and	r0, r0
    4c24:	e9 f7       	brne	.-6      	; 0x4c20 <lora_driver_rn2483FactoryReset+0xe>
    4c26:	31 97       	sbiw	r30, 0x01	; 1
    4c28:	e5 5f       	subi	r30, 0xF5	; 245
    4c2a:	f4 41       	sbci	r31, 0x14	; 20
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	75 97       	sbiw	r30, 0x15	; 21
    4c30:	08 f0       	brcs	.+2      	; 0x4c34 <lora_driver_rn2483FactoryReset+0x22>
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	08 95       	ret

00004c36 <lora_driver_getRn2483Hweui>:
    4c36:	cf 93       	push	r28
    4c38:	df 93       	push	r29
    4c3a:	ec 01       	movw	r28, r24
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	85 eb       	ldi	r24, 0xB5	; 181
    4c42:	94 e0       	ldi	r25, 0x04	; 4
    4c44:	bf de       	rcall	.-642    	; 0x49c4 <_uploadMessage>
    4c46:	e5 ef       	ldi	r30, 0xF5	; 245
    4c48:	f4 e1       	ldi	r31, 0x14	; 20
    4c4a:	01 90       	ld	r0, Z+
    4c4c:	00 20       	and	r0, r0
    4c4e:	e9 f7       	brne	.-6      	; 0x4c4a <lora_driver_getRn2483Hweui+0x14>
    4c50:	e6 50       	subi	r30, 0x06	; 6
    4c52:	f5 41       	sbci	r31, 0x15	; 21
    4c54:	39 f4       	brne	.+14     	; 0x4c64 <lora_driver_getRn2483Hweui+0x2e>
    4c56:	65 ef       	ldi	r22, 0xF5	; 245
    4c58:	74 e1       	ldi	r23, 0x14	; 20
    4c5a:	ce 01       	movw	r24, r28
    4c5c:	0e 94 05 38 	call	0x700a	; 0x700a <strcpy>
    4c60:	80 e0       	ldi	r24, 0x00	; 0
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <lora_driver_getRn2483Hweui+0x32>
    4c64:	18 82       	st	Y, r1
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	df 91       	pop	r29
    4c6a:	cf 91       	pop	r28
    4c6c:	08 95       	ret

00004c6e <lora_driver_setDeviceIdentifier>:
    4c6e:	fc 01       	movw	r30, r24
    4c70:	01 90       	ld	r0, Z+
    4c72:	00 20       	and	r0, r0
    4c74:	e9 f7       	brne	.-6      	; 0x4c70 <lora_driver_setDeviceIdentifier+0x2>
    4c76:	9f 01       	movw	r18, r30
    4c78:	21 51       	subi	r18, 0x11	; 17
    4c7a:	31 09       	sbc	r19, r1
    4c7c:	28 17       	cp	r18, r24
    4c7e:	39 07       	cpc	r19, r25
    4c80:	29 f4       	brne	.+10     	; 0x4c8c <lora_driver_setDeviceIdentifier+0x1e>
    4c82:	bc 01       	movw	r22, r24
    4c84:	83 ee       	ldi	r24, 0xE3	; 227
    4c86:	94 e0       	ldi	r25, 0x04	; 4
    4c88:	6c cf       	rjmp	.-296    	; 0x4b62 <_uploadMessageRc>
    4c8a:	08 95       	ret
    4c8c:	89 e0       	ldi	r24, 0x09	; 9
    4c8e:	08 95       	ret

00004c90 <lora_driver_setApplicationIdentifier>:
    4c90:	fc 01       	movw	r30, r24
    4c92:	01 90       	ld	r0, Z+
    4c94:	00 20       	and	r0, r0
    4c96:	e9 f7       	brne	.-6      	; 0x4c92 <lora_driver_setApplicationIdentifier+0x2>
    4c98:	9f 01       	movw	r18, r30
    4c9a:	21 51       	subi	r18, 0x11	; 17
    4c9c:	31 09       	sbc	r19, r1
    4c9e:	28 17       	cp	r18, r24
    4ca0:	39 07       	cpc	r19, r25
    4ca2:	29 f4       	brne	.+10     	; 0x4cae <lora_driver_setApplicationIdentifier+0x1e>
    4ca4:	bc 01       	movw	r22, r24
    4ca6:	82 ef       	ldi	r24, 0xF2	; 242
    4ca8:	94 e0       	ldi	r25, 0x04	; 4
    4caa:	5b cf       	rjmp	.-330    	; 0x4b62 <_uploadMessageRc>
    4cac:	08 95       	ret
    4cae:	89 e0       	ldi	r24, 0x09	; 9
    4cb0:	08 95       	ret

00004cb2 <lora_driver_setApplicationKey>:
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	01 90       	ld	r0, Z+
    4cb6:	00 20       	and	r0, r0
    4cb8:	e9 f7       	brne	.-6      	; 0x4cb4 <lora_driver_setApplicationKey+0x2>
    4cba:	9f 01       	movw	r18, r30
    4cbc:	21 52       	subi	r18, 0x21	; 33
    4cbe:	31 09       	sbc	r19, r1
    4cc0:	28 17       	cp	r18, r24
    4cc2:	39 07       	cpc	r19, r25
    4cc4:	29 f4       	brne	.+10     	; 0x4cd0 <lora_driver_setApplicationKey+0x1e>
    4cc6:	bc 01       	movw	r22, r24
    4cc8:	81 e0       	ldi	r24, 0x01	; 1
    4cca:	95 e0       	ldi	r25, 0x05	; 5
    4ccc:	4a cf       	rjmp	.-364    	; 0x4b62 <_uploadMessageRc>
    4cce:	08 95       	ret
    4cd0:	89 e0       	ldi	r24, 0x09	; 9
    4cd2:	08 95       	ret

00004cd4 <lora_driver_saveMac>:
    4cd4:	60 e0       	ldi	r22, 0x00	; 0
    4cd6:	70 e0       	ldi	r23, 0x00	; 0
    4cd8:	80 e4       	ldi	r24, 0x40	; 64
    4cda:	95 e0       	ldi	r25, 0x05	; 5
    4cdc:	42 cf       	rjmp	.-380    	; 0x4b62 <_uploadMessageRc>
    4cde:	08 95       	ret

00004ce0 <lora_driver_join>:
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	e8 2f       	mov	r30, r24
    4ce6:	f0 e0       	ldi	r31, 0x00	; 0
    4ce8:	ee 0f       	add	r30, r30
    4cea:	ff 1f       	adc	r31, r31
    4cec:	e6 5e       	subi	r30, 0xE6	; 230
    4cee:	f8 4f       	sbci	r31, 0xF8	; 248
    4cf0:	60 81       	ld	r22, Z
    4cf2:	71 81       	ldd	r23, Z+1	; 0x01
    4cf4:	89 e4       	ldi	r24, 0x49	; 73
    4cf6:	95 e0       	ldi	r25, 0x05	; 5
    4cf8:	34 df       	rcall	.-408    	; 0x4b62 <_uploadMessageRc>
    4cfa:	81 11       	cpse	r24, r1
    4cfc:	14 c0       	rjmp	.+40     	; 0x4d26 <lora_driver_join+0x46>
    4cfe:	08 e2       	ldi	r16, 0x28	; 40
    4d00:	15 e0       	ldi	r17, 0x05	; 5
    4d02:	20 e0       	ldi	r18, 0x00	; 0
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	4d e2       	ldi	r20, 0x2D	; 45
    4d08:	50 e0       	ldi	r21, 0x00	; 0
    4d0a:	65 ef       	ldi	r22, 0xF5	; 245
    4d0c:	74 e1       	ldi	r23, 0x14	; 20
    4d0e:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <_serialReplyBufferHandle>
    4d12:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <_serialReplyBufferHandle+0x1>
    4d16:	0e 94 d6 11 	call	0x23ac	; 0x23ac <xStreamBufferReceive>
    4d1a:	88 23       	and	r24, r24
    4d1c:	21 f0       	breq	.+8      	; 0x4d26 <lora_driver_join+0x46>
    4d1e:	85 ef       	ldi	r24, 0xF5	; 245
    4d20:	94 e1       	ldi	r25, 0x14	; 20
    4d22:	aa de       	rcall	.-684    	; 0x4a78 <_reply2ReturnCode>
    4d24:	03 c0       	rjmp	.+6      	; 0x4d2c <lora_driver_join+0x4c>
    4d26:	85 ef       	ldi	r24, 0xF5	; 245
    4d28:	94 e1       	ldi	r25, 0x14	; 20
    4d2a:	a6 de       	rcall	.-692    	; 0x4a78 <_reply2ReturnCode>
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	08 95       	ret

00004d32 <lora_driver_sendUploadMessage>:
    4d32:	0f 93       	push	r16
    4d34:	1f 93       	push	r17
    4d36:	cf 93       	push	r28
    4d38:	df 93       	push	r29
    4d3a:	1f 92       	push	r1
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
    4d40:	db 01       	movw	r26, r22
    4d42:	11 96       	adiw	r26, 0x01	; 1
    4d44:	9c 91       	ld	r25, X
    4d46:	11 97       	sbiw	r26, 0x01	; 1
    4d48:	95 31       	cpi	r25, 0x15	; 21
    4d4a:	08 f0       	brcs	.+2      	; 0x4d4e <lora_driver_sendUploadMessage+0x1c>
    4d4c:	b4 c0       	rjmp	.+360    	; 0x4eb6 <lora_driver_sendUploadMessage+0x184>
    4d4e:	99 23       	and	r25, r25
    4d50:	81 f1       	breq	.+96     	; 0x4db2 <lora_driver_sendUploadMessage+0x80>
    4d52:	60 e0       	ldi	r22, 0x00	; 0
    4d54:	70 e0       	ldi	r23, 0x00	; 0
    4d56:	27 2f       	mov	r18, r23
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	46 2f       	mov	r20, r22
    4d5c:	50 e0       	ldi	r21, 0x00	; 0
    4d5e:	fd 01       	movw	r30, r26
    4d60:	e4 0f       	add	r30, r20
    4d62:	f5 1f       	adc	r31, r21
    4d64:	92 81       	ldd	r25, Z+2	; 0x02
    4d66:	92 95       	swap	r25
    4d68:	9f 70       	andi	r25, 0x0F	; 15
    4d6a:	9a 30       	cpi	r25, 0x0A	; 10
    4d6c:	10 f0       	brcs	.+4      	; 0x4d72 <lora_driver_sendUploadMessage+0x40>
    4d6e:	99 5c       	subi	r25, 0xC9	; 201
    4d70:	01 c0       	rjmp	.+2      	; 0x4d74 <lora_driver_sendUploadMessage+0x42>
    4d72:	90 5d       	subi	r25, 0xD0	; 208
    4d74:	f9 01       	movw	r30, r18
    4d76:	ea 57       	subi	r30, 0x7A	; 122
    4d78:	fb 4e       	sbci	r31, 0xEB	; 235
    4d7a:	90 83       	st	Z, r25
    4d7c:	2f 5f       	subi	r18, 0xFF	; 255
    4d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d80:	fd 01       	movw	r30, r26
    4d82:	e4 0f       	add	r30, r20
    4d84:	f5 1f       	adc	r31, r21
    4d86:	92 81       	ldd	r25, Z+2	; 0x02
    4d88:	9f 70       	andi	r25, 0x0F	; 15
    4d8a:	49 2f       	mov	r20, r25
    4d8c:	50 e0       	ldi	r21, 0x00	; 0
    4d8e:	4a 30       	cpi	r20, 0x0A	; 10
    4d90:	51 05       	cpc	r21, r1
    4d92:	14 f0       	brlt	.+4      	; 0x4d98 <lora_driver_sendUploadMessage+0x66>
    4d94:	99 5c       	subi	r25, 0xC9	; 201
    4d96:	01 c0       	rjmp	.+2      	; 0x4d9a <lora_driver_sendUploadMessage+0x68>
    4d98:	90 5d       	subi	r25, 0xD0	; 208
    4d9a:	f9 01       	movw	r30, r18
    4d9c:	ea 57       	subi	r30, 0x7A	; 122
    4d9e:	fb 4e       	sbci	r31, 0xEB	; 235
    4da0:	90 83       	st	Z, r25
    4da2:	7e 5f       	subi	r23, 0xFE	; 254
    4da4:	6f 5f       	subi	r22, 0xFF	; 255
    4da6:	11 96       	adiw	r26, 0x01	; 1
    4da8:	9c 91       	ld	r25, X
    4daa:	11 97       	sbiw	r26, 0x01	; 1
    4dac:	69 17       	cp	r22, r25
    4dae:	98 f2       	brcs	.-90     	; 0x4d56 <lora_driver_sendUploadMessage+0x24>
    4db0:	01 c0       	rjmp	.+2      	; 0x4db4 <lora_driver_sendUploadMessage+0x82>
    4db2:	70 e0       	ldi	r23, 0x00	; 0
    4db4:	e7 2f       	mov	r30, r23
    4db6:	f0 e0       	ldi	r31, 0x00	; 0
    4db8:	ea 57       	subi	r30, 0x7A	; 122
    4dba:	fb 4e       	sbci	r31, 0xEB	; 235
    4dbc:	10 82       	st	Z, r1
    4dbe:	4c 91       	ld	r20, X
    4dc0:	81 11       	cpse	r24, r1
    4dc2:	03 c0       	rjmp	.+6      	; 0x4dca <lora_driver_sendUploadMessage+0x98>
    4dc4:	82 e5       	ldi	r24, 0x52	; 82
    4dc6:	95 e0       	ldi	r25, 0x05	; 5
    4dc8:	02 c0       	rjmp	.+4      	; 0x4dce <lora_driver_sendUploadMessage+0x9c>
    4dca:	84 e5       	ldi	r24, 0x54	; 84
    4dcc:	95 e0       	ldi	r25, 0x05	; 5
    4dce:	26 e8       	ldi	r18, 0x86	; 134
    4dd0:	34 e1       	ldi	r19, 0x14	; 20
    4dd2:	3f 93       	push	r19
    4dd4:	2f 93       	push	r18
    4dd6:	1f 92       	push	r1
    4dd8:	4f 93       	push	r20
    4dda:	9f 93       	push	r25
    4ddc:	8f 93       	push	r24
    4dde:	88 e5       	ldi	r24, 0x58	; 88
    4de0:	95 e0       	ldi	r25, 0x05	; 5
    4de2:	9f 93       	push	r25
    4de4:	8f 93       	push	r24
    4de6:	88 ec       	ldi	r24, 0xC8	; 200
    4de8:	94 e1       	ldi	r25, 0x14	; 20
    4dea:	9f 93       	push	r25
    4dec:	8f 93       	push	r24
    4dee:	0e 94 ae 38 	call	0x715c	; 0x715c <sprintf>
    4df2:	60 e0       	ldi	r22, 0x00	; 0
    4df4:	70 e0       	ldi	r23, 0x00	; 0
    4df6:	88 ec       	ldi	r24, 0xC8	; 200
    4df8:	94 e1       	ldi	r25, 0x14	; 20
    4dfa:	b3 de       	rcall	.-666    	; 0x4b62 <_uploadMessageRc>
    4dfc:	0f b6       	in	r0, 0x3f	; 63
    4dfe:	f8 94       	cli
    4e00:	de bf       	out	0x3e, r29	; 62
    4e02:	0f be       	out	0x3f, r0	; 63
    4e04:	cd bf       	out	0x3d, r28	; 61
    4e06:	81 11       	cpse	r24, r1
    4e08:	59 c0       	rjmp	.+178    	; 0x4ebc <lora_driver_sendUploadMessage+0x18a>
    4e0a:	08 e2       	ldi	r16, 0x28	; 40
    4e0c:	15 e0       	ldi	r17, 0x05	; 5
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	4d e2       	ldi	r20, 0x2D	; 45
    4e14:	50 e0       	ldi	r21, 0x00	; 0
    4e16:	65 ef       	ldi	r22, 0xF5	; 245
    4e18:	74 e1       	ldi	r23, 0x14	; 20
    4e1a:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <_serialReplyBufferHandle>
    4e1e:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <_serialReplyBufferHandle+0x1>
    4e22:	0e 94 d6 11 	call	0x23ac	; 0x23ac <xStreamBufferReceive>
    4e26:	88 23       	and	r24, r24
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <lora_driver_sendUploadMessage+0xfa>
    4e2a:	47 c0       	rjmp	.+142    	; 0x4eba <lora_driver_sendUploadMessage+0x188>
    4e2c:	85 ef       	ldi	r24, 0xF5	; 245
    4e2e:	94 e1       	ldi	r25, 0x14	; 20
    4e30:	23 de       	rcall	.-954    	; 0x4a78 <_reply2ReturnCode>
    4e32:	8e 30       	cpi	r24, 0x0E	; 14
    4e34:	09 f0       	breq	.+2      	; 0x4e38 <lora_driver_sendUploadMessage+0x106>
    4e36:	42 c0       	rjmp	.+132    	; 0x4ebc <lora_driver_sendUploadMessage+0x18a>
    4e38:	87 e0       	ldi	r24, 0x07	; 7
    4e3a:	89 83       	std	Y+1, r24	; 0x01
    4e3c:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_downlinkMessageBuffer>
    4e40:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_downlinkMessageBuffer+0x1>
    4e44:	89 2b       	or	r24, r25
    4e46:	a9 f1       	breq	.+106    	; 0x4eb2 <lora_driver_sendUploadMessage+0x180>
    4e48:	be 01       	movw	r22, r28
    4e4a:	6f 5f       	subi	r22, 0xFF	; 255
    4e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e4e:	85 ef       	ldi	r24, 0xF5	; 245
    4e50:	94 e1       	ldi	r25, 0x14	; 20
    4e52:	68 d1       	rcall	.+720    	; 0x5124 <decode_port_no>
    4e54:	80 93 70 14 	sts	0x1470, r24	; 0x801470 <_downlinkPayload>
    4e58:	e9 81       	ldd	r30, Y+1	; 0x01
    4e5a:	f0 e0       	ldi	r31, 0x00	; 0
    4e5c:	eb 50       	subi	r30, 0x0B	; 11
    4e5e:	fb 4e       	sbci	r31, 0xEB	; 235
    4e60:	df 01       	movw	r26, r30
    4e62:	0d 90       	ld	r0, X+
    4e64:	00 20       	and	r0, r0
    4e66:	e9 f7       	brne	.-6      	; 0x4e62 <lora_driver_sendUploadMessage+0x130>
    4e68:	11 97       	sbiw	r26, 0x01	; 1
    4e6a:	ae 1b       	sub	r26, r30
    4e6c:	bf 0b       	sbc	r27, r31
    4e6e:	aa 23       	and	r26, r26
    4e70:	91 f0       	breq	.+36     	; 0x4e96 <lora_driver_sendUploadMessage+0x164>
    4e72:	bb 27       	eor	r27, r27
    4e74:	cd 01       	movw	r24, r26
    4e76:	01 97       	sbiw	r24, 0x01	; 1
    4e78:	9c 01       	movw	r18, r24
    4e7a:	12 f4       	brpl	.+4      	; 0x4e80 <lora_driver_sendUploadMessage+0x14e>
    4e7c:	2f 5f       	subi	r18, 0xFF	; 255
    4e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e80:	35 95       	asr	r19
    4e82:	27 95       	ror	r18
    4e84:	20 93 71 14 	sts	0x1471, r18	; 0x801471 <_downlinkPayload+0x1>
    4e88:	af 01       	movw	r20, r30
    4e8a:	4f 5f       	subi	r20, 0xFF	; 255
    4e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e8e:	64 e1       	ldi	r22, 0x14	; 20
    4e90:	82 e7       	ldi	r24, 0x72	; 114
    4e92:	94 e1       	ldi	r25, 0x14	; 20
    4e94:	73 d1       	rcall	.+742    	; 0x517c <decode_hexadecimal_string_bytes>
    4e96:	01 e0       	ldi	r16, 0x01	; 1
    4e98:	10 e0       	ldi	r17, 0x00	; 0
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	46 e1       	ldi	r20, 0x16	; 22
    4ea0:	50 e0       	ldi	r21, 0x00	; 0
    4ea2:	60 e7       	ldi	r22, 0x70	; 112
    4ea4:	74 e1       	ldi	r23, 0x14	; 20
    4ea6:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_downlinkMessageBuffer>
    4eaa:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_downlinkMessageBuffer+0x1>
    4eae:	0e 94 cd 10 	call	0x219a	; 0x219a <xStreamBufferSend>
    4eb2:	8e e0       	ldi	r24, 0x0E	; 14
    4eb4:	03 c0       	rjmp	.+6      	; 0x4ebc <lora_driver_sendUploadMessage+0x18a>
    4eb6:	84 e1       	ldi	r24, 0x14	; 20
    4eb8:	01 c0       	rjmp	.+2      	; 0x4ebc <lora_driver_sendUploadMessage+0x18a>
    4eba:	80 e0       	ldi	r24, 0x00	; 0
    4ebc:	0f 90       	pop	r0
    4ebe:	df 91       	pop	r29
    4ec0:	cf 91       	pop	r28
    4ec2:	1f 91       	pop	r17
    4ec4:	0f 91       	pop	r16
    4ec6:	08 95       	ret

00004ec8 <lora_driver_setAdaptiveDataRate>:
    4ec8:	81 30       	cpi	r24, 0x01	; 1
    4eca:	19 f0       	breq	.+6      	; 0x4ed2 <lora_driver_setAdaptiveDataRate+0xa>
    4ecc:	68 e6       	ldi	r22, 0x68	; 104
    4ece:	75 e0       	ldi	r23, 0x05	; 5
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <lora_driver_setAdaptiveDataRate+0xe>
    4ed2:	61 e4       	ldi	r22, 0x41	; 65
    4ed4:	76 e0       	ldi	r23, 0x06	; 6
    4ed6:	8c e6       	ldi	r24, 0x6C	; 108
    4ed8:	95 e0       	ldi	r25, 0x05	; 5
    4eda:	43 ce       	rjmp	.-890    	; 0x4b62 <_uploadMessageRc>
    4edc:	08 95       	ret

00004ede <lora_driver_setReceiveDelay>:
    4ede:	9f 93       	push	r25
    4ee0:	8f 93       	push	r24
    4ee2:	8d e9       	ldi	r24, 0x9D	; 157
    4ee4:	95 e0       	ldi	r25, 0x05	; 5
    4ee6:	9f 93       	push	r25
    4ee8:	8f 93       	push	r24
    4eea:	88 ec       	ldi	r24, 0xC8	; 200
    4eec:	94 e1       	ldi	r25, 0x14	; 20
    4eee:	9f 93       	push	r25
    4ef0:	8f 93       	push	r24
    4ef2:	0e 94 ae 38 	call	0x715c	; 0x715c <sprintf>
    4ef6:	60 e0       	ldi	r22, 0x00	; 0
    4ef8:	70 e0       	ldi	r23, 0x00	; 0
    4efa:	88 ec       	ldi	r24, 0xC8	; 200
    4efc:	94 e1       	ldi	r25, 0x14	; 20
    4efe:	31 de       	rcall	.-926    	; 0x4b62 <_uploadMessageRc>
    4f00:	0f 90       	pop	r0
    4f02:	0f 90       	pop	r0
    4f04:	0f 90       	pop	r0
    4f06:	0f 90       	pop	r0
    4f08:	0f 90       	pop	r0
    4f0a:	0f 90       	pop	r0
    4f0c:	08 95       	ret

00004f0e <lora_driver_configureToEu868>:
    4f0e:	2f 92       	push	r2
    4f10:	3f 92       	push	r3
    4f12:	4f 92       	push	r4
    4f14:	5f 92       	push	r5
    4f16:	6f 92       	push	r6
    4f18:	7f 92       	push	r7
    4f1a:	8f 92       	push	r8
    4f1c:	9f 92       	push	r9
    4f1e:	af 92       	push	r10
    4f20:	bf 92       	push	r11
    4f22:	cf 92       	push	r12
    4f24:	df 92       	push	r13
    4f26:	ef 92       	push	r14
    4f28:	ff 92       	push	r15
    4f2a:	0f 93       	push	r16
    4f2c:	1f 93       	push	r17
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	a0 97       	sbiw	r28, 0x20	; 32
    4f38:	0f b6       	in	r0, 0x3f	; 63
    4f3a:	f8 94       	cli
    4f3c:	de bf       	out	0x3e, r29	; 62
    4f3e:	0f be       	out	0x3f, r0	; 63
    4f40:	cd bf       	out	0x3d, r28	; 61
    4f42:	6a ec       	ldi	r22, 0xCA	; 202
    4f44:	75 e0       	ldi	r23, 0x05	; 5
    4f46:	86 ed       	ldi	r24, 0xD6	; 214
    4f48:	95 e0       	ldi	r25, 0x05	; 5
    4f4a:	3c dd       	rcall	.-1416   	; 0x49c4 <_uploadMessage>
    4f4c:	95 dd       	rcall	.-1238   	; 0x4a78 <_reply2ReturnCode>
    4f4e:	81 11       	cpse	r24, r1
    4f50:	a3 c0       	rjmp	.+326    	; 0x5098 <lora_driver_configureToEu868+0x18a>
    4f52:	80 e2       	ldi	r24, 0x20	; 32
    4f54:	e2 e2       	ldi	r30, 0x22	; 34
    4f56:	f2 e0       	ldi	r31, 0x02	; 2
    4f58:	de 01       	movw	r26, r28
    4f5a:	11 96       	adiw	r26, 0x01	; 1
    4f5c:	01 90       	ld	r0, Z+
    4f5e:	0d 92       	st	X+, r0
    4f60:	8a 95       	dec	r24
    4f62:	e1 f7       	brne	.-8      	; 0x4f5c <lora_driver_configureToEu868+0x4e>
    4f64:	9e 01       	movw	r18, r28
    4f66:	2f 5f       	subi	r18, 0xFF	; 255
    4f68:	3f 4f       	sbci	r19, 0xFF	; 255
    4f6a:	69 01       	movw	r12, r18
    4f6c:	e1 2c       	mov	r14, r1
    4f6e:	f1 2c       	mov	r15, r1
    4f70:	0f 2e       	mov	r0, r31
    4f72:	f2 ee       	ldi	r31, 0xE2	; 226
    4f74:	af 2e       	mov	r10, r31
    4f76:	f5 e0       	ldi	r31, 0x05	; 5
    4f78:	bf 2e       	mov	r11, r31
    4f7a:	f0 2d       	mov	r31, r0
    4f7c:	08 ec       	ldi	r16, 0xC8	; 200
    4f7e:	14 e1       	ldi	r17, 0x14	; 20
    4f80:	0f 2e       	mov	r0, r31
    4f82:	fb ef       	ldi	r31, 0xFB	; 251
    4f84:	4f 2e       	mov	r4, r31
    4f86:	f5 e0       	ldi	r31, 0x05	; 5
    4f88:	5f 2e       	mov	r5, r31
    4f8a:	f0 2d       	mov	r31, r0
    4f8c:	0f 2e       	mov	r0, r31
    4f8e:	f2 e1       	ldi	r31, 0x12	; 18
    4f90:	8f 2e       	mov	r8, r31
    4f92:	f6 e0       	ldi	r31, 0x06	; 6
    4f94:	9f 2e       	mov	r9, r31
    4f96:	f0 2d       	mov	r31, r0
    4f98:	0f 2e       	mov	r0, r31
    4f9a:	fc e2       	ldi	r31, 0x2C	; 44
    4f9c:	6f 2e       	mov	r6, r31
    4f9e:	f6 e0       	ldi	r31, 0x06	; 6
    4fa0:	7f 2e       	mov	r7, r31
    4fa2:	f0 2d       	mov	r31, r0
    4fa4:	3e 2c       	mov	r3, r14
    4fa6:	2f 2c       	mov	r2, r15
    4fa8:	ff 92       	push	r15
    4faa:	ef 92       	push	r14
    4fac:	bf 92       	push	r11
    4fae:	af 92       	push	r10
    4fb0:	1f 93       	push	r17
    4fb2:	0f 93       	push	r16
    4fb4:	0e 94 ae 38 	call	0x715c	; 0x715c <sprintf>
    4fb8:	60 e0       	ldi	r22, 0x00	; 0
    4fba:	70 e0       	ldi	r23, 0x00	; 0
    4fbc:	c8 01       	movw	r24, r16
    4fbe:	02 dd       	rcall	.-1532   	; 0x49c4 <_uploadMessage>
    4fc0:	5b dd       	rcall	.-1354   	; 0x4a78 <_reply2ReturnCode>
    4fc2:	0f 90       	pop	r0
    4fc4:	0f 90       	pop	r0
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	0f 90       	pop	r0
    4fce:	81 11       	cpse	r24, r1
    4fd0:	63 c0       	rjmp	.+198    	; 0x5098 <lora_driver_configureToEu868+0x18a>
    4fd2:	32 e0       	ldi	r19, 0x02	; 2
    4fd4:	3e 15       	cp	r19, r14
    4fd6:	e8 f4       	brcc	.+58     	; 0x5012 <lora_driver_configureToEu868+0x104>
    4fd8:	f6 01       	movw	r30, r12
    4fda:	83 81       	ldd	r24, Z+3	; 0x03
    4fdc:	8f 93       	push	r24
    4fde:	82 81       	ldd	r24, Z+2	; 0x02
    4fe0:	8f 93       	push	r24
    4fe2:	81 81       	ldd	r24, Z+1	; 0x01
    4fe4:	8f 93       	push	r24
    4fe6:	80 81       	ld	r24, Z
    4fe8:	8f 93       	push	r24
    4fea:	ff 92       	push	r15
    4fec:	ef 92       	push	r14
    4fee:	5f 92       	push	r5
    4ff0:	4f 92       	push	r4
    4ff2:	1f 93       	push	r17
    4ff4:	0f 93       	push	r16
    4ff6:	0e 94 ae 38 	call	0x715c	; 0x715c <sprintf>
    4ffa:	60 e0       	ldi	r22, 0x00	; 0
    4ffc:	70 e0       	ldi	r23, 0x00	; 0
    4ffe:	c8 01       	movw	r24, r16
    5000:	e1 dc       	rcall	.-1598   	; 0x49c4 <_uploadMessage>
    5002:	3a dd       	rcall	.-1420   	; 0x4a78 <_reply2ReturnCode>
    5004:	0f b6       	in	r0, 0x3f	; 63
    5006:	f8 94       	cli
    5008:	de bf       	out	0x3e, r29	; 62
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	cd bf       	out	0x3d, r28	; 61
    500e:	81 11       	cpse	r24, r1
    5010:	43 c0       	rjmp	.+134    	; 0x5098 <lora_driver_configureToEu868+0x18a>
    5012:	2f 92       	push	r2
    5014:	3f 92       	push	r3
    5016:	9f 92       	push	r9
    5018:	8f 92       	push	r8
    501a:	1f 93       	push	r17
    501c:	0f 93       	push	r16
    501e:	0e 94 ae 38 	call	0x715c	; 0x715c <sprintf>
    5022:	60 e0       	ldi	r22, 0x00	; 0
    5024:	70 e0       	ldi	r23, 0x00	; 0
    5026:	c8 01       	movw	r24, r16
    5028:	cd dc       	rcall	.-1638   	; 0x49c4 <_uploadMessage>
    502a:	26 dd       	rcall	.-1460   	; 0x4a78 <_reply2ReturnCode>
    502c:	0f 90       	pop	r0
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	0f 90       	pop	r0
    5036:	0f 90       	pop	r0
    5038:	81 11       	cpse	r24, r1
    503a:	2e c0       	rjmp	.+92     	; 0x5098 <lora_driver_configureToEu868+0x18a>
    503c:	2f 92       	push	r2
    503e:	3f 92       	push	r3
    5040:	7f 92       	push	r7
    5042:	6f 92       	push	r6
    5044:	1f 93       	push	r17
    5046:	0f 93       	push	r16
    5048:	0e 94 ae 38 	call	0x715c	; 0x715c <sprintf>
    504c:	60 e0       	ldi	r22, 0x00	; 0
    504e:	70 e0       	ldi	r23, 0x00	; 0
    5050:	c8 01       	movw	r24, r16
    5052:	b8 dc       	rcall	.-1680   	; 0x49c4 <_uploadMessage>
    5054:	11 dd       	rcall	.-1502   	; 0x4a78 <_reply2ReturnCode>
    5056:	0f 90       	pop	r0
    5058:	0f 90       	pop	r0
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	0f 90       	pop	r0
    5062:	81 11       	cpse	r24, r1
    5064:	19 c0       	rjmp	.+50     	; 0x5098 <lora_driver_configureToEu868+0x18a>
    5066:	3f ef       	ldi	r19, 0xFF	; 255
    5068:	e3 1a       	sub	r14, r19
    506a:	f3 0a       	sbc	r15, r19
    506c:	84 e0       	ldi	r24, 0x04	; 4
    506e:	c8 0e       	add	r12, r24
    5070:	d1 1c       	adc	r13, r1
    5072:	98 e0       	ldi	r25, 0x08	; 8
    5074:	e9 16       	cp	r14, r25
    5076:	f1 04       	cpc	r15, r1
    5078:	09 f0       	breq	.+2      	; 0x507c <lora_driver_configureToEu868+0x16e>
    507a:	94 cf       	rjmp	.-216    	; 0x4fa4 <lora_driver_configureToEu868+0x96>
    507c:	60 e0       	ldi	r22, 0x00	; 0
    507e:	70 e0       	ldi	r23, 0x00	; 0
    5080:	84 e4       	ldi	r24, 0x44	; 68
    5082:	96 e0       	ldi	r25, 0x06	; 6
    5084:	9f dc       	rcall	.-1730   	; 0x49c4 <_uploadMessage>
    5086:	f8 dc       	rcall	.-1552   	; 0x4a78 <_reply2ReturnCode>
    5088:	81 11       	cpse	r24, r1
    508a:	06 c0       	rjmp	.+12     	; 0x5098 <lora_driver_configureToEu868+0x18a>
    508c:	60 e0       	ldi	r22, 0x00	; 0
    508e:	70 e0       	ldi	r23, 0x00	; 0
    5090:	85 e5       	ldi	r24, 0x55	; 85
    5092:	96 e0       	ldi	r25, 0x06	; 6
    5094:	97 dc       	rcall	.-1746   	; 0x49c4 <_uploadMessage>
    5096:	f0 dc       	rcall	.-1568   	; 0x4a78 <_reply2ReturnCode>
    5098:	a0 96       	adiw	r28, 0x20	; 32
    509a:	0f b6       	in	r0, 0x3f	; 63
    509c:	f8 94       	cli
    509e:	de bf       	out	0x3e, r29	; 62
    50a0:	0f be       	out	0x3f, r0	; 63
    50a2:	cd bf       	out	0x3d, r28	; 61
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	1f 91       	pop	r17
    50aa:	0f 91       	pop	r16
    50ac:	ff 90       	pop	r15
    50ae:	ef 90       	pop	r14
    50b0:	df 90       	pop	r13
    50b2:	cf 90       	pop	r12
    50b4:	bf 90       	pop	r11
    50b6:	af 90       	pop	r10
    50b8:	9f 90       	pop	r9
    50ba:	8f 90       	pop	r8
    50bc:	7f 90       	pop	r7
    50be:	6f 90       	pop	r6
    50c0:	5f 90       	pop	r5
    50c2:	4f 90       	pop	r4
    50c4:	3f 90       	pop	r3
    50c6:	2f 90       	pop	r2
    50c8:	08 95       	ret

000050ca <lora_driver_setOtaaIdentity>:
    50ca:	ef 92       	push	r14
    50cc:	ff 92       	push	r15
    50ce:	0f 93       	push	r16
    50d0:	1f 93       	push	r17
    50d2:	cf 93       	push	r28
    50d4:	df 93       	push	r29
    50d6:	ec 01       	movw	r28, r24
    50d8:	8b 01       	movw	r16, r22
    50da:	7a 01       	movw	r14, r20
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	f4 de       	rcall	.-536    	; 0x4ec8 <lora_driver_setAdaptiveDataRate>
    50e0:	81 11       	cpse	r24, r1
    50e2:	0d c0       	rjmp	.+26     	; 0x50fe <lora_driver_setOtaaIdentity+0x34>
    50e4:	ce 01       	movw	r24, r28
    50e6:	d4 dd       	rcall	.-1112   	; 0x4c90 <lora_driver_setApplicationIdentifier>
    50e8:	81 11       	cpse	r24, r1
    50ea:	09 c0       	rjmp	.+18     	; 0x50fe <lora_driver_setOtaaIdentity+0x34>
    50ec:	c8 01       	movw	r24, r16
    50ee:	e1 dd       	rcall	.-1086   	; 0x4cb2 <lora_driver_setApplicationKey>
    50f0:	81 11       	cpse	r24, r1
    50f2:	05 c0       	rjmp	.+10     	; 0x50fe <lora_driver_setOtaaIdentity+0x34>
    50f4:	c7 01       	movw	r24, r14
    50f6:	bb dd       	rcall	.-1162   	; 0x4c6e <lora_driver_setDeviceIdentifier>
    50f8:	81 11       	cpse	r24, r1
    50fa:	01 c0       	rjmp	.+2      	; 0x50fe <lora_driver_setOtaaIdentity+0x34>
    50fc:	eb dd       	rcall	.-1066   	; 0x4cd4 <lora_driver_saveMac>
    50fe:	df 91       	pop	r29
    5100:	cf 91       	pop	r28
    5102:	1f 91       	pop	r17
    5104:	0f 91       	pop	r16
    5106:	ff 90       	pop	r15
    5108:	ef 90       	pop	r14
    510a:	08 95       	ret

0000510c <lora_driver_mapReturnCodeToText>:
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	fc 01       	movw	r30, r24
    5110:	ee 0f       	add	r30, r30
    5112:	ff 1f       	adc	r31, r31
    5114:	8e 0f       	add	r24, r30
    5116:	9f 1f       	adc	r25, r31
    5118:	fc 01       	movw	r30, r24
    511a:	e2 5e       	subi	r30, 0xE2	; 226
    511c:	f8 4f       	sbci	r31, 0xF8	; 248
    511e:	81 81       	ldd	r24, Z+1	; 0x01
    5120:	92 81       	ldd	r25, Z+2	; 0x02
    5122:	08 95       	ret

00005124 <decode_port_no>:
    5124:	dc 01       	movw	r26, r24
    5126:	00 97       	sbiw	r24, 0x00	; 0
    5128:	29 f1       	breq	.+74     	; 0x5174 <decode_port_no+0x50>
    512a:	fb 01       	movw	r30, r22
    512c:	20 81       	ld	r18, Z
    512e:	fc 01       	movw	r30, r24
    5130:	01 90       	ld	r0, Z+
    5132:	00 20       	and	r0, r0
    5134:	e9 f7       	brne	.-6      	; 0x5130 <decode_port_no+0xc>
    5136:	31 97       	sbiw	r30, 0x01	; 1
    5138:	e8 1b       	sub	r30, r24
    513a:	f9 0b       	sbc	r31, r25
    513c:	82 2f       	mov	r24, r18
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	e8 17       	cp	r30, r24
    5142:	f9 07       	cpc	r31, r25
    5144:	c8 f0       	brcs	.+50     	; 0x5178 <decode_port_no+0x54>
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	08 c0       	rjmp	.+16     	; 0x515a <decode_port_no+0x36>
    514a:	88 0f       	add	r24, r24
    514c:	38 2f       	mov	r19, r24
    514e:	33 0f       	add	r19, r19
    5150:	33 0f       	add	r19, r19
    5152:	83 0f       	add	r24, r19
    5154:	80 53       	subi	r24, 0x30	; 48
    5156:	89 0f       	add	r24, r25
    5158:	2f 5f       	subi	r18, 0xFF	; 255
    515a:	fd 01       	movw	r30, r26
    515c:	e2 0f       	add	r30, r18
    515e:	f1 1d       	adc	r31, r1
    5160:	90 81       	ld	r25, Z
    5162:	30 ed       	ldi	r19, 0xD0	; 208
    5164:	39 0f       	add	r19, r25
    5166:	3a 30       	cpi	r19, 0x0A	; 10
    5168:	10 f4       	brcc	.+4      	; 0x516e <decode_port_no+0x4a>
    516a:	91 11       	cpse	r25, r1
    516c:	ee cf       	rjmp	.-36     	; 0x514a <decode_port_no+0x26>
    516e:	fb 01       	movw	r30, r22
    5170:	20 83       	st	Z, r18
    5172:	08 95       	ret
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	08 95       	ret
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	08 95       	ret

0000517c <decode_hexadecimal_string_bytes>:
    517c:	0f 93       	push	r16
    517e:	1f 93       	push	r17
    5180:	cf 93       	push	r28
    5182:	df 93       	push	r29
    5184:	dc 01       	movw	r26, r24
    5186:	ea 01       	movw	r28, r20
    5188:	20 97       	sbiw	r28, 0x00	; 0
    518a:	e1 f1       	breq	.+120    	; 0x5204 <decode_hexadecimal_string_bytes+0x88>
    518c:	fa 01       	movw	r30, r20
    518e:	01 90       	ld	r0, Z+
    5190:	00 20       	and	r0, r0
    5192:	e9 f7       	brne	.-6      	; 0x518e <decode_hexadecimal_string_bytes+0x12>
    5194:	31 97       	sbiw	r30, 0x01	; 1
    5196:	e4 1b       	sub	r30, r20
    5198:	f5 0b       	sbc	r31, r21
    519a:	32 97       	sbiw	r30, 0x02	; 2
    519c:	10 f5       	brcc	.+68     	; 0x51e2 <decode_hexadecimal_string_bytes+0x66>
    519e:	32 c0       	rjmp	.+100    	; 0x5204 <decode_hexadecimal_string_bytes+0x88>
    51a0:	8d 01       	movw	r16, r26
    51a2:	04 0f       	add	r16, r20
    51a4:	15 1f       	adc	r17, r21
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	ae 01       	movw	r20, r28
    51aa:	42 0f       	add	r20, r18
    51ac:	53 1f       	adc	r21, r19
    51ae:	fa 01       	movw	r30, r20
    51b0:	90 81       	ld	r25, Z
    51b2:	91 34       	cpi	r25, 0x41	; 65
    51b4:	28 f0       	brcs	.+10     	; 0x51c0 <decode_hexadecimal_string_bytes+0x44>
    51b6:	97 53       	subi	r25, 0x37	; 55
    51b8:	59 2f       	mov	r21, r25
    51ba:	52 95       	swap	r21
    51bc:	50 7f       	andi	r21, 0xF0	; 240
    51be:	03 c0       	rjmp	.+6      	; 0x51c6 <decode_hexadecimal_string_bytes+0x4a>
    51c0:	59 2f       	mov	r21, r25
    51c2:	52 95       	swap	r21
    51c4:	50 7f       	andi	r21, 0xF0	; 240
    51c6:	2c 0f       	add	r18, r28
    51c8:	3d 1f       	adc	r19, r29
    51ca:	f9 01       	movw	r30, r18
    51cc:	91 81       	ldd	r25, Z+1	; 0x01
    51ce:	91 34       	cpi	r25, 0x41	; 65
    51d0:	10 f0       	brcs	.+4      	; 0x51d6 <decode_hexadecimal_string_bytes+0x5a>
    51d2:	97 53       	subi	r25, 0x37	; 55
    51d4:	01 c0       	rjmp	.+2      	; 0x51d8 <decode_hexadecimal_string_bytes+0x5c>
    51d6:	90 53       	subi	r25, 0x30	; 48
    51d8:	95 0f       	add	r25, r21
    51da:	f8 01       	movw	r30, r16
    51dc:	90 83       	st	Z, r25
    51de:	8f 5f       	subi	r24, 0xFF	; 255
    51e0:	01 c0       	rjmp	.+2      	; 0x51e4 <decode_hexadecimal_string_bytes+0x68>
    51e2:	80 e0       	ldi	r24, 0x00	; 0
    51e4:	28 2f       	mov	r18, r24
    51e6:	22 0f       	add	r18, r18
    51e8:	48 2f       	mov	r20, r24
    51ea:	50 e0       	ldi	r21, 0x00	; 0
    51ec:	fe 01       	movw	r30, r28
    51ee:	01 90       	ld	r0, Z+
    51f0:	00 20       	and	r0, r0
    51f2:	e9 f7       	brne	.-6      	; 0x51ee <decode_hexadecimal_string_bytes+0x72>
    51f4:	31 97       	sbiw	r30, 0x01	; 1
    51f6:	ec 1b       	sub	r30, r28
    51f8:	fd 0b       	sbc	r31, r29
    51fa:	4e 17       	cp	r20, r30
    51fc:	5f 07       	cpc	r21, r31
    51fe:	10 f4       	brcc	.+4      	; 0x5204 <decode_hexadecimal_string_bytes+0x88>
    5200:	86 13       	cpse	r24, r22
    5202:	ce cf       	rjmp	.-100    	; 0x51a0 <decode_hexadecimal_string_bytes+0x24>
    5204:	df 91       	pop	r29
    5206:	cf 91       	pop	r28
    5208:	1f 91       	pop	r17
    520a:	0f 91       	pop	r16
    520c:	08 95       	ret

0000520e <_serialCallBack>:
    520e:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <crc_sum.1945>
    5212:	86 0f       	add	r24, r22
    5214:	80 93 25 15 	sts	0x1525, r24	; 0x801525 <crc_sum.1945>
    5218:	90 91 28 15 	lds	r25, 0x1528	; 0x801528 <_mh_state>
    521c:	91 30       	cpi	r25, 0x01	; 1
    521e:	79 f0       	breq	.+30     	; 0x523e <_serialCallBack+0x30>
    5220:	28 f0       	brcs	.+10     	; 0x522c <_serialCallBack+0x1e>
    5222:	92 30       	cpi	r25, 0x02	; 2
    5224:	a9 f0       	breq	.+42     	; 0x5250 <_serialCallBack+0x42>
    5226:	93 30       	cpi	r25, 0x03	; 3
    5228:	19 f1       	breq	.+70     	; 0x5270 <_serialCallBack+0x62>
    522a:	08 95       	ret
    522c:	6f 3f       	cpi	r22, 0xFF	; 255
    522e:	09 f0       	breq	.+2      	; 0x5232 <_serialCallBack+0x24>
    5230:	48 c0       	rjmp	.+144    	; 0x52c2 <_serialCallBack+0xb4>
    5232:	10 92 25 15 	sts	0x1525, r1	; 0x801525 <crc_sum.1945>
    5236:	81 e0       	ldi	r24, 0x01	; 1
    5238:	80 93 28 15 	sts	0x1528, r24	; 0x801528 <_mh_state>
    523c:	08 95       	ret
    523e:	66 38       	cpi	r22, 0x86	; 134
    5240:	09 f0       	breq	.+2      	; 0x5244 <_serialCallBack+0x36>
    5242:	3f c0       	rjmp	.+126    	; 0x52c2 <_serialCallBack+0xb4>
    5244:	10 92 24 15 	sts	0x1524, r1	; 0x801524 <inDex.1943>
    5248:	82 e0       	ldi	r24, 0x02	; 2
    524a:	80 93 28 15 	sts	0x1528, r24	; 0x801528 <_mh_state>
    524e:	08 95       	ret
    5250:	e0 91 24 15 	lds	r30, 0x1524	; 0x801524 <inDex.1943>
    5254:	81 e0       	ldi	r24, 0x01	; 1
    5256:	8e 0f       	add	r24, r30
    5258:	80 93 24 15 	sts	0x1524, r24	; 0x801524 <inDex.1943>
    525c:	f0 e0       	ldi	r31, 0x00	; 0
    525e:	ee 5d       	subi	r30, 0xDE	; 222
    5260:	fa 4e       	sbci	r31, 0xEA	; 234
    5262:	60 83       	st	Z, r22
    5264:	82 30       	cpi	r24, 0x02	; 2
    5266:	69 f5       	brne	.+90     	; 0x52c2 <_serialCallBack+0xb4>
    5268:	83 e0       	ldi	r24, 0x03	; 3
    526a:	80 93 28 15 	sts	0x1528, r24	; 0x801528 <_mh_state>
    526e:	08 95       	ret
    5270:	90 91 24 15 	lds	r25, 0x1524	; 0x801524 <inDex.1943>
    5274:	21 e0       	ldi	r18, 0x01	; 1
    5276:	29 0f       	add	r18, r25
    5278:	20 93 24 15 	sts	0x1524, r18	; 0x801524 <inDex.1943>
    527c:	96 30       	cpi	r25, 0x06	; 6
    527e:	09 f5       	brne	.+66     	; 0x52c2 <_serialCallBack+0xb4>
    5280:	81 11       	cpse	r24, r1
    5282:	0e c0       	rjmp	.+28     	; 0x52a0 <_serialCallBack+0x92>
    5284:	e2 e2       	ldi	r30, 0x22	; 34
    5286:	f5 e1       	ldi	r31, 0x15	; 21
    5288:	80 81       	ld	r24, Z
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	98 2f       	mov	r25, r24
    528e:	88 27       	eor	r24, r24
    5290:	21 81       	ldd	r18, Z+1	; 0x01
    5292:	82 0f       	add	r24, r18
    5294:	91 1d       	adc	r25, r1
    5296:	90 93 2a 15 	sts	0x152A, r25	; 0x80152a <_ppm+0x1>
    529a:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <_ppm>
    529e:	04 c0       	rjmp	.+8      	; 0x52a8 <_serialCallBack+0x9a>
    52a0:	10 92 2a 15 	sts	0x152A, r1	; 0x80152a <_ppm+0x1>
    52a4:	10 92 29 15 	sts	0x1529, r1	; 0x801529 <_ppm>
    52a8:	10 92 28 15 	sts	0x1528, r1	; 0x801528 <_mh_state>
    52ac:	e0 91 26 15 	lds	r30, 0x1526	; 0x801526 <_appCallBack>
    52b0:	f0 91 27 15 	lds	r31, 0x1527	; 0x801527 <_appCallBack+0x1>
    52b4:	30 97       	sbiw	r30, 0x00	; 0
    52b6:	29 f0       	breq	.+10     	; 0x52c2 <_serialCallBack+0xb4>
    52b8:	80 91 29 15 	lds	r24, 0x1529	; 0x801529 <_ppm>
    52bc:	90 91 2a 15 	lds	r25, 0x152A	; 0x80152a <_ppm+0x1>
    52c0:	19 95       	eicall
    52c2:	08 95       	ret

000052c4 <mh_z19_initialise>:
    52c4:	8f 92       	push	r8
    52c6:	9f 92       	push	r9
    52c8:	af 92       	push	r10
    52ca:	cf 92       	push	r12
    52cc:	ef 92       	push	r14
    52ce:	0f 93       	push	r16
    52d0:	0f 2e       	mov	r0, r31
    52d2:	f7 e0       	ldi	r31, 0x07	; 7
    52d4:	8f 2e       	mov	r8, r31
    52d6:	f9 e2       	ldi	r31, 0x29	; 41
    52d8:	9f 2e       	mov	r9, r31
    52da:	f0 2d       	mov	r31, r0
    52dc:	68 94       	set
    52de:	aa 24       	eor	r10, r10
    52e0:	a4 f8       	bld	r10, 4
    52e2:	68 94       	set
    52e4:	cc 24       	eor	r12, r12
    52e6:	c4 f8       	bld	r12, 4
    52e8:	e1 2c       	mov	r14, r1
    52ea:	00 e0       	ldi	r16, 0x00	; 0
    52ec:	23 e0       	ldi	r18, 0x03	; 3
    52ee:	40 e8       	ldi	r20, 0x80	; 128
    52f0:	55 e2       	ldi	r21, 0x25	; 37
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	70 e0       	ldi	r23, 0x00	; 0
    52f6:	73 d0       	rcall	.+230    	; 0x53de <serial_create>
    52f8:	90 93 2c 15 	sts	0x152C, r25	; 0x80152c <_serial+0x1>
    52fc:	80 93 2b 15 	sts	0x152B, r24	; 0x80152b <_serial>
    5300:	0f 91       	pop	r16
    5302:	ef 90       	pop	r14
    5304:	cf 90       	pop	r12
    5306:	af 90       	pop	r10
    5308:	9f 90       	pop	r9
    530a:	8f 90       	pop	r8
    530c:	08 95       	ret

0000530e <mh_z19_injectCallBack>:
    530e:	90 93 27 15 	sts	0x1527, r25	; 0x801527 <_appCallBack+0x1>
    5312:	80 93 26 15 	sts	0x1526, r24	; 0x801526 <_appCallBack>
    5316:	08 95       	ret

00005318 <mh_z19_takeMeassuring>:
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
    531c:	cd b7       	in	r28, 0x3d	; 61
    531e:	de b7       	in	r29, 0x3e	; 62
    5320:	29 97       	sbiw	r28, 0x09	; 9
    5322:	0f b6       	in	r0, 0x3f	; 63
    5324:	f8 94       	cli
    5326:	de bf       	out	0x3e, r29	; 62
    5328:	0f be       	out	0x3f, r0	; 63
    532a:	cd bf       	out	0x3d, r28	; 61
    532c:	89 e0       	ldi	r24, 0x09	; 9
    532e:	e2 e4       	ldi	r30, 0x42	; 66
    5330:	f2 e0       	ldi	r31, 0x02	; 2
    5332:	9e 01       	movw	r18, r28
    5334:	2f 5f       	subi	r18, 0xFF	; 255
    5336:	3f 4f       	sbci	r19, 0xFF	; 255
    5338:	d9 01       	movw	r26, r18
    533a:	01 90       	ld	r0, Z+
    533c:	0d 92       	st	X+, r0
    533e:	8a 95       	dec	r24
    5340:	e1 f7       	brne	.-8      	; 0x533a <mh_z19_takeMeassuring+0x22>
    5342:	10 92 2a 15 	sts	0x152A, r1	; 0x80152a <_ppm+0x1>
    5346:	10 92 29 15 	sts	0x1529, r1	; 0x801529 <_ppm>
    534a:	80 91 2b 15 	lds	r24, 0x152B	; 0x80152b <_serial>
    534e:	90 91 2c 15 	lds	r25, 0x152C	; 0x80152c <_serial+0x1>
    5352:	00 97       	sbiw	r24, 0x00	; 0
    5354:	31 f0       	breq	.+12     	; 0x5362 <mh_z19_takeMeassuring+0x4a>
    5356:	42 2f       	mov	r20, r18
    5358:	53 2f       	mov	r21, r19
    535a:	69 e0       	ldi	r22, 0x09	; 9
    535c:	0e d1       	rcall	.+540    	; 0x557a <serial_sendBytes>
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	01 c0       	rjmp	.+2      	; 0x5364 <mh_z19_takeMeassuring+0x4c>
    5362:	82 e0       	ldi	r24, 0x02	; 2
    5364:	29 96       	adiw	r28, 0x09	; 9
    5366:	0f b6       	in	r0, 0x3f	; 63
    5368:	f8 94       	cli
    536a:	de bf       	out	0x3e, r29	; 62
    536c:	0f be       	out	0x3f, r0	; 63
    536e:	cd bf       	out	0x3d, r28	; 61
    5370:	df 91       	pop	r29
    5372:	cf 91       	pop	r28
    5374:	08 95       	ret

00005376 <rc_servo_setPosition>:
    5376:	65 36       	cpi	r22, 0x65	; 101
    5378:	0c f0       	brlt	.+2      	; 0x537c <rc_servo_setPosition+0x6>
    537a:	64 e6       	ldi	r22, 0x64	; 100
    537c:	6c 39       	cpi	r22, 0x9C	; 156
    537e:	0c f4       	brge	.+2      	; 0x5382 <rc_servo_setPosition+0xc>
    5380:	6c e9       	ldi	r22, 0x9C	; 156
    5382:	96 ef       	ldi	r25, 0xF6	; 246
    5384:	69 02       	muls	r22, r25
    5386:	b0 01       	movw	r22, r0
    5388:	11 24       	eor	r1, r1
    538a:	68 54       	subi	r22, 0x48	; 72
    538c:	74 4f       	sbci	r23, 0xF4	; 244
    538e:	81 11       	cpse	r24, r1
    5390:	05 c0       	rjmp	.+10     	; 0x539c <rc_servo_setPosition+0x26>
    5392:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    5396:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    539a:	08 95       	ret
    539c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    53a0:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    53a4:	08 95       	ret

000053a6 <rc_servo_initialise>:
    53a6:	ea e0       	ldi	r30, 0x0A	; 10
    53a8:	f1 e0       	ldi	r31, 0x01	; 1
    53aa:	80 81       	ld	r24, Z
    53ac:	88 61       	ori	r24, 0x18	; 24
    53ae:	80 83       	st	Z, r24
    53b0:	8f e3       	ldi	r24, 0x3F	; 63
    53b2:	9c e9       	ldi	r25, 0x9C	; 156
    53b4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    53b8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    53bc:	60 e0       	ldi	r22, 0x00	; 0
    53be:	80 e0       	ldi	r24, 0x00	; 0
    53c0:	da df       	rcall	.-76     	; 0x5376 <rc_servo_setPosition>
    53c2:	60 e0       	ldi	r22, 0x00	; 0
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	d7 df       	rcall	.-82     	; 0x5376 <rc_servo_setPosition>
    53c8:	e0 e2       	ldi	r30, 0x20	; 32
    53ca:	f1 e0       	ldi	r31, 0x01	; 1
    53cc:	80 81       	ld	r24, Z
    53ce:	82 6a       	ori	r24, 0xA2	; 162
    53d0:	80 83       	st	Z, r24
    53d2:	e1 e2       	ldi	r30, 0x21	; 33
    53d4:	f1 e0       	ldi	r31, 0x01	; 1
    53d6:	80 81       	ld	r24, Z
    53d8:	8a 61       	ori	r24, 0x1A	; 26
    53da:	80 83       	st	Z, r24
    53dc:	08 95       	ret

000053de <serial_create>:
    53de:	2f 92       	push	r2
    53e0:	3f 92       	push	r3
    53e2:	4f 92       	push	r4
    53e4:	5f 92       	push	r5
    53e6:	6f 92       	push	r6
    53e8:	7f 92       	push	r7
    53ea:	8f 92       	push	r8
    53ec:	9f 92       	push	r9
    53ee:	af 92       	push	r10
    53f0:	cf 92       	push	r12
    53f2:	ef 92       	push	r14
    53f4:	ff 92       	push	r15
    53f6:	0f 93       	push	r16
    53f8:	1f 93       	push	r17
    53fa:	cf 93       	push	r28
    53fc:	df 93       	push	r29
    53fe:	cd b7       	in	r28, 0x3d	; 61
    5400:	de b7       	in	r29, 0x3e	; 62
    5402:	f8 2e       	mov	r15, r24
    5404:	2a 01       	movw	r4, r20
    5406:	3b 01       	movw	r6, r22
    5408:	88 e0       	ldi	r24, 0x08	; 8
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <malloc>
    5410:	8c 01       	movw	r16, r24
    5412:	8f 2d       	mov	r24, r15
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	fc 01       	movw	r30, r24
    5418:	ee 0f       	add	r30, r30
    541a:	ff 1f       	adc	r31, r31
    541c:	e3 5d       	subi	r30, 0xD3	; 211
    541e:	fa 4e       	sbci	r31, 0xEA	; 234
    5420:	11 83       	std	Z+1, r17	; 0x01
    5422:	00 83       	st	Z, r16
    5424:	01 15       	cp	r16, r1
    5426:	11 05       	cpc	r17, r1
    5428:	09 f4       	brne	.+2      	; 0x542c <serial_create+0x4e>
    542a:	6a c0       	rjmp	.+212    	; 0x5500 <serial_create+0x122>
    542c:	88 0f       	add	r24, r24
    542e:	99 1f       	adc	r25, r25
    5430:	fc 01       	movw	r30, r24
    5432:	e5 5f       	subi	r30, 0xF5	; 245
    5434:	fd 4f       	sbci	r31, 0xFD	; 253
    5436:	80 81       	ld	r24, Z
    5438:	91 81       	ldd	r25, Z+1	; 0x01
    543a:	d8 01       	movw	r26, r16
    543c:	8d 93       	st	X+, r24
    543e:	9c 93       	st	X, r25
    5440:	8c 2d       	mov	r24, r12
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	88 0f       	add	r24, r24
    5446:	99 1f       	adc	r25, r25
    5448:	88 0f       	add	r24, r24
    544a:	99 1f       	adc	r25, r25
    544c:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <malloc>
    5450:	1c 01       	movw	r2, r24
    5452:	86 e0       	ldi	r24, 0x06	; 6
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <malloc>
    545a:	7c 01       	movw	r14, r24
    545c:	4c 2d       	mov	r20, r12
    545e:	b1 01       	movw	r22, r2
    5460:	be d6       	rcall	.+3452   	; 0x61de <fifo_init>
    5462:	f8 01       	movw	r30, r16
    5464:	f5 82       	std	Z+5, r15	; 0x05
    5466:	e4 82       	std	Z+4, r14	; 0x04
    5468:	8a 2d       	mov	r24, r10
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	88 0f       	add	r24, r24
    546e:	99 1f       	adc	r25, r25
    5470:	88 0f       	add	r24, r24
    5472:	99 1f       	adc	r25, r25
    5474:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <malloc>
    5478:	1c 01       	movw	r2, r24
    547a:	86 e0       	ldi	r24, 0x06	; 6
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <malloc>
    5482:	7c 01       	movw	r14, r24
    5484:	4a 2d       	mov	r20, r10
    5486:	b1 01       	movw	r22, r2
    5488:	aa d6       	rcall	.+3412   	; 0x61de <fifo_init>
    548a:	d8 01       	movw	r26, r16
    548c:	13 96       	adiw	r26, 0x03	; 3
    548e:	fc 92       	st	X, r15
    5490:	ee 92       	st	-X, r14
    5492:	12 97       	sbiw	r26, 0x02	; 2
    5494:	17 96       	adiw	r26, 0x07	; 7
    5496:	9c 92       	st	X, r9
    5498:	8e 92       	st	-X, r8
    549a:	16 97       	sbiw	r26, 0x06	; 6
    549c:	ff b6       	in	r15, 0x3f	; 63
    549e:	f8 94       	cli
    54a0:	ed 91       	ld	r30, X+
    54a2:	fc 91       	ld	r31, X
    54a4:	11 97       	sbiw	r26, 0x01	; 1
    54a6:	36 97       	sbiw	r30, 0x06	; 6
    54a8:	80 81       	ld	r24, Z
    54aa:	82 60       	ori	r24, 0x02	; 2
    54ac:	80 83       	st	Z, r24
    54ae:	8d 90       	ld	r8, X+
    54b0:	9c 90       	ld	r9, X
    54b2:	c3 01       	movw	r24, r6
    54b4:	b2 01       	movw	r22, r4
    54b6:	0e 94 05 35 	call	0x6a0a	; 0x6a0a <__floatunsisf>
    54ba:	20 e0       	ldi	r18, 0x00	; 0
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	40 e0       	ldi	r20, 0x00	; 0
    54c0:	51 e4       	ldi	r21, 0x41	; 65
    54c2:	a9 d8       	rcall	.-3758   	; 0x4616 <__mulsf3>
    54c4:	9b 01       	movw	r18, r22
    54c6:	ac 01       	movw	r20, r24
    54c8:	60 e0       	ldi	r22, 0x00	; 0
    54ca:	74 e2       	ldi	r23, 0x24	; 36
    54cc:	84 e7       	ldi	r24, 0x74	; 116
    54ce:	9b e4       	ldi	r25, 0x4B	; 75
    54d0:	0e 94 94 34 	call	0x6928	; 0x6928 <__divsf3>
    54d4:	20 e0       	ldi	r18, 0x00	; 0
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	40 e8       	ldi	r20, 0x80	; 128
    54da:	5f e3       	ldi	r21, 0x3F	; 63
    54dc:	ff d8       	rcall	.-3586   	; 0x46dc <__subsf3>
    54de:	13 d8       	rcall	.-4058   	; 0x4506 <__fixunssfsi>
    54e0:	f4 01       	movw	r30, r8
    54e2:	32 97       	sbiw	r30, 0x02	; 2
    54e4:	60 83       	st	Z, r22
    54e6:	d8 01       	movw	r26, r16
    54e8:	ed 91       	ld	r30, X+
    54ea:	fc 91       	ld	r31, X
    54ec:	11 97       	sbiw	r26, 0x01	; 1
    54ee:	35 97       	sbiw	r30, 0x05	; 5
    54f0:	88 e9       	ldi	r24, 0x98	; 152
    54f2:	80 83       	st	Z, r24
    54f4:	ed 91       	ld	r30, X+
    54f6:	fc 91       	ld	r31, X
    54f8:	34 97       	sbiw	r30, 0x04	; 4
    54fa:	86 e0       	ldi	r24, 0x06	; 6
    54fc:	80 83       	st	Z, r24
    54fe:	ff be       	out	0x3f, r15	; 63
    5500:	c8 01       	movw	r24, r16
    5502:	df 91       	pop	r29
    5504:	cf 91       	pop	r28
    5506:	1f 91       	pop	r17
    5508:	0f 91       	pop	r16
    550a:	ff 90       	pop	r15
    550c:	ef 90       	pop	r14
    550e:	cf 90       	pop	r12
    5510:	af 90       	pop	r10
    5512:	9f 90       	pop	r9
    5514:	8f 90       	pop	r8
    5516:	7f 90       	pop	r7
    5518:	6f 90       	pop	r6
    551a:	5f 90       	pop	r5
    551c:	4f 90       	pop	r4
    551e:	3f 90       	pop	r3
    5520:	2f 90       	pop	r2
    5522:	08 95       	ret

00005524 <serial_sendByte>:
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	dc 01       	movw	r26, r24
    552a:	89 2b       	or	r24, r25
    552c:	01 f1       	breq	.+64     	; 0x556e <serial_sendByte+0x4a>
    552e:	12 96       	adiw	r26, 0x02	; 2
    5530:	ed 91       	ld	r30, X+
    5532:	fc 91       	ld	r31, X
    5534:	13 97       	sbiw	r26, 0x03	; 3
    5536:	93 81       	ldd	r25, Z+3	; 0x03
    5538:	82 81       	ldd	r24, Z+2	; 0x02
    553a:	25 81       	ldd	r18, Z+5	; 0x05
    553c:	98 1b       	sub	r25, r24
    553e:	92 23       	and	r25, r18
    5540:	84 81       	ldd	r24, Z+4	; 0x04
    5542:	98 17       	cp	r25, r24
    5544:	b1 f0       	breq	.+44     	; 0x5572 <serial_sendByte+0x4e>
    5546:	83 81       	ldd	r24, Z+3	; 0x03
    5548:	26 95       	lsr	r18
    554a:	28 23       	and	r18, r24
    554c:	c0 81       	ld	r28, Z
    554e:	d1 81       	ldd	r29, Z+1	; 0x01
    5550:	c2 0f       	add	r28, r18
    5552:	d1 1d       	adc	r29, r1
    5554:	68 83       	st	Y, r22
    5556:	8f 5f       	subi	r24, 0xFF	; 255
    5558:	95 81       	ldd	r25, Z+5	; 0x05
    555a:	89 23       	and	r24, r25
    555c:	83 83       	std	Z+3, r24	; 0x03
    555e:	ed 91       	ld	r30, X+
    5560:	fc 91       	ld	r31, X
    5562:	35 97       	sbiw	r30, 0x05	; 5
    5564:	80 81       	ld	r24, Z
    5566:	80 62       	ori	r24, 0x20	; 32
    5568:	80 83       	st	Z, r24
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	03 c0       	rjmp	.+6      	; 0x5574 <serial_sendByte+0x50>
    556e:	81 e0       	ldi	r24, 0x01	; 1
    5570:	01 c0       	rjmp	.+2      	; 0x5574 <serial_sendByte+0x50>
    5572:	82 e0       	ldi	r24, 0x02	; 2
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	08 95       	ret

0000557a <serial_sendBytes>:
    557a:	ef 92       	push	r14
    557c:	ff 92       	push	r15
    557e:	0f 93       	push	r16
    5580:	1f 93       	push	r17
    5582:	cf 93       	push	r28
    5584:	df 93       	push	r29
    5586:	7c 01       	movw	r14, r24
    5588:	00 97       	sbiw	r24, 0x00	; 0
    558a:	09 f4       	brne	.+2      	; 0x558e <serial_sendBytes+0x14>
    558c:	41 c0       	rjmp	.+130    	; 0x5610 <serial_sendBytes+0x96>
    558e:	dc 01       	movw	r26, r24
    5590:	12 96       	adiw	r26, 0x02	; 2
    5592:	ed 91       	ld	r30, X+
    5594:	fc 91       	ld	r31, X
    5596:	13 97       	sbiw	r26, 0x03	; 3
    5598:	93 81       	ldd	r25, Z+3	; 0x03
    559a:	82 81       	ldd	r24, Z+2	; 0x02
    559c:	98 1b       	sub	r25, r24
    559e:	85 81       	ldd	r24, Z+5	; 0x05
    55a0:	98 23       	and	r25, r24
    55a2:	84 81       	ldd	r24, Z+4	; 0x04
    55a4:	89 1b       	sub	r24, r25
    55a6:	86 17       	cp	r24, r22
    55a8:	a8 f1       	brcs	.+106    	; 0x5614 <serial_sendBytes+0x9a>
    55aa:	66 23       	and	r22, r22
    55ac:	41 f1       	breq	.+80     	; 0x55fe <serial_sendBytes+0x84>
    55ae:	84 2f       	mov	r24, r20
    55b0:	95 2f       	mov	r25, r21
    55b2:	dc 01       	movw	r26, r24
    55b4:	61 50       	subi	r22, 0x01	; 1
    55b6:	46 2f       	mov	r20, r22
    55b8:	50 e0       	ldi	r21, 0x00	; 0
    55ba:	4f 5f       	subi	r20, 0xFF	; 255
    55bc:	5f 4f       	sbci	r21, 0xFF	; 255
    55be:	48 0f       	add	r20, r24
    55c0:	59 1f       	adc	r21, r25
    55c2:	e7 01       	movw	r28, r14
    55c4:	ea 81       	ldd	r30, Y+2	; 0x02
    55c6:	fb 81       	ldd	r31, Y+3	; 0x03
    55c8:	93 81       	ldd	r25, Z+3	; 0x03
    55ca:	82 81       	ldd	r24, Z+2	; 0x02
    55cc:	25 81       	ldd	r18, Z+5	; 0x05
    55ce:	98 1b       	sub	r25, r24
    55d0:	92 23       	and	r25, r18
    55d2:	84 81       	ldd	r24, Z+4	; 0x04
    55d4:	98 17       	cp	r25, r24
    55d6:	79 f0       	breq	.+30     	; 0x55f6 <serial_sendBytes+0x7c>
    55d8:	8c 91       	ld	r24, X
    55da:	93 81       	ldd	r25, Z+3	; 0x03
    55dc:	26 95       	lsr	r18
    55de:	29 23       	and	r18, r25
    55e0:	60 81       	ld	r22, Z
    55e2:	71 81       	ldd	r23, Z+1	; 0x01
    55e4:	8b 01       	movw	r16, r22
    55e6:	02 0f       	add	r16, r18
    55e8:	11 1d       	adc	r17, r1
    55ea:	e8 01       	movw	r28, r16
    55ec:	88 83       	st	Y, r24
    55ee:	9f 5f       	subi	r25, 0xFF	; 255
    55f0:	85 81       	ldd	r24, Z+5	; 0x05
    55f2:	98 23       	and	r25, r24
    55f4:	93 83       	std	Z+3, r25	; 0x03
    55f6:	11 96       	adiw	r26, 0x01	; 1
    55f8:	a4 17       	cp	r26, r20
    55fa:	b5 07       	cpc	r27, r21
    55fc:	11 f7       	brne	.-60     	; 0x55c2 <serial_sendBytes+0x48>
    55fe:	d7 01       	movw	r26, r14
    5600:	ed 91       	ld	r30, X+
    5602:	fc 91       	ld	r31, X
    5604:	35 97       	sbiw	r30, 0x05	; 5
    5606:	80 81       	ld	r24, Z
    5608:	80 62       	ori	r24, 0x20	; 32
    560a:	80 83       	st	Z, r24
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	03 c0       	rjmp	.+6      	; 0x5616 <serial_sendBytes+0x9c>
    5610:	81 e0       	ldi	r24, 0x01	; 1
    5612:	01 c0       	rjmp	.+2      	; 0x5616 <serial_sendBytes+0x9c>
    5614:	82 e0       	ldi	r24, 0x02	; 2
    5616:	df 91       	pop	r29
    5618:	cf 91       	pop	r28
    561a:	1f 91       	pop	r17
    561c:	0f 91       	pop	r16
    561e:	ff 90       	pop	r15
    5620:	ef 90       	pop	r14
    5622:	08 95       	ret

00005624 <serial_getByte>:
    5624:	00 97       	sbiw	r24, 0x00	; 0
    5626:	d1 f0       	breq	.+52     	; 0x565c <serial_getByte+0x38>
    5628:	dc 01       	movw	r26, r24
    562a:	14 96       	adiw	r26, 0x04	; 4
    562c:	ed 91       	ld	r30, X+
    562e:	fc 91       	ld	r31, X
    5630:	15 97       	sbiw	r26, 0x05	; 5
    5632:	93 81       	ldd	r25, Z+3	; 0x03
    5634:	82 81       	ldd	r24, Z+2	; 0x02
    5636:	98 17       	cp	r25, r24
    5638:	99 f0       	breq	.+38     	; 0x5660 <serial_getByte+0x3c>
    563a:	92 81       	ldd	r25, Z+2	; 0x02
    563c:	85 81       	ldd	r24, Z+5	; 0x05
    563e:	86 95       	lsr	r24
    5640:	89 23       	and	r24, r25
    5642:	a0 81       	ld	r26, Z
    5644:	b1 81       	ldd	r27, Z+1	; 0x01
    5646:	a8 0f       	add	r26, r24
    5648:	b1 1d       	adc	r27, r1
    564a:	8c 91       	ld	r24, X
    564c:	db 01       	movw	r26, r22
    564e:	8c 93       	st	X, r24
    5650:	9f 5f       	subi	r25, 0xFF	; 255
    5652:	85 81       	ldd	r24, Z+5	; 0x05
    5654:	98 23       	and	r25, r24
    5656:	92 83       	std	Z+2, r25	; 0x02
    5658:	80 e0       	ldi	r24, 0x00	; 0
    565a:	08 95       	ret
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	08 95       	ret
    5660:	83 e0       	ldi	r24, 0x03	; 3
    5662:	08 95       	ret

00005664 <__vector_25>:
    5664:	1f 92       	push	r1
    5666:	0f 92       	push	r0
    5668:	0f b6       	in	r0, 0x3f	; 63
    566a:	0f 92       	push	r0
    566c:	11 24       	eor	r1, r1
    566e:	0b b6       	in	r0, 0x3b	; 59
    5670:	0f 92       	push	r0
    5672:	2f 93       	push	r18
    5674:	3f 93       	push	r19
    5676:	4f 93       	push	r20
    5678:	5f 93       	push	r21
    567a:	6f 93       	push	r22
    567c:	7f 93       	push	r23
    567e:	8f 93       	push	r24
    5680:	9f 93       	push	r25
    5682:	af 93       	push	r26
    5684:	bf 93       	push	r27
    5686:	cf 93       	push	r28
    5688:	df 93       	push	r29
    568a:	ef 93       	push	r30
    568c:	ff 93       	push	r31
    568e:	a0 91 2d 15 	lds	r26, 0x152D	; 0x80152d <_ser_handle>
    5692:	b0 91 2e 15 	lds	r27, 0x152E	; 0x80152e <_ser_handle+0x1>
    5696:	10 97       	sbiw	r26, 0x00	; 0
    5698:	11 f1       	breq	.+68     	; 0x56de <__vector_25+0x7a>
    569a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    569e:	14 96       	adiw	r26, 0x04	; 4
    56a0:	ed 91       	ld	r30, X+
    56a2:	fc 91       	ld	r31, X
    56a4:	15 97       	sbiw	r26, 0x05	; 5
    56a6:	93 81       	ldd	r25, Z+3	; 0x03
    56a8:	82 81       	ldd	r24, Z+2	; 0x02
    56aa:	25 81       	ldd	r18, Z+5	; 0x05
    56ac:	98 1b       	sub	r25, r24
    56ae:	92 23       	and	r25, r18
    56b0:	84 81       	ldd	r24, Z+4	; 0x04
    56b2:	98 17       	cp	r25, r24
    56b4:	61 f0       	breq	.+24     	; 0x56ce <__vector_25+0x6a>
    56b6:	83 81       	ldd	r24, Z+3	; 0x03
    56b8:	26 95       	lsr	r18
    56ba:	28 23       	and	r18, r24
    56bc:	c0 81       	ld	r28, Z
    56be:	d1 81       	ldd	r29, Z+1	; 0x01
    56c0:	c2 0f       	add	r28, r18
    56c2:	d1 1d       	adc	r29, r1
    56c4:	68 83       	st	Y, r22
    56c6:	8f 5f       	subi	r24, 0xFF	; 255
    56c8:	95 81       	ldd	r25, Z+5	; 0x05
    56ca:	89 23       	and	r24, r25
    56cc:	83 83       	std	Z+3, r24	; 0x03
    56ce:	16 96       	adiw	r26, 0x06	; 6
    56d0:	ed 91       	ld	r30, X+
    56d2:	fc 91       	ld	r31, X
    56d4:	17 97       	sbiw	r26, 0x07	; 7
    56d6:	30 97       	sbiw	r30, 0x00	; 0
    56d8:	11 f0       	breq	.+4      	; 0x56de <__vector_25+0x7a>
    56da:	cd 01       	movw	r24, r26
    56dc:	19 95       	eicall
    56de:	ff 91       	pop	r31
    56e0:	ef 91       	pop	r30
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	bf 91       	pop	r27
    56e8:	af 91       	pop	r26
    56ea:	9f 91       	pop	r25
    56ec:	8f 91       	pop	r24
    56ee:	7f 91       	pop	r23
    56f0:	6f 91       	pop	r22
    56f2:	5f 91       	pop	r21
    56f4:	4f 91       	pop	r20
    56f6:	3f 91       	pop	r19
    56f8:	2f 91       	pop	r18
    56fa:	0f 90       	pop	r0
    56fc:	0b be       	out	0x3b, r0	; 59
    56fe:	0f 90       	pop	r0
    5700:	0f be       	out	0x3f, r0	; 63
    5702:	0f 90       	pop	r0
    5704:	1f 90       	pop	r1
    5706:	18 95       	reti

00005708 <__vector_26>:
    5708:	1f 92       	push	r1
    570a:	0f 92       	push	r0
    570c:	0f b6       	in	r0, 0x3f	; 63
    570e:	0f 92       	push	r0
    5710:	11 24       	eor	r1, r1
    5712:	0b b6       	in	r0, 0x3b	; 59
    5714:	0f 92       	push	r0
    5716:	2f 93       	push	r18
    5718:	8f 93       	push	r24
    571a:	9f 93       	push	r25
    571c:	af 93       	push	r26
    571e:	bf 93       	push	r27
    5720:	ef 93       	push	r30
    5722:	ff 93       	push	r31
    5724:	e0 91 2d 15 	lds	r30, 0x152D	; 0x80152d <_ser_handle>
    5728:	f0 91 2e 15 	lds	r31, 0x152E	; 0x80152e <_ser_handle+0x1>
    572c:	30 97       	sbiw	r30, 0x00	; 0
    572e:	b9 f0       	breq	.+46     	; 0x575e <__vector_26+0x56>
    5730:	02 80       	ldd	r0, Z+2	; 0x02
    5732:	f3 81       	ldd	r31, Z+3	; 0x03
    5734:	e0 2d       	mov	r30, r0
    5736:	93 81       	ldd	r25, Z+3	; 0x03
    5738:	82 81       	ldd	r24, Z+2	; 0x02
    573a:	98 17       	cp	r25, r24
    573c:	b1 f0       	breq	.+44     	; 0x576a <__vector_26+0x62>
    573e:	92 81       	ldd	r25, Z+2	; 0x02
    5740:	85 81       	ldd	r24, Z+5	; 0x05
    5742:	28 2f       	mov	r18, r24
    5744:	26 95       	lsr	r18
    5746:	29 23       	and	r18, r25
    5748:	a0 81       	ld	r26, Z
    574a:	b1 81       	ldd	r27, Z+1	; 0x01
    574c:	a2 0f       	add	r26, r18
    574e:	b1 1d       	adc	r27, r1
    5750:	2c 91       	ld	r18, X
    5752:	9f 5f       	subi	r25, 0xFF	; 255
    5754:	89 23       	and	r24, r25
    5756:	82 83       	std	Z+2, r24	; 0x02
    5758:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    575c:	0b c0       	rjmp	.+22     	; 0x5774 <__vector_26+0x6c>
    575e:	e1 ec       	ldi	r30, 0xC1	; 193
    5760:	f0 e0       	ldi	r31, 0x00	; 0
    5762:	80 81       	ld	r24, Z
    5764:	8f 7d       	andi	r24, 0xDF	; 223
    5766:	80 83       	st	Z, r24
    5768:	05 c0       	rjmp	.+10     	; 0x5774 <__vector_26+0x6c>
    576a:	e1 ec       	ldi	r30, 0xC1	; 193
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	80 81       	ld	r24, Z
    5770:	8f 7d       	andi	r24, 0xDF	; 223
    5772:	80 83       	st	Z, r24
    5774:	ff 91       	pop	r31
    5776:	ef 91       	pop	r30
    5778:	bf 91       	pop	r27
    577a:	af 91       	pop	r26
    577c:	9f 91       	pop	r25
    577e:	8f 91       	pop	r24
    5780:	2f 91       	pop	r18
    5782:	0f 90       	pop	r0
    5784:	0b be       	out	0x3b, r0	; 59
    5786:	0f 90       	pop	r0
    5788:	0f be       	out	0x3f, r0	; 63
    578a:	0f 90       	pop	r0
    578c:	1f 90       	pop	r1
    578e:	18 95       	reti

00005790 <__vector_36>:
    5790:	1f 92       	push	r1
    5792:	0f 92       	push	r0
    5794:	0f b6       	in	r0, 0x3f	; 63
    5796:	0f 92       	push	r0
    5798:	11 24       	eor	r1, r1
    579a:	0b b6       	in	r0, 0x3b	; 59
    579c:	0f 92       	push	r0
    579e:	2f 93       	push	r18
    57a0:	3f 93       	push	r19
    57a2:	4f 93       	push	r20
    57a4:	5f 93       	push	r21
    57a6:	6f 93       	push	r22
    57a8:	7f 93       	push	r23
    57aa:	8f 93       	push	r24
    57ac:	9f 93       	push	r25
    57ae:	af 93       	push	r26
    57b0:	bf 93       	push	r27
    57b2:	cf 93       	push	r28
    57b4:	df 93       	push	r29
    57b6:	ef 93       	push	r30
    57b8:	ff 93       	push	r31
    57ba:	a0 91 2f 15 	lds	r26, 0x152F	; 0x80152f <_ser_handle+0x2>
    57be:	b0 91 30 15 	lds	r27, 0x1530	; 0x801530 <_ser_handle+0x3>
    57c2:	10 97       	sbiw	r26, 0x00	; 0
    57c4:	11 f1       	breq	.+68     	; 0x580a <__vector_36+0x7a>
    57c6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    57ca:	14 96       	adiw	r26, 0x04	; 4
    57cc:	ed 91       	ld	r30, X+
    57ce:	fc 91       	ld	r31, X
    57d0:	15 97       	sbiw	r26, 0x05	; 5
    57d2:	93 81       	ldd	r25, Z+3	; 0x03
    57d4:	82 81       	ldd	r24, Z+2	; 0x02
    57d6:	25 81       	ldd	r18, Z+5	; 0x05
    57d8:	98 1b       	sub	r25, r24
    57da:	92 23       	and	r25, r18
    57dc:	84 81       	ldd	r24, Z+4	; 0x04
    57de:	98 17       	cp	r25, r24
    57e0:	61 f0       	breq	.+24     	; 0x57fa <__vector_36+0x6a>
    57e2:	83 81       	ldd	r24, Z+3	; 0x03
    57e4:	26 95       	lsr	r18
    57e6:	28 23       	and	r18, r24
    57e8:	c0 81       	ld	r28, Z
    57ea:	d1 81       	ldd	r29, Z+1	; 0x01
    57ec:	c2 0f       	add	r28, r18
    57ee:	d1 1d       	adc	r29, r1
    57f0:	68 83       	st	Y, r22
    57f2:	8f 5f       	subi	r24, 0xFF	; 255
    57f4:	95 81       	ldd	r25, Z+5	; 0x05
    57f6:	89 23       	and	r24, r25
    57f8:	83 83       	std	Z+3, r24	; 0x03
    57fa:	16 96       	adiw	r26, 0x06	; 6
    57fc:	ed 91       	ld	r30, X+
    57fe:	fc 91       	ld	r31, X
    5800:	17 97       	sbiw	r26, 0x07	; 7
    5802:	30 97       	sbiw	r30, 0x00	; 0
    5804:	11 f0       	breq	.+4      	; 0x580a <__vector_36+0x7a>
    5806:	cd 01       	movw	r24, r26
    5808:	19 95       	eicall
    580a:	ff 91       	pop	r31
    580c:	ef 91       	pop	r30
    580e:	df 91       	pop	r29
    5810:	cf 91       	pop	r28
    5812:	bf 91       	pop	r27
    5814:	af 91       	pop	r26
    5816:	9f 91       	pop	r25
    5818:	8f 91       	pop	r24
    581a:	7f 91       	pop	r23
    581c:	6f 91       	pop	r22
    581e:	5f 91       	pop	r21
    5820:	4f 91       	pop	r20
    5822:	3f 91       	pop	r19
    5824:	2f 91       	pop	r18
    5826:	0f 90       	pop	r0
    5828:	0b be       	out	0x3b, r0	; 59
    582a:	0f 90       	pop	r0
    582c:	0f be       	out	0x3f, r0	; 63
    582e:	0f 90       	pop	r0
    5830:	1f 90       	pop	r1
    5832:	18 95       	reti

00005834 <__vector_37>:
    5834:	1f 92       	push	r1
    5836:	0f 92       	push	r0
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	0f 92       	push	r0
    583c:	11 24       	eor	r1, r1
    583e:	0b b6       	in	r0, 0x3b	; 59
    5840:	0f 92       	push	r0
    5842:	2f 93       	push	r18
    5844:	8f 93       	push	r24
    5846:	9f 93       	push	r25
    5848:	af 93       	push	r26
    584a:	bf 93       	push	r27
    584c:	ef 93       	push	r30
    584e:	ff 93       	push	r31
    5850:	e0 91 2f 15 	lds	r30, 0x152F	; 0x80152f <_ser_handle+0x2>
    5854:	f0 91 30 15 	lds	r31, 0x1530	; 0x801530 <_ser_handle+0x3>
    5858:	30 97       	sbiw	r30, 0x00	; 0
    585a:	b9 f0       	breq	.+46     	; 0x588a <__vector_37+0x56>
    585c:	02 80       	ldd	r0, Z+2	; 0x02
    585e:	f3 81       	ldd	r31, Z+3	; 0x03
    5860:	e0 2d       	mov	r30, r0
    5862:	93 81       	ldd	r25, Z+3	; 0x03
    5864:	82 81       	ldd	r24, Z+2	; 0x02
    5866:	98 17       	cp	r25, r24
    5868:	b1 f0       	breq	.+44     	; 0x5896 <__vector_37+0x62>
    586a:	92 81       	ldd	r25, Z+2	; 0x02
    586c:	85 81       	ldd	r24, Z+5	; 0x05
    586e:	28 2f       	mov	r18, r24
    5870:	26 95       	lsr	r18
    5872:	29 23       	and	r18, r25
    5874:	a0 81       	ld	r26, Z
    5876:	b1 81       	ldd	r27, Z+1	; 0x01
    5878:	a2 0f       	add	r26, r18
    587a:	b1 1d       	adc	r27, r1
    587c:	2c 91       	ld	r18, X
    587e:	9f 5f       	subi	r25, 0xFF	; 255
    5880:	89 23       	and	r24, r25
    5882:	82 83       	std	Z+2, r24	; 0x02
    5884:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5888:	0b c0       	rjmp	.+22     	; 0x58a0 <__vector_37+0x6c>
    588a:	e9 ec       	ldi	r30, 0xC9	; 201
    588c:	f0 e0       	ldi	r31, 0x00	; 0
    588e:	80 81       	ld	r24, Z
    5890:	8f 7d       	andi	r24, 0xDF	; 223
    5892:	80 83       	st	Z, r24
    5894:	05 c0       	rjmp	.+10     	; 0x58a0 <__vector_37+0x6c>
    5896:	e9 ec       	ldi	r30, 0xC9	; 201
    5898:	f0 e0       	ldi	r31, 0x00	; 0
    589a:	80 81       	ld	r24, Z
    589c:	8f 7d       	andi	r24, 0xDF	; 223
    589e:	80 83       	st	Z, r24
    58a0:	ff 91       	pop	r31
    58a2:	ef 91       	pop	r30
    58a4:	bf 91       	pop	r27
    58a6:	af 91       	pop	r26
    58a8:	9f 91       	pop	r25
    58aa:	8f 91       	pop	r24
    58ac:	2f 91       	pop	r18
    58ae:	0f 90       	pop	r0
    58b0:	0b be       	out	0x3b, r0	; 59
    58b2:	0f 90       	pop	r0
    58b4:	0f be       	out	0x3f, r0	; 63
    58b6:	0f 90       	pop	r0
    58b8:	1f 90       	pop	r1
    58ba:	18 95       	reti

000058bc <__vector_51>:
    58bc:	1f 92       	push	r1
    58be:	0f 92       	push	r0
    58c0:	0f b6       	in	r0, 0x3f	; 63
    58c2:	0f 92       	push	r0
    58c4:	11 24       	eor	r1, r1
    58c6:	0b b6       	in	r0, 0x3b	; 59
    58c8:	0f 92       	push	r0
    58ca:	2f 93       	push	r18
    58cc:	3f 93       	push	r19
    58ce:	4f 93       	push	r20
    58d0:	5f 93       	push	r21
    58d2:	6f 93       	push	r22
    58d4:	7f 93       	push	r23
    58d6:	8f 93       	push	r24
    58d8:	9f 93       	push	r25
    58da:	af 93       	push	r26
    58dc:	bf 93       	push	r27
    58de:	cf 93       	push	r28
    58e0:	df 93       	push	r29
    58e2:	ef 93       	push	r30
    58e4:	ff 93       	push	r31
    58e6:	a0 91 31 15 	lds	r26, 0x1531	; 0x801531 <_ser_handle+0x4>
    58ea:	b0 91 32 15 	lds	r27, 0x1532	; 0x801532 <_ser_handle+0x5>
    58ee:	10 97       	sbiw	r26, 0x00	; 0
    58f0:	11 f1       	breq	.+68     	; 0x5936 <__vector_51+0x7a>
    58f2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    58f6:	14 96       	adiw	r26, 0x04	; 4
    58f8:	ed 91       	ld	r30, X+
    58fa:	fc 91       	ld	r31, X
    58fc:	15 97       	sbiw	r26, 0x05	; 5
    58fe:	93 81       	ldd	r25, Z+3	; 0x03
    5900:	82 81       	ldd	r24, Z+2	; 0x02
    5902:	25 81       	ldd	r18, Z+5	; 0x05
    5904:	98 1b       	sub	r25, r24
    5906:	92 23       	and	r25, r18
    5908:	84 81       	ldd	r24, Z+4	; 0x04
    590a:	98 17       	cp	r25, r24
    590c:	61 f0       	breq	.+24     	; 0x5926 <__vector_51+0x6a>
    590e:	83 81       	ldd	r24, Z+3	; 0x03
    5910:	26 95       	lsr	r18
    5912:	28 23       	and	r18, r24
    5914:	c0 81       	ld	r28, Z
    5916:	d1 81       	ldd	r29, Z+1	; 0x01
    5918:	c2 0f       	add	r28, r18
    591a:	d1 1d       	adc	r29, r1
    591c:	68 83       	st	Y, r22
    591e:	8f 5f       	subi	r24, 0xFF	; 255
    5920:	95 81       	ldd	r25, Z+5	; 0x05
    5922:	89 23       	and	r24, r25
    5924:	83 83       	std	Z+3, r24	; 0x03
    5926:	16 96       	adiw	r26, 0x06	; 6
    5928:	ed 91       	ld	r30, X+
    592a:	fc 91       	ld	r31, X
    592c:	17 97       	sbiw	r26, 0x07	; 7
    592e:	30 97       	sbiw	r30, 0x00	; 0
    5930:	11 f0       	breq	.+4      	; 0x5936 <__vector_51+0x7a>
    5932:	cd 01       	movw	r24, r26
    5934:	19 95       	eicall
    5936:	ff 91       	pop	r31
    5938:	ef 91       	pop	r30
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	bf 91       	pop	r27
    5940:	af 91       	pop	r26
    5942:	9f 91       	pop	r25
    5944:	8f 91       	pop	r24
    5946:	7f 91       	pop	r23
    5948:	6f 91       	pop	r22
    594a:	5f 91       	pop	r21
    594c:	4f 91       	pop	r20
    594e:	3f 91       	pop	r19
    5950:	2f 91       	pop	r18
    5952:	0f 90       	pop	r0
    5954:	0b be       	out	0x3b, r0	; 59
    5956:	0f 90       	pop	r0
    5958:	0f be       	out	0x3f, r0	; 63
    595a:	0f 90       	pop	r0
    595c:	1f 90       	pop	r1
    595e:	18 95       	reti

00005960 <__vector_52>:
    5960:	1f 92       	push	r1
    5962:	0f 92       	push	r0
    5964:	0f b6       	in	r0, 0x3f	; 63
    5966:	0f 92       	push	r0
    5968:	11 24       	eor	r1, r1
    596a:	0b b6       	in	r0, 0x3b	; 59
    596c:	0f 92       	push	r0
    596e:	2f 93       	push	r18
    5970:	8f 93       	push	r24
    5972:	9f 93       	push	r25
    5974:	af 93       	push	r26
    5976:	bf 93       	push	r27
    5978:	ef 93       	push	r30
    597a:	ff 93       	push	r31
    597c:	e0 91 31 15 	lds	r30, 0x1531	; 0x801531 <_ser_handle+0x4>
    5980:	f0 91 32 15 	lds	r31, 0x1532	; 0x801532 <_ser_handle+0x5>
    5984:	30 97       	sbiw	r30, 0x00	; 0
    5986:	b9 f0       	breq	.+46     	; 0x59b6 <__vector_52+0x56>
    5988:	02 80       	ldd	r0, Z+2	; 0x02
    598a:	f3 81       	ldd	r31, Z+3	; 0x03
    598c:	e0 2d       	mov	r30, r0
    598e:	93 81       	ldd	r25, Z+3	; 0x03
    5990:	82 81       	ldd	r24, Z+2	; 0x02
    5992:	98 17       	cp	r25, r24
    5994:	b1 f0       	breq	.+44     	; 0x59c2 <__vector_52+0x62>
    5996:	92 81       	ldd	r25, Z+2	; 0x02
    5998:	85 81       	ldd	r24, Z+5	; 0x05
    599a:	28 2f       	mov	r18, r24
    599c:	26 95       	lsr	r18
    599e:	29 23       	and	r18, r25
    59a0:	a0 81       	ld	r26, Z
    59a2:	b1 81       	ldd	r27, Z+1	; 0x01
    59a4:	a2 0f       	add	r26, r18
    59a6:	b1 1d       	adc	r27, r1
    59a8:	2c 91       	ld	r18, X
    59aa:	9f 5f       	subi	r25, 0xFF	; 255
    59ac:	89 23       	and	r24, r25
    59ae:	82 83       	std	Z+2, r24	; 0x02
    59b0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    59b4:	0b c0       	rjmp	.+22     	; 0x59cc <__vector_52+0x6c>
    59b6:	e1 ed       	ldi	r30, 0xD1	; 209
    59b8:	f0 e0       	ldi	r31, 0x00	; 0
    59ba:	80 81       	ld	r24, Z
    59bc:	8f 7d       	andi	r24, 0xDF	; 223
    59be:	80 83       	st	Z, r24
    59c0:	05 c0       	rjmp	.+10     	; 0x59cc <__vector_52+0x6c>
    59c2:	e1 ed       	ldi	r30, 0xD1	; 209
    59c4:	f0 e0       	ldi	r31, 0x00	; 0
    59c6:	80 81       	ld	r24, Z
    59c8:	8f 7d       	andi	r24, 0xDF	; 223
    59ca:	80 83       	st	Z, r24
    59cc:	ff 91       	pop	r31
    59ce:	ef 91       	pop	r30
    59d0:	bf 91       	pop	r27
    59d2:	af 91       	pop	r26
    59d4:	9f 91       	pop	r25
    59d6:	8f 91       	pop	r24
    59d8:	2f 91       	pop	r18
    59da:	0f 90       	pop	r0
    59dc:	0b be       	out	0x3b, r0	; 59
    59de:	0f 90       	pop	r0
    59e0:	0f be       	out	0x3f, r0	; 63
    59e2:	0f 90       	pop	r0
    59e4:	1f 90       	pop	r1
    59e6:	18 95       	reti

000059e8 <__vector_54>:
    59e8:	1f 92       	push	r1
    59ea:	0f 92       	push	r0
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	0f 92       	push	r0
    59f0:	11 24       	eor	r1, r1
    59f2:	0b b6       	in	r0, 0x3b	; 59
    59f4:	0f 92       	push	r0
    59f6:	2f 93       	push	r18
    59f8:	3f 93       	push	r19
    59fa:	4f 93       	push	r20
    59fc:	5f 93       	push	r21
    59fe:	6f 93       	push	r22
    5a00:	7f 93       	push	r23
    5a02:	8f 93       	push	r24
    5a04:	9f 93       	push	r25
    5a06:	af 93       	push	r26
    5a08:	bf 93       	push	r27
    5a0a:	cf 93       	push	r28
    5a0c:	df 93       	push	r29
    5a0e:	ef 93       	push	r30
    5a10:	ff 93       	push	r31
    5a12:	a0 91 33 15 	lds	r26, 0x1533	; 0x801533 <_ser_handle+0x6>
    5a16:	b0 91 34 15 	lds	r27, 0x1534	; 0x801534 <_ser_handle+0x7>
    5a1a:	10 97       	sbiw	r26, 0x00	; 0
    5a1c:	11 f1       	breq	.+68     	; 0x5a62 <__vector_54+0x7a>
    5a1e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5a22:	14 96       	adiw	r26, 0x04	; 4
    5a24:	ed 91       	ld	r30, X+
    5a26:	fc 91       	ld	r31, X
    5a28:	15 97       	sbiw	r26, 0x05	; 5
    5a2a:	93 81       	ldd	r25, Z+3	; 0x03
    5a2c:	82 81       	ldd	r24, Z+2	; 0x02
    5a2e:	25 81       	ldd	r18, Z+5	; 0x05
    5a30:	98 1b       	sub	r25, r24
    5a32:	92 23       	and	r25, r18
    5a34:	84 81       	ldd	r24, Z+4	; 0x04
    5a36:	98 17       	cp	r25, r24
    5a38:	61 f0       	breq	.+24     	; 0x5a52 <__vector_54+0x6a>
    5a3a:	83 81       	ldd	r24, Z+3	; 0x03
    5a3c:	26 95       	lsr	r18
    5a3e:	28 23       	and	r18, r24
    5a40:	c0 81       	ld	r28, Z
    5a42:	d1 81       	ldd	r29, Z+1	; 0x01
    5a44:	c2 0f       	add	r28, r18
    5a46:	d1 1d       	adc	r29, r1
    5a48:	68 83       	st	Y, r22
    5a4a:	8f 5f       	subi	r24, 0xFF	; 255
    5a4c:	95 81       	ldd	r25, Z+5	; 0x05
    5a4e:	89 23       	and	r24, r25
    5a50:	83 83       	std	Z+3, r24	; 0x03
    5a52:	16 96       	adiw	r26, 0x06	; 6
    5a54:	ed 91       	ld	r30, X+
    5a56:	fc 91       	ld	r31, X
    5a58:	17 97       	sbiw	r26, 0x07	; 7
    5a5a:	30 97       	sbiw	r30, 0x00	; 0
    5a5c:	11 f0       	breq	.+4      	; 0x5a62 <__vector_54+0x7a>
    5a5e:	cd 01       	movw	r24, r26
    5a60:	19 95       	eicall
    5a62:	ff 91       	pop	r31
    5a64:	ef 91       	pop	r30
    5a66:	df 91       	pop	r29
    5a68:	cf 91       	pop	r28
    5a6a:	bf 91       	pop	r27
    5a6c:	af 91       	pop	r26
    5a6e:	9f 91       	pop	r25
    5a70:	8f 91       	pop	r24
    5a72:	7f 91       	pop	r23
    5a74:	6f 91       	pop	r22
    5a76:	5f 91       	pop	r21
    5a78:	4f 91       	pop	r20
    5a7a:	3f 91       	pop	r19
    5a7c:	2f 91       	pop	r18
    5a7e:	0f 90       	pop	r0
    5a80:	0b be       	out	0x3b, r0	; 59
    5a82:	0f 90       	pop	r0
    5a84:	0f be       	out	0x3f, r0	; 63
    5a86:	0f 90       	pop	r0
    5a88:	1f 90       	pop	r1
    5a8a:	18 95       	reti

00005a8c <__vector_55>:
    5a8c:	1f 92       	push	r1
    5a8e:	0f 92       	push	r0
    5a90:	0f b6       	in	r0, 0x3f	; 63
    5a92:	0f 92       	push	r0
    5a94:	11 24       	eor	r1, r1
    5a96:	0b b6       	in	r0, 0x3b	; 59
    5a98:	0f 92       	push	r0
    5a9a:	2f 93       	push	r18
    5a9c:	8f 93       	push	r24
    5a9e:	9f 93       	push	r25
    5aa0:	af 93       	push	r26
    5aa2:	bf 93       	push	r27
    5aa4:	ef 93       	push	r30
    5aa6:	ff 93       	push	r31
    5aa8:	e0 91 33 15 	lds	r30, 0x1533	; 0x801533 <_ser_handle+0x6>
    5aac:	f0 91 34 15 	lds	r31, 0x1534	; 0x801534 <_ser_handle+0x7>
    5ab0:	30 97       	sbiw	r30, 0x00	; 0
    5ab2:	b9 f0       	breq	.+46     	; 0x5ae2 <__vector_55+0x56>
    5ab4:	02 80       	ldd	r0, Z+2	; 0x02
    5ab6:	f3 81       	ldd	r31, Z+3	; 0x03
    5ab8:	e0 2d       	mov	r30, r0
    5aba:	93 81       	ldd	r25, Z+3	; 0x03
    5abc:	82 81       	ldd	r24, Z+2	; 0x02
    5abe:	98 17       	cp	r25, r24
    5ac0:	b1 f0       	breq	.+44     	; 0x5aee <__vector_55+0x62>
    5ac2:	92 81       	ldd	r25, Z+2	; 0x02
    5ac4:	85 81       	ldd	r24, Z+5	; 0x05
    5ac6:	28 2f       	mov	r18, r24
    5ac8:	26 95       	lsr	r18
    5aca:	29 23       	and	r18, r25
    5acc:	a0 81       	ld	r26, Z
    5ace:	b1 81       	ldd	r27, Z+1	; 0x01
    5ad0:	a2 0f       	add	r26, r18
    5ad2:	b1 1d       	adc	r27, r1
    5ad4:	2c 91       	ld	r18, X
    5ad6:	9f 5f       	subi	r25, 0xFF	; 255
    5ad8:	89 23       	and	r24, r25
    5ada:	82 83       	std	Z+2, r24	; 0x02
    5adc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5ae0:	0b c0       	rjmp	.+22     	; 0x5af8 <__vector_55+0x6c>
    5ae2:	e1 e3       	ldi	r30, 0x31	; 49
    5ae4:	f1 e0       	ldi	r31, 0x01	; 1
    5ae6:	80 81       	ld	r24, Z
    5ae8:	8f 7d       	andi	r24, 0xDF	; 223
    5aea:	80 83       	st	Z, r24
    5aec:	05 c0       	rjmp	.+10     	; 0x5af8 <__vector_55+0x6c>
    5aee:	e1 e3       	ldi	r30, 0x31	; 49
    5af0:	f1 e0       	ldi	r31, 0x01	; 1
    5af2:	80 81       	ld	r24, Z
    5af4:	8f 7d       	andi	r24, 0xDF	; 223
    5af6:	80 83       	st	Z, r24
    5af8:	ff 91       	pop	r31
    5afa:	ef 91       	pop	r30
    5afc:	bf 91       	pop	r27
    5afe:	af 91       	pop	r26
    5b00:	9f 91       	pop	r25
    5b02:	8f 91       	pop	r24
    5b04:	2f 91       	pop	r18
    5b06:	0f 90       	pop	r0
    5b08:	0b be       	out	0x3b, r0	; 59
    5b0a:	0f 90       	pop	r0
    5b0c:	0f be       	out	0x3f, r0	; 63
    5b0e:	0f 90       	pop	r0
    5b10:	1f 90       	pop	r1
    5b12:	18 95       	reti

00005b14 <usart_getchar>:
    5b14:	cf 93       	push	r28
    5b16:	df 93       	push	r29
    5b18:	1f 92       	push	r1
    5b1a:	cd b7       	in	r28, 0x3d	; 61
    5b1c:	de b7       	in	r29, 0x3e	; 62
    5b1e:	be 01       	movw	r22, r28
    5b20:	6f 5f       	subi	r22, 0xFF	; 255
    5b22:	7f 4f       	sbci	r23, 0xFF	; 255
    5b24:	80 91 35 15 	lds	r24, 0x1535	; 0x801535 <_com_serial_instance>
    5b28:	90 91 36 15 	lds	r25, 0x1536	; 0x801536 <_com_serial_instance+0x1>
    5b2c:	7b dd       	rcall	.-1290   	; 0x5624 <serial_getByte>
    5b2e:	81 11       	cpse	r24, r1
    5b30:	f6 cf       	rjmp	.-20     	; 0x5b1e <usart_getchar+0xa>
    5b32:	89 81       	ldd	r24, Y+1	; 0x01
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	0f 90       	pop	r0
    5b38:	df 91       	pop	r29
    5b3a:	cf 91       	pop	r28
    5b3c:	08 95       	ret

00005b3e <usart_putchar>:
    5b3e:	68 2f       	mov	r22, r24
    5b40:	80 91 35 15 	lds	r24, 0x1535	; 0x801535 <_com_serial_instance>
    5b44:	90 91 36 15 	lds	r25, 0x1536	; 0x801536 <_com_serial_instance+0x1>
    5b48:	ed dc       	rcall	.-1574   	; 0x5524 <serial_sendByte>
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	08 95       	ret

00005b50 <stdio_initialise>:
    5b50:	8f 92       	push	r8
    5b52:	9f 92       	push	r9
    5b54:	af 92       	push	r10
    5b56:	cf 92       	push	r12
    5b58:	ef 92       	push	r14
    5b5a:	0f 93       	push	r16
    5b5c:	81 2c       	mov	r8, r1
    5b5e:	91 2c       	mov	r9, r1
    5b60:	68 94       	set
    5b62:	aa 24       	eor	r10, r10
    5b64:	a7 f8       	bld	r10, 7
    5b66:	68 94       	set
    5b68:	cc 24       	eor	r12, r12
    5b6a:	c7 f8       	bld	r12, 7
    5b6c:	e1 2c       	mov	r14, r1
    5b6e:	00 e0       	ldi	r16, 0x00	; 0
    5b70:	23 e0       	ldi	r18, 0x03	; 3
    5b72:	40 e0       	ldi	r20, 0x00	; 0
    5b74:	51 ee       	ldi	r21, 0xE1	; 225
    5b76:	60 e0       	ldi	r22, 0x00	; 0
    5b78:	70 e0       	ldi	r23, 0x00	; 0
    5b7a:	31 dc       	rcall	.-1950   	; 0x53de <serial_create>
    5b7c:	90 93 36 15 	sts	0x1536, r25	; 0x801536 <_com_serial_instance+0x1>
    5b80:	80 93 35 15 	sts	0x1535, r24	; 0x801535 <_com_serial_instance>
    5b84:	ef e6       	ldi	r30, 0x6F	; 111
    5b86:	f5 e1       	ldi	r31, 0x15	; 21
    5b88:	83 e1       	ldi	r24, 0x13	; 19
    5b8a:	92 e0       	ldi	r25, 0x02	; 2
    5b8c:	91 83       	std	Z+1, r25	; 0x01
    5b8e:	80 83       	st	Z, r24
    5b90:	93 83       	std	Z+3, r25	; 0x03
    5b92:	82 83       	std	Z+2, r24	; 0x02
    5b94:	0f 91       	pop	r16
    5b96:	ef 90       	pop	r14
    5b98:	cf 90       	pop	r12
    5b9a:	af 90       	pop	r10
    5b9c:	9f 90       	pop	r9
    5b9e:	8f 90       	pop	r8
    5ba0:	08 95       	ret

00005ba2 <_callBack>:
    5ba2:	e0 91 3f 15 	lds	r30, 0x153F	; 0x80153f <_callBackFunction>
    5ba6:	f0 91 40 15 	lds	r31, 0x1540	; 0x801540 <_callBackFunction+0x1>
    5baa:	30 97       	sbiw	r30, 0x00	; 0
    5bac:	09 f0       	breq	.+2      	; 0x5bb0 <_callBack+0xe>
    5bae:	19 95       	eicall
    5bb0:	08 95       	ret

00005bb2 <_tsl2591TwiCallback>:
    5bb2:	64 50       	subi	r22, 0x04	; 4
    5bb4:	62 30       	cpi	r22, 0x02	; 2
    5bb6:	08 f0       	brcs	.+2      	; 0x5bba <_tsl2591TwiCallback+0x8>
    5bb8:	3b c0       	rjmp	.+118    	; 0x5c30 <_tsl2591TwiCallback+0x7e>
    5bba:	20 91 3e 15 	lds	r18, 0x153E	; 0x80153e <_nextState>
    5bbe:	22 30       	cpi	r18, 0x02	; 2
    5bc0:	79 f0       	breq	.+30     	; 0x5be0 <_tsl2591TwiCallback+0x2e>
    5bc2:	18 f4       	brcc	.+6      	; 0x5bca <_tsl2591TwiCallback+0x18>
    5bc4:	21 30       	cpi	r18, 0x01	; 1
    5bc6:	31 f0       	breq	.+12     	; 0x5bd4 <_tsl2591TwiCallback+0x22>
    5bc8:	30 c0       	rjmp	.+96     	; 0x5c2a <_tsl2591TwiCallback+0x78>
    5bca:	23 30       	cpi	r18, 0x03	; 3
    5bcc:	81 f0       	breq	.+32     	; 0x5bee <_tsl2591TwiCallback+0x3c>
    5bce:	24 30       	cpi	r18, 0x04	; 4
    5bd0:	a1 f0       	breq	.+40     	; 0x5bfa <_tsl2591TwiCallback+0x48>
    5bd2:	2b c0       	rjmp	.+86     	; 0x5c2a <_tsl2591TwiCallback+0x78>
    5bd4:	22 e0       	ldi	r18, 0x02	; 2
    5bd6:	20 93 3e 15 	sts	0x153E, r18	; 0x80153e <_nextState>
    5bda:	61 e0       	ldi	r22, 0x01	; 1
    5bdc:	10 c2       	rjmp	.+1056   	; 0x5ffe <twiReceive>
    5bde:	08 95       	ret
    5be0:	fa 01       	movw	r30, r20
    5be2:	80 81       	ld	r24, Z
    5be4:	80 93 3b 15 	sts	0x153B, r24	; 0x80153b <_deviceId>
    5be8:	82 e0       	ldi	r24, 0x02	; 2
    5bea:	db cf       	rjmp	.-74     	; 0x5ba2 <_callBack>
    5bec:	08 95       	ret
    5bee:	24 e0       	ldi	r18, 0x04	; 4
    5bf0:	20 93 3e 15 	sts	0x153E, r18	; 0x80153e <_nextState>
    5bf4:	64 e0       	ldi	r22, 0x04	; 4
    5bf6:	03 c2       	rjmp	.+1030   	; 0x5ffe <twiReceive>
    5bf8:	08 95       	ret
    5bfa:	fa 01       	movw	r30, r20
    5bfc:	81 81       	ldd	r24, Z+1	; 0x01
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	98 2f       	mov	r25, r24
    5c02:	88 27       	eor	r24, r24
    5c04:	20 81       	ld	r18, Z
    5c06:	82 2b       	or	r24, r18
    5c08:	90 93 3a 15 	sts	0x153A, r25	; 0x80153a <_fullSpectrumRaw+0x1>
    5c0c:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <_fullSpectrumRaw>
    5c10:	83 81       	ldd	r24, Z+3	; 0x03
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	98 2f       	mov	r25, r24
    5c16:	88 27       	eor	r24, r24
    5c18:	22 81       	ldd	r18, Z+2	; 0x02
    5c1a:	82 2b       	or	r24, r18
    5c1c:	90 93 38 15 	sts	0x1538, r25	; 0x801538 <_infraredRaw+0x1>
    5c20:	80 93 37 15 	sts	0x1537, r24	; 0x801537 <_infraredRaw>
    5c24:	81 e0       	ldi	r24, 0x01	; 1
    5c26:	bd cf       	rjmp	.-134    	; 0x5ba2 <_callBack>
    5c28:	08 95       	ret
    5c2a:	80 e0       	ldi	r24, 0x00	; 0
    5c2c:	ba cf       	rjmp	.-140    	; 0x5ba2 <_callBack>
    5c2e:	08 95       	ret
    5c30:	10 92 3e 15 	sts	0x153E, r1	; 0x80153e <_nextState>
    5c34:	86 e0       	ldi	r24, 0x06	; 6
    5c36:	b5 cf       	rjmp	.-150    	; 0x5ba2 <_callBack>
    5c38:	08 95       	ret

00005c3a <_twiTransmit>:
    5c3a:	20 91 41 15 	lds	r18, 0x1541	; 0x801541 <_twiHandler>
    5c3e:	30 91 42 15 	lds	r19, 0x1542	; 0x801542 <_twiHandler+0x1>
    5c42:	21 15       	cp	r18, r1
    5c44:	31 05       	cpc	r19, r1
    5c46:	41 f0       	breq	.+16     	; 0x5c58 <_twiTransmit+0x1e>
    5c48:	46 2f       	mov	r20, r22
    5c4a:	bc 01       	movw	r22, r24
    5c4c:	c9 01       	movw	r24, r18
    5c4e:	8b d1       	rcall	.+790    	; 0x5f66 <twiTransmit>
    5c50:	82 30       	cpi	r24, 0x02	; 2
    5c52:	21 f0       	breq	.+8      	; 0x5c5c <_twiTransmit+0x22>
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	08 95       	ret
    5c58:	87 e0       	ldi	r24, 0x07	; 7
    5c5a:	08 95       	ret
    5c5c:	85 e0       	ldi	r24, 0x05	; 5
    5c5e:	08 95       	ret

00005c60 <tsl2591_initialise>:
    5c60:	0f 93       	push	r16
    5c62:	1f 93       	push	r17
    5c64:	90 93 40 15 	sts	0x1540, r25	; 0x801540 <_callBackFunction+0x1>
    5c68:	80 93 3f 15 	sts	0x153F, r24	; 0x80153f <_callBackFunction>
    5c6c:	09 ed       	ldi	r16, 0xD9	; 217
    5c6e:	1d e2       	ldi	r17, 0x2D	; 45
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	34 e2       	ldi	r19, 0x24	; 36
    5c74:	44 ef       	ldi	r20, 0xF4	; 244
    5c76:	50 e0       	ldi	r21, 0x00	; 0
    5c78:	60 e0       	ldi	r22, 0x00	; 0
    5c7a:	89 e2       	ldi	r24, 0x29	; 41
    5c7c:	23 d1       	rcall	.+582    	; 0x5ec4 <twiCreate>
    5c7e:	90 93 42 15 	sts	0x1542, r25	; 0x801542 <_twiHandler+0x1>
    5c82:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <_twiHandler>
    5c86:	89 2b       	or	r24, r25
    5c88:	11 f0       	breq	.+4      	; 0x5c8e <tsl2591_initialise+0x2e>
    5c8a:	80 e0       	ldi	r24, 0x00	; 0
    5c8c:	01 c0       	rjmp	.+2      	; 0x5c90 <tsl2591_initialise+0x30>
    5c8e:	88 e0       	ldi	r24, 0x08	; 8
    5c90:	1f 91       	pop	r17
    5c92:	0f 91       	pop	r16
    5c94:	08 95       	ret

00005c96 <tsl2591_enable>:
    5c96:	cf 93       	push	r28
    5c98:	df 93       	push	r29
    5c9a:	1f 92       	push	r1
    5c9c:	1f 92       	push	r1
    5c9e:	cd b7       	in	r28, 0x3d	; 61
    5ca0:	de b7       	in	r29, 0x3e	; 62
    5ca2:	80 ea       	ldi	r24, 0xA0	; 160
    5ca4:	89 83       	std	Y+1, r24	; 0x01
    5ca6:	83 e0       	ldi	r24, 0x03	; 3
    5ca8:	8a 83       	std	Y+2, r24	; 0x02
    5caa:	10 92 3e 15 	sts	0x153E, r1	; 0x80153e <_nextState>
    5cae:	62 e0       	ldi	r22, 0x02	; 2
    5cb0:	ce 01       	movw	r24, r28
    5cb2:	01 96       	adiw	r24, 0x01	; 1
    5cb4:	c2 df       	rcall	.-124    	; 0x5c3a <_twiTransmit>
    5cb6:	0f 90       	pop	r0
    5cb8:	0f 90       	pop	r0
    5cba:	df 91       	pop	r29
    5cbc:	cf 91       	pop	r28
    5cbe:	08 95       	ret

00005cc0 <tsl2591_fetchData>:
    5cc0:	cf 93       	push	r28
    5cc2:	df 93       	push	r29
    5cc4:	1f 92       	push	r1
    5cc6:	cd b7       	in	r28, 0x3d	; 61
    5cc8:	de b7       	in	r29, 0x3e	; 62
    5cca:	84 eb       	ldi	r24, 0xB4	; 180
    5ccc:	89 83       	std	Y+1, r24	; 0x01
    5cce:	83 e0       	ldi	r24, 0x03	; 3
    5cd0:	80 93 3e 15 	sts	0x153E, r24	; 0x80153e <_nextState>
    5cd4:	61 e0       	ldi	r22, 0x01	; 1
    5cd6:	ce 01       	movw	r24, r28
    5cd8:	01 96       	adiw	r24, 0x01	; 1
    5cda:	af df       	rcall	.-162    	; 0x5c3a <_twiTransmit>
    5cdc:	0f 90       	pop	r0
    5cde:	df 91       	pop	r29
    5ce0:	cf 91       	pop	r28
    5ce2:	08 95       	ret

00005ce4 <tsl2591_getLux>:
    5ce4:	2f 92       	push	r2
    5ce6:	3f 92       	push	r3
    5ce8:	4f 92       	push	r4
    5cea:	5f 92       	push	r5
    5cec:	6f 92       	push	r6
    5cee:	7f 92       	push	r7
    5cf0:	8f 92       	push	r8
    5cf2:	9f 92       	push	r9
    5cf4:	af 92       	push	r10
    5cf6:	bf 92       	push	r11
    5cf8:	cf 92       	push	r12
    5cfa:	df 92       	push	r13
    5cfc:	ef 92       	push	r14
    5cfe:	ff 92       	push	r15
    5d00:	0f 93       	push	r16
    5d02:	1f 93       	push	r17
    5d04:	cf 93       	push	r28
    5d06:	df 93       	push	r29
    5d08:	c0 91 37 15 	lds	r28, 0x1537	; 0x801537 <_infraredRaw>
    5d0c:	d0 91 38 15 	lds	r29, 0x1538	; 0x801538 <_infraredRaw+0x1>
    5d10:	cf 3f       	cpi	r28, 0xFF	; 255
    5d12:	2f ef       	ldi	r18, 0xFF	; 255
    5d14:	d2 07       	cpc	r29, r18
    5d16:	41 f0       	breq	.+16     	; 0x5d28 <tsl2591_getLux+0x44>
    5d18:	60 91 39 15 	lds	r22, 0x1539	; 0x801539 <_fullSpectrumRaw>
    5d1c:	70 91 3a 15 	lds	r23, 0x153A	; 0x80153a <_fullSpectrumRaw+0x1>
    5d20:	6f 3f       	cpi	r22, 0xFF	; 255
    5d22:	ef ef       	ldi	r30, 0xFF	; 255
    5d24:	7e 07       	cpc	r23, r30
    5d26:	59 f4       	brne	.+22     	; 0x5d3e <tsl2591_getLux+0x5a>
    5d28:	4f ef       	ldi	r20, 0xFF	; 255
    5d2a:	5f ef       	ldi	r21, 0xFF	; 255
    5d2c:	6f e7       	ldi	r22, 0x7F	; 127
    5d2e:	7f e7       	ldi	r23, 0x7F	; 127
    5d30:	fc 01       	movw	r30, r24
    5d32:	40 83       	st	Z, r20
    5d34:	51 83       	std	Z+1, r21	; 0x01
    5d36:	62 83       	std	Z+2, r22	; 0x02
    5d38:	73 83       	std	Z+3, r23	; 0x03
    5d3a:	83 e0       	ldi	r24, 0x03	; 3
    5d3c:	9f c0       	rjmp	.+318    	; 0x5e7c <tsl2591_getLux+0x198>
    5d3e:	1c 01       	movw	r2, r24
    5d40:	80 e0       	ldi	r24, 0x00	; 0
    5d42:	90 e0       	ldi	r25, 0x00	; 0
    5d44:	62 d6       	rcall	.+3268   	; 0x6a0a <__floatunsisf>
    5d46:	2b 01       	movw	r4, r22
    5d48:	3c 01       	movw	r6, r24
    5d4a:	be 01       	movw	r22, r28
    5d4c:	80 e0       	ldi	r24, 0x00	; 0
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	5c d6       	rcall	.+3256   	; 0x6a0a <__floatunsisf>
    5d52:	4b 01       	movw	r8, r22
    5d54:	5c 01       	movw	r10, r24
    5d56:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <_currentIntegrationTime>
    5d5a:	90 e0       	ldi	r25, 0x00	; 0
    5d5c:	01 96       	adiw	r24, 0x01	; 1
    5d5e:	24 e6       	ldi	r18, 0x64	; 100
    5d60:	28 9f       	mul	r18, r24
    5d62:	b0 01       	movw	r22, r0
    5d64:	29 9f       	mul	r18, r25
    5d66:	70 0d       	add	r23, r0
    5d68:	11 24       	eor	r1, r1
    5d6a:	80 91 3d 15 	lds	r24, 0x153D	; 0x80153d <_currentGain>
    5d6e:	80 32       	cpi	r24, 0x20	; 32
    5d70:	69 f0       	breq	.+26     	; 0x5d8c <tsl2591_getLux+0xa8>
    5d72:	80 33       	cpi	r24, 0x30	; 48
    5d74:	a1 f0       	breq	.+40     	; 0x5d9e <tsl2591_getLux+0xba>
    5d76:	80 31       	cpi	r24, 0x10	; 16
    5d78:	e1 f4       	brne	.+56     	; 0x5db2 <tsl2591_getLux+0xce>
    5d7a:	0f 2e       	mov	r0, r31
    5d7c:	c1 2c       	mov	r12, r1
    5d7e:	d1 2c       	mov	r13, r1
    5d80:	f8 ec       	ldi	r31, 0xC8	; 200
    5d82:	ef 2e       	mov	r14, r31
    5d84:	f1 e4       	ldi	r31, 0x41	; 65
    5d86:	ff 2e       	mov	r15, r31
    5d88:	f0 2d       	mov	r31, r0
    5d8a:	1b c0       	rjmp	.+54     	; 0x5dc2 <tsl2591_getLux+0xde>
    5d8c:	0f 2e       	mov	r0, r31
    5d8e:	c1 2c       	mov	r12, r1
    5d90:	d1 2c       	mov	r13, r1
    5d92:	f6 ed       	ldi	r31, 0xD6	; 214
    5d94:	ef 2e       	mov	r14, r31
    5d96:	f3 e4       	ldi	r31, 0x43	; 67
    5d98:	ff 2e       	mov	r15, r31
    5d9a:	f0 2d       	mov	r31, r0
    5d9c:	12 c0       	rjmp	.+36     	; 0x5dc2 <tsl2591_getLux+0xde>
    5d9e:	0f 2e       	mov	r0, r31
    5da0:	c1 2c       	mov	r12, r1
    5da2:	f0 e5       	ldi	r31, 0x50	; 80
    5da4:	df 2e       	mov	r13, r31
    5da6:	fa e1       	ldi	r31, 0x1A	; 26
    5da8:	ef 2e       	mov	r14, r31
    5daa:	f6 e4       	ldi	r31, 0x46	; 70
    5dac:	ff 2e       	mov	r15, r31
    5dae:	f0 2d       	mov	r31, r0
    5db0:	08 c0       	rjmp	.+16     	; 0x5dc2 <tsl2591_getLux+0xde>
    5db2:	0f 2e       	mov	r0, r31
    5db4:	c1 2c       	mov	r12, r1
    5db6:	d1 2c       	mov	r13, r1
    5db8:	f0 e8       	ldi	r31, 0x80	; 128
    5dba:	ef 2e       	mov	r14, r31
    5dbc:	ff e3       	ldi	r31, 0x3F	; 63
    5dbe:	ff 2e       	mov	r15, r31
    5dc0:	f0 2d       	mov	r31, r0
    5dc2:	07 2e       	mov	r0, r23
    5dc4:	00 0c       	add	r0, r0
    5dc6:	88 0b       	sbc	r24, r24
    5dc8:	99 0b       	sbc	r25, r25
    5dca:	21 d6       	rcall	.+3138   	; 0x6a0e <__floatsisf>
    5dcc:	a7 01       	movw	r20, r14
    5dce:	96 01       	movw	r18, r12
    5dd0:	0e 94 0b 23 	call	0x4616	; 0x4616 <__mulsf3>
    5dd4:	20 e0       	ldi	r18, 0x00	; 0
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	4c ec       	ldi	r20, 0xCC	; 204
    5dda:	53 e4       	ldi	r21, 0x43	; 67
    5ddc:	a5 d5       	rcall	.+2890   	; 0x6928 <__divsf3>
    5dde:	6b 01       	movw	r12, r22
    5de0:	7c 01       	movw	r14, r24
    5de2:	25 e8       	ldi	r18, 0x85	; 133
    5de4:	3b ee       	ldi	r19, 0xEB	; 235
    5de6:	41 ed       	ldi	r20, 0xD1	; 209
    5de8:	5f e3       	ldi	r21, 0x3F	; 63
    5dea:	c5 01       	movw	r24, r10
    5dec:	b4 01       	movw	r22, r8
    5dee:	0e 94 0b 23 	call	0x4616	; 0x4616 <__mulsf3>
    5df2:	9b 01       	movw	r18, r22
    5df4:	ac 01       	movw	r20, r24
    5df6:	c3 01       	movw	r24, r6
    5df8:	b2 01       	movw	r22, r4
    5dfa:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__subsf3>
    5dfe:	a7 01       	movw	r20, r14
    5e00:	96 01       	movw	r18, r12
    5e02:	92 d5       	rcall	.+2852   	; 0x6928 <__divsf3>
    5e04:	16 2f       	mov	r17, r22
    5e06:	d7 2f       	mov	r29, r23
    5e08:	c8 2f       	mov	r28, r24
    5e0a:	09 2f       	mov	r16, r25
    5e0c:	2d e3       	ldi	r18, 0x3D	; 61
    5e0e:	3a e0       	ldi	r19, 0x0A	; 10
    5e10:	47 e1       	ldi	r20, 0x17	; 23
    5e12:	5f e3       	ldi	r21, 0x3F	; 63
    5e14:	c3 01       	movw	r24, r6
    5e16:	b2 01       	movw	r22, r4
    5e18:	0e 94 0b 23 	call	0x4616	; 0x4616 <__mulsf3>
    5e1c:	2b 01       	movw	r4, r22
    5e1e:	3c 01       	movw	r6, r24
    5e20:	26 ef       	ldi	r18, 0xF6	; 246
    5e22:	38 e2       	ldi	r19, 0x28	; 40
    5e24:	4c e5       	ldi	r20, 0x5C	; 92
    5e26:	5f e3       	ldi	r21, 0x3F	; 63
    5e28:	c5 01       	movw	r24, r10
    5e2a:	b4 01       	movw	r22, r8
    5e2c:	0e 94 0b 23 	call	0x4616	; 0x4616 <__mulsf3>
    5e30:	9b 01       	movw	r18, r22
    5e32:	ac 01       	movw	r20, r24
    5e34:	c3 01       	movw	r24, r6
    5e36:	b2 01       	movw	r22, r4
    5e38:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__subsf3>
    5e3c:	a7 01       	movw	r20, r14
    5e3e:	96 01       	movw	r18, r12
    5e40:	73 d5       	rcall	.+2790   	; 0x6928 <__divsf3>
    5e42:	c6 2e       	mov	r12, r22
    5e44:	d7 2e       	mov	r13, r23
    5e46:	e8 2e       	mov	r14, r24
    5e48:	f9 2e       	mov	r15, r25
    5e4a:	26 2f       	mov	r18, r22
    5e4c:	37 2f       	mov	r19, r23
    5e4e:	48 2f       	mov	r20, r24
    5e50:	59 2f       	mov	r21, r25
    5e52:	61 2f       	mov	r22, r17
    5e54:	7d 2f       	mov	r23, r29
    5e56:	8c 2f       	mov	r24, r28
    5e58:	90 2f       	mov	r25, r16
    5e5a:	14 d6       	rcall	.+3112   	; 0x6a84 <__gesf2>
    5e5c:	18 16       	cp	r1, r24
    5e5e:	24 f0       	brlt	.+8      	; 0x5e68 <tsl2591_getLux+0x184>
    5e60:	1c 2d       	mov	r17, r12
    5e62:	dd 2d       	mov	r29, r13
    5e64:	ce 2d       	mov	r28, r14
    5e66:	0f 2d       	mov	r16, r15
    5e68:	41 2f       	mov	r20, r17
    5e6a:	5d 2f       	mov	r21, r29
    5e6c:	6c 2f       	mov	r22, r28
    5e6e:	70 2f       	mov	r23, r16
    5e70:	f1 01       	movw	r30, r2
    5e72:	40 83       	st	Z, r20
    5e74:	51 83       	std	Z+1, r21	; 0x01
    5e76:	62 83       	std	Z+2, r22	; 0x02
    5e78:	73 83       	std	Z+3, r23	; 0x03
    5e7a:	80 e0       	ldi	r24, 0x00	; 0
    5e7c:	df 91       	pop	r29
    5e7e:	cf 91       	pop	r28
    5e80:	1f 91       	pop	r17
    5e82:	0f 91       	pop	r16
    5e84:	ff 90       	pop	r15
    5e86:	ef 90       	pop	r14
    5e88:	df 90       	pop	r13
    5e8a:	cf 90       	pop	r12
    5e8c:	bf 90       	pop	r11
    5e8e:	af 90       	pop	r10
    5e90:	9f 90       	pop	r9
    5e92:	8f 90       	pop	r8
    5e94:	7f 90       	pop	r7
    5e96:	6f 90       	pop	r6
    5e98:	5f 90       	pop	r5
    5e9a:	4f 90       	pop	r4
    5e9c:	3f 90       	pop	r3
    5e9e:	2f 90       	pop	r2
    5ea0:	08 95       	ret

00005ea2 <_initTwiInterface>:
    5ea2:	80 91 51 15 	lds	r24, 0x1551	; 0x801551 <_twiIsInitiated>
    5ea6:	81 11       	cpse	r24, r1
    5ea8:	0c c0       	rjmp	.+24     	; 0x5ec2 <_initTwiInterface+0x20>
    5eaa:	8c e0       	ldi	r24, 0x0C	; 12
    5eac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5eb0:	8f ef       	ldi	r24, 0xFF	; 255
    5eb2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5eb6:	84 e0       	ldi	r24, 0x04	; 4
    5eb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ebc:	81 e0       	ldi	r24, 0x01	; 1
    5ebe:	80 93 51 15 	sts	0x1551, r24	; 0x801551 <_twiIsInitiated>
    5ec2:	08 95       	ret

00005ec4 <twiCreate>:
    5ec4:	af 92       	push	r10
    5ec6:	bf 92       	push	r11
    5ec8:	cf 92       	push	r12
    5eca:	df 92       	push	r13
    5ecc:	ef 92       	push	r14
    5ece:	ff 92       	push	r15
    5ed0:	0f 93       	push	r16
    5ed2:	1f 93       	push	r17
    5ed4:	cf 93       	push	r28
    5ed6:	df 93       	push	r29
    5ed8:	a8 2e       	mov	r10, r24
    5eda:	b6 2e       	mov	r11, r22
    5edc:	69 01       	movw	r12, r18
    5ede:	7a 01       	movw	r14, r20
    5ee0:	84 e0       	ldi	r24, 0x04	; 4
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	4a d6       	rcall	.+3220   	; 0x6b7a <malloc>
    5ee6:	ec 01       	movw	r28, r24
    5ee8:	89 2b       	or	r24, r25
    5eea:	61 f1       	breq	.+88     	; 0x5f44 <twiCreate+0x80>
    5eec:	a8 82       	st	Y, r10
    5eee:	81 e0       	ldi	r24, 0x01	; 1
    5ef0:	b8 12       	cpse	r11, r24
    5ef2:	12 c0       	rjmp	.+36     	; 0x5f18 <twiCreate+0x54>
    5ef4:	c7 01       	movw	r24, r14
    5ef6:	b6 01       	movw	r22, r12
    5ef8:	20 ea       	ldi	r18, 0xA0	; 160
    5efa:	36 e8       	ldi	r19, 0x86	; 134
    5efc:	41 e0       	ldi	r20, 0x01	; 1
    5efe:	50 e0       	ldi	r21, 0x00	; 0
    5f00:	e9 d5       	rcall	.+3026   	; 0x6ad4 <__udivmodsi4>
    5f02:	da 01       	movw	r26, r20
    5f04:	c9 01       	movw	r24, r18
    5f06:	40 97       	sbiw	r24, 0x10	; 16
    5f08:	a1 09       	sbc	r26, r1
    5f0a:	b1 09       	sbc	r27, r1
    5f0c:	b6 95       	lsr	r27
    5f0e:	a7 95       	ror	r26
    5f10:	97 95       	ror	r25
    5f12:	87 95       	ror	r24
    5f14:	89 83       	std	Y+1, r24	; 0x01
    5f16:	11 c0       	rjmp	.+34     	; 0x5f3a <twiCreate+0x76>
    5f18:	c7 01       	movw	r24, r14
    5f1a:	b6 01       	movw	r22, r12
    5f1c:	20 e8       	ldi	r18, 0x80	; 128
    5f1e:	3a e1       	ldi	r19, 0x1A	; 26
    5f20:	46 e0       	ldi	r20, 0x06	; 6
    5f22:	50 e0       	ldi	r21, 0x00	; 0
    5f24:	d7 d5       	rcall	.+2990   	; 0x6ad4 <__udivmodsi4>
    5f26:	da 01       	movw	r26, r20
    5f28:	c9 01       	movw	r24, r18
    5f2a:	40 97       	sbiw	r24, 0x10	; 16
    5f2c:	a1 09       	sbc	r26, r1
    5f2e:	b1 09       	sbc	r27, r1
    5f30:	b6 95       	lsr	r27
    5f32:	a7 95       	ror	r26
    5f34:	97 95       	ror	r25
    5f36:	87 95       	ror	r24
    5f38:	89 83       	std	Y+1, r24	; 0x01
    5f3a:	1b 83       	std	Y+3, r17	; 0x03
    5f3c:	0a 83       	std	Y+2, r16	; 0x02
    5f3e:	8c 2f       	mov	r24, r28
    5f40:	9d 2f       	mov	r25, r29
    5f42:	02 c0       	rjmp	.+4      	; 0x5f48 <twiCreate+0x84>
    5f44:	80 e0       	ldi	r24, 0x00	; 0
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	df 91       	pop	r29
    5f4a:	cf 91       	pop	r28
    5f4c:	1f 91       	pop	r17
    5f4e:	0f 91       	pop	r16
    5f50:	ff 90       	pop	r15
    5f52:	ef 90       	pop	r14
    5f54:	df 90       	pop	r13
    5f56:	cf 90       	pop	r12
    5f58:	bf 90       	pop	r11
    5f5a:	af 90       	pop	r10
    5f5c:	08 95       	ret

00005f5e <twiIsBusy>:
    5f5e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f62:	81 70       	andi	r24, 0x01	; 1
    5f64:	08 95       	ret

00005f66 <twiTransmit>:
    5f66:	ff 92       	push	r15
    5f68:	0f 93       	push	r16
    5f6a:	1f 93       	push	r17
    5f6c:	cf 93       	push	r28
    5f6e:	df 93       	push	r29
    5f70:	00 97       	sbiw	r24, 0x00	; 0
    5f72:	d1 f1       	breq	.+116    	; 0x5fe8 <twiTransmit+0x82>
    5f74:	4a 30       	cpi	r20, 0x0A	; 10
    5f76:	d0 f5       	brcc	.+116    	; 0x5fec <twiTransmit+0x86>
    5f78:	f4 2e       	mov	r15, r20
    5f7a:	8b 01       	movw	r16, r22
    5f7c:	ec 01       	movw	r28, r24
    5f7e:	ef df       	rcall	.-34     	; 0x5f5e <twiIsBusy>
    5f80:	81 11       	cpse	r24, r1
    5f82:	36 c0       	rjmp	.+108    	; 0x5ff0 <twiTransmit+0x8a>
    5f84:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <_twiCurrentHandler>
    5f88:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <_twiCurrentHandler+0x1>
    5f8c:	c8 17       	cp	r28, r24
    5f8e:	d9 07       	cpc	r29, r25
    5f90:	41 f0       	breq	.+16     	; 0x5fa2 <twiTransmit+0x3c>
    5f92:	87 df       	rcall	.-242    	; 0x5ea2 <_initTwiInterface>
    5f94:	89 81       	ldd	r24, Y+1	; 0x01
    5f96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5f9a:	d0 93 45 15 	sts	0x1545, r29	; 0x801545 <_twiCurrentHandler+0x1>
    5f9e:	c0 93 44 15 	sts	0x1544, r28	; 0x801544 <_twiCurrentHandler>
    5fa2:	81 e0       	ldi	r24, 0x01	; 1
    5fa4:	8f 0d       	add	r24, r15
    5fa6:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <_twiMessageLen>
    5faa:	88 81       	ld	r24, Y
    5fac:	88 0f       	add	r24, r24
    5fae:	80 93 47 15 	sts	0x1547, r24	; 0x801547 <_twiMessageBuffer>
    5fb2:	ff 20       	and	r15, r15
    5fb4:	89 f0       	breq	.+34     	; 0x5fd8 <twiTransmit+0x72>
    5fb6:	f8 01       	movw	r30, r16
    5fb8:	a8 e4       	ldi	r26, 0x48	; 72
    5fba:	b5 e1       	ldi	r27, 0x15	; 21
    5fbc:	4f ef       	ldi	r20, 0xFF	; 255
    5fbe:	4f 0d       	add	r20, r15
    5fc0:	64 2f       	mov	r22, r20
    5fc2:	70 e0       	ldi	r23, 0x00	; 0
    5fc4:	cb 01       	movw	r24, r22
    5fc6:	01 96       	adiw	r24, 0x01	; 1
    5fc8:	b8 01       	movw	r22, r16
    5fca:	68 0f       	add	r22, r24
    5fcc:	79 1f       	adc	r23, r25
    5fce:	81 91       	ld	r24, Z+
    5fd0:	8d 93       	st	X+, r24
    5fd2:	e6 17       	cp	r30, r22
    5fd4:	f7 07       	cpc	r31, r23
    5fd6:	d9 f7       	brne	.-10     	; 0x5fce <twiTransmit+0x68>
    5fd8:	88 ef       	ldi	r24, 0xF8	; 248
    5fda:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5fde:	85 ea       	ldi	r24, 0xA5	; 165
    5fe0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fe4:	84 e0       	ldi	r24, 0x04	; 4
    5fe6:	05 c0       	rjmp	.+10     	; 0x5ff2 <twiTransmit+0x8c>
    5fe8:	86 e0       	ldi	r24, 0x06	; 6
    5fea:	03 c0       	rjmp	.+6      	; 0x5ff2 <twiTransmit+0x8c>
    5fec:	87 e0       	ldi	r24, 0x07	; 7
    5fee:	01 c0       	rjmp	.+2      	; 0x5ff2 <twiTransmit+0x8c>
    5ff0:	82 e0       	ldi	r24, 0x02	; 2
    5ff2:	df 91       	pop	r29
    5ff4:	cf 91       	pop	r28
    5ff6:	1f 91       	pop	r17
    5ff8:	0f 91       	pop	r16
    5ffa:	ff 90       	pop	r15
    5ffc:	08 95       	ret

00005ffe <twiReceive>:
    5ffe:	1f 93       	push	r17
    6000:	cf 93       	push	r28
    6002:	df 93       	push	r29
    6004:	00 97       	sbiw	r24, 0x00	; 0
    6006:	29 f1       	breq	.+74     	; 0x6052 <twiReceive+0x54>
    6008:	6b 30       	cpi	r22, 0x0B	; 11
    600a:	28 f5       	brcc	.+74     	; 0x6056 <twiReceive+0x58>
    600c:	16 2f       	mov	r17, r22
    600e:	ec 01       	movw	r28, r24
    6010:	a6 df       	rcall	.-180    	; 0x5f5e <twiIsBusy>
    6012:	81 11       	cpse	r24, r1
    6014:	22 c0       	rjmp	.+68     	; 0x605a <twiReceive+0x5c>
    6016:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <_twiCurrentHandler>
    601a:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <_twiCurrentHandler+0x1>
    601e:	c8 17       	cp	r28, r24
    6020:	d9 07       	cpc	r29, r25
    6022:	41 f0       	breq	.+16     	; 0x6034 <twiReceive+0x36>
    6024:	3e df       	rcall	.-388    	; 0x5ea2 <_initTwiInterface>
    6026:	89 81       	ldd	r24, Y+1	; 0x01
    6028:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    602c:	d0 93 45 15 	sts	0x1545, r29	; 0x801545 <_twiCurrentHandler+0x1>
    6030:	c0 93 44 15 	sts	0x1544, r28	; 0x801544 <_twiCurrentHandler>
    6034:	10 93 46 15 	sts	0x1546, r17	; 0x801546 <_twiMessageLen>
    6038:	88 81       	ld	r24, Y
    603a:	88 0f       	add	r24, r24
    603c:	81 60       	ori	r24, 0x01	; 1
    603e:	80 93 47 15 	sts	0x1547, r24	; 0x801547 <_twiMessageBuffer>
    6042:	88 ef       	ldi	r24, 0xF8	; 248
    6044:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6048:	85 ea       	ldi	r24, 0xA5	; 165
    604a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    604e:	85 e0       	ldi	r24, 0x05	; 5
    6050:	05 c0       	rjmp	.+10     	; 0x605c <twiReceive+0x5e>
    6052:	86 e0       	ldi	r24, 0x06	; 6
    6054:	03 c0       	rjmp	.+6      	; 0x605c <twiReceive+0x5e>
    6056:	87 e0       	ldi	r24, 0x07	; 7
    6058:	01 c0       	rjmp	.+2      	; 0x605c <twiReceive+0x5e>
    605a:	82 e0       	ldi	r24, 0x02	; 2
    605c:	df 91       	pop	r29
    605e:	cf 91       	pop	r28
    6060:	1f 91       	pop	r17
    6062:	08 95       	ret

00006064 <__vector_39>:
    6064:	1f 92       	push	r1
    6066:	0f 92       	push	r0
    6068:	0f b6       	in	r0, 0x3f	; 63
    606a:	0f 92       	push	r0
    606c:	11 24       	eor	r1, r1
    606e:	0b b6       	in	r0, 0x3b	; 59
    6070:	0f 92       	push	r0
    6072:	2f 93       	push	r18
    6074:	3f 93       	push	r19
    6076:	4f 93       	push	r20
    6078:	5f 93       	push	r21
    607a:	6f 93       	push	r22
    607c:	7f 93       	push	r23
    607e:	8f 93       	push	r24
    6080:	9f 93       	push	r25
    6082:	af 93       	push	r26
    6084:	bf 93       	push	r27
    6086:	ef 93       	push	r30
    6088:	ff 93       	push	r31
    608a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    608e:	8e 2f       	mov	r24, r30
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	fc 01       	movw	r30, r24
    6094:	38 97       	sbiw	r30, 0x08	; 8
    6096:	e1 35       	cpi	r30, 0x51	; 81
    6098:	f1 05       	cpc	r31, r1
    609a:	08 f0       	brcs	.+2      	; 0x609e <__vector_39+0x3a>
    609c:	75 c0       	rjmp	.+234    	; 0x6188 <__vector_39+0x124>
    609e:	88 27       	eor	r24, r24
    60a0:	e4 58       	subi	r30, 0x84	; 132
    60a2:	ff 4f       	sbci	r31, 0xFF	; 255
    60a4:	8f 4f       	sbci	r24, 0xFF	; 255
    60a6:	38 c5       	rjmp	.+2672   	; 0x6b18 <__tablejump2__>
    60a8:	10 92 43 15 	sts	0x1543, r1	; 0x801543 <_index.1885>
    60ac:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <_index.1885>
    60b0:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <_twiMessageLen>
    60b4:	e8 17       	cp	r30, r24
    60b6:	70 f4       	brcc	.+28     	; 0x60d4 <__vector_39+0x70>
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	8e 0f       	add	r24, r30
    60bc:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <_index.1885>
    60c0:	f0 e0       	ldi	r31, 0x00	; 0
    60c2:	e9 5b       	subi	r30, 0xB9	; 185
    60c4:	fa 4e       	sbci	r31, 0xEA	; 234
    60c6:	80 81       	ld	r24, Z
    60c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    60cc:	85 e8       	ldi	r24, 0x85	; 133
    60ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60d2:	72 c0       	rjmp	.+228    	; 0x61b8 <__vector_39+0x154>
    60d4:	84 e9       	ldi	r24, 0x94	; 148
    60d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60da:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <_twiCurrentHandler>
    60de:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <_twiCurrentHandler+0x1>
    60e2:	dc 01       	movw	r26, r24
    60e4:	12 96       	adiw	r26, 0x02	; 2
    60e6:	ed 91       	ld	r30, X+
    60e8:	fc 91       	ld	r31, X
    60ea:	13 97       	sbiw	r26, 0x03	; 3
    60ec:	30 97       	sbiw	r30, 0x00	; 0
    60ee:	09 f4       	brne	.+2      	; 0x60f2 <__vector_39+0x8e>
    60f0:	63 c0       	rjmp	.+198    	; 0x61b8 <__vector_39+0x154>
    60f2:	20 e0       	ldi	r18, 0x00	; 0
    60f4:	40 e0       	ldi	r20, 0x00	; 0
    60f6:	50 e0       	ldi	r21, 0x00	; 0
    60f8:	64 e0       	ldi	r22, 0x04	; 4
    60fa:	19 95       	eicall
    60fc:	5d c0       	rjmp	.+186    	; 0x61b8 <__vector_39+0x154>
    60fe:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <_index.1885>
    6102:	81 e0       	ldi	r24, 0x01	; 1
    6104:	8e 0f       	add	r24, r30
    6106:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <_index.1885>
    610a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    610e:	f0 e0       	ldi	r31, 0x00	; 0
    6110:	e9 5b       	subi	r30, 0xB9	; 185
    6112:	fa 4e       	sbci	r31, 0xEA	; 234
    6114:	80 83       	st	Z, r24
    6116:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    611a:	80 34       	cpi	r24, 0x40	; 64
    611c:	11 f4       	brne	.+4      	; 0x6122 <__vector_39+0xbe>
    611e:	10 92 43 15 	sts	0x1543, r1	; 0x801543 <_index.1885>
    6122:	20 91 43 15 	lds	r18, 0x1543	; 0x801543 <_index.1885>
    6126:	30 e0       	ldi	r19, 0x00	; 0
    6128:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <_twiMessageLen>
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	01 97       	sbiw	r24, 0x01	; 1
    6130:	28 17       	cp	r18, r24
    6132:	39 07       	cpc	r19, r25
    6134:	24 f4       	brge	.+8      	; 0x613e <__vector_39+0xda>
    6136:	85 ec       	ldi	r24, 0xC5	; 197
    6138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    613c:	3d c0       	rjmp	.+122    	; 0x61b8 <__vector_39+0x154>
    613e:	85 e8       	ldi	r24, 0x85	; 133
    6140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6144:	39 c0       	rjmp	.+114    	; 0x61b8 <__vector_39+0x154>
    6146:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    614a:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <_index.1885>
    614e:	f0 e0       	ldi	r31, 0x00	; 0
    6150:	e9 5b       	subi	r30, 0xB9	; 185
    6152:	fa 4e       	sbci	r31, 0xEA	; 234
    6154:	80 83       	st	Z, r24
    6156:	84 e9       	ldi	r24, 0x94	; 148
    6158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    615c:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <_twiCurrentHandler>
    6160:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <_twiCurrentHandler+0x1>
    6164:	dc 01       	movw	r26, r24
    6166:	12 96       	adiw	r26, 0x02	; 2
    6168:	ed 91       	ld	r30, X+
    616a:	fc 91       	ld	r31, X
    616c:	13 97       	sbiw	r26, 0x03	; 3
    616e:	30 97       	sbiw	r30, 0x00	; 0
    6170:	19 f1       	breq	.+70     	; 0x61b8 <__vector_39+0x154>
    6172:	20 91 46 15 	lds	r18, 0x1546	; 0x801546 <_twiMessageLen>
    6176:	47 e4       	ldi	r20, 0x47	; 71
    6178:	55 e1       	ldi	r21, 0x15	; 21
    617a:	65 e0       	ldi	r22, 0x05	; 5
    617c:	19 95       	eicall
    617e:	1c c0       	rjmp	.+56     	; 0x61b8 <__vector_39+0x154>
    6180:	85 ea       	ldi	r24, 0xA5	; 165
    6182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6186:	18 c0       	rjmp	.+48     	; 0x61b8 <__vector_39+0x154>
    6188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    618c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6190:	84 e0       	ldi	r24, 0x04	; 4
    6192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6196:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <_twiCurrentHandler>
    619a:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <_twiCurrentHandler+0x1>
    619e:	dc 01       	movw	r26, r24
    61a0:	12 96       	adiw	r26, 0x02	; 2
    61a2:	ed 91       	ld	r30, X+
    61a4:	fc 91       	ld	r31, X
    61a6:	13 97       	sbiw	r26, 0x03	; 3
    61a8:	30 97       	sbiw	r30, 0x00	; 0
    61aa:	31 f0       	breq	.+12     	; 0x61b8 <__vector_39+0x154>
    61ac:	20 e0       	ldi	r18, 0x00	; 0
    61ae:	40 e0       	ldi	r20, 0x00	; 0
    61b0:	50 e0       	ldi	r21, 0x00	; 0
    61b2:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    61b6:	19 95       	eicall
    61b8:	ff 91       	pop	r31
    61ba:	ef 91       	pop	r30
    61bc:	bf 91       	pop	r27
    61be:	af 91       	pop	r26
    61c0:	9f 91       	pop	r25
    61c2:	8f 91       	pop	r24
    61c4:	7f 91       	pop	r23
    61c6:	6f 91       	pop	r22
    61c8:	5f 91       	pop	r21
    61ca:	4f 91       	pop	r20
    61cc:	3f 91       	pop	r19
    61ce:	2f 91       	pop	r18
    61d0:	0f 90       	pop	r0
    61d2:	0b be       	out	0x3b, r0	; 59
    61d4:	0f 90       	pop	r0
    61d6:	0f be       	out	0x3f, r0	; 63
    61d8:	0f 90       	pop	r0
    61da:	1f 90       	pop	r1
    61dc:	18 95       	reti

000061de <fifo_init>:
    61de:	fc 01       	movw	r30, r24
    61e0:	41 11       	cpse	r20, r1
    61e2:	01 c0       	rjmp	.+2      	; 0x61e6 <fifo_init+0x8>
    61e4:	eb d5       	rcall	.+3030   	; 0x6dbc <abort>
    61e6:	84 2f       	mov	r24, r20
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	9c 01       	movw	r18, r24
    61ec:	21 50       	subi	r18, 0x01	; 1
    61ee:	31 09       	sbc	r19, r1
    61f0:	82 23       	and	r24, r18
    61f2:	93 23       	and	r25, r19
    61f4:	89 2b       	or	r24, r25
    61f6:	09 f0       	breq	.+2      	; 0x61fa <fifo_init+0x1c>
    61f8:	e1 d5       	rcall	.+3010   	; 0x6dbc <abort>
    61fa:	41 38       	cpi	r20, 0x81	; 129
    61fc:	08 f0       	brcs	.+2      	; 0x6200 <fifo_init+0x22>
    61fe:	de d5       	rcall	.+3004   	; 0x6dbc <abort>
    6200:	12 82       	std	Z+2, r1	; 0x02
    6202:	13 82       	std	Z+3, r1	; 0x03
    6204:	44 83       	std	Z+4, r20	; 0x04
    6206:	44 0f       	add	r20, r20
    6208:	41 50       	subi	r20, 0x01	; 1
    620a:	45 83       	std	Z+5, r20	; 0x05
    620c:	71 83       	std	Z+1, r23	; 0x01
    620e:	60 83       	st	Z, r22
    6210:	80 e0       	ldi	r24, 0x00	; 0
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	08 95       	ret

00006216 <vfprintf>:
    6216:	2f 92       	push	r2
    6218:	3f 92       	push	r3
    621a:	4f 92       	push	r4
    621c:	5f 92       	push	r5
    621e:	6f 92       	push	r6
    6220:	7f 92       	push	r7
    6222:	8f 92       	push	r8
    6224:	9f 92       	push	r9
    6226:	af 92       	push	r10
    6228:	bf 92       	push	r11
    622a:	cf 92       	push	r12
    622c:	df 92       	push	r13
    622e:	ef 92       	push	r14
    6230:	ff 92       	push	r15
    6232:	0f 93       	push	r16
    6234:	1f 93       	push	r17
    6236:	cf 93       	push	r28
    6238:	df 93       	push	r29
    623a:	cd b7       	in	r28, 0x3d	; 61
    623c:	de b7       	in	r29, 0x3e	; 62
    623e:	60 97       	sbiw	r28, 0x10	; 16
    6240:	0f b6       	in	r0, 0x3f	; 63
    6242:	f8 94       	cli
    6244:	de bf       	out	0x3e, r29	; 62
    6246:	0f be       	out	0x3f, r0	; 63
    6248:	cd bf       	out	0x3d, r28	; 61
    624a:	7c 01       	movw	r14, r24
    624c:	1b 01       	movw	r2, r22
    624e:	6a 01       	movw	r12, r20
    6250:	fc 01       	movw	r30, r24
    6252:	17 82       	std	Z+7, r1	; 0x07
    6254:	16 82       	std	Z+6, r1	; 0x06
    6256:	83 81       	ldd	r24, Z+3	; 0x03
    6258:	81 ff       	sbrs	r24, 1
    625a:	2a c3       	rjmp	.+1620   	; 0x68b0 <vfprintf+0x69a>
    625c:	9e 01       	movw	r18, r28
    625e:	2f 5f       	subi	r18, 0xFF	; 255
    6260:	3f 4f       	sbci	r19, 0xFF	; 255
    6262:	39 01       	movw	r6, r18
    6264:	f7 01       	movw	r30, r14
    6266:	93 81       	ldd	r25, Z+3	; 0x03
    6268:	f1 01       	movw	r30, r2
    626a:	93 fd       	sbrc	r25, 3
    626c:	85 91       	lpm	r24, Z+
    626e:	93 ff       	sbrs	r25, 3
    6270:	81 91       	ld	r24, Z+
    6272:	1f 01       	movw	r2, r30
    6274:	88 23       	and	r24, r24
    6276:	09 f4       	brne	.+2      	; 0x627a <vfprintf+0x64>
    6278:	17 c3       	rjmp	.+1582   	; 0x68a8 <vfprintf+0x692>
    627a:	85 32       	cpi	r24, 0x25	; 37
    627c:	39 f4       	brne	.+14     	; 0x628c <vfprintf+0x76>
    627e:	93 fd       	sbrc	r25, 3
    6280:	85 91       	lpm	r24, Z+
    6282:	93 ff       	sbrs	r25, 3
    6284:	81 91       	ld	r24, Z+
    6286:	1f 01       	movw	r2, r30
    6288:	85 32       	cpi	r24, 0x25	; 37
    628a:	31 f4       	brne	.+12     	; 0x6298 <vfprintf+0x82>
    628c:	b7 01       	movw	r22, r14
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	e6 d6       	rcall	.+3532   	; 0x705e <fputc>
    6292:	56 01       	movw	r10, r12
    6294:	65 01       	movw	r12, r10
    6296:	e6 cf       	rjmp	.-52     	; 0x6264 <vfprintf+0x4e>
    6298:	10 e0       	ldi	r17, 0x00	; 0
    629a:	51 2c       	mov	r5, r1
    629c:	91 2c       	mov	r9, r1
    629e:	ff e1       	ldi	r31, 0x1F	; 31
    62a0:	f9 15       	cp	r31, r9
    62a2:	d8 f0       	brcs	.+54     	; 0x62da <vfprintf+0xc4>
    62a4:	8b 32       	cpi	r24, 0x2B	; 43
    62a6:	79 f0       	breq	.+30     	; 0x62c6 <vfprintf+0xb0>
    62a8:	38 f4       	brcc	.+14     	; 0x62b8 <vfprintf+0xa2>
    62aa:	80 32       	cpi	r24, 0x20	; 32
    62ac:	79 f0       	breq	.+30     	; 0x62cc <vfprintf+0xb6>
    62ae:	83 32       	cpi	r24, 0x23	; 35
    62b0:	a1 f4       	brne	.+40     	; 0x62da <vfprintf+0xc4>
    62b2:	f9 2d       	mov	r31, r9
    62b4:	f0 61       	ori	r31, 0x10	; 16
    62b6:	2e c0       	rjmp	.+92     	; 0x6314 <vfprintf+0xfe>
    62b8:	8d 32       	cpi	r24, 0x2D	; 45
    62ba:	61 f0       	breq	.+24     	; 0x62d4 <vfprintf+0xbe>
    62bc:	80 33       	cpi	r24, 0x30	; 48
    62be:	69 f4       	brne	.+26     	; 0x62da <vfprintf+0xc4>
    62c0:	29 2d       	mov	r18, r9
    62c2:	21 60       	ori	r18, 0x01	; 1
    62c4:	2d c0       	rjmp	.+90     	; 0x6320 <vfprintf+0x10a>
    62c6:	39 2d       	mov	r19, r9
    62c8:	32 60       	ori	r19, 0x02	; 2
    62ca:	93 2e       	mov	r9, r19
    62cc:	89 2d       	mov	r24, r9
    62ce:	84 60       	ori	r24, 0x04	; 4
    62d0:	98 2e       	mov	r9, r24
    62d2:	2a c0       	rjmp	.+84     	; 0x6328 <vfprintf+0x112>
    62d4:	e9 2d       	mov	r30, r9
    62d6:	e8 60       	ori	r30, 0x08	; 8
    62d8:	15 c0       	rjmp	.+42     	; 0x6304 <vfprintf+0xee>
    62da:	97 fc       	sbrc	r9, 7
    62dc:	2d c0       	rjmp	.+90     	; 0x6338 <vfprintf+0x122>
    62de:	20 ed       	ldi	r18, 0xD0	; 208
    62e0:	28 0f       	add	r18, r24
    62e2:	2a 30       	cpi	r18, 0x0A	; 10
    62e4:	88 f4       	brcc	.+34     	; 0x6308 <vfprintf+0xf2>
    62e6:	96 fe       	sbrs	r9, 6
    62e8:	06 c0       	rjmp	.+12     	; 0x62f6 <vfprintf+0xe0>
    62ea:	3a e0       	ldi	r19, 0x0A	; 10
    62ec:	13 9f       	mul	r17, r19
    62ee:	20 0d       	add	r18, r0
    62f0:	11 24       	eor	r1, r1
    62f2:	12 2f       	mov	r17, r18
    62f4:	19 c0       	rjmp	.+50     	; 0x6328 <vfprintf+0x112>
    62f6:	8a e0       	ldi	r24, 0x0A	; 10
    62f8:	58 9e       	mul	r5, r24
    62fa:	20 0d       	add	r18, r0
    62fc:	11 24       	eor	r1, r1
    62fe:	52 2e       	mov	r5, r18
    6300:	e9 2d       	mov	r30, r9
    6302:	e0 62       	ori	r30, 0x20	; 32
    6304:	9e 2e       	mov	r9, r30
    6306:	10 c0       	rjmp	.+32     	; 0x6328 <vfprintf+0x112>
    6308:	8e 32       	cpi	r24, 0x2E	; 46
    630a:	31 f4       	brne	.+12     	; 0x6318 <vfprintf+0x102>
    630c:	96 fc       	sbrc	r9, 6
    630e:	cc c2       	rjmp	.+1432   	; 0x68a8 <vfprintf+0x692>
    6310:	f9 2d       	mov	r31, r9
    6312:	f0 64       	ori	r31, 0x40	; 64
    6314:	9f 2e       	mov	r9, r31
    6316:	08 c0       	rjmp	.+16     	; 0x6328 <vfprintf+0x112>
    6318:	8c 36       	cpi	r24, 0x6C	; 108
    631a:	21 f4       	brne	.+8      	; 0x6324 <vfprintf+0x10e>
    631c:	29 2d       	mov	r18, r9
    631e:	20 68       	ori	r18, 0x80	; 128
    6320:	92 2e       	mov	r9, r18
    6322:	02 c0       	rjmp	.+4      	; 0x6328 <vfprintf+0x112>
    6324:	88 36       	cpi	r24, 0x68	; 104
    6326:	41 f4       	brne	.+16     	; 0x6338 <vfprintf+0x122>
    6328:	f1 01       	movw	r30, r2
    632a:	93 fd       	sbrc	r25, 3
    632c:	85 91       	lpm	r24, Z+
    632e:	93 ff       	sbrs	r25, 3
    6330:	81 91       	ld	r24, Z+
    6332:	1f 01       	movw	r2, r30
    6334:	81 11       	cpse	r24, r1
    6336:	b3 cf       	rjmp	.-154    	; 0x629e <vfprintf+0x88>
    6338:	9b eb       	ldi	r25, 0xBB	; 187
    633a:	98 0f       	add	r25, r24
    633c:	93 30       	cpi	r25, 0x03	; 3
    633e:	20 f4       	brcc	.+8      	; 0x6348 <vfprintf+0x132>
    6340:	99 2d       	mov	r25, r9
    6342:	90 61       	ori	r25, 0x10	; 16
    6344:	80 5e       	subi	r24, 0xE0	; 224
    6346:	07 c0       	rjmp	.+14     	; 0x6356 <vfprintf+0x140>
    6348:	9b e9       	ldi	r25, 0x9B	; 155
    634a:	98 0f       	add	r25, r24
    634c:	93 30       	cpi	r25, 0x03	; 3
    634e:	08 f0       	brcs	.+2      	; 0x6352 <vfprintf+0x13c>
    6350:	59 c1       	rjmp	.+690    	; 0x6604 <vfprintf+0x3ee>
    6352:	99 2d       	mov	r25, r9
    6354:	9f 7e       	andi	r25, 0xEF	; 239
    6356:	96 ff       	sbrs	r25, 6
    6358:	16 e0       	ldi	r17, 0x06	; 6
    635a:	9f 73       	andi	r25, 0x3F	; 63
    635c:	99 2e       	mov	r9, r25
    635e:	85 36       	cpi	r24, 0x65	; 101
    6360:	19 f4       	brne	.+6      	; 0x6368 <vfprintf+0x152>
    6362:	90 64       	ori	r25, 0x40	; 64
    6364:	99 2e       	mov	r9, r25
    6366:	08 c0       	rjmp	.+16     	; 0x6378 <vfprintf+0x162>
    6368:	86 36       	cpi	r24, 0x66	; 102
    636a:	21 f4       	brne	.+8      	; 0x6374 <vfprintf+0x15e>
    636c:	39 2f       	mov	r19, r25
    636e:	30 68       	ori	r19, 0x80	; 128
    6370:	93 2e       	mov	r9, r19
    6372:	02 c0       	rjmp	.+4      	; 0x6378 <vfprintf+0x162>
    6374:	11 11       	cpse	r17, r1
    6376:	11 50       	subi	r17, 0x01	; 1
    6378:	97 fe       	sbrs	r9, 7
    637a:	07 c0       	rjmp	.+14     	; 0x638a <vfprintf+0x174>
    637c:	1c 33       	cpi	r17, 0x3C	; 60
    637e:	50 f4       	brcc	.+20     	; 0x6394 <vfprintf+0x17e>
    6380:	44 24       	eor	r4, r4
    6382:	43 94       	inc	r4
    6384:	41 0e       	add	r4, r17
    6386:	27 e0       	ldi	r18, 0x07	; 7
    6388:	0b c0       	rjmp	.+22     	; 0x63a0 <vfprintf+0x18a>
    638a:	18 30       	cpi	r17, 0x08	; 8
    638c:	38 f0       	brcs	.+14     	; 0x639c <vfprintf+0x186>
    638e:	27 e0       	ldi	r18, 0x07	; 7
    6390:	17 e0       	ldi	r17, 0x07	; 7
    6392:	05 c0       	rjmp	.+10     	; 0x639e <vfprintf+0x188>
    6394:	27 e0       	ldi	r18, 0x07	; 7
    6396:	9c e3       	ldi	r25, 0x3C	; 60
    6398:	49 2e       	mov	r4, r25
    639a:	02 c0       	rjmp	.+4      	; 0x63a0 <vfprintf+0x18a>
    639c:	21 2f       	mov	r18, r17
    639e:	41 2c       	mov	r4, r1
    63a0:	56 01       	movw	r10, r12
    63a2:	84 e0       	ldi	r24, 0x04	; 4
    63a4:	a8 0e       	add	r10, r24
    63a6:	b1 1c       	adc	r11, r1
    63a8:	f6 01       	movw	r30, r12
    63aa:	60 81       	ld	r22, Z
    63ac:	71 81       	ldd	r23, Z+1	; 0x01
    63ae:	82 81       	ldd	r24, Z+2	; 0x02
    63b0:	93 81       	ldd	r25, Z+3	; 0x03
    63b2:	04 2d       	mov	r16, r4
    63b4:	a3 01       	movw	r20, r6
    63b6:	06 d5       	rcall	.+2572   	; 0x6dc4 <__ftoa_engine>
    63b8:	6c 01       	movw	r12, r24
    63ba:	f9 81       	ldd	r31, Y+1	; 0x01
    63bc:	fc 87       	std	Y+12, r31	; 0x0c
    63be:	f0 ff       	sbrs	r31, 0
    63c0:	02 c0       	rjmp	.+4      	; 0x63c6 <vfprintf+0x1b0>
    63c2:	f3 ff       	sbrs	r31, 3
    63c4:	06 c0       	rjmp	.+12     	; 0x63d2 <vfprintf+0x1bc>
    63c6:	91 fc       	sbrc	r9, 1
    63c8:	06 c0       	rjmp	.+12     	; 0x63d6 <vfprintf+0x1c0>
    63ca:	92 fe       	sbrs	r9, 2
    63cc:	06 c0       	rjmp	.+12     	; 0x63da <vfprintf+0x1c4>
    63ce:	00 e2       	ldi	r16, 0x20	; 32
    63d0:	05 c0       	rjmp	.+10     	; 0x63dc <vfprintf+0x1c6>
    63d2:	0d e2       	ldi	r16, 0x2D	; 45
    63d4:	03 c0       	rjmp	.+6      	; 0x63dc <vfprintf+0x1c6>
    63d6:	0b e2       	ldi	r16, 0x2B	; 43
    63d8:	01 c0       	rjmp	.+2      	; 0x63dc <vfprintf+0x1c6>
    63da:	00 e0       	ldi	r16, 0x00	; 0
    63dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    63de:	8c 70       	andi	r24, 0x0C	; 12
    63e0:	19 f0       	breq	.+6      	; 0x63e8 <vfprintf+0x1d2>
    63e2:	01 11       	cpse	r16, r1
    63e4:	43 c2       	rjmp	.+1158   	; 0x686c <vfprintf+0x656>
    63e6:	80 c2       	rjmp	.+1280   	; 0x68e8 <vfprintf+0x6d2>
    63e8:	97 fe       	sbrs	r9, 7
    63ea:	10 c0       	rjmp	.+32     	; 0x640c <vfprintf+0x1f6>
    63ec:	4c 0c       	add	r4, r12
    63ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    63f0:	f4 ff       	sbrs	r31, 4
    63f2:	04 c0       	rjmp	.+8      	; 0x63fc <vfprintf+0x1e6>
    63f4:	8a 81       	ldd	r24, Y+2	; 0x02
    63f6:	81 33       	cpi	r24, 0x31	; 49
    63f8:	09 f4       	brne	.+2      	; 0x63fc <vfprintf+0x1e6>
    63fa:	4a 94       	dec	r4
    63fc:	14 14       	cp	r1, r4
    63fe:	74 f5       	brge	.+92     	; 0x645c <vfprintf+0x246>
    6400:	28 e0       	ldi	r18, 0x08	; 8
    6402:	24 15       	cp	r18, r4
    6404:	78 f5       	brcc	.+94     	; 0x6464 <vfprintf+0x24e>
    6406:	88 e0       	ldi	r24, 0x08	; 8
    6408:	48 2e       	mov	r4, r24
    640a:	2c c0       	rjmp	.+88     	; 0x6464 <vfprintf+0x24e>
    640c:	96 fc       	sbrc	r9, 6
    640e:	2a c0       	rjmp	.+84     	; 0x6464 <vfprintf+0x24e>
    6410:	81 2f       	mov	r24, r17
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	8c 15       	cp	r24, r12
    6416:	9d 05       	cpc	r25, r13
    6418:	9c f0       	brlt	.+38     	; 0x6440 <vfprintf+0x22a>
    641a:	3c ef       	ldi	r19, 0xFC	; 252
    641c:	c3 16       	cp	r12, r19
    641e:	3f ef       	ldi	r19, 0xFF	; 255
    6420:	d3 06       	cpc	r13, r19
    6422:	74 f0       	brlt	.+28     	; 0x6440 <vfprintf+0x22a>
    6424:	89 2d       	mov	r24, r9
    6426:	80 68       	ori	r24, 0x80	; 128
    6428:	98 2e       	mov	r9, r24
    642a:	0a c0       	rjmp	.+20     	; 0x6440 <vfprintf+0x22a>
    642c:	e2 e0       	ldi	r30, 0x02	; 2
    642e:	f0 e0       	ldi	r31, 0x00	; 0
    6430:	ec 0f       	add	r30, r28
    6432:	fd 1f       	adc	r31, r29
    6434:	e1 0f       	add	r30, r17
    6436:	f1 1d       	adc	r31, r1
    6438:	80 81       	ld	r24, Z
    643a:	80 33       	cpi	r24, 0x30	; 48
    643c:	19 f4       	brne	.+6      	; 0x6444 <vfprintf+0x22e>
    643e:	11 50       	subi	r17, 0x01	; 1
    6440:	11 11       	cpse	r17, r1
    6442:	f4 cf       	rjmp	.-24     	; 0x642c <vfprintf+0x216>
    6444:	97 fe       	sbrs	r9, 7
    6446:	0e c0       	rjmp	.+28     	; 0x6464 <vfprintf+0x24e>
    6448:	44 24       	eor	r4, r4
    644a:	43 94       	inc	r4
    644c:	41 0e       	add	r4, r17
    644e:	81 2f       	mov	r24, r17
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	c8 16       	cp	r12, r24
    6454:	d9 06       	cpc	r13, r25
    6456:	2c f4       	brge	.+10     	; 0x6462 <vfprintf+0x24c>
    6458:	1c 19       	sub	r17, r12
    645a:	04 c0       	rjmp	.+8      	; 0x6464 <vfprintf+0x24e>
    645c:	44 24       	eor	r4, r4
    645e:	43 94       	inc	r4
    6460:	01 c0       	rjmp	.+2      	; 0x6464 <vfprintf+0x24e>
    6462:	10 e0       	ldi	r17, 0x00	; 0
    6464:	97 fe       	sbrs	r9, 7
    6466:	06 c0       	rjmp	.+12     	; 0x6474 <vfprintf+0x25e>
    6468:	1c 14       	cp	r1, r12
    646a:	1d 04       	cpc	r1, r13
    646c:	34 f4       	brge	.+12     	; 0x647a <vfprintf+0x264>
    646e:	c6 01       	movw	r24, r12
    6470:	01 96       	adiw	r24, 0x01	; 1
    6472:	05 c0       	rjmp	.+10     	; 0x647e <vfprintf+0x268>
    6474:	85 e0       	ldi	r24, 0x05	; 5
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	02 c0       	rjmp	.+4      	; 0x647e <vfprintf+0x268>
    647a:	81 e0       	ldi	r24, 0x01	; 1
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	01 11       	cpse	r16, r1
    6480:	01 96       	adiw	r24, 0x01	; 1
    6482:	11 23       	and	r17, r17
    6484:	31 f0       	breq	.+12     	; 0x6492 <vfprintf+0x27c>
    6486:	21 2f       	mov	r18, r17
    6488:	30 e0       	ldi	r19, 0x00	; 0
    648a:	2f 5f       	subi	r18, 0xFF	; 255
    648c:	3f 4f       	sbci	r19, 0xFF	; 255
    648e:	82 0f       	add	r24, r18
    6490:	93 1f       	adc	r25, r19
    6492:	25 2d       	mov	r18, r5
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	82 17       	cp	r24, r18
    6498:	93 07       	cpc	r25, r19
    649a:	14 f4       	brge	.+4      	; 0x64a0 <vfprintf+0x28a>
    649c:	58 1a       	sub	r5, r24
    649e:	01 c0       	rjmp	.+2      	; 0x64a2 <vfprintf+0x28c>
    64a0:	51 2c       	mov	r5, r1
    64a2:	89 2d       	mov	r24, r9
    64a4:	89 70       	andi	r24, 0x09	; 9
    64a6:	41 f4       	brne	.+16     	; 0x64b8 <vfprintf+0x2a2>
    64a8:	55 20       	and	r5, r5
    64aa:	31 f0       	breq	.+12     	; 0x64b8 <vfprintf+0x2a2>
    64ac:	b7 01       	movw	r22, r14
    64ae:	80 e2       	ldi	r24, 0x20	; 32
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	d5 d5       	rcall	.+2986   	; 0x705e <fputc>
    64b4:	5a 94       	dec	r5
    64b6:	f8 cf       	rjmp	.-16     	; 0x64a8 <vfprintf+0x292>
    64b8:	00 23       	and	r16, r16
    64ba:	21 f0       	breq	.+8      	; 0x64c4 <vfprintf+0x2ae>
    64bc:	b7 01       	movw	r22, r14
    64be:	80 2f       	mov	r24, r16
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	cd d5       	rcall	.+2970   	; 0x705e <fputc>
    64c4:	93 fc       	sbrc	r9, 3
    64c6:	08 c0       	rjmp	.+16     	; 0x64d8 <vfprintf+0x2c2>
    64c8:	55 20       	and	r5, r5
    64ca:	31 f0       	breq	.+12     	; 0x64d8 <vfprintf+0x2c2>
    64cc:	b7 01       	movw	r22, r14
    64ce:	80 e3       	ldi	r24, 0x30	; 48
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	c5 d5       	rcall	.+2954   	; 0x705e <fputc>
    64d4:	5a 94       	dec	r5
    64d6:	f8 cf       	rjmp	.-16     	; 0x64c8 <vfprintf+0x2b2>
    64d8:	97 fe       	sbrs	r9, 7
    64da:	4a c0       	rjmp	.+148    	; 0x6570 <vfprintf+0x35a>
    64dc:	46 01       	movw	r8, r12
    64de:	d7 fe       	sbrs	r13, 7
    64e0:	02 c0       	rjmp	.+4      	; 0x64e6 <vfprintf+0x2d0>
    64e2:	81 2c       	mov	r8, r1
    64e4:	91 2c       	mov	r9, r1
    64e6:	c6 01       	movw	r24, r12
    64e8:	88 19       	sub	r24, r8
    64ea:	99 09       	sbc	r25, r9
    64ec:	f3 01       	movw	r30, r6
    64ee:	e8 0f       	add	r30, r24
    64f0:	f9 1f       	adc	r31, r25
    64f2:	fe 87       	std	Y+14, r31	; 0x0e
    64f4:	ed 87       	std	Y+13, r30	; 0x0d
    64f6:	96 01       	movw	r18, r12
    64f8:	24 19       	sub	r18, r4
    64fa:	31 09       	sbc	r19, r1
    64fc:	38 8b       	std	Y+16, r19	; 0x10
    64fe:	2f 87       	std	Y+15, r18	; 0x0f
    6500:	01 2f       	mov	r16, r17
    6502:	10 e0       	ldi	r17, 0x00	; 0
    6504:	11 95       	neg	r17
    6506:	01 95       	neg	r16
    6508:	11 09       	sbc	r17, r1
    650a:	3f ef       	ldi	r19, 0xFF	; 255
    650c:	83 16       	cp	r8, r19
    650e:	93 06       	cpc	r9, r19
    6510:	21 f4       	brne	.+8      	; 0x651a <vfprintf+0x304>
    6512:	b7 01       	movw	r22, r14
    6514:	8e e2       	ldi	r24, 0x2E	; 46
    6516:	90 e0       	ldi	r25, 0x00	; 0
    6518:	a2 d5       	rcall	.+2884   	; 0x705e <fputc>
    651a:	c8 14       	cp	r12, r8
    651c:	d9 04       	cpc	r13, r9
    651e:	4c f0       	brlt	.+18     	; 0x6532 <vfprintf+0x31c>
    6520:	8f 85       	ldd	r24, Y+15	; 0x0f
    6522:	98 89       	ldd	r25, Y+16	; 0x10
    6524:	88 15       	cp	r24, r8
    6526:	99 05       	cpc	r25, r9
    6528:	24 f4       	brge	.+8      	; 0x6532 <vfprintf+0x31c>
    652a:	ed 85       	ldd	r30, Y+13	; 0x0d
    652c:	fe 85       	ldd	r31, Y+14	; 0x0e
    652e:	81 81       	ldd	r24, Z+1	; 0x01
    6530:	01 c0       	rjmp	.+2      	; 0x6534 <vfprintf+0x31e>
    6532:	80 e3       	ldi	r24, 0x30	; 48
    6534:	f1 e0       	ldi	r31, 0x01	; 1
    6536:	8f 1a       	sub	r8, r31
    6538:	91 08       	sbc	r9, r1
    653a:	2d 85       	ldd	r18, Y+13	; 0x0d
    653c:	3e 85       	ldd	r19, Y+14	; 0x0e
    653e:	2f 5f       	subi	r18, 0xFF	; 255
    6540:	3f 4f       	sbci	r19, 0xFF	; 255
    6542:	3e 87       	std	Y+14, r19	; 0x0e
    6544:	2d 87       	std	Y+13, r18	; 0x0d
    6546:	80 16       	cp	r8, r16
    6548:	91 06       	cpc	r9, r17
    654a:	24 f0       	brlt	.+8      	; 0x6554 <vfprintf+0x33e>
    654c:	b7 01       	movw	r22, r14
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	86 d5       	rcall	.+2828   	; 0x705e <fputc>
    6552:	db cf       	rjmp	.-74     	; 0x650a <vfprintf+0x2f4>
    6554:	c8 14       	cp	r12, r8
    6556:	d9 04       	cpc	r13, r9
    6558:	41 f4       	brne	.+16     	; 0x656a <vfprintf+0x354>
    655a:	9a 81       	ldd	r25, Y+2	; 0x02
    655c:	96 33       	cpi	r25, 0x36	; 54
    655e:	20 f4       	brcc	.+8      	; 0x6568 <vfprintf+0x352>
    6560:	95 33       	cpi	r25, 0x35	; 53
    6562:	19 f4       	brne	.+6      	; 0x656a <vfprintf+0x354>
    6564:	3c 85       	ldd	r19, Y+12	; 0x0c
    6566:	34 ff       	sbrs	r19, 4
    6568:	81 e3       	ldi	r24, 0x31	; 49
    656a:	b7 01       	movw	r22, r14
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	48 c0       	rjmp	.+144    	; 0x6600 <vfprintf+0x3ea>
    6570:	8a 81       	ldd	r24, Y+2	; 0x02
    6572:	81 33       	cpi	r24, 0x31	; 49
    6574:	19 f0       	breq	.+6      	; 0x657c <vfprintf+0x366>
    6576:	9c 85       	ldd	r25, Y+12	; 0x0c
    6578:	9f 7e       	andi	r25, 0xEF	; 239
    657a:	9c 87       	std	Y+12, r25	; 0x0c
    657c:	b7 01       	movw	r22, r14
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	6e d5       	rcall	.+2780   	; 0x705e <fputc>
    6582:	11 11       	cpse	r17, r1
    6584:	05 c0       	rjmp	.+10     	; 0x6590 <vfprintf+0x37a>
    6586:	94 fc       	sbrc	r9, 4
    6588:	16 c0       	rjmp	.+44     	; 0x65b6 <vfprintf+0x3a0>
    658a:	85 e6       	ldi	r24, 0x65	; 101
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	15 c0       	rjmp	.+42     	; 0x65ba <vfprintf+0x3a4>
    6590:	b7 01       	movw	r22, r14
    6592:	8e e2       	ldi	r24, 0x2E	; 46
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	63 d5       	rcall	.+2758   	; 0x705e <fputc>
    6598:	1e 5f       	subi	r17, 0xFE	; 254
    659a:	82 e0       	ldi	r24, 0x02	; 2
    659c:	01 e0       	ldi	r16, 0x01	; 1
    659e:	08 0f       	add	r16, r24
    65a0:	f3 01       	movw	r30, r6
    65a2:	e8 0f       	add	r30, r24
    65a4:	f1 1d       	adc	r31, r1
    65a6:	80 81       	ld	r24, Z
    65a8:	b7 01       	movw	r22, r14
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	58 d5       	rcall	.+2736   	; 0x705e <fputc>
    65ae:	80 2f       	mov	r24, r16
    65b0:	01 13       	cpse	r16, r17
    65b2:	f4 cf       	rjmp	.-24     	; 0x659c <vfprintf+0x386>
    65b4:	e8 cf       	rjmp	.-48     	; 0x6586 <vfprintf+0x370>
    65b6:	85 e4       	ldi	r24, 0x45	; 69
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	b7 01       	movw	r22, r14
    65bc:	50 d5       	rcall	.+2720   	; 0x705e <fputc>
    65be:	d7 fc       	sbrc	r13, 7
    65c0:	06 c0       	rjmp	.+12     	; 0x65ce <vfprintf+0x3b8>
    65c2:	c1 14       	cp	r12, r1
    65c4:	d1 04       	cpc	r13, r1
    65c6:	41 f4       	brne	.+16     	; 0x65d8 <vfprintf+0x3c2>
    65c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    65ca:	e4 ff       	sbrs	r30, 4
    65cc:	05 c0       	rjmp	.+10     	; 0x65d8 <vfprintf+0x3c2>
    65ce:	d1 94       	neg	r13
    65d0:	c1 94       	neg	r12
    65d2:	d1 08       	sbc	r13, r1
    65d4:	8d e2       	ldi	r24, 0x2D	; 45
    65d6:	01 c0       	rjmp	.+2      	; 0x65da <vfprintf+0x3c4>
    65d8:	8b e2       	ldi	r24, 0x2B	; 43
    65da:	b7 01       	movw	r22, r14
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	3f d5       	rcall	.+2686   	; 0x705e <fputc>
    65e0:	80 e3       	ldi	r24, 0x30	; 48
    65e2:	2a e0       	ldi	r18, 0x0A	; 10
    65e4:	c2 16       	cp	r12, r18
    65e6:	d1 04       	cpc	r13, r1
    65e8:	2c f0       	brlt	.+10     	; 0x65f4 <vfprintf+0x3de>
    65ea:	8f 5f       	subi	r24, 0xFF	; 255
    65ec:	fa e0       	ldi	r31, 0x0A	; 10
    65ee:	cf 1a       	sub	r12, r31
    65f0:	d1 08       	sbc	r13, r1
    65f2:	f7 cf       	rjmp	.-18     	; 0x65e2 <vfprintf+0x3cc>
    65f4:	b7 01       	movw	r22, r14
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	32 d5       	rcall	.+2660   	; 0x705e <fputc>
    65fa:	b7 01       	movw	r22, r14
    65fc:	c6 01       	movw	r24, r12
    65fe:	c0 96       	adiw	r24, 0x30	; 48
    6600:	2e d5       	rcall	.+2652   	; 0x705e <fputc>
    6602:	49 c1       	rjmp	.+658    	; 0x6896 <vfprintf+0x680>
    6604:	83 36       	cpi	r24, 0x63	; 99
    6606:	31 f0       	breq	.+12     	; 0x6614 <vfprintf+0x3fe>
    6608:	83 37       	cpi	r24, 0x73	; 115
    660a:	79 f0       	breq	.+30     	; 0x662a <vfprintf+0x414>
    660c:	83 35       	cpi	r24, 0x53	; 83
    660e:	09 f0       	breq	.+2      	; 0x6612 <vfprintf+0x3fc>
    6610:	52 c0       	rjmp	.+164    	; 0x66b6 <vfprintf+0x4a0>
    6612:	1f c0       	rjmp	.+62     	; 0x6652 <vfprintf+0x43c>
    6614:	56 01       	movw	r10, r12
    6616:	32 e0       	ldi	r19, 0x02	; 2
    6618:	a3 0e       	add	r10, r19
    661a:	b1 1c       	adc	r11, r1
    661c:	f6 01       	movw	r30, r12
    661e:	80 81       	ld	r24, Z
    6620:	89 83       	std	Y+1, r24	; 0x01
    6622:	01 e0       	ldi	r16, 0x01	; 1
    6624:	10 e0       	ldi	r17, 0x00	; 0
    6626:	63 01       	movw	r12, r6
    6628:	11 c0       	rjmp	.+34     	; 0x664c <vfprintf+0x436>
    662a:	56 01       	movw	r10, r12
    662c:	f2 e0       	ldi	r31, 0x02	; 2
    662e:	af 0e       	add	r10, r31
    6630:	b1 1c       	adc	r11, r1
    6632:	f6 01       	movw	r30, r12
    6634:	c0 80       	ld	r12, Z
    6636:	d1 80       	ldd	r13, Z+1	; 0x01
    6638:	96 fe       	sbrs	r9, 6
    663a:	03 c0       	rjmp	.+6      	; 0x6642 <vfprintf+0x42c>
    663c:	61 2f       	mov	r22, r17
    663e:	70 e0       	ldi	r23, 0x00	; 0
    6640:	02 c0       	rjmp	.+4      	; 0x6646 <vfprintf+0x430>
    6642:	6f ef       	ldi	r22, 0xFF	; 255
    6644:	7f ef       	ldi	r23, 0xFF	; 255
    6646:	c6 01       	movw	r24, r12
    6648:	ff d4       	rcall	.+2558   	; 0x7048 <strnlen>
    664a:	8c 01       	movw	r16, r24
    664c:	f9 2d       	mov	r31, r9
    664e:	ff 77       	andi	r31, 0x7F	; 127
    6650:	13 c0       	rjmp	.+38     	; 0x6678 <vfprintf+0x462>
    6652:	56 01       	movw	r10, r12
    6654:	22 e0       	ldi	r18, 0x02	; 2
    6656:	a2 0e       	add	r10, r18
    6658:	b1 1c       	adc	r11, r1
    665a:	f6 01       	movw	r30, r12
    665c:	c0 80       	ld	r12, Z
    665e:	d1 80       	ldd	r13, Z+1	; 0x01
    6660:	96 fe       	sbrs	r9, 6
    6662:	03 c0       	rjmp	.+6      	; 0x666a <vfprintf+0x454>
    6664:	61 2f       	mov	r22, r17
    6666:	70 e0       	ldi	r23, 0x00	; 0
    6668:	02 c0       	rjmp	.+4      	; 0x666e <vfprintf+0x458>
    666a:	6f ef       	ldi	r22, 0xFF	; 255
    666c:	7f ef       	ldi	r23, 0xFF	; 255
    666e:	c6 01       	movw	r24, r12
    6670:	81 d4       	rcall	.+2306   	; 0x6f74 <strnlen_P>
    6672:	8c 01       	movw	r16, r24
    6674:	f9 2d       	mov	r31, r9
    6676:	f0 68       	ori	r31, 0x80	; 128
    6678:	9f 2e       	mov	r9, r31
    667a:	f3 fd       	sbrc	r31, 3
    667c:	18 c0       	rjmp	.+48     	; 0x66ae <vfprintf+0x498>
    667e:	85 2d       	mov	r24, r5
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	08 17       	cp	r16, r24
    6684:	19 07       	cpc	r17, r25
    6686:	98 f4       	brcc	.+38     	; 0x66ae <vfprintf+0x498>
    6688:	b7 01       	movw	r22, r14
    668a:	80 e2       	ldi	r24, 0x20	; 32
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	e7 d4       	rcall	.+2510   	; 0x705e <fputc>
    6690:	5a 94       	dec	r5
    6692:	f5 cf       	rjmp	.-22     	; 0x667e <vfprintf+0x468>
    6694:	f6 01       	movw	r30, r12
    6696:	97 fc       	sbrc	r9, 7
    6698:	85 91       	lpm	r24, Z+
    669a:	97 fe       	sbrs	r9, 7
    669c:	81 91       	ld	r24, Z+
    669e:	6f 01       	movw	r12, r30
    66a0:	b7 01       	movw	r22, r14
    66a2:	90 e0       	ldi	r25, 0x00	; 0
    66a4:	dc d4       	rcall	.+2488   	; 0x705e <fputc>
    66a6:	51 10       	cpse	r5, r1
    66a8:	5a 94       	dec	r5
    66aa:	01 50       	subi	r16, 0x01	; 1
    66ac:	11 09       	sbc	r17, r1
    66ae:	01 15       	cp	r16, r1
    66b0:	11 05       	cpc	r17, r1
    66b2:	81 f7       	brne	.-32     	; 0x6694 <vfprintf+0x47e>
    66b4:	f0 c0       	rjmp	.+480    	; 0x6896 <vfprintf+0x680>
    66b6:	84 36       	cpi	r24, 0x64	; 100
    66b8:	11 f0       	breq	.+4      	; 0x66be <vfprintf+0x4a8>
    66ba:	89 36       	cpi	r24, 0x69	; 105
    66bc:	59 f5       	brne	.+86     	; 0x6714 <vfprintf+0x4fe>
    66be:	56 01       	movw	r10, r12
    66c0:	97 fe       	sbrs	r9, 7
    66c2:	09 c0       	rjmp	.+18     	; 0x66d6 <vfprintf+0x4c0>
    66c4:	24 e0       	ldi	r18, 0x04	; 4
    66c6:	a2 0e       	add	r10, r18
    66c8:	b1 1c       	adc	r11, r1
    66ca:	f6 01       	movw	r30, r12
    66cc:	60 81       	ld	r22, Z
    66ce:	71 81       	ldd	r23, Z+1	; 0x01
    66d0:	82 81       	ldd	r24, Z+2	; 0x02
    66d2:	93 81       	ldd	r25, Z+3	; 0x03
    66d4:	0a c0       	rjmp	.+20     	; 0x66ea <vfprintf+0x4d4>
    66d6:	f2 e0       	ldi	r31, 0x02	; 2
    66d8:	af 0e       	add	r10, r31
    66da:	b1 1c       	adc	r11, r1
    66dc:	f6 01       	movw	r30, r12
    66de:	60 81       	ld	r22, Z
    66e0:	71 81       	ldd	r23, Z+1	; 0x01
    66e2:	07 2e       	mov	r0, r23
    66e4:	00 0c       	add	r0, r0
    66e6:	88 0b       	sbc	r24, r24
    66e8:	99 0b       	sbc	r25, r25
    66ea:	f9 2d       	mov	r31, r9
    66ec:	ff 76       	andi	r31, 0x6F	; 111
    66ee:	9f 2e       	mov	r9, r31
    66f0:	97 ff       	sbrs	r25, 7
    66f2:	09 c0       	rjmp	.+18     	; 0x6706 <vfprintf+0x4f0>
    66f4:	90 95       	com	r25
    66f6:	80 95       	com	r24
    66f8:	70 95       	com	r23
    66fa:	61 95       	neg	r22
    66fc:	7f 4f       	sbci	r23, 0xFF	; 255
    66fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6700:	9f 4f       	sbci	r25, 0xFF	; 255
    6702:	f0 68       	ori	r31, 0x80	; 128
    6704:	9f 2e       	mov	r9, r31
    6706:	2a e0       	ldi	r18, 0x0A	; 10
    6708:	30 e0       	ldi	r19, 0x00	; 0
    670a:	a3 01       	movw	r20, r6
    670c:	5c d5       	rcall	.+2744   	; 0x71c6 <__ultoa_invert>
    670e:	c8 2e       	mov	r12, r24
    6710:	c6 18       	sub	r12, r6
    6712:	3e c0       	rjmp	.+124    	; 0x6790 <vfprintf+0x57a>
    6714:	09 2d       	mov	r16, r9
    6716:	85 37       	cpi	r24, 0x75	; 117
    6718:	21 f4       	brne	.+8      	; 0x6722 <vfprintf+0x50c>
    671a:	0f 7e       	andi	r16, 0xEF	; 239
    671c:	2a e0       	ldi	r18, 0x0A	; 10
    671e:	30 e0       	ldi	r19, 0x00	; 0
    6720:	1d c0       	rjmp	.+58     	; 0x675c <vfprintf+0x546>
    6722:	09 7f       	andi	r16, 0xF9	; 249
    6724:	8f 36       	cpi	r24, 0x6F	; 111
    6726:	91 f0       	breq	.+36     	; 0x674c <vfprintf+0x536>
    6728:	18 f4       	brcc	.+6      	; 0x6730 <vfprintf+0x51a>
    672a:	88 35       	cpi	r24, 0x58	; 88
    672c:	59 f0       	breq	.+22     	; 0x6744 <vfprintf+0x52e>
    672e:	bc c0       	rjmp	.+376    	; 0x68a8 <vfprintf+0x692>
    6730:	80 37       	cpi	r24, 0x70	; 112
    6732:	19 f0       	breq	.+6      	; 0x673a <vfprintf+0x524>
    6734:	88 37       	cpi	r24, 0x78	; 120
    6736:	11 f0       	breq	.+4      	; 0x673c <vfprintf+0x526>
    6738:	b7 c0       	rjmp	.+366    	; 0x68a8 <vfprintf+0x692>
    673a:	00 61       	ori	r16, 0x10	; 16
    673c:	04 ff       	sbrs	r16, 4
    673e:	09 c0       	rjmp	.+18     	; 0x6752 <vfprintf+0x53c>
    6740:	04 60       	ori	r16, 0x04	; 4
    6742:	07 c0       	rjmp	.+14     	; 0x6752 <vfprintf+0x53c>
    6744:	94 fe       	sbrs	r9, 4
    6746:	08 c0       	rjmp	.+16     	; 0x6758 <vfprintf+0x542>
    6748:	06 60       	ori	r16, 0x06	; 6
    674a:	06 c0       	rjmp	.+12     	; 0x6758 <vfprintf+0x542>
    674c:	28 e0       	ldi	r18, 0x08	; 8
    674e:	30 e0       	ldi	r19, 0x00	; 0
    6750:	05 c0       	rjmp	.+10     	; 0x675c <vfprintf+0x546>
    6752:	20 e1       	ldi	r18, 0x10	; 16
    6754:	30 e0       	ldi	r19, 0x00	; 0
    6756:	02 c0       	rjmp	.+4      	; 0x675c <vfprintf+0x546>
    6758:	20 e1       	ldi	r18, 0x10	; 16
    675a:	32 e0       	ldi	r19, 0x02	; 2
    675c:	56 01       	movw	r10, r12
    675e:	07 ff       	sbrs	r16, 7
    6760:	09 c0       	rjmp	.+18     	; 0x6774 <vfprintf+0x55e>
    6762:	84 e0       	ldi	r24, 0x04	; 4
    6764:	a8 0e       	add	r10, r24
    6766:	b1 1c       	adc	r11, r1
    6768:	f6 01       	movw	r30, r12
    676a:	60 81       	ld	r22, Z
    676c:	71 81       	ldd	r23, Z+1	; 0x01
    676e:	82 81       	ldd	r24, Z+2	; 0x02
    6770:	93 81       	ldd	r25, Z+3	; 0x03
    6772:	08 c0       	rjmp	.+16     	; 0x6784 <vfprintf+0x56e>
    6774:	f2 e0       	ldi	r31, 0x02	; 2
    6776:	af 0e       	add	r10, r31
    6778:	b1 1c       	adc	r11, r1
    677a:	f6 01       	movw	r30, r12
    677c:	60 81       	ld	r22, Z
    677e:	71 81       	ldd	r23, Z+1	; 0x01
    6780:	80 e0       	ldi	r24, 0x00	; 0
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	a3 01       	movw	r20, r6
    6786:	1f d5       	rcall	.+2622   	; 0x71c6 <__ultoa_invert>
    6788:	c8 2e       	mov	r12, r24
    678a:	c6 18       	sub	r12, r6
    678c:	0f 77       	andi	r16, 0x7F	; 127
    678e:	90 2e       	mov	r9, r16
    6790:	96 fe       	sbrs	r9, 6
    6792:	0b c0       	rjmp	.+22     	; 0x67aa <vfprintf+0x594>
    6794:	09 2d       	mov	r16, r9
    6796:	0e 7f       	andi	r16, 0xFE	; 254
    6798:	c1 16       	cp	r12, r17
    679a:	50 f4       	brcc	.+20     	; 0x67b0 <vfprintf+0x59a>
    679c:	94 fe       	sbrs	r9, 4
    679e:	0a c0       	rjmp	.+20     	; 0x67b4 <vfprintf+0x59e>
    67a0:	92 fc       	sbrc	r9, 2
    67a2:	08 c0       	rjmp	.+16     	; 0x67b4 <vfprintf+0x59e>
    67a4:	09 2d       	mov	r16, r9
    67a6:	0e 7e       	andi	r16, 0xEE	; 238
    67a8:	05 c0       	rjmp	.+10     	; 0x67b4 <vfprintf+0x59e>
    67aa:	dc 2c       	mov	r13, r12
    67ac:	09 2d       	mov	r16, r9
    67ae:	03 c0       	rjmp	.+6      	; 0x67b6 <vfprintf+0x5a0>
    67b0:	dc 2c       	mov	r13, r12
    67b2:	01 c0       	rjmp	.+2      	; 0x67b6 <vfprintf+0x5a0>
    67b4:	d1 2e       	mov	r13, r17
    67b6:	04 ff       	sbrs	r16, 4
    67b8:	0d c0       	rjmp	.+26     	; 0x67d4 <vfprintf+0x5be>
    67ba:	fe 01       	movw	r30, r28
    67bc:	ec 0d       	add	r30, r12
    67be:	f1 1d       	adc	r31, r1
    67c0:	80 81       	ld	r24, Z
    67c2:	80 33       	cpi	r24, 0x30	; 48
    67c4:	11 f4       	brne	.+4      	; 0x67ca <vfprintf+0x5b4>
    67c6:	09 7e       	andi	r16, 0xE9	; 233
    67c8:	09 c0       	rjmp	.+18     	; 0x67dc <vfprintf+0x5c6>
    67ca:	02 ff       	sbrs	r16, 2
    67cc:	06 c0       	rjmp	.+12     	; 0x67da <vfprintf+0x5c4>
    67ce:	d3 94       	inc	r13
    67d0:	d3 94       	inc	r13
    67d2:	04 c0       	rjmp	.+8      	; 0x67dc <vfprintf+0x5c6>
    67d4:	80 2f       	mov	r24, r16
    67d6:	86 78       	andi	r24, 0x86	; 134
    67d8:	09 f0       	breq	.+2      	; 0x67dc <vfprintf+0x5c6>
    67da:	d3 94       	inc	r13
    67dc:	03 fd       	sbrc	r16, 3
    67de:	10 c0       	rjmp	.+32     	; 0x6800 <vfprintf+0x5ea>
    67e0:	00 ff       	sbrs	r16, 0
    67e2:	06 c0       	rjmp	.+12     	; 0x67f0 <vfprintf+0x5da>
    67e4:	1c 2d       	mov	r17, r12
    67e6:	d5 14       	cp	r13, r5
    67e8:	78 f4       	brcc	.+30     	; 0x6808 <vfprintf+0x5f2>
    67ea:	15 0d       	add	r17, r5
    67ec:	1d 19       	sub	r17, r13
    67ee:	0c c0       	rjmp	.+24     	; 0x6808 <vfprintf+0x5f2>
    67f0:	d5 14       	cp	r13, r5
    67f2:	50 f4       	brcc	.+20     	; 0x6808 <vfprintf+0x5f2>
    67f4:	b7 01       	movw	r22, r14
    67f6:	80 e2       	ldi	r24, 0x20	; 32
    67f8:	90 e0       	ldi	r25, 0x00	; 0
    67fa:	31 d4       	rcall	.+2146   	; 0x705e <fputc>
    67fc:	d3 94       	inc	r13
    67fe:	f8 cf       	rjmp	.-16     	; 0x67f0 <vfprintf+0x5da>
    6800:	d5 14       	cp	r13, r5
    6802:	10 f4       	brcc	.+4      	; 0x6808 <vfprintf+0x5f2>
    6804:	5d 18       	sub	r5, r13
    6806:	01 c0       	rjmp	.+2      	; 0x680a <vfprintf+0x5f4>
    6808:	51 2c       	mov	r5, r1
    680a:	04 ff       	sbrs	r16, 4
    680c:	0f c0       	rjmp	.+30     	; 0x682c <vfprintf+0x616>
    680e:	b7 01       	movw	r22, r14
    6810:	80 e3       	ldi	r24, 0x30	; 48
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	24 d4       	rcall	.+2120   	; 0x705e <fputc>
    6816:	02 ff       	sbrs	r16, 2
    6818:	16 c0       	rjmp	.+44     	; 0x6846 <vfprintf+0x630>
    681a:	01 fd       	sbrc	r16, 1
    681c:	03 c0       	rjmp	.+6      	; 0x6824 <vfprintf+0x60e>
    681e:	88 e7       	ldi	r24, 0x78	; 120
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	02 c0       	rjmp	.+4      	; 0x6828 <vfprintf+0x612>
    6824:	88 e5       	ldi	r24, 0x58	; 88
    6826:	90 e0       	ldi	r25, 0x00	; 0
    6828:	b7 01       	movw	r22, r14
    682a:	0c c0       	rjmp	.+24     	; 0x6844 <vfprintf+0x62e>
    682c:	80 2f       	mov	r24, r16
    682e:	86 78       	andi	r24, 0x86	; 134
    6830:	51 f0       	breq	.+20     	; 0x6846 <vfprintf+0x630>
    6832:	01 ff       	sbrs	r16, 1
    6834:	02 c0       	rjmp	.+4      	; 0x683a <vfprintf+0x624>
    6836:	8b e2       	ldi	r24, 0x2B	; 43
    6838:	01 c0       	rjmp	.+2      	; 0x683c <vfprintf+0x626>
    683a:	80 e2       	ldi	r24, 0x20	; 32
    683c:	07 fd       	sbrc	r16, 7
    683e:	8d e2       	ldi	r24, 0x2D	; 45
    6840:	b7 01       	movw	r22, r14
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	0c d4       	rcall	.+2072   	; 0x705e <fputc>
    6846:	c1 16       	cp	r12, r17
    6848:	30 f4       	brcc	.+12     	; 0x6856 <vfprintf+0x640>
    684a:	b7 01       	movw	r22, r14
    684c:	80 e3       	ldi	r24, 0x30	; 48
    684e:	90 e0       	ldi	r25, 0x00	; 0
    6850:	06 d4       	rcall	.+2060   	; 0x705e <fputc>
    6852:	11 50       	subi	r17, 0x01	; 1
    6854:	f8 cf       	rjmp	.-16     	; 0x6846 <vfprintf+0x630>
    6856:	ca 94       	dec	r12
    6858:	f3 01       	movw	r30, r6
    685a:	ec 0d       	add	r30, r12
    685c:	f1 1d       	adc	r31, r1
    685e:	80 81       	ld	r24, Z
    6860:	b7 01       	movw	r22, r14
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	fc d3       	rcall	.+2040   	; 0x705e <fputc>
    6866:	c1 10       	cpse	r12, r1
    6868:	f6 cf       	rjmp	.-20     	; 0x6856 <vfprintf+0x640>
    686a:	15 c0       	rjmp	.+42     	; 0x6896 <vfprintf+0x680>
    686c:	f4 e0       	ldi	r31, 0x04	; 4
    686e:	f5 15       	cp	r31, r5
    6870:	50 f5       	brcc	.+84     	; 0x68c6 <vfprintf+0x6b0>
    6872:	84 e0       	ldi	r24, 0x04	; 4
    6874:	58 1a       	sub	r5, r24
    6876:	93 fe       	sbrs	r9, 3
    6878:	1e c0       	rjmp	.+60     	; 0x68b6 <vfprintf+0x6a0>
    687a:	01 11       	cpse	r16, r1
    687c:	25 c0       	rjmp	.+74     	; 0x68c8 <vfprintf+0x6b2>
    687e:	2c 85       	ldd	r18, Y+12	; 0x0c
    6880:	23 ff       	sbrs	r18, 3
    6882:	27 c0       	rjmp	.+78     	; 0x68d2 <vfprintf+0x6bc>
    6884:	0a e9       	ldi	r16, 0x9A	; 154
    6886:	11 e0       	ldi	r17, 0x01	; 1
    6888:	39 2d       	mov	r19, r9
    688a:	30 71       	andi	r19, 0x10	; 16
    688c:	93 2e       	mov	r9, r19
    688e:	f8 01       	movw	r30, r16
    6890:	84 91       	lpm	r24, Z
    6892:	81 11       	cpse	r24, r1
    6894:	21 c0       	rjmp	.+66     	; 0x68d8 <vfprintf+0x6c2>
    6896:	55 20       	and	r5, r5
    6898:	09 f4       	brne	.+2      	; 0x689c <vfprintf+0x686>
    689a:	fc cc       	rjmp	.-1544   	; 0x6294 <vfprintf+0x7e>
    689c:	b7 01       	movw	r22, r14
    689e:	80 e2       	ldi	r24, 0x20	; 32
    68a0:	90 e0       	ldi	r25, 0x00	; 0
    68a2:	dd d3       	rcall	.+1978   	; 0x705e <fputc>
    68a4:	5a 94       	dec	r5
    68a6:	f7 cf       	rjmp	.-18     	; 0x6896 <vfprintf+0x680>
    68a8:	f7 01       	movw	r30, r14
    68aa:	86 81       	ldd	r24, Z+6	; 0x06
    68ac:	97 81       	ldd	r25, Z+7	; 0x07
    68ae:	23 c0       	rjmp	.+70     	; 0x68f6 <vfprintf+0x6e0>
    68b0:	8f ef       	ldi	r24, 0xFF	; 255
    68b2:	9f ef       	ldi	r25, 0xFF	; 255
    68b4:	20 c0       	rjmp	.+64     	; 0x68f6 <vfprintf+0x6e0>
    68b6:	b7 01       	movw	r22, r14
    68b8:	80 e2       	ldi	r24, 0x20	; 32
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	d0 d3       	rcall	.+1952   	; 0x705e <fputc>
    68be:	5a 94       	dec	r5
    68c0:	51 10       	cpse	r5, r1
    68c2:	f9 cf       	rjmp	.-14     	; 0x68b6 <vfprintf+0x6a0>
    68c4:	da cf       	rjmp	.-76     	; 0x687a <vfprintf+0x664>
    68c6:	51 2c       	mov	r5, r1
    68c8:	b7 01       	movw	r22, r14
    68ca:	80 2f       	mov	r24, r16
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	c7 d3       	rcall	.+1934   	; 0x705e <fputc>
    68d0:	d6 cf       	rjmp	.-84     	; 0x687e <vfprintf+0x668>
    68d2:	0e e9       	ldi	r16, 0x9E	; 158
    68d4:	11 e0       	ldi	r17, 0x01	; 1
    68d6:	d8 cf       	rjmp	.-80     	; 0x6888 <vfprintf+0x672>
    68d8:	91 10       	cpse	r9, r1
    68da:	80 52       	subi	r24, 0x20	; 32
    68dc:	b7 01       	movw	r22, r14
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	be d3       	rcall	.+1916   	; 0x705e <fputc>
    68e2:	0f 5f       	subi	r16, 0xFF	; 255
    68e4:	1f 4f       	sbci	r17, 0xFF	; 255
    68e6:	d3 cf       	rjmp	.-90     	; 0x688e <vfprintf+0x678>
    68e8:	23 e0       	ldi	r18, 0x03	; 3
    68ea:	25 15       	cp	r18, r5
    68ec:	10 f4       	brcc	.+4      	; 0x68f2 <vfprintf+0x6dc>
    68ee:	83 e0       	ldi	r24, 0x03	; 3
    68f0:	c1 cf       	rjmp	.-126    	; 0x6874 <vfprintf+0x65e>
    68f2:	51 2c       	mov	r5, r1
    68f4:	c4 cf       	rjmp	.-120    	; 0x687e <vfprintf+0x668>
    68f6:	60 96       	adiw	r28, 0x10	; 16
    68f8:	0f b6       	in	r0, 0x3f	; 63
    68fa:	f8 94       	cli
    68fc:	de bf       	out	0x3e, r29	; 62
    68fe:	0f be       	out	0x3f, r0	; 63
    6900:	cd bf       	out	0x3d, r28	; 61
    6902:	df 91       	pop	r29
    6904:	cf 91       	pop	r28
    6906:	1f 91       	pop	r17
    6908:	0f 91       	pop	r16
    690a:	ff 90       	pop	r15
    690c:	ef 90       	pop	r14
    690e:	df 90       	pop	r13
    6910:	cf 90       	pop	r12
    6912:	bf 90       	pop	r11
    6914:	af 90       	pop	r10
    6916:	9f 90       	pop	r9
    6918:	8f 90       	pop	r8
    691a:	7f 90       	pop	r7
    691c:	6f 90       	pop	r6
    691e:	5f 90       	pop	r5
    6920:	4f 90       	pop	r4
    6922:	3f 90       	pop	r3
    6924:	2f 90       	pop	r2
    6926:	08 95       	ret

00006928 <__divsf3>:
    6928:	12 d0       	rcall	.+36     	; 0x694e <__divsf3x>
    692a:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <__fp_round>
    692e:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <__fp_pscB>
    6932:	58 f0       	brcs	.+22     	; 0x694a <__divsf3+0x22>
    6934:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__fp_pscA>
    6938:	40 f0       	brcs	.+16     	; 0x694a <__divsf3+0x22>
    693a:	29 f4       	brne	.+10     	; 0x6946 <__divsf3+0x1e>
    693c:	5f 3f       	cpi	r21, 0xFF	; 255
    693e:	29 f0       	breq	.+10     	; 0x694a <__divsf3+0x22>
    6940:	0c 94 d3 23 	jmp	0x47a6	; 0x47a6 <__fp_inf>
    6944:	51 11       	cpse	r21, r1
    6946:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__fp_szero>
    694a:	0c 94 d9 23 	jmp	0x47b2	; 0x47b2 <__fp_nan>

0000694e <__divsf3x>:
    694e:	0e 94 af 22 	call	0x455e	; 0x455e <__fp_split3>
    6952:	68 f3       	brcs	.-38     	; 0x692e <__divsf3+0x6>

00006954 <__divsf3_pse>:
    6954:	99 23       	and	r25, r25
    6956:	b1 f3       	breq	.-20     	; 0x6944 <__divsf3+0x1c>
    6958:	55 23       	and	r21, r21
    695a:	91 f3       	breq	.-28     	; 0x6940 <__divsf3+0x18>
    695c:	95 1b       	sub	r25, r21
    695e:	55 0b       	sbc	r21, r21
    6960:	bb 27       	eor	r27, r27
    6962:	aa 27       	eor	r26, r26
    6964:	62 17       	cp	r22, r18
    6966:	73 07       	cpc	r23, r19
    6968:	84 07       	cpc	r24, r20
    696a:	38 f0       	brcs	.+14     	; 0x697a <__divsf3_pse+0x26>
    696c:	9f 5f       	subi	r25, 0xFF	; 255
    696e:	5f 4f       	sbci	r21, 0xFF	; 255
    6970:	22 0f       	add	r18, r18
    6972:	33 1f       	adc	r19, r19
    6974:	44 1f       	adc	r20, r20
    6976:	aa 1f       	adc	r26, r26
    6978:	a9 f3       	breq	.-22     	; 0x6964 <__divsf3_pse+0x10>
    697a:	35 d0       	rcall	.+106    	; 0x69e6 <__divsf3_pse+0x92>
    697c:	0e 2e       	mov	r0, r30
    697e:	3a f0       	brmi	.+14     	; 0x698e <__divsf3_pse+0x3a>
    6980:	e0 e8       	ldi	r30, 0x80	; 128
    6982:	32 d0       	rcall	.+100    	; 0x69e8 <__divsf3_pse+0x94>
    6984:	91 50       	subi	r25, 0x01	; 1
    6986:	50 40       	sbci	r21, 0x00	; 0
    6988:	e6 95       	lsr	r30
    698a:	00 1c       	adc	r0, r0
    698c:	ca f7       	brpl	.-14     	; 0x6980 <__divsf3_pse+0x2c>
    698e:	2b d0       	rcall	.+86     	; 0x69e6 <__divsf3_pse+0x92>
    6990:	fe 2f       	mov	r31, r30
    6992:	29 d0       	rcall	.+82     	; 0x69e6 <__divsf3_pse+0x92>
    6994:	66 0f       	add	r22, r22
    6996:	77 1f       	adc	r23, r23
    6998:	88 1f       	adc	r24, r24
    699a:	bb 1f       	adc	r27, r27
    699c:	26 17       	cp	r18, r22
    699e:	37 07       	cpc	r19, r23
    69a0:	48 07       	cpc	r20, r24
    69a2:	ab 07       	cpc	r26, r27
    69a4:	b0 e8       	ldi	r27, 0x80	; 128
    69a6:	09 f0       	breq	.+2      	; 0x69aa <__divsf3_pse+0x56>
    69a8:	bb 0b       	sbc	r27, r27
    69aa:	80 2d       	mov	r24, r0
    69ac:	bf 01       	movw	r22, r30
    69ae:	ff 27       	eor	r31, r31
    69b0:	93 58       	subi	r25, 0x83	; 131
    69b2:	5f 4f       	sbci	r21, 0xFF	; 255
    69b4:	3a f0       	brmi	.+14     	; 0x69c4 <__divsf3_pse+0x70>
    69b6:	9e 3f       	cpi	r25, 0xFE	; 254
    69b8:	51 05       	cpc	r21, r1
    69ba:	78 f0       	brcs	.+30     	; 0x69da <__divsf3_pse+0x86>
    69bc:	0c 94 d3 23 	jmp	0x47a6	; 0x47a6 <__fp_inf>
    69c0:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__fp_szero>
    69c4:	5f 3f       	cpi	r21, 0xFF	; 255
    69c6:	e4 f3       	brlt	.-8      	; 0x69c0 <__divsf3_pse+0x6c>
    69c8:	98 3e       	cpi	r25, 0xE8	; 232
    69ca:	d4 f3       	brlt	.-12     	; 0x69c0 <__divsf3_pse+0x6c>
    69cc:	86 95       	lsr	r24
    69ce:	77 95       	ror	r23
    69d0:	67 95       	ror	r22
    69d2:	b7 95       	ror	r27
    69d4:	f7 95       	ror	r31
    69d6:	9f 5f       	subi	r25, 0xFF	; 255
    69d8:	c9 f7       	brne	.-14     	; 0x69cc <__divsf3_pse+0x78>
    69da:	88 0f       	add	r24, r24
    69dc:	91 1d       	adc	r25, r1
    69de:	96 95       	lsr	r25
    69e0:	87 95       	ror	r24
    69e2:	97 f9       	bld	r25, 7
    69e4:	08 95       	ret
    69e6:	e1 e0       	ldi	r30, 0x01	; 1
    69e8:	66 0f       	add	r22, r22
    69ea:	77 1f       	adc	r23, r23
    69ec:	88 1f       	adc	r24, r24
    69ee:	bb 1f       	adc	r27, r27
    69f0:	62 17       	cp	r22, r18
    69f2:	73 07       	cpc	r23, r19
    69f4:	84 07       	cpc	r24, r20
    69f6:	ba 07       	cpc	r27, r26
    69f8:	20 f0       	brcs	.+8      	; 0x6a02 <__divsf3_pse+0xae>
    69fa:	62 1b       	sub	r22, r18
    69fc:	73 0b       	sbc	r23, r19
    69fe:	84 0b       	sbc	r24, r20
    6a00:	ba 0b       	sbc	r27, r26
    6a02:	ee 1f       	adc	r30, r30
    6a04:	88 f7       	brcc	.-30     	; 0x69e8 <__divsf3_pse+0x94>
    6a06:	e0 95       	com	r30
    6a08:	08 95       	ret

00006a0a <__floatunsisf>:
    6a0a:	e8 94       	clt
    6a0c:	09 c0       	rjmp	.+18     	; 0x6a20 <__floatsisf+0x12>

00006a0e <__floatsisf>:
    6a0e:	97 fb       	bst	r25, 7
    6a10:	3e f4       	brtc	.+14     	; 0x6a20 <__floatsisf+0x12>
    6a12:	90 95       	com	r25
    6a14:	80 95       	com	r24
    6a16:	70 95       	com	r23
    6a18:	61 95       	neg	r22
    6a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    6a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a20:	99 23       	and	r25, r25
    6a22:	a9 f0       	breq	.+42     	; 0x6a4e <__floatsisf+0x40>
    6a24:	f9 2f       	mov	r31, r25
    6a26:	96 e9       	ldi	r25, 0x96	; 150
    6a28:	bb 27       	eor	r27, r27
    6a2a:	93 95       	inc	r25
    6a2c:	f6 95       	lsr	r31
    6a2e:	87 95       	ror	r24
    6a30:	77 95       	ror	r23
    6a32:	67 95       	ror	r22
    6a34:	b7 95       	ror	r27
    6a36:	f1 11       	cpse	r31, r1
    6a38:	f8 cf       	rjmp	.-16     	; 0x6a2a <__floatsisf+0x1c>
    6a3a:	fa f4       	brpl	.+62     	; 0x6a7a <__floatsisf+0x6c>
    6a3c:	bb 0f       	add	r27, r27
    6a3e:	11 f4       	brne	.+4      	; 0x6a44 <__floatsisf+0x36>
    6a40:	60 ff       	sbrs	r22, 0
    6a42:	1b c0       	rjmp	.+54     	; 0x6a7a <__floatsisf+0x6c>
    6a44:	6f 5f       	subi	r22, 0xFF	; 255
    6a46:	7f 4f       	sbci	r23, 0xFF	; 255
    6a48:	8f 4f       	sbci	r24, 0xFF	; 255
    6a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    6a4c:	16 c0       	rjmp	.+44     	; 0x6a7a <__floatsisf+0x6c>
    6a4e:	88 23       	and	r24, r24
    6a50:	11 f0       	breq	.+4      	; 0x6a56 <__floatsisf+0x48>
    6a52:	96 e9       	ldi	r25, 0x96	; 150
    6a54:	11 c0       	rjmp	.+34     	; 0x6a78 <__floatsisf+0x6a>
    6a56:	77 23       	and	r23, r23
    6a58:	21 f0       	breq	.+8      	; 0x6a62 <__floatsisf+0x54>
    6a5a:	9e e8       	ldi	r25, 0x8E	; 142
    6a5c:	87 2f       	mov	r24, r23
    6a5e:	76 2f       	mov	r23, r22
    6a60:	05 c0       	rjmp	.+10     	; 0x6a6c <__floatsisf+0x5e>
    6a62:	66 23       	and	r22, r22
    6a64:	71 f0       	breq	.+28     	; 0x6a82 <__floatsisf+0x74>
    6a66:	96 e8       	ldi	r25, 0x86	; 134
    6a68:	86 2f       	mov	r24, r22
    6a6a:	70 e0       	ldi	r23, 0x00	; 0
    6a6c:	60 e0       	ldi	r22, 0x00	; 0
    6a6e:	2a f0       	brmi	.+10     	; 0x6a7a <__floatsisf+0x6c>
    6a70:	9a 95       	dec	r25
    6a72:	66 0f       	add	r22, r22
    6a74:	77 1f       	adc	r23, r23
    6a76:	88 1f       	adc	r24, r24
    6a78:	da f7       	brpl	.-10     	; 0x6a70 <__floatsisf+0x62>
    6a7a:	88 0f       	add	r24, r24
    6a7c:	96 95       	lsr	r25
    6a7e:	87 95       	ror	r24
    6a80:	97 f9       	bld	r25, 7
    6a82:	08 95       	ret

00006a84 <__gesf2>:
    6a84:	03 d0       	rcall	.+6      	; 0x6a8c <__fp_cmp>
    6a86:	08 f4       	brcc	.+2      	; 0x6a8a <__gesf2+0x6>
    6a88:	8f ef       	ldi	r24, 0xFF	; 255
    6a8a:	08 95       	ret

00006a8c <__fp_cmp>:
    6a8c:	99 0f       	add	r25, r25
    6a8e:	00 08       	sbc	r0, r0
    6a90:	55 0f       	add	r21, r21
    6a92:	aa 0b       	sbc	r26, r26
    6a94:	e0 e8       	ldi	r30, 0x80	; 128
    6a96:	fe ef       	ldi	r31, 0xFE	; 254
    6a98:	16 16       	cp	r1, r22
    6a9a:	17 06       	cpc	r1, r23
    6a9c:	e8 07       	cpc	r30, r24
    6a9e:	f9 07       	cpc	r31, r25
    6aa0:	c0 f0       	brcs	.+48     	; 0x6ad2 <__fp_cmp+0x46>
    6aa2:	12 16       	cp	r1, r18
    6aa4:	13 06       	cpc	r1, r19
    6aa6:	e4 07       	cpc	r30, r20
    6aa8:	f5 07       	cpc	r31, r21
    6aaa:	98 f0       	brcs	.+38     	; 0x6ad2 <__fp_cmp+0x46>
    6aac:	62 1b       	sub	r22, r18
    6aae:	73 0b       	sbc	r23, r19
    6ab0:	84 0b       	sbc	r24, r20
    6ab2:	95 0b       	sbc	r25, r21
    6ab4:	39 f4       	brne	.+14     	; 0x6ac4 <__fp_cmp+0x38>
    6ab6:	0a 26       	eor	r0, r26
    6ab8:	61 f0       	breq	.+24     	; 0x6ad2 <__fp_cmp+0x46>
    6aba:	23 2b       	or	r18, r19
    6abc:	24 2b       	or	r18, r20
    6abe:	25 2b       	or	r18, r21
    6ac0:	21 f4       	brne	.+8      	; 0x6aca <__fp_cmp+0x3e>
    6ac2:	08 95       	ret
    6ac4:	0a 26       	eor	r0, r26
    6ac6:	09 f4       	brne	.+2      	; 0x6aca <__fp_cmp+0x3e>
    6ac8:	a1 40       	sbci	r26, 0x01	; 1
    6aca:	a6 95       	lsr	r26
    6acc:	8f ef       	ldi	r24, 0xFF	; 255
    6ace:	81 1d       	adc	r24, r1
    6ad0:	81 1d       	adc	r24, r1
    6ad2:	08 95       	ret

00006ad4 <__udivmodsi4>:
    6ad4:	a1 e2       	ldi	r26, 0x21	; 33
    6ad6:	1a 2e       	mov	r1, r26
    6ad8:	aa 1b       	sub	r26, r26
    6ada:	bb 1b       	sub	r27, r27
    6adc:	fd 01       	movw	r30, r26
    6ade:	0d c0       	rjmp	.+26     	; 0x6afa <__udivmodsi4_ep>

00006ae0 <__udivmodsi4_loop>:
    6ae0:	aa 1f       	adc	r26, r26
    6ae2:	bb 1f       	adc	r27, r27
    6ae4:	ee 1f       	adc	r30, r30
    6ae6:	ff 1f       	adc	r31, r31
    6ae8:	a2 17       	cp	r26, r18
    6aea:	b3 07       	cpc	r27, r19
    6aec:	e4 07       	cpc	r30, r20
    6aee:	f5 07       	cpc	r31, r21
    6af0:	20 f0       	brcs	.+8      	; 0x6afa <__udivmodsi4_ep>
    6af2:	a2 1b       	sub	r26, r18
    6af4:	b3 0b       	sbc	r27, r19
    6af6:	e4 0b       	sbc	r30, r20
    6af8:	f5 0b       	sbc	r31, r21

00006afa <__udivmodsi4_ep>:
    6afa:	66 1f       	adc	r22, r22
    6afc:	77 1f       	adc	r23, r23
    6afe:	88 1f       	adc	r24, r24
    6b00:	99 1f       	adc	r25, r25
    6b02:	1a 94       	dec	r1
    6b04:	69 f7       	brne	.-38     	; 0x6ae0 <__udivmodsi4_loop>
    6b06:	60 95       	com	r22
    6b08:	70 95       	com	r23
    6b0a:	80 95       	com	r24
    6b0c:	90 95       	com	r25
    6b0e:	9b 01       	movw	r18, r22
    6b10:	ac 01       	movw	r20, r24
    6b12:	bd 01       	movw	r22, r26
    6b14:	cf 01       	movw	r24, r30
    6b16:	08 95       	ret

00006b18 <__tablejump2__>:
    6b18:	ee 0f       	add	r30, r30
    6b1a:	ff 1f       	adc	r31, r31
    6b1c:	88 1f       	adc	r24, r24
    6b1e:	8b bf       	out	0x3b, r24	; 59
    6b20:	07 90       	elpm	r0, Z+
    6b22:	f6 91       	elpm	r31, Z
    6b24:	e0 2d       	mov	r30, r0
    6b26:	19 94       	eijmp

00006b28 <__umulhisi3>:
    6b28:	a2 9f       	mul	r26, r18
    6b2a:	b0 01       	movw	r22, r0
    6b2c:	b3 9f       	mul	r27, r19
    6b2e:	c0 01       	movw	r24, r0
    6b30:	a3 9f       	mul	r26, r19
    6b32:	70 0d       	add	r23, r0
    6b34:	81 1d       	adc	r24, r1
    6b36:	11 24       	eor	r1, r1
    6b38:	91 1d       	adc	r25, r1
    6b3a:	b2 9f       	mul	r27, r18
    6b3c:	70 0d       	add	r23, r0
    6b3e:	81 1d       	adc	r24, r1
    6b40:	11 24       	eor	r1, r1
    6b42:	91 1d       	adc	r25, r1
    6b44:	08 95       	ret

00006b46 <calloc>:
    6b46:	0f 93       	push	r16
    6b48:	1f 93       	push	r17
    6b4a:	cf 93       	push	r28
    6b4c:	df 93       	push	r29
    6b4e:	86 9f       	mul	r24, r22
    6b50:	80 01       	movw	r16, r0
    6b52:	87 9f       	mul	r24, r23
    6b54:	10 0d       	add	r17, r0
    6b56:	96 9f       	mul	r25, r22
    6b58:	10 0d       	add	r17, r0
    6b5a:	11 24       	eor	r1, r1
    6b5c:	c8 01       	movw	r24, r16
    6b5e:	0d d0       	rcall	.+26     	; 0x6b7a <malloc>
    6b60:	ec 01       	movw	r28, r24
    6b62:	00 97       	sbiw	r24, 0x00	; 0
    6b64:	21 f0       	breq	.+8      	; 0x6b6e <calloc+0x28>
    6b66:	a8 01       	movw	r20, r16
    6b68:	60 e0       	ldi	r22, 0x00	; 0
    6b6a:	70 e0       	ldi	r23, 0x00	; 0
    6b6c:	17 d2       	rcall	.+1070   	; 0x6f9c <memset>
    6b6e:	ce 01       	movw	r24, r28
    6b70:	df 91       	pop	r29
    6b72:	cf 91       	pop	r28
    6b74:	1f 91       	pop	r17
    6b76:	0f 91       	pop	r16
    6b78:	08 95       	ret

00006b7a <malloc>:
    6b7a:	0f 93       	push	r16
    6b7c:	1f 93       	push	r17
    6b7e:	cf 93       	push	r28
    6b80:	df 93       	push	r29
    6b82:	82 30       	cpi	r24, 0x02	; 2
    6b84:	91 05       	cpc	r25, r1
    6b86:	10 f4       	brcc	.+4      	; 0x6b8c <malloc+0x12>
    6b88:	82 e0       	ldi	r24, 0x02	; 2
    6b8a:	90 e0       	ldi	r25, 0x00	; 0
    6b8c:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <__flp>
    6b90:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <__flp+0x1>
    6b94:	20 e0       	ldi	r18, 0x00	; 0
    6b96:	30 e0       	ldi	r19, 0x00	; 0
    6b98:	a0 e0       	ldi	r26, 0x00	; 0
    6b9a:	b0 e0       	ldi	r27, 0x00	; 0
    6b9c:	30 97       	sbiw	r30, 0x00	; 0
    6b9e:	19 f1       	breq	.+70     	; 0x6be6 <malloc+0x6c>
    6ba0:	40 81       	ld	r20, Z
    6ba2:	51 81       	ldd	r21, Z+1	; 0x01
    6ba4:	02 81       	ldd	r16, Z+2	; 0x02
    6ba6:	13 81       	ldd	r17, Z+3	; 0x03
    6ba8:	48 17       	cp	r20, r24
    6baa:	59 07       	cpc	r21, r25
    6bac:	c8 f0       	brcs	.+50     	; 0x6be0 <malloc+0x66>
    6bae:	84 17       	cp	r24, r20
    6bb0:	95 07       	cpc	r25, r21
    6bb2:	69 f4       	brne	.+26     	; 0x6bce <malloc+0x54>
    6bb4:	10 97       	sbiw	r26, 0x00	; 0
    6bb6:	31 f0       	breq	.+12     	; 0x6bc4 <malloc+0x4a>
    6bb8:	12 96       	adiw	r26, 0x02	; 2
    6bba:	0c 93       	st	X, r16
    6bbc:	12 97       	sbiw	r26, 0x02	; 2
    6bbe:	13 96       	adiw	r26, 0x03	; 3
    6bc0:	1c 93       	st	X, r17
    6bc2:	27 c0       	rjmp	.+78     	; 0x6c12 <malloc+0x98>
    6bc4:	00 93 6d 15 	sts	0x156D, r16	; 0x80156d <__flp>
    6bc8:	10 93 6e 15 	sts	0x156E, r17	; 0x80156e <__flp+0x1>
    6bcc:	22 c0       	rjmp	.+68     	; 0x6c12 <malloc+0x98>
    6bce:	21 15       	cp	r18, r1
    6bd0:	31 05       	cpc	r19, r1
    6bd2:	19 f0       	breq	.+6      	; 0x6bda <malloc+0x60>
    6bd4:	42 17       	cp	r20, r18
    6bd6:	53 07       	cpc	r21, r19
    6bd8:	18 f4       	brcc	.+6      	; 0x6be0 <malloc+0x66>
    6bda:	9a 01       	movw	r18, r20
    6bdc:	bd 01       	movw	r22, r26
    6bde:	ef 01       	movw	r28, r30
    6be0:	df 01       	movw	r26, r30
    6be2:	f8 01       	movw	r30, r16
    6be4:	db cf       	rjmp	.-74     	; 0x6b9c <malloc+0x22>
    6be6:	21 15       	cp	r18, r1
    6be8:	31 05       	cpc	r19, r1
    6bea:	f9 f0       	breq	.+62     	; 0x6c2a <malloc+0xb0>
    6bec:	28 1b       	sub	r18, r24
    6bee:	39 0b       	sbc	r19, r25
    6bf0:	24 30       	cpi	r18, 0x04	; 4
    6bf2:	31 05       	cpc	r19, r1
    6bf4:	80 f4       	brcc	.+32     	; 0x6c16 <malloc+0x9c>
    6bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    6bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bfa:	61 15       	cp	r22, r1
    6bfc:	71 05       	cpc	r23, r1
    6bfe:	21 f0       	breq	.+8      	; 0x6c08 <malloc+0x8e>
    6c00:	fb 01       	movw	r30, r22
    6c02:	93 83       	std	Z+3, r25	; 0x03
    6c04:	82 83       	std	Z+2, r24	; 0x02
    6c06:	04 c0       	rjmp	.+8      	; 0x6c10 <malloc+0x96>
    6c08:	90 93 6e 15 	sts	0x156E, r25	; 0x80156e <__flp+0x1>
    6c0c:	80 93 6d 15 	sts	0x156D, r24	; 0x80156d <__flp>
    6c10:	fe 01       	movw	r30, r28
    6c12:	32 96       	adiw	r30, 0x02	; 2
    6c14:	44 c0       	rjmp	.+136    	; 0x6c9e <malloc+0x124>
    6c16:	fe 01       	movw	r30, r28
    6c18:	e2 0f       	add	r30, r18
    6c1a:	f3 1f       	adc	r31, r19
    6c1c:	81 93       	st	Z+, r24
    6c1e:	91 93       	st	Z+, r25
    6c20:	22 50       	subi	r18, 0x02	; 2
    6c22:	31 09       	sbc	r19, r1
    6c24:	39 83       	std	Y+1, r19	; 0x01
    6c26:	28 83       	st	Y, r18
    6c28:	3a c0       	rjmp	.+116    	; 0x6c9e <malloc+0x124>
    6c2a:	20 91 6b 15 	lds	r18, 0x156B	; 0x80156b <__brkval>
    6c2e:	30 91 6c 15 	lds	r19, 0x156C	; 0x80156c <__brkval+0x1>
    6c32:	23 2b       	or	r18, r19
    6c34:	41 f4       	brne	.+16     	; 0x6c46 <malloc+0xcc>
    6c36:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6c3a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6c3e:	30 93 6c 15 	sts	0x156C, r19	; 0x80156c <__brkval+0x1>
    6c42:	20 93 6b 15 	sts	0x156B, r18	; 0x80156b <__brkval>
    6c46:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6c4a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6c4e:	21 15       	cp	r18, r1
    6c50:	31 05       	cpc	r19, r1
    6c52:	41 f4       	brne	.+16     	; 0x6c64 <malloc+0xea>
    6c54:	2d b7       	in	r18, 0x3d	; 61
    6c56:	3e b7       	in	r19, 0x3e	; 62
    6c58:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6c5c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6c60:	24 1b       	sub	r18, r20
    6c62:	35 0b       	sbc	r19, r21
    6c64:	e0 91 6b 15 	lds	r30, 0x156B	; 0x80156b <__brkval>
    6c68:	f0 91 6c 15 	lds	r31, 0x156C	; 0x80156c <__brkval+0x1>
    6c6c:	e2 17       	cp	r30, r18
    6c6e:	f3 07       	cpc	r31, r19
    6c70:	a0 f4       	brcc	.+40     	; 0x6c9a <malloc+0x120>
    6c72:	2e 1b       	sub	r18, r30
    6c74:	3f 0b       	sbc	r19, r31
    6c76:	28 17       	cp	r18, r24
    6c78:	39 07       	cpc	r19, r25
    6c7a:	78 f0       	brcs	.+30     	; 0x6c9a <malloc+0x120>
    6c7c:	ac 01       	movw	r20, r24
    6c7e:	4e 5f       	subi	r20, 0xFE	; 254
    6c80:	5f 4f       	sbci	r21, 0xFF	; 255
    6c82:	24 17       	cp	r18, r20
    6c84:	35 07       	cpc	r19, r21
    6c86:	48 f0       	brcs	.+18     	; 0x6c9a <malloc+0x120>
    6c88:	4e 0f       	add	r20, r30
    6c8a:	5f 1f       	adc	r21, r31
    6c8c:	50 93 6c 15 	sts	0x156C, r21	; 0x80156c <__brkval+0x1>
    6c90:	40 93 6b 15 	sts	0x156B, r20	; 0x80156b <__brkval>
    6c94:	81 93       	st	Z+, r24
    6c96:	91 93       	st	Z+, r25
    6c98:	02 c0       	rjmp	.+4      	; 0x6c9e <malloc+0x124>
    6c9a:	e0 e0       	ldi	r30, 0x00	; 0
    6c9c:	f0 e0       	ldi	r31, 0x00	; 0
    6c9e:	cf 01       	movw	r24, r30
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	1f 91       	pop	r17
    6ca6:	0f 91       	pop	r16
    6ca8:	08 95       	ret

00006caa <free>:
    6caa:	cf 93       	push	r28
    6cac:	df 93       	push	r29
    6cae:	00 97       	sbiw	r24, 0x00	; 0
    6cb0:	09 f4       	brne	.+2      	; 0x6cb4 <free+0xa>
    6cb2:	81 c0       	rjmp	.+258    	; 0x6db6 <free+0x10c>
    6cb4:	fc 01       	movw	r30, r24
    6cb6:	32 97       	sbiw	r30, 0x02	; 2
    6cb8:	13 82       	std	Z+3, r1	; 0x03
    6cba:	12 82       	std	Z+2, r1	; 0x02
    6cbc:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <__flp>
    6cc0:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <__flp+0x1>
    6cc4:	10 97       	sbiw	r26, 0x00	; 0
    6cc6:	81 f4       	brne	.+32     	; 0x6ce8 <free+0x3e>
    6cc8:	20 81       	ld	r18, Z
    6cca:	31 81       	ldd	r19, Z+1	; 0x01
    6ccc:	82 0f       	add	r24, r18
    6cce:	93 1f       	adc	r25, r19
    6cd0:	20 91 6b 15 	lds	r18, 0x156B	; 0x80156b <__brkval>
    6cd4:	30 91 6c 15 	lds	r19, 0x156C	; 0x80156c <__brkval+0x1>
    6cd8:	28 17       	cp	r18, r24
    6cda:	39 07       	cpc	r19, r25
    6cdc:	51 f5       	brne	.+84     	; 0x6d32 <free+0x88>
    6cde:	f0 93 6c 15 	sts	0x156C, r31	; 0x80156c <__brkval+0x1>
    6ce2:	e0 93 6b 15 	sts	0x156B, r30	; 0x80156b <__brkval>
    6ce6:	67 c0       	rjmp	.+206    	; 0x6db6 <free+0x10c>
    6ce8:	ed 01       	movw	r28, r26
    6cea:	20 e0       	ldi	r18, 0x00	; 0
    6cec:	30 e0       	ldi	r19, 0x00	; 0
    6cee:	ce 17       	cp	r28, r30
    6cf0:	df 07       	cpc	r29, r31
    6cf2:	40 f4       	brcc	.+16     	; 0x6d04 <free+0x5a>
    6cf4:	4a 81       	ldd	r20, Y+2	; 0x02
    6cf6:	5b 81       	ldd	r21, Y+3	; 0x03
    6cf8:	9e 01       	movw	r18, r28
    6cfa:	41 15       	cp	r20, r1
    6cfc:	51 05       	cpc	r21, r1
    6cfe:	f1 f0       	breq	.+60     	; 0x6d3c <free+0x92>
    6d00:	ea 01       	movw	r28, r20
    6d02:	f5 cf       	rjmp	.-22     	; 0x6cee <free+0x44>
    6d04:	d3 83       	std	Z+3, r29	; 0x03
    6d06:	c2 83       	std	Z+2, r28	; 0x02
    6d08:	40 81       	ld	r20, Z
    6d0a:	51 81       	ldd	r21, Z+1	; 0x01
    6d0c:	84 0f       	add	r24, r20
    6d0e:	95 1f       	adc	r25, r21
    6d10:	c8 17       	cp	r28, r24
    6d12:	d9 07       	cpc	r29, r25
    6d14:	59 f4       	brne	.+22     	; 0x6d2c <free+0x82>
    6d16:	88 81       	ld	r24, Y
    6d18:	99 81       	ldd	r25, Y+1	; 0x01
    6d1a:	84 0f       	add	r24, r20
    6d1c:	95 1f       	adc	r25, r21
    6d1e:	02 96       	adiw	r24, 0x02	; 2
    6d20:	91 83       	std	Z+1, r25	; 0x01
    6d22:	80 83       	st	Z, r24
    6d24:	8a 81       	ldd	r24, Y+2	; 0x02
    6d26:	9b 81       	ldd	r25, Y+3	; 0x03
    6d28:	93 83       	std	Z+3, r25	; 0x03
    6d2a:	82 83       	std	Z+2, r24	; 0x02
    6d2c:	21 15       	cp	r18, r1
    6d2e:	31 05       	cpc	r19, r1
    6d30:	29 f4       	brne	.+10     	; 0x6d3c <free+0x92>
    6d32:	f0 93 6e 15 	sts	0x156E, r31	; 0x80156e <__flp+0x1>
    6d36:	e0 93 6d 15 	sts	0x156D, r30	; 0x80156d <__flp>
    6d3a:	3d c0       	rjmp	.+122    	; 0x6db6 <free+0x10c>
    6d3c:	e9 01       	movw	r28, r18
    6d3e:	fb 83       	std	Y+3, r31	; 0x03
    6d40:	ea 83       	std	Y+2, r30	; 0x02
    6d42:	49 91       	ld	r20, Y+
    6d44:	59 91       	ld	r21, Y+
    6d46:	c4 0f       	add	r28, r20
    6d48:	d5 1f       	adc	r29, r21
    6d4a:	ec 17       	cp	r30, r28
    6d4c:	fd 07       	cpc	r31, r29
    6d4e:	61 f4       	brne	.+24     	; 0x6d68 <free+0xbe>
    6d50:	80 81       	ld	r24, Z
    6d52:	91 81       	ldd	r25, Z+1	; 0x01
    6d54:	84 0f       	add	r24, r20
    6d56:	95 1f       	adc	r25, r21
    6d58:	02 96       	adiw	r24, 0x02	; 2
    6d5a:	e9 01       	movw	r28, r18
    6d5c:	99 83       	std	Y+1, r25	; 0x01
    6d5e:	88 83       	st	Y, r24
    6d60:	82 81       	ldd	r24, Z+2	; 0x02
    6d62:	93 81       	ldd	r25, Z+3	; 0x03
    6d64:	9b 83       	std	Y+3, r25	; 0x03
    6d66:	8a 83       	std	Y+2, r24	; 0x02
    6d68:	e0 e0       	ldi	r30, 0x00	; 0
    6d6a:	f0 e0       	ldi	r31, 0x00	; 0
    6d6c:	12 96       	adiw	r26, 0x02	; 2
    6d6e:	8d 91       	ld	r24, X+
    6d70:	9c 91       	ld	r25, X
    6d72:	13 97       	sbiw	r26, 0x03	; 3
    6d74:	00 97       	sbiw	r24, 0x00	; 0
    6d76:	19 f0       	breq	.+6      	; 0x6d7e <free+0xd4>
    6d78:	fd 01       	movw	r30, r26
    6d7a:	dc 01       	movw	r26, r24
    6d7c:	f7 cf       	rjmp	.-18     	; 0x6d6c <free+0xc2>
    6d7e:	8d 91       	ld	r24, X+
    6d80:	9c 91       	ld	r25, X
    6d82:	11 97       	sbiw	r26, 0x01	; 1
    6d84:	9d 01       	movw	r18, r26
    6d86:	2e 5f       	subi	r18, 0xFE	; 254
    6d88:	3f 4f       	sbci	r19, 0xFF	; 255
    6d8a:	82 0f       	add	r24, r18
    6d8c:	93 1f       	adc	r25, r19
    6d8e:	20 91 6b 15 	lds	r18, 0x156B	; 0x80156b <__brkval>
    6d92:	30 91 6c 15 	lds	r19, 0x156C	; 0x80156c <__brkval+0x1>
    6d96:	28 17       	cp	r18, r24
    6d98:	39 07       	cpc	r19, r25
    6d9a:	69 f4       	brne	.+26     	; 0x6db6 <free+0x10c>
    6d9c:	30 97       	sbiw	r30, 0x00	; 0
    6d9e:	29 f4       	brne	.+10     	; 0x6daa <free+0x100>
    6da0:	10 92 6e 15 	sts	0x156E, r1	; 0x80156e <__flp+0x1>
    6da4:	10 92 6d 15 	sts	0x156D, r1	; 0x80156d <__flp>
    6da8:	02 c0       	rjmp	.+4      	; 0x6dae <free+0x104>
    6daa:	13 82       	std	Z+3, r1	; 0x03
    6dac:	12 82       	std	Z+2, r1	; 0x02
    6dae:	b0 93 6c 15 	sts	0x156C, r27	; 0x80156c <__brkval+0x1>
    6db2:	a0 93 6b 15 	sts	0x156B, r26	; 0x80156b <__brkval>
    6db6:	df 91       	pop	r29
    6db8:	cf 91       	pop	r28
    6dba:	08 95       	ret

00006dbc <abort>:
    6dbc:	81 e0       	ldi	r24, 0x01	; 1
    6dbe:	90 e0       	ldi	r25, 0x00	; 0
    6dc0:	f8 94       	cli
    6dc2:	5f c2       	rjmp	.+1214   	; 0x7282 <_exit>

00006dc4 <__ftoa_engine>:
    6dc4:	28 30       	cpi	r18, 0x08	; 8
    6dc6:	08 f0       	brcs	.+2      	; 0x6dca <__ftoa_engine+0x6>
    6dc8:	27 e0       	ldi	r18, 0x07	; 7
    6dca:	33 27       	eor	r19, r19
    6dcc:	da 01       	movw	r26, r20
    6dce:	99 0f       	add	r25, r25
    6dd0:	31 1d       	adc	r19, r1
    6dd2:	87 fd       	sbrc	r24, 7
    6dd4:	91 60       	ori	r25, 0x01	; 1
    6dd6:	00 96       	adiw	r24, 0x00	; 0
    6dd8:	61 05       	cpc	r22, r1
    6dda:	71 05       	cpc	r23, r1
    6ddc:	39 f4       	brne	.+14     	; 0x6dec <__ftoa_engine+0x28>
    6dde:	32 60       	ori	r19, 0x02	; 2
    6de0:	2e 5f       	subi	r18, 0xFE	; 254
    6de2:	3d 93       	st	X+, r19
    6de4:	30 e3       	ldi	r19, 0x30	; 48
    6de6:	2a 95       	dec	r18
    6de8:	e1 f7       	brne	.-8      	; 0x6de2 <__ftoa_engine+0x1e>
    6dea:	08 95       	ret
    6dec:	9f 3f       	cpi	r25, 0xFF	; 255
    6dee:	30 f0       	brcs	.+12     	; 0x6dfc <__ftoa_engine+0x38>
    6df0:	80 38       	cpi	r24, 0x80	; 128
    6df2:	71 05       	cpc	r23, r1
    6df4:	61 05       	cpc	r22, r1
    6df6:	09 f0       	breq	.+2      	; 0x6dfa <__ftoa_engine+0x36>
    6df8:	3c 5f       	subi	r19, 0xFC	; 252
    6dfa:	3c 5f       	subi	r19, 0xFC	; 252
    6dfc:	3d 93       	st	X+, r19
    6dfe:	91 30       	cpi	r25, 0x01	; 1
    6e00:	08 f0       	brcs	.+2      	; 0x6e04 <__ftoa_engine+0x40>
    6e02:	80 68       	ori	r24, 0x80	; 128
    6e04:	91 1d       	adc	r25, r1
    6e06:	df 93       	push	r29
    6e08:	cf 93       	push	r28
    6e0a:	1f 93       	push	r17
    6e0c:	0f 93       	push	r16
    6e0e:	ff 92       	push	r15
    6e10:	ef 92       	push	r14
    6e12:	19 2f       	mov	r17, r25
    6e14:	98 7f       	andi	r25, 0xF8	; 248
    6e16:	96 95       	lsr	r25
    6e18:	e9 2f       	mov	r30, r25
    6e1a:	96 95       	lsr	r25
    6e1c:	96 95       	lsr	r25
    6e1e:	e9 0f       	add	r30, r25
    6e20:	ff 27       	eor	r31, r31
    6e22:	e4 50       	subi	r30, 0x04	; 4
    6e24:	fe 4f       	sbci	r31, 0xFE	; 254
    6e26:	99 27       	eor	r25, r25
    6e28:	33 27       	eor	r19, r19
    6e2a:	ee 24       	eor	r14, r14
    6e2c:	ff 24       	eor	r15, r15
    6e2e:	a7 01       	movw	r20, r14
    6e30:	e7 01       	movw	r28, r14
    6e32:	05 90       	lpm	r0, Z+
    6e34:	08 94       	sec
    6e36:	07 94       	ror	r0
    6e38:	28 f4       	brcc	.+10     	; 0x6e44 <__ftoa_engine+0x80>
    6e3a:	36 0f       	add	r19, r22
    6e3c:	e7 1e       	adc	r14, r23
    6e3e:	f8 1e       	adc	r15, r24
    6e40:	49 1f       	adc	r20, r25
    6e42:	51 1d       	adc	r21, r1
    6e44:	66 0f       	add	r22, r22
    6e46:	77 1f       	adc	r23, r23
    6e48:	88 1f       	adc	r24, r24
    6e4a:	99 1f       	adc	r25, r25
    6e4c:	06 94       	lsr	r0
    6e4e:	a1 f7       	brne	.-24     	; 0x6e38 <__ftoa_engine+0x74>
    6e50:	05 90       	lpm	r0, Z+
    6e52:	07 94       	ror	r0
    6e54:	28 f4       	brcc	.+10     	; 0x6e60 <__ftoa_engine+0x9c>
    6e56:	e7 0e       	add	r14, r23
    6e58:	f8 1e       	adc	r15, r24
    6e5a:	49 1f       	adc	r20, r25
    6e5c:	56 1f       	adc	r21, r22
    6e5e:	c1 1d       	adc	r28, r1
    6e60:	77 0f       	add	r23, r23
    6e62:	88 1f       	adc	r24, r24
    6e64:	99 1f       	adc	r25, r25
    6e66:	66 1f       	adc	r22, r22
    6e68:	06 94       	lsr	r0
    6e6a:	a1 f7       	brne	.-24     	; 0x6e54 <__ftoa_engine+0x90>
    6e6c:	05 90       	lpm	r0, Z+
    6e6e:	07 94       	ror	r0
    6e70:	28 f4       	brcc	.+10     	; 0x6e7c <__ftoa_engine+0xb8>
    6e72:	f8 0e       	add	r15, r24
    6e74:	49 1f       	adc	r20, r25
    6e76:	56 1f       	adc	r21, r22
    6e78:	c7 1f       	adc	r28, r23
    6e7a:	d1 1d       	adc	r29, r1
    6e7c:	88 0f       	add	r24, r24
    6e7e:	99 1f       	adc	r25, r25
    6e80:	66 1f       	adc	r22, r22
    6e82:	77 1f       	adc	r23, r23
    6e84:	06 94       	lsr	r0
    6e86:	a1 f7       	brne	.-24     	; 0x6e70 <__ftoa_engine+0xac>
    6e88:	05 90       	lpm	r0, Z+
    6e8a:	07 94       	ror	r0
    6e8c:	20 f4       	brcc	.+8      	; 0x6e96 <__ftoa_engine+0xd2>
    6e8e:	49 0f       	add	r20, r25
    6e90:	56 1f       	adc	r21, r22
    6e92:	c7 1f       	adc	r28, r23
    6e94:	d8 1f       	adc	r29, r24
    6e96:	99 0f       	add	r25, r25
    6e98:	66 1f       	adc	r22, r22
    6e9a:	77 1f       	adc	r23, r23
    6e9c:	88 1f       	adc	r24, r24
    6e9e:	06 94       	lsr	r0
    6ea0:	a9 f7       	brne	.-22     	; 0x6e8c <__ftoa_engine+0xc8>
    6ea2:	84 91       	lpm	r24, Z
    6ea4:	10 95       	com	r17
    6ea6:	17 70       	andi	r17, 0x07	; 7
    6ea8:	41 f0       	breq	.+16     	; 0x6eba <__ftoa_engine+0xf6>
    6eaa:	d6 95       	lsr	r29
    6eac:	c7 95       	ror	r28
    6eae:	57 95       	ror	r21
    6eb0:	47 95       	ror	r20
    6eb2:	f7 94       	ror	r15
    6eb4:	e7 94       	ror	r14
    6eb6:	1a 95       	dec	r17
    6eb8:	c1 f7       	brne	.-16     	; 0x6eaa <__ftoa_engine+0xe6>
    6eba:	e2 ea       	ldi	r30, 0xA2	; 162
    6ebc:	f1 e0       	ldi	r31, 0x01	; 1
    6ebe:	68 94       	set
    6ec0:	15 90       	lpm	r1, Z+
    6ec2:	15 91       	lpm	r17, Z+
    6ec4:	35 91       	lpm	r19, Z+
    6ec6:	65 91       	lpm	r22, Z+
    6ec8:	95 91       	lpm	r25, Z+
    6eca:	05 90       	lpm	r0, Z+
    6ecc:	7f e2       	ldi	r23, 0x2F	; 47
    6ece:	73 95       	inc	r23
    6ed0:	e1 18       	sub	r14, r1
    6ed2:	f1 0a       	sbc	r15, r17
    6ed4:	43 0b       	sbc	r20, r19
    6ed6:	56 0b       	sbc	r21, r22
    6ed8:	c9 0b       	sbc	r28, r25
    6eda:	d0 09       	sbc	r29, r0
    6edc:	c0 f7       	brcc	.-16     	; 0x6ece <__ftoa_engine+0x10a>
    6ede:	e1 0c       	add	r14, r1
    6ee0:	f1 1e       	adc	r15, r17
    6ee2:	43 1f       	adc	r20, r19
    6ee4:	56 1f       	adc	r21, r22
    6ee6:	c9 1f       	adc	r28, r25
    6ee8:	d0 1d       	adc	r29, r0
    6eea:	7e f4       	brtc	.+30     	; 0x6f0a <__ftoa_engine+0x146>
    6eec:	70 33       	cpi	r23, 0x30	; 48
    6eee:	11 f4       	brne	.+4      	; 0x6ef4 <__ftoa_engine+0x130>
    6ef0:	8a 95       	dec	r24
    6ef2:	e6 cf       	rjmp	.-52     	; 0x6ec0 <__ftoa_engine+0xfc>
    6ef4:	e8 94       	clt
    6ef6:	01 50       	subi	r16, 0x01	; 1
    6ef8:	30 f0       	brcs	.+12     	; 0x6f06 <__ftoa_engine+0x142>
    6efa:	08 0f       	add	r16, r24
    6efc:	0a f4       	brpl	.+2      	; 0x6f00 <__ftoa_engine+0x13c>
    6efe:	00 27       	eor	r16, r16
    6f00:	02 17       	cp	r16, r18
    6f02:	08 f4       	brcc	.+2      	; 0x6f06 <__ftoa_engine+0x142>
    6f04:	20 2f       	mov	r18, r16
    6f06:	23 95       	inc	r18
    6f08:	02 2f       	mov	r16, r18
    6f0a:	7a 33       	cpi	r23, 0x3A	; 58
    6f0c:	28 f0       	brcs	.+10     	; 0x6f18 <__ftoa_engine+0x154>
    6f0e:	79 e3       	ldi	r23, 0x39	; 57
    6f10:	7d 93       	st	X+, r23
    6f12:	2a 95       	dec	r18
    6f14:	e9 f7       	brne	.-6      	; 0x6f10 <__ftoa_engine+0x14c>
    6f16:	10 c0       	rjmp	.+32     	; 0x6f38 <__ftoa_engine+0x174>
    6f18:	7d 93       	st	X+, r23
    6f1a:	2a 95       	dec	r18
    6f1c:	89 f6       	brne	.-94     	; 0x6ec0 <__ftoa_engine+0xfc>
    6f1e:	06 94       	lsr	r0
    6f20:	97 95       	ror	r25
    6f22:	67 95       	ror	r22
    6f24:	37 95       	ror	r19
    6f26:	17 95       	ror	r17
    6f28:	17 94       	ror	r1
    6f2a:	e1 18       	sub	r14, r1
    6f2c:	f1 0a       	sbc	r15, r17
    6f2e:	43 0b       	sbc	r20, r19
    6f30:	56 0b       	sbc	r21, r22
    6f32:	c9 0b       	sbc	r28, r25
    6f34:	d0 09       	sbc	r29, r0
    6f36:	98 f0       	brcs	.+38     	; 0x6f5e <__ftoa_engine+0x19a>
    6f38:	23 95       	inc	r18
    6f3a:	7e 91       	ld	r23, -X
    6f3c:	73 95       	inc	r23
    6f3e:	7a 33       	cpi	r23, 0x3A	; 58
    6f40:	08 f0       	brcs	.+2      	; 0x6f44 <__ftoa_engine+0x180>
    6f42:	70 e3       	ldi	r23, 0x30	; 48
    6f44:	7c 93       	st	X, r23
    6f46:	20 13       	cpse	r18, r16
    6f48:	b8 f7       	brcc	.-18     	; 0x6f38 <__ftoa_engine+0x174>
    6f4a:	7e 91       	ld	r23, -X
    6f4c:	70 61       	ori	r23, 0x10	; 16
    6f4e:	7d 93       	st	X+, r23
    6f50:	30 f0       	brcs	.+12     	; 0x6f5e <__ftoa_engine+0x19a>
    6f52:	83 95       	inc	r24
    6f54:	71 e3       	ldi	r23, 0x31	; 49
    6f56:	7d 93       	st	X+, r23
    6f58:	70 e3       	ldi	r23, 0x30	; 48
    6f5a:	2a 95       	dec	r18
    6f5c:	e1 f7       	brne	.-8      	; 0x6f56 <__ftoa_engine+0x192>
    6f5e:	11 24       	eor	r1, r1
    6f60:	ef 90       	pop	r14
    6f62:	ff 90       	pop	r15
    6f64:	0f 91       	pop	r16
    6f66:	1f 91       	pop	r17
    6f68:	cf 91       	pop	r28
    6f6a:	df 91       	pop	r29
    6f6c:	99 27       	eor	r25, r25
    6f6e:	87 fd       	sbrc	r24, 7
    6f70:	90 95       	com	r25
    6f72:	08 95       	ret

00006f74 <strnlen_P>:
    6f74:	fc 01       	movw	r30, r24
    6f76:	05 90       	lpm	r0, Z+
    6f78:	61 50       	subi	r22, 0x01	; 1
    6f7a:	70 40       	sbci	r23, 0x00	; 0
    6f7c:	01 10       	cpse	r0, r1
    6f7e:	d8 f7       	brcc	.-10     	; 0x6f76 <strnlen_P+0x2>
    6f80:	80 95       	com	r24
    6f82:	90 95       	com	r25
    6f84:	8e 0f       	add	r24, r30
    6f86:	9f 1f       	adc	r25, r31
    6f88:	08 95       	ret

00006f8a <memcpy>:
    6f8a:	fb 01       	movw	r30, r22
    6f8c:	dc 01       	movw	r26, r24
    6f8e:	02 c0       	rjmp	.+4      	; 0x6f94 <memcpy+0xa>
    6f90:	01 90       	ld	r0, Z+
    6f92:	0d 92       	st	X+, r0
    6f94:	41 50       	subi	r20, 0x01	; 1
    6f96:	50 40       	sbci	r21, 0x00	; 0
    6f98:	d8 f7       	brcc	.-10     	; 0x6f90 <memcpy+0x6>
    6f9a:	08 95       	ret

00006f9c <memset>:
    6f9c:	dc 01       	movw	r26, r24
    6f9e:	01 c0       	rjmp	.+2      	; 0x6fa2 <memset+0x6>
    6fa0:	6d 93       	st	X+, r22
    6fa2:	41 50       	subi	r20, 0x01	; 1
    6fa4:	50 40       	sbci	r21, 0x00	; 0
    6fa6:	e0 f7       	brcc	.-8      	; 0x6fa0 <memset+0x4>
    6fa8:	08 95       	ret

00006faa <strcasestr>:
    6faa:	fb 01       	movw	r30, r22
    6fac:	51 91       	ld	r21, Z+
    6fae:	55 23       	and	r21, r21
    6fb0:	b1 f0       	breq	.+44     	; 0x6fde <strcasestr+0x34>
    6fb2:	bf 01       	movw	r22, r30
    6fb4:	dc 01       	movw	r26, r24
    6fb6:	05 2e       	mov	r0, r21
    6fb8:	4d 91       	ld	r20, X+
    6fba:	44 23       	and	r20, r20
    6fbc:	69 f0       	breq	.+26     	; 0x6fd8 <strcasestr+0x2e>
    6fbe:	10 d0       	rcall	.+32     	; 0x6fe0 <strcasestr+0x36>
    6fc0:	d9 f7       	brne	.-10     	; 0x6fb8 <strcasestr+0xe>
    6fc2:	cd 01       	movw	r24, r26
    6fc4:	01 90       	ld	r0, Z+
    6fc6:	00 20       	and	r0, r0
    6fc8:	49 f0       	breq	.+18     	; 0x6fdc <strcasestr+0x32>
    6fca:	4d 91       	ld	r20, X+
    6fcc:	41 11       	cpse	r20, r1
    6fce:	08 d0       	rcall	.+16     	; 0x6fe0 <strcasestr+0x36>
    6fd0:	c9 f3       	breq	.-14     	; 0x6fc4 <strcasestr+0x1a>
    6fd2:	fb 01       	movw	r30, r22
    6fd4:	41 11       	cpse	r20, r1
    6fd6:	ee cf       	rjmp	.-36     	; 0x6fb4 <strcasestr+0xa>
    6fd8:	81 e0       	ldi	r24, 0x01	; 1
    6fda:	90 e0       	ldi	r25, 0x00	; 0
    6fdc:	01 97       	sbiw	r24, 0x01	; 1
    6fde:	08 95       	ret
    6fe0:	40 25       	eor	r20, r0
    6fe2:	39 f0       	breq	.+14     	; 0x6ff2 <strcasestr+0x48>
    6fe4:	40 32       	cpi	r20, 0x20	; 32
    6fe6:	29 f4       	brne	.+10     	; 0x6ff2 <strcasestr+0x48>
    6fe8:	40 29       	or	r20, r0
    6fea:	4b 57       	subi	r20, 0x7B	; 123
    6fec:	46 5e       	subi	r20, 0xE6	; 230
    6fee:	08 f0       	brcs	.+2      	; 0x6ff2 <strcasestr+0x48>
    6ff0:	18 94       	sez
    6ff2:	08 95       	ret

00006ff4 <strcat>:
    6ff4:	fb 01       	movw	r30, r22
    6ff6:	dc 01       	movw	r26, r24
    6ff8:	0d 90       	ld	r0, X+
    6ffa:	00 20       	and	r0, r0
    6ffc:	e9 f7       	brne	.-6      	; 0x6ff8 <strcat+0x4>
    6ffe:	11 97       	sbiw	r26, 0x01	; 1
    7000:	01 90       	ld	r0, Z+
    7002:	0d 92       	st	X+, r0
    7004:	00 20       	and	r0, r0
    7006:	e1 f7       	brne	.-8      	; 0x7000 <strcat+0xc>
    7008:	08 95       	ret

0000700a <strcpy>:
    700a:	fb 01       	movw	r30, r22
    700c:	dc 01       	movw	r26, r24
    700e:	01 90       	ld	r0, Z+
    7010:	0d 92       	st	X+, r0
    7012:	00 20       	and	r0, r0
    7014:	e1 f7       	brne	.-8      	; 0x700e <strcpy+0x4>
    7016:	08 95       	ret

00007018 <strncasecmp>:
    7018:	fb 01       	movw	r30, r22
    701a:	dc 01       	movw	r26, r24
    701c:	41 50       	subi	r20, 0x01	; 1
    701e:	50 40       	sbci	r21, 0x00	; 0
    7020:	88 f0       	brcs	.+34     	; 0x7044 <strncasecmp+0x2c>
    7022:	8d 91       	ld	r24, X+
    7024:	81 34       	cpi	r24, 0x41	; 65
    7026:	1c f0       	brlt	.+6      	; 0x702e <strncasecmp+0x16>
    7028:	8b 35       	cpi	r24, 0x5B	; 91
    702a:	0c f4       	brge	.+2      	; 0x702e <strncasecmp+0x16>
    702c:	80 5e       	subi	r24, 0xE0	; 224
    702e:	61 91       	ld	r22, Z+
    7030:	61 34       	cpi	r22, 0x41	; 65
    7032:	1c f0       	brlt	.+6      	; 0x703a <strncasecmp+0x22>
    7034:	6b 35       	cpi	r22, 0x5B	; 91
    7036:	0c f4       	brge	.+2      	; 0x703a <strncasecmp+0x22>
    7038:	60 5e       	subi	r22, 0xE0	; 224
    703a:	86 1b       	sub	r24, r22
    703c:	61 11       	cpse	r22, r1
    703e:	71 f3       	breq	.-36     	; 0x701c <strncasecmp+0x4>
    7040:	99 0b       	sbc	r25, r25
    7042:	08 95       	ret
    7044:	88 1b       	sub	r24, r24
    7046:	fc cf       	rjmp	.-8      	; 0x7040 <strncasecmp+0x28>

00007048 <strnlen>:
    7048:	fc 01       	movw	r30, r24
    704a:	61 50       	subi	r22, 0x01	; 1
    704c:	70 40       	sbci	r23, 0x00	; 0
    704e:	01 90       	ld	r0, Z+
    7050:	01 10       	cpse	r0, r1
    7052:	d8 f7       	brcc	.-10     	; 0x704a <strnlen+0x2>
    7054:	80 95       	com	r24
    7056:	90 95       	com	r25
    7058:	8e 0f       	add	r24, r30
    705a:	9f 1f       	adc	r25, r31
    705c:	08 95       	ret

0000705e <fputc>:
    705e:	0f 93       	push	r16
    7060:	1f 93       	push	r17
    7062:	cf 93       	push	r28
    7064:	df 93       	push	r29
    7066:	fb 01       	movw	r30, r22
    7068:	23 81       	ldd	r18, Z+3	; 0x03
    706a:	21 fd       	sbrc	r18, 1
    706c:	03 c0       	rjmp	.+6      	; 0x7074 <fputc+0x16>
    706e:	8f ef       	ldi	r24, 0xFF	; 255
    7070:	9f ef       	ldi	r25, 0xFF	; 255
    7072:	2c c0       	rjmp	.+88     	; 0x70cc <fputc+0x6e>
    7074:	22 ff       	sbrs	r18, 2
    7076:	16 c0       	rjmp	.+44     	; 0x70a4 <fputc+0x46>
    7078:	46 81       	ldd	r20, Z+6	; 0x06
    707a:	57 81       	ldd	r21, Z+7	; 0x07
    707c:	24 81       	ldd	r18, Z+4	; 0x04
    707e:	35 81       	ldd	r19, Z+5	; 0x05
    7080:	42 17       	cp	r20, r18
    7082:	53 07       	cpc	r21, r19
    7084:	44 f4       	brge	.+16     	; 0x7096 <fputc+0x38>
    7086:	a0 81       	ld	r26, Z
    7088:	b1 81       	ldd	r27, Z+1	; 0x01
    708a:	9d 01       	movw	r18, r26
    708c:	2f 5f       	subi	r18, 0xFF	; 255
    708e:	3f 4f       	sbci	r19, 0xFF	; 255
    7090:	31 83       	std	Z+1, r19	; 0x01
    7092:	20 83       	st	Z, r18
    7094:	8c 93       	st	X, r24
    7096:	26 81       	ldd	r18, Z+6	; 0x06
    7098:	37 81       	ldd	r19, Z+7	; 0x07
    709a:	2f 5f       	subi	r18, 0xFF	; 255
    709c:	3f 4f       	sbci	r19, 0xFF	; 255
    709e:	37 83       	std	Z+7, r19	; 0x07
    70a0:	26 83       	std	Z+6, r18	; 0x06
    70a2:	14 c0       	rjmp	.+40     	; 0x70cc <fputc+0x6e>
    70a4:	8b 01       	movw	r16, r22
    70a6:	ec 01       	movw	r28, r24
    70a8:	fb 01       	movw	r30, r22
    70aa:	00 84       	ldd	r0, Z+8	; 0x08
    70ac:	f1 85       	ldd	r31, Z+9	; 0x09
    70ae:	e0 2d       	mov	r30, r0
    70b0:	19 95       	eicall
    70b2:	89 2b       	or	r24, r25
    70b4:	e1 f6       	brne	.-72     	; 0x706e <fputc+0x10>
    70b6:	d8 01       	movw	r26, r16
    70b8:	16 96       	adiw	r26, 0x06	; 6
    70ba:	8d 91       	ld	r24, X+
    70bc:	9c 91       	ld	r25, X
    70be:	17 97       	sbiw	r26, 0x07	; 7
    70c0:	01 96       	adiw	r24, 0x01	; 1
    70c2:	17 96       	adiw	r26, 0x07	; 7
    70c4:	9c 93       	st	X, r25
    70c6:	8e 93       	st	-X, r24
    70c8:	16 97       	sbiw	r26, 0x06	; 6
    70ca:	ce 01       	movw	r24, r28
    70cc:	df 91       	pop	r29
    70ce:	cf 91       	pop	r28
    70d0:	1f 91       	pop	r17
    70d2:	0f 91       	pop	r16
    70d4:	08 95       	ret

000070d6 <printf>:
    70d6:	cf 93       	push	r28
    70d8:	df 93       	push	r29
    70da:	cd b7       	in	r28, 0x3d	; 61
    70dc:	de b7       	in	r29, 0x3e	; 62
    70de:	ae 01       	movw	r20, r28
    70e0:	4a 5f       	subi	r20, 0xFA	; 250
    70e2:	5f 4f       	sbci	r21, 0xFF	; 255
    70e4:	fa 01       	movw	r30, r20
    70e6:	61 91       	ld	r22, Z+
    70e8:	71 91       	ld	r23, Z+
    70ea:	af 01       	movw	r20, r30
    70ec:	80 91 71 15 	lds	r24, 0x1571	; 0x801571 <__iob+0x2>
    70f0:	90 91 72 15 	lds	r25, 0x1572	; 0x801572 <__iob+0x3>
    70f4:	90 d8       	rcall	.-3808   	; 0x6216 <vfprintf>
    70f6:	df 91       	pop	r29
    70f8:	cf 91       	pop	r28
    70fa:	08 95       	ret

000070fc <puts>:
    70fc:	0f 93       	push	r16
    70fe:	1f 93       	push	r17
    7100:	cf 93       	push	r28
    7102:	df 93       	push	r29
    7104:	e0 91 71 15 	lds	r30, 0x1571	; 0x801571 <__iob+0x2>
    7108:	f0 91 72 15 	lds	r31, 0x1572	; 0x801572 <__iob+0x3>
    710c:	23 81       	ldd	r18, Z+3	; 0x03
    710e:	21 ff       	sbrs	r18, 1
    7110:	1b c0       	rjmp	.+54     	; 0x7148 <puts+0x4c>
    7112:	8c 01       	movw	r16, r24
    7114:	d0 e0       	ldi	r29, 0x00	; 0
    7116:	c0 e0       	ldi	r28, 0x00	; 0
    7118:	f8 01       	movw	r30, r16
    711a:	81 91       	ld	r24, Z+
    711c:	8f 01       	movw	r16, r30
    711e:	60 91 71 15 	lds	r22, 0x1571	; 0x801571 <__iob+0x2>
    7122:	70 91 72 15 	lds	r23, 0x1572	; 0x801572 <__iob+0x3>
    7126:	db 01       	movw	r26, r22
    7128:	18 96       	adiw	r26, 0x08	; 8
    712a:	ed 91       	ld	r30, X+
    712c:	fc 91       	ld	r31, X
    712e:	19 97       	sbiw	r26, 0x09	; 9
    7130:	88 23       	and	r24, r24
    7132:	31 f0       	breq	.+12     	; 0x7140 <puts+0x44>
    7134:	19 95       	eicall
    7136:	89 2b       	or	r24, r25
    7138:	79 f3       	breq	.-34     	; 0x7118 <puts+0x1c>
    713a:	df ef       	ldi	r29, 0xFF	; 255
    713c:	cf ef       	ldi	r28, 0xFF	; 255
    713e:	ec cf       	rjmp	.-40     	; 0x7118 <puts+0x1c>
    7140:	8a e0       	ldi	r24, 0x0A	; 10
    7142:	19 95       	eicall
    7144:	89 2b       	or	r24, r25
    7146:	19 f0       	breq	.+6      	; 0x714e <puts+0x52>
    7148:	8f ef       	ldi	r24, 0xFF	; 255
    714a:	9f ef       	ldi	r25, 0xFF	; 255
    714c:	02 c0       	rjmp	.+4      	; 0x7152 <puts+0x56>
    714e:	8d 2f       	mov	r24, r29
    7150:	9c 2f       	mov	r25, r28
    7152:	df 91       	pop	r29
    7154:	cf 91       	pop	r28
    7156:	1f 91       	pop	r17
    7158:	0f 91       	pop	r16
    715a:	08 95       	ret

0000715c <sprintf>:
    715c:	0f 93       	push	r16
    715e:	1f 93       	push	r17
    7160:	cf 93       	push	r28
    7162:	df 93       	push	r29
    7164:	cd b7       	in	r28, 0x3d	; 61
    7166:	de b7       	in	r29, 0x3e	; 62
    7168:	2e 97       	sbiw	r28, 0x0e	; 14
    716a:	0f b6       	in	r0, 0x3f	; 63
    716c:	f8 94       	cli
    716e:	de bf       	out	0x3e, r29	; 62
    7170:	0f be       	out	0x3f, r0	; 63
    7172:	cd bf       	out	0x3d, r28	; 61
    7174:	0e 89       	ldd	r16, Y+22	; 0x16
    7176:	1f 89       	ldd	r17, Y+23	; 0x17
    7178:	86 e0       	ldi	r24, 0x06	; 6
    717a:	8c 83       	std	Y+4, r24	; 0x04
    717c:	1a 83       	std	Y+2, r17	; 0x02
    717e:	09 83       	std	Y+1, r16	; 0x01
    7180:	8f ef       	ldi	r24, 0xFF	; 255
    7182:	9f e7       	ldi	r25, 0x7F	; 127
    7184:	9e 83       	std	Y+6, r25	; 0x06
    7186:	8d 83       	std	Y+5, r24	; 0x05
    7188:	ae 01       	movw	r20, r28
    718a:	46 5e       	subi	r20, 0xE6	; 230
    718c:	5f 4f       	sbci	r21, 0xFF	; 255
    718e:	68 8d       	ldd	r22, Y+24	; 0x18
    7190:	79 8d       	ldd	r23, Y+25	; 0x19
    7192:	ce 01       	movw	r24, r28
    7194:	01 96       	adiw	r24, 0x01	; 1
    7196:	3f d8       	rcall	.-3970   	; 0x6216 <vfprintf>
    7198:	ef 81       	ldd	r30, Y+7	; 0x07
    719a:	f8 85       	ldd	r31, Y+8	; 0x08
    719c:	e0 0f       	add	r30, r16
    719e:	f1 1f       	adc	r31, r17
    71a0:	10 82       	st	Z, r1
    71a2:	2e 96       	adiw	r28, 0x0e	; 14
    71a4:	0f b6       	in	r0, 0x3f	; 63
    71a6:	f8 94       	cli
    71a8:	de bf       	out	0x3e, r29	; 62
    71aa:	0f be       	out	0x3f, r0	; 63
    71ac:	cd bf       	out	0x3d, r28	; 61
    71ae:	df 91       	pop	r29
    71b0:	cf 91       	pop	r28
    71b2:	1f 91       	pop	r17
    71b4:	0f 91       	pop	r16
    71b6:	08 95       	ret

000071b8 <vprintf>:
    71b8:	ab 01       	movw	r20, r22
    71ba:	bc 01       	movw	r22, r24
    71bc:	80 91 71 15 	lds	r24, 0x1571	; 0x801571 <__iob+0x2>
    71c0:	90 91 72 15 	lds	r25, 0x1572	; 0x801572 <__iob+0x3>
    71c4:	28 c8       	rjmp	.-4016   	; 0x6216 <vfprintf>

000071c6 <__ultoa_invert>:
    71c6:	fa 01       	movw	r30, r20
    71c8:	aa 27       	eor	r26, r26
    71ca:	28 30       	cpi	r18, 0x08	; 8
    71cc:	51 f1       	breq	.+84     	; 0x7222 <__ultoa_invert+0x5c>
    71ce:	20 31       	cpi	r18, 0x10	; 16
    71d0:	81 f1       	breq	.+96     	; 0x7232 <__ultoa_invert+0x6c>
    71d2:	e8 94       	clt
    71d4:	6f 93       	push	r22
    71d6:	6e 7f       	andi	r22, 0xFE	; 254
    71d8:	6e 5f       	subi	r22, 0xFE	; 254
    71da:	7f 4f       	sbci	r23, 0xFF	; 255
    71dc:	8f 4f       	sbci	r24, 0xFF	; 255
    71de:	9f 4f       	sbci	r25, 0xFF	; 255
    71e0:	af 4f       	sbci	r26, 0xFF	; 255
    71e2:	b1 e0       	ldi	r27, 0x01	; 1
    71e4:	3e d0       	rcall	.+124    	; 0x7262 <__ultoa_invert+0x9c>
    71e6:	b4 e0       	ldi	r27, 0x04	; 4
    71e8:	3c d0       	rcall	.+120    	; 0x7262 <__ultoa_invert+0x9c>
    71ea:	67 0f       	add	r22, r23
    71ec:	78 1f       	adc	r23, r24
    71ee:	89 1f       	adc	r24, r25
    71f0:	9a 1f       	adc	r25, r26
    71f2:	a1 1d       	adc	r26, r1
    71f4:	68 0f       	add	r22, r24
    71f6:	79 1f       	adc	r23, r25
    71f8:	8a 1f       	adc	r24, r26
    71fa:	91 1d       	adc	r25, r1
    71fc:	a1 1d       	adc	r26, r1
    71fe:	6a 0f       	add	r22, r26
    7200:	71 1d       	adc	r23, r1
    7202:	81 1d       	adc	r24, r1
    7204:	91 1d       	adc	r25, r1
    7206:	a1 1d       	adc	r26, r1
    7208:	20 d0       	rcall	.+64     	; 0x724a <__ultoa_invert+0x84>
    720a:	09 f4       	brne	.+2      	; 0x720e <__ultoa_invert+0x48>
    720c:	68 94       	set
    720e:	3f 91       	pop	r19
    7210:	2a e0       	ldi	r18, 0x0A	; 10
    7212:	26 9f       	mul	r18, r22
    7214:	11 24       	eor	r1, r1
    7216:	30 19       	sub	r19, r0
    7218:	30 5d       	subi	r19, 0xD0	; 208
    721a:	31 93       	st	Z+, r19
    721c:	de f6       	brtc	.-74     	; 0x71d4 <__ultoa_invert+0xe>
    721e:	cf 01       	movw	r24, r30
    7220:	08 95       	ret
    7222:	46 2f       	mov	r20, r22
    7224:	47 70       	andi	r20, 0x07	; 7
    7226:	40 5d       	subi	r20, 0xD0	; 208
    7228:	41 93       	st	Z+, r20
    722a:	b3 e0       	ldi	r27, 0x03	; 3
    722c:	0f d0       	rcall	.+30     	; 0x724c <__ultoa_invert+0x86>
    722e:	c9 f7       	brne	.-14     	; 0x7222 <__ultoa_invert+0x5c>
    7230:	f6 cf       	rjmp	.-20     	; 0x721e <__ultoa_invert+0x58>
    7232:	46 2f       	mov	r20, r22
    7234:	4f 70       	andi	r20, 0x0F	; 15
    7236:	40 5d       	subi	r20, 0xD0	; 208
    7238:	4a 33       	cpi	r20, 0x3A	; 58
    723a:	18 f0       	brcs	.+6      	; 0x7242 <__ultoa_invert+0x7c>
    723c:	49 5d       	subi	r20, 0xD9	; 217
    723e:	31 fd       	sbrc	r19, 1
    7240:	40 52       	subi	r20, 0x20	; 32
    7242:	41 93       	st	Z+, r20
    7244:	02 d0       	rcall	.+4      	; 0x724a <__ultoa_invert+0x84>
    7246:	a9 f7       	brne	.-22     	; 0x7232 <__ultoa_invert+0x6c>
    7248:	ea cf       	rjmp	.-44     	; 0x721e <__ultoa_invert+0x58>
    724a:	b4 e0       	ldi	r27, 0x04	; 4
    724c:	a6 95       	lsr	r26
    724e:	97 95       	ror	r25
    7250:	87 95       	ror	r24
    7252:	77 95       	ror	r23
    7254:	67 95       	ror	r22
    7256:	ba 95       	dec	r27
    7258:	c9 f7       	brne	.-14     	; 0x724c <__ultoa_invert+0x86>
    725a:	00 97       	sbiw	r24, 0x00	; 0
    725c:	61 05       	cpc	r22, r1
    725e:	71 05       	cpc	r23, r1
    7260:	08 95       	ret
    7262:	9b 01       	movw	r18, r22
    7264:	ac 01       	movw	r20, r24
    7266:	0a 2e       	mov	r0, r26
    7268:	06 94       	lsr	r0
    726a:	57 95       	ror	r21
    726c:	47 95       	ror	r20
    726e:	37 95       	ror	r19
    7270:	27 95       	ror	r18
    7272:	ba 95       	dec	r27
    7274:	c9 f7       	brne	.-14     	; 0x7268 <__ultoa_invert+0xa2>
    7276:	62 0f       	add	r22, r18
    7278:	73 1f       	adc	r23, r19
    727a:	84 1f       	adc	r24, r20
    727c:	95 1f       	adc	r25, r21
    727e:	a0 1d       	adc	r26, r0
    7280:	08 95       	ret

00007282 <_exit>:
    7282:	f8 94       	cli

00007284 <__stop_program>:
    7284:	ff cf       	rjmp	.-2      	; 0x7284 <__stop_program>
