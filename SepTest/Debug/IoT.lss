
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ae  00800200  0000617c  00006210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000617c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bf1  008006ae  008006ae  000066be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000066be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000671c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000990  00000000  00000000  0000675c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c4a7  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eb4  00000000  00000000  00013593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f75  00000000  00000000  00016447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023d8  00000000  00000000  0001c3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d77  00000000  00000000  0001e794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bba8  00000000  00000000  0002250b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  0002e0b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	be c7       	rjmp	.+3964   	; 0xfae <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 85 24 	jmp	0x490a	; 0x490a <__vector_25>
      68:	0c 94 d7 24 	jmp	0x49ae	; 0x49ae <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1b 25 	jmp	0x4a36	; 0x4a36 <__vector_36>
      94:	0c 94 6d 25 	jmp	0x4ada	; 0x4ada <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 05 28 	jmp	0x500a	; 0x500a <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__vector_51>
      d0:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__vector_54>
      dc:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ee 1b       	sub	r30, r30
      e6:	ee 1b       	sub	r30, r30
      e8:	ee 1b       	sub	r30, r30
      ea:	25 1c       	adc	r2, r5
      ec:	2d 1c       	adc	r2, r13
      ee:	42 1c       	adc	r4, r2
      f0:	ee 1b       	sub	r30, r30
      f2:	ee 1b       	sub	r30, r30
      f4:	25 1c       	adc	r2, r5
      f6:	2d 1c       	adc	r2, r13
      f8:	27 28       	or	r2, r7
      fa:	97 28       	or	r9, r7
      fc:	97 28       	or	r9, r7
      fe:	97 28       	or	r9, r7
     100:	97 28       	or	r9, r7
     102:	97 28       	or	r9, r7
     104:	97 28       	or	r9, r7
     106:	97 28       	or	r9, r7
     108:	27 28       	or	r2, r7
     10a:	97 28       	or	r9, r7
     10c:	97 28       	or	r9, r7
     10e:	97 28       	or	r9, r7
     110:	97 28       	or	r9, r7
     112:	97 28       	or	r9, r7
     114:	97 28       	or	r9, r7
     116:	97 28       	or	r9, r7
     118:	29 28       	or	r2, r9
     11a:	97 28       	or	r9, r7
     11c:	97 28       	or	r9, r7
     11e:	97 28       	or	r9, r7
     120:	97 28       	or	r9, r7
     122:	97 28       	or	r9, r7
     124:	97 28       	or	r9, r7
     126:	97 28       	or	r9, r7
     128:	97 28       	or	r9, r7
     12a:	97 28       	or	r9, r7
     12c:	97 28       	or	r9, r7
     12e:	97 28       	or	r9, r7
     130:	97 28       	or	r9, r7
     132:	97 28       	or	r9, r7
     134:	97 28       	or	r9, r7
     136:	97 28       	or	r9, r7
     138:	29 28       	or	r2, r9
     13a:	97 28       	or	r9, r7
     13c:	97 28       	or	r9, r7
     13e:	97 28       	or	r9, r7
     140:	97 28       	or	r9, r7
     142:	97 28       	or	r9, r7
     144:	97 28       	or	r9, r7
     146:	97 28       	or	r9, r7
     148:	97 28       	or	r9, r7
     14a:	97 28       	or	r9, r7
     14c:	97 28       	or	r9, r7
     14e:	97 28       	or	r9, r7
     150:	97 28       	or	r9, r7
     152:	97 28       	or	r9, r7
     154:	97 28       	or	r9, r7
     156:	97 28       	or	r9, r7
     158:	93 28       	or	r9, r3
     15a:	97 28       	or	r9, r7
     15c:	97 28       	or	r9, r7
     15e:	97 28       	or	r9, r7
     160:	97 28       	or	r9, r7
     162:	97 28       	or	r9, r7
     164:	97 28       	or	r9, r7
     166:	97 28       	or	r9, r7
     168:	5e 28       	or	r5, r14
     16a:	97 28       	or	r9, r7
     16c:	97 28       	or	r9, r7
     16e:	97 28       	or	r9, r7
     170:	97 28       	or	r9, r7
     172:	97 28       	or	r9, r7
     174:	97 28       	or	r9, r7
     176:	97 28       	or	r9, r7
     178:	97 28       	or	r9, r7
     17a:	97 28       	or	r9, r7
     17c:	97 28       	or	r9, r7
     17e:	97 28       	or	r9, r7
     180:	97 28       	or	r9, r7
     182:	97 28       	or	r9, r7
     184:	97 28       	or	r9, r7
     186:	97 28       	or	r9, r7
     188:	52 28       	or	r5, r2
     18a:	97 28       	or	r9, r7
     18c:	97 28       	or	r9, r7
     18e:	97 28       	or	r9, r7
     190:	97 28       	or	r9, r7
     192:	97 28       	or	r9, r7
     194:	97 28       	or	r9, r7
     196:	97 28       	or	r9, r7
     198:	76 28       	or	r7, r6

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <prvCheckTasksWaitingTermination>
     2a0:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	bc d5       	rcall	.+2936   	; 0xe22 <vPortYield>
     2aa:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 b7 1b 	call	0x376e	; 0x376e <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	16 e0       	ldi	r17, 0x06	; 6
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ec e7       	ldi	r30, 0x7C	; 124
     2e6:	f1 e6       	ldi	r31, 0x61	; 97
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ae 3a       	cpi	r26, 0xAE	; 174
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	22 e1       	ldi	r18, 0x12	; 18
     2fa:	ae ea       	ldi	r26, 0xAE	; 174
     2fc:	b6 e0       	ldi	r27, 0x06	; 6
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	af 39       	cpi	r26, 0x9F	; 159
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <main>
     30c:	0c 94 bc 30 	jmp	0x6178	; 0x6178 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <measureTemp>:
		
		measureTemp((Temperature_t) self);
	}
}

void measureTemp(Temperature_t self){
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     318:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <hih8120_getTemperature>
     31c:	68 83       	st	Y, r22
     31e:	79 83       	std	Y+1, r23	; 0x01
     320:	8a 83       	std	Y+2, r24	; 0x02
     322:	9b 83       	std	Y+3, r25	; 0x03
	//printf("%f \n", self->temperature);
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <startReading>:
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}

void startReading(void* self){
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	00 d0       	rcall	.+0      	; 0x330 <startReading+0x6>
     330:	1f 92       	push	r1
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     338:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskGetTickCount>
     33c:	69 83       	std	Y+1, r22	; 0x01
     33e:	7a 83       	std	Y+2, r23	; 0x02
     340:	8b 83       	std	Y+3, r24	; 0x03
     342:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     344:	42 ea       	ldi	r20, 0xA2	; 162
     346:	53 e0       	ldi	r21, 0x03	; 3
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	ce 01       	movw	r24, r28
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	0e 94 97 12 	call	0x252e	; 0x252e <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     354:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <hih8120_wakeup>
     358:	88 23       	and	r24, r24
     35a:	21 f0       	breq	.+8      	; 0x364 <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     35c:	82 e4       	ldi	r24, 0x42	; 66
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	0e 94 00 30 	call	0x6000	; 0x6000 <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     364:	40 91 89 12 	lds	r20, 0x1289	; 0x801289 <ready_bit>
     368:	50 91 8a 12 	lds	r21, 0x128A	; 0x80128a <ready_bit+0x1>
     36c:	60 91 8b 12 	lds	r22, 0x128B	; 0x80128b <ready_bit+0x2>
     370:	70 91 8c 12 	lds	r23, 0x128C	; 0x80128c <ready_bit+0x3>
     374:	cc 24       	eor	r12, r12
     376:	ca 94       	dec	r12
     378:	dc 2c       	mov	r13, r12
     37a:	76 01       	movw	r14, r12
     37c:	01 e0       	ldi	r16, 0x01	; 1
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	80 91 8d 12 	lds	r24, 0x128D	; 0x80128d <group_start>
     384:	90 91 8e 12 	lds	r25, 0x128E	; 0x80128e <group_start+0x1>
     388:	f7 d1       	rcall	.+1006   	; 0x778 <xEventGroupWaitBits>
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     38a:	64 e0       	ldi	r22, 0x04	; 4
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     396:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	cb 01       	movw	r24, r22
     3a0:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <vTaskDelay>
		
		measureTemp((Temperature_t) self);
     3a4:	c5 01       	movw	r24, r10
     3a6:	b5 df       	rcall	.-150    	; 0x312 <measureTemp>
	}
     3a8:	cd cf       	rjmp	.-102    	; 0x344 <startReading+0x1a>

000003aa <temperature_handler_init>:
void measureTemp(Temperature_t self){
	self->temperature = hih8120_getTemperature();
	//printf("%f \n", self->temperature);
}

void temperature_handler_init(Temperature_t self, uint16_t priority){
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     3b8:	40 91 89 12 	lds	r20, 0x1289	; 0x801289 <ready_bit>
     3bc:	50 91 8a 12 	lds	r21, 0x128A	; 0x80128a <ready_bit+0x1>
     3c0:	60 91 8b 12 	lds	r22, 0x128B	; 0x80128b <ready_bit+0x2>
     3c4:	70 91 8c 12 	lds	r23, 0x128C	; 0x80128c <ready_bit+0x3>
     3c8:	80 91 8d 12 	lds	r24, 0x128D	; 0x80128d <group_start>
     3cc:	90 91 8e 12 	lds	r25, 0x128E	; 0x80128e <group_start+0x1>
     3d0:	73 d2       	rcall	.+1254   	; 0x8b8 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     3d2:	e1 2c       	mov	r14, r1
     3d4:	f1 2c       	mov	r15, r1
     3d6:	9e 01       	movw	r18, r28
     3d8:	40 ec       	ldi	r20, 0xC0	; 192
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	6c e5       	ldi	r22, 0x5C	; 92
     3de:	72 e0       	ldi	r23, 0x02	; 2
     3e0:	85 e9       	ldi	r24, 0x95	; 149
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskCreate>
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <createTemp>:
typedef struct TemperatureHandler{
	float temperature;
	} TemperatureHandler;
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	8c 01       	movw	r16, r24
     40a:	5b 01       	movw	r10, r22
     40c:	69 01       	movw	r12, r18
     40e:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     410:	84 e0       	ldi	r24, 0x04	; 4
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <malloc>
     418:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     41a:	89 2b       	or	r24, r25
     41c:	f1 f0       	breq	.+60     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     41e:	18 82       	st	Y, r1
     420:	19 82       	std	Y+1, r1	; 0x01
     422:	1a 82       	std	Y+2, r1	; 0x02
     424:	1b 82       	std	Y+3, r1	; 0x03
	
	group_start = taskBits;
     426:	b0 92 8e 12 	sts	0x128E, r11	; 0x80128e <group_start+0x1>
     42a:	a0 92 8d 12 	sts	0x128D, r10	; 0x80128d <group_start>
	ready_bit = bit;
     42e:	c0 92 89 12 	sts	0x1289, r12	; 0x801289 <ready_bit>
     432:	d0 92 8a 12 	sts	0x128A, r13	; 0x80128a <ready_bit+0x1>
     436:	e0 92 8b 12 	sts	0x128B, r14	; 0x80128b <ready_bit+0x2>
     43a:	f0 92 8c 12 	sts	0x128C, r15	; 0x80128c <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     43e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <hih8120_initialise>
     442:	81 11       	cpse	r24, r1
     444:	04 c0       	rjmp	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		puts("Temp sensor initialized.");
     446:	8d e6       	ldi	r24, 0x6D	; 109
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 00 30 	call	0x6000	; 0x6000 <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     44e:	b8 01       	movw	r22, r16
     450:	ce 01       	movw	r24, r28
     452:	ab df       	rcall	.-170    	; 0x3aa <temperature_handler_init>
	return new_measure;
     454:	8c 2f       	mov	r24, r28
     456:	9d 2f       	mov	r25, r29
     458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	bf 90       	pop	r11
     470:	af 90       	pop	r10
     472:	08 95       	ret

00000474 <getTemperature>:
	xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
}

float getTemperature(Temperature_t self){
	return self->temperature;
     474:	fc 01       	movw	r30, r24
     476:	60 81       	ld	r22, Z
     478:	71 81       	ldd	r23, Z+1	; 0x01
     47a:	82 81       	ldd	r24, Z+2	; 0x02
     47c:	93 81       	ldd	r25, Z+3	; 0x03
     47e:	08 95       	ret

00000480 <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	64 97       	sbiw	r28, 0x14	; 20
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	//status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     498:	0e 94 44 20 	call	0x4088	; 0x4088 <lora_driver_rn2483FactoryReset>
     49c:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	86 e8       	ldi	r24, 0x86	; 134
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     4b0:	0e 94 c2 21 	call	0x4384	; 0x4384 <lora_driver_configureToEu868>
     4b4:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     4b8:	9f 93       	push	r25
     4ba:	8f 93       	push	r24
     4bc:	89 e9       	ldi	r24, 0x99	; 153
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     4c8:	8e 01       	movw	r16, r28
     4ca:	0f 5f       	subi	r16, 0xFF	; 255
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	c8 01       	movw	r24, r16
     4d0:	0e 94 56 20 	call	0x40ac	; 0x40ac <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     4d4:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     4d8:	1f 93       	push	r17
     4da:	0f 93       	push	r16
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	82 eb       	ldi	r24, 0xB2	; 178
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     4ec:	c8 01       	movw	r24, r16
     4ee:	0e 94 72 20 	call	0x40e4	; 0x40e4 <lora_driver_setDeviceIdentifier>
     4f2:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	1f 93       	push	r17
     4fc:	0f 93       	push	r16
     4fe:	86 ec       	ldi	r24, 0xC6	; 198
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     50a:	a8 01       	movw	r20, r16
     50c:	6b ed       	ldi	r22, 0xDB	; 219
     50e:	72 e0       	ldi	r23, 0x02	; 2
     510:	8c ef       	ldi	r24, 0xFC	; 252
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 a0 22 	call	0x4540	; 0x4540 <lora_driver_setOtaaIdentity>
     518:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	1f 93       	push	r17
     522:	0f 93       	push	r16
     524:	8b ed       	ldi	r24, 0xDB	; 219
     526:	92 e0       	ldi	r25, 0x02	; 2
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	8c ef       	ldi	r24, 0xFC	; 252
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	8d e0       	ldi	r24, 0x0D	; 13
     536:	93 e0       	ldi	r25, 0x03	; 3
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     540:	0e 94 a5 20 	call	0x414a	; 0x414a <lora_driver_saveMac>
     544:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	83 e4       	ldi	r24, 0x43	; 67
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	9f 93       	push	r25
     552:	8f 93       	push	r24
     554:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 9f 21 	call	0x433e	; 0x433e <lora_driver_setAdaptiveDataRate>
     568:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	82 e5       	ldi	r24, 0x52	; 82
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     57c:	84 ef       	ldi	r24, 0xF4	; 244
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 aa 21 	call	0x4354	; 0x4354 <lora_driver_setReceiveDelay>
     584:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     588:	9f 93       	push	r25
     58a:	8f 93       	push	r24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	8f 93       	push	r24
     590:	84 ef       	ldi	r24, 0xF4	; 244
     592:	8f 93       	push	r24
     594:	83 e7       	ldi	r24, 0x73	; 115
     596:	93 e0       	ldi	r25, 0x03	; 3
     598:	9f 93       	push	r25
     59a:	8f 93       	push	r24
     59c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     5aa:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 ab 20 	call	0x4156	; 0x4156 <lora_driver_join>
     5b2:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     5b4:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	1f 92       	push	r1
     5be:	1f 93       	push	r17
     5c0:	83 e9       	ldi	r24, 0x93	; 147
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>

		if ( rc != LORA_ACCEPTED)
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	08 30       	cpi	r16, 0x08	; 8
     5da:	41 f0       	breq	.+16     	; 0x5ec <_lora_setup+0x16c>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     5dc:	66 e3       	ldi	r22, 0x36	; 54
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     5e8:	11 50       	subi	r17, 0x01	; 1
     5ea:	01 f7       	brne	.-64     	; 0x5ac <_lora_setup+0x12c>

	if (rc == LORA_ACCEPTED)
     5ec:	08 30       	cpi	r16, 0x08	; 8
     5ee:	11 f0       	breq	.+4      	; 0x5f4 <_lora_setup+0x174>
		//status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     5f0:	18 d4       	rcall	.+2096   	; 0xe22 <vPortYield>
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <_lora_setup+0x170>
		}
	}
}
     5f4:	64 96       	adiw	r28, 0x14	; 20
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	08 95       	ret

0000060a <lora_handler_task>:

void lora_handler_task(void* pvParameters){
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	28 97       	sbiw	r28, 0x08	; 8
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 36 20 	call	0x406c	; 0x406c <lora_driver_resetRn2483>
	vTaskDelay(2);
     624:	62 e0       	ldi	r22, 0x02	; 2
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <vTaskDelay>
	lora_driver_resetRn2483(0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 36 20 	call	0x406c	; 0x406c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     636:	66 e9       	ldi	r22, 0x96	; 150
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     642:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <lora_driver_flushBuffers>

	_lora_setup();
     646:	1c df       	rcall	.-456    	; 0x480 <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     648:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskGetTickCount>
     64c:	69 83       	std	Y+1, r22	; 0x01
     64e:	7a 83       	std	Y+2, r23	; 0x02
     650:	8b 83       	std	Y+3, r24	; 0x03
     652:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     654:	4c e6       	ldi	r20, 0x6C	; 108
     656:	52 e0       	ldi	r21, 0x02	; 2
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	0e 94 97 12 	call	0x252e	; 0x252e <xTaskDelayUntil>
		_uplink_payload.len = 2;
     664:	0e ea       	ldi	r16, 0xAE	; 174
     666:	16 e0       	ldi	r17, 0x06	; 6
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	f8 01       	movw	r30, r16
     66c:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 83       	st	Z, r24
		
		lora_driver_payload_t downlinkPayload;
		
		double temp =(double) getTemperature(temperature);
     672:	80 91 8f 12 	lds	r24, 0x128F	; 0x80128f <temperature>
     676:	90 91 90 12 	lds	r25, 0x1290	; 0x801290 <temperature+0x1>
     67a:	fc de       	rcall	.-520    	; 0x474 <getTemperature>
		
		
		double val1=0;
     67c:	1d 82       	std	Y+5, r1	; 0x05
     67e:	1e 82       	std	Y+6, r1	; 0x06
     680:	1f 82       	std	Y+7, r1	; 0x07
     682:	18 86       	std	Y+8, r1	; 0x08
		double val2=0;
		
		val2 = modf(temp, &val1);
     684:	ae 01       	movw	r20, r28
     686:	4b 5f       	subi	r20, 0xFB	; 251
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <modf>
		
		val2 = val2 * 100;
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	48 ec       	ldi	r20, 0xC8	; 200
     694:	52 e4       	ldi	r21, 0x42	; 66
     696:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__mulsf3>
     69a:	6b 01       	movw	r12, r22
     69c:	7c 01       	movw	r14, r24
		
		_uplink_payload.bytes[0] = (int) val1;
     69e:	6d 81       	ldd	r22, Y+5	; 0x05
     6a0:	7e 81       	ldd	r23, Y+6	; 0x06
     6a2:	8f 81       	ldd	r24, Y+7	; 0x07
     6a4:	98 85       	ldd	r25, Y+8	; 0x08
     6a6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__fixsfsi>
     6aa:	f8 01       	movw	r30, r16
     6ac:	62 83       	std	Z+2, r22	; 0x02
		_uplink_payload.bytes[1] = (int) val2;		
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__fixsfsi>
     6b6:	f8 01       	movw	r30, r16
     6b8:	63 83       	std	Z+3, r22	; 0x03
		
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     6ba:	b8 01       	movw	r22, r16
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <lora_driver_sendUploadMessage>
     6c2:	0e 94 c1 22 	call	0x4582	; 0x4582 <lora_driver_mapReturnCodeToText>
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	83 eb       	ldi	r24, 0xB3	; 179
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <printf>
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	ba cf       	rjmp	.-140    	; 0x654 <lora_handler_task+0x4a>

000006e0 <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;


void lora_handler_task(void* pvParameters);

void lora_handler_initialize(uint16_t lora_handler_task_priority, Temperature_t temperatureObject){
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
	
	temperature = temperatureObject;
     6e6:	70 93 90 12 	sts	0x1290, r23	; 0x801290 <temperature+0x1>
     6ea:	60 93 8f 12 	sts	0x128F, r22	; 0x80128f <temperature>

	xTaskCreate(
     6ee:	e1 2c       	mov	r14, r1
     6f0:	f1 2c       	mov	r15, r1
     6f2:	08 2f       	mov	r16, r24
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	48 e8       	ldi	r20, 0x88	; 136
     6fa:	51 e0       	ldi	r21, 0x01	; 1
     6fc:	68 ec       	ldi	r22, 0xC8	; 200
     6fe:	73 e0       	ldi	r23, 0x03	; 3
     700:	85 e0       	ldi	r24, 0x05	; 5
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     710:	0f 93       	push	r16
     712:	01 11       	cpse	r16, r1
     714:	0c c0       	rjmp	.+24     	; 0x72e <prvTestWaitCondition+0x1e>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	82 23       	and	r24, r18
     71c:	93 23       	and	r25, r19
     71e:	a4 23       	and	r26, r20
     720:	b5 23       	and	r27, r21
     722:	89 2b       	or	r24, r25
     724:	8a 2b       	or	r24, r26
     726:	8b 2b       	or	r24, r27
     728:	79 f4       	brne	.+30     	; 0x748 <prvTestWaitCondition+0x38>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	10 c0       	rjmp	.+32     	; 0x74e <prvTestWaitCondition+0x3e>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	82 23       	and	r24, r18
     734:	93 23       	and	r25, r19
     736:	a4 23       	and	r26, r20
     738:	b5 23       	and	r27, r21
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	4a 07       	cpc	r20, r26
     740:	5b 07       	cpc	r21, r27
     742:	21 f0       	breq	.+8      	; 0x74c <prvTestWaitCondition+0x3c>
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	03 c0       	rjmp	.+6      	; 0x74e <prvTestWaitCondition+0x3e>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	01 c0       	rjmp	.+2      	; 0x74e <prvTestWaitCondition+0x3e>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <xEventGroupCreate>:
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	8f e0       	ldi	r24, 0x0F	; 15
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	af d1       	rcall	.+862    	; 0xaba <pvPortMalloc>
     75c:	ec 01       	movw	r28, r24
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	39 f0       	breq	.+14     	; 0x770 <xEventGroupCreate+0x1e>
     762:	fc 01       	movw	r30, r24
     764:	11 92       	st	Z+, r1
     766:	11 92       	st	Z+, r1
     768:	11 92       	st	Z+, r1
     76a:	11 92       	st	Z+, r1
     76c:	cf 01       	movw	r24, r30
     76e:	8b d2       	rcall	.+1302   	; 0xc86 <vListInitialise>
     770:	ce 01       	movw	r24, r28
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <xEventGroupWaitBits>:
     778:	2f 92       	push	r2
     77a:	3f 92       	push	r3
     77c:	4f 92       	push	r4
     77e:	5f 92       	push	r5
     780:	6f 92       	push	r6
     782:	7f 92       	push	r7
     784:	8f 92       	push	r8
     786:	9f 92       	push	r9
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
     79e:	4a 01       	movw	r8, r20
     7a0:	5b 01       	movw	r10, r22
     7a2:	62 2e       	mov	r6, r18
     7a4:	70 2e       	mov	r7, r16
     7a6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSuspendAll>
     7aa:	28 80       	ld	r2, Y
     7ac:	39 80       	ldd	r3, Y+1	; 0x01
     7ae:	4a 80       	ldd	r4, Y+2	; 0x02
     7b0:	5b 80       	ldd	r5, Y+3	; 0x03
     7b2:	a5 01       	movw	r20, r10
     7b4:	94 01       	movw	r18, r8
     7b6:	c2 01       	movw	r24, r4
     7b8:	b1 01       	movw	r22, r2
     7ba:	aa df       	rcall	.-172    	; 0x710 <prvTestWaitCondition>
     7bc:	88 23       	and	r24, r24
     7be:	a1 f0       	breq	.+40     	; 0x7e8 <xEventGroupWaitBits+0x70>
     7c0:	66 20       	and	r6, r6
     7c2:	89 f1       	breq	.+98     	; 0x826 <xEventGroupWaitBits+0xae>
     7c4:	d5 01       	movw	r26, r10
     7c6:	c4 01       	movw	r24, r8
     7c8:	80 95       	com	r24
     7ca:	90 95       	com	r25
     7cc:	a0 95       	com	r26
     7ce:	b0 95       	com	r27
     7d0:	82 21       	and	r24, r2
     7d2:	93 21       	and	r25, r3
     7d4:	a4 21       	and	r26, r4
     7d6:	b5 21       	and	r27, r5
     7d8:	88 83       	st	Y, r24
     7da:	99 83       	std	Y+1, r25	; 0x01
     7dc:	aa 83       	std	Y+2, r26	; 0x02
     7de:	bb 83       	std	Y+3, r27	; 0x03
     7e0:	c1 2c       	mov	r12, r1
     7e2:	d1 2c       	mov	r13, r1
     7e4:	76 01       	movw	r14, r12
     7e6:	22 c0       	rjmp	.+68     	; 0x82c <xEventGroupWaitBits+0xb4>
     7e8:	c1 14       	cp	r12, r1
     7ea:	d1 04       	cpc	r13, r1
     7ec:	e1 04       	cpc	r14, r1
     7ee:	f1 04       	cpc	r15, r1
     7f0:	e9 f0       	breq	.+58     	; 0x82c <xEventGroupWaitBits+0xb4>
     7f2:	61 10       	cpse	r6, r1
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <xEventGroupWaitBits+0x86>
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	ba 01       	movw	r22, r20
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <xEventGroupWaitBits+0x8e>
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	71 e0       	ldi	r23, 0x01	; 1
     806:	71 10       	cpse	r7, r1
     808:	74 60       	ori	r23, 0x04	; 4
     80a:	48 29       	or	r20, r8
     80c:	59 29       	or	r21, r9
     80e:	6a 29       	or	r22, r10
     810:	7b 29       	or	r23, r11
     812:	97 01       	movw	r18, r14
     814:	86 01       	movw	r16, r12
     816:	ce 01       	movw	r24, r28
     818:	04 96       	adiw	r24, 0x04	; 4
     81a:	0e 94 93 13 	call	0x2726	; 0x2726 <vTaskPlaceOnUnorderedEventList>
     81e:	21 2c       	mov	r2, r1
     820:	31 2c       	mov	r3, r1
     822:	21 01       	movw	r4, r2
     824:	03 c0       	rjmp	.+6      	; 0x82c <xEventGroupWaitBits+0xb4>
     826:	c1 2c       	mov	r12, r1
     828:	d1 2c       	mov	r13, r1
     82a:	76 01       	movw	r14, r12
     82c:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
     830:	cd 28       	or	r12, r13
     832:	ce 28       	or	r12, r14
     834:	cf 28       	or	r12, r15
     836:	59 f1       	breq	.+86     	; 0x88e <xEventGroupWaitBits+0x116>
     838:	81 11       	cpse	r24, r1
     83a:	01 c0       	rjmp	.+2      	; 0x83e <xEventGroupWaitBits+0xc6>
     83c:	f2 d2       	rcall	.+1508   	; 0xe22 <vPortYield>
     83e:	0e 94 67 16 	call	0x2cce	; 0x2cce <uxTaskResetEventItemValue>
     842:	6b 01       	movw	r12, r22
     844:	7c 01       	movw	r14, r24
     846:	91 fd       	sbrc	r25, 1
     848:	1f c0       	rjmp	.+62     	; 0x888 <xEventGroupWaitBits+0x110>
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	0f 92       	push	r0
     850:	c8 80       	ld	r12, Y
     852:	d9 80       	ldd	r13, Y+1	; 0x01
     854:	ea 80       	ldd	r14, Y+2	; 0x02
     856:	fb 80       	ldd	r15, Y+3	; 0x03
     858:	07 2d       	mov	r16, r7
     85a:	a5 01       	movw	r20, r10
     85c:	94 01       	movw	r18, r8
     85e:	c7 01       	movw	r24, r14
     860:	b6 01       	movw	r22, r12
     862:	56 df       	rcall	.-340    	; 0x710 <prvTestWaitCondition>
     864:	88 23       	and	r24, r24
     866:	71 f0       	breq	.+28     	; 0x884 <xEventGroupWaitBits+0x10c>
     868:	66 20       	and	r6, r6
     86a:	61 f0       	breq	.+24     	; 0x884 <xEventGroupWaitBits+0x10c>
     86c:	80 94       	com	r8
     86e:	90 94       	com	r9
     870:	a0 94       	com	r10
     872:	b0 94       	com	r11
     874:	8c 20       	and	r8, r12
     876:	9d 20       	and	r9, r13
     878:	ae 20       	and	r10, r14
     87a:	bf 20       	and	r11, r15
     87c:	88 82       	st	Y, r8
     87e:	99 82       	std	Y+1, r9	; 0x01
     880:	aa 82       	std	Y+2, r10	; 0x02
     882:	bb 82       	std	Y+3, r11	; 0x03
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	16 01       	movw	r2, r12
     88a:	27 01       	movw	r4, r14
     88c:	55 24       	eor	r5, r5
     88e:	c2 01       	movw	r24, r4
     890:	b1 01       	movw	r22, r2
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	af 90       	pop	r10
     8a6:	9f 90       	pop	r9
     8a8:	8f 90       	pop	r8
     8aa:	7f 90       	pop	r7
     8ac:	6f 90       	pop	r6
     8ae:	5f 90       	pop	r5
     8b0:	4f 90       	pop	r4
     8b2:	3f 90       	pop	r3
     8b4:	2f 90       	pop	r2
     8b6:	08 95       	ret

000008b8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     8b8:	4f 92       	push	r4
     8ba:	5f 92       	push	r5
     8bc:	6f 92       	push	r6
     8be:	7f 92       	push	r7
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	6a 01       	movw	r12, r20
     8d8:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8da:	8c 01       	movw	r16, r24
     8dc:	09 5f       	subi	r16, 0xF9	; 249
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     8e0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     8e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     8e6:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     8e8:	88 81       	ld	r24, Y
     8ea:	99 81       	ldd	r25, Y+1	; 0x01
     8ec:	aa 81       	ldd	r26, Y+2	; 0x02
     8ee:	bb 81       	ldd	r27, Y+3	; 0x03
     8f0:	c8 2a       	or	r12, r24
     8f2:	d9 2a       	or	r13, r25
     8f4:	ea 2a       	or	r14, r26
     8f6:	fb 2a       	or	r15, r27
     8f8:	c8 82       	st	Y, r12
     8fa:	d9 82       	std	Y+1, r13	; 0x01
     8fc:	ea 82       	std	Y+2, r14	; 0x02
     8fe:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     900:	c1 2c       	mov	r12, r1
     902:	d1 2c       	mov	r13, r1
     904:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     906:	3d c0       	rjmp	.+122    	; 0x982 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     908:	a4 80       	ldd	r10, Z+4	; 0x04
     90a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	a2 81       	ldd	r26, Z+2	; 0x02
     912:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     914:	ac 01       	movw	r20, r24
     916:	bd 01       	movw	r22, r26
     918:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     91a:	b2 fd       	sbrc	r27, 2
     91c:	0e c0       	rjmp	.+28     	; 0x93a <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     91e:	48 80       	ld	r4, Y
     920:	59 80       	ldd	r5, Y+1	; 0x01
     922:	6a 80       	ldd	r6, Y+2	; 0x02
     924:	7b 80       	ldd	r7, Y+3	; 0x03
     926:	44 22       	and	r4, r20
     928:	55 22       	and	r5, r21
     92a:	66 22       	and	r6, r22
     92c:	77 22       	and	r7, r23
     92e:	45 28       	or	r4, r5
     930:	46 28       	or	r4, r6
     932:	47 28       	or	r4, r7
     934:	89 f4       	brne	.+34     	; 0x958 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	12 c0       	rjmp	.+36     	; 0x95e <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     93a:	48 80       	ld	r4, Y
     93c:	59 80       	ldd	r5, Y+1	; 0x01
     93e:	6a 80       	ldd	r6, Y+2	; 0x02
     940:	7b 80       	ldd	r7, Y+3	; 0x03
     942:	44 22       	and	r4, r20
     944:	55 22       	and	r5, r21
     946:	66 22       	and	r6, r22
     948:	77 22       	and	r7, r23
     94a:	44 15       	cp	r20, r4
     94c:	55 05       	cpc	r21, r5
     94e:	66 05       	cpc	r22, r6
     950:	77 05       	cpc	r23, r7
     952:	21 f0       	breq	.+8      	; 0x95c <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	03 c0       	rjmp	.+6      	; 0x95e <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	01 c0       	rjmp	.+2      	; 0x95e <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     95c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     95e:	22 23       	and	r18, r18
     960:	71 f0       	breq	.+28     	; 0x97e <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     962:	b0 ff       	sbrs	r27, 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     966:	c4 2a       	or	r12, r20
     968:	d5 2a       	or	r13, r21
     96a:	e6 2a       	or	r14, r22
     96c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     96e:	48 81       	ld	r20, Y
     970:	59 81       	ldd	r21, Y+1	; 0x01
     972:	6a 81       	ldd	r22, Y+2	; 0x02
     974:	7b 81       	ldd	r23, Y+3	; 0x03
     976:	72 60       	ori	r23, 0x02	; 2
     978:	cf 01       	movw	r24, r30
     97a:	0e 94 ce 14 	call	0x299c	; 0x299c <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     97e:	ea 2d       	mov	r30, r10
     980:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     982:	e0 17       	cp	r30, r16
     984:	f1 07       	cpc	r31, r17
     986:	09 f0       	breq	.+2      	; 0x98a <xEventGroupSetBits+0xd2>
     988:	bf cf       	rjmp	.-130    	; 0x908 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     98a:	c0 94       	com	r12
     98c:	d0 94       	com	r13
     98e:	e0 94       	com	r14
     990:	f0 94       	com	r15
     992:	88 81       	ld	r24, Y
     994:	99 81       	ldd	r25, Y+1	; 0x01
     996:	aa 81       	ldd	r26, Y+2	; 0x02
     998:	bb 81       	ldd	r27, Y+3	; 0x03
     99a:	c8 22       	and	r12, r24
     99c:	d9 22       	and	r13, r25
     99e:	ea 22       	and	r14, r26
     9a0:	fb 22       	and	r15, r27
     9a2:	c8 82       	st	Y, r12
     9a4:	d9 82       	std	Y+1, r13	; 0x01
     9a6:	ea 82       	std	Y+2, r14	; 0x02
     9a8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     9aa:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     9ae:	68 81       	ld	r22, Y
     9b0:	79 81       	ldd	r23, Y+1	; 0x01
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	cf 90       	pop	r12
     9c6:	bf 90       	pop	r11
     9c8:	af 90       	pop	r10
     9ca:	7f 90       	pop	r7
     9cc:	6f 90       	pop	r6
     9ce:	5f 90       	pop	r5
     9d0:	4f 90       	pop	r4
     9d2:	08 95       	ret

000009d4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     9d4:	e0 ed       	ldi	r30, 0xD0	; 208
     9d6:	f6 e0       	ldi	r31, 0x06	; 6
     9d8:	a4 ed       	ldi	r26, 0xD4	; 212
     9da:	b6 e0       	ldi	r27, 0x06	; 6
     9dc:	b1 83       	std	Z+1, r27	; 0x01
     9de:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     9e0:	13 82       	std	Z+3, r1	; 0x03
     9e2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     9e4:	e4 e9       	ldi	r30, 0x94	; 148
     9e6:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     9e8:	f0 93 cf 06 	sts	0x06CF, r31	; 0x8006cf <pxEnd+0x1>
     9ec:	e0 93 ce 06 	sts	0x06CE, r30	; 0x8006ce <pxEnd>
    pxEnd->xBlockSize = 0;
     9f0:	13 82       	std	Z+3, r1	; 0x03
     9f2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     9f4:	11 82       	std	Z+1, r1	; 0x01
     9f6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     9f8:	80 ec       	ldi	r24, 0xC0	; 192
     9fa:	99 e0       	ldi	r25, 0x09	; 9
     9fc:	13 96       	adiw	r26, 0x03	; 3
     9fe:	9c 93       	st	X, r25
     a00:	8e 93       	st	-X, r24
     a02:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     a04:	ed 93       	st	X+, r30
     a06:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a08:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <xMinimumEverFreeBytesRemaining+0x1>
     a0c:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a10:	90 93 cd 06 	sts	0x06CD, r25	; 0x8006cd <xFreeBytesRemaining+0x1>
     a14:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e8       	ldi	r25, 0x80	; 128
     a1c:	90 93 c5 06 	sts	0x06C5, r25	; 0x8006c5 <xBlockAllocatedBit+0x1>
     a20:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <xBlockAllocatedBit>
     a24:	08 95       	ret

00000a26 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     a2c:	a0 ed       	ldi	r26, 0xD0	; 208
     a2e:	b6 e0       	ldi	r27, 0x06	; 6
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <prvInsertBlockIntoFreeList+0xe>
     a32:	df 01       	movw	r26, r30
     a34:	ed 91       	ld	r30, X+
     a36:	fc 91       	ld	r31, X
     a38:	11 97       	sbiw	r26, 0x01	; 1
     a3a:	ec 17       	cp	r30, r28
     a3c:	fd 07       	cpc	r31, r29
     a3e:	c8 f3       	brcs	.-14     	; 0xa32 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     a40:	12 96       	adiw	r26, 0x02	; 2
     a42:	8d 91       	ld	r24, X+
     a44:	9c 91       	ld	r25, X
     a46:	13 97       	sbiw	r26, 0x03	; 3
     a48:	9d 01       	movw	r18, r26
     a4a:	28 0f       	add	r18, r24
     a4c:	39 1f       	adc	r19, r25
     a4e:	c2 17       	cp	r28, r18
     a50:	d3 07       	cpc	r29, r19
     a52:	49 f4       	brne	.+18     	; 0xa66 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     a54:	2a 81       	ldd	r18, Y+2	; 0x02
     a56:	3b 81       	ldd	r19, Y+3	; 0x03
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	13 96       	adiw	r26, 0x03	; 3
     a5e:	9c 93       	st	X, r25
     a60:	8e 93       	st	-X, r24
     a62:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     a64:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	9b 81       	ldd	r25, Y+3	; 0x03
     a6a:	9e 01       	movw	r18, r28
     a6c:	28 0f       	add	r18, r24
     a6e:	39 1f       	adc	r19, r25
     a70:	e2 17       	cp	r30, r18
     a72:	f3 07       	cpc	r31, r19
     a74:	c1 f4       	brne	.+48     	; 0xaa6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a76:	20 91 ce 06 	lds	r18, 0x06CE	; 0x8006ce <pxEnd>
     a7a:	30 91 cf 06 	lds	r19, 0x06CF	; 0x8006cf <pxEnd+0x1>
     a7e:	e2 17       	cp	r30, r18
     a80:	f3 07       	cpc	r31, r19
     a82:	71 f0       	breq	.+28     	; 0xaa0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a84:	22 81       	ldd	r18, Z+2	; 0x02
     a86:	33 81       	ldd	r19, Z+3	; 0x03
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	9b 83       	std	Y+3, r25	; 0x03
     a8e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a90:	ed 91       	ld	r30, X+
     a92:	fc 91       	ld	r31, X
     a94:	11 97       	sbiw	r26, 0x01	; 1
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	99 83       	std	Y+1, r25	; 0x01
     a9c:	88 83       	st	Y, r24
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     aa0:	39 83       	std	Y+1, r19	; 0x01
     aa2:	28 83       	st	Y, r18
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     aa6:	f9 83       	std	Y+1, r31	; 0x01
     aa8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     aaa:	ca 17       	cp	r28, r26
     aac:	db 07       	cpc	r29, r27
     aae:	11 f0       	breq	.+4      	; 0xab4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     ab0:	cd 93       	st	X+, r28
     ab2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     ac8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     acc:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxEnd>
     ad0:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxEnd+0x1>
     ad4:	89 2b       	or	r24, r25
     ad6:	09 f4       	brne	.+2      	; 0xada <pvPortMalloc+0x20>
        {
            prvHeapInit();
     ad8:	7d df       	rcall	.-262    	; 0x9d4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ada:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <xBlockAllocatedBit>
     ade:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <xBlockAllocatedBit+0x1>
     ae2:	80 23       	and	r24, r16
     ae4:	91 23       	and	r25, r17
     ae6:	89 2b       	or	r24, r25
     ae8:	09 f0       	breq	.+2      	; 0xaec <pvPortMalloc+0x32>
     aea:	76 c0       	rjmp	.+236    	; 0xbd8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     aec:	01 15       	cp	r16, r1
     aee:	11 05       	cpc	r17, r1
     af0:	49 f0       	breq	.+18     	; 0xb04 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     af2:	c8 01       	movw	r24, r16
     af4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     af6:	08 17       	cp	r16, r24
     af8:	19 07       	cpc	r17, r25
     afa:	18 f0       	brcs	.+6      	; 0xb02 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     afc:	00 e0       	ldi	r16, 0x00	; 0
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     b02:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     b04:	01 15       	cp	r16, r1
     b06:	11 05       	cpc	r17, r1
     b08:	09 f4       	brne	.+2      	; 0xb0c <pvPortMalloc+0x52>
     b0a:	69 c0       	rjmp	.+210    	; 0xbde <pvPortMalloc+0x124>
     b0c:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <xFreeBytesRemaining>
     b10:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <xFreeBytesRemaining+0x1>
     b14:	80 17       	cp	r24, r16
     b16:	91 07       	cpc	r25, r17
     b18:	08 f4       	brcc	.+2      	; 0xb1c <pvPortMalloc+0x62>
     b1a:	64 c0       	rjmp	.+200    	; 0xbe4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     b1c:	c0 91 d0 06 	lds	r28, 0x06D0	; 0x8006d0 <xStart>
     b20:	d0 91 d1 06 	lds	r29, 0x06D1	; 0x8006d1 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     b24:	e0 ed       	ldi	r30, 0xD0	; 208
     b26:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     b2a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     b2c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b2e:	8a 81       	ldd	r24, Y+2	; 0x02
     b30:	9b 81       	ldd	r25, Y+3	; 0x03
     b32:	80 17       	cp	r24, r16
     b34:	91 07       	cpc	r25, r17
     b36:	20 f4       	brcc	.+8      	; 0xb40 <pvPortMalloc+0x86>
     b38:	88 81       	ld	r24, Y
     b3a:	99 81       	ldd	r25, Y+1	; 0x01
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	a9 f7       	brne	.-22     	; 0xb2a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     b40:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxEnd>
     b44:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxEnd+0x1>
     b48:	c8 17       	cp	r28, r24
     b4a:	d9 07       	cpc	r29, r25
     b4c:	09 f4       	brne	.+2      	; 0xb50 <pvPortMalloc+0x96>
     b4e:	4d c0       	rjmp	.+154    	; 0xbea <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     b50:	e0 80       	ld	r14, Z
     b52:	f1 80       	ldd	r15, Z+1	; 0x01
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	e8 0e       	add	r14, r24
     b58:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	91 83       	std	Z+1, r25	; 0x01
     b60:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     b62:	2a 81       	ldd	r18, Y+2	; 0x02
     b64:	3b 81       	ldd	r19, Y+3	; 0x03
     b66:	20 1b       	sub	r18, r16
     b68:	31 0b       	sbc	r19, r17
     b6a:	29 30       	cpi	r18, 0x09	; 9
     b6c:	31 05       	cpc	r19, r1
     b6e:	48 f0       	brcs	.+18     	; 0xb82 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b70:	ce 01       	movw	r24, r28
     b72:	80 0f       	add	r24, r16
     b74:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b76:	fc 01       	movw	r30, r24
     b78:	33 83       	std	Z+3, r19	; 0x03
     b7a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b7c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b7e:	0a 83       	std	Y+2, r16	; 0x02
     b80:	52 df       	rcall	.-348    	; 0xa26 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b82:	2a 81       	ldd	r18, Y+2	; 0x02
     b84:	3b 81       	ldd	r19, Y+3	; 0x03
     b86:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <xFreeBytesRemaining>
     b8a:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <xFreeBytesRemaining+0x1>
     b8e:	82 1b       	sub	r24, r18
     b90:	93 0b       	sbc	r25, r19
     b92:	90 93 cd 06 	sts	0x06CD, r25	; 0x8006cd <xFreeBytesRemaining+0x1>
     b96:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b9a:	40 91 ca 06 	lds	r20, 0x06CA	; 0x8006ca <xMinimumEverFreeBytesRemaining>
     b9e:	50 91 cb 06 	lds	r21, 0x06CB	; 0x8006cb <xMinimumEverFreeBytesRemaining+0x1>
     ba2:	84 17       	cp	r24, r20
     ba4:	95 07       	cpc	r25, r21
     ba6:	20 f4       	brcc	.+8      	; 0xbb0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     ba8:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <xMinimumEverFreeBytesRemaining+0x1>
     bac:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     bb0:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <xBlockAllocatedBit>
     bb4:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <xBlockAllocatedBit+0x1>
     bb8:	28 2b       	or	r18, r24
     bba:	39 2b       	or	r19, r25
     bbc:	3b 83       	std	Y+3, r19	; 0x03
     bbe:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     bc0:	19 82       	std	Y+1, r1	; 0x01
     bc2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     bc4:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <xNumberOfSuccessfulAllocations>
     bc8:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <xNumberOfSuccessfulAllocations+0x1>
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <xNumberOfSuccessfulAllocations+0x1>
     bd2:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <xNumberOfSuccessfulAllocations>
     bd6:	0b c0       	rjmp	.+22     	; 0xbee <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     bd8:	e1 2c       	mov	r14, r1
     bda:	f1 2c       	mov	r15, r1
     bdc:	08 c0       	rjmp	.+16     	; 0xbee <pvPortMalloc+0x134>
     bde:	e1 2c       	mov	r14, r1
     be0:	f1 2c       	mov	r15, r1
     be2:	05 c0       	rjmp	.+10     	; 0xbee <pvPortMalloc+0x134>
     be4:	e1 2c       	mov	r14, r1
     be6:	f1 2c       	mov	r15, r1
     be8:	02 c0       	rjmp	.+4      	; 0xbee <pvPortMalloc+0x134>
     bea:	e1 2c       	mov	r14, r1
     bec:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     bee:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     bf2:	e1 14       	cp	r14, r1
     bf4:	f1 04       	cpc	r15, r1
     bf6:	11 f4       	brne	.+4      	; 0xbfc <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     bf8:	0e 94 77 1c 	call	0x38ee	; 0x38ee <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     bfc:	c7 01       	movw	r24, r14
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	08 95       	ret

00000c0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	91 f1       	breq	.+100    	; 0xc7c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     c18:	ec 01       	movw	r28, r24
     c1a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     c1c:	4a 81       	ldd	r20, Y+2	; 0x02
     c1e:	5b 81       	ldd	r21, Y+3	; 0x03
     c20:	20 91 c4 06 	lds	r18, 0x06C4	; 0x8006c4 <xBlockAllocatedBit>
     c24:	30 91 c5 06 	lds	r19, 0x06C5	; 0x8006c5 <xBlockAllocatedBit+0x1>
     c28:	ba 01       	movw	r22, r20
     c2a:	62 23       	and	r22, r18
     c2c:	73 23       	and	r23, r19
     c2e:	67 2b       	or	r22, r23
     c30:	29 f1       	breq	.+74     	; 0xc7c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     c32:	68 81       	ld	r22, Y
     c34:	79 81       	ldd	r23, Y+1	; 0x01
     c36:	67 2b       	or	r22, r23
     c38:	09 f5       	brne	.+66     	; 0xc7c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     c3a:	20 95       	com	r18
     c3c:	30 95       	com	r19
     c3e:	24 23       	and	r18, r20
     c40:	35 23       	and	r19, r21
     c42:	3b 83       	std	Y+3, r19	; 0x03
     c44:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     c46:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <xFreeBytesRemaining>
     c52:	30 91 cd 06 	lds	r19, 0x06CD	; 0x8006cd <xFreeBytesRemaining+0x1>
     c56:	82 0f       	add	r24, r18
     c58:	93 1f       	adc	r25, r19
     c5a:	90 93 cd 06 	sts	0x06CD, r25	; 0x8006cd <xFreeBytesRemaining+0x1>
     c5e:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     c62:	ce 01       	movw	r24, r28
     c64:	e0 de       	rcall	.-576    	; 0xa26 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     c66:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <xNumberOfSuccessfulFrees>
     c6a:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <xNumberOfSuccessfulFrees+0x1>
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	90 93 c7 06 	sts	0x06C7, r25	; 0x8006c7 <xNumberOfSuccessfulFrees+0x1>
     c74:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c78:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c86:	fc 01       	movw	r30, r24
     c88:	03 96       	adiw	r24, 0x03	; 3
     c8a:	92 83       	std	Z+2, r25	; 0x02
     c8c:	81 83       	std	Z+1, r24	; 0x01
     c8e:	4f ef       	ldi	r20, 0xFF	; 255
     c90:	5f ef       	ldi	r21, 0xFF	; 255
     c92:	ba 01       	movw	r22, r20
     c94:	43 83       	std	Z+3, r20	; 0x03
     c96:	54 83       	std	Z+4, r21	; 0x04
     c98:	65 83       	std	Z+5, r22	; 0x05
     c9a:	76 83       	std	Z+6, r23	; 0x06
     c9c:	90 87       	std	Z+8, r25	; 0x08
     c9e:	87 83       	std	Z+7, r24	; 0x07
     ca0:	92 87       	std	Z+10, r25	; 0x0a
     ca2:	81 87       	std	Z+9, r24	; 0x09
     ca4:	10 82       	st	Z, r1
     ca6:	08 95       	ret

00000ca8 <vListInitialiseItem>:
     ca8:	fc 01       	movw	r30, r24
     caa:	13 86       	std	Z+11, r1	; 0x0b
     cac:	12 86       	std	Z+10, r1	; 0x0a
     cae:	08 95       	ret

00000cb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cba:	08 81       	ld	r16, Y
     cbc:	19 81       	ldd	r17, Y+1	; 0x01
     cbe:	2a 81       	ldd	r18, Y+2	; 0x02
     cc0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     cc2:	0f 3f       	cpi	r16, 0xFF	; 255
     cc4:	4f ef       	ldi	r20, 0xFF	; 255
     cc6:	14 07       	cpc	r17, r20
     cc8:	24 07       	cpc	r18, r20
     cca:	34 07       	cpc	r19, r20
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     cce:	fc 01       	movw	r30, r24
     cd0:	a1 85       	ldd	r26, Z+9	; 0x09
     cd2:	b2 85       	ldd	r27, Z+10	; 0x0a
     cd4:	11 c0       	rjmp	.+34     	; 0xcf8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     cd6:	dc 01       	movw	r26, r24
     cd8:	13 96       	adiw	r26, 0x03	; 3
     cda:	01 c0       	rjmp	.+2      	; 0xcde <vListInsert+0x2e>
     cdc:	df 01       	movw	r26, r30
     cde:	14 96       	adiw	r26, 0x04	; 4
     ce0:	ed 91       	ld	r30, X+
     ce2:	fc 91       	ld	r31, X
     ce4:	15 97       	sbiw	r26, 0x05	; 5
     ce6:	40 81       	ld	r20, Z
     ce8:	51 81       	ldd	r21, Z+1	; 0x01
     cea:	62 81       	ldd	r22, Z+2	; 0x02
     cec:	73 81       	ldd	r23, Z+3	; 0x03
     cee:	04 17       	cp	r16, r20
     cf0:	15 07       	cpc	r17, r21
     cf2:	26 07       	cpc	r18, r22
     cf4:	37 07       	cpc	r19, r23
     cf6:	90 f7       	brcc	.-28     	; 0xcdc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     cf8:	14 96       	adiw	r26, 0x04	; 4
     cfa:	ed 91       	ld	r30, X+
     cfc:	fc 91       	ld	r31, X
     cfe:	15 97       	sbiw	r26, 0x05	; 5
     d00:	fd 83       	std	Y+5, r31	; 0x05
     d02:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d04:	d7 83       	std	Z+7, r29	; 0x07
     d06:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     d08:	bf 83       	std	Y+7, r27	; 0x07
     d0a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     d0c:	15 96       	adiw	r26, 0x05	; 5
     d0e:	dc 93       	st	X, r29
     d10:	ce 93       	st	-X, r28
     d12:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     d14:	9b 87       	std	Y+11, r25	; 0x0b
     d16:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     d18:	fc 01       	movw	r30, r24
     d1a:	20 81       	ld	r18, Z
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	20 83       	st	Z, r18
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	08 95       	ret

00000d2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     d30:	a2 85       	ldd	r26, Z+10	; 0x0a
     d32:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d34:	c4 81       	ldd	r28, Z+4	; 0x04
     d36:	d5 81       	ldd	r29, Z+5	; 0x05
     d38:	86 81       	ldd	r24, Z+6	; 0x06
     d3a:	97 81       	ldd	r25, Z+7	; 0x07
     d3c:	9f 83       	std	Y+7, r25	; 0x07
     d3e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d40:	c6 81       	ldd	r28, Z+6	; 0x06
     d42:	d7 81       	ldd	r29, Z+7	; 0x07
     d44:	84 81       	ldd	r24, Z+4	; 0x04
     d46:	95 81       	ldd	r25, Z+5	; 0x05
     d48:	9d 83       	std	Y+5, r25	; 0x05
     d4a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	8d 91       	ld	r24, X+
     d50:	9c 91       	ld	r25, X
     d52:	12 97       	sbiw	r26, 0x02	; 2
     d54:	e8 17       	cp	r30, r24
     d56:	f9 07       	cpc	r31, r25
     d58:	31 f4       	brne	.+12     	; 0xd66 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     d5a:	86 81       	ldd	r24, Z+6	; 0x06
     d5c:	97 81       	ldd	r25, Z+7	; 0x07
     d5e:	12 96       	adiw	r26, 0x02	; 2
     d60:	9c 93       	st	X, r25
     d62:	8e 93       	st	-X, r24
     d64:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     d66:	13 86       	std	Z+11, r1	; 0x0b
     d68:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     d6a:	8c 91       	ld	r24, X
     d6c:	81 50       	subi	r24, 0x01	; 1
     d6e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d70:	8c 91       	ld	r24, X
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d78:	a8 95       	wdr
     d7a:	90 ec       	ldi	r25, 0xC0	; 192
     d7c:	88 e1       	ldi	r24, 0x18	; 24
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	a8 95       	wdr
     d84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d8e:	08 95       	ret

00000d90 <pxPortInitialiseStack>:
     d90:	fc 01       	movw	r30, r24
     d92:	60 83       	st	Z, r22
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	70 83       	st	Z, r23
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	10 82       	st	Z, r1
     d9c:	31 97       	sbiw	r30, 0x01	; 1
     d9e:	10 82       	st	Z, r1
     da0:	31 97       	sbiw	r30, 0x01	; 1
     da2:	20 e8       	ldi	r18, 0x80	; 128
     da4:	20 83       	st	Z, r18
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	10 82       	st	Z, r1
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	10 82       	st	Z, r1
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	10 82       	st	Z, r1
     db2:	77 97       	sbiw	r30, 0x17	; 23
     db4:	40 83       	st	Z, r20
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	50 83       	st	Z, r21
     dba:	86 97       	sbiw	r24, 0x26	; 38
     dbc:	08 95       	ret

00000dbe <xPortStartScheduler>:
     dbe:	dc df       	rcall	.-72     	; 0xd78 <prvSetupTimerInterrupt>
     dc0:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
     dc4:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
     dc8:	cd 91       	ld	r28, X+
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	dd 91       	ld	r29, X+
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	af 90       	pop	r10
     dfc:	9f 90       	pop	r9
     dfe:	8f 90       	pop	r8
     e00:	7f 90       	pop	r7
     e02:	6f 90       	pop	r6
     e04:	5f 90       	pop	r5
     e06:	4f 90       	pop	r4
     e08:	3f 90       	pop	r3
     e0a:	2f 90       	pop	r2
     e0c:	1f 90       	pop	r1
     e0e:	0f 90       	pop	r0
     e10:	0c be       	out	0x3c, r0	; 60
     e12:	0f 90       	pop	r0
     e14:	0b be       	out	0x3b, r0	; 59
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	08 95       	ret
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	08 95       	ret

00000e22 <vPortYield>:
     e22:	0f 92       	push	r0
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	0f 92       	push	r0
     e2a:	0b b6       	in	r0, 0x3b	; 59
     e2c:	0f 92       	push	r0
     e2e:	0c b6       	in	r0, 0x3c	; 60
     e30:	0f 92       	push	r0
     e32:	1f 92       	push	r1
     e34:	11 24       	eor	r1, r1
     e36:	2f 92       	push	r2
     e38:	3f 92       	push	r3
     e3a:	4f 92       	push	r4
     e3c:	5f 92       	push	r5
     e3e:	6f 92       	push	r6
     e40:	7f 92       	push	r7
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
     e72:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
     e76:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
     e7a:	0d b6       	in	r0, 0x3d	; 61
     e7c:	0d 92       	st	X+, r0
     e7e:	0e b6       	in	r0, 0x3e	; 62
     e80:	0d 92       	st	X+, r0
     e82:	0e 94 17 13 	call	0x262e	; 0x262e <vTaskSwitchContext>
     e86:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
     e8a:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
     e8e:	cd 91       	ld	r28, X+
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	dd 91       	ld	r29, X+
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	9f 90       	pop	r9
     ec4:	8f 90       	pop	r8
     ec6:	7f 90       	pop	r7
     ec8:	6f 90       	pop	r6
     eca:	5f 90       	pop	r5
     ecc:	4f 90       	pop	r4
     ece:	3f 90       	pop	r3
     ed0:	2f 90       	pop	r2
     ed2:	1f 90       	pop	r1
     ed4:	0f 90       	pop	r0
     ed6:	0c be       	out	0x3c, r0	; 60
     ed8:	0f 90       	pop	r0
     eda:	0b be       	out	0x3b, r0	; 59
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	08 95       	ret

00000ee4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	0f 92       	push	r0
     eec:	0b b6       	in	r0, 0x3b	; 59
     eee:	0f 92       	push	r0
     ef0:	0c b6       	in	r0, 0x3c	; 60
     ef2:	0f 92       	push	r0
     ef4:	1f 92       	push	r1
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 92       	push	r2
     efa:	3f 92       	push	r3
     efc:	4f 92       	push	r4
     efe:	5f 92       	push	r5
     f00:	6f 92       	push	r6
     f02:	7f 92       	push	r7
     f04:	8f 92       	push	r8
     f06:	9f 92       	push	r9
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
     f34:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
     f38:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
     f3c:	0d b6       	in	r0, 0x3d	; 61
     f3e:	0d 92       	st	X+, r0
     f40:	0e b6       	in	r0, 0x3e	; 62
     f42:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     f44:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     f46:	0e 94 8f 10 	call	0x211e	; 0x211e <xTaskIncrementTick>
     f4a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f4c:	0e 94 17 13 	call	0x262e	; 0x262e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     f50:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
     f54:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
     f58:	cd 91       	ld	r28, X+
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	dd 91       	ld	r29, X+
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	bf 90       	pop	r11
     f8a:	af 90       	pop	r10
     f8c:	9f 90       	pop	r9
     f8e:	8f 90       	pop	r8
     f90:	7f 90       	pop	r7
     f92:	6f 90       	pop	r6
     f94:	5f 90       	pop	r5
     f96:	4f 90       	pop	r4
     f98:	3f 90       	pop	r3
     f9a:	2f 90       	pop	r2
     f9c:	1f 90       	pop	r1
     f9e:	0f 90       	pop	r0
     fa0:	0c be       	out	0x3c, r0	; 60
     fa2:	0f 90       	pop	r0
     fa4:	0b be       	out	0x3b, r0	; 59
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     fac:	08 95       	ret

00000fae <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     fae:	9a df       	rcall	.-204    	; 0xee4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     fb0:	18 95       	reti

00000fb2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	0f 92       	push	r0
     fb8:	fc 01       	movw	r30, r24
     fba:	86 8d       	ldd	r24, Z+30	; 0x1e
     fbc:	81 11       	cpse	r24, r1
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <prvIsQueueEmpty+0x12>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <prvIsQueueEmpty+0x14>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	08 95       	ret

00000fcc <prvIsQueueFull>:
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	0f 92       	push	r0
     fd2:	fc 01       	movw	r30, r24
     fd4:	26 8d       	ldd	r18, Z+30	; 0x1e
     fd6:	87 8d       	ldd	r24, Z+31	; 0x1f
     fd8:	28 13       	cpse	r18, r24
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <prvIsQueueFull+0x14>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <prvIsQueueFull+0x16>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	08 95       	ret

00000fe8 <prvCopyDataToQueue>:
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	ec 01       	movw	r28, r24
     ff2:	04 2f       	mov	r16, r20
     ff4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ff6:	48 a1       	ldd	r20, Y+32	; 0x20
     ff8:	41 11       	cpse	r20, r1
     ffa:	0c c0       	rjmp	.+24     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     ffc:	88 81       	ld	r24, Y
     ffe:	99 81       	ldd	r25, Y+1	; 0x01
    1000:	89 2b       	or	r24, r25
    1002:	09 f0       	breq	.+2      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1004:	42 c0       	rjmp	.+132    	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <xTaskPriorityDisinherit>
    100e:	1d 82       	std	Y+5, r1	; 0x05
    1010:	1c 82       	std	Y+4, r1	; 0x04
    1012:	42 c0       	rjmp	.+132    	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    1014:	01 11       	cpse	r16, r1
    1016:	17 c0       	rjmp	.+46     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <memcpy>
    1022:	28 a1       	ldd	r18, Y+32	; 0x20
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	82 0f       	add	r24, r18
    102a:	91 1d       	adc	r25, r1
    102c:	9b 83       	std	Y+3, r25	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	82 17       	cp	r24, r18
    1036:	93 07       	cpc	r25, r19
    1038:	50 f1       	brcs	.+84     	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
    103a:	88 81       	ld	r24, Y
    103c:	99 81       	ldd	r25, Y+1	; 0x01
    103e:	9b 83       	std	Y+3, r25	; 0x03
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	29 c0       	rjmp	.+82     	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	9f 81       	ldd	r25, Y+7	; 0x07
    104c:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <memcpy>
    1050:	88 a1       	ldd	r24, Y+32	; 0x20
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	91 95       	neg	r25
    1056:	81 95       	neg	r24
    1058:	91 09       	sbc	r25, r1
    105a:	2e 81       	ldd	r18, Y+6	; 0x06
    105c:	3f 81       	ldd	r19, Y+7	; 0x07
    105e:	28 0f       	add	r18, r24
    1060:	39 1f       	adc	r19, r25
    1062:	3f 83       	std	Y+7, r19	; 0x07
    1064:	2e 83       	std	Y+6, r18	; 0x06
    1066:	48 81       	ld	r20, Y
    1068:	59 81       	ldd	r21, Y+1	; 0x01
    106a:	24 17       	cp	r18, r20
    106c:	35 07       	cpc	r19, r21
    106e:	30 f4       	brcc	.+12     	; 0x107c <__EEPROM_REGION_LENGTH__+0x7c>
    1070:	2c 81       	ldd	r18, Y+4	; 0x04
    1072:	3d 81       	ldd	r19, Y+5	; 0x05
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	9f 83       	std	Y+7, r25	; 0x07
    107a:	8e 83       	std	Y+6, r24	; 0x06
    107c:	02 30       	cpi	r16, 0x02	; 2
    107e:	49 f4       	brne	.+18     	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
    1080:	11 23       	and	r17, r17
    1082:	49 f0       	breq	.+18     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    1084:	11 50       	subi	r17, 0x01	; 1
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	1f 5f       	subi	r17, 0xFF	; 255
    109a:	1e 8f       	std	Y+30, r17	; 0x1e
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	08 95       	ret

000010a6 <prvCopyDataFromQueue>:
    10a6:	fc 01       	movw	r30, r24
    10a8:	40 a1       	ldd	r20, Z+32	; 0x20
    10aa:	44 23       	and	r20, r20
    10ac:	a9 f0       	breq	.+42     	; 0x10d8 <prvCopyDataFromQueue+0x32>
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	26 81       	ldd	r18, Z+6	; 0x06
    10b2:	37 81       	ldd	r19, Z+7	; 0x07
    10b4:	24 0f       	add	r18, r20
    10b6:	35 1f       	adc	r19, r21
    10b8:	37 83       	std	Z+7, r19	; 0x07
    10ba:	26 83       	std	Z+6, r18	; 0x06
    10bc:	84 81       	ldd	r24, Z+4	; 0x04
    10be:	95 81       	ldd	r25, Z+5	; 0x05
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <prvCopyDataFromQueue+0x28>
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	97 83       	std	Z+7, r25	; 0x07
    10cc:	86 83       	std	Z+6, r24	; 0x06
    10ce:	cb 01       	movw	r24, r22
    10d0:	66 81       	ldd	r22, Z+6	; 0x06
    10d2:	77 81       	ldd	r23, Z+7	; 0x07
    10d4:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <memcpy>
    10d8:	08 95       	ret

000010da <prvUnlockQueue>:
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	ec 01       	movw	r28, r24
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	0f 92       	push	r0
    10e8:	1a a1       	ldd	r17, Y+34	; 0x22
    10ea:	0b c0       	rjmp	.+22     	; 0x1102 <prvUnlockQueue+0x28>
    10ec:	8b 89       	ldd	r24, Y+19	; 0x13
    10ee:	88 23       	and	r24, r24
    10f0:	51 f0       	breq	.+20     	; 0x1106 <prvUnlockQueue+0x2c>
    10f2:	ce 01       	movw	r24, r28
    10f4:	43 96       	adiw	r24, 0x13	; 19
    10f6:	0e 94 1f 14 	call	0x283e	; 0x283e <xTaskRemoveFromEventList>
    10fa:	81 11       	cpse	r24, r1
    10fc:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vTaskMissedYield>
    1100:	11 50       	subi	r17, 0x01	; 1
    1102:	11 16       	cp	r1, r17
    1104:	9c f3       	brlt	.-26     	; 0x10ec <prvUnlockQueue+0x12>
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	8a a3       	std	Y+34, r24	; 0x22
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	0f 92       	push	r0
    1114:	19 a1       	ldd	r17, Y+33	; 0x21
    1116:	0b c0       	rjmp	.+22     	; 0x112e <prvUnlockQueue+0x54>
    1118:	88 85       	ldd	r24, Y+8	; 0x08
    111a:	88 23       	and	r24, r24
    111c:	51 f0       	breq	.+20     	; 0x1132 <prvUnlockQueue+0x58>
    111e:	ce 01       	movw	r24, r28
    1120:	08 96       	adiw	r24, 0x08	; 8
    1122:	0e 94 1f 14 	call	0x283e	; 0x283e <xTaskRemoveFromEventList>
    1126:	81 11       	cpse	r24, r1
    1128:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vTaskMissedYield>
    112c:	11 50       	subi	r17, 0x01	; 1
    112e:	11 16       	cp	r1, r17
    1130:	9c f3       	brlt	.-26     	; 0x1118 <prvUnlockQueue+0x3e>
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	89 a3       	std	Y+33, r24	; 0x21
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	08 95       	ret

00001142 <xQueueGenericReset>:
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	0f 92       	push	r0
    114e:	e8 81       	ld	r30, Y
    1150:	f9 81       	ldd	r31, Y+1	; 0x01
    1152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1154:	28 a1       	ldd	r18, Y+32	; 0x20
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	82 9f       	mul	r24, r18
    115c:	a0 01       	movw	r20, r0
    115e:	83 9f       	mul	r24, r19
    1160:	50 0d       	add	r21, r0
    1162:	92 9f       	mul	r25, r18
    1164:	50 0d       	add	r21, r0
    1166:	11 24       	eor	r1, r1
    1168:	4e 0f       	add	r20, r30
    116a:	5f 1f       	adc	r21, r31
    116c:	5d 83       	std	Y+5, r21	; 0x05
    116e:	4c 83       	std	Y+4, r20	; 0x04
    1170:	1e 8e       	std	Y+30, r1	; 0x1e
    1172:	fb 83       	std	Y+3, r31	; 0x03
    1174:	ea 83       	std	Y+2, r30	; 0x02
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	28 9f       	mul	r18, r24
    117a:	a0 01       	movw	r20, r0
    117c:	29 9f       	mul	r18, r25
    117e:	50 0d       	add	r21, r0
    1180:	38 9f       	mul	r19, r24
    1182:	50 0d       	add	r21, r0
    1184:	11 24       	eor	r1, r1
    1186:	cf 01       	movw	r24, r30
    1188:	84 0f       	add	r24, r20
    118a:	95 1f       	adc	r25, r21
    118c:	9f 83       	std	Y+7, r25	; 0x07
    118e:	8e 83       	std	Y+6, r24	; 0x06
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	89 a3       	std	Y+33, r24	; 0x21
    1194:	8a a3       	std	Y+34, r24	; 0x22
    1196:	61 11       	cpse	r22, r1
    1198:	0b c0       	rjmp	.+22     	; 0x11b0 <xQueueGenericReset+0x6e>
    119a:	88 85       	ldd	r24, Y+8	; 0x08
    119c:	88 23       	and	r24, r24
    119e:	71 f0       	breq	.+28     	; 0x11bc <xQueueGenericReset+0x7a>
    11a0:	ce 01       	movw	r24, r28
    11a2:	08 96       	adiw	r24, 0x08	; 8
    11a4:	0e 94 1f 14 	call	0x283e	; 0x283e <xTaskRemoveFromEventList>
    11a8:	88 23       	and	r24, r24
    11aa:	41 f0       	breq	.+16     	; 0x11bc <xQueueGenericReset+0x7a>
    11ac:	3a de       	rcall	.-908    	; 0xe22 <vPortYield>
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <xQueueGenericReset+0x7a>
    11b0:	ce 01       	movw	r24, r28
    11b2:	08 96       	adiw	r24, 0x08	; 8
    11b4:	68 dd       	rcall	.-1328   	; 0xc86 <vListInitialise>
    11b6:	ce 01       	movw	r24, r28
    11b8:	43 96       	adiw	r24, 0x13	; 19
    11ba:	65 dd       	rcall	.-1334   	; 0xc86 <vListInitialise>
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <prvInitialiseNewQueue>:
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	f8 01       	movw	r30, r16
    11ce:	61 11       	cpse	r22, r1
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <prvInitialiseNewQueue+0x10>
    11d2:	11 83       	std	Z+1, r17	; 0x01
    11d4:	00 83       	st	Z, r16
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <prvInitialiseNewQueue+0x14>
    11d8:	51 83       	std	Z+1, r21	; 0x01
    11da:	40 83       	st	Z, r20
    11dc:	87 8f       	std	Z+31, r24	; 0x1f
    11de:	60 a3       	std	Z+32, r22	; 0x20
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	cf 01       	movw	r24, r30
    11e4:	ae df       	rcall	.-164    	; 0x1142 <xQueueGenericReset>
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <xQueueGenericCreate>:
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	f8 2e       	mov	r15, r24
    11fc:	e6 2e       	mov	r14, r22
    11fe:	d4 2e       	mov	r13, r20
    1200:	86 9f       	mul	r24, r22
    1202:	c0 01       	movw	r24, r0
    1204:	11 24       	eor	r1, r1
    1206:	83 96       	adiw	r24, 0x23	; 35
    1208:	58 dc       	rcall	.-1872   	; 0xaba <pvPortMalloc>
    120a:	ec 01       	movw	r28, r24
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	41 f0       	breq	.+16     	; 0x1220 <xQueueGenericCreate+0x34>
    1210:	8c 01       	movw	r16, r24
    1212:	2d 2d       	mov	r18, r13
    1214:	ac 01       	movw	r20, r24
    1216:	4d 5d       	subi	r20, 0xDD	; 221
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	6e 2d       	mov	r22, r14
    121c:	8f 2d       	mov	r24, r15
    121e:	d4 df       	rcall	.-88     	; 0x11c8 <prvInitialiseNewQueue>
    1220:	ce 01       	movw	r24, r28
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	08 95       	ret

00001232 <xQueueGenericSend>:
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	29 97       	sbiw	r28, 0x09	; 9
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	7c 01       	movw	r14, r24
    1254:	6b 01       	movw	r12, r22
    1256:	2e 83       	std	Y+6, r18	; 0x06
    1258:	3f 83       	std	Y+7, r19	; 0x07
    125a:	48 87       	std	Y+8, r20	; 0x08
    125c:	59 87       	std	Y+9, r21	; 0x09
    125e:	10 e0       	ldi	r17, 0x00	; 0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	0f 92       	push	r0
    1266:	f7 01       	movw	r30, r14
    1268:	96 8d       	ldd	r25, Z+30	; 0x1e
    126a:	87 8d       	ldd	r24, Z+31	; 0x1f
    126c:	98 17       	cp	r25, r24
    126e:	10 f0       	brcs	.+4      	; 0x1274 <xQueueGenericSend+0x42>
    1270:	02 30       	cpi	r16, 0x02	; 2
    1272:	b1 f4       	brne	.+44     	; 0x12a0 <xQueueGenericSend+0x6e>
    1274:	40 2f       	mov	r20, r16
    1276:	b6 01       	movw	r22, r12
    1278:	c7 01       	movw	r24, r14
    127a:	b6 de       	rcall	.-660    	; 0xfe8 <prvCopyDataToQueue>
    127c:	f7 01       	movw	r30, r14
    127e:	93 89       	ldd	r25, Z+19	; 0x13
    1280:	99 23       	and	r25, r25
    1282:	41 f0       	breq	.+16     	; 0x1294 <xQueueGenericSend+0x62>
    1284:	c7 01       	movw	r24, r14
    1286:	43 96       	adiw	r24, 0x13	; 19
    1288:	0e 94 1f 14 	call	0x283e	; 0x283e <xTaskRemoveFromEventList>
    128c:	88 23       	and	r24, r24
    128e:	21 f0       	breq	.+8      	; 0x1298 <xQueueGenericSend+0x66>
    1290:	c8 dd       	rcall	.-1136   	; 0xe22 <vPortYield>
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <xQueueGenericSend+0x66>
    1294:	81 11       	cpse	r24, r1
    1296:	c5 dd       	rcall	.-1142   	; 0xe22 <vPortYield>
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	4c c0       	rjmp	.+152    	; 0x1338 <xQueueGenericSend+0x106>
    12a0:	8e 81       	ldd	r24, Y+6	; 0x06
    12a2:	9f 81       	ldd	r25, Y+7	; 0x07
    12a4:	a8 85       	ldd	r26, Y+8	; 0x08
    12a6:	b9 85       	ldd	r27, Y+9	; 0x09
    12a8:	89 2b       	or	r24, r25
    12aa:	8a 2b       	or	r24, r26
    12ac:	8b 2b       	or	r24, r27
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <xQueueGenericSend+0x86>
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	40 c0       	rjmp	.+128    	; 0x1338 <xQueueGenericSend+0x106>
    12b8:	11 11       	cpse	r17, r1
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <xQueueGenericSend+0x94>
    12bc:	ce 01       	movw	r24, r28
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	0e 94 7e 15 	call	0x2afc	; 0x2afc <vTaskInternalSetTimeOutState>
    12c4:	11 e0       	ldi	r17, 0x01	; 1
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	15 d7       	rcall	.+3626   	; 0x20f6 <vTaskSuspendAll>
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	0f 92       	push	r0
    12d2:	f7 01       	movw	r30, r14
    12d4:	81 a1       	ldd	r24, Z+33	; 0x21
    12d6:	8f 3f       	cpi	r24, 0xFF	; 255
    12d8:	09 f4       	brne	.+2      	; 0x12dc <xQueueGenericSend+0xaa>
    12da:	11 a2       	std	Z+33, r1	; 0x21
    12dc:	f7 01       	movw	r30, r14
    12de:	82 a1       	ldd	r24, Z+34	; 0x22
    12e0:	8f 3f       	cpi	r24, 0xFF	; 255
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <xQueueGenericSend+0xb4>
    12e4:	12 a2       	std	Z+34, r1	; 0x22
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	be 01       	movw	r22, r28
    12ec:	6a 5f       	subi	r22, 0xFA	; 250
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskCheckForTimeOut>
    12f8:	81 11       	cpse	r24, r1
    12fa:	19 c0       	rjmp	.+50     	; 0x132e <xQueueGenericSend+0xfc>
    12fc:	c7 01       	movw	r24, r14
    12fe:	66 de       	rcall	.-820    	; 0xfcc <prvIsQueueFull>
    1300:	88 23       	and	r24, r24
    1302:	81 f0       	breq	.+32     	; 0x1324 <xQueueGenericSend+0xf2>
    1304:	4e 81       	ldd	r20, Y+6	; 0x06
    1306:	5f 81       	ldd	r21, Y+7	; 0x07
    1308:	68 85       	ldd	r22, Y+8	; 0x08
    130a:	79 85       	ldd	r23, Y+9	; 0x09
    130c:	c7 01       	movw	r24, r14
    130e:	08 96       	adiw	r24, 0x08	; 8
    1310:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <vTaskPlaceOnEventList>
    1314:	c7 01       	movw	r24, r14
    1316:	e1 de       	rcall	.-574    	; 0x10da <prvUnlockQueue>
    1318:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
    131c:	81 11       	cpse	r24, r1
    131e:	a0 cf       	rjmp	.-192    	; 0x1260 <xQueueGenericSend+0x2e>
    1320:	80 dd       	rcall	.-1280   	; 0xe22 <vPortYield>
    1322:	9e cf       	rjmp	.-196    	; 0x1260 <xQueueGenericSend+0x2e>
    1324:	c7 01       	movw	r24, r14
    1326:	d9 de       	rcall	.-590    	; 0x10da <prvUnlockQueue>
    1328:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
    132c:	99 cf       	rjmp	.-206    	; 0x1260 <xQueueGenericSend+0x2e>
    132e:	c7 01       	movw	r24, r14
    1330:	d4 de       	rcall	.-600    	; 0x10da <prvUnlockQueue>
    1332:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	29 96       	adiw	r28, 0x09	; 9
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	08 95       	ret

00001356 <prvInitialiseMutex>:
    1356:	0f 93       	push	r16
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	69 f0       	breq	.+26     	; 0x1376 <prvInitialiseMutex+0x20>
    135c:	fc 01       	movw	r30, r24
    135e:	15 82       	std	Z+5, r1	; 0x05
    1360:	14 82       	std	Z+4, r1	; 0x04
    1362:	11 82       	std	Z+1, r1	; 0x01
    1364:	10 82       	st	Z, r1
    1366:	16 82       	std	Z+6, r1	; 0x06
    1368:	00 e0       	ldi	r16, 0x00	; 0
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	5e df       	rcall	.-324    	; 0x1232 <xQueueGenericSend>
    1376:	0f 91       	pop	r16
    1378:	08 95       	ret

0000137a <xQueueCreateMutex>:
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	48 2f       	mov	r20, r24
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	33 df       	rcall	.-410    	; 0x11ec <xQueueGenericCreate>
    1386:	ec 01       	movw	r28, r24
    1388:	e6 df       	rcall	.-52     	; 0x1356 <prvInitialiseMutex>
    138a:	ce 01       	movw	r24, r28
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <xQueueGenericSendFromISR>:
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	8a 01       	movw	r16, r20
    13a0:	fc 01       	movw	r30, r24
    13a2:	56 8d       	ldd	r21, Z+30	; 0x1e
    13a4:	37 8d       	ldd	r19, Z+31	; 0x1f
    13a6:	53 17       	cp	r21, r19
    13a8:	10 f0       	brcs	.+4      	; 0x13ae <xQueueGenericSendFromISR+0x1c>
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	f9 f4       	brne	.+62     	; 0x13ec <xQueueGenericSendFromISR+0x5a>
    13ae:	42 2f       	mov	r20, r18
    13b0:	78 01       	movw	r14, r16
    13b2:	ec 01       	movw	r28, r24
    13b4:	1a a1       	ldd	r17, Y+34	; 0x22
    13b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13b8:	ce 01       	movw	r24, r28
    13ba:	16 de       	rcall	.-980    	; 0xfe8 <prvCopyDataToQueue>
    13bc:	1f 3f       	cpi	r17, 0xFF	; 255
    13be:	81 f4       	brne	.+32     	; 0x13e0 <xQueueGenericSendFromISR+0x4e>
    13c0:	8b 89       	ldd	r24, Y+19	; 0x13
    13c2:	88 23       	and	r24, r24
    13c4:	a9 f0       	breq	.+42     	; 0x13f0 <xQueueGenericSendFromISR+0x5e>
    13c6:	ce 01       	movw	r24, r28
    13c8:	43 96       	adiw	r24, 0x13	; 19
    13ca:	0e 94 1f 14 	call	0x283e	; 0x283e <xTaskRemoveFromEventList>
    13ce:	88 23       	and	r24, r24
    13d0:	89 f0       	breq	.+34     	; 0x13f4 <xQueueGenericSendFromISR+0x62>
    13d2:	e1 14       	cp	r14, r1
    13d4:	f1 04       	cpc	r15, r1
    13d6:	81 f0       	breq	.+32     	; 0x13f8 <xQueueGenericSendFromISR+0x66>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	f7 01       	movw	r30, r14
    13dc:	80 83       	st	Z, r24
    13de:	0d c0       	rjmp	.+26     	; 0x13fa <xQueueGenericSendFromISR+0x68>
    13e0:	ff 24       	eor	r15, r15
    13e2:	f3 94       	inc	r15
    13e4:	f1 0e       	add	r15, r17
    13e6:	fa a2       	std	Y+34, r15	; 0x22
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	07 c0       	rjmp	.+14     	; 0x13fa <xQueueGenericSendFromISR+0x68>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	05 c0       	rjmp	.+10     	; 0x13fa <xQueueGenericSendFromISR+0x68>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <xQueueGenericSendFromISR+0x68>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <xQueueGenericSendFromISR+0x68>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	08 95       	ret

00001408 <xQueueReceive>:
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	29 97       	sbiw	r28, 0x09	; 9
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	8c 01       	movw	r16, r24
    142a:	6b 01       	movw	r12, r22
    142c:	2e 83       	std	Y+6, r18	; 0x06
    142e:	3f 83       	std	Y+7, r19	; 0x07
    1430:	48 87       	std	Y+8, r20	; 0x08
    1432:	59 87       	std	Y+9, r21	; 0x09
    1434:	e1 2c       	mov	r14, r1
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	0f 92       	push	r0
    143c:	f8 01       	movw	r30, r16
    143e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1440:	ff 20       	and	r15, r15
    1442:	99 f0       	breq	.+38     	; 0x146a <xQueueReceive+0x62>
    1444:	b6 01       	movw	r22, r12
    1446:	c8 01       	movw	r24, r16
    1448:	2e de       	rcall	.-932    	; 0x10a6 <prvCopyDataFromQueue>
    144a:	fa 94       	dec	r15
    144c:	f8 01       	movw	r30, r16
    144e:	f6 8e       	std	Z+30, r15	; 0x1e
    1450:	80 85       	ldd	r24, Z+8	; 0x08
    1452:	88 23       	and	r24, r24
    1454:	31 f0       	breq	.+12     	; 0x1462 <xQueueReceive+0x5a>
    1456:	c8 01       	movw	r24, r16
    1458:	08 96       	adiw	r24, 0x08	; 8
    145a:	0e 94 1f 14 	call	0x283e	; 0x283e <xTaskRemoveFromEventList>
    145e:	81 11       	cpse	r24, r1
    1460:	e0 dc       	rcall	.-1600   	; 0xe22 <vPortYield>
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	4f c0       	rjmp	.+158    	; 0x1508 <xQueueReceive+0x100>
    146a:	8e 81       	ldd	r24, Y+6	; 0x06
    146c:	9f 81       	ldd	r25, Y+7	; 0x07
    146e:	a8 85       	ldd	r26, Y+8	; 0x08
    1470:	b9 85       	ldd	r27, Y+9	; 0x09
    1472:	89 2b       	or	r24, r25
    1474:	8a 2b       	or	r24, r26
    1476:	8b 2b       	or	r24, r27
    1478:	21 f4       	brne	.+8      	; 0x1482 <xQueueReceive+0x7a>
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	43 c0       	rjmp	.+134    	; 0x1508 <xQueueReceive+0x100>
    1482:	e1 10       	cpse	r14, r1
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <xQueueReceive+0x8a>
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <vTaskInternalSetTimeOutState>
    148e:	ee 24       	eor	r14, r14
    1490:	e3 94       	inc	r14
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	2f d6       	rcall	.+3166   	; 0x20f6 <vTaskSuspendAll>
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	0f 92       	push	r0
    149e:	f8 01       	movw	r30, r16
    14a0:	81 a1       	ldd	r24, Z+33	; 0x21
    14a2:	8f 3f       	cpi	r24, 0xFF	; 255
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <xQueueReceive+0xa0>
    14a6:	11 a2       	std	Z+33, r1	; 0x21
    14a8:	f8 01       	movw	r30, r16
    14aa:	82 a1       	ldd	r24, Z+34	; 0x22
    14ac:	8f 3f       	cpi	r24, 0xFF	; 255
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <xQueueReceive+0xaa>
    14b0:	12 a2       	std	Z+34, r1	; 0x22
    14b2:	0f 90       	pop	r0
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	be 01       	movw	r22, r28
    14b8:	6a 5f       	subi	r22, 0xFA	; 250
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskCheckForTimeOut>
    14c4:	81 11       	cpse	r24, r1
    14c6:	17 c0       	rjmp	.+46     	; 0x14f6 <xQueueReceive+0xee>
    14c8:	c8 01       	movw	r24, r16
    14ca:	73 dd       	rcall	.-1306   	; 0xfb2 <prvIsQueueEmpty>
    14cc:	88 23       	and	r24, r24
    14ce:	79 f0       	breq	.+30     	; 0x14ee <xQueueReceive+0xe6>
    14d0:	4e 81       	ldd	r20, Y+6	; 0x06
    14d2:	5f 81       	ldd	r21, Y+7	; 0x07
    14d4:	68 85       	ldd	r22, Y+8	; 0x08
    14d6:	79 85       	ldd	r23, Y+9	; 0x09
    14d8:	c8 01       	movw	r24, r16
    14da:	43 96       	adiw	r24, 0x13	; 19
    14dc:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <vTaskPlaceOnEventList>
    14e0:	c8 01       	movw	r24, r16
    14e2:	fb dd       	rcall	.-1034   	; 0x10da <prvUnlockQueue>
    14e4:	48 d7       	rcall	.+3728   	; 0x2376 <xTaskResumeAll>
    14e6:	81 11       	cpse	r24, r1
    14e8:	a6 cf       	rjmp	.-180    	; 0x1436 <xQueueReceive+0x2e>
    14ea:	9b dc       	rcall	.-1738   	; 0xe22 <vPortYield>
    14ec:	a4 cf       	rjmp	.-184    	; 0x1436 <xQueueReceive+0x2e>
    14ee:	c8 01       	movw	r24, r16
    14f0:	f4 dd       	rcall	.-1048   	; 0x10da <prvUnlockQueue>
    14f2:	41 d7       	rcall	.+3714   	; 0x2376 <xTaskResumeAll>
    14f4:	a0 cf       	rjmp	.-192    	; 0x1436 <xQueueReceive+0x2e>
    14f6:	c8 01       	movw	r24, r16
    14f8:	f0 dd       	rcall	.-1056   	; 0x10da <prvUnlockQueue>
    14fa:	3d d7       	rcall	.+3706   	; 0x2376 <xTaskResumeAll>
    14fc:	c8 01       	movw	r24, r16
    14fe:	59 dd       	rcall	.-1358   	; 0xfb2 <prvIsQueueEmpty>
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <xQueueReceive+0xfe>
    1504:	98 cf       	rjmp	.-208    	; 0x1436 <xQueueReceive+0x2e>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	29 96       	adiw	r28, 0x09	; 9
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	08 95       	ret

00001526 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	0f 92       	push	r0
    1532:	89 a1       	ldd	r24, Y+33	; 0x21
    1534:	8f 3f       	cpi	r24, 0xFF	; 255
    1536:	09 f4       	brne	.+2      	; 0x153a <vQueueWaitForMessageRestricted+0x14>
    1538:	19 a2       	std	Y+33, r1	; 0x21
    153a:	8a a1       	ldd	r24, Y+34	; 0x22
    153c:	8f 3f       	cpi	r24, 0xFF	; 255
    153e:	09 f4       	brne	.+2      	; 0x1542 <vQueueWaitForMessageRestricted+0x1c>
    1540:	1a a2       	std	Y+34, r1	; 0x22
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1546:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1548:	81 11       	cpse	r24, r1
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    154c:	ce 01       	movw	r24, r28
    154e:	43 96       	adiw	r24, 0x13	; 19
    1550:	0e 94 dd 13 	call	0x27ba	; 0x27ba <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1554:	ce 01       	movw	r24, r28
    1556:	c1 dd       	rcall	.-1150   	; 0x10da <prvUnlockQueue>
    }
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    155e:	fc 01       	movw	r30, r24
    1560:	44 81       	ldd	r20, Z+4	; 0x04
    1562:	55 81       	ldd	r21, Z+5	; 0x05
    1564:	22 81       	ldd	r18, Z+2	; 0x02
    1566:	33 81       	ldd	r19, Z+3	; 0x03
    1568:	24 0f       	add	r18, r20
    156a:	35 1f       	adc	r19, r21
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	b9 01       	movw	r22, r18
    1572:	68 1b       	sub	r22, r24
    1574:	79 0b       	sbc	r23, r25
    1576:	cb 01       	movw	r24, r22
    1578:	64 17       	cp	r22, r20
    157a:	75 07       	cpc	r23, r21
    157c:	10 f0       	brcs	.+4      	; 0x1582 <prvBytesInBuffer+0x24>
    157e:	84 1b       	sub	r24, r20
    1580:	95 0b       	sbc	r25, r21
    1582:	08 95       	ret

00001584 <prvInitialiseNewStreamBuffer>:
    1584:	0f 93       	push	r16
    1586:	fc 01       	movw	r30, r24
    1588:	8f e0       	ldi	r24, 0x0F	; 15
    158a:	df 01       	movw	r26, r30
    158c:	1d 92       	st	X+, r1
    158e:	8a 95       	dec	r24
    1590:	e9 f7       	brne	.-6      	; 0x158c <prvInitialiseNewStreamBuffer+0x8>
    1592:	75 87       	std	Z+13, r23	; 0x0d
    1594:	64 87       	std	Z+12, r22	; 0x0c
    1596:	55 83       	std	Z+5, r21	; 0x05
    1598:	44 83       	std	Z+4, r20	; 0x04
    159a:	37 83       	std	Z+7, r19	; 0x07
    159c:	26 83       	std	Z+6, r18	; 0x06
    159e:	06 87       	std	Z+14, r16	; 0x0e
    15a0:	0f 91       	pop	r16
    15a2:	08 95       	ret

000015a4 <prvWriteBytesToBuffer>:
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	6c 01       	movw	r12, r24
    15ba:	5b 01       	movw	r10, r22
    15bc:	7a 01       	movw	r14, r20
    15be:	fc 01       	movw	r30, r24
    15c0:	c2 81       	ldd	r28, Z+2	; 0x02
    15c2:	d3 81       	ldd	r29, Z+3	; 0x03
    15c4:	04 81       	ldd	r16, Z+4	; 0x04
    15c6:	15 81       	ldd	r17, Z+5	; 0x05
    15c8:	0c 1b       	sub	r16, r28
    15ca:	1d 0b       	sbc	r17, r29
    15cc:	40 17       	cp	r20, r16
    15ce:	51 07       	cpc	r21, r17
    15d0:	08 f4       	brcc	.+2      	; 0x15d4 <prvWriteBytesToBuffer+0x30>
    15d2:	8a 01       	movw	r16, r20
    15d4:	f6 01       	movw	r30, r12
    15d6:	84 85       	ldd	r24, Z+12	; 0x0c
    15d8:	95 85       	ldd	r25, Z+13	; 0x0d
    15da:	a8 01       	movw	r20, r16
    15dc:	b5 01       	movw	r22, r10
    15de:	8c 0f       	add	r24, r28
    15e0:	9d 1f       	adc	r25, r29
    15e2:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <memcpy>
    15e6:	0e 15       	cp	r16, r14
    15e8:	1f 05       	cpc	r17, r15
    15ea:	58 f4       	brcc	.+22     	; 0x1602 <prvWriteBytesToBuffer+0x5e>
    15ec:	a7 01       	movw	r20, r14
    15ee:	40 1b       	sub	r20, r16
    15f0:	51 0b       	sbc	r21, r17
    15f2:	b5 01       	movw	r22, r10
    15f4:	60 0f       	add	r22, r16
    15f6:	71 1f       	adc	r23, r17
    15f8:	f6 01       	movw	r30, r12
    15fa:	84 85       	ldd	r24, Z+12	; 0x0c
    15fc:	95 85       	ldd	r25, Z+13	; 0x0d
    15fe:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <memcpy>
    1602:	ce 01       	movw	r24, r28
    1604:	8e 0d       	add	r24, r14
    1606:	9f 1d       	adc	r25, r15
    1608:	f6 01       	movw	r30, r12
    160a:	24 81       	ldd	r18, Z+4	; 0x04
    160c:	35 81       	ldd	r19, Z+5	; 0x05
    160e:	82 17       	cp	r24, r18
    1610:	93 07       	cpc	r25, r19
    1612:	10 f0       	brcs	.+4      	; 0x1618 <prvWriteBytesToBuffer+0x74>
    1614:	82 1b       	sub	r24, r18
    1616:	93 0b       	sbc	r25, r19
    1618:	f6 01       	movw	r30, r12
    161a:	93 83       	std	Z+3, r25	; 0x03
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	c7 01       	movw	r24, r14
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	08 95       	ret

00001636 <prvWriteMessageToBuffer>:
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	1f 92       	push	r1
    1648:	1f 92       	push	r1
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	7c 01       	movw	r14, r24
    1650:	6b 01       	movw	r12, r22
    1652:	5a 83       	std	Y+2, r21	; 0x02
    1654:	49 83       	std	Y+1, r20	; 0x01
    1656:	21 15       	cp	r18, r1
    1658:	31 05       	cpc	r19, r1
    165a:	c1 f0       	breq	.+48     	; 0x168c <prvWriteMessageToBuffer+0x56>
    165c:	fc 01       	movw	r30, r24
    165e:	86 85       	ldd	r24, Z+14	; 0x0e
    1660:	80 fd       	sbrc	r24, 0
    1662:	08 c0       	rjmp	.+16     	; 0x1674 <prvWriteMessageToBuffer+0x3e>
    1664:	42 17       	cp	r20, r18
    1666:	53 07       	cpc	r21, r19
    1668:	08 f4       	brcc	.+2      	; 0x166c <prvWriteMessageToBuffer+0x36>
    166a:	9a 01       	movw	r18, r20
    166c:	3a 83       	std	Y+2, r19	; 0x02
    166e:	29 83       	std	Y+1, r18	; 0x01
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <prvWriteMessageToBuffer+0x5c>
    1674:	20 17       	cp	r18, r16
    1676:	31 07       	cpc	r19, r17
    1678:	58 f0       	brcs	.+22     	; 0x1690 <prvWriteMessageToBuffer+0x5a>
    167a:	42 e0       	ldi	r20, 0x02	; 2
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	be 01       	movw	r22, r28
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	c7 01       	movw	r24, r14
    1686:	8e df       	rcall	.-228    	; 0x15a4 <prvWriteBytesToBuffer>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <prvWriteMessageToBuffer+0x5c>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <prvWriteMessageToBuffer+0x5c>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	88 23       	and	r24, r24
    1694:	31 f0       	breq	.+12     	; 0x16a2 <prvWriteMessageToBuffer+0x6c>
    1696:	49 81       	ldd	r20, Y+1	; 0x01
    1698:	5a 81       	ldd	r21, Y+2	; 0x02
    169a:	b6 01       	movw	r22, r12
    169c:	c7 01       	movw	r24, r14
    169e:	82 df       	rcall	.-252    	; 0x15a4 <prvWriteBytesToBuffer>
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <prvWriteMessageToBuffer+0x70>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	08 95       	ret

000016bc <prvReadBytesFromBuffer>:
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	7c 01       	movw	r14, r24
    16d2:	5b 01       	movw	r10, r22
    16d4:	e9 01       	movw	r28, r18
    16d6:	42 17       	cp	r20, r18
    16d8:	53 07       	cpc	r21, r19
    16da:	08 f4       	brcc	.+2      	; 0x16de <prvReadBytesFromBuffer+0x22>
    16dc:	ea 01       	movw	r28, r20
    16de:	20 97       	sbiw	r28, 0x00	; 0
    16e0:	81 f1       	breq	.+96     	; 0x1742 <prvReadBytesFromBuffer+0x86>
    16e2:	f7 01       	movw	r30, r14
    16e4:	00 81       	ld	r16, Z
    16e6:	11 81       	ldd	r17, Z+1	; 0x01
    16e8:	84 81       	ldd	r24, Z+4	; 0x04
    16ea:	95 81       	ldd	r25, Z+5	; 0x05
    16ec:	80 1b       	sub	r24, r16
    16ee:	91 0b       	sbc	r25, r17
    16f0:	6e 01       	movw	r12, r28
    16f2:	8c 17       	cp	r24, r28
    16f4:	9d 07       	cpc	r25, r29
    16f6:	08 f4       	brcc	.+2      	; 0x16fa <prvReadBytesFromBuffer+0x3e>
    16f8:	6c 01       	movw	r12, r24
    16fa:	f7 01       	movw	r30, r14
    16fc:	64 85       	ldd	r22, Z+12	; 0x0c
    16fe:	75 85       	ldd	r23, Z+13	; 0x0d
    1700:	60 0f       	add	r22, r16
    1702:	71 1f       	adc	r23, r17
    1704:	a6 01       	movw	r20, r12
    1706:	c5 01       	movw	r24, r10
    1708:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <memcpy>
    170c:	cc 16       	cp	r12, r28
    170e:	dd 06       	cpc	r13, r29
    1710:	58 f4       	brcc	.+22     	; 0x1728 <prvReadBytesFromBuffer+0x6c>
    1712:	ae 01       	movw	r20, r28
    1714:	4c 19       	sub	r20, r12
    1716:	5d 09       	sbc	r21, r13
    1718:	f7 01       	movw	r30, r14
    171a:	64 85       	ldd	r22, Z+12	; 0x0c
    171c:	75 85       	ldd	r23, Z+13	; 0x0d
    171e:	c5 01       	movw	r24, r10
    1720:	8c 0d       	add	r24, r12
    1722:	9d 1d       	adc	r25, r13
    1724:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <memcpy>
    1728:	0c 0f       	add	r16, r28
    172a:	1d 1f       	adc	r17, r29
    172c:	f7 01       	movw	r30, r14
    172e:	84 81       	ldd	r24, Z+4	; 0x04
    1730:	95 81       	ldd	r25, Z+5	; 0x05
    1732:	08 17       	cp	r16, r24
    1734:	19 07       	cpc	r17, r25
    1736:	10 f0       	brcs	.+4      	; 0x173c <prvReadBytesFromBuffer+0x80>
    1738:	08 1b       	sub	r16, r24
    173a:	19 0b       	sbc	r17, r25
    173c:	f7 01       	movw	r30, r14
    173e:	11 83       	std	Z+1, r17	; 0x01
    1740:	00 83       	st	Z, r16
    1742:	ce 01       	movw	r24, r28
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	cf 90       	pop	r12
    1754:	bf 90       	pop	r11
    1756:	af 90       	pop	r10
    1758:	08 95       	ret

0000175a <prvReadMessageFromBuffer>:
    175a:	6f 92       	push	r6
    175c:	7f 92       	push	r7
    175e:	8f 92       	push	r8
    1760:	9f 92       	push	r9
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	1f 92       	push	r1
    1778:	1f 92       	push	r1
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	6c 01       	movw	r12, r24
    1780:	4b 01       	movw	r8, r22
    1782:	5a 01       	movw	r10, r20
    1784:	79 01       	movw	r14, r18
    1786:	01 15       	cp	r16, r1
    1788:	11 05       	cpc	r17, r1
    178a:	b1 f0       	breq	.+44     	; 0x17b8 <prvReadMessageFromBuffer+0x5e>
    178c:	fc 01       	movw	r30, r24
    178e:	60 80       	ld	r6, Z
    1790:	71 80       	ldd	r7, Z+1	; 0x01
    1792:	a8 01       	movw	r20, r16
    1794:	be 01       	movw	r22, r28
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	90 df       	rcall	.-224    	; 0x16bc <prvReadBytesFromBuffer>
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	e0 1a       	sub	r14, r16
    17a2:	f1 0a       	sbc	r15, r17
    17a4:	a8 16       	cp	r10, r24
    17a6:	b9 06       	cpc	r11, r25
    17a8:	30 f4       	brcc	.+12     	; 0x17b6 <prvReadMessageFromBuffer+0x5c>
    17aa:	f6 01       	movw	r30, r12
    17ac:	71 82       	std	Z+1, r7	; 0x01
    17ae:	60 82       	st	Z, r6
    17b0:	a1 2c       	mov	r10, r1
    17b2:	b1 2c       	mov	r11, r1
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <prvReadMessageFromBuffer+0x5e>
    17b6:	5c 01       	movw	r10, r24
    17b8:	97 01       	movw	r18, r14
    17ba:	a5 01       	movw	r20, r10
    17bc:	b4 01       	movw	r22, r8
    17be:	c6 01       	movw	r24, r12
    17c0:	7d df       	rcall	.-262    	; 0x16bc <prvReadBytesFromBuffer>
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	bf 90       	pop	r11
    17d8:	af 90       	pop	r10
    17da:	9f 90       	pop	r9
    17dc:	8f 90       	pop	r8
    17de:	7f 90       	pop	r7
    17e0:	6f 90       	pop	r6
    17e2:	08 95       	ret

000017e4 <xStreamBufferGenericCreate>:
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
    17f4:	6b 01       	movw	r12, r22
    17f6:	41 30       	cpi	r20, 0x01	; 1
    17f8:	11 f4       	brne	.+4      	; 0x17fe <xStreamBufferGenericCreate+0x1a>
    17fa:	01 e0       	ldi	r16, 0x01	; 1
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <xStreamBufferGenericCreate+0x1c>
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	c1 14       	cp	r12, r1
    1802:	d1 04       	cpc	r13, r1
    1804:	19 f4       	brne	.+6      	; 0x180c <xStreamBufferGenericCreate+0x28>
    1806:	cc 24       	eor	r12, r12
    1808:	c3 94       	inc	r12
    180a:	d1 2c       	mov	r13, r1
    180c:	ce 01       	movw	r24, r28
    180e:	40 96       	adiw	r24, 0x10	; 16
    1810:	c8 17       	cp	r28, r24
    1812:	d9 07       	cpc	r29, r25
    1814:	20 f4       	brcc	.+8      	; 0x181e <xStreamBufferGenericCreate+0x3a>
    1816:	21 96       	adiw	r28, 0x01	; 1
    1818:	50 d9       	rcall	.-3424   	; 0xaba <pvPortMalloc>
    181a:	7c 01       	movw	r14, r24
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <xStreamBufferGenericCreate+0x3e>
    181e:	e1 2c       	mov	r14, r1
    1820:	f1 2c       	mov	r15, r1
    1822:	e1 14       	cp	r14, r1
    1824:	f1 04       	cpc	r15, r1
    1826:	39 f0       	breq	.+14     	; 0x1836 <xStreamBufferGenericCreate+0x52>
    1828:	96 01       	movw	r18, r12
    182a:	ae 01       	movw	r20, r28
    182c:	b7 01       	movw	r22, r14
    182e:	61 5f       	subi	r22, 0xF1	; 241
    1830:	7f 4f       	sbci	r23, 0xFF	; 255
    1832:	c7 01       	movw	r24, r14
    1834:	a7 de       	rcall	.-690    	; 0x1584 <prvInitialiseNewStreamBuffer>
    1836:	c7 01       	movw	r24, r14
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	08 95       	ret

00001848 <xStreamBufferReset>:
    1848:	0f 93       	push	r16
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	0f 92       	push	r0
    1850:	fc 01       	movw	r30, r24
    1852:	20 85       	ldd	r18, Z+8	; 0x08
    1854:	31 85       	ldd	r19, Z+9	; 0x09
    1856:	23 2b       	or	r18, r19
    1858:	71 f4       	brne	.+28     	; 0x1876 <xStreamBufferReset+0x2e>
    185a:	22 85       	ldd	r18, Z+10	; 0x0a
    185c:	33 85       	ldd	r19, Z+11	; 0x0b
    185e:	23 2b       	or	r18, r19
    1860:	61 f4       	brne	.+24     	; 0x187a <xStreamBufferReset+0x32>
    1862:	26 81       	ldd	r18, Z+6	; 0x06
    1864:	37 81       	ldd	r19, Z+7	; 0x07
    1866:	44 81       	ldd	r20, Z+4	; 0x04
    1868:	55 81       	ldd	r21, Z+5	; 0x05
    186a:	64 85       	ldd	r22, Z+12	; 0x0c
    186c:	75 85       	ldd	r23, Z+13	; 0x0d
    186e:	06 85       	ldd	r16, Z+14	; 0x0e
    1870:	89 de       	rcall	.-750    	; 0x1584 <prvInitialiseNewStreamBuffer>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	03 c0       	rjmp	.+6      	; 0x187c <xStreamBufferReset+0x34>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	01 c0       	rjmp	.+2      	; 0x187c <xStreamBufferReset+0x34>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 91       	pop	r16
    1882:	08 95       	ret

00001884 <xStreamBufferSpacesAvailable>:
    1884:	fc 01       	movw	r30, r24
    1886:	24 81       	ldd	r18, Z+4	; 0x04
    1888:	35 81       	ldd	r19, Z+5	; 0x05
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	82 0f       	add	r24, r18
    1890:	93 1f       	adc	r25, r19
    1892:	42 81       	ldd	r20, Z+2	; 0x02
    1894:	53 81       	ldd	r21, Z+3	; 0x03
    1896:	84 1b       	sub	r24, r20
    1898:	95 0b       	sbc	r25, r21
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	82 17       	cp	r24, r18
    189e:	93 07       	cpc	r25, r19
    18a0:	10 f0       	brcs	.+4      	; 0x18a6 <xStreamBufferSpacesAvailable+0x22>
    18a2:	82 1b       	sub	r24, r18
    18a4:	93 0b       	sbc	r25, r19
    18a6:	08 95       	ret

000018a8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    18a8:	2f 92       	push	r2
    18aa:	3f 92       	push	r3
    18ac:	4f 92       	push	r4
    18ae:	5f 92       	push	r5
    18b0:	6f 92       	push	r6
    18b2:	7f 92       	push	r7
    18b4:	8f 92       	push	r8
    18b6:	9f 92       	push	r9
    18b8:	af 92       	push	r10
    18ba:	bf 92       	push	r11
    18bc:	cf 92       	push	r12
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	2b 97       	sbiw	r28, 0x0b	; 11
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	4c 01       	movw	r8, r24
    18de:	7b 87       	std	Y+11, r23	; 0x0b
    18e0:	6a 87       	std	Y+10, r22	; 0x0a
    18e2:	1a 01       	movw	r2, r20
    18e4:	0e 83       	std	Y+6, r16	; 0x06
    18e6:	1f 83       	std	Y+7, r17	; 0x07
    18e8:	28 87       	std	Y+8, r18	; 0x08
    18ea:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    18ec:	fc 01       	movw	r30, r24
    18ee:	84 81       	ldd	r24, Z+4	; 0x04
    18f0:	95 81       	ldd	r25, Z+5	; 0x05
    18f2:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18f4:	26 85       	ldd	r18, Z+14	; 0x0e
    18f6:	20 ff       	sbrs	r18, 0
    18f8:	0c c0       	rjmp	.+24     	; 0x1912 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18fa:	2a 01       	movw	r4, r20
    18fc:	f2 e0       	ldi	r31, 0x02	; 2
    18fe:	4f 0e       	add	r4, r31
    1900:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1902:	84 15       	cp	r24, r4
    1904:	95 05       	cpc	r25, r5
    1906:	58 f4       	brcc	.+22     	; 0x191e <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1908:	1e 82       	std	Y+6, r1	; 0x06
    190a:	1f 82       	std	Y+7, r1	; 0x07
    190c:	18 86       	std	Y+8, r1	; 0x08
    190e:	19 86       	std	Y+9, r1	; 0x09
    1910:	06 c0       	rjmp	.+12     	; 0x191e <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1912:	84 17       	cp	r24, r20
    1914:	95 07       	cpc	r25, r21
    1916:	10 f0       	brcs	.+4      	; 0x191c <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1918:	2a 01       	movw	r4, r20
    191a:	01 c0       	rjmp	.+2      	; 0x191e <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    191c:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    191e:	8e 81       	ldd	r24, Y+6	; 0x06
    1920:	9f 81       	ldd	r25, Y+7	; 0x07
    1922:	a8 85       	ldd	r26, Y+8	; 0x08
    1924:	b9 85       	ldd	r27, Y+9	; 0x09
    1926:	89 2b       	or	r24, r25
    1928:	8a 2b       	or	r24, r26
    192a:	8b 2b       	or	r24, r27
    192c:	09 f4       	brne	.+2      	; 0x1930 <xStreamBufferSend+0x88>
    192e:	38 c0       	rjmp	.+112    	; 0x19a0 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1930:	ce 01       	movw	r24, r28
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    193e:	c4 01       	movw	r24, r8
    1940:	a1 df       	rcall	.-190    	; 0x1884 <xStreamBufferSpacesAvailable>
    1942:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1944:	84 15       	cp	r24, r4
    1946:	95 05       	cpc	r25, r5
    1948:	40 f5       	brcc	.+80     	; 0x199a <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 51 19 	call	0x32a2	; 0x32a2 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1954:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <xTaskGetCurrentTaskHandle>
    1958:	f4 01       	movw	r30, r8
    195a:	93 87       	std	Z+11, r25	; 0x0b
    195c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1962:	ae 80       	ldd	r10, Y+6	; 0x06
    1964:	bf 80       	ldd	r11, Y+7	; 0x07
    1966:	c8 84       	ldd	r12, Y+8	; 0x08
    1968:	d9 84       	ldd	r13, Y+9	; 0x09
    196a:	e1 2c       	mov	r14, r1
    196c:	f1 2c       	mov	r15, r1
    196e:	00 e0       	ldi	r16, 0x00	; 0
    1970:	10 e0       	ldi	r17, 0x00	; 0
    1972:	98 01       	movw	r18, r16
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	ba 01       	movw	r22, r20
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1980:	f4 01       	movw	r30, r8
    1982:	13 86       	std	Z+11, r1	; 0x0b
    1984:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1986:	be 01       	movw	r22, r28
    1988:	6a 5f       	subi	r22, 0xFA	; 250
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <xTaskCheckForTimeOut>
    1994:	88 23       	and	r24, r24
    1996:	81 f2       	breq	.-96     	; 0x1938 <xStreamBufferSend+0x90>
    1998:	05 c0       	rjmp	.+10     	; 0x19a4 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
                    break;
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    19a0:	61 2c       	mov	r6, r1
    19a2:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    19a4:	61 14       	cp	r6, r1
    19a6:	71 04       	cpc	r7, r1
    19a8:	19 f4       	brne	.+6      	; 0x19b0 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19aa:	c4 01       	movw	r24, r8
    19ac:	6b df       	rcall	.-298    	; 0x1884 <xStreamBufferSpacesAvailable>
    19ae:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    19b0:	82 01       	movw	r16, r4
    19b2:	93 01       	movw	r18, r6
    19b4:	a1 01       	movw	r20, r2
    19b6:	6a 85       	ldd	r22, Y+10	; 0x0a
    19b8:	7b 85       	ldd	r23, Y+11	; 0x0b
    19ba:	c4 01       	movw	r24, r8
    19bc:	3c de       	rcall	.-904    	; 0x1636 <prvWriteMessageToBuffer>
    19be:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    19c0:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    19c2:	e9 f0       	breq	.+58     	; 0x19fe <xStreamBufferSend+0x156>
    19c4:	c4 01       	movw	r24, r8
    19c6:	cb dd       	rcall	.-1130   	; 0x155e <prvBytesInBuffer>
    19c8:	f4 01       	movw	r30, r8
    19ca:	26 81       	ldd	r18, Z+6	; 0x06
    19cc:	37 81       	ldd	r19, Z+7	; 0x07
    19ce:	82 17       	cp	r24, r18
    19d0:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    19d2:	a8 f0       	brcs	.+42     	; 0x19fe <xStreamBufferSend+0x156>
    19d4:	90 d3       	rcall	.+1824   	; 0x20f6 <vTaskSuspendAll>
    19d6:	f4 01       	movw	r30, r8
    19d8:	80 85       	ldd	r24, Z+8	; 0x08
    19da:	91 85       	ldd	r25, Z+9	; 0x09
    19dc:	89 2b       	or	r24, r25
    19de:	71 f0       	breq	.+28     	; 0x19fc <xStreamBufferSend+0x154>
    19e0:	80 85       	ldd	r24, Z+8	; 0x08
    19e2:	91 85       	ldd	r25, Z+9	; 0x09
    19e4:	e1 2c       	mov	r14, r1
    19e6:	f1 2c       	mov	r15, r1
    19e8:	00 e0       	ldi	r16, 0x00	; 0
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <xTaskGenericNotify>
    19f6:	f4 01       	movw	r30, r8
    19f8:	11 86       	std	Z+9, r1	; 0x09
    19fa:	10 86       	std	Z+8, r1	; 0x08
    19fc:	bc d4       	rcall	.+2424   	; 0x2376 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    19fe:	c6 01       	movw	r24, r12
    1a00:	2b 96       	adiw	r28, 0x0b	; 11
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	af 90       	pop	r10
    1a20:	9f 90       	pop	r9
    1a22:	8f 90       	pop	r8
    1a24:	7f 90       	pop	r7
    1a26:	6f 90       	pop	r6
    1a28:	5f 90       	pop	r5
    1a2a:	4f 90       	pop	r4
    1a2c:	3f 90       	pop	r3
    1a2e:	2f 90       	pop	r2
    1a30:	08 95       	ret

00001a32 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1a32:	af 92       	push	r10
    1a34:	bf 92       	push	r11
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	ec 01       	movw	r28, r24
    1a48:	7b 01       	movw	r14, r22
    1a4a:	5a 01       	movw	r10, r20
    1a4c:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a50:	80 ff       	sbrs	r24, 0
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a54:	8a 01       	movw	r16, r20
    1a56:	0e 5f       	subi	r16, 0xFE	; 254
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1a5c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a5e:	ce 01       	movw	r24, r28
    1a60:	11 df       	rcall	.-478    	; 0x1884 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a62:	9c 01       	movw	r18, r24
    1a64:	a5 01       	movw	r20, r10
    1a66:	b7 01       	movw	r22, r14
    1a68:	ce 01       	movw	r24, r28
    1a6a:	e5 dd       	rcall	.-1078   	; 0x1636 <prvWriteMessageToBuffer>
    1a6c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1a6e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a70:	c1 f0       	breq	.+48     	; 0x1aa2 <xStreamBufferSendFromISR+0x70>
    1a72:	ce 01       	movw	r24, r28
    1a74:	74 dd       	rcall	.-1304   	; 0x155e <prvBytesInBuffer>
    1a76:	2e 81       	ldd	r18, Y+6	; 0x06
    1a78:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7a:	82 17       	cp	r24, r18
    1a7c:	93 07       	cpc	r25, r19
    1a7e:	88 f0       	brcs	.+34     	; 0x1aa2 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1a80:	88 85       	ldd	r24, Y+8	; 0x08
    1a82:	99 85       	ldd	r25, Y+9	; 0x09
    1a84:	89 2b       	or	r24, r25
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <xStreamBufferSendFromISR+0x70>
    1a88:	88 85       	ldd	r24, Y+8	; 0x08
    1a8a:	99 85       	ldd	r25, Y+9	; 0x09
    1a8c:	e1 2c       	mov	r14, r1
    1a8e:	f1 2c       	mov	r15, r1
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	a9 01       	movw	r20, r18
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	0e 94 2f 18 	call	0x305e	; 0x305e <xTaskGenericNotifyFromISR>
    1a9e:	19 86       	std	Y+9, r1	; 0x09
    1aa0:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1aa2:	c5 01       	movw	r24, r10
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	bf 90       	pop	r11
    1ab6:	af 90       	pop	r10
    1ab8:	08 95       	ret

00001aba <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1aba:	4f 92       	push	r4
    1abc:	5f 92       	push	r5
    1abe:	6f 92       	push	r6
    1ac0:	7f 92       	push	r7
    1ac2:	8f 92       	push	r8
    1ac4:	9f 92       	push	r9
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	ec 01       	movw	r28, r24
    1adc:	2b 01       	movw	r4, r22
    1ade:	3a 01       	movw	r6, r20
    1ae0:	58 01       	movw	r10, r16
    1ae2:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ae4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae6:	80 ff       	sbrs	r24, 0
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1aea:	68 94       	set
    1aec:	88 24       	eor	r8, r8
    1aee:	81 f8       	bld	r8, 1
    1af0:	91 2c       	mov	r9, r1
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1af4:	81 2c       	mov	r8, r1
    1af6:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1af8:	a1 14       	cp	r10, r1
    1afa:	b1 04       	cpc	r11, r1
    1afc:	c1 04       	cpc	r12, r1
    1afe:	d1 04       	cpc	r13, r1
    1b00:	41 f1       	breq	.+80     	; 0x1b52 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b08:	ce 01       	movw	r24, r28
    1b0a:	29 dd       	rcall	.-1454   	; 0x155e <prvBytesInBuffer>
    1b0c:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1b0e:	88 16       	cp	r8, r24
    1b10:	99 06       	cpc	r9, r25
    1b12:	48 f0       	brcs	.+18     	; 0x1b26 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1b1e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <xTaskGetCurrentTaskHandle>
    1b22:	99 87       	std	Y+9, r25	; 0x09
    1b24:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1b2a:	8e 14       	cp	r8, r14
    1b2c:	9f 04       	cpc	r9, r15
    1b2e:	a0 f0       	brcs	.+40     	; 0x1b58 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1b30:	e1 2c       	mov	r14, r1
    1b32:	f1 2c       	mov	r15, r1
    1b34:	00 e0       	ldi	r16, 0x00	; 0
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	98 01       	movw	r18, r16
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	ba 01       	movw	r22, r20
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1b46:	19 86       	std	Y+9, r1	; 0x09
    1b48:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	08 dd       	rcall	.-1520   	; 0x155e <prvBytesInBuffer>
    1b4e:	7c 01       	movw	r14, r24
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b52:	ce 01       	movw	r24, r28
    1b54:	04 dd       	rcall	.-1528   	; 0x155e <prvBytesInBuffer>
    1b56:	7c 01       	movw	r14, r24
    1b58:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1b5a:	9f 04       	cpc	r9, r15
    1b5c:	e8 f4       	brcc	.+58     	; 0x1b98 <xStreamBufferReceive+0xde>
    1b5e:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1b60:	97 01       	movw	r18, r14
    1b62:	a3 01       	movw	r20, r6
    1b64:	b2 01       	movw	r22, r4
    1b66:	ce 01       	movw	r24, r28
    1b68:	f8 dd       	rcall	.-1040   	; 0x175a <prvReadMessageFromBuffer>
    1b6a:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1b6c:	89 2b       	or	r24, r25
    1b6e:	b1 f0       	breq	.+44     	; 0x1b9c <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1b70:	c2 d2       	rcall	.+1412   	; 0x20f6 <vTaskSuspendAll>
    1b72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b76:	89 2b       	or	r24, r25
    1b78:	69 f0       	breq	.+26     	; 0x1b94 <xStreamBufferReceive+0xda>
    1b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b7e:	e1 2c       	mov	r14, r1
    1b80:	f1 2c       	mov	r15, r1
    1b82:	00 e0       	ldi	r16, 0x00	; 0
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	a9 01       	movw	r20, r18
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	0e 94 38 17 	call	0x2e70	; 0x2e70 <xTaskGenericNotify>
    1b90:	1b 86       	std	Y+11, r1	; 0x0b
    1b92:	1a 86       	std	Y+10, r1	; 0x0a
    1b94:	f0 d3       	rcall	.+2016   	; 0x2376 <xTaskResumeAll>
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <xStreamBufferReceive+0xe2>
    1b98:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1b9a:	d1 2c       	mov	r13, r1
    1b9c:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	9f 90       	pop	r9
    1bb4:	8f 90       	pop	r8
    1bb6:	7f 90       	pop	r7
    1bb8:	6f 90       	pop	r6
    1bba:	5f 90       	pop	r5
    1bbc:	4f 90       	pop	r4
    1bbe:	08 95       	ret

00001bc0 <prvResetNextTaskUnblockTime>:
    1bc0:	e0 91 d1 10 	lds	r30, 0x10D1	; 0x8010d1 <pxDelayedTaskList>
    1bc4:	f0 91 d2 10 	lds	r31, 0x10D2	; 0x8010d2 <pxDelayedTaskList+0x1>
    1bc8:	80 81       	ld	r24, Z
    1bca:	81 11       	cpse	r24, r1
    1bcc:	0c c0       	rjmp	.+24     	; 0x1be6 <prvResetNextTaskUnblockTime+0x26>
    1bce:	8f ef       	ldi	r24, 0xFF	; 255
    1bd0:	9f ef       	ldi	r25, 0xFF	; 255
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	80 93 9b 10 	sts	0x109B, r24	; 0x80109b <xNextTaskUnblockTime>
    1bd8:	90 93 9c 10 	sts	0x109C, r25	; 0x80109c <xNextTaskUnblockTime+0x1>
    1bdc:	a0 93 9d 10 	sts	0x109D, r26	; 0x80109d <xNextTaskUnblockTime+0x2>
    1be0:	b0 93 9e 10 	sts	0x109E, r27	; 0x80109e <xNextTaskUnblockTime+0x3>
    1be4:	08 95       	ret
    1be6:	e0 91 d1 10 	lds	r30, 0x10D1	; 0x8010d1 <pxDelayedTaskList>
    1bea:	f0 91 d2 10 	lds	r31, 0x10D2	; 0x8010d2 <pxDelayedTaskList+0x1>
    1bee:	07 80       	ldd	r0, Z+7	; 0x07
    1bf0:	f0 85       	ldd	r31, Z+8	; 0x08
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	91 81       	ldd	r25, Z+1	; 0x01
    1bf8:	a2 81       	ldd	r26, Z+2	; 0x02
    1bfa:	b3 81       	ldd	r27, Z+3	; 0x03
    1bfc:	80 93 9b 10 	sts	0x109B, r24	; 0x80109b <xNextTaskUnblockTime>
    1c00:	90 93 9c 10 	sts	0x109C, r25	; 0x80109c <xNextTaskUnblockTime+0x1>
    1c04:	a0 93 9d 10 	sts	0x109D, r26	; 0x80109d <xNextTaskUnblockTime+0x2>
    1c08:	b0 93 9e 10 	sts	0x109E, r27	; 0x80109e <xNextTaskUnblockTime+0x3>
    1c0c:	08 95       	ret

00001c0e <prvDeleteTCB>:
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	ec 01       	movw	r28, r24
    1c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c18:	0e 94 06 06 	call	0xc0c	; 0xc0c <vPortFree>
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	0e 94 06 06 	call	0xc0c	; 0xc0c <vPortFree>
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <prvInitialiseNewTask>:
    1c28:	4f 92       	push	r4
    1c2a:	5f 92       	push	r5
    1c2c:	6f 92       	push	r6
    1c2e:	7f 92       	push	r7
    1c30:	8f 92       	push	r8
    1c32:	9f 92       	push	r9
    1c34:	af 92       	push	r10
    1c36:	bf 92       	push	r11
    1c38:	cf 92       	push	r12
    1c3a:	df 92       	push	r13
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	2c 01       	movw	r4, r24
    1c48:	5b 01       	movw	r10, r22
    1c4a:	4a 01       	movw	r8, r20
    1c4c:	39 01       	movw	r6, r18
    1c4e:	e6 01       	movw	r28, r12
    1c50:	65 ea       	ldi	r22, 0xA5	; 165
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c58:	0e 94 50 2f 	call	0x5ea0	; 0x5ea0 <memset>
    1c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c60:	21 e0       	ldi	r18, 0x01	; 1
    1c62:	82 1a       	sub	r8, r18
    1c64:	91 08       	sbc	r9, r1
    1c66:	88 0e       	add	r8, r24
    1c68:	99 1e       	adc	r9, r25
    1c6a:	a1 14       	cp	r10, r1
    1c6c:	b1 04       	cpc	r11, r1
    1c6e:	89 f4       	brne	.+34     	; 0x1c92 <prvInitialiseNewTask+0x6a>
    1c70:	15 c0       	rjmp	.+42     	; 0x1c9c <prvInitialiseNewTask+0x74>
    1c72:	82 2f       	mov	r24, r18
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	f5 01       	movw	r30, r10
    1c78:	e8 0f       	add	r30, r24
    1c7a:	f9 1f       	adc	r31, r25
    1c7c:	30 81       	ld	r19, Z
    1c7e:	de 01       	movw	r26, r28
    1c80:	a8 0f       	add	r26, r24
    1c82:	b9 1f       	adc	r27, r25
    1c84:	5d 96       	adiw	r26, 0x1d	; 29
    1c86:	3c 93       	st	X, r19
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 23       	and	r24, r24
    1c8c:	29 f0       	breq	.+10     	; 0x1c98 <prvInitialiseNewTask+0x70>
    1c8e:	2f 5f       	subi	r18, 0xFF	; 255
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <prvInitialiseNewTask+0x6c>
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	20 31       	cpi	r18, 0x10	; 16
    1c96:	68 f3       	brcs	.-38     	; 0x1c72 <prvInitialiseNewTask+0x4a>
    1c98:	1c a6       	std	Y+44, r1	; 0x2c
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <prvInitialiseNewTask+0x76>
    1c9c:	1d 8e       	std	Y+29, r1	; 0x1d
    1c9e:	0a 30       	cpi	r16, 0x0A	; 10
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <prvInitialiseNewTask+0x7c>
    1ca2:	09 e0       	ldi	r16, 0x09	; 9
    1ca4:	0a 8f       	std	Y+26, r16	; 0x1a
    1ca6:	0d a7       	std	Y+45, r16	; 0x2d
    1ca8:	1e a6       	std	Y+46, r1	; 0x2e
    1caa:	ce 01       	movw	r24, r28
    1cac:	02 96       	adiw	r24, 0x02	; 2
    1cae:	0e 94 54 06 	call	0xca8	; 0xca8 <vListInitialiseItem>
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	0e 96       	adiw	r24, 0x0e	; 14
    1cb6:	0e 94 54 06 	call	0xca8	; 0xca8 <vListInitialiseItem>
    1cba:	db 87       	std	Y+11, r29	; 0x0b
    1cbc:	ca 87       	std	Y+10, r28	; 0x0a
    1cbe:	8a e0       	ldi	r24, 0x0A	; 10
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e0       	ldi	r26, 0x00	; 0
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	80 1b       	sub	r24, r16
    1cc8:	91 09       	sbc	r25, r1
    1cca:	a1 09       	sbc	r26, r1
    1ccc:	b1 09       	sbc	r27, r1
    1cce:	8e 87       	std	Y+14, r24	; 0x0e
    1cd0:	9f 87       	std	Y+15, r25	; 0x0f
    1cd2:	a8 8b       	std	Y+16, r26	; 0x10
    1cd4:	b9 8b       	std	Y+17, r27	; 0x11
    1cd6:	df 8b       	std	Y+23, r29	; 0x17
    1cd8:	ce 8b       	std	Y+22, r28	; 0x16
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	fe 01       	movw	r30, r28
    1cde:	bf 96       	adiw	r30, 0x2f	; 47
    1ce0:	df 01       	movw	r26, r30
    1ce2:	1d 92       	st	X+, r1
    1ce4:	8a 95       	dec	r24
    1ce6:	e9 f7       	brne	.-6      	; 0x1ce2 <prvInitialiseNewTask+0xba>
    1ce8:	1b aa       	std	Y+51, r1	; 0x33
    1cea:	a3 01       	movw	r20, r6
    1cec:	b2 01       	movw	r22, r4
    1cee:	c4 01       	movw	r24, r8
    1cf0:	4f d8       	rcall	.-3938   	; 0xd90 <pxPortInitialiseStack>
    1cf2:	99 83       	std	Y+1, r25	; 0x01
    1cf4:	88 83       	st	Y, r24
    1cf6:	e1 14       	cp	r14, r1
    1cf8:	f1 04       	cpc	r15, r1
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <prvInitialiseNewTask+0xda>
    1cfc:	f7 01       	movw	r30, r14
    1cfe:	d1 83       	std	Z+1, r29	; 0x01
    1d00:	c0 83       	st	Z, r28
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	7f 90       	pop	r7
    1d1a:	6f 90       	pop	r6
    1d1c:	5f 90       	pop	r5
    1d1e:	4f 90       	pop	r4
    1d20:	08 95       	ret

00001d22 <prvInitialiseTaskLists>:
    1d22:	cf 93       	push	r28
    1d24:	c0 e0       	ldi	r28, 0x00	; 0
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <prvInitialiseTaskLists+0x18>
    1d28:	2b e0       	ldi	r18, 0x0B	; 11
    1d2a:	c2 9f       	mul	r28, r18
    1d2c:	c0 01       	movw	r24, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	87 51       	subi	r24, 0x17	; 23
    1d32:	9f 4e       	sbci	r25, 0xEF	; 239
    1d34:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    1d38:	cf 5f       	subi	r28, 0xFF	; 255
    1d3a:	ca 30       	cpi	r28, 0x0A	; 10
    1d3c:	a8 f3       	brcs	.-22     	; 0x1d28 <prvInitialiseTaskLists+0x6>
    1d3e:	8e ed       	ldi	r24, 0xDE	; 222
    1d40:	90 e1       	ldi	r25, 0x10	; 16
    1d42:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    1d46:	83 ed       	ldi	r24, 0xD3	; 211
    1d48:	90 e1       	ldi	r25, 0x10	; 16
    1d4a:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    1d4e:	84 ec       	ldi	r24, 0xC4	; 196
    1d50:	90 e1       	ldi	r25, 0x10	; 16
    1d52:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    1d56:	89 eb       	ldi	r24, 0xB9	; 185
    1d58:	90 e1       	ldi	r25, 0x10	; 16
    1d5a:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    1d5e:	8d ea       	ldi	r24, 0xAD	; 173
    1d60:	90 e1       	ldi	r25, 0x10	; 16
    1d62:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    1d66:	8e ed       	ldi	r24, 0xDE	; 222
    1d68:	90 e1       	ldi	r25, 0x10	; 16
    1d6a:	90 93 d2 10 	sts	0x10D2, r25	; 0x8010d2 <pxDelayedTaskList+0x1>
    1d6e:	80 93 d1 10 	sts	0x10D1, r24	; 0x8010d1 <pxDelayedTaskList>
    1d72:	83 ed       	ldi	r24, 0xD3	; 211
    1d74:	90 e1       	ldi	r25, 0x10	; 16
    1d76:	90 93 d0 10 	sts	0x10D0, r25	; 0x8010d0 <pxOverflowDelayedTaskList+0x1>
    1d7a:	80 93 cf 10 	sts	0x10CF, r24	; 0x8010cf <pxOverflowDelayedTaskList>
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <prvAddNewTaskToReadyList>:
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	ec 01       	movw	r28, r24
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	0f 92       	push	r0
    1d8e:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <uxCurrentNumberOfTasks>
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	80 93 ac 10 	sts	0x10AC, r24	; 0x8010ac <uxCurrentNumberOfTasks>
    1d98:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    1d9c:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1da0:	89 2b       	or	r24, r25
    1da2:	51 f4       	brne	.+20     	; 0x1db8 <prvAddNewTaskToReadyList+0x36>
    1da4:	d0 93 58 11 	sts	0x1158, r29	; 0x801158 <pxCurrentTCB+0x1>
    1da8:	c0 93 57 11 	sts	0x1157, r28	; 0x801157 <pxCurrentTCB>
    1dac:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <uxCurrentNumberOfTasks>
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	91 f4       	brne	.+36     	; 0x1dd8 <prvAddNewTaskToReadyList+0x56>
    1db4:	b6 df       	rcall	.-148    	; 0x1d22 <prvInitialiseTaskLists>
    1db6:	10 c0       	rjmp	.+32     	; 0x1dd8 <prvAddNewTaskToReadyList+0x56>
    1db8:	80 91 a6 10 	lds	r24, 0x10A6	; 0x8010a6 <xSchedulerRunning>
    1dbc:	81 11       	cpse	r24, r1
    1dbe:	0c c0       	rjmp	.+24     	; 0x1dd8 <prvAddNewTaskToReadyList+0x56>
    1dc0:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    1dc4:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1dc8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dcc:	89 17       	cp	r24, r25
    1dce:	20 f0       	brcs	.+8      	; 0x1dd8 <prvAddNewTaskToReadyList+0x56>
    1dd0:	d0 93 58 11 	sts	0x1158, r29	; 0x801158 <pxCurrentTCB+0x1>
    1dd4:	c0 93 57 11 	sts	0x1157, r28	; 0x801157 <pxCurrentTCB>
    1dd8:	80 91 9f 10 	lds	r24, 0x109F	; 0x80109f <uxTaskNumber>
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	80 93 9f 10 	sts	0x109F, r24	; 0x80109f <uxTaskNumber>
    1de2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1de4:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    1de8:	8e 17       	cp	r24, r30
    1dea:	10 f4       	brcc	.+4      	; 0x1df0 <prvAddNewTaskToReadyList+0x6e>
    1dec:	e0 93 a7 10 	sts	0x10A7, r30	; 0x8010a7 <uxTopReadyPriority>
    1df0:	8b e0       	ldi	r24, 0x0B	; 11
    1df2:	8e 9f       	mul	r24, r30
    1df4:	f0 01       	movw	r30, r0
    1df6:	11 24       	eor	r1, r1
    1df8:	e7 51       	subi	r30, 0x17	; 23
    1dfa:	ff 4e       	sbci	r31, 0xEF	; 239
    1dfc:	01 80       	ldd	r0, Z+1	; 0x01
    1dfe:	f2 81       	ldd	r31, Z+2	; 0x02
    1e00:	e0 2d       	mov	r30, r0
    1e02:	ff 83       	std	Y+7, r31	; 0x07
    1e04:	ee 83       	std	Y+6, r30	; 0x06
    1e06:	26 81       	ldd	r18, Z+6	; 0x06
    1e08:	37 81       	ldd	r19, Z+7	; 0x07
    1e0a:	39 87       	std	Y+9, r19	; 0x09
    1e0c:	28 87       	std	Y+8, r18	; 0x08
    1e0e:	a6 81       	ldd	r26, Z+6	; 0x06
    1e10:	b7 81       	ldd	r27, Z+7	; 0x07
    1e12:	9e 01       	movw	r18, r28
    1e14:	2e 5f       	subi	r18, 0xFE	; 254
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	15 96       	adiw	r26, 0x05	; 5
    1e1a:	3c 93       	st	X, r19
    1e1c:	2e 93       	st	-X, r18
    1e1e:	14 97       	sbiw	r26, 0x04	; 4
    1e20:	37 83       	std	Z+7, r19	; 0x07
    1e22:	26 83       	std	Z+6, r18	; 0x06
    1e24:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e26:	8e 9f       	mul	r24, r30
    1e28:	f0 01       	movw	r30, r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	e7 51       	subi	r30, 0x17	; 23
    1e2e:	ff 4e       	sbci	r31, 0xEF	; 239
    1e30:	fd 87       	std	Y+13, r31	; 0x0d
    1e32:	ec 87       	std	Y+12, r30	; 0x0c
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 5f       	subi	r24, 0xFF	; 255
    1e38:	80 83       	st	Z, r24
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	80 91 a6 10 	lds	r24, 0x10A6	; 0x8010a6 <xSchedulerRunning>
    1e42:	88 23       	and	r24, r24
    1e44:	51 f0       	breq	.+20     	; 0x1e5a <prvAddNewTaskToReadyList+0xd8>
    1e46:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    1e4a:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1e4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e52:	98 17       	cp	r25, r24
    1e54:	10 f4       	brcc	.+4      	; 0x1e5a <prvAddNewTaskToReadyList+0xd8>
    1e56:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <prvCheckTasksWaitingTermination>:
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	1b c0       	rjmp	.+54     	; 0x1e9c <prvCheckTasksWaitingTermination+0x3c>
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	0f 92       	push	r0
    1e6c:	e0 91 c0 10 	lds	r30, 0x10C0	; 0x8010c0 <xTasksWaitingTermination+0x7>
    1e70:	f0 91 c1 10 	lds	r31, 0x10C1	; 0x8010c1 <xTasksWaitingTermination+0x8>
    1e74:	c0 85       	ldd	r28, Z+8	; 0x08
    1e76:	d1 85       	ldd	r29, Z+9	; 0x09
    1e78:	ce 01       	movw	r24, r28
    1e7a:	02 96       	adiw	r24, 0x02	; 2
    1e7c:	0e 94 95 06 	call	0xd2a	; 0xd2a <uxListRemove>
    1e80:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <uxCurrentNumberOfTasks>
    1e84:	81 50       	subi	r24, 0x01	; 1
    1e86:	80 93 ac 10 	sts	0x10AC, r24	; 0x8010ac <uxCurrentNumberOfTasks>
    1e8a:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <uxDeletedTasksWaitingCleanUp>
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	80 93 b8 10 	sts	0x10B8, r24	; 0x8010b8 <uxDeletedTasksWaitingCleanUp>
    1e94:	0f 90       	pop	r0
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	ce 01       	movw	r24, r28
    1e9a:	b9 de       	rcall	.-654    	; 0x1c0e <prvDeleteTCB>
    1e9c:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <uxDeletedTasksWaitingCleanUp>
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	e1 cf       	rjmp	.-62     	; 0x1e66 <prvCheckTasksWaitingTermination+0x6>
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <prvAddCurrentTaskToDelayedList>:
    1eaa:	8f 92       	push	r8
    1eac:	9f 92       	push	r9
    1eae:	af 92       	push	r10
    1eb0:	bf 92       	push	r11
    1eb2:	cf 92       	push	r12
    1eb4:	df 92       	push	r13
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	6b 01       	movw	r12, r22
    1ec0:	7c 01       	movw	r14, r24
    1ec2:	c4 2f       	mov	r28, r20
    1ec4:	80 90 a8 10 	lds	r8, 0x10A8	; 0x8010a8 <xTickCount>
    1ec8:	90 90 a9 10 	lds	r9, 0x10A9	; 0x8010a9 <xTickCount+0x1>
    1ecc:	a0 90 aa 10 	lds	r10, 0x10AA	; 0x8010aa <xTickCount+0x2>
    1ed0:	b0 90 ab 10 	lds	r11, 0x10AB	; 0x8010ab <xTickCount+0x3>
    1ed4:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    1ed8:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1edc:	02 96       	adiw	r24, 0x02	; 2
    1ede:	0e 94 95 06 	call	0xd2a	; 0xd2a <uxListRemove>
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	c8 16       	cp	r12, r24
    1ee6:	d8 06       	cpc	r13, r24
    1ee8:	e8 06       	cpc	r14, r24
    1eea:	f8 06       	cpc	r15, r24
    1eec:	b1 f5       	brne	.+108    	; 0x1f5a <prvAddCurrentTaskToDelayedList+0xb0>
    1eee:	cc 23       	and	r28, r28
    1ef0:	a1 f1       	breq	.+104    	; 0x1f5a <prvAddCurrentTaskToDelayedList+0xb0>
    1ef2:	ed ea       	ldi	r30, 0xAD	; 173
    1ef4:	f0 e1       	ldi	r31, 0x10	; 16
    1ef6:	a1 81       	ldd	r26, Z+1	; 0x01
    1ef8:	b2 81       	ldd	r27, Z+2	; 0x02
    1efa:	c0 91 57 11 	lds	r28, 0x1157	; 0x801157 <pxCurrentTCB>
    1efe:	d0 91 58 11 	lds	r29, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f02:	bf 83       	std	Y+7, r27	; 0x07
    1f04:	ae 83       	std	Y+6, r26	; 0x06
    1f06:	c0 91 57 11 	lds	r28, 0x1157	; 0x801157 <pxCurrentTCB>
    1f0a:	d0 91 58 11 	lds	r29, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f0e:	16 96       	adiw	r26, 0x06	; 6
    1f10:	8d 91       	ld	r24, X+
    1f12:	9c 91       	ld	r25, X
    1f14:	17 97       	sbiw	r26, 0x07	; 7
    1f16:	99 87       	std	Y+9, r25	; 0x09
    1f18:	88 87       	std	Y+8, r24	; 0x08
    1f1a:	16 96       	adiw	r26, 0x06	; 6
    1f1c:	cd 91       	ld	r28, X+
    1f1e:	dc 91       	ld	r29, X
    1f20:	17 97       	sbiw	r26, 0x07	; 7
    1f22:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    1f26:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f2a:	02 96       	adiw	r24, 0x02	; 2
    1f2c:	9d 83       	std	Y+5, r25	; 0x05
    1f2e:	8c 83       	std	Y+4, r24	; 0x04
    1f30:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    1f34:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f38:	02 96       	adiw	r24, 0x02	; 2
    1f3a:	17 96       	adiw	r26, 0x07	; 7
    1f3c:	9c 93       	st	X, r25
    1f3e:	8e 93       	st	-X, r24
    1f40:	16 97       	sbiw	r26, 0x06	; 6
    1f42:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
    1f46:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f4a:	1d 96       	adiw	r26, 0x0d	; 13
    1f4c:	fc 93       	st	X, r31
    1f4e:	ee 93       	st	-X, r30
    1f50:	1c 97       	sbiw	r26, 0x0c	; 12
    1f52:	80 81       	ld	r24, Z
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	80 83       	st	Z, r24
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <prvAddCurrentTaskToDelayedList+0x12e>
    1f5a:	c8 0c       	add	r12, r8
    1f5c:	d9 1c       	adc	r13, r9
    1f5e:	ea 1c       	adc	r14, r10
    1f60:	fb 1c       	adc	r15, r11
    1f62:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    1f66:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f6a:	c2 82       	std	Z+2, r12	; 0x02
    1f6c:	d3 82       	std	Z+3, r13	; 0x03
    1f6e:	e4 82       	std	Z+4, r14	; 0x04
    1f70:	f5 82       	std	Z+5, r15	; 0x05
    1f72:	c8 14       	cp	r12, r8
    1f74:	d9 04       	cpc	r13, r9
    1f76:	ea 04       	cpc	r14, r10
    1f78:	fb 04       	cpc	r15, r11
    1f7a:	68 f4       	brcc	.+26     	; 0x1f96 <prvAddCurrentTaskToDelayedList+0xec>
    1f7c:	60 91 57 11 	lds	r22, 0x1157	; 0x801157 <pxCurrentTCB>
    1f80:	70 91 58 11 	lds	r23, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f84:	80 91 cf 10 	lds	r24, 0x10CF	; 0x8010cf <pxOverflowDelayedTaskList>
    1f88:	90 91 d0 10 	lds	r25, 0x10D0	; 0x8010d0 <pxOverflowDelayedTaskList+0x1>
    1f8c:	6e 5f       	subi	r22, 0xFE	; 254
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	0e 94 58 06 	call	0xcb0	; 0xcb0 <vListInsert>
    1f94:	21 c0       	rjmp	.+66     	; 0x1fd8 <prvAddCurrentTaskToDelayedList+0x12e>
    1f96:	60 91 57 11 	lds	r22, 0x1157	; 0x801157 <pxCurrentTCB>
    1f9a:	70 91 58 11 	lds	r23, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    1f9e:	80 91 d1 10 	lds	r24, 0x10D1	; 0x8010d1 <pxDelayedTaskList>
    1fa2:	90 91 d2 10 	lds	r25, 0x10D2	; 0x8010d2 <pxDelayedTaskList+0x1>
    1fa6:	6e 5f       	subi	r22, 0xFE	; 254
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1faa:	0e 94 58 06 	call	0xcb0	; 0xcb0 <vListInsert>
    1fae:	80 91 9b 10 	lds	r24, 0x109B	; 0x80109b <xNextTaskUnblockTime>
    1fb2:	90 91 9c 10 	lds	r25, 0x109C	; 0x80109c <xNextTaskUnblockTime+0x1>
    1fb6:	a0 91 9d 10 	lds	r26, 0x109D	; 0x80109d <xNextTaskUnblockTime+0x2>
    1fba:	b0 91 9e 10 	lds	r27, 0x109E	; 0x80109e <xNextTaskUnblockTime+0x3>
    1fbe:	c8 16       	cp	r12, r24
    1fc0:	d9 06       	cpc	r13, r25
    1fc2:	ea 06       	cpc	r14, r26
    1fc4:	fb 06       	cpc	r15, r27
    1fc6:	40 f4       	brcc	.+16     	; 0x1fd8 <prvAddCurrentTaskToDelayedList+0x12e>
    1fc8:	c0 92 9b 10 	sts	0x109B, r12	; 0x80109b <xNextTaskUnblockTime>
    1fcc:	d0 92 9c 10 	sts	0x109C, r13	; 0x80109c <xNextTaskUnblockTime+0x1>
    1fd0:	e0 92 9d 10 	sts	0x109D, r14	; 0x80109d <xNextTaskUnblockTime+0x2>
    1fd4:	f0 92 9e 10 	sts	0x109E, r15	; 0x80109e <xNextTaskUnblockTime+0x3>
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	df 90       	pop	r13
    1fe2:	cf 90       	pop	r12
    1fe4:	bf 90       	pop	r11
    1fe6:	af 90       	pop	r10
    1fe8:	9f 90       	pop	r9
    1fea:	8f 90       	pop	r8
    1fec:	08 95       	ret

00001fee <xTaskCreate>:
    1fee:	2f 92       	push	r2
    1ff0:	3f 92       	push	r3
    1ff2:	4f 92       	push	r4
    1ff4:	5f 92       	push	r5
    1ff6:	6f 92       	push	r6
    1ff8:	7f 92       	push	r7
    1ffa:	8f 92       	push	r8
    1ffc:	9f 92       	push	r9
    1ffe:	af 92       	push	r10
    2000:	bf 92       	push	r11
    2002:	cf 92       	push	r12
    2004:	df 92       	push	r13
    2006:	ef 92       	push	r14
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	3c 01       	movw	r6, r24
    2012:	1b 01       	movw	r2, r22
    2014:	4a 01       	movw	r8, r20
    2016:	29 01       	movw	r4, r18
    2018:	ca 01       	movw	r24, r20
    201a:	0e 94 5d 05 	call	0xaba	; 0xaba <pvPortMalloc>
    201e:	6c 01       	movw	r12, r24
    2020:	89 2b       	or	r24, r25
    2022:	71 f0       	breq	.+28     	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    2024:	84 e3       	ldi	r24, 0x34	; 52
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 5d 05 	call	0xaba	; 0xaba <pvPortMalloc>
    202c:	ec 01       	movw	r28, r24
    202e:	89 2b       	or	r24, r25
    2030:	19 f0       	breq	.+6      	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2032:	dc 8e       	std	Y+28, r13	; 0x1c
    2034:	cb 8e       	std	Y+27, r12	; 0x1b
    2036:	06 c0       	rjmp	.+12     	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    2038:	c6 01       	movw	r24, r12
    203a:	0e 94 06 06 	call	0xc0c	; 0xc0c <vPortFree>
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    2040:	c0 e0       	ldi	r28, 0x00	; 0
    2042:	d0 e0       	ldi	r29, 0x00	; 0
    2044:	20 97       	sbiw	r28, 0x00	; 0
    2046:	61 f0       	breq	.+24     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    2048:	a1 2c       	mov	r10, r1
    204a:	b1 2c       	mov	r11, r1
    204c:	6e 01       	movw	r12, r28
    204e:	92 01       	movw	r18, r4
    2050:	a4 01       	movw	r20, r8
    2052:	b1 01       	movw	r22, r2
    2054:	c3 01       	movw	r24, r6
    2056:	e8 dd       	rcall	.-1072   	; 0x1c28 <prvInitialiseNewTask>
    2058:	ce 01       	movw	r24, r28
    205a:	93 de       	rcall	.-730    	; 0x1d82 <prvAddNewTaskToReadyList>
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	01 c0       	rjmp	.+2      	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	9f 90       	pop	r9
    2076:	8f 90       	pop	r8
    2078:	7f 90       	pop	r7
    207a:	6f 90       	pop	r6
    207c:	5f 90       	pop	r5
    207e:	4f 90       	pop	r4
    2080:	3f 90       	pop	r3
    2082:	2f 90       	pop	r2
    2084:	08 95       	ret

00002086 <vTaskStartScheduler>:
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	0f 2e       	mov	r0, r31
    208e:	f9 e9       	ldi	r31, 0x99	; 153
    2090:	ef 2e       	mov	r14, r31
    2092:	f0 e1       	ldi	r31, 0x10	; 16
    2094:	ff 2e       	mov	r15, r31
    2096:	f0 2d       	mov	r31, r0
    2098:	00 e0       	ldi	r16, 0x00	; 0
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 ec       	ldi	r20, 0xC0	; 192
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	65 ed       	ldi	r22, 0xD5	; 213
    20a4:	73 e0       	ldi	r23, 0x03	; 3
    20a6:	8e e4       	ldi	r24, 0x4E	; 78
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	a1 df       	rcall	.-190    	; 0x1fee <xTaskCreate>
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	11 f4       	brne	.+4      	; 0x20b4 <vTaskStartScheduler+0x2e>
    20b0:	0e 94 f5 19 	call	0x33ea	; 0x33ea <xTimerCreateTimerTask>
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	c9 f4       	brne	.+50     	; 0x20ea <vTaskStartScheduler+0x64>
    20b8:	f8 94       	cli
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	9f ef       	ldi	r25, 0xFF	; 255
    20be:	dc 01       	movw	r26, r24
    20c0:	80 93 9b 10 	sts	0x109B, r24	; 0x80109b <xNextTaskUnblockTime>
    20c4:	90 93 9c 10 	sts	0x109C, r25	; 0x80109c <xNextTaskUnblockTime+0x1>
    20c8:	a0 93 9d 10 	sts	0x109D, r26	; 0x80109d <xNextTaskUnblockTime+0x2>
    20cc:	b0 93 9e 10 	sts	0x109E, r27	; 0x80109e <xNextTaskUnblockTime+0x3>
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 93 a6 10 	sts	0x10A6, r24	; 0x8010a6 <xSchedulerRunning>
    20d6:	10 92 a8 10 	sts	0x10A8, r1	; 0x8010a8 <xTickCount>
    20da:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <xTickCount+0x1>
    20de:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <xTickCount+0x2>
    20e2:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <xTickCount+0x3>
    20e6:	0e 94 df 06 	call	0xdbe	; 0xdbe <xPortStartScheduler>
    20ea:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	08 95       	ret

000020f6 <vTaskSuspendAll>:
    20f6:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <uxSchedulerSuspended>
    20fa:	8f 5f       	subi	r24, 0xFF	; 255
    20fc:	80 93 98 10 	sts	0x1098, r24	; 0x801098 <uxSchedulerSuspended>
    2100:	08 95       	ret

00002102 <xTaskGetTickCount>:
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	0f 92       	push	r0
    2108:	60 91 a8 10 	lds	r22, 0x10A8	; 0x8010a8 <xTickCount>
    210c:	70 91 a9 10 	lds	r23, 0x10A9	; 0x8010a9 <xTickCount+0x1>
    2110:	80 91 aa 10 	lds	r24, 0x10AA	; 0x8010aa <xTickCount+0x2>
    2114:	90 91 ab 10 	lds	r25, 0x10AB	; 0x8010ab <xTickCount+0x3>
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	08 95       	ret

0000211e <xTaskIncrementTick>:
    211e:	cf 92       	push	r12
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <uxSchedulerSuspended>
    212e:	81 11       	cpse	r24, r1
    2130:	05 c1       	rjmp	.+522    	; 0x233c <__stack+0x13d>
    2132:	c0 90 a8 10 	lds	r12, 0x10A8	; 0x8010a8 <xTickCount>
    2136:	d0 90 a9 10 	lds	r13, 0x10A9	; 0x8010a9 <xTickCount+0x1>
    213a:	e0 90 aa 10 	lds	r14, 0x10AA	; 0x8010aa <xTickCount+0x2>
    213e:	f0 90 ab 10 	lds	r15, 0x10AB	; 0x8010ab <xTickCount+0x3>
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	c8 1a       	sub	r12, r24
    2146:	d8 0a       	sbc	r13, r24
    2148:	e8 0a       	sbc	r14, r24
    214a:	f8 0a       	sbc	r15, r24
    214c:	c0 92 a8 10 	sts	0x10A8, r12	; 0x8010a8 <xTickCount>
    2150:	d0 92 a9 10 	sts	0x10A9, r13	; 0x8010a9 <xTickCount+0x1>
    2154:	e0 92 aa 10 	sts	0x10AA, r14	; 0x8010aa <xTickCount+0x2>
    2158:	f0 92 ab 10 	sts	0x10AB, r15	; 0x8010ab <xTickCount+0x3>
    215c:	c1 14       	cp	r12, r1
    215e:	d1 04       	cpc	r13, r1
    2160:	e1 04       	cpc	r14, r1
    2162:	f1 04       	cpc	r15, r1
    2164:	b1 f4       	brne	.+44     	; 0x2192 <xTaskIncrementTick+0x74>
    2166:	80 91 d1 10 	lds	r24, 0x10D1	; 0x8010d1 <pxDelayedTaskList>
    216a:	90 91 d2 10 	lds	r25, 0x10D2	; 0x8010d2 <pxDelayedTaskList+0x1>
    216e:	20 91 cf 10 	lds	r18, 0x10CF	; 0x8010cf <pxOverflowDelayedTaskList>
    2172:	30 91 d0 10 	lds	r19, 0x10D0	; 0x8010d0 <pxOverflowDelayedTaskList+0x1>
    2176:	30 93 d2 10 	sts	0x10D2, r19	; 0x8010d2 <pxDelayedTaskList+0x1>
    217a:	20 93 d1 10 	sts	0x10D1, r18	; 0x8010d1 <pxDelayedTaskList>
    217e:	90 93 d0 10 	sts	0x10D0, r25	; 0x8010d0 <pxOverflowDelayedTaskList+0x1>
    2182:	80 93 cf 10 	sts	0x10CF, r24	; 0x8010cf <pxOverflowDelayedTaskList>
    2186:	80 91 a0 10 	lds	r24, 0x10A0	; 0x8010a0 <xNumOfOverflows>
    218a:	8f 5f       	subi	r24, 0xFF	; 255
    218c:	80 93 a0 10 	sts	0x10A0, r24	; 0x8010a0 <xNumOfOverflows>
    2190:	17 dd       	rcall	.-1490   	; 0x1bc0 <prvResetNextTaskUnblockTime>
    2192:	80 91 9b 10 	lds	r24, 0x109B	; 0x80109b <xNextTaskUnblockTime>
    2196:	90 91 9c 10 	lds	r25, 0x109C	; 0x80109c <xNextTaskUnblockTime+0x1>
    219a:	a0 91 9d 10 	lds	r26, 0x109D	; 0x80109d <xNextTaskUnblockTime+0x2>
    219e:	b0 91 9e 10 	lds	r27, 0x109E	; 0x80109e <xNextTaskUnblockTime+0x3>
    21a2:	c8 16       	cp	r12, r24
    21a4:	d9 06       	cpc	r13, r25
    21a6:	ea 06       	cpc	r14, r26
    21a8:	fb 06       	cpc	r15, r27
    21aa:	20 f4       	brcc	.+8      	; 0x21b4 <xTaskIncrementTick+0x96>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	b2 c0       	rjmp	.+356    	; 0x2314 <__stack+0x115>
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <xTaskIncrementTick+0x98>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	e0 91 d1 10 	lds	r30, 0x10D1	; 0x8010d1 <pxDelayedTaskList>
    21ba:	f0 91 d2 10 	lds	r31, 0x10D2	; 0x8010d2 <pxDelayedTaskList+0x1>
    21be:	90 81       	ld	r25, Z
    21c0:	91 11       	cpse	r25, r1
    21c2:	0c c0       	rjmp	.+24     	; 0x21dc <xTaskIncrementTick+0xbe>
    21c4:	4f ef       	ldi	r20, 0xFF	; 255
    21c6:	5f ef       	ldi	r21, 0xFF	; 255
    21c8:	ba 01       	movw	r22, r20
    21ca:	40 93 9b 10 	sts	0x109B, r20	; 0x80109b <xNextTaskUnblockTime>
    21ce:	50 93 9c 10 	sts	0x109C, r21	; 0x80109c <xNextTaskUnblockTime+0x1>
    21d2:	60 93 9d 10 	sts	0x109D, r22	; 0x80109d <xNextTaskUnblockTime+0x2>
    21d6:	70 93 9e 10 	sts	0x109E, r23	; 0x80109e <xNextTaskUnblockTime+0x3>
    21da:	9c c0       	rjmp	.+312    	; 0x2314 <__stack+0x115>
    21dc:	e0 91 d1 10 	lds	r30, 0x10D1	; 0x8010d1 <pxDelayedTaskList>
    21e0:	f0 91 d2 10 	lds	r31, 0x10D2	; 0x8010d2 <pxDelayedTaskList+0x1>
    21e4:	07 80       	ldd	r0, Z+7	; 0x07
    21e6:	f0 85       	ldd	r31, Z+8	; 0x08
    21e8:	e0 2d       	mov	r30, r0
    21ea:	00 84       	ldd	r0, Z+8	; 0x08
    21ec:	f1 85       	ldd	r31, Z+9	; 0x09
    21ee:	e0 2d       	mov	r30, r0
    21f0:	42 81       	ldd	r20, Z+2	; 0x02
    21f2:	53 81       	ldd	r21, Z+3	; 0x03
    21f4:	64 81       	ldd	r22, Z+4	; 0x04
    21f6:	75 81       	ldd	r23, Z+5	; 0x05
    21f8:	c4 16       	cp	r12, r20
    21fa:	d5 06       	cpc	r13, r21
    21fc:	e6 06       	cpc	r14, r22
    21fe:	f7 06       	cpc	r15, r23
    2200:	48 f4       	brcc	.+18     	; 0x2214 <__stack+0x15>
    2202:	40 93 9b 10 	sts	0x109B, r20	; 0x80109b <xNextTaskUnblockTime>
    2206:	50 93 9c 10 	sts	0x109C, r21	; 0x80109c <xNextTaskUnblockTime+0x1>
    220a:	60 93 9d 10 	sts	0x109D, r22	; 0x80109d <xNextTaskUnblockTime+0x2>
    220e:	70 93 9e 10 	sts	0x109E, r23	; 0x80109e <xNextTaskUnblockTime+0x3>
    2212:	80 c0       	rjmp	.+256    	; 0x2314 <__stack+0x115>
    2214:	a4 85       	ldd	r26, Z+12	; 0x0c
    2216:	b5 85       	ldd	r27, Z+13	; 0x0d
    2218:	c6 81       	ldd	r28, Z+6	; 0x06
    221a:	d7 81       	ldd	r29, Z+7	; 0x07
    221c:	20 85       	ldd	r18, Z+8	; 0x08
    221e:	31 85       	ldd	r19, Z+9	; 0x09
    2220:	3f 83       	std	Y+7, r19	; 0x07
    2222:	2e 83       	std	Y+6, r18	; 0x06
    2224:	c0 85       	ldd	r28, Z+8	; 0x08
    2226:	d1 85       	ldd	r29, Z+9	; 0x09
    2228:	26 81       	ldd	r18, Z+6	; 0x06
    222a:	37 81       	ldd	r19, Z+7	; 0x07
    222c:	3d 83       	std	Y+5, r19	; 0x05
    222e:	2c 83       	std	Y+4, r18	; 0x04
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	4d 91       	ld	r20, X+
    2234:	5c 91       	ld	r21, X
    2236:	12 97       	sbiw	r26, 0x02	; 2
    2238:	9f 01       	movw	r18, r30
    223a:	2e 5f       	subi	r18, 0xFE	; 254
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	42 17       	cp	r20, r18
    2240:	53 07       	cpc	r21, r19
    2242:	31 f4       	brne	.+12     	; 0x2250 <__stack+0x51>
    2244:	40 85       	ldd	r20, Z+8	; 0x08
    2246:	51 85       	ldd	r21, Z+9	; 0x09
    2248:	12 96       	adiw	r26, 0x02	; 2
    224a:	5c 93       	st	X, r21
    224c:	4e 93       	st	-X, r20
    224e:	11 97       	sbiw	r26, 0x01	; 1
    2250:	15 86       	std	Z+13, r1	; 0x0d
    2252:	14 86       	std	Z+12, r1	; 0x0c
    2254:	9c 91       	ld	r25, X
    2256:	91 50       	subi	r25, 0x01	; 1
    2258:	9c 93       	st	X, r25
    225a:	a0 8d       	ldd	r26, Z+24	; 0x18
    225c:	b1 8d       	ldd	r27, Z+25	; 0x19
    225e:	10 97       	sbiw	r26, 0x00	; 0
    2260:	09 f1       	breq	.+66     	; 0x22a4 <__stack+0xa5>
    2262:	c2 89       	ldd	r28, Z+18	; 0x12
    2264:	d3 89       	ldd	r29, Z+19	; 0x13
    2266:	44 89       	ldd	r20, Z+20	; 0x14
    2268:	55 89       	ldd	r21, Z+21	; 0x15
    226a:	5f 83       	std	Y+7, r21	; 0x07
    226c:	4e 83       	std	Y+6, r20	; 0x06
    226e:	c4 89       	ldd	r28, Z+20	; 0x14
    2270:	d5 89       	ldd	r29, Z+21	; 0x15
    2272:	42 89       	ldd	r20, Z+18	; 0x12
    2274:	53 89       	ldd	r21, Z+19	; 0x13
    2276:	5d 83       	std	Y+5, r21	; 0x05
    2278:	4c 83       	std	Y+4, r20	; 0x04
    227a:	11 96       	adiw	r26, 0x01	; 1
    227c:	6d 91       	ld	r22, X+
    227e:	7c 91       	ld	r23, X
    2280:	12 97       	sbiw	r26, 0x02	; 2
    2282:	af 01       	movw	r20, r30
    2284:	42 5f       	subi	r20, 0xF2	; 242
    2286:	5f 4f       	sbci	r21, 0xFF	; 255
    2288:	64 17       	cp	r22, r20
    228a:	75 07       	cpc	r23, r21
    228c:	31 f4       	brne	.+12     	; 0x229a <__stack+0x9b>
    228e:	44 89       	ldd	r20, Z+20	; 0x14
    2290:	55 89       	ldd	r21, Z+21	; 0x15
    2292:	12 96       	adiw	r26, 0x02	; 2
    2294:	5c 93       	st	X, r21
    2296:	4e 93       	st	-X, r20
    2298:	11 97       	sbiw	r26, 0x01	; 1
    229a:	11 8e       	std	Z+25, r1	; 0x19
    229c:	10 8e       	std	Z+24, r1	; 0x18
    229e:	9c 91       	ld	r25, X
    22a0:	91 50       	subi	r25, 0x01	; 1
    22a2:	9c 93       	st	X, r25
    22a4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22a6:	90 91 a7 10 	lds	r25, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    22aa:	9a 17       	cp	r25, r26
    22ac:	10 f4       	brcc	.+4      	; 0x22b2 <__stack+0xb3>
    22ae:	a0 93 a7 10 	sts	0x10A7, r26	; 0x8010a7 <uxTopReadyPriority>
    22b2:	9b e0       	ldi	r25, 0x0B	; 11
    22b4:	9a 9f       	mul	r25, r26
    22b6:	d0 01       	movw	r26, r0
    22b8:	11 24       	eor	r1, r1
    22ba:	a7 51       	subi	r26, 0x17	; 23
    22bc:	bf 4e       	sbci	r27, 0xEF	; 239
    22be:	11 96       	adiw	r26, 0x01	; 1
    22c0:	0d 90       	ld	r0, X+
    22c2:	bc 91       	ld	r27, X
    22c4:	a0 2d       	mov	r26, r0
    22c6:	b7 83       	std	Z+7, r27	; 0x07
    22c8:	a6 83       	std	Z+6, r26	; 0x06
    22ca:	16 96       	adiw	r26, 0x06	; 6
    22cc:	4d 91       	ld	r20, X+
    22ce:	5c 91       	ld	r21, X
    22d0:	17 97       	sbiw	r26, 0x07	; 7
    22d2:	51 87       	std	Z+9, r21	; 0x09
    22d4:	40 87       	std	Z+8, r20	; 0x08
    22d6:	16 96       	adiw	r26, 0x06	; 6
    22d8:	cd 91       	ld	r28, X+
    22da:	dc 91       	ld	r29, X
    22dc:	17 97       	sbiw	r26, 0x07	; 7
    22de:	3d 83       	std	Y+5, r19	; 0x05
    22e0:	2c 83       	std	Y+4, r18	; 0x04
    22e2:	17 96       	adiw	r26, 0x07	; 7
    22e4:	3c 93       	st	X, r19
    22e6:	2e 93       	st	-X, r18
    22e8:	16 97       	sbiw	r26, 0x06	; 6
    22ea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22ec:	9a 9f       	mul	r25, r26
    22ee:	d0 01       	movw	r26, r0
    22f0:	11 24       	eor	r1, r1
    22f2:	a7 51       	subi	r26, 0x17	; 23
    22f4:	bf 4e       	sbci	r27, 0xEF	; 239
    22f6:	b5 87       	std	Z+13, r27	; 0x0d
    22f8:	a4 87       	std	Z+12, r26	; 0x0c
    22fa:	9c 91       	ld	r25, X
    22fc:	9f 5f       	subi	r25, 0xFF	; 255
    22fe:	9c 93       	st	X, r25
    2300:	22 8d       	ldd	r18, Z+26	; 0x1a
    2302:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2306:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    230a:	92 8d       	ldd	r25, Z+26	; 0x1a
    230c:	29 17       	cp	r18, r25
    230e:	08 f0       	brcs	.+2      	; 0x2312 <__stack+0x113>
    2310:	4f cf       	rjmp	.-354    	; 0x21b0 <xTaskIncrementTick+0x92>
    2312:	51 cf       	rjmp	.-350    	; 0x21b6 <xTaskIncrementTick+0x98>
    2314:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2318:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    231c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    231e:	9b e0       	ldi	r25, 0x0B	; 11
    2320:	e9 9f       	mul	r30, r25
    2322:	f0 01       	movw	r30, r0
    2324:	11 24       	eor	r1, r1
    2326:	e7 51       	subi	r30, 0x17	; 23
    2328:	ff 4e       	sbci	r31, 0xEF	; 239
    232a:	90 81       	ld	r25, Z
    232c:	92 30       	cpi	r25, 0x02	; 2
    232e:	08 f0       	brcs	.+2      	; 0x2332 <__stack+0x133>
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 91 a1 10 	lds	r25, 0x10A1	; 0x8010a1 <xYieldPending>
    2336:	91 11       	cpse	r25, r1
    2338:	16 c0       	rjmp	.+44     	; 0x2366 <__stack+0x167>
    233a:	16 c0       	rjmp	.+44     	; 0x2368 <__stack+0x169>
    233c:	80 91 a2 10 	lds	r24, 0x10A2	; 0x8010a2 <xPendedTicks>
    2340:	90 91 a3 10 	lds	r25, 0x10A3	; 0x8010a3 <xPendedTicks+0x1>
    2344:	a0 91 a4 10 	lds	r26, 0x10A4	; 0x8010a4 <xPendedTicks+0x2>
    2348:	b0 91 a5 10 	lds	r27, 0x10A5	; 0x8010a5 <xPendedTicks+0x3>
    234c:	01 96       	adiw	r24, 0x01	; 1
    234e:	a1 1d       	adc	r26, r1
    2350:	b1 1d       	adc	r27, r1
    2352:	80 93 a2 10 	sts	0x10A2, r24	; 0x8010a2 <xPendedTicks>
    2356:	90 93 a3 10 	sts	0x10A3, r25	; 0x8010a3 <xPendedTicks+0x1>
    235a:	a0 93 a4 10 	sts	0x10A4, r26	; 0x8010a4 <xPendedTicks+0x2>
    235e:	b0 93 a5 10 	sts	0x10A5, r27	; 0x8010a5 <xPendedTicks+0x3>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <__stack+0x169>
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	df 90       	pop	r13
    2372:	cf 90       	pop	r12
    2374:	08 95       	ret

00002376 <xTaskResumeAll>:
    2376:	cf 92       	push	r12
    2378:	df 92       	push	r13
    237a:	ef 92       	push	r14
    237c:	ff 92       	push	r15
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	0f 92       	push	r0
    2388:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <uxSchedulerSuspended>
    238c:	81 50       	subi	r24, 0x01	; 1
    238e:	80 93 98 10 	sts	0x1098, r24	; 0x801098 <uxSchedulerSuspended>
    2392:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <uxSchedulerSuspended>
    2396:	81 11       	cpse	r24, r1
    2398:	be c0       	rjmp	.+380    	; 0x2516 <xTaskResumeAll+0x1a0>
    239a:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <uxCurrentNumberOfTasks>
    239e:	81 11       	cpse	r24, r1
    23a0:	88 c0       	rjmp	.+272    	; 0x24b2 <xTaskResumeAll+0x13c>
    23a2:	bc c0       	rjmp	.+376    	; 0x251c <xTaskResumeAll+0x1a6>
    23a4:	e0 91 cb 10 	lds	r30, 0x10CB	; 0x8010cb <xPendingReadyList+0x7>
    23a8:	f0 91 cc 10 	lds	r31, 0x10CC	; 0x8010cc <xPendingReadyList+0x8>
    23ac:	00 84       	ldd	r0, Z+8	; 0x08
    23ae:	f1 85       	ldd	r31, Z+9	; 0x09
    23b0:	e0 2d       	mov	r30, r0
    23b2:	a0 8d       	ldd	r26, Z+24	; 0x18
    23b4:	b1 8d       	ldd	r27, Z+25	; 0x19
    23b6:	c2 89       	ldd	r28, Z+18	; 0x12
    23b8:	d3 89       	ldd	r29, Z+19	; 0x13
    23ba:	84 89       	ldd	r24, Z+20	; 0x14
    23bc:	95 89       	ldd	r25, Z+21	; 0x15
    23be:	9f 83       	std	Y+7, r25	; 0x07
    23c0:	8e 83       	std	Y+6, r24	; 0x06
    23c2:	c4 89       	ldd	r28, Z+20	; 0x14
    23c4:	d5 89       	ldd	r29, Z+21	; 0x15
    23c6:	82 89       	ldd	r24, Z+18	; 0x12
    23c8:	93 89       	ldd	r25, Z+19	; 0x13
    23ca:	9d 83       	std	Y+5, r25	; 0x05
    23cc:	8c 83       	std	Y+4, r24	; 0x04
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	2d 91       	ld	r18, X+
    23d2:	3c 91       	ld	r19, X
    23d4:	12 97       	sbiw	r26, 0x02	; 2
    23d6:	cf 01       	movw	r24, r30
    23d8:	0e 96       	adiw	r24, 0x0e	; 14
    23da:	28 17       	cp	r18, r24
    23dc:	39 07       	cpc	r19, r25
    23de:	31 f4       	brne	.+12     	; 0x23ec <xTaskResumeAll+0x76>
    23e0:	84 89       	ldd	r24, Z+20	; 0x14
    23e2:	95 89       	ldd	r25, Z+21	; 0x15
    23e4:	12 96       	adiw	r26, 0x02	; 2
    23e6:	9c 93       	st	X, r25
    23e8:	8e 93       	st	-X, r24
    23ea:	11 97       	sbiw	r26, 0x01	; 1
    23ec:	11 8e       	std	Z+25, r1	; 0x19
    23ee:	10 8e       	std	Z+24, r1	; 0x18
    23f0:	8c 91       	ld	r24, X
    23f2:	81 50       	subi	r24, 0x01	; 1
    23f4:	8c 93       	st	X, r24
    23f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    23f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    23fa:	c6 81       	ldd	r28, Z+6	; 0x06
    23fc:	d7 81       	ldd	r29, Z+7	; 0x07
    23fe:	80 85       	ldd	r24, Z+8	; 0x08
    2400:	91 85       	ldd	r25, Z+9	; 0x09
    2402:	9f 83       	std	Y+7, r25	; 0x07
    2404:	8e 83       	std	Y+6, r24	; 0x06
    2406:	c0 85       	ldd	r28, Z+8	; 0x08
    2408:	d1 85       	ldd	r29, Z+9	; 0x09
    240a:	86 81       	ldd	r24, Z+6	; 0x06
    240c:	97 81       	ldd	r25, Z+7	; 0x07
    240e:	9d 83       	std	Y+5, r25	; 0x05
    2410:	8c 83       	std	Y+4, r24	; 0x04
    2412:	11 96       	adiw	r26, 0x01	; 1
    2414:	8d 91       	ld	r24, X+
    2416:	9c 91       	ld	r25, X
    2418:	12 97       	sbiw	r26, 0x02	; 2
    241a:	9f 01       	movw	r18, r30
    241c:	2e 5f       	subi	r18, 0xFE	; 254
    241e:	3f 4f       	sbci	r19, 0xFF	; 255
    2420:	82 17       	cp	r24, r18
    2422:	93 07       	cpc	r25, r19
    2424:	31 f4       	brne	.+12     	; 0x2432 <xTaskResumeAll+0xbc>
    2426:	80 85       	ldd	r24, Z+8	; 0x08
    2428:	91 85       	ldd	r25, Z+9	; 0x09
    242a:	12 96       	adiw	r26, 0x02	; 2
    242c:	9c 93       	st	X, r25
    242e:	8e 93       	st	-X, r24
    2430:	11 97       	sbiw	r26, 0x01	; 1
    2432:	15 86       	std	Z+13, r1	; 0x0d
    2434:	14 86       	std	Z+12, r1	; 0x0c
    2436:	8c 91       	ld	r24, X
    2438:	81 50       	subi	r24, 0x01	; 1
    243a:	8c 93       	st	X, r24
    243c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    243e:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    2442:	8a 17       	cp	r24, r26
    2444:	10 f4       	brcc	.+4      	; 0x244a <xTaskResumeAll+0xd4>
    2446:	a0 93 a7 10 	sts	0x10A7, r26	; 0x8010a7 <uxTopReadyPriority>
    244a:	8b e0       	ldi	r24, 0x0B	; 11
    244c:	8a 9f       	mul	r24, r26
    244e:	d0 01       	movw	r26, r0
    2450:	11 24       	eor	r1, r1
    2452:	a7 51       	subi	r26, 0x17	; 23
    2454:	bf 4e       	sbci	r27, 0xEF	; 239
    2456:	11 96       	adiw	r26, 0x01	; 1
    2458:	0d 90       	ld	r0, X+
    245a:	bc 91       	ld	r27, X
    245c:	a0 2d       	mov	r26, r0
    245e:	b7 83       	std	Z+7, r27	; 0x07
    2460:	a6 83       	std	Z+6, r26	; 0x06
    2462:	16 96       	adiw	r26, 0x06	; 6
    2464:	4d 91       	ld	r20, X+
    2466:	5c 91       	ld	r21, X
    2468:	17 97       	sbiw	r26, 0x07	; 7
    246a:	51 87       	std	Z+9, r21	; 0x09
    246c:	40 87       	std	Z+8, r20	; 0x08
    246e:	16 96       	adiw	r26, 0x06	; 6
    2470:	cd 91       	ld	r28, X+
    2472:	dc 91       	ld	r29, X
    2474:	17 97       	sbiw	r26, 0x07	; 7
    2476:	3d 83       	std	Y+5, r19	; 0x05
    2478:	2c 83       	std	Y+4, r18	; 0x04
    247a:	17 96       	adiw	r26, 0x07	; 7
    247c:	3c 93       	st	X, r19
    247e:	2e 93       	st	-X, r18
    2480:	16 97       	sbiw	r26, 0x06	; 6
    2482:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2484:	8a 9f       	mul	r24, r26
    2486:	d0 01       	movw	r26, r0
    2488:	11 24       	eor	r1, r1
    248a:	a7 51       	subi	r26, 0x17	; 23
    248c:	bf 4e       	sbci	r27, 0xEF	; 239
    248e:	b5 87       	std	Z+13, r27	; 0x0d
    2490:	a4 87       	std	Z+12, r26	; 0x0c
    2492:	8c 91       	ld	r24, X
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	8c 93       	st	X, r24
    2498:	92 8d       	ldd	r25, Z+26	; 0x1a
    249a:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
    249e:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    24a2:	5a 96       	adiw	r26, 0x1a	; 26
    24a4:	8c 91       	ld	r24, X
    24a6:	98 17       	cp	r25, r24
    24a8:	30 f0       	brcs	.+12     	; 0x24b6 <xTaskResumeAll+0x140>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xYieldPending>
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <xTaskResumeAll+0x140>
    24b2:	e0 e0       	ldi	r30, 0x00	; 0
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 91 c4 10 	lds	r24, 0x10C4	; 0x8010c4 <xPendingReadyList>
    24ba:	81 11       	cpse	r24, r1
    24bc:	73 cf       	rjmp	.-282    	; 0x23a4 <xTaskResumeAll+0x2e>
    24be:	ef 2b       	or	r30, r31
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <xTaskResumeAll+0x14e>
    24c2:	7e db       	rcall	.-2308   	; 0x1bc0 <prvResetNextTaskUnblockTime>
    24c4:	c0 90 a2 10 	lds	r12, 0x10A2	; 0x8010a2 <xPendedTicks>
    24c8:	d0 90 a3 10 	lds	r13, 0x10A3	; 0x8010a3 <xPendedTicks+0x1>
    24cc:	e0 90 a4 10 	lds	r14, 0x10A4	; 0x8010a4 <xPendedTicks+0x2>
    24d0:	f0 90 a5 10 	lds	r15, 0x10A5	; 0x8010a5 <xPendedTicks+0x3>
    24d4:	c1 14       	cp	r12, r1
    24d6:	d1 04       	cpc	r13, r1
    24d8:	e1 04       	cpc	r14, r1
    24da:	f1 04       	cpc	r15, r1
    24dc:	a1 f0       	breq	.+40     	; 0x2506 <xTaskResumeAll+0x190>
    24de:	1f de       	rcall	.-962    	; 0x211e <xTaskIncrementTick>
    24e0:	88 23       	and	r24, r24
    24e2:	19 f0       	breq	.+6      	; 0x24ea <xTaskResumeAll+0x174>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xYieldPending>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	c8 1a       	sub	r12, r24
    24ee:	d1 08       	sbc	r13, r1
    24f0:	e1 08       	sbc	r14, r1
    24f2:	f1 08       	sbc	r15, r1
    24f4:	a1 f7       	brne	.-24     	; 0x24de <xTaskResumeAll+0x168>
    24f6:	10 92 a2 10 	sts	0x10A2, r1	; 0x8010a2 <xPendedTicks>
    24fa:	10 92 a3 10 	sts	0x10A3, r1	; 0x8010a3 <xPendedTicks+0x1>
    24fe:	10 92 a4 10 	sts	0x10A4, r1	; 0x8010a4 <xPendedTicks+0x2>
    2502:	10 92 a5 10 	sts	0x10A5, r1	; 0x8010a5 <xPendedTicks+0x3>
    2506:	80 91 a1 10 	lds	r24, 0x10A1	; 0x8010a1 <xYieldPending>
    250a:	88 23       	and	r24, r24
    250c:	31 f0       	breq	.+12     	; 0x251a <xTaskResumeAll+0x1a4>
    250e:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	03 c0       	rjmp	.+6      	; 0x251c <xTaskResumeAll+0x1a6>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	01 c0       	rjmp	.+2      	; 0x251c <xTaskResumeAll+0x1a6>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	ff 90       	pop	r15
    2526:	ef 90       	pop	r14
    2528:	df 90       	pop	r13
    252a:	cf 90       	pop	r12
    252c:	08 95       	ret

0000252e <xTaskDelayUntil>:
    252e:	8f 92       	push	r8
    2530:	9f 92       	push	r9
    2532:	af 92       	push	r10
    2534:	bf 92       	push	r11
    2536:	cf 92       	push	r12
    2538:	df 92       	push	r13
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	ec 01       	movw	r28, r24
    2546:	6a 01       	movw	r12, r20
    2548:	7b 01       	movw	r14, r22
    254a:	d5 dd       	rcall	.-1110   	; 0x20f6 <vTaskSuspendAll>
    254c:	80 90 a8 10 	lds	r8, 0x10A8	; 0x8010a8 <xTickCount>
    2550:	90 90 a9 10 	lds	r9, 0x10A9	; 0x8010a9 <xTickCount+0x1>
    2554:	a0 90 aa 10 	lds	r10, 0x10AA	; 0x8010aa <xTickCount+0x2>
    2558:	b0 90 ab 10 	lds	r11, 0x10AB	; 0x8010ab <xTickCount+0x3>
    255c:	88 81       	ld	r24, Y
    255e:	99 81       	ldd	r25, Y+1	; 0x01
    2560:	aa 81       	ldd	r26, Y+2	; 0x02
    2562:	bb 81       	ldd	r27, Y+3	; 0x03
    2564:	ac 01       	movw	r20, r24
    2566:	bd 01       	movw	r22, r26
    2568:	4c 0d       	add	r20, r12
    256a:	5d 1d       	adc	r21, r13
    256c:	6e 1d       	adc	r22, r14
    256e:	7f 1d       	adc	r23, r15
    2570:	88 16       	cp	r8, r24
    2572:	99 06       	cpc	r9, r25
    2574:	aa 06       	cpc	r10, r26
    2576:	bb 06       	cpc	r11, r27
    2578:	60 f4       	brcc	.+24     	; 0x2592 <xTaskDelayUntil+0x64>
    257a:	48 17       	cp	r20, r24
    257c:	59 07       	cpc	r21, r25
    257e:	6a 07       	cpc	r22, r26
    2580:	7b 07       	cpc	r23, r27
    2582:	98 f4       	brcc	.+38     	; 0x25aa <xTaskDelayUntil+0x7c>
    2584:	84 16       	cp	r8, r20
    2586:	95 06       	cpc	r9, r21
    2588:	a6 06       	cpc	r10, r22
    258a:	b7 06       	cpc	r11, r23
    258c:	80 f0       	brcs	.+32     	; 0x25ae <xTaskDelayUntil+0x80>
    258e:	10 e0       	ldi	r17, 0x00	; 0
    2590:	13 c0       	rjmp	.+38     	; 0x25b8 <xTaskDelayUntil+0x8a>
    2592:	48 17       	cp	r20, r24
    2594:	59 07       	cpc	r21, r25
    2596:	6a 07       	cpc	r22, r26
    2598:	7b 07       	cpc	r23, r27
    259a:	58 f0       	brcs	.+22     	; 0x25b2 <xTaskDelayUntil+0x84>
    259c:	84 16       	cp	r8, r20
    259e:	95 06       	cpc	r9, r21
    25a0:	a6 06       	cpc	r10, r22
    25a2:	b7 06       	cpc	r11, r23
    25a4:	40 f0       	brcs	.+16     	; 0x25b6 <xTaskDelayUntil+0x88>
    25a6:	10 e0       	ldi	r17, 0x00	; 0
    25a8:	07 c0       	rjmp	.+14     	; 0x25b8 <xTaskDelayUntil+0x8a>
    25aa:	10 e0       	ldi	r17, 0x00	; 0
    25ac:	05 c0       	rjmp	.+10     	; 0x25b8 <xTaskDelayUntil+0x8a>
    25ae:	11 e0       	ldi	r17, 0x01	; 1
    25b0:	03 c0       	rjmp	.+6      	; 0x25b8 <xTaskDelayUntil+0x8a>
    25b2:	11 e0       	ldi	r17, 0x01	; 1
    25b4:	01 c0       	rjmp	.+2      	; 0x25b8 <xTaskDelayUntil+0x8a>
    25b6:	11 e0       	ldi	r17, 0x01	; 1
    25b8:	48 83       	st	Y, r20
    25ba:	59 83       	std	Y+1, r21	; 0x01
    25bc:	6a 83       	std	Y+2, r22	; 0x02
    25be:	7b 83       	std	Y+3, r23	; 0x03
    25c0:	11 23       	and	r17, r17
    25c2:	41 f0       	breq	.+16     	; 0x25d4 <xTaskDelayUntil+0xa6>
    25c4:	cb 01       	movw	r24, r22
    25c6:	ba 01       	movw	r22, r20
    25c8:	68 19       	sub	r22, r8
    25ca:	79 09       	sbc	r23, r9
    25cc:	8a 09       	sbc	r24, r10
    25ce:	9b 09       	sbc	r25, r11
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	6b dc       	rcall	.-1834   	; 0x1eaa <prvAddCurrentTaskToDelayedList>
    25d4:	d0 de       	rcall	.-608    	; 0x2376 <xTaskResumeAll>
    25d6:	81 11       	cpse	r24, r1
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <xTaskDelayUntil+0xb0>
    25da:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    25de:	81 2f       	mov	r24, r17
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	bf 90       	pop	r11
    25f0:	af 90       	pop	r10
    25f2:	9f 90       	pop	r9
    25f4:	8f 90       	pop	r8
    25f6:	08 95       	ret

000025f8 <vTaskDelay>:
    25f8:	cf 92       	push	r12
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	6b 01       	movw	r12, r22
    2602:	7c 01       	movw	r14, r24
    2604:	67 2b       	or	r22, r23
    2606:	68 2b       	or	r22, r24
    2608:	69 2b       	or	r22, r25
    260a:	39 f0       	breq	.+14     	; 0x261a <vTaskDelay+0x22>
    260c:	74 dd       	rcall	.-1304   	; 0x20f6 <vTaskSuspendAll>
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	c7 01       	movw	r24, r14
    2612:	b6 01       	movw	r22, r12
    2614:	4a dc       	rcall	.-1900   	; 0x1eaa <prvAddCurrentTaskToDelayedList>
    2616:	af de       	rcall	.-674    	; 0x2376 <xTaskResumeAll>
    2618:	01 c0       	rjmp	.+2      	; 0x261c <vTaskDelay+0x24>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	81 11       	cpse	r24, r1
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <vTaskDelay+0x2c>
    2620:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    2624:	ff 90       	pop	r15
    2626:	ef 90       	pop	r14
    2628:	df 90       	pop	r13
    262a:	cf 90       	pop	r12
    262c:	08 95       	ret

0000262e <vTaskSwitchContext>:
    262e:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <uxSchedulerSuspended>
    2632:	88 23       	and	r24, r24
    2634:	21 f0       	breq	.+8      	; 0x263e <vTaskSwitchContext+0x10>
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xYieldPending>
    263c:	08 95       	ret
    263e:	10 92 a1 10 	sts	0x10A1, r1	; 0x8010a1 <xYieldPending>
    2642:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2646:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    264a:	20 81       	ld	r18, Z
    264c:	31 81       	ldd	r19, Z+1	; 0x01
    264e:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2652:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2656:	83 8d       	ldd	r24, Z+27	; 0x1b
    2658:	94 8d       	ldd	r25, Z+28	; 0x1c
    265a:	82 17       	cp	r24, r18
    265c:	93 07       	cpc	r25, r19
    265e:	60 f0       	brcs	.+24     	; 0x2678 <vTaskSwitchContext+0x4a>
    2660:	60 91 57 11 	lds	r22, 0x1157	; 0x801157 <pxCurrentTCB>
    2664:	70 91 58 11 	lds	r23, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2668:	63 5e       	subi	r22, 0xE3	; 227
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    2670:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2674:	0e 94 83 1c 	call	0x3906	; 0x3906 <vApplicationStackOverflowHook>
    2678:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <vTaskSwitchContext+0x52>
    267e:	81 50       	subi	r24, 0x01	; 1
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	9b e0       	ldi	r25, 0x0B	; 11
    2686:	92 9f       	mul	r25, r18
    2688:	f0 01       	movw	r30, r0
    268a:	93 9f       	mul	r25, r19
    268c:	f0 0d       	add	r31, r0
    268e:	11 24       	eor	r1, r1
    2690:	e7 51       	subi	r30, 0x17	; 23
    2692:	ff 4e       	sbci	r31, 0xEF	; 239
    2694:	90 81       	ld	r25, Z
    2696:	99 23       	and	r25, r25
    2698:	91 f3       	breq	.-28     	; 0x267e <vTaskSwitchContext+0x50>
    269a:	9b e0       	ldi	r25, 0x0B	; 11
    269c:	92 9f       	mul	r25, r18
    269e:	a0 01       	movw	r20, r0
    26a0:	93 9f       	mul	r25, r19
    26a2:	50 0d       	add	r21, r0
    26a4:	11 24       	eor	r1, r1
    26a6:	df 01       	movw	r26, r30
    26a8:	01 80       	ldd	r0, Z+1	; 0x01
    26aa:	f2 81       	ldd	r31, Z+2	; 0x02
    26ac:	e0 2d       	mov	r30, r0
    26ae:	04 80       	ldd	r0, Z+4	; 0x04
    26b0:	f5 81       	ldd	r31, Z+5	; 0x05
    26b2:	e0 2d       	mov	r30, r0
    26b4:	12 96       	adiw	r26, 0x02	; 2
    26b6:	fc 93       	st	X, r31
    26b8:	ee 93       	st	-X, r30
    26ba:	11 97       	sbiw	r26, 0x01	; 1
    26bc:	44 51       	subi	r20, 0x14	; 20
    26be:	5f 4e       	sbci	r21, 0xEF	; 239
    26c0:	e4 17       	cp	r30, r20
    26c2:	f5 07       	cpc	r31, r21
    26c4:	29 f4       	brne	.+10     	; 0x26d0 <vTaskSwitchContext+0xa2>
    26c6:	44 81       	ldd	r20, Z+4	; 0x04
    26c8:	55 81       	ldd	r21, Z+5	; 0x05
    26ca:	fd 01       	movw	r30, r26
    26cc:	52 83       	std	Z+2, r21	; 0x02
    26ce:	41 83       	std	Z+1, r20	; 0x01
    26d0:	9b e0       	ldi	r25, 0x0B	; 11
    26d2:	92 9f       	mul	r25, r18
    26d4:	f0 01       	movw	r30, r0
    26d6:	93 9f       	mul	r25, r19
    26d8:	f0 0d       	add	r31, r0
    26da:	11 24       	eor	r1, r1
    26dc:	e7 51       	subi	r30, 0x17	; 23
    26de:	ff 4e       	sbci	r31, 0xEF	; 239
    26e0:	01 80       	ldd	r0, Z+1	; 0x01
    26e2:	f2 81       	ldd	r31, Z+2	; 0x02
    26e4:	e0 2d       	mov	r30, r0
    26e6:	20 85       	ldd	r18, Z+8	; 0x08
    26e8:	31 85       	ldd	r19, Z+9	; 0x09
    26ea:	30 93 58 11 	sts	0x1158, r19	; 0x801158 <pxCurrentTCB+0x1>
    26ee:	20 93 57 11 	sts	0x1157, r18	; 0x801157 <pxCurrentTCB>
    26f2:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <uxTopReadyPriority>
    26f6:	08 95       	ret

000026f8 <vTaskPlaceOnEventList>:
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	6a 01       	movw	r12, r20
    2702:	7b 01       	movw	r14, r22
    2704:	60 91 57 11 	lds	r22, 0x1157	; 0x801157 <pxCurrentTCB>
    2708:	70 91 58 11 	lds	r23, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    270c:	62 5f       	subi	r22, 0xF2	; 242
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	0e 94 58 06 	call	0xcb0	; 0xcb0 <vListInsert>
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	c7 01       	movw	r24, r14
    2718:	b6 01       	movw	r22, r12
    271a:	c7 db       	rcall	.-2162   	; 0x1eaa <prvAddCurrentTaskToDelayedList>
    271c:	ff 90       	pop	r15
    271e:	ef 90       	pop	r14
    2720:	df 90       	pop	r13
    2722:	cf 90       	pop	r12
    2724:	08 95       	ret

00002726 <vTaskPlaceOnUnorderedEventList>:
    2726:	0f 93       	push	r16
    2728:	1f 93       	push	r17
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	fc 01       	movw	r30, r24
    2730:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
    2734:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2738:	70 68       	ori	r23, 0x80	; 128
    273a:	1e 96       	adiw	r26, 0x0e	; 14
    273c:	4d 93       	st	X+, r20
    273e:	5d 93       	st	X+, r21
    2740:	6d 93       	st	X+, r22
    2742:	7c 93       	st	X, r23
    2744:	51 97       	sbiw	r26, 0x11	; 17
    2746:	a1 81       	ldd	r26, Z+1	; 0x01
    2748:	b2 81       	ldd	r27, Z+2	; 0x02
    274a:	c0 91 57 11 	lds	r28, 0x1157	; 0x801157 <pxCurrentTCB>
    274e:	d0 91 58 11 	lds	r29, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2752:	bb 8b       	std	Y+19, r27	; 0x13
    2754:	aa 8b       	std	Y+18, r26	; 0x12
    2756:	c0 91 57 11 	lds	r28, 0x1157	; 0x801157 <pxCurrentTCB>
    275a:	d0 91 58 11 	lds	r29, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    275e:	16 96       	adiw	r26, 0x06	; 6
    2760:	8d 91       	ld	r24, X+
    2762:	9c 91       	ld	r25, X
    2764:	17 97       	sbiw	r26, 0x07	; 7
    2766:	9d 8b       	std	Y+21, r25	; 0x15
    2768:	8c 8b       	std	Y+20, r24	; 0x14
    276a:	16 96       	adiw	r26, 0x06	; 6
    276c:	cd 91       	ld	r28, X+
    276e:	dc 91       	ld	r29, X
    2770:	17 97       	sbiw	r26, 0x07	; 7
    2772:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    2776:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    277a:	0e 96       	adiw	r24, 0x0e	; 14
    277c:	9d 83       	std	Y+5, r25	; 0x05
    277e:	8c 83       	std	Y+4, r24	; 0x04
    2780:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    2784:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2788:	0e 96       	adiw	r24, 0x0e	; 14
    278a:	17 96       	adiw	r26, 0x07	; 7
    278c:	9c 93       	st	X, r25
    278e:	8e 93       	st	-X, r24
    2790:	16 97       	sbiw	r26, 0x06	; 6
    2792:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
    2796:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    279a:	59 96       	adiw	r26, 0x19	; 25
    279c:	fc 93       	st	X, r31
    279e:	ee 93       	st	-X, r30
    27a0:	58 97       	sbiw	r26, 0x18	; 24
    27a2:	80 81       	ld	r24, Z
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	80 83       	st	Z, r24
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	c9 01       	movw	r24, r18
    27ac:	b8 01       	movw	r22, r16
    27ae:	7d db       	rcall	.-2310   	; 0x1eaa <prvAddCurrentTaskToDelayedList>
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	08 95       	ret

000027ba <vTaskPlaceOnEventListRestricted>:
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	fc 01       	movw	r30, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	ba 01       	movw	r22, r20
    27c4:	a1 81       	ldd	r26, Z+1	; 0x01
    27c6:	b2 81       	ldd	r27, Z+2	; 0x02
    27c8:	c0 91 57 11 	lds	r28, 0x1157	; 0x801157 <pxCurrentTCB>
    27cc:	d0 91 58 11 	lds	r29, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    27d0:	bb 8b       	std	Y+19, r27	; 0x13
    27d2:	aa 8b       	std	Y+18, r26	; 0x12
    27d4:	c0 91 57 11 	lds	r28, 0x1157	; 0x801157 <pxCurrentTCB>
    27d8:	d0 91 58 11 	lds	r29, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    27dc:	16 96       	adiw	r26, 0x06	; 6
    27de:	4d 91       	ld	r20, X+
    27e0:	5c 91       	ld	r21, X
    27e2:	17 97       	sbiw	r26, 0x07	; 7
    27e4:	5d 8b       	std	Y+21, r21	; 0x15
    27e6:	4c 8b       	std	Y+20, r20	; 0x14
    27e8:	16 96       	adiw	r26, 0x06	; 6
    27ea:	cd 91       	ld	r28, X+
    27ec:	dc 91       	ld	r29, X
    27ee:	17 97       	sbiw	r26, 0x07	; 7
    27f0:	40 91 57 11 	lds	r20, 0x1157	; 0x801157 <pxCurrentTCB>
    27f4:	50 91 58 11 	lds	r21, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    27f8:	42 5f       	subi	r20, 0xF2	; 242
    27fa:	5f 4f       	sbci	r21, 0xFF	; 255
    27fc:	5d 83       	std	Y+5, r21	; 0x05
    27fe:	4c 83       	std	Y+4, r20	; 0x04
    2800:	40 91 57 11 	lds	r20, 0x1157	; 0x801157 <pxCurrentTCB>
    2804:	50 91 58 11 	lds	r21, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2808:	42 5f       	subi	r20, 0xF2	; 242
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
    280c:	17 96       	adiw	r26, 0x07	; 7
    280e:	5c 93       	st	X, r21
    2810:	4e 93       	st	-X, r20
    2812:	16 97       	sbiw	r26, 0x06	; 6
    2814:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
    2818:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    281c:	59 96       	adiw	r26, 0x19	; 25
    281e:	fc 93       	st	X, r31
    2820:	ee 93       	st	-X, r30
    2822:	58 97       	sbiw	r26, 0x18	; 24
    2824:	30 81       	ld	r19, Z
    2826:	3f 5f       	subi	r19, 0xFF	; 255
    2828:	30 83       	st	Z, r19
    282a:	22 23       	and	r18, r18
    282c:	19 f0       	breq	.+6      	; 0x2834 <vTaskPlaceOnEventListRestricted+0x7a>
    282e:	6f ef       	ldi	r22, 0xFF	; 255
    2830:	7f ef       	ldi	r23, 0xFF	; 255
    2832:	cb 01       	movw	r24, r22
    2834:	42 2f       	mov	r20, r18
    2836:	39 db       	rcall	.-2446   	; 0x1eaa <prvAddCurrentTaskToDelayedList>
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	08 95       	ret

0000283e <xTaskRemoveFromEventList>:
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	dc 01       	movw	r26, r24
    2844:	17 96       	adiw	r26, 0x07	; 7
    2846:	ed 91       	ld	r30, X+
    2848:	fc 91       	ld	r31, X
    284a:	18 97       	sbiw	r26, 0x08	; 8
    284c:	00 84       	ldd	r0, Z+8	; 0x08
    284e:	f1 85       	ldd	r31, Z+9	; 0x09
    2850:	e0 2d       	mov	r30, r0
    2852:	a0 8d       	ldd	r26, Z+24	; 0x18
    2854:	b1 8d       	ldd	r27, Z+25	; 0x19
    2856:	c2 89       	ldd	r28, Z+18	; 0x12
    2858:	d3 89       	ldd	r29, Z+19	; 0x13
    285a:	84 89       	ldd	r24, Z+20	; 0x14
    285c:	95 89       	ldd	r25, Z+21	; 0x15
    285e:	9f 83       	std	Y+7, r25	; 0x07
    2860:	8e 83       	std	Y+6, r24	; 0x06
    2862:	c4 89       	ldd	r28, Z+20	; 0x14
    2864:	d5 89       	ldd	r29, Z+21	; 0x15
    2866:	82 89       	ldd	r24, Z+18	; 0x12
    2868:	93 89       	ldd	r25, Z+19	; 0x13
    286a:	9d 83       	std	Y+5, r25	; 0x05
    286c:	8c 83       	std	Y+4, r24	; 0x04
    286e:	11 96       	adiw	r26, 0x01	; 1
    2870:	8d 91       	ld	r24, X+
    2872:	9c 91       	ld	r25, X
    2874:	12 97       	sbiw	r26, 0x02	; 2
    2876:	9f 01       	movw	r18, r30
    2878:	22 5f       	subi	r18, 0xF2	; 242
    287a:	3f 4f       	sbci	r19, 0xFF	; 255
    287c:	82 17       	cp	r24, r18
    287e:	93 07       	cpc	r25, r19
    2880:	31 f4       	brne	.+12     	; 0x288e <xTaskRemoveFromEventList+0x50>
    2882:	84 89       	ldd	r24, Z+20	; 0x14
    2884:	95 89       	ldd	r25, Z+21	; 0x15
    2886:	12 96       	adiw	r26, 0x02	; 2
    2888:	9c 93       	st	X, r25
    288a:	8e 93       	st	-X, r24
    288c:	11 97       	sbiw	r26, 0x01	; 1
    288e:	11 8e       	std	Z+25, r1	; 0x19
    2890:	10 8e       	std	Z+24, r1	; 0x18
    2892:	8c 91       	ld	r24, X
    2894:	81 50       	subi	r24, 0x01	; 1
    2896:	8c 93       	st	X, r24
    2898:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <uxSchedulerSuspended>
    289c:	81 11       	cpse	r24, r1
    289e:	52 c0       	rjmp	.+164    	; 0x2944 <xTaskRemoveFromEventList+0x106>
    28a0:	a4 85       	ldd	r26, Z+12	; 0x0c
    28a2:	b5 85       	ldd	r27, Z+13	; 0x0d
    28a4:	c6 81       	ldd	r28, Z+6	; 0x06
    28a6:	d7 81       	ldd	r29, Z+7	; 0x07
    28a8:	80 85       	ldd	r24, Z+8	; 0x08
    28aa:	91 85       	ldd	r25, Z+9	; 0x09
    28ac:	9f 83       	std	Y+7, r25	; 0x07
    28ae:	8e 83       	std	Y+6, r24	; 0x06
    28b0:	c0 85       	ldd	r28, Z+8	; 0x08
    28b2:	d1 85       	ldd	r29, Z+9	; 0x09
    28b4:	86 81       	ldd	r24, Z+6	; 0x06
    28b6:	97 81       	ldd	r25, Z+7	; 0x07
    28b8:	9d 83       	std	Y+5, r25	; 0x05
    28ba:	8c 83       	std	Y+4, r24	; 0x04
    28bc:	11 96       	adiw	r26, 0x01	; 1
    28be:	8d 91       	ld	r24, X+
    28c0:	9c 91       	ld	r25, X
    28c2:	12 97       	sbiw	r26, 0x02	; 2
    28c4:	9f 01       	movw	r18, r30
    28c6:	2e 5f       	subi	r18, 0xFE	; 254
    28c8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ca:	82 17       	cp	r24, r18
    28cc:	93 07       	cpc	r25, r19
    28ce:	31 f4       	brne	.+12     	; 0x28dc <xTaskRemoveFromEventList+0x9e>
    28d0:	80 85       	ldd	r24, Z+8	; 0x08
    28d2:	91 85       	ldd	r25, Z+9	; 0x09
    28d4:	12 96       	adiw	r26, 0x02	; 2
    28d6:	9c 93       	st	X, r25
    28d8:	8e 93       	st	-X, r24
    28da:	11 97       	sbiw	r26, 0x01	; 1
    28dc:	15 86       	std	Z+13, r1	; 0x0d
    28de:	14 86       	std	Z+12, r1	; 0x0c
    28e0:	8c 91       	ld	r24, X
    28e2:	81 50       	subi	r24, 0x01	; 1
    28e4:	8c 93       	st	X, r24
    28e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    28e8:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    28ec:	8a 17       	cp	r24, r26
    28ee:	10 f4       	brcc	.+4      	; 0x28f4 <xTaskRemoveFromEventList+0xb6>
    28f0:	a0 93 a7 10 	sts	0x10A7, r26	; 0x8010a7 <uxTopReadyPriority>
    28f4:	8b e0       	ldi	r24, 0x0B	; 11
    28f6:	8a 9f       	mul	r24, r26
    28f8:	d0 01       	movw	r26, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	a7 51       	subi	r26, 0x17	; 23
    28fe:	bf 4e       	sbci	r27, 0xEF	; 239
    2900:	11 96       	adiw	r26, 0x01	; 1
    2902:	0d 90       	ld	r0, X+
    2904:	bc 91       	ld	r27, X
    2906:	a0 2d       	mov	r26, r0
    2908:	b7 83       	std	Z+7, r27	; 0x07
    290a:	a6 83       	std	Z+6, r26	; 0x06
    290c:	16 96       	adiw	r26, 0x06	; 6
    290e:	4d 91       	ld	r20, X+
    2910:	5c 91       	ld	r21, X
    2912:	17 97       	sbiw	r26, 0x07	; 7
    2914:	51 87       	std	Z+9, r21	; 0x09
    2916:	40 87       	std	Z+8, r20	; 0x08
    2918:	16 96       	adiw	r26, 0x06	; 6
    291a:	cd 91       	ld	r28, X+
    291c:	dc 91       	ld	r29, X
    291e:	17 97       	sbiw	r26, 0x07	; 7
    2920:	3d 83       	std	Y+5, r19	; 0x05
    2922:	2c 83       	std	Y+4, r18	; 0x04
    2924:	17 96       	adiw	r26, 0x07	; 7
    2926:	3c 93       	st	X, r19
    2928:	2e 93       	st	-X, r18
    292a:	16 97       	sbiw	r26, 0x06	; 6
    292c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    292e:	8a 9f       	mul	r24, r26
    2930:	d0 01       	movw	r26, r0
    2932:	11 24       	eor	r1, r1
    2934:	a7 51       	subi	r26, 0x17	; 23
    2936:	bf 4e       	sbci	r27, 0xEF	; 239
    2938:	b5 87       	std	Z+13, r27	; 0x0d
    293a:	a4 87       	std	Z+12, r26	; 0x0c
    293c:	8c 91       	ld	r24, X
    293e:	8f 5f       	subi	r24, 0xFF	; 255
    2940:	8c 93       	st	X, r24
    2942:	1c c0       	rjmp	.+56     	; 0x297c <xTaskRemoveFromEventList+0x13e>
    2944:	44 ec       	ldi	r20, 0xC4	; 196
    2946:	50 e1       	ldi	r21, 0x10	; 16
    2948:	da 01       	movw	r26, r20
    294a:	11 96       	adiw	r26, 0x01	; 1
    294c:	cd 91       	ld	r28, X+
    294e:	dc 91       	ld	r29, X
    2950:	12 97       	sbiw	r26, 0x02	; 2
    2952:	d3 8b       	std	Z+19, r29	; 0x13
    2954:	c2 8b       	std	Z+18, r28	; 0x12
    2956:	8e 81       	ldd	r24, Y+6	; 0x06
    2958:	9f 81       	ldd	r25, Y+7	; 0x07
    295a:	95 8b       	std	Z+21, r25	; 0x15
    295c:	84 8b       	std	Z+20, r24	; 0x14
    295e:	8e 81       	ldd	r24, Y+6	; 0x06
    2960:	9f 81       	ldd	r25, Y+7	; 0x07
    2962:	dc 01       	movw	r26, r24
    2964:	15 96       	adiw	r26, 0x05	; 5
    2966:	3c 93       	st	X, r19
    2968:	2e 93       	st	-X, r18
    296a:	14 97       	sbiw	r26, 0x04	; 4
    296c:	3f 83       	std	Y+7, r19	; 0x07
    296e:	2e 83       	std	Y+6, r18	; 0x06
    2970:	51 8f       	std	Z+25, r21	; 0x19
    2972:	40 8f       	std	Z+24, r20	; 0x18
    2974:	da 01       	movw	r26, r20
    2976:	8c 91       	ld	r24, X
    2978:	8f 5f       	subi	r24, 0xFF	; 255
    297a:	8c 93       	st	X, r24
    297c:	92 8d       	ldd	r25, Z+26	; 0x1a
    297e:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2982:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2986:	82 8d       	ldd	r24, Z+26	; 0x1a
    2988:	89 17       	cp	r24, r25
    298a:	20 f4       	brcc	.+8      	; 0x2994 <xTaskRemoveFromEventList+0x156>
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xYieldPending>
    2992:	01 c0       	rjmp	.+2      	; 0x2996 <xTaskRemoveFromEventList+0x158>
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	08 95       	ret

0000299c <vTaskRemoveFromUnorderedEventList>:
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	dc 01       	movw	r26, r24
    29a2:	70 68       	ori	r23, 0x80	; 128
    29a4:	4d 93       	st	X+, r20
    29a6:	5d 93       	st	X+, r21
    29a8:	6d 93       	st	X+, r22
    29aa:	7c 93       	st	X, r23
    29ac:	13 97       	sbiw	r26, 0x03	; 3
    29ae:	18 96       	adiw	r26, 0x08	; 8
    29b0:	ed 91       	ld	r30, X+
    29b2:	fc 91       	ld	r31, X
    29b4:	19 97       	sbiw	r26, 0x09	; 9
    29b6:	1a 96       	adiw	r26, 0x0a	; 10
    29b8:	4d 91       	ld	r20, X+
    29ba:	5c 91       	ld	r21, X
    29bc:	1b 97       	sbiw	r26, 0x0b	; 11
    29be:	14 96       	adiw	r26, 0x04	; 4
    29c0:	8d 91       	ld	r24, X+
    29c2:	9c 91       	ld	r25, X
    29c4:	15 97       	sbiw	r26, 0x05	; 5
    29c6:	16 96       	adiw	r26, 0x06	; 6
    29c8:	2d 91       	ld	r18, X+
    29ca:	3c 91       	ld	r19, X
    29cc:	17 97       	sbiw	r26, 0x07	; 7
    29ce:	ec 01       	movw	r28, r24
    29d0:	3f 83       	std	Y+7, r19	; 0x07
    29d2:	2e 83       	std	Y+6, r18	; 0x06
    29d4:	16 96       	adiw	r26, 0x06	; 6
    29d6:	8d 91       	ld	r24, X+
    29d8:	9c 91       	ld	r25, X
    29da:	17 97       	sbiw	r26, 0x07	; 7
    29dc:	14 96       	adiw	r26, 0x04	; 4
    29de:	2d 91       	ld	r18, X+
    29e0:	3c 91       	ld	r19, X
    29e2:	15 97       	sbiw	r26, 0x05	; 5
    29e4:	ec 01       	movw	r28, r24
    29e6:	3d 83       	std	Y+5, r19	; 0x05
    29e8:	2c 83       	std	Y+4, r18	; 0x04
    29ea:	ea 01       	movw	r28, r20
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	a8 17       	cp	r26, r24
    29f2:	b9 07       	cpc	r27, r25
    29f4:	31 f4       	brne	.+12     	; 0x2a02 <vTaskRemoveFromUnorderedEventList+0x66>
    29f6:	16 96       	adiw	r26, 0x06	; 6
    29f8:	8d 91       	ld	r24, X+
    29fa:	9c 91       	ld	r25, X
    29fc:	17 97       	sbiw	r26, 0x07	; 7
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	1b 96       	adiw	r26, 0x0b	; 11
    2a04:	1c 92       	st	X, r1
    2a06:	1e 92       	st	-X, r1
    2a08:	1a 97       	sbiw	r26, 0x0a	; 10
    2a0a:	da 01       	movw	r26, r20
    2a0c:	8c 91       	ld	r24, X
    2a0e:	81 50       	subi	r24, 0x01	; 1
    2a10:	8c 93       	st	X, r24
    2a12:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a14:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a16:	c6 81       	ldd	r28, Z+6	; 0x06
    2a18:	d7 81       	ldd	r29, Z+7	; 0x07
    2a1a:	80 85       	ldd	r24, Z+8	; 0x08
    2a1c:	91 85       	ldd	r25, Z+9	; 0x09
    2a1e:	9f 83       	std	Y+7, r25	; 0x07
    2a20:	8e 83       	std	Y+6, r24	; 0x06
    2a22:	c0 85       	ldd	r28, Z+8	; 0x08
    2a24:	d1 85       	ldd	r29, Z+9	; 0x09
    2a26:	86 81       	ldd	r24, Z+6	; 0x06
    2a28:	97 81       	ldd	r25, Z+7	; 0x07
    2a2a:	9d 83       	std	Y+5, r25	; 0x05
    2a2c:	8c 83       	std	Y+4, r24	; 0x04
    2a2e:	11 96       	adiw	r26, 0x01	; 1
    2a30:	8d 91       	ld	r24, X+
    2a32:	9c 91       	ld	r25, X
    2a34:	12 97       	sbiw	r26, 0x02	; 2
    2a36:	9f 01       	movw	r18, r30
    2a38:	2e 5f       	subi	r18, 0xFE	; 254
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	82 17       	cp	r24, r18
    2a3e:	93 07       	cpc	r25, r19
    2a40:	31 f4       	brne	.+12     	; 0x2a4e <vTaskRemoveFromUnorderedEventList+0xb2>
    2a42:	80 85       	ldd	r24, Z+8	; 0x08
    2a44:	91 85       	ldd	r25, Z+9	; 0x09
    2a46:	12 96       	adiw	r26, 0x02	; 2
    2a48:	9c 93       	st	X, r25
    2a4a:	8e 93       	st	-X, r24
    2a4c:	11 97       	sbiw	r26, 0x01	; 1
    2a4e:	15 86       	std	Z+13, r1	; 0x0d
    2a50:	14 86       	std	Z+12, r1	; 0x0c
    2a52:	8c 91       	ld	r24, X
    2a54:	81 50       	subi	r24, 0x01	; 1
    2a56:	8c 93       	st	X, r24
    2a58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a5a:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    2a5e:	8a 17       	cp	r24, r26
    2a60:	10 f4       	brcc	.+4      	; 0x2a66 <vTaskRemoveFromUnorderedEventList+0xca>
    2a62:	a0 93 a7 10 	sts	0x10A7, r26	; 0x8010a7 <uxTopReadyPriority>
    2a66:	8b e0       	ldi	r24, 0x0B	; 11
    2a68:	8a 9f       	mul	r24, r26
    2a6a:	d0 01       	movw	r26, r0
    2a6c:	11 24       	eor	r1, r1
    2a6e:	a7 51       	subi	r26, 0x17	; 23
    2a70:	bf 4e       	sbci	r27, 0xEF	; 239
    2a72:	11 96       	adiw	r26, 0x01	; 1
    2a74:	0d 90       	ld	r0, X+
    2a76:	bc 91       	ld	r27, X
    2a78:	a0 2d       	mov	r26, r0
    2a7a:	b7 83       	std	Z+7, r27	; 0x07
    2a7c:	a6 83       	std	Z+6, r26	; 0x06
    2a7e:	16 96       	adiw	r26, 0x06	; 6
    2a80:	4d 91       	ld	r20, X+
    2a82:	5c 91       	ld	r21, X
    2a84:	17 97       	sbiw	r26, 0x07	; 7
    2a86:	51 87       	std	Z+9, r21	; 0x09
    2a88:	40 87       	std	Z+8, r20	; 0x08
    2a8a:	16 96       	adiw	r26, 0x06	; 6
    2a8c:	cd 91       	ld	r28, X+
    2a8e:	dc 91       	ld	r29, X
    2a90:	17 97       	sbiw	r26, 0x07	; 7
    2a92:	3d 83       	std	Y+5, r19	; 0x05
    2a94:	2c 83       	std	Y+4, r18	; 0x04
    2a96:	17 96       	adiw	r26, 0x07	; 7
    2a98:	3c 93       	st	X, r19
    2a9a:	2e 93       	st	-X, r18
    2a9c:	16 97       	sbiw	r26, 0x06	; 6
    2a9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2aa0:	8a 9f       	mul	r24, r26
    2aa2:	d0 01       	movw	r26, r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	a7 51       	subi	r26, 0x17	; 23
    2aa8:	bf 4e       	sbci	r27, 0xEF	; 239
    2aaa:	b5 87       	std	Z+13, r27	; 0x0d
    2aac:	a4 87       	std	Z+12, r26	; 0x0c
    2aae:	8c 91       	ld	r24, X
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	8c 93       	st	X, r24
    2ab4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ab6:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2aba:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2abe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ac0:	89 17       	cp	r24, r25
    2ac2:	18 f4       	brcc	.+6      	; 0x2aca <vTaskRemoveFromUnorderedEventList+0x12e>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xYieldPending>
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <vTaskSetTimeOutState>:
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	0f 92       	push	r0
    2ad6:	20 91 a0 10 	lds	r18, 0x10A0	; 0x8010a0 <xNumOfOverflows>
    2ada:	fc 01       	movw	r30, r24
    2adc:	20 83       	st	Z, r18
    2ade:	40 91 a8 10 	lds	r20, 0x10A8	; 0x8010a8 <xTickCount>
    2ae2:	50 91 a9 10 	lds	r21, 0x10A9	; 0x8010a9 <xTickCount+0x1>
    2ae6:	60 91 aa 10 	lds	r22, 0x10AA	; 0x8010aa <xTickCount+0x2>
    2aea:	70 91 ab 10 	lds	r23, 0x10AB	; 0x8010ab <xTickCount+0x3>
    2aee:	41 83       	std	Z+1, r20	; 0x01
    2af0:	52 83       	std	Z+2, r21	; 0x02
    2af2:	63 83       	std	Z+3, r22	; 0x03
    2af4:	74 83       	std	Z+4, r23	; 0x04
    2af6:	0f 90       	pop	r0
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	08 95       	ret

00002afc <vTaskInternalSetTimeOutState>:
    2afc:	20 91 a0 10 	lds	r18, 0x10A0	; 0x8010a0 <xNumOfOverflows>
    2b00:	fc 01       	movw	r30, r24
    2b02:	20 83       	st	Z, r18
    2b04:	40 91 a8 10 	lds	r20, 0x10A8	; 0x8010a8 <xTickCount>
    2b08:	50 91 a9 10 	lds	r21, 0x10A9	; 0x8010a9 <xTickCount+0x1>
    2b0c:	60 91 aa 10 	lds	r22, 0x10AA	; 0x8010aa <xTickCount+0x2>
    2b10:	70 91 ab 10 	lds	r23, 0x10AB	; 0x8010ab <xTickCount+0x3>
    2b14:	41 83       	std	Z+1, r20	; 0x01
    2b16:	52 83       	std	Z+2, r21	; 0x02
    2b18:	63 83       	std	Z+3, r22	; 0x03
    2b1a:	74 83       	std	Z+4, r23	; 0x04
    2b1c:	08 95       	ret

00002b1e <xTaskCheckForTimeOut>:
    2b1e:	8f 92       	push	r8
    2b20:	9f 92       	push	r9
    2b22:	af 92       	push	r10
    2b24:	bf 92       	push	r11
    2b26:	cf 92       	push	r12
    2b28:	df 92       	push	r13
    2b2a:	ef 92       	push	r14
    2b2c:	ff 92       	push	r15
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	fb 01       	movw	r30, r22
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	0f 92       	push	r0
    2b3e:	c0 90 a8 10 	lds	r12, 0x10A8	; 0x8010a8 <xTickCount>
    2b42:	d0 90 a9 10 	lds	r13, 0x10A9	; 0x8010a9 <xTickCount+0x1>
    2b46:	e0 90 aa 10 	lds	r14, 0x10AA	; 0x8010aa <xTickCount+0x2>
    2b4a:	f0 90 ab 10 	lds	r15, 0x10AB	; 0x8010ab <xTickCount+0x3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	11 96       	adiw	r26, 0x01	; 1
    2b52:	0d 91       	ld	r16, X+
    2b54:	1d 91       	ld	r17, X+
    2b56:	2d 91       	ld	r18, X+
    2b58:	3c 91       	ld	r19, X
    2b5a:	14 97       	sbiw	r26, 0x04	; 4
    2b5c:	46 01       	movw	r8, r12
    2b5e:	57 01       	movw	r10, r14
    2b60:	80 1a       	sub	r8, r16
    2b62:	91 0a       	sbc	r9, r17
    2b64:	a2 0a       	sbc	r10, r18
    2b66:	b3 0a       	sbc	r11, r19
    2b68:	40 81       	ld	r20, Z
    2b6a:	51 81       	ldd	r21, Z+1	; 0x01
    2b6c:	62 81       	ldd	r22, Z+2	; 0x02
    2b6e:	73 81       	ldd	r23, Z+3	; 0x03
    2b70:	4f 3f       	cpi	r20, 0xFF	; 255
    2b72:	bf ef       	ldi	r27, 0xFF	; 255
    2b74:	5b 07       	cpc	r21, r27
    2b76:	6b 07       	cpc	r22, r27
    2b78:	7b 07       	cpc	r23, r27
    2b7a:	39 f1       	breq	.+78     	; 0x2bca <xTaskCheckForTimeOut+0xac>
    2b7c:	ec 01       	movw	r28, r24
    2b7e:	b8 81       	ld	r27, Y
    2b80:	a0 91 a0 10 	lds	r26, 0x10A0	; 0x8010a0 <xNumOfOverflows>
    2b84:	ba 17       	cp	r27, r26
    2b86:	59 f0       	breq	.+22     	; 0x2b9e <xTaskCheckForTimeOut+0x80>
    2b88:	c0 16       	cp	r12, r16
    2b8a:	d1 06       	cpc	r13, r17
    2b8c:	e2 06       	cpc	r14, r18
    2b8e:	f3 06       	cpc	r15, r19
    2b90:	30 f0       	brcs	.+12     	; 0x2b9e <xTaskCheckForTimeOut+0x80>
    2b92:	10 82       	st	Z, r1
    2b94:	11 82       	std	Z+1, r1	; 0x01
    2b96:	12 82       	std	Z+2, r1	; 0x02
    2b98:	13 82       	std	Z+3, r1	; 0x03
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	17 c0       	rjmp	.+46     	; 0x2bcc <xTaskCheckForTimeOut+0xae>
    2b9e:	84 16       	cp	r8, r20
    2ba0:	95 06       	cpc	r9, r21
    2ba2:	a6 06       	cpc	r10, r22
    2ba4:	b7 06       	cpc	r11, r23
    2ba6:	58 f4       	brcc	.+22     	; 0x2bbe <xTaskCheckForTimeOut+0xa0>
    2ba8:	48 19       	sub	r20, r8
    2baa:	59 09       	sbc	r21, r9
    2bac:	6a 09       	sbc	r22, r10
    2bae:	7b 09       	sbc	r23, r11
    2bb0:	40 83       	st	Z, r20
    2bb2:	51 83       	std	Z+1, r21	; 0x01
    2bb4:	62 83       	std	Z+2, r22	; 0x02
    2bb6:	73 83       	std	Z+3, r23	; 0x03
    2bb8:	a1 df       	rcall	.-190    	; 0x2afc <vTaskInternalSetTimeOutState>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	07 c0       	rjmp	.+14     	; 0x2bcc <xTaskCheckForTimeOut+0xae>
    2bbe:	10 82       	st	Z, r1
    2bc0:	11 82       	std	Z+1, r1	; 0x01
    2bc2:	12 82       	std	Z+2, r1	; 0x02
    2bc4:	13 82       	std	Z+3, r1	; 0x03
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	01 c0       	rjmp	.+2      	; 0x2bcc <xTaskCheckForTimeOut+0xae>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	df 90       	pop	r13
    2bde:	cf 90       	pop	r12
    2be0:	bf 90       	pop	r11
    2be2:	af 90       	pop	r10
    2be4:	9f 90       	pop	r9
    2be6:	8f 90       	pop	r8
    2be8:	08 95       	ret

00002bea <vTaskMissedYield>:
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xYieldPending>
    2bf0:	08 95       	ret

00002bf2 <xTaskGetCurrentTaskHandle>:
    2bf2:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    2bf6:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2bfa:	08 95       	ret

00002bfc <xTaskGetSchedulerState>:
    2bfc:	80 91 a6 10 	lds	r24, 0x10A6	; 0x8010a6 <xSchedulerRunning>
    2c00:	88 23       	and	r24, r24
    2c02:	31 f0       	breq	.+12     	; 0x2c10 <xTaskGetSchedulerState+0x14>
    2c04:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <uxSchedulerSuspended>
    2c08:	81 11       	cpse	r24, r1
    2c0a:	04 c0       	rjmp	.+8      	; 0x2c14 <xTaskGetSchedulerState+0x18>
    2c0c:	82 e0       	ldi	r24, 0x02	; 2
    2c0e:	08 95       	ret
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	08 95       	ret
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	08 95       	ret

00002c18 <xTaskPriorityDisinherit>:
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	fc 01       	movw	r30, r24
    2c22:	89 2b       	or	r24, r25
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <xTaskPriorityDisinherit+0x10>
    2c26:	49 c0       	rjmp	.+146    	; 0x2cba <xTaskPriorityDisinherit+0xa2>
    2c28:	86 a5       	ldd	r24, Z+46	; 0x2e
    2c2a:	81 50       	subi	r24, 0x01	; 1
    2c2c:	86 a7       	std	Z+46, r24	; 0x2e
    2c2e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c30:	95 a5       	ldd	r25, Z+45	; 0x2d
    2c32:	29 17       	cp	r18, r25
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <xTaskPriorityDisinherit+0x20>
    2c36:	43 c0       	rjmp	.+134    	; 0x2cbe <xTaskPriorityDisinherit+0xa6>
    2c38:	81 11       	cpse	r24, r1
    2c3a:	43 c0       	rjmp	.+134    	; 0x2cc2 <xTaskPriorityDisinherit+0xaa>
    2c3c:	ef 01       	movw	r28, r30
    2c3e:	8f 01       	movw	r16, r30
    2c40:	0e 5f       	subi	r16, 0xFE	; 254
    2c42:	1f 4f       	sbci	r17, 0xFF	; 255
    2c44:	c8 01       	movw	r24, r16
    2c46:	0e 94 95 06 	call	0xd2a	; 0xd2a <uxListRemove>
    2c4a:	ed a5       	ldd	r30, Y+45	; 0x2d
    2c4c:	ea 8f       	std	Y+26, r30	; 0x1a
    2c4e:	8a e0       	ldi	r24, 0x0A	; 10
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	a0 e0       	ldi	r26, 0x00	; 0
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	8e 1b       	sub	r24, r30
    2c58:	91 09       	sbc	r25, r1
    2c5a:	a1 09       	sbc	r26, r1
    2c5c:	b1 09       	sbc	r27, r1
    2c5e:	8e 87       	std	Y+14, r24	; 0x0e
    2c60:	9f 87       	std	Y+15, r25	; 0x0f
    2c62:	a8 8b       	std	Y+16, r26	; 0x10
    2c64:	b9 8b       	std	Y+17, r27	; 0x11
    2c66:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    2c6a:	8e 17       	cp	r24, r30
    2c6c:	10 f4       	brcc	.+4      	; 0x2c72 <xTaskPriorityDisinherit+0x5a>
    2c6e:	e0 93 a7 10 	sts	0x10A7, r30	; 0x8010a7 <uxTopReadyPriority>
    2c72:	8b e0       	ldi	r24, 0x0B	; 11
    2c74:	8e 9f       	mul	r24, r30
    2c76:	f0 01       	movw	r30, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	e7 51       	subi	r30, 0x17	; 23
    2c7c:	ff 4e       	sbci	r31, 0xEF	; 239
    2c7e:	01 80       	ldd	r0, Z+1	; 0x01
    2c80:	f2 81       	ldd	r31, Z+2	; 0x02
    2c82:	e0 2d       	mov	r30, r0
    2c84:	ff 83       	std	Y+7, r31	; 0x07
    2c86:	ee 83       	std	Y+6, r30	; 0x06
    2c88:	26 81       	ldd	r18, Z+6	; 0x06
    2c8a:	37 81       	ldd	r19, Z+7	; 0x07
    2c8c:	39 87       	std	Y+9, r19	; 0x09
    2c8e:	28 87       	std	Y+8, r18	; 0x08
    2c90:	a6 81       	ldd	r26, Z+6	; 0x06
    2c92:	b7 81       	ldd	r27, Z+7	; 0x07
    2c94:	15 96       	adiw	r26, 0x05	; 5
    2c96:	1c 93       	st	X, r17
    2c98:	0e 93       	st	-X, r16
    2c9a:	14 97       	sbiw	r26, 0x04	; 4
    2c9c:	17 83       	std	Z+7, r17	; 0x07
    2c9e:	06 83       	std	Z+6, r16	; 0x06
    2ca0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ca2:	8e 9f       	mul	r24, r30
    2ca4:	f0 01       	movw	r30, r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	e7 51       	subi	r30, 0x17	; 23
    2caa:	ff 4e       	sbci	r31, 0xEF	; 239
    2cac:	fd 87       	std	Y+13, r31	; 0x0d
    2cae:	ec 87       	std	Y+12, r30	; 0x0c
    2cb0:	80 81       	ld	r24, Z
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	80 83       	st	Z, r24
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	05 c0       	rjmp	.+10     	; 0x2cc4 <xTaskPriorityDisinherit+0xac>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <xTaskPriorityDisinherit+0xac>
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	01 c0       	rjmp	.+2      	; 0x2cc4 <xTaskPriorityDisinherit+0xac>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	08 95       	ret

00002cce <uxTaskResetEventItemValue>:
    2cce:	cf 92       	push	r12
    2cd0:	df 92       	push	r13
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2cda:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2cde:	66 85       	ldd	r22, Z+14	; 0x0e
    2ce0:	77 85       	ldd	r23, Z+15	; 0x0f
    2ce2:	80 89       	ldd	r24, Z+16	; 0x10
    2ce4:	91 89       	ldd	r25, Z+17	; 0x11
    2ce6:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2cea:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2cee:	a0 91 57 11 	lds	r26, 0x1157	; 0x801157 <pxCurrentTCB>
    2cf2:	b0 91 58 11 	lds	r27, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2cf6:	5a 96       	adiw	r26, 0x1a	; 26
    2cf8:	2c 91       	ld	r18, X
    2cfa:	0f 2e       	mov	r0, r31
    2cfc:	fa e0       	ldi	r31, 0x0A	; 10
    2cfe:	cf 2e       	mov	r12, r31
    2d00:	d1 2c       	mov	r13, r1
    2d02:	e1 2c       	mov	r14, r1
    2d04:	f1 2c       	mov	r15, r1
    2d06:	f0 2d       	mov	r31, r0
    2d08:	c2 1a       	sub	r12, r18
    2d0a:	d1 08       	sbc	r13, r1
    2d0c:	e1 08       	sbc	r14, r1
    2d0e:	f1 08       	sbc	r15, r1
    2d10:	c6 86       	std	Z+14, r12	; 0x0e
    2d12:	d7 86       	std	Z+15, r13	; 0x0f
    2d14:	e0 8a       	std	Z+16, r14	; 0x10
    2d16:	f1 8a       	std	Z+17, r15	; 0x11
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
    2d20:	08 95       	ret

00002d22 <xTaskGenericNotifyWait>:
    2d22:	4f 92       	push	r4
    2d24:	5f 92       	push	r5
    2d26:	6f 92       	push	r6
    2d28:	7f 92       	push	r7
    2d2a:	af 92       	push	r10
    2d2c:	bf 92       	push	r11
    2d2e:	cf 92       	push	r12
    2d30:	df 92       	push	r13
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	28 01       	movw	r4, r16
    2d40:	39 01       	movw	r6, r18
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	0f 92       	push	r0
    2d48:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2d4c:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2d50:	c8 2f       	mov	r28, r24
    2d52:	d0 e0       	ldi	r29, 0x00	; 0
    2d54:	ec 0f       	add	r30, r28
    2d56:	fd 1f       	adc	r31, r29
    2d58:	83 a9       	ldd	r24, Z+51	; 0x33
    2d5a:	82 30       	cpi	r24, 0x02	; 2
    2d5c:	71 f1       	breq	.+92     	; 0x2dba <xTaskGenericNotifyWait+0x98>
    2d5e:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2d62:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2d66:	ce 01       	movw	r24, r28
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	e8 0f       	add	r30, r24
    2d72:	f9 1f       	adc	r31, r25
    2d74:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d76:	90 a9       	ldd	r25, Z+48	; 0x30
    2d78:	a1 a9       	ldd	r26, Z+49	; 0x31
    2d7a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2d7c:	40 95       	com	r20
    2d7e:	50 95       	com	r21
    2d80:	60 95       	com	r22
    2d82:	70 95       	com	r23
    2d84:	48 23       	and	r20, r24
    2d86:	59 23       	and	r21, r25
    2d88:	6a 23       	and	r22, r26
    2d8a:	7b 23       	and	r23, r27
    2d8c:	47 a7       	std	Z+47, r20	; 0x2f
    2d8e:	50 ab       	std	Z+48, r21	; 0x30
    2d90:	61 ab       	std	Z+49, r22	; 0x31
    2d92:	72 ab       	std	Z+50, r23	; 0x32
    2d94:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2d98:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2d9c:	ec 0f       	add	r30, r28
    2d9e:	fd 1f       	adc	r31, r29
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	83 ab       	std	Z+51, r24	; 0x33
    2da4:	a1 14       	cp	r10, r1
    2da6:	b1 04       	cpc	r11, r1
    2da8:	c1 04       	cpc	r12, r1
    2daa:	d1 04       	cpc	r13, r1
    2dac:	31 f0       	breq	.+12     	; 0x2dba <xTaskGenericNotifyWait+0x98>
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	c6 01       	movw	r24, r12
    2db2:	b5 01       	movw	r22, r10
    2db4:	7a d8       	rcall	.-3852   	; 0x1eaa <prvAddCurrentTaskToDelayedList>
    2db6:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    2dba:	0f 90       	pop	r0
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	0f 92       	push	r0
    2dc4:	e1 14       	cp	r14, r1
    2dc6:	f1 04       	cpc	r15, r1
    2dc8:	a1 f0       	breq	.+40     	; 0x2df2 <xTaskGenericNotifyWait+0xd0>
    2dca:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2dce:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	e8 0f       	add	r30, r24
    2dde:	f9 1f       	adc	r31, r25
    2de0:	87 a5       	ldd	r24, Z+47	; 0x2f
    2de2:	90 a9       	ldd	r25, Z+48	; 0x30
    2de4:	a1 a9       	ldd	r26, Z+49	; 0x31
    2de6:	b2 a9       	ldd	r27, Z+50	; 0x32
    2de8:	f7 01       	movw	r30, r14
    2dea:	80 83       	st	Z, r24
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	a2 83       	std	Z+2, r26	; 0x02
    2df0:	b3 83       	std	Z+3, r27	; 0x03
    2df2:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2df6:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2dfa:	ec 0f       	add	r30, r28
    2dfc:	fd 1f       	adc	r31, r29
    2dfe:	83 a9       	ldd	r24, Z+51	; 0x33
    2e00:	82 30       	cpi	r24, 0x02	; 2
    2e02:	e9 f4       	brne	.+58     	; 0x2e3e <xTaskGenericNotifyWait+0x11c>
    2e04:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    2e08:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	e8 0f       	add	r30, r24
    2e18:	f9 1f       	adc	r31, r25
    2e1a:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e1c:	90 a9       	ldd	r25, Z+48	; 0x30
    2e1e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e20:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e22:	40 94       	com	r4
    2e24:	50 94       	com	r5
    2e26:	60 94       	com	r6
    2e28:	70 94       	com	r7
    2e2a:	48 22       	and	r4, r24
    2e2c:	59 22       	and	r5, r25
    2e2e:	6a 22       	and	r6, r26
    2e30:	7b 22       	and	r7, r27
    2e32:	47 a6       	std	Z+47, r4	; 0x2f
    2e34:	50 aa       	std	Z+48, r5	; 0x30
    2e36:	61 aa       	std	Z+49, r6	; 0x31
    2e38:	72 aa       	std	Z+50, r7	; 0x32
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	01 c0       	rjmp	.+2      	; 0x2e40 <xTaskGenericNotifyWait+0x11e>
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	20 91 57 11 	lds	r18, 0x1157	; 0x801157 <pxCurrentTCB>
    2e44:	30 91 58 11 	lds	r19, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    2e48:	c2 0f       	add	r28, r18
    2e4a:	d3 1f       	adc	r29, r19
    2e4c:	1b aa       	std	Y+51, r1	; 0x33
    2e4e:	0f 90       	pop	r0
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	df 90       	pop	r13
    2e60:	cf 90       	pop	r12
    2e62:	bf 90       	pop	r11
    2e64:	af 90       	pop	r10
    2e66:	7f 90       	pop	r7
    2e68:	6f 90       	pop	r6
    2e6a:	5f 90       	pop	r5
    2e6c:	4f 90       	pop	r4
    2e6e:	08 95       	ret

00002e70 <xTaskGenericNotify>:
    2e70:	8f 92       	push	r8
    2e72:	9f 92       	push	r9
    2e74:	af 92       	push	r10
    2e76:	bf 92       	push	r11
    2e78:	ef 92       	push	r14
    2e7a:	ff 92       	push	r15
    2e7c:	0f 93       	push	r16
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	dc 01       	movw	r26, r24
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	0f 92       	push	r0
    2e8a:	e1 14       	cp	r14, r1
    2e8c:	f1 04       	cpc	r15, r1
    2e8e:	89 f0       	breq	.+34     	; 0x2eb2 <xTaskGenericNotify+0x42>
    2e90:	e6 2f       	mov	r30, r22
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	ee 0f       	add	r30, r30
    2e96:	ff 1f       	adc	r31, r31
    2e98:	ee 0f       	add	r30, r30
    2e9a:	ff 1f       	adc	r31, r31
    2e9c:	e8 0f       	add	r30, r24
    2e9e:	f9 1f       	adc	r31, r25
    2ea0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ea2:	90 a8       	ldd	r9, Z+48	; 0x30
    2ea4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ea6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ea8:	f7 01       	movw	r30, r14
    2eaa:	80 82       	st	Z, r8
    2eac:	91 82       	std	Z+1, r9	; 0x01
    2eae:	a2 82       	std	Z+2, r10	; 0x02
    2eb0:	b3 82       	std	Z+3, r11	; 0x03
    2eb2:	70 e0       	ldi	r23, 0x00	; 0
    2eb4:	fd 01       	movw	r30, r26
    2eb6:	e6 0f       	add	r30, r22
    2eb8:	f7 1f       	adc	r31, r23
    2eba:	83 a9       	ldd	r24, Z+51	; 0x33
    2ebc:	92 e0       	ldi	r25, 0x02	; 2
    2ebe:	93 ab       	std	Z+51, r25	; 0x33
    2ec0:	02 30       	cpi	r16, 0x02	; 2
    2ec2:	01 f1       	breq	.+64     	; 0x2f04 <xTaskGenericNotify+0x94>
    2ec4:	18 f4       	brcc	.+6      	; 0x2ecc <xTaskGenericNotify+0x5c>
    2ec6:	01 30       	cpi	r16, 0x01	; 1
    2ec8:	31 f0       	breq	.+12     	; 0x2ed6 <xTaskGenericNotify+0x66>
    2eca:	4d c0       	rjmp	.+154    	; 0x2f66 <xTaskGenericNotify+0xf6>
    2ecc:	03 30       	cpi	r16, 0x03	; 3
    2ece:	79 f1       	breq	.+94     	; 0x2f2e <xTaskGenericNotify+0xbe>
    2ed0:	04 30       	cpi	r16, 0x04	; 4
    2ed2:	d1 f1       	breq	.+116    	; 0x2f48 <xTaskGenericNotify+0xd8>
    2ed4:	48 c0       	rjmp	.+144    	; 0x2f66 <xTaskGenericNotify+0xf6>
    2ed6:	66 0f       	add	r22, r22
    2ed8:	77 1f       	adc	r23, r23
    2eda:	66 0f       	add	r22, r22
    2edc:	77 1f       	adc	r23, r23
    2ede:	fd 01       	movw	r30, r26
    2ee0:	e6 0f       	add	r30, r22
    2ee2:	f7 1f       	adc	r31, r23
    2ee4:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ee6:	90 a8       	ldd	r9, Z+48	; 0x30
    2ee8:	a1 a8       	ldd	r10, Z+49	; 0x31
    2eea:	b2 a8       	ldd	r11, Z+50	; 0x32
    2eec:	ba 01       	movw	r22, r20
    2eee:	a9 01       	movw	r20, r18
    2ef0:	48 29       	or	r20, r8
    2ef2:	59 29       	or	r21, r9
    2ef4:	6a 29       	or	r22, r10
    2ef6:	7b 29       	or	r23, r11
    2ef8:	47 a7       	std	Z+47, r20	; 0x2f
    2efa:	50 ab       	std	Z+48, r21	; 0x30
    2efc:	61 ab       	std	Z+49, r22	; 0x31
    2efe:	72 ab       	std	Z+50, r23	; 0x32
    2f00:	01 e0       	ldi	r16, 0x01	; 1
    2f02:	34 c0       	rjmp	.+104    	; 0x2f6c <xTaskGenericNotify+0xfc>
    2f04:	66 0f       	add	r22, r22
    2f06:	77 1f       	adc	r23, r23
    2f08:	66 0f       	add	r22, r22
    2f0a:	77 1f       	adc	r23, r23
    2f0c:	fd 01       	movw	r30, r26
    2f0e:	e6 0f       	add	r30, r22
    2f10:	f7 1f       	adc	r31, r23
    2f12:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f14:	50 a9       	ldd	r21, Z+48	; 0x30
    2f16:	61 a9       	ldd	r22, Z+49	; 0x31
    2f18:	72 a9       	ldd	r23, Z+50	; 0x32
    2f1a:	4f 5f       	subi	r20, 0xFF	; 255
    2f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1e:	6f 4f       	sbci	r22, 0xFF	; 255
    2f20:	7f 4f       	sbci	r23, 0xFF	; 255
    2f22:	47 a7       	std	Z+47, r20	; 0x2f
    2f24:	50 ab       	std	Z+48, r21	; 0x30
    2f26:	61 ab       	std	Z+49, r22	; 0x31
    2f28:	72 ab       	std	Z+50, r23	; 0x32
    2f2a:	01 e0       	ldi	r16, 0x01	; 1
    2f2c:	1f c0       	rjmp	.+62     	; 0x2f6c <xTaskGenericNotify+0xfc>
    2f2e:	66 0f       	add	r22, r22
    2f30:	77 1f       	adc	r23, r23
    2f32:	66 0f       	add	r22, r22
    2f34:	77 1f       	adc	r23, r23
    2f36:	fd 01       	movw	r30, r26
    2f38:	e6 0f       	add	r30, r22
    2f3a:	f7 1f       	adc	r31, r23
    2f3c:	27 a7       	std	Z+47, r18	; 0x2f
    2f3e:	30 ab       	std	Z+48, r19	; 0x30
    2f40:	41 ab       	std	Z+49, r20	; 0x31
    2f42:	52 ab       	std	Z+50, r21	; 0x32
    2f44:	01 e0       	ldi	r16, 0x01	; 1
    2f46:	12 c0       	rjmp	.+36     	; 0x2f6c <xTaskGenericNotify+0xfc>
    2f48:	82 30       	cpi	r24, 0x02	; 2
    2f4a:	79 f0       	breq	.+30     	; 0x2f6a <xTaskGenericNotify+0xfa>
    2f4c:	66 0f       	add	r22, r22
    2f4e:	77 1f       	adc	r23, r23
    2f50:	66 0f       	add	r22, r22
    2f52:	77 1f       	adc	r23, r23
    2f54:	fd 01       	movw	r30, r26
    2f56:	e6 0f       	add	r30, r22
    2f58:	f7 1f       	adc	r31, r23
    2f5a:	27 a7       	std	Z+47, r18	; 0x2f
    2f5c:	30 ab       	std	Z+48, r19	; 0x30
    2f5e:	41 ab       	std	Z+49, r20	; 0x31
    2f60:	52 ab       	std	Z+50, r21	; 0x32
    2f62:	01 e0       	ldi	r16, 0x01	; 1
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <xTaskGenericNotify+0xfc>
    2f66:	01 e0       	ldi	r16, 0x01	; 1
    2f68:	01 c0       	rjmp	.+2      	; 0x2f6c <xTaskGenericNotify+0xfc>
    2f6a:	00 e0       	ldi	r16, 0x00	; 0
    2f6c:	81 30       	cpi	r24, 0x01	; 1
    2f6e:	09 f0       	breq	.+2      	; 0x2f72 <xTaskGenericNotify+0x102>
    2f70:	69 c0       	rjmp	.+210    	; 0x3044 <xTaskGenericNotify+0x1d4>
    2f72:	1c 96       	adiw	r26, 0x0c	; 12
    2f74:	ed 91       	ld	r30, X+
    2f76:	fc 91       	ld	r31, X
    2f78:	1d 97       	sbiw	r26, 0x0d	; 13
    2f7a:	16 96       	adiw	r26, 0x06	; 6
    2f7c:	cd 91       	ld	r28, X+
    2f7e:	dc 91       	ld	r29, X
    2f80:	17 97       	sbiw	r26, 0x07	; 7
    2f82:	18 96       	adiw	r26, 0x08	; 8
    2f84:	8d 91       	ld	r24, X+
    2f86:	9c 91       	ld	r25, X
    2f88:	19 97       	sbiw	r26, 0x09	; 9
    2f8a:	9f 83       	std	Y+7, r25	; 0x07
    2f8c:	8e 83       	std	Y+6, r24	; 0x06
    2f8e:	18 96       	adiw	r26, 0x08	; 8
    2f90:	cd 91       	ld	r28, X+
    2f92:	dc 91       	ld	r29, X
    2f94:	19 97       	sbiw	r26, 0x09	; 9
    2f96:	16 96       	adiw	r26, 0x06	; 6
    2f98:	8d 91       	ld	r24, X+
    2f9a:	9c 91       	ld	r25, X
    2f9c:	17 97       	sbiw	r26, 0x07	; 7
    2f9e:	9d 83       	std	Y+5, r25	; 0x05
    2fa0:	8c 83       	std	Y+4, r24	; 0x04
    2fa2:	81 81       	ldd	r24, Z+1	; 0x01
    2fa4:	92 81       	ldd	r25, Z+2	; 0x02
    2fa6:	9d 01       	movw	r18, r26
    2fa8:	2e 5f       	subi	r18, 0xFE	; 254
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
    2fac:	82 17       	cp	r24, r18
    2fae:	93 07       	cpc	r25, r19
    2fb0:	31 f4       	brne	.+12     	; 0x2fbe <xTaskGenericNotify+0x14e>
    2fb2:	18 96       	adiw	r26, 0x08	; 8
    2fb4:	8d 91       	ld	r24, X+
    2fb6:	9c 91       	ld	r25, X
    2fb8:	19 97       	sbiw	r26, 0x09	; 9
    2fba:	92 83       	std	Z+2, r25	; 0x02
    2fbc:	81 83       	std	Z+1, r24	; 0x01
    2fbe:	1d 96       	adiw	r26, 0x0d	; 13
    2fc0:	1c 92       	st	X, r1
    2fc2:	1e 92       	st	-X, r1
    2fc4:	1c 97       	sbiw	r26, 0x0c	; 12
    2fc6:	80 81       	ld	r24, Z
    2fc8:	81 50       	subi	r24, 0x01	; 1
    2fca:	80 83       	st	Z, r24
    2fcc:	5a 96       	adiw	r26, 0x1a	; 26
    2fce:	ec 91       	ld	r30, X
    2fd0:	5a 97       	sbiw	r26, 0x1a	; 26
    2fd2:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    2fd6:	8e 17       	cp	r24, r30
    2fd8:	10 f4       	brcc	.+4      	; 0x2fde <xTaskGenericNotify+0x16e>
    2fda:	e0 93 a7 10 	sts	0x10A7, r30	; 0x8010a7 <uxTopReadyPriority>
    2fde:	8b e0       	ldi	r24, 0x0B	; 11
    2fe0:	8e 9f       	mul	r24, r30
    2fe2:	f0 01       	movw	r30, r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	e7 51       	subi	r30, 0x17	; 23
    2fe8:	ff 4e       	sbci	r31, 0xEF	; 239
    2fea:	01 80       	ldd	r0, Z+1	; 0x01
    2fec:	f2 81       	ldd	r31, Z+2	; 0x02
    2fee:	e0 2d       	mov	r30, r0
    2ff0:	17 96       	adiw	r26, 0x07	; 7
    2ff2:	fc 93       	st	X, r31
    2ff4:	ee 93       	st	-X, r30
    2ff6:	16 97       	sbiw	r26, 0x06	; 6
    2ff8:	46 81       	ldd	r20, Z+6	; 0x06
    2ffa:	57 81       	ldd	r21, Z+7	; 0x07
    2ffc:	19 96       	adiw	r26, 0x09	; 9
    2ffe:	5c 93       	st	X, r21
    3000:	4e 93       	st	-X, r20
    3002:	18 97       	sbiw	r26, 0x08	; 8
    3004:	c6 81       	ldd	r28, Z+6	; 0x06
    3006:	d7 81       	ldd	r29, Z+7	; 0x07
    3008:	3d 83       	std	Y+5, r19	; 0x05
    300a:	2c 83       	std	Y+4, r18	; 0x04
    300c:	37 83       	std	Z+7, r19	; 0x07
    300e:	26 83       	std	Z+6, r18	; 0x06
    3010:	5a 96       	adiw	r26, 0x1a	; 26
    3012:	ec 91       	ld	r30, X
    3014:	5a 97       	sbiw	r26, 0x1a	; 26
    3016:	8e 9f       	mul	r24, r30
    3018:	f0 01       	movw	r30, r0
    301a:	11 24       	eor	r1, r1
    301c:	e7 51       	subi	r30, 0x17	; 23
    301e:	ff 4e       	sbci	r31, 0xEF	; 239
    3020:	1d 96       	adiw	r26, 0x0d	; 13
    3022:	fc 93       	st	X, r31
    3024:	ee 93       	st	-X, r30
    3026:	1c 97       	sbiw	r26, 0x0c	; 12
    3028:	80 81       	ld	r24, Z
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	80 83       	st	Z, r24
    302e:	5a 96       	adiw	r26, 0x1a	; 26
    3030:	9c 91       	ld	r25, X
    3032:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    3036:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    303a:	82 8d       	ldd	r24, Z+26	; 0x1a
    303c:	89 17       	cp	r24, r25
    303e:	10 f4       	brcc	.+4      	; 0x3044 <xTaskGenericNotify+0x1d4>
    3040:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    3044:	0f 90       	pop	r0
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	80 2f       	mov	r24, r16
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	bf 90       	pop	r11
    3056:	af 90       	pop	r10
    3058:	9f 90       	pop	r9
    305a:	8f 90       	pop	r8
    305c:	08 95       	ret

0000305e <xTaskGenericNotifyFromISR>:
    305e:	8f 92       	push	r8
    3060:	9f 92       	push	r9
    3062:	af 92       	push	r10
    3064:	bf 92       	push	r11
    3066:	cf 92       	push	r12
    3068:	df 92       	push	r13
    306a:	ef 92       	push	r14
    306c:	ff 92       	push	r15
    306e:	0f 93       	push	r16
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	dc 01       	movw	r26, r24
    3076:	e1 14       	cp	r14, r1
    3078:	f1 04       	cpc	r15, r1
    307a:	89 f0       	breq	.+34     	; 0x309e <xTaskGenericNotifyFromISR+0x40>
    307c:	e6 2f       	mov	r30, r22
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	ee 0f       	add	r30, r30
    3082:	ff 1f       	adc	r31, r31
    3084:	ee 0f       	add	r30, r30
    3086:	ff 1f       	adc	r31, r31
    3088:	e8 0f       	add	r30, r24
    308a:	f9 1f       	adc	r31, r25
    308c:	87 a4       	ldd	r8, Z+47	; 0x2f
    308e:	90 a8       	ldd	r9, Z+48	; 0x30
    3090:	a1 a8       	ldd	r10, Z+49	; 0x31
    3092:	b2 a8       	ldd	r11, Z+50	; 0x32
    3094:	f7 01       	movw	r30, r14
    3096:	80 82       	st	Z, r8
    3098:	91 82       	std	Z+1, r9	; 0x01
    309a:	a2 82       	std	Z+2, r10	; 0x02
    309c:	b3 82       	std	Z+3, r11	; 0x03
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	fd 01       	movw	r30, r26
    30a2:	e6 0f       	add	r30, r22
    30a4:	f7 1f       	adc	r31, r23
    30a6:	93 a9       	ldd	r25, Z+51	; 0x33
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	83 ab       	std	Z+51, r24	; 0x33
    30ac:	02 30       	cpi	r16, 0x02	; 2
    30ae:	01 f1       	breq	.+64     	; 0x30f0 <xTaskGenericNotifyFromISR+0x92>
    30b0:	18 f4       	brcc	.+6      	; 0x30b8 <xTaskGenericNotifyFromISR+0x5a>
    30b2:	01 30       	cpi	r16, 0x01	; 1
    30b4:	31 f0       	breq	.+12     	; 0x30c2 <xTaskGenericNotifyFromISR+0x64>
    30b6:	4d c0       	rjmp	.+154    	; 0x3152 <xTaskGenericNotifyFromISR+0xf4>
    30b8:	03 30       	cpi	r16, 0x03	; 3
    30ba:	79 f1       	breq	.+94     	; 0x311a <xTaskGenericNotifyFromISR+0xbc>
    30bc:	04 30       	cpi	r16, 0x04	; 4
    30be:	d1 f1       	breq	.+116    	; 0x3134 <xTaskGenericNotifyFromISR+0xd6>
    30c0:	48 c0       	rjmp	.+144    	; 0x3152 <xTaskGenericNotifyFromISR+0xf4>
    30c2:	66 0f       	add	r22, r22
    30c4:	77 1f       	adc	r23, r23
    30c6:	66 0f       	add	r22, r22
    30c8:	77 1f       	adc	r23, r23
    30ca:	fd 01       	movw	r30, r26
    30cc:	e6 0f       	add	r30, r22
    30ce:	f7 1f       	adc	r31, r23
    30d0:	87 a4       	ldd	r8, Z+47	; 0x2f
    30d2:	90 a8       	ldd	r9, Z+48	; 0x30
    30d4:	a1 a8       	ldd	r10, Z+49	; 0x31
    30d6:	b2 a8       	ldd	r11, Z+50	; 0x32
    30d8:	ba 01       	movw	r22, r20
    30da:	a9 01       	movw	r20, r18
    30dc:	48 29       	or	r20, r8
    30de:	59 29       	or	r21, r9
    30e0:	6a 29       	or	r22, r10
    30e2:	7b 29       	or	r23, r11
    30e4:	47 a7       	std	Z+47, r20	; 0x2f
    30e6:	50 ab       	std	Z+48, r21	; 0x30
    30e8:	61 ab       	std	Z+49, r22	; 0x31
    30ea:	72 ab       	std	Z+50, r23	; 0x32
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	34 c0       	rjmp	.+104    	; 0x3158 <xTaskGenericNotifyFromISR+0xfa>
    30f0:	66 0f       	add	r22, r22
    30f2:	77 1f       	adc	r23, r23
    30f4:	66 0f       	add	r22, r22
    30f6:	77 1f       	adc	r23, r23
    30f8:	fd 01       	movw	r30, r26
    30fa:	e6 0f       	add	r30, r22
    30fc:	f7 1f       	adc	r31, r23
    30fe:	47 a5       	ldd	r20, Z+47	; 0x2f
    3100:	50 a9       	ldd	r21, Z+48	; 0x30
    3102:	61 a9       	ldd	r22, Z+49	; 0x31
    3104:	72 a9       	ldd	r23, Z+50	; 0x32
    3106:	4f 5f       	subi	r20, 0xFF	; 255
    3108:	5f 4f       	sbci	r21, 0xFF	; 255
    310a:	6f 4f       	sbci	r22, 0xFF	; 255
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	47 a7       	std	Z+47, r20	; 0x2f
    3110:	50 ab       	std	Z+48, r21	; 0x30
    3112:	61 ab       	std	Z+49, r22	; 0x31
    3114:	72 ab       	std	Z+50, r23	; 0x32
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	1f c0       	rjmp	.+62     	; 0x3158 <xTaskGenericNotifyFromISR+0xfa>
    311a:	66 0f       	add	r22, r22
    311c:	77 1f       	adc	r23, r23
    311e:	66 0f       	add	r22, r22
    3120:	77 1f       	adc	r23, r23
    3122:	fd 01       	movw	r30, r26
    3124:	e6 0f       	add	r30, r22
    3126:	f7 1f       	adc	r31, r23
    3128:	27 a7       	std	Z+47, r18	; 0x2f
    312a:	30 ab       	std	Z+48, r19	; 0x30
    312c:	41 ab       	std	Z+49, r20	; 0x31
    312e:	52 ab       	std	Z+50, r21	; 0x32
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	12 c0       	rjmp	.+36     	; 0x3158 <xTaskGenericNotifyFromISR+0xfa>
    3134:	92 30       	cpi	r25, 0x02	; 2
    3136:	79 f0       	breq	.+30     	; 0x3156 <xTaskGenericNotifyFromISR+0xf8>
    3138:	66 0f       	add	r22, r22
    313a:	77 1f       	adc	r23, r23
    313c:	66 0f       	add	r22, r22
    313e:	77 1f       	adc	r23, r23
    3140:	fd 01       	movw	r30, r26
    3142:	e6 0f       	add	r30, r22
    3144:	f7 1f       	adc	r31, r23
    3146:	27 a7       	std	Z+47, r18	; 0x2f
    3148:	30 ab       	std	Z+48, r19	; 0x30
    314a:	41 ab       	std	Z+49, r20	; 0x31
    314c:	52 ab       	std	Z+50, r21	; 0x32
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	03 c0       	rjmp	.+6      	; 0x3158 <xTaskGenericNotifyFromISR+0xfa>
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <xTaskGenericNotifyFromISR+0xfa>
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	91 30       	cpi	r25, 0x01	; 1
    315a:	09 f0       	breq	.+2      	; 0x315e <xTaskGenericNotifyFromISR+0x100>
    315c:	96 c0       	rjmp	.+300    	; 0x328a <xTaskGenericNotifyFromISR+0x22c>
    315e:	90 91 98 10 	lds	r25, 0x1098	; 0x801098 <uxSchedulerSuspended>
    3162:	91 11       	cpse	r25, r1
    3164:	5f c0       	rjmp	.+190    	; 0x3224 <xTaskGenericNotifyFromISR+0x1c6>
    3166:	1c 96       	adiw	r26, 0x0c	; 12
    3168:	ed 91       	ld	r30, X+
    316a:	fc 91       	ld	r31, X
    316c:	1d 97       	sbiw	r26, 0x0d	; 13
    316e:	16 96       	adiw	r26, 0x06	; 6
    3170:	cd 91       	ld	r28, X+
    3172:	dc 91       	ld	r29, X
    3174:	17 97       	sbiw	r26, 0x07	; 7
    3176:	18 96       	adiw	r26, 0x08	; 8
    3178:	2d 91       	ld	r18, X+
    317a:	3c 91       	ld	r19, X
    317c:	19 97       	sbiw	r26, 0x09	; 9
    317e:	3f 83       	std	Y+7, r19	; 0x07
    3180:	2e 83       	std	Y+6, r18	; 0x06
    3182:	18 96       	adiw	r26, 0x08	; 8
    3184:	cd 91       	ld	r28, X+
    3186:	dc 91       	ld	r29, X
    3188:	19 97       	sbiw	r26, 0x09	; 9
    318a:	16 96       	adiw	r26, 0x06	; 6
    318c:	2d 91       	ld	r18, X+
    318e:	3c 91       	ld	r19, X
    3190:	17 97       	sbiw	r26, 0x07	; 7
    3192:	3d 83       	std	Y+5, r19	; 0x05
    3194:	2c 83       	std	Y+4, r18	; 0x04
    3196:	41 81       	ldd	r20, Z+1	; 0x01
    3198:	52 81       	ldd	r21, Z+2	; 0x02
    319a:	9d 01       	movw	r18, r26
    319c:	2e 5f       	subi	r18, 0xFE	; 254
    319e:	3f 4f       	sbci	r19, 0xFF	; 255
    31a0:	42 17       	cp	r20, r18
    31a2:	53 07       	cpc	r21, r19
    31a4:	31 f4       	brne	.+12     	; 0x31b2 <xTaskGenericNotifyFromISR+0x154>
    31a6:	18 96       	adiw	r26, 0x08	; 8
    31a8:	4d 91       	ld	r20, X+
    31aa:	5c 91       	ld	r21, X
    31ac:	19 97       	sbiw	r26, 0x09	; 9
    31ae:	52 83       	std	Z+2, r21	; 0x02
    31b0:	41 83       	std	Z+1, r20	; 0x01
    31b2:	1d 96       	adiw	r26, 0x0d	; 13
    31b4:	1c 92       	st	X, r1
    31b6:	1e 92       	st	-X, r1
    31b8:	1c 97       	sbiw	r26, 0x0c	; 12
    31ba:	90 81       	ld	r25, Z
    31bc:	91 50       	subi	r25, 0x01	; 1
    31be:	90 83       	st	Z, r25
    31c0:	5a 96       	adiw	r26, 0x1a	; 26
    31c2:	ec 91       	ld	r30, X
    31c4:	5a 97       	sbiw	r26, 0x1a	; 26
    31c6:	90 91 a7 10 	lds	r25, 0x10A7	; 0x8010a7 <uxTopReadyPriority>
    31ca:	9e 17       	cp	r25, r30
    31cc:	10 f4       	brcc	.+4      	; 0x31d2 <xTaskGenericNotifyFromISR+0x174>
    31ce:	e0 93 a7 10 	sts	0x10A7, r30	; 0x8010a7 <uxTopReadyPriority>
    31d2:	9b e0       	ldi	r25, 0x0B	; 11
    31d4:	9e 9f       	mul	r25, r30
    31d6:	f0 01       	movw	r30, r0
    31d8:	11 24       	eor	r1, r1
    31da:	e7 51       	subi	r30, 0x17	; 23
    31dc:	ff 4e       	sbci	r31, 0xEF	; 239
    31de:	01 80       	ldd	r0, Z+1	; 0x01
    31e0:	f2 81       	ldd	r31, Z+2	; 0x02
    31e2:	e0 2d       	mov	r30, r0
    31e4:	17 96       	adiw	r26, 0x07	; 7
    31e6:	fc 93       	st	X, r31
    31e8:	ee 93       	st	-X, r30
    31ea:	16 97       	sbiw	r26, 0x06	; 6
    31ec:	46 81       	ldd	r20, Z+6	; 0x06
    31ee:	57 81       	ldd	r21, Z+7	; 0x07
    31f0:	19 96       	adiw	r26, 0x09	; 9
    31f2:	5c 93       	st	X, r21
    31f4:	4e 93       	st	-X, r20
    31f6:	18 97       	sbiw	r26, 0x08	; 8
    31f8:	c6 81       	ldd	r28, Z+6	; 0x06
    31fa:	d7 81       	ldd	r29, Z+7	; 0x07
    31fc:	3d 83       	std	Y+5, r19	; 0x05
    31fe:	2c 83       	std	Y+4, r18	; 0x04
    3200:	37 83       	std	Z+7, r19	; 0x07
    3202:	26 83       	std	Z+6, r18	; 0x06
    3204:	5a 96       	adiw	r26, 0x1a	; 26
    3206:	ec 91       	ld	r30, X
    3208:	5a 97       	sbiw	r26, 0x1a	; 26
    320a:	9e 9f       	mul	r25, r30
    320c:	f0 01       	movw	r30, r0
    320e:	11 24       	eor	r1, r1
    3210:	e7 51       	subi	r30, 0x17	; 23
    3212:	ff 4e       	sbci	r31, 0xEF	; 239
    3214:	1d 96       	adiw	r26, 0x0d	; 13
    3216:	fc 93       	st	X, r31
    3218:	ee 93       	st	-X, r30
    321a:	1c 97       	sbiw	r26, 0x0c	; 12
    321c:	90 81       	ld	r25, Z
    321e:	9f 5f       	subi	r25, 0xFF	; 255
    3220:	90 83       	st	Z, r25
    3222:	21 c0       	rjmp	.+66     	; 0x3266 <xTaskGenericNotifyFromISR+0x208>
    3224:	64 ec       	ldi	r22, 0xC4	; 196
    3226:	70 e1       	ldi	r23, 0x10	; 16
    3228:	fb 01       	movw	r30, r22
    322a:	c1 81       	ldd	r28, Z+1	; 0x01
    322c:	d2 81       	ldd	r29, Z+2	; 0x02
    322e:	53 96       	adiw	r26, 0x13	; 19
    3230:	dc 93       	st	X, r29
    3232:	ce 93       	st	-X, r28
    3234:	52 97       	sbiw	r26, 0x12	; 18
    3236:	2e 81       	ldd	r18, Y+6	; 0x06
    3238:	3f 81       	ldd	r19, Y+7	; 0x07
    323a:	55 96       	adiw	r26, 0x15	; 21
    323c:	3c 93       	st	X, r19
    323e:	2e 93       	st	-X, r18
    3240:	54 97       	sbiw	r26, 0x14	; 20
    3242:	4e 81       	ldd	r20, Y+6	; 0x06
    3244:	5f 81       	ldd	r21, Y+7	; 0x07
    3246:	9d 01       	movw	r18, r26
    3248:	22 5f       	subi	r18, 0xF2	; 242
    324a:	3f 4f       	sbci	r19, 0xFF	; 255
    324c:	fa 01       	movw	r30, r20
    324e:	35 83       	std	Z+5, r19	; 0x05
    3250:	24 83       	std	Z+4, r18	; 0x04
    3252:	3f 83       	std	Y+7, r19	; 0x07
    3254:	2e 83       	std	Y+6, r18	; 0x06
    3256:	59 96       	adiw	r26, 0x19	; 25
    3258:	7c 93       	st	X, r23
    325a:	6e 93       	st	-X, r22
    325c:	58 97       	sbiw	r26, 0x18	; 24
    325e:	fb 01       	movw	r30, r22
    3260:	90 81       	ld	r25, Z
    3262:	9f 5f       	subi	r25, 0xFF	; 255
    3264:	90 83       	st	Z, r25
    3266:	5a 96       	adiw	r26, 0x1a	; 26
    3268:	2c 91       	ld	r18, X
    326a:	e0 91 57 11 	lds	r30, 0x1157	; 0x801157 <pxCurrentTCB>
    326e:	f0 91 58 11 	lds	r31, 0x1158	; 0x801158 <pxCurrentTCB+0x1>
    3272:	92 8d       	ldd	r25, Z+26	; 0x1a
    3274:	92 17       	cp	r25, r18
    3276:	48 f4       	brcc	.+18     	; 0x328a <xTaskGenericNotifyFromISR+0x22c>
    3278:	c1 14       	cp	r12, r1
    327a:	d1 04       	cpc	r13, r1
    327c:	19 f0       	breq	.+6      	; 0x3284 <xTaskGenericNotifyFromISR+0x226>
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	f6 01       	movw	r30, r12
    3282:	90 83       	st	Z, r25
    3284:	91 e0       	ldi	r25, 0x01	; 1
    3286:	90 93 a1 10 	sts	0x10A1, r25	; 0x8010a1 <xYieldPending>
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	0f 91       	pop	r16
    3290:	ff 90       	pop	r15
    3292:	ef 90       	pop	r14
    3294:	df 90       	pop	r13
    3296:	cf 90       	pop	r12
    3298:	bf 90       	pop	r11
    329a:	af 90       	pop	r10
    329c:	9f 90       	pop	r9
    329e:	8f 90       	pop	r8
    32a0:	08 95       	ret

000032a2 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	21 f4       	brne	.+8      	; 0x32ae <xTaskGenericNotifyStateClear+0xc>
    32a6:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxCurrentTCB>
    32aa:	90 91 58 11 	lds	r25, 0x1158	; 0x801158 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	fc 01       	movw	r30, r24
    32b8:	e6 0f       	add	r30, r22
    32ba:	f7 1f       	adc	r31, r23
    32bc:	23 a9       	ldd	r18, Z+51	; 0x33
    32be:	22 30       	cpi	r18, 0x02	; 2
    32c0:	31 f4       	brne	.+12     	; 0x32ce <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    32c2:	fc 01       	movw	r30, r24
    32c4:	e6 0f       	add	r30, r22
    32c6:	f7 1f       	adc	r31, r23
    32c8:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	01 c0       	rjmp	.+2      	; 0x32d0 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    32ce:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    32d0:	0f 90       	pop	r0
    32d2:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    32d4:	08 95       	ret

000032d6 <prvGetNextExpireTime>:
    32d6:	dc 01       	movw	r26, r24
    32d8:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTimerList>
    32dc:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTimerList+0x1>
    32e0:	80 81       	ld	r24, Z
    32e2:	91 e0       	ldi	r25, 0x01	; 1
    32e4:	81 11       	cpse	r24, r1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9c 93       	st	X, r25
    32ea:	91 11       	cpse	r25, r1
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <prvGetNextExpireTime+0x28>
    32ee:	07 80       	ldd	r0, Z+7	; 0x07
    32f0:	f0 85       	ldd	r31, Z+8	; 0x08
    32f2:	e0 2d       	mov	r30, r0
    32f4:	60 81       	ld	r22, Z
    32f6:	71 81       	ldd	r23, Z+1	; 0x01
    32f8:	82 81       	ldd	r24, Z+2	; 0x02
    32fa:	93 81       	ldd	r25, Z+3	; 0x03
    32fc:	08 95       	ret
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	cb 01       	movw	r24, r22
    3304:	08 95       	ret

00003306 <prvInsertTimerInActiveList>:
    3306:	cf 92       	push	r12
    3308:	df 92       	push	r13
    330a:	ef 92       	push	r14
    330c:	ff 92       	push	r15
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	fc 01       	movw	r30, r24
    3314:	42 83       	std	Z+2, r20	; 0x02
    3316:	53 83       	std	Z+3, r21	; 0x03
    3318:	64 83       	std	Z+4, r22	; 0x04
    331a:	75 83       	std	Z+5, r23	; 0x05
    331c:	93 87       	std	Z+11, r25	; 0x0b
    331e:	82 87       	std	Z+10, r24	; 0x0a
    3320:	04 17       	cp	r16, r20
    3322:	15 07       	cpc	r17, r21
    3324:	26 07       	cpc	r18, r22
    3326:	37 07       	cpc	r19, r23
    3328:	c0 f0       	brcs	.+48     	; 0x335a <prvInsertTimerInActiveList+0x54>
    332a:	0c 19       	sub	r16, r12
    332c:	1d 09       	sbc	r17, r13
    332e:	2e 09       	sbc	r18, r14
    3330:	3f 09       	sbc	r19, r15
    3332:	86 85       	ldd	r24, Z+14	; 0x0e
    3334:	97 85       	ldd	r25, Z+15	; 0x0f
    3336:	a0 89       	ldd	r26, Z+16	; 0x10
    3338:	b1 89       	ldd	r27, Z+17	; 0x11
    333a:	08 17       	cp	r16, r24
    333c:	19 07       	cpc	r17, r25
    333e:	2a 07       	cpc	r18, r26
    3340:	3b 07       	cpc	r19, r27
    3342:	00 f5       	brcc	.+64     	; 0x3384 <prvInsertTimerInActiveList+0x7e>
    3344:	bf 01       	movw	r22, r30
    3346:	6e 5f       	subi	r22, 0xFE	; 254
    3348:	7f 4f       	sbci	r23, 0xFF	; 255
    334a:	80 91 61 11 	lds	r24, 0x1161	; 0x801161 <pxOverflowTimerList>
    334e:	90 91 62 11 	lds	r25, 0x1162	; 0x801162 <pxOverflowTimerList+0x1>
    3352:	0e 94 58 06 	call	0xcb0	; 0xcb0 <vListInsert>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	18 c0       	rjmp	.+48     	; 0x338a <prvInsertTimerInActiveList+0x84>
    335a:	0c 15       	cp	r16, r12
    335c:	1d 05       	cpc	r17, r13
    335e:	2e 05       	cpc	r18, r14
    3360:	3f 05       	cpc	r19, r15
    3362:	28 f4       	brcc	.+10     	; 0x336e <prvInsertTimerInActiveList+0x68>
    3364:	4c 15       	cp	r20, r12
    3366:	5d 05       	cpc	r21, r13
    3368:	6e 05       	cpc	r22, r14
    336a:	7f 05       	cpc	r23, r15
    336c:	68 f4       	brcc	.+26     	; 0x3388 <prvInsertTimerInActiveList+0x82>
    336e:	bf 01       	movw	r22, r30
    3370:	6e 5f       	subi	r22, 0xFE	; 254
    3372:	7f 4f       	sbci	r23, 0xFF	; 255
    3374:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTimerList>
    3378:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTimerList+0x1>
    337c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <vListInsert>
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	03 c0       	rjmp	.+6      	; 0x338a <prvInsertTimerInActiveList+0x84>
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	01 c0       	rjmp	.+2      	; 0x338a <prvInsertTimerInActiveList+0x84>
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	ff 90       	pop	r15
    3390:	ef 90       	pop	r14
    3392:	df 90       	pop	r13
    3394:	cf 90       	pop	r12
    3396:	08 95       	ret

00003398 <prvCheckForValidListAndQueue>:
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	0f 92       	push	r0
    339e:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xTimerQueue>
    33a2:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xTimerQueue+0x1>
    33a6:	89 2b       	or	r24, r25
    33a8:	e9 f4       	brne	.+58     	; 0x33e4 <prvCheckForValidListAndQueue+0x4c>
    33aa:	80 e7       	ldi	r24, 0x70	; 112
    33ac:	91 e1       	ldi	r25, 0x11	; 17
    33ae:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    33b2:	85 e6       	ldi	r24, 0x65	; 101
    33b4:	91 e1       	ldi	r25, 0x11	; 17
    33b6:	0e 94 43 06 	call	0xc86	; 0xc86 <vListInitialise>
    33ba:	80 e7       	ldi	r24, 0x70	; 112
    33bc:	91 e1       	ldi	r25, 0x11	; 17
    33be:	90 93 64 11 	sts	0x1164, r25	; 0x801164 <pxCurrentTimerList+0x1>
    33c2:	80 93 63 11 	sts	0x1163, r24	; 0x801163 <pxCurrentTimerList>
    33c6:	85 e6       	ldi	r24, 0x65	; 101
    33c8:	91 e1       	ldi	r25, 0x11	; 17
    33ca:	90 93 62 11 	sts	0x1162, r25	; 0x801162 <pxOverflowTimerList+0x1>
    33ce:	80 93 61 11 	sts	0x1161, r24	; 0x801161 <pxOverflowTimerList>
    33d2:	40 e0       	ldi	r20, 0x00	; 0
    33d4:	67 e0       	ldi	r22, 0x07	; 7
    33d6:	8a e0       	ldi	r24, 0x0A	; 10
    33d8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericCreate>
    33dc:	90 93 60 11 	sts	0x1160, r25	; 0x801160 <xTimerQueue+0x1>
    33e0:	80 93 5f 11 	sts	0x115F, r24	; 0x80115f <xTimerQueue>
    33e4:	0f 90       	pop	r0
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	08 95       	ret

000033ea <xTimerCreateTimerTask>:
    33ea:	ef 92       	push	r14
    33ec:	ff 92       	push	r15
    33ee:	0f 93       	push	r16
    33f0:	d3 df       	rcall	.-90     	; 0x3398 <prvCheckForValidListAndQueue>
    33f2:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xTimerQueue>
    33f6:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xTimerQueue+0x1>
    33fa:	89 2b       	or	r24, r25
    33fc:	91 f0       	breq	.+36     	; 0x3422 <xTimerCreateTimerTask+0x38>
    33fe:	0f 2e       	mov	r0, r31
    3400:	fd e5       	ldi	r31, 0x5D	; 93
    3402:	ef 2e       	mov	r14, r31
    3404:	f1 e1       	ldi	r31, 0x11	; 17
    3406:	ff 2e       	mov	r15, r31
    3408:	f0 2d       	mov	r31, r0
    340a:	03 e0       	ldi	r16, 0x03	; 3
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	40 ec       	ldi	r20, 0xC0	; 192
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	6a ed       	ldi	r22, 0xDA	; 218
    3416:	73 e0       	ldi	r23, 0x03	; 3
    3418:	88 e5       	ldi	r24, 0x58	; 88
    341a:	91 e0       	ldi	r25, 0x01	; 1
    341c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <xTaskCreate>
    3420:	01 c0       	rjmp	.+2      	; 0x3424 <xTimerCreateTimerTask+0x3a>
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	0f 91       	pop	r16
    3426:	ff 90       	pop	r15
    3428:	ef 90       	pop	r14
    342a:	08 95       	ret

0000342c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    342c:	8f 92       	push	r8
    342e:	9f 92       	push	r9
    3430:	af 92       	push	r10
    3432:	bf 92       	push	r11
    3434:	cf 92       	push	r12
    3436:	df 92       	push	r13
    3438:	ef 92       	push	r14
    343a:	ff 92       	push	r15
    343c:	0f 93       	push	r16
    343e:	1f 93       	push	r17
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	27 97       	sbiw	r28, 0x07	; 7
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	f8 94       	cli
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3454:	e0 91 5f 11 	lds	r30, 0x115F	; 0x80115f <xTimerQueue>
    3458:	f0 91 60 11 	lds	r31, 0x1160	; 0x801160 <xTimerQueue+0x1>
    345c:	30 97       	sbiw	r30, 0x00	; 0
    345e:	81 f1       	breq	.+96     	; 0x34c0 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3460:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3462:	2a 83       	std	Y+2, r18	; 0x02
    3464:	3b 83       	std	Y+3, r19	; 0x03
    3466:	4c 83       	std	Y+4, r20	; 0x04
    3468:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    346a:	9f 83       	std	Y+7, r25	; 0x07
    346c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    346e:	66 30       	cpi	r22, 0x06	; 6
    3470:	f4 f4       	brge	.+60     	; 0x34ae <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3472:	c4 db       	rcall	.-2168   	; 0x2bfc <xTaskGetSchedulerState>
    3474:	82 30       	cpi	r24, 0x02	; 2
    3476:	69 f4       	brne	.+26     	; 0x3492 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3478:	00 e0       	ldi	r16, 0x00	; 0
    347a:	a7 01       	movw	r20, r14
    347c:	96 01       	movw	r18, r12
    347e:	be 01       	movw	r22, r28
    3480:	6f 5f       	subi	r22, 0xFF	; 255
    3482:	7f 4f       	sbci	r23, 0xFF	; 255
    3484:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xTimerQueue>
    3488:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xTimerQueue+0x1>
    348c:	0e 94 19 09 	call	0x1232	; 0x1232 <xQueueGenericSend>
    3490:	18 c0       	rjmp	.+48     	; 0x34c2 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3492:	00 e0       	ldi	r16, 0x00	; 0
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	a9 01       	movw	r20, r18
    349a:	be 01       	movw	r22, r28
    349c:	6f 5f       	subi	r22, 0xFF	; 255
    349e:	7f 4f       	sbci	r23, 0xFF	; 255
    34a0:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xTimerQueue>
    34a4:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xTimerQueue+0x1>
    34a8:	0e 94 19 09 	call	0x1232	; 0x1232 <xQueueGenericSend>
    34ac:	0a c0       	rjmp	.+20     	; 0x34c2 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	a8 01       	movw	r20, r16
    34b2:	be 01       	movw	r22, r28
    34b4:	6f 5f       	subi	r22, 0xFF	; 255
    34b6:	7f 4f       	sbci	r23, 0xFF	; 255
    34b8:	cf 01       	movw	r24, r30
    34ba:	0e 94 c9 09 	call	0x1392	; 0x1392 <xQueueGenericSendFromISR>
    34be:	01 c0       	rjmp	.+2      	; 0x34c2 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    34c0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    34c2:	27 96       	adiw	r28, 0x07	; 7
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	ff 90       	pop	r15
    34d8:	ef 90       	pop	r14
    34da:	df 90       	pop	r13
    34dc:	cf 90       	pop	r12
    34de:	bf 90       	pop	r11
    34e0:	af 90       	pop	r10
    34e2:	9f 90       	pop	r9
    34e4:	8f 90       	pop	r8
    34e6:	08 95       	ret

000034e8 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    34e8:	8f 92       	push	r8
    34ea:	9f 92       	push	r9
    34ec:	af 92       	push	r10
    34ee:	bf 92       	push	r11
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3500:	3b c0       	rjmp	.+118    	; 0x3578 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3502:	07 80       	ldd	r0, Z+7	; 0x07
    3504:	f0 85       	ldd	r31, Z+8	; 0x08
    3506:	e0 2d       	mov	r30, r0
    3508:	80 80       	ld	r8, Z
    350a:	91 80       	ldd	r9, Z+1	; 0x01
    350c:	a2 80       	ldd	r10, Z+2	; 0x02
    350e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3510:	c0 85       	ldd	r28, Z+8	; 0x08
    3512:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3514:	8e 01       	movw	r16, r28
    3516:	0e 5f       	subi	r16, 0xFE	; 254
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
    351a:	c8 01       	movw	r24, r16
    351c:	0e 94 95 06 	call	0xd2a	; 0xd2a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3520:	ec 89       	ldd	r30, Y+20	; 0x14
    3522:	fd 89       	ldd	r31, Y+21	; 0x15
    3524:	ce 01       	movw	r24, r28
    3526:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3528:	8e 89       	ldd	r24, Y+22	; 0x16
    352a:	82 ff       	sbrs	r24, 2
    352c:	25 c0       	rjmp	.+74     	; 0x3578 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    352e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3530:	9f 85       	ldd	r25, Y+15	; 0x0f
    3532:	a8 89       	ldd	r26, Y+16	; 0x10
    3534:	b9 89       	ldd	r27, Y+17	; 0x11
    3536:	88 0d       	add	r24, r8
    3538:	99 1d       	adc	r25, r9
    353a:	aa 1d       	adc	r26, r10
    353c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    353e:	88 16       	cp	r8, r24
    3540:	99 06       	cpc	r9, r25
    3542:	aa 06       	cpc	r10, r26
    3544:	bb 06       	cpc	r11, r27
    3546:	70 f4       	brcc	.+28     	; 0x3564 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3548:	8a 83       	std	Y+2, r24	; 0x02
    354a:	9b 83       	std	Y+3, r25	; 0x03
    354c:	ac 83       	std	Y+4, r26	; 0x04
    354e:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3550:	db 87       	std	Y+11, r29	; 0x0b
    3552:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3554:	b8 01       	movw	r22, r16
    3556:	80 91 63 11 	lds	r24, 0x1163	; 0x801163 <pxCurrentTimerList>
    355a:	90 91 64 11 	lds	r25, 0x1164	; 0x801164 <pxCurrentTimerList+0x1>
    355e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <vListInsert>
    3562:	0a c0       	rjmp	.+20     	; 0x3578 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3564:	c1 2c       	mov	r12, r1
    3566:	d1 2c       	mov	r13, r1
    3568:	76 01       	movw	r14, r12
    356a:	00 e0       	ldi	r16, 0x00	; 0
    356c:	10 e0       	ldi	r17, 0x00	; 0
    356e:	a5 01       	movw	r20, r10
    3570:	94 01       	movw	r18, r8
    3572:	60 e0       	ldi	r22, 0x00	; 0
    3574:	ce 01       	movw	r24, r28
    3576:	5a df       	rcall	.-332    	; 0x342c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3578:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTimerList>
    357c:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTimerList+0x1>
    3580:	80 81       	ld	r24, Z
    3582:	81 11       	cpse	r24, r1
    3584:	be cf       	rjmp	.-132    	; 0x3502 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3586:	80 91 61 11 	lds	r24, 0x1161	; 0x801161 <pxOverflowTimerList>
    358a:	90 91 62 11 	lds	r25, 0x1162	; 0x801162 <pxOverflowTimerList+0x1>
    358e:	90 93 64 11 	sts	0x1164, r25	; 0x801164 <pxCurrentTimerList+0x1>
    3592:	80 93 63 11 	sts	0x1163, r24	; 0x801163 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3596:	f0 93 62 11 	sts	0x1162, r31	; 0x801162 <pxOverflowTimerList+0x1>
    359a:	e0 93 61 11 	sts	0x1161, r30	; 0x801161 <pxOverflowTimerList>
    }
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	0f 91       	pop	r16
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	df 90       	pop	r13
    35ac:	cf 90       	pop	r12
    35ae:	bf 90       	pop	r11
    35b0:	af 90       	pop	r10
    35b2:	9f 90       	pop	r9
    35b4:	8f 90       	pop	r8
    35b6:	08 95       	ret

000035b8 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    35b8:	cf 92       	push	r12
    35ba:	df 92       	push	r13
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    35c6:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskGetTickCount>
    35ca:	6b 01       	movw	r12, r22
    35cc:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    35ce:	80 91 59 11 	lds	r24, 0x1159	; 0x801159 <xLastTime.2436>
    35d2:	90 91 5a 11 	lds	r25, 0x115A	; 0x80115a <xLastTime.2436+0x1>
    35d6:	a0 91 5b 11 	lds	r26, 0x115B	; 0x80115b <xLastTime.2436+0x2>
    35da:	b0 91 5c 11 	lds	r27, 0x115C	; 0x80115c <xLastTime.2436+0x3>
    35de:	c8 16       	cp	r12, r24
    35e0:	d9 06       	cpc	r13, r25
    35e2:	ea 06       	cpc	r14, r26
    35e4:	fb 06       	cpc	r15, r27
    35e6:	20 f4       	brcc	.+8      	; 0x35f0 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    35e8:	7f df       	rcall	.-258    	; 0x34e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	88 83       	st	Y, r24
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    35f0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    35f2:	c0 92 59 11 	sts	0x1159, r12	; 0x801159 <xLastTime.2436>
    35f6:	d0 92 5a 11 	sts	0x115A, r13	; 0x80115a <xLastTime.2436+0x1>
    35fa:	e0 92 5b 11 	sts	0x115B, r14	; 0x80115b <xLastTime.2436+0x2>
    35fe:	f0 92 5c 11 	sts	0x115C, r15	; 0x80115c <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3602:	c7 01       	movw	r24, r14
    3604:	b6 01       	movw	r22, r12
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	ff 90       	pop	r15
    360c:	ef 90       	pop	r14
    360e:	df 90       	pop	r13
    3610:	cf 90       	pop	r12
    3612:	08 95       	ret

00003614 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3614:	4f 92       	push	r4
    3616:	5f 92       	push	r5
    3618:	6f 92       	push	r6
    361a:	7f 92       	push	r7
    361c:	8f 92       	push	r8
    361e:	9f 92       	push	r9
    3620:	af 92       	push	r10
    3622:	bf 92       	push	r11
    3624:	cf 92       	push	r12
    3626:	df 92       	push	r13
    3628:	ef 92       	push	r14
    362a:	ff 92       	push	r15
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	4b 01       	movw	r8, r22
    3636:	5c 01       	movw	r10, r24
    3638:	29 01       	movw	r4, r18
    363a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    363c:	e0 91 63 11 	lds	r30, 0x1163	; 0x801163 <pxCurrentTimerList>
    3640:	f0 91 64 11 	lds	r31, 0x1164	; 0x801164 <pxCurrentTimerList+0x1>
    3644:	07 80       	ldd	r0, Z+7	; 0x07
    3646:	f0 85       	ldd	r31, Z+8	; 0x08
    3648:	e0 2d       	mov	r30, r0
    364a:	c0 85       	ldd	r28, Z+8	; 0x08
    364c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    364e:	ce 01       	movw	r24, r28
    3650:	02 96       	adiw	r24, 0x02	; 2
    3652:	0e 94 95 06 	call	0xd2a	; 0xd2a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3656:	8e 89       	ldd	r24, Y+22	; 0x16
    3658:	82 ff       	sbrs	r24, 2
    365a:	1b c0       	rjmp	.+54     	; 0x3692 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    365c:	4e 85       	ldd	r20, Y+14	; 0x0e
    365e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3660:	68 89       	ldd	r22, Y+16	; 0x10
    3662:	79 89       	ldd	r23, Y+17	; 0x11
    3664:	48 0d       	add	r20, r8
    3666:	59 1d       	adc	r21, r9
    3668:	6a 1d       	adc	r22, r10
    366a:	7b 1d       	adc	r23, r11
    366c:	75 01       	movw	r14, r10
    366e:	64 01       	movw	r12, r8
    3670:	93 01       	movw	r18, r6
    3672:	82 01       	movw	r16, r4
    3674:	ce 01       	movw	r24, r28
    3676:	47 de       	rcall	.-882    	; 0x3306 <prvInsertTimerInActiveList>
    3678:	88 23       	and	r24, r24
    367a:	69 f0       	breq	.+26     	; 0x3696 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    367c:	c1 2c       	mov	r12, r1
    367e:	d1 2c       	mov	r13, r1
    3680:	76 01       	movw	r14, r12
    3682:	00 e0       	ldi	r16, 0x00	; 0
    3684:	10 e0       	ldi	r17, 0x00	; 0
    3686:	a5 01       	movw	r20, r10
    3688:	94 01       	movw	r18, r8
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	ce 01       	movw	r24, r28
    368e:	ce de       	rcall	.-612    	; 0x342c <xTimerGenericCommand>
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3692:	8e 7f       	andi	r24, 0xFE	; 254
    3694:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3696:	ec 89       	ldd	r30, Y+20	; 0x14
    3698:	fd 89       	ldd	r31, Y+21	; 0x15
    369a:	ce 01       	movw	r24, r28
    369c:	19 95       	eicall
    }
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	ff 90       	pop	r15
    36a8:	ef 90       	pop	r14
    36aa:	df 90       	pop	r13
    36ac:	cf 90       	pop	r12
    36ae:	bf 90       	pop	r11
    36b0:	af 90       	pop	r10
    36b2:	9f 90       	pop	r9
    36b4:	8f 90       	pop	r8
    36b6:	7f 90       	pop	r7
    36b8:	6f 90       	pop	r6
    36ba:	5f 90       	pop	r5
    36bc:	4f 90       	pop	r4
    36be:	08 95       	ret

000036c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    36c0:	8f 92       	push	r8
    36c2:	9f 92       	push	r9
    36c4:	af 92       	push	r10
    36c6:	bf 92       	push	r11
    36c8:	cf 92       	push	r12
    36ca:	df 92       	push	r13
    36cc:	ef 92       	push	r14
    36ce:	ff 92       	push	r15
    36d0:	1f 93       	push	r17
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	1f 92       	push	r1
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	6b 01       	movw	r12, r22
    36de:	7c 01       	movw	r14, r24
    36e0:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    36e2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    36e6:	ce 01       	movw	r24, r28
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	66 df       	rcall	.-308    	; 0x35b8 <prvSampleTimeNow>
    36ec:	4b 01       	movw	r8, r22
    36ee:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	81 11       	cpse	r24, r1
    36f4:	2d c0       	rjmp	.+90     	; 0x3750 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    36f6:	11 11       	cpse	r17, r1
    36f8:	0d c0       	rjmp	.+26     	; 0x3714 <prvProcessTimerOrBlockTask+0x54>
    36fa:	8c 14       	cp	r8, r12
    36fc:	9d 04       	cpc	r9, r13
    36fe:	ae 04       	cpc	r10, r14
    3700:	bf 04       	cpc	r11, r15
    3702:	40 f0       	brcs	.+16     	; 0x3714 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3704:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3708:	a5 01       	movw	r20, r10
    370a:	94 01       	movw	r18, r8
    370c:	c7 01       	movw	r24, r14
    370e:	b6 01       	movw	r22, r12
    3710:	81 df       	rcall	.-254    	; 0x3614 <prvProcessExpiredTimer>
    3712:	20 c0       	rjmp	.+64     	; 0x3754 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3714:	11 23       	and	r17, r17
    3716:	41 f0       	breq	.+16     	; 0x3728 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3718:	e0 91 61 11 	lds	r30, 0x1161	; 0x801161 <pxOverflowTimerList>
    371c:	f0 91 62 11 	lds	r31, 0x1162	; 0x801162 <pxOverflowTimerList+0x1>
    3720:	80 81       	ld	r24, Z
    3722:	11 e0       	ldi	r17, 0x01	; 1
    3724:	81 11       	cpse	r24, r1
    3726:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3728:	b7 01       	movw	r22, r14
    372a:	a6 01       	movw	r20, r12
    372c:	48 19       	sub	r20, r8
    372e:	59 09       	sbc	r21, r9
    3730:	6a 09       	sbc	r22, r10
    3732:	7b 09       	sbc	r23, r11
    3734:	21 2f       	mov	r18, r17
    3736:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xTimerQueue>
    373a:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xTimerQueue+0x1>
    373e:	0e 94 93 0a 	call	0x1526	; 0x1526 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3742:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
    3746:	81 11       	cpse	r24, r1
    3748:	05 c0       	rjmp	.+10     	; 0x3754 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    374a:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3750:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskResumeAll>
            }
        }
    }
    3754:	0f 90       	pop	r0
    3756:	df 91       	pop	r29
    3758:	cf 91       	pop	r28
    375a:	1f 91       	pop	r17
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	df 90       	pop	r13
    3762:	cf 90       	pop	r12
    3764:	bf 90       	pop	r11
    3766:	af 90       	pop	r10
    3768:	9f 90       	pop	r9
    376a:	8f 90       	pop	r8
    376c:	08 95       	ret

0000376e <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    376e:	af 92       	push	r10
    3770:	bf 92       	push	r11
    3772:	cf 92       	push	r12
    3774:	df 92       	push	r13
    3776:	ef 92       	push	r14
    3778:	ff 92       	push	r15
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	28 97       	sbiw	r28, 0x08	; 8
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3792:	82 c0       	rjmp	.+260    	; 0x3898 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	88 23       	and	r24, r24
    3798:	0c f4       	brge	.+2      	; 0x379c <prvProcessReceivedCommands+0x2e>
    379a:	7e c0       	rjmp	.+252    	; 0x3898 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    379c:	ae 80       	ldd	r10, Y+6	; 0x06
    379e:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    37a0:	d5 01       	movw	r26, r10
    37a2:	1c 96       	adiw	r26, 0x0c	; 12
    37a4:	8d 91       	ld	r24, X+
    37a6:	9c 91       	ld	r25, X
    37a8:	1d 97       	sbiw	r26, 0x0d	; 13
    37aa:	89 2b       	or	r24, r25
    37ac:	21 f0       	breq	.+8      	; 0x37b6 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37ae:	c5 01       	movw	r24, r10
    37b0:	02 96       	adiw	r24, 0x02	; 2
    37b2:	0e 94 95 06 	call	0xd2a	; 0xd2a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37b6:	ce 01       	movw	r24, r28
    37b8:	08 96       	adiw	r24, 0x08	; 8
    37ba:	fe de       	rcall	.-516    	; 0x35b8 <prvSampleTimeNow>
    37bc:	8b 01       	movw	r16, r22
    37be:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    37c0:	e9 81       	ldd	r30, Y+1	; 0x01
    37c2:	0e 2e       	mov	r0, r30
    37c4:	00 0c       	add	r0, r0
    37c6:	ff 0b       	sbc	r31, r31
    37c8:	ea 30       	cpi	r30, 0x0A	; 10
    37ca:	f1 05       	cpc	r31, r1
    37cc:	08 f0       	brcs	.+2      	; 0x37d0 <prvProcessReceivedCommands+0x62>
    37ce:	64 c0       	rjmp	.+200    	; 0x3898 <prvProcessReceivedCommands+0x12a>
    37d0:	88 27       	eor	r24, r24
    37d2:	ee 58       	subi	r30, 0x8E	; 142
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	8f 4f       	sbci	r24, 0xFF	; 255
    37d8:	0c 94 37 2d 	jmp	0x5a6e	; 0x5a6e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    37dc:	f5 01       	movw	r30, r10
    37de:	86 89       	ldd	r24, Z+22	; 0x16
    37e0:	81 60       	ori	r24, 0x01	; 1
    37e2:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    37e4:	ca 80       	ldd	r12, Y+2	; 0x02
    37e6:	db 80       	ldd	r13, Y+3	; 0x03
    37e8:	ec 80       	ldd	r14, Y+4	; 0x04
    37ea:	fd 80       	ldd	r15, Y+5	; 0x05
    37ec:	46 85       	ldd	r20, Z+14	; 0x0e
    37ee:	57 85       	ldd	r21, Z+15	; 0x0f
    37f0:	60 89       	ldd	r22, Z+16	; 0x10
    37f2:	71 89       	ldd	r23, Z+17	; 0x11
    37f4:	4c 0d       	add	r20, r12
    37f6:	5d 1d       	adc	r21, r13
    37f8:	6e 1d       	adc	r22, r14
    37fa:	7f 1d       	adc	r23, r15
    37fc:	c5 01       	movw	r24, r10
    37fe:	83 dd       	rcall	.-1274   	; 0x3306 <prvInsertTimerInActiveList>
    3800:	88 23       	and	r24, r24
    3802:	09 f4       	brne	.+2      	; 0x3806 <prvProcessReceivedCommands+0x98>
    3804:	49 c0       	rjmp	.+146    	; 0x3898 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3806:	d5 01       	movw	r26, r10
    3808:	54 96       	adiw	r26, 0x14	; 20
    380a:	ed 91       	ld	r30, X+
    380c:	fc 91       	ld	r31, X
    380e:	55 97       	sbiw	r26, 0x15	; 21
    3810:	c5 01       	movw	r24, r10
    3812:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3814:	f5 01       	movw	r30, r10
    3816:	86 89       	ldd	r24, Z+22	; 0x16
    3818:	82 ff       	sbrs	r24, 2
    381a:	3e c0       	rjmp	.+124    	; 0x3898 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    381c:	4a 81       	ldd	r20, Y+2	; 0x02
    381e:	5b 81       	ldd	r21, Y+3	; 0x03
    3820:	6c 81       	ldd	r22, Y+4	; 0x04
    3822:	7d 81       	ldd	r23, Y+5	; 0x05
    3824:	86 85       	ldd	r24, Z+14	; 0x0e
    3826:	97 85       	ldd	r25, Z+15	; 0x0f
    3828:	a0 89       	ldd	r26, Z+16	; 0x10
    382a:	b1 89       	ldd	r27, Z+17	; 0x11
    382c:	9a 01       	movw	r18, r20
    382e:	ab 01       	movw	r20, r22
    3830:	28 0f       	add	r18, r24
    3832:	39 1f       	adc	r19, r25
    3834:	4a 1f       	adc	r20, r26
    3836:	5b 1f       	adc	r21, r27
    3838:	c1 2c       	mov	r12, r1
    383a:	d1 2c       	mov	r13, r1
    383c:	76 01       	movw	r14, r12
    383e:	00 e0       	ldi	r16, 0x00	; 0
    3840:	10 e0       	ldi	r17, 0x00	; 0
    3842:	60 e0       	ldi	r22, 0x00	; 0
    3844:	c5 01       	movw	r24, r10
    3846:	f2 dd       	rcall	.-1052   	; 0x342c <xTimerGenericCommand>
    3848:	27 c0       	rjmp	.+78     	; 0x3898 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    384a:	d5 01       	movw	r26, r10
    384c:	56 96       	adiw	r26, 0x16	; 22
    384e:	8c 91       	ld	r24, X
    3850:	56 97       	sbiw	r26, 0x16	; 22
    3852:	8e 7f       	andi	r24, 0xFE	; 254
    3854:	56 96       	adiw	r26, 0x16	; 22
    3856:	8c 93       	st	X, r24
                        break;
    3858:	1f c0       	rjmp	.+62     	; 0x3898 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    385a:	f5 01       	movw	r30, r10
    385c:	86 89       	ldd	r24, Z+22	; 0x16
    385e:	81 60       	ori	r24, 0x01	; 1
    3860:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3862:	4a 81       	ldd	r20, Y+2	; 0x02
    3864:	5b 81       	ldd	r21, Y+3	; 0x03
    3866:	6c 81       	ldd	r22, Y+4	; 0x04
    3868:	7d 81       	ldd	r23, Y+5	; 0x05
    386a:	46 87       	std	Z+14, r20	; 0x0e
    386c:	57 87       	std	Z+15, r21	; 0x0f
    386e:	60 8b       	std	Z+16, r22	; 0x10
    3870:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3872:	40 0f       	add	r20, r16
    3874:	51 1f       	adc	r21, r17
    3876:	62 1f       	adc	r22, r18
    3878:	73 1f       	adc	r23, r19
    387a:	68 01       	movw	r12, r16
    387c:	79 01       	movw	r14, r18
    387e:	c5 01       	movw	r24, r10
    3880:	42 dd       	rcall	.-1404   	; 0x3306 <prvInsertTimerInActiveList>
                        break;
    3882:	0a c0       	rjmp	.+20     	; 0x3898 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3884:	f5 01       	movw	r30, r10
    3886:	86 89       	ldd	r24, Z+22	; 0x16
    3888:	81 fd       	sbrc	r24, 1
    388a:	04 c0       	rjmp	.+8      	; 0x3894 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    388c:	c5 01       	movw	r24, r10
    388e:	0e 94 06 06 	call	0xc0c	; 0xc0c <vPortFree>
    3892:	02 c0       	rjmp	.+4      	; 0x3898 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3894:	8e 7f       	andi	r24, 0xFE	; 254
    3896:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	a9 01       	movw	r20, r18
    389e:	be 01       	movw	r22, r28
    38a0:	6f 5f       	subi	r22, 0xFF	; 255
    38a2:	7f 4f       	sbci	r23, 0xFF	; 255
    38a4:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xTimerQueue>
    38a8:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xTimerQueue+0x1>
    38ac:	0e 94 04 0a 	call	0x1408	; 0x1408 <xQueueReceive>
    38b0:	81 11       	cpse	r24, r1
    38b2:	70 cf       	rjmp	.-288    	; 0x3794 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    38b4:	28 96       	adiw	r28, 0x08	; 8
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	1f 91       	pop	r17
    38c6:	0f 91       	pop	r16
    38c8:	ff 90       	pop	r15
    38ca:	ef 90       	pop	r14
    38cc:	df 90       	pop	r13
    38ce:	cf 90       	pop	r12
    38d0:	bf 90       	pop	r11
    38d2:	af 90       	pop	r10
    38d4:	08 95       	ret

000038d6 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    38d6:	08 95       	ret

000038d8 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    38d8:	84 b1       	in	r24, 0x04	; 4
    38da:	80 68       	ori	r24, 0x80	; 128
    38dc:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    38de:	85 b1       	in	r24, 0x05	; 5
    38e0:	80 68       	ori	r24, 0x80	; 128
    38e2:	85 b9       	out	0x05, r24	; 5
    38e4:	08 95       	ret

000038e6 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    38e6:	83 b1       	in	r24, 0x03	; 3
    38e8:	80 68       	ori	r24, 0x80	; 128
    38ea:	83 b9       	out	0x03, r24	; 3
    38ec:	08 95       	ret

000038ee <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    38ee:	f4 df       	rcall	.-24     	; 0x38d8 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    38f0:	2f ef       	ldi	r18, 0xFF	; 255
    38f2:	80 e7       	ldi	r24, 0x70	; 112
    38f4:	92 e0       	ldi	r25, 0x02	; 2
    38f6:	21 50       	subi	r18, 0x01	; 1
    38f8:	80 40       	sbci	r24, 0x00	; 0
    38fa:	90 40       	sbci	r25, 0x00	; 0
    38fc:	e1 f7       	brne	.-8      	; 0x38f6 <vApplicationMallocFailedHook+0x8>
    38fe:	00 c0       	rjmp	.+0      	; 0x3900 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3900:	00 00       	nop
    3902:	f1 df       	rcall	.-30     	; 0x38e6 <prvBlinkMainLed>
    3904:	f5 cf       	rjmp	.-22     	; 0x38f0 <vApplicationMallocFailedHook+0x2>

00003906 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3906:	e8 df       	rcall	.-48     	; 0x38d8 <prvSetMainLedOn>
    3908:	2f ef       	ldi	r18, 0xFF	; 255
    390a:	87 ea       	ldi	r24, 0xA7	; 167
    390c:	91 e6       	ldi	r25, 0x61	; 97
    390e:	21 50       	subi	r18, 0x01	; 1
    3910:	80 40       	sbci	r24, 0x00	; 0
    3912:	90 40       	sbci	r25, 0x00	; 0
    3914:	e1 f7       	brne	.-8      	; 0x390e <vApplicationStackOverflowHook+0x8>
    3916:	00 c0       	rjmp	.+0      	; 0x3918 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3918:	00 00       	nop
    391a:	e5 df       	rcall	.-54     	; 0x38e6 <prvBlinkMainLed>
    391c:	f5 cf       	rjmp	.-22     	; 0x3908 <vApplicationStackOverflowHook+0x2>

0000391e <createTasksForSensors>:
	createTasksForSensors();
	lora_handler_initialize(4, temperature_sensor);
}

void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    391e:	60 91 7b 11 	lds	r22, 0x117B	; 0x80117b <taskReadyBits>
    3922:	70 91 7c 11 	lds	r23, 0x117C	; 0x80117c <taskReadyBits+0x1>
    3926:	21 e0       	ldi	r18, 0x01	; 1
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e0       	ldi	r20, 0x00	; 0
    392c:	50 e0       	ldi	r21, 0x00	; 0
    392e:	83 e0       	ldi	r24, 0x03	; 3
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <createTemp>
    3936:	90 93 92 12 	sts	0x1292, r25	; 0x801292 <temperature_sensor+0x1>
    393a:	80 93 91 12 	sts	0x1291, r24	; 0x801291 <temperature_sensor>
    393e:	08 95       	ret

00003940 <create_tasks_and_semaphores>:
#define BIT_TEMP_READY (1 << 0)



void create_tasks_and_semaphores(void)
{
    3940:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3942:	80 91 93 12 	lds	r24, 0x1293	; 0x801293 <xTestSemaphore>
    3946:	90 91 94 12 	lds	r25, 0x1294	; 0x801294 <xTestSemaphore+0x1>
    394a:	89 2b       	or	r24, r25
    394c:	89 f4       	brne	.+34     	; 0x3970 <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	0e 94 bd 09 	call	0x137a	; 0x137a <xQueueCreateMutex>
    3954:	90 93 94 12 	sts	0x1294, r25	; 0x801294 <xTestSemaphore+0x1>
    3958:	80 93 93 12 	sts	0x1293, r24	; 0x801293 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	41 f0       	breq	.+16     	; 0x3970 <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3960:	00 e0       	ldi	r16, 0x00	; 0
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	a9 01       	movw	r20, r18
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	0e 94 19 09 	call	0x1232	; 0x1232 <xQueueGenericSend>
		}
	}
	
	
	createTasksForSensors();
    3970:	d6 df       	rcall	.-84     	; 0x391e <createTasksForSensors>
	lora_handler_initialize(4, temperature_sensor);
    3972:	60 91 91 12 	lds	r22, 0x1291	; 0x801291 <temperature_sensor>
    3976:	70 91 92 12 	lds	r23, 0x1292	; 0x801292 <temperature_sensor+0x1>
    397a:	84 e0       	ldi	r24, 0x04	; 4
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <lora_handler_initialize>
}
    3982:	0f 91       	pop	r16
    3984:	08 95       	ret

00003986 <initializeSystem>:
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    3986:	0e 94 a9 03 	call	0x752	; 0x752 <xEventGroupCreate>
    398a:	90 93 7c 11 	sts	0x117C, r25	; 0x80117c <taskReadyBits+0x1>
    398e:	80 93 7b 11 	sts	0x117B, r24	; 0x80117b <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <stdio_initialise>
	// Method for tasks and semaphore
	lora_driver_initialise(ser_USART1, NULL);
    3998:	60 e0       	ldi	r22, 0x00	; 0
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	26 d3       	rcall	.+1612   	; 0x3fec <lora_driver_initialise>
	create_tasks_and_semaphores();
    39a0:	cf cf       	rjmp	.-98     	; 0x3940 <create_tasks_and_semaphores>
    39a2:	08 95       	ret

000039a4 <main>:
    39a4:	f0 df       	rcall	.-32     	; 0x3986 <initializeSystem>
}

int main(void){
	initializeSystem();
	vTaskStartScheduler();
    39a6:	0e 94 43 10 	call	0x2086	; 0x2086 <vTaskStartScheduler>
    39aa:	ff cf       	rjmp	.-2      	; 0x39aa <main+0x6>

000039ac <__fixsfsi>:
    39ac:	04 d0       	rcall	.+8      	; 0x39b6 <__fixunssfsi>
    39ae:	68 94       	set
    39b0:	b1 11       	cpse	r27, r1
    39b2:	50 c0       	rjmp	.+160    	; 0x3a54 <__fp_szero>
    39b4:	08 95       	ret

000039b6 <__fixunssfsi>:
    39b6:	33 d0       	rcall	.+102    	; 0x3a1e <__fp_splitA>
    39b8:	88 f0       	brcs	.+34     	; 0x39dc <__fixunssfsi+0x26>
    39ba:	9f 57       	subi	r25, 0x7F	; 127
    39bc:	90 f0       	brcs	.+36     	; 0x39e2 <__fixunssfsi+0x2c>
    39be:	b9 2f       	mov	r27, r25
    39c0:	99 27       	eor	r25, r25
    39c2:	b7 51       	subi	r27, 0x17	; 23
    39c4:	a0 f0       	brcs	.+40     	; 0x39ee <__fixunssfsi+0x38>
    39c6:	d1 f0       	breq	.+52     	; 0x39fc <__fixunssfsi+0x46>
    39c8:	66 0f       	add	r22, r22
    39ca:	77 1f       	adc	r23, r23
    39cc:	88 1f       	adc	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	1a f0       	brmi	.+6      	; 0x39d8 <__fixunssfsi+0x22>
    39d2:	ba 95       	dec	r27
    39d4:	c9 f7       	brne	.-14     	; 0x39c8 <__fixunssfsi+0x12>
    39d6:	12 c0       	rjmp	.+36     	; 0x39fc <__fixunssfsi+0x46>
    39d8:	b1 30       	cpi	r27, 0x01	; 1
    39da:	81 f0       	breq	.+32     	; 0x39fc <__fixunssfsi+0x46>
    39dc:	3a d0       	rcall	.+116    	; 0x3a52 <__fp_zero>
    39de:	b1 e0       	ldi	r27, 0x01	; 1
    39e0:	08 95       	ret
    39e2:	37 c0       	rjmp	.+110    	; 0x3a52 <__fp_zero>
    39e4:	67 2f       	mov	r22, r23
    39e6:	78 2f       	mov	r23, r24
    39e8:	88 27       	eor	r24, r24
    39ea:	b8 5f       	subi	r27, 0xF8	; 248
    39ec:	39 f0       	breq	.+14     	; 0x39fc <__fixunssfsi+0x46>
    39ee:	b9 3f       	cpi	r27, 0xF9	; 249
    39f0:	cc f3       	brlt	.-14     	; 0x39e4 <__fixunssfsi+0x2e>
    39f2:	86 95       	lsr	r24
    39f4:	77 95       	ror	r23
    39f6:	67 95       	ror	r22
    39f8:	b3 95       	inc	r27
    39fa:	d9 f7       	brne	.-10     	; 0x39f2 <__fixunssfsi+0x3c>
    39fc:	3e f4       	brtc	.+14     	; 0x3a0c <__fixunssfsi+0x56>
    39fe:	90 95       	com	r25
    3a00:	80 95       	com	r24
    3a02:	70 95       	com	r23
    3a04:	61 95       	neg	r22
    3a06:	7f 4f       	sbci	r23, 0xFF	; 255
    3a08:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0c:	08 95       	ret

00003a0e <__fp_split3>:
    3a0e:	57 fd       	sbrc	r21, 7
    3a10:	90 58       	subi	r25, 0x80	; 128
    3a12:	44 0f       	add	r20, r20
    3a14:	55 1f       	adc	r21, r21
    3a16:	59 f0       	breq	.+22     	; 0x3a2e <__fp_splitA+0x10>
    3a18:	5f 3f       	cpi	r21, 0xFF	; 255
    3a1a:	71 f0       	breq	.+28     	; 0x3a38 <__fp_splitA+0x1a>
    3a1c:	47 95       	ror	r20

00003a1e <__fp_splitA>:
    3a1e:	88 0f       	add	r24, r24
    3a20:	97 fb       	bst	r25, 7
    3a22:	99 1f       	adc	r25, r25
    3a24:	61 f0       	breq	.+24     	; 0x3a3e <__fp_splitA+0x20>
    3a26:	9f 3f       	cpi	r25, 0xFF	; 255
    3a28:	79 f0       	breq	.+30     	; 0x3a48 <__fp_splitA+0x2a>
    3a2a:	87 95       	ror	r24
    3a2c:	08 95       	ret
    3a2e:	12 16       	cp	r1, r18
    3a30:	13 06       	cpc	r1, r19
    3a32:	14 06       	cpc	r1, r20
    3a34:	55 1f       	adc	r21, r21
    3a36:	f2 cf       	rjmp	.-28     	; 0x3a1c <__fp_split3+0xe>
    3a38:	46 95       	lsr	r20
    3a3a:	f1 df       	rcall	.-30     	; 0x3a1e <__fp_splitA>
    3a3c:	08 c0       	rjmp	.+16     	; 0x3a4e <__fp_splitA+0x30>
    3a3e:	16 16       	cp	r1, r22
    3a40:	17 06       	cpc	r1, r23
    3a42:	18 06       	cpc	r1, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	f1 cf       	rjmp	.-30     	; 0x3a2a <__fp_splitA+0xc>
    3a48:	86 95       	lsr	r24
    3a4a:	71 05       	cpc	r23, r1
    3a4c:	61 05       	cpc	r22, r1
    3a4e:	08 94       	sec
    3a50:	08 95       	ret

00003a52 <__fp_zero>:
    3a52:	e8 94       	clt

00003a54 <__fp_szero>:
    3a54:	bb 27       	eor	r27, r27
    3a56:	66 27       	eor	r22, r22
    3a58:	77 27       	eor	r23, r23
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	97 f9       	bld	r25, 7
    3a5e:	08 95       	ret

00003a60 <modf>:
    3a60:	fa 01       	movw	r30, r20
    3a62:	dc 01       	movw	r26, r24
    3a64:	aa 0f       	add	r26, r26
    3a66:	bb 1f       	adc	r27, r27
    3a68:	9b 01       	movw	r18, r22
    3a6a:	ac 01       	movw	r20, r24
    3a6c:	bf 57       	subi	r27, 0x7F	; 127
    3a6e:	28 f4       	brcc	.+10     	; 0x3a7a <modf+0x1a>
    3a70:	22 27       	eor	r18, r18
    3a72:	33 27       	eor	r19, r19
    3a74:	44 27       	eor	r20, r20
    3a76:	50 78       	andi	r21, 0x80	; 128
    3a78:	1f c0       	rjmp	.+62     	; 0x3ab8 <modf+0x58>
    3a7a:	b7 51       	subi	r27, 0x17	; 23
    3a7c:	88 f4       	brcc	.+34     	; 0x3aa0 <modf+0x40>
    3a7e:	ab 2f       	mov	r26, r27
    3a80:	00 24       	eor	r0, r0
    3a82:	46 95       	lsr	r20
    3a84:	37 95       	ror	r19
    3a86:	27 95       	ror	r18
    3a88:	01 1c       	adc	r0, r1
    3a8a:	a3 95       	inc	r26
    3a8c:	d2 f3       	brmi	.-12     	; 0x3a82 <modf+0x22>
    3a8e:	00 20       	and	r0, r0
    3a90:	69 f0       	breq	.+26     	; 0x3aac <modf+0x4c>
    3a92:	22 0f       	add	r18, r18
    3a94:	33 1f       	adc	r19, r19
    3a96:	44 1f       	adc	r20, r20
    3a98:	b3 95       	inc	r27
    3a9a:	da f3       	brmi	.-10     	; 0x3a92 <modf+0x32>
    3a9c:	0d d0       	rcall	.+26     	; 0x3ab8 <modf+0x58>
    3a9e:	76 c0       	rjmp	.+236    	; 0x3b8c <__subsf3>
    3aa0:	61 30       	cpi	r22, 0x01	; 1
    3aa2:	71 05       	cpc	r23, r1
    3aa4:	a0 e8       	ldi	r26, 0x80	; 128
    3aa6:	8a 07       	cpc	r24, r26
    3aa8:	b9 46       	sbci	r27, 0x69	; 105
    3aaa:	30 f4       	brcc	.+12     	; 0x3ab8 <modf+0x58>
    3aac:	9b 01       	movw	r18, r22
    3aae:	ac 01       	movw	r20, r24
    3ab0:	66 27       	eor	r22, r22
    3ab2:	77 27       	eor	r23, r23
    3ab4:	88 27       	eor	r24, r24
    3ab6:	90 78       	andi	r25, 0x80	; 128
    3ab8:	30 96       	adiw	r30, 0x00	; 0
    3aba:	21 f0       	breq	.+8      	; 0x3ac4 <modf+0x64>
    3abc:	20 83       	st	Z, r18
    3abe:	31 83       	std	Z+1, r19	; 0x01
    3ac0:	42 83       	std	Z+2, r20	; 0x02
    3ac2:	53 83       	std	Z+3, r21	; 0x03
    3ac4:	08 95       	ret

00003ac6 <__mulsf3>:
    3ac6:	0b d0       	rcall	.+22     	; 0x3ade <__mulsf3x>
    3ac8:	dd c0       	rjmp	.+442    	; 0x3c84 <__fp_round>
    3aca:	ce d0       	rcall	.+412    	; 0x3c68 <__fp_pscA>
    3acc:	28 f0       	brcs	.+10     	; 0x3ad8 <__mulsf3+0x12>
    3ace:	d3 d0       	rcall	.+422    	; 0x3c76 <__fp_pscB>
    3ad0:	18 f0       	brcs	.+6      	; 0x3ad8 <__mulsf3+0x12>
    3ad2:	95 23       	and	r25, r21
    3ad4:	09 f0       	breq	.+2      	; 0x3ad8 <__mulsf3+0x12>
    3ad6:	bf c0       	rjmp	.+382    	; 0x3c56 <__fp_inf>
    3ad8:	c4 c0       	rjmp	.+392    	; 0x3c62 <__fp_nan>
    3ada:	11 24       	eor	r1, r1
    3adc:	bb cf       	rjmp	.-138    	; 0x3a54 <__fp_szero>

00003ade <__mulsf3x>:
    3ade:	97 df       	rcall	.-210    	; 0x3a0e <__fp_split3>
    3ae0:	a0 f3       	brcs	.-24     	; 0x3aca <__mulsf3+0x4>

00003ae2 <__mulsf3_pse>:
    3ae2:	95 9f       	mul	r25, r21
    3ae4:	d1 f3       	breq	.-12     	; 0x3ada <__mulsf3+0x14>
    3ae6:	95 0f       	add	r25, r21
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	55 1f       	adc	r21, r21
    3aec:	62 9f       	mul	r22, r18
    3aee:	f0 01       	movw	r30, r0
    3af0:	72 9f       	mul	r23, r18
    3af2:	bb 27       	eor	r27, r27
    3af4:	f0 0d       	add	r31, r0
    3af6:	b1 1d       	adc	r27, r1
    3af8:	63 9f       	mul	r22, r19
    3afa:	aa 27       	eor	r26, r26
    3afc:	f0 0d       	add	r31, r0
    3afe:	b1 1d       	adc	r27, r1
    3b00:	aa 1f       	adc	r26, r26
    3b02:	64 9f       	mul	r22, r20
    3b04:	66 27       	eor	r22, r22
    3b06:	b0 0d       	add	r27, r0
    3b08:	a1 1d       	adc	r26, r1
    3b0a:	66 1f       	adc	r22, r22
    3b0c:	82 9f       	mul	r24, r18
    3b0e:	22 27       	eor	r18, r18
    3b10:	b0 0d       	add	r27, r0
    3b12:	a1 1d       	adc	r26, r1
    3b14:	62 1f       	adc	r22, r18
    3b16:	73 9f       	mul	r23, r19
    3b18:	b0 0d       	add	r27, r0
    3b1a:	a1 1d       	adc	r26, r1
    3b1c:	62 1f       	adc	r22, r18
    3b1e:	83 9f       	mul	r24, r19
    3b20:	a0 0d       	add	r26, r0
    3b22:	61 1d       	adc	r22, r1
    3b24:	22 1f       	adc	r18, r18
    3b26:	74 9f       	mul	r23, r20
    3b28:	33 27       	eor	r19, r19
    3b2a:	a0 0d       	add	r26, r0
    3b2c:	61 1d       	adc	r22, r1
    3b2e:	23 1f       	adc	r18, r19
    3b30:	84 9f       	mul	r24, r20
    3b32:	60 0d       	add	r22, r0
    3b34:	21 1d       	adc	r18, r1
    3b36:	82 2f       	mov	r24, r18
    3b38:	76 2f       	mov	r23, r22
    3b3a:	6a 2f       	mov	r22, r26
    3b3c:	11 24       	eor	r1, r1
    3b3e:	9f 57       	subi	r25, 0x7F	; 127
    3b40:	50 40       	sbci	r21, 0x00	; 0
    3b42:	8a f0       	brmi	.+34     	; 0x3b66 <__mulsf3_pse+0x84>
    3b44:	e1 f0       	breq	.+56     	; 0x3b7e <__mulsf3_pse+0x9c>
    3b46:	88 23       	and	r24, r24
    3b48:	4a f0       	brmi	.+18     	; 0x3b5c <__mulsf3_pse+0x7a>
    3b4a:	ee 0f       	add	r30, r30
    3b4c:	ff 1f       	adc	r31, r31
    3b4e:	bb 1f       	adc	r27, r27
    3b50:	66 1f       	adc	r22, r22
    3b52:	77 1f       	adc	r23, r23
    3b54:	88 1f       	adc	r24, r24
    3b56:	91 50       	subi	r25, 0x01	; 1
    3b58:	50 40       	sbci	r21, 0x00	; 0
    3b5a:	a9 f7       	brne	.-22     	; 0x3b46 <__mulsf3_pse+0x64>
    3b5c:	9e 3f       	cpi	r25, 0xFE	; 254
    3b5e:	51 05       	cpc	r21, r1
    3b60:	70 f0       	brcs	.+28     	; 0x3b7e <__mulsf3_pse+0x9c>
    3b62:	79 c0       	rjmp	.+242    	; 0x3c56 <__fp_inf>
    3b64:	77 cf       	rjmp	.-274    	; 0x3a54 <__fp_szero>
    3b66:	5f 3f       	cpi	r21, 0xFF	; 255
    3b68:	ec f3       	brlt	.-6      	; 0x3b64 <__mulsf3_pse+0x82>
    3b6a:	98 3e       	cpi	r25, 0xE8	; 232
    3b6c:	dc f3       	brlt	.-10     	; 0x3b64 <__mulsf3_pse+0x82>
    3b6e:	86 95       	lsr	r24
    3b70:	77 95       	ror	r23
    3b72:	67 95       	ror	r22
    3b74:	b7 95       	ror	r27
    3b76:	f7 95       	ror	r31
    3b78:	e7 95       	ror	r30
    3b7a:	9f 5f       	subi	r25, 0xFF	; 255
    3b7c:	c1 f7       	brne	.-16     	; 0x3b6e <__mulsf3_pse+0x8c>
    3b7e:	fe 2b       	or	r31, r30
    3b80:	88 0f       	add	r24, r24
    3b82:	91 1d       	adc	r25, r1
    3b84:	96 95       	lsr	r25
    3b86:	87 95       	ror	r24
    3b88:	97 f9       	bld	r25, 7
    3b8a:	08 95       	ret

00003b8c <__subsf3>:
    3b8c:	50 58       	subi	r21, 0x80	; 128

00003b8e <__addsf3>:
    3b8e:	bb 27       	eor	r27, r27
    3b90:	aa 27       	eor	r26, r26
    3b92:	0e d0       	rcall	.+28     	; 0x3bb0 <__addsf3x>
    3b94:	77 c0       	rjmp	.+238    	; 0x3c84 <__fp_round>
    3b96:	68 d0       	rcall	.+208    	; 0x3c68 <__fp_pscA>
    3b98:	30 f0       	brcs	.+12     	; 0x3ba6 <__addsf3+0x18>
    3b9a:	6d d0       	rcall	.+218    	; 0x3c76 <__fp_pscB>
    3b9c:	20 f0       	brcs	.+8      	; 0x3ba6 <__addsf3+0x18>
    3b9e:	31 f4       	brne	.+12     	; 0x3bac <__addsf3+0x1e>
    3ba0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ba2:	11 f4       	brne	.+4      	; 0x3ba8 <__addsf3+0x1a>
    3ba4:	1e f4       	brtc	.+6      	; 0x3bac <__addsf3+0x1e>
    3ba6:	5d c0       	rjmp	.+186    	; 0x3c62 <__fp_nan>
    3ba8:	0e f4       	brtc	.+2      	; 0x3bac <__addsf3+0x1e>
    3baa:	e0 95       	com	r30
    3bac:	e7 fb       	bst	r30, 7
    3bae:	53 c0       	rjmp	.+166    	; 0x3c56 <__fp_inf>

00003bb0 <__addsf3x>:
    3bb0:	e9 2f       	mov	r30, r25
    3bb2:	2d df       	rcall	.-422    	; 0x3a0e <__fp_split3>
    3bb4:	80 f3       	brcs	.-32     	; 0x3b96 <__addsf3+0x8>
    3bb6:	ba 17       	cp	r27, r26
    3bb8:	62 07       	cpc	r22, r18
    3bba:	73 07       	cpc	r23, r19
    3bbc:	84 07       	cpc	r24, r20
    3bbe:	95 07       	cpc	r25, r21
    3bc0:	18 f0       	brcs	.+6      	; 0x3bc8 <__addsf3x+0x18>
    3bc2:	71 f4       	brne	.+28     	; 0x3be0 <__addsf3x+0x30>
    3bc4:	9e f5       	brtc	.+102    	; 0x3c2c <__addsf3x+0x7c>
    3bc6:	45 cf       	rjmp	.-374    	; 0x3a52 <__fp_zero>
    3bc8:	0e f4       	brtc	.+2      	; 0x3bcc <__addsf3x+0x1c>
    3bca:	e0 95       	com	r30
    3bcc:	0b 2e       	mov	r0, r27
    3bce:	ba 2f       	mov	r27, r26
    3bd0:	a0 2d       	mov	r26, r0
    3bd2:	0b 01       	movw	r0, r22
    3bd4:	b9 01       	movw	r22, r18
    3bd6:	90 01       	movw	r18, r0
    3bd8:	0c 01       	movw	r0, r24
    3bda:	ca 01       	movw	r24, r20
    3bdc:	a0 01       	movw	r20, r0
    3bde:	11 24       	eor	r1, r1
    3be0:	ff 27       	eor	r31, r31
    3be2:	59 1b       	sub	r21, r25
    3be4:	99 f0       	breq	.+38     	; 0x3c0c <__addsf3x+0x5c>
    3be6:	59 3f       	cpi	r21, 0xF9	; 249
    3be8:	50 f4       	brcc	.+20     	; 0x3bfe <__addsf3x+0x4e>
    3bea:	50 3e       	cpi	r21, 0xE0	; 224
    3bec:	68 f1       	brcs	.+90     	; 0x3c48 <__addsf3x+0x98>
    3bee:	1a 16       	cp	r1, r26
    3bf0:	f0 40       	sbci	r31, 0x00	; 0
    3bf2:	a2 2f       	mov	r26, r18
    3bf4:	23 2f       	mov	r18, r19
    3bf6:	34 2f       	mov	r19, r20
    3bf8:	44 27       	eor	r20, r20
    3bfa:	58 5f       	subi	r21, 0xF8	; 248
    3bfc:	f3 cf       	rjmp	.-26     	; 0x3be4 <__addsf3x+0x34>
    3bfe:	46 95       	lsr	r20
    3c00:	37 95       	ror	r19
    3c02:	27 95       	ror	r18
    3c04:	a7 95       	ror	r26
    3c06:	f0 40       	sbci	r31, 0x00	; 0
    3c08:	53 95       	inc	r21
    3c0a:	c9 f7       	brne	.-14     	; 0x3bfe <__addsf3x+0x4e>
    3c0c:	7e f4       	brtc	.+30     	; 0x3c2c <__addsf3x+0x7c>
    3c0e:	1f 16       	cp	r1, r31
    3c10:	ba 0b       	sbc	r27, r26
    3c12:	62 0b       	sbc	r22, r18
    3c14:	73 0b       	sbc	r23, r19
    3c16:	84 0b       	sbc	r24, r20
    3c18:	ba f0       	brmi	.+46     	; 0x3c48 <__addsf3x+0x98>
    3c1a:	91 50       	subi	r25, 0x01	; 1
    3c1c:	a1 f0       	breq	.+40     	; 0x3c46 <__addsf3x+0x96>
    3c1e:	ff 0f       	add	r31, r31
    3c20:	bb 1f       	adc	r27, r27
    3c22:	66 1f       	adc	r22, r22
    3c24:	77 1f       	adc	r23, r23
    3c26:	88 1f       	adc	r24, r24
    3c28:	c2 f7       	brpl	.-16     	; 0x3c1a <__addsf3x+0x6a>
    3c2a:	0e c0       	rjmp	.+28     	; 0x3c48 <__addsf3x+0x98>
    3c2c:	ba 0f       	add	r27, r26
    3c2e:	62 1f       	adc	r22, r18
    3c30:	73 1f       	adc	r23, r19
    3c32:	84 1f       	adc	r24, r20
    3c34:	48 f4       	brcc	.+18     	; 0x3c48 <__addsf3x+0x98>
    3c36:	87 95       	ror	r24
    3c38:	77 95       	ror	r23
    3c3a:	67 95       	ror	r22
    3c3c:	b7 95       	ror	r27
    3c3e:	f7 95       	ror	r31
    3c40:	9e 3f       	cpi	r25, 0xFE	; 254
    3c42:	08 f0       	brcs	.+2      	; 0x3c46 <__addsf3x+0x96>
    3c44:	b3 cf       	rjmp	.-154    	; 0x3bac <__addsf3+0x1e>
    3c46:	93 95       	inc	r25
    3c48:	88 0f       	add	r24, r24
    3c4a:	08 f0       	brcs	.+2      	; 0x3c4e <__addsf3x+0x9e>
    3c4c:	99 27       	eor	r25, r25
    3c4e:	ee 0f       	add	r30, r30
    3c50:	97 95       	ror	r25
    3c52:	87 95       	ror	r24
    3c54:	08 95       	ret

00003c56 <__fp_inf>:
    3c56:	97 f9       	bld	r25, 7
    3c58:	9f 67       	ori	r25, 0x7F	; 127
    3c5a:	80 e8       	ldi	r24, 0x80	; 128
    3c5c:	70 e0       	ldi	r23, 0x00	; 0
    3c5e:	60 e0       	ldi	r22, 0x00	; 0
    3c60:	08 95       	ret

00003c62 <__fp_nan>:
    3c62:	9f ef       	ldi	r25, 0xFF	; 255
    3c64:	80 ec       	ldi	r24, 0xC0	; 192
    3c66:	08 95       	ret

00003c68 <__fp_pscA>:
    3c68:	00 24       	eor	r0, r0
    3c6a:	0a 94       	dec	r0
    3c6c:	16 16       	cp	r1, r22
    3c6e:	17 06       	cpc	r1, r23
    3c70:	18 06       	cpc	r1, r24
    3c72:	09 06       	cpc	r0, r25
    3c74:	08 95       	ret

00003c76 <__fp_pscB>:
    3c76:	00 24       	eor	r0, r0
    3c78:	0a 94       	dec	r0
    3c7a:	12 16       	cp	r1, r18
    3c7c:	13 06       	cpc	r1, r19
    3c7e:	14 06       	cpc	r1, r20
    3c80:	05 06       	cpc	r0, r21
    3c82:	08 95       	ret

00003c84 <__fp_round>:
    3c84:	09 2e       	mov	r0, r25
    3c86:	03 94       	inc	r0
    3c88:	00 0c       	add	r0, r0
    3c8a:	11 f4       	brne	.+4      	; 0x3c90 <__fp_round+0xc>
    3c8c:	88 23       	and	r24, r24
    3c8e:	52 f0       	brmi	.+20     	; 0x3ca4 <__fp_round+0x20>
    3c90:	bb 0f       	add	r27, r27
    3c92:	40 f4       	brcc	.+16     	; 0x3ca4 <__fp_round+0x20>
    3c94:	bf 2b       	or	r27, r31
    3c96:	11 f4       	brne	.+4      	; 0x3c9c <__fp_round+0x18>
    3c98:	60 ff       	sbrs	r22, 0
    3c9a:	04 c0       	rjmp	.+8      	; 0x3ca4 <__fp_round+0x20>
    3c9c:	6f 5f       	subi	r22, 0xFF	; 255
    3c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca4:	08 95       	ret

00003ca6 <_hihTwiCallback>:
    3ca6:	65 30       	cpi	r22, 0x05	; 5
    3ca8:	f1 f4       	brne	.+60     	; 0x3ce6 <_hihTwiCallback+0x40>
    3caa:	fa 01       	movw	r30, r20
    3cac:	80 81       	ld	r24, Z
    3cae:	8f 73       	andi	r24, 0x3F	; 63
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	98 2f       	mov	r25, r24
    3cb4:	88 27       	eor	r24, r24
    3cb6:	21 81       	ldd	r18, Z+1	; 0x01
    3cb8:	82 2b       	or	r24, r18
    3cba:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cbe:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	f0 e4       	ldi	r31, 0x40	; 64
    3cc6:	8f 9f       	mul	r24, r31
    3cc8:	c0 01       	movw	r24, r0
    3cca:	11 24       	eor	r1, r1
    3ccc:	fa 01       	movw	r30, r20
    3cce:	23 81       	ldd	r18, Z+3	; 0x03
    3cd0:	26 95       	lsr	r18
    3cd2:	26 95       	lsr	r18
    3cd4:	82 2b       	or	r24, r18
    3cd6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3cda:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	80 93 7d 11 	sts	0x117D, r24	; 0x80117d <_measuringIsReady>
    3ce4:	08 95       	ret
    3ce6:	64 30       	cpi	r22, 0x04	; 4
    3ce8:	51 f0       	breq	.+20     	; 0x3cfe <_hihTwiCallback+0x58>
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	90 e4       	ldi	r25, 0x40	; 64
    3cee:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3cf2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3cf6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cfa:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3cfe:	08 95       	ret

00003d00 <hih8120_initialise>:
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	03 e5       	ldi	r16, 0x53	; 83
    3d06:	1e e1       	ldi	r17, 0x1E	; 30
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	34 e2       	ldi	r19, 0x24	; 36
    3d0c:	44 ef       	ldi	r20, 0xF4	; 244
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	87 e2       	ldi	r24, 0x27	; 39
    3d14:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <twiCreate>
    3d18:	90 93 7f 11 	sts	0x117F, r25	; 0x80117f <_hih8120Handler+0x1>
    3d1c:	80 93 7e 11 	sts	0x117E, r24	; 0x80117e <_hih8120Handler>
    3d20:	21 e0       	ldi	r18, 0x01	; 1
    3d22:	89 2b       	or	r24, r25
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <hih8120_initialise+0x28>
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	82 2f       	mov	r24, r18
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	08 95       	ret

00003d30 <hih8120_wakeup>:
    3d30:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <_hih8120Handler>
    3d34:	90 91 7f 11 	lds	r25, 0x117F	; 0x80117f <_hih8120Handler+0x1>
    3d38:	00 97       	sbiw	r24, 0x00	; 0
    3d3a:	59 f0       	breq	.+22     	; 0x3d52 <hih8120_wakeup+0x22>
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	60 e0       	ldi	r22, 0x00	; 0
    3d40:	70 e0       	ldi	r23, 0x00	; 0
    3d42:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <twiTransmit>
    3d46:	84 30       	cpi	r24, 0x04	; 4
    3d48:	31 f4       	brne	.+12     	; 0x3d56 <hih8120_wakeup+0x26>
    3d4a:	10 92 7d 11 	sts	0x117D, r1	; 0x80117d <_measuringIsReady>
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	08 95       	ret
    3d52:	82 e0       	ldi	r24, 0x02	; 2
    3d54:	08 95       	ret
    3d56:	83 e0       	ldi	r24, 0x03	; 3
    3d58:	08 95       	ret

00003d5a <hih8120_measure>:
    3d5a:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <_hih8120Handler>
    3d5e:	90 91 7f 11 	lds	r25, 0x117F	; 0x80117f <_hih8120Handler+0x1>
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	39 f0       	breq	.+14     	; 0x3d74 <hih8120_measure+0x1a>
    3d66:	64 e0       	ldi	r22, 0x04	; 4
    3d68:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <twiReceive>
    3d6c:	85 30       	cpi	r24, 0x05	; 5
    3d6e:	21 f0       	breq	.+8      	; 0x3d78 <hih8120_measure+0x1e>
    3d70:	83 e0       	ldi	r24, 0x03	; 3
    3d72:	08 95       	ret
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	08 95       	ret
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	08 95       	ret

00003d7c <hih8120_getTemperature>:
    3d7c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3d80:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <__floatunsisf>
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	45 e2       	ldi	r20, 0x25	; 37
    3d92:	53 e4       	ldi	r21, 0x43	; 67
    3d94:	98 de       	rcall	.-720    	; 0x3ac6 <__mulsf3>
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	38 ef       	ldi	r19, 0xF8	; 248
    3d9a:	4f e7       	ldi	r20, 0x7F	; 127
    3d9c:	56 e4       	ldi	r21, 0x46	; 70
    3d9e:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__divsf3>
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e2       	ldi	r20, 0x20	; 32
    3da8:	52 e4       	ldi	r21, 0x42	; 66
    3daa:	f0 ce       	rjmp	.-544    	; 0x3b8c <__subsf3>
    3dac:	08 95       	ret

00003dae <_serialCallBack>:
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	1f 92       	push	r1
    3db8:	1f 92       	push	r1
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
    3dbe:	8c 01       	movw	r16, r24
    3dc0:	19 82       	std	Y+1, r1	; 0x01
    3dc2:	2d c0       	rjmp	.+90     	; 0x3e1e <_serialCallBack+0x70>
    3dc4:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <rec_buf_inp.2878>
    3dc8:	ec 32       	cpi	r30, 0x2C	; 44
    3dca:	50 f4       	brcc	.+20     	; 0x3de0 <_serialCallBack+0x32>
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	8e 0f       	add	r24, r30
    3dd0:	80 93 b7 11 	sts	0x11B7, r24	; 0x8011b7 <rec_buf_inp.2878>
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	e7 51       	subi	r30, 0x17	; 23
    3dd8:	fe 4e       	sbci	r31, 0xEE	; 238
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	80 83       	st	Z, r24
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <_serialCallBack+0x36>
    3de0:	10 92 b7 11 	sts	0x11B7, r1	; 0x8011b7 <rec_buf_inp.2878>
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	8a 30       	cpi	r24, 0x0A	; 10
    3de8:	d1 f4       	brne	.+52     	; 0x3e1e <_serialCallBack+0x70>
    3dea:	40 91 b7 11 	lds	r20, 0x11B7	; 0x8011b7 <rec_buf_inp.2878>
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	fa 01       	movw	r30, r20
    3df2:	e9 51       	subi	r30, 0x19	; 25
    3df4:	fe 4e       	sbci	r31, 0xEE	; 238
    3df6:	10 82       	st	Z, r1
    3df8:	41 50       	subi	r20, 0x01	; 1
    3dfa:	51 09       	sbc	r21, r1
    3dfc:	9e 01       	movw	r18, r28
    3dfe:	2f 5f       	subi	r18, 0xFF	; 255
    3e00:	3f 4f       	sbci	r19, 0xFF	; 255
    3e02:	69 ee       	ldi	r22, 0xE9	; 233
    3e04:	71 e1       	ldi	r23, 0x11	; 17
    3e06:	80 91 ba 11 	lds	r24, 0x11BA	; 0x8011ba <_serialReplyBufferHandle>
    3e0a:	90 91 bb 11 	lds	r25, 0x11BB	; 0x8011bb <_serialReplyBufferHandle+0x1>
    3e0e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <xStreamBufferSendFromISR>
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	81 11       	cpse	r24, r1
    3e16:	0e 94 11 07 	call	0xe22	; 0xe22 <vPortYield>
    3e1a:	10 92 b7 11 	sts	0x11B7, r1	; 0x8011b7 <rec_buf_inp.2878>
    3e1e:	be 01       	movw	r22, r28
    3e20:	6e 5f       	subi	r22, 0xFE	; 254
    3e22:	7f 4f       	sbci	r23, 0xFF	; 255
    3e24:	c8 01       	movw	r24, r16
    3e26:	51 d5       	rcall	.+2722   	; 0x48ca <serial_getByte>
    3e28:	88 23       	and	r24, r24
    3e2a:	61 f2       	breq	.-104    	; 0x3dc4 <_serialCallBack+0x16>
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	1f 91       	pop	r17
    3e36:	0f 91       	pop	r16
    3e38:	08 95       	ret

00003e3a <_uploadMessage>:
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	8c 01       	movw	r16, r24
    3e44:	eb 01       	movw	r28, r22
    3e46:	80 91 ba 11 	lds	r24, 0x11BA	; 0x8011ba <_serialReplyBufferHandle>
    3e4a:	90 91 bb 11 	lds	r25, 0x11BB	; 0x8011bb <_serialReplyBufferHandle+0x1>
    3e4e:	0e 94 24 0c 	call	0x1848	; 0x1848 <xStreamBufferReset>
    3e52:	b8 01       	movw	r22, r16
    3e54:	80 e8       	ldi	r24, 0x80	; 128
    3e56:	91 e1       	ldi	r25, 0x11	; 17
    3e58:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <strcpy>
    3e5c:	20 97       	sbiw	r28, 0x00	; 0
    3e5e:	79 f0       	breq	.+30     	; 0x3e7e <_uploadMessage+0x44>
    3e60:	e0 e8       	ldi	r30, 0x80	; 128
    3e62:	f1 e1       	ldi	r31, 0x11	; 17
    3e64:	01 90       	ld	r0, Z+
    3e66:	00 20       	and	r0, r0
    3e68:	e9 f7       	brne	.-6      	; 0x3e64 <_uploadMessage+0x2a>
    3e6a:	31 97       	sbiw	r30, 0x01	; 1
    3e6c:	80 e2       	ldi	r24, 0x20	; 32
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	80 83       	st	Z, r24
    3e74:	be 01       	movw	r22, r28
    3e76:	80 e8       	ldi	r24, 0x80	; 128
    3e78:	91 e1       	ldi	r25, 0x11	; 17
    3e7a:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <strcat>
    3e7e:	e0 e8       	ldi	r30, 0x80	; 128
    3e80:	f1 e1       	ldi	r31, 0x11	; 17
    3e82:	df 01       	movw	r26, r30
    3e84:	0d 90       	ld	r0, X+
    3e86:	00 20       	and	r0, r0
    3e88:	e9 f7       	brne	.-6      	; 0x3e84 <_uploadMessage+0x4a>
    3e8a:	11 97       	sbiw	r26, 0x01	; 1
    3e8c:	8d e0       	ldi	r24, 0x0D	; 13
    3e8e:	9a e0       	ldi	r25, 0x0A	; 10
    3e90:	11 96       	adiw	r26, 0x01	; 1
    3e92:	9c 93       	st	X, r25
    3e94:	8e 93       	st	-X, r24
    3e96:	12 96       	adiw	r26, 0x02	; 2
    3e98:	1c 92       	st	X, r1
    3e9a:	01 90       	ld	r0, Z+
    3e9c:	00 20       	and	r0, r0
    3e9e:	e9 f7       	brne	.-6      	; 0x3e9a <_uploadMessage+0x60>
    3ea0:	31 97       	sbiw	r30, 0x01	; 1
    3ea2:	e0 58       	subi	r30, 0x80	; 128
    3ea4:	f1 41       	sbci	r31, 0x11	; 17
    3ea6:	ae 2f       	mov	r26, r30
    3ea8:	80 e8       	ldi	r24, 0x80	; 128
    3eaa:	91 e1       	ldi	r25, 0x11	; 17
    3eac:	ac 01       	movw	r20, r24
    3eae:	6a 2f       	mov	r22, r26
    3eb0:	80 91 bc 11 	lds	r24, 0x11BC	; 0x8011bc <_rn2483_serial>
    3eb4:	90 91 bd 11 	lds	r25, 0x11BD	; 0x8011bd <_rn2483_serial+0x1>
    3eb8:	b3 d4       	rcall	.+2406   	; 0x4820 <serial_sendBytes>
    3eba:	81 11       	cpse	r24, r1
    3ebc:	11 c0       	rjmp	.+34     	; 0x3ee0 <_uploadMessage+0xa6>
    3ebe:	08 e2       	ldi	r16, 0x28	; 40
    3ec0:	15 e0       	ldi	r17, 0x05	; 5
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	4d e2       	ldi	r20, 0x2D	; 45
    3ec8:	50 e0       	ldi	r21, 0x00	; 0
    3eca:	63 e4       	ldi	r22, 0x43	; 67
    3ecc:	72 e1       	ldi	r23, 0x12	; 18
    3ece:	80 91 ba 11 	lds	r24, 0x11BA	; 0x8011ba <_serialReplyBufferHandle>
    3ed2:	90 91 bb 11 	lds	r25, 0x11BB	; 0x8011bb <_serialReplyBufferHandle+0x1>
    3ed6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <xStreamBufferReceive>
    3eda:	83 e4       	ldi	r24, 0x43	; 67
    3edc:	92 e1       	ldi	r25, 0x12	; 18
    3ede:	02 c0       	rjmp	.+4      	; 0x3ee4 <_uploadMessage+0xaa>
    3ee0:	80 e0       	ldi	r24, 0x00	; 0
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	08 95       	ret

00003eee <_reply2ReturnCode>:
    3eee:	2f 92       	push	r2
    3ef0:	3f 92       	push	r3
    3ef2:	4f 92       	push	r4
    3ef4:	5f 92       	push	r5
    3ef6:	6f 92       	push	r6
    3ef8:	7f 92       	push	r7
    3efa:	8f 92       	push	r8
    3efc:	9f 92       	push	r9
    3efe:	af 92       	push	r10
    3f00:	bf 92       	push	r11
    3f02:	cf 92       	push	r12
    3f04:	df 92       	push	r13
    3f06:	ef 92       	push	r14
    3f08:	ff 92       	push	r15
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	5c 01       	movw	r10, r24
    3f14:	fc 01       	movw	r30, r24
    3f16:	01 90       	ld	r0, Z+
    3f18:	00 20       	and	r0, r0
    3f1a:	e9 f7       	brne	.-6      	; 0x3f16 <_reply2ReturnCode+0x28>
    3f1c:	31 97       	sbiw	r30, 0x01	; 1
    3f1e:	6f 01       	movw	r12, r30
    3f20:	c8 1a       	sub	r12, r24
    3f22:	d9 0a       	sbc	r13, r25
    3f24:	5c 2c       	mov	r5, r12
    3f26:	0f 2e       	mov	r0, r31
    3f28:	fb e7       	ldi	r31, 0x7B	; 123
    3f2a:	8f 2e       	mov	r8, r31
    3f2c:	f6 e0       	ldi	r31, 0x06	; 6
    3f2e:	9f 2e       	mov	r9, r31
    3f30:	f0 2d       	mov	r31, r0
    3f32:	e1 2c       	mov	r14, r1
    3f34:	f1 2c       	mov	r15, r1
    3f36:	4c 2c       	mov	r4, r12
    3f38:	37 01       	movw	r6, r14
    3f3a:	f4 01       	movw	r30, r8
    3f3c:	01 81       	ldd	r16, Z+1	; 0x01
    3f3e:	12 81       	ldd	r17, Z+2	; 0x02
    3f40:	e8 01       	movw	r28, r16
    3f42:	09 90       	ld	r0, Y+
    3f44:	00 20       	and	r0, r0
    3f46:	e9 f7       	brne	.-6      	; 0x3f42 <_reply2ReturnCode+0x54>
    3f48:	21 97       	sbiw	r28, 0x01	; 1
    3f4a:	c0 1b       	sub	r28, r16
    3f4c:	d1 0b       	sbc	r29, r17
    3f4e:	3c 2e       	mov	r3, r28
    3f50:	f9 e0       	ldi	r31, 0x09	; 9
    3f52:	cf 16       	cp	r12, r31
    3f54:	d1 04       	cpc	r13, r1
    3f56:	58 f0       	brcs	.+22     	; 0x3f6e <_reply2ReturnCode+0x80>
    3f58:	f4 01       	movw	r30, r8
    3f5a:	20 80       	ld	r2, Z
    3f5c:	fe e0       	ldi	r31, 0x0E	; 14
    3f5e:	2f 12       	cpse	r2, r31
    3f60:	06 c0       	rjmp	.+12     	; 0x3f6e <_reply2ReturnCode+0x80>
    3f62:	b8 01       	movw	r22, r16
    3f64:	c5 01       	movw	r24, r10
    3f66:	0e 94 57 2f 	call	0x5eae	; 0x5eae <strcasestr>
    3f6a:	89 2b       	or	r24, r25
    3f6c:	09 f5       	brne	.+66     	; 0x3fb0 <_reply2ReturnCode+0xc2>
    3f6e:	44 2d       	mov	r20, r4
    3f70:	35 14       	cp	r3, r5
    3f72:	08 f4       	brcc	.+2      	; 0x3f76 <_reply2ReturnCode+0x88>
    3f74:	4c 2f       	mov	r20, r28
    3f76:	50 e0       	ldi	r21, 0x00	; 0
    3f78:	b8 01       	movw	r22, r16
    3f7a:	c5 01       	movw	r24, r10
    3f7c:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <strncasecmp>
    3f80:	89 2b       	or	r24, r25
    3f82:	49 f4       	brne	.+18     	; 0x3f96 <_reply2ReturnCode+0xa8>
    3f84:	f3 01       	movw	r30, r6
    3f86:	ee 0f       	add	r30, r30
    3f88:	ff 1f       	adc	r31, r31
    3f8a:	e6 0d       	add	r30, r6
    3f8c:	f7 1d       	adc	r31, r7
    3f8e:	e5 58       	subi	r30, 0x85	; 133
    3f90:	f9 4f       	sbci	r31, 0xF9	; 249
    3f92:	20 80       	ld	r2, Z
    3f94:	0d c0       	rjmp	.+26     	; 0x3fb0 <_reply2ReturnCode+0xc2>
    3f96:	8f ef       	ldi	r24, 0xFF	; 255
    3f98:	e8 1a       	sub	r14, r24
    3f9a:	f8 0a       	sbc	r15, r24
    3f9c:	e3 e0       	ldi	r30, 0x03	; 3
    3f9e:	8e 0e       	add	r8, r30
    3fa0:	91 1c       	adc	r9, r1
    3fa2:	f1 e1       	ldi	r31, 0x11	; 17
    3fa4:	ef 16       	cp	r14, r31
    3fa6:	f1 04       	cpc	r15, r1
    3fa8:	39 f6       	brne	.-114    	; 0x3f38 <_reply2ReturnCode+0x4a>
    3faa:	68 94       	set
    3fac:	22 24       	eor	r2, r2
    3fae:	24 f8       	bld	r2, 4
    3fb0:	82 2d       	mov	r24, r2
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	1f 91       	pop	r17
    3fb8:	0f 91       	pop	r16
    3fba:	ff 90       	pop	r15
    3fbc:	ef 90       	pop	r14
    3fbe:	df 90       	pop	r13
    3fc0:	cf 90       	pop	r12
    3fc2:	bf 90       	pop	r11
    3fc4:	af 90       	pop	r10
    3fc6:	9f 90       	pop	r9
    3fc8:	8f 90       	pop	r8
    3fca:	7f 90       	pop	r7
    3fcc:	6f 90       	pop	r6
    3fce:	5f 90       	pop	r5
    3fd0:	4f 90       	pop	r4
    3fd2:	3f 90       	pop	r3
    3fd4:	2f 90       	pop	r2
    3fd6:	08 95       	ret

00003fd8 <_uploadMessageRc>:
    3fd8:	30 df       	rcall	.-416    	; 0x3e3a <_uploadMessage>
    3fda:	89 cf       	rjmp	.-238    	; 0x3eee <_reply2ReturnCode>
    3fdc:	08 95       	ret

00003fde <lora_driver_flushBuffers>:
    3fde:	80 91 ba 11 	lds	r24, 0x11BA	; 0x8011ba <_serialReplyBufferHandle>
    3fe2:	90 91 bb 11 	lds	r25, 0x11BB	; 0x8011bb <_serialReplyBufferHandle+0x1>
    3fe6:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <xStreamBufferReset>
    3fea:	08 95       	ret

00003fec <lora_driver_initialise>:
    3fec:	8f 92       	push	r8
    3fee:	9f 92       	push	r9
    3ff0:	af 92       	push	r10
    3ff2:	cf 92       	push	r12
    3ff4:	ef 92       	push	r14
    3ff6:	0f 93       	push	r16
    3ff8:	1f 93       	push	r17
    3ffa:	cf 93       	push	r28
    3ffc:	c8 2f       	mov	r28, r24
    3ffe:	8b 01       	movw	r16, r22
    4000:	41 e0       	ldi	r20, 0x01	; 1
    4002:	60 e0       	ldi	r22, 0x00	; 0
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	88 ec       	ldi	r24, 0xC8	; 200
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <xStreamBufferGenericCreate>
    400e:	90 93 bb 11 	sts	0x11BB, r25	; 0x8011bb <_serialReplyBufferHandle+0x1>
    4012:	80 93 ba 11 	sts	0x11BA, r24	; 0x8011ba <_serialReplyBufferHandle>
    4016:	10 93 b9 11 	sts	0x11B9, r17	; 0x8011b9 <_downlinkMessageBuffer+0x1>
    401a:	00 93 b8 11 	sts	0x11B8, r16	; 0x8011b8 <_downlinkMessageBuffer>
    401e:	0f 2e       	mov	r0, r31
    4020:	f7 ed       	ldi	r31, 0xD7	; 215
    4022:	8f 2e       	mov	r8, r31
    4024:	fe e1       	ldi	r31, 0x1E	; 30
    4026:	9f 2e       	mov	r9, r31
    4028:	f0 2d       	mov	r31, r0
    402a:	68 94       	set
    402c:	aa 24       	eor	r10, r10
    402e:	a6 f8       	bld	r10, 6
    4030:	68 94       	set
    4032:	cc 24       	eor	r12, r12
    4034:	c6 f8       	bld	r12, 6
    4036:	e1 2c       	mov	r14, r1
    4038:	00 e0       	ldi	r16, 0x00	; 0
    403a:	23 e0       	ldi	r18, 0x03	; 3
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	51 ee       	ldi	r21, 0xE1	; 225
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	70 e0       	ldi	r23, 0x00	; 0
    4044:	8c 2f       	mov	r24, r28
    4046:	1e d3       	rcall	.+1596   	; 0x4684 <serial_create>
    4048:	90 93 bd 11 	sts	0x11BD, r25	; 0x8011bd <_rn2483_serial+0x1>
    404c:	80 93 bc 11 	sts	0x11BC, r24	; 0x8011bc <_rn2483_serial>
    4050:	e7 e0       	ldi	r30, 0x07	; 7
    4052:	f1 e0       	ldi	r31, 0x01	; 1
    4054:	80 81       	ld	r24, Z
    4056:	80 61       	ori	r24, 0x10	; 16
    4058:	80 83       	st	Z, r24
    405a:	cf 91       	pop	r28
    405c:	1f 91       	pop	r17
    405e:	0f 91       	pop	r16
    4060:	ef 90       	pop	r14
    4062:	cf 90       	pop	r12
    4064:	af 90       	pop	r10
    4066:	9f 90       	pop	r9
    4068:	8f 90       	pop	r8
    406a:	08 95       	ret

0000406c <lora_driver_resetRn2483>:
    406c:	88 23       	and	r24, r24
    406e:	31 f0       	breq	.+12     	; 0x407c <lora_driver_resetRn2483+0x10>
    4070:	e8 e0       	ldi	r30, 0x08	; 8
    4072:	f1 e0       	ldi	r31, 0x01	; 1
    4074:	80 81       	ld	r24, Z
    4076:	8f 7e       	andi	r24, 0xEF	; 239
    4078:	80 83       	st	Z, r24
    407a:	08 95       	ret
    407c:	e8 e0       	ldi	r30, 0x08	; 8
    407e:	f1 e0       	ldi	r31, 0x01	; 1
    4080:	80 81       	ld	r24, Z
    4082:	80 61       	ori	r24, 0x10	; 16
    4084:	80 83       	st	Z, r24
    4086:	08 95       	ret

00004088 <lora_driver_rn2483FactoryReset>:
    4088:	60 e0       	ldi	r22, 0x00	; 0
    408a:	70 e0       	ldi	r23, 0x00	; 0
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	94 e0       	ldi	r25, 0x04	; 4
    4090:	d4 de       	rcall	.-600    	; 0x3e3a <_uploadMessage>
    4092:	e3 e4       	ldi	r30, 0x43	; 67
    4094:	f2 e1       	ldi	r31, 0x12	; 18
    4096:	01 90       	ld	r0, Z+
    4098:	00 20       	and	r0, r0
    409a:	e9 f7       	brne	.-6      	; 0x4096 <lora_driver_rn2483FactoryReset+0xe>
    409c:	31 97       	sbiw	r30, 0x01	; 1
    409e:	e3 54       	subi	r30, 0x43	; 67
    40a0:	f2 41       	sbci	r31, 0x12	; 18
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	75 97       	sbiw	r30, 0x15	; 21
    40a6:	08 f0       	brcs	.+2      	; 0x40aa <lora_driver_rn2483FactoryReset+0x22>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	08 95       	ret

000040ac <lora_driver_getRn2483Hweui>:
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	ec 01       	movw	r28, r24
    40b2:	60 e0       	ldi	r22, 0x00	; 0
    40b4:	70 e0       	ldi	r23, 0x00	; 0
    40b6:	82 e1       	ldi	r24, 0x12	; 18
    40b8:	94 e0       	ldi	r25, 0x04	; 4
    40ba:	bf de       	rcall	.-642    	; 0x3e3a <_uploadMessage>
    40bc:	e3 e4       	ldi	r30, 0x43	; 67
    40be:	f2 e1       	ldi	r31, 0x12	; 18
    40c0:	01 90       	ld	r0, Z+
    40c2:	00 20       	and	r0, r0
    40c4:	e9 f7       	brne	.-6      	; 0x40c0 <lora_driver_getRn2483Hweui+0x14>
    40c6:	e4 55       	subi	r30, 0x54	; 84
    40c8:	f2 41       	sbci	r31, 0x12	; 18
    40ca:	39 f4       	brne	.+14     	; 0x40da <lora_driver_getRn2483Hweui+0x2e>
    40cc:	63 e4       	ldi	r22, 0x43	; 67
    40ce:	72 e1       	ldi	r23, 0x12	; 18
    40d0:	ce 01       	movw	r24, r28
    40d2:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <strcpy>
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	02 c0       	rjmp	.+4      	; 0x40de <lora_driver_getRn2483Hweui+0x32>
    40da:	18 82       	st	Y, r1
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	df 91       	pop	r29
    40e0:	cf 91       	pop	r28
    40e2:	08 95       	ret

000040e4 <lora_driver_setDeviceIdentifier>:
    40e4:	fc 01       	movw	r30, r24
    40e6:	01 90       	ld	r0, Z+
    40e8:	00 20       	and	r0, r0
    40ea:	e9 f7       	brne	.-6      	; 0x40e6 <lora_driver_setDeviceIdentifier+0x2>
    40ec:	9f 01       	movw	r18, r30
    40ee:	21 51       	subi	r18, 0x11	; 17
    40f0:	31 09       	sbc	r19, r1
    40f2:	28 17       	cp	r18, r24
    40f4:	39 07       	cpc	r19, r25
    40f6:	29 f4       	brne	.+10     	; 0x4102 <lora_driver_setDeviceIdentifier+0x1e>
    40f8:	bc 01       	movw	r22, r24
    40fa:	80 e4       	ldi	r24, 0x40	; 64
    40fc:	94 e0       	ldi	r25, 0x04	; 4
    40fe:	6c cf       	rjmp	.-296    	; 0x3fd8 <_uploadMessageRc>
    4100:	08 95       	ret
    4102:	89 e0       	ldi	r24, 0x09	; 9
    4104:	08 95       	ret

00004106 <lora_driver_setApplicationIdentifier>:
    4106:	fc 01       	movw	r30, r24
    4108:	01 90       	ld	r0, Z+
    410a:	00 20       	and	r0, r0
    410c:	e9 f7       	brne	.-6      	; 0x4108 <lora_driver_setApplicationIdentifier+0x2>
    410e:	9f 01       	movw	r18, r30
    4110:	21 51       	subi	r18, 0x11	; 17
    4112:	31 09       	sbc	r19, r1
    4114:	28 17       	cp	r18, r24
    4116:	39 07       	cpc	r19, r25
    4118:	29 f4       	brne	.+10     	; 0x4124 <lora_driver_setApplicationIdentifier+0x1e>
    411a:	bc 01       	movw	r22, r24
    411c:	8f e4       	ldi	r24, 0x4F	; 79
    411e:	94 e0       	ldi	r25, 0x04	; 4
    4120:	5b cf       	rjmp	.-330    	; 0x3fd8 <_uploadMessageRc>
    4122:	08 95       	ret
    4124:	89 e0       	ldi	r24, 0x09	; 9
    4126:	08 95       	ret

00004128 <lora_driver_setApplicationKey>:
    4128:	fc 01       	movw	r30, r24
    412a:	01 90       	ld	r0, Z+
    412c:	00 20       	and	r0, r0
    412e:	e9 f7       	brne	.-6      	; 0x412a <lora_driver_setApplicationKey+0x2>
    4130:	9f 01       	movw	r18, r30
    4132:	21 52       	subi	r18, 0x21	; 33
    4134:	31 09       	sbc	r19, r1
    4136:	28 17       	cp	r18, r24
    4138:	39 07       	cpc	r19, r25
    413a:	29 f4       	brne	.+10     	; 0x4146 <lora_driver_setApplicationKey+0x1e>
    413c:	bc 01       	movw	r22, r24
    413e:	8e e5       	ldi	r24, 0x5E	; 94
    4140:	94 e0       	ldi	r25, 0x04	; 4
    4142:	4a cf       	rjmp	.-364    	; 0x3fd8 <_uploadMessageRc>
    4144:	08 95       	ret
    4146:	89 e0       	ldi	r24, 0x09	; 9
    4148:	08 95       	ret

0000414a <lora_driver_saveMac>:
    414a:	60 e0       	ldi	r22, 0x00	; 0
    414c:	70 e0       	ldi	r23, 0x00	; 0
    414e:	8d e9       	ldi	r24, 0x9D	; 157
    4150:	94 e0       	ldi	r25, 0x04	; 4
    4152:	42 cf       	rjmp	.-380    	; 0x3fd8 <_uploadMessageRc>
    4154:	08 95       	ret

00004156 <lora_driver_join>:
    4156:	0f 93       	push	r16
    4158:	1f 93       	push	r17
    415a:	e8 2f       	mov	r30, r24
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	ee 0f       	add	r30, r30
    4160:	ff 1f       	adc	r31, r31
    4162:	e9 58       	subi	r30, 0x89	; 137
    4164:	f9 4f       	sbci	r31, 0xF9	; 249
    4166:	60 81       	ld	r22, Z
    4168:	71 81       	ldd	r23, Z+1	; 0x01
    416a:	86 ea       	ldi	r24, 0xA6	; 166
    416c:	94 e0       	ldi	r25, 0x04	; 4
    416e:	34 df       	rcall	.-408    	; 0x3fd8 <_uploadMessageRc>
    4170:	81 11       	cpse	r24, r1
    4172:	14 c0       	rjmp	.+40     	; 0x419c <lora_driver_join+0x46>
    4174:	08 e2       	ldi	r16, 0x28	; 40
    4176:	15 e0       	ldi	r17, 0x05	; 5
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	4d e2       	ldi	r20, 0x2D	; 45
    417e:	50 e0       	ldi	r21, 0x00	; 0
    4180:	63 e4       	ldi	r22, 0x43	; 67
    4182:	72 e1       	ldi	r23, 0x12	; 18
    4184:	80 91 ba 11 	lds	r24, 0x11BA	; 0x8011ba <_serialReplyBufferHandle>
    4188:	90 91 bb 11 	lds	r25, 0x11BB	; 0x8011bb <_serialReplyBufferHandle+0x1>
    418c:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <xStreamBufferReceive>
    4190:	88 23       	and	r24, r24
    4192:	21 f0       	breq	.+8      	; 0x419c <lora_driver_join+0x46>
    4194:	83 e4       	ldi	r24, 0x43	; 67
    4196:	92 e1       	ldi	r25, 0x12	; 18
    4198:	aa de       	rcall	.-684    	; 0x3eee <_reply2ReturnCode>
    419a:	03 c0       	rjmp	.+6      	; 0x41a2 <lora_driver_join+0x4c>
    419c:	83 e4       	ldi	r24, 0x43	; 67
    419e:	92 e1       	ldi	r25, 0x12	; 18
    41a0:	a6 de       	rcall	.-692    	; 0x3eee <_reply2ReturnCode>
    41a2:	1f 91       	pop	r17
    41a4:	0f 91       	pop	r16
    41a6:	08 95       	ret

000041a8 <lora_driver_sendUploadMessage>:
    41a8:	0f 93       	push	r16
    41aa:	1f 93       	push	r17
    41ac:	cf 93       	push	r28
    41ae:	df 93       	push	r29
    41b0:	1f 92       	push	r1
    41b2:	cd b7       	in	r28, 0x3d	; 61
    41b4:	de b7       	in	r29, 0x3e	; 62
    41b6:	db 01       	movw	r26, r22
    41b8:	11 96       	adiw	r26, 0x01	; 1
    41ba:	9c 91       	ld	r25, X
    41bc:	11 97       	sbiw	r26, 0x01	; 1
    41be:	95 31       	cpi	r25, 0x15	; 21
    41c0:	08 f0       	brcs	.+2      	; 0x41c4 <lora_driver_sendUploadMessage+0x1c>
    41c2:	b4 c0       	rjmp	.+360    	; 0x432c <lora_driver_sendUploadMessage+0x184>
    41c4:	99 23       	and	r25, r25
    41c6:	81 f1       	breq	.+96     	; 0x4228 <lora_driver_sendUploadMessage+0x80>
    41c8:	60 e0       	ldi	r22, 0x00	; 0
    41ca:	70 e0       	ldi	r23, 0x00	; 0
    41cc:	27 2f       	mov	r18, r23
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	46 2f       	mov	r20, r22
    41d2:	50 e0       	ldi	r21, 0x00	; 0
    41d4:	fd 01       	movw	r30, r26
    41d6:	e4 0f       	add	r30, r20
    41d8:	f5 1f       	adc	r31, r21
    41da:	92 81       	ldd	r25, Z+2	; 0x02
    41dc:	92 95       	swap	r25
    41de:	9f 70       	andi	r25, 0x0F	; 15
    41e0:	9a 30       	cpi	r25, 0x0A	; 10
    41e2:	10 f0       	brcs	.+4      	; 0x41e8 <lora_driver_sendUploadMessage+0x40>
    41e4:	99 5c       	subi	r25, 0xC9	; 201
    41e6:	01 c0       	rjmp	.+2      	; 0x41ea <lora_driver_sendUploadMessage+0x42>
    41e8:	90 5d       	subi	r25, 0xD0	; 208
    41ea:	f9 01       	movw	r30, r18
    41ec:	ec 52       	subi	r30, 0x2C	; 44
    41ee:	fe 4e       	sbci	r31, 0xEE	; 238
    41f0:	90 83       	st	Z, r25
    41f2:	2f 5f       	subi	r18, 0xFF	; 255
    41f4:	3f 4f       	sbci	r19, 0xFF	; 255
    41f6:	fd 01       	movw	r30, r26
    41f8:	e4 0f       	add	r30, r20
    41fa:	f5 1f       	adc	r31, r21
    41fc:	92 81       	ldd	r25, Z+2	; 0x02
    41fe:	9f 70       	andi	r25, 0x0F	; 15
    4200:	49 2f       	mov	r20, r25
    4202:	50 e0       	ldi	r21, 0x00	; 0
    4204:	4a 30       	cpi	r20, 0x0A	; 10
    4206:	51 05       	cpc	r21, r1
    4208:	14 f0       	brlt	.+4      	; 0x420e <lora_driver_sendUploadMessage+0x66>
    420a:	99 5c       	subi	r25, 0xC9	; 201
    420c:	01 c0       	rjmp	.+2      	; 0x4210 <lora_driver_sendUploadMessage+0x68>
    420e:	90 5d       	subi	r25, 0xD0	; 208
    4210:	f9 01       	movw	r30, r18
    4212:	ec 52       	subi	r30, 0x2C	; 44
    4214:	fe 4e       	sbci	r31, 0xEE	; 238
    4216:	90 83       	st	Z, r25
    4218:	7e 5f       	subi	r23, 0xFE	; 254
    421a:	6f 5f       	subi	r22, 0xFF	; 255
    421c:	11 96       	adiw	r26, 0x01	; 1
    421e:	9c 91       	ld	r25, X
    4220:	11 97       	sbiw	r26, 0x01	; 1
    4222:	69 17       	cp	r22, r25
    4224:	98 f2       	brcs	.-90     	; 0x41cc <lora_driver_sendUploadMessage+0x24>
    4226:	01 c0       	rjmp	.+2      	; 0x422a <lora_driver_sendUploadMessage+0x82>
    4228:	70 e0       	ldi	r23, 0x00	; 0
    422a:	e7 2f       	mov	r30, r23
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	ec 52       	subi	r30, 0x2C	; 44
    4230:	fe 4e       	sbci	r31, 0xEE	; 238
    4232:	10 82       	st	Z, r1
    4234:	4c 91       	ld	r20, X
    4236:	81 11       	cpse	r24, r1
    4238:	03 c0       	rjmp	.+6      	; 0x4240 <lora_driver_sendUploadMessage+0x98>
    423a:	8f ea       	ldi	r24, 0xAF	; 175
    423c:	94 e0       	ldi	r25, 0x04	; 4
    423e:	02 c0       	rjmp	.+4      	; 0x4244 <lora_driver_sendUploadMessage+0x9c>
    4240:	81 eb       	ldi	r24, 0xB1	; 177
    4242:	94 e0       	ldi	r25, 0x04	; 4
    4244:	24 ed       	ldi	r18, 0xD4	; 212
    4246:	31 e1       	ldi	r19, 0x11	; 17
    4248:	3f 93       	push	r19
    424a:	2f 93       	push	r18
    424c:	1f 92       	push	r1
    424e:	4f 93       	push	r20
    4250:	9f 93       	push	r25
    4252:	8f 93       	push	r24
    4254:	85 eb       	ldi	r24, 0xB5	; 181
    4256:	94 e0       	ldi	r25, 0x04	; 4
    4258:	9f 93       	push	r25
    425a:	8f 93       	push	r24
    425c:	86 e1       	ldi	r24, 0x16	; 22
    425e:	92 e1       	ldi	r25, 0x12	; 18
    4260:	9f 93       	push	r25
    4262:	8f 93       	push	r24
    4264:	0e 94 30 30 	call	0x6060	; 0x6060 <sprintf>
    4268:	60 e0       	ldi	r22, 0x00	; 0
    426a:	70 e0       	ldi	r23, 0x00	; 0
    426c:	86 e1       	ldi	r24, 0x16	; 22
    426e:	92 e1       	ldi	r25, 0x12	; 18
    4270:	b3 de       	rcall	.-666    	; 0x3fd8 <_uploadMessageRc>
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	81 11       	cpse	r24, r1
    427e:	59 c0       	rjmp	.+178    	; 0x4332 <lora_driver_sendUploadMessage+0x18a>
    4280:	08 e2       	ldi	r16, 0x28	; 40
    4282:	15 e0       	ldi	r17, 0x05	; 5
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	4d e2       	ldi	r20, 0x2D	; 45
    428a:	50 e0       	ldi	r21, 0x00	; 0
    428c:	63 e4       	ldi	r22, 0x43	; 67
    428e:	72 e1       	ldi	r23, 0x12	; 18
    4290:	80 91 ba 11 	lds	r24, 0x11BA	; 0x8011ba <_serialReplyBufferHandle>
    4294:	90 91 bb 11 	lds	r25, 0x11BB	; 0x8011bb <_serialReplyBufferHandle+0x1>
    4298:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <xStreamBufferReceive>
    429c:	88 23       	and	r24, r24
    429e:	09 f4       	brne	.+2      	; 0x42a2 <lora_driver_sendUploadMessage+0xfa>
    42a0:	47 c0       	rjmp	.+142    	; 0x4330 <lora_driver_sendUploadMessage+0x188>
    42a2:	83 e4       	ldi	r24, 0x43	; 67
    42a4:	92 e1       	ldi	r25, 0x12	; 18
    42a6:	23 de       	rcall	.-954    	; 0x3eee <_reply2ReturnCode>
    42a8:	8e 30       	cpi	r24, 0x0E	; 14
    42aa:	09 f0       	breq	.+2      	; 0x42ae <lora_driver_sendUploadMessage+0x106>
    42ac:	42 c0       	rjmp	.+132    	; 0x4332 <lora_driver_sendUploadMessage+0x18a>
    42ae:	87 e0       	ldi	r24, 0x07	; 7
    42b0:	89 83       	std	Y+1, r24	; 0x01
    42b2:	80 91 b8 11 	lds	r24, 0x11B8	; 0x8011b8 <_downlinkMessageBuffer>
    42b6:	90 91 b9 11 	lds	r25, 0x11B9	; 0x8011b9 <_downlinkMessageBuffer+0x1>
    42ba:	89 2b       	or	r24, r25
    42bc:	a9 f1       	breq	.+106    	; 0x4328 <lora_driver_sendUploadMessage+0x180>
    42be:	be 01       	movw	r22, r28
    42c0:	6f 5f       	subi	r22, 0xFF	; 255
    42c2:	7f 4f       	sbci	r23, 0xFF	; 255
    42c4:	83 e4       	ldi	r24, 0x43	; 67
    42c6:	92 e1       	ldi	r25, 0x12	; 18
    42c8:	68 d1       	rcall	.+720    	; 0x459a <decode_port_no>
    42ca:	80 93 be 11 	sts	0x11BE, r24	; 0x8011be <_downlinkPayload>
    42ce:	e9 81       	ldd	r30, Y+1	; 0x01
    42d0:	f0 e0       	ldi	r31, 0x00	; 0
    42d2:	ed 5b       	subi	r30, 0xBD	; 189
    42d4:	fd 4e       	sbci	r31, 0xED	; 237
    42d6:	df 01       	movw	r26, r30
    42d8:	0d 90       	ld	r0, X+
    42da:	00 20       	and	r0, r0
    42dc:	e9 f7       	brne	.-6      	; 0x42d8 <lora_driver_sendUploadMessage+0x130>
    42de:	11 97       	sbiw	r26, 0x01	; 1
    42e0:	ae 1b       	sub	r26, r30
    42e2:	bf 0b       	sbc	r27, r31
    42e4:	aa 23       	and	r26, r26
    42e6:	91 f0       	breq	.+36     	; 0x430c <lora_driver_sendUploadMessage+0x164>
    42e8:	bb 27       	eor	r27, r27
    42ea:	cd 01       	movw	r24, r26
    42ec:	01 97       	sbiw	r24, 0x01	; 1
    42ee:	9c 01       	movw	r18, r24
    42f0:	12 f4       	brpl	.+4      	; 0x42f6 <lora_driver_sendUploadMessage+0x14e>
    42f2:	2f 5f       	subi	r18, 0xFF	; 255
    42f4:	3f 4f       	sbci	r19, 0xFF	; 255
    42f6:	35 95       	asr	r19
    42f8:	27 95       	ror	r18
    42fa:	20 93 bf 11 	sts	0x11BF, r18	; 0x8011bf <_downlinkPayload+0x1>
    42fe:	af 01       	movw	r20, r30
    4300:	4f 5f       	subi	r20, 0xFF	; 255
    4302:	5f 4f       	sbci	r21, 0xFF	; 255
    4304:	64 e1       	ldi	r22, 0x14	; 20
    4306:	80 ec       	ldi	r24, 0xC0	; 192
    4308:	91 e1       	ldi	r25, 0x11	; 17
    430a:	73 d1       	rcall	.+742    	; 0x45f2 <decode_hexadecimal_string_bytes>
    430c:	01 e0       	ldi	r16, 0x01	; 1
    430e:	10 e0       	ldi	r17, 0x00	; 0
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	46 e1       	ldi	r20, 0x16	; 22
    4316:	50 e0       	ldi	r21, 0x00	; 0
    4318:	6e eb       	ldi	r22, 0xBE	; 190
    431a:	71 e1       	ldi	r23, 0x11	; 17
    431c:	80 91 b8 11 	lds	r24, 0x11B8	; 0x8011b8 <_downlinkMessageBuffer>
    4320:	90 91 b9 11 	lds	r25, 0x11B9	; 0x8011b9 <_downlinkMessageBuffer+0x1>
    4324:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <xStreamBufferSend>
    4328:	8e e0       	ldi	r24, 0x0E	; 14
    432a:	03 c0       	rjmp	.+6      	; 0x4332 <lora_driver_sendUploadMessage+0x18a>
    432c:	84 e1       	ldi	r24, 0x14	; 20
    432e:	01 c0       	rjmp	.+2      	; 0x4332 <lora_driver_sendUploadMessage+0x18a>
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	0f 90       	pop	r0
    4334:	df 91       	pop	r29
    4336:	cf 91       	pop	r28
    4338:	1f 91       	pop	r17
    433a:	0f 91       	pop	r16
    433c:	08 95       	ret

0000433e <lora_driver_setAdaptiveDataRate>:
    433e:	81 30       	cpi	r24, 0x01	; 1
    4340:	19 f0       	breq	.+6      	; 0x4348 <lora_driver_setAdaptiveDataRate+0xa>
    4342:	65 ec       	ldi	r22, 0xC5	; 197
    4344:	74 e0       	ldi	r23, 0x04	; 4
    4346:	02 c0       	rjmp	.+4      	; 0x434c <lora_driver_setAdaptiveDataRate+0xe>
    4348:	6e e9       	ldi	r22, 0x9E	; 158
    434a:	75 e0       	ldi	r23, 0x05	; 5
    434c:	89 ec       	ldi	r24, 0xC9	; 201
    434e:	94 e0       	ldi	r25, 0x04	; 4
    4350:	43 ce       	rjmp	.-890    	; 0x3fd8 <_uploadMessageRc>
    4352:	08 95       	ret

00004354 <lora_driver_setReceiveDelay>:
    4354:	9f 93       	push	r25
    4356:	8f 93       	push	r24
    4358:	8a ef       	ldi	r24, 0xFA	; 250
    435a:	94 e0       	ldi	r25, 0x04	; 4
    435c:	9f 93       	push	r25
    435e:	8f 93       	push	r24
    4360:	86 e1       	ldi	r24, 0x16	; 22
    4362:	92 e1       	ldi	r25, 0x12	; 18
    4364:	9f 93       	push	r25
    4366:	8f 93       	push	r24
    4368:	0e 94 30 30 	call	0x6060	; 0x6060 <sprintf>
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	86 e1       	ldi	r24, 0x16	; 22
    4372:	92 e1       	ldi	r25, 0x12	; 18
    4374:	31 de       	rcall	.-926    	; 0x3fd8 <_uploadMessageRc>
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	08 95       	ret

00004384 <lora_driver_configureToEu868>:
    4384:	2f 92       	push	r2
    4386:	3f 92       	push	r3
    4388:	4f 92       	push	r4
    438a:	5f 92       	push	r5
    438c:	6f 92       	push	r6
    438e:	7f 92       	push	r7
    4390:	8f 92       	push	r8
    4392:	9f 92       	push	r9
    4394:	af 92       	push	r10
    4396:	bf 92       	push	r11
    4398:	cf 92       	push	r12
    439a:	df 92       	push	r13
    439c:	ef 92       	push	r14
    439e:	ff 92       	push	r15
    43a0:	0f 93       	push	r16
    43a2:	1f 93       	push	r17
    43a4:	cf 93       	push	r28
    43a6:	df 93       	push	r29
    43a8:	cd b7       	in	r28, 0x3d	; 61
    43aa:	de b7       	in	r29, 0x3e	; 62
    43ac:	a0 97       	sbiw	r28, 0x20	; 32
    43ae:	0f b6       	in	r0, 0x3f	; 63
    43b0:	f8 94       	cli
    43b2:	de bf       	out	0x3e, r29	; 62
    43b4:	0f be       	out	0x3f, r0	; 63
    43b6:	cd bf       	out	0x3d, r28	; 61
    43b8:	67 e2       	ldi	r22, 0x27	; 39
    43ba:	75 e0       	ldi	r23, 0x05	; 5
    43bc:	83 e3       	ldi	r24, 0x33	; 51
    43be:	95 e0       	ldi	r25, 0x05	; 5
    43c0:	3c dd       	rcall	.-1416   	; 0x3e3a <_uploadMessage>
    43c2:	95 dd       	rcall	.-1238   	; 0x3eee <_reply2ReturnCode>
    43c4:	81 11       	cpse	r24, r1
    43c6:	a3 c0       	rjmp	.+326    	; 0x450e <lora_driver_configureToEu868+0x18a>
    43c8:	80 e2       	ldi	r24, 0x20	; 32
    43ca:	e2 e2       	ldi	r30, 0x22	; 34
    43cc:	f2 e0       	ldi	r31, 0x02	; 2
    43ce:	de 01       	movw	r26, r28
    43d0:	11 96       	adiw	r26, 0x01	; 1
    43d2:	01 90       	ld	r0, Z+
    43d4:	0d 92       	st	X+, r0
    43d6:	8a 95       	dec	r24
    43d8:	e1 f7       	brne	.-8      	; 0x43d2 <lora_driver_configureToEu868+0x4e>
    43da:	9e 01       	movw	r18, r28
    43dc:	2f 5f       	subi	r18, 0xFF	; 255
    43de:	3f 4f       	sbci	r19, 0xFF	; 255
    43e0:	69 01       	movw	r12, r18
    43e2:	e1 2c       	mov	r14, r1
    43e4:	f1 2c       	mov	r15, r1
    43e6:	0f 2e       	mov	r0, r31
    43e8:	ff e3       	ldi	r31, 0x3F	; 63
    43ea:	af 2e       	mov	r10, r31
    43ec:	f5 e0       	ldi	r31, 0x05	; 5
    43ee:	bf 2e       	mov	r11, r31
    43f0:	f0 2d       	mov	r31, r0
    43f2:	06 e1       	ldi	r16, 0x16	; 22
    43f4:	12 e1       	ldi	r17, 0x12	; 18
    43f6:	0f 2e       	mov	r0, r31
    43f8:	f8 e5       	ldi	r31, 0x58	; 88
    43fa:	4f 2e       	mov	r4, r31
    43fc:	f5 e0       	ldi	r31, 0x05	; 5
    43fe:	5f 2e       	mov	r5, r31
    4400:	f0 2d       	mov	r31, r0
    4402:	0f 2e       	mov	r0, r31
    4404:	ff e6       	ldi	r31, 0x6F	; 111
    4406:	8f 2e       	mov	r8, r31
    4408:	f5 e0       	ldi	r31, 0x05	; 5
    440a:	9f 2e       	mov	r9, r31
    440c:	f0 2d       	mov	r31, r0
    440e:	0f 2e       	mov	r0, r31
    4410:	f9 e8       	ldi	r31, 0x89	; 137
    4412:	6f 2e       	mov	r6, r31
    4414:	f5 e0       	ldi	r31, 0x05	; 5
    4416:	7f 2e       	mov	r7, r31
    4418:	f0 2d       	mov	r31, r0
    441a:	3e 2c       	mov	r3, r14
    441c:	2f 2c       	mov	r2, r15
    441e:	ff 92       	push	r15
    4420:	ef 92       	push	r14
    4422:	bf 92       	push	r11
    4424:	af 92       	push	r10
    4426:	1f 93       	push	r17
    4428:	0f 93       	push	r16
    442a:	0e 94 30 30 	call	0x6060	; 0x6060 <sprintf>
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	70 e0       	ldi	r23, 0x00	; 0
    4432:	c8 01       	movw	r24, r16
    4434:	02 dd       	rcall	.-1532   	; 0x3e3a <_uploadMessage>
    4436:	5b dd       	rcall	.-1354   	; 0x3eee <_reply2ReturnCode>
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	0f 90       	pop	r0
    4444:	81 11       	cpse	r24, r1
    4446:	63 c0       	rjmp	.+198    	; 0x450e <lora_driver_configureToEu868+0x18a>
    4448:	32 e0       	ldi	r19, 0x02	; 2
    444a:	3e 15       	cp	r19, r14
    444c:	e8 f4       	brcc	.+58     	; 0x4488 <lora_driver_configureToEu868+0x104>
    444e:	f6 01       	movw	r30, r12
    4450:	83 81       	ldd	r24, Z+3	; 0x03
    4452:	8f 93       	push	r24
    4454:	82 81       	ldd	r24, Z+2	; 0x02
    4456:	8f 93       	push	r24
    4458:	81 81       	ldd	r24, Z+1	; 0x01
    445a:	8f 93       	push	r24
    445c:	80 81       	ld	r24, Z
    445e:	8f 93       	push	r24
    4460:	ff 92       	push	r15
    4462:	ef 92       	push	r14
    4464:	5f 92       	push	r5
    4466:	4f 92       	push	r4
    4468:	1f 93       	push	r17
    446a:	0f 93       	push	r16
    446c:	0e 94 30 30 	call	0x6060	; 0x6060 <sprintf>
    4470:	60 e0       	ldi	r22, 0x00	; 0
    4472:	70 e0       	ldi	r23, 0x00	; 0
    4474:	c8 01       	movw	r24, r16
    4476:	e1 dc       	rcall	.-1598   	; 0x3e3a <_uploadMessage>
    4478:	3a dd       	rcall	.-1420   	; 0x3eee <_reply2ReturnCode>
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	81 11       	cpse	r24, r1
    4486:	43 c0       	rjmp	.+134    	; 0x450e <lora_driver_configureToEu868+0x18a>
    4488:	2f 92       	push	r2
    448a:	3f 92       	push	r3
    448c:	9f 92       	push	r9
    448e:	8f 92       	push	r8
    4490:	1f 93       	push	r17
    4492:	0f 93       	push	r16
    4494:	0e 94 30 30 	call	0x6060	; 0x6060 <sprintf>
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	70 e0       	ldi	r23, 0x00	; 0
    449c:	c8 01       	movw	r24, r16
    449e:	cd dc       	rcall	.-1638   	; 0x3e3a <_uploadMessage>
    44a0:	26 dd       	rcall	.-1460   	; 0x3eee <_reply2ReturnCode>
    44a2:	0f 90       	pop	r0
    44a4:	0f 90       	pop	r0
    44a6:	0f 90       	pop	r0
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	81 11       	cpse	r24, r1
    44b0:	2e c0       	rjmp	.+92     	; 0x450e <lora_driver_configureToEu868+0x18a>
    44b2:	2f 92       	push	r2
    44b4:	3f 92       	push	r3
    44b6:	7f 92       	push	r7
    44b8:	6f 92       	push	r6
    44ba:	1f 93       	push	r17
    44bc:	0f 93       	push	r16
    44be:	0e 94 30 30 	call	0x6060	; 0x6060 <sprintf>
    44c2:	60 e0       	ldi	r22, 0x00	; 0
    44c4:	70 e0       	ldi	r23, 0x00	; 0
    44c6:	c8 01       	movw	r24, r16
    44c8:	b8 dc       	rcall	.-1680   	; 0x3e3a <_uploadMessage>
    44ca:	11 dd       	rcall	.-1502   	; 0x3eee <_reply2ReturnCode>
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
    44d2:	0f 90       	pop	r0
    44d4:	0f 90       	pop	r0
    44d6:	0f 90       	pop	r0
    44d8:	81 11       	cpse	r24, r1
    44da:	19 c0       	rjmp	.+50     	; 0x450e <lora_driver_configureToEu868+0x18a>
    44dc:	3f ef       	ldi	r19, 0xFF	; 255
    44de:	e3 1a       	sub	r14, r19
    44e0:	f3 0a       	sbc	r15, r19
    44e2:	84 e0       	ldi	r24, 0x04	; 4
    44e4:	c8 0e       	add	r12, r24
    44e6:	d1 1c       	adc	r13, r1
    44e8:	98 e0       	ldi	r25, 0x08	; 8
    44ea:	e9 16       	cp	r14, r25
    44ec:	f1 04       	cpc	r15, r1
    44ee:	09 f0       	breq	.+2      	; 0x44f2 <lora_driver_configureToEu868+0x16e>
    44f0:	94 cf       	rjmp	.-216    	; 0x441a <lora_driver_configureToEu868+0x96>
    44f2:	60 e0       	ldi	r22, 0x00	; 0
    44f4:	70 e0       	ldi	r23, 0x00	; 0
    44f6:	81 ea       	ldi	r24, 0xA1	; 161
    44f8:	95 e0       	ldi	r25, 0x05	; 5
    44fa:	9f dc       	rcall	.-1730   	; 0x3e3a <_uploadMessage>
    44fc:	f8 dc       	rcall	.-1552   	; 0x3eee <_reply2ReturnCode>
    44fe:	81 11       	cpse	r24, r1
    4500:	06 c0       	rjmp	.+12     	; 0x450e <lora_driver_configureToEu868+0x18a>
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	82 eb       	ldi	r24, 0xB2	; 178
    4508:	95 e0       	ldi	r25, 0x05	; 5
    450a:	97 dc       	rcall	.-1746   	; 0x3e3a <_uploadMessage>
    450c:	f0 dc       	rcall	.-1568   	; 0x3eee <_reply2ReturnCode>
    450e:	a0 96       	adiw	r28, 0x20	; 32
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	df 91       	pop	r29
    451c:	cf 91       	pop	r28
    451e:	1f 91       	pop	r17
    4520:	0f 91       	pop	r16
    4522:	ff 90       	pop	r15
    4524:	ef 90       	pop	r14
    4526:	df 90       	pop	r13
    4528:	cf 90       	pop	r12
    452a:	bf 90       	pop	r11
    452c:	af 90       	pop	r10
    452e:	9f 90       	pop	r9
    4530:	8f 90       	pop	r8
    4532:	7f 90       	pop	r7
    4534:	6f 90       	pop	r6
    4536:	5f 90       	pop	r5
    4538:	4f 90       	pop	r4
    453a:	3f 90       	pop	r3
    453c:	2f 90       	pop	r2
    453e:	08 95       	ret

00004540 <lora_driver_setOtaaIdentity>:
    4540:	ef 92       	push	r14
    4542:	ff 92       	push	r15
    4544:	0f 93       	push	r16
    4546:	1f 93       	push	r17
    4548:	cf 93       	push	r28
    454a:	df 93       	push	r29
    454c:	ec 01       	movw	r28, r24
    454e:	8b 01       	movw	r16, r22
    4550:	7a 01       	movw	r14, r20
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	f4 de       	rcall	.-536    	; 0x433e <lora_driver_setAdaptiveDataRate>
    4556:	81 11       	cpse	r24, r1
    4558:	0d c0       	rjmp	.+26     	; 0x4574 <lora_driver_setOtaaIdentity+0x34>
    455a:	ce 01       	movw	r24, r28
    455c:	d4 dd       	rcall	.-1112   	; 0x4106 <lora_driver_setApplicationIdentifier>
    455e:	81 11       	cpse	r24, r1
    4560:	09 c0       	rjmp	.+18     	; 0x4574 <lora_driver_setOtaaIdentity+0x34>
    4562:	c8 01       	movw	r24, r16
    4564:	e1 dd       	rcall	.-1086   	; 0x4128 <lora_driver_setApplicationKey>
    4566:	81 11       	cpse	r24, r1
    4568:	05 c0       	rjmp	.+10     	; 0x4574 <lora_driver_setOtaaIdentity+0x34>
    456a:	c7 01       	movw	r24, r14
    456c:	bb dd       	rcall	.-1162   	; 0x40e4 <lora_driver_setDeviceIdentifier>
    456e:	81 11       	cpse	r24, r1
    4570:	01 c0       	rjmp	.+2      	; 0x4574 <lora_driver_setOtaaIdentity+0x34>
    4572:	eb dd       	rcall	.-1066   	; 0x414a <lora_driver_saveMac>
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	1f 91       	pop	r17
    457a:	0f 91       	pop	r16
    457c:	ff 90       	pop	r15
    457e:	ef 90       	pop	r14
    4580:	08 95       	ret

00004582 <lora_driver_mapReturnCodeToText>:
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	fc 01       	movw	r30, r24
    4586:	ee 0f       	add	r30, r30
    4588:	ff 1f       	adc	r31, r31
    458a:	8e 0f       	add	r24, r30
    458c:	9f 1f       	adc	r25, r31
    458e:	fc 01       	movw	r30, r24
    4590:	e5 58       	subi	r30, 0x85	; 133
    4592:	f9 4f       	sbci	r31, 0xF9	; 249
    4594:	81 81       	ldd	r24, Z+1	; 0x01
    4596:	92 81       	ldd	r25, Z+2	; 0x02
    4598:	08 95       	ret

0000459a <decode_port_no>:
    459a:	dc 01       	movw	r26, r24
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	29 f1       	breq	.+74     	; 0x45ea <decode_port_no+0x50>
    45a0:	fb 01       	movw	r30, r22
    45a2:	20 81       	ld	r18, Z
    45a4:	fc 01       	movw	r30, r24
    45a6:	01 90       	ld	r0, Z+
    45a8:	00 20       	and	r0, r0
    45aa:	e9 f7       	brne	.-6      	; 0x45a6 <decode_port_no+0xc>
    45ac:	31 97       	sbiw	r30, 0x01	; 1
    45ae:	e8 1b       	sub	r30, r24
    45b0:	f9 0b       	sbc	r31, r25
    45b2:	82 2f       	mov	r24, r18
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	e8 17       	cp	r30, r24
    45b8:	f9 07       	cpc	r31, r25
    45ba:	c8 f0       	brcs	.+50     	; 0x45ee <decode_port_no+0x54>
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	08 c0       	rjmp	.+16     	; 0x45d0 <decode_port_no+0x36>
    45c0:	88 0f       	add	r24, r24
    45c2:	38 2f       	mov	r19, r24
    45c4:	33 0f       	add	r19, r19
    45c6:	33 0f       	add	r19, r19
    45c8:	83 0f       	add	r24, r19
    45ca:	80 53       	subi	r24, 0x30	; 48
    45cc:	89 0f       	add	r24, r25
    45ce:	2f 5f       	subi	r18, 0xFF	; 255
    45d0:	fd 01       	movw	r30, r26
    45d2:	e2 0f       	add	r30, r18
    45d4:	f1 1d       	adc	r31, r1
    45d6:	90 81       	ld	r25, Z
    45d8:	30 ed       	ldi	r19, 0xD0	; 208
    45da:	39 0f       	add	r19, r25
    45dc:	3a 30       	cpi	r19, 0x0A	; 10
    45de:	10 f4       	brcc	.+4      	; 0x45e4 <decode_port_no+0x4a>
    45e0:	91 11       	cpse	r25, r1
    45e2:	ee cf       	rjmp	.-36     	; 0x45c0 <decode_port_no+0x26>
    45e4:	fb 01       	movw	r30, r22
    45e6:	20 83       	st	Z, r18
    45e8:	08 95       	ret
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	08 95       	ret
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	08 95       	ret

000045f2 <decode_hexadecimal_string_bytes>:
    45f2:	0f 93       	push	r16
    45f4:	1f 93       	push	r17
    45f6:	cf 93       	push	r28
    45f8:	df 93       	push	r29
    45fa:	dc 01       	movw	r26, r24
    45fc:	ea 01       	movw	r28, r20
    45fe:	20 97       	sbiw	r28, 0x00	; 0
    4600:	e1 f1       	breq	.+120    	; 0x467a <decode_hexadecimal_string_bytes+0x88>
    4602:	fa 01       	movw	r30, r20
    4604:	01 90       	ld	r0, Z+
    4606:	00 20       	and	r0, r0
    4608:	e9 f7       	brne	.-6      	; 0x4604 <decode_hexadecimal_string_bytes+0x12>
    460a:	31 97       	sbiw	r30, 0x01	; 1
    460c:	e4 1b       	sub	r30, r20
    460e:	f5 0b       	sbc	r31, r21
    4610:	32 97       	sbiw	r30, 0x02	; 2
    4612:	10 f5       	brcc	.+68     	; 0x4658 <decode_hexadecimal_string_bytes+0x66>
    4614:	32 c0       	rjmp	.+100    	; 0x467a <decode_hexadecimal_string_bytes+0x88>
    4616:	8d 01       	movw	r16, r26
    4618:	04 0f       	add	r16, r20
    461a:	15 1f       	adc	r17, r21
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	ae 01       	movw	r20, r28
    4620:	42 0f       	add	r20, r18
    4622:	53 1f       	adc	r21, r19
    4624:	fa 01       	movw	r30, r20
    4626:	90 81       	ld	r25, Z
    4628:	91 34       	cpi	r25, 0x41	; 65
    462a:	28 f0       	brcs	.+10     	; 0x4636 <decode_hexadecimal_string_bytes+0x44>
    462c:	97 53       	subi	r25, 0x37	; 55
    462e:	59 2f       	mov	r21, r25
    4630:	52 95       	swap	r21
    4632:	50 7f       	andi	r21, 0xF0	; 240
    4634:	03 c0       	rjmp	.+6      	; 0x463c <decode_hexadecimal_string_bytes+0x4a>
    4636:	59 2f       	mov	r21, r25
    4638:	52 95       	swap	r21
    463a:	50 7f       	andi	r21, 0xF0	; 240
    463c:	2c 0f       	add	r18, r28
    463e:	3d 1f       	adc	r19, r29
    4640:	f9 01       	movw	r30, r18
    4642:	91 81       	ldd	r25, Z+1	; 0x01
    4644:	91 34       	cpi	r25, 0x41	; 65
    4646:	10 f0       	brcs	.+4      	; 0x464c <decode_hexadecimal_string_bytes+0x5a>
    4648:	97 53       	subi	r25, 0x37	; 55
    464a:	01 c0       	rjmp	.+2      	; 0x464e <decode_hexadecimal_string_bytes+0x5c>
    464c:	90 53       	subi	r25, 0x30	; 48
    464e:	95 0f       	add	r25, r21
    4650:	f8 01       	movw	r30, r16
    4652:	90 83       	st	Z, r25
    4654:	8f 5f       	subi	r24, 0xFF	; 255
    4656:	01 c0       	rjmp	.+2      	; 0x465a <decode_hexadecimal_string_bytes+0x68>
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	28 2f       	mov	r18, r24
    465c:	22 0f       	add	r18, r18
    465e:	48 2f       	mov	r20, r24
    4660:	50 e0       	ldi	r21, 0x00	; 0
    4662:	fe 01       	movw	r30, r28
    4664:	01 90       	ld	r0, Z+
    4666:	00 20       	and	r0, r0
    4668:	e9 f7       	brne	.-6      	; 0x4664 <decode_hexadecimal_string_bytes+0x72>
    466a:	31 97       	sbiw	r30, 0x01	; 1
    466c:	ec 1b       	sub	r30, r28
    466e:	fd 0b       	sbc	r31, r29
    4670:	4e 17       	cp	r20, r30
    4672:	5f 07       	cpc	r21, r31
    4674:	10 f4       	brcc	.+4      	; 0x467a <decode_hexadecimal_string_bytes+0x88>
    4676:	86 13       	cpse	r24, r22
    4678:	ce cf       	rjmp	.-100    	; 0x4616 <decode_hexadecimal_string_bytes+0x24>
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	08 95       	ret

00004684 <serial_create>:
    4684:	2f 92       	push	r2
    4686:	3f 92       	push	r3
    4688:	4f 92       	push	r4
    468a:	5f 92       	push	r5
    468c:	6f 92       	push	r6
    468e:	7f 92       	push	r7
    4690:	8f 92       	push	r8
    4692:	9f 92       	push	r9
    4694:	af 92       	push	r10
    4696:	cf 92       	push	r12
    4698:	ef 92       	push	r14
    469a:	ff 92       	push	r15
    469c:	0f 93       	push	r16
    469e:	1f 93       	push	r17
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
    46a4:	cd b7       	in	r28, 0x3d	; 61
    46a6:	de b7       	in	r29, 0x3e	; 62
    46a8:	f8 2e       	mov	r15, r24
    46aa:	2a 01       	movw	r4, r20
    46ac:	3b 01       	movw	r6, r22
    46ae:	88 e0       	ldi	r24, 0x08	; 8
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <malloc>
    46b6:	8c 01       	movw	r16, r24
    46b8:	8f 2d       	mov	r24, r15
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	fc 01       	movw	r30, r24
    46be:	ee 0f       	add	r30, r30
    46c0:	ff 1f       	adc	r31, r31
    46c2:	e0 59       	subi	r30, 0x90	; 144
    46c4:	fd 4e       	sbci	r31, 0xED	; 237
    46c6:	11 83       	std	Z+1, r17	; 0x01
    46c8:	00 83       	st	Z, r16
    46ca:	01 15       	cp	r16, r1
    46cc:	11 05       	cpc	r17, r1
    46ce:	09 f4       	brne	.+2      	; 0x46d2 <serial_create+0x4e>
    46d0:	6a c0       	rjmp	.+212    	; 0x47a6 <serial_create+0x122>
    46d2:	88 0f       	add	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	fc 01       	movw	r30, r24
    46d8:	e5 5f       	subi	r30, 0xF5	; 245
    46da:	fd 4f       	sbci	r31, 0xFD	; 253
    46dc:	80 81       	ld	r24, Z
    46de:	91 81       	ldd	r25, Z+1	; 0x01
    46e0:	d8 01       	movw	r26, r16
    46e2:	8d 93       	st	X+, r24
    46e4:	9c 93       	st	X, r25
    46e6:	8c 2d       	mov	r24, r12
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	88 0f       	add	r24, r24
    46ec:	99 1f       	adc	r25, r25
    46ee:	88 0f       	add	r24, r24
    46f0:	99 1f       	adc	r25, r25
    46f2:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <malloc>
    46f6:	1c 01       	movw	r2, r24
    46f8:	86 e0       	ldi	r24, 0x06	; 6
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <malloc>
    4700:	7c 01       	movw	r14, r24
    4702:	4c 2d       	mov	r20, r12
    4704:	b1 01       	movw	r22, r2
    4706:	3e d5       	rcall	.+2684   	; 0x5184 <fifo_init>
    4708:	f8 01       	movw	r30, r16
    470a:	f5 82       	std	Z+5, r15	; 0x05
    470c:	e4 82       	std	Z+4, r14	; 0x04
    470e:	8a 2d       	mov	r24, r10
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	88 0f       	add	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	88 0f       	add	r24, r24
    4718:	99 1f       	adc	r25, r25
    471a:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <malloc>
    471e:	1c 01       	movw	r2, r24
    4720:	86 e0       	ldi	r24, 0x06	; 6
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <malloc>
    4728:	7c 01       	movw	r14, r24
    472a:	4a 2d       	mov	r20, r10
    472c:	b1 01       	movw	r22, r2
    472e:	2a d5       	rcall	.+2644   	; 0x5184 <fifo_init>
    4730:	d8 01       	movw	r26, r16
    4732:	13 96       	adiw	r26, 0x03	; 3
    4734:	fc 92       	st	X, r15
    4736:	ee 92       	st	-X, r14
    4738:	12 97       	sbiw	r26, 0x02	; 2
    473a:	17 96       	adiw	r26, 0x07	; 7
    473c:	9c 92       	st	X, r9
    473e:	8e 92       	st	-X, r8
    4740:	16 97       	sbiw	r26, 0x06	; 6
    4742:	ff b6       	in	r15, 0x3f	; 63
    4744:	f8 94       	cli
    4746:	ed 91       	ld	r30, X+
    4748:	fc 91       	ld	r31, X
    474a:	11 97       	sbiw	r26, 0x01	; 1
    474c:	36 97       	sbiw	r30, 0x06	; 6
    474e:	80 81       	ld	r24, Z
    4750:	82 60       	ori	r24, 0x02	; 2
    4752:	80 83       	st	Z, r24
    4754:	8d 90       	ld	r8, X+
    4756:	9c 90       	ld	r9, X
    4758:	c3 01       	movw	r24, r6
    475a:	b2 01       	movw	r22, r4
    475c:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <__floatunsisf>
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	51 e4       	ldi	r21, 0x41	; 65
    4768:	ae d9       	rcall	.-3236   	; 0x3ac6 <__mulsf3>
    476a:	9b 01       	movw	r18, r22
    476c:	ac 01       	movw	r20, r24
    476e:	60 e0       	ldi	r22, 0x00	; 0
    4770:	74 e2       	ldi	r23, 0x24	; 36
    4772:	84 e7       	ldi	r24, 0x74	; 116
    4774:	9b e4       	ldi	r25, 0x4B	; 75
    4776:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__divsf3>
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	40 e8       	ldi	r20, 0x80	; 128
    4780:	5f e3       	ldi	r21, 0x3F	; 63
    4782:	04 da       	rcall	.-3064   	; 0x3b8c <__subsf3>
    4784:	18 d9       	rcall	.-3536   	; 0x39b6 <__fixunssfsi>
    4786:	f4 01       	movw	r30, r8
    4788:	32 97       	sbiw	r30, 0x02	; 2
    478a:	60 83       	st	Z, r22
    478c:	d8 01       	movw	r26, r16
    478e:	ed 91       	ld	r30, X+
    4790:	fc 91       	ld	r31, X
    4792:	11 97       	sbiw	r26, 0x01	; 1
    4794:	35 97       	sbiw	r30, 0x05	; 5
    4796:	88 e9       	ldi	r24, 0x98	; 152
    4798:	80 83       	st	Z, r24
    479a:	ed 91       	ld	r30, X+
    479c:	fc 91       	ld	r31, X
    479e:	34 97       	sbiw	r30, 0x04	; 4
    47a0:	86 e0       	ldi	r24, 0x06	; 6
    47a2:	80 83       	st	Z, r24
    47a4:	ff be       	out	0x3f, r15	; 63
    47a6:	c8 01       	movw	r24, r16
    47a8:	df 91       	pop	r29
    47aa:	cf 91       	pop	r28
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	cf 90       	pop	r12
    47b6:	af 90       	pop	r10
    47b8:	9f 90       	pop	r9
    47ba:	8f 90       	pop	r8
    47bc:	7f 90       	pop	r7
    47be:	6f 90       	pop	r6
    47c0:	5f 90       	pop	r5
    47c2:	4f 90       	pop	r4
    47c4:	3f 90       	pop	r3
    47c6:	2f 90       	pop	r2
    47c8:	08 95       	ret

000047ca <serial_sendByte>:
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	dc 01       	movw	r26, r24
    47d0:	89 2b       	or	r24, r25
    47d2:	01 f1       	breq	.+64     	; 0x4814 <serial_sendByte+0x4a>
    47d4:	12 96       	adiw	r26, 0x02	; 2
    47d6:	ed 91       	ld	r30, X+
    47d8:	fc 91       	ld	r31, X
    47da:	13 97       	sbiw	r26, 0x03	; 3
    47dc:	93 81       	ldd	r25, Z+3	; 0x03
    47de:	82 81       	ldd	r24, Z+2	; 0x02
    47e0:	25 81       	ldd	r18, Z+5	; 0x05
    47e2:	98 1b       	sub	r25, r24
    47e4:	92 23       	and	r25, r18
    47e6:	84 81       	ldd	r24, Z+4	; 0x04
    47e8:	98 17       	cp	r25, r24
    47ea:	b1 f0       	breq	.+44     	; 0x4818 <serial_sendByte+0x4e>
    47ec:	83 81       	ldd	r24, Z+3	; 0x03
    47ee:	26 95       	lsr	r18
    47f0:	28 23       	and	r18, r24
    47f2:	c0 81       	ld	r28, Z
    47f4:	d1 81       	ldd	r29, Z+1	; 0x01
    47f6:	c2 0f       	add	r28, r18
    47f8:	d1 1d       	adc	r29, r1
    47fa:	68 83       	st	Y, r22
    47fc:	8f 5f       	subi	r24, 0xFF	; 255
    47fe:	95 81       	ldd	r25, Z+5	; 0x05
    4800:	89 23       	and	r24, r25
    4802:	83 83       	std	Z+3, r24	; 0x03
    4804:	ed 91       	ld	r30, X+
    4806:	fc 91       	ld	r31, X
    4808:	35 97       	sbiw	r30, 0x05	; 5
    480a:	80 81       	ld	r24, Z
    480c:	80 62       	ori	r24, 0x20	; 32
    480e:	80 83       	st	Z, r24
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	03 c0       	rjmp	.+6      	; 0x481a <serial_sendByte+0x50>
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	01 c0       	rjmp	.+2      	; 0x481a <serial_sendByte+0x50>
    4818:	82 e0       	ldi	r24, 0x02	; 2
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	08 95       	ret

00004820 <serial_sendBytes>:
    4820:	ef 92       	push	r14
    4822:	ff 92       	push	r15
    4824:	0f 93       	push	r16
    4826:	1f 93       	push	r17
    4828:	cf 93       	push	r28
    482a:	df 93       	push	r29
    482c:	7c 01       	movw	r14, r24
    482e:	00 97       	sbiw	r24, 0x00	; 0
    4830:	09 f4       	brne	.+2      	; 0x4834 <serial_sendBytes+0x14>
    4832:	41 c0       	rjmp	.+130    	; 0x48b6 <serial_sendBytes+0x96>
    4834:	dc 01       	movw	r26, r24
    4836:	12 96       	adiw	r26, 0x02	; 2
    4838:	ed 91       	ld	r30, X+
    483a:	fc 91       	ld	r31, X
    483c:	13 97       	sbiw	r26, 0x03	; 3
    483e:	93 81       	ldd	r25, Z+3	; 0x03
    4840:	82 81       	ldd	r24, Z+2	; 0x02
    4842:	98 1b       	sub	r25, r24
    4844:	85 81       	ldd	r24, Z+5	; 0x05
    4846:	98 23       	and	r25, r24
    4848:	84 81       	ldd	r24, Z+4	; 0x04
    484a:	89 1b       	sub	r24, r25
    484c:	86 17       	cp	r24, r22
    484e:	a8 f1       	brcs	.+106    	; 0x48ba <serial_sendBytes+0x9a>
    4850:	66 23       	and	r22, r22
    4852:	41 f1       	breq	.+80     	; 0x48a4 <serial_sendBytes+0x84>
    4854:	84 2f       	mov	r24, r20
    4856:	95 2f       	mov	r25, r21
    4858:	dc 01       	movw	r26, r24
    485a:	61 50       	subi	r22, 0x01	; 1
    485c:	46 2f       	mov	r20, r22
    485e:	50 e0       	ldi	r21, 0x00	; 0
    4860:	4f 5f       	subi	r20, 0xFF	; 255
    4862:	5f 4f       	sbci	r21, 0xFF	; 255
    4864:	48 0f       	add	r20, r24
    4866:	59 1f       	adc	r21, r25
    4868:	e7 01       	movw	r28, r14
    486a:	ea 81       	ldd	r30, Y+2	; 0x02
    486c:	fb 81       	ldd	r31, Y+3	; 0x03
    486e:	93 81       	ldd	r25, Z+3	; 0x03
    4870:	82 81       	ldd	r24, Z+2	; 0x02
    4872:	25 81       	ldd	r18, Z+5	; 0x05
    4874:	98 1b       	sub	r25, r24
    4876:	92 23       	and	r25, r18
    4878:	84 81       	ldd	r24, Z+4	; 0x04
    487a:	98 17       	cp	r25, r24
    487c:	79 f0       	breq	.+30     	; 0x489c <serial_sendBytes+0x7c>
    487e:	8c 91       	ld	r24, X
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	26 95       	lsr	r18
    4884:	29 23       	and	r18, r25
    4886:	60 81       	ld	r22, Z
    4888:	71 81       	ldd	r23, Z+1	; 0x01
    488a:	8b 01       	movw	r16, r22
    488c:	02 0f       	add	r16, r18
    488e:	11 1d       	adc	r17, r1
    4890:	e8 01       	movw	r28, r16
    4892:	88 83       	st	Y, r24
    4894:	9f 5f       	subi	r25, 0xFF	; 255
    4896:	85 81       	ldd	r24, Z+5	; 0x05
    4898:	98 23       	and	r25, r24
    489a:	93 83       	std	Z+3, r25	; 0x03
    489c:	11 96       	adiw	r26, 0x01	; 1
    489e:	a4 17       	cp	r26, r20
    48a0:	b5 07       	cpc	r27, r21
    48a2:	11 f7       	brne	.-60     	; 0x4868 <serial_sendBytes+0x48>
    48a4:	d7 01       	movw	r26, r14
    48a6:	ed 91       	ld	r30, X+
    48a8:	fc 91       	ld	r31, X
    48aa:	35 97       	sbiw	r30, 0x05	; 5
    48ac:	80 81       	ld	r24, Z
    48ae:	80 62       	ori	r24, 0x20	; 32
    48b0:	80 83       	st	Z, r24
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	03 c0       	rjmp	.+6      	; 0x48bc <serial_sendBytes+0x9c>
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	01 c0       	rjmp	.+2      	; 0x48bc <serial_sendBytes+0x9c>
    48ba:	82 e0       	ldi	r24, 0x02	; 2
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	1f 91       	pop	r17
    48c2:	0f 91       	pop	r16
    48c4:	ff 90       	pop	r15
    48c6:	ef 90       	pop	r14
    48c8:	08 95       	ret

000048ca <serial_getByte>:
    48ca:	00 97       	sbiw	r24, 0x00	; 0
    48cc:	d1 f0       	breq	.+52     	; 0x4902 <serial_getByte+0x38>
    48ce:	dc 01       	movw	r26, r24
    48d0:	14 96       	adiw	r26, 0x04	; 4
    48d2:	ed 91       	ld	r30, X+
    48d4:	fc 91       	ld	r31, X
    48d6:	15 97       	sbiw	r26, 0x05	; 5
    48d8:	93 81       	ldd	r25, Z+3	; 0x03
    48da:	82 81       	ldd	r24, Z+2	; 0x02
    48dc:	98 17       	cp	r25, r24
    48de:	99 f0       	breq	.+38     	; 0x4906 <serial_getByte+0x3c>
    48e0:	92 81       	ldd	r25, Z+2	; 0x02
    48e2:	85 81       	ldd	r24, Z+5	; 0x05
    48e4:	86 95       	lsr	r24
    48e6:	89 23       	and	r24, r25
    48e8:	a0 81       	ld	r26, Z
    48ea:	b1 81       	ldd	r27, Z+1	; 0x01
    48ec:	a8 0f       	add	r26, r24
    48ee:	b1 1d       	adc	r27, r1
    48f0:	8c 91       	ld	r24, X
    48f2:	db 01       	movw	r26, r22
    48f4:	8c 93       	st	X, r24
    48f6:	9f 5f       	subi	r25, 0xFF	; 255
    48f8:	85 81       	ldd	r24, Z+5	; 0x05
    48fa:	98 23       	and	r25, r24
    48fc:	92 83       	std	Z+2, r25	; 0x02
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	08 95       	ret
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	08 95       	ret
    4906:	83 e0       	ldi	r24, 0x03	; 3
    4908:	08 95       	ret

0000490a <__vector_25>:
    490a:	1f 92       	push	r1
    490c:	0f 92       	push	r0
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	0f 92       	push	r0
    4912:	11 24       	eor	r1, r1
    4914:	0b b6       	in	r0, 0x3b	; 59
    4916:	0f 92       	push	r0
    4918:	2f 93       	push	r18
    491a:	3f 93       	push	r19
    491c:	4f 93       	push	r20
    491e:	5f 93       	push	r21
    4920:	6f 93       	push	r22
    4922:	7f 93       	push	r23
    4924:	8f 93       	push	r24
    4926:	9f 93       	push	r25
    4928:	af 93       	push	r26
    492a:	bf 93       	push	r27
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	ef 93       	push	r30
    4932:	ff 93       	push	r31
    4934:	a0 91 70 12 	lds	r26, 0x1270	; 0x801270 <_ser_handle>
    4938:	b0 91 71 12 	lds	r27, 0x1271	; 0x801271 <_ser_handle+0x1>
    493c:	10 97       	sbiw	r26, 0x00	; 0
    493e:	11 f1       	breq	.+68     	; 0x4984 <__vector_25+0x7a>
    4940:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4944:	14 96       	adiw	r26, 0x04	; 4
    4946:	ed 91       	ld	r30, X+
    4948:	fc 91       	ld	r31, X
    494a:	15 97       	sbiw	r26, 0x05	; 5
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	82 81       	ldd	r24, Z+2	; 0x02
    4950:	25 81       	ldd	r18, Z+5	; 0x05
    4952:	98 1b       	sub	r25, r24
    4954:	92 23       	and	r25, r18
    4956:	84 81       	ldd	r24, Z+4	; 0x04
    4958:	98 17       	cp	r25, r24
    495a:	61 f0       	breq	.+24     	; 0x4974 <__vector_25+0x6a>
    495c:	83 81       	ldd	r24, Z+3	; 0x03
    495e:	26 95       	lsr	r18
    4960:	28 23       	and	r18, r24
    4962:	c0 81       	ld	r28, Z
    4964:	d1 81       	ldd	r29, Z+1	; 0x01
    4966:	c2 0f       	add	r28, r18
    4968:	d1 1d       	adc	r29, r1
    496a:	68 83       	st	Y, r22
    496c:	8f 5f       	subi	r24, 0xFF	; 255
    496e:	95 81       	ldd	r25, Z+5	; 0x05
    4970:	89 23       	and	r24, r25
    4972:	83 83       	std	Z+3, r24	; 0x03
    4974:	16 96       	adiw	r26, 0x06	; 6
    4976:	ed 91       	ld	r30, X+
    4978:	fc 91       	ld	r31, X
    497a:	17 97       	sbiw	r26, 0x07	; 7
    497c:	30 97       	sbiw	r30, 0x00	; 0
    497e:	11 f0       	breq	.+4      	; 0x4984 <__vector_25+0x7a>
    4980:	cd 01       	movw	r24, r26
    4982:	19 95       	eicall
    4984:	ff 91       	pop	r31
    4986:	ef 91       	pop	r30
    4988:	df 91       	pop	r29
    498a:	cf 91       	pop	r28
    498c:	bf 91       	pop	r27
    498e:	af 91       	pop	r26
    4990:	9f 91       	pop	r25
    4992:	8f 91       	pop	r24
    4994:	7f 91       	pop	r23
    4996:	6f 91       	pop	r22
    4998:	5f 91       	pop	r21
    499a:	4f 91       	pop	r20
    499c:	3f 91       	pop	r19
    499e:	2f 91       	pop	r18
    49a0:	0f 90       	pop	r0
    49a2:	0b be       	out	0x3b, r0	; 59
    49a4:	0f 90       	pop	r0
    49a6:	0f be       	out	0x3f, r0	; 63
    49a8:	0f 90       	pop	r0
    49aa:	1f 90       	pop	r1
    49ac:	18 95       	reti

000049ae <__vector_26>:
    49ae:	1f 92       	push	r1
    49b0:	0f 92       	push	r0
    49b2:	0f b6       	in	r0, 0x3f	; 63
    49b4:	0f 92       	push	r0
    49b6:	11 24       	eor	r1, r1
    49b8:	0b b6       	in	r0, 0x3b	; 59
    49ba:	0f 92       	push	r0
    49bc:	2f 93       	push	r18
    49be:	8f 93       	push	r24
    49c0:	9f 93       	push	r25
    49c2:	af 93       	push	r26
    49c4:	bf 93       	push	r27
    49c6:	ef 93       	push	r30
    49c8:	ff 93       	push	r31
    49ca:	e0 91 70 12 	lds	r30, 0x1270	; 0x801270 <_ser_handle>
    49ce:	f0 91 71 12 	lds	r31, 0x1271	; 0x801271 <_ser_handle+0x1>
    49d2:	30 97       	sbiw	r30, 0x00	; 0
    49d4:	b9 f0       	breq	.+46     	; 0x4a04 <__vector_26+0x56>
    49d6:	02 80       	ldd	r0, Z+2	; 0x02
    49d8:	f3 81       	ldd	r31, Z+3	; 0x03
    49da:	e0 2d       	mov	r30, r0
    49dc:	93 81       	ldd	r25, Z+3	; 0x03
    49de:	82 81       	ldd	r24, Z+2	; 0x02
    49e0:	98 17       	cp	r25, r24
    49e2:	b1 f0       	breq	.+44     	; 0x4a10 <__vector_26+0x62>
    49e4:	92 81       	ldd	r25, Z+2	; 0x02
    49e6:	85 81       	ldd	r24, Z+5	; 0x05
    49e8:	28 2f       	mov	r18, r24
    49ea:	26 95       	lsr	r18
    49ec:	29 23       	and	r18, r25
    49ee:	a0 81       	ld	r26, Z
    49f0:	b1 81       	ldd	r27, Z+1	; 0x01
    49f2:	a2 0f       	add	r26, r18
    49f4:	b1 1d       	adc	r27, r1
    49f6:	2c 91       	ld	r18, X
    49f8:	9f 5f       	subi	r25, 0xFF	; 255
    49fa:	89 23       	and	r24, r25
    49fc:	82 83       	std	Z+2, r24	; 0x02
    49fe:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4a02:	0b c0       	rjmp	.+22     	; 0x4a1a <__vector_26+0x6c>
    4a04:	e1 ec       	ldi	r30, 0xC1	; 193
    4a06:	f0 e0       	ldi	r31, 0x00	; 0
    4a08:	80 81       	ld	r24, Z
    4a0a:	8f 7d       	andi	r24, 0xDF	; 223
    4a0c:	80 83       	st	Z, r24
    4a0e:	05 c0       	rjmp	.+10     	; 0x4a1a <__vector_26+0x6c>
    4a10:	e1 ec       	ldi	r30, 0xC1	; 193
    4a12:	f0 e0       	ldi	r31, 0x00	; 0
    4a14:	80 81       	ld	r24, Z
    4a16:	8f 7d       	andi	r24, 0xDF	; 223
    4a18:	80 83       	st	Z, r24
    4a1a:	ff 91       	pop	r31
    4a1c:	ef 91       	pop	r30
    4a1e:	bf 91       	pop	r27
    4a20:	af 91       	pop	r26
    4a22:	9f 91       	pop	r25
    4a24:	8f 91       	pop	r24
    4a26:	2f 91       	pop	r18
    4a28:	0f 90       	pop	r0
    4a2a:	0b be       	out	0x3b, r0	; 59
    4a2c:	0f 90       	pop	r0
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	0f 90       	pop	r0
    4a32:	1f 90       	pop	r1
    4a34:	18 95       	reti

00004a36 <__vector_36>:
    4a36:	1f 92       	push	r1
    4a38:	0f 92       	push	r0
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	0f 92       	push	r0
    4a3e:	11 24       	eor	r1, r1
    4a40:	0b b6       	in	r0, 0x3b	; 59
    4a42:	0f 92       	push	r0
    4a44:	2f 93       	push	r18
    4a46:	3f 93       	push	r19
    4a48:	4f 93       	push	r20
    4a4a:	5f 93       	push	r21
    4a4c:	6f 93       	push	r22
    4a4e:	7f 93       	push	r23
    4a50:	8f 93       	push	r24
    4a52:	9f 93       	push	r25
    4a54:	af 93       	push	r26
    4a56:	bf 93       	push	r27
    4a58:	cf 93       	push	r28
    4a5a:	df 93       	push	r29
    4a5c:	ef 93       	push	r30
    4a5e:	ff 93       	push	r31
    4a60:	a0 91 72 12 	lds	r26, 0x1272	; 0x801272 <_ser_handle+0x2>
    4a64:	b0 91 73 12 	lds	r27, 0x1273	; 0x801273 <_ser_handle+0x3>
    4a68:	10 97       	sbiw	r26, 0x00	; 0
    4a6a:	11 f1       	breq	.+68     	; 0x4ab0 <__vector_36+0x7a>
    4a6c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a70:	14 96       	adiw	r26, 0x04	; 4
    4a72:	ed 91       	ld	r30, X+
    4a74:	fc 91       	ld	r31, X
    4a76:	15 97       	sbiw	r26, 0x05	; 5
    4a78:	93 81       	ldd	r25, Z+3	; 0x03
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	25 81       	ldd	r18, Z+5	; 0x05
    4a7e:	98 1b       	sub	r25, r24
    4a80:	92 23       	and	r25, r18
    4a82:	84 81       	ldd	r24, Z+4	; 0x04
    4a84:	98 17       	cp	r25, r24
    4a86:	61 f0       	breq	.+24     	; 0x4aa0 <__vector_36+0x6a>
    4a88:	83 81       	ldd	r24, Z+3	; 0x03
    4a8a:	26 95       	lsr	r18
    4a8c:	28 23       	and	r18, r24
    4a8e:	c0 81       	ld	r28, Z
    4a90:	d1 81       	ldd	r29, Z+1	; 0x01
    4a92:	c2 0f       	add	r28, r18
    4a94:	d1 1d       	adc	r29, r1
    4a96:	68 83       	st	Y, r22
    4a98:	8f 5f       	subi	r24, 0xFF	; 255
    4a9a:	95 81       	ldd	r25, Z+5	; 0x05
    4a9c:	89 23       	and	r24, r25
    4a9e:	83 83       	std	Z+3, r24	; 0x03
    4aa0:	16 96       	adiw	r26, 0x06	; 6
    4aa2:	ed 91       	ld	r30, X+
    4aa4:	fc 91       	ld	r31, X
    4aa6:	17 97       	sbiw	r26, 0x07	; 7
    4aa8:	30 97       	sbiw	r30, 0x00	; 0
    4aaa:	11 f0       	breq	.+4      	; 0x4ab0 <__vector_36+0x7a>
    4aac:	cd 01       	movw	r24, r26
    4aae:	19 95       	eicall
    4ab0:	ff 91       	pop	r31
    4ab2:	ef 91       	pop	r30
    4ab4:	df 91       	pop	r29
    4ab6:	cf 91       	pop	r28
    4ab8:	bf 91       	pop	r27
    4aba:	af 91       	pop	r26
    4abc:	9f 91       	pop	r25
    4abe:	8f 91       	pop	r24
    4ac0:	7f 91       	pop	r23
    4ac2:	6f 91       	pop	r22
    4ac4:	5f 91       	pop	r21
    4ac6:	4f 91       	pop	r20
    4ac8:	3f 91       	pop	r19
    4aca:	2f 91       	pop	r18
    4acc:	0f 90       	pop	r0
    4ace:	0b be       	out	0x3b, r0	; 59
    4ad0:	0f 90       	pop	r0
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	0f 90       	pop	r0
    4ad6:	1f 90       	pop	r1
    4ad8:	18 95       	reti

00004ada <__vector_37>:
    4ada:	1f 92       	push	r1
    4adc:	0f 92       	push	r0
    4ade:	0f b6       	in	r0, 0x3f	; 63
    4ae0:	0f 92       	push	r0
    4ae2:	11 24       	eor	r1, r1
    4ae4:	0b b6       	in	r0, 0x3b	; 59
    4ae6:	0f 92       	push	r0
    4ae8:	2f 93       	push	r18
    4aea:	8f 93       	push	r24
    4aec:	9f 93       	push	r25
    4aee:	af 93       	push	r26
    4af0:	bf 93       	push	r27
    4af2:	ef 93       	push	r30
    4af4:	ff 93       	push	r31
    4af6:	e0 91 72 12 	lds	r30, 0x1272	; 0x801272 <_ser_handle+0x2>
    4afa:	f0 91 73 12 	lds	r31, 0x1273	; 0x801273 <_ser_handle+0x3>
    4afe:	30 97       	sbiw	r30, 0x00	; 0
    4b00:	b9 f0       	breq	.+46     	; 0x4b30 <__vector_37+0x56>
    4b02:	02 80       	ldd	r0, Z+2	; 0x02
    4b04:	f3 81       	ldd	r31, Z+3	; 0x03
    4b06:	e0 2d       	mov	r30, r0
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	98 17       	cp	r25, r24
    4b0e:	b1 f0       	breq	.+44     	; 0x4b3c <__vector_37+0x62>
    4b10:	92 81       	ldd	r25, Z+2	; 0x02
    4b12:	85 81       	ldd	r24, Z+5	; 0x05
    4b14:	28 2f       	mov	r18, r24
    4b16:	26 95       	lsr	r18
    4b18:	29 23       	and	r18, r25
    4b1a:	a0 81       	ld	r26, Z
    4b1c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b1e:	a2 0f       	add	r26, r18
    4b20:	b1 1d       	adc	r27, r1
    4b22:	2c 91       	ld	r18, X
    4b24:	9f 5f       	subi	r25, 0xFF	; 255
    4b26:	89 23       	and	r24, r25
    4b28:	82 83       	std	Z+2, r24	; 0x02
    4b2a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b2e:	0b c0       	rjmp	.+22     	; 0x4b46 <__vector_37+0x6c>
    4b30:	e9 ec       	ldi	r30, 0xC9	; 201
    4b32:	f0 e0       	ldi	r31, 0x00	; 0
    4b34:	80 81       	ld	r24, Z
    4b36:	8f 7d       	andi	r24, 0xDF	; 223
    4b38:	80 83       	st	Z, r24
    4b3a:	05 c0       	rjmp	.+10     	; 0x4b46 <__vector_37+0x6c>
    4b3c:	e9 ec       	ldi	r30, 0xC9	; 201
    4b3e:	f0 e0       	ldi	r31, 0x00	; 0
    4b40:	80 81       	ld	r24, Z
    4b42:	8f 7d       	andi	r24, 0xDF	; 223
    4b44:	80 83       	st	Z, r24
    4b46:	ff 91       	pop	r31
    4b48:	ef 91       	pop	r30
    4b4a:	bf 91       	pop	r27
    4b4c:	af 91       	pop	r26
    4b4e:	9f 91       	pop	r25
    4b50:	8f 91       	pop	r24
    4b52:	2f 91       	pop	r18
    4b54:	0f 90       	pop	r0
    4b56:	0b be       	out	0x3b, r0	; 59
    4b58:	0f 90       	pop	r0
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	0f 90       	pop	r0
    4b5e:	1f 90       	pop	r1
    4b60:	18 95       	reti

00004b62 <__vector_51>:
    4b62:	1f 92       	push	r1
    4b64:	0f 92       	push	r0
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	0f 92       	push	r0
    4b6a:	11 24       	eor	r1, r1
    4b6c:	0b b6       	in	r0, 0x3b	; 59
    4b6e:	0f 92       	push	r0
    4b70:	2f 93       	push	r18
    4b72:	3f 93       	push	r19
    4b74:	4f 93       	push	r20
    4b76:	5f 93       	push	r21
    4b78:	6f 93       	push	r22
    4b7a:	7f 93       	push	r23
    4b7c:	8f 93       	push	r24
    4b7e:	9f 93       	push	r25
    4b80:	af 93       	push	r26
    4b82:	bf 93       	push	r27
    4b84:	cf 93       	push	r28
    4b86:	df 93       	push	r29
    4b88:	ef 93       	push	r30
    4b8a:	ff 93       	push	r31
    4b8c:	a0 91 74 12 	lds	r26, 0x1274	; 0x801274 <_ser_handle+0x4>
    4b90:	b0 91 75 12 	lds	r27, 0x1275	; 0x801275 <_ser_handle+0x5>
    4b94:	10 97       	sbiw	r26, 0x00	; 0
    4b96:	11 f1       	breq	.+68     	; 0x4bdc <__vector_51+0x7a>
    4b98:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b9c:	14 96       	adiw	r26, 0x04	; 4
    4b9e:	ed 91       	ld	r30, X+
    4ba0:	fc 91       	ld	r31, X
    4ba2:	15 97       	sbiw	r26, 0x05	; 5
    4ba4:	93 81       	ldd	r25, Z+3	; 0x03
    4ba6:	82 81       	ldd	r24, Z+2	; 0x02
    4ba8:	25 81       	ldd	r18, Z+5	; 0x05
    4baa:	98 1b       	sub	r25, r24
    4bac:	92 23       	and	r25, r18
    4bae:	84 81       	ldd	r24, Z+4	; 0x04
    4bb0:	98 17       	cp	r25, r24
    4bb2:	61 f0       	breq	.+24     	; 0x4bcc <__vector_51+0x6a>
    4bb4:	83 81       	ldd	r24, Z+3	; 0x03
    4bb6:	26 95       	lsr	r18
    4bb8:	28 23       	and	r18, r24
    4bba:	c0 81       	ld	r28, Z
    4bbc:	d1 81       	ldd	r29, Z+1	; 0x01
    4bbe:	c2 0f       	add	r28, r18
    4bc0:	d1 1d       	adc	r29, r1
    4bc2:	68 83       	st	Y, r22
    4bc4:	8f 5f       	subi	r24, 0xFF	; 255
    4bc6:	95 81       	ldd	r25, Z+5	; 0x05
    4bc8:	89 23       	and	r24, r25
    4bca:	83 83       	std	Z+3, r24	; 0x03
    4bcc:	16 96       	adiw	r26, 0x06	; 6
    4bce:	ed 91       	ld	r30, X+
    4bd0:	fc 91       	ld	r31, X
    4bd2:	17 97       	sbiw	r26, 0x07	; 7
    4bd4:	30 97       	sbiw	r30, 0x00	; 0
    4bd6:	11 f0       	breq	.+4      	; 0x4bdc <__vector_51+0x7a>
    4bd8:	cd 01       	movw	r24, r26
    4bda:	19 95       	eicall
    4bdc:	ff 91       	pop	r31
    4bde:	ef 91       	pop	r30
    4be0:	df 91       	pop	r29
    4be2:	cf 91       	pop	r28
    4be4:	bf 91       	pop	r27
    4be6:	af 91       	pop	r26
    4be8:	9f 91       	pop	r25
    4bea:	8f 91       	pop	r24
    4bec:	7f 91       	pop	r23
    4bee:	6f 91       	pop	r22
    4bf0:	5f 91       	pop	r21
    4bf2:	4f 91       	pop	r20
    4bf4:	3f 91       	pop	r19
    4bf6:	2f 91       	pop	r18
    4bf8:	0f 90       	pop	r0
    4bfa:	0b be       	out	0x3b, r0	; 59
    4bfc:	0f 90       	pop	r0
    4bfe:	0f be       	out	0x3f, r0	; 63
    4c00:	0f 90       	pop	r0
    4c02:	1f 90       	pop	r1
    4c04:	18 95       	reti

00004c06 <__vector_52>:
    4c06:	1f 92       	push	r1
    4c08:	0f 92       	push	r0
    4c0a:	0f b6       	in	r0, 0x3f	; 63
    4c0c:	0f 92       	push	r0
    4c0e:	11 24       	eor	r1, r1
    4c10:	0b b6       	in	r0, 0x3b	; 59
    4c12:	0f 92       	push	r0
    4c14:	2f 93       	push	r18
    4c16:	8f 93       	push	r24
    4c18:	9f 93       	push	r25
    4c1a:	af 93       	push	r26
    4c1c:	bf 93       	push	r27
    4c1e:	ef 93       	push	r30
    4c20:	ff 93       	push	r31
    4c22:	e0 91 74 12 	lds	r30, 0x1274	; 0x801274 <_ser_handle+0x4>
    4c26:	f0 91 75 12 	lds	r31, 0x1275	; 0x801275 <_ser_handle+0x5>
    4c2a:	30 97       	sbiw	r30, 0x00	; 0
    4c2c:	b9 f0       	breq	.+46     	; 0x4c5c <__vector_52+0x56>
    4c2e:	02 80       	ldd	r0, Z+2	; 0x02
    4c30:	f3 81       	ldd	r31, Z+3	; 0x03
    4c32:	e0 2d       	mov	r30, r0
    4c34:	93 81       	ldd	r25, Z+3	; 0x03
    4c36:	82 81       	ldd	r24, Z+2	; 0x02
    4c38:	98 17       	cp	r25, r24
    4c3a:	b1 f0       	breq	.+44     	; 0x4c68 <__vector_52+0x62>
    4c3c:	92 81       	ldd	r25, Z+2	; 0x02
    4c3e:	85 81       	ldd	r24, Z+5	; 0x05
    4c40:	28 2f       	mov	r18, r24
    4c42:	26 95       	lsr	r18
    4c44:	29 23       	and	r18, r25
    4c46:	a0 81       	ld	r26, Z
    4c48:	b1 81       	ldd	r27, Z+1	; 0x01
    4c4a:	a2 0f       	add	r26, r18
    4c4c:	b1 1d       	adc	r27, r1
    4c4e:	2c 91       	ld	r18, X
    4c50:	9f 5f       	subi	r25, 0xFF	; 255
    4c52:	89 23       	and	r24, r25
    4c54:	82 83       	std	Z+2, r24	; 0x02
    4c56:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4c5a:	0b c0       	rjmp	.+22     	; 0x4c72 <__vector_52+0x6c>
    4c5c:	e1 ed       	ldi	r30, 0xD1	; 209
    4c5e:	f0 e0       	ldi	r31, 0x00	; 0
    4c60:	80 81       	ld	r24, Z
    4c62:	8f 7d       	andi	r24, 0xDF	; 223
    4c64:	80 83       	st	Z, r24
    4c66:	05 c0       	rjmp	.+10     	; 0x4c72 <__vector_52+0x6c>
    4c68:	e1 ed       	ldi	r30, 0xD1	; 209
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	80 81       	ld	r24, Z
    4c6e:	8f 7d       	andi	r24, 0xDF	; 223
    4c70:	80 83       	st	Z, r24
    4c72:	ff 91       	pop	r31
    4c74:	ef 91       	pop	r30
    4c76:	bf 91       	pop	r27
    4c78:	af 91       	pop	r26
    4c7a:	9f 91       	pop	r25
    4c7c:	8f 91       	pop	r24
    4c7e:	2f 91       	pop	r18
    4c80:	0f 90       	pop	r0
    4c82:	0b be       	out	0x3b, r0	; 59
    4c84:	0f 90       	pop	r0
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	0f 90       	pop	r0
    4c8a:	1f 90       	pop	r1
    4c8c:	18 95       	reti

00004c8e <__vector_54>:
    4c8e:	1f 92       	push	r1
    4c90:	0f 92       	push	r0
    4c92:	0f b6       	in	r0, 0x3f	; 63
    4c94:	0f 92       	push	r0
    4c96:	11 24       	eor	r1, r1
    4c98:	0b b6       	in	r0, 0x3b	; 59
    4c9a:	0f 92       	push	r0
    4c9c:	2f 93       	push	r18
    4c9e:	3f 93       	push	r19
    4ca0:	4f 93       	push	r20
    4ca2:	5f 93       	push	r21
    4ca4:	6f 93       	push	r22
    4ca6:	7f 93       	push	r23
    4ca8:	8f 93       	push	r24
    4caa:	9f 93       	push	r25
    4cac:	af 93       	push	r26
    4cae:	bf 93       	push	r27
    4cb0:	cf 93       	push	r28
    4cb2:	df 93       	push	r29
    4cb4:	ef 93       	push	r30
    4cb6:	ff 93       	push	r31
    4cb8:	a0 91 76 12 	lds	r26, 0x1276	; 0x801276 <_ser_handle+0x6>
    4cbc:	b0 91 77 12 	lds	r27, 0x1277	; 0x801277 <_ser_handle+0x7>
    4cc0:	10 97       	sbiw	r26, 0x00	; 0
    4cc2:	11 f1       	breq	.+68     	; 0x4d08 <__vector_54+0x7a>
    4cc4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4cc8:	14 96       	adiw	r26, 0x04	; 4
    4cca:	ed 91       	ld	r30, X+
    4ccc:	fc 91       	ld	r31, X
    4cce:	15 97       	sbiw	r26, 0x05	; 5
    4cd0:	93 81       	ldd	r25, Z+3	; 0x03
    4cd2:	82 81       	ldd	r24, Z+2	; 0x02
    4cd4:	25 81       	ldd	r18, Z+5	; 0x05
    4cd6:	98 1b       	sub	r25, r24
    4cd8:	92 23       	and	r25, r18
    4cda:	84 81       	ldd	r24, Z+4	; 0x04
    4cdc:	98 17       	cp	r25, r24
    4cde:	61 f0       	breq	.+24     	; 0x4cf8 <__vector_54+0x6a>
    4ce0:	83 81       	ldd	r24, Z+3	; 0x03
    4ce2:	26 95       	lsr	r18
    4ce4:	28 23       	and	r18, r24
    4ce6:	c0 81       	ld	r28, Z
    4ce8:	d1 81       	ldd	r29, Z+1	; 0x01
    4cea:	c2 0f       	add	r28, r18
    4cec:	d1 1d       	adc	r29, r1
    4cee:	68 83       	st	Y, r22
    4cf0:	8f 5f       	subi	r24, 0xFF	; 255
    4cf2:	95 81       	ldd	r25, Z+5	; 0x05
    4cf4:	89 23       	and	r24, r25
    4cf6:	83 83       	std	Z+3, r24	; 0x03
    4cf8:	16 96       	adiw	r26, 0x06	; 6
    4cfa:	ed 91       	ld	r30, X+
    4cfc:	fc 91       	ld	r31, X
    4cfe:	17 97       	sbiw	r26, 0x07	; 7
    4d00:	30 97       	sbiw	r30, 0x00	; 0
    4d02:	11 f0       	breq	.+4      	; 0x4d08 <__vector_54+0x7a>
    4d04:	cd 01       	movw	r24, r26
    4d06:	19 95       	eicall
    4d08:	ff 91       	pop	r31
    4d0a:	ef 91       	pop	r30
    4d0c:	df 91       	pop	r29
    4d0e:	cf 91       	pop	r28
    4d10:	bf 91       	pop	r27
    4d12:	af 91       	pop	r26
    4d14:	9f 91       	pop	r25
    4d16:	8f 91       	pop	r24
    4d18:	7f 91       	pop	r23
    4d1a:	6f 91       	pop	r22
    4d1c:	5f 91       	pop	r21
    4d1e:	4f 91       	pop	r20
    4d20:	3f 91       	pop	r19
    4d22:	2f 91       	pop	r18
    4d24:	0f 90       	pop	r0
    4d26:	0b be       	out	0x3b, r0	; 59
    4d28:	0f 90       	pop	r0
    4d2a:	0f be       	out	0x3f, r0	; 63
    4d2c:	0f 90       	pop	r0
    4d2e:	1f 90       	pop	r1
    4d30:	18 95       	reti

00004d32 <__vector_55>:
    4d32:	1f 92       	push	r1
    4d34:	0f 92       	push	r0
    4d36:	0f b6       	in	r0, 0x3f	; 63
    4d38:	0f 92       	push	r0
    4d3a:	11 24       	eor	r1, r1
    4d3c:	0b b6       	in	r0, 0x3b	; 59
    4d3e:	0f 92       	push	r0
    4d40:	2f 93       	push	r18
    4d42:	8f 93       	push	r24
    4d44:	9f 93       	push	r25
    4d46:	af 93       	push	r26
    4d48:	bf 93       	push	r27
    4d4a:	ef 93       	push	r30
    4d4c:	ff 93       	push	r31
    4d4e:	e0 91 76 12 	lds	r30, 0x1276	; 0x801276 <_ser_handle+0x6>
    4d52:	f0 91 77 12 	lds	r31, 0x1277	; 0x801277 <_ser_handle+0x7>
    4d56:	30 97       	sbiw	r30, 0x00	; 0
    4d58:	b9 f0       	breq	.+46     	; 0x4d88 <__vector_55+0x56>
    4d5a:	02 80       	ldd	r0, Z+2	; 0x02
    4d5c:	f3 81       	ldd	r31, Z+3	; 0x03
    4d5e:	e0 2d       	mov	r30, r0
    4d60:	93 81       	ldd	r25, Z+3	; 0x03
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	98 17       	cp	r25, r24
    4d66:	b1 f0       	breq	.+44     	; 0x4d94 <__vector_55+0x62>
    4d68:	92 81       	ldd	r25, Z+2	; 0x02
    4d6a:	85 81       	ldd	r24, Z+5	; 0x05
    4d6c:	28 2f       	mov	r18, r24
    4d6e:	26 95       	lsr	r18
    4d70:	29 23       	and	r18, r25
    4d72:	a0 81       	ld	r26, Z
    4d74:	b1 81       	ldd	r27, Z+1	; 0x01
    4d76:	a2 0f       	add	r26, r18
    4d78:	b1 1d       	adc	r27, r1
    4d7a:	2c 91       	ld	r18, X
    4d7c:	9f 5f       	subi	r25, 0xFF	; 255
    4d7e:	89 23       	and	r24, r25
    4d80:	82 83       	std	Z+2, r24	; 0x02
    4d82:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4d86:	0b c0       	rjmp	.+22     	; 0x4d9e <__vector_55+0x6c>
    4d88:	e1 e3       	ldi	r30, 0x31	; 49
    4d8a:	f1 e0       	ldi	r31, 0x01	; 1
    4d8c:	80 81       	ld	r24, Z
    4d8e:	8f 7d       	andi	r24, 0xDF	; 223
    4d90:	80 83       	st	Z, r24
    4d92:	05 c0       	rjmp	.+10     	; 0x4d9e <__vector_55+0x6c>
    4d94:	e1 e3       	ldi	r30, 0x31	; 49
    4d96:	f1 e0       	ldi	r31, 0x01	; 1
    4d98:	80 81       	ld	r24, Z
    4d9a:	8f 7d       	andi	r24, 0xDF	; 223
    4d9c:	80 83       	st	Z, r24
    4d9e:	ff 91       	pop	r31
    4da0:	ef 91       	pop	r30
    4da2:	bf 91       	pop	r27
    4da4:	af 91       	pop	r26
    4da6:	9f 91       	pop	r25
    4da8:	8f 91       	pop	r24
    4daa:	2f 91       	pop	r18
    4dac:	0f 90       	pop	r0
    4dae:	0b be       	out	0x3b, r0	; 59
    4db0:	0f 90       	pop	r0
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	0f 90       	pop	r0
    4db6:	1f 90       	pop	r1
    4db8:	18 95       	reti

00004dba <usart_getchar>:
    4dba:	cf 93       	push	r28
    4dbc:	df 93       	push	r29
    4dbe:	1f 92       	push	r1
    4dc0:	cd b7       	in	r28, 0x3d	; 61
    4dc2:	de b7       	in	r29, 0x3e	; 62
    4dc4:	be 01       	movw	r22, r28
    4dc6:	6f 5f       	subi	r22, 0xFF	; 255
    4dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dca:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <_com_serial_instance>
    4dce:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <_com_serial_instance+0x1>
    4dd2:	7b dd       	rcall	.-1290   	; 0x48ca <serial_getByte>
    4dd4:	81 11       	cpse	r24, r1
    4dd6:	f6 cf       	rjmp	.-20     	; 0x4dc4 <usart_getchar+0xa>
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0f 90       	pop	r0
    4dde:	df 91       	pop	r29
    4de0:	cf 91       	pop	r28
    4de2:	08 95       	ret

00004de4 <usart_putchar>:
    4de4:	68 2f       	mov	r22, r24
    4de6:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <_com_serial_instance>
    4dea:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <_com_serial_instance+0x1>
    4dee:	ed dc       	rcall	.-1574   	; 0x47ca <serial_sendByte>
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	08 95       	ret

00004df6 <stdio_initialise>:
    4df6:	8f 92       	push	r8
    4df8:	9f 92       	push	r9
    4dfa:	af 92       	push	r10
    4dfc:	cf 92       	push	r12
    4dfe:	ef 92       	push	r14
    4e00:	0f 93       	push	r16
    4e02:	81 2c       	mov	r8, r1
    4e04:	91 2c       	mov	r9, r1
    4e06:	68 94       	set
    4e08:	aa 24       	eor	r10, r10
    4e0a:	a7 f8       	bld	r10, 7
    4e0c:	68 94       	set
    4e0e:	cc 24       	eor	r12, r12
    4e10:	c7 f8       	bld	r12, 7
    4e12:	e1 2c       	mov	r14, r1
    4e14:	00 e0       	ldi	r16, 0x00	; 0
    4e16:	23 e0       	ldi	r18, 0x03	; 3
    4e18:	40 e0       	ldi	r20, 0x00	; 0
    4e1a:	51 ee       	ldi	r21, 0xE1	; 225
    4e1c:	60 e0       	ldi	r22, 0x00	; 0
    4e1e:	70 e0       	ldi	r23, 0x00	; 0
    4e20:	31 dc       	rcall	.-1950   	; 0x4684 <serial_create>
    4e22:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <_com_serial_instance+0x1>
    4e26:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <_com_serial_instance>
    4e2a:	e9 e9       	ldi	r30, 0x99	; 153
    4e2c:	f2 e1       	ldi	r31, 0x12	; 18
    4e2e:	83 e1       	ldi	r24, 0x13	; 19
    4e30:	92 e0       	ldi	r25, 0x02	; 2
    4e32:	91 83       	std	Z+1, r25	; 0x01
    4e34:	80 83       	st	Z, r24
    4e36:	93 83       	std	Z+3, r25	; 0x03
    4e38:	82 83       	std	Z+2, r24	; 0x02
    4e3a:	0f 91       	pop	r16
    4e3c:	ef 90       	pop	r14
    4e3e:	cf 90       	pop	r12
    4e40:	af 90       	pop	r10
    4e42:	9f 90       	pop	r9
    4e44:	8f 90       	pop	r8
    4e46:	08 95       	ret

00004e48 <_initTwiInterface>:
    4e48:	80 91 88 12 	lds	r24, 0x1288	; 0x801288 <_twiIsInitiated>
    4e4c:	81 11       	cpse	r24, r1
    4e4e:	0c c0       	rjmp	.+24     	; 0x4e68 <_initTwiInterface+0x20>
    4e50:	8c e0       	ldi	r24, 0x0C	; 12
    4e52:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e56:	8f ef       	ldi	r24, 0xFF	; 255
    4e58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4e5c:	84 e0       	ldi	r24, 0x04	; 4
    4e5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e62:	81 e0       	ldi	r24, 0x01	; 1
    4e64:	80 93 88 12 	sts	0x1288, r24	; 0x801288 <_twiIsInitiated>
    4e68:	08 95       	ret

00004e6a <twiCreate>:
    4e6a:	af 92       	push	r10
    4e6c:	bf 92       	push	r11
    4e6e:	cf 92       	push	r12
    4e70:	df 92       	push	r13
    4e72:	ef 92       	push	r14
    4e74:	ff 92       	push	r15
    4e76:	0f 93       	push	r16
    4e78:	1f 93       	push	r17
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
    4e7e:	a8 2e       	mov	r10, r24
    4e80:	b6 2e       	mov	r11, r22
    4e82:	69 01       	movw	r12, r18
    4e84:	7a 01       	movw	r14, r20
    4e86:	84 e0       	ldi	r24, 0x04	; 4
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	f9 d5       	rcall	.+3058   	; 0x5a7e <malloc>
    4e8c:	ec 01       	movw	r28, r24
    4e8e:	89 2b       	or	r24, r25
    4e90:	61 f1       	breq	.+88     	; 0x4eea <twiCreate+0x80>
    4e92:	a8 82       	st	Y, r10
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	b8 12       	cpse	r11, r24
    4e98:	12 c0       	rjmp	.+36     	; 0x4ebe <twiCreate+0x54>
    4e9a:	c7 01       	movw	r24, r14
    4e9c:	b6 01       	movw	r22, r12
    4e9e:	20 ea       	ldi	r18, 0xA0	; 160
    4ea0:	36 e8       	ldi	r19, 0x86	; 134
    4ea2:	41 e0       	ldi	r20, 0x01	; 1
    4ea4:	50 e0       	ldi	r21, 0x00	; 0
    4ea6:	c1 d5       	rcall	.+2946   	; 0x5a2a <__udivmodsi4>
    4ea8:	da 01       	movw	r26, r20
    4eaa:	c9 01       	movw	r24, r18
    4eac:	40 97       	sbiw	r24, 0x10	; 16
    4eae:	a1 09       	sbc	r26, r1
    4eb0:	b1 09       	sbc	r27, r1
    4eb2:	b6 95       	lsr	r27
    4eb4:	a7 95       	ror	r26
    4eb6:	97 95       	ror	r25
    4eb8:	87 95       	ror	r24
    4eba:	89 83       	std	Y+1, r24	; 0x01
    4ebc:	11 c0       	rjmp	.+34     	; 0x4ee0 <twiCreate+0x76>
    4ebe:	c7 01       	movw	r24, r14
    4ec0:	b6 01       	movw	r22, r12
    4ec2:	20 e8       	ldi	r18, 0x80	; 128
    4ec4:	3a e1       	ldi	r19, 0x1A	; 26
    4ec6:	46 e0       	ldi	r20, 0x06	; 6
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	af d5       	rcall	.+2910   	; 0x5a2a <__udivmodsi4>
    4ecc:	da 01       	movw	r26, r20
    4ece:	c9 01       	movw	r24, r18
    4ed0:	40 97       	sbiw	r24, 0x10	; 16
    4ed2:	a1 09       	sbc	r26, r1
    4ed4:	b1 09       	sbc	r27, r1
    4ed6:	b6 95       	lsr	r27
    4ed8:	a7 95       	ror	r26
    4eda:	97 95       	ror	r25
    4edc:	87 95       	ror	r24
    4ede:	89 83       	std	Y+1, r24	; 0x01
    4ee0:	1b 83       	std	Y+3, r17	; 0x03
    4ee2:	0a 83       	std	Y+2, r16	; 0x02
    4ee4:	8c 2f       	mov	r24, r28
    4ee6:	9d 2f       	mov	r25, r29
    4ee8:	02 c0       	rjmp	.+4      	; 0x4eee <twiCreate+0x84>
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	ff 90       	pop	r15
    4ef8:	ef 90       	pop	r14
    4efa:	df 90       	pop	r13
    4efc:	cf 90       	pop	r12
    4efe:	bf 90       	pop	r11
    4f00:	af 90       	pop	r10
    4f02:	08 95       	ret

00004f04 <twiIsBusy>:
    4f04:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f08:	81 70       	andi	r24, 0x01	; 1
    4f0a:	08 95       	ret

00004f0c <twiTransmit>:
    4f0c:	ff 92       	push	r15
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	00 97       	sbiw	r24, 0x00	; 0
    4f18:	d1 f1       	breq	.+116    	; 0x4f8e <twiTransmit+0x82>
    4f1a:	4a 30       	cpi	r20, 0x0A	; 10
    4f1c:	d0 f5       	brcc	.+116    	; 0x4f92 <twiTransmit+0x86>
    4f1e:	f4 2e       	mov	r15, r20
    4f20:	8b 01       	movw	r16, r22
    4f22:	ec 01       	movw	r28, r24
    4f24:	ef df       	rcall	.-34     	; 0x4f04 <twiIsBusy>
    4f26:	81 11       	cpse	r24, r1
    4f28:	36 c0       	rjmp	.+108    	; 0x4f96 <twiTransmit+0x8a>
    4f2a:	80 91 7b 12 	lds	r24, 0x127B	; 0x80127b <_twiCurrentHandler>
    4f2e:	90 91 7c 12 	lds	r25, 0x127C	; 0x80127c <_twiCurrentHandler+0x1>
    4f32:	c8 17       	cp	r28, r24
    4f34:	d9 07       	cpc	r29, r25
    4f36:	41 f0       	breq	.+16     	; 0x4f48 <twiTransmit+0x3c>
    4f38:	87 df       	rcall	.-242    	; 0x4e48 <_initTwiInterface>
    4f3a:	89 81       	ldd	r24, Y+1	; 0x01
    4f3c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4f40:	d0 93 7c 12 	sts	0x127C, r29	; 0x80127c <_twiCurrentHandler+0x1>
    4f44:	c0 93 7b 12 	sts	0x127B, r28	; 0x80127b <_twiCurrentHandler>
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	8f 0d       	add	r24, r15
    4f4c:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <_twiMessageLen>
    4f50:	88 81       	ld	r24, Y
    4f52:	88 0f       	add	r24, r24
    4f54:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <_twiMessageBuffer>
    4f58:	ff 20       	and	r15, r15
    4f5a:	89 f0       	breq	.+34     	; 0x4f7e <twiTransmit+0x72>
    4f5c:	f8 01       	movw	r30, r16
    4f5e:	af e7       	ldi	r26, 0x7F	; 127
    4f60:	b2 e1       	ldi	r27, 0x12	; 18
    4f62:	4f ef       	ldi	r20, 0xFF	; 255
    4f64:	4f 0d       	add	r20, r15
    4f66:	64 2f       	mov	r22, r20
    4f68:	70 e0       	ldi	r23, 0x00	; 0
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	01 96       	adiw	r24, 0x01	; 1
    4f6e:	b8 01       	movw	r22, r16
    4f70:	68 0f       	add	r22, r24
    4f72:	79 1f       	adc	r23, r25
    4f74:	81 91       	ld	r24, Z+
    4f76:	8d 93       	st	X+, r24
    4f78:	e6 17       	cp	r30, r22
    4f7a:	f7 07       	cpc	r31, r23
    4f7c:	d9 f7       	brne	.-10     	; 0x4f74 <twiTransmit+0x68>
    4f7e:	88 ef       	ldi	r24, 0xF8	; 248
    4f80:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4f84:	85 ea       	ldi	r24, 0xA5	; 165
    4f86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f8a:	84 e0       	ldi	r24, 0x04	; 4
    4f8c:	05 c0       	rjmp	.+10     	; 0x4f98 <twiTransmit+0x8c>
    4f8e:	86 e0       	ldi	r24, 0x06	; 6
    4f90:	03 c0       	rjmp	.+6      	; 0x4f98 <twiTransmit+0x8c>
    4f92:	87 e0       	ldi	r24, 0x07	; 7
    4f94:	01 c0       	rjmp	.+2      	; 0x4f98 <twiTransmit+0x8c>
    4f96:	82 e0       	ldi	r24, 0x02	; 2
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	1f 91       	pop	r17
    4f9e:	0f 91       	pop	r16
    4fa0:	ff 90       	pop	r15
    4fa2:	08 95       	ret

00004fa4 <twiReceive>:
    4fa4:	1f 93       	push	r17
    4fa6:	cf 93       	push	r28
    4fa8:	df 93       	push	r29
    4faa:	00 97       	sbiw	r24, 0x00	; 0
    4fac:	29 f1       	breq	.+74     	; 0x4ff8 <twiReceive+0x54>
    4fae:	6b 30       	cpi	r22, 0x0B	; 11
    4fb0:	28 f5       	brcc	.+74     	; 0x4ffc <twiReceive+0x58>
    4fb2:	16 2f       	mov	r17, r22
    4fb4:	ec 01       	movw	r28, r24
    4fb6:	a6 df       	rcall	.-180    	; 0x4f04 <twiIsBusy>
    4fb8:	81 11       	cpse	r24, r1
    4fba:	22 c0       	rjmp	.+68     	; 0x5000 <twiReceive+0x5c>
    4fbc:	80 91 7b 12 	lds	r24, 0x127B	; 0x80127b <_twiCurrentHandler>
    4fc0:	90 91 7c 12 	lds	r25, 0x127C	; 0x80127c <_twiCurrentHandler+0x1>
    4fc4:	c8 17       	cp	r28, r24
    4fc6:	d9 07       	cpc	r29, r25
    4fc8:	41 f0       	breq	.+16     	; 0x4fda <twiReceive+0x36>
    4fca:	3e df       	rcall	.-388    	; 0x4e48 <_initTwiInterface>
    4fcc:	89 81       	ldd	r24, Y+1	; 0x01
    4fce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4fd2:	d0 93 7c 12 	sts	0x127C, r29	; 0x80127c <_twiCurrentHandler+0x1>
    4fd6:	c0 93 7b 12 	sts	0x127B, r28	; 0x80127b <_twiCurrentHandler>
    4fda:	10 93 7d 12 	sts	0x127D, r17	; 0x80127d <_twiMessageLen>
    4fde:	88 81       	ld	r24, Y
    4fe0:	88 0f       	add	r24, r24
    4fe2:	81 60       	ori	r24, 0x01	; 1
    4fe4:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <_twiMessageBuffer>
    4fe8:	88 ef       	ldi	r24, 0xF8	; 248
    4fea:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4fee:	85 ea       	ldi	r24, 0xA5	; 165
    4ff0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ff4:	85 e0       	ldi	r24, 0x05	; 5
    4ff6:	05 c0       	rjmp	.+10     	; 0x5002 <twiReceive+0x5e>
    4ff8:	86 e0       	ldi	r24, 0x06	; 6
    4ffa:	03 c0       	rjmp	.+6      	; 0x5002 <twiReceive+0x5e>
    4ffc:	87 e0       	ldi	r24, 0x07	; 7
    4ffe:	01 c0       	rjmp	.+2      	; 0x5002 <twiReceive+0x5e>
    5000:	82 e0       	ldi	r24, 0x02	; 2
    5002:	df 91       	pop	r29
    5004:	cf 91       	pop	r28
    5006:	1f 91       	pop	r17
    5008:	08 95       	ret

0000500a <__vector_39>:
    500a:	1f 92       	push	r1
    500c:	0f 92       	push	r0
    500e:	0f b6       	in	r0, 0x3f	; 63
    5010:	0f 92       	push	r0
    5012:	11 24       	eor	r1, r1
    5014:	0b b6       	in	r0, 0x3b	; 59
    5016:	0f 92       	push	r0
    5018:	2f 93       	push	r18
    501a:	3f 93       	push	r19
    501c:	4f 93       	push	r20
    501e:	5f 93       	push	r21
    5020:	6f 93       	push	r22
    5022:	7f 93       	push	r23
    5024:	8f 93       	push	r24
    5026:	9f 93       	push	r25
    5028:	af 93       	push	r26
    502a:	bf 93       	push	r27
    502c:	ef 93       	push	r30
    502e:	ff 93       	push	r31
    5030:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5034:	8e 2f       	mov	r24, r30
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	fc 01       	movw	r30, r24
    503a:	38 97       	sbiw	r30, 0x08	; 8
    503c:	e1 35       	cpi	r30, 0x51	; 81
    503e:	f1 05       	cpc	r31, r1
    5040:	08 f0       	brcs	.+2      	; 0x5044 <__vector_39+0x3a>
    5042:	75 c0       	rjmp	.+234    	; 0x512e <__vector_39+0x124>
    5044:	88 27       	eor	r24, r24
    5046:	e4 58       	subi	r30, 0x84	; 132
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	8f 4f       	sbci	r24, 0xFF	; 255
    504c:	10 c5       	rjmp	.+2592   	; 0x5a6e <__tablejump2__>
    504e:	10 92 7a 12 	sts	0x127A, r1	; 0x80127a <_index.1885>
    5052:	e0 91 7a 12 	lds	r30, 0x127A	; 0x80127a <_index.1885>
    5056:	80 91 7d 12 	lds	r24, 0x127D	; 0x80127d <_twiMessageLen>
    505a:	e8 17       	cp	r30, r24
    505c:	70 f4       	brcc	.+28     	; 0x507a <__vector_39+0x70>
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	8e 0f       	add	r24, r30
    5062:	80 93 7a 12 	sts	0x127A, r24	; 0x80127a <_index.1885>
    5066:	f0 e0       	ldi	r31, 0x00	; 0
    5068:	e2 58       	subi	r30, 0x82	; 130
    506a:	fd 4e       	sbci	r31, 0xED	; 237
    506c:	80 81       	ld	r24, Z
    506e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5072:	85 e8       	ldi	r24, 0x85	; 133
    5074:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5078:	72 c0       	rjmp	.+228    	; 0x515e <__vector_39+0x154>
    507a:	84 e9       	ldi	r24, 0x94	; 148
    507c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5080:	80 91 7b 12 	lds	r24, 0x127B	; 0x80127b <_twiCurrentHandler>
    5084:	90 91 7c 12 	lds	r25, 0x127C	; 0x80127c <_twiCurrentHandler+0x1>
    5088:	dc 01       	movw	r26, r24
    508a:	12 96       	adiw	r26, 0x02	; 2
    508c:	ed 91       	ld	r30, X+
    508e:	fc 91       	ld	r31, X
    5090:	13 97       	sbiw	r26, 0x03	; 3
    5092:	30 97       	sbiw	r30, 0x00	; 0
    5094:	09 f4       	brne	.+2      	; 0x5098 <__vector_39+0x8e>
    5096:	63 c0       	rjmp	.+198    	; 0x515e <__vector_39+0x154>
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	40 e0       	ldi	r20, 0x00	; 0
    509c:	50 e0       	ldi	r21, 0x00	; 0
    509e:	64 e0       	ldi	r22, 0x04	; 4
    50a0:	19 95       	eicall
    50a2:	5d c0       	rjmp	.+186    	; 0x515e <__vector_39+0x154>
    50a4:	e0 91 7a 12 	lds	r30, 0x127A	; 0x80127a <_index.1885>
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	8e 0f       	add	r24, r30
    50ac:	80 93 7a 12 	sts	0x127A, r24	; 0x80127a <_index.1885>
    50b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    50b4:	f0 e0       	ldi	r31, 0x00	; 0
    50b6:	e2 58       	subi	r30, 0x82	; 130
    50b8:	fd 4e       	sbci	r31, 0xED	; 237
    50ba:	80 83       	st	Z, r24
    50bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    50c0:	80 34       	cpi	r24, 0x40	; 64
    50c2:	11 f4       	brne	.+4      	; 0x50c8 <__vector_39+0xbe>
    50c4:	10 92 7a 12 	sts	0x127A, r1	; 0x80127a <_index.1885>
    50c8:	20 91 7a 12 	lds	r18, 0x127A	; 0x80127a <_index.1885>
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	80 91 7d 12 	lds	r24, 0x127D	; 0x80127d <_twiMessageLen>
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	01 97       	sbiw	r24, 0x01	; 1
    50d6:	28 17       	cp	r18, r24
    50d8:	39 07       	cpc	r19, r25
    50da:	24 f4       	brge	.+8      	; 0x50e4 <__vector_39+0xda>
    50dc:	85 ec       	ldi	r24, 0xC5	; 197
    50de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    50e2:	3d c0       	rjmp	.+122    	; 0x515e <__vector_39+0x154>
    50e4:	85 e8       	ldi	r24, 0x85	; 133
    50e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    50ea:	39 c0       	rjmp	.+114    	; 0x515e <__vector_39+0x154>
    50ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    50f0:	e0 91 7a 12 	lds	r30, 0x127A	; 0x80127a <_index.1885>
    50f4:	f0 e0       	ldi	r31, 0x00	; 0
    50f6:	e2 58       	subi	r30, 0x82	; 130
    50f8:	fd 4e       	sbci	r31, 0xED	; 237
    50fa:	80 83       	st	Z, r24
    50fc:	84 e9       	ldi	r24, 0x94	; 148
    50fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5102:	80 91 7b 12 	lds	r24, 0x127B	; 0x80127b <_twiCurrentHandler>
    5106:	90 91 7c 12 	lds	r25, 0x127C	; 0x80127c <_twiCurrentHandler+0x1>
    510a:	dc 01       	movw	r26, r24
    510c:	12 96       	adiw	r26, 0x02	; 2
    510e:	ed 91       	ld	r30, X+
    5110:	fc 91       	ld	r31, X
    5112:	13 97       	sbiw	r26, 0x03	; 3
    5114:	30 97       	sbiw	r30, 0x00	; 0
    5116:	19 f1       	breq	.+70     	; 0x515e <__vector_39+0x154>
    5118:	20 91 7d 12 	lds	r18, 0x127D	; 0x80127d <_twiMessageLen>
    511c:	4e e7       	ldi	r20, 0x7E	; 126
    511e:	52 e1       	ldi	r21, 0x12	; 18
    5120:	65 e0       	ldi	r22, 0x05	; 5
    5122:	19 95       	eicall
    5124:	1c c0       	rjmp	.+56     	; 0x515e <__vector_39+0x154>
    5126:	85 ea       	ldi	r24, 0xA5	; 165
    5128:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    512c:	18 c0       	rjmp	.+48     	; 0x515e <__vector_39+0x154>
    512e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5132:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5136:	84 e0       	ldi	r24, 0x04	; 4
    5138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    513c:	80 91 7b 12 	lds	r24, 0x127B	; 0x80127b <_twiCurrentHandler>
    5140:	90 91 7c 12 	lds	r25, 0x127C	; 0x80127c <_twiCurrentHandler+0x1>
    5144:	dc 01       	movw	r26, r24
    5146:	12 96       	adiw	r26, 0x02	; 2
    5148:	ed 91       	ld	r30, X+
    514a:	fc 91       	ld	r31, X
    514c:	13 97       	sbiw	r26, 0x03	; 3
    514e:	30 97       	sbiw	r30, 0x00	; 0
    5150:	31 f0       	breq	.+12     	; 0x515e <__vector_39+0x154>
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	40 e0       	ldi	r20, 0x00	; 0
    5156:	50 e0       	ldi	r21, 0x00	; 0
    5158:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    515c:	19 95       	eicall
    515e:	ff 91       	pop	r31
    5160:	ef 91       	pop	r30
    5162:	bf 91       	pop	r27
    5164:	af 91       	pop	r26
    5166:	9f 91       	pop	r25
    5168:	8f 91       	pop	r24
    516a:	7f 91       	pop	r23
    516c:	6f 91       	pop	r22
    516e:	5f 91       	pop	r21
    5170:	4f 91       	pop	r20
    5172:	3f 91       	pop	r19
    5174:	2f 91       	pop	r18
    5176:	0f 90       	pop	r0
    5178:	0b be       	out	0x3b, r0	; 59
    517a:	0f 90       	pop	r0
    517c:	0f be       	out	0x3f, r0	; 63
    517e:	0f 90       	pop	r0
    5180:	1f 90       	pop	r1
    5182:	18 95       	reti

00005184 <fifo_init>:
    5184:	fc 01       	movw	r30, r24
    5186:	41 11       	cpse	r20, r1
    5188:	01 c0       	rjmp	.+2      	; 0x518c <fifo_init+0x8>
    518a:	9a d5       	rcall	.+2868   	; 0x5cc0 <abort>
    518c:	84 2f       	mov	r24, r20
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	9c 01       	movw	r18, r24
    5192:	21 50       	subi	r18, 0x01	; 1
    5194:	31 09       	sbc	r19, r1
    5196:	82 23       	and	r24, r18
    5198:	93 23       	and	r25, r19
    519a:	89 2b       	or	r24, r25
    519c:	09 f0       	breq	.+2      	; 0x51a0 <fifo_init+0x1c>
    519e:	90 d5       	rcall	.+2848   	; 0x5cc0 <abort>
    51a0:	41 38       	cpi	r20, 0x81	; 129
    51a2:	08 f0       	brcs	.+2      	; 0x51a6 <fifo_init+0x22>
    51a4:	8d d5       	rcall	.+2842   	; 0x5cc0 <abort>
    51a6:	12 82       	std	Z+2, r1	; 0x02
    51a8:	13 82       	std	Z+3, r1	; 0x03
    51aa:	44 83       	std	Z+4, r20	; 0x04
    51ac:	44 0f       	add	r20, r20
    51ae:	41 50       	subi	r20, 0x01	; 1
    51b0:	45 83       	std	Z+5, r20	; 0x05
    51b2:	71 83       	std	Z+1, r23	; 0x01
    51b4:	60 83       	st	Z, r22
    51b6:	80 e0       	ldi	r24, 0x00	; 0
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	08 95       	ret

000051bc <vfprintf>:
    51bc:	2f 92       	push	r2
    51be:	3f 92       	push	r3
    51c0:	4f 92       	push	r4
    51c2:	5f 92       	push	r5
    51c4:	6f 92       	push	r6
    51c6:	7f 92       	push	r7
    51c8:	8f 92       	push	r8
    51ca:	9f 92       	push	r9
    51cc:	af 92       	push	r10
    51ce:	bf 92       	push	r11
    51d0:	cf 92       	push	r12
    51d2:	df 92       	push	r13
    51d4:	ef 92       	push	r14
    51d6:	ff 92       	push	r15
    51d8:	0f 93       	push	r16
    51da:	1f 93       	push	r17
    51dc:	cf 93       	push	r28
    51de:	df 93       	push	r29
    51e0:	cd b7       	in	r28, 0x3d	; 61
    51e2:	de b7       	in	r29, 0x3e	; 62
    51e4:	60 97       	sbiw	r28, 0x10	; 16
    51e6:	0f b6       	in	r0, 0x3f	; 63
    51e8:	f8 94       	cli
    51ea:	de bf       	out	0x3e, r29	; 62
    51ec:	0f be       	out	0x3f, r0	; 63
    51ee:	cd bf       	out	0x3d, r28	; 61
    51f0:	7c 01       	movw	r14, r24
    51f2:	1b 01       	movw	r2, r22
    51f4:	6a 01       	movw	r12, r20
    51f6:	fc 01       	movw	r30, r24
    51f8:	17 82       	std	Z+7, r1	; 0x07
    51fa:	16 82       	std	Z+6, r1	; 0x06
    51fc:	83 81       	ldd	r24, Z+3	; 0x03
    51fe:	81 ff       	sbrs	r24, 1
    5200:	2a c3       	rjmp	.+1620   	; 0x5856 <vfprintf+0x69a>
    5202:	9e 01       	movw	r18, r28
    5204:	2f 5f       	subi	r18, 0xFF	; 255
    5206:	3f 4f       	sbci	r19, 0xFF	; 255
    5208:	39 01       	movw	r6, r18
    520a:	f7 01       	movw	r30, r14
    520c:	93 81       	ldd	r25, Z+3	; 0x03
    520e:	f1 01       	movw	r30, r2
    5210:	93 fd       	sbrc	r25, 3
    5212:	85 91       	lpm	r24, Z+
    5214:	93 ff       	sbrs	r25, 3
    5216:	81 91       	ld	r24, Z+
    5218:	1f 01       	movw	r2, r30
    521a:	88 23       	and	r24, r24
    521c:	09 f4       	brne	.+2      	; 0x5220 <vfprintf+0x64>
    521e:	17 c3       	rjmp	.+1582   	; 0x584e <vfprintf+0x692>
    5220:	85 32       	cpi	r24, 0x25	; 37
    5222:	39 f4       	brne	.+14     	; 0x5232 <vfprintf+0x76>
    5224:	93 fd       	sbrc	r25, 3
    5226:	85 91       	lpm	r24, Z+
    5228:	93 ff       	sbrs	r25, 3
    522a:	81 91       	ld	r24, Z+
    522c:	1f 01       	movw	r2, r30
    522e:	85 32       	cpi	r24, 0x25	; 37
    5230:	31 f4       	brne	.+12     	; 0x523e <vfprintf+0x82>
    5232:	b7 01       	movw	r22, r14
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	95 d6       	rcall	.+3370   	; 0x5f62 <fputc>
    5238:	56 01       	movw	r10, r12
    523a:	65 01       	movw	r12, r10
    523c:	e6 cf       	rjmp	.-52     	; 0x520a <vfprintf+0x4e>
    523e:	10 e0       	ldi	r17, 0x00	; 0
    5240:	51 2c       	mov	r5, r1
    5242:	91 2c       	mov	r9, r1
    5244:	ff e1       	ldi	r31, 0x1F	; 31
    5246:	f9 15       	cp	r31, r9
    5248:	d8 f0       	brcs	.+54     	; 0x5280 <vfprintf+0xc4>
    524a:	8b 32       	cpi	r24, 0x2B	; 43
    524c:	79 f0       	breq	.+30     	; 0x526c <vfprintf+0xb0>
    524e:	38 f4       	brcc	.+14     	; 0x525e <vfprintf+0xa2>
    5250:	80 32       	cpi	r24, 0x20	; 32
    5252:	79 f0       	breq	.+30     	; 0x5272 <vfprintf+0xb6>
    5254:	83 32       	cpi	r24, 0x23	; 35
    5256:	a1 f4       	brne	.+40     	; 0x5280 <vfprintf+0xc4>
    5258:	f9 2d       	mov	r31, r9
    525a:	f0 61       	ori	r31, 0x10	; 16
    525c:	2e c0       	rjmp	.+92     	; 0x52ba <vfprintf+0xfe>
    525e:	8d 32       	cpi	r24, 0x2D	; 45
    5260:	61 f0       	breq	.+24     	; 0x527a <vfprintf+0xbe>
    5262:	80 33       	cpi	r24, 0x30	; 48
    5264:	69 f4       	brne	.+26     	; 0x5280 <vfprintf+0xc4>
    5266:	29 2d       	mov	r18, r9
    5268:	21 60       	ori	r18, 0x01	; 1
    526a:	2d c0       	rjmp	.+90     	; 0x52c6 <vfprintf+0x10a>
    526c:	39 2d       	mov	r19, r9
    526e:	32 60       	ori	r19, 0x02	; 2
    5270:	93 2e       	mov	r9, r19
    5272:	89 2d       	mov	r24, r9
    5274:	84 60       	ori	r24, 0x04	; 4
    5276:	98 2e       	mov	r9, r24
    5278:	2a c0       	rjmp	.+84     	; 0x52ce <vfprintf+0x112>
    527a:	e9 2d       	mov	r30, r9
    527c:	e8 60       	ori	r30, 0x08	; 8
    527e:	15 c0       	rjmp	.+42     	; 0x52aa <vfprintf+0xee>
    5280:	97 fc       	sbrc	r9, 7
    5282:	2d c0       	rjmp	.+90     	; 0x52de <vfprintf+0x122>
    5284:	20 ed       	ldi	r18, 0xD0	; 208
    5286:	28 0f       	add	r18, r24
    5288:	2a 30       	cpi	r18, 0x0A	; 10
    528a:	88 f4       	brcc	.+34     	; 0x52ae <vfprintf+0xf2>
    528c:	96 fe       	sbrs	r9, 6
    528e:	06 c0       	rjmp	.+12     	; 0x529c <vfprintf+0xe0>
    5290:	3a e0       	ldi	r19, 0x0A	; 10
    5292:	13 9f       	mul	r17, r19
    5294:	20 0d       	add	r18, r0
    5296:	11 24       	eor	r1, r1
    5298:	12 2f       	mov	r17, r18
    529a:	19 c0       	rjmp	.+50     	; 0x52ce <vfprintf+0x112>
    529c:	8a e0       	ldi	r24, 0x0A	; 10
    529e:	58 9e       	mul	r5, r24
    52a0:	20 0d       	add	r18, r0
    52a2:	11 24       	eor	r1, r1
    52a4:	52 2e       	mov	r5, r18
    52a6:	e9 2d       	mov	r30, r9
    52a8:	e0 62       	ori	r30, 0x20	; 32
    52aa:	9e 2e       	mov	r9, r30
    52ac:	10 c0       	rjmp	.+32     	; 0x52ce <vfprintf+0x112>
    52ae:	8e 32       	cpi	r24, 0x2E	; 46
    52b0:	31 f4       	brne	.+12     	; 0x52be <vfprintf+0x102>
    52b2:	96 fc       	sbrc	r9, 6
    52b4:	cc c2       	rjmp	.+1432   	; 0x584e <vfprintf+0x692>
    52b6:	f9 2d       	mov	r31, r9
    52b8:	f0 64       	ori	r31, 0x40	; 64
    52ba:	9f 2e       	mov	r9, r31
    52bc:	08 c0       	rjmp	.+16     	; 0x52ce <vfprintf+0x112>
    52be:	8c 36       	cpi	r24, 0x6C	; 108
    52c0:	21 f4       	brne	.+8      	; 0x52ca <vfprintf+0x10e>
    52c2:	29 2d       	mov	r18, r9
    52c4:	20 68       	ori	r18, 0x80	; 128
    52c6:	92 2e       	mov	r9, r18
    52c8:	02 c0       	rjmp	.+4      	; 0x52ce <vfprintf+0x112>
    52ca:	88 36       	cpi	r24, 0x68	; 104
    52cc:	41 f4       	brne	.+16     	; 0x52de <vfprintf+0x122>
    52ce:	f1 01       	movw	r30, r2
    52d0:	93 fd       	sbrc	r25, 3
    52d2:	85 91       	lpm	r24, Z+
    52d4:	93 ff       	sbrs	r25, 3
    52d6:	81 91       	ld	r24, Z+
    52d8:	1f 01       	movw	r2, r30
    52da:	81 11       	cpse	r24, r1
    52dc:	b3 cf       	rjmp	.-154    	; 0x5244 <vfprintf+0x88>
    52de:	9b eb       	ldi	r25, 0xBB	; 187
    52e0:	98 0f       	add	r25, r24
    52e2:	93 30       	cpi	r25, 0x03	; 3
    52e4:	20 f4       	brcc	.+8      	; 0x52ee <vfprintf+0x132>
    52e6:	99 2d       	mov	r25, r9
    52e8:	90 61       	ori	r25, 0x10	; 16
    52ea:	80 5e       	subi	r24, 0xE0	; 224
    52ec:	07 c0       	rjmp	.+14     	; 0x52fc <vfprintf+0x140>
    52ee:	9b e9       	ldi	r25, 0x9B	; 155
    52f0:	98 0f       	add	r25, r24
    52f2:	93 30       	cpi	r25, 0x03	; 3
    52f4:	08 f0       	brcs	.+2      	; 0x52f8 <vfprintf+0x13c>
    52f6:	59 c1       	rjmp	.+690    	; 0x55aa <vfprintf+0x3ee>
    52f8:	99 2d       	mov	r25, r9
    52fa:	9f 7e       	andi	r25, 0xEF	; 239
    52fc:	96 ff       	sbrs	r25, 6
    52fe:	16 e0       	ldi	r17, 0x06	; 6
    5300:	9f 73       	andi	r25, 0x3F	; 63
    5302:	99 2e       	mov	r9, r25
    5304:	85 36       	cpi	r24, 0x65	; 101
    5306:	19 f4       	brne	.+6      	; 0x530e <vfprintf+0x152>
    5308:	90 64       	ori	r25, 0x40	; 64
    530a:	99 2e       	mov	r9, r25
    530c:	08 c0       	rjmp	.+16     	; 0x531e <vfprintf+0x162>
    530e:	86 36       	cpi	r24, 0x66	; 102
    5310:	21 f4       	brne	.+8      	; 0x531a <vfprintf+0x15e>
    5312:	39 2f       	mov	r19, r25
    5314:	30 68       	ori	r19, 0x80	; 128
    5316:	93 2e       	mov	r9, r19
    5318:	02 c0       	rjmp	.+4      	; 0x531e <vfprintf+0x162>
    531a:	11 11       	cpse	r17, r1
    531c:	11 50       	subi	r17, 0x01	; 1
    531e:	97 fe       	sbrs	r9, 7
    5320:	07 c0       	rjmp	.+14     	; 0x5330 <vfprintf+0x174>
    5322:	1c 33       	cpi	r17, 0x3C	; 60
    5324:	50 f4       	brcc	.+20     	; 0x533a <vfprintf+0x17e>
    5326:	44 24       	eor	r4, r4
    5328:	43 94       	inc	r4
    532a:	41 0e       	add	r4, r17
    532c:	27 e0       	ldi	r18, 0x07	; 7
    532e:	0b c0       	rjmp	.+22     	; 0x5346 <vfprintf+0x18a>
    5330:	18 30       	cpi	r17, 0x08	; 8
    5332:	38 f0       	brcs	.+14     	; 0x5342 <vfprintf+0x186>
    5334:	27 e0       	ldi	r18, 0x07	; 7
    5336:	17 e0       	ldi	r17, 0x07	; 7
    5338:	05 c0       	rjmp	.+10     	; 0x5344 <vfprintf+0x188>
    533a:	27 e0       	ldi	r18, 0x07	; 7
    533c:	9c e3       	ldi	r25, 0x3C	; 60
    533e:	49 2e       	mov	r4, r25
    5340:	02 c0       	rjmp	.+4      	; 0x5346 <vfprintf+0x18a>
    5342:	21 2f       	mov	r18, r17
    5344:	41 2c       	mov	r4, r1
    5346:	56 01       	movw	r10, r12
    5348:	84 e0       	ldi	r24, 0x04	; 4
    534a:	a8 0e       	add	r10, r24
    534c:	b1 1c       	adc	r11, r1
    534e:	f6 01       	movw	r30, r12
    5350:	60 81       	ld	r22, Z
    5352:	71 81       	ldd	r23, Z+1	; 0x01
    5354:	82 81       	ldd	r24, Z+2	; 0x02
    5356:	93 81       	ldd	r25, Z+3	; 0x03
    5358:	04 2d       	mov	r16, r4
    535a:	a3 01       	movw	r20, r6
    535c:	b5 d4       	rcall	.+2410   	; 0x5cc8 <__ftoa_engine>
    535e:	6c 01       	movw	r12, r24
    5360:	f9 81       	ldd	r31, Y+1	; 0x01
    5362:	fc 87       	std	Y+12, r31	; 0x0c
    5364:	f0 ff       	sbrs	r31, 0
    5366:	02 c0       	rjmp	.+4      	; 0x536c <vfprintf+0x1b0>
    5368:	f3 ff       	sbrs	r31, 3
    536a:	06 c0       	rjmp	.+12     	; 0x5378 <vfprintf+0x1bc>
    536c:	91 fc       	sbrc	r9, 1
    536e:	06 c0       	rjmp	.+12     	; 0x537c <vfprintf+0x1c0>
    5370:	92 fe       	sbrs	r9, 2
    5372:	06 c0       	rjmp	.+12     	; 0x5380 <vfprintf+0x1c4>
    5374:	00 e2       	ldi	r16, 0x20	; 32
    5376:	05 c0       	rjmp	.+10     	; 0x5382 <vfprintf+0x1c6>
    5378:	0d e2       	ldi	r16, 0x2D	; 45
    537a:	03 c0       	rjmp	.+6      	; 0x5382 <vfprintf+0x1c6>
    537c:	0b e2       	ldi	r16, 0x2B	; 43
    537e:	01 c0       	rjmp	.+2      	; 0x5382 <vfprintf+0x1c6>
    5380:	00 e0       	ldi	r16, 0x00	; 0
    5382:	8c 85       	ldd	r24, Y+12	; 0x0c
    5384:	8c 70       	andi	r24, 0x0C	; 12
    5386:	19 f0       	breq	.+6      	; 0x538e <vfprintf+0x1d2>
    5388:	01 11       	cpse	r16, r1
    538a:	43 c2       	rjmp	.+1158   	; 0x5812 <vfprintf+0x656>
    538c:	80 c2       	rjmp	.+1280   	; 0x588e <vfprintf+0x6d2>
    538e:	97 fe       	sbrs	r9, 7
    5390:	10 c0       	rjmp	.+32     	; 0x53b2 <vfprintf+0x1f6>
    5392:	4c 0c       	add	r4, r12
    5394:	fc 85       	ldd	r31, Y+12	; 0x0c
    5396:	f4 ff       	sbrs	r31, 4
    5398:	04 c0       	rjmp	.+8      	; 0x53a2 <vfprintf+0x1e6>
    539a:	8a 81       	ldd	r24, Y+2	; 0x02
    539c:	81 33       	cpi	r24, 0x31	; 49
    539e:	09 f4       	brne	.+2      	; 0x53a2 <vfprintf+0x1e6>
    53a0:	4a 94       	dec	r4
    53a2:	14 14       	cp	r1, r4
    53a4:	74 f5       	brge	.+92     	; 0x5402 <vfprintf+0x246>
    53a6:	28 e0       	ldi	r18, 0x08	; 8
    53a8:	24 15       	cp	r18, r4
    53aa:	78 f5       	brcc	.+94     	; 0x540a <vfprintf+0x24e>
    53ac:	88 e0       	ldi	r24, 0x08	; 8
    53ae:	48 2e       	mov	r4, r24
    53b0:	2c c0       	rjmp	.+88     	; 0x540a <vfprintf+0x24e>
    53b2:	96 fc       	sbrc	r9, 6
    53b4:	2a c0       	rjmp	.+84     	; 0x540a <vfprintf+0x24e>
    53b6:	81 2f       	mov	r24, r17
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	8c 15       	cp	r24, r12
    53bc:	9d 05       	cpc	r25, r13
    53be:	9c f0       	brlt	.+38     	; 0x53e6 <vfprintf+0x22a>
    53c0:	3c ef       	ldi	r19, 0xFC	; 252
    53c2:	c3 16       	cp	r12, r19
    53c4:	3f ef       	ldi	r19, 0xFF	; 255
    53c6:	d3 06       	cpc	r13, r19
    53c8:	74 f0       	brlt	.+28     	; 0x53e6 <vfprintf+0x22a>
    53ca:	89 2d       	mov	r24, r9
    53cc:	80 68       	ori	r24, 0x80	; 128
    53ce:	98 2e       	mov	r9, r24
    53d0:	0a c0       	rjmp	.+20     	; 0x53e6 <vfprintf+0x22a>
    53d2:	e2 e0       	ldi	r30, 0x02	; 2
    53d4:	f0 e0       	ldi	r31, 0x00	; 0
    53d6:	ec 0f       	add	r30, r28
    53d8:	fd 1f       	adc	r31, r29
    53da:	e1 0f       	add	r30, r17
    53dc:	f1 1d       	adc	r31, r1
    53de:	80 81       	ld	r24, Z
    53e0:	80 33       	cpi	r24, 0x30	; 48
    53e2:	19 f4       	brne	.+6      	; 0x53ea <vfprintf+0x22e>
    53e4:	11 50       	subi	r17, 0x01	; 1
    53e6:	11 11       	cpse	r17, r1
    53e8:	f4 cf       	rjmp	.-24     	; 0x53d2 <vfprintf+0x216>
    53ea:	97 fe       	sbrs	r9, 7
    53ec:	0e c0       	rjmp	.+28     	; 0x540a <vfprintf+0x24e>
    53ee:	44 24       	eor	r4, r4
    53f0:	43 94       	inc	r4
    53f2:	41 0e       	add	r4, r17
    53f4:	81 2f       	mov	r24, r17
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	c8 16       	cp	r12, r24
    53fa:	d9 06       	cpc	r13, r25
    53fc:	2c f4       	brge	.+10     	; 0x5408 <vfprintf+0x24c>
    53fe:	1c 19       	sub	r17, r12
    5400:	04 c0       	rjmp	.+8      	; 0x540a <vfprintf+0x24e>
    5402:	44 24       	eor	r4, r4
    5404:	43 94       	inc	r4
    5406:	01 c0       	rjmp	.+2      	; 0x540a <vfprintf+0x24e>
    5408:	10 e0       	ldi	r17, 0x00	; 0
    540a:	97 fe       	sbrs	r9, 7
    540c:	06 c0       	rjmp	.+12     	; 0x541a <vfprintf+0x25e>
    540e:	1c 14       	cp	r1, r12
    5410:	1d 04       	cpc	r1, r13
    5412:	34 f4       	brge	.+12     	; 0x5420 <vfprintf+0x264>
    5414:	c6 01       	movw	r24, r12
    5416:	01 96       	adiw	r24, 0x01	; 1
    5418:	05 c0       	rjmp	.+10     	; 0x5424 <vfprintf+0x268>
    541a:	85 e0       	ldi	r24, 0x05	; 5
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	02 c0       	rjmp	.+4      	; 0x5424 <vfprintf+0x268>
    5420:	81 e0       	ldi	r24, 0x01	; 1
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	01 11       	cpse	r16, r1
    5426:	01 96       	adiw	r24, 0x01	; 1
    5428:	11 23       	and	r17, r17
    542a:	31 f0       	breq	.+12     	; 0x5438 <vfprintf+0x27c>
    542c:	21 2f       	mov	r18, r17
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	2f 5f       	subi	r18, 0xFF	; 255
    5432:	3f 4f       	sbci	r19, 0xFF	; 255
    5434:	82 0f       	add	r24, r18
    5436:	93 1f       	adc	r25, r19
    5438:	25 2d       	mov	r18, r5
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	82 17       	cp	r24, r18
    543e:	93 07       	cpc	r25, r19
    5440:	14 f4       	brge	.+4      	; 0x5446 <vfprintf+0x28a>
    5442:	58 1a       	sub	r5, r24
    5444:	01 c0       	rjmp	.+2      	; 0x5448 <vfprintf+0x28c>
    5446:	51 2c       	mov	r5, r1
    5448:	89 2d       	mov	r24, r9
    544a:	89 70       	andi	r24, 0x09	; 9
    544c:	41 f4       	brne	.+16     	; 0x545e <vfprintf+0x2a2>
    544e:	55 20       	and	r5, r5
    5450:	31 f0       	breq	.+12     	; 0x545e <vfprintf+0x2a2>
    5452:	b7 01       	movw	r22, r14
    5454:	80 e2       	ldi	r24, 0x20	; 32
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	84 d5       	rcall	.+2824   	; 0x5f62 <fputc>
    545a:	5a 94       	dec	r5
    545c:	f8 cf       	rjmp	.-16     	; 0x544e <vfprintf+0x292>
    545e:	00 23       	and	r16, r16
    5460:	21 f0       	breq	.+8      	; 0x546a <vfprintf+0x2ae>
    5462:	b7 01       	movw	r22, r14
    5464:	80 2f       	mov	r24, r16
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	7c d5       	rcall	.+2808   	; 0x5f62 <fputc>
    546a:	93 fc       	sbrc	r9, 3
    546c:	08 c0       	rjmp	.+16     	; 0x547e <vfprintf+0x2c2>
    546e:	55 20       	and	r5, r5
    5470:	31 f0       	breq	.+12     	; 0x547e <vfprintf+0x2c2>
    5472:	b7 01       	movw	r22, r14
    5474:	80 e3       	ldi	r24, 0x30	; 48
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	74 d5       	rcall	.+2792   	; 0x5f62 <fputc>
    547a:	5a 94       	dec	r5
    547c:	f8 cf       	rjmp	.-16     	; 0x546e <vfprintf+0x2b2>
    547e:	97 fe       	sbrs	r9, 7
    5480:	4a c0       	rjmp	.+148    	; 0x5516 <vfprintf+0x35a>
    5482:	46 01       	movw	r8, r12
    5484:	d7 fe       	sbrs	r13, 7
    5486:	02 c0       	rjmp	.+4      	; 0x548c <vfprintf+0x2d0>
    5488:	81 2c       	mov	r8, r1
    548a:	91 2c       	mov	r9, r1
    548c:	c6 01       	movw	r24, r12
    548e:	88 19       	sub	r24, r8
    5490:	99 09       	sbc	r25, r9
    5492:	f3 01       	movw	r30, r6
    5494:	e8 0f       	add	r30, r24
    5496:	f9 1f       	adc	r31, r25
    5498:	fe 87       	std	Y+14, r31	; 0x0e
    549a:	ed 87       	std	Y+13, r30	; 0x0d
    549c:	96 01       	movw	r18, r12
    549e:	24 19       	sub	r18, r4
    54a0:	31 09       	sbc	r19, r1
    54a2:	38 8b       	std	Y+16, r19	; 0x10
    54a4:	2f 87       	std	Y+15, r18	; 0x0f
    54a6:	01 2f       	mov	r16, r17
    54a8:	10 e0       	ldi	r17, 0x00	; 0
    54aa:	11 95       	neg	r17
    54ac:	01 95       	neg	r16
    54ae:	11 09       	sbc	r17, r1
    54b0:	3f ef       	ldi	r19, 0xFF	; 255
    54b2:	83 16       	cp	r8, r19
    54b4:	93 06       	cpc	r9, r19
    54b6:	21 f4       	brne	.+8      	; 0x54c0 <vfprintf+0x304>
    54b8:	b7 01       	movw	r22, r14
    54ba:	8e e2       	ldi	r24, 0x2E	; 46
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	51 d5       	rcall	.+2722   	; 0x5f62 <fputc>
    54c0:	c8 14       	cp	r12, r8
    54c2:	d9 04       	cpc	r13, r9
    54c4:	4c f0       	brlt	.+18     	; 0x54d8 <vfprintf+0x31c>
    54c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    54c8:	98 89       	ldd	r25, Y+16	; 0x10
    54ca:	88 15       	cp	r24, r8
    54cc:	99 05       	cpc	r25, r9
    54ce:	24 f4       	brge	.+8      	; 0x54d8 <vfprintf+0x31c>
    54d0:	ed 85       	ldd	r30, Y+13	; 0x0d
    54d2:	fe 85       	ldd	r31, Y+14	; 0x0e
    54d4:	81 81       	ldd	r24, Z+1	; 0x01
    54d6:	01 c0       	rjmp	.+2      	; 0x54da <vfprintf+0x31e>
    54d8:	80 e3       	ldi	r24, 0x30	; 48
    54da:	f1 e0       	ldi	r31, 0x01	; 1
    54dc:	8f 1a       	sub	r8, r31
    54de:	91 08       	sbc	r9, r1
    54e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    54e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    54e4:	2f 5f       	subi	r18, 0xFF	; 255
    54e6:	3f 4f       	sbci	r19, 0xFF	; 255
    54e8:	3e 87       	std	Y+14, r19	; 0x0e
    54ea:	2d 87       	std	Y+13, r18	; 0x0d
    54ec:	80 16       	cp	r8, r16
    54ee:	91 06       	cpc	r9, r17
    54f0:	24 f0       	brlt	.+8      	; 0x54fa <vfprintf+0x33e>
    54f2:	b7 01       	movw	r22, r14
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	35 d5       	rcall	.+2666   	; 0x5f62 <fputc>
    54f8:	db cf       	rjmp	.-74     	; 0x54b0 <vfprintf+0x2f4>
    54fa:	c8 14       	cp	r12, r8
    54fc:	d9 04       	cpc	r13, r9
    54fe:	41 f4       	brne	.+16     	; 0x5510 <vfprintf+0x354>
    5500:	9a 81       	ldd	r25, Y+2	; 0x02
    5502:	96 33       	cpi	r25, 0x36	; 54
    5504:	20 f4       	brcc	.+8      	; 0x550e <vfprintf+0x352>
    5506:	95 33       	cpi	r25, 0x35	; 53
    5508:	19 f4       	brne	.+6      	; 0x5510 <vfprintf+0x354>
    550a:	3c 85       	ldd	r19, Y+12	; 0x0c
    550c:	34 ff       	sbrs	r19, 4
    550e:	81 e3       	ldi	r24, 0x31	; 49
    5510:	b7 01       	movw	r22, r14
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	48 c0       	rjmp	.+144    	; 0x55a6 <vfprintf+0x3ea>
    5516:	8a 81       	ldd	r24, Y+2	; 0x02
    5518:	81 33       	cpi	r24, 0x31	; 49
    551a:	19 f0       	breq	.+6      	; 0x5522 <vfprintf+0x366>
    551c:	9c 85       	ldd	r25, Y+12	; 0x0c
    551e:	9f 7e       	andi	r25, 0xEF	; 239
    5520:	9c 87       	std	Y+12, r25	; 0x0c
    5522:	b7 01       	movw	r22, r14
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	1d d5       	rcall	.+2618   	; 0x5f62 <fputc>
    5528:	11 11       	cpse	r17, r1
    552a:	05 c0       	rjmp	.+10     	; 0x5536 <vfprintf+0x37a>
    552c:	94 fc       	sbrc	r9, 4
    552e:	16 c0       	rjmp	.+44     	; 0x555c <vfprintf+0x3a0>
    5530:	85 e6       	ldi	r24, 0x65	; 101
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	15 c0       	rjmp	.+42     	; 0x5560 <vfprintf+0x3a4>
    5536:	b7 01       	movw	r22, r14
    5538:	8e e2       	ldi	r24, 0x2E	; 46
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	12 d5       	rcall	.+2596   	; 0x5f62 <fputc>
    553e:	1e 5f       	subi	r17, 0xFE	; 254
    5540:	82 e0       	ldi	r24, 0x02	; 2
    5542:	01 e0       	ldi	r16, 0x01	; 1
    5544:	08 0f       	add	r16, r24
    5546:	f3 01       	movw	r30, r6
    5548:	e8 0f       	add	r30, r24
    554a:	f1 1d       	adc	r31, r1
    554c:	80 81       	ld	r24, Z
    554e:	b7 01       	movw	r22, r14
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	07 d5       	rcall	.+2574   	; 0x5f62 <fputc>
    5554:	80 2f       	mov	r24, r16
    5556:	01 13       	cpse	r16, r17
    5558:	f4 cf       	rjmp	.-24     	; 0x5542 <vfprintf+0x386>
    555a:	e8 cf       	rjmp	.-48     	; 0x552c <vfprintf+0x370>
    555c:	85 e4       	ldi	r24, 0x45	; 69
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	b7 01       	movw	r22, r14
    5562:	ff d4       	rcall	.+2558   	; 0x5f62 <fputc>
    5564:	d7 fc       	sbrc	r13, 7
    5566:	06 c0       	rjmp	.+12     	; 0x5574 <vfprintf+0x3b8>
    5568:	c1 14       	cp	r12, r1
    556a:	d1 04       	cpc	r13, r1
    556c:	41 f4       	brne	.+16     	; 0x557e <vfprintf+0x3c2>
    556e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5570:	e4 ff       	sbrs	r30, 4
    5572:	05 c0       	rjmp	.+10     	; 0x557e <vfprintf+0x3c2>
    5574:	d1 94       	neg	r13
    5576:	c1 94       	neg	r12
    5578:	d1 08       	sbc	r13, r1
    557a:	8d e2       	ldi	r24, 0x2D	; 45
    557c:	01 c0       	rjmp	.+2      	; 0x5580 <vfprintf+0x3c4>
    557e:	8b e2       	ldi	r24, 0x2B	; 43
    5580:	b7 01       	movw	r22, r14
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	ee d4       	rcall	.+2524   	; 0x5f62 <fputc>
    5586:	80 e3       	ldi	r24, 0x30	; 48
    5588:	2a e0       	ldi	r18, 0x0A	; 10
    558a:	c2 16       	cp	r12, r18
    558c:	d1 04       	cpc	r13, r1
    558e:	2c f0       	brlt	.+10     	; 0x559a <vfprintf+0x3de>
    5590:	8f 5f       	subi	r24, 0xFF	; 255
    5592:	fa e0       	ldi	r31, 0x0A	; 10
    5594:	cf 1a       	sub	r12, r31
    5596:	d1 08       	sbc	r13, r1
    5598:	f7 cf       	rjmp	.-18     	; 0x5588 <vfprintf+0x3cc>
    559a:	b7 01       	movw	r22, r14
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	e1 d4       	rcall	.+2498   	; 0x5f62 <fputc>
    55a0:	b7 01       	movw	r22, r14
    55a2:	c6 01       	movw	r24, r12
    55a4:	c0 96       	adiw	r24, 0x30	; 48
    55a6:	dd d4       	rcall	.+2490   	; 0x5f62 <fputc>
    55a8:	49 c1       	rjmp	.+658    	; 0x583c <vfprintf+0x680>
    55aa:	83 36       	cpi	r24, 0x63	; 99
    55ac:	31 f0       	breq	.+12     	; 0x55ba <vfprintf+0x3fe>
    55ae:	83 37       	cpi	r24, 0x73	; 115
    55b0:	79 f0       	breq	.+30     	; 0x55d0 <vfprintf+0x414>
    55b2:	83 35       	cpi	r24, 0x53	; 83
    55b4:	09 f0       	breq	.+2      	; 0x55b8 <vfprintf+0x3fc>
    55b6:	52 c0       	rjmp	.+164    	; 0x565c <vfprintf+0x4a0>
    55b8:	1f c0       	rjmp	.+62     	; 0x55f8 <vfprintf+0x43c>
    55ba:	56 01       	movw	r10, r12
    55bc:	32 e0       	ldi	r19, 0x02	; 2
    55be:	a3 0e       	add	r10, r19
    55c0:	b1 1c       	adc	r11, r1
    55c2:	f6 01       	movw	r30, r12
    55c4:	80 81       	ld	r24, Z
    55c6:	89 83       	std	Y+1, r24	; 0x01
    55c8:	01 e0       	ldi	r16, 0x01	; 1
    55ca:	10 e0       	ldi	r17, 0x00	; 0
    55cc:	63 01       	movw	r12, r6
    55ce:	11 c0       	rjmp	.+34     	; 0x55f2 <vfprintf+0x436>
    55d0:	56 01       	movw	r10, r12
    55d2:	f2 e0       	ldi	r31, 0x02	; 2
    55d4:	af 0e       	add	r10, r31
    55d6:	b1 1c       	adc	r11, r1
    55d8:	f6 01       	movw	r30, r12
    55da:	c0 80       	ld	r12, Z
    55dc:	d1 80       	ldd	r13, Z+1	; 0x01
    55de:	96 fe       	sbrs	r9, 6
    55e0:	03 c0       	rjmp	.+6      	; 0x55e8 <vfprintf+0x42c>
    55e2:	61 2f       	mov	r22, r17
    55e4:	70 e0       	ldi	r23, 0x00	; 0
    55e6:	02 c0       	rjmp	.+4      	; 0x55ec <vfprintf+0x430>
    55e8:	6f ef       	ldi	r22, 0xFF	; 255
    55ea:	7f ef       	ldi	r23, 0xFF	; 255
    55ec:	c6 01       	movw	r24, r12
    55ee:	ae d4       	rcall	.+2396   	; 0x5f4c <strnlen>
    55f0:	8c 01       	movw	r16, r24
    55f2:	f9 2d       	mov	r31, r9
    55f4:	ff 77       	andi	r31, 0x7F	; 127
    55f6:	13 c0       	rjmp	.+38     	; 0x561e <vfprintf+0x462>
    55f8:	56 01       	movw	r10, r12
    55fa:	22 e0       	ldi	r18, 0x02	; 2
    55fc:	a2 0e       	add	r10, r18
    55fe:	b1 1c       	adc	r11, r1
    5600:	f6 01       	movw	r30, r12
    5602:	c0 80       	ld	r12, Z
    5604:	d1 80       	ldd	r13, Z+1	; 0x01
    5606:	96 fe       	sbrs	r9, 6
    5608:	03 c0       	rjmp	.+6      	; 0x5610 <vfprintf+0x454>
    560a:	61 2f       	mov	r22, r17
    560c:	70 e0       	ldi	r23, 0x00	; 0
    560e:	02 c0       	rjmp	.+4      	; 0x5614 <vfprintf+0x458>
    5610:	6f ef       	ldi	r22, 0xFF	; 255
    5612:	7f ef       	ldi	r23, 0xFF	; 255
    5614:	c6 01       	movw	r24, r12
    5616:	30 d4       	rcall	.+2144   	; 0x5e78 <strnlen_P>
    5618:	8c 01       	movw	r16, r24
    561a:	f9 2d       	mov	r31, r9
    561c:	f0 68       	ori	r31, 0x80	; 128
    561e:	9f 2e       	mov	r9, r31
    5620:	f3 fd       	sbrc	r31, 3
    5622:	18 c0       	rjmp	.+48     	; 0x5654 <vfprintf+0x498>
    5624:	85 2d       	mov	r24, r5
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	08 17       	cp	r16, r24
    562a:	19 07       	cpc	r17, r25
    562c:	98 f4       	brcc	.+38     	; 0x5654 <vfprintf+0x498>
    562e:	b7 01       	movw	r22, r14
    5630:	80 e2       	ldi	r24, 0x20	; 32
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	96 d4       	rcall	.+2348   	; 0x5f62 <fputc>
    5636:	5a 94       	dec	r5
    5638:	f5 cf       	rjmp	.-22     	; 0x5624 <vfprintf+0x468>
    563a:	f6 01       	movw	r30, r12
    563c:	97 fc       	sbrc	r9, 7
    563e:	85 91       	lpm	r24, Z+
    5640:	97 fe       	sbrs	r9, 7
    5642:	81 91       	ld	r24, Z+
    5644:	6f 01       	movw	r12, r30
    5646:	b7 01       	movw	r22, r14
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	8b d4       	rcall	.+2326   	; 0x5f62 <fputc>
    564c:	51 10       	cpse	r5, r1
    564e:	5a 94       	dec	r5
    5650:	01 50       	subi	r16, 0x01	; 1
    5652:	11 09       	sbc	r17, r1
    5654:	01 15       	cp	r16, r1
    5656:	11 05       	cpc	r17, r1
    5658:	81 f7       	brne	.-32     	; 0x563a <vfprintf+0x47e>
    565a:	f0 c0       	rjmp	.+480    	; 0x583c <vfprintf+0x680>
    565c:	84 36       	cpi	r24, 0x64	; 100
    565e:	11 f0       	breq	.+4      	; 0x5664 <vfprintf+0x4a8>
    5660:	89 36       	cpi	r24, 0x69	; 105
    5662:	59 f5       	brne	.+86     	; 0x56ba <vfprintf+0x4fe>
    5664:	56 01       	movw	r10, r12
    5666:	97 fe       	sbrs	r9, 7
    5668:	09 c0       	rjmp	.+18     	; 0x567c <vfprintf+0x4c0>
    566a:	24 e0       	ldi	r18, 0x04	; 4
    566c:	a2 0e       	add	r10, r18
    566e:	b1 1c       	adc	r11, r1
    5670:	f6 01       	movw	r30, r12
    5672:	60 81       	ld	r22, Z
    5674:	71 81       	ldd	r23, Z+1	; 0x01
    5676:	82 81       	ldd	r24, Z+2	; 0x02
    5678:	93 81       	ldd	r25, Z+3	; 0x03
    567a:	0a c0       	rjmp	.+20     	; 0x5690 <vfprintf+0x4d4>
    567c:	f2 e0       	ldi	r31, 0x02	; 2
    567e:	af 0e       	add	r10, r31
    5680:	b1 1c       	adc	r11, r1
    5682:	f6 01       	movw	r30, r12
    5684:	60 81       	ld	r22, Z
    5686:	71 81       	ldd	r23, Z+1	; 0x01
    5688:	07 2e       	mov	r0, r23
    568a:	00 0c       	add	r0, r0
    568c:	88 0b       	sbc	r24, r24
    568e:	99 0b       	sbc	r25, r25
    5690:	f9 2d       	mov	r31, r9
    5692:	ff 76       	andi	r31, 0x6F	; 111
    5694:	9f 2e       	mov	r9, r31
    5696:	97 ff       	sbrs	r25, 7
    5698:	09 c0       	rjmp	.+18     	; 0x56ac <vfprintf+0x4f0>
    569a:	90 95       	com	r25
    569c:	80 95       	com	r24
    569e:	70 95       	com	r23
    56a0:	61 95       	neg	r22
    56a2:	7f 4f       	sbci	r23, 0xFF	; 255
    56a4:	8f 4f       	sbci	r24, 0xFF	; 255
    56a6:	9f 4f       	sbci	r25, 0xFF	; 255
    56a8:	f0 68       	ori	r31, 0x80	; 128
    56aa:	9f 2e       	mov	r9, r31
    56ac:	2a e0       	ldi	r18, 0x0A	; 10
    56ae:	30 e0       	ldi	r19, 0x00	; 0
    56b0:	a3 01       	movw	r20, r6
    56b2:	04 d5       	rcall	.+2568   	; 0x60bc <__ultoa_invert>
    56b4:	c8 2e       	mov	r12, r24
    56b6:	c6 18       	sub	r12, r6
    56b8:	3e c0       	rjmp	.+124    	; 0x5736 <vfprintf+0x57a>
    56ba:	09 2d       	mov	r16, r9
    56bc:	85 37       	cpi	r24, 0x75	; 117
    56be:	21 f4       	brne	.+8      	; 0x56c8 <vfprintf+0x50c>
    56c0:	0f 7e       	andi	r16, 0xEF	; 239
    56c2:	2a e0       	ldi	r18, 0x0A	; 10
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	1d c0       	rjmp	.+58     	; 0x5702 <vfprintf+0x546>
    56c8:	09 7f       	andi	r16, 0xF9	; 249
    56ca:	8f 36       	cpi	r24, 0x6F	; 111
    56cc:	91 f0       	breq	.+36     	; 0x56f2 <vfprintf+0x536>
    56ce:	18 f4       	brcc	.+6      	; 0x56d6 <vfprintf+0x51a>
    56d0:	88 35       	cpi	r24, 0x58	; 88
    56d2:	59 f0       	breq	.+22     	; 0x56ea <vfprintf+0x52e>
    56d4:	bc c0       	rjmp	.+376    	; 0x584e <vfprintf+0x692>
    56d6:	80 37       	cpi	r24, 0x70	; 112
    56d8:	19 f0       	breq	.+6      	; 0x56e0 <vfprintf+0x524>
    56da:	88 37       	cpi	r24, 0x78	; 120
    56dc:	11 f0       	breq	.+4      	; 0x56e2 <vfprintf+0x526>
    56de:	b7 c0       	rjmp	.+366    	; 0x584e <vfprintf+0x692>
    56e0:	00 61       	ori	r16, 0x10	; 16
    56e2:	04 ff       	sbrs	r16, 4
    56e4:	09 c0       	rjmp	.+18     	; 0x56f8 <vfprintf+0x53c>
    56e6:	04 60       	ori	r16, 0x04	; 4
    56e8:	07 c0       	rjmp	.+14     	; 0x56f8 <vfprintf+0x53c>
    56ea:	94 fe       	sbrs	r9, 4
    56ec:	08 c0       	rjmp	.+16     	; 0x56fe <vfprintf+0x542>
    56ee:	06 60       	ori	r16, 0x06	; 6
    56f0:	06 c0       	rjmp	.+12     	; 0x56fe <vfprintf+0x542>
    56f2:	28 e0       	ldi	r18, 0x08	; 8
    56f4:	30 e0       	ldi	r19, 0x00	; 0
    56f6:	05 c0       	rjmp	.+10     	; 0x5702 <vfprintf+0x546>
    56f8:	20 e1       	ldi	r18, 0x10	; 16
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	02 c0       	rjmp	.+4      	; 0x5702 <vfprintf+0x546>
    56fe:	20 e1       	ldi	r18, 0x10	; 16
    5700:	32 e0       	ldi	r19, 0x02	; 2
    5702:	56 01       	movw	r10, r12
    5704:	07 ff       	sbrs	r16, 7
    5706:	09 c0       	rjmp	.+18     	; 0x571a <vfprintf+0x55e>
    5708:	84 e0       	ldi	r24, 0x04	; 4
    570a:	a8 0e       	add	r10, r24
    570c:	b1 1c       	adc	r11, r1
    570e:	f6 01       	movw	r30, r12
    5710:	60 81       	ld	r22, Z
    5712:	71 81       	ldd	r23, Z+1	; 0x01
    5714:	82 81       	ldd	r24, Z+2	; 0x02
    5716:	93 81       	ldd	r25, Z+3	; 0x03
    5718:	08 c0       	rjmp	.+16     	; 0x572a <vfprintf+0x56e>
    571a:	f2 e0       	ldi	r31, 0x02	; 2
    571c:	af 0e       	add	r10, r31
    571e:	b1 1c       	adc	r11, r1
    5720:	f6 01       	movw	r30, r12
    5722:	60 81       	ld	r22, Z
    5724:	71 81       	ldd	r23, Z+1	; 0x01
    5726:	80 e0       	ldi	r24, 0x00	; 0
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	a3 01       	movw	r20, r6
    572c:	c7 d4       	rcall	.+2446   	; 0x60bc <__ultoa_invert>
    572e:	c8 2e       	mov	r12, r24
    5730:	c6 18       	sub	r12, r6
    5732:	0f 77       	andi	r16, 0x7F	; 127
    5734:	90 2e       	mov	r9, r16
    5736:	96 fe       	sbrs	r9, 6
    5738:	0b c0       	rjmp	.+22     	; 0x5750 <vfprintf+0x594>
    573a:	09 2d       	mov	r16, r9
    573c:	0e 7f       	andi	r16, 0xFE	; 254
    573e:	c1 16       	cp	r12, r17
    5740:	50 f4       	brcc	.+20     	; 0x5756 <vfprintf+0x59a>
    5742:	94 fe       	sbrs	r9, 4
    5744:	0a c0       	rjmp	.+20     	; 0x575a <vfprintf+0x59e>
    5746:	92 fc       	sbrc	r9, 2
    5748:	08 c0       	rjmp	.+16     	; 0x575a <vfprintf+0x59e>
    574a:	09 2d       	mov	r16, r9
    574c:	0e 7e       	andi	r16, 0xEE	; 238
    574e:	05 c0       	rjmp	.+10     	; 0x575a <vfprintf+0x59e>
    5750:	dc 2c       	mov	r13, r12
    5752:	09 2d       	mov	r16, r9
    5754:	03 c0       	rjmp	.+6      	; 0x575c <vfprintf+0x5a0>
    5756:	dc 2c       	mov	r13, r12
    5758:	01 c0       	rjmp	.+2      	; 0x575c <vfprintf+0x5a0>
    575a:	d1 2e       	mov	r13, r17
    575c:	04 ff       	sbrs	r16, 4
    575e:	0d c0       	rjmp	.+26     	; 0x577a <vfprintf+0x5be>
    5760:	fe 01       	movw	r30, r28
    5762:	ec 0d       	add	r30, r12
    5764:	f1 1d       	adc	r31, r1
    5766:	80 81       	ld	r24, Z
    5768:	80 33       	cpi	r24, 0x30	; 48
    576a:	11 f4       	brne	.+4      	; 0x5770 <vfprintf+0x5b4>
    576c:	09 7e       	andi	r16, 0xE9	; 233
    576e:	09 c0       	rjmp	.+18     	; 0x5782 <vfprintf+0x5c6>
    5770:	02 ff       	sbrs	r16, 2
    5772:	06 c0       	rjmp	.+12     	; 0x5780 <vfprintf+0x5c4>
    5774:	d3 94       	inc	r13
    5776:	d3 94       	inc	r13
    5778:	04 c0       	rjmp	.+8      	; 0x5782 <vfprintf+0x5c6>
    577a:	80 2f       	mov	r24, r16
    577c:	86 78       	andi	r24, 0x86	; 134
    577e:	09 f0       	breq	.+2      	; 0x5782 <vfprintf+0x5c6>
    5780:	d3 94       	inc	r13
    5782:	03 fd       	sbrc	r16, 3
    5784:	10 c0       	rjmp	.+32     	; 0x57a6 <vfprintf+0x5ea>
    5786:	00 ff       	sbrs	r16, 0
    5788:	06 c0       	rjmp	.+12     	; 0x5796 <vfprintf+0x5da>
    578a:	1c 2d       	mov	r17, r12
    578c:	d5 14       	cp	r13, r5
    578e:	78 f4       	brcc	.+30     	; 0x57ae <vfprintf+0x5f2>
    5790:	15 0d       	add	r17, r5
    5792:	1d 19       	sub	r17, r13
    5794:	0c c0       	rjmp	.+24     	; 0x57ae <vfprintf+0x5f2>
    5796:	d5 14       	cp	r13, r5
    5798:	50 f4       	brcc	.+20     	; 0x57ae <vfprintf+0x5f2>
    579a:	b7 01       	movw	r22, r14
    579c:	80 e2       	ldi	r24, 0x20	; 32
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	e0 d3       	rcall	.+1984   	; 0x5f62 <fputc>
    57a2:	d3 94       	inc	r13
    57a4:	f8 cf       	rjmp	.-16     	; 0x5796 <vfprintf+0x5da>
    57a6:	d5 14       	cp	r13, r5
    57a8:	10 f4       	brcc	.+4      	; 0x57ae <vfprintf+0x5f2>
    57aa:	5d 18       	sub	r5, r13
    57ac:	01 c0       	rjmp	.+2      	; 0x57b0 <vfprintf+0x5f4>
    57ae:	51 2c       	mov	r5, r1
    57b0:	04 ff       	sbrs	r16, 4
    57b2:	0f c0       	rjmp	.+30     	; 0x57d2 <vfprintf+0x616>
    57b4:	b7 01       	movw	r22, r14
    57b6:	80 e3       	ldi	r24, 0x30	; 48
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	d3 d3       	rcall	.+1958   	; 0x5f62 <fputc>
    57bc:	02 ff       	sbrs	r16, 2
    57be:	16 c0       	rjmp	.+44     	; 0x57ec <vfprintf+0x630>
    57c0:	01 fd       	sbrc	r16, 1
    57c2:	03 c0       	rjmp	.+6      	; 0x57ca <vfprintf+0x60e>
    57c4:	88 e7       	ldi	r24, 0x78	; 120
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	02 c0       	rjmp	.+4      	; 0x57ce <vfprintf+0x612>
    57ca:	88 e5       	ldi	r24, 0x58	; 88
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	b7 01       	movw	r22, r14
    57d0:	0c c0       	rjmp	.+24     	; 0x57ea <vfprintf+0x62e>
    57d2:	80 2f       	mov	r24, r16
    57d4:	86 78       	andi	r24, 0x86	; 134
    57d6:	51 f0       	breq	.+20     	; 0x57ec <vfprintf+0x630>
    57d8:	01 ff       	sbrs	r16, 1
    57da:	02 c0       	rjmp	.+4      	; 0x57e0 <vfprintf+0x624>
    57dc:	8b e2       	ldi	r24, 0x2B	; 43
    57de:	01 c0       	rjmp	.+2      	; 0x57e2 <vfprintf+0x626>
    57e0:	80 e2       	ldi	r24, 0x20	; 32
    57e2:	07 fd       	sbrc	r16, 7
    57e4:	8d e2       	ldi	r24, 0x2D	; 45
    57e6:	b7 01       	movw	r22, r14
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	bb d3       	rcall	.+1910   	; 0x5f62 <fputc>
    57ec:	c1 16       	cp	r12, r17
    57ee:	30 f4       	brcc	.+12     	; 0x57fc <vfprintf+0x640>
    57f0:	b7 01       	movw	r22, r14
    57f2:	80 e3       	ldi	r24, 0x30	; 48
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	b5 d3       	rcall	.+1898   	; 0x5f62 <fputc>
    57f8:	11 50       	subi	r17, 0x01	; 1
    57fa:	f8 cf       	rjmp	.-16     	; 0x57ec <vfprintf+0x630>
    57fc:	ca 94       	dec	r12
    57fe:	f3 01       	movw	r30, r6
    5800:	ec 0d       	add	r30, r12
    5802:	f1 1d       	adc	r31, r1
    5804:	80 81       	ld	r24, Z
    5806:	b7 01       	movw	r22, r14
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	ab d3       	rcall	.+1878   	; 0x5f62 <fputc>
    580c:	c1 10       	cpse	r12, r1
    580e:	f6 cf       	rjmp	.-20     	; 0x57fc <vfprintf+0x640>
    5810:	15 c0       	rjmp	.+42     	; 0x583c <vfprintf+0x680>
    5812:	f4 e0       	ldi	r31, 0x04	; 4
    5814:	f5 15       	cp	r31, r5
    5816:	50 f5       	brcc	.+84     	; 0x586c <vfprintf+0x6b0>
    5818:	84 e0       	ldi	r24, 0x04	; 4
    581a:	58 1a       	sub	r5, r24
    581c:	93 fe       	sbrs	r9, 3
    581e:	1e c0       	rjmp	.+60     	; 0x585c <vfprintf+0x6a0>
    5820:	01 11       	cpse	r16, r1
    5822:	25 c0       	rjmp	.+74     	; 0x586e <vfprintf+0x6b2>
    5824:	2c 85       	ldd	r18, Y+12	; 0x0c
    5826:	23 ff       	sbrs	r18, 3
    5828:	27 c0       	rjmp	.+78     	; 0x5878 <vfprintf+0x6bc>
    582a:	0a e9       	ldi	r16, 0x9A	; 154
    582c:	11 e0       	ldi	r17, 0x01	; 1
    582e:	39 2d       	mov	r19, r9
    5830:	30 71       	andi	r19, 0x10	; 16
    5832:	93 2e       	mov	r9, r19
    5834:	f8 01       	movw	r30, r16
    5836:	84 91       	lpm	r24, Z
    5838:	81 11       	cpse	r24, r1
    583a:	21 c0       	rjmp	.+66     	; 0x587e <vfprintf+0x6c2>
    583c:	55 20       	and	r5, r5
    583e:	09 f4       	brne	.+2      	; 0x5842 <vfprintf+0x686>
    5840:	fc cc       	rjmp	.-1544   	; 0x523a <vfprintf+0x7e>
    5842:	b7 01       	movw	r22, r14
    5844:	80 e2       	ldi	r24, 0x20	; 32
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	8c d3       	rcall	.+1816   	; 0x5f62 <fputc>
    584a:	5a 94       	dec	r5
    584c:	f7 cf       	rjmp	.-18     	; 0x583c <vfprintf+0x680>
    584e:	f7 01       	movw	r30, r14
    5850:	86 81       	ldd	r24, Z+6	; 0x06
    5852:	97 81       	ldd	r25, Z+7	; 0x07
    5854:	23 c0       	rjmp	.+70     	; 0x589c <vfprintf+0x6e0>
    5856:	8f ef       	ldi	r24, 0xFF	; 255
    5858:	9f ef       	ldi	r25, 0xFF	; 255
    585a:	20 c0       	rjmp	.+64     	; 0x589c <vfprintf+0x6e0>
    585c:	b7 01       	movw	r22, r14
    585e:	80 e2       	ldi	r24, 0x20	; 32
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	7f d3       	rcall	.+1790   	; 0x5f62 <fputc>
    5864:	5a 94       	dec	r5
    5866:	51 10       	cpse	r5, r1
    5868:	f9 cf       	rjmp	.-14     	; 0x585c <vfprintf+0x6a0>
    586a:	da cf       	rjmp	.-76     	; 0x5820 <vfprintf+0x664>
    586c:	51 2c       	mov	r5, r1
    586e:	b7 01       	movw	r22, r14
    5870:	80 2f       	mov	r24, r16
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	76 d3       	rcall	.+1772   	; 0x5f62 <fputc>
    5876:	d6 cf       	rjmp	.-84     	; 0x5824 <vfprintf+0x668>
    5878:	0e e9       	ldi	r16, 0x9E	; 158
    587a:	11 e0       	ldi	r17, 0x01	; 1
    587c:	d8 cf       	rjmp	.-80     	; 0x582e <vfprintf+0x672>
    587e:	91 10       	cpse	r9, r1
    5880:	80 52       	subi	r24, 0x20	; 32
    5882:	b7 01       	movw	r22, r14
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	6d d3       	rcall	.+1754   	; 0x5f62 <fputc>
    5888:	0f 5f       	subi	r16, 0xFF	; 255
    588a:	1f 4f       	sbci	r17, 0xFF	; 255
    588c:	d3 cf       	rjmp	.-90     	; 0x5834 <vfprintf+0x678>
    588e:	23 e0       	ldi	r18, 0x03	; 3
    5890:	25 15       	cp	r18, r5
    5892:	10 f4       	brcc	.+4      	; 0x5898 <vfprintf+0x6dc>
    5894:	83 e0       	ldi	r24, 0x03	; 3
    5896:	c1 cf       	rjmp	.-126    	; 0x581a <vfprintf+0x65e>
    5898:	51 2c       	mov	r5, r1
    589a:	c4 cf       	rjmp	.-120    	; 0x5824 <vfprintf+0x668>
    589c:	60 96       	adiw	r28, 0x10	; 16
    589e:	0f b6       	in	r0, 0x3f	; 63
    58a0:	f8 94       	cli
    58a2:	de bf       	out	0x3e, r29	; 62
    58a4:	0f be       	out	0x3f, r0	; 63
    58a6:	cd bf       	out	0x3d, r28	; 61
    58a8:	df 91       	pop	r29
    58aa:	cf 91       	pop	r28
    58ac:	1f 91       	pop	r17
    58ae:	0f 91       	pop	r16
    58b0:	ff 90       	pop	r15
    58b2:	ef 90       	pop	r14
    58b4:	df 90       	pop	r13
    58b6:	cf 90       	pop	r12
    58b8:	bf 90       	pop	r11
    58ba:	af 90       	pop	r10
    58bc:	9f 90       	pop	r9
    58be:	8f 90       	pop	r8
    58c0:	7f 90       	pop	r7
    58c2:	6f 90       	pop	r6
    58c4:	5f 90       	pop	r5
    58c6:	4f 90       	pop	r4
    58c8:	3f 90       	pop	r3
    58ca:	2f 90       	pop	r2
    58cc:	08 95       	ret

000058ce <__divsf3>:
    58ce:	12 d0       	rcall	.+36     	; 0x58f4 <__divsf3x>
    58d0:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__fp_round>
    58d4:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__fp_pscB>
    58d8:	58 f0       	brcs	.+22     	; 0x58f0 <__divsf3+0x22>
    58da:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <__fp_pscA>
    58de:	40 f0       	brcs	.+16     	; 0x58f0 <__divsf3+0x22>
    58e0:	29 f4       	brne	.+10     	; 0x58ec <__divsf3+0x1e>
    58e2:	5f 3f       	cpi	r21, 0xFF	; 255
    58e4:	29 f0       	breq	.+10     	; 0x58f0 <__divsf3+0x22>
    58e6:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__fp_inf>
    58ea:	51 11       	cpse	r21, r1
    58ec:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__fp_szero>
    58f0:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__fp_nan>

000058f4 <__divsf3x>:
    58f4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__fp_split3>
    58f8:	68 f3       	brcs	.-38     	; 0x58d4 <__divsf3+0x6>

000058fa <__divsf3_pse>:
    58fa:	99 23       	and	r25, r25
    58fc:	b1 f3       	breq	.-20     	; 0x58ea <__divsf3+0x1c>
    58fe:	55 23       	and	r21, r21
    5900:	91 f3       	breq	.-28     	; 0x58e6 <__divsf3+0x18>
    5902:	95 1b       	sub	r25, r21
    5904:	55 0b       	sbc	r21, r21
    5906:	bb 27       	eor	r27, r27
    5908:	aa 27       	eor	r26, r26
    590a:	62 17       	cp	r22, r18
    590c:	73 07       	cpc	r23, r19
    590e:	84 07       	cpc	r24, r20
    5910:	38 f0       	brcs	.+14     	; 0x5920 <__divsf3_pse+0x26>
    5912:	9f 5f       	subi	r25, 0xFF	; 255
    5914:	5f 4f       	sbci	r21, 0xFF	; 255
    5916:	22 0f       	add	r18, r18
    5918:	33 1f       	adc	r19, r19
    591a:	44 1f       	adc	r20, r20
    591c:	aa 1f       	adc	r26, r26
    591e:	a9 f3       	breq	.-22     	; 0x590a <__divsf3_pse+0x10>
    5920:	35 d0       	rcall	.+106    	; 0x598c <__divsf3_pse+0x92>
    5922:	0e 2e       	mov	r0, r30
    5924:	3a f0       	brmi	.+14     	; 0x5934 <__divsf3_pse+0x3a>
    5926:	e0 e8       	ldi	r30, 0x80	; 128
    5928:	32 d0       	rcall	.+100    	; 0x598e <__divsf3_pse+0x94>
    592a:	91 50       	subi	r25, 0x01	; 1
    592c:	50 40       	sbci	r21, 0x00	; 0
    592e:	e6 95       	lsr	r30
    5930:	00 1c       	adc	r0, r0
    5932:	ca f7       	brpl	.-14     	; 0x5926 <__divsf3_pse+0x2c>
    5934:	2b d0       	rcall	.+86     	; 0x598c <__divsf3_pse+0x92>
    5936:	fe 2f       	mov	r31, r30
    5938:	29 d0       	rcall	.+82     	; 0x598c <__divsf3_pse+0x92>
    593a:	66 0f       	add	r22, r22
    593c:	77 1f       	adc	r23, r23
    593e:	88 1f       	adc	r24, r24
    5940:	bb 1f       	adc	r27, r27
    5942:	26 17       	cp	r18, r22
    5944:	37 07       	cpc	r19, r23
    5946:	48 07       	cpc	r20, r24
    5948:	ab 07       	cpc	r26, r27
    594a:	b0 e8       	ldi	r27, 0x80	; 128
    594c:	09 f0       	breq	.+2      	; 0x5950 <__divsf3_pse+0x56>
    594e:	bb 0b       	sbc	r27, r27
    5950:	80 2d       	mov	r24, r0
    5952:	bf 01       	movw	r22, r30
    5954:	ff 27       	eor	r31, r31
    5956:	93 58       	subi	r25, 0x83	; 131
    5958:	5f 4f       	sbci	r21, 0xFF	; 255
    595a:	3a f0       	brmi	.+14     	; 0x596a <__divsf3_pse+0x70>
    595c:	9e 3f       	cpi	r25, 0xFE	; 254
    595e:	51 05       	cpc	r21, r1
    5960:	78 f0       	brcs	.+30     	; 0x5980 <__divsf3_pse+0x86>
    5962:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__fp_inf>
    5966:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__fp_szero>
    596a:	5f 3f       	cpi	r21, 0xFF	; 255
    596c:	e4 f3       	brlt	.-8      	; 0x5966 <__divsf3_pse+0x6c>
    596e:	98 3e       	cpi	r25, 0xE8	; 232
    5970:	d4 f3       	brlt	.-12     	; 0x5966 <__divsf3_pse+0x6c>
    5972:	86 95       	lsr	r24
    5974:	77 95       	ror	r23
    5976:	67 95       	ror	r22
    5978:	b7 95       	ror	r27
    597a:	f7 95       	ror	r31
    597c:	9f 5f       	subi	r25, 0xFF	; 255
    597e:	c9 f7       	brne	.-14     	; 0x5972 <__divsf3_pse+0x78>
    5980:	88 0f       	add	r24, r24
    5982:	91 1d       	adc	r25, r1
    5984:	96 95       	lsr	r25
    5986:	87 95       	ror	r24
    5988:	97 f9       	bld	r25, 7
    598a:	08 95       	ret
    598c:	e1 e0       	ldi	r30, 0x01	; 1
    598e:	66 0f       	add	r22, r22
    5990:	77 1f       	adc	r23, r23
    5992:	88 1f       	adc	r24, r24
    5994:	bb 1f       	adc	r27, r27
    5996:	62 17       	cp	r22, r18
    5998:	73 07       	cpc	r23, r19
    599a:	84 07       	cpc	r24, r20
    599c:	ba 07       	cpc	r27, r26
    599e:	20 f0       	brcs	.+8      	; 0x59a8 <__divsf3_pse+0xae>
    59a0:	62 1b       	sub	r22, r18
    59a2:	73 0b       	sbc	r23, r19
    59a4:	84 0b       	sbc	r24, r20
    59a6:	ba 0b       	sbc	r27, r26
    59a8:	ee 1f       	adc	r30, r30
    59aa:	88 f7       	brcc	.-30     	; 0x598e <__divsf3_pse+0x94>
    59ac:	e0 95       	com	r30
    59ae:	08 95       	ret

000059b0 <__floatunsisf>:
    59b0:	e8 94       	clt
    59b2:	09 c0       	rjmp	.+18     	; 0x59c6 <__floatsisf+0x12>

000059b4 <__floatsisf>:
    59b4:	97 fb       	bst	r25, 7
    59b6:	3e f4       	brtc	.+14     	; 0x59c6 <__floatsisf+0x12>
    59b8:	90 95       	com	r25
    59ba:	80 95       	com	r24
    59bc:	70 95       	com	r23
    59be:	61 95       	neg	r22
    59c0:	7f 4f       	sbci	r23, 0xFF	; 255
    59c2:	8f 4f       	sbci	r24, 0xFF	; 255
    59c4:	9f 4f       	sbci	r25, 0xFF	; 255
    59c6:	99 23       	and	r25, r25
    59c8:	a9 f0       	breq	.+42     	; 0x59f4 <__floatsisf+0x40>
    59ca:	f9 2f       	mov	r31, r25
    59cc:	96 e9       	ldi	r25, 0x96	; 150
    59ce:	bb 27       	eor	r27, r27
    59d0:	93 95       	inc	r25
    59d2:	f6 95       	lsr	r31
    59d4:	87 95       	ror	r24
    59d6:	77 95       	ror	r23
    59d8:	67 95       	ror	r22
    59da:	b7 95       	ror	r27
    59dc:	f1 11       	cpse	r31, r1
    59de:	f8 cf       	rjmp	.-16     	; 0x59d0 <__floatsisf+0x1c>
    59e0:	fa f4       	brpl	.+62     	; 0x5a20 <__floatsisf+0x6c>
    59e2:	bb 0f       	add	r27, r27
    59e4:	11 f4       	brne	.+4      	; 0x59ea <__floatsisf+0x36>
    59e6:	60 ff       	sbrs	r22, 0
    59e8:	1b c0       	rjmp	.+54     	; 0x5a20 <__floatsisf+0x6c>
    59ea:	6f 5f       	subi	r22, 0xFF	; 255
    59ec:	7f 4f       	sbci	r23, 0xFF	; 255
    59ee:	8f 4f       	sbci	r24, 0xFF	; 255
    59f0:	9f 4f       	sbci	r25, 0xFF	; 255
    59f2:	16 c0       	rjmp	.+44     	; 0x5a20 <__floatsisf+0x6c>
    59f4:	88 23       	and	r24, r24
    59f6:	11 f0       	breq	.+4      	; 0x59fc <__floatsisf+0x48>
    59f8:	96 e9       	ldi	r25, 0x96	; 150
    59fa:	11 c0       	rjmp	.+34     	; 0x5a1e <__floatsisf+0x6a>
    59fc:	77 23       	and	r23, r23
    59fe:	21 f0       	breq	.+8      	; 0x5a08 <__floatsisf+0x54>
    5a00:	9e e8       	ldi	r25, 0x8E	; 142
    5a02:	87 2f       	mov	r24, r23
    5a04:	76 2f       	mov	r23, r22
    5a06:	05 c0       	rjmp	.+10     	; 0x5a12 <__floatsisf+0x5e>
    5a08:	66 23       	and	r22, r22
    5a0a:	71 f0       	breq	.+28     	; 0x5a28 <__floatsisf+0x74>
    5a0c:	96 e8       	ldi	r25, 0x86	; 134
    5a0e:	86 2f       	mov	r24, r22
    5a10:	70 e0       	ldi	r23, 0x00	; 0
    5a12:	60 e0       	ldi	r22, 0x00	; 0
    5a14:	2a f0       	brmi	.+10     	; 0x5a20 <__floatsisf+0x6c>
    5a16:	9a 95       	dec	r25
    5a18:	66 0f       	add	r22, r22
    5a1a:	77 1f       	adc	r23, r23
    5a1c:	88 1f       	adc	r24, r24
    5a1e:	da f7       	brpl	.-10     	; 0x5a16 <__floatsisf+0x62>
    5a20:	88 0f       	add	r24, r24
    5a22:	96 95       	lsr	r25
    5a24:	87 95       	ror	r24
    5a26:	97 f9       	bld	r25, 7
    5a28:	08 95       	ret

00005a2a <__udivmodsi4>:
    5a2a:	a1 e2       	ldi	r26, 0x21	; 33
    5a2c:	1a 2e       	mov	r1, r26
    5a2e:	aa 1b       	sub	r26, r26
    5a30:	bb 1b       	sub	r27, r27
    5a32:	fd 01       	movw	r30, r26
    5a34:	0d c0       	rjmp	.+26     	; 0x5a50 <__udivmodsi4_ep>

00005a36 <__udivmodsi4_loop>:
    5a36:	aa 1f       	adc	r26, r26
    5a38:	bb 1f       	adc	r27, r27
    5a3a:	ee 1f       	adc	r30, r30
    5a3c:	ff 1f       	adc	r31, r31
    5a3e:	a2 17       	cp	r26, r18
    5a40:	b3 07       	cpc	r27, r19
    5a42:	e4 07       	cpc	r30, r20
    5a44:	f5 07       	cpc	r31, r21
    5a46:	20 f0       	brcs	.+8      	; 0x5a50 <__udivmodsi4_ep>
    5a48:	a2 1b       	sub	r26, r18
    5a4a:	b3 0b       	sbc	r27, r19
    5a4c:	e4 0b       	sbc	r30, r20
    5a4e:	f5 0b       	sbc	r31, r21

00005a50 <__udivmodsi4_ep>:
    5a50:	66 1f       	adc	r22, r22
    5a52:	77 1f       	adc	r23, r23
    5a54:	88 1f       	adc	r24, r24
    5a56:	99 1f       	adc	r25, r25
    5a58:	1a 94       	dec	r1
    5a5a:	69 f7       	brne	.-38     	; 0x5a36 <__udivmodsi4_loop>
    5a5c:	60 95       	com	r22
    5a5e:	70 95       	com	r23
    5a60:	80 95       	com	r24
    5a62:	90 95       	com	r25
    5a64:	9b 01       	movw	r18, r22
    5a66:	ac 01       	movw	r20, r24
    5a68:	bd 01       	movw	r22, r26
    5a6a:	cf 01       	movw	r24, r30
    5a6c:	08 95       	ret

00005a6e <__tablejump2__>:
    5a6e:	ee 0f       	add	r30, r30
    5a70:	ff 1f       	adc	r31, r31
    5a72:	88 1f       	adc	r24, r24
    5a74:	8b bf       	out	0x3b, r24	; 59
    5a76:	07 90       	elpm	r0, Z+
    5a78:	f6 91       	elpm	r31, Z
    5a7a:	e0 2d       	mov	r30, r0
    5a7c:	19 94       	eijmp

00005a7e <malloc>:
    5a7e:	0f 93       	push	r16
    5a80:	1f 93       	push	r17
    5a82:	cf 93       	push	r28
    5a84:	df 93       	push	r29
    5a86:	82 30       	cpi	r24, 0x02	; 2
    5a88:	91 05       	cpc	r25, r1
    5a8a:	10 f4       	brcc	.+4      	; 0x5a90 <malloc+0x12>
    5a8c:	82 e0       	ldi	r24, 0x02	; 2
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	e0 91 97 12 	lds	r30, 0x1297	; 0x801297 <__flp>
    5a94:	f0 91 98 12 	lds	r31, 0x1298	; 0x801298 <__flp+0x1>
    5a98:	20 e0       	ldi	r18, 0x00	; 0
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	a0 e0       	ldi	r26, 0x00	; 0
    5a9e:	b0 e0       	ldi	r27, 0x00	; 0
    5aa0:	30 97       	sbiw	r30, 0x00	; 0
    5aa2:	19 f1       	breq	.+70     	; 0x5aea <malloc+0x6c>
    5aa4:	40 81       	ld	r20, Z
    5aa6:	51 81       	ldd	r21, Z+1	; 0x01
    5aa8:	02 81       	ldd	r16, Z+2	; 0x02
    5aaa:	13 81       	ldd	r17, Z+3	; 0x03
    5aac:	48 17       	cp	r20, r24
    5aae:	59 07       	cpc	r21, r25
    5ab0:	c8 f0       	brcs	.+50     	; 0x5ae4 <malloc+0x66>
    5ab2:	84 17       	cp	r24, r20
    5ab4:	95 07       	cpc	r25, r21
    5ab6:	69 f4       	brne	.+26     	; 0x5ad2 <malloc+0x54>
    5ab8:	10 97       	sbiw	r26, 0x00	; 0
    5aba:	31 f0       	breq	.+12     	; 0x5ac8 <malloc+0x4a>
    5abc:	12 96       	adiw	r26, 0x02	; 2
    5abe:	0c 93       	st	X, r16
    5ac0:	12 97       	sbiw	r26, 0x02	; 2
    5ac2:	13 96       	adiw	r26, 0x03	; 3
    5ac4:	1c 93       	st	X, r17
    5ac6:	27 c0       	rjmp	.+78     	; 0x5b16 <malloc+0x98>
    5ac8:	00 93 97 12 	sts	0x1297, r16	; 0x801297 <__flp>
    5acc:	10 93 98 12 	sts	0x1298, r17	; 0x801298 <__flp+0x1>
    5ad0:	22 c0       	rjmp	.+68     	; 0x5b16 <malloc+0x98>
    5ad2:	21 15       	cp	r18, r1
    5ad4:	31 05       	cpc	r19, r1
    5ad6:	19 f0       	breq	.+6      	; 0x5ade <malloc+0x60>
    5ad8:	42 17       	cp	r20, r18
    5ada:	53 07       	cpc	r21, r19
    5adc:	18 f4       	brcc	.+6      	; 0x5ae4 <malloc+0x66>
    5ade:	9a 01       	movw	r18, r20
    5ae0:	bd 01       	movw	r22, r26
    5ae2:	ef 01       	movw	r28, r30
    5ae4:	df 01       	movw	r26, r30
    5ae6:	f8 01       	movw	r30, r16
    5ae8:	db cf       	rjmp	.-74     	; 0x5aa0 <malloc+0x22>
    5aea:	21 15       	cp	r18, r1
    5aec:	31 05       	cpc	r19, r1
    5aee:	f9 f0       	breq	.+62     	; 0x5b2e <malloc+0xb0>
    5af0:	28 1b       	sub	r18, r24
    5af2:	39 0b       	sbc	r19, r25
    5af4:	24 30       	cpi	r18, 0x04	; 4
    5af6:	31 05       	cpc	r19, r1
    5af8:	80 f4       	brcc	.+32     	; 0x5b1a <malloc+0x9c>
    5afa:	8a 81       	ldd	r24, Y+2	; 0x02
    5afc:	9b 81       	ldd	r25, Y+3	; 0x03
    5afe:	61 15       	cp	r22, r1
    5b00:	71 05       	cpc	r23, r1
    5b02:	21 f0       	breq	.+8      	; 0x5b0c <malloc+0x8e>
    5b04:	fb 01       	movw	r30, r22
    5b06:	93 83       	std	Z+3, r25	; 0x03
    5b08:	82 83       	std	Z+2, r24	; 0x02
    5b0a:	04 c0       	rjmp	.+8      	; 0x5b14 <malloc+0x96>
    5b0c:	90 93 98 12 	sts	0x1298, r25	; 0x801298 <__flp+0x1>
    5b10:	80 93 97 12 	sts	0x1297, r24	; 0x801297 <__flp>
    5b14:	fe 01       	movw	r30, r28
    5b16:	32 96       	adiw	r30, 0x02	; 2
    5b18:	44 c0       	rjmp	.+136    	; 0x5ba2 <malloc+0x124>
    5b1a:	fe 01       	movw	r30, r28
    5b1c:	e2 0f       	add	r30, r18
    5b1e:	f3 1f       	adc	r31, r19
    5b20:	81 93       	st	Z+, r24
    5b22:	91 93       	st	Z+, r25
    5b24:	22 50       	subi	r18, 0x02	; 2
    5b26:	31 09       	sbc	r19, r1
    5b28:	39 83       	std	Y+1, r19	; 0x01
    5b2a:	28 83       	st	Y, r18
    5b2c:	3a c0       	rjmp	.+116    	; 0x5ba2 <malloc+0x124>
    5b2e:	20 91 95 12 	lds	r18, 0x1295	; 0x801295 <__brkval>
    5b32:	30 91 96 12 	lds	r19, 0x1296	; 0x801296 <__brkval+0x1>
    5b36:	23 2b       	or	r18, r19
    5b38:	41 f4       	brne	.+16     	; 0x5b4a <malloc+0xcc>
    5b3a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5b3e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5b42:	30 93 96 12 	sts	0x1296, r19	; 0x801296 <__brkval+0x1>
    5b46:	20 93 95 12 	sts	0x1295, r18	; 0x801295 <__brkval>
    5b4a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5b4e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5b52:	21 15       	cp	r18, r1
    5b54:	31 05       	cpc	r19, r1
    5b56:	41 f4       	brne	.+16     	; 0x5b68 <malloc+0xea>
    5b58:	2d b7       	in	r18, 0x3d	; 61
    5b5a:	3e b7       	in	r19, 0x3e	; 62
    5b5c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5b60:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5b64:	24 1b       	sub	r18, r20
    5b66:	35 0b       	sbc	r19, r21
    5b68:	e0 91 95 12 	lds	r30, 0x1295	; 0x801295 <__brkval>
    5b6c:	f0 91 96 12 	lds	r31, 0x1296	; 0x801296 <__brkval+0x1>
    5b70:	e2 17       	cp	r30, r18
    5b72:	f3 07       	cpc	r31, r19
    5b74:	a0 f4       	brcc	.+40     	; 0x5b9e <malloc+0x120>
    5b76:	2e 1b       	sub	r18, r30
    5b78:	3f 0b       	sbc	r19, r31
    5b7a:	28 17       	cp	r18, r24
    5b7c:	39 07       	cpc	r19, r25
    5b7e:	78 f0       	brcs	.+30     	; 0x5b9e <malloc+0x120>
    5b80:	ac 01       	movw	r20, r24
    5b82:	4e 5f       	subi	r20, 0xFE	; 254
    5b84:	5f 4f       	sbci	r21, 0xFF	; 255
    5b86:	24 17       	cp	r18, r20
    5b88:	35 07       	cpc	r19, r21
    5b8a:	48 f0       	brcs	.+18     	; 0x5b9e <malloc+0x120>
    5b8c:	4e 0f       	add	r20, r30
    5b8e:	5f 1f       	adc	r21, r31
    5b90:	50 93 96 12 	sts	0x1296, r21	; 0x801296 <__brkval+0x1>
    5b94:	40 93 95 12 	sts	0x1295, r20	; 0x801295 <__brkval>
    5b98:	81 93       	st	Z+, r24
    5b9a:	91 93       	st	Z+, r25
    5b9c:	02 c0       	rjmp	.+4      	; 0x5ba2 <malloc+0x124>
    5b9e:	e0 e0       	ldi	r30, 0x00	; 0
    5ba0:	f0 e0       	ldi	r31, 0x00	; 0
    5ba2:	cf 01       	movw	r24, r30
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	08 95       	ret

00005bae <free>:
    5bae:	cf 93       	push	r28
    5bb0:	df 93       	push	r29
    5bb2:	00 97       	sbiw	r24, 0x00	; 0
    5bb4:	09 f4       	brne	.+2      	; 0x5bb8 <free+0xa>
    5bb6:	81 c0       	rjmp	.+258    	; 0x5cba <free+0x10c>
    5bb8:	fc 01       	movw	r30, r24
    5bba:	32 97       	sbiw	r30, 0x02	; 2
    5bbc:	13 82       	std	Z+3, r1	; 0x03
    5bbe:	12 82       	std	Z+2, r1	; 0x02
    5bc0:	a0 91 97 12 	lds	r26, 0x1297	; 0x801297 <__flp>
    5bc4:	b0 91 98 12 	lds	r27, 0x1298	; 0x801298 <__flp+0x1>
    5bc8:	10 97       	sbiw	r26, 0x00	; 0
    5bca:	81 f4       	brne	.+32     	; 0x5bec <free+0x3e>
    5bcc:	20 81       	ld	r18, Z
    5bce:	31 81       	ldd	r19, Z+1	; 0x01
    5bd0:	82 0f       	add	r24, r18
    5bd2:	93 1f       	adc	r25, r19
    5bd4:	20 91 95 12 	lds	r18, 0x1295	; 0x801295 <__brkval>
    5bd8:	30 91 96 12 	lds	r19, 0x1296	; 0x801296 <__brkval+0x1>
    5bdc:	28 17       	cp	r18, r24
    5bde:	39 07       	cpc	r19, r25
    5be0:	51 f5       	brne	.+84     	; 0x5c36 <free+0x88>
    5be2:	f0 93 96 12 	sts	0x1296, r31	; 0x801296 <__brkval+0x1>
    5be6:	e0 93 95 12 	sts	0x1295, r30	; 0x801295 <__brkval>
    5bea:	67 c0       	rjmp	.+206    	; 0x5cba <free+0x10c>
    5bec:	ed 01       	movw	r28, r26
    5bee:	20 e0       	ldi	r18, 0x00	; 0
    5bf0:	30 e0       	ldi	r19, 0x00	; 0
    5bf2:	ce 17       	cp	r28, r30
    5bf4:	df 07       	cpc	r29, r31
    5bf6:	40 f4       	brcc	.+16     	; 0x5c08 <free+0x5a>
    5bf8:	4a 81       	ldd	r20, Y+2	; 0x02
    5bfa:	5b 81       	ldd	r21, Y+3	; 0x03
    5bfc:	9e 01       	movw	r18, r28
    5bfe:	41 15       	cp	r20, r1
    5c00:	51 05       	cpc	r21, r1
    5c02:	f1 f0       	breq	.+60     	; 0x5c40 <free+0x92>
    5c04:	ea 01       	movw	r28, r20
    5c06:	f5 cf       	rjmp	.-22     	; 0x5bf2 <free+0x44>
    5c08:	d3 83       	std	Z+3, r29	; 0x03
    5c0a:	c2 83       	std	Z+2, r28	; 0x02
    5c0c:	40 81       	ld	r20, Z
    5c0e:	51 81       	ldd	r21, Z+1	; 0x01
    5c10:	84 0f       	add	r24, r20
    5c12:	95 1f       	adc	r25, r21
    5c14:	c8 17       	cp	r28, r24
    5c16:	d9 07       	cpc	r29, r25
    5c18:	59 f4       	brne	.+22     	; 0x5c30 <free+0x82>
    5c1a:	88 81       	ld	r24, Y
    5c1c:	99 81       	ldd	r25, Y+1	; 0x01
    5c1e:	84 0f       	add	r24, r20
    5c20:	95 1f       	adc	r25, r21
    5c22:	02 96       	adiw	r24, 0x02	; 2
    5c24:	91 83       	std	Z+1, r25	; 0x01
    5c26:	80 83       	st	Z, r24
    5c28:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    5c2c:	93 83       	std	Z+3, r25	; 0x03
    5c2e:	82 83       	std	Z+2, r24	; 0x02
    5c30:	21 15       	cp	r18, r1
    5c32:	31 05       	cpc	r19, r1
    5c34:	29 f4       	brne	.+10     	; 0x5c40 <free+0x92>
    5c36:	f0 93 98 12 	sts	0x1298, r31	; 0x801298 <__flp+0x1>
    5c3a:	e0 93 97 12 	sts	0x1297, r30	; 0x801297 <__flp>
    5c3e:	3d c0       	rjmp	.+122    	; 0x5cba <free+0x10c>
    5c40:	e9 01       	movw	r28, r18
    5c42:	fb 83       	std	Y+3, r31	; 0x03
    5c44:	ea 83       	std	Y+2, r30	; 0x02
    5c46:	49 91       	ld	r20, Y+
    5c48:	59 91       	ld	r21, Y+
    5c4a:	c4 0f       	add	r28, r20
    5c4c:	d5 1f       	adc	r29, r21
    5c4e:	ec 17       	cp	r30, r28
    5c50:	fd 07       	cpc	r31, r29
    5c52:	61 f4       	brne	.+24     	; 0x5c6c <free+0xbe>
    5c54:	80 81       	ld	r24, Z
    5c56:	91 81       	ldd	r25, Z+1	; 0x01
    5c58:	84 0f       	add	r24, r20
    5c5a:	95 1f       	adc	r25, r21
    5c5c:	02 96       	adiw	r24, 0x02	; 2
    5c5e:	e9 01       	movw	r28, r18
    5c60:	99 83       	std	Y+1, r25	; 0x01
    5c62:	88 83       	st	Y, r24
    5c64:	82 81       	ldd	r24, Z+2	; 0x02
    5c66:	93 81       	ldd	r25, Z+3	; 0x03
    5c68:	9b 83       	std	Y+3, r25	; 0x03
    5c6a:	8a 83       	std	Y+2, r24	; 0x02
    5c6c:	e0 e0       	ldi	r30, 0x00	; 0
    5c6e:	f0 e0       	ldi	r31, 0x00	; 0
    5c70:	12 96       	adiw	r26, 0x02	; 2
    5c72:	8d 91       	ld	r24, X+
    5c74:	9c 91       	ld	r25, X
    5c76:	13 97       	sbiw	r26, 0x03	; 3
    5c78:	00 97       	sbiw	r24, 0x00	; 0
    5c7a:	19 f0       	breq	.+6      	; 0x5c82 <free+0xd4>
    5c7c:	fd 01       	movw	r30, r26
    5c7e:	dc 01       	movw	r26, r24
    5c80:	f7 cf       	rjmp	.-18     	; 0x5c70 <free+0xc2>
    5c82:	8d 91       	ld	r24, X+
    5c84:	9c 91       	ld	r25, X
    5c86:	11 97       	sbiw	r26, 0x01	; 1
    5c88:	9d 01       	movw	r18, r26
    5c8a:	2e 5f       	subi	r18, 0xFE	; 254
    5c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c8e:	82 0f       	add	r24, r18
    5c90:	93 1f       	adc	r25, r19
    5c92:	20 91 95 12 	lds	r18, 0x1295	; 0x801295 <__brkval>
    5c96:	30 91 96 12 	lds	r19, 0x1296	; 0x801296 <__brkval+0x1>
    5c9a:	28 17       	cp	r18, r24
    5c9c:	39 07       	cpc	r19, r25
    5c9e:	69 f4       	brne	.+26     	; 0x5cba <free+0x10c>
    5ca0:	30 97       	sbiw	r30, 0x00	; 0
    5ca2:	29 f4       	brne	.+10     	; 0x5cae <free+0x100>
    5ca4:	10 92 98 12 	sts	0x1298, r1	; 0x801298 <__flp+0x1>
    5ca8:	10 92 97 12 	sts	0x1297, r1	; 0x801297 <__flp>
    5cac:	02 c0       	rjmp	.+4      	; 0x5cb2 <free+0x104>
    5cae:	13 82       	std	Z+3, r1	; 0x03
    5cb0:	12 82       	std	Z+2, r1	; 0x02
    5cb2:	b0 93 96 12 	sts	0x1296, r27	; 0x801296 <__brkval+0x1>
    5cb6:	a0 93 95 12 	sts	0x1295, r26	; 0x801295 <__brkval>
    5cba:	df 91       	pop	r29
    5cbc:	cf 91       	pop	r28
    5cbe:	08 95       	ret

00005cc0 <abort>:
    5cc0:	81 e0       	ldi	r24, 0x01	; 1
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	f8 94       	cli
    5cc6:	58 c2       	rjmp	.+1200   	; 0x6178 <_exit>

00005cc8 <__ftoa_engine>:
    5cc8:	28 30       	cpi	r18, 0x08	; 8
    5cca:	08 f0       	brcs	.+2      	; 0x5cce <__ftoa_engine+0x6>
    5ccc:	27 e0       	ldi	r18, 0x07	; 7
    5cce:	33 27       	eor	r19, r19
    5cd0:	da 01       	movw	r26, r20
    5cd2:	99 0f       	add	r25, r25
    5cd4:	31 1d       	adc	r19, r1
    5cd6:	87 fd       	sbrc	r24, 7
    5cd8:	91 60       	ori	r25, 0x01	; 1
    5cda:	00 96       	adiw	r24, 0x00	; 0
    5cdc:	61 05       	cpc	r22, r1
    5cde:	71 05       	cpc	r23, r1
    5ce0:	39 f4       	brne	.+14     	; 0x5cf0 <__ftoa_engine+0x28>
    5ce2:	32 60       	ori	r19, 0x02	; 2
    5ce4:	2e 5f       	subi	r18, 0xFE	; 254
    5ce6:	3d 93       	st	X+, r19
    5ce8:	30 e3       	ldi	r19, 0x30	; 48
    5cea:	2a 95       	dec	r18
    5cec:	e1 f7       	brne	.-8      	; 0x5ce6 <__ftoa_engine+0x1e>
    5cee:	08 95       	ret
    5cf0:	9f 3f       	cpi	r25, 0xFF	; 255
    5cf2:	30 f0       	brcs	.+12     	; 0x5d00 <__ftoa_engine+0x38>
    5cf4:	80 38       	cpi	r24, 0x80	; 128
    5cf6:	71 05       	cpc	r23, r1
    5cf8:	61 05       	cpc	r22, r1
    5cfa:	09 f0       	breq	.+2      	; 0x5cfe <__ftoa_engine+0x36>
    5cfc:	3c 5f       	subi	r19, 0xFC	; 252
    5cfe:	3c 5f       	subi	r19, 0xFC	; 252
    5d00:	3d 93       	st	X+, r19
    5d02:	91 30       	cpi	r25, 0x01	; 1
    5d04:	08 f0       	brcs	.+2      	; 0x5d08 <__ftoa_engine+0x40>
    5d06:	80 68       	ori	r24, 0x80	; 128
    5d08:	91 1d       	adc	r25, r1
    5d0a:	df 93       	push	r29
    5d0c:	cf 93       	push	r28
    5d0e:	1f 93       	push	r17
    5d10:	0f 93       	push	r16
    5d12:	ff 92       	push	r15
    5d14:	ef 92       	push	r14
    5d16:	19 2f       	mov	r17, r25
    5d18:	98 7f       	andi	r25, 0xF8	; 248
    5d1a:	96 95       	lsr	r25
    5d1c:	e9 2f       	mov	r30, r25
    5d1e:	96 95       	lsr	r25
    5d20:	96 95       	lsr	r25
    5d22:	e9 0f       	add	r30, r25
    5d24:	ff 27       	eor	r31, r31
    5d26:	e4 50       	subi	r30, 0x04	; 4
    5d28:	fe 4f       	sbci	r31, 0xFE	; 254
    5d2a:	99 27       	eor	r25, r25
    5d2c:	33 27       	eor	r19, r19
    5d2e:	ee 24       	eor	r14, r14
    5d30:	ff 24       	eor	r15, r15
    5d32:	a7 01       	movw	r20, r14
    5d34:	e7 01       	movw	r28, r14
    5d36:	05 90       	lpm	r0, Z+
    5d38:	08 94       	sec
    5d3a:	07 94       	ror	r0
    5d3c:	28 f4       	brcc	.+10     	; 0x5d48 <__ftoa_engine+0x80>
    5d3e:	36 0f       	add	r19, r22
    5d40:	e7 1e       	adc	r14, r23
    5d42:	f8 1e       	adc	r15, r24
    5d44:	49 1f       	adc	r20, r25
    5d46:	51 1d       	adc	r21, r1
    5d48:	66 0f       	add	r22, r22
    5d4a:	77 1f       	adc	r23, r23
    5d4c:	88 1f       	adc	r24, r24
    5d4e:	99 1f       	adc	r25, r25
    5d50:	06 94       	lsr	r0
    5d52:	a1 f7       	brne	.-24     	; 0x5d3c <__ftoa_engine+0x74>
    5d54:	05 90       	lpm	r0, Z+
    5d56:	07 94       	ror	r0
    5d58:	28 f4       	brcc	.+10     	; 0x5d64 <__ftoa_engine+0x9c>
    5d5a:	e7 0e       	add	r14, r23
    5d5c:	f8 1e       	adc	r15, r24
    5d5e:	49 1f       	adc	r20, r25
    5d60:	56 1f       	adc	r21, r22
    5d62:	c1 1d       	adc	r28, r1
    5d64:	77 0f       	add	r23, r23
    5d66:	88 1f       	adc	r24, r24
    5d68:	99 1f       	adc	r25, r25
    5d6a:	66 1f       	adc	r22, r22
    5d6c:	06 94       	lsr	r0
    5d6e:	a1 f7       	brne	.-24     	; 0x5d58 <__ftoa_engine+0x90>
    5d70:	05 90       	lpm	r0, Z+
    5d72:	07 94       	ror	r0
    5d74:	28 f4       	brcc	.+10     	; 0x5d80 <__ftoa_engine+0xb8>
    5d76:	f8 0e       	add	r15, r24
    5d78:	49 1f       	adc	r20, r25
    5d7a:	56 1f       	adc	r21, r22
    5d7c:	c7 1f       	adc	r28, r23
    5d7e:	d1 1d       	adc	r29, r1
    5d80:	88 0f       	add	r24, r24
    5d82:	99 1f       	adc	r25, r25
    5d84:	66 1f       	adc	r22, r22
    5d86:	77 1f       	adc	r23, r23
    5d88:	06 94       	lsr	r0
    5d8a:	a1 f7       	brne	.-24     	; 0x5d74 <__ftoa_engine+0xac>
    5d8c:	05 90       	lpm	r0, Z+
    5d8e:	07 94       	ror	r0
    5d90:	20 f4       	brcc	.+8      	; 0x5d9a <__ftoa_engine+0xd2>
    5d92:	49 0f       	add	r20, r25
    5d94:	56 1f       	adc	r21, r22
    5d96:	c7 1f       	adc	r28, r23
    5d98:	d8 1f       	adc	r29, r24
    5d9a:	99 0f       	add	r25, r25
    5d9c:	66 1f       	adc	r22, r22
    5d9e:	77 1f       	adc	r23, r23
    5da0:	88 1f       	adc	r24, r24
    5da2:	06 94       	lsr	r0
    5da4:	a9 f7       	brne	.-22     	; 0x5d90 <__ftoa_engine+0xc8>
    5da6:	84 91       	lpm	r24, Z
    5da8:	10 95       	com	r17
    5daa:	17 70       	andi	r17, 0x07	; 7
    5dac:	41 f0       	breq	.+16     	; 0x5dbe <__ftoa_engine+0xf6>
    5dae:	d6 95       	lsr	r29
    5db0:	c7 95       	ror	r28
    5db2:	57 95       	ror	r21
    5db4:	47 95       	ror	r20
    5db6:	f7 94       	ror	r15
    5db8:	e7 94       	ror	r14
    5dba:	1a 95       	dec	r17
    5dbc:	c1 f7       	brne	.-16     	; 0x5dae <__ftoa_engine+0xe6>
    5dbe:	e2 ea       	ldi	r30, 0xA2	; 162
    5dc0:	f1 e0       	ldi	r31, 0x01	; 1
    5dc2:	68 94       	set
    5dc4:	15 90       	lpm	r1, Z+
    5dc6:	15 91       	lpm	r17, Z+
    5dc8:	35 91       	lpm	r19, Z+
    5dca:	65 91       	lpm	r22, Z+
    5dcc:	95 91       	lpm	r25, Z+
    5dce:	05 90       	lpm	r0, Z+
    5dd0:	7f e2       	ldi	r23, 0x2F	; 47
    5dd2:	73 95       	inc	r23
    5dd4:	e1 18       	sub	r14, r1
    5dd6:	f1 0a       	sbc	r15, r17
    5dd8:	43 0b       	sbc	r20, r19
    5dda:	56 0b       	sbc	r21, r22
    5ddc:	c9 0b       	sbc	r28, r25
    5dde:	d0 09       	sbc	r29, r0
    5de0:	c0 f7       	brcc	.-16     	; 0x5dd2 <__ftoa_engine+0x10a>
    5de2:	e1 0c       	add	r14, r1
    5de4:	f1 1e       	adc	r15, r17
    5de6:	43 1f       	adc	r20, r19
    5de8:	56 1f       	adc	r21, r22
    5dea:	c9 1f       	adc	r28, r25
    5dec:	d0 1d       	adc	r29, r0
    5dee:	7e f4       	brtc	.+30     	; 0x5e0e <__ftoa_engine+0x146>
    5df0:	70 33       	cpi	r23, 0x30	; 48
    5df2:	11 f4       	brne	.+4      	; 0x5df8 <__ftoa_engine+0x130>
    5df4:	8a 95       	dec	r24
    5df6:	e6 cf       	rjmp	.-52     	; 0x5dc4 <__ftoa_engine+0xfc>
    5df8:	e8 94       	clt
    5dfa:	01 50       	subi	r16, 0x01	; 1
    5dfc:	30 f0       	brcs	.+12     	; 0x5e0a <__ftoa_engine+0x142>
    5dfe:	08 0f       	add	r16, r24
    5e00:	0a f4       	brpl	.+2      	; 0x5e04 <__ftoa_engine+0x13c>
    5e02:	00 27       	eor	r16, r16
    5e04:	02 17       	cp	r16, r18
    5e06:	08 f4       	brcc	.+2      	; 0x5e0a <__ftoa_engine+0x142>
    5e08:	20 2f       	mov	r18, r16
    5e0a:	23 95       	inc	r18
    5e0c:	02 2f       	mov	r16, r18
    5e0e:	7a 33       	cpi	r23, 0x3A	; 58
    5e10:	28 f0       	brcs	.+10     	; 0x5e1c <__ftoa_engine+0x154>
    5e12:	79 e3       	ldi	r23, 0x39	; 57
    5e14:	7d 93       	st	X+, r23
    5e16:	2a 95       	dec	r18
    5e18:	e9 f7       	brne	.-6      	; 0x5e14 <__ftoa_engine+0x14c>
    5e1a:	10 c0       	rjmp	.+32     	; 0x5e3c <__ftoa_engine+0x174>
    5e1c:	7d 93       	st	X+, r23
    5e1e:	2a 95       	dec	r18
    5e20:	89 f6       	brne	.-94     	; 0x5dc4 <__ftoa_engine+0xfc>
    5e22:	06 94       	lsr	r0
    5e24:	97 95       	ror	r25
    5e26:	67 95       	ror	r22
    5e28:	37 95       	ror	r19
    5e2a:	17 95       	ror	r17
    5e2c:	17 94       	ror	r1
    5e2e:	e1 18       	sub	r14, r1
    5e30:	f1 0a       	sbc	r15, r17
    5e32:	43 0b       	sbc	r20, r19
    5e34:	56 0b       	sbc	r21, r22
    5e36:	c9 0b       	sbc	r28, r25
    5e38:	d0 09       	sbc	r29, r0
    5e3a:	98 f0       	brcs	.+38     	; 0x5e62 <__ftoa_engine+0x19a>
    5e3c:	23 95       	inc	r18
    5e3e:	7e 91       	ld	r23, -X
    5e40:	73 95       	inc	r23
    5e42:	7a 33       	cpi	r23, 0x3A	; 58
    5e44:	08 f0       	brcs	.+2      	; 0x5e48 <__ftoa_engine+0x180>
    5e46:	70 e3       	ldi	r23, 0x30	; 48
    5e48:	7c 93       	st	X, r23
    5e4a:	20 13       	cpse	r18, r16
    5e4c:	b8 f7       	brcc	.-18     	; 0x5e3c <__ftoa_engine+0x174>
    5e4e:	7e 91       	ld	r23, -X
    5e50:	70 61       	ori	r23, 0x10	; 16
    5e52:	7d 93       	st	X+, r23
    5e54:	30 f0       	brcs	.+12     	; 0x5e62 <__ftoa_engine+0x19a>
    5e56:	83 95       	inc	r24
    5e58:	71 e3       	ldi	r23, 0x31	; 49
    5e5a:	7d 93       	st	X+, r23
    5e5c:	70 e3       	ldi	r23, 0x30	; 48
    5e5e:	2a 95       	dec	r18
    5e60:	e1 f7       	brne	.-8      	; 0x5e5a <__ftoa_engine+0x192>
    5e62:	11 24       	eor	r1, r1
    5e64:	ef 90       	pop	r14
    5e66:	ff 90       	pop	r15
    5e68:	0f 91       	pop	r16
    5e6a:	1f 91       	pop	r17
    5e6c:	cf 91       	pop	r28
    5e6e:	df 91       	pop	r29
    5e70:	99 27       	eor	r25, r25
    5e72:	87 fd       	sbrc	r24, 7
    5e74:	90 95       	com	r25
    5e76:	08 95       	ret

00005e78 <strnlen_P>:
    5e78:	fc 01       	movw	r30, r24
    5e7a:	05 90       	lpm	r0, Z+
    5e7c:	61 50       	subi	r22, 0x01	; 1
    5e7e:	70 40       	sbci	r23, 0x00	; 0
    5e80:	01 10       	cpse	r0, r1
    5e82:	d8 f7       	brcc	.-10     	; 0x5e7a <strnlen_P+0x2>
    5e84:	80 95       	com	r24
    5e86:	90 95       	com	r25
    5e88:	8e 0f       	add	r24, r30
    5e8a:	9f 1f       	adc	r25, r31
    5e8c:	08 95       	ret

00005e8e <memcpy>:
    5e8e:	fb 01       	movw	r30, r22
    5e90:	dc 01       	movw	r26, r24
    5e92:	02 c0       	rjmp	.+4      	; 0x5e98 <memcpy+0xa>
    5e94:	01 90       	ld	r0, Z+
    5e96:	0d 92       	st	X+, r0
    5e98:	41 50       	subi	r20, 0x01	; 1
    5e9a:	50 40       	sbci	r21, 0x00	; 0
    5e9c:	d8 f7       	brcc	.-10     	; 0x5e94 <memcpy+0x6>
    5e9e:	08 95       	ret

00005ea0 <memset>:
    5ea0:	dc 01       	movw	r26, r24
    5ea2:	01 c0       	rjmp	.+2      	; 0x5ea6 <memset+0x6>
    5ea4:	6d 93       	st	X+, r22
    5ea6:	41 50       	subi	r20, 0x01	; 1
    5ea8:	50 40       	sbci	r21, 0x00	; 0
    5eaa:	e0 f7       	brcc	.-8      	; 0x5ea4 <memset+0x4>
    5eac:	08 95       	ret

00005eae <strcasestr>:
    5eae:	fb 01       	movw	r30, r22
    5eb0:	51 91       	ld	r21, Z+
    5eb2:	55 23       	and	r21, r21
    5eb4:	b1 f0       	breq	.+44     	; 0x5ee2 <strcasestr+0x34>
    5eb6:	bf 01       	movw	r22, r30
    5eb8:	dc 01       	movw	r26, r24
    5eba:	05 2e       	mov	r0, r21
    5ebc:	4d 91       	ld	r20, X+
    5ebe:	44 23       	and	r20, r20
    5ec0:	69 f0       	breq	.+26     	; 0x5edc <strcasestr+0x2e>
    5ec2:	10 d0       	rcall	.+32     	; 0x5ee4 <strcasestr+0x36>
    5ec4:	d9 f7       	brne	.-10     	; 0x5ebc <strcasestr+0xe>
    5ec6:	cd 01       	movw	r24, r26
    5ec8:	01 90       	ld	r0, Z+
    5eca:	00 20       	and	r0, r0
    5ecc:	49 f0       	breq	.+18     	; 0x5ee0 <strcasestr+0x32>
    5ece:	4d 91       	ld	r20, X+
    5ed0:	41 11       	cpse	r20, r1
    5ed2:	08 d0       	rcall	.+16     	; 0x5ee4 <strcasestr+0x36>
    5ed4:	c9 f3       	breq	.-14     	; 0x5ec8 <strcasestr+0x1a>
    5ed6:	fb 01       	movw	r30, r22
    5ed8:	41 11       	cpse	r20, r1
    5eda:	ee cf       	rjmp	.-36     	; 0x5eb8 <strcasestr+0xa>
    5edc:	81 e0       	ldi	r24, 0x01	; 1
    5ede:	90 e0       	ldi	r25, 0x00	; 0
    5ee0:	01 97       	sbiw	r24, 0x01	; 1
    5ee2:	08 95       	ret
    5ee4:	40 25       	eor	r20, r0
    5ee6:	39 f0       	breq	.+14     	; 0x5ef6 <strcasestr+0x48>
    5ee8:	40 32       	cpi	r20, 0x20	; 32
    5eea:	29 f4       	brne	.+10     	; 0x5ef6 <strcasestr+0x48>
    5eec:	40 29       	or	r20, r0
    5eee:	4b 57       	subi	r20, 0x7B	; 123
    5ef0:	46 5e       	subi	r20, 0xE6	; 230
    5ef2:	08 f0       	brcs	.+2      	; 0x5ef6 <strcasestr+0x48>
    5ef4:	18 94       	sez
    5ef6:	08 95       	ret

00005ef8 <strcat>:
    5ef8:	fb 01       	movw	r30, r22
    5efa:	dc 01       	movw	r26, r24
    5efc:	0d 90       	ld	r0, X+
    5efe:	00 20       	and	r0, r0
    5f00:	e9 f7       	brne	.-6      	; 0x5efc <strcat+0x4>
    5f02:	11 97       	sbiw	r26, 0x01	; 1
    5f04:	01 90       	ld	r0, Z+
    5f06:	0d 92       	st	X+, r0
    5f08:	00 20       	and	r0, r0
    5f0a:	e1 f7       	brne	.-8      	; 0x5f04 <strcat+0xc>
    5f0c:	08 95       	ret

00005f0e <strcpy>:
    5f0e:	fb 01       	movw	r30, r22
    5f10:	dc 01       	movw	r26, r24
    5f12:	01 90       	ld	r0, Z+
    5f14:	0d 92       	st	X+, r0
    5f16:	00 20       	and	r0, r0
    5f18:	e1 f7       	brne	.-8      	; 0x5f12 <strcpy+0x4>
    5f1a:	08 95       	ret

00005f1c <strncasecmp>:
    5f1c:	fb 01       	movw	r30, r22
    5f1e:	dc 01       	movw	r26, r24
    5f20:	41 50       	subi	r20, 0x01	; 1
    5f22:	50 40       	sbci	r21, 0x00	; 0
    5f24:	88 f0       	brcs	.+34     	; 0x5f48 <strncasecmp+0x2c>
    5f26:	8d 91       	ld	r24, X+
    5f28:	81 34       	cpi	r24, 0x41	; 65
    5f2a:	1c f0       	brlt	.+6      	; 0x5f32 <strncasecmp+0x16>
    5f2c:	8b 35       	cpi	r24, 0x5B	; 91
    5f2e:	0c f4       	brge	.+2      	; 0x5f32 <strncasecmp+0x16>
    5f30:	80 5e       	subi	r24, 0xE0	; 224
    5f32:	61 91       	ld	r22, Z+
    5f34:	61 34       	cpi	r22, 0x41	; 65
    5f36:	1c f0       	brlt	.+6      	; 0x5f3e <strncasecmp+0x22>
    5f38:	6b 35       	cpi	r22, 0x5B	; 91
    5f3a:	0c f4       	brge	.+2      	; 0x5f3e <strncasecmp+0x22>
    5f3c:	60 5e       	subi	r22, 0xE0	; 224
    5f3e:	86 1b       	sub	r24, r22
    5f40:	61 11       	cpse	r22, r1
    5f42:	71 f3       	breq	.-36     	; 0x5f20 <strncasecmp+0x4>
    5f44:	99 0b       	sbc	r25, r25
    5f46:	08 95       	ret
    5f48:	88 1b       	sub	r24, r24
    5f4a:	fc cf       	rjmp	.-8      	; 0x5f44 <strncasecmp+0x28>

00005f4c <strnlen>:
    5f4c:	fc 01       	movw	r30, r24
    5f4e:	61 50       	subi	r22, 0x01	; 1
    5f50:	70 40       	sbci	r23, 0x00	; 0
    5f52:	01 90       	ld	r0, Z+
    5f54:	01 10       	cpse	r0, r1
    5f56:	d8 f7       	brcc	.-10     	; 0x5f4e <strnlen+0x2>
    5f58:	80 95       	com	r24
    5f5a:	90 95       	com	r25
    5f5c:	8e 0f       	add	r24, r30
    5f5e:	9f 1f       	adc	r25, r31
    5f60:	08 95       	ret

00005f62 <fputc>:
    5f62:	0f 93       	push	r16
    5f64:	1f 93       	push	r17
    5f66:	cf 93       	push	r28
    5f68:	df 93       	push	r29
    5f6a:	fb 01       	movw	r30, r22
    5f6c:	23 81       	ldd	r18, Z+3	; 0x03
    5f6e:	21 fd       	sbrc	r18, 1
    5f70:	03 c0       	rjmp	.+6      	; 0x5f78 <fputc+0x16>
    5f72:	8f ef       	ldi	r24, 0xFF	; 255
    5f74:	9f ef       	ldi	r25, 0xFF	; 255
    5f76:	2c c0       	rjmp	.+88     	; 0x5fd0 <fputc+0x6e>
    5f78:	22 ff       	sbrs	r18, 2
    5f7a:	16 c0       	rjmp	.+44     	; 0x5fa8 <fputc+0x46>
    5f7c:	46 81       	ldd	r20, Z+6	; 0x06
    5f7e:	57 81       	ldd	r21, Z+7	; 0x07
    5f80:	24 81       	ldd	r18, Z+4	; 0x04
    5f82:	35 81       	ldd	r19, Z+5	; 0x05
    5f84:	42 17       	cp	r20, r18
    5f86:	53 07       	cpc	r21, r19
    5f88:	44 f4       	brge	.+16     	; 0x5f9a <fputc+0x38>
    5f8a:	a0 81       	ld	r26, Z
    5f8c:	b1 81       	ldd	r27, Z+1	; 0x01
    5f8e:	9d 01       	movw	r18, r26
    5f90:	2f 5f       	subi	r18, 0xFF	; 255
    5f92:	3f 4f       	sbci	r19, 0xFF	; 255
    5f94:	31 83       	std	Z+1, r19	; 0x01
    5f96:	20 83       	st	Z, r18
    5f98:	8c 93       	st	X, r24
    5f9a:	26 81       	ldd	r18, Z+6	; 0x06
    5f9c:	37 81       	ldd	r19, Z+7	; 0x07
    5f9e:	2f 5f       	subi	r18, 0xFF	; 255
    5fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa2:	37 83       	std	Z+7, r19	; 0x07
    5fa4:	26 83       	std	Z+6, r18	; 0x06
    5fa6:	14 c0       	rjmp	.+40     	; 0x5fd0 <fputc+0x6e>
    5fa8:	8b 01       	movw	r16, r22
    5faa:	ec 01       	movw	r28, r24
    5fac:	fb 01       	movw	r30, r22
    5fae:	00 84       	ldd	r0, Z+8	; 0x08
    5fb0:	f1 85       	ldd	r31, Z+9	; 0x09
    5fb2:	e0 2d       	mov	r30, r0
    5fb4:	19 95       	eicall
    5fb6:	89 2b       	or	r24, r25
    5fb8:	e1 f6       	brne	.-72     	; 0x5f72 <fputc+0x10>
    5fba:	d8 01       	movw	r26, r16
    5fbc:	16 96       	adiw	r26, 0x06	; 6
    5fbe:	8d 91       	ld	r24, X+
    5fc0:	9c 91       	ld	r25, X
    5fc2:	17 97       	sbiw	r26, 0x07	; 7
    5fc4:	01 96       	adiw	r24, 0x01	; 1
    5fc6:	17 96       	adiw	r26, 0x07	; 7
    5fc8:	9c 93       	st	X, r25
    5fca:	8e 93       	st	-X, r24
    5fcc:	16 97       	sbiw	r26, 0x06	; 6
    5fce:	ce 01       	movw	r24, r28
    5fd0:	df 91       	pop	r29
    5fd2:	cf 91       	pop	r28
    5fd4:	1f 91       	pop	r17
    5fd6:	0f 91       	pop	r16
    5fd8:	08 95       	ret

00005fda <printf>:
    5fda:	cf 93       	push	r28
    5fdc:	df 93       	push	r29
    5fde:	cd b7       	in	r28, 0x3d	; 61
    5fe0:	de b7       	in	r29, 0x3e	; 62
    5fe2:	ae 01       	movw	r20, r28
    5fe4:	4a 5f       	subi	r20, 0xFA	; 250
    5fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe8:	fa 01       	movw	r30, r20
    5fea:	61 91       	ld	r22, Z+
    5fec:	71 91       	ld	r23, Z+
    5fee:	af 01       	movw	r20, r30
    5ff0:	80 91 9b 12 	lds	r24, 0x129B	; 0x80129b <__iob+0x2>
    5ff4:	90 91 9c 12 	lds	r25, 0x129C	; 0x80129c <__iob+0x3>
    5ff8:	e1 d8       	rcall	.-3646   	; 0x51bc <vfprintf>
    5ffa:	df 91       	pop	r29
    5ffc:	cf 91       	pop	r28
    5ffe:	08 95       	ret

00006000 <puts>:
    6000:	0f 93       	push	r16
    6002:	1f 93       	push	r17
    6004:	cf 93       	push	r28
    6006:	df 93       	push	r29
    6008:	e0 91 9b 12 	lds	r30, 0x129B	; 0x80129b <__iob+0x2>
    600c:	f0 91 9c 12 	lds	r31, 0x129C	; 0x80129c <__iob+0x3>
    6010:	23 81       	ldd	r18, Z+3	; 0x03
    6012:	21 ff       	sbrs	r18, 1
    6014:	1b c0       	rjmp	.+54     	; 0x604c <puts+0x4c>
    6016:	8c 01       	movw	r16, r24
    6018:	d0 e0       	ldi	r29, 0x00	; 0
    601a:	c0 e0       	ldi	r28, 0x00	; 0
    601c:	f8 01       	movw	r30, r16
    601e:	81 91       	ld	r24, Z+
    6020:	8f 01       	movw	r16, r30
    6022:	60 91 9b 12 	lds	r22, 0x129B	; 0x80129b <__iob+0x2>
    6026:	70 91 9c 12 	lds	r23, 0x129C	; 0x80129c <__iob+0x3>
    602a:	db 01       	movw	r26, r22
    602c:	18 96       	adiw	r26, 0x08	; 8
    602e:	ed 91       	ld	r30, X+
    6030:	fc 91       	ld	r31, X
    6032:	19 97       	sbiw	r26, 0x09	; 9
    6034:	88 23       	and	r24, r24
    6036:	31 f0       	breq	.+12     	; 0x6044 <puts+0x44>
    6038:	19 95       	eicall
    603a:	89 2b       	or	r24, r25
    603c:	79 f3       	breq	.-34     	; 0x601c <puts+0x1c>
    603e:	df ef       	ldi	r29, 0xFF	; 255
    6040:	cf ef       	ldi	r28, 0xFF	; 255
    6042:	ec cf       	rjmp	.-40     	; 0x601c <puts+0x1c>
    6044:	8a e0       	ldi	r24, 0x0A	; 10
    6046:	19 95       	eicall
    6048:	89 2b       	or	r24, r25
    604a:	19 f0       	breq	.+6      	; 0x6052 <puts+0x52>
    604c:	8f ef       	ldi	r24, 0xFF	; 255
    604e:	9f ef       	ldi	r25, 0xFF	; 255
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <puts+0x56>
    6052:	8d 2f       	mov	r24, r29
    6054:	9c 2f       	mov	r25, r28
    6056:	df 91       	pop	r29
    6058:	cf 91       	pop	r28
    605a:	1f 91       	pop	r17
    605c:	0f 91       	pop	r16
    605e:	08 95       	ret

00006060 <sprintf>:
    6060:	0f 93       	push	r16
    6062:	1f 93       	push	r17
    6064:	cf 93       	push	r28
    6066:	df 93       	push	r29
    6068:	cd b7       	in	r28, 0x3d	; 61
    606a:	de b7       	in	r29, 0x3e	; 62
    606c:	2e 97       	sbiw	r28, 0x0e	; 14
    606e:	0f b6       	in	r0, 0x3f	; 63
    6070:	f8 94       	cli
    6072:	de bf       	out	0x3e, r29	; 62
    6074:	0f be       	out	0x3f, r0	; 63
    6076:	cd bf       	out	0x3d, r28	; 61
    6078:	0e 89       	ldd	r16, Y+22	; 0x16
    607a:	1f 89       	ldd	r17, Y+23	; 0x17
    607c:	86 e0       	ldi	r24, 0x06	; 6
    607e:	8c 83       	std	Y+4, r24	; 0x04
    6080:	1a 83       	std	Y+2, r17	; 0x02
    6082:	09 83       	std	Y+1, r16	; 0x01
    6084:	8f ef       	ldi	r24, 0xFF	; 255
    6086:	9f e7       	ldi	r25, 0x7F	; 127
    6088:	9e 83       	std	Y+6, r25	; 0x06
    608a:	8d 83       	std	Y+5, r24	; 0x05
    608c:	ae 01       	movw	r20, r28
    608e:	46 5e       	subi	r20, 0xE6	; 230
    6090:	5f 4f       	sbci	r21, 0xFF	; 255
    6092:	68 8d       	ldd	r22, Y+24	; 0x18
    6094:	79 8d       	ldd	r23, Y+25	; 0x19
    6096:	ce 01       	movw	r24, r28
    6098:	01 96       	adiw	r24, 0x01	; 1
    609a:	90 d8       	rcall	.-3808   	; 0x51bc <vfprintf>
    609c:	ef 81       	ldd	r30, Y+7	; 0x07
    609e:	f8 85       	ldd	r31, Y+8	; 0x08
    60a0:	e0 0f       	add	r30, r16
    60a2:	f1 1f       	adc	r31, r17
    60a4:	10 82       	st	Z, r1
    60a6:	2e 96       	adiw	r28, 0x0e	; 14
    60a8:	0f b6       	in	r0, 0x3f	; 63
    60aa:	f8 94       	cli
    60ac:	de bf       	out	0x3e, r29	; 62
    60ae:	0f be       	out	0x3f, r0	; 63
    60b0:	cd bf       	out	0x3d, r28	; 61
    60b2:	df 91       	pop	r29
    60b4:	cf 91       	pop	r28
    60b6:	1f 91       	pop	r17
    60b8:	0f 91       	pop	r16
    60ba:	08 95       	ret

000060bc <__ultoa_invert>:
    60bc:	fa 01       	movw	r30, r20
    60be:	aa 27       	eor	r26, r26
    60c0:	28 30       	cpi	r18, 0x08	; 8
    60c2:	51 f1       	breq	.+84     	; 0x6118 <__ultoa_invert+0x5c>
    60c4:	20 31       	cpi	r18, 0x10	; 16
    60c6:	81 f1       	breq	.+96     	; 0x6128 <__ultoa_invert+0x6c>
    60c8:	e8 94       	clt
    60ca:	6f 93       	push	r22
    60cc:	6e 7f       	andi	r22, 0xFE	; 254
    60ce:	6e 5f       	subi	r22, 0xFE	; 254
    60d0:	7f 4f       	sbci	r23, 0xFF	; 255
    60d2:	8f 4f       	sbci	r24, 0xFF	; 255
    60d4:	9f 4f       	sbci	r25, 0xFF	; 255
    60d6:	af 4f       	sbci	r26, 0xFF	; 255
    60d8:	b1 e0       	ldi	r27, 0x01	; 1
    60da:	3e d0       	rcall	.+124    	; 0x6158 <__ultoa_invert+0x9c>
    60dc:	b4 e0       	ldi	r27, 0x04	; 4
    60de:	3c d0       	rcall	.+120    	; 0x6158 <__ultoa_invert+0x9c>
    60e0:	67 0f       	add	r22, r23
    60e2:	78 1f       	adc	r23, r24
    60e4:	89 1f       	adc	r24, r25
    60e6:	9a 1f       	adc	r25, r26
    60e8:	a1 1d       	adc	r26, r1
    60ea:	68 0f       	add	r22, r24
    60ec:	79 1f       	adc	r23, r25
    60ee:	8a 1f       	adc	r24, r26
    60f0:	91 1d       	adc	r25, r1
    60f2:	a1 1d       	adc	r26, r1
    60f4:	6a 0f       	add	r22, r26
    60f6:	71 1d       	adc	r23, r1
    60f8:	81 1d       	adc	r24, r1
    60fa:	91 1d       	adc	r25, r1
    60fc:	a1 1d       	adc	r26, r1
    60fe:	20 d0       	rcall	.+64     	; 0x6140 <__ultoa_invert+0x84>
    6100:	09 f4       	brne	.+2      	; 0x6104 <__ultoa_invert+0x48>
    6102:	68 94       	set
    6104:	3f 91       	pop	r19
    6106:	2a e0       	ldi	r18, 0x0A	; 10
    6108:	26 9f       	mul	r18, r22
    610a:	11 24       	eor	r1, r1
    610c:	30 19       	sub	r19, r0
    610e:	30 5d       	subi	r19, 0xD0	; 208
    6110:	31 93       	st	Z+, r19
    6112:	de f6       	brtc	.-74     	; 0x60ca <__ultoa_invert+0xe>
    6114:	cf 01       	movw	r24, r30
    6116:	08 95       	ret
    6118:	46 2f       	mov	r20, r22
    611a:	47 70       	andi	r20, 0x07	; 7
    611c:	40 5d       	subi	r20, 0xD0	; 208
    611e:	41 93       	st	Z+, r20
    6120:	b3 e0       	ldi	r27, 0x03	; 3
    6122:	0f d0       	rcall	.+30     	; 0x6142 <__ultoa_invert+0x86>
    6124:	c9 f7       	brne	.-14     	; 0x6118 <__ultoa_invert+0x5c>
    6126:	f6 cf       	rjmp	.-20     	; 0x6114 <__ultoa_invert+0x58>
    6128:	46 2f       	mov	r20, r22
    612a:	4f 70       	andi	r20, 0x0F	; 15
    612c:	40 5d       	subi	r20, 0xD0	; 208
    612e:	4a 33       	cpi	r20, 0x3A	; 58
    6130:	18 f0       	brcs	.+6      	; 0x6138 <__ultoa_invert+0x7c>
    6132:	49 5d       	subi	r20, 0xD9	; 217
    6134:	31 fd       	sbrc	r19, 1
    6136:	40 52       	subi	r20, 0x20	; 32
    6138:	41 93       	st	Z+, r20
    613a:	02 d0       	rcall	.+4      	; 0x6140 <__ultoa_invert+0x84>
    613c:	a9 f7       	brne	.-22     	; 0x6128 <__ultoa_invert+0x6c>
    613e:	ea cf       	rjmp	.-44     	; 0x6114 <__ultoa_invert+0x58>
    6140:	b4 e0       	ldi	r27, 0x04	; 4
    6142:	a6 95       	lsr	r26
    6144:	97 95       	ror	r25
    6146:	87 95       	ror	r24
    6148:	77 95       	ror	r23
    614a:	67 95       	ror	r22
    614c:	ba 95       	dec	r27
    614e:	c9 f7       	brne	.-14     	; 0x6142 <__ultoa_invert+0x86>
    6150:	00 97       	sbiw	r24, 0x00	; 0
    6152:	61 05       	cpc	r22, r1
    6154:	71 05       	cpc	r23, r1
    6156:	08 95       	ret
    6158:	9b 01       	movw	r18, r22
    615a:	ac 01       	movw	r20, r24
    615c:	0a 2e       	mov	r0, r26
    615e:	06 94       	lsr	r0
    6160:	57 95       	ror	r21
    6162:	47 95       	ror	r20
    6164:	37 95       	ror	r19
    6166:	27 95       	ror	r18
    6168:	ba 95       	dec	r27
    616a:	c9 f7       	brne	.-14     	; 0x615e <__ultoa_invert+0xa2>
    616c:	62 0f       	add	r22, r18
    616e:	73 1f       	adc	r23, r19
    6170:	84 1f       	adc	r24, r20
    6172:	95 1f       	adc	r25, r21
    6174:	a0 1d       	adc	r26, r0
    6176:	08 95       	ret

00006178 <_exit>:
    6178:	f8 94       	cli

0000617a <__stop_program>:
    617a:	ff cf       	rjmp	.-2      	; 0x617a <__stop_program>
