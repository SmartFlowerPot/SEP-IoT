
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b6  00800200  00007294  00007328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e35  008007b6  008007b6  000078de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000078de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000793c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bd8  00000000  00000000  0000797c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e927  00000000  00000000  00008554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a5e  00000000  00000000  00016e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073b2  00000000  00000000  0001a8d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002afc  00000000  00000000  00021c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a66  00000000  00000000  00024788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d6de  00000000  00000000  000291ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  000368cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9a 2b 	jmp	0x5734	; 0x5734 <__vector_25>
      68:	0c 94 ec 2b 	jmp	0x57d8	; 0x57d8 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 30 2c 	jmp	0x5860	; 0x5860 <__vector_36>
      94:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9a 30 	jmp	0x6134	; 0x6134 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c6 2c 	jmp	0x598c	; 0x598c <__vector_51>
      d0:	0c 94 18 2d 	jmp	0x5a30	; 0x5a30 <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 5c 2d 	jmp	0x5ab8	; 0x5ab8 <__vector_54>
      dc:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	92 21       	and	r25, r2
      e6:	92 21       	and	r25, r2
      e8:	92 21       	and	r25, r2
      ea:	c9 21       	and	r28, r9
      ec:	d1 21       	and	r29, r1
      ee:	e6 21       	and	r30, r6
      f0:	92 21       	and	r25, r2
      f2:	92 21       	and	r25, r2
      f4:	c9 21       	and	r28, r9
      f6:	d1 21       	and	r29, r1
      f8:	bc 30       	cpi	r27, 0x0C	; 12
      fa:	2c 31       	cpi	r18, 0x1C	; 28
      fc:	2c 31       	cpi	r18, 0x1C	; 28
      fe:	2c 31       	cpi	r18, 0x1C	; 28
     100:	2c 31       	cpi	r18, 0x1C	; 28
     102:	2c 31       	cpi	r18, 0x1C	; 28
     104:	2c 31       	cpi	r18, 0x1C	; 28
     106:	2c 31       	cpi	r18, 0x1C	; 28
     108:	bc 30       	cpi	r27, 0x0C	; 12
     10a:	2c 31       	cpi	r18, 0x1C	; 28
     10c:	2c 31       	cpi	r18, 0x1C	; 28
     10e:	2c 31       	cpi	r18, 0x1C	; 28
     110:	2c 31       	cpi	r18, 0x1C	; 28
     112:	2c 31       	cpi	r18, 0x1C	; 28
     114:	2c 31       	cpi	r18, 0x1C	; 28
     116:	2c 31       	cpi	r18, 0x1C	; 28
     118:	be 30       	cpi	r27, 0x0E	; 14
     11a:	2c 31       	cpi	r18, 0x1C	; 28
     11c:	2c 31       	cpi	r18, 0x1C	; 28
     11e:	2c 31       	cpi	r18, 0x1C	; 28
     120:	2c 31       	cpi	r18, 0x1C	; 28
     122:	2c 31       	cpi	r18, 0x1C	; 28
     124:	2c 31       	cpi	r18, 0x1C	; 28
     126:	2c 31       	cpi	r18, 0x1C	; 28
     128:	2c 31       	cpi	r18, 0x1C	; 28
     12a:	2c 31       	cpi	r18, 0x1C	; 28
     12c:	2c 31       	cpi	r18, 0x1C	; 28
     12e:	2c 31       	cpi	r18, 0x1C	; 28
     130:	2c 31       	cpi	r18, 0x1C	; 28
     132:	2c 31       	cpi	r18, 0x1C	; 28
     134:	2c 31       	cpi	r18, 0x1C	; 28
     136:	2c 31       	cpi	r18, 0x1C	; 28
     138:	be 30       	cpi	r27, 0x0E	; 14
     13a:	2c 31       	cpi	r18, 0x1C	; 28
     13c:	2c 31       	cpi	r18, 0x1C	; 28
     13e:	2c 31       	cpi	r18, 0x1C	; 28
     140:	2c 31       	cpi	r18, 0x1C	; 28
     142:	2c 31       	cpi	r18, 0x1C	; 28
     144:	2c 31       	cpi	r18, 0x1C	; 28
     146:	2c 31       	cpi	r18, 0x1C	; 28
     148:	2c 31       	cpi	r18, 0x1C	; 28
     14a:	2c 31       	cpi	r18, 0x1C	; 28
     14c:	2c 31       	cpi	r18, 0x1C	; 28
     14e:	2c 31       	cpi	r18, 0x1C	; 28
     150:	2c 31       	cpi	r18, 0x1C	; 28
     152:	2c 31       	cpi	r18, 0x1C	; 28
     154:	2c 31       	cpi	r18, 0x1C	; 28
     156:	2c 31       	cpi	r18, 0x1C	; 28
     158:	28 31       	cpi	r18, 0x18	; 24
     15a:	2c 31       	cpi	r18, 0x1C	; 28
     15c:	2c 31       	cpi	r18, 0x1C	; 28
     15e:	2c 31       	cpi	r18, 0x1C	; 28
     160:	2c 31       	cpi	r18, 0x1C	; 28
     162:	2c 31       	cpi	r18, 0x1C	; 28
     164:	2c 31       	cpi	r18, 0x1C	; 28
     166:	2c 31       	cpi	r18, 0x1C	; 28
     168:	f3 30       	cpi	r31, 0x03	; 3
     16a:	2c 31       	cpi	r18, 0x1C	; 28
     16c:	2c 31       	cpi	r18, 0x1C	; 28
     16e:	2c 31       	cpi	r18, 0x1C	; 28
     170:	2c 31       	cpi	r18, 0x1C	; 28
     172:	2c 31       	cpi	r18, 0x1C	; 28
     174:	2c 31       	cpi	r18, 0x1C	; 28
     176:	2c 31       	cpi	r18, 0x1C	; 28
     178:	2c 31       	cpi	r18, 0x1C	; 28
     17a:	2c 31       	cpi	r18, 0x1C	; 28
     17c:	2c 31       	cpi	r18, 0x1C	; 28
     17e:	2c 31       	cpi	r18, 0x1C	; 28
     180:	2c 31       	cpi	r18, 0x1C	; 28
     182:	2c 31       	cpi	r18, 0x1C	; 28
     184:	2c 31       	cpi	r18, 0x1C	; 28
     186:	2c 31       	cpi	r18, 0x1C	; 28
     188:	e7 30       	cpi	r30, 0x07	; 7
     18a:	2c 31       	cpi	r18, 0x1C	; 28
     18c:	2c 31       	cpi	r18, 0x1C	; 28
     18e:	2c 31       	cpi	r18, 0x1C	; 28
     190:	2c 31       	cpi	r18, 0x1C	; 28
     192:	2c 31       	cpi	r18, 0x1C	; 28
     194:	2c 31       	cpi	r18, 0x1C	; 28
     196:	2c 31       	cpi	r18, 0x1C	; 28
     198:	0b 31       	cpi	r16, 0x1B	; 27

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <prvCheckTasksWaitingTermination>
     2a0:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
     2ac:	0e 94 0f 22 	call	0x441e	; 0x441e <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 04 21 	call	0x4208	; 0x4208 <prvProcessTimerOrBlockTask>
     2ca:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	17 e0       	ldi	r17, 0x07	; 7
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	e4 e9       	ldi	r30, 0x94	; 148
     2e8:	f2 e7       	ldi	r31, 0x72	; 114
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a6 3b       	cpi	r26, 0xB6	; 182
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	25 e1       	ldi	r18, 0x15	; 21
     2fc:	a6 eb       	ldi	r26, 0xB6	; 182
     2fe:	b7 e0       	ldi	r27, 0x07	; 7
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	ab 3e       	cpi	r26, 0xEB	; 235
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 b9 22 	call	0x4572	; 0x4572 <main>
     30e:	0c 94 48 39 	jmp	0x7290	; 0x7290 <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:

/*
* Callback function called by the driver when the new CO2 measure is received.
*/
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 c2 15 	sts	0x15C2, r25	; 0x8015c2 <ppm+0x1>
     318:	80 93 c1 15 	sts	0x15C1, r24	; 0x8015c1 <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:


/*
* Task for taking the CO2 measurements and setting the CO2 value accordingly.
*/
void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <xTaskGetTickCount>
     330:	69 83       	std	Y+1, r22	; 0x01
     332:	7a 83       	std	Y+2, r23	; 0x02
     334:	8b 83       	std	Y+3, r24	; 0x03
     336:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     338:	40 ee       	ldi	r20, 0xE0	; 224
     33a:	53 e0       	ldi	r21, 0x03	; 3
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskDelayUntil>
		//pdFALSE,
		//pdTRUE,
		//portMAX_DELAY);
		
		//if ((readyBits & (ready_bit)) == (ready_bit)) {
			rc = mh_z19_takeMeassuring();
     348:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <mh_z19_takeMeassuring>
     34c:	80 93 c0 15 	sts	0x15C0, r24	; 0x8015c0 <rc>
			if (rc != MHZ19_OK){
     350:	81 11       	cpse	r24, r1
     352:	f2 cf       	rjmp	.-28     	; 0x338 <startReadingCO2+0x1a>
				// Something went wrong
				} else {
				((CO2_t)self)->CO2 = ppm;
     354:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <ppm>
     358:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <ppm+0x1>
     35c:	f8 01       	movw	r30, r16
     35e:	91 83       	std	Z+1, r25	; 0x01
     360:	80 83       	st	Z, r24
				set_co2(ppm);
     362:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <ppm>
     366:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <ppm+0x1>
     36a:	87 d2       	rcall	.+1294   	; 0x87a <set_co2>
				xEventGroupSetBits(group_start, ready_bit);
     36c:	40 91 c3 15 	lds	r20, 0x15C3	; 0x8015c3 <ready_bit>
     370:	50 91 c4 15 	lds	r21, 0x15C4	; 0x8015c4 <ready_bit+0x1>
     374:	60 91 c5 15 	lds	r22, 0x15C5	; 0x8015c5 <ready_bit+0x2>
     378:	70 91 c6 15 	lds	r23, 0x15C6	; 0x8015c6 <ready_bit+0x3>
     37c:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <group_start>
     380:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <group_start+0x1>
     384:	7a d6       	rcall	.+3316   	; 0x107a <xEventGroupSetBits>
     386:	d8 cf       	rjmp	.-80     	; 0x338 <startReadingCO2+0x1a>

00000388 <CO2_handler_init>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	9b 01       	movw	r18, r22
	//xEventGroupSetBits(group_start, ready_bit);

	xTaskCreate(
     390:	e1 2c       	mov	r14, r1
     392:	f1 2c       	mov	r15, r1
     394:	08 2f       	mov	r16, r24
     396:	44 e2       	ldi	r20, 0x24	; 36
     398:	51 e0       	ldi	r21, 0x01	; 1
     39a:	6f e6       	ldi	r22, 0x6F	; 111
     39c:	72 e0       	ldi	r23, 0x02	; 2
     39e:	8f e8       	ldi	r24, 0x8F	; 143
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
}
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <createCO2>:
/*
* Method used for allocating memory for CO2 struct and returning it, initializing the CO2 value to 0, setting groups and bits,
* initializing the driver, injecting callback and creating a CO2 task.
*/
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	8c 01       	movw	r16, r24
     3c4:	5b 01       	movw	r10, r22
     3c6:	69 01       	movw	r12, r18
     3c8:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 02 36 	call	0x6c04	; 0x6c04 <malloc>
     3d2:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     3d4:	89 2b       	or	r24, r25
     3d6:	11 f1       	breq	.+68     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     3d8:	19 82       	std	Y+1, r1	; 0x01
     3da:	18 82       	st	Y, r1
	
	group_start = taskBits;
     3dc:	b0 92 c8 15 	sts	0x15C8, r11	; 0x8015c8 <group_start+0x1>
     3e0:	a0 92 c7 15 	sts	0x15C7, r10	; 0x8015c7 <group_start>
	ready_bit = bit;
     3e4:	c0 92 c3 15 	sts	0x15C3, r12	; 0x8015c3 <ready_bit>
     3e8:	d0 92 c4 15 	sts	0x15C4, r13	; 0x8015c4 <ready_bit+0x1>
     3ec:	e0 92 c5 15 	sts	0x15C5, r14	; 0x8015c5 <ready_bit+0x2>
     3f0:	f0 92 c6 15 	sts	0x15C6, r15	; 0x8015c6 <ready_bit+0x3>
	
	mh_z19_initialise(ser_USART3);
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	0e 94 c9 29 	call	0x5392	; 0x5392 <mh_z19_initialise>
	print_sharedf("CO2 sensor initialized");
     3fa:	87 e7       	ldi	r24, 0x77	; 119
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	55 d1       	rcall	.+682    	; 0x6ae <print_sharedf>
	mh_z19_injectCallBack(CO2_callback);
     404:	8a e8       	ldi	r24, 0x8A	; 138
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 ee 29 	call	0x53dc	; 0x53dc <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     40c:	be 01       	movw	r22, r28
     40e:	c8 01       	movw	r24, r16
     410:	bb df       	rcall	.-138    	; 0x388 <CO2_handler_init>
	return new_measure;
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	8c 2f       	mov	r24, r28
     418:	9d 2f       	mov	r25, r29
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
	print_sharedf("CO2 sensor initialized");
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	08 95       	ret

00000436 <DownLinkHandler_Create>:
void lora_downlink_handler_task(void* messageBuffer);

/*
* Function that creates the listener task
*/
void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	9b 01       	movw	r18, r22
	xTaskCreate(
     43e:	e1 2c       	mov	r14, r1
     440:	f1 2c       	mov	r15, r1
     442:	08 2f       	mov	r16, r24
     444:	48 e8       	ldi	r20, 0x88	; 136
     446:	51 e0       	ldi	r21, 0x01	; 1
     448:	6e e8       	ldi	r22, 0x8E	; 142
     44a:	72 e0       	ldi	r23, 0x02	; 2
     44c:	80 e7       	ldi	r24, 0x70	; 112
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	08 95       	ret

0000045c <lora_DownLinkHandler_StartTask>:

/*
* Function that contains task body and accepts incoming messages to open/close the window
*/
void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
	
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     464:	0f ef       	ldi	r16, 0xFF	; 255
     466:	1f ef       	ldi	r17, 0xFF	; 255
     468:	98 01       	movw	r18, r16
     46a:	46 e1       	ldi	r20, 0x16	; 22
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	66 eb       	ldi	r22, 0xB6	; 182
     470:	77 e0       	ldi	r23, 0x07	; 7
     472:	0e 94 ff 11 	call	0x23fe	; 0x23fe <xStreamBufferReceive>
	print_sharedf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     476:	c6 eb       	ldi	r28, 0xB6	; 182
     478:	d7 e0       	ldi	r29, 0x07	; 7
     47a:	99 81       	ldd	r25, Y+1	; 0x01
     47c:	88 81       	ld	r24, Y
     47e:	1f 92       	push	r1
     480:	9f 93       	push	r25
     482:	1f 92       	push	r1
     484:	8f 93       	push	r24
     486:	88 ea       	ldi	r24, 0xA8	; 168
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0f d1       	rcall	.+542    	; 0x6ae <print_sharedf>
	if (1 == downlinkPayload.len){
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	d1 f4       	brne	.+52     	; 0x4d6 <lora_DownLinkHandler_StartTask+0x7a>
		if(downlinkPayload.bytes[0] == 1){
     4a2:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <__data_end+0x2>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	59 f4       	brne	.+22     	; 0x4c0 <lora_DownLinkHandler_StartTask+0x64>
			rc_servo_setPosition(1,-100); // fully open
     4aa:	6c e9       	ldi	r22, 0x9C	; 156
     4ac:	0e 94 22 2a 	call	0x5444	; 0x5444 <rc_servo_setPosition>
			print_sharedf("Window opened");
     4b0:	89 ed       	ldi	r24, 0xD9	; 217
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	fa d0       	rcall	.+500    	; 0x6ae <print_sharedf>
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0b c0       	rjmp	.+22     	; 0x4d6 <lora_DownLinkHandler_StartTask+0x7a>
		}
		else{
			rc_servo_setPosition(1, 100); // fully close
     4c0:	64 e6       	ldi	r22, 0x64	; 100
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 22 2a 	call	0x5444	; 0x5444 <rc_servo_setPosition>
			print_sharedf("Window closed");
     4c8:	87 ee       	ldi	r24, 0xE7	; 231
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	ee d0       	rcall	.+476    	; 0x6ae <print_sharedf>
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
		}
	}
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <lora_downlink_handler_task>:

/*
* Task method used to run the actual task
*/
void lora_downlink_handler_task(void* downLinkMessageBuffer){
     4e0:	ec 01       	movw	r28, r24
	for(;;){
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     4e2:	ce 01       	movw	r24, r28
     4e4:	bb df       	rcall	.-138    	; 0x45c <lora_DownLinkHandler_StartTask>
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <lora_downlink_handler_task+0x2>

000004e8 <tsl2591Callback>:

/*
* Callback function called when the new lux data is fetched.
*/
void tsl2591Callback(tsl2591_returnCode_t rc, LightHandler_t self)
{
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <tsl2591Callback+0xa>
     4f2:	1f 92       	push	r1
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
	
	float _lux;
	switch (rc)
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	99 f5       	brne	.+102    	; 0x562 <tsl2591Callback+0x7a>
     4fc:	8b 01       	movw	r16, r22
	{
		case TSL2591_DATA_READY:
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <tsl2591_getLux>
     506:	81 11       	cpse	r24, r1
     508:	23 c0       	rjmp	.+70     	; 0x550 <tsl2591Callback+0x68>
		{
			lux_val = _lux;
     50a:	69 81       	ldd	r22, Y+1	; 0x01
     50c:	7a 81       	ldd	r23, Y+2	; 0x02
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	0e 94 c6 22 	call	0x458c	; 0x458c <__fixunssfsi>
     516:	70 93 cd 07 	sts	0x07CD, r23	; 0x8007cd <lux_val+0x1>
     51a:	60 93 cc 07 	sts	0x07CC, r22	; 0x8007cc <lux_val>
			//setting data using the shared sensor data c file
			set_light(_lux);
     51e:	cb 01       	movw	r24, r22
     520:	07 d2       	rcall	.+1038   	; 0x930 <set_light>
			xEventGroupSetBits(group_start, ready_bit);
     522:	40 91 c3 15 	lds	r20, 0x15C3	; 0x8015c3 <ready_bit>
     526:	50 91 c4 15 	lds	r21, 0x15C4	; 0x8015c4 <ready_bit+0x1>
     52a:	60 91 c5 15 	lds	r22, 0x15C5	; 0x8015c5 <ready_bit+0x2>
     52e:	70 91 c6 15 	lds	r23, 0x15C6	; 0x8015c6 <ready_bit+0x3>
     532:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <group_start>
     536:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <group_start+0x1>
     53a:	9f d5       	rcall	.+2878   	; 0x107a <xEventGroupSetBits>
			self ->lux = _lux;
     53c:	69 81       	ldd	r22, Y+1	; 0x01
     53e:	7a 81       	ldd	r23, Y+2	; 0x02
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	0e 94 c6 22 	call	0x458c	; 0x458c <__fixunssfsi>
     548:	f8 01       	movw	r30, r16
     54a:	71 83       	std	Z+1, r23	; 0x01
     54c:	60 83       	st	Z, r22
     54e:	09 c0       	rjmp	.+18     	; 0x562 <tsl2591Callback+0x7a>
			
		}
		else if( TSL2591_OVERFLOW == rc )
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	39 f4       	brne	.+14     	; 0x562 <tsl2591Callback+0x7a>
		{
			print_sharedf("Lux overflow - change gain and integration time\n"); //switch
     554:	85 ef       	ldi	r24, 0xF5	; 245
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	a8 d0       	rcall	.+336    	; 0x6ae <print_sharedf>
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
		break;
		
		default:
		break;
	}
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <createLightTask>:
} LightHandler;

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void createLightTask(UBaseType_t light_priority, LightHandler_t self){
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	08 2f       	mov	r16, r24
     580:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     582:	40 91 c3 15 	lds	r20, 0x15C3	; 0x8015c3 <ready_bit>
     586:	50 91 c4 15 	lds	r21, 0x15C4	; 0x8015c4 <ready_bit+0x1>
     58a:	60 91 c5 15 	lds	r22, 0x15C5	; 0x8015c5 <ready_bit+0x2>
     58e:	70 91 c6 15 	lds	r23, 0x15C6	; 0x8015c6 <ready_bit+0x3>
     592:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <group_start>
     596:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <group_start+0x1>
     59a:	6f d5       	rcall	.+2782   	; 0x107a <xEventGroupSetBits>
	
	xTaskCreate(startReadingLight
     59c:	e1 2c       	mov	r14, r1
     59e:	f1 2c       	mov	r15, r1
     5a0:	9e 01       	movw	r18, r28
     5a2:	48 e8       	ldi	r20, 0x88	; 136
     5a4:	51 e0       	ldi	r21, 0x01	; 1
     5a6:	66 e2       	ldi	r22, 0x26	; 38
     5a8:	73 e0       	ldi	r23, 0x03	; 3
     5aa:	81 e3       	ldi	r24, 0x31	; 49
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskCreate>
	, "Light task"
	, configMINIMAL_STACK_SIZE + 200,
	(void*) self,
	light_priority,
	NULL);
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	08 95       	ret

000005be <createLightSensor>:
/*
* Method used for allocating memory for LightHandler struct and returning it, initializing the lux value to 0, setting groups and bits,
* initializing the driver, injecting callback, enabling the driver and creating a light task.
*/
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	18 2f       	mov	r17, r24
     5d2:	7b 01       	movw	r14, r22
     5d4:	49 01       	movw	r8, r18
     5d6:	5a 01       	movw	r10, r20
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
     5d8:	62 e0       	ldi	r22, 0x02	; 2
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <calloc>
     5e4:	ec 01       	movw	r28, r24
	
	if(new_measure == NULL){
     5e6:	89 2b       	or	r24, r25
     5e8:	19 f1       	breq	.+70     	; 0x630 <createLightSensor+0x72>
		return NULL;
	}
	new_measure -> lux = 0;
     5ea:	19 82       	std	Y+1, r1	; 0x01
     5ec:	18 82       	st	Y, r1
	ready_bit = bits;
     5ee:	80 92 c3 15 	sts	0x15C3, r8	; 0x8015c3 <ready_bit>
     5f2:	90 92 c4 15 	sts	0x15C4, r9	; 0x8015c4 <ready_bit+0x1>
     5f6:	a0 92 c5 15 	sts	0x15C5, r10	; 0x8015c5 <ready_bit+0x2>
     5fa:	b0 92 c6 15 	sts	0x15C6, r11	; 0x8015c6 <ready_bit+0x3>
	group_start = eventBits;
     5fe:	f0 92 c8 15 	sts	0x15C8, r15	; 0x8015c8 <group_start+0x1>
     602:	e0 92 c7 15 	sts	0x15C7, r14	; 0x8015c7 <group_start>
	
	//initialize sensor with the callback function
	if ( TSL2591_OK == tsl2591_initialise(tsl2591Callback))
     606:	84 e7       	ldi	r24, 0x74	; 116
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <tsl2591_initialise>
     60e:	81 11       	cpse	r24, r1
     610:	07 c0       	rjmp	.+14     	; 0x620 <createLightSensor+0x62>
	{
		print_sharedf("Light sensor initialized");
     612:	81 e3       	ldi	r24, 0x31	; 49
     614:	93 e0       	ldi	r25, 0x03	; 3
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	49 d0       	rcall	.+146    	; 0x6ae <print_sharedf>
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
	}
	
	//enable sensor
	if ( TSL2591_OK != tsl2591_enable() )
     620:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <tsl2591_enable>
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
     624:	be 01       	movw	r22, r28
     626:	81 2f       	mov	r24, r17
     628:	a5 df       	rcall	.-182    	; 0x574 <createLightTask>
	return new_measure;
     62a:	8c 2f       	mov	r24, r28
     62c:	9d 2f       	mov	r25, r29
     62e:	02 c0       	rjmp	.+4      	; 0x634 <createLightSensor+0x76>
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
	
	if(new_measure == NULL){
		return NULL;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
	return new_measure;
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	bf 90       	pop	r11
     640:	af 90       	pop	r10
     642:	9f 90       	pop	r9
     644:	8f 90       	pop	r8
     646:	08 95       	ret

00000648 <measure_light>:

/*
* Function used for measuring
*/
void measure_light(LightHandler_t self){
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
	//pdTRUE,
	//portMAX_DELAY);
	
	//check if all bits are set
	//if ((readyBits & (ready_bit)) == (ready_bit)) {
		if ( TSL2591_OK != tsl2591_fetchData() )
     64e:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <tsl2591_fetchData>
     652:	81 11       	cpse	r24, r1
     654:	03 c0       	rjmp	.+6      	; 0x65c <measure_light+0x14>
			// Investigate the return code further
		}
		else
		{
			//The light data will be ready after the driver calls the call back function with
			tsl2591Callback(TSL2591_DATA_READY, self);
     656:	be 01       	movw	r22, r28
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	46 df       	rcall	.-372    	; 0x4e8 <tsl2591Callback>
		}
	//}
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <startReadingLight>:

/*
* Reading task for sensor
*/
void startReadingLight(void* self){
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	00 d0       	rcall	.+0      	; 0x668 <startReadingLight+0x6>
     668:	1f 92       	push	r1
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     670:	0e 94 24 15 	call	0x2a48	; 0x2a48 <xTaskGetTickCount>
     674:	69 83       	std	Y+1, r22	; 0x01
     676:	7a 83       	std	Y+2, r23	; 0x02
     678:	8b 83       	std	Y+3, r24	; 0x03
     67a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds to read
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     67c:	42 ea       	ldi	r20, 0xA2	; 162
     67e:	53 e0       	ldi	r21, 0x03	; 3
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskDelayUntil>
		measure_light((LightHandler_t) self);
     68c:	c8 01       	movw	r24, r16
     68e:	dc df       	rcall	.-72     	; 0x648 <measure_light>
     690:	f5 cf       	rjmp	.-22     	; 0x67c <startReadingLight+0x1a>

00000692 <create_shared_printf>:

/*
* Initialize the semaphore mutex used to print text to the terminal
*/
void create_shared_printf(){
	if (xMutexPrint == NULL ){
     692:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <xMutexPrint>
     696:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <xMutexPrint+0x1>
     69a:	89 2b       	or	r24, r25
     69c:	39 f4       	brne	.+14     	; 0x6ac <create_shared_printf+0x1a>
		xMutexPrint = xSemaphoreCreateMutex();
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <xQueueCreateMutex>
     6a4:	90 93 ca 15 	sts	0x15CA, r25	; 0x8015ca <xMutexPrint+0x1>
     6a8:	80 93 c9 15 	sts	0x15C9, r24	; 0x8015c9 <xMutexPrint>
     6ac:	08 95       	ret

000006ae <print_sharedf>:
}

/*
* Method used to print to the terminal, synchronized with the mutex
*/
void print_sharedf(char* format, ...){
     6ae:	0f 93       	push	r16
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
	va_list lst;
	if (xSemaphoreTake(xMutexPrint, (TickType_t) 300) == pdTRUE) {
     6b8:	4c e2       	ldi	r20, 0x2C	; 44
     6ba:	51 e0       	ldi	r21, 0x01	; 1
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <xMutexPrint>
     6c4:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <xMutexPrint+0x1>
     6c8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	b9 f4       	brne	.+46     	; 0x6fe <print_sharedf+0x50>
		va_start(lst, format);
		//needs testing
		vprintf(format, lst);
     6d0:	be 01       	movw	r22, r28
     6d2:	67 5f       	subi	r22, 0xF7	; 247
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	98 85       	ldd	r25, Y+8	; 0x08
     6da:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <vprintf>
		printf("\n");
     6de:	8a e0       	ldi	r24, 0x0A	; 10
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 b0 38 	call	0x7160	; 0x7160 <putchar>
		xSemaphoreGive(xMutexPrint);
     6e6:	00 e0       	ldi	r16, 0x00	; 0
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	a9 01       	movw	r20, r18
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <xMutexPrint>
     6f6:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <xMutexPrint+0x1>
     6fa:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
	}
	else {}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	0f 91       	pop	r16
     704:	08 95       	ret

00000706 <create_semaphore_mutex_and_sensors>:
static uint16_t light_value = 0;
/*
* Function used to initialize pointers to the necessary structs and initializing the mutex for the shared data
*/
void create_semaphore_mutex_and_sensors(){
	if (xMutexSemaphore == NULL){
     706:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     70a:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     70e:	89 2b       	or	r24, r25
     710:	39 f4       	brne	.+14     	; 0x720 <create_semaphore_mutex_and_sensors+0x1a>
		xMutexSemaphore = xSemaphoreCreateMutex();
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <xQueueCreateMutex>
     718:	90 93 cc 15 	sts	0x15CC, r25	; 0x8015cc <xMutexSemaphore+0x1>
     71c:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <xMutexSemaphore>
     720:	08 95       	ret

00000722 <set_temp_hum>:
}

/*
* Function used to set the temperature and humidity, protected by the mutex 
*/
void set_temp_hum(float temp, uint16_t hum){
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	6b 01       	movw	r12, r22
     732:	7c 01       	movw	r14, r24
     734:	ea 01       	movw	r28, r20
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     736:	4c e2       	ldi	r20, 0x2C	; 44
     738:	51 e0       	ldi	r21, 0x01	; 1
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     742:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     746:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	c9 f4       	brne	.+50     	; 0x780 <set_temp_hum+0x5e>
		temperature_value = temp;
     74e:	c0 92 d4 07 	sts	0x07D4, r12	; 0x8007d4 <temperature_value>
     752:	d0 92 d5 07 	sts	0x07D5, r13	; 0x8007d5 <temperature_value+0x1>
     756:	e0 92 d6 07 	sts	0x07D6, r14	; 0x8007d6 <temperature_value+0x2>
     75a:	f0 92 d7 07 	sts	0x07D7, r15	; 0x8007d7 <temperature_value+0x3>
		humidity_value = hum;
     75e:	d0 93 d3 07 	sts	0x07D3, r29	; 0x8007d3 <humidity_value+0x1>
     762:	c0 93 d2 07 	sts	0x07D2, r28	; 0x8007d2 <humidity_value>
		xSemaphoreGive(xMutexSemaphore);
     766:	00 e0       	ldi	r16, 0x00	; 0
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	a9 01       	movw	r20, r18
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     776:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     77a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
     77e:	07 c0       	rjmp	.+14     	; 0x78e <set_temp_hum+0x6c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     780:	8a e4       	ldi	r24, 0x4A	; 74
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	92 df       	rcall	.-220    	; 0x6ae <print_sharedf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
	}
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	08 95       	ret

0000079e <get_humidity>:

/*
* Getter for the humidity, protected by the mutex
*/
uint16_t get_humidity(){
     79e:	0f 93       	push	r16
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
	uint16_t tmp;

	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     7a4:	4c e2       	ldi	r20, 0x2C	; 44
     7a6:	51 e0       	ldi	r21, 0x01	; 1
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     7b0:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     7b4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	99 f4       	brne	.+38     	; 0x7e2 <get_humidity+0x44>
		tmp = humidity_value;
     7bc:	d0 91 d2 07 	lds	r29, 0x07D2	; 0x8007d2 <humidity_value>
     7c0:	c0 91 d3 07 	lds	r28, 0x07D3	; 0x8007d3 <humidity_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     7c4:	00 e0       	ldi	r16, 0x00	; 0
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	a9 01       	movw	r20, r18
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     7d4:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     7d8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
		return tmp;
     7dc:	8d 2f       	mov	r24, r29
     7de:	9c 2f       	mov	r25, r28
     7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <get_humidity+0x56>
		} else{
		print_sharedf("The mutex could not be obtained.");
     7e2:	8a e4       	ldi	r24, 0x4A	; 74
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	61 df       	rcall	.-318    	; 0x6ae <print_sharedf>
		return 0;
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <get_temp>:

/*
* Getter for the temperature, protected by the mutex
*/
float get_temp(){
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
	float tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     806:	4c e2       	ldi	r20, 0x2C	; 44
     808:	51 e0       	ldi	r21, 0x01	; 1
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     812:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     816:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	c9 f4       	brne	.+50     	; 0x850 <get_temp+0x54>
		tmp = temperature_value;
     81e:	f0 90 d4 07 	lds	r15, 0x07D4	; 0x8007d4 <temperature_value>
     822:	10 91 d5 07 	lds	r17, 0x07D5	; 0x8007d5 <temperature_value+0x1>
     826:	d0 91 d6 07 	lds	r29, 0x07D6	; 0x8007d6 <temperature_value+0x2>
     82a:	c0 91 d7 07 	lds	r28, 0x07D7	; 0x8007d7 <temperature_value+0x3>
		xSemaphoreGive(xMutexSemaphore);
     82e:	00 e0       	ldi	r16, 0x00	; 0
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	a9 01       	movw	r20, r18
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     83e:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     842:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
		return tmp;
     846:	5f 2d       	mov	r21, r15
     848:	41 2f       	mov	r20, r17
     84a:	3d 2f       	mov	r19, r29
     84c:	2c 2f       	mov	r18, r28
     84e:	0b c0       	rjmp	.+22     	; 0x866 <get_temp+0x6a>
		} else{
		print_sharedf("The mutex could not be obtained.");
     850:	8a e4       	ldi	r24, 0x4A	; 74
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	2a df       	rcall	.-428    	; 0x6ae <print_sharedf>
		return 0.0;
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     866:	65 2f       	mov	r22, r21
     868:	74 2f       	mov	r23, r20
     86a:	83 2f       	mov	r24, r19
     86c:	92 2f       	mov	r25, r18
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	08 95       	ret

0000087a <set_co2>:

/*
* Setter for the co2, protected by the mutex
*/
void set_co2(uint16_t co2){
     87a:	0f 93       	push	r16
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     882:	4c e2       	ldi	r20, 0x2C	; 44
     884:	51 e0       	ldi	r21, 0x01	; 1
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     88e:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     892:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	89 f4       	brne	.+34     	; 0x8bc <set_co2+0x42>
		co2_value = co2;
     89a:	d0 93 d1 07 	sts	0x07D1, r29	; 0x8007d1 <co2_value+0x1>
     89e:	c0 93 d0 07 	sts	0x07D0, r28	; 0x8007d0 <co2_value>
		xSemaphoreGive(xMutexSemaphore);
     8a2:	00 e0       	ldi	r16, 0x00	; 0
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	a9 01       	movw	r20, r18
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     8b2:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     8b6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
     8ba:	07 c0       	rjmp	.+14     	; 0x8ca <set_co2+0x50>
		} else{
		print_sharedf("The mutex could not be obtained.");
     8bc:	8a e4       	ldi	r24, 0x4A	; 74
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	f4 de       	rcall	.-536    	; 0x6ae <print_sharedf>
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
	}
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <get_co2>:

/*
* Getter for co2, protected by the mutex
*/
uint16_t get_co2(){
     8d2:	0f 93       	push	r16
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     8d8:	4c e2       	ldi	r20, 0x2C	; 44
     8da:	51 e0       	ldi	r21, 0x01	; 1
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     8e4:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     8e8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	99 f4       	brne	.+38     	; 0x916 <get_co2+0x44>
		tmp = co2_value;
     8f0:	d0 91 d0 07 	lds	r29, 0x07D0	; 0x8007d0 <co2_value>
     8f4:	c0 91 d1 07 	lds	r28, 0x07D1	; 0x8007d1 <co2_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	a9 01       	movw	r20, r18
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     908:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     90c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
		return tmp;
     910:	8d 2f       	mov	r24, r29
     912:	9c 2f       	mov	r25, r28
     914:	09 c0       	rjmp	.+18     	; 0x928 <get_co2+0x56>
		} else{
		print_sharedf("The mutex could not be obtained.");
     916:	8a e4       	ldi	r24, 0x4A	; 74
     918:	93 e0       	ldi	r25, 0x03	; 3
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	c7 de       	rcall	.-626    	; 0x6ae <print_sharedf>
		return 0;
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <set_light>:

/*
* Setter for light levels, protected by the mutex
*/
void set_light(uint16_t light_lux){
     930:	0f 93       	push	r16
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     938:	4c e2       	ldi	r20, 0x2C	; 44
     93a:	51 e0       	ldi	r21, 0x01	; 1
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     944:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     948:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	89 f4       	brne	.+34     	; 0x972 <set_light+0x42>
		light_value = light_lux;
     950:	d0 93 cf 07 	sts	0x07CF, r29	; 0x8007cf <light_value+0x1>
     954:	c0 93 ce 07 	sts	0x07CE, r28	; 0x8007ce <light_value>
		xSemaphoreGive(xMutexSemaphore);
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     968:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     96c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
     970:	07 c0       	rjmp	.+14     	; 0x980 <set_light+0x50>
		} else{
		print_sharedf("The mutex could not be obtained.");
     972:	8a e4       	ldi	r24, 0x4A	; 74
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	99 de       	rcall	.-718    	; 0x6ae <print_sharedf>
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
	}
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	0f 91       	pop	r16
     986:	08 95       	ret

00000988 <get_light>:

/*
* Getter for the light levels, protected by the mutex
*/
uint16_t get_light(){
     988:	0f 93       	push	r16
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     98e:	4c e2       	ldi	r20, 0x2C	; 44
     990:	51 e0       	ldi	r21, 0x01	; 1
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     99a:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     99e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <xQueueSemaphoreTake>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	99 f4       	brne	.+38     	; 0x9cc <get_light+0x44>
		tmp = light_value;
     9a6:	d0 91 ce 07 	lds	r29, 0x07CE	; 0x8007ce <light_value>
     9aa:	c0 91 cf 07 	lds	r28, 0x07CF	; 0x8007cf <light_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     9ae:	00 e0       	ldi	r16, 0x00	; 0
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	a9 01       	movw	r20, r18
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xMutexSemaphore>
     9be:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xMutexSemaphore+0x1>
     9c2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
		return tmp;
     9c6:	8d 2f       	mov	r24, r29
     9c8:	9c 2f       	mov	r25, r28
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <get_light+0x56>
		} else{
		print_sharedf("The mutex could not be obtained.");
     9cc:	8a e4       	ldi	r24, 0x4A	; 74
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	6c de       	rcall	.-808    	; 0x6ae <print_sharedf>
		return 0;
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
	}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <temperature_handler_init>:
} TemperatureHandler;

/*
* initialize bits and create the task
*/
void temperature_handler_init(Temperature_t self, uint16_t priority){
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
	//xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     9ec:	e1 2c       	mov	r14, r1
     9ee:	f1 2c       	mov	r15, r1
     9f0:	06 2f       	mov	r16, r22
     9f2:	9c 01       	movw	r18, r24
     9f4:	40 ec       	ldi	r20, 0xC0	; 192
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	6b e6       	ldi	r22, 0x6B	; 107
     9fa:	73 e0       	ldi	r23, 0x03	; 3
     9fc:	89 e7       	ldi	r24, 0x79	; 121
     9fe:	95 e0       	ldi	r25, 0x05	; 5
     a00:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskCreate>
}
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	08 95       	ret

00000a0c <createTemp>:

/*
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	8c 01       	movw	r16, r24
     a22:	5b 01       	movw	r10, r22
     a24:	69 01       	movw	r12, r18
     a26:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     a28:	86 e0       	ldi	r24, 0x06	; 6
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 02 36 	call	0x6c04	; 0x6c04 <malloc>
     a30:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     a32:	89 2b       	or	r24, r25
     a34:	19 f1       	breq	.+70     	; 0xa7c <createTemp+0x70>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     a36:	18 82       	st	Y, r1
     a38:	19 82       	std	Y+1, r1	; 0x01
     a3a:	1a 82       	std	Y+2, r1	; 0x02
     a3c:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     a3e:	1d 82       	std	Y+5, r1	; 0x05
     a40:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     a42:	b0 92 c8 15 	sts	0x15C8, r11	; 0x8015c8 <group_start+0x1>
     a46:	a0 92 c7 15 	sts	0x15C7, r10	; 0x8015c7 <group_start>
	ready_bit = bit;
     a4a:	c0 92 c3 15 	sts	0x15C3, r12	; 0x8015c3 <ready_bit>
     a4e:	d0 92 c4 15 	sts	0x15C4, r13	; 0x8015c4 <ready_bit+0x1>
     a52:	e0 92 c5 15 	sts	0x15C5, r14	; 0x8015c5 <ready_bit+0x2>
     a56:	f0 92 c6 15 	sts	0x15C6, r15	; 0x8015c6 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     a5a:	0e 94 8f 24 	call	0x491e	; 0x491e <hih8120_initialise>
     a5e:	81 11       	cpse	r24, r1
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <createTemp+0x64>
	{
		print_sharedf("Temperature and humidity sensor initialized.");
     a62:	8c e7       	ldi	r24, 0x7C	; 124
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	21 de       	rcall	.-958    	; 0x6ae <print_sharedf>
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
	}
	
	temperature_handler_init(new_measure, priority);
     a70:	b8 01       	movw	r22, r16
     a72:	ce 01       	movw	r24, r28
     a74:	b8 df       	rcall	.-144    	; 0x9e6 <temperature_handler_init>
	return new_measure;
     a76:	8c 2f       	mov	r24, r28
     a78:	9d 2f       	mov	r25, r29
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <createTemp+0x74>
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
		print_sharedf("Temperature and humidity sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	08 95       	ret

00000a96 <measureTempAndHum>:

/*
* set data using the shared sensor data c file
*/
void measureTempAndHum(Temperature_t self){
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24

	self->temperature = hih8120_getTemperature();
     a9c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <hih8120_getTemperature>
     aa0:	68 83       	st	Y, r22
     aa2:	79 83       	std	Y+1, r23	; 0x01
     aa4:	8a 83       	std	Y+2, r24	; 0x02
     aa6:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10()/10;
     aa8:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <hih8120_getHumidityPercent_x10>
     aac:	9c 01       	movw	r18, r24
     aae:	ad ec       	ldi	r26, 0xCD	; 205
     ab0:	bc ec       	ldi	r27, 0xCC	; 204
     ab2:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__umulhisi3>
     ab6:	ac 01       	movw	r20, r24
     ab8:	56 95       	lsr	r21
     aba:	47 95       	ror	r20
     abc:	56 95       	lsr	r21
     abe:	47 95       	ror	r20
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	5d 83       	std	Y+5, r21	; 0x05
     ac6:	4c 83       	std	Y+4, r20	; 0x04
	
	set_temp_hum(self->temperature, self->humidity);
     ac8:	68 81       	ld	r22, Y
     aca:	79 81       	ldd	r23, Y+1	; 0x01
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	9b 81       	ldd	r25, Y+3	; 0x03
     ad0:	28 de       	rcall	.-944    	; 0x722 <set_temp_hum>
	xEventGroupSetBits(group_start, ready_bit);
     ad2:	40 91 c3 15 	lds	r20, 0x15C3	; 0x8015c3 <ready_bit>
     ad6:	50 91 c4 15 	lds	r21, 0x15C4	; 0x8015c4 <ready_bit+0x1>
     ada:	60 91 c5 15 	lds	r22, 0x15C5	; 0x8015c5 <ready_bit+0x2>
     ade:	70 91 c6 15 	lds	r23, 0x15C6	; 0x8015c6 <ready_bit+0x3>
     ae2:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <group_start>
     ae6:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <group_start+0x1>
     aea:	c7 d2       	rcall	.+1422   	; 0x107a <xEventGroupSetBits>
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <startReading>:

/*
* start reading data
*/
void startReading(void* self){
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <startReading+0x6>
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     b00:	0e 94 24 15 	call	0x2a48	; 0x2a48 <xTaskGetTickCount>
     b04:	69 83       	std	Y+1, r22	; 0x01
     b06:	7a 83       	std	Y+2, r23	; 0x02
     b08:	8b 83       	std	Y+3, r24	; 0x03
     b0a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     b0c:	42 ea       	ldi	r20, 0xA2	; 162
     b0e:	53 e0       	ldi	r21, 0x03	; 3
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskDelayUntil>
		//wake-up sensor
		if (HIH8120_OK != hih8120_wakeup())
     b1c:	0e 94 a7 24 	call	0x494e	; 0x494e <hih8120_wakeup>
     b20:	88 23       	and	r24, r24
     b22:	39 f0       	breq	.+14     	; 0xb32 <startReading+0x40>
		{
			print_sharedf("Temp task failed to work!");
     b24:	89 ea       	ldi	r24, 0xA9	; 169
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	c0 dd       	rcall	.-1152   	; 0x6ae <print_sharedf>
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
		//pdFALSE,
		//pdTRUE,
		//portMAX_DELAY);
		
		//give the sensor time to wake up
		vTaskDelay(pdMS_TO_TICKS(70));
     b32:	64 e0       	ldi	r22, 0x04	; 4
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <vTaskDelay>
		//check if the bits are set
		//if ((readyBits & (ready_bit)) == (ready_bit)) {
			hih8120_measure(); //measure temperature and humidity
     b3e:	0e 94 bc 24 	call	0x4978	; 0x4978 <hih8120_measure>
			vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	cb 01       	movw	r24, r22
     b48:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <vTaskDelay>
			
			measureTempAndHum((Temperature_t) self);
     b4c:	c8 01       	movw	r24, r16
     b4e:	a3 df       	rcall	.-186    	; 0xa96 <measureTempAndHum>
		//}
	}
     b50:	dd cf       	rjmp	.-70     	; 0xb0c <startReading+0x1a>

00000b52 <_lora_setup>:

/*
* Setup function that initializes the LoRaWAN Parameters
*/
static void _lora_setup(void)
{
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	64 97       	sbiw	r28, 0x14	; 20
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;

	// Factory reset the transceiver
	lora_driver_rn2483FactoryReset();
     b6a:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <lora_driver_rn2483FactoryReset>
	
	// Configure to EU868 LoRaWAN standards
	lora_driver_configureToEu868();
     b6e:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <lora_driver_configureToEu868>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     b72:	ce 01       	movw	r24, r28
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	0e 94 82 26 	call	0x4d04	; 0x4d04 <lora_driver_getRn2483Hweui>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	lora_driver_setDeviceIdentifier(_out_buf);
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <lora_driver_setDeviceIdentifier>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf);
     b82:	ae 01       	movw	r20, r28
     b84:	4f 5f       	subi	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	63 ec       	ldi	r22, 0xC3	; 195
     b8a:	73 e0       	ldi	r23, 0x03	; 3
     b8c:	84 ee       	ldi	r24, 0xE4	; 228
     b8e:	93 e0       	ldi	r25, 0x03	; 3
     b90:	0e 94 cc 28 	call	0x5198	; 0x5198 <lora_driver_setOtaaIdentity>

	// Save all the MAC settings in the transceiver
	lora_driver_saveMac();
     b94:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <lora_driver_saveMac>

	// Enable Adaptive Data Rate
	lora_driver_setAdaptiveDataRate(LORA_ON);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <lora_driver_setAdaptiveDataRate>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	lora_driver_setReceiveDelay(500);
     b9e:	84 ef       	ldi	r24, 0xF4	; 244
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 d6 27 	call	0x4fac	; 0x4fac <lora_driver_setReceiveDelay>

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     ba6:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 d7 26 	call	0x4dae	; 0x4dae <lora_driver_join>
     bae:	08 2f       	mov	r16, r24
		print_sharedf("Join Network Tries Left:%d >%s<", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     bb0:	0e 94 ed 28 	call	0x51da	; 0x51da <lora_driver_mapReturnCodeToText>
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	1f 92       	push	r1
     bba:	1f 93       	push	r17
     bbc:	85 ef       	ldi	r24, 0xF5	; 245
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	74 dd       	rcall	.-1304   	; 0x6ae <print_sharedf>

		if ( rc != LORA_ACCEPTED)
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	08 30       	cpi	r16, 0x08	; 8
     bd4:	41 f0       	breq	.+16     	; 0xbe6 <_lora_setup+0x94>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     bd6:	66 e3       	ldi	r22, 0x36	; 54
     bd8:	71 e0       	ldi	r23, 0x01	; 1
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     be2:	11 50       	subi	r17, 0x01	; 1
     be4:	09 f7       	brne	.-62     	; 0xba8 <_lora_setup+0x56>

	if (rc == LORA_ACCEPTED)
     be6:	08 30       	cpi	r16, 0x08	; 8
     be8:	41 f4       	brne	.+16     	; 0xbfa <_lora_setup+0xa8>
	{
		// Connected to LoRaWAN :-)
		print_sharedf("Connected to the LoRaWAN Network successfully.");
     bea:	85 e1       	ldi	r24, 0x15	; 21
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	5d dd       	rcall	.-1350   	; 0x6ae <print_sharedf>
		while (1)
		{
			taskYIELD();
		}
	}
}
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
	{
		// Something went wrong
		// Lets stay here
		while (1)
		{
			taskYIELD();
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <_lora_setup+0xac>
     bfa:	f4 d4       	rcall	.+2536   	; 0x15e4 <vPortYield>
     bfc:	fe cf       	rjmp	.-4      	; 0xbfa <_lora_setup+0xa8>
		}
	}
}
     bfe:	64 96       	adiw	r28, 0x14	; 20
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <lora_handler_task>:

/*
* Function task that stars sending data in the specified 5 minute interval
*/
void lora_handler_task(void* pvParameters){
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	28 97       	sbiw	r28, 0x08	; 8
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     c28:	0e 94 24 15 	call	0x2a48	; 0x2a48 <xTaskGetTickCount>
     c2c:	69 83       	std	Y+1, r22	; 0x01
     c2e:	7a 83       	std	Y+2, r23	; 0x02
     c30:	8b 83       	std	Y+3, r24	; 0x03
     c32:	9c 83       	std	Y+4, r25	; 0x04
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <lora_driver_resetRn2483>
	vTaskDelay(2);
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <vTaskDelay>
	lora_driver_resetRn2483(0);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     c4c:	66 e9       	ldi	r22, 0x96	; 150
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     c58:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <lora_driver_flushBuffers>

	_lora_setup();
     c5c:	7a df       	rcall	.-268    	; 0xb52 <_lora_setup>
	print_sharedf("task run;");
     c5e:	84 e4       	ldi	r24, 0x44	; 68
     c60:	94 e0       	ldi	r25, 0x04	; 4
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	23 dd       	rcall	.-1466   	; 0x6ae <print_sharedf>
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
	for(;;){
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     c6c:	4c e6       	ldi	r20, 0x6C	; 108
     c6e:	52 e0       	ldi	r21, 0x02	; 2
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskDelayUntil>
		_uplink_payload.len = 7;
     c7c:	e8 ed       	ldi	r30, 0xD8	; 216
     c7e:	f7 e0       	ldi	r31, 0x07	; 7
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 83       	st	Z, r24
		
		EventBits_t readyBits = xEventGroupWaitBits(taskBits_ready,
		tempbit_ready&co2bit_ready&lightbit_ready,
     c88:	40 91 d7 15 	lds	r20, 0x15D7	; 0x8015d7 <tempbit_ready>
     c8c:	50 91 d8 15 	lds	r21, 0x15D8	; 0x8015d8 <tempbit_ready+0x1>
     c90:	60 91 d9 15 	lds	r22, 0x15D9	; 0x8015d9 <tempbit_ready+0x2>
     c94:	70 91 da 15 	lds	r23, 0x15DA	; 0x8015da <tempbit_ready+0x3>
     c98:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <co2bit_ready>
     c9c:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <co2bit_ready+0x1>
     ca0:	a0 91 cf 15 	lds	r26, 0x15CF	; 0x8015cf <co2bit_ready+0x2>
     ca4:	b0 91 d0 15 	lds	r27, 0x15D0	; 0x8015d0 <co2bit_ready+0x3>
     ca8:	48 23       	and	r20, r24
     caa:	59 23       	and	r21, r25
     cac:	6a 23       	and	r22, r26
     cae:	7b 23       	and	r23, r27
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
		_uplink_payload.len = 7;
		_uplink_payload.portNo = 1;
		
		EventBits_t readyBits = xEventGroupWaitBits(taskBits_ready,
     cb0:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <lightbit_ready>
     cb4:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <lightbit_ready+0x1>
     cb8:	a0 91 d3 15 	lds	r26, 0x15D3	; 0x8015d3 <lightbit_ready+0x2>
     cbc:	b0 91 d4 15 	lds	r27, 0x15D4	; 0x8015d4 <lightbit_ready+0x3>
     cc0:	48 23       	and	r20, r24
     cc2:	59 23       	and	r21, r25
     cc4:	6a 23       	and	r22, r26
     cc6:	7b 23       	and	r23, r27
     cc8:	cc 24       	eor	r12, r12
     cca:	ca 94       	dec	r12
     ccc:	dc 2c       	mov	r13, r12
     cce:	76 01       	movw	r14, r12
     cd0:	01 e0       	ldi	r16, 0x01	; 1
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <taskBits_ready>
     cd8:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <taskBits_ready+0x1>
     cdc:	2e d1       	rcall	.+604    	; 0xf3a <xEventGroupWaitBits>
     cde:	8b 01       	movw	r16, r22
     ce0:	9c 01       	movw	r18, r24
		tempbit_ready&co2bit_ready&lightbit_ready,
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		if((readyBits & (tempbit_ready&co2bit_ready&lightbit_ready)) == (tempbit_ready&co2bit_ready&lightbit_ready)){
     ce2:	40 91 d7 15 	lds	r20, 0x15D7	; 0x8015d7 <tempbit_ready>
     ce6:	50 91 d8 15 	lds	r21, 0x15D8	; 0x8015d8 <tempbit_ready+0x1>
     cea:	60 91 d9 15 	lds	r22, 0x15D9	; 0x8015d9 <tempbit_ready+0x2>
     cee:	70 91 da 15 	lds	r23, 0x15DA	; 0x8015da <tempbit_ready+0x3>
     cf2:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <co2bit_ready>
     cf6:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <co2bit_ready+0x1>
     cfa:	a0 91 cf 15 	lds	r26, 0x15CF	; 0x8015cf <co2bit_ready+0x2>
     cfe:	b0 91 d0 15 	lds	r27, 0x15D0	; 0x8015d0 <co2bit_ready+0x3>
     d02:	84 23       	and	r24, r20
     d04:	95 23       	and	r25, r21
     d06:	a6 23       	and	r26, r22
     d08:	b7 23       	and	r27, r23
     d0a:	40 91 d1 15 	lds	r20, 0x15D1	; 0x8015d1 <lightbit_ready>
     d0e:	50 91 d2 15 	lds	r21, 0x15D2	; 0x8015d2 <lightbit_ready+0x1>
     d12:	60 91 d3 15 	lds	r22, 0x15D3	; 0x8015d3 <lightbit_ready+0x2>
     d16:	70 91 d4 15 	lds	r23, 0x15D4	; 0x8015d4 <lightbit_ready+0x3>
     d1a:	84 23       	and	r24, r20
     d1c:	95 23       	and	r25, r21
     d1e:	a6 23       	and	r26, r22
     d20:	b7 23       	and	r27, r23
     d22:	b9 01       	movw	r22, r18
     d24:	a8 01       	movw	r20, r16
     d26:	48 23       	and	r20, r24
     d28:	59 23       	and	r21, r25
     d2a:	6a 23       	and	r22, r26
     d2c:	7b 23       	and	r23, r27
     d2e:	84 17       	cp	r24, r20
     d30:	95 07       	cpc	r25, r21
     d32:	a6 07       	cpc	r26, r22
     d34:	b7 07       	cpc	r27, r23
     d36:	09 f0       	breq	.+2      	; 0xd3a <lora_handler_task+0x126>
			
			double temp = (double) get_temp();
     d38:	99 cf       	rjmp	.-206    	; 0xc6c <lora_handler_task+0x58>
     d3a:	60 dd       	rcall	.-1344   	; 0x7fc <get_temp>
     d3c:	d6 2e       	mov	r13, r22
     d3e:	c7 2e       	mov	r12, r23
			uint16_t humidity = get_humidity();
     d40:	b8 2e       	mov	r11, r24
     d42:	a9 2e       	mov	r10, r25
			uint16_t co2_val = get_co2();
     d44:	2c dd       	rcall	.-1448   	; 0x79e <get_humidity>
     d46:	8c 01       	movw	r16, r24
     d48:	c4 dd       	rcall	.-1144   	; 0x8d2 <get_co2>
			uint16_t light_val = get_light();
     d4a:	7c 01       	movw	r14, r24
     d4c:	1d de       	rcall	.-966    	; 0x988 <get_light>
     d4e:	88 2e       	mov	r8, r24
     d50:	99 2e       	mov	r9, r25
			
			if(temp == 0.0 || humidity == 0 || co2_val == 0){
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	a9 01       	movw	r20, r18
     d58:	6d 2d       	mov	r22, r13
     d5a:	7c 2d       	mov	r23, r12
     d5c:	8b 2d       	mov	r24, r11
     d5e:	9a 2d       	mov	r25, r10
     d60:	0e 94 bd 22 	call	0x457a	; 0x457a <__cmpsf2>
     d64:	88 23       	and	r24, r24
     d66:	31 f0       	breq	.+12     	; 0xd74 <lora_handler_task+0x160>
     d68:	01 15       	cp	r16, r1
     d6a:	11 05       	cpc	r17, r1
     d6c:	19 f0       	breq	.+6      	; 0xd74 <lora_handler_task+0x160>
     d6e:	e1 14       	cp	r14, r1
     d70:	f1 04       	cpc	r15, r1
     d72:	99 f4       	brne	.+38     	; 0xd9a <lora_handler_task+0x186>
				print_sharedf("Sensors are still calibrating %f, %d, %d", temp, humidity, co2_val);
     d74:	ff 92       	push	r15
     d76:	ef 92       	push	r14
     d78:	1f 93       	push	r17
     d7a:	0f 93       	push	r16
     d7c:	af 92       	push	r10
     d7e:	bf 92       	push	r11
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	8e e4       	ldi	r24, 0x4E	; 78
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	9f 93       	push	r25
     d8a:	8f 93       	push	r24
     d8c:	90 dc       	rcall	.-1760   	; 0x6ae <print_sharedf>
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	69 cf       	rjmp	.-302    	; 0xc6c <lora_handler_task+0x58>
			}
			else{
				double val1=0;
     d9a:	1d 82       	std	Y+5, r1	; 0x05
     d9c:	1e 82       	std	Y+6, r1	; 0x06
     d9e:	1f 82       	std	Y+7, r1	; 0x07
     da0:	18 86       	std	Y+8, r1	; 0x08
				double val2=0;
				val2 = modf(temp, &val1);
     da2:	ae 01       	movw	r20, r28
     da4:	4b 5f       	subi	r20, 0xFB	; 251
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	6d 2d       	mov	r22, r13
     daa:	7c 2d       	mov	r23, r12
     dac:	8b 2d       	mov	r24, r11
     dae:	9a 2d       	mov	r25, r10
     db0:	0e 94 3f 23 	call	0x467e	; 0x467e <modf>
				val2 = val2 * 100;
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	48 ec       	ldi	r20, 0xC8	; 200
     dba:	52 e4       	ldi	r21, 0x42	; 66
     dbc:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__mulsf3>
     dc0:	2b 01       	movw	r4, r22
     dc2:	3c 01       	movw	r6, r24
				
				//temperature
				print_sharedf("Temperature: %f", temp);
     dc4:	af 92       	push	r10
     dc6:	bf 92       	push	r11
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	87 e7       	ldi	r24, 0x77	; 119
     dce:	94 e0       	ldi	r25, 0x04	; 4
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	6c dc       	rcall	.-1832   	; 0x6ae <print_sharedf>
				_uplink_payload.bytes[0] = (int) val1;
     dd6:	6d 81       	ldd	r22, Y+5	; 0x05
     dd8:	7e 81       	ldd	r23, Y+6	; 0x06
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixsfsi>
     de2:	0f 2e       	mov	r0, r31
     de4:	f8 ed       	ldi	r31, 0xD8	; 216
     de6:	cf 2e       	mov	r12, r31
     de8:	f7 e0       	ldi	r31, 0x07	; 7
     dea:	df 2e       	mov	r13, r31
     dec:	f0 2d       	mov	r31, r0
     dee:	f6 01       	movw	r30, r12
     df0:	62 83       	std	Z+2, r22	; 0x02
				_uplink_payload.bytes[1] = (int) val2;
     df2:	c3 01       	movw	r24, r6
     df4:	b2 01       	movw	r22, r4
     df6:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixsfsi>
     dfa:	f6 01       	movw	r30, r12
				
				//humidity
				print_sharedf("Humidity: %d", humidity);
     dfc:	63 83       	std	Z+3, r22	; 0x03
     dfe:	1f 93       	push	r17
     e00:	0f 93       	push	r16
     e02:	87 e8       	ldi	r24, 0x87	; 135
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	9f 93       	push	r25
     e08:	8f 93       	push	r24
				_uplink_payload.bytes[2] = humidity;
     e0a:	51 dc       	rcall	.-1886   	; 0x6ae <print_sharedf>
     e0c:	f6 01       	movw	r30, r12
				
				//co2
				print_sharedf("CO2: %d", co2_val);
     e0e:	04 83       	std	Z+4, r16	; 0x04
     e10:	ff 92       	push	r15
     e12:	ef 92       	push	r14
     e14:	84 e9       	ldi	r24, 0x94	; 148
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	9f 93       	push	r25
     e1a:	8f 93       	push	r24
				_uplink_payload.bytes[3] = co2_val >> 8;
     e1c:	48 dc       	rcall	.-1904   	; 0x6ae <print_sharedf>
     e1e:	f6 01       	movw	r30, r12
				_uplink_payload.bytes[4] = co2_val & 0xFF;
     e20:	f5 82       	std	Z+5, r15	; 0x05
				
				//light
				print_sharedf("Light in lux: %d", light_val);
     e22:	e6 82       	std	Z+6, r14	; 0x06
     e24:	9f 92       	push	r9
     e26:	8f 92       	push	r8
     e28:	8c e9       	ldi	r24, 0x9C	; 156
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	9f 93       	push	r25
     e2e:	8f 93       	push	r24
     e30:	3e dc       	rcall	.-1924   	; 0x6ae <print_sharedf>
				_uplink_payload.bytes[5] = light_val >> 8;
     e32:	f6 01       	movw	r30, r12
     e34:	97 82       	std	Z+7, r9	; 0x07
				_uplink_payload.bytes[6] = light_val & 0xFF;
     e36:	80 86       	std	Z+8, r8	; 0x08
				
				char* message = lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload));
     e38:	b6 01       	movw	r22, r12
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0e 94 00 27 	call	0x4e00	; 0x4e00 <lora_driver_sendUploadMessage>
     e40:	0e 94 ed 28 	call	0x51da	; 0x51da <lora_driver_mapReturnCodeToText>
				print_sharedf("Upload Message >%s<", message);
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	8d ea       	ldi	r24, 0xAD	; 173
     e4a:	94 e0       	ldi	r25, 0x04	; 4
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	2e dc       	rcall	.-1956   	; 0x6ae <print_sharedf>
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	07 cf       	rjmp	.-498    	; 0xc6c <lora_handler_task+0x58>

00000e5e <lora_handler_initialize>:
void lora_handler_task(void* pvParameters);

/*
* Function call used to start the networking task
*/
void lora_handler_initialize(uint16_t lora_handler_task_priority, EventGroupHandle_t taskReadyBits, EventBits_t tempbit, EventBits_t co2bit, EventBits_t lightbit){
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
	
	taskBits_ready = taskReadyBits;
     e6e:	70 93 d6 15 	sts	0x15D6, r23	; 0x8015d6 <taskBits_ready+0x1>
     e72:	60 93 d5 15 	sts	0x15D5, r22	; 0x8015d5 <taskBits_ready>
	tempbit_ready = tempbit;
     e76:	20 93 d7 15 	sts	0x15D7, r18	; 0x8015d7 <tempbit_ready>
     e7a:	30 93 d8 15 	sts	0x15D8, r19	; 0x8015d8 <tempbit_ready+0x1>
     e7e:	40 93 d9 15 	sts	0x15D9, r20	; 0x8015d9 <tempbit_ready+0x2>
     e82:	50 93 da 15 	sts	0x15DA, r21	; 0x8015da <tempbit_ready+0x3>
	co2bit_ready = co2bit;
     e86:	e0 92 cd 15 	sts	0x15CD, r14	; 0x8015cd <co2bit_ready>
     e8a:	f0 92 ce 15 	sts	0x15CE, r15	; 0x8015ce <co2bit_ready+0x1>
     e8e:	00 93 cf 15 	sts	0x15CF, r16	; 0x8015cf <co2bit_ready+0x2>
     e92:	10 93 d0 15 	sts	0x15D0, r17	; 0x8015d0 <co2bit_ready+0x3>
	lightbit_ready = lightbit;
     e96:	a0 92 d1 15 	sts	0x15D1, r10	; 0x8015d1 <lightbit_ready>
     e9a:	b0 92 d2 15 	sts	0x15D2, r11	; 0x8015d2 <lightbit_ready+0x1>
     e9e:	c0 92 d3 15 	sts	0x15D3, r12	; 0x8015d3 <lightbit_ready+0x2>
     ea2:	d0 92 d4 15 	sts	0x15D4, r13	; 0x8015d4 <lightbit_ready+0x3>
	
	xTaskCreate(
     ea6:	e1 2c       	mov	r14, r1
     ea8:	f1 2c       	mov	r15, r1
     eaa:	08 2f       	mov	r16, r24
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	48 e8       	ldi	r20, 0x88	; 136
     eb2:	51 e0       	ldi	r21, 0x01	; 1
     eb4:	61 ec       	ldi	r22, 0xC1	; 193
     eb6:	74 e0       	ldi	r23, 0x04	; 4
     eb8:	8a e0       	ldi	r24, 0x0A	; 10
     eba:	96 e0       	ldi	r25, 0x06	; 6
     ebc:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	bf 90       	pop	r11
     ece:	af 90       	pop	r10
     ed0:	08 95       	ret

00000ed2 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     ed2:	0f 93       	push	r16
     ed4:	01 11       	cpse	r16, r1
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <prvTestWaitCondition+0x1e>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	82 23       	and	r24, r18
     ede:	93 23       	and	r25, r19
     ee0:	a4 23       	and	r26, r20
     ee2:	b5 23       	and	r27, r21
     ee4:	89 2b       	or	r24, r25
     ee6:	8a 2b       	or	r24, r26
     ee8:	8b 2b       	or	r24, r27
     eea:	79 f4       	brne	.+30     	; 0xf0a <prvTestWaitCondition+0x38>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	10 c0       	rjmp	.+32     	; 0xf10 <prvTestWaitCondition+0x3e>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	82 23       	and	r24, r18
     ef6:	93 23       	and	r25, r19
     ef8:	a4 23       	and	r26, r20
     efa:	b5 23       	and	r27, r21
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	4a 07       	cpc	r20, r26
     f02:	5b 07       	cpc	r21, r27
     f04:	21 f0       	breq	.+8      	; 0xf0e <prvTestWaitCondition+0x3c>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <prvTestWaitCondition+0x3e>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <prvTestWaitCondition+0x3e>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <xEventGroupCreate>:
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	8f e0       	ldi	r24, 0x0F	; 15
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	af d1       	rcall	.+862    	; 0x127c <pvPortMalloc>
     f1e:	ec 01       	movw	r28, r24
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	39 f0       	breq	.+14     	; 0xf32 <xEventGroupCreate+0x1e>
     f24:	fc 01       	movw	r30, r24
     f26:	11 92       	st	Z+, r1
     f28:	11 92       	st	Z+, r1
     f2a:	11 92       	st	Z+, r1
     f2c:	11 92       	st	Z+, r1
     f2e:	cf 01       	movw	r24, r30
     f30:	8b d2       	rcall	.+1302   	; 0x1448 <vListInitialise>
     f32:	ce 01       	movw	r24, r28
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <xEventGroupWaitBits>:
     f3a:	2f 92       	push	r2
     f3c:	3f 92       	push	r3
     f3e:	4f 92       	push	r4
     f40:	5f 92       	push	r5
     f42:	6f 92       	push	r6
     f44:	7f 92       	push	r7
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
     f60:	4a 01       	movw	r8, r20
     f62:	5b 01       	movw	r10, r22
     f64:	62 2e       	mov	r6, r18
     f66:	70 2e       	mov	r7, r16
     f68:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <vTaskSuspendAll>
     f6c:	28 80       	ld	r2, Y
     f6e:	39 80       	ldd	r3, Y+1	; 0x01
     f70:	4a 80       	ldd	r4, Y+2	; 0x02
     f72:	5b 80       	ldd	r5, Y+3	; 0x03
     f74:	a5 01       	movw	r20, r10
     f76:	94 01       	movw	r18, r8
     f78:	c2 01       	movw	r24, r4
     f7a:	b1 01       	movw	r22, r2
     f7c:	aa df       	rcall	.-172    	; 0xed2 <prvTestWaitCondition>
     f7e:	88 23       	and	r24, r24
     f80:	a1 f0       	breq	.+40     	; 0xfaa <xEventGroupWaitBits+0x70>
     f82:	66 20       	and	r6, r6
     f84:	89 f1       	breq	.+98     	; 0xfe8 <xEventGroupWaitBits+0xae>
     f86:	d5 01       	movw	r26, r10
     f88:	c4 01       	movw	r24, r8
     f8a:	80 95       	com	r24
     f8c:	90 95       	com	r25
     f8e:	a0 95       	com	r26
     f90:	b0 95       	com	r27
     f92:	82 21       	and	r24, r2
     f94:	93 21       	and	r25, r3
     f96:	a4 21       	and	r26, r4
     f98:	b5 21       	and	r27, r5
     f9a:	88 83       	st	Y, r24
     f9c:	99 83       	std	Y+1, r25	; 0x01
     f9e:	aa 83       	std	Y+2, r26	; 0x02
     fa0:	bb 83       	std	Y+3, r27	; 0x03
     fa2:	c1 2c       	mov	r12, r1
     fa4:	d1 2c       	mov	r13, r1
     fa6:	76 01       	movw	r14, r12
     fa8:	22 c0       	rjmp	.+68     	; 0xfee <xEventGroupWaitBits+0xb4>
     faa:	c1 14       	cp	r12, r1
     fac:	d1 04       	cpc	r13, r1
     fae:	e1 04       	cpc	r14, r1
     fb0:	f1 04       	cpc	r15, r1
     fb2:	e9 f0       	breq	.+58     	; 0xfee <xEventGroupWaitBits+0xb4>
     fb4:	61 10       	cpse	r6, r1
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <xEventGroupWaitBits+0x86>
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	ba 01       	movw	r22, r20
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <xEventGroupWaitBits+0x8e>
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	71 e0       	ldi	r23, 0x01	; 1
     fc8:	71 10       	cpse	r7, r1
     fca:	74 60       	ori	r23, 0x04	; 4
     fcc:	48 29       	or	r20, r8
     fce:	59 29       	or	r21, r9
     fd0:	6a 29       	or	r22, r10
     fd2:	7b 29       	or	r23, r11
     fd4:	97 01       	movw	r18, r14
     fd6:	86 01       	movw	r16, r12
     fd8:	ce 01       	movw	r24, r28
     fda:	04 96       	adiw	r24, 0x04	; 4
     fdc:	0e 94 36 18 	call	0x306c	; 0x306c <vTaskPlaceOnUnorderedEventList>
     fe0:	21 2c       	mov	r2, r1
     fe2:	31 2c       	mov	r3, r1
     fe4:	21 01       	movw	r4, r2
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <xEventGroupWaitBits+0xb4>
     fe8:	c1 2c       	mov	r12, r1
     fea:	d1 2c       	mov	r13, r1
     fec:	76 01       	movw	r14, r12
     fee:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
     ff2:	cd 28       	or	r12, r13
     ff4:	ce 28       	or	r12, r14
     ff6:	cf 28       	or	r12, r15
     ff8:	59 f1       	breq	.+86     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
     ffa:	81 11       	cpse	r24, r1
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	f2 d2       	rcall	.+1508   	; 0x15e4 <vPortYield>
    1000:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <uxTaskResetEventItemValue>
    1004:	6b 01       	movw	r12, r22
    1006:	7c 01       	movw	r14, r24
    1008:	91 fd       	sbrc	r25, 1
    100a:	1f c0       	rjmp	.+62     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	0f 92       	push	r0
    1012:	c8 80       	ld	r12, Y
    1014:	d9 80       	ldd	r13, Y+1	; 0x01
    1016:	ea 80       	ldd	r14, Y+2	; 0x02
    1018:	fb 80       	ldd	r15, Y+3	; 0x03
    101a:	07 2d       	mov	r16, r7
    101c:	a5 01       	movw	r20, r10
    101e:	94 01       	movw	r18, r8
    1020:	c7 01       	movw	r24, r14
    1022:	b6 01       	movw	r22, r12
    1024:	56 df       	rcall	.-340    	; 0xed2 <prvTestWaitCondition>
    1026:	88 23       	and	r24, r24
    1028:	71 f0       	breq	.+28     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    102a:	66 20       	and	r6, r6
    102c:	61 f0       	breq	.+24     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    102e:	80 94       	com	r8
    1030:	90 94       	com	r9
    1032:	a0 94       	com	r10
    1034:	b0 94       	com	r11
    1036:	8c 20       	and	r8, r12
    1038:	9d 20       	and	r9, r13
    103a:	ae 20       	and	r10, r14
    103c:	bf 20       	and	r11, r15
    103e:	88 82       	st	Y, r8
    1040:	99 82       	std	Y+1, r9	; 0x01
    1042:	aa 82       	std	Y+2, r10	; 0x02
    1044:	bb 82       	std	Y+3, r11	; 0x03
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	16 01       	movw	r2, r12
    104c:	27 01       	movw	r4, r14
    104e:	55 24       	eor	r5, r5
    1050:	c2 01       	movw	r24, r4
    1052:	b1 01       	movw	r22, r2
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	bf 90       	pop	r11
    1066:	af 90       	pop	r10
    1068:	9f 90       	pop	r9
    106a:	8f 90       	pop	r8
    106c:	7f 90       	pop	r7
    106e:	6f 90       	pop	r6
    1070:	5f 90       	pop	r5
    1072:	4f 90       	pop	r4
    1074:	3f 90       	pop	r3
    1076:	2f 90       	pop	r2
    1078:	08 95       	ret

0000107a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
    107a:	4f 92       	push	r4
    107c:	5f 92       	push	r5
    107e:	6f 92       	push	r6
    1080:	7f 92       	push	r7
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	ec 01       	movw	r28, r24
    1098:	6a 01       	movw	r12, r20
    109a:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    109c:	8c 01       	movw	r16, r24
    109e:	09 5f       	subi	r16, 0xF9	; 249
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    10a2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    10a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    10a8:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    10aa:	88 81       	ld	r24, Y
    10ac:	99 81       	ldd	r25, Y+1	; 0x01
    10ae:	aa 81       	ldd	r26, Y+2	; 0x02
    10b0:	bb 81       	ldd	r27, Y+3	; 0x03
    10b2:	c8 2a       	or	r12, r24
    10b4:	d9 2a       	or	r13, r25
    10b6:	ea 2a       	or	r14, r26
    10b8:	fb 2a       	or	r15, r27
    10ba:	c8 82       	st	Y, r12
    10bc:	d9 82       	std	Y+1, r13	; 0x01
    10be:	ea 82       	std	Y+2, r14	; 0x02
    10c0:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    10c2:	c1 2c       	mov	r12, r1
    10c4:	d1 2c       	mov	r13, r1
    10c6:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10c8:	3d c0       	rjmp	.+122    	; 0x1144 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
    10ca:	a4 80       	ldd	r10, Z+4	; 0x04
    10cc:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	a2 81       	ldd	r26, Z+2	; 0x02
    10d4:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10d6:	ac 01       	movw	r20, r24
    10d8:	bd 01       	movw	r22, r26
    10da:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10dc:	b2 fd       	sbrc	r27, 2
    10de:	0e c0       	rjmp	.+28     	; 0x10fc <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    10e0:	48 80       	ld	r4, Y
    10e2:	59 80       	ldd	r5, Y+1	; 0x01
    10e4:	6a 80       	ldd	r6, Y+2	; 0x02
    10e6:	7b 80       	ldd	r7, Y+3	; 0x03
    10e8:	44 22       	and	r4, r20
    10ea:	55 22       	and	r5, r21
    10ec:	66 22       	and	r6, r22
    10ee:	77 22       	and	r7, r23
    10f0:	45 28       	or	r4, r5
    10f2:	46 28       	or	r4, r6
    10f4:	47 28       	or	r4, r7
    10f6:	89 f4       	brne	.+34     	; 0x111a <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	12 c0       	rjmp	.+36     	; 0x1120 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    10fc:	48 80       	ld	r4, Y
    10fe:	59 80       	ldd	r5, Y+1	; 0x01
    1100:	6a 80       	ldd	r6, Y+2	; 0x02
    1102:	7b 80       	ldd	r7, Y+3	; 0x03
    1104:	44 22       	and	r4, r20
    1106:	55 22       	and	r5, r21
    1108:	66 22       	and	r6, r22
    110a:	77 22       	and	r7, r23
    110c:	44 15       	cp	r20, r4
    110e:	55 05       	cpc	r21, r5
    1110:	66 05       	cpc	r22, r6
    1112:	77 05       	cpc	r23, r7
    1114:	21 f0       	breq	.+8      	; 0x111e <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    111a:	21 e0       	ldi	r18, 0x01	; 1
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    111e:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1120:	22 23       	and	r18, r18
    1122:	71 f0       	breq	.+28     	; 0x1140 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1124:	b0 ff       	sbrs	r27, 0
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1128:	c4 2a       	or	r12, r20
    112a:	d5 2a       	or	r13, r21
    112c:	e6 2a       	or	r14, r22
    112e:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1130:	48 81       	ld	r20, Y
    1132:	59 81       	ldd	r21, Y+1	; 0x01
    1134:	6a 81       	ldd	r22, Y+2	; 0x02
    1136:	7b 81       	ldd	r23, Y+3	; 0x03
    1138:	72 60       	ori	r23, 0x02	; 2
    113a:	cf 01       	movw	r24, r30
    113c:	0e 94 71 19 	call	0x32e2	; 0x32e2 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1140:	ea 2d       	mov	r30, r10
    1142:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1144:	e0 17       	cp	r30, r16
    1146:	f1 07       	cpc	r31, r17
    1148:	09 f0       	breq	.+2      	; 0x114c <xEventGroupSetBits+0xd2>
    114a:	bf cf       	rjmp	.-130    	; 0x10ca <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    114c:	c0 94       	com	r12
    114e:	d0 94       	com	r13
    1150:	e0 94       	com	r14
    1152:	f0 94       	com	r15
    1154:	88 81       	ld	r24, Y
    1156:	99 81       	ldd	r25, Y+1	; 0x01
    1158:	aa 81       	ldd	r26, Y+2	; 0x02
    115a:	bb 81       	ldd	r27, Y+3	; 0x03
    115c:	c8 22       	and	r12, r24
    115e:	d9 22       	and	r13, r25
    1160:	ea 22       	and	r14, r26
    1162:	fb 22       	and	r15, r27
    1164:	c8 82       	st	Y, r12
    1166:	d9 82       	std	Y+1, r13	; 0x01
    1168:	ea 82       	std	Y+2, r14	; 0x02
    116a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    116c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1170:	68 81       	ld	r22, Y
    1172:	79 81       	ldd	r23, Y+1	; 0x01
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
    1188:	bf 90       	pop	r11
    118a:	af 90       	pop	r10
    118c:	7f 90       	pop	r7
    118e:	6f 90       	pop	r6
    1190:	5f 90       	pop	r5
    1192:	4f 90       	pop	r4
    1194:	08 95       	ret

00001196 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1196:	ea ef       	ldi	r30, 0xFA	; 250
    1198:	f7 e0       	ldi	r31, 0x07	; 7
    119a:	ae ef       	ldi	r26, 0xFE	; 254
    119c:	b7 e0       	ldi	r27, 0x07	; 7
    119e:	b1 83       	std	Z+1, r27	; 0x01
    11a0:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    11a2:	13 82       	std	Z+3, r1	; 0x03
    11a4:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    11a6:	e2 eb       	ldi	r30, 0xB2	; 178
    11a8:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    11aa:	f0 93 f9 07 	sts	0x07F9, r31	; 0x8007f9 <pxEnd+0x1>
    11ae:	e0 93 f8 07 	sts	0x07F8, r30	; 0x8007f8 <pxEnd>
    pxEnd->xBlockSize = 0;
    11b2:	13 82       	std	Z+3, r1	; 0x03
    11b4:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    11b6:	11 82       	std	Z+1, r1	; 0x01
    11b8:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    11ba:	84 eb       	ldi	r24, 0xB4	; 180
    11bc:	9b e0       	ldi	r25, 0x0B	; 11
    11be:	13 96       	adiw	r26, 0x03	; 3
    11c0:	9c 93       	st	X, r25
    11c2:	8e 93       	st	-X, r24
    11c4:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    11c6:	ed 93       	st	X+, r30
    11c8:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11ca:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <xMinimumEverFreeBytesRemaining+0x1>
    11ce:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11d2:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xFreeBytesRemaining+0x1>
    11d6:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e8       	ldi	r25, 0x80	; 128
    11de:	90 93 ef 07 	sts	0x07EF, r25	; 0x8007ef <xBlockAllocatedBit+0x1>
    11e2:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <xBlockAllocatedBit>
    11e6:	08 95       	ret

000011e8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    11ee:	aa ef       	ldi	r26, 0xFA	; 250
    11f0:	b7 e0       	ldi	r27, 0x07	; 7
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <prvInsertBlockIntoFreeList+0xe>
    11f4:	df 01       	movw	r26, r30
    11f6:	ed 91       	ld	r30, X+
    11f8:	fc 91       	ld	r31, X
    11fa:	11 97       	sbiw	r26, 0x01	; 1
    11fc:	ec 17       	cp	r30, r28
    11fe:	fd 07       	cpc	r31, r29
    1200:	c8 f3       	brcs	.-14     	; 0x11f4 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1202:	12 96       	adiw	r26, 0x02	; 2
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	13 97       	sbiw	r26, 0x03	; 3
    120a:	9d 01       	movw	r18, r26
    120c:	28 0f       	add	r18, r24
    120e:	39 1f       	adc	r19, r25
    1210:	c2 17       	cp	r28, r18
    1212:	d3 07       	cpc	r29, r19
    1214:	49 f4       	brne	.+18     	; 0x1228 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1216:	2a 81       	ldd	r18, Y+2	; 0x02
    1218:	3b 81       	ldd	r19, Y+3	; 0x03
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	13 96       	adiw	r26, 0x03	; 3
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
    1224:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    1226:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	9b 81       	ldd	r25, Y+3	; 0x03
    122c:	9e 01       	movw	r18, r28
    122e:	28 0f       	add	r18, r24
    1230:	39 1f       	adc	r19, r25
    1232:	e2 17       	cp	r30, r18
    1234:	f3 07       	cpc	r31, r19
    1236:	c1 f4       	brne	.+48     	; 0x1268 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    1238:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <pxEnd>
    123c:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <pxEnd+0x1>
    1240:	e2 17       	cp	r30, r18
    1242:	f3 07       	cpc	r31, r19
    1244:	71 f0       	breq	.+28     	; 0x1262 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1246:	22 81       	ldd	r18, Z+2	; 0x02
    1248:	33 81       	ldd	r19, Z+3	; 0x03
    124a:	82 0f       	add	r24, r18
    124c:	93 1f       	adc	r25, r19
    124e:	9b 83       	std	Y+3, r25	; 0x03
    1250:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	11 97       	sbiw	r26, 0x01	; 1
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	99 83       	std	Y+1, r25	; 0x01
    125e:	88 83       	st	Y, r24
    1260:	05 c0       	rjmp	.+10     	; 0x126c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1262:	39 83       	std	Y+1, r19	; 0x01
    1264:	28 83       	st	Y, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1268:	f9 83       	std	Y+1, r31	; 0x01
    126a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    126c:	ca 17       	cp	r28, r26
    126e:	db 07       	cpc	r29, r27
    1270:	11 f0       	breq	.+4      	; 0x1276 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1272:	cd 93       	st	X+, r28
    1274:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    128a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    128e:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxEnd>
    1292:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxEnd+0x1>
    1296:	89 2b       	or	r24, r25
    1298:	09 f4       	brne	.+2      	; 0x129c <pvPortMalloc+0x20>
        {
            prvHeapInit();
    129a:	7d df       	rcall	.-262    	; 0x1196 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    129c:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <xBlockAllocatedBit>
    12a0:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <xBlockAllocatedBit+0x1>
    12a4:	80 23       	and	r24, r16
    12a6:	91 23       	and	r25, r17
    12a8:	89 2b       	or	r24, r25
    12aa:	09 f0       	breq	.+2      	; 0x12ae <pvPortMalloc+0x32>
    12ac:	76 c0       	rjmp	.+236    	; 0x139a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    12ae:	01 15       	cp	r16, r1
    12b0:	11 05       	cpc	r17, r1
    12b2:	49 f0       	breq	.+18     	; 0x12c6 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    12b4:	c8 01       	movw	r24, r16
    12b6:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    12b8:	08 17       	cp	r16, r24
    12ba:	19 07       	cpc	r17, r25
    12bc:	18 f0       	brcs	.+6      	; 0x12c4 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    12be:	00 e0       	ldi	r16, 0x00	; 0
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    12c4:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    12c6:	01 15       	cp	r16, r1
    12c8:	11 05       	cpc	r17, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <pvPortMalloc+0x52>
    12cc:	69 c0       	rjmp	.+210    	; 0x13a0 <pvPortMalloc+0x124>
    12ce:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <xFreeBytesRemaining>
    12d2:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <xFreeBytesRemaining+0x1>
    12d6:	80 17       	cp	r24, r16
    12d8:	91 07       	cpc	r25, r17
    12da:	08 f4       	brcc	.+2      	; 0x12de <pvPortMalloc+0x62>
    12dc:	64 c0       	rjmp	.+200    	; 0x13a6 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    12de:	c0 91 fa 07 	lds	r28, 0x07FA	; 0x8007fa <xStart>
    12e2:	d0 91 fb 07 	lds	r29, 0x07FB	; 0x8007fb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    12e6:	ea ef       	ldi	r30, 0xFA	; 250
    12e8:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    12ec:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    12ee:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	80 17       	cp	r24, r16
    12f6:	91 07       	cpc	r25, r17
    12f8:	20 f4       	brcc	.+8      	; 0x1302 <pvPortMalloc+0x86>
    12fa:	88 81       	ld	r24, Y
    12fc:	99 81       	ldd	r25, Y+1	; 0x01
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	a9 f7       	brne	.-22     	; 0x12ec <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    1302:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxEnd>
    1306:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxEnd+0x1>
    130a:	c8 17       	cp	r28, r24
    130c:	d9 07       	cpc	r29, r25
    130e:	09 f4       	brne	.+2      	; 0x1312 <pvPortMalloc+0x96>
    1310:	4d c0       	rjmp	.+154    	; 0x13ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1312:	e0 80       	ld	r14, Z
    1314:	f1 80       	ldd	r15, Z+1	; 0x01
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	e8 0e       	add	r14, r24
    131a:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    131c:	88 81       	ld	r24, Y
    131e:	99 81       	ldd	r25, Y+1	; 0x01
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1324:	2a 81       	ldd	r18, Y+2	; 0x02
    1326:	3b 81       	ldd	r19, Y+3	; 0x03
    1328:	20 1b       	sub	r18, r16
    132a:	31 0b       	sbc	r19, r17
    132c:	29 30       	cpi	r18, 0x09	; 9
    132e:	31 05       	cpc	r19, r1
    1330:	48 f0       	brcs	.+18     	; 0x1344 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1332:	ce 01       	movw	r24, r28
    1334:	80 0f       	add	r24, r16
    1336:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1338:	fc 01       	movw	r30, r24
    133a:	33 83       	std	Z+3, r19	; 0x03
    133c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    133e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    1340:	0a 83       	std	Y+2, r16	; 0x02
    1342:	52 df       	rcall	.-348    	; 0x11e8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    1344:	2a 81       	ldd	r18, Y+2	; 0x02
    1346:	3b 81       	ldd	r19, Y+3	; 0x03
    1348:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <xFreeBytesRemaining>
    134c:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <xFreeBytesRemaining+0x1>
    1350:	82 1b       	sub	r24, r18
    1352:	93 0b       	sbc	r25, r19
    1354:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xFreeBytesRemaining+0x1>
    1358:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    135c:	40 91 f4 07 	lds	r20, 0x07F4	; 0x8007f4 <xMinimumEverFreeBytesRemaining>
    1360:	50 91 f5 07 	lds	r21, 0x07F5	; 0x8007f5 <xMinimumEverFreeBytesRemaining+0x1>
    1364:	84 17       	cp	r24, r20
    1366:	95 07       	cpc	r25, r21
    1368:	20 f4       	brcc	.+8      	; 0x1372 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    136a:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <xMinimumEverFreeBytesRemaining+0x1>
    136e:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1372:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <xBlockAllocatedBit>
    1376:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <xBlockAllocatedBit+0x1>
    137a:	28 2b       	or	r18, r24
    137c:	39 2b       	or	r19, r25
    137e:	3b 83       	std	Y+3, r19	; 0x03
    1380:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    1386:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <xNumberOfSuccessfulAllocations>
    138a:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <xNumberOfSuccessfulAllocations+0x1>
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <xNumberOfSuccessfulAllocations+0x1>
    1394:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <xNumberOfSuccessfulAllocations>
    1398:	0b c0       	rjmp	.+22     	; 0x13b0 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    139a:	e1 2c       	mov	r14, r1
    139c:	f1 2c       	mov	r15, r1
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <pvPortMalloc+0x134>
    13a0:	e1 2c       	mov	r14, r1
    13a2:	f1 2c       	mov	r15, r1
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <pvPortMalloc+0x134>
    13a6:	e1 2c       	mov	r14, r1
    13a8:	f1 2c       	mov	r15, r1
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <pvPortMalloc+0x134>
    13ac:	e1 2c       	mov	r14, r1
    13ae:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    13b0:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    13b4:	e1 14       	cp	r14, r1
    13b6:	f1 04       	cpc	r15, r1
    13b8:	11 f4       	brne	.+4      	; 0x13be <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    13ba:	0e 94 1b 22 	call	0x4436	; 0x4436 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    13be:	c7 01       	movw	r24, r14
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	08 95       	ret

000013ce <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	91 f1       	breq	.+100    	; 0x143e <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    13da:	ec 01       	movw	r28, r24
    13dc:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    13de:	4a 81       	ldd	r20, Y+2	; 0x02
    13e0:	5b 81       	ldd	r21, Y+3	; 0x03
    13e2:	20 91 ee 07 	lds	r18, 0x07EE	; 0x8007ee <xBlockAllocatedBit>
    13e6:	30 91 ef 07 	lds	r19, 0x07EF	; 0x8007ef <xBlockAllocatedBit+0x1>
    13ea:	ba 01       	movw	r22, r20
    13ec:	62 23       	and	r22, r18
    13ee:	73 23       	and	r23, r19
    13f0:	67 2b       	or	r22, r23
    13f2:	29 f1       	breq	.+74     	; 0x143e <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    13f4:	68 81       	ld	r22, Y
    13f6:	79 81       	ldd	r23, Y+1	; 0x01
    13f8:	67 2b       	or	r22, r23
    13fa:	09 f5       	brne	.+66     	; 0x143e <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13fc:	20 95       	com	r18
    13fe:	30 95       	com	r19
    1400:	24 23       	and	r18, r20
    1402:	35 23       	and	r19, r21
    1404:	3b 83       	std	Y+3, r19	; 0x03
    1406:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    1408:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	9b 81       	ldd	r25, Y+3	; 0x03
    1410:	20 91 f6 07 	lds	r18, 0x07F6	; 0x8007f6 <xFreeBytesRemaining>
    1414:	30 91 f7 07 	lds	r19, 0x07F7	; 0x8007f7 <xFreeBytesRemaining+0x1>
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xFreeBytesRemaining+0x1>
    1420:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1424:	ce 01       	movw	r24, r28
    1426:	e0 de       	rcall	.-576    	; 0x11e8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    1428:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <xNumberOfSuccessfulFrees>
    142c:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <xNumberOfSuccessfulFrees+0x1>
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <xNumberOfSuccessfulFrees+0x1>
    1436:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    143a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	08 95       	ret

00001448 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1448:	fc 01       	movw	r30, r24
    144a:	03 96       	adiw	r24, 0x03	; 3
    144c:	92 83       	std	Z+2, r25	; 0x02
    144e:	81 83       	std	Z+1, r24	; 0x01
    1450:	4f ef       	ldi	r20, 0xFF	; 255
    1452:	5f ef       	ldi	r21, 0xFF	; 255
    1454:	ba 01       	movw	r22, r20
    1456:	43 83       	std	Z+3, r20	; 0x03
    1458:	54 83       	std	Z+4, r21	; 0x04
    145a:	65 83       	std	Z+5, r22	; 0x05
    145c:	76 83       	std	Z+6, r23	; 0x06
    145e:	90 87       	std	Z+8, r25	; 0x08
    1460:	87 83       	std	Z+7, r24	; 0x07
    1462:	92 87       	std	Z+10, r25	; 0x0a
    1464:	81 87       	std	Z+9, r24	; 0x09
    1466:	10 82       	st	Z, r1
    1468:	08 95       	ret

0000146a <vListInitialiseItem>:
    146a:	fc 01       	movw	r30, r24
    146c:	13 86       	std	Z+11, r1	; 0x0b
    146e:	12 86       	std	Z+10, r1	; 0x0a
    1470:	08 95       	ret

00001472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    147c:	08 81       	ld	r16, Y
    147e:	19 81       	ldd	r17, Y+1	; 0x01
    1480:	2a 81       	ldd	r18, Y+2	; 0x02
    1482:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1484:	0f 3f       	cpi	r16, 0xFF	; 255
    1486:	4f ef       	ldi	r20, 0xFF	; 255
    1488:	14 07       	cpc	r17, r20
    148a:	24 07       	cpc	r18, r20
    148c:	34 07       	cpc	r19, r20
    148e:	21 f4       	brne	.+8      	; 0x1498 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1490:	fc 01       	movw	r30, r24
    1492:	a1 85       	ldd	r26, Z+9	; 0x09
    1494:	b2 85       	ldd	r27, Z+10	; 0x0a
    1496:	11 c0       	rjmp	.+34     	; 0x14ba <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1498:	dc 01       	movw	r26, r24
    149a:	13 96       	adiw	r26, 0x03	; 3
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <vListInsert+0x2e>
    149e:	df 01       	movw	r26, r30
    14a0:	14 96       	adiw	r26, 0x04	; 4
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	15 97       	sbiw	r26, 0x05	; 5
    14a8:	40 81       	ld	r20, Z
    14aa:	51 81       	ldd	r21, Z+1	; 0x01
    14ac:	62 81       	ldd	r22, Z+2	; 0x02
    14ae:	73 81       	ldd	r23, Z+3	; 0x03
    14b0:	04 17       	cp	r16, r20
    14b2:	15 07       	cpc	r17, r21
    14b4:	26 07       	cpc	r18, r22
    14b6:	37 07       	cpc	r19, r23
    14b8:	90 f7       	brcc	.-28     	; 0x149e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    14ba:	14 96       	adiw	r26, 0x04	; 4
    14bc:	ed 91       	ld	r30, X+
    14be:	fc 91       	ld	r31, X
    14c0:	15 97       	sbiw	r26, 0x05	; 5
    14c2:	fd 83       	std	Y+5, r31	; 0x05
    14c4:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14c6:	d7 83       	std	Z+7, r29	; 0x07
    14c8:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    14ca:	bf 83       	std	Y+7, r27	; 0x07
    14cc:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14ce:	15 96       	adiw	r26, 0x05	; 5
    14d0:	dc 93       	st	X, r29
    14d2:	ce 93       	st	-X, r28
    14d4:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    14d6:	9b 87       	std	Y+11, r25	; 0x0b
    14d8:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14da:	fc 01       	movw	r30, r24
    14dc:	20 81       	ld	r18, Z
    14de:	2f 5f       	subi	r18, 0xFF	; 255
    14e0:	20 83       	st	Z, r18
}
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    14f2:	a2 85       	ldd	r26, Z+10	; 0x0a
    14f4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14f6:	c4 81       	ldd	r28, Z+4	; 0x04
    14f8:	d5 81       	ldd	r29, Z+5	; 0x05
    14fa:	86 81       	ldd	r24, Z+6	; 0x06
    14fc:	97 81       	ldd	r25, Z+7	; 0x07
    14fe:	9f 83       	std	Y+7, r25	; 0x07
    1500:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1502:	c6 81       	ldd	r28, Z+6	; 0x06
    1504:	d7 81       	ldd	r29, Z+7	; 0x07
    1506:	84 81       	ldd	r24, Z+4	; 0x04
    1508:	95 81       	ldd	r25, Z+5	; 0x05
    150a:	9d 83       	std	Y+5, r25	; 0x05
    150c:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	8d 91       	ld	r24, X+
    1512:	9c 91       	ld	r25, X
    1514:	12 97       	sbiw	r26, 0x02	; 2
    1516:	e8 17       	cp	r30, r24
    1518:	f9 07       	cpc	r31, r25
    151a:	31 f4       	brne	.+12     	; 0x1528 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    151c:	86 81       	ldd	r24, Z+6	; 0x06
    151e:	97 81       	ldd	r25, Z+7	; 0x07
    1520:	12 96       	adiw	r26, 0x02	; 2
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
    1526:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1528:	13 86       	std	Z+11, r1	; 0x0b
    152a:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    152c:	8c 91       	ld	r24, X
    152e:	81 50       	subi	r24, 0x01	; 1
    1530:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1532:	8c 91       	ld	r24, X
}
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    153a:	a8 95       	wdr
    153c:	90 ec       	ldi	r25, 0xC0	; 192
    153e:	88 e1       	ldi	r24, 0x18	; 24
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	a8 95       	wdr
    1546:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1550:	08 95       	ret

00001552 <pxPortInitialiseStack>:
    1552:	fc 01       	movw	r30, r24
    1554:	60 83       	st	Z, r22
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	70 83       	st	Z, r23
    155a:	31 97       	sbiw	r30, 0x01	; 1
    155c:	10 82       	st	Z, r1
    155e:	31 97       	sbiw	r30, 0x01	; 1
    1560:	10 82       	st	Z, r1
    1562:	31 97       	sbiw	r30, 0x01	; 1
    1564:	20 e8       	ldi	r18, 0x80	; 128
    1566:	20 83       	st	Z, r18
    1568:	31 97       	sbiw	r30, 0x01	; 1
    156a:	10 82       	st	Z, r1
    156c:	31 97       	sbiw	r30, 0x01	; 1
    156e:	10 82       	st	Z, r1
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	10 82       	st	Z, r1
    1574:	77 97       	sbiw	r30, 0x17	; 23
    1576:	40 83       	st	Z, r20
    1578:	31 97       	sbiw	r30, 0x01	; 1
    157a:	50 83       	st	Z, r21
    157c:	86 97       	sbiw	r24, 0x26	; 38
    157e:	08 95       	ret

00001580 <xPortStartScheduler>:
    1580:	dc df       	rcall	.-72     	; 0x153a <prvSetupTimerInterrupt>
    1582:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    1586:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    158a:	cd 91       	ld	r28, X+
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	dd 91       	ld	r29, X+
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	bf 91       	pop	r27
    159c:	af 91       	pop	r26
    159e:	9f 91       	pop	r25
    15a0:	8f 91       	pop	r24
    15a2:	7f 91       	pop	r23
    15a4:	6f 91       	pop	r22
    15a6:	5f 91       	pop	r21
    15a8:	4f 91       	pop	r20
    15aa:	3f 91       	pop	r19
    15ac:	2f 91       	pop	r18
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	af 90       	pop	r10
    15be:	9f 90       	pop	r9
    15c0:	8f 90       	pop	r8
    15c2:	7f 90       	pop	r7
    15c4:	6f 90       	pop	r6
    15c6:	5f 90       	pop	r5
    15c8:	4f 90       	pop	r4
    15ca:	3f 90       	pop	r3
    15cc:	2f 90       	pop	r2
    15ce:	1f 90       	pop	r1
    15d0:	0f 90       	pop	r0
    15d2:	0c be       	out	0x3c, r0	; 60
    15d4:	0f 90       	pop	r0
    15d6:	0b be       	out	0x3b, r0	; 59
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	08 95       	ret
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	08 95       	ret

000015e4 <vPortYield>:
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	0f 92       	push	r0
    15ec:	0b b6       	in	r0, 0x3b	; 59
    15ee:	0f 92       	push	r0
    15f0:	0c b6       	in	r0, 0x3c	; 60
    15f2:	0f 92       	push	r0
    15f4:	1f 92       	push	r1
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 92       	push	r2
    15fa:	3f 92       	push	r3
    15fc:	4f 92       	push	r4
    15fe:	5f 92       	push	r5
    1600:	6f 92       	push	r6
    1602:	7f 92       	push	r7
    1604:	8f 92       	push	r8
    1606:	9f 92       	push	r9
    1608:	af 92       	push	r10
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    1638:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    163c:	0d b6       	in	r0, 0x3d	; 61
    163e:	0d 92       	st	X+, r0
    1640:	0e b6       	in	r0, 0x3e	; 62
    1642:	0d 92       	st	X+, r0
    1644:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <vTaskSwitchContext>
    1648:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    164c:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    1650:	cd 91       	ld	r28, X+
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	dd 91       	ld	r29, X+
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	bf 91       	pop	r27
    1662:	af 91       	pop	r26
    1664:	9f 91       	pop	r25
    1666:	8f 91       	pop	r24
    1668:	7f 91       	pop	r23
    166a:	6f 91       	pop	r22
    166c:	5f 91       	pop	r21
    166e:	4f 91       	pop	r20
    1670:	3f 91       	pop	r19
    1672:	2f 91       	pop	r18
    1674:	1f 91       	pop	r17
    1676:	0f 91       	pop	r16
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	df 90       	pop	r13
    167e:	cf 90       	pop	r12
    1680:	bf 90       	pop	r11
    1682:	af 90       	pop	r10
    1684:	9f 90       	pop	r9
    1686:	8f 90       	pop	r8
    1688:	7f 90       	pop	r7
    168a:	6f 90       	pop	r6
    168c:	5f 90       	pop	r5
    168e:	4f 90       	pop	r4
    1690:	3f 90       	pop	r3
    1692:	2f 90       	pop	r2
    1694:	1f 90       	pop	r1
    1696:	0f 90       	pop	r0
    1698:	0c be       	out	0x3c, r0	; 60
    169a:	0f 90       	pop	r0
    169c:	0b be       	out	0x3b, r0	; 59
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	08 95       	ret

000016a6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	0f 92       	push	r0
    16ae:	0b b6       	in	r0, 0x3b	; 59
    16b0:	0f 92       	push	r0
    16b2:	0c b6       	in	r0, 0x3c	; 60
    16b4:	0f 92       	push	r0
    16b6:	1f 92       	push	r1
    16b8:	11 24       	eor	r1, r1
    16ba:	2f 92       	push	r2
    16bc:	3f 92       	push	r3
    16be:	4f 92       	push	r4
    16c0:	5f 92       	push	r5
    16c2:	6f 92       	push	r6
    16c4:	7f 92       	push	r7
    16c6:	8f 92       	push	r8
    16c8:	9f 92       	push	r9
    16ca:	af 92       	push	r10
    16cc:	bf 92       	push	r11
    16ce:	cf 92       	push	r12
    16d0:	df 92       	push	r13
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	2f 93       	push	r18
    16dc:	3f 93       	push	r19
    16de:	4f 93       	push	r20
    16e0:	5f 93       	push	r21
    16e2:	6f 93       	push	r22
    16e4:	7f 93       	push	r23
    16e6:	8f 93       	push	r24
    16e8:	9f 93       	push	r25
    16ea:	af 93       	push	r26
    16ec:	bf 93       	push	r27
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    16f6:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    16fa:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    16fe:	0d b6       	in	r0, 0x3d	; 61
    1700:	0d 92       	st	X+, r0
    1702:	0e b6       	in	r0, 0x3e	; 62
    1704:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1706:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1708:	0e 94 32 15 	call	0x2a64	; 0x2a64 <xTaskIncrementTick>
    170c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    170e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1712:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    1716:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    171a:	cd 91       	ld	r28, X+
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	dd 91       	ld	r29, X+
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	7f 90       	pop	r7
    1754:	6f 90       	pop	r6
    1756:	5f 90       	pop	r5
    1758:	4f 90       	pop	r4
    175a:	3f 90       	pop	r3
    175c:	2f 90       	pop	r2
    175e:	1f 90       	pop	r1
    1760:	0f 90       	pop	r0
    1762:	0c be       	out	0x3c, r0	; 60
    1764:	0f 90       	pop	r0
    1766:	0b be       	out	0x3b, r0	; 59
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    176e:	08 95       	ret

00001770 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1770:	9a df       	rcall	.-204    	; 0x16a6 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1772:	18 95       	reti

00001774 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1774:	dc 01       	movw	r26, r24
    1776:	53 96       	adiw	r26, 0x13	; 19
    1778:	2c 91       	ld	r18, X
    177a:	53 97       	sbiw	r26, 0x13	; 19
    177c:	22 23       	and	r18, r18
    177e:	41 f0       	breq	.+16     	; 0x1790 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1780:	5a 96       	adiw	r26, 0x1a	; 26
    1782:	ed 91       	ld	r30, X+
    1784:	fc 91       	ld	r31, X
    1786:	5b 97       	sbiw	r26, 0x1b	; 27
    1788:	90 81       	ld	r25, Z
    178a:	8a e0       	ldi	r24, 0x0A	; 10
    178c:	89 1b       	sub	r24, r25
    178e:	08 95       	ret
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	08 95       	ret

00001794 <prvIsQueueEmpty>:
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	0f 92       	push	r0
    179a:	fc 01       	movw	r30, r24
    179c:	86 8d       	ldd	r24, Z+30	; 0x1e
    179e:	81 11       	cpse	r24, r1
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <prvIsQueueEmpty+0x12>
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <prvIsQueueEmpty+0x14>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	08 95       	ret

000017ae <prvIsQueueFull>:
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	0f 92       	push	r0
    17b4:	fc 01       	movw	r30, r24
    17b6:	26 8d       	ldd	r18, Z+30	; 0x1e
    17b8:	87 8d       	ldd	r24, Z+31	; 0x1f
    17ba:	28 13       	cpse	r18, r24
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <prvIsQueueFull+0x14>
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <prvIsQueueFull+0x16>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	08 95       	ret

000017ca <prvCopyDataToQueue>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    17d4:	04 2f       	mov	r16, r20
    17d6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17d8:	48 a1       	ldd	r20, Y+32	; 0x20
    17da:	41 11       	cpse	r20, r1
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <prvCopyDataToQueue+0x2c>
    17de:	88 81       	ld	r24, Y
    17e0:	99 81       	ldd	r25, Y+1	; 0x01
    17e2:	89 2b       	or	r24, r25
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <prvCopyDataToQueue+0x1e>
    17e6:	42 c0       	rjmp	.+132    	; 0x186c <prvCopyDataToQueue+0xa2>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	0e 94 36 1b 	call	0x366c	; 0x366c <xTaskPriorityDisinherit>
    17f0:	1d 82       	std	Y+5, r1	; 0x05
    17f2:	1c 82       	std	Y+4, r1	; 0x04
    17f4:	42 c0       	rjmp	.+132    	; 0x187a <prvCopyDataToQueue+0xb0>
    17f6:	01 11       	cpse	r16, r1
    17f8:	17 c0       	rjmp	.+46     	; 0x1828 <prvCopyDataToQueue+0x5e>
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1800:	0e 94 0a 38 	call	0x7014	; 0x7014 <memcpy>
    1804:	28 a1       	ldd	r18, Y+32	; 0x20
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	82 0f       	add	r24, r18
    180c:	91 1d       	adc	r25, r1
    180e:	9b 83       	std	Y+3, r25	; 0x03
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	2c 81       	ldd	r18, Y+4	; 0x04
    1814:	3d 81       	ldd	r19, Y+5	; 0x05
    1816:	82 17       	cp	r24, r18
    1818:	93 07       	cpc	r25, r19
    181a:	50 f1       	brcs	.+84     	; 0x1870 <prvCopyDataToQueue+0xa6>
    181c:	88 81       	ld	r24, Y
    181e:	99 81       	ldd	r25, Y+1	; 0x01
    1820:	9b 83       	std	Y+3, r25	; 0x03
    1822:	8a 83       	std	Y+2, r24	; 0x02
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	29 c0       	rjmp	.+82     	; 0x187a <prvCopyDataToQueue+0xb0>
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	8e 81       	ldd	r24, Y+6	; 0x06
    182c:	9f 81       	ldd	r25, Y+7	; 0x07
    182e:	0e 94 0a 38 	call	0x7014	; 0x7014 <memcpy>
    1832:	88 a1       	ldd	r24, Y+32	; 0x20
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	91 95       	neg	r25
    1838:	81 95       	neg	r24
    183a:	91 09       	sbc	r25, r1
    183c:	2e 81       	ldd	r18, Y+6	; 0x06
    183e:	3f 81       	ldd	r19, Y+7	; 0x07
    1840:	28 0f       	add	r18, r24
    1842:	39 1f       	adc	r19, r25
    1844:	3f 83       	std	Y+7, r19	; 0x07
    1846:	2e 83       	std	Y+6, r18	; 0x06
    1848:	48 81       	ld	r20, Y
    184a:	59 81       	ldd	r21, Y+1	; 0x01
    184c:	24 17       	cp	r18, r20
    184e:	35 07       	cpc	r19, r21
    1850:	30 f4       	brcc	.+12     	; 0x185e <prvCopyDataToQueue+0x94>
    1852:	2c 81       	ldd	r18, Y+4	; 0x04
    1854:	3d 81       	ldd	r19, Y+5	; 0x05
    1856:	82 0f       	add	r24, r18
    1858:	93 1f       	adc	r25, r19
    185a:	9f 83       	std	Y+7, r25	; 0x07
    185c:	8e 83       	std	Y+6, r24	; 0x06
    185e:	02 30       	cpi	r16, 0x02	; 2
    1860:	49 f4       	brne	.+18     	; 0x1874 <prvCopyDataToQueue+0xaa>
    1862:	11 23       	and	r17, r17
    1864:	49 f0       	breq	.+18     	; 0x1878 <prvCopyDataToQueue+0xae>
    1866:	11 50       	subi	r17, 0x01	; 1
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	07 c0       	rjmp	.+14     	; 0x187a <prvCopyDataToQueue+0xb0>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	05 c0       	rjmp	.+10     	; 0x187a <prvCopyDataToQueue+0xb0>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	03 c0       	rjmp	.+6      	; 0x187a <prvCopyDataToQueue+0xb0>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	01 c0       	rjmp	.+2      	; 0x187a <prvCopyDataToQueue+0xb0>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	1f 5f       	subi	r17, 0xFF	; 255
    187c:	1e 8f       	std	Y+30, r17	; 0x1e
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	08 95       	ret

00001888 <prvCopyDataFromQueue>:
    1888:	fc 01       	movw	r30, r24
    188a:	40 a1       	ldd	r20, Z+32	; 0x20
    188c:	44 23       	and	r20, r20
    188e:	a9 f0       	breq	.+42     	; 0x18ba <prvCopyDataFromQueue+0x32>
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	26 81       	ldd	r18, Z+6	; 0x06
    1894:	37 81       	ldd	r19, Z+7	; 0x07
    1896:	24 0f       	add	r18, r20
    1898:	35 1f       	adc	r19, r21
    189a:	37 83       	std	Z+7, r19	; 0x07
    189c:	26 83       	std	Z+6, r18	; 0x06
    189e:	84 81       	ldd	r24, Z+4	; 0x04
    18a0:	95 81       	ldd	r25, Z+5	; 0x05
    18a2:	28 17       	cp	r18, r24
    18a4:	39 07       	cpc	r19, r25
    18a6:	20 f0       	brcs	.+8      	; 0x18b0 <prvCopyDataFromQueue+0x28>
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	97 83       	std	Z+7, r25	; 0x07
    18ae:	86 83       	std	Z+6, r24	; 0x06
    18b0:	cb 01       	movw	r24, r22
    18b2:	66 81       	ldd	r22, Z+6	; 0x06
    18b4:	77 81       	ldd	r23, Z+7	; 0x07
    18b6:	0c 94 0a 38 	jmp	0x7014	; 0x7014 <memcpy>
    18ba:	08 95       	ret

000018bc <prvUnlockQueue>:
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	0f 92       	push	r0
    18ca:	1a a1       	ldd	r17, Y+34	; 0x22
    18cc:	0b c0       	rjmp	.+22     	; 0x18e4 <prvUnlockQueue+0x28>
    18ce:	8b 89       	ldd	r24, Y+19	; 0x13
    18d0:	88 23       	and	r24, r24
    18d2:	51 f0       	breq	.+20     	; 0x18e8 <prvUnlockQueue+0x2c>
    18d4:	ce 01       	movw	r24, r28
    18d6:	43 96       	adiw	r24, 0x13	; 19
    18d8:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskRemoveFromEventList>
    18dc:	81 11       	cpse	r24, r1
    18de:	0e 94 98 1a 	call	0x3530	; 0x3530 <vTaskMissedYield>
    18e2:	11 50       	subi	r17, 0x01	; 1
    18e4:	11 16       	cp	r1, r17
    18e6:	9c f3       	brlt	.-26     	; 0x18ce <prvUnlockQueue+0x12>
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	8a a3       	std	Y+34, r24	; 0x22
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	0f 92       	push	r0
    18f6:	19 a1       	ldd	r17, Y+33	; 0x21
    18f8:	0b c0       	rjmp	.+22     	; 0x1910 <prvUnlockQueue+0x54>
    18fa:	88 85       	ldd	r24, Y+8	; 0x08
    18fc:	88 23       	and	r24, r24
    18fe:	51 f0       	breq	.+20     	; 0x1914 <prvUnlockQueue+0x58>
    1900:	ce 01       	movw	r24, r28
    1902:	08 96       	adiw	r24, 0x08	; 8
    1904:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskRemoveFromEventList>
    1908:	81 11       	cpse	r24, r1
    190a:	0e 94 98 1a 	call	0x3530	; 0x3530 <vTaskMissedYield>
    190e:	11 50       	subi	r17, 0x01	; 1
    1910:	11 16       	cp	r1, r17
    1912:	9c f3       	brlt	.-26     	; 0x18fa <prvUnlockQueue+0x3e>
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	89 a3       	std	Y+33, r24	; 0x21
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	08 95       	ret

00001924 <xQueueGenericReset>:
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	ec 01       	movw	r28, r24
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	0f 92       	push	r0
    1930:	e8 81       	ld	r30, Y
    1932:	f9 81       	ldd	r31, Y+1	; 0x01
    1934:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1936:	28 a1       	ldd	r18, Y+32	; 0x20
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	82 9f       	mul	r24, r18
    193e:	a0 01       	movw	r20, r0
    1940:	83 9f       	mul	r24, r19
    1942:	50 0d       	add	r21, r0
    1944:	92 9f       	mul	r25, r18
    1946:	50 0d       	add	r21, r0
    1948:	11 24       	eor	r1, r1
    194a:	4e 0f       	add	r20, r30
    194c:	5f 1f       	adc	r21, r31
    194e:	5d 83       	std	Y+5, r21	; 0x05
    1950:	4c 83       	std	Y+4, r20	; 0x04
    1952:	1e 8e       	std	Y+30, r1	; 0x1e
    1954:	fb 83       	std	Y+3, r31	; 0x03
    1956:	ea 83       	std	Y+2, r30	; 0x02
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	28 9f       	mul	r18, r24
    195c:	a0 01       	movw	r20, r0
    195e:	29 9f       	mul	r18, r25
    1960:	50 0d       	add	r21, r0
    1962:	38 9f       	mul	r19, r24
    1964:	50 0d       	add	r21, r0
    1966:	11 24       	eor	r1, r1
    1968:	cf 01       	movw	r24, r30
    196a:	84 0f       	add	r24, r20
    196c:	95 1f       	adc	r25, r21
    196e:	9f 83       	std	Y+7, r25	; 0x07
    1970:	8e 83       	std	Y+6, r24	; 0x06
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	89 a3       	std	Y+33, r24	; 0x21
    1976:	8a a3       	std	Y+34, r24	; 0x22
    1978:	61 11       	cpse	r22, r1
    197a:	0b c0       	rjmp	.+22     	; 0x1992 <xQueueGenericReset+0x6e>
    197c:	88 85       	ldd	r24, Y+8	; 0x08
    197e:	88 23       	and	r24, r24
    1980:	71 f0       	breq	.+28     	; 0x199e <xQueueGenericReset+0x7a>
    1982:	ce 01       	movw	r24, r28
    1984:	08 96       	adiw	r24, 0x08	; 8
    1986:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskRemoveFromEventList>
    198a:	88 23       	and	r24, r24
    198c:	41 f0       	breq	.+16     	; 0x199e <xQueueGenericReset+0x7a>
    198e:	2a de       	rcall	.-940    	; 0x15e4 <vPortYield>
    1990:	06 c0       	rjmp	.+12     	; 0x199e <xQueueGenericReset+0x7a>
    1992:	ce 01       	movw	r24, r28
    1994:	08 96       	adiw	r24, 0x08	; 8
    1996:	58 dd       	rcall	.-1360   	; 0x1448 <vListInitialise>
    1998:	ce 01       	movw	r24, r28
    199a:	43 96       	adiw	r24, 0x13	; 19
    199c:	55 dd       	rcall	.-1366   	; 0x1448 <vListInitialise>
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <prvInitialiseNewQueue>:
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	f8 01       	movw	r30, r16
    19b0:	61 11       	cpse	r22, r1
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <prvInitialiseNewQueue+0x10>
    19b4:	11 83       	std	Z+1, r17	; 0x01
    19b6:	00 83       	st	Z, r16
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <prvInitialiseNewQueue+0x14>
    19ba:	51 83       	std	Z+1, r21	; 0x01
    19bc:	40 83       	st	Z, r20
    19be:	87 8f       	std	Z+31, r24	; 0x1f
    19c0:	60 a3       	std	Z+32, r22	; 0x20
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	cf 01       	movw	r24, r30
    19c6:	ae df       	rcall	.-164    	; 0x1924 <xQueueGenericReset>
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <xQueueGenericCreate>:
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	f8 2e       	mov	r15, r24
    19de:	e6 2e       	mov	r14, r22
    19e0:	d4 2e       	mov	r13, r20
    19e2:	86 9f       	mul	r24, r22
    19e4:	c0 01       	movw	r24, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	83 96       	adiw	r24, 0x23	; 35
    19ea:	48 dc       	rcall	.-1904   	; 0x127c <pvPortMalloc>
    19ec:	ec 01       	movw	r28, r24
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	41 f0       	breq	.+16     	; 0x1a02 <xQueueGenericCreate+0x34>
    19f2:	8c 01       	movw	r16, r24
    19f4:	2d 2d       	mov	r18, r13
    19f6:	ac 01       	movw	r20, r24
    19f8:	4d 5d       	subi	r20, 0xDD	; 221
    19fa:	5f 4f       	sbci	r21, 0xFF	; 255
    19fc:	6e 2d       	mov	r22, r14
    19fe:	8f 2d       	mov	r24, r15
    1a00:	d4 df       	rcall	.-88     	; 0x19aa <prvInitialiseNewQueue>
    1a02:	ce 01       	movw	r24, r28
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	08 95       	ret

00001a14 <xQueueGenericSend>:
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	29 97       	sbiw	r28, 0x09	; 9
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	7c 01       	movw	r14, r24
    1a36:	6b 01       	movw	r12, r22
    1a38:	2e 83       	std	Y+6, r18	; 0x06
    1a3a:	3f 83       	std	Y+7, r19	; 0x07
    1a3c:	48 87       	std	Y+8, r20	; 0x08
    1a3e:	59 87       	std	Y+9, r21	; 0x09
    1a40:	10 e0       	ldi	r17, 0x00	; 0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	0f 92       	push	r0
    1a48:	f7 01       	movw	r30, r14
    1a4a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a4c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a4e:	98 17       	cp	r25, r24
    1a50:	10 f0       	brcs	.+4      	; 0x1a56 <xQueueGenericSend+0x42>
    1a52:	02 30       	cpi	r16, 0x02	; 2
    1a54:	b1 f4       	brne	.+44     	; 0x1a82 <xQueueGenericSend+0x6e>
    1a56:	40 2f       	mov	r20, r16
    1a58:	b6 01       	movw	r22, r12
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	b6 de       	rcall	.-660    	; 0x17ca <prvCopyDataToQueue>
    1a5e:	f7 01       	movw	r30, r14
    1a60:	93 89       	ldd	r25, Z+19	; 0x13
    1a62:	99 23       	and	r25, r25
    1a64:	41 f0       	breq	.+16     	; 0x1a76 <xQueueGenericSend+0x62>
    1a66:	c7 01       	movw	r24, r14
    1a68:	43 96       	adiw	r24, 0x13	; 19
    1a6a:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskRemoveFromEventList>
    1a6e:	88 23       	and	r24, r24
    1a70:	21 f0       	breq	.+8      	; 0x1a7a <xQueueGenericSend+0x66>
    1a72:	b8 dd       	rcall	.-1168   	; 0x15e4 <vPortYield>
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <xQueueGenericSend+0x66>
    1a76:	81 11       	cpse	r24, r1
    1a78:	b5 dd       	rcall	.-1174   	; 0x15e4 <vPortYield>
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	4c c0       	rjmp	.+152    	; 0x1b1a <xQueueGenericSend+0x106>
    1a82:	8e 81       	ldd	r24, Y+6	; 0x06
    1a84:	9f 81       	ldd	r25, Y+7	; 0x07
    1a86:	a8 85       	ldd	r26, Y+8	; 0x08
    1a88:	b9 85       	ldd	r27, Y+9	; 0x09
    1a8a:	89 2b       	or	r24, r25
    1a8c:	8a 2b       	or	r24, r26
    1a8e:	8b 2b       	or	r24, r27
    1a90:	21 f4       	brne	.+8      	; 0x1a9a <xQueueGenericSend+0x86>
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	40 c0       	rjmp	.+128    	; 0x1b1a <xQueueGenericSend+0x106>
    1a9a:	11 11       	cpse	r17, r1
    1a9c:	05 c0       	rjmp	.+10     	; 0x1aa8 <xQueueGenericSend+0x94>
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	0e 94 21 1a 	call	0x3442	; 0x3442 <vTaskInternalSetTimeOutState>
    1aa6:	11 e0       	ldi	r17, 0x01	; 1
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	c7 d7       	rcall	.+3982   	; 0x2a3c <vTaskSuspendAll>
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	0f 92       	push	r0
    1ab4:	f7 01       	movw	r30, r14
    1ab6:	81 a1       	ldd	r24, Z+33	; 0x21
    1ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aba:	09 f4       	brne	.+2      	; 0x1abe <xQueueGenericSend+0xaa>
    1abc:	11 a2       	std	Z+33, r1	; 0x21
    1abe:	f7 01       	movw	r30, r14
    1ac0:	82 a1       	ldd	r24, Z+34	; 0x22
    1ac2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <xQueueGenericSend+0xb4>
    1ac6:	12 a2       	std	Z+34, r1	; 0x22
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	be 01       	movw	r22, r28
    1ace:	6a 5f       	subi	r22, 0xFA	; 250
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	0e 94 32 1a 	call	0x3464	; 0x3464 <xTaskCheckForTimeOut>
    1ada:	81 11       	cpse	r24, r1
    1adc:	19 c0       	rjmp	.+50     	; 0x1b10 <xQueueGenericSend+0xfc>
    1ade:	c7 01       	movw	r24, r14
    1ae0:	66 de       	rcall	.-820    	; 0x17ae <prvIsQueueFull>
    1ae2:	88 23       	and	r24, r24
    1ae4:	81 f0       	breq	.+32     	; 0x1b06 <xQueueGenericSend+0xf2>
    1ae6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ae8:	5f 81       	ldd	r21, Y+7	; 0x07
    1aea:	68 85       	ldd	r22, Y+8	; 0x08
    1aec:	79 85       	ldd	r23, Y+9	; 0x09
    1aee:	c7 01       	movw	r24, r14
    1af0:	08 96       	adiw	r24, 0x08	; 8
    1af2:	0e 94 1f 18 	call	0x303e	; 0x303e <vTaskPlaceOnEventList>
    1af6:	c7 01       	movw	r24, r14
    1af8:	e1 de       	rcall	.-574    	; 0x18bc <prvUnlockQueue>
    1afa:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
    1afe:	81 11       	cpse	r24, r1
    1b00:	a0 cf       	rjmp	.-192    	; 0x1a42 <xQueueGenericSend+0x2e>
    1b02:	70 dd       	rcall	.-1312   	; 0x15e4 <vPortYield>
    1b04:	9e cf       	rjmp	.-196    	; 0x1a42 <xQueueGenericSend+0x2e>
    1b06:	c7 01       	movw	r24, r14
    1b08:	d9 de       	rcall	.-590    	; 0x18bc <prvUnlockQueue>
    1b0a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
    1b0e:	99 cf       	rjmp	.-206    	; 0x1a42 <xQueueGenericSend+0x2e>
    1b10:	c7 01       	movw	r24, r14
    1b12:	d4 de       	rcall	.-600    	; 0x18bc <prvUnlockQueue>
    1b14:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	29 96       	adiw	r28, 0x09	; 9
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	08 95       	ret

00001b38 <prvInitialiseMutex>:
    1b38:	0f 93       	push	r16
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	69 f0       	breq	.+26     	; 0x1b58 <prvInitialiseMutex+0x20>
    1b3e:	fc 01       	movw	r30, r24
    1b40:	15 82       	std	Z+5, r1	; 0x05
    1b42:	14 82       	std	Z+4, r1	; 0x04
    1b44:	11 82       	std	Z+1, r1	; 0x01
    1b46:	10 82       	st	Z, r1
    1b48:	16 82       	std	Z+6, r1	; 0x06
    1b4a:	00 e0       	ldi	r16, 0x00	; 0
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	a9 01       	movw	r20, r18
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	5e df       	rcall	.-324    	; 0x1a14 <xQueueGenericSend>
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <xQueueCreateMutex>:
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	48 2f       	mov	r20, r24
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	33 df       	rcall	.-410    	; 0x19ce <xQueueGenericCreate>
    1b68:	ec 01       	movw	r28, r24
    1b6a:	e6 df       	rcall	.-52     	; 0x1b38 <prvInitialiseMutex>
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <xQueueGenericSendFromISR>:
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	8a 01       	movw	r16, r20
    1b82:	fc 01       	movw	r30, r24
    1b84:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b86:	37 8d       	ldd	r19, Z+31	; 0x1f
    1b88:	53 17       	cp	r21, r19
    1b8a:	10 f0       	brcs	.+4      	; 0x1b90 <xQueueGenericSendFromISR+0x1c>
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	f9 f4       	brne	.+62     	; 0x1bce <xQueueGenericSendFromISR+0x5a>
    1b90:	42 2f       	mov	r20, r18
    1b92:	78 01       	movw	r14, r16
    1b94:	ec 01       	movw	r28, r24
    1b96:	1a a1       	ldd	r17, Y+34	; 0x22
    1b98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	16 de       	rcall	.-980    	; 0x17ca <prvCopyDataToQueue>
    1b9e:	1f 3f       	cpi	r17, 0xFF	; 255
    1ba0:	81 f4       	brne	.+32     	; 0x1bc2 <xQueueGenericSendFromISR+0x4e>
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	88 23       	and	r24, r24
    1ba6:	a9 f0       	breq	.+42     	; 0x1bd2 <xQueueGenericSendFromISR+0x5e>
    1ba8:	ce 01       	movw	r24, r28
    1baa:	43 96       	adiw	r24, 0x13	; 19
    1bac:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskRemoveFromEventList>
    1bb0:	88 23       	and	r24, r24
    1bb2:	89 f0       	breq	.+34     	; 0x1bd6 <xQueueGenericSendFromISR+0x62>
    1bb4:	e1 14       	cp	r14, r1
    1bb6:	f1 04       	cpc	r15, r1
    1bb8:	81 f0       	breq	.+32     	; 0x1bda <xQueueGenericSendFromISR+0x66>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	f7 01       	movw	r30, r14
    1bbe:	80 83       	st	Z, r24
    1bc0:	0d c0       	rjmp	.+26     	; 0x1bdc <xQueueGenericSendFromISR+0x68>
    1bc2:	ff 24       	eor	r15, r15
    1bc4:	f3 94       	inc	r15
    1bc6:	f1 0e       	add	r15, r17
    1bc8:	fa a2       	std	Y+34, r15	; 0x22
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	07 c0       	rjmp	.+14     	; 0x1bdc <xQueueGenericSendFromISR+0x68>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <xQueueGenericSendFromISR+0x68>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	03 c0       	rjmp	.+6      	; 0x1bdc <xQueueGenericSendFromISR+0x68>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <xQueueGenericSendFromISR+0x68>
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	08 95       	ret

00001bea <xQueueReceive>:
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	29 97       	sbiw	r28, 0x09	; 9
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	6b 01       	movw	r12, r22
    1c0e:	2e 83       	std	Y+6, r18	; 0x06
    1c10:	3f 83       	std	Y+7, r19	; 0x07
    1c12:	48 87       	std	Y+8, r20	; 0x08
    1c14:	59 87       	std	Y+9, r21	; 0x09
    1c16:	e1 2c       	mov	r14, r1
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	0f 92       	push	r0
    1c1e:	f8 01       	movw	r30, r16
    1c20:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1c22:	ff 20       	and	r15, r15
    1c24:	99 f0       	breq	.+38     	; 0x1c4c <xQueueReceive+0x62>
    1c26:	b6 01       	movw	r22, r12
    1c28:	c8 01       	movw	r24, r16
    1c2a:	2e de       	rcall	.-932    	; 0x1888 <prvCopyDataFromQueue>
    1c2c:	fa 94       	dec	r15
    1c2e:	f8 01       	movw	r30, r16
    1c30:	f6 8e       	std	Z+30, r15	; 0x1e
    1c32:	80 85       	ldd	r24, Z+8	; 0x08
    1c34:	88 23       	and	r24, r24
    1c36:	31 f0       	breq	.+12     	; 0x1c44 <xQueueReceive+0x5a>
    1c38:	c8 01       	movw	r24, r16
    1c3a:	08 96       	adiw	r24, 0x08	; 8
    1c3c:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskRemoveFromEventList>
    1c40:	81 11       	cpse	r24, r1
    1c42:	d0 dc       	rcall	.-1632   	; 0x15e4 <vPortYield>
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	4f c0       	rjmp	.+158    	; 0x1cea <xQueueReceive+0x100>
    1c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c50:	a8 85       	ldd	r26, Y+8	; 0x08
    1c52:	b9 85       	ldd	r27, Y+9	; 0x09
    1c54:	89 2b       	or	r24, r25
    1c56:	8a 2b       	or	r24, r26
    1c58:	8b 2b       	or	r24, r27
    1c5a:	21 f4       	brne	.+8      	; 0x1c64 <xQueueReceive+0x7a>
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	43 c0       	rjmp	.+134    	; 0x1cea <xQueueReceive+0x100>
    1c64:	e1 10       	cpse	r14, r1
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <xQueueReceive+0x8a>
    1c68:	ce 01       	movw	r24, r28
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	0e 94 21 1a 	call	0x3442	; 0x3442 <vTaskInternalSetTimeOutState>
    1c70:	ee 24       	eor	r14, r14
    1c72:	e3 94       	inc	r14
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	e1 d6       	rcall	.+3522   	; 0x2a3c <vTaskSuspendAll>
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	0f 92       	push	r0
    1c80:	f8 01       	movw	r30, r16
    1c82:	81 a1       	ldd	r24, Z+33	; 0x21
    1c84:	8f 3f       	cpi	r24, 0xFF	; 255
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <xQueueReceive+0xa0>
    1c88:	11 a2       	std	Z+33, r1	; 0x21
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	82 a1       	ldd	r24, Z+34	; 0x22
    1c8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <xQueueReceive+0xaa>
    1c92:	12 a2       	std	Z+34, r1	; 0x22
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	be 01       	movw	r22, r28
    1c9a:	6a 5f       	subi	r22, 0xFA	; 250
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	0e 94 32 1a 	call	0x3464	; 0x3464 <xTaskCheckForTimeOut>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	17 c0       	rjmp	.+46     	; 0x1cd8 <xQueueReceive+0xee>
    1caa:	c8 01       	movw	r24, r16
    1cac:	73 dd       	rcall	.-1306   	; 0x1794 <prvIsQueueEmpty>
    1cae:	88 23       	and	r24, r24
    1cb0:	79 f0       	breq	.+30     	; 0x1cd0 <xQueueReceive+0xe6>
    1cb2:	4e 81       	ldd	r20, Y+6	; 0x06
    1cb4:	5f 81       	ldd	r21, Y+7	; 0x07
    1cb6:	68 85       	ldd	r22, Y+8	; 0x08
    1cb8:	79 85       	ldd	r23, Y+9	; 0x09
    1cba:	c8 01       	movw	r24, r16
    1cbc:	43 96       	adiw	r24, 0x13	; 19
    1cbe:	0e 94 1f 18 	call	0x303e	; 0x303e <vTaskPlaceOnEventList>
    1cc2:	c8 01       	movw	r24, r16
    1cc4:	fb dd       	rcall	.-1034   	; 0x18bc <prvUnlockQueue>
    1cc6:	fa d7       	rcall	.+4084   	; 0x2cbc <xTaskResumeAll>
    1cc8:	81 11       	cpse	r24, r1
    1cca:	a6 cf       	rjmp	.-180    	; 0x1c18 <xQueueReceive+0x2e>
    1ccc:	8b dc       	rcall	.-1770   	; 0x15e4 <vPortYield>
    1cce:	a4 cf       	rjmp	.-184    	; 0x1c18 <xQueueReceive+0x2e>
    1cd0:	c8 01       	movw	r24, r16
    1cd2:	f4 dd       	rcall	.-1048   	; 0x18bc <prvUnlockQueue>
    1cd4:	f3 d7       	rcall	.+4070   	; 0x2cbc <xTaskResumeAll>
    1cd6:	a0 cf       	rjmp	.-192    	; 0x1c18 <xQueueReceive+0x2e>
    1cd8:	c8 01       	movw	r24, r16
    1cda:	f0 dd       	rcall	.-1056   	; 0x18bc <prvUnlockQueue>
    1cdc:	ef d7       	rcall	.+4062   	; 0x2cbc <xTaskResumeAll>
    1cde:	c8 01       	movw	r24, r16
    1ce0:	59 dd       	rcall	.-1358   	; 0x1794 <prvIsQueueEmpty>
    1ce2:	88 23       	and	r24, r24
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <xQueueReceive+0xfe>
    1ce6:	98 cf       	rjmp	.-208    	; 0x1c18 <xQueueReceive+0x2e>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	29 96       	adiw	r28, 0x09	; 9
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	df 90       	pop	r13
    1d04:	cf 90       	pop	r12
    1d06:	08 95       	ret

00001d08 <xQueueSemaphoreTake>:
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	29 97       	sbiw	r28, 0x09	; 9
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	8c 01       	movw	r16, r24
    1d26:	4e 83       	std	Y+6, r20	; 0x06
    1d28:	5f 83       	std	Y+7, r21	; 0x07
    1d2a:	68 87       	std	Y+8, r22	; 0x08
    1d2c:	79 87       	std	Y+9, r23	; 0x09
    1d2e:	e1 2c       	mov	r14, r1
    1d30:	f1 2c       	mov	r15, r1
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	0f 92       	push	r0
    1d38:	f8 01       	movw	r30, r16
    1d3a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d3c:	88 23       	and	r24, r24
    1d3e:	c9 f0       	breq	.+50     	; 0x1d72 <xQueueSemaphoreTake+0x6a>
    1d40:	81 50       	subi	r24, 0x01	; 1
    1d42:	86 8f       	std	Z+30, r24	; 0x1e
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	89 2b       	or	r24, r25
    1d4a:	29 f4       	brne	.+10     	; 0x1d56 <xQueueSemaphoreTake+0x4e>
    1d4c:	0e 94 22 1c 	call	0x3844	; 0x3844 <pvTaskIncrementMutexHeldCount>
    1d50:	f8 01       	movw	r30, r16
    1d52:	95 83       	std	Z+5, r25	; 0x05
    1d54:	84 83       	std	Z+4, r24	; 0x04
    1d56:	f8 01       	movw	r30, r16
    1d58:	80 85       	ldd	r24, Z+8	; 0x08
    1d5a:	88 23       	and	r24, r24
    1d5c:	31 f0       	breq	.+12     	; 0x1d6a <xQueueSemaphoreTake+0x62>
    1d5e:	c8 01       	movw	r24, r16
    1d60:	08 96       	adiw	r24, 0x08	; 8
    1d62:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskRemoveFromEventList>
    1d66:	81 11       	cpse	r24, r1
    1d68:	3d dc       	rcall	.-1926   	; 0x15e4 <vPortYield>
    1d6a:	0f 90       	pop	r0
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	6f c0       	rjmp	.+222    	; 0x1e50 <xQueueSemaphoreTake+0x148>
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	9f 81       	ldd	r25, Y+7	; 0x07
    1d76:	a8 85       	ldd	r26, Y+8	; 0x08
    1d78:	b9 85       	ldd	r27, Y+9	; 0x09
    1d7a:	89 2b       	or	r24, r25
    1d7c:	8a 2b       	or	r24, r26
    1d7e:	8b 2b       	or	r24, r27
    1d80:	21 f4       	brne	.+8      	; 0x1d8a <xQueueSemaphoreTake+0x82>
    1d82:	0f 90       	pop	r0
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	63 c0       	rjmp	.+198    	; 0x1e50 <xQueueSemaphoreTake+0x148>
    1d8a:	f1 10       	cpse	r15, r1
    1d8c:	06 c0       	rjmp	.+12     	; 0x1d9a <xQueueSemaphoreTake+0x92>
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	0e 94 21 1a 	call	0x3442	; 0x3442 <vTaskInternalSetTimeOutState>
    1d96:	ff 24       	eor	r15, r15
    1d98:	f3 94       	inc	r15
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	4e d6       	rcall	.+3228   	; 0x2a3c <vTaskSuspendAll>
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	0f 92       	push	r0
    1da6:	f8 01       	movw	r30, r16
    1da8:	81 a1       	ldd	r24, Z+33	; 0x21
    1daa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <xQueueSemaphoreTake+0xa8>
    1dae:	11 a2       	std	Z+33, r1	; 0x21
    1db0:	f8 01       	movw	r30, r16
    1db2:	82 a1       	ldd	r24, Z+34	; 0x22
    1db4:	8f 3f       	cpi	r24, 0xFF	; 255
    1db6:	09 f4       	brne	.+2      	; 0x1dba <xQueueSemaphoreTake+0xb2>
    1db8:	12 a2       	std	Z+34, r1	; 0x22
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	be 01       	movw	r22, r28
    1dc0:	6a 5f       	subi	r22, 0xFA	; 250
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	0e 94 32 1a 	call	0x3464	; 0x3464 <xTaskCheckForTimeOut>
    1dcc:	81 11       	cpse	r24, r1
    1dce:	26 c0       	rjmp	.+76     	; 0x1e1c <xQueueSemaphoreTake+0x114>
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	e0 dc       	rcall	.-1600   	; 0x1794 <prvIsQueueEmpty>
    1dd4:	88 23       	and	r24, r24
    1dd6:	f1 f0       	breq	.+60     	; 0x1e14 <xQueueSemaphoreTake+0x10c>
    1dd8:	f8 01       	movw	r30, r16
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	89 2b       	or	r24, r25
    1de0:	51 f4       	brne	.+20     	; 0x1df6 <xQueueSemaphoreTake+0xee>
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	0f 92       	push	r0
    1de8:	84 81       	ldd	r24, Z+4	; 0x04
    1dea:	95 81       	ldd	r25, Z+5	; 0x05
    1dec:	0e 94 af 1a 	call	0x355e	; 0x355e <xTaskPriorityInherit>
    1df0:	e8 2e       	mov	r14, r24
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	4e 81       	ldd	r20, Y+6	; 0x06
    1df8:	5f 81       	ldd	r21, Y+7	; 0x07
    1dfa:	68 85       	ldd	r22, Y+8	; 0x08
    1dfc:	79 85       	ldd	r23, Y+9	; 0x09
    1dfe:	c8 01       	movw	r24, r16
    1e00:	43 96       	adiw	r24, 0x13	; 19
    1e02:	0e 94 1f 18 	call	0x303e	; 0x303e <vTaskPlaceOnEventList>
    1e06:	c8 01       	movw	r24, r16
    1e08:	59 dd       	rcall	.-1358   	; 0x18bc <prvUnlockQueue>
    1e0a:	58 d7       	rcall	.+3760   	; 0x2cbc <xTaskResumeAll>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	91 cf       	rjmp	.-222    	; 0x1d32 <xQueueSemaphoreTake+0x2a>
    1e10:	e9 db       	rcall	.-2094   	; 0x15e4 <vPortYield>
    1e12:	8f cf       	rjmp	.-226    	; 0x1d32 <xQueueSemaphoreTake+0x2a>
    1e14:	c8 01       	movw	r24, r16
    1e16:	52 dd       	rcall	.-1372   	; 0x18bc <prvUnlockQueue>
    1e18:	51 d7       	rcall	.+3746   	; 0x2cbc <xTaskResumeAll>
    1e1a:	8b cf       	rjmp	.-234    	; 0x1d32 <xQueueSemaphoreTake+0x2a>
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	4e dd       	rcall	.-1380   	; 0x18bc <prvUnlockQueue>
    1e20:	4d d7       	rcall	.+3738   	; 0x2cbc <xTaskResumeAll>
    1e22:	c8 01       	movw	r24, r16
    1e24:	b7 dc       	rcall	.-1682   	; 0x1794 <prvIsQueueEmpty>
    1e26:	88 23       	and	r24, r24
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <xQueueSemaphoreTake+0x124>
    1e2a:	83 cf       	rjmp	.-250    	; 0x1d32 <xQueueSemaphoreTake+0x2a>
    1e2c:	ee 20       	and	r14, r14
    1e2e:	79 f0       	breq	.+30     	; 0x1e4e <xQueueSemaphoreTake+0x146>
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	0f 92       	push	r0
    1e36:	c8 01       	movw	r24, r16
    1e38:	9d dc       	rcall	.-1734   	; 0x1774 <prvGetDisinheritPriorityAfterTimeout>
    1e3a:	68 2f       	mov	r22, r24
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	84 81       	ldd	r24, Z+4	; 0x04
    1e40:	95 81       	ldd	r25, Z+5	; 0x05
    1e42:	0e 94 91 1b 	call	0x3722	; 0x3722 <vTaskPriorityDisinheritAfterTimeout>
    1e46:	0f 90       	pop	r0
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <xQueueSemaphoreTake+0x148>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	29 96       	adiw	r28, 0x09	; 9
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	ff 90       	pop	r15
    1e66:	ef 90       	pop	r14
    1e68:	08 95       	ret

00001e6a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	0f 92       	push	r0
    1e76:	89 a1       	ldd	r24, Y+33	; 0x21
    1e78:	8f 3f       	cpi	r24, 0xFF	; 255
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <vQueueWaitForMessageRestricted+0x14>
    1e7c:	19 a2       	std	Y+33, r1	; 0x21
    1e7e:	8a a1       	ldd	r24, Y+34	; 0x22
    1e80:	8f 3f       	cpi	r24, 0xFF	; 255
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <vQueueWaitForMessageRestricted+0x1c>
    1e84:	1a a2       	std	Y+34, r1	; 0x22
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1e8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1e90:	ce 01       	movw	r24, r28
    1e92:	43 96       	adiw	r24, 0x13	; 19
    1e94:	0e 94 80 18 	call	0x3100	; 0x3100 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1e98:	ce 01       	movw	r24, r28
    1e9a:	10 dd       	rcall	.-1504   	; 0x18bc <prvUnlockQueue>
    }
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	44 81       	ldd	r20, Z+4	; 0x04
    1ea6:	55 81       	ldd	r21, Z+5	; 0x05
    1ea8:	22 81       	ldd	r18, Z+2	; 0x02
    1eaa:	33 81       	ldd	r19, Z+3	; 0x03
    1eac:	24 0f       	add	r18, r20
    1eae:	35 1f       	adc	r19, r21
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	b9 01       	movw	r22, r18
    1eb6:	68 1b       	sub	r22, r24
    1eb8:	79 0b       	sbc	r23, r25
    1eba:	cb 01       	movw	r24, r22
    1ebc:	64 17       	cp	r22, r20
    1ebe:	75 07       	cpc	r23, r21
    1ec0:	10 f0       	brcs	.+4      	; 0x1ec6 <prvBytesInBuffer+0x24>
    1ec2:	84 1b       	sub	r24, r20
    1ec4:	95 0b       	sbc	r25, r21
    1ec6:	08 95       	ret

00001ec8 <prvInitialiseNewStreamBuffer>:
    1ec8:	0f 93       	push	r16
    1eca:	fc 01       	movw	r30, r24
    1ecc:	8f e0       	ldi	r24, 0x0F	; 15
    1ece:	df 01       	movw	r26, r30
    1ed0:	1d 92       	st	X+, r1
    1ed2:	8a 95       	dec	r24
    1ed4:	e9 f7       	brne	.-6      	; 0x1ed0 <prvInitialiseNewStreamBuffer+0x8>
    1ed6:	75 87       	std	Z+13, r23	; 0x0d
    1ed8:	64 87       	std	Z+12, r22	; 0x0c
    1eda:	55 83       	std	Z+5, r21	; 0x05
    1edc:	44 83       	std	Z+4, r20	; 0x04
    1ede:	37 83       	std	Z+7, r19	; 0x07
    1ee0:	26 83       	std	Z+6, r18	; 0x06
    1ee2:	06 87       	std	Z+14, r16	; 0x0e
    1ee4:	0f 91       	pop	r16
    1ee6:	08 95       	ret

00001ee8 <prvWriteBytesToBuffer>:
    1ee8:	af 92       	push	r10
    1eea:	bf 92       	push	r11
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	6c 01       	movw	r12, r24
    1efe:	5b 01       	movw	r10, r22
    1f00:	7a 01       	movw	r14, r20
    1f02:	fc 01       	movw	r30, r24
    1f04:	c2 81       	ldd	r28, Z+2	; 0x02
    1f06:	d3 81       	ldd	r29, Z+3	; 0x03
    1f08:	04 81       	ldd	r16, Z+4	; 0x04
    1f0a:	15 81       	ldd	r17, Z+5	; 0x05
    1f0c:	0c 1b       	sub	r16, r28
    1f0e:	1d 0b       	sbc	r17, r29
    1f10:	40 17       	cp	r20, r16
    1f12:	51 07       	cpc	r21, r17
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <prvWriteBytesToBuffer+0x30>
    1f16:	8a 01       	movw	r16, r20
    1f18:	f6 01       	movw	r30, r12
    1f1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1f1c:	95 85       	ldd	r25, Z+13	; 0x0d
    1f1e:	a8 01       	movw	r20, r16
    1f20:	b5 01       	movw	r22, r10
    1f22:	8c 0f       	add	r24, r28
    1f24:	9d 1f       	adc	r25, r29
    1f26:	0e 94 0a 38 	call	0x7014	; 0x7014 <memcpy>
    1f2a:	0e 15       	cp	r16, r14
    1f2c:	1f 05       	cpc	r17, r15
    1f2e:	58 f4       	brcc	.+22     	; 0x1f46 <prvWriteBytesToBuffer+0x5e>
    1f30:	a7 01       	movw	r20, r14
    1f32:	40 1b       	sub	r20, r16
    1f34:	51 0b       	sbc	r21, r17
    1f36:	b5 01       	movw	r22, r10
    1f38:	60 0f       	add	r22, r16
    1f3a:	71 1f       	adc	r23, r17
    1f3c:	f6 01       	movw	r30, r12
    1f3e:	84 85       	ldd	r24, Z+12	; 0x0c
    1f40:	95 85       	ldd	r25, Z+13	; 0x0d
    1f42:	0e 94 0a 38 	call	0x7014	; 0x7014 <memcpy>
    1f46:	ce 01       	movw	r24, r28
    1f48:	8e 0d       	add	r24, r14
    1f4a:	9f 1d       	adc	r25, r15
    1f4c:	f6 01       	movw	r30, r12
    1f4e:	24 81       	ldd	r18, Z+4	; 0x04
    1f50:	35 81       	ldd	r19, Z+5	; 0x05
    1f52:	82 17       	cp	r24, r18
    1f54:	93 07       	cpc	r25, r19
    1f56:	10 f0       	brcs	.+4      	; 0x1f5c <prvWriteBytesToBuffer+0x74>
    1f58:	82 1b       	sub	r24, r18
    1f5a:	93 0b       	sbc	r25, r19
    1f5c:	f6 01       	movw	r30, r12
    1f5e:	93 83       	std	Z+3, r25	; 0x03
    1f60:	82 83       	std	Z+2, r24	; 0x02
    1f62:	c7 01       	movw	r24, r14
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	08 95       	ret

00001f7a <prvWriteMessageToBuffer>:
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	1f 92       	push	r1
    1f8c:	1f 92       	push	r1
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	7c 01       	movw	r14, r24
    1f94:	6b 01       	movw	r12, r22
    1f96:	5a 83       	std	Y+2, r21	; 0x02
    1f98:	49 83       	std	Y+1, r20	; 0x01
    1f9a:	21 15       	cp	r18, r1
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	c1 f0       	breq	.+48     	; 0x1fd0 <prvWriteMessageToBuffer+0x56>
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	86 85       	ldd	r24, Z+14	; 0x0e
    1fa4:	80 fd       	sbrc	r24, 0
    1fa6:	08 c0       	rjmp	.+16     	; 0x1fb8 <prvWriteMessageToBuffer+0x3e>
    1fa8:	42 17       	cp	r20, r18
    1faa:	53 07       	cpc	r21, r19
    1fac:	08 f4       	brcc	.+2      	; 0x1fb0 <prvWriteMessageToBuffer+0x36>
    1fae:	9a 01       	movw	r18, r20
    1fb0:	3a 83       	std	Y+2, r19	; 0x02
    1fb2:	29 83       	std	Y+1, r18	; 0x01
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <prvWriteMessageToBuffer+0x5c>
    1fb8:	20 17       	cp	r18, r16
    1fba:	31 07       	cpc	r19, r17
    1fbc:	58 f0       	brcs	.+22     	; 0x1fd4 <prvWriteMessageToBuffer+0x5a>
    1fbe:	42 e0       	ldi	r20, 0x02	; 2
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	be 01       	movw	r22, r28
    1fc4:	6f 5f       	subi	r22, 0xFF	; 255
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	c7 01       	movw	r24, r14
    1fca:	8e df       	rcall	.-228    	; 0x1ee8 <prvWriteBytesToBuffer>
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <prvWriteMessageToBuffer+0x5c>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <prvWriteMessageToBuffer+0x5c>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	88 23       	and	r24, r24
    1fd8:	31 f0       	breq	.+12     	; 0x1fe6 <prvWriteMessageToBuffer+0x6c>
    1fda:	49 81       	ldd	r20, Y+1	; 0x01
    1fdc:	5a 81       	ldd	r21, Y+2	; 0x02
    1fde:	b6 01       	movw	r22, r12
    1fe0:	c7 01       	movw	r24, r14
    1fe2:	82 df       	rcall	.-252    	; 0x1ee8 <prvWriteBytesToBuffer>
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <prvWriteMessageToBuffer+0x70>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	df 90       	pop	r13
    1ffc:	cf 90       	pop	r12
    1ffe:	08 95       	ret

00002000 <prvReadBytesFromBuffer>:
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	7c 01       	movw	r14, r24
    2016:	5b 01       	movw	r10, r22
    2018:	e9 01       	movw	r28, r18
    201a:	42 17       	cp	r20, r18
    201c:	53 07       	cpc	r21, r19
    201e:	08 f4       	brcc	.+2      	; 0x2022 <prvReadBytesFromBuffer+0x22>
    2020:	ea 01       	movw	r28, r20
    2022:	20 97       	sbiw	r28, 0x00	; 0
    2024:	81 f1       	breq	.+96     	; 0x2086 <prvReadBytesFromBuffer+0x86>
    2026:	f7 01       	movw	r30, r14
    2028:	00 81       	ld	r16, Z
    202a:	11 81       	ldd	r17, Z+1	; 0x01
    202c:	84 81       	ldd	r24, Z+4	; 0x04
    202e:	95 81       	ldd	r25, Z+5	; 0x05
    2030:	80 1b       	sub	r24, r16
    2032:	91 0b       	sbc	r25, r17
    2034:	6e 01       	movw	r12, r28
    2036:	8c 17       	cp	r24, r28
    2038:	9d 07       	cpc	r25, r29
    203a:	08 f4       	brcc	.+2      	; 0x203e <prvReadBytesFromBuffer+0x3e>
    203c:	6c 01       	movw	r12, r24
    203e:	f7 01       	movw	r30, r14
    2040:	64 85       	ldd	r22, Z+12	; 0x0c
    2042:	75 85       	ldd	r23, Z+13	; 0x0d
    2044:	60 0f       	add	r22, r16
    2046:	71 1f       	adc	r23, r17
    2048:	a6 01       	movw	r20, r12
    204a:	c5 01       	movw	r24, r10
    204c:	0e 94 0a 38 	call	0x7014	; 0x7014 <memcpy>
    2050:	cc 16       	cp	r12, r28
    2052:	dd 06       	cpc	r13, r29
    2054:	58 f4       	brcc	.+22     	; 0x206c <prvReadBytesFromBuffer+0x6c>
    2056:	ae 01       	movw	r20, r28
    2058:	4c 19       	sub	r20, r12
    205a:	5d 09       	sbc	r21, r13
    205c:	f7 01       	movw	r30, r14
    205e:	64 85       	ldd	r22, Z+12	; 0x0c
    2060:	75 85       	ldd	r23, Z+13	; 0x0d
    2062:	c5 01       	movw	r24, r10
    2064:	8c 0d       	add	r24, r12
    2066:	9d 1d       	adc	r25, r13
    2068:	0e 94 0a 38 	call	0x7014	; 0x7014 <memcpy>
    206c:	0c 0f       	add	r16, r28
    206e:	1d 1f       	adc	r17, r29
    2070:	f7 01       	movw	r30, r14
    2072:	84 81       	ldd	r24, Z+4	; 0x04
    2074:	95 81       	ldd	r25, Z+5	; 0x05
    2076:	08 17       	cp	r16, r24
    2078:	19 07       	cpc	r17, r25
    207a:	10 f0       	brcs	.+4      	; 0x2080 <prvReadBytesFromBuffer+0x80>
    207c:	08 1b       	sub	r16, r24
    207e:	19 0b       	sbc	r17, r25
    2080:	f7 01       	movw	r30, r14
    2082:	11 83       	std	Z+1, r17	; 0x01
    2084:	00 83       	st	Z, r16
    2086:	ce 01       	movw	r24, r28
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	df 90       	pop	r13
    2096:	cf 90       	pop	r12
    2098:	bf 90       	pop	r11
    209a:	af 90       	pop	r10
    209c:	08 95       	ret

0000209e <prvReadMessageFromBuffer>:
    209e:	6f 92       	push	r6
    20a0:	7f 92       	push	r7
    20a2:	8f 92       	push	r8
    20a4:	9f 92       	push	r9
    20a6:	af 92       	push	r10
    20a8:	bf 92       	push	r11
    20aa:	cf 92       	push	r12
    20ac:	df 92       	push	r13
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	1f 92       	push	r1
    20bc:	1f 92       	push	r1
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	6c 01       	movw	r12, r24
    20c4:	4b 01       	movw	r8, r22
    20c6:	5a 01       	movw	r10, r20
    20c8:	79 01       	movw	r14, r18
    20ca:	01 15       	cp	r16, r1
    20cc:	11 05       	cpc	r17, r1
    20ce:	b1 f0       	breq	.+44     	; 0x20fc <prvReadMessageFromBuffer+0x5e>
    20d0:	fc 01       	movw	r30, r24
    20d2:	60 80       	ld	r6, Z
    20d4:	71 80       	ldd	r7, Z+1	; 0x01
    20d6:	a8 01       	movw	r20, r16
    20d8:	be 01       	movw	r22, r28
    20da:	6f 5f       	subi	r22, 0xFF	; 255
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	90 df       	rcall	.-224    	; 0x2000 <prvReadBytesFromBuffer>
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	e0 1a       	sub	r14, r16
    20e6:	f1 0a       	sbc	r15, r17
    20e8:	a8 16       	cp	r10, r24
    20ea:	b9 06       	cpc	r11, r25
    20ec:	30 f4       	brcc	.+12     	; 0x20fa <prvReadMessageFromBuffer+0x5c>
    20ee:	f6 01       	movw	r30, r12
    20f0:	71 82       	std	Z+1, r7	; 0x01
    20f2:	60 82       	st	Z, r6
    20f4:	a1 2c       	mov	r10, r1
    20f6:	b1 2c       	mov	r11, r1
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <prvReadMessageFromBuffer+0x5e>
    20fa:	5c 01       	movw	r10, r24
    20fc:	97 01       	movw	r18, r14
    20fe:	a5 01       	movw	r20, r10
    2100:	b4 01       	movw	r22, r8
    2102:	c6 01       	movw	r24, r12
    2104:	7d df       	rcall	.-262    	; 0x2000 <prvReadBytesFromBuffer>
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	bf 90       	pop	r11
    211c:	af 90       	pop	r10
    211e:	9f 90       	pop	r9
    2120:	8f 90       	pop	r8
    2122:	7f 90       	pop	r7
    2124:	6f 90       	pop	r6
    2126:	08 95       	ret

00002128 <xStreamBufferGenericCreate>:
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	ec 01       	movw	r28, r24
    2138:	6b 01       	movw	r12, r22
    213a:	41 30       	cpi	r20, 0x01	; 1
    213c:	11 f4       	brne	.+4      	; 0x2142 <xStreamBufferGenericCreate+0x1a>
    213e:	01 e0       	ldi	r16, 0x01	; 1
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <xStreamBufferGenericCreate+0x1c>
    2142:	00 e0       	ldi	r16, 0x00	; 0
    2144:	c1 14       	cp	r12, r1
    2146:	d1 04       	cpc	r13, r1
    2148:	19 f4       	brne	.+6      	; 0x2150 <xStreamBufferGenericCreate+0x28>
    214a:	cc 24       	eor	r12, r12
    214c:	c3 94       	inc	r12
    214e:	d1 2c       	mov	r13, r1
    2150:	ce 01       	movw	r24, r28
    2152:	40 96       	adiw	r24, 0x10	; 16
    2154:	c8 17       	cp	r28, r24
    2156:	d9 07       	cpc	r29, r25
    2158:	20 f4       	brcc	.+8      	; 0x2162 <xStreamBufferGenericCreate+0x3a>
    215a:	21 96       	adiw	r28, 0x01	; 1
    215c:	8f d8       	rcall	.-3810   	; 0x127c <pvPortMalloc>
    215e:	7c 01       	movw	r14, r24
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <xStreamBufferGenericCreate+0x3e>
    2162:	e1 2c       	mov	r14, r1
    2164:	f1 2c       	mov	r15, r1
    2166:	e1 14       	cp	r14, r1
    2168:	f1 04       	cpc	r15, r1
    216a:	39 f0       	breq	.+14     	; 0x217a <xStreamBufferGenericCreate+0x52>
    216c:	96 01       	movw	r18, r12
    216e:	ae 01       	movw	r20, r28
    2170:	b7 01       	movw	r22, r14
    2172:	61 5f       	subi	r22, 0xF1	; 241
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	c7 01       	movw	r24, r14
    2178:	a7 de       	rcall	.-690    	; 0x1ec8 <prvInitialiseNewStreamBuffer>
    217a:	c7 01       	movw	r24, r14
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	0f 91       	pop	r16
    2182:	ff 90       	pop	r15
    2184:	ef 90       	pop	r14
    2186:	df 90       	pop	r13
    2188:	cf 90       	pop	r12
    218a:	08 95       	ret

0000218c <xStreamBufferReset>:
    218c:	0f 93       	push	r16
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	0f 92       	push	r0
    2194:	fc 01       	movw	r30, r24
    2196:	20 85       	ldd	r18, Z+8	; 0x08
    2198:	31 85       	ldd	r19, Z+9	; 0x09
    219a:	23 2b       	or	r18, r19
    219c:	71 f4       	brne	.+28     	; 0x21ba <xStreamBufferReset+0x2e>
    219e:	22 85       	ldd	r18, Z+10	; 0x0a
    21a0:	33 85       	ldd	r19, Z+11	; 0x0b
    21a2:	23 2b       	or	r18, r19
    21a4:	61 f4       	brne	.+24     	; 0x21be <xStreamBufferReset+0x32>
    21a6:	26 81       	ldd	r18, Z+6	; 0x06
    21a8:	37 81       	ldd	r19, Z+7	; 0x07
    21aa:	44 81       	ldd	r20, Z+4	; 0x04
    21ac:	55 81       	ldd	r21, Z+5	; 0x05
    21ae:	64 85       	ldd	r22, Z+12	; 0x0c
    21b0:	75 85       	ldd	r23, Z+13	; 0x0d
    21b2:	06 85       	ldd	r16, Z+14	; 0x0e
    21b4:	89 de       	rcall	.-750    	; 0x1ec8 <prvInitialiseNewStreamBuffer>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	03 c0       	rjmp	.+6      	; 0x21c0 <xStreamBufferReset+0x34>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <xStreamBufferReset+0x34>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	0f 91       	pop	r16
    21c6:	08 95       	ret

000021c8 <xStreamBufferSpacesAvailable>:
    21c8:	fc 01       	movw	r30, r24
    21ca:	24 81       	ldd	r18, Z+4	; 0x04
    21cc:	35 81       	ldd	r19, Z+5	; 0x05
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	82 0f       	add	r24, r18
    21d4:	93 1f       	adc	r25, r19
    21d6:	42 81       	ldd	r20, Z+2	; 0x02
    21d8:	53 81       	ldd	r21, Z+3	; 0x03
    21da:	84 1b       	sub	r24, r20
    21dc:	95 0b       	sbc	r25, r21
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	82 17       	cp	r24, r18
    21e2:	93 07       	cpc	r25, r19
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <xStreamBufferSpacesAvailable+0x22>
    21e6:	82 1b       	sub	r24, r18
    21e8:	93 0b       	sbc	r25, r19
    21ea:	08 95       	ret

000021ec <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    21ec:	2f 92       	push	r2
    21ee:	3f 92       	push	r3
    21f0:	4f 92       	push	r4
    21f2:	5f 92       	push	r5
    21f4:	6f 92       	push	r6
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	2b 97       	sbiw	r28, 0x0b	; 11
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	4c 01       	movw	r8, r24
    2222:	7b 87       	std	Y+11, r23	; 0x0b
    2224:	6a 87       	std	Y+10, r22	; 0x0a
    2226:	1a 01       	movw	r2, r20
    2228:	0e 83       	std	Y+6, r16	; 0x06
    222a:	1f 83       	std	Y+7, r17	; 0x07
    222c:	28 87       	std	Y+8, r18	; 0x08
    222e:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2230:	fc 01       	movw	r30, r24
    2232:	84 81       	ldd	r24, Z+4	; 0x04
    2234:	95 81       	ldd	r25, Z+5	; 0x05
    2236:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2238:	26 85       	ldd	r18, Z+14	; 0x0e
    223a:	20 ff       	sbrs	r18, 0
    223c:	0c c0       	rjmp	.+24     	; 0x2256 <__stack+0x57>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    223e:	2a 01       	movw	r4, r20
    2240:	f2 e0       	ldi	r31, 0x02	; 2
    2242:	4f 0e       	add	r4, r31
    2244:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    2246:	84 15       	cp	r24, r4
    2248:	95 05       	cpc	r25, r5
    224a:	58 f4       	brcc	.+22     	; 0x2262 <__stack+0x63>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    224c:	1e 82       	std	Y+6, r1	; 0x06
    224e:	1f 82       	std	Y+7, r1	; 0x07
    2250:	18 86       	std	Y+8, r1	; 0x08
    2252:	19 86       	std	Y+9, r1	; 0x09
    2254:	06 c0       	rjmp	.+12     	; 0x2262 <__stack+0x63>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    2256:	84 17       	cp	r24, r20
    2258:	95 07       	cpc	r25, r21
    225a:	10 f0       	brcs	.+4      	; 0x2260 <__stack+0x61>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    225c:	2a 01       	movw	r4, r20
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <__stack+0x63>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    2260:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2262:	8e 81       	ldd	r24, Y+6	; 0x06
    2264:	9f 81       	ldd	r25, Y+7	; 0x07
    2266:	a8 85       	ldd	r26, Y+8	; 0x08
    2268:	b9 85       	ldd	r27, Y+9	; 0x09
    226a:	89 2b       	or	r24, r25
    226c:	8a 2b       	or	r24, r26
    226e:	8b 2b       	or	r24, r27
    2270:	09 f4       	brne	.+2      	; 0x2274 <__stack+0x75>
    2272:	38 c0       	rjmp	.+112    	; 0x22e4 <__stack+0xe5>
    {
        vTaskSetTimeOutState( &xTimeOut );
    2274:	ce 01       	movw	r24, r28
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	0e 94 0b 1a 	call	0x3416	; 0x3416 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2282:	c4 01       	movw	r24, r8
    2284:	a1 df       	rcall	.-190    	; 0x21c8 <xStreamBufferSpacesAvailable>
    2286:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    2288:	84 15       	cp	r24, r4
    228a:	95 05       	cpc	r25, r5
    228c:	40 f5       	brcc	.+80     	; 0x22de <__stack+0xdf>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2298:	0e 94 9c 1a 	call	0x3538	; 0x3538 <xTaskGetCurrentTaskHandle>
    229c:	f4 01       	movw	r30, r8
    229e:	93 87       	std	Z+11, r25	; 0x0b
    22a0:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    22a6:	ae 80       	ldd	r10, Y+6	; 0x06
    22a8:	bf 80       	ldd	r11, Y+7	; 0x07
    22aa:	c8 84       	ldd	r12, Y+8	; 0x08
    22ac:	d9 84       	ldd	r13, Y+9	; 0x09
    22ae:	e1 2c       	mov	r14, r1
    22b0:	f1 2c       	mov	r15, r1
    22b2:	00 e0       	ldi	r16, 0x00	; 0
    22b4:	10 e0       	ldi	r17, 0x00	; 0
    22b6:	98 01       	movw	r18, r16
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	ba 01       	movw	r22, r20
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	0e 94 34 1c 	call	0x3868	; 0x3868 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    22c4:	f4 01       	movw	r30, r8
    22c6:	13 86       	std	Z+11, r1	; 0x0b
    22c8:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    22ca:	be 01       	movw	r22, r28
    22cc:	6a 5f       	subi	r22, 0xFA	; 250
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	ce 01       	movw	r24, r28
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	0e 94 32 1a 	call	0x3464	; 0x3464 <xTaskCheckForTimeOut>
    22d8:	88 23       	and	r24, r24
    22da:	81 f2       	breq	.-96     	; 0x227c <__stack+0x7d>
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <__stack+0xe9>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    22de:	0f 90       	pop	r0
    22e0:	0f be       	out	0x3f, r0	; 63
                    break;
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <__stack+0xe9>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    22e4:	61 2c       	mov	r6, r1
    22e6:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    22e8:	61 14       	cp	r6, r1
    22ea:	71 04       	cpc	r7, r1
    22ec:	19 f4       	brne	.+6      	; 0x22f4 <__stack+0xf5>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    22ee:	c4 01       	movw	r24, r8
    22f0:	6b df       	rcall	.-298    	; 0x21c8 <xStreamBufferSpacesAvailable>
    22f2:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    22f4:	82 01       	movw	r16, r4
    22f6:	93 01       	movw	r18, r6
    22f8:	a1 01       	movw	r20, r2
    22fa:	6a 85       	ldd	r22, Y+10	; 0x0a
    22fc:	7b 85       	ldd	r23, Y+11	; 0x0b
    22fe:	c4 01       	movw	r24, r8
    2300:	3c de       	rcall	.-904    	; 0x1f7a <prvWriteMessageToBuffer>
    2302:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2304:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2306:	e9 f0       	breq	.+58     	; 0x2342 <__stack+0x143>
    2308:	c4 01       	movw	r24, r8
    230a:	cb dd       	rcall	.-1130   	; 0x1ea2 <prvBytesInBuffer>
    230c:	f4 01       	movw	r30, r8
    230e:	26 81       	ldd	r18, Z+6	; 0x06
    2310:	37 81       	ldd	r19, Z+7	; 0x07
    2312:	82 17       	cp	r24, r18
    2314:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2316:	a8 f0       	brcs	.+42     	; 0x2342 <__stack+0x143>
    2318:	91 d3       	rcall	.+1826   	; 0x2a3c <vTaskSuspendAll>
    231a:	f4 01       	movw	r30, r8
    231c:	80 85       	ldd	r24, Z+8	; 0x08
    231e:	91 85       	ldd	r25, Z+9	; 0x09
    2320:	89 2b       	or	r24, r25
    2322:	71 f0       	breq	.+28     	; 0x2340 <__stack+0x141>
    2324:	80 85       	ldd	r24, Z+8	; 0x08
    2326:	91 85       	ldd	r25, Z+9	; 0x09
    2328:	e1 2c       	mov	r14, r1
    232a:	f1 2c       	mov	r15, r1
    232c:	00 e0       	ldi	r16, 0x00	; 0
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	a9 01       	movw	r20, r18
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <xTaskGenericNotify>
    233a:	f4 01       	movw	r30, r8
    233c:	11 86       	std	Z+9, r1	; 0x09
    233e:	10 86       	std	Z+8, r1	; 0x08
    2340:	bd d4       	rcall	.+2426   	; 0x2cbc <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2342:	c6 01       	movw	r24, r12
    2344:	2b 96       	adiw	r28, 0x0b	; 11
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	bf 90       	pop	r11
    2362:	af 90       	pop	r10
    2364:	9f 90       	pop	r9
    2366:	8f 90       	pop	r8
    2368:	7f 90       	pop	r7
    236a:	6f 90       	pop	r6
    236c:	5f 90       	pop	r5
    236e:	4f 90       	pop	r4
    2370:	3f 90       	pop	r3
    2372:	2f 90       	pop	r2
    2374:	08 95       	ret

00002376 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ec 01       	movw	r28, r24
    238c:	7b 01       	movw	r14, r22
    238e:	5a 01       	movw	r10, r20
    2390:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2392:	8e 85       	ldd	r24, Y+14	; 0x0e
    2394:	80 ff       	sbrs	r24, 0
    2396:	04 c0       	rjmp	.+8      	; 0x23a0 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2398:	8a 01       	movw	r16, r20
    239a:	0e 5f       	subi	r16, 0xFE	; 254
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	01 c0       	rjmp	.+2      	; 0x23a2 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    23a0:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    23a2:	ce 01       	movw	r24, r28
    23a4:	11 df       	rcall	.-478    	; 0x21c8 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    23a6:	9c 01       	movw	r18, r24
    23a8:	a5 01       	movw	r20, r10
    23aa:	b7 01       	movw	r22, r14
    23ac:	ce 01       	movw	r24, r28
    23ae:	e5 dd       	rcall	.-1078   	; 0x1f7a <prvWriteMessageToBuffer>
    23b0:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    23b2:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    23b4:	c1 f0       	breq	.+48     	; 0x23e6 <xStreamBufferSendFromISR+0x70>
    23b6:	ce 01       	movw	r24, r28
    23b8:	74 dd       	rcall	.-1304   	; 0x1ea2 <prvBytesInBuffer>
    23ba:	2e 81       	ldd	r18, Y+6	; 0x06
    23bc:	3f 81       	ldd	r19, Y+7	; 0x07
    23be:	82 17       	cp	r24, r18
    23c0:	93 07       	cpc	r25, r19
    23c2:	88 f0       	brcs	.+34     	; 0x23e6 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    23c4:	88 85       	ldd	r24, Y+8	; 0x08
    23c6:	99 85       	ldd	r25, Y+9	; 0x09
    23c8:	89 2b       	or	r24, r25
    23ca:	69 f0       	breq	.+26     	; 0x23e6 <xStreamBufferSendFromISR+0x70>
    23cc:	88 85       	ldd	r24, Y+8	; 0x08
    23ce:	99 85       	ldd	r25, Y+9	; 0x09
    23d0:	e1 2c       	mov	r14, r1
    23d2:	f1 2c       	mov	r15, r1
    23d4:	00 e0       	ldi	r16, 0x00	; 0
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	a9 01       	movw	r20, r18
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskGenericNotifyFromISR>
    23e2:	19 86       	std	Y+9, r1	; 0x09
    23e4:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    23e6:	c5 01       	movw	r24, r10
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	ff 90       	pop	r15
    23f2:	ef 90       	pop	r14
    23f4:	df 90       	pop	r13
    23f6:	cf 90       	pop	r12
    23f8:	bf 90       	pop	r11
    23fa:	af 90       	pop	r10
    23fc:	08 95       	ret

000023fe <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    23fe:	4f 92       	push	r4
    2400:	5f 92       	push	r5
    2402:	6f 92       	push	r6
    2404:	7f 92       	push	r7
    2406:	8f 92       	push	r8
    2408:	9f 92       	push	r9
    240a:	af 92       	push	r10
    240c:	bf 92       	push	r11
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	ec 01       	movw	r28, r24
    2420:	2b 01       	movw	r4, r22
    2422:	3a 01       	movw	r6, r20
    2424:	58 01       	movw	r10, r16
    2426:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2428:	8e 85       	ldd	r24, Y+14	; 0x0e
    242a:	80 ff       	sbrs	r24, 0
    242c:	05 c0       	rjmp	.+10     	; 0x2438 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    242e:	68 94       	set
    2430:	88 24       	eor	r8, r8
    2432:	81 f8       	bld	r8, 1
    2434:	91 2c       	mov	r9, r1
    2436:	02 c0       	rjmp	.+4      	; 0x243c <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2438:	81 2c       	mov	r8, r1
    243a:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    243c:	a1 14       	cp	r10, r1
    243e:	b1 04       	cpc	r11, r1
    2440:	c1 04       	cpc	r12, r1
    2442:	d1 04       	cpc	r13, r1
    2444:	41 f1       	breq	.+80     	; 0x2496 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    244c:	ce 01       	movw	r24, r28
    244e:	29 dd       	rcall	.-1454   	; 0x1ea2 <prvBytesInBuffer>
    2450:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2452:	88 16       	cp	r8, r24
    2454:	99 06       	cpc	r9, r25
    2456:	48 f0       	brcs	.+18     	; 0x246a <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2462:	0e 94 9c 1a 	call	0x3538	; 0x3538 <xTaskGetCurrentTaskHandle>
    2466:	99 87       	std	Y+9, r25	; 0x09
    2468:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    246e:	8e 14       	cp	r8, r14
    2470:	9f 04       	cpc	r9, r15
    2472:	a0 f0       	brcs	.+40     	; 0x249c <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2474:	e1 2c       	mov	r14, r1
    2476:	f1 2c       	mov	r15, r1
    2478:	00 e0       	ldi	r16, 0x00	; 0
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	98 01       	movw	r18, r16
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	ba 01       	movw	r22, r20
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	0e 94 34 1c 	call	0x3868	; 0x3868 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    248a:	19 86       	std	Y+9, r1	; 0x09
    248c:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    248e:	ce 01       	movw	r24, r28
    2490:	08 dd       	rcall	.-1520   	; 0x1ea2 <prvBytesInBuffer>
    2492:	7c 01       	movw	r14, r24
    2494:	03 c0       	rjmp	.+6      	; 0x249c <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2496:	ce 01       	movw	r24, r28
    2498:	04 dd       	rcall	.-1528   	; 0x1ea2 <prvBytesInBuffer>
    249a:	7c 01       	movw	r14, r24
    249c:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    249e:	9f 04       	cpc	r9, r15
    24a0:	e8 f4       	brcc	.+58     	; 0x24dc <xStreamBufferReceive+0xde>
    24a2:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    24a4:	97 01       	movw	r18, r14
    24a6:	a3 01       	movw	r20, r6
    24a8:	b2 01       	movw	r22, r4
    24aa:	ce 01       	movw	r24, r28
    24ac:	f8 dd       	rcall	.-1040   	; 0x209e <prvReadMessageFromBuffer>
    24ae:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    24b0:	89 2b       	or	r24, r25
    24b2:	b1 f0       	breq	.+44     	; 0x24e0 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    24b4:	c3 d2       	rcall	.+1414   	; 0x2a3c <vTaskSuspendAll>
    24b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ba:	89 2b       	or	r24, r25
    24bc:	69 f0       	breq	.+26     	; 0x24d8 <xStreamBufferReceive+0xda>
    24be:	8a 85       	ldd	r24, Y+10	; 0x0a
    24c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24c2:	e1 2c       	mov	r14, r1
    24c4:	f1 2c       	mov	r15, r1
    24c6:	00 e0       	ldi	r16, 0x00	; 0
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	a9 01       	movw	r20, r18
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <xTaskGenericNotify>
    24d4:	1b 86       	std	Y+11, r1	; 0x0b
    24d6:	1a 86       	std	Y+10, r1	; 0x0a
    24d8:	f1 d3       	rcall	.+2018   	; 0x2cbc <xTaskResumeAll>
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <xStreamBufferReceive+0xe2>
    24dc:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    24de:	d1 2c       	mov	r13, r1
    24e0:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	cf 90       	pop	r12
    24f2:	bf 90       	pop	r11
    24f4:	af 90       	pop	r10
    24f6:	9f 90       	pop	r9
    24f8:	8f 90       	pop	r8
    24fa:	7f 90       	pop	r7
    24fc:	6f 90       	pop	r6
    24fe:	5f 90       	pop	r5
    2500:	4f 90       	pop	r4
    2502:	08 95       	ret

00002504 <prvResetNextTaskUnblockTime>:
    2504:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <pxDelayedTaskList>
    2508:	f0 91 f0 13 	lds	r31, 0x13F0	; 0x8013f0 <pxDelayedTaskList+0x1>
    250c:	80 81       	ld	r24, Z
    250e:	81 11       	cpse	r24, r1
    2510:	0c c0       	rjmp	.+24     	; 0x252a <prvResetNextTaskUnblockTime+0x26>
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	9f ef       	ldi	r25, 0xFF	; 255
    2516:	dc 01       	movw	r26, r24
    2518:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    251c:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2520:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2524:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2528:	08 95       	ret
    252a:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <pxDelayedTaskList>
    252e:	f0 91 f0 13 	lds	r31, 0x13F0	; 0x8013f0 <pxDelayedTaskList+0x1>
    2532:	07 80       	ldd	r0, Z+7	; 0x07
    2534:	f0 85       	ldd	r31, Z+8	; 0x08
    2536:	e0 2d       	mov	r30, r0
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	a2 81       	ldd	r26, Z+2	; 0x02
    253e:	b3 81       	ldd	r27, Z+3	; 0x03
    2540:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    2544:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2548:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    254c:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2550:	08 95       	ret

00002552 <prvDeleteTCB>:
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	ec 01       	movw	r28, r24
    2558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
    2560:	ce 01       	movw	r24, r28
    2562:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	08 95       	ret

0000256c <prvInitialiseNewTask>:
    256c:	4f 92       	push	r4
    256e:	5f 92       	push	r5
    2570:	6f 92       	push	r6
    2572:	7f 92       	push	r7
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	2c 01       	movw	r4, r24
    258c:	5b 01       	movw	r10, r22
    258e:	4a 01       	movw	r8, r20
    2590:	39 01       	movw	r6, r18
    2592:	e6 01       	movw	r28, r12
    2594:	65 ea       	ldi	r22, 0xA5	; 165
    2596:	70 e0       	ldi	r23, 0x00	; 0
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	0e 94 13 38 	call	0x7026	; 0x7026 <memset>
    25a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a4:	21 e0       	ldi	r18, 0x01	; 1
    25a6:	82 1a       	sub	r8, r18
    25a8:	91 08       	sbc	r9, r1
    25aa:	88 0e       	add	r8, r24
    25ac:	99 1e       	adc	r9, r25
    25ae:	a1 14       	cp	r10, r1
    25b0:	b1 04       	cpc	r11, r1
    25b2:	89 f4       	brne	.+34     	; 0x25d6 <prvInitialiseNewTask+0x6a>
    25b4:	15 c0       	rjmp	.+42     	; 0x25e0 <prvInitialiseNewTask+0x74>
    25b6:	82 2f       	mov	r24, r18
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	f5 01       	movw	r30, r10
    25bc:	e8 0f       	add	r30, r24
    25be:	f9 1f       	adc	r31, r25
    25c0:	30 81       	ld	r19, Z
    25c2:	de 01       	movw	r26, r28
    25c4:	a8 0f       	add	r26, r24
    25c6:	b9 1f       	adc	r27, r25
    25c8:	5d 96       	adiw	r26, 0x1d	; 29
    25ca:	3c 93       	st	X, r19
    25cc:	80 81       	ld	r24, Z
    25ce:	88 23       	and	r24, r24
    25d0:	29 f0       	breq	.+10     	; 0x25dc <prvInitialiseNewTask+0x70>
    25d2:	2f 5f       	subi	r18, 0xFF	; 255
    25d4:	01 c0       	rjmp	.+2      	; 0x25d8 <prvInitialiseNewTask+0x6c>
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	20 31       	cpi	r18, 0x10	; 16
    25da:	68 f3       	brcs	.-38     	; 0x25b6 <prvInitialiseNewTask+0x4a>
    25dc:	1c a6       	std	Y+44, r1	; 0x2c
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <prvInitialiseNewTask+0x76>
    25e0:	1d 8e       	std	Y+29, r1	; 0x1d
    25e2:	0a 30       	cpi	r16, 0x0A	; 10
    25e4:	08 f0       	brcs	.+2      	; 0x25e8 <prvInitialiseNewTask+0x7c>
    25e6:	09 e0       	ldi	r16, 0x09	; 9
    25e8:	0a 8f       	std	Y+26, r16	; 0x1a
    25ea:	0d a7       	std	Y+45, r16	; 0x2d
    25ec:	1e a6       	std	Y+46, r1	; 0x2e
    25ee:	ce 01       	movw	r24, r28
    25f0:	02 96       	adiw	r24, 0x02	; 2
    25f2:	0e 94 35 0a 	call	0x146a	; 0x146a <vListInitialiseItem>
    25f6:	ce 01       	movw	r24, r28
    25f8:	0e 96       	adiw	r24, 0x0e	; 14
    25fa:	0e 94 35 0a 	call	0x146a	; 0x146a <vListInitialiseItem>
    25fe:	db 87       	std	Y+11, r29	; 0x0b
    2600:	ca 87       	std	Y+10, r28	; 0x0a
    2602:	8a e0       	ldi	r24, 0x0A	; 10
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	a0 e0       	ldi	r26, 0x00	; 0
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	80 1b       	sub	r24, r16
    260c:	91 09       	sbc	r25, r1
    260e:	a1 09       	sbc	r26, r1
    2610:	b1 09       	sbc	r27, r1
    2612:	8e 87       	std	Y+14, r24	; 0x0e
    2614:	9f 87       	std	Y+15, r25	; 0x0f
    2616:	a8 8b       	std	Y+16, r26	; 0x10
    2618:	b9 8b       	std	Y+17, r27	; 0x11
    261a:	df 8b       	std	Y+23, r29	; 0x17
    261c:	ce 8b       	std	Y+22, r28	; 0x16
    261e:	84 e0       	ldi	r24, 0x04	; 4
    2620:	fe 01       	movw	r30, r28
    2622:	bf 96       	adiw	r30, 0x2f	; 47
    2624:	df 01       	movw	r26, r30
    2626:	1d 92       	st	X+, r1
    2628:	8a 95       	dec	r24
    262a:	e9 f7       	brne	.-6      	; 0x2626 <prvInitialiseNewTask+0xba>
    262c:	1b aa       	std	Y+51, r1	; 0x33
    262e:	a3 01       	movw	r20, r6
    2630:	b2 01       	movw	r22, r4
    2632:	c4 01       	movw	r24, r8
    2634:	0e 94 a9 0a 	call	0x1552	; 0x1552 <pxPortInitialiseStack>
    2638:	99 83       	std	Y+1, r25	; 0x01
    263a:	88 83       	st	Y, r24
    263c:	e1 14       	cp	r14, r1
    263e:	f1 04       	cpc	r15, r1
    2640:	19 f0       	breq	.+6      	; 0x2648 <prvInitialiseNewTask+0xdc>
    2642:	f7 01       	movw	r30, r14
    2644:	d1 83       	std	Z+1, r29	; 0x01
    2646:	c0 83       	st	Z, r28
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	0f 91       	pop	r16
    264e:	ff 90       	pop	r15
    2650:	ef 90       	pop	r14
    2652:	df 90       	pop	r13
    2654:	cf 90       	pop	r12
    2656:	bf 90       	pop	r11
    2658:	af 90       	pop	r10
    265a:	9f 90       	pop	r9
    265c:	8f 90       	pop	r8
    265e:	7f 90       	pop	r7
    2660:	6f 90       	pop	r6
    2662:	5f 90       	pop	r5
    2664:	4f 90       	pop	r4
    2666:	08 95       	ret

00002668 <prvInitialiseTaskLists>:
    2668:	cf 93       	push	r28
    266a:	c0 e0       	ldi	r28, 0x00	; 0
    266c:	09 c0       	rjmp	.+18     	; 0x2680 <prvInitialiseTaskLists+0x18>
    266e:	2b e0       	ldi	r18, 0x0B	; 11
    2670:	c2 9f       	mul	r28, r18
    2672:	c0 01       	movw	r24, r0
    2674:	11 24       	eor	r1, r1
    2676:	89 5f       	subi	r24, 0xF9	; 249
    2678:	9b 4e       	sbci	r25, 0xEB	; 235
    267a:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    267e:	cf 5f       	subi	r28, 0xFF	; 255
    2680:	ca 30       	cpi	r28, 0x0A	; 10
    2682:	a8 f3       	brcs	.-22     	; 0x266e <prvInitialiseTaskLists+0x6>
    2684:	8c ef       	ldi	r24, 0xFC	; 252
    2686:	93 e1       	ldi	r25, 0x13	; 19
    2688:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    268c:	81 ef       	ldi	r24, 0xF1	; 241
    268e:	93 e1       	ldi	r25, 0x13	; 19
    2690:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    2694:	82 ee       	ldi	r24, 0xE2	; 226
    2696:	93 e1       	ldi	r25, 0x13	; 19
    2698:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    269c:	87 ed       	ldi	r24, 0xD7	; 215
    269e:	93 e1       	ldi	r25, 0x13	; 19
    26a0:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    26a4:	8b ec       	ldi	r24, 0xCB	; 203
    26a6:	93 e1       	ldi	r25, 0x13	; 19
    26a8:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    26ac:	8c ef       	ldi	r24, 0xFC	; 252
    26ae:	93 e1       	ldi	r25, 0x13	; 19
    26b0:	90 93 f0 13 	sts	0x13F0, r25	; 0x8013f0 <pxDelayedTaskList+0x1>
    26b4:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <pxDelayedTaskList>
    26b8:	81 ef       	ldi	r24, 0xF1	; 241
    26ba:	93 e1       	ldi	r25, 0x13	; 19
    26bc:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <pxOverflowDelayedTaskList+0x1>
    26c0:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <pxOverflowDelayedTaskList>
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <prvAddNewTaskToReadyList>:
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	ec 01       	movw	r28, r24
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
    26d4:	80 91 ca 13 	lds	r24, 0x13CA	; 0x8013ca <uxCurrentNumberOfTasks>
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	80 93 ca 13 	sts	0x13CA, r24	; 0x8013ca <uxCurrentNumberOfTasks>
    26de:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    26e2:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    26e6:	89 2b       	or	r24, r25
    26e8:	51 f4       	brne	.+20     	; 0x26fe <prvAddNewTaskToReadyList+0x36>
    26ea:	d0 93 76 14 	sts	0x1476, r29	; 0x801476 <pxCurrentTCB+0x1>
    26ee:	c0 93 75 14 	sts	0x1475, r28	; 0x801475 <pxCurrentTCB>
    26f2:	80 91 ca 13 	lds	r24, 0x13CA	; 0x8013ca <uxCurrentNumberOfTasks>
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	91 f4       	brne	.+36     	; 0x271e <prvAddNewTaskToReadyList+0x56>
    26fa:	b6 df       	rcall	.-148    	; 0x2668 <prvInitialiseTaskLists>
    26fc:	10 c0       	rjmp	.+32     	; 0x271e <prvAddNewTaskToReadyList+0x56>
    26fe:	80 91 c4 13 	lds	r24, 0x13C4	; 0x8013c4 <xSchedulerRunning>
    2702:	81 11       	cpse	r24, r1
    2704:	0c c0       	rjmp	.+24     	; 0x271e <prvAddNewTaskToReadyList+0x56>
    2706:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    270a:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    270e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2710:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2712:	89 17       	cp	r24, r25
    2714:	20 f0       	brcs	.+8      	; 0x271e <prvAddNewTaskToReadyList+0x56>
    2716:	d0 93 76 14 	sts	0x1476, r29	; 0x801476 <pxCurrentTCB+0x1>
    271a:	c0 93 75 14 	sts	0x1475, r28	; 0x801475 <pxCurrentTCB>
    271e:	80 91 bd 13 	lds	r24, 0x13BD	; 0x8013bd <uxTaskNumber>
    2722:	8f 5f       	subi	r24, 0xFF	; 255
    2724:	80 93 bd 13 	sts	0x13BD, r24	; 0x8013bd <uxTaskNumber>
    2728:	ea 8d       	ldd	r30, Y+26	; 0x1a
    272a:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    272e:	8e 17       	cp	r24, r30
    2730:	10 f4       	brcc	.+4      	; 0x2736 <prvAddNewTaskToReadyList+0x6e>
    2732:	e0 93 c5 13 	sts	0x13C5, r30	; 0x8013c5 <uxTopReadyPriority>
    2736:	8b e0       	ldi	r24, 0x0B	; 11
    2738:	8e 9f       	mul	r24, r30
    273a:	f0 01       	movw	r30, r0
    273c:	11 24       	eor	r1, r1
    273e:	e9 5f       	subi	r30, 0xF9	; 249
    2740:	fb 4e       	sbci	r31, 0xEB	; 235
    2742:	01 80       	ldd	r0, Z+1	; 0x01
    2744:	f2 81       	ldd	r31, Z+2	; 0x02
    2746:	e0 2d       	mov	r30, r0
    2748:	ff 83       	std	Y+7, r31	; 0x07
    274a:	ee 83       	std	Y+6, r30	; 0x06
    274c:	26 81       	ldd	r18, Z+6	; 0x06
    274e:	37 81       	ldd	r19, Z+7	; 0x07
    2750:	39 87       	std	Y+9, r19	; 0x09
    2752:	28 87       	std	Y+8, r18	; 0x08
    2754:	a6 81       	ldd	r26, Z+6	; 0x06
    2756:	b7 81       	ldd	r27, Z+7	; 0x07
    2758:	9e 01       	movw	r18, r28
    275a:	2e 5f       	subi	r18, 0xFE	; 254
    275c:	3f 4f       	sbci	r19, 0xFF	; 255
    275e:	15 96       	adiw	r26, 0x05	; 5
    2760:	3c 93       	st	X, r19
    2762:	2e 93       	st	-X, r18
    2764:	14 97       	sbiw	r26, 0x04	; 4
    2766:	37 83       	std	Z+7, r19	; 0x07
    2768:	26 83       	std	Z+6, r18	; 0x06
    276a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    276c:	8e 9f       	mul	r24, r30
    276e:	f0 01       	movw	r30, r0
    2770:	11 24       	eor	r1, r1
    2772:	e9 5f       	subi	r30, 0xF9	; 249
    2774:	fb 4e       	sbci	r31, 0xEB	; 235
    2776:	fd 87       	std	Y+13, r31	; 0x0d
    2778:	ec 87       	std	Y+12, r30	; 0x0c
    277a:	80 81       	ld	r24, Z
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	80 83       	st	Z, r24
    2780:	0f 90       	pop	r0
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	80 91 c4 13 	lds	r24, 0x13C4	; 0x8013c4 <xSchedulerRunning>
    2788:	88 23       	and	r24, r24
    278a:	51 f0       	breq	.+20     	; 0x27a0 <prvAddNewTaskToReadyList+0xd8>
    278c:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    2790:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2794:	92 8d       	ldd	r25, Z+26	; 0x1a
    2796:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2798:	98 17       	cp	r25, r24
    279a:	10 f4       	brcc	.+4      	; 0x27a0 <prvAddNewTaskToReadyList+0xd8>
    279c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	08 95       	ret

000027a6 <prvCheckTasksWaitingTermination>:
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	1b c0       	rjmp	.+54     	; 0x27e2 <prvCheckTasksWaitingTermination+0x3c>
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	0f 92       	push	r0
    27b2:	e0 91 de 13 	lds	r30, 0x13DE	; 0x8013de <xTasksWaitingTermination+0x7>
    27b6:	f0 91 df 13 	lds	r31, 0x13DF	; 0x8013df <xTasksWaitingTermination+0x8>
    27ba:	c0 85       	ldd	r28, Z+8	; 0x08
    27bc:	d1 85       	ldd	r29, Z+9	; 0x09
    27be:	ce 01       	movw	r24, r28
    27c0:	02 96       	adiw	r24, 0x02	; 2
    27c2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
    27c6:	80 91 ca 13 	lds	r24, 0x13CA	; 0x8013ca <uxCurrentNumberOfTasks>
    27ca:	81 50       	subi	r24, 0x01	; 1
    27cc:	80 93 ca 13 	sts	0x13CA, r24	; 0x8013ca <uxCurrentNumberOfTasks>
    27d0:	80 91 d6 13 	lds	r24, 0x13D6	; 0x8013d6 <uxDeletedTasksWaitingCleanUp>
    27d4:	81 50       	subi	r24, 0x01	; 1
    27d6:	80 93 d6 13 	sts	0x13D6, r24	; 0x8013d6 <uxDeletedTasksWaitingCleanUp>
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	ce 01       	movw	r24, r28
    27e0:	b8 de       	rcall	.-656    	; 0x2552 <prvDeleteTCB>
    27e2:	80 91 d6 13 	lds	r24, 0x13D6	; 0x8013d6 <uxDeletedTasksWaitingCleanUp>
    27e6:	81 11       	cpse	r24, r1
    27e8:	e1 cf       	rjmp	.-62     	; 0x27ac <prvCheckTasksWaitingTermination+0x6>
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	08 95       	ret

000027f0 <prvAddCurrentTaskToDelayedList>:
    27f0:	8f 92       	push	r8
    27f2:	9f 92       	push	r9
    27f4:	af 92       	push	r10
    27f6:	bf 92       	push	r11
    27f8:	cf 92       	push	r12
    27fa:	df 92       	push	r13
    27fc:	ef 92       	push	r14
    27fe:	ff 92       	push	r15
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	6b 01       	movw	r12, r22
    2806:	7c 01       	movw	r14, r24
    2808:	c4 2f       	mov	r28, r20
    280a:	80 90 c6 13 	lds	r8, 0x13C6	; 0x8013c6 <xTickCount>
    280e:	90 90 c7 13 	lds	r9, 0x13C7	; 0x8013c7 <xTickCount+0x1>
    2812:	a0 90 c8 13 	lds	r10, 0x13C8	; 0x8013c8 <xTickCount+0x2>
    2816:	b0 90 c9 13 	lds	r11, 0x13C9	; 0x8013c9 <xTickCount+0x3>
    281a:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    281e:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2822:	02 96       	adiw	r24, 0x02	; 2
    2824:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	c8 16       	cp	r12, r24
    282c:	d8 06       	cpc	r13, r24
    282e:	e8 06       	cpc	r14, r24
    2830:	f8 06       	cpc	r15, r24
    2832:	b1 f5       	brne	.+108    	; 0x28a0 <prvAddCurrentTaskToDelayedList+0xb0>
    2834:	cc 23       	and	r28, r28
    2836:	a1 f1       	breq	.+104    	; 0x28a0 <prvAddCurrentTaskToDelayedList+0xb0>
    2838:	eb ec       	ldi	r30, 0xCB	; 203
    283a:	f3 e1       	ldi	r31, 0x13	; 19
    283c:	a1 81       	ldd	r26, Z+1	; 0x01
    283e:	b2 81       	ldd	r27, Z+2	; 0x02
    2840:	c0 91 75 14 	lds	r28, 0x1475	; 0x801475 <pxCurrentTCB>
    2844:	d0 91 76 14 	lds	r29, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2848:	bf 83       	std	Y+7, r27	; 0x07
    284a:	ae 83       	std	Y+6, r26	; 0x06
    284c:	c0 91 75 14 	lds	r28, 0x1475	; 0x801475 <pxCurrentTCB>
    2850:	d0 91 76 14 	lds	r29, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2854:	16 96       	adiw	r26, 0x06	; 6
    2856:	8d 91       	ld	r24, X+
    2858:	9c 91       	ld	r25, X
    285a:	17 97       	sbiw	r26, 0x07	; 7
    285c:	99 87       	std	Y+9, r25	; 0x09
    285e:	88 87       	std	Y+8, r24	; 0x08
    2860:	16 96       	adiw	r26, 0x06	; 6
    2862:	cd 91       	ld	r28, X+
    2864:	dc 91       	ld	r29, X
    2866:	17 97       	sbiw	r26, 0x07	; 7
    2868:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    286c:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2870:	02 96       	adiw	r24, 0x02	; 2
    2872:	9d 83       	std	Y+5, r25	; 0x05
    2874:	8c 83       	std	Y+4, r24	; 0x04
    2876:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    287a:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    287e:	02 96       	adiw	r24, 0x02	; 2
    2880:	17 96       	adiw	r26, 0x07	; 7
    2882:	9c 93       	st	X, r25
    2884:	8e 93       	st	-X, r24
    2886:	16 97       	sbiw	r26, 0x06	; 6
    2888:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    288c:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2890:	1d 96       	adiw	r26, 0x0d	; 13
    2892:	fc 93       	st	X, r31
    2894:	ee 93       	st	-X, r30
    2896:	1c 97       	sbiw	r26, 0x0c	; 12
    2898:	80 81       	ld	r24, Z
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	80 83       	st	Z, r24
    289e:	3f c0       	rjmp	.+126    	; 0x291e <prvAddCurrentTaskToDelayedList+0x12e>
    28a0:	c8 0c       	add	r12, r8
    28a2:	d9 1c       	adc	r13, r9
    28a4:	ea 1c       	adc	r14, r10
    28a6:	fb 1c       	adc	r15, r11
    28a8:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    28ac:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    28b0:	c2 82       	std	Z+2, r12	; 0x02
    28b2:	d3 82       	std	Z+3, r13	; 0x03
    28b4:	e4 82       	std	Z+4, r14	; 0x04
    28b6:	f5 82       	std	Z+5, r15	; 0x05
    28b8:	c8 14       	cp	r12, r8
    28ba:	d9 04       	cpc	r13, r9
    28bc:	ea 04       	cpc	r14, r10
    28be:	fb 04       	cpc	r15, r11
    28c0:	68 f4       	brcc	.+26     	; 0x28dc <prvAddCurrentTaskToDelayedList+0xec>
    28c2:	60 91 75 14 	lds	r22, 0x1475	; 0x801475 <pxCurrentTCB>
    28c6:	70 91 76 14 	lds	r23, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    28ca:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <pxOverflowDelayedTaskList>
    28ce:	90 91 ee 13 	lds	r25, 0x13EE	; 0x8013ee <pxOverflowDelayedTaskList+0x1>
    28d2:	6e 5f       	subi	r22, 0xFE	; 254
    28d4:	7f 4f       	sbci	r23, 0xFF	; 255
    28d6:	0e 94 39 0a 	call	0x1472	; 0x1472 <vListInsert>
    28da:	21 c0       	rjmp	.+66     	; 0x291e <prvAddCurrentTaskToDelayedList+0x12e>
    28dc:	60 91 75 14 	lds	r22, 0x1475	; 0x801475 <pxCurrentTCB>
    28e0:	70 91 76 14 	lds	r23, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    28e4:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <pxDelayedTaskList>
    28e8:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <pxDelayedTaskList+0x1>
    28ec:	6e 5f       	subi	r22, 0xFE	; 254
    28ee:	7f 4f       	sbci	r23, 0xFF	; 255
    28f0:	0e 94 39 0a 	call	0x1472	; 0x1472 <vListInsert>
    28f4:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <xNextTaskUnblockTime>
    28f8:	90 91 ba 13 	lds	r25, 0x13BA	; 0x8013ba <xNextTaskUnblockTime+0x1>
    28fc:	a0 91 bb 13 	lds	r26, 0x13BB	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2900:	b0 91 bc 13 	lds	r27, 0x13BC	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2904:	c8 16       	cp	r12, r24
    2906:	d9 06       	cpc	r13, r25
    2908:	ea 06       	cpc	r14, r26
    290a:	fb 06       	cpc	r15, r27
    290c:	40 f4       	brcc	.+16     	; 0x291e <prvAddCurrentTaskToDelayedList+0x12e>
    290e:	c0 92 b9 13 	sts	0x13B9, r12	; 0x8013b9 <xNextTaskUnblockTime>
    2912:	d0 92 ba 13 	sts	0x13BA, r13	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2916:	e0 92 bb 13 	sts	0x13BB, r14	; 0x8013bb <xNextTaskUnblockTime+0x2>
    291a:	f0 92 bc 13 	sts	0x13BC, r15	; 0x8013bc <xNextTaskUnblockTime+0x3>
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	bf 90       	pop	r11
    292c:	af 90       	pop	r10
    292e:	9f 90       	pop	r9
    2930:	8f 90       	pop	r8
    2932:	08 95       	ret

00002934 <xTaskCreate>:
    2934:	2f 92       	push	r2
    2936:	3f 92       	push	r3
    2938:	4f 92       	push	r4
    293a:	5f 92       	push	r5
    293c:	6f 92       	push	r6
    293e:	7f 92       	push	r7
    2940:	8f 92       	push	r8
    2942:	9f 92       	push	r9
    2944:	af 92       	push	r10
    2946:	bf 92       	push	r11
    2948:	cf 92       	push	r12
    294a:	df 92       	push	r13
    294c:	ef 92       	push	r14
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	3c 01       	movw	r6, r24
    2958:	1b 01       	movw	r2, r22
    295a:	4a 01       	movw	r8, r20
    295c:	29 01       	movw	r4, r18
    295e:	ca 01       	movw	r24, r20
    2960:	0e 94 3e 09 	call	0x127c	; 0x127c <pvPortMalloc>
    2964:	6c 01       	movw	r12, r24
    2966:	89 2b       	or	r24, r25
    2968:	71 f0       	breq	.+28     	; 0x2986 <xTaskCreate+0x52>
    296a:	84 e3       	ldi	r24, 0x34	; 52
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 3e 09 	call	0x127c	; 0x127c <pvPortMalloc>
    2972:	ec 01       	movw	r28, r24
    2974:	89 2b       	or	r24, r25
    2976:	19 f0       	breq	.+6      	; 0x297e <xTaskCreate+0x4a>
    2978:	dc 8e       	std	Y+28, r13	; 0x1c
    297a:	cb 8e       	std	Y+27, r12	; 0x1b
    297c:	06 c0       	rjmp	.+12     	; 0x298a <xTaskCreate+0x56>
    297e:	c6 01       	movw	r24, r12
    2980:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
    2984:	02 c0       	rjmp	.+4      	; 0x298a <xTaskCreate+0x56>
    2986:	c0 e0       	ldi	r28, 0x00	; 0
    2988:	d0 e0       	ldi	r29, 0x00	; 0
    298a:	20 97       	sbiw	r28, 0x00	; 0
    298c:	61 f0       	breq	.+24     	; 0x29a6 <xTaskCreate+0x72>
    298e:	a1 2c       	mov	r10, r1
    2990:	b1 2c       	mov	r11, r1
    2992:	6e 01       	movw	r12, r28
    2994:	92 01       	movw	r18, r4
    2996:	a4 01       	movw	r20, r8
    2998:	b1 01       	movw	r22, r2
    299a:	c3 01       	movw	r24, r6
    299c:	e7 dd       	rcall	.-1074   	; 0x256c <prvInitialiseNewTask>
    299e:	ce 01       	movw	r24, r28
    29a0:	93 de       	rcall	.-730    	; 0x26c8 <prvAddNewTaskToReadyList>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	01 c0       	rjmp	.+2      	; 0x29a8 <xTaskCreate+0x74>
    29a6:	8f ef       	ldi	r24, 0xFF	; 255
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	0f 91       	pop	r16
    29ae:	ff 90       	pop	r15
    29b0:	ef 90       	pop	r14
    29b2:	df 90       	pop	r13
    29b4:	cf 90       	pop	r12
    29b6:	bf 90       	pop	r11
    29b8:	af 90       	pop	r10
    29ba:	9f 90       	pop	r9
    29bc:	8f 90       	pop	r8
    29be:	7f 90       	pop	r7
    29c0:	6f 90       	pop	r6
    29c2:	5f 90       	pop	r5
    29c4:	4f 90       	pop	r4
    29c6:	3f 90       	pop	r3
    29c8:	2f 90       	pop	r2
    29ca:	08 95       	ret

000029cc <vTaskStartScheduler>:
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	0f 2e       	mov	r0, r31
    29d4:	f7 eb       	ldi	r31, 0xB7	; 183
    29d6:	ef 2e       	mov	r14, r31
    29d8:	f3 e1       	ldi	r31, 0x13	; 19
    29da:	ff 2e       	mov	r15, r31
    29dc:	f0 2d       	mov	r31, r0
    29de:	00 e0       	ldi	r16, 0x00	; 0
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 ec       	ldi	r20, 0xC0	; 192
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	6e ec       	ldi	r22, 0xCE	; 206
    29ea:	74 e0       	ldi	r23, 0x04	; 4
    29ec:	8e e4       	ldi	r24, 0x4E	; 78
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	a1 df       	rcall	.-190    	; 0x2934 <xTaskCreate>
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	11 f4       	brne	.+4      	; 0x29fa <vTaskStartScheduler+0x2e>
    29f6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <xTimerCreateTimerTask>
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	c9 f4       	brne	.+50     	; 0x2a30 <vTaskStartScheduler+0x64>
    29fe:	f8 94       	cli
    2a00:	8f ef       	ldi	r24, 0xFF	; 255
    2a02:	9f ef       	ldi	r25, 0xFF	; 255
    2a04:	dc 01       	movw	r26, r24
    2a06:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <xNextTaskUnblockTime>
    2a0a:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2a0e:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2a12:	b0 93 bc 13 	sts	0x13BC, r27	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	80 93 c4 13 	sts	0x13C4, r24	; 0x8013c4 <xSchedulerRunning>
    2a1c:	10 92 c6 13 	sts	0x13C6, r1	; 0x8013c6 <xTickCount>
    2a20:	10 92 c7 13 	sts	0x13C7, r1	; 0x8013c7 <xTickCount+0x1>
    2a24:	10 92 c8 13 	sts	0x13C8, r1	; 0x8013c8 <xTickCount+0x2>
    2a28:	10 92 c9 13 	sts	0x13C9, r1	; 0x8013c9 <xTickCount+0x3>
    2a2c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <xPortStartScheduler>
    2a30:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2a34:	0f 91       	pop	r16
    2a36:	ff 90       	pop	r15
    2a38:	ef 90       	pop	r14
    2a3a:	08 95       	ret

00002a3c <vTaskSuspendAll>:
    2a3c:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    2a40:	8f 5f       	subi	r24, 0xFF	; 255
    2a42:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <uxSchedulerSuspended>
    2a46:	08 95       	ret

00002a48 <xTaskGetTickCount>:
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	0f 92       	push	r0
    2a4e:	60 91 c6 13 	lds	r22, 0x13C6	; 0x8013c6 <xTickCount>
    2a52:	70 91 c7 13 	lds	r23, 0x13C7	; 0x8013c7 <xTickCount+0x1>
    2a56:	80 91 c8 13 	lds	r24, 0x13C8	; 0x8013c8 <xTickCount+0x2>
    2a5a:	90 91 c9 13 	lds	r25, 0x13C9	; 0x8013c9 <xTickCount+0x3>
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	08 95       	ret

00002a64 <xTaskIncrementTick>:
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    2a74:	81 11       	cpse	r24, r1
    2a76:	05 c1       	rjmp	.+522    	; 0x2c82 <xTaskIncrementTick+0x21e>
    2a78:	c0 90 c6 13 	lds	r12, 0x13C6	; 0x8013c6 <xTickCount>
    2a7c:	d0 90 c7 13 	lds	r13, 0x13C7	; 0x8013c7 <xTickCount+0x1>
    2a80:	e0 90 c8 13 	lds	r14, 0x13C8	; 0x8013c8 <xTickCount+0x2>
    2a84:	f0 90 c9 13 	lds	r15, 0x13C9	; 0x8013c9 <xTickCount+0x3>
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	c8 1a       	sub	r12, r24
    2a8c:	d8 0a       	sbc	r13, r24
    2a8e:	e8 0a       	sbc	r14, r24
    2a90:	f8 0a       	sbc	r15, r24
    2a92:	c0 92 c6 13 	sts	0x13C6, r12	; 0x8013c6 <xTickCount>
    2a96:	d0 92 c7 13 	sts	0x13C7, r13	; 0x8013c7 <xTickCount+0x1>
    2a9a:	e0 92 c8 13 	sts	0x13C8, r14	; 0x8013c8 <xTickCount+0x2>
    2a9e:	f0 92 c9 13 	sts	0x13C9, r15	; 0x8013c9 <xTickCount+0x3>
    2aa2:	c1 14       	cp	r12, r1
    2aa4:	d1 04       	cpc	r13, r1
    2aa6:	e1 04       	cpc	r14, r1
    2aa8:	f1 04       	cpc	r15, r1
    2aaa:	b1 f4       	brne	.+44     	; 0x2ad8 <xTaskIncrementTick+0x74>
    2aac:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <pxDelayedTaskList>
    2ab0:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <pxDelayedTaskList+0x1>
    2ab4:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <pxOverflowDelayedTaskList>
    2ab8:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <pxOverflowDelayedTaskList+0x1>
    2abc:	30 93 f0 13 	sts	0x13F0, r19	; 0x8013f0 <pxDelayedTaskList+0x1>
    2ac0:	20 93 ef 13 	sts	0x13EF, r18	; 0x8013ef <pxDelayedTaskList>
    2ac4:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <pxOverflowDelayedTaskList+0x1>
    2ac8:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <pxOverflowDelayedTaskList>
    2acc:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <xNumOfOverflows>
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	80 93 be 13 	sts	0x13BE, r24	; 0x8013be <xNumOfOverflows>
    2ad6:	16 dd       	rcall	.-1492   	; 0x2504 <prvResetNextTaskUnblockTime>
    2ad8:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <xNextTaskUnblockTime>
    2adc:	90 91 ba 13 	lds	r25, 0x13BA	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2ae0:	a0 91 bb 13 	lds	r26, 0x13BB	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2ae4:	b0 91 bc 13 	lds	r27, 0x13BC	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2ae8:	c8 16       	cp	r12, r24
    2aea:	d9 06       	cpc	r13, r25
    2aec:	ea 06       	cpc	r14, r26
    2aee:	fb 06       	cpc	r15, r27
    2af0:	20 f4       	brcc	.+8      	; 0x2afa <xTaskIncrementTick+0x96>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	b2 c0       	rjmp	.+356    	; 0x2c5a <xTaskIncrementTick+0x1f6>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	01 c0       	rjmp	.+2      	; 0x2afc <xTaskIncrementTick+0x98>
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <pxDelayedTaskList>
    2b00:	f0 91 f0 13 	lds	r31, 0x13F0	; 0x8013f0 <pxDelayedTaskList+0x1>
    2b04:	90 81       	ld	r25, Z
    2b06:	91 11       	cpse	r25, r1
    2b08:	0c c0       	rjmp	.+24     	; 0x2b22 <xTaskIncrementTick+0xbe>
    2b0a:	4f ef       	ldi	r20, 0xFF	; 255
    2b0c:	5f ef       	ldi	r21, 0xFF	; 255
    2b0e:	ba 01       	movw	r22, r20
    2b10:	40 93 b9 13 	sts	0x13B9, r20	; 0x8013b9 <xNextTaskUnblockTime>
    2b14:	50 93 ba 13 	sts	0x13BA, r21	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2b18:	60 93 bb 13 	sts	0x13BB, r22	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2b1c:	70 93 bc 13 	sts	0x13BC, r23	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2b20:	9c c0       	rjmp	.+312    	; 0x2c5a <xTaskIncrementTick+0x1f6>
    2b22:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <pxDelayedTaskList>
    2b26:	f0 91 f0 13 	lds	r31, 0x13F0	; 0x8013f0 <pxDelayedTaskList+0x1>
    2b2a:	07 80       	ldd	r0, Z+7	; 0x07
    2b2c:	f0 85       	ldd	r31, Z+8	; 0x08
    2b2e:	e0 2d       	mov	r30, r0
    2b30:	00 84       	ldd	r0, Z+8	; 0x08
    2b32:	f1 85       	ldd	r31, Z+9	; 0x09
    2b34:	e0 2d       	mov	r30, r0
    2b36:	42 81       	ldd	r20, Z+2	; 0x02
    2b38:	53 81       	ldd	r21, Z+3	; 0x03
    2b3a:	64 81       	ldd	r22, Z+4	; 0x04
    2b3c:	75 81       	ldd	r23, Z+5	; 0x05
    2b3e:	c4 16       	cp	r12, r20
    2b40:	d5 06       	cpc	r13, r21
    2b42:	e6 06       	cpc	r14, r22
    2b44:	f7 06       	cpc	r15, r23
    2b46:	48 f4       	brcc	.+18     	; 0x2b5a <xTaskIncrementTick+0xf6>
    2b48:	40 93 b9 13 	sts	0x13B9, r20	; 0x8013b9 <xNextTaskUnblockTime>
    2b4c:	50 93 ba 13 	sts	0x13BA, r21	; 0x8013ba <xNextTaskUnblockTime+0x1>
    2b50:	60 93 bb 13 	sts	0x13BB, r22	; 0x8013bb <xNextTaskUnblockTime+0x2>
    2b54:	70 93 bc 13 	sts	0x13BC, r23	; 0x8013bc <xNextTaskUnblockTime+0x3>
    2b58:	80 c0       	rjmp	.+256    	; 0x2c5a <xTaskIncrementTick+0x1f6>
    2b5a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b5c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b5e:	c6 81       	ldd	r28, Z+6	; 0x06
    2b60:	d7 81       	ldd	r29, Z+7	; 0x07
    2b62:	20 85       	ldd	r18, Z+8	; 0x08
    2b64:	31 85       	ldd	r19, Z+9	; 0x09
    2b66:	3f 83       	std	Y+7, r19	; 0x07
    2b68:	2e 83       	std	Y+6, r18	; 0x06
    2b6a:	c0 85       	ldd	r28, Z+8	; 0x08
    2b6c:	d1 85       	ldd	r29, Z+9	; 0x09
    2b6e:	26 81       	ldd	r18, Z+6	; 0x06
    2b70:	37 81       	ldd	r19, Z+7	; 0x07
    2b72:	3d 83       	std	Y+5, r19	; 0x05
    2b74:	2c 83       	std	Y+4, r18	; 0x04
    2b76:	11 96       	adiw	r26, 0x01	; 1
    2b78:	4d 91       	ld	r20, X+
    2b7a:	5c 91       	ld	r21, X
    2b7c:	12 97       	sbiw	r26, 0x02	; 2
    2b7e:	9f 01       	movw	r18, r30
    2b80:	2e 5f       	subi	r18, 0xFE	; 254
    2b82:	3f 4f       	sbci	r19, 0xFF	; 255
    2b84:	42 17       	cp	r20, r18
    2b86:	53 07       	cpc	r21, r19
    2b88:	31 f4       	brne	.+12     	; 0x2b96 <xTaskIncrementTick+0x132>
    2b8a:	40 85       	ldd	r20, Z+8	; 0x08
    2b8c:	51 85       	ldd	r21, Z+9	; 0x09
    2b8e:	12 96       	adiw	r26, 0x02	; 2
    2b90:	5c 93       	st	X, r21
    2b92:	4e 93       	st	-X, r20
    2b94:	11 97       	sbiw	r26, 0x01	; 1
    2b96:	15 86       	std	Z+13, r1	; 0x0d
    2b98:	14 86       	std	Z+12, r1	; 0x0c
    2b9a:	9c 91       	ld	r25, X
    2b9c:	91 50       	subi	r25, 0x01	; 1
    2b9e:	9c 93       	st	X, r25
    2ba0:	a0 8d       	ldd	r26, Z+24	; 0x18
    2ba2:	b1 8d       	ldd	r27, Z+25	; 0x19
    2ba4:	10 97       	sbiw	r26, 0x00	; 0
    2ba6:	09 f1       	breq	.+66     	; 0x2bea <xTaskIncrementTick+0x186>
    2ba8:	c2 89       	ldd	r28, Z+18	; 0x12
    2baa:	d3 89       	ldd	r29, Z+19	; 0x13
    2bac:	44 89       	ldd	r20, Z+20	; 0x14
    2bae:	55 89       	ldd	r21, Z+21	; 0x15
    2bb0:	5f 83       	std	Y+7, r21	; 0x07
    2bb2:	4e 83       	std	Y+6, r20	; 0x06
    2bb4:	c4 89       	ldd	r28, Z+20	; 0x14
    2bb6:	d5 89       	ldd	r29, Z+21	; 0x15
    2bb8:	42 89       	ldd	r20, Z+18	; 0x12
    2bba:	53 89       	ldd	r21, Z+19	; 0x13
    2bbc:	5d 83       	std	Y+5, r21	; 0x05
    2bbe:	4c 83       	std	Y+4, r20	; 0x04
    2bc0:	11 96       	adiw	r26, 0x01	; 1
    2bc2:	6d 91       	ld	r22, X+
    2bc4:	7c 91       	ld	r23, X
    2bc6:	12 97       	sbiw	r26, 0x02	; 2
    2bc8:	af 01       	movw	r20, r30
    2bca:	42 5f       	subi	r20, 0xF2	; 242
    2bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bce:	64 17       	cp	r22, r20
    2bd0:	75 07       	cpc	r23, r21
    2bd2:	31 f4       	brne	.+12     	; 0x2be0 <xTaskIncrementTick+0x17c>
    2bd4:	44 89       	ldd	r20, Z+20	; 0x14
    2bd6:	55 89       	ldd	r21, Z+21	; 0x15
    2bd8:	12 96       	adiw	r26, 0x02	; 2
    2bda:	5c 93       	st	X, r21
    2bdc:	4e 93       	st	-X, r20
    2bde:	11 97       	sbiw	r26, 0x01	; 1
    2be0:	11 8e       	std	Z+25, r1	; 0x19
    2be2:	10 8e       	std	Z+24, r1	; 0x18
    2be4:	9c 91       	ld	r25, X
    2be6:	91 50       	subi	r25, 0x01	; 1
    2be8:	9c 93       	st	X, r25
    2bea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bec:	90 91 c5 13 	lds	r25, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    2bf0:	9a 17       	cp	r25, r26
    2bf2:	10 f4       	brcc	.+4      	; 0x2bf8 <xTaskIncrementTick+0x194>
    2bf4:	a0 93 c5 13 	sts	0x13C5, r26	; 0x8013c5 <uxTopReadyPriority>
    2bf8:	9b e0       	ldi	r25, 0x0B	; 11
    2bfa:	9a 9f       	mul	r25, r26
    2bfc:	d0 01       	movw	r26, r0
    2bfe:	11 24       	eor	r1, r1
    2c00:	a9 5f       	subi	r26, 0xF9	; 249
    2c02:	bb 4e       	sbci	r27, 0xEB	; 235
    2c04:	11 96       	adiw	r26, 0x01	; 1
    2c06:	0d 90       	ld	r0, X+
    2c08:	bc 91       	ld	r27, X
    2c0a:	a0 2d       	mov	r26, r0
    2c0c:	b7 83       	std	Z+7, r27	; 0x07
    2c0e:	a6 83       	std	Z+6, r26	; 0x06
    2c10:	16 96       	adiw	r26, 0x06	; 6
    2c12:	4d 91       	ld	r20, X+
    2c14:	5c 91       	ld	r21, X
    2c16:	17 97       	sbiw	r26, 0x07	; 7
    2c18:	51 87       	std	Z+9, r21	; 0x09
    2c1a:	40 87       	std	Z+8, r20	; 0x08
    2c1c:	16 96       	adiw	r26, 0x06	; 6
    2c1e:	cd 91       	ld	r28, X+
    2c20:	dc 91       	ld	r29, X
    2c22:	17 97       	sbiw	r26, 0x07	; 7
    2c24:	3d 83       	std	Y+5, r19	; 0x05
    2c26:	2c 83       	std	Y+4, r18	; 0x04
    2c28:	17 96       	adiw	r26, 0x07	; 7
    2c2a:	3c 93       	st	X, r19
    2c2c:	2e 93       	st	-X, r18
    2c2e:	16 97       	sbiw	r26, 0x06	; 6
    2c30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c32:	9a 9f       	mul	r25, r26
    2c34:	d0 01       	movw	r26, r0
    2c36:	11 24       	eor	r1, r1
    2c38:	a9 5f       	subi	r26, 0xF9	; 249
    2c3a:	bb 4e       	sbci	r27, 0xEB	; 235
    2c3c:	b5 87       	std	Z+13, r27	; 0x0d
    2c3e:	a4 87       	std	Z+12, r26	; 0x0c
    2c40:	9c 91       	ld	r25, X
    2c42:	9f 5f       	subi	r25, 0xFF	; 255
    2c44:	9c 93       	st	X, r25
    2c46:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c48:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    2c4c:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2c50:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c52:	29 17       	cp	r18, r25
    2c54:	08 f0       	brcs	.+2      	; 0x2c58 <xTaskIncrementTick+0x1f4>
    2c56:	4f cf       	rjmp	.-354    	; 0x2af6 <xTaskIncrementTick+0x92>
    2c58:	51 cf       	rjmp	.-350    	; 0x2afc <xTaskIncrementTick+0x98>
    2c5a:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    2c5e:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2c62:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c64:	9b e0       	ldi	r25, 0x0B	; 11
    2c66:	e9 9f       	mul	r30, r25
    2c68:	f0 01       	movw	r30, r0
    2c6a:	11 24       	eor	r1, r1
    2c6c:	e9 5f       	subi	r30, 0xF9	; 249
    2c6e:	fb 4e       	sbci	r31, 0xEB	; 235
    2c70:	90 81       	ld	r25, Z
    2c72:	92 30       	cpi	r25, 0x02	; 2
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <xTaskIncrementTick+0x214>
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 91 bf 13 	lds	r25, 0x13BF	; 0x8013bf <xYieldPending>
    2c7c:	91 11       	cpse	r25, r1
    2c7e:	16 c0       	rjmp	.+44     	; 0x2cac <xTaskIncrementTick+0x248>
    2c80:	16 c0       	rjmp	.+44     	; 0x2cae <xTaskIncrementTick+0x24a>
    2c82:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <xPendedTicks>
    2c86:	90 91 c1 13 	lds	r25, 0x13C1	; 0x8013c1 <xPendedTicks+0x1>
    2c8a:	a0 91 c2 13 	lds	r26, 0x13C2	; 0x8013c2 <xPendedTicks+0x2>
    2c8e:	b0 91 c3 13 	lds	r27, 0x13C3	; 0x8013c3 <xPendedTicks+0x3>
    2c92:	01 96       	adiw	r24, 0x01	; 1
    2c94:	a1 1d       	adc	r26, r1
    2c96:	b1 1d       	adc	r27, r1
    2c98:	80 93 c0 13 	sts	0x13C0, r24	; 0x8013c0 <xPendedTicks>
    2c9c:	90 93 c1 13 	sts	0x13C1, r25	; 0x8013c1 <xPendedTicks+0x1>
    2ca0:	a0 93 c2 13 	sts	0x13C2, r26	; 0x8013c2 <xPendedTicks+0x2>
    2ca4:	b0 93 c3 13 	sts	0x13C3, r27	; 0x8013c3 <xPendedTicks+0x3>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	01 c0       	rjmp	.+2      	; 0x2cae <xTaskIncrementTick+0x24a>
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	ff 90       	pop	r15
    2cb4:	ef 90       	pop	r14
    2cb6:	df 90       	pop	r13
    2cb8:	cf 90       	pop	r12
    2cba:	08 95       	ret

00002cbc <xTaskResumeAll>:
    2cbc:	cf 92       	push	r12
    2cbe:	df 92       	push	r13
    2cc0:	ef 92       	push	r14
    2cc2:	ff 92       	push	r15
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	0f 92       	push	r0
    2cce:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    2cd2:	81 50       	subi	r24, 0x01	; 1
    2cd4:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <uxSchedulerSuspended>
    2cd8:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    2cdc:	81 11       	cpse	r24, r1
    2cde:	be c0       	rjmp	.+380    	; 0x2e5c <xTaskResumeAll+0x1a0>
    2ce0:	80 91 ca 13 	lds	r24, 0x13CA	; 0x8013ca <uxCurrentNumberOfTasks>
    2ce4:	81 11       	cpse	r24, r1
    2ce6:	88 c0       	rjmp	.+272    	; 0x2df8 <xTaskResumeAll+0x13c>
    2ce8:	bc c0       	rjmp	.+376    	; 0x2e62 <xTaskResumeAll+0x1a6>
    2cea:	e0 91 e9 13 	lds	r30, 0x13E9	; 0x8013e9 <xPendingReadyList+0x7>
    2cee:	f0 91 ea 13 	lds	r31, 0x13EA	; 0x8013ea <xPendingReadyList+0x8>
    2cf2:	00 84       	ldd	r0, Z+8	; 0x08
    2cf4:	f1 85       	ldd	r31, Z+9	; 0x09
    2cf6:	e0 2d       	mov	r30, r0
    2cf8:	a0 8d       	ldd	r26, Z+24	; 0x18
    2cfa:	b1 8d       	ldd	r27, Z+25	; 0x19
    2cfc:	c2 89       	ldd	r28, Z+18	; 0x12
    2cfe:	d3 89       	ldd	r29, Z+19	; 0x13
    2d00:	84 89       	ldd	r24, Z+20	; 0x14
    2d02:	95 89       	ldd	r25, Z+21	; 0x15
    2d04:	9f 83       	std	Y+7, r25	; 0x07
    2d06:	8e 83       	std	Y+6, r24	; 0x06
    2d08:	c4 89       	ldd	r28, Z+20	; 0x14
    2d0a:	d5 89       	ldd	r29, Z+21	; 0x15
    2d0c:	82 89       	ldd	r24, Z+18	; 0x12
    2d0e:	93 89       	ldd	r25, Z+19	; 0x13
    2d10:	9d 83       	std	Y+5, r25	; 0x05
    2d12:	8c 83       	std	Y+4, r24	; 0x04
    2d14:	11 96       	adiw	r26, 0x01	; 1
    2d16:	2d 91       	ld	r18, X+
    2d18:	3c 91       	ld	r19, X
    2d1a:	12 97       	sbiw	r26, 0x02	; 2
    2d1c:	cf 01       	movw	r24, r30
    2d1e:	0e 96       	adiw	r24, 0x0e	; 14
    2d20:	28 17       	cp	r18, r24
    2d22:	39 07       	cpc	r19, r25
    2d24:	31 f4       	brne	.+12     	; 0x2d32 <xTaskResumeAll+0x76>
    2d26:	84 89       	ldd	r24, Z+20	; 0x14
    2d28:	95 89       	ldd	r25, Z+21	; 0x15
    2d2a:	12 96       	adiw	r26, 0x02	; 2
    2d2c:	9c 93       	st	X, r25
    2d2e:	8e 93       	st	-X, r24
    2d30:	11 97       	sbiw	r26, 0x01	; 1
    2d32:	11 8e       	std	Z+25, r1	; 0x19
    2d34:	10 8e       	std	Z+24, r1	; 0x18
    2d36:	8c 91       	ld	r24, X
    2d38:	81 50       	subi	r24, 0x01	; 1
    2d3a:	8c 93       	st	X, r24
    2d3c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d3e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d40:	c6 81       	ldd	r28, Z+6	; 0x06
    2d42:	d7 81       	ldd	r29, Z+7	; 0x07
    2d44:	80 85       	ldd	r24, Z+8	; 0x08
    2d46:	91 85       	ldd	r25, Z+9	; 0x09
    2d48:	9f 83       	std	Y+7, r25	; 0x07
    2d4a:	8e 83       	std	Y+6, r24	; 0x06
    2d4c:	c0 85       	ldd	r28, Z+8	; 0x08
    2d4e:	d1 85       	ldd	r29, Z+9	; 0x09
    2d50:	86 81       	ldd	r24, Z+6	; 0x06
    2d52:	97 81       	ldd	r25, Z+7	; 0x07
    2d54:	9d 83       	std	Y+5, r25	; 0x05
    2d56:	8c 83       	std	Y+4, r24	; 0x04
    2d58:	11 96       	adiw	r26, 0x01	; 1
    2d5a:	8d 91       	ld	r24, X+
    2d5c:	9c 91       	ld	r25, X
    2d5e:	12 97       	sbiw	r26, 0x02	; 2
    2d60:	9f 01       	movw	r18, r30
    2d62:	2e 5f       	subi	r18, 0xFE	; 254
    2d64:	3f 4f       	sbci	r19, 0xFF	; 255
    2d66:	82 17       	cp	r24, r18
    2d68:	93 07       	cpc	r25, r19
    2d6a:	31 f4       	brne	.+12     	; 0x2d78 <xTaskResumeAll+0xbc>
    2d6c:	80 85       	ldd	r24, Z+8	; 0x08
    2d6e:	91 85       	ldd	r25, Z+9	; 0x09
    2d70:	12 96       	adiw	r26, 0x02	; 2
    2d72:	9c 93       	st	X, r25
    2d74:	8e 93       	st	-X, r24
    2d76:	11 97       	sbiw	r26, 0x01	; 1
    2d78:	15 86       	std	Z+13, r1	; 0x0d
    2d7a:	14 86       	std	Z+12, r1	; 0x0c
    2d7c:	8c 91       	ld	r24, X
    2d7e:	81 50       	subi	r24, 0x01	; 1
    2d80:	8c 93       	st	X, r24
    2d82:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d84:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    2d88:	8a 17       	cp	r24, r26
    2d8a:	10 f4       	brcc	.+4      	; 0x2d90 <xTaskResumeAll+0xd4>
    2d8c:	a0 93 c5 13 	sts	0x13C5, r26	; 0x8013c5 <uxTopReadyPriority>
    2d90:	8b e0       	ldi	r24, 0x0B	; 11
    2d92:	8a 9f       	mul	r24, r26
    2d94:	d0 01       	movw	r26, r0
    2d96:	11 24       	eor	r1, r1
    2d98:	a9 5f       	subi	r26, 0xF9	; 249
    2d9a:	bb 4e       	sbci	r27, 0xEB	; 235
    2d9c:	11 96       	adiw	r26, 0x01	; 1
    2d9e:	0d 90       	ld	r0, X+
    2da0:	bc 91       	ld	r27, X
    2da2:	a0 2d       	mov	r26, r0
    2da4:	b7 83       	std	Z+7, r27	; 0x07
    2da6:	a6 83       	std	Z+6, r26	; 0x06
    2da8:	16 96       	adiw	r26, 0x06	; 6
    2daa:	4d 91       	ld	r20, X+
    2dac:	5c 91       	ld	r21, X
    2dae:	17 97       	sbiw	r26, 0x07	; 7
    2db0:	51 87       	std	Z+9, r21	; 0x09
    2db2:	40 87       	std	Z+8, r20	; 0x08
    2db4:	16 96       	adiw	r26, 0x06	; 6
    2db6:	cd 91       	ld	r28, X+
    2db8:	dc 91       	ld	r29, X
    2dba:	17 97       	sbiw	r26, 0x07	; 7
    2dbc:	3d 83       	std	Y+5, r19	; 0x05
    2dbe:	2c 83       	std	Y+4, r18	; 0x04
    2dc0:	17 96       	adiw	r26, 0x07	; 7
    2dc2:	3c 93       	st	X, r19
    2dc4:	2e 93       	st	-X, r18
    2dc6:	16 97       	sbiw	r26, 0x06	; 6
    2dc8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2dca:	8a 9f       	mul	r24, r26
    2dcc:	d0 01       	movw	r26, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	a9 5f       	subi	r26, 0xF9	; 249
    2dd2:	bb 4e       	sbci	r27, 0xEB	; 235
    2dd4:	b5 87       	std	Z+13, r27	; 0x0d
    2dd6:	a4 87       	std	Z+12, r26	; 0x0c
    2dd8:	8c 91       	ld	r24, X
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	8c 93       	st	X, r24
    2dde:	92 8d       	ldd	r25, Z+26	; 0x1a
    2de0:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    2de4:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2de8:	5a 96       	adiw	r26, 0x1a	; 26
    2dea:	8c 91       	ld	r24, X
    2dec:	98 17       	cp	r25, r24
    2dee:	30 f0       	brcs	.+12     	; 0x2dfc <xTaskResumeAll+0x140>
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <xTaskResumeAll+0x140>
    2df8:	e0 e0       	ldi	r30, 0x00	; 0
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 91 e2 13 	lds	r24, 0x13E2	; 0x8013e2 <xPendingReadyList>
    2e00:	81 11       	cpse	r24, r1
    2e02:	73 cf       	rjmp	.-282    	; 0x2cea <xTaskResumeAll+0x2e>
    2e04:	ef 2b       	or	r30, r31
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <xTaskResumeAll+0x14e>
    2e08:	7d db       	rcall	.-2310   	; 0x2504 <prvResetNextTaskUnblockTime>
    2e0a:	c0 90 c0 13 	lds	r12, 0x13C0	; 0x8013c0 <xPendedTicks>
    2e0e:	d0 90 c1 13 	lds	r13, 0x13C1	; 0x8013c1 <xPendedTicks+0x1>
    2e12:	e0 90 c2 13 	lds	r14, 0x13C2	; 0x8013c2 <xPendedTicks+0x2>
    2e16:	f0 90 c3 13 	lds	r15, 0x13C3	; 0x8013c3 <xPendedTicks+0x3>
    2e1a:	c1 14       	cp	r12, r1
    2e1c:	d1 04       	cpc	r13, r1
    2e1e:	e1 04       	cpc	r14, r1
    2e20:	f1 04       	cpc	r15, r1
    2e22:	a1 f0       	breq	.+40     	; 0x2e4c <xTaskResumeAll+0x190>
    2e24:	1f de       	rcall	.-962    	; 0x2a64 <xTaskIncrementTick>
    2e26:	88 23       	and	r24, r24
    2e28:	19 f0       	breq	.+6      	; 0x2e30 <xTaskResumeAll+0x174>
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	c8 1a       	sub	r12, r24
    2e34:	d1 08       	sbc	r13, r1
    2e36:	e1 08       	sbc	r14, r1
    2e38:	f1 08       	sbc	r15, r1
    2e3a:	a1 f7       	brne	.-24     	; 0x2e24 <xTaskResumeAll+0x168>
    2e3c:	10 92 c0 13 	sts	0x13C0, r1	; 0x8013c0 <xPendedTicks>
    2e40:	10 92 c1 13 	sts	0x13C1, r1	; 0x8013c1 <xPendedTicks+0x1>
    2e44:	10 92 c2 13 	sts	0x13C2, r1	; 0x8013c2 <xPendedTicks+0x2>
    2e48:	10 92 c3 13 	sts	0x13C3, r1	; 0x8013c3 <xPendedTicks+0x3>
    2e4c:	80 91 bf 13 	lds	r24, 0x13BF	; 0x8013bf <xYieldPending>
    2e50:	88 23       	and	r24, r24
    2e52:	31 f0       	breq	.+12     	; 0x2e60 <xTaskResumeAll+0x1a4>
    2e54:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	03 c0       	rjmp	.+6      	; 0x2e62 <xTaskResumeAll+0x1a6>
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <xTaskResumeAll+0x1a6>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	0f 90       	pop	r0
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	ff 90       	pop	r15
    2e6c:	ef 90       	pop	r14
    2e6e:	df 90       	pop	r13
    2e70:	cf 90       	pop	r12
    2e72:	08 95       	ret

00002e74 <xTaskDelayUntil>:
    2e74:	8f 92       	push	r8
    2e76:	9f 92       	push	r9
    2e78:	af 92       	push	r10
    2e7a:	bf 92       	push	r11
    2e7c:	cf 92       	push	r12
    2e7e:	df 92       	push	r13
    2e80:	ef 92       	push	r14
    2e82:	ff 92       	push	r15
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	ec 01       	movw	r28, r24
    2e8c:	6a 01       	movw	r12, r20
    2e8e:	7b 01       	movw	r14, r22
    2e90:	d5 dd       	rcall	.-1110   	; 0x2a3c <vTaskSuspendAll>
    2e92:	80 90 c6 13 	lds	r8, 0x13C6	; 0x8013c6 <xTickCount>
    2e96:	90 90 c7 13 	lds	r9, 0x13C7	; 0x8013c7 <xTickCount+0x1>
    2e9a:	a0 90 c8 13 	lds	r10, 0x13C8	; 0x8013c8 <xTickCount+0x2>
    2e9e:	b0 90 c9 13 	lds	r11, 0x13C9	; 0x8013c9 <xTickCount+0x3>
    2ea2:	88 81       	ld	r24, Y
    2ea4:	99 81       	ldd	r25, Y+1	; 0x01
    2ea6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ea8:	bb 81       	ldd	r27, Y+3	; 0x03
    2eaa:	ac 01       	movw	r20, r24
    2eac:	bd 01       	movw	r22, r26
    2eae:	4c 0d       	add	r20, r12
    2eb0:	5d 1d       	adc	r21, r13
    2eb2:	6e 1d       	adc	r22, r14
    2eb4:	7f 1d       	adc	r23, r15
    2eb6:	88 16       	cp	r8, r24
    2eb8:	99 06       	cpc	r9, r25
    2eba:	aa 06       	cpc	r10, r26
    2ebc:	bb 06       	cpc	r11, r27
    2ebe:	60 f4       	brcc	.+24     	; 0x2ed8 <xTaskDelayUntil+0x64>
    2ec0:	48 17       	cp	r20, r24
    2ec2:	59 07       	cpc	r21, r25
    2ec4:	6a 07       	cpc	r22, r26
    2ec6:	7b 07       	cpc	r23, r27
    2ec8:	98 f4       	brcc	.+38     	; 0x2ef0 <xTaskDelayUntil+0x7c>
    2eca:	84 16       	cp	r8, r20
    2ecc:	95 06       	cpc	r9, r21
    2ece:	a6 06       	cpc	r10, r22
    2ed0:	b7 06       	cpc	r11, r23
    2ed2:	80 f0       	brcs	.+32     	; 0x2ef4 <xTaskDelayUntil+0x80>
    2ed4:	10 e0       	ldi	r17, 0x00	; 0
    2ed6:	13 c0       	rjmp	.+38     	; 0x2efe <xTaskDelayUntil+0x8a>
    2ed8:	48 17       	cp	r20, r24
    2eda:	59 07       	cpc	r21, r25
    2edc:	6a 07       	cpc	r22, r26
    2ede:	7b 07       	cpc	r23, r27
    2ee0:	58 f0       	brcs	.+22     	; 0x2ef8 <xTaskDelayUntil+0x84>
    2ee2:	84 16       	cp	r8, r20
    2ee4:	95 06       	cpc	r9, r21
    2ee6:	a6 06       	cpc	r10, r22
    2ee8:	b7 06       	cpc	r11, r23
    2eea:	40 f0       	brcs	.+16     	; 0x2efc <xTaskDelayUntil+0x88>
    2eec:	10 e0       	ldi	r17, 0x00	; 0
    2eee:	07 c0       	rjmp	.+14     	; 0x2efe <xTaskDelayUntil+0x8a>
    2ef0:	10 e0       	ldi	r17, 0x00	; 0
    2ef2:	05 c0       	rjmp	.+10     	; 0x2efe <xTaskDelayUntil+0x8a>
    2ef4:	11 e0       	ldi	r17, 0x01	; 1
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <xTaskDelayUntil+0x8a>
    2ef8:	11 e0       	ldi	r17, 0x01	; 1
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <xTaskDelayUntil+0x8a>
    2efc:	11 e0       	ldi	r17, 0x01	; 1
    2efe:	48 83       	st	Y, r20
    2f00:	59 83       	std	Y+1, r21	; 0x01
    2f02:	6a 83       	std	Y+2, r22	; 0x02
    2f04:	7b 83       	std	Y+3, r23	; 0x03
    2f06:	11 23       	and	r17, r17
    2f08:	41 f0       	breq	.+16     	; 0x2f1a <xTaskDelayUntil+0xa6>
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	ba 01       	movw	r22, r20
    2f0e:	68 19       	sub	r22, r8
    2f10:	79 09       	sbc	r23, r9
    2f12:	8a 09       	sbc	r24, r10
    2f14:	9b 09       	sbc	r25, r11
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	6b dc       	rcall	.-1834   	; 0x27f0 <prvAddCurrentTaskToDelayedList>
    2f1a:	d0 de       	rcall	.-608    	; 0x2cbc <xTaskResumeAll>
    2f1c:	81 11       	cpse	r24, r1
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <xTaskDelayUntil+0xb0>
    2f20:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    2f24:	81 2f       	mov	r24, r17
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	ff 90       	pop	r15
    2f2e:	ef 90       	pop	r14
    2f30:	df 90       	pop	r13
    2f32:	cf 90       	pop	r12
    2f34:	bf 90       	pop	r11
    2f36:	af 90       	pop	r10
    2f38:	9f 90       	pop	r9
    2f3a:	8f 90       	pop	r8
    2f3c:	08 95       	ret

00002f3e <vTaskDelay>:
    2f3e:	cf 92       	push	r12
    2f40:	df 92       	push	r13
    2f42:	ef 92       	push	r14
    2f44:	ff 92       	push	r15
    2f46:	6b 01       	movw	r12, r22
    2f48:	7c 01       	movw	r14, r24
    2f4a:	67 2b       	or	r22, r23
    2f4c:	68 2b       	or	r22, r24
    2f4e:	69 2b       	or	r22, r25
    2f50:	39 f0       	breq	.+14     	; 0x2f60 <vTaskDelay+0x22>
    2f52:	74 dd       	rcall	.-1304   	; 0x2a3c <vTaskSuspendAll>
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	c7 01       	movw	r24, r14
    2f58:	b6 01       	movw	r22, r12
    2f5a:	4a dc       	rcall	.-1900   	; 0x27f0 <prvAddCurrentTaskToDelayedList>
    2f5c:	af de       	rcall	.-674    	; 0x2cbc <xTaskResumeAll>
    2f5e:	01 c0       	rjmp	.+2      	; 0x2f62 <vTaskDelay+0x24>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	81 11       	cpse	r24, r1
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <vTaskDelay+0x2c>
    2f66:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    2f6a:	ff 90       	pop	r15
    2f6c:	ef 90       	pop	r14
    2f6e:	df 90       	pop	r13
    2f70:	cf 90       	pop	r12
    2f72:	08 95       	ret

00002f74 <vTaskSwitchContext>:
    2f74:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    2f78:	88 23       	and	r24, r24
    2f7a:	21 f0       	breq	.+8      	; 0x2f84 <vTaskSwitchContext+0x10>
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    2f82:	08 95       	ret
    2f84:	10 92 bf 13 	sts	0x13BF, r1	; 0x8013bf <xYieldPending>
    2f88:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    2f8c:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2f90:	20 81       	ld	r18, Z
    2f92:	31 81       	ldd	r19, Z+1	; 0x01
    2f94:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    2f98:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2f9c:	83 8d       	ldd	r24, Z+27	; 0x1b
    2f9e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2fa0:	82 17       	cp	r24, r18
    2fa2:	93 07       	cpc	r25, r19
    2fa4:	60 f0       	brcs	.+24     	; 0x2fbe <vTaskSwitchContext+0x4a>
    2fa6:	60 91 75 14 	lds	r22, 0x1475	; 0x801475 <pxCurrentTCB>
    2faa:	70 91 76 14 	lds	r23, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2fae:	63 5e       	subi	r22, 0xE3	; 227
    2fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb2:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    2fb6:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    2fba:	0e 94 27 22 	call	0x444e	; 0x444e <vApplicationStackOverflowHook>
    2fbe:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    2fc2:	01 c0       	rjmp	.+2      	; 0x2fc6 <vTaskSwitchContext+0x52>
    2fc4:	81 50       	subi	r24, 0x01	; 1
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	9b e0       	ldi	r25, 0x0B	; 11
    2fcc:	92 9f       	mul	r25, r18
    2fce:	f0 01       	movw	r30, r0
    2fd0:	93 9f       	mul	r25, r19
    2fd2:	f0 0d       	add	r31, r0
    2fd4:	11 24       	eor	r1, r1
    2fd6:	e9 5f       	subi	r30, 0xF9	; 249
    2fd8:	fb 4e       	sbci	r31, 0xEB	; 235
    2fda:	90 81       	ld	r25, Z
    2fdc:	99 23       	and	r25, r25
    2fde:	91 f3       	breq	.-28     	; 0x2fc4 <vTaskSwitchContext+0x50>
    2fe0:	9b e0       	ldi	r25, 0x0B	; 11
    2fe2:	92 9f       	mul	r25, r18
    2fe4:	a0 01       	movw	r20, r0
    2fe6:	93 9f       	mul	r25, r19
    2fe8:	50 0d       	add	r21, r0
    2fea:	11 24       	eor	r1, r1
    2fec:	df 01       	movw	r26, r30
    2fee:	01 80       	ldd	r0, Z+1	; 0x01
    2ff0:	f2 81       	ldd	r31, Z+2	; 0x02
    2ff2:	e0 2d       	mov	r30, r0
    2ff4:	04 80       	ldd	r0, Z+4	; 0x04
    2ff6:	f5 81       	ldd	r31, Z+5	; 0x05
    2ff8:	e0 2d       	mov	r30, r0
    2ffa:	12 96       	adiw	r26, 0x02	; 2
    2ffc:	fc 93       	st	X, r31
    2ffe:	ee 93       	st	-X, r30
    3000:	11 97       	sbiw	r26, 0x01	; 1
    3002:	46 5f       	subi	r20, 0xF6	; 246
    3004:	5b 4e       	sbci	r21, 0xEB	; 235
    3006:	e4 17       	cp	r30, r20
    3008:	f5 07       	cpc	r31, r21
    300a:	29 f4       	brne	.+10     	; 0x3016 <vTaskSwitchContext+0xa2>
    300c:	44 81       	ldd	r20, Z+4	; 0x04
    300e:	55 81       	ldd	r21, Z+5	; 0x05
    3010:	fd 01       	movw	r30, r26
    3012:	52 83       	std	Z+2, r21	; 0x02
    3014:	41 83       	std	Z+1, r20	; 0x01
    3016:	9b e0       	ldi	r25, 0x0B	; 11
    3018:	92 9f       	mul	r25, r18
    301a:	f0 01       	movw	r30, r0
    301c:	93 9f       	mul	r25, r19
    301e:	f0 0d       	add	r31, r0
    3020:	11 24       	eor	r1, r1
    3022:	e9 5f       	subi	r30, 0xF9	; 249
    3024:	fb 4e       	sbci	r31, 0xEB	; 235
    3026:	01 80       	ldd	r0, Z+1	; 0x01
    3028:	f2 81       	ldd	r31, Z+2	; 0x02
    302a:	e0 2d       	mov	r30, r0
    302c:	20 85       	ldd	r18, Z+8	; 0x08
    302e:	31 85       	ldd	r19, Z+9	; 0x09
    3030:	30 93 76 14 	sts	0x1476, r19	; 0x801476 <pxCurrentTCB+0x1>
    3034:	20 93 75 14 	sts	0x1475, r18	; 0x801475 <pxCurrentTCB>
    3038:	80 93 c5 13 	sts	0x13C5, r24	; 0x8013c5 <uxTopReadyPriority>
    303c:	08 95       	ret

0000303e <vTaskPlaceOnEventList>:
    303e:	cf 92       	push	r12
    3040:	df 92       	push	r13
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	6a 01       	movw	r12, r20
    3048:	7b 01       	movw	r14, r22
    304a:	60 91 75 14 	lds	r22, 0x1475	; 0x801475 <pxCurrentTCB>
    304e:	70 91 76 14 	lds	r23, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3052:	62 5f       	subi	r22, 0xF2	; 242
    3054:	7f 4f       	sbci	r23, 0xFF	; 255
    3056:	0e 94 39 0a 	call	0x1472	; 0x1472 <vListInsert>
    305a:	41 e0       	ldi	r20, 0x01	; 1
    305c:	c7 01       	movw	r24, r14
    305e:	b6 01       	movw	r22, r12
    3060:	c7 db       	rcall	.-2162   	; 0x27f0 <prvAddCurrentTaskToDelayedList>
    3062:	ff 90       	pop	r15
    3064:	ef 90       	pop	r14
    3066:	df 90       	pop	r13
    3068:	cf 90       	pop	r12
    306a:	08 95       	ret

0000306c <vTaskPlaceOnUnorderedEventList>:
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	fc 01       	movw	r30, r24
    3076:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    307a:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    307e:	70 68       	ori	r23, 0x80	; 128
    3080:	1e 96       	adiw	r26, 0x0e	; 14
    3082:	4d 93       	st	X+, r20
    3084:	5d 93       	st	X+, r21
    3086:	6d 93       	st	X+, r22
    3088:	7c 93       	st	X, r23
    308a:	51 97       	sbiw	r26, 0x11	; 17
    308c:	a1 81       	ldd	r26, Z+1	; 0x01
    308e:	b2 81       	ldd	r27, Z+2	; 0x02
    3090:	c0 91 75 14 	lds	r28, 0x1475	; 0x801475 <pxCurrentTCB>
    3094:	d0 91 76 14 	lds	r29, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3098:	bb 8b       	std	Y+19, r27	; 0x13
    309a:	aa 8b       	std	Y+18, r26	; 0x12
    309c:	c0 91 75 14 	lds	r28, 0x1475	; 0x801475 <pxCurrentTCB>
    30a0:	d0 91 76 14 	lds	r29, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    30a4:	16 96       	adiw	r26, 0x06	; 6
    30a6:	8d 91       	ld	r24, X+
    30a8:	9c 91       	ld	r25, X
    30aa:	17 97       	sbiw	r26, 0x07	; 7
    30ac:	9d 8b       	std	Y+21, r25	; 0x15
    30ae:	8c 8b       	std	Y+20, r24	; 0x14
    30b0:	16 96       	adiw	r26, 0x06	; 6
    30b2:	cd 91       	ld	r28, X+
    30b4:	dc 91       	ld	r29, X
    30b6:	17 97       	sbiw	r26, 0x07	; 7
    30b8:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    30bc:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    30c0:	0e 96       	adiw	r24, 0x0e	; 14
    30c2:	9d 83       	std	Y+5, r25	; 0x05
    30c4:	8c 83       	std	Y+4, r24	; 0x04
    30c6:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    30ca:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    30ce:	0e 96       	adiw	r24, 0x0e	; 14
    30d0:	17 96       	adiw	r26, 0x07	; 7
    30d2:	9c 93       	st	X, r25
    30d4:	8e 93       	st	-X, r24
    30d6:	16 97       	sbiw	r26, 0x06	; 6
    30d8:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    30dc:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    30e0:	59 96       	adiw	r26, 0x19	; 25
    30e2:	fc 93       	st	X, r31
    30e4:	ee 93       	st	-X, r30
    30e6:	58 97       	sbiw	r26, 0x18	; 24
    30e8:	80 81       	ld	r24, Z
    30ea:	8f 5f       	subi	r24, 0xFF	; 255
    30ec:	80 83       	st	Z, r24
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	c9 01       	movw	r24, r18
    30f2:	b8 01       	movw	r22, r16
    30f4:	7d db       	rcall	.-2310   	; 0x27f0 <prvAddCurrentTaskToDelayedList>
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	08 95       	ret

00003100 <vTaskPlaceOnEventListRestricted>:
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	fc 01       	movw	r30, r24
    3106:	cb 01       	movw	r24, r22
    3108:	ba 01       	movw	r22, r20
    310a:	a1 81       	ldd	r26, Z+1	; 0x01
    310c:	b2 81       	ldd	r27, Z+2	; 0x02
    310e:	c0 91 75 14 	lds	r28, 0x1475	; 0x801475 <pxCurrentTCB>
    3112:	d0 91 76 14 	lds	r29, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3116:	bb 8b       	std	Y+19, r27	; 0x13
    3118:	aa 8b       	std	Y+18, r26	; 0x12
    311a:	c0 91 75 14 	lds	r28, 0x1475	; 0x801475 <pxCurrentTCB>
    311e:	d0 91 76 14 	lds	r29, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3122:	16 96       	adiw	r26, 0x06	; 6
    3124:	4d 91       	ld	r20, X+
    3126:	5c 91       	ld	r21, X
    3128:	17 97       	sbiw	r26, 0x07	; 7
    312a:	5d 8b       	std	Y+21, r21	; 0x15
    312c:	4c 8b       	std	Y+20, r20	; 0x14
    312e:	16 96       	adiw	r26, 0x06	; 6
    3130:	cd 91       	ld	r28, X+
    3132:	dc 91       	ld	r29, X
    3134:	17 97       	sbiw	r26, 0x07	; 7
    3136:	40 91 75 14 	lds	r20, 0x1475	; 0x801475 <pxCurrentTCB>
    313a:	50 91 76 14 	lds	r21, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    313e:	42 5f       	subi	r20, 0xF2	; 242
    3140:	5f 4f       	sbci	r21, 0xFF	; 255
    3142:	5d 83       	std	Y+5, r21	; 0x05
    3144:	4c 83       	std	Y+4, r20	; 0x04
    3146:	40 91 75 14 	lds	r20, 0x1475	; 0x801475 <pxCurrentTCB>
    314a:	50 91 76 14 	lds	r21, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    314e:	42 5f       	subi	r20, 0xF2	; 242
    3150:	5f 4f       	sbci	r21, 0xFF	; 255
    3152:	17 96       	adiw	r26, 0x07	; 7
    3154:	5c 93       	st	X, r21
    3156:	4e 93       	st	-X, r20
    3158:	16 97       	sbiw	r26, 0x06	; 6
    315a:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    315e:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3162:	59 96       	adiw	r26, 0x19	; 25
    3164:	fc 93       	st	X, r31
    3166:	ee 93       	st	-X, r30
    3168:	58 97       	sbiw	r26, 0x18	; 24
    316a:	30 81       	ld	r19, Z
    316c:	3f 5f       	subi	r19, 0xFF	; 255
    316e:	30 83       	st	Z, r19
    3170:	22 23       	and	r18, r18
    3172:	19 f0       	breq	.+6      	; 0x317a <vTaskPlaceOnEventListRestricted+0x7a>
    3174:	6f ef       	ldi	r22, 0xFF	; 255
    3176:	7f ef       	ldi	r23, 0xFF	; 255
    3178:	cb 01       	movw	r24, r22
    317a:	42 2f       	mov	r20, r18
    317c:	39 db       	rcall	.-2446   	; 0x27f0 <prvAddCurrentTaskToDelayedList>
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	08 95       	ret

00003184 <xTaskRemoveFromEventList>:
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	dc 01       	movw	r26, r24
    318a:	17 96       	adiw	r26, 0x07	; 7
    318c:	ed 91       	ld	r30, X+
    318e:	fc 91       	ld	r31, X
    3190:	18 97       	sbiw	r26, 0x08	; 8
    3192:	00 84       	ldd	r0, Z+8	; 0x08
    3194:	f1 85       	ldd	r31, Z+9	; 0x09
    3196:	e0 2d       	mov	r30, r0
    3198:	a0 8d       	ldd	r26, Z+24	; 0x18
    319a:	b1 8d       	ldd	r27, Z+25	; 0x19
    319c:	c2 89       	ldd	r28, Z+18	; 0x12
    319e:	d3 89       	ldd	r29, Z+19	; 0x13
    31a0:	84 89       	ldd	r24, Z+20	; 0x14
    31a2:	95 89       	ldd	r25, Z+21	; 0x15
    31a4:	9f 83       	std	Y+7, r25	; 0x07
    31a6:	8e 83       	std	Y+6, r24	; 0x06
    31a8:	c4 89       	ldd	r28, Z+20	; 0x14
    31aa:	d5 89       	ldd	r29, Z+21	; 0x15
    31ac:	82 89       	ldd	r24, Z+18	; 0x12
    31ae:	93 89       	ldd	r25, Z+19	; 0x13
    31b0:	9d 83       	std	Y+5, r25	; 0x05
    31b2:	8c 83       	std	Y+4, r24	; 0x04
    31b4:	11 96       	adiw	r26, 0x01	; 1
    31b6:	8d 91       	ld	r24, X+
    31b8:	9c 91       	ld	r25, X
    31ba:	12 97       	sbiw	r26, 0x02	; 2
    31bc:	9f 01       	movw	r18, r30
    31be:	22 5f       	subi	r18, 0xF2	; 242
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	82 17       	cp	r24, r18
    31c4:	93 07       	cpc	r25, r19
    31c6:	31 f4       	brne	.+12     	; 0x31d4 <xTaskRemoveFromEventList+0x50>
    31c8:	84 89       	ldd	r24, Z+20	; 0x14
    31ca:	95 89       	ldd	r25, Z+21	; 0x15
    31cc:	12 96       	adiw	r26, 0x02	; 2
    31ce:	9c 93       	st	X, r25
    31d0:	8e 93       	st	-X, r24
    31d2:	11 97       	sbiw	r26, 0x01	; 1
    31d4:	11 8e       	std	Z+25, r1	; 0x19
    31d6:	10 8e       	std	Z+24, r1	; 0x18
    31d8:	8c 91       	ld	r24, X
    31da:	81 50       	subi	r24, 0x01	; 1
    31dc:	8c 93       	st	X, r24
    31de:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    31e2:	81 11       	cpse	r24, r1
    31e4:	52 c0       	rjmp	.+164    	; 0x328a <xTaskRemoveFromEventList+0x106>
    31e6:	a4 85       	ldd	r26, Z+12	; 0x0c
    31e8:	b5 85       	ldd	r27, Z+13	; 0x0d
    31ea:	c6 81       	ldd	r28, Z+6	; 0x06
    31ec:	d7 81       	ldd	r29, Z+7	; 0x07
    31ee:	80 85       	ldd	r24, Z+8	; 0x08
    31f0:	91 85       	ldd	r25, Z+9	; 0x09
    31f2:	9f 83       	std	Y+7, r25	; 0x07
    31f4:	8e 83       	std	Y+6, r24	; 0x06
    31f6:	c0 85       	ldd	r28, Z+8	; 0x08
    31f8:	d1 85       	ldd	r29, Z+9	; 0x09
    31fa:	86 81       	ldd	r24, Z+6	; 0x06
    31fc:	97 81       	ldd	r25, Z+7	; 0x07
    31fe:	9d 83       	std	Y+5, r25	; 0x05
    3200:	8c 83       	std	Y+4, r24	; 0x04
    3202:	11 96       	adiw	r26, 0x01	; 1
    3204:	8d 91       	ld	r24, X+
    3206:	9c 91       	ld	r25, X
    3208:	12 97       	sbiw	r26, 0x02	; 2
    320a:	9f 01       	movw	r18, r30
    320c:	2e 5f       	subi	r18, 0xFE	; 254
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	82 17       	cp	r24, r18
    3212:	93 07       	cpc	r25, r19
    3214:	31 f4       	brne	.+12     	; 0x3222 <xTaskRemoveFromEventList+0x9e>
    3216:	80 85       	ldd	r24, Z+8	; 0x08
    3218:	91 85       	ldd	r25, Z+9	; 0x09
    321a:	12 96       	adiw	r26, 0x02	; 2
    321c:	9c 93       	st	X, r25
    321e:	8e 93       	st	-X, r24
    3220:	11 97       	sbiw	r26, 0x01	; 1
    3222:	15 86       	std	Z+13, r1	; 0x0d
    3224:	14 86       	std	Z+12, r1	; 0x0c
    3226:	8c 91       	ld	r24, X
    3228:	81 50       	subi	r24, 0x01	; 1
    322a:	8c 93       	st	X, r24
    322c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    322e:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    3232:	8a 17       	cp	r24, r26
    3234:	10 f4       	brcc	.+4      	; 0x323a <xTaskRemoveFromEventList+0xb6>
    3236:	a0 93 c5 13 	sts	0x13C5, r26	; 0x8013c5 <uxTopReadyPriority>
    323a:	8b e0       	ldi	r24, 0x0B	; 11
    323c:	8a 9f       	mul	r24, r26
    323e:	d0 01       	movw	r26, r0
    3240:	11 24       	eor	r1, r1
    3242:	a9 5f       	subi	r26, 0xF9	; 249
    3244:	bb 4e       	sbci	r27, 0xEB	; 235
    3246:	11 96       	adiw	r26, 0x01	; 1
    3248:	0d 90       	ld	r0, X+
    324a:	bc 91       	ld	r27, X
    324c:	a0 2d       	mov	r26, r0
    324e:	b7 83       	std	Z+7, r27	; 0x07
    3250:	a6 83       	std	Z+6, r26	; 0x06
    3252:	16 96       	adiw	r26, 0x06	; 6
    3254:	4d 91       	ld	r20, X+
    3256:	5c 91       	ld	r21, X
    3258:	17 97       	sbiw	r26, 0x07	; 7
    325a:	51 87       	std	Z+9, r21	; 0x09
    325c:	40 87       	std	Z+8, r20	; 0x08
    325e:	16 96       	adiw	r26, 0x06	; 6
    3260:	cd 91       	ld	r28, X+
    3262:	dc 91       	ld	r29, X
    3264:	17 97       	sbiw	r26, 0x07	; 7
    3266:	3d 83       	std	Y+5, r19	; 0x05
    3268:	2c 83       	std	Y+4, r18	; 0x04
    326a:	17 96       	adiw	r26, 0x07	; 7
    326c:	3c 93       	st	X, r19
    326e:	2e 93       	st	-X, r18
    3270:	16 97       	sbiw	r26, 0x06	; 6
    3272:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3274:	8a 9f       	mul	r24, r26
    3276:	d0 01       	movw	r26, r0
    3278:	11 24       	eor	r1, r1
    327a:	a9 5f       	subi	r26, 0xF9	; 249
    327c:	bb 4e       	sbci	r27, 0xEB	; 235
    327e:	b5 87       	std	Z+13, r27	; 0x0d
    3280:	a4 87       	std	Z+12, r26	; 0x0c
    3282:	8c 91       	ld	r24, X
    3284:	8f 5f       	subi	r24, 0xFF	; 255
    3286:	8c 93       	st	X, r24
    3288:	1c c0       	rjmp	.+56     	; 0x32c2 <xTaskRemoveFromEventList+0x13e>
    328a:	42 ee       	ldi	r20, 0xE2	; 226
    328c:	53 e1       	ldi	r21, 0x13	; 19
    328e:	da 01       	movw	r26, r20
    3290:	11 96       	adiw	r26, 0x01	; 1
    3292:	cd 91       	ld	r28, X+
    3294:	dc 91       	ld	r29, X
    3296:	12 97       	sbiw	r26, 0x02	; 2
    3298:	d3 8b       	std	Z+19, r29	; 0x13
    329a:	c2 8b       	std	Z+18, r28	; 0x12
    329c:	8e 81       	ldd	r24, Y+6	; 0x06
    329e:	9f 81       	ldd	r25, Y+7	; 0x07
    32a0:	95 8b       	std	Z+21, r25	; 0x15
    32a2:	84 8b       	std	Z+20, r24	; 0x14
    32a4:	8e 81       	ldd	r24, Y+6	; 0x06
    32a6:	9f 81       	ldd	r25, Y+7	; 0x07
    32a8:	dc 01       	movw	r26, r24
    32aa:	15 96       	adiw	r26, 0x05	; 5
    32ac:	3c 93       	st	X, r19
    32ae:	2e 93       	st	-X, r18
    32b0:	14 97       	sbiw	r26, 0x04	; 4
    32b2:	3f 83       	std	Y+7, r19	; 0x07
    32b4:	2e 83       	std	Y+6, r18	; 0x06
    32b6:	51 8f       	std	Z+25, r21	; 0x19
    32b8:	40 8f       	std	Z+24, r20	; 0x18
    32ba:	da 01       	movw	r26, r20
    32bc:	8c 91       	ld	r24, X
    32be:	8f 5f       	subi	r24, 0xFF	; 255
    32c0:	8c 93       	st	X, r24
    32c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    32c4:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    32c8:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    32cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    32ce:	89 17       	cp	r24, r25
    32d0:	20 f4       	brcc	.+8      	; 0x32da <xTaskRemoveFromEventList+0x156>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <xTaskRemoveFromEventList+0x158>
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	08 95       	ret

000032e2 <vTaskRemoveFromUnorderedEventList>:
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	dc 01       	movw	r26, r24
    32e8:	70 68       	ori	r23, 0x80	; 128
    32ea:	4d 93       	st	X+, r20
    32ec:	5d 93       	st	X+, r21
    32ee:	6d 93       	st	X+, r22
    32f0:	7c 93       	st	X, r23
    32f2:	13 97       	sbiw	r26, 0x03	; 3
    32f4:	18 96       	adiw	r26, 0x08	; 8
    32f6:	ed 91       	ld	r30, X+
    32f8:	fc 91       	ld	r31, X
    32fa:	19 97       	sbiw	r26, 0x09	; 9
    32fc:	1a 96       	adiw	r26, 0x0a	; 10
    32fe:	4d 91       	ld	r20, X+
    3300:	5c 91       	ld	r21, X
    3302:	1b 97       	sbiw	r26, 0x0b	; 11
    3304:	14 96       	adiw	r26, 0x04	; 4
    3306:	8d 91       	ld	r24, X+
    3308:	9c 91       	ld	r25, X
    330a:	15 97       	sbiw	r26, 0x05	; 5
    330c:	16 96       	adiw	r26, 0x06	; 6
    330e:	2d 91       	ld	r18, X+
    3310:	3c 91       	ld	r19, X
    3312:	17 97       	sbiw	r26, 0x07	; 7
    3314:	ec 01       	movw	r28, r24
    3316:	3f 83       	std	Y+7, r19	; 0x07
    3318:	2e 83       	std	Y+6, r18	; 0x06
    331a:	16 96       	adiw	r26, 0x06	; 6
    331c:	8d 91       	ld	r24, X+
    331e:	9c 91       	ld	r25, X
    3320:	17 97       	sbiw	r26, 0x07	; 7
    3322:	14 96       	adiw	r26, 0x04	; 4
    3324:	2d 91       	ld	r18, X+
    3326:	3c 91       	ld	r19, X
    3328:	15 97       	sbiw	r26, 0x05	; 5
    332a:	ec 01       	movw	r28, r24
    332c:	3d 83       	std	Y+5, r19	; 0x05
    332e:	2c 83       	std	Y+4, r18	; 0x04
    3330:	ea 01       	movw	r28, r20
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	9a 81       	ldd	r25, Y+2	; 0x02
    3336:	a8 17       	cp	r26, r24
    3338:	b9 07       	cpc	r27, r25
    333a:	31 f4       	brne	.+12     	; 0x3348 <vTaskRemoveFromUnorderedEventList+0x66>
    333c:	16 96       	adiw	r26, 0x06	; 6
    333e:	8d 91       	ld	r24, X+
    3340:	9c 91       	ld	r25, X
    3342:	17 97       	sbiw	r26, 0x07	; 7
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	1b 96       	adiw	r26, 0x0b	; 11
    334a:	1c 92       	st	X, r1
    334c:	1e 92       	st	-X, r1
    334e:	1a 97       	sbiw	r26, 0x0a	; 10
    3350:	da 01       	movw	r26, r20
    3352:	8c 91       	ld	r24, X
    3354:	81 50       	subi	r24, 0x01	; 1
    3356:	8c 93       	st	X, r24
    3358:	a4 85       	ldd	r26, Z+12	; 0x0c
    335a:	b5 85       	ldd	r27, Z+13	; 0x0d
    335c:	c6 81       	ldd	r28, Z+6	; 0x06
    335e:	d7 81       	ldd	r29, Z+7	; 0x07
    3360:	80 85       	ldd	r24, Z+8	; 0x08
    3362:	91 85       	ldd	r25, Z+9	; 0x09
    3364:	9f 83       	std	Y+7, r25	; 0x07
    3366:	8e 83       	std	Y+6, r24	; 0x06
    3368:	c0 85       	ldd	r28, Z+8	; 0x08
    336a:	d1 85       	ldd	r29, Z+9	; 0x09
    336c:	86 81       	ldd	r24, Z+6	; 0x06
    336e:	97 81       	ldd	r25, Z+7	; 0x07
    3370:	9d 83       	std	Y+5, r25	; 0x05
    3372:	8c 83       	std	Y+4, r24	; 0x04
    3374:	11 96       	adiw	r26, 0x01	; 1
    3376:	8d 91       	ld	r24, X+
    3378:	9c 91       	ld	r25, X
    337a:	12 97       	sbiw	r26, 0x02	; 2
    337c:	9f 01       	movw	r18, r30
    337e:	2e 5f       	subi	r18, 0xFE	; 254
    3380:	3f 4f       	sbci	r19, 0xFF	; 255
    3382:	82 17       	cp	r24, r18
    3384:	93 07       	cpc	r25, r19
    3386:	31 f4       	brne	.+12     	; 0x3394 <vTaskRemoveFromUnorderedEventList+0xb2>
    3388:	80 85       	ldd	r24, Z+8	; 0x08
    338a:	91 85       	ldd	r25, Z+9	; 0x09
    338c:	12 96       	adiw	r26, 0x02	; 2
    338e:	9c 93       	st	X, r25
    3390:	8e 93       	st	-X, r24
    3392:	11 97       	sbiw	r26, 0x01	; 1
    3394:	15 86       	std	Z+13, r1	; 0x0d
    3396:	14 86       	std	Z+12, r1	; 0x0c
    3398:	8c 91       	ld	r24, X
    339a:	81 50       	subi	r24, 0x01	; 1
    339c:	8c 93       	st	X, r24
    339e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    33a0:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    33a4:	8a 17       	cp	r24, r26
    33a6:	10 f4       	brcc	.+4      	; 0x33ac <vTaskRemoveFromUnorderedEventList+0xca>
    33a8:	a0 93 c5 13 	sts	0x13C5, r26	; 0x8013c5 <uxTopReadyPriority>
    33ac:	8b e0       	ldi	r24, 0x0B	; 11
    33ae:	8a 9f       	mul	r24, r26
    33b0:	d0 01       	movw	r26, r0
    33b2:	11 24       	eor	r1, r1
    33b4:	a9 5f       	subi	r26, 0xF9	; 249
    33b6:	bb 4e       	sbci	r27, 0xEB	; 235
    33b8:	11 96       	adiw	r26, 0x01	; 1
    33ba:	0d 90       	ld	r0, X+
    33bc:	bc 91       	ld	r27, X
    33be:	a0 2d       	mov	r26, r0
    33c0:	b7 83       	std	Z+7, r27	; 0x07
    33c2:	a6 83       	std	Z+6, r26	; 0x06
    33c4:	16 96       	adiw	r26, 0x06	; 6
    33c6:	4d 91       	ld	r20, X+
    33c8:	5c 91       	ld	r21, X
    33ca:	17 97       	sbiw	r26, 0x07	; 7
    33cc:	51 87       	std	Z+9, r21	; 0x09
    33ce:	40 87       	std	Z+8, r20	; 0x08
    33d0:	16 96       	adiw	r26, 0x06	; 6
    33d2:	cd 91       	ld	r28, X+
    33d4:	dc 91       	ld	r29, X
    33d6:	17 97       	sbiw	r26, 0x07	; 7
    33d8:	3d 83       	std	Y+5, r19	; 0x05
    33da:	2c 83       	std	Y+4, r18	; 0x04
    33dc:	17 96       	adiw	r26, 0x07	; 7
    33de:	3c 93       	st	X, r19
    33e0:	2e 93       	st	-X, r18
    33e2:	16 97       	sbiw	r26, 0x06	; 6
    33e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    33e6:	8a 9f       	mul	r24, r26
    33e8:	d0 01       	movw	r26, r0
    33ea:	11 24       	eor	r1, r1
    33ec:	a9 5f       	subi	r26, 0xF9	; 249
    33ee:	bb 4e       	sbci	r27, 0xEB	; 235
    33f0:	b5 87       	std	Z+13, r27	; 0x0d
    33f2:	a4 87       	std	Z+12, r26	; 0x0c
    33f4:	8c 91       	ld	r24, X
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	8c 93       	st	X, r24
    33fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    33fc:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    3400:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3404:	82 8d       	ldd	r24, Z+26	; 0x1a
    3406:	89 17       	cp	r24, r25
    3408:	18 f4       	brcc	.+6      	; 0x3410 <vTaskRemoveFromUnorderedEventList+0x12e>
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

00003416 <vTaskSetTimeOutState>:
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	0f 92       	push	r0
    341c:	20 91 be 13 	lds	r18, 0x13BE	; 0x8013be <xNumOfOverflows>
    3420:	fc 01       	movw	r30, r24
    3422:	20 83       	st	Z, r18
    3424:	40 91 c6 13 	lds	r20, 0x13C6	; 0x8013c6 <xTickCount>
    3428:	50 91 c7 13 	lds	r21, 0x13C7	; 0x8013c7 <xTickCount+0x1>
    342c:	60 91 c8 13 	lds	r22, 0x13C8	; 0x8013c8 <xTickCount+0x2>
    3430:	70 91 c9 13 	lds	r23, 0x13C9	; 0x8013c9 <xTickCount+0x3>
    3434:	41 83       	std	Z+1, r20	; 0x01
    3436:	52 83       	std	Z+2, r21	; 0x02
    3438:	63 83       	std	Z+3, r22	; 0x03
    343a:	74 83       	std	Z+4, r23	; 0x04
    343c:	0f 90       	pop	r0
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	08 95       	ret

00003442 <vTaskInternalSetTimeOutState>:
    3442:	20 91 be 13 	lds	r18, 0x13BE	; 0x8013be <xNumOfOverflows>
    3446:	fc 01       	movw	r30, r24
    3448:	20 83       	st	Z, r18
    344a:	40 91 c6 13 	lds	r20, 0x13C6	; 0x8013c6 <xTickCount>
    344e:	50 91 c7 13 	lds	r21, 0x13C7	; 0x8013c7 <xTickCount+0x1>
    3452:	60 91 c8 13 	lds	r22, 0x13C8	; 0x8013c8 <xTickCount+0x2>
    3456:	70 91 c9 13 	lds	r23, 0x13C9	; 0x8013c9 <xTickCount+0x3>
    345a:	41 83       	std	Z+1, r20	; 0x01
    345c:	52 83       	std	Z+2, r21	; 0x02
    345e:	63 83       	std	Z+3, r22	; 0x03
    3460:	74 83       	std	Z+4, r23	; 0x04
    3462:	08 95       	ret

00003464 <xTaskCheckForTimeOut>:
    3464:	8f 92       	push	r8
    3466:	9f 92       	push	r9
    3468:	af 92       	push	r10
    346a:	bf 92       	push	r11
    346c:	cf 92       	push	r12
    346e:	df 92       	push	r13
    3470:	ef 92       	push	r14
    3472:	ff 92       	push	r15
    3474:	0f 93       	push	r16
    3476:	1f 93       	push	r17
    3478:	cf 93       	push	r28
    347a:	df 93       	push	r29
    347c:	fb 01       	movw	r30, r22
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	0f 92       	push	r0
    3484:	c0 90 c6 13 	lds	r12, 0x13C6	; 0x8013c6 <xTickCount>
    3488:	d0 90 c7 13 	lds	r13, 0x13C7	; 0x8013c7 <xTickCount+0x1>
    348c:	e0 90 c8 13 	lds	r14, 0x13C8	; 0x8013c8 <xTickCount+0x2>
    3490:	f0 90 c9 13 	lds	r15, 0x13C9	; 0x8013c9 <xTickCount+0x3>
    3494:	dc 01       	movw	r26, r24
    3496:	11 96       	adiw	r26, 0x01	; 1
    3498:	0d 91       	ld	r16, X+
    349a:	1d 91       	ld	r17, X+
    349c:	2d 91       	ld	r18, X+
    349e:	3c 91       	ld	r19, X
    34a0:	14 97       	sbiw	r26, 0x04	; 4
    34a2:	46 01       	movw	r8, r12
    34a4:	57 01       	movw	r10, r14
    34a6:	80 1a       	sub	r8, r16
    34a8:	91 0a       	sbc	r9, r17
    34aa:	a2 0a       	sbc	r10, r18
    34ac:	b3 0a       	sbc	r11, r19
    34ae:	40 81       	ld	r20, Z
    34b0:	51 81       	ldd	r21, Z+1	; 0x01
    34b2:	62 81       	ldd	r22, Z+2	; 0x02
    34b4:	73 81       	ldd	r23, Z+3	; 0x03
    34b6:	4f 3f       	cpi	r20, 0xFF	; 255
    34b8:	bf ef       	ldi	r27, 0xFF	; 255
    34ba:	5b 07       	cpc	r21, r27
    34bc:	6b 07       	cpc	r22, r27
    34be:	7b 07       	cpc	r23, r27
    34c0:	39 f1       	breq	.+78     	; 0x3510 <xTaskCheckForTimeOut+0xac>
    34c2:	ec 01       	movw	r28, r24
    34c4:	b8 81       	ld	r27, Y
    34c6:	a0 91 be 13 	lds	r26, 0x13BE	; 0x8013be <xNumOfOverflows>
    34ca:	ba 17       	cp	r27, r26
    34cc:	59 f0       	breq	.+22     	; 0x34e4 <xTaskCheckForTimeOut+0x80>
    34ce:	c0 16       	cp	r12, r16
    34d0:	d1 06       	cpc	r13, r17
    34d2:	e2 06       	cpc	r14, r18
    34d4:	f3 06       	cpc	r15, r19
    34d6:	30 f0       	brcs	.+12     	; 0x34e4 <xTaskCheckForTimeOut+0x80>
    34d8:	10 82       	st	Z, r1
    34da:	11 82       	std	Z+1, r1	; 0x01
    34dc:	12 82       	std	Z+2, r1	; 0x02
    34de:	13 82       	std	Z+3, r1	; 0x03
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	17 c0       	rjmp	.+46     	; 0x3512 <xTaskCheckForTimeOut+0xae>
    34e4:	84 16       	cp	r8, r20
    34e6:	95 06       	cpc	r9, r21
    34e8:	a6 06       	cpc	r10, r22
    34ea:	b7 06       	cpc	r11, r23
    34ec:	58 f4       	brcc	.+22     	; 0x3504 <xTaskCheckForTimeOut+0xa0>
    34ee:	48 19       	sub	r20, r8
    34f0:	59 09       	sbc	r21, r9
    34f2:	6a 09       	sbc	r22, r10
    34f4:	7b 09       	sbc	r23, r11
    34f6:	40 83       	st	Z, r20
    34f8:	51 83       	std	Z+1, r21	; 0x01
    34fa:	62 83       	std	Z+2, r22	; 0x02
    34fc:	73 83       	std	Z+3, r23	; 0x03
    34fe:	a1 df       	rcall	.-190    	; 0x3442 <vTaskInternalSetTimeOutState>
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	07 c0       	rjmp	.+14     	; 0x3512 <xTaskCheckForTimeOut+0xae>
    3504:	10 82       	st	Z, r1
    3506:	11 82       	std	Z+1, r1	; 0x01
    3508:	12 82       	std	Z+2, r1	; 0x02
    350a:	13 82       	std	Z+3, r1	; 0x03
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	01 c0       	rjmp	.+2      	; 0x3512 <xTaskCheckForTimeOut+0xae>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	0f 90       	pop	r0
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	df 91       	pop	r29
    3518:	cf 91       	pop	r28
    351a:	1f 91       	pop	r17
    351c:	0f 91       	pop	r16
    351e:	ff 90       	pop	r15
    3520:	ef 90       	pop	r14
    3522:	df 90       	pop	r13
    3524:	cf 90       	pop	r12
    3526:	bf 90       	pop	r11
    3528:	af 90       	pop	r10
    352a:	9f 90       	pop	r9
    352c:	8f 90       	pop	r8
    352e:	08 95       	ret

00003530 <vTaskMissedYield>:
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <xYieldPending>
    3536:	08 95       	ret

00003538 <xTaskGetCurrentTaskHandle>:
    3538:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    353c:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3540:	08 95       	ret

00003542 <xTaskGetSchedulerState>:
    3542:	80 91 c4 13 	lds	r24, 0x13C4	; 0x8013c4 <xSchedulerRunning>
    3546:	88 23       	and	r24, r24
    3548:	31 f0       	breq	.+12     	; 0x3556 <xTaskGetSchedulerState+0x14>
    354a:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    354e:	81 11       	cpse	r24, r1
    3550:	04 c0       	rjmp	.+8      	; 0x355a <xTaskGetSchedulerState+0x18>
    3552:	82 e0       	ldi	r24, 0x02	; 2
    3554:	08 95       	ret
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	08 95       	ret
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	08 95       	ret

0000355e <xTaskPriorityInherit>:
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	fc 01       	movw	r30, r24
    3568:	89 2b       	or	r24, r25
    356a:	09 f4       	brne	.+2      	; 0x356e <xTaskPriorityInherit+0x10>
    356c:	77 c0       	rjmp	.+238    	; 0x365c <xTaskPriorityInherit+0xfe>
    356e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3570:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    3574:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3578:	5a 96       	adiw	r26, 0x1a	; 26
    357a:	9c 91       	ld	r25, X
    357c:	89 17       	cp	r24, r25
    357e:	08 f0       	brcs	.+2      	; 0x3582 <xTaskPriorityInherit+0x24>
    3580:	63 c0       	rjmp	.+198    	; 0x3648 <xTaskPriorityInherit+0xea>
    3582:	46 85       	ldd	r20, Z+14	; 0x0e
    3584:	57 85       	ldd	r21, Z+15	; 0x0f
    3586:	60 89       	ldd	r22, Z+16	; 0x10
    3588:	71 89       	ldd	r23, Z+17	; 0x11
    358a:	77 23       	and	r23, r23
    358c:	94 f0       	brlt	.+36     	; 0x35b2 <xTaskPriorityInherit+0x54>
    358e:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    3592:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3596:	5a 96       	adiw	r26, 0x1a	; 26
    3598:	9c 91       	ld	r25, X
    359a:	4a e0       	ldi	r20, 0x0A	; 10
    359c:	50 e0       	ldi	r21, 0x00	; 0
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	49 1b       	sub	r20, r25
    35a4:	51 09       	sbc	r21, r1
    35a6:	61 09       	sbc	r22, r1
    35a8:	71 09       	sbc	r23, r1
    35aa:	46 87       	std	Z+14, r20	; 0x0e
    35ac:	57 87       	std	Z+15, r21	; 0x0f
    35ae:	60 8b       	std	Z+16, r22	; 0x10
    35b0:	71 8b       	std	Z+17, r23	; 0x11
    35b2:	24 85       	ldd	r18, Z+12	; 0x0c
    35b4:	35 85       	ldd	r19, Z+13	; 0x0d
    35b6:	4b e0       	ldi	r20, 0x0B	; 11
    35b8:	84 9f       	mul	r24, r20
    35ba:	c0 01       	movw	r24, r0
    35bc:	11 24       	eor	r1, r1
    35be:	89 5f       	subi	r24, 0xF9	; 249
    35c0:	9b 4e       	sbci	r25, 0xEB	; 235
    35c2:	28 17       	cp	r18, r24
    35c4:	39 07       	cpc	r19, r25
    35c6:	b9 f5       	brne	.+110    	; 0x3636 <xTaskPriorityInherit+0xd8>
    35c8:	ef 01       	movw	r28, r30
    35ca:	8f 01       	movw	r16, r30
    35cc:	0e 5f       	subi	r16, 0xFE	; 254
    35ce:	1f 4f       	sbci	r17, 0xFF	; 255
    35d0:	c8 01       	movw	r24, r16
    35d2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
    35d6:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    35da:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    35de:	e2 8d       	ldd	r30, Z+26	; 0x1a
    35e0:	ea 8f       	std	Y+26, r30	; 0x1a
    35e2:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    35e6:	8e 17       	cp	r24, r30
    35e8:	10 f4       	brcc	.+4      	; 0x35ee <xTaskPriorityInherit+0x90>
    35ea:	e0 93 c5 13 	sts	0x13C5, r30	; 0x8013c5 <uxTopReadyPriority>
    35ee:	8b e0       	ldi	r24, 0x0B	; 11
    35f0:	8e 9f       	mul	r24, r30
    35f2:	f0 01       	movw	r30, r0
    35f4:	11 24       	eor	r1, r1
    35f6:	e9 5f       	subi	r30, 0xF9	; 249
    35f8:	fb 4e       	sbci	r31, 0xEB	; 235
    35fa:	01 80       	ldd	r0, Z+1	; 0x01
    35fc:	f2 81       	ldd	r31, Z+2	; 0x02
    35fe:	e0 2d       	mov	r30, r0
    3600:	ff 83       	std	Y+7, r31	; 0x07
    3602:	ee 83       	std	Y+6, r30	; 0x06
    3604:	26 81       	ldd	r18, Z+6	; 0x06
    3606:	37 81       	ldd	r19, Z+7	; 0x07
    3608:	39 87       	std	Y+9, r19	; 0x09
    360a:	28 87       	std	Y+8, r18	; 0x08
    360c:	a6 81       	ldd	r26, Z+6	; 0x06
    360e:	b7 81       	ldd	r27, Z+7	; 0x07
    3610:	15 96       	adiw	r26, 0x05	; 5
    3612:	1c 93       	st	X, r17
    3614:	0e 93       	st	-X, r16
    3616:	14 97       	sbiw	r26, 0x04	; 4
    3618:	17 83       	std	Z+7, r17	; 0x07
    361a:	06 83       	std	Z+6, r16	; 0x06
    361c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    361e:	8e 9f       	mul	r24, r30
    3620:	f0 01       	movw	r30, r0
    3622:	11 24       	eor	r1, r1
    3624:	e9 5f       	subi	r30, 0xF9	; 249
    3626:	fb 4e       	sbci	r31, 0xEB	; 235
    3628:	fd 87       	std	Y+13, r31	; 0x0d
    362a:	ec 87       	std	Y+12, r30	; 0x0c
    362c:	80 81       	ld	r24, Z
    362e:	8f 5f       	subi	r24, 0xFF	; 255
    3630:	80 83       	st	Z, r24
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	16 c0       	rjmp	.+44     	; 0x3662 <xTaskPriorityInherit+0x104>
    3636:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    363a:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    363e:	5a 96       	adiw	r26, 0x1a	; 26
    3640:	8c 91       	ld	r24, X
    3642:	82 8f       	std	Z+26, r24	; 0x1a
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	0d c0       	rjmp	.+26     	; 0x3662 <xTaskPriorityInherit+0x104>
    3648:	95 a5       	ldd	r25, Z+45	; 0x2d
    364a:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    364e:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3652:	82 8d       	ldd	r24, Z+26	; 0x1a
    3654:	98 17       	cp	r25, r24
    3656:	20 f0       	brcs	.+8      	; 0x3660 <xTaskPriorityInherit+0x102>
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	03 c0       	rjmp	.+6      	; 0x3662 <xTaskPriorityInherit+0x104>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <xTaskPriorityInherit+0x104>
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	08 95       	ret

0000366c <xTaskPriorityDisinherit>:
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	fc 01       	movw	r30, r24
    3676:	89 2b       	or	r24, r25
    3678:	09 f4       	brne	.+2      	; 0x367c <xTaskPriorityDisinherit+0x10>
    367a:	49 c0       	rjmp	.+146    	; 0x370e <xTaskPriorityDisinherit+0xa2>
    367c:	86 a5       	ldd	r24, Z+46	; 0x2e
    367e:	81 50       	subi	r24, 0x01	; 1
    3680:	86 a7       	std	Z+46, r24	; 0x2e
    3682:	22 8d       	ldd	r18, Z+26	; 0x1a
    3684:	95 a5       	ldd	r25, Z+45	; 0x2d
    3686:	29 17       	cp	r18, r25
    3688:	09 f4       	brne	.+2      	; 0x368c <xTaskPriorityDisinherit+0x20>
    368a:	43 c0       	rjmp	.+134    	; 0x3712 <xTaskPriorityDisinherit+0xa6>
    368c:	81 11       	cpse	r24, r1
    368e:	43 c0       	rjmp	.+134    	; 0x3716 <xTaskPriorityDisinherit+0xaa>
    3690:	ef 01       	movw	r28, r30
    3692:	8f 01       	movw	r16, r30
    3694:	0e 5f       	subi	r16, 0xFE	; 254
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	c8 01       	movw	r24, r16
    369a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
    369e:	ed a5       	ldd	r30, Y+45	; 0x2d
    36a0:	ea 8f       	std	Y+26, r30	; 0x1a
    36a2:	8a e0       	ldi	r24, 0x0A	; 10
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	a0 e0       	ldi	r26, 0x00	; 0
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	8e 1b       	sub	r24, r30
    36ac:	91 09       	sbc	r25, r1
    36ae:	a1 09       	sbc	r26, r1
    36b0:	b1 09       	sbc	r27, r1
    36b2:	8e 87       	std	Y+14, r24	; 0x0e
    36b4:	9f 87       	std	Y+15, r25	; 0x0f
    36b6:	a8 8b       	std	Y+16, r26	; 0x10
    36b8:	b9 8b       	std	Y+17, r27	; 0x11
    36ba:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    36be:	8e 17       	cp	r24, r30
    36c0:	10 f4       	brcc	.+4      	; 0x36c6 <xTaskPriorityDisinherit+0x5a>
    36c2:	e0 93 c5 13 	sts	0x13C5, r30	; 0x8013c5 <uxTopReadyPriority>
    36c6:	8b e0       	ldi	r24, 0x0B	; 11
    36c8:	8e 9f       	mul	r24, r30
    36ca:	f0 01       	movw	r30, r0
    36cc:	11 24       	eor	r1, r1
    36ce:	e9 5f       	subi	r30, 0xF9	; 249
    36d0:	fb 4e       	sbci	r31, 0xEB	; 235
    36d2:	01 80       	ldd	r0, Z+1	; 0x01
    36d4:	f2 81       	ldd	r31, Z+2	; 0x02
    36d6:	e0 2d       	mov	r30, r0
    36d8:	ff 83       	std	Y+7, r31	; 0x07
    36da:	ee 83       	std	Y+6, r30	; 0x06
    36dc:	26 81       	ldd	r18, Z+6	; 0x06
    36de:	37 81       	ldd	r19, Z+7	; 0x07
    36e0:	39 87       	std	Y+9, r19	; 0x09
    36e2:	28 87       	std	Y+8, r18	; 0x08
    36e4:	a6 81       	ldd	r26, Z+6	; 0x06
    36e6:	b7 81       	ldd	r27, Z+7	; 0x07
    36e8:	15 96       	adiw	r26, 0x05	; 5
    36ea:	1c 93       	st	X, r17
    36ec:	0e 93       	st	-X, r16
    36ee:	14 97       	sbiw	r26, 0x04	; 4
    36f0:	17 83       	std	Z+7, r17	; 0x07
    36f2:	06 83       	std	Z+6, r16	; 0x06
    36f4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    36f6:	8e 9f       	mul	r24, r30
    36f8:	f0 01       	movw	r30, r0
    36fa:	11 24       	eor	r1, r1
    36fc:	e9 5f       	subi	r30, 0xF9	; 249
    36fe:	fb 4e       	sbci	r31, 0xEB	; 235
    3700:	fd 87       	std	Y+13, r31	; 0x0d
    3702:	ec 87       	std	Y+12, r30	; 0x0c
    3704:	80 81       	ld	r24, Z
    3706:	8f 5f       	subi	r24, 0xFF	; 255
    3708:	80 83       	st	Z, r24
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	05 c0       	rjmp	.+10     	; 0x3718 <xTaskPriorityDisinherit+0xac>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	03 c0       	rjmp	.+6      	; 0x3718 <xTaskPriorityDisinherit+0xac>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	01 c0       	rjmp	.+2      	; 0x3718 <xTaskPriorityDisinherit+0xac>
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	08 95       	ret

00003722 <vTaskPriorityDisinheritAfterTimeout>:
    3722:	0f 93       	push	r16
    3724:	1f 93       	push	r17
    3726:	cf 93       	push	r28
    3728:	df 93       	push	r29
    372a:	fc 01       	movw	r30, r24
    372c:	89 2b       	or	r24, r25
    372e:	09 f4       	brne	.+2      	; 0x3732 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3730:	5a c0       	rjmp	.+180    	; 0x37e6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3732:	85 a5       	ldd	r24, Z+45	; 0x2d
    3734:	86 17       	cp	r24, r22
    3736:	08 f4       	brcc	.+2      	; 0x373a <vTaskPriorityDisinheritAfterTimeout+0x18>
    3738:	86 2f       	mov	r24, r22
    373a:	92 8d       	ldd	r25, Z+26	; 0x1a
    373c:	89 17       	cp	r24, r25
    373e:	09 f4       	brne	.+2      	; 0x3742 <vTaskPriorityDisinheritAfterTimeout+0x20>
    3740:	52 c0       	rjmp	.+164    	; 0x37e6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3742:	26 a5       	ldd	r18, Z+46	; 0x2e
    3744:	21 30       	cpi	r18, 0x01	; 1
    3746:	09 f0       	breq	.+2      	; 0x374a <vTaskPriorityDisinheritAfterTimeout+0x28>
    3748:	4e c0       	rjmp	.+156    	; 0x37e6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    374a:	82 8f       	std	Z+26, r24	; 0x1a
    374c:	46 85       	ldd	r20, Z+14	; 0x0e
    374e:	57 85       	ldd	r21, Z+15	; 0x0f
    3750:	60 89       	ldd	r22, Z+16	; 0x10
    3752:	71 89       	ldd	r23, Z+17	; 0x11
    3754:	77 23       	and	r23, r23
    3756:	64 f0       	brlt	.+24     	; 0x3770 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3758:	4a e0       	ldi	r20, 0x0A	; 10
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	48 1b       	sub	r20, r24
    3762:	51 09       	sbc	r21, r1
    3764:	61 09       	sbc	r22, r1
    3766:	71 09       	sbc	r23, r1
    3768:	46 87       	std	Z+14, r20	; 0x0e
    376a:	57 87       	std	Z+15, r21	; 0x0f
    376c:	60 8b       	std	Z+16, r22	; 0x10
    376e:	71 8b       	std	Z+17, r23	; 0x11
    3770:	24 85       	ldd	r18, Z+12	; 0x0c
    3772:	35 85       	ldd	r19, Z+13	; 0x0d
    3774:	4b e0       	ldi	r20, 0x0B	; 11
    3776:	94 9f       	mul	r25, r20
    3778:	c0 01       	movw	r24, r0
    377a:	11 24       	eor	r1, r1
    377c:	89 5f       	subi	r24, 0xF9	; 249
    377e:	9b 4e       	sbci	r25, 0xEB	; 235
    3780:	28 17       	cp	r18, r24
    3782:	39 07       	cpc	r19, r25
    3784:	81 f5       	brne	.+96     	; 0x37e6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3786:	ef 01       	movw	r28, r30
    3788:	8f 01       	movw	r16, r30
    378a:	0e 5f       	subi	r16, 0xFE	; 254
    378c:	1f 4f       	sbci	r17, 0xFF	; 255
    378e:	c8 01       	movw	r24, r16
    3790:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
    3794:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3796:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    379a:	8e 17       	cp	r24, r30
    379c:	10 f4       	brcc	.+4      	; 0x37a2 <vTaskPriorityDisinheritAfterTimeout+0x80>
    379e:	e0 93 c5 13 	sts	0x13C5, r30	; 0x8013c5 <uxTopReadyPriority>
    37a2:	8b e0       	ldi	r24, 0x0B	; 11
    37a4:	8e 9f       	mul	r24, r30
    37a6:	f0 01       	movw	r30, r0
    37a8:	11 24       	eor	r1, r1
    37aa:	e9 5f       	subi	r30, 0xF9	; 249
    37ac:	fb 4e       	sbci	r31, 0xEB	; 235
    37ae:	01 80       	ldd	r0, Z+1	; 0x01
    37b0:	f2 81       	ldd	r31, Z+2	; 0x02
    37b2:	e0 2d       	mov	r30, r0
    37b4:	ff 83       	std	Y+7, r31	; 0x07
    37b6:	ee 83       	std	Y+6, r30	; 0x06
    37b8:	26 81       	ldd	r18, Z+6	; 0x06
    37ba:	37 81       	ldd	r19, Z+7	; 0x07
    37bc:	39 87       	std	Y+9, r19	; 0x09
    37be:	28 87       	std	Y+8, r18	; 0x08
    37c0:	a6 81       	ldd	r26, Z+6	; 0x06
    37c2:	b7 81       	ldd	r27, Z+7	; 0x07
    37c4:	15 96       	adiw	r26, 0x05	; 5
    37c6:	1c 93       	st	X, r17
    37c8:	0e 93       	st	-X, r16
    37ca:	14 97       	sbiw	r26, 0x04	; 4
    37cc:	17 83       	std	Z+7, r17	; 0x07
    37ce:	06 83       	std	Z+6, r16	; 0x06
    37d0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    37d2:	8e 9f       	mul	r24, r30
    37d4:	f0 01       	movw	r30, r0
    37d6:	11 24       	eor	r1, r1
    37d8:	e9 5f       	subi	r30, 0xF9	; 249
    37da:	fb 4e       	sbci	r31, 0xEB	; 235
    37dc:	fd 87       	std	Y+13, r31	; 0x0d
    37de:	ec 87       	std	Y+12, r30	; 0x0c
    37e0:	80 81       	ld	r24, Z
    37e2:	8f 5f       	subi	r24, 0xFF	; 255
    37e4:	80 83       	st	Z, r24
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	1f 91       	pop	r17
    37ec:	0f 91       	pop	r16
    37ee:	08 95       	ret

000037f0 <uxTaskResetEventItemValue>:
    37f0:	cf 92       	push	r12
    37f2:	df 92       	push	r13
    37f4:	ef 92       	push	r14
    37f6:	ff 92       	push	r15
    37f8:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    37fc:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3800:	66 85       	ldd	r22, Z+14	; 0x0e
    3802:	77 85       	ldd	r23, Z+15	; 0x0f
    3804:	80 89       	ldd	r24, Z+16	; 0x10
    3806:	91 89       	ldd	r25, Z+17	; 0x11
    3808:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    380c:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3810:	a0 91 75 14 	lds	r26, 0x1475	; 0x801475 <pxCurrentTCB>
    3814:	b0 91 76 14 	lds	r27, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3818:	5a 96       	adiw	r26, 0x1a	; 26
    381a:	2c 91       	ld	r18, X
    381c:	0f 2e       	mov	r0, r31
    381e:	fa e0       	ldi	r31, 0x0A	; 10
    3820:	cf 2e       	mov	r12, r31
    3822:	d1 2c       	mov	r13, r1
    3824:	e1 2c       	mov	r14, r1
    3826:	f1 2c       	mov	r15, r1
    3828:	f0 2d       	mov	r31, r0
    382a:	c2 1a       	sub	r12, r18
    382c:	d1 08       	sbc	r13, r1
    382e:	e1 08       	sbc	r14, r1
    3830:	f1 08       	sbc	r15, r1
    3832:	c6 86       	std	Z+14, r12	; 0x0e
    3834:	d7 86       	std	Z+15, r13	; 0x0f
    3836:	e0 8a       	std	Z+16, r14	; 0x10
    3838:	f1 8a       	std	Z+17, r15	; 0x11
    383a:	ff 90       	pop	r15
    383c:	ef 90       	pop	r14
    383e:	df 90       	pop	r13
    3840:	cf 90       	pop	r12
    3842:	08 95       	ret

00003844 <pvTaskIncrementMutexHeldCount>:
    3844:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    3848:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    384c:	89 2b       	or	r24, r25
    384e:	39 f0       	breq	.+14     	; 0x385e <pvTaskIncrementMutexHeldCount+0x1a>
    3850:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    3854:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3858:	86 a5       	ldd	r24, Z+46	; 0x2e
    385a:	8f 5f       	subi	r24, 0xFF	; 255
    385c:	86 a7       	std	Z+46, r24	; 0x2e
    385e:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    3862:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3866:	08 95       	ret

00003868 <xTaskGenericNotifyWait>:
    3868:	4f 92       	push	r4
    386a:	5f 92       	push	r5
    386c:	6f 92       	push	r6
    386e:	7f 92       	push	r7
    3870:	af 92       	push	r10
    3872:	bf 92       	push	r11
    3874:	cf 92       	push	r12
    3876:	df 92       	push	r13
    3878:	ef 92       	push	r14
    387a:	ff 92       	push	r15
    387c:	0f 93       	push	r16
    387e:	1f 93       	push	r17
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	28 01       	movw	r4, r16
    3886:	39 01       	movw	r6, r18
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	0f 92       	push	r0
    388e:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    3892:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3896:	c8 2f       	mov	r28, r24
    3898:	d0 e0       	ldi	r29, 0x00	; 0
    389a:	ec 0f       	add	r30, r28
    389c:	fd 1f       	adc	r31, r29
    389e:	83 a9       	ldd	r24, Z+51	; 0x33
    38a0:	82 30       	cpi	r24, 0x02	; 2
    38a2:	79 f1       	breq	.+94     	; 0x3902 <xTaskGenericNotifyWait+0x9a>
    38a4:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    38a8:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    38ac:	ce 01       	movw	r24, r28
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	e8 0f       	add	r30, r24
    38b8:	f9 1f       	adc	r31, r25
    38ba:	87 a5       	ldd	r24, Z+47	; 0x2f
    38bc:	90 a9       	ldd	r25, Z+48	; 0x30
    38be:	a1 a9       	ldd	r26, Z+49	; 0x31
    38c0:	b2 a9       	ldd	r27, Z+50	; 0x32
    38c2:	40 95       	com	r20
    38c4:	50 95       	com	r21
    38c6:	60 95       	com	r22
    38c8:	70 95       	com	r23
    38ca:	48 23       	and	r20, r24
    38cc:	59 23       	and	r21, r25
    38ce:	6a 23       	and	r22, r26
    38d0:	7b 23       	and	r23, r27
    38d2:	47 a7       	std	Z+47, r20	; 0x2f
    38d4:	50 ab       	std	Z+48, r21	; 0x30
    38d6:	61 ab       	std	Z+49, r22	; 0x31
    38d8:	72 ab       	std	Z+50, r23	; 0x32
    38da:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    38de:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    38e2:	ec 0f       	add	r30, r28
    38e4:	fd 1f       	adc	r31, r29
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	83 ab       	std	Z+51, r24	; 0x33
    38ea:	a1 14       	cp	r10, r1
    38ec:	b1 04       	cpc	r11, r1
    38ee:	c1 04       	cpc	r12, r1
    38f0:	d1 04       	cpc	r13, r1
    38f2:	39 f0       	breq	.+14     	; 0x3902 <xTaskGenericNotifyWait+0x9a>
    38f4:	41 e0       	ldi	r20, 0x01	; 1
    38f6:	c6 01       	movw	r24, r12
    38f8:	b5 01       	movw	r22, r10
    38fa:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <prvAddCurrentTaskToDelayedList>
    38fe:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    3902:	0f 90       	pop	r0
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	0f 92       	push	r0
    390c:	e1 14       	cp	r14, r1
    390e:	f1 04       	cpc	r15, r1
    3910:	a1 f0       	breq	.+40     	; 0x393a <xTaskGenericNotifyWait+0xd2>
    3912:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    3916:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    391a:	ce 01       	movw	r24, r28
    391c:	88 0f       	add	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	88 0f       	add	r24, r24
    3922:	99 1f       	adc	r25, r25
    3924:	e8 0f       	add	r30, r24
    3926:	f9 1f       	adc	r31, r25
    3928:	87 a5       	ldd	r24, Z+47	; 0x2f
    392a:	90 a9       	ldd	r25, Z+48	; 0x30
    392c:	a1 a9       	ldd	r26, Z+49	; 0x31
    392e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3930:	f7 01       	movw	r30, r14
    3932:	80 83       	st	Z, r24
    3934:	91 83       	std	Z+1, r25	; 0x01
    3936:	a2 83       	std	Z+2, r26	; 0x02
    3938:	b3 83       	std	Z+3, r27	; 0x03
    393a:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    393e:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3942:	ec 0f       	add	r30, r28
    3944:	fd 1f       	adc	r31, r29
    3946:	83 a9       	ldd	r24, Z+51	; 0x33
    3948:	82 30       	cpi	r24, 0x02	; 2
    394a:	e9 f4       	brne	.+58     	; 0x3986 <xTaskGenericNotifyWait+0x11e>
    394c:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    3950:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3954:	ce 01       	movw	r24, r28
    3956:	88 0f       	add	r24, r24
    3958:	99 1f       	adc	r25, r25
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	e8 0f       	add	r30, r24
    3960:	f9 1f       	adc	r31, r25
    3962:	87 a5       	ldd	r24, Z+47	; 0x2f
    3964:	90 a9       	ldd	r25, Z+48	; 0x30
    3966:	a1 a9       	ldd	r26, Z+49	; 0x31
    3968:	b2 a9       	ldd	r27, Z+50	; 0x32
    396a:	40 94       	com	r4
    396c:	50 94       	com	r5
    396e:	60 94       	com	r6
    3970:	70 94       	com	r7
    3972:	48 22       	and	r4, r24
    3974:	59 22       	and	r5, r25
    3976:	6a 22       	and	r6, r26
    3978:	7b 22       	and	r7, r27
    397a:	47 a6       	std	Z+47, r4	; 0x2f
    397c:	50 aa       	std	Z+48, r5	; 0x30
    397e:	61 aa       	std	Z+49, r6	; 0x31
    3980:	72 aa       	std	Z+50, r7	; 0x32
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	01 c0       	rjmp	.+2      	; 0x3988 <xTaskGenericNotifyWait+0x120>
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	20 91 75 14 	lds	r18, 0x1475	; 0x801475 <pxCurrentTCB>
    398c:	30 91 76 14 	lds	r19, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3990:	c2 0f       	add	r28, r18
    3992:	d3 1f       	adc	r29, r19
    3994:	1b aa       	std	Y+51, r1	; 0x33
    3996:	0f 90       	pop	r0
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	df 90       	pop	r13
    39a8:	cf 90       	pop	r12
    39aa:	bf 90       	pop	r11
    39ac:	af 90       	pop	r10
    39ae:	7f 90       	pop	r7
    39b0:	6f 90       	pop	r6
    39b2:	5f 90       	pop	r5
    39b4:	4f 90       	pop	r4
    39b6:	08 95       	ret

000039b8 <xTaskGenericNotify>:
    39b8:	8f 92       	push	r8
    39ba:	9f 92       	push	r9
    39bc:	af 92       	push	r10
    39be:	bf 92       	push	r11
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	dc 01       	movw	r26, r24
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	0f 92       	push	r0
    39d2:	e1 14       	cp	r14, r1
    39d4:	f1 04       	cpc	r15, r1
    39d6:	89 f0       	breq	.+34     	; 0x39fa <xTaskGenericNotify+0x42>
    39d8:	e6 2f       	mov	r30, r22
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	ee 0f       	add	r30, r30
    39de:	ff 1f       	adc	r31, r31
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	e8 0f       	add	r30, r24
    39e6:	f9 1f       	adc	r31, r25
    39e8:	87 a4       	ldd	r8, Z+47	; 0x2f
    39ea:	90 a8       	ldd	r9, Z+48	; 0x30
    39ec:	a1 a8       	ldd	r10, Z+49	; 0x31
    39ee:	b2 a8       	ldd	r11, Z+50	; 0x32
    39f0:	f7 01       	movw	r30, r14
    39f2:	80 82       	st	Z, r8
    39f4:	91 82       	std	Z+1, r9	; 0x01
    39f6:	a2 82       	std	Z+2, r10	; 0x02
    39f8:	b3 82       	std	Z+3, r11	; 0x03
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	fd 01       	movw	r30, r26
    39fe:	e6 0f       	add	r30, r22
    3a00:	f7 1f       	adc	r31, r23
    3a02:	83 a9       	ldd	r24, Z+51	; 0x33
    3a04:	92 e0       	ldi	r25, 0x02	; 2
    3a06:	93 ab       	std	Z+51, r25	; 0x33
    3a08:	02 30       	cpi	r16, 0x02	; 2
    3a0a:	01 f1       	breq	.+64     	; 0x3a4c <xTaskGenericNotify+0x94>
    3a0c:	18 f4       	brcc	.+6      	; 0x3a14 <xTaskGenericNotify+0x5c>
    3a0e:	01 30       	cpi	r16, 0x01	; 1
    3a10:	31 f0       	breq	.+12     	; 0x3a1e <xTaskGenericNotify+0x66>
    3a12:	4d c0       	rjmp	.+154    	; 0x3aae <xTaskGenericNotify+0xf6>
    3a14:	03 30       	cpi	r16, 0x03	; 3
    3a16:	79 f1       	breq	.+94     	; 0x3a76 <xTaskGenericNotify+0xbe>
    3a18:	04 30       	cpi	r16, 0x04	; 4
    3a1a:	d1 f1       	breq	.+116    	; 0x3a90 <xTaskGenericNotify+0xd8>
    3a1c:	48 c0       	rjmp	.+144    	; 0x3aae <xTaskGenericNotify+0xf6>
    3a1e:	66 0f       	add	r22, r22
    3a20:	77 1f       	adc	r23, r23
    3a22:	66 0f       	add	r22, r22
    3a24:	77 1f       	adc	r23, r23
    3a26:	fd 01       	movw	r30, r26
    3a28:	e6 0f       	add	r30, r22
    3a2a:	f7 1f       	adc	r31, r23
    3a2c:	87 a4       	ldd	r8, Z+47	; 0x2f
    3a2e:	90 a8       	ldd	r9, Z+48	; 0x30
    3a30:	a1 a8       	ldd	r10, Z+49	; 0x31
    3a32:	b2 a8       	ldd	r11, Z+50	; 0x32
    3a34:	ba 01       	movw	r22, r20
    3a36:	a9 01       	movw	r20, r18
    3a38:	48 29       	or	r20, r8
    3a3a:	59 29       	or	r21, r9
    3a3c:	6a 29       	or	r22, r10
    3a3e:	7b 29       	or	r23, r11
    3a40:	47 a7       	std	Z+47, r20	; 0x2f
    3a42:	50 ab       	std	Z+48, r21	; 0x30
    3a44:	61 ab       	std	Z+49, r22	; 0x31
    3a46:	72 ab       	std	Z+50, r23	; 0x32
    3a48:	01 e0       	ldi	r16, 0x01	; 1
    3a4a:	34 c0       	rjmp	.+104    	; 0x3ab4 <xTaskGenericNotify+0xfc>
    3a4c:	66 0f       	add	r22, r22
    3a4e:	77 1f       	adc	r23, r23
    3a50:	66 0f       	add	r22, r22
    3a52:	77 1f       	adc	r23, r23
    3a54:	fd 01       	movw	r30, r26
    3a56:	e6 0f       	add	r30, r22
    3a58:	f7 1f       	adc	r31, r23
    3a5a:	47 a5       	ldd	r20, Z+47	; 0x2f
    3a5c:	50 a9       	ldd	r21, Z+48	; 0x30
    3a5e:	61 a9       	ldd	r22, Z+49	; 0x31
    3a60:	72 a9       	ldd	r23, Z+50	; 0x32
    3a62:	4f 5f       	subi	r20, 0xFF	; 255
    3a64:	5f 4f       	sbci	r21, 0xFF	; 255
    3a66:	6f 4f       	sbci	r22, 0xFF	; 255
    3a68:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6a:	47 a7       	std	Z+47, r20	; 0x2f
    3a6c:	50 ab       	std	Z+48, r21	; 0x30
    3a6e:	61 ab       	std	Z+49, r22	; 0x31
    3a70:	72 ab       	std	Z+50, r23	; 0x32
    3a72:	01 e0       	ldi	r16, 0x01	; 1
    3a74:	1f c0       	rjmp	.+62     	; 0x3ab4 <xTaskGenericNotify+0xfc>
    3a76:	66 0f       	add	r22, r22
    3a78:	77 1f       	adc	r23, r23
    3a7a:	66 0f       	add	r22, r22
    3a7c:	77 1f       	adc	r23, r23
    3a7e:	fd 01       	movw	r30, r26
    3a80:	e6 0f       	add	r30, r22
    3a82:	f7 1f       	adc	r31, r23
    3a84:	27 a7       	std	Z+47, r18	; 0x2f
    3a86:	30 ab       	std	Z+48, r19	; 0x30
    3a88:	41 ab       	std	Z+49, r20	; 0x31
    3a8a:	52 ab       	std	Z+50, r21	; 0x32
    3a8c:	01 e0       	ldi	r16, 0x01	; 1
    3a8e:	12 c0       	rjmp	.+36     	; 0x3ab4 <xTaskGenericNotify+0xfc>
    3a90:	82 30       	cpi	r24, 0x02	; 2
    3a92:	79 f0       	breq	.+30     	; 0x3ab2 <xTaskGenericNotify+0xfa>
    3a94:	66 0f       	add	r22, r22
    3a96:	77 1f       	adc	r23, r23
    3a98:	66 0f       	add	r22, r22
    3a9a:	77 1f       	adc	r23, r23
    3a9c:	fd 01       	movw	r30, r26
    3a9e:	e6 0f       	add	r30, r22
    3aa0:	f7 1f       	adc	r31, r23
    3aa2:	27 a7       	std	Z+47, r18	; 0x2f
    3aa4:	30 ab       	std	Z+48, r19	; 0x30
    3aa6:	41 ab       	std	Z+49, r20	; 0x31
    3aa8:	52 ab       	std	Z+50, r21	; 0x32
    3aaa:	01 e0       	ldi	r16, 0x01	; 1
    3aac:	03 c0       	rjmp	.+6      	; 0x3ab4 <xTaskGenericNotify+0xfc>
    3aae:	01 e0       	ldi	r16, 0x01	; 1
    3ab0:	01 c0       	rjmp	.+2      	; 0x3ab4 <xTaskGenericNotify+0xfc>
    3ab2:	00 e0       	ldi	r16, 0x00	; 0
    3ab4:	81 30       	cpi	r24, 0x01	; 1
    3ab6:	09 f0       	breq	.+2      	; 0x3aba <xTaskGenericNotify+0x102>
    3ab8:	69 c0       	rjmp	.+210    	; 0x3b8c <xTaskGenericNotify+0x1d4>
    3aba:	1c 96       	adiw	r26, 0x0c	; 12
    3abc:	ed 91       	ld	r30, X+
    3abe:	fc 91       	ld	r31, X
    3ac0:	1d 97       	sbiw	r26, 0x0d	; 13
    3ac2:	16 96       	adiw	r26, 0x06	; 6
    3ac4:	cd 91       	ld	r28, X+
    3ac6:	dc 91       	ld	r29, X
    3ac8:	17 97       	sbiw	r26, 0x07	; 7
    3aca:	18 96       	adiw	r26, 0x08	; 8
    3acc:	8d 91       	ld	r24, X+
    3ace:	9c 91       	ld	r25, X
    3ad0:	19 97       	sbiw	r26, 0x09	; 9
    3ad2:	9f 83       	std	Y+7, r25	; 0x07
    3ad4:	8e 83       	std	Y+6, r24	; 0x06
    3ad6:	18 96       	adiw	r26, 0x08	; 8
    3ad8:	cd 91       	ld	r28, X+
    3ada:	dc 91       	ld	r29, X
    3adc:	19 97       	sbiw	r26, 0x09	; 9
    3ade:	16 96       	adiw	r26, 0x06	; 6
    3ae0:	8d 91       	ld	r24, X+
    3ae2:	9c 91       	ld	r25, X
    3ae4:	17 97       	sbiw	r26, 0x07	; 7
    3ae6:	9d 83       	std	Y+5, r25	; 0x05
    3ae8:	8c 83       	std	Y+4, r24	; 0x04
    3aea:	81 81       	ldd	r24, Z+1	; 0x01
    3aec:	92 81       	ldd	r25, Z+2	; 0x02
    3aee:	9d 01       	movw	r18, r26
    3af0:	2e 5f       	subi	r18, 0xFE	; 254
    3af2:	3f 4f       	sbci	r19, 0xFF	; 255
    3af4:	82 17       	cp	r24, r18
    3af6:	93 07       	cpc	r25, r19
    3af8:	31 f4       	brne	.+12     	; 0x3b06 <xTaskGenericNotify+0x14e>
    3afa:	18 96       	adiw	r26, 0x08	; 8
    3afc:	8d 91       	ld	r24, X+
    3afe:	9c 91       	ld	r25, X
    3b00:	19 97       	sbiw	r26, 0x09	; 9
    3b02:	92 83       	std	Z+2, r25	; 0x02
    3b04:	81 83       	std	Z+1, r24	; 0x01
    3b06:	1d 96       	adiw	r26, 0x0d	; 13
    3b08:	1c 92       	st	X, r1
    3b0a:	1e 92       	st	-X, r1
    3b0c:	1c 97       	sbiw	r26, 0x0c	; 12
    3b0e:	80 81       	ld	r24, Z
    3b10:	81 50       	subi	r24, 0x01	; 1
    3b12:	80 83       	st	Z, r24
    3b14:	5a 96       	adiw	r26, 0x1a	; 26
    3b16:	ec 91       	ld	r30, X
    3b18:	5a 97       	sbiw	r26, 0x1a	; 26
    3b1a:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    3b1e:	8e 17       	cp	r24, r30
    3b20:	10 f4       	brcc	.+4      	; 0x3b26 <xTaskGenericNotify+0x16e>
    3b22:	e0 93 c5 13 	sts	0x13C5, r30	; 0x8013c5 <uxTopReadyPriority>
    3b26:	8b e0       	ldi	r24, 0x0B	; 11
    3b28:	8e 9f       	mul	r24, r30
    3b2a:	f0 01       	movw	r30, r0
    3b2c:	11 24       	eor	r1, r1
    3b2e:	e9 5f       	subi	r30, 0xF9	; 249
    3b30:	fb 4e       	sbci	r31, 0xEB	; 235
    3b32:	01 80       	ldd	r0, Z+1	; 0x01
    3b34:	f2 81       	ldd	r31, Z+2	; 0x02
    3b36:	e0 2d       	mov	r30, r0
    3b38:	17 96       	adiw	r26, 0x07	; 7
    3b3a:	fc 93       	st	X, r31
    3b3c:	ee 93       	st	-X, r30
    3b3e:	16 97       	sbiw	r26, 0x06	; 6
    3b40:	46 81       	ldd	r20, Z+6	; 0x06
    3b42:	57 81       	ldd	r21, Z+7	; 0x07
    3b44:	19 96       	adiw	r26, 0x09	; 9
    3b46:	5c 93       	st	X, r21
    3b48:	4e 93       	st	-X, r20
    3b4a:	18 97       	sbiw	r26, 0x08	; 8
    3b4c:	c6 81       	ldd	r28, Z+6	; 0x06
    3b4e:	d7 81       	ldd	r29, Z+7	; 0x07
    3b50:	3d 83       	std	Y+5, r19	; 0x05
    3b52:	2c 83       	std	Y+4, r18	; 0x04
    3b54:	37 83       	std	Z+7, r19	; 0x07
    3b56:	26 83       	std	Z+6, r18	; 0x06
    3b58:	5a 96       	adiw	r26, 0x1a	; 26
    3b5a:	ec 91       	ld	r30, X
    3b5c:	5a 97       	sbiw	r26, 0x1a	; 26
    3b5e:	8e 9f       	mul	r24, r30
    3b60:	f0 01       	movw	r30, r0
    3b62:	11 24       	eor	r1, r1
    3b64:	e9 5f       	subi	r30, 0xF9	; 249
    3b66:	fb 4e       	sbci	r31, 0xEB	; 235
    3b68:	1d 96       	adiw	r26, 0x0d	; 13
    3b6a:	fc 93       	st	X, r31
    3b6c:	ee 93       	st	-X, r30
    3b6e:	1c 97       	sbiw	r26, 0x0c	; 12
    3b70:	80 81       	ld	r24, Z
    3b72:	8f 5f       	subi	r24, 0xFF	; 255
    3b74:	80 83       	st	Z, r24
    3b76:	5a 96       	adiw	r26, 0x1a	; 26
    3b78:	9c 91       	ld	r25, X
    3b7a:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    3b7e:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3b82:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b84:	89 17       	cp	r24, r25
    3b86:	10 f4       	brcc	.+4      	; 0x3b8c <xTaskGenericNotify+0x1d4>
    3b88:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    3b8c:	0f 90       	pop	r0
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	80 2f       	mov	r24, r16
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	0f 91       	pop	r16
    3b98:	ff 90       	pop	r15
    3b9a:	ef 90       	pop	r14
    3b9c:	bf 90       	pop	r11
    3b9e:	af 90       	pop	r10
    3ba0:	9f 90       	pop	r9
    3ba2:	8f 90       	pop	r8
    3ba4:	08 95       	ret

00003ba6 <xTaskGenericNotifyFromISR>:
    3ba6:	8f 92       	push	r8
    3ba8:	9f 92       	push	r9
    3baa:	af 92       	push	r10
    3bac:	bf 92       	push	r11
    3bae:	cf 92       	push	r12
    3bb0:	df 92       	push	r13
    3bb2:	ef 92       	push	r14
    3bb4:	ff 92       	push	r15
    3bb6:	0f 93       	push	r16
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	e1 14       	cp	r14, r1
    3bc0:	f1 04       	cpc	r15, r1
    3bc2:	89 f0       	breq	.+34     	; 0x3be6 <xTaskGenericNotifyFromISR+0x40>
    3bc4:	e6 2f       	mov	r30, r22
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	ee 0f       	add	r30, r30
    3bca:	ff 1f       	adc	r31, r31
    3bcc:	ee 0f       	add	r30, r30
    3bce:	ff 1f       	adc	r31, r31
    3bd0:	e8 0f       	add	r30, r24
    3bd2:	f9 1f       	adc	r31, r25
    3bd4:	87 a4       	ldd	r8, Z+47	; 0x2f
    3bd6:	90 a8       	ldd	r9, Z+48	; 0x30
    3bd8:	a1 a8       	ldd	r10, Z+49	; 0x31
    3bda:	b2 a8       	ldd	r11, Z+50	; 0x32
    3bdc:	f7 01       	movw	r30, r14
    3bde:	80 82       	st	Z, r8
    3be0:	91 82       	std	Z+1, r9	; 0x01
    3be2:	a2 82       	std	Z+2, r10	; 0x02
    3be4:	b3 82       	std	Z+3, r11	; 0x03
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	fd 01       	movw	r30, r26
    3bea:	e6 0f       	add	r30, r22
    3bec:	f7 1f       	adc	r31, r23
    3bee:	93 a9       	ldd	r25, Z+51	; 0x33
    3bf0:	82 e0       	ldi	r24, 0x02	; 2
    3bf2:	83 ab       	std	Z+51, r24	; 0x33
    3bf4:	02 30       	cpi	r16, 0x02	; 2
    3bf6:	01 f1       	breq	.+64     	; 0x3c38 <xTaskGenericNotifyFromISR+0x92>
    3bf8:	18 f4       	brcc	.+6      	; 0x3c00 <xTaskGenericNotifyFromISR+0x5a>
    3bfa:	01 30       	cpi	r16, 0x01	; 1
    3bfc:	31 f0       	breq	.+12     	; 0x3c0a <xTaskGenericNotifyFromISR+0x64>
    3bfe:	4d c0       	rjmp	.+154    	; 0x3c9a <xTaskGenericNotifyFromISR+0xf4>
    3c00:	03 30       	cpi	r16, 0x03	; 3
    3c02:	79 f1       	breq	.+94     	; 0x3c62 <xTaskGenericNotifyFromISR+0xbc>
    3c04:	04 30       	cpi	r16, 0x04	; 4
    3c06:	d1 f1       	breq	.+116    	; 0x3c7c <xTaskGenericNotifyFromISR+0xd6>
    3c08:	48 c0       	rjmp	.+144    	; 0x3c9a <xTaskGenericNotifyFromISR+0xf4>
    3c0a:	66 0f       	add	r22, r22
    3c0c:	77 1f       	adc	r23, r23
    3c0e:	66 0f       	add	r22, r22
    3c10:	77 1f       	adc	r23, r23
    3c12:	fd 01       	movw	r30, r26
    3c14:	e6 0f       	add	r30, r22
    3c16:	f7 1f       	adc	r31, r23
    3c18:	87 a4       	ldd	r8, Z+47	; 0x2f
    3c1a:	90 a8       	ldd	r9, Z+48	; 0x30
    3c1c:	a1 a8       	ldd	r10, Z+49	; 0x31
    3c1e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3c20:	ba 01       	movw	r22, r20
    3c22:	a9 01       	movw	r20, r18
    3c24:	48 29       	or	r20, r8
    3c26:	59 29       	or	r21, r9
    3c28:	6a 29       	or	r22, r10
    3c2a:	7b 29       	or	r23, r11
    3c2c:	47 a7       	std	Z+47, r20	; 0x2f
    3c2e:	50 ab       	std	Z+48, r21	; 0x30
    3c30:	61 ab       	std	Z+49, r22	; 0x31
    3c32:	72 ab       	std	Z+50, r23	; 0x32
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	34 c0       	rjmp	.+104    	; 0x3ca0 <xTaskGenericNotifyFromISR+0xfa>
    3c38:	66 0f       	add	r22, r22
    3c3a:	77 1f       	adc	r23, r23
    3c3c:	66 0f       	add	r22, r22
    3c3e:	77 1f       	adc	r23, r23
    3c40:	fd 01       	movw	r30, r26
    3c42:	e6 0f       	add	r30, r22
    3c44:	f7 1f       	adc	r31, r23
    3c46:	47 a5       	ldd	r20, Z+47	; 0x2f
    3c48:	50 a9       	ldd	r21, Z+48	; 0x30
    3c4a:	61 a9       	ldd	r22, Z+49	; 0x31
    3c4c:	72 a9       	ldd	r23, Z+50	; 0x32
    3c4e:	4f 5f       	subi	r20, 0xFF	; 255
    3c50:	5f 4f       	sbci	r21, 0xFF	; 255
    3c52:	6f 4f       	sbci	r22, 0xFF	; 255
    3c54:	7f 4f       	sbci	r23, 0xFF	; 255
    3c56:	47 a7       	std	Z+47, r20	; 0x2f
    3c58:	50 ab       	std	Z+48, r21	; 0x30
    3c5a:	61 ab       	std	Z+49, r22	; 0x31
    3c5c:	72 ab       	std	Z+50, r23	; 0x32
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	1f c0       	rjmp	.+62     	; 0x3ca0 <xTaskGenericNotifyFromISR+0xfa>
    3c62:	66 0f       	add	r22, r22
    3c64:	77 1f       	adc	r23, r23
    3c66:	66 0f       	add	r22, r22
    3c68:	77 1f       	adc	r23, r23
    3c6a:	fd 01       	movw	r30, r26
    3c6c:	e6 0f       	add	r30, r22
    3c6e:	f7 1f       	adc	r31, r23
    3c70:	27 a7       	std	Z+47, r18	; 0x2f
    3c72:	30 ab       	std	Z+48, r19	; 0x30
    3c74:	41 ab       	std	Z+49, r20	; 0x31
    3c76:	52 ab       	std	Z+50, r21	; 0x32
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	12 c0       	rjmp	.+36     	; 0x3ca0 <xTaskGenericNotifyFromISR+0xfa>
    3c7c:	92 30       	cpi	r25, 0x02	; 2
    3c7e:	79 f0       	breq	.+30     	; 0x3c9e <xTaskGenericNotifyFromISR+0xf8>
    3c80:	66 0f       	add	r22, r22
    3c82:	77 1f       	adc	r23, r23
    3c84:	66 0f       	add	r22, r22
    3c86:	77 1f       	adc	r23, r23
    3c88:	fd 01       	movw	r30, r26
    3c8a:	e6 0f       	add	r30, r22
    3c8c:	f7 1f       	adc	r31, r23
    3c8e:	27 a7       	std	Z+47, r18	; 0x2f
    3c90:	30 ab       	std	Z+48, r19	; 0x30
    3c92:	41 ab       	std	Z+49, r20	; 0x31
    3c94:	52 ab       	std	Z+50, r21	; 0x32
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	03 c0       	rjmp	.+6      	; 0x3ca0 <xTaskGenericNotifyFromISR+0xfa>
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	01 c0       	rjmp	.+2      	; 0x3ca0 <xTaskGenericNotifyFromISR+0xfa>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	91 30       	cpi	r25, 0x01	; 1
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <xTaskGenericNotifyFromISR+0x100>
    3ca4:	96 c0       	rjmp	.+300    	; 0x3dd2 <xTaskGenericNotifyFromISR+0x22c>
    3ca6:	90 91 b6 13 	lds	r25, 0x13B6	; 0x8013b6 <uxSchedulerSuspended>
    3caa:	91 11       	cpse	r25, r1
    3cac:	5f c0       	rjmp	.+190    	; 0x3d6c <xTaskGenericNotifyFromISR+0x1c6>
    3cae:	1c 96       	adiw	r26, 0x0c	; 12
    3cb0:	ed 91       	ld	r30, X+
    3cb2:	fc 91       	ld	r31, X
    3cb4:	1d 97       	sbiw	r26, 0x0d	; 13
    3cb6:	16 96       	adiw	r26, 0x06	; 6
    3cb8:	cd 91       	ld	r28, X+
    3cba:	dc 91       	ld	r29, X
    3cbc:	17 97       	sbiw	r26, 0x07	; 7
    3cbe:	18 96       	adiw	r26, 0x08	; 8
    3cc0:	2d 91       	ld	r18, X+
    3cc2:	3c 91       	ld	r19, X
    3cc4:	19 97       	sbiw	r26, 0x09	; 9
    3cc6:	3f 83       	std	Y+7, r19	; 0x07
    3cc8:	2e 83       	std	Y+6, r18	; 0x06
    3cca:	18 96       	adiw	r26, 0x08	; 8
    3ccc:	cd 91       	ld	r28, X+
    3cce:	dc 91       	ld	r29, X
    3cd0:	19 97       	sbiw	r26, 0x09	; 9
    3cd2:	16 96       	adiw	r26, 0x06	; 6
    3cd4:	2d 91       	ld	r18, X+
    3cd6:	3c 91       	ld	r19, X
    3cd8:	17 97       	sbiw	r26, 0x07	; 7
    3cda:	3d 83       	std	Y+5, r19	; 0x05
    3cdc:	2c 83       	std	Y+4, r18	; 0x04
    3cde:	41 81       	ldd	r20, Z+1	; 0x01
    3ce0:	52 81       	ldd	r21, Z+2	; 0x02
    3ce2:	9d 01       	movw	r18, r26
    3ce4:	2e 5f       	subi	r18, 0xFE	; 254
    3ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce8:	42 17       	cp	r20, r18
    3cea:	53 07       	cpc	r21, r19
    3cec:	31 f4       	brne	.+12     	; 0x3cfa <xTaskGenericNotifyFromISR+0x154>
    3cee:	18 96       	adiw	r26, 0x08	; 8
    3cf0:	4d 91       	ld	r20, X+
    3cf2:	5c 91       	ld	r21, X
    3cf4:	19 97       	sbiw	r26, 0x09	; 9
    3cf6:	52 83       	std	Z+2, r21	; 0x02
    3cf8:	41 83       	std	Z+1, r20	; 0x01
    3cfa:	1d 96       	adiw	r26, 0x0d	; 13
    3cfc:	1c 92       	st	X, r1
    3cfe:	1e 92       	st	-X, r1
    3d00:	1c 97       	sbiw	r26, 0x0c	; 12
    3d02:	90 81       	ld	r25, Z
    3d04:	91 50       	subi	r25, 0x01	; 1
    3d06:	90 83       	st	Z, r25
    3d08:	5a 96       	adiw	r26, 0x1a	; 26
    3d0a:	ec 91       	ld	r30, X
    3d0c:	5a 97       	sbiw	r26, 0x1a	; 26
    3d0e:	90 91 c5 13 	lds	r25, 0x13C5	; 0x8013c5 <uxTopReadyPriority>
    3d12:	9e 17       	cp	r25, r30
    3d14:	10 f4       	brcc	.+4      	; 0x3d1a <xTaskGenericNotifyFromISR+0x174>
    3d16:	e0 93 c5 13 	sts	0x13C5, r30	; 0x8013c5 <uxTopReadyPriority>
    3d1a:	9b e0       	ldi	r25, 0x0B	; 11
    3d1c:	9e 9f       	mul	r25, r30
    3d1e:	f0 01       	movw	r30, r0
    3d20:	11 24       	eor	r1, r1
    3d22:	e9 5f       	subi	r30, 0xF9	; 249
    3d24:	fb 4e       	sbci	r31, 0xEB	; 235
    3d26:	01 80       	ldd	r0, Z+1	; 0x01
    3d28:	f2 81       	ldd	r31, Z+2	; 0x02
    3d2a:	e0 2d       	mov	r30, r0
    3d2c:	17 96       	adiw	r26, 0x07	; 7
    3d2e:	fc 93       	st	X, r31
    3d30:	ee 93       	st	-X, r30
    3d32:	16 97       	sbiw	r26, 0x06	; 6
    3d34:	46 81       	ldd	r20, Z+6	; 0x06
    3d36:	57 81       	ldd	r21, Z+7	; 0x07
    3d38:	19 96       	adiw	r26, 0x09	; 9
    3d3a:	5c 93       	st	X, r21
    3d3c:	4e 93       	st	-X, r20
    3d3e:	18 97       	sbiw	r26, 0x08	; 8
    3d40:	c6 81       	ldd	r28, Z+6	; 0x06
    3d42:	d7 81       	ldd	r29, Z+7	; 0x07
    3d44:	3d 83       	std	Y+5, r19	; 0x05
    3d46:	2c 83       	std	Y+4, r18	; 0x04
    3d48:	37 83       	std	Z+7, r19	; 0x07
    3d4a:	26 83       	std	Z+6, r18	; 0x06
    3d4c:	5a 96       	adiw	r26, 0x1a	; 26
    3d4e:	ec 91       	ld	r30, X
    3d50:	5a 97       	sbiw	r26, 0x1a	; 26
    3d52:	9e 9f       	mul	r25, r30
    3d54:	f0 01       	movw	r30, r0
    3d56:	11 24       	eor	r1, r1
    3d58:	e9 5f       	subi	r30, 0xF9	; 249
    3d5a:	fb 4e       	sbci	r31, 0xEB	; 235
    3d5c:	1d 96       	adiw	r26, 0x0d	; 13
    3d5e:	fc 93       	st	X, r31
    3d60:	ee 93       	st	-X, r30
    3d62:	1c 97       	sbiw	r26, 0x0c	; 12
    3d64:	90 81       	ld	r25, Z
    3d66:	9f 5f       	subi	r25, 0xFF	; 255
    3d68:	90 83       	st	Z, r25
    3d6a:	21 c0       	rjmp	.+66     	; 0x3dae <xTaskGenericNotifyFromISR+0x208>
    3d6c:	62 ee       	ldi	r22, 0xE2	; 226
    3d6e:	73 e1       	ldi	r23, 0x13	; 19
    3d70:	fb 01       	movw	r30, r22
    3d72:	c1 81       	ldd	r28, Z+1	; 0x01
    3d74:	d2 81       	ldd	r29, Z+2	; 0x02
    3d76:	53 96       	adiw	r26, 0x13	; 19
    3d78:	dc 93       	st	X, r29
    3d7a:	ce 93       	st	-X, r28
    3d7c:	52 97       	sbiw	r26, 0x12	; 18
    3d7e:	2e 81       	ldd	r18, Y+6	; 0x06
    3d80:	3f 81       	ldd	r19, Y+7	; 0x07
    3d82:	55 96       	adiw	r26, 0x15	; 21
    3d84:	3c 93       	st	X, r19
    3d86:	2e 93       	st	-X, r18
    3d88:	54 97       	sbiw	r26, 0x14	; 20
    3d8a:	4e 81       	ldd	r20, Y+6	; 0x06
    3d8c:	5f 81       	ldd	r21, Y+7	; 0x07
    3d8e:	9d 01       	movw	r18, r26
    3d90:	22 5f       	subi	r18, 0xF2	; 242
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	fa 01       	movw	r30, r20
    3d96:	35 83       	std	Z+5, r19	; 0x05
    3d98:	24 83       	std	Z+4, r18	; 0x04
    3d9a:	3f 83       	std	Y+7, r19	; 0x07
    3d9c:	2e 83       	std	Y+6, r18	; 0x06
    3d9e:	59 96       	adiw	r26, 0x19	; 25
    3da0:	7c 93       	st	X, r23
    3da2:	6e 93       	st	-X, r22
    3da4:	58 97       	sbiw	r26, 0x18	; 24
    3da6:	fb 01       	movw	r30, r22
    3da8:	90 81       	ld	r25, Z
    3daa:	9f 5f       	subi	r25, 0xFF	; 255
    3dac:	90 83       	st	Z, r25
    3dae:	5a 96       	adiw	r26, 0x1a	; 26
    3db0:	2c 91       	ld	r18, X
    3db2:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxCurrentTCB>
    3db6:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxCurrentTCB+0x1>
    3dba:	92 8d       	ldd	r25, Z+26	; 0x1a
    3dbc:	92 17       	cp	r25, r18
    3dbe:	48 f4       	brcc	.+18     	; 0x3dd2 <xTaskGenericNotifyFromISR+0x22c>
    3dc0:	c1 14       	cp	r12, r1
    3dc2:	d1 04       	cpc	r13, r1
    3dc4:	19 f0       	breq	.+6      	; 0x3dcc <xTaskGenericNotifyFromISR+0x226>
    3dc6:	91 e0       	ldi	r25, 0x01	; 1
    3dc8:	f6 01       	movw	r30, r12
    3dca:	90 83       	st	Z, r25
    3dcc:	91 e0       	ldi	r25, 0x01	; 1
    3dce:	90 93 bf 13 	sts	0x13BF, r25	; 0x8013bf <xYieldPending>
    3dd2:	df 91       	pop	r29
    3dd4:	cf 91       	pop	r28
    3dd6:	0f 91       	pop	r16
    3dd8:	ff 90       	pop	r15
    3dda:	ef 90       	pop	r14
    3ddc:	df 90       	pop	r13
    3dde:	cf 90       	pop	r12
    3de0:	bf 90       	pop	r11
    3de2:	af 90       	pop	r10
    3de4:	9f 90       	pop	r9
    3de6:	8f 90       	pop	r8
    3de8:	08 95       	ret

00003dea <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	21 f4       	brne	.+8      	; 0x3df6 <xTaskGenericNotifyStateClear+0xc>
    3dee:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxCurrentTCB>
    3df2:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	fc 01       	movw	r30, r24
    3e00:	e6 0f       	add	r30, r22
    3e02:	f7 1f       	adc	r31, r23
    3e04:	23 a9       	ldd	r18, Z+51	; 0x33
    3e06:	22 30       	cpi	r18, 0x02	; 2
    3e08:	31 f4       	brne	.+12     	; 0x3e16 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	e6 0f       	add	r30, r22
    3e0e:	f7 1f       	adc	r31, r23
    3e10:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	01 c0       	rjmp	.+2      	; 0x3e18 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3e16:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3e18:	0f 90       	pop	r0
    3e1a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3e1c:	08 95       	ret

00003e1e <prvGetNextExpireTime>:
    3e1e:	dc 01       	movw	r26, r24
    3e20:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <pxCurrentTimerList>
    3e24:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <pxCurrentTimerList+0x1>
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 e0       	ldi	r25, 0x01	; 1
    3e2c:	81 11       	cpse	r24, r1
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	9c 93       	st	X, r25
    3e32:	91 11       	cpse	r25, r1
    3e34:	08 c0       	rjmp	.+16     	; 0x3e46 <prvGetNextExpireTime+0x28>
    3e36:	07 80       	ldd	r0, Z+7	; 0x07
    3e38:	f0 85       	ldd	r31, Z+8	; 0x08
    3e3a:	e0 2d       	mov	r30, r0
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	82 81       	ldd	r24, Z+2	; 0x02
    3e42:	93 81       	ldd	r25, Z+3	; 0x03
    3e44:	08 95       	ret
    3e46:	60 e0       	ldi	r22, 0x00	; 0
    3e48:	70 e0       	ldi	r23, 0x00	; 0
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	08 95       	ret

00003e4e <prvInsertTimerInActiveList>:
    3e4e:	cf 92       	push	r12
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	42 83       	std	Z+2, r20	; 0x02
    3e5e:	53 83       	std	Z+3, r21	; 0x03
    3e60:	64 83       	std	Z+4, r22	; 0x04
    3e62:	75 83       	std	Z+5, r23	; 0x05
    3e64:	93 87       	std	Z+11, r25	; 0x0b
    3e66:	82 87       	std	Z+10, r24	; 0x0a
    3e68:	04 17       	cp	r16, r20
    3e6a:	15 07       	cpc	r17, r21
    3e6c:	26 07       	cpc	r18, r22
    3e6e:	37 07       	cpc	r19, r23
    3e70:	c0 f0       	brcs	.+48     	; 0x3ea2 <prvInsertTimerInActiveList+0x54>
    3e72:	0c 19       	sub	r16, r12
    3e74:	1d 09       	sbc	r17, r13
    3e76:	2e 09       	sbc	r18, r14
    3e78:	3f 09       	sbc	r19, r15
    3e7a:	86 85       	ldd	r24, Z+14	; 0x0e
    3e7c:	97 85       	ldd	r25, Z+15	; 0x0f
    3e7e:	a0 89       	ldd	r26, Z+16	; 0x10
    3e80:	b1 89       	ldd	r27, Z+17	; 0x11
    3e82:	08 17       	cp	r16, r24
    3e84:	19 07       	cpc	r17, r25
    3e86:	2a 07       	cpc	r18, r26
    3e88:	3b 07       	cpc	r19, r27
    3e8a:	00 f5       	brcc	.+64     	; 0x3ecc <prvInsertTimerInActiveList+0x7e>
    3e8c:	bf 01       	movw	r22, r30
    3e8e:	6e 5f       	subi	r22, 0xFE	; 254
    3e90:	7f 4f       	sbci	r23, 0xFF	; 255
    3e92:	80 91 7f 14 	lds	r24, 0x147F	; 0x80147f <pxOverflowTimerList>
    3e96:	90 91 80 14 	lds	r25, 0x1480	; 0x801480 <pxOverflowTimerList+0x1>
    3e9a:	0e 94 39 0a 	call	0x1472	; 0x1472 <vListInsert>
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	18 c0       	rjmp	.+48     	; 0x3ed2 <prvInsertTimerInActiveList+0x84>
    3ea2:	0c 15       	cp	r16, r12
    3ea4:	1d 05       	cpc	r17, r13
    3ea6:	2e 05       	cpc	r18, r14
    3ea8:	3f 05       	cpc	r19, r15
    3eaa:	28 f4       	brcc	.+10     	; 0x3eb6 <prvInsertTimerInActiveList+0x68>
    3eac:	4c 15       	cp	r20, r12
    3eae:	5d 05       	cpc	r21, r13
    3eb0:	6e 05       	cpc	r22, r14
    3eb2:	7f 05       	cpc	r23, r15
    3eb4:	68 f4       	brcc	.+26     	; 0x3ed0 <prvInsertTimerInActiveList+0x82>
    3eb6:	bf 01       	movw	r22, r30
    3eb8:	6e 5f       	subi	r22, 0xFE	; 254
    3eba:	7f 4f       	sbci	r23, 0xFF	; 255
    3ebc:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <pxCurrentTimerList>
    3ec0:	90 91 82 14 	lds	r25, 0x1482	; 0x801482 <pxCurrentTimerList+0x1>
    3ec4:	0e 94 39 0a 	call	0x1472	; 0x1472 <vListInsert>
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	03 c0       	rjmp	.+6      	; 0x3ed2 <prvInsertTimerInActiveList+0x84>
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	01 c0       	rjmp	.+2      	; 0x3ed2 <prvInsertTimerInActiveList+0x84>
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	1f 91       	pop	r17
    3ed4:	0f 91       	pop	r16
    3ed6:	ff 90       	pop	r15
    3ed8:	ef 90       	pop	r14
    3eda:	df 90       	pop	r13
    3edc:	cf 90       	pop	r12
    3ede:	08 95       	ret

00003ee0 <prvCheckForValidListAndQueue>:
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	0f 92       	push	r0
    3ee6:	80 91 7d 14 	lds	r24, 0x147D	; 0x80147d <xTimerQueue>
    3eea:	90 91 7e 14 	lds	r25, 0x147E	; 0x80147e <xTimerQueue+0x1>
    3eee:	89 2b       	or	r24, r25
    3ef0:	e9 f4       	brne	.+58     	; 0x3f2c <prvCheckForValidListAndQueue+0x4c>
    3ef2:	8e e8       	ldi	r24, 0x8E	; 142
    3ef4:	94 e1       	ldi	r25, 0x14	; 20
    3ef6:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    3efa:	83 e8       	ldi	r24, 0x83	; 131
    3efc:	94 e1       	ldi	r25, 0x14	; 20
    3efe:	0e 94 24 0a 	call	0x1448	; 0x1448 <vListInitialise>
    3f02:	8e e8       	ldi	r24, 0x8E	; 142
    3f04:	94 e1       	ldi	r25, 0x14	; 20
    3f06:	90 93 82 14 	sts	0x1482, r25	; 0x801482 <pxCurrentTimerList+0x1>
    3f0a:	80 93 81 14 	sts	0x1481, r24	; 0x801481 <pxCurrentTimerList>
    3f0e:	83 e8       	ldi	r24, 0x83	; 131
    3f10:	94 e1       	ldi	r25, 0x14	; 20
    3f12:	90 93 80 14 	sts	0x1480, r25	; 0x801480 <pxOverflowTimerList+0x1>
    3f16:	80 93 7f 14 	sts	0x147F, r24	; 0x80147f <pxOverflowTimerList>
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	67 e0       	ldi	r22, 0x07	; 7
    3f1e:	8a e0       	ldi	r24, 0x0A	; 10
    3f20:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xQueueGenericCreate>
    3f24:	90 93 7e 14 	sts	0x147E, r25	; 0x80147e <xTimerQueue+0x1>
    3f28:	80 93 7d 14 	sts	0x147D, r24	; 0x80147d <xTimerQueue>
    3f2c:	0f 90       	pop	r0
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	08 95       	ret

00003f32 <xTimerCreateTimerTask>:
    3f32:	ef 92       	push	r14
    3f34:	ff 92       	push	r15
    3f36:	0f 93       	push	r16
    3f38:	d3 df       	rcall	.-90     	; 0x3ee0 <prvCheckForValidListAndQueue>
    3f3a:	80 91 7d 14 	lds	r24, 0x147D	; 0x80147d <xTimerQueue>
    3f3e:	90 91 7e 14 	lds	r25, 0x147E	; 0x80147e <xTimerQueue+0x1>
    3f42:	89 2b       	or	r24, r25
    3f44:	91 f0       	breq	.+36     	; 0x3f6a <xTimerCreateTimerTask+0x38>
    3f46:	0f 2e       	mov	r0, r31
    3f48:	fb e7       	ldi	r31, 0x7B	; 123
    3f4a:	ef 2e       	mov	r14, r31
    3f4c:	f4 e1       	ldi	r31, 0x14	; 20
    3f4e:	ff 2e       	mov	r15, r31
    3f50:	f0 2d       	mov	r31, r0
    3f52:	03 e0       	ldi	r16, 0x03	; 3
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 ec       	ldi	r20, 0xC0	; 192
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	63 ed       	ldi	r22, 0xD3	; 211
    3f5e:	74 e0       	ldi	r23, 0x04	; 4
    3f60:	89 e5       	ldi	r24, 0x59	; 89
    3f62:	91 e0       	ldi	r25, 0x01	; 1
    3f64:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskCreate>
    3f68:	01 c0       	rjmp	.+2      	; 0x3f6c <xTimerCreateTimerTask+0x3a>
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	0f 91       	pop	r16
    3f6e:	ff 90       	pop	r15
    3f70:	ef 90       	pop	r14
    3f72:	08 95       	ret

00003f74 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3f74:	8f 92       	push	r8
    3f76:	9f 92       	push	r9
    3f78:	af 92       	push	r10
    3f7a:	bf 92       	push	r11
    3f7c:	cf 92       	push	r12
    3f7e:	df 92       	push	r13
    3f80:	ef 92       	push	r14
    3f82:	ff 92       	push	r15
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
    3f90:	27 97       	sbiw	r28, 0x07	; 7
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3f9c:	e0 91 7d 14 	lds	r30, 0x147D	; 0x80147d <xTimerQueue>
    3fa0:	f0 91 7e 14 	lds	r31, 0x147E	; 0x80147e <xTimerQueue+0x1>
    3fa4:	30 97       	sbiw	r30, 0x00	; 0
    3fa6:	81 f1       	breq	.+96     	; 0x4008 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3fa8:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3faa:	2a 83       	std	Y+2, r18	; 0x02
    3fac:	3b 83       	std	Y+3, r19	; 0x03
    3fae:	4c 83       	std	Y+4, r20	; 0x04
    3fb0:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3fb2:	9f 83       	std	Y+7, r25	; 0x07
    3fb4:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3fb6:	66 30       	cpi	r22, 0x06	; 6
    3fb8:	f4 f4       	brge	.+60     	; 0x3ff6 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3fba:	c3 da       	rcall	.-2682   	; 0x3542 <xTaskGetSchedulerState>
    3fbc:	82 30       	cpi	r24, 0x02	; 2
    3fbe:	69 f4       	brne	.+26     	; 0x3fda <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3fc0:	00 e0       	ldi	r16, 0x00	; 0
    3fc2:	a7 01       	movw	r20, r14
    3fc4:	96 01       	movw	r18, r12
    3fc6:	be 01       	movw	r22, r28
    3fc8:	6f 5f       	subi	r22, 0xFF	; 255
    3fca:	7f 4f       	sbci	r23, 0xFF	; 255
    3fcc:	80 91 7d 14 	lds	r24, 0x147D	; 0x80147d <xTimerQueue>
    3fd0:	90 91 7e 14 	lds	r25, 0x147E	; 0x80147e <xTimerQueue+0x1>
    3fd4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
    3fd8:	18 c0       	rjmp	.+48     	; 0x400a <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3fda:	00 e0       	ldi	r16, 0x00	; 0
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	a9 01       	movw	r20, r18
    3fe2:	be 01       	movw	r22, r28
    3fe4:	6f 5f       	subi	r22, 0xFF	; 255
    3fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe8:	80 91 7d 14 	lds	r24, 0x147D	; 0x80147d <xTimerQueue>
    3fec:	90 91 7e 14 	lds	r25, 0x147E	; 0x80147e <xTimerQueue+0x1>
    3ff0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <xQueueGenericSend>
    3ff4:	0a c0       	rjmp	.+20     	; 0x400a <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	a8 01       	movw	r20, r16
    3ffa:	be 01       	movw	r22, r28
    3ffc:	6f 5f       	subi	r22, 0xFF	; 255
    3ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    4000:	cf 01       	movw	r24, r30
    4002:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xQueueGenericSendFromISR>
    4006:	01 c0       	rjmp	.+2      	; 0x400a <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    4008:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    400a:	27 96       	adiw	r28, 0x07	; 7
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	f8 94       	cli
    4010:	de bf       	out	0x3e, r29	; 62
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	cd bf       	out	0x3d, r28	; 61
    4016:	df 91       	pop	r29
    4018:	cf 91       	pop	r28
    401a:	1f 91       	pop	r17
    401c:	0f 91       	pop	r16
    401e:	ff 90       	pop	r15
    4020:	ef 90       	pop	r14
    4022:	df 90       	pop	r13
    4024:	cf 90       	pop	r12
    4026:	bf 90       	pop	r11
    4028:	af 90       	pop	r10
    402a:	9f 90       	pop	r9
    402c:	8f 90       	pop	r8
    402e:	08 95       	ret

00004030 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    4030:	8f 92       	push	r8
    4032:	9f 92       	push	r9
    4034:	af 92       	push	r10
    4036:	bf 92       	push	r11
    4038:	cf 92       	push	r12
    403a:	df 92       	push	r13
    403c:	ef 92       	push	r14
    403e:	ff 92       	push	r15
    4040:	0f 93       	push	r16
    4042:	1f 93       	push	r17
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4048:	3b c0       	rjmp	.+118    	; 0x40c0 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    404a:	07 80       	ldd	r0, Z+7	; 0x07
    404c:	f0 85       	ldd	r31, Z+8	; 0x08
    404e:	e0 2d       	mov	r30, r0
    4050:	80 80       	ld	r8, Z
    4052:	91 80       	ldd	r9, Z+1	; 0x01
    4054:	a2 80       	ldd	r10, Z+2	; 0x02
    4056:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4058:	c0 85       	ldd	r28, Z+8	; 0x08
    405a:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    405c:	8e 01       	movw	r16, r28
    405e:	0e 5f       	subi	r16, 0xFE	; 254
    4060:	1f 4f       	sbci	r17, 0xFF	; 255
    4062:	c8 01       	movw	r24, r16
    4064:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4068:	ec 89       	ldd	r30, Y+20	; 0x14
    406a:	fd 89       	ldd	r31, Y+21	; 0x15
    406c:	ce 01       	movw	r24, r28
    406e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4070:	8e 89       	ldd	r24, Y+22	; 0x16
    4072:	82 ff       	sbrs	r24, 2
    4074:	25 c0       	rjmp	.+74     	; 0x40c0 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4076:	8e 85       	ldd	r24, Y+14	; 0x0e
    4078:	9f 85       	ldd	r25, Y+15	; 0x0f
    407a:	a8 89       	ldd	r26, Y+16	; 0x10
    407c:	b9 89       	ldd	r27, Y+17	; 0x11
    407e:	88 0d       	add	r24, r8
    4080:	99 1d       	adc	r25, r9
    4082:	aa 1d       	adc	r26, r10
    4084:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    4086:	88 16       	cp	r8, r24
    4088:	99 06       	cpc	r9, r25
    408a:	aa 06       	cpc	r10, r26
    408c:	bb 06       	cpc	r11, r27
    408e:	70 f4       	brcc	.+28     	; 0x40ac <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4090:	8a 83       	std	Y+2, r24	; 0x02
    4092:	9b 83       	std	Y+3, r25	; 0x03
    4094:	ac 83       	std	Y+4, r26	; 0x04
    4096:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4098:	db 87       	std	Y+11, r29	; 0x0b
    409a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    409c:	b8 01       	movw	r22, r16
    409e:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <pxCurrentTimerList>
    40a2:	90 91 82 14 	lds	r25, 0x1482	; 0x801482 <pxCurrentTimerList+0x1>
    40a6:	0e 94 39 0a 	call	0x1472	; 0x1472 <vListInsert>
    40aa:	0a c0       	rjmp	.+20     	; 0x40c0 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    40ac:	c1 2c       	mov	r12, r1
    40ae:	d1 2c       	mov	r13, r1
    40b0:	76 01       	movw	r14, r12
    40b2:	00 e0       	ldi	r16, 0x00	; 0
    40b4:	10 e0       	ldi	r17, 0x00	; 0
    40b6:	a5 01       	movw	r20, r10
    40b8:	94 01       	movw	r18, r8
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	ce 01       	movw	r24, r28
    40be:	5a df       	rcall	.-332    	; 0x3f74 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    40c0:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <pxCurrentTimerList>
    40c4:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <pxCurrentTimerList+0x1>
    40c8:	80 81       	ld	r24, Z
    40ca:	81 11       	cpse	r24, r1
    40cc:	be cf       	rjmp	.-132    	; 0x404a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    40ce:	80 91 7f 14 	lds	r24, 0x147F	; 0x80147f <pxOverflowTimerList>
    40d2:	90 91 80 14 	lds	r25, 0x1480	; 0x801480 <pxOverflowTimerList+0x1>
    40d6:	90 93 82 14 	sts	0x1482, r25	; 0x801482 <pxCurrentTimerList+0x1>
    40da:	80 93 81 14 	sts	0x1481, r24	; 0x801481 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    40de:	f0 93 80 14 	sts	0x1480, r31	; 0x801480 <pxOverflowTimerList+0x1>
    40e2:	e0 93 7f 14 	sts	0x147F, r30	; 0x80147f <pxOverflowTimerList>
    }
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	ff 90       	pop	r15
    40f0:	ef 90       	pop	r14
    40f2:	df 90       	pop	r13
    40f4:	cf 90       	pop	r12
    40f6:	bf 90       	pop	r11
    40f8:	af 90       	pop	r10
    40fa:	9f 90       	pop	r9
    40fc:	8f 90       	pop	r8
    40fe:	08 95       	ret

00004100 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    4100:	cf 92       	push	r12
    4102:	df 92       	push	r13
    4104:	ef 92       	push	r14
    4106:	ff 92       	push	r15
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    410e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <xTaskGetTickCount>
    4112:	6b 01       	movw	r12, r22
    4114:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    4116:	80 91 77 14 	lds	r24, 0x1477	; 0x801477 <xLastTime.2436>
    411a:	90 91 78 14 	lds	r25, 0x1478	; 0x801478 <xLastTime.2436+0x1>
    411e:	a0 91 79 14 	lds	r26, 0x1479	; 0x801479 <xLastTime.2436+0x2>
    4122:	b0 91 7a 14 	lds	r27, 0x147A	; 0x80147a <xLastTime.2436+0x3>
    4126:	c8 16       	cp	r12, r24
    4128:	d9 06       	cpc	r13, r25
    412a:	ea 06       	cpc	r14, r26
    412c:	fb 06       	cpc	r15, r27
    412e:	20 f4       	brcc	.+8      	; 0x4138 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    4130:	7f df       	rcall	.-258    	; 0x4030 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	88 83       	st	Y, r24
    4136:	01 c0       	rjmp	.+2      	; 0x413a <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    4138:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    413a:	c0 92 77 14 	sts	0x1477, r12	; 0x801477 <xLastTime.2436>
    413e:	d0 92 78 14 	sts	0x1478, r13	; 0x801478 <xLastTime.2436+0x1>
    4142:	e0 92 79 14 	sts	0x1479, r14	; 0x801479 <xLastTime.2436+0x2>
    4146:	f0 92 7a 14 	sts	0x147A, r15	; 0x80147a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    414a:	c7 01       	movw	r24, r14
    414c:	b6 01       	movw	r22, r12
    414e:	df 91       	pop	r29
    4150:	cf 91       	pop	r28
    4152:	ff 90       	pop	r15
    4154:	ef 90       	pop	r14
    4156:	df 90       	pop	r13
    4158:	cf 90       	pop	r12
    415a:	08 95       	ret

0000415c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    415c:	4f 92       	push	r4
    415e:	5f 92       	push	r5
    4160:	6f 92       	push	r6
    4162:	7f 92       	push	r7
    4164:	8f 92       	push	r8
    4166:	9f 92       	push	r9
    4168:	af 92       	push	r10
    416a:	bf 92       	push	r11
    416c:	cf 92       	push	r12
    416e:	df 92       	push	r13
    4170:	ef 92       	push	r14
    4172:	ff 92       	push	r15
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	4b 01       	movw	r8, r22
    417e:	5c 01       	movw	r10, r24
    4180:	29 01       	movw	r4, r18
    4182:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4184:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <pxCurrentTimerList>
    4188:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <pxCurrentTimerList+0x1>
    418c:	07 80       	ldd	r0, Z+7	; 0x07
    418e:	f0 85       	ldd	r31, Z+8	; 0x08
    4190:	e0 2d       	mov	r30, r0
    4192:	c0 85       	ldd	r28, Z+8	; 0x08
    4194:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4196:	ce 01       	movw	r24, r28
    4198:	02 96       	adiw	r24, 0x02	; 2
    419a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    419e:	8e 89       	ldd	r24, Y+22	; 0x16
    41a0:	82 ff       	sbrs	r24, 2
    41a2:	1b c0       	rjmp	.+54     	; 0x41da <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    41a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    41a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    41a8:	68 89       	ldd	r22, Y+16	; 0x10
    41aa:	79 89       	ldd	r23, Y+17	; 0x11
    41ac:	48 0d       	add	r20, r8
    41ae:	59 1d       	adc	r21, r9
    41b0:	6a 1d       	adc	r22, r10
    41b2:	7b 1d       	adc	r23, r11
    41b4:	75 01       	movw	r14, r10
    41b6:	64 01       	movw	r12, r8
    41b8:	93 01       	movw	r18, r6
    41ba:	82 01       	movw	r16, r4
    41bc:	ce 01       	movw	r24, r28
    41be:	47 de       	rcall	.-882    	; 0x3e4e <prvInsertTimerInActiveList>
    41c0:	88 23       	and	r24, r24
    41c2:	69 f0       	breq	.+26     	; 0x41de <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    41c4:	c1 2c       	mov	r12, r1
    41c6:	d1 2c       	mov	r13, r1
    41c8:	76 01       	movw	r14, r12
    41ca:	00 e0       	ldi	r16, 0x00	; 0
    41cc:	10 e0       	ldi	r17, 0x00	; 0
    41ce:	a5 01       	movw	r20, r10
    41d0:	94 01       	movw	r18, r8
    41d2:	60 e0       	ldi	r22, 0x00	; 0
    41d4:	ce 01       	movw	r24, r28
    41d6:	ce de       	rcall	.-612    	; 0x3f74 <xTimerGenericCommand>
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    41da:	8e 7f       	andi	r24, 0xFE	; 254
    41dc:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    41de:	ec 89       	ldd	r30, Y+20	; 0x14
    41e0:	fd 89       	ldd	r31, Y+21	; 0x15
    41e2:	ce 01       	movw	r24, r28
    41e4:	19 95       	eicall
    }
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	ff 90       	pop	r15
    41f0:	ef 90       	pop	r14
    41f2:	df 90       	pop	r13
    41f4:	cf 90       	pop	r12
    41f6:	bf 90       	pop	r11
    41f8:	af 90       	pop	r10
    41fa:	9f 90       	pop	r9
    41fc:	8f 90       	pop	r8
    41fe:	7f 90       	pop	r7
    4200:	6f 90       	pop	r6
    4202:	5f 90       	pop	r5
    4204:	4f 90       	pop	r4
    4206:	08 95       	ret

00004208 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    4208:	8f 92       	push	r8
    420a:	9f 92       	push	r9
    420c:	af 92       	push	r10
    420e:	bf 92       	push	r11
    4210:	cf 92       	push	r12
    4212:	df 92       	push	r13
    4214:	ef 92       	push	r14
    4216:	ff 92       	push	r15
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	df 93       	push	r29
    421e:	1f 92       	push	r1
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
    4224:	6b 01       	movw	r12, r22
    4226:	7c 01       	movw	r14, r24
    4228:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    422a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    422e:	ce 01       	movw	r24, r28
    4230:	01 96       	adiw	r24, 0x01	; 1
    4232:	66 df       	rcall	.-308    	; 0x4100 <prvSampleTimeNow>
    4234:	4b 01       	movw	r8, r22
    4236:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	81 11       	cpse	r24, r1
    423c:	2d c0       	rjmp	.+90     	; 0x4298 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    423e:	11 11       	cpse	r17, r1
    4240:	0d c0       	rjmp	.+26     	; 0x425c <prvProcessTimerOrBlockTask+0x54>
    4242:	8c 14       	cp	r8, r12
    4244:	9d 04       	cpc	r9, r13
    4246:	ae 04       	cpc	r10, r14
    4248:	bf 04       	cpc	r11, r15
    424a:	40 f0       	brcs	.+16     	; 0x425c <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    424c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4250:	a5 01       	movw	r20, r10
    4252:	94 01       	movw	r18, r8
    4254:	c7 01       	movw	r24, r14
    4256:	b6 01       	movw	r22, r12
    4258:	81 df       	rcall	.-254    	; 0x415c <prvProcessExpiredTimer>
    425a:	20 c0       	rjmp	.+64     	; 0x429c <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    425c:	11 23       	and	r17, r17
    425e:	41 f0       	breq	.+16     	; 0x4270 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4260:	e0 91 7f 14 	lds	r30, 0x147F	; 0x80147f <pxOverflowTimerList>
    4264:	f0 91 80 14 	lds	r31, 0x1480	; 0x801480 <pxOverflowTimerList+0x1>
    4268:	80 81       	ld	r24, Z
    426a:	11 e0       	ldi	r17, 0x01	; 1
    426c:	81 11       	cpse	r24, r1
    426e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4270:	b7 01       	movw	r22, r14
    4272:	a6 01       	movw	r20, r12
    4274:	48 19       	sub	r20, r8
    4276:	59 09       	sbc	r21, r9
    4278:	6a 09       	sbc	r22, r10
    427a:	7b 09       	sbc	r23, r11
    427c:	21 2f       	mov	r18, r17
    427e:	80 91 7d 14 	lds	r24, 0x147D	; 0x80147d <xTimerQueue>
    4282:	90 91 7e 14 	lds	r25, 0x147E	; 0x80147e <xTimerQueue+0x1>
    4286:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    428a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
    428e:	81 11       	cpse	r24, r1
    4290:	05 c0       	rjmp	.+10     	; 0x429c <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    4292:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    4296:	02 c0       	rjmp	.+4      	; 0x429c <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    4298:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <xTaskResumeAll>
            }
        }
    }
    429c:	0f 90       	pop	r0
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	ff 90       	pop	r15
    42a6:	ef 90       	pop	r14
    42a8:	df 90       	pop	r13
    42aa:	cf 90       	pop	r12
    42ac:	bf 90       	pop	r11
    42ae:	af 90       	pop	r10
    42b0:	9f 90       	pop	r9
    42b2:	8f 90       	pop	r8
    42b4:	08 95       	ret

000042b6 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    42b6:	af 92       	push	r10
    42b8:	bf 92       	push	r11
    42ba:	cf 92       	push	r12
    42bc:	df 92       	push	r13
    42be:	ef 92       	push	r14
    42c0:	ff 92       	push	r15
    42c2:	0f 93       	push	r16
    42c4:	1f 93       	push	r17
    42c6:	cf 93       	push	r28
    42c8:	df 93       	push	r29
    42ca:	cd b7       	in	r28, 0x3d	; 61
    42cc:	de b7       	in	r29, 0x3e	; 62
    42ce:	28 97       	sbiw	r28, 0x08	; 8
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    42da:	82 c0       	rjmp	.+260    	; 0x43e0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	88 23       	and	r24, r24
    42e0:	0c f4       	brge	.+2      	; 0x42e4 <prvProcessReceivedCommands+0x2e>
    42e2:	7e c0       	rjmp	.+252    	; 0x43e0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    42e4:	ae 80       	ldd	r10, Y+6	; 0x06
    42e6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    42e8:	d5 01       	movw	r26, r10
    42ea:	1c 96       	adiw	r26, 0x0c	; 12
    42ec:	8d 91       	ld	r24, X+
    42ee:	9c 91       	ld	r25, X
    42f0:	1d 97       	sbiw	r26, 0x0d	; 13
    42f2:	89 2b       	or	r24, r25
    42f4:	21 f0       	breq	.+8      	; 0x42fe <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    42f6:	c5 01       	movw	r24, r10
    42f8:	02 96       	adiw	r24, 0x02	; 2
    42fa:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    42fe:	ce 01       	movw	r24, r28
    4300:	08 96       	adiw	r24, 0x08	; 8
    4302:	fe de       	rcall	.-516    	; 0x4100 <prvSampleTimeNow>
    4304:	8b 01       	movw	r16, r22
    4306:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    4308:	e9 81       	ldd	r30, Y+1	; 0x01
    430a:	0e 2e       	mov	r0, r30
    430c:	00 0c       	add	r0, r0
    430e:	ff 0b       	sbc	r31, r31
    4310:	ea 30       	cpi	r30, 0x0A	; 10
    4312:	f1 05       	cpc	r31, r1
    4314:	08 f0       	brcs	.+2      	; 0x4318 <prvProcessReceivedCommands+0x62>
    4316:	64 c0       	rjmp	.+200    	; 0x43e0 <prvProcessReceivedCommands+0x12a>
    4318:	88 27       	eor	r24, r24
    431a:	ee 58       	subi	r30, 0x8E	; 142
    431c:	ff 4f       	sbci	r31, 0xFF	; 255
    431e:	8f 4f       	sbci	r24, 0xFF	; 255
    4320:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4324:	f5 01       	movw	r30, r10
    4326:	86 89       	ldd	r24, Z+22	; 0x16
    4328:	81 60       	ori	r24, 0x01	; 1
    432a:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    432c:	ca 80       	ldd	r12, Y+2	; 0x02
    432e:	db 80       	ldd	r13, Y+3	; 0x03
    4330:	ec 80       	ldd	r14, Y+4	; 0x04
    4332:	fd 80       	ldd	r15, Y+5	; 0x05
    4334:	46 85       	ldd	r20, Z+14	; 0x0e
    4336:	57 85       	ldd	r21, Z+15	; 0x0f
    4338:	60 89       	ldd	r22, Z+16	; 0x10
    433a:	71 89       	ldd	r23, Z+17	; 0x11
    433c:	4c 0d       	add	r20, r12
    433e:	5d 1d       	adc	r21, r13
    4340:	6e 1d       	adc	r22, r14
    4342:	7f 1d       	adc	r23, r15
    4344:	c5 01       	movw	r24, r10
    4346:	83 dd       	rcall	.-1274   	; 0x3e4e <prvInsertTimerInActiveList>
    4348:	88 23       	and	r24, r24
    434a:	09 f4       	brne	.+2      	; 0x434e <prvProcessReceivedCommands+0x98>
    434c:	49 c0       	rjmp	.+146    	; 0x43e0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    434e:	d5 01       	movw	r26, r10
    4350:	54 96       	adiw	r26, 0x14	; 20
    4352:	ed 91       	ld	r30, X+
    4354:	fc 91       	ld	r31, X
    4356:	55 97       	sbiw	r26, 0x15	; 21
    4358:	c5 01       	movw	r24, r10
    435a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    435c:	f5 01       	movw	r30, r10
    435e:	86 89       	ldd	r24, Z+22	; 0x16
    4360:	82 ff       	sbrs	r24, 2
    4362:	3e c0       	rjmp	.+124    	; 0x43e0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4364:	4a 81       	ldd	r20, Y+2	; 0x02
    4366:	5b 81       	ldd	r21, Y+3	; 0x03
    4368:	6c 81       	ldd	r22, Y+4	; 0x04
    436a:	7d 81       	ldd	r23, Y+5	; 0x05
    436c:	86 85       	ldd	r24, Z+14	; 0x0e
    436e:	97 85       	ldd	r25, Z+15	; 0x0f
    4370:	a0 89       	ldd	r26, Z+16	; 0x10
    4372:	b1 89       	ldd	r27, Z+17	; 0x11
    4374:	9a 01       	movw	r18, r20
    4376:	ab 01       	movw	r20, r22
    4378:	28 0f       	add	r18, r24
    437a:	39 1f       	adc	r19, r25
    437c:	4a 1f       	adc	r20, r26
    437e:	5b 1f       	adc	r21, r27
    4380:	c1 2c       	mov	r12, r1
    4382:	d1 2c       	mov	r13, r1
    4384:	76 01       	movw	r14, r12
    4386:	00 e0       	ldi	r16, 0x00	; 0
    4388:	10 e0       	ldi	r17, 0x00	; 0
    438a:	60 e0       	ldi	r22, 0x00	; 0
    438c:	c5 01       	movw	r24, r10
    438e:	f2 dd       	rcall	.-1052   	; 0x3f74 <xTimerGenericCommand>
    4390:	27 c0       	rjmp	.+78     	; 0x43e0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4392:	d5 01       	movw	r26, r10
    4394:	56 96       	adiw	r26, 0x16	; 22
    4396:	8c 91       	ld	r24, X
    4398:	56 97       	sbiw	r26, 0x16	; 22
    439a:	8e 7f       	andi	r24, 0xFE	; 254
    439c:	56 96       	adiw	r26, 0x16	; 22
    439e:	8c 93       	st	X, r24
                        break;
    43a0:	1f c0       	rjmp	.+62     	; 0x43e0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    43a2:	f5 01       	movw	r30, r10
    43a4:	86 89       	ldd	r24, Z+22	; 0x16
    43a6:	81 60       	ori	r24, 0x01	; 1
    43a8:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    43aa:	4a 81       	ldd	r20, Y+2	; 0x02
    43ac:	5b 81       	ldd	r21, Y+3	; 0x03
    43ae:	6c 81       	ldd	r22, Y+4	; 0x04
    43b0:	7d 81       	ldd	r23, Y+5	; 0x05
    43b2:	46 87       	std	Z+14, r20	; 0x0e
    43b4:	57 87       	std	Z+15, r21	; 0x0f
    43b6:	60 8b       	std	Z+16, r22	; 0x10
    43b8:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    43ba:	40 0f       	add	r20, r16
    43bc:	51 1f       	adc	r21, r17
    43be:	62 1f       	adc	r22, r18
    43c0:	73 1f       	adc	r23, r19
    43c2:	68 01       	movw	r12, r16
    43c4:	79 01       	movw	r14, r18
    43c6:	c5 01       	movw	r24, r10
    43c8:	42 dd       	rcall	.-1404   	; 0x3e4e <prvInsertTimerInActiveList>
                        break;
    43ca:	0a c0       	rjmp	.+20     	; 0x43e0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    43cc:	f5 01       	movw	r30, r10
    43ce:	86 89       	ldd	r24, Z+22	; 0x16
    43d0:	81 fd       	sbrc	r24, 1
    43d2:	04 c0       	rjmp	.+8      	; 0x43dc <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    43d4:	c5 01       	movw	r24, r10
    43d6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    43dc:	8e 7f       	andi	r24, 0xFE	; 254
    43de:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	a9 01       	movw	r20, r18
    43e6:	be 01       	movw	r22, r28
    43e8:	6f 5f       	subi	r22, 0xFF	; 255
    43ea:	7f 4f       	sbci	r23, 0xFF	; 255
    43ec:	80 91 7d 14 	lds	r24, 0x147D	; 0x80147d <xTimerQueue>
    43f0:	90 91 7e 14 	lds	r25, 0x147E	; 0x80147e <xTimerQueue+0x1>
    43f4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xQueueReceive>
    43f8:	81 11       	cpse	r24, r1
    43fa:	70 cf       	rjmp	.-288    	; 0x42dc <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    43fc:	28 96       	adiw	r28, 0x08	; 8
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
    4408:	df 91       	pop	r29
    440a:	cf 91       	pop	r28
    440c:	1f 91       	pop	r17
    440e:	0f 91       	pop	r16
    4410:	ff 90       	pop	r15
    4412:	ef 90       	pop	r14
    4414:	df 90       	pop	r13
    4416:	cf 90       	pop	r12
    4418:	bf 90       	pop	r11
    441a:	af 90       	pop	r10
    441c:	08 95       	ret

0000441e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    441e:	08 95       	ret

00004420 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4420:	84 b1       	in	r24, 0x04	; 4
    4422:	80 68       	ori	r24, 0x80	; 128
    4424:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4426:	85 b1       	in	r24, 0x05	; 5
    4428:	80 68       	ori	r24, 0x80	; 128
    442a:	85 b9       	out	0x05, r24	; 5
    442c:	08 95       	ret

0000442e <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    442e:	83 b1       	in	r24, 0x03	; 3
    4430:	80 68       	ori	r24, 0x80	; 128
    4432:	83 b9       	out	0x03, r24	; 3
    4434:	08 95       	ret

00004436 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    4436:	f4 df       	rcall	.-24     	; 0x4420 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4438:	2f ef       	ldi	r18, 0xFF	; 255
    443a:	80 e7       	ldi	r24, 0x70	; 112
    443c:	92 e0       	ldi	r25, 0x02	; 2
    443e:	21 50       	subi	r18, 0x01	; 1
    4440:	80 40       	sbci	r24, 0x00	; 0
    4442:	90 40       	sbci	r25, 0x00	; 0
    4444:	e1 f7       	brne	.-8      	; 0x443e <vApplicationMallocFailedHook+0x8>
    4446:	00 c0       	rjmp	.+0      	; 0x4448 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    4448:	00 00       	nop
    444a:	f1 df       	rcall	.-30     	; 0x442e <prvBlinkMainLed>
    444c:	f5 cf       	rjmp	.-22     	; 0x4438 <vApplicationMallocFailedHook+0x2>

0000444e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    444e:	e8 df       	rcall	.-48     	; 0x4420 <prvSetMainLedOn>
    4450:	2f ef       	ldi	r18, 0xFF	; 255
    4452:	87 ea       	ldi	r24, 0xA7	; 167
    4454:	91 e6       	ldi	r25, 0x61	; 97
    4456:	21 50       	subi	r18, 0x01	; 1
    4458:	80 40       	sbci	r24, 0x00	; 0
    445a:	90 40       	sbci	r25, 0x00	; 0
    445c:	e1 f7       	brne	.-8      	; 0x4456 <vApplicationStackOverflowHook+0x8>
    445e:	00 c0       	rjmp	.+0      	; 0x4460 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    4460:	00 00       	nop
    4462:	e5 df       	rcall	.-54     	; 0x442e <prvBlinkMainLed>
    4464:	f5 cf       	rjmp	.-22     	; 0x4450 <vApplicationStackOverflowHook+0x2>

00004466 <createTasksForSensors>:

/*
* Function call to initialize all sensors
*/
void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    4466:	60 91 9b 14 	lds	r22, 0x149B	; 0x80149b <taskReadyBits>
    446a:	70 91 9c 14 	lds	r23, 0x149C	; 0x80149c <taskReadyBits+0x1>
    446e:	21 e0       	ldi	r18, 0x01	; 1
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	40 e0       	ldi	r20, 0x00	; 0
    4474:	50 e0       	ldi	r21, 0x00	; 0
    4476:	83 e0       	ldi	r24, 0x03	; 3
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	0e 94 06 05 	call	0xa0c	; 0xa0c <createTemp>
    447e:	90 93 dc 15 	sts	0x15DC, r25	; 0x8015dc <temperature_sensor+0x1>
    4482:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    4486:	60 91 9b 14 	lds	r22, 0x149B	; 0x80149b <taskReadyBits>
    448a:	70 91 9c 14 	lds	r23, 0x149C	; 0x80149c <taskReadyBits+0x1>
    448e:	22 e0       	ldi	r18, 0x02	; 2
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	83 e0       	ldi	r24, 0x03	; 3
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <createCO2>
    449e:	90 93 e0 15 	sts	0x15E0, r25	; 0x8015e0 <co2_sensor+0x1>
    44a2:	80 93 df 15 	sts	0x15DF, r24	; 0x8015df <co2_sensor>
	lighthandler = createLightSensor(3, taskReadyBits, BIT_LIGHT_READY);
    44a6:	60 91 9b 14 	lds	r22, 0x149B	; 0x80149b <taskReadyBits>
    44aa:	70 91 9c 14 	lds	r23, 0x149C	; 0x80149c <taskReadyBits+0x1>
    44ae:	24 e0       	ldi	r18, 0x04	; 4
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	40 e0       	ldi	r20, 0x00	; 0
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	83 e0       	ldi	r24, 0x03	; 3
    44b8:	0e 94 df 02 	call	0x5be	; 0x5be <createLightSensor>
    44bc:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <lighthandler+0x1>
    44c0:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <lighthandler>
    44c4:	08 95       	ret

000044c6 <create_tasks_and_semaphores>:

/*
* Function call that initializes all needed tasks for sensors and shared print, as well as LoRaWAN uplink
*/
void create_tasks_and_semaphores(void)
{
    44c6:	af 92       	push	r10
    44c8:	bf 92       	push	r11
    44ca:	cf 92       	push	r12
    44cc:	df 92       	push	r13
    44ce:	ef 92       	push	r14
    44d0:	ff 92       	push	r15
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
	create_shared_printf();
    44d6:	0e 94 49 03 	call	0x692	; 0x692 <create_shared_printf>
	print_sharedf("Board started.");
    44da:	8b ed       	ldi	r24, 0xDB	; 219
    44dc:	94 e0       	ldi	r25, 0x04	; 4
    44de:	9f 93       	push	r25
    44e0:	8f 93       	push	r24
    44e2:	0e 94 57 03 	call	0x6ae	; 0x6ae <print_sharedf>
	createTasksForSensors();
    44e6:	bf df       	rcall	.-130    	; 0x4466 <createTasksForSensors>
	create_semaphore_mutex_and_sensors();
    44e8:	0e 94 83 03 	call	0x706	; 0x706 <create_semaphore_mutex_and_sensors>
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
    44ec:	60 91 99 14 	lds	r22, 0x1499	; 0x801499 <downLinkMessageBufferHandle>
    44f0:	70 91 9a 14 	lds	r23, 0x149A	; 0x80149a <downLinkMessageBufferHandle+0x1>
    44f4:	84 e0       	ldi	r24, 0x04	; 4
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	0e 94 1b 02 	call	0x436	; 0x436 <DownLinkHandler_Create>
	lora_handler_initialize(2, taskReadyBits, BIT_TEMP_READY, BIT_CO2_READY, BIT_LIGHT_READY);
    44fc:	60 91 9b 14 	lds	r22, 0x149B	; 0x80149b <taskReadyBits>
    4500:	70 91 9c 14 	lds	r23, 0x149C	; 0x80149c <taskReadyBits+0x1>
    4504:	a1 2c       	mov	r10, r1
    4506:	b1 2c       	mov	r11, r1
    4508:	65 01       	movw	r12, r10
    450a:	68 94       	set
    450c:	a2 f8       	bld	r10, 2
    450e:	12 e0       	ldi	r17, 0x02	; 2
    4510:	e1 2e       	mov	r14, r17
    4512:	f1 2c       	mov	r15, r1
    4514:	00 e0       	ldi	r16, 0x00	; 0
    4516:	10 e0       	ldi	r17, 0x00	; 0
    4518:	21 e0       	ldi	r18, 0x01	; 1
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	82 e0       	ldi	r24, 0x02	; 2
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	0e 94 2f 07 	call	0xe5e	; 0xe5e <lora_handler_initialize>
}
    4528:	0f 90       	pop	r0
    452a:	0f 90       	pop	r0
    452c:	1f 91       	pop	r17
    452e:	0f 91       	pop	r16
    4530:	ff 90       	pop	r15
    4532:	ef 90       	pop	r14
    4534:	df 90       	pop	r13
    4536:	cf 90       	pop	r12
    4538:	bf 90       	pop	r11
    453a:	af 90       	pop	r10
    453c:	08 95       	ret

0000453e <initializeSystem>:
/*
* Function call that initializes the Event groups, the Arduino board, Downlink message buffer, tasks, and Sempahore mutex
*/
void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    453e:	0e 94 8a 07 	call	0xf14	; 0xf14 <xEventGroupCreate>
    4542:	90 93 9c 14 	sts	0x149C, r25	; 0x80149c <taskReadyBits+0x1>
    4546:	80 93 9b 14 	sts	0x149B, r24	; 0x80149b <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <stdio_initialise>
	
	rc_servo_initialise();
    4550:	91 d7       	rcall	.+3874   	; 0x5474 <rc_servo_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    4552:	41 e0       	ldi	r20, 0x01	; 1
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	70 e0       	ldi	r23, 0x00	; 0
    4558:	8c e2       	ldi	r24, 0x2C	; 44
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	0e 94 94 10 	call	0x2128	; 0x2128 <xStreamBufferGenericCreate>
    4560:	90 93 9a 14 	sts	0x149A, r25	; 0x80149a <downLinkMessageBufferHandle+0x1>
    4564:	80 93 99 14 	sts	0x1499, r24	; 0x801499 <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    4568:	bc 01       	movw	r22, r24
    456a:	81 e0       	ldi	r24, 0x01	; 1
	create_tasks_and_semaphores();
    456c:	6b d3       	rcall	.+1750   	; 0x4c44 <lora_driver_initialise>
    456e:	ab cf       	rjmp	.-170    	; 0x44c6 <create_tasks_and_semaphores>
    4570:	08 95       	ret

00004572 <main>:
}

int main(void){
	initializeSystem();
    4572:	e5 df       	rcall	.-54     	; 0x453e <initializeSystem>
	vTaskStartScheduler();
    4574:	0e 94 e6 14 	call	0x29cc	; 0x29cc <vTaskStartScheduler>
    4578:	ff cf       	rjmp	.-2      	; 0x4578 <main+0x6>

0000457a <__cmpsf2>:
    457a:	34 d0       	rcall	.+104    	; 0x45e4 <__fp_cmp>
    457c:	08 f4       	brcc	.+2      	; 0x4580 <__cmpsf2+0x6>
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	08 95       	ret

00004582 <__fixsfsi>:
    4582:	04 d0       	rcall	.+8      	; 0x458c <__fixunssfsi>
    4584:	68 94       	set
    4586:	b1 11       	cpse	r27, r1
    4588:	74 c0       	rjmp	.+232    	; 0x4672 <__fp_szero>
    458a:	08 95       	ret

0000458c <__fixunssfsi>:
    458c:	57 d0       	rcall	.+174    	; 0x463c <__fp_splitA>
    458e:	88 f0       	brcs	.+34     	; 0x45b2 <__fixunssfsi+0x26>
    4590:	9f 57       	subi	r25, 0x7F	; 127
    4592:	90 f0       	brcs	.+36     	; 0x45b8 <__fixunssfsi+0x2c>
    4594:	b9 2f       	mov	r27, r25
    4596:	99 27       	eor	r25, r25
    4598:	b7 51       	subi	r27, 0x17	; 23
    459a:	a0 f0       	brcs	.+40     	; 0x45c4 <__fixunssfsi+0x38>
    459c:	d1 f0       	breq	.+52     	; 0x45d2 <__fixunssfsi+0x46>
    459e:	66 0f       	add	r22, r22
    45a0:	77 1f       	adc	r23, r23
    45a2:	88 1f       	adc	r24, r24
    45a4:	99 1f       	adc	r25, r25
    45a6:	1a f0       	brmi	.+6      	; 0x45ae <__fixunssfsi+0x22>
    45a8:	ba 95       	dec	r27
    45aa:	c9 f7       	brne	.-14     	; 0x459e <__fixunssfsi+0x12>
    45ac:	12 c0       	rjmp	.+36     	; 0x45d2 <__fixunssfsi+0x46>
    45ae:	b1 30       	cpi	r27, 0x01	; 1
    45b0:	81 f0       	breq	.+32     	; 0x45d2 <__fixunssfsi+0x46>
    45b2:	5e d0       	rcall	.+188    	; 0x4670 <__fp_zero>
    45b4:	b1 e0       	ldi	r27, 0x01	; 1
    45b6:	08 95       	ret
    45b8:	5b c0       	rjmp	.+182    	; 0x4670 <__fp_zero>
    45ba:	67 2f       	mov	r22, r23
    45bc:	78 2f       	mov	r23, r24
    45be:	88 27       	eor	r24, r24
    45c0:	b8 5f       	subi	r27, 0xF8	; 248
    45c2:	39 f0       	breq	.+14     	; 0x45d2 <__fixunssfsi+0x46>
    45c4:	b9 3f       	cpi	r27, 0xF9	; 249
    45c6:	cc f3       	brlt	.-14     	; 0x45ba <__fixunssfsi+0x2e>
    45c8:	86 95       	lsr	r24
    45ca:	77 95       	ror	r23
    45cc:	67 95       	ror	r22
    45ce:	b3 95       	inc	r27
    45d0:	d9 f7       	brne	.-10     	; 0x45c8 <__fixunssfsi+0x3c>
    45d2:	3e f4       	brtc	.+14     	; 0x45e2 <__fixunssfsi+0x56>
    45d4:	90 95       	com	r25
    45d6:	80 95       	com	r24
    45d8:	70 95       	com	r23
    45da:	61 95       	neg	r22
    45dc:	7f 4f       	sbci	r23, 0xFF	; 255
    45de:	8f 4f       	sbci	r24, 0xFF	; 255
    45e0:	9f 4f       	sbci	r25, 0xFF	; 255
    45e2:	08 95       	ret

000045e4 <__fp_cmp>:
    45e4:	99 0f       	add	r25, r25
    45e6:	00 08       	sbc	r0, r0
    45e8:	55 0f       	add	r21, r21
    45ea:	aa 0b       	sbc	r26, r26
    45ec:	e0 e8       	ldi	r30, 0x80	; 128
    45ee:	fe ef       	ldi	r31, 0xFE	; 254
    45f0:	16 16       	cp	r1, r22
    45f2:	17 06       	cpc	r1, r23
    45f4:	e8 07       	cpc	r30, r24
    45f6:	f9 07       	cpc	r31, r25
    45f8:	c0 f0       	brcs	.+48     	; 0x462a <__fp_cmp+0x46>
    45fa:	12 16       	cp	r1, r18
    45fc:	13 06       	cpc	r1, r19
    45fe:	e4 07       	cpc	r30, r20
    4600:	f5 07       	cpc	r31, r21
    4602:	98 f0       	brcs	.+38     	; 0x462a <__fp_cmp+0x46>
    4604:	62 1b       	sub	r22, r18
    4606:	73 0b       	sbc	r23, r19
    4608:	84 0b       	sbc	r24, r20
    460a:	95 0b       	sbc	r25, r21
    460c:	39 f4       	brne	.+14     	; 0x461c <__fp_cmp+0x38>
    460e:	0a 26       	eor	r0, r26
    4610:	61 f0       	breq	.+24     	; 0x462a <__fp_cmp+0x46>
    4612:	23 2b       	or	r18, r19
    4614:	24 2b       	or	r18, r20
    4616:	25 2b       	or	r18, r21
    4618:	21 f4       	brne	.+8      	; 0x4622 <__fp_cmp+0x3e>
    461a:	08 95       	ret
    461c:	0a 26       	eor	r0, r26
    461e:	09 f4       	brne	.+2      	; 0x4622 <__fp_cmp+0x3e>
    4620:	a1 40       	sbci	r26, 0x01	; 1
    4622:	a6 95       	lsr	r26
    4624:	8f ef       	ldi	r24, 0xFF	; 255
    4626:	81 1d       	adc	r24, r1
    4628:	81 1d       	adc	r24, r1
    462a:	08 95       	ret

0000462c <__fp_split3>:
    462c:	57 fd       	sbrc	r21, 7
    462e:	90 58       	subi	r25, 0x80	; 128
    4630:	44 0f       	add	r20, r20
    4632:	55 1f       	adc	r21, r21
    4634:	59 f0       	breq	.+22     	; 0x464c <__fp_splitA+0x10>
    4636:	5f 3f       	cpi	r21, 0xFF	; 255
    4638:	71 f0       	breq	.+28     	; 0x4656 <__fp_splitA+0x1a>
    463a:	47 95       	ror	r20

0000463c <__fp_splitA>:
    463c:	88 0f       	add	r24, r24
    463e:	97 fb       	bst	r25, 7
    4640:	99 1f       	adc	r25, r25
    4642:	61 f0       	breq	.+24     	; 0x465c <__fp_splitA+0x20>
    4644:	9f 3f       	cpi	r25, 0xFF	; 255
    4646:	79 f0       	breq	.+30     	; 0x4666 <__fp_splitA+0x2a>
    4648:	87 95       	ror	r24
    464a:	08 95       	ret
    464c:	12 16       	cp	r1, r18
    464e:	13 06       	cpc	r1, r19
    4650:	14 06       	cpc	r1, r20
    4652:	55 1f       	adc	r21, r21
    4654:	f2 cf       	rjmp	.-28     	; 0x463a <__fp_split3+0xe>
    4656:	46 95       	lsr	r20
    4658:	f1 df       	rcall	.-30     	; 0x463c <__fp_splitA>
    465a:	08 c0       	rjmp	.+16     	; 0x466c <__fp_splitA+0x30>
    465c:	16 16       	cp	r1, r22
    465e:	17 06       	cpc	r1, r23
    4660:	18 06       	cpc	r1, r24
    4662:	99 1f       	adc	r25, r25
    4664:	f1 cf       	rjmp	.-30     	; 0x4648 <__fp_splitA+0xc>
    4666:	86 95       	lsr	r24
    4668:	71 05       	cpc	r23, r1
    466a:	61 05       	cpc	r22, r1
    466c:	08 94       	sec
    466e:	08 95       	ret

00004670 <__fp_zero>:
    4670:	e8 94       	clt

00004672 <__fp_szero>:
    4672:	bb 27       	eor	r27, r27
    4674:	66 27       	eor	r22, r22
    4676:	77 27       	eor	r23, r23
    4678:	cb 01       	movw	r24, r22
    467a:	97 f9       	bld	r25, 7
    467c:	08 95       	ret

0000467e <modf>:
    467e:	fa 01       	movw	r30, r20
    4680:	dc 01       	movw	r26, r24
    4682:	aa 0f       	add	r26, r26
    4684:	bb 1f       	adc	r27, r27
    4686:	9b 01       	movw	r18, r22
    4688:	ac 01       	movw	r20, r24
    468a:	bf 57       	subi	r27, 0x7F	; 127
    468c:	28 f4       	brcc	.+10     	; 0x4698 <modf+0x1a>
    468e:	22 27       	eor	r18, r18
    4690:	33 27       	eor	r19, r19
    4692:	44 27       	eor	r20, r20
    4694:	50 78       	andi	r21, 0x80	; 128
    4696:	1f c0       	rjmp	.+62     	; 0x46d6 <modf+0x58>
    4698:	b7 51       	subi	r27, 0x17	; 23
    469a:	88 f4       	brcc	.+34     	; 0x46be <modf+0x40>
    469c:	ab 2f       	mov	r26, r27
    469e:	00 24       	eor	r0, r0
    46a0:	46 95       	lsr	r20
    46a2:	37 95       	ror	r19
    46a4:	27 95       	ror	r18
    46a6:	01 1c       	adc	r0, r1
    46a8:	a3 95       	inc	r26
    46aa:	d2 f3       	brmi	.-12     	; 0x46a0 <modf+0x22>
    46ac:	00 20       	and	r0, r0
    46ae:	69 f0       	breq	.+26     	; 0x46ca <modf+0x4c>
    46b0:	22 0f       	add	r18, r18
    46b2:	33 1f       	adc	r19, r19
    46b4:	44 1f       	adc	r20, r20
    46b6:	b3 95       	inc	r27
    46b8:	da f3       	brmi	.-10     	; 0x46b0 <modf+0x32>
    46ba:	0d d0       	rcall	.+26     	; 0x46d6 <modf+0x58>
    46bc:	76 c0       	rjmp	.+236    	; 0x47aa <__subsf3>
    46be:	61 30       	cpi	r22, 0x01	; 1
    46c0:	71 05       	cpc	r23, r1
    46c2:	a0 e8       	ldi	r26, 0x80	; 128
    46c4:	8a 07       	cpc	r24, r26
    46c6:	b9 46       	sbci	r27, 0x69	; 105
    46c8:	30 f4       	brcc	.+12     	; 0x46d6 <modf+0x58>
    46ca:	9b 01       	movw	r18, r22
    46cc:	ac 01       	movw	r20, r24
    46ce:	66 27       	eor	r22, r22
    46d0:	77 27       	eor	r23, r23
    46d2:	88 27       	eor	r24, r24
    46d4:	90 78       	andi	r25, 0x80	; 128
    46d6:	30 96       	adiw	r30, 0x00	; 0
    46d8:	21 f0       	breq	.+8      	; 0x46e2 <modf+0x64>
    46da:	20 83       	st	Z, r18
    46dc:	31 83       	std	Z+1, r19	; 0x01
    46de:	42 83       	std	Z+2, r20	; 0x02
    46e0:	53 83       	std	Z+3, r21	; 0x03
    46e2:	08 95       	ret

000046e4 <__mulsf3>:
    46e4:	0b d0       	rcall	.+22     	; 0x46fc <__mulsf3x>
    46e6:	dd c0       	rjmp	.+442    	; 0x48a2 <__fp_round>
    46e8:	ce d0       	rcall	.+412    	; 0x4886 <__fp_pscA>
    46ea:	28 f0       	brcs	.+10     	; 0x46f6 <__mulsf3+0x12>
    46ec:	d3 d0       	rcall	.+422    	; 0x4894 <__fp_pscB>
    46ee:	18 f0       	brcs	.+6      	; 0x46f6 <__mulsf3+0x12>
    46f0:	95 23       	and	r25, r21
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <__mulsf3+0x12>
    46f4:	bf c0       	rjmp	.+382    	; 0x4874 <__fp_inf>
    46f6:	c4 c0       	rjmp	.+392    	; 0x4880 <__fp_nan>
    46f8:	11 24       	eor	r1, r1
    46fa:	bb cf       	rjmp	.-138    	; 0x4672 <__fp_szero>

000046fc <__mulsf3x>:
    46fc:	97 df       	rcall	.-210    	; 0x462c <__fp_split3>
    46fe:	a0 f3       	brcs	.-24     	; 0x46e8 <__mulsf3+0x4>

00004700 <__mulsf3_pse>:
    4700:	95 9f       	mul	r25, r21
    4702:	d1 f3       	breq	.-12     	; 0x46f8 <__mulsf3+0x14>
    4704:	95 0f       	add	r25, r21
    4706:	50 e0       	ldi	r21, 0x00	; 0
    4708:	55 1f       	adc	r21, r21
    470a:	62 9f       	mul	r22, r18
    470c:	f0 01       	movw	r30, r0
    470e:	72 9f       	mul	r23, r18
    4710:	bb 27       	eor	r27, r27
    4712:	f0 0d       	add	r31, r0
    4714:	b1 1d       	adc	r27, r1
    4716:	63 9f       	mul	r22, r19
    4718:	aa 27       	eor	r26, r26
    471a:	f0 0d       	add	r31, r0
    471c:	b1 1d       	adc	r27, r1
    471e:	aa 1f       	adc	r26, r26
    4720:	64 9f       	mul	r22, r20
    4722:	66 27       	eor	r22, r22
    4724:	b0 0d       	add	r27, r0
    4726:	a1 1d       	adc	r26, r1
    4728:	66 1f       	adc	r22, r22
    472a:	82 9f       	mul	r24, r18
    472c:	22 27       	eor	r18, r18
    472e:	b0 0d       	add	r27, r0
    4730:	a1 1d       	adc	r26, r1
    4732:	62 1f       	adc	r22, r18
    4734:	73 9f       	mul	r23, r19
    4736:	b0 0d       	add	r27, r0
    4738:	a1 1d       	adc	r26, r1
    473a:	62 1f       	adc	r22, r18
    473c:	83 9f       	mul	r24, r19
    473e:	a0 0d       	add	r26, r0
    4740:	61 1d       	adc	r22, r1
    4742:	22 1f       	adc	r18, r18
    4744:	74 9f       	mul	r23, r20
    4746:	33 27       	eor	r19, r19
    4748:	a0 0d       	add	r26, r0
    474a:	61 1d       	adc	r22, r1
    474c:	23 1f       	adc	r18, r19
    474e:	84 9f       	mul	r24, r20
    4750:	60 0d       	add	r22, r0
    4752:	21 1d       	adc	r18, r1
    4754:	82 2f       	mov	r24, r18
    4756:	76 2f       	mov	r23, r22
    4758:	6a 2f       	mov	r22, r26
    475a:	11 24       	eor	r1, r1
    475c:	9f 57       	subi	r25, 0x7F	; 127
    475e:	50 40       	sbci	r21, 0x00	; 0
    4760:	8a f0       	brmi	.+34     	; 0x4784 <__mulsf3_pse+0x84>
    4762:	e1 f0       	breq	.+56     	; 0x479c <__mulsf3_pse+0x9c>
    4764:	88 23       	and	r24, r24
    4766:	4a f0       	brmi	.+18     	; 0x477a <__mulsf3_pse+0x7a>
    4768:	ee 0f       	add	r30, r30
    476a:	ff 1f       	adc	r31, r31
    476c:	bb 1f       	adc	r27, r27
    476e:	66 1f       	adc	r22, r22
    4770:	77 1f       	adc	r23, r23
    4772:	88 1f       	adc	r24, r24
    4774:	91 50       	subi	r25, 0x01	; 1
    4776:	50 40       	sbci	r21, 0x00	; 0
    4778:	a9 f7       	brne	.-22     	; 0x4764 <__mulsf3_pse+0x64>
    477a:	9e 3f       	cpi	r25, 0xFE	; 254
    477c:	51 05       	cpc	r21, r1
    477e:	70 f0       	brcs	.+28     	; 0x479c <__mulsf3_pse+0x9c>
    4780:	79 c0       	rjmp	.+242    	; 0x4874 <__fp_inf>
    4782:	77 cf       	rjmp	.-274    	; 0x4672 <__fp_szero>
    4784:	5f 3f       	cpi	r21, 0xFF	; 255
    4786:	ec f3       	brlt	.-6      	; 0x4782 <__mulsf3_pse+0x82>
    4788:	98 3e       	cpi	r25, 0xE8	; 232
    478a:	dc f3       	brlt	.-10     	; 0x4782 <__mulsf3_pse+0x82>
    478c:	86 95       	lsr	r24
    478e:	77 95       	ror	r23
    4790:	67 95       	ror	r22
    4792:	b7 95       	ror	r27
    4794:	f7 95       	ror	r31
    4796:	e7 95       	ror	r30
    4798:	9f 5f       	subi	r25, 0xFF	; 255
    479a:	c1 f7       	brne	.-16     	; 0x478c <__mulsf3_pse+0x8c>
    479c:	fe 2b       	or	r31, r30
    479e:	88 0f       	add	r24, r24
    47a0:	91 1d       	adc	r25, r1
    47a2:	96 95       	lsr	r25
    47a4:	87 95       	ror	r24
    47a6:	97 f9       	bld	r25, 7
    47a8:	08 95       	ret

000047aa <__subsf3>:
    47aa:	50 58       	subi	r21, 0x80	; 128

000047ac <__addsf3>:
    47ac:	bb 27       	eor	r27, r27
    47ae:	aa 27       	eor	r26, r26
    47b0:	0e d0       	rcall	.+28     	; 0x47ce <__addsf3x>
    47b2:	77 c0       	rjmp	.+238    	; 0x48a2 <__fp_round>
    47b4:	68 d0       	rcall	.+208    	; 0x4886 <__fp_pscA>
    47b6:	30 f0       	brcs	.+12     	; 0x47c4 <__addsf3+0x18>
    47b8:	6d d0       	rcall	.+218    	; 0x4894 <__fp_pscB>
    47ba:	20 f0       	brcs	.+8      	; 0x47c4 <__addsf3+0x18>
    47bc:	31 f4       	brne	.+12     	; 0x47ca <__addsf3+0x1e>
    47be:	9f 3f       	cpi	r25, 0xFF	; 255
    47c0:	11 f4       	brne	.+4      	; 0x47c6 <__addsf3+0x1a>
    47c2:	1e f4       	brtc	.+6      	; 0x47ca <__addsf3+0x1e>
    47c4:	5d c0       	rjmp	.+186    	; 0x4880 <__fp_nan>
    47c6:	0e f4       	brtc	.+2      	; 0x47ca <__addsf3+0x1e>
    47c8:	e0 95       	com	r30
    47ca:	e7 fb       	bst	r30, 7
    47cc:	53 c0       	rjmp	.+166    	; 0x4874 <__fp_inf>

000047ce <__addsf3x>:
    47ce:	e9 2f       	mov	r30, r25
    47d0:	2d df       	rcall	.-422    	; 0x462c <__fp_split3>
    47d2:	80 f3       	brcs	.-32     	; 0x47b4 <__addsf3+0x8>
    47d4:	ba 17       	cp	r27, r26
    47d6:	62 07       	cpc	r22, r18
    47d8:	73 07       	cpc	r23, r19
    47da:	84 07       	cpc	r24, r20
    47dc:	95 07       	cpc	r25, r21
    47de:	18 f0       	brcs	.+6      	; 0x47e6 <__addsf3x+0x18>
    47e0:	71 f4       	brne	.+28     	; 0x47fe <__addsf3x+0x30>
    47e2:	9e f5       	brtc	.+102    	; 0x484a <__addsf3x+0x7c>
    47e4:	45 cf       	rjmp	.-374    	; 0x4670 <__fp_zero>
    47e6:	0e f4       	brtc	.+2      	; 0x47ea <__addsf3x+0x1c>
    47e8:	e0 95       	com	r30
    47ea:	0b 2e       	mov	r0, r27
    47ec:	ba 2f       	mov	r27, r26
    47ee:	a0 2d       	mov	r26, r0
    47f0:	0b 01       	movw	r0, r22
    47f2:	b9 01       	movw	r22, r18
    47f4:	90 01       	movw	r18, r0
    47f6:	0c 01       	movw	r0, r24
    47f8:	ca 01       	movw	r24, r20
    47fa:	a0 01       	movw	r20, r0
    47fc:	11 24       	eor	r1, r1
    47fe:	ff 27       	eor	r31, r31
    4800:	59 1b       	sub	r21, r25
    4802:	99 f0       	breq	.+38     	; 0x482a <__addsf3x+0x5c>
    4804:	59 3f       	cpi	r21, 0xF9	; 249
    4806:	50 f4       	brcc	.+20     	; 0x481c <__addsf3x+0x4e>
    4808:	50 3e       	cpi	r21, 0xE0	; 224
    480a:	68 f1       	brcs	.+90     	; 0x4866 <__addsf3x+0x98>
    480c:	1a 16       	cp	r1, r26
    480e:	f0 40       	sbci	r31, 0x00	; 0
    4810:	a2 2f       	mov	r26, r18
    4812:	23 2f       	mov	r18, r19
    4814:	34 2f       	mov	r19, r20
    4816:	44 27       	eor	r20, r20
    4818:	58 5f       	subi	r21, 0xF8	; 248
    481a:	f3 cf       	rjmp	.-26     	; 0x4802 <__addsf3x+0x34>
    481c:	46 95       	lsr	r20
    481e:	37 95       	ror	r19
    4820:	27 95       	ror	r18
    4822:	a7 95       	ror	r26
    4824:	f0 40       	sbci	r31, 0x00	; 0
    4826:	53 95       	inc	r21
    4828:	c9 f7       	brne	.-14     	; 0x481c <__addsf3x+0x4e>
    482a:	7e f4       	brtc	.+30     	; 0x484a <__addsf3x+0x7c>
    482c:	1f 16       	cp	r1, r31
    482e:	ba 0b       	sbc	r27, r26
    4830:	62 0b       	sbc	r22, r18
    4832:	73 0b       	sbc	r23, r19
    4834:	84 0b       	sbc	r24, r20
    4836:	ba f0       	brmi	.+46     	; 0x4866 <__addsf3x+0x98>
    4838:	91 50       	subi	r25, 0x01	; 1
    483a:	a1 f0       	breq	.+40     	; 0x4864 <__addsf3x+0x96>
    483c:	ff 0f       	add	r31, r31
    483e:	bb 1f       	adc	r27, r27
    4840:	66 1f       	adc	r22, r22
    4842:	77 1f       	adc	r23, r23
    4844:	88 1f       	adc	r24, r24
    4846:	c2 f7       	brpl	.-16     	; 0x4838 <__addsf3x+0x6a>
    4848:	0e c0       	rjmp	.+28     	; 0x4866 <__addsf3x+0x98>
    484a:	ba 0f       	add	r27, r26
    484c:	62 1f       	adc	r22, r18
    484e:	73 1f       	adc	r23, r19
    4850:	84 1f       	adc	r24, r20
    4852:	48 f4       	brcc	.+18     	; 0x4866 <__addsf3x+0x98>
    4854:	87 95       	ror	r24
    4856:	77 95       	ror	r23
    4858:	67 95       	ror	r22
    485a:	b7 95       	ror	r27
    485c:	f7 95       	ror	r31
    485e:	9e 3f       	cpi	r25, 0xFE	; 254
    4860:	08 f0       	brcs	.+2      	; 0x4864 <__addsf3x+0x96>
    4862:	b3 cf       	rjmp	.-154    	; 0x47ca <__addsf3+0x1e>
    4864:	93 95       	inc	r25
    4866:	88 0f       	add	r24, r24
    4868:	08 f0       	brcs	.+2      	; 0x486c <__addsf3x+0x9e>
    486a:	99 27       	eor	r25, r25
    486c:	ee 0f       	add	r30, r30
    486e:	97 95       	ror	r25
    4870:	87 95       	ror	r24
    4872:	08 95       	ret

00004874 <__fp_inf>:
    4874:	97 f9       	bld	r25, 7
    4876:	9f 67       	ori	r25, 0x7F	; 127
    4878:	80 e8       	ldi	r24, 0x80	; 128
    487a:	70 e0       	ldi	r23, 0x00	; 0
    487c:	60 e0       	ldi	r22, 0x00	; 0
    487e:	08 95       	ret

00004880 <__fp_nan>:
    4880:	9f ef       	ldi	r25, 0xFF	; 255
    4882:	80 ec       	ldi	r24, 0xC0	; 192
    4884:	08 95       	ret

00004886 <__fp_pscA>:
    4886:	00 24       	eor	r0, r0
    4888:	0a 94       	dec	r0
    488a:	16 16       	cp	r1, r22
    488c:	17 06       	cpc	r1, r23
    488e:	18 06       	cpc	r1, r24
    4890:	09 06       	cpc	r0, r25
    4892:	08 95       	ret

00004894 <__fp_pscB>:
    4894:	00 24       	eor	r0, r0
    4896:	0a 94       	dec	r0
    4898:	12 16       	cp	r1, r18
    489a:	13 06       	cpc	r1, r19
    489c:	14 06       	cpc	r1, r20
    489e:	05 06       	cpc	r0, r21
    48a0:	08 95       	ret

000048a2 <__fp_round>:
    48a2:	09 2e       	mov	r0, r25
    48a4:	03 94       	inc	r0
    48a6:	00 0c       	add	r0, r0
    48a8:	11 f4       	brne	.+4      	; 0x48ae <__fp_round+0xc>
    48aa:	88 23       	and	r24, r24
    48ac:	52 f0       	brmi	.+20     	; 0x48c2 <__fp_round+0x20>
    48ae:	bb 0f       	add	r27, r27
    48b0:	40 f4       	brcc	.+16     	; 0x48c2 <__fp_round+0x20>
    48b2:	bf 2b       	or	r27, r31
    48b4:	11 f4       	brne	.+4      	; 0x48ba <__fp_round+0x18>
    48b6:	60 ff       	sbrs	r22, 0
    48b8:	04 c0       	rjmp	.+8      	; 0x48c2 <__fp_round+0x20>
    48ba:	6f 5f       	subi	r22, 0xFF	; 255
    48bc:	7f 4f       	sbci	r23, 0xFF	; 255
    48be:	8f 4f       	sbci	r24, 0xFF	; 255
    48c0:	9f 4f       	sbci	r25, 0xFF	; 255
    48c2:	08 95       	ret

000048c4 <_hihTwiCallback>:
    48c4:	65 30       	cpi	r22, 0x05	; 5
    48c6:	f1 f4       	brne	.+60     	; 0x4904 <_hihTwiCallback+0x40>
    48c8:	fa 01       	movw	r30, r20
    48ca:	80 81       	ld	r24, Z
    48cc:	8f 73       	andi	r24, 0x3F	; 63
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	98 2f       	mov	r25, r24
    48d2:	88 27       	eor	r24, r24
    48d4:	21 81       	ldd	r18, Z+1	; 0x01
    48d6:	82 2b       	or	r24, r18
    48d8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    48dc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    48e0:	82 81       	ldd	r24, Z+2	; 0x02
    48e2:	f0 e4       	ldi	r31, 0x40	; 64
    48e4:	8f 9f       	mul	r24, r31
    48e6:	c0 01       	movw	r24, r0
    48e8:	11 24       	eor	r1, r1
    48ea:	fa 01       	movw	r30, r20
    48ec:	23 81       	ldd	r18, Z+3	; 0x03
    48ee:	26 95       	lsr	r18
    48f0:	26 95       	lsr	r18
    48f2:	82 2b       	or	r24, r18
    48f4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    48f8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	80 93 9d 14 	sts	0x149D, r24	; 0x80149d <_measuringIsReady>
    4902:	08 95       	ret
    4904:	64 30       	cpi	r22, 0x04	; 4
    4906:	51 f0       	breq	.+20     	; 0x491c <_hihTwiCallback+0x58>
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	90 e4       	ldi	r25, 0x40	; 64
    490c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4910:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4914:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4918:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    491c:	08 95       	ret

0000491e <hih8120_initialise>:
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	02 e6       	ldi	r16, 0x62	; 98
    4924:	14 e2       	ldi	r17, 0x24	; 36
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	34 e2       	ldi	r19, 0x24	; 36
    492a:	44 ef       	ldi	r20, 0xF4	; 244
    492c:	50 e0       	ldi	r21, 0x00	; 0
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	87 e2       	ldi	r24, 0x27	; 39
    4932:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <twiCreate>
    4936:	90 93 9f 14 	sts	0x149F, r25	; 0x80149f <_hih8120Handler+0x1>
    493a:	80 93 9e 14 	sts	0x149E, r24	; 0x80149e <_hih8120Handler>
    493e:	21 e0       	ldi	r18, 0x01	; 1
    4940:	89 2b       	or	r24, r25
    4942:	09 f0       	breq	.+2      	; 0x4946 <hih8120_initialise+0x28>
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	82 2f       	mov	r24, r18
    4948:	1f 91       	pop	r17
    494a:	0f 91       	pop	r16
    494c:	08 95       	ret

0000494e <hih8120_wakeup>:
    494e:	80 91 9e 14 	lds	r24, 0x149E	; 0x80149e <_hih8120Handler>
    4952:	90 91 9f 14 	lds	r25, 0x149F	; 0x80149f <_hih8120Handler+0x1>
    4956:	00 97       	sbiw	r24, 0x00	; 0
    4958:	59 f0       	breq	.+22     	; 0x4970 <hih8120_wakeup+0x22>
    495a:	40 e0       	ldi	r20, 0x00	; 0
    495c:	60 e0       	ldi	r22, 0x00	; 0
    495e:	70 e0       	ldi	r23, 0x00	; 0
    4960:	0e 94 1b 30 	call	0x6036	; 0x6036 <twiTransmit>
    4964:	84 30       	cpi	r24, 0x04	; 4
    4966:	31 f4       	brne	.+12     	; 0x4974 <hih8120_wakeup+0x26>
    4968:	10 92 9d 14 	sts	0x149D, r1	; 0x80149d <_measuringIsReady>
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	08 95       	ret
    4970:	82 e0       	ldi	r24, 0x02	; 2
    4972:	08 95       	ret
    4974:	83 e0       	ldi	r24, 0x03	; 3
    4976:	08 95       	ret

00004978 <hih8120_measure>:
    4978:	80 91 9e 14 	lds	r24, 0x149E	; 0x80149e <_hih8120Handler>
    497c:	90 91 9f 14 	lds	r25, 0x149F	; 0x80149f <_hih8120Handler+0x1>
    4980:	00 97       	sbiw	r24, 0x00	; 0
    4982:	39 f0       	breq	.+14     	; 0x4992 <hih8120_measure+0x1a>
    4984:	64 e0       	ldi	r22, 0x04	; 4
    4986:	0e 94 67 30 	call	0x60ce	; 0x60ce <twiReceive>
    498a:	85 30       	cpi	r24, 0x05	; 5
    498c:	21 f0       	breq	.+8      	; 0x4996 <hih8120_measure+0x1e>
    498e:	83 e0       	ldi	r24, 0x03	; 3
    4990:	08 95       	ret
    4992:	82 e0       	ldi	r24, 0x02	; 2
    4994:	08 95       	ret
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	08 95       	ret

0000499a <hih8120_getHumidity>:
    499a:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    499e:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	0e 94 6d 35 	call	0x6ada	; 0x6ada <__floatunsisf>
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	48 ec       	ldi	r20, 0xC8	; 200
    49b0:	52 e4       	ldi	r21, 0x42	; 66
    49b2:	98 de       	rcall	.-720    	; 0x46e4 <__mulsf3>
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	38 ef       	ldi	r19, 0xF8	; 248
    49b8:	4f e7       	ldi	r20, 0x7F	; 127
    49ba:	56 e4       	ldi	r21, 0x46	; 70
    49bc:	0c 94 fc 34 	jmp	0x69f8	; 0x69f8 <__divsf3>
    49c0:	08 95       	ret

000049c2 <hih8120_getHumidityPercent_x10>:
    49c2:	eb df       	rcall	.-42     	; 0x499a <hih8120_getHumidity>
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	40 e2       	ldi	r20, 0x20	; 32
    49ca:	51 e4       	ldi	r21, 0x41	; 65
    49cc:	8b de       	rcall	.-746    	; 0x46e4 <__mulsf3>
    49ce:	de dd       	rcall	.-1092   	; 0x458c <__fixunssfsi>
    49d0:	cb 01       	movw	r24, r22
    49d2:	08 95       	ret

000049d4 <hih8120_getTemperature>:
    49d4:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    49d8:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	0e 94 6d 35 	call	0x6ada	; 0x6ada <__floatunsisf>
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	45 e2       	ldi	r20, 0x25	; 37
    49ea:	53 e4       	ldi	r21, 0x43	; 67
    49ec:	7b de       	rcall	.-778    	; 0x46e4 <__mulsf3>
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	38 ef       	ldi	r19, 0xF8	; 248
    49f2:	4f e7       	ldi	r20, 0x7F	; 127
    49f4:	56 e4       	ldi	r21, 0x46	; 70
    49f6:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <__divsf3>
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	40 e2       	ldi	r20, 0x20	; 32
    4a00:	52 e4       	ldi	r21, 0x42	; 66
    4a02:	d3 ce       	rjmp	.-602    	; 0x47aa <__subsf3>
    4a04:	08 95       	ret

00004a06 <_serialCallBack>:
    4a06:	0f 93       	push	r16
    4a08:	1f 93       	push	r17
    4a0a:	cf 93       	push	r28
    4a0c:	df 93       	push	r29
    4a0e:	1f 92       	push	r1
    4a10:	1f 92       	push	r1
    4a12:	cd b7       	in	r28, 0x3d	; 61
    4a14:	de b7       	in	r29, 0x3e	; 62
    4a16:	8c 01       	movw	r16, r24
    4a18:	19 82       	std	Y+1, r1	; 0x01
    4a1a:	2d c0       	rjmp	.+90     	; 0x4a76 <_serialCallBack+0x70>
    4a1c:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <rec_buf_inp.2878>
    4a20:	ec 32       	cpi	r30, 0x2C	; 44
    4a22:	50 f4       	brcc	.+20     	; 0x4a38 <_serialCallBack+0x32>
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	8e 0f       	add	r24, r30
    4a28:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <rec_buf_inp.2878>
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	e7 5f       	subi	r30, 0xF7	; 247
    4a30:	fa 4e       	sbci	r31, 0xEA	; 234
    4a32:	8a 81       	ldd	r24, Y+2	; 0x02
    4a34:	80 83       	st	Z, r24
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <_serialCallBack+0x36>
    4a38:	10 92 d7 14 	sts	0x14D7, r1	; 0x8014d7 <rec_buf_inp.2878>
    4a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a3e:	8a 30       	cpi	r24, 0x0A	; 10
    4a40:	d1 f4       	brne	.+52     	; 0x4a76 <_serialCallBack+0x70>
    4a42:	40 91 d7 14 	lds	r20, 0x14D7	; 0x8014d7 <rec_buf_inp.2878>
    4a46:	50 e0       	ldi	r21, 0x00	; 0
    4a48:	fa 01       	movw	r30, r20
    4a4a:	e9 5f       	subi	r30, 0xF9	; 249
    4a4c:	fa 4e       	sbci	r31, 0xEA	; 234
    4a4e:	10 82       	st	Z, r1
    4a50:	41 50       	subi	r20, 0x01	; 1
    4a52:	51 09       	sbc	r21, r1
    4a54:	9e 01       	movw	r18, r28
    4a56:	2f 5f       	subi	r18, 0xFF	; 255
    4a58:	3f 4f       	sbci	r19, 0xFF	; 255
    4a5a:	69 e0       	ldi	r22, 0x09	; 9
    4a5c:	75 e1       	ldi	r23, 0x15	; 21
    4a5e:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <_serialReplyBufferHandle>
    4a62:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <_serialReplyBufferHandle+0x1>
    4a66:	0e 94 bb 11 	call	0x2376	; 0x2376 <xStreamBufferSendFromISR>
    4a6a:	89 81       	ldd	r24, Y+1	; 0x01
    4a6c:	81 11       	cpse	r24, r1
    4a6e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <vPortYield>
    4a72:	10 92 d7 14 	sts	0x14D7, r1	; 0x8014d7 <rec_buf_inp.2878>
    4a76:	be 01       	movw	r22, r28
    4a78:	6e 5f       	subi	r22, 0xFE	; 254
    4a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a7c:	c8 01       	movw	r24, r16
    4a7e:	3a d6       	rcall	.+3188   	; 0x56f4 <serial_getByte>
    4a80:	88 23       	and	r24, r24
    4a82:	61 f2       	breq	.-104    	; 0x4a1c <_serialCallBack+0x16>
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	df 91       	pop	r29
    4a8a:	cf 91       	pop	r28
    4a8c:	1f 91       	pop	r17
    4a8e:	0f 91       	pop	r16
    4a90:	08 95       	ret

00004a92 <_uploadMessage>:
    4a92:	0f 93       	push	r16
    4a94:	1f 93       	push	r17
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	8c 01       	movw	r16, r24
    4a9c:	eb 01       	movw	r28, r22
    4a9e:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <_serialReplyBufferHandle>
    4aa2:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <_serialReplyBufferHandle+0x1>
    4aa6:	0e 94 c6 10 	call	0x218c	; 0x218c <xStreamBufferReset>
    4aaa:	b8 01       	movw	r22, r16
    4aac:	80 ea       	ldi	r24, 0xA0	; 160
    4aae:	94 e1       	ldi	r25, 0x14	; 20
    4ab0:	0e 94 4a 38 	call	0x7094	; 0x7094 <strcpy>
    4ab4:	20 97       	sbiw	r28, 0x00	; 0
    4ab6:	79 f0       	breq	.+30     	; 0x4ad6 <_uploadMessage+0x44>
    4ab8:	e0 ea       	ldi	r30, 0xA0	; 160
    4aba:	f4 e1       	ldi	r31, 0x14	; 20
    4abc:	01 90       	ld	r0, Z+
    4abe:	00 20       	and	r0, r0
    4ac0:	e9 f7       	brne	.-6      	; 0x4abc <_uploadMessage+0x2a>
    4ac2:	31 97       	sbiw	r30, 0x01	; 1
    4ac4:	80 e2       	ldi	r24, 0x20	; 32
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	91 83       	std	Z+1, r25	; 0x01
    4aca:	80 83       	st	Z, r24
    4acc:	be 01       	movw	r22, r28
    4ace:	80 ea       	ldi	r24, 0xA0	; 160
    4ad0:	94 e1       	ldi	r25, 0x14	; 20
    4ad2:	0e 94 3f 38 	call	0x707e	; 0x707e <strcat>
    4ad6:	e0 ea       	ldi	r30, 0xA0	; 160
    4ad8:	f4 e1       	ldi	r31, 0x14	; 20
    4ada:	df 01       	movw	r26, r30
    4adc:	0d 90       	ld	r0, X+
    4ade:	00 20       	and	r0, r0
    4ae0:	e9 f7       	brne	.-6      	; 0x4adc <_uploadMessage+0x4a>
    4ae2:	11 97       	sbiw	r26, 0x01	; 1
    4ae4:	8d e0       	ldi	r24, 0x0D	; 13
    4ae6:	9a e0       	ldi	r25, 0x0A	; 10
    4ae8:	11 96       	adiw	r26, 0x01	; 1
    4aea:	9c 93       	st	X, r25
    4aec:	8e 93       	st	-X, r24
    4aee:	12 96       	adiw	r26, 0x02	; 2
    4af0:	1c 92       	st	X, r1
    4af2:	01 90       	ld	r0, Z+
    4af4:	00 20       	and	r0, r0
    4af6:	e9 f7       	brne	.-6      	; 0x4af2 <_uploadMessage+0x60>
    4af8:	31 97       	sbiw	r30, 0x01	; 1
    4afa:	e0 5a       	subi	r30, 0xA0	; 160
    4afc:	f4 41       	sbci	r31, 0x14	; 20
    4afe:	ae 2f       	mov	r26, r30
    4b00:	80 ea       	ldi	r24, 0xA0	; 160
    4b02:	94 e1       	ldi	r25, 0x14	; 20
    4b04:	ac 01       	movw	r20, r24
    4b06:	6a 2f       	mov	r22, r26
    4b08:	80 91 dc 14 	lds	r24, 0x14DC	; 0x8014dc <_rn2483_serial>
    4b0c:	90 91 dd 14 	lds	r25, 0x14DD	; 0x8014dd <_rn2483_serial+0x1>
    4b10:	9c d5       	rcall	.+2872   	; 0x564a <serial_sendBytes>
    4b12:	81 11       	cpse	r24, r1
    4b14:	11 c0       	rjmp	.+34     	; 0x4b38 <_uploadMessage+0xa6>
    4b16:	08 e2       	ldi	r16, 0x28	; 40
    4b18:	15 e0       	ldi	r17, 0x05	; 5
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	4d e2       	ldi	r20, 0x2D	; 45
    4b20:	50 e0       	ldi	r21, 0x00	; 0
    4b22:	63 e6       	ldi	r22, 0x63	; 99
    4b24:	75 e1       	ldi	r23, 0x15	; 21
    4b26:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <_serialReplyBufferHandle>
    4b2a:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <_serialReplyBufferHandle+0x1>
    4b2e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <xStreamBufferReceive>
    4b32:	83 e6       	ldi	r24, 0x63	; 99
    4b34:	95 e1       	ldi	r25, 0x15	; 21
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <_uploadMessage+0xaa>
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	df 91       	pop	r29
    4b3e:	cf 91       	pop	r28
    4b40:	1f 91       	pop	r17
    4b42:	0f 91       	pop	r16
    4b44:	08 95       	ret

00004b46 <_reply2ReturnCode>:
    4b46:	2f 92       	push	r2
    4b48:	3f 92       	push	r3
    4b4a:	4f 92       	push	r4
    4b4c:	5f 92       	push	r5
    4b4e:	6f 92       	push	r6
    4b50:	7f 92       	push	r7
    4b52:	8f 92       	push	r8
    4b54:	9f 92       	push	r9
    4b56:	af 92       	push	r10
    4b58:	bf 92       	push	r11
    4b5a:	cf 92       	push	r12
    4b5c:	df 92       	push	r13
    4b5e:	ef 92       	push	r14
    4b60:	ff 92       	push	r15
    4b62:	0f 93       	push	r16
    4b64:	1f 93       	push	r17
    4b66:	cf 93       	push	r28
    4b68:	df 93       	push	r29
    4b6a:	5c 01       	movw	r10, r24
    4b6c:	fc 01       	movw	r30, r24
    4b6e:	01 90       	ld	r0, Z+
    4b70:	00 20       	and	r0, r0
    4b72:	e9 f7       	brne	.-6      	; 0x4b6e <_reply2ReturnCode+0x28>
    4b74:	31 97       	sbiw	r30, 0x01	; 1
    4b76:	6f 01       	movw	r12, r30
    4b78:	c8 1a       	sub	r12, r24
    4b7a:	d9 0a       	sbc	r13, r25
    4b7c:	5c 2c       	mov	r5, r12
    4b7e:	0f 2e       	mov	r0, r31
    4b80:	f3 e8       	ldi	r31, 0x83	; 131
    4b82:	8f 2e       	mov	r8, r31
    4b84:	f7 e0       	ldi	r31, 0x07	; 7
    4b86:	9f 2e       	mov	r9, r31
    4b88:	f0 2d       	mov	r31, r0
    4b8a:	e1 2c       	mov	r14, r1
    4b8c:	f1 2c       	mov	r15, r1
    4b8e:	4c 2c       	mov	r4, r12
    4b90:	37 01       	movw	r6, r14
    4b92:	f4 01       	movw	r30, r8
    4b94:	01 81       	ldd	r16, Z+1	; 0x01
    4b96:	12 81       	ldd	r17, Z+2	; 0x02
    4b98:	e8 01       	movw	r28, r16
    4b9a:	09 90       	ld	r0, Y+
    4b9c:	00 20       	and	r0, r0
    4b9e:	e9 f7       	brne	.-6      	; 0x4b9a <_reply2ReturnCode+0x54>
    4ba0:	21 97       	sbiw	r28, 0x01	; 1
    4ba2:	c0 1b       	sub	r28, r16
    4ba4:	d1 0b       	sbc	r29, r17
    4ba6:	3c 2e       	mov	r3, r28
    4ba8:	f9 e0       	ldi	r31, 0x09	; 9
    4baa:	cf 16       	cp	r12, r31
    4bac:	d1 04       	cpc	r13, r1
    4bae:	58 f0       	brcs	.+22     	; 0x4bc6 <_reply2ReturnCode+0x80>
    4bb0:	f4 01       	movw	r30, r8
    4bb2:	20 80       	ld	r2, Z
    4bb4:	fe e0       	ldi	r31, 0x0E	; 14
    4bb6:	2f 12       	cpse	r2, r31
    4bb8:	06 c0       	rjmp	.+12     	; 0x4bc6 <_reply2ReturnCode+0x80>
    4bba:	b8 01       	movw	r22, r16
    4bbc:	c5 01       	movw	r24, r10
    4bbe:	0e 94 1a 38 	call	0x7034	; 0x7034 <strcasestr>
    4bc2:	89 2b       	or	r24, r25
    4bc4:	09 f5       	brne	.+66     	; 0x4c08 <_reply2ReturnCode+0xc2>
    4bc6:	44 2d       	mov	r20, r4
    4bc8:	35 14       	cp	r3, r5
    4bca:	08 f4       	brcc	.+2      	; 0x4bce <_reply2ReturnCode+0x88>
    4bcc:	4c 2f       	mov	r20, r28
    4bce:	50 e0       	ldi	r21, 0x00	; 0
    4bd0:	b8 01       	movw	r22, r16
    4bd2:	c5 01       	movw	r24, r10
    4bd4:	0e 94 51 38 	call	0x70a2	; 0x70a2 <strncasecmp>
    4bd8:	89 2b       	or	r24, r25
    4bda:	49 f4       	brne	.+18     	; 0x4bee <_reply2ReturnCode+0xa8>
    4bdc:	f3 01       	movw	r30, r6
    4bde:	ee 0f       	add	r30, r30
    4be0:	ff 1f       	adc	r31, r31
    4be2:	e6 0d       	add	r30, r6
    4be4:	f7 1d       	adc	r31, r7
    4be6:	ed 57       	subi	r30, 0x7D	; 125
    4be8:	f8 4f       	sbci	r31, 0xF8	; 248
    4bea:	20 80       	ld	r2, Z
    4bec:	0d c0       	rjmp	.+26     	; 0x4c08 <_reply2ReturnCode+0xc2>
    4bee:	8f ef       	ldi	r24, 0xFF	; 255
    4bf0:	e8 1a       	sub	r14, r24
    4bf2:	f8 0a       	sbc	r15, r24
    4bf4:	e3 e0       	ldi	r30, 0x03	; 3
    4bf6:	8e 0e       	add	r8, r30
    4bf8:	91 1c       	adc	r9, r1
    4bfa:	f1 e1       	ldi	r31, 0x11	; 17
    4bfc:	ef 16       	cp	r14, r31
    4bfe:	f1 04       	cpc	r15, r1
    4c00:	39 f6       	brne	.-114    	; 0x4b90 <_reply2ReturnCode+0x4a>
    4c02:	68 94       	set
    4c04:	22 24       	eor	r2, r2
    4c06:	24 f8       	bld	r2, 4
    4c08:	82 2d       	mov	r24, r2
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	1f 91       	pop	r17
    4c10:	0f 91       	pop	r16
    4c12:	ff 90       	pop	r15
    4c14:	ef 90       	pop	r14
    4c16:	df 90       	pop	r13
    4c18:	cf 90       	pop	r12
    4c1a:	bf 90       	pop	r11
    4c1c:	af 90       	pop	r10
    4c1e:	9f 90       	pop	r9
    4c20:	8f 90       	pop	r8
    4c22:	7f 90       	pop	r7
    4c24:	6f 90       	pop	r6
    4c26:	5f 90       	pop	r5
    4c28:	4f 90       	pop	r4
    4c2a:	3f 90       	pop	r3
    4c2c:	2f 90       	pop	r2
    4c2e:	08 95       	ret

00004c30 <_uploadMessageRc>:
    4c30:	30 df       	rcall	.-416    	; 0x4a92 <_uploadMessage>
    4c32:	89 cf       	rjmp	.-238    	; 0x4b46 <_reply2ReturnCode>
    4c34:	08 95       	ret

00004c36 <lora_driver_flushBuffers>:
    4c36:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <_serialReplyBufferHandle>
    4c3a:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <_serialReplyBufferHandle+0x1>
    4c3e:	0c 94 c6 10 	jmp	0x218c	; 0x218c <xStreamBufferReset>
    4c42:	08 95       	ret

00004c44 <lora_driver_initialise>:
    4c44:	8f 92       	push	r8
    4c46:	9f 92       	push	r9
    4c48:	af 92       	push	r10
    4c4a:	cf 92       	push	r12
    4c4c:	ef 92       	push	r14
    4c4e:	0f 93       	push	r16
    4c50:	1f 93       	push	r17
    4c52:	cf 93       	push	r28
    4c54:	c8 2f       	mov	r28, r24
    4c56:	8b 01       	movw	r16, r22
    4c58:	41 e0       	ldi	r20, 0x01	; 1
    4c5a:	60 e0       	ldi	r22, 0x00	; 0
    4c5c:	70 e0       	ldi	r23, 0x00	; 0
    4c5e:	88 ec       	ldi	r24, 0xC8	; 200
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	0e 94 94 10 	call	0x2128	; 0x2128 <xStreamBufferGenericCreate>
    4c66:	90 93 db 14 	sts	0x14DB, r25	; 0x8014db <_serialReplyBufferHandle+0x1>
    4c6a:	80 93 da 14 	sts	0x14DA, r24	; 0x8014da <_serialReplyBufferHandle>
    4c6e:	10 93 d9 14 	sts	0x14D9, r17	; 0x8014d9 <_downlinkMessageBuffer+0x1>
    4c72:	00 93 d8 14 	sts	0x14D8, r16	; 0x8014d8 <_downlinkMessageBuffer>
    4c76:	0f 2e       	mov	r0, r31
    4c78:	f3 e0       	ldi	r31, 0x03	; 3
    4c7a:	8f 2e       	mov	r8, r31
    4c7c:	f5 e2       	ldi	r31, 0x25	; 37
    4c7e:	9f 2e       	mov	r9, r31
    4c80:	f0 2d       	mov	r31, r0
    4c82:	68 94       	set
    4c84:	aa 24       	eor	r10, r10
    4c86:	a6 f8       	bld	r10, 6
    4c88:	68 94       	set
    4c8a:	cc 24       	eor	r12, r12
    4c8c:	c6 f8       	bld	r12, 6
    4c8e:	e1 2c       	mov	r14, r1
    4c90:	00 e0       	ldi	r16, 0x00	; 0
    4c92:	23 e0       	ldi	r18, 0x03	; 3
    4c94:	40 e0       	ldi	r20, 0x00	; 0
    4c96:	51 ee       	ldi	r21, 0xE1	; 225
    4c98:	60 e0       	ldi	r22, 0x00	; 0
    4c9a:	70 e0       	ldi	r23, 0x00	; 0
    4c9c:	8c 2f       	mov	r24, r28
    4c9e:	06 d4       	rcall	.+2060   	; 0x54ac <serial_create>
    4ca0:	90 93 dd 14 	sts	0x14DD, r25	; 0x8014dd <_rn2483_serial+0x1>
    4ca4:	80 93 dc 14 	sts	0x14DC, r24	; 0x8014dc <_rn2483_serial>
    4ca8:	e7 e0       	ldi	r30, 0x07	; 7
    4caa:	f1 e0       	ldi	r31, 0x01	; 1
    4cac:	80 81       	ld	r24, Z
    4cae:	80 61       	ori	r24, 0x10	; 16
    4cb0:	80 83       	st	Z, r24
    4cb2:	cf 91       	pop	r28
    4cb4:	1f 91       	pop	r17
    4cb6:	0f 91       	pop	r16
    4cb8:	ef 90       	pop	r14
    4cba:	cf 90       	pop	r12
    4cbc:	af 90       	pop	r10
    4cbe:	9f 90       	pop	r9
    4cc0:	8f 90       	pop	r8
    4cc2:	08 95       	ret

00004cc4 <lora_driver_resetRn2483>:
    4cc4:	88 23       	and	r24, r24
    4cc6:	31 f0       	breq	.+12     	; 0x4cd4 <lora_driver_resetRn2483+0x10>
    4cc8:	e8 e0       	ldi	r30, 0x08	; 8
    4cca:	f1 e0       	ldi	r31, 0x01	; 1
    4ccc:	80 81       	ld	r24, Z
    4cce:	8f 7e       	andi	r24, 0xEF	; 239
    4cd0:	80 83       	st	Z, r24
    4cd2:	08 95       	ret
    4cd4:	e8 e0       	ldi	r30, 0x08	; 8
    4cd6:	f1 e0       	ldi	r31, 0x01	; 1
    4cd8:	80 81       	ld	r24, Z
    4cda:	80 61       	ori	r24, 0x10	; 16
    4cdc:	80 83       	st	Z, r24
    4cde:	08 95       	ret

00004ce0 <lora_driver_rn2483FactoryReset>:
    4ce0:	60 e0       	ldi	r22, 0x00	; 0
    4ce2:	70 e0       	ldi	r23, 0x00	; 0
    4ce4:	89 e0       	ldi	r24, 0x09	; 9
    4ce6:	95 e0       	ldi	r25, 0x05	; 5
    4ce8:	d4 de       	rcall	.-600    	; 0x4a92 <_uploadMessage>
    4cea:	e3 e6       	ldi	r30, 0x63	; 99
    4cec:	f5 e1       	ldi	r31, 0x15	; 21
    4cee:	01 90       	ld	r0, Z+
    4cf0:	00 20       	and	r0, r0
    4cf2:	e9 f7       	brne	.-6      	; 0x4cee <lora_driver_rn2483FactoryReset+0xe>
    4cf4:	31 97       	sbiw	r30, 0x01	; 1
    4cf6:	e3 56       	subi	r30, 0x63	; 99
    4cf8:	f5 41       	sbci	r31, 0x15	; 21
    4cfa:	81 e0       	ldi	r24, 0x01	; 1
    4cfc:	75 97       	sbiw	r30, 0x15	; 21
    4cfe:	08 f0       	brcs	.+2      	; 0x4d02 <lora_driver_rn2483FactoryReset+0x22>
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	08 95       	ret

00004d04 <lora_driver_getRn2483Hweui>:
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	ec 01       	movw	r28, r24
    4d0a:	60 e0       	ldi	r22, 0x00	; 0
    4d0c:	70 e0       	ldi	r23, 0x00	; 0
    4d0e:	8a e1       	ldi	r24, 0x1A	; 26
    4d10:	95 e0       	ldi	r25, 0x05	; 5
    4d12:	bf de       	rcall	.-642    	; 0x4a92 <_uploadMessage>
    4d14:	e3 e6       	ldi	r30, 0x63	; 99
    4d16:	f5 e1       	ldi	r31, 0x15	; 21
    4d18:	01 90       	ld	r0, Z+
    4d1a:	00 20       	and	r0, r0
    4d1c:	e9 f7       	brne	.-6      	; 0x4d18 <lora_driver_getRn2483Hweui+0x14>
    4d1e:	e4 57       	subi	r30, 0x74	; 116
    4d20:	f5 41       	sbci	r31, 0x15	; 21
    4d22:	39 f4       	brne	.+14     	; 0x4d32 <lora_driver_getRn2483Hweui+0x2e>
    4d24:	63 e6       	ldi	r22, 0x63	; 99
    4d26:	75 e1       	ldi	r23, 0x15	; 21
    4d28:	ce 01       	movw	r24, r28
    4d2a:	0e 94 4a 38 	call	0x7094	; 0x7094 <strcpy>
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	02 c0       	rjmp	.+4      	; 0x4d36 <lora_driver_getRn2483Hweui+0x32>
    4d32:	18 82       	st	Y, r1
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	08 95       	ret

00004d3c <lora_driver_setDeviceIdentifier>:
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	01 90       	ld	r0, Z+
    4d40:	00 20       	and	r0, r0
    4d42:	e9 f7       	brne	.-6      	; 0x4d3e <lora_driver_setDeviceIdentifier+0x2>
    4d44:	9f 01       	movw	r18, r30
    4d46:	21 51       	subi	r18, 0x11	; 17
    4d48:	31 09       	sbc	r19, r1
    4d4a:	28 17       	cp	r18, r24
    4d4c:	39 07       	cpc	r19, r25
    4d4e:	29 f4       	brne	.+10     	; 0x4d5a <lora_driver_setDeviceIdentifier+0x1e>
    4d50:	bc 01       	movw	r22, r24
    4d52:	88 e4       	ldi	r24, 0x48	; 72
    4d54:	95 e0       	ldi	r25, 0x05	; 5
    4d56:	6c cf       	rjmp	.-296    	; 0x4c30 <_uploadMessageRc>
    4d58:	08 95       	ret
    4d5a:	89 e0       	ldi	r24, 0x09	; 9
    4d5c:	08 95       	ret

00004d5e <lora_driver_setApplicationIdentifier>:
    4d5e:	fc 01       	movw	r30, r24
    4d60:	01 90       	ld	r0, Z+
    4d62:	00 20       	and	r0, r0
    4d64:	e9 f7       	brne	.-6      	; 0x4d60 <lora_driver_setApplicationIdentifier+0x2>
    4d66:	9f 01       	movw	r18, r30
    4d68:	21 51       	subi	r18, 0x11	; 17
    4d6a:	31 09       	sbc	r19, r1
    4d6c:	28 17       	cp	r18, r24
    4d6e:	39 07       	cpc	r19, r25
    4d70:	29 f4       	brne	.+10     	; 0x4d7c <lora_driver_setApplicationIdentifier+0x1e>
    4d72:	bc 01       	movw	r22, r24
    4d74:	87 e5       	ldi	r24, 0x57	; 87
    4d76:	95 e0       	ldi	r25, 0x05	; 5
    4d78:	5b cf       	rjmp	.-330    	; 0x4c30 <_uploadMessageRc>
    4d7a:	08 95       	ret
    4d7c:	89 e0       	ldi	r24, 0x09	; 9
    4d7e:	08 95       	ret

00004d80 <lora_driver_setApplicationKey>:
    4d80:	fc 01       	movw	r30, r24
    4d82:	01 90       	ld	r0, Z+
    4d84:	00 20       	and	r0, r0
    4d86:	e9 f7       	brne	.-6      	; 0x4d82 <lora_driver_setApplicationKey+0x2>
    4d88:	9f 01       	movw	r18, r30
    4d8a:	21 52       	subi	r18, 0x21	; 33
    4d8c:	31 09       	sbc	r19, r1
    4d8e:	28 17       	cp	r18, r24
    4d90:	39 07       	cpc	r19, r25
    4d92:	29 f4       	brne	.+10     	; 0x4d9e <lora_driver_setApplicationKey+0x1e>
    4d94:	bc 01       	movw	r22, r24
    4d96:	86 e6       	ldi	r24, 0x66	; 102
    4d98:	95 e0       	ldi	r25, 0x05	; 5
    4d9a:	4a cf       	rjmp	.-364    	; 0x4c30 <_uploadMessageRc>
    4d9c:	08 95       	ret
    4d9e:	89 e0       	ldi	r24, 0x09	; 9
    4da0:	08 95       	ret

00004da2 <lora_driver_saveMac>:
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	85 ea       	ldi	r24, 0xA5	; 165
    4da8:	95 e0       	ldi	r25, 0x05	; 5
    4daa:	42 cf       	rjmp	.-380    	; 0x4c30 <_uploadMessageRc>
    4dac:	08 95       	ret

00004dae <lora_driver_join>:
    4dae:	0f 93       	push	r16
    4db0:	1f 93       	push	r17
    4db2:	e8 2f       	mov	r30, r24
    4db4:	f0 e0       	ldi	r31, 0x00	; 0
    4db6:	ee 0f       	add	r30, r30
    4db8:	ff 1f       	adc	r31, r31
    4dba:	e1 58       	subi	r30, 0x81	; 129
    4dbc:	f8 4f       	sbci	r31, 0xF8	; 248
    4dbe:	60 81       	ld	r22, Z
    4dc0:	71 81       	ldd	r23, Z+1	; 0x01
    4dc2:	8e ea       	ldi	r24, 0xAE	; 174
    4dc4:	95 e0       	ldi	r25, 0x05	; 5
    4dc6:	34 df       	rcall	.-408    	; 0x4c30 <_uploadMessageRc>
    4dc8:	81 11       	cpse	r24, r1
    4dca:	14 c0       	rjmp	.+40     	; 0x4df4 <lora_driver_join+0x46>
    4dcc:	08 e2       	ldi	r16, 0x28	; 40
    4dce:	15 e0       	ldi	r17, 0x05	; 5
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	4d e2       	ldi	r20, 0x2D	; 45
    4dd6:	50 e0       	ldi	r21, 0x00	; 0
    4dd8:	63 e6       	ldi	r22, 0x63	; 99
    4dda:	75 e1       	ldi	r23, 0x15	; 21
    4ddc:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <_serialReplyBufferHandle>
    4de0:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <_serialReplyBufferHandle+0x1>
    4de4:	0e 94 ff 11 	call	0x23fe	; 0x23fe <xStreamBufferReceive>
    4de8:	88 23       	and	r24, r24
    4dea:	21 f0       	breq	.+8      	; 0x4df4 <lora_driver_join+0x46>
    4dec:	83 e6       	ldi	r24, 0x63	; 99
    4dee:	95 e1       	ldi	r25, 0x15	; 21
    4df0:	aa de       	rcall	.-684    	; 0x4b46 <_reply2ReturnCode>
    4df2:	03 c0       	rjmp	.+6      	; 0x4dfa <lora_driver_join+0x4c>
    4df4:	83 e6       	ldi	r24, 0x63	; 99
    4df6:	95 e1       	ldi	r25, 0x15	; 21
    4df8:	a6 de       	rcall	.-692    	; 0x4b46 <_reply2ReturnCode>
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	08 95       	ret

00004e00 <lora_driver_sendUploadMessage>:
    4e00:	0f 93       	push	r16
    4e02:	1f 93       	push	r17
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	1f 92       	push	r1
    4e0a:	cd b7       	in	r28, 0x3d	; 61
    4e0c:	de b7       	in	r29, 0x3e	; 62
    4e0e:	db 01       	movw	r26, r22
    4e10:	11 96       	adiw	r26, 0x01	; 1
    4e12:	9c 91       	ld	r25, X
    4e14:	11 97       	sbiw	r26, 0x01	; 1
    4e16:	95 31       	cpi	r25, 0x15	; 21
    4e18:	08 f0       	brcs	.+2      	; 0x4e1c <lora_driver_sendUploadMessage+0x1c>
    4e1a:	b4 c0       	rjmp	.+360    	; 0x4f84 <lora_driver_sendUploadMessage+0x184>
    4e1c:	99 23       	and	r25, r25
    4e1e:	81 f1       	breq	.+96     	; 0x4e80 <lora_driver_sendUploadMessage+0x80>
    4e20:	60 e0       	ldi	r22, 0x00	; 0
    4e22:	70 e0       	ldi	r23, 0x00	; 0
    4e24:	27 2f       	mov	r18, r23
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	46 2f       	mov	r20, r22
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	fd 01       	movw	r30, r26
    4e2e:	e4 0f       	add	r30, r20
    4e30:	f5 1f       	adc	r31, r21
    4e32:	92 81       	ldd	r25, Z+2	; 0x02
    4e34:	92 95       	swap	r25
    4e36:	9f 70       	andi	r25, 0x0F	; 15
    4e38:	9a 30       	cpi	r25, 0x0A	; 10
    4e3a:	10 f0       	brcs	.+4      	; 0x4e40 <lora_driver_sendUploadMessage+0x40>
    4e3c:	99 5c       	subi	r25, 0xC9	; 201
    4e3e:	01 c0       	rjmp	.+2      	; 0x4e42 <lora_driver_sendUploadMessage+0x42>
    4e40:	90 5d       	subi	r25, 0xD0	; 208
    4e42:	f9 01       	movw	r30, r18
    4e44:	ec 50       	subi	r30, 0x0C	; 12
    4e46:	fb 4e       	sbci	r31, 0xEB	; 235
    4e48:	90 83       	st	Z, r25
    4e4a:	2f 5f       	subi	r18, 0xFF	; 255
    4e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4e:	fd 01       	movw	r30, r26
    4e50:	e4 0f       	add	r30, r20
    4e52:	f5 1f       	adc	r31, r21
    4e54:	92 81       	ldd	r25, Z+2	; 0x02
    4e56:	9f 70       	andi	r25, 0x0F	; 15
    4e58:	49 2f       	mov	r20, r25
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	4a 30       	cpi	r20, 0x0A	; 10
    4e5e:	51 05       	cpc	r21, r1
    4e60:	14 f0       	brlt	.+4      	; 0x4e66 <lora_driver_sendUploadMessage+0x66>
    4e62:	99 5c       	subi	r25, 0xC9	; 201
    4e64:	01 c0       	rjmp	.+2      	; 0x4e68 <lora_driver_sendUploadMessage+0x68>
    4e66:	90 5d       	subi	r25, 0xD0	; 208
    4e68:	f9 01       	movw	r30, r18
    4e6a:	ec 50       	subi	r30, 0x0C	; 12
    4e6c:	fb 4e       	sbci	r31, 0xEB	; 235
    4e6e:	90 83       	st	Z, r25
    4e70:	7e 5f       	subi	r23, 0xFE	; 254
    4e72:	6f 5f       	subi	r22, 0xFF	; 255
    4e74:	11 96       	adiw	r26, 0x01	; 1
    4e76:	9c 91       	ld	r25, X
    4e78:	11 97       	sbiw	r26, 0x01	; 1
    4e7a:	69 17       	cp	r22, r25
    4e7c:	98 f2       	brcs	.-90     	; 0x4e24 <lora_driver_sendUploadMessage+0x24>
    4e7e:	01 c0       	rjmp	.+2      	; 0x4e82 <lora_driver_sendUploadMessage+0x82>
    4e80:	70 e0       	ldi	r23, 0x00	; 0
    4e82:	e7 2f       	mov	r30, r23
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	ec 50       	subi	r30, 0x0C	; 12
    4e88:	fb 4e       	sbci	r31, 0xEB	; 235
    4e8a:	10 82       	st	Z, r1
    4e8c:	4c 91       	ld	r20, X
    4e8e:	81 11       	cpse	r24, r1
    4e90:	03 c0       	rjmp	.+6      	; 0x4e98 <lora_driver_sendUploadMessage+0x98>
    4e92:	87 eb       	ldi	r24, 0xB7	; 183
    4e94:	95 e0       	ldi	r25, 0x05	; 5
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <lora_driver_sendUploadMessage+0x9c>
    4e98:	89 eb       	ldi	r24, 0xB9	; 185
    4e9a:	95 e0       	ldi	r25, 0x05	; 5
    4e9c:	24 ef       	ldi	r18, 0xF4	; 244
    4e9e:	34 e1       	ldi	r19, 0x14	; 20
    4ea0:	3f 93       	push	r19
    4ea2:	2f 93       	push	r18
    4ea4:	1f 92       	push	r1
    4ea6:	4f 93       	push	r20
    4ea8:	9f 93       	push	r25
    4eaa:	8f 93       	push	r24
    4eac:	8d eb       	ldi	r24, 0xBD	; 189
    4eae:	95 e0       	ldi	r25, 0x05	; 5
    4eb0:	9f 93       	push	r25
    4eb2:	8f 93       	push	r24
    4eb4:	86 e3       	ldi	r24, 0x36	; 54
    4eb6:	95 e1       	ldi	r25, 0x15	; 21
    4eb8:	9f 93       	push	r25
    4eba:	8f 93       	push	r24
    4ebc:	0e 94 b5 38 	call	0x716a	; 0x716a <sprintf>
    4ec0:	60 e0       	ldi	r22, 0x00	; 0
    4ec2:	70 e0       	ldi	r23, 0x00	; 0
    4ec4:	86 e3       	ldi	r24, 0x36	; 54
    4ec6:	95 e1       	ldi	r25, 0x15	; 21
    4ec8:	b3 de       	rcall	.-666    	; 0x4c30 <_uploadMessageRc>
    4eca:	0f b6       	in	r0, 0x3f	; 63
    4ecc:	f8 94       	cli
    4ece:	de bf       	out	0x3e, r29	; 62
    4ed0:	0f be       	out	0x3f, r0	; 63
    4ed2:	cd bf       	out	0x3d, r28	; 61
    4ed4:	81 11       	cpse	r24, r1
    4ed6:	59 c0       	rjmp	.+178    	; 0x4f8a <lora_driver_sendUploadMessage+0x18a>
    4ed8:	08 e2       	ldi	r16, 0x28	; 40
    4eda:	15 e0       	ldi	r17, 0x05	; 5
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	4d e2       	ldi	r20, 0x2D	; 45
    4ee2:	50 e0       	ldi	r21, 0x00	; 0
    4ee4:	63 e6       	ldi	r22, 0x63	; 99
    4ee6:	75 e1       	ldi	r23, 0x15	; 21
    4ee8:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <_serialReplyBufferHandle>
    4eec:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <_serialReplyBufferHandle+0x1>
    4ef0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <xStreamBufferReceive>
    4ef4:	88 23       	and	r24, r24
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <lora_driver_sendUploadMessage+0xfa>
    4ef8:	47 c0       	rjmp	.+142    	; 0x4f88 <lora_driver_sendUploadMessage+0x188>
    4efa:	83 e6       	ldi	r24, 0x63	; 99
    4efc:	95 e1       	ldi	r25, 0x15	; 21
    4efe:	23 de       	rcall	.-954    	; 0x4b46 <_reply2ReturnCode>
    4f00:	8e 30       	cpi	r24, 0x0E	; 14
    4f02:	09 f0       	breq	.+2      	; 0x4f06 <lora_driver_sendUploadMessage+0x106>
    4f04:	42 c0       	rjmp	.+132    	; 0x4f8a <lora_driver_sendUploadMessage+0x18a>
    4f06:	87 e0       	ldi	r24, 0x07	; 7
    4f08:	89 83       	std	Y+1, r24	; 0x01
    4f0a:	80 91 d8 14 	lds	r24, 0x14D8	; 0x8014d8 <_downlinkMessageBuffer>
    4f0e:	90 91 d9 14 	lds	r25, 0x14D9	; 0x8014d9 <_downlinkMessageBuffer+0x1>
    4f12:	89 2b       	or	r24, r25
    4f14:	a9 f1       	breq	.+106    	; 0x4f80 <lora_driver_sendUploadMessage+0x180>
    4f16:	be 01       	movw	r22, r28
    4f18:	6f 5f       	subi	r22, 0xFF	; 255
    4f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f1c:	83 e6       	ldi	r24, 0x63	; 99
    4f1e:	95 e1       	ldi	r25, 0x15	; 21
    4f20:	68 d1       	rcall	.+720    	; 0x51f2 <decode_port_no>
    4f22:	80 93 de 14 	sts	0x14DE, r24	; 0x8014de <_downlinkPayload>
    4f26:	e9 81       	ldd	r30, Y+1	; 0x01
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	ed 59       	subi	r30, 0x9D	; 157
    4f2c:	fa 4e       	sbci	r31, 0xEA	; 234
    4f2e:	df 01       	movw	r26, r30
    4f30:	0d 90       	ld	r0, X+
    4f32:	00 20       	and	r0, r0
    4f34:	e9 f7       	brne	.-6      	; 0x4f30 <lora_driver_sendUploadMessage+0x130>
    4f36:	11 97       	sbiw	r26, 0x01	; 1
    4f38:	ae 1b       	sub	r26, r30
    4f3a:	bf 0b       	sbc	r27, r31
    4f3c:	aa 23       	and	r26, r26
    4f3e:	91 f0       	breq	.+36     	; 0x4f64 <lora_driver_sendUploadMessage+0x164>
    4f40:	bb 27       	eor	r27, r27
    4f42:	cd 01       	movw	r24, r26
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	9c 01       	movw	r18, r24
    4f48:	12 f4       	brpl	.+4      	; 0x4f4e <lora_driver_sendUploadMessage+0x14e>
    4f4a:	2f 5f       	subi	r18, 0xFF	; 255
    4f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f4e:	35 95       	asr	r19
    4f50:	27 95       	ror	r18
    4f52:	20 93 df 14 	sts	0x14DF, r18	; 0x8014df <_downlinkPayload+0x1>
    4f56:	af 01       	movw	r20, r30
    4f58:	4f 5f       	subi	r20, 0xFF	; 255
    4f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f5c:	64 e1       	ldi	r22, 0x14	; 20
    4f5e:	80 ee       	ldi	r24, 0xE0	; 224
    4f60:	94 e1       	ldi	r25, 0x14	; 20
    4f62:	73 d1       	rcall	.+742    	; 0x524a <decode_hexadecimal_string_bytes>
    4f64:	01 e0       	ldi	r16, 0x01	; 1
    4f66:	10 e0       	ldi	r17, 0x00	; 0
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	46 e1       	ldi	r20, 0x16	; 22
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	6e ed       	ldi	r22, 0xDE	; 222
    4f72:	74 e1       	ldi	r23, 0x14	; 20
    4f74:	80 91 d8 14 	lds	r24, 0x14D8	; 0x8014d8 <_downlinkMessageBuffer>
    4f78:	90 91 d9 14 	lds	r25, 0x14D9	; 0x8014d9 <_downlinkMessageBuffer+0x1>
    4f7c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xStreamBufferSend>
    4f80:	8e e0       	ldi	r24, 0x0E	; 14
    4f82:	03 c0       	rjmp	.+6      	; 0x4f8a <lora_driver_sendUploadMessage+0x18a>
    4f84:	84 e1       	ldi	r24, 0x14	; 20
    4f86:	01 c0       	rjmp	.+2      	; 0x4f8a <lora_driver_sendUploadMessage+0x18a>
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	0f 90       	pop	r0
    4f8c:	df 91       	pop	r29
    4f8e:	cf 91       	pop	r28
    4f90:	1f 91       	pop	r17
    4f92:	0f 91       	pop	r16
    4f94:	08 95       	ret

00004f96 <lora_driver_setAdaptiveDataRate>:
    4f96:	81 30       	cpi	r24, 0x01	; 1
    4f98:	19 f0       	breq	.+6      	; 0x4fa0 <lora_driver_setAdaptiveDataRate+0xa>
    4f9a:	6d ec       	ldi	r22, 0xCD	; 205
    4f9c:	75 e0       	ldi	r23, 0x05	; 5
    4f9e:	02 c0       	rjmp	.+4      	; 0x4fa4 <lora_driver_setAdaptiveDataRate+0xe>
    4fa0:	66 ea       	ldi	r22, 0xA6	; 166
    4fa2:	76 e0       	ldi	r23, 0x06	; 6
    4fa4:	81 ed       	ldi	r24, 0xD1	; 209
    4fa6:	95 e0       	ldi	r25, 0x05	; 5
    4fa8:	43 ce       	rjmp	.-890    	; 0x4c30 <_uploadMessageRc>
    4faa:	08 95       	ret

00004fac <lora_driver_setReceiveDelay>:
    4fac:	9f 93       	push	r25
    4fae:	8f 93       	push	r24
    4fb0:	82 e0       	ldi	r24, 0x02	; 2
    4fb2:	96 e0       	ldi	r25, 0x06	; 6
    4fb4:	9f 93       	push	r25
    4fb6:	8f 93       	push	r24
    4fb8:	86 e3       	ldi	r24, 0x36	; 54
    4fba:	95 e1       	ldi	r25, 0x15	; 21
    4fbc:	9f 93       	push	r25
    4fbe:	8f 93       	push	r24
    4fc0:	0e 94 b5 38 	call	0x716a	; 0x716a <sprintf>
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	70 e0       	ldi	r23, 0x00	; 0
    4fc8:	86 e3       	ldi	r24, 0x36	; 54
    4fca:	95 e1       	ldi	r25, 0x15	; 21
    4fcc:	31 de       	rcall	.-926    	; 0x4c30 <_uploadMessageRc>
    4fce:	0f 90       	pop	r0
    4fd0:	0f 90       	pop	r0
    4fd2:	0f 90       	pop	r0
    4fd4:	0f 90       	pop	r0
    4fd6:	0f 90       	pop	r0
    4fd8:	0f 90       	pop	r0
    4fda:	08 95       	ret

00004fdc <lora_driver_configureToEu868>:
    4fdc:	2f 92       	push	r2
    4fde:	3f 92       	push	r3
    4fe0:	4f 92       	push	r4
    4fe2:	5f 92       	push	r5
    4fe4:	6f 92       	push	r6
    4fe6:	7f 92       	push	r7
    4fe8:	8f 92       	push	r8
    4fea:	9f 92       	push	r9
    4fec:	af 92       	push	r10
    4fee:	bf 92       	push	r11
    4ff0:	cf 92       	push	r12
    4ff2:	df 92       	push	r13
    4ff4:	ef 92       	push	r14
    4ff6:	ff 92       	push	r15
    4ff8:	0f 93       	push	r16
    4ffa:	1f 93       	push	r17
    4ffc:	cf 93       	push	r28
    4ffe:	df 93       	push	r29
    5000:	cd b7       	in	r28, 0x3d	; 61
    5002:	de b7       	in	r29, 0x3e	; 62
    5004:	a0 97       	sbiw	r28, 0x20	; 32
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	6f e2       	ldi	r22, 0x2F	; 47
    5012:	76 e0       	ldi	r23, 0x06	; 6
    5014:	8b e3       	ldi	r24, 0x3B	; 59
    5016:	96 e0       	ldi	r25, 0x06	; 6
    5018:	3c dd       	rcall	.-1416   	; 0x4a92 <_uploadMessage>
    501a:	95 dd       	rcall	.-1238   	; 0x4b46 <_reply2ReturnCode>
    501c:	81 11       	cpse	r24, r1
    501e:	a3 c0       	rjmp	.+326    	; 0x5166 <lora_driver_configureToEu868+0x18a>
    5020:	80 e2       	ldi	r24, 0x20	; 32
    5022:	e2 e2       	ldi	r30, 0x22	; 34
    5024:	f2 e0       	ldi	r31, 0x02	; 2
    5026:	de 01       	movw	r26, r28
    5028:	11 96       	adiw	r26, 0x01	; 1
    502a:	01 90       	ld	r0, Z+
    502c:	0d 92       	st	X+, r0
    502e:	8a 95       	dec	r24
    5030:	e1 f7       	brne	.-8      	; 0x502a <lora_driver_configureToEu868+0x4e>
    5032:	9e 01       	movw	r18, r28
    5034:	2f 5f       	subi	r18, 0xFF	; 255
    5036:	3f 4f       	sbci	r19, 0xFF	; 255
    5038:	69 01       	movw	r12, r18
    503a:	e1 2c       	mov	r14, r1
    503c:	f1 2c       	mov	r15, r1
    503e:	0f 2e       	mov	r0, r31
    5040:	f7 e4       	ldi	r31, 0x47	; 71
    5042:	af 2e       	mov	r10, r31
    5044:	f6 e0       	ldi	r31, 0x06	; 6
    5046:	bf 2e       	mov	r11, r31
    5048:	f0 2d       	mov	r31, r0
    504a:	06 e3       	ldi	r16, 0x36	; 54
    504c:	15 e1       	ldi	r17, 0x15	; 21
    504e:	0f 2e       	mov	r0, r31
    5050:	f0 e6       	ldi	r31, 0x60	; 96
    5052:	4f 2e       	mov	r4, r31
    5054:	f6 e0       	ldi	r31, 0x06	; 6
    5056:	5f 2e       	mov	r5, r31
    5058:	f0 2d       	mov	r31, r0
    505a:	0f 2e       	mov	r0, r31
    505c:	f7 e7       	ldi	r31, 0x77	; 119
    505e:	8f 2e       	mov	r8, r31
    5060:	f6 e0       	ldi	r31, 0x06	; 6
    5062:	9f 2e       	mov	r9, r31
    5064:	f0 2d       	mov	r31, r0
    5066:	0f 2e       	mov	r0, r31
    5068:	f1 e9       	ldi	r31, 0x91	; 145
    506a:	6f 2e       	mov	r6, r31
    506c:	f6 e0       	ldi	r31, 0x06	; 6
    506e:	7f 2e       	mov	r7, r31
    5070:	f0 2d       	mov	r31, r0
    5072:	3e 2c       	mov	r3, r14
    5074:	2f 2c       	mov	r2, r15
    5076:	ff 92       	push	r15
    5078:	ef 92       	push	r14
    507a:	bf 92       	push	r11
    507c:	af 92       	push	r10
    507e:	1f 93       	push	r17
    5080:	0f 93       	push	r16
    5082:	0e 94 b5 38 	call	0x716a	; 0x716a <sprintf>
    5086:	60 e0       	ldi	r22, 0x00	; 0
    5088:	70 e0       	ldi	r23, 0x00	; 0
    508a:	c8 01       	movw	r24, r16
    508c:	02 dd       	rcall	.-1532   	; 0x4a92 <_uploadMessage>
    508e:	5b dd       	rcall	.-1354   	; 0x4b46 <_reply2ReturnCode>
    5090:	0f 90       	pop	r0
    5092:	0f 90       	pop	r0
    5094:	0f 90       	pop	r0
    5096:	0f 90       	pop	r0
    5098:	0f 90       	pop	r0
    509a:	0f 90       	pop	r0
    509c:	81 11       	cpse	r24, r1
    509e:	63 c0       	rjmp	.+198    	; 0x5166 <lora_driver_configureToEu868+0x18a>
    50a0:	32 e0       	ldi	r19, 0x02	; 2
    50a2:	3e 15       	cp	r19, r14
    50a4:	e8 f4       	brcc	.+58     	; 0x50e0 <lora_driver_configureToEu868+0x104>
    50a6:	f6 01       	movw	r30, r12
    50a8:	83 81       	ldd	r24, Z+3	; 0x03
    50aa:	8f 93       	push	r24
    50ac:	82 81       	ldd	r24, Z+2	; 0x02
    50ae:	8f 93       	push	r24
    50b0:	81 81       	ldd	r24, Z+1	; 0x01
    50b2:	8f 93       	push	r24
    50b4:	80 81       	ld	r24, Z
    50b6:	8f 93       	push	r24
    50b8:	ff 92       	push	r15
    50ba:	ef 92       	push	r14
    50bc:	5f 92       	push	r5
    50be:	4f 92       	push	r4
    50c0:	1f 93       	push	r17
    50c2:	0f 93       	push	r16
    50c4:	0e 94 b5 38 	call	0x716a	; 0x716a <sprintf>
    50c8:	60 e0       	ldi	r22, 0x00	; 0
    50ca:	70 e0       	ldi	r23, 0x00	; 0
    50cc:	c8 01       	movw	r24, r16
    50ce:	e1 dc       	rcall	.-1598   	; 0x4a92 <_uploadMessage>
    50d0:	3a dd       	rcall	.-1420   	; 0x4b46 <_reply2ReturnCode>
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	f8 94       	cli
    50d6:	de bf       	out	0x3e, r29	; 62
    50d8:	0f be       	out	0x3f, r0	; 63
    50da:	cd bf       	out	0x3d, r28	; 61
    50dc:	81 11       	cpse	r24, r1
    50de:	43 c0       	rjmp	.+134    	; 0x5166 <lora_driver_configureToEu868+0x18a>
    50e0:	2f 92       	push	r2
    50e2:	3f 92       	push	r3
    50e4:	9f 92       	push	r9
    50e6:	8f 92       	push	r8
    50e8:	1f 93       	push	r17
    50ea:	0f 93       	push	r16
    50ec:	0e 94 b5 38 	call	0x716a	; 0x716a <sprintf>
    50f0:	60 e0       	ldi	r22, 0x00	; 0
    50f2:	70 e0       	ldi	r23, 0x00	; 0
    50f4:	c8 01       	movw	r24, r16
    50f6:	cd dc       	rcall	.-1638   	; 0x4a92 <_uploadMessage>
    50f8:	26 dd       	rcall	.-1460   	; 0x4b46 <_reply2ReturnCode>
    50fa:	0f 90       	pop	r0
    50fc:	0f 90       	pop	r0
    50fe:	0f 90       	pop	r0
    5100:	0f 90       	pop	r0
    5102:	0f 90       	pop	r0
    5104:	0f 90       	pop	r0
    5106:	81 11       	cpse	r24, r1
    5108:	2e c0       	rjmp	.+92     	; 0x5166 <lora_driver_configureToEu868+0x18a>
    510a:	2f 92       	push	r2
    510c:	3f 92       	push	r3
    510e:	7f 92       	push	r7
    5110:	6f 92       	push	r6
    5112:	1f 93       	push	r17
    5114:	0f 93       	push	r16
    5116:	0e 94 b5 38 	call	0x716a	; 0x716a <sprintf>
    511a:	60 e0       	ldi	r22, 0x00	; 0
    511c:	70 e0       	ldi	r23, 0x00	; 0
    511e:	c8 01       	movw	r24, r16
    5120:	b8 dc       	rcall	.-1680   	; 0x4a92 <_uploadMessage>
    5122:	11 dd       	rcall	.-1502   	; 0x4b46 <_reply2ReturnCode>
    5124:	0f 90       	pop	r0
    5126:	0f 90       	pop	r0
    5128:	0f 90       	pop	r0
    512a:	0f 90       	pop	r0
    512c:	0f 90       	pop	r0
    512e:	0f 90       	pop	r0
    5130:	81 11       	cpse	r24, r1
    5132:	19 c0       	rjmp	.+50     	; 0x5166 <lora_driver_configureToEu868+0x18a>
    5134:	3f ef       	ldi	r19, 0xFF	; 255
    5136:	e3 1a       	sub	r14, r19
    5138:	f3 0a       	sbc	r15, r19
    513a:	84 e0       	ldi	r24, 0x04	; 4
    513c:	c8 0e       	add	r12, r24
    513e:	d1 1c       	adc	r13, r1
    5140:	98 e0       	ldi	r25, 0x08	; 8
    5142:	e9 16       	cp	r14, r25
    5144:	f1 04       	cpc	r15, r1
    5146:	09 f0       	breq	.+2      	; 0x514a <lora_driver_configureToEu868+0x16e>
    5148:	94 cf       	rjmp	.-216    	; 0x5072 <lora_driver_configureToEu868+0x96>
    514a:	60 e0       	ldi	r22, 0x00	; 0
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	89 ea       	ldi	r24, 0xA9	; 169
    5150:	96 e0       	ldi	r25, 0x06	; 6
    5152:	9f dc       	rcall	.-1730   	; 0x4a92 <_uploadMessage>
    5154:	f8 dc       	rcall	.-1552   	; 0x4b46 <_reply2ReturnCode>
    5156:	81 11       	cpse	r24, r1
    5158:	06 c0       	rjmp	.+12     	; 0x5166 <lora_driver_configureToEu868+0x18a>
    515a:	60 e0       	ldi	r22, 0x00	; 0
    515c:	70 e0       	ldi	r23, 0x00	; 0
    515e:	8a eb       	ldi	r24, 0xBA	; 186
    5160:	96 e0       	ldi	r25, 0x06	; 6
    5162:	97 dc       	rcall	.-1746   	; 0x4a92 <_uploadMessage>
    5164:	f0 dc       	rcall	.-1568   	; 0x4b46 <_reply2ReturnCode>
    5166:	a0 96       	adiw	r28, 0x20	; 32
    5168:	0f b6       	in	r0, 0x3f	; 63
    516a:	f8 94       	cli
    516c:	de bf       	out	0x3e, r29	; 62
    516e:	0f be       	out	0x3f, r0	; 63
    5170:	cd bf       	out	0x3d, r28	; 61
    5172:	df 91       	pop	r29
    5174:	cf 91       	pop	r28
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	ff 90       	pop	r15
    517c:	ef 90       	pop	r14
    517e:	df 90       	pop	r13
    5180:	cf 90       	pop	r12
    5182:	bf 90       	pop	r11
    5184:	af 90       	pop	r10
    5186:	9f 90       	pop	r9
    5188:	8f 90       	pop	r8
    518a:	7f 90       	pop	r7
    518c:	6f 90       	pop	r6
    518e:	5f 90       	pop	r5
    5190:	4f 90       	pop	r4
    5192:	3f 90       	pop	r3
    5194:	2f 90       	pop	r2
    5196:	08 95       	ret

00005198 <lora_driver_setOtaaIdentity>:
    5198:	ef 92       	push	r14
    519a:	ff 92       	push	r15
    519c:	0f 93       	push	r16
    519e:	1f 93       	push	r17
    51a0:	cf 93       	push	r28
    51a2:	df 93       	push	r29
    51a4:	ec 01       	movw	r28, r24
    51a6:	8b 01       	movw	r16, r22
    51a8:	7a 01       	movw	r14, r20
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	f4 de       	rcall	.-536    	; 0x4f96 <lora_driver_setAdaptiveDataRate>
    51ae:	81 11       	cpse	r24, r1
    51b0:	0d c0       	rjmp	.+26     	; 0x51cc <lora_driver_setOtaaIdentity+0x34>
    51b2:	ce 01       	movw	r24, r28
    51b4:	d4 dd       	rcall	.-1112   	; 0x4d5e <lora_driver_setApplicationIdentifier>
    51b6:	81 11       	cpse	r24, r1
    51b8:	09 c0       	rjmp	.+18     	; 0x51cc <lora_driver_setOtaaIdentity+0x34>
    51ba:	c8 01       	movw	r24, r16
    51bc:	e1 dd       	rcall	.-1086   	; 0x4d80 <lora_driver_setApplicationKey>
    51be:	81 11       	cpse	r24, r1
    51c0:	05 c0       	rjmp	.+10     	; 0x51cc <lora_driver_setOtaaIdentity+0x34>
    51c2:	c7 01       	movw	r24, r14
    51c4:	bb dd       	rcall	.-1162   	; 0x4d3c <lora_driver_setDeviceIdentifier>
    51c6:	81 11       	cpse	r24, r1
    51c8:	01 c0       	rjmp	.+2      	; 0x51cc <lora_driver_setOtaaIdentity+0x34>
    51ca:	eb dd       	rcall	.-1066   	; 0x4da2 <lora_driver_saveMac>
    51cc:	df 91       	pop	r29
    51ce:	cf 91       	pop	r28
    51d0:	1f 91       	pop	r17
    51d2:	0f 91       	pop	r16
    51d4:	ff 90       	pop	r15
    51d6:	ef 90       	pop	r14
    51d8:	08 95       	ret

000051da <lora_driver_mapReturnCodeToText>:
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	fc 01       	movw	r30, r24
    51de:	ee 0f       	add	r30, r30
    51e0:	ff 1f       	adc	r31, r31
    51e2:	8e 0f       	add	r24, r30
    51e4:	9f 1f       	adc	r25, r31
    51e6:	fc 01       	movw	r30, r24
    51e8:	ed 57       	subi	r30, 0x7D	; 125
    51ea:	f8 4f       	sbci	r31, 0xF8	; 248
    51ec:	81 81       	ldd	r24, Z+1	; 0x01
    51ee:	92 81       	ldd	r25, Z+2	; 0x02
    51f0:	08 95       	ret

000051f2 <decode_port_no>:
    51f2:	dc 01       	movw	r26, r24
    51f4:	00 97       	sbiw	r24, 0x00	; 0
    51f6:	29 f1       	breq	.+74     	; 0x5242 <decode_port_no+0x50>
    51f8:	fb 01       	movw	r30, r22
    51fa:	20 81       	ld	r18, Z
    51fc:	fc 01       	movw	r30, r24
    51fe:	01 90       	ld	r0, Z+
    5200:	00 20       	and	r0, r0
    5202:	e9 f7       	brne	.-6      	; 0x51fe <decode_port_no+0xc>
    5204:	31 97       	sbiw	r30, 0x01	; 1
    5206:	e8 1b       	sub	r30, r24
    5208:	f9 0b       	sbc	r31, r25
    520a:	82 2f       	mov	r24, r18
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	e8 17       	cp	r30, r24
    5210:	f9 07       	cpc	r31, r25
    5212:	c8 f0       	brcs	.+50     	; 0x5246 <decode_port_no+0x54>
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	08 c0       	rjmp	.+16     	; 0x5228 <decode_port_no+0x36>
    5218:	88 0f       	add	r24, r24
    521a:	38 2f       	mov	r19, r24
    521c:	33 0f       	add	r19, r19
    521e:	33 0f       	add	r19, r19
    5220:	83 0f       	add	r24, r19
    5222:	80 53       	subi	r24, 0x30	; 48
    5224:	89 0f       	add	r24, r25
    5226:	2f 5f       	subi	r18, 0xFF	; 255
    5228:	fd 01       	movw	r30, r26
    522a:	e2 0f       	add	r30, r18
    522c:	f1 1d       	adc	r31, r1
    522e:	90 81       	ld	r25, Z
    5230:	30 ed       	ldi	r19, 0xD0	; 208
    5232:	39 0f       	add	r19, r25
    5234:	3a 30       	cpi	r19, 0x0A	; 10
    5236:	10 f4       	brcc	.+4      	; 0x523c <decode_port_no+0x4a>
    5238:	91 11       	cpse	r25, r1
    523a:	ee cf       	rjmp	.-36     	; 0x5218 <decode_port_no+0x26>
    523c:	fb 01       	movw	r30, r22
    523e:	20 83       	st	Z, r18
    5240:	08 95       	ret
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	08 95       	ret
    5246:	80 e0       	ldi	r24, 0x00	; 0
    5248:	08 95       	ret

0000524a <decode_hexadecimal_string_bytes>:
    524a:	0f 93       	push	r16
    524c:	1f 93       	push	r17
    524e:	cf 93       	push	r28
    5250:	df 93       	push	r29
    5252:	dc 01       	movw	r26, r24
    5254:	ea 01       	movw	r28, r20
    5256:	20 97       	sbiw	r28, 0x00	; 0
    5258:	e1 f1       	breq	.+120    	; 0x52d2 <decode_hexadecimal_string_bytes+0x88>
    525a:	fa 01       	movw	r30, r20
    525c:	01 90       	ld	r0, Z+
    525e:	00 20       	and	r0, r0
    5260:	e9 f7       	brne	.-6      	; 0x525c <decode_hexadecimal_string_bytes+0x12>
    5262:	31 97       	sbiw	r30, 0x01	; 1
    5264:	e4 1b       	sub	r30, r20
    5266:	f5 0b       	sbc	r31, r21
    5268:	32 97       	sbiw	r30, 0x02	; 2
    526a:	10 f5       	brcc	.+68     	; 0x52b0 <decode_hexadecimal_string_bytes+0x66>
    526c:	32 c0       	rjmp	.+100    	; 0x52d2 <decode_hexadecimal_string_bytes+0x88>
    526e:	8d 01       	movw	r16, r26
    5270:	04 0f       	add	r16, r20
    5272:	15 1f       	adc	r17, r21
    5274:	30 e0       	ldi	r19, 0x00	; 0
    5276:	ae 01       	movw	r20, r28
    5278:	42 0f       	add	r20, r18
    527a:	53 1f       	adc	r21, r19
    527c:	fa 01       	movw	r30, r20
    527e:	90 81       	ld	r25, Z
    5280:	91 34       	cpi	r25, 0x41	; 65
    5282:	28 f0       	brcs	.+10     	; 0x528e <decode_hexadecimal_string_bytes+0x44>
    5284:	97 53       	subi	r25, 0x37	; 55
    5286:	59 2f       	mov	r21, r25
    5288:	52 95       	swap	r21
    528a:	50 7f       	andi	r21, 0xF0	; 240
    528c:	03 c0       	rjmp	.+6      	; 0x5294 <decode_hexadecimal_string_bytes+0x4a>
    528e:	59 2f       	mov	r21, r25
    5290:	52 95       	swap	r21
    5292:	50 7f       	andi	r21, 0xF0	; 240
    5294:	2c 0f       	add	r18, r28
    5296:	3d 1f       	adc	r19, r29
    5298:	f9 01       	movw	r30, r18
    529a:	91 81       	ldd	r25, Z+1	; 0x01
    529c:	91 34       	cpi	r25, 0x41	; 65
    529e:	10 f0       	brcs	.+4      	; 0x52a4 <decode_hexadecimal_string_bytes+0x5a>
    52a0:	97 53       	subi	r25, 0x37	; 55
    52a2:	01 c0       	rjmp	.+2      	; 0x52a6 <decode_hexadecimal_string_bytes+0x5c>
    52a4:	90 53       	subi	r25, 0x30	; 48
    52a6:	95 0f       	add	r25, r21
    52a8:	f8 01       	movw	r30, r16
    52aa:	90 83       	st	Z, r25
    52ac:	8f 5f       	subi	r24, 0xFF	; 255
    52ae:	01 c0       	rjmp	.+2      	; 0x52b2 <decode_hexadecimal_string_bytes+0x68>
    52b0:	80 e0       	ldi	r24, 0x00	; 0
    52b2:	28 2f       	mov	r18, r24
    52b4:	22 0f       	add	r18, r18
    52b6:	48 2f       	mov	r20, r24
    52b8:	50 e0       	ldi	r21, 0x00	; 0
    52ba:	fe 01       	movw	r30, r28
    52bc:	01 90       	ld	r0, Z+
    52be:	00 20       	and	r0, r0
    52c0:	e9 f7       	brne	.-6      	; 0x52bc <decode_hexadecimal_string_bytes+0x72>
    52c2:	31 97       	sbiw	r30, 0x01	; 1
    52c4:	ec 1b       	sub	r30, r28
    52c6:	fd 0b       	sbc	r31, r29
    52c8:	4e 17       	cp	r20, r30
    52ca:	5f 07       	cpc	r21, r31
    52cc:	10 f4       	brcc	.+4      	; 0x52d2 <decode_hexadecimal_string_bytes+0x88>
    52ce:	86 13       	cpse	r24, r22
    52d0:	ce cf       	rjmp	.-100    	; 0x526e <decode_hexadecimal_string_bytes+0x24>
    52d2:	df 91       	pop	r29
    52d4:	cf 91       	pop	r28
    52d6:	1f 91       	pop	r17
    52d8:	0f 91       	pop	r16
    52da:	08 95       	ret

000052dc <_serialCallBack>:
    52dc:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <crc_sum.1945>
    52e0:	86 0f       	add	r24, r22
    52e2:	80 93 93 15 	sts	0x1593, r24	; 0x801593 <crc_sum.1945>
    52e6:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <_mh_state>
    52ea:	91 30       	cpi	r25, 0x01	; 1
    52ec:	79 f0       	breq	.+30     	; 0x530c <_serialCallBack+0x30>
    52ee:	28 f0       	brcs	.+10     	; 0x52fa <_serialCallBack+0x1e>
    52f0:	92 30       	cpi	r25, 0x02	; 2
    52f2:	a9 f0       	breq	.+42     	; 0x531e <_serialCallBack+0x42>
    52f4:	93 30       	cpi	r25, 0x03	; 3
    52f6:	19 f1       	breq	.+70     	; 0x533e <_serialCallBack+0x62>
    52f8:	08 95       	ret
    52fa:	6f 3f       	cpi	r22, 0xFF	; 255
    52fc:	09 f0       	breq	.+2      	; 0x5300 <_serialCallBack+0x24>
    52fe:	48 c0       	rjmp	.+144    	; 0x5390 <_serialCallBack+0xb4>
    5300:	10 92 93 15 	sts	0x1593, r1	; 0x801593 <crc_sum.1945>
    5304:	81 e0       	ldi	r24, 0x01	; 1
    5306:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <_mh_state>
    530a:	08 95       	ret
    530c:	66 38       	cpi	r22, 0x86	; 134
    530e:	09 f0       	breq	.+2      	; 0x5312 <_serialCallBack+0x36>
    5310:	3f c0       	rjmp	.+126    	; 0x5390 <_serialCallBack+0xb4>
    5312:	10 92 92 15 	sts	0x1592, r1	; 0x801592 <inDex.1943>
    5316:	82 e0       	ldi	r24, 0x02	; 2
    5318:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <_mh_state>
    531c:	08 95       	ret
    531e:	e0 91 92 15 	lds	r30, 0x1592	; 0x801592 <inDex.1943>
    5322:	81 e0       	ldi	r24, 0x01	; 1
    5324:	8e 0f       	add	r24, r30
    5326:	80 93 92 15 	sts	0x1592, r24	; 0x801592 <inDex.1943>
    532a:	f0 e0       	ldi	r31, 0x00	; 0
    532c:	e0 57       	subi	r30, 0x70	; 112
    532e:	fa 4e       	sbci	r31, 0xEA	; 234
    5330:	60 83       	st	Z, r22
    5332:	82 30       	cpi	r24, 0x02	; 2
    5334:	69 f5       	brne	.+90     	; 0x5390 <_serialCallBack+0xb4>
    5336:	83 e0       	ldi	r24, 0x03	; 3
    5338:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <_mh_state>
    533c:	08 95       	ret
    533e:	90 91 92 15 	lds	r25, 0x1592	; 0x801592 <inDex.1943>
    5342:	21 e0       	ldi	r18, 0x01	; 1
    5344:	29 0f       	add	r18, r25
    5346:	20 93 92 15 	sts	0x1592, r18	; 0x801592 <inDex.1943>
    534a:	96 30       	cpi	r25, 0x06	; 6
    534c:	09 f5       	brne	.+66     	; 0x5390 <_serialCallBack+0xb4>
    534e:	81 11       	cpse	r24, r1
    5350:	0e c0       	rjmp	.+28     	; 0x536e <_serialCallBack+0x92>
    5352:	e0 e9       	ldi	r30, 0x90	; 144
    5354:	f5 e1       	ldi	r31, 0x15	; 21
    5356:	80 81       	ld	r24, Z
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	98 2f       	mov	r25, r24
    535c:	88 27       	eor	r24, r24
    535e:	21 81       	ldd	r18, Z+1	; 0x01
    5360:	82 0f       	add	r24, r18
    5362:	91 1d       	adc	r25, r1
    5364:	90 93 98 15 	sts	0x1598, r25	; 0x801598 <_ppm+0x1>
    5368:	80 93 97 15 	sts	0x1597, r24	; 0x801597 <_ppm>
    536c:	04 c0       	rjmp	.+8      	; 0x5376 <_serialCallBack+0x9a>
    536e:	10 92 98 15 	sts	0x1598, r1	; 0x801598 <_ppm+0x1>
    5372:	10 92 97 15 	sts	0x1597, r1	; 0x801597 <_ppm>
    5376:	10 92 96 15 	sts	0x1596, r1	; 0x801596 <_mh_state>
    537a:	e0 91 94 15 	lds	r30, 0x1594	; 0x801594 <_appCallBack>
    537e:	f0 91 95 15 	lds	r31, 0x1595	; 0x801595 <_appCallBack+0x1>
    5382:	30 97       	sbiw	r30, 0x00	; 0
    5384:	29 f0       	breq	.+10     	; 0x5390 <_serialCallBack+0xb4>
    5386:	80 91 97 15 	lds	r24, 0x1597	; 0x801597 <_ppm>
    538a:	90 91 98 15 	lds	r25, 0x1598	; 0x801598 <_ppm+0x1>
    538e:	19 95       	eicall
    5390:	08 95       	ret

00005392 <mh_z19_initialise>:
    5392:	8f 92       	push	r8
    5394:	9f 92       	push	r9
    5396:	af 92       	push	r10
    5398:	cf 92       	push	r12
    539a:	ef 92       	push	r14
    539c:	0f 93       	push	r16
    539e:	0f 2e       	mov	r0, r31
    53a0:	fe e6       	ldi	r31, 0x6E	; 110
    53a2:	8f 2e       	mov	r8, r31
    53a4:	f9 e2       	ldi	r31, 0x29	; 41
    53a6:	9f 2e       	mov	r9, r31
    53a8:	f0 2d       	mov	r31, r0
    53aa:	68 94       	set
    53ac:	aa 24       	eor	r10, r10
    53ae:	a4 f8       	bld	r10, 4
    53b0:	68 94       	set
    53b2:	cc 24       	eor	r12, r12
    53b4:	c4 f8       	bld	r12, 4
    53b6:	e1 2c       	mov	r14, r1
    53b8:	00 e0       	ldi	r16, 0x00	; 0
    53ba:	23 e0       	ldi	r18, 0x03	; 3
    53bc:	40 e8       	ldi	r20, 0x80	; 128
    53be:	55 e2       	ldi	r21, 0x25	; 37
    53c0:	60 e0       	ldi	r22, 0x00	; 0
    53c2:	70 e0       	ldi	r23, 0x00	; 0
    53c4:	73 d0       	rcall	.+230    	; 0x54ac <serial_create>
    53c6:	90 93 9a 15 	sts	0x159A, r25	; 0x80159a <_serial+0x1>
    53ca:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <_serial>
    53ce:	0f 91       	pop	r16
    53d0:	ef 90       	pop	r14
    53d2:	cf 90       	pop	r12
    53d4:	af 90       	pop	r10
    53d6:	9f 90       	pop	r9
    53d8:	8f 90       	pop	r8
    53da:	08 95       	ret

000053dc <mh_z19_injectCallBack>:
    53dc:	90 93 95 15 	sts	0x1595, r25	; 0x801595 <_appCallBack+0x1>
    53e0:	80 93 94 15 	sts	0x1594, r24	; 0x801594 <_appCallBack>
    53e4:	08 95       	ret

000053e6 <mh_z19_takeMeassuring>:
    53e6:	cf 93       	push	r28
    53e8:	df 93       	push	r29
    53ea:	cd b7       	in	r28, 0x3d	; 61
    53ec:	de b7       	in	r29, 0x3e	; 62
    53ee:	29 97       	sbiw	r28, 0x09	; 9
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	89 e0       	ldi	r24, 0x09	; 9
    53fc:	e2 e4       	ldi	r30, 0x42	; 66
    53fe:	f2 e0       	ldi	r31, 0x02	; 2
    5400:	9e 01       	movw	r18, r28
    5402:	2f 5f       	subi	r18, 0xFF	; 255
    5404:	3f 4f       	sbci	r19, 0xFF	; 255
    5406:	d9 01       	movw	r26, r18
    5408:	01 90       	ld	r0, Z+
    540a:	0d 92       	st	X+, r0
    540c:	8a 95       	dec	r24
    540e:	e1 f7       	brne	.-8      	; 0x5408 <mh_z19_takeMeassuring+0x22>
    5410:	10 92 98 15 	sts	0x1598, r1	; 0x801598 <_ppm+0x1>
    5414:	10 92 97 15 	sts	0x1597, r1	; 0x801597 <_ppm>
    5418:	80 91 99 15 	lds	r24, 0x1599	; 0x801599 <_serial>
    541c:	90 91 9a 15 	lds	r25, 0x159A	; 0x80159a <_serial+0x1>
    5420:	00 97       	sbiw	r24, 0x00	; 0
    5422:	31 f0       	breq	.+12     	; 0x5430 <mh_z19_takeMeassuring+0x4a>
    5424:	42 2f       	mov	r20, r18
    5426:	53 2f       	mov	r21, r19
    5428:	69 e0       	ldi	r22, 0x09	; 9
    542a:	0f d1       	rcall	.+542    	; 0x564a <serial_sendBytes>
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	01 c0       	rjmp	.+2      	; 0x5432 <mh_z19_takeMeassuring+0x4c>
    5430:	82 e0       	ldi	r24, 0x02	; 2
    5432:	29 96       	adiw	r28, 0x09	; 9
    5434:	0f b6       	in	r0, 0x3f	; 63
    5436:	f8 94       	cli
    5438:	de bf       	out	0x3e, r29	; 62
    543a:	0f be       	out	0x3f, r0	; 63
    543c:	cd bf       	out	0x3d, r28	; 61
    543e:	df 91       	pop	r29
    5440:	cf 91       	pop	r28
    5442:	08 95       	ret

00005444 <rc_servo_setPosition>:
    5444:	65 36       	cpi	r22, 0x65	; 101
    5446:	0c f0       	brlt	.+2      	; 0x544a <rc_servo_setPosition+0x6>
    5448:	64 e6       	ldi	r22, 0x64	; 100
    544a:	6c 39       	cpi	r22, 0x9C	; 156
    544c:	0c f4       	brge	.+2      	; 0x5450 <rc_servo_setPosition+0xc>
    544e:	6c e9       	ldi	r22, 0x9C	; 156
    5450:	96 ef       	ldi	r25, 0xF6	; 246
    5452:	69 02       	muls	r22, r25
    5454:	b0 01       	movw	r22, r0
    5456:	11 24       	eor	r1, r1
    5458:	68 54       	subi	r22, 0x48	; 72
    545a:	74 4f       	sbci	r23, 0xF4	; 244
    545c:	81 11       	cpse	r24, r1
    545e:	05 c0       	rjmp	.+10     	; 0x546a <rc_servo_setPosition+0x26>
    5460:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    5464:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    5468:	08 95       	ret
    546a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    546e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    5472:	08 95       	ret

00005474 <rc_servo_initialise>:
    5474:	ea e0       	ldi	r30, 0x0A	; 10
    5476:	f1 e0       	ldi	r31, 0x01	; 1
    5478:	80 81       	ld	r24, Z
    547a:	88 61       	ori	r24, 0x18	; 24
    547c:	80 83       	st	Z, r24
    547e:	8f e3       	ldi	r24, 0x3F	; 63
    5480:	9c e9       	ldi	r25, 0x9C	; 156
    5482:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    5486:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    548a:	60 e0       	ldi	r22, 0x00	; 0
    548c:	80 e0       	ldi	r24, 0x00	; 0
    548e:	da df       	rcall	.-76     	; 0x5444 <rc_servo_setPosition>
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	d7 df       	rcall	.-82     	; 0x5444 <rc_servo_setPosition>
    5496:	e0 e2       	ldi	r30, 0x20	; 32
    5498:	f1 e0       	ldi	r31, 0x01	; 1
    549a:	80 81       	ld	r24, Z
    549c:	82 6a       	ori	r24, 0xA2	; 162
    549e:	80 83       	st	Z, r24
    54a0:	e1 e2       	ldi	r30, 0x21	; 33
    54a2:	f1 e0       	ldi	r31, 0x01	; 1
    54a4:	80 81       	ld	r24, Z
    54a6:	8a 61       	ori	r24, 0x1A	; 26
    54a8:	80 83       	st	Z, r24
    54aa:	08 95       	ret

000054ac <serial_create>:
    54ac:	2f 92       	push	r2
    54ae:	3f 92       	push	r3
    54b0:	4f 92       	push	r4
    54b2:	5f 92       	push	r5
    54b4:	6f 92       	push	r6
    54b6:	7f 92       	push	r7
    54b8:	8f 92       	push	r8
    54ba:	9f 92       	push	r9
    54bc:	af 92       	push	r10
    54be:	cf 92       	push	r12
    54c0:	ef 92       	push	r14
    54c2:	ff 92       	push	r15
    54c4:	0f 93       	push	r16
    54c6:	1f 93       	push	r17
    54c8:	cf 93       	push	r28
    54ca:	df 93       	push	r29
    54cc:	cd b7       	in	r28, 0x3d	; 61
    54ce:	de b7       	in	r29, 0x3e	; 62
    54d0:	f8 2e       	mov	r15, r24
    54d2:	2a 01       	movw	r4, r20
    54d4:	3b 01       	movw	r6, r22
    54d6:	88 e0       	ldi	r24, 0x08	; 8
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	0e 94 02 36 	call	0x6c04	; 0x6c04 <malloc>
    54de:	8c 01       	movw	r16, r24
    54e0:	8f 2d       	mov	r24, r15
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	fc 01       	movw	r30, r24
    54e6:	ee 0f       	add	r30, r30
    54e8:	ff 1f       	adc	r31, r31
    54ea:	e5 56       	subi	r30, 0x65	; 101
    54ec:	fa 4e       	sbci	r31, 0xEA	; 234
    54ee:	11 83       	std	Z+1, r17	; 0x01
    54f0:	00 83       	st	Z, r16
    54f2:	01 15       	cp	r16, r1
    54f4:	11 05       	cpc	r17, r1
    54f6:	09 f4       	brne	.+2      	; 0x54fa <serial_create+0x4e>
    54f8:	6b c0       	rjmp	.+214    	; 0x55d0 <serial_create+0x124>
    54fa:	88 0f       	add	r24, r24
    54fc:	99 1f       	adc	r25, r25
    54fe:	fc 01       	movw	r30, r24
    5500:	e5 5f       	subi	r30, 0xF5	; 245
    5502:	fd 4f       	sbci	r31, 0xFD	; 253
    5504:	80 81       	ld	r24, Z
    5506:	91 81       	ldd	r25, Z+1	; 0x01
    5508:	d8 01       	movw	r26, r16
    550a:	8d 93       	st	X+, r24
    550c:	9c 93       	st	X, r25
    550e:	8c 2d       	mov	r24, r12
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	88 0f       	add	r24, r24
    5514:	99 1f       	adc	r25, r25
    5516:	88 0f       	add	r24, r24
    5518:	99 1f       	adc	r25, r25
    551a:	0e 94 02 36 	call	0x6c04	; 0x6c04 <malloc>
    551e:	1c 01       	movw	r2, r24
    5520:	86 e0       	ldi	r24, 0x06	; 6
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	0e 94 02 36 	call	0x6c04	; 0x6c04 <malloc>
    5528:	7c 01       	movw	r14, r24
    552a:	4c 2d       	mov	r20, r12
    552c:	b1 01       	movw	r22, r2
    552e:	bf d6       	rcall	.+3454   	; 0x62ae <fifo_init>
    5530:	f8 01       	movw	r30, r16
    5532:	f5 82       	std	Z+5, r15	; 0x05
    5534:	e4 82       	std	Z+4, r14	; 0x04
    5536:	8a 2d       	mov	r24, r10
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	88 0f       	add	r24, r24
    553c:	99 1f       	adc	r25, r25
    553e:	88 0f       	add	r24, r24
    5540:	99 1f       	adc	r25, r25
    5542:	0e 94 02 36 	call	0x6c04	; 0x6c04 <malloc>
    5546:	1c 01       	movw	r2, r24
    5548:	86 e0       	ldi	r24, 0x06	; 6
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	0e 94 02 36 	call	0x6c04	; 0x6c04 <malloc>
    5550:	7c 01       	movw	r14, r24
    5552:	4a 2d       	mov	r20, r10
    5554:	b1 01       	movw	r22, r2
    5556:	ab d6       	rcall	.+3414   	; 0x62ae <fifo_init>
    5558:	d8 01       	movw	r26, r16
    555a:	13 96       	adiw	r26, 0x03	; 3
    555c:	fc 92       	st	X, r15
    555e:	ee 92       	st	-X, r14
    5560:	12 97       	sbiw	r26, 0x02	; 2
    5562:	17 96       	adiw	r26, 0x07	; 7
    5564:	9c 92       	st	X, r9
    5566:	8e 92       	st	-X, r8
    5568:	16 97       	sbiw	r26, 0x06	; 6
    556a:	ff b6       	in	r15, 0x3f	; 63
    556c:	f8 94       	cli
    556e:	ed 91       	ld	r30, X+
    5570:	fc 91       	ld	r31, X
    5572:	11 97       	sbiw	r26, 0x01	; 1
    5574:	36 97       	sbiw	r30, 0x06	; 6
    5576:	80 81       	ld	r24, Z
    5578:	82 60       	ori	r24, 0x02	; 2
    557a:	80 83       	st	Z, r24
    557c:	8d 90       	ld	r8, X+
    557e:	9c 90       	ld	r9, X
    5580:	c3 01       	movw	r24, r6
    5582:	b2 01       	movw	r22, r4
    5584:	0e 94 6d 35 	call	0x6ada	; 0x6ada <__floatunsisf>
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	40 e0       	ldi	r20, 0x00	; 0
    558e:	51 e4       	ldi	r21, 0x41	; 65
    5590:	a9 d8       	rcall	.-3758   	; 0x46e4 <__mulsf3>
    5592:	9b 01       	movw	r18, r22
    5594:	ac 01       	movw	r20, r24
    5596:	60 e0       	ldi	r22, 0x00	; 0
    5598:	74 e2       	ldi	r23, 0x24	; 36
    559a:	84 e7       	ldi	r24, 0x74	; 116
    559c:	9b e4       	ldi	r25, 0x4B	; 75
    559e:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <__divsf3>
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	40 e8       	ldi	r20, 0x80	; 128
    55a8:	5f e3       	ldi	r21, 0x3F	; 63
    55aa:	ff d8       	rcall	.-3586   	; 0x47aa <__subsf3>
    55ac:	0e 94 c6 22 	call	0x458c	; 0x458c <__fixunssfsi>
    55b0:	f4 01       	movw	r30, r8
    55b2:	32 97       	sbiw	r30, 0x02	; 2
    55b4:	60 83       	st	Z, r22
    55b6:	d8 01       	movw	r26, r16
    55b8:	ed 91       	ld	r30, X+
    55ba:	fc 91       	ld	r31, X
    55bc:	11 97       	sbiw	r26, 0x01	; 1
    55be:	35 97       	sbiw	r30, 0x05	; 5
    55c0:	88 e9       	ldi	r24, 0x98	; 152
    55c2:	80 83       	st	Z, r24
    55c4:	ed 91       	ld	r30, X+
    55c6:	fc 91       	ld	r31, X
    55c8:	34 97       	sbiw	r30, 0x04	; 4
    55ca:	86 e0       	ldi	r24, 0x06	; 6
    55cc:	80 83       	st	Z, r24
    55ce:	ff be       	out	0x3f, r15	; 63
    55d0:	c8 01       	movw	r24, r16
    55d2:	df 91       	pop	r29
    55d4:	cf 91       	pop	r28
    55d6:	1f 91       	pop	r17
    55d8:	0f 91       	pop	r16
    55da:	ff 90       	pop	r15
    55dc:	ef 90       	pop	r14
    55de:	cf 90       	pop	r12
    55e0:	af 90       	pop	r10
    55e2:	9f 90       	pop	r9
    55e4:	8f 90       	pop	r8
    55e6:	7f 90       	pop	r7
    55e8:	6f 90       	pop	r6
    55ea:	5f 90       	pop	r5
    55ec:	4f 90       	pop	r4
    55ee:	3f 90       	pop	r3
    55f0:	2f 90       	pop	r2
    55f2:	08 95       	ret

000055f4 <serial_sendByte>:
    55f4:	cf 93       	push	r28
    55f6:	df 93       	push	r29
    55f8:	dc 01       	movw	r26, r24
    55fa:	89 2b       	or	r24, r25
    55fc:	01 f1       	breq	.+64     	; 0x563e <serial_sendByte+0x4a>
    55fe:	12 96       	adiw	r26, 0x02	; 2
    5600:	ed 91       	ld	r30, X+
    5602:	fc 91       	ld	r31, X
    5604:	13 97       	sbiw	r26, 0x03	; 3
    5606:	93 81       	ldd	r25, Z+3	; 0x03
    5608:	82 81       	ldd	r24, Z+2	; 0x02
    560a:	25 81       	ldd	r18, Z+5	; 0x05
    560c:	98 1b       	sub	r25, r24
    560e:	92 23       	and	r25, r18
    5610:	84 81       	ldd	r24, Z+4	; 0x04
    5612:	98 17       	cp	r25, r24
    5614:	b1 f0       	breq	.+44     	; 0x5642 <serial_sendByte+0x4e>
    5616:	83 81       	ldd	r24, Z+3	; 0x03
    5618:	26 95       	lsr	r18
    561a:	28 23       	and	r18, r24
    561c:	c0 81       	ld	r28, Z
    561e:	d1 81       	ldd	r29, Z+1	; 0x01
    5620:	c2 0f       	add	r28, r18
    5622:	d1 1d       	adc	r29, r1
    5624:	68 83       	st	Y, r22
    5626:	8f 5f       	subi	r24, 0xFF	; 255
    5628:	95 81       	ldd	r25, Z+5	; 0x05
    562a:	89 23       	and	r24, r25
    562c:	83 83       	std	Z+3, r24	; 0x03
    562e:	ed 91       	ld	r30, X+
    5630:	fc 91       	ld	r31, X
    5632:	35 97       	sbiw	r30, 0x05	; 5
    5634:	80 81       	ld	r24, Z
    5636:	80 62       	ori	r24, 0x20	; 32
    5638:	80 83       	st	Z, r24
    563a:	80 e0       	ldi	r24, 0x00	; 0
    563c:	03 c0       	rjmp	.+6      	; 0x5644 <serial_sendByte+0x50>
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	01 c0       	rjmp	.+2      	; 0x5644 <serial_sendByte+0x50>
    5642:	82 e0       	ldi	r24, 0x02	; 2
    5644:	df 91       	pop	r29
    5646:	cf 91       	pop	r28
    5648:	08 95       	ret

0000564a <serial_sendBytes>:
    564a:	ef 92       	push	r14
    564c:	ff 92       	push	r15
    564e:	0f 93       	push	r16
    5650:	1f 93       	push	r17
    5652:	cf 93       	push	r28
    5654:	df 93       	push	r29
    5656:	7c 01       	movw	r14, r24
    5658:	00 97       	sbiw	r24, 0x00	; 0
    565a:	09 f4       	brne	.+2      	; 0x565e <serial_sendBytes+0x14>
    565c:	41 c0       	rjmp	.+130    	; 0x56e0 <serial_sendBytes+0x96>
    565e:	dc 01       	movw	r26, r24
    5660:	12 96       	adiw	r26, 0x02	; 2
    5662:	ed 91       	ld	r30, X+
    5664:	fc 91       	ld	r31, X
    5666:	13 97       	sbiw	r26, 0x03	; 3
    5668:	93 81       	ldd	r25, Z+3	; 0x03
    566a:	82 81       	ldd	r24, Z+2	; 0x02
    566c:	98 1b       	sub	r25, r24
    566e:	85 81       	ldd	r24, Z+5	; 0x05
    5670:	98 23       	and	r25, r24
    5672:	84 81       	ldd	r24, Z+4	; 0x04
    5674:	89 1b       	sub	r24, r25
    5676:	86 17       	cp	r24, r22
    5678:	a8 f1       	brcs	.+106    	; 0x56e4 <serial_sendBytes+0x9a>
    567a:	66 23       	and	r22, r22
    567c:	41 f1       	breq	.+80     	; 0x56ce <serial_sendBytes+0x84>
    567e:	84 2f       	mov	r24, r20
    5680:	95 2f       	mov	r25, r21
    5682:	dc 01       	movw	r26, r24
    5684:	61 50       	subi	r22, 0x01	; 1
    5686:	46 2f       	mov	r20, r22
    5688:	50 e0       	ldi	r21, 0x00	; 0
    568a:	4f 5f       	subi	r20, 0xFF	; 255
    568c:	5f 4f       	sbci	r21, 0xFF	; 255
    568e:	48 0f       	add	r20, r24
    5690:	59 1f       	adc	r21, r25
    5692:	e7 01       	movw	r28, r14
    5694:	ea 81       	ldd	r30, Y+2	; 0x02
    5696:	fb 81       	ldd	r31, Y+3	; 0x03
    5698:	93 81       	ldd	r25, Z+3	; 0x03
    569a:	82 81       	ldd	r24, Z+2	; 0x02
    569c:	25 81       	ldd	r18, Z+5	; 0x05
    569e:	98 1b       	sub	r25, r24
    56a0:	92 23       	and	r25, r18
    56a2:	84 81       	ldd	r24, Z+4	; 0x04
    56a4:	98 17       	cp	r25, r24
    56a6:	79 f0       	breq	.+30     	; 0x56c6 <serial_sendBytes+0x7c>
    56a8:	8c 91       	ld	r24, X
    56aa:	93 81       	ldd	r25, Z+3	; 0x03
    56ac:	26 95       	lsr	r18
    56ae:	29 23       	and	r18, r25
    56b0:	60 81       	ld	r22, Z
    56b2:	71 81       	ldd	r23, Z+1	; 0x01
    56b4:	8b 01       	movw	r16, r22
    56b6:	02 0f       	add	r16, r18
    56b8:	11 1d       	adc	r17, r1
    56ba:	e8 01       	movw	r28, r16
    56bc:	88 83       	st	Y, r24
    56be:	9f 5f       	subi	r25, 0xFF	; 255
    56c0:	85 81       	ldd	r24, Z+5	; 0x05
    56c2:	98 23       	and	r25, r24
    56c4:	93 83       	std	Z+3, r25	; 0x03
    56c6:	11 96       	adiw	r26, 0x01	; 1
    56c8:	a4 17       	cp	r26, r20
    56ca:	b5 07       	cpc	r27, r21
    56cc:	11 f7       	brne	.-60     	; 0x5692 <serial_sendBytes+0x48>
    56ce:	d7 01       	movw	r26, r14
    56d0:	ed 91       	ld	r30, X+
    56d2:	fc 91       	ld	r31, X
    56d4:	35 97       	sbiw	r30, 0x05	; 5
    56d6:	80 81       	ld	r24, Z
    56d8:	80 62       	ori	r24, 0x20	; 32
    56da:	80 83       	st	Z, r24
    56dc:	80 e0       	ldi	r24, 0x00	; 0
    56de:	03 c0       	rjmp	.+6      	; 0x56e6 <serial_sendBytes+0x9c>
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	01 c0       	rjmp	.+2      	; 0x56e6 <serial_sendBytes+0x9c>
    56e4:	82 e0       	ldi	r24, 0x02	; 2
    56e6:	df 91       	pop	r29
    56e8:	cf 91       	pop	r28
    56ea:	1f 91       	pop	r17
    56ec:	0f 91       	pop	r16
    56ee:	ff 90       	pop	r15
    56f0:	ef 90       	pop	r14
    56f2:	08 95       	ret

000056f4 <serial_getByte>:
    56f4:	00 97       	sbiw	r24, 0x00	; 0
    56f6:	d1 f0       	breq	.+52     	; 0x572c <serial_getByte+0x38>
    56f8:	dc 01       	movw	r26, r24
    56fa:	14 96       	adiw	r26, 0x04	; 4
    56fc:	ed 91       	ld	r30, X+
    56fe:	fc 91       	ld	r31, X
    5700:	15 97       	sbiw	r26, 0x05	; 5
    5702:	93 81       	ldd	r25, Z+3	; 0x03
    5704:	82 81       	ldd	r24, Z+2	; 0x02
    5706:	98 17       	cp	r25, r24
    5708:	99 f0       	breq	.+38     	; 0x5730 <serial_getByte+0x3c>
    570a:	92 81       	ldd	r25, Z+2	; 0x02
    570c:	85 81       	ldd	r24, Z+5	; 0x05
    570e:	86 95       	lsr	r24
    5710:	89 23       	and	r24, r25
    5712:	a0 81       	ld	r26, Z
    5714:	b1 81       	ldd	r27, Z+1	; 0x01
    5716:	a8 0f       	add	r26, r24
    5718:	b1 1d       	adc	r27, r1
    571a:	8c 91       	ld	r24, X
    571c:	db 01       	movw	r26, r22
    571e:	8c 93       	st	X, r24
    5720:	9f 5f       	subi	r25, 0xFF	; 255
    5722:	85 81       	ldd	r24, Z+5	; 0x05
    5724:	98 23       	and	r25, r24
    5726:	92 83       	std	Z+2, r25	; 0x02
    5728:	80 e0       	ldi	r24, 0x00	; 0
    572a:	08 95       	ret
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	08 95       	ret
    5730:	83 e0       	ldi	r24, 0x03	; 3
    5732:	08 95       	ret

00005734 <__vector_25>:
    5734:	1f 92       	push	r1
    5736:	0f 92       	push	r0
    5738:	0f b6       	in	r0, 0x3f	; 63
    573a:	0f 92       	push	r0
    573c:	11 24       	eor	r1, r1
    573e:	0b b6       	in	r0, 0x3b	; 59
    5740:	0f 92       	push	r0
    5742:	2f 93       	push	r18
    5744:	3f 93       	push	r19
    5746:	4f 93       	push	r20
    5748:	5f 93       	push	r21
    574a:	6f 93       	push	r22
    574c:	7f 93       	push	r23
    574e:	8f 93       	push	r24
    5750:	9f 93       	push	r25
    5752:	af 93       	push	r26
    5754:	bf 93       	push	r27
    5756:	cf 93       	push	r28
    5758:	df 93       	push	r29
    575a:	ef 93       	push	r30
    575c:	ff 93       	push	r31
    575e:	a0 91 9b 15 	lds	r26, 0x159B	; 0x80159b <_ser_handle>
    5762:	b0 91 9c 15 	lds	r27, 0x159C	; 0x80159c <_ser_handle+0x1>
    5766:	10 97       	sbiw	r26, 0x00	; 0
    5768:	11 f1       	breq	.+68     	; 0x57ae <__vector_25+0x7a>
    576a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    576e:	14 96       	adiw	r26, 0x04	; 4
    5770:	ed 91       	ld	r30, X+
    5772:	fc 91       	ld	r31, X
    5774:	15 97       	sbiw	r26, 0x05	; 5
    5776:	93 81       	ldd	r25, Z+3	; 0x03
    5778:	82 81       	ldd	r24, Z+2	; 0x02
    577a:	25 81       	ldd	r18, Z+5	; 0x05
    577c:	98 1b       	sub	r25, r24
    577e:	92 23       	and	r25, r18
    5780:	84 81       	ldd	r24, Z+4	; 0x04
    5782:	98 17       	cp	r25, r24
    5784:	61 f0       	breq	.+24     	; 0x579e <__vector_25+0x6a>
    5786:	83 81       	ldd	r24, Z+3	; 0x03
    5788:	26 95       	lsr	r18
    578a:	28 23       	and	r18, r24
    578c:	c0 81       	ld	r28, Z
    578e:	d1 81       	ldd	r29, Z+1	; 0x01
    5790:	c2 0f       	add	r28, r18
    5792:	d1 1d       	adc	r29, r1
    5794:	68 83       	st	Y, r22
    5796:	8f 5f       	subi	r24, 0xFF	; 255
    5798:	95 81       	ldd	r25, Z+5	; 0x05
    579a:	89 23       	and	r24, r25
    579c:	83 83       	std	Z+3, r24	; 0x03
    579e:	16 96       	adiw	r26, 0x06	; 6
    57a0:	ed 91       	ld	r30, X+
    57a2:	fc 91       	ld	r31, X
    57a4:	17 97       	sbiw	r26, 0x07	; 7
    57a6:	30 97       	sbiw	r30, 0x00	; 0
    57a8:	11 f0       	breq	.+4      	; 0x57ae <__vector_25+0x7a>
    57aa:	cd 01       	movw	r24, r26
    57ac:	19 95       	eicall
    57ae:	ff 91       	pop	r31
    57b0:	ef 91       	pop	r30
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	bf 91       	pop	r27
    57b8:	af 91       	pop	r26
    57ba:	9f 91       	pop	r25
    57bc:	8f 91       	pop	r24
    57be:	7f 91       	pop	r23
    57c0:	6f 91       	pop	r22
    57c2:	5f 91       	pop	r21
    57c4:	4f 91       	pop	r20
    57c6:	3f 91       	pop	r19
    57c8:	2f 91       	pop	r18
    57ca:	0f 90       	pop	r0
    57cc:	0b be       	out	0x3b, r0	; 59
    57ce:	0f 90       	pop	r0
    57d0:	0f be       	out	0x3f, r0	; 63
    57d2:	0f 90       	pop	r0
    57d4:	1f 90       	pop	r1
    57d6:	18 95       	reti

000057d8 <__vector_26>:
    57d8:	1f 92       	push	r1
    57da:	0f 92       	push	r0
    57dc:	0f b6       	in	r0, 0x3f	; 63
    57de:	0f 92       	push	r0
    57e0:	11 24       	eor	r1, r1
    57e2:	0b b6       	in	r0, 0x3b	; 59
    57e4:	0f 92       	push	r0
    57e6:	2f 93       	push	r18
    57e8:	8f 93       	push	r24
    57ea:	9f 93       	push	r25
    57ec:	af 93       	push	r26
    57ee:	bf 93       	push	r27
    57f0:	ef 93       	push	r30
    57f2:	ff 93       	push	r31
    57f4:	e0 91 9b 15 	lds	r30, 0x159B	; 0x80159b <_ser_handle>
    57f8:	f0 91 9c 15 	lds	r31, 0x159C	; 0x80159c <_ser_handle+0x1>
    57fc:	30 97       	sbiw	r30, 0x00	; 0
    57fe:	b9 f0       	breq	.+46     	; 0x582e <__vector_26+0x56>
    5800:	02 80       	ldd	r0, Z+2	; 0x02
    5802:	f3 81       	ldd	r31, Z+3	; 0x03
    5804:	e0 2d       	mov	r30, r0
    5806:	93 81       	ldd	r25, Z+3	; 0x03
    5808:	82 81       	ldd	r24, Z+2	; 0x02
    580a:	98 17       	cp	r25, r24
    580c:	b1 f0       	breq	.+44     	; 0x583a <__vector_26+0x62>
    580e:	92 81       	ldd	r25, Z+2	; 0x02
    5810:	85 81       	ldd	r24, Z+5	; 0x05
    5812:	28 2f       	mov	r18, r24
    5814:	26 95       	lsr	r18
    5816:	29 23       	and	r18, r25
    5818:	a0 81       	ld	r26, Z
    581a:	b1 81       	ldd	r27, Z+1	; 0x01
    581c:	a2 0f       	add	r26, r18
    581e:	b1 1d       	adc	r27, r1
    5820:	2c 91       	ld	r18, X
    5822:	9f 5f       	subi	r25, 0xFF	; 255
    5824:	89 23       	and	r24, r25
    5826:	82 83       	std	Z+2, r24	; 0x02
    5828:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    582c:	0b c0       	rjmp	.+22     	; 0x5844 <__vector_26+0x6c>
    582e:	e1 ec       	ldi	r30, 0xC1	; 193
    5830:	f0 e0       	ldi	r31, 0x00	; 0
    5832:	80 81       	ld	r24, Z
    5834:	8f 7d       	andi	r24, 0xDF	; 223
    5836:	80 83       	st	Z, r24
    5838:	05 c0       	rjmp	.+10     	; 0x5844 <__vector_26+0x6c>
    583a:	e1 ec       	ldi	r30, 0xC1	; 193
    583c:	f0 e0       	ldi	r31, 0x00	; 0
    583e:	80 81       	ld	r24, Z
    5840:	8f 7d       	andi	r24, 0xDF	; 223
    5842:	80 83       	st	Z, r24
    5844:	ff 91       	pop	r31
    5846:	ef 91       	pop	r30
    5848:	bf 91       	pop	r27
    584a:	af 91       	pop	r26
    584c:	9f 91       	pop	r25
    584e:	8f 91       	pop	r24
    5850:	2f 91       	pop	r18
    5852:	0f 90       	pop	r0
    5854:	0b be       	out	0x3b, r0	; 59
    5856:	0f 90       	pop	r0
    5858:	0f be       	out	0x3f, r0	; 63
    585a:	0f 90       	pop	r0
    585c:	1f 90       	pop	r1
    585e:	18 95       	reti

00005860 <__vector_36>:
    5860:	1f 92       	push	r1
    5862:	0f 92       	push	r0
    5864:	0f b6       	in	r0, 0x3f	; 63
    5866:	0f 92       	push	r0
    5868:	11 24       	eor	r1, r1
    586a:	0b b6       	in	r0, 0x3b	; 59
    586c:	0f 92       	push	r0
    586e:	2f 93       	push	r18
    5870:	3f 93       	push	r19
    5872:	4f 93       	push	r20
    5874:	5f 93       	push	r21
    5876:	6f 93       	push	r22
    5878:	7f 93       	push	r23
    587a:	8f 93       	push	r24
    587c:	9f 93       	push	r25
    587e:	af 93       	push	r26
    5880:	bf 93       	push	r27
    5882:	cf 93       	push	r28
    5884:	df 93       	push	r29
    5886:	ef 93       	push	r30
    5888:	ff 93       	push	r31
    588a:	a0 91 9d 15 	lds	r26, 0x159D	; 0x80159d <_ser_handle+0x2>
    588e:	b0 91 9e 15 	lds	r27, 0x159E	; 0x80159e <_ser_handle+0x3>
    5892:	10 97       	sbiw	r26, 0x00	; 0
    5894:	11 f1       	breq	.+68     	; 0x58da <__vector_36+0x7a>
    5896:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    589a:	14 96       	adiw	r26, 0x04	; 4
    589c:	ed 91       	ld	r30, X+
    589e:	fc 91       	ld	r31, X
    58a0:	15 97       	sbiw	r26, 0x05	; 5
    58a2:	93 81       	ldd	r25, Z+3	; 0x03
    58a4:	82 81       	ldd	r24, Z+2	; 0x02
    58a6:	25 81       	ldd	r18, Z+5	; 0x05
    58a8:	98 1b       	sub	r25, r24
    58aa:	92 23       	and	r25, r18
    58ac:	84 81       	ldd	r24, Z+4	; 0x04
    58ae:	98 17       	cp	r25, r24
    58b0:	61 f0       	breq	.+24     	; 0x58ca <__vector_36+0x6a>
    58b2:	83 81       	ldd	r24, Z+3	; 0x03
    58b4:	26 95       	lsr	r18
    58b6:	28 23       	and	r18, r24
    58b8:	c0 81       	ld	r28, Z
    58ba:	d1 81       	ldd	r29, Z+1	; 0x01
    58bc:	c2 0f       	add	r28, r18
    58be:	d1 1d       	adc	r29, r1
    58c0:	68 83       	st	Y, r22
    58c2:	8f 5f       	subi	r24, 0xFF	; 255
    58c4:	95 81       	ldd	r25, Z+5	; 0x05
    58c6:	89 23       	and	r24, r25
    58c8:	83 83       	std	Z+3, r24	; 0x03
    58ca:	16 96       	adiw	r26, 0x06	; 6
    58cc:	ed 91       	ld	r30, X+
    58ce:	fc 91       	ld	r31, X
    58d0:	17 97       	sbiw	r26, 0x07	; 7
    58d2:	30 97       	sbiw	r30, 0x00	; 0
    58d4:	11 f0       	breq	.+4      	; 0x58da <__vector_36+0x7a>
    58d6:	cd 01       	movw	r24, r26
    58d8:	19 95       	eicall
    58da:	ff 91       	pop	r31
    58dc:	ef 91       	pop	r30
    58de:	df 91       	pop	r29
    58e0:	cf 91       	pop	r28
    58e2:	bf 91       	pop	r27
    58e4:	af 91       	pop	r26
    58e6:	9f 91       	pop	r25
    58e8:	8f 91       	pop	r24
    58ea:	7f 91       	pop	r23
    58ec:	6f 91       	pop	r22
    58ee:	5f 91       	pop	r21
    58f0:	4f 91       	pop	r20
    58f2:	3f 91       	pop	r19
    58f4:	2f 91       	pop	r18
    58f6:	0f 90       	pop	r0
    58f8:	0b be       	out	0x3b, r0	; 59
    58fa:	0f 90       	pop	r0
    58fc:	0f be       	out	0x3f, r0	; 63
    58fe:	0f 90       	pop	r0
    5900:	1f 90       	pop	r1
    5902:	18 95       	reti

00005904 <__vector_37>:
    5904:	1f 92       	push	r1
    5906:	0f 92       	push	r0
    5908:	0f b6       	in	r0, 0x3f	; 63
    590a:	0f 92       	push	r0
    590c:	11 24       	eor	r1, r1
    590e:	0b b6       	in	r0, 0x3b	; 59
    5910:	0f 92       	push	r0
    5912:	2f 93       	push	r18
    5914:	8f 93       	push	r24
    5916:	9f 93       	push	r25
    5918:	af 93       	push	r26
    591a:	bf 93       	push	r27
    591c:	ef 93       	push	r30
    591e:	ff 93       	push	r31
    5920:	e0 91 9d 15 	lds	r30, 0x159D	; 0x80159d <_ser_handle+0x2>
    5924:	f0 91 9e 15 	lds	r31, 0x159E	; 0x80159e <_ser_handle+0x3>
    5928:	30 97       	sbiw	r30, 0x00	; 0
    592a:	b9 f0       	breq	.+46     	; 0x595a <__vector_37+0x56>
    592c:	02 80       	ldd	r0, Z+2	; 0x02
    592e:	f3 81       	ldd	r31, Z+3	; 0x03
    5930:	e0 2d       	mov	r30, r0
    5932:	93 81       	ldd	r25, Z+3	; 0x03
    5934:	82 81       	ldd	r24, Z+2	; 0x02
    5936:	98 17       	cp	r25, r24
    5938:	b1 f0       	breq	.+44     	; 0x5966 <__vector_37+0x62>
    593a:	92 81       	ldd	r25, Z+2	; 0x02
    593c:	85 81       	ldd	r24, Z+5	; 0x05
    593e:	28 2f       	mov	r18, r24
    5940:	26 95       	lsr	r18
    5942:	29 23       	and	r18, r25
    5944:	a0 81       	ld	r26, Z
    5946:	b1 81       	ldd	r27, Z+1	; 0x01
    5948:	a2 0f       	add	r26, r18
    594a:	b1 1d       	adc	r27, r1
    594c:	2c 91       	ld	r18, X
    594e:	9f 5f       	subi	r25, 0xFF	; 255
    5950:	89 23       	and	r24, r25
    5952:	82 83       	std	Z+2, r24	; 0x02
    5954:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5958:	0b c0       	rjmp	.+22     	; 0x5970 <__vector_37+0x6c>
    595a:	e9 ec       	ldi	r30, 0xC9	; 201
    595c:	f0 e0       	ldi	r31, 0x00	; 0
    595e:	80 81       	ld	r24, Z
    5960:	8f 7d       	andi	r24, 0xDF	; 223
    5962:	80 83       	st	Z, r24
    5964:	05 c0       	rjmp	.+10     	; 0x5970 <__vector_37+0x6c>
    5966:	e9 ec       	ldi	r30, 0xC9	; 201
    5968:	f0 e0       	ldi	r31, 0x00	; 0
    596a:	80 81       	ld	r24, Z
    596c:	8f 7d       	andi	r24, 0xDF	; 223
    596e:	80 83       	st	Z, r24
    5970:	ff 91       	pop	r31
    5972:	ef 91       	pop	r30
    5974:	bf 91       	pop	r27
    5976:	af 91       	pop	r26
    5978:	9f 91       	pop	r25
    597a:	8f 91       	pop	r24
    597c:	2f 91       	pop	r18
    597e:	0f 90       	pop	r0
    5980:	0b be       	out	0x3b, r0	; 59
    5982:	0f 90       	pop	r0
    5984:	0f be       	out	0x3f, r0	; 63
    5986:	0f 90       	pop	r0
    5988:	1f 90       	pop	r1
    598a:	18 95       	reti

0000598c <__vector_51>:
    598c:	1f 92       	push	r1
    598e:	0f 92       	push	r0
    5990:	0f b6       	in	r0, 0x3f	; 63
    5992:	0f 92       	push	r0
    5994:	11 24       	eor	r1, r1
    5996:	0b b6       	in	r0, 0x3b	; 59
    5998:	0f 92       	push	r0
    599a:	2f 93       	push	r18
    599c:	3f 93       	push	r19
    599e:	4f 93       	push	r20
    59a0:	5f 93       	push	r21
    59a2:	6f 93       	push	r22
    59a4:	7f 93       	push	r23
    59a6:	8f 93       	push	r24
    59a8:	9f 93       	push	r25
    59aa:	af 93       	push	r26
    59ac:	bf 93       	push	r27
    59ae:	cf 93       	push	r28
    59b0:	df 93       	push	r29
    59b2:	ef 93       	push	r30
    59b4:	ff 93       	push	r31
    59b6:	a0 91 9f 15 	lds	r26, 0x159F	; 0x80159f <_ser_handle+0x4>
    59ba:	b0 91 a0 15 	lds	r27, 0x15A0	; 0x8015a0 <_ser_handle+0x5>
    59be:	10 97       	sbiw	r26, 0x00	; 0
    59c0:	11 f1       	breq	.+68     	; 0x5a06 <__vector_51+0x7a>
    59c2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    59c6:	14 96       	adiw	r26, 0x04	; 4
    59c8:	ed 91       	ld	r30, X+
    59ca:	fc 91       	ld	r31, X
    59cc:	15 97       	sbiw	r26, 0x05	; 5
    59ce:	93 81       	ldd	r25, Z+3	; 0x03
    59d0:	82 81       	ldd	r24, Z+2	; 0x02
    59d2:	25 81       	ldd	r18, Z+5	; 0x05
    59d4:	98 1b       	sub	r25, r24
    59d6:	92 23       	and	r25, r18
    59d8:	84 81       	ldd	r24, Z+4	; 0x04
    59da:	98 17       	cp	r25, r24
    59dc:	61 f0       	breq	.+24     	; 0x59f6 <__vector_51+0x6a>
    59de:	83 81       	ldd	r24, Z+3	; 0x03
    59e0:	26 95       	lsr	r18
    59e2:	28 23       	and	r18, r24
    59e4:	c0 81       	ld	r28, Z
    59e6:	d1 81       	ldd	r29, Z+1	; 0x01
    59e8:	c2 0f       	add	r28, r18
    59ea:	d1 1d       	adc	r29, r1
    59ec:	68 83       	st	Y, r22
    59ee:	8f 5f       	subi	r24, 0xFF	; 255
    59f0:	95 81       	ldd	r25, Z+5	; 0x05
    59f2:	89 23       	and	r24, r25
    59f4:	83 83       	std	Z+3, r24	; 0x03
    59f6:	16 96       	adiw	r26, 0x06	; 6
    59f8:	ed 91       	ld	r30, X+
    59fa:	fc 91       	ld	r31, X
    59fc:	17 97       	sbiw	r26, 0x07	; 7
    59fe:	30 97       	sbiw	r30, 0x00	; 0
    5a00:	11 f0       	breq	.+4      	; 0x5a06 <__vector_51+0x7a>
    5a02:	cd 01       	movw	r24, r26
    5a04:	19 95       	eicall
    5a06:	ff 91       	pop	r31
    5a08:	ef 91       	pop	r30
    5a0a:	df 91       	pop	r29
    5a0c:	cf 91       	pop	r28
    5a0e:	bf 91       	pop	r27
    5a10:	af 91       	pop	r26
    5a12:	9f 91       	pop	r25
    5a14:	8f 91       	pop	r24
    5a16:	7f 91       	pop	r23
    5a18:	6f 91       	pop	r22
    5a1a:	5f 91       	pop	r21
    5a1c:	4f 91       	pop	r20
    5a1e:	3f 91       	pop	r19
    5a20:	2f 91       	pop	r18
    5a22:	0f 90       	pop	r0
    5a24:	0b be       	out	0x3b, r0	; 59
    5a26:	0f 90       	pop	r0
    5a28:	0f be       	out	0x3f, r0	; 63
    5a2a:	0f 90       	pop	r0
    5a2c:	1f 90       	pop	r1
    5a2e:	18 95       	reti

00005a30 <__vector_52>:
    5a30:	1f 92       	push	r1
    5a32:	0f 92       	push	r0
    5a34:	0f b6       	in	r0, 0x3f	; 63
    5a36:	0f 92       	push	r0
    5a38:	11 24       	eor	r1, r1
    5a3a:	0b b6       	in	r0, 0x3b	; 59
    5a3c:	0f 92       	push	r0
    5a3e:	2f 93       	push	r18
    5a40:	8f 93       	push	r24
    5a42:	9f 93       	push	r25
    5a44:	af 93       	push	r26
    5a46:	bf 93       	push	r27
    5a48:	ef 93       	push	r30
    5a4a:	ff 93       	push	r31
    5a4c:	e0 91 9f 15 	lds	r30, 0x159F	; 0x80159f <_ser_handle+0x4>
    5a50:	f0 91 a0 15 	lds	r31, 0x15A0	; 0x8015a0 <_ser_handle+0x5>
    5a54:	30 97       	sbiw	r30, 0x00	; 0
    5a56:	b9 f0       	breq	.+46     	; 0x5a86 <__vector_52+0x56>
    5a58:	02 80       	ldd	r0, Z+2	; 0x02
    5a5a:	f3 81       	ldd	r31, Z+3	; 0x03
    5a5c:	e0 2d       	mov	r30, r0
    5a5e:	93 81       	ldd	r25, Z+3	; 0x03
    5a60:	82 81       	ldd	r24, Z+2	; 0x02
    5a62:	98 17       	cp	r25, r24
    5a64:	b1 f0       	breq	.+44     	; 0x5a92 <__vector_52+0x62>
    5a66:	92 81       	ldd	r25, Z+2	; 0x02
    5a68:	85 81       	ldd	r24, Z+5	; 0x05
    5a6a:	28 2f       	mov	r18, r24
    5a6c:	26 95       	lsr	r18
    5a6e:	29 23       	and	r18, r25
    5a70:	a0 81       	ld	r26, Z
    5a72:	b1 81       	ldd	r27, Z+1	; 0x01
    5a74:	a2 0f       	add	r26, r18
    5a76:	b1 1d       	adc	r27, r1
    5a78:	2c 91       	ld	r18, X
    5a7a:	9f 5f       	subi	r25, 0xFF	; 255
    5a7c:	89 23       	and	r24, r25
    5a7e:	82 83       	std	Z+2, r24	; 0x02
    5a80:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5a84:	0b c0       	rjmp	.+22     	; 0x5a9c <__vector_52+0x6c>
    5a86:	e1 ed       	ldi	r30, 0xD1	; 209
    5a88:	f0 e0       	ldi	r31, 0x00	; 0
    5a8a:	80 81       	ld	r24, Z
    5a8c:	8f 7d       	andi	r24, 0xDF	; 223
    5a8e:	80 83       	st	Z, r24
    5a90:	05 c0       	rjmp	.+10     	; 0x5a9c <__vector_52+0x6c>
    5a92:	e1 ed       	ldi	r30, 0xD1	; 209
    5a94:	f0 e0       	ldi	r31, 0x00	; 0
    5a96:	80 81       	ld	r24, Z
    5a98:	8f 7d       	andi	r24, 0xDF	; 223
    5a9a:	80 83       	st	Z, r24
    5a9c:	ff 91       	pop	r31
    5a9e:	ef 91       	pop	r30
    5aa0:	bf 91       	pop	r27
    5aa2:	af 91       	pop	r26
    5aa4:	9f 91       	pop	r25
    5aa6:	8f 91       	pop	r24
    5aa8:	2f 91       	pop	r18
    5aaa:	0f 90       	pop	r0
    5aac:	0b be       	out	0x3b, r0	; 59
    5aae:	0f 90       	pop	r0
    5ab0:	0f be       	out	0x3f, r0	; 63
    5ab2:	0f 90       	pop	r0
    5ab4:	1f 90       	pop	r1
    5ab6:	18 95       	reti

00005ab8 <__vector_54>:
    5ab8:	1f 92       	push	r1
    5aba:	0f 92       	push	r0
    5abc:	0f b6       	in	r0, 0x3f	; 63
    5abe:	0f 92       	push	r0
    5ac0:	11 24       	eor	r1, r1
    5ac2:	0b b6       	in	r0, 0x3b	; 59
    5ac4:	0f 92       	push	r0
    5ac6:	2f 93       	push	r18
    5ac8:	3f 93       	push	r19
    5aca:	4f 93       	push	r20
    5acc:	5f 93       	push	r21
    5ace:	6f 93       	push	r22
    5ad0:	7f 93       	push	r23
    5ad2:	8f 93       	push	r24
    5ad4:	9f 93       	push	r25
    5ad6:	af 93       	push	r26
    5ad8:	bf 93       	push	r27
    5ada:	cf 93       	push	r28
    5adc:	df 93       	push	r29
    5ade:	ef 93       	push	r30
    5ae0:	ff 93       	push	r31
    5ae2:	a0 91 a1 15 	lds	r26, 0x15A1	; 0x8015a1 <_ser_handle+0x6>
    5ae6:	b0 91 a2 15 	lds	r27, 0x15A2	; 0x8015a2 <_ser_handle+0x7>
    5aea:	10 97       	sbiw	r26, 0x00	; 0
    5aec:	11 f1       	breq	.+68     	; 0x5b32 <__vector_54+0x7a>
    5aee:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5af2:	14 96       	adiw	r26, 0x04	; 4
    5af4:	ed 91       	ld	r30, X+
    5af6:	fc 91       	ld	r31, X
    5af8:	15 97       	sbiw	r26, 0x05	; 5
    5afa:	93 81       	ldd	r25, Z+3	; 0x03
    5afc:	82 81       	ldd	r24, Z+2	; 0x02
    5afe:	25 81       	ldd	r18, Z+5	; 0x05
    5b00:	98 1b       	sub	r25, r24
    5b02:	92 23       	and	r25, r18
    5b04:	84 81       	ldd	r24, Z+4	; 0x04
    5b06:	98 17       	cp	r25, r24
    5b08:	61 f0       	breq	.+24     	; 0x5b22 <__vector_54+0x6a>
    5b0a:	83 81       	ldd	r24, Z+3	; 0x03
    5b0c:	26 95       	lsr	r18
    5b0e:	28 23       	and	r18, r24
    5b10:	c0 81       	ld	r28, Z
    5b12:	d1 81       	ldd	r29, Z+1	; 0x01
    5b14:	c2 0f       	add	r28, r18
    5b16:	d1 1d       	adc	r29, r1
    5b18:	68 83       	st	Y, r22
    5b1a:	8f 5f       	subi	r24, 0xFF	; 255
    5b1c:	95 81       	ldd	r25, Z+5	; 0x05
    5b1e:	89 23       	and	r24, r25
    5b20:	83 83       	std	Z+3, r24	; 0x03
    5b22:	16 96       	adiw	r26, 0x06	; 6
    5b24:	ed 91       	ld	r30, X+
    5b26:	fc 91       	ld	r31, X
    5b28:	17 97       	sbiw	r26, 0x07	; 7
    5b2a:	30 97       	sbiw	r30, 0x00	; 0
    5b2c:	11 f0       	breq	.+4      	; 0x5b32 <__vector_54+0x7a>
    5b2e:	cd 01       	movw	r24, r26
    5b30:	19 95       	eicall
    5b32:	ff 91       	pop	r31
    5b34:	ef 91       	pop	r30
    5b36:	df 91       	pop	r29
    5b38:	cf 91       	pop	r28
    5b3a:	bf 91       	pop	r27
    5b3c:	af 91       	pop	r26
    5b3e:	9f 91       	pop	r25
    5b40:	8f 91       	pop	r24
    5b42:	7f 91       	pop	r23
    5b44:	6f 91       	pop	r22
    5b46:	5f 91       	pop	r21
    5b48:	4f 91       	pop	r20
    5b4a:	3f 91       	pop	r19
    5b4c:	2f 91       	pop	r18
    5b4e:	0f 90       	pop	r0
    5b50:	0b be       	out	0x3b, r0	; 59
    5b52:	0f 90       	pop	r0
    5b54:	0f be       	out	0x3f, r0	; 63
    5b56:	0f 90       	pop	r0
    5b58:	1f 90       	pop	r1
    5b5a:	18 95       	reti

00005b5c <__vector_55>:
    5b5c:	1f 92       	push	r1
    5b5e:	0f 92       	push	r0
    5b60:	0f b6       	in	r0, 0x3f	; 63
    5b62:	0f 92       	push	r0
    5b64:	11 24       	eor	r1, r1
    5b66:	0b b6       	in	r0, 0x3b	; 59
    5b68:	0f 92       	push	r0
    5b6a:	2f 93       	push	r18
    5b6c:	8f 93       	push	r24
    5b6e:	9f 93       	push	r25
    5b70:	af 93       	push	r26
    5b72:	bf 93       	push	r27
    5b74:	ef 93       	push	r30
    5b76:	ff 93       	push	r31
    5b78:	e0 91 a1 15 	lds	r30, 0x15A1	; 0x8015a1 <_ser_handle+0x6>
    5b7c:	f0 91 a2 15 	lds	r31, 0x15A2	; 0x8015a2 <_ser_handle+0x7>
    5b80:	30 97       	sbiw	r30, 0x00	; 0
    5b82:	b9 f0       	breq	.+46     	; 0x5bb2 <__vector_55+0x56>
    5b84:	02 80       	ldd	r0, Z+2	; 0x02
    5b86:	f3 81       	ldd	r31, Z+3	; 0x03
    5b88:	e0 2d       	mov	r30, r0
    5b8a:	93 81       	ldd	r25, Z+3	; 0x03
    5b8c:	82 81       	ldd	r24, Z+2	; 0x02
    5b8e:	98 17       	cp	r25, r24
    5b90:	b1 f0       	breq	.+44     	; 0x5bbe <__vector_55+0x62>
    5b92:	92 81       	ldd	r25, Z+2	; 0x02
    5b94:	85 81       	ldd	r24, Z+5	; 0x05
    5b96:	28 2f       	mov	r18, r24
    5b98:	26 95       	lsr	r18
    5b9a:	29 23       	and	r18, r25
    5b9c:	a0 81       	ld	r26, Z
    5b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    5ba0:	a2 0f       	add	r26, r18
    5ba2:	b1 1d       	adc	r27, r1
    5ba4:	2c 91       	ld	r18, X
    5ba6:	9f 5f       	subi	r25, 0xFF	; 255
    5ba8:	89 23       	and	r24, r25
    5baa:	82 83       	std	Z+2, r24	; 0x02
    5bac:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5bb0:	0b c0       	rjmp	.+22     	; 0x5bc8 <__vector_55+0x6c>
    5bb2:	e1 e3       	ldi	r30, 0x31	; 49
    5bb4:	f1 e0       	ldi	r31, 0x01	; 1
    5bb6:	80 81       	ld	r24, Z
    5bb8:	8f 7d       	andi	r24, 0xDF	; 223
    5bba:	80 83       	st	Z, r24
    5bbc:	05 c0       	rjmp	.+10     	; 0x5bc8 <__vector_55+0x6c>
    5bbe:	e1 e3       	ldi	r30, 0x31	; 49
    5bc0:	f1 e0       	ldi	r31, 0x01	; 1
    5bc2:	80 81       	ld	r24, Z
    5bc4:	8f 7d       	andi	r24, 0xDF	; 223
    5bc6:	80 83       	st	Z, r24
    5bc8:	ff 91       	pop	r31
    5bca:	ef 91       	pop	r30
    5bcc:	bf 91       	pop	r27
    5bce:	af 91       	pop	r26
    5bd0:	9f 91       	pop	r25
    5bd2:	8f 91       	pop	r24
    5bd4:	2f 91       	pop	r18
    5bd6:	0f 90       	pop	r0
    5bd8:	0b be       	out	0x3b, r0	; 59
    5bda:	0f 90       	pop	r0
    5bdc:	0f be       	out	0x3f, r0	; 63
    5bde:	0f 90       	pop	r0
    5be0:	1f 90       	pop	r1
    5be2:	18 95       	reti

00005be4 <usart_getchar>:
    5be4:	cf 93       	push	r28
    5be6:	df 93       	push	r29
    5be8:	1f 92       	push	r1
    5bea:	cd b7       	in	r28, 0x3d	; 61
    5bec:	de b7       	in	r29, 0x3e	; 62
    5bee:	be 01       	movw	r22, r28
    5bf0:	6f 5f       	subi	r22, 0xFF	; 255
    5bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf4:	80 91 a3 15 	lds	r24, 0x15A3	; 0x8015a3 <_com_serial_instance>
    5bf8:	90 91 a4 15 	lds	r25, 0x15A4	; 0x8015a4 <_com_serial_instance+0x1>
    5bfc:	7b dd       	rcall	.-1290   	; 0x56f4 <serial_getByte>
    5bfe:	81 11       	cpse	r24, r1
    5c00:	f6 cf       	rjmp	.-20     	; 0x5bee <usart_getchar+0xa>
    5c02:	89 81       	ldd	r24, Y+1	; 0x01
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	0f 90       	pop	r0
    5c08:	df 91       	pop	r29
    5c0a:	cf 91       	pop	r28
    5c0c:	08 95       	ret

00005c0e <usart_putchar>:
    5c0e:	68 2f       	mov	r22, r24
    5c10:	80 91 a3 15 	lds	r24, 0x15A3	; 0x8015a3 <_com_serial_instance>
    5c14:	90 91 a4 15 	lds	r25, 0x15A4	; 0x8015a4 <_com_serial_instance+0x1>
    5c18:	ed dc       	rcall	.-1574   	; 0x55f4 <serial_sendByte>
    5c1a:	80 e0       	ldi	r24, 0x00	; 0
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	08 95       	ret

00005c20 <stdio_initialise>:
    5c20:	8f 92       	push	r8
    5c22:	9f 92       	push	r9
    5c24:	af 92       	push	r10
    5c26:	cf 92       	push	r12
    5c28:	ef 92       	push	r14
    5c2a:	0f 93       	push	r16
    5c2c:	81 2c       	mov	r8, r1
    5c2e:	91 2c       	mov	r9, r1
    5c30:	68 94       	set
    5c32:	aa 24       	eor	r10, r10
    5c34:	a7 f8       	bld	r10, 7
    5c36:	68 94       	set
    5c38:	cc 24       	eor	r12, r12
    5c3a:	c7 f8       	bld	r12, 7
    5c3c:	e1 2c       	mov	r14, r1
    5c3e:	00 e0       	ldi	r16, 0x00	; 0
    5c40:	23 e0       	ldi	r18, 0x03	; 3
    5c42:	40 e0       	ldi	r20, 0x00	; 0
    5c44:	51 ee       	ldi	r21, 0xE1	; 225
    5c46:	60 e0       	ldi	r22, 0x00	; 0
    5c48:	70 e0       	ldi	r23, 0x00	; 0
    5c4a:	30 dc       	rcall	.-1952   	; 0x54ac <serial_create>
    5c4c:	90 93 a4 15 	sts	0x15A4, r25	; 0x8015a4 <_com_serial_instance+0x1>
    5c50:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <_com_serial_instance>
    5c54:	e5 ee       	ldi	r30, 0xE5	; 229
    5c56:	f5 e1       	ldi	r31, 0x15	; 21
    5c58:	83 e1       	ldi	r24, 0x13	; 19
    5c5a:	92 e0       	ldi	r25, 0x02	; 2
    5c5c:	91 83       	std	Z+1, r25	; 0x01
    5c5e:	80 83       	st	Z, r24
    5c60:	93 83       	std	Z+3, r25	; 0x03
    5c62:	82 83       	std	Z+2, r24	; 0x02
    5c64:	0f 91       	pop	r16
    5c66:	ef 90       	pop	r14
    5c68:	cf 90       	pop	r12
    5c6a:	af 90       	pop	r10
    5c6c:	9f 90       	pop	r9
    5c6e:	8f 90       	pop	r8
    5c70:	08 95       	ret

00005c72 <_callBack>:
    5c72:	e0 91 ad 15 	lds	r30, 0x15AD	; 0x8015ad <_callBackFunction>
    5c76:	f0 91 ae 15 	lds	r31, 0x15AE	; 0x8015ae <_callBackFunction+0x1>
    5c7a:	30 97       	sbiw	r30, 0x00	; 0
    5c7c:	09 f0       	breq	.+2      	; 0x5c80 <_callBack+0xe>
    5c7e:	19 95       	eicall
    5c80:	08 95       	ret

00005c82 <_tsl2591TwiCallback>:
    5c82:	64 50       	subi	r22, 0x04	; 4
    5c84:	62 30       	cpi	r22, 0x02	; 2
    5c86:	08 f0       	brcs	.+2      	; 0x5c8a <_tsl2591TwiCallback+0x8>
    5c88:	3b c0       	rjmp	.+118    	; 0x5d00 <_tsl2591TwiCallback+0x7e>
    5c8a:	20 91 ac 15 	lds	r18, 0x15AC	; 0x8015ac <_nextState>
    5c8e:	22 30       	cpi	r18, 0x02	; 2
    5c90:	79 f0       	breq	.+30     	; 0x5cb0 <_tsl2591TwiCallback+0x2e>
    5c92:	18 f4       	brcc	.+6      	; 0x5c9a <_tsl2591TwiCallback+0x18>
    5c94:	21 30       	cpi	r18, 0x01	; 1
    5c96:	31 f0       	breq	.+12     	; 0x5ca4 <_tsl2591TwiCallback+0x22>
    5c98:	30 c0       	rjmp	.+96     	; 0x5cfa <_tsl2591TwiCallback+0x78>
    5c9a:	23 30       	cpi	r18, 0x03	; 3
    5c9c:	81 f0       	breq	.+32     	; 0x5cbe <_tsl2591TwiCallback+0x3c>
    5c9e:	24 30       	cpi	r18, 0x04	; 4
    5ca0:	a1 f0       	breq	.+40     	; 0x5cca <_tsl2591TwiCallback+0x48>
    5ca2:	2b c0       	rjmp	.+86     	; 0x5cfa <_tsl2591TwiCallback+0x78>
    5ca4:	22 e0       	ldi	r18, 0x02	; 2
    5ca6:	20 93 ac 15 	sts	0x15AC, r18	; 0x8015ac <_nextState>
    5caa:	61 e0       	ldi	r22, 0x01	; 1
    5cac:	10 c2       	rjmp	.+1056   	; 0x60ce <twiReceive>
    5cae:	08 95       	ret
    5cb0:	fa 01       	movw	r30, r20
    5cb2:	80 81       	ld	r24, Z
    5cb4:	80 93 a9 15 	sts	0x15A9, r24	; 0x8015a9 <_deviceId>
    5cb8:	82 e0       	ldi	r24, 0x02	; 2
    5cba:	db cf       	rjmp	.-74     	; 0x5c72 <_callBack>
    5cbc:	08 95       	ret
    5cbe:	24 e0       	ldi	r18, 0x04	; 4
    5cc0:	20 93 ac 15 	sts	0x15AC, r18	; 0x8015ac <_nextState>
    5cc4:	64 e0       	ldi	r22, 0x04	; 4
    5cc6:	03 c2       	rjmp	.+1030   	; 0x60ce <twiReceive>
    5cc8:	08 95       	ret
    5cca:	fa 01       	movw	r30, r20
    5ccc:	81 81       	ldd	r24, Z+1	; 0x01
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	98 2f       	mov	r25, r24
    5cd2:	88 27       	eor	r24, r24
    5cd4:	20 81       	ld	r18, Z
    5cd6:	82 2b       	or	r24, r18
    5cd8:	90 93 a8 15 	sts	0x15A8, r25	; 0x8015a8 <_fullSpectrumRaw+0x1>
    5cdc:	80 93 a7 15 	sts	0x15A7, r24	; 0x8015a7 <_fullSpectrumRaw>
    5ce0:	83 81       	ldd	r24, Z+3	; 0x03
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	98 2f       	mov	r25, r24
    5ce6:	88 27       	eor	r24, r24
    5ce8:	22 81       	ldd	r18, Z+2	; 0x02
    5cea:	82 2b       	or	r24, r18
    5cec:	90 93 a6 15 	sts	0x15A6, r25	; 0x8015a6 <_infraredRaw+0x1>
    5cf0:	80 93 a5 15 	sts	0x15A5, r24	; 0x8015a5 <_infraredRaw>
    5cf4:	81 e0       	ldi	r24, 0x01	; 1
    5cf6:	bd cf       	rjmp	.-134    	; 0x5c72 <_callBack>
    5cf8:	08 95       	ret
    5cfa:	80 e0       	ldi	r24, 0x00	; 0
    5cfc:	ba cf       	rjmp	.-140    	; 0x5c72 <_callBack>
    5cfe:	08 95       	ret
    5d00:	10 92 ac 15 	sts	0x15AC, r1	; 0x8015ac <_nextState>
    5d04:	86 e0       	ldi	r24, 0x06	; 6
    5d06:	b5 cf       	rjmp	.-150    	; 0x5c72 <_callBack>
    5d08:	08 95       	ret

00005d0a <_twiTransmit>:
    5d0a:	20 91 af 15 	lds	r18, 0x15AF	; 0x8015af <_twiHandler>
    5d0e:	30 91 b0 15 	lds	r19, 0x15B0	; 0x8015b0 <_twiHandler+0x1>
    5d12:	21 15       	cp	r18, r1
    5d14:	31 05       	cpc	r19, r1
    5d16:	41 f0       	breq	.+16     	; 0x5d28 <_twiTransmit+0x1e>
    5d18:	46 2f       	mov	r20, r22
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	c9 01       	movw	r24, r18
    5d1e:	8b d1       	rcall	.+790    	; 0x6036 <twiTransmit>
    5d20:	82 30       	cpi	r24, 0x02	; 2
    5d22:	21 f0       	breq	.+8      	; 0x5d2c <_twiTransmit+0x22>
    5d24:	80 e0       	ldi	r24, 0x00	; 0
    5d26:	08 95       	ret
    5d28:	87 e0       	ldi	r24, 0x07	; 7
    5d2a:	08 95       	ret
    5d2c:	85 e0       	ldi	r24, 0x05	; 5
    5d2e:	08 95       	ret

00005d30 <tsl2591_initialise>:
    5d30:	0f 93       	push	r16
    5d32:	1f 93       	push	r17
    5d34:	90 93 ae 15 	sts	0x15AE, r25	; 0x8015ae <_callBackFunction+0x1>
    5d38:	80 93 ad 15 	sts	0x15AD, r24	; 0x8015ad <_callBackFunction>
    5d3c:	01 e4       	ldi	r16, 0x41	; 65
    5d3e:	1e e2       	ldi	r17, 0x2E	; 46
    5d40:	20 e0       	ldi	r18, 0x00	; 0
    5d42:	34 e2       	ldi	r19, 0x24	; 36
    5d44:	44 ef       	ldi	r20, 0xF4	; 244
    5d46:	50 e0       	ldi	r21, 0x00	; 0
    5d48:	60 e0       	ldi	r22, 0x00	; 0
    5d4a:	89 e2       	ldi	r24, 0x29	; 41
    5d4c:	23 d1       	rcall	.+582    	; 0x5f94 <twiCreate>
    5d4e:	90 93 b0 15 	sts	0x15B0, r25	; 0x8015b0 <_twiHandler+0x1>
    5d52:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <_twiHandler>
    5d56:	89 2b       	or	r24, r25
    5d58:	11 f0       	breq	.+4      	; 0x5d5e <tsl2591_initialise+0x2e>
    5d5a:	80 e0       	ldi	r24, 0x00	; 0
    5d5c:	01 c0       	rjmp	.+2      	; 0x5d60 <tsl2591_initialise+0x30>
    5d5e:	88 e0       	ldi	r24, 0x08	; 8
    5d60:	1f 91       	pop	r17
    5d62:	0f 91       	pop	r16
    5d64:	08 95       	ret

00005d66 <tsl2591_enable>:
    5d66:	cf 93       	push	r28
    5d68:	df 93       	push	r29
    5d6a:	1f 92       	push	r1
    5d6c:	1f 92       	push	r1
    5d6e:	cd b7       	in	r28, 0x3d	; 61
    5d70:	de b7       	in	r29, 0x3e	; 62
    5d72:	80 ea       	ldi	r24, 0xA0	; 160
    5d74:	89 83       	std	Y+1, r24	; 0x01
    5d76:	83 e0       	ldi	r24, 0x03	; 3
    5d78:	8a 83       	std	Y+2, r24	; 0x02
    5d7a:	10 92 ac 15 	sts	0x15AC, r1	; 0x8015ac <_nextState>
    5d7e:	62 e0       	ldi	r22, 0x02	; 2
    5d80:	ce 01       	movw	r24, r28
    5d82:	01 96       	adiw	r24, 0x01	; 1
    5d84:	c2 df       	rcall	.-124    	; 0x5d0a <_twiTransmit>
    5d86:	0f 90       	pop	r0
    5d88:	0f 90       	pop	r0
    5d8a:	df 91       	pop	r29
    5d8c:	cf 91       	pop	r28
    5d8e:	08 95       	ret

00005d90 <tsl2591_fetchData>:
    5d90:	cf 93       	push	r28
    5d92:	df 93       	push	r29
    5d94:	1f 92       	push	r1
    5d96:	cd b7       	in	r28, 0x3d	; 61
    5d98:	de b7       	in	r29, 0x3e	; 62
    5d9a:	84 eb       	ldi	r24, 0xB4	; 180
    5d9c:	89 83       	std	Y+1, r24	; 0x01
    5d9e:	83 e0       	ldi	r24, 0x03	; 3
    5da0:	80 93 ac 15 	sts	0x15AC, r24	; 0x8015ac <_nextState>
    5da4:	61 e0       	ldi	r22, 0x01	; 1
    5da6:	ce 01       	movw	r24, r28
    5da8:	01 96       	adiw	r24, 0x01	; 1
    5daa:	af df       	rcall	.-162    	; 0x5d0a <_twiTransmit>
    5dac:	0f 90       	pop	r0
    5dae:	df 91       	pop	r29
    5db0:	cf 91       	pop	r28
    5db2:	08 95       	ret

00005db4 <tsl2591_getLux>:
    5db4:	2f 92       	push	r2
    5db6:	3f 92       	push	r3
    5db8:	4f 92       	push	r4
    5dba:	5f 92       	push	r5
    5dbc:	6f 92       	push	r6
    5dbe:	7f 92       	push	r7
    5dc0:	8f 92       	push	r8
    5dc2:	9f 92       	push	r9
    5dc4:	af 92       	push	r10
    5dc6:	bf 92       	push	r11
    5dc8:	cf 92       	push	r12
    5dca:	df 92       	push	r13
    5dcc:	ef 92       	push	r14
    5dce:	ff 92       	push	r15
    5dd0:	0f 93       	push	r16
    5dd2:	1f 93       	push	r17
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	c0 91 a5 15 	lds	r28, 0x15A5	; 0x8015a5 <_infraredRaw>
    5ddc:	d0 91 a6 15 	lds	r29, 0x15A6	; 0x8015a6 <_infraredRaw+0x1>
    5de0:	cf 3f       	cpi	r28, 0xFF	; 255
    5de2:	2f ef       	ldi	r18, 0xFF	; 255
    5de4:	d2 07       	cpc	r29, r18
    5de6:	41 f0       	breq	.+16     	; 0x5df8 <tsl2591_getLux+0x44>
    5de8:	60 91 a7 15 	lds	r22, 0x15A7	; 0x8015a7 <_fullSpectrumRaw>
    5dec:	70 91 a8 15 	lds	r23, 0x15A8	; 0x8015a8 <_fullSpectrumRaw+0x1>
    5df0:	6f 3f       	cpi	r22, 0xFF	; 255
    5df2:	ef ef       	ldi	r30, 0xFF	; 255
    5df4:	7e 07       	cpc	r23, r30
    5df6:	59 f4       	brne	.+22     	; 0x5e0e <tsl2591_getLux+0x5a>
    5df8:	4f ef       	ldi	r20, 0xFF	; 255
    5dfa:	5f ef       	ldi	r21, 0xFF	; 255
    5dfc:	6f e7       	ldi	r22, 0x7F	; 127
    5dfe:	7f e7       	ldi	r23, 0x7F	; 127
    5e00:	fc 01       	movw	r30, r24
    5e02:	40 83       	st	Z, r20
    5e04:	51 83       	std	Z+1, r21	; 0x01
    5e06:	62 83       	std	Z+2, r22	; 0x02
    5e08:	73 83       	std	Z+3, r23	; 0x03
    5e0a:	83 e0       	ldi	r24, 0x03	; 3
    5e0c:	9f c0       	rjmp	.+318    	; 0x5f4c <tsl2591_getLux+0x198>
    5e0e:	1c 01       	movw	r2, r24
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	62 d6       	rcall	.+3268   	; 0x6ada <__floatunsisf>
    5e16:	2b 01       	movw	r4, r22
    5e18:	3c 01       	movw	r6, r24
    5e1a:	be 01       	movw	r22, r28
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	5c d6       	rcall	.+3256   	; 0x6ada <__floatunsisf>
    5e22:	4b 01       	movw	r8, r22
    5e24:	5c 01       	movw	r10, r24
    5e26:	80 91 aa 15 	lds	r24, 0x15AA	; 0x8015aa <_currentIntegrationTime>
    5e2a:	90 e0       	ldi	r25, 0x00	; 0
    5e2c:	01 96       	adiw	r24, 0x01	; 1
    5e2e:	24 e6       	ldi	r18, 0x64	; 100
    5e30:	28 9f       	mul	r18, r24
    5e32:	b0 01       	movw	r22, r0
    5e34:	29 9f       	mul	r18, r25
    5e36:	70 0d       	add	r23, r0
    5e38:	11 24       	eor	r1, r1
    5e3a:	80 91 ab 15 	lds	r24, 0x15AB	; 0x8015ab <_currentGain>
    5e3e:	80 32       	cpi	r24, 0x20	; 32
    5e40:	69 f0       	breq	.+26     	; 0x5e5c <tsl2591_getLux+0xa8>
    5e42:	80 33       	cpi	r24, 0x30	; 48
    5e44:	a1 f0       	breq	.+40     	; 0x5e6e <tsl2591_getLux+0xba>
    5e46:	80 31       	cpi	r24, 0x10	; 16
    5e48:	e1 f4       	brne	.+56     	; 0x5e82 <tsl2591_getLux+0xce>
    5e4a:	0f 2e       	mov	r0, r31
    5e4c:	c1 2c       	mov	r12, r1
    5e4e:	d1 2c       	mov	r13, r1
    5e50:	f8 ec       	ldi	r31, 0xC8	; 200
    5e52:	ef 2e       	mov	r14, r31
    5e54:	f1 e4       	ldi	r31, 0x41	; 65
    5e56:	ff 2e       	mov	r15, r31
    5e58:	f0 2d       	mov	r31, r0
    5e5a:	1b c0       	rjmp	.+54     	; 0x5e92 <tsl2591_getLux+0xde>
    5e5c:	0f 2e       	mov	r0, r31
    5e5e:	c1 2c       	mov	r12, r1
    5e60:	d1 2c       	mov	r13, r1
    5e62:	f6 ed       	ldi	r31, 0xD6	; 214
    5e64:	ef 2e       	mov	r14, r31
    5e66:	f3 e4       	ldi	r31, 0x43	; 67
    5e68:	ff 2e       	mov	r15, r31
    5e6a:	f0 2d       	mov	r31, r0
    5e6c:	12 c0       	rjmp	.+36     	; 0x5e92 <tsl2591_getLux+0xde>
    5e6e:	0f 2e       	mov	r0, r31
    5e70:	c1 2c       	mov	r12, r1
    5e72:	f0 e5       	ldi	r31, 0x50	; 80
    5e74:	df 2e       	mov	r13, r31
    5e76:	fa e1       	ldi	r31, 0x1A	; 26
    5e78:	ef 2e       	mov	r14, r31
    5e7a:	f6 e4       	ldi	r31, 0x46	; 70
    5e7c:	ff 2e       	mov	r15, r31
    5e7e:	f0 2d       	mov	r31, r0
    5e80:	08 c0       	rjmp	.+16     	; 0x5e92 <tsl2591_getLux+0xde>
    5e82:	0f 2e       	mov	r0, r31
    5e84:	c1 2c       	mov	r12, r1
    5e86:	d1 2c       	mov	r13, r1
    5e88:	f0 e8       	ldi	r31, 0x80	; 128
    5e8a:	ef 2e       	mov	r14, r31
    5e8c:	ff e3       	ldi	r31, 0x3F	; 63
    5e8e:	ff 2e       	mov	r15, r31
    5e90:	f0 2d       	mov	r31, r0
    5e92:	07 2e       	mov	r0, r23
    5e94:	00 0c       	add	r0, r0
    5e96:	88 0b       	sbc	r24, r24
    5e98:	99 0b       	sbc	r25, r25
    5e9a:	21 d6       	rcall	.+3138   	; 0x6ade <__floatsisf>
    5e9c:	a7 01       	movw	r20, r14
    5e9e:	96 01       	movw	r18, r12
    5ea0:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__mulsf3>
    5ea4:	20 e0       	ldi	r18, 0x00	; 0
    5ea6:	30 e0       	ldi	r19, 0x00	; 0
    5ea8:	4c ec       	ldi	r20, 0xCC	; 204
    5eaa:	53 e4       	ldi	r21, 0x43	; 67
    5eac:	a5 d5       	rcall	.+2890   	; 0x69f8 <__divsf3>
    5eae:	6b 01       	movw	r12, r22
    5eb0:	7c 01       	movw	r14, r24
    5eb2:	25 e8       	ldi	r18, 0x85	; 133
    5eb4:	3b ee       	ldi	r19, 0xEB	; 235
    5eb6:	41 ed       	ldi	r20, 0xD1	; 209
    5eb8:	5f e3       	ldi	r21, 0x3F	; 63
    5eba:	c5 01       	movw	r24, r10
    5ebc:	b4 01       	movw	r22, r8
    5ebe:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__mulsf3>
    5ec2:	9b 01       	movw	r18, r22
    5ec4:	ac 01       	movw	r20, r24
    5ec6:	c3 01       	movw	r24, r6
    5ec8:	b2 01       	movw	r22, r4
    5eca:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__subsf3>
    5ece:	a7 01       	movw	r20, r14
    5ed0:	96 01       	movw	r18, r12
    5ed2:	92 d5       	rcall	.+2852   	; 0x69f8 <__divsf3>
    5ed4:	16 2f       	mov	r17, r22
    5ed6:	d7 2f       	mov	r29, r23
    5ed8:	c8 2f       	mov	r28, r24
    5eda:	09 2f       	mov	r16, r25
    5edc:	2d e3       	ldi	r18, 0x3D	; 61
    5ede:	3a e0       	ldi	r19, 0x0A	; 10
    5ee0:	47 e1       	ldi	r20, 0x17	; 23
    5ee2:	5f e3       	ldi	r21, 0x3F	; 63
    5ee4:	c3 01       	movw	r24, r6
    5ee6:	b2 01       	movw	r22, r4
    5ee8:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__mulsf3>
    5eec:	2b 01       	movw	r4, r22
    5eee:	3c 01       	movw	r6, r24
    5ef0:	26 ef       	ldi	r18, 0xF6	; 246
    5ef2:	38 e2       	ldi	r19, 0x28	; 40
    5ef4:	4c e5       	ldi	r20, 0x5C	; 92
    5ef6:	5f e3       	ldi	r21, 0x3F	; 63
    5ef8:	c5 01       	movw	r24, r10
    5efa:	b4 01       	movw	r22, r8
    5efc:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__mulsf3>
    5f00:	9b 01       	movw	r18, r22
    5f02:	ac 01       	movw	r20, r24
    5f04:	c3 01       	movw	r24, r6
    5f06:	b2 01       	movw	r22, r4
    5f08:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__subsf3>
    5f0c:	a7 01       	movw	r20, r14
    5f0e:	96 01       	movw	r18, r12
    5f10:	73 d5       	rcall	.+2790   	; 0x69f8 <__divsf3>
    5f12:	c6 2e       	mov	r12, r22
    5f14:	d7 2e       	mov	r13, r23
    5f16:	e8 2e       	mov	r14, r24
    5f18:	f9 2e       	mov	r15, r25
    5f1a:	26 2f       	mov	r18, r22
    5f1c:	37 2f       	mov	r19, r23
    5f1e:	48 2f       	mov	r20, r24
    5f20:	59 2f       	mov	r21, r25
    5f22:	61 2f       	mov	r22, r17
    5f24:	7d 2f       	mov	r23, r29
    5f26:	8c 2f       	mov	r24, r28
    5f28:	90 2f       	mov	r25, r16
    5f2a:	14 d6       	rcall	.+3112   	; 0x6b54 <__gesf2>
    5f2c:	18 16       	cp	r1, r24
    5f2e:	24 f0       	brlt	.+8      	; 0x5f38 <tsl2591_getLux+0x184>
    5f30:	1c 2d       	mov	r17, r12
    5f32:	dd 2d       	mov	r29, r13
    5f34:	ce 2d       	mov	r28, r14
    5f36:	0f 2d       	mov	r16, r15
    5f38:	41 2f       	mov	r20, r17
    5f3a:	5d 2f       	mov	r21, r29
    5f3c:	6c 2f       	mov	r22, r28
    5f3e:	70 2f       	mov	r23, r16
    5f40:	f1 01       	movw	r30, r2
    5f42:	40 83       	st	Z, r20
    5f44:	51 83       	std	Z+1, r21	; 0x01
    5f46:	62 83       	std	Z+2, r22	; 0x02
    5f48:	73 83       	std	Z+3, r23	; 0x03
    5f4a:	80 e0       	ldi	r24, 0x00	; 0
    5f4c:	df 91       	pop	r29
    5f4e:	cf 91       	pop	r28
    5f50:	1f 91       	pop	r17
    5f52:	0f 91       	pop	r16
    5f54:	ff 90       	pop	r15
    5f56:	ef 90       	pop	r14
    5f58:	df 90       	pop	r13
    5f5a:	cf 90       	pop	r12
    5f5c:	bf 90       	pop	r11
    5f5e:	af 90       	pop	r10
    5f60:	9f 90       	pop	r9
    5f62:	8f 90       	pop	r8
    5f64:	7f 90       	pop	r7
    5f66:	6f 90       	pop	r6
    5f68:	5f 90       	pop	r5
    5f6a:	4f 90       	pop	r4
    5f6c:	3f 90       	pop	r3
    5f6e:	2f 90       	pop	r2
    5f70:	08 95       	ret

00005f72 <_initTwiInterface>:
    5f72:	80 91 bf 15 	lds	r24, 0x15BF	; 0x8015bf <_twiIsInitiated>
    5f76:	81 11       	cpse	r24, r1
    5f78:	0c c0       	rjmp	.+24     	; 0x5f92 <_initTwiInterface+0x20>
    5f7a:	8c e0       	ldi	r24, 0x0C	; 12
    5f7c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5f80:	8f ef       	ldi	r24, 0xFF	; 255
    5f82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5f86:	84 e0       	ldi	r24, 0x04	; 4
    5f88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	80 93 bf 15 	sts	0x15BF, r24	; 0x8015bf <_twiIsInitiated>
    5f92:	08 95       	ret

00005f94 <twiCreate>:
    5f94:	af 92       	push	r10
    5f96:	bf 92       	push	r11
    5f98:	cf 92       	push	r12
    5f9a:	df 92       	push	r13
    5f9c:	ef 92       	push	r14
    5f9e:	ff 92       	push	r15
    5fa0:	0f 93       	push	r16
    5fa2:	1f 93       	push	r17
    5fa4:	cf 93       	push	r28
    5fa6:	df 93       	push	r29
    5fa8:	a8 2e       	mov	r10, r24
    5faa:	b6 2e       	mov	r11, r22
    5fac:	69 01       	movw	r12, r18
    5fae:	7a 01       	movw	r14, r20
    5fb0:	84 e0       	ldi	r24, 0x04	; 4
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	27 d6       	rcall	.+3150   	; 0x6c04 <malloc>
    5fb6:	ec 01       	movw	r28, r24
    5fb8:	89 2b       	or	r24, r25
    5fba:	61 f1       	breq	.+88     	; 0x6014 <twiCreate+0x80>
    5fbc:	a8 82       	st	Y, r10
    5fbe:	81 e0       	ldi	r24, 0x01	; 1
    5fc0:	b8 12       	cpse	r11, r24
    5fc2:	12 c0       	rjmp	.+36     	; 0x5fe8 <twiCreate+0x54>
    5fc4:	c7 01       	movw	r24, r14
    5fc6:	b6 01       	movw	r22, r12
    5fc8:	20 ea       	ldi	r18, 0xA0	; 160
    5fca:	36 e8       	ldi	r19, 0x86	; 134
    5fcc:	41 e0       	ldi	r20, 0x01	; 1
    5fce:	50 e0       	ldi	r21, 0x00	; 0
    5fd0:	c6 d5       	rcall	.+2956   	; 0x6b5e <__udivmodsi4>
    5fd2:	da 01       	movw	r26, r20
    5fd4:	c9 01       	movw	r24, r18
    5fd6:	40 97       	sbiw	r24, 0x10	; 16
    5fd8:	a1 09       	sbc	r26, r1
    5fda:	b1 09       	sbc	r27, r1
    5fdc:	b6 95       	lsr	r27
    5fde:	a7 95       	ror	r26
    5fe0:	97 95       	ror	r25
    5fe2:	87 95       	ror	r24
    5fe4:	89 83       	std	Y+1, r24	; 0x01
    5fe6:	11 c0       	rjmp	.+34     	; 0x600a <twiCreate+0x76>
    5fe8:	c7 01       	movw	r24, r14
    5fea:	b6 01       	movw	r22, r12
    5fec:	20 e8       	ldi	r18, 0x80	; 128
    5fee:	3a e1       	ldi	r19, 0x1A	; 26
    5ff0:	46 e0       	ldi	r20, 0x06	; 6
    5ff2:	50 e0       	ldi	r21, 0x00	; 0
    5ff4:	b4 d5       	rcall	.+2920   	; 0x6b5e <__udivmodsi4>
    5ff6:	da 01       	movw	r26, r20
    5ff8:	c9 01       	movw	r24, r18
    5ffa:	40 97       	sbiw	r24, 0x10	; 16
    5ffc:	a1 09       	sbc	r26, r1
    5ffe:	b1 09       	sbc	r27, r1
    6000:	b6 95       	lsr	r27
    6002:	a7 95       	ror	r26
    6004:	97 95       	ror	r25
    6006:	87 95       	ror	r24
    6008:	89 83       	std	Y+1, r24	; 0x01
    600a:	1b 83       	std	Y+3, r17	; 0x03
    600c:	0a 83       	std	Y+2, r16	; 0x02
    600e:	8c 2f       	mov	r24, r28
    6010:	9d 2f       	mov	r25, r29
    6012:	02 c0       	rjmp	.+4      	; 0x6018 <twiCreate+0x84>
    6014:	80 e0       	ldi	r24, 0x00	; 0
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	df 91       	pop	r29
    601a:	cf 91       	pop	r28
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	ff 90       	pop	r15
    6022:	ef 90       	pop	r14
    6024:	df 90       	pop	r13
    6026:	cf 90       	pop	r12
    6028:	bf 90       	pop	r11
    602a:	af 90       	pop	r10
    602c:	08 95       	ret

0000602e <twiIsBusy>:
    602e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6032:	81 70       	andi	r24, 0x01	; 1
    6034:	08 95       	ret

00006036 <twiTransmit>:
    6036:	ff 92       	push	r15
    6038:	0f 93       	push	r16
    603a:	1f 93       	push	r17
    603c:	cf 93       	push	r28
    603e:	df 93       	push	r29
    6040:	00 97       	sbiw	r24, 0x00	; 0
    6042:	d1 f1       	breq	.+116    	; 0x60b8 <twiTransmit+0x82>
    6044:	4a 30       	cpi	r20, 0x0A	; 10
    6046:	d0 f5       	brcc	.+116    	; 0x60bc <twiTransmit+0x86>
    6048:	f4 2e       	mov	r15, r20
    604a:	8b 01       	movw	r16, r22
    604c:	ec 01       	movw	r28, r24
    604e:	ef df       	rcall	.-34     	; 0x602e <twiIsBusy>
    6050:	81 11       	cpse	r24, r1
    6052:	36 c0       	rjmp	.+108    	; 0x60c0 <twiTransmit+0x8a>
    6054:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <_twiCurrentHandler>
    6058:	90 91 b3 15 	lds	r25, 0x15B3	; 0x8015b3 <_twiCurrentHandler+0x1>
    605c:	c8 17       	cp	r28, r24
    605e:	d9 07       	cpc	r29, r25
    6060:	41 f0       	breq	.+16     	; 0x6072 <twiTransmit+0x3c>
    6062:	87 df       	rcall	.-242    	; 0x5f72 <_initTwiInterface>
    6064:	89 81       	ldd	r24, Y+1	; 0x01
    6066:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    606a:	d0 93 b3 15 	sts	0x15B3, r29	; 0x8015b3 <_twiCurrentHandler+0x1>
    606e:	c0 93 b2 15 	sts	0x15B2, r28	; 0x8015b2 <_twiCurrentHandler>
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	8f 0d       	add	r24, r15
    6076:	80 93 b4 15 	sts	0x15B4, r24	; 0x8015b4 <_twiMessageLen>
    607a:	88 81       	ld	r24, Y
    607c:	88 0f       	add	r24, r24
    607e:	80 93 b5 15 	sts	0x15B5, r24	; 0x8015b5 <_twiMessageBuffer>
    6082:	ff 20       	and	r15, r15
    6084:	89 f0       	breq	.+34     	; 0x60a8 <twiTransmit+0x72>
    6086:	f8 01       	movw	r30, r16
    6088:	a6 eb       	ldi	r26, 0xB6	; 182
    608a:	b5 e1       	ldi	r27, 0x15	; 21
    608c:	4f ef       	ldi	r20, 0xFF	; 255
    608e:	4f 0d       	add	r20, r15
    6090:	64 2f       	mov	r22, r20
    6092:	70 e0       	ldi	r23, 0x00	; 0
    6094:	cb 01       	movw	r24, r22
    6096:	01 96       	adiw	r24, 0x01	; 1
    6098:	b8 01       	movw	r22, r16
    609a:	68 0f       	add	r22, r24
    609c:	79 1f       	adc	r23, r25
    609e:	81 91       	ld	r24, Z+
    60a0:	8d 93       	st	X+, r24
    60a2:	e6 17       	cp	r30, r22
    60a4:	f7 07       	cpc	r31, r23
    60a6:	d9 f7       	brne	.-10     	; 0x609e <twiTransmit+0x68>
    60a8:	88 ef       	ldi	r24, 0xF8	; 248
    60aa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    60ae:	85 ea       	ldi	r24, 0xA5	; 165
    60b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60b4:	84 e0       	ldi	r24, 0x04	; 4
    60b6:	05 c0       	rjmp	.+10     	; 0x60c2 <twiTransmit+0x8c>
    60b8:	86 e0       	ldi	r24, 0x06	; 6
    60ba:	03 c0       	rjmp	.+6      	; 0x60c2 <twiTransmit+0x8c>
    60bc:	87 e0       	ldi	r24, 0x07	; 7
    60be:	01 c0       	rjmp	.+2      	; 0x60c2 <twiTransmit+0x8c>
    60c0:	82 e0       	ldi	r24, 0x02	; 2
    60c2:	df 91       	pop	r29
    60c4:	cf 91       	pop	r28
    60c6:	1f 91       	pop	r17
    60c8:	0f 91       	pop	r16
    60ca:	ff 90       	pop	r15
    60cc:	08 95       	ret

000060ce <twiReceive>:
    60ce:	1f 93       	push	r17
    60d0:	cf 93       	push	r28
    60d2:	df 93       	push	r29
    60d4:	00 97       	sbiw	r24, 0x00	; 0
    60d6:	29 f1       	breq	.+74     	; 0x6122 <twiReceive+0x54>
    60d8:	6b 30       	cpi	r22, 0x0B	; 11
    60da:	28 f5       	brcc	.+74     	; 0x6126 <twiReceive+0x58>
    60dc:	16 2f       	mov	r17, r22
    60de:	ec 01       	movw	r28, r24
    60e0:	a6 df       	rcall	.-180    	; 0x602e <twiIsBusy>
    60e2:	81 11       	cpse	r24, r1
    60e4:	22 c0       	rjmp	.+68     	; 0x612a <twiReceive+0x5c>
    60e6:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <_twiCurrentHandler>
    60ea:	90 91 b3 15 	lds	r25, 0x15B3	; 0x8015b3 <_twiCurrentHandler+0x1>
    60ee:	c8 17       	cp	r28, r24
    60f0:	d9 07       	cpc	r29, r25
    60f2:	41 f0       	breq	.+16     	; 0x6104 <twiReceive+0x36>
    60f4:	3e df       	rcall	.-388    	; 0x5f72 <_initTwiInterface>
    60f6:	89 81       	ldd	r24, Y+1	; 0x01
    60f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    60fc:	d0 93 b3 15 	sts	0x15B3, r29	; 0x8015b3 <_twiCurrentHandler+0x1>
    6100:	c0 93 b2 15 	sts	0x15B2, r28	; 0x8015b2 <_twiCurrentHandler>
    6104:	10 93 b4 15 	sts	0x15B4, r17	; 0x8015b4 <_twiMessageLen>
    6108:	88 81       	ld	r24, Y
    610a:	88 0f       	add	r24, r24
    610c:	81 60       	ori	r24, 0x01	; 1
    610e:	80 93 b5 15 	sts	0x15B5, r24	; 0x8015b5 <_twiMessageBuffer>
    6112:	88 ef       	ldi	r24, 0xF8	; 248
    6114:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6118:	85 ea       	ldi	r24, 0xA5	; 165
    611a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    611e:	85 e0       	ldi	r24, 0x05	; 5
    6120:	05 c0       	rjmp	.+10     	; 0x612c <twiReceive+0x5e>
    6122:	86 e0       	ldi	r24, 0x06	; 6
    6124:	03 c0       	rjmp	.+6      	; 0x612c <twiReceive+0x5e>
    6126:	87 e0       	ldi	r24, 0x07	; 7
    6128:	01 c0       	rjmp	.+2      	; 0x612c <twiReceive+0x5e>
    612a:	82 e0       	ldi	r24, 0x02	; 2
    612c:	df 91       	pop	r29
    612e:	cf 91       	pop	r28
    6130:	1f 91       	pop	r17
    6132:	08 95       	ret

00006134 <__vector_39>:
    6134:	1f 92       	push	r1
    6136:	0f 92       	push	r0
    6138:	0f b6       	in	r0, 0x3f	; 63
    613a:	0f 92       	push	r0
    613c:	11 24       	eor	r1, r1
    613e:	0b b6       	in	r0, 0x3b	; 59
    6140:	0f 92       	push	r0
    6142:	2f 93       	push	r18
    6144:	3f 93       	push	r19
    6146:	4f 93       	push	r20
    6148:	5f 93       	push	r21
    614a:	6f 93       	push	r22
    614c:	7f 93       	push	r23
    614e:	8f 93       	push	r24
    6150:	9f 93       	push	r25
    6152:	af 93       	push	r26
    6154:	bf 93       	push	r27
    6156:	ef 93       	push	r30
    6158:	ff 93       	push	r31
    615a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    615e:	8e 2f       	mov	r24, r30
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	fc 01       	movw	r30, r24
    6164:	38 97       	sbiw	r30, 0x08	; 8
    6166:	e1 35       	cpi	r30, 0x51	; 81
    6168:	f1 05       	cpc	r31, r1
    616a:	08 f0       	brcs	.+2      	; 0x616e <__vector_39+0x3a>
    616c:	75 c0       	rjmp	.+234    	; 0x6258 <__vector_39+0x124>
    616e:	88 27       	eor	r24, r24
    6170:	e4 58       	subi	r30, 0x84	; 132
    6172:	ff 4f       	sbci	r31, 0xFF	; 255
    6174:	8f 4f       	sbci	r24, 0xFF	; 255
    6176:	15 c5       	rjmp	.+2602   	; 0x6ba2 <__tablejump2__>
    6178:	10 92 b1 15 	sts	0x15B1, r1	; 0x8015b1 <_index.1885>
    617c:	e0 91 b1 15 	lds	r30, 0x15B1	; 0x8015b1 <_index.1885>
    6180:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <_twiMessageLen>
    6184:	e8 17       	cp	r30, r24
    6186:	70 f4       	brcc	.+28     	; 0x61a4 <__vector_39+0x70>
    6188:	81 e0       	ldi	r24, 0x01	; 1
    618a:	8e 0f       	add	r24, r30
    618c:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <_index.1885>
    6190:	f0 e0       	ldi	r31, 0x00	; 0
    6192:	eb 54       	subi	r30, 0x4B	; 75
    6194:	fa 4e       	sbci	r31, 0xEA	; 234
    6196:	80 81       	ld	r24, Z
    6198:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    619c:	85 e8       	ldi	r24, 0x85	; 133
    619e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61a2:	72 c0       	rjmp	.+228    	; 0x6288 <__vector_39+0x154>
    61a4:	84 e9       	ldi	r24, 0x94	; 148
    61a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61aa:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <_twiCurrentHandler>
    61ae:	90 91 b3 15 	lds	r25, 0x15B3	; 0x8015b3 <_twiCurrentHandler+0x1>
    61b2:	dc 01       	movw	r26, r24
    61b4:	12 96       	adiw	r26, 0x02	; 2
    61b6:	ed 91       	ld	r30, X+
    61b8:	fc 91       	ld	r31, X
    61ba:	13 97       	sbiw	r26, 0x03	; 3
    61bc:	30 97       	sbiw	r30, 0x00	; 0
    61be:	09 f4       	brne	.+2      	; 0x61c2 <__vector_39+0x8e>
    61c0:	63 c0       	rjmp	.+198    	; 0x6288 <__vector_39+0x154>
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	40 e0       	ldi	r20, 0x00	; 0
    61c6:	50 e0       	ldi	r21, 0x00	; 0
    61c8:	64 e0       	ldi	r22, 0x04	; 4
    61ca:	19 95       	eicall
    61cc:	5d c0       	rjmp	.+186    	; 0x6288 <__vector_39+0x154>
    61ce:	e0 91 b1 15 	lds	r30, 0x15B1	; 0x8015b1 <_index.1885>
    61d2:	81 e0       	ldi	r24, 0x01	; 1
    61d4:	8e 0f       	add	r24, r30
    61d6:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <_index.1885>
    61da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    61de:	f0 e0       	ldi	r31, 0x00	; 0
    61e0:	eb 54       	subi	r30, 0x4B	; 75
    61e2:	fa 4e       	sbci	r31, 0xEA	; 234
    61e4:	80 83       	st	Z, r24
    61e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    61ea:	80 34       	cpi	r24, 0x40	; 64
    61ec:	11 f4       	brne	.+4      	; 0x61f2 <__vector_39+0xbe>
    61ee:	10 92 b1 15 	sts	0x15B1, r1	; 0x8015b1 <_index.1885>
    61f2:	20 91 b1 15 	lds	r18, 0x15B1	; 0x8015b1 <_index.1885>
    61f6:	30 e0       	ldi	r19, 0x00	; 0
    61f8:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <_twiMessageLen>
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	01 97       	sbiw	r24, 0x01	; 1
    6200:	28 17       	cp	r18, r24
    6202:	39 07       	cpc	r19, r25
    6204:	24 f4       	brge	.+8      	; 0x620e <__vector_39+0xda>
    6206:	85 ec       	ldi	r24, 0xC5	; 197
    6208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    620c:	3d c0       	rjmp	.+122    	; 0x6288 <__vector_39+0x154>
    620e:	85 e8       	ldi	r24, 0x85	; 133
    6210:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6214:	39 c0       	rjmp	.+114    	; 0x6288 <__vector_39+0x154>
    6216:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    621a:	e0 91 b1 15 	lds	r30, 0x15B1	; 0x8015b1 <_index.1885>
    621e:	f0 e0       	ldi	r31, 0x00	; 0
    6220:	eb 54       	subi	r30, 0x4B	; 75
    6222:	fa 4e       	sbci	r31, 0xEA	; 234
    6224:	80 83       	st	Z, r24
    6226:	84 e9       	ldi	r24, 0x94	; 148
    6228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    622c:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <_twiCurrentHandler>
    6230:	90 91 b3 15 	lds	r25, 0x15B3	; 0x8015b3 <_twiCurrentHandler+0x1>
    6234:	dc 01       	movw	r26, r24
    6236:	12 96       	adiw	r26, 0x02	; 2
    6238:	ed 91       	ld	r30, X+
    623a:	fc 91       	ld	r31, X
    623c:	13 97       	sbiw	r26, 0x03	; 3
    623e:	30 97       	sbiw	r30, 0x00	; 0
    6240:	19 f1       	breq	.+70     	; 0x6288 <__vector_39+0x154>
    6242:	20 91 b4 15 	lds	r18, 0x15B4	; 0x8015b4 <_twiMessageLen>
    6246:	45 eb       	ldi	r20, 0xB5	; 181
    6248:	55 e1       	ldi	r21, 0x15	; 21
    624a:	65 e0       	ldi	r22, 0x05	; 5
    624c:	19 95       	eicall
    624e:	1c c0       	rjmp	.+56     	; 0x6288 <__vector_39+0x154>
    6250:	85 ea       	ldi	r24, 0xA5	; 165
    6252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6256:	18 c0       	rjmp	.+48     	; 0x6288 <__vector_39+0x154>
    6258:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    625c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6260:	84 e0       	ldi	r24, 0x04	; 4
    6262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6266:	80 91 b2 15 	lds	r24, 0x15B2	; 0x8015b2 <_twiCurrentHandler>
    626a:	90 91 b3 15 	lds	r25, 0x15B3	; 0x8015b3 <_twiCurrentHandler+0x1>
    626e:	dc 01       	movw	r26, r24
    6270:	12 96       	adiw	r26, 0x02	; 2
    6272:	ed 91       	ld	r30, X+
    6274:	fc 91       	ld	r31, X
    6276:	13 97       	sbiw	r26, 0x03	; 3
    6278:	30 97       	sbiw	r30, 0x00	; 0
    627a:	31 f0       	breq	.+12     	; 0x6288 <__vector_39+0x154>
    627c:	20 e0       	ldi	r18, 0x00	; 0
    627e:	40 e0       	ldi	r20, 0x00	; 0
    6280:	50 e0       	ldi	r21, 0x00	; 0
    6282:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    6286:	19 95       	eicall
    6288:	ff 91       	pop	r31
    628a:	ef 91       	pop	r30
    628c:	bf 91       	pop	r27
    628e:	af 91       	pop	r26
    6290:	9f 91       	pop	r25
    6292:	8f 91       	pop	r24
    6294:	7f 91       	pop	r23
    6296:	6f 91       	pop	r22
    6298:	5f 91       	pop	r21
    629a:	4f 91       	pop	r20
    629c:	3f 91       	pop	r19
    629e:	2f 91       	pop	r18
    62a0:	0f 90       	pop	r0
    62a2:	0b be       	out	0x3b, r0	; 59
    62a4:	0f 90       	pop	r0
    62a6:	0f be       	out	0x3f, r0	; 63
    62a8:	0f 90       	pop	r0
    62aa:	1f 90       	pop	r1
    62ac:	18 95       	reti

000062ae <fifo_init>:
    62ae:	fc 01       	movw	r30, r24
    62b0:	41 11       	cpse	r20, r1
    62b2:	01 c0       	rjmp	.+2      	; 0x62b6 <fifo_init+0x8>
    62b4:	c8 d5       	rcall	.+2960   	; 0x6e46 <abort>
    62b6:	84 2f       	mov	r24, r20
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	9c 01       	movw	r18, r24
    62bc:	21 50       	subi	r18, 0x01	; 1
    62be:	31 09       	sbc	r19, r1
    62c0:	82 23       	and	r24, r18
    62c2:	93 23       	and	r25, r19
    62c4:	89 2b       	or	r24, r25
    62c6:	09 f0       	breq	.+2      	; 0x62ca <fifo_init+0x1c>
    62c8:	be d5       	rcall	.+2940   	; 0x6e46 <abort>
    62ca:	41 38       	cpi	r20, 0x81	; 129
    62cc:	08 f0       	brcs	.+2      	; 0x62d0 <fifo_init+0x22>
    62ce:	bb d5       	rcall	.+2934   	; 0x6e46 <abort>
    62d0:	12 82       	std	Z+2, r1	; 0x02
    62d2:	13 82       	std	Z+3, r1	; 0x03
    62d4:	44 83       	std	Z+4, r20	; 0x04
    62d6:	44 0f       	add	r20, r20
    62d8:	41 50       	subi	r20, 0x01	; 1
    62da:	45 83       	std	Z+5, r20	; 0x05
    62dc:	71 83       	std	Z+1, r23	; 0x01
    62de:	60 83       	st	Z, r22
    62e0:	80 e0       	ldi	r24, 0x00	; 0
    62e2:	90 e0       	ldi	r25, 0x00	; 0
    62e4:	08 95       	ret

000062e6 <vfprintf>:
    62e6:	2f 92       	push	r2
    62e8:	3f 92       	push	r3
    62ea:	4f 92       	push	r4
    62ec:	5f 92       	push	r5
    62ee:	6f 92       	push	r6
    62f0:	7f 92       	push	r7
    62f2:	8f 92       	push	r8
    62f4:	9f 92       	push	r9
    62f6:	af 92       	push	r10
    62f8:	bf 92       	push	r11
    62fa:	cf 92       	push	r12
    62fc:	df 92       	push	r13
    62fe:	ef 92       	push	r14
    6300:	ff 92       	push	r15
    6302:	0f 93       	push	r16
    6304:	1f 93       	push	r17
    6306:	cf 93       	push	r28
    6308:	df 93       	push	r29
    630a:	cd b7       	in	r28, 0x3d	; 61
    630c:	de b7       	in	r29, 0x3e	; 62
    630e:	60 97       	sbiw	r28, 0x10	; 16
    6310:	0f b6       	in	r0, 0x3f	; 63
    6312:	f8 94       	cli
    6314:	de bf       	out	0x3e, r29	; 62
    6316:	0f be       	out	0x3f, r0	; 63
    6318:	cd bf       	out	0x3d, r28	; 61
    631a:	7c 01       	movw	r14, r24
    631c:	1b 01       	movw	r2, r22
    631e:	6a 01       	movw	r12, r20
    6320:	fc 01       	movw	r30, r24
    6322:	17 82       	std	Z+7, r1	; 0x07
    6324:	16 82       	std	Z+6, r1	; 0x06
    6326:	83 81       	ldd	r24, Z+3	; 0x03
    6328:	81 ff       	sbrs	r24, 1
    632a:	2a c3       	rjmp	.+1620   	; 0x6980 <vfprintf+0x69a>
    632c:	9e 01       	movw	r18, r28
    632e:	2f 5f       	subi	r18, 0xFF	; 255
    6330:	3f 4f       	sbci	r19, 0xFF	; 255
    6332:	39 01       	movw	r6, r18
    6334:	f7 01       	movw	r30, r14
    6336:	93 81       	ldd	r25, Z+3	; 0x03
    6338:	f1 01       	movw	r30, r2
    633a:	93 fd       	sbrc	r25, 3
    633c:	85 91       	lpm	r24, Z+
    633e:	93 ff       	sbrs	r25, 3
    6340:	81 91       	ld	r24, Z+
    6342:	1f 01       	movw	r2, r30
    6344:	88 23       	and	r24, r24
    6346:	09 f4       	brne	.+2      	; 0x634a <vfprintf+0x64>
    6348:	17 c3       	rjmp	.+1582   	; 0x6978 <vfprintf+0x692>
    634a:	85 32       	cpi	r24, 0x25	; 37
    634c:	39 f4       	brne	.+14     	; 0x635c <vfprintf+0x76>
    634e:	93 fd       	sbrc	r25, 3
    6350:	85 91       	lpm	r24, Z+
    6352:	93 ff       	sbrs	r25, 3
    6354:	81 91       	ld	r24, Z+
    6356:	1f 01       	movw	r2, r30
    6358:	85 32       	cpi	r24, 0x25	; 37
    635a:	31 f4       	brne	.+12     	; 0x6368 <vfprintf+0x82>
    635c:	b7 01       	movw	r22, r14
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	c3 d6       	rcall	.+3462   	; 0x70e8 <fputc>
    6362:	56 01       	movw	r10, r12
    6364:	65 01       	movw	r12, r10
    6366:	e6 cf       	rjmp	.-52     	; 0x6334 <vfprintf+0x4e>
    6368:	10 e0       	ldi	r17, 0x00	; 0
    636a:	51 2c       	mov	r5, r1
    636c:	91 2c       	mov	r9, r1
    636e:	ff e1       	ldi	r31, 0x1F	; 31
    6370:	f9 15       	cp	r31, r9
    6372:	d8 f0       	brcs	.+54     	; 0x63aa <vfprintf+0xc4>
    6374:	8b 32       	cpi	r24, 0x2B	; 43
    6376:	79 f0       	breq	.+30     	; 0x6396 <vfprintf+0xb0>
    6378:	38 f4       	brcc	.+14     	; 0x6388 <vfprintf+0xa2>
    637a:	80 32       	cpi	r24, 0x20	; 32
    637c:	79 f0       	breq	.+30     	; 0x639c <vfprintf+0xb6>
    637e:	83 32       	cpi	r24, 0x23	; 35
    6380:	a1 f4       	brne	.+40     	; 0x63aa <vfprintf+0xc4>
    6382:	f9 2d       	mov	r31, r9
    6384:	f0 61       	ori	r31, 0x10	; 16
    6386:	2e c0       	rjmp	.+92     	; 0x63e4 <vfprintf+0xfe>
    6388:	8d 32       	cpi	r24, 0x2D	; 45
    638a:	61 f0       	breq	.+24     	; 0x63a4 <vfprintf+0xbe>
    638c:	80 33       	cpi	r24, 0x30	; 48
    638e:	69 f4       	brne	.+26     	; 0x63aa <vfprintf+0xc4>
    6390:	29 2d       	mov	r18, r9
    6392:	21 60       	ori	r18, 0x01	; 1
    6394:	2d c0       	rjmp	.+90     	; 0x63f0 <vfprintf+0x10a>
    6396:	39 2d       	mov	r19, r9
    6398:	32 60       	ori	r19, 0x02	; 2
    639a:	93 2e       	mov	r9, r19
    639c:	89 2d       	mov	r24, r9
    639e:	84 60       	ori	r24, 0x04	; 4
    63a0:	98 2e       	mov	r9, r24
    63a2:	2a c0       	rjmp	.+84     	; 0x63f8 <vfprintf+0x112>
    63a4:	e9 2d       	mov	r30, r9
    63a6:	e8 60       	ori	r30, 0x08	; 8
    63a8:	15 c0       	rjmp	.+42     	; 0x63d4 <vfprintf+0xee>
    63aa:	97 fc       	sbrc	r9, 7
    63ac:	2d c0       	rjmp	.+90     	; 0x6408 <vfprintf+0x122>
    63ae:	20 ed       	ldi	r18, 0xD0	; 208
    63b0:	28 0f       	add	r18, r24
    63b2:	2a 30       	cpi	r18, 0x0A	; 10
    63b4:	88 f4       	brcc	.+34     	; 0x63d8 <vfprintf+0xf2>
    63b6:	96 fe       	sbrs	r9, 6
    63b8:	06 c0       	rjmp	.+12     	; 0x63c6 <vfprintf+0xe0>
    63ba:	3a e0       	ldi	r19, 0x0A	; 10
    63bc:	13 9f       	mul	r17, r19
    63be:	20 0d       	add	r18, r0
    63c0:	11 24       	eor	r1, r1
    63c2:	12 2f       	mov	r17, r18
    63c4:	19 c0       	rjmp	.+50     	; 0x63f8 <vfprintf+0x112>
    63c6:	8a e0       	ldi	r24, 0x0A	; 10
    63c8:	58 9e       	mul	r5, r24
    63ca:	20 0d       	add	r18, r0
    63cc:	11 24       	eor	r1, r1
    63ce:	52 2e       	mov	r5, r18
    63d0:	e9 2d       	mov	r30, r9
    63d2:	e0 62       	ori	r30, 0x20	; 32
    63d4:	9e 2e       	mov	r9, r30
    63d6:	10 c0       	rjmp	.+32     	; 0x63f8 <vfprintf+0x112>
    63d8:	8e 32       	cpi	r24, 0x2E	; 46
    63da:	31 f4       	brne	.+12     	; 0x63e8 <vfprintf+0x102>
    63dc:	96 fc       	sbrc	r9, 6
    63de:	cc c2       	rjmp	.+1432   	; 0x6978 <vfprintf+0x692>
    63e0:	f9 2d       	mov	r31, r9
    63e2:	f0 64       	ori	r31, 0x40	; 64
    63e4:	9f 2e       	mov	r9, r31
    63e6:	08 c0       	rjmp	.+16     	; 0x63f8 <vfprintf+0x112>
    63e8:	8c 36       	cpi	r24, 0x6C	; 108
    63ea:	21 f4       	brne	.+8      	; 0x63f4 <vfprintf+0x10e>
    63ec:	29 2d       	mov	r18, r9
    63ee:	20 68       	ori	r18, 0x80	; 128
    63f0:	92 2e       	mov	r9, r18
    63f2:	02 c0       	rjmp	.+4      	; 0x63f8 <vfprintf+0x112>
    63f4:	88 36       	cpi	r24, 0x68	; 104
    63f6:	41 f4       	brne	.+16     	; 0x6408 <vfprintf+0x122>
    63f8:	f1 01       	movw	r30, r2
    63fa:	93 fd       	sbrc	r25, 3
    63fc:	85 91       	lpm	r24, Z+
    63fe:	93 ff       	sbrs	r25, 3
    6400:	81 91       	ld	r24, Z+
    6402:	1f 01       	movw	r2, r30
    6404:	81 11       	cpse	r24, r1
    6406:	b3 cf       	rjmp	.-154    	; 0x636e <vfprintf+0x88>
    6408:	9b eb       	ldi	r25, 0xBB	; 187
    640a:	98 0f       	add	r25, r24
    640c:	93 30       	cpi	r25, 0x03	; 3
    640e:	20 f4       	brcc	.+8      	; 0x6418 <vfprintf+0x132>
    6410:	99 2d       	mov	r25, r9
    6412:	90 61       	ori	r25, 0x10	; 16
    6414:	80 5e       	subi	r24, 0xE0	; 224
    6416:	07 c0       	rjmp	.+14     	; 0x6426 <vfprintf+0x140>
    6418:	9b e9       	ldi	r25, 0x9B	; 155
    641a:	98 0f       	add	r25, r24
    641c:	93 30       	cpi	r25, 0x03	; 3
    641e:	08 f0       	brcs	.+2      	; 0x6422 <vfprintf+0x13c>
    6420:	59 c1       	rjmp	.+690    	; 0x66d4 <vfprintf+0x3ee>
    6422:	99 2d       	mov	r25, r9
    6424:	9f 7e       	andi	r25, 0xEF	; 239
    6426:	96 ff       	sbrs	r25, 6
    6428:	16 e0       	ldi	r17, 0x06	; 6
    642a:	9f 73       	andi	r25, 0x3F	; 63
    642c:	99 2e       	mov	r9, r25
    642e:	85 36       	cpi	r24, 0x65	; 101
    6430:	19 f4       	brne	.+6      	; 0x6438 <vfprintf+0x152>
    6432:	90 64       	ori	r25, 0x40	; 64
    6434:	99 2e       	mov	r9, r25
    6436:	08 c0       	rjmp	.+16     	; 0x6448 <vfprintf+0x162>
    6438:	86 36       	cpi	r24, 0x66	; 102
    643a:	21 f4       	brne	.+8      	; 0x6444 <vfprintf+0x15e>
    643c:	39 2f       	mov	r19, r25
    643e:	30 68       	ori	r19, 0x80	; 128
    6440:	93 2e       	mov	r9, r19
    6442:	02 c0       	rjmp	.+4      	; 0x6448 <vfprintf+0x162>
    6444:	11 11       	cpse	r17, r1
    6446:	11 50       	subi	r17, 0x01	; 1
    6448:	97 fe       	sbrs	r9, 7
    644a:	07 c0       	rjmp	.+14     	; 0x645a <vfprintf+0x174>
    644c:	1c 33       	cpi	r17, 0x3C	; 60
    644e:	50 f4       	brcc	.+20     	; 0x6464 <vfprintf+0x17e>
    6450:	44 24       	eor	r4, r4
    6452:	43 94       	inc	r4
    6454:	41 0e       	add	r4, r17
    6456:	27 e0       	ldi	r18, 0x07	; 7
    6458:	0b c0       	rjmp	.+22     	; 0x6470 <vfprintf+0x18a>
    645a:	18 30       	cpi	r17, 0x08	; 8
    645c:	38 f0       	brcs	.+14     	; 0x646c <vfprintf+0x186>
    645e:	27 e0       	ldi	r18, 0x07	; 7
    6460:	17 e0       	ldi	r17, 0x07	; 7
    6462:	05 c0       	rjmp	.+10     	; 0x646e <vfprintf+0x188>
    6464:	27 e0       	ldi	r18, 0x07	; 7
    6466:	9c e3       	ldi	r25, 0x3C	; 60
    6468:	49 2e       	mov	r4, r25
    646a:	02 c0       	rjmp	.+4      	; 0x6470 <vfprintf+0x18a>
    646c:	21 2f       	mov	r18, r17
    646e:	41 2c       	mov	r4, r1
    6470:	56 01       	movw	r10, r12
    6472:	84 e0       	ldi	r24, 0x04	; 4
    6474:	a8 0e       	add	r10, r24
    6476:	b1 1c       	adc	r11, r1
    6478:	f6 01       	movw	r30, r12
    647a:	60 81       	ld	r22, Z
    647c:	71 81       	ldd	r23, Z+1	; 0x01
    647e:	82 81       	ldd	r24, Z+2	; 0x02
    6480:	93 81       	ldd	r25, Z+3	; 0x03
    6482:	04 2d       	mov	r16, r4
    6484:	a3 01       	movw	r20, r6
    6486:	e3 d4       	rcall	.+2502   	; 0x6e4e <__ftoa_engine>
    6488:	6c 01       	movw	r12, r24
    648a:	f9 81       	ldd	r31, Y+1	; 0x01
    648c:	fc 87       	std	Y+12, r31	; 0x0c
    648e:	f0 ff       	sbrs	r31, 0
    6490:	02 c0       	rjmp	.+4      	; 0x6496 <vfprintf+0x1b0>
    6492:	f3 ff       	sbrs	r31, 3
    6494:	06 c0       	rjmp	.+12     	; 0x64a2 <vfprintf+0x1bc>
    6496:	91 fc       	sbrc	r9, 1
    6498:	06 c0       	rjmp	.+12     	; 0x64a6 <vfprintf+0x1c0>
    649a:	92 fe       	sbrs	r9, 2
    649c:	06 c0       	rjmp	.+12     	; 0x64aa <vfprintf+0x1c4>
    649e:	00 e2       	ldi	r16, 0x20	; 32
    64a0:	05 c0       	rjmp	.+10     	; 0x64ac <vfprintf+0x1c6>
    64a2:	0d e2       	ldi	r16, 0x2D	; 45
    64a4:	03 c0       	rjmp	.+6      	; 0x64ac <vfprintf+0x1c6>
    64a6:	0b e2       	ldi	r16, 0x2B	; 43
    64a8:	01 c0       	rjmp	.+2      	; 0x64ac <vfprintf+0x1c6>
    64aa:	00 e0       	ldi	r16, 0x00	; 0
    64ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    64ae:	8c 70       	andi	r24, 0x0C	; 12
    64b0:	19 f0       	breq	.+6      	; 0x64b8 <vfprintf+0x1d2>
    64b2:	01 11       	cpse	r16, r1
    64b4:	43 c2       	rjmp	.+1158   	; 0x693c <vfprintf+0x656>
    64b6:	80 c2       	rjmp	.+1280   	; 0x69b8 <vfprintf+0x6d2>
    64b8:	97 fe       	sbrs	r9, 7
    64ba:	10 c0       	rjmp	.+32     	; 0x64dc <vfprintf+0x1f6>
    64bc:	4c 0c       	add	r4, r12
    64be:	fc 85       	ldd	r31, Y+12	; 0x0c
    64c0:	f4 ff       	sbrs	r31, 4
    64c2:	04 c0       	rjmp	.+8      	; 0x64cc <vfprintf+0x1e6>
    64c4:	8a 81       	ldd	r24, Y+2	; 0x02
    64c6:	81 33       	cpi	r24, 0x31	; 49
    64c8:	09 f4       	brne	.+2      	; 0x64cc <vfprintf+0x1e6>
    64ca:	4a 94       	dec	r4
    64cc:	14 14       	cp	r1, r4
    64ce:	74 f5       	brge	.+92     	; 0x652c <vfprintf+0x246>
    64d0:	28 e0       	ldi	r18, 0x08	; 8
    64d2:	24 15       	cp	r18, r4
    64d4:	78 f5       	brcc	.+94     	; 0x6534 <vfprintf+0x24e>
    64d6:	88 e0       	ldi	r24, 0x08	; 8
    64d8:	48 2e       	mov	r4, r24
    64da:	2c c0       	rjmp	.+88     	; 0x6534 <vfprintf+0x24e>
    64dc:	96 fc       	sbrc	r9, 6
    64de:	2a c0       	rjmp	.+84     	; 0x6534 <vfprintf+0x24e>
    64e0:	81 2f       	mov	r24, r17
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	8c 15       	cp	r24, r12
    64e6:	9d 05       	cpc	r25, r13
    64e8:	9c f0       	brlt	.+38     	; 0x6510 <vfprintf+0x22a>
    64ea:	3c ef       	ldi	r19, 0xFC	; 252
    64ec:	c3 16       	cp	r12, r19
    64ee:	3f ef       	ldi	r19, 0xFF	; 255
    64f0:	d3 06       	cpc	r13, r19
    64f2:	74 f0       	brlt	.+28     	; 0x6510 <vfprintf+0x22a>
    64f4:	89 2d       	mov	r24, r9
    64f6:	80 68       	ori	r24, 0x80	; 128
    64f8:	98 2e       	mov	r9, r24
    64fa:	0a c0       	rjmp	.+20     	; 0x6510 <vfprintf+0x22a>
    64fc:	e2 e0       	ldi	r30, 0x02	; 2
    64fe:	f0 e0       	ldi	r31, 0x00	; 0
    6500:	ec 0f       	add	r30, r28
    6502:	fd 1f       	adc	r31, r29
    6504:	e1 0f       	add	r30, r17
    6506:	f1 1d       	adc	r31, r1
    6508:	80 81       	ld	r24, Z
    650a:	80 33       	cpi	r24, 0x30	; 48
    650c:	19 f4       	brne	.+6      	; 0x6514 <vfprintf+0x22e>
    650e:	11 50       	subi	r17, 0x01	; 1
    6510:	11 11       	cpse	r17, r1
    6512:	f4 cf       	rjmp	.-24     	; 0x64fc <vfprintf+0x216>
    6514:	97 fe       	sbrs	r9, 7
    6516:	0e c0       	rjmp	.+28     	; 0x6534 <vfprintf+0x24e>
    6518:	44 24       	eor	r4, r4
    651a:	43 94       	inc	r4
    651c:	41 0e       	add	r4, r17
    651e:	81 2f       	mov	r24, r17
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	c8 16       	cp	r12, r24
    6524:	d9 06       	cpc	r13, r25
    6526:	2c f4       	brge	.+10     	; 0x6532 <vfprintf+0x24c>
    6528:	1c 19       	sub	r17, r12
    652a:	04 c0       	rjmp	.+8      	; 0x6534 <vfprintf+0x24e>
    652c:	44 24       	eor	r4, r4
    652e:	43 94       	inc	r4
    6530:	01 c0       	rjmp	.+2      	; 0x6534 <vfprintf+0x24e>
    6532:	10 e0       	ldi	r17, 0x00	; 0
    6534:	97 fe       	sbrs	r9, 7
    6536:	06 c0       	rjmp	.+12     	; 0x6544 <vfprintf+0x25e>
    6538:	1c 14       	cp	r1, r12
    653a:	1d 04       	cpc	r1, r13
    653c:	34 f4       	brge	.+12     	; 0x654a <vfprintf+0x264>
    653e:	c6 01       	movw	r24, r12
    6540:	01 96       	adiw	r24, 0x01	; 1
    6542:	05 c0       	rjmp	.+10     	; 0x654e <vfprintf+0x268>
    6544:	85 e0       	ldi	r24, 0x05	; 5
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	02 c0       	rjmp	.+4      	; 0x654e <vfprintf+0x268>
    654a:	81 e0       	ldi	r24, 0x01	; 1
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	01 11       	cpse	r16, r1
    6550:	01 96       	adiw	r24, 0x01	; 1
    6552:	11 23       	and	r17, r17
    6554:	31 f0       	breq	.+12     	; 0x6562 <vfprintf+0x27c>
    6556:	21 2f       	mov	r18, r17
    6558:	30 e0       	ldi	r19, 0x00	; 0
    655a:	2f 5f       	subi	r18, 0xFF	; 255
    655c:	3f 4f       	sbci	r19, 0xFF	; 255
    655e:	82 0f       	add	r24, r18
    6560:	93 1f       	adc	r25, r19
    6562:	25 2d       	mov	r18, r5
    6564:	30 e0       	ldi	r19, 0x00	; 0
    6566:	82 17       	cp	r24, r18
    6568:	93 07       	cpc	r25, r19
    656a:	14 f4       	brge	.+4      	; 0x6570 <vfprintf+0x28a>
    656c:	58 1a       	sub	r5, r24
    656e:	01 c0       	rjmp	.+2      	; 0x6572 <vfprintf+0x28c>
    6570:	51 2c       	mov	r5, r1
    6572:	89 2d       	mov	r24, r9
    6574:	89 70       	andi	r24, 0x09	; 9
    6576:	41 f4       	brne	.+16     	; 0x6588 <vfprintf+0x2a2>
    6578:	55 20       	and	r5, r5
    657a:	31 f0       	breq	.+12     	; 0x6588 <vfprintf+0x2a2>
    657c:	b7 01       	movw	r22, r14
    657e:	80 e2       	ldi	r24, 0x20	; 32
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	b2 d5       	rcall	.+2916   	; 0x70e8 <fputc>
    6584:	5a 94       	dec	r5
    6586:	f8 cf       	rjmp	.-16     	; 0x6578 <vfprintf+0x292>
    6588:	00 23       	and	r16, r16
    658a:	21 f0       	breq	.+8      	; 0x6594 <vfprintf+0x2ae>
    658c:	b7 01       	movw	r22, r14
    658e:	80 2f       	mov	r24, r16
    6590:	90 e0       	ldi	r25, 0x00	; 0
    6592:	aa d5       	rcall	.+2900   	; 0x70e8 <fputc>
    6594:	93 fc       	sbrc	r9, 3
    6596:	08 c0       	rjmp	.+16     	; 0x65a8 <vfprintf+0x2c2>
    6598:	55 20       	and	r5, r5
    659a:	31 f0       	breq	.+12     	; 0x65a8 <vfprintf+0x2c2>
    659c:	b7 01       	movw	r22, r14
    659e:	80 e3       	ldi	r24, 0x30	; 48
    65a0:	90 e0       	ldi	r25, 0x00	; 0
    65a2:	a2 d5       	rcall	.+2884   	; 0x70e8 <fputc>
    65a4:	5a 94       	dec	r5
    65a6:	f8 cf       	rjmp	.-16     	; 0x6598 <vfprintf+0x2b2>
    65a8:	97 fe       	sbrs	r9, 7
    65aa:	4a c0       	rjmp	.+148    	; 0x6640 <vfprintf+0x35a>
    65ac:	46 01       	movw	r8, r12
    65ae:	d7 fe       	sbrs	r13, 7
    65b0:	02 c0       	rjmp	.+4      	; 0x65b6 <vfprintf+0x2d0>
    65b2:	81 2c       	mov	r8, r1
    65b4:	91 2c       	mov	r9, r1
    65b6:	c6 01       	movw	r24, r12
    65b8:	88 19       	sub	r24, r8
    65ba:	99 09       	sbc	r25, r9
    65bc:	f3 01       	movw	r30, r6
    65be:	e8 0f       	add	r30, r24
    65c0:	f9 1f       	adc	r31, r25
    65c2:	fe 87       	std	Y+14, r31	; 0x0e
    65c4:	ed 87       	std	Y+13, r30	; 0x0d
    65c6:	96 01       	movw	r18, r12
    65c8:	24 19       	sub	r18, r4
    65ca:	31 09       	sbc	r19, r1
    65cc:	38 8b       	std	Y+16, r19	; 0x10
    65ce:	2f 87       	std	Y+15, r18	; 0x0f
    65d0:	01 2f       	mov	r16, r17
    65d2:	10 e0       	ldi	r17, 0x00	; 0
    65d4:	11 95       	neg	r17
    65d6:	01 95       	neg	r16
    65d8:	11 09       	sbc	r17, r1
    65da:	3f ef       	ldi	r19, 0xFF	; 255
    65dc:	83 16       	cp	r8, r19
    65de:	93 06       	cpc	r9, r19
    65e0:	21 f4       	brne	.+8      	; 0x65ea <vfprintf+0x304>
    65e2:	b7 01       	movw	r22, r14
    65e4:	8e e2       	ldi	r24, 0x2E	; 46
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	7f d5       	rcall	.+2814   	; 0x70e8 <fputc>
    65ea:	c8 14       	cp	r12, r8
    65ec:	d9 04       	cpc	r13, r9
    65ee:	4c f0       	brlt	.+18     	; 0x6602 <vfprintf+0x31c>
    65f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    65f2:	98 89       	ldd	r25, Y+16	; 0x10
    65f4:	88 15       	cp	r24, r8
    65f6:	99 05       	cpc	r25, r9
    65f8:	24 f4       	brge	.+8      	; 0x6602 <vfprintf+0x31c>
    65fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    65fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    65fe:	81 81       	ldd	r24, Z+1	; 0x01
    6600:	01 c0       	rjmp	.+2      	; 0x6604 <vfprintf+0x31e>
    6602:	80 e3       	ldi	r24, 0x30	; 48
    6604:	f1 e0       	ldi	r31, 0x01	; 1
    6606:	8f 1a       	sub	r8, r31
    6608:	91 08       	sbc	r9, r1
    660a:	2d 85       	ldd	r18, Y+13	; 0x0d
    660c:	3e 85       	ldd	r19, Y+14	; 0x0e
    660e:	2f 5f       	subi	r18, 0xFF	; 255
    6610:	3f 4f       	sbci	r19, 0xFF	; 255
    6612:	3e 87       	std	Y+14, r19	; 0x0e
    6614:	2d 87       	std	Y+13, r18	; 0x0d
    6616:	80 16       	cp	r8, r16
    6618:	91 06       	cpc	r9, r17
    661a:	24 f0       	brlt	.+8      	; 0x6624 <vfprintf+0x33e>
    661c:	b7 01       	movw	r22, r14
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	63 d5       	rcall	.+2758   	; 0x70e8 <fputc>
    6622:	db cf       	rjmp	.-74     	; 0x65da <vfprintf+0x2f4>
    6624:	c8 14       	cp	r12, r8
    6626:	d9 04       	cpc	r13, r9
    6628:	41 f4       	brne	.+16     	; 0x663a <vfprintf+0x354>
    662a:	9a 81       	ldd	r25, Y+2	; 0x02
    662c:	96 33       	cpi	r25, 0x36	; 54
    662e:	20 f4       	brcc	.+8      	; 0x6638 <vfprintf+0x352>
    6630:	95 33       	cpi	r25, 0x35	; 53
    6632:	19 f4       	brne	.+6      	; 0x663a <vfprintf+0x354>
    6634:	3c 85       	ldd	r19, Y+12	; 0x0c
    6636:	34 ff       	sbrs	r19, 4
    6638:	81 e3       	ldi	r24, 0x31	; 49
    663a:	b7 01       	movw	r22, r14
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	48 c0       	rjmp	.+144    	; 0x66d0 <vfprintf+0x3ea>
    6640:	8a 81       	ldd	r24, Y+2	; 0x02
    6642:	81 33       	cpi	r24, 0x31	; 49
    6644:	19 f0       	breq	.+6      	; 0x664c <vfprintf+0x366>
    6646:	9c 85       	ldd	r25, Y+12	; 0x0c
    6648:	9f 7e       	andi	r25, 0xEF	; 239
    664a:	9c 87       	std	Y+12, r25	; 0x0c
    664c:	b7 01       	movw	r22, r14
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	4b d5       	rcall	.+2710   	; 0x70e8 <fputc>
    6652:	11 11       	cpse	r17, r1
    6654:	05 c0       	rjmp	.+10     	; 0x6660 <vfprintf+0x37a>
    6656:	94 fc       	sbrc	r9, 4
    6658:	16 c0       	rjmp	.+44     	; 0x6686 <vfprintf+0x3a0>
    665a:	85 e6       	ldi	r24, 0x65	; 101
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	15 c0       	rjmp	.+42     	; 0x668a <vfprintf+0x3a4>
    6660:	b7 01       	movw	r22, r14
    6662:	8e e2       	ldi	r24, 0x2E	; 46
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	40 d5       	rcall	.+2688   	; 0x70e8 <fputc>
    6668:	1e 5f       	subi	r17, 0xFE	; 254
    666a:	82 e0       	ldi	r24, 0x02	; 2
    666c:	01 e0       	ldi	r16, 0x01	; 1
    666e:	08 0f       	add	r16, r24
    6670:	f3 01       	movw	r30, r6
    6672:	e8 0f       	add	r30, r24
    6674:	f1 1d       	adc	r31, r1
    6676:	80 81       	ld	r24, Z
    6678:	b7 01       	movw	r22, r14
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	35 d5       	rcall	.+2666   	; 0x70e8 <fputc>
    667e:	80 2f       	mov	r24, r16
    6680:	01 13       	cpse	r16, r17
    6682:	f4 cf       	rjmp	.-24     	; 0x666c <vfprintf+0x386>
    6684:	e8 cf       	rjmp	.-48     	; 0x6656 <vfprintf+0x370>
    6686:	85 e4       	ldi	r24, 0x45	; 69
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	b7 01       	movw	r22, r14
    668c:	2d d5       	rcall	.+2650   	; 0x70e8 <fputc>
    668e:	d7 fc       	sbrc	r13, 7
    6690:	06 c0       	rjmp	.+12     	; 0x669e <vfprintf+0x3b8>
    6692:	c1 14       	cp	r12, r1
    6694:	d1 04       	cpc	r13, r1
    6696:	41 f4       	brne	.+16     	; 0x66a8 <vfprintf+0x3c2>
    6698:	ec 85       	ldd	r30, Y+12	; 0x0c
    669a:	e4 ff       	sbrs	r30, 4
    669c:	05 c0       	rjmp	.+10     	; 0x66a8 <vfprintf+0x3c2>
    669e:	d1 94       	neg	r13
    66a0:	c1 94       	neg	r12
    66a2:	d1 08       	sbc	r13, r1
    66a4:	8d e2       	ldi	r24, 0x2D	; 45
    66a6:	01 c0       	rjmp	.+2      	; 0x66aa <vfprintf+0x3c4>
    66a8:	8b e2       	ldi	r24, 0x2B	; 43
    66aa:	b7 01       	movw	r22, r14
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	1c d5       	rcall	.+2616   	; 0x70e8 <fputc>
    66b0:	80 e3       	ldi	r24, 0x30	; 48
    66b2:	2a e0       	ldi	r18, 0x0A	; 10
    66b4:	c2 16       	cp	r12, r18
    66b6:	d1 04       	cpc	r13, r1
    66b8:	2c f0       	brlt	.+10     	; 0x66c4 <vfprintf+0x3de>
    66ba:	8f 5f       	subi	r24, 0xFF	; 255
    66bc:	fa e0       	ldi	r31, 0x0A	; 10
    66be:	cf 1a       	sub	r12, r31
    66c0:	d1 08       	sbc	r13, r1
    66c2:	f7 cf       	rjmp	.-18     	; 0x66b2 <vfprintf+0x3cc>
    66c4:	b7 01       	movw	r22, r14
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	0f d5       	rcall	.+2590   	; 0x70e8 <fputc>
    66ca:	b7 01       	movw	r22, r14
    66cc:	c6 01       	movw	r24, r12
    66ce:	c0 96       	adiw	r24, 0x30	; 48
    66d0:	0b d5       	rcall	.+2582   	; 0x70e8 <fputc>
    66d2:	49 c1       	rjmp	.+658    	; 0x6966 <vfprintf+0x680>
    66d4:	83 36       	cpi	r24, 0x63	; 99
    66d6:	31 f0       	breq	.+12     	; 0x66e4 <vfprintf+0x3fe>
    66d8:	83 37       	cpi	r24, 0x73	; 115
    66da:	79 f0       	breq	.+30     	; 0x66fa <vfprintf+0x414>
    66dc:	83 35       	cpi	r24, 0x53	; 83
    66de:	09 f0       	breq	.+2      	; 0x66e2 <vfprintf+0x3fc>
    66e0:	52 c0       	rjmp	.+164    	; 0x6786 <vfprintf+0x4a0>
    66e2:	1f c0       	rjmp	.+62     	; 0x6722 <vfprintf+0x43c>
    66e4:	56 01       	movw	r10, r12
    66e6:	32 e0       	ldi	r19, 0x02	; 2
    66e8:	a3 0e       	add	r10, r19
    66ea:	b1 1c       	adc	r11, r1
    66ec:	f6 01       	movw	r30, r12
    66ee:	80 81       	ld	r24, Z
    66f0:	89 83       	std	Y+1, r24	; 0x01
    66f2:	01 e0       	ldi	r16, 0x01	; 1
    66f4:	10 e0       	ldi	r17, 0x00	; 0
    66f6:	63 01       	movw	r12, r6
    66f8:	11 c0       	rjmp	.+34     	; 0x671c <vfprintf+0x436>
    66fa:	56 01       	movw	r10, r12
    66fc:	f2 e0       	ldi	r31, 0x02	; 2
    66fe:	af 0e       	add	r10, r31
    6700:	b1 1c       	adc	r11, r1
    6702:	f6 01       	movw	r30, r12
    6704:	c0 80       	ld	r12, Z
    6706:	d1 80       	ldd	r13, Z+1	; 0x01
    6708:	96 fe       	sbrs	r9, 6
    670a:	03 c0       	rjmp	.+6      	; 0x6712 <vfprintf+0x42c>
    670c:	61 2f       	mov	r22, r17
    670e:	70 e0       	ldi	r23, 0x00	; 0
    6710:	02 c0       	rjmp	.+4      	; 0x6716 <vfprintf+0x430>
    6712:	6f ef       	ldi	r22, 0xFF	; 255
    6714:	7f ef       	ldi	r23, 0xFF	; 255
    6716:	c6 01       	movw	r24, r12
    6718:	dc d4       	rcall	.+2488   	; 0x70d2 <strnlen>
    671a:	8c 01       	movw	r16, r24
    671c:	f9 2d       	mov	r31, r9
    671e:	ff 77       	andi	r31, 0x7F	; 127
    6720:	13 c0       	rjmp	.+38     	; 0x6748 <vfprintf+0x462>
    6722:	56 01       	movw	r10, r12
    6724:	22 e0       	ldi	r18, 0x02	; 2
    6726:	a2 0e       	add	r10, r18
    6728:	b1 1c       	adc	r11, r1
    672a:	f6 01       	movw	r30, r12
    672c:	c0 80       	ld	r12, Z
    672e:	d1 80       	ldd	r13, Z+1	; 0x01
    6730:	96 fe       	sbrs	r9, 6
    6732:	03 c0       	rjmp	.+6      	; 0x673a <vfprintf+0x454>
    6734:	61 2f       	mov	r22, r17
    6736:	70 e0       	ldi	r23, 0x00	; 0
    6738:	02 c0       	rjmp	.+4      	; 0x673e <vfprintf+0x458>
    673a:	6f ef       	ldi	r22, 0xFF	; 255
    673c:	7f ef       	ldi	r23, 0xFF	; 255
    673e:	c6 01       	movw	r24, r12
    6740:	5e d4       	rcall	.+2236   	; 0x6ffe <strnlen_P>
    6742:	8c 01       	movw	r16, r24
    6744:	f9 2d       	mov	r31, r9
    6746:	f0 68       	ori	r31, 0x80	; 128
    6748:	9f 2e       	mov	r9, r31
    674a:	f3 fd       	sbrc	r31, 3
    674c:	18 c0       	rjmp	.+48     	; 0x677e <vfprintf+0x498>
    674e:	85 2d       	mov	r24, r5
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	08 17       	cp	r16, r24
    6754:	19 07       	cpc	r17, r25
    6756:	98 f4       	brcc	.+38     	; 0x677e <vfprintf+0x498>
    6758:	b7 01       	movw	r22, r14
    675a:	80 e2       	ldi	r24, 0x20	; 32
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	c4 d4       	rcall	.+2440   	; 0x70e8 <fputc>
    6760:	5a 94       	dec	r5
    6762:	f5 cf       	rjmp	.-22     	; 0x674e <vfprintf+0x468>
    6764:	f6 01       	movw	r30, r12
    6766:	97 fc       	sbrc	r9, 7
    6768:	85 91       	lpm	r24, Z+
    676a:	97 fe       	sbrs	r9, 7
    676c:	81 91       	ld	r24, Z+
    676e:	6f 01       	movw	r12, r30
    6770:	b7 01       	movw	r22, r14
    6772:	90 e0       	ldi	r25, 0x00	; 0
    6774:	b9 d4       	rcall	.+2418   	; 0x70e8 <fputc>
    6776:	51 10       	cpse	r5, r1
    6778:	5a 94       	dec	r5
    677a:	01 50       	subi	r16, 0x01	; 1
    677c:	11 09       	sbc	r17, r1
    677e:	01 15       	cp	r16, r1
    6780:	11 05       	cpc	r17, r1
    6782:	81 f7       	brne	.-32     	; 0x6764 <vfprintf+0x47e>
    6784:	f0 c0       	rjmp	.+480    	; 0x6966 <vfprintf+0x680>
    6786:	84 36       	cpi	r24, 0x64	; 100
    6788:	11 f0       	breq	.+4      	; 0x678e <vfprintf+0x4a8>
    678a:	89 36       	cpi	r24, 0x69	; 105
    678c:	59 f5       	brne	.+86     	; 0x67e4 <vfprintf+0x4fe>
    678e:	56 01       	movw	r10, r12
    6790:	97 fe       	sbrs	r9, 7
    6792:	09 c0       	rjmp	.+18     	; 0x67a6 <vfprintf+0x4c0>
    6794:	24 e0       	ldi	r18, 0x04	; 4
    6796:	a2 0e       	add	r10, r18
    6798:	b1 1c       	adc	r11, r1
    679a:	f6 01       	movw	r30, r12
    679c:	60 81       	ld	r22, Z
    679e:	71 81       	ldd	r23, Z+1	; 0x01
    67a0:	82 81       	ldd	r24, Z+2	; 0x02
    67a2:	93 81       	ldd	r25, Z+3	; 0x03
    67a4:	0a c0       	rjmp	.+20     	; 0x67ba <vfprintf+0x4d4>
    67a6:	f2 e0       	ldi	r31, 0x02	; 2
    67a8:	af 0e       	add	r10, r31
    67aa:	b1 1c       	adc	r11, r1
    67ac:	f6 01       	movw	r30, r12
    67ae:	60 81       	ld	r22, Z
    67b0:	71 81       	ldd	r23, Z+1	; 0x01
    67b2:	07 2e       	mov	r0, r23
    67b4:	00 0c       	add	r0, r0
    67b6:	88 0b       	sbc	r24, r24
    67b8:	99 0b       	sbc	r25, r25
    67ba:	f9 2d       	mov	r31, r9
    67bc:	ff 76       	andi	r31, 0x6F	; 111
    67be:	9f 2e       	mov	r9, r31
    67c0:	97 ff       	sbrs	r25, 7
    67c2:	09 c0       	rjmp	.+18     	; 0x67d6 <vfprintf+0x4f0>
    67c4:	90 95       	com	r25
    67c6:	80 95       	com	r24
    67c8:	70 95       	com	r23
    67ca:	61 95       	neg	r22
    67cc:	7f 4f       	sbci	r23, 0xFF	; 255
    67ce:	8f 4f       	sbci	r24, 0xFF	; 255
    67d0:	9f 4f       	sbci	r25, 0xFF	; 255
    67d2:	f0 68       	ori	r31, 0x80	; 128
    67d4:	9f 2e       	mov	r9, r31
    67d6:	2a e0       	ldi	r18, 0x0A	; 10
    67d8:	30 e0       	ldi	r19, 0x00	; 0
    67da:	a3 01       	movw	r20, r6
    67dc:	fb d4       	rcall	.+2550   	; 0x71d4 <__ultoa_invert>
    67de:	c8 2e       	mov	r12, r24
    67e0:	c6 18       	sub	r12, r6
    67e2:	3e c0       	rjmp	.+124    	; 0x6860 <vfprintf+0x57a>
    67e4:	09 2d       	mov	r16, r9
    67e6:	85 37       	cpi	r24, 0x75	; 117
    67e8:	21 f4       	brne	.+8      	; 0x67f2 <vfprintf+0x50c>
    67ea:	0f 7e       	andi	r16, 0xEF	; 239
    67ec:	2a e0       	ldi	r18, 0x0A	; 10
    67ee:	30 e0       	ldi	r19, 0x00	; 0
    67f0:	1d c0       	rjmp	.+58     	; 0x682c <vfprintf+0x546>
    67f2:	09 7f       	andi	r16, 0xF9	; 249
    67f4:	8f 36       	cpi	r24, 0x6F	; 111
    67f6:	91 f0       	breq	.+36     	; 0x681c <vfprintf+0x536>
    67f8:	18 f4       	brcc	.+6      	; 0x6800 <vfprintf+0x51a>
    67fa:	88 35       	cpi	r24, 0x58	; 88
    67fc:	59 f0       	breq	.+22     	; 0x6814 <vfprintf+0x52e>
    67fe:	bc c0       	rjmp	.+376    	; 0x6978 <vfprintf+0x692>
    6800:	80 37       	cpi	r24, 0x70	; 112
    6802:	19 f0       	breq	.+6      	; 0x680a <vfprintf+0x524>
    6804:	88 37       	cpi	r24, 0x78	; 120
    6806:	11 f0       	breq	.+4      	; 0x680c <vfprintf+0x526>
    6808:	b7 c0       	rjmp	.+366    	; 0x6978 <vfprintf+0x692>
    680a:	00 61       	ori	r16, 0x10	; 16
    680c:	04 ff       	sbrs	r16, 4
    680e:	09 c0       	rjmp	.+18     	; 0x6822 <vfprintf+0x53c>
    6810:	04 60       	ori	r16, 0x04	; 4
    6812:	07 c0       	rjmp	.+14     	; 0x6822 <vfprintf+0x53c>
    6814:	94 fe       	sbrs	r9, 4
    6816:	08 c0       	rjmp	.+16     	; 0x6828 <vfprintf+0x542>
    6818:	06 60       	ori	r16, 0x06	; 6
    681a:	06 c0       	rjmp	.+12     	; 0x6828 <vfprintf+0x542>
    681c:	28 e0       	ldi	r18, 0x08	; 8
    681e:	30 e0       	ldi	r19, 0x00	; 0
    6820:	05 c0       	rjmp	.+10     	; 0x682c <vfprintf+0x546>
    6822:	20 e1       	ldi	r18, 0x10	; 16
    6824:	30 e0       	ldi	r19, 0x00	; 0
    6826:	02 c0       	rjmp	.+4      	; 0x682c <vfprintf+0x546>
    6828:	20 e1       	ldi	r18, 0x10	; 16
    682a:	32 e0       	ldi	r19, 0x02	; 2
    682c:	56 01       	movw	r10, r12
    682e:	07 ff       	sbrs	r16, 7
    6830:	09 c0       	rjmp	.+18     	; 0x6844 <vfprintf+0x55e>
    6832:	84 e0       	ldi	r24, 0x04	; 4
    6834:	a8 0e       	add	r10, r24
    6836:	b1 1c       	adc	r11, r1
    6838:	f6 01       	movw	r30, r12
    683a:	60 81       	ld	r22, Z
    683c:	71 81       	ldd	r23, Z+1	; 0x01
    683e:	82 81       	ldd	r24, Z+2	; 0x02
    6840:	93 81       	ldd	r25, Z+3	; 0x03
    6842:	08 c0       	rjmp	.+16     	; 0x6854 <vfprintf+0x56e>
    6844:	f2 e0       	ldi	r31, 0x02	; 2
    6846:	af 0e       	add	r10, r31
    6848:	b1 1c       	adc	r11, r1
    684a:	f6 01       	movw	r30, r12
    684c:	60 81       	ld	r22, Z
    684e:	71 81       	ldd	r23, Z+1	; 0x01
    6850:	80 e0       	ldi	r24, 0x00	; 0
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	a3 01       	movw	r20, r6
    6856:	be d4       	rcall	.+2428   	; 0x71d4 <__ultoa_invert>
    6858:	c8 2e       	mov	r12, r24
    685a:	c6 18       	sub	r12, r6
    685c:	0f 77       	andi	r16, 0x7F	; 127
    685e:	90 2e       	mov	r9, r16
    6860:	96 fe       	sbrs	r9, 6
    6862:	0b c0       	rjmp	.+22     	; 0x687a <vfprintf+0x594>
    6864:	09 2d       	mov	r16, r9
    6866:	0e 7f       	andi	r16, 0xFE	; 254
    6868:	c1 16       	cp	r12, r17
    686a:	50 f4       	brcc	.+20     	; 0x6880 <vfprintf+0x59a>
    686c:	94 fe       	sbrs	r9, 4
    686e:	0a c0       	rjmp	.+20     	; 0x6884 <vfprintf+0x59e>
    6870:	92 fc       	sbrc	r9, 2
    6872:	08 c0       	rjmp	.+16     	; 0x6884 <vfprintf+0x59e>
    6874:	09 2d       	mov	r16, r9
    6876:	0e 7e       	andi	r16, 0xEE	; 238
    6878:	05 c0       	rjmp	.+10     	; 0x6884 <vfprintf+0x59e>
    687a:	dc 2c       	mov	r13, r12
    687c:	09 2d       	mov	r16, r9
    687e:	03 c0       	rjmp	.+6      	; 0x6886 <vfprintf+0x5a0>
    6880:	dc 2c       	mov	r13, r12
    6882:	01 c0       	rjmp	.+2      	; 0x6886 <vfprintf+0x5a0>
    6884:	d1 2e       	mov	r13, r17
    6886:	04 ff       	sbrs	r16, 4
    6888:	0d c0       	rjmp	.+26     	; 0x68a4 <vfprintf+0x5be>
    688a:	fe 01       	movw	r30, r28
    688c:	ec 0d       	add	r30, r12
    688e:	f1 1d       	adc	r31, r1
    6890:	80 81       	ld	r24, Z
    6892:	80 33       	cpi	r24, 0x30	; 48
    6894:	11 f4       	brne	.+4      	; 0x689a <vfprintf+0x5b4>
    6896:	09 7e       	andi	r16, 0xE9	; 233
    6898:	09 c0       	rjmp	.+18     	; 0x68ac <vfprintf+0x5c6>
    689a:	02 ff       	sbrs	r16, 2
    689c:	06 c0       	rjmp	.+12     	; 0x68aa <vfprintf+0x5c4>
    689e:	d3 94       	inc	r13
    68a0:	d3 94       	inc	r13
    68a2:	04 c0       	rjmp	.+8      	; 0x68ac <vfprintf+0x5c6>
    68a4:	80 2f       	mov	r24, r16
    68a6:	86 78       	andi	r24, 0x86	; 134
    68a8:	09 f0       	breq	.+2      	; 0x68ac <vfprintf+0x5c6>
    68aa:	d3 94       	inc	r13
    68ac:	03 fd       	sbrc	r16, 3
    68ae:	10 c0       	rjmp	.+32     	; 0x68d0 <vfprintf+0x5ea>
    68b0:	00 ff       	sbrs	r16, 0
    68b2:	06 c0       	rjmp	.+12     	; 0x68c0 <vfprintf+0x5da>
    68b4:	1c 2d       	mov	r17, r12
    68b6:	d5 14       	cp	r13, r5
    68b8:	78 f4       	brcc	.+30     	; 0x68d8 <vfprintf+0x5f2>
    68ba:	15 0d       	add	r17, r5
    68bc:	1d 19       	sub	r17, r13
    68be:	0c c0       	rjmp	.+24     	; 0x68d8 <vfprintf+0x5f2>
    68c0:	d5 14       	cp	r13, r5
    68c2:	50 f4       	brcc	.+20     	; 0x68d8 <vfprintf+0x5f2>
    68c4:	b7 01       	movw	r22, r14
    68c6:	80 e2       	ldi	r24, 0x20	; 32
    68c8:	90 e0       	ldi	r25, 0x00	; 0
    68ca:	0e d4       	rcall	.+2076   	; 0x70e8 <fputc>
    68cc:	d3 94       	inc	r13
    68ce:	f8 cf       	rjmp	.-16     	; 0x68c0 <vfprintf+0x5da>
    68d0:	d5 14       	cp	r13, r5
    68d2:	10 f4       	brcc	.+4      	; 0x68d8 <vfprintf+0x5f2>
    68d4:	5d 18       	sub	r5, r13
    68d6:	01 c0       	rjmp	.+2      	; 0x68da <vfprintf+0x5f4>
    68d8:	51 2c       	mov	r5, r1
    68da:	04 ff       	sbrs	r16, 4
    68dc:	0f c0       	rjmp	.+30     	; 0x68fc <vfprintf+0x616>
    68de:	b7 01       	movw	r22, r14
    68e0:	80 e3       	ldi	r24, 0x30	; 48
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	01 d4       	rcall	.+2050   	; 0x70e8 <fputc>
    68e6:	02 ff       	sbrs	r16, 2
    68e8:	16 c0       	rjmp	.+44     	; 0x6916 <vfprintf+0x630>
    68ea:	01 fd       	sbrc	r16, 1
    68ec:	03 c0       	rjmp	.+6      	; 0x68f4 <vfprintf+0x60e>
    68ee:	88 e7       	ldi	r24, 0x78	; 120
    68f0:	90 e0       	ldi	r25, 0x00	; 0
    68f2:	02 c0       	rjmp	.+4      	; 0x68f8 <vfprintf+0x612>
    68f4:	88 e5       	ldi	r24, 0x58	; 88
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	b7 01       	movw	r22, r14
    68fa:	0c c0       	rjmp	.+24     	; 0x6914 <vfprintf+0x62e>
    68fc:	80 2f       	mov	r24, r16
    68fe:	86 78       	andi	r24, 0x86	; 134
    6900:	51 f0       	breq	.+20     	; 0x6916 <vfprintf+0x630>
    6902:	01 ff       	sbrs	r16, 1
    6904:	02 c0       	rjmp	.+4      	; 0x690a <vfprintf+0x624>
    6906:	8b e2       	ldi	r24, 0x2B	; 43
    6908:	01 c0       	rjmp	.+2      	; 0x690c <vfprintf+0x626>
    690a:	80 e2       	ldi	r24, 0x20	; 32
    690c:	07 fd       	sbrc	r16, 7
    690e:	8d e2       	ldi	r24, 0x2D	; 45
    6910:	b7 01       	movw	r22, r14
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	e9 d3       	rcall	.+2002   	; 0x70e8 <fputc>
    6916:	c1 16       	cp	r12, r17
    6918:	30 f4       	brcc	.+12     	; 0x6926 <vfprintf+0x640>
    691a:	b7 01       	movw	r22, r14
    691c:	80 e3       	ldi	r24, 0x30	; 48
    691e:	90 e0       	ldi	r25, 0x00	; 0
    6920:	e3 d3       	rcall	.+1990   	; 0x70e8 <fputc>
    6922:	11 50       	subi	r17, 0x01	; 1
    6924:	f8 cf       	rjmp	.-16     	; 0x6916 <vfprintf+0x630>
    6926:	ca 94       	dec	r12
    6928:	f3 01       	movw	r30, r6
    692a:	ec 0d       	add	r30, r12
    692c:	f1 1d       	adc	r31, r1
    692e:	80 81       	ld	r24, Z
    6930:	b7 01       	movw	r22, r14
    6932:	90 e0       	ldi	r25, 0x00	; 0
    6934:	d9 d3       	rcall	.+1970   	; 0x70e8 <fputc>
    6936:	c1 10       	cpse	r12, r1
    6938:	f6 cf       	rjmp	.-20     	; 0x6926 <vfprintf+0x640>
    693a:	15 c0       	rjmp	.+42     	; 0x6966 <vfprintf+0x680>
    693c:	f4 e0       	ldi	r31, 0x04	; 4
    693e:	f5 15       	cp	r31, r5
    6940:	50 f5       	brcc	.+84     	; 0x6996 <vfprintf+0x6b0>
    6942:	84 e0       	ldi	r24, 0x04	; 4
    6944:	58 1a       	sub	r5, r24
    6946:	93 fe       	sbrs	r9, 3
    6948:	1e c0       	rjmp	.+60     	; 0x6986 <vfprintf+0x6a0>
    694a:	01 11       	cpse	r16, r1
    694c:	25 c0       	rjmp	.+74     	; 0x6998 <vfprintf+0x6b2>
    694e:	2c 85       	ldd	r18, Y+12	; 0x0c
    6950:	23 ff       	sbrs	r18, 3
    6952:	27 c0       	rjmp	.+78     	; 0x69a2 <vfprintf+0x6bc>
    6954:	0a e9       	ldi	r16, 0x9A	; 154
    6956:	11 e0       	ldi	r17, 0x01	; 1
    6958:	39 2d       	mov	r19, r9
    695a:	30 71       	andi	r19, 0x10	; 16
    695c:	93 2e       	mov	r9, r19
    695e:	f8 01       	movw	r30, r16
    6960:	84 91       	lpm	r24, Z
    6962:	81 11       	cpse	r24, r1
    6964:	21 c0       	rjmp	.+66     	; 0x69a8 <vfprintf+0x6c2>
    6966:	55 20       	and	r5, r5
    6968:	09 f4       	brne	.+2      	; 0x696c <vfprintf+0x686>
    696a:	fc cc       	rjmp	.-1544   	; 0x6364 <vfprintf+0x7e>
    696c:	b7 01       	movw	r22, r14
    696e:	80 e2       	ldi	r24, 0x20	; 32
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	ba d3       	rcall	.+1908   	; 0x70e8 <fputc>
    6974:	5a 94       	dec	r5
    6976:	f7 cf       	rjmp	.-18     	; 0x6966 <vfprintf+0x680>
    6978:	f7 01       	movw	r30, r14
    697a:	86 81       	ldd	r24, Z+6	; 0x06
    697c:	97 81       	ldd	r25, Z+7	; 0x07
    697e:	23 c0       	rjmp	.+70     	; 0x69c6 <vfprintf+0x6e0>
    6980:	8f ef       	ldi	r24, 0xFF	; 255
    6982:	9f ef       	ldi	r25, 0xFF	; 255
    6984:	20 c0       	rjmp	.+64     	; 0x69c6 <vfprintf+0x6e0>
    6986:	b7 01       	movw	r22, r14
    6988:	80 e2       	ldi	r24, 0x20	; 32
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	ad d3       	rcall	.+1882   	; 0x70e8 <fputc>
    698e:	5a 94       	dec	r5
    6990:	51 10       	cpse	r5, r1
    6992:	f9 cf       	rjmp	.-14     	; 0x6986 <vfprintf+0x6a0>
    6994:	da cf       	rjmp	.-76     	; 0x694a <vfprintf+0x664>
    6996:	51 2c       	mov	r5, r1
    6998:	b7 01       	movw	r22, r14
    699a:	80 2f       	mov	r24, r16
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	a4 d3       	rcall	.+1864   	; 0x70e8 <fputc>
    69a0:	d6 cf       	rjmp	.-84     	; 0x694e <vfprintf+0x668>
    69a2:	0e e9       	ldi	r16, 0x9E	; 158
    69a4:	11 e0       	ldi	r17, 0x01	; 1
    69a6:	d8 cf       	rjmp	.-80     	; 0x6958 <vfprintf+0x672>
    69a8:	91 10       	cpse	r9, r1
    69aa:	80 52       	subi	r24, 0x20	; 32
    69ac:	b7 01       	movw	r22, r14
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	9b d3       	rcall	.+1846   	; 0x70e8 <fputc>
    69b2:	0f 5f       	subi	r16, 0xFF	; 255
    69b4:	1f 4f       	sbci	r17, 0xFF	; 255
    69b6:	d3 cf       	rjmp	.-90     	; 0x695e <vfprintf+0x678>
    69b8:	23 e0       	ldi	r18, 0x03	; 3
    69ba:	25 15       	cp	r18, r5
    69bc:	10 f4       	brcc	.+4      	; 0x69c2 <vfprintf+0x6dc>
    69be:	83 e0       	ldi	r24, 0x03	; 3
    69c0:	c1 cf       	rjmp	.-126    	; 0x6944 <vfprintf+0x65e>
    69c2:	51 2c       	mov	r5, r1
    69c4:	c4 cf       	rjmp	.-120    	; 0x694e <vfprintf+0x668>
    69c6:	60 96       	adiw	r28, 0x10	; 16
    69c8:	0f b6       	in	r0, 0x3f	; 63
    69ca:	f8 94       	cli
    69cc:	de bf       	out	0x3e, r29	; 62
    69ce:	0f be       	out	0x3f, r0	; 63
    69d0:	cd bf       	out	0x3d, r28	; 61
    69d2:	df 91       	pop	r29
    69d4:	cf 91       	pop	r28
    69d6:	1f 91       	pop	r17
    69d8:	0f 91       	pop	r16
    69da:	ff 90       	pop	r15
    69dc:	ef 90       	pop	r14
    69de:	df 90       	pop	r13
    69e0:	cf 90       	pop	r12
    69e2:	bf 90       	pop	r11
    69e4:	af 90       	pop	r10
    69e6:	9f 90       	pop	r9
    69e8:	8f 90       	pop	r8
    69ea:	7f 90       	pop	r7
    69ec:	6f 90       	pop	r6
    69ee:	5f 90       	pop	r5
    69f0:	4f 90       	pop	r4
    69f2:	3f 90       	pop	r3
    69f4:	2f 90       	pop	r2
    69f6:	08 95       	ret

000069f8 <__divsf3>:
    69f8:	12 d0       	rcall	.+36     	; 0x6a1e <__divsf3x>
    69fa:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__fp_round>
    69fe:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fp_pscB>
    6a02:	58 f0       	brcs	.+22     	; 0x6a1a <__divsf3+0x22>
    6a04:	0e 94 43 24 	call	0x4886	; 0x4886 <__fp_pscA>
    6a08:	40 f0       	brcs	.+16     	; 0x6a1a <__divsf3+0x22>
    6a0a:	29 f4       	brne	.+10     	; 0x6a16 <__divsf3+0x1e>
    6a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    6a0e:	29 f0       	breq	.+10     	; 0x6a1a <__divsf3+0x22>
    6a10:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__fp_inf>
    6a14:	51 11       	cpse	r21, r1
    6a16:	0c 94 39 23 	jmp	0x4672	; 0x4672 <__fp_szero>
    6a1a:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__fp_nan>

00006a1e <__divsf3x>:
    6a1e:	0e 94 16 23 	call	0x462c	; 0x462c <__fp_split3>
    6a22:	68 f3       	brcs	.-38     	; 0x69fe <__divsf3+0x6>

00006a24 <__divsf3_pse>:
    6a24:	99 23       	and	r25, r25
    6a26:	b1 f3       	breq	.-20     	; 0x6a14 <__divsf3+0x1c>
    6a28:	55 23       	and	r21, r21
    6a2a:	91 f3       	breq	.-28     	; 0x6a10 <__divsf3+0x18>
    6a2c:	95 1b       	sub	r25, r21
    6a2e:	55 0b       	sbc	r21, r21
    6a30:	bb 27       	eor	r27, r27
    6a32:	aa 27       	eor	r26, r26
    6a34:	62 17       	cp	r22, r18
    6a36:	73 07       	cpc	r23, r19
    6a38:	84 07       	cpc	r24, r20
    6a3a:	38 f0       	brcs	.+14     	; 0x6a4a <__divsf3_pse+0x26>
    6a3c:	9f 5f       	subi	r25, 0xFF	; 255
    6a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a40:	22 0f       	add	r18, r18
    6a42:	33 1f       	adc	r19, r19
    6a44:	44 1f       	adc	r20, r20
    6a46:	aa 1f       	adc	r26, r26
    6a48:	a9 f3       	breq	.-22     	; 0x6a34 <__divsf3_pse+0x10>
    6a4a:	35 d0       	rcall	.+106    	; 0x6ab6 <__divsf3_pse+0x92>
    6a4c:	0e 2e       	mov	r0, r30
    6a4e:	3a f0       	brmi	.+14     	; 0x6a5e <__divsf3_pse+0x3a>
    6a50:	e0 e8       	ldi	r30, 0x80	; 128
    6a52:	32 d0       	rcall	.+100    	; 0x6ab8 <__divsf3_pse+0x94>
    6a54:	91 50       	subi	r25, 0x01	; 1
    6a56:	50 40       	sbci	r21, 0x00	; 0
    6a58:	e6 95       	lsr	r30
    6a5a:	00 1c       	adc	r0, r0
    6a5c:	ca f7       	brpl	.-14     	; 0x6a50 <__divsf3_pse+0x2c>
    6a5e:	2b d0       	rcall	.+86     	; 0x6ab6 <__divsf3_pse+0x92>
    6a60:	fe 2f       	mov	r31, r30
    6a62:	29 d0       	rcall	.+82     	; 0x6ab6 <__divsf3_pse+0x92>
    6a64:	66 0f       	add	r22, r22
    6a66:	77 1f       	adc	r23, r23
    6a68:	88 1f       	adc	r24, r24
    6a6a:	bb 1f       	adc	r27, r27
    6a6c:	26 17       	cp	r18, r22
    6a6e:	37 07       	cpc	r19, r23
    6a70:	48 07       	cpc	r20, r24
    6a72:	ab 07       	cpc	r26, r27
    6a74:	b0 e8       	ldi	r27, 0x80	; 128
    6a76:	09 f0       	breq	.+2      	; 0x6a7a <__divsf3_pse+0x56>
    6a78:	bb 0b       	sbc	r27, r27
    6a7a:	80 2d       	mov	r24, r0
    6a7c:	bf 01       	movw	r22, r30
    6a7e:	ff 27       	eor	r31, r31
    6a80:	93 58       	subi	r25, 0x83	; 131
    6a82:	5f 4f       	sbci	r21, 0xFF	; 255
    6a84:	3a f0       	brmi	.+14     	; 0x6a94 <__divsf3_pse+0x70>
    6a86:	9e 3f       	cpi	r25, 0xFE	; 254
    6a88:	51 05       	cpc	r21, r1
    6a8a:	78 f0       	brcs	.+30     	; 0x6aaa <__divsf3_pse+0x86>
    6a8c:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__fp_inf>
    6a90:	0c 94 39 23 	jmp	0x4672	; 0x4672 <__fp_szero>
    6a94:	5f 3f       	cpi	r21, 0xFF	; 255
    6a96:	e4 f3       	brlt	.-8      	; 0x6a90 <__divsf3_pse+0x6c>
    6a98:	98 3e       	cpi	r25, 0xE8	; 232
    6a9a:	d4 f3       	brlt	.-12     	; 0x6a90 <__divsf3_pse+0x6c>
    6a9c:	86 95       	lsr	r24
    6a9e:	77 95       	ror	r23
    6aa0:	67 95       	ror	r22
    6aa2:	b7 95       	ror	r27
    6aa4:	f7 95       	ror	r31
    6aa6:	9f 5f       	subi	r25, 0xFF	; 255
    6aa8:	c9 f7       	brne	.-14     	; 0x6a9c <__divsf3_pse+0x78>
    6aaa:	88 0f       	add	r24, r24
    6aac:	91 1d       	adc	r25, r1
    6aae:	96 95       	lsr	r25
    6ab0:	87 95       	ror	r24
    6ab2:	97 f9       	bld	r25, 7
    6ab4:	08 95       	ret
    6ab6:	e1 e0       	ldi	r30, 0x01	; 1
    6ab8:	66 0f       	add	r22, r22
    6aba:	77 1f       	adc	r23, r23
    6abc:	88 1f       	adc	r24, r24
    6abe:	bb 1f       	adc	r27, r27
    6ac0:	62 17       	cp	r22, r18
    6ac2:	73 07       	cpc	r23, r19
    6ac4:	84 07       	cpc	r24, r20
    6ac6:	ba 07       	cpc	r27, r26
    6ac8:	20 f0       	brcs	.+8      	; 0x6ad2 <__divsf3_pse+0xae>
    6aca:	62 1b       	sub	r22, r18
    6acc:	73 0b       	sbc	r23, r19
    6ace:	84 0b       	sbc	r24, r20
    6ad0:	ba 0b       	sbc	r27, r26
    6ad2:	ee 1f       	adc	r30, r30
    6ad4:	88 f7       	brcc	.-30     	; 0x6ab8 <__divsf3_pse+0x94>
    6ad6:	e0 95       	com	r30
    6ad8:	08 95       	ret

00006ada <__floatunsisf>:
    6ada:	e8 94       	clt
    6adc:	09 c0       	rjmp	.+18     	; 0x6af0 <__floatsisf+0x12>

00006ade <__floatsisf>:
    6ade:	97 fb       	bst	r25, 7
    6ae0:	3e f4       	brtc	.+14     	; 0x6af0 <__floatsisf+0x12>
    6ae2:	90 95       	com	r25
    6ae4:	80 95       	com	r24
    6ae6:	70 95       	com	r23
    6ae8:	61 95       	neg	r22
    6aea:	7f 4f       	sbci	r23, 0xFF	; 255
    6aec:	8f 4f       	sbci	r24, 0xFF	; 255
    6aee:	9f 4f       	sbci	r25, 0xFF	; 255
    6af0:	99 23       	and	r25, r25
    6af2:	a9 f0       	breq	.+42     	; 0x6b1e <__floatsisf+0x40>
    6af4:	f9 2f       	mov	r31, r25
    6af6:	96 e9       	ldi	r25, 0x96	; 150
    6af8:	bb 27       	eor	r27, r27
    6afa:	93 95       	inc	r25
    6afc:	f6 95       	lsr	r31
    6afe:	87 95       	ror	r24
    6b00:	77 95       	ror	r23
    6b02:	67 95       	ror	r22
    6b04:	b7 95       	ror	r27
    6b06:	f1 11       	cpse	r31, r1
    6b08:	f8 cf       	rjmp	.-16     	; 0x6afa <__floatsisf+0x1c>
    6b0a:	fa f4       	brpl	.+62     	; 0x6b4a <__floatsisf+0x6c>
    6b0c:	bb 0f       	add	r27, r27
    6b0e:	11 f4       	brne	.+4      	; 0x6b14 <__floatsisf+0x36>
    6b10:	60 ff       	sbrs	r22, 0
    6b12:	1b c0       	rjmp	.+54     	; 0x6b4a <__floatsisf+0x6c>
    6b14:	6f 5f       	subi	r22, 0xFF	; 255
    6b16:	7f 4f       	sbci	r23, 0xFF	; 255
    6b18:	8f 4f       	sbci	r24, 0xFF	; 255
    6b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b1c:	16 c0       	rjmp	.+44     	; 0x6b4a <__floatsisf+0x6c>
    6b1e:	88 23       	and	r24, r24
    6b20:	11 f0       	breq	.+4      	; 0x6b26 <__floatsisf+0x48>
    6b22:	96 e9       	ldi	r25, 0x96	; 150
    6b24:	11 c0       	rjmp	.+34     	; 0x6b48 <__floatsisf+0x6a>
    6b26:	77 23       	and	r23, r23
    6b28:	21 f0       	breq	.+8      	; 0x6b32 <__floatsisf+0x54>
    6b2a:	9e e8       	ldi	r25, 0x8E	; 142
    6b2c:	87 2f       	mov	r24, r23
    6b2e:	76 2f       	mov	r23, r22
    6b30:	05 c0       	rjmp	.+10     	; 0x6b3c <__floatsisf+0x5e>
    6b32:	66 23       	and	r22, r22
    6b34:	71 f0       	breq	.+28     	; 0x6b52 <__floatsisf+0x74>
    6b36:	96 e8       	ldi	r25, 0x86	; 134
    6b38:	86 2f       	mov	r24, r22
    6b3a:	70 e0       	ldi	r23, 0x00	; 0
    6b3c:	60 e0       	ldi	r22, 0x00	; 0
    6b3e:	2a f0       	brmi	.+10     	; 0x6b4a <__floatsisf+0x6c>
    6b40:	9a 95       	dec	r25
    6b42:	66 0f       	add	r22, r22
    6b44:	77 1f       	adc	r23, r23
    6b46:	88 1f       	adc	r24, r24
    6b48:	da f7       	brpl	.-10     	; 0x6b40 <__floatsisf+0x62>
    6b4a:	88 0f       	add	r24, r24
    6b4c:	96 95       	lsr	r25
    6b4e:	87 95       	ror	r24
    6b50:	97 f9       	bld	r25, 7
    6b52:	08 95       	ret

00006b54 <__gesf2>:
    6b54:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <__fp_cmp>
    6b58:	08 f4       	brcc	.+2      	; 0x6b5c <__gesf2+0x8>
    6b5a:	8f ef       	ldi	r24, 0xFF	; 255
    6b5c:	08 95       	ret

00006b5e <__udivmodsi4>:
    6b5e:	a1 e2       	ldi	r26, 0x21	; 33
    6b60:	1a 2e       	mov	r1, r26
    6b62:	aa 1b       	sub	r26, r26
    6b64:	bb 1b       	sub	r27, r27
    6b66:	fd 01       	movw	r30, r26
    6b68:	0d c0       	rjmp	.+26     	; 0x6b84 <__udivmodsi4_ep>

00006b6a <__udivmodsi4_loop>:
    6b6a:	aa 1f       	adc	r26, r26
    6b6c:	bb 1f       	adc	r27, r27
    6b6e:	ee 1f       	adc	r30, r30
    6b70:	ff 1f       	adc	r31, r31
    6b72:	a2 17       	cp	r26, r18
    6b74:	b3 07       	cpc	r27, r19
    6b76:	e4 07       	cpc	r30, r20
    6b78:	f5 07       	cpc	r31, r21
    6b7a:	20 f0       	brcs	.+8      	; 0x6b84 <__udivmodsi4_ep>
    6b7c:	a2 1b       	sub	r26, r18
    6b7e:	b3 0b       	sbc	r27, r19
    6b80:	e4 0b       	sbc	r30, r20
    6b82:	f5 0b       	sbc	r31, r21

00006b84 <__udivmodsi4_ep>:
    6b84:	66 1f       	adc	r22, r22
    6b86:	77 1f       	adc	r23, r23
    6b88:	88 1f       	adc	r24, r24
    6b8a:	99 1f       	adc	r25, r25
    6b8c:	1a 94       	dec	r1
    6b8e:	69 f7       	brne	.-38     	; 0x6b6a <__udivmodsi4_loop>
    6b90:	60 95       	com	r22
    6b92:	70 95       	com	r23
    6b94:	80 95       	com	r24
    6b96:	90 95       	com	r25
    6b98:	9b 01       	movw	r18, r22
    6b9a:	ac 01       	movw	r20, r24
    6b9c:	bd 01       	movw	r22, r26
    6b9e:	cf 01       	movw	r24, r30
    6ba0:	08 95       	ret

00006ba2 <__tablejump2__>:
    6ba2:	ee 0f       	add	r30, r30
    6ba4:	ff 1f       	adc	r31, r31
    6ba6:	88 1f       	adc	r24, r24
    6ba8:	8b bf       	out	0x3b, r24	; 59
    6baa:	07 90       	elpm	r0, Z+
    6bac:	f6 91       	elpm	r31, Z
    6bae:	e0 2d       	mov	r30, r0
    6bb0:	19 94       	eijmp

00006bb2 <__umulhisi3>:
    6bb2:	a2 9f       	mul	r26, r18
    6bb4:	b0 01       	movw	r22, r0
    6bb6:	b3 9f       	mul	r27, r19
    6bb8:	c0 01       	movw	r24, r0
    6bba:	a3 9f       	mul	r26, r19
    6bbc:	70 0d       	add	r23, r0
    6bbe:	81 1d       	adc	r24, r1
    6bc0:	11 24       	eor	r1, r1
    6bc2:	91 1d       	adc	r25, r1
    6bc4:	b2 9f       	mul	r27, r18
    6bc6:	70 0d       	add	r23, r0
    6bc8:	81 1d       	adc	r24, r1
    6bca:	11 24       	eor	r1, r1
    6bcc:	91 1d       	adc	r25, r1
    6bce:	08 95       	ret

00006bd0 <calloc>:
    6bd0:	0f 93       	push	r16
    6bd2:	1f 93       	push	r17
    6bd4:	cf 93       	push	r28
    6bd6:	df 93       	push	r29
    6bd8:	86 9f       	mul	r24, r22
    6bda:	80 01       	movw	r16, r0
    6bdc:	87 9f       	mul	r24, r23
    6bde:	10 0d       	add	r17, r0
    6be0:	96 9f       	mul	r25, r22
    6be2:	10 0d       	add	r17, r0
    6be4:	11 24       	eor	r1, r1
    6be6:	c8 01       	movw	r24, r16
    6be8:	0d d0       	rcall	.+26     	; 0x6c04 <malloc>
    6bea:	ec 01       	movw	r28, r24
    6bec:	00 97       	sbiw	r24, 0x00	; 0
    6bee:	21 f0       	breq	.+8      	; 0x6bf8 <calloc+0x28>
    6bf0:	a8 01       	movw	r20, r16
    6bf2:	60 e0       	ldi	r22, 0x00	; 0
    6bf4:	70 e0       	ldi	r23, 0x00	; 0
    6bf6:	17 d2       	rcall	.+1070   	; 0x7026 <memset>
    6bf8:	ce 01       	movw	r24, r28
    6bfa:	df 91       	pop	r29
    6bfc:	cf 91       	pop	r28
    6bfe:	1f 91       	pop	r17
    6c00:	0f 91       	pop	r16
    6c02:	08 95       	ret

00006c04 <malloc>:
    6c04:	0f 93       	push	r16
    6c06:	1f 93       	push	r17
    6c08:	cf 93       	push	r28
    6c0a:	df 93       	push	r29
    6c0c:	82 30       	cpi	r24, 0x02	; 2
    6c0e:	91 05       	cpc	r25, r1
    6c10:	10 f4       	brcc	.+4      	; 0x6c16 <malloc+0x12>
    6c12:	82 e0       	ldi	r24, 0x02	; 2
    6c14:	90 e0       	ldi	r25, 0x00	; 0
    6c16:	e0 91 e3 15 	lds	r30, 0x15E3	; 0x8015e3 <__flp>
    6c1a:	f0 91 e4 15 	lds	r31, 0x15E4	; 0x8015e4 <__flp+0x1>
    6c1e:	20 e0       	ldi	r18, 0x00	; 0
    6c20:	30 e0       	ldi	r19, 0x00	; 0
    6c22:	a0 e0       	ldi	r26, 0x00	; 0
    6c24:	b0 e0       	ldi	r27, 0x00	; 0
    6c26:	30 97       	sbiw	r30, 0x00	; 0
    6c28:	19 f1       	breq	.+70     	; 0x6c70 <malloc+0x6c>
    6c2a:	40 81       	ld	r20, Z
    6c2c:	51 81       	ldd	r21, Z+1	; 0x01
    6c2e:	02 81       	ldd	r16, Z+2	; 0x02
    6c30:	13 81       	ldd	r17, Z+3	; 0x03
    6c32:	48 17       	cp	r20, r24
    6c34:	59 07       	cpc	r21, r25
    6c36:	c8 f0       	brcs	.+50     	; 0x6c6a <malloc+0x66>
    6c38:	84 17       	cp	r24, r20
    6c3a:	95 07       	cpc	r25, r21
    6c3c:	69 f4       	brne	.+26     	; 0x6c58 <malloc+0x54>
    6c3e:	10 97       	sbiw	r26, 0x00	; 0
    6c40:	31 f0       	breq	.+12     	; 0x6c4e <malloc+0x4a>
    6c42:	12 96       	adiw	r26, 0x02	; 2
    6c44:	0c 93       	st	X, r16
    6c46:	12 97       	sbiw	r26, 0x02	; 2
    6c48:	13 96       	adiw	r26, 0x03	; 3
    6c4a:	1c 93       	st	X, r17
    6c4c:	27 c0       	rjmp	.+78     	; 0x6c9c <malloc+0x98>
    6c4e:	00 93 e3 15 	sts	0x15E3, r16	; 0x8015e3 <__flp>
    6c52:	10 93 e4 15 	sts	0x15E4, r17	; 0x8015e4 <__flp+0x1>
    6c56:	22 c0       	rjmp	.+68     	; 0x6c9c <malloc+0x98>
    6c58:	21 15       	cp	r18, r1
    6c5a:	31 05       	cpc	r19, r1
    6c5c:	19 f0       	breq	.+6      	; 0x6c64 <malloc+0x60>
    6c5e:	42 17       	cp	r20, r18
    6c60:	53 07       	cpc	r21, r19
    6c62:	18 f4       	brcc	.+6      	; 0x6c6a <malloc+0x66>
    6c64:	9a 01       	movw	r18, r20
    6c66:	bd 01       	movw	r22, r26
    6c68:	ef 01       	movw	r28, r30
    6c6a:	df 01       	movw	r26, r30
    6c6c:	f8 01       	movw	r30, r16
    6c6e:	db cf       	rjmp	.-74     	; 0x6c26 <malloc+0x22>
    6c70:	21 15       	cp	r18, r1
    6c72:	31 05       	cpc	r19, r1
    6c74:	f9 f0       	breq	.+62     	; 0x6cb4 <malloc+0xb0>
    6c76:	28 1b       	sub	r18, r24
    6c78:	39 0b       	sbc	r19, r25
    6c7a:	24 30       	cpi	r18, 0x04	; 4
    6c7c:	31 05       	cpc	r19, r1
    6c7e:	80 f4       	brcc	.+32     	; 0x6ca0 <malloc+0x9c>
    6c80:	8a 81       	ldd	r24, Y+2	; 0x02
    6c82:	9b 81       	ldd	r25, Y+3	; 0x03
    6c84:	61 15       	cp	r22, r1
    6c86:	71 05       	cpc	r23, r1
    6c88:	21 f0       	breq	.+8      	; 0x6c92 <malloc+0x8e>
    6c8a:	fb 01       	movw	r30, r22
    6c8c:	93 83       	std	Z+3, r25	; 0x03
    6c8e:	82 83       	std	Z+2, r24	; 0x02
    6c90:	04 c0       	rjmp	.+8      	; 0x6c9a <malloc+0x96>
    6c92:	90 93 e4 15 	sts	0x15E4, r25	; 0x8015e4 <__flp+0x1>
    6c96:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <__flp>
    6c9a:	fe 01       	movw	r30, r28
    6c9c:	32 96       	adiw	r30, 0x02	; 2
    6c9e:	44 c0       	rjmp	.+136    	; 0x6d28 <malloc+0x124>
    6ca0:	fe 01       	movw	r30, r28
    6ca2:	e2 0f       	add	r30, r18
    6ca4:	f3 1f       	adc	r31, r19
    6ca6:	81 93       	st	Z+, r24
    6ca8:	91 93       	st	Z+, r25
    6caa:	22 50       	subi	r18, 0x02	; 2
    6cac:	31 09       	sbc	r19, r1
    6cae:	39 83       	std	Y+1, r19	; 0x01
    6cb0:	28 83       	st	Y, r18
    6cb2:	3a c0       	rjmp	.+116    	; 0x6d28 <malloc+0x124>
    6cb4:	20 91 e1 15 	lds	r18, 0x15E1	; 0x8015e1 <__brkval>
    6cb8:	30 91 e2 15 	lds	r19, 0x15E2	; 0x8015e2 <__brkval+0x1>
    6cbc:	23 2b       	or	r18, r19
    6cbe:	41 f4       	brne	.+16     	; 0x6cd0 <malloc+0xcc>
    6cc0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6cc4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6cc8:	30 93 e2 15 	sts	0x15E2, r19	; 0x8015e2 <__brkval+0x1>
    6ccc:	20 93 e1 15 	sts	0x15E1, r18	; 0x8015e1 <__brkval>
    6cd0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6cd4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6cd8:	21 15       	cp	r18, r1
    6cda:	31 05       	cpc	r19, r1
    6cdc:	41 f4       	brne	.+16     	; 0x6cee <malloc+0xea>
    6cde:	2d b7       	in	r18, 0x3d	; 61
    6ce0:	3e b7       	in	r19, 0x3e	; 62
    6ce2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6ce6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6cea:	24 1b       	sub	r18, r20
    6cec:	35 0b       	sbc	r19, r21
    6cee:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <__brkval>
    6cf2:	f0 91 e2 15 	lds	r31, 0x15E2	; 0x8015e2 <__brkval+0x1>
    6cf6:	e2 17       	cp	r30, r18
    6cf8:	f3 07       	cpc	r31, r19
    6cfa:	a0 f4       	brcc	.+40     	; 0x6d24 <malloc+0x120>
    6cfc:	2e 1b       	sub	r18, r30
    6cfe:	3f 0b       	sbc	r19, r31
    6d00:	28 17       	cp	r18, r24
    6d02:	39 07       	cpc	r19, r25
    6d04:	78 f0       	brcs	.+30     	; 0x6d24 <malloc+0x120>
    6d06:	ac 01       	movw	r20, r24
    6d08:	4e 5f       	subi	r20, 0xFE	; 254
    6d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    6d0c:	24 17       	cp	r18, r20
    6d0e:	35 07       	cpc	r19, r21
    6d10:	48 f0       	brcs	.+18     	; 0x6d24 <malloc+0x120>
    6d12:	4e 0f       	add	r20, r30
    6d14:	5f 1f       	adc	r21, r31
    6d16:	50 93 e2 15 	sts	0x15E2, r21	; 0x8015e2 <__brkval+0x1>
    6d1a:	40 93 e1 15 	sts	0x15E1, r20	; 0x8015e1 <__brkval>
    6d1e:	81 93       	st	Z+, r24
    6d20:	91 93       	st	Z+, r25
    6d22:	02 c0       	rjmp	.+4      	; 0x6d28 <malloc+0x124>
    6d24:	e0 e0       	ldi	r30, 0x00	; 0
    6d26:	f0 e0       	ldi	r31, 0x00	; 0
    6d28:	cf 01       	movw	r24, r30
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	1f 91       	pop	r17
    6d30:	0f 91       	pop	r16
    6d32:	08 95       	ret

00006d34 <free>:
    6d34:	cf 93       	push	r28
    6d36:	df 93       	push	r29
    6d38:	00 97       	sbiw	r24, 0x00	; 0
    6d3a:	09 f4       	brne	.+2      	; 0x6d3e <free+0xa>
    6d3c:	81 c0       	rjmp	.+258    	; 0x6e40 <free+0x10c>
    6d3e:	fc 01       	movw	r30, r24
    6d40:	32 97       	sbiw	r30, 0x02	; 2
    6d42:	13 82       	std	Z+3, r1	; 0x03
    6d44:	12 82       	std	Z+2, r1	; 0x02
    6d46:	a0 91 e3 15 	lds	r26, 0x15E3	; 0x8015e3 <__flp>
    6d4a:	b0 91 e4 15 	lds	r27, 0x15E4	; 0x8015e4 <__flp+0x1>
    6d4e:	10 97       	sbiw	r26, 0x00	; 0
    6d50:	81 f4       	brne	.+32     	; 0x6d72 <free+0x3e>
    6d52:	20 81       	ld	r18, Z
    6d54:	31 81       	ldd	r19, Z+1	; 0x01
    6d56:	82 0f       	add	r24, r18
    6d58:	93 1f       	adc	r25, r19
    6d5a:	20 91 e1 15 	lds	r18, 0x15E1	; 0x8015e1 <__brkval>
    6d5e:	30 91 e2 15 	lds	r19, 0x15E2	; 0x8015e2 <__brkval+0x1>
    6d62:	28 17       	cp	r18, r24
    6d64:	39 07       	cpc	r19, r25
    6d66:	51 f5       	brne	.+84     	; 0x6dbc <free+0x88>
    6d68:	f0 93 e2 15 	sts	0x15E2, r31	; 0x8015e2 <__brkval+0x1>
    6d6c:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <__brkval>
    6d70:	67 c0       	rjmp	.+206    	; 0x6e40 <free+0x10c>
    6d72:	ed 01       	movw	r28, r26
    6d74:	20 e0       	ldi	r18, 0x00	; 0
    6d76:	30 e0       	ldi	r19, 0x00	; 0
    6d78:	ce 17       	cp	r28, r30
    6d7a:	df 07       	cpc	r29, r31
    6d7c:	40 f4       	brcc	.+16     	; 0x6d8e <free+0x5a>
    6d7e:	4a 81       	ldd	r20, Y+2	; 0x02
    6d80:	5b 81       	ldd	r21, Y+3	; 0x03
    6d82:	9e 01       	movw	r18, r28
    6d84:	41 15       	cp	r20, r1
    6d86:	51 05       	cpc	r21, r1
    6d88:	f1 f0       	breq	.+60     	; 0x6dc6 <free+0x92>
    6d8a:	ea 01       	movw	r28, r20
    6d8c:	f5 cf       	rjmp	.-22     	; 0x6d78 <free+0x44>
    6d8e:	d3 83       	std	Z+3, r29	; 0x03
    6d90:	c2 83       	std	Z+2, r28	; 0x02
    6d92:	40 81       	ld	r20, Z
    6d94:	51 81       	ldd	r21, Z+1	; 0x01
    6d96:	84 0f       	add	r24, r20
    6d98:	95 1f       	adc	r25, r21
    6d9a:	c8 17       	cp	r28, r24
    6d9c:	d9 07       	cpc	r29, r25
    6d9e:	59 f4       	brne	.+22     	; 0x6db6 <free+0x82>
    6da0:	88 81       	ld	r24, Y
    6da2:	99 81       	ldd	r25, Y+1	; 0x01
    6da4:	84 0f       	add	r24, r20
    6da6:	95 1f       	adc	r25, r21
    6da8:	02 96       	adiw	r24, 0x02	; 2
    6daa:	91 83       	std	Z+1, r25	; 0x01
    6dac:	80 83       	st	Z, r24
    6dae:	8a 81       	ldd	r24, Y+2	; 0x02
    6db0:	9b 81       	ldd	r25, Y+3	; 0x03
    6db2:	93 83       	std	Z+3, r25	; 0x03
    6db4:	82 83       	std	Z+2, r24	; 0x02
    6db6:	21 15       	cp	r18, r1
    6db8:	31 05       	cpc	r19, r1
    6dba:	29 f4       	brne	.+10     	; 0x6dc6 <free+0x92>
    6dbc:	f0 93 e4 15 	sts	0x15E4, r31	; 0x8015e4 <__flp+0x1>
    6dc0:	e0 93 e3 15 	sts	0x15E3, r30	; 0x8015e3 <__flp>
    6dc4:	3d c0       	rjmp	.+122    	; 0x6e40 <free+0x10c>
    6dc6:	e9 01       	movw	r28, r18
    6dc8:	fb 83       	std	Y+3, r31	; 0x03
    6dca:	ea 83       	std	Y+2, r30	; 0x02
    6dcc:	49 91       	ld	r20, Y+
    6dce:	59 91       	ld	r21, Y+
    6dd0:	c4 0f       	add	r28, r20
    6dd2:	d5 1f       	adc	r29, r21
    6dd4:	ec 17       	cp	r30, r28
    6dd6:	fd 07       	cpc	r31, r29
    6dd8:	61 f4       	brne	.+24     	; 0x6df2 <free+0xbe>
    6dda:	80 81       	ld	r24, Z
    6ddc:	91 81       	ldd	r25, Z+1	; 0x01
    6dde:	84 0f       	add	r24, r20
    6de0:	95 1f       	adc	r25, r21
    6de2:	02 96       	adiw	r24, 0x02	; 2
    6de4:	e9 01       	movw	r28, r18
    6de6:	99 83       	std	Y+1, r25	; 0x01
    6de8:	88 83       	st	Y, r24
    6dea:	82 81       	ldd	r24, Z+2	; 0x02
    6dec:	93 81       	ldd	r25, Z+3	; 0x03
    6dee:	9b 83       	std	Y+3, r25	; 0x03
    6df0:	8a 83       	std	Y+2, r24	; 0x02
    6df2:	e0 e0       	ldi	r30, 0x00	; 0
    6df4:	f0 e0       	ldi	r31, 0x00	; 0
    6df6:	12 96       	adiw	r26, 0x02	; 2
    6df8:	8d 91       	ld	r24, X+
    6dfa:	9c 91       	ld	r25, X
    6dfc:	13 97       	sbiw	r26, 0x03	; 3
    6dfe:	00 97       	sbiw	r24, 0x00	; 0
    6e00:	19 f0       	breq	.+6      	; 0x6e08 <free+0xd4>
    6e02:	fd 01       	movw	r30, r26
    6e04:	dc 01       	movw	r26, r24
    6e06:	f7 cf       	rjmp	.-18     	; 0x6df6 <free+0xc2>
    6e08:	8d 91       	ld	r24, X+
    6e0a:	9c 91       	ld	r25, X
    6e0c:	11 97       	sbiw	r26, 0x01	; 1
    6e0e:	9d 01       	movw	r18, r26
    6e10:	2e 5f       	subi	r18, 0xFE	; 254
    6e12:	3f 4f       	sbci	r19, 0xFF	; 255
    6e14:	82 0f       	add	r24, r18
    6e16:	93 1f       	adc	r25, r19
    6e18:	20 91 e1 15 	lds	r18, 0x15E1	; 0x8015e1 <__brkval>
    6e1c:	30 91 e2 15 	lds	r19, 0x15E2	; 0x8015e2 <__brkval+0x1>
    6e20:	28 17       	cp	r18, r24
    6e22:	39 07       	cpc	r19, r25
    6e24:	69 f4       	brne	.+26     	; 0x6e40 <free+0x10c>
    6e26:	30 97       	sbiw	r30, 0x00	; 0
    6e28:	29 f4       	brne	.+10     	; 0x6e34 <free+0x100>
    6e2a:	10 92 e4 15 	sts	0x15E4, r1	; 0x8015e4 <__flp+0x1>
    6e2e:	10 92 e3 15 	sts	0x15E3, r1	; 0x8015e3 <__flp>
    6e32:	02 c0       	rjmp	.+4      	; 0x6e38 <free+0x104>
    6e34:	13 82       	std	Z+3, r1	; 0x03
    6e36:	12 82       	std	Z+2, r1	; 0x02
    6e38:	b0 93 e2 15 	sts	0x15E2, r27	; 0x8015e2 <__brkval+0x1>
    6e3c:	a0 93 e1 15 	sts	0x15E1, r26	; 0x8015e1 <__brkval>
    6e40:	df 91       	pop	r29
    6e42:	cf 91       	pop	r28
    6e44:	08 95       	ret

00006e46 <abort>:
    6e46:	81 e0       	ldi	r24, 0x01	; 1
    6e48:	90 e0       	ldi	r25, 0x00	; 0
    6e4a:	f8 94       	cli
    6e4c:	21 c2       	rjmp	.+1090   	; 0x7290 <_exit>

00006e4e <__ftoa_engine>:
    6e4e:	28 30       	cpi	r18, 0x08	; 8
    6e50:	08 f0       	brcs	.+2      	; 0x6e54 <__ftoa_engine+0x6>
    6e52:	27 e0       	ldi	r18, 0x07	; 7
    6e54:	33 27       	eor	r19, r19
    6e56:	da 01       	movw	r26, r20
    6e58:	99 0f       	add	r25, r25
    6e5a:	31 1d       	adc	r19, r1
    6e5c:	87 fd       	sbrc	r24, 7
    6e5e:	91 60       	ori	r25, 0x01	; 1
    6e60:	00 96       	adiw	r24, 0x00	; 0
    6e62:	61 05       	cpc	r22, r1
    6e64:	71 05       	cpc	r23, r1
    6e66:	39 f4       	brne	.+14     	; 0x6e76 <__ftoa_engine+0x28>
    6e68:	32 60       	ori	r19, 0x02	; 2
    6e6a:	2e 5f       	subi	r18, 0xFE	; 254
    6e6c:	3d 93       	st	X+, r19
    6e6e:	30 e3       	ldi	r19, 0x30	; 48
    6e70:	2a 95       	dec	r18
    6e72:	e1 f7       	brne	.-8      	; 0x6e6c <__ftoa_engine+0x1e>
    6e74:	08 95       	ret
    6e76:	9f 3f       	cpi	r25, 0xFF	; 255
    6e78:	30 f0       	brcs	.+12     	; 0x6e86 <__ftoa_engine+0x38>
    6e7a:	80 38       	cpi	r24, 0x80	; 128
    6e7c:	71 05       	cpc	r23, r1
    6e7e:	61 05       	cpc	r22, r1
    6e80:	09 f0       	breq	.+2      	; 0x6e84 <__ftoa_engine+0x36>
    6e82:	3c 5f       	subi	r19, 0xFC	; 252
    6e84:	3c 5f       	subi	r19, 0xFC	; 252
    6e86:	3d 93       	st	X+, r19
    6e88:	91 30       	cpi	r25, 0x01	; 1
    6e8a:	08 f0       	brcs	.+2      	; 0x6e8e <__ftoa_engine+0x40>
    6e8c:	80 68       	ori	r24, 0x80	; 128
    6e8e:	91 1d       	adc	r25, r1
    6e90:	df 93       	push	r29
    6e92:	cf 93       	push	r28
    6e94:	1f 93       	push	r17
    6e96:	0f 93       	push	r16
    6e98:	ff 92       	push	r15
    6e9a:	ef 92       	push	r14
    6e9c:	19 2f       	mov	r17, r25
    6e9e:	98 7f       	andi	r25, 0xF8	; 248
    6ea0:	96 95       	lsr	r25
    6ea2:	e9 2f       	mov	r30, r25
    6ea4:	96 95       	lsr	r25
    6ea6:	96 95       	lsr	r25
    6ea8:	e9 0f       	add	r30, r25
    6eaa:	ff 27       	eor	r31, r31
    6eac:	e4 50       	subi	r30, 0x04	; 4
    6eae:	fe 4f       	sbci	r31, 0xFE	; 254
    6eb0:	99 27       	eor	r25, r25
    6eb2:	33 27       	eor	r19, r19
    6eb4:	ee 24       	eor	r14, r14
    6eb6:	ff 24       	eor	r15, r15
    6eb8:	a7 01       	movw	r20, r14
    6eba:	e7 01       	movw	r28, r14
    6ebc:	05 90       	lpm	r0, Z+
    6ebe:	08 94       	sec
    6ec0:	07 94       	ror	r0
    6ec2:	28 f4       	brcc	.+10     	; 0x6ece <__ftoa_engine+0x80>
    6ec4:	36 0f       	add	r19, r22
    6ec6:	e7 1e       	adc	r14, r23
    6ec8:	f8 1e       	adc	r15, r24
    6eca:	49 1f       	adc	r20, r25
    6ecc:	51 1d       	adc	r21, r1
    6ece:	66 0f       	add	r22, r22
    6ed0:	77 1f       	adc	r23, r23
    6ed2:	88 1f       	adc	r24, r24
    6ed4:	99 1f       	adc	r25, r25
    6ed6:	06 94       	lsr	r0
    6ed8:	a1 f7       	brne	.-24     	; 0x6ec2 <__ftoa_engine+0x74>
    6eda:	05 90       	lpm	r0, Z+
    6edc:	07 94       	ror	r0
    6ede:	28 f4       	brcc	.+10     	; 0x6eea <__ftoa_engine+0x9c>
    6ee0:	e7 0e       	add	r14, r23
    6ee2:	f8 1e       	adc	r15, r24
    6ee4:	49 1f       	adc	r20, r25
    6ee6:	56 1f       	adc	r21, r22
    6ee8:	c1 1d       	adc	r28, r1
    6eea:	77 0f       	add	r23, r23
    6eec:	88 1f       	adc	r24, r24
    6eee:	99 1f       	adc	r25, r25
    6ef0:	66 1f       	adc	r22, r22
    6ef2:	06 94       	lsr	r0
    6ef4:	a1 f7       	brne	.-24     	; 0x6ede <__ftoa_engine+0x90>
    6ef6:	05 90       	lpm	r0, Z+
    6ef8:	07 94       	ror	r0
    6efa:	28 f4       	brcc	.+10     	; 0x6f06 <__ftoa_engine+0xb8>
    6efc:	f8 0e       	add	r15, r24
    6efe:	49 1f       	adc	r20, r25
    6f00:	56 1f       	adc	r21, r22
    6f02:	c7 1f       	adc	r28, r23
    6f04:	d1 1d       	adc	r29, r1
    6f06:	88 0f       	add	r24, r24
    6f08:	99 1f       	adc	r25, r25
    6f0a:	66 1f       	adc	r22, r22
    6f0c:	77 1f       	adc	r23, r23
    6f0e:	06 94       	lsr	r0
    6f10:	a1 f7       	brne	.-24     	; 0x6efa <__ftoa_engine+0xac>
    6f12:	05 90       	lpm	r0, Z+
    6f14:	07 94       	ror	r0
    6f16:	20 f4       	brcc	.+8      	; 0x6f20 <__ftoa_engine+0xd2>
    6f18:	49 0f       	add	r20, r25
    6f1a:	56 1f       	adc	r21, r22
    6f1c:	c7 1f       	adc	r28, r23
    6f1e:	d8 1f       	adc	r29, r24
    6f20:	99 0f       	add	r25, r25
    6f22:	66 1f       	adc	r22, r22
    6f24:	77 1f       	adc	r23, r23
    6f26:	88 1f       	adc	r24, r24
    6f28:	06 94       	lsr	r0
    6f2a:	a9 f7       	brne	.-22     	; 0x6f16 <__ftoa_engine+0xc8>
    6f2c:	84 91       	lpm	r24, Z
    6f2e:	10 95       	com	r17
    6f30:	17 70       	andi	r17, 0x07	; 7
    6f32:	41 f0       	breq	.+16     	; 0x6f44 <__ftoa_engine+0xf6>
    6f34:	d6 95       	lsr	r29
    6f36:	c7 95       	ror	r28
    6f38:	57 95       	ror	r21
    6f3a:	47 95       	ror	r20
    6f3c:	f7 94       	ror	r15
    6f3e:	e7 94       	ror	r14
    6f40:	1a 95       	dec	r17
    6f42:	c1 f7       	brne	.-16     	; 0x6f34 <__ftoa_engine+0xe6>
    6f44:	e2 ea       	ldi	r30, 0xA2	; 162
    6f46:	f1 e0       	ldi	r31, 0x01	; 1
    6f48:	68 94       	set
    6f4a:	15 90       	lpm	r1, Z+
    6f4c:	15 91       	lpm	r17, Z+
    6f4e:	35 91       	lpm	r19, Z+
    6f50:	65 91       	lpm	r22, Z+
    6f52:	95 91       	lpm	r25, Z+
    6f54:	05 90       	lpm	r0, Z+
    6f56:	7f e2       	ldi	r23, 0x2F	; 47
    6f58:	73 95       	inc	r23
    6f5a:	e1 18       	sub	r14, r1
    6f5c:	f1 0a       	sbc	r15, r17
    6f5e:	43 0b       	sbc	r20, r19
    6f60:	56 0b       	sbc	r21, r22
    6f62:	c9 0b       	sbc	r28, r25
    6f64:	d0 09       	sbc	r29, r0
    6f66:	c0 f7       	brcc	.-16     	; 0x6f58 <__ftoa_engine+0x10a>
    6f68:	e1 0c       	add	r14, r1
    6f6a:	f1 1e       	adc	r15, r17
    6f6c:	43 1f       	adc	r20, r19
    6f6e:	56 1f       	adc	r21, r22
    6f70:	c9 1f       	adc	r28, r25
    6f72:	d0 1d       	adc	r29, r0
    6f74:	7e f4       	brtc	.+30     	; 0x6f94 <__ftoa_engine+0x146>
    6f76:	70 33       	cpi	r23, 0x30	; 48
    6f78:	11 f4       	brne	.+4      	; 0x6f7e <__ftoa_engine+0x130>
    6f7a:	8a 95       	dec	r24
    6f7c:	e6 cf       	rjmp	.-52     	; 0x6f4a <__ftoa_engine+0xfc>
    6f7e:	e8 94       	clt
    6f80:	01 50       	subi	r16, 0x01	; 1
    6f82:	30 f0       	brcs	.+12     	; 0x6f90 <__ftoa_engine+0x142>
    6f84:	08 0f       	add	r16, r24
    6f86:	0a f4       	brpl	.+2      	; 0x6f8a <__ftoa_engine+0x13c>
    6f88:	00 27       	eor	r16, r16
    6f8a:	02 17       	cp	r16, r18
    6f8c:	08 f4       	brcc	.+2      	; 0x6f90 <__ftoa_engine+0x142>
    6f8e:	20 2f       	mov	r18, r16
    6f90:	23 95       	inc	r18
    6f92:	02 2f       	mov	r16, r18
    6f94:	7a 33       	cpi	r23, 0x3A	; 58
    6f96:	28 f0       	brcs	.+10     	; 0x6fa2 <__ftoa_engine+0x154>
    6f98:	79 e3       	ldi	r23, 0x39	; 57
    6f9a:	7d 93       	st	X+, r23
    6f9c:	2a 95       	dec	r18
    6f9e:	e9 f7       	brne	.-6      	; 0x6f9a <__ftoa_engine+0x14c>
    6fa0:	10 c0       	rjmp	.+32     	; 0x6fc2 <__ftoa_engine+0x174>
    6fa2:	7d 93       	st	X+, r23
    6fa4:	2a 95       	dec	r18
    6fa6:	89 f6       	brne	.-94     	; 0x6f4a <__ftoa_engine+0xfc>
    6fa8:	06 94       	lsr	r0
    6faa:	97 95       	ror	r25
    6fac:	67 95       	ror	r22
    6fae:	37 95       	ror	r19
    6fb0:	17 95       	ror	r17
    6fb2:	17 94       	ror	r1
    6fb4:	e1 18       	sub	r14, r1
    6fb6:	f1 0a       	sbc	r15, r17
    6fb8:	43 0b       	sbc	r20, r19
    6fba:	56 0b       	sbc	r21, r22
    6fbc:	c9 0b       	sbc	r28, r25
    6fbe:	d0 09       	sbc	r29, r0
    6fc0:	98 f0       	brcs	.+38     	; 0x6fe8 <__ftoa_engine+0x19a>
    6fc2:	23 95       	inc	r18
    6fc4:	7e 91       	ld	r23, -X
    6fc6:	73 95       	inc	r23
    6fc8:	7a 33       	cpi	r23, 0x3A	; 58
    6fca:	08 f0       	brcs	.+2      	; 0x6fce <__ftoa_engine+0x180>
    6fcc:	70 e3       	ldi	r23, 0x30	; 48
    6fce:	7c 93       	st	X, r23
    6fd0:	20 13       	cpse	r18, r16
    6fd2:	b8 f7       	brcc	.-18     	; 0x6fc2 <__ftoa_engine+0x174>
    6fd4:	7e 91       	ld	r23, -X
    6fd6:	70 61       	ori	r23, 0x10	; 16
    6fd8:	7d 93       	st	X+, r23
    6fda:	30 f0       	brcs	.+12     	; 0x6fe8 <__ftoa_engine+0x19a>
    6fdc:	83 95       	inc	r24
    6fde:	71 e3       	ldi	r23, 0x31	; 49
    6fe0:	7d 93       	st	X+, r23
    6fe2:	70 e3       	ldi	r23, 0x30	; 48
    6fe4:	2a 95       	dec	r18
    6fe6:	e1 f7       	brne	.-8      	; 0x6fe0 <__ftoa_engine+0x192>
    6fe8:	11 24       	eor	r1, r1
    6fea:	ef 90       	pop	r14
    6fec:	ff 90       	pop	r15
    6fee:	0f 91       	pop	r16
    6ff0:	1f 91       	pop	r17
    6ff2:	cf 91       	pop	r28
    6ff4:	df 91       	pop	r29
    6ff6:	99 27       	eor	r25, r25
    6ff8:	87 fd       	sbrc	r24, 7
    6ffa:	90 95       	com	r25
    6ffc:	08 95       	ret

00006ffe <strnlen_P>:
    6ffe:	fc 01       	movw	r30, r24
    7000:	05 90       	lpm	r0, Z+
    7002:	61 50       	subi	r22, 0x01	; 1
    7004:	70 40       	sbci	r23, 0x00	; 0
    7006:	01 10       	cpse	r0, r1
    7008:	d8 f7       	brcc	.-10     	; 0x7000 <strnlen_P+0x2>
    700a:	80 95       	com	r24
    700c:	90 95       	com	r25
    700e:	8e 0f       	add	r24, r30
    7010:	9f 1f       	adc	r25, r31
    7012:	08 95       	ret

00007014 <memcpy>:
    7014:	fb 01       	movw	r30, r22
    7016:	dc 01       	movw	r26, r24
    7018:	02 c0       	rjmp	.+4      	; 0x701e <memcpy+0xa>
    701a:	01 90       	ld	r0, Z+
    701c:	0d 92       	st	X+, r0
    701e:	41 50       	subi	r20, 0x01	; 1
    7020:	50 40       	sbci	r21, 0x00	; 0
    7022:	d8 f7       	brcc	.-10     	; 0x701a <memcpy+0x6>
    7024:	08 95       	ret

00007026 <memset>:
    7026:	dc 01       	movw	r26, r24
    7028:	01 c0       	rjmp	.+2      	; 0x702c <memset+0x6>
    702a:	6d 93       	st	X+, r22
    702c:	41 50       	subi	r20, 0x01	; 1
    702e:	50 40       	sbci	r21, 0x00	; 0
    7030:	e0 f7       	brcc	.-8      	; 0x702a <memset+0x4>
    7032:	08 95       	ret

00007034 <strcasestr>:
    7034:	fb 01       	movw	r30, r22
    7036:	51 91       	ld	r21, Z+
    7038:	55 23       	and	r21, r21
    703a:	b1 f0       	breq	.+44     	; 0x7068 <strcasestr+0x34>
    703c:	bf 01       	movw	r22, r30
    703e:	dc 01       	movw	r26, r24
    7040:	05 2e       	mov	r0, r21
    7042:	4d 91       	ld	r20, X+
    7044:	44 23       	and	r20, r20
    7046:	69 f0       	breq	.+26     	; 0x7062 <strcasestr+0x2e>
    7048:	10 d0       	rcall	.+32     	; 0x706a <strcasestr+0x36>
    704a:	d9 f7       	brne	.-10     	; 0x7042 <strcasestr+0xe>
    704c:	cd 01       	movw	r24, r26
    704e:	01 90       	ld	r0, Z+
    7050:	00 20       	and	r0, r0
    7052:	49 f0       	breq	.+18     	; 0x7066 <strcasestr+0x32>
    7054:	4d 91       	ld	r20, X+
    7056:	41 11       	cpse	r20, r1
    7058:	08 d0       	rcall	.+16     	; 0x706a <strcasestr+0x36>
    705a:	c9 f3       	breq	.-14     	; 0x704e <strcasestr+0x1a>
    705c:	fb 01       	movw	r30, r22
    705e:	41 11       	cpse	r20, r1
    7060:	ee cf       	rjmp	.-36     	; 0x703e <strcasestr+0xa>
    7062:	81 e0       	ldi	r24, 0x01	; 1
    7064:	90 e0       	ldi	r25, 0x00	; 0
    7066:	01 97       	sbiw	r24, 0x01	; 1
    7068:	08 95       	ret
    706a:	40 25       	eor	r20, r0
    706c:	39 f0       	breq	.+14     	; 0x707c <strcasestr+0x48>
    706e:	40 32       	cpi	r20, 0x20	; 32
    7070:	29 f4       	brne	.+10     	; 0x707c <strcasestr+0x48>
    7072:	40 29       	or	r20, r0
    7074:	4b 57       	subi	r20, 0x7B	; 123
    7076:	46 5e       	subi	r20, 0xE6	; 230
    7078:	08 f0       	brcs	.+2      	; 0x707c <strcasestr+0x48>
    707a:	18 94       	sez
    707c:	08 95       	ret

0000707e <strcat>:
    707e:	fb 01       	movw	r30, r22
    7080:	dc 01       	movw	r26, r24
    7082:	0d 90       	ld	r0, X+
    7084:	00 20       	and	r0, r0
    7086:	e9 f7       	brne	.-6      	; 0x7082 <strcat+0x4>
    7088:	11 97       	sbiw	r26, 0x01	; 1
    708a:	01 90       	ld	r0, Z+
    708c:	0d 92       	st	X+, r0
    708e:	00 20       	and	r0, r0
    7090:	e1 f7       	brne	.-8      	; 0x708a <strcat+0xc>
    7092:	08 95       	ret

00007094 <strcpy>:
    7094:	fb 01       	movw	r30, r22
    7096:	dc 01       	movw	r26, r24
    7098:	01 90       	ld	r0, Z+
    709a:	0d 92       	st	X+, r0
    709c:	00 20       	and	r0, r0
    709e:	e1 f7       	brne	.-8      	; 0x7098 <strcpy+0x4>
    70a0:	08 95       	ret

000070a2 <strncasecmp>:
    70a2:	fb 01       	movw	r30, r22
    70a4:	dc 01       	movw	r26, r24
    70a6:	41 50       	subi	r20, 0x01	; 1
    70a8:	50 40       	sbci	r21, 0x00	; 0
    70aa:	88 f0       	brcs	.+34     	; 0x70ce <strncasecmp+0x2c>
    70ac:	8d 91       	ld	r24, X+
    70ae:	81 34       	cpi	r24, 0x41	; 65
    70b0:	1c f0       	brlt	.+6      	; 0x70b8 <strncasecmp+0x16>
    70b2:	8b 35       	cpi	r24, 0x5B	; 91
    70b4:	0c f4       	brge	.+2      	; 0x70b8 <strncasecmp+0x16>
    70b6:	80 5e       	subi	r24, 0xE0	; 224
    70b8:	61 91       	ld	r22, Z+
    70ba:	61 34       	cpi	r22, 0x41	; 65
    70bc:	1c f0       	brlt	.+6      	; 0x70c4 <strncasecmp+0x22>
    70be:	6b 35       	cpi	r22, 0x5B	; 91
    70c0:	0c f4       	brge	.+2      	; 0x70c4 <strncasecmp+0x22>
    70c2:	60 5e       	subi	r22, 0xE0	; 224
    70c4:	86 1b       	sub	r24, r22
    70c6:	61 11       	cpse	r22, r1
    70c8:	71 f3       	breq	.-36     	; 0x70a6 <strncasecmp+0x4>
    70ca:	99 0b       	sbc	r25, r25
    70cc:	08 95       	ret
    70ce:	88 1b       	sub	r24, r24
    70d0:	fc cf       	rjmp	.-8      	; 0x70ca <strncasecmp+0x28>

000070d2 <strnlen>:
    70d2:	fc 01       	movw	r30, r24
    70d4:	61 50       	subi	r22, 0x01	; 1
    70d6:	70 40       	sbci	r23, 0x00	; 0
    70d8:	01 90       	ld	r0, Z+
    70da:	01 10       	cpse	r0, r1
    70dc:	d8 f7       	brcc	.-10     	; 0x70d4 <strnlen+0x2>
    70de:	80 95       	com	r24
    70e0:	90 95       	com	r25
    70e2:	8e 0f       	add	r24, r30
    70e4:	9f 1f       	adc	r25, r31
    70e6:	08 95       	ret

000070e8 <fputc>:
    70e8:	0f 93       	push	r16
    70ea:	1f 93       	push	r17
    70ec:	cf 93       	push	r28
    70ee:	df 93       	push	r29
    70f0:	fb 01       	movw	r30, r22
    70f2:	23 81       	ldd	r18, Z+3	; 0x03
    70f4:	21 fd       	sbrc	r18, 1
    70f6:	03 c0       	rjmp	.+6      	; 0x70fe <fputc+0x16>
    70f8:	8f ef       	ldi	r24, 0xFF	; 255
    70fa:	9f ef       	ldi	r25, 0xFF	; 255
    70fc:	2c c0       	rjmp	.+88     	; 0x7156 <fputc+0x6e>
    70fe:	22 ff       	sbrs	r18, 2
    7100:	16 c0       	rjmp	.+44     	; 0x712e <fputc+0x46>
    7102:	46 81       	ldd	r20, Z+6	; 0x06
    7104:	57 81       	ldd	r21, Z+7	; 0x07
    7106:	24 81       	ldd	r18, Z+4	; 0x04
    7108:	35 81       	ldd	r19, Z+5	; 0x05
    710a:	42 17       	cp	r20, r18
    710c:	53 07       	cpc	r21, r19
    710e:	44 f4       	brge	.+16     	; 0x7120 <fputc+0x38>
    7110:	a0 81       	ld	r26, Z
    7112:	b1 81       	ldd	r27, Z+1	; 0x01
    7114:	9d 01       	movw	r18, r26
    7116:	2f 5f       	subi	r18, 0xFF	; 255
    7118:	3f 4f       	sbci	r19, 0xFF	; 255
    711a:	31 83       	std	Z+1, r19	; 0x01
    711c:	20 83       	st	Z, r18
    711e:	8c 93       	st	X, r24
    7120:	26 81       	ldd	r18, Z+6	; 0x06
    7122:	37 81       	ldd	r19, Z+7	; 0x07
    7124:	2f 5f       	subi	r18, 0xFF	; 255
    7126:	3f 4f       	sbci	r19, 0xFF	; 255
    7128:	37 83       	std	Z+7, r19	; 0x07
    712a:	26 83       	std	Z+6, r18	; 0x06
    712c:	14 c0       	rjmp	.+40     	; 0x7156 <fputc+0x6e>
    712e:	8b 01       	movw	r16, r22
    7130:	ec 01       	movw	r28, r24
    7132:	fb 01       	movw	r30, r22
    7134:	00 84       	ldd	r0, Z+8	; 0x08
    7136:	f1 85       	ldd	r31, Z+9	; 0x09
    7138:	e0 2d       	mov	r30, r0
    713a:	19 95       	eicall
    713c:	89 2b       	or	r24, r25
    713e:	e1 f6       	brne	.-72     	; 0x70f8 <fputc+0x10>
    7140:	d8 01       	movw	r26, r16
    7142:	16 96       	adiw	r26, 0x06	; 6
    7144:	8d 91       	ld	r24, X+
    7146:	9c 91       	ld	r25, X
    7148:	17 97       	sbiw	r26, 0x07	; 7
    714a:	01 96       	adiw	r24, 0x01	; 1
    714c:	17 96       	adiw	r26, 0x07	; 7
    714e:	9c 93       	st	X, r25
    7150:	8e 93       	st	-X, r24
    7152:	16 97       	sbiw	r26, 0x06	; 6
    7154:	ce 01       	movw	r24, r28
    7156:	df 91       	pop	r29
    7158:	cf 91       	pop	r28
    715a:	1f 91       	pop	r17
    715c:	0f 91       	pop	r16
    715e:	08 95       	ret

00007160 <putchar>:
    7160:	60 91 e7 15 	lds	r22, 0x15E7	; 0x8015e7 <__iob+0x2>
    7164:	70 91 e8 15 	lds	r23, 0x15E8	; 0x8015e8 <__iob+0x3>
    7168:	bf cf       	rjmp	.-130    	; 0x70e8 <fputc>

0000716a <sprintf>:
    716a:	0f 93       	push	r16
    716c:	1f 93       	push	r17
    716e:	cf 93       	push	r28
    7170:	df 93       	push	r29
    7172:	cd b7       	in	r28, 0x3d	; 61
    7174:	de b7       	in	r29, 0x3e	; 62
    7176:	2e 97       	sbiw	r28, 0x0e	; 14
    7178:	0f b6       	in	r0, 0x3f	; 63
    717a:	f8 94       	cli
    717c:	de bf       	out	0x3e, r29	; 62
    717e:	0f be       	out	0x3f, r0	; 63
    7180:	cd bf       	out	0x3d, r28	; 61
    7182:	0e 89       	ldd	r16, Y+22	; 0x16
    7184:	1f 89       	ldd	r17, Y+23	; 0x17
    7186:	86 e0       	ldi	r24, 0x06	; 6
    7188:	8c 83       	std	Y+4, r24	; 0x04
    718a:	1a 83       	std	Y+2, r17	; 0x02
    718c:	09 83       	std	Y+1, r16	; 0x01
    718e:	8f ef       	ldi	r24, 0xFF	; 255
    7190:	9f e7       	ldi	r25, 0x7F	; 127
    7192:	9e 83       	std	Y+6, r25	; 0x06
    7194:	8d 83       	std	Y+5, r24	; 0x05
    7196:	ae 01       	movw	r20, r28
    7198:	46 5e       	subi	r20, 0xE6	; 230
    719a:	5f 4f       	sbci	r21, 0xFF	; 255
    719c:	68 8d       	ldd	r22, Y+24	; 0x18
    719e:	79 8d       	ldd	r23, Y+25	; 0x19
    71a0:	ce 01       	movw	r24, r28
    71a2:	01 96       	adiw	r24, 0x01	; 1
    71a4:	a0 d8       	rcall	.-3776   	; 0x62e6 <vfprintf>
    71a6:	ef 81       	ldd	r30, Y+7	; 0x07
    71a8:	f8 85       	ldd	r31, Y+8	; 0x08
    71aa:	e0 0f       	add	r30, r16
    71ac:	f1 1f       	adc	r31, r17
    71ae:	10 82       	st	Z, r1
    71b0:	2e 96       	adiw	r28, 0x0e	; 14
    71b2:	0f b6       	in	r0, 0x3f	; 63
    71b4:	f8 94       	cli
    71b6:	de bf       	out	0x3e, r29	; 62
    71b8:	0f be       	out	0x3f, r0	; 63
    71ba:	cd bf       	out	0x3d, r28	; 61
    71bc:	df 91       	pop	r29
    71be:	cf 91       	pop	r28
    71c0:	1f 91       	pop	r17
    71c2:	0f 91       	pop	r16
    71c4:	08 95       	ret

000071c6 <vprintf>:
    71c6:	ab 01       	movw	r20, r22
    71c8:	bc 01       	movw	r22, r24
    71ca:	80 91 e7 15 	lds	r24, 0x15E7	; 0x8015e7 <__iob+0x2>
    71ce:	90 91 e8 15 	lds	r25, 0x15E8	; 0x8015e8 <__iob+0x3>
    71d2:	89 c8       	rjmp	.-3822   	; 0x62e6 <vfprintf>

000071d4 <__ultoa_invert>:
    71d4:	fa 01       	movw	r30, r20
    71d6:	aa 27       	eor	r26, r26
    71d8:	28 30       	cpi	r18, 0x08	; 8
    71da:	51 f1       	breq	.+84     	; 0x7230 <__ultoa_invert+0x5c>
    71dc:	20 31       	cpi	r18, 0x10	; 16
    71de:	81 f1       	breq	.+96     	; 0x7240 <__ultoa_invert+0x6c>
    71e0:	e8 94       	clt
    71e2:	6f 93       	push	r22
    71e4:	6e 7f       	andi	r22, 0xFE	; 254
    71e6:	6e 5f       	subi	r22, 0xFE	; 254
    71e8:	7f 4f       	sbci	r23, 0xFF	; 255
    71ea:	8f 4f       	sbci	r24, 0xFF	; 255
    71ec:	9f 4f       	sbci	r25, 0xFF	; 255
    71ee:	af 4f       	sbci	r26, 0xFF	; 255
    71f0:	b1 e0       	ldi	r27, 0x01	; 1
    71f2:	3e d0       	rcall	.+124    	; 0x7270 <__ultoa_invert+0x9c>
    71f4:	b4 e0       	ldi	r27, 0x04	; 4
    71f6:	3c d0       	rcall	.+120    	; 0x7270 <__ultoa_invert+0x9c>
    71f8:	67 0f       	add	r22, r23
    71fa:	78 1f       	adc	r23, r24
    71fc:	89 1f       	adc	r24, r25
    71fe:	9a 1f       	adc	r25, r26
    7200:	a1 1d       	adc	r26, r1
    7202:	68 0f       	add	r22, r24
    7204:	79 1f       	adc	r23, r25
    7206:	8a 1f       	adc	r24, r26
    7208:	91 1d       	adc	r25, r1
    720a:	a1 1d       	adc	r26, r1
    720c:	6a 0f       	add	r22, r26
    720e:	71 1d       	adc	r23, r1
    7210:	81 1d       	adc	r24, r1
    7212:	91 1d       	adc	r25, r1
    7214:	a1 1d       	adc	r26, r1
    7216:	20 d0       	rcall	.+64     	; 0x7258 <__ultoa_invert+0x84>
    7218:	09 f4       	brne	.+2      	; 0x721c <__ultoa_invert+0x48>
    721a:	68 94       	set
    721c:	3f 91       	pop	r19
    721e:	2a e0       	ldi	r18, 0x0A	; 10
    7220:	26 9f       	mul	r18, r22
    7222:	11 24       	eor	r1, r1
    7224:	30 19       	sub	r19, r0
    7226:	30 5d       	subi	r19, 0xD0	; 208
    7228:	31 93       	st	Z+, r19
    722a:	de f6       	brtc	.-74     	; 0x71e2 <__ultoa_invert+0xe>
    722c:	cf 01       	movw	r24, r30
    722e:	08 95       	ret
    7230:	46 2f       	mov	r20, r22
    7232:	47 70       	andi	r20, 0x07	; 7
    7234:	40 5d       	subi	r20, 0xD0	; 208
    7236:	41 93       	st	Z+, r20
    7238:	b3 e0       	ldi	r27, 0x03	; 3
    723a:	0f d0       	rcall	.+30     	; 0x725a <__ultoa_invert+0x86>
    723c:	c9 f7       	brne	.-14     	; 0x7230 <__ultoa_invert+0x5c>
    723e:	f6 cf       	rjmp	.-20     	; 0x722c <__ultoa_invert+0x58>
    7240:	46 2f       	mov	r20, r22
    7242:	4f 70       	andi	r20, 0x0F	; 15
    7244:	40 5d       	subi	r20, 0xD0	; 208
    7246:	4a 33       	cpi	r20, 0x3A	; 58
    7248:	18 f0       	brcs	.+6      	; 0x7250 <__ultoa_invert+0x7c>
    724a:	49 5d       	subi	r20, 0xD9	; 217
    724c:	31 fd       	sbrc	r19, 1
    724e:	40 52       	subi	r20, 0x20	; 32
    7250:	41 93       	st	Z+, r20
    7252:	02 d0       	rcall	.+4      	; 0x7258 <__ultoa_invert+0x84>
    7254:	a9 f7       	brne	.-22     	; 0x7240 <__ultoa_invert+0x6c>
    7256:	ea cf       	rjmp	.-44     	; 0x722c <__ultoa_invert+0x58>
    7258:	b4 e0       	ldi	r27, 0x04	; 4
    725a:	a6 95       	lsr	r26
    725c:	97 95       	ror	r25
    725e:	87 95       	ror	r24
    7260:	77 95       	ror	r23
    7262:	67 95       	ror	r22
    7264:	ba 95       	dec	r27
    7266:	c9 f7       	brne	.-14     	; 0x725a <__ultoa_invert+0x86>
    7268:	00 97       	sbiw	r24, 0x00	; 0
    726a:	61 05       	cpc	r22, r1
    726c:	71 05       	cpc	r23, r1
    726e:	08 95       	ret
    7270:	9b 01       	movw	r18, r22
    7272:	ac 01       	movw	r20, r24
    7274:	0a 2e       	mov	r0, r26
    7276:	06 94       	lsr	r0
    7278:	57 95       	ror	r21
    727a:	47 95       	ror	r20
    727c:	37 95       	ror	r19
    727e:	27 95       	ror	r18
    7280:	ba 95       	dec	r27
    7282:	c9 f7       	brne	.-14     	; 0x7276 <__ultoa_invert+0xa2>
    7284:	62 0f       	add	r22, r18
    7286:	73 1f       	adc	r23, r19
    7288:	84 1f       	adc	r24, r20
    728a:	95 1f       	adc	r25, r21
    728c:	a0 1d       	adc	r26, r0
    728e:	08 95       	ret

00007290 <_exit>:
    7290:	f8 94       	cli

00007292 <__stop_program>:
    7292:	ff cf       	rjmp	.-2      	; 0x7292 <__stop_program>
