
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000502  00800200  0000649a  0000652e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000649a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c03  00800702  00800702  00006a30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a28  00000000  00000000  00006acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cf9b  00000000  00000000  000074f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003314  00000000  00000000  0001448f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000064a8  00000000  00000000  000177a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000259c  00000000  00000000  0001dc4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003feb  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c27e  00000000  00000000  000241d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a8  00000000  00000000  00030451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__vector_25>
      68:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__vector_36>
      94:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 94 29 	jmp	0x5328	; 0x5328 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 40 27 	jmp	0x4e80	; 0x4e80 <__vector_51>
      d0:	0c 94 92 27 	jmp	0x4f24	; 0x4f24 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__vector_54>
      dc:	0c 94 28 28 	jmp	0x5050	; 0x5050 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b5 1c       	adc	r11, r5
      e6:	b5 1c       	adc	r11, r5
      e8:	b5 1c       	adc	r11, r5
      ea:	ec 1c       	adc	r14, r12
      ec:	f4 1c       	adc	r15, r4
      ee:	09 1d       	adc	r16, r9
      f0:	b5 1c       	adc	r11, r5
      f2:	b5 1c       	adc	r11, r5
      f4:	ec 1c       	adc	r14, r12
      f6:	f4 1c       	adc	r15, r4
      f8:	b6 29       	or	r27, r6
      fa:	26 2a       	or	r2, r22
      fc:	26 2a       	or	r2, r22
      fe:	26 2a       	or	r2, r22
     100:	26 2a       	or	r2, r22
     102:	26 2a       	or	r2, r22
     104:	26 2a       	or	r2, r22
     106:	26 2a       	or	r2, r22
     108:	b6 29       	or	r27, r6
     10a:	26 2a       	or	r2, r22
     10c:	26 2a       	or	r2, r22
     10e:	26 2a       	or	r2, r22
     110:	26 2a       	or	r2, r22
     112:	26 2a       	or	r2, r22
     114:	26 2a       	or	r2, r22
     116:	26 2a       	or	r2, r22
     118:	b8 29       	or	r27, r8
     11a:	26 2a       	or	r2, r22
     11c:	26 2a       	or	r2, r22
     11e:	26 2a       	or	r2, r22
     120:	26 2a       	or	r2, r22
     122:	26 2a       	or	r2, r22
     124:	26 2a       	or	r2, r22
     126:	26 2a       	or	r2, r22
     128:	26 2a       	or	r2, r22
     12a:	26 2a       	or	r2, r22
     12c:	26 2a       	or	r2, r22
     12e:	26 2a       	or	r2, r22
     130:	26 2a       	or	r2, r22
     132:	26 2a       	or	r2, r22
     134:	26 2a       	or	r2, r22
     136:	26 2a       	or	r2, r22
     138:	b8 29       	or	r27, r8
     13a:	26 2a       	or	r2, r22
     13c:	26 2a       	or	r2, r22
     13e:	26 2a       	or	r2, r22
     140:	26 2a       	or	r2, r22
     142:	26 2a       	or	r2, r22
     144:	26 2a       	or	r2, r22
     146:	26 2a       	or	r2, r22
     148:	26 2a       	or	r2, r22
     14a:	26 2a       	or	r2, r22
     14c:	26 2a       	or	r2, r22
     14e:	26 2a       	or	r2, r22
     150:	26 2a       	or	r2, r22
     152:	26 2a       	or	r2, r22
     154:	26 2a       	or	r2, r22
     156:	26 2a       	or	r2, r22
     158:	22 2a       	or	r2, r18
     15a:	26 2a       	or	r2, r22
     15c:	26 2a       	or	r2, r22
     15e:	26 2a       	or	r2, r22
     160:	26 2a       	or	r2, r22
     162:	26 2a       	or	r2, r22
     164:	26 2a       	or	r2, r22
     166:	26 2a       	or	r2, r22
     168:	ed 29       	or	r30, r13
     16a:	26 2a       	or	r2, r22
     16c:	26 2a       	or	r2, r22
     16e:	26 2a       	or	r2, r22
     170:	26 2a       	or	r2, r22
     172:	26 2a       	or	r2, r22
     174:	26 2a       	or	r2, r22
     176:	26 2a       	or	r2, r22
     178:	26 2a       	or	r2, r22
     17a:	26 2a       	or	r2, r22
     17c:	26 2a       	or	r2, r22
     17e:	26 2a       	or	r2, r22
     180:	26 2a       	or	r2, r22
     182:	26 2a       	or	r2, r22
     184:	26 2a       	or	r2, r22
     186:	26 2a       	or	r2, r22
     188:	e1 29       	or	r30, r1
     18a:	26 2a       	or	r2, r22
     18c:	26 2a       	or	r2, r22
     18e:	26 2a       	or	r2, r22
     190:	26 2a       	or	r2, r22
     192:	26 2a       	or	r2, r22
     194:	26 2a       	or	r2, r22
     196:	26 2a       	or	r2, r22
     198:	05 2a       	or	r0, r21

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <prvCheckTasksWaitingTermination>
     2a0:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	83 d6       	rcall	.+3334   	; 0xfb0 <vPortYield>
     2aa:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 32 1a 	call	0x3464	; 0x3464 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 27 1c 	call	0x384e	; 0x384e <prvProcessTimerOrBlockTask>
     2c8:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	17 e0       	ldi	r17, 0x07	; 7
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ea e9       	ldi	r30, 0x9A	; 154
     2e6:	f4 e6       	ldi	r31, 0x64	; 100
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 30       	cpi	r26, 0x02	; 2
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	23 e1       	ldi	r18, 0x13	; 19
     2fa:	a2 e0       	ldi	r26, 0x02	; 2
     2fc:	b7 e0       	ldi	r27, 0x07	; 7
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a5 30       	cpi	r26, 0x05	; 5
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <main>
     30c:	0c 94 4b 32 	jmp	0x6496	; 0x6496 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <CO2_callback>:
	uint16_t CO2;
	} CO2Handler;
	
	
void CO2_callback(uint16_t callback){
	ppm = callback;
     312:	90 93 ea 12 	sts	0x12EA, r25	; 0x8012ea <ppm+0x1>
     316:	80 93 e9 12 	sts	0x12E9, r24	; 0x8012e9 <ppm>
     31a:	08 95       	ret

0000031c <startReadingCO2>:

uint16_t getCO2(CO2_t self){
	return self->CO2;
}

void startReadingCO2(void* self) {
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <startReadingCO2+0x6>
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32a:	0e 94 48 11 	call	0x2290	; 0x2290 <xTaskGetTickCount>
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     336:	40 ee       	ldi	r20, 0xE0	; 224
     338:	53 e0       	ldi	r21, 0x03	; 3
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskDelayUntil>
		//need to set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     346:	40 91 eb 12 	lds	r20, 0x12EB	; 0x8012eb <ready_bit>
     34a:	50 91 ec 12 	lds	r21, 0x12EC	; 0x8012ec <ready_bit+0x1>
     34e:	60 91 ed 12 	lds	r22, 0x12ED	; 0x8012ed <ready_bit+0x2>
     352:	70 91 ee 12 	lds	r23, 0x12EE	; 0x8012ee <ready_bit+0x3>
     356:	cc 24       	eor	r12, r12
     358:	ca 94       	dec	r12
     35a:	dc 2c       	mov	r13, r12
     35c:	76 01       	movw	r14, r12
     35e:	01 e0       	ldi	r16, 0x01	; 1
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	80 91 ef 12 	lds	r24, 0x12EF	; 0x8012ef <group_start>
     366:	90 91 f0 12 	lds	r25, 0x12F0	; 0x8012f0 <group_start+0x1>
     36a:	cd d2       	rcall	.+1434   	; 0x906 <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		rc = mh_z19_takeMeassuring();
     36c:	0e 94 a2 24 	call	0x4944	; 0x4944 <mh_z19_takeMeassuring>
     370:	80 93 e8 12 	sts	0x12E8, r24	; 0x8012e8 <rc>
		if (rc != MHZ19_OK)
     374:	81 11       	cpse	r24, r1
     376:	df cf       	rjmp	.-66     	; 0x336 <startReadingCO2+0x1a>
		{
			// Something went wrong
		} else {
			((CO2_t)self)->CO2 = ppm;
     378:	80 91 e9 12 	lds	r24, 0x12E9	; 0x8012e9 <ppm>
     37c:	90 91 ea 12 	lds	r25, 0x12EA	; 0x8012ea <ppm+0x1>
     380:	f5 01       	movw	r30, r10
     382:	91 83       	std	Z+1, r25	; 0x01
     384:	80 83       	st	Z, r24
			printf("CO2 %d", ppm);
     386:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <ppm+0x1>
     38a:	8f 93       	push	r24
     38c:	80 91 e9 12 	lds	r24, 0x12E9	; 0x8012e9 <ppm>
     390:	8f 93       	push	r24
     392:	8f e6       	ldi	r24, 0x6F	; 111
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	9f 93       	push	r25
     398:	8f 93       	push	r24
     39a:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	c7 cf       	rjmp	.-114    	; 0x336 <startReadingCO2+0x1a>

000003a8 <getCO2>:
	return new_measure;
}

uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	08 95       	ret

000003b0 <CO2_handler_init>:
		}
		
	}
}

void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	08 2f       	mov	r16, r24
     3bc:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     3be:	40 91 eb 12 	lds	r20, 0x12EB	; 0x8012eb <ready_bit>
     3c2:	50 91 ec 12 	lds	r21, 0x12EC	; 0x8012ec <ready_bit+0x1>
     3c6:	60 91 ed 12 	lds	r22, 0x12ED	; 0x8012ed <ready_bit+0x2>
     3ca:	70 91 ee 12 	lds	r23, 0x12EE	; 0x8012ee <ready_bit+0x3>
     3ce:	80 91 ef 12 	lds	r24, 0x12EF	; 0x8012ef <group_start>
     3d2:	90 91 f0 12 	lds	r25, 0x12F0	; 0x8012f0 <group_start+0x1>
     3d6:	37 d3       	rcall	.+1646   	; 0xa46 <xEventGroupSetBits>

	xTaskCreate(
     3d8:	e1 2c       	mov	r14, r1
     3da:	f1 2c       	mov	r15, r1
     3dc:	9e 01       	movw	r18, r28
     3de:	44 e2       	ldi	r20, 0x24	; 36
     3e0:	51 e0       	ldi	r21, 0x01	; 1
     3e2:	66 e7       	ldi	r22, 0x76	; 118
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	8e e8       	ldi	r24, 0x8E	; 142
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
	puts("CO2 initialized");
     3ee:	8e e7       	ldi	r24, 0x7E	; 126
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	0e 94 8f 31 	call	0x631e	; 0x631e <puts>
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	08 95       	ret

00000402 <createCO2>:
void CO2_callback(uint16_t callback){
	ppm = callback;
}

CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	8c 01       	movw	r16, r24
     418:	5b 01       	movw	r10, r22
     41a:	69 01       	movw	r12, r18
     41c:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <malloc>
     426:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     428:	89 2b       	or	r24, r25
     42a:	d9 f0       	breq	.+54     	; 0x462 <createCO2+0x60>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	18 82       	st	Y, r1
	
	group_start = taskBits;
     430:	b0 92 f0 12 	sts	0x12F0, r11	; 0x8012f0 <group_start+0x1>
     434:	a0 92 ef 12 	sts	0x12EF, r10	; 0x8012ef <group_start>
	ready_bit = bit;
     438:	c0 92 eb 12 	sts	0x12EB, r12	; 0x8012eb <ready_bit>
     43c:	d0 92 ec 12 	sts	0x12EC, r13	; 0x8012ec <ready_bit+0x1>
     440:	e0 92 ed 12 	sts	0x12ED, r14	; 0x8012ed <ready_bit+0x2>
     444:	f0 92 ee 12 	sts	0x12EE, r15	; 0x8012ee <ready_bit+0x3>
	
	//maybe wait time here?
	mh_z19_initialise(ser_USART3);
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	0e 94 78 24 	call	0x48f0	; 0x48f0 <mh_z19_initialise>
	
	mh_z19_injectCallBack(CO2_callback);
     44e:	89 e8       	ldi	r24, 0x89	; 137
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 9d 24 	call	0x493a	; 0x493a <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     456:	be 01       	movw	r22, r28
     458:	c8 01       	movw	r24, r16
     45a:	aa df       	rcall	.-172    	; 0x3b0 <CO2_handler_init>
	return new_measure;
     45c:	8c 2f       	mov	r24, r28
     45e:	9d 2f       	mov	r25, r29
     460:	02 c0       	rjmp	.+4      	; 0x466 <createCO2+0x64>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
	
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	08 95       	ret

0000047c <measureTemp>:
		
		measureTemp((Temperature_t) self);
	}
}

void measureTemp(Temperature_t self){
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     482:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <hih8120_getTemperature>
     486:	68 83       	st	Y, r22
     488:	79 83       	std	Y+1, r23	; 0x01
     48a:	8a 83       	std	Y+2, r24	; 0x02
     48c:	9b 83       	std	Y+3, r25	; 0x03
	//printf("%f \n", self->temperature);
}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <startReading>:
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}

void startReading(void* self){
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	00 d0       	rcall	.+0      	; 0x49a <startReading+0x6>
     49a:	1f 92       	push	r1
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     4a2:	0e 94 48 11 	call	0x2290	; 0x2290 <xTaskGetTickCount>
     4a6:	69 83       	std	Y+1, r22	; 0x01
     4a8:	7a 83       	std	Y+2, r23	; 0x02
     4aa:	8b 83       	std	Y+3, r24	; 0x03
     4ac:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     4ae:	42 ea       	ldi	r20, 0xA2	; 162
     4b0:	53 e0       	ldi	r21, 0x03	; 3
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	ce 01       	movw	r24, r28
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     4be:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <hih8120_wakeup>
     4c2:	88 23       	and	r24, r24
     4c4:	21 f0       	breq	.+8      	; 0x4ce <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     4c6:	8e e8       	ldi	r24, 0x8E	; 142
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 8f 31 	call	0x631e	; 0x631e <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     4ce:	40 91 eb 12 	lds	r20, 0x12EB	; 0x8012eb <ready_bit>
     4d2:	50 91 ec 12 	lds	r21, 0x12EC	; 0x8012ec <ready_bit+0x1>
     4d6:	60 91 ed 12 	lds	r22, 0x12ED	; 0x8012ed <ready_bit+0x2>
     4da:	70 91 ee 12 	lds	r23, 0x12EE	; 0x8012ee <ready_bit+0x3>
     4de:	cc 24       	eor	r12, r12
     4e0:	ca 94       	dec	r12
     4e2:	dc 2c       	mov	r13, r12
     4e4:	76 01       	movw	r14, r12
     4e6:	01 e0       	ldi	r16, 0x01	; 1
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	80 91 ef 12 	lds	r24, 0x12EF	; 0x8012ef <group_start>
     4ee:	90 91 f0 12 	lds	r25, 0x12F0	; 0x8012f0 <group_start+0x1>
     4f2:	09 d2       	rcall	.+1042   	; 0x906 <xEventGroupWaitBits>
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     4f4:	64 e0       	ldi	r22, 0x04	; 4
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 c3 13 	call	0x2786	; 0x2786 <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     500:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	cb 01       	movw	r24, r22
     50a:	0e 94 c3 13 	call	0x2786	; 0x2786 <vTaskDelay>
		
		measureTemp((Temperature_t) self);
     50e:	c5 01       	movw	r24, r10
     510:	b5 df       	rcall	.-150    	; 0x47c <measureTemp>
	}
     512:	cd cf       	rjmp	.-102    	; 0x4ae <startReading+0x1a>

00000514 <temperature_handler_init>:
void measureTemp(Temperature_t self){
	self->temperature = hih8120_getTemperature();
	//printf("%f \n", self->temperature);
}

void temperature_handler_init(Temperature_t self, uint16_t priority){
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ec 01       	movw	r28, r24
     520:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     522:	40 91 eb 12 	lds	r20, 0x12EB	; 0x8012eb <ready_bit>
     526:	50 91 ec 12 	lds	r21, 0x12EC	; 0x8012ec <ready_bit+0x1>
     52a:	60 91 ed 12 	lds	r22, 0x12ED	; 0x8012ed <ready_bit+0x2>
     52e:	70 91 ee 12 	lds	r23, 0x12EE	; 0x8012ee <ready_bit+0x3>
     532:	80 91 ef 12 	lds	r24, 0x12EF	; 0x8012ef <group_start>
     536:	90 91 f0 12 	lds	r25, 0x12F0	; 0x8012f0 <group_start+0x1>
     53a:	85 d2       	rcall	.+1290   	; 0xa46 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     53c:	e1 2c       	mov	r14, r1
     53e:	f1 2c       	mov	r15, r1
     540:	9e 01       	movw	r18, r28
     542:	40 ec       	ldi	r20, 0xC0	; 192
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	68 ea       	ldi	r22, 0xA8	; 168
     548:	72 e0       	ldi	r23, 0x02	; 2
     54a:	8a e4       	ldi	r24, 0x4A	; 74
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskCreate>
}
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <createTemp>:
typedef struct TemperatureHandler{
	float temperature;
	} TemperatureHandler;
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	8c 01       	movw	r16, r24
     574:	5b 01       	movw	r10, r22
     576:	69 01       	movw	r12, r18
     578:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <malloc>
     582:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     584:	89 2b       	or	r24, r25
     586:	f1 f0       	breq	.+60     	; 0x5c4 <createTemp+0x66>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     588:	18 82       	st	Y, r1
     58a:	19 82       	std	Y+1, r1	; 0x01
     58c:	1a 82       	std	Y+2, r1	; 0x02
     58e:	1b 82       	std	Y+3, r1	; 0x03
	
	group_start = taskBits;
     590:	b0 92 f0 12 	sts	0x12F0, r11	; 0x8012f0 <group_start+0x1>
     594:	a0 92 ef 12 	sts	0x12EF, r10	; 0x8012ef <group_start>
	ready_bit = bit;
     598:	c0 92 eb 12 	sts	0x12EB, r12	; 0x8012eb <ready_bit>
     59c:	d0 92 ec 12 	sts	0x12EC, r13	; 0x8012ec <ready_bit+0x1>
     5a0:	e0 92 ed 12 	sts	0x12ED, r14	; 0x8012ed <ready_bit+0x2>
     5a4:	f0 92 ee 12 	sts	0x12EE, r15	; 0x8012ee <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     5a8:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <hih8120_initialise>
     5ac:	81 11       	cpse	r24, r1
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <createTemp+0x5a>
	{
		puts("Temp sensor initialized.");
     5b0:	89 eb       	ldi	r24, 0xB9	; 185
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 8f 31 	call	0x631e	; 0x631e <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     5b8:	b8 01       	movw	r22, r16
     5ba:	ce 01       	movw	r24, r28
     5bc:	ab df       	rcall	.-170    	; 0x514 <temperature_handler_init>
	return new_measure;
     5be:	8c 2f       	mov	r24, r28
     5c0:	9d 2f       	mov	r25, r29
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <createTemp+0x6a>
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	08 95       	ret

000005de <getTemperature>:
	xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
}

float getTemperature(Temperature_t self){
	return self->temperature;
     5de:	fc 01       	movw	r30, r24
     5e0:	60 81       	ld	r22, Z
     5e2:	71 81       	ldd	r23, Z+1	; 0x01
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	93 81       	ldd	r25, Z+3	; 0x03
     5e8:	08 95       	ret

000005ea <_lora_setup>:
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	64 97       	sbiw	r28, 0x14	; 20
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	0e 94 1f 21 	call	0x423e	; 0x423e <lora_driver_rn2483FactoryReset>
     606:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	82 ed       	ldi	r24, 0xD2	; 210
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     61a:	0e 94 9d 22 	call	0x453a	; 0x453a <lora_driver_configureToEu868>
     61e:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	85 ee       	ldi	r24, 0xE5	; 229
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	9f 93       	push	r25
     62c:	8f 93       	push	r24
     62e:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     632:	8e 01       	movw	r16, r28
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255
     638:	c8 01       	movw	r24, r16
     63a:	0e 94 31 21 	call	0x4262	; 0x4262 <lora_driver_getRn2483Hweui>
     63e:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     642:	1f 93       	push	r17
     644:	0f 93       	push	r16
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	8e ef       	ldi	r24, 0xFE	; 254
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
     652:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     656:	c8 01       	movw	r24, r16
     658:	0e 94 4d 21 	call	0x429a	; 0x429a <lora_driver_setDeviceIdentifier>
     65c:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	1f 93       	push	r17
     666:	0f 93       	push	r16
     668:	82 e1       	ldi	r24, 0x12	; 18
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     674:	a8 01       	movw	r20, r16
     676:	67 e2       	ldi	r22, 0x27	; 39
     678:	73 e0       	ldi	r23, 0x03	; 3
     67a:	88 e4       	ldi	r24, 0x48	; 72
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <lora_driver_setOtaaIdentity>
     682:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	1f 93       	push	r17
     68c:	0f 93       	push	r16
     68e:	87 e2       	ldi	r24, 0x27	; 39
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	88 e4       	ldi	r24, 0x48	; 72
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	89 e5       	ldi	r24, 0x59	; 89
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     6aa:	0e 94 80 21 	call	0x4300	; 0x4300 <lora_driver_saveMac>
     6ae:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	8f e8       	ldi	r24, 0x8F	; 143
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	9f 93       	push	r25
     6bc:	8f 93       	push	r24
     6be:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <lora_driver_setAdaptiveDataRate>
     6d2:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	8e e9       	ldi	r24, 0x9E	; 158
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     6e6:	84 ef       	ldi	r24, 0xF4	; 244
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 85 22 	call	0x450a	; 0x450a <lora_driver_setReceiveDelay>
     6ee:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	8f 93       	push	r24
     6fa:	84 ef       	ldi	r24, 0xF4	; 244
     6fc:	8f 93       	push	r24
     6fe:	8f eb       	ldi	r24, 0xBF	; 191
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	1a e0       	ldi	r17, 0x0A	; 10
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 86 21 	call	0x430c	; 0x430c <lora_driver_join>
     71c:	08 2f       	mov	r16, r24
     71e:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	1f 92       	push	r1
     728:	1f 93       	push	r17
     72a:	8f ed       	ldi	r24, 0xDF	; 223
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	08 30       	cpi	r16, 0x08	; 8
     744:	41 f0       	breq	.+16     	; 0x756 <_lora_setup+0x16c>
     746:	66 e3       	ldi	r22, 0x36	; 54
     748:	71 e0       	ldi	r23, 0x01	; 1
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 c3 13 	call	0x2786	; 0x2786 <vTaskDelay>
     752:	11 50       	subi	r17, 0x01	; 1
     754:	01 f7       	brne	.-64     	; 0x716 <_lora_setup+0x12c>
     756:	08 30       	cpi	r16, 0x08	; 8
     758:	11 f0       	breq	.+4      	; 0x75e <_lora_setup+0x174>
     75a:	2a d4       	rcall	.+2132   	; 0xfb0 <vPortYield>
     75c:	fe cf       	rjmp	.-4      	; 0x75a <_lora_setup+0x170>
     75e:	64 96       	adiw	r28, 0x14	; 20
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <lora_handler_task>:
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	28 97       	sbiw	r28, 0x08	; 8
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	0e 94 11 21 	call	0x4222	; 0x4222 <lora_driver_resetRn2483>
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 c3 13 	call	0x2786	; 0x2786 <vTaskDelay>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 11 21 	call	0x4222	; 0x4222 <lora_driver_resetRn2483>
     7a0:	66 e9       	ldi	r22, 0x96	; 150
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 c3 13 	call	0x2786	; 0x2786 <vTaskDelay>
     7ac:	0e 94 ca 20 	call	0x4194	; 0x4194 <lora_driver_flushBuffers>
     7b0:	1c df       	rcall	.-456    	; 0x5ea <_lora_setup>
     7b2:	0e 94 48 11 	call	0x2290	; 0x2290 <xTaskGetTickCount>
     7b6:	69 83       	std	Y+1, r22	; 0x01
     7b8:	7a 83       	std	Y+2, r23	; 0x02
     7ba:	8b 83       	std	Y+3, r24	; 0x03
     7bc:	9c 83       	std	Y+4, r25	; 0x04
     7be:	4c e6       	ldi	r20, 0x6C	; 108
     7c0:	52 e0       	ldi	r21, 0x02	; 2
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	0e 94 5e 13 	call	0x26bc	; 0x26bc <xTaskDelayUntil>
     7ce:	02 e0       	ldi	r16, 0x02	; 2
     7d0:	17 e0       	ldi	r17, 0x07	; 7
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	f8 01       	movw	r30, r16
     7d6:	81 83       	std	Z+1, r24	; 0x01
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 83       	st	Z, r24
     7dc:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <temperature>
     7e0:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <temperature+0x1>
     7e4:	fc de       	rcall	.-520    	; 0x5de <getTemperature>
     7e6:	1d 82       	std	Y+5, r1	; 0x05
     7e8:	1e 82       	std	Y+6, r1	; 0x06
     7ea:	1f 82       	std	Y+7, r1	; 0x07
     7ec:	18 86       	std	Y+8, r1	; 0x08
     7ee:	ae 01       	movw	r20, r28
     7f0:	4b 5f       	subi	r20, 0xFB	; 251
     7f2:	5f 4f       	sbci	r21, 0xFF	; 255
     7f4:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <modf>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	48 ec       	ldi	r20, 0xC8	; 200
     7fe:	52 e4       	ldi	r21, 0x42	; 66
     800:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__mulsf3>
     804:	6b 01       	movw	r12, r22
     806:	7c 01       	movw	r14, r24
     808:	6d 81       	ldd	r22, Y+5	; 0x05
     80a:	7e 81       	ldd	r23, Y+6	; 0x06
     80c:	8f 81       	ldd	r24, Y+7	; 0x07
     80e:	98 85       	ldd	r25, Y+8	; 0x08
     810:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__fixsfsi>
     814:	f8 01       	movw	r30, r16
     816:	62 83       	std	Z+2, r22	; 0x02
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__fixsfsi>
     820:	f8 01       	movw	r30, r16
     822:	63 83       	std	Z+3, r22	; 0x03
     824:	80 91 f1 12 	lds	r24, 0x12F1	; 0x8012f1 <co2>
     828:	90 91 f2 12 	lds	r25, 0x12F2	; 0x8012f2 <co2+0x1>
     82c:	bd dd       	rcall	.-1158   	; 0x3a8 <getCO2>
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	8f ef       	ldi	r24, 0xFF	; 255
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	9f 93       	push	r25
     838:	8f 93       	push	r24
     83a:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     83e:	b8 01       	movw	r22, r16
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 af 21 	call	0x435e	; 0x435e <lora_driver_sendUploadMessage>
     846:	0e 94 9c 23 	call	0x4738	; 0x4738 <lora_driver_mapReturnCodeToText>
     84a:	9f 93       	push	r25
     84c:	8f 93       	push	r24
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	94 e0       	ldi	r25, 0x04	; 4
     852:	9f 93       	push	r25
     854:	8f 93       	push	r24
     856:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <printf>
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	ac cf       	rjmp	.-168    	; 0x7be <lora_handler_task+0x4a>

00000866 <lora_handler_initialize>:
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	70 93 f4 12 	sts	0x12F4, r23	; 0x8012f4 <temperature+0x1>
     870:	60 93 f3 12 	sts	0x12F3, r22	; 0x8012f3 <temperature>
     874:	50 93 f2 12 	sts	0x12F2, r21	; 0x8012f2 <co2+0x1>
     878:	40 93 f1 12 	sts	0x12F1, r20	; 0x8012f1 <co2>
     87c:	e1 2c       	mov	r14, r1
     87e:	f1 2c       	mov	r15, r1
     880:	08 2f       	mov	r16, r24
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	48 e8       	ldi	r20, 0x88	; 136
     888:	51 e0       	ldi	r21, 0x01	; 1
     88a:	6c e1       	ldi	r22, 0x1C	; 28
     88c:	74 e0       	ldi	r23, 0x04	; 4
     88e:	8a eb       	ldi	r24, 0xBA	; 186
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskCreate>
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	08 95       	ret

0000089e <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     89e:	0f 93       	push	r16
     8a0:	01 11       	cpse	r16, r1
     8a2:	0c c0       	rjmp	.+24     	; 0x8bc <prvTestWaitCondition+0x1e>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	82 23       	and	r24, r18
     8aa:	93 23       	and	r25, r19
     8ac:	a4 23       	and	r26, r20
     8ae:	b5 23       	and	r27, r21
     8b0:	89 2b       	or	r24, r25
     8b2:	8a 2b       	or	r24, r26
     8b4:	8b 2b       	or	r24, r27
     8b6:	79 f4       	brne	.+30     	; 0x8d6 <prvTestWaitCondition+0x38>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	10 c0       	rjmp	.+32     	; 0x8dc <prvTestWaitCondition+0x3e>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	82 23       	and	r24, r18
     8c2:	93 23       	and	r25, r19
     8c4:	a4 23       	and	r26, r20
     8c6:	b5 23       	and	r27, r21
     8c8:	28 17       	cp	r18, r24
     8ca:	39 07       	cpc	r19, r25
     8cc:	4a 07       	cpc	r20, r26
     8ce:	5b 07       	cpc	r21, r27
     8d0:	21 f0       	breq	.+8      	; 0x8da <prvTestWaitCondition+0x3c>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	03 c0       	rjmp	.+6      	; 0x8dc <prvTestWaitCondition+0x3e>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <prvTestWaitCondition+0x3e>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <xEventGroupCreate>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	8f e0       	ldi	r24, 0x0F	; 15
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	af d1       	rcall	.+862    	; 0xc48 <pvPortMalloc>
     8ea:	ec 01       	movw	r28, r24
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	39 f0       	breq	.+14     	; 0x8fe <xEventGroupCreate+0x1e>
     8f0:	fc 01       	movw	r30, r24
     8f2:	11 92       	st	Z+, r1
     8f4:	11 92       	st	Z+, r1
     8f6:	11 92       	st	Z+, r1
     8f8:	11 92       	st	Z+, r1
     8fa:	cf 01       	movw	r24, r30
     8fc:	8b d2       	rcall	.+1302   	; 0xe14 <vListInitialise>
     8fe:	ce 01       	movw	r24, r28
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <xEventGroupWaitBits>:
     906:	2f 92       	push	r2
     908:	3f 92       	push	r3
     90a:	4f 92       	push	r4
     90c:	5f 92       	push	r5
     90e:	6f 92       	push	r6
     910:	7f 92       	push	r7
     912:	8f 92       	push	r8
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	bf 92       	push	r11
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
     92c:	4a 01       	movw	r8, r20
     92e:	5b 01       	movw	r10, r22
     930:	62 2e       	mov	r6, r18
     932:	70 2e       	mov	r7, r16
     934:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskSuspendAll>
     938:	28 80       	ld	r2, Y
     93a:	39 80       	ldd	r3, Y+1	; 0x01
     93c:	4a 80       	ldd	r4, Y+2	; 0x02
     93e:	5b 80       	ldd	r5, Y+3	; 0x03
     940:	a5 01       	movw	r20, r10
     942:	94 01       	movw	r18, r8
     944:	c2 01       	movw	r24, r4
     946:	b1 01       	movw	r22, r2
     948:	aa df       	rcall	.-172    	; 0x89e <prvTestWaitCondition>
     94a:	88 23       	and	r24, r24
     94c:	a1 f0       	breq	.+40     	; 0x976 <xEventGroupWaitBits+0x70>
     94e:	66 20       	and	r6, r6
     950:	89 f1       	breq	.+98     	; 0x9b4 <xEventGroupWaitBits+0xae>
     952:	d5 01       	movw	r26, r10
     954:	c4 01       	movw	r24, r8
     956:	80 95       	com	r24
     958:	90 95       	com	r25
     95a:	a0 95       	com	r26
     95c:	b0 95       	com	r27
     95e:	82 21       	and	r24, r2
     960:	93 21       	and	r25, r3
     962:	a4 21       	and	r26, r4
     964:	b5 21       	and	r27, r5
     966:	88 83       	st	Y, r24
     968:	99 83       	std	Y+1, r25	; 0x01
     96a:	aa 83       	std	Y+2, r26	; 0x02
     96c:	bb 83       	std	Y+3, r27	; 0x03
     96e:	c1 2c       	mov	r12, r1
     970:	d1 2c       	mov	r13, r1
     972:	76 01       	movw	r14, r12
     974:	22 c0       	rjmp	.+68     	; 0x9ba <xEventGroupWaitBits+0xb4>
     976:	c1 14       	cp	r12, r1
     978:	d1 04       	cpc	r13, r1
     97a:	e1 04       	cpc	r14, r1
     97c:	f1 04       	cpc	r15, r1
     97e:	e9 f0       	breq	.+58     	; 0x9ba <xEventGroupWaitBits+0xb4>
     980:	61 10       	cpse	r6, r1
     982:	04 c0       	rjmp	.+8      	; 0x98c <xEventGroupWaitBits+0x86>
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	ba 01       	movw	r22, r20
     98a:	04 c0       	rjmp	.+8      	; 0x994 <xEventGroupWaitBits+0x8e>
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	71 e0       	ldi	r23, 0x01	; 1
     994:	71 10       	cpse	r7, r1
     996:	74 60       	ori	r23, 0x04	; 4
     998:	48 29       	or	r20, r8
     99a:	59 29       	or	r21, r9
     99c:	6a 29       	or	r22, r10
     99e:	7b 29       	or	r23, r11
     9a0:	97 01       	movw	r18, r14
     9a2:	86 01       	movw	r16, r12
     9a4:	ce 01       	movw	r24, r28
     9a6:	04 96       	adiw	r24, 0x04	; 4
     9a8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <vTaskPlaceOnUnorderedEventList>
     9ac:	21 2c       	mov	r2, r1
     9ae:	31 2c       	mov	r3, r1
     9b0:	21 01       	movw	r4, r2
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <xEventGroupWaitBits+0xb4>
     9b4:	c1 2c       	mov	r12, r1
     9b6:	d1 2c       	mov	r13, r1
     9b8:	76 01       	movw	r14, r12
     9ba:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
     9be:	cd 28       	or	r12, r13
     9c0:	ce 28       	or	r12, r14
     9c2:	cf 28       	or	r12, r15
     9c4:	59 f1       	breq	.+86     	; 0xa1c <xEventGroupWaitBits+0x116>
     9c6:	81 11       	cpse	r24, r1
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <xEventGroupWaitBits+0xc6>
     9ca:	f2 d2       	rcall	.+1508   	; 0xfb0 <vPortYield>
     9cc:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <uxTaskResetEventItemValue>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
     9d4:	91 fd       	sbrc	r25, 1
     9d6:	1f c0       	rjmp	.+62     	; 0xa16 <xEventGroupWaitBits+0x110>
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	0f 92       	push	r0
     9de:	c8 80       	ld	r12, Y
     9e0:	d9 80       	ldd	r13, Y+1	; 0x01
     9e2:	ea 80       	ldd	r14, Y+2	; 0x02
     9e4:	fb 80       	ldd	r15, Y+3	; 0x03
     9e6:	07 2d       	mov	r16, r7
     9e8:	a5 01       	movw	r20, r10
     9ea:	94 01       	movw	r18, r8
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	56 df       	rcall	.-340    	; 0x89e <prvTestWaitCondition>
     9f2:	88 23       	and	r24, r24
     9f4:	71 f0       	breq	.+28     	; 0xa12 <xEventGroupWaitBits+0x10c>
     9f6:	66 20       	and	r6, r6
     9f8:	61 f0       	breq	.+24     	; 0xa12 <xEventGroupWaitBits+0x10c>
     9fa:	80 94       	com	r8
     9fc:	90 94       	com	r9
     9fe:	a0 94       	com	r10
     a00:	b0 94       	com	r11
     a02:	8c 20       	and	r8, r12
     a04:	9d 20       	and	r9, r13
     a06:	ae 20       	and	r10, r14
     a08:	bf 20       	and	r11, r15
     a0a:	88 82       	st	Y, r8
     a0c:	99 82       	std	Y+1, r9	; 0x01
     a0e:	aa 82       	std	Y+2, r10	; 0x02
     a10:	bb 82       	std	Y+3, r11	; 0x03
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	16 01       	movw	r2, r12
     a18:	27 01       	movw	r4, r14
     a1a:	55 24       	eor	r5, r5
     a1c:	c2 01       	movw	r24, r4
     a1e:	b1 01       	movw	r22, r2
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
     a30:	bf 90       	pop	r11
     a32:	af 90       	pop	r10
     a34:	9f 90       	pop	r9
     a36:	8f 90       	pop	r8
     a38:	7f 90       	pop	r7
     a3a:	6f 90       	pop	r6
     a3c:	5f 90       	pop	r5
     a3e:	4f 90       	pop	r4
     a40:	3f 90       	pop	r3
     a42:	2f 90       	pop	r2
     a44:	08 95       	ret

00000a46 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     a46:	4f 92       	push	r4
     a48:	5f 92       	push	r5
     a4a:	6f 92       	push	r6
     a4c:	7f 92       	push	r7
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	6a 01       	movw	r12, r20
     a66:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a68:	8c 01       	movw	r16, r24
     a6a:	09 5f       	subi	r16, 0xF9	; 249
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     a6e:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     a72:	eb 85       	ldd	r30, Y+11	; 0x0b
     a74:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     a76:	88 81       	ld	r24, Y
     a78:	99 81       	ldd	r25, Y+1	; 0x01
     a7a:	aa 81       	ldd	r26, Y+2	; 0x02
     a7c:	bb 81       	ldd	r27, Y+3	; 0x03
     a7e:	c8 2a       	or	r12, r24
     a80:	d9 2a       	or	r13, r25
     a82:	ea 2a       	or	r14, r26
     a84:	fb 2a       	or	r15, r27
     a86:	c8 82       	st	Y, r12
     a88:	d9 82       	std	Y+1, r13	; 0x01
     a8a:	ea 82       	std	Y+2, r14	; 0x02
     a8c:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     a8e:	c1 2c       	mov	r12, r1
     a90:	d1 2c       	mov	r13, r1
     a92:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     a94:	3d c0       	rjmp	.+122    	; 0xb10 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     a96:	a4 80       	ldd	r10, Z+4	; 0x04
     a98:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     a9a:	80 81       	ld	r24, Z
     a9c:	91 81       	ldd	r25, Z+1	; 0x01
     a9e:	a2 81       	ldd	r26, Z+2	; 0x02
     aa0:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     aa2:	ac 01       	movw	r20, r24
     aa4:	bd 01       	movw	r22, r26
     aa6:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     aa8:	b2 fd       	sbrc	r27, 2
     aaa:	0e c0       	rjmp	.+28     	; 0xac8 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     aac:	48 80       	ld	r4, Y
     aae:	59 80       	ldd	r5, Y+1	; 0x01
     ab0:	6a 80       	ldd	r6, Y+2	; 0x02
     ab2:	7b 80       	ldd	r7, Y+3	; 0x03
     ab4:	44 22       	and	r4, r20
     ab6:	55 22       	and	r5, r21
     ab8:	66 22       	and	r6, r22
     aba:	77 22       	and	r7, r23
     abc:	45 28       	or	r4, r5
     abe:	46 28       	or	r4, r6
     ac0:	47 28       	or	r4, r7
     ac2:	89 f4       	brne	.+34     	; 0xae6 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	12 c0       	rjmp	.+36     	; 0xaec <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     ac8:	48 80       	ld	r4, Y
     aca:	59 80       	ldd	r5, Y+1	; 0x01
     acc:	6a 80       	ldd	r6, Y+2	; 0x02
     ace:	7b 80       	ldd	r7, Y+3	; 0x03
     ad0:	44 22       	and	r4, r20
     ad2:	55 22       	and	r5, r21
     ad4:	66 22       	and	r6, r22
     ad6:	77 22       	and	r7, r23
     ad8:	44 15       	cp	r20, r4
     ada:	55 05       	cpc	r21, r5
     adc:	66 05       	cpc	r22, r6
     ade:	77 05       	cpc	r23, r7
     ae0:	21 f0       	breq	.+8      	; 0xaea <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     ae6:	21 e0       	ldi	r18, 0x01	; 1
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     aea:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     aec:	22 23       	and	r18, r18
     aee:	71 f0       	breq	.+28     	; 0xb0c <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     af0:	b0 ff       	sbrs	r27, 0
     af2:	04 c0       	rjmp	.+8      	; 0xafc <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     af4:	c4 2a       	or	r12, r20
     af6:	d5 2a       	or	r13, r21
     af8:	e6 2a       	or	r14, r22
     afa:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     afc:	48 81       	ld	r20, Y
     afe:	59 81       	ldd	r21, Y+1	; 0x01
     b00:	6a 81       	ldd	r22, Y+2	; 0x02
     b02:	7b 81       	ldd	r23, Y+3	; 0x03
     b04:	72 60       	ori	r23, 0x02	; 2
     b06:	cf 01       	movw	r24, r30
     b08:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b0c:	ea 2d       	mov	r30, r10
     b0e:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b10:	e0 17       	cp	r30, r16
     b12:	f1 07       	cpc	r31, r17
     b14:	09 f0       	breq	.+2      	; 0xb18 <xEventGroupSetBits+0xd2>
     b16:	bf cf       	rjmp	.-130    	; 0xa96 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     b18:	c0 94       	com	r12
     b1a:	d0 94       	com	r13
     b1c:	e0 94       	com	r14
     b1e:	f0 94       	com	r15
     b20:	88 81       	ld	r24, Y
     b22:	99 81       	ldd	r25, Y+1	; 0x01
     b24:	aa 81       	ldd	r26, Y+2	; 0x02
     b26:	bb 81       	ldd	r27, Y+3	; 0x03
     b28:	c8 22       	and	r12, r24
     b2a:	d9 22       	and	r13, r25
     b2c:	ea 22       	and	r14, r26
     b2e:	fb 22       	and	r15, r27
     b30:	c8 82       	st	Y, r12
     b32:	d9 82       	std	Y+1, r13	; 0x01
     b34:	ea 82       	std	Y+2, r14	; 0x02
     b36:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     b38:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     b3c:	68 81       	ld	r22, Y
     b3e:	79 81       	ldd	r23, Y+1	; 0x01
     b40:	8a 81       	ldd	r24, Y+2	; 0x02
     b42:	9b 81       	ldd	r25, Y+3	; 0x03
}
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	7f 90       	pop	r7
     b5a:	6f 90       	pop	r6
     b5c:	5f 90       	pop	r5
     b5e:	4f 90       	pop	r4
     b60:	08 95       	ret

00000b62 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b62:	e4 e2       	ldi	r30, 0x24	; 36
     b64:	f7 e0       	ldi	r31, 0x07	; 7
     b66:	a8 e2       	ldi	r26, 0x28	; 40
     b68:	b7 e0       	ldi	r27, 0x07	; 7
     b6a:	b1 83       	std	Z+1, r27	; 0x01
     b6c:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     b6e:	13 82       	std	Z+3, r1	; 0x03
     b70:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     b72:	e8 ee       	ldi	r30, 0xE8	; 232
     b74:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     b76:	f0 93 23 07 	sts	0x0723, r31	; 0x800723 <pxEnd+0x1>
     b7a:	e0 93 22 07 	sts	0x0722, r30	; 0x800722 <pxEnd>
    pxEnd->xBlockSize = 0;
     b7e:	13 82       	std	Z+3, r1	; 0x03
     b80:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     b82:	11 82       	std	Z+1, r1	; 0x01
     b84:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     b86:	80 ec       	ldi	r24, 0xC0	; 192
     b88:	99 e0       	ldi	r25, 0x09	; 9
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	9c 93       	st	X, r25
     b8e:	8e 93       	st	-X, r24
     b90:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     b92:	ed 93       	st	X+, r30
     b94:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     b96:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <xMinimumEverFreeBytesRemaining+0x1>
     b9a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     b9e:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <xFreeBytesRemaining+0x1>
     ba2:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e8       	ldi	r25, 0x80	; 128
     baa:	90 93 19 07 	sts	0x0719, r25	; 0x800719 <xBlockAllocatedBit+0x1>
     bae:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <xBlockAllocatedBit>
     bb2:	08 95       	ret

00000bb4 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     bba:	a4 e2       	ldi	r26, 0x24	; 36
     bbc:	b7 e0       	ldi	r27, 0x07	; 7
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <prvInsertBlockIntoFreeList+0xe>
     bc0:	df 01       	movw	r26, r30
     bc2:	ed 91       	ld	r30, X+
     bc4:	fc 91       	ld	r31, X
     bc6:	11 97       	sbiw	r26, 0x01	; 1
     bc8:	ec 17       	cp	r30, r28
     bca:	fd 07       	cpc	r31, r29
     bcc:	c8 f3       	brcs	.-14     	; 0xbc0 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     bce:	12 96       	adiw	r26, 0x02	; 2
     bd0:	8d 91       	ld	r24, X+
     bd2:	9c 91       	ld	r25, X
     bd4:	13 97       	sbiw	r26, 0x03	; 3
     bd6:	9d 01       	movw	r18, r26
     bd8:	28 0f       	add	r18, r24
     bda:	39 1f       	adc	r19, r25
     bdc:	c2 17       	cp	r28, r18
     bde:	d3 07       	cpc	r29, r19
     be0:	49 f4       	brne	.+18     	; 0xbf4 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     be2:	2a 81       	ldd	r18, Y+2	; 0x02
     be4:	3b 81       	ldd	r19, Y+3	; 0x03
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	9c 93       	st	X, r25
     bee:	8e 93       	st	-X, r24
     bf0:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     bf2:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	9e 01       	movw	r18, r28
     bfa:	28 0f       	add	r18, r24
     bfc:	39 1f       	adc	r19, r25
     bfe:	e2 17       	cp	r30, r18
     c00:	f3 07       	cpc	r31, r19
     c02:	c1 f4       	brne	.+48     	; 0xc34 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     c04:	20 91 22 07 	lds	r18, 0x0722	; 0x800722 <pxEnd>
     c08:	30 91 23 07 	lds	r19, 0x0723	; 0x800723 <pxEnd+0x1>
     c0c:	e2 17       	cp	r30, r18
     c0e:	f3 07       	cpc	r31, r19
     c10:	71 f0       	breq	.+28     	; 0xc2e <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c12:	22 81       	ldd	r18, Z+2	; 0x02
     c14:	33 81       	ldd	r19, Z+3	; 0x03
     c16:	82 0f       	add	r24, r18
     c18:	93 1f       	adc	r25, r19
     c1a:	9b 83       	std	Y+3, r25	; 0x03
     c1c:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c1e:	ed 91       	ld	r30, X+
     c20:	fc 91       	ld	r31, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	99 83       	std	Y+1, r25	; 0x01
     c2a:	88 83       	st	Y, r24
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c2e:	39 83       	std	Y+1, r19	; 0x01
     c30:	28 83       	st	Y, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     c34:	f9 83       	std	Y+1, r31	; 0x01
     c36:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     c38:	ca 17       	cp	r28, r26
     c3a:	db 07       	cpc	r29, r27
     c3c:	11 f0       	breq	.+4      	; 0xc42 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     c3e:	cd 93       	st	X+, r28
     c40:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     c56:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     c5a:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <pxEnd>
     c5e:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <pxEnd+0x1>
     c62:	89 2b       	or	r24, r25
     c64:	09 f4       	brne	.+2      	; 0xc68 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     c66:	7d df       	rcall	.-262    	; 0xb62 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     c68:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <xBlockAllocatedBit>
     c6c:	90 91 19 07 	lds	r25, 0x0719	; 0x800719 <xBlockAllocatedBit+0x1>
     c70:	80 23       	and	r24, r16
     c72:	91 23       	and	r25, r17
     c74:	89 2b       	or	r24, r25
     c76:	09 f0       	breq	.+2      	; 0xc7a <pvPortMalloc+0x32>
     c78:	76 c0       	rjmp	.+236    	; 0xd66 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c7a:	01 15       	cp	r16, r1
     c7c:	11 05       	cpc	r17, r1
     c7e:	49 f0       	breq	.+18     	; 0xc92 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     c80:	c8 01       	movw	r24, r16
     c82:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c84:	08 17       	cp	r16, r24
     c86:	19 07       	cpc	r17, r25
     c88:	18 f0       	brcs	.+6      	; 0xc90 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     c8a:	00 e0       	ldi	r16, 0x00	; 0
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     c90:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     c92:	01 15       	cp	r16, r1
     c94:	11 05       	cpc	r17, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <pvPortMalloc+0x52>
     c98:	69 c0       	rjmp	.+210    	; 0xd6c <pvPortMalloc+0x124>
     c9a:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xFreeBytesRemaining>
     c9e:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <xFreeBytesRemaining+0x1>
     ca2:	80 17       	cp	r24, r16
     ca4:	91 07       	cpc	r25, r17
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <pvPortMalloc+0x62>
     ca8:	64 c0       	rjmp	.+200    	; 0xd72 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     caa:	c0 91 24 07 	lds	r28, 0x0724	; 0x800724 <xStart>
     cae:	d0 91 25 07 	lds	r29, 0x0725	; 0x800725 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     cb2:	e4 e2       	ldi	r30, 0x24	; 36
     cb4:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     cb8:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     cba:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	9b 81       	ldd	r25, Y+3	; 0x03
     cc0:	80 17       	cp	r24, r16
     cc2:	91 07       	cpc	r25, r17
     cc4:	20 f4       	brcc	.+8      	; 0xcce <pvPortMalloc+0x86>
     cc6:	88 81       	ld	r24, Y
     cc8:	99 81       	ldd	r25, Y+1	; 0x01
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	a9 f7       	brne	.-22     	; 0xcb8 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     cce:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <pxEnd>
     cd2:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <pxEnd+0x1>
     cd6:	c8 17       	cp	r28, r24
     cd8:	d9 07       	cpc	r29, r25
     cda:	09 f4       	brne	.+2      	; 0xcde <pvPortMalloc+0x96>
     cdc:	4d c0       	rjmp	.+154    	; 0xd78 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     cde:	e0 80       	ld	r14, Z
     ce0:	f1 80       	ldd	r15, Z+1	; 0x01
     ce2:	84 e0       	ldi	r24, 0x04	; 4
     ce4:	e8 0e       	add	r14, r24
     ce6:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ce8:	88 81       	ld	r24, Y
     cea:	99 81       	ldd	r25, Y+1	; 0x01
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     cf0:	2a 81       	ldd	r18, Y+2	; 0x02
     cf2:	3b 81       	ldd	r19, Y+3	; 0x03
     cf4:	20 1b       	sub	r18, r16
     cf6:	31 0b       	sbc	r19, r17
     cf8:	29 30       	cpi	r18, 0x09	; 9
     cfa:	31 05       	cpc	r19, r1
     cfc:	48 f0       	brcs	.+18     	; 0xd10 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     cfe:	ce 01       	movw	r24, r28
     d00:	80 0f       	add	r24, r16
     d02:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     d04:	fc 01       	movw	r30, r24
     d06:	33 83       	std	Z+3, r19	; 0x03
     d08:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     d0a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     d0c:	0a 83       	std	Y+2, r16	; 0x02
     d0e:	52 df       	rcall	.-348    	; 0xbb4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xFreeBytesRemaining>
     d18:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <xFreeBytesRemaining+0x1>
     d1c:	82 1b       	sub	r24, r18
     d1e:	93 0b       	sbc	r25, r19
     d20:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <xFreeBytesRemaining+0x1>
     d24:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     d28:	40 91 1e 07 	lds	r20, 0x071E	; 0x80071e <xMinimumEverFreeBytesRemaining>
     d2c:	50 91 1f 07 	lds	r21, 0x071F	; 0x80071f <xMinimumEverFreeBytesRemaining+0x1>
     d30:	84 17       	cp	r24, r20
     d32:	95 07       	cpc	r25, r21
     d34:	20 f4       	brcc	.+8      	; 0xd3e <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     d36:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <xMinimumEverFreeBytesRemaining+0x1>
     d3a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     d3e:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <xBlockAllocatedBit>
     d42:	90 91 19 07 	lds	r25, 0x0719	; 0x800719 <xBlockAllocatedBit+0x1>
     d46:	28 2b       	or	r18, r24
     d48:	39 2b       	or	r19, r25
     d4a:	3b 83       	std	Y+3, r19	; 0x03
     d4c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     d4e:	19 82       	std	Y+1, r1	; 0x01
     d50:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     d52:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xNumberOfSuccessfulAllocations>
     d56:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xNumberOfSuccessfulAllocations+0x1>
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <xNumberOfSuccessfulAllocations+0x1>
     d60:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xNumberOfSuccessfulAllocations>
     d64:	0b c0       	rjmp	.+22     	; 0xd7c <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     d66:	e1 2c       	mov	r14, r1
     d68:	f1 2c       	mov	r15, r1
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <pvPortMalloc+0x134>
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <pvPortMalloc+0x134>
     d72:	e1 2c       	mov	r14, r1
     d74:	f1 2c       	mov	r15, r1
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <pvPortMalloc+0x134>
     d78:	e1 2c       	mov	r14, r1
     d7a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     d7c:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     d80:	e1 14       	cp	r14, r1
     d82:	f1 04       	cpc	r15, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     d86:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     d8a:	c7 01       	movw	r24, r14
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	08 95       	ret

00000d9a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	91 f1       	breq	.+100    	; 0xe0a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     da6:	ec 01       	movw	r28, r24
     da8:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     daa:	4a 81       	ldd	r20, Y+2	; 0x02
     dac:	5b 81       	ldd	r21, Y+3	; 0x03
     dae:	20 91 18 07 	lds	r18, 0x0718	; 0x800718 <xBlockAllocatedBit>
     db2:	30 91 19 07 	lds	r19, 0x0719	; 0x800719 <xBlockAllocatedBit+0x1>
     db6:	ba 01       	movw	r22, r20
     db8:	62 23       	and	r22, r18
     dba:	73 23       	and	r23, r19
     dbc:	67 2b       	or	r22, r23
     dbe:	29 f1       	breq	.+74     	; 0xe0a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     dc0:	68 81       	ld	r22, Y
     dc2:	79 81       	ldd	r23, Y+1	; 0x01
     dc4:	67 2b       	or	r22, r23
     dc6:	09 f5       	brne	.+66     	; 0xe0a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     dc8:	20 95       	com	r18
     dca:	30 95       	com	r19
     dcc:	24 23       	and	r18, r20
     dce:	35 23       	and	r19, r21
     dd0:	3b 83       	std	Y+3, r19	; 0x03
     dd2:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     dd4:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	20 91 20 07 	lds	r18, 0x0720	; 0x800720 <xFreeBytesRemaining>
     de0:	30 91 21 07 	lds	r19, 0x0721	; 0x800721 <xFreeBytesRemaining+0x1>
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <xFreeBytesRemaining+0x1>
     dec:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     df0:	ce 01       	movw	r24, r28
     df2:	e0 de       	rcall	.-576    	; 0xbb4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     df4:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNumberOfSuccessfulFrees>
     df8:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNumberOfSuccessfulFrees+0x1>
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNumberOfSuccessfulFrees+0x1>
     e02:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     e06:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e14:	fc 01       	movw	r30, r24
     e16:	03 96       	adiw	r24, 0x03	; 3
     e18:	92 83       	std	Z+2, r25	; 0x02
     e1a:	81 83       	std	Z+1, r24	; 0x01
     e1c:	4f ef       	ldi	r20, 0xFF	; 255
     e1e:	5f ef       	ldi	r21, 0xFF	; 255
     e20:	ba 01       	movw	r22, r20
     e22:	43 83       	std	Z+3, r20	; 0x03
     e24:	54 83       	std	Z+4, r21	; 0x04
     e26:	65 83       	std	Z+5, r22	; 0x05
     e28:	76 83       	std	Z+6, r23	; 0x06
     e2a:	90 87       	std	Z+8, r25	; 0x08
     e2c:	87 83       	std	Z+7, r24	; 0x07
     e2e:	92 87       	std	Z+10, r25	; 0x0a
     e30:	81 87       	std	Z+9, r24	; 0x09
     e32:	10 82       	st	Z, r1
     e34:	08 95       	ret

00000e36 <vListInitialiseItem>:
     e36:	fc 01       	movw	r30, r24
     e38:	13 86       	std	Z+11, r1	; 0x0b
     e3a:	12 86       	std	Z+10, r1	; 0x0a
     e3c:	08 95       	ret

00000e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e48:	08 81       	ld	r16, Y
     e4a:	19 81       	ldd	r17, Y+1	; 0x01
     e4c:	2a 81       	ldd	r18, Y+2	; 0x02
     e4e:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e50:	0f 3f       	cpi	r16, 0xFF	; 255
     e52:	4f ef       	ldi	r20, 0xFF	; 255
     e54:	14 07       	cpc	r17, r20
     e56:	24 07       	cpc	r18, r20
     e58:	34 07       	cpc	r19, r20
     e5a:	21 f4       	brne	.+8      	; 0xe64 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     e5c:	fc 01       	movw	r30, r24
     e5e:	a1 85       	ldd	r26, Z+9	; 0x09
     e60:	b2 85       	ldd	r27, Z+10	; 0x0a
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     e64:	dc 01       	movw	r26, r24
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <vListInsert+0x2e>
     e6a:	df 01       	movw	r26, r30
     e6c:	14 96       	adiw	r26, 0x04	; 4
     e6e:	ed 91       	ld	r30, X+
     e70:	fc 91       	ld	r31, X
     e72:	15 97       	sbiw	r26, 0x05	; 5
     e74:	40 81       	ld	r20, Z
     e76:	51 81       	ldd	r21, Z+1	; 0x01
     e78:	62 81       	ldd	r22, Z+2	; 0x02
     e7a:	73 81       	ldd	r23, Z+3	; 0x03
     e7c:	04 17       	cp	r16, r20
     e7e:	15 07       	cpc	r17, r21
     e80:	26 07       	cpc	r18, r22
     e82:	37 07       	cpc	r19, r23
     e84:	90 f7       	brcc	.-28     	; 0xe6a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     e86:	14 96       	adiw	r26, 0x04	; 4
     e88:	ed 91       	ld	r30, X+
     e8a:	fc 91       	ld	r31, X
     e8c:	15 97       	sbiw	r26, 0x05	; 5
     e8e:	fd 83       	std	Y+5, r31	; 0x05
     e90:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     e92:	d7 83       	std	Z+7, r29	; 0x07
     e94:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     e96:	bf 83       	std	Y+7, r27	; 0x07
     e98:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     e9a:	15 96       	adiw	r26, 0x05	; 5
     e9c:	dc 93       	st	X, r29
     e9e:	ce 93       	st	-X, r28
     ea0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     ea2:	9b 87       	std	Y+11, r25	; 0x0b
     ea4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 81       	ld	r18, Z
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	20 83       	st	Z, r18
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     ebe:	a2 85       	ldd	r26, Z+10	; 0x0a
     ec0:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     ec2:	c4 81       	ldd	r28, Z+4	; 0x04
     ec4:	d5 81       	ldd	r29, Z+5	; 0x05
     ec6:	86 81       	ldd	r24, Z+6	; 0x06
     ec8:	97 81       	ldd	r25, Z+7	; 0x07
     eca:	9f 83       	std	Y+7, r25	; 0x07
     ecc:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ece:	c6 81       	ldd	r28, Z+6	; 0x06
     ed0:	d7 81       	ldd	r29, Z+7	; 0x07
     ed2:	84 81       	ldd	r24, Z+4	; 0x04
     ed4:	95 81       	ldd	r25, Z+5	; 0x05
     ed6:	9d 83       	std	Y+5, r25	; 0x05
     ed8:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	8d 91       	ld	r24, X+
     ede:	9c 91       	ld	r25, X
     ee0:	12 97       	sbiw	r26, 0x02	; 2
     ee2:	e8 17       	cp	r30, r24
     ee4:	f9 07       	cpc	r31, r25
     ee6:	31 f4       	brne	.+12     	; 0xef4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ee8:	86 81       	ldd	r24, Z+6	; 0x06
     eea:	97 81       	ldd	r25, Z+7	; 0x07
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	9c 93       	st	X, r25
     ef0:	8e 93       	st	-X, r24
     ef2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ef4:	13 86       	std	Z+11, r1	; 0x0b
     ef6:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     ef8:	8c 91       	ld	r24, X
     efa:	81 50       	subi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     efe:	8c 91       	ld	r24, X
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     f06:	a8 95       	wdr
     f08:	90 ec       	ldi	r25, 0xC0	; 192
     f0a:	88 e1       	ldi	r24, 0x18	; 24
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	a8 95       	wdr
     f12:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f1c:	08 95       	ret

00000f1e <pxPortInitialiseStack>:
     f1e:	fc 01       	movw	r30, r24
     f20:	60 83       	st	Z, r22
     f22:	31 97       	sbiw	r30, 0x01	; 1
     f24:	70 83       	st	Z, r23
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	10 82       	st	Z, r1
     f2a:	31 97       	sbiw	r30, 0x01	; 1
     f2c:	10 82       	st	Z, r1
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	20 e8       	ldi	r18, 0x80	; 128
     f32:	20 83       	st	Z, r18
     f34:	31 97       	sbiw	r30, 0x01	; 1
     f36:	10 82       	st	Z, r1
     f38:	31 97       	sbiw	r30, 0x01	; 1
     f3a:	10 82       	st	Z, r1
     f3c:	31 97       	sbiw	r30, 0x01	; 1
     f3e:	10 82       	st	Z, r1
     f40:	77 97       	sbiw	r30, 0x17	; 23
     f42:	40 83       	st	Z, r20
     f44:	31 97       	sbiw	r30, 0x01	; 1
     f46:	50 83       	st	Z, r21
     f48:	86 97       	sbiw	r24, 0x26	; 38
     f4a:	08 95       	ret

00000f4c <xPortStartScheduler>:
     f4c:	dc df       	rcall	.-72     	; 0xf06 <prvSetupTimerInterrupt>
     f4e:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
     f52:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
     f56:	cd 91       	ld	r28, X+
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	dd 91       	ld	r29, X+
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	bf 90       	pop	r11
     f88:	af 90       	pop	r10
     f8a:	9f 90       	pop	r9
     f8c:	8f 90       	pop	r8
     f8e:	7f 90       	pop	r7
     f90:	6f 90       	pop	r6
     f92:	5f 90       	pop	r5
     f94:	4f 90       	pop	r4
     f96:	3f 90       	pop	r3
     f98:	2f 90       	pop	r2
     f9a:	1f 90       	pop	r1
     f9c:	0f 90       	pop	r0
     f9e:	0c be       	out	0x3c, r0	; 60
     fa0:	0f 90       	pop	r0
     fa2:	0b be       	out	0x3b, r0	; 59
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	08 95       	ret
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	08 95       	ret

00000fb0 <vPortYield>:
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	0f 92       	push	r0
     fb8:	0b b6       	in	r0, 0x3b	; 59
     fba:	0f 92       	push	r0
     fbc:	0c b6       	in	r0, 0x3c	; 60
     fbe:	0f 92       	push	r0
     fc0:	1f 92       	push	r1
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 92       	push	r2
     fc6:	3f 92       	push	r3
     fc8:	4f 92       	push	r4
     fca:	5f 92       	push	r5
     fcc:	6f 92       	push	r6
     fce:	7f 92       	push	r7
     fd0:	8f 92       	push	r8
     fd2:	9f 92       	push	r9
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    1004:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    1008:	0d b6       	in	r0, 0x3d	; 61
    100a:	0d 92       	st	X+, r0
    100c:	0e b6       	in	r0, 0x3e	; 62
    100e:	0d 92       	st	X+, r0
    1010:	0e 94 de 13 	call	0x27bc	; 0x27bc <vTaskSwitchContext>
    1014:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    1018:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    101c:	cd 91       	ld	r28, X+
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	dd 91       	ld	r29, X+
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	bf 91       	pop	r27
    102e:	af 91       	pop	r26
    1030:	9f 91       	pop	r25
    1032:	8f 91       	pop	r24
    1034:	7f 91       	pop	r23
    1036:	6f 91       	pop	r22
    1038:	5f 91       	pop	r21
    103a:	4f 91       	pop	r20
    103c:	3f 91       	pop	r19
    103e:	2f 91       	pop	r18
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	9f 90       	pop	r9
    1052:	8f 90       	pop	r8
    1054:	7f 90       	pop	r7
    1056:	6f 90       	pop	r6
    1058:	5f 90       	pop	r5
    105a:	4f 90       	pop	r4
    105c:	3f 90       	pop	r3
    105e:	2f 90       	pop	r2
    1060:	1f 90       	pop	r1
    1062:	0f 90       	pop	r0
    1064:	0c be       	out	0x3c, r0	; 60
    1066:	0f 90       	pop	r0
    1068:	0b be       	out	0x3b, r0	; 59
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	08 95       	ret

00001072 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	0f 92       	push	r0
    107a:	0b b6       	in	r0, 0x3b	; 59
    107c:	0f 92       	push	r0
    107e:	0c b6       	in	r0, 0x3c	; 60
    1080:	0f 92       	push	r0
    1082:	1f 92       	push	r1
    1084:	11 24       	eor	r1, r1
    1086:	2f 92       	push	r2
    1088:	3f 92       	push	r3
    108a:	4f 92       	push	r4
    108c:	5f 92       	push	r5
    108e:	6f 92       	push	r6
    1090:	7f 92       	push	r7
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
    10c2:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    10c6:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    10ca:	0d b6       	in	r0, 0x3d	; 61
    10cc:	0d 92       	st	X+, r0
    10ce:	0e b6       	in	r0, 0x3e	; 62
    10d0:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    10d2:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    10d4:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskIncrementTick>
    10d8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    10da:	0e 94 de 13 	call	0x27bc	; 0x27bc <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    10de:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    10e2:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    10e6:	cd 91       	ld	r28, X+
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	dd 91       	ld	r29, X+
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	7f 90       	pop	r7
    1120:	6f 90       	pop	r6
    1122:	5f 90       	pop	r5
    1124:	4f 90       	pop	r4
    1126:	3f 90       	pop	r3
    1128:	2f 90       	pop	r2
    112a:	1f 90       	pop	r1
    112c:	0f 90       	pop	r0
    112e:	0c be       	out	0x3c, r0	; 60
    1130:	0f 90       	pop	r0
    1132:	0b be       	out	0x3b, r0	; 59
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    113a:	08 95       	ret

0000113c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    113c:	9a df       	rcall	.-204    	; 0x1072 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    113e:	18 95       	reti

00001140 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	0f 92       	push	r0
    1146:	fc 01       	movw	r30, r24
    1148:	86 8d       	ldd	r24, Z+30	; 0x1e
    114a:	81 11       	cpse	r24, r1
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <prvIsQueueEmpty+0x12>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <prvIsQueueEmpty+0x14>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	08 95       	ret

0000115a <prvIsQueueFull>:
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	0f 92       	push	r0
    1160:	fc 01       	movw	r30, r24
    1162:	26 8d       	ldd	r18, Z+30	; 0x1e
    1164:	87 8d       	ldd	r24, Z+31	; 0x1f
    1166:	28 13       	cpse	r18, r24
    1168:	02 c0       	rjmp	.+4      	; 0x116e <prvIsQueueFull+0x14>
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <prvIsQueueFull+0x16>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	08 95       	ret

00001176 <prvCopyDataToQueue>:
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	ec 01       	movw	r28, r24
    1180:	04 2f       	mov	r16, r20
    1182:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1184:	48 a1       	ldd	r20, Y+32	; 0x20
    1186:	41 11       	cpse	r20, r1
    1188:	0c c0       	rjmp	.+24     	; 0x11a2 <prvCopyDataToQueue+0x2c>
    118a:	88 81       	ld	r24, Y
    118c:	99 81       	ldd	r25, Y+1	; 0x01
    118e:	89 2b       	or	r24, r25
    1190:	09 f0       	breq	.+2      	; 0x1194 <prvCopyDataToQueue+0x1e>
    1192:	42 c0       	rjmp	.+132    	; 0x1218 <prvCopyDataToQueue+0xa2>
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <xTaskPriorityDisinherit>
    119c:	1d 82       	std	Y+5, r1	; 0x05
    119e:	1c 82       	std	Y+4, r1	; 0x04
    11a0:	42 c0       	rjmp	.+132    	; 0x1226 <prvCopyDataToQueue+0xb0>
    11a2:	01 11       	cpse	r16, r1
    11a4:	17 c0       	rjmp	.+46     	; 0x11d4 <prvCopyDataToQueue+0x5e>
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	9b 81       	ldd	r25, Y+3	; 0x03
    11ac:	0e 94 d6 30 	call	0x61ac	; 0x61ac <memcpy>
    11b0:	28 a1       	ldd	r18, Y+32	; 0x20
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	9b 81       	ldd	r25, Y+3	; 0x03
    11b6:	82 0f       	add	r24, r18
    11b8:	91 1d       	adc	r25, r1
    11ba:	9b 83       	std	Y+3, r25	; 0x03
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	2c 81       	ldd	r18, Y+4	; 0x04
    11c0:	3d 81       	ldd	r19, Y+5	; 0x05
    11c2:	82 17       	cp	r24, r18
    11c4:	93 07       	cpc	r25, r19
    11c6:	50 f1       	brcs	.+84     	; 0x121c <prvCopyDataToQueue+0xa6>
    11c8:	88 81       	ld	r24, Y
    11ca:	99 81       	ldd	r25, Y+1	; 0x01
    11cc:	9b 83       	std	Y+3, r25	; 0x03
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	29 c0       	rjmp	.+82     	; 0x1226 <prvCopyDataToQueue+0xb0>
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	9f 81       	ldd	r25, Y+7	; 0x07
    11da:	0e 94 d6 30 	call	0x61ac	; 0x61ac <memcpy>
    11de:	88 a1       	ldd	r24, Y+32	; 0x20
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	91 95       	neg	r25
    11e4:	81 95       	neg	r24
    11e6:	91 09       	sbc	r25, r1
    11e8:	2e 81       	ldd	r18, Y+6	; 0x06
    11ea:	3f 81       	ldd	r19, Y+7	; 0x07
    11ec:	28 0f       	add	r18, r24
    11ee:	39 1f       	adc	r19, r25
    11f0:	3f 83       	std	Y+7, r19	; 0x07
    11f2:	2e 83       	std	Y+6, r18	; 0x06
    11f4:	48 81       	ld	r20, Y
    11f6:	59 81       	ldd	r21, Y+1	; 0x01
    11f8:	24 17       	cp	r18, r20
    11fa:	35 07       	cpc	r19, r21
    11fc:	30 f4       	brcc	.+12     	; 0x120a <prvCopyDataToQueue+0x94>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	9f 83       	std	Y+7, r25	; 0x07
    1208:	8e 83       	std	Y+6, r24	; 0x06
    120a:	02 30       	cpi	r16, 0x02	; 2
    120c:	49 f4       	brne	.+18     	; 0x1220 <prvCopyDataToQueue+0xaa>
    120e:	11 23       	and	r17, r17
    1210:	49 f0       	breq	.+18     	; 0x1224 <prvCopyDataToQueue+0xae>
    1212:	11 50       	subi	r17, 0x01	; 1
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <prvCopyDataToQueue+0xb0>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <prvCopyDataToQueue+0xb0>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <prvCopyDataToQueue+0xb0>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <prvCopyDataToQueue+0xb0>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	1f 5f       	subi	r17, 0xFF	; 255
    1228:	1e 8f       	std	Y+30, r17	; 0x1e
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <prvCopyDataFromQueue>:
    1234:	fc 01       	movw	r30, r24
    1236:	40 a1       	ldd	r20, Z+32	; 0x20
    1238:	44 23       	and	r20, r20
    123a:	a9 f0       	breq	.+42     	; 0x1266 <prvCopyDataFromQueue+0x32>
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	26 81       	ldd	r18, Z+6	; 0x06
    1240:	37 81       	ldd	r19, Z+7	; 0x07
    1242:	24 0f       	add	r18, r20
    1244:	35 1f       	adc	r19, r21
    1246:	37 83       	std	Z+7, r19	; 0x07
    1248:	26 83       	std	Z+6, r18	; 0x06
    124a:	84 81       	ldd	r24, Z+4	; 0x04
    124c:	95 81       	ldd	r25, Z+5	; 0x05
    124e:	28 17       	cp	r18, r24
    1250:	39 07       	cpc	r19, r25
    1252:	20 f0       	brcs	.+8      	; 0x125c <prvCopyDataFromQueue+0x28>
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	97 83       	std	Z+7, r25	; 0x07
    125a:	86 83       	std	Z+6, r24	; 0x06
    125c:	cb 01       	movw	r24, r22
    125e:	66 81       	ldd	r22, Z+6	; 0x06
    1260:	77 81       	ldd	r23, Z+7	; 0x07
    1262:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <memcpy>
    1266:	08 95       	ret

00001268 <prvUnlockQueue>:
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	0f 92       	push	r0
    1276:	1a a1       	ldd	r17, Y+34	; 0x22
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <prvUnlockQueue+0x28>
    127a:	8b 89       	ldd	r24, Y+19	; 0x13
    127c:	88 23       	and	r24, r24
    127e:	51 f0       	breq	.+20     	; 0x1294 <prvUnlockQueue+0x2c>
    1280:	ce 01       	movw	r24, r28
    1282:	43 96       	adiw	r24, 0x13	; 19
    1284:	0e 94 e6 14 	call	0x29cc	; 0x29cc <xTaskRemoveFromEventList>
    1288:	81 11       	cpse	r24, r1
    128a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <vTaskMissedYield>
    128e:	11 50       	subi	r17, 0x01	; 1
    1290:	11 16       	cp	r1, r17
    1292:	9c f3       	brlt	.-26     	; 0x127a <prvUnlockQueue+0x12>
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	8a a3       	std	Y+34, r24	; 0x22
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
    12a2:	19 a1       	ldd	r17, Y+33	; 0x21
    12a4:	0b c0       	rjmp	.+22     	; 0x12bc <prvUnlockQueue+0x54>
    12a6:	88 85       	ldd	r24, Y+8	; 0x08
    12a8:	88 23       	and	r24, r24
    12aa:	51 f0       	breq	.+20     	; 0x12c0 <prvUnlockQueue+0x58>
    12ac:	ce 01       	movw	r24, r28
    12ae:	08 96       	adiw	r24, 0x08	; 8
    12b0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <xTaskRemoveFromEventList>
    12b4:	81 11       	cpse	r24, r1
    12b6:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <vTaskMissedYield>
    12ba:	11 50       	subi	r17, 0x01	; 1
    12bc:	11 16       	cp	r1, r17
    12be:	9c f3       	brlt	.-26     	; 0x12a6 <prvUnlockQueue+0x3e>
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	89 a3       	std	Y+33, r24	; 0x21
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	08 95       	ret

000012d0 <xQueueGenericReset>:
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	ec 01       	movw	r28, r24
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	0f 92       	push	r0
    12dc:	e8 81       	ld	r30, Y
    12de:	f9 81       	ldd	r31, Y+1	; 0x01
    12e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12e2:	28 a1       	ldd	r18, Y+32	; 0x20
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	82 9f       	mul	r24, r18
    12ea:	a0 01       	movw	r20, r0
    12ec:	83 9f       	mul	r24, r19
    12ee:	50 0d       	add	r21, r0
    12f0:	92 9f       	mul	r25, r18
    12f2:	50 0d       	add	r21, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	4e 0f       	add	r20, r30
    12f8:	5f 1f       	adc	r21, r31
    12fa:	5d 83       	std	Y+5, r21	; 0x05
    12fc:	4c 83       	std	Y+4, r20	; 0x04
    12fe:	1e 8e       	std	Y+30, r1	; 0x1e
    1300:	fb 83       	std	Y+3, r31	; 0x03
    1302:	ea 83       	std	Y+2, r30	; 0x02
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	28 9f       	mul	r18, r24
    1308:	a0 01       	movw	r20, r0
    130a:	29 9f       	mul	r18, r25
    130c:	50 0d       	add	r21, r0
    130e:	38 9f       	mul	r19, r24
    1310:	50 0d       	add	r21, r0
    1312:	11 24       	eor	r1, r1
    1314:	cf 01       	movw	r24, r30
    1316:	84 0f       	add	r24, r20
    1318:	95 1f       	adc	r25, r21
    131a:	9f 83       	std	Y+7, r25	; 0x07
    131c:	8e 83       	std	Y+6, r24	; 0x06
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	8a a3       	std	Y+34, r24	; 0x22
    1324:	61 11       	cpse	r22, r1
    1326:	0b c0       	rjmp	.+22     	; 0x133e <xQueueGenericReset+0x6e>
    1328:	88 85       	ldd	r24, Y+8	; 0x08
    132a:	88 23       	and	r24, r24
    132c:	71 f0       	breq	.+28     	; 0x134a <xQueueGenericReset+0x7a>
    132e:	ce 01       	movw	r24, r28
    1330:	08 96       	adiw	r24, 0x08	; 8
    1332:	0e 94 e6 14 	call	0x29cc	; 0x29cc <xTaskRemoveFromEventList>
    1336:	88 23       	and	r24, r24
    1338:	41 f0       	breq	.+16     	; 0x134a <xQueueGenericReset+0x7a>
    133a:	3a de       	rcall	.-908    	; 0xfb0 <vPortYield>
    133c:	06 c0       	rjmp	.+12     	; 0x134a <xQueueGenericReset+0x7a>
    133e:	ce 01       	movw	r24, r28
    1340:	08 96       	adiw	r24, 0x08	; 8
    1342:	68 dd       	rcall	.-1328   	; 0xe14 <vListInitialise>
    1344:	ce 01       	movw	r24, r28
    1346:	43 96       	adiw	r24, 0x13	; 19
    1348:	65 dd       	rcall	.-1334   	; 0xe14 <vListInitialise>
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <prvInitialiseNewQueue>:
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	f8 01       	movw	r30, r16
    135c:	61 11       	cpse	r22, r1
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <prvInitialiseNewQueue+0x10>
    1360:	11 83       	std	Z+1, r17	; 0x01
    1362:	00 83       	st	Z, r16
    1364:	02 c0       	rjmp	.+4      	; 0x136a <prvInitialiseNewQueue+0x14>
    1366:	51 83       	std	Z+1, r21	; 0x01
    1368:	40 83       	st	Z, r20
    136a:	87 8f       	std	Z+31, r24	; 0x1f
    136c:	60 a3       	std	Z+32, r22	; 0x20
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	cf 01       	movw	r24, r30
    1372:	ae df       	rcall	.-164    	; 0x12d0 <xQueueGenericReset>
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	08 95       	ret

0000137a <xQueueGenericCreate>:
    137a:	df 92       	push	r13
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	f8 2e       	mov	r15, r24
    138a:	e6 2e       	mov	r14, r22
    138c:	d4 2e       	mov	r13, r20
    138e:	86 9f       	mul	r24, r22
    1390:	c0 01       	movw	r24, r0
    1392:	11 24       	eor	r1, r1
    1394:	83 96       	adiw	r24, 0x23	; 35
    1396:	58 dc       	rcall	.-1872   	; 0xc48 <pvPortMalloc>
    1398:	ec 01       	movw	r28, r24
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	41 f0       	breq	.+16     	; 0x13ae <xQueueGenericCreate+0x34>
    139e:	8c 01       	movw	r16, r24
    13a0:	2d 2d       	mov	r18, r13
    13a2:	ac 01       	movw	r20, r24
    13a4:	4d 5d       	subi	r20, 0xDD	; 221
    13a6:	5f 4f       	sbci	r21, 0xFF	; 255
    13a8:	6e 2d       	mov	r22, r14
    13aa:	8f 2d       	mov	r24, r15
    13ac:	d4 df       	rcall	.-88     	; 0x1356 <prvInitialiseNewQueue>
    13ae:	ce 01       	movw	r24, r28
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	08 95       	ret

000013c0 <xQueueGenericSend>:
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	29 97       	sbiw	r28, 0x09	; 9
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	7c 01       	movw	r14, r24
    13e2:	6b 01       	movw	r12, r22
    13e4:	2e 83       	std	Y+6, r18	; 0x06
    13e6:	3f 83       	std	Y+7, r19	; 0x07
    13e8:	48 87       	std	Y+8, r20	; 0x08
    13ea:	59 87       	std	Y+9, r21	; 0x09
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	0f 92       	push	r0
    13f4:	f7 01       	movw	r30, r14
    13f6:	96 8d       	ldd	r25, Z+30	; 0x1e
    13f8:	87 8d       	ldd	r24, Z+31	; 0x1f
    13fa:	98 17       	cp	r25, r24
    13fc:	10 f0       	brcs	.+4      	; 0x1402 <xQueueGenericSend+0x42>
    13fe:	02 30       	cpi	r16, 0x02	; 2
    1400:	b1 f4       	brne	.+44     	; 0x142e <xQueueGenericSend+0x6e>
    1402:	40 2f       	mov	r20, r16
    1404:	b6 01       	movw	r22, r12
    1406:	c7 01       	movw	r24, r14
    1408:	b6 de       	rcall	.-660    	; 0x1176 <prvCopyDataToQueue>
    140a:	f7 01       	movw	r30, r14
    140c:	93 89       	ldd	r25, Z+19	; 0x13
    140e:	99 23       	and	r25, r25
    1410:	41 f0       	breq	.+16     	; 0x1422 <xQueueGenericSend+0x62>
    1412:	c7 01       	movw	r24, r14
    1414:	43 96       	adiw	r24, 0x13	; 19
    1416:	0e 94 e6 14 	call	0x29cc	; 0x29cc <xTaskRemoveFromEventList>
    141a:	88 23       	and	r24, r24
    141c:	21 f0       	breq	.+8      	; 0x1426 <xQueueGenericSend+0x66>
    141e:	c8 dd       	rcall	.-1136   	; 0xfb0 <vPortYield>
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <xQueueGenericSend+0x66>
    1422:	81 11       	cpse	r24, r1
    1424:	c5 dd       	rcall	.-1142   	; 0xfb0 <vPortYield>
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	4c c0       	rjmp	.+152    	; 0x14c6 <xQueueGenericSend+0x106>
    142e:	8e 81       	ldd	r24, Y+6	; 0x06
    1430:	9f 81       	ldd	r25, Y+7	; 0x07
    1432:	a8 85       	ldd	r26, Y+8	; 0x08
    1434:	b9 85       	ldd	r27, Y+9	; 0x09
    1436:	89 2b       	or	r24, r25
    1438:	8a 2b       	or	r24, r26
    143a:	8b 2b       	or	r24, r27
    143c:	21 f4       	brne	.+8      	; 0x1446 <xQueueGenericSend+0x86>
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	40 c0       	rjmp	.+128    	; 0x14c6 <xQueueGenericSend+0x106>
    1446:	11 11       	cpse	r17, r1
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <xQueueGenericSend+0x94>
    144a:	ce 01       	movw	r24, r28
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <vTaskInternalSetTimeOutState>
    1452:	11 e0       	ldi	r17, 0x01	; 1
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	15 d7       	rcall	.+3626   	; 0x2284 <vTaskSuspendAll>
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	0f 92       	push	r0
    1460:	f7 01       	movw	r30, r14
    1462:	81 a1       	ldd	r24, Z+33	; 0x21
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <xQueueGenericSend+0xaa>
    1468:	11 a2       	std	Z+33, r1	; 0x21
    146a:	f7 01       	movw	r30, r14
    146c:	82 a1       	ldd	r24, Z+34	; 0x22
    146e:	8f 3f       	cpi	r24, 0xFF	; 255
    1470:	09 f4       	brne	.+2      	; 0x1474 <xQueueGenericSend+0xb4>
    1472:	12 a2       	std	Z+34, r1	; 0x22
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	be 01       	movw	r22, r28
    147a:	6a 5f       	subi	r22, 0xFA	; 250
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	0e 94 56 16 	call	0x2cac	; 0x2cac <xTaskCheckForTimeOut>
    1486:	81 11       	cpse	r24, r1
    1488:	19 c0       	rjmp	.+50     	; 0x14bc <xQueueGenericSend+0xfc>
    148a:	c7 01       	movw	r24, r14
    148c:	66 de       	rcall	.-820    	; 0x115a <prvIsQueueFull>
    148e:	88 23       	and	r24, r24
    1490:	81 f0       	breq	.+32     	; 0x14b2 <xQueueGenericSend+0xf2>
    1492:	4e 81       	ldd	r20, Y+6	; 0x06
    1494:	5f 81       	ldd	r21, Y+7	; 0x07
    1496:	68 85       	ldd	r22, Y+8	; 0x08
    1498:	79 85       	ldd	r23, Y+9	; 0x09
    149a:	c7 01       	movw	r24, r14
    149c:	08 96       	adiw	r24, 0x08	; 8
    149e:	0e 94 43 14 	call	0x2886	; 0x2886 <vTaskPlaceOnEventList>
    14a2:	c7 01       	movw	r24, r14
    14a4:	e1 de       	rcall	.-574    	; 0x1268 <prvUnlockQueue>
    14a6:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
    14aa:	81 11       	cpse	r24, r1
    14ac:	a0 cf       	rjmp	.-192    	; 0x13ee <xQueueGenericSend+0x2e>
    14ae:	80 dd       	rcall	.-1280   	; 0xfb0 <vPortYield>
    14b0:	9e cf       	rjmp	.-196    	; 0x13ee <xQueueGenericSend+0x2e>
    14b2:	c7 01       	movw	r24, r14
    14b4:	d9 de       	rcall	.-590    	; 0x1268 <prvUnlockQueue>
    14b6:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
    14ba:	99 cf       	rjmp	.-206    	; 0x13ee <xQueueGenericSend+0x2e>
    14bc:	c7 01       	movw	r24, r14
    14be:	d4 de       	rcall	.-600    	; 0x1268 <prvUnlockQueue>
    14c0:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	29 96       	adiw	r28, 0x09	; 9
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	08 95       	ret

000014e4 <prvInitialiseMutex>:
    14e4:	0f 93       	push	r16
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f0       	breq	.+26     	; 0x1504 <prvInitialiseMutex+0x20>
    14ea:	fc 01       	movw	r30, r24
    14ec:	15 82       	std	Z+5, r1	; 0x05
    14ee:	14 82       	std	Z+4, r1	; 0x04
    14f0:	11 82       	std	Z+1, r1	; 0x01
    14f2:	10 82       	st	Z, r1
    14f4:	16 82       	std	Z+6, r1	; 0x06
    14f6:	00 e0       	ldi	r16, 0x00	; 0
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	5e df       	rcall	.-324    	; 0x13c0 <xQueueGenericSend>
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <xQueueCreateMutex>:
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	48 2f       	mov	r20, r24
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	33 df       	rcall	.-410    	; 0x137a <xQueueGenericCreate>
    1514:	ec 01       	movw	r28, r24
    1516:	e6 df       	rcall	.-52     	; 0x14e4 <prvInitialiseMutex>
    1518:	ce 01       	movw	r24, r28
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <xQueueGenericSendFromISR>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	56 8d       	ldd	r21, Z+30	; 0x1e
    1532:	37 8d       	ldd	r19, Z+31	; 0x1f
    1534:	53 17       	cp	r21, r19
    1536:	10 f0       	brcs	.+4      	; 0x153c <xQueueGenericSendFromISR+0x1c>
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	f9 f4       	brne	.+62     	; 0x157a <xQueueGenericSendFromISR+0x5a>
    153c:	42 2f       	mov	r20, r18
    153e:	78 01       	movw	r14, r16
    1540:	ec 01       	movw	r28, r24
    1542:	1a a1       	ldd	r17, Y+34	; 0x22
    1544:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1546:	ce 01       	movw	r24, r28
    1548:	16 de       	rcall	.-980    	; 0x1176 <prvCopyDataToQueue>
    154a:	1f 3f       	cpi	r17, 0xFF	; 255
    154c:	81 f4       	brne	.+32     	; 0x156e <xQueueGenericSendFromISR+0x4e>
    154e:	8b 89       	ldd	r24, Y+19	; 0x13
    1550:	88 23       	and	r24, r24
    1552:	a9 f0       	breq	.+42     	; 0x157e <xQueueGenericSendFromISR+0x5e>
    1554:	ce 01       	movw	r24, r28
    1556:	43 96       	adiw	r24, 0x13	; 19
    1558:	0e 94 e6 14 	call	0x29cc	; 0x29cc <xTaskRemoveFromEventList>
    155c:	88 23       	and	r24, r24
    155e:	89 f0       	breq	.+34     	; 0x1582 <xQueueGenericSendFromISR+0x62>
    1560:	e1 14       	cp	r14, r1
    1562:	f1 04       	cpc	r15, r1
    1564:	81 f0       	breq	.+32     	; 0x1586 <xQueueGenericSendFromISR+0x66>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	f7 01       	movw	r30, r14
    156a:	80 83       	st	Z, r24
    156c:	0d c0       	rjmp	.+26     	; 0x1588 <xQueueGenericSendFromISR+0x68>
    156e:	ff 24       	eor	r15, r15
    1570:	f3 94       	inc	r15
    1572:	f1 0e       	add	r15, r17
    1574:	fa a2       	std	Y+34, r15	; 0x22
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <xQueueGenericSendFromISR+0x68>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <xQueueGenericSendFromISR+0x68>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <xQueueGenericSendFromISR+0x68>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <xQueueGenericSendFromISR+0x68>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	08 95       	ret

00001596 <xQueueReceive>:
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	29 97       	sbiw	r28, 0x09	; 9
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	8c 01       	movw	r16, r24
    15b8:	6b 01       	movw	r12, r22
    15ba:	2e 83       	std	Y+6, r18	; 0x06
    15bc:	3f 83       	std	Y+7, r19	; 0x07
    15be:	48 87       	std	Y+8, r20	; 0x08
    15c0:	59 87       	std	Y+9, r21	; 0x09
    15c2:	e1 2c       	mov	r14, r1
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	0f 92       	push	r0
    15ca:	f8 01       	movw	r30, r16
    15cc:	f6 8c       	ldd	r15, Z+30	; 0x1e
    15ce:	ff 20       	and	r15, r15
    15d0:	99 f0       	breq	.+38     	; 0x15f8 <xQueueReceive+0x62>
    15d2:	b6 01       	movw	r22, r12
    15d4:	c8 01       	movw	r24, r16
    15d6:	2e de       	rcall	.-932    	; 0x1234 <prvCopyDataFromQueue>
    15d8:	fa 94       	dec	r15
    15da:	f8 01       	movw	r30, r16
    15dc:	f6 8e       	std	Z+30, r15	; 0x1e
    15de:	80 85       	ldd	r24, Z+8	; 0x08
    15e0:	88 23       	and	r24, r24
    15e2:	31 f0       	breq	.+12     	; 0x15f0 <xQueueReceive+0x5a>
    15e4:	c8 01       	movw	r24, r16
    15e6:	08 96       	adiw	r24, 0x08	; 8
    15e8:	0e 94 e6 14 	call	0x29cc	; 0x29cc <xTaskRemoveFromEventList>
    15ec:	81 11       	cpse	r24, r1
    15ee:	e0 dc       	rcall	.-1600   	; 0xfb0 <vPortYield>
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	4f c0       	rjmp	.+158    	; 0x1696 <xQueueReceive+0x100>
    15f8:	8e 81       	ldd	r24, Y+6	; 0x06
    15fa:	9f 81       	ldd	r25, Y+7	; 0x07
    15fc:	a8 85       	ldd	r26, Y+8	; 0x08
    15fe:	b9 85       	ldd	r27, Y+9	; 0x09
    1600:	89 2b       	or	r24, r25
    1602:	8a 2b       	or	r24, r26
    1604:	8b 2b       	or	r24, r27
    1606:	21 f4       	brne	.+8      	; 0x1610 <xQueueReceive+0x7a>
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <xQueueReceive+0x100>
    1610:	e1 10       	cpse	r14, r1
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <xQueueReceive+0x8a>
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <vTaskInternalSetTimeOutState>
    161c:	ee 24       	eor	r14, r14
    161e:	e3 94       	inc	r14
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	2f d6       	rcall	.+3166   	; 0x2284 <vTaskSuspendAll>
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	0f 92       	push	r0
    162c:	f8 01       	movw	r30, r16
    162e:	81 a1       	ldd	r24, Z+33	; 0x21
    1630:	8f 3f       	cpi	r24, 0xFF	; 255
    1632:	09 f4       	brne	.+2      	; 0x1636 <xQueueReceive+0xa0>
    1634:	11 a2       	std	Z+33, r1	; 0x21
    1636:	f8 01       	movw	r30, r16
    1638:	82 a1       	ldd	r24, Z+34	; 0x22
    163a:	8f 3f       	cpi	r24, 0xFF	; 255
    163c:	09 f4       	brne	.+2      	; 0x1640 <xQueueReceive+0xaa>
    163e:	12 a2       	std	Z+34, r1	; 0x22
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	be 01       	movw	r22, r28
    1646:	6a 5f       	subi	r22, 0xFA	; 250
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	0e 94 56 16 	call	0x2cac	; 0x2cac <xTaskCheckForTimeOut>
    1652:	81 11       	cpse	r24, r1
    1654:	17 c0       	rjmp	.+46     	; 0x1684 <xQueueReceive+0xee>
    1656:	c8 01       	movw	r24, r16
    1658:	73 dd       	rcall	.-1306   	; 0x1140 <prvIsQueueEmpty>
    165a:	88 23       	and	r24, r24
    165c:	79 f0       	breq	.+30     	; 0x167c <xQueueReceive+0xe6>
    165e:	4e 81       	ldd	r20, Y+6	; 0x06
    1660:	5f 81       	ldd	r21, Y+7	; 0x07
    1662:	68 85       	ldd	r22, Y+8	; 0x08
    1664:	79 85       	ldd	r23, Y+9	; 0x09
    1666:	c8 01       	movw	r24, r16
    1668:	43 96       	adiw	r24, 0x13	; 19
    166a:	0e 94 43 14 	call	0x2886	; 0x2886 <vTaskPlaceOnEventList>
    166e:	c8 01       	movw	r24, r16
    1670:	fb dd       	rcall	.-1034   	; 0x1268 <prvUnlockQueue>
    1672:	48 d7       	rcall	.+3728   	; 0x2504 <xTaskResumeAll>
    1674:	81 11       	cpse	r24, r1
    1676:	a6 cf       	rjmp	.-180    	; 0x15c4 <xQueueReceive+0x2e>
    1678:	9b dc       	rcall	.-1738   	; 0xfb0 <vPortYield>
    167a:	a4 cf       	rjmp	.-184    	; 0x15c4 <xQueueReceive+0x2e>
    167c:	c8 01       	movw	r24, r16
    167e:	f4 dd       	rcall	.-1048   	; 0x1268 <prvUnlockQueue>
    1680:	41 d7       	rcall	.+3714   	; 0x2504 <xTaskResumeAll>
    1682:	a0 cf       	rjmp	.-192    	; 0x15c4 <xQueueReceive+0x2e>
    1684:	c8 01       	movw	r24, r16
    1686:	f0 dd       	rcall	.-1056   	; 0x1268 <prvUnlockQueue>
    1688:	3d d7       	rcall	.+3706   	; 0x2504 <xTaskResumeAll>
    168a:	c8 01       	movw	r24, r16
    168c:	59 dd       	rcall	.-1358   	; 0x1140 <prvIsQueueEmpty>
    168e:	88 23       	and	r24, r24
    1690:	09 f4       	brne	.+2      	; 0x1694 <xQueueReceive+0xfe>
    1692:	98 cf       	rjmp	.-208    	; 0x15c4 <xQueueReceive+0x2e>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	29 96       	adiw	r28, 0x09	; 9
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	08 95       	ret

000016b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	0f 92       	push	r0
    16c0:	89 a1       	ldd	r24, Y+33	; 0x21
    16c2:	8f 3f       	cpi	r24, 0xFF	; 255
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <vQueueWaitForMessageRestricted+0x14>
    16c6:	19 a2       	std	Y+33, r1	; 0x21
    16c8:	8a a1       	ldd	r24, Y+34	; 0x22
    16ca:	8f 3f       	cpi	r24, 0xFF	; 255
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <vQueueWaitForMessageRestricted+0x1c>
    16ce:	1a a2       	std	Y+34, r1	; 0x22
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16d6:	81 11       	cpse	r24, r1
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16da:	ce 01       	movw	r24, r28
    16dc:	43 96       	adiw	r24, 0x13	; 19
    16de:	0e 94 a4 14 	call	0x2948	; 0x2948 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    16e2:	ce 01       	movw	r24, r28
    16e4:	c1 dd       	rcall	.-1150   	; 0x1268 <prvUnlockQueue>
    }
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    16ec:	fc 01       	movw	r30, r24
    16ee:	44 81       	ldd	r20, Z+4	; 0x04
    16f0:	55 81       	ldd	r21, Z+5	; 0x05
    16f2:	22 81       	ldd	r18, Z+2	; 0x02
    16f4:	33 81       	ldd	r19, Z+3	; 0x03
    16f6:	24 0f       	add	r18, r20
    16f8:	35 1f       	adc	r19, r21
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	b9 01       	movw	r22, r18
    1700:	68 1b       	sub	r22, r24
    1702:	79 0b       	sbc	r23, r25
    1704:	cb 01       	movw	r24, r22
    1706:	64 17       	cp	r22, r20
    1708:	75 07       	cpc	r23, r21
    170a:	10 f0       	brcs	.+4      	; 0x1710 <prvBytesInBuffer+0x24>
    170c:	84 1b       	sub	r24, r20
    170e:	95 0b       	sbc	r25, r21
    1710:	08 95       	ret

00001712 <prvInitialiseNewStreamBuffer>:
    1712:	0f 93       	push	r16
    1714:	fc 01       	movw	r30, r24
    1716:	8f e0       	ldi	r24, 0x0F	; 15
    1718:	df 01       	movw	r26, r30
    171a:	1d 92       	st	X+, r1
    171c:	8a 95       	dec	r24
    171e:	e9 f7       	brne	.-6      	; 0x171a <prvInitialiseNewStreamBuffer+0x8>
    1720:	75 87       	std	Z+13, r23	; 0x0d
    1722:	64 87       	std	Z+12, r22	; 0x0c
    1724:	55 83       	std	Z+5, r21	; 0x05
    1726:	44 83       	std	Z+4, r20	; 0x04
    1728:	37 83       	std	Z+7, r19	; 0x07
    172a:	26 83       	std	Z+6, r18	; 0x06
    172c:	06 87       	std	Z+14, r16	; 0x0e
    172e:	0f 91       	pop	r16
    1730:	08 95       	ret

00001732 <prvWriteBytesToBuffer>:
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	6c 01       	movw	r12, r24
    1748:	5b 01       	movw	r10, r22
    174a:	7a 01       	movw	r14, r20
    174c:	fc 01       	movw	r30, r24
    174e:	c2 81       	ldd	r28, Z+2	; 0x02
    1750:	d3 81       	ldd	r29, Z+3	; 0x03
    1752:	04 81       	ldd	r16, Z+4	; 0x04
    1754:	15 81       	ldd	r17, Z+5	; 0x05
    1756:	0c 1b       	sub	r16, r28
    1758:	1d 0b       	sbc	r17, r29
    175a:	40 17       	cp	r20, r16
    175c:	51 07       	cpc	r21, r17
    175e:	08 f4       	brcc	.+2      	; 0x1762 <prvWriteBytesToBuffer+0x30>
    1760:	8a 01       	movw	r16, r20
    1762:	f6 01       	movw	r30, r12
    1764:	84 85       	ldd	r24, Z+12	; 0x0c
    1766:	95 85       	ldd	r25, Z+13	; 0x0d
    1768:	a8 01       	movw	r20, r16
    176a:	b5 01       	movw	r22, r10
    176c:	8c 0f       	add	r24, r28
    176e:	9d 1f       	adc	r25, r29
    1770:	0e 94 d6 30 	call	0x61ac	; 0x61ac <memcpy>
    1774:	0e 15       	cp	r16, r14
    1776:	1f 05       	cpc	r17, r15
    1778:	58 f4       	brcc	.+22     	; 0x1790 <prvWriteBytesToBuffer+0x5e>
    177a:	a7 01       	movw	r20, r14
    177c:	40 1b       	sub	r20, r16
    177e:	51 0b       	sbc	r21, r17
    1780:	b5 01       	movw	r22, r10
    1782:	60 0f       	add	r22, r16
    1784:	71 1f       	adc	r23, r17
    1786:	f6 01       	movw	r30, r12
    1788:	84 85       	ldd	r24, Z+12	; 0x0c
    178a:	95 85       	ldd	r25, Z+13	; 0x0d
    178c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <memcpy>
    1790:	ce 01       	movw	r24, r28
    1792:	8e 0d       	add	r24, r14
    1794:	9f 1d       	adc	r25, r15
    1796:	f6 01       	movw	r30, r12
    1798:	24 81       	ldd	r18, Z+4	; 0x04
    179a:	35 81       	ldd	r19, Z+5	; 0x05
    179c:	82 17       	cp	r24, r18
    179e:	93 07       	cpc	r25, r19
    17a0:	10 f0       	brcs	.+4      	; 0x17a6 <prvWriteBytesToBuffer+0x74>
    17a2:	82 1b       	sub	r24, r18
    17a4:	93 0b       	sbc	r25, r19
    17a6:	f6 01       	movw	r30, r12
    17a8:	93 83       	std	Z+3, r25	; 0x03
    17aa:	82 83       	std	Z+2, r24	; 0x02
    17ac:	c7 01       	movw	r24, r14
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	08 95       	ret

000017c4 <prvWriteMessageToBuffer>:
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	1f 92       	push	r1
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	7c 01       	movw	r14, r24
    17de:	6b 01       	movw	r12, r22
    17e0:	5a 83       	std	Y+2, r21	; 0x02
    17e2:	49 83       	std	Y+1, r20	; 0x01
    17e4:	21 15       	cp	r18, r1
    17e6:	31 05       	cpc	r19, r1
    17e8:	c1 f0       	breq	.+48     	; 0x181a <prvWriteMessageToBuffer+0x56>
    17ea:	fc 01       	movw	r30, r24
    17ec:	86 85       	ldd	r24, Z+14	; 0x0e
    17ee:	80 fd       	sbrc	r24, 0
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <prvWriteMessageToBuffer+0x3e>
    17f2:	42 17       	cp	r20, r18
    17f4:	53 07       	cpc	r21, r19
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <prvWriteMessageToBuffer+0x36>
    17f8:	9a 01       	movw	r18, r20
    17fa:	3a 83       	std	Y+2, r19	; 0x02
    17fc:	29 83       	std	Y+1, r18	; 0x01
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <prvWriteMessageToBuffer+0x5c>
    1802:	20 17       	cp	r18, r16
    1804:	31 07       	cpc	r19, r17
    1806:	58 f0       	brcs	.+22     	; 0x181e <prvWriteMessageToBuffer+0x5a>
    1808:	42 e0       	ldi	r20, 0x02	; 2
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	be 01       	movw	r22, r28
    180e:	6f 5f       	subi	r22, 0xFF	; 255
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	c7 01       	movw	r24, r14
    1814:	8e df       	rcall	.-228    	; 0x1732 <prvWriteBytesToBuffer>
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <prvWriteMessageToBuffer+0x5c>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <prvWriteMessageToBuffer+0x5c>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	88 23       	and	r24, r24
    1822:	31 f0       	breq	.+12     	; 0x1830 <prvWriteMessageToBuffer+0x6c>
    1824:	49 81       	ldd	r20, Y+1	; 0x01
    1826:	5a 81       	ldd	r21, Y+2	; 0x02
    1828:	b6 01       	movw	r22, r12
    182a:	c7 01       	movw	r24, r14
    182c:	82 df       	rcall	.-252    	; 0x1732 <prvWriteBytesToBuffer>
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <prvWriteMessageToBuffer+0x70>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	08 95       	ret

0000184a <prvReadBytesFromBuffer>:
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	7c 01       	movw	r14, r24
    1860:	5b 01       	movw	r10, r22
    1862:	e9 01       	movw	r28, r18
    1864:	42 17       	cp	r20, r18
    1866:	53 07       	cpc	r21, r19
    1868:	08 f4       	brcc	.+2      	; 0x186c <prvReadBytesFromBuffer+0x22>
    186a:	ea 01       	movw	r28, r20
    186c:	20 97       	sbiw	r28, 0x00	; 0
    186e:	81 f1       	breq	.+96     	; 0x18d0 <prvReadBytesFromBuffer+0x86>
    1870:	f7 01       	movw	r30, r14
    1872:	00 81       	ld	r16, Z
    1874:	11 81       	ldd	r17, Z+1	; 0x01
    1876:	84 81       	ldd	r24, Z+4	; 0x04
    1878:	95 81       	ldd	r25, Z+5	; 0x05
    187a:	80 1b       	sub	r24, r16
    187c:	91 0b       	sbc	r25, r17
    187e:	6e 01       	movw	r12, r28
    1880:	8c 17       	cp	r24, r28
    1882:	9d 07       	cpc	r25, r29
    1884:	08 f4       	brcc	.+2      	; 0x1888 <prvReadBytesFromBuffer+0x3e>
    1886:	6c 01       	movw	r12, r24
    1888:	f7 01       	movw	r30, r14
    188a:	64 85       	ldd	r22, Z+12	; 0x0c
    188c:	75 85       	ldd	r23, Z+13	; 0x0d
    188e:	60 0f       	add	r22, r16
    1890:	71 1f       	adc	r23, r17
    1892:	a6 01       	movw	r20, r12
    1894:	c5 01       	movw	r24, r10
    1896:	0e 94 d6 30 	call	0x61ac	; 0x61ac <memcpy>
    189a:	cc 16       	cp	r12, r28
    189c:	dd 06       	cpc	r13, r29
    189e:	58 f4       	brcc	.+22     	; 0x18b6 <prvReadBytesFromBuffer+0x6c>
    18a0:	ae 01       	movw	r20, r28
    18a2:	4c 19       	sub	r20, r12
    18a4:	5d 09       	sbc	r21, r13
    18a6:	f7 01       	movw	r30, r14
    18a8:	64 85       	ldd	r22, Z+12	; 0x0c
    18aa:	75 85       	ldd	r23, Z+13	; 0x0d
    18ac:	c5 01       	movw	r24, r10
    18ae:	8c 0d       	add	r24, r12
    18b0:	9d 1d       	adc	r25, r13
    18b2:	0e 94 d6 30 	call	0x61ac	; 0x61ac <memcpy>
    18b6:	0c 0f       	add	r16, r28
    18b8:	1d 1f       	adc	r17, r29
    18ba:	f7 01       	movw	r30, r14
    18bc:	84 81       	ldd	r24, Z+4	; 0x04
    18be:	95 81       	ldd	r25, Z+5	; 0x05
    18c0:	08 17       	cp	r16, r24
    18c2:	19 07       	cpc	r17, r25
    18c4:	10 f0       	brcs	.+4      	; 0x18ca <prvReadBytesFromBuffer+0x80>
    18c6:	08 1b       	sub	r16, r24
    18c8:	19 0b       	sbc	r17, r25
    18ca:	f7 01       	movw	r30, r14
    18cc:	11 83       	std	Z+1, r17	; 0x01
    18ce:	00 83       	st	Z, r16
    18d0:	ce 01       	movw	r24, r28
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	df 90       	pop	r13
    18e0:	cf 90       	pop	r12
    18e2:	bf 90       	pop	r11
    18e4:	af 90       	pop	r10
    18e6:	08 95       	ret

000018e8 <prvReadMessageFromBuffer>:
    18e8:	6f 92       	push	r6
    18ea:	7f 92       	push	r7
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	1f 92       	push	r1
    1906:	1f 92       	push	r1
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	6c 01       	movw	r12, r24
    190e:	4b 01       	movw	r8, r22
    1910:	5a 01       	movw	r10, r20
    1912:	79 01       	movw	r14, r18
    1914:	01 15       	cp	r16, r1
    1916:	11 05       	cpc	r17, r1
    1918:	b1 f0       	breq	.+44     	; 0x1946 <prvReadMessageFromBuffer+0x5e>
    191a:	fc 01       	movw	r30, r24
    191c:	60 80       	ld	r6, Z
    191e:	71 80       	ldd	r7, Z+1	; 0x01
    1920:	a8 01       	movw	r20, r16
    1922:	be 01       	movw	r22, r28
    1924:	6f 5f       	subi	r22, 0xFF	; 255
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	90 df       	rcall	.-224    	; 0x184a <prvReadBytesFromBuffer>
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	e0 1a       	sub	r14, r16
    1930:	f1 0a       	sbc	r15, r17
    1932:	a8 16       	cp	r10, r24
    1934:	b9 06       	cpc	r11, r25
    1936:	30 f4       	brcc	.+12     	; 0x1944 <prvReadMessageFromBuffer+0x5c>
    1938:	f6 01       	movw	r30, r12
    193a:	71 82       	std	Z+1, r7	; 0x01
    193c:	60 82       	st	Z, r6
    193e:	a1 2c       	mov	r10, r1
    1940:	b1 2c       	mov	r11, r1
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <prvReadMessageFromBuffer+0x5e>
    1944:	5c 01       	movw	r10, r24
    1946:	97 01       	movw	r18, r14
    1948:	a5 01       	movw	r20, r10
    194a:	b4 01       	movw	r22, r8
    194c:	c6 01       	movw	r24, r12
    194e:	7d df       	rcall	.-262    	; 0x184a <prvReadBytesFromBuffer>
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	08 95       	ret

00001972 <xStreamBufferGenericCreate>:
    1972:	cf 92       	push	r12
    1974:	df 92       	push	r13
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	ec 01       	movw	r28, r24
    1982:	6b 01       	movw	r12, r22
    1984:	41 30       	cpi	r20, 0x01	; 1
    1986:	11 f4       	brne	.+4      	; 0x198c <xStreamBufferGenericCreate+0x1a>
    1988:	01 e0       	ldi	r16, 0x01	; 1
    198a:	01 c0       	rjmp	.+2      	; 0x198e <xStreamBufferGenericCreate+0x1c>
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	c1 14       	cp	r12, r1
    1990:	d1 04       	cpc	r13, r1
    1992:	19 f4       	brne	.+6      	; 0x199a <xStreamBufferGenericCreate+0x28>
    1994:	cc 24       	eor	r12, r12
    1996:	c3 94       	inc	r12
    1998:	d1 2c       	mov	r13, r1
    199a:	ce 01       	movw	r24, r28
    199c:	40 96       	adiw	r24, 0x10	; 16
    199e:	c8 17       	cp	r28, r24
    19a0:	d9 07       	cpc	r29, r25
    19a2:	20 f4       	brcc	.+8      	; 0x19ac <xStreamBufferGenericCreate+0x3a>
    19a4:	21 96       	adiw	r28, 0x01	; 1
    19a6:	50 d9       	rcall	.-3424   	; 0xc48 <pvPortMalloc>
    19a8:	7c 01       	movw	r14, r24
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <xStreamBufferGenericCreate+0x3e>
    19ac:	e1 2c       	mov	r14, r1
    19ae:	f1 2c       	mov	r15, r1
    19b0:	e1 14       	cp	r14, r1
    19b2:	f1 04       	cpc	r15, r1
    19b4:	39 f0       	breq	.+14     	; 0x19c4 <xStreamBufferGenericCreate+0x52>
    19b6:	96 01       	movw	r18, r12
    19b8:	ae 01       	movw	r20, r28
    19ba:	b7 01       	movw	r22, r14
    19bc:	61 5f       	subi	r22, 0xF1	; 241
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	c7 01       	movw	r24, r14
    19c2:	a7 de       	rcall	.-690    	; 0x1712 <prvInitialiseNewStreamBuffer>
    19c4:	c7 01       	movw	r24, r14
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	08 95       	ret

000019d6 <xStreamBufferReset>:
    19d6:	0f 93       	push	r16
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	0f 92       	push	r0
    19de:	fc 01       	movw	r30, r24
    19e0:	20 85       	ldd	r18, Z+8	; 0x08
    19e2:	31 85       	ldd	r19, Z+9	; 0x09
    19e4:	23 2b       	or	r18, r19
    19e6:	71 f4       	brne	.+28     	; 0x1a04 <xStreamBufferReset+0x2e>
    19e8:	22 85       	ldd	r18, Z+10	; 0x0a
    19ea:	33 85       	ldd	r19, Z+11	; 0x0b
    19ec:	23 2b       	or	r18, r19
    19ee:	61 f4       	brne	.+24     	; 0x1a08 <xStreamBufferReset+0x32>
    19f0:	26 81       	ldd	r18, Z+6	; 0x06
    19f2:	37 81       	ldd	r19, Z+7	; 0x07
    19f4:	44 81       	ldd	r20, Z+4	; 0x04
    19f6:	55 81       	ldd	r21, Z+5	; 0x05
    19f8:	64 85       	ldd	r22, Z+12	; 0x0c
    19fa:	75 85       	ldd	r23, Z+13	; 0x0d
    19fc:	06 85       	ldd	r16, Z+14	; 0x0e
    19fe:	89 de       	rcall	.-750    	; 0x1712 <prvInitialiseNewStreamBuffer>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <xStreamBufferReset+0x34>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <xStreamBufferReset+0x34>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <xStreamBufferSpacesAvailable>:
    1a12:	fc 01       	movw	r30, r24
    1a14:	24 81       	ldd	r18, Z+4	; 0x04
    1a16:	35 81       	ldd	r19, Z+5	; 0x05
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	42 81       	ldd	r20, Z+2	; 0x02
    1a22:	53 81       	ldd	r21, Z+3	; 0x03
    1a24:	84 1b       	sub	r24, r20
    1a26:	95 0b       	sbc	r25, r21
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	82 17       	cp	r24, r18
    1a2c:	93 07       	cpc	r25, r19
    1a2e:	10 f0       	brcs	.+4      	; 0x1a34 <xStreamBufferSpacesAvailable+0x22>
    1a30:	82 1b       	sub	r24, r18
    1a32:	93 0b       	sbc	r25, r19
    1a34:	08 95       	ret

00001a36 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1a36:	2f 92       	push	r2
    1a38:	3f 92       	push	r3
    1a3a:	4f 92       	push	r4
    1a3c:	5f 92       	push	r5
    1a3e:	6f 92       	push	r6
    1a40:	7f 92       	push	r7
    1a42:	8f 92       	push	r8
    1a44:	9f 92       	push	r9
    1a46:	af 92       	push	r10
    1a48:	bf 92       	push	r11
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	4c 01       	movw	r8, r24
    1a6c:	7b 87       	std	Y+11, r23	; 0x0b
    1a6e:	6a 87       	std	Y+10, r22	; 0x0a
    1a70:	1a 01       	movw	r2, r20
    1a72:	0e 83       	std	Y+6, r16	; 0x06
    1a74:	1f 83       	std	Y+7, r17	; 0x07
    1a76:	28 87       	std	Y+8, r18	; 0x08
    1a78:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	84 81       	ldd	r24, Z+4	; 0x04
    1a7e:	95 81       	ldd	r25, Z+5	; 0x05
    1a80:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a82:	26 85       	ldd	r18, Z+14	; 0x0e
    1a84:	20 ff       	sbrs	r18, 0
    1a86:	0c c0       	rjmp	.+24     	; 0x1aa0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a88:	2a 01       	movw	r4, r20
    1a8a:	f2 e0       	ldi	r31, 0x02	; 2
    1a8c:	4f 0e       	add	r4, r31
    1a8e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1a90:	84 15       	cp	r24, r4
    1a92:	95 05       	cpc	r25, r5
    1a94:	58 f4       	brcc	.+22     	; 0x1aac <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1a96:	1e 82       	std	Y+6, r1	; 0x06
    1a98:	1f 82       	std	Y+7, r1	; 0x07
    1a9a:	18 86       	std	Y+8, r1	; 0x08
    1a9c:	19 86       	std	Y+9, r1	; 0x09
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1aa0:	84 17       	cp	r24, r20
    1aa2:	95 07       	cpc	r25, r21
    1aa4:	10 f0       	brcs	.+4      	; 0x1aaa <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1aa6:	2a 01       	movw	r4, r20
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1aaa:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ab2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ab4:	89 2b       	or	r24, r25
    1ab6:	8a 2b       	or	r24, r26
    1ab8:	8b 2b       	or	r24, r27
    1aba:	09 f4       	brne	.+2      	; 0x1abe <xStreamBufferSend+0x88>
    1abc:	38 c0       	rjmp	.+112    	; 0x1b2e <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1abe:	ce 01       	movw	r24, r28
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1acc:	c4 01       	movw	r24, r8
    1ace:	a1 df       	rcall	.-190    	; 0x1a12 <xStreamBufferSpacesAvailable>
    1ad0:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1ad2:	84 15       	cp	r24, r4
    1ad4:	95 05       	cpc	r25, r5
    1ad6:	40 f5       	brcc	.+80     	; 0x1b28 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 18 1a 	call	0x3430	; 0x3430 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1ae2:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskGetCurrentTaskHandle>
    1ae6:	f4 01       	movw	r30, r8
    1ae8:	93 87       	std	Z+11, r25	; 0x0b
    1aea:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1af0:	ae 80       	ldd	r10, Y+6	; 0x06
    1af2:	bf 80       	ldd	r11, Y+7	; 0x07
    1af4:	c8 84       	ldd	r12, Y+8	; 0x08
    1af6:	d9 84       	ldd	r13, Y+9	; 0x09
    1af8:	e1 2c       	mov	r14, r1
    1afa:	f1 2c       	mov	r15, r1
    1afc:	00 e0       	ldi	r16, 0x00	; 0
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	98 01       	movw	r18, r16
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	ba 01       	movw	r22, r20
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1b0e:	f4 01       	movw	r30, r8
    1b10:	13 86       	std	Z+11, r1	; 0x0b
    1b12:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1b14:	be 01       	movw	r22, r28
    1b16:	6a 5f       	subi	r22, 0xFA	; 250
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	0e 94 56 16 	call	0x2cac	; 0x2cac <xTaskCheckForTimeOut>
    1b22:	88 23       	and	r24, r24
    1b24:	81 f2       	breq	.-96     	; 0x1ac6 <xStreamBufferSend+0x90>
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
                    break;
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1b2e:	61 2c       	mov	r6, r1
    1b30:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1b32:	61 14       	cp	r6, r1
    1b34:	71 04       	cpc	r7, r1
    1b36:	19 f4       	brne	.+6      	; 0x1b3e <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b38:	c4 01       	movw	r24, r8
    1b3a:	6b df       	rcall	.-298    	; 0x1a12 <xStreamBufferSpacesAvailable>
    1b3c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b3e:	82 01       	movw	r16, r4
    1b40:	93 01       	movw	r18, r6
    1b42:	a1 01       	movw	r20, r2
    1b44:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b46:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b48:	c4 01       	movw	r24, r8
    1b4a:	3c de       	rcall	.-904    	; 0x17c4 <prvWriteMessageToBuffer>
    1b4c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1b4e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b50:	e9 f0       	breq	.+58     	; 0x1b8c <xStreamBufferSend+0x156>
    1b52:	c4 01       	movw	r24, r8
    1b54:	cb dd       	rcall	.-1130   	; 0x16ec <prvBytesInBuffer>
    1b56:	f4 01       	movw	r30, r8
    1b58:	26 81       	ldd	r18, Z+6	; 0x06
    1b5a:	37 81       	ldd	r19, Z+7	; 0x07
    1b5c:	82 17       	cp	r24, r18
    1b5e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1b60:	a8 f0       	brcs	.+42     	; 0x1b8c <xStreamBufferSend+0x156>
    1b62:	90 d3       	rcall	.+1824   	; 0x2284 <vTaskSuspendAll>
    1b64:	f4 01       	movw	r30, r8
    1b66:	80 85       	ldd	r24, Z+8	; 0x08
    1b68:	91 85       	ldd	r25, Z+9	; 0x09
    1b6a:	89 2b       	or	r24, r25
    1b6c:	71 f0       	breq	.+28     	; 0x1b8a <xStreamBufferSend+0x154>
    1b6e:	80 85       	ldd	r24, Z+8	; 0x08
    1b70:	91 85       	ldd	r25, Z+9	; 0x09
    1b72:	e1 2c       	mov	r14, r1
    1b74:	f1 2c       	mov	r15, r1
    1b76:	00 e0       	ldi	r16, 0x00	; 0
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <xTaskGenericNotify>
    1b84:	f4 01       	movw	r30, r8
    1b86:	11 86       	std	Z+9, r1	; 0x09
    1b88:	10 86       	std	Z+8, r1	; 0x08
    1b8a:	bc d4       	rcall	.+2424   	; 0x2504 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1b8c:	c6 01       	movw	r24, r12
    1b8e:	2b 96       	adiw	r28, 0x0b	; 11
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
    1bb2:	7f 90       	pop	r7
    1bb4:	6f 90       	pop	r6
    1bb6:	5f 90       	pop	r5
    1bb8:	4f 90       	pop	r4
    1bba:	3f 90       	pop	r3
    1bbc:	2f 90       	pop	r2
    1bbe:	08 95       	ret

00001bc0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	ec 01       	movw	r28, r24
    1bd6:	7b 01       	movw	r14, r22
    1bd8:	5a 01       	movw	r10, r20
    1bda:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1bdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bde:	80 ff       	sbrs	r24, 0
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1be2:	8a 01       	movw	r16, r20
    1be4:	0e 5f       	subi	r16, 0xFE	; 254
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1bea:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1bec:	ce 01       	movw	r24, r28
    1bee:	11 df       	rcall	.-478    	; 0x1a12 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1bf0:	9c 01       	movw	r18, r24
    1bf2:	a5 01       	movw	r20, r10
    1bf4:	b7 01       	movw	r22, r14
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	e5 dd       	rcall	.-1078   	; 0x17c4 <prvWriteMessageToBuffer>
    1bfa:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1bfc:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1bfe:	c1 f0       	breq	.+48     	; 0x1c30 <xStreamBufferSendFromISR+0x70>
    1c00:	ce 01       	movw	r24, r28
    1c02:	74 dd       	rcall	.-1304   	; 0x16ec <prvBytesInBuffer>
    1c04:	2e 81       	ldd	r18, Y+6	; 0x06
    1c06:	3f 81       	ldd	r19, Y+7	; 0x07
    1c08:	82 17       	cp	r24, r18
    1c0a:	93 07       	cpc	r25, r19
    1c0c:	88 f0       	brcs	.+34     	; 0x1c30 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1c0e:	88 85       	ldd	r24, Y+8	; 0x08
    1c10:	99 85       	ldd	r25, Y+9	; 0x09
    1c12:	89 2b       	or	r24, r25
    1c14:	69 f0       	breq	.+26     	; 0x1c30 <xStreamBufferSendFromISR+0x70>
    1c16:	88 85       	ldd	r24, Y+8	; 0x08
    1c18:	99 85       	ldd	r25, Y+9	; 0x09
    1c1a:	e1 2c       	mov	r14, r1
    1c1c:	f1 2c       	mov	r15, r1
    1c1e:	00 e0       	ldi	r16, 0x00	; 0
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	0e 94 f6 18 	call	0x31ec	; 0x31ec <xTaskGenericNotifyFromISR>
    1c2c:	19 86       	std	Y+9, r1	; 0x09
    1c2e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1c30:	c5 01       	movw	r24, r10
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	08 95       	ret

00001c48 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1c48:	4f 92       	push	r4
    1c4a:	5f 92       	push	r5
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
    1c6a:	2b 01       	movw	r4, r22
    1c6c:	3a 01       	movw	r6, r20
    1c6e:	58 01       	movw	r10, r16
    1c70:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c74:	80 ff       	sbrs	r24, 0
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c78:	68 94       	set
    1c7a:	88 24       	eor	r8, r8
    1c7c:	81 f8       	bld	r8, 1
    1c7e:	91 2c       	mov	r9, r1
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1c82:	81 2c       	mov	r8, r1
    1c84:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c86:	a1 14       	cp	r10, r1
    1c88:	b1 04       	cpc	r11, r1
    1c8a:	c1 04       	cpc	r12, r1
    1c8c:	d1 04       	cpc	r13, r1
    1c8e:	41 f1       	breq	.+80     	; 0x1ce0 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c96:	ce 01       	movw	r24, r28
    1c98:	29 dd       	rcall	.-1454   	; 0x16ec <prvBytesInBuffer>
    1c9a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1c9c:	88 16       	cp	r8, r24
    1c9e:	99 06       	cpc	r9, r25
    1ca0:	48 f0       	brcs	.+18     	; 0x1cb4 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 18 1a 	call	0x3430	; 0x3430 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1cac:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskGetCurrentTaskHandle>
    1cb0:	99 87       	std	Y+9, r25	; 0x09
    1cb2:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1cb8:	8e 14       	cp	r8, r14
    1cba:	9f 04       	cpc	r9, r15
    1cbc:	a0 f0       	brcs	.+40     	; 0x1ce6 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1cbe:	e1 2c       	mov	r14, r1
    1cc0:	f1 2c       	mov	r15, r1
    1cc2:	00 e0       	ldi	r16, 0x00	; 0
    1cc4:	10 e0       	ldi	r17, 0x00	; 0
    1cc6:	98 01       	movw	r18, r16
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	ba 01       	movw	r22, r20
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1cd4:	19 86       	std	Y+9, r1	; 0x09
    1cd6:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1cd8:	ce 01       	movw	r24, r28
    1cda:	08 dd       	rcall	.-1520   	; 0x16ec <prvBytesInBuffer>
    1cdc:	7c 01       	movw	r14, r24
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	04 dd       	rcall	.-1528   	; 0x16ec <prvBytesInBuffer>
    1ce4:	7c 01       	movw	r14, r24
    1ce6:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1ce8:	9f 04       	cpc	r9, r15
    1cea:	e8 f4       	brcc	.+58     	; 0x1d26 <xStreamBufferReceive+0xde>
    1cec:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1cee:	97 01       	movw	r18, r14
    1cf0:	a3 01       	movw	r20, r6
    1cf2:	b2 01       	movw	r22, r4
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	f8 dd       	rcall	.-1040   	; 0x18e8 <prvReadMessageFromBuffer>
    1cf8:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1cfa:	89 2b       	or	r24, r25
    1cfc:	b1 f0       	breq	.+44     	; 0x1d2a <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1cfe:	c2 d2       	rcall	.+1412   	; 0x2284 <vTaskSuspendAll>
    1d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d04:	89 2b       	or	r24, r25
    1d06:	69 f0       	breq	.+26     	; 0x1d22 <xStreamBufferReceive+0xda>
    1d08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d0c:	e1 2c       	mov	r14, r1
    1d0e:	f1 2c       	mov	r15, r1
    1d10:	00 e0       	ldi	r16, 0x00	; 0
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	a9 01       	movw	r20, r18
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <xTaskGenericNotify>
    1d1e:	1b 86       	std	Y+11, r1	; 0x0b
    1d20:	1a 86       	std	Y+10, r1	; 0x0a
    1d22:	f0 d3       	rcall	.+2016   	; 0x2504 <xTaskResumeAll>
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <xStreamBufferReceive+0xe2>
    1d26:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1d28:	d1 2c       	mov	r13, r1
    1d2a:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	cf 90       	pop	r12
    1d3c:	bf 90       	pop	r11
    1d3e:	af 90       	pop	r10
    1d40:	9f 90       	pop	r9
    1d42:	8f 90       	pop	r8
    1d44:	7f 90       	pop	r7
    1d46:	6f 90       	pop	r6
    1d48:	5f 90       	pop	r5
    1d4a:	4f 90       	pop	r4
    1d4c:	08 95       	ret

00001d4e <prvResetNextTaskUnblockTime>:
    1d4e:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxDelayedTaskList>
    1d52:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxDelayedTaskList+0x1>
    1d56:	80 81       	ld	r24, Z
    1d58:	81 11       	cpse	r24, r1
    1d5a:	0c c0       	rjmp	.+24     	; 0x1d74 <prvResetNextTaskUnblockTime+0x26>
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	9f ef       	ldi	r25, 0xFF	; 255
    1d60:	dc 01       	movw	r26, r24
    1d62:	80 93 ef 10 	sts	0x10EF, r24	; 0x8010ef <xNextTaskUnblockTime>
    1d66:	90 93 f0 10 	sts	0x10F0, r25	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    1d6a:	a0 93 f1 10 	sts	0x10F1, r26	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    1d6e:	b0 93 f2 10 	sts	0x10F2, r27	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    1d72:	08 95       	ret
    1d74:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxDelayedTaskList>
    1d78:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxDelayedTaskList+0x1>
    1d7c:	07 80       	ldd	r0, Z+7	; 0x07
    1d7e:	f0 85       	ldd	r31, Z+8	; 0x08
    1d80:	e0 2d       	mov	r30, r0
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	a2 81       	ldd	r26, Z+2	; 0x02
    1d88:	b3 81       	ldd	r27, Z+3	; 0x03
    1d8a:	80 93 ef 10 	sts	0x10EF, r24	; 0x8010ef <xNextTaskUnblockTime>
    1d8e:	90 93 f0 10 	sts	0x10F0, r25	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    1d92:	a0 93 f1 10 	sts	0x10F1, r26	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    1d96:	b0 93 f2 10 	sts	0x10F2, r27	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    1d9a:	08 95       	ret

00001d9c <prvDeleteTCB>:
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortFree>
    1daa:	ce 01       	movw	r24, r28
    1dac:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortFree>
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <prvInitialiseNewTask>:
    1db6:	4f 92       	push	r4
    1db8:	5f 92       	push	r5
    1dba:	6f 92       	push	r6
    1dbc:	7f 92       	push	r7
    1dbe:	8f 92       	push	r8
    1dc0:	9f 92       	push	r9
    1dc2:	af 92       	push	r10
    1dc4:	bf 92       	push	r11
    1dc6:	cf 92       	push	r12
    1dc8:	df 92       	push	r13
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	2c 01       	movw	r4, r24
    1dd6:	5b 01       	movw	r10, r22
    1dd8:	4a 01       	movw	r8, r20
    1dda:	39 01       	movw	r6, r18
    1ddc:	e6 01       	movw	r28, r12
    1dde:	65 ea       	ldi	r22, 0xA5	; 165
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de6:	0e 94 df 30 	call	0x61be	; 0x61be <memset>
    1dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dee:	21 e0       	ldi	r18, 0x01	; 1
    1df0:	82 1a       	sub	r8, r18
    1df2:	91 08       	sbc	r9, r1
    1df4:	88 0e       	add	r8, r24
    1df6:	99 1e       	adc	r9, r25
    1df8:	a1 14       	cp	r10, r1
    1dfa:	b1 04       	cpc	r11, r1
    1dfc:	89 f4       	brne	.+34     	; 0x1e20 <prvInitialiseNewTask+0x6a>
    1dfe:	15 c0       	rjmp	.+42     	; 0x1e2a <prvInitialiseNewTask+0x74>
    1e00:	82 2f       	mov	r24, r18
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	f5 01       	movw	r30, r10
    1e06:	e8 0f       	add	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	30 81       	ld	r19, Z
    1e0c:	de 01       	movw	r26, r28
    1e0e:	a8 0f       	add	r26, r24
    1e10:	b9 1f       	adc	r27, r25
    1e12:	5d 96       	adiw	r26, 0x1d	; 29
    1e14:	3c 93       	st	X, r19
    1e16:	80 81       	ld	r24, Z
    1e18:	88 23       	and	r24, r24
    1e1a:	29 f0       	breq	.+10     	; 0x1e26 <prvInitialiseNewTask+0x70>
    1e1c:	2f 5f       	subi	r18, 0xFF	; 255
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <prvInitialiseNewTask+0x6c>
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	20 31       	cpi	r18, 0x10	; 16
    1e24:	68 f3       	brcs	.-38     	; 0x1e00 <prvInitialiseNewTask+0x4a>
    1e26:	1c a6       	std	Y+44, r1	; 0x2c
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <prvInitialiseNewTask+0x76>
    1e2a:	1d 8e       	std	Y+29, r1	; 0x1d
    1e2c:	0a 30       	cpi	r16, 0x0A	; 10
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <prvInitialiseNewTask+0x7c>
    1e30:	09 e0       	ldi	r16, 0x09	; 9
    1e32:	0a 8f       	std	Y+26, r16	; 0x1a
    1e34:	0d a7       	std	Y+45, r16	; 0x2d
    1e36:	1e a6       	std	Y+46, r1	; 0x2e
    1e38:	ce 01       	movw	r24, r28
    1e3a:	02 96       	adiw	r24, 0x02	; 2
    1e3c:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialiseItem>
    1e40:	ce 01       	movw	r24, r28
    1e42:	0e 96       	adiw	r24, 0x0e	; 14
    1e44:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialiseItem>
    1e48:	db 87       	std	Y+11, r29	; 0x0b
    1e4a:	ca 87       	std	Y+10, r28	; 0x0a
    1e4c:	8a e0       	ldi	r24, 0x0A	; 10
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e0       	ldi	r26, 0x00	; 0
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	80 1b       	sub	r24, r16
    1e56:	91 09       	sbc	r25, r1
    1e58:	a1 09       	sbc	r26, r1
    1e5a:	b1 09       	sbc	r27, r1
    1e5c:	8e 87       	std	Y+14, r24	; 0x0e
    1e5e:	9f 87       	std	Y+15, r25	; 0x0f
    1e60:	a8 8b       	std	Y+16, r26	; 0x10
    1e62:	b9 8b       	std	Y+17, r27	; 0x11
    1e64:	df 8b       	std	Y+23, r29	; 0x17
    1e66:	ce 8b       	std	Y+22, r28	; 0x16
    1e68:	84 e0       	ldi	r24, 0x04	; 4
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	bf 96       	adiw	r30, 0x2f	; 47
    1e6e:	df 01       	movw	r26, r30
    1e70:	1d 92       	st	X+, r1
    1e72:	8a 95       	dec	r24
    1e74:	e9 f7       	brne	.-6      	; 0x1e70 <prvInitialiseNewTask+0xba>
    1e76:	1b aa       	std	Y+51, r1	; 0x33
    1e78:	a3 01       	movw	r20, r6
    1e7a:	b2 01       	movw	r22, r4
    1e7c:	c4 01       	movw	r24, r8
    1e7e:	4f d8       	rcall	.-3938   	; 0xf1e <pxPortInitialiseStack>
    1e80:	99 83       	std	Y+1, r25	; 0x01
    1e82:	88 83       	st	Y, r24
    1e84:	e1 14       	cp	r14, r1
    1e86:	f1 04       	cpc	r15, r1
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <prvInitialiseNewTask+0xda>
    1e8a:	f7 01       	movw	r30, r14
    1e8c:	d1 83       	std	Z+1, r29	; 0x01
    1e8e:	c0 83       	st	Z, r28
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	bf 90       	pop	r11
    1ea0:	af 90       	pop	r10
    1ea2:	9f 90       	pop	r9
    1ea4:	8f 90       	pop	r8
    1ea6:	7f 90       	pop	r7
    1ea8:	6f 90       	pop	r6
    1eaa:	5f 90       	pop	r5
    1eac:	4f 90       	pop	r4
    1eae:	08 95       	ret

00001eb0 <prvInitialiseTaskLists>:
    1eb0:	cf 93       	push	r28
    1eb2:	c0 e0       	ldi	r28, 0x00	; 0
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <prvInitialiseTaskLists+0x18>
    1eb6:	2b e0       	ldi	r18, 0x0B	; 11
    1eb8:	c2 9f       	mul	r28, r18
    1eba:	c0 01       	movw	r24, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	83 5c       	subi	r24, 0xC3	; 195
    1ec0:	9e 4e       	sbci	r25, 0xEE	; 238
    1ec2:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    1ec6:	cf 5f       	subi	r28, 0xFF	; 255
    1ec8:	ca 30       	cpi	r28, 0x0A	; 10
    1eca:	a8 f3       	brcs	.-22     	; 0x1eb6 <prvInitialiseTaskLists+0x6>
    1ecc:	82 e3       	ldi	r24, 0x32	; 50
    1ece:	91 e1       	ldi	r25, 0x11	; 17
    1ed0:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    1ed4:	87 e2       	ldi	r24, 0x27	; 39
    1ed6:	91 e1       	ldi	r25, 0x11	; 17
    1ed8:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    1edc:	88 e1       	ldi	r24, 0x18	; 24
    1ede:	91 e1       	ldi	r25, 0x11	; 17
    1ee0:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    1ee4:	8d e0       	ldi	r24, 0x0D	; 13
    1ee6:	91 e1       	ldi	r25, 0x11	; 17
    1ee8:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	91 e1       	ldi	r25, 0x11	; 17
    1ef0:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    1ef4:	82 e3       	ldi	r24, 0x32	; 50
    1ef6:	91 e1       	ldi	r25, 0x11	; 17
    1ef8:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <pxDelayedTaskList+0x1>
    1efc:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <pxDelayedTaskList>
    1f00:	87 e2       	ldi	r24, 0x27	; 39
    1f02:	91 e1       	ldi	r25, 0x11	; 17
    1f04:	90 93 24 11 	sts	0x1124, r25	; 0x801124 <pxOverflowDelayedTaskList+0x1>
    1f08:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <pxOverflowDelayedTaskList>
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <prvAddNewTaskToReadyList>:
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	ec 01       	movw	r28, r24
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	0f 92       	push	r0
    1f1c:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxCurrentNumberOfTasks>
    1f20:	8f 5f       	subi	r24, 0xFF	; 255
    1f22:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <uxCurrentNumberOfTasks>
    1f26:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    1f2a:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    1f2e:	89 2b       	or	r24, r25
    1f30:	51 f4       	brne	.+20     	; 0x1f46 <prvAddNewTaskToReadyList+0x36>
    1f32:	d0 93 ac 11 	sts	0x11AC, r29	; 0x8011ac <pxCurrentTCB+0x1>
    1f36:	c0 93 ab 11 	sts	0x11AB, r28	; 0x8011ab <pxCurrentTCB>
    1f3a:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxCurrentNumberOfTasks>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	91 f4       	brne	.+36     	; 0x1f66 <prvAddNewTaskToReadyList+0x56>
    1f42:	b6 df       	rcall	.-148    	; 0x1eb0 <prvInitialiseTaskLists>
    1f44:	10 c0       	rjmp	.+32     	; 0x1f66 <prvAddNewTaskToReadyList+0x56>
    1f46:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <xSchedulerRunning>
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	0c c0       	rjmp	.+24     	; 0x1f66 <prvAddNewTaskToReadyList+0x56>
    1f4e:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    1f52:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    1f56:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f58:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f5a:	89 17       	cp	r24, r25
    1f5c:	20 f0       	brcs	.+8      	; 0x1f66 <prvAddNewTaskToReadyList+0x56>
    1f5e:	d0 93 ac 11 	sts	0x11AC, r29	; 0x8011ac <pxCurrentTCB+0x1>
    1f62:	c0 93 ab 11 	sts	0x11AB, r28	; 0x8011ab <pxCurrentTCB>
    1f66:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <uxTaskNumber>
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <uxTaskNumber>
    1f70:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f72:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    1f76:	8e 17       	cp	r24, r30
    1f78:	10 f4       	brcc	.+4      	; 0x1f7e <prvAddNewTaskToReadyList+0x6e>
    1f7a:	e0 93 fb 10 	sts	0x10FB, r30	; 0x8010fb <uxTopReadyPriority>
    1f7e:	8b e0       	ldi	r24, 0x0B	; 11
    1f80:	8e 9f       	mul	r24, r30
    1f82:	f0 01       	movw	r30, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	e3 5c       	subi	r30, 0xC3	; 195
    1f88:	fe 4e       	sbci	r31, 0xEE	; 238
    1f8a:	01 80       	ldd	r0, Z+1	; 0x01
    1f8c:	f2 81       	ldd	r31, Z+2	; 0x02
    1f8e:	e0 2d       	mov	r30, r0
    1f90:	ff 83       	std	Y+7, r31	; 0x07
    1f92:	ee 83       	std	Y+6, r30	; 0x06
    1f94:	26 81       	ldd	r18, Z+6	; 0x06
    1f96:	37 81       	ldd	r19, Z+7	; 0x07
    1f98:	39 87       	std	Y+9, r19	; 0x09
    1f9a:	28 87       	std	Y+8, r18	; 0x08
    1f9c:	a6 81       	ldd	r26, Z+6	; 0x06
    1f9e:	b7 81       	ldd	r27, Z+7	; 0x07
    1fa0:	9e 01       	movw	r18, r28
    1fa2:	2e 5f       	subi	r18, 0xFE	; 254
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	15 96       	adiw	r26, 0x05	; 5
    1fa8:	3c 93       	st	X, r19
    1faa:	2e 93       	st	-X, r18
    1fac:	14 97       	sbiw	r26, 0x04	; 4
    1fae:	37 83       	std	Z+7, r19	; 0x07
    1fb0:	26 83       	std	Z+6, r18	; 0x06
    1fb2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1fb4:	8e 9f       	mul	r24, r30
    1fb6:	f0 01       	movw	r30, r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	e3 5c       	subi	r30, 0xC3	; 195
    1fbc:	fe 4e       	sbci	r31, 0xEE	; 238
    1fbe:	fd 87       	std	Y+13, r31	; 0x0d
    1fc0:	ec 87       	std	Y+12, r30	; 0x0c
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	80 83       	st	Z, r24
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <xSchedulerRunning>
    1fd0:	88 23       	and	r24, r24
    1fd2:	51 f0       	breq	.+20     	; 0x1fe8 <prvAddNewTaskToReadyList+0xd8>
    1fd4:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    1fd8:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    1fdc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe0:	98 17       	cp	r25, r24
    1fe2:	10 f4       	brcc	.+4      	; 0x1fe8 <prvAddNewTaskToReadyList+0xd8>
    1fe4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	08 95       	ret

00001fee <prvCheckTasksWaitingTermination>:
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	1b c0       	rjmp	.+54     	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	0f 92       	push	r0
    1ffa:	e0 91 14 11 	lds	r30, 0x1114	; 0x801114 <xTasksWaitingTermination+0x7>
    1ffe:	f0 91 15 11 	lds	r31, 0x1115	; 0x801115 <xTasksWaitingTermination+0x8>
    2002:	c0 85       	ldd	r28, Z+8	; 0x08
    2004:	d1 85       	ldd	r29, Z+9	; 0x09
    2006:	ce 01       	movw	r24, r28
    2008:	02 96       	adiw	r24, 0x02	; 2
    200a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uxListRemove>
    200e:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxCurrentNumberOfTasks>
    2012:	81 50       	subi	r24, 0x01	; 1
    2014:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <uxCurrentNumberOfTasks>
    2018:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <uxDeletedTasksWaitingCleanUp>
    201c:	81 50       	subi	r24, 0x01	; 1
    201e:	80 93 0c 11 	sts	0x110C, r24	; 0x80110c <uxDeletedTasksWaitingCleanUp>
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	ce 01       	movw	r24, r28
    2028:	b9 de       	rcall	.-654    	; 0x1d9c <prvDeleteTCB>
    202a:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <uxDeletedTasksWaitingCleanUp>
    202e:	81 11       	cpse	r24, r1
    2030:	e1 cf       	rjmp	.-62     	; 0x1ff4 <prvCheckTasksWaitingTermination+0x6>
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	08 95       	ret

00002038 <prvAddCurrentTaskToDelayedList>:
    2038:	8f 92       	push	r8
    203a:	9f 92       	push	r9
    203c:	af 92       	push	r10
    203e:	bf 92       	push	r11
    2040:	cf 92       	push	r12
    2042:	df 92       	push	r13
    2044:	ef 92       	push	r14
    2046:	ff 92       	push	r15
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	6b 01       	movw	r12, r22
    204e:	7c 01       	movw	r14, r24
    2050:	c4 2f       	mov	r28, r20
    2052:	80 90 fc 10 	lds	r8, 0x10FC	; 0x8010fc <xTickCount>
    2056:	90 90 fd 10 	lds	r9, 0x10FD	; 0x8010fd <xTickCount+0x1>
    205a:	a0 90 fe 10 	lds	r10, 0x10FE	; 0x8010fe <xTickCount+0x2>
    205e:	b0 90 ff 10 	lds	r11, 0x10FF	; 0x8010ff <xTickCount+0x3>
    2062:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2066:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    206a:	02 96       	adiw	r24, 0x02	; 2
    206c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uxListRemove>
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	c8 16       	cp	r12, r24
    2074:	d8 06       	cpc	r13, r24
    2076:	e8 06       	cpc	r14, r24
    2078:	f8 06       	cpc	r15, r24
    207a:	b1 f5       	brne	.+108    	; 0x20e8 <prvAddCurrentTaskToDelayedList+0xb0>
    207c:	cc 23       	and	r28, r28
    207e:	a1 f1       	breq	.+104    	; 0x20e8 <prvAddCurrentTaskToDelayedList+0xb0>
    2080:	e1 e0       	ldi	r30, 0x01	; 1
    2082:	f1 e1       	ldi	r31, 0x11	; 17
    2084:	a1 81       	ldd	r26, Z+1	; 0x01
    2086:	b2 81       	ldd	r27, Z+2	; 0x02
    2088:	c0 91 ab 11 	lds	r28, 0x11AB	; 0x8011ab <pxCurrentTCB>
    208c:	d0 91 ac 11 	lds	r29, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2090:	bf 83       	std	Y+7, r27	; 0x07
    2092:	ae 83       	std	Y+6, r26	; 0x06
    2094:	c0 91 ab 11 	lds	r28, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2098:	d0 91 ac 11 	lds	r29, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    209c:	16 96       	adiw	r26, 0x06	; 6
    209e:	8d 91       	ld	r24, X+
    20a0:	9c 91       	ld	r25, X
    20a2:	17 97       	sbiw	r26, 0x07	; 7
    20a4:	99 87       	std	Y+9, r25	; 0x09
    20a6:	88 87       	std	Y+8, r24	; 0x08
    20a8:	16 96       	adiw	r26, 0x06	; 6
    20aa:	cd 91       	ld	r28, X+
    20ac:	dc 91       	ld	r29, X
    20ae:	17 97       	sbiw	r26, 0x07	; 7
    20b0:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    20b4:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    20b8:	02 96       	adiw	r24, 0x02	; 2
    20ba:	9d 83       	std	Y+5, r25	; 0x05
    20bc:	8c 83       	std	Y+4, r24	; 0x04
    20be:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    20c2:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    20c6:	02 96       	adiw	r24, 0x02	; 2
    20c8:	17 96       	adiw	r26, 0x07	; 7
    20ca:	9c 93       	st	X, r25
    20cc:	8e 93       	st	-X, r24
    20ce:	16 97       	sbiw	r26, 0x06	; 6
    20d0:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    20d4:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    20d8:	1d 96       	adiw	r26, 0x0d	; 13
    20da:	fc 93       	st	X, r31
    20dc:	ee 93       	st	-X, r30
    20de:	1c 97       	sbiw	r26, 0x0c	; 12
    20e0:	80 81       	ld	r24, Z
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	80 83       	st	Z, r24
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <prvAddCurrentTaskToDelayedList+0x12e>
    20e8:	c8 0c       	add	r12, r8
    20ea:	d9 1c       	adc	r13, r9
    20ec:	ea 1c       	adc	r14, r10
    20ee:	fb 1c       	adc	r15, r11
    20f0:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    20f4:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    20f8:	c2 82       	std	Z+2, r12	; 0x02
    20fa:	d3 82       	std	Z+3, r13	; 0x03
    20fc:	e4 82       	std	Z+4, r14	; 0x04
    20fe:	f5 82       	std	Z+5, r15	; 0x05
    2100:	c8 14       	cp	r12, r8
    2102:	d9 04       	cpc	r13, r9
    2104:	ea 04       	cpc	r14, r10
    2106:	fb 04       	cpc	r15, r11
    2108:	68 f4       	brcc	.+26     	; 0x2124 <prvAddCurrentTaskToDelayedList+0xec>
    210a:	60 91 ab 11 	lds	r22, 0x11AB	; 0x8011ab <pxCurrentTCB>
    210e:	70 91 ac 11 	lds	r23, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2112:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <pxOverflowDelayedTaskList>
    2116:	90 91 24 11 	lds	r25, 0x1124	; 0x801124 <pxOverflowDelayedTaskList+0x1>
    211a:	6e 5f       	subi	r22, 0xFE	; 254
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vListInsert>
    2122:	21 c0       	rjmp	.+66     	; 0x2166 <prvAddCurrentTaskToDelayedList+0x12e>
    2124:	60 91 ab 11 	lds	r22, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2128:	70 91 ac 11 	lds	r23, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    212c:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxDelayedTaskList>
    2130:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxDelayedTaskList+0x1>
    2134:	6e 5f       	subi	r22, 0xFE	; 254
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vListInsert>
    213c:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <xNextTaskUnblockTime>
    2140:	90 91 f0 10 	lds	r25, 0x10F0	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    2144:	a0 91 f1 10 	lds	r26, 0x10F1	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    2148:	b0 91 f2 10 	lds	r27, 0x10F2	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    214c:	c8 16       	cp	r12, r24
    214e:	d9 06       	cpc	r13, r25
    2150:	ea 06       	cpc	r14, r26
    2152:	fb 06       	cpc	r15, r27
    2154:	40 f4       	brcc	.+16     	; 0x2166 <prvAddCurrentTaskToDelayedList+0x12e>
    2156:	c0 92 ef 10 	sts	0x10EF, r12	; 0x8010ef <xNextTaskUnblockTime>
    215a:	d0 92 f0 10 	sts	0x10F0, r13	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    215e:	e0 92 f1 10 	sts	0x10F1, r14	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    2162:	f0 92 f2 10 	sts	0x10F2, r15	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	df 90       	pop	r13
    2170:	cf 90       	pop	r12
    2172:	bf 90       	pop	r11
    2174:	af 90       	pop	r10
    2176:	9f 90       	pop	r9
    2178:	8f 90       	pop	r8
    217a:	08 95       	ret

0000217c <xTaskCreate>:
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	3c 01       	movw	r6, r24
    21a0:	1b 01       	movw	r2, r22
    21a2:	4a 01       	movw	r8, r20
    21a4:	29 01       	movw	r4, r18
    21a6:	ca 01       	movw	r24, r20
    21a8:	0e 94 24 06 	call	0xc48	; 0xc48 <pvPortMalloc>
    21ac:	6c 01       	movw	r12, r24
    21ae:	89 2b       	or	r24, r25
    21b0:	71 f0       	breq	.+28     	; 0x21ce <xTaskCreate+0x52>
    21b2:	84 e3       	ldi	r24, 0x34	; 52
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 24 06 	call	0xc48	; 0xc48 <pvPortMalloc>
    21ba:	ec 01       	movw	r28, r24
    21bc:	89 2b       	or	r24, r25
    21be:	19 f0       	breq	.+6      	; 0x21c6 <xTaskCreate+0x4a>
    21c0:	dc 8e       	std	Y+28, r13	; 0x1c
    21c2:	cb 8e       	std	Y+27, r12	; 0x1b
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <xTaskCreate+0x56>
    21c6:	c6 01       	movw	r24, r12
    21c8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortFree>
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <xTaskCreate+0x56>
    21ce:	c0 e0       	ldi	r28, 0x00	; 0
    21d0:	d0 e0       	ldi	r29, 0x00	; 0
    21d2:	20 97       	sbiw	r28, 0x00	; 0
    21d4:	61 f0       	breq	.+24     	; 0x21ee <xTaskCreate+0x72>
    21d6:	a1 2c       	mov	r10, r1
    21d8:	b1 2c       	mov	r11, r1
    21da:	6e 01       	movw	r12, r28
    21dc:	92 01       	movw	r18, r4
    21de:	a4 01       	movw	r20, r8
    21e0:	b1 01       	movw	r22, r2
    21e2:	c3 01       	movw	r24, r6
    21e4:	e8 dd       	rcall	.-1072   	; 0x1db6 <prvInitialiseNewTask>
    21e6:	ce 01       	movw	r24, r28
    21e8:	93 de       	rcall	.-730    	; 0x1f10 <prvAddNewTaskToReadyList>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	01 c0       	rjmp	.+2      	; 0x21f0 <xTaskCreate+0x74>
    21ee:	8f ef       	ldi	r24, 0xFF	; 255
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	df 90       	pop	r13
    21fc:	cf 90       	pop	r12
    21fe:	bf 90       	pop	r11
    2200:	af 90       	pop	r10
    2202:	9f 90       	pop	r9
    2204:	8f 90       	pop	r8
    2206:	7f 90       	pop	r7
    2208:	6f 90       	pop	r6
    220a:	5f 90       	pop	r5
    220c:	4f 90       	pop	r4
    220e:	3f 90       	pop	r3
    2210:	2f 90       	pop	r2
    2212:	08 95       	ret

00002214 <vTaskStartScheduler>:
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	0f 2e       	mov	r0, r31
    221c:	fd ee       	ldi	r31, 0xED	; 237
    221e:	ef 2e       	mov	r14, r31
    2220:	f0 e1       	ldi	r31, 0x10	; 16
    2222:	ff 2e       	mov	r15, r31
    2224:	f0 2d       	mov	r31, r0
    2226:	00 e0       	ldi	r16, 0x00	; 0
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 ec       	ldi	r20, 0xC0	; 192
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	69 e2       	ldi	r22, 0x29	; 41
    2232:	74 e0       	ldi	r23, 0x04	; 4
    2234:	8e e4       	ldi	r24, 0x4E	; 78
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	a1 df       	rcall	.-190    	; 0x217c <xTaskCreate>
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	11 f4       	brne	.+4      	; 0x2242 <vTaskStartScheduler+0x2e>
    223e:	0e 94 bc 1a 	call	0x3578	; 0x3578 <xTimerCreateTimerTask>
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	c9 f4       	brne	.+50     	; 0x2278 <vTaskStartScheduler+0x64>
    2246:	f8 94       	cli
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	9f ef       	ldi	r25, 0xFF	; 255
    224c:	dc 01       	movw	r26, r24
    224e:	80 93 ef 10 	sts	0x10EF, r24	; 0x8010ef <xNextTaskUnblockTime>
    2252:	90 93 f0 10 	sts	0x10F0, r25	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    2256:	a0 93 f1 10 	sts	0x10F1, r26	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    225a:	b0 93 f2 10 	sts	0x10F2, r27	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <xSchedulerRunning>
    2264:	10 92 fc 10 	sts	0x10FC, r1	; 0x8010fc <xTickCount>
    2268:	10 92 fd 10 	sts	0x10FD, r1	; 0x8010fd <xTickCount+0x1>
    226c:	10 92 fe 10 	sts	0x10FE, r1	; 0x8010fe <xTickCount+0x2>
    2270:	10 92 ff 10 	sts	0x10FF, r1	; 0x8010ff <xTickCount+0x3>
    2274:	0e 94 a6 07 	call	0xf4c	; 0xf4c <xPortStartScheduler>
    2278:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	08 95       	ret

00002284 <vTaskSuspendAll>:
    2284:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	80 93 ec 10 	sts	0x10EC, r24	; 0x8010ec <uxSchedulerSuspended>
    228e:	08 95       	ret

00002290 <xTaskGetTickCount>:
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	0f 92       	push	r0
    2296:	60 91 fc 10 	lds	r22, 0x10FC	; 0x8010fc <xTickCount>
    229a:	70 91 fd 10 	lds	r23, 0x10FD	; 0x8010fd <xTickCount+0x1>
    229e:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <xTickCount+0x2>
    22a2:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <xTickCount+0x3>
    22a6:	0f 90       	pop	r0
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	08 95       	ret

000022ac <xTaskIncrementTick>:
    22ac:	cf 92       	push	r12
    22ae:	df 92       	push	r13
    22b0:	ef 92       	push	r14
    22b2:	ff 92       	push	r15
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    22bc:	81 11       	cpse	r24, r1
    22be:	05 c1       	rjmp	.+522    	; 0x24ca <xTaskIncrementTick+0x21e>
    22c0:	c0 90 fc 10 	lds	r12, 0x10FC	; 0x8010fc <xTickCount>
    22c4:	d0 90 fd 10 	lds	r13, 0x10FD	; 0x8010fd <xTickCount+0x1>
    22c8:	e0 90 fe 10 	lds	r14, 0x10FE	; 0x8010fe <xTickCount+0x2>
    22cc:	f0 90 ff 10 	lds	r15, 0x10FF	; 0x8010ff <xTickCount+0x3>
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	c8 1a       	sub	r12, r24
    22d4:	d8 0a       	sbc	r13, r24
    22d6:	e8 0a       	sbc	r14, r24
    22d8:	f8 0a       	sbc	r15, r24
    22da:	c0 92 fc 10 	sts	0x10FC, r12	; 0x8010fc <xTickCount>
    22de:	d0 92 fd 10 	sts	0x10FD, r13	; 0x8010fd <xTickCount+0x1>
    22e2:	e0 92 fe 10 	sts	0x10FE, r14	; 0x8010fe <xTickCount+0x2>
    22e6:	f0 92 ff 10 	sts	0x10FF, r15	; 0x8010ff <xTickCount+0x3>
    22ea:	c1 14       	cp	r12, r1
    22ec:	d1 04       	cpc	r13, r1
    22ee:	e1 04       	cpc	r14, r1
    22f0:	f1 04       	cpc	r15, r1
    22f2:	b1 f4       	brne	.+44     	; 0x2320 <xTaskIncrementTick+0x74>
    22f4:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxDelayedTaskList>
    22f8:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxDelayedTaskList+0x1>
    22fc:	20 91 23 11 	lds	r18, 0x1123	; 0x801123 <pxOverflowDelayedTaskList>
    2300:	30 91 24 11 	lds	r19, 0x1124	; 0x801124 <pxOverflowDelayedTaskList+0x1>
    2304:	30 93 26 11 	sts	0x1126, r19	; 0x801126 <pxDelayedTaskList+0x1>
    2308:	20 93 25 11 	sts	0x1125, r18	; 0x801125 <pxDelayedTaskList>
    230c:	90 93 24 11 	sts	0x1124, r25	; 0x801124 <pxOverflowDelayedTaskList+0x1>
    2310:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <pxOverflowDelayedTaskList>
    2314:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <xNumOfOverflows>
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <xNumOfOverflows>
    231e:	17 dd       	rcall	.-1490   	; 0x1d4e <prvResetNextTaskUnblockTime>
    2320:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <xNextTaskUnblockTime>
    2324:	90 91 f0 10 	lds	r25, 0x10F0	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    2328:	a0 91 f1 10 	lds	r26, 0x10F1	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    232c:	b0 91 f2 10 	lds	r27, 0x10F2	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    2330:	c8 16       	cp	r12, r24
    2332:	d9 06       	cpc	r13, r25
    2334:	ea 06       	cpc	r14, r26
    2336:	fb 06       	cpc	r15, r27
    2338:	20 f4       	brcc	.+8      	; 0x2342 <xTaskIncrementTick+0x96>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	b2 c0       	rjmp	.+356    	; 0x24a2 <xTaskIncrementTick+0x1f6>
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <xTaskIncrementTick+0x98>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxDelayedTaskList>
    2348:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxDelayedTaskList+0x1>
    234c:	90 81       	ld	r25, Z
    234e:	91 11       	cpse	r25, r1
    2350:	0c c0       	rjmp	.+24     	; 0x236a <xTaskIncrementTick+0xbe>
    2352:	4f ef       	ldi	r20, 0xFF	; 255
    2354:	5f ef       	ldi	r21, 0xFF	; 255
    2356:	ba 01       	movw	r22, r20
    2358:	40 93 ef 10 	sts	0x10EF, r20	; 0x8010ef <xNextTaskUnblockTime>
    235c:	50 93 f0 10 	sts	0x10F0, r21	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    2360:	60 93 f1 10 	sts	0x10F1, r22	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    2364:	70 93 f2 10 	sts	0x10F2, r23	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    2368:	9c c0       	rjmp	.+312    	; 0x24a2 <xTaskIncrementTick+0x1f6>
    236a:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxDelayedTaskList>
    236e:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxDelayedTaskList+0x1>
    2372:	07 80       	ldd	r0, Z+7	; 0x07
    2374:	f0 85       	ldd	r31, Z+8	; 0x08
    2376:	e0 2d       	mov	r30, r0
    2378:	00 84       	ldd	r0, Z+8	; 0x08
    237a:	f1 85       	ldd	r31, Z+9	; 0x09
    237c:	e0 2d       	mov	r30, r0
    237e:	42 81       	ldd	r20, Z+2	; 0x02
    2380:	53 81       	ldd	r21, Z+3	; 0x03
    2382:	64 81       	ldd	r22, Z+4	; 0x04
    2384:	75 81       	ldd	r23, Z+5	; 0x05
    2386:	c4 16       	cp	r12, r20
    2388:	d5 06       	cpc	r13, r21
    238a:	e6 06       	cpc	r14, r22
    238c:	f7 06       	cpc	r15, r23
    238e:	48 f4       	brcc	.+18     	; 0x23a2 <xTaskIncrementTick+0xf6>
    2390:	40 93 ef 10 	sts	0x10EF, r20	; 0x8010ef <xNextTaskUnblockTime>
    2394:	50 93 f0 10 	sts	0x10F0, r21	; 0x8010f0 <xNextTaskUnblockTime+0x1>
    2398:	60 93 f1 10 	sts	0x10F1, r22	; 0x8010f1 <xNextTaskUnblockTime+0x2>
    239c:	70 93 f2 10 	sts	0x10F2, r23	; 0x8010f2 <xNextTaskUnblockTime+0x3>
    23a0:	80 c0       	rjmp	.+256    	; 0x24a2 <xTaskIncrementTick+0x1f6>
    23a2:	a4 85       	ldd	r26, Z+12	; 0x0c
    23a4:	b5 85       	ldd	r27, Z+13	; 0x0d
    23a6:	c6 81       	ldd	r28, Z+6	; 0x06
    23a8:	d7 81       	ldd	r29, Z+7	; 0x07
    23aa:	20 85       	ldd	r18, Z+8	; 0x08
    23ac:	31 85       	ldd	r19, Z+9	; 0x09
    23ae:	3f 83       	std	Y+7, r19	; 0x07
    23b0:	2e 83       	std	Y+6, r18	; 0x06
    23b2:	c0 85       	ldd	r28, Z+8	; 0x08
    23b4:	d1 85       	ldd	r29, Z+9	; 0x09
    23b6:	26 81       	ldd	r18, Z+6	; 0x06
    23b8:	37 81       	ldd	r19, Z+7	; 0x07
    23ba:	3d 83       	std	Y+5, r19	; 0x05
    23bc:	2c 83       	std	Y+4, r18	; 0x04
    23be:	11 96       	adiw	r26, 0x01	; 1
    23c0:	4d 91       	ld	r20, X+
    23c2:	5c 91       	ld	r21, X
    23c4:	12 97       	sbiw	r26, 0x02	; 2
    23c6:	9f 01       	movw	r18, r30
    23c8:	2e 5f       	subi	r18, 0xFE	; 254
    23ca:	3f 4f       	sbci	r19, 0xFF	; 255
    23cc:	42 17       	cp	r20, r18
    23ce:	53 07       	cpc	r21, r19
    23d0:	31 f4       	brne	.+12     	; 0x23de <xTaskIncrementTick+0x132>
    23d2:	40 85       	ldd	r20, Z+8	; 0x08
    23d4:	51 85       	ldd	r21, Z+9	; 0x09
    23d6:	12 96       	adiw	r26, 0x02	; 2
    23d8:	5c 93       	st	X, r21
    23da:	4e 93       	st	-X, r20
    23dc:	11 97       	sbiw	r26, 0x01	; 1
    23de:	15 86       	std	Z+13, r1	; 0x0d
    23e0:	14 86       	std	Z+12, r1	; 0x0c
    23e2:	9c 91       	ld	r25, X
    23e4:	91 50       	subi	r25, 0x01	; 1
    23e6:	9c 93       	st	X, r25
    23e8:	a0 8d       	ldd	r26, Z+24	; 0x18
    23ea:	b1 8d       	ldd	r27, Z+25	; 0x19
    23ec:	10 97       	sbiw	r26, 0x00	; 0
    23ee:	09 f1       	breq	.+66     	; 0x2432 <xTaskIncrementTick+0x186>
    23f0:	c2 89       	ldd	r28, Z+18	; 0x12
    23f2:	d3 89       	ldd	r29, Z+19	; 0x13
    23f4:	44 89       	ldd	r20, Z+20	; 0x14
    23f6:	55 89       	ldd	r21, Z+21	; 0x15
    23f8:	5f 83       	std	Y+7, r21	; 0x07
    23fa:	4e 83       	std	Y+6, r20	; 0x06
    23fc:	c4 89       	ldd	r28, Z+20	; 0x14
    23fe:	d5 89       	ldd	r29, Z+21	; 0x15
    2400:	42 89       	ldd	r20, Z+18	; 0x12
    2402:	53 89       	ldd	r21, Z+19	; 0x13
    2404:	5d 83       	std	Y+5, r21	; 0x05
    2406:	4c 83       	std	Y+4, r20	; 0x04
    2408:	11 96       	adiw	r26, 0x01	; 1
    240a:	6d 91       	ld	r22, X+
    240c:	7c 91       	ld	r23, X
    240e:	12 97       	sbiw	r26, 0x02	; 2
    2410:	af 01       	movw	r20, r30
    2412:	42 5f       	subi	r20, 0xF2	; 242
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	64 17       	cp	r22, r20
    2418:	75 07       	cpc	r23, r21
    241a:	31 f4       	brne	.+12     	; 0x2428 <xTaskIncrementTick+0x17c>
    241c:	44 89       	ldd	r20, Z+20	; 0x14
    241e:	55 89       	ldd	r21, Z+21	; 0x15
    2420:	12 96       	adiw	r26, 0x02	; 2
    2422:	5c 93       	st	X, r21
    2424:	4e 93       	st	-X, r20
    2426:	11 97       	sbiw	r26, 0x01	; 1
    2428:	11 8e       	std	Z+25, r1	; 0x19
    242a:	10 8e       	std	Z+24, r1	; 0x18
    242c:	9c 91       	ld	r25, X
    242e:	91 50       	subi	r25, 0x01	; 1
    2430:	9c 93       	st	X, r25
    2432:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2434:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    2438:	9a 17       	cp	r25, r26
    243a:	10 f4       	brcc	.+4      	; 0x2440 <xTaskIncrementTick+0x194>
    243c:	a0 93 fb 10 	sts	0x10FB, r26	; 0x8010fb <uxTopReadyPriority>
    2440:	9b e0       	ldi	r25, 0x0B	; 11
    2442:	9a 9f       	mul	r25, r26
    2444:	d0 01       	movw	r26, r0
    2446:	11 24       	eor	r1, r1
    2448:	a3 5c       	subi	r26, 0xC3	; 195
    244a:	be 4e       	sbci	r27, 0xEE	; 238
    244c:	11 96       	adiw	r26, 0x01	; 1
    244e:	0d 90       	ld	r0, X+
    2450:	bc 91       	ld	r27, X
    2452:	a0 2d       	mov	r26, r0
    2454:	b7 83       	std	Z+7, r27	; 0x07
    2456:	a6 83       	std	Z+6, r26	; 0x06
    2458:	16 96       	adiw	r26, 0x06	; 6
    245a:	4d 91       	ld	r20, X+
    245c:	5c 91       	ld	r21, X
    245e:	17 97       	sbiw	r26, 0x07	; 7
    2460:	51 87       	std	Z+9, r21	; 0x09
    2462:	40 87       	std	Z+8, r20	; 0x08
    2464:	16 96       	adiw	r26, 0x06	; 6
    2466:	cd 91       	ld	r28, X+
    2468:	dc 91       	ld	r29, X
    246a:	17 97       	sbiw	r26, 0x07	; 7
    246c:	3d 83       	std	Y+5, r19	; 0x05
    246e:	2c 83       	std	Y+4, r18	; 0x04
    2470:	17 96       	adiw	r26, 0x07	; 7
    2472:	3c 93       	st	X, r19
    2474:	2e 93       	st	-X, r18
    2476:	16 97       	sbiw	r26, 0x06	; 6
    2478:	a2 8d       	ldd	r26, Z+26	; 0x1a
    247a:	9a 9f       	mul	r25, r26
    247c:	d0 01       	movw	r26, r0
    247e:	11 24       	eor	r1, r1
    2480:	a3 5c       	subi	r26, 0xC3	; 195
    2482:	be 4e       	sbci	r27, 0xEE	; 238
    2484:	b5 87       	std	Z+13, r27	; 0x0d
    2486:	a4 87       	std	Z+12, r26	; 0x0c
    2488:	9c 91       	ld	r25, X
    248a:	9f 5f       	subi	r25, 0xFF	; 255
    248c:	9c 93       	st	X, r25
    248e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2490:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2494:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2498:	92 8d       	ldd	r25, Z+26	; 0x1a
    249a:	29 17       	cp	r18, r25
    249c:	08 f0       	brcs	.+2      	; 0x24a0 <xTaskIncrementTick+0x1f4>
    249e:	4f cf       	rjmp	.-354    	; 0x233e <xTaskIncrementTick+0x92>
    24a0:	51 cf       	rjmp	.-350    	; 0x2344 <xTaskIncrementTick+0x98>
    24a2:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    24a6:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    24aa:	e2 8d       	ldd	r30, Z+26	; 0x1a
    24ac:	9b e0       	ldi	r25, 0x0B	; 11
    24ae:	e9 9f       	mul	r30, r25
    24b0:	f0 01       	movw	r30, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	e3 5c       	subi	r30, 0xC3	; 195
    24b6:	fe 4e       	sbci	r31, 0xEE	; 238
    24b8:	90 81       	ld	r25, Z
    24ba:	92 30       	cpi	r25, 0x02	; 2
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <xTaskIncrementTick+0x214>
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <xYieldPending>
    24c4:	91 11       	cpse	r25, r1
    24c6:	16 c0       	rjmp	.+44     	; 0x24f4 <xTaskIncrementTick+0x248>
    24c8:	16 c0       	rjmp	.+44     	; 0x24f6 <xTaskIncrementTick+0x24a>
    24ca:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <xPendedTicks>
    24ce:	90 91 f7 10 	lds	r25, 0x10F7	; 0x8010f7 <xPendedTicks+0x1>
    24d2:	a0 91 f8 10 	lds	r26, 0x10F8	; 0x8010f8 <xPendedTicks+0x2>
    24d6:	b0 91 f9 10 	lds	r27, 0x10F9	; 0x8010f9 <xPendedTicks+0x3>
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	a1 1d       	adc	r26, r1
    24de:	b1 1d       	adc	r27, r1
    24e0:	80 93 f6 10 	sts	0x10F6, r24	; 0x8010f6 <xPendedTicks>
    24e4:	90 93 f7 10 	sts	0x10F7, r25	; 0x8010f7 <xPendedTicks+0x1>
    24e8:	a0 93 f8 10 	sts	0x10F8, r26	; 0x8010f8 <xPendedTicks+0x2>
    24ec:	b0 93 f9 10 	sts	0x10F9, r27	; 0x8010f9 <xPendedTicks+0x3>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <xTaskIncrementTick+0x24a>
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	df 90       	pop	r13
    2500:	cf 90       	pop	r12
    2502:	08 95       	ret

00002504 <xTaskResumeAll>:
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	0f 92       	push	r0
    2516:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    251a:	81 50       	subi	r24, 0x01	; 1
    251c:	80 93 ec 10 	sts	0x10EC, r24	; 0x8010ec <uxSchedulerSuspended>
    2520:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    2524:	81 11       	cpse	r24, r1
    2526:	be c0       	rjmp	.+380    	; 0x26a4 <xTaskResumeAll+0x1a0>
    2528:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxCurrentNumberOfTasks>
    252c:	81 11       	cpse	r24, r1
    252e:	88 c0       	rjmp	.+272    	; 0x2640 <xTaskResumeAll+0x13c>
    2530:	bc c0       	rjmp	.+376    	; 0x26aa <xTaskResumeAll+0x1a6>
    2532:	e0 91 1f 11 	lds	r30, 0x111F	; 0x80111f <xPendingReadyList+0x7>
    2536:	f0 91 20 11 	lds	r31, 0x1120	; 0x801120 <xPendingReadyList+0x8>
    253a:	00 84       	ldd	r0, Z+8	; 0x08
    253c:	f1 85       	ldd	r31, Z+9	; 0x09
    253e:	e0 2d       	mov	r30, r0
    2540:	a0 8d       	ldd	r26, Z+24	; 0x18
    2542:	b1 8d       	ldd	r27, Z+25	; 0x19
    2544:	c2 89       	ldd	r28, Z+18	; 0x12
    2546:	d3 89       	ldd	r29, Z+19	; 0x13
    2548:	84 89       	ldd	r24, Z+20	; 0x14
    254a:	95 89       	ldd	r25, Z+21	; 0x15
    254c:	9f 83       	std	Y+7, r25	; 0x07
    254e:	8e 83       	std	Y+6, r24	; 0x06
    2550:	c4 89       	ldd	r28, Z+20	; 0x14
    2552:	d5 89       	ldd	r29, Z+21	; 0x15
    2554:	82 89       	ldd	r24, Z+18	; 0x12
    2556:	93 89       	ldd	r25, Z+19	; 0x13
    2558:	9d 83       	std	Y+5, r25	; 0x05
    255a:	8c 83       	std	Y+4, r24	; 0x04
    255c:	11 96       	adiw	r26, 0x01	; 1
    255e:	2d 91       	ld	r18, X+
    2560:	3c 91       	ld	r19, X
    2562:	12 97       	sbiw	r26, 0x02	; 2
    2564:	cf 01       	movw	r24, r30
    2566:	0e 96       	adiw	r24, 0x0e	; 14
    2568:	28 17       	cp	r18, r24
    256a:	39 07       	cpc	r19, r25
    256c:	31 f4       	brne	.+12     	; 0x257a <xTaskResumeAll+0x76>
    256e:	84 89       	ldd	r24, Z+20	; 0x14
    2570:	95 89       	ldd	r25, Z+21	; 0x15
    2572:	12 96       	adiw	r26, 0x02	; 2
    2574:	9c 93       	st	X, r25
    2576:	8e 93       	st	-X, r24
    2578:	11 97       	sbiw	r26, 0x01	; 1
    257a:	11 8e       	std	Z+25, r1	; 0x19
    257c:	10 8e       	std	Z+24, r1	; 0x18
    257e:	8c 91       	ld	r24, X
    2580:	81 50       	subi	r24, 0x01	; 1
    2582:	8c 93       	st	X, r24
    2584:	a4 85       	ldd	r26, Z+12	; 0x0c
    2586:	b5 85       	ldd	r27, Z+13	; 0x0d
    2588:	c6 81       	ldd	r28, Z+6	; 0x06
    258a:	d7 81       	ldd	r29, Z+7	; 0x07
    258c:	80 85       	ldd	r24, Z+8	; 0x08
    258e:	91 85       	ldd	r25, Z+9	; 0x09
    2590:	9f 83       	std	Y+7, r25	; 0x07
    2592:	8e 83       	std	Y+6, r24	; 0x06
    2594:	c0 85       	ldd	r28, Z+8	; 0x08
    2596:	d1 85       	ldd	r29, Z+9	; 0x09
    2598:	86 81       	ldd	r24, Z+6	; 0x06
    259a:	97 81       	ldd	r25, Z+7	; 0x07
    259c:	9d 83       	std	Y+5, r25	; 0x05
    259e:	8c 83       	std	Y+4, r24	; 0x04
    25a0:	11 96       	adiw	r26, 0x01	; 1
    25a2:	8d 91       	ld	r24, X+
    25a4:	9c 91       	ld	r25, X
    25a6:	12 97       	sbiw	r26, 0x02	; 2
    25a8:	9f 01       	movw	r18, r30
    25aa:	2e 5f       	subi	r18, 0xFE	; 254
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	82 17       	cp	r24, r18
    25b0:	93 07       	cpc	r25, r19
    25b2:	31 f4       	brne	.+12     	; 0x25c0 <xTaskResumeAll+0xbc>
    25b4:	80 85       	ldd	r24, Z+8	; 0x08
    25b6:	91 85       	ldd	r25, Z+9	; 0x09
    25b8:	12 96       	adiw	r26, 0x02	; 2
    25ba:	9c 93       	st	X, r25
    25bc:	8e 93       	st	-X, r24
    25be:	11 97       	sbiw	r26, 0x01	; 1
    25c0:	15 86       	std	Z+13, r1	; 0x0d
    25c2:	14 86       	std	Z+12, r1	; 0x0c
    25c4:	8c 91       	ld	r24, X
    25c6:	81 50       	subi	r24, 0x01	; 1
    25c8:	8c 93       	st	X, r24
    25ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25cc:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    25d0:	8a 17       	cp	r24, r26
    25d2:	10 f4       	brcc	.+4      	; 0x25d8 <xTaskResumeAll+0xd4>
    25d4:	a0 93 fb 10 	sts	0x10FB, r26	; 0x8010fb <uxTopReadyPriority>
    25d8:	8b e0       	ldi	r24, 0x0B	; 11
    25da:	8a 9f       	mul	r24, r26
    25dc:	d0 01       	movw	r26, r0
    25de:	11 24       	eor	r1, r1
    25e0:	a3 5c       	subi	r26, 0xC3	; 195
    25e2:	be 4e       	sbci	r27, 0xEE	; 238
    25e4:	11 96       	adiw	r26, 0x01	; 1
    25e6:	0d 90       	ld	r0, X+
    25e8:	bc 91       	ld	r27, X
    25ea:	a0 2d       	mov	r26, r0
    25ec:	b7 83       	std	Z+7, r27	; 0x07
    25ee:	a6 83       	std	Z+6, r26	; 0x06
    25f0:	16 96       	adiw	r26, 0x06	; 6
    25f2:	4d 91       	ld	r20, X+
    25f4:	5c 91       	ld	r21, X
    25f6:	17 97       	sbiw	r26, 0x07	; 7
    25f8:	51 87       	std	Z+9, r21	; 0x09
    25fa:	40 87       	std	Z+8, r20	; 0x08
    25fc:	16 96       	adiw	r26, 0x06	; 6
    25fe:	cd 91       	ld	r28, X+
    2600:	dc 91       	ld	r29, X
    2602:	17 97       	sbiw	r26, 0x07	; 7
    2604:	3d 83       	std	Y+5, r19	; 0x05
    2606:	2c 83       	std	Y+4, r18	; 0x04
    2608:	17 96       	adiw	r26, 0x07	; 7
    260a:	3c 93       	st	X, r19
    260c:	2e 93       	st	-X, r18
    260e:	16 97       	sbiw	r26, 0x06	; 6
    2610:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2612:	8a 9f       	mul	r24, r26
    2614:	d0 01       	movw	r26, r0
    2616:	11 24       	eor	r1, r1
    2618:	a3 5c       	subi	r26, 0xC3	; 195
    261a:	be 4e       	sbci	r27, 0xEE	; 238
    261c:	b5 87       	std	Z+13, r27	; 0x0d
    261e:	a4 87       	std	Z+12, r26	; 0x0c
    2620:	8c 91       	ld	r24, X
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	8c 93       	st	X, r24
    2626:	92 8d       	ldd	r25, Z+26	; 0x1a
    2628:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    262c:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2630:	5a 96       	adiw	r26, 0x1a	; 26
    2632:	8c 91       	ld	r24, X
    2634:	98 17       	cp	r25, r24
    2636:	30 f0       	brcs	.+12     	; 0x2644 <xTaskResumeAll+0x140>
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xYieldPending>
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <xTaskResumeAll+0x140>
    2640:	e0 e0       	ldi	r30, 0x00	; 0
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <xPendingReadyList>
    2648:	81 11       	cpse	r24, r1
    264a:	73 cf       	rjmp	.-282    	; 0x2532 <xTaskResumeAll+0x2e>
    264c:	ef 2b       	or	r30, r31
    264e:	09 f0       	breq	.+2      	; 0x2652 <xTaskResumeAll+0x14e>
    2650:	7e db       	rcall	.-2308   	; 0x1d4e <prvResetNextTaskUnblockTime>
    2652:	c0 90 f6 10 	lds	r12, 0x10F6	; 0x8010f6 <xPendedTicks>
    2656:	d0 90 f7 10 	lds	r13, 0x10F7	; 0x8010f7 <xPendedTicks+0x1>
    265a:	e0 90 f8 10 	lds	r14, 0x10F8	; 0x8010f8 <xPendedTicks+0x2>
    265e:	f0 90 f9 10 	lds	r15, 0x10F9	; 0x8010f9 <xPendedTicks+0x3>
    2662:	c1 14       	cp	r12, r1
    2664:	d1 04       	cpc	r13, r1
    2666:	e1 04       	cpc	r14, r1
    2668:	f1 04       	cpc	r15, r1
    266a:	a1 f0       	breq	.+40     	; 0x2694 <xTaskResumeAll+0x190>
    266c:	1f de       	rcall	.-962    	; 0x22ac <xTaskIncrementTick>
    266e:	88 23       	and	r24, r24
    2670:	19 f0       	breq	.+6      	; 0x2678 <xTaskResumeAll+0x174>
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xYieldPending>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	c8 1a       	sub	r12, r24
    267c:	d1 08       	sbc	r13, r1
    267e:	e1 08       	sbc	r14, r1
    2680:	f1 08       	sbc	r15, r1
    2682:	a1 f7       	brne	.-24     	; 0x266c <xTaskResumeAll+0x168>
    2684:	10 92 f6 10 	sts	0x10F6, r1	; 0x8010f6 <xPendedTicks>
    2688:	10 92 f7 10 	sts	0x10F7, r1	; 0x8010f7 <xPendedTicks+0x1>
    268c:	10 92 f8 10 	sts	0x10F8, r1	; 0x8010f8 <xPendedTicks+0x2>
    2690:	10 92 f9 10 	sts	0x10F9, r1	; 0x8010f9 <xPendedTicks+0x3>
    2694:	80 91 f5 10 	lds	r24, 0x10F5	; 0x8010f5 <xYieldPending>
    2698:	88 23       	and	r24, r24
    269a:	31 f0       	breq	.+12     	; 0x26a8 <xTaskResumeAll+0x1a4>
    269c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <xTaskResumeAll+0x1a6>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <xTaskResumeAll+0x1a6>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	0f 90       	pop	r0
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	08 95       	ret

000026bc <xTaskDelayUntil>:
    26bc:	8f 92       	push	r8
    26be:	9f 92       	push	r9
    26c0:	af 92       	push	r10
    26c2:	bf 92       	push	r11
    26c4:	cf 92       	push	r12
    26c6:	df 92       	push	r13
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	ec 01       	movw	r28, r24
    26d4:	6a 01       	movw	r12, r20
    26d6:	7b 01       	movw	r14, r22
    26d8:	d5 dd       	rcall	.-1110   	; 0x2284 <vTaskSuspendAll>
    26da:	80 90 fc 10 	lds	r8, 0x10FC	; 0x8010fc <xTickCount>
    26de:	90 90 fd 10 	lds	r9, 0x10FD	; 0x8010fd <xTickCount+0x1>
    26e2:	a0 90 fe 10 	lds	r10, 0x10FE	; 0x8010fe <xTickCount+0x2>
    26e6:	b0 90 ff 10 	lds	r11, 0x10FF	; 0x8010ff <xTickCount+0x3>
    26ea:	88 81       	ld	r24, Y
    26ec:	99 81       	ldd	r25, Y+1	; 0x01
    26ee:	aa 81       	ldd	r26, Y+2	; 0x02
    26f0:	bb 81       	ldd	r27, Y+3	; 0x03
    26f2:	ac 01       	movw	r20, r24
    26f4:	bd 01       	movw	r22, r26
    26f6:	4c 0d       	add	r20, r12
    26f8:	5d 1d       	adc	r21, r13
    26fa:	6e 1d       	adc	r22, r14
    26fc:	7f 1d       	adc	r23, r15
    26fe:	88 16       	cp	r8, r24
    2700:	99 06       	cpc	r9, r25
    2702:	aa 06       	cpc	r10, r26
    2704:	bb 06       	cpc	r11, r27
    2706:	60 f4       	brcc	.+24     	; 0x2720 <xTaskDelayUntil+0x64>
    2708:	48 17       	cp	r20, r24
    270a:	59 07       	cpc	r21, r25
    270c:	6a 07       	cpc	r22, r26
    270e:	7b 07       	cpc	r23, r27
    2710:	98 f4       	brcc	.+38     	; 0x2738 <xTaskDelayUntil+0x7c>
    2712:	84 16       	cp	r8, r20
    2714:	95 06       	cpc	r9, r21
    2716:	a6 06       	cpc	r10, r22
    2718:	b7 06       	cpc	r11, r23
    271a:	80 f0       	brcs	.+32     	; 0x273c <xTaskDelayUntil+0x80>
    271c:	10 e0       	ldi	r17, 0x00	; 0
    271e:	13 c0       	rjmp	.+38     	; 0x2746 <xTaskDelayUntil+0x8a>
    2720:	48 17       	cp	r20, r24
    2722:	59 07       	cpc	r21, r25
    2724:	6a 07       	cpc	r22, r26
    2726:	7b 07       	cpc	r23, r27
    2728:	58 f0       	brcs	.+22     	; 0x2740 <xTaskDelayUntil+0x84>
    272a:	84 16       	cp	r8, r20
    272c:	95 06       	cpc	r9, r21
    272e:	a6 06       	cpc	r10, r22
    2730:	b7 06       	cpc	r11, r23
    2732:	40 f0       	brcs	.+16     	; 0x2744 <xTaskDelayUntil+0x88>
    2734:	10 e0       	ldi	r17, 0x00	; 0
    2736:	07 c0       	rjmp	.+14     	; 0x2746 <xTaskDelayUntil+0x8a>
    2738:	10 e0       	ldi	r17, 0x00	; 0
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <xTaskDelayUntil+0x8a>
    273c:	11 e0       	ldi	r17, 0x01	; 1
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <xTaskDelayUntil+0x8a>
    2740:	11 e0       	ldi	r17, 0x01	; 1
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <xTaskDelayUntil+0x8a>
    2744:	11 e0       	ldi	r17, 0x01	; 1
    2746:	48 83       	st	Y, r20
    2748:	59 83       	std	Y+1, r21	; 0x01
    274a:	6a 83       	std	Y+2, r22	; 0x02
    274c:	7b 83       	std	Y+3, r23	; 0x03
    274e:	11 23       	and	r17, r17
    2750:	41 f0       	breq	.+16     	; 0x2762 <xTaskDelayUntil+0xa6>
    2752:	cb 01       	movw	r24, r22
    2754:	ba 01       	movw	r22, r20
    2756:	68 19       	sub	r22, r8
    2758:	79 09       	sbc	r23, r9
    275a:	8a 09       	sbc	r24, r10
    275c:	9b 09       	sbc	r25, r11
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	6b dc       	rcall	.-1834   	; 0x2038 <prvAddCurrentTaskToDelayedList>
    2762:	d0 de       	rcall	.-608    	; 0x2504 <xTaskResumeAll>
    2764:	81 11       	cpse	r24, r1
    2766:	02 c0       	rjmp	.+4      	; 0x276c <xTaskDelayUntil+0xb0>
    2768:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    276c:	81 2f       	mov	r24, r17
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	af 90       	pop	r10
    2780:	9f 90       	pop	r9
    2782:	8f 90       	pop	r8
    2784:	08 95       	ret

00002786 <vTaskDelay>:
    2786:	cf 92       	push	r12
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	6b 01       	movw	r12, r22
    2790:	7c 01       	movw	r14, r24
    2792:	67 2b       	or	r22, r23
    2794:	68 2b       	or	r22, r24
    2796:	69 2b       	or	r22, r25
    2798:	39 f0       	breq	.+14     	; 0x27a8 <vTaskDelay+0x22>
    279a:	74 dd       	rcall	.-1304   	; 0x2284 <vTaskSuspendAll>
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	c7 01       	movw	r24, r14
    27a0:	b6 01       	movw	r22, r12
    27a2:	4a dc       	rcall	.-1900   	; 0x2038 <prvAddCurrentTaskToDelayedList>
    27a4:	af de       	rcall	.-674    	; 0x2504 <xTaskResumeAll>
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <vTaskDelay+0x24>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	81 11       	cpse	r24, r1
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <vTaskDelay+0x2c>
    27ae:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    27b2:	ff 90       	pop	r15
    27b4:	ef 90       	pop	r14
    27b6:	df 90       	pop	r13
    27b8:	cf 90       	pop	r12
    27ba:	08 95       	ret

000027bc <vTaskSwitchContext>:
    27bc:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    27c0:	88 23       	and	r24, r24
    27c2:	21 f0       	breq	.+8      	; 0x27cc <vTaskSwitchContext+0x10>
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xYieldPending>
    27ca:	08 95       	ret
    27cc:	10 92 f5 10 	sts	0x10F5, r1	; 0x8010f5 <xYieldPending>
    27d0:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    27d4:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    27d8:	20 81       	ld	r18, Z
    27da:	31 81       	ldd	r19, Z+1	; 0x01
    27dc:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    27e0:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    27e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    27e6:	94 8d       	ldd	r25, Z+28	; 0x1c
    27e8:	82 17       	cp	r24, r18
    27ea:	93 07       	cpc	r25, r19
    27ec:	60 f0       	brcs	.+24     	; 0x2806 <vTaskSwitchContext+0x4a>
    27ee:	60 91 ab 11 	lds	r22, 0x11AB	; 0x8011ab <pxCurrentTCB>
    27f2:	70 91 ac 11 	lds	r23, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    27f6:	63 5e       	subi	r22, 0xE3	; 227
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    27fe:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2802:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <vApplicationStackOverflowHook>
    2806:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    280a:	01 c0       	rjmp	.+2      	; 0x280e <vTaskSwitchContext+0x52>
    280c:	81 50       	subi	r24, 0x01	; 1
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	9b e0       	ldi	r25, 0x0B	; 11
    2814:	92 9f       	mul	r25, r18
    2816:	f0 01       	movw	r30, r0
    2818:	93 9f       	mul	r25, r19
    281a:	f0 0d       	add	r31, r0
    281c:	11 24       	eor	r1, r1
    281e:	e3 5c       	subi	r30, 0xC3	; 195
    2820:	fe 4e       	sbci	r31, 0xEE	; 238
    2822:	90 81       	ld	r25, Z
    2824:	99 23       	and	r25, r25
    2826:	91 f3       	breq	.-28     	; 0x280c <vTaskSwitchContext+0x50>
    2828:	9b e0       	ldi	r25, 0x0B	; 11
    282a:	92 9f       	mul	r25, r18
    282c:	a0 01       	movw	r20, r0
    282e:	93 9f       	mul	r25, r19
    2830:	50 0d       	add	r21, r0
    2832:	11 24       	eor	r1, r1
    2834:	df 01       	movw	r26, r30
    2836:	01 80       	ldd	r0, Z+1	; 0x01
    2838:	f2 81       	ldd	r31, Z+2	; 0x02
    283a:	e0 2d       	mov	r30, r0
    283c:	04 80       	ldd	r0, Z+4	; 0x04
    283e:	f5 81       	ldd	r31, Z+5	; 0x05
    2840:	e0 2d       	mov	r30, r0
    2842:	12 96       	adiw	r26, 0x02	; 2
    2844:	fc 93       	st	X, r31
    2846:	ee 93       	st	-X, r30
    2848:	11 97       	sbiw	r26, 0x01	; 1
    284a:	40 5c       	subi	r20, 0xC0	; 192
    284c:	5e 4e       	sbci	r21, 0xEE	; 238
    284e:	e4 17       	cp	r30, r20
    2850:	f5 07       	cpc	r31, r21
    2852:	29 f4       	brne	.+10     	; 0x285e <vTaskSwitchContext+0xa2>
    2854:	44 81       	ldd	r20, Z+4	; 0x04
    2856:	55 81       	ldd	r21, Z+5	; 0x05
    2858:	fd 01       	movw	r30, r26
    285a:	52 83       	std	Z+2, r21	; 0x02
    285c:	41 83       	std	Z+1, r20	; 0x01
    285e:	9b e0       	ldi	r25, 0x0B	; 11
    2860:	92 9f       	mul	r25, r18
    2862:	f0 01       	movw	r30, r0
    2864:	93 9f       	mul	r25, r19
    2866:	f0 0d       	add	r31, r0
    2868:	11 24       	eor	r1, r1
    286a:	e3 5c       	subi	r30, 0xC3	; 195
    286c:	fe 4e       	sbci	r31, 0xEE	; 238
    286e:	01 80       	ldd	r0, Z+1	; 0x01
    2870:	f2 81       	ldd	r31, Z+2	; 0x02
    2872:	e0 2d       	mov	r30, r0
    2874:	20 85       	ldd	r18, Z+8	; 0x08
    2876:	31 85       	ldd	r19, Z+9	; 0x09
    2878:	30 93 ac 11 	sts	0x11AC, r19	; 0x8011ac <pxCurrentTCB+0x1>
    287c:	20 93 ab 11 	sts	0x11AB, r18	; 0x8011ab <pxCurrentTCB>
    2880:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <uxTopReadyPriority>
    2884:	08 95       	ret

00002886 <vTaskPlaceOnEventList>:
    2886:	cf 92       	push	r12
    2888:	df 92       	push	r13
    288a:	ef 92       	push	r14
    288c:	ff 92       	push	r15
    288e:	6a 01       	movw	r12, r20
    2890:	7b 01       	movw	r14, r22
    2892:	60 91 ab 11 	lds	r22, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2896:	70 91 ac 11 	lds	r23, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    289a:	62 5f       	subi	r22, 0xF2	; 242
    289c:	7f 4f       	sbci	r23, 0xFF	; 255
    289e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vListInsert>
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	c7 01       	movw	r24, r14
    28a6:	b6 01       	movw	r22, r12
    28a8:	c7 db       	rcall	.-2162   	; 0x2038 <prvAddCurrentTaskToDelayedList>
    28aa:	ff 90       	pop	r15
    28ac:	ef 90       	pop	r14
    28ae:	df 90       	pop	r13
    28b0:	cf 90       	pop	r12
    28b2:	08 95       	ret

000028b4 <vTaskPlaceOnUnorderedEventList>:
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	fc 01       	movw	r30, r24
    28be:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    28c2:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    28c6:	70 68       	ori	r23, 0x80	; 128
    28c8:	1e 96       	adiw	r26, 0x0e	; 14
    28ca:	4d 93       	st	X+, r20
    28cc:	5d 93       	st	X+, r21
    28ce:	6d 93       	st	X+, r22
    28d0:	7c 93       	st	X, r23
    28d2:	51 97       	sbiw	r26, 0x11	; 17
    28d4:	a1 81       	ldd	r26, Z+1	; 0x01
    28d6:	b2 81       	ldd	r27, Z+2	; 0x02
    28d8:	c0 91 ab 11 	lds	r28, 0x11AB	; 0x8011ab <pxCurrentTCB>
    28dc:	d0 91 ac 11 	lds	r29, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    28e0:	bb 8b       	std	Y+19, r27	; 0x13
    28e2:	aa 8b       	std	Y+18, r26	; 0x12
    28e4:	c0 91 ab 11 	lds	r28, 0x11AB	; 0x8011ab <pxCurrentTCB>
    28e8:	d0 91 ac 11 	lds	r29, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    28ec:	16 96       	adiw	r26, 0x06	; 6
    28ee:	8d 91       	ld	r24, X+
    28f0:	9c 91       	ld	r25, X
    28f2:	17 97       	sbiw	r26, 0x07	; 7
    28f4:	9d 8b       	std	Y+21, r25	; 0x15
    28f6:	8c 8b       	std	Y+20, r24	; 0x14
    28f8:	16 96       	adiw	r26, 0x06	; 6
    28fa:	cd 91       	ld	r28, X+
    28fc:	dc 91       	ld	r29, X
    28fe:	17 97       	sbiw	r26, 0x07	; 7
    2900:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2904:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2908:	0e 96       	adiw	r24, 0x0e	; 14
    290a:	9d 83       	std	Y+5, r25	; 0x05
    290c:	8c 83       	std	Y+4, r24	; 0x04
    290e:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2912:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2916:	0e 96       	adiw	r24, 0x0e	; 14
    2918:	17 96       	adiw	r26, 0x07	; 7
    291a:	9c 93       	st	X, r25
    291c:	8e 93       	st	-X, r24
    291e:	16 97       	sbiw	r26, 0x06	; 6
    2920:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2924:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2928:	59 96       	adiw	r26, 0x19	; 25
    292a:	fc 93       	st	X, r31
    292c:	ee 93       	st	-X, r30
    292e:	58 97       	sbiw	r26, 0x18	; 24
    2930:	80 81       	ld	r24, Z
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	80 83       	st	Z, r24
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	c9 01       	movw	r24, r18
    293a:	b8 01       	movw	r22, r16
    293c:	7d db       	rcall	.-2310   	; 0x2038 <prvAddCurrentTaskToDelayedList>
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	08 95       	ret

00002948 <vTaskPlaceOnEventListRestricted>:
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	fc 01       	movw	r30, r24
    294e:	cb 01       	movw	r24, r22
    2950:	ba 01       	movw	r22, r20
    2952:	a1 81       	ldd	r26, Z+1	; 0x01
    2954:	b2 81       	ldd	r27, Z+2	; 0x02
    2956:	c0 91 ab 11 	lds	r28, 0x11AB	; 0x8011ab <pxCurrentTCB>
    295a:	d0 91 ac 11 	lds	r29, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    295e:	bb 8b       	std	Y+19, r27	; 0x13
    2960:	aa 8b       	std	Y+18, r26	; 0x12
    2962:	c0 91 ab 11 	lds	r28, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2966:	d0 91 ac 11 	lds	r29, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    296a:	16 96       	adiw	r26, 0x06	; 6
    296c:	4d 91       	ld	r20, X+
    296e:	5c 91       	ld	r21, X
    2970:	17 97       	sbiw	r26, 0x07	; 7
    2972:	5d 8b       	std	Y+21, r21	; 0x15
    2974:	4c 8b       	std	Y+20, r20	; 0x14
    2976:	16 96       	adiw	r26, 0x06	; 6
    2978:	cd 91       	ld	r28, X+
    297a:	dc 91       	ld	r29, X
    297c:	17 97       	sbiw	r26, 0x07	; 7
    297e:	40 91 ab 11 	lds	r20, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2982:	50 91 ac 11 	lds	r21, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2986:	42 5f       	subi	r20, 0xF2	; 242
    2988:	5f 4f       	sbci	r21, 0xFF	; 255
    298a:	5d 83       	std	Y+5, r21	; 0x05
    298c:	4c 83       	std	Y+4, r20	; 0x04
    298e:	40 91 ab 11 	lds	r20, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2992:	50 91 ac 11 	lds	r21, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2996:	42 5f       	subi	r20, 0xF2	; 242
    2998:	5f 4f       	sbci	r21, 0xFF	; 255
    299a:	17 96       	adiw	r26, 0x07	; 7
    299c:	5c 93       	st	X, r21
    299e:	4e 93       	st	-X, r20
    29a0:	16 97       	sbiw	r26, 0x06	; 6
    29a2:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    29a6:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    29aa:	59 96       	adiw	r26, 0x19	; 25
    29ac:	fc 93       	st	X, r31
    29ae:	ee 93       	st	-X, r30
    29b0:	58 97       	sbiw	r26, 0x18	; 24
    29b2:	30 81       	ld	r19, Z
    29b4:	3f 5f       	subi	r19, 0xFF	; 255
    29b6:	30 83       	st	Z, r19
    29b8:	22 23       	and	r18, r18
    29ba:	19 f0       	breq	.+6      	; 0x29c2 <vTaskPlaceOnEventListRestricted+0x7a>
    29bc:	6f ef       	ldi	r22, 0xFF	; 255
    29be:	7f ef       	ldi	r23, 0xFF	; 255
    29c0:	cb 01       	movw	r24, r22
    29c2:	42 2f       	mov	r20, r18
    29c4:	39 db       	rcall	.-2446   	; 0x2038 <prvAddCurrentTaskToDelayedList>
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	08 95       	ret

000029cc <xTaskRemoveFromEventList>:
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	dc 01       	movw	r26, r24
    29d2:	17 96       	adiw	r26, 0x07	; 7
    29d4:	ed 91       	ld	r30, X+
    29d6:	fc 91       	ld	r31, X
    29d8:	18 97       	sbiw	r26, 0x08	; 8
    29da:	00 84       	ldd	r0, Z+8	; 0x08
    29dc:	f1 85       	ldd	r31, Z+9	; 0x09
    29de:	e0 2d       	mov	r30, r0
    29e0:	a0 8d       	ldd	r26, Z+24	; 0x18
    29e2:	b1 8d       	ldd	r27, Z+25	; 0x19
    29e4:	c2 89       	ldd	r28, Z+18	; 0x12
    29e6:	d3 89       	ldd	r29, Z+19	; 0x13
    29e8:	84 89       	ldd	r24, Z+20	; 0x14
    29ea:	95 89       	ldd	r25, Z+21	; 0x15
    29ec:	9f 83       	std	Y+7, r25	; 0x07
    29ee:	8e 83       	std	Y+6, r24	; 0x06
    29f0:	c4 89       	ldd	r28, Z+20	; 0x14
    29f2:	d5 89       	ldd	r29, Z+21	; 0x15
    29f4:	82 89       	ldd	r24, Z+18	; 0x12
    29f6:	93 89       	ldd	r25, Z+19	; 0x13
    29f8:	9d 83       	std	Y+5, r25	; 0x05
    29fa:	8c 83       	std	Y+4, r24	; 0x04
    29fc:	11 96       	adiw	r26, 0x01	; 1
    29fe:	8d 91       	ld	r24, X+
    2a00:	9c 91       	ld	r25, X
    2a02:	12 97       	sbiw	r26, 0x02	; 2
    2a04:	9f 01       	movw	r18, r30
    2a06:	22 5f       	subi	r18, 0xF2	; 242
    2a08:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0a:	82 17       	cp	r24, r18
    2a0c:	93 07       	cpc	r25, r19
    2a0e:	31 f4       	brne	.+12     	; 0x2a1c <xTaskRemoveFromEventList+0x50>
    2a10:	84 89       	ldd	r24, Z+20	; 0x14
    2a12:	95 89       	ldd	r25, Z+21	; 0x15
    2a14:	12 96       	adiw	r26, 0x02	; 2
    2a16:	9c 93       	st	X, r25
    2a18:	8e 93       	st	-X, r24
    2a1a:	11 97       	sbiw	r26, 0x01	; 1
    2a1c:	11 8e       	std	Z+25, r1	; 0x19
    2a1e:	10 8e       	std	Z+24, r1	; 0x18
    2a20:	8c 91       	ld	r24, X
    2a22:	81 50       	subi	r24, 0x01	; 1
    2a24:	8c 93       	st	X, r24
    2a26:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    2a2a:	81 11       	cpse	r24, r1
    2a2c:	52 c0       	rjmp	.+164    	; 0x2ad2 <xTaskRemoveFromEventList+0x106>
    2a2e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a30:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a32:	c6 81       	ldd	r28, Z+6	; 0x06
    2a34:	d7 81       	ldd	r29, Z+7	; 0x07
    2a36:	80 85       	ldd	r24, Z+8	; 0x08
    2a38:	91 85       	ldd	r25, Z+9	; 0x09
    2a3a:	9f 83       	std	Y+7, r25	; 0x07
    2a3c:	8e 83       	std	Y+6, r24	; 0x06
    2a3e:	c0 85       	ldd	r28, Z+8	; 0x08
    2a40:	d1 85       	ldd	r29, Z+9	; 0x09
    2a42:	86 81       	ldd	r24, Z+6	; 0x06
    2a44:	97 81       	ldd	r25, Z+7	; 0x07
    2a46:	9d 83       	std	Y+5, r25	; 0x05
    2a48:	8c 83       	std	Y+4, r24	; 0x04
    2a4a:	11 96       	adiw	r26, 0x01	; 1
    2a4c:	8d 91       	ld	r24, X+
    2a4e:	9c 91       	ld	r25, X
    2a50:	12 97       	sbiw	r26, 0x02	; 2
    2a52:	9f 01       	movw	r18, r30
    2a54:	2e 5f       	subi	r18, 0xFE	; 254
    2a56:	3f 4f       	sbci	r19, 0xFF	; 255
    2a58:	82 17       	cp	r24, r18
    2a5a:	93 07       	cpc	r25, r19
    2a5c:	31 f4       	brne	.+12     	; 0x2a6a <xTaskRemoveFromEventList+0x9e>
    2a5e:	80 85       	ldd	r24, Z+8	; 0x08
    2a60:	91 85       	ldd	r25, Z+9	; 0x09
    2a62:	12 96       	adiw	r26, 0x02	; 2
    2a64:	9c 93       	st	X, r25
    2a66:	8e 93       	st	-X, r24
    2a68:	11 97       	sbiw	r26, 0x01	; 1
    2a6a:	15 86       	std	Z+13, r1	; 0x0d
    2a6c:	14 86       	std	Z+12, r1	; 0x0c
    2a6e:	8c 91       	ld	r24, X
    2a70:	81 50       	subi	r24, 0x01	; 1
    2a72:	8c 93       	st	X, r24
    2a74:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a76:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    2a7a:	8a 17       	cp	r24, r26
    2a7c:	10 f4       	brcc	.+4      	; 0x2a82 <xTaskRemoveFromEventList+0xb6>
    2a7e:	a0 93 fb 10 	sts	0x10FB, r26	; 0x8010fb <uxTopReadyPriority>
    2a82:	8b e0       	ldi	r24, 0x0B	; 11
    2a84:	8a 9f       	mul	r24, r26
    2a86:	d0 01       	movw	r26, r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	a3 5c       	subi	r26, 0xC3	; 195
    2a8c:	be 4e       	sbci	r27, 0xEE	; 238
    2a8e:	11 96       	adiw	r26, 0x01	; 1
    2a90:	0d 90       	ld	r0, X+
    2a92:	bc 91       	ld	r27, X
    2a94:	a0 2d       	mov	r26, r0
    2a96:	b7 83       	std	Z+7, r27	; 0x07
    2a98:	a6 83       	std	Z+6, r26	; 0x06
    2a9a:	16 96       	adiw	r26, 0x06	; 6
    2a9c:	4d 91       	ld	r20, X+
    2a9e:	5c 91       	ld	r21, X
    2aa0:	17 97       	sbiw	r26, 0x07	; 7
    2aa2:	51 87       	std	Z+9, r21	; 0x09
    2aa4:	40 87       	std	Z+8, r20	; 0x08
    2aa6:	16 96       	adiw	r26, 0x06	; 6
    2aa8:	cd 91       	ld	r28, X+
    2aaa:	dc 91       	ld	r29, X
    2aac:	17 97       	sbiw	r26, 0x07	; 7
    2aae:	3d 83       	std	Y+5, r19	; 0x05
    2ab0:	2c 83       	std	Y+4, r18	; 0x04
    2ab2:	17 96       	adiw	r26, 0x07	; 7
    2ab4:	3c 93       	st	X, r19
    2ab6:	2e 93       	st	-X, r18
    2ab8:	16 97       	sbiw	r26, 0x06	; 6
    2aba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2abc:	8a 9f       	mul	r24, r26
    2abe:	d0 01       	movw	r26, r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	a3 5c       	subi	r26, 0xC3	; 195
    2ac4:	be 4e       	sbci	r27, 0xEE	; 238
    2ac6:	b5 87       	std	Z+13, r27	; 0x0d
    2ac8:	a4 87       	std	Z+12, r26	; 0x0c
    2aca:	8c 91       	ld	r24, X
    2acc:	8f 5f       	subi	r24, 0xFF	; 255
    2ace:	8c 93       	st	X, r24
    2ad0:	1c c0       	rjmp	.+56     	; 0x2b0a <xTaskRemoveFromEventList+0x13e>
    2ad2:	48 e1       	ldi	r20, 0x18	; 24
    2ad4:	51 e1       	ldi	r21, 0x11	; 17
    2ad6:	da 01       	movw	r26, r20
    2ad8:	11 96       	adiw	r26, 0x01	; 1
    2ada:	cd 91       	ld	r28, X+
    2adc:	dc 91       	ld	r29, X
    2ade:	12 97       	sbiw	r26, 0x02	; 2
    2ae0:	d3 8b       	std	Z+19, r29	; 0x13
    2ae2:	c2 8b       	std	Z+18, r28	; 0x12
    2ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae8:	95 8b       	std	Z+21, r25	; 0x15
    2aea:	84 8b       	std	Z+20, r24	; 0x14
    2aec:	8e 81       	ldd	r24, Y+6	; 0x06
    2aee:	9f 81       	ldd	r25, Y+7	; 0x07
    2af0:	dc 01       	movw	r26, r24
    2af2:	15 96       	adiw	r26, 0x05	; 5
    2af4:	3c 93       	st	X, r19
    2af6:	2e 93       	st	-X, r18
    2af8:	14 97       	sbiw	r26, 0x04	; 4
    2afa:	3f 83       	std	Y+7, r19	; 0x07
    2afc:	2e 83       	std	Y+6, r18	; 0x06
    2afe:	51 8f       	std	Z+25, r21	; 0x19
    2b00:	40 8f       	std	Z+24, r20	; 0x18
    2b02:	da 01       	movw	r26, r20
    2b04:	8c 91       	ld	r24, X
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	8c 93       	st	X, r24
    2b0a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b0c:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2b10:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b16:	89 17       	cp	r24, r25
    2b18:	20 f4       	brcc	.+8      	; 0x2b22 <xTaskRemoveFromEventList+0x156>
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xYieldPending>
    2b20:	01 c0       	rjmp	.+2      	; 0x2b24 <xTaskRemoveFromEventList+0x158>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	08 95       	ret

00002b2a <vTaskRemoveFromUnorderedEventList>:
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	dc 01       	movw	r26, r24
    2b30:	70 68       	ori	r23, 0x80	; 128
    2b32:	4d 93       	st	X+, r20
    2b34:	5d 93       	st	X+, r21
    2b36:	6d 93       	st	X+, r22
    2b38:	7c 93       	st	X, r23
    2b3a:	13 97       	sbiw	r26, 0x03	; 3
    2b3c:	18 96       	adiw	r26, 0x08	; 8
    2b3e:	ed 91       	ld	r30, X+
    2b40:	fc 91       	ld	r31, X
    2b42:	19 97       	sbiw	r26, 0x09	; 9
    2b44:	1a 96       	adiw	r26, 0x0a	; 10
    2b46:	4d 91       	ld	r20, X+
    2b48:	5c 91       	ld	r21, X
    2b4a:	1b 97       	sbiw	r26, 0x0b	; 11
    2b4c:	14 96       	adiw	r26, 0x04	; 4
    2b4e:	8d 91       	ld	r24, X+
    2b50:	9c 91       	ld	r25, X
    2b52:	15 97       	sbiw	r26, 0x05	; 5
    2b54:	16 96       	adiw	r26, 0x06	; 6
    2b56:	2d 91       	ld	r18, X+
    2b58:	3c 91       	ld	r19, X
    2b5a:	17 97       	sbiw	r26, 0x07	; 7
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	3f 83       	std	Y+7, r19	; 0x07
    2b60:	2e 83       	std	Y+6, r18	; 0x06
    2b62:	16 96       	adiw	r26, 0x06	; 6
    2b64:	8d 91       	ld	r24, X+
    2b66:	9c 91       	ld	r25, X
    2b68:	17 97       	sbiw	r26, 0x07	; 7
    2b6a:	14 96       	adiw	r26, 0x04	; 4
    2b6c:	2d 91       	ld	r18, X+
    2b6e:	3c 91       	ld	r19, X
    2b70:	15 97       	sbiw	r26, 0x05	; 5
    2b72:	ec 01       	movw	r28, r24
    2b74:	3d 83       	std	Y+5, r19	; 0x05
    2b76:	2c 83       	std	Y+4, r18	; 0x04
    2b78:	ea 01       	movw	r28, r20
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	a8 17       	cp	r26, r24
    2b80:	b9 07       	cpc	r27, r25
    2b82:	31 f4       	brne	.+12     	; 0x2b90 <vTaskRemoveFromUnorderedEventList+0x66>
    2b84:	16 96       	adiw	r26, 0x06	; 6
    2b86:	8d 91       	ld	r24, X+
    2b88:	9c 91       	ld	r25, X
    2b8a:	17 97       	sbiw	r26, 0x07	; 7
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	1b 96       	adiw	r26, 0x0b	; 11
    2b92:	1c 92       	st	X, r1
    2b94:	1e 92       	st	-X, r1
    2b96:	1a 97       	sbiw	r26, 0x0a	; 10
    2b98:	da 01       	movw	r26, r20
    2b9a:	8c 91       	ld	r24, X
    2b9c:	81 50       	subi	r24, 0x01	; 1
    2b9e:	8c 93       	st	X, r24
    2ba0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ba2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ba4:	c6 81       	ldd	r28, Z+6	; 0x06
    2ba6:	d7 81       	ldd	r29, Z+7	; 0x07
    2ba8:	80 85       	ldd	r24, Z+8	; 0x08
    2baa:	91 85       	ldd	r25, Z+9	; 0x09
    2bac:	9f 83       	std	Y+7, r25	; 0x07
    2bae:	8e 83       	std	Y+6, r24	; 0x06
    2bb0:	c0 85       	ldd	r28, Z+8	; 0x08
    2bb2:	d1 85       	ldd	r29, Z+9	; 0x09
    2bb4:	86 81       	ldd	r24, Z+6	; 0x06
    2bb6:	97 81       	ldd	r25, Z+7	; 0x07
    2bb8:	9d 83       	std	Y+5, r25	; 0x05
    2bba:	8c 83       	std	Y+4, r24	; 0x04
    2bbc:	11 96       	adiw	r26, 0x01	; 1
    2bbe:	8d 91       	ld	r24, X+
    2bc0:	9c 91       	ld	r25, X
    2bc2:	12 97       	sbiw	r26, 0x02	; 2
    2bc4:	9f 01       	movw	r18, r30
    2bc6:	2e 5f       	subi	r18, 0xFE	; 254
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	82 17       	cp	r24, r18
    2bcc:	93 07       	cpc	r25, r19
    2bce:	31 f4       	brne	.+12     	; 0x2bdc <vTaskRemoveFromUnorderedEventList+0xb2>
    2bd0:	80 85       	ldd	r24, Z+8	; 0x08
    2bd2:	91 85       	ldd	r25, Z+9	; 0x09
    2bd4:	12 96       	adiw	r26, 0x02	; 2
    2bd6:	9c 93       	st	X, r25
    2bd8:	8e 93       	st	-X, r24
    2bda:	11 97       	sbiw	r26, 0x01	; 1
    2bdc:	15 86       	std	Z+13, r1	; 0x0d
    2bde:	14 86       	std	Z+12, r1	; 0x0c
    2be0:	8c 91       	ld	r24, X
    2be2:	81 50       	subi	r24, 0x01	; 1
    2be4:	8c 93       	st	X, r24
    2be6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2be8:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    2bec:	8a 17       	cp	r24, r26
    2bee:	10 f4       	brcc	.+4      	; 0x2bf4 <vTaskRemoveFromUnorderedEventList+0xca>
    2bf0:	a0 93 fb 10 	sts	0x10FB, r26	; 0x8010fb <uxTopReadyPriority>
    2bf4:	8b e0       	ldi	r24, 0x0B	; 11
    2bf6:	8a 9f       	mul	r24, r26
    2bf8:	d0 01       	movw	r26, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	a3 5c       	subi	r26, 0xC3	; 195
    2bfe:	be 4e       	sbci	r27, 0xEE	; 238
    2c00:	11 96       	adiw	r26, 0x01	; 1
    2c02:	0d 90       	ld	r0, X+
    2c04:	bc 91       	ld	r27, X
    2c06:	a0 2d       	mov	r26, r0
    2c08:	b7 83       	std	Z+7, r27	; 0x07
    2c0a:	a6 83       	std	Z+6, r26	; 0x06
    2c0c:	16 96       	adiw	r26, 0x06	; 6
    2c0e:	4d 91       	ld	r20, X+
    2c10:	5c 91       	ld	r21, X
    2c12:	17 97       	sbiw	r26, 0x07	; 7
    2c14:	51 87       	std	Z+9, r21	; 0x09
    2c16:	40 87       	std	Z+8, r20	; 0x08
    2c18:	16 96       	adiw	r26, 0x06	; 6
    2c1a:	cd 91       	ld	r28, X+
    2c1c:	dc 91       	ld	r29, X
    2c1e:	17 97       	sbiw	r26, 0x07	; 7
    2c20:	3d 83       	std	Y+5, r19	; 0x05
    2c22:	2c 83       	std	Y+4, r18	; 0x04
    2c24:	17 96       	adiw	r26, 0x07	; 7
    2c26:	3c 93       	st	X, r19
    2c28:	2e 93       	st	-X, r18
    2c2a:	16 97       	sbiw	r26, 0x06	; 6
    2c2c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c2e:	8a 9f       	mul	r24, r26
    2c30:	d0 01       	movw	r26, r0
    2c32:	11 24       	eor	r1, r1
    2c34:	a3 5c       	subi	r26, 0xC3	; 195
    2c36:	be 4e       	sbci	r27, 0xEE	; 238
    2c38:	b5 87       	std	Z+13, r27	; 0x0d
    2c3a:	a4 87       	std	Z+12, r26	; 0x0c
    2c3c:	8c 91       	ld	r24, X
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	8c 93       	st	X, r24
    2c42:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c44:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2c48:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2c4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c4e:	89 17       	cp	r24, r25
    2c50:	18 f4       	brcc	.+6      	; 0x2c58 <vTaskRemoveFromUnorderedEventList+0x12e>
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xYieldPending>
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	08 95       	ret

00002c5e <vTaskSetTimeOutState>:
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	0f 92       	push	r0
    2c64:	20 91 f4 10 	lds	r18, 0x10F4	; 0x8010f4 <xNumOfOverflows>
    2c68:	fc 01       	movw	r30, r24
    2c6a:	20 83       	st	Z, r18
    2c6c:	40 91 fc 10 	lds	r20, 0x10FC	; 0x8010fc <xTickCount>
    2c70:	50 91 fd 10 	lds	r21, 0x10FD	; 0x8010fd <xTickCount+0x1>
    2c74:	60 91 fe 10 	lds	r22, 0x10FE	; 0x8010fe <xTickCount+0x2>
    2c78:	70 91 ff 10 	lds	r23, 0x10FF	; 0x8010ff <xTickCount+0x3>
    2c7c:	41 83       	std	Z+1, r20	; 0x01
    2c7e:	52 83       	std	Z+2, r21	; 0x02
    2c80:	63 83       	std	Z+3, r22	; 0x03
    2c82:	74 83       	std	Z+4, r23	; 0x04
    2c84:	0f 90       	pop	r0
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	08 95       	ret

00002c8a <vTaskInternalSetTimeOutState>:
    2c8a:	20 91 f4 10 	lds	r18, 0x10F4	; 0x8010f4 <xNumOfOverflows>
    2c8e:	fc 01       	movw	r30, r24
    2c90:	20 83       	st	Z, r18
    2c92:	40 91 fc 10 	lds	r20, 0x10FC	; 0x8010fc <xTickCount>
    2c96:	50 91 fd 10 	lds	r21, 0x10FD	; 0x8010fd <xTickCount+0x1>
    2c9a:	60 91 fe 10 	lds	r22, 0x10FE	; 0x8010fe <xTickCount+0x2>
    2c9e:	70 91 ff 10 	lds	r23, 0x10FF	; 0x8010ff <xTickCount+0x3>
    2ca2:	41 83       	std	Z+1, r20	; 0x01
    2ca4:	52 83       	std	Z+2, r21	; 0x02
    2ca6:	63 83       	std	Z+3, r22	; 0x03
    2ca8:	74 83       	std	Z+4, r23	; 0x04
    2caa:	08 95       	ret

00002cac <xTaskCheckForTimeOut>:
    2cac:	8f 92       	push	r8
    2cae:	9f 92       	push	r9
    2cb0:	af 92       	push	r10
    2cb2:	bf 92       	push	r11
    2cb4:	cf 92       	push	r12
    2cb6:	df 92       	push	r13
    2cb8:	ef 92       	push	r14
    2cba:	ff 92       	push	r15
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	fb 01       	movw	r30, r22
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	0f 92       	push	r0
    2ccc:	c0 90 fc 10 	lds	r12, 0x10FC	; 0x8010fc <xTickCount>
    2cd0:	d0 90 fd 10 	lds	r13, 0x10FD	; 0x8010fd <xTickCount+0x1>
    2cd4:	e0 90 fe 10 	lds	r14, 0x10FE	; 0x8010fe <xTickCount+0x2>
    2cd8:	f0 90 ff 10 	lds	r15, 0x10FF	; 0x8010ff <xTickCount+0x3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	11 96       	adiw	r26, 0x01	; 1
    2ce0:	0d 91       	ld	r16, X+
    2ce2:	1d 91       	ld	r17, X+
    2ce4:	2d 91       	ld	r18, X+
    2ce6:	3c 91       	ld	r19, X
    2ce8:	14 97       	sbiw	r26, 0x04	; 4
    2cea:	46 01       	movw	r8, r12
    2cec:	57 01       	movw	r10, r14
    2cee:	80 1a       	sub	r8, r16
    2cf0:	91 0a       	sbc	r9, r17
    2cf2:	a2 0a       	sbc	r10, r18
    2cf4:	b3 0a       	sbc	r11, r19
    2cf6:	40 81       	ld	r20, Z
    2cf8:	51 81       	ldd	r21, Z+1	; 0x01
    2cfa:	62 81       	ldd	r22, Z+2	; 0x02
    2cfc:	73 81       	ldd	r23, Z+3	; 0x03
    2cfe:	4f 3f       	cpi	r20, 0xFF	; 255
    2d00:	bf ef       	ldi	r27, 0xFF	; 255
    2d02:	5b 07       	cpc	r21, r27
    2d04:	6b 07       	cpc	r22, r27
    2d06:	7b 07       	cpc	r23, r27
    2d08:	39 f1       	breq	.+78     	; 0x2d58 <xTaskCheckForTimeOut+0xac>
    2d0a:	ec 01       	movw	r28, r24
    2d0c:	b8 81       	ld	r27, Y
    2d0e:	a0 91 f4 10 	lds	r26, 0x10F4	; 0x8010f4 <xNumOfOverflows>
    2d12:	ba 17       	cp	r27, r26
    2d14:	59 f0       	breq	.+22     	; 0x2d2c <xTaskCheckForTimeOut+0x80>
    2d16:	c0 16       	cp	r12, r16
    2d18:	d1 06       	cpc	r13, r17
    2d1a:	e2 06       	cpc	r14, r18
    2d1c:	f3 06       	cpc	r15, r19
    2d1e:	30 f0       	brcs	.+12     	; 0x2d2c <xTaskCheckForTimeOut+0x80>
    2d20:	10 82       	st	Z, r1
    2d22:	11 82       	std	Z+1, r1	; 0x01
    2d24:	12 82       	std	Z+2, r1	; 0x02
    2d26:	13 82       	std	Z+3, r1	; 0x03
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	17 c0       	rjmp	.+46     	; 0x2d5a <xTaskCheckForTimeOut+0xae>
    2d2c:	84 16       	cp	r8, r20
    2d2e:	95 06       	cpc	r9, r21
    2d30:	a6 06       	cpc	r10, r22
    2d32:	b7 06       	cpc	r11, r23
    2d34:	58 f4       	brcc	.+22     	; 0x2d4c <xTaskCheckForTimeOut+0xa0>
    2d36:	48 19       	sub	r20, r8
    2d38:	59 09       	sbc	r21, r9
    2d3a:	6a 09       	sbc	r22, r10
    2d3c:	7b 09       	sbc	r23, r11
    2d3e:	40 83       	st	Z, r20
    2d40:	51 83       	std	Z+1, r21	; 0x01
    2d42:	62 83       	std	Z+2, r22	; 0x02
    2d44:	73 83       	std	Z+3, r23	; 0x03
    2d46:	a1 df       	rcall	.-190    	; 0x2c8a <vTaskInternalSetTimeOutState>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	07 c0       	rjmp	.+14     	; 0x2d5a <xTaskCheckForTimeOut+0xae>
    2d4c:	10 82       	st	Z, r1
    2d4e:	11 82       	std	Z+1, r1	; 0x01
    2d50:	12 82       	std	Z+2, r1	; 0x02
    2d52:	13 82       	std	Z+3, r1	; 0x03
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	01 c0       	rjmp	.+2      	; 0x2d5a <xTaskCheckForTimeOut+0xae>
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	ff 90       	pop	r15
    2d68:	ef 90       	pop	r14
    2d6a:	df 90       	pop	r13
    2d6c:	cf 90       	pop	r12
    2d6e:	bf 90       	pop	r11
    2d70:	af 90       	pop	r10
    2d72:	9f 90       	pop	r9
    2d74:	8f 90       	pop	r8
    2d76:	08 95       	ret

00002d78 <vTaskMissedYield>:
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xYieldPending>
    2d7e:	08 95       	ret

00002d80 <xTaskGetCurrentTaskHandle>:
    2d80:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2d84:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2d88:	08 95       	ret

00002d8a <xTaskGetSchedulerState>:
    2d8a:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <xSchedulerRunning>
    2d8e:	88 23       	and	r24, r24
    2d90:	31 f0       	breq	.+12     	; 0x2d9e <xTaskGetSchedulerState+0x14>
    2d92:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    2d96:	81 11       	cpse	r24, r1
    2d98:	04 c0       	rjmp	.+8      	; 0x2da2 <xTaskGetSchedulerState+0x18>
    2d9a:	82 e0       	ldi	r24, 0x02	; 2
    2d9c:	08 95       	ret
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	08 95       	ret
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	08 95       	ret

00002da6 <xTaskPriorityDisinherit>:
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	fc 01       	movw	r30, r24
    2db0:	89 2b       	or	r24, r25
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <xTaskPriorityDisinherit+0x10>
    2db4:	49 c0       	rjmp	.+146    	; 0x2e48 <xTaskPriorityDisinherit+0xa2>
    2db6:	86 a5       	ldd	r24, Z+46	; 0x2e
    2db8:	81 50       	subi	r24, 0x01	; 1
    2dba:	86 a7       	std	Z+46, r24	; 0x2e
    2dbc:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dbe:	95 a5       	ldd	r25, Z+45	; 0x2d
    2dc0:	29 17       	cp	r18, r25
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <xTaskPriorityDisinherit+0x20>
    2dc4:	43 c0       	rjmp	.+134    	; 0x2e4c <xTaskPriorityDisinherit+0xa6>
    2dc6:	81 11       	cpse	r24, r1
    2dc8:	43 c0       	rjmp	.+134    	; 0x2e50 <xTaskPriorityDisinherit+0xaa>
    2dca:	ef 01       	movw	r28, r30
    2dcc:	8f 01       	movw	r16, r30
    2dce:	0e 5f       	subi	r16, 0xFE	; 254
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	c8 01       	movw	r24, r16
    2dd4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uxListRemove>
    2dd8:	ed a5       	ldd	r30, Y+45	; 0x2d
    2dda:	ea 8f       	std	Y+26, r30	; 0x1a
    2ddc:	8a e0       	ldi	r24, 0x0A	; 10
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	a0 e0       	ldi	r26, 0x00	; 0
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	8e 1b       	sub	r24, r30
    2de6:	91 09       	sbc	r25, r1
    2de8:	a1 09       	sbc	r26, r1
    2dea:	b1 09       	sbc	r27, r1
    2dec:	8e 87       	std	Y+14, r24	; 0x0e
    2dee:	9f 87       	std	Y+15, r25	; 0x0f
    2df0:	a8 8b       	std	Y+16, r26	; 0x10
    2df2:	b9 8b       	std	Y+17, r27	; 0x11
    2df4:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    2df8:	8e 17       	cp	r24, r30
    2dfa:	10 f4       	brcc	.+4      	; 0x2e00 <xTaskPriorityDisinherit+0x5a>
    2dfc:	e0 93 fb 10 	sts	0x10FB, r30	; 0x8010fb <uxTopReadyPriority>
    2e00:	8b e0       	ldi	r24, 0x0B	; 11
    2e02:	8e 9f       	mul	r24, r30
    2e04:	f0 01       	movw	r30, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	e3 5c       	subi	r30, 0xC3	; 195
    2e0a:	fe 4e       	sbci	r31, 0xEE	; 238
    2e0c:	01 80       	ldd	r0, Z+1	; 0x01
    2e0e:	f2 81       	ldd	r31, Z+2	; 0x02
    2e10:	e0 2d       	mov	r30, r0
    2e12:	ff 83       	std	Y+7, r31	; 0x07
    2e14:	ee 83       	std	Y+6, r30	; 0x06
    2e16:	26 81       	ldd	r18, Z+6	; 0x06
    2e18:	37 81       	ldd	r19, Z+7	; 0x07
    2e1a:	39 87       	std	Y+9, r19	; 0x09
    2e1c:	28 87       	std	Y+8, r18	; 0x08
    2e1e:	a6 81       	ldd	r26, Z+6	; 0x06
    2e20:	b7 81       	ldd	r27, Z+7	; 0x07
    2e22:	15 96       	adiw	r26, 0x05	; 5
    2e24:	1c 93       	st	X, r17
    2e26:	0e 93       	st	-X, r16
    2e28:	14 97       	sbiw	r26, 0x04	; 4
    2e2a:	17 83       	std	Z+7, r17	; 0x07
    2e2c:	06 83       	std	Z+6, r16	; 0x06
    2e2e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e30:	8e 9f       	mul	r24, r30
    2e32:	f0 01       	movw	r30, r0
    2e34:	11 24       	eor	r1, r1
    2e36:	e3 5c       	subi	r30, 0xC3	; 195
    2e38:	fe 4e       	sbci	r31, 0xEE	; 238
    2e3a:	fd 87       	std	Y+13, r31	; 0x0d
    2e3c:	ec 87       	std	Y+12, r30	; 0x0c
    2e3e:	80 81       	ld	r24, Z
    2e40:	8f 5f       	subi	r24, 0xFF	; 255
    2e42:	80 83       	st	Z, r24
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	05 c0       	rjmp	.+10     	; 0x2e52 <xTaskPriorityDisinherit+0xac>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	03 c0       	rjmp	.+6      	; 0x2e52 <xTaskPriorityDisinherit+0xac>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	01 c0       	rjmp	.+2      	; 0x2e52 <xTaskPriorityDisinherit+0xac>
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	08 95       	ret

00002e5c <uxTaskResetEventItemValue>:
    2e5c:	cf 92       	push	r12
    2e5e:	df 92       	push	r13
    2e60:	ef 92       	push	r14
    2e62:	ff 92       	push	r15
    2e64:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2e68:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2e6c:	66 85       	ldd	r22, Z+14	; 0x0e
    2e6e:	77 85       	ldd	r23, Z+15	; 0x0f
    2e70:	80 89       	ldd	r24, Z+16	; 0x10
    2e72:	91 89       	ldd	r25, Z+17	; 0x11
    2e74:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2e78:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2e7c:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2e80:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2e84:	5a 96       	adiw	r26, 0x1a	; 26
    2e86:	2c 91       	ld	r18, X
    2e88:	0f 2e       	mov	r0, r31
    2e8a:	fa e0       	ldi	r31, 0x0A	; 10
    2e8c:	cf 2e       	mov	r12, r31
    2e8e:	d1 2c       	mov	r13, r1
    2e90:	e1 2c       	mov	r14, r1
    2e92:	f1 2c       	mov	r15, r1
    2e94:	f0 2d       	mov	r31, r0
    2e96:	c2 1a       	sub	r12, r18
    2e98:	d1 08       	sbc	r13, r1
    2e9a:	e1 08       	sbc	r14, r1
    2e9c:	f1 08       	sbc	r15, r1
    2e9e:	c6 86       	std	Z+14, r12	; 0x0e
    2ea0:	d7 86       	std	Z+15, r13	; 0x0f
    2ea2:	e0 8a       	std	Z+16, r14	; 0x10
    2ea4:	f1 8a       	std	Z+17, r15	; 0x11
    2ea6:	ff 90       	pop	r15
    2ea8:	ef 90       	pop	r14
    2eaa:	df 90       	pop	r13
    2eac:	cf 90       	pop	r12
    2eae:	08 95       	ret

00002eb0 <xTaskGenericNotifyWait>:
    2eb0:	4f 92       	push	r4
    2eb2:	5f 92       	push	r5
    2eb4:	6f 92       	push	r6
    2eb6:	7f 92       	push	r7
    2eb8:	af 92       	push	r10
    2eba:	bf 92       	push	r11
    2ebc:	cf 92       	push	r12
    2ebe:	df 92       	push	r13
    2ec0:	ef 92       	push	r14
    2ec2:	ff 92       	push	r15
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	28 01       	movw	r4, r16
    2ece:	39 01       	movw	r6, r18
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	0f 92       	push	r0
    2ed6:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2eda:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2ede:	c8 2f       	mov	r28, r24
    2ee0:	d0 e0       	ldi	r29, 0x00	; 0
    2ee2:	ec 0f       	add	r30, r28
    2ee4:	fd 1f       	adc	r31, r29
    2ee6:	83 a9       	ldd	r24, Z+51	; 0x33
    2ee8:	82 30       	cpi	r24, 0x02	; 2
    2eea:	71 f1       	breq	.+92     	; 0x2f48 <xTaskGenericNotifyWait+0x98>
    2eec:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2ef0:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	e8 0f       	add	r30, r24
    2f00:	f9 1f       	adc	r31, r25
    2f02:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f04:	90 a9       	ldd	r25, Z+48	; 0x30
    2f06:	a1 a9       	ldd	r26, Z+49	; 0x31
    2f08:	b2 a9       	ldd	r27, Z+50	; 0x32
    2f0a:	40 95       	com	r20
    2f0c:	50 95       	com	r21
    2f0e:	60 95       	com	r22
    2f10:	70 95       	com	r23
    2f12:	48 23       	and	r20, r24
    2f14:	59 23       	and	r21, r25
    2f16:	6a 23       	and	r22, r26
    2f18:	7b 23       	and	r23, r27
    2f1a:	47 a7       	std	Z+47, r20	; 0x2f
    2f1c:	50 ab       	std	Z+48, r21	; 0x30
    2f1e:	61 ab       	std	Z+49, r22	; 0x31
    2f20:	72 ab       	std	Z+50, r23	; 0x32
    2f22:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2f26:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2f2a:	ec 0f       	add	r30, r28
    2f2c:	fd 1f       	adc	r31, r29
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	83 ab       	std	Z+51, r24	; 0x33
    2f32:	a1 14       	cp	r10, r1
    2f34:	b1 04       	cpc	r11, r1
    2f36:	c1 04       	cpc	r12, r1
    2f38:	d1 04       	cpc	r13, r1
    2f3a:	31 f0       	breq	.+12     	; 0x2f48 <xTaskGenericNotifyWait+0x98>
    2f3c:	41 e0       	ldi	r20, 0x01	; 1
    2f3e:	c6 01       	movw	r24, r12
    2f40:	b5 01       	movw	r22, r10
    2f42:	7a d8       	rcall	.-3852   	; 0x2038 <prvAddCurrentTaskToDelayedList>
    2f44:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    2f48:	0f 90       	pop	r0
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	0f 92       	push	r0
    2f52:	e1 14       	cp	r14, r1
    2f54:	f1 04       	cpc	r15, r1
    2f56:	a1 f0       	breq	.+40     	; 0x2f80 <xTaskGenericNotifyWait+0xd0>
    2f58:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2f5c:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2f60:	ce 01       	movw	r24, r28
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	e8 0f       	add	r30, r24
    2f6c:	f9 1f       	adc	r31, r25
    2f6e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f70:	90 a9       	ldd	r25, Z+48	; 0x30
    2f72:	a1 a9       	ldd	r26, Z+49	; 0x31
    2f74:	b2 a9       	ldd	r27, Z+50	; 0x32
    2f76:	f7 01       	movw	r30, r14
    2f78:	80 83       	st	Z, r24
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	a2 83       	std	Z+2, r26	; 0x02
    2f7e:	b3 83       	std	Z+3, r27	; 0x03
    2f80:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2f84:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2f88:	ec 0f       	add	r30, r28
    2f8a:	fd 1f       	adc	r31, r29
    2f8c:	83 a9       	ldd	r24, Z+51	; 0x33
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	e9 f4       	brne	.+58     	; 0x2fcc <xTaskGenericNotifyWait+0x11c>
    2f92:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2f96:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	e8 0f       	add	r30, r24
    2fa6:	f9 1f       	adc	r31, r25
    2fa8:	87 a5       	ldd	r24, Z+47	; 0x2f
    2faa:	90 a9       	ldd	r25, Z+48	; 0x30
    2fac:	a1 a9       	ldd	r26, Z+49	; 0x31
    2fae:	b2 a9       	ldd	r27, Z+50	; 0x32
    2fb0:	40 94       	com	r4
    2fb2:	50 94       	com	r5
    2fb4:	60 94       	com	r6
    2fb6:	70 94       	com	r7
    2fb8:	48 22       	and	r4, r24
    2fba:	59 22       	and	r5, r25
    2fbc:	6a 22       	and	r6, r26
    2fbe:	7b 22       	and	r7, r27
    2fc0:	47 a6       	std	Z+47, r4	; 0x2f
    2fc2:	50 aa       	std	Z+48, r5	; 0x30
    2fc4:	61 aa       	std	Z+49, r6	; 0x31
    2fc6:	72 aa       	std	Z+50, r7	; 0x32
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	01 c0       	rjmp	.+2      	; 0x2fce <xTaskGenericNotifyWait+0x11e>
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	20 91 ab 11 	lds	r18, 0x11AB	; 0x8011ab <pxCurrentTCB>
    2fd2:	30 91 ac 11 	lds	r19, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    2fd6:	c2 0f       	add	r28, r18
    2fd8:	d3 1f       	adc	r29, r19
    2fda:	1b aa       	std	Y+51, r1	; 0x33
    2fdc:	0f 90       	pop	r0
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	df 90       	pop	r13
    2fee:	cf 90       	pop	r12
    2ff0:	bf 90       	pop	r11
    2ff2:	af 90       	pop	r10
    2ff4:	7f 90       	pop	r7
    2ff6:	6f 90       	pop	r6
    2ff8:	5f 90       	pop	r5
    2ffa:	4f 90       	pop	r4
    2ffc:	08 95       	ret

00002ffe <xTaskGenericNotify>:
    2ffe:	8f 92       	push	r8
    3000:	9f 92       	push	r9
    3002:	af 92       	push	r10
    3004:	bf 92       	push	r11
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	dc 01       	movw	r26, r24
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	0f 92       	push	r0
    3018:	e1 14       	cp	r14, r1
    301a:	f1 04       	cpc	r15, r1
    301c:	89 f0       	breq	.+34     	; 0x3040 <xTaskGenericNotify+0x42>
    301e:	e6 2f       	mov	r30, r22
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	ee 0f       	add	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	ee 0f       	add	r30, r30
    3028:	ff 1f       	adc	r31, r31
    302a:	e8 0f       	add	r30, r24
    302c:	f9 1f       	adc	r31, r25
    302e:	87 a4       	ldd	r8, Z+47	; 0x2f
    3030:	90 a8       	ldd	r9, Z+48	; 0x30
    3032:	a1 a8       	ldd	r10, Z+49	; 0x31
    3034:	b2 a8       	ldd	r11, Z+50	; 0x32
    3036:	f7 01       	movw	r30, r14
    3038:	80 82       	st	Z, r8
    303a:	91 82       	std	Z+1, r9	; 0x01
    303c:	a2 82       	std	Z+2, r10	; 0x02
    303e:	b3 82       	std	Z+3, r11	; 0x03
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	fd 01       	movw	r30, r26
    3044:	e6 0f       	add	r30, r22
    3046:	f7 1f       	adc	r31, r23
    3048:	83 a9       	ldd	r24, Z+51	; 0x33
    304a:	92 e0       	ldi	r25, 0x02	; 2
    304c:	93 ab       	std	Z+51, r25	; 0x33
    304e:	02 30       	cpi	r16, 0x02	; 2
    3050:	01 f1       	breq	.+64     	; 0x3092 <xTaskGenericNotify+0x94>
    3052:	18 f4       	brcc	.+6      	; 0x305a <xTaskGenericNotify+0x5c>
    3054:	01 30       	cpi	r16, 0x01	; 1
    3056:	31 f0       	breq	.+12     	; 0x3064 <xTaskGenericNotify+0x66>
    3058:	4d c0       	rjmp	.+154    	; 0x30f4 <xTaskGenericNotify+0xf6>
    305a:	03 30       	cpi	r16, 0x03	; 3
    305c:	79 f1       	breq	.+94     	; 0x30bc <xTaskGenericNotify+0xbe>
    305e:	04 30       	cpi	r16, 0x04	; 4
    3060:	d1 f1       	breq	.+116    	; 0x30d6 <xTaskGenericNotify+0xd8>
    3062:	48 c0       	rjmp	.+144    	; 0x30f4 <xTaskGenericNotify+0xf6>
    3064:	66 0f       	add	r22, r22
    3066:	77 1f       	adc	r23, r23
    3068:	66 0f       	add	r22, r22
    306a:	77 1f       	adc	r23, r23
    306c:	fd 01       	movw	r30, r26
    306e:	e6 0f       	add	r30, r22
    3070:	f7 1f       	adc	r31, r23
    3072:	87 a4       	ldd	r8, Z+47	; 0x2f
    3074:	90 a8       	ldd	r9, Z+48	; 0x30
    3076:	a1 a8       	ldd	r10, Z+49	; 0x31
    3078:	b2 a8       	ldd	r11, Z+50	; 0x32
    307a:	ba 01       	movw	r22, r20
    307c:	a9 01       	movw	r20, r18
    307e:	48 29       	or	r20, r8
    3080:	59 29       	or	r21, r9
    3082:	6a 29       	or	r22, r10
    3084:	7b 29       	or	r23, r11
    3086:	47 a7       	std	Z+47, r20	; 0x2f
    3088:	50 ab       	std	Z+48, r21	; 0x30
    308a:	61 ab       	std	Z+49, r22	; 0x31
    308c:	72 ab       	std	Z+50, r23	; 0x32
    308e:	01 e0       	ldi	r16, 0x01	; 1
    3090:	34 c0       	rjmp	.+104    	; 0x30fa <xTaskGenericNotify+0xfc>
    3092:	66 0f       	add	r22, r22
    3094:	77 1f       	adc	r23, r23
    3096:	66 0f       	add	r22, r22
    3098:	77 1f       	adc	r23, r23
    309a:	fd 01       	movw	r30, r26
    309c:	e6 0f       	add	r30, r22
    309e:	f7 1f       	adc	r31, r23
    30a0:	47 a5       	ldd	r20, Z+47	; 0x2f
    30a2:	50 a9       	ldd	r21, Z+48	; 0x30
    30a4:	61 a9       	ldd	r22, Z+49	; 0x31
    30a6:	72 a9       	ldd	r23, Z+50	; 0x32
    30a8:	4f 5f       	subi	r20, 0xFF	; 255
    30aa:	5f 4f       	sbci	r21, 0xFF	; 255
    30ac:	6f 4f       	sbci	r22, 0xFF	; 255
    30ae:	7f 4f       	sbci	r23, 0xFF	; 255
    30b0:	47 a7       	std	Z+47, r20	; 0x2f
    30b2:	50 ab       	std	Z+48, r21	; 0x30
    30b4:	61 ab       	std	Z+49, r22	; 0x31
    30b6:	72 ab       	std	Z+50, r23	; 0x32
    30b8:	01 e0       	ldi	r16, 0x01	; 1
    30ba:	1f c0       	rjmp	.+62     	; 0x30fa <xTaskGenericNotify+0xfc>
    30bc:	66 0f       	add	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	66 0f       	add	r22, r22
    30c2:	77 1f       	adc	r23, r23
    30c4:	fd 01       	movw	r30, r26
    30c6:	e6 0f       	add	r30, r22
    30c8:	f7 1f       	adc	r31, r23
    30ca:	27 a7       	std	Z+47, r18	; 0x2f
    30cc:	30 ab       	std	Z+48, r19	; 0x30
    30ce:	41 ab       	std	Z+49, r20	; 0x31
    30d0:	52 ab       	std	Z+50, r21	; 0x32
    30d2:	01 e0       	ldi	r16, 0x01	; 1
    30d4:	12 c0       	rjmp	.+36     	; 0x30fa <xTaskGenericNotify+0xfc>
    30d6:	82 30       	cpi	r24, 0x02	; 2
    30d8:	79 f0       	breq	.+30     	; 0x30f8 <xTaskGenericNotify+0xfa>
    30da:	66 0f       	add	r22, r22
    30dc:	77 1f       	adc	r23, r23
    30de:	66 0f       	add	r22, r22
    30e0:	77 1f       	adc	r23, r23
    30e2:	fd 01       	movw	r30, r26
    30e4:	e6 0f       	add	r30, r22
    30e6:	f7 1f       	adc	r31, r23
    30e8:	27 a7       	std	Z+47, r18	; 0x2f
    30ea:	30 ab       	std	Z+48, r19	; 0x30
    30ec:	41 ab       	std	Z+49, r20	; 0x31
    30ee:	52 ab       	std	Z+50, r21	; 0x32
    30f0:	01 e0       	ldi	r16, 0x01	; 1
    30f2:	03 c0       	rjmp	.+6      	; 0x30fa <xTaskGenericNotify+0xfc>
    30f4:	01 e0       	ldi	r16, 0x01	; 1
    30f6:	01 c0       	rjmp	.+2      	; 0x30fa <xTaskGenericNotify+0xfc>
    30f8:	00 e0       	ldi	r16, 0x00	; 0
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	09 f0       	breq	.+2      	; 0x3100 <xTaskGenericNotify+0x102>
    30fe:	69 c0       	rjmp	.+210    	; 0x31d2 <xTaskGenericNotify+0x1d4>
    3100:	1c 96       	adiw	r26, 0x0c	; 12
    3102:	ed 91       	ld	r30, X+
    3104:	fc 91       	ld	r31, X
    3106:	1d 97       	sbiw	r26, 0x0d	; 13
    3108:	16 96       	adiw	r26, 0x06	; 6
    310a:	cd 91       	ld	r28, X+
    310c:	dc 91       	ld	r29, X
    310e:	17 97       	sbiw	r26, 0x07	; 7
    3110:	18 96       	adiw	r26, 0x08	; 8
    3112:	8d 91       	ld	r24, X+
    3114:	9c 91       	ld	r25, X
    3116:	19 97       	sbiw	r26, 0x09	; 9
    3118:	9f 83       	std	Y+7, r25	; 0x07
    311a:	8e 83       	std	Y+6, r24	; 0x06
    311c:	18 96       	adiw	r26, 0x08	; 8
    311e:	cd 91       	ld	r28, X+
    3120:	dc 91       	ld	r29, X
    3122:	19 97       	sbiw	r26, 0x09	; 9
    3124:	16 96       	adiw	r26, 0x06	; 6
    3126:	8d 91       	ld	r24, X+
    3128:	9c 91       	ld	r25, X
    312a:	17 97       	sbiw	r26, 0x07	; 7
    312c:	9d 83       	std	Y+5, r25	; 0x05
    312e:	8c 83       	std	Y+4, r24	; 0x04
    3130:	81 81       	ldd	r24, Z+1	; 0x01
    3132:	92 81       	ldd	r25, Z+2	; 0x02
    3134:	9d 01       	movw	r18, r26
    3136:	2e 5f       	subi	r18, 0xFE	; 254
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
    313a:	82 17       	cp	r24, r18
    313c:	93 07       	cpc	r25, r19
    313e:	31 f4       	brne	.+12     	; 0x314c <xTaskGenericNotify+0x14e>
    3140:	18 96       	adiw	r26, 0x08	; 8
    3142:	8d 91       	ld	r24, X+
    3144:	9c 91       	ld	r25, X
    3146:	19 97       	sbiw	r26, 0x09	; 9
    3148:	92 83       	std	Z+2, r25	; 0x02
    314a:	81 83       	std	Z+1, r24	; 0x01
    314c:	1d 96       	adiw	r26, 0x0d	; 13
    314e:	1c 92       	st	X, r1
    3150:	1e 92       	st	-X, r1
    3152:	1c 97       	sbiw	r26, 0x0c	; 12
    3154:	80 81       	ld	r24, Z
    3156:	81 50       	subi	r24, 0x01	; 1
    3158:	80 83       	st	Z, r24
    315a:	5a 96       	adiw	r26, 0x1a	; 26
    315c:	ec 91       	ld	r30, X
    315e:	5a 97       	sbiw	r26, 0x1a	; 26
    3160:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    3164:	8e 17       	cp	r24, r30
    3166:	10 f4       	brcc	.+4      	; 0x316c <xTaskGenericNotify+0x16e>
    3168:	e0 93 fb 10 	sts	0x10FB, r30	; 0x8010fb <uxTopReadyPriority>
    316c:	8b e0       	ldi	r24, 0x0B	; 11
    316e:	8e 9f       	mul	r24, r30
    3170:	f0 01       	movw	r30, r0
    3172:	11 24       	eor	r1, r1
    3174:	e3 5c       	subi	r30, 0xC3	; 195
    3176:	fe 4e       	sbci	r31, 0xEE	; 238
    3178:	01 80       	ldd	r0, Z+1	; 0x01
    317a:	f2 81       	ldd	r31, Z+2	; 0x02
    317c:	e0 2d       	mov	r30, r0
    317e:	17 96       	adiw	r26, 0x07	; 7
    3180:	fc 93       	st	X, r31
    3182:	ee 93       	st	-X, r30
    3184:	16 97       	sbiw	r26, 0x06	; 6
    3186:	46 81       	ldd	r20, Z+6	; 0x06
    3188:	57 81       	ldd	r21, Z+7	; 0x07
    318a:	19 96       	adiw	r26, 0x09	; 9
    318c:	5c 93       	st	X, r21
    318e:	4e 93       	st	-X, r20
    3190:	18 97       	sbiw	r26, 0x08	; 8
    3192:	c6 81       	ldd	r28, Z+6	; 0x06
    3194:	d7 81       	ldd	r29, Z+7	; 0x07
    3196:	3d 83       	std	Y+5, r19	; 0x05
    3198:	2c 83       	std	Y+4, r18	; 0x04
    319a:	37 83       	std	Z+7, r19	; 0x07
    319c:	26 83       	std	Z+6, r18	; 0x06
    319e:	5a 96       	adiw	r26, 0x1a	; 26
    31a0:	ec 91       	ld	r30, X
    31a2:	5a 97       	sbiw	r26, 0x1a	; 26
    31a4:	8e 9f       	mul	r24, r30
    31a6:	f0 01       	movw	r30, r0
    31a8:	11 24       	eor	r1, r1
    31aa:	e3 5c       	subi	r30, 0xC3	; 195
    31ac:	fe 4e       	sbci	r31, 0xEE	; 238
    31ae:	1d 96       	adiw	r26, 0x0d	; 13
    31b0:	fc 93       	st	X, r31
    31b2:	ee 93       	st	-X, r30
    31b4:	1c 97       	sbiw	r26, 0x0c	; 12
    31b6:	80 81       	ld	r24, Z
    31b8:	8f 5f       	subi	r24, 0xFF	; 255
    31ba:	80 83       	st	Z, r24
    31bc:	5a 96       	adiw	r26, 0x1a	; 26
    31be:	9c 91       	ld	r25, X
    31c0:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    31c4:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    31c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    31ca:	89 17       	cp	r24, r25
    31cc:	10 f4       	brcc	.+4      	; 0x31d2 <xTaskGenericNotify+0x1d4>
    31ce:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    31d2:	0f 90       	pop	r0
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	80 2f       	mov	r24, r16
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	0f 91       	pop	r16
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	bf 90       	pop	r11
    31e4:	af 90       	pop	r10
    31e6:	9f 90       	pop	r9
    31e8:	8f 90       	pop	r8
    31ea:	08 95       	ret

000031ec <xTaskGenericNotifyFromISR>:
    31ec:	8f 92       	push	r8
    31ee:	9f 92       	push	r9
    31f0:	af 92       	push	r10
    31f2:	bf 92       	push	r11
    31f4:	cf 92       	push	r12
    31f6:	df 92       	push	r13
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	0f 93       	push	r16
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	dc 01       	movw	r26, r24
    3204:	e1 14       	cp	r14, r1
    3206:	f1 04       	cpc	r15, r1
    3208:	89 f0       	breq	.+34     	; 0x322c <xTaskGenericNotifyFromISR+0x40>
    320a:	e6 2f       	mov	r30, r22
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	ee 0f       	add	r30, r30
    3210:	ff 1f       	adc	r31, r31
    3212:	ee 0f       	add	r30, r30
    3214:	ff 1f       	adc	r31, r31
    3216:	e8 0f       	add	r30, r24
    3218:	f9 1f       	adc	r31, r25
    321a:	87 a4       	ldd	r8, Z+47	; 0x2f
    321c:	90 a8       	ldd	r9, Z+48	; 0x30
    321e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3220:	b2 a8       	ldd	r11, Z+50	; 0x32
    3222:	f7 01       	movw	r30, r14
    3224:	80 82       	st	Z, r8
    3226:	91 82       	std	Z+1, r9	; 0x01
    3228:	a2 82       	std	Z+2, r10	; 0x02
    322a:	b3 82       	std	Z+3, r11	; 0x03
    322c:	70 e0       	ldi	r23, 0x00	; 0
    322e:	fd 01       	movw	r30, r26
    3230:	e6 0f       	add	r30, r22
    3232:	f7 1f       	adc	r31, r23
    3234:	93 a9       	ldd	r25, Z+51	; 0x33
    3236:	82 e0       	ldi	r24, 0x02	; 2
    3238:	83 ab       	std	Z+51, r24	; 0x33
    323a:	02 30       	cpi	r16, 0x02	; 2
    323c:	01 f1       	breq	.+64     	; 0x327e <xTaskGenericNotifyFromISR+0x92>
    323e:	18 f4       	brcc	.+6      	; 0x3246 <xTaskGenericNotifyFromISR+0x5a>
    3240:	01 30       	cpi	r16, 0x01	; 1
    3242:	31 f0       	breq	.+12     	; 0x3250 <xTaskGenericNotifyFromISR+0x64>
    3244:	4d c0       	rjmp	.+154    	; 0x32e0 <xTaskGenericNotifyFromISR+0xf4>
    3246:	03 30       	cpi	r16, 0x03	; 3
    3248:	79 f1       	breq	.+94     	; 0x32a8 <xTaskGenericNotifyFromISR+0xbc>
    324a:	04 30       	cpi	r16, 0x04	; 4
    324c:	d1 f1       	breq	.+116    	; 0x32c2 <xTaskGenericNotifyFromISR+0xd6>
    324e:	48 c0       	rjmp	.+144    	; 0x32e0 <xTaskGenericNotifyFromISR+0xf4>
    3250:	66 0f       	add	r22, r22
    3252:	77 1f       	adc	r23, r23
    3254:	66 0f       	add	r22, r22
    3256:	77 1f       	adc	r23, r23
    3258:	fd 01       	movw	r30, r26
    325a:	e6 0f       	add	r30, r22
    325c:	f7 1f       	adc	r31, r23
    325e:	87 a4       	ldd	r8, Z+47	; 0x2f
    3260:	90 a8       	ldd	r9, Z+48	; 0x30
    3262:	a1 a8       	ldd	r10, Z+49	; 0x31
    3264:	b2 a8       	ldd	r11, Z+50	; 0x32
    3266:	ba 01       	movw	r22, r20
    3268:	a9 01       	movw	r20, r18
    326a:	48 29       	or	r20, r8
    326c:	59 29       	or	r21, r9
    326e:	6a 29       	or	r22, r10
    3270:	7b 29       	or	r23, r11
    3272:	47 a7       	std	Z+47, r20	; 0x2f
    3274:	50 ab       	std	Z+48, r21	; 0x30
    3276:	61 ab       	std	Z+49, r22	; 0x31
    3278:	72 ab       	std	Z+50, r23	; 0x32
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	34 c0       	rjmp	.+104    	; 0x32e6 <xTaskGenericNotifyFromISR+0xfa>
    327e:	66 0f       	add	r22, r22
    3280:	77 1f       	adc	r23, r23
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	fd 01       	movw	r30, r26
    3288:	e6 0f       	add	r30, r22
    328a:	f7 1f       	adc	r31, r23
    328c:	47 a5       	ldd	r20, Z+47	; 0x2f
    328e:	50 a9       	ldd	r21, Z+48	; 0x30
    3290:	61 a9       	ldd	r22, Z+49	; 0x31
    3292:	72 a9       	ldd	r23, Z+50	; 0x32
    3294:	4f 5f       	subi	r20, 0xFF	; 255
    3296:	5f 4f       	sbci	r21, 0xFF	; 255
    3298:	6f 4f       	sbci	r22, 0xFF	; 255
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	47 a7       	std	Z+47, r20	; 0x2f
    329e:	50 ab       	std	Z+48, r21	; 0x30
    32a0:	61 ab       	std	Z+49, r22	; 0x31
    32a2:	72 ab       	std	Z+50, r23	; 0x32
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	1f c0       	rjmp	.+62     	; 0x32e6 <xTaskGenericNotifyFromISR+0xfa>
    32a8:	66 0f       	add	r22, r22
    32aa:	77 1f       	adc	r23, r23
    32ac:	66 0f       	add	r22, r22
    32ae:	77 1f       	adc	r23, r23
    32b0:	fd 01       	movw	r30, r26
    32b2:	e6 0f       	add	r30, r22
    32b4:	f7 1f       	adc	r31, r23
    32b6:	27 a7       	std	Z+47, r18	; 0x2f
    32b8:	30 ab       	std	Z+48, r19	; 0x30
    32ba:	41 ab       	std	Z+49, r20	; 0x31
    32bc:	52 ab       	std	Z+50, r21	; 0x32
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	12 c0       	rjmp	.+36     	; 0x32e6 <xTaskGenericNotifyFromISR+0xfa>
    32c2:	92 30       	cpi	r25, 0x02	; 2
    32c4:	79 f0       	breq	.+30     	; 0x32e4 <xTaskGenericNotifyFromISR+0xf8>
    32c6:	66 0f       	add	r22, r22
    32c8:	77 1f       	adc	r23, r23
    32ca:	66 0f       	add	r22, r22
    32cc:	77 1f       	adc	r23, r23
    32ce:	fd 01       	movw	r30, r26
    32d0:	e6 0f       	add	r30, r22
    32d2:	f7 1f       	adc	r31, r23
    32d4:	27 a7       	std	Z+47, r18	; 0x2f
    32d6:	30 ab       	std	Z+48, r19	; 0x30
    32d8:	41 ab       	std	Z+49, r20	; 0x31
    32da:	52 ab       	std	Z+50, r21	; 0x32
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <xTaskGenericNotifyFromISR+0xfa>
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	01 c0       	rjmp	.+2      	; 0x32e6 <xTaskGenericNotifyFromISR+0xfa>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	91 30       	cpi	r25, 0x01	; 1
    32e8:	09 f0       	breq	.+2      	; 0x32ec <xTaskGenericNotifyFromISR+0x100>
    32ea:	96 c0       	rjmp	.+300    	; 0x3418 <xTaskGenericNotifyFromISR+0x22c>
    32ec:	90 91 ec 10 	lds	r25, 0x10EC	; 0x8010ec <uxSchedulerSuspended>
    32f0:	91 11       	cpse	r25, r1
    32f2:	5f c0       	rjmp	.+190    	; 0x33b2 <xTaskGenericNotifyFromISR+0x1c6>
    32f4:	1c 96       	adiw	r26, 0x0c	; 12
    32f6:	ed 91       	ld	r30, X+
    32f8:	fc 91       	ld	r31, X
    32fa:	1d 97       	sbiw	r26, 0x0d	; 13
    32fc:	16 96       	adiw	r26, 0x06	; 6
    32fe:	cd 91       	ld	r28, X+
    3300:	dc 91       	ld	r29, X
    3302:	17 97       	sbiw	r26, 0x07	; 7
    3304:	18 96       	adiw	r26, 0x08	; 8
    3306:	2d 91       	ld	r18, X+
    3308:	3c 91       	ld	r19, X
    330a:	19 97       	sbiw	r26, 0x09	; 9
    330c:	3f 83       	std	Y+7, r19	; 0x07
    330e:	2e 83       	std	Y+6, r18	; 0x06
    3310:	18 96       	adiw	r26, 0x08	; 8
    3312:	cd 91       	ld	r28, X+
    3314:	dc 91       	ld	r29, X
    3316:	19 97       	sbiw	r26, 0x09	; 9
    3318:	16 96       	adiw	r26, 0x06	; 6
    331a:	2d 91       	ld	r18, X+
    331c:	3c 91       	ld	r19, X
    331e:	17 97       	sbiw	r26, 0x07	; 7
    3320:	3d 83       	std	Y+5, r19	; 0x05
    3322:	2c 83       	std	Y+4, r18	; 0x04
    3324:	41 81       	ldd	r20, Z+1	; 0x01
    3326:	52 81       	ldd	r21, Z+2	; 0x02
    3328:	9d 01       	movw	r18, r26
    332a:	2e 5f       	subi	r18, 0xFE	; 254
    332c:	3f 4f       	sbci	r19, 0xFF	; 255
    332e:	42 17       	cp	r20, r18
    3330:	53 07       	cpc	r21, r19
    3332:	31 f4       	brne	.+12     	; 0x3340 <xTaskGenericNotifyFromISR+0x154>
    3334:	18 96       	adiw	r26, 0x08	; 8
    3336:	4d 91       	ld	r20, X+
    3338:	5c 91       	ld	r21, X
    333a:	19 97       	sbiw	r26, 0x09	; 9
    333c:	52 83       	std	Z+2, r21	; 0x02
    333e:	41 83       	std	Z+1, r20	; 0x01
    3340:	1d 96       	adiw	r26, 0x0d	; 13
    3342:	1c 92       	st	X, r1
    3344:	1e 92       	st	-X, r1
    3346:	1c 97       	sbiw	r26, 0x0c	; 12
    3348:	90 81       	ld	r25, Z
    334a:	91 50       	subi	r25, 0x01	; 1
    334c:	90 83       	st	Z, r25
    334e:	5a 96       	adiw	r26, 0x1a	; 26
    3350:	ec 91       	ld	r30, X
    3352:	5a 97       	sbiw	r26, 0x1a	; 26
    3354:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <uxTopReadyPriority>
    3358:	9e 17       	cp	r25, r30
    335a:	10 f4       	brcc	.+4      	; 0x3360 <xTaskGenericNotifyFromISR+0x174>
    335c:	e0 93 fb 10 	sts	0x10FB, r30	; 0x8010fb <uxTopReadyPriority>
    3360:	9b e0       	ldi	r25, 0x0B	; 11
    3362:	9e 9f       	mul	r25, r30
    3364:	f0 01       	movw	r30, r0
    3366:	11 24       	eor	r1, r1
    3368:	e3 5c       	subi	r30, 0xC3	; 195
    336a:	fe 4e       	sbci	r31, 0xEE	; 238
    336c:	01 80       	ldd	r0, Z+1	; 0x01
    336e:	f2 81       	ldd	r31, Z+2	; 0x02
    3370:	e0 2d       	mov	r30, r0
    3372:	17 96       	adiw	r26, 0x07	; 7
    3374:	fc 93       	st	X, r31
    3376:	ee 93       	st	-X, r30
    3378:	16 97       	sbiw	r26, 0x06	; 6
    337a:	46 81       	ldd	r20, Z+6	; 0x06
    337c:	57 81       	ldd	r21, Z+7	; 0x07
    337e:	19 96       	adiw	r26, 0x09	; 9
    3380:	5c 93       	st	X, r21
    3382:	4e 93       	st	-X, r20
    3384:	18 97       	sbiw	r26, 0x08	; 8
    3386:	c6 81       	ldd	r28, Z+6	; 0x06
    3388:	d7 81       	ldd	r29, Z+7	; 0x07
    338a:	3d 83       	std	Y+5, r19	; 0x05
    338c:	2c 83       	std	Y+4, r18	; 0x04
    338e:	37 83       	std	Z+7, r19	; 0x07
    3390:	26 83       	std	Z+6, r18	; 0x06
    3392:	5a 96       	adiw	r26, 0x1a	; 26
    3394:	ec 91       	ld	r30, X
    3396:	5a 97       	sbiw	r26, 0x1a	; 26
    3398:	9e 9f       	mul	r25, r30
    339a:	f0 01       	movw	r30, r0
    339c:	11 24       	eor	r1, r1
    339e:	e3 5c       	subi	r30, 0xC3	; 195
    33a0:	fe 4e       	sbci	r31, 0xEE	; 238
    33a2:	1d 96       	adiw	r26, 0x0d	; 13
    33a4:	fc 93       	st	X, r31
    33a6:	ee 93       	st	-X, r30
    33a8:	1c 97       	sbiw	r26, 0x0c	; 12
    33aa:	90 81       	ld	r25, Z
    33ac:	9f 5f       	subi	r25, 0xFF	; 255
    33ae:	90 83       	st	Z, r25
    33b0:	21 c0       	rjmp	.+66     	; 0x33f4 <xTaskGenericNotifyFromISR+0x208>
    33b2:	68 e1       	ldi	r22, 0x18	; 24
    33b4:	71 e1       	ldi	r23, 0x11	; 17
    33b6:	fb 01       	movw	r30, r22
    33b8:	c1 81       	ldd	r28, Z+1	; 0x01
    33ba:	d2 81       	ldd	r29, Z+2	; 0x02
    33bc:	53 96       	adiw	r26, 0x13	; 19
    33be:	dc 93       	st	X, r29
    33c0:	ce 93       	st	-X, r28
    33c2:	52 97       	sbiw	r26, 0x12	; 18
    33c4:	2e 81       	ldd	r18, Y+6	; 0x06
    33c6:	3f 81       	ldd	r19, Y+7	; 0x07
    33c8:	55 96       	adiw	r26, 0x15	; 21
    33ca:	3c 93       	st	X, r19
    33cc:	2e 93       	st	-X, r18
    33ce:	54 97       	sbiw	r26, 0x14	; 20
    33d0:	4e 81       	ldd	r20, Y+6	; 0x06
    33d2:	5f 81       	ldd	r21, Y+7	; 0x07
    33d4:	9d 01       	movw	r18, r26
    33d6:	22 5f       	subi	r18, 0xF2	; 242
    33d8:	3f 4f       	sbci	r19, 0xFF	; 255
    33da:	fa 01       	movw	r30, r20
    33dc:	35 83       	std	Z+5, r19	; 0x05
    33de:	24 83       	std	Z+4, r18	; 0x04
    33e0:	3f 83       	std	Y+7, r19	; 0x07
    33e2:	2e 83       	std	Y+6, r18	; 0x06
    33e4:	59 96       	adiw	r26, 0x19	; 25
    33e6:	7c 93       	st	X, r23
    33e8:	6e 93       	st	-X, r22
    33ea:	58 97       	sbiw	r26, 0x18	; 24
    33ec:	fb 01       	movw	r30, r22
    33ee:	90 81       	ld	r25, Z
    33f0:	9f 5f       	subi	r25, 0xFF	; 255
    33f2:	90 83       	st	Z, r25
    33f4:	5a 96       	adiw	r26, 0x1a	; 26
    33f6:	2c 91       	ld	r18, X
    33f8:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <pxCurrentTCB>
    33fc:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>
    3400:	92 8d       	ldd	r25, Z+26	; 0x1a
    3402:	92 17       	cp	r25, r18
    3404:	48 f4       	brcc	.+18     	; 0x3418 <xTaskGenericNotifyFromISR+0x22c>
    3406:	c1 14       	cp	r12, r1
    3408:	d1 04       	cpc	r13, r1
    340a:	19 f0       	breq	.+6      	; 0x3412 <xTaskGenericNotifyFromISR+0x226>
    340c:	91 e0       	ldi	r25, 0x01	; 1
    340e:	f6 01       	movw	r30, r12
    3410:	90 83       	st	Z, r25
    3412:	91 e0       	ldi	r25, 0x01	; 1
    3414:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <xYieldPending>
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	df 90       	pop	r13
    3424:	cf 90       	pop	r12
    3426:	bf 90       	pop	r11
    3428:	af 90       	pop	r10
    342a:	9f 90       	pop	r9
    342c:	8f 90       	pop	r8
    342e:	08 95       	ret

00003430 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	21 f4       	brne	.+8      	; 0x343c <xTaskGenericNotifyStateClear+0xc>
    3434:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <pxCurrentTCB>
    3438:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	fc 01       	movw	r30, r24
    3446:	e6 0f       	add	r30, r22
    3448:	f7 1f       	adc	r31, r23
    344a:	23 a9       	ldd	r18, Z+51	; 0x33
    344c:	22 30       	cpi	r18, 0x02	; 2
    344e:	31 f4       	brne	.+12     	; 0x345c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3450:	fc 01       	movw	r30, r24
    3452:	e6 0f       	add	r30, r22
    3454:	f7 1f       	adc	r31, r23
    3456:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	01 c0       	rjmp	.+2      	; 0x345e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    345c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    345e:	0f 90       	pop	r0
    3460:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3462:	08 95       	ret

00003464 <prvGetNextExpireTime>:
    3464:	dc 01       	movw	r26, r24
    3466:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <pxCurrentTimerList>
    346a:	f0 91 b8 11 	lds	r31, 0x11B8	; 0x8011b8 <pxCurrentTimerList+0x1>
    346e:	80 81       	ld	r24, Z
    3470:	91 e0       	ldi	r25, 0x01	; 1
    3472:	81 11       	cpse	r24, r1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9c 93       	st	X, r25
    3478:	91 11       	cpse	r25, r1
    347a:	08 c0       	rjmp	.+16     	; 0x348c <prvGetNextExpireTime+0x28>
    347c:	07 80       	ldd	r0, Z+7	; 0x07
    347e:	f0 85       	ldd	r31, Z+8	; 0x08
    3480:	e0 2d       	mov	r30, r0
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	08 95       	ret
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	70 e0       	ldi	r23, 0x00	; 0
    3490:	cb 01       	movw	r24, r22
    3492:	08 95       	ret

00003494 <prvInsertTimerInActiveList>:
    3494:	cf 92       	push	r12
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	fc 01       	movw	r30, r24
    34a2:	42 83       	std	Z+2, r20	; 0x02
    34a4:	53 83       	std	Z+3, r21	; 0x03
    34a6:	64 83       	std	Z+4, r22	; 0x04
    34a8:	75 83       	std	Z+5, r23	; 0x05
    34aa:	93 87       	std	Z+11, r25	; 0x0b
    34ac:	82 87       	std	Z+10, r24	; 0x0a
    34ae:	04 17       	cp	r16, r20
    34b0:	15 07       	cpc	r17, r21
    34b2:	26 07       	cpc	r18, r22
    34b4:	37 07       	cpc	r19, r23
    34b6:	c0 f0       	brcs	.+48     	; 0x34e8 <prvInsertTimerInActiveList+0x54>
    34b8:	0c 19       	sub	r16, r12
    34ba:	1d 09       	sbc	r17, r13
    34bc:	2e 09       	sbc	r18, r14
    34be:	3f 09       	sbc	r19, r15
    34c0:	86 85       	ldd	r24, Z+14	; 0x0e
    34c2:	97 85       	ldd	r25, Z+15	; 0x0f
    34c4:	a0 89       	ldd	r26, Z+16	; 0x10
    34c6:	b1 89       	ldd	r27, Z+17	; 0x11
    34c8:	08 17       	cp	r16, r24
    34ca:	19 07       	cpc	r17, r25
    34cc:	2a 07       	cpc	r18, r26
    34ce:	3b 07       	cpc	r19, r27
    34d0:	00 f5       	brcc	.+64     	; 0x3512 <prvInsertTimerInActiveList+0x7e>
    34d2:	bf 01       	movw	r22, r30
    34d4:	6e 5f       	subi	r22, 0xFE	; 254
    34d6:	7f 4f       	sbci	r23, 0xFF	; 255
    34d8:	80 91 b5 11 	lds	r24, 0x11B5	; 0x8011b5 <pxOverflowTimerList>
    34dc:	90 91 b6 11 	lds	r25, 0x11B6	; 0x8011b6 <pxOverflowTimerList+0x1>
    34e0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vListInsert>
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	18 c0       	rjmp	.+48     	; 0x3518 <prvInsertTimerInActiveList+0x84>
    34e8:	0c 15       	cp	r16, r12
    34ea:	1d 05       	cpc	r17, r13
    34ec:	2e 05       	cpc	r18, r14
    34ee:	3f 05       	cpc	r19, r15
    34f0:	28 f4       	brcc	.+10     	; 0x34fc <prvInsertTimerInActiveList+0x68>
    34f2:	4c 15       	cp	r20, r12
    34f4:	5d 05       	cpc	r21, r13
    34f6:	6e 05       	cpc	r22, r14
    34f8:	7f 05       	cpc	r23, r15
    34fa:	68 f4       	brcc	.+26     	; 0x3516 <prvInsertTimerInActiveList+0x82>
    34fc:	bf 01       	movw	r22, r30
    34fe:	6e 5f       	subi	r22, 0xFE	; 254
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <pxCurrentTimerList>
    3506:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <pxCurrentTimerList+0x1>
    350a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vListInsert>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	03 c0       	rjmp	.+6      	; 0x3518 <prvInsertTimerInActiveList+0x84>
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <prvInsertTimerInActiveList+0x84>
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	cf 90       	pop	r12
    3524:	08 95       	ret

00003526 <prvCheckForValidListAndQueue>:
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	0f 92       	push	r0
    352c:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <xTimerQueue>
    3530:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <xTimerQueue+0x1>
    3534:	89 2b       	or	r24, r25
    3536:	e9 f4       	brne	.+58     	; 0x3572 <prvCheckForValidListAndQueue+0x4c>
    3538:	84 ec       	ldi	r24, 0xC4	; 196
    353a:	91 e1       	ldi	r25, 0x11	; 17
    353c:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    3540:	89 eb       	ldi	r24, 0xB9	; 185
    3542:	91 e1       	ldi	r25, 0x11	; 17
    3544:	0e 94 0a 07 	call	0xe14	; 0xe14 <vListInitialise>
    3548:	84 ec       	ldi	r24, 0xC4	; 196
    354a:	91 e1       	ldi	r25, 0x11	; 17
    354c:	90 93 b8 11 	sts	0x11B8, r25	; 0x8011b8 <pxCurrentTimerList+0x1>
    3550:	80 93 b7 11 	sts	0x11B7, r24	; 0x8011b7 <pxCurrentTimerList>
    3554:	89 eb       	ldi	r24, 0xB9	; 185
    3556:	91 e1       	ldi	r25, 0x11	; 17
    3558:	90 93 b6 11 	sts	0x11B6, r25	; 0x8011b6 <pxOverflowTimerList+0x1>
    355c:	80 93 b5 11 	sts	0x11B5, r24	; 0x8011b5 <pxOverflowTimerList>
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	67 e0       	ldi	r22, 0x07	; 7
    3564:	8a e0       	ldi	r24, 0x0A	; 10
    3566:	0e 94 bd 09 	call	0x137a	; 0x137a <xQueueGenericCreate>
    356a:	90 93 b4 11 	sts	0x11B4, r25	; 0x8011b4 <xTimerQueue+0x1>
    356e:	80 93 b3 11 	sts	0x11B3, r24	; 0x8011b3 <xTimerQueue>
    3572:	0f 90       	pop	r0
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	08 95       	ret

00003578 <xTimerCreateTimerTask>:
    3578:	ef 92       	push	r14
    357a:	ff 92       	push	r15
    357c:	0f 93       	push	r16
    357e:	d3 df       	rcall	.-90     	; 0x3526 <prvCheckForValidListAndQueue>
    3580:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <xTimerQueue>
    3584:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <xTimerQueue+0x1>
    3588:	89 2b       	or	r24, r25
    358a:	91 f0       	breq	.+36     	; 0x35b0 <xTimerCreateTimerTask+0x38>
    358c:	0f 2e       	mov	r0, r31
    358e:	f1 eb       	ldi	r31, 0xB1	; 177
    3590:	ef 2e       	mov	r14, r31
    3592:	f1 e1       	ldi	r31, 0x11	; 17
    3594:	ff 2e       	mov	r15, r31
    3596:	f0 2d       	mov	r31, r0
    3598:	03 e0       	ldi	r16, 0x03	; 3
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 ec       	ldi	r20, 0xC0	; 192
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	6e e2       	ldi	r22, 0x2E	; 46
    35a4:	74 e0       	ldi	r23, 0x04	; 4
    35a6:	88 e5       	ldi	r24, 0x58	; 88
    35a8:	91 e0       	ldi	r25, 0x01	; 1
    35aa:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskCreate>
    35ae:	01 c0       	rjmp	.+2      	; 0x35b2 <xTimerCreateTimerTask+0x3a>
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	0f 91       	pop	r16
    35b4:	ff 90       	pop	r15
    35b6:	ef 90       	pop	r14
    35b8:	08 95       	ret

000035ba <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    35ba:	8f 92       	push	r8
    35bc:	9f 92       	push	r9
    35be:	af 92       	push	r10
    35c0:	bf 92       	push	r11
    35c2:	cf 92       	push	r12
    35c4:	df 92       	push	r13
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	27 97       	sbiw	r28, 0x07	; 7
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    35e2:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <xTimerQueue>
    35e6:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <xTimerQueue+0x1>
    35ea:	30 97       	sbiw	r30, 0x00	; 0
    35ec:	81 f1       	breq	.+96     	; 0x364e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    35ee:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    35f0:	2a 83       	std	Y+2, r18	; 0x02
    35f2:	3b 83       	std	Y+3, r19	; 0x03
    35f4:	4c 83       	std	Y+4, r20	; 0x04
    35f6:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    35f8:	9f 83       	std	Y+7, r25	; 0x07
    35fa:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    35fc:	66 30       	cpi	r22, 0x06	; 6
    35fe:	f4 f4       	brge	.+60     	; 0x363c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3600:	c4 db       	rcall	.-2168   	; 0x2d8a <xTaskGetSchedulerState>
    3602:	82 30       	cpi	r24, 0x02	; 2
    3604:	69 f4       	brne	.+26     	; 0x3620 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3606:	00 e0       	ldi	r16, 0x00	; 0
    3608:	a7 01       	movw	r20, r14
    360a:	96 01       	movw	r18, r12
    360c:	be 01       	movw	r22, r28
    360e:	6f 5f       	subi	r22, 0xFF	; 255
    3610:	7f 4f       	sbci	r23, 0xFF	; 255
    3612:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <xTimerQueue>
    3616:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <xTimerQueue+0x1>
    361a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <xQueueGenericSend>
    361e:	18 c0       	rjmp	.+48     	; 0x3650 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3620:	00 e0       	ldi	r16, 0x00	; 0
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	a9 01       	movw	r20, r18
    3628:	be 01       	movw	r22, r28
    362a:	6f 5f       	subi	r22, 0xFF	; 255
    362c:	7f 4f       	sbci	r23, 0xFF	; 255
    362e:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <xTimerQueue>
    3632:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <xTimerQueue+0x1>
    3636:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <xQueueGenericSend>
    363a:	0a c0       	rjmp	.+20     	; 0x3650 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	a8 01       	movw	r20, r16
    3640:	be 01       	movw	r22, r28
    3642:	6f 5f       	subi	r22, 0xFF	; 255
    3644:	7f 4f       	sbci	r23, 0xFF	; 255
    3646:	cf 01       	movw	r24, r30
    3648:	0e 94 90 0a 	call	0x1520	; 0x1520 <xQueueGenericSendFromISR>
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    364e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3650:	27 96       	adiw	r28, 0x07	; 7
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	df 91       	pop	r29
    365e:	cf 91       	pop	r28
    3660:	1f 91       	pop	r17
    3662:	0f 91       	pop	r16
    3664:	ff 90       	pop	r15
    3666:	ef 90       	pop	r14
    3668:	df 90       	pop	r13
    366a:	cf 90       	pop	r12
    366c:	bf 90       	pop	r11
    366e:	af 90       	pop	r10
    3670:	9f 90       	pop	r9
    3672:	8f 90       	pop	r8
    3674:	08 95       	ret

00003676 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3676:	8f 92       	push	r8
    3678:	9f 92       	push	r9
    367a:	af 92       	push	r10
    367c:	bf 92       	push	r11
    367e:	cf 92       	push	r12
    3680:	df 92       	push	r13
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    368e:	3b c0       	rjmp	.+118    	; 0x3706 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3690:	07 80       	ldd	r0, Z+7	; 0x07
    3692:	f0 85       	ldd	r31, Z+8	; 0x08
    3694:	e0 2d       	mov	r30, r0
    3696:	80 80       	ld	r8, Z
    3698:	91 80       	ldd	r9, Z+1	; 0x01
    369a:	a2 80       	ldd	r10, Z+2	; 0x02
    369c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    369e:	c0 85       	ldd	r28, Z+8	; 0x08
    36a0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    36a2:	8e 01       	movw	r16, r28
    36a4:	0e 5f       	subi	r16, 0xFE	; 254
    36a6:	1f 4f       	sbci	r17, 0xFF	; 255
    36a8:	c8 01       	movw	r24, r16
    36aa:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    36ae:	ec 89       	ldd	r30, Y+20	; 0x14
    36b0:	fd 89       	ldd	r31, Y+21	; 0x15
    36b2:	ce 01       	movw	r24, r28
    36b4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    36b6:	8e 89       	ldd	r24, Y+22	; 0x16
    36b8:	82 ff       	sbrs	r24, 2
    36ba:	25 c0       	rjmp	.+74     	; 0x3706 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    36bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    36be:	9f 85       	ldd	r25, Y+15	; 0x0f
    36c0:	a8 89       	ldd	r26, Y+16	; 0x10
    36c2:	b9 89       	ldd	r27, Y+17	; 0x11
    36c4:	88 0d       	add	r24, r8
    36c6:	99 1d       	adc	r25, r9
    36c8:	aa 1d       	adc	r26, r10
    36ca:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    36cc:	88 16       	cp	r8, r24
    36ce:	99 06       	cpc	r9, r25
    36d0:	aa 06       	cpc	r10, r26
    36d2:	bb 06       	cpc	r11, r27
    36d4:	70 f4       	brcc	.+28     	; 0x36f2 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    36d6:	8a 83       	std	Y+2, r24	; 0x02
    36d8:	9b 83       	std	Y+3, r25	; 0x03
    36da:	ac 83       	std	Y+4, r26	; 0x04
    36dc:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    36de:	db 87       	std	Y+11, r29	; 0x0b
    36e0:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    36e2:	b8 01       	movw	r22, r16
    36e4:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <pxCurrentTimerList>
    36e8:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <pxCurrentTimerList+0x1>
    36ec:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vListInsert>
    36f0:	0a c0       	rjmp	.+20     	; 0x3706 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    36f2:	c1 2c       	mov	r12, r1
    36f4:	d1 2c       	mov	r13, r1
    36f6:	76 01       	movw	r14, r12
    36f8:	00 e0       	ldi	r16, 0x00	; 0
    36fa:	10 e0       	ldi	r17, 0x00	; 0
    36fc:	a5 01       	movw	r20, r10
    36fe:	94 01       	movw	r18, r8
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	ce 01       	movw	r24, r28
    3704:	5a df       	rcall	.-332    	; 0x35ba <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3706:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <pxCurrentTimerList>
    370a:	f0 91 b8 11 	lds	r31, 0x11B8	; 0x8011b8 <pxCurrentTimerList+0x1>
    370e:	80 81       	ld	r24, Z
    3710:	81 11       	cpse	r24, r1
    3712:	be cf       	rjmp	.-132    	; 0x3690 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3714:	80 91 b5 11 	lds	r24, 0x11B5	; 0x8011b5 <pxOverflowTimerList>
    3718:	90 91 b6 11 	lds	r25, 0x11B6	; 0x8011b6 <pxOverflowTimerList+0x1>
    371c:	90 93 b8 11 	sts	0x11B8, r25	; 0x8011b8 <pxCurrentTimerList+0x1>
    3720:	80 93 b7 11 	sts	0x11B7, r24	; 0x8011b7 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3724:	f0 93 b6 11 	sts	0x11B6, r31	; 0x8011b6 <pxOverflowTimerList+0x1>
    3728:	e0 93 b5 11 	sts	0x11B5, r30	; 0x8011b5 <pxOverflowTimerList>
    }
    372c:	df 91       	pop	r29
    372e:	cf 91       	pop	r28
    3730:	1f 91       	pop	r17
    3732:	0f 91       	pop	r16
    3734:	ff 90       	pop	r15
    3736:	ef 90       	pop	r14
    3738:	df 90       	pop	r13
    373a:	cf 90       	pop	r12
    373c:	bf 90       	pop	r11
    373e:	af 90       	pop	r10
    3740:	9f 90       	pop	r9
    3742:	8f 90       	pop	r8
    3744:	08 95       	ret

00003746 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3746:	cf 92       	push	r12
    3748:	df 92       	push	r13
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3754:	0e 94 48 11 	call	0x2290	; 0x2290 <xTaskGetTickCount>
    3758:	6b 01       	movw	r12, r22
    375a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    375c:	80 91 ad 11 	lds	r24, 0x11AD	; 0x8011ad <xLastTime.2436>
    3760:	90 91 ae 11 	lds	r25, 0x11AE	; 0x8011ae <xLastTime.2436+0x1>
    3764:	a0 91 af 11 	lds	r26, 0x11AF	; 0x8011af <xLastTime.2436+0x2>
    3768:	b0 91 b0 11 	lds	r27, 0x11B0	; 0x8011b0 <xLastTime.2436+0x3>
    376c:	c8 16       	cp	r12, r24
    376e:	d9 06       	cpc	r13, r25
    3770:	ea 06       	cpc	r14, r26
    3772:	fb 06       	cpc	r15, r27
    3774:	20 f4       	brcc	.+8      	; 0x377e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3776:	7f df       	rcall	.-258    	; 0x3676 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	88 83       	st	Y, r24
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    377e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3780:	c0 92 ad 11 	sts	0x11AD, r12	; 0x8011ad <xLastTime.2436>
    3784:	d0 92 ae 11 	sts	0x11AE, r13	; 0x8011ae <xLastTime.2436+0x1>
    3788:	e0 92 af 11 	sts	0x11AF, r14	; 0x8011af <xLastTime.2436+0x2>
    378c:	f0 92 b0 11 	sts	0x11B0, r15	; 0x8011b0 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3790:	c7 01       	movw	r24, r14
    3792:	b6 01       	movw	r22, r12
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	df 90       	pop	r13
    379e:	cf 90       	pop	r12
    37a0:	08 95       	ret

000037a2 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    37a2:	4f 92       	push	r4
    37a4:	5f 92       	push	r5
    37a6:	6f 92       	push	r6
    37a8:	7f 92       	push	r7
    37aa:	8f 92       	push	r8
    37ac:	9f 92       	push	r9
    37ae:	af 92       	push	r10
    37b0:	bf 92       	push	r11
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	4b 01       	movw	r8, r22
    37c4:	5c 01       	movw	r10, r24
    37c6:	29 01       	movw	r4, r18
    37c8:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37ca:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <pxCurrentTimerList>
    37ce:	f0 91 b8 11 	lds	r31, 0x11B8	; 0x8011b8 <pxCurrentTimerList+0x1>
    37d2:	07 80       	ldd	r0, Z+7	; 0x07
    37d4:	f0 85       	ldd	r31, Z+8	; 0x08
    37d6:	e0 2d       	mov	r30, r0
    37d8:	c0 85       	ldd	r28, Z+8	; 0x08
    37da:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37dc:	ce 01       	movw	r24, r28
    37de:	02 96       	adiw	r24, 0x02	; 2
    37e0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37e4:	8e 89       	ldd	r24, Y+22	; 0x16
    37e6:	82 ff       	sbrs	r24, 2
    37e8:	1b c0       	rjmp	.+54     	; 0x3820 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    37ea:	4e 85       	ldd	r20, Y+14	; 0x0e
    37ec:	5f 85       	ldd	r21, Y+15	; 0x0f
    37ee:	68 89       	ldd	r22, Y+16	; 0x10
    37f0:	79 89       	ldd	r23, Y+17	; 0x11
    37f2:	48 0d       	add	r20, r8
    37f4:	59 1d       	adc	r21, r9
    37f6:	6a 1d       	adc	r22, r10
    37f8:	7b 1d       	adc	r23, r11
    37fa:	75 01       	movw	r14, r10
    37fc:	64 01       	movw	r12, r8
    37fe:	93 01       	movw	r18, r6
    3800:	82 01       	movw	r16, r4
    3802:	ce 01       	movw	r24, r28
    3804:	47 de       	rcall	.-882    	; 0x3494 <prvInsertTimerInActiveList>
    3806:	88 23       	and	r24, r24
    3808:	69 f0       	breq	.+26     	; 0x3824 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    380a:	c1 2c       	mov	r12, r1
    380c:	d1 2c       	mov	r13, r1
    380e:	76 01       	movw	r14, r12
    3810:	00 e0       	ldi	r16, 0x00	; 0
    3812:	10 e0       	ldi	r17, 0x00	; 0
    3814:	a5 01       	movw	r20, r10
    3816:	94 01       	movw	r18, r8
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	ce 01       	movw	r24, r28
    381c:	ce de       	rcall	.-612    	; 0x35ba <xTimerGenericCommand>
    381e:	02 c0       	rjmp	.+4      	; 0x3824 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3820:	8e 7f       	andi	r24, 0xFE	; 254
    3822:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3824:	ec 89       	ldd	r30, Y+20	; 0x14
    3826:	fd 89       	ldd	r31, Y+21	; 0x15
    3828:	ce 01       	movw	r24, r28
    382a:	19 95       	eicall
    }
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	df 90       	pop	r13
    383a:	cf 90       	pop	r12
    383c:	bf 90       	pop	r11
    383e:	af 90       	pop	r10
    3840:	9f 90       	pop	r9
    3842:	8f 90       	pop	r8
    3844:	7f 90       	pop	r7
    3846:	6f 90       	pop	r6
    3848:	5f 90       	pop	r5
    384a:	4f 90       	pop	r4
    384c:	08 95       	ret

0000384e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    384e:	8f 92       	push	r8
    3850:	9f 92       	push	r9
    3852:	af 92       	push	r10
    3854:	bf 92       	push	r11
    3856:	cf 92       	push	r12
    3858:	df 92       	push	r13
    385a:	ef 92       	push	r14
    385c:	ff 92       	push	r15
    385e:	1f 93       	push	r17
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	1f 92       	push	r1
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	6b 01       	movw	r12, r22
    386c:	7c 01       	movw	r14, r24
    386e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3870:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3874:	ce 01       	movw	r24, r28
    3876:	01 96       	adiw	r24, 0x01	; 1
    3878:	66 df       	rcall	.-308    	; 0x3746 <prvSampleTimeNow>
    387a:	4b 01       	movw	r8, r22
    387c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	81 11       	cpse	r24, r1
    3882:	2d c0       	rjmp	.+90     	; 0x38de <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3884:	11 11       	cpse	r17, r1
    3886:	0d c0       	rjmp	.+26     	; 0x38a2 <prvProcessTimerOrBlockTask+0x54>
    3888:	8c 14       	cp	r8, r12
    388a:	9d 04       	cpc	r9, r13
    388c:	ae 04       	cpc	r10, r14
    388e:	bf 04       	cpc	r11, r15
    3890:	40 f0       	brcs	.+16     	; 0x38a2 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3892:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3896:	a5 01       	movw	r20, r10
    3898:	94 01       	movw	r18, r8
    389a:	c7 01       	movw	r24, r14
    389c:	b6 01       	movw	r22, r12
    389e:	81 df       	rcall	.-254    	; 0x37a2 <prvProcessExpiredTimer>
    38a0:	20 c0       	rjmp	.+64     	; 0x38e2 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    38a2:	11 23       	and	r17, r17
    38a4:	41 f0       	breq	.+16     	; 0x38b6 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    38a6:	e0 91 b5 11 	lds	r30, 0x11B5	; 0x8011b5 <pxOverflowTimerList>
    38aa:	f0 91 b6 11 	lds	r31, 0x11B6	; 0x8011b6 <pxOverflowTimerList+0x1>
    38ae:	80 81       	ld	r24, Z
    38b0:	11 e0       	ldi	r17, 0x01	; 1
    38b2:	81 11       	cpse	r24, r1
    38b4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    38b6:	b7 01       	movw	r22, r14
    38b8:	a6 01       	movw	r20, r12
    38ba:	48 19       	sub	r20, r8
    38bc:	59 09       	sbc	r21, r9
    38be:	6a 09       	sbc	r22, r10
    38c0:	7b 09       	sbc	r23, r11
    38c2:	21 2f       	mov	r18, r17
    38c4:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <xTimerQueue>
    38c8:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <xTimerQueue+0x1>
    38cc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    38d0:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
    38d4:	81 11       	cpse	r24, r1
    38d6:	05 c0       	rjmp	.+10     	; 0x38e2 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    38d8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    38dc:	02 c0       	rjmp	.+4      	; 0x38e2 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    38de:	0e 94 82 12 	call	0x2504	; 0x2504 <xTaskResumeAll>
            }
        }
    }
    38e2:	0f 90       	pop	r0
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	ff 90       	pop	r15
    38ec:	ef 90       	pop	r14
    38ee:	df 90       	pop	r13
    38f0:	cf 90       	pop	r12
    38f2:	bf 90       	pop	r11
    38f4:	af 90       	pop	r10
    38f6:	9f 90       	pop	r9
    38f8:	8f 90       	pop	r8
    38fa:	08 95       	ret

000038fc <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    38fc:	af 92       	push	r10
    38fe:	bf 92       	push	r11
    3900:	cf 92       	push	r12
    3902:	df 92       	push	r13
    3904:	ef 92       	push	r14
    3906:	ff 92       	push	r15
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	28 97       	sbiw	r28, 0x08	; 8
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3920:	82 c0       	rjmp	.+260    	; 0x3a26 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	88 23       	and	r24, r24
    3926:	0c f4       	brge	.+2      	; 0x392a <prvProcessReceivedCommands+0x2e>
    3928:	7e c0       	rjmp	.+252    	; 0x3a26 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    392a:	ae 80       	ldd	r10, Y+6	; 0x06
    392c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    392e:	d5 01       	movw	r26, r10
    3930:	1c 96       	adiw	r26, 0x0c	; 12
    3932:	8d 91       	ld	r24, X+
    3934:	9c 91       	ld	r25, X
    3936:	1d 97       	sbiw	r26, 0x0d	; 13
    3938:	89 2b       	or	r24, r25
    393a:	21 f0       	breq	.+8      	; 0x3944 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    393c:	c5 01       	movw	r24, r10
    393e:	02 96       	adiw	r24, 0x02	; 2
    3940:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3944:	ce 01       	movw	r24, r28
    3946:	08 96       	adiw	r24, 0x08	; 8
    3948:	fe de       	rcall	.-516    	; 0x3746 <prvSampleTimeNow>
    394a:	8b 01       	movw	r16, r22
    394c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    394e:	e9 81       	ldd	r30, Y+1	; 0x01
    3950:	0e 2e       	mov	r0, r30
    3952:	00 0c       	add	r0, r0
    3954:	ff 0b       	sbc	r31, r31
    3956:	ea 30       	cpi	r30, 0x0A	; 10
    3958:	f1 05       	cpc	r31, r1
    395a:	08 f0       	brcs	.+2      	; 0x395e <prvProcessReceivedCommands+0x62>
    395c:	64 c0       	rjmp	.+200    	; 0x3a26 <prvProcessReceivedCommands+0x12a>
    395e:	88 27       	eor	r24, r24
    3960:	ee 58       	subi	r30, 0x8E	; 142
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	8f 4f       	sbci	r24, 0xFF	; 255
    3966:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    396a:	f5 01       	movw	r30, r10
    396c:	86 89       	ldd	r24, Z+22	; 0x16
    396e:	81 60       	ori	r24, 0x01	; 1
    3970:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3972:	ca 80       	ldd	r12, Y+2	; 0x02
    3974:	db 80       	ldd	r13, Y+3	; 0x03
    3976:	ec 80       	ldd	r14, Y+4	; 0x04
    3978:	fd 80       	ldd	r15, Y+5	; 0x05
    397a:	46 85       	ldd	r20, Z+14	; 0x0e
    397c:	57 85       	ldd	r21, Z+15	; 0x0f
    397e:	60 89       	ldd	r22, Z+16	; 0x10
    3980:	71 89       	ldd	r23, Z+17	; 0x11
    3982:	4c 0d       	add	r20, r12
    3984:	5d 1d       	adc	r21, r13
    3986:	6e 1d       	adc	r22, r14
    3988:	7f 1d       	adc	r23, r15
    398a:	c5 01       	movw	r24, r10
    398c:	83 dd       	rcall	.-1274   	; 0x3494 <prvInsertTimerInActiveList>
    398e:	88 23       	and	r24, r24
    3990:	09 f4       	brne	.+2      	; 0x3994 <prvProcessReceivedCommands+0x98>
    3992:	49 c0       	rjmp	.+146    	; 0x3a26 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3994:	d5 01       	movw	r26, r10
    3996:	54 96       	adiw	r26, 0x14	; 20
    3998:	ed 91       	ld	r30, X+
    399a:	fc 91       	ld	r31, X
    399c:	55 97       	sbiw	r26, 0x15	; 21
    399e:	c5 01       	movw	r24, r10
    39a0:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    39a2:	f5 01       	movw	r30, r10
    39a4:	86 89       	ldd	r24, Z+22	; 0x16
    39a6:	82 ff       	sbrs	r24, 2
    39a8:	3e c0       	rjmp	.+124    	; 0x3a26 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    39aa:	4a 81       	ldd	r20, Y+2	; 0x02
    39ac:	5b 81       	ldd	r21, Y+3	; 0x03
    39ae:	6c 81       	ldd	r22, Y+4	; 0x04
    39b0:	7d 81       	ldd	r23, Y+5	; 0x05
    39b2:	86 85       	ldd	r24, Z+14	; 0x0e
    39b4:	97 85       	ldd	r25, Z+15	; 0x0f
    39b6:	a0 89       	ldd	r26, Z+16	; 0x10
    39b8:	b1 89       	ldd	r27, Z+17	; 0x11
    39ba:	9a 01       	movw	r18, r20
    39bc:	ab 01       	movw	r20, r22
    39be:	28 0f       	add	r18, r24
    39c0:	39 1f       	adc	r19, r25
    39c2:	4a 1f       	adc	r20, r26
    39c4:	5b 1f       	adc	r21, r27
    39c6:	c1 2c       	mov	r12, r1
    39c8:	d1 2c       	mov	r13, r1
    39ca:	76 01       	movw	r14, r12
    39cc:	00 e0       	ldi	r16, 0x00	; 0
    39ce:	10 e0       	ldi	r17, 0x00	; 0
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	c5 01       	movw	r24, r10
    39d4:	f2 dd       	rcall	.-1052   	; 0x35ba <xTimerGenericCommand>
    39d6:	27 c0       	rjmp	.+78     	; 0x3a26 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    39d8:	d5 01       	movw	r26, r10
    39da:	56 96       	adiw	r26, 0x16	; 22
    39dc:	8c 91       	ld	r24, X
    39de:	56 97       	sbiw	r26, 0x16	; 22
    39e0:	8e 7f       	andi	r24, 0xFE	; 254
    39e2:	56 96       	adiw	r26, 0x16	; 22
    39e4:	8c 93       	st	X, r24
                        break;
    39e6:	1f c0       	rjmp	.+62     	; 0x3a26 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    39e8:	f5 01       	movw	r30, r10
    39ea:	86 89       	ldd	r24, Z+22	; 0x16
    39ec:	81 60       	ori	r24, 0x01	; 1
    39ee:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    39f0:	4a 81       	ldd	r20, Y+2	; 0x02
    39f2:	5b 81       	ldd	r21, Y+3	; 0x03
    39f4:	6c 81       	ldd	r22, Y+4	; 0x04
    39f6:	7d 81       	ldd	r23, Y+5	; 0x05
    39f8:	46 87       	std	Z+14, r20	; 0x0e
    39fa:	57 87       	std	Z+15, r21	; 0x0f
    39fc:	60 8b       	std	Z+16, r22	; 0x10
    39fe:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3a00:	40 0f       	add	r20, r16
    3a02:	51 1f       	adc	r21, r17
    3a04:	62 1f       	adc	r22, r18
    3a06:	73 1f       	adc	r23, r19
    3a08:	68 01       	movw	r12, r16
    3a0a:	79 01       	movw	r14, r18
    3a0c:	c5 01       	movw	r24, r10
    3a0e:	42 dd       	rcall	.-1404   	; 0x3494 <prvInsertTimerInActiveList>
                        break;
    3a10:	0a c0       	rjmp	.+20     	; 0x3a26 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3a12:	f5 01       	movw	r30, r10
    3a14:	86 89       	ldd	r24, Z+22	; 0x16
    3a16:	81 fd       	sbrc	r24, 1
    3a18:	04 c0       	rjmp	.+8      	; 0x3a22 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3a1a:	c5 01       	movw	r24, r10
    3a1c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortFree>
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3a22:	8e 7f       	andi	r24, 0xFE	; 254
    3a24:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	a9 01       	movw	r20, r18
    3a2c:	be 01       	movw	r22, r28
    3a2e:	6f 5f       	subi	r22, 0xFF	; 255
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255
    3a32:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <xTimerQueue>
    3a36:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <xTimerQueue+0x1>
    3a3a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueReceive>
    3a3e:	81 11       	cpse	r24, r1
    3a40:	70 cf       	rjmp	.-288    	; 0x3922 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3a42:	28 96       	adiw	r28, 0x08	; 8
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	df 91       	pop	r29
    3a50:	cf 91       	pop	r28
    3a52:	1f 91       	pop	r17
    3a54:	0f 91       	pop	r16
    3a56:	ff 90       	pop	r15
    3a58:	ef 90       	pop	r14
    3a5a:	df 90       	pop	r13
    3a5c:	cf 90       	pop	r12
    3a5e:	bf 90       	pop	r11
    3a60:	af 90       	pop	r10
    3a62:	08 95       	ret

00003a64 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3a64:	08 95       	ret

00003a66 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3a66:	84 b1       	in	r24, 0x04	; 4
    3a68:	80 68       	ori	r24, 0x80	; 128
    3a6a:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3a6c:	85 b1       	in	r24, 0x05	; 5
    3a6e:	80 68       	ori	r24, 0x80	; 128
    3a70:	85 b9       	out	0x05, r24	; 5
    3a72:	08 95       	ret

00003a74 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3a74:	83 b1       	in	r24, 0x03	; 3
    3a76:	80 68       	ori	r24, 0x80	; 128
    3a78:	83 b9       	out	0x03, r24	; 3
    3a7a:	08 95       	ret

00003a7c <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3a7c:	f4 df       	rcall	.-24     	; 0x3a66 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a7e:	2f ef       	ldi	r18, 0xFF	; 255
    3a80:	80 e7       	ldi	r24, 0x70	; 112
    3a82:	92 e0       	ldi	r25, 0x02	; 2
    3a84:	21 50       	subi	r18, 0x01	; 1
    3a86:	80 40       	sbci	r24, 0x00	; 0
    3a88:	90 40       	sbci	r25, 0x00	; 0
    3a8a:	e1 f7       	brne	.-8      	; 0x3a84 <vApplicationMallocFailedHook+0x8>
    3a8c:	00 c0       	rjmp	.+0      	; 0x3a8e <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3a8e:	00 00       	nop
    3a90:	f1 df       	rcall	.-30     	; 0x3a74 <prvBlinkMainLed>
    3a92:	f5 cf       	rjmp	.-22     	; 0x3a7e <vApplicationMallocFailedHook+0x2>

00003a94 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3a94:	e8 df       	rcall	.-48     	; 0x3a66 <prvSetMainLedOn>
    3a96:	2f ef       	ldi	r18, 0xFF	; 255
    3a98:	87 ea       	ldi	r24, 0xA7	; 167
    3a9a:	91 e6       	ldi	r25, 0x61	; 97
    3a9c:	21 50       	subi	r18, 0x01	; 1
    3a9e:	80 40       	sbci	r24, 0x00	; 0
    3aa0:	90 40       	sbci	r25, 0x00	; 0
    3aa2:	e1 f7       	brne	.-8      	; 0x3a9c <vApplicationStackOverflowHook+0x8>
    3aa4:	00 c0       	rjmp	.+0      	; 0x3aa6 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3aa6:	00 00       	nop
    3aa8:	e5 df       	rcall	.-54     	; 0x3a74 <prvBlinkMainLed>
    3aaa:	f5 cf       	rjmp	.-22     	; 0x3a96 <vApplicationStackOverflowHook+0x2>

00003aac <createTasksForSensors>:
	createTasksForSensors();
	lora_handler_initialize(4, temperature_sensor, co2_sensor);
}

void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    3aac:	60 91 cf 11 	lds	r22, 0x11CF	; 0x8011cf <taskReadyBits>
    3ab0:	70 91 d0 11 	lds	r23, 0x11D0	; 0x8011d0 <taskReadyBits+0x1>
    3ab4:	21 e0       	ldi	r18, 0x01	; 1
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	83 e0       	ldi	r24, 0x03	; 3
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	0e 94 af 02 	call	0x55e	; 0x55e <createTemp>
    3ac4:	90 93 f6 12 	sts	0x12F6, r25	; 0x8012f6 <temperature_sensor+0x1>
    3ac8:	80 93 f5 12 	sts	0x12F5, r24	; 0x8012f5 <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    3acc:	60 91 cf 11 	lds	r22, 0x11CF	; 0x8011cf <taskReadyBits>
    3ad0:	70 91 d0 11 	lds	r23, 0x11D0	; 0x8011d0 <taskReadyBits+0x1>
    3ad4:	22 e0       	ldi	r18, 0x02	; 2
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	40 e0       	ldi	r20, 0x00	; 0
    3ada:	50 e0       	ldi	r21, 0x00	; 0
    3adc:	83 e0       	ldi	r24, 0x03	; 3
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0e 94 01 02 	call	0x402	; 0x402 <createCO2>
    3ae4:	90 93 fa 12 	sts	0x12FA, r25	; 0x8012fa <co2_sensor+0x1>
    3ae8:	80 93 f9 12 	sts	0x12F9, r24	; 0x8012f9 <co2_sensor>
    3aec:	08 95       	ret

00003aee <create_tasks_and_semaphores>:
#define BIT_TEMP_READY (1 << 0)
#define BIT_CO2_READY (1 << 1)


void create_tasks_and_semaphores(void)
{
    3aee:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3af0:	80 91 f7 12 	lds	r24, 0x12F7	; 0x8012f7 <xTestSemaphore>
    3af4:	90 91 f8 12 	lds	r25, 0x12F8	; 0x8012f8 <xTestSemaphore+0x1>
    3af8:	89 2b       	or	r24, r25
    3afa:	89 f4       	brne	.+34     	; 0x3b1e <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	0e 94 84 0a 	call	0x1508	; 0x1508 <xQueueCreateMutex>
    3b02:	90 93 f8 12 	sts	0x12F8, r25	; 0x8012f8 <xTestSemaphore+0x1>
    3b06:	80 93 f7 12 	sts	0x12F7, r24	; 0x8012f7 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	41 f0       	breq	.+16     	; 0x3b1e <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3b0e:	00 e0       	ldi	r16, 0x00	; 0
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	a9 01       	movw	r20, r18
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	70 e0       	ldi	r23, 0x00	; 0
    3b1a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <xQueueGenericSend>
		}
	}
	
	
	createTasksForSensors();
    3b1e:	c6 df       	rcall	.-116    	; 0x3aac <createTasksForSensors>
	lora_handler_initialize(4, temperature_sensor, co2_sensor);
    3b20:	40 91 f9 12 	lds	r20, 0x12F9	; 0x8012f9 <co2_sensor>
    3b24:	50 91 fa 12 	lds	r21, 0x12FA	; 0x8012fa <co2_sensor+0x1>
    3b28:	60 91 f5 12 	lds	r22, 0x12F5	; 0x8012f5 <temperature_sensor>
    3b2c:	70 91 f6 12 	lds	r23, 0x12F6	; 0x8012f6 <temperature_sensor+0x1>
    3b30:	84 e0       	ldi	r24, 0x04	; 4
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	0e 94 33 04 	call	0x866	; 0x866 <lora_handler_initialize>
}
    3b38:	0f 91       	pop	r16
    3b3a:	08 95       	ret

00003b3c <initializeSystem>:
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    3b3c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <xEventGroupCreate>
    3b40:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <taskReadyBits+0x1>
    3b44:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	0e 94 8a 28 	call	0x5114	; 0x5114 <stdio_initialise>
	// Method for tasks and semaphore
	lora_driver_initialise(ser_USART1, NULL);
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	26 d3       	rcall	.+1612   	; 0x41a2 <lora_driver_initialise>
	create_tasks_and_semaphores();
    3b56:	cb cf       	rjmp	.-106    	; 0x3aee <create_tasks_and_semaphores>
    3b58:	08 95       	ret

00003b5a <main>:
    3b5a:	f0 df       	rcall	.-32     	; 0x3b3c <initializeSystem>
}

int main(void){
	initializeSystem();
	vTaskStartScheduler();
    3b5c:	0e 94 0a 11 	call	0x2214	; 0x2214 <vTaskStartScheduler>
    3b60:	ff cf       	rjmp	.-2      	; 0x3b60 <main+0x6>

00003b62 <__fixsfsi>:
    3b62:	04 d0       	rcall	.+8      	; 0x3b6c <__fixunssfsi>
    3b64:	68 94       	set
    3b66:	b1 11       	cpse	r27, r1
    3b68:	50 c0       	rjmp	.+160    	; 0x3c0a <__fp_szero>
    3b6a:	08 95       	ret

00003b6c <__fixunssfsi>:
    3b6c:	33 d0       	rcall	.+102    	; 0x3bd4 <__fp_splitA>
    3b6e:	88 f0       	brcs	.+34     	; 0x3b92 <__fixunssfsi+0x26>
    3b70:	9f 57       	subi	r25, 0x7F	; 127
    3b72:	90 f0       	brcs	.+36     	; 0x3b98 <__fixunssfsi+0x2c>
    3b74:	b9 2f       	mov	r27, r25
    3b76:	99 27       	eor	r25, r25
    3b78:	b7 51       	subi	r27, 0x17	; 23
    3b7a:	a0 f0       	brcs	.+40     	; 0x3ba4 <__fixunssfsi+0x38>
    3b7c:	d1 f0       	breq	.+52     	; 0x3bb2 <__fixunssfsi+0x46>
    3b7e:	66 0f       	add	r22, r22
    3b80:	77 1f       	adc	r23, r23
    3b82:	88 1f       	adc	r24, r24
    3b84:	99 1f       	adc	r25, r25
    3b86:	1a f0       	brmi	.+6      	; 0x3b8e <__fixunssfsi+0x22>
    3b88:	ba 95       	dec	r27
    3b8a:	c9 f7       	brne	.-14     	; 0x3b7e <__fixunssfsi+0x12>
    3b8c:	12 c0       	rjmp	.+36     	; 0x3bb2 <__fixunssfsi+0x46>
    3b8e:	b1 30       	cpi	r27, 0x01	; 1
    3b90:	81 f0       	breq	.+32     	; 0x3bb2 <__fixunssfsi+0x46>
    3b92:	3a d0       	rcall	.+116    	; 0x3c08 <__fp_zero>
    3b94:	b1 e0       	ldi	r27, 0x01	; 1
    3b96:	08 95       	ret
    3b98:	37 c0       	rjmp	.+110    	; 0x3c08 <__fp_zero>
    3b9a:	67 2f       	mov	r22, r23
    3b9c:	78 2f       	mov	r23, r24
    3b9e:	88 27       	eor	r24, r24
    3ba0:	b8 5f       	subi	r27, 0xF8	; 248
    3ba2:	39 f0       	breq	.+14     	; 0x3bb2 <__fixunssfsi+0x46>
    3ba4:	b9 3f       	cpi	r27, 0xF9	; 249
    3ba6:	cc f3       	brlt	.-14     	; 0x3b9a <__fixunssfsi+0x2e>
    3ba8:	86 95       	lsr	r24
    3baa:	77 95       	ror	r23
    3bac:	67 95       	ror	r22
    3bae:	b3 95       	inc	r27
    3bb0:	d9 f7       	brne	.-10     	; 0x3ba8 <__fixunssfsi+0x3c>
    3bb2:	3e f4       	brtc	.+14     	; 0x3bc2 <__fixunssfsi+0x56>
    3bb4:	90 95       	com	r25
    3bb6:	80 95       	com	r24
    3bb8:	70 95       	com	r23
    3bba:	61 95       	neg	r22
    3bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	08 95       	ret

00003bc4 <__fp_split3>:
    3bc4:	57 fd       	sbrc	r21, 7
    3bc6:	90 58       	subi	r25, 0x80	; 128
    3bc8:	44 0f       	add	r20, r20
    3bca:	55 1f       	adc	r21, r21
    3bcc:	59 f0       	breq	.+22     	; 0x3be4 <__fp_splitA+0x10>
    3bce:	5f 3f       	cpi	r21, 0xFF	; 255
    3bd0:	71 f0       	breq	.+28     	; 0x3bee <__fp_splitA+0x1a>
    3bd2:	47 95       	ror	r20

00003bd4 <__fp_splitA>:
    3bd4:	88 0f       	add	r24, r24
    3bd6:	97 fb       	bst	r25, 7
    3bd8:	99 1f       	adc	r25, r25
    3bda:	61 f0       	breq	.+24     	; 0x3bf4 <__fp_splitA+0x20>
    3bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    3bde:	79 f0       	breq	.+30     	; 0x3bfe <__fp_splitA+0x2a>
    3be0:	87 95       	ror	r24
    3be2:	08 95       	ret
    3be4:	12 16       	cp	r1, r18
    3be6:	13 06       	cpc	r1, r19
    3be8:	14 06       	cpc	r1, r20
    3bea:	55 1f       	adc	r21, r21
    3bec:	f2 cf       	rjmp	.-28     	; 0x3bd2 <__fp_split3+0xe>
    3bee:	46 95       	lsr	r20
    3bf0:	f1 df       	rcall	.-30     	; 0x3bd4 <__fp_splitA>
    3bf2:	08 c0       	rjmp	.+16     	; 0x3c04 <__fp_splitA+0x30>
    3bf4:	16 16       	cp	r1, r22
    3bf6:	17 06       	cpc	r1, r23
    3bf8:	18 06       	cpc	r1, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	f1 cf       	rjmp	.-30     	; 0x3be0 <__fp_splitA+0xc>
    3bfe:	86 95       	lsr	r24
    3c00:	71 05       	cpc	r23, r1
    3c02:	61 05       	cpc	r22, r1
    3c04:	08 94       	sec
    3c06:	08 95       	ret

00003c08 <__fp_zero>:
    3c08:	e8 94       	clt

00003c0a <__fp_szero>:
    3c0a:	bb 27       	eor	r27, r27
    3c0c:	66 27       	eor	r22, r22
    3c0e:	77 27       	eor	r23, r23
    3c10:	cb 01       	movw	r24, r22
    3c12:	97 f9       	bld	r25, 7
    3c14:	08 95       	ret

00003c16 <modf>:
    3c16:	fa 01       	movw	r30, r20
    3c18:	dc 01       	movw	r26, r24
    3c1a:	aa 0f       	add	r26, r26
    3c1c:	bb 1f       	adc	r27, r27
    3c1e:	9b 01       	movw	r18, r22
    3c20:	ac 01       	movw	r20, r24
    3c22:	bf 57       	subi	r27, 0x7F	; 127
    3c24:	28 f4       	brcc	.+10     	; 0x3c30 <modf+0x1a>
    3c26:	22 27       	eor	r18, r18
    3c28:	33 27       	eor	r19, r19
    3c2a:	44 27       	eor	r20, r20
    3c2c:	50 78       	andi	r21, 0x80	; 128
    3c2e:	1f c0       	rjmp	.+62     	; 0x3c6e <modf+0x58>
    3c30:	b7 51       	subi	r27, 0x17	; 23
    3c32:	88 f4       	brcc	.+34     	; 0x3c56 <modf+0x40>
    3c34:	ab 2f       	mov	r26, r27
    3c36:	00 24       	eor	r0, r0
    3c38:	46 95       	lsr	r20
    3c3a:	37 95       	ror	r19
    3c3c:	27 95       	ror	r18
    3c3e:	01 1c       	adc	r0, r1
    3c40:	a3 95       	inc	r26
    3c42:	d2 f3       	brmi	.-12     	; 0x3c38 <modf+0x22>
    3c44:	00 20       	and	r0, r0
    3c46:	69 f0       	breq	.+26     	; 0x3c62 <modf+0x4c>
    3c48:	22 0f       	add	r18, r18
    3c4a:	33 1f       	adc	r19, r19
    3c4c:	44 1f       	adc	r20, r20
    3c4e:	b3 95       	inc	r27
    3c50:	da f3       	brmi	.-10     	; 0x3c48 <modf+0x32>
    3c52:	0d d0       	rcall	.+26     	; 0x3c6e <modf+0x58>
    3c54:	76 c0       	rjmp	.+236    	; 0x3d42 <__subsf3>
    3c56:	61 30       	cpi	r22, 0x01	; 1
    3c58:	71 05       	cpc	r23, r1
    3c5a:	a0 e8       	ldi	r26, 0x80	; 128
    3c5c:	8a 07       	cpc	r24, r26
    3c5e:	b9 46       	sbci	r27, 0x69	; 105
    3c60:	30 f4       	brcc	.+12     	; 0x3c6e <modf+0x58>
    3c62:	9b 01       	movw	r18, r22
    3c64:	ac 01       	movw	r20, r24
    3c66:	66 27       	eor	r22, r22
    3c68:	77 27       	eor	r23, r23
    3c6a:	88 27       	eor	r24, r24
    3c6c:	90 78       	andi	r25, 0x80	; 128
    3c6e:	30 96       	adiw	r30, 0x00	; 0
    3c70:	21 f0       	breq	.+8      	; 0x3c7a <modf+0x64>
    3c72:	20 83       	st	Z, r18
    3c74:	31 83       	std	Z+1, r19	; 0x01
    3c76:	42 83       	std	Z+2, r20	; 0x02
    3c78:	53 83       	std	Z+3, r21	; 0x03
    3c7a:	08 95       	ret

00003c7c <__mulsf3>:
    3c7c:	0b d0       	rcall	.+22     	; 0x3c94 <__mulsf3x>
    3c7e:	dd c0       	rjmp	.+442    	; 0x3e3a <__fp_round>
    3c80:	ce d0       	rcall	.+412    	; 0x3e1e <__fp_pscA>
    3c82:	28 f0       	brcs	.+10     	; 0x3c8e <__mulsf3+0x12>
    3c84:	d3 d0       	rcall	.+422    	; 0x3e2c <__fp_pscB>
    3c86:	18 f0       	brcs	.+6      	; 0x3c8e <__mulsf3+0x12>
    3c88:	95 23       	and	r25, r21
    3c8a:	09 f0       	breq	.+2      	; 0x3c8e <__mulsf3+0x12>
    3c8c:	bf c0       	rjmp	.+382    	; 0x3e0c <__fp_inf>
    3c8e:	c4 c0       	rjmp	.+392    	; 0x3e18 <__fp_nan>
    3c90:	11 24       	eor	r1, r1
    3c92:	bb cf       	rjmp	.-138    	; 0x3c0a <__fp_szero>

00003c94 <__mulsf3x>:
    3c94:	97 df       	rcall	.-210    	; 0x3bc4 <__fp_split3>
    3c96:	a0 f3       	brcs	.-24     	; 0x3c80 <__mulsf3+0x4>

00003c98 <__mulsf3_pse>:
    3c98:	95 9f       	mul	r25, r21
    3c9a:	d1 f3       	breq	.-12     	; 0x3c90 <__mulsf3+0x14>
    3c9c:	95 0f       	add	r25, r21
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	55 1f       	adc	r21, r21
    3ca2:	62 9f       	mul	r22, r18
    3ca4:	f0 01       	movw	r30, r0
    3ca6:	72 9f       	mul	r23, r18
    3ca8:	bb 27       	eor	r27, r27
    3caa:	f0 0d       	add	r31, r0
    3cac:	b1 1d       	adc	r27, r1
    3cae:	63 9f       	mul	r22, r19
    3cb0:	aa 27       	eor	r26, r26
    3cb2:	f0 0d       	add	r31, r0
    3cb4:	b1 1d       	adc	r27, r1
    3cb6:	aa 1f       	adc	r26, r26
    3cb8:	64 9f       	mul	r22, r20
    3cba:	66 27       	eor	r22, r22
    3cbc:	b0 0d       	add	r27, r0
    3cbe:	a1 1d       	adc	r26, r1
    3cc0:	66 1f       	adc	r22, r22
    3cc2:	82 9f       	mul	r24, r18
    3cc4:	22 27       	eor	r18, r18
    3cc6:	b0 0d       	add	r27, r0
    3cc8:	a1 1d       	adc	r26, r1
    3cca:	62 1f       	adc	r22, r18
    3ccc:	73 9f       	mul	r23, r19
    3cce:	b0 0d       	add	r27, r0
    3cd0:	a1 1d       	adc	r26, r1
    3cd2:	62 1f       	adc	r22, r18
    3cd4:	83 9f       	mul	r24, r19
    3cd6:	a0 0d       	add	r26, r0
    3cd8:	61 1d       	adc	r22, r1
    3cda:	22 1f       	adc	r18, r18
    3cdc:	74 9f       	mul	r23, r20
    3cde:	33 27       	eor	r19, r19
    3ce0:	a0 0d       	add	r26, r0
    3ce2:	61 1d       	adc	r22, r1
    3ce4:	23 1f       	adc	r18, r19
    3ce6:	84 9f       	mul	r24, r20
    3ce8:	60 0d       	add	r22, r0
    3cea:	21 1d       	adc	r18, r1
    3cec:	82 2f       	mov	r24, r18
    3cee:	76 2f       	mov	r23, r22
    3cf0:	6a 2f       	mov	r22, r26
    3cf2:	11 24       	eor	r1, r1
    3cf4:	9f 57       	subi	r25, 0x7F	; 127
    3cf6:	50 40       	sbci	r21, 0x00	; 0
    3cf8:	8a f0       	brmi	.+34     	; 0x3d1c <__mulsf3_pse+0x84>
    3cfa:	e1 f0       	breq	.+56     	; 0x3d34 <__mulsf3_pse+0x9c>
    3cfc:	88 23       	and	r24, r24
    3cfe:	4a f0       	brmi	.+18     	; 0x3d12 <__mulsf3_pse+0x7a>
    3d00:	ee 0f       	add	r30, r30
    3d02:	ff 1f       	adc	r31, r31
    3d04:	bb 1f       	adc	r27, r27
    3d06:	66 1f       	adc	r22, r22
    3d08:	77 1f       	adc	r23, r23
    3d0a:	88 1f       	adc	r24, r24
    3d0c:	91 50       	subi	r25, 0x01	; 1
    3d0e:	50 40       	sbci	r21, 0x00	; 0
    3d10:	a9 f7       	brne	.-22     	; 0x3cfc <__mulsf3_pse+0x64>
    3d12:	9e 3f       	cpi	r25, 0xFE	; 254
    3d14:	51 05       	cpc	r21, r1
    3d16:	70 f0       	brcs	.+28     	; 0x3d34 <__mulsf3_pse+0x9c>
    3d18:	79 c0       	rjmp	.+242    	; 0x3e0c <__fp_inf>
    3d1a:	77 cf       	rjmp	.-274    	; 0x3c0a <__fp_szero>
    3d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d1e:	ec f3       	brlt	.-6      	; 0x3d1a <__mulsf3_pse+0x82>
    3d20:	98 3e       	cpi	r25, 0xE8	; 232
    3d22:	dc f3       	brlt	.-10     	; 0x3d1a <__mulsf3_pse+0x82>
    3d24:	86 95       	lsr	r24
    3d26:	77 95       	ror	r23
    3d28:	67 95       	ror	r22
    3d2a:	b7 95       	ror	r27
    3d2c:	f7 95       	ror	r31
    3d2e:	e7 95       	ror	r30
    3d30:	9f 5f       	subi	r25, 0xFF	; 255
    3d32:	c1 f7       	brne	.-16     	; 0x3d24 <__mulsf3_pse+0x8c>
    3d34:	fe 2b       	or	r31, r30
    3d36:	88 0f       	add	r24, r24
    3d38:	91 1d       	adc	r25, r1
    3d3a:	96 95       	lsr	r25
    3d3c:	87 95       	ror	r24
    3d3e:	97 f9       	bld	r25, 7
    3d40:	08 95       	ret

00003d42 <__subsf3>:
    3d42:	50 58       	subi	r21, 0x80	; 128

00003d44 <__addsf3>:
    3d44:	bb 27       	eor	r27, r27
    3d46:	aa 27       	eor	r26, r26
    3d48:	0e d0       	rcall	.+28     	; 0x3d66 <__addsf3x>
    3d4a:	77 c0       	rjmp	.+238    	; 0x3e3a <__fp_round>
    3d4c:	68 d0       	rcall	.+208    	; 0x3e1e <__fp_pscA>
    3d4e:	30 f0       	brcs	.+12     	; 0x3d5c <__addsf3+0x18>
    3d50:	6d d0       	rcall	.+218    	; 0x3e2c <__fp_pscB>
    3d52:	20 f0       	brcs	.+8      	; 0x3d5c <__addsf3+0x18>
    3d54:	31 f4       	brne	.+12     	; 0x3d62 <__addsf3+0x1e>
    3d56:	9f 3f       	cpi	r25, 0xFF	; 255
    3d58:	11 f4       	brne	.+4      	; 0x3d5e <__addsf3+0x1a>
    3d5a:	1e f4       	brtc	.+6      	; 0x3d62 <__addsf3+0x1e>
    3d5c:	5d c0       	rjmp	.+186    	; 0x3e18 <__fp_nan>
    3d5e:	0e f4       	brtc	.+2      	; 0x3d62 <__addsf3+0x1e>
    3d60:	e0 95       	com	r30
    3d62:	e7 fb       	bst	r30, 7
    3d64:	53 c0       	rjmp	.+166    	; 0x3e0c <__fp_inf>

00003d66 <__addsf3x>:
    3d66:	e9 2f       	mov	r30, r25
    3d68:	2d df       	rcall	.-422    	; 0x3bc4 <__fp_split3>
    3d6a:	80 f3       	brcs	.-32     	; 0x3d4c <__addsf3+0x8>
    3d6c:	ba 17       	cp	r27, r26
    3d6e:	62 07       	cpc	r22, r18
    3d70:	73 07       	cpc	r23, r19
    3d72:	84 07       	cpc	r24, r20
    3d74:	95 07       	cpc	r25, r21
    3d76:	18 f0       	brcs	.+6      	; 0x3d7e <__addsf3x+0x18>
    3d78:	71 f4       	brne	.+28     	; 0x3d96 <__addsf3x+0x30>
    3d7a:	9e f5       	brtc	.+102    	; 0x3de2 <__addsf3x+0x7c>
    3d7c:	45 cf       	rjmp	.-374    	; 0x3c08 <__fp_zero>
    3d7e:	0e f4       	brtc	.+2      	; 0x3d82 <__addsf3x+0x1c>
    3d80:	e0 95       	com	r30
    3d82:	0b 2e       	mov	r0, r27
    3d84:	ba 2f       	mov	r27, r26
    3d86:	a0 2d       	mov	r26, r0
    3d88:	0b 01       	movw	r0, r22
    3d8a:	b9 01       	movw	r22, r18
    3d8c:	90 01       	movw	r18, r0
    3d8e:	0c 01       	movw	r0, r24
    3d90:	ca 01       	movw	r24, r20
    3d92:	a0 01       	movw	r20, r0
    3d94:	11 24       	eor	r1, r1
    3d96:	ff 27       	eor	r31, r31
    3d98:	59 1b       	sub	r21, r25
    3d9a:	99 f0       	breq	.+38     	; 0x3dc2 <__addsf3x+0x5c>
    3d9c:	59 3f       	cpi	r21, 0xF9	; 249
    3d9e:	50 f4       	brcc	.+20     	; 0x3db4 <__addsf3x+0x4e>
    3da0:	50 3e       	cpi	r21, 0xE0	; 224
    3da2:	68 f1       	brcs	.+90     	; 0x3dfe <__addsf3x+0x98>
    3da4:	1a 16       	cp	r1, r26
    3da6:	f0 40       	sbci	r31, 0x00	; 0
    3da8:	a2 2f       	mov	r26, r18
    3daa:	23 2f       	mov	r18, r19
    3dac:	34 2f       	mov	r19, r20
    3dae:	44 27       	eor	r20, r20
    3db0:	58 5f       	subi	r21, 0xF8	; 248
    3db2:	f3 cf       	rjmp	.-26     	; 0x3d9a <__addsf3x+0x34>
    3db4:	46 95       	lsr	r20
    3db6:	37 95       	ror	r19
    3db8:	27 95       	ror	r18
    3dba:	a7 95       	ror	r26
    3dbc:	f0 40       	sbci	r31, 0x00	; 0
    3dbe:	53 95       	inc	r21
    3dc0:	c9 f7       	brne	.-14     	; 0x3db4 <__addsf3x+0x4e>
    3dc2:	7e f4       	brtc	.+30     	; 0x3de2 <__addsf3x+0x7c>
    3dc4:	1f 16       	cp	r1, r31
    3dc6:	ba 0b       	sbc	r27, r26
    3dc8:	62 0b       	sbc	r22, r18
    3dca:	73 0b       	sbc	r23, r19
    3dcc:	84 0b       	sbc	r24, r20
    3dce:	ba f0       	brmi	.+46     	; 0x3dfe <__addsf3x+0x98>
    3dd0:	91 50       	subi	r25, 0x01	; 1
    3dd2:	a1 f0       	breq	.+40     	; 0x3dfc <__addsf3x+0x96>
    3dd4:	ff 0f       	add	r31, r31
    3dd6:	bb 1f       	adc	r27, r27
    3dd8:	66 1f       	adc	r22, r22
    3dda:	77 1f       	adc	r23, r23
    3ddc:	88 1f       	adc	r24, r24
    3dde:	c2 f7       	brpl	.-16     	; 0x3dd0 <__addsf3x+0x6a>
    3de0:	0e c0       	rjmp	.+28     	; 0x3dfe <__addsf3x+0x98>
    3de2:	ba 0f       	add	r27, r26
    3de4:	62 1f       	adc	r22, r18
    3de6:	73 1f       	adc	r23, r19
    3de8:	84 1f       	adc	r24, r20
    3dea:	48 f4       	brcc	.+18     	; 0x3dfe <__addsf3x+0x98>
    3dec:	87 95       	ror	r24
    3dee:	77 95       	ror	r23
    3df0:	67 95       	ror	r22
    3df2:	b7 95       	ror	r27
    3df4:	f7 95       	ror	r31
    3df6:	9e 3f       	cpi	r25, 0xFE	; 254
    3df8:	08 f0       	brcs	.+2      	; 0x3dfc <__addsf3x+0x96>
    3dfa:	b3 cf       	rjmp	.-154    	; 0x3d62 <__addsf3+0x1e>
    3dfc:	93 95       	inc	r25
    3dfe:	88 0f       	add	r24, r24
    3e00:	08 f0       	brcs	.+2      	; 0x3e04 <__addsf3x+0x9e>
    3e02:	99 27       	eor	r25, r25
    3e04:	ee 0f       	add	r30, r30
    3e06:	97 95       	ror	r25
    3e08:	87 95       	ror	r24
    3e0a:	08 95       	ret

00003e0c <__fp_inf>:
    3e0c:	97 f9       	bld	r25, 7
    3e0e:	9f 67       	ori	r25, 0x7F	; 127
    3e10:	80 e8       	ldi	r24, 0x80	; 128
    3e12:	70 e0       	ldi	r23, 0x00	; 0
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	08 95       	ret

00003e18 <__fp_nan>:
    3e18:	9f ef       	ldi	r25, 0xFF	; 255
    3e1a:	80 ec       	ldi	r24, 0xC0	; 192
    3e1c:	08 95       	ret

00003e1e <__fp_pscA>:
    3e1e:	00 24       	eor	r0, r0
    3e20:	0a 94       	dec	r0
    3e22:	16 16       	cp	r1, r22
    3e24:	17 06       	cpc	r1, r23
    3e26:	18 06       	cpc	r1, r24
    3e28:	09 06       	cpc	r0, r25
    3e2a:	08 95       	ret

00003e2c <__fp_pscB>:
    3e2c:	00 24       	eor	r0, r0
    3e2e:	0a 94       	dec	r0
    3e30:	12 16       	cp	r1, r18
    3e32:	13 06       	cpc	r1, r19
    3e34:	14 06       	cpc	r1, r20
    3e36:	05 06       	cpc	r0, r21
    3e38:	08 95       	ret

00003e3a <__fp_round>:
    3e3a:	09 2e       	mov	r0, r25
    3e3c:	03 94       	inc	r0
    3e3e:	00 0c       	add	r0, r0
    3e40:	11 f4       	brne	.+4      	; 0x3e46 <__fp_round+0xc>
    3e42:	88 23       	and	r24, r24
    3e44:	52 f0       	brmi	.+20     	; 0x3e5a <__fp_round+0x20>
    3e46:	bb 0f       	add	r27, r27
    3e48:	40 f4       	brcc	.+16     	; 0x3e5a <__fp_round+0x20>
    3e4a:	bf 2b       	or	r27, r31
    3e4c:	11 f4       	brne	.+4      	; 0x3e52 <__fp_round+0x18>
    3e4e:	60 ff       	sbrs	r22, 0
    3e50:	04 c0       	rjmp	.+8      	; 0x3e5a <__fp_round+0x20>
    3e52:	6f 5f       	subi	r22, 0xFF	; 255
    3e54:	7f 4f       	sbci	r23, 0xFF	; 255
    3e56:	8f 4f       	sbci	r24, 0xFF	; 255
    3e58:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5a:	08 95       	ret

00003e5c <_hihTwiCallback>:
    3e5c:	65 30       	cpi	r22, 0x05	; 5
    3e5e:	f1 f4       	brne	.+60     	; 0x3e9c <_hihTwiCallback+0x40>
    3e60:	fa 01       	movw	r30, r20
    3e62:	80 81       	ld	r24, Z
    3e64:	8f 73       	andi	r24, 0x3F	; 63
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	98 2f       	mov	r25, r24
    3e6a:	88 27       	eor	r24, r24
    3e6c:	21 81       	ldd	r18, Z+1	; 0x01
    3e6e:	82 2b       	or	r24, r18
    3e70:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3e74:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	f0 e4       	ldi	r31, 0x40	; 64
    3e7c:	8f 9f       	mul	r24, r31
    3e7e:	c0 01       	movw	r24, r0
    3e80:	11 24       	eor	r1, r1
    3e82:	fa 01       	movw	r30, r20
    3e84:	23 81       	ldd	r18, Z+3	; 0x03
    3e86:	26 95       	lsr	r18
    3e88:	26 95       	lsr	r18
    3e8a:	82 2b       	or	r24, r18
    3e8c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3e90:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <_measuringIsReady>
    3e9a:	08 95       	ret
    3e9c:	64 30       	cpi	r22, 0x04	; 4
    3e9e:	51 f0       	breq	.+20     	; 0x3eb4 <_hihTwiCallback+0x58>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	90 e4       	ldi	r25, 0x40	; 64
    3ea4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ea8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3eac:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3eb0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3eb4:	08 95       	ret

00003eb6 <hih8120_initialise>:
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	0e e2       	ldi	r16, 0x2E	; 46
    3ebc:	1f e1       	ldi	r17, 0x1F	; 31
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	34 e2       	ldi	r19, 0x24	; 36
    3ec2:	44 ef       	ldi	r20, 0xF4	; 244
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	87 e2       	ldi	r24, 0x27	; 39
    3eca:	0e 94 c4 28 	call	0x5188	; 0x5188 <twiCreate>
    3ece:	90 93 d3 11 	sts	0x11D3, r25	; 0x8011d3 <_hih8120Handler+0x1>
    3ed2:	80 93 d2 11 	sts	0x11D2, r24	; 0x8011d2 <_hih8120Handler>
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	89 2b       	or	r24, r25
    3eda:	09 f0       	breq	.+2      	; 0x3ede <hih8120_initialise+0x28>
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	82 2f       	mov	r24, r18
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <hih8120_wakeup>:
    3ee6:	80 91 d2 11 	lds	r24, 0x11D2	; 0x8011d2 <_hih8120Handler>
    3eea:	90 91 d3 11 	lds	r25, 0x11D3	; 0x8011d3 <_hih8120Handler+0x1>
    3eee:	00 97       	sbiw	r24, 0x00	; 0
    3ef0:	59 f0       	breq	.+22     	; 0x3f08 <hih8120_wakeup+0x22>
    3ef2:	40 e0       	ldi	r20, 0x00	; 0
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	70 e0       	ldi	r23, 0x00	; 0
    3ef8:	0e 94 15 29 	call	0x522a	; 0x522a <twiTransmit>
    3efc:	84 30       	cpi	r24, 0x04	; 4
    3efe:	31 f4       	brne	.+12     	; 0x3f0c <hih8120_wakeup+0x26>
    3f00:	10 92 d1 11 	sts	0x11D1, r1	; 0x8011d1 <_measuringIsReady>
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	08 95       	ret
    3f08:	82 e0       	ldi	r24, 0x02	; 2
    3f0a:	08 95       	ret
    3f0c:	83 e0       	ldi	r24, 0x03	; 3
    3f0e:	08 95       	ret

00003f10 <hih8120_measure>:
    3f10:	80 91 d2 11 	lds	r24, 0x11D2	; 0x8011d2 <_hih8120Handler>
    3f14:	90 91 d3 11 	lds	r25, 0x11D3	; 0x8011d3 <_hih8120Handler+0x1>
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	39 f0       	breq	.+14     	; 0x3f2a <hih8120_measure+0x1a>
    3f1c:	64 e0       	ldi	r22, 0x04	; 4
    3f1e:	0e 94 61 29 	call	0x52c2	; 0x52c2 <twiReceive>
    3f22:	85 30       	cpi	r24, 0x05	; 5
    3f24:	21 f0       	breq	.+8      	; 0x3f2e <hih8120_measure+0x1e>
    3f26:	83 e0       	ldi	r24, 0x03	; 3
    3f28:	08 95       	ret
    3f2a:	82 e0       	ldi	r24, 0x02	; 2
    3f2c:	08 95       	ret
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	08 95       	ret

00003f32 <hih8120_getTemperature>:
    3f32:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3f36:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 67 2e 	call	0x5cce	; 0x5cce <__floatunsisf>
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	45 e2       	ldi	r20, 0x25	; 37
    3f48:	53 e4       	ldi	r21, 0x43	; 67
    3f4a:	98 de       	rcall	.-720    	; 0x3c7c <__mulsf3>
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	38 ef       	ldi	r19, 0xF8	; 248
    3f50:	4f e7       	ldi	r20, 0x7F	; 127
    3f52:	56 e4       	ldi	r21, 0x46	; 70
    3f54:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__divsf3>
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e2       	ldi	r20, 0x20	; 32
    3f5e:	52 e4       	ldi	r21, 0x42	; 66
    3f60:	f0 ce       	rjmp	.-544    	; 0x3d42 <__subsf3>
    3f62:	08 95       	ret

00003f64 <_serialCallBack>:
    3f64:	0f 93       	push	r16
    3f66:	1f 93       	push	r17
    3f68:	cf 93       	push	r28
    3f6a:	df 93       	push	r29
    3f6c:	1f 92       	push	r1
    3f6e:	1f 92       	push	r1
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
    3f74:	8c 01       	movw	r16, r24
    3f76:	19 82       	std	Y+1, r1	; 0x01
    3f78:	2d c0       	rjmp	.+90     	; 0x3fd4 <_serialCallBack+0x70>
    3f7a:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <rec_buf_inp.2878>
    3f7e:	ec 32       	cpi	r30, 0x2C	; 44
    3f80:	50 f4       	brcc	.+20     	; 0x3f96 <_serialCallBack+0x32>
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	8e 0f       	add	r24, r30
    3f86:	80 93 0b 12 	sts	0x120B, r24	; 0x80120b <rec_buf_inp.2878>
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	e3 5c       	subi	r30, 0xC3	; 195
    3f8e:	fd 4e       	sbci	r31, 0xED	; 237
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	80 83       	st	Z, r24
    3f94:	02 c0       	rjmp	.+4      	; 0x3f9a <_serialCallBack+0x36>
    3f96:	10 92 0b 12 	sts	0x120B, r1	; 0x80120b <rec_buf_inp.2878>
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	8a 30       	cpi	r24, 0x0A	; 10
    3f9e:	d1 f4       	brne	.+52     	; 0x3fd4 <_serialCallBack+0x70>
    3fa0:	40 91 0b 12 	lds	r20, 0x120B	; 0x80120b <rec_buf_inp.2878>
    3fa4:	50 e0       	ldi	r21, 0x00	; 0
    3fa6:	fa 01       	movw	r30, r20
    3fa8:	e5 5c       	subi	r30, 0xC5	; 197
    3faa:	fd 4e       	sbci	r31, 0xED	; 237
    3fac:	10 82       	st	Z, r1
    3fae:	41 50       	subi	r20, 0x01	; 1
    3fb0:	51 09       	sbc	r21, r1
    3fb2:	9e 01       	movw	r18, r28
    3fb4:	2f 5f       	subi	r18, 0xFF	; 255
    3fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb8:	6d e3       	ldi	r22, 0x3D	; 61
    3fba:	72 e1       	ldi	r23, 0x12	; 18
    3fbc:	80 91 0e 12 	lds	r24, 0x120E	; 0x80120e <_serialReplyBufferHandle>
    3fc0:	90 91 0f 12 	lds	r25, 0x120F	; 0x80120f <_serialReplyBufferHandle+0x1>
    3fc4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <xStreamBufferSendFromISR>
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	81 11       	cpse	r24, r1
    3fcc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortYield>
    3fd0:	10 92 0b 12 	sts	0x120B, r1	; 0x80120b <rec_buf_inp.2878>
    3fd4:	be 01       	movw	r22, r28
    3fd6:	6e 5f       	subi	r22, 0xFE	; 254
    3fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fda:	c8 01       	movw	r24, r16
    3fdc:	05 d6       	rcall	.+3082   	; 0x4be8 <serial_getByte>
    3fde:	88 23       	and	r24, r24
    3fe0:	61 f2       	breq	.-104    	; 0x3f7a <_serialCallBack+0x16>
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	df 91       	pop	r29
    3fe8:	cf 91       	pop	r28
    3fea:	1f 91       	pop	r17
    3fec:	0f 91       	pop	r16
    3fee:	08 95       	ret

00003ff0 <_uploadMessage>:
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	8c 01       	movw	r16, r24
    3ffa:	eb 01       	movw	r28, r22
    3ffc:	80 91 0e 12 	lds	r24, 0x120E	; 0x80120e <_serialReplyBufferHandle>
    4000:	90 91 0f 12 	lds	r25, 0x120F	; 0x80120f <_serialReplyBufferHandle+0x1>
    4004:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xStreamBufferReset>
    4008:	b8 01       	movw	r22, r16
    400a:	84 ed       	ldi	r24, 0xD4	; 212
    400c:	91 e1       	ldi	r25, 0x11	; 17
    400e:	0e 94 16 31 	call	0x622c	; 0x622c <strcpy>
    4012:	20 97       	sbiw	r28, 0x00	; 0
    4014:	79 f0       	breq	.+30     	; 0x4034 <_uploadMessage+0x44>
    4016:	e4 ed       	ldi	r30, 0xD4	; 212
    4018:	f1 e1       	ldi	r31, 0x11	; 17
    401a:	01 90       	ld	r0, Z+
    401c:	00 20       	and	r0, r0
    401e:	e9 f7       	brne	.-6      	; 0x401a <_uploadMessage+0x2a>
    4020:	31 97       	sbiw	r30, 0x01	; 1
    4022:	80 e2       	ldi	r24, 0x20	; 32
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	80 83       	st	Z, r24
    402a:	be 01       	movw	r22, r28
    402c:	84 ed       	ldi	r24, 0xD4	; 212
    402e:	91 e1       	ldi	r25, 0x11	; 17
    4030:	0e 94 0b 31 	call	0x6216	; 0x6216 <strcat>
    4034:	e4 ed       	ldi	r30, 0xD4	; 212
    4036:	f1 e1       	ldi	r31, 0x11	; 17
    4038:	df 01       	movw	r26, r30
    403a:	0d 90       	ld	r0, X+
    403c:	00 20       	and	r0, r0
    403e:	e9 f7       	brne	.-6      	; 0x403a <_uploadMessage+0x4a>
    4040:	11 97       	sbiw	r26, 0x01	; 1
    4042:	8d e0       	ldi	r24, 0x0D	; 13
    4044:	9a e0       	ldi	r25, 0x0A	; 10
    4046:	11 96       	adiw	r26, 0x01	; 1
    4048:	9c 93       	st	X, r25
    404a:	8e 93       	st	-X, r24
    404c:	12 96       	adiw	r26, 0x02	; 2
    404e:	1c 92       	st	X, r1
    4050:	01 90       	ld	r0, Z+
    4052:	00 20       	and	r0, r0
    4054:	e9 f7       	brne	.-6      	; 0x4050 <_uploadMessage+0x60>
    4056:	31 97       	sbiw	r30, 0x01	; 1
    4058:	e4 5d       	subi	r30, 0xD4	; 212
    405a:	f1 41       	sbci	r31, 0x11	; 17
    405c:	ae 2f       	mov	r26, r30
    405e:	84 ed       	ldi	r24, 0xD4	; 212
    4060:	91 e1       	ldi	r25, 0x11	; 17
    4062:	ac 01       	movw	r20, r24
    4064:	6a 2f       	mov	r22, r26
    4066:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <_rn2483_serial>
    406a:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <_rn2483_serial+0x1>
    406e:	67 d5       	rcall	.+2766   	; 0x4b3e <serial_sendBytes>
    4070:	81 11       	cpse	r24, r1
    4072:	11 c0       	rjmp	.+34     	; 0x4096 <_uploadMessage+0xa6>
    4074:	08 e2       	ldi	r16, 0x28	; 40
    4076:	15 e0       	ldi	r17, 0x05	; 5
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	4d e2       	ldi	r20, 0x2D	; 45
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	67 e9       	ldi	r22, 0x97	; 151
    4082:	72 e1       	ldi	r23, 0x12	; 18
    4084:	80 91 0e 12 	lds	r24, 0x120E	; 0x80120e <_serialReplyBufferHandle>
    4088:	90 91 0f 12 	lds	r25, 0x120F	; 0x80120f <_serialReplyBufferHandle+0x1>
    408c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
    4090:	87 e9       	ldi	r24, 0x97	; 151
    4092:	92 e1       	ldi	r25, 0x12	; 18
    4094:	02 c0       	rjmp	.+4      	; 0x409a <_uploadMessage+0xaa>
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	df 91       	pop	r29
    409c:	cf 91       	pop	r28
    409e:	1f 91       	pop	r17
    40a0:	0f 91       	pop	r16
    40a2:	08 95       	ret

000040a4 <_reply2ReturnCode>:
    40a4:	2f 92       	push	r2
    40a6:	3f 92       	push	r3
    40a8:	4f 92       	push	r4
    40aa:	5f 92       	push	r5
    40ac:	6f 92       	push	r6
    40ae:	7f 92       	push	r7
    40b0:	8f 92       	push	r8
    40b2:	9f 92       	push	r9
    40b4:	af 92       	push	r10
    40b6:	bf 92       	push	r11
    40b8:	cf 92       	push	r12
    40ba:	df 92       	push	r13
    40bc:	ef 92       	push	r14
    40be:	ff 92       	push	r15
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	5c 01       	movw	r10, r24
    40ca:	fc 01       	movw	r30, r24
    40cc:	01 90       	ld	r0, Z+
    40ce:	00 20       	and	r0, r0
    40d0:	e9 f7       	brne	.-6      	; 0x40cc <_reply2ReturnCode+0x28>
    40d2:	31 97       	sbiw	r30, 0x01	; 1
    40d4:	6f 01       	movw	r12, r30
    40d6:	c8 1a       	sub	r12, r24
    40d8:	d9 0a       	sbc	r13, r25
    40da:	5c 2c       	mov	r5, r12
    40dc:	0f 2e       	mov	r0, r31
    40de:	ff ec       	ldi	r31, 0xCF	; 207
    40e0:	8f 2e       	mov	r8, r31
    40e2:	f6 e0       	ldi	r31, 0x06	; 6
    40e4:	9f 2e       	mov	r9, r31
    40e6:	f0 2d       	mov	r31, r0
    40e8:	e1 2c       	mov	r14, r1
    40ea:	f1 2c       	mov	r15, r1
    40ec:	4c 2c       	mov	r4, r12
    40ee:	37 01       	movw	r6, r14
    40f0:	f4 01       	movw	r30, r8
    40f2:	01 81       	ldd	r16, Z+1	; 0x01
    40f4:	12 81       	ldd	r17, Z+2	; 0x02
    40f6:	e8 01       	movw	r28, r16
    40f8:	09 90       	ld	r0, Y+
    40fa:	00 20       	and	r0, r0
    40fc:	e9 f7       	brne	.-6      	; 0x40f8 <_reply2ReturnCode+0x54>
    40fe:	21 97       	sbiw	r28, 0x01	; 1
    4100:	c0 1b       	sub	r28, r16
    4102:	d1 0b       	sbc	r29, r17
    4104:	3c 2e       	mov	r3, r28
    4106:	f9 e0       	ldi	r31, 0x09	; 9
    4108:	cf 16       	cp	r12, r31
    410a:	d1 04       	cpc	r13, r1
    410c:	58 f0       	brcs	.+22     	; 0x4124 <_reply2ReturnCode+0x80>
    410e:	f4 01       	movw	r30, r8
    4110:	20 80       	ld	r2, Z
    4112:	fe e0       	ldi	r31, 0x0E	; 14
    4114:	2f 12       	cpse	r2, r31
    4116:	06 c0       	rjmp	.+12     	; 0x4124 <_reply2ReturnCode+0x80>
    4118:	b8 01       	movw	r22, r16
    411a:	c5 01       	movw	r24, r10
    411c:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcasestr>
    4120:	89 2b       	or	r24, r25
    4122:	09 f5       	brne	.+66     	; 0x4166 <_reply2ReturnCode+0xc2>
    4124:	44 2d       	mov	r20, r4
    4126:	35 14       	cp	r3, r5
    4128:	08 f4       	brcc	.+2      	; 0x412c <_reply2ReturnCode+0x88>
    412a:	4c 2f       	mov	r20, r28
    412c:	50 e0       	ldi	r21, 0x00	; 0
    412e:	b8 01       	movw	r22, r16
    4130:	c5 01       	movw	r24, r10
    4132:	0e 94 1d 31 	call	0x623a	; 0x623a <strncasecmp>
    4136:	89 2b       	or	r24, r25
    4138:	49 f4       	brne	.+18     	; 0x414c <_reply2ReturnCode+0xa8>
    413a:	f3 01       	movw	r30, r6
    413c:	ee 0f       	add	r30, r30
    413e:	ff 1f       	adc	r31, r31
    4140:	e6 0d       	add	r30, r6
    4142:	f7 1d       	adc	r31, r7
    4144:	e1 53       	subi	r30, 0x31	; 49
    4146:	f9 4f       	sbci	r31, 0xF9	; 249
    4148:	20 80       	ld	r2, Z
    414a:	0d c0       	rjmp	.+26     	; 0x4166 <_reply2ReturnCode+0xc2>
    414c:	8f ef       	ldi	r24, 0xFF	; 255
    414e:	e8 1a       	sub	r14, r24
    4150:	f8 0a       	sbc	r15, r24
    4152:	e3 e0       	ldi	r30, 0x03	; 3
    4154:	8e 0e       	add	r8, r30
    4156:	91 1c       	adc	r9, r1
    4158:	f1 e1       	ldi	r31, 0x11	; 17
    415a:	ef 16       	cp	r14, r31
    415c:	f1 04       	cpc	r15, r1
    415e:	39 f6       	brne	.-114    	; 0x40ee <_reply2ReturnCode+0x4a>
    4160:	68 94       	set
    4162:	22 24       	eor	r2, r2
    4164:	24 f8       	bld	r2, 4
    4166:	82 2d       	mov	r24, r2
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	ff 90       	pop	r15
    4172:	ef 90       	pop	r14
    4174:	df 90       	pop	r13
    4176:	cf 90       	pop	r12
    4178:	bf 90       	pop	r11
    417a:	af 90       	pop	r10
    417c:	9f 90       	pop	r9
    417e:	8f 90       	pop	r8
    4180:	7f 90       	pop	r7
    4182:	6f 90       	pop	r6
    4184:	5f 90       	pop	r5
    4186:	4f 90       	pop	r4
    4188:	3f 90       	pop	r3
    418a:	2f 90       	pop	r2
    418c:	08 95       	ret

0000418e <_uploadMessageRc>:
    418e:	30 df       	rcall	.-416    	; 0x3ff0 <_uploadMessage>
    4190:	89 cf       	rjmp	.-238    	; 0x40a4 <_reply2ReturnCode>
    4192:	08 95       	ret

00004194 <lora_driver_flushBuffers>:
    4194:	80 91 0e 12 	lds	r24, 0x120E	; 0x80120e <_serialReplyBufferHandle>
    4198:	90 91 0f 12 	lds	r25, 0x120F	; 0x80120f <_serialReplyBufferHandle+0x1>
    419c:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <xStreamBufferReset>
    41a0:	08 95       	ret

000041a2 <lora_driver_initialise>:
    41a2:	8f 92       	push	r8
    41a4:	9f 92       	push	r9
    41a6:	af 92       	push	r10
    41a8:	cf 92       	push	r12
    41aa:	ef 92       	push	r14
    41ac:	0f 93       	push	r16
    41ae:	1f 93       	push	r17
    41b0:	cf 93       	push	r28
    41b2:	c8 2f       	mov	r28, r24
    41b4:	8b 01       	movw	r16, r22
    41b6:	41 e0       	ldi	r20, 0x01	; 1
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	88 ec       	ldi	r24, 0xC8	; 200
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferGenericCreate>
    41c4:	90 93 0f 12 	sts	0x120F, r25	; 0x80120f <_serialReplyBufferHandle+0x1>
    41c8:	80 93 0e 12 	sts	0x120E, r24	; 0x80120e <_serialReplyBufferHandle>
    41cc:	10 93 0d 12 	sts	0x120D, r17	; 0x80120d <_downlinkMessageBuffer+0x1>
    41d0:	00 93 0c 12 	sts	0x120C, r16	; 0x80120c <_downlinkMessageBuffer>
    41d4:	0f 2e       	mov	r0, r31
    41d6:	f2 eb       	ldi	r31, 0xB2	; 178
    41d8:	8f 2e       	mov	r8, r31
    41da:	ff e1       	ldi	r31, 0x1F	; 31
    41dc:	9f 2e       	mov	r9, r31
    41de:	f0 2d       	mov	r31, r0
    41e0:	68 94       	set
    41e2:	aa 24       	eor	r10, r10
    41e4:	a6 f8       	bld	r10, 6
    41e6:	68 94       	set
    41e8:	cc 24       	eor	r12, r12
    41ea:	c6 f8       	bld	r12, 6
    41ec:	e1 2c       	mov	r14, r1
    41ee:	00 e0       	ldi	r16, 0x00	; 0
    41f0:	23 e0       	ldi	r18, 0x03	; 3
    41f2:	40 e0       	ldi	r20, 0x00	; 0
    41f4:	51 ee       	ldi	r21, 0xE1	; 225
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	8c 2f       	mov	r24, r28
    41fc:	d2 d3       	rcall	.+1956   	; 0x49a2 <serial_create>
    41fe:	90 93 11 12 	sts	0x1211, r25	; 0x801211 <_rn2483_serial+0x1>
    4202:	80 93 10 12 	sts	0x1210, r24	; 0x801210 <_rn2483_serial>
    4206:	e7 e0       	ldi	r30, 0x07	; 7
    4208:	f1 e0       	ldi	r31, 0x01	; 1
    420a:	80 81       	ld	r24, Z
    420c:	80 61       	ori	r24, 0x10	; 16
    420e:	80 83       	st	Z, r24
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	ef 90       	pop	r14
    4218:	cf 90       	pop	r12
    421a:	af 90       	pop	r10
    421c:	9f 90       	pop	r9
    421e:	8f 90       	pop	r8
    4220:	08 95       	ret

00004222 <lora_driver_resetRn2483>:
    4222:	88 23       	and	r24, r24
    4224:	31 f0       	breq	.+12     	; 0x4232 <lora_driver_resetRn2483+0x10>
    4226:	e8 e0       	ldi	r30, 0x08	; 8
    4228:	f1 e0       	ldi	r31, 0x01	; 1
    422a:	80 81       	ld	r24, Z
    422c:	8f 7e       	andi	r24, 0xEF	; 239
    422e:	80 83       	st	Z, r24
    4230:	08 95       	ret
    4232:	e8 e0       	ldi	r30, 0x08	; 8
    4234:	f1 e0       	ldi	r31, 0x01	; 1
    4236:	80 81       	ld	r24, Z
    4238:	80 61       	ori	r24, 0x10	; 16
    423a:	80 83       	st	Z, r24
    423c:	08 95       	ret

0000423e <lora_driver_rn2483FactoryReset>:
    423e:	60 e0       	ldi	r22, 0x00	; 0
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	85 e5       	ldi	r24, 0x55	; 85
    4244:	94 e0       	ldi	r25, 0x04	; 4
    4246:	d4 de       	rcall	.-600    	; 0x3ff0 <_uploadMessage>
    4248:	e7 e9       	ldi	r30, 0x97	; 151
    424a:	f2 e1       	ldi	r31, 0x12	; 18
    424c:	01 90       	ld	r0, Z+
    424e:	00 20       	and	r0, r0
    4250:	e9 f7       	brne	.-6      	; 0x424c <lora_driver_rn2483FactoryReset+0xe>
    4252:	31 97       	sbiw	r30, 0x01	; 1
    4254:	e7 59       	subi	r30, 0x97	; 151
    4256:	f2 41       	sbci	r31, 0x12	; 18
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	75 97       	sbiw	r30, 0x15	; 21
    425c:	08 f0       	brcs	.+2      	; 0x4260 <lora_driver_rn2483FactoryReset+0x22>
    425e:	80 e0       	ldi	r24, 0x00	; 0
    4260:	08 95       	ret

00004262 <lora_driver_getRn2483Hweui>:
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	ec 01       	movw	r28, r24
    4268:	60 e0       	ldi	r22, 0x00	; 0
    426a:	70 e0       	ldi	r23, 0x00	; 0
    426c:	86 e6       	ldi	r24, 0x66	; 102
    426e:	94 e0       	ldi	r25, 0x04	; 4
    4270:	bf de       	rcall	.-642    	; 0x3ff0 <_uploadMessage>
    4272:	e7 e9       	ldi	r30, 0x97	; 151
    4274:	f2 e1       	ldi	r31, 0x12	; 18
    4276:	01 90       	ld	r0, Z+
    4278:	00 20       	and	r0, r0
    427a:	e9 f7       	brne	.-6      	; 0x4276 <lora_driver_getRn2483Hweui+0x14>
    427c:	e8 5a       	subi	r30, 0xA8	; 168
    427e:	f2 41       	sbci	r31, 0x12	; 18
    4280:	39 f4       	brne	.+14     	; 0x4290 <lora_driver_getRn2483Hweui+0x2e>
    4282:	67 e9       	ldi	r22, 0x97	; 151
    4284:	72 e1       	ldi	r23, 0x12	; 18
    4286:	ce 01       	movw	r24, r28
    4288:	0e 94 16 31 	call	0x622c	; 0x622c <strcpy>
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	02 c0       	rjmp	.+4      	; 0x4294 <lora_driver_getRn2483Hweui+0x32>
    4290:	18 82       	st	Y, r1
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	df 91       	pop	r29
    4296:	cf 91       	pop	r28
    4298:	08 95       	ret

0000429a <lora_driver_setDeviceIdentifier>:
    429a:	fc 01       	movw	r30, r24
    429c:	01 90       	ld	r0, Z+
    429e:	00 20       	and	r0, r0
    42a0:	e9 f7       	brne	.-6      	; 0x429c <lora_driver_setDeviceIdentifier+0x2>
    42a2:	9f 01       	movw	r18, r30
    42a4:	21 51       	subi	r18, 0x11	; 17
    42a6:	31 09       	sbc	r19, r1
    42a8:	28 17       	cp	r18, r24
    42aa:	39 07       	cpc	r19, r25
    42ac:	29 f4       	brne	.+10     	; 0x42b8 <lora_driver_setDeviceIdentifier+0x1e>
    42ae:	bc 01       	movw	r22, r24
    42b0:	84 e9       	ldi	r24, 0x94	; 148
    42b2:	94 e0       	ldi	r25, 0x04	; 4
    42b4:	6c cf       	rjmp	.-296    	; 0x418e <_uploadMessageRc>
    42b6:	08 95       	ret
    42b8:	89 e0       	ldi	r24, 0x09	; 9
    42ba:	08 95       	ret

000042bc <lora_driver_setApplicationIdentifier>:
    42bc:	fc 01       	movw	r30, r24
    42be:	01 90       	ld	r0, Z+
    42c0:	00 20       	and	r0, r0
    42c2:	e9 f7       	brne	.-6      	; 0x42be <lora_driver_setApplicationIdentifier+0x2>
    42c4:	9f 01       	movw	r18, r30
    42c6:	21 51       	subi	r18, 0x11	; 17
    42c8:	31 09       	sbc	r19, r1
    42ca:	28 17       	cp	r18, r24
    42cc:	39 07       	cpc	r19, r25
    42ce:	29 f4       	brne	.+10     	; 0x42da <lora_driver_setApplicationIdentifier+0x1e>
    42d0:	bc 01       	movw	r22, r24
    42d2:	83 ea       	ldi	r24, 0xA3	; 163
    42d4:	94 e0       	ldi	r25, 0x04	; 4
    42d6:	5b cf       	rjmp	.-330    	; 0x418e <_uploadMessageRc>
    42d8:	08 95       	ret
    42da:	89 e0       	ldi	r24, 0x09	; 9
    42dc:	08 95       	ret

000042de <lora_driver_setApplicationKey>:
    42de:	fc 01       	movw	r30, r24
    42e0:	01 90       	ld	r0, Z+
    42e2:	00 20       	and	r0, r0
    42e4:	e9 f7       	brne	.-6      	; 0x42e0 <lora_driver_setApplicationKey+0x2>
    42e6:	9f 01       	movw	r18, r30
    42e8:	21 52       	subi	r18, 0x21	; 33
    42ea:	31 09       	sbc	r19, r1
    42ec:	28 17       	cp	r18, r24
    42ee:	39 07       	cpc	r19, r25
    42f0:	29 f4       	brne	.+10     	; 0x42fc <lora_driver_setApplicationKey+0x1e>
    42f2:	bc 01       	movw	r22, r24
    42f4:	82 eb       	ldi	r24, 0xB2	; 178
    42f6:	94 e0       	ldi	r25, 0x04	; 4
    42f8:	4a cf       	rjmp	.-364    	; 0x418e <_uploadMessageRc>
    42fa:	08 95       	ret
    42fc:	89 e0       	ldi	r24, 0x09	; 9
    42fe:	08 95       	ret

00004300 <lora_driver_saveMac>:
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	81 ef       	ldi	r24, 0xF1	; 241
    4306:	94 e0       	ldi	r25, 0x04	; 4
    4308:	42 cf       	rjmp	.-380    	; 0x418e <_uploadMessageRc>
    430a:	08 95       	ret

0000430c <lora_driver_join>:
    430c:	0f 93       	push	r16
    430e:	1f 93       	push	r17
    4310:	e8 2f       	mov	r30, r24
    4312:	f0 e0       	ldi	r31, 0x00	; 0
    4314:	ee 0f       	add	r30, r30
    4316:	ff 1f       	adc	r31, r31
    4318:	e5 53       	subi	r30, 0x35	; 53
    431a:	f9 4f       	sbci	r31, 0xF9	; 249
    431c:	60 81       	ld	r22, Z
    431e:	71 81       	ldd	r23, Z+1	; 0x01
    4320:	8a ef       	ldi	r24, 0xFA	; 250
    4322:	94 e0       	ldi	r25, 0x04	; 4
    4324:	34 df       	rcall	.-408    	; 0x418e <_uploadMessageRc>
    4326:	81 11       	cpse	r24, r1
    4328:	14 c0       	rjmp	.+40     	; 0x4352 <lora_driver_join+0x46>
    432a:	08 e2       	ldi	r16, 0x28	; 40
    432c:	15 e0       	ldi	r17, 0x05	; 5
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	4d e2       	ldi	r20, 0x2D	; 45
    4334:	50 e0       	ldi	r21, 0x00	; 0
    4336:	67 e9       	ldi	r22, 0x97	; 151
    4338:	72 e1       	ldi	r23, 0x12	; 18
    433a:	80 91 0e 12 	lds	r24, 0x120E	; 0x80120e <_serialReplyBufferHandle>
    433e:	90 91 0f 12 	lds	r25, 0x120F	; 0x80120f <_serialReplyBufferHandle+0x1>
    4342:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
    4346:	88 23       	and	r24, r24
    4348:	21 f0       	breq	.+8      	; 0x4352 <lora_driver_join+0x46>
    434a:	87 e9       	ldi	r24, 0x97	; 151
    434c:	92 e1       	ldi	r25, 0x12	; 18
    434e:	aa de       	rcall	.-684    	; 0x40a4 <_reply2ReturnCode>
    4350:	03 c0       	rjmp	.+6      	; 0x4358 <lora_driver_join+0x4c>
    4352:	87 e9       	ldi	r24, 0x97	; 151
    4354:	92 e1       	ldi	r25, 0x12	; 18
    4356:	a6 de       	rcall	.-692    	; 0x40a4 <_reply2ReturnCode>
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	08 95       	ret

0000435e <lora_driver_sendUploadMessage>:
    435e:	0f 93       	push	r16
    4360:	1f 93       	push	r17
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	1f 92       	push	r1
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
    436c:	db 01       	movw	r26, r22
    436e:	11 96       	adiw	r26, 0x01	; 1
    4370:	9c 91       	ld	r25, X
    4372:	11 97       	sbiw	r26, 0x01	; 1
    4374:	95 31       	cpi	r25, 0x15	; 21
    4376:	08 f0       	brcs	.+2      	; 0x437a <lora_driver_sendUploadMessage+0x1c>
    4378:	b4 c0       	rjmp	.+360    	; 0x44e2 <lora_driver_sendUploadMessage+0x184>
    437a:	99 23       	and	r25, r25
    437c:	81 f1       	breq	.+96     	; 0x43de <lora_driver_sendUploadMessage+0x80>
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	27 2f       	mov	r18, r23
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	46 2f       	mov	r20, r22
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	fd 01       	movw	r30, r26
    438c:	e4 0f       	add	r30, r20
    438e:	f5 1f       	adc	r31, r21
    4390:	92 81       	ldd	r25, Z+2	; 0x02
    4392:	92 95       	swap	r25
    4394:	9f 70       	andi	r25, 0x0F	; 15
    4396:	9a 30       	cpi	r25, 0x0A	; 10
    4398:	10 f0       	brcs	.+4      	; 0x439e <lora_driver_sendUploadMessage+0x40>
    439a:	99 5c       	subi	r25, 0xC9	; 201
    439c:	01 c0       	rjmp	.+2      	; 0x43a0 <lora_driver_sendUploadMessage+0x42>
    439e:	90 5d       	subi	r25, 0xD0	; 208
    43a0:	f9 01       	movw	r30, r18
    43a2:	e8 5d       	subi	r30, 0xD8	; 216
    43a4:	fd 4e       	sbci	r31, 0xED	; 237
    43a6:	90 83       	st	Z, r25
    43a8:	2f 5f       	subi	r18, 0xFF	; 255
    43aa:	3f 4f       	sbci	r19, 0xFF	; 255
    43ac:	fd 01       	movw	r30, r26
    43ae:	e4 0f       	add	r30, r20
    43b0:	f5 1f       	adc	r31, r21
    43b2:	92 81       	ldd	r25, Z+2	; 0x02
    43b4:	9f 70       	andi	r25, 0x0F	; 15
    43b6:	49 2f       	mov	r20, r25
    43b8:	50 e0       	ldi	r21, 0x00	; 0
    43ba:	4a 30       	cpi	r20, 0x0A	; 10
    43bc:	51 05       	cpc	r21, r1
    43be:	14 f0       	brlt	.+4      	; 0x43c4 <lora_driver_sendUploadMessage+0x66>
    43c0:	99 5c       	subi	r25, 0xC9	; 201
    43c2:	01 c0       	rjmp	.+2      	; 0x43c6 <lora_driver_sendUploadMessage+0x68>
    43c4:	90 5d       	subi	r25, 0xD0	; 208
    43c6:	f9 01       	movw	r30, r18
    43c8:	e8 5d       	subi	r30, 0xD8	; 216
    43ca:	fd 4e       	sbci	r31, 0xED	; 237
    43cc:	90 83       	st	Z, r25
    43ce:	7e 5f       	subi	r23, 0xFE	; 254
    43d0:	6f 5f       	subi	r22, 0xFF	; 255
    43d2:	11 96       	adiw	r26, 0x01	; 1
    43d4:	9c 91       	ld	r25, X
    43d6:	11 97       	sbiw	r26, 0x01	; 1
    43d8:	69 17       	cp	r22, r25
    43da:	98 f2       	brcs	.-90     	; 0x4382 <lora_driver_sendUploadMessage+0x24>
    43dc:	01 c0       	rjmp	.+2      	; 0x43e0 <lora_driver_sendUploadMessage+0x82>
    43de:	70 e0       	ldi	r23, 0x00	; 0
    43e0:	e7 2f       	mov	r30, r23
    43e2:	f0 e0       	ldi	r31, 0x00	; 0
    43e4:	e8 5d       	subi	r30, 0xD8	; 216
    43e6:	fd 4e       	sbci	r31, 0xED	; 237
    43e8:	10 82       	st	Z, r1
    43ea:	4c 91       	ld	r20, X
    43ec:	81 11       	cpse	r24, r1
    43ee:	03 c0       	rjmp	.+6      	; 0x43f6 <lora_driver_sendUploadMessage+0x98>
    43f0:	83 e0       	ldi	r24, 0x03	; 3
    43f2:	95 e0       	ldi	r25, 0x05	; 5
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <lora_driver_sendUploadMessage+0x9c>
    43f6:	85 e0       	ldi	r24, 0x05	; 5
    43f8:	95 e0       	ldi	r25, 0x05	; 5
    43fa:	28 e2       	ldi	r18, 0x28	; 40
    43fc:	32 e1       	ldi	r19, 0x12	; 18
    43fe:	3f 93       	push	r19
    4400:	2f 93       	push	r18
    4402:	1f 92       	push	r1
    4404:	4f 93       	push	r20
    4406:	9f 93       	push	r25
    4408:	8f 93       	push	r24
    440a:	89 e0       	ldi	r24, 0x09	; 9
    440c:	95 e0       	ldi	r25, 0x05	; 5
    440e:	9f 93       	push	r25
    4410:	8f 93       	push	r24
    4412:	8a e6       	ldi	r24, 0x6A	; 106
    4414:	92 e1       	ldi	r25, 0x12	; 18
    4416:	9f 93       	push	r25
    4418:	8f 93       	push	r24
    441a:	0e 94 bf 31 	call	0x637e	; 0x637e <sprintf>
    441e:	60 e0       	ldi	r22, 0x00	; 0
    4420:	70 e0       	ldi	r23, 0x00	; 0
    4422:	8a e6       	ldi	r24, 0x6A	; 106
    4424:	92 e1       	ldi	r25, 0x12	; 18
    4426:	b3 de       	rcall	.-666    	; 0x418e <_uploadMessageRc>
    4428:	0f b6       	in	r0, 0x3f	; 63
    442a:	f8 94       	cli
    442c:	de bf       	out	0x3e, r29	; 62
    442e:	0f be       	out	0x3f, r0	; 63
    4430:	cd bf       	out	0x3d, r28	; 61
    4432:	81 11       	cpse	r24, r1
    4434:	59 c0       	rjmp	.+178    	; 0x44e8 <lora_driver_sendUploadMessage+0x18a>
    4436:	08 e2       	ldi	r16, 0x28	; 40
    4438:	15 e0       	ldi	r17, 0x05	; 5
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	4d e2       	ldi	r20, 0x2D	; 45
    4440:	50 e0       	ldi	r21, 0x00	; 0
    4442:	67 e9       	ldi	r22, 0x97	; 151
    4444:	72 e1       	ldi	r23, 0x12	; 18
    4446:	80 91 0e 12 	lds	r24, 0x120E	; 0x80120e <_serialReplyBufferHandle>
    444a:	90 91 0f 12 	lds	r25, 0x120F	; 0x80120f <_serialReplyBufferHandle+0x1>
    444e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <xStreamBufferReceive>
    4452:	88 23       	and	r24, r24
    4454:	09 f4       	brne	.+2      	; 0x4458 <lora_driver_sendUploadMessage+0xfa>
    4456:	47 c0       	rjmp	.+142    	; 0x44e6 <lora_driver_sendUploadMessage+0x188>
    4458:	87 e9       	ldi	r24, 0x97	; 151
    445a:	92 e1       	ldi	r25, 0x12	; 18
    445c:	23 de       	rcall	.-954    	; 0x40a4 <_reply2ReturnCode>
    445e:	8e 30       	cpi	r24, 0x0E	; 14
    4460:	09 f0       	breq	.+2      	; 0x4464 <lora_driver_sendUploadMessage+0x106>
    4462:	42 c0       	rjmp	.+132    	; 0x44e8 <lora_driver_sendUploadMessage+0x18a>
    4464:	87 e0       	ldi	r24, 0x07	; 7
    4466:	89 83       	std	Y+1, r24	; 0x01
    4468:	80 91 0c 12 	lds	r24, 0x120C	; 0x80120c <_downlinkMessageBuffer>
    446c:	90 91 0d 12 	lds	r25, 0x120D	; 0x80120d <_downlinkMessageBuffer+0x1>
    4470:	89 2b       	or	r24, r25
    4472:	a9 f1       	breq	.+106    	; 0x44de <lora_driver_sendUploadMessage+0x180>
    4474:	be 01       	movw	r22, r28
    4476:	6f 5f       	subi	r22, 0xFF	; 255
    4478:	7f 4f       	sbci	r23, 0xFF	; 255
    447a:	87 e9       	ldi	r24, 0x97	; 151
    447c:	92 e1       	ldi	r25, 0x12	; 18
    447e:	68 d1       	rcall	.+720    	; 0x4750 <decode_port_no>
    4480:	80 93 12 12 	sts	0x1212, r24	; 0x801212 <_downlinkPayload>
    4484:	e9 81       	ldd	r30, Y+1	; 0x01
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	e9 56       	subi	r30, 0x69	; 105
    448a:	fd 4e       	sbci	r31, 0xED	; 237
    448c:	df 01       	movw	r26, r30
    448e:	0d 90       	ld	r0, X+
    4490:	00 20       	and	r0, r0
    4492:	e9 f7       	brne	.-6      	; 0x448e <lora_driver_sendUploadMessage+0x130>
    4494:	11 97       	sbiw	r26, 0x01	; 1
    4496:	ae 1b       	sub	r26, r30
    4498:	bf 0b       	sbc	r27, r31
    449a:	aa 23       	and	r26, r26
    449c:	91 f0       	breq	.+36     	; 0x44c2 <lora_driver_sendUploadMessage+0x164>
    449e:	bb 27       	eor	r27, r27
    44a0:	cd 01       	movw	r24, r26
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	9c 01       	movw	r18, r24
    44a6:	12 f4       	brpl	.+4      	; 0x44ac <lora_driver_sendUploadMessage+0x14e>
    44a8:	2f 5f       	subi	r18, 0xFF	; 255
    44aa:	3f 4f       	sbci	r19, 0xFF	; 255
    44ac:	35 95       	asr	r19
    44ae:	27 95       	ror	r18
    44b0:	20 93 13 12 	sts	0x1213, r18	; 0x801213 <_downlinkPayload+0x1>
    44b4:	af 01       	movw	r20, r30
    44b6:	4f 5f       	subi	r20, 0xFF	; 255
    44b8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ba:	64 e1       	ldi	r22, 0x14	; 20
    44bc:	84 e1       	ldi	r24, 0x14	; 20
    44be:	92 e1       	ldi	r25, 0x12	; 18
    44c0:	73 d1       	rcall	.+742    	; 0x47a8 <decode_hexadecimal_string_bytes>
    44c2:	01 e0       	ldi	r16, 0x01	; 1
    44c4:	10 e0       	ldi	r17, 0x00	; 0
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	46 e1       	ldi	r20, 0x16	; 22
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	62 e1       	ldi	r22, 0x12	; 18
    44d0:	72 e1       	ldi	r23, 0x12	; 18
    44d2:	80 91 0c 12 	lds	r24, 0x120C	; 0x80120c <_downlinkMessageBuffer>
    44d6:	90 91 0d 12 	lds	r25, 0x120D	; 0x80120d <_downlinkMessageBuffer+0x1>
    44da:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xStreamBufferSend>
    44de:	8e e0       	ldi	r24, 0x0E	; 14
    44e0:	03 c0       	rjmp	.+6      	; 0x44e8 <lora_driver_sendUploadMessage+0x18a>
    44e2:	84 e1       	ldi	r24, 0x14	; 20
    44e4:	01 c0       	rjmp	.+2      	; 0x44e8 <lora_driver_sendUploadMessage+0x18a>
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	0f 90       	pop	r0
    44ea:	df 91       	pop	r29
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	08 95       	ret

000044f4 <lora_driver_setAdaptiveDataRate>:
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	19 f0       	breq	.+6      	; 0x44fe <lora_driver_setAdaptiveDataRate+0xa>
    44f8:	69 e1       	ldi	r22, 0x19	; 25
    44fa:	75 e0       	ldi	r23, 0x05	; 5
    44fc:	02 c0       	rjmp	.+4      	; 0x4502 <lora_driver_setAdaptiveDataRate+0xe>
    44fe:	62 ef       	ldi	r22, 0xF2	; 242
    4500:	75 e0       	ldi	r23, 0x05	; 5
    4502:	8d e1       	ldi	r24, 0x1D	; 29
    4504:	95 e0       	ldi	r25, 0x05	; 5
    4506:	43 ce       	rjmp	.-890    	; 0x418e <_uploadMessageRc>
    4508:	08 95       	ret

0000450a <lora_driver_setReceiveDelay>:
    450a:	9f 93       	push	r25
    450c:	8f 93       	push	r24
    450e:	8e e4       	ldi	r24, 0x4E	; 78
    4510:	95 e0       	ldi	r25, 0x05	; 5
    4512:	9f 93       	push	r25
    4514:	8f 93       	push	r24
    4516:	8a e6       	ldi	r24, 0x6A	; 106
    4518:	92 e1       	ldi	r25, 0x12	; 18
    451a:	9f 93       	push	r25
    451c:	8f 93       	push	r24
    451e:	0e 94 bf 31 	call	0x637e	; 0x637e <sprintf>
    4522:	60 e0       	ldi	r22, 0x00	; 0
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	8a e6       	ldi	r24, 0x6A	; 106
    4528:	92 e1       	ldi	r25, 0x12	; 18
    452a:	31 de       	rcall	.-926    	; 0x418e <_uploadMessageRc>
    452c:	0f 90       	pop	r0
    452e:	0f 90       	pop	r0
    4530:	0f 90       	pop	r0
    4532:	0f 90       	pop	r0
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	08 95       	ret

0000453a <lora_driver_configureToEu868>:
    453a:	2f 92       	push	r2
    453c:	3f 92       	push	r3
    453e:	4f 92       	push	r4
    4540:	5f 92       	push	r5
    4542:	6f 92       	push	r6
    4544:	7f 92       	push	r7
    4546:	8f 92       	push	r8
    4548:	9f 92       	push	r9
    454a:	af 92       	push	r10
    454c:	bf 92       	push	r11
    454e:	cf 92       	push	r12
    4550:	df 92       	push	r13
    4552:	ef 92       	push	r14
    4554:	ff 92       	push	r15
    4556:	0f 93       	push	r16
    4558:	1f 93       	push	r17
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    4562:	a0 97       	sbiw	r28, 0x20	; 32
    4564:	0f b6       	in	r0, 0x3f	; 63
    4566:	f8 94       	cli
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	0f be       	out	0x3f, r0	; 63
    456c:	cd bf       	out	0x3d, r28	; 61
    456e:	6b e7       	ldi	r22, 0x7B	; 123
    4570:	75 e0       	ldi	r23, 0x05	; 5
    4572:	87 e8       	ldi	r24, 0x87	; 135
    4574:	95 e0       	ldi	r25, 0x05	; 5
    4576:	3c dd       	rcall	.-1416   	; 0x3ff0 <_uploadMessage>
    4578:	95 dd       	rcall	.-1238   	; 0x40a4 <_reply2ReturnCode>
    457a:	81 11       	cpse	r24, r1
    457c:	a3 c0       	rjmp	.+326    	; 0x46c4 <lora_driver_configureToEu868+0x18a>
    457e:	80 e2       	ldi	r24, 0x20	; 32
    4580:	e2 e2       	ldi	r30, 0x22	; 34
    4582:	f2 e0       	ldi	r31, 0x02	; 2
    4584:	de 01       	movw	r26, r28
    4586:	11 96       	adiw	r26, 0x01	; 1
    4588:	01 90       	ld	r0, Z+
    458a:	0d 92       	st	X+, r0
    458c:	8a 95       	dec	r24
    458e:	e1 f7       	brne	.-8      	; 0x4588 <lora_driver_configureToEu868+0x4e>
    4590:	9e 01       	movw	r18, r28
    4592:	2f 5f       	subi	r18, 0xFF	; 255
    4594:	3f 4f       	sbci	r19, 0xFF	; 255
    4596:	69 01       	movw	r12, r18
    4598:	e1 2c       	mov	r14, r1
    459a:	f1 2c       	mov	r15, r1
    459c:	0f 2e       	mov	r0, r31
    459e:	f3 e9       	ldi	r31, 0x93	; 147
    45a0:	af 2e       	mov	r10, r31
    45a2:	f5 e0       	ldi	r31, 0x05	; 5
    45a4:	bf 2e       	mov	r11, r31
    45a6:	f0 2d       	mov	r31, r0
    45a8:	0a e6       	ldi	r16, 0x6A	; 106
    45aa:	12 e1       	ldi	r17, 0x12	; 18
    45ac:	0f 2e       	mov	r0, r31
    45ae:	fc ea       	ldi	r31, 0xAC	; 172
    45b0:	4f 2e       	mov	r4, r31
    45b2:	f5 e0       	ldi	r31, 0x05	; 5
    45b4:	5f 2e       	mov	r5, r31
    45b6:	f0 2d       	mov	r31, r0
    45b8:	0f 2e       	mov	r0, r31
    45ba:	f3 ec       	ldi	r31, 0xC3	; 195
    45bc:	8f 2e       	mov	r8, r31
    45be:	f5 e0       	ldi	r31, 0x05	; 5
    45c0:	9f 2e       	mov	r9, r31
    45c2:	f0 2d       	mov	r31, r0
    45c4:	0f 2e       	mov	r0, r31
    45c6:	fd ed       	ldi	r31, 0xDD	; 221
    45c8:	6f 2e       	mov	r6, r31
    45ca:	f5 e0       	ldi	r31, 0x05	; 5
    45cc:	7f 2e       	mov	r7, r31
    45ce:	f0 2d       	mov	r31, r0
    45d0:	3e 2c       	mov	r3, r14
    45d2:	2f 2c       	mov	r2, r15
    45d4:	ff 92       	push	r15
    45d6:	ef 92       	push	r14
    45d8:	bf 92       	push	r11
    45da:	af 92       	push	r10
    45dc:	1f 93       	push	r17
    45de:	0f 93       	push	r16
    45e0:	0e 94 bf 31 	call	0x637e	; 0x637e <sprintf>
    45e4:	60 e0       	ldi	r22, 0x00	; 0
    45e6:	70 e0       	ldi	r23, 0x00	; 0
    45e8:	c8 01       	movw	r24, r16
    45ea:	02 dd       	rcall	.-1532   	; 0x3ff0 <_uploadMessage>
    45ec:	5b dd       	rcall	.-1354   	; 0x40a4 <_reply2ReturnCode>
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	81 11       	cpse	r24, r1
    45fc:	63 c0       	rjmp	.+198    	; 0x46c4 <lora_driver_configureToEu868+0x18a>
    45fe:	32 e0       	ldi	r19, 0x02	; 2
    4600:	3e 15       	cp	r19, r14
    4602:	e8 f4       	brcc	.+58     	; 0x463e <lora_driver_configureToEu868+0x104>
    4604:	f6 01       	movw	r30, r12
    4606:	83 81       	ldd	r24, Z+3	; 0x03
    4608:	8f 93       	push	r24
    460a:	82 81       	ldd	r24, Z+2	; 0x02
    460c:	8f 93       	push	r24
    460e:	81 81       	ldd	r24, Z+1	; 0x01
    4610:	8f 93       	push	r24
    4612:	80 81       	ld	r24, Z
    4614:	8f 93       	push	r24
    4616:	ff 92       	push	r15
    4618:	ef 92       	push	r14
    461a:	5f 92       	push	r5
    461c:	4f 92       	push	r4
    461e:	1f 93       	push	r17
    4620:	0f 93       	push	r16
    4622:	0e 94 bf 31 	call	0x637e	; 0x637e <sprintf>
    4626:	60 e0       	ldi	r22, 0x00	; 0
    4628:	70 e0       	ldi	r23, 0x00	; 0
    462a:	c8 01       	movw	r24, r16
    462c:	e1 dc       	rcall	.-1598   	; 0x3ff0 <_uploadMessage>
    462e:	3a dd       	rcall	.-1420   	; 0x40a4 <_reply2ReturnCode>
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	f8 94       	cli
    4634:	de bf       	out	0x3e, r29	; 62
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	cd bf       	out	0x3d, r28	; 61
    463a:	81 11       	cpse	r24, r1
    463c:	43 c0       	rjmp	.+134    	; 0x46c4 <lora_driver_configureToEu868+0x18a>
    463e:	2f 92       	push	r2
    4640:	3f 92       	push	r3
    4642:	9f 92       	push	r9
    4644:	8f 92       	push	r8
    4646:	1f 93       	push	r17
    4648:	0f 93       	push	r16
    464a:	0e 94 bf 31 	call	0x637e	; 0x637e <sprintf>
    464e:	60 e0       	ldi	r22, 0x00	; 0
    4650:	70 e0       	ldi	r23, 0x00	; 0
    4652:	c8 01       	movw	r24, r16
    4654:	cd dc       	rcall	.-1638   	; 0x3ff0 <_uploadMessage>
    4656:	26 dd       	rcall	.-1460   	; 0x40a4 <_reply2ReturnCode>
    4658:	0f 90       	pop	r0
    465a:	0f 90       	pop	r0
    465c:	0f 90       	pop	r0
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	81 11       	cpse	r24, r1
    4666:	2e c0       	rjmp	.+92     	; 0x46c4 <lora_driver_configureToEu868+0x18a>
    4668:	2f 92       	push	r2
    466a:	3f 92       	push	r3
    466c:	7f 92       	push	r7
    466e:	6f 92       	push	r6
    4670:	1f 93       	push	r17
    4672:	0f 93       	push	r16
    4674:	0e 94 bf 31 	call	0x637e	; 0x637e <sprintf>
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	70 e0       	ldi	r23, 0x00	; 0
    467c:	c8 01       	movw	r24, r16
    467e:	b8 dc       	rcall	.-1680   	; 0x3ff0 <_uploadMessage>
    4680:	11 dd       	rcall	.-1502   	; 0x40a4 <_reply2ReturnCode>
    4682:	0f 90       	pop	r0
    4684:	0f 90       	pop	r0
    4686:	0f 90       	pop	r0
    4688:	0f 90       	pop	r0
    468a:	0f 90       	pop	r0
    468c:	0f 90       	pop	r0
    468e:	81 11       	cpse	r24, r1
    4690:	19 c0       	rjmp	.+50     	; 0x46c4 <lora_driver_configureToEu868+0x18a>
    4692:	3f ef       	ldi	r19, 0xFF	; 255
    4694:	e3 1a       	sub	r14, r19
    4696:	f3 0a       	sbc	r15, r19
    4698:	84 e0       	ldi	r24, 0x04	; 4
    469a:	c8 0e       	add	r12, r24
    469c:	d1 1c       	adc	r13, r1
    469e:	98 e0       	ldi	r25, 0x08	; 8
    46a0:	e9 16       	cp	r14, r25
    46a2:	f1 04       	cpc	r15, r1
    46a4:	09 f0       	breq	.+2      	; 0x46a8 <lora_driver_configureToEu868+0x16e>
    46a6:	94 cf       	rjmp	.-216    	; 0x45d0 <lora_driver_configureToEu868+0x96>
    46a8:	60 e0       	ldi	r22, 0x00	; 0
    46aa:	70 e0       	ldi	r23, 0x00	; 0
    46ac:	85 ef       	ldi	r24, 0xF5	; 245
    46ae:	95 e0       	ldi	r25, 0x05	; 5
    46b0:	9f dc       	rcall	.-1730   	; 0x3ff0 <_uploadMessage>
    46b2:	f8 dc       	rcall	.-1552   	; 0x40a4 <_reply2ReturnCode>
    46b4:	81 11       	cpse	r24, r1
    46b6:	06 c0       	rjmp	.+12     	; 0x46c4 <lora_driver_configureToEu868+0x18a>
    46b8:	60 e0       	ldi	r22, 0x00	; 0
    46ba:	70 e0       	ldi	r23, 0x00	; 0
    46bc:	86 e0       	ldi	r24, 0x06	; 6
    46be:	96 e0       	ldi	r25, 0x06	; 6
    46c0:	97 dc       	rcall	.-1746   	; 0x3ff0 <_uploadMessage>
    46c2:	f0 dc       	rcall	.-1568   	; 0x40a4 <_reply2ReturnCode>
    46c4:	a0 96       	adiw	r28, 0x20	; 32
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	f8 94       	cli
    46ca:	de bf       	out	0x3e, r29	; 62
    46cc:	0f be       	out	0x3f, r0	; 63
    46ce:	cd bf       	out	0x3d, r28	; 61
    46d0:	df 91       	pop	r29
    46d2:	cf 91       	pop	r28
    46d4:	1f 91       	pop	r17
    46d6:	0f 91       	pop	r16
    46d8:	ff 90       	pop	r15
    46da:	ef 90       	pop	r14
    46dc:	df 90       	pop	r13
    46de:	cf 90       	pop	r12
    46e0:	bf 90       	pop	r11
    46e2:	af 90       	pop	r10
    46e4:	9f 90       	pop	r9
    46e6:	8f 90       	pop	r8
    46e8:	7f 90       	pop	r7
    46ea:	6f 90       	pop	r6
    46ec:	5f 90       	pop	r5
    46ee:	4f 90       	pop	r4
    46f0:	3f 90       	pop	r3
    46f2:	2f 90       	pop	r2
    46f4:	08 95       	ret

000046f6 <lora_driver_setOtaaIdentity>:
    46f6:	ef 92       	push	r14
    46f8:	ff 92       	push	r15
    46fa:	0f 93       	push	r16
    46fc:	1f 93       	push	r17
    46fe:	cf 93       	push	r28
    4700:	df 93       	push	r29
    4702:	ec 01       	movw	r28, r24
    4704:	8b 01       	movw	r16, r22
    4706:	7a 01       	movw	r14, r20
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	f4 de       	rcall	.-536    	; 0x44f4 <lora_driver_setAdaptiveDataRate>
    470c:	81 11       	cpse	r24, r1
    470e:	0d c0       	rjmp	.+26     	; 0x472a <lora_driver_setOtaaIdentity+0x34>
    4710:	ce 01       	movw	r24, r28
    4712:	d4 dd       	rcall	.-1112   	; 0x42bc <lora_driver_setApplicationIdentifier>
    4714:	81 11       	cpse	r24, r1
    4716:	09 c0       	rjmp	.+18     	; 0x472a <lora_driver_setOtaaIdentity+0x34>
    4718:	c8 01       	movw	r24, r16
    471a:	e1 dd       	rcall	.-1086   	; 0x42de <lora_driver_setApplicationKey>
    471c:	81 11       	cpse	r24, r1
    471e:	05 c0       	rjmp	.+10     	; 0x472a <lora_driver_setOtaaIdentity+0x34>
    4720:	c7 01       	movw	r24, r14
    4722:	bb dd       	rcall	.-1162   	; 0x429a <lora_driver_setDeviceIdentifier>
    4724:	81 11       	cpse	r24, r1
    4726:	01 c0       	rjmp	.+2      	; 0x472a <lora_driver_setOtaaIdentity+0x34>
    4728:	eb dd       	rcall	.-1066   	; 0x4300 <lora_driver_saveMac>
    472a:	df 91       	pop	r29
    472c:	cf 91       	pop	r28
    472e:	1f 91       	pop	r17
    4730:	0f 91       	pop	r16
    4732:	ff 90       	pop	r15
    4734:	ef 90       	pop	r14
    4736:	08 95       	ret

00004738 <lora_driver_mapReturnCodeToText>:
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	fc 01       	movw	r30, r24
    473c:	ee 0f       	add	r30, r30
    473e:	ff 1f       	adc	r31, r31
    4740:	8e 0f       	add	r24, r30
    4742:	9f 1f       	adc	r25, r31
    4744:	fc 01       	movw	r30, r24
    4746:	e1 53       	subi	r30, 0x31	; 49
    4748:	f9 4f       	sbci	r31, 0xF9	; 249
    474a:	81 81       	ldd	r24, Z+1	; 0x01
    474c:	92 81       	ldd	r25, Z+2	; 0x02
    474e:	08 95       	ret

00004750 <decode_port_no>:
    4750:	dc 01       	movw	r26, r24
    4752:	00 97       	sbiw	r24, 0x00	; 0
    4754:	29 f1       	breq	.+74     	; 0x47a0 <decode_port_no+0x50>
    4756:	fb 01       	movw	r30, r22
    4758:	20 81       	ld	r18, Z
    475a:	fc 01       	movw	r30, r24
    475c:	01 90       	ld	r0, Z+
    475e:	00 20       	and	r0, r0
    4760:	e9 f7       	brne	.-6      	; 0x475c <decode_port_no+0xc>
    4762:	31 97       	sbiw	r30, 0x01	; 1
    4764:	e8 1b       	sub	r30, r24
    4766:	f9 0b       	sbc	r31, r25
    4768:	82 2f       	mov	r24, r18
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	e8 17       	cp	r30, r24
    476e:	f9 07       	cpc	r31, r25
    4770:	c8 f0       	brcs	.+50     	; 0x47a4 <decode_port_no+0x54>
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	08 c0       	rjmp	.+16     	; 0x4786 <decode_port_no+0x36>
    4776:	88 0f       	add	r24, r24
    4778:	38 2f       	mov	r19, r24
    477a:	33 0f       	add	r19, r19
    477c:	33 0f       	add	r19, r19
    477e:	83 0f       	add	r24, r19
    4780:	80 53       	subi	r24, 0x30	; 48
    4782:	89 0f       	add	r24, r25
    4784:	2f 5f       	subi	r18, 0xFF	; 255
    4786:	fd 01       	movw	r30, r26
    4788:	e2 0f       	add	r30, r18
    478a:	f1 1d       	adc	r31, r1
    478c:	90 81       	ld	r25, Z
    478e:	30 ed       	ldi	r19, 0xD0	; 208
    4790:	39 0f       	add	r19, r25
    4792:	3a 30       	cpi	r19, 0x0A	; 10
    4794:	10 f4       	brcc	.+4      	; 0x479a <decode_port_no+0x4a>
    4796:	91 11       	cpse	r25, r1
    4798:	ee cf       	rjmp	.-36     	; 0x4776 <decode_port_no+0x26>
    479a:	fb 01       	movw	r30, r22
    479c:	20 83       	st	Z, r18
    479e:	08 95       	ret
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	08 95       	ret
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	08 95       	ret

000047a8 <decode_hexadecimal_string_bytes>:
    47a8:	0f 93       	push	r16
    47aa:	1f 93       	push	r17
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	dc 01       	movw	r26, r24
    47b2:	ea 01       	movw	r28, r20
    47b4:	20 97       	sbiw	r28, 0x00	; 0
    47b6:	e1 f1       	breq	.+120    	; 0x4830 <decode_hexadecimal_string_bytes+0x88>
    47b8:	fa 01       	movw	r30, r20
    47ba:	01 90       	ld	r0, Z+
    47bc:	00 20       	and	r0, r0
    47be:	e9 f7       	brne	.-6      	; 0x47ba <decode_hexadecimal_string_bytes+0x12>
    47c0:	31 97       	sbiw	r30, 0x01	; 1
    47c2:	e4 1b       	sub	r30, r20
    47c4:	f5 0b       	sbc	r31, r21
    47c6:	32 97       	sbiw	r30, 0x02	; 2
    47c8:	10 f5       	brcc	.+68     	; 0x480e <decode_hexadecimal_string_bytes+0x66>
    47ca:	32 c0       	rjmp	.+100    	; 0x4830 <decode_hexadecimal_string_bytes+0x88>
    47cc:	8d 01       	movw	r16, r26
    47ce:	04 0f       	add	r16, r20
    47d0:	15 1f       	adc	r17, r21
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	ae 01       	movw	r20, r28
    47d6:	42 0f       	add	r20, r18
    47d8:	53 1f       	adc	r21, r19
    47da:	fa 01       	movw	r30, r20
    47dc:	90 81       	ld	r25, Z
    47de:	91 34       	cpi	r25, 0x41	; 65
    47e0:	28 f0       	brcs	.+10     	; 0x47ec <decode_hexadecimal_string_bytes+0x44>
    47e2:	97 53       	subi	r25, 0x37	; 55
    47e4:	59 2f       	mov	r21, r25
    47e6:	52 95       	swap	r21
    47e8:	50 7f       	andi	r21, 0xF0	; 240
    47ea:	03 c0       	rjmp	.+6      	; 0x47f2 <decode_hexadecimal_string_bytes+0x4a>
    47ec:	59 2f       	mov	r21, r25
    47ee:	52 95       	swap	r21
    47f0:	50 7f       	andi	r21, 0xF0	; 240
    47f2:	2c 0f       	add	r18, r28
    47f4:	3d 1f       	adc	r19, r29
    47f6:	f9 01       	movw	r30, r18
    47f8:	91 81       	ldd	r25, Z+1	; 0x01
    47fa:	91 34       	cpi	r25, 0x41	; 65
    47fc:	10 f0       	brcs	.+4      	; 0x4802 <decode_hexadecimal_string_bytes+0x5a>
    47fe:	97 53       	subi	r25, 0x37	; 55
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <decode_hexadecimal_string_bytes+0x5c>
    4802:	90 53       	subi	r25, 0x30	; 48
    4804:	95 0f       	add	r25, r21
    4806:	f8 01       	movw	r30, r16
    4808:	90 83       	st	Z, r25
    480a:	8f 5f       	subi	r24, 0xFF	; 255
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <decode_hexadecimal_string_bytes+0x68>
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	28 2f       	mov	r18, r24
    4812:	22 0f       	add	r18, r18
    4814:	48 2f       	mov	r20, r24
    4816:	50 e0       	ldi	r21, 0x00	; 0
    4818:	fe 01       	movw	r30, r28
    481a:	01 90       	ld	r0, Z+
    481c:	00 20       	and	r0, r0
    481e:	e9 f7       	brne	.-6      	; 0x481a <decode_hexadecimal_string_bytes+0x72>
    4820:	31 97       	sbiw	r30, 0x01	; 1
    4822:	ec 1b       	sub	r30, r28
    4824:	fd 0b       	sbc	r31, r29
    4826:	4e 17       	cp	r20, r30
    4828:	5f 07       	cpc	r21, r31
    482a:	10 f4       	brcc	.+4      	; 0x4830 <decode_hexadecimal_string_bytes+0x88>
    482c:	86 13       	cpse	r24, r22
    482e:	ce cf       	rjmp	.-100    	; 0x47cc <decode_hexadecimal_string_bytes+0x24>
    4830:	df 91       	pop	r29
    4832:	cf 91       	pop	r28
    4834:	1f 91       	pop	r17
    4836:	0f 91       	pop	r16
    4838:	08 95       	ret

0000483a <_serialCallBack>:
    483a:	80 91 c7 12 	lds	r24, 0x12C7	; 0x8012c7 <crc_sum.1945>
    483e:	86 0f       	add	r24, r22
    4840:	80 93 c7 12 	sts	0x12C7, r24	; 0x8012c7 <crc_sum.1945>
    4844:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <_mh_state>
    4848:	91 30       	cpi	r25, 0x01	; 1
    484a:	79 f0       	breq	.+30     	; 0x486a <_serialCallBack+0x30>
    484c:	28 f0       	brcs	.+10     	; 0x4858 <_serialCallBack+0x1e>
    484e:	92 30       	cpi	r25, 0x02	; 2
    4850:	a9 f0       	breq	.+42     	; 0x487c <_serialCallBack+0x42>
    4852:	93 30       	cpi	r25, 0x03	; 3
    4854:	19 f1       	breq	.+70     	; 0x489c <_serialCallBack+0x62>
    4856:	08 95       	ret
    4858:	6f 3f       	cpi	r22, 0xFF	; 255
    485a:	09 f0       	breq	.+2      	; 0x485e <_serialCallBack+0x24>
    485c:	48 c0       	rjmp	.+144    	; 0x48ee <_serialCallBack+0xb4>
    485e:	10 92 c7 12 	sts	0x12C7, r1	; 0x8012c7 <crc_sum.1945>
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	80 93 ca 12 	sts	0x12CA, r24	; 0x8012ca <_mh_state>
    4868:	08 95       	ret
    486a:	66 38       	cpi	r22, 0x86	; 134
    486c:	09 f0       	breq	.+2      	; 0x4870 <_serialCallBack+0x36>
    486e:	3f c0       	rjmp	.+126    	; 0x48ee <_serialCallBack+0xb4>
    4870:	10 92 c6 12 	sts	0x12C6, r1	; 0x8012c6 <inDex.1943>
    4874:	82 e0       	ldi	r24, 0x02	; 2
    4876:	80 93 ca 12 	sts	0x12CA, r24	; 0x8012ca <_mh_state>
    487a:	08 95       	ret
    487c:	e0 91 c6 12 	lds	r30, 0x12C6	; 0x8012c6 <inDex.1943>
    4880:	81 e0       	ldi	r24, 0x01	; 1
    4882:	8e 0f       	add	r24, r30
    4884:	80 93 c6 12 	sts	0x12C6, r24	; 0x8012c6 <inDex.1943>
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	ec 53       	subi	r30, 0x3C	; 60
    488c:	fd 4e       	sbci	r31, 0xED	; 237
    488e:	60 83       	st	Z, r22
    4890:	82 30       	cpi	r24, 0x02	; 2
    4892:	69 f5       	brne	.+90     	; 0x48ee <_serialCallBack+0xb4>
    4894:	83 e0       	ldi	r24, 0x03	; 3
    4896:	80 93 ca 12 	sts	0x12CA, r24	; 0x8012ca <_mh_state>
    489a:	08 95       	ret
    489c:	90 91 c6 12 	lds	r25, 0x12C6	; 0x8012c6 <inDex.1943>
    48a0:	21 e0       	ldi	r18, 0x01	; 1
    48a2:	29 0f       	add	r18, r25
    48a4:	20 93 c6 12 	sts	0x12C6, r18	; 0x8012c6 <inDex.1943>
    48a8:	96 30       	cpi	r25, 0x06	; 6
    48aa:	09 f5       	brne	.+66     	; 0x48ee <_serialCallBack+0xb4>
    48ac:	81 11       	cpse	r24, r1
    48ae:	0e c0       	rjmp	.+28     	; 0x48cc <_serialCallBack+0x92>
    48b0:	e4 ec       	ldi	r30, 0xC4	; 196
    48b2:	f2 e1       	ldi	r31, 0x12	; 18
    48b4:	80 81       	ld	r24, Z
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	98 2f       	mov	r25, r24
    48ba:	88 27       	eor	r24, r24
    48bc:	21 81       	ldd	r18, Z+1	; 0x01
    48be:	82 0f       	add	r24, r18
    48c0:	91 1d       	adc	r25, r1
    48c2:	90 93 cc 12 	sts	0x12CC, r25	; 0x8012cc <_ppm+0x1>
    48c6:	80 93 cb 12 	sts	0x12CB, r24	; 0x8012cb <_ppm>
    48ca:	04 c0       	rjmp	.+8      	; 0x48d4 <_serialCallBack+0x9a>
    48cc:	10 92 cc 12 	sts	0x12CC, r1	; 0x8012cc <_ppm+0x1>
    48d0:	10 92 cb 12 	sts	0x12CB, r1	; 0x8012cb <_ppm>
    48d4:	10 92 ca 12 	sts	0x12CA, r1	; 0x8012ca <_mh_state>
    48d8:	e0 91 c8 12 	lds	r30, 0x12C8	; 0x8012c8 <_appCallBack>
    48dc:	f0 91 c9 12 	lds	r31, 0x12C9	; 0x8012c9 <_appCallBack+0x1>
    48e0:	30 97       	sbiw	r30, 0x00	; 0
    48e2:	29 f0       	breq	.+10     	; 0x48ee <_serialCallBack+0xb4>
    48e4:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <_ppm>
    48e8:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <_ppm+0x1>
    48ec:	19 95       	eicall
    48ee:	08 95       	ret

000048f0 <mh_z19_initialise>:
    48f0:	8f 92       	push	r8
    48f2:	9f 92       	push	r9
    48f4:	af 92       	push	r10
    48f6:	cf 92       	push	r12
    48f8:	ef 92       	push	r14
    48fa:	0f 93       	push	r16
    48fc:	0f 2e       	mov	r0, r31
    48fe:	fd e1       	ldi	r31, 0x1D	; 29
    4900:	8f 2e       	mov	r8, r31
    4902:	f4 e2       	ldi	r31, 0x24	; 36
    4904:	9f 2e       	mov	r9, r31
    4906:	f0 2d       	mov	r31, r0
    4908:	68 94       	set
    490a:	aa 24       	eor	r10, r10
    490c:	a4 f8       	bld	r10, 4
    490e:	68 94       	set
    4910:	cc 24       	eor	r12, r12
    4912:	c4 f8       	bld	r12, 4
    4914:	e1 2c       	mov	r14, r1
    4916:	00 e0       	ldi	r16, 0x00	; 0
    4918:	23 e0       	ldi	r18, 0x03	; 3
    491a:	40 e8       	ldi	r20, 0x80	; 128
    491c:	55 e2       	ldi	r21, 0x25	; 37
    491e:	60 e0       	ldi	r22, 0x00	; 0
    4920:	70 e0       	ldi	r23, 0x00	; 0
    4922:	3f d0       	rcall	.+126    	; 0x49a2 <serial_create>
    4924:	90 93 ce 12 	sts	0x12CE, r25	; 0x8012ce <_serial+0x1>
    4928:	80 93 cd 12 	sts	0x12CD, r24	; 0x8012cd <_serial>
    492c:	0f 91       	pop	r16
    492e:	ef 90       	pop	r14
    4930:	cf 90       	pop	r12
    4932:	af 90       	pop	r10
    4934:	9f 90       	pop	r9
    4936:	8f 90       	pop	r8
    4938:	08 95       	ret

0000493a <mh_z19_injectCallBack>:
    493a:	90 93 c9 12 	sts	0x12C9, r25	; 0x8012c9 <_appCallBack+0x1>
    493e:	80 93 c8 12 	sts	0x12C8, r24	; 0x8012c8 <_appCallBack>
    4942:	08 95       	ret

00004944 <mh_z19_takeMeassuring>:
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	cd b7       	in	r28, 0x3d	; 61
    494a:	de b7       	in	r29, 0x3e	; 62
    494c:	29 97       	sbiw	r28, 0x09	; 9
    494e:	0f b6       	in	r0, 0x3f	; 63
    4950:	f8 94       	cli
    4952:	de bf       	out	0x3e, r29	; 62
    4954:	0f be       	out	0x3f, r0	; 63
    4956:	cd bf       	out	0x3d, r28	; 61
    4958:	89 e0       	ldi	r24, 0x09	; 9
    495a:	e2 e4       	ldi	r30, 0x42	; 66
    495c:	f2 e0       	ldi	r31, 0x02	; 2
    495e:	9e 01       	movw	r18, r28
    4960:	2f 5f       	subi	r18, 0xFF	; 255
    4962:	3f 4f       	sbci	r19, 0xFF	; 255
    4964:	d9 01       	movw	r26, r18
    4966:	01 90       	ld	r0, Z+
    4968:	0d 92       	st	X+, r0
    496a:	8a 95       	dec	r24
    496c:	e1 f7       	brne	.-8      	; 0x4966 <mh_z19_takeMeassuring+0x22>
    496e:	10 92 cc 12 	sts	0x12CC, r1	; 0x8012cc <_ppm+0x1>
    4972:	10 92 cb 12 	sts	0x12CB, r1	; 0x8012cb <_ppm>
    4976:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <_serial>
    497a:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <_serial+0x1>
    497e:	00 97       	sbiw	r24, 0x00	; 0
    4980:	31 f0       	breq	.+12     	; 0x498e <mh_z19_takeMeassuring+0x4a>
    4982:	42 2f       	mov	r20, r18
    4984:	53 2f       	mov	r21, r19
    4986:	69 e0       	ldi	r22, 0x09	; 9
    4988:	da d0       	rcall	.+436    	; 0x4b3e <serial_sendBytes>
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	01 c0       	rjmp	.+2      	; 0x4990 <mh_z19_takeMeassuring+0x4c>
    498e:	82 e0       	ldi	r24, 0x02	; 2
    4990:	29 96       	adiw	r28, 0x09	; 9
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	f8 94       	cli
    4996:	de bf       	out	0x3e, r29	; 62
    4998:	0f be       	out	0x3f, r0	; 63
    499a:	cd bf       	out	0x3d, r28	; 61
    499c:	df 91       	pop	r29
    499e:	cf 91       	pop	r28
    49a0:	08 95       	ret

000049a2 <serial_create>:
    49a2:	2f 92       	push	r2
    49a4:	3f 92       	push	r3
    49a6:	4f 92       	push	r4
    49a8:	5f 92       	push	r5
    49aa:	6f 92       	push	r6
    49ac:	7f 92       	push	r7
    49ae:	8f 92       	push	r8
    49b0:	9f 92       	push	r9
    49b2:	af 92       	push	r10
    49b4:	cf 92       	push	r12
    49b6:	ef 92       	push	r14
    49b8:	ff 92       	push	r15
    49ba:	0f 93       	push	r16
    49bc:	1f 93       	push	r17
    49be:	cf 93       	push	r28
    49c0:	df 93       	push	r29
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	f8 2e       	mov	r15, r24
    49c8:	2a 01       	movw	r4, r20
    49ca:	3b 01       	movw	r6, r22
    49cc:	88 e0       	ldi	r24, 0x08	; 8
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <malloc>
    49d4:	8c 01       	movw	r16, r24
    49d6:	8f 2d       	mov	r24, r15
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	fc 01       	movw	r30, r24
    49dc:	ee 0f       	add	r30, r30
    49de:	ff 1f       	adc	r31, r31
    49e0:	e1 53       	subi	r30, 0x31	; 49
    49e2:	fd 4e       	sbci	r31, 0xED	; 237
    49e4:	11 83       	std	Z+1, r17	; 0x01
    49e6:	00 83       	st	Z, r16
    49e8:	01 15       	cp	r16, r1
    49ea:	11 05       	cpc	r17, r1
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <serial_create+0x4e>
    49ee:	6a c0       	rjmp	.+212    	; 0x4ac4 <serial_create+0x122>
    49f0:	88 0f       	add	r24, r24
    49f2:	99 1f       	adc	r25, r25
    49f4:	fc 01       	movw	r30, r24
    49f6:	e5 5f       	subi	r30, 0xF5	; 245
    49f8:	fd 4f       	sbci	r31, 0xFD	; 253
    49fa:	80 81       	ld	r24, Z
    49fc:	91 81       	ldd	r25, Z+1	; 0x01
    49fe:	d8 01       	movw	r26, r16
    4a00:	8d 93       	st	X+, r24
    4a02:	9c 93       	st	X, r25
    4a04:	8c 2d       	mov	r24, r12
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	88 0f       	add	r24, r24
    4a0a:	99 1f       	adc	r25, r25
    4a0c:	88 0f       	add	r24, r24
    4a0e:	99 1f       	adc	r25, r25
    4a10:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <malloc>
    4a14:	1c 01       	movw	r2, r24
    4a16:	86 e0       	ldi	r24, 0x06	; 6
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <malloc>
    4a1e:	7c 01       	movw	r14, r24
    4a20:	4c 2d       	mov	r20, r12
    4a22:	b1 01       	movw	r22, r2
    4a24:	3e d5       	rcall	.+2684   	; 0x54a2 <fifo_init>
    4a26:	f8 01       	movw	r30, r16
    4a28:	f5 82       	std	Z+5, r15	; 0x05
    4a2a:	e4 82       	std	Z+4, r14	; 0x04
    4a2c:	8a 2d       	mov	r24, r10
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	88 0f       	add	r24, r24
    4a32:	99 1f       	adc	r25, r25
    4a34:	88 0f       	add	r24, r24
    4a36:	99 1f       	adc	r25, r25
    4a38:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <malloc>
    4a3c:	1c 01       	movw	r2, r24
    4a3e:	86 e0       	ldi	r24, 0x06	; 6
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <malloc>
    4a46:	7c 01       	movw	r14, r24
    4a48:	4a 2d       	mov	r20, r10
    4a4a:	b1 01       	movw	r22, r2
    4a4c:	2a d5       	rcall	.+2644   	; 0x54a2 <fifo_init>
    4a4e:	d8 01       	movw	r26, r16
    4a50:	13 96       	adiw	r26, 0x03	; 3
    4a52:	fc 92       	st	X, r15
    4a54:	ee 92       	st	-X, r14
    4a56:	12 97       	sbiw	r26, 0x02	; 2
    4a58:	17 96       	adiw	r26, 0x07	; 7
    4a5a:	9c 92       	st	X, r9
    4a5c:	8e 92       	st	-X, r8
    4a5e:	16 97       	sbiw	r26, 0x06	; 6
    4a60:	ff b6       	in	r15, 0x3f	; 63
    4a62:	f8 94       	cli
    4a64:	ed 91       	ld	r30, X+
    4a66:	fc 91       	ld	r31, X
    4a68:	11 97       	sbiw	r26, 0x01	; 1
    4a6a:	36 97       	sbiw	r30, 0x06	; 6
    4a6c:	80 81       	ld	r24, Z
    4a6e:	82 60       	ori	r24, 0x02	; 2
    4a70:	80 83       	st	Z, r24
    4a72:	8d 90       	ld	r8, X+
    4a74:	9c 90       	ld	r9, X
    4a76:	c3 01       	movw	r24, r6
    4a78:	b2 01       	movw	r22, r4
    4a7a:	0e 94 67 2e 	call	0x5cce	; 0x5cce <__floatunsisf>
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e0       	ldi	r20, 0x00	; 0
    4a84:	51 e4       	ldi	r21, 0x41	; 65
    4a86:	fa d8       	rcall	.-3596   	; 0x3c7c <__mulsf3>
    4a88:	9b 01       	movw	r18, r22
    4a8a:	ac 01       	movw	r20, r24
    4a8c:	60 e0       	ldi	r22, 0x00	; 0
    4a8e:	74 e2       	ldi	r23, 0x24	; 36
    4a90:	84 e7       	ldi	r24, 0x74	; 116
    4a92:	9b e4       	ldi	r25, 0x4B	; 75
    4a94:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__divsf3>
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e8       	ldi	r20, 0x80	; 128
    4a9e:	5f e3       	ldi	r21, 0x3F	; 63
    4aa0:	50 d9       	rcall	.-3424   	; 0x3d42 <__subsf3>
    4aa2:	64 d8       	rcall	.-3896   	; 0x3b6c <__fixunssfsi>
    4aa4:	f4 01       	movw	r30, r8
    4aa6:	32 97       	sbiw	r30, 0x02	; 2
    4aa8:	60 83       	st	Z, r22
    4aaa:	d8 01       	movw	r26, r16
    4aac:	ed 91       	ld	r30, X+
    4aae:	fc 91       	ld	r31, X
    4ab0:	11 97       	sbiw	r26, 0x01	; 1
    4ab2:	35 97       	sbiw	r30, 0x05	; 5
    4ab4:	88 e9       	ldi	r24, 0x98	; 152
    4ab6:	80 83       	st	Z, r24
    4ab8:	ed 91       	ld	r30, X+
    4aba:	fc 91       	ld	r31, X
    4abc:	34 97       	sbiw	r30, 0x04	; 4
    4abe:	86 e0       	ldi	r24, 0x06	; 6
    4ac0:	80 83       	st	Z, r24
    4ac2:	ff be       	out	0x3f, r15	; 63
    4ac4:	c8 01       	movw	r24, r16
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	1f 91       	pop	r17
    4acc:	0f 91       	pop	r16
    4ace:	ff 90       	pop	r15
    4ad0:	ef 90       	pop	r14
    4ad2:	cf 90       	pop	r12
    4ad4:	af 90       	pop	r10
    4ad6:	9f 90       	pop	r9
    4ad8:	8f 90       	pop	r8
    4ada:	7f 90       	pop	r7
    4adc:	6f 90       	pop	r6
    4ade:	5f 90       	pop	r5
    4ae0:	4f 90       	pop	r4
    4ae2:	3f 90       	pop	r3
    4ae4:	2f 90       	pop	r2
    4ae6:	08 95       	ret

00004ae8 <serial_sendByte>:
    4ae8:	cf 93       	push	r28
    4aea:	df 93       	push	r29
    4aec:	dc 01       	movw	r26, r24
    4aee:	89 2b       	or	r24, r25
    4af0:	01 f1       	breq	.+64     	; 0x4b32 <serial_sendByte+0x4a>
    4af2:	12 96       	adiw	r26, 0x02	; 2
    4af4:	ed 91       	ld	r30, X+
    4af6:	fc 91       	ld	r31, X
    4af8:	13 97       	sbiw	r26, 0x03	; 3
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	82 81       	ldd	r24, Z+2	; 0x02
    4afe:	25 81       	ldd	r18, Z+5	; 0x05
    4b00:	98 1b       	sub	r25, r24
    4b02:	92 23       	and	r25, r18
    4b04:	84 81       	ldd	r24, Z+4	; 0x04
    4b06:	98 17       	cp	r25, r24
    4b08:	b1 f0       	breq	.+44     	; 0x4b36 <serial_sendByte+0x4e>
    4b0a:	83 81       	ldd	r24, Z+3	; 0x03
    4b0c:	26 95       	lsr	r18
    4b0e:	28 23       	and	r18, r24
    4b10:	c0 81       	ld	r28, Z
    4b12:	d1 81       	ldd	r29, Z+1	; 0x01
    4b14:	c2 0f       	add	r28, r18
    4b16:	d1 1d       	adc	r29, r1
    4b18:	68 83       	st	Y, r22
    4b1a:	8f 5f       	subi	r24, 0xFF	; 255
    4b1c:	95 81       	ldd	r25, Z+5	; 0x05
    4b1e:	89 23       	and	r24, r25
    4b20:	83 83       	std	Z+3, r24	; 0x03
    4b22:	ed 91       	ld	r30, X+
    4b24:	fc 91       	ld	r31, X
    4b26:	35 97       	sbiw	r30, 0x05	; 5
    4b28:	80 81       	ld	r24, Z
    4b2a:	80 62       	ori	r24, 0x20	; 32
    4b2c:	80 83       	st	Z, r24
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	03 c0       	rjmp	.+6      	; 0x4b38 <serial_sendByte+0x50>
    4b32:	81 e0       	ldi	r24, 0x01	; 1
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <serial_sendByte+0x50>
    4b36:	82 e0       	ldi	r24, 0x02	; 2
    4b38:	df 91       	pop	r29
    4b3a:	cf 91       	pop	r28
    4b3c:	08 95       	ret

00004b3e <serial_sendBytes>:
    4b3e:	ef 92       	push	r14
    4b40:	ff 92       	push	r15
    4b42:	0f 93       	push	r16
    4b44:	1f 93       	push	r17
    4b46:	cf 93       	push	r28
    4b48:	df 93       	push	r29
    4b4a:	7c 01       	movw	r14, r24
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <serial_sendBytes+0x14>
    4b50:	41 c0       	rjmp	.+130    	; 0x4bd4 <serial_sendBytes+0x96>
    4b52:	dc 01       	movw	r26, r24
    4b54:	12 96       	adiw	r26, 0x02	; 2
    4b56:	ed 91       	ld	r30, X+
    4b58:	fc 91       	ld	r31, X
    4b5a:	13 97       	sbiw	r26, 0x03	; 3
    4b5c:	93 81       	ldd	r25, Z+3	; 0x03
    4b5e:	82 81       	ldd	r24, Z+2	; 0x02
    4b60:	98 1b       	sub	r25, r24
    4b62:	85 81       	ldd	r24, Z+5	; 0x05
    4b64:	98 23       	and	r25, r24
    4b66:	84 81       	ldd	r24, Z+4	; 0x04
    4b68:	89 1b       	sub	r24, r25
    4b6a:	86 17       	cp	r24, r22
    4b6c:	a8 f1       	brcs	.+106    	; 0x4bd8 <serial_sendBytes+0x9a>
    4b6e:	66 23       	and	r22, r22
    4b70:	41 f1       	breq	.+80     	; 0x4bc2 <serial_sendBytes+0x84>
    4b72:	84 2f       	mov	r24, r20
    4b74:	95 2f       	mov	r25, r21
    4b76:	dc 01       	movw	r26, r24
    4b78:	61 50       	subi	r22, 0x01	; 1
    4b7a:	46 2f       	mov	r20, r22
    4b7c:	50 e0       	ldi	r21, 0x00	; 0
    4b7e:	4f 5f       	subi	r20, 0xFF	; 255
    4b80:	5f 4f       	sbci	r21, 0xFF	; 255
    4b82:	48 0f       	add	r20, r24
    4b84:	59 1f       	adc	r21, r25
    4b86:	e7 01       	movw	r28, r14
    4b88:	ea 81       	ldd	r30, Y+2	; 0x02
    4b8a:	fb 81       	ldd	r31, Y+3	; 0x03
    4b8c:	93 81       	ldd	r25, Z+3	; 0x03
    4b8e:	82 81       	ldd	r24, Z+2	; 0x02
    4b90:	25 81       	ldd	r18, Z+5	; 0x05
    4b92:	98 1b       	sub	r25, r24
    4b94:	92 23       	and	r25, r18
    4b96:	84 81       	ldd	r24, Z+4	; 0x04
    4b98:	98 17       	cp	r25, r24
    4b9a:	79 f0       	breq	.+30     	; 0x4bba <serial_sendBytes+0x7c>
    4b9c:	8c 91       	ld	r24, X
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	26 95       	lsr	r18
    4ba2:	29 23       	and	r18, r25
    4ba4:	60 81       	ld	r22, Z
    4ba6:	71 81       	ldd	r23, Z+1	; 0x01
    4ba8:	8b 01       	movw	r16, r22
    4baa:	02 0f       	add	r16, r18
    4bac:	11 1d       	adc	r17, r1
    4bae:	e8 01       	movw	r28, r16
    4bb0:	88 83       	st	Y, r24
    4bb2:	9f 5f       	subi	r25, 0xFF	; 255
    4bb4:	85 81       	ldd	r24, Z+5	; 0x05
    4bb6:	98 23       	and	r25, r24
    4bb8:	93 83       	std	Z+3, r25	; 0x03
    4bba:	11 96       	adiw	r26, 0x01	; 1
    4bbc:	a4 17       	cp	r26, r20
    4bbe:	b5 07       	cpc	r27, r21
    4bc0:	11 f7       	brne	.-60     	; 0x4b86 <serial_sendBytes+0x48>
    4bc2:	d7 01       	movw	r26, r14
    4bc4:	ed 91       	ld	r30, X+
    4bc6:	fc 91       	ld	r31, X
    4bc8:	35 97       	sbiw	r30, 0x05	; 5
    4bca:	80 81       	ld	r24, Z
    4bcc:	80 62       	ori	r24, 0x20	; 32
    4bce:	80 83       	st	Z, r24
    4bd0:	80 e0       	ldi	r24, 0x00	; 0
    4bd2:	03 c0       	rjmp	.+6      	; 0x4bda <serial_sendBytes+0x9c>
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	01 c0       	rjmp	.+2      	; 0x4bda <serial_sendBytes+0x9c>
    4bd8:	82 e0       	ldi	r24, 0x02	; 2
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	ff 90       	pop	r15
    4be4:	ef 90       	pop	r14
    4be6:	08 95       	ret

00004be8 <serial_getByte>:
    4be8:	00 97       	sbiw	r24, 0x00	; 0
    4bea:	d1 f0       	breq	.+52     	; 0x4c20 <serial_getByte+0x38>
    4bec:	dc 01       	movw	r26, r24
    4bee:	14 96       	adiw	r26, 0x04	; 4
    4bf0:	ed 91       	ld	r30, X+
    4bf2:	fc 91       	ld	r31, X
    4bf4:	15 97       	sbiw	r26, 0x05	; 5
    4bf6:	93 81       	ldd	r25, Z+3	; 0x03
    4bf8:	82 81       	ldd	r24, Z+2	; 0x02
    4bfa:	98 17       	cp	r25, r24
    4bfc:	99 f0       	breq	.+38     	; 0x4c24 <serial_getByte+0x3c>
    4bfe:	92 81       	ldd	r25, Z+2	; 0x02
    4c00:	85 81       	ldd	r24, Z+5	; 0x05
    4c02:	86 95       	lsr	r24
    4c04:	89 23       	and	r24, r25
    4c06:	a0 81       	ld	r26, Z
    4c08:	b1 81       	ldd	r27, Z+1	; 0x01
    4c0a:	a8 0f       	add	r26, r24
    4c0c:	b1 1d       	adc	r27, r1
    4c0e:	8c 91       	ld	r24, X
    4c10:	db 01       	movw	r26, r22
    4c12:	8c 93       	st	X, r24
    4c14:	9f 5f       	subi	r25, 0xFF	; 255
    4c16:	85 81       	ldd	r24, Z+5	; 0x05
    4c18:	98 23       	and	r25, r24
    4c1a:	92 83       	std	Z+2, r25	; 0x02
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	08 95       	ret
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	08 95       	ret
    4c24:	83 e0       	ldi	r24, 0x03	; 3
    4c26:	08 95       	ret

00004c28 <__vector_25>:
    4c28:	1f 92       	push	r1
    4c2a:	0f 92       	push	r0
    4c2c:	0f b6       	in	r0, 0x3f	; 63
    4c2e:	0f 92       	push	r0
    4c30:	11 24       	eor	r1, r1
    4c32:	0b b6       	in	r0, 0x3b	; 59
    4c34:	0f 92       	push	r0
    4c36:	2f 93       	push	r18
    4c38:	3f 93       	push	r19
    4c3a:	4f 93       	push	r20
    4c3c:	5f 93       	push	r21
    4c3e:	6f 93       	push	r22
    4c40:	7f 93       	push	r23
    4c42:	8f 93       	push	r24
    4c44:	9f 93       	push	r25
    4c46:	af 93       	push	r26
    4c48:	bf 93       	push	r27
    4c4a:	cf 93       	push	r28
    4c4c:	df 93       	push	r29
    4c4e:	ef 93       	push	r30
    4c50:	ff 93       	push	r31
    4c52:	a0 91 cf 12 	lds	r26, 0x12CF	; 0x8012cf <_ser_handle>
    4c56:	b0 91 d0 12 	lds	r27, 0x12D0	; 0x8012d0 <_ser_handle+0x1>
    4c5a:	10 97       	sbiw	r26, 0x00	; 0
    4c5c:	11 f1       	breq	.+68     	; 0x4ca2 <__vector_25+0x7a>
    4c5e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4c62:	14 96       	adiw	r26, 0x04	; 4
    4c64:	ed 91       	ld	r30, X+
    4c66:	fc 91       	ld	r31, X
    4c68:	15 97       	sbiw	r26, 0x05	; 5
    4c6a:	93 81       	ldd	r25, Z+3	; 0x03
    4c6c:	82 81       	ldd	r24, Z+2	; 0x02
    4c6e:	25 81       	ldd	r18, Z+5	; 0x05
    4c70:	98 1b       	sub	r25, r24
    4c72:	92 23       	and	r25, r18
    4c74:	84 81       	ldd	r24, Z+4	; 0x04
    4c76:	98 17       	cp	r25, r24
    4c78:	61 f0       	breq	.+24     	; 0x4c92 <__vector_25+0x6a>
    4c7a:	83 81       	ldd	r24, Z+3	; 0x03
    4c7c:	26 95       	lsr	r18
    4c7e:	28 23       	and	r18, r24
    4c80:	c0 81       	ld	r28, Z
    4c82:	d1 81       	ldd	r29, Z+1	; 0x01
    4c84:	c2 0f       	add	r28, r18
    4c86:	d1 1d       	adc	r29, r1
    4c88:	68 83       	st	Y, r22
    4c8a:	8f 5f       	subi	r24, 0xFF	; 255
    4c8c:	95 81       	ldd	r25, Z+5	; 0x05
    4c8e:	89 23       	and	r24, r25
    4c90:	83 83       	std	Z+3, r24	; 0x03
    4c92:	16 96       	adiw	r26, 0x06	; 6
    4c94:	ed 91       	ld	r30, X+
    4c96:	fc 91       	ld	r31, X
    4c98:	17 97       	sbiw	r26, 0x07	; 7
    4c9a:	30 97       	sbiw	r30, 0x00	; 0
    4c9c:	11 f0       	breq	.+4      	; 0x4ca2 <__vector_25+0x7a>
    4c9e:	cd 01       	movw	r24, r26
    4ca0:	19 95       	eicall
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	bf 91       	pop	r27
    4cac:	af 91       	pop	r26
    4cae:	9f 91       	pop	r25
    4cb0:	8f 91       	pop	r24
    4cb2:	7f 91       	pop	r23
    4cb4:	6f 91       	pop	r22
    4cb6:	5f 91       	pop	r21
    4cb8:	4f 91       	pop	r20
    4cba:	3f 91       	pop	r19
    4cbc:	2f 91       	pop	r18
    4cbe:	0f 90       	pop	r0
    4cc0:	0b be       	out	0x3b, r0	; 59
    4cc2:	0f 90       	pop	r0
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	0f 90       	pop	r0
    4cc8:	1f 90       	pop	r1
    4cca:	18 95       	reti

00004ccc <__vector_26>:
    4ccc:	1f 92       	push	r1
    4cce:	0f 92       	push	r0
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	0f 92       	push	r0
    4cd4:	11 24       	eor	r1, r1
    4cd6:	0b b6       	in	r0, 0x3b	; 59
    4cd8:	0f 92       	push	r0
    4cda:	2f 93       	push	r18
    4cdc:	8f 93       	push	r24
    4cde:	9f 93       	push	r25
    4ce0:	af 93       	push	r26
    4ce2:	bf 93       	push	r27
    4ce4:	ef 93       	push	r30
    4ce6:	ff 93       	push	r31
    4ce8:	e0 91 cf 12 	lds	r30, 0x12CF	; 0x8012cf <_ser_handle>
    4cec:	f0 91 d0 12 	lds	r31, 0x12D0	; 0x8012d0 <_ser_handle+0x1>
    4cf0:	30 97       	sbiw	r30, 0x00	; 0
    4cf2:	b9 f0       	breq	.+46     	; 0x4d22 <__vector_26+0x56>
    4cf4:	02 80       	ldd	r0, Z+2	; 0x02
    4cf6:	f3 81       	ldd	r31, Z+3	; 0x03
    4cf8:	e0 2d       	mov	r30, r0
    4cfa:	93 81       	ldd	r25, Z+3	; 0x03
    4cfc:	82 81       	ldd	r24, Z+2	; 0x02
    4cfe:	98 17       	cp	r25, r24
    4d00:	b1 f0       	breq	.+44     	; 0x4d2e <__vector_26+0x62>
    4d02:	92 81       	ldd	r25, Z+2	; 0x02
    4d04:	85 81       	ldd	r24, Z+5	; 0x05
    4d06:	28 2f       	mov	r18, r24
    4d08:	26 95       	lsr	r18
    4d0a:	29 23       	and	r18, r25
    4d0c:	a0 81       	ld	r26, Z
    4d0e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d10:	a2 0f       	add	r26, r18
    4d12:	b1 1d       	adc	r27, r1
    4d14:	2c 91       	ld	r18, X
    4d16:	9f 5f       	subi	r25, 0xFF	; 255
    4d18:	89 23       	and	r24, r25
    4d1a:	82 83       	std	Z+2, r24	; 0x02
    4d1c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4d20:	0b c0       	rjmp	.+22     	; 0x4d38 <__vector_26+0x6c>
    4d22:	e1 ec       	ldi	r30, 0xC1	; 193
    4d24:	f0 e0       	ldi	r31, 0x00	; 0
    4d26:	80 81       	ld	r24, Z
    4d28:	8f 7d       	andi	r24, 0xDF	; 223
    4d2a:	80 83       	st	Z, r24
    4d2c:	05 c0       	rjmp	.+10     	; 0x4d38 <__vector_26+0x6c>
    4d2e:	e1 ec       	ldi	r30, 0xC1	; 193
    4d30:	f0 e0       	ldi	r31, 0x00	; 0
    4d32:	80 81       	ld	r24, Z
    4d34:	8f 7d       	andi	r24, 0xDF	; 223
    4d36:	80 83       	st	Z, r24
    4d38:	ff 91       	pop	r31
    4d3a:	ef 91       	pop	r30
    4d3c:	bf 91       	pop	r27
    4d3e:	af 91       	pop	r26
    4d40:	9f 91       	pop	r25
    4d42:	8f 91       	pop	r24
    4d44:	2f 91       	pop	r18
    4d46:	0f 90       	pop	r0
    4d48:	0b be       	out	0x3b, r0	; 59
    4d4a:	0f 90       	pop	r0
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	0f 90       	pop	r0
    4d50:	1f 90       	pop	r1
    4d52:	18 95       	reti

00004d54 <__vector_36>:
    4d54:	1f 92       	push	r1
    4d56:	0f 92       	push	r0
    4d58:	0f b6       	in	r0, 0x3f	; 63
    4d5a:	0f 92       	push	r0
    4d5c:	11 24       	eor	r1, r1
    4d5e:	0b b6       	in	r0, 0x3b	; 59
    4d60:	0f 92       	push	r0
    4d62:	2f 93       	push	r18
    4d64:	3f 93       	push	r19
    4d66:	4f 93       	push	r20
    4d68:	5f 93       	push	r21
    4d6a:	6f 93       	push	r22
    4d6c:	7f 93       	push	r23
    4d6e:	8f 93       	push	r24
    4d70:	9f 93       	push	r25
    4d72:	af 93       	push	r26
    4d74:	bf 93       	push	r27
    4d76:	cf 93       	push	r28
    4d78:	df 93       	push	r29
    4d7a:	ef 93       	push	r30
    4d7c:	ff 93       	push	r31
    4d7e:	a0 91 d1 12 	lds	r26, 0x12D1	; 0x8012d1 <_ser_handle+0x2>
    4d82:	b0 91 d2 12 	lds	r27, 0x12D2	; 0x8012d2 <_ser_handle+0x3>
    4d86:	10 97       	sbiw	r26, 0x00	; 0
    4d88:	11 f1       	breq	.+68     	; 0x4dce <__vector_36+0x7a>
    4d8a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4d8e:	14 96       	adiw	r26, 0x04	; 4
    4d90:	ed 91       	ld	r30, X+
    4d92:	fc 91       	ld	r31, X
    4d94:	15 97       	sbiw	r26, 0x05	; 5
    4d96:	93 81       	ldd	r25, Z+3	; 0x03
    4d98:	82 81       	ldd	r24, Z+2	; 0x02
    4d9a:	25 81       	ldd	r18, Z+5	; 0x05
    4d9c:	98 1b       	sub	r25, r24
    4d9e:	92 23       	and	r25, r18
    4da0:	84 81       	ldd	r24, Z+4	; 0x04
    4da2:	98 17       	cp	r25, r24
    4da4:	61 f0       	breq	.+24     	; 0x4dbe <__vector_36+0x6a>
    4da6:	83 81       	ldd	r24, Z+3	; 0x03
    4da8:	26 95       	lsr	r18
    4daa:	28 23       	and	r18, r24
    4dac:	c0 81       	ld	r28, Z
    4dae:	d1 81       	ldd	r29, Z+1	; 0x01
    4db0:	c2 0f       	add	r28, r18
    4db2:	d1 1d       	adc	r29, r1
    4db4:	68 83       	st	Y, r22
    4db6:	8f 5f       	subi	r24, 0xFF	; 255
    4db8:	95 81       	ldd	r25, Z+5	; 0x05
    4dba:	89 23       	and	r24, r25
    4dbc:	83 83       	std	Z+3, r24	; 0x03
    4dbe:	16 96       	adiw	r26, 0x06	; 6
    4dc0:	ed 91       	ld	r30, X+
    4dc2:	fc 91       	ld	r31, X
    4dc4:	17 97       	sbiw	r26, 0x07	; 7
    4dc6:	30 97       	sbiw	r30, 0x00	; 0
    4dc8:	11 f0       	breq	.+4      	; 0x4dce <__vector_36+0x7a>
    4dca:	cd 01       	movw	r24, r26
    4dcc:	19 95       	eicall
    4dce:	ff 91       	pop	r31
    4dd0:	ef 91       	pop	r30
    4dd2:	df 91       	pop	r29
    4dd4:	cf 91       	pop	r28
    4dd6:	bf 91       	pop	r27
    4dd8:	af 91       	pop	r26
    4dda:	9f 91       	pop	r25
    4ddc:	8f 91       	pop	r24
    4dde:	7f 91       	pop	r23
    4de0:	6f 91       	pop	r22
    4de2:	5f 91       	pop	r21
    4de4:	4f 91       	pop	r20
    4de6:	3f 91       	pop	r19
    4de8:	2f 91       	pop	r18
    4dea:	0f 90       	pop	r0
    4dec:	0b be       	out	0x3b, r0	; 59
    4dee:	0f 90       	pop	r0
    4df0:	0f be       	out	0x3f, r0	; 63
    4df2:	0f 90       	pop	r0
    4df4:	1f 90       	pop	r1
    4df6:	18 95       	reti

00004df8 <__vector_37>:
    4df8:	1f 92       	push	r1
    4dfa:	0f 92       	push	r0
    4dfc:	0f b6       	in	r0, 0x3f	; 63
    4dfe:	0f 92       	push	r0
    4e00:	11 24       	eor	r1, r1
    4e02:	0b b6       	in	r0, 0x3b	; 59
    4e04:	0f 92       	push	r0
    4e06:	2f 93       	push	r18
    4e08:	8f 93       	push	r24
    4e0a:	9f 93       	push	r25
    4e0c:	af 93       	push	r26
    4e0e:	bf 93       	push	r27
    4e10:	ef 93       	push	r30
    4e12:	ff 93       	push	r31
    4e14:	e0 91 d1 12 	lds	r30, 0x12D1	; 0x8012d1 <_ser_handle+0x2>
    4e18:	f0 91 d2 12 	lds	r31, 0x12D2	; 0x8012d2 <_ser_handle+0x3>
    4e1c:	30 97       	sbiw	r30, 0x00	; 0
    4e1e:	b9 f0       	breq	.+46     	; 0x4e4e <__vector_37+0x56>
    4e20:	02 80       	ldd	r0, Z+2	; 0x02
    4e22:	f3 81       	ldd	r31, Z+3	; 0x03
    4e24:	e0 2d       	mov	r30, r0
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	82 81       	ldd	r24, Z+2	; 0x02
    4e2a:	98 17       	cp	r25, r24
    4e2c:	b1 f0       	breq	.+44     	; 0x4e5a <__vector_37+0x62>
    4e2e:	92 81       	ldd	r25, Z+2	; 0x02
    4e30:	85 81       	ldd	r24, Z+5	; 0x05
    4e32:	28 2f       	mov	r18, r24
    4e34:	26 95       	lsr	r18
    4e36:	29 23       	and	r18, r25
    4e38:	a0 81       	ld	r26, Z
    4e3a:	b1 81       	ldd	r27, Z+1	; 0x01
    4e3c:	a2 0f       	add	r26, r18
    4e3e:	b1 1d       	adc	r27, r1
    4e40:	2c 91       	ld	r18, X
    4e42:	9f 5f       	subi	r25, 0xFF	; 255
    4e44:	89 23       	and	r24, r25
    4e46:	82 83       	std	Z+2, r24	; 0x02
    4e48:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4e4c:	0b c0       	rjmp	.+22     	; 0x4e64 <__vector_37+0x6c>
    4e4e:	e9 ec       	ldi	r30, 0xC9	; 201
    4e50:	f0 e0       	ldi	r31, 0x00	; 0
    4e52:	80 81       	ld	r24, Z
    4e54:	8f 7d       	andi	r24, 0xDF	; 223
    4e56:	80 83       	st	Z, r24
    4e58:	05 c0       	rjmp	.+10     	; 0x4e64 <__vector_37+0x6c>
    4e5a:	e9 ec       	ldi	r30, 0xC9	; 201
    4e5c:	f0 e0       	ldi	r31, 0x00	; 0
    4e5e:	80 81       	ld	r24, Z
    4e60:	8f 7d       	andi	r24, 0xDF	; 223
    4e62:	80 83       	st	Z, r24
    4e64:	ff 91       	pop	r31
    4e66:	ef 91       	pop	r30
    4e68:	bf 91       	pop	r27
    4e6a:	af 91       	pop	r26
    4e6c:	9f 91       	pop	r25
    4e6e:	8f 91       	pop	r24
    4e70:	2f 91       	pop	r18
    4e72:	0f 90       	pop	r0
    4e74:	0b be       	out	0x3b, r0	; 59
    4e76:	0f 90       	pop	r0
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	0f 90       	pop	r0
    4e7c:	1f 90       	pop	r1
    4e7e:	18 95       	reti

00004e80 <__vector_51>:
    4e80:	1f 92       	push	r1
    4e82:	0f 92       	push	r0
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	0f 92       	push	r0
    4e88:	11 24       	eor	r1, r1
    4e8a:	0b b6       	in	r0, 0x3b	; 59
    4e8c:	0f 92       	push	r0
    4e8e:	2f 93       	push	r18
    4e90:	3f 93       	push	r19
    4e92:	4f 93       	push	r20
    4e94:	5f 93       	push	r21
    4e96:	6f 93       	push	r22
    4e98:	7f 93       	push	r23
    4e9a:	8f 93       	push	r24
    4e9c:	9f 93       	push	r25
    4e9e:	af 93       	push	r26
    4ea0:	bf 93       	push	r27
    4ea2:	cf 93       	push	r28
    4ea4:	df 93       	push	r29
    4ea6:	ef 93       	push	r30
    4ea8:	ff 93       	push	r31
    4eaa:	a0 91 d3 12 	lds	r26, 0x12D3	; 0x8012d3 <_ser_handle+0x4>
    4eae:	b0 91 d4 12 	lds	r27, 0x12D4	; 0x8012d4 <_ser_handle+0x5>
    4eb2:	10 97       	sbiw	r26, 0x00	; 0
    4eb4:	11 f1       	breq	.+68     	; 0x4efa <__vector_51+0x7a>
    4eb6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4eba:	14 96       	adiw	r26, 0x04	; 4
    4ebc:	ed 91       	ld	r30, X+
    4ebe:	fc 91       	ld	r31, X
    4ec0:	15 97       	sbiw	r26, 0x05	; 5
    4ec2:	93 81       	ldd	r25, Z+3	; 0x03
    4ec4:	82 81       	ldd	r24, Z+2	; 0x02
    4ec6:	25 81       	ldd	r18, Z+5	; 0x05
    4ec8:	98 1b       	sub	r25, r24
    4eca:	92 23       	and	r25, r18
    4ecc:	84 81       	ldd	r24, Z+4	; 0x04
    4ece:	98 17       	cp	r25, r24
    4ed0:	61 f0       	breq	.+24     	; 0x4eea <__vector_51+0x6a>
    4ed2:	83 81       	ldd	r24, Z+3	; 0x03
    4ed4:	26 95       	lsr	r18
    4ed6:	28 23       	and	r18, r24
    4ed8:	c0 81       	ld	r28, Z
    4eda:	d1 81       	ldd	r29, Z+1	; 0x01
    4edc:	c2 0f       	add	r28, r18
    4ede:	d1 1d       	adc	r29, r1
    4ee0:	68 83       	st	Y, r22
    4ee2:	8f 5f       	subi	r24, 0xFF	; 255
    4ee4:	95 81       	ldd	r25, Z+5	; 0x05
    4ee6:	89 23       	and	r24, r25
    4ee8:	83 83       	std	Z+3, r24	; 0x03
    4eea:	16 96       	adiw	r26, 0x06	; 6
    4eec:	ed 91       	ld	r30, X+
    4eee:	fc 91       	ld	r31, X
    4ef0:	17 97       	sbiw	r26, 0x07	; 7
    4ef2:	30 97       	sbiw	r30, 0x00	; 0
    4ef4:	11 f0       	breq	.+4      	; 0x4efa <__vector_51+0x7a>
    4ef6:	cd 01       	movw	r24, r26
    4ef8:	19 95       	eicall
    4efa:	ff 91       	pop	r31
    4efc:	ef 91       	pop	r30
    4efe:	df 91       	pop	r29
    4f00:	cf 91       	pop	r28
    4f02:	bf 91       	pop	r27
    4f04:	af 91       	pop	r26
    4f06:	9f 91       	pop	r25
    4f08:	8f 91       	pop	r24
    4f0a:	7f 91       	pop	r23
    4f0c:	6f 91       	pop	r22
    4f0e:	5f 91       	pop	r21
    4f10:	4f 91       	pop	r20
    4f12:	3f 91       	pop	r19
    4f14:	2f 91       	pop	r18
    4f16:	0f 90       	pop	r0
    4f18:	0b be       	out	0x3b, r0	; 59
    4f1a:	0f 90       	pop	r0
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	0f 90       	pop	r0
    4f20:	1f 90       	pop	r1
    4f22:	18 95       	reti

00004f24 <__vector_52>:
    4f24:	1f 92       	push	r1
    4f26:	0f 92       	push	r0
    4f28:	0f b6       	in	r0, 0x3f	; 63
    4f2a:	0f 92       	push	r0
    4f2c:	11 24       	eor	r1, r1
    4f2e:	0b b6       	in	r0, 0x3b	; 59
    4f30:	0f 92       	push	r0
    4f32:	2f 93       	push	r18
    4f34:	8f 93       	push	r24
    4f36:	9f 93       	push	r25
    4f38:	af 93       	push	r26
    4f3a:	bf 93       	push	r27
    4f3c:	ef 93       	push	r30
    4f3e:	ff 93       	push	r31
    4f40:	e0 91 d3 12 	lds	r30, 0x12D3	; 0x8012d3 <_ser_handle+0x4>
    4f44:	f0 91 d4 12 	lds	r31, 0x12D4	; 0x8012d4 <_ser_handle+0x5>
    4f48:	30 97       	sbiw	r30, 0x00	; 0
    4f4a:	b9 f0       	breq	.+46     	; 0x4f7a <__vector_52+0x56>
    4f4c:	02 80       	ldd	r0, Z+2	; 0x02
    4f4e:	f3 81       	ldd	r31, Z+3	; 0x03
    4f50:	e0 2d       	mov	r30, r0
    4f52:	93 81       	ldd	r25, Z+3	; 0x03
    4f54:	82 81       	ldd	r24, Z+2	; 0x02
    4f56:	98 17       	cp	r25, r24
    4f58:	b1 f0       	breq	.+44     	; 0x4f86 <__vector_52+0x62>
    4f5a:	92 81       	ldd	r25, Z+2	; 0x02
    4f5c:	85 81       	ldd	r24, Z+5	; 0x05
    4f5e:	28 2f       	mov	r18, r24
    4f60:	26 95       	lsr	r18
    4f62:	29 23       	and	r18, r25
    4f64:	a0 81       	ld	r26, Z
    4f66:	b1 81       	ldd	r27, Z+1	; 0x01
    4f68:	a2 0f       	add	r26, r18
    4f6a:	b1 1d       	adc	r27, r1
    4f6c:	2c 91       	ld	r18, X
    4f6e:	9f 5f       	subi	r25, 0xFF	; 255
    4f70:	89 23       	and	r24, r25
    4f72:	82 83       	std	Z+2, r24	; 0x02
    4f74:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4f78:	0b c0       	rjmp	.+22     	; 0x4f90 <__vector_52+0x6c>
    4f7a:	e1 ed       	ldi	r30, 0xD1	; 209
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	80 81       	ld	r24, Z
    4f80:	8f 7d       	andi	r24, 0xDF	; 223
    4f82:	80 83       	st	Z, r24
    4f84:	05 c0       	rjmp	.+10     	; 0x4f90 <__vector_52+0x6c>
    4f86:	e1 ed       	ldi	r30, 0xD1	; 209
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	80 81       	ld	r24, Z
    4f8c:	8f 7d       	andi	r24, 0xDF	; 223
    4f8e:	80 83       	st	Z, r24
    4f90:	ff 91       	pop	r31
    4f92:	ef 91       	pop	r30
    4f94:	bf 91       	pop	r27
    4f96:	af 91       	pop	r26
    4f98:	9f 91       	pop	r25
    4f9a:	8f 91       	pop	r24
    4f9c:	2f 91       	pop	r18
    4f9e:	0f 90       	pop	r0
    4fa0:	0b be       	out	0x3b, r0	; 59
    4fa2:	0f 90       	pop	r0
    4fa4:	0f be       	out	0x3f, r0	; 63
    4fa6:	0f 90       	pop	r0
    4fa8:	1f 90       	pop	r1
    4faa:	18 95       	reti

00004fac <__vector_54>:
    4fac:	1f 92       	push	r1
    4fae:	0f 92       	push	r0
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	0f 92       	push	r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	0b b6       	in	r0, 0x3b	; 59
    4fb8:	0f 92       	push	r0
    4fba:	2f 93       	push	r18
    4fbc:	3f 93       	push	r19
    4fbe:	4f 93       	push	r20
    4fc0:	5f 93       	push	r21
    4fc2:	6f 93       	push	r22
    4fc4:	7f 93       	push	r23
    4fc6:	8f 93       	push	r24
    4fc8:	9f 93       	push	r25
    4fca:	af 93       	push	r26
    4fcc:	bf 93       	push	r27
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	ef 93       	push	r30
    4fd4:	ff 93       	push	r31
    4fd6:	a0 91 d5 12 	lds	r26, 0x12D5	; 0x8012d5 <_ser_handle+0x6>
    4fda:	b0 91 d6 12 	lds	r27, 0x12D6	; 0x8012d6 <_ser_handle+0x7>
    4fde:	10 97       	sbiw	r26, 0x00	; 0
    4fe0:	11 f1       	breq	.+68     	; 0x5026 <__vector_54+0x7a>
    4fe2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4fe6:	14 96       	adiw	r26, 0x04	; 4
    4fe8:	ed 91       	ld	r30, X+
    4fea:	fc 91       	ld	r31, X
    4fec:	15 97       	sbiw	r26, 0x05	; 5
    4fee:	93 81       	ldd	r25, Z+3	; 0x03
    4ff0:	82 81       	ldd	r24, Z+2	; 0x02
    4ff2:	25 81       	ldd	r18, Z+5	; 0x05
    4ff4:	98 1b       	sub	r25, r24
    4ff6:	92 23       	and	r25, r18
    4ff8:	84 81       	ldd	r24, Z+4	; 0x04
    4ffa:	98 17       	cp	r25, r24
    4ffc:	61 f0       	breq	.+24     	; 0x5016 <__vector_54+0x6a>
    4ffe:	83 81       	ldd	r24, Z+3	; 0x03
    5000:	26 95       	lsr	r18
    5002:	28 23       	and	r18, r24
    5004:	c0 81       	ld	r28, Z
    5006:	d1 81       	ldd	r29, Z+1	; 0x01
    5008:	c2 0f       	add	r28, r18
    500a:	d1 1d       	adc	r29, r1
    500c:	68 83       	st	Y, r22
    500e:	8f 5f       	subi	r24, 0xFF	; 255
    5010:	95 81       	ldd	r25, Z+5	; 0x05
    5012:	89 23       	and	r24, r25
    5014:	83 83       	std	Z+3, r24	; 0x03
    5016:	16 96       	adiw	r26, 0x06	; 6
    5018:	ed 91       	ld	r30, X+
    501a:	fc 91       	ld	r31, X
    501c:	17 97       	sbiw	r26, 0x07	; 7
    501e:	30 97       	sbiw	r30, 0x00	; 0
    5020:	11 f0       	breq	.+4      	; 0x5026 <__vector_54+0x7a>
    5022:	cd 01       	movw	r24, r26
    5024:	19 95       	eicall
    5026:	ff 91       	pop	r31
    5028:	ef 91       	pop	r30
    502a:	df 91       	pop	r29
    502c:	cf 91       	pop	r28
    502e:	bf 91       	pop	r27
    5030:	af 91       	pop	r26
    5032:	9f 91       	pop	r25
    5034:	8f 91       	pop	r24
    5036:	7f 91       	pop	r23
    5038:	6f 91       	pop	r22
    503a:	5f 91       	pop	r21
    503c:	4f 91       	pop	r20
    503e:	3f 91       	pop	r19
    5040:	2f 91       	pop	r18
    5042:	0f 90       	pop	r0
    5044:	0b be       	out	0x3b, r0	; 59
    5046:	0f 90       	pop	r0
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	0f 90       	pop	r0
    504c:	1f 90       	pop	r1
    504e:	18 95       	reti

00005050 <__vector_55>:
    5050:	1f 92       	push	r1
    5052:	0f 92       	push	r0
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	0f 92       	push	r0
    5058:	11 24       	eor	r1, r1
    505a:	0b b6       	in	r0, 0x3b	; 59
    505c:	0f 92       	push	r0
    505e:	2f 93       	push	r18
    5060:	8f 93       	push	r24
    5062:	9f 93       	push	r25
    5064:	af 93       	push	r26
    5066:	bf 93       	push	r27
    5068:	ef 93       	push	r30
    506a:	ff 93       	push	r31
    506c:	e0 91 d5 12 	lds	r30, 0x12D5	; 0x8012d5 <_ser_handle+0x6>
    5070:	f0 91 d6 12 	lds	r31, 0x12D6	; 0x8012d6 <_ser_handle+0x7>
    5074:	30 97       	sbiw	r30, 0x00	; 0
    5076:	b9 f0       	breq	.+46     	; 0x50a6 <__vector_55+0x56>
    5078:	02 80       	ldd	r0, Z+2	; 0x02
    507a:	f3 81       	ldd	r31, Z+3	; 0x03
    507c:	e0 2d       	mov	r30, r0
    507e:	93 81       	ldd	r25, Z+3	; 0x03
    5080:	82 81       	ldd	r24, Z+2	; 0x02
    5082:	98 17       	cp	r25, r24
    5084:	b1 f0       	breq	.+44     	; 0x50b2 <__vector_55+0x62>
    5086:	92 81       	ldd	r25, Z+2	; 0x02
    5088:	85 81       	ldd	r24, Z+5	; 0x05
    508a:	28 2f       	mov	r18, r24
    508c:	26 95       	lsr	r18
    508e:	29 23       	and	r18, r25
    5090:	a0 81       	ld	r26, Z
    5092:	b1 81       	ldd	r27, Z+1	; 0x01
    5094:	a2 0f       	add	r26, r18
    5096:	b1 1d       	adc	r27, r1
    5098:	2c 91       	ld	r18, X
    509a:	9f 5f       	subi	r25, 0xFF	; 255
    509c:	89 23       	and	r24, r25
    509e:	82 83       	std	Z+2, r24	; 0x02
    50a0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    50a4:	0b c0       	rjmp	.+22     	; 0x50bc <__vector_55+0x6c>
    50a6:	e1 e3       	ldi	r30, 0x31	; 49
    50a8:	f1 e0       	ldi	r31, 0x01	; 1
    50aa:	80 81       	ld	r24, Z
    50ac:	8f 7d       	andi	r24, 0xDF	; 223
    50ae:	80 83       	st	Z, r24
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <__vector_55+0x6c>
    50b2:	e1 e3       	ldi	r30, 0x31	; 49
    50b4:	f1 e0       	ldi	r31, 0x01	; 1
    50b6:	80 81       	ld	r24, Z
    50b8:	8f 7d       	andi	r24, 0xDF	; 223
    50ba:	80 83       	st	Z, r24
    50bc:	ff 91       	pop	r31
    50be:	ef 91       	pop	r30
    50c0:	bf 91       	pop	r27
    50c2:	af 91       	pop	r26
    50c4:	9f 91       	pop	r25
    50c6:	8f 91       	pop	r24
    50c8:	2f 91       	pop	r18
    50ca:	0f 90       	pop	r0
    50cc:	0b be       	out	0x3b, r0	; 59
    50ce:	0f 90       	pop	r0
    50d0:	0f be       	out	0x3f, r0	; 63
    50d2:	0f 90       	pop	r0
    50d4:	1f 90       	pop	r1
    50d6:	18 95       	reti

000050d8 <usart_getchar>:
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	1f 92       	push	r1
    50de:	cd b7       	in	r28, 0x3d	; 61
    50e0:	de b7       	in	r29, 0x3e	; 62
    50e2:	be 01       	movw	r22, r28
    50e4:	6f 5f       	subi	r22, 0xFF	; 255
    50e6:	7f 4f       	sbci	r23, 0xFF	; 255
    50e8:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <_com_serial_instance>
    50ec:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <_com_serial_instance+0x1>
    50f0:	7b dd       	rcall	.-1290   	; 0x4be8 <serial_getByte>
    50f2:	81 11       	cpse	r24, r1
    50f4:	f6 cf       	rjmp	.-20     	; 0x50e2 <usart_getchar+0xa>
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	0f 90       	pop	r0
    50fc:	df 91       	pop	r29
    50fe:	cf 91       	pop	r28
    5100:	08 95       	ret

00005102 <usart_putchar>:
    5102:	68 2f       	mov	r22, r24
    5104:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <_com_serial_instance>
    5108:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <_com_serial_instance+0x1>
    510c:	ed dc       	rcall	.-1574   	; 0x4ae8 <serial_sendByte>
    510e:	80 e0       	ldi	r24, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	08 95       	ret

00005114 <stdio_initialise>:
    5114:	8f 92       	push	r8
    5116:	9f 92       	push	r9
    5118:	af 92       	push	r10
    511a:	cf 92       	push	r12
    511c:	ef 92       	push	r14
    511e:	0f 93       	push	r16
    5120:	81 2c       	mov	r8, r1
    5122:	91 2c       	mov	r9, r1
    5124:	68 94       	set
    5126:	aa 24       	eor	r10, r10
    5128:	a7 f8       	bld	r10, 7
    512a:	68 94       	set
    512c:	cc 24       	eor	r12, r12
    512e:	c7 f8       	bld	r12, 7
    5130:	e1 2c       	mov	r14, r1
    5132:	00 e0       	ldi	r16, 0x00	; 0
    5134:	23 e0       	ldi	r18, 0x03	; 3
    5136:	40 e0       	ldi	r20, 0x00	; 0
    5138:	51 ee       	ldi	r21, 0xE1	; 225
    513a:	60 e0       	ldi	r22, 0x00	; 0
    513c:	70 e0       	ldi	r23, 0x00	; 0
    513e:	31 dc       	rcall	.-1950   	; 0x49a2 <serial_create>
    5140:	90 93 d8 12 	sts	0x12D8, r25	; 0x8012d8 <_com_serial_instance+0x1>
    5144:	80 93 d7 12 	sts	0x12D7, r24	; 0x8012d7 <_com_serial_instance>
    5148:	ef ef       	ldi	r30, 0xFF	; 255
    514a:	f2 e1       	ldi	r31, 0x12	; 18
    514c:	83 e1       	ldi	r24, 0x13	; 19
    514e:	92 e0       	ldi	r25, 0x02	; 2
    5150:	91 83       	std	Z+1, r25	; 0x01
    5152:	80 83       	st	Z, r24
    5154:	93 83       	std	Z+3, r25	; 0x03
    5156:	82 83       	std	Z+2, r24	; 0x02
    5158:	0f 91       	pop	r16
    515a:	ef 90       	pop	r14
    515c:	cf 90       	pop	r12
    515e:	af 90       	pop	r10
    5160:	9f 90       	pop	r9
    5162:	8f 90       	pop	r8
    5164:	08 95       	ret

00005166 <_initTwiInterface>:
    5166:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <_twiIsInitiated>
    516a:	81 11       	cpse	r24, r1
    516c:	0c c0       	rjmp	.+24     	; 0x5186 <_initTwiInterface+0x20>
    516e:	8c e0       	ldi	r24, 0x0C	; 12
    5170:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5174:	8f ef       	ldi	r24, 0xFF	; 255
    5176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    517a:	84 e0       	ldi	r24, 0x04	; 4
    517c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	80 93 e7 12 	sts	0x12E7, r24	; 0x8012e7 <_twiIsInitiated>
    5186:	08 95       	ret

00005188 <twiCreate>:
    5188:	af 92       	push	r10
    518a:	bf 92       	push	r11
    518c:	cf 92       	push	r12
    518e:	df 92       	push	r13
    5190:	ef 92       	push	r14
    5192:	ff 92       	push	r15
    5194:	0f 93       	push	r16
    5196:	1f 93       	push	r17
    5198:	cf 93       	push	r28
    519a:	df 93       	push	r29
    519c:	a8 2e       	mov	r10, r24
    519e:	b6 2e       	mov	r11, r22
    51a0:	69 01       	movw	r12, r18
    51a2:	7a 01       	movw	r14, r20
    51a4:	84 e0       	ldi	r24, 0x04	; 4
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	f9 d5       	rcall	.+3058   	; 0x5d9c <malloc>
    51aa:	ec 01       	movw	r28, r24
    51ac:	89 2b       	or	r24, r25
    51ae:	61 f1       	breq	.+88     	; 0x5208 <twiCreate+0x80>
    51b0:	a8 82       	st	Y, r10
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	b8 12       	cpse	r11, r24
    51b6:	12 c0       	rjmp	.+36     	; 0x51dc <twiCreate+0x54>
    51b8:	c7 01       	movw	r24, r14
    51ba:	b6 01       	movw	r22, r12
    51bc:	20 ea       	ldi	r18, 0xA0	; 160
    51be:	36 e8       	ldi	r19, 0x86	; 134
    51c0:	41 e0       	ldi	r20, 0x01	; 1
    51c2:	50 e0       	ldi	r21, 0x00	; 0
    51c4:	c1 d5       	rcall	.+2946   	; 0x5d48 <__udivmodsi4>
    51c6:	da 01       	movw	r26, r20
    51c8:	c9 01       	movw	r24, r18
    51ca:	40 97       	sbiw	r24, 0x10	; 16
    51cc:	a1 09       	sbc	r26, r1
    51ce:	b1 09       	sbc	r27, r1
    51d0:	b6 95       	lsr	r27
    51d2:	a7 95       	ror	r26
    51d4:	97 95       	ror	r25
    51d6:	87 95       	ror	r24
    51d8:	89 83       	std	Y+1, r24	; 0x01
    51da:	11 c0       	rjmp	.+34     	; 0x51fe <twiCreate+0x76>
    51dc:	c7 01       	movw	r24, r14
    51de:	b6 01       	movw	r22, r12
    51e0:	20 e8       	ldi	r18, 0x80	; 128
    51e2:	3a e1       	ldi	r19, 0x1A	; 26
    51e4:	46 e0       	ldi	r20, 0x06	; 6
    51e6:	50 e0       	ldi	r21, 0x00	; 0
    51e8:	af d5       	rcall	.+2910   	; 0x5d48 <__udivmodsi4>
    51ea:	da 01       	movw	r26, r20
    51ec:	c9 01       	movw	r24, r18
    51ee:	40 97       	sbiw	r24, 0x10	; 16
    51f0:	a1 09       	sbc	r26, r1
    51f2:	b1 09       	sbc	r27, r1
    51f4:	b6 95       	lsr	r27
    51f6:	a7 95       	ror	r26
    51f8:	97 95       	ror	r25
    51fa:	87 95       	ror	r24
    51fc:	89 83       	std	Y+1, r24	; 0x01
    51fe:	1b 83       	std	Y+3, r17	; 0x03
    5200:	0a 83       	std	Y+2, r16	; 0x02
    5202:	8c 2f       	mov	r24, r28
    5204:	9d 2f       	mov	r25, r29
    5206:	02 c0       	rjmp	.+4      	; 0x520c <twiCreate+0x84>
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	df 91       	pop	r29
    520e:	cf 91       	pop	r28
    5210:	1f 91       	pop	r17
    5212:	0f 91       	pop	r16
    5214:	ff 90       	pop	r15
    5216:	ef 90       	pop	r14
    5218:	df 90       	pop	r13
    521a:	cf 90       	pop	r12
    521c:	bf 90       	pop	r11
    521e:	af 90       	pop	r10
    5220:	08 95       	ret

00005222 <twiIsBusy>:
    5222:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5226:	81 70       	andi	r24, 0x01	; 1
    5228:	08 95       	ret

0000522a <twiTransmit>:
    522a:	ff 92       	push	r15
    522c:	0f 93       	push	r16
    522e:	1f 93       	push	r17
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	00 97       	sbiw	r24, 0x00	; 0
    5236:	d1 f1       	breq	.+116    	; 0x52ac <twiTransmit+0x82>
    5238:	4a 30       	cpi	r20, 0x0A	; 10
    523a:	d0 f5       	brcc	.+116    	; 0x52b0 <twiTransmit+0x86>
    523c:	f4 2e       	mov	r15, r20
    523e:	8b 01       	movw	r16, r22
    5240:	ec 01       	movw	r28, r24
    5242:	ef df       	rcall	.-34     	; 0x5222 <twiIsBusy>
    5244:	81 11       	cpse	r24, r1
    5246:	36 c0       	rjmp	.+108    	; 0x52b4 <twiTransmit+0x8a>
    5248:	80 91 da 12 	lds	r24, 0x12DA	; 0x8012da <_twiCurrentHandler>
    524c:	90 91 db 12 	lds	r25, 0x12DB	; 0x8012db <_twiCurrentHandler+0x1>
    5250:	c8 17       	cp	r28, r24
    5252:	d9 07       	cpc	r29, r25
    5254:	41 f0       	breq	.+16     	; 0x5266 <twiTransmit+0x3c>
    5256:	87 df       	rcall	.-242    	; 0x5166 <_initTwiInterface>
    5258:	89 81       	ldd	r24, Y+1	; 0x01
    525a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    525e:	d0 93 db 12 	sts	0x12DB, r29	; 0x8012db <_twiCurrentHandler+0x1>
    5262:	c0 93 da 12 	sts	0x12DA, r28	; 0x8012da <_twiCurrentHandler>
    5266:	81 e0       	ldi	r24, 0x01	; 1
    5268:	8f 0d       	add	r24, r15
    526a:	80 93 dc 12 	sts	0x12DC, r24	; 0x8012dc <_twiMessageLen>
    526e:	88 81       	ld	r24, Y
    5270:	88 0f       	add	r24, r24
    5272:	80 93 dd 12 	sts	0x12DD, r24	; 0x8012dd <_twiMessageBuffer>
    5276:	ff 20       	and	r15, r15
    5278:	89 f0       	breq	.+34     	; 0x529c <twiTransmit+0x72>
    527a:	f8 01       	movw	r30, r16
    527c:	ae ed       	ldi	r26, 0xDE	; 222
    527e:	b2 e1       	ldi	r27, 0x12	; 18
    5280:	4f ef       	ldi	r20, 0xFF	; 255
    5282:	4f 0d       	add	r20, r15
    5284:	64 2f       	mov	r22, r20
    5286:	70 e0       	ldi	r23, 0x00	; 0
    5288:	cb 01       	movw	r24, r22
    528a:	01 96       	adiw	r24, 0x01	; 1
    528c:	b8 01       	movw	r22, r16
    528e:	68 0f       	add	r22, r24
    5290:	79 1f       	adc	r23, r25
    5292:	81 91       	ld	r24, Z+
    5294:	8d 93       	st	X+, r24
    5296:	e6 17       	cp	r30, r22
    5298:	f7 07       	cpc	r31, r23
    529a:	d9 f7       	brne	.-10     	; 0x5292 <twiTransmit+0x68>
    529c:	88 ef       	ldi	r24, 0xF8	; 248
    529e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    52a2:	85 ea       	ldi	r24, 0xA5	; 165
    52a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52a8:	84 e0       	ldi	r24, 0x04	; 4
    52aa:	05 c0       	rjmp	.+10     	; 0x52b6 <twiTransmit+0x8c>
    52ac:	86 e0       	ldi	r24, 0x06	; 6
    52ae:	03 c0       	rjmp	.+6      	; 0x52b6 <twiTransmit+0x8c>
    52b0:	87 e0       	ldi	r24, 0x07	; 7
    52b2:	01 c0       	rjmp	.+2      	; 0x52b6 <twiTransmit+0x8c>
    52b4:	82 e0       	ldi	r24, 0x02	; 2
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	1f 91       	pop	r17
    52bc:	0f 91       	pop	r16
    52be:	ff 90       	pop	r15
    52c0:	08 95       	ret

000052c2 <twiReceive>:
    52c2:	1f 93       	push	r17
    52c4:	cf 93       	push	r28
    52c6:	df 93       	push	r29
    52c8:	00 97       	sbiw	r24, 0x00	; 0
    52ca:	29 f1       	breq	.+74     	; 0x5316 <twiReceive+0x54>
    52cc:	6b 30       	cpi	r22, 0x0B	; 11
    52ce:	28 f5       	brcc	.+74     	; 0x531a <twiReceive+0x58>
    52d0:	16 2f       	mov	r17, r22
    52d2:	ec 01       	movw	r28, r24
    52d4:	a6 df       	rcall	.-180    	; 0x5222 <twiIsBusy>
    52d6:	81 11       	cpse	r24, r1
    52d8:	22 c0       	rjmp	.+68     	; 0x531e <twiReceive+0x5c>
    52da:	80 91 da 12 	lds	r24, 0x12DA	; 0x8012da <_twiCurrentHandler>
    52de:	90 91 db 12 	lds	r25, 0x12DB	; 0x8012db <_twiCurrentHandler+0x1>
    52e2:	c8 17       	cp	r28, r24
    52e4:	d9 07       	cpc	r29, r25
    52e6:	41 f0       	breq	.+16     	; 0x52f8 <twiReceive+0x36>
    52e8:	3e df       	rcall	.-388    	; 0x5166 <_initTwiInterface>
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    52f0:	d0 93 db 12 	sts	0x12DB, r29	; 0x8012db <_twiCurrentHandler+0x1>
    52f4:	c0 93 da 12 	sts	0x12DA, r28	; 0x8012da <_twiCurrentHandler>
    52f8:	10 93 dc 12 	sts	0x12DC, r17	; 0x8012dc <_twiMessageLen>
    52fc:	88 81       	ld	r24, Y
    52fe:	88 0f       	add	r24, r24
    5300:	81 60       	ori	r24, 0x01	; 1
    5302:	80 93 dd 12 	sts	0x12DD, r24	; 0x8012dd <_twiMessageBuffer>
    5306:	88 ef       	ldi	r24, 0xF8	; 248
    5308:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    530c:	85 ea       	ldi	r24, 0xA5	; 165
    530e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5312:	85 e0       	ldi	r24, 0x05	; 5
    5314:	05 c0       	rjmp	.+10     	; 0x5320 <twiReceive+0x5e>
    5316:	86 e0       	ldi	r24, 0x06	; 6
    5318:	03 c0       	rjmp	.+6      	; 0x5320 <twiReceive+0x5e>
    531a:	87 e0       	ldi	r24, 0x07	; 7
    531c:	01 c0       	rjmp	.+2      	; 0x5320 <twiReceive+0x5e>
    531e:	82 e0       	ldi	r24, 0x02	; 2
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	08 95       	ret

00005328 <__vector_39>:
    5328:	1f 92       	push	r1
    532a:	0f 92       	push	r0
    532c:	0f b6       	in	r0, 0x3f	; 63
    532e:	0f 92       	push	r0
    5330:	11 24       	eor	r1, r1
    5332:	0b b6       	in	r0, 0x3b	; 59
    5334:	0f 92       	push	r0
    5336:	2f 93       	push	r18
    5338:	3f 93       	push	r19
    533a:	4f 93       	push	r20
    533c:	5f 93       	push	r21
    533e:	6f 93       	push	r22
    5340:	7f 93       	push	r23
    5342:	8f 93       	push	r24
    5344:	9f 93       	push	r25
    5346:	af 93       	push	r26
    5348:	bf 93       	push	r27
    534a:	ef 93       	push	r30
    534c:	ff 93       	push	r31
    534e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5352:	8e 2f       	mov	r24, r30
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	fc 01       	movw	r30, r24
    5358:	38 97       	sbiw	r30, 0x08	; 8
    535a:	e1 35       	cpi	r30, 0x51	; 81
    535c:	f1 05       	cpc	r31, r1
    535e:	08 f0       	brcs	.+2      	; 0x5362 <__vector_39+0x3a>
    5360:	75 c0       	rjmp	.+234    	; 0x544c <__vector_39+0x124>
    5362:	88 27       	eor	r24, r24
    5364:	e4 58       	subi	r30, 0x84	; 132
    5366:	ff 4f       	sbci	r31, 0xFF	; 255
    5368:	8f 4f       	sbci	r24, 0xFF	; 255
    536a:	10 c5       	rjmp	.+2592   	; 0x5d8c <__tablejump2__>
    536c:	10 92 d9 12 	sts	0x12D9, r1	; 0x8012d9 <_index.1885>
    5370:	e0 91 d9 12 	lds	r30, 0x12D9	; 0x8012d9 <_index.1885>
    5374:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_twiMessageLen>
    5378:	e8 17       	cp	r30, r24
    537a:	70 f4       	brcc	.+28     	; 0x5398 <__vector_39+0x70>
    537c:	81 e0       	ldi	r24, 0x01	; 1
    537e:	8e 0f       	add	r24, r30
    5380:	80 93 d9 12 	sts	0x12D9, r24	; 0x8012d9 <_index.1885>
    5384:	f0 e0       	ldi	r31, 0x00	; 0
    5386:	e3 52       	subi	r30, 0x23	; 35
    5388:	fd 4e       	sbci	r31, 0xED	; 237
    538a:	80 81       	ld	r24, Z
    538c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5390:	85 e8       	ldi	r24, 0x85	; 133
    5392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5396:	72 c0       	rjmp	.+228    	; 0x547c <__vector_39+0x154>
    5398:	84 e9       	ldi	r24, 0x94	; 148
    539a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    539e:	80 91 da 12 	lds	r24, 0x12DA	; 0x8012da <_twiCurrentHandler>
    53a2:	90 91 db 12 	lds	r25, 0x12DB	; 0x8012db <_twiCurrentHandler+0x1>
    53a6:	dc 01       	movw	r26, r24
    53a8:	12 96       	adiw	r26, 0x02	; 2
    53aa:	ed 91       	ld	r30, X+
    53ac:	fc 91       	ld	r31, X
    53ae:	13 97       	sbiw	r26, 0x03	; 3
    53b0:	30 97       	sbiw	r30, 0x00	; 0
    53b2:	09 f4       	brne	.+2      	; 0x53b6 <__vector_39+0x8e>
    53b4:	63 c0       	rjmp	.+198    	; 0x547c <__vector_39+0x154>
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	40 e0       	ldi	r20, 0x00	; 0
    53ba:	50 e0       	ldi	r21, 0x00	; 0
    53bc:	64 e0       	ldi	r22, 0x04	; 4
    53be:	19 95       	eicall
    53c0:	5d c0       	rjmp	.+186    	; 0x547c <__vector_39+0x154>
    53c2:	e0 91 d9 12 	lds	r30, 0x12D9	; 0x8012d9 <_index.1885>
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	8e 0f       	add	r24, r30
    53ca:	80 93 d9 12 	sts	0x12D9, r24	; 0x8012d9 <_index.1885>
    53ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	e3 52       	subi	r30, 0x23	; 35
    53d6:	fd 4e       	sbci	r31, 0xED	; 237
    53d8:	80 83       	st	Z, r24
    53da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    53de:	80 34       	cpi	r24, 0x40	; 64
    53e0:	11 f4       	brne	.+4      	; 0x53e6 <__vector_39+0xbe>
    53e2:	10 92 d9 12 	sts	0x12D9, r1	; 0x8012d9 <_index.1885>
    53e6:	20 91 d9 12 	lds	r18, 0x12D9	; 0x8012d9 <_index.1885>
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_twiMessageLen>
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	01 97       	sbiw	r24, 0x01	; 1
    53f4:	28 17       	cp	r18, r24
    53f6:	39 07       	cpc	r19, r25
    53f8:	24 f4       	brge	.+8      	; 0x5402 <__vector_39+0xda>
    53fa:	85 ec       	ldi	r24, 0xC5	; 197
    53fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5400:	3d c0       	rjmp	.+122    	; 0x547c <__vector_39+0x154>
    5402:	85 e8       	ldi	r24, 0x85	; 133
    5404:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5408:	39 c0       	rjmp	.+114    	; 0x547c <__vector_39+0x154>
    540a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    540e:	e0 91 d9 12 	lds	r30, 0x12D9	; 0x8012d9 <_index.1885>
    5412:	f0 e0       	ldi	r31, 0x00	; 0
    5414:	e3 52       	subi	r30, 0x23	; 35
    5416:	fd 4e       	sbci	r31, 0xED	; 237
    5418:	80 83       	st	Z, r24
    541a:	84 e9       	ldi	r24, 0x94	; 148
    541c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5420:	80 91 da 12 	lds	r24, 0x12DA	; 0x8012da <_twiCurrentHandler>
    5424:	90 91 db 12 	lds	r25, 0x12DB	; 0x8012db <_twiCurrentHandler+0x1>
    5428:	dc 01       	movw	r26, r24
    542a:	12 96       	adiw	r26, 0x02	; 2
    542c:	ed 91       	ld	r30, X+
    542e:	fc 91       	ld	r31, X
    5430:	13 97       	sbiw	r26, 0x03	; 3
    5432:	30 97       	sbiw	r30, 0x00	; 0
    5434:	19 f1       	breq	.+70     	; 0x547c <__vector_39+0x154>
    5436:	20 91 dc 12 	lds	r18, 0x12DC	; 0x8012dc <_twiMessageLen>
    543a:	4d ed       	ldi	r20, 0xDD	; 221
    543c:	52 e1       	ldi	r21, 0x12	; 18
    543e:	65 e0       	ldi	r22, 0x05	; 5
    5440:	19 95       	eicall
    5442:	1c c0       	rjmp	.+56     	; 0x547c <__vector_39+0x154>
    5444:	85 ea       	ldi	r24, 0xA5	; 165
    5446:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    544a:	18 c0       	rjmp	.+48     	; 0x547c <__vector_39+0x154>
    544c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5450:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5454:	84 e0       	ldi	r24, 0x04	; 4
    5456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    545a:	80 91 da 12 	lds	r24, 0x12DA	; 0x8012da <_twiCurrentHandler>
    545e:	90 91 db 12 	lds	r25, 0x12DB	; 0x8012db <_twiCurrentHandler+0x1>
    5462:	dc 01       	movw	r26, r24
    5464:	12 96       	adiw	r26, 0x02	; 2
    5466:	ed 91       	ld	r30, X+
    5468:	fc 91       	ld	r31, X
    546a:	13 97       	sbiw	r26, 0x03	; 3
    546c:	30 97       	sbiw	r30, 0x00	; 0
    546e:	31 f0       	breq	.+12     	; 0x547c <__vector_39+0x154>
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	40 e0       	ldi	r20, 0x00	; 0
    5474:	50 e0       	ldi	r21, 0x00	; 0
    5476:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    547a:	19 95       	eicall
    547c:	ff 91       	pop	r31
    547e:	ef 91       	pop	r30
    5480:	bf 91       	pop	r27
    5482:	af 91       	pop	r26
    5484:	9f 91       	pop	r25
    5486:	8f 91       	pop	r24
    5488:	7f 91       	pop	r23
    548a:	6f 91       	pop	r22
    548c:	5f 91       	pop	r21
    548e:	4f 91       	pop	r20
    5490:	3f 91       	pop	r19
    5492:	2f 91       	pop	r18
    5494:	0f 90       	pop	r0
    5496:	0b be       	out	0x3b, r0	; 59
    5498:	0f 90       	pop	r0
    549a:	0f be       	out	0x3f, r0	; 63
    549c:	0f 90       	pop	r0
    549e:	1f 90       	pop	r1
    54a0:	18 95       	reti

000054a2 <fifo_init>:
    54a2:	fc 01       	movw	r30, r24
    54a4:	41 11       	cpse	r20, r1
    54a6:	01 c0       	rjmp	.+2      	; 0x54aa <fifo_init+0x8>
    54a8:	9a d5       	rcall	.+2868   	; 0x5fde <abort>
    54aa:	84 2f       	mov	r24, r20
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	9c 01       	movw	r18, r24
    54b0:	21 50       	subi	r18, 0x01	; 1
    54b2:	31 09       	sbc	r19, r1
    54b4:	82 23       	and	r24, r18
    54b6:	93 23       	and	r25, r19
    54b8:	89 2b       	or	r24, r25
    54ba:	09 f0       	breq	.+2      	; 0x54be <fifo_init+0x1c>
    54bc:	90 d5       	rcall	.+2848   	; 0x5fde <abort>
    54be:	41 38       	cpi	r20, 0x81	; 129
    54c0:	08 f0       	brcs	.+2      	; 0x54c4 <fifo_init+0x22>
    54c2:	8d d5       	rcall	.+2842   	; 0x5fde <abort>
    54c4:	12 82       	std	Z+2, r1	; 0x02
    54c6:	13 82       	std	Z+3, r1	; 0x03
    54c8:	44 83       	std	Z+4, r20	; 0x04
    54ca:	44 0f       	add	r20, r20
    54cc:	41 50       	subi	r20, 0x01	; 1
    54ce:	45 83       	std	Z+5, r20	; 0x05
    54d0:	71 83       	std	Z+1, r23	; 0x01
    54d2:	60 83       	st	Z, r22
    54d4:	80 e0       	ldi	r24, 0x00	; 0
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	08 95       	ret

000054da <vfprintf>:
    54da:	2f 92       	push	r2
    54dc:	3f 92       	push	r3
    54de:	4f 92       	push	r4
    54e0:	5f 92       	push	r5
    54e2:	6f 92       	push	r6
    54e4:	7f 92       	push	r7
    54e6:	8f 92       	push	r8
    54e8:	9f 92       	push	r9
    54ea:	af 92       	push	r10
    54ec:	bf 92       	push	r11
    54ee:	cf 92       	push	r12
    54f0:	df 92       	push	r13
    54f2:	ef 92       	push	r14
    54f4:	ff 92       	push	r15
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	cd b7       	in	r28, 0x3d	; 61
    5500:	de b7       	in	r29, 0x3e	; 62
    5502:	60 97       	sbiw	r28, 0x10	; 16
    5504:	0f b6       	in	r0, 0x3f	; 63
    5506:	f8 94       	cli
    5508:	de bf       	out	0x3e, r29	; 62
    550a:	0f be       	out	0x3f, r0	; 63
    550c:	cd bf       	out	0x3d, r28	; 61
    550e:	7c 01       	movw	r14, r24
    5510:	1b 01       	movw	r2, r22
    5512:	6a 01       	movw	r12, r20
    5514:	fc 01       	movw	r30, r24
    5516:	17 82       	std	Z+7, r1	; 0x07
    5518:	16 82       	std	Z+6, r1	; 0x06
    551a:	83 81       	ldd	r24, Z+3	; 0x03
    551c:	81 ff       	sbrs	r24, 1
    551e:	2a c3       	rjmp	.+1620   	; 0x5b74 <vfprintf+0x69a>
    5520:	9e 01       	movw	r18, r28
    5522:	2f 5f       	subi	r18, 0xFF	; 255
    5524:	3f 4f       	sbci	r19, 0xFF	; 255
    5526:	39 01       	movw	r6, r18
    5528:	f7 01       	movw	r30, r14
    552a:	93 81       	ldd	r25, Z+3	; 0x03
    552c:	f1 01       	movw	r30, r2
    552e:	93 fd       	sbrc	r25, 3
    5530:	85 91       	lpm	r24, Z+
    5532:	93 ff       	sbrs	r25, 3
    5534:	81 91       	ld	r24, Z+
    5536:	1f 01       	movw	r2, r30
    5538:	88 23       	and	r24, r24
    553a:	09 f4       	brne	.+2      	; 0x553e <vfprintf+0x64>
    553c:	17 c3       	rjmp	.+1582   	; 0x5b6c <vfprintf+0x692>
    553e:	85 32       	cpi	r24, 0x25	; 37
    5540:	39 f4       	brne	.+14     	; 0x5550 <vfprintf+0x76>
    5542:	93 fd       	sbrc	r25, 3
    5544:	85 91       	lpm	r24, Z+
    5546:	93 ff       	sbrs	r25, 3
    5548:	81 91       	ld	r24, Z+
    554a:	1f 01       	movw	r2, r30
    554c:	85 32       	cpi	r24, 0x25	; 37
    554e:	31 f4       	brne	.+12     	; 0x555c <vfprintf+0x82>
    5550:	b7 01       	movw	r22, r14
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	95 d6       	rcall	.+3370   	; 0x6280 <fputc>
    5556:	56 01       	movw	r10, r12
    5558:	65 01       	movw	r12, r10
    555a:	e6 cf       	rjmp	.-52     	; 0x5528 <vfprintf+0x4e>
    555c:	10 e0       	ldi	r17, 0x00	; 0
    555e:	51 2c       	mov	r5, r1
    5560:	91 2c       	mov	r9, r1
    5562:	ff e1       	ldi	r31, 0x1F	; 31
    5564:	f9 15       	cp	r31, r9
    5566:	d8 f0       	brcs	.+54     	; 0x559e <vfprintf+0xc4>
    5568:	8b 32       	cpi	r24, 0x2B	; 43
    556a:	79 f0       	breq	.+30     	; 0x558a <vfprintf+0xb0>
    556c:	38 f4       	brcc	.+14     	; 0x557c <vfprintf+0xa2>
    556e:	80 32       	cpi	r24, 0x20	; 32
    5570:	79 f0       	breq	.+30     	; 0x5590 <vfprintf+0xb6>
    5572:	83 32       	cpi	r24, 0x23	; 35
    5574:	a1 f4       	brne	.+40     	; 0x559e <vfprintf+0xc4>
    5576:	f9 2d       	mov	r31, r9
    5578:	f0 61       	ori	r31, 0x10	; 16
    557a:	2e c0       	rjmp	.+92     	; 0x55d8 <vfprintf+0xfe>
    557c:	8d 32       	cpi	r24, 0x2D	; 45
    557e:	61 f0       	breq	.+24     	; 0x5598 <vfprintf+0xbe>
    5580:	80 33       	cpi	r24, 0x30	; 48
    5582:	69 f4       	brne	.+26     	; 0x559e <vfprintf+0xc4>
    5584:	29 2d       	mov	r18, r9
    5586:	21 60       	ori	r18, 0x01	; 1
    5588:	2d c0       	rjmp	.+90     	; 0x55e4 <vfprintf+0x10a>
    558a:	39 2d       	mov	r19, r9
    558c:	32 60       	ori	r19, 0x02	; 2
    558e:	93 2e       	mov	r9, r19
    5590:	89 2d       	mov	r24, r9
    5592:	84 60       	ori	r24, 0x04	; 4
    5594:	98 2e       	mov	r9, r24
    5596:	2a c0       	rjmp	.+84     	; 0x55ec <vfprintf+0x112>
    5598:	e9 2d       	mov	r30, r9
    559a:	e8 60       	ori	r30, 0x08	; 8
    559c:	15 c0       	rjmp	.+42     	; 0x55c8 <vfprintf+0xee>
    559e:	97 fc       	sbrc	r9, 7
    55a0:	2d c0       	rjmp	.+90     	; 0x55fc <vfprintf+0x122>
    55a2:	20 ed       	ldi	r18, 0xD0	; 208
    55a4:	28 0f       	add	r18, r24
    55a6:	2a 30       	cpi	r18, 0x0A	; 10
    55a8:	88 f4       	brcc	.+34     	; 0x55cc <vfprintf+0xf2>
    55aa:	96 fe       	sbrs	r9, 6
    55ac:	06 c0       	rjmp	.+12     	; 0x55ba <vfprintf+0xe0>
    55ae:	3a e0       	ldi	r19, 0x0A	; 10
    55b0:	13 9f       	mul	r17, r19
    55b2:	20 0d       	add	r18, r0
    55b4:	11 24       	eor	r1, r1
    55b6:	12 2f       	mov	r17, r18
    55b8:	19 c0       	rjmp	.+50     	; 0x55ec <vfprintf+0x112>
    55ba:	8a e0       	ldi	r24, 0x0A	; 10
    55bc:	58 9e       	mul	r5, r24
    55be:	20 0d       	add	r18, r0
    55c0:	11 24       	eor	r1, r1
    55c2:	52 2e       	mov	r5, r18
    55c4:	e9 2d       	mov	r30, r9
    55c6:	e0 62       	ori	r30, 0x20	; 32
    55c8:	9e 2e       	mov	r9, r30
    55ca:	10 c0       	rjmp	.+32     	; 0x55ec <vfprintf+0x112>
    55cc:	8e 32       	cpi	r24, 0x2E	; 46
    55ce:	31 f4       	brne	.+12     	; 0x55dc <vfprintf+0x102>
    55d0:	96 fc       	sbrc	r9, 6
    55d2:	cc c2       	rjmp	.+1432   	; 0x5b6c <vfprintf+0x692>
    55d4:	f9 2d       	mov	r31, r9
    55d6:	f0 64       	ori	r31, 0x40	; 64
    55d8:	9f 2e       	mov	r9, r31
    55da:	08 c0       	rjmp	.+16     	; 0x55ec <vfprintf+0x112>
    55dc:	8c 36       	cpi	r24, 0x6C	; 108
    55de:	21 f4       	brne	.+8      	; 0x55e8 <vfprintf+0x10e>
    55e0:	29 2d       	mov	r18, r9
    55e2:	20 68       	ori	r18, 0x80	; 128
    55e4:	92 2e       	mov	r9, r18
    55e6:	02 c0       	rjmp	.+4      	; 0x55ec <vfprintf+0x112>
    55e8:	88 36       	cpi	r24, 0x68	; 104
    55ea:	41 f4       	brne	.+16     	; 0x55fc <vfprintf+0x122>
    55ec:	f1 01       	movw	r30, r2
    55ee:	93 fd       	sbrc	r25, 3
    55f0:	85 91       	lpm	r24, Z+
    55f2:	93 ff       	sbrs	r25, 3
    55f4:	81 91       	ld	r24, Z+
    55f6:	1f 01       	movw	r2, r30
    55f8:	81 11       	cpse	r24, r1
    55fa:	b3 cf       	rjmp	.-154    	; 0x5562 <vfprintf+0x88>
    55fc:	9b eb       	ldi	r25, 0xBB	; 187
    55fe:	98 0f       	add	r25, r24
    5600:	93 30       	cpi	r25, 0x03	; 3
    5602:	20 f4       	brcc	.+8      	; 0x560c <vfprintf+0x132>
    5604:	99 2d       	mov	r25, r9
    5606:	90 61       	ori	r25, 0x10	; 16
    5608:	80 5e       	subi	r24, 0xE0	; 224
    560a:	07 c0       	rjmp	.+14     	; 0x561a <vfprintf+0x140>
    560c:	9b e9       	ldi	r25, 0x9B	; 155
    560e:	98 0f       	add	r25, r24
    5610:	93 30       	cpi	r25, 0x03	; 3
    5612:	08 f0       	brcs	.+2      	; 0x5616 <vfprintf+0x13c>
    5614:	59 c1       	rjmp	.+690    	; 0x58c8 <vfprintf+0x3ee>
    5616:	99 2d       	mov	r25, r9
    5618:	9f 7e       	andi	r25, 0xEF	; 239
    561a:	96 ff       	sbrs	r25, 6
    561c:	16 e0       	ldi	r17, 0x06	; 6
    561e:	9f 73       	andi	r25, 0x3F	; 63
    5620:	99 2e       	mov	r9, r25
    5622:	85 36       	cpi	r24, 0x65	; 101
    5624:	19 f4       	brne	.+6      	; 0x562c <vfprintf+0x152>
    5626:	90 64       	ori	r25, 0x40	; 64
    5628:	99 2e       	mov	r9, r25
    562a:	08 c0       	rjmp	.+16     	; 0x563c <vfprintf+0x162>
    562c:	86 36       	cpi	r24, 0x66	; 102
    562e:	21 f4       	brne	.+8      	; 0x5638 <vfprintf+0x15e>
    5630:	39 2f       	mov	r19, r25
    5632:	30 68       	ori	r19, 0x80	; 128
    5634:	93 2e       	mov	r9, r19
    5636:	02 c0       	rjmp	.+4      	; 0x563c <vfprintf+0x162>
    5638:	11 11       	cpse	r17, r1
    563a:	11 50       	subi	r17, 0x01	; 1
    563c:	97 fe       	sbrs	r9, 7
    563e:	07 c0       	rjmp	.+14     	; 0x564e <vfprintf+0x174>
    5640:	1c 33       	cpi	r17, 0x3C	; 60
    5642:	50 f4       	brcc	.+20     	; 0x5658 <vfprintf+0x17e>
    5644:	44 24       	eor	r4, r4
    5646:	43 94       	inc	r4
    5648:	41 0e       	add	r4, r17
    564a:	27 e0       	ldi	r18, 0x07	; 7
    564c:	0b c0       	rjmp	.+22     	; 0x5664 <vfprintf+0x18a>
    564e:	18 30       	cpi	r17, 0x08	; 8
    5650:	38 f0       	brcs	.+14     	; 0x5660 <vfprintf+0x186>
    5652:	27 e0       	ldi	r18, 0x07	; 7
    5654:	17 e0       	ldi	r17, 0x07	; 7
    5656:	05 c0       	rjmp	.+10     	; 0x5662 <vfprintf+0x188>
    5658:	27 e0       	ldi	r18, 0x07	; 7
    565a:	9c e3       	ldi	r25, 0x3C	; 60
    565c:	49 2e       	mov	r4, r25
    565e:	02 c0       	rjmp	.+4      	; 0x5664 <vfprintf+0x18a>
    5660:	21 2f       	mov	r18, r17
    5662:	41 2c       	mov	r4, r1
    5664:	56 01       	movw	r10, r12
    5666:	84 e0       	ldi	r24, 0x04	; 4
    5668:	a8 0e       	add	r10, r24
    566a:	b1 1c       	adc	r11, r1
    566c:	f6 01       	movw	r30, r12
    566e:	60 81       	ld	r22, Z
    5670:	71 81       	ldd	r23, Z+1	; 0x01
    5672:	82 81       	ldd	r24, Z+2	; 0x02
    5674:	93 81       	ldd	r25, Z+3	; 0x03
    5676:	04 2d       	mov	r16, r4
    5678:	a3 01       	movw	r20, r6
    567a:	b5 d4       	rcall	.+2410   	; 0x5fe6 <__ftoa_engine>
    567c:	6c 01       	movw	r12, r24
    567e:	f9 81       	ldd	r31, Y+1	; 0x01
    5680:	fc 87       	std	Y+12, r31	; 0x0c
    5682:	f0 ff       	sbrs	r31, 0
    5684:	02 c0       	rjmp	.+4      	; 0x568a <vfprintf+0x1b0>
    5686:	f3 ff       	sbrs	r31, 3
    5688:	06 c0       	rjmp	.+12     	; 0x5696 <vfprintf+0x1bc>
    568a:	91 fc       	sbrc	r9, 1
    568c:	06 c0       	rjmp	.+12     	; 0x569a <vfprintf+0x1c0>
    568e:	92 fe       	sbrs	r9, 2
    5690:	06 c0       	rjmp	.+12     	; 0x569e <vfprintf+0x1c4>
    5692:	00 e2       	ldi	r16, 0x20	; 32
    5694:	05 c0       	rjmp	.+10     	; 0x56a0 <vfprintf+0x1c6>
    5696:	0d e2       	ldi	r16, 0x2D	; 45
    5698:	03 c0       	rjmp	.+6      	; 0x56a0 <vfprintf+0x1c6>
    569a:	0b e2       	ldi	r16, 0x2B	; 43
    569c:	01 c0       	rjmp	.+2      	; 0x56a0 <vfprintf+0x1c6>
    569e:	00 e0       	ldi	r16, 0x00	; 0
    56a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    56a2:	8c 70       	andi	r24, 0x0C	; 12
    56a4:	19 f0       	breq	.+6      	; 0x56ac <vfprintf+0x1d2>
    56a6:	01 11       	cpse	r16, r1
    56a8:	43 c2       	rjmp	.+1158   	; 0x5b30 <vfprintf+0x656>
    56aa:	80 c2       	rjmp	.+1280   	; 0x5bac <vfprintf+0x6d2>
    56ac:	97 fe       	sbrs	r9, 7
    56ae:	10 c0       	rjmp	.+32     	; 0x56d0 <vfprintf+0x1f6>
    56b0:	4c 0c       	add	r4, r12
    56b2:	fc 85       	ldd	r31, Y+12	; 0x0c
    56b4:	f4 ff       	sbrs	r31, 4
    56b6:	04 c0       	rjmp	.+8      	; 0x56c0 <vfprintf+0x1e6>
    56b8:	8a 81       	ldd	r24, Y+2	; 0x02
    56ba:	81 33       	cpi	r24, 0x31	; 49
    56bc:	09 f4       	brne	.+2      	; 0x56c0 <vfprintf+0x1e6>
    56be:	4a 94       	dec	r4
    56c0:	14 14       	cp	r1, r4
    56c2:	74 f5       	brge	.+92     	; 0x5720 <vfprintf+0x246>
    56c4:	28 e0       	ldi	r18, 0x08	; 8
    56c6:	24 15       	cp	r18, r4
    56c8:	78 f5       	brcc	.+94     	; 0x5728 <vfprintf+0x24e>
    56ca:	88 e0       	ldi	r24, 0x08	; 8
    56cc:	48 2e       	mov	r4, r24
    56ce:	2c c0       	rjmp	.+88     	; 0x5728 <vfprintf+0x24e>
    56d0:	96 fc       	sbrc	r9, 6
    56d2:	2a c0       	rjmp	.+84     	; 0x5728 <vfprintf+0x24e>
    56d4:	81 2f       	mov	r24, r17
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	8c 15       	cp	r24, r12
    56da:	9d 05       	cpc	r25, r13
    56dc:	9c f0       	brlt	.+38     	; 0x5704 <vfprintf+0x22a>
    56de:	3c ef       	ldi	r19, 0xFC	; 252
    56e0:	c3 16       	cp	r12, r19
    56e2:	3f ef       	ldi	r19, 0xFF	; 255
    56e4:	d3 06       	cpc	r13, r19
    56e6:	74 f0       	brlt	.+28     	; 0x5704 <vfprintf+0x22a>
    56e8:	89 2d       	mov	r24, r9
    56ea:	80 68       	ori	r24, 0x80	; 128
    56ec:	98 2e       	mov	r9, r24
    56ee:	0a c0       	rjmp	.+20     	; 0x5704 <vfprintf+0x22a>
    56f0:	e2 e0       	ldi	r30, 0x02	; 2
    56f2:	f0 e0       	ldi	r31, 0x00	; 0
    56f4:	ec 0f       	add	r30, r28
    56f6:	fd 1f       	adc	r31, r29
    56f8:	e1 0f       	add	r30, r17
    56fa:	f1 1d       	adc	r31, r1
    56fc:	80 81       	ld	r24, Z
    56fe:	80 33       	cpi	r24, 0x30	; 48
    5700:	19 f4       	brne	.+6      	; 0x5708 <vfprintf+0x22e>
    5702:	11 50       	subi	r17, 0x01	; 1
    5704:	11 11       	cpse	r17, r1
    5706:	f4 cf       	rjmp	.-24     	; 0x56f0 <vfprintf+0x216>
    5708:	97 fe       	sbrs	r9, 7
    570a:	0e c0       	rjmp	.+28     	; 0x5728 <vfprintf+0x24e>
    570c:	44 24       	eor	r4, r4
    570e:	43 94       	inc	r4
    5710:	41 0e       	add	r4, r17
    5712:	81 2f       	mov	r24, r17
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	c8 16       	cp	r12, r24
    5718:	d9 06       	cpc	r13, r25
    571a:	2c f4       	brge	.+10     	; 0x5726 <vfprintf+0x24c>
    571c:	1c 19       	sub	r17, r12
    571e:	04 c0       	rjmp	.+8      	; 0x5728 <vfprintf+0x24e>
    5720:	44 24       	eor	r4, r4
    5722:	43 94       	inc	r4
    5724:	01 c0       	rjmp	.+2      	; 0x5728 <vfprintf+0x24e>
    5726:	10 e0       	ldi	r17, 0x00	; 0
    5728:	97 fe       	sbrs	r9, 7
    572a:	06 c0       	rjmp	.+12     	; 0x5738 <vfprintf+0x25e>
    572c:	1c 14       	cp	r1, r12
    572e:	1d 04       	cpc	r1, r13
    5730:	34 f4       	brge	.+12     	; 0x573e <vfprintf+0x264>
    5732:	c6 01       	movw	r24, r12
    5734:	01 96       	adiw	r24, 0x01	; 1
    5736:	05 c0       	rjmp	.+10     	; 0x5742 <vfprintf+0x268>
    5738:	85 e0       	ldi	r24, 0x05	; 5
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	02 c0       	rjmp	.+4      	; 0x5742 <vfprintf+0x268>
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	01 11       	cpse	r16, r1
    5744:	01 96       	adiw	r24, 0x01	; 1
    5746:	11 23       	and	r17, r17
    5748:	31 f0       	breq	.+12     	; 0x5756 <vfprintf+0x27c>
    574a:	21 2f       	mov	r18, r17
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	2f 5f       	subi	r18, 0xFF	; 255
    5750:	3f 4f       	sbci	r19, 0xFF	; 255
    5752:	82 0f       	add	r24, r18
    5754:	93 1f       	adc	r25, r19
    5756:	25 2d       	mov	r18, r5
    5758:	30 e0       	ldi	r19, 0x00	; 0
    575a:	82 17       	cp	r24, r18
    575c:	93 07       	cpc	r25, r19
    575e:	14 f4       	brge	.+4      	; 0x5764 <vfprintf+0x28a>
    5760:	58 1a       	sub	r5, r24
    5762:	01 c0       	rjmp	.+2      	; 0x5766 <vfprintf+0x28c>
    5764:	51 2c       	mov	r5, r1
    5766:	89 2d       	mov	r24, r9
    5768:	89 70       	andi	r24, 0x09	; 9
    576a:	41 f4       	brne	.+16     	; 0x577c <vfprintf+0x2a2>
    576c:	55 20       	and	r5, r5
    576e:	31 f0       	breq	.+12     	; 0x577c <vfprintf+0x2a2>
    5770:	b7 01       	movw	r22, r14
    5772:	80 e2       	ldi	r24, 0x20	; 32
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	84 d5       	rcall	.+2824   	; 0x6280 <fputc>
    5778:	5a 94       	dec	r5
    577a:	f8 cf       	rjmp	.-16     	; 0x576c <vfprintf+0x292>
    577c:	00 23       	and	r16, r16
    577e:	21 f0       	breq	.+8      	; 0x5788 <vfprintf+0x2ae>
    5780:	b7 01       	movw	r22, r14
    5782:	80 2f       	mov	r24, r16
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	7c d5       	rcall	.+2808   	; 0x6280 <fputc>
    5788:	93 fc       	sbrc	r9, 3
    578a:	08 c0       	rjmp	.+16     	; 0x579c <vfprintf+0x2c2>
    578c:	55 20       	and	r5, r5
    578e:	31 f0       	breq	.+12     	; 0x579c <vfprintf+0x2c2>
    5790:	b7 01       	movw	r22, r14
    5792:	80 e3       	ldi	r24, 0x30	; 48
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	74 d5       	rcall	.+2792   	; 0x6280 <fputc>
    5798:	5a 94       	dec	r5
    579a:	f8 cf       	rjmp	.-16     	; 0x578c <vfprintf+0x2b2>
    579c:	97 fe       	sbrs	r9, 7
    579e:	4a c0       	rjmp	.+148    	; 0x5834 <vfprintf+0x35a>
    57a0:	46 01       	movw	r8, r12
    57a2:	d7 fe       	sbrs	r13, 7
    57a4:	02 c0       	rjmp	.+4      	; 0x57aa <vfprintf+0x2d0>
    57a6:	81 2c       	mov	r8, r1
    57a8:	91 2c       	mov	r9, r1
    57aa:	c6 01       	movw	r24, r12
    57ac:	88 19       	sub	r24, r8
    57ae:	99 09       	sbc	r25, r9
    57b0:	f3 01       	movw	r30, r6
    57b2:	e8 0f       	add	r30, r24
    57b4:	f9 1f       	adc	r31, r25
    57b6:	fe 87       	std	Y+14, r31	; 0x0e
    57b8:	ed 87       	std	Y+13, r30	; 0x0d
    57ba:	96 01       	movw	r18, r12
    57bc:	24 19       	sub	r18, r4
    57be:	31 09       	sbc	r19, r1
    57c0:	38 8b       	std	Y+16, r19	; 0x10
    57c2:	2f 87       	std	Y+15, r18	; 0x0f
    57c4:	01 2f       	mov	r16, r17
    57c6:	10 e0       	ldi	r17, 0x00	; 0
    57c8:	11 95       	neg	r17
    57ca:	01 95       	neg	r16
    57cc:	11 09       	sbc	r17, r1
    57ce:	3f ef       	ldi	r19, 0xFF	; 255
    57d0:	83 16       	cp	r8, r19
    57d2:	93 06       	cpc	r9, r19
    57d4:	21 f4       	brne	.+8      	; 0x57de <vfprintf+0x304>
    57d6:	b7 01       	movw	r22, r14
    57d8:	8e e2       	ldi	r24, 0x2E	; 46
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	51 d5       	rcall	.+2722   	; 0x6280 <fputc>
    57de:	c8 14       	cp	r12, r8
    57e0:	d9 04       	cpc	r13, r9
    57e2:	4c f0       	brlt	.+18     	; 0x57f6 <vfprintf+0x31c>
    57e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    57e6:	98 89       	ldd	r25, Y+16	; 0x10
    57e8:	88 15       	cp	r24, r8
    57ea:	99 05       	cpc	r25, r9
    57ec:	24 f4       	brge	.+8      	; 0x57f6 <vfprintf+0x31c>
    57ee:	ed 85       	ldd	r30, Y+13	; 0x0d
    57f0:	fe 85       	ldd	r31, Y+14	; 0x0e
    57f2:	81 81       	ldd	r24, Z+1	; 0x01
    57f4:	01 c0       	rjmp	.+2      	; 0x57f8 <vfprintf+0x31e>
    57f6:	80 e3       	ldi	r24, 0x30	; 48
    57f8:	f1 e0       	ldi	r31, 0x01	; 1
    57fa:	8f 1a       	sub	r8, r31
    57fc:	91 08       	sbc	r9, r1
    57fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    5800:	3e 85       	ldd	r19, Y+14	; 0x0e
    5802:	2f 5f       	subi	r18, 0xFF	; 255
    5804:	3f 4f       	sbci	r19, 0xFF	; 255
    5806:	3e 87       	std	Y+14, r19	; 0x0e
    5808:	2d 87       	std	Y+13, r18	; 0x0d
    580a:	80 16       	cp	r8, r16
    580c:	91 06       	cpc	r9, r17
    580e:	24 f0       	brlt	.+8      	; 0x5818 <vfprintf+0x33e>
    5810:	b7 01       	movw	r22, r14
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	35 d5       	rcall	.+2666   	; 0x6280 <fputc>
    5816:	db cf       	rjmp	.-74     	; 0x57ce <vfprintf+0x2f4>
    5818:	c8 14       	cp	r12, r8
    581a:	d9 04       	cpc	r13, r9
    581c:	41 f4       	brne	.+16     	; 0x582e <vfprintf+0x354>
    581e:	9a 81       	ldd	r25, Y+2	; 0x02
    5820:	96 33       	cpi	r25, 0x36	; 54
    5822:	20 f4       	brcc	.+8      	; 0x582c <vfprintf+0x352>
    5824:	95 33       	cpi	r25, 0x35	; 53
    5826:	19 f4       	brne	.+6      	; 0x582e <vfprintf+0x354>
    5828:	3c 85       	ldd	r19, Y+12	; 0x0c
    582a:	34 ff       	sbrs	r19, 4
    582c:	81 e3       	ldi	r24, 0x31	; 49
    582e:	b7 01       	movw	r22, r14
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	48 c0       	rjmp	.+144    	; 0x58c4 <vfprintf+0x3ea>
    5834:	8a 81       	ldd	r24, Y+2	; 0x02
    5836:	81 33       	cpi	r24, 0x31	; 49
    5838:	19 f0       	breq	.+6      	; 0x5840 <vfprintf+0x366>
    583a:	9c 85       	ldd	r25, Y+12	; 0x0c
    583c:	9f 7e       	andi	r25, 0xEF	; 239
    583e:	9c 87       	std	Y+12, r25	; 0x0c
    5840:	b7 01       	movw	r22, r14
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	1d d5       	rcall	.+2618   	; 0x6280 <fputc>
    5846:	11 11       	cpse	r17, r1
    5848:	05 c0       	rjmp	.+10     	; 0x5854 <vfprintf+0x37a>
    584a:	94 fc       	sbrc	r9, 4
    584c:	16 c0       	rjmp	.+44     	; 0x587a <vfprintf+0x3a0>
    584e:	85 e6       	ldi	r24, 0x65	; 101
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	15 c0       	rjmp	.+42     	; 0x587e <vfprintf+0x3a4>
    5854:	b7 01       	movw	r22, r14
    5856:	8e e2       	ldi	r24, 0x2E	; 46
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	12 d5       	rcall	.+2596   	; 0x6280 <fputc>
    585c:	1e 5f       	subi	r17, 0xFE	; 254
    585e:	82 e0       	ldi	r24, 0x02	; 2
    5860:	01 e0       	ldi	r16, 0x01	; 1
    5862:	08 0f       	add	r16, r24
    5864:	f3 01       	movw	r30, r6
    5866:	e8 0f       	add	r30, r24
    5868:	f1 1d       	adc	r31, r1
    586a:	80 81       	ld	r24, Z
    586c:	b7 01       	movw	r22, r14
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	07 d5       	rcall	.+2574   	; 0x6280 <fputc>
    5872:	80 2f       	mov	r24, r16
    5874:	01 13       	cpse	r16, r17
    5876:	f4 cf       	rjmp	.-24     	; 0x5860 <vfprintf+0x386>
    5878:	e8 cf       	rjmp	.-48     	; 0x584a <vfprintf+0x370>
    587a:	85 e4       	ldi	r24, 0x45	; 69
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	b7 01       	movw	r22, r14
    5880:	ff d4       	rcall	.+2558   	; 0x6280 <fputc>
    5882:	d7 fc       	sbrc	r13, 7
    5884:	06 c0       	rjmp	.+12     	; 0x5892 <vfprintf+0x3b8>
    5886:	c1 14       	cp	r12, r1
    5888:	d1 04       	cpc	r13, r1
    588a:	41 f4       	brne	.+16     	; 0x589c <vfprintf+0x3c2>
    588c:	ec 85       	ldd	r30, Y+12	; 0x0c
    588e:	e4 ff       	sbrs	r30, 4
    5890:	05 c0       	rjmp	.+10     	; 0x589c <vfprintf+0x3c2>
    5892:	d1 94       	neg	r13
    5894:	c1 94       	neg	r12
    5896:	d1 08       	sbc	r13, r1
    5898:	8d e2       	ldi	r24, 0x2D	; 45
    589a:	01 c0       	rjmp	.+2      	; 0x589e <vfprintf+0x3c4>
    589c:	8b e2       	ldi	r24, 0x2B	; 43
    589e:	b7 01       	movw	r22, r14
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	ee d4       	rcall	.+2524   	; 0x6280 <fputc>
    58a4:	80 e3       	ldi	r24, 0x30	; 48
    58a6:	2a e0       	ldi	r18, 0x0A	; 10
    58a8:	c2 16       	cp	r12, r18
    58aa:	d1 04       	cpc	r13, r1
    58ac:	2c f0       	brlt	.+10     	; 0x58b8 <vfprintf+0x3de>
    58ae:	8f 5f       	subi	r24, 0xFF	; 255
    58b0:	fa e0       	ldi	r31, 0x0A	; 10
    58b2:	cf 1a       	sub	r12, r31
    58b4:	d1 08       	sbc	r13, r1
    58b6:	f7 cf       	rjmp	.-18     	; 0x58a6 <vfprintf+0x3cc>
    58b8:	b7 01       	movw	r22, r14
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	e1 d4       	rcall	.+2498   	; 0x6280 <fputc>
    58be:	b7 01       	movw	r22, r14
    58c0:	c6 01       	movw	r24, r12
    58c2:	c0 96       	adiw	r24, 0x30	; 48
    58c4:	dd d4       	rcall	.+2490   	; 0x6280 <fputc>
    58c6:	49 c1       	rjmp	.+658    	; 0x5b5a <vfprintf+0x680>
    58c8:	83 36       	cpi	r24, 0x63	; 99
    58ca:	31 f0       	breq	.+12     	; 0x58d8 <vfprintf+0x3fe>
    58cc:	83 37       	cpi	r24, 0x73	; 115
    58ce:	79 f0       	breq	.+30     	; 0x58ee <vfprintf+0x414>
    58d0:	83 35       	cpi	r24, 0x53	; 83
    58d2:	09 f0       	breq	.+2      	; 0x58d6 <vfprintf+0x3fc>
    58d4:	52 c0       	rjmp	.+164    	; 0x597a <vfprintf+0x4a0>
    58d6:	1f c0       	rjmp	.+62     	; 0x5916 <vfprintf+0x43c>
    58d8:	56 01       	movw	r10, r12
    58da:	32 e0       	ldi	r19, 0x02	; 2
    58dc:	a3 0e       	add	r10, r19
    58de:	b1 1c       	adc	r11, r1
    58e0:	f6 01       	movw	r30, r12
    58e2:	80 81       	ld	r24, Z
    58e4:	89 83       	std	Y+1, r24	; 0x01
    58e6:	01 e0       	ldi	r16, 0x01	; 1
    58e8:	10 e0       	ldi	r17, 0x00	; 0
    58ea:	63 01       	movw	r12, r6
    58ec:	11 c0       	rjmp	.+34     	; 0x5910 <vfprintf+0x436>
    58ee:	56 01       	movw	r10, r12
    58f0:	f2 e0       	ldi	r31, 0x02	; 2
    58f2:	af 0e       	add	r10, r31
    58f4:	b1 1c       	adc	r11, r1
    58f6:	f6 01       	movw	r30, r12
    58f8:	c0 80       	ld	r12, Z
    58fa:	d1 80       	ldd	r13, Z+1	; 0x01
    58fc:	96 fe       	sbrs	r9, 6
    58fe:	03 c0       	rjmp	.+6      	; 0x5906 <vfprintf+0x42c>
    5900:	61 2f       	mov	r22, r17
    5902:	70 e0       	ldi	r23, 0x00	; 0
    5904:	02 c0       	rjmp	.+4      	; 0x590a <vfprintf+0x430>
    5906:	6f ef       	ldi	r22, 0xFF	; 255
    5908:	7f ef       	ldi	r23, 0xFF	; 255
    590a:	c6 01       	movw	r24, r12
    590c:	ae d4       	rcall	.+2396   	; 0x626a <strnlen>
    590e:	8c 01       	movw	r16, r24
    5910:	f9 2d       	mov	r31, r9
    5912:	ff 77       	andi	r31, 0x7F	; 127
    5914:	13 c0       	rjmp	.+38     	; 0x593c <vfprintf+0x462>
    5916:	56 01       	movw	r10, r12
    5918:	22 e0       	ldi	r18, 0x02	; 2
    591a:	a2 0e       	add	r10, r18
    591c:	b1 1c       	adc	r11, r1
    591e:	f6 01       	movw	r30, r12
    5920:	c0 80       	ld	r12, Z
    5922:	d1 80       	ldd	r13, Z+1	; 0x01
    5924:	96 fe       	sbrs	r9, 6
    5926:	03 c0       	rjmp	.+6      	; 0x592e <vfprintf+0x454>
    5928:	61 2f       	mov	r22, r17
    592a:	70 e0       	ldi	r23, 0x00	; 0
    592c:	02 c0       	rjmp	.+4      	; 0x5932 <vfprintf+0x458>
    592e:	6f ef       	ldi	r22, 0xFF	; 255
    5930:	7f ef       	ldi	r23, 0xFF	; 255
    5932:	c6 01       	movw	r24, r12
    5934:	30 d4       	rcall	.+2144   	; 0x6196 <strnlen_P>
    5936:	8c 01       	movw	r16, r24
    5938:	f9 2d       	mov	r31, r9
    593a:	f0 68       	ori	r31, 0x80	; 128
    593c:	9f 2e       	mov	r9, r31
    593e:	f3 fd       	sbrc	r31, 3
    5940:	18 c0       	rjmp	.+48     	; 0x5972 <vfprintf+0x498>
    5942:	85 2d       	mov	r24, r5
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	08 17       	cp	r16, r24
    5948:	19 07       	cpc	r17, r25
    594a:	98 f4       	brcc	.+38     	; 0x5972 <vfprintf+0x498>
    594c:	b7 01       	movw	r22, r14
    594e:	80 e2       	ldi	r24, 0x20	; 32
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	96 d4       	rcall	.+2348   	; 0x6280 <fputc>
    5954:	5a 94       	dec	r5
    5956:	f5 cf       	rjmp	.-22     	; 0x5942 <vfprintf+0x468>
    5958:	f6 01       	movw	r30, r12
    595a:	97 fc       	sbrc	r9, 7
    595c:	85 91       	lpm	r24, Z+
    595e:	97 fe       	sbrs	r9, 7
    5960:	81 91       	ld	r24, Z+
    5962:	6f 01       	movw	r12, r30
    5964:	b7 01       	movw	r22, r14
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	8b d4       	rcall	.+2326   	; 0x6280 <fputc>
    596a:	51 10       	cpse	r5, r1
    596c:	5a 94       	dec	r5
    596e:	01 50       	subi	r16, 0x01	; 1
    5970:	11 09       	sbc	r17, r1
    5972:	01 15       	cp	r16, r1
    5974:	11 05       	cpc	r17, r1
    5976:	81 f7       	brne	.-32     	; 0x5958 <vfprintf+0x47e>
    5978:	f0 c0       	rjmp	.+480    	; 0x5b5a <vfprintf+0x680>
    597a:	84 36       	cpi	r24, 0x64	; 100
    597c:	11 f0       	breq	.+4      	; 0x5982 <vfprintf+0x4a8>
    597e:	89 36       	cpi	r24, 0x69	; 105
    5980:	59 f5       	brne	.+86     	; 0x59d8 <vfprintf+0x4fe>
    5982:	56 01       	movw	r10, r12
    5984:	97 fe       	sbrs	r9, 7
    5986:	09 c0       	rjmp	.+18     	; 0x599a <vfprintf+0x4c0>
    5988:	24 e0       	ldi	r18, 0x04	; 4
    598a:	a2 0e       	add	r10, r18
    598c:	b1 1c       	adc	r11, r1
    598e:	f6 01       	movw	r30, r12
    5990:	60 81       	ld	r22, Z
    5992:	71 81       	ldd	r23, Z+1	; 0x01
    5994:	82 81       	ldd	r24, Z+2	; 0x02
    5996:	93 81       	ldd	r25, Z+3	; 0x03
    5998:	0a c0       	rjmp	.+20     	; 0x59ae <vfprintf+0x4d4>
    599a:	f2 e0       	ldi	r31, 0x02	; 2
    599c:	af 0e       	add	r10, r31
    599e:	b1 1c       	adc	r11, r1
    59a0:	f6 01       	movw	r30, r12
    59a2:	60 81       	ld	r22, Z
    59a4:	71 81       	ldd	r23, Z+1	; 0x01
    59a6:	07 2e       	mov	r0, r23
    59a8:	00 0c       	add	r0, r0
    59aa:	88 0b       	sbc	r24, r24
    59ac:	99 0b       	sbc	r25, r25
    59ae:	f9 2d       	mov	r31, r9
    59b0:	ff 76       	andi	r31, 0x6F	; 111
    59b2:	9f 2e       	mov	r9, r31
    59b4:	97 ff       	sbrs	r25, 7
    59b6:	09 c0       	rjmp	.+18     	; 0x59ca <vfprintf+0x4f0>
    59b8:	90 95       	com	r25
    59ba:	80 95       	com	r24
    59bc:	70 95       	com	r23
    59be:	61 95       	neg	r22
    59c0:	7f 4f       	sbci	r23, 0xFF	; 255
    59c2:	8f 4f       	sbci	r24, 0xFF	; 255
    59c4:	9f 4f       	sbci	r25, 0xFF	; 255
    59c6:	f0 68       	ori	r31, 0x80	; 128
    59c8:	9f 2e       	mov	r9, r31
    59ca:	2a e0       	ldi	r18, 0x0A	; 10
    59cc:	30 e0       	ldi	r19, 0x00	; 0
    59ce:	a3 01       	movw	r20, r6
    59d0:	04 d5       	rcall	.+2568   	; 0x63da <__ultoa_invert>
    59d2:	c8 2e       	mov	r12, r24
    59d4:	c6 18       	sub	r12, r6
    59d6:	3e c0       	rjmp	.+124    	; 0x5a54 <vfprintf+0x57a>
    59d8:	09 2d       	mov	r16, r9
    59da:	85 37       	cpi	r24, 0x75	; 117
    59dc:	21 f4       	brne	.+8      	; 0x59e6 <vfprintf+0x50c>
    59de:	0f 7e       	andi	r16, 0xEF	; 239
    59e0:	2a e0       	ldi	r18, 0x0A	; 10
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	1d c0       	rjmp	.+58     	; 0x5a20 <vfprintf+0x546>
    59e6:	09 7f       	andi	r16, 0xF9	; 249
    59e8:	8f 36       	cpi	r24, 0x6F	; 111
    59ea:	91 f0       	breq	.+36     	; 0x5a10 <vfprintf+0x536>
    59ec:	18 f4       	brcc	.+6      	; 0x59f4 <vfprintf+0x51a>
    59ee:	88 35       	cpi	r24, 0x58	; 88
    59f0:	59 f0       	breq	.+22     	; 0x5a08 <vfprintf+0x52e>
    59f2:	bc c0       	rjmp	.+376    	; 0x5b6c <vfprintf+0x692>
    59f4:	80 37       	cpi	r24, 0x70	; 112
    59f6:	19 f0       	breq	.+6      	; 0x59fe <vfprintf+0x524>
    59f8:	88 37       	cpi	r24, 0x78	; 120
    59fa:	11 f0       	breq	.+4      	; 0x5a00 <vfprintf+0x526>
    59fc:	b7 c0       	rjmp	.+366    	; 0x5b6c <vfprintf+0x692>
    59fe:	00 61       	ori	r16, 0x10	; 16
    5a00:	04 ff       	sbrs	r16, 4
    5a02:	09 c0       	rjmp	.+18     	; 0x5a16 <vfprintf+0x53c>
    5a04:	04 60       	ori	r16, 0x04	; 4
    5a06:	07 c0       	rjmp	.+14     	; 0x5a16 <vfprintf+0x53c>
    5a08:	94 fe       	sbrs	r9, 4
    5a0a:	08 c0       	rjmp	.+16     	; 0x5a1c <vfprintf+0x542>
    5a0c:	06 60       	ori	r16, 0x06	; 6
    5a0e:	06 c0       	rjmp	.+12     	; 0x5a1c <vfprintf+0x542>
    5a10:	28 e0       	ldi	r18, 0x08	; 8
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	05 c0       	rjmp	.+10     	; 0x5a20 <vfprintf+0x546>
    5a16:	20 e1       	ldi	r18, 0x10	; 16
    5a18:	30 e0       	ldi	r19, 0x00	; 0
    5a1a:	02 c0       	rjmp	.+4      	; 0x5a20 <vfprintf+0x546>
    5a1c:	20 e1       	ldi	r18, 0x10	; 16
    5a1e:	32 e0       	ldi	r19, 0x02	; 2
    5a20:	56 01       	movw	r10, r12
    5a22:	07 ff       	sbrs	r16, 7
    5a24:	09 c0       	rjmp	.+18     	; 0x5a38 <vfprintf+0x55e>
    5a26:	84 e0       	ldi	r24, 0x04	; 4
    5a28:	a8 0e       	add	r10, r24
    5a2a:	b1 1c       	adc	r11, r1
    5a2c:	f6 01       	movw	r30, r12
    5a2e:	60 81       	ld	r22, Z
    5a30:	71 81       	ldd	r23, Z+1	; 0x01
    5a32:	82 81       	ldd	r24, Z+2	; 0x02
    5a34:	93 81       	ldd	r25, Z+3	; 0x03
    5a36:	08 c0       	rjmp	.+16     	; 0x5a48 <vfprintf+0x56e>
    5a38:	f2 e0       	ldi	r31, 0x02	; 2
    5a3a:	af 0e       	add	r10, r31
    5a3c:	b1 1c       	adc	r11, r1
    5a3e:	f6 01       	movw	r30, r12
    5a40:	60 81       	ld	r22, Z
    5a42:	71 81       	ldd	r23, Z+1	; 0x01
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	a3 01       	movw	r20, r6
    5a4a:	c7 d4       	rcall	.+2446   	; 0x63da <__ultoa_invert>
    5a4c:	c8 2e       	mov	r12, r24
    5a4e:	c6 18       	sub	r12, r6
    5a50:	0f 77       	andi	r16, 0x7F	; 127
    5a52:	90 2e       	mov	r9, r16
    5a54:	96 fe       	sbrs	r9, 6
    5a56:	0b c0       	rjmp	.+22     	; 0x5a6e <vfprintf+0x594>
    5a58:	09 2d       	mov	r16, r9
    5a5a:	0e 7f       	andi	r16, 0xFE	; 254
    5a5c:	c1 16       	cp	r12, r17
    5a5e:	50 f4       	brcc	.+20     	; 0x5a74 <vfprintf+0x59a>
    5a60:	94 fe       	sbrs	r9, 4
    5a62:	0a c0       	rjmp	.+20     	; 0x5a78 <vfprintf+0x59e>
    5a64:	92 fc       	sbrc	r9, 2
    5a66:	08 c0       	rjmp	.+16     	; 0x5a78 <vfprintf+0x59e>
    5a68:	09 2d       	mov	r16, r9
    5a6a:	0e 7e       	andi	r16, 0xEE	; 238
    5a6c:	05 c0       	rjmp	.+10     	; 0x5a78 <vfprintf+0x59e>
    5a6e:	dc 2c       	mov	r13, r12
    5a70:	09 2d       	mov	r16, r9
    5a72:	03 c0       	rjmp	.+6      	; 0x5a7a <vfprintf+0x5a0>
    5a74:	dc 2c       	mov	r13, r12
    5a76:	01 c0       	rjmp	.+2      	; 0x5a7a <vfprintf+0x5a0>
    5a78:	d1 2e       	mov	r13, r17
    5a7a:	04 ff       	sbrs	r16, 4
    5a7c:	0d c0       	rjmp	.+26     	; 0x5a98 <vfprintf+0x5be>
    5a7e:	fe 01       	movw	r30, r28
    5a80:	ec 0d       	add	r30, r12
    5a82:	f1 1d       	adc	r31, r1
    5a84:	80 81       	ld	r24, Z
    5a86:	80 33       	cpi	r24, 0x30	; 48
    5a88:	11 f4       	brne	.+4      	; 0x5a8e <vfprintf+0x5b4>
    5a8a:	09 7e       	andi	r16, 0xE9	; 233
    5a8c:	09 c0       	rjmp	.+18     	; 0x5aa0 <vfprintf+0x5c6>
    5a8e:	02 ff       	sbrs	r16, 2
    5a90:	06 c0       	rjmp	.+12     	; 0x5a9e <vfprintf+0x5c4>
    5a92:	d3 94       	inc	r13
    5a94:	d3 94       	inc	r13
    5a96:	04 c0       	rjmp	.+8      	; 0x5aa0 <vfprintf+0x5c6>
    5a98:	80 2f       	mov	r24, r16
    5a9a:	86 78       	andi	r24, 0x86	; 134
    5a9c:	09 f0       	breq	.+2      	; 0x5aa0 <vfprintf+0x5c6>
    5a9e:	d3 94       	inc	r13
    5aa0:	03 fd       	sbrc	r16, 3
    5aa2:	10 c0       	rjmp	.+32     	; 0x5ac4 <vfprintf+0x5ea>
    5aa4:	00 ff       	sbrs	r16, 0
    5aa6:	06 c0       	rjmp	.+12     	; 0x5ab4 <vfprintf+0x5da>
    5aa8:	1c 2d       	mov	r17, r12
    5aaa:	d5 14       	cp	r13, r5
    5aac:	78 f4       	brcc	.+30     	; 0x5acc <vfprintf+0x5f2>
    5aae:	15 0d       	add	r17, r5
    5ab0:	1d 19       	sub	r17, r13
    5ab2:	0c c0       	rjmp	.+24     	; 0x5acc <vfprintf+0x5f2>
    5ab4:	d5 14       	cp	r13, r5
    5ab6:	50 f4       	brcc	.+20     	; 0x5acc <vfprintf+0x5f2>
    5ab8:	b7 01       	movw	r22, r14
    5aba:	80 e2       	ldi	r24, 0x20	; 32
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	e0 d3       	rcall	.+1984   	; 0x6280 <fputc>
    5ac0:	d3 94       	inc	r13
    5ac2:	f8 cf       	rjmp	.-16     	; 0x5ab4 <vfprintf+0x5da>
    5ac4:	d5 14       	cp	r13, r5
    5ac6:	10 f4       	brcc	.+4      	; 0x5acc <vfprintf+0x5f2>
    5ac8:	5d 18       	sub	r5, r13
    5aca:	01 c0       	rjmp	.+2      	; 0x5ace <vfprintf+0x5f4>
    5acc:	51 2c       	mov	r5, r1
    5ace:	04 ff       	sbrs	r16, 4
    5ad0:	0f c0       	rjmp	.+30     	; 0x5af0 <vfprintf+0x616>
    5ad2:	b7 01       	movw	r22, r14
    5ad4:	80 e3       	ldi	r24, 0x30	; 48
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
    5ad8:	d3 d3       	rcall	.+1958   	; 0x6280 <fputc>
    5ada:	02 ff       	sbrs	r16, 2
    5adc:	16 c0       	rjmp	.+44     	; 0x5b0a <vfprintf+0x630>
    5ade:	01 fd       	sbrc	r16, 1
    5ae0:	03 c0       	rjmp	.+6      	; 0x5ae8 <vfprintf+0x60e>
    5ae2:	88 e7       	ldi	r24, 0x78	; 120
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	02 c0       	rjmp	.+4      	; 0x5aec <vfprintf+0x612>
    5ae8:	88 e5       	ldi	r24, 0x58	; 88
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	b7 01       	movw	r22, r14
    5aee:	0c c0       	rjmp	.+24     	; 0x5b08 <vfprintf+0x62e>
    5af0:	80 2f       	mov	r24, r16
    5af2:	86 78       	andi	r24, 0x86	; 134
    5af4:	51 f0       	breq	.+20     	; 0x5b0a <vfprintf+0x630>
    5af6:	01 ff       	sbrs	r16, 1
    5af8:	02 c0       	rjmp	.+4      	; 0x5afe <vfprintf+0x624>
    5afa:	8b e2       	ldi	r24, 0x2B	; 43
    5afc:	01 c0       	rjmp	.+2      	; 0x5b00 <vfprintf+0x626>
    5afe:	80 e2       	ldi	r24, 0x20	; 32
    5b00:	07 fd       	sbrc	r16, 7
    5b02:	8d e2       	ldi	r24, 0x2D	; 45
    5b04:	b7 01       	movw	r22, r14
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	bb d3       	rcall	.+1910   	; 0x6280 <fputc>
    5b0a:	c1 16       	cp	r12, r17
    5b0c:	30 f4       	brcc	.+12     	; 0x5b1a <vfprintf+0x640>
    5b0e:	b7 01       	movw	r22, r14
    5b10:	80 e3       	ldi	r24, 0x30	; 48
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	b5 d3       	rcall	.+1898   	; 0x6280 <fputc>
    5b16:	11 50       	subi	r17, 0x01	; 1
    5b18:	f8 cf       	rjmp	.-16     	; 0x5b0a <vfprintf+0x630>
    5b1a:	ca 94       	dec	r12
    5b1c:	f3 01       	movw	r30, r6
    5b1e:	ec 0d       	add	r30, r12
    5b20:	f1 1d       	adc	r31, r1
    5b22:	80 81       	ld	r24, Z
    5b24:	b7 01       	movw	r22, r14
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	ab d3       	rcall	.+1878   	; 0x6280 <fputc>
    5b2a:	c1 10       	cpse	r12, r1
    5b2c:	f6 cf       	rjmp	.-20     	; 0x5b1a <vfprintf+0x640>
    5b2e:	15 c0       	rjmp	.+42     	; 0x5b5a <vfprintf+0x680>
    5b30:	f4 e0       	ldi	r31, 0x04	; 4
    5b32:	f5 15       	cp	r31, r5
    5b34:	50 f5       	brcc	.+84     	; 0x5b8a <vfprintf+0x6b0>
    5b36:	84 e0       	ldi	r24, 0x04	; 4
    5b38:	58 1a       	sub	r5, r24
    5b3a:	93 fe       	sbrs	r9, 3
    5b3c:	1e c0       	rjmp	.+60     	; 0x5b7a <vfprintf+0x6a0>
    5b3e:	01 11       	cpse	r16, r1
    5b40:	25 c0       	rjmp	.+74     	; 0x5b8c <vfprintf+0x6b2>
    5b42:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b44:	23 ff       	sbrs	r18, 3
    5b46:	27 c0       	rjmp	.+78     	; 0x5b96 <vfprintf+0x6bc>
    5b48:	0a e9       	ldi	r16, 0x9A	; 154
    5b4a:	11 e0       	ldi	r17, 0x01	; 1
    5b4c:	39 2d       	mov	r19, r9
    5b4e:	30 71       	andi	r19, 0x10	; 16
    5b50:	93 2e       	mov	r9, r19
    5b52:	f8 01       	movw	r30, r16
    5b54:	84 91       	lpm	r24, Z
    5b56:	81 11       	cpse	r24, r1
    5b58:	21 c0       	rjmp	.+66     	; 0x5b9c <vfprintf+0x6c2>
    5b5a:	55 20       	and	r5, r5
    5b5c:	09 f4       	brne	.+2      	; 0x5b60 <vfprintf+0x686>
    5b5e:	fc cc       	rjmp	.-1544   	; 0x5558 <vfprintf+0x7e>
    5b60:	b7 01       	movw	r22, r14
    5b62:	80 e2       	ldi	r24, 0x20	; 32
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	8c d3       	rcall	.+1816   	; 0x6280 <fputc>
    5b68:	5a 94       	dec	r5
    5b6a:	f7 cf       	rjmp	.-18     	; 0x5b5a <vfprintf+0x680>
    5b6c:	f7 01       	movw	r30, r14
    5b6e:	86 81       	ldd	r24, Z+6	; 0x06
    5b70:	97 81       	ldd	r25, Z+7	; 0x07
    5b72:	23 c0       	rjmp	.+70     	; 0x5bba <vfprintf+0x6e0>
    5b74:	8f ef       	ldi	r24, 0xFF	; 255
    5b76:	9f ef       	ldi	r25, 0xFF	; 255
    5b78:	20 c0       	rjmp	.+64     	; 0x5bba <vfprintf+0x6e0>
    5b7a:	b7 01       	movw	r22, r14
    5b7c:	80 e2       	ldi	r24, 0x20	; 32
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	7f d3       	rcall	.+1790   	; 0x6280 <fputc>
    5b82:	5a 94       	dec	r5
    5b84:	51 10       	cpse	r5, r1
    5b86:	f9 cf       	rjmp	.-14     	; 0x5b7a <vfprintf+0x6a0>
    5b88:	da cf       	rjmp	.-76     	; 0x5b3e <vfprintf+0x664>
    5b8a:	51 2c       	mov	r5, r1
    5b8c:	b7 01       	movw	r22, r14
    5b8e:	80 2f       	mov	r24, r16
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	76 d3       	rcall	.+1772   	; 0x6280 <fputc>
    5b94:	d6 cf       	rjmp	.-84     	; 0x5b42 <vfprintf+0x668>
    5b96:	0e e9       	ldi	r16, 0x9E	; 158
    5b98:	11 e0       	ldi	r17, 0x01	; 1
    5b9a:	d8 cf       	rjmp	.-80     	; 0x5b4c <vfprintf+0x672>
    5b9c:	91 10       	cpse	r9, r1
    5b9e:	80 52       	subi	r24, 0x20	; 32
    5ba0:	b7 01       	movw	r22, r14
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	6d d3       	rcall	.+1754   	; 0x6280 <fputc>
    5ba6:	0f 5f       	subi	r16, 0xFF	; 255
    5ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    5baa:	d3 cf       	rjmp	.-90     	; 0x5b52 <vfprintf+0x678>
    5bac:	23 e0       	ldi	r18, 0x03	; 3
    5bae:	25 15       	cp	r18, r5
    5bb0:	10 f4       	brcc	.+4      	; 0x5bb6 <vfprintf+0x6dc>
    5bb2:	83 e0       	ldi	r24, 0x03	; 3
    5bb4:	c1 cf       	rjmp	.-126    	; 0x5b38 <vfprintf+0x65e>
    5bb6:	51 2c       	mov	r5, r1
    5bb8:	c4 cf       	rjmp	.-120    	; 0x5b42 <vfprintf+0x668>
    5bba:	60 96       	adiw	r28, 0x10	; 16
    5bbc:	0f b6       	in	r0, 0x3f	; 63
    5bbe:	f8 94       	cli
    5bc0:	de bf       	out	0x3e, r29	; 62
    5bc2:	0f be       	out	0x3f, r0	; 63
    5bc4:	cd bf       	out	0x3d, r28	; 61
    5bc6:	df 91       	pop	r29
    5bc8:	cf 91       	pop	r28
    5bca:	1f 91       	pop	r17
    5bcc:	0f 91       	pop	r16
    5bce:	ff 90       	pop	r15
    5bd0:	ef 90       	pop	r14
    5bd2:	df 90       	pop	r13
    5bd4:	cf 90       	pop	r12
    5bd6:	bf 90       	pop	r11
    5bd8:	af 90       	pop	r10
    5bda:	9f 90       	pop	r9
    5bdc:	8f 90       	pop	r8
    5bde:	7f 90       	pop	r7
    5be0:	6f 90       	pop	r6
    5be2:	5f 90       	pop	r5
    5be4:	4f 90       	pop	r4
    5be6:	3f 90       	pop	r3
    5be8:	2f 90       	pop	r2
    5bea:	08 95       	ret

00005bec <__divsf3>:
    5bec:	12 d0       	rcall	.+36     	; 0x5c12 <__divsf3x>
    5bee:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__fp_round>
    5bf2:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__fp_pscB>
    5bf6:	58 f0       	brcs	.+22     	; 0x5c0e <__divsf3+0x22>
    5bf8:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__fp_pscA>
    5bfc:	40 f0       	brcs	.+16     	; 0x5c0e <__divsf3+0x22>
    5bfe:	29 f4       	brne	.+10     	; 0x5c0a <__divsf3+0x1e>
    5c00:	5f 3f       	cpi	r21, 0xFF	; 255
    5c02:	29 f0       	breq	.+10     	; 0x5c0e <__divsf3+0x22>
    5c04:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__fp_inf>
    5c08:	51 11       	cpse	r21, r1
    5c0a:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__fp_szero>
    5c0e:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__fp_nan>

00005c12 <__divsf3x>:
    5c12:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fp_split3>
    5c16:	68 f3       	brcs	.-38     	; 0x5bf2 <__divsf3+0x6>

00005c18 <__divsf3_pse>:
    5c18:	99 23       	and	r25, r25
    5c1a:	b1 f3       	breq	.-20     	; 0x5c08 <__divsf3+0x1c>
    5c1c:	55 23       	and	r21, r21
    5c1e:	91 f3       	breq	.-28     	; 0x5c04 <__divsf3+0x18>
    5c20:	95 1b       	sub	r25, r21
    5c22:	55 0b       	sbc	r21, r21
    5c24:	bb 27       	eor	r27, r27
    5c26:	aa 27       	eor	r26, r26
    5c28:	62 17       	cp	r22, r18
    5c2a:	73 07       	cpc	r23, r19
    5c2c:	84 07       	cpc	r24, r20
    5c2e:	38 f0       	brcs	.+14     	; 0x5c3e <__divsf3_pse+0x26>
    5c30:	9f 5f       	subi	r25, 0xFF	; 255
    5c32:	5f 4f       	sbci	r21, 0xFF	; 255
    5c34:	22 0f       	add	r18, r18
    5c36:	33 1f       	adc	r19, r19
    5c38:	44 1f       	adc	r20, r20
    5c3a:	aa 1f       	adc	r26, r26
    5c3c:	a9 f3       	breq	.-22     	; 0x5c28 <__divsf3_pse+0x10>
    5c3e:	35 d0       	rcall	.+106    	; 0x5caa <__divsf3_pse+0x92>
    5c40:	0e 2e       	mov	r0, r30
    5c42:	3a f0       	brmi	.+14     	; 0x5c52 <__divsf3_pse+0x3a>
    5c44:	e0 e8       	ldi	r30, 0x80	; 128
    5c46:	32 d0       	rcall	.+100    	; 0x5cac <__divsf3_pse+0x94>
    5c48:	91 50       	subi	r25, 0x01	; 1
    5c4a:	50 40       	sbci	r21, 0x00	; 0
    5c4c:	e6 95       	lsr	r30
    5c4e:	00 1c       	adc	r0, r0
    5c50:	ca f7       	brpl	.-14     	; 0x5c44 <__divsf3_pse+0x2c>
    5c52:	2b d0       	rcall	.+86     	; 0x5caa <__divsf3_pse+0x92>
    5c54:	fe 2f       	mov	r31, r30
    5c56:	29 d0       	rcall	.+82     	; 0x5caa <__divsf3_pse+0x92>
    5c58:	66 0f       	add	r22, r22
    5c5a:	77 1f       	adc	r23, r23
    5c5c:	88 1f       	adc	r24, r24
    5c5e:	bb 1f       	adc	r27, r27
    5c60:	26 17       	cp	r18, r22
    5c62:	37 07       	cpc	r19, r23
    5c64:	48 07       	cpc	r20, r24
    5c66:	ab 07       	cpc	r26, r27
    5c68:	b0 e8       	ldi	r27, 0x80	; 128
    5c6a:	09 f0       	breq	.+2      	; 0x5c6e <__divsf3_pse+0x56>
    5c6c:	bb 0b       	sbc	r27, r27
    5c6e:	80 2d       	mov	r24, r0
    5c70:	bf 01       	movw	r22, r30
    5c72:	ff 27       	eor	r31, r31
    5c74:	93 58       	subi	r25, 0x83	; 131
    5c76:	5f 4f       	sbci	r21, 0xFF	; 255
    5c78:	3a f0       	brmi	.+14     	; 0x5c88 <__divsf3_pse+0x70>
    5c7a:	9e 3f       	cpi	r25, 0xFE	; 254
    5c7c:	51 05       	cpc	r21, r1
    5c7e:	78 f0       	brcs	.+30     	; 0x5c9e <__divsf3_pse+0x86>
    5c80:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__fp_inf>
    5c84:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__fp_szero>
    5c88:	5f 3f       	cpi	r21, 0xFF	; 255
    5c8a:	e4 f3       	brlt	.-8      	; 0x5c84 <__divsf3_pse+0x6c>
    5c8c:	98 3e       	cpi	r25, 0xE8	; 232
    5c8e:	d4 f3       	brlt	.-12     	; 0x5c84 <__divsf3_pse+0x6c>
    5c90:	86 95       	lsr	r24
    5c92:	77 95       	ror	r23
    5c94:	67 95       	ror	r22
    5c96:	b7 95       	ror	r27
    5c98:	f7 95       	ror	r31
    5c9a:	9f 5f       	subi	r25, 0xFF	; 255
    5c9c:	c9 f7       	brne	.-14     	; 0x5c90 <__divsf3_pse+0x78>
    5c9e:	88 0f       	add	r24, r24
    5ca0:	91 1d       	adc	r25, r1
    5ca2:	96 95       	lsr	r25
    5ca4:	87 95       	ror	r24
    5ca6:	97 f9       	bld	r25, 7
    5ca8:	08 95       	ret
    5caa:	e1 e0       	ldi	r30, 0x01	; 1
    5cac:	66 0f       	add	r22, r22
    5cae:	77 1f       	adc	r23, r23
    5cb0:	88 1f       	adc	r24, r24
    5cb2:	bb 1f       	adc	r27, r27
    5cb4:	62 17       	cp	r22, r18
    5cb6:	73 07       	cpc	r23, r19
    5cb8:	84 07       	cpc	r24, r20
    5cba:	ba 07       	cpc	r27, r26
    5cbc:	20 f0       	brcs	.+8      	; 0x5cc6 <__divsf3_pse+0xae>
    5cbe:	62 1b       	sub	r22, r18
    5cc0:	73 0b       	sbc	r23, r19
    5cc2:	84 0b       	sbc	r24, r20
    5cc4:	ba 0b       	sbc	r27, r26
    5cc6:	ee 1f       	adc	r30, r30
    5cc8:	88 f7       	brcc	.-30     	; 0x5cac <__divsf3_pse+0x94>
    5cca:	e0 95       	com	r30
    5ccc:	08 95       	ret

00005cce <__floatunsisf>:
    5cce:	e8 94       	clt
    5cd0:	09 c0       	rjmp	.+18     	; 0x5ce4 <__floatsisf+0x12>

00005cd2 <__floatsisf>:
    5cd2:	97 fb       	bst	r25, 7
    5cd4:	3e f4       	brtc	.+14     	; 0x5ce4 <__floatsisf+0x12>
    5cd6:	90 95       	com	r25
    5cd8:	80 95       	com	r24
    5cda:	70 95       	com	r23
    5cdc:	61 95       	neg	r22
    5cde:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce4:	99 23       	and	r25, r25
    5ce6:	a9 f0       	breq	.+42     	; 0x5d12 <__floatsisf+0x40>
    5ce8:	f9 2f       	mov	r31, r25
    5cea:	96 e9       	ldi	r25, 0x96	; 150
    5cec:	bb 27       	eor	r27, r27
    5cee:	93 95       	inc	r25
    5cf0:	f6 95       	lsr	r31
    5cf2:	87 95       	ror	r24
    5cf4:	77 95       	ror	r23
    5cf6:	67 95       	ror	r22
    5cf8:	b7 95       	ror	r27
    5cfa:	f1 11       	cpse	r31, r1
    5cfc:	f8 cf       	rjmp	.-16     	; 0x5cee <__floatsisf+0x1c>
    5cfe:	fa f4       	brpl	.+62     	; 0x5d3e <__floatsisf+0x6c>
    5d00:	bb 0f       	add	r27, r27
    5d02:	11 f4       	brne	.+4      	; 0x5d08 <__floatsisf+0x36>
    5d04:	60 ff       	sbrs	r22, 0
    5d06:	1b c0       	rjmp	.+54     	; 0x5d3e <__floatsisf+0x6c>
    5d08:	6f 5f       	subi	r22, 0xFF	; 255
    5d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d10:	16 c0       	rjmp	.+44     	; 0x5d3e <__floatsisf+0x6c>
    5d12:	88 23       	and	r24, r24
    5d14:	11 f0       	breq	.+4      	; 0x5d1a <__floatsisf+0x48>
    5d16:	96 e9       	ldi	r25, 0x96	; 150
    5d18:	11 c0       	rjmp	.+34     	; 0x5d3c <__floatsisf+0x6a>
    5d1a:	77 23       	and	r23, r23
    5d1c:	21 f0       	breq	.+8      	; 0x5d26 <__floatsisf+0x54>
    5d1e:	9e e8       	ldi	r25, 0x8E	; 142
    5d20:	87 2f       	mov	r24, r23
    5d22:	76 2f       	mov	r23, r22
    5d24:	05 c0       	rjmp	.+10     	; 0x5d30 <__floatsisf+0x5e>
    5d26:	66 23       	and	r22, r22
    5d28:	71 f0       	breq	.+28     	; 0x5d46 <__floatsisf+0x74>
    5d2a:	96 e8       	ldi	r25, 0x86	; 134
    5d2c:	86 2f       	mov	r24, r22
    5d2e:	70 e0       	ldi	r23, 0x00	; 0
    5d30:	60 e0       	ldi	r22, 0x00	; 0
    5d32:	2a f0       	brmi	.+10     	; 0x5d3e <__floatsisf+0x6c>
    5d34:	9a 95       	dec	r25
    5d36:	66 0f       	add	r22, r22
    5d38:	77 1f       	adc	r23, r23
    5d3a:	88 1f       	adc	r24, r24
    5d3c:	da f7       	brpl	.-10     	; 0x5d34 <__floatsisf+0x62>
    5d3e:	88 0f       	add	r24, r24
    5d40:	96 95       	lsr	r25
    5d42:	87 95       	ror	r24
    5d44:	97 f9       	bld	r25, 7
    5d46:	08 95       	ret

00005d48 <__udivmodsi4>:
    5d48:	a1 e2       	ldi	r26, 0x21	; 33
    5d4a:	1a 2e       	mov	r1, r26
    5d4c:	aa 1b       	sub	r26, r26
    5d4e:	bb 1b       	sub	r27, r27
    5d50:	fd 01       	movw	r30, r26
    5d52:	0d c0       	rjmp	.+26     	; 0x5d6e <__udivmodsi4_ep>

00005d54 <__udivmodsi4_loop>:
    5d54:	aa 1f       	adc	r26, r26
    5d56:	bb 1f       	adc	r27, r27
    5d58:	ee 1f       	adc	r30, r30
    5d5a:	ff 1f       	adc	r31, r31
    5d5c:	a2 17       	cp	r26, r18
    5d5e:	b3 07       	cpc	r27, r19
    5d60:	e4 07       	cpc	r30, r20
    5d62:	f5 07       	cpc	r31, r21
    5d64:	20 f0       	brcs	.+8      	; 0x5d6e <__udivmodsi4_ep>
    5d66:	a2 1b       	sub	r26, r18
    5d68:	b3 0b       	sbc	r27, r19
    5d6a:	e4 0b       	sbc	r30, r20
    5d6c:	f5 0b       	sbc	r31, r21

00005d6e <__udivmodsi4_ep>:
    5d6e:	66 1f       	adc	r22, r22
    5d70:	77 1f       	adc	r23, r23
    5d72:	88 1f       	adc	r24, r24
    5d74:	99 1f       	adc	r25, r25
    5d76:	1a 94       	dec	r1
    5d78:	69 f7       	brne	.-38     	; 0x5d54 <__udivmodsi4_loop>
    5d7a:	60 95       	com	r22
    5d7c:	70 95       	com	r23
    5d7e:	80 95       	com	r24
    5d80:	90 95       	com	r25
    5d82:	9b 01       	movw	r18, r22
    5d84:	ac 01       	movw	r20, r24
    5d86:	bd 01       	movw	r22, r26
    5d88:	cf 01       	movw	r24, r30
    5d8a:	08 95       	ret

00005d8c <__tablejump2__>:
    5d8c:	ee 0f       	add	r30, r30
    5d8e:	ff 1f       	adc	r31, r31
    5d90:	88 1f       	adc	r24, r24
    5d92:	8b bf       	out	0x3b, r24	; 59
    5d94:	07 90       	elpm	r0, Z+
    5d96:	f6 91       	elpm	r31, Z
    5d98:	e0 2d       	mov	r30, r0
    5d9a:	19 94       	eijmp

00005d9c <malloc>:
    5d9c:	0f 93       	push	r16
    5d9e:	1f 93       	push	r17
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	82 30       	cpi	r24, 0x02	; 2
    5da6:	91 05       	cpc	r25, r1
    5da8:	10 f4       	brcc	.+4      	; 0x5dae <malloc+0x12>
    5daa:	82 e0       	ldi	r24, 0x02	; 2
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	e0 91 fd 12 	lds	r30, 0x12FD	; 0x8012fd <__flp>
    5db2:	f0 91 fe 12 	lds	r31, 0x12FE	; 0x8012fe <__flp+0x1>
    5db6:	20 e0       	ldi	r18, 0x00	; 0
    5db8:	30 e0       	ldi	r19, 0x00	; 0
    5dba:	a0 e0       	ldi	r26, 0x00	; 0
    5dbc:	b0 e0       	ldi	r27, 0x00	; 0
    5dbe:	30 97       	sbiw	r30, 0x00	; 0
    5dc0:	19 f1       	breq	.+70     	; 0x5e08 <malloc+0x6c>
    5dc2:	40 81       	ld	r20, Z
    5dc4:	51 81       	ldd	r21, Z+1	; 0x01
    5dc6:	02 81       	ldd	r16, Z+2	; 0x02
    5dc8:	13 81       	ldd	r17, Z+3	; 0x03
    5dca:	48 17       	cp	r20, r24
    5dcc:	59 07       	cpc	r21, r25
    5dce:	c8 f0       	brcs	.+50     	; 0x5e02 <malloc+0x66>
    5dd0:	84 17       	cp	r24, r20
    5dd2:	95 07       	cpc	r25, r21
    5dd4:	69 f4       	brne	.+26     	; 0x5df0 <malloc+0x54>
    5dd6:	10 97       	sbiw	r26, 0x00	; 0
    5dd8:	31 f0       	breq	.+12     	; 0x5de6 <malloc+0x4a>
    5dda:	12 96       	adiw	r26, 0x02	; 2
    5ddc:	0c 93       	st	X, r16
    5dde:	12 97       	sbiw	r26, 0x02	; 2
    5de0:	13 96       	adiw	r26, 0x03	; 3
    5de2:	1c 93       	st	X, r17
    5de4:	27 c0       	rjmp	.+78     	; 0x5e34 <malloc+0x98>
    5de6:	00 93 fd 12 	sts	0x12FD, r16	; 0x8012fd <__flp>
    5dea:	10 93 fe 12 	sts	0x12FE, r17	; 0x8012fe <__flp+0x1>
    5dee:	22 c0       	rjmp	.+68     	; 0x5e34 <malloc+0x98>
    5df0:	21 15       	cp	r18, r1
    5df2:	31 05       	cpc	r19, r1
    5df4:	19 f0       	breq	.+6      	; 0x5dfc <malloc+0x60>
    5df6:	42 17       	cp	r20, r18
    5df8:	53 07       	cpc	r21, r19
    5dfa:	18 f4       	brcc	.+6      	; 0x5e02 <malloc+0x66>
    5dfc:	9a 01       	movw	r18, r20
    5dfe:	bd 01       	movw	r22, r26
    5e00:	ef 01       	movw	r28, r30
    5e02:	df 01       	movw	r26, r30
    5e04:	f8 01       	movw	r30, r16
    5e06:	db cf       	rjmp	.-74     	; 0x5dbe <malloc+0x22>
    5e08:	21 15       	cp	r18, r1
    5e0a:	31 05       	cpc	r19, r1
    5e0c:	f9 f0       	breq	.+62     	; 0x5e4c <malloc+0xb0>
    5e0e:	28 1b       	sub	r18, r24
    5e10:	39 0b       	sbc	r19, r25
    5e12:	24 30       	cpi	r18, 0x04	; 4
    5e14:	31 05       	cpc	r19, r1
    5e16:	80 f4       	brcc	.+32     	; 0x5e38 <malloc+0x9c>
    5e18:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e1c:	61 15       	cp	r22, r1
    5e1e:	71 05       	cpc	r23, r1
    5e20:	21 f0       	breq	.+8      	; 0x5e2a <malloc+0x8e>
    5e22:	fb 01       	movw	r30, r22
    5e24:	93 83       	std	Z+3, r25	; 0x03
    5e26:	82 83       	std	Z+2, r24	; 0x02
    5e28:	04 c0       	rjmp	.+8      	; 0x5e32 <malloc+0x96>
    5e2a:	90 93 fe 12 	sts	0x12FE, r25	; 0x8012fe <__flp+0x1>
    5e2e:	80 93 fd 12 	sts	0x12FD, r24	; 0x8012fd <__flp>
    5e32:	fe 01       	movw	r30, r28
    5e34:	32 96       	adiw	r30, 0x02	; 2
    5e36:	44 c0       	rjmp	.+136    	; 0x5ec0 <malloc+0x124>
    5e38:	fe 01       	movw	r30, r28
    5e3a:	e2 0f       	add	r30, r18
    5e3c:	f3 1f       	adc	r31, r19
    5e3e:	81 93       	st	Z+, r24
    5e40:	91 93       	st	Z+, r25
    5e42:	22 50       	subi	r18, 0x02	; 2
    5e44:	31 09       	sbc	r19, r1
    5e46:	39 83       	std	Y+1, r19	; 0x01
    5e48:	28 83       	st	Y, r18
    5e4a:	3a c0       	rjmp	.+116    	; 0x5ec0 <malloc+0x124>
    5e4c:	20 91 fb 12 	lds	r18, 0x12FB	; 0x8012fb <__brkval>
    5e50:	30 91 fc 12 	lds	r19, 0x12FC	; 0x8012fc <__brkval+0x1>
    5e54:	23 2b       	or	r18, r19
    5e56:	41 f4       	brne	.+16     	; 0x5e68 <malloc+0xcc>
    5e58:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5e5c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5e60:	30 93 fc 12 	sts	0x12FC, r19	; 0x8012fc <__brkval+0x1>
    5e64:	20 93 fb 12 	sts	0x12FB, r18	; 0x8012fb <__brkval>
    5e68:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5e6c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5e70:	21 15       	cp	r18, r1
    5e72:	31 05       	cpc	r19, r1
    5e74:	41 f4       	brne	.+16     	; 0x5e86 <malloc+0xea>
    5e76:	2d b7       	in	r18, 0x3d	; 61
    5e78:	3e b7       	in	r19, 0x3e	; 62
    5e7a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5e7e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5e82:	24 1b       	sub	r18, r20
    5e84:	35 0b       	sbc	r19, r21
    5e86:	e0 91 fb 12 	lds	r30, 0x12FB	; 0x8012fb <__brkval>
    5e8a:	f0 91 fc 12 	lds	r31, 0x12FC	; 0x8012fc <__brkval+0x1>
    5e8e:	e2 17       	cp	r30, r18
    5e90:	f3 07       	cpc	r31, r19
    5e92:	a0 f4       	brcc	.+40     	; 0x5ebc <malloc+0x120>
    5e94:	2e 1b       	sub	r18, r30
    5e96:	3f 0b       	sbc	r19, r31
    5e98:	28 17       	cp	r18, r24
    5e9a:	39 07       	cpc	r19, r25
    5e9c:	78 f0       	brcs	.+30     	; 0x5ebc <malloc+0x120>
    5e9e:	ac 01       	movw	r20, r24
    5ea0:	4e 5f       	subi	r20, 0xFE	; 254
    5ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ea4:	24 17       	cp	r18, r20
    5ea6:	35 07       	cpc	r19, r21
    5ea8:	48 f0       	brcs	.+18     	; 0x5ebc <malloc+0x120>
    5eaa:	4e 0f       	add	r20, r30
    5eac:	5f 1f       	adc	r21, r31
    5eae:	50 93 fc 12 	sts	0x12FC, r21	; 0x8012fc <__brkval+0x1>
    5eb2:	40 93 fb 12 	sts	0x12FB, r20	; 0x8012fb <__brkval>
    5eb6:	81 93       	st	Z+, r24
    5eb8:	91 93       	st	Z+, r25
    5eba:	02 c0       	rjmp	.+4      	; 0x5ec0 <malloc+0x124>
    5ebc:	e0 e0       	ldi	r30, 0x00	; 0
    5ebe:	f0 e0       	ldi	r31, 0x00	; 0
    5ec0:	cf 01       	movw	r24, r30
    5ec2:	df 91       	pop	r29
    5ec4:	cf 91       	pop	r28
    5ec6:	1f 91       	pop	r17
    5ec8:	0f 91       	pop	r16
    5eca:	08 95       	ret

00005ecc <free>:
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
    5ed0:	00 97       	sbiw	r24, 0x00	; 0
    5ed2:	09 f4       	brne	.+2      	; 0x5ed6 <free+0xa>
    5ed4:	81 c0       	rjmp	.+258    	; 0x5fd8 <free+0x10c>
    5ed6:	fc 01       	movw	r30, r24
    5ed8:	32 97       	sbiw	r30, 0x02	; 2
    5eda:	13 82       	std	Z+3, r1	; 0x03
    5edc:	12 82       	std	Z+2, r1	; 0x02
    5ede:	a0 91 fd 12 	lds	r26, 0x12FD	; 0x8012fd <__flp>
    5ee2:	b0 91 fe 12 	lds	r27, 0x12FE	; 0x8012fe <__flp+0x1>
    5ee6:	10 97       	sbiw	r26, 0x00	; 0
    5ee8:	81 f4       	brne	.+32     	; 0x5f0a <free+0x3e>
    5eea:	20 81       	ld	r18, Z
    5eec:	31 81       	ldd	r19, Z+1	; 0x01
    5eee:	82 0f       	add	r24, r18
    5ef0:	93 1f       	adc	r25, r19
    5ef2:	20 91 fb 12 	lds	r18, 0x12FB	; 0x8012fb <__brkval>
    5ef6:	30 91 fc 12 	lds	r19, 0x12FC	; 0x8012fc <__brkval+0x1>
    5efa:	28 17       	cp	r18, r24
    5efc:	39 07       	cpc	r19, r25
    5efe:	51 f5       	brne	.+84     	; 0x5f54 <free+0x88>
    5f00:	f0 93 fc 12 	sts	0x12FC, r31	; 0x8012fc <__brkval+0x1>
    5f04:	e0 93 fb 12 	sts	0x12FB, r30	; 0x8012fb <__brkval>
    5f08:	67 c0       	rjmp	.+206    	; 0x5fd8 <free+0x10c>
    5f0a:	ed 01       	movw	r28, r26
    5f0c:	20 e0       	ldi	r18, 0x00	; 0
    5f0e:	30 e0       	ldi	r19, 0x00	; 0
    5f10:	ce 17       	cp	r28, r30
    5f12:	df 07       	cpc	r29, r31
    5f14:	40 f4       	brcc	.+16     	; 0x5f26 <free+0x5a>
    5f16:	4a 81       	ldd	r20, Y+2	; 0x02
    5f18:	5b 81       	ldd	r21, Y+3	; 0x03
    5f1a:	9e 01       	movw	r18, r28
    5f1c:	41 15       	cp	r20, r1
    5f1e:	51 05       	cpc	r21, r1
    5f20:	f1 f0       	breq	.+60     	; 0x5f5e <free+0x92>
    5f22:	ea 01       	movw	r28, r20
    5f24:	f5 cf       	rjmp	.-22     	; 0x5f10 <free+0x44>
    5f26:	d3 83       	std	Z+3, r29	; 0x03
    5f28:	c2 83       	std	Z+2, r28	; 0x02
    5f2a:	40 81       	ld	r20, Z
    5f2c:	51 81       	ldd	r21, Z+1	; 0x01
    5f2e:	84 0f       	add	r24, r20
    5f30:	95 1f       	adc	r25, r21
    5f32:	c8 17       	cp	r28, r24
    5f34:	d9 07       	cpc	r29, r25
    5f36:	59 f4       	brne	.+22     	; 0x5f4e <free+0x82>
    5f38:	88 81       	ld	r24, Y
    5f3a:	99 81       	ldd	r25, Y+1	; 0x01
    5f3c:	84 0f       	add	r24, r20
    5f3e:	95 1f       	adc	r25, r21
    5f40:	02 96       	adiw	r24, 0x02	; 2
    5f42:	91 83       	std	Z+1, r25	; 0x01
    5f44:	80 83       	st	Z, r24
    5f46:	8a 81       	ldd	r24, Y+2	; 0x02
    5f48:	9b 81       	ldd	r25, Y+3	; 0x03
    5f4a:	93 83       	std	Z+3, r25	; 0x03
    5f4c:	82 83       	std	Z+2, r24	; 0x02
    5f4e:	21 15       	cp	r18, r1
    5f50:	31 05       	cpc	r19, r1
    5f52:	29 f4       	brne	.+10     	; 0x5f5e <free+0x92>
    5f54:	f0 93 fe 12 	sts	0x12FE, r31	; 0x8012fe <__flp+0x1>
    5f58:	e0 93 fd 12 	sts	0x12FD, r30	; 0x8012fd <__flp>
    5f5c:	3d c0       	rjmp	.+122    	; 0x5fd8 <free+0x10c>
    5f5e:	e9 01       	movw	r28, r18
    5f60:	fb 83       	std	Y+3, r31	; 0x03
    5f62:	ea 83       	std	Y+2, r30	; 0x02
    5f64:	49 91       	ld	r20, Y+
    5f66:	59 91       	ld	r21, Y+
    5f68:	c4 0f       	add	r28, r20
    5f6a:	d5 1f       	adc	r29, r21
    5f6c:	ec 17       	cp	r30, r28
    5f6e:	fd 07       	cpc	r31, r29
    5f70:	61 f4       	brne	.+24     	; 0x5f8a <free+0xbe>
    5f72:	80 81       	ld	r24, Z
    5f74:	91 81       	ldd	r25, Z+1	; 0x01
    5f76:	84 0f       	add	r24, r20
    5f78:	95 1f       	adc	r25, r21
    5f7a:	02 96       	adiw	r24, 0x02	; 2
    5f7c:	e9 01       	movw	r28, r18
    5f7e:	99 83       	std	Y+1, r25	; 0x01
    5f80:	88 83       	st	Y, r24
    5f82:	82 81       	ldd	r24, Z+2	; 0x02
    5f84:	93 81       	ldd	r25, Z+3	; 0x03
    5f86:	9b 83       	std	Y+3, r25	; 0x03
    5f88:	8a 83       	std	Y+2, r24	; 0x02
    5f8a:	e0 e0       	ldi	r30, 0x00	; 0
    5f8c:	f0 e0       	ldi	r31, 0x00	; 0
    5f8e:	12 96       	adiw	r26, 0x02	; 2
    5f90:	8d 91       	ld	r24, X+
    5f92:	9c 91       	ld	r25, X
    5f94:	13 97       	sbiw	r26, 0x03	; 3
    5f96:	00 97       	sbiw	r24, 0x00	; 0
    5f98:	19 f0       	breq	.+6      	; 0x5fa0 <free+0xd4>
    5f9a:	fd 01       	movw	r30, r26
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	f7 cf       	rjmp	.-18     	; 0x5f8e <free+0xc2>
    5fa0:	8d 91       	ld	r24, X+
    5fa2:	9c 91       	ld	r25, X
    5fa4:	11 97       	sbiw	r26, 0x01	; 1
    5fa6:	9d 01       	movw	r18, r26
    5fa8:	2e 5f       	subi	r18, 0xFE	; 254
    5faa:	3f 4f       	sbci	r19, 0xFF	; 255
    5fac:	82 0f       	add	r24, r18
    5fae:	93 1f       	adc	r25, r19
    5fb0:	20 91 fb 12 	lds	r18, 0x12FB	; 0x8012fb <__brkval>
    5fb4:	30 91 fc 12 	lds	r19, 0x12FC	; 0x8012fc <__brkval+0x1>
    5fb8:	28 17       	cp	r18, r24
    5fba:	39 07       	cpc	r19, r25
    5fbc:	69 f4       	brne	.+26     	; 0x5fd8 <free+0x10c>
    5fbe:	30 97       	sbiw	r30, 0x00	; 0
    5fc0:	29 f4       	brne	.+10     	; 0x5fcc <free+0x100>
    5fc2:	10 92 fe 12 	sts	0x12FE, r1	; 0x8012fe <__flp+0x1>
    5fc6:	10 92 fd 12 	sts	0x12FD, r1	; 0x8012fd <__flp>
    5fca:	02 c0       	rjmp	.+4      	; 0x5fd0 <free+0x104>
    5fcc:	13 82       	std	Z+3, r1	; 0x03
    5fce:	12 82       	std	Z+2, r1	; 0x02
    5fd0:	b0 93 fc 12 	sts	0x12FC, r27	; 0x8012fc <__brkval+0x1>
    5fd4:	a0 93 fb 12 	sts	0x12FB, r26	; 0x8012fb <__brkval>
    5fd8:	df 91       	pop	r29
    5fda:	cf 91       	pop	r28
    5fdc:	08 95       	ret

00005fde <abort>:
    5fde:	81 e0       	ldi	r24, 0x01	; 1
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	f8 94       	cli
    5fe4:	58 c2       	rjmp	.+1200   	; 0x6496 <_exit>

00005fe6 <__ftoa_engine>:
    5fe6:	28 30       	cpi	r18, 0x08	; 8
    5fe8:	08 f0       	brcs	.+2      	; 0x5fec <__ftoa_engine+0x6>
    5fea:	27 e0       	ldi	r18, 0x07	; 7
    5fec:	33 27       	eor	r19, r19
    5fee:	da 01       	movw	r26, r20
    5ff0:	99 0f       	add	r25, r25
    5ff2:	31 1d       	adc	r19, r1
    5ff4:	87 fd       	sbrc	r24, 7
    5ff6:	91 60       	ori	r25, 0x01	; 1
    5ff8:	00 96       	adiw	r24, 0x00	; 0
    5ffa:	61 05       	cpc	r22, r1
    5ffc:	71 05       	cpc	r23, r1
    5ffe:	39 f4       	brne	.+14     	; 0x600e <__ftoa_engine+0x28>
    6000:	32 60       	ori	r19, 0x02	; 2
    6002:	2e 5f       	subi	r18, 0xFE	; 254
    6004:	3d 93       	st	X+, r19
    6006:	30 e3       	ldi	r19, 0x30	; 48
    6008:	2a 95       	dec	r18
    600a:	e1 f7       	brne	.-8      	; 0x6004 <__ftoa_engine+0x1e>
    600c:	08 95       	ret
    600e:	9f 3f       	cpi	r25, 0xFF	; 255
    6010:	30 f0       	brcs	.+12     	; 0x601e <__ftoa_engine+0x38>
    6012:	80 38       	cpi	r24, 0x80	; 128
    6014:	71 05       	cpc	r23, r1
    6016:	61 05       	cpc	r22, r1
    6018:	09 f0       	breq	.+2      	; 0x601c <__ftoa_engine+0x36>
    601a:	3c 5f       	subi	r19, 0xFC	; 252
    601c:	3c 5f       	subi	r19, 0xFC	; 252
    601e:	3d 93       	st	X+, r19
    6020:	91 30       	cpi	r25, 0x01	; 1
    6022:	08 f0       	brcs	.+2      	; 0x6026 <__ftoa_engine+0x40>
    6024:	80 68       	ori	r24, 0x80	; 128
    6026:	91 1d       	adc	r25, r1
    6028:	df 93       	push	r29
    602a:	cf 93       	push	r28
    602c:	1f 93       	push	r17
    602e:	0f 93       	push	r16
    6030:	ff 92       	push	r15
    6032:	ef 92       	push	r14
    6034:	19 2f       	mov	r17, r25
    6036:	98 7f       	andi	r25, 0xF8	; 248
    6038:	96 95       	lsr	r25
    603a:	e9 2f       	mov	r30, r25
    603c:	96 95       	lsr	r25
    603e:	96 95       	lsr	r25
    6040:	e9 0f       	add	r30, r25
    6042:	ff 27       	eor	r31, r31
    6044:	e4 50       	subi	r30, 0x04	; 4
    6046:	fe 4f       	sbci	r31, 0xFE	; 254
    6048:	99 27       	eor	r25, r25
    604a:	33 27       	eor	r19, r19
    604c:	ee 24       	eor	r14, r14
    604e:	ff 24       	eor	r15, r15
    6050:	a7 01       	movw	r20, r14
    6052:	e7 01       	movw	r28, r14
    6054:	05 90       	lpm	r0, Z+
    6056:	08 94       	sec
    6058:	07 94       	ror	r0
    605a:	28 f4       	brcc	.+10     	; 0x6066 <__ftoa_engine+0x80>
    605c:	36 0f       	add	r19, r22
    605e:	e7 1e       	adc	r14, r23
    6060:	f8 1e       	adc	r15, r24
    6062:	49 1f       	adc	r20, r25
    6064:	51 1d       	adc	r21, r1
    6066:	66 0f       	add	r22, r22
    6068:	77 1f       	adc	r23, r23
    606a:	88 1f       	adc	r24, r24
    606c:	99 1f       	adc	r25, r25
    606e:	06 94       	lsr	r0
    6070:	a1 f7       	brne	.-24     	; 0x605a <__ftoa_engine+0x74>
    6072:	05 90       	lpm	r0, Z+
    6074:	07 94       	ror	r0
    6076:	28 f4       	brcc	.+10     	; 0x6082 <__ftoa_engine+0x9c>
    6078:	e7 0e       	add	r14, r23
    607a:	f8 1e       	adc	r15, r24
    607c:	49 1f       	adc	r20, r25
    607e:	56 1f       	adc	r21, r22
    6080:	c1 1d       	adc	r28, r1
    6082:	77 0f       	add	r23, r23
    6084:	88 1f       	adc	r24, r24
    6086:	99 1f       	adc	r25, r25
    6088:	66 1f       	adc	r22, r22
    608a:	06 94       	lsr	r0
    608c:	a1 f7       	brne	.-24     	; 0x6076 <__ftoa_engine+0x90>
    608e:	05 90       	lpm	r0, Z+
    6090:	07 94       	ror	r0
    6092:	28 f4       	brcc	.+10     	; 0x609e <__ftoa_engine+0xb8>
    6094:	f8 0e       	add	r15, r24
    6096:	49 1f       	adc	r20, r25
    6098:	56 1f       	adc	r21, r22
    609a:	c7 1f       	adc	r28, r23
    609c:	d1 1d       	adc	r29, r1
    609e:	88 0f       	add	r24, r24
    60a0:	99 1f       	adc	r25, r25
    60a2:	66 1f       	adc	r22, r22
    60a4:	77 1f       	adc	r23, r23
    60a6:	06 94       	lsr	r0
    60a8:	a1 f7       	brne	.-24     	; 0x6092 <__ftoa_engine+0xac>
    60aa:	05 90       	lpm	r0, Z+
    60ac:	07 94       	ror	r0
    60ae:	20 f4       	brcc	.+8      	; 0x60b8 <__ftoa_engine+0xd2>
    60b0:	49 0f       	add	r20, r25
    60b2:	56 1f       	adc	r21, r22
    60b4:	c7 1f       	adc	r28, r23
    60b6:	d8 1f       	adc	r29, r24
    60b8:	99 0f       	add	r25, r25
    60ba:	66 1f       	adc	r22, r22
    60bc:	77 1f       	adc	r23, r23
    60be:	88 1f       	adc	r24, r24
    60c0:	06 94       	lsr	r0
    60c2:	a9 f7       	brne	.-22     	; 0x60ae <__ftoa_engine+0xc8>
    60c4:	84 91       	lpm	r24, Z
    60c6:	10 95       	com	r17
    60c8:	17 70       	andi	r17, 0x07	; 7
    60ca:	41 f0       	breq	.+16     	; 0x60dc <__ftoa_engine+0xf6>
    60cc:	d6 95       	lsr	r29
    60ce:	c7 95       	ror	r28
    60d0:	57 95       	ror	r21
    60d2:	47 95       	ror	r20
    60d4:	f7 94       	ror	r15
    60d6:	e7 94       	ror	r14
    60d8:	1a 95       	dec	r17
    60da:	c1 f7       	brne	.-16     	; 0x60cc <__ftoa_engine+0xe6>
    60dc:	e2 ea       	ldi	r30, 0xA2	; 162
    60de:	f1 e0       	ldi	r31, 0x01	; 1
    60e0:	68 94       	set
    60e2:	15 90       	lpm	r1, Z+
    60e4:	15 91       	lpm	r17, Z+
    60e6:	35 91       	lpm	r19, Z+
    60e8:	65 91       	lpm	r22, Z+
    60ea:	95 91       	lpm	r25, Z+
    60ec:	05 90       	lpm	r0, Z+
    60ee:	7f e2       	ldi	r23, 0x2F	; 47
    60f0:	73 95       	inc	r23
    60f2:	e1 18       	sub	r14, r1
    60f4:	f1 0a       	sbc	r15, r17
    60f6:	43 0b       	sbc	r20, r19
    60f8:	56 0b       	sbc	r21, r22
    60fa:	c9 0b       	sbc	r28, r25
    60fc:	d0 09       	sbc	r29, r0
    60fe:	c0 f7       	brcc	.-16     	; 0x60f0 <__ftoa_engine+0x10a>
    6100:	e1 0c       	add	r14, r1
    6102:	f1 1e       	adc	r15, r17
    6104:	43 1f       	adc	r20, r19
    6106:	56 1f       	adc	r21, r22
    6108:	c9 1f       	adc	r28, r25
    610a:	d0 1d       	adc	r29, r0
    610c:	7e f4       	brtc	.+30     	; 0x612c <__ftoa_engine+0x146>
    610e:	70 33       	cpi	r23, 0x30	; 48
    6110:	11 f4       	brne	.+4      	; 0x6116 <__ftoa_engine+0x130>
    6112:	8a 95       	dec	r24
    6114:	e6 cf       	rjmp	.-52     	; 0x60e2 <__ftoa_engine+0xfc>
    6116:	e8 94       	clt
    6118:	01 50       	subi	r16, 0x01	; 1
    611a:	30 f0       	brcs	.+12     	; 0x6128 <__ftoa_engine+0x142>
    611c:	08 0f       	add	r16, r24
    611e:	0a f4       	brpl	.+2      	; 0x6122 <__ftoa_engine+0x13c>
    6120:	00 27       	eor	r16, r16
    6122:	02 17       	cp	r16, r18
    6124:	08 f4       	brcc	.+2      	; 0x6128 <__ftoa_engine+0x142>
    6126:	20 2f       	mov	r18, r16
    6128:	23 95       	inc	r18
    612a:	02 2f       	mov	r16, r18
    612c:	7a 33       	cpi	r23, 0x3A	; 58
    612e:	28 f0       	brcs	.+10     	; 0x613a <__ftoa_engine+0x154>
    6130:	79 e3       	ldi	r23, 0x39	; 57
    6132:	7d 93       	st	X+, r23
    6134:	2a 95       	dec	r18
    6136:	e9 f7       	brne	.-6      	; 0x6132 <__ftoa_engine+0x14c>
    6138:	10 c0       	rjmp	.+32     	; 0x615a <__ftoa_engine+0x174>
    613a:	7d 93       	st	X+, r23
    613c:	2a 95       	dec	r18
    613e:	89 f6       	brne	.-94     	; 0x60e2 <__ftoa_engine+0xfc>
    6140:	06 94       	lsr	r0
    6142:	97 95       	ror	r25
    6144:	67 95       	ror	r22
    6146:	37 95       	ror	r19
    6148:	17 95       	ror	r17
    614a:	17 94       	ror	r1
    614c:	e1 18       	sub	r14, r1
    614e:	f1 0a       	sbc	r15, r17
    6150:	43 0b       	sbc	r20, r19
    6152:	56 0b       	sbc	r21, r22
    6154:	c9 0b       	sbc	r28, r25
    6156:	d0 09       	sbc	r29, r0
    6158:	98 f0       	brcs	.+38     	; 0x6180 <__ftoa_engine+0x19a>
    615a:	23 95       	inc	r18
    615c:	7e 91       	ld	r23, -X
    615e:	73 95       	inc	r23
    6160:	7a 33       	cpi	r23, 0x3A	; 58
    6162:	08 f0       	brcs	.+2      	; 0x6166 <__ftoa_engine+0x180>
    6164:	70 e3       	ldi	r23, 0x30	; 48
    6166:	7c 93       	st	X, r23
    6168:	20 13       	cpse	r18, r16
    616a:	b8 f7       	brcc	.-18     	; 0x615a <__ftoa_engine+0x174>
    616c:	7e 91       	ld	r23, -X
    616e:	70 61       	ori	r23, 0x10	; 16
    6170:	7d 93       	st	X+, r23
    6172:	30 f0       	brcs	.+12     	; 0x6180 <__ftoa_engine+0x19a>
    6174:	83 95       	inc	r24
    6176:	71 e3       	ldi	r23, 0x31	; 49
    6178:	7d 93       	st	X+, r23
    617a:	70 e3       	ldi	r23, 0x30	; 48
    617c:	2a 95       	dec	r18
    617e:	e1 f7       	brne	.-8      	; 0x6178 <__ftoa_engine+0x192>
    6180:	11 24       	eor	r1, r1
    6182:	ef 90       	pop	r14
    6184:	ff 90       	pop	r15
    6186:	0f 91       	pop	r16
    6188:	1f 91       	pop	r17
    618a:	cf 91       	pop	r28
    618c:	df 91       	pop	r29
    618e:	99 27       	eor	r25, r25
    6190:	87 fd       	sbrc	r24, 7
    6192:	90 95       	com	r25
    6194:	08 95       	ret

00006196 <strnlen_P>:
    6196:	fc 01       	movw	r30, r24
    6198:	05 90       	lpm	r0, Z+
    619a:	61 50       	subi	r22, 0x01	; 1
    619c:	70 40       	sbci	r23, 0x00	; 0
    619e:	01 10       	cpse	r0, r1
    61a0:	d8 f7       	brcc	.-10     	; 0x6198 <strnlen_P+0x2>
    61a2:	80 95       	com	r24
    61a4:	90 95       	com	r25
    61a6:	8e 0f       	add	r24, r30
    61a8:	9f 1f       	adc	r25, r31
    61aa:	08 95       	ret

000061ac <memcpy>:
    61ac:	fb 01       	movw	r30, r22
    61ae:	dc 01       	movw	r26, r24
    61b0:	02 c0       	rjmp	.+4      	; 0x61b6 <memcpy+0xa>
    61b2:	01 90       	ld	r0, Z+
    61b4:	0d 92       	st	X+, r0
    61b6:	41 50       	subi	r20, 0x01	; 1
    61b8:	50 40       	sbci	r21, 0x00	; 0
    61ba:	d8 f7       	brcc	.-10     	; 0x61b2 <memcpy+0x6>
    61bc:	08 95       	ret

000061be <memset>:
    61be:	dc 01       	movw	r26, r24
    61c0:	01 c0       	rjmp	.+2      	; 0x61c4 <memset+0x6>
    61c2:	6d 93       	st	X+, r22
    61c4:	41 50       	subi	r20, 0x01	; 1
    61c6:	50 40       	sbci	r21, 0x00	; 0
    61c8:	e0 f7       	brcc	.-8      	; 0x61c2 <memset+0x4>
    61ca:	08 95       	ret

000061cc <strcasestr>:
    61cc:	fb 01       	movw	r30, r22
    61ce:	51 91       	ld	r21, Z+
    61d0:	55 23       	and	r21, r21
    61d2:	b1 f0       	breq	.+44     	; 0x6200 <strcasestr+0x34>
    61d4:	bf 01       	movw	r22, r30
    61d6:	dc 01       	movw	r26, r24
    61d8:	05 2e       	mov	r0, r21
    61da:	4d 91       	ld	r20, X+
    61dc:	44 23       	and	r20, r20
    61de:	69 f0       	breq	.+26     	; 0x61fa <strcasestr+0x2e>
    61e0:	10 d0       	rcall	.+32     	; 0x6202 <strcasestr+0x36>
    61e2:	d9 f7       	brne	.-10     	; 0x61da <strcasestr+0xe>
    61e4:	cd 01       	movw	r24, r26
    61e6:	01 90       	ld	r0, Z+
    61e8:	00 20       	and	r0, r0
    61ea:	49 f0       	breq	.+18     	; 0x61fe <strcasestr+0x32>
    61ec:	4d 91       	ld	r20, X+
    61ee:	41 11       	cpse	r20, r1
    61f0:	08 d0       	rcall	.+16     	; 0x6202 <strcasestr+0x36>
    61f2:	c9 f3       	breq	.-14     	; 0x61e6 <strcasestr+0x1a>
    61f4:	fb 01       	movw	r30, r22
    61f6:	41 11       	cpse	r20, r1
    61f8:	ee cf       	rjmp	.-36     	; 0x61d6 <strcasestr+0xa>
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	01 97       	sbiw	r24, 0x01	; 1
    6200:	08 95       	ret
    6202:	40 25       	eor	r20, r0
    6204:	39 f0       	breq	.+14     	; 0x6214 <strcasestr+0x48>
    6206:	40 32       	cpi	r20, 0x20	; 32
    6208:	29 f4       	brne	.+10     	; 0x6214 <strcasestr+0x48>
    620a:	40 29       	or	r20, r0
    620c:	4b 57       	subi	r20, 0x7B	; 123
    620e:	46 5e       	subi	r20, 0xE6	; 230
    6210:	08 f0       	brcs	.+2      	; 0x6214 <strcasestr+0x48>
    6212:	18 94       	sez
    6214:	08 95       	ret

00006216 <strcat>:
    6216:	fb 01       	movw	r30, r22
    6218:	dc 01       	movw	r26, r24
    621a:	0d 90       	ld	r0, X+
    621c:	00 20       	and	r0, r0
    621e:	e9 f7       	brne	.-6      	; 0x621a <strcat+0x4>
    6220:	11 97       	sbiw	r26, 0x01	; 1
    6222:	01 90       	ld	r0, Z+
    6224:	0d 92       	st	X+, r0
    6226:	00 20       	and	r0, r0
    6228:	e1 f7       	brne	.-8      	; 0x6222 <strcat+0xc>
    622a:	08 95       	ret

0000622c <strcpy>:
    622c:	fb 01       	movw	r30, r22
    622e:	dc 01       	movw	r26, r24
    6230:	01 90       	ld	r0, Z+
    6232:	0d 92       	st	X+, r0
    6234:	00 20       	and	r0, r0
    6236:	e1 f7       	brne	.-8      	; 0x6230 <strcpy+0x4>
    6238:	08 95       	ret

0000623a <strncasecmp>:
    623a:	fb 01       	movw	r30, r22
    623c:	dc 01       	movw	r26, r24
    623e:	41 50       	subi	r20, 0x01	; 1
    6240:	50 40       	sbci	r21, 0x00	; 0
    6242:	88 f0       	brcs	.+34     	; 0x6266 <strncasecmp+0x2c>
    6244:	8d 91       	ld	r24, X+
    6246:	81 34       	cpi	r24, 0x41	; 65
    6248:	1c f0       	brlt	.+6      	; 0x6250 <strncasecmp+0x16>
    624a:	8b 35       	cpi	r24, 0x5B	; 91
    624c:	0c f4       	brge	.+2      	; 0x6250 <strncasecmp+0x16>
    624e:	80 5e       	subi	r24, 0xE0	; 224
    6250:	61 91       	ld	r22, Z+
    6252:	61 34       	cpi	r22, 0x41	; 65
    6254:	1c f0       	brlt	.+6      	; 0x625c <strncasecmp+0x22>
    6256:	6b 35       	cpi	r22, 0x5B	; 91
    6258:	0c f4       	brge	.+2      	; 0x625c <strncasecmp+0x22>
    625a:	60 5e       	subi	r22, 0xE0	; 224
    625c:	86 1b       	sub	r24, r22
    625e:	61 11       	cpse	r22, r1
    6260:	71 f3       	breq	.-36     	; 0x623e <strncasecmp+0x4>
    6262:	99 0b       	sbc	r25, r25
    6264:	08 95       	ret
    6266:	88 1b       	sub	r24, r24
    6268:	fc cf       	rjmp	.-8      	; 0x6262 <strncasecmp+0x28>

0000626a <strnlen>:
    626a:	fc 01       	movw	r30, r24
    626c:	61 50       	subi	r22, 0x01	; 1
    626e:	70 40       	sbci	r23, 0x00	; 0
    6270:	01 90       	ld	r0, Z+
    6272:	01 10       	cpse	r0, r1
    6274:	d8 f7       	brcc	.-10     	; 0x626c <strnlen+0x2>
    6276:	80 95       	com	r24
    6278:	90 95       	com	r25
    627a:	8e 0f       	add	r24, r30
    627c:	9f 1f       	adc	r25, r31
    627e:	08 95       	ret

00006280 <fputc>:
    6280:	0f 93       	push	r16
    6282:	1f 93       	push	r17
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	fb 01       	movw	r30, r22
    628a:	23 81       	ldd	r18, Z+3	; 0x03
    628c:	21 fd       	sbrc	r18, 1
    628e:	03 c0       	rjmp	.+6      	; 0x6296 <fputc+0x16>
    6290:	8f ef       	ldi	r24, 0xFF	; 255
    6292:	9f ef       	ldi	r25, 0xFF	; 255
    6294:	2c c0       	rjmp	.+88     	; 0x62ee <fputc+0x6e>
    6296:	22 ff       	sbrs	r18, 2
    6298:	16 c0       	rjmp	.+44     	; 0x62c6 <fputc+0x46>
    629a:	46 81       	ldd	r20, Z+6	; 0x06
    629c:	57 81       	ldd	r21, Z+7	; 0x07
    629e:	24 81       	ldd	r18, Z+4	; 0x04
    62a0:	35 81       	ldd	r19, Z+5	; 0x05
    62a2:	42 17       	cp	r20, r18
    62a4:	53 07       	cpc	r21, r19
    62a6:	44 f4       	brge	.+16     	; 0x62b8 <fputc+0x38>
    62a8:	a0 81       	ld	r26, Z
    62aa:	b1 81       	ldd	r27, Z+1	; 0x01
    62ac:	9d 01       	movw	r18, r26
    62ae:	2f 5f       	subi	r18, 0xFF	; 255
    62b0:	3f 4f       	sbci	r19, 0xFF	; 255
    62b2:	31 83       	std	Z+1, r19	; 0x01
    62b4:	20 83       	st	Z, r18
    62b6:	8c 93       	st	X, r24
    62b8:	26 81       	ldd	r18, Z+6	; 0x06
    62ba:	37 81       	ldd	r19, Z+7	; 0x07
    62bc:	2f 5f       	subi	r18, 0xFF	; 255
    62be:	3f 4f       	sbci	r19, 0xFF	; 255
    62c0:	37 83       	std	Z+7, r19	; 0x07
    62c2:	26 83       	std	Z+6, r18	; 0x06
    62c4:	14 c0       	rjmp	.+40     	; 0x62ee <fputc+0x6e>
    62c6:	8b 01       	movw	r16, r22
    62c8:	ec 01       	movw	r28, r24
    62ca:	fb 01       	movw	r30, r22
    62cc:	00 84       	ldd	r0, Z+8	; 0x08
    62ce:	f1 85       	ldd	r31, Z+9	; 0x09
    62d0:	e0 2d       	mov	r30, r0
    62d2:	19 95       	eicall
    62d4:	89 2b       	or	r24, r25
    62d6:	e1 f6       	brne	.-72     	; 0x6290 <fputc+0x10>
    62d8:	d8 01       	movw	r26, r16
    62da:	16 96       	adiw	r26, 0x06	; 6
    62dc:	8d 91       	ld	r24, X+
    62de:	9c 91       	ld	r25, X
    62e0:	17 97       	sbiw	r26, 0x07	; 7
    62e2:	01 96       	adiw	r24, 0x01	; 1
    62e4:	17 96       	adiw	r26, 0x07	; 7
    62e6:	9c 93       	st	X, r25
    62e8:	8e 93       	st	-X, r24
    62ea:	16 97       	sbiw	r26, 0x06	; 6
    62ec:	ce 01       	movw	r24, r28
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	1f 91       	pop	r17
    62f4:	0f 91       	pop	r16
    62f6:	08 95       	ret

000062f8 <printf>:
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	cd b7       	in	r28, 0x3d	; 61
    62fe:	de b7       	in	r29, 0x3e	; 62
    6300:	ae 01       	movw	r20, r28
    6302:	4a 5f       	subi	r20, 0xFA	; 250
    6304:	5f 4f       	sbci	r21, 0xFF	; 255
    6306:	fa 01       	movw	r30, r20
    6308:	61 91       	ld	r22, Z+
    630a:	71 91       	ld	r23, Z+
    630c:	af 01       	movw	r20, r30
    630e:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <__iob+0x2>
    6312:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <__iob+0x3>
    6316:	e1 d8       	rcall	.-3646   	; 0x54da <vfprintf>
    6318:	df 91       	pop	r29
    631a:	cf 91       	pop	r28
    631c:	08 95       	ret

0000631e <puts>:
    631e:	0f 93       	push	r16
    6320:	1f 93       	push	r17
    6322:	cf 93       	push	r28
    6324:	df 93       	push	r29
    6326:	e0 91 01 13 	lds	r30, 0x1301	; 0x801301 <__iob+0x2>
    632a:	f0 91 02 13 	lds	r31, 0x1302	; 0x801302 <__iob+0x3>
    632e:	23 81       	ldd	r18, Z+3	; 0x03
    6330:	21 ff       	sbrs	r18, 1
    6332:	1b c0       	rjmp	.+54     	; 0x636a <puts+0x4c>
    6334:	8c 01       	movw	r16, r24
    6336:	d0 e0       	ldi	r29, 0x00	; 0
    6338:	c0 e0       	ldi	r28, 0x00	; 0
    633a:	f8 01       	movw	r30, r16
    633c:	81 91       	ld	r24, Z+
    633e:	8f 01       	movw	r16, r30
    6340:	60 91 01 13 	lds	r22, 0x1301	; 0x801301 <__iob+0x2>
    6344:	70 91 02 13 	lds	r23, 0x1302	; 0x801302 <__iob+0x3>
    6348:	db 01       	movw	r26, r22
    634a:	18 96       	adiw	r26, 0x08	; 8
    634c:	ed 91       	ld	r30, X+
    634e:	fc 91       	ld	r31, X
    6350:	19 97       	sbiw	r26, 0x09	; 9
    6352:	88 23       	and	r24, r24
    6354:	31 f0       	breq	.+12     	; 0x6362 <puts+0x44>
    6356:	19 95       	eicall
    6358:	89 2b       	or	r24, r25
    635a:	79 f3       	breq	.-34     	; 0x633a <puts+0x1c>
    635c:	df ef       	ldi	r29, 0xFF	; 255
    635e:	cf ef       	ldi	r28, 0xFF	; 255
    6360:	ec cf       	rjmp	.-40     	; 0x633a <puts+0x1c>
    6362:	8a e0       	ldi	r24, 0x0A	; 10
    6364:	19 95       	eicall
    6366:	89 2b       	or	r24, r25
    6368:	19 f0       	breq	.+6      	; 0x6370 <puts+0x52>
    636a:	8f ef       	ldi	r24, 0xFF	; 255
    636c:	9f ef       	ldi	r25, 0xFF	; 255
    636e:	02 c0       	rjmp	.+4      	; 0x6374 <puts+0x56>
    6370:	8d 2f       	mov	r24, r29
    6372:	9c 2f       	mov	r25, r28
    6374:	df 91       	pop	r29
    6376:	cf 91       	pop	r28
    6378:	1f 91       	pop	r17
    637a:	0f 91       	pop	r16
    637c:	08 95       	ret

0000637e <sprintf>:
    637e:	0f 93       	push	r16
    6380:	1f 93       	push	r17
    6382:	cf 93       	push	r28
    6384:	df 93       	push	r29
    6386:	cd b7       	in	r28, 0x3d	; 61
    6388:	de b7       	in	r29, 0x3e	; 62
    638a:	2e 97       	sbiw	r28, 0x0e	; 14
    638c:	0f b6       	in	r0, 0x3f	; 63
    638e:	f8 94       	cli
    6390:	de bf       	out	0x3e, r29	; 62
    6392:	0f be       	out	0x3f, r0	; 63
    6394:	cd bf       	out	0x3d, r28	; 61
    6396:	0e 89       	ldd	r16, Y+22	; 0x16
    6398:	1f 89       	ldd	r17, Y+23	; 0x17
    639a:	86 e0       	ldi	r24, 0x06	; 6
    639c:	8c 83       	std	Y+4, r24	; 0x04
    639e:	1a 83       	std	Y+2, r17	; 0x02
    63a0:	09 83       	std	Y+1, r16	; 0x01
    63a2:	8f ef       	ldi	r24, 0xFF	; 255
    63a4:	9f e7       	ldi	r25, 0x7F	; 127
    63a6:	9e 83       	std	Y+6, r25	; 0x06
    63a8:	8d 83       	std	Y+5, r24	; 0x05
    63aa:	ae 01       	movw	r20, r28
    63ac:	46 5e       	subi	r20, 0xE6	; 230
    63ae:	5f 4f       	sbci	r21, 0xFF	; 255
    63b0:	68 8d       	ldd	r22, Y+24	; 0x18
    63b2:	79 8d       	ldd	r23, Y+25	; 0x19
    63b4:	ce 01       	movw	r24, r28
    63b6:	01 96       	adiw	r24, 0x01	; 1
    63b8:	90 d8       	rcall	.-3808   	; 0x54da <vfprintf>
    63ba:	ef 81       	ldd	r30, Y+7	; 0x07
    63bc:	f8 85       	ldd	r31, Y+8	; 0x08
    63be:	e0 0f       	add	r30, r16
    63c0:	f1 1f       	adc	r31, r17
    63c2:	10 82       	st	Z, r1
    63c4:	2e 96       	adiw	r28, 0x0e	; 14
    63c6:	0f b6       	in	r0, 0x3f	; 63
    63c8:	f8 94       	cli
    63ca:	de bf       	out	0x3e, r29	; 62
    63cc:	0f be       	out	0x3f, r0	; 63
    63ce:	cd bf       	out	0x3d, r28	; 61
    63d0:	df 91       	pop	r29
    63d2:	cf 91       	pop	r28
    63d4:	1f 91       	pop	r17
    63d6:	0f 91       	pop	r16
    63d8:	08 95       	ret

000063da <__ultoa_invert>:
    63da:	fa 01       	movw	r30, r20
    63dc:	aa 27       	eor	r26, r26
    63de:	28 30       	cpi	r18, 0x08	; 8
    63e0:	51 f1       	breq	.+84     	; 0x6436 <__ultoa_invert+0x5c>
    63e2:	20 31       	cpi	r18, 0x10	; 16
    63e4:	81 f1       	breq	.+96     	; 0x6446 <__ultoa_invert+0x6c>
    63e6:	e8 94       	clt
    63e8:	6f 93       	push	r22
    63ea:	6e 7f       	andi	r22, 0xFE	; 254
    63ec:	6e 5f       	subi	r22, 0xFE	; 254
    63ee:	7f 4f       	sbci	r23, 0xFF	; 255
    63f0:	8f 4f       	sbci	r24, 0xFF	; 255
    63f2:	9f 4f       	sbci	r25, 0xFF	; 255
    63f4:	af 4f       	sbci	r26, 0xFF	; 255
    63f6:	b1 e0       	ldi	r27, 0x01	; 1
    63f8:	3e d0       	rcall	.+124    	; 0x6476 <__ultoa_invert+0x9c>
    63fa:	b4 e0       	ldi	r27, 0x04	; 4
    63fc:	3c d0       	rcall	.+120    	; 0x6476 <__ultoa_invert+0x9c>
    63fe:	67 0f       	add	r22, r23
    6400:	78 1f       	adc	r23, r24
    6402:	89 1f       	adc	r24, r25
    6404:	9a 1f       	adc	r25, r26
    6406:	a1 1d       	adc	r26, r1
    6408:	68 0f       	add	r22, r24
    640a:	79 1f       	adc	r23, r25
    640c:	8a 1f       	adc	r24, r26
    640e:	91 1d       	adc	r25, r1
    6410:	a1 1d       	adc	r26, r1
    6412:	6a 0f       	add	r22, r26
    6414:	71 1d       	adc	r23, r1
    6416:	81 1d       	adc	r24, r1
    6418:	91 1d       	adc	r25, r1
    641a:	a1 1d       	adc	r26, r1
    641c:	20 d0       	rcall	.+64     	; 0x645e <__ultoa_invert+0x84>
    641e:	09 f4       	brne	.+2      	; 0x6422 <__ultoa_invert+0x48>
    6420:	68 94       	set
    6422:	3f 91       	pop	r19
    6424:	2a e0       	ldi	r18, 0x0A	; 10
    6426:	26 9f       	mul	r18, r22
    6428:	11 24       	eor	r1, r1
    642a:	30 19       	sub	r19, r0
    642c:	30 5d       	subi	r19, 0xD0	; 208
    642e:	31 93       	st	Z+, r19
    6430:	de f6       	brtc	.-74     	; 0x63e8 <__ultoa_invert+0xe>
    6432:	cf 01       	movw	r24, r30
    6434:	08 95       	ret
    6436:	46 2f       	mov	r20, r22
    6438:	47 70       	andi	r20, 0x07	; 7
    643a:	40 5d       	subi	r20, 0xD0	; 208
    643c:	41 93       	st	Z+, r20
    643e:	b3 e0       	ldi	r27, 0x03	; 3
    6440:	0f d0       	rcall	.+30     	; 0x6460 <__ultoa_invert+0x86>
    6442:	c9 f7       	brne	.-14     	; 0x6436 <__ultoa_invert+0x5c>
    6444:	f6 cf       	rjmp	.-20     	; 0x6432 <__ultoa_invert+0x58>
    6446:	46 2f       	mov	r20, r22
    6448:	4f 70       	andi	r20, 0x0F	; 15
    644a:	40 5d       	subi	r20, 0xD0	; 208
    644c:	4a 33       	cpi	r20, 0x3A	; 58
    644e:	18 f0       	brcs	.+6      	; 0x6456 <__ultoa_invert+0x7c>
    6450:	49 5d       	subi	r20, 0xD9	; 217
    6452:	31 fd       	sbrc	r19, 1
    6454:	40 52       	subi	r20, 0x20	; 32
    6456:	41 93       	st	Z+, r20
    6458:	02 d0       	rcall	.+4      	; 0x645e <__ultoa_invert+0x84>
    645a:	a9 f7       	brne	.-22     	; 0x6446 <__ultoa_invert+0x6c>
    645c:	ea cf       	rjmp	.-44     	; 0x6432 <__ultoa_invert+0x58>
    645e:	b4 e0       	ldi	r27, 0x04	; 4
    6460:	a6 95       	lsr	r26
    6462:	97 95       	ror	r25
    6464:	87 95       	ror	r24
    6466:	77 95       	ror	r23
    6468:	67 95       	ror	r22
    646a:	ba 95       	dec	r27
    646c:	c9 f7       	brne	.-14     	; 0x6460 <__ultoa_invert+0x86>
    646e:	00 97       	sbiw	r24, 0x00	; 0
    6470:	61 05       	cpc	r22, r1
    6472:	71 05       	cpc	r23, r1
    6474:	08 95       	ret
    6476:	9b 01       	movw	r18, r22
    6478:	ac 01       	movw	r20, r24
    647a:	0a 2e       	mov	r0, r26
    647c:	06 94       	lsr	r0
    647e:	57 95       	ror	r21
    6480:	47 95       	ror	r20
    6482:	37 95       	ror	r19
    6484:	27 95       	ror	r18
    6486:	ba 95       	dec	r27
    6488:	c9 f7       	brne	.-14     	; 0x647c <__ultoa_invert+0xa2>
    648a:	62 0f       	add	r22, r18
    648c:	73 1f       	adc	r23, r19
    648e:	84 1f       	adc	r24, r20
    6490:	95 1f       	adc	r25, r21
    6492:	a0 1d       	adc	r26, r0
    6494:	08 95       	ret

00006496 <_exit>:
    6496:	f8 94       	cli

00006498 <__stop_program>:
    6498:	ff cf       	rjmp	.-2      	; 0x6498 <__stop_program>
