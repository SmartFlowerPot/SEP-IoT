
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800200  000041f6  0000428a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ae1  00800278  00800278  00004302  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008611  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002491  00000000  00000000  0000d089  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045c8  00000000  00000000  0000f51a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018a8  00000000  00000000  00013ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d2e  00000000  00000000  0001538c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a49  00000000  00000000  000180ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  0001fb03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	84 c1       	rjmp	.+776    	; 0x30e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c1       	rjmp	.+772    	; 0x30e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c1       	rjmp	.+768    	; 0x30e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c1       	rjmp	.+764    	; 0x30e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c1       	rjmp	.+760    	; 0x30e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c1       	rjmp	.+756    	; 0x30e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c1       	rjmp	.+752    	; 0x30e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c1       	rjmp	.+748    	; 0x30e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c1       	rjmp	.+744    	; 0x30e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c1       	rjmp	.+740    	; 0x30e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c1       	rjmp	.+736    	; 0x30e <__bad_interrupt>
      2e:	00 00       	nop
      30:	df c4       	rjmp	.+2494   	; 0x9f0 <__vector_12>
      32:	00 00       	nop
      34:	6c c1       	rjmp	.+728    	; 0x30e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c1       	rjmp	.+724    	; 0x30e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c1       	rjmp	.+720    	; 0x30e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c1       	rjmp	.+716    	; 0x30e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c1       	rjmp	.+712    	; 0x30e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c1       	rjmp	.+708    	; 0x30e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c1       	rjmp	.+704    	; 0x30e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c1       	rjmp	.+700    	; 0x30e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c1       	rjmp	.+696    	; 0x30e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c1       	rjmp	.+692    	; 0x30e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c1       	rjmp	.+688    	; 0x30e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c1       	rjmp	.+684    	; 0x30e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__vector_25>
      68:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_26>
      6c:	50 c1       	rjmp	.+672    	; 0x30e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c1       	rjmp	.+668    	; 0x30e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c1       	rjmp	.+664    	; 0x30e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c1       	rjmp	.+660    	; 0x30e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c1       	rjmp	.+656    	; 0x30e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c1       	rjmp	.+652    	; 0x30e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c1       	rjmp	.+648    	; 0x30e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c1       	rjmp	.+644    	; 0x30e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c1       	rjmp	.+640    	; 0x30e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__vector_36>
      94:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__vector_37>
      98:	3a c1       	rjmp	.+628    	; 0x30e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__vector_39>
      a0:	36 c1       	rjmp	.+620    	; 0x30e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	34 c1       	rjmp	.+616    	; 0x30e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	32 c1       	rjmp	.+612    	; 0x30e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	30 c1       	rjmp	.+608    	; 0x30e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2e c1       	rjmp	.+604    	; 0x30e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2c c1       	rjmp	.+600    	; 0x30e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2a c1       	rjmp	.+596    	; 0x30e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	28 c1       	rjmp	.+592    	; 0x30e <__bad_interrupt>
      be:	00 00       	nop
      c0:	26 c1       	rjmp	.+588    	; 0x30e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	24 c1       	rjmp	.+584    	; 0x30e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	22 c1       	rjmp	.+580    	; 0x30e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__vector_51>
      d0:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__vector_52>
      d4:	1c c1       	rjmp	.+568    	; 0x30e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__vector_54>
      dc:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__vector_55>
      e0:	16 c1       	rjmp	.+556    	; 0x30e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 11       	cpse	r27, r1
      e6:	b1 11       	cpse	r27, r1
      e8:	b1 11       	cpse	r27, r1
      ea:	e8 11       	cpse	r30, r8
      ec:	f0 11       	cpse	r31, r0
      ee:	05 12       	cpse	r0, r21
      f0:	b1 11       	cpse	r27, r1
      f2:	b1 11       	cpse	r27, r1
      f4:	e8 11       	cpse	r30, r8
      f6:	f0 11       	cpse	r31, r0
      f8:	46 18       	sub	r4, r6
      fa:	b6 18       	sub	r11, r6
      fc:	b6 18       	sub	r11, r6
      fe:	b6 18       	sub	r11, r6
     100:	b6 18       	sub	r11, r6
     102:	b6 18       	sub	r11, r6
     104:	b6 18       	sub	r11, r6
     106:	b6 18       	sub	r11, r6
     108:	46 18       	sub	r4, r6
     10a:	b6 18       	sub	r11, r6
     10c:	b6 18       	sub	r11, r6
     10e:	b6 18       	sub	r11, r6
     110:	b6 18       	sub	r11, r6
     112:	b6 18       	sub	r11, r6
     114:	b6 18       	sub	r11, r6
     116:	b6 18       	sub	r11, r6
     118:	48 18       	sub	r4, r8
     11a:	b6 18       	sub	r11, r6
     11c:	b6 18       	sub	r11, r6
     11e:	b6 18       	sub	r11, r6
     120:	b6 18       	sub	r11, r6
     122:	b6 18       	sub	r11, r6
     124:	b6 18       	sub	r11, r6
     126:	b6 18       	sub	r11, r6
     128:	b6 18       	sub	r11, r6
     12a:	b6 18       	sub	r11, r6
     12c:	b6 18       	sub	r11, r6
     12e:	b6 18       	sub	r11, r6
     130:	b6 18       	sub	r11, r6
     132:	b6 18       	sub	r11, r6
     134:	b6 18       	sub	r11, r6
     136:	b6 18       	sub	r11, r6
     138:	48 18       	sub	r4, r8
     13a:	b6 18       	sub	r11, r6
     13c:	b6 18       	sub	r11, r6
     13e:	b6 18       	sub	r11, r6
     140:	b6 18       	sub	r11, r6
     142:	b6 18       	sub	r11, r6
     144:	b6 18       	sub	r11, r6
     146:	b6 18       	sub	r11, r6
     148:	b6 18       	sub	r11, r6
     14a:	b6 18       	sub	r11, r6
     14c:	b6 18       	sub	r11, r6
     14e:	b6 18       	sub	r11, r6
     150:	b6 18       	sub	r11, r6
     152:	b6 18       	sub	r11, r6
     154:	b6 18       	sub	r11, r6
     156:	b6 18       	sub	r11, r6
     158:	b2 18       	sub	r11, r2
     15a:	b6 18       	sub	r11, r6
     15c:	b6 18       	sub	r11, r6
     15e:	b6 18       	sub	r11, r6
     160:	b6 18       	sub	r11, r6
     162:	b6 18       	sub	r11, r6
     164:	b6 18       	sub	r11, r6
     166:	b6 18       	sub	r11, r6
     168:	7d 18       	sub	r7, r13
     16a:	b6 18       	sub	r11, r6
     16c:	b6 18       	sub	r11, r6
     16e:	b6 18       	sub	r11, r6
     170:	b6 18       	sub	r11, r6
     172:	b6 18       	sub	r11, r6
     174:	b6 18       	sub	r11, r6
     176:	b6 18       	sub	r11, r6
     178:	b6 18       	sub	r11, r6
     17a:	b6 18       	sub	r11, r6
     17c:	b6 18       	sub	r11, r6
     17e:	b6 18       	sub	r11, r6
     180:	b6 18       	sub	r11, r6
     182:	b6 18       	sub	r11, r6
     184:	b6 18       	sub	r11, r6
     186:	b6 18       	sub	r11, r6
     188:	71 18       	sub	r7, r1
     18a:	b6 18       	sub	r11, r6
     18c:	b6 18       	sub	r11, r6
     18e:	b6 18       	sub	r11, r6
     190:	b6 18       	sub	r11, r6
     192:	b6 18       	sub	r11, r6
     194:	b6 18       	sub	r11, r6
     196:	b6 18       	sub	r11, r6
     198:	95 18       	sub	r9, r5

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     29c:	b7 d7       	rcall	.+3950   	; 0x120c <prvCheckTasksWaitingTermination>
     29e:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <pxReadyTasksLists>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	08 f0       	brcs	.+2      	; 0x2a8 <prvIdleTask+0xc>
     2a6:	df d2       	rcall	.+1470   	; 0x866 <vPortYield>
     2a8:	0e 94 2e 12 	call	0x245c	; 0x245c <vApplicationIdleHook>
     2ac:	f7 cf       	rjmp	.-18     	; 0x29c <prvIdleTask>

000002ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	1f 92       	push	r1
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <prvGetNextExpireTime>
     2c0:	49 81       	ldd	r20, Y+1	; 0x01
     2c2:	0e 94 27 11 	call	0x224e	; 0x224e <prvProcessTimerOrBlockTask>
     2c6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <prvProcessReceivedCommands>
     2ca:	f6 cf       	rjmp	.-20     	; 0x2b8 <prvTimerTask+0xa>

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d1 e2       	ldi	r29, 0x21	; 33
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	0c bf       	out	0x3c, r16	; 60

000002dc <__do_copy_data>:
     2dc:	12 e0       	ldi	r17, 0x02	; 2
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b2 e0       	ldi	r27, 0x02	; 2
     2e2:	e6 ef       	ldi	r30, 0xF6	; 246
     2e4:	f1 e4       	ldi	r31, 0x41	; 65
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0b bf       	out	0x3b, r16	; 59
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__do_copy_data+0x14>
     2ec:	07 90       	elpm	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	a8 37       	cpi	r26, 0x78	; 120
     2f2:	b1 07       	cpc	r27, r17
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <__do_copy_data+0x10>

000002f6 <__do_clear_bss>:
     2f6:	2d e0       	ldi	r18, 0x0D	; 13
     2f8:	a8 e7       	ldi	r26, 0x78	; 120
     2fa:	b2 e0       	ldi	r27, 0x02	; 2
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <.do_clear_bss_start>

000002fe <.do_clear_bss_loop>:
     2fe:	1d 92       	st	X+, r1

00000300 <.do_clear_bss_start>:
     300:	a9 35       	cpi	r26, 0x59	; 89
     302:	b2 07       	cpc	r27, r18
     304:	e1 f7       	brne	.-8      	; 0x2fe <.do_clear_bss_loop>
     306:	0e 94 78 12 	call	0x24f0	; 0x24f0 <main>
     30a:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <_exit>

0000030e <__bad_interrupt>:
     30e:	78 ce       	rjmp	.-784    	; 0x0 <__vectors>

00000310 <measureTemp>:
		
		measureTemp((Temperature_t) self);
	}
}

void measureTemp(Temperature_t self){
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ec 01       	movw	r28, r24
	self->temperature += hih8120_getTemperature();
     316:	0e 94 9a 13 	call	0x2734	; 0x2734 <hih8120_getTemperature>
     31a:	28 81       	ld	r18, Y
     31c:	39 81       	ldd	r19, Y+1	; 0x01
     31e:	4a 81       	ldd	r20, Y+2	; 0x02
     320:	5b 81       	ldd	r21, Y+3	; 0x03
     322:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__addsf3>
     326:	26 2f       	mov	r18, r22
     328:	37 2f       	mov	r19, r23
     32a:	46 2f       	mov	r20, r22
     32c:	57 2f       	mov	r21, r23
     32e:	68 2f       	mov	r22, r24
     330:	79 2f       	mov	r23, r25
     332:	48 83       	st	Y, r20
     334:	59 83       	std	Y+1, r21	; 0x01
     336:	6a 83       	std	Y+2, r22	; 0x02
     338:	7b 83       	std	Y+3, r23	; 0x03
	printf("%f", self->temperature);
     33a:	9f 93       	push	r25
     33c:	8f 93       	push	r24
     33e:	3f 93       	push	r19
     340:	2f 93       	push	r18
     342:	82 e2       	ldi	r24, 0x22	; 34
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	0e 94 58 20 	call	0x40b0	; 0x40b0 <printf>
}
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <startReading>:
	
	temperature_handler_init(new_measure);
	return new_measure;
}

void startReading(void* self){
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	00 d0       	rcall	.+0      	; 0x366 <startReading+0x6>
     366:	1f 92       	push	r1
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     36e:	0e 94 4e 0a 	call	0x149c	; 0x149c <xTaskGetTickCount>
     372:	69 83       	std	Y+1, r22	; 0x01
     374:	7a 83       	std	Y+2, r23	; 0x02
     376:	8b 83       	std	Y+3, r24	; 0x03
     378:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     37a:	42 ea       	ldi	r20, 0xA2	; 162
     37c:	53 e0       	ldi	r21, 0x03	; 3
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     38a:	0e 94 76 13 	call	0x26ec	; 0x26ec <hih8120_wakeup>
     38e:	88 23       	and	r24, r24
     390:	21 f0       	breq	.+8      	; 0x39a <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     392:	85 e2       	ldi	r24, 0x25	; 37
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <puts>
		}
		vTaskDelay(pdMS_TO_TICKS(70));
     39a:	64 e0       	ldi	r22, 0x04	; 4
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     3a6:	0e 94 8a 13 	call	0x2714	; 0x2714 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	cb 01       	movw	r24, r22
     3b0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <vTaskDelay>
		
		measureTemp((Temperature_t) self);
     3b4:	c8 01       	movw	r24, r16
     3b6:	ac df       	rcall	.-168    	; 0x310 <measureTemp>
	}
     3b8:	e0 cf       	rjmp	.-64     	; 0x37a <startReading+0x1a>

000003ba <temperature_handler_init>:
void measureTemp(Temperature_t self){
	self->temperature += hih8120_getTemperature();
	printf("%f", self->temperature);
}

void temperature_handler_init(Temperature_t self){
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
	
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self,3, NULL);
     3c0:	e1 2c       	mov	r14, r1
     3c2:	f1 2c       	mov	r15, r1
     3c4:	03 e0       	ldi	r16, 0x03	; 3
     3c6:	9c 01       	movw	r18, r24
     3c8:	40 ec       	ldi	r20, 0xC0	; 192
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	6f e3       	ldi	r22, 0x3F	; 63
     3ce:	72 e0       	ldi	r23, 0x02	; 2
     3d0:	80 eb       	ldi	r24, 0xB0	; 176
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	de d7       	rcall	.+4028   	; 0x1392 <xTaskCreate>
}
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <createTemp>:
typedef struct TemperatureHandler{
	float temperature;
	} TemperatureHandler;
	

Temperature_t createTemp(){
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     3e2:	84 e0       	ldi	r24, 0x04	; 4
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <malloc>
     3ea:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     3ec:	89 2b       	or	r24, r25
     3ee:	89 f0       	breq	.+34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     3f0:	18 82       	st	Y, r1
     3f2:	19 82       	std	Y+1, r1	; 0x01
     3f4:	1a 82       	std	Y+2, r1	; 0x02
     3f6:	1b 82       	std	Y+3, r1	; 0x03
	
	if (HIH8120_OK == hih8120_initialise())
     3f8:	0e 94 5f 13 	call	0x26be	; 0x26be <hih8120_initialise>
     3fc:	81 11       	cpse	r24, r1
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		puts("Temp sensor initialized.\n");
     400:	80 e5       	ldi	r24, 0x50	; 80
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <puts>
	}
	
	temperature_handler_init(new_measure);
     408:	ce 01       	movw	r24, r28
     40a:	d7 df       	rcall	.-82     	; 0x3ba <temperature_handler_init>
	return new_measure;
     40c:	8c 2f       	mov	r24, r28
     40e:	9d 2f       	mov	r25, r29
     410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	

Temperature_t createTemp(){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.\n");
	}
	
	temperature_handler_init(new_measure);
	return new_measure;
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     41c:	e4 e8       	ldi	r30, 0x84	; 132
     41e:	f2 e0       	ldi	r31, 0x02	; 2
     420:	a8 e8       	ldi	r26, 0x88	; 136
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	b1 83       	std	Z+1, r27	; 0x01
     426:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     428:	13 82       	std	Z+3, r1	; 0x03
     42a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     42c:	e8 e4       	ldi	r30, 0x48	; 72
     42e:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     430:	f0 93 83 02 	sts	0x0283, r31	; 0x800283 <pxEnd+0x1>
     434:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <pxEnd>
    pxEnd->xBlockSize = 0;
     438:	13 82       	std	Z+3, r1	; 0x03
     43a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     43c:	11 82       	std	Z+1, r1	; 0x01
     43e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     440:	80 ec       	ldi	r24, 0xC0	; 192
     442:	99 e0       	ldi	r25, 0x09	; 9
     444:	13 96       	adiw	r26, 0x03	; 3
     446:	9c 93       	st	X, r25
     448:	8e 93       	st	-X, r24
     44a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     44c:	ed 93       	st	X+, r30
     44e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     450:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <xMinimumEverFreeBytesRemaining+0x1>
     454:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     458:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <xFreeBytesRemaining+0x1>
     45c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e8       	ldi	r25, 0x80	; 128
     464:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <__data_end+0x1>
     468:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end>
     46c:	08 95       	ret

0000046e <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     474:	a4 e8       	ldi	r26, 0x84	; 132
     476:	b2 e0       	ldi	r27, 0x02	; 2
     478:	01 c0       	rjmp	.+2      	; 0x47c <prvInsertBlockIntoFreeList+0xe>
     47a:	df 01       	movw	r26, r30
     47c:	ed 91       	ld	r30, X+
     47e:	fc 91       	ld	r31, X
     480:	11 97       	sbiw	r26, 0x01	; 1
     482:	ec 17       	cp	r30, r28
     484:	fd 07       	cpc	r31, r29
     486:	c8 f3       	brcs	.-14     	; 0x47a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     488:	12 96       	adiw	r26, 0x02	; 2
     48a:	8d 91       	ld	r24, X+
     48c:	9c 91       	ld	r25, X
     48e:	13 97       	sbiw	r26, 0x03	; 3
     490:	9d 01       	movw	r18, r26
     492:	28 0f       	add	r18, r24
     494:	39 1f       	adc	r19, r25
     496:	c2 17       	cp	r28, r18
     498:	d3 07       	cpc	r29, r19
     49a:	49 f4       	brne	.+18     	; 0x4ae <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     49c:	2a 81       	ldd	r18, Y+2	; 0x02
     49e:	3b 81       	ldd	r19, Y+3	; 0x03
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
     4a4:	13 96       	adiw	r26, 0x03	; 3
     4a6:	9c 93       	st	X, r25
     4a8:	8e 93       	st	-X, r24
     4aa:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     4ac:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	9b 81       	ldd	r25, Y+3	; 0x03
     4b2:	9e 01       	movw	r18, r28
     4b4:	28 0f       	add	r18, r24
     4b6:	39 1f       	adc	r19, r25
     4b8:	e2 17       	cp	r30, r18
     4ba:	f3 07       	cpc	r31, r19
     4bc:	c1 f4       	brne	.+48     	; 0x4ee <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     4be:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <pxEnd>
     4c2:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <pxEnd+0x1>
     4c6:	e2 17       	cp	r30, r18
     4c8:	f3 07       	cpc	r31, r19
     4ca:	71 f0       	breq	.+28     	; 0x4e8 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     4cc:	22 81       	ldd	r18, Z+2	; 0x02
     4ce:	33 81       	ldd	r19, Z+3	; 0x03
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	9b 83       	std	Y+3, r25	; 0x03
     4d6:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4d8:	ed 91       	ld	r30, X+
     4da:	fc 91       	ld	r31, X
     4dc:	11 97       	sbiw	r26, 0x01	; 1
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	99 83       	std	Y+1, r25	; 0x01
     4e4:	88 83       	st	Y, r24
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4e8:	39 83       	std	Y+1, r19	; 0x01
     4ea:	28 83       	st	Y, r18
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4ee:	f9 83       	std	Y+1, r31	; 0x01
     4f0:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4f2:	ca 17       	cp	r28, r26
     4f4:	db 07       	cpc	r29, r27
     4f6:	11 f0       	breq	.+4      	; 0x4fc <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4f8:	cd 93       	st	X+, r28
     4fa:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     510:	bf d7       	rcall	.+3966   	; 0x1490 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     512:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <pxEnd>
     516:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <pxEnd+0x1>
     51a:	89 2b       	or	r24, r25
     51c:	09 f4       	brne	.+2      	; 0x520 <pvPortMalloc+0x1e>
        {
            prvHeapInit();
     51e:	7e df       	rcall	.-260    	; 0x41c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     520:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
     524:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__data_end+0x1>
     528:	80 23       	and	r24, r16
     52a:	91 23       	and	r25, r17
     52c:	89 2b       	or	r24, r25
     52e:	09 f0       	breq	.+2      	; 0x532 <pvPortMalloc+0x30>
     530:	76 c0       	rjmp	.+236    	; 0x61e <pvPortMalloc+0x11c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     532:	01 15       	cp	r16, r1
     534:	11 05       	cpc	r17, r1
     536:	49 f0       	breq	.+18     	; 0x54a <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     538:	c8 01       	movw	r24, r16
     53a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     53c:	08 17       	cp	r16, r24
     53e:	19 07       	cpc	r17, r25
     540:	18 f0       	brcs	.+6      	; 0x548 <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	01 c0       	rjmp	.+2      	; 0x54a <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     548:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     54a:	01 15       	cp	r16, r1
     54c:	11 05       	cpc	r17, r1
     54e:	09 f4       	brne	.+2      	; 0x552 <pvPortMalloc+0x50>
     550:	69 c0       	rjmp	.+210    	; 0x624 <pvPortMalloc+0x122>
     552:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <xFreeBytesRemaining>
     556:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <xFreeBytesRemaining+0x1>
     55a:	80 17       	cp	r24, r16
     55c:	91 07       	cpc	r25, r17
     55e:	08 f4       	brcc	.+2      	; 0x562 <pvPortMalloc+0x60>
     560:	64 c0       	rjmp	.+200    	; 0x62a <pvPortMalloc+0x128>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     562:	c0 91 84 02 	lds	r28, 0x0284	; 0x800284 <xStart>
     566:	d0 91 85 02 	lds	r29, 0x0285	; 0x800285 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     56a:	e4 e8       	ldi	r30, 0x84	; 132
     56c:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     56e:	02 c0       	rjmp	.+4      	; 0x574 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     570:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     572:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	9b 81       	ldd	r25, Y+3	; 0x03
     578:	80 17       	cp	r24, r16
     57a:	91 07       	cpc	r25, r17
     57c:	20 f4       	brcc	.+8      	; 0x586 <pvPortMalloc+0x84>
     57e:	88 81       	ld	r24, Y
     580:	99 81       	ldd	r25, Y+1	; 0x01
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	a9 f7       	brne	.-22     	; 0x570 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     586:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <pxEnd>
     58a:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <pxEnd+0x1>
     58e:	c8 17       	cp	r28, r24
     590:	d9 07       	cpc	r29, r25
     592:	09 f4       	brne	.+2      	; 0x596 <pvPortMalloc+0x94>
     594:	4d c0       	rjmp	.+154    	; 0x630 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     596:	e0 80       	ld	r14, Z
     598:	f1 80       	ldd	r15, Z+1	; 0x01
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	e8 0e       	add	r14, r24
     59e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5a0:	88 81       	ld	r24, Y
     5a2:	99 81       	ldd	r25, Y+1	; 0x01
     5a4:	91 83       	std	Z+1, r25	; 0x01
     5a6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5a8:	2a 81       	ldd	r18, Y+2	; 0x02
     5aa:	3b 81       	ldd	r19, Y+3	; 0x03
     5ac:	20 1b       	sub	r18, r16
     5ae:	31 0b       	sbc	r19, r17
     5b0:	29 30       	cpi	r18, 0x09	; 9
     5b2:	31 05       	cpc	r19, r1
     5b4:	48 f0       	brcs	.+18     	; 0x5c8 <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5b6:	ce 01       	movw	r24, r28
     5b8:	80 0f       	add	r24, r16
     5ba:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5bc:	fc 01       	movw	r30, r24
     5be:	33 83       	std	Z+3, r19	; 0x03
     5c0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     5c2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     5c4:	0a 83       	std	Y+2, r16	; 0x02
     5c6:	53 df       	rcall	.-346    	; 0x46e <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5c8:	2a 81       	ldd	r18, Y+2	; 0x02
     5ca:	3b 81       	ldd	r19, Y+3	; 0x03
     5cc:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <xFreeBytesRemaining>
     5d0:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <xFreeBytesRemaining+0x1>
     5d4:	82 1b       	sub	r24, r18
     5d6:	93 0b       	sbc	r25, r19
     5d8:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <xFreeBytesRemaining+0x1>
     5dc:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5e0:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <xMinimumEverFreeBytesRemaining>
     5e4:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <xMinimumEverFreeBytesRemaining+0x1>
     5e8:	84 17       	cp	r24, r20
     5ea:	95 07       	cpc	r25, r21
     5ec:	20 f4       	brcc	.+8      	; 0x5f6 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5ee:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <xMinimumEverFreeBytesRemaining+0x1>
     5f2:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5f6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
     5fa:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__data_end+0x1>
     5fe:	28 2b       	or	r18, r24
     600:	39 2b       	or	r19, r25
     602:	3b 83       	std	Y+3, r19	; 0x03
     604:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     606:	19 82       	std	Y+1, r1	; 0x01
     608:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     60a:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <xNumberOfSuccessfulAllocations>
     60e:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <xNumberOfSuccessfulAllocations+0x1>
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <xNumberOfSuccessfulAllocations+0x1>
     618:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <xNumberOfSuccessfulAllocations>
     61c:	0b c0       	rjmp	.+22     	; 0x634 <pvPortMalloc+0x132>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     61e:	e1 2c       	mov	r14, r1
     620:	f1 2c       	mov	r15, r1
     622:	08 c0       	rjmp	.+16     	; 0x634 <pvPortMalloc+0x132>
     624:	e1 2c       	mov	r14, r1
     626:	f1 2c       	mov	r15, r1
     628:	05 c0       	rjmp	.+10     	; 0x634 <pvPortMalloc+0x132>
     62a:	e1 2c       	mov	r14, r1
     62c:	f1 2c       	mov	r15, r1
     62e:	02 c0       	rjmp	.+4      	; 0x634 <pvPortMalloc+0x132>
     630:	e1 2c       	mov	r14, r1
     632:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     634:	0e 94 88 0b 	call	0x1710	; 0x1710 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     638:	e1 14       	cp	r14, r1
     63a:	f1 04       	cpc	r15, r1
     63c:	11 f4       	brne	.+4      	; 0x642 <pvPortMalloc+0x140>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     63e:	0e 94 3a 12 	call	0x2474	; 0x2474 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     642:	c7 01       	movw	r24, r14
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	08 95       	ret

00000652 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     65a:	00 97       	sbiw	r24, 0x00	; 0
     65c:	89 f1       	breq	.+98     	; 0x6c0 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     65e:	ec 01       	movw	r28, r24
     660:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     662:	4a 81       	ldd	r20, Y+2	; 0x02
     664:	5b 81       	ldd	r21, Y+3	; 0x03
     666:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__data_end>
     66a:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <__data_end+0x1>
     66e:	ba 01       	movw	r22, r20
     670:	62 23       	and	r22, r18
     672:	73 23       	and	r23, r19
     674:	67 2b       	or	r22, r23
     676:	21 f1       	breq	.+72     	; 0x6c0 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     678:	68 81       	ld	r22, Y
     67a:	79 81       	ldd	r23, Y+1	; 0x01
     67c:	67 2b       	or	r22, r23
     67e:	01 f5       	brne	.+64     	; 0x6c0 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     680:	20 95       	com	r18
     682:	30 95       	com	r19
     684:	24 23       	and	r18, r20
     686:	35 23       	and	r19, r21
     688:	3b 83       	std	Y+3, r19	; 0x03
     68a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     68c:	01 d7       	rcall	.+3586   	; 0x1490 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	9b 81       	ldd	r25, Y+3	; 0x03
     692:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <xFreeBytesRemaining>
     696:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <xFreeBytesRemaining+0x1>
     69a:	82 0f       	add	r24, r18
     69c:	93 1f       	adc	r25, r19
     69e:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <xFreeBytesRemaining+0x1>
     6a2:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6a6:	ce 01       	movw	r24, r28
     6a8:	e2 de       	rcall	.-572    	; 0x46e <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     6aa:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <xNumberOfSuccessfulFrees>
     6ae:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <xNumberOfSuccessfulFrees+0x1>
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <xNumberOfSuccessfulFrees+0x1>
     6b8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     6bc:	0e 94 88 0b 	call	0x1710	; 0x1710 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6ca:	fc 01       	movw	r30, r24
     6cc:	03 96       	adiw	r24, 0x03	; 3
     6ce:	92 83       	std	Z+2, r25	; 0x02
     6d0:	81 83       	std	Z+1, r24	; 0x01
     6d2:	4f ef       	ldi	r20, 0xFF	; 255
     6d4:	5f ef       	ldi	r21, 0xFF	; 255
     6d6:	ba 01       	movw	r22, r20
     6d8:	43 83       	std	Z+3, r20	; 0x03
     6da:	54 83       	std	Z+4, r21	; 0x04
     6dc:	65 83       	std	Z+5, r22	; 0x05
     6de:	76 83       	std	Z+6, r23	; 0x06
     6e0:	90 87       	std	Z+8, r25	; 0x08
     6e2:	87 83       	std	Z+7, r24	; 0x07
     6e4:	92 87       	std	Z+10, r25	; 0x0a
     6e6:	81 87       	std	Z+9, r24	; 0x09
     6e8:	10 82       	st	Z, r1
     6ea:	08 95       	ret

000006ec <vListInitialiseItem>:
     6ec:	fc 01       	movw	r30, r24
     6ee:	13 86       	std	Z+11, r1	; 0x0b
     6f0:	12 86       	std	Z+10, r1	; 0x0a
     6f2:	08 95       	ret

000006f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6fe:	08 81       	ld	r16, Y
     700:	19 81       	ldd	r17, Y+1	; 0x01
     702:	2a 81       	ldd	r18, Y+2	; 0x02
     704:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     706:	0f 3f       	cpi	r16, 0xFF	; 255
     708:	4f ef       	ldi	r20, 0xFF	; 255
     70a:	14 07       	cpc	r17, r20
     70c:	24 07       	cpc	r18, r20
     70e:	34 07       	cpc	r19, r20
     710:	21 f4       	brne	.+8      	; 0x71a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     712:	fc 01       	movw	r30, r24
     714:	a1 85       	ldd	r26, Z+9	; 0x09
     716:	b2 85       	ldd	r27, Z+10	; 0x0a
     718:	11 c0       	rjmp	.+34     	; 0x73c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     71a:	dc 01       	movw	r26, r24
     71c:	13 96       	adiw	r26, 0x03	; 3
     71e:	01 c0       	rjmp	.+2      	; 0x722 <vListInsert+0x2e>
     720:	df 01       	movw	r26, r30
     722:	14 96       	adiw	r26, 0x04	; 4
     724:	ed 91       	ld	r30, X+
     726:	fc 91       	ld	r31, X
     728:	15 97       	sbiw	r26, 0x05	; 5
     72a:	40 81       	ld	r20, Z
     72c:	51 81       	ldd	r21, Z+1	; 0x01
     72e:	62 81       	ldd	r22, Z+2	; 0x02
     730:	73 81       	ldd	r23, Z+3	; 0x03
     732:	04 17       	cp	r16, r20
     734:	15 07       	cpc	r17, r21
     736:	26 07       	cpc	r18, r22
     738:	37 07       	cpc	r19, r23
     73a:	90 f7       	brcc	.-28     	; 0x720 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     73c:	14 96       	adiw	r26, 0x04	; 4
     73e:	ed 91       	ld	r30, X+
     740:	fc 91       	ld	r31, X
     742:	15 97       	sbiw	r26, 0x05	; 5
     744:	fd 83       	std	Y+5, r31	; 0x05
     746:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     748:	d7 83       	std	Z+7, r29	; 0x07
     74a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     74c:	bf 83       	std	Y+7, r27	; 0x07
     74e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     750:	15 96       	adiw	r26, 0x05	; 5
     752:	dc 93       	st	X, r29
     754:	ce 93       	st	-X, r28
     756:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     758:	9b 87       	std	Y+11, r25	; 0x0b
     75a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     75c:	fc 01       	movw	r30, r24
     75e:	20 81       	ld	r18, Z
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	20 83       	st	Z, r18
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	08 95       	ret

0000076e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     774:	a2 85       	ldd	r26, Z+10	; 0x0a
     776:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     778:	c4 81       	ldd	r28, Z+4	; 0x04
     77a:	d5 81       	ldd	r29, Z+5	; 0x05
     77c:	86 81       	ldd	r24, Z+6	; 0x06
     77e:	97 81       	ldd	r25, Z+7	; 0x07
     780:	9f 83       	std	Y+7, r25	; 0x07
     782:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     784:	c6 81       	ldd	r28, Z+6	; 0x06
     786:	d7 81       	ldd	r29, Z+7	; 0x07
     788:	84 81       	ldd	r24, Z+4	; 0x04
     78a:	95 81       	ldd	r25, Z+5	; 0x05
     78c:	9d 83       	std	Y+5, r25	; 0x05
     78e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     790:	11 96       	adiw	r26, 0x01	; 1
     792:	8d 91       	ld	r24, X+
     794:	9c 91       	ld	r25, X
     796:	12 97       	sbiw	r26, 0x02	; 2
     798:	e8 17       	cp	r30, r24
     79a:	f9 07       	cpc	r31, r25
     79c:	31 f4       	brne	.+12     	; 0x7aa <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     79e:	86 81       	ldd	r24, Z+6	; 0x06
     7a0:	97 81       	ldd	r25, Z+7	; 0x07
     7a2:	12 96       	adiw	r26, 0x02	; 2
     7a4:	9c 93       	st	X, r25
     7a6:	8e 93       	st	-X, r24
     7a8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     7aa:	13 86       	std	Z+11, r1	; 0x0b
     7ac:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     7ae:	8c 91       	ld	r24, X
     7b0:	81 50       	subi	r24, 0x01	; 1
     7b2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     7b4:	8c 91       	ld	r24, X
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     7bc:	a8 95       	wdr
     7be:	90 ec       	ldi	r25, 0xC0	; 192
     7c0:	88 e1       	ldi	r24, 0x18	; 24
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	a8 95       	wdr
     7c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     7d2:	08 95       	ret

000007d4 <pxPortInitialiseStack>:
     7d4:	fc 01       	movw	r30, r24
     7d6:	60 83       	st	Z, r22
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	70 83       	st	Z, r23
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	10 82       	st	Z, r1
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	10 82       	st	Z, r1
     7e4:	31 97       	sbiw	r30, 0x01	; 1
     7e6:	20 e8       	ldi	r18, 0x80	; 128
     7e8:	20 83       	st	Z, r18
     7ea:	31 97       	sbiw	r30, 0x01	; 1
     7ec:	10 82       	st	Z, r1
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	10 82       	st	Z, r1
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	10 82       	st	Z, r1
     7f6:	77 97       	sbiw	r30, 0x17	; 23
     7f8:	40 83       	st	Z, r20
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	50 83       	st	Z, r21
     7fe:	86 97       	sbiw	r24, 0x26	; 38
     800:	08 95       	ret

00000802 <xPortStartScheduler>:
     802:	dc df       	rcall	.-72     	; 0x7bc <prvSetupTimerInterrupt>
     804:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
     808:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
     80c:	cd 91       	ld	r28, X+
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	dd 91       	ld	r29, X+
     812:	de bf       	out	0x3e, r29	; 62
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	bf 91       	pop	r27
     81e:	af 91       	pop	r26
     820:	9f 91       	pop	r25
     822:	8f 91       	pop	r24
     824:	7f 91       	pop	r23
     826:	6f 91       	pop	r22
     828:	5f 91       	pop	r21
     82a:	4f 91       	pop	r20
     82c:	3f 91       	pop	r19
     82e:	2f 91       	pop	r18
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	bf 90       	pop	r11
     83e:	af 90       	pop	r10
     840:	9f 90       	pop	r9
     842:	8f 90       	pop	r8
     844:	7f 90       	pop	r7
     846:	6f 90       	pop	r6
     848:	5f 90       	pop	r5
     84a:	4f 90       	pop	r4
     84c:	3f 90       	pop	r3
     84e:	2f 90       	pop	r2
     850:	1f 90       	pop	r1
     852:	0f 90       	pop	r0
     854:	0c be       	out	0x3c, r0	; 60
     856:	0f 90       	pop	r0
     858:	0b be       	out	0x3b, r0	; 59
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	08 95       	ret
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	08 95       	ret

00000866 <vPortYield>:
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	0f 92       	push	r0
     86e:	0b b6       	in	r0, 0x3b	; 59
     870:	0f 92       	push	r0
     872:	0c b6       	in	r0, 0x3c	; 60
     874:	0f 92       	push	r0
     876:	1f 92       	push	r1
     878:	11 24       	eor	r1, r1
     87a:	2f 92       	push	r2
     87c:	3f 92       	push	r3
     87e:	4f 92       	push	r4
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	2f 93       	push	r18
     89c:	3f 93       	push	r19
     89e:	4f 93       	push	r20
     8a0:	5f 93       	push	r21
     8a2:	6f 93       	push	r22
     8a4:	7f 93       	push	r23
     8a6:	8f 93       	push	r24
     8a8:	9f 93       	push	r25
     8aa:	af 93       	push	r26
     8ac:	bf 93       	push	r27
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
     8b6:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
     8ba:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
     8be:	0d b6       	in	r0, 0x3d	; 61
     8c0:	0d 92       	st	X+, r0
     8c2:	0e b6       	in	r0, 0x3e	; 62
     8c4:	0d 92       	st	X+, r0
     8c6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <vTaskSwitchContext>
     8ca:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
     8ce:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
     8d2:	cd 91       	ld	r28, X+
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	dd 91       	ld	r29, X+
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	bf 91       	pop	r27
     8e4:	af 91       	pop	r26
     8e6:	9f 91       	pop	r25
     8e8:	8f 91       	pop	r24
     8ea:	7f 91       	pop	r23
     8ec:	6f 91       	pop	r22
     8ee:	5f 91       	pop	r21
     8f0:	4f 91       	pop	r20
     8f2:	3f 91       	pop	r19
     8f4:	2f 91       	pop	r18
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	3f 90       	pop	r3
     914:	2f 90       	pop	r2
     916:	1f 90       	pop	r1
     918:	0f 90       	pop	r0
     91a:	0c be       	out	0x3c, r0	; 60
     91c:	0f 90       	pop	r0
     91e:	0b be       	out	0x3b, r0	; 59
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	08 95       	ret

00000928 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	0f 92       	push	r0
     930:	0b b6       	in	r0, 0x3b	; 59
     932:	0f 92       	push	r0
     934:	0c b6       	in	r0, 0x3c	; 60
     936:	0f 92       	push	r0
     938:	1f 92       	push	r1
     93a:	11 24       	eor	r1, r1
     93c:	2f 92       	push	r2
     93e:	3f 92       	push	r3
     940:	4f 92       	push	r4
     942:	5f 92       	push	r5
     944:	6f 92       	push	r6
     946:	7f 92       	push	r7
     948:	8f 92       	push	r8
     94a:	9f 92       	push	r9
     94c:	af 92       	push	r10
     94e:	bf 92       	push	r11
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ef 93       	push	r30
     976:	ff 93       	push	r31
     978:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
     97c:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
     980:	0d b6       	in	r0, 0x3d	; 61
     982:	0d 92       	st	X+, r0
     984:	0e b6       	in	r0, 0x3e	; 62
     986:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     988:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     98a:	96 d5       	rcall	.+2860   	; 0x14b8 <xTaskIncrementTick>
     98c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     98e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     992:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
     996:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
     99a:	cd 91       	ld	r28, X+
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	dd 91       	ld	r29, X+
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	bf 91       	pop	r27
     9ac:	af 91       	pop	r26
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	7f 91       	pop	r23
     9b4:	6f 91       	pop	r22
     9b6:	5f 91       	pop	r21
     9b8:	4f 91       	pop	r20
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	7f 90       	pop	r7
     9d4:	6f 90       	pop	r6
     9d6:	5f 90       	pop	r5
     9d8:	4f 90       	pop	r4
     9da:	3f 90       	pop	r3
     9dc:	2f 90       	pop	r2
     9de:	1f 90       	pop	r1
     9e0:	0f 90       	pop	r0
     9e2:	0c be       	out	0x3c, r0	; 60
     9e4:	0f 90       	pop	r0
     9e6:	0b be       	out	0x3b, r0	; 59
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     9ee:	08 95       	ret

000009f0 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     9f0:	9b df       	rcall	.-202    	; 0x928 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     9f2:	18 95       	reti

000009f4 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	0f 92       	push	r0
     9fa:	fc 01       	movw	r30, r24
     9fc:	86 8d       	ldd	r24, Z+30	; 0x1e
     9fe:	81 11       	cpse	r24, r1
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <prvIsQueueEmpty+0x12>
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <prvIsQueueEmpty+0x14>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	08 95       	ret

00000a0e <prvIsQueueFull>:
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	0f 92       	push	r0
     a14:	fc 01       	movw	r30, r24
     a16:	26 8d       	ldd	r18, Z+30	; 0x1e
     a18:	87 8d       	ldd	r24, Z+31	; 0x1f
     a1a:	28 13       	cpse	r18, r24
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <prvIsQueueFull+0x14>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <prvIsQueueFull+0x16>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	08 95       	ret

00000a2a <prvCopyDataToQueue>:
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ec 01       	movw	r28, r24
     a34:	04 2f       	mov	r16, r20
     a36:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a38:	48 a1       	ldd	r20, Y+32	; 0x20
     a3a:	41 11       	cpse	r20, r1
     a3c:	0c c0       	rjmp	.+24     	; 0xa56 <prvCopyDataToQueue+0x2c>
     a3e:	88 81       	ld	r24, Y
     a40:	99 81       	ldd	r25, Y+1	; 0x01
     a42:	89 2b       	or	r24, r25
     a44:	09 f0       	breq	.+2      	; 0xa48 <prvCopyDataToQueue+0x1e>
     a46:	42 c0       	rjmp	.+132    	; 0xacc <prvCopyDataToQueue+0xa2>
     a48:	8c 81       	ldd	r24, Y+4	; 0x04
     a4a:	9d 81       	ldd	r25, Y+5	; 0x05
     a4c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <xTaskPriorityDisinherit>
     a50:	1d 82       	std	Y+5, r1	; 0x05
     a52:	1c 82       	std	Y+4, r1	; 0x04
     a54:	42 c0       	rjmp	.+132    	; 0xada <prvCopyDataToQueue+0xb0>
     a56:	01 11       	cpse	r16, r1
     a58:	17 c0       	rjmp	.+46     	; 0xa88 <prvCopyDataToQueue+0x5e>
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	8a 81       	ldd	r24, Y+2	; 0x02
     a5e:	9b 81       	ldd	r25, Y+3	; 0x03
     a60:	0e 94 01 20 	call	0x4002	; 0x4002 <memcpy>
     a64:	28 a1       	ldd	r18, Y+32	; 0x20
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	9b 81       	ldd	r25, Y+3	; 0x03
     a6a:	82 0f       	add	r24, r18
     a6c:	91 1d       	adc	r25, r1
     a6e:	9b 83       	std	Y+3, r25	; 0x03
     a70:	8a 83       	std	Y+2, r24	; 0x02
     a72:	2c 81       	ldd	r18, Y+4	; 0x04
     a74:	3d 81       	ldd	r19, Y+5	; 0x05
     a76:	82 17       	cp	r24, r18
     a78:	93 07       	cpc	r25, r19
     a7a:	50 f1       	brcs	.+84     	; 0xad0 <prvCopyDataToQueue+0xa6>
     a7c:	88 81       	ld	r24, Y
     a7e:	99 81       	ldd	r25, Y+1	; 0x01
     a80:	9b 83       	std	Y+3, r25	; 0x03
     a82:	8a 83       	std	Y+2, r24	; 0x02
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	29 c0       	rjmp	.+82     	; 0xada <prvCopyDataToQueue+0xb0>
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	8e 81       	ldd	r24, Y+6	; 0x06
     a8c:	9f 81       	ldd	r25, Y+7	; 0x07
     a8e:	0e 94 01 20 	call	0x4002	; 0x4002 <memcpy>
     a92:	88 a1       	ldd	r24, Y+32	; 0x20
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	91 95       	neg	r25
     a98:	81 95       	neg	r24
     a9a:	91 09       	sbc	r25, r1
     a9c:	2e 81       	ldd	r18, Y+6	; 0x06
     a9e:	3f 81       	ldd	r19, Y+7	; 0x07
     aa0:	28 0f       	add	r18, r24
     aa2:	39 1f       	adc	r19, r25
     aa4:	3f 83       	std	Y+7, r19	; 0x07
     aa6:	2e 83       	std	Y+6, r18	; 0x06
     aa8:	48 81       	ld	r20, Y
     aaa:	59 81       	ldd	r21, Y+1	; 0x01
     aac:	24 17       	cp	r18, r20
     aae:	35 07       	cpc	r19, r21
     ab0:	30 f4       	brcc	.+12     	; 0xabe <prvCopyDataToQueue+0x94>
     ab2:	2c 81       	ldd	r18, Y+4	; 0x04
     ab4:	3d 81       	ldd	r19, Y+5	; 0x05
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	9f 83       	std	Y+7, r25	; 0x07
     abc:	8e 83       	std	Y+6, r24	; 0x06
     abe:	02 30       	cpi	r16, 0x02	; 2
     ac0:	49 f4       	brne	.+18     	; 0xad4 <prvCopyDataToQueue+0xaa>
     ac2:	11 23       	and	r17, r17
     ac4:	49 f0       	breq	.+18     	; 0xad8 <prvCopyDataToQueue+0xae>
     ac6:	11 50       	subi	r17, 0x01	; 1
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	07 c0       	rjmp	.+14     	; 0xada <prvCopyDataToQueue+0xb0>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	05 c0       	rjmp	.+10     	; 0xada <prvCopyDataToQueue+0xb0>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	03 c0       	rjmp	.+6      	; 0xada <prvCopyDataToQueue+0xb0>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	01 c0       	rjmp	.+2      	; 0xada <prvCopyDataToQueue+0xb0>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	1f 5f       	subi	r17, 0xFF	; 255
     adc:	1e 8f       	std	Y+30, r17	; 0x1e
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <prvCopyDataFromQueue>:
     ae8:	fc 01       	movw	r30, r24
     aea:	40 a1       	ldd	r20, Z+32	; 0x20
     aec:	44 23       	and	r20, r20
     aee:	a9 f0       	breq	.+42     	; 0xb1a <prvCopyDataFromQueue+0x32>
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	26 81       	ldd	r18, Z+6	; 0x06
     af4:	37 81       	ldd	r19, Z+7	; 0x07
     af6:	24 0f       	add	r18, r20
     af8:	35 1f       	adc	r19, r21
     afa:	37 83       	std	Z+7, r19	; 0x07
     afc:	26 83       	std	Z+6, r18	; 0x06
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	95 81       	ldd	r25, Z+5	; 0x05
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	20 f0       	brcs	.+8      	; 0xb10 <prvCopyDataFromQueue+0x28>
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	97 83       	std	Z+7, r25	; 0x07
     b0e:	86 83       	std	Z+6, r24	; 0x06
     b10:	cb 01       	movw	r24, r22
     b12:	66 81       	ldd	r22, Z+6	; 0x06
     b14:	77 81       	ldd	r23, Z+7	; 0x07
     b16:	0c 94 01 20 	jmp	0x4002	; 0x4002 <memcpy>
     b1a:	08 95       	ret

00000b1c <prvUnlockQueue>:
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ec 01       	movw	r28, r24
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	0f 92       	push	r0
     b2a:	1a a1       	ldd	r17, Y+34	; 0x22
     b2c:	0b c0       	rjmp	.+22     	; 0xb44 <prvUnlockQueue+0x28>
     b2e:	8b 89       	ldd	r24, Y+19	; 0x13
     b30:	88 23       	and	r24, r24
     b32:	51 f0       	breq	.+20     	; 0xb48 <prvUnlockQueue+0x2c>
     b34:	ce 01       	movw	r24, r28
     b36:	43 96       	adiw	r24, 0x13	; 19
     b38:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <xTaskRemoveFromEventList>
     b3c:	81 11       	cpse	r24, r1
     b3e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vTaskMissedYield>
     b42:	11 50       	subi	r17, 0x01	; 1
     b44:	11 16       	cp	r1, r17
     b46:	9c f3       	brlt	.-26     	; 0xb2e <prvUnlockQueue+0x12>
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	8a a3       	std	Y+34, r24	; 0x22
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	0f 92       	push	r0
     b56:	19 a1       	ldd	r17, Y+33	; 0x21
     b58:	0a c0       	rjmp	.+20     	; 0xb6e <prvUnlockQueue+0x52>
     b5a:	88 85       	ldd	r24, Y+8	; 0x08
     b5c:	88 23       	and	r24, r24
     b5e:	49 f0       	breq	.+18     	; 0xb72 <prvUnlockQueue+0x56>
     b60:	ce 01       	movw	r24, r28
     b62:	08 96       	adiw	r24, 0x08	; 8
     b64:	ee d7       	rcall	.+4060   	; 0x1b42 <xTaskRemoveFromEventList>
     b66:	81 11       	cpse	r24, r1
     b68:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vTaskMissedYield>
     b6c:	11 50       	subi	r17, 0x01	; 1
     b6e:	11 16       	cp	r1, r17
     b70:	a4 f3       	brlt	.-24     	; 0xb5a <prvUnlockQueue+0x3e>
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	89 a3       	std	Y+33, r24	; 0x21
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	08 95       	ret

00000b82 <xQueueGenericReset>:
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	0f 92       	push	r0
     b8e:	e8 81       	ld	r30, Y
     b90:	f9 81       	ldd	r31, Y+1	; 0x01
     b92:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b94:	28 a1       	ldd	r18, Y+32	; 0x20
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	82 9f       	mul	r24, r18
     b9c:	a0 01       	movw	r20, r0
     b9e:	83 9f       	mul	r24, r19
     ba0:	50 0d       	add	r21, r0
     ba2:	92 9f       	mul	r25, r18
     ba4:	50 0d       	add	r21, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	4e 0f       	add	r20, r30
     baa:	5f 1f       	adc	r21, r31
     bac:	5d 83       	std	Y+5, r21	; 0x05
     bae:	4c 83       	std	Y+4, r20	; 0x04
     bb0:	1e 8e       	std	Y+30, r1	; 0x1e
     bb2:	fb 83       	std	Y+3, r31	; 0x03
     bb4:	ea 83       	std	Y+2, r30	; 0x02
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	28 9f       	mul	r18, r24
     bba:	a0 01       	movw	r20, r0
     bbc:	29 9f       	mul	r18, r25
     bbe:	50 0d       	add	r21, r0
     bc0:	38 9f       	mul	r19, r24
     bc2:	50 0d       	add	r21, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	cf 01       	movw	r24, r30
     bc8:	84 0f       	add	r24, r20
     bca:	95 1f       	adc	r25, r21
     bcc:	9f 83       	std	Y+7, r25	; 0x07
     bce:	8e 83       	std	Y+6, r24	; 0x06
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	89 a3       	std	Y+33, r24	; 0x21
     bd4:	8a a3       	std	Y+34, r24	; 0x22
     bd6:	61 11       	cpse	r22, r1
     bd8:	0a c0       	rjmp	.+20     	; 0xbee <xQueueGenericReset+0x6c>
     bda:	88 85       	ldd	r24, Y+8	; 0x08
     bdc:	88 23       	and	r24, r24
     bde:	69 f0       	breq	.+26     	; 0xbfa <xQueueGenericReset+0x78>
     be0:	ce 01       	movw	r24, r28
     be2:	08 96       	adiw	r24, 0x08	; 8
     be4:	ae d7       	rcall	.+3932   	; 0x1b42 <xTaskRemoveFromEventList>
     be6:	88 23       	and	r24, r24
     be8:	41 f0       	breq	.+16     	; 0xbfa <xQueueGenericReset+0x78>
     bea:	3d de       	rcall	.-902    	; 0x866 <vPortYield>
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <xQueueGenericReset+0x78>
     bee:	ce 01       	movw	r24, r28
     bf0:	08 96       	adiw	r24, 0x08	; 8
     bf2:	6b dd       	rcall	.-1322   	; 0x6ca <vListInitialise>
     bf4:	ce 01       	movw	r24, r28
     bf6:	43 96       	adiw	r24, 0x13	; 19
     bf8:	68 dd       	rcall	.-1328   	; 0x6ca <vListInitialise>
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <prvInitialiseNewQueue>:
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	f8 01       	movw	r30, r16
     c0c:	61 11       	cpse	r22, r1
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <prvInitialiseNewQueue+0x10>
     c10:	11 83       	std	Z+1, r17	; 0x01
     c12:	00 83       	st	Z, r16
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <prvInitialiseNewQueue+0x14>
     c16:	51 83       	std	Z+1, r21	; 0x01
     c18:	40 83       	st	Z, r20
     c1a:	87 8f       	std	Z+31, r24	; 0x1f
     c1c:	60 a3       	std	Z+32, r22	; 0x20
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	cf 01       	movw	r24, r30
     c22:	af df       	rcall	.-162    	; 0xb82 <xQueueGenericReset>
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <xQueueGenericCreate>:
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	f8 2e       	mov	r15, r24
     c3a:	e6 2e       	mov	r14, r22
     c3c:	d4 2e       	mov	r13, r20
     c3e:	86 9f       	mul	r24, r22
     c40:	c0 01       	movw	r24, r0
     c42:	11 24       	eor	r1, r1
     c44:	83 96       	adiw	r24, 0x23	; 35
     c46:	5d dc       	rcall	.-1862   	; 0x502 <pvPortMalloc>
     c48:	ec 01       	movw	r28, r24
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	41 f0       	breq	.+16     	; 0xc5e <xQueueGenericCreate+0x34>
     c4e:	8c 01       	movw	r16, r24
     c50:	2d 2d       	mov	r18, r13
     c52:	ac 01       	movw	r20, r24
     c54:	4d 5d       	subi	r20, 0xDD	; 221
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	6e 2d       	mov	r22, r14
     c5a:	8f 2d       	mov	r24, r15
     c5c:	d4 df       	rcall	.-88     	; 0xc06 <prvInitialiseNewQueue>
     c5e:	ce 01       	movw	r24, r28
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	08 95       	ret

00000c70 <xQueueGenericSend>:
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	29 97       	sbiw	r28, 0x09	; 9
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	7c 01       	movw	r14, r24
     c92:	6b 01       	movw	r12, r22
     c94:	2e 83       	std	Y+6, r18	; 0x06
     c96:	3f 83       	std	Y+7, r19	; 0x07
     c98:	48 87       	std	Y+8, r20	; 0x08
     c9a:	59 87       	std	Y+9, r21	; 0x09
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	0f 92       	push	r0
     ca4:	f7 01       	movw	r30, r14
     ca6:	96 8d       	ldd	r25, Z+30	; 0x1e
     ca8:	87 8d       	ldd	r24, Z+31	; 0x1f
     caa:	98 17       	cp	r25, r24
     cac:	10 f0       	brcs	.+4      	; 0xcb2 <xQueueGenericSend+0x42>
     cae:	02 30       	cpi	r16, 0x02	; 2
     cb0:	a9 f4       	brne	.+42     	; 0xcdc <xQueueGenericSend+0x6c>
     cb2:	40 2f       	mov	r20, r16
     cb4:	b6 01       	movw	r22, r12
     cb6:	c7 01       	movw	r24, r14
     cb8:	b8 de       	rcall	.-656    	; 0xa2a <prvCopyDataToQueue>
     cba:	f7 01       	movw	r30, r14
     cbc:	93 89       	ldd	r25, Z+19	; 0x13
     cbe:	99 23       	and	r25, r25
     cc0:	39 f0       	breq	.+14     	; 0xcd0 <xQueueGenericSend+0x60>
     cc2:	c7 01       	movw	r24, r14
     cc4:	43 96       	adiw	r24, 0x13	; 19
     cc6:	3d d7       	rcall	.+3706   	; 0x1b42 <xTaskRemoveFromEventList>
     cc8:	88 23       	and	r24, r24
     cca:	21 f0       	breq	.+8      	; 0xcd4 <xQueueGenericSend+0x64>
     ccc:	cc dd       	rcall	.-1128   	; 0x866 <vPortYield>
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <xQueueGenericSend+0x64>
     cd0:	81 11       	cpse	r24, r1
     cd2:	c9 dd       	rcall	.-1134   	; 0x866 <vPortYield>
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	46 c0       	rjmp	.+140    	; 0xd68 <xQueueGenericSend+0xf8>
     cdc:	8e 81       	ldd	r24, Y+6	; 0x06
     cde:	9f 81       	ldd	r25, Y+7	; 0x07
     ce0:	a8 85       	ldd	r26, Y+8	; 0x08
     ce2:	b9 85       	ldd	r27, Y+9	; 0x09
     ce4:	89 2b       	or	r24, r25
     ce6:	8a 2b       	or	r24, r26
     ce8:	8b 2b       	or	r24, r27
     cea:	21 f4       	brne	.+8      	; 0xcf4 <xQueueGenericSend+0x84>
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	3a c0       	rjmp	.+116    	; 0xd68 <xQueueGenericSend+0xf8>
     cf4:	11 11       	cpse	r17, r1
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <xQueueGenericSend+0x90>
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	d1 d7       	rcall	.+4002   	; 0x1ca0 <vTaskInternalSetTimeOutState>
     cfe:	11 e0       	ldi	r17, 0x01	; 1
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	c5 d3       	rcall	.+1930   	; 0x1490 <vTaskSuspendAll>
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	0f 92       	push	r0
     d0c:	f7 01       	movw	r30, r14
     d0e:	81 a1       	ldd	r24, Z+33	; 0x21
     d10:	8f 3f       	cpi	r24, 0xFF	; 255
     d12:	09 f4       	brne	.+2      	; 0xd16 <xQueueGenericSend+0xa6>
     d14:	11 a2       	std	Z+33, r1	; 0x21
     d16:	f7 01       	movw	r30, r14
     d18:	82 a1       	ldd	r24, Z+34	; 0x22
     d1a:	8f 3f       	cpi	r24, 0xFF	; 255
     d1c:	09 f4       	brne	.+2      	; 0xd20 <xQueueGenericSend+0xb0>
     d1e:	12 a2       	std	Z+34, r1	; 0x22
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	be 01       	movw	r22, r28
     d26:	6a 5f       	subi	r22, 0xFA	; 250
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	ce 01       	movw	r24, r28
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	c9 d7       	rcall	.+3986   	; 0x1cc2 <xTaskCheckForTimeOut>
     d30:	81 11       	cpse	r24, r1
     d32:	16 c0       	rjmp	.+44     	; 0xd60 <xQueueGenericSend+0xf0>
     d34:	c7 01       	movw	r24, r14
     d36:	6b de       	rcall	.-810    	; 0xa0e <prvIsQueueFull>
     d38:	88 23       	and	r24, r24
     d3a:	71 f0       	breq	.+28     	; 0xd58 <xQueueGenericSend+0xe8>
     d3c:	4e 81       	ldd	r20, Y+6	; 0x06
     d3e:	5f 81       	ldd	r21, Y+7	; 0x07
     d40:	68 85       	ldd	r22, Y+8	; 0x08
     d42:	79 85       	ldd	r23, Y+9	; 0x09
     d44:	c7 01       	movw	r24, r14
     d46:	08 96       	adiw	r24, 0x08	; 8
     d48:	a3 d6       	rcall	.+3398   	; 0x1a90 <vTaskPlaceOnEventList>
     d4a:	c7 01       	movw	r24, r14
     d4c:	e7 de       	rcall	.-562    	; 0xb1c <prvUnlockQueue>
     d4e:	e0 d4       	rcall	.+2496   	; 0x1710 <xTaskResumeAll>
     d50:	81 11       	cpse	r24, r1
     d52:	a5 cf       	rjmp	.-182    	; 0xc9e <xQueueGenericSend+0x2e>
     d54:	88 dd       	rcall	.-1264   	; 0x866 <vPortYield>
     d56:	a3 cf       	rjmp	.-186    	; 0xc9e <xQueueGenericSend+0x2e>
     d58:	c7 01       	movw	r24, r14
     d5a:	e0 de       	rcall	.-576    	; 0xb1c <prvUnlockQueue>
     d5c:	d9 d4       	rcall	.+2482   	; 0x1710 <xTaskResumeAll>
     d5e:	9f cf       	rjmp	.-194    	; 0xc9e <xQueueGenericSend+0x2e>
     d60:	c7 01       	movw	r24, r14
     d62:	dc de       	rcall	.-584    	; 0xb1c <prvUnlockQueue>
     d64:	d5 d4       	rcall	.+2474   	; 0x1710 <xTaskResumeAll>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	29 96       	adiw	r28, 0x09	; 9
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	08 95       	ret

00000d86 <prvInitialiseMutex>:
     d86:	0f 93       	push	r16
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	69 f0       	breq	.+26     	; 0xda6 <prvInitialiseMutex+0x20>
     d8c:	fc 01       	movw	r30, r24
     d8e:	15 82       	std	Z+5, r1	; 0x05
     d90:	14 82       	std	Z+4, r1	; 0x04
     d92:	11 82       	std	Z+1, r1	; 0x01
     d94:	10 82       	st	Z, r1
     d96:	16 82       	std	Z+6, r1	; 0x06
     d98:	00 e0       	ldi	r16, 0x00	; 0
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	65 df       	rcall	.-310    	; 0xc70 <xQueueGenericSend>
     da6:	0f 91       	pop	r16
     da8:	08 95       	ret

00000daa <xQueueCreateMutex>:
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	48 2f       	mov	r20, r24
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	3a df       	rcall	.-396    	; 0xc2a <xQueueGenericCreate>
     db6:	ec 01       	movw	r28, r24
     db8:	e6 df       	rcall	.-52     	; 0xd86 <prvInitialiseMutex>
     dba:	ce 01       	movw	r24, r28
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <xQueueGenericSendFromISR>:
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	8a 01       	movw	r16, r20
     dd0:	fc 01       	movw	r30, r24
     dd2:	56 8d       	ldd	r21, Z+30	; 0x1e
     dd4:	37 8d       	ldd	r19, Z+31	; 0x1f
     dd6:	53 17       	cp	r21, r19
     dd8:	10 f0       	brcs	.+4      	; 0xdde <xQueueGenericSendFromISR+0x1c>
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	f1 f4       	brne	.+60     	; 0xe1a <xQueueGenericSendFromISR+0x58>
     dde:	42 2f       	mov	r20, r18
     de0:	78 01       	movw	r14, r16
     de2:	ec 01       	movw	r28, r24
     de4:	1a a1       	ldd	r17, Y+34	; 0x22
     de6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de8:	ce 01       	movw	r24, r28
     dea:	1f de       	rcall	.-962    	; 0xa2a <prvCopyDataToQueue>
     dec:	1f 3f       	cpi	r17, 0xFF	; 255
     dee:	79 f4       	brne	.+30     	; 0xe0e <xQueueGenericSendFromISR+0x4c>
     df0:	8b 89       	ldd	r24, Y+19	; 0x13
     df2:	88 23       	and	r24, r24
     df4:	a1 f0       	breq	.+40     	; 0xe1e <xQueueGenericSendFromISR+0x5c>
     df6:	ce 01       	movw	r24, r28
     df8:	43 96       	adiw	r24, 0x13	; 19
     dfa:	a3 d6       	rcall	.+3398   	; 0x1b42 <xTaskRemoveFromEventList>
     dfc:	88 23       	and	r24, r24
     dfe:	89 f0       	breq	.+34     	; 0xe22 <xQueueGenericSendFromISR+0x60>
     e00:	e1 14       	cp	r14, r1
     e02:	f1 04       	cpc	r15, r1
     e04:	81 f0       	breq	.+32     	; 0xe26 <xQueueGenericSendFromISR+0x64>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	f7 01       	movw	r30, r14
     e0a:	80 83       	st	Z, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <xQueueGenericSendFromISR+0x66>
     e0e:	ff 24       	eor	r15, r15
     e10:	f3 94       	inc	r15
     e12:	f1 0e       	add	r15, r17
     e14:	fa a2       	std	Y+34, r15	; 0x22
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <xQueueGenericSendFromISR+0x66>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <xQueueGenericSendFromISR+0x66>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <xQueueGenericSendFromISR+0x66>
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <xQueueGenericSendFromISR+0x66>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <xQueueReceive>:
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	29 97       	sbiw	r28, 0x09	; 9
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	8c 01       	movw	r16, r24
     e58:	6b 01       	movw	r12, r22
     e5a:	2e 83       	std	Y+6, r18	; 0x06
     e5c:	3f 83       	std	Y+7, r19	; 0x07
     e5e:	48 87       	std	Y+8, r20	; 0x08
     e60:	59 87       	std	Y+9, r21	; 0x09
     e62:	e1 2c       	mov	r14, r1
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	0f 92       	push	r0
     e6a:	f8 01       	movw	r30, r16
     e6c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     e6e:	ff 20       	and	r15, r15
     e70:	91 f0       	breq	.+36     	; 0xe96 <xQueueReceive+0x60>
     e72:	b6 01       	movw	r22, r12
     e74:	c8 01       	movw	r24, r16
     e76:	38 de       	rcall	.-912    	; 0xae8 <prvCopyDataFromQueue>
     e78:	fa 94       	dec	r15
     e7a:	f8 01       	movw	r30, r16
     e7c:	f6 8e       	std	Z+30, r15	; 0x1e
     e7e:	80 85       	ldd	r24, Z+8	; 0x08
     e80:	88 23       	and	r24, r24
     e82:	29 f0       	breq	.+10     	; 0xe8e <xQueueReceive+0x58>
     e84:	c8 01       	movw	r24, r16
     e86:	08 96       	adiw	r24, 0x08	; 8
     e88:	5c d6       	rcall	.+3256   	; 0x1b42 <xTaskRemoveFromEventList>
     e8a:	81 11       	cpse	r24, r1
     e8c:	ec dc       	rcall	.-1576   	; 0x866 <vPortYield>
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	4c c0       	rjmp	.+152    	; 0xf2e <xQueueReceive+0xf8>
     e96:	8e 81       	ldd	r24, Y+6	; 0x06
     e98:	9f 81       	ldd	r25, Y+7	; 0x07
     e9a:	a8 85       	ldd	r26, Y+8	; 0x08
     e9c:	b9 85       	ldd	r27, Y+9	; 0x09
     e9e:	89 2b       	or	r24, r25
     ea0:	8a 2b       	or	r24, r26
     ea2:	8b 2b       	or	r24, r27
     ea4:	21 f4       	brne	.+8      	; 0xeae <xQueueReceive+0x78>
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	40 c0       	rjmp	.+128    	; 0xf2e <xQueueReceive+0xf8>
     eae:	e1 10       	cpse	r14, r1
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <xQueueReceive+0x86>
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	f4 d6       	rcall	.+3560   	; 0x1ca0 <vTaskInternalSetTimeOutState>
     eb8:	ee 24       	eor	r14, r14
     eba:	e3 94       	inc	r14
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	e7 d2       	rcall	.+1486   	; 0x1490 <vTaskSuspendAll>
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	f8 01       	movw	r30, r16
     eca:	81 a1       	ldd	r24, Z+33	; 0x21
     ecc:	8f 3f       	cpi	r24, 0xFF	; 255
     ece:	09 f4       	brne	.+2      	; 0xed2 <xQueueReceive+0x9c>
     ed0:	11 a2       	std	Z+33, r1	; 0x21
     ed2:	f8 01       	movw	r30, r16
     ed4:	82 a1       	ldd	r24, Z+34	; 0x22
     ed6:	8f 3f       	cpi	r24, 0xFF	; 255
     ed8:	09 f4       	brne	.+2      	; 0xedc <xQueueReceive+0xa6>
     eda:	12 a2       	std	Z+34, r1	; 0x22
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	be 01       	movw	r22, r28
     ee2:	6a 5f       	subi	r22, 0xFA	; 250
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	eb d6       	rcall	.+3542   	; 0x1cc2 <xTaskCheckForTimeOut>
     eec:	81 11       	cpse	r24, r1
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <xQueueReceive+0xe6>
     ef0:	c8 01       	movw	r24, r16
     ef2:	80 dd       	rcall	.-1280   	; 0x9f4 <prvIsQueueEmpty>
     ef4:	88 23       	and	r24, r24
     ef6:	71 f0       	breq	.+28     	; 0xf14 <xQueueReceive+0xde>
     ef8:	4e 81       	ldd	r20, Y+6	; 0x06
     efa:	5f 81       	ldd	r21, Y+7	; 0x07
     efc:	68 85       	ldd	r22, Y+8	; 0x08
     efe:	79 85       	ldd	r23, Y+9	; 0x09
     f00:	c8 01       	movw	r24, r16
     f02:	43 96       	adiw	r24, 0x13	; 19
     f04:	c5 d5       	rcall	.+2954   	; 0x1a90 <vTaskPlaceOnEventList>
     f06:	c8 01       	movw	r24, r16
     f08:	09 de       	rcall	.-1006   	; 0xb1c <prvUnlockQueue>
     f0a:	02 d4       	rcall	.+2052   	; 0x1710 <xTaskResumeAll>
     f0c:	81 11       	cpse	r24, r1
     f0e:	aa cf       	rjmp	.-172    	; 0xe64 <xQueueReceive+0x2e>
     f10:	aa dc       	rcall	.-1708   	; 0x866 <vPortYield>
     f12:	a8 cf       	rjmp	.-176    	; 0xe64 <xQueueReceive+0x2e>
     f14:	c8 01       	movw	r24, r16
     f16:	02 de       	rcall	.-1020   	; 0xb1c <prvUnlockQueue>
     f18:	fb d3       	rcall	.+2038   	; 0x1710 <xTaskResumeAll>
     f1a:	a4 cf       	rjmp	.-184    	; 0xe64 <xQueueReceive+0x2e>
     f1c:	c8 01       	movw	r24, r16
     f1e:	fe dd       	rcall	.-1028   	; 0xb1c <prvUnlockQueue>
     f20:	f7 d3       	rcall	.+2030   	; 0x1710 <xTaskResumeAll>
     f22:	c8 01       	movw	r24, r16
     f24:	67 dd       	rcall	.-1330   	; 0x9f4 <prvIsQueueEmpty>
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <xQueueReceive+0xf6>
     f2a:	9c cf       	rjmp	.-200    	; 0xe64 <xQueueReceive+0x2e>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	29 96       	adiw	r28, 0x09	; 9
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	08 95       	ret

00000f4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	0f 92       	push	r0
     f58:	89 a1       	ldd	r24, Y+33	; 0x21
     f5a:	8f 3f       	cpi	r24, 0xFF	; 255
     f5c:	09 f4       	brne	.+2      	; 0xf60 <vQueueWaitForMessageRestricted+0x14>
     f5e:	19 a2       	std	Y+33, r1	; 0x21
     f60:	8a a1       	ldd	r24, Y+34	; 0x22
     f62:	8f 3f       	cpi	r24, 0xFF	; 255
     f64:	09 f4       	brne	.+2      	; 0xf68 <vQueueWaitForMessageRestricted+0x1c>
     f66:	1a a2       	std	Y+34, r1	; 0x22
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f6e:	81 11       	cpse	r24, r1
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f72:	ce 01       	movw	r24, r28
     f74:	43 96       	adiw	r24, 0x13	; 19
     f76:	a3 d5       	rcall	.+2886   	; 0x1abe <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f78:	ce 01       	movw	r24, r28
     f7a:	d0 dd       	rcall	.-1120   	; 0xb1c <prvUnlockQueue>
    }
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <prvResetNextTaskUnblockTime>:
     f82:	e0 91 85 0c 	lds	r30, 0x0C85	; 0x800c85 <pxDelayedTaskList>
     f86:	f0 91 86 0c 	lds	r31, 0x0C86	; 0x800c86 <pxDelayedTaskList+0x1>
     f8a:	80 81       	ld	r24, Z
     f8c:	81 11       	cpse	r24, r1
     f8e:	0c c0       	rjmp	.+24     	; 0xfa8 <prvResetNextTaskUnblockTime+0x26>
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	9f ef       	ldi	r25, 0xFF	; 255
     f94:	dc 01       	movw	r26, r24
     f96:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xNextTaskUnblockTime>
     f9a:	90 93 50 0c 	sts	0x0C50, r25	; 0x800c50 <xNextTaskUnblockTime+0x1>
     f9e:	a0 93 51 0c 	sts	0x0C51, r26	; 0x800c51 <xNextTaskUnblockTime+0x2>
     fa2:	b0 93 52 0c 	sts	0x0C52, r27	; 0x800c52 <xNextTaskUnblockTime+0x3>
     fa6:	08 95       	ret
     fa8:	e0 91 85 0c 	lds	r30, 0x0C85	; 0x800c85 <pxDelayedTaskList>
     fac:	f0 91 86 0c 	lds	r31, 0x0C86	; 0x800c86 <pxDelayedTaskList+0x1>
     fb0:	07 80       	ldd	r0, Z+7	; 0x07
     fb2:	f0 85       	ldd	r31, Z+8	; 0x08
     fb4:	e0 2d       	mov	r30, r0
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	a2 81       	ldd	r26, Z+2	; 0x02
     fbc:	b3 81       	ldd	r27, Z+3	; 0x03
     fbe:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xNextTaskUnblockTime>
     fc2:	90 93 50 0c 	sts	0x0C50, r25	; 0x800c50 <xNextTaskUnblockTime+0x1>
     fc6:	a0 93 51 0c 	sts	0x0C51, r26	; 0x800c51 <xNextTaskUnblockTime+0x2>
     fca:	b0 93 52 0c 	sts	0x0C52, r27	; 0x800c52 <xNextTaskUnblockTime+0x3>
     fce:	08 95       	ret

00000fd0 <prvDeleteTCB>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fda:	3b db       	rcall	.-2442   	; 0x652 <vPortFree>
     fdc:	ce 01       	movw	r24, r28
     fde:	39 db       	rcall	.-2446   	; 0x652 <vPortFree>
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <prvInitialiseNewTask>:
     fe6:	4f 92       	push	r4
     fe8:	5f 92       	push	r5
     fea:	6f 92       	push	r6
     fec:	7f 92       	push	r7
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	2c 01       	movw	r4, r24
    1006:	5b 01       	movw	r10, r22
    1008:	4a 01       	movw	r8, r20
    100a:	39 01       	movw	r6, r18
    100c:	e6 01       	movw	r28, r12
    100e:	65 ea       	ldi	r22, 0xA5	; 165
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1016:	0e 94 0a 20 	call	0x4014	; 0x4014 <memset>
    101a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	82 1a       	sub	r8, r18
    1022:	91 08       	sbc	r9, r1
    1024:	88 0e       	add	r8, r24
    1026:	99 1e       	adc	r9, r25
    1028:	a1 14       	cp	r10, r1
    102a:	b1 04       	cpc	r11, r1
    102c:	89 f4       	brne	.+34     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    102e:	15 c0       	rjmp	.+42     	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1030:	82 2f       	mov	r24, r18
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	f5 01       	movw	r30, r10
    1036:	e8 0f       	add	r30, r24
    1038:	f9 1f       	adc	r31, r25
    103a:	30 81       	ld	r19, Z
    103c:	de 01       	movw	r26, r28
    103e:	a8 0f       	add	r26, r24
    1040:	b9 1f       	adc	r27, r25
    1042:	5d 96       	adiw	r26, 0x1d	; 29
    1044:	3c 93       	st	X, r19
    1046:	80 81       	ld	r24, Z
    1048:	88 23       	and	r24, r24
    104a:	29 f0       	breq	.+10     	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	20 31       	cpi	r18, 0x10	; 16
    1054:	68 f3       	brcs	.-38     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    1056:	1c a6       	std	Y+44, r1	; 0x2c
    1058:	01 c0       	rjmp	.+2      	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
    105a:	1d 8e       	std	Y+29, r1	; 0x1d
    105c:	0a 30       	cpi	r16, 0x0A	; 10
    105e:	08 f0       	brcs	.+2      	; 0x1062 <__EEPROM_REGION_LENGTH__+0x62>
    1060:	09 e0       	ldi	r16, 0x09	; 9
    1062:	0a 8f       	std	Y+26, r16	; 0x1a
    1064:	0d a7       	std	Y+45, r16	; 0x2d
    1066:	1e a6       	std	Y+46, r1	; 0x2e
    1068:	ce 01       	movw	r24, r28
    106a:	02 96       	adiw	r24, 0x02	; 2
    106c:	3f db       	rcall	.-2434   	; 0x6ec <vListInitialiseItem>
    106e:	ce 01       	movw	r24, r28
    1070:	0e 96       	adiw	r24, 0x0e	; 14
    1072:	3c db       	rcall	.-2440   	; 0x6ec <vListInitialiseItem>
    1074:	db 87       	std	Y+11, r29	; 0x0b
    1076:	ca 87       	std	Y+10, r28	; 0x0a
    1078:	8a e0       	ldi	r24, 0x0A	; 10
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	80 1b       	sub	r24, r16
    1082:	91 09       	sbc	r25, r1
    1084:	a1 09       	sbc	r26, r1
    1086:	b1 09       	sbc	r27, r1
    1088:	8e 87       	std	Y+14, r24	; 0x0e
    108a:	9f 87       	std	Y+15, r25	; 0x0f
    108c:	a8 8b       	std	Y+16, r26	; 0x10
    108e:	b9 8b       	std	Y+17, r27	; 0x11
    1090:	df 8b       	std	Y+23, r29	; 0x17
    1092:	ce 8b       	std	Y+22, r28	; 0x16
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	fe 01       	movw	r30, r28
    1098:	bf 96       	adiw	r30, 0x2f	; 47
    109a:	df 01       	movw	r26, r30
    109c:	1d 92       	st	X+, r1
    109e:	8a 95       	dec	r24
    10a0:	e9 f7       	brne	.-6      	; 0x109c <__EEPROM_REGION_LENGTH__+0x9c>
    10a2:	1b aa       	std	Y+51, r1	; 0x33
    10a4:	a3 01       	movw	r20, r6
    10a6:	b2 01       	movw	r22, r4
    10a8:	c4 01       	movw	r24, r8
    10aa:	94 db       	rcall	.-2264   	; 0x7d4 <pxPortInitialiseStack>
    10ac:	99 83       	std	Y+1, r25	; 0x01
    10ae:	88 83       	st	Y, r24
    10b0:	e1 14       	cp	r14, r1
    10b2:	f1 04       	cpc	r15, r1
    10b4:	19 f0       	breq	.+6      	; 0x10bc <__EEPROM_REGION_LENGTH__+0xbc>
    10b6:	f7 01       	movw	r30, r14
    10b8:	d1 83       	std	Z+1, r29	; 0x01
    10ba:	c0 83       	st	Z, r28
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	bf 90       	pop	r11
    10cc:	af 90       	pop	r10
    10ce:	9f 90       	pop	r9
    10d0:	8f 90       	pop	r8
    10d2:	7f 90       	pop	r7
    10d4:	6f 90       	pop	r6
    10d6:	5f 90       	pop	r5
    10d8:	4f 90       	pop	r4
    10da:	08 95       	ret

000010dc <prvInitialiseTaskLists>:
    10dc:	cf 93       	push	r28
    10de:	c0 e0       	ldi	r28, 0x00	; 0
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <prvInitialiseTaskLists+0x16>
    10e2:	2b e0       	ldi	r18, 0x0B	; 11
    10e4:	c2 9f       	mul	r28, r18
    10e6:	c0 01       	movw	r24, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	83 56       	subi	r24, 0x63	; 99
    10ec:	93 4f       	sbci	r25, 0xF3	; 243
    10ee:	ed da       	rcall	.-2598   	; 0x6ca <vListInitialise>
    10f0:	cf 5f       	subi	r28, 0xFF	; 255
    10f2:	ca 30       	cpi	r28, 0x0A	; 10
    10f4:	b0 f3       	brcs	.-20     	; 0x10e2 <prvInitialiseTaskLists+0x6>
    10f6:	82 e9       	ldi	r24, 0x92	; 146
    10f8:	9c e0       	ldi	r25, 0x0C	; 12
    10fa:	e7 da       	rcall	.-2610   	; 0x6ca <vListInitialise>
    10fc:	87 e8       	ldi	r24, 0x87	; 135
    10fe:	9c e0       	ldi	r25, 0x0C	; 12
    1100:	e4 da       	rcall	.-2616   	; 0x6ca <vListInitialise>
    1102:	88 e7       	ldi	r24, 0x78	; 120
    1104:	9c e0       	ldi	r25, 0x0C	; 12
    1106:	e1 da       	rcall	.-2622   	; 0x6ca <vListInitialise>
    1108:	8d e6       	ldi	r24, 0x6D	; 109
    110a:	9c e0       	ldi	r25, 0x0C	; 12
    110c:	de da       	rcall	.-2628   	; 0x6ca <vListInitialise>
    110e:	81 e6       	ldi	r24, 0x61	; 97
    1110:	9c e0       	ldi	r25, 0x0C	; 12
    1112:	db da       	rcall	.-2634   	; 0x6ca <vListInitialise>
    1114:	82 e9       	ldi	r24, 0x92	; 146
    1116:	9c e0       	ldi	r25, 0x0C	; 12
    1118:	90 93 86 0c 	sts	0x0C86, r25	; 0x800c86 <pxDelayedTaskList+0x1>
    111c:	80 93 85 0c 	sts	0x0C85, r24	; 0x800c85 <pxDelayedTaskList>
    1120:	87 e8       	ldi	r24, 0x87	; 135
    1122:	9c e0       	ldi	r25, 0x0C	; 12
    1124:	90 93 84 0c 	sts	0x0C84, r25	; 0x800c84 <pxOverflowDelayedTaskList+0x1>
    1128:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <pxOverflowDelayedTaskList>
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <prvAddNewTaskToReadyList>:
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	0f 92       	push	r0
    113c:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <uxCurrentNumberOfTasks>
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	80 93 60 0c 	sts	0x0C60, r24	; 0x800c60 <uxCurrentNumberOfTasks>
    1146:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    114a:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    114e:	89 2b       	or	r24, r25
    1150:	51 f4       	brne	.+20     	; 0x1166 <prvAddNewTaskToReadyList+0x36>
    1152:	d0 93 0c 0d 	sts	0x0D0C, r29	; 0x800d0c <pxCurrentTCB+0x1>
    1156:	c0 93 0b 0d 	sts	0x0D0B, r28	; 0x800d0b <pxCurrentTCB>
    115a:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <uxCurrentNumberOfTasks>
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 f4       	brne	.+36     	; 0x1186 <prvAddNewTaskToReadyList+0x56>
    1162:	bc df       	rcall	.-136    	; 0x10dc <prvInitialiseTaskLists>
    1164:	10 c0       	rjmp	.+32     	; 0x1186 <prvAddNewTaskToReadyList+0x56>
    1166:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <xSchedulerRunning>
    116a:	81 11       	cpse	r24, r1
    116c:	0c c0       	rjmp	.+24     	; 0x1186 <prvAddNewTaskToReadyList+0x56>
    116e:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1172:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1176:	92 8d       	ldd	r25, Z+26	; 0x1a
    1178:	8a 8d       	ldd	r24, Y+26	; 0x1a
    117a:	89 17       	cp	r24, r25
    117c:	20 f0       	brcs	.+8      	; 0x1186 <prvAddNewTaskToReadyList+0x56>
    117e:	d0 93 0c 0d 	sts	0x0D0C, r29	; 0x800d0c <pxCurrentTCB+0x1>
    1182:	c0 93 0b 0d 	sts	0x0D0B, r28	; 0x800d0b <pxCurrentTCB>
    1186:	80 91 53 0c 	lds	r24, 0x0C53	; 0x800c53 <uxTaskNumber>
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	80 93 53 0c 	sts	0x0C53, r24	; 0x800c53 <uxTaskNumber>
    1190:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1192:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <uxTopReadyPriority>
    1196:	8e 17       	cp	r24, r30
    1198:	10 f4       	brcc	.+4      	; 0x119e <prvAddNewTaskToReadyList+0x6e>
    119a:	e0 93 5b 0c 	sts	0x0C5B, r30	; 0x800c5b <uxTopReadyPriority>
    119e:	8b e0       	ldi	r24, 0x0B	; 11
    11a0:	8e 9f       	mul	r24, r30
    11a2:	f0 01       	movw	r30, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	e3 56       	subi	r30, 0x63	; 99
    11a8:	f3 4f       	sbci	r31, 0xF3	; 243
    11aa:	01 80       	ldd	r0, Z+1	; 0x01
    11ac:	f2 81       	ldd	r31, Z+2	; 0x02
    11ae:	e0 2d       	mov	r30, r0
    11b0:	ff 83       	std	Y+7, r31	; 0x07
    11b2:	ee 83       	std	Y+6, r30	; 0x06
    11b4:	26 81       	ldd	r18, Z+6	; 0x06
    11b6:	37 81       	ldd	r19, Z+7	; 0x07
    11b8:	39 87       	std	Y+9, r19	; 0x09
    11ba:	28 87       	std	Y+8, r18	; 0x08
    11bc:	a6 81       	ldd	r26, Z+6	; 0x06
    11be:	b7 81       	ldd	r27, Z+7	; 0x07
    11c0:	9e 01       	movw	r18, r28
    11c2:	2e 5f       	subi	r18, 0xFE	; 254
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	15 96       	adiw	r26, 0x05	; 5
    11c8:	3c 93       	st	X, r19
    11ca:	2e 93       	st	-X, r18
    11cc:	14 97       	sbiw	r26, 0x04	; 4
    11ce:	37 83       	std	Z+7, r19	; 0x07
    11d0:	26 83       	std	Z+6, r18	; 0x06
    11d2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    11d4:	8e 9f       	mul	r24, r30
    11d6:	f0 01       	movw	r30, r0
    11d8:	11 24       	eor	r1, r1
    11da:	e3 56       	subi	r30, 0x63	; 99
    11dc:	f3 4f       	sbci	r31, 0xF3	; 243
    11de:	fd 87       	std	Y+13, r31	; 0x0d
    11e0:	ec 87       	std	Y+12, r30	; 0x0c
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 5f       	subi	r24, 0xFF	; 255
    11e6:	80 83       	st	Z, r24
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <xSchedulerRunning>
    11f0:	88 23       	and	r24, r24
    11f2:	49 f0       	breq	.+18     	; 0x1206 <prvAddNewTaskToReadyList+0xd6>
    11f4:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    11f8:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    11fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    11fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1200:	98 17       	cp	r25, r24
    1202:	08 f4       	brcc	.+2      	; 0x1206 <prvAddNewTaskToReadyList+0xd6>
    1204:	30 db       	rcall	.-2464   	; 0x866 <vPortYield>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <prvCheckTasksWaitingTermination>:
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	1a c0       	rjmp	.+52     	; 0x1246 <prvCheckTasksWaitingTermination+0x3a>
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	0f 92       	push	r0
    1218:	e0 91 74 0c 	lds	r30, 0x0C74	; 0x800c74 <xTasksWaitingTermination+0x7>
    121c:	f0 91 75 0c 	lds	r31, 0x0C75	; 0x800c75 <xTasksWaitingTermination+0x8>
    1220:	c0 85       	ldd	r28, Z+8	; 0x08
    1222:	d1 85       	ldd	r29, Z+9	; 0x09
    1224:	ce 01       	movw	r24, r28
    1226:	02 96       	adiw	r24, 0x02	; 2
    1228:	a2 da       	rcall	.-2748   	; 0x76e <uxListRemove>
    122a:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <uxCurrentNumberOfTasks>
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	80 93 60 0c 	sts	0x0C60, r24	; 0x800c60 <uxCurrentNumberOfTasks>
    1234:	80 91 6c 0c 	lds	r24, 0x0C6C	; 0x800c6c <uxDeletedTasksWaitingCleanUp>
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	80 93 6c 0c 	sts	0x0C6C, r24	; 0x800c6c <uxDeletedTasksWaitingCleanUp>
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ce 01       	movw	r24, r28
    1244:	c5 de       	rcall	.-630    	; 0xfd0 <prvDeleteTCB>
    1246:	80 91 6c 0c 	lds	r24, 0x0C6C	; 0x800c6c <uxDeletedTasksWaitingCleanUp>
    124a:	81 11       	cpse	r24, r1
    124c:	e2 cf       	rjmp	.-60     	; 0x1212 <prvCheckTasksWaitingTermination+0x6>
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <prvAddCurrentTaskToDelayedList>:
    1254:	8f 92       	push	r8
    1256:	9f 92       	push	r9
    1258:	af 92       	push	r10
    125a:	bf 92       	push	r11
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	6b 01       	movw	r12, r22
    126a:	7c 01       	movw	r14, r24
    126c:	c4 2f       	mov	r28, r20
    126e:	80 90 5c 0c 	lds	r8, 0x0C5C	; 0x800c5c <xTickCount>
    1272:	90 90 5d 0c 	lds	r9, 0x0C5D	; 0x800c5d <xTickCount+0x1>
    1276:	a0 90 5e 0c 	lds	r10, 0x0C5E	; 0x800c5e <xTickCount+0x2>
    127a:	b0 90 5f 0c 	lds	r11, 0x0C5F	; 0x800c5f <xTickCount+0x3>
    127e:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1282:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1286:	02 96       	adiw	r24, 0x02	; 2
    1288:	72 da       	rcall	.-2844   	; 0x76e <uxListRemove>
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	c8 16       	cp	r12, r24
    128e:	d8 06       	cpc	r13, r24
    1290:	e8 06       	cpc	r14, r24
    1292:	f8 06       	cpc	r15, r24
    1294:	b1 f5       	brne	.+108    	; 0x1302 <prvAddCurrentTaskToDelayedList+0xae>
    1296:	cc 23       	and	r28, r28
    1298:	a1 f1       	breq	.+104    	; 0x1302 <prvAddCurrentTaskToDelayedList+0xae>
    129a:	e1 e6       	ldi	r30, 0x61	; 97
    129c:	fc e0       	ldi	r31, 0x0C	; 12
    129e:	a1 81       	ldd	r26, Z+1	; 0x01
    12a0:	b2 81       	ldd	r27, Z+2	; 0x02
    12a2:	c0 91 0b 0d 	lds	r28, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    12a6:	d0 91 0c 0d 	lds	r29, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    12aa:	bf 83       	std	Y+7, r27	; 0x07
    12ac:	ae 83       	std	Y+6, r26	; 0x06
    12ae:	c0 91 0b 0d 	lds	r28, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    12b2:	d0 91 0c 0d 	lds	r29, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    12b6:	16 96       	adiw	r26, 0x06	; 6
    12b8:	8d 91       	ld	r24, X+
    12ba:	9c 91       	ld	r25, X
    12bc:	17 97       	sbiw	r26, 0x07	; 7
    12be:	99 87       	std	Y+9, r25	; 0x09
    12c0:	88 87       	std	Y+8, r24	; 0x08
    12c2:	16 96       	adiw	r26, 0x06	; 6
    12c4:	cd 91       	ld	r28, X+
    12c6:	dc 91       	ld	r29, X
    12c8:	17 97       	sbiw	r26, 0x07	; 7
    12ca:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    12ce:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    12d2:	02 96       	adiw	r24, 0x02	; 2
    12d4:	9d 83       	std	Y+5, r25	; 0x05
    12d6:	8c 83       	std	Y+4, r24	; 0x04
    12d8:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    12dc:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	17 96       	adiw	r26, 0x07	; 7
    12e4:	9c 93       	st	X, r25
    12e6:	8e 93       	st	-X, r24
    12e8:	16 97       	sbiw	r26, 0x06	; 6
    12ea:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    12ee:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    12f2:	1d 96       	adiw	r26, 0x0d	; 13
    12f4:	fc 93       	st	X, r31
    12f6:	ee 93       	st	-X, r30
    12f8:	1c 97       	sbiw	r26, 0x0c	; 12
    12fa:	80 81       	ld	r24, Z
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	80 83       	st	Z, r24
    1300:	3d c0       	rjmp	.+122    	; 0x137c <prvAddCurrentTaskToDelayedList+0x128>
    1302:	c8 0c       	add	r12, r8
    1304:	d9 1c       	adc	r13, r9
    1306:	ea 1c       	adc	r14, r10
    1308:	fb 1c       	adc	r15, r11
    130a:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    130e:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1312:	c2 82       	std	Z+2, r12	; 0x02
    1314:	d3 82       	std	Z+3, r13	; 0x03
    1316:	e4 82       	std	Z+4, r14	; 0x04
    1318:	f5 82       	std	Z+5, r15	; 0x05
    131a:	c8 14       	cp	r12, r8
    131c:	d9 04       	cpc	r13, r9
    131e:	ea 04       	cpc	r14, r10
    1320:	fb 04       	cpc	r15, r11
    1322:	60 f4       	brcc	.+24     	; 0x133c <prvAddCurrentTaskToDelayedList+0xe8>
    1324:	60 91 0b 0d 	lds	r22, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1328:	70 91 0c 0d 	lds	r23, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    132c:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <pxOverflowDelayedTaskList>
    1330:	90 91 84 0c 	lds	r25, 0x0C84	; 0x800c84 <pxOverflowDelayedTaskList+0x1>
    1334:	6e 5f       	subi	r22, 0xFE	; 254
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	dd d9       	rcall	.-3142   	; 0x6f4 <vListInsert>
    133a:	20 c0       	rjmp	.+64     	; 0x137c <prvAddCurrentTaskToDelayedList+0x128>
    133c:	60 91 0b 0d 	lds	r22, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1340:	70 91 0c 0d 	lds	r23, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1344:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <pxDelayedTaskList>
    1348:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <pxDelayedTaskList+0x1>
    134c:	6e 5f       	subi	r22, 0xFE	; 254
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	d1 d9       	rcall	.-3166   	; 0x6f4 <vListInsert>
    1352:	80 91 4f 0c 	lds	r24, 0x0C4F	; 0x800c4f <xNextTaskUnblockTime>
    1356:	90 91 50 0c 	lds	r25, 0x0C50	; 0x800c50 <xNextTaskUnblockTime+0x1>
    135a:	a0 91 51 0c 	lds	r26, 0x0C51	; 0x800c51 <xNextTaskUnblockTime+0x2>
    135e:	b0 91 52 0c 	lds	r27, 0x0C52	; 0x800c52 <xNextTaskUnblockTime+0x3>
    1362:	c8 16       	cp	r12, r24
    1364:	d9 06       	cpc	r13, r25
    1366:	ea 06       	cpc	r14, r26
    1368:	fb 06       	cpc	r15, r27
    136a:	40 f4       	brcc	.+16     	; 0x137c <prvAddCurrentTaskToDelayedList+0x128>
    136c:	c0 92 4f 0c 	sts	0x0C4F, r12	; 0x800c4f <xNextTaskUnblockTime>
    1370:	d0 92 50 0c 	sts	0x0C50, r13	; 0x800c50 <xNextTaskUnblockTime+0x1>
    1374:	e0 92 51 0c 	sts	0x0C51, r14	; 0x800c51 <xNextTaskUnblockTime+0x2>
    1378:	f0 92 52 0c 	sts	0x0C52, r15	; 0x800c52 <xNextTaskUnblockTime+0x3>
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	9f 90       	pop	r9
    138e:	8f 90       	pop	r8
    1390:	08 95       	ret

00001392 <xTaskCreate>:
    1392:	2f 92       	push	r2
    1394:	3f 92       	push	r3
    1396:	4f 92       	push	r4
    1398:	5f 92       	push	r5
    139a:	6f 92       	push	r6
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	3c 01       	movw	r6, r24
    13b6:	1b 01       	movw	r2, r22
    13b8:	4a 01       	movw	r8, r20
    13ba:	29 01       	movw	r4, r18
    13bc:	ca 01       	movw	r24, r20
    13be:	a1 d8       	rcall	.-3774   	; 0x502 <pvPortMalloc>
    13c0:	6c 01       	movw	r12, r24
    13c2:	89 2b       	or	r24, r25
    13c4:	61 f0       	breq	.+24     	; 0x13de <xTaskCreate+0x4c>
    13c6:	84 e3       	ldi	r24, 0x34	; 52
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9b d8       	rcall	.-3786   	; 0x502 <pvPortMalloc>
    13cc:	ec 01       	movw	r28, r24
    13ce:	89 2b       	or	r24, r25
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <xTaskCreate+0x46>
    13d2:	dc 8e       	std	Y+28, r13	; 0x1c
    13d4:	cb 8e       	std	Y+27, r12	; 0x1b
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <xTaskCreate+0x50>
    13d8:	c6 01       	movw	r24, r12
    13da:	3b d9       	rcall	.-3466   	; 0x652 <vPortFree>
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <xTaskCreate+0x50>
    13de:	c0 e0       	ldi	r28, 0x00	; 0
    13e0:	d0 e0       	ldi	r29, 0x00	; 0
    13e2:	20 97       	sbiw	r28, 0x00	; 0
    13e4:	61 f0       	breq	.+24     	; 0x13fe <xTaskCreate+0x6c>
    13e6:	a1 2c       	mov	r10, r1
    13e8:	b1 2c       	mov	r11, r1
    13ea:	6e 01       	movw	r12, r28
    13ec:	92 01       	movw	r18, r4
    13ee:	a4 01       	movw	r20, r8
    13f0:	b1 01       	movw	r22, r2
    13f2:	c3 01       	movw	r24, r6
    13f4:	f8 dd       	rcall	.-1040   	; 0xfe6 <prvInitialiseNewTask>
    13f6:	ce 01       	movw	r24, r28
    13f8:	9b de       	rcall	.-714    	; 0x1130 <prvAddNewTaskToReadyList>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <xTaskCreate+0x6e>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	9f 90       	pop	r9
    1414:	8f 90       	pop	r8
    1416:	7f 90       	pop	r7
    1418:	6f 90       	pop	r6
    141a:	5f 90       	pop	r5
    141c:	4f 90       	pop	r4
    141e:	3f 90       	pop	r3
    1420:	2f 90       	pop	r2
    1422:	08 95       	ret

00001424 <vTaskStartScheduler>:
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	0f 2e       	mov	r0, r31
    142c:	fd e4       	ldi	r31, 0x4D	; 77
    142e:	ef 2e       	mov	r14, r31
    1430:	fc e0       	ldi	r31, 0x0C	; 12
    1432:	ff 2e       	mov	r15, r31
    1434:	f0 2d       	mov	r31, r0
    1436:	00 e0       	ldi	r16, 0x00	; 0
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 ec       	ldi	r20, 0xC0	; 192
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	6a e6       	ldi	r22, 0x6A	; 106
    1442:	72 e0       	ldi	r23, 0x02	; 2
    1444:	8e e4       	ldi	r24, 0x4E	; 78
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	a4 df       	rcall	.-184    	; 0x1392 <xTaskCreate>
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	09 f4       	brne	.+2      	; 0x1450 <vTaskStartScheduler+0x2c>
    144e:	96 d5       	rcall	.+2860   	; 0x1f7c <xTimerCreateTimerTask>
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	c1 f4       	brne	.+48     	; 0x1484 <vTaskStartScheduler+0x60>
    1454:	f8 94       	cli
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	9f ef       	ldi	r25, 0xFF	; 255
    145a:	dc 01       	movw	r26, r24
    145c:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xNextTaskUnblockTime>
    1460:	90 93 50 0c 	sts	0x0C50, r25	; 0x800c50 <xNextTaskUnblockTime+0x1>
    1464:	a0 93 51 0c 	sts	0x0C51, r26	; 0x800c51 <xNextTaskUnblockTime+0x2>
    1468:	b0 93 52 0c 	sts	0x0C52, r27	; 0x800c52 <xNextTaskUnblockTime+0x3>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 5a 0c 	sts	0x0C5A, r24	; 0x800c5a <xSchedulerRunning>
    1472:	10 92 5c 0c 	sts	0x0C5C, r1	; 0x800c5c <xTickCount>
    1476:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <xTickCount+0x1>
    147a:	10 92 5e 0c 	sts	0x0C5E, r1	; 0x800c5e <xTickCount+0x2>
    147e:	10 92 5f 0c 	sts	0x0C5F, r1	; 0x800c5f <xTickCount+0x3>
    1482:	bf d9       	rcall	.-3202   	; 0x802 <xPortStartScheduler>
    1484:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	08 95       	ret

00001490 <vTaskSuspendAll>:
    1490:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxSchedulerSuspended>
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <uxSchedulerSuspended>
    149a:	08 95       	ret

0000149c <xTaskGetTickCount>:
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	0f 92       	push	r0
    14a2:	60 91 5c 0c 	lds	r22, 0x0C5C	; 0x800c5c <xTickCount>
    14a6:	70 91 5d 0c 	lds	r23, 0x0C5D	; 0x800c5d <xTickCount+0x1>
    14aa:	80 91 5e 0c 	lds	r24, 0x0C5E	; 0x800c5e <xTickCount+0x2>
    14ae:	90 91 5f 0c 	lds	r25, 0x0C5F	; 0x800c5f <xTickCount+0x3>
    14b2:	0f 90       	pop	r0
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	08 95       	ret

000014b8 <xTaskIncrementTick>:
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxSchedulerSuspended>
    14c8:	81 11       	cpse	r24, r1
    14ca:	05 c1       	rjmp	.+522    	; 0x16d6 <xTaskIncrementTick+0x21e>
    14cc:	c0 90 5c 0c 	lds	r12, 0x0C5C	; 0x800c5c <xTickCount>
    14d0:	d0 90 5d 0c 	lds	r13, 0x0C5D	; 0x800c5d <xTickCount+0x1>
    14d4:	e0 90 5e 0c 	lds	r14, 0x0C5E	; 0x800c5e <xTickCount+0x2>
    14d8:	f0 90 5f 0c 	lds	r15, 0x0C5F	; 0x800c5f <xTickCount+0x3>
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	c8 1a       	sub	r12, r24
    14e0:	d8 0a       	sbc	r13, r24
    14e2:	e8 0a       	sbc	r14, r24
    14e4:	f8 0a       	sbc	r15, r24
    14e6:	c0 92 5c 0c 	sts	0x0C5C, r12	; 0x800c5c <xTickCount>
    14ea:	d0 92 5d 0c 	sts	0x0C5D, r13	; 0x800c5d <xTickCount+0x1>
    14ee:	e0 92 5e 0c 	sts	0x0C5E, r14	; 0x800c5e <xTickCount+0x2>
    14f2:	f0 92 5f 0c 	sts	0x0C5F, r15	; 0x800c5f <xTickCount+0x3>
    14f6:	c1 14       	cp	r12, r1
    14f8:	d1 04       	cpc	r13, r1
    14fa:	e1 04       	cpc	r14, r1
    14fc:	f1 04       	cpc	r15, r1
    14fe:	b1 f4       	brne	.+44     	; 0x152c <xTaskIncrementTick+0x74>
    1500:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <pxDelayedTaskList>
    1504:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <pxDelayedTaskList+0x1>
    1508:	20 91 83 0c 	lds	r18, 0x0C83	; 0x800c83 <pxOverflowDelayedTaskList>
    150c:	30 91 84 0c 	lds	r19, 0x0C84	; 0x800c84 <pxOverflowDelayedTaskList+0x1>
    1510:	30 93 86 0c 	sts	0x0C86, r19	; 0x800c86 <pxDelayedTaskList+0x1>
    1514:	20 93 85 0c 	sts	0x0C85, r18	; 0x800c85 <pxDelayedTaskList>
    1518:	90 93 84 0c 	sts	0x0C84, r25	; 0x800c84 <pxOverflowDelayedTaskList+0x1>
    151c:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <pxOverflowDelayedTaskList>
    1520:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <xNumOfOverflows>
    1524:	8f 5f       	subi	r24, 0xFF	; 255
    1526:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <xNumOfOverflows>
    152a:	2b dd       	rcall	.-1450   	; 0xf82 <prvResetNextTaskUnblockTime>
    152c:	80 91 4f 0c 	lds	r24, 0x0C4F	; 0x800c4f <xNextTaskUnblockTime>
    1530:	90 91 50 0c 	lds	r25, 0x0C50	; 0x800c50 <xNextTaskUnblockTime+0x1>
    1534:	a0 91 51 0c 	lds	r26, 0x0C51	; 0x800c51 <xNextTaskUnblockTime+0x2>
    1538:	b0 91 52 0c 	lds	r27, 0x0C52	; 0x800c52 <xNextTaskUnblockTime+0x3>
    153c:	c8 16       	cp	r12, r24
    153e:	d9 06       	cpc	r13, r25
    1540:	ea 06       	cpc	r14, r26
    1542:	fb 06       	cpc	r15, r27
    1544:	20 f4       	brcc	.+8      	; 0x154e <xTaskIncrementTick+0x96>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	b2 c0       	rjmp	.+356    	; 0x16ae <xTaskIncrementTick+0x1f6>
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <xTaskIncrementTick+0x98>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	e0 91 85 0c 	lds	r30, 0x0C85	; 0x800c85 <pxDelayedTaskList>
    1554:	f0 91 86 0c 	lds	r31, 0x0C86	; 0x800c86 <pxDelayedTaskList+0x1>
    1558:	90 81       	ld	r25, Z
    155a:	91 11       	cpse	r25, r1
    155c:	0c c0       	rjmp	.+24     	; 0x1576 <xTaskIncrementTick+0xbe>
    155e:	4f ef       	ldi	r20, 0xFF	; 255
    1560:	5f ef       	ldi	r21, 0xFF	; 255
    1562:	ba 01       	movw	r22, r20
    1564:	40 93 4f 0c 	sts	0x0C4F, r20	; 0x800c4f <xNextTaskUnblockTime>
    1568:	50 93 50 0c 	sts	0x0C50, r21	; 0x800c50 <xNextTaskUnblockTime+0x1>
    156c:	60 93 51 0c 	sts	0x0C51, r22	; 0x800c51 <xNextTaskUnblockTime+0x2>
    1570:	70 93 52 0c 	sts	0x0C52, r23	; 0x800c52 <xNextTaskUnblockTime+0x3>
    1574:	9c c0       	rjmp	.+312    	; 0x16ae <xTaskIncrementTick+0x1f6>
    1576:	e0 91 85 0c 	lds	r30, 0x0C85	; 0x800c85 <pxDelayedTaskList>
    157a:	f0 91 86 0c 	lds	r31, 0x0C86	; 0x800c86 <pxDelayedTaskList+0x1>
    157e:	07 80       	ldd	r0, Z+7	; 0x07
    1580:	f0 85       	ldd	r31, Z+8	; 0x08
    1582:	e0 2d       	mov	r30, r0
    1584:	00 84       	ldd	r0, Z+8	; 0x08
    1586:	f1 85       	ldd	r31, Z+9	; 0x09
    1588:	e0 2d       	mov	r30, r0
    158a:	42 81       	ldd	r20, Z+2	; 0x02
    158c:	53 81       	ldd	r21, Z+3	; 0x03
    158e:	64 81       	ldd	r22, Z+4	; 0x04
    1590:	75 81       	ldd	r23, Z+5	; 0x05
    1592:	c4 16       	cp	r12, r20
    1594:	d5 06       	cpc	r13, r21
    1596:	e6 06       	cpc	r14, r22
    1598:	f7 06       	cpc	r15, r23
    159a:	48 f4       	brcc	.+18     	; 0x15ae <xTaskIncrementTick+0xf6>
    159c:	40 93 4f 0c 	sts	0x0C4F, r20	; 0x800c4f <xNextTaskUnblockTime>
    15a0:	50 93 50 0c 	sts	0x0C50, r21	; 0x800c50 <xNextTaskUnblockTime+0x1>
    15a4:	60 93 51 0c 	sts	0x0C51, r22	; 0x800c51 <xNextTaskUnblockTime+0x2>
    15a8:	70 93 52 0c 	sts	0x0C52, r23	; 0x800c52 <xNextTaskUnblockTime+0x3>
    15ac:	80 c0       	rjmp	.+256    	; 0x16ae <xTaskIncrementTick+0x1f6>
    15ae:	a4 85       	ldd	r26, Z+12	; 0x0c
    15b0:	b5 85       	ldd	r27, Z+13	; 0x0d
    15b2:	c6 81       	ldd	r28, Z+6	; 0x06
    15b4:	d7 81       	ldd	r29, Z+7	; 0x07
    15b6:	20 85       	ldd	r18, Z+8	; 0x08
    15b8:	31 85       	ldd	r19, Z+9	; 0x09
    15ba:	3f 83       	std	Y+7, r19	; 0x07
    15bc:	2e 83       	std	Y+6, r18	; 0x06
    15be:	c0 85       	ldd	r28, Z+8	; 0x08
    15c0:	d1 85       	ldd	r29, Z+9	; 0x09
    15c2:	26 81       	ldd	r18, Z+6	; 0x06
    15c4:	37 81       	ldd	r19, Z+7	; 0x07
    15c6:	3d 83       	std	Y+5, r19	; 0x05
    15c8:	2c 83       	std	Y+4, r18	; 0x04
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	4d 91       	ld	r20, X+
    15ce:	5c 91       	ld	r21, X
    15d0:	12 97       	sbiw	r26, 0x02	; 2
    15d2:	9f 01       	movw	r18, r30
    15d4:	2e 5f       	subi	r18, 0xFE	; 254
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	42 17       	cp	r20, r18
    15da:	53 07       	cpc	r21, r19
    15dc:	31 f4       	brne	.+12     	; 0x15ea <xTaskIncrementTick+0x132>
    15de:	40 85       	ldd	r20, Z+8	; 0x08
    15e0:	51 85       	ldd	r21, Z+9	; 0x09
    15e2:	12 96       	adiw	r26, 0x02	; 2
    15e4:	5c 93       	st	X, r21
    15e6:	4e 93       	st	-X, r20
    15e8:	11 97       	sbiw	r26, 0x01	; 1
    15ea:	15 86       	std	Z+13, r1	; 0x0d
    15ec:	14 86       	std	Z+12, r1	; 0x0c
    15ee:	9c 91       	ld	r25, X
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	9c 93       	st	X, r25
    15f4:	a0 8d       	ldd	r26, Z+24	; 0x18
    15f6:	b1 8d       	ldd	r27, Z+25	; 0x19
    15f8:	10 97       	sbiw	r26, 0x00	; 0
    15fa:	09 f1       	breq	.+66     	; 0x163e <xTaskIncrementTick+0x186>
    15fc:	c2 89       	ldd	r28, Z+18	; 0x12
    15fe:	d3 89       	ldd	r29, Z+19	; 0x13
    1600:	44 89       	ldd	r20, Z+20	; 0x14
    1602:	55 89       	ldd	r21, Z+21	; 0x15
    1604:	5f 83       	std	Y+7, r21	; 0x07
    1606:	4e 83       	std	Y+6, r20	; 0x06
    1608:	c4 89       	ldd	r28, Z+20	; 0x14
    160a:	d5 89       	ldd	r29, Z+21	; 0x15
    160c:	42 89       	ldd	r20, Z+18	; 0x12
    160e:	53 89       	ldd	r21, Z+19	; 0x13
    1610:	5d 83       	std	Y+5, r21	; 0x05
    1612:	4c 83       	std	Y+4, r20	; 0x04
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	6d 91       	ld	r22, X+
    1618:	7c 91       	ld	r23, X
    161a:	12 97       	sbiw	r26, 0x02	; 2
    161c:	af 01       	movw	r20, r30
    161e:	42 5f       	subi	r20, 0xF2	; 242
    1620:	5f 4f       	sbci	r21, 0xFF	; 255
    1622:	64 17       	cp	r22, r20
    1624:	75 07       	cpc	r23, r21
    1626:	31 f4       	brne	.+12     	; 0x1634 <xTaskIncrementTick+0x17c>
    1628:	44 89       	ldd	r20, Z+20	; 0x14
    162a:	55 89       	ldd	r21, Z+21	; 0x15
    162c:	12 96       	adiw	r26, 0x02	; 2
    162e:	5c 93       	st	X, r21
    1630:	4e 93       	st	-X, r20
    1632:	11 97       	sbiw	r26, 0x01	; 1
    1634:	11 8e       	std	Z+25, r1	; 0x19
    1636:	10 8e       	std	Z+24, r1	; 0x18
    1638:	9c 91       	ld	r25, X
    163a:	91 50       	subi	r25, 0x01	; 1
    163c:	9c 93       	st	X, r25
    163e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1640:	90 91 5b 0c 	lds	r25, 0x0C5B	; 0x800c5b <uxTopReadyPriority>
    1644:	9a 17       	cp	r25, r26
    1646:	10 f4       	brcc	.+4      	; 0x164c <xTaskIncrementTick+0x194>
    1648:	a0 93 5b 0c 	sts	0x0C5B, r26	; 0x800c5b <uxTopReadyPriority>
    164c:	9b e0       	ldi	r25, 0x0B	; 11
    164e:	9a 9f       	mul	r25, r26
    1650:	d0 01       	movw	r26, r0
    1652:	11 24       	eor	r1, r1
    1654:	a3 56       	subi	r26, 0x63	; 99
    1656:	b3 4f       	sbci	r27, 0xF3	; 243
    1658:	11 96       	adiw	r26, 0x01	; 1
    165a:	0d 90       	ld	r0, X+
    165c:	bc 91       	ld	r27, X
    165e:	a0 2d       	mov	r26, r0
    1660:	b7 83       	std	Z+7, r27	; 0x07
    1662:	a6 83       	std	Z+6, r26	; 0x06
    1664:	16 96       	adiw	r26, 0x06	; 6
    1666:	4d 91       	ld	r20, X+
    1668:	5c 91       	ld	r21, X
    166a:	17 97       	sbiw	r26, 0x07	; 7
    166c:	51 87       	std	Z+9, r21	; 0x09
    166e:	40 87       	std	Z+8, r20	; 0x08
    1670:	16 96       	adiw	r26, 0x06	; 6
    1672:	cd 91       	ld	r28, X+
    1674:	dc 91       	ld	r29, X
    1676:	17 97       	sbiw	r26, 0x07	; 7
    1678:	3d 83       	std	Y+5, r19	; 0x05
    167a:	2c 83       	std	Y+4, r18	; 0x04
    167c:	17 96       	adiw	r26, 0x07	; 7
    167e:	3c 93       	st	X, r19
    1680:	2e 93       	st	-X, r18
    1682:	16 97       	sbiw	r26, 0x06	; 6
    1684:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1686:	9a 9f       	mul	r25, r26
    1688:	d0 01       	movw	r26, r0
    168a:	11 24       	eor	r1, r1
    168c:	a3 56       	subi	r26, 0x63	; 99
    168e:	b3 4f       	sbci	r27, 0xF3	; 243
    1690:	b5 87       	std	Z+13, r27	; 0x0d
    1692:	a4 87       	std	Z+12, r26	; 0x0c
    1694:	9c 91       	ld	r25, X
    1696:	9f 5f       	subi	r25, 0xFF	; 255
    1698:	9c 93       	st	X, r25
    169a:	22 8d       	ldd	r18, Z+26	; 0x1a
    169c:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    16a0:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    16a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    16a6:	29 17       	cp	r18, r25
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <xTaskIncrementTick+0x1f4>
    16aa:	4f cf       	rjmp	.-354    	; 0x154a <xTaskIncrementTick+0x92>
    16ac:	51 cf       	rjmp	.-350    	; 0x1550 <xTaskIncrementTick+0x98>
    16ae:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    16b2:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    16b6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    16b8:	9b e0       	ldi	r25, 0x0B	; 11
    16ba:	e9 9f       	mul	r30, r25
    16bc:	f0 01       	movw	r30, r0
    16be:	11 24       	eor	r1, r1
    16c0:	e3 56       	subi	r30, 0x63	; 99
    16c2:	f3 4f       	sbci	r31, 0xF3	; 243
    16c4:	90 81       	ld	r25, Z
    16c6:	92 30       	cpi	r25, 0x02	; 2
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <xTaskIncrementTick+0x214>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 91 55 0c 	lds	r25, 0x0C55	; 0x800c55 <xYieldPending>
    16d0:	91 11       	cpse	r25, r1
    16d2:	16 c0       	rjmp	.+44     	; 0x1700 <xTaskIncrementTick+0x248>
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <xTaskIncrementTick+0x24a>
    16d6:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <xPendedTicks>
    16da:	90 91 57 0c 	lds	r25, 0x0C57	; 0x800c57 <xPendedTicks+0x1>
    16de:	a0 91 58 0c 	lds	r26, 0x0C58	; 0x800c58 <xPendedTicks+0x2>
    16e2:	b0 91 59 0c 	lds	r27, 0x0C59	; 0x800c59 <xPendedTicks+0x3>
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	a1 1d       	adc	r26, r1
    16ea:	b1 1d       	adc	r27, r1
    16ec:	80 93 56 0c 	sts	0x0C56, r24	; 0x800c56 <xPendedTicks>
    16f0:	90 93 57 0c 	sts	0x0C57, r25	; 0x800c57 <xPendedTicks+0x1>
    16f4:	a0 93 58 0c 	sts	0x0C58, r26	; 0x800c58 <xPendedTicks+0x2>
    16f8:	b0 93 59 0c 	sts	0x0C59, r27	; 0x800c59 <xPendedTicks+0x3>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <xTaskIncrementTick+0x24a>
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	08 95       	ret

00001710 <xTaskResumeAll>:
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	0f 92       	push	r0
    1722:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxSchedulerSuspended>
    1726:	81 50       	subi	r24, 0x01	; 1
    1728:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <uxSchedulerSuspended>
    172c:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxSchedulerSuspended>
    1730:	81 11       	cpse	r24, r1
    1732:	be c0       	rjmp	.+380    	; 0x18b0 <xTaskResumeAll+0x1a0>
    1734:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <uxCurrentNumberOfTasks>
    1738:	81 11       	cpse	r24, r1
    173a:	88 c0       	rjmp	.+272    	; 0x184c <xTaskResumeAll+0x13c>
    173c:	bc c0       	rjmp	.+376    	; 0x18b6 <xTaskResumeAll+0x1a6>
    173e:	e0 91 7f 0c 	lds	r30, 0x0C7F	; 0x800c7f <xPendingReadyList+0x7>
    1742:	f0 91 80 0c 	lds	r31, 0x0C80	; 0x800c80 <xPendingReadyList+0x8>
    1746:	00 84       	ldd	r0, Z+8	; 0x08
    1748:	f1 85       	ldd	r31, Z+9	; 0x09
    174a:	e0 2d       	mov	r30, r0
    174c:	a0 8d       	ldd	r26, Z+24	; 0x18
    174e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1750:	c2 89       	ldd	r28, Z+18	; 0x12
    1752:	d3 89       	ldd	r29, Z+19	; 0x13
    1754:	84 89       	ldd	r24, Z+20	; 0x14
    1756:	95 89       	ldd	r25, Z+21	; 0x15
    1758:	9f 83       	std	Y+7, r25	; 0x07
    175a:	8e 83       	std	Y+6, r24	; 0x06
    175c:	c4 89       	ldd	r28, Z+20	; 0x14
    175e:	d5 89       	ldd	r29, Z+21	; 0x15
    1760:	82 89       	ldd	r24, Z+18	; 0x12
    1762:	93 89       	ldd	r25, Z+19	; 0x13
    1764:	9d 83       	std	Y+5, r25	; 0x05
    1766:	8c 83       	std	Y+4, r24	; 0x04
    1768:	11 96       	adiw	r26, 0x01	; 1
    176a:	2d 91       	ld	r18, X+
    176c:	3c 91       	ld	r19, X
    176e:	12 97       	sbiw	r26, 0x02	; 2
    1770:	cf 01       	movw	r24, r30
    1772:	0e 96       	adiw	r24, 0x0e	; 14
    1774:	28 17       	cp	r18, r24
    1776:	39 07       	cpc	r19, r25
    1778:	31 f4       	brne	.+12     	; 0x1786 <xTaskResumeAll+0x76>
    177a:	84 89       	ldd	r24, Z+20	; 0x14
    177c:	95 89       	ldd	r25, Z+21	; 0x15
    177e:	12 96       	adiw	r26, 0x02	; 2
    1780:	9c 93       	st	X, r25
    1782:	8e 93       	st	-X, r24
    1784:	11 97       	sbiw	r26, 0x01	; 1
    1786:	11 8e       	std	Z+25, r1	; 0x19
    1788:	10 8e       	std	Z+24, r1	; 0x18
    178a:	8c 91       	ld	r24, X
    178c:	81 50       	subi	r24, 0x01	; 1
    178e:	8c 93       	st	X, r24
    1790:	a4 85       	ldd	r26, Z+12	; 0x0c
    1792:	b5 85       	ldd	r27, Z+13	; 0x0d
    1794:	c6 81       	ldd	r28, Z+6	; 0x06
    1796:	d7 81       	ldd	r29, Z+7	; 0x07
    1798:	80 85       	ldd	r24, Z+8	; 0x08
    179a:	91 85       	ldd	r25, Z+9	; 0x09
    179c:	9f 83       	std	Y+7, r25	; 0x07
    179e:	8e 83       	std	Y+6, r24	; 0x06
    17a0:	c0 85       	ldd	r28, Z+8	; 0x08
    17a2:	d1 85       	ldd	r29, Z+9	; 0x09
    17a4:	86 81       	ldd	r24, Z+6	; 0x06
    17a6:	97 81       	ldd	r25, Z+7	; 0x07
    17a8:	9d 83       	std	Y+5, r25	; 0x05
    17aa:	8c 83       	std	Y+4, r24	; 0x04
    17ac:	11 96       	adiw	r26, 0x01	; 1
    17ae:	8d 91       	ld	r24, X+
    17b0:	9c 91       	ld	r25, X
    17b2:	12 97       	sbiw	r26, 0x02	; 2
    17b4:	9f 01       	movw	r18, r30
    17b6:	2e 5f       	subi	r18, 0xFE	; 254
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	82 17       	cp	r24, r18
    17bc:	93 07       	cpc	r25, r19
    17be:	31 f4       	brne	.+12     	; 0x17cc <xTaskResumeAll+0xbc>
    17c0:	80 85       	ldd	r24, Z+8	; 0x08
    17c2:	91 85       	ldd	r25, Z+9	; 0x09
    17c4:	12 96       	adiw	r26, 0x02	; 2
    17c6:	9c 93       	st	X, r25
    17c8:	8e 93       	st	-X, r24
    17ca:	11 97       	sbiw	r26, 0x01	; 1
    17cc:	15 86       	std	Z+13, r1	; 0x0d
    17ce:	14 86       	std	Z+12, r1	; 0x0c
    17d0:	8c 91       	ld	r24, X
    17d2:	81 50       	subi	r24, 0x01	; 1
    17d4:	8c 93       	st	X, r24
    17d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17d8:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <uxTopReadyPriority>
    17dc:	8a 17       	cp	r24, r26
    17de:	10 f4       	brcc	.+4      	; 0x17e4 <xTaskResumeAll+0xd4>
    17e0:	a0 93 5b 0c 	sts	0x0C5B, r26	; 0x800c5b <uxTopReadyPriority>
    17e4:	8b e0       	ldi	r24, 0x0B	; 11
    17e6:	8a 9f       	mul	r24, r26
    17e8:	d0 01       	movw	r26, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	a3 56       	subi	r26, 0x63	; 99
    17ee:	b3 4f       	sbci	r27, 0xF3	; 243
    17f0:	11 96       	adiw	r26, 0x01	; 1
    17f2:	0d 90       	ld	r0, X+
    17f4:	bc 91       	ld	r27, X
    17f6:	a0 2d       	mov	r26, r0
    17f8:	b7 83       	std	Z+7, r27	; 0x07
    17fa:	a6 83       	std	Z+6, r26	; 0x06
    17fc:	16 96       	adiw	r26, 0x06	; 6
    17fe:	4d 91       	ld	r20, X+
    1800:	5c 91       	ld	r21, X
    1802:	17 97       	sbiw	r26, 0x07	; 7
    1804:	51 87       	std	Z+9, r21	; 0x09
    1806:	40 87       	std	Z+8, r20	; 0x08
    1808:	16 96       	adiw	r26, 0x06	; 6
    180a:	cd 91       	ld	r28, X+
    180c:	dc 91       	ld	r29, X
    180e:	17 97       	sbiw	r26, 0x07	; 7
    1810:	3d 83       	std	Y+5, r19	; 0x05
    1812:	2c 83       	std	Y+4, r18	; 0x04
    1814:	17 96       	adiw	r26, 0x07	; 7
    1816:	3c 93       	st	X, r19
    1818:	2e 93       	st	-X, r18
    181a:	16 97       	sbiw	r26, 0x06	; 6
    181c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    181e:	8a 9f       	mul	r24, r26
    1820:	d0 01       	movw	r26, r0
    1822:	11 24       	eor	r1, r1
    1824:	a3 56       	subi	r26, 0x63	; 99
    1826:	b3 4f       	sbci	r27, 0xF3	; 243
    1828:	b5 87       	std	Z+13, r27	; 0x0d
    182a:	a4 87       	std	Z+12, r26	; 0x0c
    182c:	8c 91       	ld	r24, X
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	8c 93       	st	X, r24
    1832:	92 8d       	ldd	r25, Z+26	; 0x1a
    1834:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1838:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    183c:	5a 96       	adiw	r26, 0x1a	; 26
    183e:	8c 91       	ld	r24, X
    1840:	98 17       	cp	r25, r24
    1842:	30 f0       	brcs	.+12     	; 0x1850 <xTaskResumeAll+0x140>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xYieldPending>
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <xTaskResumeAll+0x140>
    184c:	e0 e0       	ldi	r30, 0x00	; 0
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <xPendingReadyList>
    1854:	81 11       	cpse	r24, r1
    1856:	73 cf       	rjmp	.-282    	; 0x173e <xTaskResumeAll+0x2e>
    1858:	ef 2b       	or	r30, r31
    185a:	09 f0       	breq	.+2      	; 0x185e <xTaskResumeAll+0x14e>
    185c:	92 db       	rcall	.-2268   	; 0xf82 <prvResetNextTaskUnblockTime>
    185e:	c0 90 56 0c 	lds	r12, 0x0C56	; 0x800c56 <xPendedTicks>
    1862:	d0 90 57 0c 	lds	r13, 0x0C57	; 0x800c57 <xPendedTicks+0x1>
    1866:	e0 90 58 0c 	lds	r14, 0x0C58	; 0x800c58 <xPendedTicks+0x2>
    186a:	f0 90 59 0c 	lds	r15, 0x0C59	; 0x800c59 <xPendedTicks+0x3>
    186e:	c1 14       	cp	r12, r1
    1870:	d1 04       	cpc	r13, r1
    1872:	e1 04       	cpc	r14, r1
    1874:	f1 04       	cpc	r15, r1
    1876:	a1 f0       	breq	.+40     	; 0x18a0 <xTaskResumeAll+0x190>
    1878:	1f de       	rcall	.-962    	; 0x14b8 <xTaskIncrementTick>
    187a:	88 23       	and	r24, r24
    187c:	19 f0       	breq	.+6      	; 0x1884 <xTaskResumeAll+0x174>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xYieldPending>
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	c8 1a       	sub	r12, r24
    1888:	d1 08       	sbc	r13, r1
    188a:	e1 08       	sbc	r14, r1
    188c:	f1 08       	sbc	r15, r1
    188e:	a1 f7       	brne	.-24     	; 0x1878 <xTaskResumeAll+0x168>
    1890:	10 92 56 0c 	sts	0x0C56, r1	; 0x800c56 <xPendedTicks>
    1894:	10 92 57 0c 	sts	0x0C57, r1	; 0x800c57 <xPendedTicks+0x1>
    1898:	10 92 58 0c 	sts	0x0C58, r1	; 0x800c58 <xPendedTicks+0x2>
    189c:	10 92 59 0c 	sts	0x0C59, r1	; 0x800c59 <xPendedTicks+0x3>
    18a0:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <xYieldPending>
    18a4:	88 23       	and	r24, r24
    18a6:	31 f0       	breq	.+12     	; 0x18b4 <xTaskResumeAll+0x1a4>
    18a8:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <xTaskResumeAll+0x1a6>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <xTaskResumeAll+0x1a6>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	08 95       	ret

000018c8 <xTaskDelayUntil>:
    18c8:	8f 92       	push	r8
    18ca:	9f 92       	push	r9
    18cc:	af 92       	push	r10
    18ce:	bf 92       	push	r11
    18d0:	cf 92       	push	r12
    18d2:	df 92       	push	r13
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	ec 01       	movw	r28, r24
    18e0:	6a 01       	movw	r12, r20
    18e2:	7b 01       	movw	r14, r22
    18e4:	d5 dd       	rcall	.-1110   	; 0x1490 <vTaskSuspendAll>
    18e6:	80 90 5c 0c 	lds	r8, 0x0C5C	; 0x800c5c <xTickCount>
    18ea:	90 90 5d 0c 	lds	r9, 0x0C5D	; 0x800c5d <xTickCount+0x1>
    18ee:	a0 90 5e 0c 	lds	r10, 0x0C5E	; 0x800c5e <xTickCount+0x2>
    18f2:	b0 90 5f 0c 	lds	r11, 0x0C5F	; 0x800c5f <xTickCount+0x3>
    18f6:	88 81       	ld	r24, Y
    18f8:	99 81       	ldd	r25, Y+1	; 0x01
    18fa:	aa 81       	ldd	r26, Y+2	; 0x02
    18fc:	bb 81       	ldd	r27, Y+3	; 0x03
    18fe:	ac 01       	movw	r20, r24
    1900:	bd 01       	movw	r22, r26
    1902:	4c 0d       	add	r20, r12
    1904:	5d 1d       	adc	r21, r13
    1906:	6e 1d       	adc	r22, r14
    1908:	7f 1d       	adc	r23, r15
    190a:	88 16       	cp	r8, r24
    190c:	99 06       	cpc	r9, r25
    190e:	aa 06       	cpc	r10, r26
    1910:	bb 06       	cpc	r11, r27
    1912:	60 f4       	brcc	.+24     	; 0x192c <xTaskDelayUntil+0x64>
    1914:	48 17       	cp	r20, r24
    1916:	59 07       	cpc	r21, r25
    1918:	6a 07       	cpc	r22, r26
    191a:	7b 07       	cpc	r23, r27
    191c:	98 f4       	brcc	.+38     	; 0x1944 <xTaskDelayUntil+0x7c>
    191e:	84 16       	cp	r8, r20
    1920:	95 06       	cpc	r9, r21
    1922:	a6 06       	cpc	r10, r22
    1924:	b7 06       	cpc	r11, r23
    1926:	80 f0       	brcs	.+32     	; 0x1948 <xTaskDelayUntil+0x80>
    1928:	10 e0       	ldi	r17, 0x00	; 0
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <xTaskDelayUntil+0x8a>
    192c:	48 17       	cp	r20, r24
    192e:	59 07       	cpc	r21, r25
    1930:	6a 07       	cpc	r22, r26
    1932:	7b 07       	cpc	r23, r27
    1934:	58 f0       	brcs	.+22     	; 0x194c <xTaskDelayUntil+0x84>
    1936:	84 16       	cp	r8, r20
    1938:	95 06       	cpc	r9, r21
    193a:	a6 06       	cpc	r10, r22
    193c:	b7 06       	cpc	r11, r23
    193e:	40 f0       	brcs	.+16     	; 0x1950 <xTaskDelayUntil+0x88>
    1940:	10 e0       	ldi	r17, 0x00	; 0
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <xTaskDelayUntil+0x8a>
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <xTaskDelayUntil+0x8a>
    1948:	11 e0       	ldi	r17, 0x01	; 1
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <xTaskDelayUntil+0x8a>
    194c:	11 e0       	ldi	r17, 0x01	; 1
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <xTaskDelayUntil+0x8a>
    1950:	11 e0       	ldi	r17, 0x01	; 1
    1952:	48 83       	st	Y, r20
    1954:	59 83       	std	Y+1, r21	; 0x01
    1956:	6a 83       	std	Y+2, r22	; 0x02
    1958:	7b 83       	std	Y+3, r23	; 0x03
    195a:	11 23       	and	r17, r17
    195c:	41 f0       	breq	.+16     	; 0x196e <xTaskDelayUntil+0xa6>
    195e:	cb 01       	movw	r24, r22
    1960:	ba 01       	movw	r22, r20
    1962:	68 19       	sub	r22, r8
    1964:	79 09       	sbc	r23, r9
    1966:	8a 09       	sbc	r24, r10
    1968:	9b 09       	sbc	r25, r11
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	73 dc       	rcall	.-1818   	; 0x1254 <prvAddCurrentTaskToDelayedList>
    196e:	d0 de       	rcall	.-608    	; 0x1710 <xTaskResumeAll>
    1970:	81 11       	cpse	r24, r1
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <xTaskDelayUntil+0xb0>
    1974:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    1978:	81 2f       	mov	r24, r17
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	df 90       	pop	r13
    1986:	cf 90       	pop	r12
    1988:	bf 90       	pop	r11
    198a:	af 90       	pop	r10
    198c:	9f 90       	pop	r9
    198e:	8f 90       	pop	r8
    1990:	08 95       	ret

00001992 <vTaskDelay>:
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	6b 01       	movw	r12, r22
    199c:	7c 01       	movw	r14, r24
    199e:	67 2b       	or	r22, r23
    19a0:	68 2b       	or	r22, r24
    19a2:	69 2b       	or	r22, r25
    19a4:	39 f0       	breq	.+14     	; 0x19b4 <vTaskDelay+0x22>
    19a6:	74 dd       	rcall	.-1304   	; 0x1490 <vTaskSuspendAll>
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	c7 01       	movw	r24, r14
    19ac:	b6 01       	movw	r22, r12
    19ae:	52 dc       	rcall	.-1884   	; 0x1254 <prvAddCurrentTaskToDelayedList>
    19b0:	af de       	rcall	.-674    	; 0x1710 <xTaskResumeAll>
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <vTaskDelay+0x24>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	81 11       	cpse	r24, r1
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <vTaskDelay+0x2c>
    19ba:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	08 95       	ret

000019c8 <vTaskSwitchContext>:
    19c8:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxSchedulerSuspended>
    19cc:	88 23       	and	r24, r24
    19ce:	21 f0       	breq	.+8      	; 0x19d8 <vTaskSwitchContext+0x10>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xYieldPending>
    19d6:	08 95       	ret
    19d8:	10 92 55 0c 	sts	0x0C55, r1	; 0x800c55 <xYieldPending>
    19dc:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    19e0:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    19e4:	20 81       	ld	r18, Z
    19e6:	31 81       	ldd	r19, Z+1	; 0x01
    19e8:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    19ec:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    19f0:	83 8d       	ldd	r24, Z+27	; 0x1b
    19f2:	94 8d       	ldd	r25, Z+28	; 0x1c
    19f4:	82 17       	cp	r24, r18
    19f6:	93 07       	cpc	r25, r19
    19f8:	58 f0       	brcs	.+22     	; 0x1a10 <vTaskSwitchContext+0x48>
    19fa:	60 91 0b 0d 	lds	r22, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    19fe:	70 91 0c 0d 	lds	r23, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1a02:	63 5e       	subi	r22, 0xE3	; 227
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1a0a:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1a0e:	3e d5       	rcall	.+2684   	; 0x248c <vApplicationStackOverflowHook>
    1a10:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <uxTopReadyPriority>
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <vTaskSwitchContext+0x50>
    1a16:	81 50       	subi	r24, 0x01	; 1
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	9b e0       	ldi	r25, 0x0B	; 11
    1a1e:	92 9f       	mul	r25, r18
    1a20:	f0 01       	movw	r30, r0
    1a22:	93 9f       	mul	r25, r19
    1a24:	f0 0d       	add	r31, r0
    1a26:	11 24       	eor	r1, r1
    1a28:	e3 56       	subi	r30, 0x63	; 99
    1a2a:	f3 4f       	sbci	r31, 0xF3	; 243
    1a2c:	90 81       	ld	r25, Z
    1a2e:	99 23       	and	r25, r25
    1a30:	91 f3       	breq	.-28     	; 0x1a16 <vTaskSwitchContext+0x4e>
    1a32:	9b e0       	ldi	r25, 0x0B	; 11
    1a34:	92 9f       	mul	r25, r18
    1a36:	a0 01       	movw	r20, r0
    1a38:	93 9f       	mul	r25, r19
    1a3a:	50 0d       	add	r21, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	df 01       	movw	r26, r30
    1a40:	01 80       	ldd	r0, Z+1	; 0x01
    1a42:	f2 81       	ldd	r31, Z+2	; 0x02
    1a44:	e0 2d       	mov	r30, r0
    1a46:	04 80       	ldd	r0, Z+4	; 0x04
    1a48:	f5 81       	ldd	r31, Z+5	; 0x05
    1a4a:	e0 2d       	mov	r30, r0
    1a4c:	12 96       	adiw	r26, 0x02	; 2
    1a4e:	fc 93       	st	X, r31
    1a50:	ee 93       	st	-X, r30
    1a52:	11 97       	sbiw	r26, 0x01	; 1
    1a54:	40 56       	subi	r20, 0x60	; 96
    1a56:	53 4f       	sbci	r21, 0xF3	; 243
    1a58:	e4 17       	cp	r30, r20
    1a5a:	f5 07       	cpc	r31, r21
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <vTaskSwitchContext+0xa0>
    1a5e:	44 81       	ldd	r20, Z+4	; 0x04
    1a60:	55 81       	ldd	r21, Z+5	; 0x05
    1a62:	fd 01       	movw	r30, r26
    1a64:	52 83       	std	Z+2, r21	; 0x02
    1a66:	41 83       	std	Z+1, r20	; 0x01
    1a68:	9b e0       	ldi	r25, 0x0B	; 11
    1a6a:	92 9f       	mul	r25, r18
    1a6c:	f0 01       	movw	r30, r0
    1a6e:	93 9f       	mul	r25, r19
    1a70:	f0 0d       	add	r31, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	e3 56       	subi	r30, 0x63	; 99
    1a76:	f3 4f       	sbci	r31, 0xF3	; 243
    1a78:	01 80       	ldd	r0, Z+1	; 0x01
    1a7a:	f2 81       	ldd	r31, Z+2	; 0x02
    1a7c:	e0 2d       	mov	r30, r0
    1a7e:	20 85       	ldd	r18, Z+8	; 0x08
    1a80:	31 85       	ldd	r19, Z+9	; 0x09
    1a82:	30 93 0c 0d 	sts	0x0D0C, r19	; 0x800d0c <pxCurrentTCB+0x1>
    1a86:	20 93 0b 0d 	sts	0x0D0B, r18	; 0x800d0b <pxCurrentTCB>
    1a8a:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <uxTopReadyPriority>
    1a8e:	08 95       	ret

00001a90 <vTaskPlaceOnEventList>:
    1a90:	cf 92       	push	r12
    1a92:	df 92       	push	r13
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	6a 01       	movw	r12, r20
    1a9a:	7b 01       	movw	r14, r22
    1a9c:	60 91 0b 0d 	lds	r22, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1aa0:	70 91 0c 0d 	lds	r23, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1aa4:	62 5f       	subi	r22, 0xF2	; 242
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsert>
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	c7 01       	movw	r24, r14
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	d0 db       	rcall	.-2144   	; 0x1254 <prvAddCurrentTaskToDelayedList>
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	08 95       	ret

00001abe <vTaskPlaceOnEventListRestricted>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	ba 01       	movw	r22, r20
    1ac8:	a1 81       	ldd	r26, Z+1	; 0x01
    1aca:	b2 81       	ldd	r27, Z+2	; 0x02
    1acc:	c0 91 0b 0d 	lds	r28, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1ad0:	d0 91 0c 0d 	lds	r29, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1ad4:	bb 8b       	std	Y+19, r27	; 0x13
    1ad6:	aa 8b       	std	Y+18, r26	; 0x12
    1ad8:	c0 91 0b 0d 	lds	r28, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1adc:	d0 91 0c 0d 	lds	r29, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1ae0:	16 96       	adiw	r26, 0x06	; 6
    1ae2:	4d 91       	ld	r20, X+
    1ae4:	5c 91       	ld	r21, X
    1ae6:	17 97       	sbiw	r26, 0x07	; 7
    1ae8:	5d 8b       	std	Y+21, r21	; 0x15
    1aea:	4c 8b       	std	Y+20, r20	; 0x14
    1aec:	16 96       	adiw	r26, 0x06	; 6
    1aee:	cd 91       	ld	r28, X+
    1af0:	dc 91       	ld	r29, X
    1af2:	17 97       	sbiw	r26, 0x07	; 7
    1af4:	40 91 0b 0d 	lds	r20, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1af8:	50 91 0c 0d 	lds	r21, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1afc:	42 5f       	subi	r20, 0xF2	; 242
    1afe:	5f 4f       	sbci	r21, 0xFF	; 255
    1b00:	5d 83       	std	Y+5, r21	; 0x05
    1b02:	4c 83       	std	Y+4, r20	; 0x04
    1b04:	40 91 0b 0d 	lds	r20, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1b08:	50 91 0c 0d 	lds	r21, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1b0c:	42 5f       	subi	r20, 0xF2	; 242
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	17 96       	adiw	r26, 0x07	; 7
    1b12:	5c 93       	st	X, r21
    1b14:	4e 93       	st	-X, r20
    1b16:	16 97       	sbiw	r26, 0x06	; 6
    1b18:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1b1c:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1b20:	59 96       	adiw	r26, 0x19	; 25
    1b22:	fc 93       	st	X, r31
    1b24:	ee 93       	st	-X, r30
    1b26:	58 97       	sbiw	r26, 0x18	; 24
    1b28:	30 81       	ld	r19, Z
    1b2a:	3f 5f       	subi	r19, 0xFF	; 255
    1b2c:	30 83       	st	Z, r19
    1b2e:	22 23       	and	r18, r18
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <vTaskPlaceOnEventListRestricted+0x7a>
    1b32:	6f ef       	ldi	r22, 0xFF	; 255
    1b34:	7f ef       	ldi	r23, 0xFF	; 255
    1b36:	cb 01       	movw	r24, r22
    1b38:	42 2f       	mov	r20, r18
    1b3a:	8c db       	rcall	.-2280   	; 0x1254 <prvAddCurrentTaskToDelayedList>
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <xTaskRemoveFromEventList>:
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	dc 01       	movw	r26, r24
    1b48:	17 96       	adiw	r26, 0x07	; 7
    1b4a:	ed 91       	ld	r30, X+
    1b4c:	fc 91       	ld	r31, X
    1b4e:	18 97       	sbiw	r26, 0x08	; 8
    1b50:	00 84       	ldd	r0, Z+8	; 0x08
    1b52:	f1 85       	ldd	r31, Z+9	; 0x09
    1b54:	e0 2d       	mov	r30, r0
    1b56:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b58:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b5a:	c2 89       	ldd	r28, Z+18	; 0x12
    1b5c:	d3 89       	ldd	r29, Z+19	; 0x13
    1b5e:	84 89       	ldd	r24, Z+20	; 0x14
    1b60:	95 89       	ldd	r25, Z+21	; 0x15
    1b62:	9f 83       	std	Y+7, r25	; 0x07
    1b64:	8e 83       	std	Y+6, r24	; 0x06
    1b66:	c4 89       	ldd	r28, Z+20	; 0x14
    1b68:	d5 89       	ldd	r29, Z+21	; 0x15
    1b6a:	82 89       	ldd	r24, Z+18	; 0x12
    1b6c:	93 89       	ldd	r25, Z+19	; 0x13
    1b6e:	9d 83       	std	Y+5, r25	; 0x05
    1b70:	8c 83       	std	Y+4, r24	; 0x04
    1b72:	11 96       	adiw	r26, 0x01	; 1
    1b74:	8d 91       	ld	r24, X+
    1b76:	9c 91       	ld	r25, X
    1b78:	12 97       	sbiw	r26, 0x02	; 2
    1b7a:	9f 01       	movw	r18, r30
    1b7c:	22 5f       	subi	r18, 0xF2	; 242
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	82 17       	cp	r24, r18
    1b82:	93 07       	cpc	r25, r19
    1b84:	31 f4       	brne	.+12     	; 0x1b92 <xTaskRemoveFromEventList+0x50>
    1b86:	84 89       	ldd	r24, Z+20	; 0x14
    1b88:	95 89       	ldd	r25, Z+21	; 0x15
    1b8a:	12 96       	adiw	r26, 0x02	; 2
    1b8c:	9c 93       	st	X, r25
    1b8e:	8e 93       	st	-X, r24
    1b90:	11 97       	sbiw	r26, 0x01	; 1
    1b92:	11 8e       	std	Z+25, r1	; 0x19
    1b94:	10 8e       	std	Z+24, r1	; 0x18
    1b96:	8c 91       	ld	r24, X
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	8c 93       	st	X, r24
    1b9c:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxSchedulerSuspended>
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	52 c0       	rjmp	.+164    	; 0x1c48 <xTaskRemoveFromEventList+0x106>
    1ba4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ba6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ba8:	c6 81       	ldd	r28, Z+6	; 0x06
    1baa:	d7 81       	ldd	r29, Z+7	; 0x07
    1bac:	80 85       	ldd	r24, Z+8	; 0x08
    1bae:	91 85       	ldd	r25, Z+9	; 0x09
    1bb0:	9f 83       	std	Y+7, r25	; 0x07
    1bb2:	8e 83       	std	Y+6, r24	; 0x06
    1bb4:	c0 85       	ldd	r28, Z+8	; 0x08
    1bb6:	d1 85       	ldd	r29, Z+9	; 0x09
    1bb8:	86 81       	ldd	r24, Z+6	; 0x06
    1bba:	97 81       	ldd	r25, Z+7	; 0x07
    1bbc:	9d 83       	std	Y+5, r25	; 0x05
    1bbe:	8c 83       	std	Y+4, r24	; 0x04
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	8d 91       	ld	r24, X+
    1bc4:	9c 91       	ld	r25, X
    1bc6:	12 97       	sbiw	r26, 0x02	; 2
    1bc8:	9f 01       	movw	r18, r30
    1bca:	2e 5f       	subi	r18, 0xFE	; 254
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	82 17       	cp	r24, r18
    1bd0:	93 07       	cpc	r25, r19
    1bd2:	31 f4       	brne	.+12     	; 0x1be0 <xTaskRemoveFromEventList+0x9e>
    1bd4:	80 85       	ldd	r24, Z+8	; 0x08
    1bd6:	91 85       	ldd	r25, Z+9	; 0x09
    1bd8:	12 96       	adiw	r26, 0x02	; 2
    1bda:	9c 93       	st	X, r25
    1bdc:	8e 93       	st	-X, r24
    1bde:	11 97       	sbiw	r26, 0x01	; 1
    1be0:	15 86       	std	Z+13, r1	; 0x0d
    1be2:	14 86       	std	Z+12, r1	; 0x0c
    1be4:	8c 91       	ld	r24, X
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	8c 93       	st	X, r24
    1bea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bec:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <uxTopReadyPriority>
    1bf0:	8a 17       	cp	r24, r26
    1bf2:	10 f4       	brcc	.+4      	; 0x1bf8 <xTaskRemoveFromEventList+0xb6>
    1bf4:	a0 93 5b 0c 	sts	0x0C5B, r26	; 0x800c5b <uxTopReadyPriority>
    1bf8:	8b e0       	ldi	r24, 0x0B	; 11
    1bfa:	8a 9f       	mul	r24, r26
    1bfc:	d0 01       	movw	r26, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	a3 56       	subi	r26, 0x63	; 99
    1c02:	b3 4f       	sbci	r27, 0xF3	; 243
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	0d 90       	ld	r0, X+
    1c08:	bc 91       	ld	r27, X
    1c0a:	a0 2d       	mov	r26, r0
    1c0c:	b7 83       	std	Z+7, r27	; 0x07
    1c0e:	a6 83       	std	Z+6, r26	; 0x06
    1c10:	16 96       	adiw	r26, 0x06	; 6
    1c12:	4d 91       	ld	r20, X+
    1c14:	5c 91       	ld	r21, X
    1c16:	17 97       	sbiw	r26, 0x07	; 7
    1c18:	51 87       	std	Z+9, r21	; 0x09
    1c1a:	40 87       	std	Z+8, r20	; 0x08
    1c1c:	16 96       	adiw	r26, 0x06	; 6
    1c1e:	cd 91       	ld	r28, X+
    1c20:	dc 91       	ld	r29, X
    1c22:	17 97       	sbiw	r26, 0x07	; 7
    1c24:	3d 83       	std	Y+5, r19	; 0x05
    1c26:	2c 83       	std	Y+4, r18	; 0x04
    1c28:	17 96       	adiw	r26, 0x07	; 7
    1c2a:	3c 93       	st	X, r19
    1c2c:	2e 93       	st	-X, r18
    1c2e:	16 97       	sbiw	r26, 0x06	; 6
    1c30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c32:	8a 9f       	mul	r24, r26
    1c34:	d0 01       	movw	r26, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	a3 56       	subi	r26, 0x63	; 99
    1c3a:	b3 4f       	sbci	r27, 0xF3	; 243
    1c3c:	b5 87       	std	Z+13, r27	; 0x0d
    1c3e:	a4 87       	std	Z+12, r26	; 0x0c
    1c40:	8c 91       	ld	r24, X
    1c42:	8f 5f       	subi	r24, 0xFF	; 255
    1c44:	8c 93       	st	X, r24
    1c46:	1c c0       	rjmp	.+56     	; 0x1c80 <xTaskRemoveFromEventList+0x13e>
    1c48:	48 e7       	ldi	r20, 0x78	; 120
    1c4a:	5c e0       	ldi	r21, 0x0C	; 12
    1c4c:	da 01       	movw	r26, r20
    1c4e:	11 96       	adiw	r26, 0x01	; 1
    1c50:	cd 91       	ld	r28, X+
    1c52:	dc 91       	ld	r29, X
    1c54:	12 97       	sbiw	r26, 0x02	; 2
    1c56:	d3 8b       	std	Z+19, r29	; 0x13
    1c58:	c2 8b       	std	Z+18, r28	; 0x12
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5e:	95 8b       	std	Z+21, r25	; 0x15
    1c60:	84 8b       	std	Z+20, r24	; 0x14
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	9f 81       	ldd	r25, Y+7	; 0x07
    1c66:	dc 01       	movw	r26, r24
    1c68:	15 96       	adiw	r26, 0x05	; 5
    1c6a:	3c 93       	st	X, r19
    1c6c:	2e 93       	st	-X, r18
    1c6e:	14 97       	sbiw	r26, 0x04	; 4
    1c70:	3f 83       	std	Y+7, r19	; 0x07
    1c72:	2e 83       	std	Y+6, r18	; 0x06
    1c74:	51 8f       	std	Z+25, r21	; 0x19
    1c76:	40 8f       	std	Z+24, r20	; 0x18
    1c78:	da 01       	movw	r26, r20
    1c7a:	8c 91       	ld	r24, X
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	8c 93       	st	X, r24
    1c80:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c82:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <pxCurrentTCB>
    1c86:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <pxCurrentTCB+0x1>
    1c8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c8c:	89 17       	cp	r24, r25
    1c8e:	20 f4       	brcc	.+8      	; 0x1c98 <xTaskRemoveFromEventList+0x156>
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xYieldPending>
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <xTaskRemoveFromEventList+0x158>
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <vTaskInternalSetTimeOutState>:
    1ca0:	20 91 54 0c 	lds	r18, 0x0C54	; 0x800c54 <xNumOfOverflows>
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	20 83       	st	Z, r18
    1ca8:	40 91 5c 0c 	lds	r20, 0x0C5C	; 0x800c5c <xTickCount>
    1cac:	50 91 5d 0c 	lds	r21, 0x0C5D	; 0x800c5d <xTickCount+0x1>
    1cb0:	60 91 5e 0c 	lds	r22, 0x0C5E	; 0x800c5e <xTickCount+0x2>
    1cb4:	70 91 5f 0c 	lds	r23, 0x0C5F	; 0x800c5f <xTickCount+0x3>
    1cb8:	41 83       	std	Z+1, r20	; 0x01
    1cba:	52 83       	std	Z+2, r21	; 0x02
    1cbc:	63 83       	std	Z+3, r22	; 0x03
    1cbe:	74 83       	std	Z+4, r23	; 0x04
    1cc0:	08 95       	ret

00001cc2 <xTaskCheckForTimeOut>:
    1cc2:	8f 92       	push	r8
    1cc4:	9f 92       	push	r9
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	fb 01       	movw	r30, r22
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	0f 92       	push	r0
    1ce2:	c0 90 5c 0c 	lds	r12, 0x0C5C	; 0x800c5c <xTickCount>
    1ce6:	d0 90 5d 0c 	lds	r13, 0x0C5D	; 0x800c5d <xTickCount+0x1>
    1cea:	e0 90 5e 0c 	lds	r14, 0x0C5E	; 0x800c5e <xTickCount+0x2>
    1cee:	f0 90 5f 0c 	lds	r15, 0x0C5F	; 0x800c5f <xTickCount+0x3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	11 96       	adiw	r26, 0x01	; 1
    1cf6:	0d 91       	ld	r16, X+
    1cf8:	1d 91       	ld	r17, X+
    1cfa:	2d 91       	ld	r18, X+
    1cfc:	3c 91       	ld	r19, X
    1cfe:	14 97       	sbiw	r26, 0x04	; 4
    1d00:	46 01       	movw	r8, r12
    1d02:	57 01       	movw	r10, r14
    1d04:	80 1a       	sub	r8, r16
    1d06:	91 0a       	sbc	r9, r17
    1d08:	a2 0a       	sbc	r10, r18
    1d0a:	b3 0a       	sbc	r11, r19
    1d0c:	40 81       	ld	r20, Z
    1d0e:	51 81       	ldd	r21, Z+1	; 0x01
    1d10:	62 81       	ldd	r22, Z+2	; 0x02
    1d12:	73 81       	ldd	r23, Z+3	; 0x03
    1d14:	4f 3f       	cpi	r20, 0xFF	; 255
    1d16:	bf ef       	ldi	r27, 0xFF	; 255
    1d18:	5b 07       	cpc	r21, r27
    1d1a:	6b 07       	cpc	r22, r27
    1d1c:	7b 07       	cpc	r23, r27
    1d1e:	39 f1       	breq	.+78     	; 0x1d6e <xTaskCheckForTimeOut+0xac>
    1d20:	ec 01       	movw	r28, r24
    1d22:	b8 81       	ld	r27, Y
    1d24:	a0 91 54 0c 	lds	r26, 0x0C54	; 0x800c54 <xNumOfOverflows>
    1d28:	ba 17       	cp	r27, r26
    1d2a:	59 f0       	breq	.+22     	; 0x1d42 <xTaskCheckForTimeOut+0x80>
    1d2c:	c0 16       	cp	r12, r16
    1d2e:	d1 06       	cpc	r13, r17
    1d30:	e2 06       	cpc	r14, r18
    1d32:	f3 06       	cpc	r15, r19
    1d34:	30 f0       	brcs	.+12     	; 0x1d42 <xTaskCheckForTimeOut+0x80>
    1d36:	10 82       	st	Z, r1
    1d38:	11 82       	std	Z+1, r1	; 0x01
    1d3a:	12 82       	std	Z+2, r1	; 0x02
    1d3c:	13 82       	std	Z+3, r1	; 0x03
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	17 c0       	rjmp	.+46     	; 0x1d70 <xTaskCheckForTimeOut+0xae>
    1d42:	84 16       	cp	r8, r20
    1d44:	95 06       	cpc	r9, r21
    1d46:	a6 06       	cpc	r10, r22
    1d48:	b7 06       	cpc	r11, r23
    1d4a:	58 f4       	brcc	.+22     	; 0x1d62 <xTaskCheckForTimeOut+0xa0>
    1d4c:	48 19       	sub	r20, r8
    1d4e:	59 09       	sbc	r21, r9
    1d50:	6a 09       	sbc	r22, r10
    1d52:	7b 09       	sbc	r23, r11
    1d54:	40 83       	st	Z, r20
    1d56:	51 83       	std	Z+1, r21	; 0x01
    1d58:	62 83       	std	Z+2, r22	; 0x02
    1d5a:	73 83       	std	Z+3, r23	; 0x03
    1d5c:	a1 df       	rcall	.-190    	; 0x1ca0 <vTaskInternalSetTimeOutState>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	07 c0       	rjmp	.+14     	; 0x1d70 <xTaskCheckForTimeOut+0xae>
    1d62:	10 82       	st	Z, r1
    1d64:	11 82       	std	Z+1, r1	; 0x01
    1d66:	12 82       	std	Z+2, r1	; 0x02
    1d68:	13 82       	std	Z+3, r1	; 0x03
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <xTaskCheckForTimeOut+0xae>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	0f 90       	pop	r0
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	08 95       	ret

00001d8e <vTaskMissedYield>:
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xYieldPending>
    1d94:	08 95       	ret

00001d96 <xTaskGetSchedulerState>:
    1d96:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <xSchedulerRunning>
    1d9a:	88 23       	and	r24, r24
    1d9c:	31 f0       	breq	.+12     	; 0x1daa <xTaskGetSchedulerState+0x14>
    1d9e:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxSchedulerSuspended>
    1da2:	81 11       	cpse	r24, r1
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <xTaskGetSchedulerState+0x18>
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	08 95       	ret
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	08 95       	ret
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	08 95       	ret

00001db2 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1dbc:	89 2b       	or	r24, r25
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <xTaskPriorityDisinherit+0x10>
    1dc0:	49 c0       	rjmp	.+146    	; 0x1e54 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1dc2:	86 a5       	ldd	r24, Z+46	; 0x2e
    1dc4:	81 50       	subi	r24, 0x01	; 1
    1dc6:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1dc8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dca:	95 a5       	ldd	r25, Z+45	; 0x2d
    1dcc:	29 17       	cp	r18, r25
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <xTaskPriorityDisinherit+0x20>
    1dd0:	43 c0       	rjmp	.+134    	; 0x1e58 <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1dd2:	81 11       	cpse	r24, r1
    1dd4:	43 c0       	rjmp	.+134    	; 0x1e5c <xTaskPriorityDisinherit+0xaa>
    1dd6:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1dd8:	8f 01       	movw	r16, r30
    1dda:	0e 5f       	subi	r16, 0xFE	; 254
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	c8 01       	movw	r24, r16
    1de0:	0e 94 b7 03 	call	0x76e	; 0x76e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1de4:	ed a5       	ldd	r30, Y+45	; 0x2d
    1de6:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1de8:	8a e0       	ldi	r24, 0x0A	; 10
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e0       	ldi	r26, 0x00	; 0
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	8e 1b       	sub	r24, r30
    1df2:	91 09       	sbc	r25, r1
    1df4:	a1 09       	sbc	r26, r1
    1df6:	b1 09       	sbc	r27, r1
    1df8:	8e 87       	std	Y+14, r24	; 0x0e
    1dfa:	9f 87       	std	Y+15, r25	; 0x0f
    1dfc:	a8 8b       	std	Y+16, r26	; 0x10
    1dfe:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1e00:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <uxTopReadyPriority>
    1e04:	8e 17       	cp	r24, r30
    1e06:	10 f4       	brcc	.+4      	; 0x1e0c <xTaskPriorityDisinherit+0x5a>
    1e08:	e0 93 5b 0c 	sts	0x0C5B, r30	; 0x800c5b <uxTopReadyPriority>
    1e0c:	8b e0       	ldi	r24, 0x0B	; 11
    1e0e:	8e 9f       	mul	r24, r30
    1e10:	f0 01       	movw	r30, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	e3 56       	subi	r30, 0x63	; 99
    1e16:	f3 4f       	sbci	r31, 0xF3	; 243
    1e18:	01 80       	ldd	r0, Z+1	; 0x01
    1e1a:	f2 81       	ldd	r31, Z+2	; 0x02
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	ff 83       	std	Y+7, r31	; 0x07
    1e20:	ee 83       	std	Y+6, r30	; 0x06
    1e22:	26 81       	ldd	r18, Z+6	; 0x06
    1e24:	37 81       	ldd	r19, Z+7	; 0x07
    1e26:	39 87       	std	Y+9, r19	; 0x09
    1e28:	28 87       	std	Y+8, r18	; 0x08
    1e2a:	a6 81       	ldd	r26, Z+6	; 0x06
    1e2c:	b7 81       	ldd	r27, Z+7	; 0x07
    1e2e:	15 96       	adiw	r26, 0x05	; 5
    1e30:	1c 93       	st	X, r17
    1e32:	0e 93       	st	-X, r16
    1e34:	14 97       	sbiw	r26, 0x04	; 4
    1e36:	17 83       	std	Z+7, r17	; 0x07
    1e38:	06 83       	std	Z+6, r16	; 0x06
    1e3a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e3c:	8e 9f       	mul	r24, r30
    1e3e:	f0 01       	movw	r30, r0
    1e40:	11 24       	eor	r1, r1
    1e42:	e3 56       	subi	r30, 0x63	; 99
    1e44:	f3 4f       	sbci	r31, 0xF3	; 243
    1e46:	fd 87       	std	Y+13, r31	; 0x0d
    1e48:	ec 87       	std	Y+12, r30	; 0x0c
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	05 c0       	rjmp	.+10     	; 0x1e5e <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <xTaskPriorityDisinherit+0xac>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <xTaskPriorityDisinherit+0xac>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <prvGetNextExpireTime>:
    1e68:	dc 01       	movw	r26, r24
    1e6a:	e0 91 17 0d 	lds	r30, 0x0D17	; 0x800d17 <pxCurrentTimerList>
    1e6e:	f0 91 18 0d 	lds	r31, 0x0D18	; 0x800d18 <pxCurrentTimerList+0x1>
    1e72:	80 81       	ld	r24, Z
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	81 11       	cpse	r24, r1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9c 93       	st	X, r25
    1e7c:	91 11       	cpse	r25, r1
    1e7e:	08 c0       	rjmp	.+16     	; 0x1e90 <prvGetNextExpireTime+0x28>
    1e80:	07 80       	ldd	r0, Z+7	; 0x07
    1e82:	f0 85       	ldd	r31, Z+8	; 0x08
    1e84:	e0 2d       	mov	r30, r0
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	08 95       	ret
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	cb 01       	movw	r24, r22
    1e96:	08 95       	ret

00001e98 <prvInsertTimerInActiveList>:
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	42 83       	std	Z+2, r20	; 0x02
    1ea8:	53 83       	std	Z+3, r21	; 0x03
    1eaa:	64 83       	std	Z+4, r22	; 0x04
    1eac:	75 83       	std	Z+5, r23	; 0x05
    1eae:	93 87       	std	Z+11, r25	; 0x0b
    1eb0:	82 87       	std	Z+10, r24	; 0x0a
    1eb2:	04 17       	cp	r16, r20
    1eb4:	15 07       	cpc	r17, r21
    1eb6:	26 07       	cpc	r18, r22
    1eb8:	37 07       	cpc	r19, r23
    1eba:	c0 f0       	brcs	.+48     	; 0x1eec <prvInsertTimerInActiveList+0x54>
    1ebc:	0c 19       	sub	r16, r12
    1ebe:	1d 09       	sbc	r17, r13
    1ec0:	2e 09       	sbc	r18, r14
    1ec2:	3f 09       	sbc	r19, r15
    1ec4:	86 85       	ldd	r24, Z+14	; 0x0e
    1ec6:	97 85       	ldd	r25, Z+15	; 0x0f
    1ec8:	a0 89       	ldd	r26, Z+16	; 0x10
    1eca:	b1 89       	ldd	r27, Z+17	; 0x11
    1ecc:	08 17       	cp	r16, r24
    1ece:	19 07       	cpc	r17, r25
    1ed0:	2a 07       	cpc	r18, r26
    1ed2:	3b 07       	cpc	r19, r27
    1ed4:	00 f5       	brcc	.+64     	; 0x1f16 <prvInsertTimerInActiveList+0x7e>
    1ed6:	bf 01       	movw	r22, r30
    1ed8:	6e 5f       	subi	r22, 0xFE	; 254
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	80 91 15 0d 	lds	r24, 0x0D15	; 0x800d15 <pxOverflowTimerList>
    1ee0:	90 91 16 0d 	lds	r25, 0x0D16	; 0x800d16 <pxOverflowTimerList+0x1>
    1ee4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsert>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	18 c0       	rjmp	.+48     	; 0x1f1c <prvInsertTimerInActiveList+0x84>
    1eec:	0c 15       	cp	r16, r12
    1eee:	1d 05       	cpc	r17, r13
    1ef0:	2e 05       	cpc	r18, r14
    1ef2:	3f 05       	cpc	r19, r15
    1ef4:	28 f4       	brcc	.+10     	; 0x1f00 <prvInsertTimerInActiveList+0x68>
    1ef6:	4c 15       	cp	r20, r12
    1ef8:	5d 05       	cpc	r21, r13
    1efa:	6e 05       	cpc	r22, r14
    1efc:	7f 05       	cpc	r23, r15
    1efe:	68 f4       	brcc	.+26     	; 0x1f1a <prvInsertTimerInActiveList+0x82>
    1f00:	bf 01       	movw	r22, r30
    1f02:	6e 5f       	subi	r22, 0xFE	; 254
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	80 91 17 0d 	lds	r24, 0x0D17	; 0x800d17 <pxCurrentTimerList>
    1f0a:	90 91 18 0d 	lds	r25, 0x0D18	; 0x800d18 <pxCurrentTimerList+0x1>
    1f0e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsert>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <prvInsertTimerInActiveList+0x84>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <prvInsertTimerInActiveList+0x84>
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	08 95       	ret

00001f2a <prvCheckForValidListAndQueue>:
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	0f 92       	push	r0
    1f30:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <xTimerQueue>
    1f34:	90 91 14 0d 	lds	r25, 0x0D14	; 0x800d14 <xTimerQueue+0x1>
    1f38:	89 2b       	or	r24, r25
    1f3a:	e9 f4       	brne	.+58     	; 0x1f76 <prvCheckForValidListAndQueue+0x4c>
    1f3c:	84 e2       	ldi	r24, 0x24	; 36
    1f3e:	9d e0       	ldi	r25, 0x0D	; 13
    1f40:	0e 94 65 03 	call	0x6ca	; 0x6ca <vListInitialise>
    1f44:	89 e1       	ldi	r24, 0x19	; 25
    1f46:	9d e0       	ldi	r25, 0x0D	; 13
    1f48:	0e 94 65 03 	call	0x6ca	; 0x6ca <vListInitialise>
    1f4c:	84 e2       	ldi	r24, 0x24	; 36
    1f4e:	9d e0       	ldi	r25, 0x0D	; 13
    1f50:	90 93 18 0d 	sts	0x0D18, r25	; 0x800d18 <pxCurrentTimerList+0x1>
    1f54:	80 93 17 0d 	sts	0x0D17, r24	; 0x800d17 <pxCurrentTimerList>
    1f58:	89 e1       	ldi	r24, 0x19	; 25
    1f5a:	9d e0       	ldi	r25, 0x0D	; 13
    1f5c:	90 93 16 0d 	sts	0x0D16, r25	; 0x800d16 <pxOverflowTimerList+0x1>
    1f60:	80 93 15 0d 	sts	0x0D15, r24	; 0x800d15 <pxOverflowTimerList>
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	67 e0       	ldi	r22, 0x07	; 7
    1f68:	8a e0       	ldi	r24, 0x0A	; 10
    1f6a:	0e 94 15 06 	call	0xc2a	; 0xc2a <xQueueGenericCreate>
    1f6e:	90 93 14 0d 	sts	0x0D14, r25	; 0x800d14 <xTimerQueue+0x1>
    1f72:	80 93 13 0d 	sts	0x0D13, r24	; 0x800d13 <xTimerQueue>
    1f76:	0f 90       	pop	r0
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	08 95       	ret

00001f7c <xTimerCreateTimerTask>:
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	d3 df       	rcall	.-90     	; 0x1f2a <prvCheckForValidListAndQueue>
    1f84:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <xTimerQueue>
    1f88:	90 91 14 0d 	lds	r25, 0x0D14	; 0x800d14 <xTimerQueue+0x1>
    1f8c:	89 2b       	or	r24, r25
    1f8e:	89 f0       	breq	.+34     	; 0x1fb2 <xTimerCreateTimerTask+0x36>
    1f90:	0f 2e       	mov	r0, r31
    1f92:	f1 e1       	ldi	r31, 0x11	; 17
    1f94:	ef 2e       	mov	r14, r31
    1f96:	fd e0       	ldi	r31, 0x0D	; 13
    1f98:	ff 2e       	mov	r15, r31
    1f9a:	f0 2d       	mov	r31, r0
    1f9c:	03 e0       	ldi	r16, 0x03	; 3
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 ec       	ldi	r20, 0xC0	; 192
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	6f e6       	ldi	r22, 0x6F	; 111
    1fa8:	72 e0       	ldi	r23, 0x02	; 2
    1faa:	87 e5       	ldi	r24, 0x57	; 87
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	f1 d9       	rcall	.-3102   	; 0x1392 <xTaskCreate>
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <xTimerCreateTimerTask+0x38>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	08 95       	ret

00001fbc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1fbc:	8f 92       	push	r8
    1fbe:	9f 92       	push	r9
    1fc0:	af 92       	push	r10
    1fc2:	bf 92       	push	r11
    1fc4:	cf 92       	push	r12
    1fc6:	df 92       	push	r13
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	27 97       	sbiw	r28, 0x07	; 7
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1fe4:	e0 91 13 0d 	lds	r30, 0x0D13	; 0x800d13 <xTimerQueue>
    1fe8:	f0 91 14 0d 	lds	r31, 0x0D14	; 0x800d14 <xTimerQueue+0x1>
    1fec:	30 97       	sbiw	r30, 0x00	; 0
    1fee:	81 f1       	breq	.+96     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1ff0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1ff2:	2a 83       	std	Y+2, r18	; 0x02
    1ff4:	3b 83       	std	Y+3, r19	; 0x03
    1ff6:	4c 83       	std	Y+4, r20	; 0x04
    1ff8:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1ffa:	9f 83       	std	Y+7, r25	; 0x07
    1ffc:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1ffe:	66 30       	cpi	r22, 0x06	; 6
    2000:	f4 f4       	brge	.+60     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2002:	c9 de       	rcall	.-622    	; 0x1d96 <xTaskGetSchedulerState>
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	69 f4       	brne	.+26     	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2008:	00 e0       	ldi	r16, 0x00	; 0
    200a:	a7 01       	movw	r20, r14
    200c:	96 01       	movw	r18, r12
    200e:	be 01       	movw	r22, r28
    2010:	6f 5f       	subi	r22, 0xFF	; 255
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <xTimerQueue>
    2018:	90 91 14 0d 	lds	r25, 0x0D14	; 0x800d14 <xTimerQueue+0x1>
    201c:	0e 94 38 06 	call	0xc70	; 0xc70 <xQueueGenericSend>
    2020:	18 c0       	rjmp	.+48     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2022:	00 e0       	ldi	r16, 0x00	; 0
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	a9 01       	movw	r20, r18
    202a:	be 01       	movw	r22, r28
    202c:	6f 5f       	subi	r22, 0xFF	; 255
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <xTimerQueue>
    2034:	90 91 14 0d 	lds	r25, 0x0D14	; 0x800d14 <xTimerQueue+0x1>
    2038:	0e 94 38 06 	call	0xc70	; 0xc70 <xQueueGenericSend>
    203c:	0a c0       	rjmp	.+20     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	a8 01       	movw	r20, r16
    2042:	be 01       	movw	r22, r28
    2044:	6f 5f       	subi	r22, 0xFF	; 255
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	cf 01       	movw	r24, r30
    204a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <xQueueGenericSendFromISR>
    204e:	01 c0       	rjmp	.+2      	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2050:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2052:	27 96       	adiw	r28, 0x07	; 7
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	bf 90       	pop	r11
    2070:	af 90       	pop	r10
    2072:	9f 90       	pop	r9
    2074:	8f 90       	pop	r8
    2076:	08 95       	ret

00002078 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2078:	8f 92       	push	r8
    207a:	9f 92       	push	r9
    207c:	af 92       	push	r10
    207e:	bf 92       	push	r11
    2080:	cf 92       	push	r12
    2082:	df 92       	push	r13
    2084:	ef 92       	push	r14
    2086:	ff 92       	push	r15
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2090:	3b c0       	rjmp	.+118    	; 0x2108 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2092:	07 80       	ldd	r0, Z+7	; 0x07
    2094:	f0 85       	ldd	r31, Z+8	; 0x08
    2096:	e0 2d       	mov	r30, r0
    2098:	80 80       	ld	r8, Z
    209a:	91 80       	ldd	r9, Z+1	; 0x01
    209c:	a2 80       	ldd	r10, Z+2	; 0x02
    209e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    20a0:	c0 85       	ldd	r28, Z+8	; 0x08
    20a2:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    20a4:	8e 01       	movw	r16, r28
    20a6:	0e 5f       	subi	r16, 0xFE	; 254
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	c8 01       	movw	r24, r16
    20ac:	0e 94 b7 03 	call	0x76e	; 0x76e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    20b0:	ec 89       	ldd	r30, Y+20	; 0x14
    20b2:	fd 89       	ldd	r31, Y+21	; 0x15
    20b4:	ce 01       	movw	r24, r28
    20b6:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    20b8:	8e 89       	ldd	r24, Y+22	; 0x16
    20ba:	82 ff       	sbrs	r24, 2
    20bc:	25 c0       	rjmp	.+74     	; 0x2108 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    20be:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c2:	a8 89       	ldd	r26, Y+16	; 0x10
    20c4:	b9 89       	ldd	r27, Y+17	; 0x11
    20c6:	88 0d       	add	r24, r8
    20c8:	99 1d       	adc	r25, r9
    20ca:	aa 1d       	adc	r26, r10
    20cc:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    20ce:	88 16       	cp	r8, r24
    20d0:	99 06       	cpc	r9, r25
    20d2:	aa 06       	cpc	r10, r26
    20d4:	bb 06       	cpc	r11, r27
    20d6:	70 f4       	brcc	.+28     	; 0x20f4 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    20d8:	8a 83       	std	Y+2, r24	; 0x02
    20da:	9b 83       	std	Y+3, r25	; 0x03
    20dc:	ac 83       	std	Y+4, r26	; 0x04
    20de:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    20e0:	db 87       	std	Y+11, r29	; 0x0b
    20e2:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    20e4:	b8 01       	movw	r22, r16
    20e6:	80 91 17 0d 	lds	r24, 0x0D17	; 0x800d17 <pxCurrentTimerList>
    20ea:	90 91 18 0d 	lds	r25, 0x0D18	; 0x800d18 <pxCurrentTimerList+0x1>
    20ee:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsert>
    20f2:	0a c0       	rjmp	.+20     	; 0x2108 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    20f4:	c1 2c       	mov	r12, r1
    20f6:	d1 2c       	mov	r13, r1
    20f8:	76 01       	movw	r14, r12
    20fa:	00 e0       	ldi	r16, 0x00	; 0
    20fc:	10 e0       	ldi	r17, 0x00	; 0
    20fe:	a5 01       	movw	r20, r10
    2100:	94 01       	movw	r18, r8
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	ce 01       	movw	r24, r28
    2106:	5a df       	rcall	.-332    	; 0x1fbc <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2108:	e0 91 17 0d 	lds	r30, 0x0D17	; 0x800d17 <pxCurrentTimerList>
    210c:	f0 91 18 0d 	lds	r31, 0x0D18	; 0x800d18 <pxCurrentTimerList+0x1>
    2110:	80 81       	ld	r24, Z
    2112:	81 11       	cpse	r24, r1
    2114:	be cf       	rjmp	.-132    	; 0x2092 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2116:	80 91 15 0d 	lds	r24, 0x0D15	; 0x800d15 <pxOverflowTimerList>
    211a:	90 91 16 0d 	lds	r25, 0x0D16	; 0x800d16 <pxOverflowTimerList+0x1>
    211e:	90 93 18 0d 	sts	0x0D18, r25	; 0x800d18 <pxCurrentTimerList+0x1>
    2122:	80 93 17 0d 	sts	0x0D17, r24	; 0x800d17 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2126:	f0 93 16 0d 	sts	0x0D16, r31	; 0x800d16 <pxOverflowTimerList+0x1>
    212a:	e0 93 15 0d 	sts	0x0D15, r30	; 0x800d15 <pxOverflowTimerList>
    }
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	bf 90       	pop	r11
    2140:	af 90       	pop	r10
    2142:	9f 90       	pop	r9
    2144:	8f 90       	pop	r8
    2146:	08 95       	ret

00002148 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2156:	a2 d9       	rcall	.-3260   	; 0x149c <xTaskGetTickCount>
    2158:	6b 01       	movw	r12, r22
    215a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    215c:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <xLastTime.2436>
    2160:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <xLastTime.2436+0x1>
    2164:	a0 91 0f 0d 	lds	r26, 0x0D0F	; 0x800d0f <xLastTime.2436+0x2>
    2168:	b0 91 10 0d 	lds	r27, 0x0D10	; 0x800d10 <xLastTime.2436+0x3>
    216c:	c8 16       	cp	r12, r24
    216e:	d9 06       	cpc	r13, r25
    2170:	ea 06       	cpc	r14, r26
    2172:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    2174:	20 f4       	brcc	.+8      	; 0x217e <prvSampleTimeNow+0x36>
    2176:	80 df       	rcall	.-256    	; 0x2078 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	88 83       	st	Y, r24
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    217e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2180:	c0 92 0d 0d 	sts	0x0D0D, r12	; 0x800d0d <xLastTime.2436>
    2184:	d0 92 0e 0d 	sts	0x0D0E, r13	; 0x800d0e <xLastTime.2436+0x1>
    2188:	e0 92 0f 0d 	sts	0x0D0F, r14	; 0x800d0f <xLastTime.2436+0x2>
    218c:	f0 92 10 0d 	sts	0x0D10, r15	; 0x800d10 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2190:	c7 01       	movw	r24, r14
    2192:	b6 01       	movw	r22, r12
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	ff 90       	pop	r15
    219a:	ef 90       	pop	r14
    219c:	df 90       	pop	r13
    219e:	cf 90       	pop	r12
    21a0:	08 95       	ret

000021a2 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    21a2:	4f 92       	push	r4
    21a4:	5f 92       	push	r5
    21a6:	6f 92       	push	r6
    21a8:	7f 92       	push	r7
    21aa:	8f 92       	push	r8
    21ac:	9f 92       	push	r9
    21ae:	af 92       	push	r10
    21b0:	bf 92       	push	r11
    21b2:	cf 92       	push	r12
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	4b 01       	movw	r8, r22
    21c4:	5c 01       	movw	r10, r24
    21c6:	29 01       	movw	r4, r18
    21c8:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    21ca:	e0 91 17 0d 	lds	r30, 0x0D17	; 0x800d17 <pxCurrentTimerList>
    21ce:	f0 91 18 0d 	lds	r31, 0x0D18	; 0x800d18 <pxCurrentTimerList+0x1>
    21d2:	07 80       	ldd	r0, Z+7	; 0x07
    21d4:	f0 85       	ldd	r31, Z+8	; 0x08
    21d6:	e0 2d       	mov	r30, r0
    21d8:	c0 85       	ldd	r28, Z+8	; 0x08
    21da:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    21dc:	ce 01       	movw	r24, r28
    21de:	02 96       	adiw	r24, 0x02	; 2
    21e0:	0e 94 b7 03 	call	0x76e	; 0x76e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    21e4:	8e 89       	ldd	r24, Y+22	; 0x16
    21e6:	82 ff       	sbrs	r24, 2
    21e8:	1b c0       	rjmp	.+54     	; 0x2220 <__stack+0x21>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    21ea:	4e 85       	ldd	r20, Y+14	; 0x0e
    21ec:	5f 85       	ldd	r21, Y+15	; 0x0f
    21ee:	68 89       	ldd	r22, Y+16	; 0x10
    21f0:	79 89       	ldd	r23, Y+17	; 0x11
    21f2:	48 0d       	add	r20, r8
    21f4:	59 1d       	adc	r21, r9
    21f6:	6a 1d       	adc	r22, r10
    21f8:	7b 1d       	adc	r23, r11
    21fa:	75 01       	movw	r14, r10
    21fc:	64 01       	movw	r12, r8
    21fe:	93 01       	movw	r18, r6
    2200:	82 01       	movw	r16, r4
    2202:	ce 01       	movw	r24, r28
    2204:	49 de       	rcall	.-878    	; 0x1e98 <prvInsertTimerInActiveList>
    2206:	88 23       	and	r24, r24
    2208:	69 f0       	breq	.+26     	; 0x2224 <__stack+0x25>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    220a:	c1 2c       	mov	r12, r1
    220c:	d1 2c       	mov	r13, r1
    220e:	76 01       	movw	r14, r12
    2210:	00 e0       	ldi	r16, 0x00	; 0
    2212:	10 e0       	ldi	r17, 0x00	; 0
    2214:	a5 01       	movw	r20, r10
    2216:	94 01       	movw	r18, r8
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	ce 01       	movw	r24, r28
    221c:	cf de       	rcall	.-610    	; 0x1fbc <xTimerGenericCommand>
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <__stack+0x25>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2220:	8e 7f       	andi	r24, 0xFE	; 254
    2222:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2224:	ec 89       	ldd	r30, Y+20	; 0x14
    2226:	fd 89       	ldd	r31, Y+21	; 0x15
    2228:	ce 01       	movw	r24, r28
    222a:	19 95       	eicall
    }
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	df 90       	pop	r13
    223a:	cf 90       	pop	r12
    223c:	bf 90       	pop	r11
    223e:	af 90       	pop	r10
    2240:	9f 90       	pop	r9
    2242:	8f 90       	pop	r8
    2244:	7f 90       	pop	r7
    2246:	6f 90       	pop	r6
    2248:	5f 90       	pop	r5
    224a:	4f 90       	pop	r4
    224c:	08 95       	ret

0000224e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    224e:	8f 92       	push	r8
    2250:	9f 92       	push	r9
    2252:	af 92       	push	r10
    2254:	bf 92       	push	r11
    2256:	cf 92       	push	r12
    2258:	df 92       	push	r13
    225a:	ef 92       	push	r14
    225c:	ff 92       	push	r15
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	1f 92       	push	r1
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	6b 01       	movw	r12, r22
    226c:	7c 01       	movw	r14, r24
    226e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2270:	0f d9       	rcall	.-3554   	; 0x1490 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2272:	ce 01       	movw	r24, r28
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	68 df       	rcall	.-304    	; 0x2148 <prvSampleTimeNow>
    2278:	4b 01       	movw	r8, r22
    227a:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	81 11       	cpse	r24, r1
    2280:	2b c0       	rjmp	.+86     	; 0x22d8 <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2282:	11 11       	cpse	r17, r1
    2284:	0c c0       	rjmp	.+24     	; 0x229e <prvProcessTimerOrBlockTask+0x50>
    2286:	8c 14       	cp	r8, r12
    2288:	9d 04       	cpc	r9, r13
    228a:	ae 04       	cpc	r10, r14
    228c:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    228e:	38 f0       	brcs	.+14     	; 0x229e <prvProcessTimerOrBlockTask+0x50>
    2290:	3f da       	rcall	.-2946   	; 0x1710 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2292:	a5 01       	movw	r20, r10
    2294:	94 01       	movw	r18, r8
    2296:	c7 01       	movw	r24, r14
    2298:	b6 01       	movw	r22, r12
    229a:	83 df       	rcall	.-250    	; 0x21a2 <prvProcessExpiredTimer>
    229c:	1e c0       	rjmp	.+60     	; 0x22da <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    229e:	11 23       	and	r17, r17
    22a0:	41 f0       	breq	.+16     	; 0x22b2 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    22a2:	e0 91 15 0d 	lds	r30, 0x0D15	; 0x800d15 <pxOverflowTimerList>
    22a6:	f0 91 16 0d 	lds	r31, 0x0D16	; 0x800d16 <pxOverflowTimerList+0x1>
    22aa:	80 81       	ld	r24, Z
    22ac:	11 e0       	ldi	r17, 0x01	; 1
    22ae:	81 11       	cpse	r24, r1
    22b0:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    22b2:	b7 01       	movw	r22, r14
    22b4:	a6 01       	movw	r20, r12
    22b6:	48 19       	sub	r20, r8
    22b8:	59 09       	sbc	r21, r9
    22ba:	6a 09       	sbc	r22, r10
    22bc:	7b 09       	sbc	r23, r11
    22be:	21 2f       	mov	r18, r17
    22c0:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <xTimerQueue>
    22c4:	90 91 14 0d 	lds	r25, 0x0D14	; 0x800d14 <xTimerQueue+0x1>
    22c8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    22cc:	21 da       	rcall	.-3006   	; 0x1710 <xTaskResumeAll>
    22ce:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    22d0:	04 c0       	rjmp	.+8      	; 0x22da <prvProcessTimerOrBlockTask+0x8c>
    22d2:	0e 94 33 04 	call	0x866	; 0x866 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <prvProcessTimerOrBlockTask+0x8c>
    22d8:	1b da       	rcall	.-3018   	; 0x1710 <xTaskResumeAll>
            }
        }
    }
    22da:	0f 90       	pop	r0
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	08 95       	ret

000022f4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	28 97       	sbiw	r28, 0x08	; 8
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2318:	82 c0       	rjmp	.+260    	; 0x241e <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	88 23       	and	r24, r24
    231e:	0c f4       	brge	.+2      	; 0x2322 <prvProcessReceivedCommands+0x2e>
    2320:	7e c0       	rjmp	.+252    	; 0x241e <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2322:	ae 80       	ldd	r10, Y+6	; 0x06
    2324:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2326:	d5 01       	movw	r26, r10
    2328:	1c 96       	adiw	r26, 0x0c	; 12
    232a:	8d 91       	ld	r24, X+
    232c:	9c 91       	ld	r25, X
    232e:	1d 97       	sbiw	r26, 0x0d	; 13
    2330:	89 2b       	or	r24, r25
    2332:	21 f0       	breq	.+8      	; 0x233c <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2334:	c5 01       	movw	r24, r10
    2336:	02 96       	adiw	r24, 0x02	; 2
    2338:	0e 94 b7 03 	call	0x76e	; 0x76e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    233c:	ce 01       	movw	r24, r28
    233e:	08 96       	adiw	r24, 0x08	; 8
    2340:	03 df       	rcall	.-506    	; 0x2148 <prvSampleTimeNow>
    2342:	8b 01       	movw	r16, r22
    2344:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	0e 2e       	mov	r0, r30
    234a:	00 0c       	add	r0, r0
    234c:	ff 0b       	sbc	r31, r31
    234e:	ea 30       	cpi	r30, 0x0A	; 10
    2350:	f1 05       	cpc	r31, r1
    2352:	08 f0       	brcs	.+2      	; 0x2356 <prvProcessReceivedCommands+0x62>
    2354:	64 c0       	rjmp	.+200    	; 0x241e <prvProcessReceivedCommands+0x12a>
    2356:	88 27       	eor	r24, r24
    2358:	ee 58       	subi	r30, 0x8E	; 142
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	8f 4f       	sbci	r24, 0xFF	; 255
    235e:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2362:	f5 01       	movw	r30, r10
    2364:	86 89       	ldd	r24, Z+22	; 0x16
    2366:	81 60       	ori	r24, 0x01	; 1
    2368:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    236a:	ca 80       	ldd	r12, Y+2	; 0x02
    236c:	db 80       	ldd	r13, Y+3	; 0x03
    236e:	ec 80       	ldd	r14, Y+4	; 0x04
    2370:	fd 80       	ldd	r15, Y+5	; 0x05
    2372:	46 85       	ldd	r20, Z+14	; 0x0e
    2374:	57 85       	ldd	r21, Z+15	; 0x0f
    2376:	60 89       	ldd	r22, Z+16	; 0x10
    2378:	71 89       	ldd	r23, Z+17	; 0x11
    237a:	4c 0d       	add	r20, r12
    237c:	5d 1d       	adc	r21, r13
    237e:	6e 1d       	adc	r22, r14
    2380:	7f 1d       	adc	r23, r15
    2382:	c5 01       	movw	r24, r10
    2384:	89 dd       	rcall	.-1262   	; 0x1e98 <prvInsertTimerInActiveList>
    2386:	88 23       	and	r24, r24
    2388:	09 f4       	brne	.+2      	; 0x238c <prvProcessReceivedCommands+0x98>
    238a:	49 c0       	rjmp	.+146    	; 0x241e <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    238c:	d5 01       	movw	r26, r10
    238e:	54 96       	adiw	r26, 0x14	; 20
    2390:	ed 91       	ld	r30, X+
    2392:	fc 91       	ld	r31, X
    2394:	55 97       	sbiw	r26, 0x15	; 21
    2396:	c5 01       	movw	r24, r10
    2398:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    239a:	f5 01       	movw	r30, r10
    239c:	86 89       	ldd	r24, Z+22	; 0x16
    239e:	82 ff       	sbrs	r24, 2
    23a0:	3e c0       	rjmp	.+124    	; 0x241e <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    23a2:	4a 81       	ldd	r20, Y+2	; 0x02
    23a4:	5b 81       	ldd	r21, Y+3	; 0x03
    23a6:	6c 81       	ldd	r22, Y+4	; 0x04
    23a8:	7d 81       	ldd	r23, Y+5	; 0x05
    23aa:	86 85       	ldd	r24, Z+14	; 0x0e
    23ac:	97 85       	ldd	r25, Z+15	; 0x0f
    23ae:	a0 89       	ldd	r26, Z+16	; 0x10
    23b0:	b1 89       	ldd	r27, Z+17	; 0x11
    23b2:	9a 01       	movw	r18, r20
    23b4:	ab 01       	movw	r20, r22
    23b6:	28 0f       	add	r18, r24
    23b8:	39 1f       	adc	r19, r25
    23ba:	4a 1f       	adc	r20, r26
    23bc:	5b 1f       	adc	r21, r27
    23be:	c1 2c       	mov	r12, r1
    23c0:	d1 2c       	mov	r13, r1
    23c2:	76 01       	movw	r14, r12
    23c4:	00 e0       	ldi	r16, 0x00	; 0
    23c6:	10 e0       	ldi	r17, 0x00	; 0
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	c5 01       	movw	r24, r10
    23cc:	f7 dd       	rcall	.-1042   	; 0x1fbc <xTimerGenericCommand>
    23ce:	27 c0       	rjmp	.+78     	; 0x241e <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    23d0:	d5 01       	movw	r26, r10
    23d2:	56 96       	adiw	r26, 0x16	; 22
    23d4:	8c 91       	ld	r24, X
    23d6:	56 97       	sbiw	r26, 0x16	; 22
    23d8:	8e 7f       	andi	r24, 0xFE	; 254
    23da:	56 96       	adiw	r26, 0x16	; 22
    23dc:	8c 93       	st	X, r24
                        break;
    23de:	1f c0       	rjmp	.+62     	; 0x241e <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    23e0:	f5 01       	movw	r30, r10
    23e2:	86 89       	ldd	r24, Z+22	; 0x16
    23e4:	81 60       	ori	r24, 0x01	; 1
    23e6:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    23e8:	4a 81       	ldd	r20, Y+2	; 0x02
    23ea:	5b 81       	ldd	r21, Y+3	; 0x03
    23ec:	6c 81       	ldd	r22, Y+4	; 0x04
    23ee:	7d 81       	ldd	r23, Y+5	; 0x05
    23f0:	46 87       	std	Z+14, r20	; 0x0e
    23f2:	57 87       	std	Z+15, r21	; 0x0f
    23f4:	60 8b       	std	Z+16, r22	; 0x10
    23f6:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    23f8:	40 0f       	add	r20, r16
    23fa:	51 1f       	adc	r21, r17
    23fc:	62 1f       	adc	r22, r18
    23fe:	73 1f       	adc	r23, r19
    2400:	68 01       	movw	r12, r16
    2402:	79 01       	movw	r14, r18
    2404:	c5 01       	movw	r24, r10
    2406:	48 dd       	rcall	.-1392   	; 0x1e98 <prvInsertTimerInActiveList>
                        break;
    2408:	0a c0       	rjmp	.+20     	; 0x241e <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    240a:	f5 01       	movw	r30, r10
    240c:	86 89       	ldd	r24, Z+22	; 0x16
    240e:	81 fd       	sbrc	r24, 1
    2410:	04 c0       	rjmp	.+8      	; 0x241a <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2412:	c5 01       	movw	r24, r10
    2414:	0e 94 29 03 	call	0x652	; 0x652 <vPortFree>
    2418:	02 c0       	rjmp	.+4      	; 0x241e <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    241a:	8e 7f       	andi	r24, 0xFE	; 254
    241c:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	a9 01       	movw	r20, r18
    2424:	be 01       	movw	r22, r28
    2426:	6f 5f       	subi	r22, 0xFF	; 255
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <xTimerQueue>
    242e:	90 91 14 0d 	lds	r25, 0x0D14	; 0x800d14 <xTimerQueue+0x1>
    2432:	0e 94 1b 07 	call	0xe36	; 0xe36 <xQueueReceive>
    2436:	81 11       	cpse	r24, r1
    2438:	70 cf       	rjmp	.-288    	; 0x231a <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    243a:	28 96       	adiw	r28, 0x08	; 8
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	08 95       	ret

0000245c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    245c:	08 95       	ret

0000245e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    245e:	84 b1       	in	r24, 0x04	; 4
    2460:	80 68       	ori	r24, 0x80	; 128
    2462:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2464:	85 b1       	in	r24, 0x05	; 5
    2466:	80 68       	ori	r24, 0x80	; 128
    2468:	85 b9       	out	0x05, r24	; 5
    246a:	08 95       	ret

0000246c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    246c:	83 b1       	in	r24, 0x03	; 3
    246e:	80 68       	ori	r24, 0x80	; 128
    2470:	83 b9       	out	0x03, r24	; 3
    2472:	08 95       	ret

00002474 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2474:	f4 df       	rcall	.-24     	; 0x245e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2476:	2f ef       	ldi	r18, 0xFF	; 255
    2478:	80 e7       	ldi	r24, 0x70	; 112
    247a:	92 e0       	ldi	r25, 0x02	; 2
    247c:	21 50       	subi	r18, 0x01	; 1
    247e:	80 40       	sbci	r24, 0x00	; 0
    2480:	90 40       	sbci	r25, 0x00	; 0
    2482:	e1 f7       	brne	.-8      	; 0x247c <vApplicationMallocFailedHook+0x8>
    2484:	00 c0       	rjmp	.+0      	; 0x2486 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2486:	00 00       	nop
    2488:	f1 df       	rcall	.-30     	; 0x246c <prvBlinkMainLed>
    248a:	f5 cf       	rjmp	.-22     	; 0x2476 <vApplicationMallocFailedHook+0x2>

0000248c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    248c:	e8 df       	rcall	.-48     	; 0x245e <prvSetMainLedOn>
    248e:	2f ef       	ldi	r18, 0xFF	; 255
    2490:	87 ea       	ldi	r24, 0xA7	; 167
    2492:	91 e6       	ldi	r25, 0x61	; 97
    2494:	21 50       	subi	r18, 0x01	; 1
    2496:	80 40       	sbci	r24, 0x00	; 0
    2498:	90 40       	sbci	r25, 0x00	; 0
    249a:	e1 f7       	brne	.-8      	; 0x2494 <vApplicationStackOverflowHook+0x8>
    249c:	00 c0       	rjmp	.+0      	; 0x249e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    249e:	00 00       	nop
    24a0:	e5 df       	rcall	.-54     	; 0x246c <prvBlinkMainLed>
    24a2:	f5 cf       	rjmp	.-22     	; 0x248e <vApplicationStackOverflowHook+0x2>

000024a4 <createTasksForSensors>:
	//xTaskCreate(tempRead, "Task 3 Temp", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
	createTasksForSensors();
}

void createTasksForSensors(){
	temperature_sensor = createTemp();
    24a4:	0e 94 ef 01 	call	0x3de	; 0x3de <createTemp>
    24a8:	90 93 4c 0d 	sts	0x0D4C, r25	; 0x800d4c <temperature_sensor+0x1>
    24ac:	80 93 4b 0d 	sts	0x0D4B, r24	; 0x800d4b <temperature_sensor>
    24b0:	08 95       	ret

000024b2 <create_tasks_and_semaphores>:
Temperature_t temperature_sensor;



void create_tasks_and_semaphores(void)
{
    24b2:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    24b4:	80 91 4d 0d 	lds	r24, 0x0D4D	; 0x800d4d <xTestSemaphore>
    24b8:	90 91 4e 0d 	lds	r25, 0x0D4E	; 0x800d4e <xTestSemaphore+0x1>
    24bc:	89 2b       	or	r24, r25
    24be:	89 f4       	brne	.+34     	; 0x24e2 <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <xQueueCreateMutex>
    24c6:	90 93 4e 0d 	sts	0x0D4E, r25	; 0x800d4e <xTestSemaphore+0x1>
    24ca:	80 93 4d 0d 	sts	0x0D4D, r24	; 0x800d4d <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	41 f0       	breq	.+16     	; 0x24e2 <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    24d2:	00 e0       	ldi	r16, 0x00	; 0
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	a9 01       	movw	r20, r18
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	0e 94 38 06 	call	0xc70	; 0xc70 <xQueueGenericSend>
		}
	}
	
	//temperature task
	//xTaskCreate(tempRead, "Task 3 Temp", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
	createTasksForSensors();
    24e2:	e0 df       	rcall	.-64     	; 0x24a4 <createTasksForSensors>
}
    24e4:	0f 91       	pop	r16
    24e6:	08 95       	ret

000024e8 <initializeSystem>:
	temperature_sensor = createTemp();
}

void initializeSystem(){
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	a4 d4       	rcall	.+2376   	; 0x2e34 <stdio_initialise>
	// Method for tasks and semaphore
	create_tasks_and_semaphores();
    24ec:	e2 cf       	rjmp	.-60     	; 0x24b2 <create_tasks_and_semaphores>
    24ee:	08 95       	ret

000024f0 <main>:
    24f0:	fb df       	rcall	.-10     	; 0x24e8 <initializeSystem>
}

int main(void){
	initializeSystem();
	vTaskStartScheduler();
    24f2:	0e 94 12 0a 	call	0x1424	; 0x1424 <vTaskStartScheduler>
    24f6:	ff cf       	rjmp	.-2      	; 0x24f6 <main+0x6>

000024f8 <__subsf3>:
    24f8:	50 58       	subi	r21, 0x80	; 128

000024fa <__addsf3>:
    24fa:	bb 27       	eor	r27, r27
    24fc:	aa 27       	eor	r26, r26
    24fe:	0e d0       	rcall	.+28     	; 0x251c <__addsf3x>
    2500:	77 c0       	rjmp	.+238    	; 0x25f0 <__fp_round>
    2502:	68 d0       	rcall	.+208    	; 0x25d4 <__fp_pscA>
    2504:	30 f0       	brcs	.+12     	; 0x2512 <__addsf3+0x18>
    2506:	6d d0       	rcall	.+218    	; 0x25e2 <__fp_pscB>
    2508:	20 f0       	brcs	.+8      	; 0x2512 <__addsf3+0x18>
    250a:	31 f4       	brne	.+12     	; 0x2518 <__addsf3+0x1e>
    250c:	9f 3f       	cpi	r25, 0xFF	; 255
    250e:	11 f4       	brne	.+4      	; 0x2514 <__addsf3+0x1a>
    2510:	1e f4       	brtc	.+6      	; 0x2518 <__addsf3+0x1e>
    2512:	5d c0       	rjmp	.+186    	; 0x25ce <__fp_nan>
    2514:	0e f4       	brtc	.+2      	; 0x2518 <__addsf3+0x1e>
    2516:	e0 95       	com	r30
    2518:	e7 fb       	bst	r30, 7
    251a:	53 c0       	rjmp	.+166    	; 0x25c2 <__fp_inf>

0000251c <__addsf3x>:
    251c:	e9 2f       	mov	r30, r25
    251e:	79 d0       	rcall	.+242    	; 0x2612 <__fp_split3>
    2520:	80 f3       	brcs	.-32     	; 0x2502 <__addsf3+0x8>
    2522:	ba 17       	cp	r27, r26
    2524:	62 07       	cpc	r22, r18
    2526:	73 07       	cpc	r23, r19
    2528:	84 07       	cpc	r24, r20
    252a:	95 07       	cpc	r25, r21
    252c:	18 f0       	brcs	.+6      	; 0x2534 <__addsf3x+0x18>
    252e:	71 f4       	brne	.+28     	; 0x254c <__addsf3x+0x30>
    2530:	9e f5       	brtc	.+102    	; 0x2598 <__addsf3x+0x7c>
    2532:	91 c0       	rjmp	.+290    	; 0x2656 <__fp_zero>
    2534:	0e f4       	brtc	.+2      	; 0x2538 <__addsf3x+0x1c>
    2536:	e0 95       	com	r30
    2538:	0b 2e       	mov	r0, r27
    253a:	ba 2f       	mov	r27, r26
    253c:	a0 2d       	mov	r26, r0
    253e:	0b 01       	movw	r0, r22
    2540:	b9 01       	movw	r22, r18
    2542:	90 01       	movw	r18, r0
    2544:	0c 01       	movw	r0, r24
    2546:	ca 01       	movw	r24, r20
    2548:	a0 01       	movw	r20, r0
    254a:	11 24       	eor	r1, r1
    254c:	ff 27       	eor	r31, r31
    254e:	59 1b       	sub	r21, r25
    2550:	99 f0       	breq	.+38     	; 0x2578 <__addsf3x+0x5c>
    2552:	59 3f       	cpi	r21, 0xF9	; 249
    2554:	50 f4       	brcc	.+20     	; 0x256a <__addsf3x+0x4e>
    2556:	50 3e       	cpi	r21, 0xE0	; 224
    2558:	68 f1       	brcs	.+90     	; 0x25b4 <__addsf3x+0x98>
    255a:	1a 16       	cp	r1, r26
    255c:	f0 40       	sbci	r31, 0x00	; 0
    255e:	a2 2f       	mov	r26, r18
    2560:	23 2f       	mov	r18, r19
    2562:	34 2f       	mov	r19, r20
    2564:	44 27       	eor	r20, r20
    2566:	58 5f       	subi	r21, 0xF8	; 248
    2568:	f3 cf       	rjmp	.-26     	; 0x2550 <__addsf3x+0x34>
    256a:	46 95       	lsr	r20
    256c:	37 95       	ror	r19
    256e:	27 95       	ror	r18
    2570:	a7 95       	ror	r26
    2572:	f0 40       	sbci	r31, 0x00	; 0
    2574:	53 95       	inc	r21
    2576:	c9 f7       	brne	.-14     	; 0x256a <__addsf3x+0x4e>
    2578:	7e f4       	brtc	.+30     	; 0x2598 <__addsf3x+0x7c>
    257a:	1f 16       	cp	r1, r31
    257c:	ba 0b       	sbc	r27, r26
    257e:	62 0b       	sbc	r22, r18
    2580:	73 0b       	sbc	r23, r19
    2582:	84 0b       	sbc	r24, r20
    2584:	ba f0       	brmi	.+46     	; 0x25b4 <__addsf3x+0x98>
    2586:	91 50       	subi	r25, 0x01	; 1
    2588:	a1 f0       	breq	.+40     	; 0x25b2 <__addsf3x+0x96>
    258a:	ff 0f       	add	r31, r31
    258c:	bb 1f       	adc	r27, r27
    258e:	66 1f       	adc	r22, r22
    2590:	77 1f       	adc	r23, r23
    2592:	88 1f       	adc	r24, r24
    2594:	c2 f7       	brpl	.-16     	; 0x2586 <__addsf3x+0x6a>
    2596:	0e c0       	rjmp	.+28     	; 0x25b4 <__addsf3x+0x98>
    2598:	ba 0f       	add	r27, r26
    259a:	62 1f       	adc	r22, r18
    259c:	73 1f       	adc	r23, r19
    259e:	84 1f       	adc	r24, r20
    25a0:	48 f4       	brcc	.+18     	; 0x25b4 <__addsf3x+0x98>
    25a2:	87 95       	ror	r24
    25a4:	77 95       	ror	r23
    25a6:	67 95       	ror	r22
    25a8:	b7 95       	ror	r27
    25aa:	f7 95       	ror	r31
    25ac:	9e 3f       	cpi	r25, 0xFE	; 254
    25ae:	08 f0       	brcs	.+2      	; 0x25b2 <__addsf3x+0x96>
    25b0:	b3 cf       	rjmp	.-154    	; 0x2518 <__addsf3+0x1e>
    25b2:	93 95       	inc	r25
    25b4:	88 0f       	add	r24, r24
    25b6:	08 f0       	brcs	.+2      	; 0x25ba <__addsf3x+0x9e>
    25b8:	99 27       	eor	r25, r25
    25ba:	ee 0f       	add	r30, r30
    25bc:	97 95       	ror	r25
    25be:	87 95       	ror	r24
    25c0:	08 95       	ret

000025c2 <__fp_inf>:
    25c2:	97 f9       	bld	r25, 7
    25c4:	9f 67       	ori	r25, 0x7F	; 127
    25c6:	80 e8       	ldi	r24, 0x80	; 128
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	08 95       	ret

000025ce <__fp_nan>:
    25ce:	9f ef       	ldi	r25, 0xFF	; 255
    25d0:	80 ec       	ldi	r24, 0xC0	; 192
    25d2:	08 95       	ret

000025d4 <__fp_pscA>:
    25d4:	00 24       	eor	r0, r0
    25d6:	0a 94       	dec	r0
    25d8:	16 16       	cp	r1, r22
    25da:	17 06       	cpc	r1, r23
    25dc:	18 06       	cpc	r1, r24
    25de:	09 06       	cpc	r0, r25
    25e0:	08 95       	ret

000025e2 <__fp_pscB>:
    25e2:	00 24       	eor	r0, r0
    25e4:	0a 94       	dec	r0
    25e6:	12 16       	cp	r1, r18
    25e8:	13 06       	cpc	r1, r19
    25ea:	14 06       	cpc	r1, r20
    25ec:	05 06       	cpc	r0, r21
    25ee:	08 95       	ret

000025f0 <__fp_round>:
    25f0:	09 2e       	mov	r0, r25
    25f2:	03 94       	inc	r0
    25f4:	00 0c       	add	r0, r0
    25f6:	11 f4       	brne	.+4      	; 0x25fc <__fp_round+0xc>
    25f8:	88 23       	and	r24, r24
    25fa:	52 f0       	brmi	.+20     	; 0x2610 <__fp_round+0x20>
    25fc:	bb 0f       	add	r27, r27
    25fe:	40 f4       	brcc	.+16     	; 0x2610 <__fp_round+0x20>
    2600:	bf 2b       	or	r27, r31
    2602:	11 f4       	brne	.+4      	; 0x2608 <__fp_round+0x18>
    2604:	60 ff       	sbrs	r22, 0
    2606:	04 c0       	rjmp	.+8      	; 0x2610 <__fp_round+0x20>
    2608:	6f 5f       	subi	r22, 0xFF	; 255
    260a:	7f 4f       	sbci	r23, 0xFF	; 255
    260c:	8f 4f       	sbci	r24, 0xFF	; 255
    260e:	9f 4f       	sbci	r25, 0xFF	; 255
    2610:	08 95       	ret

00002612 <__fp_split3>:
    2612:	57 fd       	sbrc	r21, 7
    2614:	90 58       	subi	r25, 0x80	; 128
    2616:	44 0f       	add	r20, r20
    2618:	55 1f       	adc	r21, r21
    261a:	59 f0       	breq	.+22     	; 0x2632 <__fp_splitA+0x10>
    261c:	5f 3f       	cpi	r21, 0xFF	; 255
    261e:	71 f0       	breq	.+28     	; 0x263c <__fp_splitA+0x1a>
    2620:	47 95       	ror	r20

00002622 <__fp_splitA>:
    2622:	88 0f       	add	r24, r24
    2624:	97 fb       	bst	r25, 7
    2626:	99 1f       	adc	r25, r25
    2628:	61 f0       	breq	.+24     	; 0x2642 <__fp_splitA+0x20>
    262a:	9f 3f       	cpi	r25, 0xFF	; 255
    262c:	79 f0       	breq	.+30     	; 0x264c <__fp_splitA+0x2a>
    262e:	87 95       	ror	r24
    2630:	08 95       	ret
    2632:	12 16       	cp	r1, r18
    2634:	13 06       	cpc	r1, r19
    2636:	14 06       	cpc	r1, r20
    2638:	55 1f       	adc	r21, r21
    263a:	f2 cf       	rjmp	.-28     	; 0x2620 <__fp_split3+0xe>
    263c:	46 95       	lsr	r20
    263e:	f1 df       	rcall	.-30     	; 0x2622 <__fp_splitA>
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <__fp_splitA+0x30>
    2642:	16 16       	cp	r1, r22
    2644:	17 06       	cpc	r1, r23
    2646:	18 06       	cpc	r1, r24
    2648:	99 1f       	adc	r25, r25
    264a:	f1 cf       	rjmp	.-30     	; 0x262e <__fp_splitA+0xc>
    264c:	86 95       	lsr	r24
    264e:	71 05       	cpc	r23, r1
    2650:	61 05       	cpc	r22, r1
    2652:	08 94       	sec
    2654:	08 95       	ret

00002656 <__fp_zero>:
    2656:	e8 94       	clt

00002658 <__fp_szero>:
    2658:	bb 27       	eor	r27, r27
    265a:	66 27       	eor	r22, r22
    265c:	77 27       	eor	r23, r23
    265e:	cb 01       	movw	r24, r22
    2660:	97 f9       	bld	r25, 7
    2662:	08 95       	ret

00002664 <_hihTwiCallback>:
    2664:	65 30       	cpi	r22, 0x05	; 5
    2666:	f1 f4       	brne	.+60     	; 0x26a4 <_hihTwiCallback+0x40>
    2668:	fa 01       	movw	r30, r20
    266a:	80 81       	ld	r24, Z
    266c:	8f 73       	andi	r24, 0x3F	; 63
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	98 2f       	mov	r25, r24
    2672:	88 27       	eor	r24, r24
    2674:	21 81       	ldd	r18, Z+1	; 0x01
    2676:	82 2b       	or	r24, r18
    2678:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    267c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	f0 e4       	ldi	r31, 0x40	; 64
    2684:	8f 9f       	mul	r24, r31
    2686:	c0 01       	movw	r24, r0
    2688:	11 24       	eor	r1, r1
    268a:	fa 01       	movw	r30, r20
    268c:	23 81       	ldd	r18, Z+3	; 0x03
    268e:	26 95       	lsr	r18
    2690:	26 95       	lsr	r18
    2692:	82 2b       	or	r24, r18
    2694:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2698:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	80 93 2f 0d 	sts	0x0D2F, r24	; 0x800d2f <_measuringIsReady>
    26a2:	08 95       	ret
    26a4:	64 30       	cpi	r22, 0x04	; 4
    26a6:	51 f0       	breq	.+20     	; 0x26bc <_hihTwiCallback+0x58>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e4       	ldi	r25, 0x40	; 64
    26ac:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    26b0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    26b4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    26b8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    26bc:	08 95       	ret

000026be <hih8120_initialise>:
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	02 e3       	ldi	r16, 0x32	; 50
    26c4:	13 e1       	ldi	r17, 0x13	; 19
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	34 e2       	ldi	r19, 0x24	; 36
    26ca:	44 ef       	ldi	r20, 0xF4	; 244
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	87 e2       	ldi	r24, 0x27	; 39
    26d2:	ea d3       	rcall	.+2004   	; 0x2ea8 <twiCreate>
    26d4:	90 93 31 0d 	sts	0x0D31, r25	; 0x800d31 <_hih8120Handler+0x1>
    26d8:	80 93 30 0d 	sts	0x0D30, r24	; 0x800d30 <_hih8120Handler>
    26dc:	21 e0       	ldi	r18, 0x01	; 1
    26de:	89 2b       	or	r24, r25
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <hih8120_initialise+0x26>
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	82 2f       	mov	r24, r18
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	08 95       	ret

000026ec <hih8120_wakeup>:
    26ec:	80 91 30 0d 	lds	r24, 0x0D30	; 0x800d30 <_hih8120Handler>
    26f0:	90 91 31 0d 	lds	r25, 0x0D31	; 0x800d31 <_hih8120Handler+0x1>
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	51 f0       	breq	.+20     	; 0x270c <hih8120_wakeup+0x20>
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	25 d4       	rcall	.+2122   	; 0x2f4a <twiTransmit>
    2700:	84 30       	cpi	r24, 0x04	; 4
    2702:	31 f4       	brne	.+12     	; 0x2710 <hih8120_wakeup+0x24>
    2704:	10 92 2f 0d 	sts	0x0D2F, r1	; 0x800d2f <_measuringIsReady>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	08 95       	ret
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	08 95       	ret
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	08 95       	ret

00002714 <hih8120_measure>:
    2714:	80 91 30 0d 	lds	r24, 0x0D30	; 0x800d30 <_hih8120Handler>
    2718:	90 91 31 0d 	lds	r25, 0x0D31	; 0x800d31 <_hih8120Handler+0x1>
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	31 f0       	breq	.+12     	; 0x272c <hih8120_measure+0x18>
    2720:	64 e0       	ldi	r22, 0x04	; 4
    2722:	5f d4       	rcall	.+2238   	; 0x2fe2 <twiReceive>
    2724:	85 30       	cpi	r24, 0x05	; 5
    2726:	21 f0       	breq	.+8      	; 0x2730 <hih8120_measure+0x1c>
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	08 95       	ret
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	08 95       	ret
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	08 95       	ret

00002734 <hih8120_getTemperature>:
    2734:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    2738:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__floatunsisf>
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	45 e2       	ldi	r20, 0x25	; 37
    274a:	53 e4       	ldi	r21, 0x43	; 67
    274c:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__mulsf3>
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	38 ef       	ldi	r19, 0xF8	; 248
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	56 e4       	ldi	r21, 0x46	; 70
    2758:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	52 e4       	ldi	r21, 0x42	; 66
    2764:	c9 ce       	rjmp	.-622    	; 0x24f8 <__subsf3>
    2766:	08 95       	ret

00002768 <serial_create>:
    2768:	2f 92       	push	r2
    276a:	3f 92       	push	r3
    276c:	4f 92       	push	r4
    276e:	5f 92       	push	r5
    2770:	6f 92       	push	r6
    2772:	7f 92       	push	r7
    2774:	8f 92       	push	r8
    2776:	9f 92       	push	r9
    2778:	af 92       	push	r10
    277a:	cf 92       	push	r12
    277c:	ef 92       	push	r14
    277e:	ff 92       	push	r15
    2780:	0f 93       	push	r16
    2782:	1f 93       	push	r17
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	f8 2e       	mov	r15, r24
    278e:	2a 01       	movw	r4, r20
    2790:	3b 01       	movw	r6, r22
    2792:	88 e0       	ldi	r24, 0x08	; 8
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <malloc>
    279a:	8c 01       	movw	r16, r24
    279c:	8f 2d       	mov	r24, r15
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	fc 01       	movw	r30, r24
    27a2:	ee 0f       	add	r30, r30
    27a4:	ff 1f       	adc	r31, r31
    27a6:	ee 5c       	subi	r30, 0xCE	; 206
    27a8:	f2 4f       	sbci	r31, 0xF2	; 242
    27aa:	11 83       	std	Z+1, r17	; 0x01
    27ac:	00 83       	st	Z, r16
    27ae:	01 15       	cp	r16, r1
    27b0:	11 05       	cpc	r17, r1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <serial_create+0x4e>
    27b4:	6c c0       	rjmp	.+216    	; 0x288e <serial_create+0x126>
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	fc 01       	movw	r30, r24
    27bc:	e5 5f       	subi	r30, 0xF5	; 245
    27be:	fd 4f       	sbci	r31, 0xFD	; 253
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	d8 01       	movw	r26, r16
    27c6:	8d 93       	st	X+, r24
    27c8:	9c 93       	st	X, r25
    27ca:	8c 2d       	mov	r24, r12
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <malloc>
    27da:	1c 01       	movw	r2, r24
    27dc:	86 e0       	ldi	r24, 0x06	; 6
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <malloc>
    27e4:	7c 01       	movw	r14, r24
    27e6:	4c 2d       	mov	r20, r12
    27e8:	b1 01       	movw	r22, r2
    27ea:	eb d4       	rcall	.+2518   	; 0x31c2 <fifo_init>
    27ec:	f8 01       	movw	r30, r16
    27ee:	f5 82       	std	Z+5, r15	; 0x05
    27f0:	e4 82       	std	Z+4, r14	; 0x04
    27f2:	8a 2d       	mov	r24, r10
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <malloc>
    2802:	1c 01       	movw	r2, r24
    2804:	86 e0       	ldi	r24, 0x06	; 6
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <malloc>
    280c:	7c 01       	movw	r14, r24
    280e:	4a 2d       	mov	r20, r10
    2810:	b1 01       	movw	r22, r2
    2812:	d7 d4       	rcall	.+2478   	; 0x31c2 <fifo_init>
    2814:	d8 01       	movw	r26, r16
    2816:	13 96       	adiw	r26, 0x03	; 3
    2818:	fc 92       	st	X, r15
    281a:	ee 92       	st	-X, r14
    281c:	12 97       	sbiw	r26, 0x02	; 2
    281e:	17 96       	adiw	r26, 0x07	; 7
    2820:	9c 92       	st	X, r9
    2822:	8e 92       	st	-X, r8
    2824:	16 97       	sbiw	r26, 0x06	; 6
    2826:	ff b6       	in	r15, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	ed 91       	ld	r30, X+
    282c:	fc 91       	ld	r31, X
    282e:	11 97       	sbiw	r26, 0x01	; 1
    2830:	36 97       	sbiw	r30, 0x06	; 6
    2832:	80 81       	ld	r24, Z
    2834:	82 60       	ori	r24, 0x02	; 2
    2836:	80 83       	st	Z, r24
    2838:	8d 90       	ld	r8, X+
    283a:	9c 90       	ld	r9, X
    283c:	c3 01       	movw	r24, r6
    283e:	b2 01       	movw	r22, r4
    2840:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__floatunsisf>
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__mulsf3>
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	74 e2       	ldi	r23, 0x24	; 36
    2858:	84 e7       	ldi	r24, 0x74	; 116
    285a:	9b e4       	ldi	r25, 0x4B	; 75
    285c:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	47 de       	rcall	.-882    	; 0x24f8 <__subsf3>
    286a:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__fixunssfsi>
    286e:	f4 01       	movw	r30, r8
    2870:	32 97       	sbiw	r30, 0x02	; 2
    2872:	60 83       	st	Z, r22
    2874:	d8 01       	movw	r26, r16
    2876:	ed 91       	ld	r30, X+
    2878:	fc 91       	ld	r31, X
    287a:	11 97       	sbiw	r26, 0x01	; 1
    287c:	35 97       	sbiw	r30, 0x05	; 5
    287e:	88 e9       	ldi	r24, 0x98	; 152
    2880:	80 83       	st	Z, r24
    2882:	ed 91       	ld	r30, X+
    2884:	fc 91       	ld	r31, X
    2886:	34 97       	sbiw	r30, 0x04	; 4
    2888:	86 e0       	ldi	r24, 0x06	; 6
    288a:	80 83       	st	Z, r24
    288c:	ff be       	out	0x3f, r15	; 63
    288e:	c8 01       	movw	r24, r16
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	ff 90       	pop	r15
    289a:	ef 90       	pop	r14
    289c:	cf 90       	pop	r12
    289e:	af 90       	pop	r10
    28a0:	9f 90       	pop	r9
    28a2:	8f 90       	pop	r8
    28a4:	7f 90       	pop	r7
    28a6:	6f 90       	pop	r6
    28a8:	5f 90       	pop	r5
    28aa:	4f 90       	pop	r4
    28ac:	3f 90       	pop	r3
    28ae:	2f 90       	pop	r2
    28b0:	08 95       	ret

000028b2 <serial_sendByte>:
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	dc 01       	movw	r26, r24
    28b8:	89 2b       	or	r24, r25
    28ba:	01 f1       	breq	.+64     	; 0x28fc <serial_sendByte+0x4a>
    28bc:	12 96       	adiw	r26, 0x02	; 2
    28be:	ed 91       	ld	r30, X+
    28c0:	fc 91       	ld	r31, X
    28c2:	13 97       	sbiw	r26, 0x03	; 3
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	25 81       	ldd	r18, Z+5	; 0x05
    28ca:	98 1b       	sub	r25, r24
    28cc:	92 23       	and	r25, r18
    28ce:	84 81       	ldd	r24, Z+4	; 0x04
    28d0:	98 17       	cp	r25, r24
    28d2:	b1 f0       	breq	.+44     	; 0x2900 <serial_sendByte+0x4e>
    28d4:	83 81       	ldd	r24, Z+3	; 0x03
    28d6:	26 95       	lsr	r18
    28d8:	28 23       	and	r18, r24
    28da:	c0 81       	ld	r28, Z
    28dc:	d1 81       	ldd	r29, Z+1	; 0x01
    28de:	c2 0f       	add	r28, r18
    28e0:	d1 1d       	adc	r29, r1
    28e2:	68 83       	st	Y, r22
    28e4:	8f 5f       	subi	r24, 0xFF	; 255
    28e6:	95 81       	ldd	r25, Z+5	; 0x05
    28e8:	89 23       	and	r24, r25
    28ea:	83 83       	std	Z+3, r24	; 0x03
    28ec:	ed 91       	ld	r30, X+
    28ee:	fc 91       	ld	r31, X
    28f0:	35 97       	sbiw	r30, 0x05	; 5
    28f2:	80 81       	ld	r24, Z
    28f4:	80 62       	ori	r24, 0x20	; 32
    28f6:	80 83       	st	Z, r24
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	03 c0       	rjmp	.+6      	; 0x2902 <serial_sendByte+0x50>
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <serial_sendByte+0x50>
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	08 95       	ret

00002908 <serial_getByte>:
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	d1 f0       	breq	.+52     	; 0x2940 <serial_getByte+0x38>
    290c:	dc 01       	movw	r26, r24
    290e:	14 96       	adiw	r26, 0x04	; 4
    2910:	ed 91       	ld	r30, X+
    2912:	fc 91       	ld	r31, X
    2914:	15 97       	sbiw	r26, 0x05	; 5
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	98 17       	cp	r25, r24
    291c:	99 f0       	breq	.+38     	; 0x2944 <serial_getByte+0x3c>
    291e:	92 81       	ldd	r25, Z+2	; 0x02
    2920:	85 81       	ldd	r24, Z+5	; 0x05
    2922:	86 95       	lsr	r24
    2924:	89 23       	and	r24, r25
    2926:	a0 81       	ld	r26, Z
    2928:	b1 81       	ldd	r27, Z+1	; 0x01
    292a:	a8 0f       	add	r26, r24
    292c:	b1 1d       	adc	r27, r1
    292e:	8c 91       	ld	r24, X
    2930:	db 01       	movw	r26, r22
    2932:	8c 93       	st	X, r24
    2934:	9f 5f       	subi	r25, 0xFF	; 255
    2936:	85 81       	ldd	r24, Z+5	; 0x05
    2938:	98 23       	and	r25, r24
    293a:	92 83       	std	Z+2, r25	; 0x02
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	08 95       	ret
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	08 95       	ret

00002948 <__vector_25>:
    2948:	1f 92       	push	r1
    294a:	0f 92       	push	r0
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	0f 92       	push	r0
    2950:	11 24       	eor	r1, r1
    2952:	0b b6       	in	r0, 0x3b	; 59
    2954:	0f 92       	push	r0
    2956:	2f 93       	push	r18
    2958:	3f 93       	push	r19
    295a:	4f 93       	push	r20
    295c:	5f 93       	push	r21
    295e:	6f 93       	push	r22
    2960:	7f 93       	push	r23
    2962:	8f 93       	push	r24
    2964:	9f 93       	push	r25
    2966:	af 93       	push	r26
    2968:	bf 93       	push	r27
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	ef 93       	push	r30
    2970:	ff 93       	push	r31
    2972:	a0 91 32 0d 	lds	r26, 0x0D32	; 0x800d32 <_ser_handle>
    2976:	b0 91 33 0d 	lds	r27, 0x0D33	; 0x800d33 <_ser_handle+0x1>
    297a:	10 97       	sbiw	r26, 0x00	; 0
    297c:	11 f1       	breq	.+68     	; 0x29c2 <__vector_25+0x7a>
    297e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2982:	14 96       	adiw	r26, 0x04	; 4
    2984:	ed 91       	ld	r30, X+
    2986:	fc 91       	ld	r31, X
    2988:	15 97       	sbiw	r26, 0x05	; 5
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	25 81       	ldd	r18, Z+5	; 0x05
    2990:	98 1b       	sub	r25, r24
    2992:	92 23       	and	r25, r18
    2994:	84 81       	ldd	r24, Z+4	; 0x04
    2996:	98 17       	cp	r25, r24
    2998:	61 f0       	breq	.+24     	; 0x29b2 <__vector_25+0x6a>
    299a:	83 81       	ldd	r24, Z+3	; 0x03
    299c:	26 95       	lsr	r18
    299e:	28 23       	and	r18, r24
    29a0:	c0 81       	ld	r28, Z
    29a2:	d1 81       	ldd	r29, Z+1	; 0x01
    29a4:	c2 0f       	add	r28, r18
    29a6:	d1 1d       	adc	r29, r1
    29a8:	68 83       	st	Y, r22
    29aa:	8f 5f       	subi	r24, 0xFF	; 255
    29ac:	95 81       	ldd	r25, Z+5	; 0x05
    29ae:	89 23       	and	r24, r25
    29b0:	83 83       	std	Z+3, r24	; 0x03
    29b2:	16 96       	adiw	r26, 0x06	; 6
    29b4:	ed 91       	ld	r30, X+
    29b6:	fc 91       	ld	r31, X
    29b8:	17 97       	sbiw	r26, 0x07	; 7
    29ba:	30 97       	sbiw	r30, 0x00	; 0
    29bc:	11 f0       	breq	.+4      	; 0x29c2 <__vector_25+0x7a>
    29be:	cd 01       	movw	r24, r26
    29c0:	19 95       	eicall
    29c2:	ff 91       	pop	r31
    29c4:	ef 91       	pop	r30
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	bf 91       	pop	r27
    29cc:	af 91       	pop	r26
    29ce:	9f 91       	pop	r25
    29d0:	8f 91       	pop	r24
    29d2:	7f 91       	pop	r23
    29d4:	6f 91       	pop	r22
    29d6:	5f 91       	pop	r21
    29d8:	4f 91       	pop	r20
    29da:	3f 91       	pop	r19
    29dc:	2f 91       	pop	r18
    29de:	0f 90       	pop	r0
    29e0:	0b be       	out	0x3b, r0	; 59
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	0f 90       	pop	r0
    29e8:	1f 90       	pop	r1
    29ea:	18 95       	reti

000029ec <__vector_26>:
    29ec:	1f 92       	push	r1
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	0b b6       	in	r0, 0x3b	; 59
    29f8:	0f 92       	push	r0
    29fa:	2f 93       	push	r18
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	ef 93       	push	r30
    2a06:	ff 93       	push	r31
    2a08:	e0 91 32 0d 	lds	r30, 0x0D32	; 0x800d32 <_ser_handle>
    2a0c:	f0 91 33 0d 	lds	r31, 0x0D33	; 0x800d33 <_ser_handle+0x1>
    2a10:	30 97       	sbiw	r30, 0x00	; 0
    2a12:	b9 f0       	breq	.+46     	; 0x2a42 <__vector_26+0x56>
    2a14:	02 80       	ldd	r0, Z+2	; 0x02
    2a16:	f3 81       	ldd	r31, Z+3	; 0x03
    2a18:	e0 2d       	mov	r30, r0
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	82 81       	ldd	r24, Z+2	; 0x02
    2a1e:	98 17       	cp	r25, r24
    2a20:	b1 f0       	breq	.+44     	; 0x2a4e <__vector_26+0x62>
    2a22:	92 81       	ldd	r25, Z+2	; 0x02
    2a24:	85 81       	ldd	r24, Z+5	; 0x05
    2a26:	28 2f       	mov	r18, r24
    2a28:	26 95       	lsr	r18
    2a2a:	29 23       	and	r18, r25
    2a2c:	a0 81       	ld	r26, Z
    2a2e:	b1 81       	ldd	r27, Z+1	; 0x01
    2a30:	a2 0f       	add	r26, r18
    2a32:	b1 1d       	adc	r27, r1
    2a34:	2c 91       	ld	r18, X
    2a36:	9f 5f       	subi	r25, 0xFF	; 255
    2a38:	89 23       	and	r24, r25
    2a3a:	82 83       	std	Z+2, r24	; 0x02
    2a3c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2a40:	0b c0       	rjmp	.+22     	; 0x2a58 <__vector_26+0x6c>
    2a42:	e1 ec       	ldi	r30, 0xC1	; 193
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8f 7d       	andi	r24, 0xDF	; 223
    2a4a:	80 83       	st	Z, r24
    2a4c:	05 c0       	rjmp	.+10     	; 0x2a58 <__vector_26+0x6c>
    2a4e:	e1 ec       	ldi	r30, 0xC1	; 193
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	8f 7d       	andi	r24, 0xDF	; 223
    2a56:	80 83       	st	Z, r24
    2a58:	ff 91       	pop	r31
    2a5a:	ef 91       	pop	r30
    2a5c:	bf 91       	pop	r27
    2a5e:	af 91       	pop	r26
    2a60:	9f 91       	pop	r25
    2a62:	8f 91       	pop	r24
    2a64:	2f 91       	pop	r18
    2a66:	0f 90       	pop	r0
    2a68:	0b be       	out	0x3b, r0	; 59
    2a6a:	0f 90       	pop	r0
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	0f 90       	pop	r0
    2a70:	1f 90       	pop	r1
    2a72:	18 95       	reti

00002a74 <__vector_36>:
    2a74:	1f 92       	push	r1
    2a76:	0f 92       	push	r0
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	0f 92       	push	r0
    2a7c:	11 24       	eor	r1, r1
    2a7e:	0b b6       	in	r0, 0x3b	; 59
    2a80:	0f 92       	push	r0
    2a82:	2f 93       	push	r18
    2a84:	3f 93       	push	r19
    2a86:	4f 93       	push	r20
    2a88:	5f 93       	push	r21
    2a8a:	6f 93       	push	r22
    2a8c:	7f 93       	push	r23
    2a8e:	8f 93       	push	r24
    2a90:	9f 93       	push	r25
    2a92:	af 93       	push	r26
    2a94:	bf 93       	push	r27
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	ef 93       	push	r30
    2a9c:	ff 93       	push	r31
    2a9e:	a0 91 34 0d 	lds	r26, 0x0D34	; 0x800d34 <_ser_handle+0x2>
    2aa2:	b0 91 35 0d 	lds	r27, 0x0D35	; 0x800d35 <_ser_handle+0x3>
    2aa6:	10 97       	sbiw	r26, 0x00	; 0
    2aa8:	11 f1       	breq	.+68     	; 0x2aee <__vector_36+0x7a>
    2aaa:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2aae:	14 96       	adiw	r26, 0x04	; 4
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fc 91       	ld	r31, X
    2ab4:	15 97       	sbiw	r26, 0x05	; 5
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	25 81       	ldd	r18, Z+5	; 0x05
    2abc:	98 1b       	sub	r25, r24
    2abe:	92 23       	and	r25, r18
    2ac0:	84 81       	ldd	r24, Z+4	; 0x04
    2ac2:	98 17       	cp	r25, r24
    2ac4:	61 f0       	breq	.+24     	; 0x2ade <__vector_36+0x6a>
    2ac6:	83 81       	ldd	r24, Z+3	; 0x03
    2ac8:	26 95       	lsr	r18
    2aca:	28 23       	and	r18, r24
    2acc:	c0 81       	ld	r28, Z
    2ace:	d1 81       	ldd	r29, Z+1	; 0x01
    2ad0:	c2 0f       	add	r28, r18
    2ad2:	d1 1d       	adc	r29, r1
    2ad4:	68 83       	st	Y, r22
    2ad6:	8f 5f       	subi	r24, 0xFF	; 255
    2ad8:	95 81       	ldd	r25, Z+5	; 0x05
    2ada:	89 23       	and	r24, r25
    2adc:	83 83       	std	Z+3, r24	; 0x03
    2ade:	16 96       	adiw	r26, 0x06	; 6
    2ae0:	ed 91       	ld	r30, X+
    2ae2:	fc 91       	ld	r31, X
    2ae4:	17 97       	sbiw	r26, 0x07	; 7
    2ae6:	30 97       	sbiw	r30, 0x00	; 0
    2ae8:	11 f0       	breq	.+4      	; 0x2aee <__vector_36+0x7a>
    2aea:	cd 01       	movw	r24, r26
    2aec:	19 95       	eicall
    2aee:	ff 91       	pop	r31
    2af0:	ef 91       	pop	r30
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	bf 91       	pop	r27
    2af8:	af 91       	pop	r26
    2afa:	9f 91       	pop	r25
    2afc:	8f 91       	pop	r24
    2afe:	7f 91       	pop	r23
    2b00:	6f 91       	pop	r22
    2b02:	5f 91       	pop	r21
    2b04:	4f 91       	pop	r20
    2b06:	3f 91       	pop	r19
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0b be       	out	0x3b, r0	; 59
    2b0e:	0f 90       	pop	r0
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	0f 90       	pop	r0
    2b14:	1f 90       	pop	r1
    2b16:	18 95       	reti

00002b18 <__vector_37>:
    2b18:	1f 92       	push	r1
    2b1a:	0f 92       	push	r0
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	0f 92       	push	r0
    2b20:	11 24       	eor	r1, r1
    2b22:	0b b6       	in	r0, 0x3b	; 59
    2b24:	0f 92       	push	r0
    2b26:	2f 93       	push	r18
    2b28:	8f 93       	push	r24
    2b2a:	9f 93       	push	r25
    2b2c:	af 93       	push	r26
    2b2e:	bf 93       	push	r27
    2b30:	ef 93       	push	r30
    2b32:	ff 93       	push	r31
    2b34:	e0 91 34 0d 	lds	r30, 0x0D34	; 0x800d34 <_ser_handle+0x2>
    2b38:	f0 91 35 0d 	lds	r31, 0x0D35	; 0x800d35 <_ser_handle+0x3>
    2b3c:	30 97       	sbiw	r30, 0x00	; 0
    2b3e:	b9 f0       	breq	.+46     	; 0x2b6e <__vector_37+0x56>
    2b40:	02 80       	ldd	r0, Z+2	; 0x02
    2b42:	f3 81       	ldd	r31, Z+3	; 0x03
    2b44:	e0 2d       	mov	r30, r0
    2b46:	93 81       	ldd	r25, Z+3	; 0x03
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	98 17       	cp	r25, r24
    2b4c:	b1 f0       	breq	.+44     	; 0x2b7a <__vector_37+0x62>
    2b4e:	92 81       	ldd	r25, Z+2	; 0x02
    2b50:	85 81       	ldd	r24, Z+5	; 0x05
    2b52:	28 2f       	mov	r18, r24
    2b54:	26 95       	lsr	r18
    2b56:	29 23       	and	r18, r25
    2b58:	a0 81       	ld	r26, Z
    2b5a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b5c:	a2 0f       	add	r26, r18
    2b5e:	b1 1d       	adc	r27, r1
    2b60:	2c 91       	ld	r18, X
    2b62:	9f 5f       	subi	r25, 0xFF	; 255
    2b64:	89 23       	and	r24, r25
    2b66:	82 83       	std	Z+2, r24	; 0x02
    2b68:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2b6c:	0b c0       	rjmp	.+22     	; 0x2b84 <__vector_37+0x6c>
    2b6e:	e9 ec       	ldi	r30, 0xC9	; 201
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	8f 7d       	andi	r24, 0xDF	; 223
    2b76:	80 83       	st	Z, r24
    2b78:	05 c0       	rjmp	.+10     	; 0x2b84 <__vector_37+0x6c>
    2b7a:	e9 ec       	ldi	r30, 0xC9	; 201
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8f 7d       	andi	r24, 0xDF	; 223
    2b82:	80 83       	st	Z, r24
    2b84:	ff 91       	pop	r31
    2b86:	ef 91       	pop	r30
    2b88:	bf 91       	pop	r27
    2b8a:	af 91       	pop	r26
    2b8c:	9f 91       	pop	r25
    2b8e:	8f 91       	pop	r24
    2b90:	2f 91       	pop	r18
    2b92:	0f 90       	pop	r0
    2b94:	0b be       	out	0x3b, r0	; 59
    2b96:	0f 90       	pop	r0
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	0f 90       	pop	r0
    2b9c:	1f 90       	pop	r1
    2b9e:	18 95       	reti

00002ba0 <__vector_51>:
    2ba0:	1f 92       	push	r1
    2ba2:	0f 92       	push	r0
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	0f 92       	push	r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	0b b6       	in	r0, 0x3b	; 59
    2bac:	0f 92       	push	r0
    2bae:	2f 93       	push	r18
    2bb0:	3f 93       	push	r19
    2bb2:	4f 93       	push	r20
    2bb4:	5f 93       	push	r21
    2bb6:	6f 93       	push	r22
    2bb8:	7f 93       	push	r23
    2bba:	8f 93       	push	r24
    2bbc:	9f 93       	push	r25
    2bbe:	af 93       	push	r26
    2bc0:	bf 93       	push	r27
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	ef 93       	push	r30
    2bc8:	ff 93       	push	r31
    2bca:	a0 91 36 0d 	lds	r26, 0x0D36	; 0x800d36 <_ser_handle+0x4>
    2bce:	b0 91 37 0d 	lds	r27, 0x0D37	; 0x800d37 <_ser_handle+0x5>
    2bd2:	10 97       	sbiw	r26, 0x00	; 0
    2bd4:	11 f1       	breq	.+68     	; 0x2c1a <__vector_51+0x7a>
    2bd6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2bda:	14 96       	adiw	r26, 0x04	; 4
    2bdc:	ed 91       	ld	r30, X+
    2bde:	fc 91       	ld	r31, X
    2be0:	15 97       	sbiw	r26, 0x05	; 5
    2be2:	93 81       	ldd	r25, Z+3	; 0x03
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	25 81       	ldd	r18, Z+5	; 0x05
    2be8:	98 1b       	sub	r25, r24
    2bea:	92 23       	and	r25, r18
    2bec:	84 81       	ldd	r24, Z+4	; 0x04
    2bee:	98 17       	cp	r25, r24
    2bf0:	61 f0       	breq	.+24     	; 0x2c0a <__vector_51+0x6a>
    2bf2:	83 81       	ldd	r24, Z+3	; 0x03
    2bf4:	26 95       	lsr	r18
    2bf6:	28 23       	and	r18, r24
    2bf8:	c0 81       	ld	r28, Z
    2bfa:	d1 81       	ldd	r29, Z+1	; 0x01
    2bfc:	c2 0f       	add	r28, r18
    2bfe:	d1 1d       	adc	r29, r1
    2c00:	68 83       	st	Y, r22
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	95 81       	ldd	r25, Z+5	; 0x05
    2c06:	89 23       	and	r24, r25
    2c08:	83 83       	std	Z+3, r24	; 0x03
    2c0a:	16 96       	adiw	r26, 0x06	; 6
    2c0c:	ed 91       	ld	r30, X+
    2c0e:	fc 91       	ld	r31, X
    2c10:	17 97       	sbiw	r26, 0x07	; 7
    2c12:	30 97       	sbiw	r30, 0x00	; 0
    2c14:	11 f0       	breq	.+4      	; 0x2c1a <__vector_51+0x7a>
    2c16:	cd 01       	movw	r24, r26
    2c18:	19 95       	eicall
    2c1a:	ff 91       	pop	r31
    2c1c:	ef 91       	pop	r30
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	bf 91       	pop	r27
    2c24:	af 91       	pop	r26
    2c26:	9f 91       	pop	r25
    2c28:	8f 91       	pop	r24
    2c2a:	7f 91       	pop	r23
    2c2c:	6f 91       	pop	r22
    2c2e:	5f 91       	pop	r21
    2c30:	4f 91       	pop	r20
    2c32:	3f 91       	pop	r19
    2c34:	2f 91       	pop	r18
    2c36:	0f 90       	pop	r0
    2c38:	0b be       	out	0x3b, r0	; 59
    2c3a:	0f 90       	pop	r0
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	0f 90       	pop	r0
    2c40:	1f 90       	pop	r1
    2c42:	18 95       	reti

00002c44 <__vector_52>:
    2c44:	1f 92       	push	r1
    2c46:	0f 92       	push	r0
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	0f 92       	push	r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	0b b6       	in	r0, 0x3b	; 59
    2c50:	0f 92       	push	r0
    2c52:	2f 93       	push	r18
    2c54:	8f 93       	push	r24
    2c56:	9f 93       	push	r25
    2c58:	af 93       	push	r26
    2c5a:	bf 93       	push	r27
    2c5c:	ef 93       	push	r30
    2c5e:	ff 93       	push	r31
    2c60:	e0 91 36 0d 	lds	r30, 0x0D36	; 0x800d36 <_ser_handle+0x4>
    2c64:	f0 91 37 0d 	lds	r31, 0x0D37	; 0x800d37 <_ser_handle+0x5>
    2c68:	30 97       	sbiw	r30, 0x00	; 0
    2c6a:	b9 f0       	breq	.+46     	; 0x2c9a <__vector_52+0x56>
    2c6c:	02 80       	ldd	r0, Z+2	; 0x02
    2c6e:	f3 81       	ldd	r31, Z+3	; 0x03
    2c70:	e0 2d       	mov	r30, r0
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	98 17       	cp	r25, r24
    2c78:	b1 f0       	breq	.+44     	; 0x2ca6 <__vector_52+0x62>
    2c7a:	92 81       	ldd	r25, Z+2	; 0x02
    2c7c:	85 81       	ldd	r24, Z+5	; 0x05
    2c7e:	28 2f       	mov	r18, r24
    2c80:	26 95       	lsr	r18
    2c82:	29 23       	and	r18, r25
    2c84:	a0 81       	ld	r26, Z
    2c86:	b1 81       	ldd	r27, Z+1	; 0x01
    2c88:	a2 0f       	add	r26, r18
    2c8a:	b1 1d       	adc	r27, r1
    2c8c:	2c 91       	ld	r18, X
    2c8e:	9f 5f       	subi	r25, 0xFF	; 255
    2c90:	89 23       	and	r24, r25
    2c92:	82 83       	std	Z+2, r24	; 0x02
    2c94:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2c98:	0b c0       	rjmp	.+22     	; 0x2cb0 <__vector_52+0x6c>
    2c9a:	e1 ed       	ldi	r30, 0xD1	; 209
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8f 7d       	andi	r24, 0xDF	; 223
    2ca2:	80 83       	st	Z, r24
    2ca4:	05 c0       	rjmp	.+10     	; 0x2cb0 <__vector_52+0x6c>
    2ca6:	e1 ed       	ldi	r30, 0xD1	; 209
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	8f 7d       	andi	r24, 0xDF	; 223
    2cae:	80 83       	st	Z, r24
    2cb0:	ff 91       	pop	r31
    2cb2:	ef 91       	pop	r30
    2cb4:	bf 91       	pop	r27
    2cb6:	af 91       	pop	r26
    2cb8:	9f 91       	pop	r25
    2cba:	8f 91       	pop	r24
    2cbc:	2f 91       	pop	r18
    2cbe:	0f 90       	pop	r0
    2cc0:	0b be       	out	0x3b, r0	; 59
    2cc2:	0f 90       	pop	r0
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	0f 90       	pop	r0
    2cc8:	1f 90       	pop	r1
    2cca:	18 95       	reti

00002ccc <__vector_54>:
    2ccc:	1f 92       	push	r1
    2cce:	0f 92       	push	r0
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	0f 92       	push	r0
    2cd4:	11 24       	eor	r1, r1
    2cd6:	0b b6       	in	r0, 0x3b	; 59
    2cd8:	0f 92       	push	r0
    2cda:	2f 93       	push	r18
    2cdc:	3f 93       	push	r19
    2cde:	4f 93       	push	r20
    2ce0:	5f 93       	push	r21
    2ce2:	6f 93       	push	r22
    2ce4:	7f 93       	push	r23
    2ce6:	8f 93       	push	r24
    2ce8:	9f 93       	push	r25
    2cea:	af 93       	push	r26
    2cec:	bf 93       	push	r27
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	ef 93       	push	r30
    2cf4:	ff 93       	push	r31
    2cf6:	a0 91 38 0d 	lds	r26, 0x0D38	; 0x800d38 <_ser_handle+0x6>
    2cfa:	b0 91 39 0d 	lds	r27, 0x0D39	; 0x800d39 <_ser_handle+0x7>
    2cfe:	10 97       	sbiw	r26, 0x00	; 0
    2d00:	11 f1       	breq	.+68     	; 0x2d46 <__vector_54+0x7a>
    2d02:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2d06:	14 96       	adiw	r26, 0x04	; 4
    2d08:	ed 91       	ld	r30, X+
    2d0a:	fc 91       	ld	r31, X
    2d0c:	15 97       	sbiw	r26, 0x05	; 5
    2d0e:	93 81       	ldd	r25, Z+3	; 0x03
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	25 81       	ldd	r18, Z+5	; 0x05
    2d14:	98 1b       	sub	r25, r24
    2d16:	92 23       	and	r25, r18
    2d18:	84 81       	ldd	r24, Z+4	; 0x04
    2d1a:	98 17       	cp	r25, r24
    2d1c:	61 f0       	breq	.+24     	; 0x2d36 <__vector_54+0x6a>
    2d1e:	83 81       	ldd	r24, Z+3	; 0x03
    2d20:	26 95       	lsr	r18
    2d22:	28 23       	and	r18, r24
    2d24:	c0 81       	ld	r28, Z
    2d26:	d1 81       	ldd	r29, Z+1	; 0x01
    2d28:	c2 0f       	add	r28, r18
    2d2a:	d1 1d       	adc	r29, r1
    2d2c:	68 83       	st	Y, r22
    2d2e:	8f 5f       	subi	r24, 0xFF	; 255
    2d30:	95 81       	ldd	r25, Z+5	; 0x05
    2d32:	89 23       	and	r24, r25
    2d34:	83 83       	std	Z+3, r24	; 0x03
    2d36:	16 96       	adiw	r26, 0x06	; 6
    2d38:	ed 91       	ld	r30, X+
    2d3a:	fc 91       	ld	r31, X
    2d3c:	17 97       	sbiw	r26, 0x07	; 7
    2d3e:	30 97       	sbiw	r30, 0x00	; 0
    2d40:	11 f0       	breq	.+4      	; 0x2d46 <__vector_54+0x7a>
    2d42:	cd 01       	movw	r24, r26
    2d44:	19 95       	eicall
    2d46:	ff 91       	pop	r31
    2d48:	ef 91       	pop	r30
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	bf 91       	pop	r27
    2d50:	af 91       	pop	r26
    2d52:	9f 91       	pop	r25
    2d54:	8f 91       	pop	r24
    2d56:	7f 91       	pop	r23
    2d58:	6f 91       	pop	r22
    2d5a:	5f 91       	pop	r21
    2d5c:	4f 91       	pop	r20
    2d5e:	3f 91       	pop	r19
    2d60:	2f 91       	pop	r18
    2d62:	0f 90       	pop	r0
    2d64:	0b be       	out	0x3b, r0	; 59
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	0f 90       	pop	r0
    2d6c:	1f 90       	pop	r1
    2d6e:	18 95       	reti

00002d70 <__vector_55>:
    2d70:	1f 92       	push	r1
    2d72:	0f 92       	push	r0
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	0f 92       	push	r0
    2d78:	11 24       	eor	r1, r1
    2d7a:	0b b6       	in	r0, 0x3b	; 59
    2d7c:	0f 92       	push	r0
    2d7e:	2f 93       	push	r18
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31
    2d8c:	e0 91 38 0d 	lds	r30, 0x0D38	; 0x800d38 <_ser_handle+0x6>
    2d90:	f0 91 39 0d 	lds	r31, 0x0D39	; 0x800d39 <_ser_handle+0x7>
    2d94:	30 97       	sbiw	r30, 0x00	; 0
    2d96:	b9 f0       	breq	.+46     	; 0x2dc6 <__vector_55+0x56>
    2d98:	02 80       	ldd	r0, Z+2	; 0x02
    2d9a:	f3 81       	ldd	r31, Z+3	; 0x03
    2d9c:	e0 2d       	mov	r30, r0
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	98 17       	cp	r25, r24
    2da4:	b1 f0       	breq	.+44     	; 0x2dd2 <__vector_55+0x62>
    2da6:	92 81       	ldd	r25, Z+2	; 0x02
    2da8:	85 81       	ldd	r24, Z+5	; 0x05
    2daa:	28 2f       	mov	r18, r24
    2dac:	26 95       	lsr	r18
    2dae:	29 23       	and	r18, r25
    2db0:	a0 81       	ld	r26, Z
    2db2:	b1 81       	ldd	r27, Z+1	; 0x01
    2db4:	a2 0f       	add	r26, r18
    2db6:	b1 1d       	adc	r27, r1
    2db8:	2c 91       	ld	r18, X
    2dba:	9f 5f       	subi	r25, 0xFF	; 255
    2dbc:	89 23       	and	r24, r25
    2dbe:	82 83       	std	Z+2, r24	; 0x02
    2dc0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <__vector_55+0x6c>
    2dc6:	e1 e3       	ldi	r30, 0x31	; 49
    2dc8:	f1 e0       	ldi	r31, 0x01	; 1
    2dca:	80 81       	ld	r24, Z
    2dcc:	8f 7d       	andi	r24, 0xDF	; 223
    2dce:	80 83       	st	Z, r24
    2dd0:	05 c0       	rjmp	.+10     	; 0x2ddc <__vector_55+0x6c>
    2dd2:	e1 e3       	ldi	r30, 0x31	; 49
    2dd4:	f1 e0       	ldi	r31, 0x01	; 1
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8f 7d       	andi	r24, 0xDF	; 223
    2dda:	80 83       	st	Z, r24
    2ddc:	ff 91       	pop	r31
    2dde:	ef 91       	pop	r30
    2de0:	bf 91       	pop	r27
    2de2:	af 91       	pop	r26
    2de4:	9f 91       	pop	r25
    2de6:	8f 91       	pop	r24
    2de8:	2f 91       	pop	r18
    2dea:	0f 90       	pop	r0
    2dec:	0b be       	out	0x3b, r0	; 59
    2dee:	0f 90       	pop	r0
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	0f 90       	pop	r0
    2df4:	1f 90       	pop	r1
    2df6:	18 95       	reti

00002df8 <usart_getchar>:
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	1f 92       	push	r1
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	be 01       	movw	r22, r28
    2e04:	6f 5f       	subi	r22, 0xFF	; 255
    2e06:	7f 4f       	sbci	r23, 0xFF	; 255
    2e08:	80 91 3a 0d 	lds	r24, 0x0D3A	; 0x800d3a <_com_serial_instance>
    2e0c:	90 91 3b 0d 	lds	r25, 0x0D3B	; 0x800d3b <_com_serial_instance+0x1>
    2e10:	7b dd       	rcall	.-1290   	; 0x2908 <serial_getByte>
    2e12:	81 11       	cpse	r24, r1
    2e14:	f6 cf       	rjmp	.-20     	; 0x2e02 <usart_getchar+0xa>
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0f 90       	pop	r0
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	08 95       	ret

00002e22 <usart_putchar>:
    2e22:	68 2f       	mov	r22, r24
    2e24:	80 91 3a 0d 	lds	r24, 0x0D3A	; 0x800d3a <_com_serial_instance>
    2e28:	90 91 3b 0d 	lds	r25, 0x0D3B	; 0x800d3b <_com_serial_instance+0x1>
    2e2c:	42 dd       	rcall	.-1404   	; 0x28b2 <serial_sendByte>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	08 95       	ret

00002e34 <stdio_initialise>:
    2e34:	8f 92       	push	r8
    2e36:	9f 92       	push	r9
    2e38:	af 92       	push	r10
    2e3a:	cf 92       	push	r12
    2e3c:	ef 92       	push	r14
    2e3e:	0f 93       	push	r16
    2e40:	81 2c       	mov	r8, r1
    2e42:	91 2c       	mov	r9, r1
    2e44:	68 94       	set
    2e46:	aa 24       	eor	r10, r10
    2e48:	a7 f8       	bld	r10, 7
    2e4a:	68 94       	set
    2e4c:	cc 24       	eor	r12, r12
    2e4e:	c7 f8       	bld	r12, 7
    2e50:	e1 2c       	mov	r14, r1
    2e52:	00 e0       	ldi	r16, 0x00	; 0
    2e54:	23 e0       	ldi	r18, 0x03	; 3
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	51 ee       	ldi	r21, 0xE1	; 225
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	84 dc       	rcall	.-1784   	; 0x2768 <serial_create>
    2e60:	90 93 3b 0d 	sts	0x0D3B, r25	; 0x800d3b <_com_serial_instance+0x1>
    2e64:	80 93 3a 0d 	sts	0x0D3A, r24	; 0x800d3a <_com_serial_instance>
    2e68:	e3 e5       	ldi	r30, 0x53	; 83
    2e6a:	fd e0       	ldi	r31, 0x0D	; 13
    2e6c:	83 e1       	ldi	r24, 0x13	; 19
    2e6e:	92 e0       	ldi	r25, 0x02	; 2
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	93 83       	std	Z+3, r25	; 0x03
    2e76:	82 83       	std	Z+2, r24	; 0x02
    2e78:	0f 91       	pop	r16
    2e7a:	ef 90       	pop	r14
    2e7c:	cf 90       	pop	r12
    2e7e:	af 90       	pop	r10
    2e80:	9f 90       	pop	r9
    2e82:	8f 90       	pop	r8
    2e84:	08 95       	ret

00002e86 <_initTwiInterface>:
    2e86:	80 91 4a 0d 	lds	r24, 0x0D4A	; 0x800d4a <_twiIsInitiated>
    2e8a:	81 11       	cpse	r24, r1
    2e8c:	0c c0       	rjmp	.+24     	; 0x2ea6 <_initTwiInterface+0x20>
    2e8e:	8c e0       	ldi	r24, 0x0C	; 12
    2e90:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2e9a:	84 e0       	ldi	r24, 0x04	; 4
    2e9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	80 93 4a 0d 	sts	0x0D4A, r24	; 0x800d4a <_twiIsInitiated>
    2ea6:	08 95       	ret

00002ea8 <twiCreate>:
    2ea8:	af 92       	push	r10
    2eaa:	bf 92       	push	r11
    2eac:	cf 92       	push	r12
    2eae:	df 92       	push	r13
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	a8 2e       	mov	r10, r24
    2ebe:	b6 2e       	mov	r11, r22
    2ec0:	69 01       	movw	r12, r18
    2ec2:	7a 01       	movw	r14, r20
    2ec4:	84 e0       	ldi	r24, 0x04	; 4
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	94 d6       	rcall	.+3368   	; 0x3bf2 <malloc>
    2eca:	ec 01       	movw	r28, r24
    2ecc:	89 2b       	or	r24, r25
    2ece:	61 f1       	breq	.+88     	; 0x2f28 <twiCreate+0x80>
    2ed0:	a8 82       	st	Y, r10
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	b8 12       	cpse	r11, r24
    2ed6:	12 c0       	rjmp	.+36     	; 0x2efc <twiCreate+0x54>
    2ed8:	c7 01       	movw	r24, r14
    2eda:	b6 01       	movw	r22, r12
    2edc:	20 ea       	ldi	r18, 0xA0	; 160
    2ede:	36 e8       	ldi	r19, 0x86	; 134
    2ee0:	41 e0       	ldi	r20, 0x01	; 1
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	5c d6       	rcall	.+3256   	; 0x3b9e <__udivmodsi4>
    2ee6:	da 01       	movw	r26, r20
    2ee8:	c9 01       	movw	r24, r18
    2eea:	40 97       	sbiw	r24, 0x10	; 16
    2eec:	a1 09       	sbc	r26, r1
    2eee:	b1 09       	sbc	r27, r1
    2ef0:	b6 95       	lsr	r27
    2ef2:	a7 95       	ror	r26
    2ef4:	97 95       	ror	r25
    2ef6:	87 95       	ror	r24
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	11 c0       	rjmp	.+34     	; 0x2f1e <twiCreate+0x76>
    2efc:	c7 01       	movw	r24, r14
    2efe:	b6 01       	movw	r22, r12
    2f00:	20 e8       	ldi	r18, 0x80	; 128
    2f02:	3a e1       	ldi	r19, 0x1A	; 26
    2f04:	46 e0       	ldi	r20, 0x06	; 6
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	4a d6       	rcall	.+3220   	; 0x3b9e <__udivmodsi4>
    2f0a:	da 01       	movw	r26, r20
    2f0c:	c9 01       	movw	r24, r18
    2f0e:	40 97       	sbiw	r24, 0x10	; 16
    2f10:	a1 09       	sbc	r26, r1
    2f12:	b1 09       	sbc	r27, r1
    2f14:	b6 95       	lsr	r27
    2f16:	a7 95       	ror	r26
    2f18:	97 95       	ror	r25
    2f1a:	87 95       	ror	r24
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	1b 83       	std	Y+3, r17	; 0x03
    2f20:	0a 83       	std	Y+2, r16	; 0x02
    2f22:	8c 2f       	mov	r24, r28
    2f24:	9d 2f       	mov	r25, r29
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <twiCreate+0x84>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	ff 90       	pop	r15
    2f36:	ef 90       	pop	r14
    2f38:	df 90       	pop	r13
    2f3a:	cf 90       	pop	r12
    2f3c:	bf 90       	pop	r11
    2f3e:	af 90       	pop	r10
    2f40:	08 95       	ret

00002f42 <twiIsBusy>:
    2f42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2f46:	81 70       	andi	r24, 0x01	; 1
    2f48:	08 95       	ret

00002f4a <twiTransmit>:
    2f4a:	ff 92       	push	r15
    2f4c:	0f 93       	push	r16
    2f4e:	1f 93       	push	r17
    2f50:	cf 93       	push	r28
    2f52:	df 93       	push	r29
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	d1 f1       	breq	.+116    	; 0x2fcc <twiTransmit+0x82>
    2f58:	4a 30       	cpi	r20, 0x0A	; 10
    2f5a:	d0 f5       	brcc	.+116    	; 0x2fd0 <twiTransmit+0x86>
    2f5c:	f4 2e       	mov	r15, r20
    2f5e:	8b 01       	movw	r16, r22
    2f60:	ec 01       	movw	r28, r24
    2f62:	ef df       	rcall	.-34     	; 0x2f42 <twiIsBusy>
    2f64:	81 11       	cpse	r24, r1
    2f66:	36 c0       	rjmp	.+108    	; 0x2fd4 <twiTransmit+0x8a>
    2f68:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <_twiCurrentHandler>
    2f6c:	90 91 3e 0d 	lds	r25, 0x0D3E	; 0x800d3e <_twiCurrentHandler+0x1>
    2f70:	c8 17       	cp	r28, r24
    2f72:	d9 07       	cpc	r29, r25
    2f74:	41 f0       	breq	.+16     	; 0x2f86 <twiTransmit+0x3c>
    2f76:	87 df       	rcall	.-242    	; 0x2e86 <_initTwiInterface>
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2f7e:	d0 93 3e 0d 	sts	0x0D3E, r29	; 0x800d3e <_twiCurrentHandler+0x1>
    2f82:	c0 93 3d 0d 	sts	0x0D3D, r28	; 0x800d3d <_twiCurrentHandler>
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	8f 0d       	add	r24, r15
    2f8a:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <_twiMessageLen>
    2f8e:	88 81       	ld	r24, Y
    2f90:	88 0f       	add	r24, r24
    2f92:	80 93 40 0d 	sts	0x0D40, r24	; 0x800d40 <_twiMessageBuffer>
    2f96:	ff 20       	and	r15, r15
    2f98:	89 f0       	breq	.+34     	; 0x2fbc <twiTransmit+0x72>
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	a1 e4       	ldi	r26, 0x41	; 65
    2f9e:	bd e0       	ldi	r27, 0x0D	; 13
    2fa0:	4f ef       	ldi	r20, 0xFF	; 255
    2fa2:	4f 0d       	add	r20, r15
    2fa4:	64 2f       	mov	r22, r20
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	cb 01       	movw	r24, r22
    2faa:	01 96       	adiw	r24, 0x01	; 1
    2fac:	b8 01       	movw	r22, r16
    2fae:	68 0f       	add	r22, r24
    2fb0:	79 1f       	adc	r23, r25
    2fb2:	81 91       	ld	r24, Z+
    2fb4:	8d 93       	st	X+, r24
    2fb6:	e6 17       	cp	r30, r22
    2fb8:	f7 07       	cpc	r31, r23
    2fba:	d9 f7       	brne	.-10     	; 0x2fb2 <twiTransmit+0x68>
    2fbc:	88 ef       	ldi	r24, 0xF8	; 248
    2fbe:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2fc2:	85 ea       	ldi	r24, 0xA5	; 165
    2fc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2fc8:	84 e0       	ldi	r24, 0x04	; 4
    2fca:	05 c0       	rjmp	.+10     	; 0x2fd6 <twiTransmit+0x8c>
    2fcc:	86 e0       	ldi	r24, 0x06	; 6
    2fce:	03 c0       	rjmp	.+6      	; 0x2fd6 <twiTransmit+0x8c>
    2fd0:	87 e0       	ldi	r24, 0x07	; 7
    2fd2:	01 c0       	rjmp	.+2      	; 0x2fd6 <twiTransmit+0x8c>
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	08 95       	ret

00002fe2 <twiReceive>:
    2fe2:	1f 93       	push	r17
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	29 f1       	breq	.+74     	; 0x3036 <twiReceive+0x54>
    2fec:	6b 30       	cpi	r22, 0x0B	; 11
    2fee:	28 f5       	brcc	.+74     	; 0x303a <twiReceive+0x58>
    2ff0:	16 2f       	mov	r17, r22
    2ff2:	ec 01       	movw	r28, r24
    2ff4:	a6 df       	rcall	.-180    	; 0x2f42 <twiIsBusy>
    2ff6:	81 11       	cpse	r24, r1
    2ff8:	22 c0       	rjmp	.+68     	; 0x303e <twiReceive+0x5c>
    2ffa:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <_twiCurrentHandler>
    2ffe:	90 91 3e 0d 	lds	r25, 0x0D3E	; 0x800d3e <_twiCurrentHandler+0x1>
    3002:	c8 17       	cp	r28, r24
    3004:	d9 07       	cpc	r29, r25
    3006:	41 f0       	breq	.+16     	; 0x3018 <twiReceive+0x36>
    3008:	3e df       	rcall	.-388    	; 0x2e86 <_initTwiInterface>
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3010:	d0 93 3e 0d 	sts	0x0D3E, r29	; 0x800d3e <_twiCurrentHandler+0x1>
    3014:	c0 93 3d 0d 	sts	0x0D3D, r28	; 0x800d3d <_twiCurrentHandler>
    3018:	10 93 3f 0d 	sts	0x0D3F, r17	; 0x800d3f <_twiMessageLen>
    301c:	88 81       	ld	r24, Y
    301e:	88 0f       	add	r24, r24
    3020:	81 60       	ori	r24, 0x01	; 1
    3022:	80 93 40 0d 	sts	0x0D40, r24	; 0x800d40 <_twiMessageBuffer>
    3026:	88 ef       	ldi	r24, 0xF8	; 248
    3028:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    302c:	85 ea       	ldi	r24, 0xA5	; 165
    302e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3032:	85 e0       	ldi	r24, 0x05	; 5
    3034:	05 c0       	rjmp	.+10     	; 0x3040 <twiReceive+0x5e>
    3036:	86 e0       	ldi	r24, 0x06	; 6
    3038:	03 c0       	rjmp	.+6      	; 0x3040 <twiReceive+0x5e>
    303a:	87 e0       	ldi	r24, 0x07	; 7
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <twiReceive+0x5e>
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	df 91       	pop	r29
    3042:	cf 91       	pop	r28
    3044:	1f 91       	pop	r17
    3046:	08 95       	ret

00003048 <__vector_39>:
    3048:	1f 92       	push	r1
    304a:	0f 92       	push	r0
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	0f 92       	push	r0
    3050:	11 24       	eor	r1, r1
    3052:	0b b6       	in	r0, 0x3b	; 59
    3054:	0f 92       	push	r0
    3056:	2f 93       	push	r18
    3058:	3f 93       	push	r19
    305a:	4f 93       	push	r20
    305c:	5f 93       	push	r21
    305e:	6f 93       	push	r22
    3060:	7f 93       	push	r23
    3062:	8f 93       	push	r24
    3064:	9f 93       	push	r25
    3066:	af 93       	push	r26
    3068:	bf 93       	push	r27
    306a:	ef 93       	push	r30
    306c:	ff 93       	push	r31
    306e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3072:	8e 2f       	mov	r24, r30
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	fc 01       	movw	r30, r24
    3078:	38 97       	sbiw	r30, 0x08	; 8
    307a:	e1 35       	cpi	r30, 0x51	; 81
    307c:	f1 05       	cpc	r31, r1
    307e:	08 f0       	brcs	.+2      	; 0x3082 <__vector_39+0x3a>
    3080:	75 c0       	rjmp	.+234    	; 0x316c <__vector_39+0x124>
    3082:	88 27       	eor	r24, r24
    3084:	e4 58       	subi	r30, 0x84	; 132
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	8f 4f       	sbci	r24, 0xFF	; 255
    308a:	ab c5       	rjmp	.+2902   	; 0x3be2 <__tablejump2__>
    308c:	10 92 3c 0d 	sts	0x0D3C, r1	; 0x800d3c <_index.1885>
    3090:	e0 91 3c 0d 	lds	r30, 0x0D3C	; 0x800d3c <_index.1885>
    3094:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <_twiMessageLen>
    3098:	e8 17       	cp	r30, r24
    309a:	70 f4       	brcc	.+28     	; 0x30b8 <__vector_39+0x70>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	8e 0f       	add	r24, r30
    30a0:	80 93 3c 0d 	sts	0x0D3C, r24	; 0x800d3c <_index.1885>
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	e0 5c       	subi	r30, 0xC0	; 192
    30a8:	f2 4f       	sbci	r31, 0xF2	; 242
    30aa:	80 81       	ld	r24, Z
    30ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    30b0:	85 e8       	ldi	r24, 0x85	; 133
    30b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    30b6:	72 c0       	rjmp	.+228    	; 0x319c <__vector_39+0x154>
    30b8:	84 e9       	ldi	r24, 0x94	; 148
    30ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    30be:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <_twiCurrentHandler>
    30c2:	90 91 3e 0d 	lds	r25, 0x0D3E	; 0x800d3e <_twiCurrentHandler+0x1>
    30c6:	dc 01       	movw	r26, r24
    30c8:	12 96       	adiw	r26, 0x02	; 2
    30ca:	ed 91       	ld	r30, X+
    30cc:	fc 91       	ld	r31, X
    30ce:	13 97       	sbiw	r26, 0x03	; 3
    30d0:	30 97       	sbiw	r30, 0x00	; 0
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <__vector_39+0x8e>
    30d4:	63 c0       	rjmp	.+198    	; 0x319c <__vector_39+0x154>
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	40 e0       	ldi	r20, 0x00	; 0
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	64 e0       	ldi	r22, 0x04	; 4
    30de:	19 95       	eicall
    30e0:	5d c0       	rjmp	.+186    	; 0x319c <__vector_39+0x154>
    30e2:	e0 91 3c 0d 	lds	r30, 0x0D3C	; 0x800d3c <_index.1885>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	8e 0f       	add	r24, r30
    30ea:	80 93 3c 0d 	sts	0x0D3C, r24	; 0x800d3c <_index.1885>
    30ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	e0 5c       	subi	r30, 0xC0	; 192
    30f6:	f2 4f       	sbci	r31, 0xF2	; 242
    30f8:	80 83       	st	Z, r24
    30fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    30fe:	80 34       	cpi	r24, 0x40	; 64
    3100:	11 f4       	brne	.+4      	; 0x3106 <__vector_39+0xbe>
    3102:	10 92 3c 0d 	sts	0x0D3C, r1	; 0x800d3c <_index.1885>
    3106:	20 91 3c 0d 	lds	r18, 0x0D3C	; 0x800d3c <_index.1885>
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <_twiMessageLen>
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	28 17       	cp	r18, r24
    3116:	39 07       	cpc	r19, r25
    3118:	24 f4       	brge	.+8      	; 0x3122 <__vector_39+0xda>
    311a:	85 ec       	ldi	r24, 0xC5	; 197
    311c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3120:	3d c0       	rjmp	.+122    	; 0x319c <__vector_39+0x154>
    3122:	85 e8       	ldi	r24, 0x85	; 133
    3124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3128:	39 c0       	rjmp	.+114    	; 0x319c <__vector_39+0x154>
    312a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    312e:	e0 91 3c 0d 	lds	r30, 0x0D3C	; 0x800d3c <_index.1885>
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	e0 5c       	subi	r30, 0xC0	; 192
    3136:	f2 4f       	sbci	r31, 0xF2	; 242
    3138:	80 83       	st	Z, r24
    313a:	84 e9       	ldi	r24, 0x94	; 148
    313c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3140:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <_twiCurrentHandler>
    3144:	90 91 3e 0d 	lds	r25, 0x0D3E	; 0x800d3e <_twiCurrentHandler+0x1>
    3148:	dc 01       	movw	r26, r24
    314a:	12 96       	adiw	r26, 0x02	; 2
    314c:	ed 91       	ld	r30, X+
    314e:	fc 91       	ld	r31, X
    3150:	13 97       	sbiw	r26, 0x03	; 3
    3152:	30 97       	sbiw	r30, 0x00	; 0
    3154:	19 f1       	breq	.+70     	; 0x319c <__vector_39+0x154>
    3156:	20 91 3f 0d 	lds	r18, 0x0D3F	; 0x800d3f <_twiMessageLen>
    315a:	40 e4       	ldi	r20, 0x40	; 64
    315c:	5d e0       	ldi	r21, 0x0D	; 13
    315e:	65 e0       	ldi	r22, 0x05	; 5
    3160:	19 95       	eicall
    3162:	1c c0       	rjmp	.+56     	; 0x319c <__vector_39+0x154>
    3164:	85 ea       	ldi	r24, 0xA5	; 165
    3166:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    316a:	18 c0       	rjmp	.+48     	; 0x319c <__vector_39+0x154>
    316c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3170:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3174:	84 e0       	ldi	r24, 0x04	; 4
    3176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    317a:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <_twiCurrentHandler>
    317e:	90 91 3e 0d 	lds	r25, 0x0D3E	; 0x800d3e <_twiCurrentHandler+0x1>
    3182:	dc 01       	movw	r26, r24
    3184:	12 96       	adiw	r26, 0x02	; 2
    3186:	ed 91       	ld	r30, X+
    3188:	fc 91       	ld	r31, X
    318a:	13 97       	sbiw	r26, 0x03	; 3
    318c:	30 97       	sbiw	r30, 0x00	; 0
    318e:	31 f0       	breq	.+12     	; 0x319c <__vector_39+0x154>
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    319a:	19 95       	eicall
    319c:	ff 91       	pop	r31
    319e:	ef 91       	pop	r30
    31a0:	bf 91       	pop	r27
    31a2:	af 91       	pop	r26
    31a4:	9f 91       	pop	r25
    31a6:	8f 91       	pop	r24
    31a8:	7f 91       	pop	r23
    31aa:	6f 91       	pop	r22
    31ac:	5f 91       	pop	r21
    31ae:	4f 91       	pop	r20
    31b0:	3f 91       	pop	r19
    31b2:	2f 91       	pop	r18
    31b4:	0f 90       	pop	r0
    31b6:	0b be       	out	0x3b, r0	; 59
    31b8:	0f 90       	pop	r0
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	0f 90       	pop	r0
    31be:	1f 90       	pop	r1
    31c0:	18 95       	reti

000031c2 <fifo_init>:
    31c2:	fc 01       	movw	r30, r24
    31c4:	41 11       	cpse	r20, r1
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <fifo_init+0x8>
    31c8:	35 d6       	rcall	.+3178   	; 0x3e34 <abort>
    31ca:	84 2f       	mov	r24, r20
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9c 01       	movw	r18, r24
    31d0:	21 50       	subi	r18, 0x01	; 1
    31d2:	31 09       	sbc	r19, r1
    31d4:	82 23       	and	r24, r18
    31d6:	93 23       	and	r25, r19
    31d8:	89 2b       	or	r24, r25
    31da:	09 f0       	breq	.+2      	; 0x31de <fifo_init+0x1c>
    31dc:	2b d6       	rcall	.+3158   	; 0x3e34 <abort>
    31de:	41 38       	cpi	r20, 0x81	; 129
    31e0:	08 f0       	brcs	.+2      	; 0x31e4 <fifo_init+0x22>
    31e2:	28 d6       	rcall	.+3152   	; 0x3e34 <abort>
    31e4:	12 82       	std	Z+2, r1	; 0x02
    31e6:	13 82       	std	Z+3, r1	; 0x03
    31e8:	44 83       	std	Z+4, r20	; 0x04
    31ea:	44 0f       	add	r20, r20
    31ec:	41 50       	subi	r20, 0x01	; 1
    31ee:	45 83       	std	Z+5, r20	; 0x05
    31f0:	71 83       	std	Z+1, r23	; 0x01
    31f2:	60 83       	st	Z, r22
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	08 95       	ret

000031fa <vfprintf>:
    31fa:	2f 92       	push	r2
    31fc:	3f 92       	push	r3
    31fe:	4f 92       	push	r4
    3200:	5f 92       	push	r5
    3202:	6f 92       	push	r6
    3204:	7f 92       	push	r7
    3206:	8f 92       	push	r8
    3208:	9f 92       	push	r9
    320a:	af 92       	push	r10
    320c:	bf 92       	push	r11
    320e:	cf 92       	push	r12
    3210:	df 92       	push	r13
    3212:	ef 92       	push	r14
    3214:	ff 92       	push	r15
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    3222:	60 97       	sbiw	r28, 0x10	; 16
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	7c 01       	movw	r14, r24
    3230:	1b 01       	movw	r2, r22
    3232:	6a 01       	movw	r12, r20
    3234:	fc 01       	movw	r30, r24
    3236:	17 82       	std	Z+7, r1	; 0x07
    3238:	16 82       	std	Z+6, r1	; 0x06
    323a:	83 81       	ldd	r24, Z+3	; 0x03
    323c:	81 ff       	sbrs	r24, 1
    323e:	2a c3       	rjmp	.+1620   	; 0x3894 <vfprintf+0x69a>
    3240:	9e 01       	movw	r18, r28
    3242:	2f 5f       	subi	r18, 0xFF	; 255
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	39 01       	movw	r6, r18
    3248:	f7 01       	movw	r30, r14
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	f1 01       	movw	r30, r2
    324e:	93 fd       	sbrc	r25, 3
    3250:	85 91       	lpm	r24, Z+
    3252:	93 ff       	sbrs	r25, 3
    3254:	81 91       	ld	r24, Z+
    3256:	1f 01       	movw	r2, r30
    3258:	88 23       	and	r24, r24
    325a:	09 f4       	brne	.+2      	; 0x325e <vfprintf+0x64>
    325c:	17 c3       	rjmp	.+1582   	; 0x388c <vfprintf+0x692>
    325e:	85 32       	cpi	r24, 0x25	; 37
    3260:	39 f4       	brne	.+14     	; 0x3270 <vfprintf+0x76>
    3262:	93 fd       	sbrc	r25, 3
    3264:	85 91       	lpm	r24, Z+
    3266:	93 ff       	sbrs	r25, 3
    3268:	81 91       	ld	r24, Z+
    326a:	1f 01       	movw	r2, r30
    326c:	85 32       	cpi	r24, 0x25	; 37
    326e:	31 f4       	brne	.+12     	; 0x327c <vfprintf+0x82>
    3270:	b7 01       	movw	r22, r14
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	e1 d6       	rcall	.+3522   	; 0x4038 <fputc>
    3276:	56 01       	movw	r10, r12
    3278:	65 01       	movw	r12, r10
    327a:	e6 cf       	rjmp	.-52     	; 0x3248 <vfprintf+0x4e>
    327c:	10 e0       	ldi	r17, 0x00	; 0
    327e:	51 2c       	mov	r5, r1
    3280:	91 2c       	mov	r9, r1
    3282:	ff e1       	ldi	r31, 0x1F	; 31
    3284:	f9 15       	cp	r31, r9
    3286:	d8 f0       	brcs	.+54     	; 0x32be <vfprintf+0xc4>
    3288:	8b 32       	cpi	r24, 0x2B	; 43
    328a:	79 f0       	breq	.+30     	; 0x32aa <vfprintf+0xb0>
    328c:	38 f4       	brcc	.+14     	; 0x329c <vfprintf+0xa2>
    328e:	80 32       	cpi	r24, 0x20	; 32
    3290:	79 f0       	breq	.+30     	; 0x32b0 <vfprintf+0xb6>
    3292:	83 32       	cpi	r24, 0x23	; 35
    3294:	a1 f4       	brne	.+40     	; 0x32be <vfprintf+0xc4>
    3296:	f9 2d       	mov	r31, r9
    3298:	f0 61       	ori	r31, 0x10	; 16
    329a:	2e c0       	rjmp	.+92     	; 0x32f8 <vfprintf+0xfe>
    329c:	8d 32       	cpi	r24, 0x2D	; 45
    329e:	61 f0       	breq	.+24     	; 0x32b8 <vfprintf+0xbe>
    32a0:	80 33       	cpi	r24, 0x30	; 48
    32a2:	69 f4       	brne	.+26     	; 0x32be <vfprintf+0xc4>
    32a4:	29 2d       	mov	r18, r9
    32a6:	21 60       	ori	r18, 0x01	; 1
    32a8:	2d c0       	rjmp	.+90     	; 0x3304 <vfprintf+0x10a>
    32aa:	39 2d       	mov	r19, r9
    32ac:	32 60       	ori	r19, 0x02	; 2
    32ae:	93 2e       	mov	r9, r19
    32b0:	89 2d       	mov	r24, r9
    32b2:	84 60       	ori	r24, 0x04	; 4
    32b4:	98 2e       	mov	r9, r24
    32b6:	2a c0       	rjmp	.+84     	; 0x330c <vfprintf+0x112>
    32b8:	e9 2d       	mov	r30, r9
    32ba:	e8 60       	ori	r30, 0x08	; 8
    32bc:	15 c0       	rjmp	.+42     	; 0x32e8 <vfprintf+0xee>
    32be:	97 fc       	sbrc	r9, 7
    32c0:	2d c0       	rjmp	.+90     	; 0x331c <vfprintf+0x122>
    32c2:	20 ed       	ldi	r18, 0xD0	; 208
    32c4:	28 0f       	add	r18, r24
    32c6:	2a 30       	cpi	r18, 0x0A	; 10
    32c8:	88 f4       	brcc	.+34     	; 0x32ec <vfprintf+0xf2>
    32ca:	96 fe       	sbrs	r9, 6
    32cc:	06 c0       	rjmp	.+12     	; 0x32da <vfprintf+0xe0>
    32ce:	3a e0       	ldi	r19, 0x0A	; 10
    32d0:	13 9f       	mul	r17, r19
    32d2:	20 0d       	add	r18, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	12 2f       	mov	r17, r18
    32d8:	19 c0       	rjmp	.+50     	; 0x330c <vfprintf+0x112>
    32da:	8a e0       	ldi	r24, 0x0A	; 10
    32dc:	58 9e       	mul	r5, r24
    32de:	20 0d       	add	r18, r0
    32e0:	11 24       	eor	r1, r1
    32e2:	52 2e       	mov	r5, r18
    32e4:	e9 2d       	mov	r30, r9
    32e6:	e0 62       	ori	r30, 0x20	; 32
    32e8:	9e 2e       	mov	r9, r30
    32ea:	10 c0       	rjmp	.+32     	; 0x330c <vfprintf+0x112>
    32ec:	8e 32       	cpi	r24, 0x2E	; 46
    32ee:	31 f4       	brne	.+12     	; 0x32fc <vfprintf+0x102>
    32f0:	96 fc       	sbrc	r9, 6
    32f2:	cc c2       	rjmp	.+1432   	; 0x388c <vfprintf+0x692>
    32f4:	f9 2d       	mov	r31, r9
    32f6:	f0 64       	ori	r31, 0x40	; 64
    32f8:	9f 2e       	mov	r9, r31
    32fa:	08 c0       	rjmp	.+16     	; 0x330c <vfprintf+0x112>
    32fc:	8c 36       	cpi	r24, 0x6C	; 108
    32fe:	21 f4       	brne	.+8      	; 0x3308 <vfprintf+0x10e>
    3300:	29 2d       	mov	r18, r9
    3302:	20 68       	ori	r18, 0x80	; 128
    3304:	92 2e       	mov	r9, r18
    3306:	02 c0       	rjmp	.+4      	; 0x330c <vfprintf+0x112>
    3308:	88 36       	cpi	r24, 0x68	; 104
    330a:	41 f4       	brne	.+16     	; 0x331c <vfprintf+0x122>
    330c:	f1 01       	movw	r30, r2
    330e:	93 fd       	sbrc	r25, 3
    3310:	85 91       	lpm	r24, Z+
    3312:	93 ff       	sbrs	r25, 3
    3314:	81 91       	ld	r24, Z+
    3316:	1f 01       	movw	r2, r30
    3318:	81 11       	cpse	r24, r1
    331a:	b3 cf       	rjmp	.-154    	; 0x3282 <vfprintf+0x88>
    331c:	9b eb       	ldi	r25, 0xBB	; 187
    331e:	98 0f       	add	r25, r24
    3320:	93 30       	cpi	r25, 0x03	; 3
    3322:	20 f4       	brcc	.+8      	; 0x332c <vfprintf+0x132>
    3324:	99 2d       	mov	r25, r9
    3326:	90 61       	ori	r25, 0x10	; 16
    3328:	80 5e       	subi	r24, 0xE0	; 224
    332a:	07 c0       	rjmp	.+14     	; 0x333a <vfprintf+0x140>
    332c:	9b e9       	ldi	r25, 0x9B	; 155
    332e:	98 0f       	add	r25, r24
    3330:	93 30       	cpi	r25, 0x03	; 3
    3332:	08 f0       	brcs	.+2      	; 0x3336 <vfprintf+0x13c>
    3334:	59 c1       	rjmp	.+690    	; 0x35e8 <vfprintf+0x3ee>
    3336:	99 2d       	mov	r25, r9
    3338:	9f 7e       	andi	r25, 0xEF	; 239
    333a:	96 ff       	sbrs	r25, 6
    333c:	16 e0       	ldi	r17, 0x06	; 6
    333e:	9f 73       	andi	r25, 0x3F	; 63
    3340:	99 2e       	mov	r9, r25
    3342:	85 36       	cpi	r24, 0x65	; 101
    3344:	19 f4       	brne	.+6      	; 0x334c <vfprintf+0x152>
    3346:	90 64       	ori	r25, 0x40	; 64
    3348:	99 2e       	mov	r9, r25
    334a:	08 c0       	rjmp	.+16     	; 0x335c <vfprintf+0x162>
    334c:	86 36       	cpi	r24, 0x66	; 102
    334e:	21 f4       	brne	.+8      	; 0x3358 <vfprintf+0x15e>
    3350:	39 2f       	mov	r19, r25
    3352:	30 68       	ori	r19, 0x80	; 128
    3354:	93 2e       	mov	r9, r19
    3356:	02 c0       	rjmp	.+4      	; 0x335c <vfprintf+0x162>
    3358:	11 11       	cpse	r17, r1
    335a:	11 50       	subi	r17, 0x01	; 1
    335c:	97 fe       	sbrs	r9, 7
    335e:	07 c0       	rjmp	.+14     	; 0x336e <vfprintf+0x174>
    3360:	1c 33       	cpi	r17, 0x3C	; 60
    3362:	50 f4       	brcc	.+20     	; 0x3378 <vfprintf+0x17e>
    3364:	44 24       	eor	r4, r4
    3366:	43 94       	inc	r4
    3368:	41 0e       	add	r4, r17
    336a:	27 e0       	ldi	r18, 0x07	; 7
    336c:	0b c0       	rjmp	.+22     	; 0x3384 <vfprintf+0x18a>
    336e:	18 30       	cpi	r17, 0x08	; 8
    3370:	38 f0       	brcs	.+14     	; 0x3380 <vfprintf+0x186>
    3372:	27 e0       	ldi	r18, 0x07	; 7
    3374:	17 e0       	ldi	r17, 0x07	; 7
    3376:	05 c0       	rjmp	.+10     	; 0x3382 <vfprintf+0x188>
    3378:	27 e0       	ldi	r18, 0x07	; 7
    337a:	9c e3       	ldi	r25, 0x3C	; 60
    337c:	49 2e       	mov	r4, r25
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <vfprintf+0x18a>
    3380:	21 2f       	mov	r18, r17
    3382:	41 2c       	mov	r4, r1
    3384:	56 01       	movw	r10, r12
    3386:	84 e0       	ldi	r24, 0x04	; 4
    3388:	a8 0e       	add	r10, r24
    338a:	b1 1c       	adc	r11, r1
    338c:	f6 01       	movw	r30, r12
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	04 2d       	mov	r16, r4
    3398:	a3 01       	movw	r20, r6
    339a:	50 d5       	rcall	.+2720   	; 0x3e3c <__ftoa_engine>
    339c:	6c 01       	movw	r12, r24
    339e:	f9 81       	ldd	r31, Y+1	; 0x01
    33a0:	fc 87       	std	Y+12, r31	; 0x0c
    33a2:	f0 ff       	sbrs	r31, 0
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <vfprintf+0x1b0>
    33a6:	f3 ff       	sbrs	r31, 3
    33a8:	06 c0       	rjmp	.+12     	; 0x33b6 <vfprintf+0x1bc>
    33aa:	91 fc       	sbrc	r9, 1
    33ac:	06 c0       	rjmp	.+12     	; 0x33ba <vfprintf+0x1c0>
    33ae:	92 fe       	sbrs	r9, 2
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <vfprintf+0x1c4>
    33b2:	00 e2       	ldi	r16, 0x20	; 32
    33b4:	05 c0       	rjmp	.+10     	; 0x33c0 <vfprintf+0x1c6>
    33b6:	0d e2       	ldi	r16, 0x2D	; 45
    33b8:	03 c0       	rjmp	.+6      	; 0x33c0 <vfprintf+0x1c6>
    33ba:	0b e2       	ldi	r16, 0x2B	; 43
    33bc:	01 c0       	rjmp	.+2      	; 0x33c0 <vfprintf+0x1c6>
    33be:	00 e0       	ldi	r16, 0x00	; 0
    33c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    33c2:	8c 70       	andi	r24, 0x0C	; 12
    33c4:	19 f0       	breq	.+6      	; 0x33cc <vfprintf+0x1d2>
    33c6:	01 11       	cpse	r16, r1
    33c8:	43 c2       	rjmp	.+1158   	; 0x3850 <vfprintf+0x656>
    33ca:	80 c2       	rjmp	.+1280   	; 0x38cc <vfprintf+0x6d2>
    33cc:	97 fe       	sbrs	r9, 7
    33ce:	10 c0       	rjmp	.+32     	; 0x33f0 <vfprintf+0x1f6>
    33d0:	4c 0c       	add	r4, r12
    33d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    33d4:	f4 ff       	sbrs	r31, 4
    33d6:	04 c0       	rjmp	.+8      	; 0x33e0 <vfprintf+0x1e6>
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	81 33       	cpi	r24, 0x31	; 49
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <vfprintf+0x1e6>
    33de:	4a 94       	dec	r4
    33e0:	14 14       	cp	r1, r4
    33e2:	74 f5       	brge	.+92     	; 0x3440 <vfprintf+0x246>
    33e4:	28 e0       	ldi	r18, 0x08	; 8
    33e6:	24 15       	cp	r18, r4
    33e8:	78 f5       	brcc	.+94     	; 0x3448 <vfprintf+0x24e>
    33ea:	88 e0       	ldi	r24, 0x08	; 8
    33ec:	48 2e       	mov	r4, r24
    33ee:	2c c0       	rjmp	.+88     	; 0x3448 <vfprintf+0x24e>
    33f0:	96 fc       	sbrc	r9, 6
    33f2:	2a c0       	rjmp	.+84     	; 0x3448 <vfprintf+0x24e>
    33f4:	81 2f       	mov	r24, r17
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	8c 15       	cp	r24, r12
    33fa:	9d 05       	cpc	r25, r13
    33fc:	9c f0       	brlt	.+38     	; 0x3424 <vfprintf+0x22a>
    33fe:	3c ef       	ldi	r19, 0xFC	; 252
    3400:	c3 16       	cp	r12, r19
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	d3 06       	cpc	r13, r19
    3406:	74 f0       	brlt	.+28     	; 0x3424 <vfprintf+0x22a>
    3408:	89 2d       	mov	r24, r9
    340a:	80 68       	ori	r24, 0x80	; 128
    340c:	98 2e       	mov	r9, r24
    340e:	0a c0       	rjmp	.+20     	; 0x3424 <vfprintf+0x22a>
    3410:	e2 e0       	ldi	r30, 0x02	; 2
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	ec 0f       	add	r30, r28
    3416:	fd 1f       	adc	r31, r29
    3418:	e1 0f       	add	r30, r17
    341a:	f1 1d       	adc	r31, r1
    341c:	80 81       	ld	r24, Z
    341e:	80 33       	cpi	r24, 0x30	; 48
    3420:	19 f4       	brne	.+6      	; 0x3428 <vfprintf+0x22e>
    3422:	11 50       	subi	r17, 0x01	; 1
    3424:	11 11       	cpse	r17, r1
    3426:	f4 cf       	rjmp	.-24     	; 0x3410 <vfprintf+0x216>
    3428:	97 fe       	sbrs	r9, 7
    342a:	0e c0       	rjmp	.+28     	; 0x3448 <vfprintf+0x24e>
    342c:	44 24       	eor	r4, r4
    342e:	43 94       	inc	r4
    3430:	41 0e       	add	r4, r17
    3432:	81 2f       	mov	r24, r17
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	c8 16       	cp	r12, r24
    3438:	d9 06       	cpc	r13, r25
    343a:	2c f4       	brge	.+10     	; 0x3446 <vfprintf+0x24c>
    343c:	1c 19       	sub	r17, r12
    343e:	04 c0       	rjmp	.+8      	; 0x3448 <vfprintf+0x24e>
    3440:	44 24       	eor	r4, r4
    3442:	43 94       	inc	r4
    3444:	01 c0       	rjmp	.+2      	; 0x3448 <vfprintf+0x24e>
    3446:	10 e0       	ldi	r17, 0x00	; 0
    3448:	97 fe       	sbrs	r9, 7
    344a:	06 c0       	rjmp	.+12     	; 0x3458 <vfprintf+0x25e>
    344c:	1c 14       	cp	r1, r12
    344e:	1d 04       	cpc	r1, r13
    3450:	34 f4       	brge	.+12     	; 0x345e <vfprintf+0x264>
    3452:	c6 01       	movw	r24, r12
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	05 c0       	rjmp	.+10     	; 0x3462 <vfprintf+0x268>
    3458:	85 e0       	ldi	r24, 0x05	; 5
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <vfprintf+0x268>
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	01 11       	cpse	r16, r1
    3464:	01 96       	adiw	r24, 0x01	; 1
    3466:	11 23       	and	r17, r17
    3468:	31 f0       	breq	.+12     	; 0x3476 <vfprintf+0x27c>
    346a:	21 2f       	mov	r18, r17
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	2f 5f       	subi	r18, 0xFF	; 255
    3470:	3f 4f       	sbci	r19, 0xFF	; 255
    3472:	82 0f       	add	r24, r18
    3474:	93 1f       	adc	r25, r19
    3476:	25 2d       	mov	r18, r5
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	82 17       	cp	r24, r18
    347c:	93 07       	cpc	r25, r19
    347e:	14 f4       	brge	.+4      	; 0x3484 <vfprintf+0x28a>
    3480:	58 1a       	sub	r5, r24
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <vfprintf+0x28c>
    3484:	51 2c       	mov	r5, r1
    3486:	89 2d       	mov	r24, r9
    3488:	89 70       	andi	r24, 0x09	; 9
    348a:	41 f4       	brne	.+16     	; 0x349c <vfprintf+0x2a2>
    348c:	55 20       	and	r5, r5
    348e:	31 f0       	breq	.+12     	; 0x349c <vfprintf+0x2a2>
    3490:	b7 01       	movw	r22, r14
    3492:	80 e2       	ldi	r24, 0x20	; 32
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	d0 d5       	rcall	.+2976   	; 0x4038 <fputc>
    3498:	5a 94       	dec	r5
    349a:	f8 cf       	rjmp	.-16     	; 0x348c <vfprintf+0x292>
    349c:	00 23       	and	r16, r16
    349e:	21 f0       	breq	.+8      	; 0x34a8 <vfprintf+0x2ae>
    34a0:	b7 01       	movw	r22, r14
    34a2:	80 2f       	mov	r24, r16
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	c8 d5       	rcall	.+2960   	; 0x4038 <fputc>
    34a8:	93 fc       	sbrc	r9, 3
    34aa:	08 c0       	rjmp	.+16     	; 0x34bc <vfprintf+0x2c2>
    34ac:	55 20       	and	r5, r5
    34ae:	31 f0       	breq	.+12     	; 0x34bc <vfprintf+0x2c2>
    34b0:	b7 01       	movw	r22, r14
    34b2:	80 e3       	ldi	r24, 0x30	; 48
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	c0 d5       	rcall	.+2944   	; 0x4038 <fputc>
    34b8:	5a 94       	dec	r5
    34ba:	f8 cf       	rjmp	.-16     	; 0x34ac <vfprintf+0x2b2>
    34bc:	97 fe       	sbrs	r9, 7
    34be:	4a c0       	rjmp	.+148    	; 0x3554 <vfprintf+0x35a>
    34c0:	46 01       	movw	r8, r12
    34c2:	d7 fe       	sbrs	r13, 7
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <vfprintf+0x2d0>
    34c6:	81 2c       	mov	r8, r1
    34c8:	91 2c       	mov	r9, r1
    34ca:	c6 01       	movw	r24, r12
    34cc:	88 19       	sub	r24, r8
    34ce:	99 09       	sbc	r25, r9
    34d0:	f3 01       	movw	r30, r6
    34d2:	e8 0f       	add	r30, r24
    34d4:	f9 1f       	adc	r31, r25
    34d6:	fe 87       	std	Y+14, r31	; 0x0e
    34d8:	ed 87       	std	Y+13, r30	; 0x0d
    34da:	96 01       	movw	r18, r12
    34dc:	24 19       	sub	r18, r4
    34de:	31 09       	sbc	r19, r1
    34e0:	38 8b       	std	Y+16, r19	; 0x10
    34e2:	2f 87       	std	Y+15, r18	; 0x0f
    34e4:	01 2f       	mov	r16, r17
    34e6:	10 e0       	ldi	r17, 0x00	; 0
    34e8:	11 95       	neg	r17
    34ea:	01 95       	neg	r16
    34ec:	11 09       	sbc	r17, r1
    34ee:	3f ef       	ldi	r19, 0xFF	; 255
    34f0:	83 16       	cp	r8, r19
    34f2:	93 06       	cpc	r9, r19
    34f4:	21 f4       	brne	.+8      	; 0x34fe <vfprintf+0x304>
    34f6:	b7 01       	movw	r22, r14
    34f8:	8e e2       	ldi	r24, 0x2E	; 46
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	9d d5       	rcall	.+2874   	; 0x4038 <fputc>
    34fe:	c8 14       	cp	r12, r8
    3500:	d9 04       	cpc	r13, r9
    3502:	4c f0       	brlt	.+18     	; 0x3516 <vfprintf+0x31c>
    3504:	8f 85       	ldd	r24, Y+15	; 0x0f
    3506:	98 89       	ldd	r25, Y+16	; 0x10
    3508:	88 15       	cp	r24, r8
    350a:	99 05       	cpc	r25, r9
    350c:	24 f4       	brge	.+8      	; 0x3516 <vfprintf+0x31c>
    350e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3510:	fe 85       	ldd	r31, Y+14	; 0x0e
    3512:	81 81       	ldd	r24, Z+1	; 0x01
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <vfprintf+0x31e>
    3516:	80 e3       	ldi	r24, 0x30	; 48
    3518:	f1 e0       	ldi	r31, 0x01	; 1
    351a:	8f 1a       	sub	r8, r31
    351c:	91 08       	sbc	r9, r1
    351e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3520:	3e 85       	ldd	r19, Y+14	; 0x0e
    3522:	2f 5f       	subi	r18, 0xFF	; 255
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	3e 87       	std	Y+14, r19	; 0x0e
    3528:	2d 87       	std	Y+13, r18	; 0x0d
    352a:	80 16       	cp	r8, r16
    352c:	91 06       	cpc	r9, r17
    352e:	24 f0       	brlt	.+8      	; 0x3538 <vfprintf+0x33e>
    3530:	b7 01       	movw	r22, r14
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	81 d5       	rcall	.+2818   	; 0x4038 <fputc>
    3536:	db cf       	rjmp	.-74     	; 0x34ee <vfprintf+0x2f4>
    3538:	c8 14       	cp	r12, r8
    353a:	d9 04       	cpc	r13, r9
    353c:	41 f4       	brne	.+16     	; 0x354e <vfprintf+0x354>
    353e:	9a 81       	ldd	r25, Y+2	; 0x02
    3540:	96 33       	cpi	r25, 0x36	; 54
    3542:	20 f4       	brcc	.+8      	; 0x354c <vfprintf+0x352>
    3544:	95 33       	cpi	r25, 0x35	; 53
    3546:	19 f4       	brne	.+6      	; 0x354e <vfprintf+0x354>
    3548:	3c 85       	ldd	r19, Y+12	; 0x0c
    354a:	34 ff       	sbrs	r19, 4
    354c:	81 e3       	ldi	r24, 0x31	; 49
    354e:	b7 01       	movw	r22, r14
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	48 c0       	rjmp	.+144    	; 0x35e4 <vfprintf+0x3ea>
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	81 33       	cpi	r24, 0x31	; 49
    3558:	19 f0       	breq	.+6      	; 0x3560 <vfprintf+0x366>
    355a:	9c 85       	ldd	r25, Y+12	; 0x0c
    355c:	9f 7e       	andi	r25, 0xEF	; 239
    355e:	9c 87       	std	Y+12, r25	; 0x0c
    3560:	b7 01       	movw	r22, r14
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	69 d5       	rcall	.+2770   	; 0x4038 <fputc>
    3566:	11 11       	cpse	r17, r1
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <vfprintf+0x37a>
    356a:	94 fc       	sbrc	r9, 4
    356c:	16 c0       	rjmp	.+44     	; 0x359a <vfprintf+0x3a0>
    356e:	85 e6       	ldi	r24, 0x65	; 101
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	15 c0       	rjmp	.+42     	; 0x359e <vfprintf+0x3a4>
    3574:	b7 01       	movw	r22, r14
    3576:	8e e2       	ldi	r24, 0x2E	; 46
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	5e d5       	rcall	.+2748   	; 0x4038 <fputc>
    357c:	1e 5f       	subi	r17, 0xFE	; 254
    357e:	82 e0       	ldi	r24, 0x02	; 2
    3580:	01 e0       	ldi	r16, 0x01	; 1
    3582:	08 0f       	add	r16, r24
    3584:	f3 01       	movw	r30, r6
    3586:	e8 0f       	add	r30, r24
    3588:	f1 1d       	adc	r31, r1
    358a:	80 81       	ld	r24, Z
    358c:	b7 01       	movw	r22, r14
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	53 d5       	rcall	.+2726   	; 0x4038 <fputc>
    3592:	80 2f       	mov	r24, r16
    3594:	01 13       	cpse	r16, r17
    3596:	f4 cf       	rjmp	.-24     	; 0x3580 <vfprintf+0x386>
    3598:	e8 cf       	rjmp	.-48     	; 0x356a <vfprintf+0x370>
    359a:	85 e4       	ldi	r24, 0x45	; 69
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	b7 01       	movw	r22, r14
    35a0:	4b d5       	rcall	.+2710   	; 0x4038 <fputc>
    35a2:	d7 fc       	sbrc	r13, 7
    35a4:	06 c0       	rjmp	.+12     	; 0x35b2 <vfprintf+0x3b8>
    35a6:	c1 14       	cp	r12, r1
    35a8:	d1 04       	cpc	r13, r1
    35aa:	41 f4       	brne	.+16     	; 0x35bc <vfprintf+0x3c2>
    35ac:	ec 85       	ldd	r30, Y+12	; 0x0c
    35ae:	e4 ff       	sbrs	r30, 4
    35b0:	05 c0       	rjmp	.+10     	; 0x35bc <vfprintf+0x3c2>
    35b2:	d1 94       	neg	r13
    35b4:	c1 94       	neg	r12
    35b6:	d1 08       	sbc	r13, r1
    35b8:	8d e2       	ldi	r24, 0x2D	; 45
    35ba:	01 c0       	rjmp	.+2      	; 0x35be <vfprintf+0x3c4>
    35bc:	8b e2       	ldi	r24, 0x2B	; 43
    35be:	b7 01       	movw	r22, r14
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	3a d5       	rcall	.+2676   	; 0x4038 <fputc>
    35c4:	80 e3       	ldi	r24, 0x30	; 48
    35c6:	2a e0       	ldi	r18, 0x0A	; 10
    35c8:	c2 16       	cp	r12, r18
    35ca:	d1 04       	cpc	r13, r1
    35cc:	2c f0       	brlt	.+10     	; 0x35d8 <vfprintf+0x3de>
    35ce:	8f 5f       	subi	r24, 0xFF	; 255
    35d0:	fa e0       	ldi	r31, 0x0A	; 10
    35d2:	cf 1a       	sub	r12, r31
    35d4:	d1 08       	sbc	r13, r1
    35d6:	f7 cf       	rjmp	.-18     	; 0x35c6 <vfprintf+0x3cc>
    35d8:	b7 01       	movw	r22, r14
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	2d d5       	rcall	.+2650   	; 0x4038 <fputc>
    35de:	b7 01       	movw	r22, r14
    35e0:	c6 01       	movw	r24, r12
    35e2:	c0 96       	adiw	r24, 0x30	; 48
    35e4:	29 d5       	rcall	.+2642   	; 0x4038 <fputc>
    35e6:	49 c1       	rjmp	.+658    	; 0x387a <vfprintf+0x680>
    35e8:	83 36       	cpi	r24, 0x63	; 99
    35ea:	31 f0       	breq	.+12     	; 0x35f8 <vfprintf+0x3fe>
    35ec:	83 37       	cpi	r24, 0x73	; 115
    35ee:	79 f0       	breq	.+30     	; 0x360e <vfprintf+0x414>
    35f0:	83 35       	cpi	r24, 0x53	; 83
    35f2:	09 f0       	breq	.+2      	; 0x35f6 <vfprintf+0x3fc>
    35f4:	52 c0       	rjmp	.+164    	; 0x369a <vfprintf+0x4a0>
    35f6:	1f c0       	rjmp	.+62     	; 0x3636 <vfprintf+0x43c>
    35f8:	56 01       	movw	r10, r12
    35fa:	32 e0       	ldi	r19, 0x02	; 2
    35fc:	a3 0e       	add	r10, r19
    35fe:	b1 1c       	adc	r11, r1
    3600:	f6 01       	movw	r30, r12
    3602:	80 81       	ld	r24, Z
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	01 e0       	ldi	r16, 0x01	; 1
    3608:	10 e0       	ldi	r17, 0x00	; 0
    360a:	63 01       	movw	r12, r6
    360c:	11 c0       	rjmp	.+34     	; 0x3630 <vfprintf+0x436>
    360e:	56 01       	movw	r10, r12
    3610:	f2 e0       	ldi	r31, 0x02	; 2
    3612:	af 0e       	add	r10, r31
    3614:	b1 1c       	adc	r11, r1
    3616:	f6 01       	movw	r30, r12
    3618:	c0 80       	ld	r12, Z
    361a:	d1 80       	ldd	r13, Z+1	; 0x01
    361c:	96 fe       	sbrs	r9, 6
    361e:	03 c0       	rjmp	.+6      	; 0x3626 <vfprintf+0x42c>
    3620:	61 2f       	mov	r22, r17
    3622:	70 e0       	ldi	r23, 0x00	; 0
    3624:	02 c0       	rjmp	.+4      	; 0x362a <vfprintf+0x430>
    3626:	6f ef       	ldi	r22, 0xFF	; 255
    3628:	7f ef       	ldi	r23, 0xFF	; 255
    362a:	c6 01       	movw	r24, r12
    362c:	fa d4       	rcall	.+2548   	; 0x4022 <strnlen>
    362e:	8c 01       	movw	r16, r24
    3630:	f9 2d       	mov	r31, r9
    3632:	ff 77       	andi	r31, 0x7F	; 127
    3634:	13 c0       	rjmp	.+38     	; 0x365c <vfprintf+0x462>
    3636:	56 01       	movw	r10, r12
    3638:	22 e0       	ldi	r18, 0x02	; 2
    363a:	a2 0e       	add	r10, r18
    363c:	b1 1c       	adc	r11, r1
    363e:	f6 01       	movw	r30, r12
    3640:	c0 80       	ld	r12, Z
    3642:	d1 80       	ldd	r13, Z+1	; 0x01
    3644:	96 fe       	sbrs	r9, 6
    3646:	03 c0       	rjmp	.+6      	; 0x364e <vfprintf+0x454>
    3648:	61 2f       	mov	r22, r17
    364a:	70 e0       	ldi	r23, 0x00	; 0
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <vfprintf+0x458>
    364e:	6f ef       	ldi	r22, 0xFF	; 255
    3650:	7f ef       	ldi	r23, 0xFF	; 255
    3652:	c6 01       	movw	r24, r12
    3654:	cb d4       	rcall	.+2454   	; 0x3fec <strnlen_P>
    3656:	8c 01       	movw	r16, r24
    3658:	f9 2d       	mov	r31, r9
    365a:	f0 68       	ori	r31, 0x80	; 128
    365c:	9f 2e       	mov	r9, r31
    365e:	f3 fd       	sbrc	r31, 3
    3660:	18 c0       	rjmp	.+48     	; 0x3692 <vfprintf+0x498>
    3662:	85 2d       	mov	r24, r5
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	08 17       	cp	r16, r24
    3668:	19 07       	cpc	r17, r25
    366a:	98 f4       	brcc	.+38     	; 0x3692 <vfprintf+0x498>
    366c:	b7 01       	movw	r22, r14
    366e:	80 e2       	ldi	r24, 0x20	; 32
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	e2 d4       	rcall	.+2500   	; 0x4038 <fputc>
    3674:	5a 94       	dec	r5
    3676:	f5 cf       	rjmp	.-22     	; 0x3662 <vfprintf+0x468>
    3678:	f6 01       	movw	r30, r12
    367a:	97 fc       	sbrc	r9, 7
    367c:	85 91       	lpm	r24, Z+
    367e:	97 fe       	sbrs	r9, 7
    3680:	81 91       	ld	r24, Z+
    3682:	6f 01       	movw	r12, r30
    3684:	b7 01       	movw	r22, r14
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	d7 d4       	rcall	.+2478   	; 0x4038 <fputc>
    368a:	51 10       	cpse	r5, r1
    368c:	5a 94       	dec	r5
    368e:	01 50       	subi	r16, 0x01	; 1
    3690:	11 09       	sbc	r17, r1
    3692:	01 15       	cp	r16, r1
    3694:	11 05       	cpc	r17, r1
    3696:	81 f7       	brne	.-32     	; 0x3678 <vfprintf+0x47e>
    3698:	f0 c0       	rjmp	.+480    	; 0x387a <vfprintf+0x680>
    369a:	84 36       	cpi	r24, 0x64	; 100
    369c:	11 f0       	breq	.+4      	; 0x36a2 <vfprintf+0x4a8>
    369e:	89 36       	cpi	r24, 0x69	; 105
    36a0:	59 f5       	brne	.+86     	; 0x36f8 <vfprintf+0x4fe>
    36a2:	56 01       	movw	r10, r12
    36a4:	97 fe       	sbrs	r9, 7
    36a6:	09 c0       	rjmp	.+18     	; 0x36ba <vfprintf+0x4c0>
    36a8:	24 e0       	ldi	r18, 0x04	; 4
    36aa:	a2 0e       	add	r10, r18
    36ac:	b1 1c       	adc	r11, r1
    36ae:	f6 01       	movw	r30, r12
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	0a c0       	rjmp	.+20     	; 0x36ce <vfprintf+0x4d4>
    36ba:	f2 e0       	ldi	r31, 0x02	; 2
    36bc:	af 0e       	add	r10, r31
    36be:	b1 1c       	adc	r11, r1
    36c0:	f6 01       	movw	r30, r12
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	07 2e       	mov	r0, r23
    36c8:	00 0c       	add	r0, r0
    36ca:	88 0b       	sbc	r24, r24
    36cc:	99 0b       	sbc	r25, r25
    36ce:	f9 2d       	mov	r31, r9
    36d0:	ff 76       	andi	r31, 0x6F	; 111
    36d2:	9f 2e       	mov	r9, r31
    36d4:	97 ff       	sbrs	r25, 7
    36d6:	09 c0       	rjmp	.+18     	; 0x36ea <vfprintf+0x4f0>
    36d8:	90 95       	com	r25
    36da:	80 95       	com	r24
    36dc:	70 95       	com	r23
    36de:	61 95       	neg	r22
    36e0:	7f 4f       	sbci	r23, 0xFF	; 255
    36e2:	8f 4f       	sbci	r24, 0xFF	; 255
    36e4:	9f 4f       	sbci	r25, 0xFF	; 255
    36e6:	f0 68       	ori	r31, 0x80	; 128
    36e8:	9f 2e       	mov	r9, r31
    36ea:	2a e0       	ldi	r18, 0x0A	; 10
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	a3 01       	movw	r20, r6
    36f0:	22 d5       	rcall	.+2628   	; 0x4136 <__ultoa_invert>
    36f2:	c8 2e       	mov	r12, r24
    36f4:	c6 18       	sub	r12, r6
    36f6:	3e c0       	rjmp	.+124    	; 0x3774 <vfprintf+0x57a>
    36f8:	09 2d       	mov	r16, r9
    36fa:	85 37       	cpi	r24, 0x75	; 117
    36fc:	21 f4       	brne	.+8      	; 0x3706 <vfprintf+0x50c>
    36fe:	0f 7e       	andi	r16, 0xEF	; 239
    3700:	2a e0       	ldi	r18, 0x0A	; 10
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	1d c0       	rjmp	.+58     	; 0x3740 <vfprintf+0x546>
    3706:	09 7f       	andi	r16, 0xF9	; 249
    3708:	8f 36       	cpi	r24, 0x6F	; 111
    370a:	91 f0       	breq	.+36     	; 0x3730 <vfprintf+0x536>
    370c:	18 f4       	brcc	.+6      	; 0x3714 <vfprintf+0x51a>
    370e:	88 35       	cpi	r24, 0x58	; 88
    3710:	59 f0       	breq	.+22     	; 0x3728 <vfprintf+0x52e>
    3712:	bc c0       	rjmp	.+376    	; 0x388c <vfprintf+0x692>
    3714:	80 37       	cpi	r24, 0x70	; 112
    3716:	19 f0       	breq	.+6      	; 0x371e <vfprintf+0x524>
    3718:	88 37       	cpi	r24, 0x78	; 120
    371a:	11 f0       	breq	.+4      	; 0x3720 <vfprintf+0x526>
    371c:	b7 c0       	rjmp	.+366    	; 0x388c <vfprintf+0x692>
    371e:	00 61       	ori	r16, 0x10	; 16
    3720:	04 ff       	sbrs	r16, 4
    3722:	09 c0       	rjmp	.+18     	; 0x3736 <vfprintf+0x53c>
    3724:	04 60       	ori	r16, 0x04	; 4
    3726:	07 c0       	rjmp	.+14     	; 0x3736 <vfprintf+0x53c>
    3728:	94 fe       	sbrs	r9, 4
    372a:	08 c0       	rjmp	.+16     	; 0x373c <vfprintf+0x542>
    372c:	06 60       	ori	r16, 0x06	; 6
    372e:	06 c0       	rjmp	.+12     	; 0x373c <vfprintf+0x542>
    3730:	28 e0       	ldi	r18, 0x08	; 8
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	05 c0       	rjmp	.+10     	; 0x3740 <vfprintf+0x546>
    3736:	20 e1       	ldi	r18, 0x10	; 16
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	02 c0       	rjmp	.+4      	; 0x3740 <vfprintf+0x546>
    373c:	20 e1       	ldi	r18, 0x10	; 16
    373e:	32 e0       	ldi	r19, 0x02	; 2
    3740:	56 01       	movw	r10, r12
    3742:	07 ff       	sbrs	r16, 7
    3744:	09 c0       	rjmp	.+18     	; 0x3758 <vfprintf+0x55e>
    3746:	84 e0       	ldi	r24, 0x04	; 4
    3748:	a8 0e       	add	r10, r24
    374a:	b1 1c       	adc	r11, r1
    374c:	f6 01       	movw	r30, r12
    374e:	60 81       	ld	r22, Z
    3750:	71 81       	ldd	r23, Z+1	; 0x01
    3752:	82 81       	ldd	r24, Z+2	; 0x02
    3754:	93 81       	ldd	r25, Z+3	; 0x03
    3756:	08 c0       	rjmp	.+16     	; 0x3768 <vfprintf+0x56e>
    3758:	f2 e0       	ldi	r31, 0x02	; 2
    375a:	af 0e       	add	r10, r31
    375c:	b1 1c       	adc	r11, r1
    375e:	f6 01       	movw	r30, r12
    3760:	60 81       	ld	r22, Z
    3762:	71 81       	ldd	r23, Z+1	; 0x01
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	a3 01       	movw	r20, r6
    376a:	e5 d4       	rcall	.+2506   	; 0x4136 <__ultoa_invert>
    376c:	c8 2e       	mov	r12, r24
    376e:	c6 18       	sub	r12, r6
    3770:	0f 77       	andi	r16, 0x7F	; 127
    3772:	90 2e       	mov	r9, r16
    3774:	96 fe       	sbrs	r9, 6
    3776:	0b c0       	rjmp	.+22     	; 0x378e <vfprintf+0x594>
    3778:	09 2d       	mov	r16, r9
    377a:	0e 7f       	andi	r16, 0xFE	; 254
    377c:	c1 16       	cp	r12, r17
    377e:	50 f4       	brcc	.+20     	; 0x3794 <vfprintf+0x59a>
    3780:	94 fe       	sbrs	r9, 4
    3782:	0a c0       	rjmp	.+20     	; 0x3798 <vfprintf+0x59e>
    3784:	92 fc       	sbrc	r9, 2
    3786:	08 c0       	rjmp	.+16     	; 0x3798 <vfprintf+0x59e>
    3788:	09 2d       	mov	r16, r9
    378a:	0e 7e       	andi	r16, 0xEE	; 238
    378c:	05 c0       	rjmp	.+10     	; 0x3798 <vfprintf+0x59e>
    378e:	dc 2c       	mov	r13, r12
    3790:	09 2d       	mov	r16, r9
    3792:	03 c0       	rjmp	.+6      	; 0x379a <vfprintf+0x5a0>
    3794:	dc 2c       	mov	r13, r12
    3796:	01 c0       	rjmp	.+2      	; 0x379a <vfprintf+0x5a0>
    3798:	d1 2e       	mov	r13, r17
    379a:	04 ff       	sbrs	r16, 4
    379c:	0d c0       	rjmp	.+26     	; 0x37b8 <vfprintf+0x5be>
    379e:	fe 01       	movw	r30, r28
    37a0:	ec 0d       	add	r30, r12
    37a2:	f1 1d       	adc	r31, r1
    37a4:	80 81       	ld	r24, Z
    37a6:	80 33       	cpi	r24, 0x30	; 48
    37a8:	11 f4       	brne	.+4      	; 0x37ae <vfprintf+0x5b4>
    37aa:	09 7e       	andi	r16, 0xE9	; 233
    37ac:	09 c0       	rjmp	.+18     	; 0x37c0 <vfprintf+0x5c6>
    37ae:	02 ff       	sbrs	r16, 2
    37b0:	06 c0       	rjmp	.+12     	; 0x37be <vfprintf+0x5c4>
    37b2:	d3 94       	inc	r13
    37b4:	d3 94       	inc	r13
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <vfprintf+0x5c6>
    37b8:	80 2f       	mov	r24, r16
    37ba:	86 78       	andi	r24, 0x86	; 134
    37bc:	09 f0       	breq	.+2      	; 0x37c0 <vfprintf+0x5c6>
    37be:	d3 94       	inc	r13
    37c0:	03 fd       	sbrc	r16, 3
    37c2:	10 c0       	rjmp	.+32     	; 0x37e4 <vfprintf+0x5ea>
    37c4:	00 ff       	sbrs	r16, 0
    37c6:	06 c0       	rjmp	.+12     	; 0x37d4 <vfprintf+0x5da>
    37c8:	1c 2d       	mov	r17, r12
    37ca:	d5 14       	cp	r13, r5
    37cc:	78 f4       	brcc	.+30     	; 0x37ec <vfprintf+0x5f2>
    37ce:	15 0d       	add	r17, r5
    37d0:	1d 19       	sub	r17, r13
    37d2:	0c c0       	rjmp	.+24     	; 0x37ec <vfprintf+0x5f2>
    37d4:	d5 14       	cp	r13, r5
    37d6:	50 f4       	brcc	.+20     	; 0x37ec <vfprintf+0x5f2>
    37d8:	b7 01       	movw	r22, r14
    37da:	80 e2       	ldi	r24, 0x20	; 32
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	2c d4       	rcall	.+2136   	; 0x4038 <fputc>
    37e0:	d3 94       	inc	r13
    37e2:	f8 cf       	rjmp	.-16     	; 0x37d4 <vfprintf+0x5da>
    37e4:	d5 14       	cp	r13, r5
    37e6:	10 f4       	brcc	.+4      	; 0x37ec <vfprintf+0x5f2>
    37e8:	5d 18       	sub	r5, r13
    37ea:	01 c0       	rjmp	.+2      	; 0x37ee <vfprintf+0x5f4>
    37ec:	51 2c       	mov	r5, r1
    37ee:	04 ff       	sbrs	r16, 4
    37f0:	0f c0       	rjmp	.+30     	; 0x3810 <vfprintf+0x616>
    37f2:	b7 01       	movw	r22, r14
    37f4:	80 e3       	ldi	r24, 0x30	; 48
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	1f d4       	rcall	.+2110   	; 0x4038 <fputc>
    37fa:	02 ff       	sbrs	r16, 2
    37fc:	16 c0       	rjmp	.+44     	; 0x382a <vfprintf+0x630>
    37fe:	01 fd       	sbrc	r16, 1
    3800:	03 c0       	rjmp	.+6      	; 0x3808 <vfprintf+0x60e>
    3802:	88 e7       	ldi	r24, 0x78	; 120
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	02 c0       	rjmp	.+4      	; 0x380c <vfprintf+0x612>
    3808:	88 e5       	ldi	r24, 0x58	; 88
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	b7 01       	movw	r22, r14
    380e:	0c c0       	rjmp	.+24     	; 0x3828 <vfprintf+0x62e>
    3810:	80 2f       	mov	r24, r16
    3812:	86 78       	andi	r24, 0x86	; 134
    3814:	51 f0       	breq	.+20     	; 0x382a <vfprintf+0x630>
    3816:	01 ff       	sbrs	r16, 1
    3818:	02 c0       	rjmp	.+4      	; 0x381e <vfprintf+0x624>
    381a:	8b e2       	ldi	r24, 0x2B	; 43
    381c:	01 c0       	rjmp	.+2      	; 0x3820 <vfprintf+0x626>
    381e:	80 e2       	ldi	r24, 0x20	; 32
    3820:	07 fd       	sbrc	r16, 7
    3822:	8d e2       	ldi	r24, 0x2D	; 45
    3824:	b7 01       	movw	r22, r14
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	07 d4       	rcall	.+2062   	; 0x4038 <fputc>
    382a:	c1 16       	cp	r12, r17
    382c:	30 f4       	brcc	.+12     	; 0x383a <vfprintf+0x640>
    382e:	b7 01       	movw	r22, r14
    3830:	80 e3       	ldi	r24, 0x30	; 48
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	01 d4       	rcall	.+2050   	; 0x4038 <fputc>
    3836:	11 50       	subi	r17, 0x01	; 1
    3838:	f8 cf       	rjmp	.-16     	; 0x382a <vfprintf+0x630>
    383a:	ca 94       	dec	r12
    383c:	f3 01       	movw	r30, r6
    383e:	ec 0d       	add	r30, r12
    3840:	f1 1d       	adc	r31, r1
    3842:	80 81       	ld	r24, Z
    3844:	b7 01       	movw	r22, r14
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	f7 d3       	rcall	.+2030   	; 0x4038 <fputc>
    384a:	c1 10       	cpse	r12, r1
    384c:	f6 cf       	rjmp	.-20     	; 0x383a <vfprintf+0x640>
    384e:	15 c0       	rjmp	.+42     	; 0x387a <vfprintf+0x680>
    3850:	f4 e0       	ldi	r31, 0x04	; 4
    3852:	f5 15       	cp	r31, r5
    3854:	50 f5       	brcc	.+84     	; 0x38aa <vfprintf+0x6b0>
    3856:	84 e0       	ldi	r24, 0x04	; 4
    3858:	58 1a       	sub	r5, r24
    385a:	93 fe       	sbrs	r9, 3
    385c:	1e c0       	rjmp	.+60     	; 0x389a <vfprintf+0x6a0>
    385e:	01 11       	cpse	r16, r1
    3860:	25 c0       	rjmp	.+74     	; 0x38ac <vfprintf+0x6b2>
    3862:	2c 85       	ldd	r18, Y+12	; 0x0c
    3864:	23 ff       	sbrs	r18, 3
    3866:	27 c0       	rjmp	.+78     	; 0x38b6 <vfprintf+0x6bc>
    3868:	0a e9       	ldi	r16, 0x9A	; 154
    386a:	11 e0       	ldi	r17, 0x01	; 1
    386c:	39 2d       	mov	r19, r9
    386e:	30 71       	andi	r19, 0x10	; 16
    3870:	93 2e       	mov	r9, r19
    3872:	f8 01       	movw	r30, r16
    3874:	84 91       	lpm	r24, Z
    3876:	81 11       	cpse	r24, r1
    3878:	21 c0       	rjmp	.+66     	; 0x38bc <vfprintf+0x6c2>
    387a:	55 20       	and	r5, r5
    387c:	09 f4       	brne	.+2      	; 0x3880 <vfprintf+0x686>
    387e:	fc cc       	rjmp	.-1544   	; 0x3278 <vfprintf+0x7e>
    3880:	b7 01       	movw	r22, r14
    3882:	80 e2       	ldi	r24, 0x20	; 32
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	d8 d3       	rcall	.+1968   	; 0x4038 <fputc>
    3888:	5a 94       	dec	r5
    388a:	f7 cf       	rjmp	.-18     	; 0x387a <vfprintf+0x680>
    388c:	f7 01       	movw	r30, r14
    388e:	86 81       	ldd	r24, Z+6	; 0x06
    3890:	97 81       	ldd	r25, Z+7	; 0x07
    3892:	23 c0       	rjmp	.+70     	; 0x38da <vfprintf+0x6e0>
    3894:	8f ef       	ldi	r24, 0xFF	; 255
    3896:	9f ef       	ldi	r25, 0xFF	; 255
    3898:	20 c0       	rjmp	.+64     	; 0x38da <vfprintf+0x6e0>
    389a:	b7 01       	movw	r22, r14
    389c:	80 e2       	ldi	r24, 0x20	; 32
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	cb d3       	rcall	.+1942   	; 0x4038 <fputc>
    38a2:	5a 94       	dec	r5
    38a4:	51 10       	cpse	r5, r1
    38a6:	f9 cf       	rjmp	.-14     	; 0x389a <vfprintf+0x6a0>
    38a8:	da cf       	rjmp	.-76     	; 0x385e <vfprintf+0x664>
    38aa:	51 2c       	mov	r5, r1
    38ac:	b7 01       	movw	r22, r14
    38ae:	80 2f       	mov	r24, r16
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	c2 d3       	rcall	.+1924   	; 0x4038 <fputc>
    38b4:	d6 cf       	rjmp	.-84     	; 0x3862 <vfprintf+0x668>
    38b6:	0e e9       	ldi	r16, 0x9E	; 158
    38b8:	11 e0       	ldi	r17, 0x01	; 1
    38ba:	d8 cf       	rjmp	.-80     	; 0x386c <vfprintf+0x672>
    38bc:	91 10       	cpse	r9, r1
    38be:	80 52       	subi	r24, 0x20	; 32
    38c0:	b7 01       	movw	r22, r14
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	b9 d3       	rcall	.+1906   	; 0x4038 <fputc>
    38c6:	0f 5f       	subi	r16, 0xFF	; 255
    38c8:	1f 4f       	sbci	r17, 0xFF	; 255
    38ca:	d3 cf       	rjmp	.-90     	; 0x3872 <vfprintf+0x678>
    38cc:	23 e0       	ldi	r18, 0x03	; 3
    38ce:	25 15       	cp	r18, r5
    38d0:	10 f4       	brcc	.+4      	; 0x38d6 <vfprintf+0x6dc>
    38d2:	83 e0       	ldi	r24, 0x03	; 3
    38d4:	c1 cf       	rjmp	.-126    	; 0x3858 <vfprintf+0x65e>
    38d6:	51 2c       	mov	r5, r1
    38d8:	c4 cf       	rjmp	.-120    	; 0x3862 <vfprintf+0x668>
    38da:	60 96       	adiw	r28, 0x10	; 16
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	ff 90       	pop	r15
    38f0:	ef 90       	pop	r14
    38f2:	df 90       	pop	r13
    38f4:	cf 90       	pop	r12
    38f6:	bf 90       	pop	r11
    38f8:	af 90       	pop	r10
    38fa:	9f 90       	pop	r9
    38fc:	8f 90       	pop	r8
    38fe:	7f 90       	pop	r7
    3900:	6f 90       	pop	r6
    3902:	5f 90       	pop	r5
    3904:	4f 90       	pop	r4
    3906:	3f 90       	pop	r3
    3908:	2f 90       	pop	r2
    390a:	08 95       	ret

0000390c <__divsf3>:
    390c:	12 d0       	rcall	.+36     	; 0x3932 <__divsf3x>
    390e:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__fp_round>
    3912:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__fp_pscB>
    3916:	58 f0       	brcs	.+22     	; 0x392e <__divsf3+0x22>
    3918:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__fp_pscA>
    391c:	40 f0       	brcs	.+16     	; 0x392e <__divsf3+0x22>
    391e:	29 f4       	brne	.+10     	; 0x392a <__divsf3+0x1e>
    3920:	5f 3f       	cpi	r21, 0xFF	; 255
    3922:	29 f0       	breq	.+10     	; 0x392e <__divsf3+0x22>
    3924:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_inf>
    3928:	51 11       	cpse	r21, r1
    392a:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__fp_szero>
    392e:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__fp_nan>

00003932 <__divsf3x>:
    3932:	0e 94 09 13 	call	0x2612	; 0x2612 <__fp_split3>
    3936:	68 f3       	brcs	.-38     	; 0x3912 <__divsf3+0x6>

00003938 <__divsf3_pse>:
    3938:	99 23       	and	r25, r25
    393a:	b1 f3       	breq	.-20     	; 0x3928 <__divsf3+0x1c>
    393c:	55 23       	and	r21, r21
    393e:	91 f3       	breq	.-28     	; 0x3924 <__divsf3+0x18>
    3940:	95 1b       	sub	r25, r21
    3942:	55 0b       	sbc	r21, r21
    3944:	bb 27       	eor	r27, r27
    3946:	aa 27       	eor	r26, r26
    3948:	62 17       	cp	r22, r18
    394a:	73 07       	cpc	r23, r19
    394c:	84 07       	cpc	r24, r20
    394e:	38 f0       	brcs	.+14     	; 0x395e <__divsf3_pse+0x26>
    3950:	9f 5f       	subi	r25, 0xFF	; 255
    3952:	5f 4f       	sbci	r21, 0xFF	; 255
    3954:	22 0f       	add	r18, r18
    3956:	33 1f       	adc	r19, r19
    3958:	44 1f       	adc	r20, r20
    395a:	aa 1f       	adc	r26, r26
    395c:	a9 f3       	breq	.-22     	; 0x3948 <__divsf3_pse+0x10>
    395e:	35 d0       	rcall	.+106    	; 0x39ca <__divsf3_pse+0x92>
    3960:	0e 2e       	mov	r0, r30
    3962:	3a f0       	brmi	.+14     	; 0x3972 <__divsf3_pse+0x3a>
    3964:	e0 e8       	ldi	r30, 0x80	; 128
    3966:	32 d0       	rcall	.+100    	; 0x39cc <__divsf3_pse+0x94>
    3968:	91 50       	subi	r25, 0x01	; 1
    396a:	50 40       	sbci	r21, 0x00	; 0
    396c:	e6 95       	lsr	r30
    396e:	00 1c       	adc	r0, r0
    3970:	ca f7       	brpl	.-14     	; 0x3964 <__divsf3_pse+0x2c>
    3972:	2b d0       	rcall	.+86     	; 0x39ca <__divsf3_pse+0x92>
    3974:	fe 2f       	mov	r31, r30
    3976:	29 d0       	rcall	.+82     	; 0x39ca <__divsf3_pse+0x92>
    3978:	66 0f       	add	r22, r22
    397a:	77 1f       	adc	r23, r23
    397c:	88 1f       	adc	r24, r24
    397e:	bb 1f       	adc	r27, r27
    3980:	26 17       	cp	r18, r22
    3982:	37 07       	cpc	r19, r23
    3984:	48 07       	cpc	r20, r24
    3986:	ab 07       	cpc	r26, r27
    3988:	b0 e8       	ldi	r27, 0x80	; 128
    398a:	09 f0       	breq	.+2      	; 0x398e <__divsf3_pse+0x56>
    398c:	bb 0b       	sbc	r27, r27
    398e:	80 2d       	mov	r24, r0
    3990:	bf 01       	movw	r22, r30
    3992:	ff 27       	eor	r31, r31
    3994:	93 58       	subi	r25, 0x83	; 131
    3996:	5f 4f       	sbci	r21, 0xFF	; 255
    3998:	3a f0       	brmi	.+14     	; 0x39a8 <__divsf3_pse+0x70>
    399a:	9e 3f       	cpi	r25, 0xFE	; 254
    399c:	51 05       	cpc	r21, r1
    399e:	78 f0       	brcs	.+30     	; 0x39be <__divsf3_pse+0x86>
    39a0:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_inf>
    39a4:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__fp_szero>
    39a8:	5f 3f       	cpi	r21, 0xFF	; 255
    39aa:	e4 f3       	brlt	.-8      	; 0x39a4 <__divsf3_pse+0x6c>
    39ac:	98 3e       	cpi	r25, 0xE8	; 232
    39ae:	d4 f3       	brlt	.-12     	; 0x39a4 <__divsf3_pse+0x6c>
    39b0:	86 95       	lsr	r24
    39b2:	77 95       	ror	r23
    39b4:	67 95       	ror	r22
    39b6:	b7 95       	ror	r27
    39b8:	f7 95       	ror	r31
    39ba:	9f 5f       	subi	r25, 0xFF	; 255
    39bc:	c9 f7       	brne	.-14     	; 0x39b0 <__divsf3_pse+0x78>
    39be:	88 0f       	add	r24, r24
    39c0:	91 1d       	adc	r25, r1
    39c2:	96 95       	lsr	r25
    39c4:	87 95       	ror	r24
    39c6:	97 f9       	bld	r25, 7
    39c8:	08 95       	ret
    39ca:	e1 e0       	ldi	r30, 0x01	; 1
    39cc:	66 0f       	add	r22, r22
    39ce:	77 1f       	adc	r23, r23
    39d0:	88 1f       	adc	r24, r24
    39d2:	bb 1f       	adc	r27, r27
    39d4:	62 17       	cp	r22, r18
    39d6:	73 07       	cpc	r23, r19
    39d8:	84 07       	cpc	r24, r20
    39da:	ba 07       	cpc	r27, r26
    39dc:	20 f0       	brcs	.+8      	; 0x39e6 <__divsf3_pse+0xae>
    39de:	62 1b       	sub	r22, r18
    39e0:	73 0b       	sbc	r23, r19
    39e2:	84 0b       	sbc	r24, r20
    39e4:	ba 0b       	sbc	r27, r26
    39e6:	ee 1f       	adc	r30, r30
    39e8:	88 f7       	brcc	.-30     	; 0x39cc <__divsf3_pse+0x94>
    39ea:	e0 95       	com	r30
    39ec:	08 95       	ret

000039ee <__fixunssfsi>:
    39ee:	0e 94 11 13 	call	0x2622	; 0x2622 <__fp_splitA>
    39f2:	88 f0       	brcs	.+34     	; 0x3a16 <__fixunssfsi+0x28>
    39f4:	9f 57       	subi	r25, 0x7F	; 127
    39f6:	98 f0       	brcs	.+38     	; 0x3a1e <__fixunssfsi+0x30>
    39f8:	b9 2f       	mov	r27, r25
    39fa:	99 27       	eor	r25, r25
    39fc:	b7 51       	subi	r27, 0x17	; 23
    39fe:	b0 f0       	brcs	.+44     	; 0x3a2c <__fixunssfsi+0x3e>
    3a00:	e1 f0       	breq	.+56     	; 0x3a3a <__fixunssfsi+0x4c>
    3a02:	66 0f       	add	r22, r22
    3a04:	77 1f       	adc	r23, r23
    3a06:	88 1f       	adc	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	1a f0       	brmi	.+6      	; 0x3a12 <__fixunssfsi+0x24>
    3a0c:	ba 95       	dec	r27
    3a0e:	c9 f7       	brne	.-14     	; 0x3a02 <__fixunssfsi+0x14>
    3a10:	14 c0       	rjmp	.+40     	; 0x3a3a <__fixunssfsi+0x4c>
    3a12:	b1 30       	cpi	r27, 0x01	; 1
    3a14:	91 f0       	breq	.+36     	; 0x3a3a <__fixunssfsi+0x4c>
    3a16:	0e 94 2b 13 	call	0x2656	; 0x2656 <__fp_zero>
    3a1a:	b1 e0       	ldi	r27, 0x01	; 1
    3a1c:	08 95       	ret
    3a1e:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__fp_zero>
    3a22:	67 2f       	mov	r22, r23
    3a24:	78 2f       	mov	r23, r24
    3a26:	88 27       	eor	r24, r24
    3a28:	b8 5f       	subi	r27, 0xF8	; 248
    3a2a:	39 f0       	breq	.+14     	; 0x3a3a <__fixunssfsi+0x4c>
    3a2c:	b9 3f       	cpi	r27, 0xF9	; 249
    3a2e:	cc f3       	brlt	.-14     	; 0x3a22 <__fixunssfsi+0x34>
    3a30:	86 95       	lsr	r24
    3a32:	77 95       	ror	r23
    3a34:	67 95       	ror	r22
    3a36:	b3 95       	inc	r27
    3a38:	d9 f7       	brne	.-10     	; 0x3a30 <__fixunssfsi+0x42>
    3a3a:	3e f4       	brtc	.+14     	; 0x3a4a <__fixunssfsi+0x5c>
    3a3c:	90 95       	com	r25
    3a3e:	80 95       	com	r24
    3a40:	70 95       	com	r23
    3a42:	61 95       	neg	r22
    3a44:	7f 4f       	sbci	r23, 0xFF	; 255
    3a46:	8f 4f       	sbci	r24, 0xFF	; 255
    3a48:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4a:	08 95       	ret

00003a4c <__floatunsisf>:
    3a4c:	e8 94       	clt
    3a4e:	09 c0       	rjmp	.+18     	; 0x3a62 <__floatsisf+0x12>

00003a50 <__floatsisf>:
    3a50:	97 fb       	bst	r25, 7
    3a52:	3e f4       	brtc	.+14     	; 0x3a62 <__floatsisf+0x12>
    3a54:	90 95       	com	r25
    3a56:	80 95       	com	r24
    3a58:	70 95       	com	r23
    3a5a:	61 95       	neg	r22
    3a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a60:	9f 4f       	sbci	r25, 0xFF	; 255
    3a62:	99 23       	and	r25, r25
    3a64:	a9 f0       	breq	.+42     	; 0x3a90 <__floatsisf+0x40>
    3a66:	f9 2f       	mov	r31, r25
    3a68:	96 e9       	ldi	r25, 0x96	; 150
    3a6a:	bb 27       	eor	r27, r27
    3a6c:	93 95       	inc	r25
    3a6e:	f6 95       	lsr	r31
    3a70:	87 95       	ror	r24
    3a72:	77 95       	ror	r23
    3a74:	67 95       	ror	r22
    3a76:	b7 95       	ror	r27
    3a78:	f1 11       	cpse	r31, r1
    3a7a:	f8 cf       	rjmp	.-16     	; 0x3a6c <__floatsisf+0x1c>
    3a7c:	fa f4       	brpl	.+62     	; 0x3abc <__floatsisf+0x6c>
    3a7e:	bb 0f       	add	r27, r27
    3a80:	11 f4       	brne	.+4      	; 0x3a86 <__floatsisf+0x36>
    3a82:	60 ff       	sbrs	r22, 0
    3a84:	1b c0       	rjmp	.+54     	; 0x3abc <__floatsisf+0x6c>
    3a86:	6f 5f       	subi	r22, 0xFF	; 255
    3a88:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8e:	16 c0       	rjmp	.+44     	; 0x3abc <__floatsisf+0x6c>
    3a90:	88 23       	and	r24, r24
    3a92:	11 f0       	breq	.+4      	; 0x3a98 <__floatsisf+0x48>
    3a94:	96 e9       	ldi	r25, 0x96	; 150
    3a96:	11 c0       	rjmp	.+34     	; 0x3aba <__floatsisf+0x6a>
    3a98:	77 23       	and	r23, r23
    3a9a:	21 f0       	breq	.+8      	; 0x3aa4 <__floatsisf+0x54>
    3a9c:	9e e8       	ldi	r25, 0x8E	; 142
    3a9e:	87 2f       	mov	r24, r23
    3aa0:	76 2f       	mov	r23, r22
    3aa2:	05 c0       	rjmp	.+10     	; 0x3aae <__floatsisf+0x5e>
    3aa4:	66 23       	and	r22, r22
    3aa6:	71 f0       	breq	.+28     	; 0x3ac4 <__floatsisf+0x74>
    3aa8:	96 e8       	ldi	r25, 0x86	; 134
    3aaa:	86 2f       	mov	r24, r22
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	2a f0       	brmi	.+10     	; 0x3abc <__floatsisf+0x6c>
    3ab2:	9a 95       	dec	r25
    3ab4:	66 0f       	add	r22, r22
    3ab6:	77 1f       	adc	r23, r23
    3ab8:	88 1f       	adc	r24, r24
    3aba:	da f7       	brpl	.-10     	; 0x3ab2 <__floatsisf+0x62>
    3abc:	88 0f       	add	r24, r24
    3abe:	96 95       	lsr	r25
    3ac0:	87 95       	ror	r24
    3ac2:	97 f9       	bld	r25, 7
    3ac4:	08 95       	ret

00003ac6 <__mulsf3>:
    3ac6:	11 d0       	rcall	.+34     	; 0x3aea <__mulsf3x>
    3ac8:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__fp_round>
    3acc:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__fp_pscA>
    3ad0:	38 f0       	brcs	.+14     	; 0x3ae0 <__mulsf3+0x1a>
    3ad2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__fp_pscB>
    3ad6:	20 f0       	brcs	.+8      	; 0x3ae0 <__mulsf3+0x1a>
    3ad8:	95 23       	and	r25, r21
    3ada:	11 f0       	breq	.+4      	; 0x3ae0 <__mulsf3+0x1a>
    3adc:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_inf>
    3ae0:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__fp_nan>
    3ae4:	11 24       	eor	r1, r1
    3ae6:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__fp_szero>

00003aea <__mulsf3x>:
    3aea:	0e 94 09 13 	call	0x2612	; 0x2612 <__fp_split3>
    3aee:	70 f3       	brcs	.-36     	; 0x3acc <__mulsf3+0x6>

00003af0 <__mulsf3_pse>:
    3af0:	95 9f       	mul	r25, r21
    3af2:	c1 f3       	breq	.-16     	; 0x3ae4 <__mulsf3+0x1e>
    3af4:	95 0f       	add	r25, r21
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	55 1f       	adc	r21, r21
    3afa:	62 9f       	mul	r22, r18
    3afc:	f0 01       	movw	r30, r0
    3afe:	72 9f       	mul	r23, r18
    3b00:	bb 27       	eor	r27, r27
    3b02:	f0 0d       	add	r31, r0
    3b04:	b1 1d       	adc	r27, r1
    3b06:	63 9f       	mul	r22, r19
    3b08:	aa 27       	eor	r26, r26
    3b0a:	f0 0d       	add	r31, r0
    3b0c:	b1 1d       	adc	r27, r1
    3b0e:	aa 1f       	adc	r26, r26
    3b10:	64 9f       	mul	r22, r20
    3b12:	66 27       	eor	r22, r22
    3b14:	b0 0d       	add	r27, r0
    3b16:	a1 1d       	adc	r26, r1
    3b18:	66 1f       	adc	r22, r22
    3b1a:	82 9f       	mul	r24, r18
    3b1c:	22 27       	eor	r18, r18
    3b1e:	b0 0d       	add	r27, r0
    3b20:	a1 1d       	adc	r26, r1
    3b22:	62 1f       	adc	r22, r18
    3b24:	73 9f       	mul	r23, r19
    3b26:	b0 0d       	add	r27, r0
    3b28:	a1 1d       	adc	r26, r1
    3b2a:	62 1f       	adc	r22, r18
    3b2c:	83 9f       	mul	r24, r19
    3b2e:	a0 0d       	add	r26, r0
    3b30:	61 1d       	adc	r22, r1
    3b32:	22 1f       	adc	r18, r18
    3b34:	74 9f       	mul	r23, r20
    3b36:	33 27       	eor	r19, r19
    3b38:	a0 0d       	add	r26, r0
    3b3a:	61 1d       	adc	r22, r1
    3b3c:	23 1f       	adc	r18, r19
    3b3e:	84 9f       	mul	r24, r20
    3b40:	60 0d       	add	r22, r0
    3b42:	21 1d       	adc	r18, r1
    3b44:	82 2f       	mov	r24, r18
    3b46:	76 2f       	mov	r23, r22
    3b48:	6a 2f       	mov	r22, r26
    3b4a:	11 24       	eor	r1, r1
    3b4c:	9f 57       	subi	r25, 0x7F	; 127
    3b4e:	50 40       	sbci	r21, 0x00	; 0
    3b50:	9a f0       	brmi	.+38     	; 0x3b78 <__mulsf3_pse+0x88>
    3b52:	f1 f0       	breq	.+60     	; 0x3b90 <__mulsf3_pse+0xa0>
    3b54:	88 23       	and	r24, r24
    3b56:	4a f0       	brmi	.+18     	; 0x3b6a <__mulsf3_pse+0x7a>
    3b58:	ee 0f       	add	r30, r30
    3b5a:	ff 1f       	adc	r31, r31
    3b5c:	bb 1f       	adc	r27, r27
    3b5e:	66 1f       	adc	r22, r22
    3b60:	77 1f       	adc	r23, r23
    3b62:	88 1f       	adc	r24, r24
    3b64:	91 50       	subi	r25, 0x01	; 1
    3b66:	50 40       	sbci	r21, 0x00	; 0
    3b68:	a9 f7       	brne	.-22     	; 0x3b54 <__mulsf3_pse+0x64>
    3b6a:	9e 3f       	cpi	r25, 0xFE	; 254
    3b6c:	51 05       	cpc	r21, r1
    3b6e:	80 f0       	brcs	.+32     	; 0x3b90 <__mulsf3_pse+0xa0>
    3b70:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__fp_inf>
    3b74:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__fp_szero>
    3b78:	5f 3f       	cpi	r21, 0xFF	; 255
    3b7a:	e4 f3       	brlt	.-8      	; 0x3b74 <__mulsf3_pse+0x84>
    3b7c:	98 3e       	cpi	r25, 0xE8	; 232
    3b7e:	d4 f3       	brlt	.-12     	; 0x3b74 <__mulsf3_pse+0x84>
    3b80:	86 95       	lsr	r24
    3b82:	77 95       	ror	r23
    3b84:	67 95       	ror	r22
    3b86:	b7 95       	ror	r27
    3b88:	f7 95       	ror	r31
    3b8a:	e7 95       	ror	r30
    3b8c:	9f 5f       	subi	r25, 0xFF	; 255
    3b8e:	c1 f7       	brne	.-16     	; 0x3b80 <__mulsf3_pse+0x90>
    3b90:	fe 2b       	or	r31, r30
    3b92:	88 0f       	add	r24, r24
    3b94:	91 1d       	adc	r25, r1
    3b96:	96 95       	lsr	r25
    3b98:	87 95       	ror	r24
    3b9a:	97 f9       	bld	r25, 7
    3b9c:	08 95       	ret

00003b9e <__udivmodsi4>:
    3b9e:	a1 e2       	ldi	r26, 0x21	; 33
    3ba0:	1a 2e       	mov	r1, r26
    3ba2:	aa 1b       	sub	r26, r26
    3ba4:	bb 1b       	sub	r27, r27
    3ba6:	fd 01       	movw	r30, r26
    3ba8:	0d c0       	rjmp	.+26     	; 0x3bc4 <__udivmodsi4_ep>

00003baa <__udivmodsi4_loop>:
    3baa:	aa 1f       	adc	r26, r26
    3bac:	bb 1f       	adc	r27, r27
    3bae:	ee 1f       	adc	r30, r30
    3bb0:	ff 1f       	adc	r31, r31
    3bb2:	a2 17       	cp	r26, r18
    3bb4:	b3 07       	cpc	r27, r19
    3bb6:	e4 07       	cpc	r30, r20
    3bb8:	f5 07       	cpc	r31, r21
    3bba:	20 f0       	brcs	.+8      	; 0x3bc4 <__udivmodsi4_ep>
    3bbc:	a2 1b       	sub	r26, r18
    3bbe:	b3 0b       	sbc	r27, r19
    3bc0:	e4 0b       	sbc	r30, r20
    3bc2:	f5 0b       	sbc	r31, r21

00003bc4 <__udivmodsi4_ep>:
    3bc4:	66 1f       	adc	r22, r22
    3bc6:	77 1f       	adc	r23, r23
    3bc8:	88 1f       	adc	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	1a 94       	dec	r1
    3bce:	69 f7       	brne	.-38     	; 0x3baa <__udivmodsi4_loop>
    3bd0:	60 95       	com	r22
    3bd2:	70 95       	com	r23
    3bd4:	80 95       	com	r24
    3bd6:	90 95       	com	r25
    3bd8:	9b 01       	movw	r18, r22
    3bda:	ac 01       	movw	r20, r24
    3bdc:	bd 01       	movw	r22, r26
    3bde:	cf 01       	movw	r24, r30
    3be0:	08 95       	ret

00003be2 <__tablejump2__>:
    3be2:	ee 0f       	add	r30, r30
    3be4:	ff 1f       	adc	r31, r31
    3be6:	88 1f       	adc	r24, r24
    3be8:	8b bf       	out	0x3b, r24	; 59
    3bea:	07 90       	elpm	r0, Z+
    3bec:	f6 91       	elpm	r31, Z
    3bee:	e0 2d       	mov	r30, r0
    3bf0:	19 94       	eijmp

00003bf2 <malloc>:
    3bf2:	0f 93       	push	r16
    3bf4:	1f 93       	push	r17
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	82 30       	cpi	r24, 0x02	; 2
    3bfc:	91 05       	cpc	r25, r1
    3bfe:	10 f4       	brcc	.+4      	; 0x3c04 <malloc+0x12>
    3c00:	82 e0       	ldi	r24, 0x02	; 2
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	e0 91 51 0d 	lds	r30, 0x0D51	; 0x800d51 <__flp>
    3c08:	f0 91 52 0d 	lds	r31, 0x0D52	; 0x800d52 <__flp+0x1>
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	a0 e0       	ldi	r26, 0x00	; 0
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	30 97       	sbiw	r30, 0x00	; 0
    3c16:	19 f1       	breq	.+70     	; 0x3c5e <malloc+0x6c>
    3c18:	40 81       	ld	r20, Z
    3c1a:	51 81       	ldd	r21, Z+1	; 0x01
    3c1c:	02 81       	ldd	r16, Z+2	; 0x02
    3c1e:	13 81       	ldd	r17, Z+3	; 0x03
    3c20:	48 17       	cp	r20, r24
    3c22:	59 07       	cpc	r21, r25
    3c24:	c8 f0       	brcs	.+50     	; 0x3c58 <malloc+0x66>
    3c26:	84 17       	cp	r24, r20
    3c28:	95 07       	cpc	r25, r21
    3c2a:	69 f4       	brne	.+26     	; 0x3c46 <malloc+0x54>
    3c2c:	10 97       	sbiw	r26, 0x00	; 0
    3c2e:	31 f0       	breq	.+12     	; 0x3c3c <malloc+0x4a>
    3c30:	12 96       	adiw	r26, 0x02	; 2
    3c32:	0c 93       	st	X, r16
    3c34:	12 97       	sbiw	r26, 0x02	; 2
    3c36:	13 96       	adiw	r26, 0x03	; 3
    3c38:	1c 93       	st	X, r17
    3c3a:	27 c0       	rjmp	.+78     	; 0x3c8a <malloc+0x98>
    3c3c:	00 93 51 0d 	sts	0x0D51, r16	; 0x800d51 <__flp>
    3c40:	10 93 52 0d 	sts	0x0D52, r17	; 0x800d52 <__flp+0x1>
    3c44:	22 c0       	rjmp	.+68     	; 0x3c8a <malloc+0x98>
    3c46:	21 15       	cp	r18, r1
    3c48:	31 05       	cpc	r19, r1
    3c4a:	19 f0       	breq	.+6      	; 0x3c52 <malloc+0x60>
    3c4c:	42 17       	cp	r20, r18
    3c4e:	53 07       	cpc	r21, r19
    3c50:	18 f4       	brcc	.+6      	; 0x3c58 <malloc+0x66>
    3c52:	9a 01       	movw	r18, r20
    3c54:	bd 01       	movw	r22, r26
    3c56:	ef 01       	movw	r28, r30
    3c58:	df 01       	movw	r26, r30
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	db cf       	rjmp	.-74     	; 0x3c14 <malloc+0x22>
    3c5e:	21 15       	cp	r18, r1
    3c60:	31 05       	cpc	r19, r1
    3c62:	f9 f0       	breq	.+62     	; 0x3ca2 <malloc+0xb0>
    3c64:	28 1b       	sub	r18, r24
    3c66:	39 0b       	sbc	r19, r25
    3c68:	24 30       	cpi	r18, 0x04	; 4
    3c6a:	31 05       	cpc	r19, r1
    3c6c:	80 f4       	brcc	.+32     	; 0x3c8e <malloc+0x9c>
    3c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c70:	9b 81       	ldd	r25, Y+3	; 0x03
    3c72:	61 15       	cp	r22, r1
    3c74:	71 05       	cpc	r23, r1
    3c76:	21 f0       	breq	.+8      	; 0x3c80 <malloc+0x8e>
    3c78:	fb 01       	movw	r30, r22
    3c7a:	93 83       	std	Z+3, r25	; 0x03
    3c7c:	82 83       	std	Z+2, r24	; 0x02
    3c7e:	04 c0       	rjmp	.+8      	; 0x3c88 <malloc+0x96>
    3c80:	90 93 52 0d 	sts	0x0D52, r25	; 0x800d52 <__flp+0x1>
    3c84:	80 93 51 0d 	sts	0x0D51, r24	; 0x800d51 <__flp>
    3c88:	fe 01       	movw	r30, r28
    3c8a:	32 96       	adiw	r30, 0x02	; 2
    3c8c:	44 c0       	rjmp	.+136    	; 0x3d16 <malloc+0x124>
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e2 0f       	add	r30, r18
    3c92:	f3 1f       	adc	r31, r19
    3c94:	81 93       	st	Z+, r24
    3c96:	91 93       	st	Z+, r25
    3c98:	22 50       	subi	r18, 0x02	; 2
    3c9a:	31 09       	sbc	r19, r1
    3c9c:	39 83       	std	Y+1, r19	; 0x01
    3c9e:	28 83       	st	Y, r18
    3ca0:	3a c0       	rjmp	.+116    	; 0x3d16 <malloc+0x124>
    3ca2:	20 91 4f 0d 	lds	r18, 0x0D4F	; 0x800d4f <__brkval>
    3ca6:	30 91 50 0d 	lds	r19, 0x0D50	; 0x800d50 <__brkval+0x1>
    3caa:	23 2b       	or	r18, r19
    3cac:	41 f4       	brne	.+16     	; 0x3cbe <malloc+0xcc>
    3cae:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3cb2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3cb6:	30 93 50 0d 	sts	0x0D50, r19	; 0x800d50 <__brkval+0x1>
    3cba:	20 93 4f 0d 	sts	0x0D4F, r18	; 0x800d4f <__brkval>
    3cbe:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3cc2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3cc6:	21 15       	cp	r18, r1
    3cc8:	31 05       	cpc	r19, r1
    3cca:	41 f4       	brne	.+16     	; 0x3cdc <malloc+0xea>
    3ccc:	2d b7       	in	r18, 0x3d	; 61
    3cce:	3e b7       	in	r19, 0x3e	; 62
    3cd0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3cd4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3cd8:	24 1b       	sub	r18, r20
    3cda:	35 0b       	sbc	r19, r21
    3cdc:	e0 91 4f 0d 	lds	r30, 0x0D4F	; 0x800d4f <__brkval>
    3ce0:	f0 91 50 0d 	lds	r31, 0x0D50	; 0x800d50 <__brkval+0x1>
    3ce4:	e2 17       	cp	r30, r18
    3ce6:	f3 07       	cpc	r31, r19
    3ce8:	a0 f4       	brcc	.+40     	; 0x3d12 <malloc+0x120>
    3cea:	2e 1b       	sub	r18, r30
    3cec:	3f 0b       	sbc	r19, r31
    3cee:	28 17       	cp	r18, r24
    3cf0:	39 07       	cpc	r19, r25
    3cf2:	78 f0       	brcs	.+30     	; 0x3d12 <malloc+0x120>
    3cf4:	ac 01       	movw	r20, r24
    3cf6:	4e 5f       	subi	r20, 0xFE	; 254
    3cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    3cfa:	24 17       	cp	r18, r20
    3cfc:	35 07       	cpc	r19, r21
    3cfe:	48 f0       	brcs	.+18     	; 0x3d12 <malloc+0x120>
    3d00:	4e 0f       	add	r20, r30
    3d02:	5f 1f       	adc	r21, r31
    3d04:	50 93 50 0d 	sts	0x0D50, r21	; 0x800d50 <__brkval+0x1>
    3d08:	40 93 4f 0d 	sts	0x0D4F, r20	; 0x800d4f <__brkval>
    3d0c:	81 93       	st	Z+, r24
    3d0e:	91 93       	st	Z+, r25
    3d10:	02 c0       	rjmp	.+4      	; 0x3d16 <malloc+0x124>
    3d12:	e0 e0       	ldi	r30, 0x00	; 0
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	cf 01       	movw	r24, r30
    3d18:	df 91       	pop	r29
    3d1a:	cf 91       	pop	r28
    3d1c:	1f 91       	pop	r17
    3d1e:	0f 91       	pop	r16
    3d20:	08 95       	ret

00003d22 <free>:
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	09 f4       	brne	.+2      	; 0x3d2c <free+0xa>
    3d2a:	81 c0       	rjmp	.+258    	; 0x3e2e <free+0x10c>
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	32 97       	sbiw	r30, 0x02	; 2
    3d30:	13 82       	std	Z+3, r1	; 0x03
    3d32:	12 82       	std	Z+2, r1	; 0x02
    3d34:	a0 91 51 0d 	lds	r26, 0x0D51	; 0x800d51 <__flp>
    3d38:	b0 91 52 0d 	lds	r27, 0x0D52	; 0x800d52 <__flp+0x1>
    3d3c:	10 97       	sbiw	r26, 0x00	; 0
    3d3e:	81 f4       	brne	.+32     	; 0x3d60 <free+0x3e>
    3d40:	20 81       	ld	r18, Z
    3d42:	31 81       	ldd	r19, Z+1	; 0x01
    3d44:	82 0f       	add	r24, r18
    3d46:	93 1f       	adc	r25, r19
    3d48:	20 91 4f 0d 	lds	r18, 0x0D4F	; 0x800d4f <__brkval>
    3d4c:	30 91 50 0d 	lds	r19, 0x0D50	; 0x800d50 <__brkval+0x1>
    3d50:	28 17       	cp	r18, r24
    3d52:	39 07       	cpc	r19, r25
    3d54:	51 f5       	brne	.+84     	; 0x3daa <free+0x88>
    3d56:	f0 93 50 0d 	sts	0x0D50, r31	; 0x800d50 <__brkval+0x1>
    3d5a:	e0 93 4f 0d 	sts	0x0D4F, r30	; 0x800d4f <__brkval>
    3d5e:	67 c0       	rjmp	.+206    	; 0x3e2e <free+0x10c>
    3d60:	ed 01       	movw	r28, r26
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	ce 17       	cp	r28, r30
    3d68:	df 07       	cpc	r29, r31
    3d6a:	40 f4       	brcc	.+16     	; 0x3d7c <free+0x5a>
    3d6c:	4a 81       	ldd	r20, Y+2	; 0x02
    3d6e:	5b 81       	ldd	r21, Y+3	; 0x03
    3d70:	9e 01       	movw	r18, r28
    3d72:	41 15       	cp	r20, r1
    3d74:	51 05       	cpc	r21, r1
    3d76:	f1 f0       	breq	.+60     	; 0x3db4 <free+0x92>
    3d78:	ea 01       	movw	r28, r20
    3d7a:	f5 cf       	rjmp	.-22     	; 0x3d66 <free+0x44>
    3d7c:	d3 83       	std	Z+3, r29	; 0x03
    3d7e:	c2 83       	std	Z+2, r28	; 0x02
    3d80:	40 81       	ld	r20, Z
    3d82:	51 81       	ldd	r21, Z+1	; 0x01
    3d84:	84 0f       	add	r24, r20
    3d86:	95 1f       	adc	r25, r21
    3d88:	c8 17       	cp	r28, r24
    3d8a:	d9 07       	cpc	r29, r25
    3d8c:	59 f4       	brne	.+22     	; 0x3da4 <free+0x82>
    3d8e:	88 81       	ld	r24, Y
    3d90:	99 81       	ldd	r25, Y+1	; 0x01
    3d92:	84 0f       	add	r24, r20
    3d94:	95 1f       	adc	r25, r21
    3d96:	02 96       	adiw	r24, 0x02	; 2
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	80 83       	st	Z, r24
    3d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3da0:	93 83       	std	Z+3, r25	; 0x03
    3da2:	82 83       	std	Z+2, r24	; 0x02
    3da4:	21 15       	cp	r18, r1
    3da6:	31 05       	cpc	r19, r1
    3da8:	29 f4       	brne	.+10     	; 0x3db4 <free+0x92>
    3daa:	f0 93 52 0d 	sts	0x0D52, r31	; 0x800d52 <__flp+0x1>
    3dae:	e0 93 51 0d 	sts	0x0D51, r30	; 0x800d51 <__flp>
    3db2:	3d c0       	rjmp	.+122    	; 0x3e2e <free+0x10c>
    3db4:	e9 01       	movw	r28, r18
    3db6:	fb 83       	std	Y+3, r31	; 0x03
    3db8:	ea 83       	std	Y+2, r30	; 0x02
    3dba:	49 91       	ld	r20, Y+
    3dbc:	59 91       	ld	r21, Y+
    3dbe:	c4 0f       	add	r28, r20
    3dc0:	d5 1f       	adc	r29, r21
    3dc2:	ec 17       	cp	r30, r28
    3dc4:	fd 07       	cpc	r31, r29
    3dc6:	61 f4       	brne	.+24     	; 0x3de0 <free+0xbe>
    3dc8:	80 81       	ld	r24, Z
    3dca:	91 81       	ldd	r25, Z+1	; 0x01
    3dcc:	84 0f       	add	r24, r20
    3dce:	95 1f       	adc	r25, r21
    3dd0:	02 96       	adiw	r24, 0x02	; 2
    3dd2:	e9 01       	movw	r28, r18
    3dd4:	99 83       	std	Y+1, r25	; 0x01
    3dd6:	88 83       	st	Y, r24
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	93 81       	ldd	r25, Z+3	; 0x03
    3ddc:	9b 83       	std	Y+3, r25	; 0x03
    3dde:	8a 83       	std	Y+2, r24	; 0x02
    3de0:	e0 e0       	ldi	r30, 0x00	; 0
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	12 96       	adiw	r26, 0x02	; 2
    3de6:	8d 91       	ld	r24, X+
    3de8:	9c 91       	ld	r25, X
    3dea:	13 97       	sbiw	r26, 0x03	; 3
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	19 f0       	breq	.+6      	; 0x3df6 <free+0xd4>
    3df0:	fd 01       	movw	r30, r26
    3df2:	dc 01       	movw	r26, r24
    3df4:	f7 cf       	rjmp	.-18     	; 0x3de4 <free+0xc2>
    3df6:	8d 91       	ld	r24, X+
    3df8:	9c 91       	ld	r25, X
    3dfa:	11 97       	sbiw	r26, 0x01	; 1
    3dfc:	9d 01       	movw	r18, r26
    3dfe:	2e 5f       	subi	r18, 0xFE	; 254
    3e00:	3f 4f       	sbci	r19, 0xFF	; 255
    3e02:	82 0f       	add	r24, r18
    3e04:	93 1f       	adc	r25, r19
    3e06:	20 91 4f 0d 	lds	r18, 0x0D4F	; 0x800d4f <__brkval>
    3e0a:	30 91 50 0d 	lds	r19, 0x0D50	; 0x800d50 <__brkval+0x1>
    3e0e:	28 17       	cp	r18, r24
    3e10:	39 07       	cpc	r19, r25
    3e12:	69 f4       	brne	.+26     	; 0x3e2e <free+0x10c>
    3e14:	30 97       	sbiw	r30, 0x00	; 0
    3e16:	29 f4       	brne	.+10     	; 0x3e22 <free+0x100>
    3e18:	10 92 52 0d 	sts	0x0D52, r1	; 0x800d52 <__flp+0x1>
    3e1c:	10 92 51 0d 	sts	0x0D51, r1	; 0x800d51 <__flp>
    3e20:	02 c0       	rjmp	.+4      	; 0x3e26 <free+0x104>
    3e22:	13 82       	std	Z+3, r1	; 0x03
    3e24:	12 82       	std	Z+2, r1	; 0x02
    3e26:	b0 93 50 0d 	sts	0x0D50, r27	; 0x800d50 <__brkval+0x1>
    3e2a:	a0 93 4f 0d 	sts	0x0D4F, r26	; 0x800d4f <__brkval>
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	08 95       	ret

00003e34 <abort>:
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	f8 94       	cli
    3e3a:	db c1       	rjmp	.+950    	; 0x41f2 <_exit>

00003e3c <__ftoa_engine>:
    3e3c:	28 30       	cpi	r18, 0x08	; 8
    3e3e:	08 f0       	brcs	.+2      	; 0x3e42 <__ftoa_engine+0x6>
    3e40:	27 e0       	ldi	r18, 0x07	; 7
    3e42:	33 27       	eor	r19, r19
    3e44:	da 01       	movw	r26, r20
    3e46:	99 0f       	add	r25, r25
    3e48:	31 1d       	adc	r19, r1
    3e4a:	87 fd       	sbrc	r24, 7
    3e4c:	91 60       	ori	r25, 0x01	; 1
    3e4e:	00 96       	adiw	r24, 0x00	; 0
    3e50:	61 05       	cpc	r22, r1
    3e52:	71 05       	cpc	r23, r1
    3e54:	39 f4       	brne	.+14     	; 0x3e64 <__ftoa_engine+0x28>
    3e56:	32 60       	ori	r19, 0x02	; 2
    3e58:	2e 5f       	subi	r18, 0xFE	; 254
    3e5a:	3d 93       	st	X+, r19
    3e5c:	30 e3       	ldi	r19, 0x30	; 48
    3e5e:	2a 95       	dec	r18
    3e60:	e1 f7       	brne	.-8      	; 0x3e5a <__ftoa_engine+0x1e>
    3e62:	08 95       	ret
    3e64:	9f 3f       	cpi	r25, 0xFF	; 255
    3e66:	30 f0       	brcs	.+12     	; 0x3e74 <__ftoa_engine+0x38>
    3e68:	80 38       	cpi	r24, 0x80	; 128
    3e6a:	71 05       	cpc	r23, r1
    3e6c:	61 05       	cpc	r22, r1
    3e6e:	09 f0       	breq	.+2      	; 0x3e72 <__ftoa_engine+0x36>
    3e70:	3c 5f       	subi	r19, 0xFC	; 252
    3e72:	3c 5f       	subi	r19, 0xFC	; 252
    3e74:	3d 93       	st	X+, r19
    3e76:	91 30       	cpi	r25, 0x01	; 1
    3e78:	08 f0       	brcs	.+2      	; 0x3e7c <__ftoa_engine+0x40>
    3e7a:	80 68       	ori	r24, 0x80	; 128
    3e7c:	91 1d       	adc	r25, r1
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	1f 93       	push	r17
    3e84:	0f 93       	push	r16
    3e86:	ff 92       	push	r15
    3e88:	ef 92       	push	r14
    3e8a:	19 2f       	mov	r17, r25
    3e8c:	98 7f       	andi	r25, 0xF8	; 248
    3e8e:	96 95       	lsr	r25
    3e90:	e9 2f       	mov	r30, r25
    3e92:	96 95       	lsr	r25
    3e94:	96 95       	lsr	r25
    3e96:	e9 0f       	add	r30, r25
    3e98:	ff 27       	eor	r31, r31
    3e9a:	e4 50       	subi	r30, 0x04	; 4
    3e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9e:	99 27       	eor	r25, r25
    3ea0:	33 27       	eor	r19, r19
    3ea2:	ee 24       	eor	r14, r14
    3ea4:	ff 24       	eor	r15, r15
    3ea6:	a7 01       	movw	r20, r14
    3ea8:	e7 01       	movw	r28, r14
    3eaa:	05 90       	lpm	r0, Z+
    3eac:	08 94       	sec
    3eae:	07 94       	ror	r0
    3eb0:	28 f4       	brcc	.+10     	; 0x3ebc <__ftoa_engine+0x80>
    3eb2:	36 0f       	add	r19, r22
    3eb4:	e7 1e       	adc	r14, r23
    3eb6:	f8 1e       	adc	r15, r24
    3eb8:	49 1f       	adc	r20, r25
    3eba:	51 1d       	adc	r21, r1
    3ebc:	66 0f       	add	r22, r22
    3ebe:	77 1f       	adc	r23, r23
    3ec0:	88 1f       	adc	r24, r24
    3ec2:	99 1f       	adc	r25, r25
    3ec4:	06 94       	lsr	r0
    3ec6:	a1 f7       	brne	.-24     	; 0x3eb0 <__ftoa_engine+0x74>
    3ec8:	05 90       	lpm	r0, Z+
    3eca:	07 94       	ror	r0
    3ecc:	28 f4       	brcc	.+10     	; 0x3ed8 <__ftoa_engine+0x9c>
    3ece:	e7 0e       	add	r14, r23
    3ed0:	f8 1e       	adc	r15, r24
    3ed2:	49 1f       	adc	r20, r25
    3ed4:	56 1f       	adc	r21, r22
    3ed6:	c1 1d       	adc	r28, r1
    3ed8:	77 0f       	add	r23, r23
    3eda:	88 1f       	adc	r24, r24
    3edc:	99 1f       	adc	r25, r25
    3ede:	66 1f       	adc	r22, r22
    3ee0:	06 94       	lsr	r0
    3ee2:	a1 f7       	brne	.-24     	; 0x3ecc <__ftoa_engine+0x90>
    3ee4:	05 90       	lpm	r0, Z+
    3ee6:	07 94       	ror	r0
    3ee8:	28 f4       	brcc	.+10     	; 0x3ef4 <__ftoa_engine+0xb8>
    3eea:	f8 0e       	add	r15, r24
    3eec:	49 1f       	adc	r20, r25
    3eee:	56 1f       	adc	r21, r22
    3ef0:	c7 1f       	adc	r28, r23
    3ef2:	d1 1d       	adc	r29, r1
    3ef4:	88 0f       	add	r24, r24
    3ef6:	99 1f       	adc	r25, r25
    3ef8:	66 1f       	adc	r22, r22
    3efa:	77 1f       	adc	r23, r23
    3efc:	06 94       	lsr	r0
    3efe:	a1 f7       	brne	.-24     	; 0x3ee8 <__ftoa_engine+0xac>
    3f00:	05 90       	lpm	r0, Z+
    3f02:	07 94       	ror	r0
    3f04:	20 f4       	brcc	.+8      	; 0x3f0e <__ftoa_engine+0xd2>
    3f06:	49 0f       	add	r20, r25
    3f08:	56 1f       	adc	r21, r22
    3f0a:	c7 1f       	adc	r28, r23
    3f0c:	d8 1f       	adc	r29, r24
    3f0e:	99 0f       	add	r25, r25
    3f10:	66 1f       	adc	r22, r22
    3f12:	77 1f       	adc	r23, r23
    3f14:	88 1f       	adc	r24, r24
    3f16:	06 94       	lsr	r0
    3f18:	a9 f7       	brne	.-22     	; 0x3f04 <__ftoa_engine+0xc8>
    3f1a:	84 91       	lpm	r24, Z
    3f1c:	10 95       	com	r17
    3f1e:	17 70       	andi	r17, 0x07	; 7
    3f20:	41 f0       	breq	.+16     	; 0x3f32 <__ftoa_engine+0xf6>
    3f22:	d6 95       	lsr	r29
    3f24:	c7 95       	ror	r28
    3f26:	57 95       	ror	r21
    3f28:	47 95       	ror	r20
    3f2a:	f7 94       	ror	r15
    3f2c:	e7 94       	ror	r14
    3f2e:	1a 95       	dec	r17
    3f30:	c1 f7       	brne	.-16     	; 0x3f22 <__ftoa_engine+0xe6>
    3f32:	e2 ea       	ldi	r30, 0xA2	; 162
    3f34:	f1 e0       	ldi	r31, 0x01	; 1
    3f36:	68 94       	set
    3f38:	15 90       	lpm	r1, Z+
    3f3a:	15 91       	lpm	r17, Z+
    3f3c:	35 91       	lpm	r19, Z+
    3f3e:	65 91       	lpm	r22, Z+
    3f40:	95 91       	lpm	r25, Z+
    3f42:	05 90       	lpm	r0, Z+
    3f44:	7f e2       	ldi	r23, 0x2F	; 47
    3f46:	73 95       	inc	r23
    3f48:	e1 18       	sub	r14, r1
    3f4a:	f1 0a       	sbc	r15, r17
    3f4c:	43 0b       	sbc	r20, r19
    3f4e:	56 0b       	sbc	r21, r22
    3f50:	c9 0b       	sbc	r28, r25
    3f52:	d0 09       	sbc	r29, r0
    3f54:	c0 f7       	brcc	.-16     	; 0x3f46 <__ftoa_engine+0x10a>
    3f56:	e1 0c       	add	r14, r1
    3f58:	f1 1e       	adc	r15, r17
    3f5a:	43 1f       	adc	r20, r19
    3f5c:	56 1f       	adc	r21, r22
    3f5e:	c9 1f       	adc	r28, r25
    3f60:	d0 1d       	adc	r29, r0
    3f62:	7e f4       	brtc	.+30     	; 0x3f82 <__ftoa_engine+0x146>
    3f64:	70 33       	cpi	r23, 0x30	; 48
    3f66:	11 f4       	brne	.+4      	; 0x3f6c <__ftoa_engine+0x130>
    3f68:	8a 95       	dec	r24
    3f6a:	e6 cf       	rjmp	.-52     	; 0x3f38 <__ftoa_engine+0xfc>
    3f6c:	e8 94       	clt
    3f6e:	01 50       	subi	r16, 0x01	; 1
    3f70:	30 f0       	brcs	.+12     	; 0x3f7e <__ftoa_engine+0x142>
    3f72:	08 0f       	add	r16, r24
    3f74:	0a f4       	brpl	.+2      	; 0x3f78 <__ftoa_engine+0x13c>
    3f76:	00 27       	eor	r16, r16
    3f78:	02 17       	cp	r16, r18
    3f7a:	08 f4       	brcc	.+2      	; 0x3f7e <__ftoa_engine+0x142>
    3f7c:	20 2f       	mov	r18, r16
    3f7e:	23 95       	inc	r18
    3f80:	02 2f       	mov	r16, r18
    3f82:	7a 33       	cpi	r23, 0x3A	; 58
    3f84:	28 f0       	brcs	.+10     	; 0x3f90 <__ftoa_engine+0x154>
    3f86:	79 e3       	ldi	r23, 0x39	; 57
    3f88:	7d 93       	st	X+, r23
    3f8a:	2a 95       	dec	r18
    3f8c:	e9 f7       	brne	.-6      	; 0x3f88 <__ftoa_engine+0x14c>
    3f8e:	10 c0       	rjmp	.+32     	; 0x3fb0 <__ftoa_engine+0x174>
    3f90:	7d 93       	st	X+, r23
    3f92:	2a 95       	dec	r18
    3f94:	89 f6       	brne	.-94     	; 0x3f38 <__ftoa_engine+0xfc>
    3f96:	06 94       	lsr	r0
    3f98:	97 95       	ror	r25
    3f9a:	67 95       	ror	r22
    3f9c:	37 95       	ror	r19
    3f9e:	17 95       	ror	r17
    3fa0:	17 94       	ror	r1
    3fa2:	e1 18       	sub	r14, r1
    3fa4:	f1 0a       	sbc	r15, r17
    3fa6:	43 0b       	sbc	r20, r19
    3fa8:	56 0b       	sbc	r21, r22
    3faa:	c9 0b       	sbc	r28, r25
    3fac:	d0 09       	sbc	r29, r0
    3fae:	98 f0       	brcs	.+38     	; 0x3fd6 <__ftoa_engine+0x19a>
    3fb0:	23 95       	inc	r18
    3fb2:	7e 91       	ld	r23, -X
    3fb4:	73 95       	inc	r23
    3fb6:	7a 33       	cpi	r23, 0x3A	; 58
    3fb8:	08 f0       	brcs	.+2      	; 0x3fbc <__ftoa_engine+0x180>
    3fba:	70 e3       	ldi	r23, 0x30	; 48
    3fbc:	7c 93       	st	X, r23
    3fbe:	20 13       	cpse	r18, r16
    3fc0:	b8 f7       	brcc	.-18     	; 0x3fb0 <__ftoa_engine+0x174>
    3fc2:	7e 91       	ld	r23, -X
    3fc4:	70 61       	ori	r23, 0x10	; 16
    3fc6:	7d 93       	st	X+, r23
    3fc8:	30 f0       	brcs	.+12     	; 0x3fd6 <__ftoa_engine+0x19a>
    3fca:	83 95       	inc	r24
    3fcc:	71 e3       	ldi	r23, 0x31	; 49
    3fce:	7d 93       	st	X+, r23
    3fd0:	70 e3       	ldi	r23, 0x30	; 48
    3fd2:	2a 95       	dec	r18
    3fd4:	e1 f7       	brne	.-8      	; 0x3fce <__ftoa_engine+0x192>
    3fd6:	11 24       	eor	r1, r1
    3fd8:	ef 90       	pop	r14
    3fda:	ff 90       	pop	r15
    3fdc:	0f 91       	pop	r16
    3fde:	1f 91       	pop	r17
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	99 27       	eor	r25, r25
    3fe6:	87 fd       	sbrc	r24, 7
    3fe8:	90 95       	com	r25
    3fea:	08 95       	ret

00003fec <strnlen_P>:
    3fec:	fc 01       	movw	r30, r24
    3fee:	05 90       	lpm	r0, Z+
    3ff0:	61 50       	subi	r22, 0x01	; 1
    3ff2:	70 40       	sbci	r23, 0x00	; 0
    3ff4:	01 10       	cpse	r0, r1
    3ff6:	d8 f7       	brcc	.-10     	; 0x3fee <strnlen_P+0x2>
    3ff8:	80 95       	com	r24
    3ffa:	90 95       	com	r25
    3ffc:	8e 0f       	add	r24, r30
    3ffe:	9f 1f       	adc	r25, r31
    4000:	08 95       	ret

00004002 <memcpy>:
    4002:	fb 01       	movw	r30, r22
    4004:	dc 01       	movw	r26, r24
    4006:	02 c0       	rjmp	.+4      	; 0x400c <memcpy+0xa>
    4008:	01 90       	ld	r0, Z+
    400a:	0d 92       	st	X+, r0
    400c:	41 50       	subi	r20, 0x01	; 1
    400e:	50 40       	sbci	r21, 0x00	; 0
    4010:	d8 f7       	brcc	.-10     	; 0x4008 <memcpy+0x6>
    4012:	08 95       	ret

00004014 <memset>:
    4014:	dc 01       	movw	r26, r24
    4016:	01 c0       	rjmp	.+2      	; 0x401a <memset+0x6>
    4018:	6d 93       	st	X+, r22
    401a:	41 50       	subi	r20, 0x01	; 1
    401c:	50 40       	sbci	r21, 0x00	; 0
    401e:	e0 f7       	brcc	.-8      	; 0x4018 <memset+0x4>
    4020:	08 95       	ret

00004022 <strnlen>:
    4022:	fc 01       	movw	r30, r24
    4024:	61 50       	subi	r22, 0x01	; 1
    4026:	70 40       	sbci	r23, 0x00	; 0
    4028:	01 90       	ld	r0, Z+
    402a:	01 10       	cpse	r0, r1
    402c:	d8 f7       	brcc	.-10     	; 0x4024 <strnlen+0x2>
    402e:	80 95       	com	r24
    4030:	90 95       	com	r25
    4032:	8e 0f       	add	r24, r30
    4034:	9f 1f       	adc	r25, r31
    4036:	08 95       	ret

00004038 <fputc>:
    4038:	0f 93       	push	r16
    403a:	1f 93       	push	r17
    403c:	cf 93       	push	r28
    403e:	df 93       	push	r29
    4040:	fb 01       	movw	r30, r22
    4042:	23 81       	ldd	r18, Z+3	; 0x03
    4044:	21 fd       	sbrc	r18, 1
    4046:	03 c0       	rjmp	.+6      	; 0x404e <fputc+0x16>
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	9f ef       	ldi	r25, 0xFF	; 255
    404c:	2c c0       	rjmp	.+88     	; 0x40a6 <fputc+0x6e>
    404e:	22 ff       	sbrs	r18, 2
    4050:	16 c0       	rjmp	.+44     	; 0x407e <fputc+0x46>
    4052:	46 81       	ldd	r20, Z+6	; 0x06
    4054:	57 81       	ldd	r21, Z+7	; 0x07
    4056:	24 81       	ldd	r18, Z+4	; 0x04
    4058:	35 81       	ldd	r19, Z+5	; 0x05
    405a:	42 17       	cp	r20, r18
    405c:	53 07       	cpc	r21, r19
    405e:	44 f4       	brge	.+16     	; 0x4070 <fputc+0x38>
    4060:	a0 81       	ld	r26, Z
    4062:	b1 81       	ldd	r27, Z+1	; 0x01
    4064:	9d 01       	movw	r18, r26
    4066:	2f 5f       	subi	r18, 0xFF	; 255
    4068:	3f 4f       	sbci	r19, 0xFF	; 255
    406a:	31 83       	std	Z+1, r19	; 0x01
    406c:	20 83       	st	Z, r18
    406e:	8c 93       	st	X, r24
    4070:	26 81       	ldd	r18, Z+6	; 0x06
    4072:	37 81       	ldd	r19, Z+7	; 0x07
    4074:	2f 5f       	subi	r18, 0xFF	; 255
    4076:	3f 4f       	sbci	r19, 0xFF	; 255
    4078:	37 83       	std	Z+7, r19	; 0x07
    407a:	26 83       	std	Z+6, r18	; 0x06
    407c:	14 c0       	rjmp	.+40     	; 0x40a6 <fputc+0x6e>
    407e:	8b 01       	movw	r16, r22
    4080:	ec 01       	movw	r28, r24
    4082:	fb 01       	movw	r30, r22
    4084:	00 84       	ldd	r0, Z+8	; 0x08
    4086:	f1 85       	ldd	r31, Z+9	; 0x09
    4088:	e0 2d       	mov	r30, r0
    408a:	19 95       	eicall
    408c:	89 2b       	or	r24, r25
    408e:	e1 f6       	brne	.-72     	; 0x4048 <fputc+0x10>
    4090:	d8 01       	movw	r26, r16
    4092:	16 96       	adiw	r26, 0x06	; 6
    4094:	8d 91       	ld	r24, X+
    4096:	9c 91       	ld	r25, X
    4098:	17 97       	sbiw	r26, 0x07	; 7
    409a:	01 96       	adiw	r24, 0x01	; 1
    409c:	17 96       	adiw	r26, 0x07	; 7
    409e:	9c 93       	st	X, r25
    40a0:	8e 93       	st	-X, r24
    40a2:	16 97       	sbiw	r26, 0x06	; 6
    40a4:	ce 01       	movw	r24, r28
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	1f 91       	pop	r17
    40ac:	0f 91       	pop	r16
    40ae:	08 95       	ret

000040b0 <printf>:
    40b0:	cf 93       	push	r28
    40b2:	df 93       	push	r29
    40b4:	cd b7       	in	r28, 0x3d	; 61
    40b6:	de b7       	in	r29, 0x3e	; 62
    40b8:	ae 01       	movw	r20, r28
    40ba:	4a 5f       	subi	r20, 0xFA	; 250
    40bc:	5f 4f       	sbci	r21, 0xFF	; 255
    40be:	fa 01       	movw	r30, r20
    40c0:	61 91       	ld	r22, Z+
    40c2:	71 91       	ld	r23, Z+
    40c4:	af 01       	movw	r20, r30
    40c6:	80 91 55 0d 	lds	r24, 0x0D55	; 0x800d55 <__iob+0x2>
    40ca:	90 91 56 0d 	lds	r25, 0x0D56	; 0x800d56 <__iob+0x3>
    40ce:	95 d8       	rcall	.-3798   	; 0x31fa <vfprintf>
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	08 95       	ret

000040d6 <puts>:
    40d6:	0f 93       	push	r16
    40d8:	1f 93       	push	r17
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	e0 91 55 0d 	lds	r30, 0x0D55	; 0x800d55 <__iob+0x2>
    40e2:	f0 91 56 0d 	lds	r31, 0x0D56	; 0x800d56 <__iob+0x3>
    40e6:	23 81       	ldd	r18, Z+3	; 0x03
    40e8:	21 ff       	sbrs	r18, 1
    40ea:	1b c0       	rjmp	.+54     	; 0x4122 <puts+0x4c>
    40ec:	8c 01       	movw	r16, r24
    40ee:	d0 e0       	ldi	r29, 0x00	; 0
    40f0:	c0 e0       	ldi	r28, 0x00	; 0
    40f2:	f8 01       	movw	r30, r16
    40f4:	81 91       	ld	r24, Z+
    40f6:	8f 01       	movw	r16, r30
    40f8:	60 91 55 0d 	lds	r22, 0x0D55	; 0x800d55 <__iob+0x2>
    40fc:	70 91 56 0d 	lds	r23, 0x0D56	; 0x800d56 <__iob+0x3>
    4100:	db 01       	movw	r26, r22
    4102:	18 96       	adiw	r26, 0x08	; 8
    4104:	ed 91       	ld	r30, X+
    4106:	fc 91       	ld	r31, X
    4108:	19 97       	sbiw	r26, 0x09	; 9
    410a:	88 23       	and	r24, r24
    410c:	31 f0       	breq	.+12     	; 0x411a <puts+0x44>
    410e:	19 95       	eicall
    4110:	89 2b       	or	r24, r25
    4112:	79 f3       	breq	.-34     	; 0x40f2 <puts+0x1c>
    4114:	df ef       	ldi	r29, 0xFF	; 255
    4116:	cf ef       	ldi	r28, 0xFF	; 255
    4118:	ec cf       	rjmp	.-40     	; 0x40f2 <puts+0x1c>
    411a:	8a e0       	ldi	r24, 0x0A	; 10
    411c:	19 95       	eicall
    411e:	89 2b       	or	r24, r25
    4120:	19 f0       	breq	.+6      	; 0x4128 <puts+0x52>
    4122:	8f ef       	ldi	r24, 0xFF	; 255
    4124:	9f ef       	ldi	r25, 0xFF	; 255
    4126:	02 c0       	rjmp	.+4      	; 0x412c <puts+0x56>
    4128:	8d 2f       	mov	r24, r29
    412a:	9c 2f       	mov	r25, r28
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	08 95       	ret

00004136 <__ultoa_invert>:
    4136:	fa 01       	movw	r30, r20
    4138:	aa 27       	eor	r26, r26
    413a:	28 30       	cpi	r18, 0x08	; 8
    413c:	51 f1       	breq	.+84     	; 0x4192 <__ultoa_invert+0x5c>
    413e:	20 31       	cpi	r18, 0x10	; 16
    4140:	81 f1       	breq	.+96     	; 0x41a2 <__ultoa_invert+0x6c>
    4142:	e8 94       	clt
    4144:	6f 93       	push	r22
    4146:	6e 7f       	andi	r22, 0xFE	; 254
    4148:	6e 5f       	subi	r22, 0xFE	; 254
    414a:	7f 4f       	sbci	r23, 0xFF	; 255
    414c:	8f 4f       	sbci	r24, 0xFF	; 255
    414e:	9f 4f       	sbci	r25, 0xFF	; 255
    4150:	af 4f       	sbci	r26, 0xFF	; 255
    4152:	b1 e0       	ldi	r27, 0x01	; 1
    4154:	3e d0       	rcall	.+124    	; 0x41d2 <__ultoa_invert+0x9c>
    4156:	b4 e0       	ldi	r27, 0x04	; 4
    4158:	3c d0       	rcall	.+120    	; 0x41d2 <__ultoa_invert+0x9c>
    415a:	67 0f       	add	r22, r23
    415c:	78 1f       	adc	r23, r24
    415e:	89 1f       	adc	r24, r25
    4160:	9a 1f       	adc	r25, r26
    4162:	a1 1d       	adc	r26, r1
    4164:	68 0f       	add	r22, r24
    4166:	79 1f       	adc	r23, r25
    4168:	8a 1f       	adc	r24, r26
    416a:	91 1d       	adc	r25, r1
    416c:	a1 1d       	adc	r26, r1
    416e:	6a 0f       	add	r22, r26
    4170:	71 1d       	adc	r23, r1
    4172:	81 1d       	adc	r24, r1
    4174:	91 1d       	adc	r25, r1
    4176:	a1 1d       	adc	r26, r1
    4178:	20 d0       	rcall	.+64     	; 0x41ba <__ultoa_invert+0x84>
    417a:	09 f4       	brne	.+2      	; 0x417e <__ultoa_invert+0x48>
    417c:	68 94       	set
    417e:	3f 91       	pop	r19
    4180:	2a e0       	ldi	r18, 0x0A	; 10
    4182:	26 9f       	mul	r18, r22
    4184:	11 24       	eor	r1, r1
    4186:	30 19       	sub	r19, r0
    4188:	30 5d       	subi	r19, 0xD0	; 208
    418a:	31 93       	st	Z+, r19
    418c:	de f6       	brtc	.-74     	; 0x4144 <__ultoa_invert+0xe>
    418e:	cf 01       	movw	r24, r30
    4190:	08 95       	ret
    4192:	46 2f       	mov	r20, r22
    4194:	47 70       	andi	r20, 0x07	; 7
    4196:	40 5d       	subi	r20, 0xD0	; 208
    4198:	41 93       	st	Z+, r20
    419a:	b3 e0       	ldi	r27, 0x03	; 3
    419c:	0f d0       	rcall	.+30     	; 0x41bc <__ultoa_invert+0x86>
    419e:	c9 f7       	brne	.-14     	; 0x4192 <__ultoa_invert+0x5c>
    41a0:	f6 cf       	rjmp	.-20     	; 0x418e <__ultoa_invert+0x58>
    41a2:	46 2f       	mov	r20, r22
    41a4:	4f 70       	andi	r20, 0x0F	; 15
    41a6:	40 5d       	subi	r20, 0xD0	; 208
    41a8:	4a 33       	cpi	r20, 0x3A	; 58
    41aa:	18 f0       	brcs	.+6      	; 0x41b2 <__ultoa_invert+0x7c>
    41ac:	49 5d       	subi	r20, 0xD9	; 217
    41ae:	31 fd       	sbrc	r19, 1
    41b0:	40 52       	subi	r20, 0x20	; 32
    41b2:	41 93       	st	Z+, r20
    41b4:	02 d0       	rcall	.+4      	; 0x41ba <__ultoa_invert+0x84>
    41b6:	a9 f7       	brne	.-22     	; 0x41a2 <__ultoa_invert+0x6c>
    41b8:	ea cf       	rjmp	.-44     	; 0x418e <__ultoa_invert+0x58>
    41ba:	b4 e0       	ldi	r27, 0x04	; 4
    41bc:	a6 95       	lsr	r26
    41be:	97 95       	ror	r25
    41c0:	87 95       	ror	r24
    41c2:	77 95       	ror	r23
    41c4:	67 95       	ror	r22
    41c6:	ba 95       	dec	r27
    41c8:	c9 f7       	brne	.-14     	; 0x41bc <__ultoa_invert+0x86>
    41ca:	00 97       	sbiw	r24, 0x00	; 0
    41cc:	61 05       	cpc	r22, r1
    41ce:	71 05       	cpc	r23, r1
    41d0:	08 95       	ret
    41d2:	9b 01       	movw	r18, r22
    41d4:	ac 01       	movw	r20, r24
    41d6:	0a 2e       	mov	r0, r26
    41d8:	06 94       	lsr	r0
    41da:	57 95       	ror	r21
    41dc:	47 95       	ror	r20
    41de:	37 95       	ror	r19
    41e0:	27 95       	ror	r18
    41e2:	ba 95       	dec	r27
    41e4:	c9 f7       	brne	.-14     	; 0x41d8 <__ultoa_invert+0xa2>
    41e6:	62 0f       	add	r22, r18
    41e8:	73 1f       	adc	r23, r19
    41ea:	84 1f       	adc	r24, r20
    41ec:	95 1f       	adc	r25, r21
    41ee:	a0 1d       	adc	r26, r0
    41f0:	08 95       	ret

000041f2 <_exit>:
    41f2:	f8 94       	cli

000041f4 <__stop_program>:
    41f4:	ff cf       	rjmp	.-2      	; 0x41f4 <__stop_program>
