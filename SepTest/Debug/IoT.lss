
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005fa  00800200  00007382  00007416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e29  008007fa  008007fa  00007a10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c10  00000000  00000000  00007aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ec41  00000000  00000000  000086bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003af7  00000000  00000000  000172fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007449  00000000  00000000  0001adf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b2c  00000000  00000000  00022240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a87  00000000  00000000  00024d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d5fa  00000000  00000000  000297f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  00036ded  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b0 2b 	jmp	0x5760	; 0x5760 <__vector_25>
      68:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 46 2c 	jmp	0x588c	; 0x588c <__vector_36>
      94:	0c 94 98 2c 	jmp	0x5930	; 0x5930 <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 dc 2c 	jmp	0x59b8	; 0x59b8 <__vector_51>
      d0:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 72 2d 	jmp	0x5ae4	; 0x5ae4 <__vector_54>
      dc:	0c 94 c4 2d 	jmp	0x5b88	; 0x5b88 <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	eb 21       	and	r30, r11
      e6:	eb 21       	and	r30, r11
      e8:	eb 21       	and	r30, r11
      ea:	22 22       	and	r2, r18
      ec:	2a 22       	and	r2, r26
      ee:	3f 22       	and	r3, r31
      f0:	eb 21       	and	r30, r11
      f2:	eb 21       	and	r30, r11
      f4:	22 22       	and	r2, r18
      f6:	2a 22       	and	r2, r26
      f8:	d2 30       	cpi	r29, 0x02	; 2
      fa:	42 31       	cpi	r20, 0x12	; 18
      fc:	42 31       	cpi	r20, 0x12	; 18
      fe:	42 31       	cpi	r20, 0x12	; 18
     100:	42 31       	cpi	r20, 0x12	; 18
     102:	42 31       	cpi	r20, 0x12	; 18
     104:	42 31       	cpi	r20, 0x12	; 18
     106:	42 31       	cpi	r20, 0x12	; 18
     108:	d2 30       	cpi	r29, 0x02	; 2
     10a:	42 31       	cpi	r20, 0x12	; 18
     10c:	42 31       	cpi	r20, 0x12	; 18
     10e:	42 31       	cpi	r20, 0x12	; 18
     110:	42 31       	cpi	r20, 0x12	; 18
     112:	42 31       	cpi	r20, 0x12	; 18
     114:	42 31       	cpi	r20, 0x12	; 18
     116:	42 31       	cpi	r20, 0x12	; 18
     118:	d4 30       	cpi	r29, 0x04	; 4
     11a:	42 31       	cpi	r20, 0x12	; 18
     11c:	42 31       	cpi	r20, 0x12	; 18
     11e:	42 31       	cpi	r20, 0x12	; 18
     120:	42 31       	cpi	r20, 0x12	; 18
     122:	42 31       	cpi	r20, 0x12	; 18
     124:	42 31       	cpi	r20, 0x12	; 18
     126:	42 31       	cpi	r20, 0x12	; 18
     128:	42 31       	cpi	r20, 0x12	; 18
     12a:	42 31       	cpi	r20, 0x12	; 18
     12c:	42 31       	cpi	r20, 0x12	; 18
     12e:	42 31       	cpi	r20, 0x12	; 18
     130:	42 31       	cpi	r20, 0x12	; 18
     132:	42 31       	cpi	r20, 0x12	; 18
     134:	42 31       	cpi	r20, 0x12	; 18
     136:	42 31       	cpi	r20, 0x12	; 18
     138:	d4 30       	cpi	r29, 0x04	; 4
     13a:	42 31       	cpi	r20, 0x12	; 18
     13c:	42 31       	cpi	r20, 0x12	; 18
     13e:	42 31       	cpi	r20, 0x12	; 18
     140:	42 31       	cpi	r20, 0x12	; 18
     142:	42 31       	cpi	r20, 0x12	; 18
     144:	42 31       	cpi	r20, 0x12	; 18
     146:	42 31       	cpi	r20, 0x12	; 18
     148:	42 31       	cpi	r20, 0x12	; 18
     14a:	42 31       	cpi	r20, 0x12	; 18
     14c:	42 31       	cpi	r20, 0x12	; 18
     14e:	42 31       	cpi	r20, 0x12	; 18
     150:	42 31       	cpi	r20, 0x12	; 18
     152:	42 31       	cpi	r20, 0x12	; 18
     154:	42 31       	cpi	r20, 0x12	; 18
     156:	42 31       	cpi	r20, 0x12	; 18
     158:	3e 31       	cpi	r19, 0x1E	; 30
     15a:	42 31       	cpi	r20, 0x12	; 18
     15c:	42 31       	cpi	r20, 0x12	; 18
     15e:	42 31       	cpi	r20, 0x12	; 18
     160:	42 31       	cpi	r20, 0x12	; 18
     162:	42 31       	cpi	r20, 0x12	; 18
     164:	42 31       	cpi	r20, 0x12	; 18
     166:	42 31       	cpi	r20, 0x12	; 18
     168:	09 31       	cpi	r16, 0x19	; 25
     16a:	42 31       	cpi	r20, 0x12	; 18
     16c:	42 31       	cpi	r20, 0x12	; 18
     16e:	42 31       	cpi	r20, 0x12	; 18
     170:	42 31       	cpi	r20, 0x12	; 18
     172:	42 31       	cpi	r20, 0x12	; 18
     174:	42 31       	cpi	r20, 0x12	; 18
     176:	42 31       	cpi	r20, 0x12	; 18
     178:	42 31       	cpi	r20, 0x12	; 18
     17a:	42 31       	cpi	r20, 0x12	; 18
     17c:	42 31       	cpi	r20, 0x12	; 18
     17e:	42 31       	cpi	r20, 0x12	; 18
     180:	42 31       	cpi	r20, 0x12	; 18
     182:	42 31       	cpi	r20, 0x12	; 18
     184:	42 31       	cpi	r20, 0x12	; 18
     186:	42 31       	cpi	r20, 0x12	; 18
     188:	fd 30       	cpi	r31, 0x0D	; 13
     18a:	42 31       	cpi	r20, 0x12	; 18
     18c:	42 31       	cpi	r20, 0x12	; 18
     18e:	42 31       	cpi	r20, 0x12	; 18
     190:	42 31       	cpi	r20, 0x12	; 18
     192:	42 31       	cpi	r20, 0x12	; 18
     194:	42 31       	cpi	r20, 0x12	; 18
     196:	42 31       	cpi	r20, 0x12	; 18
     198:	21 31       	cpi	r18, 0x11	; 17

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 2c 14 	call	0x2858	; 0x2858 <prvCheckTasksWaitingTermination>
     2a0:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
     2ac:	0e 94 68 22 	call	0x44d0	; 0x44d0 <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <prvProcessTimerOrBlockTask>
     2ca:	0e 94 b4 21 	call	0x4368	; 0x4368 <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	17 e0       	ldi	r17, 0x07	; 7
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	e2 e8       	ldi	r30, 0x82	; 130
     2e8:	f3 e7       	ldi	r31, 0x73	; 115
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	aa 3f       	cpi	r26, 0xFA	; 250
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	26 e1       	ldi	r18, 0x16	; 22
     2fc:	aa ef       	ldi	r26, 0xFA	; 250
     2fe:	b7 e0       	ldi	r27, 0x07	; 7
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a3 32       	cpi	r26, 0x23	; 35
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <main>
     30e:	0c 94 bf 39 	jmp	0x737e	; 0x737e <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:

/*
* Callback function called by the driver when the new CO2 measure is received.
*/
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 fc 15 	sts	0x15FC, r25	; 0x8015fc <ppm+0x1>
     318:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:
}

/*
* Task for taking the CO2 measurements and setting the CO2 value accordingly.
*/
void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <xTaskGetTickCount>
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     336:	40 ee       	ldi	r20, 0xE0	; 224
     338:	53 e0       	ldi	r21, 0x03	; 3
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskDelayUntil>
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     346:	40 91 fd 15 	lds	r20, 0x15FD	; 0x8015fd <ready_bit>
     34a:	50 91 fe 15 	lds	r21, 0x15FE	; 0x8015fe <ready_bit+0x1>
     34e:	60 91 ff 15 	lds	r22, 0x15FF	; 0x8015ff <ready_bit+0x2>
     352:	70 91 00 16 	lds	r23, 0x1600	; 0x801600 <ready_bit+0x3>
     356:	cc 24       	eor	r12, r12
     358:	ca 94       	dec	r12
     35a:	dc 2c       	mov	r13, r12
     35c:	76 01       	movw	r14, r12
     35e:	01 e0       	ldi	r16, 0x01	; 1
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <group_start>
     366:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <group_start+0x1>
     36a:	40 d6       	rcall	.+3200   	; 0xfec <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     36c:	00 91 fd 15 	lds	r16, 0x15FD	; 0x8015fd <ready_bit>
     370:	10 91 fe 15 	lds	r17, 0x15FE	; 0x8015fe <ready_bit+0x1>
     374:	20 91 ff 15 	lds	r18, 0x15FF	; 0x8015ff <ready_bit+0x2>
     378:	30 91 00 16 	lds	r19, 0x1600	; 0x801600 <ready_bit+0x3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	80 23       	and	r24, r16
     382:	91 23       	and	r25, r17
     384:	a2 23       	and	r26, r18
     386:	b3 23       	and	r27, r19
     388:	08 17       	cp	r16, r24
     38a:	19 07       	cpc	r17, r25
     38c:	2a 07       	cpc	r18, r26
     38e:	3b 07       	cpc	r19, r27
     390:	91 f6       	brne	.-92     	; 0x336 <startReadingCO2+0x18>
			rc = mh_z19_takeMeassuring();
     392:	0e 94 0a 2a 	call	0x5414	; 0x5414 <mh_z19_takeMeassuring>
     396:	80 93 fa 15 	sts	0x15FA, r24	; 0x8015fa <rc>
			if (rc != MHZ19_OK){
     39a:	81 11       	cpse	r24, r1
				// Something went wrong
				} else {
				set_co2_mutex();
     39c:	cc cf       	rjmp	.-104    	; 0x336 <startReadingCO2+0x18>
     39e:	c3 d2       	rcall	.+1414   	; 0x926 <set_co2_mutex>
     3a0:	ca cf       	rjmp	.-108    	; 0x336 <startReadingCO2+0x18>

000003a2 <CO2_handler_init>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	08 2f       	mov	r16, r24
     3ae:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     3b0:	40 91 fd 15 	lds	r20, 0x15FD	; 0x8015fd <ready_bit>
     3b4:	50 91 fe 15 	lds	r21, 0x15FE	; 0x8015fe <ready_bit+0x1>
     3b8:	60 91 ff 15 	lds	r22, 0x15FF	; 0x8015ff <ready_bit+0x2>
     3bc:	70 91 00 16 	lds	r23, 0x1600	; 0x801600 <ready_bit+0x3>
     3c0:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <group_start>
     3c4:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <group_start+0x1>
     3c8:	b1 d6       	rcall	.+3426   	; 0x112c <xEventGroupSetBits>

	xTaskCreate(
     3ca:	e1 2c       	mov	r14, r1
     3cc:	f1 2c       	mov	r15, r1
     3ce:	9e 01       	movw	r18, r28
     3d0:	44 e2       	ldi	r20, 0x24	; 36
     3d2:	51 e0       	ldi	r21, 0x01	; 1
     3d4:	6f e6       	ldi	r22, 0x6F	; 111
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	8f e8       	ldi	r24, 0x8F	; 143
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <createCO2>:
/*
* Method used for allocating memory for CO2 struct and returning it, initializing the CO2 value to 0, setting groups and bits,
* initializing the driver, injecting callback and creating a CO2 task.
*/
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     3ec:	af 92       	push	r10
     3ee:	bf 92       	push	r11
     3f0:	cf 92       	push	r12
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	8c 01       	movw	r16, r24
     402:	5b 01       	movw	r10, r22
     404:	69 01       	movw	r12, r18
     406:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <malloc>
     410:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     412:	89 2b       	or	r24, r25
     414:	d9 f0       	breq	.+54     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     416:	19 82       	std	Y+1, r1	; 0x01
     418:	18 82       	st	Y, r1
	
	group_start = taskBits;
     41a:	b0 92 02 16 	sts	0x1602, r11	; 0x801602 <group_start+0x1>
     41e:	a0 92 01 16 	sts	0x1601, r10	; 0x801601 <group_start>
	ready_bit = bit;
     422:	c0 92 fd 15 	sts	0x15FD, r12	; 0x8015fd <ready_bit>
     426:	d0 92 fe 15 	sts	0x15FE, r13	; 0x8015fe <ready_bit+0x1>
     42a:	e0 92 ff 15 	sts	0x15FF, r14	; 0x8015ff <ready_bit+0x2>
     42e:	f0 92 00 16 	sts	0x1600, r15	; 0x801600 <ready_bit+0x3>
	
	mh_z19_initialise(ser_USART3);
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <mh_z19_initialise>
	mh_z19_injectCallBack(CO2_callback);
     438:	8a e8       	ldi	r24, 0x8A	; 138
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 05 2a 	call	0x540a	; 0x540a <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     440:	be 01       	movw	r22, r28
     442:	c8 01       	movw	r24, r16
     444:	ae df       	rcall	.-164    	; 0x3a2 <CO2_handler_init>
	return new_measure;
     446:	8c 2f       	mov	r24, r28
     448:	9d 2f       	mov	r25, r29
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
	mh_z19_initialise(ser_USART3);
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	bf 90       	pop	r11
     462:	af 90       	pop	r10
     464:	08 95       	ret

00000466 <getCO2>:
/*
* Method used for returning the CO2 value.
*/
uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	08 95       	ret

0000046e <set_co2>:

void set_co2(CO2_t self){
	((CO2_t)self)->CO2 = ppm;
     46e:	20 91 fb 15 	lds	r18, 0x15FB	; 0x8015fb <ppm>
     472:	30 91 fc 15 	lds	r19, 0x15FC	; 0x8015fc <ppm+0x1>
     476:	fc 01       	movw	r30, r24
     478:	31 83       	std	Z+1, r19	; 0x01
     47a:	20 83       	st	Z, r18
     47c:	08 95       	ret

0000047e <DownLinkHandler_Create>:
//uint16_t openWindow;
static lora_driver_payload_t downlinkPayload;

void lora_downlink_handler_task(void* messageBuffer);

void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	08 2f       	mov	r16, r24
     48a:	eb 01       	movw	r28, r22
	
	printf("downlink 1");
     48c:	87 e7       	ldi	r24, 0x77	; 119
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
	xTaskCreate(
     498:	e1 2c       	mov	r14, r1
     49a:	f1 2c       	mov	r15, r1
     49c:	9e 01       	movw	r18, r28
     49e:	48 e8       	ldi	r20, 0x88	; 136
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	62 e8       	ldi	r22, 0x82	; 130
     4a4:	72 e0       	ldi	r23, 0x02	; 2
     4a6:	8f e8       	ldi	r24, 0x8F	; 143
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	08 95       	ret

000004be <lora_DownLinkHandler_StartTask>:


void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	ec 01       	movw	r28, r24
	
	printf("downlink 2");
     4c8:	8c e9       	ldi	r24, 0x9C	; 156
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

	//rc_servo_setPosition(1,-100);
	
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     4d4:	0f ef       	ldi	r16, 0xFF	; 255
     4d6:	1f ef       	ldi	r17, 0xFF	; 255
     4d8:	98 01       	movw	r18, r16
     4da:	46 e1       	ldi	r20, 0x16	; 22
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	6a ef       	ldi	r22, 0xFA	; 250
     4e0:	77 e0       	ldi	r23, 0x07	; 7
     4e2:	ce 01       	movw	r24, r28
     4e4:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xStreamBufferReceive>
	printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     4e8:	ea ef       	ldi	r30, 0xFA	; 250
     4ea:	f7 e0       	ldi	r31, 0x07	; 7
     4ec:	91 81       	ldd	r25, Z+1	; 0x01
     4ee:	80 81       	ld	r24, Z
     4f0:	1f 92       	push	r1
     4f2:	9f 93       	push	r25
     4f4:	1f 92       	push	r1
     4f6:	8f 93       	push	r24
     4f8:	87 ea       	ldi	r24, 0xA7	; 167
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
	if (1 == downlinkPayload.len){
	}
	
	
}
     504:	8d b7       	in	r24, 0x3d	; 61
     506:	9e b7       	in	r25, 0x3e	; 62
     508:	08 96       	adiw	r24, 0x08	; 8
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	9e bf       	out	0x3e, r25	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	8d bf       	out	0x3d, r24	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	08 95       	ret

0000051e <lora_downlink_handler_task>:


void lora_downlink_handler_task(void* downLinkMessageBuffer){
     51e:	ec 01       	movw	r28, r24
	for(;;){
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     520:	ce 01       	movw	r24, r28
     522:	cd df       	rcall	.-102    	; 0x4be <lora_DownLinkHandler_StartTask>
     524:	fd cf       	rjmp	.-6      	; 0x520 <lora_downlink_handler_task+0x2>

00000526 <tsl2591Callback>:

/*
* Callback function called when the new lux data is fetched.
*/
void tsl2591Callback(tsl2591_returnCode_t rc, LightHandler_t self)
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	00 d0       	rcall	.+0      	; 0x52c <tsl2591Callback+0x6>
     52c:	1f 92       	push	r1
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
	
	float _lux;
	switch (rc)
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	71 f5       	brne	.+92     	; 0x592 <tsl2591Callback+0x6c>
	{
		case TSL2591_DATA_READY:
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <tsl2591_getLux>
     53e:	81 11       	cpse	r24, r1
     540:	1f c0       	rjmp	.+62     	; 0x580 <tsl2591Callback+0x5a>
		{
			lux_val = _lux;
     542:	69 81       	ldd	r22, Y+1	; 0x01
     544:	7a 81       	ldd	r23, Y+2	; 0x02
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	9c 81       	ldd	r25, Y+4	; 0x04
     54a:	0e 94 01 23 	call	0x4602	; 0x4602 <__fixunssfsi>
     54e:	70 93 11 08 	sts	0x0811, r23	; 0x800811 <lux_val+0x1>
     552:	60 93 10 08 	sts	0x0810, r22	; 0x800810 <lux_val>
			set_light_mutex();
     556:	41 d2       	rcall	.+1154   	; 0x9da <set_light_mutex>
			print_sharedf("Lux: %5.4f\n", _lux);
     558:	8c 81       	ldd	r24, Y+4	; 0x04
     55a:	8f 93       	push	r24
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	8f 93       	push	r24
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	8f 93       	push	r24
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	8f 93       	push	r24
     568:	88 ed       	ldi	r24, 0xD8	; 216
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	ef d0       	rcall	.+478    	; 0x750 <print_sharedf>
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	09 c0       	rjmp	.+18     	; 0x592 <tsl2591Callback+0x6c>
		}
		else if( TSL2591_OVERFLOW == rc )
     580:	83 30       	cpi	r24, 0x03	; 3
     582:	39 f4       	brne	.+14     	; 0x592 <tsl2591Callback+0x6c>
		{
			print_sharedf("Lux overflow - change gain and integration time\n"); //switch
     584:	84 ee       	ldi	r24, 0xE4	; 228
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	9f 93       	push	r25
     58a:	8f 93       	push	r24
     58c:	e1 d0       	rcall	.+450    	; 0x750 <print_sharedf>
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
		break;
		
		default:
		break;
	}
}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <createLightTask>:
} LightHandler;

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void createLightTask(UBaseType_t light_priority, LightHandler_t self){
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	08 2f       	mov	r16, r24
     5ac:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     5ae:	40 91 fd 15 	lds	r20, 0x15FD	; 0x8015fd <ready_bit>
     5b2:	50 91 fe 15 	lds	r21, 0x15FE	; 0x8015fe <ready_bit+0x1>
     5b6:	60 91 ff 15 	lds	r22, 0x15FF	; 0x8015ff <ready_bit+0x2>
     5ba:	70 91 00 16 	lds	r23, 0x1600	; 0x801600 <ready_bit+0x3>
     5be:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <group_start>
     5c2:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <group_start+0x1>
     5c6:	b2 d5       	rcall	.+2916   	; 0x112c <xEventGroupSetBits>
	
	xTaskCreate(startReadingLight
     5c8:	e1 2c       	mov	r14, r1
     5ca:	f1 2c       	mov	r15, r1
     5cc:	9e 01       	movw	r18, r28
     5ce:	48 e8       	ldi	r20, 0x88	; 136
     5d0:	51 e0       	ldi	r21, 0x01	; 1
     5d2:	65 e1       	ldi	r22, 0x15	; 21
     5d4:	73 e0       	ldi	r23, 0x03	; 3
     5d6:	86 e7       	ldi	r24, 0x76	; 118
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <xTaskCreate>
	, "Light task"
	, configMINIMAL_STACK_SIZE + 200,
	(void*) self,
	light_priority,
	NULL);
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	08 95       	ret

000005ea <createLightSensor>:
/*
* Method used for allocating memory for LightHandler struct and returning it, initializing the lux value to 0, setting groups and bits,
* initializing the driver, injecting callback, enabling the driver and creating a light task.
*/
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
     5ea:	8f 92       	push	r8
     5ec:	9f 92       	push	r9
     5ee:	af 92       	push	r10
     5f0:	bf 92       	push	r11
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	18 2f       	mov	r17, r24
     5fe:	7b 01       	movw	r14, r22
     600:	49 01       	movw	r8, r18
     602:	5a 01       	movw	r10, r20
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
     604:	62 e0       	ldi	r22, 0x02	; 2
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 21 36 	call	0x6c42	; 0x6c42 <calloc>
     610:	ec 01       	movw	r28, r24
	
	if(new_measure == NULL){
     612:	89 2b       	or	r24, r25
     614:	01 f1       	breq	.+64     	; 0x656 <createLightSensor+0x6c>
		return NULL;
	}
	new_measure -> lux = 0;
     616:	19 82       	std	Y+1, r1	; 0x01
     618:	18 82       	st	Y, r1
	ready_bit = bits;
     61a:	80 92 fd 15 	sts	0x15FD, r8	; 0x8015fd <ready_bit>
     61e:	90 92 fe 15 	sts	0x15FE, r9	; 0x8015fe <ready_bit+0x1>
     622:	a0 92 ff 15 	sts	0x15FF, r10	; 0x8015ff <ready_bit+0x2>
     626:	b0 92 00 16 	sts	0x1600, r11	; 0x801600 <ready_bit+0x3>
	group_start = eventBits;
     62a:	f0 92 02 16 	sts	0x1602, r15	; 0x801602 <group_start+0x1>
     62e:	e0 92 01 16 	sts	0x1601, r14	; 0x801601 <group_start>
	
	if ( TSL2591_OK == tsl2591_initialise(tsl2591Callback))
     632:	83 e9       	ldi	r24, 0x93	; 147
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <tsl2591_initialise>
     63a:	81 11       	cpse	r24, r1
     63c:	04 c0       	rjmp	.+8      	; 0x646 <createLightSensor+0x5c>
	{
		puts("Light sensor initialized"); //switch
     63e:	80 e2       	ldi	r24, 0x20	; 32
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <puts>
	}
	
	if ( TSL2591_OK != tsl2591_enable() )
     646:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <tsl2591_enable>
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
     64a:	be 01       	movw	r22, r28
     64c:	81 2f       	mov	r24, r17
     64e:	a8 df       	rcall	.-176    	; 0x5a0 <createLightTask>
	return new_measure;
     650:	8c 2f       	mov	r24, r28
     652:	9d 2f       	mov	r25, r29
     654:	02 c0       	rjmp	.+4      	; 0x65a <createLightSensor+0x70>
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
	
	if(new_measure == NULL){
		return NULL;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
	return new_measure;
}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	bf 90       	pop	r11
     666:	af 90       	pop	r10
     668:	9f 90       	pop	r9
     66a:	8f 90       	pop	r8
     66c:	08 95       	ret

0000066e <measure_light>:


void measure_light(LightHandler_t self){
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	ec 01       	movw	r28, r24
	
	EventBits_t readyBits = xEventGroupWaitBits(group_start,
     680:	40 91 fd 15 	lds	r20, 0x15FD	; 0x8015fd <ready_bit>
     684:	50 91 fe 15 	lds	r21, 0x15FE	; 0x8015fe <ready_bit+0x1>
     688:	60 91 ff 15 	lds	r22, 0x15FF	; 0x8015ff <ready_bit+0x2>
     68c:	70 91 00 16 	lds	r23, 0x1600	; 0x801600 <ready_bit+0x3>
     690:	cc 24       	eor	r12, r12
     692:	ca 94       	dec	r12
     694:	dc 2c       	mov	r13, r12
     696:	76 01       	movw	r14, r12
     698:	01 e0       	ldi	r16, 0x01	; 1
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <group_start>
     6a0:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <group_start+0x1>
     6a4:	a3 d4       	rcall	.+2374   	; 0xfec <xEventGroupWaitBits>
	ready_bit,
	pdFALSE,
	pdTRUE,
	portMAX_DELAY);
	if ((readyBits & (ready_bit)) == (ready_bit)) {
     6a6:	00 91 fd 15 	lds	r16, 0x15FD	; 0x8015fd <ready_bit>
     6aa:	10 91 fe 15 	lds	r17, 0x15FE	; 0x8015fe <ready_bit+0x1>
     6ae:	20 91 ff 15 	lds	r18, 0x15FF	; 0x8015ff <ready_bit+0x2>
     6b2:	30 91 00 16 	lds	r19, 0x1600	; 0x801600 <ready_bit+0x3>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	80 23       	and	r24, r16
     6bc:	91 23       	and	r25, r17
     6be:	a2 23       	and	r26, r18
     6c0:	b3 23       	and	r27, r19
     6c2:	08 17       	cp	r16, r24
     6c4:	19 07       	cpc	r17, r25
     6c6:	2a 07       	cpc	r18, r26
     6c8:	3b 07       	cpc	r19, r27
     6ca:	39 f4       	brne	.+14     	; 0x6da <measure_light+0x6c>
		if ( TSL2591_OK != tsl2591_fetchData() )
     6cc:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <tsl2591_fetchData>
     6d0:	81 11       	cpse	r24, r1
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <measure_light+0x6c>
			// Investigate the return code further
		}
		else
		{
			//The light data will be ready after the driver calls the call back function with
			tsl2591Callback(TSL2591_DATA_READY, self);
     6d4:	be 01       	movw	r22, r28
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	26 df       	rcall	.-436    	; 0x526 <tsl2591Callback>
		}
	}
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	08 95       	ret

000006ec <startReadingLight>:

void startReadingLight(void* self){
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <startReadingLight+0x6>
     6f2:	1f 92       	push	r1
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     6fa:	0e 94 7d 15 	call	0x2afa	; 0x2afa <xTaskGetTickCount>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     706:	42 ea       	ldi	r20, 0xA2	; 162
     708:	53 e0       	ldi	r21, 0x03	; 3
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	ce 01       	movw	r24, r28
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskDelayUntil>
		measure_light((LightHandler_t) self);
     716:	c8 01       	movw	r24, r16
     718:	aa df       	rcall	.-172    	; 0x66e <measure_light>
     71a:	f5 cf       	rjmp	.-22     	; 0x706 <startReadingLight+0x1a>

0000071c <getLight>:
}


uint16_t getLight(LightHandler_t self){
	return self->lux;
}
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	08 95       	ret

00000724 <setLight>:

void setLight(LightHandler_t self){
	self->lux = lux_val;
     724:	20 91 10 08 	lds	r18, 0x0810	; 0x800810 <lux_val>
     728:	30 91 11 08 	lds	r19, 0x0811	; 0x800811 <lux_val+0x1>
     72c:	fc 01       	movw	r30, r24
     72e:	31 83       	std	Z+1, r19	; 0x01
     730:	20 83       	st	Z, r18
     732:	08 95       	ret

00000734 <create_shared_printf>:
#include "SharedPrintf.h"

SemaphoreHandle_t xMutexPrint;

void create_shared_printf(){
	if (xMutexPrint == NULL ){
     734:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <xMutexPrint>
     738:	90 91 04 16 	lds	r25, 0x1604	; 0x801604 <xMutexPrint+0x1>
     73c:	89 2b       	or	r24, r25
     73e:	39 f4       	brne	.+14     	; 0x74e <create_shared_printf+0x1a>
		xMutexPrint = xSemaphoreCreateMutex();
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <xQueueCreateMutex>
     746:	90 93 04 16 	sts	0x1604, r25	; 0x801604 <xMutexPrint+0x1>
     74a:	80 93 03 16 	sts	0x1603, r24	; 0x801603 <xMutexPrint>
     74e:	08 95       	ret

00000750 <print_sharedf>:
	}
}

void print_sharedf(char* format, ...){
     750:	0f 93       	push	r16
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
	va_list lst;
	if (xSemaphoreTake(xMutexPrint, (TickType_t) 300) == pdTRUE) {
     75a:	4c e2       	ldi	r20, 0x2C	; 44
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <xMutexPrint>
     766:	90 91 04 16 	lds	r25, 0x1604	; 0x801604 <xMutexPrint+0x1>
     76a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	99 f4       	brne	.+38     	; 0x798 <print_sharedf+0x48>
		va_start(lst, format);
		vprintf(format, lst);
     772:	be 01       	movw	r22, r28
     774:	67 5f       	subi	r22, 0xF7	; 247
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	8f 81       	ldd	r24, Y+7	; 0x07
     77a:	98 85       	ldd	r25, Y+8	; 0x08
     77c:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <vprintf>
		xSemaphoreGive(xMutexPrint);
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <xMutexPrint>
     790:	90 91 04 16 	lds	r25, 0x1604	; 0x801604 <xMutexPrint+0x1>
     794:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
	}
	else {}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <create_semaphore_mutex_and_sensors>:
Temperature_t tempHum;
CO2_t co2;
LightHandler_t light;
SemaphoreHandle_t xMutexSemaphore;

void create_semaphore_mutex_and_sensors(Temperature_t temperatureObject, CO2_t co2Object, LightHandler_t lightObject){
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	7c 01       	movw	r14, r24
     7ae:	8b 01       	movw	r16, r22
     7b0:	ea 01       	movw	r28, r20
	if (xMutexSemaphore == NULL){
     7b2:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     7b6:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     7ba:	89 2b       	or	r24, r25
     7bc:	39 f4       	brne	.+14     	; 0x7cc <create_semaphore_mutex_and_sensors+0x2c>
		xMutexSemaphore = xSemaphoreCreateMutex();
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <xQueueCreateMutex>
     7c4:	90 93 0c 16 	sts	0x160C, r25	; 0x80160c <xMutexSemaphore+0x1>
     7c8:	80 93 0b 16 	sts	0x160B, r24	; 0x80160b <xMutexSemaphore>
	}
	
	tempHum = temperatureObject;
     7cc:	f0 92 06 16 	sts	0x1606, r15	; 0x801606 <tempHum+0x1>
     7d0:	e0 92 05 16 	sts	0x1605, r14	; 0x801605 <tempHum>
	co2 = co2Object;
     7d4:	10 93 08 16 	sts	0x1608, r17	; 0x801608 <co2+0x1>
     7d8:	00 93 07 16 	sts	0x1607, r16	; 0x801607 <co2>
	light = lightObject;
     7dc:	d0 93 0a 16 	sts	0x160A, r29	; 0x80160a <light+0x1>
     7e0:	c0 93 09 16 	sts	0x1609, r28	; 0x801609 <light>
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	08 95       	ret

000007f2 <set_temp_hum_mutex>:

void set_temp_hum_mutex(){
     7f2:	0f 93       	push	r16
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     7f4:	4c e2       	ldi	r20, 0x2C	; 44
     7f6:	51 e0       	ldi	r21, 0x01	; 1
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     800:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     804:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	91 f4       	brne	.+36     	; 0x830 <set_temp_hum_mutex+0x3e>
		temp_hum_set(tempHum);
     80c:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <tempHum>
     810:	90 91 06 16 	lds	r25, 0x1606	; 0x801606 <tempHum+0x1>
     814:	02 d2       	rcall	.+1028   	; 0xc1a <temp_hum_set>
		xSemaphoreGive(xMutexSemaphore);
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	a9 01       	movw	r20, r18
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     826:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     82a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
     82e:	07 c0       	rjmp	.+14     	; 0x83e <set_temp_hum_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     830:	89 e3       	ldi	r24, 0x39	; 57
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	8b df       	rcall	.-234    	; 0x750 <print_sharedf>
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
	}
	
}
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <get_humidity_val>:

uint16_t get_humidity_val(){
     842:	0f 93       	push	r16
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	uint16_t tmp;

	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     848:	4c e2       	ldi	r20, 0x2C	; 44
     84a:	51 e0       	ldi	r21, 0x01	; 1
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     854:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     858:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	b1 f4       	brne	.+44     	; 0x88c <get_humidity_val+0x4a>
		tmp = getHumidity(tempHum);
     860:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <tempHum>
     864:	90 91 06 16 	lds	r25, 0x1606	; 0x801606 <tempHum+0x1>
     868:	d4 d1       	rcall	.+936    	; 0xc12 <getHumidity>
     86a:	d8 2f       	mov	r29, r24
     86c:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     86e:	00 e0       	ldi	r16, 0x00	; 0
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     87e:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     882:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
		return tmp;
     886:	8d 2f       	mov	r24, r29
     888:	9c 2f       	mov	r25, r28
     88a:	09 c0       	rjmp	.+18     	; 0x89e <get_humidity_val+0x5c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     88c:	89 e3       	ldi	r24, 0x39	; 57
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	5d df       	rcall	.-326    	; 0x750 <print_sharedf>
		return 0;
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <get_temp_val>:

float get_temp_val(){
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
	float tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     8b0:	4c e2       	ldi	r20, 0x2C	; 44
     8b2:	51 e0       	ldi	r21, 0x01	; 1
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     8bc:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     8c0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	d1 f4       	brne	.+52     	; 0x8fc <get_temp_val+0x56>
		tmp = getTemperature(tempHum);
     8c8:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <tempHum>
     8cc:	90 91 06 16 	lds	r25, 0x1606	; 0x801606 <tempHum+0x1>
     8d0:	9a d1       	rcall	.+820    	; 0xc06 <getTemperature>
     8d2:	f6 2e       	mov	r15, r22
     8d4:	17 2f       	mov	r17, r23
     8d6:	d8 2f       	mov	r29, r24
     8d8:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     8ea:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     8ee:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
		return tmp;
     8f2:	5f 2d       	mov	r21, r15
     8f4:	41 2f       	mov	r20, r17
     8f6:	3d 2f       	mov	r19, r29
     8f8:	2c 2f       	mov	r18, r28
     8fa:	0b c0       	rjmp	.+22     	; 0x912 <get_temp_val+0x6c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     8fc:	89 e3       	ldi	r24, 0x39	; 57
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	25 df       	rcall	.-438    	; 0x750 <print_sharedf>
		return 0.0;
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     912:	65 2f       	mov	r22, r21
     914:	74 2f       	mov	r23, r20
     916:	83 2f       	mov	r24, r19
     918:	92 2f       	mov	r25, r18
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	08 95       	ret

00000926 <set_co2_mutex>:

void set_co2_mutex(){
     926:	0f 93       	push	r16
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     928:	4c e2       	ldi	r20, 0x2C	; 44
     92a:	51 e0       	ldi	r21, 0x01	; 1
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     934:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     938:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	91 f4       	brne	.+36     	; 0x964 <set_co2_mutex+0x3e>
		set_co2(co2);
     940:	80 91 07 16 	lds	r24, 0x1607	; 0x801607 <co2>
     944:	90 91 08 16 	lds	r25, 0x1608	; 0x801608 <co2+0x1>
     948:	92 dd       	rcall	.-1244   	; 0x46e <set_co2>
		xSemaphoreGive(xMutexSemaphore);
     94a:	00 e0       	ldi	r16, 0x00	; 0
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	a9 01       	movw	r20, r18
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     95a:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     95e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
     962:	07 c0       	rjmp	.+14     	; 0x972 <set_co2_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     964:	89 e3       	ldi	r24, 0x39	; 57
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	f1 de       	rcall	.-542    	; 0x750 <print_sharedf>
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
	}
}
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <get_co2_mutex>:

uint16_t get_co2_mutex(){
     976:	0f 93       	push	r16
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     97c:	4c e2       	ldi	r20, 0x2C	; 44
     97e:	51 e0       	ldi	r21, 0x01	; 1
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     988:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     98c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	b1 f4       	brne	.+44     	; 0x9c0 <get_co2_mutex+0x4a>
		tmp = getCO2(co2);
     994:	80 91 07 16 	lds	r24, 0x1607	; 0x801607 <co2>
     998:	90 91 08 16 	lds	r25, 0x1608	; 0x801608 <co2+0x1>
     99c:	64 dd       	rcall	.-1336   	; 0x466 <getCO2>
     99e:	d8 2f       	mov	r29, r24
     9a0:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     9a2:	00 e0       	ldi	r16, 0x00	; 0
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	a9 01       	movw	r20, r18
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     9b2:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     9b6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
		return tmp;
     9ba:	8d 2f       	mov	r24, r29
     9bc:	9c 2f       	mov	r25, r28
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <get_co2_mutex+0x5c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     9c0:	89 e3       	ldi	r24, 0x39	; 57
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	c3 de       	rcall	.-634    	; 0x750 <print_sharedf>
		return 0;
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <set_light_mutex>:

void set_light_mutex(){
     9da:	0f 93       	push	r16
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     9dc:	4c e2       	ldi	r20, 0x2C	; 44
     9de:	51 e0       	ldi	r21, 0x01	; 1
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     9e8:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     9ec:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	91 f4       	brne	.+36     	; 0xa18 <set_light_mutex+0x3e>
		setLight(light);
     9f4:	80 91 09 16 	lds	r24, 0x1609	; 0x801609 <light>
     9f8:	90 91 0a 16 	lds	r25, 0x160A	; 0x80160a <light+0x1>
     9fc:	93 de       	rcall	.-730    	; 0x724 <setLight>
		xSemaphoreGive(xMutexSemaphore);
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	a9 01       	movw	r20, r18
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     a0e:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     a12:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <set_light_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a18:	89 e3       	ldi	r24, 0x39	; 57
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	97 de       	rcall	.-722    	; 0x750 <print_sharedf>
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
	}
}
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <get_light_mutex>:

uint16_t get_light_mutex(){
     a2a:	0f 93       	push	r16
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     a30:	4c e2       	ldi	r20, 0x2C	; 44
     a32:	51 e0       	ldi	r21, 0x01	; 1
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     a3c:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     a40:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xQueueSemaphoreTake>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	b1 f4       	brne	.+44     	; 0xa74 <get_light_mutex+0x4a>
		tmp = getLight(light);
     a48:	80 91 09 16 	lds	r24, 0x1609	; 0x801609 <light>
     a4c:	90 91 0a 16 	lds	r25, 0x160A	; 0x80160a <light+0x1>
     a50:	65 de       	rcall	.-822    	; 0x71c <getLight>
     a52:	d8 2f       	mov	r29, r24
     a54:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	a9 01       	movw	r20, r18
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <xMutexSemaphore>
     a66:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <xMutexSemaphore+0x1>
     a6a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
		return tmp;
     a6e:	8d 2f       	mov	r24, r29
     a70:	9c 2f       	mov	r25, r28
     a72:	09 c0       	rjmp	.+18     	; 0xa86 <get_light_mutex+0x5c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a74:	89 e3       	ldi	r24, 0x39	; 57
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	69 de       	rcall	.-814    	; 0x750 <print_sharedf>
		return 0;
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <temperature_handler_init>:
typedef struct TemperatureHandler{
	float temperature;
	uint16_t humidity;
	} TemperatureHandler;
	
void temperature_handler_init(Temperature_t self, uint16_t priority){
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     a9c:	40 91 fd 15 	lds	r20, 0x15FD	; 0x8015fd <ready_bit>
     aa0:	50 91 fe 15 	lds	r21, 0x15FE	; 0x8015fe <ready_bit+0x1>
     aa4:	60 91 ff 15 	lds	r22, 0x15FF	; 0x8015ff <ready_bit+0x2>
     aa8:	70 91 00 16 	lds	r23, 0x1600	; 0x801600 <ready_bit+0x3>
     aac:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <group_start>
     ab0:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <group_start+0x1>
     ab4:	3b d3       	rcall	.+1654   	; 0x112c <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     ab6:	e1 2c       	mov	r14, r1
     ab8:	f1 2c       	mov	r15, r1
     aba:	9e 01       	movw	r18, r28
     abc:	40 ec       	ldi	r20, 0xC0	; 192
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	6a e5       	ldi	r22, 0x5A	; 90
     ac2:	73 e0       	ldi	r23, 0x03	; 3
     ac4:	80 eb       	ldi	r24, 0xB0	; 176
     ac6:	95 e0       	ldi	r25, 0x05	; 5
     ac8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <xTaskCreate>
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	08 95       	ret

00000ad8 <createTemp>:

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     ad8:	af 92       	push	r10
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	8c 01       	movw	r16, r24
     aee:	5b 01       	movw	r10, r22
     af0:	69 01       	movw	r12, r18
     af2:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <malloc>
     afc:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     afe:	89 2b       	or	r24, r25
     b00:	01 f1       	breq	.+64     	; 0xb42 <createTemp+0x6a>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     b02:	18 82       	st	Y, r1
     b04:	19 82       	std	Y+1, r1	; 0x01
     b06:	1a 82       	std	Y+2, r1	; 0x02
     b08:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     b0a:	1d 82       	std	Y+5, r1	; 0x05
     b0c:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     b0e:	b0 92 02 16 	sts	0x1602, r11	; 0x801602 <group_start+0x1>
     b12:	a0 92 01 16 	sts	0x1601, r10	; 0x801601 <group_start>
	ready_bit = bit;
     b16:	c0 92 fd 15 	sts	0x15FD, r12	; 0x8015fd <ready_bit>
     b1a:	d0 92 fe 15 	sts	0x15FE, r13	; 0x8015fe <ready_bit+0x1>
     b1e:	e0 92 ff 15 	sts	0x15FF, r14	; 0x8015ff <ready_bit+0x2>
     b22:	f0 92 00 16 	sts	0x1600, r15	; 0x801600 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     b26:	0e 94 a6 24 	call	0x494c	; 0x494c <hih8120_initialise>
     b2a:	81 11       	cpse	r24, r1
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <createTemp+0x5e>
	{
		puts("Temp sensor initialized.");
     b2e:	8b e6       	ldi	r24, 0x6B	; 107
     b30:	93 e0       	ldi	r25, 0x03	; 3
     b32:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     b36:	b8 01       	movw	r22, r16
     b38:	ce 01       	movw	r24, r28
     b3a:	a9 df       	rcall	.-174    	; 0xa8e <temperature_handler_init>
	return new_measure;
     b3c:	8c 2f       	mov	r24, r28
     b3e:	9d 2f       	mov	r25, r29
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <createTemp+0x6e>
}

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	df 90       	pop	r13
     b54:	cf 90       	pop	r12
     b56:	bf 90       	pop	r11
     b58:	af 90       	pop	r10
     b5a:	08 95       	ret

00000b5c <measureTempAndHum>:

void measureTempAndHum(Temperature_t self){
	set_temp_hum_mutex();
     b5c:	4a ce       	rjmp	.-876    	; 0x7f2 <set_temp_hum_mutex>
     b5e:	08 95       	ret

00000b60 <startReading>:
}

void startReading(void* self){
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	00 d0       	rcall	.+0      	; 0xb66 <startReading+0x6>
     b66:	1f 92       	push	r1
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     b6e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <xTaskGetTickCount>
     b72:	69 83       	std	Y+1, r22	; 0x01
     b74:	7a 83       	std	Y+2, r23	; 0x02
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     b7a:	42 ea       	ldi	r20, 0xA2	; 162
     b7c:	53 e0       	ldi	r21, 0x03	; 3
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     b8a:	0e 94 be 24 	call	0x497c	; 0x497c <hih8120_wakeup>
     b8e:	88 23       	and	r24, r24
     b90:	21 f0       	breq	.+8      	; 0xb9a <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     b92:	84 e8       	ldi	r24, 0x84	; 132
     b94:	93 e0       	ldi	r25, 0x03	; 3
     b96:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     b9a:	40 91 fd 15 	lds	r20, 0x15FD	; 0x8015fd <ready_bit>
     b9e:	50 91 fe 15 	lds	r21, 0x15FE	; 0x8015fe <ready_bit+0x1>
     ba2:	60 91 ff 15 	lds	r22, 0x15FF	; 0x8015ff <ready_bit+0x2>
     ba6:	70 91 00 16 	lds	r23, 0x1600	; 0x801600 <ready_bit+0x3>
     baa:	cc 24       	eor	r12, r12
     bac:	ca 94       	dec	r12
     bae:	dc 2c       	mov	r13, r12
     bb0:	76 01       	movw	r14, r12
     bb2:	01 e0       	ldi	r16, 0x01	; 1
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	80 91 01 16 	lds	r24, 0x1601	; 0x801601 <group_start>
     bba:	90 91 02 16 	lds	r25, 0x1602	; 0x801602 <group_start+0x1>
     bbe:	16 d2       	rcall	.+1068   	; 0xfec <xEventGroupWaitBits>
     bc0:	6b 01       	movw	r12, r22
     bc2:	7c 01       	movw	r14, r24
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     bc4:	64 e0       	ldi	r22, 0x04	; 4
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <vTaskDelay>
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     bd0:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <ready_bit>
     bd4:	90 91 fe 15 	lds	r25, 0x15FE	; 0x8015fe <ready_bit+0x1>
     bd8:	a0 91 ff 15 	lds	r26, 0x15FF	; 0x8015ff <ready_bit+0x2>
     bdc:	b0 91 00 16 	lds	r27, 0x1600	; 0x801600 <ready_bit+0x3>
     be0:	c8 22       	and	r12, r24
     be2:	d9 22       	and	r13, r25
     be4:	ea 22       	and	r14, r26
     be6:	fb 22       	and	r15, r27
     be8:	8c 15       	cp	r24, r12
     bea:	9d 05       	cpc	r25, r13
     bec:	ae 05       	cpc	r26, r14
     bee:	bf 05       	cpc	r27, r15
     bf0:	21 f6       	brne	.-120    	; 0xb7a <startReading+0x1a>
		hih8120_measure(); //measure temperature and humidity
     bf2:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	cb 01       	movw	r24, r22
     bfc:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <vTaskDelay>
		
		measureTempAndHum((Temperature_t) self);
     c00:	c5 01       	movw	r24, r10
     c02:	ac df       	rcall	.-168    	; 0xb5c <measureTempAndHum>
     c04:	ba cf       	rjmp	.-140    	; 0xb7a <startReading+0x1a>

00000c06 <getTemperature>:
	}
}


float getTemperature(Temperature_t self){
	return self->temperature;
     c06:	fc 01       	movw	r30, r24
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
}
     c10:	08 95       	ret

00000c12 <getHumidity>:

uint16_t getHumidity(Temperature_t self){
	return self -> humidity;
}
     c12:	fc 01       	movw	r30, r24
     c14:	84 81       	ldd	r24, Z+4	; 0x04
     c16:	95 81       	ldd	r25, Z+5	; 0x05
     c18:	08 95       	ret

00000c1a <temp_hum_set>:

void temp_hum_set(Temperature_t self){
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     c20:	0e 94 01 25 	call	0x4a02	; 0x4a02 <hih8120_getTemperature>
     c24:	68 83       	st	Y, r22
     c26:	79 83       	std	Y+1, r23	; 0x01
     c28:	8a 83       	std	Y+2, r24	; 0x02
     c2a:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10()/10;
     c2c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <hih8120_getHumidityPercent_x10>
     c30:	9c 01       	movw	r18, r24
     c32:	ad ec       	ldi	r26, 0xCD	; 205
     c34:	bc ec       	ldi	r27, 0xCC	; 204
     c36:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__umulhisi3>
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	96 95       	lsr	r25
     c40:	87 95       	ror	r24
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	9d 83       	std	Y+5, r25	; 0x05
     c48:	8c 83       	std	Y+4, r24	; 0x04
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	64 97       	sbiw	r28, 0x14	; 20
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	//status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     c68:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <lora_driver_rn2483FactoryReset>
     c6c:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     c70:	9f 93       	push	r25
     c72:	8f 93       	push	r24
     c74:	8e e9       	ldi	r24, 0x9E	; 158
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     c80:	0e 94 05 28 	call	0x500a	; 0x500a <lora_driver_configureToEu868>
     c84:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	81 eb       	ldi	r24, 0xB1	; 177
     c8e:	93 e0       	ldi	r25, 0x03	; 3
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     c98:	8e 01       	movw	r16, r28
     c9a:	0f 5f       	subi	r16, 0xFF	; 255
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	c8 01       	movw	r24, r16
     ca0:	0e 94 99 26 	call	0x4d32	; 0x4d32 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     ca4:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     ca8:	1f 93       	push	r17
     caa:	0f 93       	push	r16
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	8a ec       	ldi	r24, 0xCA	; 202
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     cbc:	c8 01       	movw	r24, r16
     cbe:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <lora_driver_setDeviceIdentifier>
     cc2:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	1f 93       	push	r17
     ccc:	0f 93       	push	r16
     cce:	8e ed       	ldi	r24, 0xDE	; 222
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     cda:	a8 01       	movw	r20, r16
     cdc:	63 ef       	ldi	r22, 0xF3	; 243
     cde:	73 e0       	ldi	r23, 0x03	; 3
     ce0:	84 e1       	ldi	r24, 0x14	; 20
     ce2:	94 e0       	ldi	r25, 0x04	; 4
     ce4:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <lora_driver_setOtaaIdentity>
     ce8:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	1f 93       	push	r17
     cf2:	0f 93       	push	r16
     cf4:	83 ef       	ldi	r24, 0xF3	; 243
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	84 e1       	ldi	r24, 0x14	; 20
     cfe:	94 e0       	ldi	r25, 0x04	; 4
     d00:	9f 93       	push	r25
     d02:	8f 93       	push	r24
     d04:	85 e2       	ldi	r24, 0x25	; 37
     d06:	94 e0       	ldi	r25, 0x04	; 4
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     d10:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <lora_driver_saveMac>
     d14:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	8b e5       	ldi	r24, 0x5B	; 91
     d1e:	94 e0       	ldi	r25, 0x04	; 4
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <lora_driver_setAdaptiveDataRate>
     d38:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	8a e6       	ldi	r24, 0x6A	; 106
     d42:	94 e0       	ldi	r25, 0x04	; 4
     d44:	9f 93       	push	r25
     d46:	8f 93       	push	r24
     d48:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     d4c:	84 ef       	ldi	r24, 0xF4	; 244
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 ed 27 	call	0x4fda	; 0x4fda <lora_driver_setReceiveDelay>
     d54:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	8f 93       	push	r24
     d60:	84 ef       	ldi	r24, 0xF4	; 244
     d62:	8f 93       	push	r24
     d64:	8b e8       	ldi	r24, 0x8B	; 139
     d66:	94 e0       	ldi	r25, 0x04	; 4
     d68:	9f 93       	push	r25
     d6a:	8f 93       	push	r24
     d6c:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     d7a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <lora_driver_join>
     d82:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     d84:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     d88:	9f 93       	push	r25
     d8a:	8f 93       	push	r24
     d8c:	1f 92       	push	r1
     d8e:	1f 93       	push	r17
     d90:	8b ea       	ldi	r24, 0xAB	; 171
     d92:	94 e0       	ldi	r25, 0x04	; 4
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>

		if ( rc != LORA_ACCEPTED)
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	08 30       	cpi	r16, 0x08	; 8
     daa:	41 f0       	breq	.+16     	; 0xdbc <_lora_setup+0x16c>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     dac:	66 e3       	ldi	r22, 0x36	; 54
     dae:	71 e0       	ldi	r23, 0x01	; 1
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     db8:	11 50       	subi	r17, 0x01	; 1
     dba:	01 f7       	brne	.-64     	; 0xd7c <_lora_setup+0x12c>

	if (rc == LORA_ACCEPTED)
     dbc:	08 30       	cpi	r16, 0x08	; 8
     dbe:	11 f0       	breq	.+4      	; 0xdc4 <_lora_setup+0x174>
		//status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     dc0:	6a d4       	rcall	.+2260   	; 0x1696 <vPortYield>
     dc2:	fe cf       	rjmp	.-4      	; 0xdc0 <_lora_setup+0x170>
		}
	}
}
     dc4:	64 96       	adiw	r28, 0x14	; 20
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <lora_handler_task>:

void lora_handler_task(void* pvParameters){
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	6e 97       	sbiw	r28, 0x1e	; 30
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <lora_driver_resetRn2483>
	vTaskDelay(2);
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <vTaskDelay>
	lora_driver_resetRn2483(0);
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     e06:	66 e9       	ldi	r22, 0x96	; 150
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     e12:	0e 94 32 26 	call	0x4c64	; 0x4c64 <lora_driver_flushBuffers>

	_lora_setup();
     e16:	1c df       	rcall	.-456    	; 0xc50 <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     e18:	0e 94 7d 15 	call	0x2afa	; 0x2afa <xTaskGetTickCount>
     e1c:	69 83       	std	Y+1, r22	; 0x01
     e1e:	7a 83       	std	Y+2, r23	; 0x02
     e20:	8b 83       	std	Y+3, r24	; 0x03
     e22:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;){
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     e24:	44 e4       	ldi	r20, 0x44	; 68
     e26:	57 e0       	ldi	r21, 0x07	; 7
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskDelayUntil>
		_uplink_payload.len = 7;
     e34:	02 e1       	ldi	r16, 0x12	; 18
     e36:	18 e0       	ldi	r17, 0x08	; 8
     e38:	87 e0       	ldi	r24, 0x07	; 7
     e3a:	f8 01       	movw	r30, r16
     e3c:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
		
		
		double temp = (double) get_temp_val();
     e40:	80 83       	st	Z, r24
     e42:	31 dd       	rcall	.-1438   	; 0x8a6 <get_temp_val>
     e44:	36 2e       	mov	r3, r22
     e46:	87 2e       	mov	r8, r23
     e48:	a8 2e       	mov	r10, r24
		uint16_t humidity = get_humidity_val();
     e4a:	99 2e       	mov	r9, r25
     e4c:	fa dc       	rcall	.-1548   	; 0x842 <get_humidity_val>
     e4e:	b8 2e       	mov	r11, r24
		uint16_t co2_val = get_co2_mutex();
     e50:	29 2e       	mov	r2, r25
     e52:	91 dd       	rcall	.-1246   	; 0x976 <get_co2_mutex>
     e54:	d8 2e       	mov	r13, r24
		uint16_t light_val = get_light_mutex();
     e56:	c9 2e       	mov	r12, r25
     e58:	e8 dd       	rcall	.-1072   	; 0xa2a <get_light_mutex>
     e5a:	f8 2e       	mov	r15, r24
     e5c:	e9 2e       	mov	r14, r25
				
	
		double val1=0;
     e5e:	1b 8e       	std	Y+27, r1	; 0x1b
     e60:	1c 8e       	std	Y+28, r1	; 0x1c
     e62:	1d 8e       	std	Y+29, r1	; 0x1d
     e64:	1e 8e       	std	Y+30, r1	; 0x1e
		double val2=0;
		val2 = modf(temp, &val1);
     e66:	ae 01       	movw	r20, r28
     e68:	45 5e       	subi	r20, 0xE5	; 229
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	63 2d       	mov	r22, r3
     e6e:	78 2d       	mov	r23, r8
     e70:	8a 2d       	mov	r24, r10
     e72:	99 2d       	mov	r25, r9
     e74:	0e 94 56 23 	call	0x46ac	; 0x46ac <modf>
		val2 = val2 * 100;
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	48 ec       	ldi	r20, 0xC8	; 200
     e7e:	52 e4       	ldi	r21, 0x42	; 66
     e80:	0e 94 89 23 	call	0x4712	; 0x4712 <__mulsf3>
     e84:	2b 01       	movw	r4, r22
     e86:	3c 01       	movw	r6, r24
		printf("\ntemp: %f", temp);
     e88:	9f 92       	push	r9
     e8a:	af 92       	push	r10
     e8c:	8f 92       	push	r8
     e8e:	3f 92       	push	r3
     e90:	8b ec       	ldi	r24, 0xCB	; 203
     e92:	94 e0       	ldi	r25, 0x04	; 4
     e94:	9f 93       	push	r25
     e96:	8f 93       	push	r24
     e98:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
		_uplink_payload.bytes[0] = (int) val1;
     e9c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e9e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ea0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ea4:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <__fixsfsi>
     ea8:	f8 01       	movw	r30, r16
     eaa:	62 83       	std	Z+2, r22	; 0x02
		_uplink_payload.bytes[1] = (int) val2;
     eac:	c3 01       	movw	r24, r6
     eae:	b2 01       	movw	r22, r4
     eb0:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <__fixsfsi>
     eb4:	f8 01       	movw	r30, r16
     eb6:	63 83       	std	Z+3, r22	; 0x03
		
		//humidity
		printf("\nhumidity: %d", humidity);
     eb8:	2f 92       	push	r2
     eba:	bf 92       	push	r11
     ebc:	85 ed       	ldi	r24, 0xD5	; 213
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
		_uplink_payload.bytes[2] = humidity;
     ec8:	f8 01       	movw	r30, r16
     eca:	b4 82       	std	Z+4, r11	; 0x04
		
		//co2
		printf("\nco2: %d", co2_val);
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	83 ee       	ldi	r24, 0xE3	; 227
     ed2:	94 e0       	ldi	r25, 0x04	; 4
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
     ed8:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
		_uplink_payload.bytes[3] = co2_val >> 8;
     edc:	f8 01       	movw	r30, r16
     ede:	c5 82       	std	Z+5, r12	; 0x05
		_uplink_payload.bytes[4] = co2_val & 0xFF;
     ee0:	d6 82       	std	Z+6, r13	; 0x06
		
		//light
		printf("\nlight in lux: %d", light_val);
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	8c ee       	ldi	r24, 0xEC	; 236
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	9f 93       	push	r25
     eec:	8f 93       	push	r24
     eee:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
		_uplink_payload.bytes[5] = light_val >> 8;
     ef2:	f8 01       	movw	r30, r16
     ef4:	e7 82       	std	Z+7, r14	; 0x07
		_uplink_payload.bytes[6] = light_val & 0xFF;
     ef6:	f0 86       	std	Z+8, r15	; 0x08
		
	
		
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     ef8:	b8 01       	movw	r22, r16
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <lora_driver_sendUploadMessage>
     f00:	0e 94 04 29 	call	0x5208	; 0x5208 <lora_driver_mapReturnCodeToText>
     f04:	9f 93       	push	r25
     f06:	8f 93       	push	r24
     f08:	8e ef       	ldi	r24, 0xFE	; 254
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
		
		lora_driver_payload_t downlinkPayload;
		xMessageBufferReceive(downlinkBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     f14:	0f ef       	ldi	r16, 0xFF	; 255
     f16:	1f ef       	ldi	r17, 0xFF	; 255
     f18:	98 01       	movw	r18, r16
     f1a:	46 e1       	ldi	r20, 0x16	; 22
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	be 01       	movw	r22, r28
     f20:	6b 5f       	subi	r22, 0xFB	; 251
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	80 91 0d 16 	lds	r24, 0x160D	; 0x80160d <downlinkBuffer>
     f28:	90 91 0e 16 	lds	r25, 0x160E	; 0x80160e <downlinkBuffer+0x1>
     f2c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	1f 92       	push	r1
     f36:	9f 93       	push	r25
     f38:	1f 92       	push	r1
     f3a:	8f 93       	push	r24
     f3c:	87 ea       	ldi	r24, 0xA7	; 167
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	9f 93       	push	r25
     f42:	8f 93       	push	r24
     f44:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <printf>
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	68 cf       	rjmp	.-304    	; 0xe24 <lora_handler_task+0x4a>

00000f54 <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;
MessageBufferHandle_t downlinkBuffer;

void lora_handler_task(void* pvParameters);

void lora_handler_initialize(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBufferHandle){
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
	
	//temperatureAndHumidity = temperatureObject;
	//co2 = co2Object;
	//light_handler = lightObject;
	downlinkBuffer = downLinkMessageBufferHandle;
     f5a:	70 93 0e 16 	sts	0x160E, r23	; 0x80160e <downlinkBuffer+0x1>
     f5e:	60 93 0d 16 	sts	0x160D, r22	; 0x80160d <downlinkBuffer>
	xTaskCreate(
     f62:	e1 2c       	mov	r14, r1
     f64:	f1 2c       	mov	r15, r1
     f66:	08 2f       	mov	r16, r24
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	48 e8       	ldi	r20, 0x88	; 136
     f6e:	51 e0       	ldi	r21, 0x01	; 1
     f70:	63 e1       	ldi	r22, 0x13	; 19
     f72:	75 e0       	ldi	r23, 0x05	; 5
     f74:	8d ee       	ldi	r24, 0xED	; 237
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     f84:	0f 93       	push	r16
     f86:	01 11       	cpse	r16, r1
     f88:	0c c0       	rjmp	.+24     	; 0xfa2 <prvTestWaitCondition+0x1e>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	82 23       	and	r24, r18
     f90:	93 23       	and	r25, r19
     f92:	a4 23       	and	r26, r20
     f94:	b5 23       	and	r27, r21
     f96:	89 2b       	or	r24, r25
     f98:	8a 2b       	or	r24, r26
     f9a:	8b 2b       	or	r24, r27
     f9c:	79 f4       	brne	.+30     	; 0xfbc <prvTestWaitCondition+0x38>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	10 c0       	rjmp	.+32     	; 0xfc2 <prvTestWaitCondition+0x3e>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	82 23       	and	r24, r18
     fa8:	93 23       	and	r25, r19
     faa:	a4 23       	and	r26, r20
     fac:	b5 23       	and	r27, r21
     fae:	28 17       	cp	r18, r24
     fb0:	39 07       	cpc	r19, r25
     fb2:	4a 07       	cpc	r20, r26
     fb4:	5b 07       	cpc	r21, r27
     fb6:	21 f0       	breq	.+8      	; 0xfc0 <prvTestWaitCondition+0x3c>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <prvTestWaitCondition+0x3e>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <prvTestWaitCondition+0x3e>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <xEventGroupCreate>:
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	8f e0       	ldi	r24, 0x0F	; 15
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	af d1       	rcall	.+862    	; 0x132e <pvPortMalloc>
     fd0:	ec 01       	movw	r28, r24
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <xEventGroupCreate+0x1e>
     fd6:	fc 01       	movw	r30, r24
     fd8:	11 92       	st	Z+, r1
     fda:	11 92       	st	Z+, r1
     fdc:	11 92       	st	Z+, r1
     fde:	11 92       	st	Z+, r1
     fe0:	cf 01       	movw	r24, r30
     fe2:	8b d2       	rcall	.+1302   	; 0x14fa <vListInitialise>
     fe4:	ce 01       	movw	r24, r28
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <xEventGroupWaitBits>:
     fec:	2f 92       	push	r2
     fee:	3f 92       	push	r3
     ff0:	4f 92       	push	r4
     ff2:	5f 92       	push	r5
     ff4:	6f 92       	push	r6
     ff6:	7f 92       	push	r7
     ff8:	8f 92       	push	r8
     ffa:	9f 92       	push	r9
     ffc:	af 92       	push	r10
     ffe:	bf 92       	push	r11
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	ec 01       	movw	r28, r24
    1012:	4a 01       	movw	r8, r20
    1014:	5b 01       	movw	r10, r22
    1016:	62 2e       	mov	r6, r18
    1018:	70 2e       	mov	r7, r16
    101a:	0e 94 77 15 	call	0x2aee	; 0x2aee <vTaskSuspendAll>
    101e:	28 80       	ld	r2, Y
    1020:	39 80       	ldd	r3, Y+1	; 0x01
    1022:	4a 80       	ldd	r4, Y+2	; 0x02
    1024:	5b 80       	ldd	r5, Y+3	; 0x03
    1026:	a5 01       	movw	r20, r10
    1028:	94 01       	movw	r18, r8
    102a:	c2 01       	movw	r24, r4
    102c:	b1 01       	movw	r22, r2
    102e:	aa df       	rcall	.-172    	; 0xf84 <prvTestWaitCondition>
    1030:	88 23       	and	r24, r24
    1032:	a1 f0       	breq	.+40     	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
    1034:	66 20       	and	r6, r6
    1036:	89 f1       	breq	.+98     	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
    1038:	d5 01       	movw	r26, r10
    103a:	c4 01       	movw	r24, r8
    103c:	80 95       	com	r24
    103e:	90 95       	com	r25
    1040:	a0 95       	com	r26
    1042:	b0 95       	com	r27
    1044:	82 21       	and	r24, r2
    1046:	93 21       	and	r25, r3
    1048:	a4 21       	and	r26, r4
    104a:	b5 21       	and	r27, r5
    104c:	88 83       	st	Y, r24
    104e:	99 83       	std	Y+1, r25	; 0x01
    1050:	aa 83       	std	Y+2, r26	; 0x02
    1052:	bb 83       	std	Y+3, r27	; 0x03
    1054:	c1 2c       	mov	r12, r1
    1056:	d1 2c       	mov	r13, r1
    1058:	76 01       	movw	r14, r12
    105a:	22 c0       	rjmp	.+68     	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    105c:	c1 14       	cp	r12, r1
    105e:	d1 04       	cpc	r13, r1
    1060:	e1 04       	cpc	r14, r1
    1062:	f1 04       	cpc	r15, r1
    1064:	e9 f0       	breq	.+58     	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    1066:	61 10       	cpse	r6, r1
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	ba 01       	movw	r22, r20
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	71 e0       	ldi	r23, 0x01	; 1
    107a:	71 10       	cpse	r7, r1
    107c:	74 60       	ori	r23, 0x04	; 4
    107e:	48 29       	or	r20, r8
    1080:	59 29       	or	r21, r9
    1082:	6a 29       	or	r22, r10
    1084:	7b 29       	or	r23, r11
    1086:	97 01       	movw	r18, r14
    1088:	86 01       	movw	r16, r12
    108a:	ce 01       	movw	r24, r28
    108c:	04 96       	adiw	r24, 0x04	; 4
    108e:	0e 94 8f 18 	call	0x311e	; 0x311e <vTaskPlaceOnUnorderedEventList>
    1092:	21 2c       	mov	r2, r1
    1094:	31 2c       	mov	r3, r1
    1096:	21 01       	movw	r4, r2
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    109a:	c1 2c       	mov	r12, r1
    109c:	d1 2c       	mov	r13, r1
    109e:	76 01       	movw	r14, r12
    10a0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
    10a4:	cd 28       	or	r12, r13
    10a6:	ce 28       	or	r12, r14
    10a8:	cf 28       	or	r12, r15
    10aa:	59 f1       	breq	.+86     	; 0x1102 <__EEPROM_REGION_LENGTH__+0x102>
    10ac:	81 11       	cpse	r24, r1
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <__EEPROM_REGION_LENGTH__+0xb2>
    10b0:	f2 d2       	rcall	.+1508   	; 0x1696 <vPortYield>
    10b2:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <uxTaskResetEventItemValue>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
    10ba:	91 fd       	sbrc	r25, 1
    10bc:	1f c0       	rjmp	.+62     	; 0x10fc <__EEPROM_REGION_LENGTH__+0xfc>
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	0f 92       	push	r0
    10c4:	c8 80       	ld	r12, Y
    10c6:	d9 80       	ldd	r13, Y+1	; 0x01
    10c8:	ea 80       	ldd	r14, Y+2	; 0x02
    10ca:	fb 80       	ldd	r15, Y+3	; 0x03
    10cc:	07 2d       	mov	r16, r7
    10ce:	a5 01       	movw	r20, r10
    10d0:	94 01       	movw	r18, r8
    10d2:	c7 01       	movw	r24, r14
    10d4:	b6 01       	movw	r22, r12
    10d6:	56 df       	rcall	.-340    	; 0xf84 <prvTestWaitCondition>
    10d8:	88 23       	and	r24, r24
    10da:	71 f0       	breq	.+28     	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    10dc:	66 20       	and	r6, r6
    10de:	61 f0       	breq	.+24     	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    10e0:	80 94       	com	r8
    10e2:	90 94       	com	r9
    10e4:	a0 94       	com	r10
    10e6:	b0 94       	com	r11
    10e8:	8c 20       	and	r8, r12
    10ea:	9d 20       	and	r9, r13
    10ec:	ae 20       	and	r10, r14
    10ee:	bf 20       	and	r11, r15
    10f0:	88 82       	st	Y, r8
    10f2:	99 82       	std	Y+1, r9	; 0x01
    10f4:	aa 82       	std	Y+2, r10	; 0x02
    10f6:	bb 82       	std	Y+3, r11	; 0x03
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	16 01       	movw	r2, r12
    10fe:	27 01       	movw	r4, r14
    1100:	55 24       	eor	r5, r5
    1102:	c2 01       	movw	r24, r4
    1104:	b1 01       	movw	r22, r2
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	7f 90       	pop	r7
    1120:	6f 90       	pop	r6
    1122:	5f 90       	pop	r5
    1124:	4f 90       	pop	r4
    1126:	3f 90       	pop	r3
    1128:	2f 90       	pop	r2
    112a:	08 95       	ret

0000112c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
    112c:	4f 92       	push	r4
    112e:	5f 92       	push	r5
    1130:	6f 92       	push	r6
    1132:	7f 92       	push	r7
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
    114a:	6a 01       	movw	r12, r20
    114c:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    114e:	8c 01       	movw	r16, r24
    1150:	09 5f       	subi	r16, 0xF9	; 249
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1154:	0e 94 77 15 	call	0x2aee	; 0x2aee <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1158:	eb 85       	ldd	r30, Y+11	; 0x0b
    115a:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    115c:	88 81       	ld	r24, Y
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	aa 81       	ldd	r26, Y+2	; 0x02
    1162:	bb 81       	ldd	r27, Y+3	; 0x03
    1164:	c8 2a       	or	r12, r24
    1166:	d9 2a       	or	r13, r25
    1168:	ea 2a       	or	r14, r26
    116a:	fb 2a       	or	r15, r27
    116c:	c8 82       	st	Y, r12
    116e:	d9 82       	std	Y+1, r13	; 0x01
    1170:	ea 82       	std	Y+2, r14	; 0x02
    1172:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1174:	c1 2c       	mov	r12, r1
    1176:	d1 2c       	mov	r13, r1
    1178:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    117a:	3d c0       	rjmp	.+122    	; 0x11f6 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
    117c:	a4 80       	ldd	r10, Z+4	; 0x04
    117e:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	a2 81       	ldd	r26, Z+2	; 0x02
    1186:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1188:	ac 01       	movw	r20, r24
    118a:	bd 01       	movw	r22, r26
    118c:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    118e:	b2 fd       	sbrc	r27, 2
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    1192:	48 80       	ld	r4, Y
    1194:	59 80       	ldd	r5, Y+1	; 0x01
    1196:	6a 80       	ldd	r6, Y+2	; 0x02
    1198:	7b 80       	ldd	r7, Y+3	; 0x03
    119a:	44 22       	and	r4, r20
    119c:	55 22       	and	r5, r21
    119e:	66 22       	and	r6, r22
    11a0:	77 22       	and	r7, r23
    11a2:	45 28       	or	r4, r5
    11a4:	46 28       	or	r4, r6
    11a6:	47 28       	or	r4, r7
    11a8:	89 f4       	brne	.+34     	; 0x11cc <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	12 c0       	rjmp	.+36     	; 0x11d2 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    11ae:	48 80       	ld	r4, Y
    11b0:	59 80       	ldd	r5, Y+1	; 0x01
    11b2:	6a 80       	ldd	r6, Y+2	; 0x02
    11b4:	7b 80       	ldd	r7, Y+3	; 0x03
    11b6:	44 22       	and	r4, r20
    11b8:	55 22       	and	r5, r21
    11ba:	66 22       	and	r6, r22
    11bc:	77 22       	and	r7, r23
    11be:	44 15       	cp	r20, r4
    11c0:	55 05       	cpc	r21, r5
    11c2:	66 05       	cpc	r22, r6
    11c4:	77 05       	cpc	r23, r7
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    11d0:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    11d2:	22 23       	and	r18, r18
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    11d6:	b0 ff       	sbrs	r27, 0
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    11da:	c4 2a       	or	r12, r20
    11dc:	d5 2a       	or	r13, r21
    11de:	e6 2a       	or	r14, r22
    11e0:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    11e2:	48 81       	ld	r20, Y
    11e4:	59 81       	ldd	r21, Y+1	; 0x01
    11e6:	6a 81       	ldd	r22, Y+2	; 0x02
    11e8:	7b 81       	ldd	r23, Y+3	; 0x03
    11ea:	72 60       	ori	r23, 0x02	; 2
    11ec:	cf 01       	movw	r24, r30
    11ee:	0e 94 ca 19 	call	0x3394	; 0x3394 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    11f2:	ea 2d       	mov	r30, r10
    11f4:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    11f6:	e0 17       	cp	r30, r16
    11f8:	f1 07       	cpc	r31, r17
    11fa:	09 f0       	breq	.+2      	; 0x11fe <xEventGroupSetBits+0xd2>
    11fc:	bf cf       	rjmp	.-130    	; 0x117c <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    11fe:	c0 94       	com	r12
    1200:	d0 94       	com	r13
    1202:	e0 94       	com	r14
    1204:	f0 94       	com	r15
    1206:	88 81       	ld	r24, Y
    1208:	99 81       	ldd	r25, Y+1	; 0x01
    120a:	aa 81       	ldd	r26, Y+2	; 0x02
    120c:	bb 81       	ldd	r27, Y+3	; 0x03
    120e:	c8 22       	and	r12, r24
    1210:	d9 22       	and	r13, r25
    1212:	ea 22       	and	r14, r26
    1214:	fb 22       	and	r15, r27
    1216:	c8 82       	st	Y, r12
    1218:	d9 82       	std	Y+1, r13	; 0x01
    121a:	ea 82       	std	Y+2, r14	; 0x02
    121c:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    121e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1222:	68 81       	ld	r22, Y
    1224:	79 81       	ldd	r23, Y+1	; 0x01
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	9b 81       	ldd	r25, Y+3	; 0x03
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	7f 90       	pop	r7
    1240:	6f 90       	pop	r6
    1242:	5f 90       	pop	r5
    1244:	4f 90       	pop	r4
    1246:	08 95       	ret

00001248 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1248:	e4 e3       	ldi	r30, 0x34	; 52
    124a:	f8 e0       	ldi	r31, 0x08	; 8
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b8 e0       	ldi	r27, 0x08	; 8
    1250:	b1 83       	std	Z+1, r27	; 0x01
    1252:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    1254:	13 82       	std	Z+3, r1	; 0x03
    1256:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    1258:	ec ee       	ldi	r30, 0xEC	; 236
    125a:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    125c:	f0 93 33 08 	sts	0x0833, r31	; 0x800833 <pxEnd+0x1>
    1260:	e0 93 32 08 	sts	0x0832, r30	; 0x800832 <pxEnd>
    pxEnd->xBlockSize = 0;
    1264:	13 82       	std	Z+3, r1	; 0x03
    1266:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    1268:	11 82       	std	Z+1, r1	; 0x01
    126a:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    126c:	84 eb       	ldi	r24, 0xB4	; 180
    126e:	9b e0       	ldi	r25, 0x0B	; 11
    1270:	13 96       	adiw	r26, 0x03	; 3
    1272:	9c 93       	st	X, r25
    1274:	8e 93       	st	-X, r24
    1276:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1278:	ed 93       	st	X+, r30
    127a:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    127c:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <xMinimumEverFreeBytesRemaining+0x1>
    1280:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1284:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <xFreeBytesRemaining+0x1>
    1288:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e8       	ldi	r25, 0x80	; 128
    1290:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <xBlockAllocatedBit+0x1>
    1294:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <xBlockAllocatedBit>
    1298:	08 95       	ret

0000129a <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12a0:	a4 e3       	ldi	r26, 0x34	; 52
    12a2:	b8 e0       	ldi	r27, 0x08	; 8
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <prvInsertBlockIntoFreeList+0xe>
    12a6:	df 01       	movw	r26, r30
    12a8:	ed 91       	ld	r30, X+
    12aa:	fc 91       	ld	r31, X
    12ac:	11 97       	sbiw	r26, 0x01	; 1
    12ae:	ec 17       	cp	r30, r28
    12b0:	fd 07       	cpc	r31, r29
    12b2:	c8 f3       	brcs	.-14     	; 0x12a6 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    12b4:	12 96       	adiw	r26, 0x02	; 2
    12b6:	8d 91       	ld	r24, X+
    12b8:	9c 91       	ld	r25, X
    12ba:	13 97       	sbiw	r26, 0x03	; 3
    12bc:	9d 01       	movw	r18, r26
    12be:	28 0f       	add	r18, r24
    12c0:	39 1f       	adc	r19, r25
    12c2:	c2 17       	cp	r28, r18
    12c4:	d3 07       	cpc	r29, r19
    12c6:	49 f4       	brne	.+18     	; 0x12da <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    12c8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ca:	3b 81       	ldd	r19, Y+3	; 0x03
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	13 96       	adiw	r26, 0x03	; 3
    12d2:	9c 93       	st	X, r25
    12d4:	8e 93       	st	-X, r24
    12d6:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    12d8:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	9e 01       	movw	r18, r28
    12e0:	28 0f       	add	r18, r24
    12e2:	39 1f       	adc	r19, r25
    12e4:	e2 17       	cp	r30, r18
    12e6:	f3 07       	cpc	r31, r19
    12e8:	c1 f4       	brne	.+48     	; 0x131a <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    12ea:	20 91 32 08 	lds	r18, 0x0832	; 0x800832 <pxEnd>
    12ee:	30 91 33 08 	lds	r19, 0x0833	; 0x800833 <pxEnd+0x1>
    12f2:	e2 17       	cp	r30, r18
    12f4:	f3 07       	cpc	r31, r19
    12f6:	71 f0       	breq	.+28     	; 0x1314 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    12f8:	22 81       	ldd	r18, Z+2	; 0x02
    12fa:	33 81       	ldd	r19, Z+3	; 0x03
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	9b 83       	std	Y+3, r25	; 0x03
    1302:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1304:	ed 91       	ld	r30, X+
    1306:	fc 91       	ld	r31, X
    1308:	11 97       	sbiw	r26, 0x01	; 1
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	99 83       	std	Y+1, r25	; 0x01
    1310:	88 83       	st	Y, r24
    1312:	05 c0       	rjmp	.+10     	; 0x131e <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1314:	39 83       	std	Y+1, r19	; 0x01
    1316:	28 83       	st	Y, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    131a:	f9 83       	std	Y+1, r31	; 0x01
    131c:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    131e:	ca 17       	cp	r28, r26
    1320:	db 07       	cpc	r29, r27
    1322:	11 f0       	breq	.+4      	; 0x1328 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1324:	cd 93       	st	X+, r28
    1326:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    133c:	0e 94 77 15 	call	0x2aee	; 0x2aee <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    1340:	80 91 32 08 	lds	r24, 0x0832	; 0x800832 <pxEnd>
    1344:	90 91 33 08 	lds	r25, 0x0833	; 0x800833 <pxEnd+0x1>
    1348:	89 2b       	or	r24, r25
    134a:	09 f4       	brne	.+2      	; 0x134e <pvPortMalloc+0x20>
        {
            prvHeapInit();
    134c:	7d df       	rcall	.-262    	; 0x1248 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    134e:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <xBlockAllocatedBit>
    1352:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <xBlockAllocatedBit+0x1>
    1356:	80 23       	and	r24, r16
    1358:	91 23       	and	r25, r17
    135a:	89 2b       	or	r24, r25
    135c:	09 f0       	breq	.+2      	; 0x1360 <pvPortMalloc+0x32>
    135e:	76 c0       	rjmp	.+236    	; 0x144c <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1360:	01 15       	cp	r16, r1
    1362:	11 05       	cpc	r17, r1
    1364:	49 f0       	breq	.+18     	; 0x1378 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1366:	c8 01       	movw	r24, r16
    1368:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    136a:	08 17       	cp	r16, r24
    136c:	19 07       	cpc	r17, r25
    136e:	18 f0       	brcs	.+6      	; 0x1376 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    1370:	00 e0       	ldi	r16, 0x00	; 0
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    1376:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1378:	01 15       	cp	r16, r1
    137a:	11 05       	cpc	r17, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <pvPortMalloc+0x52>
    137e:	69 c0       	rjmp	.+210    	; 0x1452 <pvPortMalloc+0x124>
    1380:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <xFreeBytesRemaining>
    1384:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <xFreeBytesRemaining+0x1>
    1388:	80 17       	cp	r24, r16
    138a:	91 07       	cpc	r25, r17
    138c:	08 f4       	brcc	.+2      	; 0x1390 <pvPortMalloc+0x62>
    138e:	64 c0       	rjmp	.+200    	; 0x1458 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    1390:	c0 91 34 08 	lds	r28, 0x0834	; 0x800834 <xStart>
    1394:	d0 91 35 08 	lds	r29, 0x0835	; 0x800835 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    1398:	e4 e3       	ldi	r30, 0x34	; 52
    139a:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    139e:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    13a0:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	80 17       	cp	r24, r16
    13a8:	91 07       	cpc	r25, r17
    13aa:	20 f4       	brcc	.+8      	; 0x13b4 <pvPortMalloc+0x86>
    13ac:	88 81       	ld	r24, Y
    13ae:	99 81       	ldd	r25, Y+1	; 0x01
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	a9 f7       	brne	.-22     	; 0x139e <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    13b4:	80 91 32 08 	lds	r24, 0x0832	; 0x800832 <pxEnd>
    13b8:	90 91 33 08 	lds	r25, 0x0833	; 0x800833 <pxEnd+0x1>
    13bc:	c8 17       	cp	r28, r24
    13be:	d9 07       	cpc	r29, r25
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <pvPortMalloc+0x96>
    13c2:	4d c0       	rjmp	.+154    	; 0x145e <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    13c4:	e0 80       	ld	r14, Z
    13c6:	f1 80       	ldd	r15, Z+1	; 0x01
    13c8:	84 e0       	ldi	r24, 0x04	; 4
    13ca:	e8 0e       	add	r14, r24
    13cc:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    13ce:	88 81       	ld	r24, Y
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	91 83       	std	Z+1, r25	; 0x01
    13d4:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    13d6:	2a 81       	ldd	r18, Y+2	; 0x02
    13d8:	3b 81       	ldd	r19, Y+3	; 0x03
    13da:	20 1b       	sub	r18, r16
    13dc:	31 0b       	sbc	r19, r17
    13de:	29 30       	cpi	r18, 0x09	; 9
    13e0:	31 05       	cpc	r19, r1
    13e2:	48 f0       	brcs	.+18     	; 0x13f6 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    13e4:	ce 01       	movw	r24, r28
    13e6:	80 0f       	add	r24, r16
    13e8:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    13ea:	fc 01       	movw	r30, r24
    13ec:	33 83       	std	Z+3, r19	; 0x03
    13ee:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    13f0:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    13f2:	0a 83       	std	Y+2, r16	; 0x02
    13f4:	52 df       	rcall	.-348    	; 0x129a <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    13f6:	2a 81       	ldd	r18, Y+2	; 0x02
    13f8:	3b 81       	ldd	r19, Y+3	; 0x03
    13fa:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <xFreeBytesRemaining>
    13fe:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <xFreeBytesRemaining+0x1>
    1402:	82 1b       	sub	r24, r18
    1404:	93 0b       	sbc	r25, r19
    1406:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <xFreeBytesRemaining+0x1>
    140a:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    140e:	40 91 2e 08 	lds	r20, 0x082E	; 0x80082e <xMinimumEverFreeBytesRemaining>
    1412:	50 91 2f 08 	lds	r21, 0x082F	; 0x80082f <xMinimumEverFreeBytesRemaining+0x1>
    1416:	84 17       	cp	r24, r20
    1418:	95 07       	cpc	r25, r21
    141a:	20 f4       	brcc	.+8      	; 0x1424 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    141c:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <xMinimumEverFreeBytesRemaining+0x1>
    1420:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1424:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <xBlockAllocatedBit>
    1428:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <xBlockAllocatedBit+0x1>
    142c:	28 2b       	or	r18, r24
    142e:	39 2b       	or	r19, r25
    1430:	3b 83       	std	Y+3, r19	; 0x03
    1432:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    1438:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <xNumberOfSuccessfulAllocations>
    143c:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <xNumberOfSuccessfulAllocations+0x1>
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <xNumberOfSuccessfulAllocations+0x1>
    1446:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <xNumberOfSuccessfulAllocations>
    144a:	0b c0       	rjmp	.+22     	; 0x1462 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    144c:	e1 2c       	mov	r14, r1
    144e:	f1 2c       	mov	r15, r1
    1450:	08 c0       	rjmp	.+16     	; 0x1462 <pvPortMalloc+0x134>
    1452:	e1 2c       	mov	r14, r1
    1454:	f1 2c       	mov	r15, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <pvPortMalloc+0x134>
    1458:	e1 2c       	mov	r14, r1
    145a:	f1 2c       	mov	r15, r1
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <pvPortMalloc+0x134>
    145e:	e1 2c       	mov	r14, r1
    1460:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1462:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    1466:	e1 14       	cp	r14, r1
    1468:	f1 04       	cpc	r15, r1
    146a:	11 f4       	brne	.+4      	; 0x1470 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    146c:	0e 94 74 22 	call	0x44e8	; 0x44e8 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    1470:	c7 01       	movw	r24, r14
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	08 95       	ret

00001480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	91 f1       	breq	.+100    	; 0x14f0 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    148c:	ec 01       	movw	r28, r24
    148e:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1490:	4a 81       	ldd	r20, Y+2	; 0x02
    1492:	5b 81       	ldd	r21, Y+3	; 0x03
    1494:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <xBlockAllocatedBit>
    1498:	30 91 29 08 	lds	r19, 0x0829	; 0x800829 <xBlockAllocatedBit+0x1>
    149c:	ba 01       	movw	r22, r20
    149e:	62 23       	and	r22, r18
    14a0:	73 23       	and	r23, r19
    14a2:	67 2b       	or	r22, r23
    14a4:	29 f1       	breq	.+74     	; 0x14f0 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    14a6:	68 81       	ld	r22, Y
    14a8:	79 81       	ldd	r23, Y+1	; 0x01
    14aa:	67 2b       	or	r22, r23
    14ac:	09 f5       	brne	.+66     	; 0x14f0 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    14ae:	20 95       	com	r18
    14b0:	30 95       	com	r19
    14b2:	24 23       	and	r18, r20
    14b4:	35 23       	and	r19, r21
    14b6:	3b 83       	std	Y+3, r19	; 0x03
    14b8:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    14ba:	0e 94 77 15 	call	0x2aee	; 0x2aee <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	9b 81       	ldd	r25, Y+3	; 0x03
    14c2:	20 91 30 08 	lds	r18, 0x0830	; 0x800830 <xFreeBytesRemaining>
    14c6:	30 91 31 08 	lds	r19, 0x0831	; 0x800831 <xFreeBytesRemaining+0x1>
    14ca:	82 0f       	add	r24, r18
    14cc:	93 1f       	adc	r25, r19
    14ce:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <xFreeBytesRemaining+0x1>
    14d2:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    14d6:	ce 01       	movw	r24, r28
    14d8:	e0 de       	rcall	.-576    	; 0x129a <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    14da:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <xNumberOfSuccessfulFrees>
    14de:	90 91 2b 08 	lds	r25, 0x082B	; 0x80082b <xNumberOfSuccessfulFrees+0x1>
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <xNumberOfSuccessfulFrees+0x1>
    14e8:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    14ec:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    14fa:	fc 01       	movw	r30, r24
    14fc:	03 96       	adiw	r24, 0x03	; 3
    14fe:	92 83       	std	Z+2, r25	; 0x02
    1500:	81 83       	std	Z+1, r24	; 0x01
    1502:	4f ef       	ldi	r20, 0xFF	; 255
    1504:	5f ef       	ldi	r21, 0xFF	; 255
    1506:	ba 01       	movw	r22, r20
    1508:	43 83       	std	Z+3, r20	; 0x03
    150a:	54 83       	std	Z+4, r21	; 0x04
    150c:	65 83       	std	Z+5, r22	; 0x05
    150e:	76 83       	std	Z+6, r23	; 0x06
    1510:	90 87       	std	Z+8, r25	; 0x08
    1512:	87 83       	std	Z+7, r24	; 0x07
    1514:	92 87       	std	Z+10, r25	; 0x0a
    1516:	81 87       	std	Z+9, r24	; 0x09
    1518:	10 82       	st	Z, r1
    151a:	08 95       	ret

0000151c <vListInitialiseItem>:
    151c:	fc 01       	movw	r30, r24
    151e:	13 86       	std	Z+11, r1	; 0x0b
    1520:	12 86       	std	Z+10, r1	; 0x0a
    1522:	08 95       	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    152e:	08 81       	ld	r16, Y
    1530:	19 81       	ldd	r17, Y+1	; 0x01
    1532:	2a 81       	ldd	r18, Y+2	; 0x02
    1534:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1536:	0f 3f       	cpi	r16, 0xFF	; 255
    1538:	4f ef       	ldi	r20, 0xFF	; 255
    153a:	14 07       	cpc	r17, r20
    153c:	24 07       	cpc	r18, r20
    153e:	34 07       	cpc	r19, r20
    1540:	21 f4       	brne	.+8      	; 0x154a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1542:	fc 01       	movw	r30, r24
    1544:	a1 85       	ldd	r26, Z+9	; 0x09
    1546:	b2 85       	ldd	r27, Z+10	; 0x0a
    1548:	11 c0       	rjmp	.+34     	; 0x156c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    154a:	dc 01       	movw	r26, r24
    154c:	13 96       	adiw	r26, 0x03	; 3
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <vListInsert+0x2e>
    1550:	df 01       	movw	r26, r30
    1552:	14 96       	adiw	r26, 0x04	; 4
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	15 97       	sbiw	r26, 0x05	; 5
    155a:	40 81       	ld	r20, Z
    155c:	51 81       	ldd	r21, Z+1	; 0x01
    155e:	62 81       	ldd	r22, Z+2	; 0x02
    1560:	73 81       	ldd	r23, Z+3	; 0x03
    1562:	04 17       	cp	r16, r20
    1564:	15 07       	cpc	r17, r21
    1566:	26 07       	cpc	r18, r22
    1568:	37 07       	cpc	r19, r23
    156a:	90 f7       	brcc	.-28     	; 0x1550 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    156c:	14 96       	adiw	r26, 0x04	; 4
    156e:	ed 91       	ld	r30, X+
    1570:	fc 91       	ld	r31, X
    1572:	15 97       	sbiw	r26, 0x05	; 5
    1574:	fd 83       	std	Y+5, r31	; 0x05
    1576:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1578:	d7 83       	std	Z+7, r29	; 0x07
    157a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    157c:	bf 83       	std	Y+7, r27	; 0x07
    157e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1580:	15 96       	adiw	r26, 0x05	; 5
    1582:	dc 93       	st	X, r29
    1584:	ce 93       	st	-X, r28
    1586:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1588:	9b 87       	std	Y+11, r25	; 0x0b
    158a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    158c:	fc 01       	movw	r30, r24
    158e:	20 81       	ld	r18, Z
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	20 83       	st	Z, r18
}
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    15a4:	a2 85       	ldd	r26, Z+10	; 0x0a
    15a6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    15a8:	c4 81       	ldd	r28, Z+4	; 0x04
    15aa:	d5 81       	ldd	r29, Z+5	; 0x05
    15ac:	86 81       	ldd	r24, Z+6	; 0x06
    15ae:	97 81       	ldd	r25, Z+7	; 0x07
    15b0:	9f 83       	std	Y+7, r25	; 0x07
    15b2:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    15b4:	c6 81       	ldd	r28, Z+6	; 0x06
    15b6:	d7 81       	ldd	r29, Z+7	; 0x07
    15b8:	84 81       	ldd	r24, Z+4	; 0x04
    15ba:	95 81       	ldd	r25, Z+5	; 0x05
    15bc:	9d 83       	std	Y+5, r25	; 0x05
    15be:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    15c0:	11 96       	adiw	r26, 0x01	; 1
    15c2:	8d 91       	ld	r24, X+
    15c4:	9c 91       	ld	r25, X
    15c6:	12 97       	sbiw	r26, 0x02	; 2
    15c8:	e8 17       	cp	r30, r24
    15ca:	f9 07       	cpc	r31, r25
    15cc:	31 f4       	brne	.+12     	; 0x15da <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    15ce:	86 81       	ldd	r24, Z+6	; 0x06
    15d0:	97 81       	ldd	r25, Z+7	; 0x07
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
    15d8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    15da:	13 86       	std	Z+11, r1	; 0x0b
    15dc:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    15de:	8c 91       	ld	r24, X
    15e0:	81 50       	subi	r24, 0x01	; 1
    15e2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    15e4:	8c 91       	ld	r24, X
}
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    15ec:	a8 95       	wdr
    15ee:	90 ec       	ldi	r25, 0xC0	; 192
    15f0:	88 e1       	ldi	r24, 0x18	; 24
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	a8 95       	wdr
    15f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1602:	08 95       	ret

00001604 <pxPortInitialiseStack>:
    1604:	fc 01       	movw	r30, r24
    1606:	60 83       	st	Z, r22
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	70 83       	st	Z, r23
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	10 82       	st	Z, r1
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	10 82       	st	Z, r1
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	20 e8       	ldi	r18, 0x80	; 128
    1618:	20 83       	st	Z, r18
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	10 82       	st	Z, r1
    161e:	31 97       	sbiw	r30, 0x01	; 1
    1620:	10 82       	st	Z, r1
    1622:	31 97       	sbiw	r30, 0x01	; 1
    1624:	10 82       	st	Z, r1
    1626:	77 97       	sbiw	r30, 0x17	; 23
    1628:	40 83       	st	Z, r20
    162a:	31 97       	sbiw	r30, 0x01	; 1
    162c:	50 83       	st	Z, r21
    162e:	86 97       	sbiw	r24, 0x26	; 38
    1630:	08 95       	ret

00001632 <xPortStartScheduler>:
    1632:	dc df       	rcall	.-72     	; 0x15ec <prvSetupTimerInterrupt>
    1634:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    1638:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    163c:	cd 91       	ld	r28, X+
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	dd 91       	ld	r29, X+
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	ff 91       	pop	r31
    1646:	ef 91       	pop	r30
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	df 90       	pop	r13
    166a:	cf 90       	pop	r12
    166c:	bf 90       	pop	r11
    166e:	af 90       	pop	r10
    1670:	9f 90       	pop	r9
    1672:	8f 90       	pop	r8
    1674:	7f 90       	pop	r7
    1676:	6f 90       	pop	r6
    1678:	5f 90       	pop	r5
    167a:	4f 90       	pop	r4
    167c:	3f 90       	pop	r3
    167e:	2f 90       	pop	r2
    1680:	1f 90       	pop	r1
    1682:	0f 90       	pop	r0
    1684:	0c be       	out	0x3c, r0	; 60
    1686:	0f 90       	pop	r0
    1688:	0b be       	out	0x3b, r0	; 59
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	08 95       	ret
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	08 95       	ret

00001696 <vPortYield>:
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	0f 92       	push	r0
    169e:	0b b6       	in	r0, 0x3b	; 59
    16a0:	0f 92       	push	r0
    16a2:	0c b6       	in	r0, 0x3c	; 60
    16a4:	0f 92       	push	r0
    16a6:	1f 92       	push	r1
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 92       	push	r2
    16ac:	3f 92       	push	r3
    16ae:	4f 92       	push	r4
    16b0:	5f 92       	push	r5
    16b2:	6f 92       	push	r6
    16b4:	7f 92       	push	r7
    16b6:	8f 92       	push	r8
    16b8:	9f 92       	push	r9
    16ba:	af 92       	push	r10
    16bc:	bf 92       	push	r11
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ef 93       	push	r30
    16e4:	ff 93       	push	r31
    16e6:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    16ea:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    16ee:	0d b6       	in	r0, 0x3d	; 61
    16f0:	0d 92       	st	X+, r0
    16f2:	0e b6       	in	r0, 0x3e	; 62
    16f4:	0d 92       	st	X+, r0
    16f6:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskSwitchContext>
    16fa:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    16fe:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    1702:	cd 91       	ld	r28, X+
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	dd 91       	ld	r29, X+
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	ff 91       	pop	r31
    170c:	ef 91       	pop	r30
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	8f 90       	pop	r8
    173a:	7f 90       	pop	r7
    173c:	6f 90       	pop	r6
    173e:	5f 90       	pop	r5
    1740:	4f 90       	pop	r4
    1742:	3f 90       	pop	r3
    1744:	2f 90       	pop	r2
    1746:	1f 90       	pop	r1
    1748:	0f 90       	pop	r0
    174a:	0c be       	out	0x3c, r0	; 60
    174c:	0f 90       	pop	r0
    174e:	0b be       	out	0x3b, r0	; 59
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	0f 90       	pop	r0
    1756:	08 95       	ret

00001758 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	0b b6       	in	r0, 0x3b	; 59
    1762:	0f 92       	push	r0
    1764:	0c b6       	in	r0, 0x3c	; 60
    1766:	0f 92       	push	r0
    1768:	1f 92       	push	r1
    176a:	11 24       	eor	r1, r1
    176c:	2f 92       	push	r2
    176e:	3f 92       	push	r3
    1770:	4f 92       	push	r4
    1772:	5f 92       	push	r5
    1774:	6f 92       	push	r6
    1776:	7f 92       	push	r7
    1778:	8f 92       	push	r8
    177a:	9f 92       	push	r9
    177c:	af 92       	push	r10
    177e:	bf 92       	push	r11
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    17ac:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    17b0:	0d b6       	in	r0, 0x3d	; 61
    17b2:	0d 92       	st	X+, r0
    17b4:	0e b6       	in	r0, 0x3e	; 62
    17b6:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    17b8:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    17ba:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <xTaskIncrementTick>
    17be:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    17c0:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    17c4:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    17c8:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    17cc:	cd 91       	ld	r28, X+
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	dd 91       	ld	r29, X+
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	9f 90       	pop	r9
    1802:	8f 90       	pop	r8
    1804:	7f 90       	pop	r7
    1806:	6f 90       	pop	r6
    1808:	5f 90       	pop	r5
    180a:	4f 90       	pop	r4
    180c:	3f 90       	pop	r3
    180e:	2f 90       	pop	r2
    1810:	1f 90       	pop	r1
    1812:	0f 90       	pop	r0
    1814:	0c be       	out	0x3c, r0	; 60
    1816:	0f 90       	pop	r0
    1818:	0b be       	out	0x3b, r0	; 59
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1820:	08 95       	ret

00001822 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1822:	9a df       	rcall	.-204    	; 0x1758 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1824:	18 95       	reti

00001826 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1826:	dc 01       	movw	r26, r24
    1828:	53 96       	adiw	r26, 0x13	; 19
    182a:	2c 91       	ld	r18, X
    182c:	53 97       	sbiw	r26, 0x13	; 19
    182e:	22 23       	and	r18, r18
    1830:	41 f0       	breq	.+16     	; 0x1842 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1832:	5a 96       	adiw	r26, 0x1a	; 26
    1834:	ed 91       	ld	r30, X+
    1836:	fc 91       	ld	r31, X
    1838:	5b 97       	sbiw	r26, 0x1b	; 27
    183a:	90 81       	ld	r25, Z
    183c:	8a e0       	ldi	r24, 0x0A	; 10
    183e:	89 1b       	sub	r24, r25
    1840:	08 95       	ret
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	08 95       	ret

00001846 <prvIsQueueEmpty>:
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	0f 92       	push	r0
    184c:	fc 01       	movw	r30, r24
    184e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1850:	81 11       	cpse	r24, r1
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <prvIsQueueEmpty+0x12>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	01 c0       	rjmp	.+2      	; 0x185a <prvIsQueueEmpty+0x14>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	08 95       	ret

00001860 <prvIsQueueFull>:
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	0f 92       	push	r0
    1866:	fc 01       	movw	r30, r24
    1868:	26 8d       	ldd	r18, Z+30	; 0x1e
    186a:	87 8d       	ldd	r24, Z+31	; 0x1f
    186c:	28 13       	cpse	r18, r24
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <prvIsQueueFull+0x14>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <prvIsQueueFull+0x16>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	08 95       	ret

0000187c <prvCopyDataToQueue>:
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	ec 01       	movw	r28, r24
    1886:	04 2f       	mov	r16, r20
    1888:	1e 8d       	ldd	r17, Y+30	; 0x1e
    188a:	48 a1       	ldd	r20, Y+32	; 0x20
    188c:	41 11       	cpse	r20, r1
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <prvCopyDataToQueue+0x2c>
    1890:	88 81       	ld	r24, Y
    1892:	99 81       	ldd	r25, Y+1	; 0x01
    1894:	89 2b       	or	r24, r25
    1896:	09 f0       	breq	.+2      	; 0x189a <prvCopyDataToQueue+0x1e>
    1898:	42 c0       	rjmp	.+132    	; 0x191e <prvCopyDataToQueue+0xa2>
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	0e 94 8f 1b 	call	0x371e	; 0x371e <xTaskPriorityDisinherit>
    18a2:	1d 82       	std	Y+5, r1	; 0x05
    18a4:	1c 82       	std	Y+4, r1	; 0x04
    18a6:	42 c0       	rjmp	.+132    	; 0x192c <prvCopyDataToQueue+0xb0>
    18a8:	01 11       	cpse	r16, r1
    18aa:	17 c0       	rjmp	.+46     	; 0x18da <prvCopyDataToQueue+0x5e>
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
    18b6:	28 a1       	ldd	r18, Y+32	; 0x20
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	82 0f       	add	r24, r18
    18be:	91 1d       	adc	r25, r1
    18c0:	9b 83       	std	Y+3, r25	; 0x03
    18c2:	8a 83       	std	Y+2, r24	; 0x02
    18c4:	2c 81       	ldd	r18, Y+4	; 0x04
    18c6:	3d 81       	ldd	r19, Y+5	; 0x05
    18c8:	82 17       	cp	r24, r18
    18ca:	93 07       	cpc	r25, r19
    18cc:	50 f1       	brcs	.+84     	; 0x1922 <prvCopyDataToQueue+0xa6>
    18ce:	88 81       	ld	r24, Y
    18d0:	99 81       	ldd	r25, Y+1	; 0x01
    18d2:	9b 83       	std	Y+3, r25	; 0x03
    18d4:	8a 83       	std	Y+2, r24	; 0x02
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	29 c0       	rjmp	.+82     	; 0x192c <prvCopyDataToQueue+0xb0>
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	8e 81       	ldd	r24, Y+6	; 0x06
    18de:	9f 81       	ldd	r25, Y+7	; 0x07
    18e0:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
    18e4:	88 a1       	ldd	r24, Y+32	; 0x20
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	91 95       	neg	r25
    18ea:	81 95       	neg	r24
    18ec:	91 09       	sbc	r25, r1
    18ee:	2e 81       	ldd	r18, Y+6	; 0x06
    18f0:	3f 81       	ldd	r19, Y+7	; 0x07
    18f2:	28 0f       	add	r18, r24
    18f4:	39 1f       	adc	r19, r25
    18f6:	3f 83       	std	Y+7, r19	; 0x07
    18f8:	2e 83       	std	Y+6, r18	; 0x06
    18fa:	48 81       	ld	r20, Y
    18fc:	59 81       	ldd	r21, Y+1	; 0x01
    18fe:	24 17       	cp	r18, r20
    1900:	35 07       	cpc	r19, r21
    1902:	30 f4       	brcc	.+12     	; 0x1910 <prvCopyDataToQueue+0x94>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	9f 83       	std	Y+7, r25	; 0x07
    190e:	8e 83       	std	Y+6, r24	; 0x06
    1910:	02 30       	cpi	r16, 0x02	; 2
    1912:	49 f4       	brne	.+18     	; 0x1926 <prvCopyDataToQueue+0xaa>
    1914:	11 23       	and	r17, r17
    1916:	49 f0       	breq	.+18     	; 0x192a <prvCopyDataToQueue+0xae>
    1918:	11 50       	subi	r17, 0x01	; 1
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	07 c0       	rjmp	.+14     	; 0x192c <prvCopyDataToQueue+0xb0>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	05 c0       	rjmp	.+10     	; 0x192c <prvCopyDataToQueue+0xb0>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	03 c0       	rjmp	.+6      	; 0x192c <prvCopyDataToQueue+0xb0>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	01 c0       	rjmp	.+2      	; 0x192c <prvCopyDataToQueue+0xb0>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	1f 5f       	subi	r17, 0xFF	; 255
    192e:	1e 8f       	std	Y+30, r17	; 0x1e
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <prvCopyDataFromQueue>:
    193a:	fc 01       	movw	r30, r24
    193c:	40 a1       	ldd	r20, Z+32	; 0x20
    193e:	44 23       	and	r20, r20
    1940:	a9 f0       	breq	.+42     	; 0x196c <prvCopyDataFromQueue+0x32>
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	26 81       	ldd	r18, Z+6	; 0x06
    1946:	37 81       	ldd	r19, Z+7	; 0x07
    1948:	24 0f       	add	r18, r20
    194a:	35 1f       	adc	r19, r21
    194c:	37 83       	std	Z+7, r19	; 0x07
    194e:	26 83       	std	Z+6, r18	; 0x06
    1950:	84 81       	ldd	r24, Z+4	; 0x04
    1952:	95 81       	ldd	r25, Z+5	; 0x05
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	20 f0       	brcs	.+8      	; 0x1962 <prvCopyDataFromQueue+0x28>
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	97 83       	std	Z+7, r25	; 0x07
    1960:	86 83       	std	Z+6, r24	; 0x06
    1962:	cb 01       	movw	r24, r22
    1964:	66 81       	ldd	r22, Z+6	; 0x06
    1966:	77 81       	ldd	r23, Z+7	; 0x07
    1968:	0c 94 43 38 	jmp	0x7086	; 0x7086 <memcpy>
    196c:	08 95       	ret

0000196e <prvUnlockQueue>:
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	ec 01       	movw	r28, r24
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	0f 92       	push	r0
    197c:	1a a1       	ldd	r17, Y+34	; 0x22
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <prvUnlockQueue+0x28>
    1980:	8b 89       	ldd	r24, Y+19	; 0x13
    1982:	88 23       	and	r24, r24
    1984:	51 f0       	breq	.+20     	; 0x199a <prvUnlockQueue+0x2c>
    1986:	ce 01       	movw	r24, r28
    1988:	43 96       	adiw	r24, 0x13	; 19
    198a:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    198e:	81 11       	cpse	r24, r1
    1990:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <vTaskMissedYield>
    1994:	11 50       	subi	r17, 0x01	; 1
    1996:	11 16       	cp	r1, r17
    1998:	9c f3       	brlt	.-26     	; 0x1980 <prvUnlockQueue+0x12>
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	8a a3       	std	Y+34, r24	; 0x22
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	0f 92       	push	r0
    19a8:	19 a1       	ldd	r17, Y+33	; 0x21
    19aa:	0b c0       	rjmp	.+22     	; 0x19c2 <prvUnlockQueue+0x54>
    19ac:	88 85       	ldd	r24, Y+8	; 0x08
    19ae:	88 23       	and	r24, r24
    19b0:	51 f0       	breq	.+20     	; 0x19c6 <prvUnlockQueue+0x58>
    19b2:	ce 01       	movw	r24, r28
    19b4:	08 96       	adiw	r24, 0x08	; 8
    19b6:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    19ba:	81 11       	cpse	r24, r1
    19bc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <vTaskMissedYield>
    19c0:	11 50       	subi	r17, 0x01	; 1
    19c2:	11 16       	cp	r1, r17
    19c4:	9c f3       	brlt	.-26     	; 0x19ac <prvUnlockQueue+0x3e>
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	89 a3       	std	Y+33, r24	; 0x21
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	08 95       	ret

000019d6 <xQueueGenericReset>:
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	ec 01       	movw	r28, r24
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	0f 92       	push	r0
    19e2:	e8 81       	ld	r30, Y
    19e4:	f9 81       	ldd	r31, Y+1	; 0x01
    19e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19e8:	28 a1       	ldd	r18, Y+32	; 0x20
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	82 9f       	mul	r24, r18
    19f0:	a0 01       	movw	r20, r0
    19f2:	83 9f       	mul	r24, r19
    19f4:	50 0d       	add	r21, r0
    19f6:	92 9f       	mul	r25, r18
    19f8:	50 0d       	add	r21, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	4e 0f       	add	r20, r30
    19fe:	5f 1f       	adc	r21, r31
    1a00:	5d 83       	std	Y+5, r21	; 0x05
    1a02:	4c 83       	std	Y+4, r20	; 0x04
    1a04:	1e 8e       	std	Y+30, r1	; 0x1e
    1a06:	fb 83       	std	Y+3, r31	; 0x03
    1a08:	ea 83       	std	Y+2, r30	; 0x02
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	28 9f       	mul	r18, r24
    1a0e:	a0 01       	movw	r20, r0
    1a10:	29 9f       	mul	r18, r25
    1a12:	50 0d       	add	r21, r0
    1a14:	38 9f       	mul	r19, r24
    1a16:	50 0d       	add	r21, r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	84 0f       	add	r24, r20
    1a1e:	95 1f       	adc	r25, r21
    1a20:	9f 83       	std	Y+7, r25	; 0x07
    1a22:	8e 83       	std	Y+6, r24	; 0x06
    1a24:	8f ef       	ldi	r24, 0xFF	; 255
    1a26:	89 a3       	std	Y+33, r24	; 0x21
    1a28:	8a a3       	std	Y+34, r24	; 0x22
    1a2a:	61 11       	cpse	r22, r1
    1a2c:	0b c0       	rjmp	.+22     	; 0x1a44 <xQueueGenericReset+0x6e>
    1a2e:	88 85       	ldd	r24, Y+8	; 0x08
    1a30:	88 23       	and	r24, r24
    1a32:	71 f0       	breq	.+28     	; 0x1a50 <xQueueGenericReset+0x7a>
    1a34:	ce 01       	movw	r24, r28
    1a36:	08 96       	adiw	r24, 0x08	; 8
    1a38:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1a3c:	88 23       	and	r24, r24
    1a3e:	41 f0       	breq	.+16     	; 0x1a50 <xQueueGenericReset+0x7a>
    1a40:	2a de       	rcall	.-940    	; 0x1696 <vPortYield>
    1a42:	06 c0       	rjmp	.+12     	; 0x1a50 <xQueueGenericReset+0x7a>
    1a44:	ce 01       	movw	r24, r28
    1a46:	08 96       	adiw	r24, 0x08	; 8
    1a48:	58 dd       	rcall	.-1360   	; 0x14fa <vListInitialise>
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	43 96       	adiw	r24, 0x13	; 19
    1a4e:	55 dd       	rcall	.-1366   	; 0x14fa <vListInitialise>
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <prvInitialiseNewQueue>:
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	f8 01       	movw	r30, r16
    1a62:	61 11       	cpse	r22, r1
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <prvInitialiseNewQueue+0x10>
    1a66:	11 83       	std	Z+1, r17	; 0x01
    1a68:	00 83       	st	Z, r16
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <prvInitialiseNewQueue+0x14>
    1a6c:	51 83       	std	Z+1, r21	; 0x01
    1a6e:	40 83       	st	Z, r20
    1a70:	87 8f       	std	Z+31, r24	; 0x1f
    1a72:	60 a3       	std	Z+32, r22	; 0x20
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	cf 01       	movw	r24, r30
    1a78:	ae df       	rcall	.-164    	; 0x19d6 <xQueueGenericReset>
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <xQueueGenericCreate>:
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	f8 2e       	mov	r15, r24
    1a90:	e6 2e       	mov	r14, r22
    1a92:	d4 2e       	mov	r13, r20
    1a94:	86 9f       	mul	r24, r22
    1a96:	c0 01       	movw	r24, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	83 96       	adiw	r24, 0x23	; 35
    1a9c:	48 dc       	rcall	.-1904   	; 0x132e <pvPortMalloc>
    1a9e:	ec 01       	movw	r28, r24
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	41 f0       	breq	.+16     	; 0x1ab4 <xQueueGenericCreate+0x34>
    1aa4:	8c 01       	movw	r16, r24
    1aa6:	2d 2d       	mov	r18, r13
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	4d 5d       	subi	r20, 0xDD	; 221
    1aac:	5f 4f       	sbci	r21, 0xFF	; 255
    1aae:	6e 2d       	mov	r22, r14
    1ab0:	8f 2d       	mov	r24, r15
    1ab2:	d4 df       	rcall	.-88     	; 0x1a5c <prvInitialiseNewQueue>
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	08 95       	ret

00001ac6 <xQueueGenericSend>:
    1ac6:	cf 92       	push	r12
    1ac8:	df 92       	push	r13
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	29 97       	sbiw	r28, 0x09	; 9
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	6b 01       	movw	r12, r22
    1aea:	2e 83       	std	Y+6, r18	; 0x06
    1aec:	3f 83       	std	Y+7, r19	; 0x07
    1aee:	48 87       	std	Y+8, r20	; 0x08
    1af0:	59 87       	std	Y+9, r21	; 0x09
    1af2:	10 e0       	ldi	r17, 0x00	; 0
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
    1afa:	f7 01       	movw	r30, r14
    1afc:	96 8d       	ldd	r25, Z+30	; 0x1e
    1afe:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b00:	98 17       	cp	r25, r24
    1b02:	10 f0       	brcs	.+4      	; 0x1b08 <xQueueGenericSend+0x42>
    1b04:	02 30       	cpi	r16, 0x02	; 2
    1b06:	b1 f4       	brne	.+44     	; 0x1b34 <xQueueGenericSend+0x6e>
    1b08:	40 2f       	mov	r20, r16
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	c7 01       	movw	r24, r14
    1b0e:	b6 de       	rcall	.-660    	; 0x187c <prvCopyDataToQueue>
    1b10:	f7 01       	movw	r30, r14
    1b12:	93 89       	ldd	r25, Z+19	; 0x13
    1b14:	99 23       	and	r25, r25
    1b16:	41 f0       	breq	.+16     	; 0x1b28 <xQueueGenericSend+0x62>
    1b18:	c7 01       	movw	r24, r14
    1b1a:	43 96       	adiw	r24, 0x13	; 19
    1b1c:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1b20:	88 23       	and	r24, r24
    1b22:	21 f0       	breq	.+8      	; 0x1b2c <xQueueGenericSend+0x66>
    1b24:	b8 dd       	rcall	.-1168   	; 0x1696 <vPortYield>
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <xQueueGenericSend+0x66>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	b5 dd       	rcall	.-1174   	; 0x1696 <vPortYield>
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	4c c0       	rjmp	.+152    	; 0x1bcc <xQueueGenericSend+0x106>
    1b34:	8e 81       	ldd	r24, Y+6	; 0x06
    1b36:	9f 81       	ldd	r25, Y+7	; 0x07
    1b38:	a8 85       	ldd	r26, Y+8	; 0x08
    1b3a:	b9 85       	ldd	r27, Y+9	; 0x09
    1b3c:	89 2b       	or	r24, r25
    1b3e:	8a 2b       	or	r24, r26
    1b40:	8b 2b       	or	r24, r27
    1b42:	21 f4       	brne	.+8      	; 0x1b4c <xQueueGenericSend+0x86>
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	40 c0       	rjmp	.+128    	; 0x1bcc <xQueueGenericSend+0x106>
    1b4c:	11 11       	cpse	r17, r1
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <xQueueGenericSend+0x94>
    1b50:	ce 01       	movw	r24, r28
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <vTaskInternalSetTimeOutState>
    1b58:	11 e0       	ldi	r17, 0x01	; 1
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	c7 d7       	rcall	.+3982   	; 0x2aee <vTaskSuspendAll>
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	0f 92       	push	r0
    1b66:	f7 01       	movw	r30, r14
    1b68:	81 a1       	ldd	r24, Z+33	; 0x21
    1b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <xQueueGenericSend+0xaa>
    1b6e:	11 a2       	std	Z+33, r1	; 0x21
    1b70:	f7 01       	movw	r30, r14
    1b72:	82 a1       	ldd	r24, Z+34	; 0x22
    1b74:	8f 3f       	cpi	r24, 0xFF	; 255
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <xQueueGenericSend+0xb4>
    1b78:	12 a2       	std	Z+34, r1	; 0x22
    1b7a:	0f 90       	pop	r0
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	be 01       	movw	r22, r28
    1b80:	6a 5f       	subi	r22, 0xFA	; 250
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	0e 94 8b 1a 	call	0x3516	; 0x3516 <xTaskCheckForTimeOut>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	19 c0       	rjmp	.+50     	; 0x1bc2 <xQueueGenericSend+0xfc>
    1b90:	c7 01       	movw	r24, r14
    1b92:	66 de       	rcall	.-820    	; 0x1860 <prvIsQueueFull>
    1b94:	88 23       	and	r24, r24
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <xQueueGenericSend+0xf2>
    1b98:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b9c:	68 85       	ldd	r22, Y+8	; 0x08
    1b9e:	79 85       	ldd	r23, Y+9	; 0x09
    1ba0:	c7 01       	movw	r24, r14
    1ba2:	08 96       	adiw	r24, 0x08	; 8
    1ba4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <vTaskPlaceOnEventList>
    1ba8:	c7 01       	movw	r24, r14
    1baa:	e1 de       	rcall	.-574    	; 0x196e <prvUnlockQueue>
    1bac:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	a0 cf       	rjmp	.-192    	; 0x1af4 <xQueueGenericSend+0x2e>
    1bb4:	70 dd       	rcall	.-1312   	; 0x1696 <vPortYield>
    1bb6:	9e cf       	rjmp	.-196    	; 0x1af4 <xQueueGenericSend+0x2e>
    1bb8:	c7 01       	movw	r24, r14
    1bba:	d9 de       	rcall	.-590    	; 0x196e <prvUnlockQueue>
    1bbc:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
    1bc0:	99 cf       	rjmp	.-206    	; 0x1af4 <xQueueGenericSend+0x2e>
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	d4 de       	rcall	.-600    	; 0x196e <prvUnlockQueue>
    1bc6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	29 96       	adiw	r28, 0x09	; 9
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	08 95       	ret

00001bea <prvInitialiseMutex>:
    1bea:	0f 93       	push	r16
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	69 f0       	breq	.+26     	; 0x1c0a <prvInitialiseMutex+0x20>
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	15 82       	std	Z+5, r1	; 0x05
    1bf4:	14 82       	std	Z+4, r1	; 0x04
    1bf6:	11 82       	std	Z+1, r1	; 0x01
    1bf8:	10 82       	st	Z, r1
    1bfa:	16 82       	std	Z+6, r1	; 0x06
    1bfc:	00 e0       	ldi	r16, 0x00	; 0
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	a9 01       	movw	r20, r18
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	5e df       	rcall	.-324    	; 0x1ac6 <xQueueGenericSend>
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <xQueueCreateMutex>:
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	48 2f       	mov	r20, r24
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	33 df       	rcall	.-410    	; 0x1a80 <xQueueGenericCreate>
    1c1a:	ec 01       	movw	r28, r24
    1c1c:	e6 df       	rcall	.-52     	; 0x1bea <prvInitialiseMutex>
    1c1e:	ce 01       	movw	r24, r28
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	08 95       	ret

00001c26 <xQueueGenericSendFromISR>:
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	8a 01       	movw	r16, r20
    1c34:	fc 01       	movw	r30, r24
    1c36:	56 8d       	ldd	r21, Z+30	; 0x1e
    1c38:	37 8d       	ldd	r19, Z+31	; 0x1f
    1c3a:	53 17       	cp	r21, r19
    1c3c:	10 f0       	brcs	.+4      	; 0x1c42 <xQueueGenericSendFromISR+0x1c>
    1c3e:	22 30       	cpi	r18, 0x02	; 2
    1c40:	f9 f4       	brne	.+62     	; 0x1c80 <xQueueGenericSendFromISR+0x5a>
    1c42:	42 2f       	mov	r20, r18
    1c44:	78 01       	movw	r14, r16
    1c46:	ec 01       	movw	r28, r24
    1c48:	1a a1       	ldd	r17, Y+34	; 0x22
    1c4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	16 de       	rcall	.-980    	; 0x187c <prvCopyDataToQueue>
    1c50:	1f 3f       	cpi	r17, 0xFF	; 255
    1c52:	81 f4       	brne	.+32     	; 0x1c74 <xQueueGenericSendFromISR+0x4e>
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	88 23       	and	r24, r24
    1c58:	a9 f0       	breq	.+42     	; 0x1c84 <xQueueGenericSendFromISR+0x5e>
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	43 96       	adiw	r24, 0x13	; 19
    1c5e:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1c62:	88 23       	and	r24, r24
    1c64:	89 f0       	breq	.+34     	; 0x1c88 <xQueueGenericSendFromISR+0x62>
    1c66:	e1 14       	cp	r14, r1
    1c68:	f1 04       	cpc	r15, r1
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <xQueueGenericSendFromISR+0x66>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	f7 01       	movw	r30, r14
    1c70:	80 83       	st	Z, r24
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <xQueueGenericSendFromISR+0x68>
    1c74:	ff 24       	eor	r15, r15
    1c76:	f3 94       	inc	r15
    1c78:	f1 0e       	add	r15, r17
    1c7a:	fa a2       	std	Y+34, r15	; 0x22
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	07 c0       	rjmp	.+14     	; 0x1c8e <xQueueGenericSendFromISR+0x68>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <xQueueGenericSendFromISR+0x68>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <xQueueGenericSendFromISR+0x68>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <xQueueGenericSendFromISR+0x68>
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	ff 90       	pop	r15
    1c98:	ef 90       	pop	r14
    1c9a:	08 95       	ret

00001c9c <xQueueReceive>:
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	29 97       	sbiw	r28, 0x09	; 9
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	8c 01       	movw	r16, r24
    1cbe:	6b 01       	movw	r12, r22
    1cc0:	2e 83       	std	Y+6, r18	; 0x06
    1cc2:	3f 83       	std	Y+7, r19	; 0x07
    1cc4:	48 87       	std	Y+8, r20	; 0x08
    1cc6:	59 87       	std	Y+9, r21	; 0x09
    1cc8:	e1 2c       	mov	r14, r1
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	0f 92       	push	r0
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1cd4:	ff 20       	and	r15, r15
    1cd6:	99 f0       	breq	.+38     	; 0x1cfe <xQueueReceive+0x62>
    1cd8:	b6 01       	movw	r22, r12
    1cda:	c8 01       	movw	r24, r16
    1cdc:	2e de       	rcall	.-932    	; 0x193a <prvCopyDataFromQueue>
    1cde:	fa 94       	dec	r15
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	f6 8e       	std	Z+30, r15	; 0x1e
    1ce4:	80 85       	ldd	r24, Z+8	; 0x08
    1ce6:	88 23       	and	r24, r24
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <xQueueReceive+0x5a>
    1cea:	c8 01       	movw	r24, r16
    1cec:	08 96       	adiw	r24, 0x08	; 8
    1cee:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	d0 dc       	rcall	.-1632   	; 0x1696 <vPortYield>
    1cf6:	0f 90       	pop	r0
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	4f c0       	rjmp	.+158    	; 0x1d9c <xQueueReceive+0x100>
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	9f 81       	ldd	r25, Y+7	; 0x07
    1d02:	a8 85       	ldd	r26, Y+8	; 0x08
    1d04:	b9 85       	ldd	r27, Y+9	; 0x09
    1d06:	89 2b       	or	r24, r25
    1d08:	8a 2b       	or	r24, r26
    1d0a:	8b 2b       	or	r24, r27
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <xQueueReceive+0x7a>
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	43 c0       	rjmp	.+134    	; 0x1d9c <xQueueReceive+0x100>
    1d16:	e1 10       	cpse	r14, r1
    1d18:	06 c0       	rjmp	.+12     	; 0x1d26 <xQueueReceive+0x8a>
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <vTaskInternalSetTimeOutState>
    1d22:	ee 24       	eor	r14, r14
    1d24:	e3 94       	inc	r14
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	e1 d6       	rcall	.+3522   	; 0x2aee <vTaskSuspendAll>
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	0f 92       	push	r0
    1d32:	f8 01       	movw	r30, r16
    1d34:	81 a1       	ldd	r24, Z+33	; 0x21
    1d36:	8f 3f       	cpi	r24, 0xFF	; 255
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <xQueueReceive+0xa0>
    1d3a:	11 a2       	std	Z+33, r1	; 0x21
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	82 a1       	ldd	r24, Z+34	; 0x22
    1d40:	8f 3f       	cpi	r24, 0xFF	; 255
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <xQueueReceive+0xaa>
    1d44:	12 a2       	std	Z+34, r1	; 0x22
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	be 01       	movw	r22, r28
    1d4c:	6a 5f       	subi	r22, 0xFA	; 250
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	0e 94 8b 1a 	call	0x3516	; 0x3516 <xTaskCheckForTimeOut>
    1d58:	81 11       	cpse	r24, r1
    1d5a:	17 c0       	rjmp	.+46     	; 0x1d8a <xQueueReceive+0xee>
    1d5c:	c8 01       	movw	r24, r16
    1d5e:	73 dd       	rcall	.-1306   	; 0x1846 <prvIsQueueEmpty>
    1d60:	88 23       	and	r24, r24
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <xQueueReceive+0xe6>
    1d64:	4e 81       	ldd	r20, Y+6	; 0x06
    1d66:	5f 81       	ldd	r21, Y+7	; 0x07
    1d68:	68 85       	ldd	r22, Y+8	; 0x08
    1d6a:	79 85       	ldd	r23, Y+9	; 0x09
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	43 96       	adiw	r24, 0x13	; 19
    1d70:	0e 94 78 18 	call	0x30f0	; 0x30f0 <vTaskPlaceOnEventList>
    1d74:	c8 01       	movw	r24, r16
    1d76:	fb dd       	rcall	.-1034   	; 0x196e <prvUnlockQueue>
    1d78:	fa d7       	rcall	.+4084   	; 0x2d6e <xTaskResumeAll>
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	a6 cf       	rjmp	.-180    	; 0x1cca <xQueueReceive+0x2e>
    1d7e:	8b dc       	rcall	.-1770   	; 0x1696 <vPortYield>
    1d80:	a4 cf       	rjmp	.-184    	; 0x1cca <xQueueReceive+0x2e>
    1d82:	c8 01       	movw	r24, r16
    1d84:	f4 dd       	rcall	.-1048   	; 0x196e <prvUnlockQueue>
    1d86:	f3 d7       	rcall	.+4070   	; 0x2d6e <xTaskResumeAll>
    1d88:	a0 cf       	rjmp	.-192    	; 0x1cca <xQueueReceive+0x2e>
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	f0 dd       	rcall	.-1056   	; 0x196e <prvUnlockQueue>
    1d8e:	ef d7       	rcall	.+4062   	; 0x2d6e <xTaskResumeAll>
    1d90:	c8 01       	movw	r24, r16
    1d92:	59 dd       	rcall	.-1358   	; 0x1846 <prvIsQueueEmpty>
    1d94:	88 23       	and	r24, r24
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <xQueueReceive+0xfe>
    1d98:	98 cf       	rjmp	.-208    	; 0x1cca <xQueueReceive+0x2e>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	29 96       	adiw	r28, 0x09	; 9
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	08 95       	ret

00001dba <xQueueSemaphoreTake>:
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	29 97       	sbiw	r28, 0x09	; 9
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	8c 01       	movw	r16, r24
    1dd8:	4e 83       	std	Y+6, r20	; 0x06
    1dda:	5f 83       	std	Y+7, r21	; 0x07
    1ddc:	68 87       	std	Y+8, r22	; 0x08
    1dde:	79 87       	std	Y+9, r23	; 0x09
    1de0:	e1 2c       	mov	r14, r1
    1de2:	f1 2c       	mov	r15, r1
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	0f 92       	push	r0
    1dea:	f8 01       	movw	r30, r16
    1dec:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dee:	88 23       	and	r24, r24
    1df0:	c9 f0       	breq	.+50     	; 0x1e24 <xQueueSemaphoreTake+0x6a>
    1df2:	81 50       	subi	r24, 0x01	; 1
    1df4:	86 8f       	std	Z+30, r24	; 0x1e
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	89 2b       	or	r24, r25
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <xQueueSemaphoreTake+0x4e>
    1dfe:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <pvTaskIncrementMutexHeldCount>
    1e02:	f8 01       	movw	r30, r16
    1e04:	95 83       	std	Z+5, r25	; 0x05
    1e06:	84 83       	std	Z+4, r24	; 0x04
    1e08:	f8 01       	movw	r30, r16
    1e0a:	80 85       	ldd	r24, Z+8	; 0x08
    1e0c:	88 23       	and	r24, r24
    1e0e:	31 f0       	breq	.+12     	; 0x1e1c <xQueueSemaphoreTake+0x62>
    1e10:	c8 01       	movw	r24, r16
    1e12:	08 96       	adiw	r24, 0x08	; 8
    1e14:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1e18:	81 11       	cpse	r24, r1
    1e1a:	3d dc       	rcall	.-1926   	; 0x1696 <vPortYield>
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	6f c0       	rjmp	.+222    	; 0x1f02 <xQueueSemaphoreTake+0x148>
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
    1e28:	a8 85       	ldd	r26, Y+8	; 0x08
    1e2a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e2c:	89 2b       	or	r24, r25
    1e2e:	8a 2b       	or	r24, r26
    1e30:	8b 2b       	or	r24, r27
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <xQueueSemaphoreTake+0x82>
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	63 c0       	rjmp	.+198    	; 0x1f02 <xQueueSemaphoreTake+0x148>
    1e3c:	f1 10       	cpse	r15, r1
    1e3e:	06 c0       	rjmp	.+12     	; 0x1e4c <xQueueSemaphoreTake+0x92>
    1e40:	ce 01       	movw	r24, r28
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <vTaskInternalSetTimeOutState>
    1e48:	ff 24       	eor	r15, r15
    1e4a:	f3 94       	inc	r15
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	4e d6       	rcall	.+3228   	; 0x2aee <vTaskSuspendAll>
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	0f 92       	push	r0
    1e58:	f8 01       	movw	r30, r16
    1e5a:	81 a1       	ldd	r24, Z+33	; 0x21
    1e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <xQueueSemaphoreTake+0xa8>
    1e60:	11 a2       	std	Z+33, r1	; 0x21
    1e62:	f8 01       	movw	r30, r16
    1e64:	82 a1       	ldd	r24, Z+34	; 0x22
    1e66:	8f 3f       	cpi	r24, 0xFF	; 255
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <xQueueSemaphoreTake+0xb2>
    1e6a:	12 a2       	std	Z+34, r1	; 0x22
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	be 01       	movw	r22, r28
    1e72:	6a 5f       	subi	r22, 0xFA	; 250
    1e74:	7f 4f       	sbci	r23, 0xFF	; 255
    1e76:	ce 01       	movw	r24, r28
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <xTaskCheckForTimeOut>
    1e7e:	81 11       	cpse	r24, r1
    1e80:	26 c0       	rjmp	.+76     	; 0x1ece <xQueueSemaphoreTake+0x114>
    1e82:	c8 01       	movw	r24, r16
    1e84:	e0 dc       	rcall	.-1600   	; 0x1846 <prvIsQueueEmpty>
    1e86:	88 23       	and	r24, r24
    1e88:	f1 f0       	breq	.+60     	; 0x1ec6 <xQueueSemaphoreTake+0x10c>
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	89 2b       	or	r24, r25
    1e92:	51 f4       	brne	.+20     	; 0x1ea8 <xQueueSemaphoreTake+0xee>
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	0f 92       	push	r0
    1e9a:	84 81       	ldd	r24, Z+4	; 0x04
    1e9c:	95 81       	ldd	r25, Z+5	; 0x05
    1e9e:	0e 94 08 1b 	call	0x3610	; 0x3610 <xTaskPriorityInherit>
    1ea2:	e8 2e       	mov	r14, r24
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	4e 81       	ldd	r20, Y+6	; 0x06
    1eaa:	5f 81       	ldd	r21, Y+7	; 0x07
    1eac:	68 85       	ldd	r22, Y+8	; 0x08
    1eae:	79 85       	ldd	r23, Y+9	; 0x09
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	43 96       	adiw	r24, 0x13	; 19
    1eb4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <vTaskPlaceOnEventList>
    1eb8:	c8 01       	movw	r24, r16
    1eba:	59 dd       	rcall	.-1358   	; 0x196e <prvUnlockQueue>
    1ebc:	58 d7       	rcall	.+3760   	; 0x2d6e <xTaskResumeAll>
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	91 cf       	rjmp	.-222    	; 0x1de4 <xQueueSemaphoreTake+0x2a>
    1ec2:	e9 db       	rcall	.-2094   	; 0x1696 <vPortYield>
    1ec4:	8f cf       	rjmp	.-226    	; 0x1de4 <xQueueSemaphoreTake+0x2a>
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	52 dd       	rcall	.-1372   	; 0x196e <prvUnlockQueue>
    1eca:	51 d7       	rcall	.+3746   	; 0x2d6e <xTaskResumeAll>
    1ecc:	8b cf       	rjmp	.-234    	; 0x1de4 <xQueueSemaphoreTake+0x2a>
    1ece:	c8 01       	movw	r24, r16
    1ed0:	4e dd       	rcall	.-1380   	; 0x196e <prvUnlockQueue>
    1ed2:	4d d7       	rcall	.+3738   	; 0x2d6e <xTaskResumeAll>
    1ed4:	c8 01       	movw	r24, r16
    1ed6:	b7 dc       	rcall	.-1682   	; 0x1846 <prvIsQueueEmpty>
    1ed8:	88 23       	and	r24, r24
    1eda:	09 f4       	brne	.+2      	; 0x1ede <xQueueSemaphoreTake+0x124>
    1edc:	83 cf       	rjmp	.-250    	; 0x1de4 <xQueueSemaphoreTake+0x2a>
    1ede:	ee 20       	and	r14, r14
    1ee0:	79 f0       	breq	.+30     	; 0x1f00 <xQueueSemaphoreTake+0x146>
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	0f 92       	push	r0
    1ee8:	c8 01       	movw	r24, r16
    1eea:	9d dc       	rcall	.-1734   	; 0x1826 <prvGetDisinheritPriorityAfterTimeout>
    1eec:	68 2f       	mov	r22, r24
    1eee:	f8 01       	movw	r30, r16
    1ef0:	84 81       	ldd	r24, Z+4	; 0x04
    1ef2:	95 81       	ldd	r25, Z+5	; 0x05
    1ef4:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <vTaskPriorityDisinheritAfterTimeout>
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <xQueueSemaphoreTake+0x148>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	29 96       	adiw	r28, 0x09	; 9
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	ff 90       	pop	r15
    1f18:	ef 90       	pop	r14
    1f1a:	08 95       	ret

00001f1c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	0f 92       	push	r0
    1f28:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <vQueueWaitForMessageRestricted+0x14>
    1f2e:	19 a2       	std	Y+33, r1	; 0x21
    1f30:	8a a1       	ldd	r24, Y+34	; 0x22
    1f32:	8f 3f       	cpi	r24, 0xFF	; 255
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <vQueueWaitForMessageRestricted+0x1c>
    1f36:	1a a2       	std	Y+34, r1	; 0x22
    1f38:	0f 90       	pop	r0
    1f3a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f3e:	81 11       	cpse	r24, r1
    1f40:	04 c0       	rjmp	.+8      	; 0x1f4a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1f42:	ce 01       	movw	r24, r28
    1f44:	43 96       	adiw	r24, 0x13	; 19
    1f46:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	10 dd       	rcall	.-1504   	; 0x196e <prvUnlockQueue>
    }
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1f54:	fc 01       	movw	r30, r24
    1f56:	44 81       	ldd	r20, Z+4	; 0x04
    1f58:	55 81       	ldd	r21, Z+5	; 0x05
    1f5a:	22 81       	ldd	r18, Z+2	; 0x02
    1f5c:	33 81       	ldd	r19, Z+3	; 0x03
    1f5e:	24 0f       	add	r18, r20
    1f60:	35 1f       	adc	r19, r21
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	b9 01       	movw	r22, r18
    1f68:	68 1b       	sub	r22, r24
    1f6a:	79 0b       	sbc	r23, r25
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	64 17       	cp	r22, r20
    1f70:	75 07       	cpc	r23, r21
    1f72:	10 f0       	brcs	.+4      	; 0x1f78 <prvBytesInBuffer+0x24>
    1f74:	84 1b       	sub	r24, r20
    1f76:	95 0b       	sbc	r25, r21
    1f78:	08 95       	ret

00001f7a <prvInitialiseNewStreamBuffer>:
    1f7a:	0f 93       	push	r16
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	8f e0       	ldi	r24, 0x0F	; 15
    1f80:	df 01       	movw	r26, r30
    1f82:	1d 92       	st	X+, r1
    1f84:	8a 95       	dec	r24
    1f86:	e9 f7       	brne	.-6      	; 0x1f82 <prvInitialiseNewStreamBuffer+0x8>
    1f88:	75 87       	std	Z+13, r23	; 0x0d
    1f8a:	64 87       	std	Z+12, r22	; 0x0c
    1f8c:	55 83       	std	Z+5, r21	; 0x05
    1f8e:	44 83       	std	Z+4, r20	; 0x04
    1f90:	37 83       	std	Z+7, r19	; 0x07
    1f92:	26 83       	std	Z+6, r18	; 0x06
    1f94:	06 87       	std	Z+14, r16	; 0x0e
    1f96:	0f 91       	pop	r16
    1f98:	08 95       	ret

00001f9a <prvWriteBytesToBuffer>:
    1f9a:	af 92       	push	r10
    1f9c:	bf 92       	push	r11
    1f9e:	cf 92       	push	r12
    1fa0:	df 92       	push	r13
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	6c 01       	movw	r12, r24
    1fb0:	5b 01       	movw	r10, r22
    1fb2:	7a 01       	movw	r14, r20
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	c2 81       	ldd	r28, Z+2	; 0x02
    1fb8:	d3 81       	ldd	r29, Z+3	; 0x03
    1fba:	04 81       	ldd	r16, Z+4	; 0x04
    1fbc:	15 81       	ldd	r17, Z+5	; 0x05
    1fbe:	0c 1b       	sub	r16, r28
    1fc0:	1d 0b       	sbc	r17, r29
    1fc2:	40 17       	cp	r20, r16
    1fc4:	51 07       	cpc	r21, r17
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <prvWriteBytesToBuffer+0x30>
    1fc8:	8a 01       	movw	r16, r20
    1fca:	f6 01       	movw	r30, r12
    1fcc:	84 85       	ldd	r24, Z+12	; 0x0c
    1fce:	95 85       	ldd	r25, Z+13	; 0x0d
    1fd0:	a8 01       	movw	r20, r16
    1fd2:	b5 01       	movw	r22, r10
    1fd4:	8c 0f       	add	r24, r28
    1fd6:	9d 1f       	adc	r25, r29
    1fd8:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
    1fdc:	0e 15       	cp	r16, r14
    1fde:	1f 05       	cpc	r17, r15
    1fe0:	58 f4       	brcc	.+22     	; 0x1ff8 <prvWriteBytesToBuffer+0x5e>
    1fe2:	a7 01       	movw	r20, r14
    1fe4:	40 1b       	sub	r20, r16
    1fe6:	51 0b       	sbc	r21, r17
    1fe8:	b5 01       	movw	r22, r10
    1fea:	60 0f       	add	r22, r16
    1fec:	71 1f       	adc	r23, r17
    1fee:	f6 01       	movw	r30, r12
    1ff0:	84 85       	ldd	r24, Z+12	; 0x0c
    1ff2:	95 85       	ldd	r25, Z+13	; 0x0d
    1ff4:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	8e 0d       	add	r24, r14
    1ffc:	9f 1d       	adc	r25, r15
    1ffe:	f6 01       	movw	r30, r12
    2000:	24 81       	ldd	r18, Z+4	; 0x04
    2002:	35 81       	ldd	r19, Z+5	; 0x05
    2004:	82 17       	cp	r24, r18
    2006:	93 07       	cpc	r25, r19
    2008:	10 f0       	brcs	.+4      	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    200a:	82 1b       	sub	r24, r18
    200c:	93 0b       	sbc	r25, r19
    200e:	f6 01       	movw	r30, r12
    2010:	93 83       	std	Z+3, r25	; 0x03
    2012:	82 83       	std	Z+2, r24	; 0x02
    2014:	c7 01       	movw	r24, r14
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	bf 90       	pop	r11
    2028:	af 90       	pop	r10
    202a:	08 95       	ret

0000202c <prvWriteMessageToBuffer>:
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	1f 92       	push	r1
    203e:	1f 92       	push	r1
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	7c 01       	movw	r14, r24
    2046:	6b 01       	movw	r12, r22
    2048:	5a 83       	std	Y+2, r21	; 0x02
    204a:	49 83       	std	Y+1, r20	; 0x01
    204c:	21 15       	cp	r18, r1
    204e:	31 05       	cpc	r19, r1
    2050:	c1 f0       	breq	.+48     	; 0x2082 <prvWriteMessageToBuffer+0x56>
    2052:	fc 01       	movw	r30, r24
    2054:	86 85       	ldd	r24, Z+14	; 0x0e
    2056:	80 fd       	sbrc	r24, 0
    2058:	08 c0       	rjmp	.+16     	; 0x206a <prvWriteMessageToBuffer+0x3e>
    205a:	42 17       	cp	r20, r18
    205c:	53 07       	cpc	r21, r19
    205e:	08 f4       	brcc	.+2      	; 0x2062 <prvWriteMessageToBuffer+0x36>
    2060:	9a 01       	movw	r18, r20
    2062:	3a 83       	std	Y+2, r19	; 0x02
    2064:	29 83       	std	Y+1, r18	; 0x01
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <prvWriteMessageToBuffer+0x5c>
    206a:	20 17       	cp	r18, r16
    206c:	31 07       	cpc	r19, r17
    206e:	58 f0       	brcs	.+22     	; 0x2086 <prvWriteMessageToBuffer+0x5a>
    2070:	42 e0       	ldi	r20, 0x02	; 2
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	be 01       	movw	r22, r28
    2076:	6f 5f       	subi	r22, 0xFF	; 255
    2078:	7f 4f       	sbci	r23, 0xFF	; 255
    207a:	c7 01       	movw	r24, r14
    207c:	8e df       	rcall	.-228    	; 0x1f9a <prvWriteBytesToBuffer>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <prvWriteMessageToBuffer+0x5c>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <prvWriteMessageToBuffer+0x5c>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	88 23       	and	r24, r24
    208a:	31 f0       	breq	.+12     	; 0x2098 <prvWriteMessageToBuffer+0x6c>
    208c:	49 81       	ldd	r20, Y+1	; 0x01
    208e:	5a 81       	ldd	r21, Y+2	; 0x02
    2090:	b6 01       	movw	r22, r12
    2092:	c7 01       	movw	r24, r14
    2094:	82 df       	rcall	.-252    	; 0x1f9a <prvWriteBytesToBuffer>
    2096:	02 c0       	rjmp	.+4      	; 0x209c <prvWriteMessageToBuffer+0x70>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	cf 90       	pop	r12
    20b0:	08 95       	ret

000020b2 <prvReadBytesFromBuffer>:
    20b2:	af 92       	push	r10
    20b4:	bf 92       	push	r11
    20b6:	cf 92       	push	r12
    20b8:	df 92       	push	r13
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	7c 01       	movw	r14, r24
    20c8:	5b 01       	movw	r10, r22
    20ca:	e9 01       	movw	r28, r18
    20cc:	42 17       	cp	r20, r18
    20ce:	53 07       	cpc	r21, r19
    20d0:	08 f4       	brcc	.+2      	; 0x20d4 <prvReadBytesFromBuffer+0x22>
    20d2:	ea 01       	movw	r28, r20
    20d4:	20 97       	sbiw	r28, 0x00	; 0
    20d6:	81 f1       	breq	.+96     	; 0x2138 <prvReadBytesFromBuffer+0x86>
    20d8:	f7 01       	movw	r30, r14
    20da:	00 81       	ld	r16, Z
    20dc:	11 81       	ldd	r17, Z+1	; 0x01
    20de:	84 81       	ldd	r24, Z+4	; 0x04
    20e0:	95 81       	ldd	r25, Z+5	; 0x05
    20e2:	80 1b       	sub	r24, r16
    20e4:	91 0b       	sbc	r25, r17
    20e6:	6e 01       	movw	r12, r28
    20e8:	8c 17       	cp	r24, r28
    20ea:	9d 07       	cpc	r25, r29
    20ec:	08 f4       	brcc	.+2      	; 0x20f0 <prvReadBytesFromBuffer+0x3e>
    20ee:	6c 01       	movw	r12, r24
    20f0:	f7 01       	movw	r30, r14
    20f2:	64 85       	ldd	r22, Z+12	; 0x0c
    20f4:	75 85       	ldd	r23, Z+13	; 0x0d
    20f6:	60 0f       	add	r22, r16
    20f8:	71 1f       	adc	r23, r17
    20fa:	a6 01       	movw	r20, r12
    20fc:	c5 01       	movw	r24, r10
    20fe:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
    2102:	cc 16       	cp	r12, r28
    2104:	dd 06       	cpc	r13, r29
    2106:	58 f4       	brcc	.+22     	; 0x211e <prvReadBytesFromBuffer+0x6c>
    2108:	ae 01       	movw	r20, r28
    210a:	4c 19       	sub	r20, r12
    210c:	5d 09       	sbc	r21, r13
    210e:	f7 01       	movw	r30, r14
    2110:	64 85       	ldd	r22, Z+12	; 0x0c
    2112:	75 85       	ldd	r23, Z+13	; 0x0d
    2114:	c5 01       	movw	r24, r10
    2116:	8c 0d       	add	r24, r12
    2118:	9d 1d       	adc	r25, r13
    211a:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
    211e:	0c 0f       	add	r16, r28
    2120:	1d 1f       	adc	r17, r29
    2122:	f7 01       	movw	r30, r14
    2124:	84 81       	ldd	r24, Z+4	; 0x04
    2126:	95 81       	ldd	r25, Z+5	; 0x05
    2128:	08 17       	cp	r16, r24
    212a:	19 07       	cpc	r17, r25
    212c:	10 f0       	brcs	.+4      	; 0x2132 <prvReadBytesFromBuffer+0x80>
    212e:	08 1b       	sub	r16, r24
    2130:	19 0b       	sbc	r17, r25
    2132:	f7 01       	movw	r30, r14
    2134:	11 83       	std	Z+1, r17	; 0x01
    2136:	00 83       	st	Z, r16
    2138:	ce 01       	movw	r24, r28
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	df 90       	pop	r13
    2148:	cf 90       	pop	r12
    214a:	bf 90       	pop	r11
    214c:	af 90       	pop	r10
    214e:	08 95       	ret

00002150 <prvReadMessageFromBuffer>:
    2150:	6f 92       	push	r6
    2152:	7f 92       	push	r7
    2154:	8f 92       	push	r8
    2156:	9f 92       	push	r9
    2158:	af 92       	push	r10
    215a:	bf 92       	push	r11
    215c:	cf 92       	push	r12
    215e:	df 92       	push	r13
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	1f 92       	push	r1
    216e:	1f 92       	push	r1
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	6c 01       	movw	r12, r24
    2176:	4b 01       	movw	r8, r22
    2178:	5a 01       	movw	r10, r20
    217a:	79 01       	movw	r14, r18
    217c:	01 15       	cp	r16, r1
    217e:	11 05       	cpc	r17, r1
    2180:	b1 f0       	breq	.+44     	; 0x21ae <prvReadMessageFromBuffer+0x5e>
    2182:	fc 01       	movw	r30, r24
    2184:	60 80       	ld	r6, Z
    2186:	71 80       	ldd	r7, Z+1	; 0x01
    2188:	a8 01       	movw	r20, r16
    218a:	be 01       	movw	r22, r28
    218c:	6f 5f       	subi	r22, 0xFF	; 255
    218e:	7f 4f       	sbci	r23, 0xFF	; 255
    2190:	90 df       	rcall	.-224    	; 0x20b2 <prvReadBytesFromBuffer>
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	e0 1a       	sub	r14, r16
    2198:	f1 0a       	sbc	r15, r17
    219a:	a8 16       	cp	r10, r24
    219c:	b9 06       	cpc	r11, r25
    219e:	30 f4       	brcc	.+12     	; 0x21ac <prvReadMessageFromBuffer+0x5c>
    21a0:	f6 01       	movw	r30, r12
    21a2:	71 82       	std	Z+1, r7	; 0x01
    21a4:	60 82       	st	Z, r6
    21a6:	a1 2c       	mov	r10, r1
    21a8:	b1 2c       	mov	r11, r1
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <prvReadMessageFromBuffer+0x5e>
    21ac:	5c 01       	movw	r10, r24
    21ae:	97 01       	movw	r18, r14
    21b0:	a5 01       	movw	r20, r10
    21b2:	b4 01       	movw	r22, r8
    21b4:	c6 01       	movw	r24, r12
    21b6:	7d df       	rcall	.-262    	; 0x20b2 <prvReadBytesFromBuffer>
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	cf 90       	pop	r12
    21cc:	bf 90       	pop	r11
    21ce:	af 90       	pop	r10
    21d0:	9f 90       	pop	r9
    21d2:	8f 90       	pop	r8
    21d4:	7f 90       	pop	r7
    21d6:	6f 90       	pop	r6
    21d8:	08 95       	ret

000021da <xStreamBufferGenericCreate>:
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
    21ea:	6b 01       	movw	r12, r22
    21ec:	41 30       	cpi	r20, 0x01	; 1
    21ee:	11 f4       	brne	.+4      	; 0x21f4 <xStreamBufferGenericCreate+0x1a>
    21f0:	01 e0       	ldi	r16, 0x01	; 1
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <xStreamBufferGenericCreate+0x1c>
    21f4:	00 e0       	ldi	r16, 0x00	; 0
    21f6:	c1 14       	cp	r12, r1
    21f8:	d1 04       	cpc	r13, r1
    21fa:	19 f4       	brne	.+6      	; 0x2202 <__stack+0x3>
    21fc:	cc 24       	eor	r12, r12
    21fe:	c3 94       	inc	r12
    2200:	d1 2c       	mov	r13, r1
    2202:	ce 01       	movw	r24, r28
    2204:	40 96       	adiw	r24, 0x10	; 16
    2206:	c8 17       	cp	r28, r24
    2208:	d9 07       	cpc	r29, r25
    220a:	20 f4       	brcc	.+8      	; 0x2214 <__stack+0x15>
    220c:	21 96       	adiw	r28, 0x01	; 1
    220e:	8f d8       	rcall	.-3810   	; 0x132e <pvPortMalloc>
    2210:	7c 01       	movw	r14, r24
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <__stack+0x19>
    2214:	e1 2c       	mov	r14, r1
    2216:	f1 2c       	mov	r15, r1
    2218:	e1 14       	cp	r14, r1
    221a:	f1 04       	cpc	r15, r1
    221c:	39 f0       	breq	.+14     	; 0x222c <__stack+0x2d>
    221e:	96 01       	movw	r18, r12
    2220:	ae 01       	movw	r20, r28
    2222:	b7 01       	movw	r22, r14
    2224:	61 5f       	subi	r22, 0xF1	; 241
    2226:	7f 4f       	sbci	r23, 0xFF	; 255
    2228:	c7 01       	movw	r24, r14
    222a:	a7 de       	rcall	.-690    	; 0x1f7a <prvInitialiseNewStreamBuffer>
    222c:	c7 01       	movw	r24, r14
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	0f 91       	pop	r16
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	df 90       	pop	r13
    223a:	cf 90       	pop	r12
    223c:	08 95       	ret

0000223e <xStreamBufferReset>:
    223e:	0f 93       	push	r16
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	0f 92       	push	r0
    2246:	fc 01       	movw	r30, r24
    2248:	20 85       	ldd	r18, Z+8	; 0x08
    224a:	31 85       	ldd	r19, Z+9	; 0x09
    224c:	23 2b       	or	r18, r19
    224e:	71 f4       	brne	.+28     	; 0x226c <xStreamBufferReset+0x2e>
    2250:	22 85       	ldd	r18, Z+10	; 0x0a
    2252:	33 85       	ldd	r19, Z+11	; 0x0b
    2254:	23 2b       	or	r18, r19
    2256:	61 f4       	brne	.+24     	; 0x2270 <xStreamBufferReset+0x32>
    2258:	26 81       	ldd	r18, Z+6	; 0x06
    225a:	37 81       	ldd	r19, Z+7	; 0x07
    225c:	44 81       	ldd	r20, Z+4	; 0x04
    225e:	55 81       	ldd	r21, Z+5	; 0x05
    2260:	64 85       	ldd	r22, Z+12	; 0x0c
    2262:	75 85       	ldd	r23, Z+13	; 0x0d
    2264:	06 85       	ldd	r16, Z+14	; 0x0e
    2266:	89 de       	rcall	.-750    	; 0x1f7a <prvInitialiseNewStreamBuffer>
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <xStreamBufferReset+0x34>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <xStreamBufferReset+0x34>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 91       	pop	r16
    2278:	08 95       	ret

0000227a <xStreamBufferSpacesAvailable>:
    227a:	fc 01       	movw	r30, r24
    227c:	24 81       	ldd	r18, Z+4	; 0x04
    227e:	35 81       	ldd	r19, Z+5	; 0x05
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	82 0f       	add	r24, r18
    2286:	93 1f       	adc	r25, r19
    2288:	42 81       	ldd	r20, Z+2	; 0x02
    228a:	53 81       	ldd	r21, Z+3	; 0x03
    228c:	84 1b       	sub	r24, r20
    228e:	95 0b       	sbc	r25, r21
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	82 17       	cp	r24, r18
    2294:	93 07       	cpc	r25, r19
    2296:	10 f0       	brcs	.+4      	; 0x229c <xStreamBufferSpacesAvailable+0x22>
    2298:	82 1b       	sub	r24, r18
    229a:	93 0b       	sbc	r25, r19
    229c:	08 95       	ret

0000229e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    229e:	2f 92       	push	r2
    22a0:	3f 92       	push	r3
    22a2:	4f 92       	push	r4
    22a4:	5f 92       	push	r5
    22a6:	6f 92       	push	r6
    22a8:	7f 92       	push	r7
    22aa:	8f 92       	push	r8
    22ac:	9f 92       	push	r9
    22ae:	af 92       	push	r10
    22b0:	bf 92       	push	r11
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	2b 97       	sbiw	r28, 0x0b	; 11
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	4c 01       	movw	r8, r24
    22d4:	7b 87       	std	Y+11, r23	; 0x0b
    22d6:	6a 87       	std	Y+10, r22	; 0x0a
    22d8:	1a 01       	movw	r2, r20
    22da:	0e 83       	std	Y+6, r16	; 0x06
    22dc:	1f 83       	std	Y+7, r17	; 0x07
    22de:	28 87       	std	Y+8, r18	; 0x08
    22e0:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    22e2:	fc 01       	movw	r30, r24
    22e4:	84 81       	ldd	r24, Z+4	; 0x04
    22e6:	95 81       	ldd	r25, Z+5	; 0x05
    22e8:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    22ea:	26 85       	ldd	r18, Z+14	; 0x0e
    22ec:	20 ff       	sbrs	r18, 0
    22ee:	0c c0       	rjmp	.+24     	; 0x2308 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    22f0:	2a 01       	movw	r4, r20
    22f2:	f2 e0       	ldi	r31, 0x02	; 2
    22f4:	4f 0e       	add	r4, r31
    22f6:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    22f8:	84 15       	cp	r24, r4
    22fa:	95 05       	cpc	r25, r5
    22fc:	58 f4       	brcc	.+22     	; 0x2314 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    22fe:	1e 82       	std	Y+6, r1	; 0x06
    2300:	1f 82       	std	Y+7, r1	; 0x07
    2302:	18 86       	std	Y+8, r1	; 0x08
    2304:	19 86       	std	Y+9, r1	; 0x09
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    2308:	84 17       	cp	r24, r20
    230a:	95 07       	cpc	r25, r21
    230c:	10 f0       	brcs	.+4      	; 0x2312 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    230e:	2a 01       	movw	r4, r20
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    2312:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2314:	8e 81       	ldd	r24, Y+6	; 0x06
    2316:	9f 81       	ldd	r25, Y+7	; 0x07
    2318:	a8 85       	ldd	r26, Y+8	; 0x08
    231a:	b9 85       	ldd	r27, Y+9	; 0x09
    231c:	89 2b       	or	r24, r25
    231e:	8a 2b       	or	r24, r26
    2320:	8b 2b       	or	r24, r27
    2322:	09 f4       	brne	.+2      	; 0x2326 <xStreamBufferSend+0x88>
    2324:	38 c0       	rjmp	.+112    	; 0x2396 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    2326:	ce 01       	movw	r24, r28
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2334:	c4 01       	movw	r24, r8
    2336:	a1 df       	rcall	.-190    	; 0x227a <xStreamBufferSpacesAvailable>
    2338:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    233a:	84 15       	cp	r24, r4
    233c:	95 05       	cpc	r25, r5
    233e:	40 f5       	brcc	.+80     	; 0x2390 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    234a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <xTaskGetCurrentTaskHandle>
    234e:	f4 01       	movw	r30, r8
    2350:	93 87       	std	Z+11, r25	; 0x0b
    2352:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2358:	ae 80       	ldd	r10, Y+6	; 0x06
    235a:	bf 80       	ldd	r11, Y+7	; 0x07
    235c:	c8 84       	ldd	r12, Y+8	; 0x08
    235e:	d9 84       	ldd	r13, Y+9	; 0x09
    2360:	e1 2c       	mov	r14, r1
    2362:	f1 2c       	mov	r15, r1
    2364:	00 e0       	ldi	r16, 0x00	; 0
    2366:	10 e0       	ldi	r17, 0x00	; 0
    2368:	98 01       	movw	r18, r16
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	ba 01       	movw	r22, r20
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	0e 94 8d 1c 	call	0x391a	; 0x391a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2376:	f4 01       	movw	r30, r8
    2378:	13 86       	std	Z+11, r1	; 0x0b
    237a:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    237c:	be 01       	movw	r22, r28
    237e:	6a 5f       	subi	r22, 0xFA	; 250
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	ce 01       	movw	r24, r28
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	0e 94 8b 1a 	call	0x3516	; 0x3516 <xTaskCheckForTimeOut>
    238a:	88 23       	and	r24, r24
    238c:	81 f2       	breq	.-96     	; 0x232e <xStreamBufferSend+0x90>
    238e:	05 c0       	rjmp	.+10     	; 0x239a <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2390:	0f 90       	pop	r0
    2392:	0f be       	out	0x3f, r0	; 63
                    break;
    2394:	02 c0       	rjmp	.+4      	; 0x239a <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    2396:	61 2c       	mov	r6, r1
    2398:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    239a:	61 14       	cp	r6, r1
    239c:	71 04       	cpc	r7, r1
    239e:	19 f4       	brne	.+6      	; 0x23a6 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    23a0:	c4 01       	movw	r24, r8
    23a2:	6b df       	rcall	.-298    	; 0x227a <xStreamBufferSpacesAvailable>
    23a4:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    23a6:	82 01       	movw	r16, r4
    23a8:	93 01       	movw	r18, r6
    23aa:	a1 01       	movw	r20, r2
    23ac:	6a 85       	ldd	r22, Y+10	; 0x0a
    23ae:	7b 85       	ldd	r23, Y+11	; 0x0b
    23b0:	c4 01       	movw	r24, r8
    23b2:	3c de       	rcall	.-904    	; 0x202c <prvWriteMessageToBuffer>
    23b4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    23b6:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    23b8:	e9 f0       	breq	.+58     	; 0x23f4 <xStreamBufferSend+0x156>
    23ba:	c4 01       	movw	r24, r8
    23bc:	cb dd       	rcall	.-1130   	; 0x1f54 <prvBytesInBuffer>
    23be:	f4 01       	movw	r30, r8
    23c0:	26 81       	ldd	r18, Z+6	; 0x06
    23c2:	37 81       	ldd	r19, Z+7	; 0x07
    23c4:	82 17       	cp	r24, r18
    23c6:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    23c8:	a8 f0       	brcs	.+42     	; 0x23f4 <xStreamBufferSend+0x156>
    23ca:	91 d3       	rcall	.+1826   	; 0x2aee <vTaskSuspendAll>
    23cc:	f4 01       	movw	r30, r8
    23ce:	80 85       	ldd	r24, Z+8	; 0x08
    23d0:	91 85       	ldd	r25, Z+9	; 0x09
    23d2:	89 2b       	or	r24, r25
    23d4:	71 f0       	breq	.+28     	; 0x23f2 <xStreamBufferSend+0x154>
    23d6:	80 85       	ldd	r24, Z+8	; 0x08
    23d8:	91 85       	ldd	r25, Z+9	; 0x09
    23da:	e1 2c       	mov	r14, r1
    23dc:	f1 2c       	mov	r15, r1
    23de:	00 e0       	ldi	r16, 0x00	; 0
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	a9 01       	movw	r20, r18
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <xTaskGenericNotify>
    23ec:	f4 01       	movw	r30, r8
    23ee:	11 86       	std	Z+9, r1	; 0x09
    23f0:	10 86       	std	Z+8, r1	; 0x08
    23f2:	bd d4       	rcall	.+2426   	; 0x2d6e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    23f4:	c6 01       	movw	r24, r12
    23f6:	2b 96       	adiw	r28, 0x0b	; 11
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	ff 90       	pop	r15
    240c:	ef 90       	pop	r14
    240e:	df 90       	pop	r13
    2410:	cf 90       	pop	r12
    2412:	bf 90       	pop	r11
    2414:	af 90       	pop	r10
    2416:	9f 90       	pop	r9
    2418:	8f 90       	pop	r8
    241a:	7f 90       	pop	r7
    241c:	6f 90       	pop	r6
    241e:	5f 90       	pop	r5
    2420:	4f 90       	pop	r4
    2422:	3f 90       	pop	r3
    2424:	2f 90       	pop	r2
    2426:	08 95       	ret

00002428 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2428:	af 92       	push	r10
    242a:	bf 92       	push	r11
    242c:	cf 92       	push	r12
    242e:	df 92       	push	r13
    2430:	ef 92       	push	r14
    2432:	ff 92       	push	r15
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	ec 01       	movw	r28, r24
    243e:	7b 01       	movw	r14, r22
    2440:	5a 01       	movw	r10, r20
    2442:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2444:	8e 85       	ldd	r24, Y+14	; 0x0e
    2446:	80 ff       	sbrs	r24, 0
    2448:	04 c0       	rjmp	.+8      	; 0x2452 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    244a:	8a 01       	movw	r16, r20
    244c:	0e 5f       	subi	r16, 0xFE	; 254
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    2452:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2454:	ce 01       	movw	r24, r28
    2456:	11 df       	rcall	.-478    	; 0x227a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2458:	9c 01       	movw	r18, r24
    245a:	a5 01       	movw	r20, r10
    245c:	b7 01       	movw	r22, r14
    245e:	ce 01       	movw	r24, r28
    2460:	e5 dd       	rcall	.-1078   	; 0x202c <prvWriteMessageToBuffer>
    2462:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    2464:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2466:	c1 f0       	breq	.+48     	; 0x2498 <xStreamBufferSendFromISR+0x70>
    2468:	ce 01       	movw	r24, r28
    246a:	74 dd       	rcall	.-1304   	; 0x1f54 <prvBytesInBuffer>
    246c:	2e 81       	ldd	r18, Y+6	; 0x06
    246e:	3f 81       	ldd	r19, Y+7	; 0x07
    2470:	82 17       	cp	r24, r18
    2472:	93 07       	cpc	r25, r19
    2474:	88 f0       	brcs	.+34     	; 0x2498 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2476:	88 85       	ldd	r24, Y+8	; 0x08
    2478:	99 85       	ldd	r25, Y+9	; 0x09
    247a:	89 2b       	or	r24, r25
    247c:	69 f0       	breq	.+26     	; 0x2498 <xStreamBufferSendFromISR+0x70>
    247e:	88 85       	ldd	r24, Y+8	; 0x08
    2480:	99 85       	ldd	r25, Y+9	; 0x09
    2482:	e1 2c       	mov	r14, r1
    2484:	f1 2c       	mov	r15, r1
    2486:	00 e0       	ldi	r16, 0x00	; 0
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	a9 01       	movw	r20, r18
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <xTaskGenericNotifyFromISR>
    2494:	19 86       	std	Y+9, r1	; 0x09
    2496:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    2498:	c5 01       	movw	r24, r10
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	1f 91       	pop	r17
    24a0:	0f 91       	pop	r16
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	df 90       	pop	r13
    24a8:	cf 90       	pop	r12
    24aa:	bf 90       	pop	r11
    24ac:	af 90       	pop	r10
    24ae:	08 95       	ret

000024b0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    24b0:	4f 92       	push	r4
    24b2:	5f 92       	push	r5
    24b4:	6f 92       	push	r6
    24b6:	7f 92       	push	r7
    24b8:	8f 92       	push	r8
    24ba:	9f 92       	push	r9
    24bc:	af 92       	push	r10
    24be:	bf 92       	push	r11
    24c0:	cf 92       	push	r12
    24c2:	df 92       	push	r13
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	ec 01       	movw	r28, r24
    24d2:	2b 01       	movw	r4, r22
    24d4:	3a 01       	movw	r6, r20
    24d6:	58 01       	movw	r10, r16
    24d8:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    24da:	8e 85       	ldd	r24, Y+14	; 0x0e
    24dc:	80 ff       	sbrs	r24, 0
    24de:	05 c0       	rjmp	.+10     	; 0x24ea <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    24e0:	68 94       	set
    24e2:	88 24       	eor	r8, r8
    24e4:	81 f8       	bld	r8, 1
    24e6:	91 2c       	mov	r9, r1
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    24ea:	81 2c       	mov	r8, r1
    24ec:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    24ee:	a1 14       	cp	r10, r1
    24f0:	b1 04       	cpc	r11, r1
    24f2:	c1 04       	cpc	r12, r1
    24f4:	d1 04       	cpc	r13, r1
    24f6:	41 f1       	breq	.+80     	; 0x2548 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    24fe:	ce 01       	movw	r24, r28
    2500:	29 dd       	rcall	.-1454   	; 0x1f54 <prvBytesInBuffer>
    2502:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2504:	88 16       	cp	r8, r24
    2506:	99 06       	cpc	r9, r25
    2508:	48 f0       	brcs	.+18     	; 0x251c <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2514:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <xTaskGetCurrentTaskHandle>
    2518:	99 87       	std	Y+9, r25	; 0x09
    251a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2520:	8e 14       	cp	r8, r14
    2522:	9f 04       	cpc	r9, r15
    2524:	a0 f0       	brcs	.+40     	; 0x254e <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2526:	e1 2c       	mov	r14, r1
    2528:	f1 2c       	mov	r15, r1
    252a:	00 e0       	ldi	r16, 0x00	; 0
    252c:	10 e0       	ldi	r17, 0x00	; 0
    252e:	98 01       	movw	r18, r16
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	ba 01       	movw	r22, r20
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	0e 94 8d 1c 	call	0x391a	; 0x391a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    253c:	19 86       	std	Y+9, r1	; 0x09
    253e:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2540:	ce 01       	movw	r24, r28
    2542:	08 dd       	rcall	.-1520   	; 0x1f54 <prvBytesInBuffer>
    2544:	7c 01       	movw	r14, r24
    2546:	03 c0       	rjmp	.+6      	; 0x254e <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2548:	ce 01       	movw	r24, r28
    254a:	04 dd       	rcall	.-1528   	; 0x1f54 <prvBytesInBuffer>
    254c:	7c 01       	movw	r14, r24
    254e:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2550:	9f 04       	cpc	r9, r15
    2552:	e8 f4       	brcc	.+58     	; 0x258e <xStreamBufferReceive+0xde>
    2554:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    2556:	97 01       	movw	r18, r14
    2558:	a3 01       	movw	r20, r6
    255a:	b2 01       	movw	r22, r4
    255c:	ce 01       	movw	r24, r28
    255e:	f8 dd       	rcall	.-1040   	; 0x2150 <prvReadMessageFromBuffer>
    2560:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2562:	89 2b       	or	r24, r25
    2564:	b1 f0       	breq	.+44     	; 0x2592 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2566:	c3 d2       	rcall	.+1414   	; 0x2aee <vTaskSuspendAll>
    2568:	8a 85       	ldd	r24, Y+10	; 0x0a
    256a:	9b 85       	ldd	r25, Y+11	; 0x0b
    256c:	89 2b       	or	r24, r25
    256e:	69 f0       	breq	.+26     	; 0x258a <xStreamBufferReceive+0xda>
    2570:	8a 85       	ldd	r24, Y+10	; 0x0a
    2572:	9b 85       	ldd	r25, Y+11	; 0x0b
    2574:	e1 2c       	mov	r14, r1
    2576:	f1 2c       	mov	r15, r1
    2578:	00 e0       	ldi	r16, 0x00	; 0
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	a9 01       	movw	r20, r18
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <xTaskGenericNotify>
    2586:	1b 86       	std	Y+11, r1	; 0x0b
    2588:	1a 86       	std	Y+10, r1	; 0x0a
    258a:	f1 d3       	rcall	.+2018   	; 0x2d6e <xTaskResumeAll>
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <xStreamBufferReceive+0xe2>
    258e:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2590:	d1 2c       	mov	r13, r1
    2592:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	ff 90       	pop	r15
    259e:	ef 90       	pop	r14
    25a0:	df 90       	pop	r13
    25a2:	cf 90       	pop	r12
    25a4:	bf 90       	pop	r11
    25a6:	af 90       	pop	r10
    25a8:	9f 90       	pop	r9
    25aa:	8f 90       	pop	r8
    25ac:	7f 90       	pop	r7
    25ae:	6f 90       	pop	r6
    25b0:	5f 90       	pop	r5
    25b2:	4f 90       	pop	r4
    25b4:	08 95       	ret

000025b6 <prvResetNextTaskUnblockTime>:
    25b6:	e0 91 29 14 	lds	r30, 0x1429	; 0x801429 <pxDelayedTaskList>
    25ba:	f0 91 2a 14 	lds	r31, 0x142A	; 0x80142a <pxDelayedTaskList+0x1>
    25be:	80 81       	ld	r24, Z
    25c0:	81 11       	cpse	r24, r1
    25c2:	0c c0       	rjmp	.+24     	; 0x25dc <prvResetNextTaskUnblockTime+0x26>
    25c4:	8f ef       	ldi	r24, 0xFF	; 255
    25c6:	9f ef       	ldi	r25, 0xFF	; 255
    25c8:	dc 01       	movw	r26, r24
    25ca:	80 93 f3 13 	sts	0x13F3, r24	; 0x8013f3 <xNextTaskUnblockTime>
    25ce:	90 93 f4 13 	sts	0x13F4, r25	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    25d2:	a0 93 f5 13 	sts	0x13F5, r26	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    25d6:	b0 93 f6 13 	sts	0x13F6, r27	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    25da:	08 95       	ret
    25dc:	e0 91 29 14 	lds	r30, 0x1429	; 0x801429 <pxDelayedTaskList>
    25e0:	f0 91 2a 14 	lds	r31, 0x142A	; 0x80142a <pxDelayedTaskList+0x1>
    25e4:	07 80       	ldd	r0, Z+7	; 0x07
    25e6:	f0 85       	ldd	r31, Z+8	; 0x08
    25e8:	e0 2d       	mov	r30, r0
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	a2 81       	ldd	r26, Z+2	; 0x02
    25f0:	b3 81       	ldd	r27, Z+3	; 0x03
    25f2:	80 93 f3 13 	sts	0x13F3, r24	; 0x8013f3 <xNextTaskUnblockTime>
    25f6:	90 93 f4 13 	sts	0x13F4, r25	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    25fa:	a0 93 f5 13 	sts	0x13F5, r26	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    25fe:	b0 93 f6 13 	sts	0x13F6, r27	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    2602:	08 95       	ret

00002604 <prvDeleteTCB>:
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	ec 01       	movw	r28, r24
    260a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    260e:	0e 94 40 0a 	call	0x1480	; 0x1480 <vPortFree>
    2612:	ce 01       	movw	r24, r28
    2614:	0e 94 40 0a 	call	0x1480	; 0x1480 <vPortFree>
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	08 95       	ret

0000261e <prvInitialiseNewTask>:
    261e:	4f 92       	push	r4
    2620:	5f 92       	push	r5
    2622:	6f 92       	push	r6
    2624:	7f 92       	push	r7
    2626:	8f 92       	push	r8
    2628:	9f 92       	push	r9
    262a:	af 92       	push	r10
    262c:	bf 92       	push	r11
    262e:	cf 92       	push	r12
    2630:	df 92       	push	r13
    2632:	ef 92       	push	r14
    2634:	ff 92       	push	r15
    2636:	0f 93       	push	r16
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	2c 01       	movw	r4, r24
    263e:	5b 01       	movw	r10, r22
    2640:	4a 01       	movw	r8, r20
    2642:	39 01       	movw	r6, r18
    2644:	e6 01       	movw	r28, r12
    2646:	65 ea       	ldi	r22, 0xA5	; 165
    2648:	70 e0       	ldi	r23, 0x00	; 0
    264a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264e:	0e 94 4c 38 	call	0x7098	; 0x7098 <memset>
    2652:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2654:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2656:	21 e0       	ldi	r18, 0x01	; 1
    2658:	82 1a       	sub	r8, r18
    265a:	91 08       	sbc	r9, r1
    265c:	88 0e       	add	r8, r24
    265e:	99 1e       	adc	r9, r25
    2660:	a1 14       	cp	r10, r1
    2662:	b1 04       	cpc	r11, r1
    2664:	89 f4       	brne	.+34     	; 0x2688 <prvInitialiseNewTask+0x6a>
    2666:	15 c0       	rjmp	.+42     	; 0x2692 <prvInitialiseNewTask+0x74>
    2668:	82 2f       	mov	r24, r18
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	f5 01       	movw	r30, r10
    266e:	e8 0f       	add	r30, r24
    2670:	f9 1f       	adc	r31, r25
    2672:	30 81       	ld	r19, Z
    2674:	de 01       	movw	r26, r28
    2676:	a8 0f       	add	r26, r24
    2678:	b9 1f       	adc	r27, r25
    267a:	5d 96       	adiw	r26, 0x1d	; 29
    267c:	3c 93       	st	X, r19
    267e:	80 81       	ld	r24, Z
    2680:	88 23       	and	r24, r24
    2682:	29 f0       	breq	.+10     	; 0x268e <prvInitialiseNewTask+0x70>
    2684:	2f 5f       	subi	r18, 0xFF	; 255
    2686:	01 c0       	rjmp	.+2      	; 0x268a <prvInitialiseNewTask+0x6c>
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	20 31       	cpi	r18, 0x10	; 16
    268c:	68 f3       	brcs	.-38     	; 0x2668 <prvInitialiseNewTask+0x4a>
    268e:	1c a6       	std	Y+44, r1	; 0x2c
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <prvInitialiseNewTask+0x76>
    2692:	1d 8e       	std	Y+29, r1	; 0x1d
    2694:	0a 30       	cpi	r16, 0x0A	; 10
    2696:	08 f0       	brcs	.+2      	; 0x269a <prvInitialiseNewTask+0x7c>
    2698:	09 e0       	ldi	r16, 0x09	; 9
    269a:	0a 8f       	std	Y+26, r16	; 0x1a
    269c:	0d a7       	std	Y+45, r16	; 0x2d
    269e:	1e a6       	std	Y+46, r1	; 0x2e
    26a0:	ce 01       	movw	r24, r28
    26a2:	02 96       	adiw	r24, 0x02	; 2
    26a4:	0e 94 8e 0a 	call	0x151c	; 0x151c <vListInitialiseItem>
    26a8:	ce 01       	movw	r24, r28
    26aa:	0e 96       	adiw	r24, 0x0e	; 14
    26ac:	0e 94 8e 0a 	call	0x151c	; 0x151c <vListInitialiseItem>
    26b0:	db 87       	std	Y+11, r29	; 0x0b
    26b2:	ca 87       	std	Y+10, r28	; 0x0a
    26b4:	8a e0       	ldi	r24, 0x0A	; 10
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e0       	ldi	r26, 0x00	; 0
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	80 1b       	sub	r24, r16
    26be:	91 09       	sbc	r25, r1
    26c0:	a1 09       	sbc	r26, r1
    26c2:	b1 09       	sbc	r27, r1
    26c4:	8e 87       	std	Y+14, r24	; 0x0e
    26c6:	9f 87       	std	Y+15, r25	; 0x0f
    26c8:	a8 8b       	std	Y+16, r26	; 0x10
    26ca:	b9 8b       	std	Y+17, r27	; 0x11
    26cc:	df 8b       	std	Y+23, r29	; 0x17
    26ce:	ce 8b       	std	Y+22, r28	; 0x16
    26d0:	84 e0       	ldi	r24, 0x04	; 4
    26d2:	fe 01       	movw	r30, r28
    26d4:	bf 96       	adiw	r30, 0x2f	; 47
    26d6:	df 01       	movw	r26, r30
    26d8:	1d 92       	st	X+, r1
    26da:	8a 95       	dec	r24
    26dc:	e9 f7       	brne	.-6      	; 0x26d8 <prvInitialiseNewTask+0xba>
    26de:	1b aa       	std	Y+51, r1	; 0x33
    26e0:	a3 01       	movw	r20, r6
    26e2:	b2 01       	movw	r22, r4
    26e4:	c4 01       	movw	r24, r8
    26e6:	0e 94 02 0b 	call	0x1604	; 0x1604 <pxPortInitialiseStack>
    26ea:	99 83       	std	Y+1, r25	; 0x01
    26ec:	88 83       	st	Y, r24
    26ee:	e1 14       	cp	r14, r1
    26f0:	f1 04       	cpc	r15, r1
    26f2:	19 f0       	breq	.+6      	; 0x26fa <prvInitialiseNewTask+0xdc>
    26f4:	f7 01       	movw	r30, r14
    26f6:	d1 83       	std	Z+1, r29	; 0x01
    26f8:	c0 83       	st	Z, r28
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	0f 91       	pop	r16
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	df 90       	pop	r13
    2706:	cf 90       	pop	r12
    2708:	bf 90       	pop	r11
    270a:	af 90       	pop	r10
    270c:	9f 90       	pop	r9
    270e:	8f 90       	pop	r8
    2710:	7f 90       	pop	r7
    2712:	6f 90       	pop	r6
    2714:	5f 90       	pop	r5
    2716:	4f 90       	pop	r4
    2718:	08 95       	ret

0000271a <prvInitialiseTaskLists>:
    271a:	cf 93       	push	r28
    271c:	c0 e0       	ldi	r28, 0x00	; 0
    271e:	09 c0       	rjmp	.+18     	; 0x2732 <prvInitialiseTaskLists+0x18>
    2720:	2b e0       	ldi	r18, 0x0B	; 11
    2722:	c2 9f       	mul	r28, r18
    2724:	c0 01       	movw	r24, r0
    2726:	11 24       	eor	r1, r1
    2728:	8f 5b       	subi	r24, 0xBF	; 191
    272a:	9b 4e       	sbci	r25, 0xEB	; 235
    272c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    2730:	cf 5f       	subi	r28, 0xFF	; 255
    2732:	ca 30       	cpi	r28, 0x0A	; 10
    2734:	a8 f3       	brcs	.-22     	; 0x2720 <prvInitialiseTaskLists+0x6>
    2736:	86 e3       	ldi	r24, 0x36	; 54
    2738:	94 e1       	ldi	r25, 0x14	; 20
    273a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    273e:	8b e2       	ldi	r24, 0x2B	; 43
    2740:	94 e1       	ldi	r25, 0x14	; 20
    2742:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    2746:	8c e1       	ldi	r24, 0x1C	; 28
    2748:	94 e1       	ldi	r25, 0x14	; 20
    274a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    274e:	81 e1       	ldi	r24, 0x11	; 17
    2750:	94 e1       	ldi	r25, 0x14	; 20
    2752:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    2756:	85 e0       	ldi	r24, 0x05	; 5
    2758:	94 e1       	ldi	r25, 0x14	; 20
    275a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    275e:	86 e3       	ldi	r24, 0x36	; 54
    2760:	94 e1       	ldi	r25, 0x14	; 20
    2762:	90 93 2a 14 	sts	0x142A, r25	; 0x80142a <pxDelayedTaskList+0x1>
    2766:	80 93 29 14 	sts	0x1429, r24	; 0x801429 <pxDelayedTaskList>
    276a:	8b e2       	ldi	r24, 0x2B	; 43
    276c:	94 e1       	ldi	r25, 0x14	; 20
    276e:	90 93 28 14 	sts	0x1428, r25	; 0x801428 <pxOverflowDelayedTaskList+0x1>
    2772:	80 93 27 14 	sts	0x1427, r24	; 0x801427 <pxOverflowDelayedTaskList>
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <prvAddNewTaskToReadyList>:
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	ec 01       	movw	r28, r24
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	0f 92       	push	r0
    2786:	80 91 04 14 	lds	r24, 0x1404	; 0x801404 <uxCurrentNumberOfTasks>
    278a:	8f 5f       	subi	r24, 0xFF	; 255
    278c:	80 93 04 14 	sts	0x1404, r24	; 0x801404 <uxCurrentNumberOfTasks>
    2790:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    2794:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2798:	89 2b       	or	r24, r25
    279a:	51 f4       	brne	.+20     	; 0x27b0 <prvAddNewTaskToReadyList+0x36>
    279c:	d0 93 b0 14 	sts	0x14B0, r29	; 0x8014b0 <pxCurrentTCB+0x1>
    27a0:	c0 93 af 14 	sts	0x14AF, r28	; 0x8014af <pxCurrentTCB>
    27a4:	80 91 04 14 	lds	r24, 0x1404	; 0x801404 <uxCurrentNumberOfTasks>
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	91 f4       	brne	.+36     	; 0x27d0 <prvAddNewTaskToReadyList+0x56>
    27ac:	b6 df       	rcall	.-148    	; 0x271a <prvInitialiseTaskLists>
    27ae:	10 c0       	rjmp	.+32     	; 0x27d0 <prvAddNewTaskToReadyList+0x56>
    27b0:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <xSchedulerRunning>
    27b4:	81 11       	cpse	r24, r1
    27b6:	0c c0       	rjmp	.+24     	; 0x27d0 <prvAddNewTaskToReadyList+0x56>
    27b8:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    27bc:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    27c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    27c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27c4:	89 17       	cp	r24, r25
    27c6:	20 f0       	brcs	.+8      	; 0x27d0 <prvAddNewTaskToReadyList+0x56>
    27c8:	d0 93 b0 14 	sts	0x14B0, r29	; 0x8014b0 <pxCurrentTCB+0x1>
    27cc:	c0 93 af 14 	sts	0x14AF, r28	; 0x8014af <pxCurrentTCB>
    27d0:	80 91 f7 13 	lds	r24, 0x13F7	; 0x8013f7 <uxTaskNumber>
    27d4:	8f 5f       	subi	r24, 0xFF	; 255
    27d6:	80 93 f7 13 	sts	0x13F7, r24	; 0x8013f7 <uxTaskNumber>
    27da:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27dc:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    27e0:	8e 17       	cp	r24, r30
    27e2:	10 f4       	brcc	.+4      	; 0x27e8 <prvAddNewTaskToReadyList+0x6e>
    27e4:	e0 93 ff 13 	sts	0x13FF, r30	; 0x8013ff <uxTopReadyPriority>
    27e8:	8b e0       	ldi	r24, 0x0B	; 11
    27ea:	8e 9f       	mul	r24, r30
    27ec:	f0 01       	movw	r30, r0
    27ee:	11 24       	eor	r1, r1
    27f0:	ef 5b       	subi	r30, 0xBF	; 191
    27f2:	fb 4e       	sbci	r31, 0xEB	; 235
    27f4:	01 80       	ldd	r0, Z+1	; 0x01
    27f6:	f2 81       	ldd	r31, Z+2	; 0x02
    27f8:	e0 2d       	mov	r30, r0
    27fa:	ff 83       	std	Y+7, r31	; 0x07
    27fc:	ee 83       	std	Y+6, r30	; 0x06
    27fe:	26 81       	ldd	r18, Z+6	; 0x06
    2800:	37 81       	ldd	r19, Z+7	; 0x07
    2802:	39 87       	std	Y+9, r19	; 0x09
    2804:	28 87       	std	Y+8, r18	; 0x08
    2806:	a6 81       	ldd	r26, Z+6	; 0x06
    2808:	b7 81       	ldd	r27, Z+7	; 0x07
    280a:	9e 01       	movw	r18, r28
    280c:	2e 5f       	subi	r18, 0xFE	; 254
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	15 96       	adiw	r26, 0x05	; 5
    2812:	3c 93       	st	X, r19
    2814:	2e 93       	st	-X, r18
    2816:	14 97       	sbiw	r26, 0x04	; 4
    2818:	37 83       	std	Z+7, r19	; 0x07
    281a:	26 83       	std	Z+6, r18	; 0x06
    281c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    281e:	8e 9f       	mul	r24, r30
    2820:	f0 01       	movw	r30, r0
    2822:	11 24       	eor	r1, r1
    2824:	ef 5b       	subi	r30, 0xBF	; 191
    2826:	fb 4e       	sbci	r31, 0xEB	; 235
    2828:	fd 87       	std	Y+13, r31	; 0x0d
    282a:	ec 87       	std	Y+12, r30	; 0x0c
    282c:	80 81       	ld	r24, Z
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	80 83       	st	Z, r24
    2832:	0f 90       	pop	r0
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <xSchedulerRunning>
    283a:	88 23       	and	r24, r24
    283c:	51 f0       	breq	.+20     	; 0x2852 <prvAddNewTaskToReadyList+0xd8>
    283e:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    2842:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2846:	92 8d       	ldd	r25, Z+26	; 0x1a
    2848:	8a 8d       	ldd	r24, Y+26	; 0x1a
    284a:	98 17       	cp	r25, r24
    284c:	10 f4       	brcc	.+4      	; 0x2852 <prvAddNewTaskToReadyList+0xd8>
    284e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <prvCheckTasksWaitingTermination>:
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	1b c0       	rjmp	.+54     	; 0x2894 <prvCheckTasksWaitingTermination+0x3c>
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	0f 92       	push	r0
    2864:	e0 91 18 14 	lds	r30, 0x1418	; 0x801418 <xTasksWaitingTermination+0x7>
    2868:	f0 91 19 14 	lds	r31, 0x1419	; 0x801419 <xTasksWaitingTermination+0x8>
    286c:	c0 85       	ldd	r28, Z+8	; 0x08
    286e:	d1 85       	ldd	r29, Z+9	; 0x09
    2870:	ce 01       	movw	r24, r28
    2872:	02 96       	adiw	r24, 0x02	; 2
    2874:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
    2878:	80 91 04 14 	lds	r24, 0x1404	; 0x801404 <uxCurrentNumberOfTasks>
    287c:	81 50       	subi	r24, 0x01	; 1
    287e:	80 93 04 14 	sts	0x1404, r24	; 0x801404 <uxCurrentNumberOfTasks>
    2882:	80 91 10 14 	lds	r24, 0x1410	; 0x801410 <uxDeletedTasksWaitingCleanUp>
    2886:	81 50       	subi	r24, 0x01	; 1
    2888:	80 93 10 14 	sts	0x1410, r24	; 0x801410 <uxDeletedTasksWaitingCleanUp>
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	ce 01       	movw	r24, r28
    2892:	b8 de       	rcall	.-656    	; 0x2604 <prvDeleteTCB>
    2894:	80 91 10 14 	lds	r24, 0x1410	; 0x801410 <uxDeletedTasksWaitingCleanUp>
    2898:	81 11       	cpse	r24, r1
    289a:	e1 cf       	rjmp	.-62     	; 0x285e <prvCheckTasksWaitingTermination+0x6>
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	08 95       	ret

000028a2 <prvAddCurrentTaskToDelayedList>:
    28a2:	8f 92       	push	r8
    28a4:	9f 92       	push	r9
    28a6:	af 92       	push	r10
    28a8:	bf 92       	push	r11
    28aa:	cf 92       	push	r12
    28ac:	df 92       	push	r13
    28ae:	ef 92       	push	r14
    28b0:	ff 92       	push	r15
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	6b 01       	movw	r12, r22
    28b8:	7c 01       	movw	r14, r24
    28ba:	c4 2f       	mov	r28, r20
    28bc:	80 90 00 14 	lds	r8, 0x1400	; 0x801400 <xTickCount>
    28c0:	90 90 01 14 	lds	r9, 0x1401	; 0x801401 <xTickCount+0x1>
    28c4:	a0 90 02 14 	lds	r10, 0x1402	; 0x801402 <xTickCount+0x2>
    28c8:	b0 90 03 14 	lds	r11, 0x1403	; 0x801403 <xTickCount+0x3>
    28cc:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    28d0:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    28d4:	02 96       	adiw	r24, 0x02	; 2
    28d6:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
    28da:	8f ef       	ldi	r24, 0xFF	; 255
    28dc:	c8 16       	cp	r12, r24
    28de:	d8 06       	cpc	r13, r24
    28e0:	e8 06       	cpc	r14, r24
    28e2:	f8 06       	cpc	r15, r24
    28e4:	b1 f5       	brne	.+108    	; 0x2952 <prvAddCurrentTaskToDelayedList+0xb0>
    28e6:	cc 23       	and	r28, r28
    28e8:	a1 f1       	breq	.+104    	; 0x2952 <prvAddCurrentTaskToDelayedList+0xb0>
    28ea:	e5 e0       	ldi	r30, 0x05	; 5
    28ec:	f4 e1       	ldi	r31, 0x14	; 20
    28ee:	a1 81       	ldd	r26, Z+1	; 0x01
    28f0:	b2 81       	ldd	r27, Z+2	; 0x02
    28f2:	c0 91 af 14 	lds	r28, 0x14AF	; 0x8014af <pxCurrentTCB>
    28f6:	d0 91 b0 14 	lds	r29, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    28fa:	bf 83       	std	Y+7, r27	; 0x07
    28fc:	ae 83       	std	Y+6, r26	; 0x06
    28fe:	c0 91 af 14 	lds	r28, 0x14AF	; 0x8014af <pxCurrentTCB>
    2902:	d0 91 b0 14 	lds	r29, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2906:	16 96       	adiw	r26, 0x06	; 6
    2908:	8d 91       	ld	r24, X+
    290a:	9c 91       	ld	r25, X
    290c:	17 97       	sbiw	r26, 0x07	; 7
    290e:	99 87       	std	Y+9, r25	; 0x09
    2910:	88 87       	std	Y+8, r24	; 0x08
    2912:	16 96       	adiw	r26, 0x06	; 6
    2914:	cd 91       	ld	r28, X+
    2916:	dc 91       	ld	r29, X
    2918:	17 97       	sbiw	r26, 0x07	; 7
    291a:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    291e:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2922:	02 96       	adiw	r24, 0x02	; 2
    2924:	9d 83       	std	Y+5, r25	; 0x05
    2926:	8c 83       	std	Y+4, r24	; 0x04
    2928:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    292c:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2930:	02 96       	adiw	r24, 0x02	; 2
    2932:	17 96       	adiw	r26, 0x07	; 7
    2934:	9c 93       	st	X, r25
    2936:	8e 93       	st	-X, r24
    2938:	16 97       	sbiw	r26, 0x06	; 6
    293a:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    293e:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2942:	1d 96       	adiw	r26, 0x0d	; 13
    2944:	fc 93       	st	X, r31
    2946:	ee 93       	st	-X, r30
    2948:	1c 97       	sbiw	r26, 0x0c	; 12
    294a:	80 81       	ld	r24, Z
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	80 83       	st	Z, r24
    2950:	3f c0       	rjmp	.+126    	; 0x29d0 <prvAddCurrentTaskToDelayedList+0x12e>
    2952:	c8 0c       	add	r12, r8
    2954:	d9 1c       	adc	r13, r9
    2956:	ea 1c       	adc	r14, r10
    2958:	fb 1c       	adc	r15, r11
    295a:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    295e:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2962:	c2 82       	std	Z+2, r12	; 0x02
    2964:	d3 82       	std	Z+3, r13	; 0x03
    2966:	e4 82       	std	Z+4, r14	; 0x04
    2968:	f5 82       	std	Z+5, r15	; 0x05
    296a:	c8 14       	cp	r12, r8
    296c:	d9 04       	cpc	r13, r9
    296e:	ea 04       	cpc	r14, r10
    2970:	fb 04       	cpc	r15, r11
    2972:	68 f4       	brcc	.+26     	; 0x298e <prvAddCurrentTaskToDelayedList+0xec>
    2974:	60 91 af 14 	lds	r22, 0x14AF	; 0x8014af <pxCurrentTCB>
    2978:	70 91 b0 14 	lds	r23, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    297c:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <pxOverflowDelayedTaskList>
    2980:	90 91 28 14 	lds	r25, 0x1428	; 0x801428 <pxOverflowDelayedTaskList+0x1>
    2984:	6e 5f       	subi	r22, 0xFE	; 254
    2986:	7f 4f       	sbci	r23, 0xFF	; 255
    2988:	0e 94 92 0a 	call	0x1524	; 0x1524 <vListInsert>
    298c:	21 c0       	rjmp	.+66     	; 0x29d0 <prvAddCurrentTaskToDelayedList+0x12e>
    298e:	60 91 af 14 	lds	r22, 0x14AF	; 0x8014af <pxCurrentTCB>
    2992:	70 91 b0 14 	lds	r23, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2996:	80 91 29 14 	lds	r24, 0x1429	; 0x801429 <pxDelayedTaskList>
    299a:	90 91 2a 14 	lds	r25, 0x142A	; 0x80142a <pxDelayedTaskList+0x1>
    299e:	6e 5f       	subi	r22, 0xFE	; 254
    29a0:	7f 4f       	sbci	r23, 0xFF	; 255
    29a2:	0e 94 92 0a 	call	0x1524	; 0x1524 <vListInsert>
    29a6:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <xNextTaskUnblockTime>
    29aa:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    29ae:	a0 91 f5 13 	lds	r26, 0x13F5	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    29b2:	b0 91 f6 13 	lds	r27, 0x13F6	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    29b6:	c8 16       	cp	r12, r24
    29b8:	d9 06       	cpc	r13, r25
    29ba:	ea 06       	cpc	r14, r26
    29bc:	fb 06       	cpc	r15, r27
    29be:	40 f4       	brcc	.+16     	; 0x29d0 <prvAddCurrentTaskToDelayedList+0x12e>
    29c0:	c0 92 f3 13 	sts	0x13F3, r12	; 0x8013f3 <xNextTaskUnblockTime>
    29c4:	d0 92 f4 13 	sts	0x13F4, r13	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    29c8:	e0 92 f5 13 	sts	0x13F5, r14	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    29cc:	f0 92 f6 13 	sts	0x13F6, r15	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	cf 90       	pop	r12
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	9f 90       	pop	r9
    29e2:	8f 90       	pop	r8
    29e4:	08 95       	ret

000029e6 <xTaskCreate>:
    29e6:	2f 92       	push	r2
    29e8:	3f 92       	push	r3
    29ea:	4f 92       	push	r4
    29ec:	5f 92       	push	r5
    29ee:	6f 92       	push	r6
    29f0:	7f 92       	push	r7
    29f2:	8f 92       	push	r8
    29f4:	9f 92       	push	r9
    29f6:	af 92       	push	r10
    29f8:	bf 92       	push	r11
    29fa:	cf 92       	push	r12
    29fc:	df 92       	push	r13
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	3c 01       	movw	r6, r24
    2a0a:	1b 01       	movw	r2, r22
    2a0c:	4a 01       	movw	r8, r20
    2a0e:	29 01       	movw	r4, r18
    2a10:	ca 01       	movw	r24, r20
    2a12:	0e 94 97 09 	call	0x132e	; 0x132e <pvPortMalloc>
    2a16:	6c 01       	movw	r12, r24
    2a18:	89 2b       	or	r24, r25
    2a1a:	71 f0       	breq	.+28     	; 0x2a38 <xTaskCreate+0x52>
    2a1c:	84 e3       	ldi	r24, 0x34	; 52
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	0e 94 97 09 	call	0x132e	; 0x132e <pvPortMalloc>
    2a24:	ec 01       	movw	r28, r24
    2a26:	89 2b       	or	r24, r25
    2a28:	19 f0       	breq	.+6      	; 0x2a30 <xTaskCreate+0x4a>
    2a2a:	dc 8e       	std	Y+28, r13	; 0x1c
    2a2c:	cb 8e       	std	Y+27, r12	; 0x1b
    2a2e:	06 c0       	rjmp	.+12     	; 0x2a3c <xTaskCreate+0x56>
    2a30:	c6 01       	movw	r24, r12
    2a32:	0e 94 40 0a 	call	0x1480	; 0x1480 <vPortFree>
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <xTaskCreate+0x56>
    2a38:	c0 e0       	ldi	r28, 0x00	; 0
    2a3a:	d0 e0       	ldi	r29, 0x00	; 0
    2a3c:	20 97       	sbiw	r28, 0x00	; 0
    2a3e:	61 f0       	breq	.+24     	; 0x2a58 <xTaskCreate+0x72>
    2a40:	a1 2c       	mov	r10, r1
    2a42:	b1 2c       	mov	r11, r1
    2a44:	6e 01       	movw	r12, r28
    2a46:	92 01       	movw	r18, r4
    2a48:	a4 01       	movw	r20, r8
    2a4a:	b1 01       	movw	r22, r2
    2a4c:	c3 01       	movw	r24, r6
    2a4e:	e7 dd       	rcall	.-1074   	; 0x261e <prvInitialiseNewTask>
    2a50:	ce 01       	movw	r24, r28
    2a52:	93 de       	rcall	.-730    	; 0x277a <prvAddNewTaskToReadyList>
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <xTaskCreate+0x74>
    2a58:	8f ef       	ldi	r24, 0xFF	; 255
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
    2a68:	bf 90       	pop	r11
    2a6a:	af 90       	pop	r10
    2a6c:	9f 90       	pop	r9
    2a6e:	8f 90       	pop	r8
    2a70:	7f 90       	pop	r7
    2a72:	6f 90       	pop	r6
    2a74:	5f 90       	pop	r5
    2a76:	4f 90       	pop	r4
    2a78:	3f 90       	pop	r3
    2a7a:	2f 90       	pop	r2
    2a7c:	08 95       	ret

00002a7e <vTaskStartScheduler>:
    2a7e:	ef 92       	push	r14
    2a80:	ff 92       	push	r15
    2a82:	0f 93       	push	r16
    2a84:	0f 2e       	mov	r0, r31
    2a86:	f1 ef       	ldi	r31, 0xF1	; 241
    2a88:	ef 2e       	mov	r14, r31
    2a8a:	f3 e1       	ldi	r31, 0x13	; 19
    2a8c:	ff 2e       	mov	r15, r31
    2a8e:	f0 2d       	mov	r31, r0
    2a90:	00 e0       	ldi	r16, 0x00	; 0
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 ec       	ldi	r20, 0xC0	; 192
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	60 e2       	ldi	r22, 0x20	; 32
    2a9c:	75 e0       	ldi	r23, 0x05	; 5
    2a9e:	8e e4       	ldi	r24, 0x4E	; 78
    2aa0:	91 e0       	ldi	r25, 0x01	; 1
    2aa2:	a1 df       	rcall	.-190    	; 0x29e6 <xTaskCreate>
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	11 f4       	brne	.+4      	; 0x2aac <vTaskStartScheduler+0x2e>
    2aa8:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <xTimerCreateTimerTask>
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	c9 f4       	brne	.+50     	; 0x2ae2 <vTaskStartScheduler+0x64>
    2ab0:	f8 94       	cli
    2ab2:	8f ef       	ldi	r24, 0xFF	; 255
    2ab4:	9f ef       	ldi	r25, 0xFF	; 255
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	80 93 f3 13 	sts	0x13F3, r24	; 0x8013f3 <xNextTaskUnblockTime>
    2abc:	90 93 f4 13 	sts	0x13F4, r25	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    2ac0:	a0 93 f5 13 	sts	0x13F5, r26	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    2ac4:	b0 93 f6 13 	sts	0x13F6, r27	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <xSchedulerRunning>
    2ace:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <xTickCount>
    2ad2:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <xTickCount+0x1>
    2ad6:	10 92 02 14 	sts	0x1402, r1	; 0x801402 <xTickCount+0x2>
    2ada:	10 92 03 14 	sts	0x1403, r1	; 0x801403 <xTickCount+0x3>
    2ade:	0e 94 19 0b 	call	0x1632	; 0x1632 <xPortStartScheduler>
    2ae2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	08 95       	ret

00002aee <vTaskSuspendAll>:
    2aee:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    2af2:	8f 5f       	subi	r24, 0xFF	; 255
    2af4:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <uxSchedulerSuspended>
    2af8:	08 95       	ret

00002afa <xTaskGetTickCount>:
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	0f 92       	push	r0
    2b00:	60 91 00 14 	lds	r22, 0x1400	; 0x801400 <xTickCount>
    2b04:	70 91 01 14 	lds	r23, 0x1401	; 0x801401 <xTickCount+0x1>
    2b08:	80 91 02 14 	lds	r24, 0x1402	; 0x801402 <xTickCount+0x2>
    2b0c:	90 91 03 14 	lds	r25, 0x1403	; 0x801403 <xTickCount+0x3>
    2b10:	0f 90       	pop	r0
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	08 95       	ret

00002b16 <xTaskIncrementTick>:
    2b16:	cf 92       	push	r12
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	ff 92       	push	r15
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    2b26:	81 11       	cpse	r24, r1
    2b28:	05 c1       	rjmp	.+522    	; 0x2d34 <xTaskIncrementTick+0x21e>
    2b2a:	c0 90 00 14 	lds	r12, 0x1400	; 0x801400 <xTickCount>
    2b2e:	d0 90 01 14 	lds	r13, 0x1401	; 0x801401 <xTickCount+0x1>
    2b32:	e0 90 02 14 	lds	r14, 0x1402	; 0x801402 <xTickCount+0x2>
    2b36:	f0 90 03 14 	lds	r15, 0x1403	; 0x801403 <xTickCount+0x3>
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	c8 1a       	sub	r12, r24
    2b3e:	d8 0a       	sbc	r13, r24
    2b40:	e8 0a       	sbc	r14, r24
    2b42:	f8 0a       	sbc	r15, r24
    2b44:	c0 92 00 14 	sts	0x1400, r12	; 0x801400 <xTickCount>
    2b48:	d0 92 01 14 	sts	0x1401, r13	; 0x801401 <xTickCount+0x1>
    2b4c:	e0 92 02 14 	sts	0x1402, r14	; 0x801402 <xTickCount+0x2>
    2b50:	f0 92 03 14 	sts	0x1403, r15	; 0x801403 <xTickCount+0x3>
    2b54:	c1 14       	cp	r12, r1
    2b56:	d1 04       	cpc	r13, r1
    2b58:	e1 04       	cpc	r14, r1
    2b5a:	f1 04       	cpc	r15, r1
    2b5c:	b1 f4       	brne	.+44     	; 0x2b8a <xTaskIncrementTick+0x74>
    2b5e:	80 91 29 14 	lds	r24, 0x1429	; 0x801429 <pxDelayedTaskList>
    2b62:	90 91 2a 14 	lds	r25, 0x142A	; 0x80142a <pxDelayedTaskList+0x1>
    2b66:	20 91 27 14 	lds	r18, 0x1427	; 0x801427 <pxOverflowDelayedTaskList>
    2b6a:	30 91 28 14 	lds	r19, 0x1428	; 0x801428 <pxOverflowDelayedTaskList+0x1>
    2b6e:	30 93 2a 14 	sts	0x142A, r19	; 0x80142a <pxDelayedTaskList+0x1>
    2b72:	20 93 29 14 	sts	0x1429, r18	; 0x801429 <pxDelayedTaskList>
    2b76:	90 93 28 14 	sts	0x1428, r25	; 0x801428 <pxOverflowDelayedTaskList+0x1>
    2b7a:	80 93 27 14 	sts	0x1427, r24	; 0x801427 <pxOverflowDelayedTaskList>
    2b7e:	80 91 f8 13 	lds	r24, 0x13F8	; 0x8013f8 <xNumOfOverflows>
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	80 93 f8 13 	sts	0x13F8, r24	; 0x8013f8 <xNumOfOverflows>
    2b88:	16 dd       	rcall	.-1492   	; 0x25b6 <prvResetNextTaskUnblockTime>
    2b8a:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <xNextTaskUnblockTime>
    2b8e:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    2b92:	a0 91 f5 13 	lds	r26, 0x13F5	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    2b96:	b0 91 f6 13 	lds	r27, 0x13F6	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    2b9a:	c8 16       	cp	r12, r24
    2b9c:	d9 06       	cpc	r13, r25
    2b9e:	ea 06       	cpc	r14, r26
    2ba0:	fb 06       	cpc	r15, r27
    2ba2:	20 f4       	brcc	.+8      	; 0x2bac <xTaskIncrementTick+0x96>
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	b2 c0       	rjmp	.+356    	; 0x2d0c <xTaskIncrementTick+0x1f6>
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <xTaskIncrementTick+0x98>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	e0 91 29 14 	lds	r30, 0x1429	; 0x801429 <pxDelayedTaskList>
    2bb2:	f0 91 2a 14 	lds	r31, 0x142A	; 0x80142a <pxDelayedTaskList+0x1>
    2bb6:	90 81       	ld	r25, Z
    2bb8:	91 11       	cpse	r25, r1
    2bba:	0c c0       	rjmp	.+24     	; 0x2bd4 <xTaskIncrementTick+0xbe>
    2bbc:	4f ef       	ldi	r20, 0xFF	; 255
    2bbe:	5f ef       	ldi	r21, 0xFF	; 255
    2bc0:	ba 01       	movw	r22, r20
    2bc2:	40 93 f3 13 	sts	0x13F3, r20	; 0x8013f3 <xNextTaskUnblockTime>
    2bc6:	50 93 f4 13 	sts	0x13F4, r21	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    2bca:	60 93 f5 13 	sts	0x13F5, r22	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    2bce:	70 93 f6 13 	sts	0x13F6, r23	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    2bd2:	9c c0       	rjmp	.+312    	; 0x2d0c <xTaskIncrementTick+0x1f6>
    2bd4:	e0 91 29 14 	lds	r30, 0x1429	; 0x801429 <pxDelayedTaskList>
    2bd8:	f0 91 2a 14 	lds	r31, 0x142A	; 0x80142a <pxDelayedTaskList+0x1>
    2bdc:	07 80       	ldd	r0, Z+7	; 0x07
    2bde:	f0 85       	ldd	r31, Z+8	; 0x08
    2be0:	e0 2d       	mov	r30, r0
    2be2:	00 84       	ldd	r0, Z+8	; 0x08
    2be4:	f1 85       	ldd	r31, Z+9	; 0x09
    2be6:	e0 2d       	mov	r30, r0
    2be8:	42 81       	ldd	r20, Z+2	; 0x02
    2bea:	53 81       	ldd	r21, Z+3	; 0x03
    2bec:	64 81       	ldd	r22, Z+4	; 0x04
    2bee:	75 81       	ldd	r23, Z+5	; 0x05
    2bf0:	c4 16       	cp	r12, r20
    2bf2:	d5 06       	cpc	r13, r21
    2bf4:	e6 06       	cpc	r14, r22
    2bf6:	f7 06       	cpc	r15, r23
    2bf8:	48 f4       	brcc	.+18     	; 0x2c0c <xTaskIncrementTick+0xf6>
    2bfa:	40 93 f3 13 	sts	0x13F3, r20	; 0x8013f3 <xNextTaskUnblockTime>
    2bfe:	50 93 f4 13 	sts	0x13F4, r21	; 0x8013f4 <xNextTaskUnblockTime+0x1>
    2c02:	60 93 f5 13 	sts	0x13F5, r22	; 0x8013f5 <xNextTaskUnblockTime+0x2>
    2c06:	70 93 f6 13 	sts	0x13F6, r23	; 0x8013f6 <xNextTaskUnblockTime+0x3>
    2c0a:	80 c0       	rjmp	.+256    	; 0x2d0c <xTaskIncrementTick+0x1f6>
    2c0c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c0e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c10:	c6 81       	ldd	r28, Z+6	; 0x06
    2c12:	d7 81       	ldd	r29, Z+7	; 0x07
    2c14:	20 85       	ldd	r18, Z+8	; 0x08
    2c16:	31 85       	ldd	r19, Z+9	; 0x09
    2c18:	3f 83       	std	Y+7, r19	; 0x07
    2c1a:	2e 83       	std	Y+6, r18	; 0x06
    2c1c:	c0 85       	ldd	r28, Z+8	; 0x08
    2c1e:	d1 85       	ldd	r29, Z+9	; 0x09
    2c20:	26 81       	ldd	r18, Z+6	; 0x06
    2c22:	37 81       	ldd	r19, Z+7	; 0x07
    2c24:	3d 83       	std	Y+5, r19	; 0x05
    2c26:	2c 83       	std	Y+4, r18	; 0x04
    2c28:	11 96       	adiw	r26, 0x01	; 1
    2c2a:	4d 91       	ld	r20, X+
    2c2c:	5c 91       	ld	r21, X
    2c2e:	12 97       	sbiw	r26, 0x02	; 2
    2c30:	9f 01       	movw	r18, r30
    2c32:	2e 5f       	subi	r18, 0xFE	; 254
    2c34:	3f 4f       	sbci	r19, 0xFF	; 255
    2c36:	42 17       	cp	r20, r18
    2c38:	53 07       	cpc	r21, r19
    2c3a:	31 f4       	brne	.+12     	; 0x2c48 <xTaskIncrementTick+0x132>
    2c3c:	40 85       	ldd	r20, Z+8	; 0x08
    2c3e:	51 85       	ldd	r21, Z+9	; 0x09
    2c40:	12 96       	adiw	r26, 0x02	; 2
    2c42:	5c 93       	st	X, r21
    2c44:	4e 93       	st	-X, r20
    2c46:	11 97       	sbiw	r26, 0x01	; 1
    2c48:	15 86       	std	Z+13, r1	; 0x0d
    2c4a:	14 86       	std	Z+12, r1	; 0x0c
    2c4c:	9c 91       	ld	r25, X
    2c4e:	91 50       	subi	r25, 0x01	; 1
    2c50:	9c 93       	st	X, r25
    2c52:	a0 8d       	ldd	r26, Z+24	; 0x18
    2c54:	b1 8d       	ldd	r27, Z+25	; 0x19
    2c56:	10 97       	sbiw	r26, 0x00	; 0
    2c58:	09 f1       	breq	.+66     	; 0x2c9c <xTaskIncrementTick+0x186>
    2c5a:	c2 89       	ldd	r28, Z+18	; 0x12
    2c5c:	d3 89       	ldd	r29, Z+19	; 0x13
    2c5e:	44 89       	ldd	r20, Z+20	; 0x14
    2c60:	55 89       	ldd	r21, Z+21	; 0x15
    2c62:	5f 83       	std	Y+7, r21	; 0x07
    2c64:	4e 83       	std	Y+6, r20	; 0x06
    2c66:	c4 89       	ldd	r28, Z+20	; 0x14
    2c68:	d5 89       	ldd	r29, Z+21	; 0x15
    2c6a:	42 89       	ldd	r20, Z+18	; 0x12
    2c6c:	53 89       	ldd	r21, Z+19	; 0x13
    2c6e:	5d 83       	std	Y+5, r21	; 0x05
    2c70:	4c 83       	std	Y+4, r20	; 0x04
    2c72:	11 96       	adiw	r26, 0x01	; 1
    2c74:	6d 91       	ld	r22, X+
    2c76:	7c 91       	ld	r23, X
    2c78:	12 97       	sbiw	r26, 0x02	; 2
    2c7a:	af 01       	movw	r20, r30
    2c7c:	42 5f       	subi	r20, 0xF2	; 242
    2c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c80:	64 17       	cp	r22, r20
    2c82:	75 07       	cpc	r23, r21
    2c84:	31 f4       	brne	.+12     	; 0x2c92 <xTaskIncrementTick+0x17c>
    2c86:	44 89       	ldd	r20, Z+20	; 0x14
    2c88:	55 89       	ldd	r21, Z+21	; 0x15
    2c8a:	12 96       	adiw	r26, 0x02	; 2
    2c8c:	5c 93       	st	X, r21
    2c8e:	4e 93       	st	-X, r20
    2c90:	11 97       	sbiw	r26, 0x01	; 1
    2c92:	11 8e       	std	Z+25, r1	; 0x19
    2c94:	10 8e       	std	Z+24, r1	; 0x18
    2c96:	9c 91       	ld	r25, X
    2c98:	91 50       	subi	r25, 0x01	; 1
    2c9a:	9c 93       	st	X, r25
    2c9c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c9e:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    2ca2:	9a 17       	cp	r25, r26
    2ca4:	10 f4       	brcc	.+4      	; 0x2caa <xTaskIncrementTick+0x194>
    2ca6:	a0 93 ff 13 	sts	0x13FF, r26	; 0x8013ff <uxTopReadyPriority>
    2caa:	9b e0       	ldi	r25, 0x0B	; 11
    2cac:	9a 9f       	mul	r25, r26
    2cae:	d0 01       	movw	r26, r0
    2cb0:	11 24       	eor	r1, r1
    2cb2:	af 5b       	subi	r26, 0xBF	; 191
    2cb4:	bb 4e       	sbci	r27, 0xEB	; 235
    2cb6:	11 96       	adiw	r26, 0x01	; 1
    2cb8:	0d 90       	ld	r0, X+
    2cba:	bc 91       	ld	r27, X
    2cbc:	a0 2d       	mov	r26, r0
    2cbe:	b7 83       	std	Z+7, r27	; 0x07
    2cc0:	a6 83       	std	Z+6, r26	; 0x06
    2cc2:	16 96       	adiw	r26, 0x06	; 6
    2cc4:	4d 91       	ld	r20, X+
    2cc6:	5c 91       	ld	r21, X
    2cc8:	17 97       	sbiw	r26, 0x07	; 7
    2cca:	51 87       	std	Z+9, r21	; 0x09
    2ccc:	40 87       	std	Z+8, r20	; 0x08
    2cce:	16 96       	adiw	r26, 0x06	; 6
    2cd0:	cd 91       	ld	r28, X+
    2cd2:	dc 91       	ld	r29, X
    2cd4:	17 97       	sbiw	r26, 0x07	; 7
    2cd6:	3d 83       	std	Y+5, r19	; 0x05
    2cd8:	2c 83       	std	Y+4, r18	; 0x04
    2cda:	17 96       	adiw	r26, 0x07	; 7
    2cdc:	3c 93       	st	X, r19
    2cde:	2e 93       	st	-X, r18
    2ce0:	16 97       	sbiw	r26, 0x06	; 6
    2ce2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2ce4:	9a 9f       	mul	r25, r26
    2ce6:	d0 01       	movw	r26, r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	af 5b       	subi	r26, 0xBF	; 191
    2cec:	bb 4e       	sbci	r27, 0xEB	; 235
    2cee:	b5 87       	std	Z+13, r27	; 0x0d
    2cf0:	a4 87       	std	Z+12, r26	; 0x0c
    2cf2:	9c 91       	ld	r25, X
    2cf4:	9f 5f       	subi	r25, 0xFF	; 255
    2cf6:	9c 93       	st	X, r25
    2cf8:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cfa:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    2cfe:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2d02:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d04:	29 17       	cp	r18, r25
    2d06:	08 f0       	brcs	.+2      	; 0x2d0a <xTaskIncrementTick+0x1f4>
    2d08:	4f cf       	rjmp	.-354    	; 0x2ba8 <xTaskIncrementTick+0x92>
    2d0a:	51 cf       	rjmp	.-350    	; 0x2bae <xTaskIncrementTick+0x98>
    2d0c:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    2d10:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2d14:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d16:	9b e0       	ldi	r25, 0x0B	; 11
    2d18:	e9 9f       	mul	r30, r25
    2d1a:	f0 01       	movw	r30, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	ef 5b       	subi	r30, 0xBF	; 191
    2d20:	fb 4e       	sbci	r31, 0xEB	; 235
    2d22:	90 81       	ld	r25, Z
    2d24:	92 30       	cpi	r25, 0x02	; 2
    2d26:	08 f0       	brcs	.+2      	; 0x2d2a <xTaskIncrementTick+0x214>
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 91 f9 13 	lds	r25, 0x13F9	; 0x8013f9 <xYieldPending>
    2d2e:	91 11       	cpse	r25, r1
    2d30:	16 c0       	rjmp	.+44     	; 0x2d5e <xTaskIncrementTick+0x248>
    2d32:	16 c0       	rjmp	.+44     	; 0x2d60 <xTaskIncrementTick+0x24a>
    2d34:	80 91 fa 13 	lds	r24, 0x13FA	; 0x8013fa <xPendedTicks>
    2d38:	90 91 fb 13 	lds	r25, 0x13FB	; 0x8013fb <xPendedTicks+0x1>
    2d3c:	a0 91 fc 13 	lds	r26, 0x13FC	; 0x8013fc <xPendedTicks+0x2>
    2d40:	b0 91 fd 13 	lds	r27, 0x13FD	; 0x8013fd <xPendedTicks+0x3>
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	a1 1d       	adc	r26, r1
    2d48:	b1 1d       	adc	r27, r1
    2d4a:	80 93 fa 13 	sts	0x13FA, r24	; 0x8013fa <xPendedTicks>
    2d4e:	90 93 fb 13 	sts	0x13FB, r25	; 0x8013fb <xPendedTicks+0x1>
    2d52:	a0 93 fc 13 	sts	0x13FC, r26	; 0x8013fc <xPendedTicks+0x2>
    2d56:	b0 93 fd 13 	sts	0x13FD, r27	; 0x8013fd <xPendedTicks+0x3>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	01 c0       	rjmp	.+2      	; 0x2d60 <xTaskIncrementTick+0x24a>
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
    2d6c:	08 95       	ret

00002d6e <xTaskResumeAll>:
    2d6e:	cf 92       	push	r12
    2d70:	df 92       	push	r13
    2d72:	ef 92       	push	r14
    2d74:	ff 92       	push	r15
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	0f 92       	push	r0
    2d80:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    2d84:	81 50       	subi	r24, 0x01	; 1
    2d86:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <uxSchedulerSuspended>
    2d8a:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    2d8e:	81 11       	cpse	r24, r1
    2d90:	be c0       	rjmp	.+380    	; 0x2f0e <xTaskResumeAll+0x1a0>
    2d92:	80 91 04 14 	lds	r24, 0x1404	; 0x801404 <uxCurrentNumberOfTasks>
    2d96:	81 11       	cpse	r24, r1
    2d98:	88 c0       	rjmp	.+272    	; 0x2eaa <xTaskResumeAll+0x13c>
    2d9a:	bc c0       	rjmp	.+376    	; 0x2f14 <xTaskResumeAll+0x1a6>
    2d9c:	e0 91 23 14 	lds	r30, 0x1423	; 0x801423 <xPendingReadyList+0x7>
    2da0:	f0 91 24 14 	lds	r31, 0x1424	; 0x801424 <xPendingReadyList+0x8>
    2da4:	00 84       	ldd	r0, Z+8	; 0x08
    2da6:	f1 85       	ldd	r31, Z+9	; 0x09
    2da8:	e0 2d       	mov	r30, r0
    2daa:	a0 8d       	ldd	r26, Z+24	; 0x18
    2dac:	b1 8d       	ldd	r27, Z+25	; 0x19
    2dae:	c2 89       	ldd	r28, Z+18	; 0x12
    2db0:	d3 89       	ldd	r29, Z+19	; 0x13
    2db2:	84 89       	ldd	r24, Z+20	; 0x14
    2db4:	95 89       	ldd	r25, Z+21	; 0x15
    2db6:	9f 83       	std	Y+7, r25	; 0x07
    2db8:	8e 83       	std	Y+6, r24	; 0x06
    2dba:	c4 89       	ldd	r28, Z+20	; 0x14
    2dbc:	d5 89       	ldd	r29, Z+21	; 0x15
    2dbe:	82 89       	ldd	r24, Z+18	; 0x12
    2dc0:	93 89       	ldd	r25, Z+19	; 0x13
    2dc2:	9d 83       	std	Y+5, r25	; 0x05
    2dc4:	8c 83       	std	Y+4, r24	; 0x04
    2dc6:	11 96       	adiw	r26, 0x01	; 1
    2dc8:	2d 91       	ld	r18, X+
    2dca:	3c 91       	ld	r19, X
    2dcc:	12 97       	sbiw	r26, 0x02	; 2
    2dce:	cf 01       	movw	r24, r30
    2dd0:	0e 96       	adiw	r24, 0x0e	; 14
    2dd2:	28 17       	cp	r18, r24
    2dd4:	39 07       	cpc	r19, r25
    2dd6:	31 f4       	brne	.+12     	; 0x2de4 <xTaskResumeAll+0x76>
    2dd8:	84 89       	ldd	r24, Z+20	; 0x14
    2dda:	95 89       	ldd	r25, Z+21	; 0x15
    2ddc:	12 96       	adiw	r26, 0x02	; 2
    2dde:	9c 93       	st	X, r25
    2de0:	8e 93       	st	-X, r24
    2de2:	11 97       	sbiw	r26, 0x01	; 1
    2de4:	11 8e       	std	Z+25, r1	; 0x19
    2de6:	10 8e       	std	Z+24, r1	; 0x18
    2de8:	8c 91       	ld	r24, X
    2dea:	81 50       	subi	r24, 0x01	; 1
    2dec:	8c 93       	st	X, r24
    2dee:	a4 85       	ldd	r26, Z+12	; 0x0c
    2df0:	b5 85       	ldd	r27, Z+13	; 0x0d
    2df2:	c6 81       	ldd	r28, Z+6	; 0x06
    2df4:	d7 81       	ldd	r29, Z+7	; 0x07
    2df6:	80 85       	ldd	r24, Z+8	; 0x08
    2df8:	91 85       	ldd	r25, Z+9	; 0x09
    2dfa:	9f 83       	std	Y+7, r25	; 0x07
    2dfc:	8e 83       	std	Y+6, r24	; 0x06
    2dfe:	c0 85       	ldd	r28, Z+8	; 0x08
    2e00:	d1 85       	ldd	r29, Z+9	; 0x09
    2e02:	86 81       	ldd	r24, Z+6	; 0x06
    2e04:	97 81       	ldd	r25, Z+7	; 0x07
    2e06:	9d 83       	std	Y+5, r25	; 0x05
    2e08:	8c 83       	std	Y+4, r24	; 0x04
    2e0a:	11 96       	adiw	r26, 0x01	; 1
    2e0c:	8d 91       	ld	r24, X+
    2e0e:	9c 91       	ld	r25, X
    2e10:	12 97       	sbiw	r26, 0x02	; 2
    2e12:	9f 01       	movw	r18, r30
    2e14:	2e 5f       	subi	r18, 0xFE	; 254
    2e16:	3f 4f       	sbci	r19, 0xFF	; 255
    2e18:	82 17       	cp	r24, r18
    2e1a:	93 07       	cpc	r25, r19
    2e1c:	31 f4       	brne	.+12     	; 0x2e2a <xTaskResumeAll+0xbc>
    2e1e:	80 85       	ldd	r24, Z+8	; 0x08
    2e20:	91 85       	ldd	r25, Z+9	; 0x09
    2e22:	12 96       	adiw	r26, 0x02	; 2
    2e24:	9c 93       	st	X, r25
    2e26:	8e 93       	st	-X, r24
    2e28:	11 97       	sbiw	r26, 0x01	; 1
    2e2a:	15 86       	std	Z+13, r1	; 0x0d
    2e2c:	14 86       	std	Z+12, r1	; 0x0c
    2e2e:	8c 91       	ld	r24, X
    2e30:	81 50       	subi	r24, 0x01	; 1
    2e32:	8c 93       	st	X, r24
    2e34:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2e36:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    2e3a:	8a 17       	cp	r24, r26
    2e3c:	10 f4       	brcc	.+4      	; 0x2e42 <xTaskResumeAll+0xd4>
    2e3e:	a0 93 ff 13 	sts	0x13FF, r26	; 0x8013ff <uxTopReadyPriority>
    2e42:	8b e0       	ldi	r24, 0x0B	; 11
    2e44:	8a 9f       	mul	r24, r26
    2e46:	d0 01       	movw	r26, r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	af 5b       	subi	r26, 0xBF	; 191
    2e4c:	bb 4e       	sbci	r27, 0xEB	; 235
    2e4e:	11 96       	adiw	r26, 0x01	; 1
    2e50:	0d 90       	ld	r0, X+
    2e52:	bc 91       	ld	r27, X
    2e54:	a0 2d       	mov	r26, r0
    2e56:	b7 83       	std	Z+7, r27	; 0x07
    2e58:	a6 83       	std	Z+6, r26	; 0x06
    2e5a:	16 96       	adiw	r26, 0x06	; 6
    2e5c:	4d 91       	ld	r20, X+
    2e5e:	5c 91       	ld	r21, X
    2e60:	17 97       	sbiw	r26, 0x07	; 7
    2e62:	51 87       	std	Z+9, r21	; 0x09
    2e64:	40 87       	std	Z+8, r20	; 0x08
    2e66:	16 96       	adiw	r26, 0x06	; 6
    2e68:	cd 91       	ld	r28, X+
    2e6a:	dc 91       	ld	r29, X
    2e6c:	17 97       	sbiw	r26, 0x07	; 7
    2e6e:	3d 83       	std	Y+5, r19	; 0x05
    2e70:	2c 83       	std	Y+4, r18	; 0x04
    2e72:	17 96       	adiw	r26, 0x07	; 7
    2e74:	3c 93       	st	X, r19
    2e76:	2e 93       	st	-X, r18
    2e78:	16 97       	sbiw	r26, 0x06	; 6
    2e7a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2e7c:	8a 9f       	mul	r24, r26
    2e7e:	d0 01       	movw	r26, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	af 5b       	subi	r26, 0xBF	; 191
    2e84:	bb 4e       	sbci	r27, 0xEB	; 235
    2e86:	b5 87       	std	Z+13, r27	; 0x0d
    2e88:	a4 87       	std	Z+12, r26	; 0x0c
    2e8a:	8c 91       	ld	r24, X
    2e8c:	8f 5f       	subi	r24, 0xFF	; 255
    2e8e:	8c 93       	st	X, r24
    2e90:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e92:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    2e96:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    2e9a:	5a 96       	adiw	r26, 0x1a	; 26
    2e9c:	8c 91       	ld	r24, X
    2e9e:	98 17       	cp	r25, r24
    2ea0:	30 f0       	brcs	.+12     	; 0x2eae <xTaskResumeAll+0x140>
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <xYieldPending>
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <xTaskResumeAll+0x140>
    2eaa:	e0 e0       	ldi	r30, 0x00	; 0
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 91 1c 14 	lds	r24, 0x141C	; 0x80141c <xPendingReadyList>
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	73 cf       	rjmp	.-282    	; 0x2d9c <xTaskResumeAll+0x2e>
    2eb6:	ef 2b       	or	r30, r31
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <xTaskResumeAll+0x14e>
    2eba:	7d db       	rcall	.-2310   	; 0x25b6 <prvResetNextTaskUnblockTime>
    2ebc:	c0 90 fa 13 	lds	r12, 0x13FA	; 0x8013fa <xPendedTicks>
    2ec0:	d0 90 fb 13 	lds	r13, 0x13FB	; 0x8013fb <xPendedTicks+0x1>
    2ec4:	e0 90 fc 13 	lds	r14, 0x13FC	; 0x8013fc <xPendedTicks+0x2>
    2ec8:	f0 90 fd 13 	lds	r15, 0x13FD	; 0x8013fd <xPendedTicks+0x3>
    2ecc:	c1 14       	cp	r12, r1
    2ece:	d1 04       	cpc	r13, r1
    2ed0:	e1 04       	cpc	r14, r1
    2ed2:	f1 04       	cpc	r15, r1
    2ed4:	a1 f0       	breq	.+40     	; 0x2efe <xTaskResumeAll+0x190>
    2ed6:	1f de       	rcall	.-962    	; 0x2b16 <xTaskIncrementTick>
    2ed8:	88 23       	and	r24, r24
    2eda:	19 f0       	breq	.+6      	; 0x2ee2 <xTaskResumeAll+0x174>
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <xYieldPending>
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	c8 1a       	sub	r12, r24
    2ee6:	d1 08       	sbc	r13, r1
    2ee8:	e1 08       	sbc	r14, r1
    2eea:	f1 08       	sbc	r15, r1
    2eec:	a1 f7       	brne	.-24     	; 0x2ed6 <xTaskResumeAll+0x168>
    2eee:	10 92 fa 13 	sts	0x13FA, r1	; 0x8013fa <xPendedTicks>
    2ef2:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <xPendedTicks+0x1>
    2ef6:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <xPendedTicks+0x2>
    2efa:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <xPendedTicks+0x3>
    2efe:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <xYieldPending>
    2f02:	88 23       	and	r24, r24
    2f04:	31 f0       	breq	.+12     	; 0x2f12 <xTaskResumeAll+0x1a4>
    2f06:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <xTaskResumeAll+0x1a6>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <xTaskResumeAll+0x1a6>
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	0f 90       	pop	r0
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	ff 90       	pop	r15
    2f1e:	ef 90       	pop	r14
    2f20:	df 90       	pop	r13
    2f22:	cf 90       	pop	r12
    2f24:	08 95       	ret

00002f26 <xTaskDelayUntil>:
    2f26:	8f 92       	push	r8
    2f28:	9f 92       	push	r9
    2f2a:	af 92       	push	r10
    2f2c:	bf 92       	push	r11
    2f2e:	cf 92       	push	r12
    2f30:	df 92       	push	r13
    2f32:	ef 92       	push	r14
    2f34:	ff 92       	push	r15
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	ec 01       	movw	r28, r24
    2f3e:	6a 01       	movw	r12, r20
    2f40:	7b 01       	movw	r14, r22
    2f42:	d5 dd       	rcall	.-1110   	; 0x2aee <vTaskSuspendAll>
    2f44:	80 90 00 14 	lds	r8, 0x1400	; 0x801400 <xTickCount>
    2f48:	90 90 01 14 	lds	r9, 0x1401	; 0x801401 <xTickCount+0x1>
    2f4c:	a0 90 02 14 	lds	r10, 0x1402	; 0x801402 <xTickCount+0x2>
    2f50:	b0 90 03 14 	lds	r11, 0x1403	; 0x801403 <xTickCount+0x3>
    2f54:	88 81       	ld	r24, Y
    2f56:	99 81       	ldd	r25, Y+1	; 0x01
    2f58:	aa 81       	ldd	r26, Y+2	; 0x02
    2f5a:	bb 81       	ldd	r27, Y+3	; 0x03
    2f5c:	ac 01       	movw	r20, r24
    2f5e:	bd 01       	movw	r22, r26
    2f60:	4c 0d       	add	r20, r12
    2f62:	5d 1d       	adc	r21, r13
    2f64:	6e 1d       	adc	r22, r14
    2f66:	7f 1d       	adc	r23, r15
    2f68:	88 16       	cp	r8, r24
    2f6a:	99 06       	cpc	r9, r25
    2f6c:	aa 06       	cpc	r10, r26
    2f6e:	bb 06       	cpc	r11, r27
    2f70:	60 f4       	brcc	.+24     	; 0x2f8a <xTaskDelayUntil+0x64>
    2f72:	48 17       	cp	r20, r24
    2f74:	59 07       	cpc	r21, r25
    2f76:	6a 07       	cpc	r22, r26
    2f78:	7b 07       	cpc	r23, r27
    2f7a:	98 f4       	brcc	.+38     	; 0x2fa2 <xTaskDelayUntil+0x7c>
    2f7c:	84 16       	cp	r8, r20
    2f7e:	95 06       	cpc	r9, r21
    2f80:	a6 06       	cpc	r10, r22
    2f82:	b7 06       	cpc	r11, r23
    2f84:	80 f0       	brcs	.+32     	; 0x2fa6 <xTaskDelayUntil+0x80>
    2f86:	10 e0       	ldi	r17, 0x00	; 0
    2f88:	13 c0       	rjmp	.+38     	; 0x2fb0 <xTaskDelayUntil+0x8a>
    2f8a:	48 17       	cp	r20, r24
    2f8c:	59 07       	cpc	r21, r25
    2f8e:	6a 07       	cpc	r22, r26
    2f90:	7b 07       	cpc	r23, r27
    2f92:	58 f0       	brcs	.+22     	; 0x2faa <xTaskDelayUntil+0x84>
    2f94:	84 16       	cp	r8, r20
    2f96:	95 06       	cpc	r9, r21
    2f98:	a6 06       	cpc	r10, r22
    2f9a:	b7 06       	cpc	r11, r23
    2f9c:	40 f0       	brcs	.+16     	; 0x2fae <xTaskDelayUntil+0x88>
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
    2fa0:	07 c0       	rjmp	.+14     	; 0x2fb0 <xTaskDelayUntil+0x8a>
    2fa2:	10 e0       	ldi	r17, 0x00	; 0
    2fa4:	05 c0       	rjmp	.+10     	; 0x2fb0 <xTaskDelayUntil+0x8a>
    2fa6:	11 e0       	ldi	r17, 0x01	; 1
    2fa8:	03 c0       	rjmp	.+6      	; 0x2fb0 <xTaskDelayUntil+0x8a>
    2faa:	11 e0       	ldi	r17, 0x01	; 1
    2fac:	01 c0       	rjmp	.+2      	; 0x2fb0 <xTaskDelayUntil+0x8a>
    2fae:	11 e0       	ldi	r17, 0x01	; 1
    2fb0:	48 83       	st	Y, r20
    2fb2:	59 83       	std	Y+1, r21	; 0x01
    2fb4:	6a 83       	std	Y+2, r22	; 0x02
    2fb6:	7b 83       	std	Y+3, r23	; 0x03
    2fb8:	11 23       	and	r17, r17
    2fba:	41 f0       	breq	.+16     	; 0x2fcc <xTaskDelayUntil+0xa6>
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	ba 01       	movw	r22, r20
    2fc0:	68 19       	sub	r22, r8
    2fc2:	79 09       	sbc	r23, r9
    2fc4:	8a 09       	sbc	r24, r10
    2fc6:	9b 09       	sbc	r25, r11
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	6b dc       	rcall	.-1834   	; 0x28a2 <prvAddCurrentTaskToDelayedList>
    2fcc:	d0 de       	rcall	.-608    	; 0x2d6e <xTaskResumeAll>
    2fce:	81 11       	cpse	r24, r1
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <xTaskDelayUntil+0xb0>
    2fd2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    2fd6:	81 2f       	mov	r24, r17
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	bf 90       	pop	r11
    2fe8:	af 90       	pop	r10
    2fea:	9f 90       	pop	r9
    2fec:	8f 90       	pop	r8
    2fee:	08 95       	ret

00002ff0 <vTaskDelay>:
    2ff0:	cf 92       	push	r12
    2ff2:	df 92       	push	r13
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	6b 01       	movw	r12, r22
    2ffa:	7c 01       	movw	r14, r24
    2ffc:	67 2b       	or	r22, r23
    2ffe:	68 2b       	or	r22, r24
    3000:	69 2b       	or	r22, r25
    3002:	39 f0       	breq	.+14     	; 0x3012 <vTaskDelay+0x22>
    3004:	74 dd       	rcall	.-1304   	; 0x2aee <vTaskSuspendAll>
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	c7 01       	movw	r24, r14
    300a:	b6 01       	movw	r22, r12
    300c:	4a dc       	rcall	.-1900   	; 0x28a2 <prvAddCurrentTaskToDelayedList>
    300e:	af de       	rcall	.-674    	; 0x2d6e <xTaskResumeAll>
    3010:	01 c0       	rjmp	.+2      	; 0x3014 <vTaskDelay+0x24>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	81 11       	cpse	r24, r1
    3016:	02 c0       	rjmp	.+4      	; 0x301c <vTaskDelay+0x2c>
    3018:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
    3024:	08 95       	ret

00003026 <vTaskSwitchContext>:
    3026:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    302a:	88 23       	and	r24, r24
    302c:	21 f0       	breq	.+8      	; 0x3036 <vTaskSwitchContext+0x10>
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <xYieldPending>
    3034:	08 95       	ret
    3036:	10 92 f9 13 	sts	0x13F9, r1	; 0x8013f9 <xYieldPending>
    303a:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    303e:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3042:	20 81       	ld	r18, Z
    3044:	31 81       	ldd	r19, Z+1	; 0x01
    3046:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    304a:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    304e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3050:	94 8d       	ldd	r25, Z+28	; 0x1c
    3052:	82 17       	cp	r24, r18
    3054:	93 07       	cpc	r25, r19
    3056:	60 f0       	brcs	.+24     	; 0x3070 <vTaskSwitchContext+0x4a>
    3058:	60 91 af 14 	lds	r22, 0x14AF	; 0x8014af <pxCurrentTCB>
    305c:	70 91 b0 14 	lds	r23, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3060:	63 5e       	subi	r22, 0xE3	; 227
    3062:	7f 4f       	sbci	r23, 0xFF	; 255
    3064:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    3068:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    306c:	0e 94 80 22 	call	0x4500	; 0x4500 <vApplicationStackOverflowHook>
    3070:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    3074:	01 c0       	rjmp	.+2      	; 0x3078 <vTaskSwitchContext+0x52>
    3076:	81 50       	subi	r24, 0x01	; 1
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	9b e0       	ldi	r25, 0x0B	; 11
    307e:	92 9f       	mul	r25, r18
    3080:	f0 01       	movw	r30, r0
    3082:	93 9f       	mul	r25, r19
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	ef 5b       	subi	r30, 0xBF	; 191
    308a:	fb 4e       	sbci	r31, 0xEB	; 235
    308c:	90 81       	ld	r25, Z
    308e:	99 23       	and	r25, r25
    3090:	91 f3       	breq	.-28     	; 0x3076 <vTaskSwitchContext+0x50>
    3092:	9b e0       	ldi	r25, 0x0B	; 11
    3094:	92 9f       	mul	r25, r18
    3096:	a0 01       	movw	r20, r0
    3098:	93 9f       	mul	r25, r19
    309a:	50 0d       	add	r21, r0
    309c:	11 24       	eor	r1, r1
    309e:	df 01       	movw	r26, r30
    30a0:	01 80       	ldd	r0, Z+1	; 0x01
    30a2:	f2 81       	ldd	r31, Z+2	; 0x02
    30a4:	e0 2d       	mov	r30, r0
    30a6:	04 80       	ldd	r0, Z+4	; 0x04
    30a8:	f5 81       	ldd	r31, Z+5	; 0x05
    30aa:	e0 2d       	mov	r30, r0
    30ac:	12 96       	adiw	r26, 0x02	; 2
    30ae:	fc 93       	st	X, r31
    30b0:	ee 93       	st	-X, r30
    30b2:	11 97       	sbiw	r26, 0x01	; 1
    30b4:	4c 5b       	subi	r20, 0xBC	; 188
    30b6:	5b 4e       	sbci	r21, 0xEB	; 235
    30b8:	e4 17       	cp	r30, r20
    30ba:	f5 07       	cpc	r31, r21
    30bc:	29 f4       	brne	.+10     	; 0x30c8 <vTaskSwitchContext+0xa2>
    30be:	44 81       	ldd	r20, Z+4	; 0x04
    30c0:	55 81       	ldd	r21, Z+5	; 0x05
    30c2:	fd 01       	movw	r30, r26
    30c4:	52 83       	std	Z+2, r21	; 0x02
    30c6:	41 83       	std	Z+1, r20	; 0x01
    30c8:	9b e0       	ldi	r25, 0x0B	; 11
    30ca:	92 9f       	mul	r25, r18
    30cc:	f0 01       	movw	r30, r0
    30ce:	93 9f       	mul	r25, r19
    30d0:	f0 0d       	add	r31, r0
    30d2:	11 24       	eor	r1, r1
    30d4:	ef 5b       	subi	r30, 0xBF	; 191
    30d6:	fb 4e       	sbci	r31, 0xEB	; 235
    30d8:	01 80       	ldd	r0, Z+1	; 0x01
    30da:	f2 81       	ldd	r31, Z+2	; 0x02
    30dc:	e0 2d       	mov	r30, r0
    30de:	20 85       	ldd	r18, Z+8	; 0x08
    30e0:	31 85       	ldd	r19, Z+9	; 0x09
    30e2:	30 93 b0 14 	sts	0x14B0, r19	; 0x8014b0 <pxCurrentTCB+0x1>
    30e6:	20 93 af 14 	sts	0x14AF, r18	; 0x8014af <pxCurrentTCB>
    30ea:	80 93 ff 13 	sts	0x13FF, r24	; 0x8013ff <uxTopReadyPriority>
    30ee:	08 95       	ret

000030f0 <vTaskPlaceOnEventList>:
    30f0:	cf 92       	push	r12
    30f2:	df 92       	push	r13
    30f4:	ef 92       	push	r14
    30f6:	ff 92       	push	r15
    30f8:	6a 01       	movw	r12, r20
    30fa:	7b 01       	movw	r14, r22
    30fc:	60 91 af 14 	lds	r22, 0x14AF	; 0x8014af <pxCurrentTCB>
    3100:	70 91 b0 14 	lds	r23, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3104:	62 5f       	subi	r22, 0xF2	; 242
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	0e 94 92 0a 	call	0x1524	; 0x1524 <vListInsert>
    310c:	41 e0       	ldi	r20, 0x01	; 1
    310e:	c7 01       	movw	r24, r14
    3110:	b6 01       	movw	r22, r12
    3112:	c7 db       	rcall	.-2162   	; 0x28a2 <prvAddCurrentTaskToDelayedList>
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
    311c:	08 95       	ret

0000311e <vTaskPlaceOnUnorderedEventList>:
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	fc 01       	movw	r30, r24
    3128:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    312c:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3130:	70 68       	ori	r23, 0x80	; 128
    3132:	1e 96       	adiw	r26, 0x0e	; 14
    3134:	4d 93       	st	X+, r20
    3136:	5d 93       	st	X+, r21
    3138:	6d 93       	st	X+, r22
    313a:	7c 93       	st	X, r23
    313c:	51 97       	sbiw	r26, 0x11	; 17
    313e:	a1 81       	ldd	r26, Z+1	; 0x01
    3140:	b2 81       	ldd	r27, Z+2	; 0x02
    3142:	c0 91 af 14 	lds	r28, 0x14AF	; 0x8014af <pxCurrentTCB>
    3146:	d0 91 b0 14 	lds	r29, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    314a:	bb 8b       	std	Y+19, r27	; 0x13
    314c:	aa 8b       	std	Y+18, r26	; 0x12
    314e:	c0 91 af 14 	lds	r28, 0x14AF	; 0x8014af <pxCurrentTCB>
    3152:	d0 91 b0 14 	lds	r29, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3156:	16 96       	adiw	r26, 0x06	; 6
    3158:	8d 91       	ld	r24, X+
    315a:	9c 91       	ld	r25, X
    315c:	17 97       	sbiw	r26, 0x07	; 7
    315e:	9d 8b       	std	Y+21, r25	; 0x15
    3160:	8c 8b       	std	Y+20, r24	; 0x14
    3162:	16 96       	adiw	r26, 0x06	; 6
    3164:	cd 91       	ld	r28, X+
    3166:	dc 91       	ld	r29, X
    3168:	17 97       	sbiw	r26, 0x07	; 7
    316a:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    316e:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3172:	0e 96       	adiw	r24, 0x0e	; 14
    3174:	9d 83       	std	Y+5, r25	; 0x05
    3176:	8c 83       	std	Y+4, r24	; 0x04
    3178:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    317c:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3180:	0e 96       	adiw	r24, 0x0e	; 14
    3182:	17 96       	adiw	r26, 0x07	; 7
    3184:	9c 93       	st	X, r25
    3186:	8e 93       	st	-X, r24
    3188:	16 97       	sbiw	r26, 0x06	; 6
    318a:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    318e:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3192:	59 96       	adiw	r26, 0x19	; 25
    3194:	fc 93       	st	X, r31
    3196:	ee 93       	st	-X, r30
    3198:	58 97       	sbiw	r26, 0x18	; 24
    319a:	80 81       	ld	r24, Z
    319c:	8f 5f       	subi	r24, 0xFF	; 255
    319e:	80 83       	st	Z, r24
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	c9 01       	movw	r24, r18
    31a4:	b8 01       	movw	r22, r16
    31a6:	7d db       	rcall	.-2310   	; 0x28a2 <prvAddCurrentTaskToDelayedList>
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	1f 91       	pop	r17
    31ae:	0f 91       	pop	r16
    31b0:	08 95       	ret

000031b2 <vTaskPlaceOnEventListRestricted>:
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	fc 01       	movw	r30, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	ba 01       	movw	r22, r20
    31bc:	a1 81       	ldd	r26, Z+1	; 0x01
    31be:	b2 81       	ldd	r27, Z+2	; 0x02
    31c0:	c0 91 af 14 	lds	r28, 0x14AF	; 0x8014af <pxCurrentTCB>
    31c4:	d0 91 b0 14 	lds	r29, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    31c8:	bb 8b       	std	Y+19, r27	; 0x13
    31ca:	aa 8b       	std	Y+18, r26	; 0x12
    31cc:	c0 91 af 14 	lds	r28, 0x14AF	; 0x8014af <pxCurrentTCB>
    31d0:	d0 91 b0 14 	lds	r29, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    31d4:	16 96       	adiw	r26, 0x06	; 6
    31d6:	4d 91       	ld	r20, X+
    31d8:	5c 91       	ld	r21, X
    31da:	17 97       	sbiw	r26, 0x07	; 7
    31dc:	5d 8b       	std	Y+21, r21	; 0x15
    31de:	4c 8b       	std	Y+20, r20	; 0x14
    31e0:	16 96       	adiw	r26, 0x06	; 6
    31e2:	cd 91       	ld	r28, X+
    31e4:	dc 91       	ld	r29, X
    31e6:	17 97       	sbiw	r26, 0x07	; 7
    31e8:	40 91 af 14 	lds	r20, 0x14AF	; 0x8014af <pxCurrentTCB>
    31ec:	50 91 b0 14 	lds	r21, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    31f0:	42 5f       	subi	r20, 0xF2	; 242
    31f2:	5f 4f       	sbci	r21, 0xFF	; 255
    31f4:	5d 83       	std	Y+5, r21	; 0x05
    31f6:	4c 83       	std	Y+4, r20	; 0x04
    31f8:	40 91 af 14 	lds	r20, 0x14AF	; 0x8014af <pxCurrentTCB>
    31fc:	50 91 b0 14 	lds	r21, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3200:	42 5f       	subi	r20, 0xF2	; 242
    3202:	5f 4f       	sbci	r21, 0xFF	; 255
    3204:	17 96       	adiw	r26, 0x07	; 7
    3206:	5c 93       	st	X, r21
    3208:	4e 93       	st	-X, r20
    320a:	16 97       	sbiw	r26, 0x06	; 6
    320c:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    3210:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3214:	59 96       	adiw	r26, 0x19	; 25
    3216:	fc 93       	st	X, r31
    3218:	ee 93       	st	-X, r30
    321a:	58 97       	sbiw	r26, 0x18	; 24
    321c:	30 81       	ld	r19, Z
    321e:	3f 5f       	subi	r19, 0xFF	; 255
    3220:	30 83       	st	Z, r19
    3222:	22 23       	and	r18, r18
    3224:	19 f0       	breq	.+6      	; 0x322c <vTaskPlaceOnEventListRestricted+0x7a>
    3226:	6f ef       	ldi	r22, 0xFF	; 255
    3228:	7f ef       	ldi	r23, 0xFF	; 255
    322a:	cb 01       	movw	r24, r22
    322c:	42 2f       	mov	r20, r18
    322e:	39 db       	rcall	.-2446   	; 0x28a2 <prvAddCurrentTaskToDelayedList>
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	08 95       	ret

00003236 <xTaskRemoveFromEventList>:
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	dc 01       	movw	r26, r24
    323c:	17 96       	adiw	r26, 0x07	; 7
    323e:	ed 91       	ld	r30, X+
    3240:	fc 91       	ld	r31, X
    3242:	18 97       	sbiw	r26, 0x08	; 8
    3244:	00 84       	ldd	r0, Z+8	; 0x08
    3246:	f1 85       	ldd	r31, Z+9	; 0x09
    3248:	e0 2d       	mov	r30, r0
    324a:	a0 8d       	ldd	r26, Z+24	; 0x18
    324c:	b1 8d       	ldd	r27, Z+25	; 0x19
    324e:	c2 89       	ldd	r28, Z+18	; 0x12
    3250:	d3 89       	ldd	r29, Z+19	; 0x13
    3252:	84 89       	ldd	r24, Z+20	; 0x14
    3254:	95 89       	ldd	r25, Z+21	; 0x15
    3256:	9f 83       	std	Y+7, r25	; 0x07
    3258:	8e 83       	std	Y+6, r24	; 0x06
    325a:	c4 89       	ldd	r28, Z+20	; 0x14
    325c:	d5 89       	ldd	r29, Z+21	; 0x15
    325e:	82 89       	ldd	r24, Z+18	; 0x12
    3260:	93 89       	ldd	r25, Z+19	; 0x13
    3262:	9d 83       	std	Y+5, r25	; 0x05
    3264:	8c 83       	std	Y+4, r24	; 0x04
    3266:	11 96       	adiw	r26, 0x01	; 1
    3268:	8d 91       	ld	r24, X+
    326a:	9c 91       	ld	r25, X
    326c:	12 97       	sbiw	r26, 0x02	; 2
    326e:	9f 01       	movw	r18, r30
    3270:	22 5f       	subi	r18, 0xF2	; 242
    3272:	3f 4f       	sbci	r19, 0xFF	; 255
    3274:	82 17       	cp	r24, r18
    3276:	93 07       	cpc	r25, r19
    3278:	31 f4       	brne	.+12     	; 0x3286 <xTaskRemoveFromEventList+0x50>
    327a:	84 89       	ldd	r24, Z+20	; 0x14
    327c:	95 89       	ldd	r25, Z+21	; 0x15
    327e:	12 96       	adiw	r26, 0x02	; 2
    3280:	9c 93       	st	X, r25
    3282:	8e 93       	st	-X, r24
    3284:	11 97       	sbiw	r26, 0x01	; 1
    3286:	11 8e       	std	Z+25, r1	; 0x19
    3288:	10 8e       	std	Z+24, r1	; 0x18
    328a:	8c 91       	ld	r24, X
    328c:	81 50       	subi	r24, 0x01	; 1
    328e:	8c 93       	st	X, r24
    3290:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    3294:	81 11       	cpse	r24, r1
    3296:	52 c0       	rjmp	.+164    	; 0x333c <xTaskRemoveFromEventList+0x106>
    3298:	a4 85       	ldd	r26, Z+12	; 0x0c
    329a:	b5 85       	ldd	r27, Z+13	; 0x0d
    329c:	c6 81       	ldd	r28, Z+6	; 0x06
    329e:	d7 81       	ldd	r29, Z+7	; 0x07
    32a0:	80 85       	ldd	r24, Z+8	; 0x08
    32a2:	91 85       	ldd	r25, Z+9	; 0x09
    32a4:	9f 83       	std	Y+7, r25	; 0x07
    32a6:	8e 83       	std	Y+6, r24	; 0x06
    32a8:	c0 85       	ldd	r28, Z+8	; 0x08
    32aa:	d1 85       	ldd	r29, Z+9	; 0x09
    32ac:	86 81       	ldd	r24, Z+6	; 0x06
    32ae:	97 81       	ldd	r25, Z+7	; 0x07
    32b0:	9d 83       	std	Y+5, r25	; 0x05
    32b2:	8c 83       	std	Y+4, r24	; 0x04
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	8d 91       	ld	r24, X+
    32b8:	9c 91       	ld	r25, X
    32ba:	12 97       	sbiw	r26, 0x02	; 2
    32bc:	9f 01       	movw	r18, r30
    32be:	2e 5f       	subi	r18, 0xFE	; 254
    32c0:	3f 4f       	sbci	r19, 0xFF	; 255
    32c2:	82 17       	cp	r24, r18
    32c4:	93 07       	cpc	r25, r19
    32c6:	31 f4       	brne	.+12     	; 0x32d4 <xTaskRemoveFromEventList+0x9e>
    32c8:	80 85       	ldd	r24, Z+8	; 0x08
    32ca:	91 85       	ldd	r25, Z+9	; 0x09
    32cc:	12 96       	adiw	r26, 0x02	; 2
    32ce:	9c 93       	st	X, r25
    32d0:	8e 93       	st	-X, r24
    32d2:	11 97       	sbiw	r26, 0x01	; 1
    32d4:	15 86       	std	Z+13, r1	; 0x0d
    32d6:	14 86       	std	Z+12, r1	; 0x0c
    32d8:	8c 91       	ld	r24, X
    32da:	81 50       	subi	r24, 0x01	; 1
    32dc:	8c 93       	st	X, r24
    32de:	a2 8d       	ldd	r26, Z+26	; 0x1a
    32e0:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    32e4:	8a 17       	cp	r24, r26
    32e6:	10 f4       	brcc	.+4      	; 0x32ec <xTaskRemoveFromEventList+0xb6>
    32e8:	a0 93 ff 13 	sts	0x13FF, r26	; 0x8013ff <uxTopReadyPriority>
    32ec:	8b e0       	ldi	r24, 0x0B	; 11
    32ee:	8a 9f       	mul	r24, r26
    32f0:	d0 01       	movw	r26, r0
    32f2:	11 24       	eor	r1, r1
    32f4:	af 5b       	subi	r26, 0xBF	; 191
    32f6:	bb 4e       	sbci	r27, 0xEB	; 235
    32f8:	11 96       	adiw	r26, 0x01	; 1
    32fa:	0d 90       	ld	r0, X+
    32fc:	bc 91       	ld	r27, X
    32fe:	a0 2d       	mov	r26, r0
    3300:	b7 83       	std	Z+7, r27	; 0x07
    3302:	a6 83       	std	Z+6, r26	; 0x06
    3304:	16 96       	adiw	r26, 0x06	; 6
    3306:	4d 91       	ld	r20, X+
    3308:	5c 91       	ld	r21, X
    330a:	17 97       	sbiw	r26, 0x07	; 7
    330c:	51 87       	std	Z+9, r21	; 0x09
    330e:	40 87       	std	Z+8, r20	; 0x08
    3310:	16 96       	adiw	r26, 0x06	; 6
    3312:	cd 91       	ld	r28, X+
    3314:	dc 91       	ld	r29, X
    3316:	17 97       	sbiw	r26, 0x07	; 7
    3318:	3d 83       	std	Y+5, r19	; 0x05
    331a:	2c 83       	std	Y+4, r18	; 0x04
    331c:	17 96       	adiw	r26, 0x07	; 7
    331e:	3c 93       	st	X, r19
    3320:	2e 93       	st	-X, r18
    3322:	16 97       	sbiw	r26, 0x06	; 6
    3324:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3326:	8a 9f       	mul	r24, r26
    3328:	d0 01       	movw	r26, r0
    332a:	11 24       	eor	r1, r1
    332c:	af 5b       	subi	r26, 0xBF	; 191
    332e:	bb 4e       	sbci	r27, 0xEB	; 235
    3330:	b5 87       	std	Z+13, r27	; 0x0d
    3332:	a4 87       	std	Z+12, r26	; 0x0c
    3334:	8c 91       	ld	r24, X
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	8c 93       	st	X, r24
    333a:	1c c0       	rjmp	.+56     	; 0x3374 <xTaskRemoveFromEventList+0x13e>
    333c:	4c e1       	ldi	r20, 0x1C	; 28
    333e:	54 e1       	ldi	r21, 0x14	; 20
    3340:	da 01       	movw	r26, r20
    3342:	11 96       	adiw	r26, 0x01	; 1
    3344:	cd 91       	ld	r28, X+
    3346:	dc 91       	ld	r29, X
    3348:	12 97       	sbiw	r26, 0x02	; 2
    334a:	d3 8b       	std	Z+19, r29	; 0x13
    334c:	c2 8b       	std	Z+18, r28	; 0x12
    334e:	8e 81       	ldd	r24, Y+6	; 0x06
    3350:	9f 81       	ldd	r25, Y+7	; 0x07
    3352:	95 8b       	std	Z+21, r25	; 0x15
    3354:	84 8b       	std	Z+20, r24	; 0x14
    3356:	8e 81       	ldd	r24, Y+6	; 0x06
    3358:	9f 81       	ldd	r25, Y+7	; 0x07
    335a:	dc 01       	movw	r26, r24
    335c:	15 96       	adiw	r26, 0x05	; 5
    335e:	3c 93       	st	X, r19
    3360:	2e 93       	st	-X, r18
    3362:	14 97       	sbiw	r26, 0x04	; 4
    3364:	3f 83       	std	Y+7, r19	; 0x07
    3366:	2e 83       	std	Y+6, r18	; 0x06
    3368:	51 8f       	std	Z+25, r21	; 0x19
    336a:	40 8f       	std	Z+24, r20	; 0x18
    336c:	da 01       	movw	r26, r20
    336e:	8c 91       	ld	r24, X
    3370:	8f 5f       	subi	r24, 0xFF	; 255
    3372:	8c 93       	st	X, r24
    3374:	92 8d       	ldd	r25, Z+26	; 0x1a
    3376:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    337a:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    337e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3380:	89 17       	cp	r24, r25
    3382:	20 f4       	brcc	.+8      	; 0x338c <xTaskRemoveFromEventList+0x156>
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <xYieldPending>
    338a:	01 c0       	rjmp	.+2      	; 0x338e <xTaskRemoveFromEventList+0x158>
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	08 95       	ret

00003394 <vTaskRemoveFromUnorderedEventList>:
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	dc 01       	movw	r26, r24
    339a:	70 68       	ori	r23, 0x80	; 128
    339c:	4d 93       	st	X+, r20
    339e:	5d 93       	st	X+, r21
    33a0:	6d 93       	st	X+, r22
    33a2:	7c 93       	st	X, r23
    33a4:	13 97       	sbiw	r26, 0x03	; 3
    33a6:	18 96       	adiw	r26, 0x08	; 8
    33a8:	ed 91       	ld	r30, X+
    33aa:	fc 91       	ld	r31, X
    33ac:	19 97       	sbiw	r26, 0x09	; 9
    33ae:	1a 96       	adiw	r26, 0x0a	; 10
    33b0:	4d 91       	ld	r20, X+
    33b2:	5c 91       	ld	r21, X
    33b4:	1b 97       	sbiw	r26, 0x0b	; 11
    33b6:	14 96       	adiw	r26, 0x04	; 4
    33b8:	8d 91       	ld	r24, X+
    33ba:	9c 91       	ld	r25, X
    33bc:	15 97       	sbiw	r26, 0x05	; 5
    33be:	16 96       	adiw	r26, 0x06	; 6
    33c0:	2d 91       	ld	r18, X+
    33c2:	3c 91       	ld	r19, X
    33c4:	17 97       	sbiw	r26, 0x07	; 7
    33c6:	ec 01       	movw	r28, r24
    33c8:	3f 83       	std	Y+7, r19	; 0x07
    33ca:	2e 83       	std	Y+6, r18	; 0x06
    33cc:	16 96       	adiw	r26, 0x06	; 6
    33ce:	8d 91       	ld	r24, X+
    33d0:	9c 91       	ld	r25, X
    33d2:	17 97       	sbiw	r26, 0x07	; 7
    33d4:	14 96       	adiw	r26, 0x04	; 4
    33d6:	2d 91       	ld	r18, X+
    33d8:	3c 91       	ld	r19, X
    33da:	15 97       	sbiw	r26, 0x05	; 5
    33dc:	ec 01       	movw	r28, r24
    33de:	3d 83       	std	Y+5, r19	; 0x05
    33e0:	2c 83       	std	Y+4, r18	; 0x04
    33e2:	ea 01       	movw	r28, r20
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	9a 81       	ldd	r25, Y+2	; 0x02
    33e8:	a8 17       	cp	r26, r24
    33ea:	b9 07       	cpc	r27, r25
    33ec:	31 f4       	brne	.+12     	; 0x33fa <vTaskRemoveFromUnorderedEventList+0x66>
    33ee:	16 96       	adiw	r26, 0x06	; 6
    33f0:	8d 91       	ld	r24, X+
    33f2:	9c 91       	ld	r25, X
    33f4:	17 97       	sbiw	r26, 0x07	; 7
    33f6:	9a 83       	std	Y+2, r25	; 0x02
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	1b 96       	adiw	r26, 0x0b	; 11
    33fc:	1c 92       	st	X, r1
    33fe:	1e 92       	st	-X, r1
    3400:	1a 97       	sbiw	r26, 0x0a	; 10
    3402:	da 01       	movw	r26, r20
    3404:	8c 91       	ld	r24, X
    3406:	81 50       	subi	r24, 0x01	; 1
    3408:	8c 93       	st	X, r24
    340a:	a4 85       	ldd	r26, Z+12	; 0x0c
    340c:	b5 85       	ldd	r27, Z+13	; 0x0d
    340e:	c6 81       	ldd	r28, Z+6	; 0x06
    3410:	d7 81       	ldd	r29, Z+7	; 0x07
    3412:	80 85       	ldd	r24, Z+8	; 0x08
    3414:	91 85       	ldd	r25, Z+9	; 0x09
    3416:	9f 83       	std	Y+7, r25	; 0x07
    3418:	8e 83       	std	Y+6, r24	; 0x06
    341a:	c0 85       	ldd	r28, Z+8	; 0x08
    341c:	d1 85       	ldd	r29, Z+9	; 0x09
    341e:	86 81       	ldd	r24, Z+6	; 0x06
    3420:	97 81       	ldd	r25, Z+7	; 0x07
    3422:	9d 83       	std	Y+5, r25	; 0x05
    3424:	8c 83       	std	Y+4, r24	; 0x04
    3426:	11 96       	adiw	r26, 0x01	; 1
    3428:	8d 91       	ld	r24, X+
    342a:	9c 91       	ld	r25, X
    342c:	12 97       	sbiw	r26, 0x02	; 2
    342e:	9f 01       	movw	r18, r30
    3430:	2e 5f       	subi	r18, 0xFE	; 254
    3432:	3f 4f       	sbci	r19, 0xFF	; 255
    3434:	82 17       	cp	r24, r18
    3436:	93 07       	cpc	r25, r19
    3438:	31 f4       	brne	.+12     	; 0x3446 <vTaskRemoveFromUnorderedEventList+0xb2>
    343a:	80 85       	ldd	r24, Z+8	; 0x08
    343c:	91 85       	ldd	r25, Z+9	; 0x09
    343e:	12 96       	adiw	r26, 0x02	; 2
    3440:	9c 93       	st	X, r25
    3442:	8e 93       	st	-X, r24
    3444:	11 97       	sbiw	r26, 0x01	; 1
    3446:	15 86       	std	Z+13, r1	; 0x0d
    3448:	14 86       	std	Z+12, r1	; 0x0c
    344a:	8c 91       	ld	r24, X
    344c:	81 50       	subi	r24, 0x01	; 1
    344e:	8c 93       	st	X, r24
    3450:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3452:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    3456:	8a 17       	cp	r24, r26
    3458:	10 f4       	brcc	.+4      	; 0x345e <vTaskRemoveFromUnorderedEventList+0xca>
    345a:	a0 93 ff 13 	sts	0x13FF, r26	; 0x8013ff <uxTopReadyPriority>
    345e:	8b e0       	ldi	r24, 0x0B	; 11
    3460:	8a 9f       	mul	r24, r26
    3462:	d0 01       	movw	r26, r0
    3464:	11 24       	eor	r1, r1
    3466:	af 5b       	subi	r26, 0xBF	; 191
    3468:	bb 4e       	sbci	r27, 0xEB	; 235
    346a:	11 96       	adiw	r26, 0x01	; 1
    346c:	0d 90       	ld	r0, X+
    346e:	bc 91       	ld	r27, X
    3470:	a0 2d       	mov	r26, r0
    3472:	b7 83       	std	Z+7, r27	; 0x07
    3474:	a6 83       	std	Z+6, r26	; 0x06
    3476:	16 96       	adiw	r26, 0x06	; 6
    3478:	4d 91       	ld	r20, X+
    347a:	5c 91       	ld	r21, X
    347c:	17 97       	sbiw	r26, 0x07	; 7
    347e:	51 87       	std	Z+9, r21	; 0x09
    3480:	40 87       	std	Z+8, r20	; 0x08
    3482:	16 96       	adiw	r26, 0x06	; 6
    3484:	cd 91       	ld	r28, X+
    3486:	dc 91       	ld	r29, X
    3488:	17 97       	sbiw	r26, 0x07	; 7
    348a:	3d 83       	std	Y+5, r19	; 0x05
    348c:	2c 83       	std	Y+4, r18	; 0x04
    348e:	17 96       	adiw	r26, 0x07	; 7
    3490:	3c 93       	st	X, r19
    3492:	2e 93       	st	-X, r18
    3494:	16 97       	sbiw	r26, 0x06	; 6
    3496:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3498:	8a 9f       	mul	r24, r26
    349a:	d0 01       	movw	r26, r0
    349c:	11 24       	eor	r1, r1
    349e:	af 5b       	subi	r26, 0xBF	; 191
    34a0:	bb 4e       	sbci	r27, 0xEB	; 235
    34a2:	b5 87       	std	Z+13, r27	; 0x0d
    34a4:	a4 87       	std	Z+12, r26	; 0x0c
    34a6:	8c 91       	ld	r24, X
    34a8:	8f 5f       	subi	r24, 0xFF	; 255
    34aa:	8c 93       	st	X, r24
    34ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    34ae:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    34b2:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    34b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    34b8:	89 17       	cp	r24, r25
    34ba:	18 f4       	brcc	.+6      	; 0x34c2 <vTaskRemoveFromUnorderedEventList+0x12e>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <xYieldPending>
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	08 95       	ret

000034c8 <vTaskSetTimeOutState>:
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	0f 92       	push	r0
    34ce:	20 91 f8 13 	lds	r18, 0x13F8	; 0x8013f8 <xNumOfOverflows>
    34d2:	fc 01       	movw	r30, r24
    34d4:	20 83       	st	Z, r18
    34d6:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <xTickCount>
    34da:	50 91 01 14 	lds	r21, 0x1401	; 0x801401 <xTickCount+0x1>
    34de:	60 91 02 14 	lds	r22, 0x1402	; 0x801402 <xTickCount+0x2>
    34e2:	70 91 03 14 	lds	r23, 0x1403	; 0x801403 <xTickCount+0x3>
    34e6:	41 83       	std	Z+1, r20	; 0x01
    34e8:	52 83       	std	Z+2, r21	; 0x02
    34ea:	63 83       	std	Z+3, r22	; 0x03
    34ec:	74 83       	std	Z+4, r23	; 0x04
    34ee:	0f 90       	pop	r0
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	08 95       	ret

000034f4 <vTaskInternalSetTimeOutState>:
    34f4:	20 91 f8 13 	lds	r18, 0x13F8	; 0x8013f8 <xNumOfOverflows>
    34f8:	fc 01       	movw	r30, r24
    34fa:	20 83       	st	Z, r18
    34fc:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <xTickCount>
    3500:	50 91 01 14 	lds	r21, 0x1401	; 0x801401 <xTickCount+0x1>
    3504:	60 91 02 14 	lds	r22, 0x1402	; 0x801402 <xTickCount+0x2>
    3508:	70 91 03 14 	lds	r23, 0x1403	; 0x801403 <xTickCount+0x3>
    350c:	41 83       	std	Z+1, r20	; 0x01
    350e:	52 83       	std	Z+2, r21	; 0x02
    3510:	63 83       	std	Z+3, r22	; 0x03
    3512:	74 83       	std	Z+4, r23	; 0x04
    3514:	08 95       	ret

00003516 <xTaskCheckForTimeOut>:
    3516:	8f 92       	push	r8
    3518:	9f 92       	push	r9
    351a:	af 92       	push	r10
    351c:	bf 92       	push	r11
    351e:	cf 92       	push	r12
    3520:	df 92       	push	r13
    3522:	ef 92       	push	r14
    3524:	ff 92       	push	r15
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
    352e:	fb 01       	movw	r30, r22
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	0f 92       	push	r0
    3536:	c0 90 00 14 	lds	r12, 0x1400	; 0x801400 <xTickCount>
    353a:	d0 90 01 14 	lds	r13, 0x1401	; 0x801401 <xTickCount+0x1>
    353e:	e0 90 02 14 	lds	r14, 0x1402	; 0x801402 <xTickCount+0x2>
    3542:	f0 90 03 14 	lds	r15, 0x1403	; 0x801403 <xTickCount+0x3>
    3546:	dc 01       	movw	r26, r24
    3548:	11 96       	adiw	r26, 0x01	; 1
    354a:	0d 91       	ld	r16, X+
    354c:	1d 91       	ld	r17, X+
    354e:	2d 91       	ld	r18, X+
    3550:	3c 91       	ld	r19, X
    3552:	14 97       	sbiw	r26, 0x04	; 4
    3554:	46 01       	movw	r8, r12
    3556:	57 01       	movw	r10, r14
    3558:	80 1a       	sub	r8, r16
    355a:	91 0a       	sbc	r9, r17
    355c:	a2 0a       	sbc	r10, r18
    355e:	b3 0a       	sbc	r11, r19
    3560:	40 81       	ld	r20, Z
    3562:	51 81       	ldd	r21, Z+1	; 0x01
    3564:	62 81       	ldd	r22, Z+2	; 0x02
    3566:	73 81       	ldd	r23, Z+3	; 0x03
    3568:	4f 3f       	cpi	r20, 0xFF	; 255
    356a:	bf ef       	ldi	r27, 0xFF	; 255
    356c:	5b 07       	cpc	r21, r27
    356e:	6b 07       	cpc	r22, r27
    3570:	7b 07       	cpc	r23, r27
    3572:	39 f1       	breq	.+78     	; 0x35c2 <xTaskCheckForTimeOut+0xac>
    3574:	ec 01       	movw	r28, r24
    3576:	b8 81       	ld	r27, Y
    3578:	a0 91 f8 13 	lds	r26, 0x13F8	; 0x8013f8 <xNumOfOverflows>
    357c:	ba 17       	cp	r27, r26
    357e:	59 f0       	breq	.+22     	; 0x3596 <xTaskCheckForTimeOut+0x80>
    3580:	c0 16       	cp	r12, r16
    3582:	d1 06       	cpc	r13, r17
    3584:	e2 06       	cpc	r14, r18
    3586:	f3 06       	cpc	r15, r19
    3588:	30 f0       	brcs	.+12     	; 0x3596 <xTaskCheckForTimeOut+0x80>
    358a:	10 82       	st	Z, r1
    358c:	11 82       	std	Z+1, r1	; 0x01
    358e:	12 82       	std	Z+2, r1	; 0x02
    3590:	13 82       	std	Z+3, r1	; 0x03
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	17 c0       	rjmp	.+46     	; 0x35c4 <xTaskCheckForTimeOut+0xae>
    3596:	84 16       	cp	r8, r20
    3598:	95 06       	cpc	r9, r21
    359a:	a6 06       	cpc	r10, r22
    359c:	b7 06       	cpc	r11, r23
    359e:	58 f4       	brcc	.+22     	; 0x35b6 <xTaskCheckForTimeOut+0xa0>
    35a0:	48 19       	sub	r20, r8
    35a2:	59 09       	sbc	r21, r9
    35a4:	6a 09       	sbc	r22, r10
    35a6:	7b 09       	sbc	r23, r11
    35a8:	40 83       	st	Z, r20
    35aa:	51 83       	std	Z+1, r21	; 0x01
    35ac:	62 83       	std	Z+2, r22	; 0x02
    35ae:	73 83       	std	Z+3, r23	; 0x03
    35b0:	a1 df       	rcall	.-190    	; 0x34f4 <vTaskInternalSetTimeOutState>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	07 c0       	rjmp	.+14     	; 0x35c4 <xTaskCheckForTimeOut+0xae>
    35b6:	10 82       	st	Z, r1
    35b8:	11 82       	std	Z+1, r1	; 0x01
    35ba:	12 82       	std	Z+2, r1	; 0x02
    35bc:	13 82       	std	Z+3, r1	; 0x03
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	01 c0       	rjmp	.+2      	; 0x35c4 <xTaskCheckForTimeOut+0xae>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	0f 90       	pop	r0
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    35d0:	ff 90       	pop	r15
    35d2:	ef 90       	pop	r14
    35d4:	df 90       	pop	r13
    35d6:	cf 90       	pop	r12
    35d8:	bf 90       	pop	r11
    35da:	af 90       	pop	r10
    35dc:	9f 90       	pop	r9
    35de:	8f 90       	pop	r8
    35e0:	08 95       	ret

000035e2 <vTaskMissedYield>:
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <xYieldPending>
    35e8:	08 95       	ret

000035ea <xTaskGetCurrentTaskHandle>:
    35ea:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    35ee:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    35f2:	08 95       	ret

000035f4 <xTaskGetSchedulerState>:
    35f4:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <xSchedulerRunning>
    35f8:	88 23       	and	r24, r24
    35fa:	31 f0       	breq	.+12     	; 0x3608 <xTaskGetSchedulerState+0x14>
    35fc:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    3600:	81 11       	cpse	r24, r1
    3602:	04 c0       	rjmp	.+8      	; 0x360c <xTaskGetSchedulerState+0x18>
    3604:	82 e0       	ldi	r24, 0x02	; 2
    3606:	08 95       	ret
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	08 95       	ret
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	08 95       	ret

00003610 <xTaskPriorityInherit>:
    3610:	0f 93       	push	r16
    3612:	1f 93       	push	r17
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    3618:	fc 01       	movw	r30, r24
    361a:	89 2b       	or	r24, r25
    361c:	09 f4       	brne	.+2      	; 0x3620 <xTaskPriorityInherit+0x10>
    361e:	77 c0       	rjmp	.+238    	; 0x370e <xTaskPriorityInherit+0xfe>
    3620:	82 8d       	ldd	r24, Z+26	; 0x1a
    3622:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    3626:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    362a:	5a 96       	adiw	r26, 0x1a	; 26
    362c:	9c 91       	ld	r25, X
    362e:	89 17       	cp	r24, r25
    3630:	08 f0       	brcs	.+2      	; 0x3634 <xTaskPriorityInherit+0x24>
    3632:	63 c0       	rjmp	.+198    	; 0x36fa <xTaskPriorityInherit+0xea>
    3634:	46 85       	ldd	r20, Z+14	; 0x0e
    3636:	57 85       	ldd	r21, Z+15	; 0x0f
    3638:	60 89       	ldd	r22, Z+16	; 0x10
    363a:	71 89       	ldd	r23, Z+17	; 0x11
    363c:	77 23       	and	r23, r23
    363e:	94 f0       	brlt	.+36     	; 0x3664 <xTaskPriorityInherit+0x54>
    3640:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    3644:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3648:	5a 96       	adiw	r26, 0x1a	; 26
    364a:	9c 91       	ld	r25, X
    364c:	4a e0       	ldi	r20, 0x0A	; 10
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	49 1b       	sub	r20, r25
    3656:	51 09       	sbc	r21, r1
    3658:	61 09       	sbc	r22, r1
    365a:	71 09       	sbc	r23, r1
    365c:	46 87       	std	Z+14, r20	; 0x0e
    365e:	57 87       	std	Z+15, r21	; 0x0f
    3660:	60 8b       	std	Z+16, r22	; 0x10
    3662:	71 8b       	std	Z+17, r23	; 0x11
    3664:	24 85       	ldd	r18, Z+12	; 0x0c
    3666:	35 85       	ldd	r19, Z+13	; 0x0d
    3668:	4b e0       	ldi	r20, 0x0B	; 11
    366a:	84 9f       	mul	r24, r20
    366c:	c0 01       	movw	r24, r0
    366e:	11 24       	eor	r1, r1
    3670:	8f 5b       	subi	r24, 0xBF	; 191
    3672:	9b 4e       	sbci	r25, 0xEB	; 235
    3674:	28 17       	cp	r18, r24
    3676:	39 07       	cpc	r19, r25
    3678:	b9 f5       	brne	.+110    	; 0x36e8 <xTaskPriorityInherit+0xd8>
    367a:	ef 01       	movw	r28, r30
    367c:	8f 01       	movw	r16, r30
    367e:	0e 5f       	subi	r16, 0xFE	; 254
    3680:	1f 4f       	sbci	r17, 0xFF	; 255
    3682:	c8 01       	movw	r24, r16
    3684:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
    3688:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    368c:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3690:	e2 8d       	ldd	r30, Z+26	; 0x1a
    3692:	ea 8f       	std	Y+26, r30	; 0x1a
    3694:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    3698:	8e 17       	cp	r24, r30
    369a:	10 f4       	brcc	.+4      	; 0x36a0 <xTaskPriorityInherit+0x90>
    369c:	e0 93 ff 13 	sts	0x13FF, r30	; 0x8013ff <uxTopReadyPriority>
    36a0:	8b e0       	ldi	r24, 0x0B	; 11
    36a2:	8e 9f       	mul	r24, r30
    36a4:	f0 01       	movw	r30, r0
    36a6:	11 24       	eor	r1, r1
    36a8:	ef 5b       	subi	r30, 0xBF	; 191
    36aa:	fb 4e       	sbci	r31, 0xEB	; 235
    36ac:	01 80       	ldd	r0, Z+1	; 0x01
    36ae:	f2 81       	ldd	r31, Z+2	; 0x02
    36b0:	e0 2d       	mov	r30, r0
    36b2:	ff 83       	std	Y+7, r31	; 0x07
    36b4:	ee 83       	std	Y+6, r30	; 0x06
    36b6:	26 81       	ldd	r18, Z+6	; 0x06
    36b8:	37 81       	ldd	r19, Z+7	; 0x07
    36ba:	39 87       	std	Y+9, r19	; 0x09
    36bc:	28 87       	std	Y+8, r18	; 0x08
    36be:	a6 81       	ldd	r26, Z+6	; 0x06
    36c0:	b7 81       	ldd	r27, Z+7	; 0x07
    36c2:	15 96       	adiw	r26, 0x05	; 5
    36c4:	1c 93       	st	X, r17
    36c6:	0e 93       	st	-X, r16
    36c8:	14 97       	sbiw	r26, 0x04	; 4
    36ca:	17 83       	std	Z+7, r17	; 0x07
    36cc:	06 83       	std	Z+6, r16	; 0x06
    36ce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    36d0:	8e 9f       	mul	r24, r30
    36d2:	f0 01       	movw	r30, r0
    36d4:	11 24       	eor	r1, r1
    36d6:	ef 5b       	subi	r30, 0xBF	; 191
    36d8:	fb 4e       	sbci	r31, 0xEB	; 235
    36da:	fd 87       	std	Y+13, r31	; 0x0d
    36dc:	ec 87       	std	Y+12, r30	; 0x0c
    36de:	80 81       	ld	r24, Z
    36e0:	8f 5f       	subi	r24, 0xFF	; 255
    36e2:	80 83       	st	Z, r24
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	16 c0       	rjmp	.+44     	; 0x3714 <xTaskPriorityInherit+0x104>
    36e8:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    36ec:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    36f0:	5a 96       	adiw	r26, 0x1a	; 26
    36f2:	8c 91       	ld	r24, X
    36f4:	82 8f       	std	Z+26, r24	; 0x1a
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	0d c0       	rjmp	.+26     	; 0x3714 <xTaskPriorityInherit+0x104>
    36fa:	95 a5       	ldd	r25, Z+45	; 0x2d
    36fc:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    3700:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3704:	82 8d       	ldd	r24, Z+26	; 0x1a
    3706:	98 17       	cp	r25, r24
    3708:	20 f0       	brcs	.+8      	; 0x3712 <xTaskPriorityInherit+0x102>
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <xTaskPriorityInherit+0x104>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <xTaskPriorityInherit+0x104>
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	08 95       	ret

0000371e <xTaskPriorityDisinherit>:
    371e:	0f 93       	push	r16
    3720:	1f 93       	push	r17
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	fc 01       	movw	r30, r24
    3728:	89 2b       	or	r24, r25
    372a:	09 f4       	brne	.+2      	; 0x372e <xTaskPriorityDisinherit+0x10>
    372c:	49 c0       	rjmp	.+146    	; 0x37c0 <xTaskPriorityDisinherit+0xa2>
    372e:	86 a5       	ldd	r24, Z+46	; 0x2e
    3730:	81 50       	subi	r24, 0x01	; 1
    3732:	86 a7       	std	Z+46, r24	; 0x2e
    3734:	22 8d       	ldd	r18, Z+26	; 0x1a
    3736:	95 a5       	ldd	r25, Z+45	; 0x2d
    3738:	29 17       	cp	r18, r25
    373a:	09 f4       	brne	.+2      	; 0x373e <xTaskPriorityDisinherit+0x20>
    373c:	43 c0       	rjmp	.+134    	; 0x37c4 <xTaskPriorityDisinherit+0xa6>
    373e:	81 11       	cpse	r24, r1
    3740:	43 c0       	rjmp	.+134    	; 0x37c8 <xTaskPriorityDisinherit+0xaa>
    3742:	ef 01       	movw	r28, r30
    3744:	8f 01       	movw	r16, r30
    3746:	0e 5f       	subi	r16, 0xFE	; 254
    3748:	1f 4f       	sbci	r17, 0xFF	; 255
    374a:	c8 01       	movw	r24, r16
    374c:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
    3750:	ed a5       	ldd	r30, Y+45	; 0x2d
    3752:	ea 8f       	std	Y+26, r30	; 0x1a
    3754:	8a e0       	ldi	r24, 0x0A	; 10
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a0 e0       	ldi	r26, 0x00	; 0
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	8e 1b       	sub	r24, r30
    375e:	91 09       	sbc	r25, r1
    3760:	a1 09       	sbc	r26, r1
    3762:	b1 09       	sbc	r27, r1
    3764:	8e 87       	std	Y+14, r24	; 0x0e
    3766:	9f 87       	std	Y+15, r25	; 0x0f
    3768:	a8 8b       	std	Y+16, r26	; 0x10
    376a:	b9 8b       	std	Y+17, r27	; 0x11
    376c:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    3770:	8e 17       	cp	r24, r30
    3772:	10 f4       	brcc	.+4      	; 0x3778 <xTaskPriorityDisinherit+0x5a>
    3774:	e0 93 ff 13 	sts	0x13FF, r30	; 0x8013ff <uxTopReadyPriority>
    3778:	8b e0       	ldi	r24, 0x0B	; 11
    377a:	8e 9f       	mul	r24, r30
    377c:	f0 01       	movw	r30, r0
    377e:	11 24       	eor	r1, r1
    3780:	ef 5b       	subi	r30, 0xBF	; 191
    3782:	fb 4e       	sbci	r31, 0xEB	; 235
    3784:	01 80       	ldd	r0, Z+1	; 0x01
    3786:	f2 81       	ldd	r31, Z+2	; 0x02
    3788:	e0 2d       	mov	r30, r0
    378a:	ff 83       	std	Y+7, r31	; 0x07
    378c:	ee 83       	std	Y+6, r30	; 0x06
    378e:	26 81       	ldd	r18, Z+6	; 0x06
    3790:	37 81       	ldd	r19, Z+7	; 0x07
    3792:	39 87       	std	Y+9, r19	; 0x09
    3794:	28 87       	std	Y+8, r18	; 0x08
    3796:	a6 81       	ldd	r26, Z+6	; 0x06
    3798:	b7 81       	ldd	r27, Z+7	; 0x07
    379a:	15 96       	adiw	r26, 0x05	; 5
    379c:	1c 93       	st	X, r17
    379e:	0e 93       	st	-X, r16
    37a0:	14 97       	sbiw	r26, 0x04	; 4
    37a2:	17 83       	std	Z+7, r17	; 0x07
    37a4:	06 83       	std	Z+6, r16	; 0x06
    37a6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    37a8:	8e 9f       	mul	r24, r30
    37aa:	f0 01       	movw	r30, r0
    37ac:	11 24       	eor	r1, r1
    37ae:	ef 5b       	subi	r30, 0xBF	; 191
    37b0:	fb 4e       	sbci	r31, 0xEB	; 235
    37b2:	fd 87       	std	Y+13, r31	; 0x0d
    37b4:	ec 87       	std	Y+12, r30	; 0x0c
    37b6:	80 81       	ld	r24, Z
    37b8:	8f 5f       	subi	r24, 0xFF	; 255
    37ba:	80 83       	st	Z, r24
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	05 c0       	rjmp	.+10     	; 0x37ca <xTaskPriorityDisinherit+0xac>
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	03 c0       	rjmp	.+6      	; 0x37ca <xTaskPriorityDisinherit+0xac>
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	01 c0       	rjmp	.+2      	; 0x37ca <xTaskPriorityDisinherit+0xac>
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	1f 91       	pop	r17
    37d0:	0f 91       	pop	r16
    37d2:	08 95       	ret

000037d4 <vTaskPriorityDisinheritAfterTimeout>:
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	fc 01       	movw	r30, r24
    37de:	89 2b       	or	r24, r25
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    37e2:	5a c0       	rjmp	.+180    	; 0x3898 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    37e4:	85 a5       	ldd	r24, Z+45	; 0x2d
    37e6:	86 17       	cp	r24, r22
    37e8:	08 f4       	brcc	.+2      	; 0x37ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    37ea:	86 2f       	mov	r24, r22
    37ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    37ee:	89 17       	cp	r24, r25
    37f0:	09 f4       	brne	.+2      	; 0x37f4 <vTaskPriorityDisinheritAfterTimeout+0x20>
    37f2:	52 c0       	rjmp	.+164    	; 0x3898 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    37f4:	26 a5       	ldd	r18, Z+46	; 0x2e
    37f6:	21 30       	cpi	r18, 0x01	; 1
    37f8:	09 f0       	breq	.+2      	; 0x37fc <vTaskPriorityDisinheritAfterTimeout+0x28>
    37fa:	4e c0       	rjmp	.+156    	; 0x3898 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    37fc:	82 8f       	std	Z+26, r24	; 0x1a
    37fe:	46 85       	ldd	r20, Z+14	; 0x0e
    3800:	57 85       	ldd	r21, Z+15	; 0x0f
    3802:	60 89       	ldd	r22, Z+16	; 0x10
    3804:	71 89       	ldd	r23, Z+17	; 0x11
    3806:	77 23       	and	r23, r23
    3808:	64 f0       	brlt	.+24     	; 0x3822 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    380a:	4a e0       	ldi	r20, 0x0A	; 10
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	48 1b       	sub	r20, r24
    3814:	51 09       	sbc	r21, r1
    3816:	61 09       	sbc	r22, r1
    3818:	71 09       	sbc	r23, r1
    381a:	46 87       	std	Z+14, r20	; 0x0e
    381c:	57 87       	std	Z+15, r21	; 0x0f
    381e:	60 8b       	std	Z+16, r22	; 0x10
    3820:	71 8b       	std	Z+17, r23	; 0x11
    3822:	24 85       	ldd	r18, Z+12	; 0x0c
    3824:	35 85       	ldd	r19, Z+13	; 0x0d
    3826:	4b e0       	ldi	r20, 0x0B	; 11
    3828:	94 9f       	mul	r25, r20
    382a:	c0 01       	movw	r24, r0
    382c:	11 24       	eor	r1, r1
    382e:	8f 5b       	subi	r24, 0xBF	; 191
    3830:	9b 4e       	sbci	r25, 0xEB	; 235
    3832:	28 17       	cp	r18, r24
    3834:	39 07       	cpc	r19, r25
    3836:	81 f5       	brne	.+96     	; 0x3898 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3838:	ef 01       	movw	r28, r30
    383a:	8f 01       	movw	r16, r30
    383c:	0e 5f       	subi	r16, 0xFE	; 254
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
    3846:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3848:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    384c:	8e 17       	cp	r24, r30
    384e:	10 f4       	brcc	.+4      	; 0x3854 <vTaskPriorityDisinheritAfterTimeout+0x80>
    3850:	e0 93 ff 13 	sts	0x13FF, r30	; 0x8013ff <uxTopReadyPriority>
    3854:	8b e0       	ldi	r24, 0x0B	; 11
    3856:	8e 9f       	mul	r24, r30
    3858:	f0 01       	movw	r30, r0
    385a:	11 24       	eor	r1, r1
    385c:	ef 5b       	subi	r30, 0xBF	; 191
    385e:	fb 4e       	sbci	r31, 0xEB	; 235
    3860:	01 80       	ldd	r0, Z+1	; 0x01
    3862:	f2 81       	ldd	r31, Z+2	; 0x02
    3864:	e0 2d       	mov	r30, r0
    3866:	ff 83       	std	Y+7, r31	; 0x07
    3868:	ee 83       	std	Y+6, r30	; 0x06
    386a:	26 81       	ldd	r18, Z+6	; 0x06
    386c:	37 81       	ldd	r19, Z+7	; 0x07
    386e:	39 87       	std	Y+9, r19	; 0x09
    3870:	28 87       	std	Y+8, r18	; 0x08
    3872:	a6 81       	ldd	r26, Z+6	; 0x06
    3874:	b7 81       	ldd	r27, Z+7	; 0x07
    3876:	15 96       	adiw	r26, 0x05	; 5
    3878:	1c 93       	st	X, r17
    387a:	0e 93       	st	-X, r16
    387c:	14 97       	sbiw	r26, 0x04	; 4
    387e:	17 83       	std	Z+7, r17	; 0x07
    3880:	06 83       	std	Z+6, r16	; 0x06
    3882:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3884:	8e 9f       	mul	r24, r30
    3886:	f0 01       	movw	r30, r0
    3888:	11 24       	eor	r1, r1
    388a:	ef 5b       	subi	r30, 0xBF	; 191
    388c:	fb 4e       	sbci	r31, 0xEB	; 235
    388e:	fd 87       	std	Y+13, r31	; 0x0d
    3890:	ec 87       	std	Y+12, r30	; 0x0c
    3892:	80 81       	ld	r24, Z
    3894:	8f 5f       	subi	r24, 0xFF	; 255
    3896:	80 83       	st	Z, r24
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	08 95       	ret

000038a2 <uxTaskResetEventItemValue>:
    38a2:	cf 92       	push	r12
    38a4:	df 92       	push	r13
    38a6:	ef 92       	push	r14
    38a8:	ff 92       	push	r15
    38aa:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    38ae:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    38b2:	66 85       	ldd	r22, Z+14	; 0x0e
    38b4:	77 85       	ldd	r23, Z+15	; 0x0f
    38b6:	80 89       	ldd	r24, Z+16	; 0x10
    38b8:	91 89       	ldd	r25, Z+17	; 0x11
    38ba:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    38be:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    38c2:	a0 91 af 14 	lds	r26, 0x14AF	; 0x8014af <pxCurrentTCB>
    38c6:	b0 91 b0 14 	lds	r27, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    38ca:	5a 96       	adiw	r26, 0x1a	; 26
    38cc:	2c 91       	ld	r18, X
    38ce:	0f 2e       	mov	r0, r31
    38d0:	fa e0       	ldi	r31, 0x0A	; 10
    38d2:	cf 2e       	mov	r12, r31
    38d4:	d1 2c       	mov	r13, r1
    38d6:	e1 2c       	mov	r14, r1
    38d8:	f1 2c       	mov	r15, r1
    38da:	f0 2d       	mov	r31, r0
    38dc:	c2 1a       	sub	r12, r18
    38de:	d1 08       	sbc	r13, r1
    38e0:	e1 08       	sbc	r14, r1
    38e2:	f1 08       	sbc	r15, r1
    38e4:	c6 86       	std	Z+14, r12	; 0x0e
    38e6:	d7 86       	std	Z+15, r13	; 0x0f
    38e8:	e0 8a       	std	Z+16, r14	; 0x10
    38ea:	f1 8a       	std	Z+17, r15	; 0x11
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	08 95       	ret

000038f6 <pvTaskIncrementMutexHeldCount>:
    38f6:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    38fa:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    38fe:	89 2b       	or	r24, r25
    3900:	39 f0       	breq	.+14     	; 0x3910 <pvTaskIncrementMutexHeldCount+0x1a>
    3902:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    3906:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    390a:	86 a5       	ldd	r24, Z+46	; 0x2e
    390c:	8f 5f       	subi	r24, 0xFF	; 255
    390e:	86 a7       	std	Z+46, r24	; 0x2e
    3910:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    3914:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3918:	08 95       	ret

0000391a <xTaskGenericNotifyWait>:
    391a:	4f 92       	push	r4
    391c:	5f 92       	push	r5
    391e:	6f 92       	push	r6
    3920:	7f 92       	push	r7
    3922:	af 92       	push	r10
    3924:	bf 92       	push	r11
    3926:	cf 92       	push	r12
    3928:	df 92       	push	r13
    392a:	ef 92       	push	r14
    392c:	ff 92       	push	r15
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	28 01       	movw	r4, r16
    3938:	39 01       	movw	r6, r18
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	0f 92       	push	r0
    3940:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    3944:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3948:	c8 2f       	mov	r28, r24
    394a:	d0 e0       	ldi	r29, 0x00	; 0
    394c:	ec 0f       	add	r30, r28
    394e:	fd 1f       	adc	r31, r29
    3950:	83 a9       	ldd	r24, Z+51	; 0x33
    3952:	82 30       	cpi	r24, 0x02	; 2
    3954:	79 f1       	breq	.+94     	; 0x39b4 <xTaskGenericNotifyWait+0x9a>
    3956:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    395a:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    395e:	ce 01       	movw	r24, r28
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	88 0f       	add	r24, r24
    3966:	99 1f       	adc	r25, r25
    3968:	e8 0f       	add	r30, r24
    396a:	f9 1f       	adc	r31, r25
    396c:	87 a5       	ldd	r24, Z+47	; 0x2f
    396e:	90 a9       	ldd	r25, Z+48	; 0x30
    3970:	a1 a9       	ldd	r26, Z+49	; 0x31
    3972:	b2 a9       	ldd	r27, Z+50	; 0x32
    3974:	40 95       	com	r20
    3976:	50 95       	com	r21
    3978:	60 95       	com	r22
    397a:	70 95       	com	r23
    397c:	48 23       	and	r20, r24
    397e:	59 23       	and	r21, r25
    3980:	6a 23       	and	r22, r26
    3982:	7b 23       	and	r23, r27
    3984:	47 a7       	std	Z+47, r20	; 0x2f
    3986:	50 ab       	std	Z+48, r21	; 0x30
    3988:	61 ab       	std	Z+49, r22	; 0x31
    398a:	72 ab       	std	Z+50, r23	; 0x32
    398c:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    3990:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3994:	ec 0f       	add	r30, r28
    3996:	fd 1f       	adc	r31, r29
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	83 ab       	std	Z+51, r24	; 0x33
    399c:	a1 14       	cp	r10, r1
    399e:	b1 04       	cpc	r11, r1
    39a0:	c1 04       	cpc	r12, r1
    39a2:	d1 04       	cpc	r13, r1
    39a4:	39 f0       	breq	.+14     	; 0x39b4 <xTaskGenericNotifyWait+0x9a>
    39a6:	41 e0       	ldi	r20, 0x01	; 1
    39a8:	c6 01       	movw	r24, r12
    39aa:	b5 01       	movw	r22, r10
    39ac:	0e 94 51 14 	call	0x28a2	; 0x28a2 <prvAddCurrentTaskToDelayedList>
    39b0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    39b4:	0f 90       	pop	r0
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	0f b6       	in	r0, 0x3f	; 63
    39ba:	f8 94       	cli
    39bc:	0f 92       	push	r0
    39be:	e1 14       	cp	r14, r1
    39c0:	f1 04       	cpc	r15, r1
    39c2:	a1 f0       	breq	.+40     	; 0x39ec <xTaskGenericNotifyWait+0xd2>
    39c4:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    39c8:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    39cc:	ce 01       	movw	r24, r28
    39ce:	88 0f       	add	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	88 0f       	add	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	e8 0f       	add	r30, r24
    39d8:	f9 1f       	adc	r31, r25
    39da:	87 a5       	ldd	r24, Z+47	; 0x2f
    39dc:	90 a9       	ldd	r25, Z+48	; 0x30
    39de:	a1 a9       	ldd	r26, Z+49	; 0x31
    39e0:	b2 a9       	ldd	r27, Z+50	; 0x32
    39e2:	f7 01       	movw	r30, r14
    39e4:	80 83       	st	Z, r24
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	a2 83       	std	Z+2, r26	; 0x02
    39ea:	b3 83       	std	Z+3, r27	; 0x03
    39ec:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    39f0:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    39f4:	ec 0f       	add	r30, r28
    39f6:	fd 1f       	adc	r31, r29
    39f8:	83 a9       	ldd	r24, Z+51	; 0x33
    39fa:	82 30       	cpi	r24, 0x02	; 2
    39fc:	e9 f4       	brne	.+58     	; 0x3a38 <xTaskGenericNotifyWait+0x11e>
    39fe:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    3a02:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3a06:	ce 01       	movw	r24, r28
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	e8 0f       	add	r30, r24
    3a12:	f9 1f       	adc	r31, r25
    3a14:	87 a5       	ldd	r24, Z+47	; 0x2f
    3a16:	90 a9       	ldd	r25, Z+48	; 0x30
    3a18:	a1 a9       	ldd	r26, Z+49	; 0x31
    3a1a:	b2 a9       	ldd	r27, Z+50	; 0x32
    3a1c:	40 94       	com	r4
    3a1e:	50 94       	com	r5
    3a20:	60 94       	com	r6
    3a22:	70 94       	com	r7
    3a24:	48 22       	and	r4, r24
    3a26:	59 22       	and	r5, r25
    3a28:	6a 22       	and	r6, r26
    3a2a:	7b 22       	and	r7, r27
    3a2c:	47 a6       	std	Z+47, r4	; 0x2f
    3a2e:	50 aa       	std	Z+48, r5	; 0x30
    3a30:	61 aa       	std	Z+49, r6	; 0x31
    3a32:	72 aa       	std	Z+50, r7	; 0x32
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	01 c0       	rjmp	.+2      	; 0x3a3a <xTaskGenericNotifyWait+0x120>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	20 91 af 14 	lds	r18, 0x14AF	; 0x8014af <pxCurrentTCB>
    3a3e:	30 91 b0 14 	lds	r19, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3a42:	c2 0f       	add	r28, r18
    3a44:	d3 1f       	adc	r29, r19
    3a46:	1b aa       	std	Y+51, r1	; 0x33
    3a48:	0f 90       	pop	r0
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	df 91       	pop	r29
    3a4e:	cf 91       	pop	r28
    3a50:	1f 91       	pop	r17
    3a52:	0f 91       	pop	r16
    3a54:	ff 90       	pop	r15
    3a56:	ef 90       	pop	r14
    3a58:	df 90       	pop	r13
    3a5a:	cf 90       	pop	r12
    3a5c:	bf 90       	pop	r11
    3a5e:	af 90       	pop	r10
    3a60:	7f 90       	pop	r7
    3a62:	6f 90       	pop	r6
    3a64:	5f 90       	pop	r5
    3a66:	4f 90       	pop	r4
    3a68:	08 95       	ret

00003a6a <xTaskGenericNotify>:
    3a6a:	8f 92       	push	r8
    3a6c:	9f 92       	push	r9
    3a6e:	af 92       	push	r10
    3a70:	bf 92       	push	r11
    3a72:	ef 92       	push	r14
    3a74:	ff 92       	push	r15
    3a76:	0f 93       	push	r16
    3a78:	cf 93       	push	r28
    3a7a:	df 93       	push	r29
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	0f 92       	push	r0
    3a84:	e1 14       	cp	r14, r1
    3a86:	f1 04       	cpc	r15, r1
    3a88:	89 f0       	breq	.+34     	; 0x3aac <xTaskGenericNotify+0x42>
    3a8a:	e6 2f       	mov	r30, r22
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	ee 0f       	add	r30, r30
    3a90:	ff 1f       	adc	r31, r31
    3a92:	ee 0f       	add	r30, r30
    3a94:	ff 1f       	adc	r31, r31
    3a96:	e8 0f       	add	r30, r24
    3a98:	f9 1f       	adc	r31, r25
    3a9a:	87 a4       	ldd	r8, Z+47	; 0x2f
    3a9c:	90 a8       	ldd	r9, Z+48	; 0x30
    3a9e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3aa0:	b2 a8       	ldd	r11, Z+50	; 0x32
    3aa2:	f7 01       	movw	r30, r14
    3aa4:	80 82       	st	Z, r8
    3aa6:	91 82       	std	Z+1, r9	; 0x01
    3aa8:	a2 82       	std	Z+2, r10	; 0x02
    3aaa:	b3 82       	std	Z+3, r11	; 0x03
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	fd 01       	movw	r30, r26
    3ab0:	e6 0f       	add	r30, r22
    3ab2:	f7 1f       	adc	r31, r23
    3ab4:	83 a9       	ldd	r24, Z+51	; 0x33
    3ab6:	92 e0       	ldi	r25, 0x02	; 2
    3ab8:	93 ab       	std	Z+51, r25	; 0x33
    3aba:	02 30       	cpi	r16, 0x02	; 2
    3abc:	01 f1       	breq	.+64     	; 0x3afe <xTaskGenericNotify+0x94>
    3abe:	18 f4       	brcc	.+6      	; 0x3ac6 <xTaskGenericNotify+0x5c>
    3ac0:	01 30       	cpi	r16, 0x01	; 1
    3ac2:	31 f0       	breq	.+12     	; 0x3ad0 <xTaskGenericNotify+0x66>
    3ac4:	4d c0       	rjmp	.+154    	; 0x3b60 <xTaskGenericNotify+0xf6>
    3ac6:	03 30       	cpi	r16, 0x03	; 3
    3ac8:	79 f1       	breq	.+94     	; 0x3b28 <xTaskGenericNotify+0xbe>
    3aca:	04 30       	cpi	r16, 0x04	; 4
    3acc:	d1 f1       	breq	.+116    	; 0x3b42 <xTaskGenericNotify+0xd8>
    3ace:	48 c0       	rjmp	.+144    	; 0x3b60 <xTaskGenericNotify+0xf6>
    3ad0:	66 0f       	add	r22, r22
    3ad2:	77 1f       	adc	r23, r23
    3ad4:	66 0f       	add	r22, r22
    3ad6:	77 1f       	adc	r23, r23
    3ad8:	fd 01       	movw	r30, r26
    3ada:	e6 0f       	add	r30, r22
    3adc:	f7 1f       	adc	r31, r23
    3ade:	87 a4       	ldd	r8, Z+47	; 0x2f
    3ae0:	90 a8       	ldd	r9, Z+48	; 0x30
    3ae2:	a1 a8       	ldd	r10, Z+49	; 0x31
    3ae4:	b2 a8       	ldd	r11, Z+50	; 0x32
    3ae6:	ba 01       	movw	r22, r20
    3ae8:	a9 01       	movw	r20, r18
    3aea:	48 29       	or	r20, r8
    3aec:	59 29       	or	r21, r9
    3aee:	6a 29       	or	r22, r10
    3af0:	7b 29       	or	r23, r11
    3af2:	47 a7       	std	Z+47, r20	; 0x2f
    3af4:	50 ab       	std	Z+48, r21	; 0x30
    3af6:	61 ab       	std	Z+49, r22	; 0x31
    3af8:	72 ab       	std	Z+50, r23	; 0x32
    3afa:	01 e0       	ldi	r16, 0x01	; 1
    3afc:	34 c0       	rjmp	.+104    	; 0x3b66 <xTaskGenericNotify+0xfc>
    3afe:	66 0f       	add	r22, r22
    3b00:	77 1f       	adc	r23, r23
    3b02:	66 0f       	add	r22, r22
    3b04:	77 1f       	adc	r23, r23
    3b06:	fd 01       	movw	r30, r26
    3b08:	e6 0f       	add	r30, r22
    3b0a:	f7 1f       	adc	r31, r23
    3b0c:	47 a5       	ldd	r20, Z+47	; 0x2f
    3b0e:	50 a9       	ldd	r21, Z+48	; 0x30
    3b10:	61 a9       	ldd	r22, Z+49	; 0x31
    3b12:	72 a9       	ldd	r23, Z+50	; 0x32
    3b14:	4f 5f       	subi	r20, 0xFF	; 255
    3b16:	5f 4f       	sbci	r21, 0xFF	; 255
    3b18:	6f 4f       	sbci	r22, 0xFF	; 255
    3b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1c:	47 a7       	std	Z+47, r20	; 0x2f
    3b1e:	50 ab       	std	Z+48, r21	; 0x30
    3b20:	61 ab       	std	Z+49, r22	; 0x31
    3b22:	72 ab       	std	Z+50, r23	; 0x32
    3b24:	01 e0       	ldi	r16, 0x01	; 1
    3b26:	1f c0       	rjmp	.+62     	; 0x3b66 <xTaskGenericNotify+0xfc>
    3b28:	66 0f       	add	r22, r22
    3b2a:	77 1f       	adc	r23, r23
    3b2c:	66 0f       	add	r22, r22
    3b2e:	77 1f       	adc	r23, r23
    3b30:	fd 01       	movw	r30, r26
    3b32:	e6 0f       	add	r30, r22
    3b34:	f7 1f       	adc	r31, r23
    3b36:	27 a7       	std	Z+47, r18	; 0x2f
    3b38:	30 ab       	std	Z+48, r19	; 0x30
    3b3a:	41 ab       	std	Z+49, r20	; 0x31
    3b3c:	52 ab       	std	Z+50, r21	; 0x32
    3b3e:	01 e0       	ldi	r16, 0x01	; 1
    3b40:	12 c0       	rjmp	.+36     	; 0x3b66 <xTaskGenericNotify+0xfc>
    3b42:	82 30       	cpi	r24, 0x02	; 2
    3b44:	79 f0       	breq	.+30     	; 0x3b64 <xTaskGenericNotify+0xfa>
    3b46:	66 0f       	add	r22, r22
    3b48:	77 1f       	adc	r23, r23
    3b4a:	66 0f       	add	r22, r22
    3b4c:	77 1f       	adc	r23, r23
    3b4e:	fd 01       	movw	r30, r26
    3b50:	e6 0f       	add	r30, r22
    3b52:	f7 1f       	adc	r31, r23
    3b54:	27 a7       	std	Z+47, r18	; 0x2f
    3b56:	30 ab       	std	Z+48, r19	; 0x30
    3b58:	41 ab       	std	Z+49, r20	; 0x31
    3b5a:	52 ab       	std	Z+50, r21	; 0x32
    3b5c:	01 e0       	ldi	r16, 0x01	; 1
    3b5e:	03 c0       	rjmp	.+6      	; 0x3b66 <xTaskGenericNotify+0xfc>
    3b60:	01 e0       	ldi	r16, 0x01	; 1
    3b62:	01 c0       	rjmp	.+2      	; 0x3b66 <xTaskGenericNotify+0xfc>
    3b64:	00 e0       	ldi	r16, 0x00	; 0
    3b66:	81 30       	cpi	r24, 0x01	; 1
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <xTaskGenericNotify+0x102>
    3b6a:	69 c0       	rjmp	.+210    	; 0x3c3e <xTaskGenericNotify+0x1d4>
    3b6c:	1c 96       	adiw	r26, 0x0c	; 12
    3b6e:	ed 91       	ld	r30, X+
    3b70:	fc 91       	ld	r31, X
    3b72:	1d 97       	sbiw	r26, 0x0d	; 13
    3b74:	16 96       	adiw	r26, 0x06	; 6
    3b76:	cd 91       	ld	r28, X+
    3b78:	dc 91       	ld	r29, X
    3b7a:	17 97       	sbiw	r26, 0x07	; 7
    3b7c:	18 96       	adiw	r26, 0x08	; 8
    3b7e:	8d 91       	ld	r24, X+
    3b80:	9c 91       	ld	r25, X
    3b82:	19 97       	sbiw	r26, 0x09	; 9
    3b84:	9f 83       	std	Y+7, r25	; 0x07
    3b86:	8e 83       	std	Y+6, r24	; 0x06
    3b88:	18 96       	adiw	r26, 0x08	; 8
    3b8a:	cd 91       	ld	r28, X+
    3b8c:	dc 91       	ld	r29, X
    3b8e:	19 97       	sbiw	r26, 0x09	; 9
    3b90:	16 96       	adiw	r26, 0x06	; 6
    3b92:	8d 91       	ld	r24, X+
    3b94:	9c 91       	ld	r25, X
    3b96:	17 97       	sbiw	r26, 0x07	; 7
    3b98:	9d 83       	std	Y+5, r25	; 0x05
    3b9a:	8c 83       	std	Y+4, r24	; 0x04
    3b9c:	81 81       	ldd	r24, Z+1	; 0x01
    3b9e:	92 81       	ldd	r25, Z+2	; 0x02
    3ba0:	9d 01       	movw	r18, r26
    3ba2:	2e 5f       	subi	r18, 0xFE	; 254
    3ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba6:	82 17       	cp	r24, r18
    3ba8:	93 07       	cpc	r25, r19
    3baa:	31 f4       	brne	.+12     	; 0x3bb8 <xTaskGenericNotify+0x14e>
    3bac:	18 96       	adiw	r26, 0x08	; 8
    3bae:	8d 91       	ld	r24, X+
    3bb0:	9c 91       	ld	r25, X
    3bb2:	19 97       	sbiw	r26, 0x09	; 9
    3bb4:	92 83       	std	Z+2, r25	; 0x02
    3bb6:	81 83       	std	Z+1, r24	; 0x01
    3bb8:	1d 96       	adiw	r26, 0x0d	; 13
    3bba:	1c 92       	st	X, r1
    3bbc:	1e 92       	st	-X, r1
    3bbe:	1c 97       	sbiw	r26, 0x0c	; 12
    3bc0:	80 81       	ld	r24, Z
    3bc2:	81 50       	subi	r24, 0x01	; 1
    3bc4:	80 83       	st	Z, r24
    3bc6:	5a 96       	adiw	r26, 0x1a	; 26
    3bc8:	ec 91       	ld	r30, X
    3bca:	5a 97       	sbiw	r26, 0x1a	; 26
    3bcc:	80 91 ff 13 	lds	r24, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    3bd0:	8e 17       	cp	r24, r30
    3bd2:	10 f4       	brcc	.+4      	; 0x3bd8 <xTaskGenericNotify+0x16e>
    3bd4:	e0 93 ff 13 	sts	0x13FF, r30	; 0x8013ff <uxTopReadyPriority>
    3bd8:	8b e0       	ldi	r24, 0x0B	; 11
    3bda:	8e 9f       	mul	r24, r30
    3bdc:	f0 01       	movw	r30, r0
    3bde:	11 24       	eor	r1, r1
    3be0:	ef 5b       	subi	r30, 0xBF	; 191
    3be2:	fb 4e       	sbci	r31, 0xEB	; 235
    3be4:	01 80       	ldd	r0, Z+1	; 0x01
    3be6:	f2 81       	ldd	r31, Z+2	; 0x02
    3be8:	e0 2d       	mov	r30, r0
    3bea:	17 96       	adiw	r26, 0x07	; 7
    3bec:	fc 93       	st	X, r31
    3bee:	ee 93       	st	-X, r30
    3bf0:	16 97       	sbiw	r26, 0x06	; 6
    3bf2:	46 81       	ldd	r20, Z+6	; 0x06
    3bf4:	57 81       	ldd	r21, Z+7	; 0x07
    3bf6:	19 96       	adiw	r26, 0x09	; 9
    3bf8:	5c 93       	st	X, r21
    3bfa:	4e 93       	st	-X, r20
    3bfc:	18 97       	sbiw	r26, 0x08	; 8
    3bfe:	c6 81       	ldd	r28, Z+6	; 0x06
    3c00:	d7 81       	ldd	r29, Z+7	; 0x07
    3c02:	3d 83       	std	Y+5, r19	; 0x05
    3c04:	2c 83       	std	Y+4, r18	; 0x04
    3c06:	37 83       	std	Z+7, r19	; 0x07
    3c08:	26 83       	std	Z+6, r18	; 0x06
    3c0a:	5a 96       	adiw	r26, 0x1a	; 26
    3c0c:	ec 91       	ld	r30, X
    3c0e:	5a 97       	sbiw	r26, 0x1a	; 26
    3c10:	8e 9f       	mul	r24, r30
    3c12:	f0 01       	movw	r30, r0
    3c14:	11 24       	eor	r1, r1
    3c16:	ef 5b       	subi	r30, 0xBF	; 191
    3c18:	fb 4e       	sbci	r31, 0xEB	; 235
    3c1a:	1d 96       	adiw	r26, 0x0d	; 13
    3c1c:	fc 93       	st	X, r31
    3c1e:	ee 93       	st	-X, r30
    3c20:	1c 97       	sbiw	r26, 0x0c	; 12
    3c22:	80 81       	ld	r24, Z
    3c24:	8f 5f       	subi	r24, 0xFF	; 255
    3c26:	80 83       	st	Z, r24
    3c28:	5a 96       	adiw	r26, 0x1a	; 26
    3c2a:	9c 91       	ld	r25, X
    3c2c:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    3c30:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3c34:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c36:	89 17       	cp	r24, r25
    3c38:	10 f4       	brcc	.+4      	; 0x3c3e <xTaskGenericNotify+0x1d4>
    3c3a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    3c3e:	0f 90       	pop	r0
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	80 2f       	mov	r24, r16
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	0f 91       	pop	r16
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	bf 90       	pop	r11
    3c50:	af 90       	pop	r10
    3c52:	9f 90       	pop	r9
    3c54:	8f 90       	pop	r8
    3c56:	08 95       	ret

00003c58 <xTaskGenericNotifyFromISR>:
    3c58:	8f 92       	push	r8
    3c5a:	9f 92       	push	r9
    3c5c:	af 92       	push	r10
    3c5e:	bf 92       	push	r11
    3c60:	cf 92       	push	r12
    3c62:	df 92       	push	r13
    3c64:	ef 92       	push	r14
    3c66:	ff 92       	push	r15
    3c68:	0f 93       	push	r16
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	dc 01       	movw	r26, r24
    3c70:	e1 14       	cp	r14, r1
    3c72:	f1 04       	cpc	r15, r1
    3c74:	89 f0       	breq	.+34     	; 0x3c98 <xTaskGenericNotifyFromISR+0x40>
    3c76:	e6 2f       	mov	r30, r22
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	ee 0f       	add	r30, r30
    3c7c:	ff 1f       	adc	r31, r31
    3c7e:	ee 0f       	add	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	e8 0f       	add	r30, r24
    3c84:	f9 1f       	adc	r31, r25
    3c86:	87 a4       	ldd	r8, Z+47	; 0x2f
    3c88:	90 a8       	ldd	r9, Z+48	; 0x30
    3c8a:	a1 a8       	ldd	r10, Z+49	; 0x31
    3c8c:	b2 a8       	ldd	r11, Z+50	; 0x32
    3c8e:	f7 01       	movw	r30, r14
    3c90:	80 82       	st	Z, r8
    3c92:	91 82       	std	Z+1, r9	; 0x01
    3c94:	a2 82       	std	Z+2, r10	; 0x02
    3c96:	b3 82       	std	Z+3, r11	; 0x03
    3c98:	70 e0       	ldi	r23, 0x00	; 0
    3c9a:	fd 01       	movw	r30, r26
    3c9c:	e6 0f       	add	r30, r22
    3c9e:	f7 1f       	adc	r31, r23
    3ca0:	93 a9       	ldd	r25, Z+51	; 0x33
    3ca2:	82 e0       	ldi	r24, 0x02	; 2
    3ca4:	83 ab       	std	Z+51, r24	; 0x33
    3ca6:	02 30       	cpi	r16, 0x02	; 2
    3ca8:	01 f1       	breq	.+64     	; 0x3cea <xTaskGenericNotifyFromISR+0x92>
    3caa:	18 f4       	brcc	.+6      	; 0x3cb2 <xTaskGenericNotifyFromISR+0x5a>
    3cac:	01 30       	cpi	r16, 0x01	; 1
    3cae:	31 f0       	breq	.+12     	; 0x3cbc <xTaskGenericNotifyFromISR+0x64>
    3cb0:	4d c0       	rjmp	.+154    	; 0x3d4c <xTaskGenericNotifyFromISR+0xf4>
    3cb2:	03 30       	cpi	r16, 0x03	; 3
    3cb4:	79 f1       	breq	.+94     	; 0x3d14 <xTaskGenericNotifyFromISR+0xbc>
    3cb6:	04 30       	cpi	r16, 0x04	; 4
    3cb8:	d1 f1       	breq	.+116    	; 0x3d2e <xTaskGenericNotifyFromISR+0xd6>
    3cba:	48 c0       	rjmp	.+144    	; 0x3d4c <xTaskGenericNotifyFromISR+0xf4>
    3cbc:	66 0f       	add	r22, r22
    3cbe:	77 1f       	adc	r23, r23
    3cc0:	66 0f       	add	r22, r22
    3cc2:	77 1f       	adc	r23, r23
    3cc4:	fd 01       	movw	r30, r26
    3cc6:	e6 0f       	add	r30, r22
    3cc8:	f7 1f       	adc	r31, r23
    3cca:	87 a4       	ldd	r8, Z+47	; 0x2f
    3ccc:	90 a8       	ldd	r9, Z+48	; 0x30
    3cce:	a1 a8       	ldd	r10, Z+49	; 0x31
    3cd0:	b2 a8       	ldd	r11, Z+50	; 0x32
    3cd2:	ba 01       	movw	r22, r20
    3cd4:	a9 01       	movw	r20, r18
    3cd6:	48 29       	or	r20, r8
    3cd8:	59 29       	or	r21, r9
    3cda:	6a 29       	or	r22, r10
    3cdc:	7b 29       	or	r23, r11
    3cde:	47 a7       	std	Z+47, r20	; 0x2f
    3ce0:	50 ab       	std	Z+48, r21	; 0x30
    3ce2:	61 ab       	std	Z+49, r22	; 0x31
    3ce4:	72 ab       	std	Z+50, r23	; 0x32
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	34 c0       	rjmp	.+104    	; 0x3d52 <xTaskGenericNotifyFromISR+0xfa>
    3cea:	66 0f       	add	r22, r22
    3cec:	77 1f       	adc	r23, r23
    3cee:	66 0f       	add	r22, r22
    3cf0:	77 1f       	adc	r23, r23
    3cf2:	fd 01       	movw	r30, r26
    3cf4:	e6 0f       	add	r30, r22
    3cf6:	f7 1f       	adc	r31, r23
    3cf8:	47 a5       	ldd	r20, Z+47	; 0x2f
    3cfa:	50 a9       	ldd	r21, Z+48	; 0x30
    3cfc:	61 a9       	ldd	r22, Z+49	; 0x31
    3cfe:	72 a9       	ldd	r23, Z+50	; 0x32
    3d00:	4f 5f       	subi	r20, 0xFF	; 255
    3d02:	5f 4f       	sbci	r21, 0xFF	; 255
    3d04:	6f 4f       	sbci	r22, 0xFF	; 255
    3d06:	7f 4f       	sbci	r23, 0xFF	; 255
    3d08:	47 a7       	std	Z+47, r20	; 0x2f
    3d0a:	50 ab       	std	Z+48, r21	; 0x30
    3d0c:	61 ab       	std	Z+49, r22	; 0x31
    3d0e:	72 ab       	std	Z+50, r23	; 0x32
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	1f c0       	rjmp	.+62     	; 0x3d52 <xTaskGenericNotifyFromISR+0xfa>
    3d14:	66 0f       	add	r22, r22
    3d16:	77 1f       	adc	r23, r23
    3d18:	66 0f       	add	r22, r22
    3d1a:	77 1f       	adc	r23, r23
    3d1c:	fd 01       	movw	r30, r26
    3d1e:	e6 0f       	add	r30, r22
    3d20:	f7 1f       	adc	r31, r23
    3d22:	27 a7       	std	Z+47, r18	; 0x2f
    3d24:	30 ab       	std	Z+48, r19	; 0x30
    3d26:	41 ab       	std	Z+49, r20	; 0x31
    3d28:	52 ab       	std	Z+50, r21	; 0x32
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	12 c0       	rjmp	.+36     	; 0x3d52 <xTaskGenericNotifyFromISR+0xfa>
    3d2e:	92 30       	cpi	r25, 0x02	; 2
    3d30:	79 f0       	breq	.+30     	; 0x3d50 <xTaskGenericNotifyFromISR+0xf8>
    3d32:	66 0f       	add	r22, r22
    3d34:	77 1f       	adc	r23, r23
    3d36:	66 0f       	add	r22, r22
    3d38:	77 1f       	adc	r23, r23
    3d3a:	fd 01       	movw	r30, r26
    3d3c:	e6 0f       	add	r30, r22
    3d3e:	f7 1f       	adc	r31, r23
    3d40:	27 a7       	std	Z+47, r18	; 0x2f
    3d42:	30 ab       	std	Z+48, r19	; 0x30
    3d44:	41 ab       	std	Z+49, r20	; 0x31
    3d46:	52 ab       	std	Z+50, r21	; 0x32
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	03 c0       	rjmp	.+6      	; 0x3d52 <xTaskGenericNotifyFromISR+0xfa>
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	01 c0       	rjmp	.+2      	; 0x3d52 <xTaskGenericNotifyFromISR+0xfa>
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	91 30       	cpi	r25, 0x01	; 1
    3d54:	09 f0       	breq	.+2      	; 0x3d58 <xTaskGenericNotifyFromISR+0x100>
    3d56:	96 c0       	rjmp	.+300    	; 0x3e84 <xTaskGenericNotifyFromISR+0x22c>
    3d58:	90 91 f0 13 	lds	r25, 0x13F0	; 0x8013f0 <uxSchedulerSuspended>
    3d5c:	91 11       	cpse	r25, r1
    3d5e:	5f c0       	rjmp	.+190    	; 0x3e1e <xTaskGenericNotifyFromISR+0x1c6>
    3d60:	1c 96       	adiw	r26, 0x0c	; 12
    3d62:	ed 91       	ld	r30, X+
    3d64:	fc 91       	ld	r31, X
    3d66:	1d 97       	sbiw	r26, 0x0d	; 13
    3d68:	16 96       	adiw	r26, 0x06	; 6
    3d6a:	cd 91       	ld	r28, X+
    3d6c:	dc 91       	ld	r29, X
    3d6e:	17 97       	sbiw	r26, 0x07	; 7
    3d70:	18 96       	adiw	r26, 0x08	; 8
    3d72:	2d 91       	ld	r18, X+
    3d74:	3c 91       	ld	r19, X
    3d76:	19 97       	sbiw	r26, 0x09	; 9
    3d78:	3f 83       	std	Y+7, r19	; 0x07
    3d7a:	2e 83       	std	Y+6, r18	; 0x06
    3d7c:	18 96       	adiw	r26, 0x08	; 8
    3d7e:	cd 91       	ld	r28, X+
    3d80:	dc 91       	ld	r29, X
    3d82:	19 97       	sbiw	r26, 0x09	; 9
    3d84:	16 96       	adiw	r26, 0x06	; 6
    3d86:	2d 91       	ld	r18, X+
    3d88:	3c 91       	ld	r19, X
    3d8a:	17 97       	sbiw	r26, 0x07	; 7
    3d8c:	3d 83       	std	Y+5, r19	; 0x05
    3d8e:	2c 83       	std	Y+4, r18	; 0x04
    3d90:	41 81       	ldd	r20, Z+1	; 0x01
    3d92:	52 81       	ldd	r21, Z+2	; 0x02
    3d94:	9d 01       	movw	r18, r26
    3d96:	2e 5f       	subi	r18, 0xFE	; 254
    3d98:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9a:	42 17       	cp	r20, r18
    3d9c:	53 07       	cpc	r21, r19
    3d9e:	31 f4       	brne	.+12     	; 0x3dac <xTaskGenericNotifyFromISR+0x154>
    3da0:	18 96       	adiw	r26, 0x08	; 8
    3da2:	4d 91       	ld	r20, X+
    3da4:	5c 91       	ld	r21, X
    3da6:	19 97       	sbiw	r26, 0x09	; 9
    3da8:	52 83       	std	Z+2, r21	; 0x02
    3daa:	41 83       	std	Z+1, r20	; 0x01
    3dac:	1d 96       	adiw	r26, 0x0d	; 13
    3dae:	1c 92       	st	X, r1
    3db0:	1e 92       	st	-X, r1
    3db2:	1c 97       	sbiw	r26, 0x0c	; 12
    3db4:	90 81       	ld	r25, Z
    3db6:	91 50       	subi	r25, 0x01	; 1
    3db8:	90 83       	st	Z, r25
    3dba:	5a 96       	adiw	r26, 0x1a	; 26
    3dbc:	ec 91       	ld	r30, X
    3dbe:	5a 97       	sbiw	r26, 0x1a	; 26
    3dc0:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <uxTopReadyPriority>
    3dc4:	9e 17       	cp	r25, r30
    3dc6:	10 f4       	brcc	.+4      	; 0x3dcc <xTaskGenericNotifyFromISR+0x174>
    3dc8:	e0 93 ff 13 	sts	0x13FF, r30	; 0x8013ff <uxTopReadyPriority>
    3dcc:	9b e0       	ldi	r25, 0x0B	; 11
    3dce:	9e 9f       	mul	r25, r30
    3dd0:	f0 01       	movw	r30, r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	ef 5b       	subi	r30, 0xBF	; 191
    3dd6:	fb 4e       	sbci	r31, 0xEB	; 235
    3dd8:	01 80       	ldd	r0, Z+1	; 0x01
    3dda:	f2 81       	ldd	r31, Z+2	; 0x02
    3ddc:	e0 2d       	mov	r30, r0
    3dde:	17 96       	adiw	r26, 0x07	; 7
    3de0:	fc 93       	st	X, r31
    3de2:	ee 93       	st	-X, r30
    3de4:	16 97       	sbiw	r26, 0x06	; 6
    3de6:	46 81       	ldd	r20, Z+6	; 0x06
    3de8:	57 81       	ldd	r21, Z+7	; 0x07
    3dea:	19 96       	adiw	r26, 0x09	; 9
    3dec:	5c 93       	st	X, r21
    3dee:	4e 93       	st	-X, r20
    3df0:	18 97       	sbiw	r26, 0x08	; 8
    3df2:	c6 81       	ldd	r28, Z+6	; 0x06
    3df4:	d7 81       	ldd	r29, Z+7	; 0x07
    3df6:	3d 83       	std	Y+5, r19	; 0x05
    3df8:	2c 83       	std	Y+4, r18	; 0x04
    3dfa:	37 83       	std	Z+7, r19	; 0x07
    3dfc:	26 83       	std	Z+6, r18	; 0x06
    3dfe:	5a 96       	adiw	r26, 0x1a	; 26
    3e00:	ec 91       	ld	r30, X
    3e02:	5a 97       	sbiw	r26, 0x1a	; 26
    3e04:	9e 9f       	mul	r25, r30
    3e06:	f0 01       	movw	r30, r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	ef 5b       	subi	r30, 0xBF	; 191
    3e0c:	fb 4e       	sbci	r31, 0xEB	; 235
    3e0e:	1d 96       	adiw	r26, 0x0d	; 13
    3e10:	fc 93       	st	X, r31
    3e12:	ee 93       	st	-X, r30
    3e14:	1c 97       	sbiw	r26, 0x0c	; 12
    3e16:	90 81       	ld	r25, Z
    3e18:	9f 5f       	subi	r25, 0xFF	; 255
    3e1a:	90 83       	st	Z, r25
    3e1c:	21 c0       	rjmp	.+66     	; 0x3e60 <xTaskGenericNotifyFromISR+0x208>
    3e1e:	6c e1       	ldi	r22, 0x1C	; 28
    3e20:	74 e1       	ldi	r23, 0x14	; 20
    3e22:	fb 01       	movw	r30, r22
    3e24:	c1 81       	ldd	r28, Z+1	; 0x01
    3e26:	d2 81       	ldd	r29, Z+2	; 0x02
    3e28:	53 96       	adiw	r26, 0x13	; 19
    3e2a:	dc 93       	st	X, r29
    3e2c:	ce 93       	st	-X, r28
    3e2e:	52 97       	sbiw	r26, 0x12	; 18
    3e30:	2e 81       	ldd	r18, Y+6	; 0x06
    3e32:	3f 81       	ldd	r19, Y+7	; 0x07
    3e34:	55 96       	adiw	r26, 0x15	; 21
    3e36:	3c 93       	st	X, r19
    3e38:	2e 93       	st	-X, r18
    3e3a:	54 97       	sbiw	r26, 0x14	; 20
    3e3c:	4e 81       	ldd	r20, Y+6	; 0x06
    3e3e:	5f 81       	ldd	r21, Y+7	; 0x07
    3e40:	9d 01       	movw	r18, r26
    3e42:	22 5f       	subi	r18, 0xF2	; 242
    3e44:	3f 4f       	sbci	r19, 0xFF	; 255
    3e46:	fa 01       	movw	r30, r20
    3e48:	35 83       	std	Z+5, r19	; 0x05
    3e4a:	24 83       	std	Z+4, r18	; 0x04
    3e4c:	3f 83       	std	Y+7, r19	; 0x07
    3e4e:	2e 83       	std	Y+6, r18	; 0x06
    3e50:	59 96       	adiw	r26, 0x19	; 25
    3e52:	7c 93       	st	X, r23
    3e54:	6e 93       	st	-X, r22
    3e56:	58 97       	sbiw	r26, 0x18	; 24
    3e58:	fb 01       	movw	r30, r22
    3e5a:	90 81       	ld	r25, Z
    3e5c:	9f 5f       	subi	r25, 0xFF	; 255
    3e5e:	90 83       	st	Z, r25
    3e60:	5a 96       	adiw	r26, 0x1a	; 26
    3e62:	2c 91       	ld	r18, X
    3e64:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <pxCurrentTCB>
    3e68:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>
    3e6c:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e6e:	92 17       	cp	r25, r18
    3e70:	48 f4       	brcc	.+18     	; 0x3e84 <xTaskGenericNotifyFromISR+0x22c>
    3e72:	c1 14       	cp	r12, r1
    3e74:	d1 04       	cpc	r13, r1
    3e76:	19 f0       	breq	.+6      	; 0x3e7e <xTaskGenericNotifyFromISR+0x226>
    3e78:	91 e0       	ldi	r25, 0x01	; 1
    3e7a:	f6 01       	movw	r30, r12
    3e7c:	90 83       	st	Z, r25
    3e7e:	91 e0       	ldi	r25, 0x01	; 1
    3e80:	90 93 f9 13 	sts	0x13F9, r25	; 0x8013f9 <xYieldPending>
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	0f 91       	pop	r16
    3e8a:	ff 90       	pop	r15
    3e8c:	ef 90       	pop	r14
    3e8e:	df 90       	pop	r13
    3e90:	cf 90       	pop	r12
    3e92:	bf 90       	pop	r11
    3e94:	af 90       	pop	r10
    3e96:	9f 90       	pop	r9
    3e98:	8f 90       	pop	r8
    3e9a:	08 95       	ret

00003e9c <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3e9c:	00 97       	sbiw	r24, 0x00	; 0
    3e9e:	21 f4       	brne	.+8      	; 0x3ea8 <xTaskGenericNotifyStateClear+0xc>
    3ea0:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxCurrentTCB>
    3ea4:	90 91 b0 14 	lds	r25, 0x14B0	; 0x8014b0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3eae:	70 e0       	ldi	r23, 0x00	; 0
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	e6 0f       	add	r30, r22
    3eb4:	f7 1f       	adc	r31, r23
    3eb6:	23 a9       	ldd	r18, Z+51	; 0x33
    3eb8:	22 30       	cpi	r18, 0x02	; 2
    3eba:	31 f4       	brne	.+12     	; 0x3ec8 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	e6 0f       	add	r30, r22
    3ec0:	f7 1f       	adc	r31, r23
    3ec2:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	01 c0       	rjmp	.+2      	; 0x3eca <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3eca:	0f 90       	pop	r0
    3ecc:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3ece:	08 95       	ret

00003ed0 <prvGetNextExpireTime>:
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	e0 91 bb 14 	lds	r30, 0x14BB	; 0x8014bb <pxCurrentTimerList>
    3ed6:	f0 91 bc 14 	lds	r31, 0x14BC	; 0x8014bc <pxCurrentTimerList+0x1>
    3eda:	80 81       	ld	r24, Z
    3edc:	91 e0       	ldi	r25, 0x01	; 1
    3ede:	81 11       	cpse	r24, r1
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	9c 93       	st	X, r25
    3ee4:	91 11       	cpse	r25, r1
    3ee6:	08 c0       	rjmp	.+16     	; 0x3ef8 <prvGetNextExpireTime+0x28>
    3ee8:	07 80       	ldd	r0, Z+7	; 0x07
    3eea:	f0 85       	ldd	r31, Z+8	; 0x08
    3eec:	e0 2d       	mov	r30, r0
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	08 95       	ret
    3ef8:	60 e0       	ldi	r22, 0x00	; 0
    3efa:	70 e0       	ldi	r23, 0x00	; 0
    3efc:	cb 01       	movw	r24, r22
    3efe:	08 95       	ret

00003f00 <prvInsertTimerInActiveList>:
    3f00:	cf 92       	push	r12
    3f02:	df 92       	push	r13
    3f04:	ef 92       	push	r14
    3f06:	ff 92       	push	r15
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	42 83       	std	Z+2, r20	; 0x02
    3f10:	53 83       	std	Z+3, r21	; 0x03
    3f12:	64 83       	std	Z+4, r22	; 0x04
    3f14:	75 83       	std	Z+5, r23	; 0x05
    3f16:	93 87       	std	Z+11, r25	; 0x0b
    3f18:	82 87       	std	Z+10, r24	; 0x0a
    3f1a:	04 17       	cp	r16, r20
    3f1c:	15 07       	cpc	r17, r21
    3f1e:	26 07       	cpc	r18, r22
    3f20:	37 07       	cpc	r19, r23
    3f22:	c0 f0       	brcs	.+48     	; 0x3f54 <prvInsertTimerInActiveList+0x54>
    3f24:	0c 19       	sub	r16, r12
    3f26:	1d 09       	sbc	r17, r13
    3f28:	2e 09       	sbc	r18, r14
    3f2a:	3f 09       	sbc	r19, r15
    3f2c:	86 85       	ldd	r24, Z+14	; 0x0e
    3f2e:	97 85       	ldd	r25, Z+15	; 0x0f
    3f30:	a0 89       	ldd	r26, Z+16	; 0x10
    3f32:	b1 89       	ldd	r27, Z+17	; 0x11
    3f34:	08 17       	cp	r16, r24
    3f36:	19 07       	cpc	r17, r25
    3f38:	2a 07       	cpc	r18, r26
    3f3a:	3b 07       	cpc	r19, r27
    3f3c:	00 f5       	brcc	.+64     	; 0x3f7e <prvInsertTimerInActiveList+0x7e>
    3f3e:	bf 01       	movw	r22, r30
    3f40:	6e 5f       	subi	r22, 0xFE	; 254
    3f42:	7f 4f       	sbci	r23, 0xFF	; 255
    3f44:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <pxOverflowTimerList>
    3f48:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <pxOverflowTimerList+0x1>
    3f4c:	0e 94 92 0a 	call	0x1524	; 0x1524 <vListInsert>
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	18 c0       	rjmp	.+48     	; 0x3f84 <prvInsertTimerInActiveList+0x84>
    3f54:	0c 15       	cp	r16, r12
    3f56:	1d 05       	cpc	r17, r13
    3f58:	2e 05       	cpc	r18, r14
    3f5a:	3f 05       	cpc	r19, r15
    3f5c:	28 f4       	brcc	.+10     	; 0x3f68 <prvInsertTimerInActiveList+0x68>
    3f5e:	4c 15       	cp	r20, r12
    3f60:	5d 05       	cpc	r21, r13
    3f62:	6e 05       	cpc	r22, r14
    3f64:	7f 05       	cpc	r23, r15
    3f66:	68 f4       	brcc	.+26     	; 0x3f82 <prvInsertTimerInActiveList+0x82>
    3f68:	bf 01       	movw	r22, r30
    3f6a:	6e 5f       	subi	r22, 0xFE	; 254
    3f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6e:	80 91 bb 14 	lds	r24, 0x14BB	; 0x8014bb <pxCurrentTimerList>
    3f72:	90 91 bc 14 	lds	r25, 0x14BC	; 0x8014bc <pxCurrentTimerList+0x1>
    3f76:	0e 94 92 0a 	call	0x1524	; 0x1524 <vListInsert>
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	03 c0       	rjmp	.+6      	; 0x3f84 <prvInsertTimerInActiveList+0x84>
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	01 c0       	rjmp	.+2      	; 0x3f84 <prvInsertTimerInActiveList+0x84>
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	ff 90       	pop	r15
    3f8a:	ef 90       	pop	r14
    3f8c:	df 90       	pop	r13
    3f8e:	cf 90       	pop	r12
    3f90:	08 95       	ret

00003f92 <prvCheckForValidListAndQueue>:
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	0f 92       	push	r0
    3f98:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <xTimerQueue>
    3f9c:	90 91 b8 14 	lds	r25, 0x14B8	; 0x8014b8 <xTimerQueue+0x1>
    3fa0:	89 2b       	or	r24, r25
    3fa2:	e9 f4       	brne	.+58     	; 0x3fde <prvCheckForValidListAndQueue+0x4c>
    3fa4:	88 ec       	ldi	r24, 0xC8	; 200
    3fa6:	94 e1       	ldi	r25, 0x14	; 20
    3fa8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    3fac:	8d eb       	ldi	r24, 0xBD	; 189
    3fae:	94 e1       	ldi	r25, 0x14	; 20
    3fb0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vListInitialise>
    3fb4:	88 ec       	ldi	r24, 0xC8	; 200
    3fb6:	94 e1       	ldi	r25, 0x14	; 20
    3fb8:	90 93 bc 14 	sts	0x14BC, r25	; 0x8014bc <pxCurrentTimerList+0x1>
    3fbc:	80 93 bb 14 	sts	0x14BB, r24	; 0x8014bb <pxCurrentTimerList>
    3fc0:	8d eb       	ldi	r24, 0xBD	; 189
    3fc2:	94 e1       	ldi	r25, 0x14	; 20
    3fc4:	90 93 ba 14 	sts	0x14BA, r25	; 0x8014ba <pxOverflowTimerList+0x1>
    3fc8:	80 93 b9 14 	sts	0x14B9, r24	; 0x8014b9 <pxOverflowTimerList>
    3fcc:	40 e0       	ldi	r20, 0x00	; 0
    3fce:	67 e0       	ldi	r22, 0x07	; 7
    3fd0:	8a e0       	ldi	r24, 0x0A	; 10
    3fd2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <xQueueGenericCreate>
    3fd6:	90 93 b8 14 	sts	0x14B8, r25	; 0x8014b8 <xTimerQueue+0x1>
    3fda:	80 93 b7 14 	sts	0x14B7, r24	; 0x8014b7 <xTimerQueue>
    3fde:	0f 90       	pop	r0
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	08 95       	ret

00003fe4 <xTimerCreateTimerTask>:
    3fe4:	ef 92       	push	r14
    3fe6:	ff 92       	push	r15
    3fe8:	0f 93       	push	r16
    3fea:	d3 df       	rcall	.-90     	; 0x3f92 <prvCheckForValidListAndQueue>
    3fec:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <xTimerQueue>
    3ff0:	90 91 b8 14 	lds	r25, 0x14B8	; 0x8014b8 <xTimerQueue+0x1>
    3ff4:	89 2b       	or	r24, r25
    3ff6:	91 f0       	breq	.+36     	; 0x401c <xTimerCreateTimerTask+0x38>
    3ff8:	0f 2e       	mov	r0, r31
    3ffa:	f5 eb       	ldi	r31, 0xB5	; 181
    3ffc:	ef 2e       	mov	r14, r31
    3ffe:	f4 e1       	ldi	r31, 0x14	; 20
    4000:	ff 2e       	mov	r15, r31
    4002:	f0 2d       	mov	r31, r0
    4004:	03 e0       	ldi	r16, 0x03	; 3
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	40 ec       	ldi	r20, 0xC0	; 192
    400c:	50 e0       	ldi	r21, 0x00	; 0
    400e:	65 e2       	ldi	r22, 0x25	; 37
    4010:	75 e0       	ldi	r23, 0x05	; 5
    4012:	89 e5       	ldi	r24, 0x59	; 89
    4014:	91 e0       	ldi	r25, 0x01	; 1
    4016:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <xTaskCreate>
    401a:	01 c0       	rjmp	.+2      	; 0x401e <xTimerCreateTimerTask+0x3a>
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	0f 91       	pop	r16
    4020:	ff 90       	pop	r15
    4022:	ef 90       	pop	r14
    4024:	08 95       	ret

00004026 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    4026:	8f 92       	push	r8
    4028:	9f 92       	push	r9
    402a:	af 92       	push	r10
    402c:	bf 92       	push	r11
    402e:	cf 92       	push	r12
    4030:	df 92       	push	r13
    4032:	ef 92       	push	r14
    4034:	ff 92       	push	r15
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	27 97       	sbiw	r28, 0x07	; 7
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    404e:	e0 91 b7 14 	lds	r30, 0x14B7	; 0x8014b7 <xTimerQueue>
    4052:	f0 91 b8 14 	lds	r31, 0x14B8	; 0x8014b8 <xTimerQueue+0x1>
    4056:	30 97       	sbiw	r30, 0x00	; 0
    4058:	81 f1       	breq	.+96     	; 0x40ba <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    405a:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    405c:	2a 83       	std	Y+2, r18	; 0x02
    405e:	3b 83       	std	Y+3, r19	; 0x03
    4060:	4c 83       	std	Y+4, r20	; 0x04
    4062:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    4064:	9f 83       	std	Y+7, r25	; 0x07
    4066:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4068:	66 30       	cpi	r22, 0x06	; 6
    406a:	f4 f4       	brge	.+60     	; 0x40a8 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    406c:	c3 da       	rcall	.-2682   	; 0x35f4 <xTaskGetSchedulerState>
    406e:	82 30       	cpi	r24, 0x02	; 2
    4070:	69 f4       	brne	.+26     	; 0x408c <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4072:	00 e0       	ldi	r16, 0x00	; 0
    4074:	a7 01       	movw	r20, r14
    4076:	96 01       	movw	r18, r12
    4078:	be 01       	movw	r22, r28
    407a:	6f 5f       	subi	r22, 0xFF	; 255
    407c:	7f 4f       	sbci	r23, 0xFF	; 255
    407e:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <xTimerQueue>
    4082:	90 91 b8 14 	lds	r25, 0x14B8	; 0x8014b8 <xTimerQueue+0x1>
    4086:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
    408a:	18 c0       	rjmp	.+48     	; 0x40bc <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    408c:	00 e0       	ldi	r16, 0x00	; 0
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	a9 01       	movw	r20, r18
    4094:	be 01       	movw	r22, r28
    4096:	6f 5f       	subi	r22, 0xFF	; 255
    4098:	7f 4f       	sbci	r23, 0xFF	; 255
    409a:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <xTimerQueue>
    409e:	90 91 b8 14 	lds	r25, 0x14B8	; 0x8014b8 <xTimerQueue+0x1>
    40a2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xQueueGenericSend>
    40a6:	0a c0       	rjmp	.+20     	; 0x40bc <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	a8 01       	movw	r20, r16
    40ac:	be 01       	movw	r22, r28
    40ae:	6f 5f       	subi	r22, 0xFF	; 255
    40b0:	7f 4f       	sbci	r23, 0xFF	; 255
    40b2:	cf 01       	movw	r24, r30
    40b4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <xQueueGenericSendFromISR>
    40b8:	01 c0       	rjmp	.+2      	; 0x40bc <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    40ba:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    40bc:	27 96       	adiw	r28, 0x07	; 7
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	ff 90       	pop	r15
    40d2:	ef 90       	pop	r14
    40d4:	df 90       	pop	r13
    40d6:	cf 90       	pop	r12
    40d8:	bf 90       	pop	r11
    40da:	af 90       	pop	r10
    40dc:	9f 90       	pop	r9
    40de:	8f 90       	pop	r8
    40e0:	08 95       	ret

000040e2 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    40e2:	8f 92       	push	r8
    40e4:	9f 92       	push	r9
    40e6:	af 92       	push	r10
    40e8:	bf 92       	push	r11
    40ea:	cf 92       	push	r12
    40ec:	df 92       	push	r13
    40ee:	ef 92       	push	r14
    40f0:	ff 92       	push	r15
    40f2:	0f 93       	push	r16
    40f4:	1f 93       	push	r17
    40f6:	cf 93       	push	r28
    40f8:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    40fa:	3b c0       	rjmp	.+118    	; 0x4172 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    40fc:	07 80       	ldd	r0, Z+7	; 0x07
    40fe:	f0 85       	ldd	r31, Z+8	; 0x08
    4100:	e0 2d       	mov	r30, r0
    4102:	80 80       	ld	r8, Z
    4104:	91 80       	ldd	r9, Z+1	; 0x01
    4106:	a2 80       	ldd	r10, Z+2	; 0x02
    4108:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    410a:	c0 85       	ldd	r28, Z+8	; 0x08
    410c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    410e:	8e 01       	movw	r16, r28
    4110:	0e 5f       	subi	r16, 0xFE	; 254
    4112:	1f 4f       	sbci	r17, 0xFF	; 255
    4114:	c8 01       	movw	r24, r16
    4116:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    411a:	ec 89       	ldd	r30, Y+20	; 0x14
    411c:	fd 89       	ldd	r31, Y+21	; 0x15
    411e:	ce 01       	movw	r24, r28
    4120:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4122:	8e 89       	ldd	r24, Y+22	; 0x16
    4124:	82 ff       	sbrs	r24, 2
    4126:	25 c0       	rjmp	.+74     	; 0x4172 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4128:	8e 85       	ldd	r24, Y+14	; 0x0e
    412a:	9f 85       	ldd	r25, Y+15	; 0x0f
    412c:	a8 89       	ldd	r26, Y+16	; 0x10
    412e:	b9 89       	ldd	r27, Y+17	; 0x11
    4130:	88 0d       	add	r24, r8
    4132:	99 1d       	adc	r25, r9
    4134:	aa 1d       	adc	r26, r10
    4136:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    4138:	88 16       	cp	r8, r24
    413a:	99 06       	cpc	r9, r25
    413c:	aa 06       	cpc	r10, r26
    413e:	bb 06       	cpc	r11, r27
    4140:	70 f4       	brcc	.+28     	; 0x415e <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4142:	8a 83       	std	Y+2, r24	; 0x02
    4144:	9b 83       	std	Y+3, r25	; 0x03
    4146:	ac 83       	std	Y+4, r26	; 0x04
    4148:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    414a:	db 87       	std	Y+11, r29	; 0x0b
    414c:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    414e:	b8 01       	movw	r22, r16
    4150:	80 91 bb 14 	lds	r24, 0x14BB	; 0x8014bb <pxCurrentTimerList>
    4154:	90 91 bc 14 	lds	r25, 0x14BC	; 0x8014bc <pxCurrentTimerList+0x1>
    4158:	0e 94 92 0a 	call	0x1524	; 0x1524 <vListInsert>
    415c:	0a c0       	rjmp	.+20     	; 0x4172 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    415e:	c1 2c       	mov	r12, r1
    4160:	d1 2c       	mov	r13, r1
    4162:	76 01       	movw	r14, r12
    4164:	00 e0       	ldi	r16, 0x00	; 0
    4166:	10 e0       	ldi	r17, 0x00	; 0
    4168:	a5 01       	movw	r20, r10
    416a:	94 01       	movw	r18, r8
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	ce 01       	movw	r24, r28
    4170:	5a df       	rcall	.-332    	; 0x4026 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4172:	e0 91 bb 14 	lds	r30, 0x14BB	; 0x8014bb <pxCurrentTimerList>
    4176:	f0 91 bc 14 	lds	r31, 0x14BC	; 0x8014bc <pxCurrentTimerList+0x1>
    417a:	80 81       	ld	r24, Z
    417c:	81 11       	cpse	r24, r1
    417e:	be cf       	rjmp	.-132    	; 0x40fc <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    4180:	80 91 b9 14 	lds	r24, 0x14B9	; 0x8014b9 <pxOverflowTimerList>
    4184:	90 91 ba 14 	lds	r25, 0x14BA	; 0x8014ba <pxOverflowTimerList+0x1>
    4188:	90 93 bc 14 	sts	0x14BC, r25	; 0x8014bc <pxCurrentTimerList+0x1>
    418c:	80 93 bb 14 	sts	0x14BB, r24	; 0x8014bb <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    4190:	f0 93 ba 14 	sts	0x14BA, r31	; 0x8014ba <pxOverflowTimerList+0x1>
    4194:	e0 93 b9 14 	sts	0x14B9, r30	; 0x8014b9 <pxOverflowTimerList>
    }
    4198:	df 91       	pop	r29
    419a:	cf 91       	pop	r28
    419c:	1f 91       	pop	r17
    419e:	0f 91       	pop	r16
    41a0:	ff 90       	pop	r15
    41a2:	ef 90       	pop	r14
    41a4:	df 90       	pop	r13
    41a6:	cf 90       	pop	r12
    41a8:	bf 90       	pop	r11
    41aa:	af 90       	pop	r10
    41ac:	9f 90       	pop	r9
    41ae:	8f 90       	pop	r8
    41b0:	08 95       	ret

000041b2 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    41b2:	cf 92       	push	r12
    41b4:	df 92       	push	r13
    41b6:	ef 92       	push	r14
    41b8:	ff 92       	push	r15
    41ba:	cf 93       	push	r28
    41bc:	df 93       	push	r29
    41be:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    41c0:	0e 94 7d 15 	call	0x2afa	; 0x2afa <xTaskGetTickCount>
    41c4:	6b 01       	movw	r12, r22
    41c6:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    41c8:	80 91 b1 14 	lds	r24, 0x14B1	; 0x8014b1 <xLastTime.2436>
    41cc:	90 91 b2 14 	lds	r25, 0x14B2	; 0x8014b2 <xLastTime.2436+0x1>
    41d0:	a0 91 b3 14 	lds	r26, 0x14B3	; 0x8014b3 <xLastTime.2436+0x2>
    41d4:	b0 91 b4 14 	lds	r27, 0x14B4	; 0x8014b4 <xLastTime.2436+0x3>
    41d8:	c8 16       	cp	r12, r24
    41da:	d9 06       	cpc	r13, r25
    41dc:	ea 06       	cpc	r14, r26
    41de:	fb 06       	cpc	r15, r27
    41e0:	20 f4       	brcc	.+8      	; 0x41ea <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    41e2:	7f df       	rcall	.-258    	; 0x40e2 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	88 83       	st	Y, r24
    41e8:	01 c0       	rjmp	.+2      	; 0x41ec <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    41ea:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    41ec:	c0 92 b1 14 	sts	0x14B1, r12	; 0x8014b1 <xLastTime.2436>
    41f0:	d0 92 b2 14 	sts	0x14B2, r13	; 0x8014b2 <xLastTime.2436+0x1>
    41f4:	e0 92 b3 14 	sts	0x14B3, r14	; 0x8014b3 <xLastTime.2436+0x2>
    41f8:	f0 92 b4 14 	sts	0x14B4, r15	; 0x8014b4 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    41fc:	c7 01       	movw	r24, r14
    41fe:	b6 01       	movw	r22, r12
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	ff 90       	pop	r15
    4206:	ef 90       	pop	r14
    4208:	df 90       	pop	r13
    420a:	cf 90       	pop	r12
    420c:	08 95       	ret

0000420e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    420e:	4f 92       	push	r4
    4210:	5f 92       	push	r5
    4212:	6f 92       	push	r6
    4214:	7f 92       	push	r7
    4216:	8f 92       	push	r8
    4218:	9f 92       	push	r9
    421a:	af 92       	push	r10
    421c:	bf 92       	push	r11
    421e:	cf 92       	push	r12
    4220:	df 92       	push	r13
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	4b 01       	movw	r8, r22
    4230:	5c 01       	movw	r10, r24
    4232:	29 01       	movw	r4, r18
    4234:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4236:	e0 91 bb 14 	lds	r30, 0x14BB	; 0x8014bb <pxCurrentTimerList>
    423a:	f0 91 bc 14 	lds	r31, 0x14BC	; 0x8014bc <pxCurrentTimerList+0x1>
    423e:	07 80       	ldd	r0, Z+7	; 0x07
    4240:	f0 85       	ldd	r31, Z+8	; 0x08
    4242:	e0 2d       	mov	r30, r0
    4244:	c0 85       	ldd	r28, Z+8	; 0x08
    4246:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4248:	ce 01       	movw	r24, r28
    424a:	02 96       	adiw	r24, 0x02	; 2
    424c:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4250:	8e 89       	ldd	r24, Y+22	; 0x16
    4252:	82 ff       	sbrs	r24, 2
    4254:	1b c0       	rjmp	.+54     	; 0x428c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    4256:	4e 85       	ldd	r20, Y+14	; 0x0e
    4258:	5f 85       	ldd	r21, Y+15	; 0x0f
    425a:	68 89       	ldd	r22, Y+16	; 0x10
    425c:	79 89       	ldd	r23, Y+17	; 0x11
    425e:	48 0d       	add	r20, r8
    4260:	59 1d       	adc	r21, r9
    4262:	6a 1d       	adc	r22, r10
    4264:	7b 1d       	adc	r23, r11
    4266:	75 01       	movw	r14, r10
    4268:	64 01       	movw	r12, r8
    426a:	93 01       	movw	r18, r6
    426c:	82 01       	movw	r16, r4
    426e:	ce 01       	movw	r24, r28
    4270:	47 de       	rcall	.-882    	; 0x3f00 <prvInsertTimerInActiveList>
    4272:	88 23       	and	r24, r24
    4274:	69 f0       	breq	.+26     	; 0x4290 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4276:	c1 2c       	mov	r12, r1
    4278:	d1 2c       	mov	r13, r1
    427a:	76 01       	movw	r14, r12
    427c:	00 e0       	ldi	r16, 0x00	; 0
    427e:	10 e0       	ldi	r17, 0x00	; 0
    4280:	a5 01       	movw	r20, r10
    4282:	94 01       	movw	r18, r8
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	ce 01       	movw	r24, r28
    4288:	ce de       	rcall	.-612    	; 0x4026 <xTimerGenericCommand>
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    428c:	8e 7f       	andi	r24, 0xFE	; 254
    428e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4290:	ec 89       	ldd	r30, Y+20	; 0x14
    4292:	fd 89       	ldd	r31, Y+21	; 0x15
    4294:	ce 01       	movw	r24, r28
    4296:	19 95       	eicall
    }
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	df 90       	pop	r13
    42a6:	cf 90       	pop	r12
    42a8:	bf 90       	pop	r11
    42aa:	af 90       	pop	r10
    42ac:	9f 90       	pop	r9
    42ae:	8f 90       	pop	r8
    42b0:	7f 90       	pop	r7
    42b2:	6f 90       	pop	r6
    42b4:	5f 90       	pop	r5
    42b6:	4f 90       	pop	r4
    42b8:	08 95       	ret

000042ba <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    42ba:	8f 92       	push	r8
    42bc:	9f 92       	push	r9
    42be:	af 92       	push	r10
    42c0:	bf 92       	push	r11
    42c2:	cf 92       	push	r12
    42c4:	df 92       	push	r13
    42c6:	ef 92       	push	r14
    42c8:	ff 92       	push	r15
    42ca:	1f 93       	push	r17
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	1f 92       	push	r1
    42d2:	cd b7       	in	r28, 0x3d	; 61
    42d4:	de b7       	in	r29, 0x3e	; 62
    42d6:	6b 01       	movw	r12, r22
    42d8:	7c 01       	movw	r14, r24
    42da:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    42dc:	0e 94 77 15 	call	0x2aee	; 0x2aee <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    42e0:	ce 01       	movw	r24, r28
    42e2:	01 96       	adiw	r24, 0x01	; 1
    42e4:	66 df       	rcall	.-308    	; 0x41b2 <prvSampleTimeNow>
    42e6:	4b 01       	movw	r8, r22
    42e8:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	81 11       	cpse	r24, r1
    42ee:	2d c0       	rjmp	.+90     	; 0x434a <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    42f0:	11 11       	cpse	r17, r1
    42f2:	0d c0       	rjmp	.+26     	; 0x430e <prvProcessTimerOrBlockTask+0x54>
    42f4:	8c 14       	cp	r8, r12
    42f6:	9d 04       	cpc	r9, r13
    42f8:	ae 04       	cpc	r10, r14
    42fa:	bf 04       	cpc	r11, r15
    42fc:	40 f0       	brcs	.+16     	; 0x430e <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    42fe:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4302:	a5 01       	movw	r20, r10
    4304:	94 01       	movw	r18, r8
    4306:	c7 01       	movw	r24, r14
    4308:	b6 01       	movw	r22, r12
    430a:	81 df       	rcall	.-254    	; 0x420e <prvProcessExpiredTimer>
    430c:	20 c0       	rjmp	.+64     	; 0x434e <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    430e:	11 23       	and	r17, r17
    4310:	41 f0       	breq	.+16     	; 0x4322 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4312:	e0 91 b9 14 	lds	r30, 0x14B9	; 0x8014b9 <pxOverflowTimerList>
    4316:	f0 91 ba 14 	lds	r31, 0x14BA	; 0x8014ba <pxOverflowTimerList+0x1>
    431a:	80 81       	ld	r24, Z
    431c:	11 e0       	ldi	r17, 0x01	; 1
    431e:	81 11       	cpse	r24, r1
    4320:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4322:	b7 01       	movw	r22, r14
    4324:	a6 01       	movw	r20, r12
    4326:	48 19       	sub	r20, r8
    4328:	59 09       	sbc	r21, r9
    432a:	6a 09       	sbc	r22, r10
    432c:	7b 09       	sbc	r23, r11
    432e:	21 2f       	mov	r18, r17
    4330:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <xTimerQueue>
    4334:	90 91 b8 14 	lds	r25, 0x14B8	; 0x8014b8 <xTimerQueue+0x1>
    4338:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    433c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
    4340:	81 11       	cpse	r24, r1
    4342:	05 c0       	rjmp	.+10     	; 0x434e <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    4344:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    4348:	02 c0       	rjmp	.+4      	; 0x434e <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    434a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskResumeAll>
            }
        }
    }
    434e:	0f 90       	pop	r0
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	ff 90       	pop	r15
    4358:	ef 90       	pop	r14
    435a:	df 90       	pop	r13
    435c:	cf 90       	pop	r12
    435e:	bf 90       	pop	r11
    4360:	af 90       	pop	r10
    4362:	9f 90       	pop	r9
    4364:	8f 90       	pop	r8
    4366:	08 95       	ret

00004368 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    4368:	af 92       	push	r10
    436a:	bf 92       	push	r11
    436c:	cf 92       	push	r12
    436e:	df 92       	push	r13
    4370:	ef 92       	push	r14
    4372:	ff 92       	push	r15
    4374:	0f 93       	push	r16
    4376:	1f 93       	push	r17
    4378:	cf 93       	push	r28
    437a:	df 93       	push	r29
    437c:	cd b7       	in	r28, 0x3d	; 61
    437e:	de b7       	in	r29, 0x3e	; 62
    4380:	28 97       	sbiw	r28, 0x08	; 8
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    438c:	82 c0       	rjmp	.+260    	; 0x4492 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    438e:	89 81       	ldd	r24, Y+1	; 0x01
    4390:	88 23       	and	r24, r24
    4392:	0c f4       	brge	.+2      	; 0x4396 <prvProcessReceivedCommands+0x2e>
    4394:	7e c0       	rjmp	.+252    	; 0x4492 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4396:	ae 80       	ldd	r10, Y+6	; 0x06
    4398:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    439a:	d5 01       	movw	r26, r10
    439c:	1c 96       	adiw	r26, 0x0c	; 12
    439e:	8d 91       	ld	r24, X+
    43a0:	9c 91       	ld	r25, X
    43a2:	1d 97       	sbiw	r26, 0x0d	; 13
    43a4:	89 2b       	or	r24, r25
    43a6:	21 f0       	breq	.+8      	; 0x43b0 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    43a8:	c5 01       	movw	r24, r10
    43aa:	02 96       	adiw	r24, 0x02	; 2
    43ac:	0e 94 cf 0a 	call	0x159e	; 0x159e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    43b0:	ce 01       	movw	r24, r28
    43b2:	08 96       	adiw	r24, 0x08	; 8
    43b4:	fe de       	rcall	.-516    	; 0x41b2 <prvSampleTimeNow>
    43b6:	8b 01       	movw	r16, r22
    43b8:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    43ba:	e9 81       	ldd	r30, Y+1	; 0x01
    43bc:	0e 2e       	mov	r0, r30
    43be:	00 0c       	add	r0, r0
    43c0:	ff 0b       	sbc	r31, r31
    43c2:	ea 30       	cpi	r30, 0x0A	; 10
    43c4:	f1 05       	cpc	r31, r1
    43c6:	08 f0       	brcs	.+2      	; 0x43ca <prvProcessReceivedCommands+0x62>
    43c8:	64 c0       	rjmp	.+200    	; 0x4492 <prvProcessReceivedCommands+0x12a>
    43ca:	88 27       	eor	r24, r24
    43cc:	ee 58       	subi	r30, 0x8E	; 142
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	8f 4f       	sbci	r24, 0xFF	; 255
    43d2:	0c 94 0a 36 	jmp	0x6c14	; 0x6c14 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    43d6:	f5 01       	movw	r30, r10
    43d8:	86 89       	ldd	r24, Z+22	; 0x16
    43da:	81 60       	ori	r24, 0x01	; 1
    43dc:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    43de:	ca 80       	ldd	r12, Y+2	; 0x02
    43e0:	db 80       	ldd	r13, Y+3	; 0x03
    43e2:	ec 80       	ldd	r14, Y+4	; 0x04
    43e4:	fd 80       	ldd	r15, Y+5	; 0x05
    43e6:	46 85       	ldd	r20, Z+14	; 0x0e
    43e8:	57 85       	ldd	r21, Z+15	; 0x0f
    43ea:	60 89       	ldd	r22, Z+16	; 0x10
    43ec:	71 89       	ldd	r23, Z+17	; 0x11
    43ee:	4c 0d       	add	r20, r12
    43f0:	5d 1d       	adc	r21, r13
    43f2:	6e 1d       	adc	r22, r14
    43f4:	7f 1d       	adc	r23, r15
    43f6:	c5 01       	movw	r24, r10
    43f8:	83 dd       	rcall	.-1274   	; 0x3f00 <prvInsertTimerInActiveList>
    43fa:	88 23       	and	r24, r24
    43fc:	09 f4       	brne	.+2      	; 0x4400 <prvProcessReceivedCommands+0x98>
    43fe:	49 c0       	rjmp	.+146    	; 0x4492 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4400:	d5 01       	movw	r26, r10
    4402:	54 96       	adiw	r26, 0x14	; 20
    4404:	ed 91       	ld	r30, X+
    4406:	fc 91       	ld	r31, X
    4408:	55 97       	sbiw	r26, 0x15	; 21
    440a:	c5 01       	movw	r24, r10
    440c:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    440e:	f5 01       	movw	r30, r10
    4410:	86 89       	ldd	r24, Z+22	; 0x16
    4412:	82 ff       	sbrs	r24, 2
    4414:	3e c0       	rjmp	.+124    	; 0x4492 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4416:	4a 81       	ldd	r20, Y+2	; 0x02
    4418:	5b 81       	ldd	r21, Y+3	; 0x03
    441a:	6c 81       	ldd	r22, Y+4	; 0x04
    441c:	7d 81       	ldd	r23, Y+5	; 0x05
    441e:	86 85       	ldd	r24, Z+14	; 0x0e
    4420:	97 85       	ldd	r25, Z+15	; 0x0f
    4422:	a0 89       	ldd	r26, Z+16	; 0x10
    4424:	b1 89       	ldd	r27, Z+17	; 0x11
    4426:	9a 01       	movw	r18, r20
    4428:	ab 01       	movw	r20, r22
    442a:	28 0f       	add	r18, r24
    442c:	39 1f       	adc	r19, r25
    442e:	4a 1f       	adc	r20, r26
    4430:	5b 1f       	adc	r21, r27
    4432:	c1 2c       	mov	r12, r1
    4434:	d1 2c       	mov	r13, r1
    4436:	76 01       	movw	r14, r12
    4438:	00 e0       	ldi	r16, 0x00	; 0
    443a:	10 e0       	ldi	r17, 0x00	; 0
    443c:	60 e0       	ldi	r22, 0x00	; 0
    443e:	c5 01       	movw	r24, r10
    4440:	f2 dd       	rcall	.-1052   	; 0x4026 <xTimerGenericCommand>
    4442:	27 c0       	rjmp	.+78     	; 0x4492 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4444:	d5 01       	movw	r26, r10
    4446:	56 96       	adiw	r26, 0x16	; 22
    4448:	8c 91       	ld	r24, X
    444a:	56 97       	sbiw	r26, 0x16	; 22
    444c:	8e 7f       	andi	r24, 0xFE	; 254
    444e:	56 96       	adiw	r26, 0x16	; 22
    4450:	8c 93       	st	X, r24
                        break;
    4452:	1f c0       	rjmp	.+62     	; 0x4492 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4454:	f5 01       	movw	r30, r10
    4456:	86 89       	ldd	r24, Z+22	; 0x16
    4458:	81 60       	ori	r24, 0x01	; 1
    445a:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    445c:	4a 81       	ldd	r20, Y+2	; 0x02
    445e:	5b 81       	ldd	r21, Y+3	; 0x03
    4460:	6c 81       	ldd	r22, Y+4	; 0x04
    4462:	7d 81       	ldd	r23, Y+5	; 0x05
    4464:	46 87       	std	Z+14, r20	; 0x0e
    4466:	57 87       	std	Z+15, r21	; 0x0f
    4468:	60 8b       	std	Z+16, r22	; 0x10
    446a:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    446c:	40 0f       	add	r20, r16
    446e:	51 1f       	adc	r21, r17
    4470:	62 1f       	adc	r22, r18
    4472:	73 1f       	adc	r23, r19
    4474:	68 01       	movw	r12, r16
    4476:	79 01       	movw	r14, r18
    4478:	c5 01       	movw	r24, r10
    447a:	42 dd       	rcall	.-1404   	; 0x3f00 <prvInsertTimerInActiveList>
                        break;
    447c:	0a c0       	rjmp	.+20     	; 0x4492 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    447e:	f5 01       	movw	r30, r10
    4480:	86 89       	ldd	r24, Z+22	; 0x16
    4482:	81 fd       	sbrc	r24, 1
    4484:	04 c0       	rjmp	.+8      	; 0x448e <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    4486:	c5 01       	movw	r24, r10
    4488:	0e 94 40 0a 	call	0x1480	; 0x1480 <vPortFree>
    448c:	02 c0       	rjmp	.+4      	; 0x4492 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    448e:	8e 7f       	andi	r24, 0xFE	; 254
    4490:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4492:	20 e0       	ldi	r18, 0x00	; 0
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	a9 01       	movw	r20, r18
    4498:	be 01       	movw	r22, r28
    449a:	6f 5f       	subi	r22, 0xFF	; 255
    449c:	7f 4f       	sbci	r23, 0xFF	; 255
    449e:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <xTimerQueue>
    44a2:	90 91 b8 14 	lds	r25, 0x14B8	; 0x8014b8 <xTimerQueue+0x1>
    44a6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <xQueueReceive>
    44aa:	81 11       	cpse	r24, r1
    44ac:	70 cf       	rjmp	.-288    	; 0x438e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    44ae:	28 96       	adiw	r28, 0x08	; 8
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	1f 91       	pop	r17
    44c0:	0f 91       	pop	r16
    44c2:	ff 90       	pop	r15
    44c4:	ef 90       	pop	r14
    44c6:	df 90       	pop	r13
    44c8:	cf 90       	pop	r12
    44ca:	bf 90       	pop	r11
    44cc:	af 90       	pop	r10
    44ce:	08 95       	ret

000044d0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    44d0:	08 95       	ret

000044d2 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    44d2:	84 b1       	in	r24, 0x04	; 4
    44d4:	80 68       	ori	r24, 0x80	; 128
    44d6:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    44d8:	85 b1       	in	r24, 0x05	; 5
    44da:	80 68       	ori	r24, 0x80	; 128
    44dc:	85 b9       	out	0x05, r24	; 5
    44de:	08 95       	ret

000044e0 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    44e0:	83 b1       	in	r24, 0x03	; 3
    44e2:	80 68       	ori	r24, 0x80	; 128
    44e4:	83 b9       	out	0x03, r24	; 3
    44e6:	08 95       	ret

000044e8 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    44e8:	f4 df       	rcall	.-24     	; 0x44d2 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    44ea:	2f ef       	ldi	r18, 0xFF	; 255
    44ec:	80 e7       	ldi	r24, 0x70	; 112
    44ee:	92 e0       	ldi	r25, 0x02	; 2
    44f0:	21 50       	subi	r18, 0x01	; 1
    44f2:	80 40       	sbci	r24, 0x00	; 0
    44f4:	90 40       	sbci	r25, 0x00	; 0
    44f6:	e1 f7       	brne	.-8      	; 0x44f0 <vApplicationMallocFailedHook+0x8>
    44f8:	00 c0       	rjmp	.+0      	; 0x44fa <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    44fa:	00 00       	nop
    44fc:	f1 df       	rcall	.-30     	; 0x44e0 <prvBlinkMainLed>
    44fe:	f5 cf       	rjmp	.-22     	; 0x44ea <vApplicationMallocFailedHook+0x2>

00004500 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    4500:	e8 df       	rcall	.-48     	; 0x44d2 <prvSetMainLedOn>
    4502:	2f ef       	ldi	r18, 0xFF	; 255
    4504:	87 ea       	ldi	r24, 0xA7	; 167
    4506:	91 e6       	ldi	r25, 0x61	; 97
    4508:	21 50       	subi	r18, 0x01	; 1
    450a:	80 40       	sbci	r24, 0x00	; 0
    450c:	90 40       	sbci	r25, 0x00	; 0
    450e:	e1 f7       	brne	.-8      	; 0x4508 <vApplicationStackOverflowHook+0x8>
    4510:	00 c0       	rjmp	.+0      	; 0x4512 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    4512:	00 00       	nop
    4514:	e5 df       	rcall	.-54     	; 0x44e0 <prvBlinkMainLed>
    4516:	f5 cf       	rjmp	.-22     	; 0x4502 <vApplicationStackOverflowHook+0x2>

00004518 <createTasksForSensors>:
#define BIT_CO2_READY (1 << 1)
#define BIT_LIGHT_READY (1 << 2)


void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    4518:	60 91 d5 14 	lds	r22, 0x14D5	; 0x8014d5 <taskReadyBits>
    451c:	70 91 d6 14 	lds	r23, 0x14D6	; 0x8014d6 <taskReadyBits+0x1>
    4520:	21 e0       	ldi	r18, 0x01	; 1
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e0       	ldi	r20, 0x00	; 0
    4526:	50 e0       	ldi	r21, 0x00	; 0
    4528:	83 e0       	ldi	r24, 0x03	; 3
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	0e 94 6c 05 	call	0xad8	; 0xad8 <createTemp>
    4530:	90 93 14 16 	sts	0x1614, r25	; 0x801614 <temperature_sensor+0x1>
    4534:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    4538:	60 91 d5 14 	lds	r22, 0x14D5	; 0x8014d5 <taskReadyBits>
    453c:	70 91 d6 14 	lds	r23, 0x14D6	; 0x8014d6 <taskReadyBits+0x1>
    4540:	22 e0       	ldi	r18, 0x02	; 2
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e0       	ldi	r20, 0x00	; 0
    4546:	50 e0       	ldi	r21, 0x00	; 0
    4548:	83 e0       	ldi	r24, 0x03	; 3
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <createCO2>
    4550:	90 93 18 16 	sts	0x1618, r25	; 0x801618 <co2_sensor+0x1>
    4554:	80 93 17 16 	sts	0x1617, r24	; 0x801617 <co2_sensor>
	lighthandler = createLightSensor(3, taskReadyBits, BIT_LIGHT_READY);
    4558:	60 91 d5 14 	lds	r22, 0x14D5	; 0x8014d5 <taskReadyBits>
    455c:	70 91 d6 14 	lds	r23, 0x14D6	; 0x8014d6 <taskReadyBits+0x1>
    4560:	24 e0       	ldi	r18, 0x04	; 4
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	40 e0       	ldi	r20, 0x00	; 0
    4566:	50 e0       	ldi	r21, 0x00	; 0
    4568:	83 e0       	ldi	r24, 0x03	; 3
    456a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <createLightSensor>
    456e:	90 93 16 16 	sts	0x1616, r25	; 0x801616 <lighthandler+0x1>
    4572:	80 93 15 16 	sts	0x1615, r24	; 0x801615 <lighthandler>
    4576:	08 95       	ret

00004578 <create_tasks_and_semaphores>:
}

void create_tasks_and_semaphores(void)
{
	create_shared_printf();
    4578:	0e 94 9a 03 	call	0x734	; 0x734 <create_shared_printf>
	createTasksForSensors();
    457c:	cd df       	rcall	.-102    	; 0x4518 <createTasksForSensors>
	create_semaphore_mutex_and_sensors(temperature_sensor, co2_sensor, lighthandler);
    457e:	40 91 15 16 	lds	r20, 0x1615	; 0x801615 <lighthandler>
    4582:	50 91 16 16 	lds	r21, 0x1616	; 0x801616 <lighthandler+0x1>
    4586:	60 91 17 16 	lds	r22, 0x1617	; 0x801617 <co2_sensor>
    458a:	70 91 18 16 	lds	r23, 0x1618	; 0x801618 <co2_sensor+0x1>
    458e:	80 91 13 16 	lds	r24, 0x1613	; 0x801613 <temperature_sensor>
    4592:	90 91 14 16 	lds	r25, 0x1614	; 0x801614 <temperature_sensor+0x1>
    4596:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <create_semaphore_mutex_and_sensors>
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
    459a:	60 91 d3 14 	lds	r22, 0x14D3	; 0x8014d3 <downLinkMessageBufferHandle>
    459e:	70 91 d4 14 	lds	r23, 0x14D4	; 0x8014d4 <downLinkMessageBufferHandle+0x1>
    45a2:	84 e0       	ldi	r24, 0x04	; 4
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	0e 94 3f 02 	call	0x47e	; 0x47e <DownLinkHandler_Create>
	lora_handler_initialize(2, downLinkMessageBufferHandle);	
    45aa:	60 91 d3 14 	lds	r22, 0x14D3	; 0x8014d3 <downLinkMessageBufferHandle>
    45ae:	70 91 d4 14 	lds	r23, 0x14D4	; 0x8014d4 <downLinkMessageBufferHandle+0x1>
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <lora_handler_initialize>
    45ba:	08 95       	ret

000045bc <initializeSystem>:
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    45bc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <xEventGroupCreate>
    45c0:	90 93 d6 14 	sts	0x14D6, r25	; 0x8014d6 <taskReadyBits+0x1>
    45c4:	80 93 d5 14 	sts	0x14D5, r24	; 0x8014d5 <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <stdio_initialise>
	
	
	rc_servo_initialise();
    45ce:	69 d7       	rcall	.+3794   	; 0x54a2 <rc_servo_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*1);
    45d0:	41 e0       	ldi	r20, 0x01	; 1
    45d2:	60 e0       	ldi	r22, 0x00	; 0
    45d4:	70 e0       	ldi	r23, 0x00	; 0
    45d6:	86 e1       	ldi	r24, 0x16	; 22
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	0e 94 ed 10 	call	0x21da	; 0x21da <xStreamBufferGenericCreate>
    45de:	90 93 d4 14 	sts	0x14D4, r25	; 0x8014d4 <downLinkMessageBufferHandle+0x1>
    45e2:	80 93 d3 14 	sts	0x14D3, r24	; 0x8014d3 <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    45e6:	bc 01       	movw	r22, r24
    45e8:	81 e0       	ldi	r24, 0x01	; 1
	create_tasks_and_semaphores();
    45ea:	43 d3       	rcall	.+1670   	; 0x4c72 <lora_driver_initialise>
    45ec:	c5 cf       	rjmp	.-118    	; 0x4578 <create_tasks_and_semaphores>
    45ee:	08 95       	ret

000045f0 <main>:
}

int main(void){
	initializeSystem();
    45f0:	e5 df       	rcall	.-54     	; 0x45bc <initializeSystem>
	vTaskStartScheduler();
    45f2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <vTaskStartScheduler>
    45f6:	ff cf       	rjmp	.-2      	; 0x45f6 <main+0x6>

000045f8 <__fixsfsi>:
    45f8:	04 d0       	rcall	.+8      	; 0x4602 <__fixunssfsi>
    45fa:	68 94       	set
    45fc:	b1 11       	cpse	r27, r1
    45fe:	50 c0       	rjmp	.+160    	; 0x46a0 <__fp_szero>
    4600:	08 95       	ret

00004602 <__fixunssfsi>:
    4602:	33 d0       	rcall	.+102    	; 0x466a <__fp_splitA>
    4604:	88 f0       	brcs	.+34     	; 0x4628 <__fixunssfsi+0x26>
    4606:	9f 57       	subi	r25, 0x7F	; 127
    4608:	90 f0       	brcs	.+36     	; 0x462e <__fixunssfsi+0x2c>
    460a:	b9 2f       	mov	r27, r25
    460c:	99 27       	eor	r25, r25
    460e:	b7 51       	subi	r27, 0x17	; 23
    4610:	a0 f0       	brcs	.+40     	; 0x463a <__fixunssfsi+0x38>
    4612:	d1 f0       	breq	.+52     	; 0x4648 <__fixunssfsi+0x46>
    4614:	66 0f       	add	r22, r22
    4616:	77 1f       	adc	r23, r23
    4618:	88 1f       	adc	r24, r24
    461a:	99 1f       	adc	r25, r25
    461c:	1a f0       	brmi	.+6      	; 0x4624 <__fixunssfsi+0x22>
    461e:	ba 95       	dec	r27
    4620:	c9 f7       	brne	.-14     	; 0x4614 <__fixunssfsi+0x12>
    4622:	12 c0       	rjmp	.+36     	; 0x4648 <__fixunssfsi+0x46>
    4624:	b1 30       	cpi	r27, 0x01	; 1
    4626:	81 f0       	breq	.+32     	; 0x4648 <__fixunssfsi+0x46>
    4628:	3a d0       	rcall	.+116    	; 0x469e <__fp_zero>
    462a:	b1 e0       	ldi	r27, 0x01	; 1
    462c:	08 95       	ret
    462e:	37 c0       	rjmp	.+110    	; 0x469e <__fp_zero>
    4630:	67 2f       	mov	r22, r23
    4632:	78 2f       	mov	r23, r24
    4634:	88 27       	eor	r24, r24
    4636:	b8 5f       	subi	r27, 0xF8	; 248
    4638:	39 f0       	breq	.+14     	; 0x4648 <__fixunssfsi+0x46>
    463a:	b9 3f       	cpi	r27, 0xF9	; 249
    463c:	cc f3       	brlt	.-14     	; 0x4630 <__fixunssfsi+0x2e>
    463e:	86 95       	lsr	r24
    4640:	77 95       	ror	r23
    4642:	67 95       	ror	r22
    4644:	b3 95       	inc	r27
    4646:	d9 f7       	brne	.-10     	; 0x463e <__fixunssfsi+0x3c>
    4648:	3e f4       	brtc	.+14     	; 0x4658 <__fixunssfsi+0x56>
    464a:	90 95       	com	r25
    464c:	80 95       	com	r24
    464e:	70 95       	com	r23
    4650:	61 95       	neg	r22
    4652:	7f 4f       	sbci	r23, 0xFF	; 255
    4654:	8f 4f       	sbci	r24, 0xFF	; 255
    4656:	9f 4f       	sbci	r25, 0xFF	; 255
    4658:	08 95       	ret

0000465a <__fp_split3>:
    465a:	57 fd       	sbrc	r21, 7
    465c:	90 58       	subi	r25, 0x80	; 128
    465e:	44 0f       	add	r20, r20
    4660:	55 1f       	adc	r21, r21
    4662:	59 f0       	breq	.+22     	; 0x467a <__fp_splitA+0x10>
    4664:	5f 3f       	cpi	r21, 0xFF	; 255
    4666:	71 f0       	breq	.+28     	; 0x4684 <__fp_splitA+0x1a>
    4668:	47 95       	ror	r20

0000466a <__fp_splitA>:
    466a:	88 0f       	add	r24, r24
    466c:	97 fb       	bst	r25, 7
    466e:	99 1f       	adc	r25, r25
    4670:	61 f0       	breq	.+24     	; 0x468a <__fp_splitA+0x20>
    4672:	9f 3f       	cpi	r25, 0xFF	; 255
    4674:	79 f0       	breq	.+30     	; 0x4694 <__fp_splitA+0x2a>
    4676:	87 95       	ror	r24
    4678:	08 95       	ret
    467a:	12 16       	cp	r1, r18
    467c:	13 06       	cpc	r1, r19
    467e:	14 06       	cpc	r1, r20
    4680:	55 1f       	adc	r21, r21
    4682:	f2 cf       	rjmp	.-28     	; 0x4668 <__fp_split3+0xe>
    4684:	46 95       	lsr	r20
    4686:	f1 df       	rcall	.-30     	; 0x466a <__fp_splitA>
    4688:	08 c0       	rjmp	.+16     	; 0x469a <__fp_splitA+0x30>
    468a:	16 16       	cp	r1, r22
    468c:	17 06       	cpc	r1, r23
    468e:	18 06       	cpc	r1, r24
    4690:	99 1f       	adc	r25, r25
    4692:	f1 cf       	rjmp	.-30     	; 0x4676 <__fp_splitA+0xc>
    4694:	86 95       	lsr	r24
    4696:	71 05       	cpc	r23, r1
    4698:	61 05       	cpc	r22, r1
    469a:	08 94       	sec
    469c:	08 95       	ret

0000469e <__fp_zero>:
    469e:	e8 94       	clt

000046a0 <__fp_szero>:
    46a0:	bb 27       	eor	r27, r27
    46a2:	66 27       	eor	r22, r22
    46a4:	77 27       	eor	r23, r23
    46a6:	cb 01       	movw	r24, r22
    46a8:	97 f9       	bld	r25, 7
    46aa:	08 95       	ret

000046ac <modf>:
    46ac:	fa 01       	movw	r30, r20
    46ae:	dc 01       	movw	r26, r24
    46b0:	aa 0f       	add	r26, r26
    46b2:	bb 1f       	adc	r27, r27
    46b4:	9b 01       	movw	r18, r22
    46b6:	ac 01       	movw	r20, r24
    46b8:	bf 57       	subi	r27, 0x7F	; 127
    46ba:	28 f4       	brcc	.+10     	; 0x46c6 <modf+0x1a>
    46bc:	22 27       	eor	r18, r18
    46be:	33 27       	eor	r19, r19
    46c0:	44 27       	eor	r20, r20
    46c2:	50 78       	andi	r21, 0x80	; 128
    46c4:	1f c0       	rjmp	.+62     	; 0x4704 <modf+0x58>
    46c6:	b7 51       	subi	r27, 0x17	; 23
    46c8:	88 f4       	brcc	.+34     	; 0x46ec <modf+0x40>
    46ca:	ab 2f       	mov	r26, r27
    46cc:	00 24       	eor	r0, r0
    46ce:	46 95       	lsr	r20
    46d0:	37 95       	ror	r19
    46d2:	27 95       	ror	r18
    46d4:	01 1c       	adc	r0, r1
    46d6:	a3 95       	inc	r26
    46d8:	d2 f3       	brmi	.-12     	; 0x46ce <modf+0x22>
    46da:	00 20       	and	r0, r0
    46dc:	69 f0       	breq	.+26     	; 0x46f8 <modf+0x4c>
    46de:	22 0f       	add	r18, r18
    46e0:	33 1f       	adc	r19, r19
    46e2:	44 1f       	adc	r20, r20
    46e4:	b3 95       	inc	r27
    46e6:	da f3       	brmi	.-10     	; 0x46de <modf+0x32>
    46e8:	0d d0       	rcall	.+26     	; 0x4704 <modf+0x58>
    46ea:	76 c0       	rjmp	.+236    	; 0x47d8 <__subsf3>
    46ec:	61 30       	cpi	r22, 0x01	; 1
    46ee:	71 05       	cpc	r23, r1
    46f0:	a0 e8       	ldi	r26, 0x80	; 128
    46f2:	8a 07       	cpc	r24, r26
    46f4:	b9 46       	sbci	r27, 0x69	; 105
    46f6:	30 f4       	brcc	.+12     	; 0x4704 <modf+0x58>
    46f8:	9b 01       	movw	r18, r22
    46fa:	ac 01       	movw	r20, r24
    46fc:	66 27       	eor	r22, r22
    46fe:	77 27       	eor	r23, r23
    4700:	88 27       	eor	r24, r24
    4702:	90 78       	andi	r25, 0x80	; 128
    4704:	30 96       	adiw	r30, 0x00	; 0
    4706:	21 f0       	breq	.+8      	; 0x4710 <modf+0x64>
    4708:	20 83       	st	Z, r18
    470a:	31 83       	std	Z+1, r19	; 0x01
    470c:	42 83       	std	Z+2, r20	; 0x02
    470e:	53 83       	std	Z+3, r21	; 0x03
    4710:	08 95       	ret

00004712 <__mulsf3>:
    4712:	0b d0       	rcall	.+22     	; 0x472a <__mulsf3x>
    4714:	dd c0       	rjmp	.+442    	; 0x48d0 <__fp_round>
    4716:	ce d0       	rcall	.+412    	; 0x48b4 <__fp_pscA>
    4718:	28 f0       	brcs	.+10     	; 0x4724 <__mulsf3+0x12>
    471a:	d3 d0       	rcall	.+422    	; 0x48c2 <__fp_pscB>
    471c:	18 f0       	brcs	.+6      	; 0x4724 <__mulsf3+0x12>
    471e:	95 23       	and	r25, r21
    4720:	09 f0       	breq	.+2      	; 0x4724 <__mulsf3+0x12>
    4722:	bf c0       	rjmp	.+382    	; 0x48a2 <__fp_inf>
    4724:	c4 c0       	rjmp	.+392    	; 0x48ae <__fp_nan>
    4726:	11 24       	eor	r1, r1
    4728:	bb cf       	rjmp	.-138    	; 0x46a0 <__fp_szero>

0000472a <__mulsf3x>:
    472a:	97 df       	rcall	.-210    	; 0x465a <__fp_split3>
    472c:	a0 f3       	brcs	.-24     	; 0x4716 <__mulsf3+0x4>

0000472e <__mulsf3_pse>:
    472e:	95 9f       	mul	r25, r21
    4730:	d1 f3       	breq	.-12     	; 0x4726 <__mulsf3+0x14>
    4732:	95 0f       	add	r25, r21
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	55 1f       	adc	r21, r21
    4738:	62 9f       	mul	r22, r18
    473a:	f0 01       	movw	r30, r0
    473c:	72 9f       	mul	r23, r18
    473e:	bb 27       	eor	r27, r27
    4740:	f0 0d       	add	r31, r0
    4742:	b1 1d       	adc	r27, r1
    4744:	63 9f       	mul	r22, r19
    4746:	aa 27       	eor	r26, r26
    4748:	f0 0d       	add	r31, r0
    474a:	b1 1d       	adc	r27, r1
    474c:	aa 1f       	adc	r26, r26
    474e:	64 9f       	mul	r22, r20
    4750:	66 27       	eor	r22, r22
    4752:	b0 0d       	add	r27, r0
    4754:	a1 1d       	adc	r26, r1
    4756:	66 1f       	adc	r22, r22
    4758:	82 9f       	mul	r24, r18
    475a:	22 27       	eor	r18, r18
    475c:	b0 0d       	add	r27, r0
    475e:	a1 1d       	adc	r26, r1
    4760:	62 1f       	adc	r22, r18
    4762:	73 9f       	mul	r23, r19
    4764:	b0 0d       	add	r27, r0
    4766:	a1 1d       	adc	r26, r1
    4768:	62 1f       	adc	r22, r18
    476a:	83 9f       	mul	r24, r19
    476c:	a0 0d       	add	r26, r0
    476e:	61 1d       	adc	r22, r1
    4770:	22 1f       	adc	r18, r18
    4772:	74 9f       	mul	r23, r20
    4774:	33 27       	eor	r19, r19
    4776:	a0 0d       	add	r26, r0
    4778:	61 1d       	adc	r22, r1
    477a:	23 1f       	adc	r18, r19
    477c:	84 9f       	mul	r24, r20
    477e:	60 0d       	add	r22, r0
    4780:	21 1d       	adc	r18, r1
    4782:	82 2f       	mov	r24, r18
    4784:	76 2f       	mov	r23, r22
    4786:	6a 2f       	mov	r22, r26
    4788:	11 24       	eor	r1, r1
    478a:	9f 57       	subi	r25, 0x7F	; 127
    478c:	50 40       	sbci	r21, 0x00	; 0
    478e:	8a f0       	brmi	.+34     	; 0x47b2 <__mulsf3_pse+0x84>
    4790:	e1 f0       	breq	.+56     	; 0x47ca <__mulsf3_pse+0x9c>
    4792:	88 23       	and	r24, r24
    4794:	4a f0       	brmi	.+18     	; 0x47a8 <__mulsf3_pse+0x7a>
    4796:	ee 0f       	add	r30, r30
    4798:	ff 1f       	adc	r31, r31
    479a:	bb 1f       	adc	r27, r27
    479c:	66 1f       	adc	r22, r22
    479e:	77 1f       	adc	r23, r23
    47a0:	88 1f       	adc	r24, r24
    47a2:	91 50       	subi	r25, 0x01	; 1
    47a4:	50 40       	sbci	r21, 0x00	; 0
    47a6:	a9 f7       	brne	.-22     	; 0x4792 <__mulsf3_pse+0x64>
    47a8:	9e 3f       	cpi	r25, 0xFE	; 254
    47aa:	51 05       	cpc	r21, r1
    47ac:	70 f0       	brcs	.+28     	; 0x47ca <__mulsf3_pse+0x9c>
    47ae:	79 c0       	rjmp	.+242    	; 0x48a2 <__fp_inf>
    47b0:	77 cf       	rjmp	.-274    	; 0x46a0 <__fp_szero>
    47b2:	5f 3f       	cpi	r21, 0xFF	; 255
    47b4:	ec f3       	brlt	.-6      	; 0x47b0 <__mulsf3_pse+0x82>
    47b6:	98 3e       	cpi	r25, 0xE8	; 232
    47b8:	dc f3       	brlt	.-10     	; 0x47b0 <__mulsf3_pse+0x82>
    47ba:	86 95       	lsr	r24
    47bc:	77 95       	ror	r23
    47be:	67 95       	ror	r22
    47c0:	b7 95       	ror	r27
    47c2:	f7 95       	ror	r31
    47c4:	e7 95       	ror	r30
    47c6:	9f 5f       	subi	r25, 0xFF	; 255
    47c8:	c1 f7       	brne	.-16     	; 0x47ba <__mulsf3_pse+0x8c>
    47ca:	fe 2b       	or	r31, r30
    47cc:	88 0f       	add	r24, r24
    47ce:	91 1d       	adc	r25, r1
    47d0:	96 95       	lsr	r25
    47d2:	87 95       	ror	r24
    47d4:	97 f9       	bld	r25, 7
    47d6:	08 95       	ret

000047d8 <__subsf3>:
    47d8:	50 58       	subi	r21, 0x80	; 128

000047da <__addsf3>:
    47da:	bb 27       	eor	r27, r27
    47dc:	aa 27       	eor	r26, r26
    47de:	0e d0       	rcall	.+28     	; 0x47fc <__addsf3x>
    47e0:	77 c0       	rjmp	.+238    	; 0x48d0 <__fp_round>
    47e2:	68 d0       	rcall	.+208    	; 0x48b4 <__fp_pscA>
    47e4:	30 f0       	brcs	.+12     	; 0x47f2 <__addsf3+0x18>
    47e6:	6d d0       	rcall	.+218    	; 0x48c2 <__fp_pscB>
    47e8:	20 f0       	brcs	.+8      	; 0x47f2 <__addsf3+0x18>
    47ea:	31 f4       	brne	.+12     	; 0x47f8 <__addsf3+0x1e>
    47ec:	9f 3f       	cpi	r25, 0xFF	; 255
    47ee:	11 f4       	brne	.+4      	; 0x47f4 <__addsf3+0x1a>
    47f0:	1e f4       	brtc	.+6      	; 0x47f8 <__addsf3+0x1e>
    47f2:	5d c0       	rjmp	.+186    	; 0x48ae <__fp_nan>
    47f4:	0e f4       	brtc	.+2      	; 0x47f8 <__addsf3+0x1e>
    47f6:	e0 95       	com	r30
    47f8:	e7 fb       	bst	r30, 7
    47fa:	53 c0       	rjmp	.+166    	; 0x48a2 <__fp_inf>

000047fc <__addsf3x>:
    47fc:	e9 2f       	mov	r30, r25
    47fe:	2d df       	rcall	.-422    	; 0x465a <__fp_split3>
    4800:	80 f3       	brcs	.-32     	; 0x47e2 <__addsf3+0x8>
    4802:	ba 17       	cp	r27, r26
    4804:	62 07       	cpc	r22, r18
    4806:	73 07       	cpc	r23, r19
    4808:	84 07       	cpc	r24, r20
    480a:	95 07       	cpc	r25, r21
    480c:	18 f0       	brcs	.+6      	; 0x4814 <__addsf3x+0x18>
    480e:	71 f4       	brne	.+28     	; 0x482c <__addsf3x+0x30>
    4810:	9e f5       	brtc	.+102    	; 0x4878 <__addsf3x+0x7c>
    4812:	45 cf       	rjmp	.-374    	; 0x469e <__fp_zero>
    4814:	0e f4       	brtc	.+2      	; 0x4818 <__addsf3x+0x1c>
    4816:	e0 95       	com	r30
    4818:	0b 2e       	mov	r0, r27
    481a:	ba 2f       	mov	r27, r26
    481c:	a0 2d       	mov	r26, r0
    481e:	0b 01       	movw	r0, r22
    4820:	b9 01       	movw	r22, r18
    4822:	90 01       	movw	r18, r0
    4824:	0c 01       	movw	r0, r24
    4826:	ca 01       	movw	r24, r20
    4828:	a0 01       	movw	r20, r0
    482a:	11 24       	eor	r1, r1
    482c:	ff 27       	eor	r31, r31
    482e:	59 1b       	sub	r21, r25
    4830:	99 f0       	breq	.+38     	; 0x4858 <__addsf3x+0x5c>
    4832:	59 3f       	cpi	r21, 0xF9	; 249
    4834:	50 f4       	brcc	.+20     	; 0x484a <__addsf3x+0x4e>
    4836:	50 3e       	cpi	r21, 0xE0	; 224
    4838:	68 f1       	brcs	.+90     	; 0x4894 <__addsf3x+0x98>
    483a:	1a 16       	cp	r1, r26
    483c:	f0 40       	sbci	r31, 0x00	; 0
    483e:	a2 2f       	mov	r26, r18
    4840:	23 2f       	mov	r18, r19
    4842:	34 2f       	mov	r19, r20
    4844:	44 27       	eor	r20, r20
    4846:	58 5f       	subi	r21, 0xF8	; 248
    4848:	f3 cf       	rjmp	.-26     	; 0x4830 <__addsf3x+0x34>
    484a:	46 95       	lsr	r20
    484c:	37 95       	ror	r19
    484e:	27 95       	ror	r18
    4850:	a7 95       	ror	r26
    4852:	f0 40       	sbci	r31, 0x00	; 0
    4854:	53 95       	inc	r21
    4856:	c9 f7       	brne	.-14     	; 0x484a <__addsf3x+0x4e>
    4858:	7e f4       	brtc	.+30     	; 0x4878 <__addsf3x+0x7c>
    485a:	1f 16       	cp	r1, r31
    485c:	ba 0b       	sbc	r27, r26
    485e:	62 0b       	sbc	r22, r18
    4860:	73 0b       	sbc	r23, r19
    4862:	84 0b       	sbc	r24, r20
    4864:	ba f0       	brmi	.+46     	; 0x4894 <__addsf3x+0x98>
    4866:	91 50       	subi	r25, 0x01	; 1
    4868:	a1 f0       	breq	.+40     	; 0x4892 <__addsf3x+0x96>
    486a:	ff 0f       	add	r31, r31
    486c:	bb 1f       	adc	r27, r27
    486e:	66 1f       	adc	r22, r22
    4870:	77 1f       	adc	r23, r23
    4872:	88 1f       	adc	r24, r24
    4874:	c2 f7       	brpl	.-16     	; 0x4866 <__addsf3x+0x6a>
    4876:	0e c0       	rjmp	.+28     	; 0x4894 <__addsf3x+0x98>
    4878:	ba 0f       	add	r27, r26
    487a:	62 1f       	adc	r22, r18
    487c:	73 1f       	adc	r23, r19
    487e:	84 1f       	adc	r24, r20
    4880:	48 f4       	brcc	.+18     	; 0x4894 <__addsf3x+0x98>
    4882:	87 95       	ror	r24
    4884:	77 95       	ror	r23
    4886:	67 95       	ror	r22
    4888:	b7 95       	ror	r27
    488a:	f7 95       	ror	r31
    488c:	9e 3f       	cpi	r25, 0xFE	; 254
    488e:	08 f0       	brcs	.+2      	; 0x4892 <__addsf3x+0x96>
    4890:	b3 cf       	rjmp	.-154    	; 0x47f8 <__addsf3+0x1e>
    4892:	93 95       	inc	r25
    4894:	88 0f       	add	r24, r24
    4896:	08 f0       	brcs	.+2      	; 0x489a <__addsf3x+0x9e>
    4898:	99 27       	eor	r25, r25
    489a:	ee 0f       	add	r30, r30
    489c:	97 95       	ror	r25
    489e:	87 95       	ror	r24
    48a0:	08 95       	ret

000048a2 <__fp_inf>:
    48a2:	97 f9       	bld	r25, 7
    48a4:	9f 67       	ori	r25, 0x7F	; 127
    48a6:	80 e8       	ldi	r24, 0x80	; 128
    48a8:	70 e0       	ldi	r23, 0x00	; 0
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	08 95       	ret

000048ae <__fp_nan>:
    48ae:	9f ef       	ldi	r25, 0xFF	; 255
    48b0:	80 ec       	ldi	r24, 0xC0	; 192
    48b2:	08 95       	ret

000048b4 <__fp_pscA>:
    48b4:	00 24       	eor	r0, r0
    48b6:	0a 94       	dec	r0
    48b8:	16 16       	cp	r1, r22
    48ba:	17 06       	cpc	r1, r23
    48bc:	18 06       	cpc	r1, r24
    48be:	09 06       	cpc	r0, r25
    48c0:	08 95       	ret

000048c2 <__fp_pscB>:
    48c2:	00 24       	eor	r0, r0
    48c4:	0a 94       	dec	r0
    48c6:	12 16       	cp	r1, r18
    48c8:	13 06       	cpc	r1, r19
    48ca:	14 06       	cpc	r1, r20
    48cc:	05 06       	cpc	r0, r21
    48ce:	08 95       	ret

000048d0 <__fp_round>:
    48d0:	09 2e       	mov	r0, r25
    48d2:	03 94       	inc	r0
    48d4:	00 0c       	add	r0, r0
    48d6:	11 f4       	brne	.+4      	; 0x48dc <__fp_round+0xc>
    48d8:	88 23       	and	r24, r24
    48da:	52 f0       	brmi	.+20     	; 0x48f0 <__fp_round+0x20>
    48dc:	bb 0f       	add	r27, r27
    48de:	40 f4       	brcc	.+16     	; 0x48f0 <__fp_round+0x20>
    48e0:	bf 2b       	or	r27, r31
    48e2:	11 f4       	brne	.+4      	; 0x48e8 <__fp_round+0x18>
    48e4:	60 ff       	sbrs	r22, 0
    48e6:	04 c0       	rjmp	.+8      	; 0x48f0 <__fp_round+0x20>
    48e8:	6f 5f       	subi	r22, 0xFF	; 255
    48ea:	7f 4f       	sbci	r23, 0xFF	; 255
    48ec:	8f 4f       	sbci	r24, 0xFF	; 255
    48ee:	9f 4f       	sbci	r25, 0xFF	; 255
    48f0:	08 95       	ret

000048f2 <_hihTwiCallback>:
    48f2:	65 30       	cpi	r22, 0x05	; 5
    48f4:	f1 f4       	brne	.+60     	; 0x4932 <_hihTwiCallback+0x40>
    48f6:	fa 01       	movw	r30, r20
    48f8:	80 81       	ld	r24, Z
    48fa:	8f 73       	andi	r24, 0x3F	; 63
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	98 2f       	mov	r25, r24
    4900:	88 27       	eor	r24, r24
    4902:	21 81       	ldd	r18, Z+1	; 0x01
    4904:	82 2b       	or	r24, r18
    4906:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    490a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    490e:	82 81       	ldd	r24, Z+2	; 0x02
    4910:	f0 e4       	ldi	r31, 0x40	; 64
    4912:	8f 9f       	mul	r24, r31
    4914:	c0 01       	movw	r24, r0
    4916:	11 24       	eor	r1, r1
    4918:	fa 01       	movw	r30, r20
    491a:	23 81       	ldd	r18, Z+3	; 0x03
    491c:	26 95       	lsr	r18
    491e:	26 95       	lsr	r18
    4920:	82 2b       	or	r24, r18
    4922:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4926:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <_measuringIsReady>
    4930:	08 95       	ret
    4932:	64 30       	cpi	r22, 0x04	; 4
    4934:	51 f0       	breq	.+20     	; 0x494a <_hihTwiCallback+0x58>
    4936:	80 e0       	ldi	r24, 0x00	; 0
    4938:	90 e4       	ldi	r25, 0x40	; 64
    493a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    493e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4942:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4946:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    494a:	08 95       	ret

0000494c <hih8120_initialise>:
    494c:	0f 93       	push	r16
    494e:	1f 93       	push	r17
    4950:	09 e7       	ldi	r16, 0x79	; 121
    4952:	14 e2       	ldi	r17, 0x24	; 36
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	34 e2       	ldi	r19, 0x24	; 36
    4958:	44 ef       	ldi	r20, 0xF4	; 244
    495a:	50 e0       	ldi	r21, 0x00	; 0
    495c:	60 e0       	ldi	r22, 0x00	; 0
    495e:	87 e2       	ldi	r24, 0x27	; 39
    4960:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <twiCreate>
    4964:	90 93 d9 14 	sts	0x14D9, r25	; 0x8014d9 <_hih8120Handler+0x1>
    4968:	80 93 d8 14 	sts	0x14D8, r24	; 0x8014d8 <_hih8120Handler>
    496c:	21 e0       	ldi	r18, 0x01	; 1
    496e:	89 2b       	or	r24, r25
    4970:	09 f0       	breq	.+2      	; 0x4974 <hih8120_initialise+0x28>
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	82 2f       	mov	r24, r18
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	08 95       	ret

0000497c <hih8120_wakeup>:
    497c:	80 91 d8 14 	lds	r24, 0x14D8	; 0x8014d8 <_hih8120Handler>
    4980:	90 91 d9 14 	lds	r25, 0x14D9	; 0x8014d9 <_hih8120Handler+0x1>
    4984:	00 97       	sbiw	r24, 0x00	; 0
    4986:	59 f0       	breq	.+22     	; 0x499e <hih8120_wakeup+0x22>
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	60 e0       	ldi	r22, 0x00	; 0
    498c:	70 e0       	ldi	r23, 0x00	; 0
    498e:	0e 94 31 30 	call	0x6062	; 0x6062 <twiTransmit>
    4992:	84 30       	cpi	r24, 0x04	; 4
    4994:	31 f4       	brne	.+12     	; 0x49a2 <hih8120_wakeup+0x26>
    4996:	10 92 d7 14 	sts	0x14D7, r1	; 0x8014d7 <_measuringIsReady>
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	08 95       	ret
    499e:	82 e0       	ldi	r24, 0x02	; 2
    49a0:	08 95       	ret
    49a2:	83 e0       	ldi	r24, 0x03	; 3
    49a4:	08 95       	ret

000049a6 <hih8120_measure>:
    49a6:	80 91 d8 14 	lds	r24, 0x14D8	; 0x8014d8 <_hih8120Handler>
    49aa:	90 91 d9 14 	lds	r25, 0x14D9	; 0x8014d9 <_hih8120Handler+0x1>
    49ae:	00 97       	sbiw	r24, 0x00	; 0
    49b0:	39 f0       	breq	.+14     	; 0x49c0 <hih8120_measure+0x1a>
    49b2:	64 e0       	ldi	r22, 0x04	; 4
    49b4:	0e 94 7d 30 	call	0x60fa	; 0x60fa <twiReceive>
    49b8:	85 30       	cpi	r24, 0x05	; 5
    49ba:	21 f0       	breq	.+8      	; 0x49c4 <hih8120_measure+0x1e>
    49bc:	83 e0       	ldi	r24, 0x03	; 3
    49be:	08 95       	ret
    49c0:	82 e0       	ldi	r24, 0x02	; 2
    49c2:	08 95       	ret
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	08 95       	ret

000049c8 <hih8120_getHumidity>:
    49c8:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    49cc:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	0e 94 83 35 	call	0x6b06	; 0x6b06 <__floatunsisf>
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	48 ec       	ldi	r20, 0xC8	; 200
    49de:	52 e4       	ldi	r21, 0x42	; 66
    49e0:	98 de       	rcall	.-720    	; 0x4712 <__mulsf3>
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	38 ef       	ldi	r19, 0xF8	; 248
    49e6:	4f e7       	ldi	r20, 0x7F	; 127
    49e8:	56 e4       	ldi	r21, 0x46	; 70
    49ea:	0c 94 12 35 	jmp	0x6a24	; 0x6a24 <__divsf3>
    49ee:	08 95       	ret

000049f0 <hih8120_getHumidityPercent_x10>:
    49f0:	eb df       	rcall	.-42     	; 0x49c8 <hih8120_getHumidity>
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	40 e2       	ldi	r20, 0x20	; 32
    49f8:	51 e4       	ldi	r21, 0x41	; 65
    49fa:	8b de       	rcall	.-746    	; 0x4712 <__mulsf3>
    49fc:	02 de       	rcall	.-1020   	; 0x4602 <__fixunssfsi>
    49fe:	cb 01       	movw	r24, r22
    4a00:	08 95       	ret

00004a02 <hih8120_getTemperature>:
    4a02:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4a06:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	0e 94 83 35 	call	0x6b06	; 0x6b06 <__floatunsisf>
    4a12:	20 e0       	ldi	r18, 0x00	; 0
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	45 e2       	ldi	r20, 0x25	; 37
    4a18:	53 e4       	ldi	r21, 0x43	; 67
    4a1a:	7b de       	rcall	.-778    	; 0x4712 <__mulsf3>
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	38 ef       	ldi	r19, 0xF8	; 248
    4a20:	4f e7       	ldi	r20, 0x7F	; 127
    4a22:	56 e4       	ldi	r21, 0x46	; 70
    4a24:	0e 94 12 35 	call	0x6a24	; 0x6a24 <__divsf3>
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	40 e2       	ldi	r20, 0x20	; 32
    4a2e:	52 e4       	ldi	r21, 0x42	; 66
    4a30:	d3 ce       	rjmp	.-602    	; 0x47d8 <__subsf3>
    4a32:	08 95       	ret

00004a34 <_serialCallBack>:
    4a34:	0f 93       	push	r16
    4a36:	1f 93       	push	r17
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	1f 92       	push	r1
    4a3e:	1f 92       	push	r1
    4a40:	cd b7       	in	r28, 0x3d	; 61
    4a42:	de b7       	in	r29, 0x3e	; 62
    4a44:	8c 01       	movw	r16, r24
    4a46:	19 82       	std	Y+1, r1	; 0x01
    4a48:	2d c0       	rjmp	.+90     	; 0x4aa4 <_serialCallBack+0x70>
    4a4a:	e0 91 11 15 	lds	r30, 0x1511	; 0x801511 <rec_buf_inp.2878>
    4a4e:	ec 32       	cpi	r30, 0x2C	; 44
    4a50:	50 f4       	brcc	.+20     	; 0x4a66 <_serialCallBack+0x32>
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	8e 0f       	add	r24, r30
    4a56:	80 93 11 15 	sts	0x1511, r24	; 0x801511 <rec_buf_inp.2878>
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	ed 5b       	subi	r30, 0xBD	; 189
    4a5e:	fa 4e       	sbci	r31, 0xEA	; 234
    4a60:	8a 81       	ldd	r24, Y+2	; 0x02
    4a62:	80 83       	st	Z, r24
    4a64:	02 c0       	rjmp	.+4      	; 0x4a6a <_serialCallBack+0x36>
    4a66:	10 92 11 15 	sts	0x1511, r1	; 0x801511 <rec_buf_inp.2878>
    4a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6c:	8a 30       	cpi	r24, 0x0A	; 10
    4a6e:	d1 f4       	brne	.+52     	; 0x4aa4 <_serialCallBack+0x70>
    4a70:	40 91 11 15 	lds	r20, 0x1511	; 0x801511 <rec_buf_inp.2878>
    4a74:	50 e0       	ldi	r21, 0x00	; 0
    4a76:	fa 01       	movw	r30, r20
    4a78:	ef 5b       	subi	r30, 0xBF	; 191
    4a7a:	fa 4e       	sbci	r31, 0xEA	; 234
    4a7c:	10 82       	st	Z, r1
    4a7e:	41 50       	subi	r20, 0x01	; 1
    4a80:	51 09       	sbc	r21, r1
    4a82:	9e 01       	movw	r18, r28
    4a84:	2f 5f       	subi	r18, 0xFF	; 255
    4a86:	3f 4f       	sbci	r19, 0xFF	; 255
    4a88:	63 e4       	ldi	r22, 0x43	; 67
    4a8a:	75 e1       	ldi	r23, 0x15	; 21
    4a8c:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <_serialReplyBufferHandle>
    4a90:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <_serialReplyBufferHandle+0x1>
    4a94:	0e 94 14 12 	call	0x2428	; 0x2428 <xStreamBufferSendFromISR>
    4a98:	89 81       	ldd	r24, Y+1	; 0x01
    4a9a:	81 11       	cpse	r24, r1
    4a9c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vPortYield>
    4aa0:	10 92 11 15 	sts	0x1511, r1	; 0x801511 <rec_buf_inp.2878>
    4aa4:	be 01       	movw	r22, r28
    4aa6:	6e 5f       	subi	r22, 0xFE	; 254
    4aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aaa:	c8 01       	movw	r24, r16
    4aac:	39 d6       	rcall	.+3186   	; 0x5720 <serial_getByte>
    4aae:	88 23       	and	r24, r24
    4ab0:	61 f2       	breq	.-104    	; 0x4a4a <_serialCallBack+0x16>
    4ab2:	0f 90       	pop	r0
    4ab4:	0f 90       	pop	r0
    4ab6:	df 91       	pop	r29
    4ab8:	cf 91       	pop	r28
    4aba:	1f 91       	pop	r17
    4abc:	0f 91       	pop	r16
    4abe:	08 95       	ret

00004ac0 <_uploadMessage>:
    4ac0:	0f 93       	push	r16
    4ac2:	1f 93       	push	r17
    4ac4:	cf 93       	push	r28
    4ac6:	df 93       	push	r29
    4ac8:	8c 01       	movw	r16, r24
    4aca:	eb 01       	movw	r28, r22
    4acc:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <_serialReplyBufferHandle>
    4ad0:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <_serialReplyBufferHandle+0x1>
    4ad4:	0e 94 1f 11 	call	0x223e	; 0x223e <xStreamBufferReset>
    4ad8:	b8 01       	movw	r22, r16
    4ada:	8a ed       	ldi	r24, 0xDA	; 218
    4adc:	94 e1       	ldi	r25, 0x14	; 20
    4ade:	0e 94 83 38 	call	0x7106	; 0x7106 <strcpy>
    4ae2:	20 97       	sbiw	r28, 0x00	; 0
    4ae4:	79 f0       	breq	.+30     	; 0x4b04 <_uploadMessage+0x44>
    4ae6:	ea ed       	ldi	r30, 0xDA	; 218
    4ae8:	f4 e1       	ldi	r31, 0x14	; 20
    4aea:	01 90       	ld	r0, Z+
    4aec:	00 20       	and	r0, r0
    4aee:	e9 f7       	brne	.-6      	; 0x4aea <_uploadMessage+0x2a>
    4af0:	31 97       	sbiw	r30, 0x01	; 1
    4af2:	80 e2       	ldi	r24, 0x20	; 32
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	91 83       	std	Z+1, r25	; 0x01
    4af8:	80 83       	st	Z, r24
    4afa:	be 01       	movw	r22, r28
    4afc:	8a ed       	ldi	r24, 0xDA	; 218
    4afe:	94 e1       	ldi	r25, 0x14	; 20
    4b00:	0e 94 78 38 	call	0x70f0	; 0x70f0 <strcat>
    4b04:	ea ed       	ldi	r30, 0xDA	; 218
    4b06:	f4 e1       	ldi	r31, 0x14	; 20
    4b08:	df 01       	movw	r26, r30
    4b0a:	0d 90       	ld	r0, X+
    4b0c:	00 20       	and	r0, r0
    4b0e:	e9 f7       	brne	.-6      	; 0x4b0a <_uploadMessage+0x4a>
    4b10:	11 97       	sbiw	r26, 0x01	; 1
    4b12:	8d e0       	ldi	r24, 0x0D	; 13
    4b14:	9a e0       	ldi	r25, 0x0A	; 10
    4b16:	11 96       	adiw	r26, 0x01	; 1
    4b18:	9c 93       	st	X, r25
    4b1a:	8e 93       	st	-X, r24
    4b1c:	12 96       	adiw	r26, 0x02	; 2
    4b1e:	1c 92       	st	X, r1
    4b20:	01 90       	ld	r0, Z+
    4b22:	00 20       	and	r0, r0
    4b24:	e9 f7       	brne	.-6      	; 0x4b20 <_uploadMessage+0x60>
    4b26:	31 97       	sbiw	r30, 0x01	; 1
    4b28:	ea 5d       	subi	r30, 0xDA	; 218
    4b2a:	f4 41       	sbci	r31, 0x14	; 20
    4b2c:	ae 2f       	mov	r26, r30
    4b2e:	8a ed       	ldi	r24, 0xDA	; 218
    4b30:	94 e1       	ldi	r25, 0x14	; 20
    4b32:	ac 01       	movw	r20, r24
    4b34:	6a 2f       	mov	r22, r26
    4b36:	80 91 16 15 	lds	r24, 0x1516	; 0x801516 <_rn2483_serial>
    4b3a:	90 91 17 15 	lds	r25, 0x1517	; 0x801517 <_rn2483_serial+0x1>
    4b3e:	9b d5       	rcall	.+2870   	; 0x5676 <serial_sendBytes>
    4b40:	81 11       	cpse	r24, r1
    4b42:	11 c0       	rjmp	.+34     	; 0x4b66 <_uploadMessage+0xa6>
    4b44:	08 e2       	ldi	r16, 0x28	; 40
    4b46:	15 e0       	ldi	r17, 0x05	; 5
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	4d e2       	ldi	r20, 0x2D	; 45
    4b4e:	50 e0       	ldi	r21, 0x00	; 0
    4b50:	6d e9       	ldi	r22, 0x9D	; 157
    4b52:	75 e1       	ldi	r23, 0x15	; 21
    4b54:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <_serialReplyBufferHandle>
    4b58:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <_serialReplyBufferHandle+0x1>
    4b5c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xStreamBufferReceive>
    4b60:	8d e9       	ldi	r24, 0x9D	; 157
    4b62:	95 e1       	ldi	r25, 0x15	; 21
    4b64:	02 c0       	rjmp	.+4      	; 0x4b6a <_uploadMessage+0xaa>
    4b66:	80 e0       	ldi	r24, 0x00	; 0
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	df 91       	pop	r29
    4b6c:	cf 91       	pop	r28
    4b6e:	1f 91       	pop	r17
    4b70:	0f 91       	pop	r16
    4b72:	08 95       	ret

00004b74 <_reply2ReturnCode>:
    4b74:	2f 92       	push	r2
    4b76:	3f 92       	push	r3
    4b78:	4f 92       	push	r4
    4b7a:	5f 92       	push	r5
    4b7c:	6f 92       	push	r6
    4b7e:	7f 92       	push	r7
    4b80:	8f 92       	push	r8
    4b82:	9f 92       	push	r9
    4b84:	af 92       	push	r10
    4b86:	bf 92       	push	r11
    4b88:	cf 92       	push	r12
    4b8a:	df 92       	push	r13
    4b8c:	ef 92       	push	r14
    4b8e:	ff 92       	push	r15
    4b90:	0f 93       	push	r16
    4b92:	1f 93       	push	r17
    4b94:	cf 93       	push	r28
    4b96:	df 93       	push	r29
    4b98:	5c 01       	movw	r10, r24
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	01 90       	ld	r0, Z+
    4b9e:	00 20       	and	r0, r0
    4ba0:	e9 f7       	brne	.-6      	; 0x4b9c <_reply2ReturnCode+0x28>
    4ba2:	31 97       	sbiw	r30, 0x01	; 1
    4ba4:	6f 01       	movw	r12, r30
    4ba6:	c8 1a       	sub	r12, r24
    4ba8:	d9 0a       	sbc	r13, r25
    4baa:	5c 2c       	mov	r5, r12
    4bac:	0f 2e       	mov	r0, r31
    4bae:	f6 ec       	ldi	r31, 0xC6	; 198
    4bb0:	8f 2e       	mov	r8, r31
    4bb2:	f7 e0       	ldi	r31, 0x07	; 7
    4bb4:	9f 2e       	mov	r9, r31
    4bb6:	f0 2d       	mov	r31, r0
    4bb8:	e1 2c       	mov	r14, r1
    4bba:	f1 2c       	mov	r15, r1
    4bbc:	4c 2c       	mov	r4, r12
    4bbe:	37 01       	movw	r6, r14
    4bc0:	f4 01       	movw	r30, r8
    4bc2:	01 81       	ldd	r16, Z+1	; 0x01
    4bc4:	12 81       	ldd	r17, Z+2	; 0x02
    4bc6:	e8 01       	movw	r28, r16
    4bc8:	09 90       	ld	r0, Y+
    4bca:	00 20       	and	r0, r0
    4bcc:	e9 f7       	brne	.-6      	; 0x4bc8 <_reply2ReturnCode+0x54>
    4bce:	21 97       	sbiw	r28, 0x01	; 1
    4bd0:	c0 1b       	sub	r28, r16
    4bd2:	d1 0b       	sbc	r29, r17
    4bd4:	3c 2e       	mov	r3, r28
    4bd6:	f9 e0       	ldi	r31, 0x09	; 9
    4bd8:	cf 16       	cp	r12, r31
    4bda:	d1 04       	cpc	r13, r1
    4bdc:	58 f0       	brcs	.+22     	; 0x4bf4 <_reply2ReturnCode+0x80>
    4bde:	f4 01       	movw	r30, r8
    4be0:	20 80       	ld	r2, Z
    4be2:	fe e0       	ldi	r31, 0x0E	; 14
    4be4:	2f 12       	cpse	r2, r31
    4be6:	06 c0       	rjmp	.+12     	; 0x4bf4 <_reply2ReturnCode+0x80>
    4be8:	b8 01       	movw	r22, r16
    4bea:	c5 01       	movw	r24, r10
    4bec:	0e 94 53 38 	call	0x70a6	; 0x70a6 <strcasestr>
    4bf0:	89 2b       	or	r24, r25
    4bf2:	09 f5       	brne	.+66     	; 0x4c36 <_reply2ReturnCode+0xc2>
    4bf4:	44 2d       	mov	r20, r4
    4bf6:	35 14       	cp	r3, r5
    4bf8:	08 f4       	brcc	.+2      	; 0x4bfc <_reply2ReturnCode+0x88>
    4bfa:	4c 2f       	mov	r20, r28
    4bfc:	50 e0       	ldi	r21, 0x00	; 0
    4bfe:	b8 01       	movw	r22, r16
    4c00:	c5 01       	movw	r24, r10
    4c02:	0e 94 8a 38 	call	0x7114	; 0x7114 <strncasecmp>
    4c06:	89 2b       	or	r24, r25
    4c08:	49 f4       	brne	.+18     	; 0x4c1c <_reply2ReturnCode+0xa8>
    4c0a:	f3 01       	movw	r30, r6
    4c0c:	ee 0f       	add	r30, r30
    4c0e:	ff 1f       	adc	r31, r31
    4c10:	e6 0d       	add	r30, r6
    4c12:	f7 1d       	adc	r31, r7
    4c14:	ea 53       	subi	r30, 0x3A	; 58
    4c16:	f8 4f       	sbci	r31, 0xF8	; 248
    4c18:	20 80       	ld	r2, Z
    4c1a:	0d c0       	rjmp	.+26     	; 0x4c36 <_reply2ReturnCode+0xc2>
    4c1c:	8f ef       	ldi	r24, 0xFF	; 255
    4c1e:	e8 1a       	sub	r14, r24
    4c20:	f8 0a       	sbc	r15, r24
    4c22:	e3 e0       	ldi	r30, 0x03	; 3
    4c24:	8e 0e       	add	r8, r30
    4c26:	91 1c       	adc	r9, r1
    4c28:	f1 e1       	ldi	r31, 0x11	; 17
    4c2a:	ef 16       	cp	r14, r31
    4c2c:	f1 04       	cpc	r15, r1
    4c2e:	39 f6       	brne	.-114    	; 0x4bbe <_reply2ReturnCode+0x4a>
    4c30:	68 94       	set
    4c32:	22 24       	eor	r2, r2
    4c34:	24 f8       	bld	r2, 4
    4c36:	82 2d       	mov	r24, r2
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	1f 91       	pop	r17
    4c3e:	0f 91       	pop	r16
    4c40:	ff 90       	pop	r15
    4c42:	ef 90       	pop	r14
    4c44:	df 90       	pop	r13
    4c46:	cf 90       	pop	r12
    4c48:	bf 90       	pop	r11
    4c4a:	af 90       	pop	r10
    4c4c:	9f 90       	pop	r9
    4c4e:	8f 90       	pop	r8
    4c50:	7f 90       	pop	r7
    4c52:	6f 90       	pop	r6
    4c54:	5f 90       	pop	r5
    4c56:	4f 90       	pop	r4
    4c58:	3f 90       	pop	r3
    4c5a:	2f 90       	pop	r2
    4c5c:	08 95       	ret

00004c5e <_uploadMessageRc>:
    4c5e:	30 df       	rcall	.-416    	; 0x4ac0 <_uploadMessage>
    4c60:	89 cf       	rjmp	.-238    	; 0x4b74 <_reply2ReturnCode>
    4c62:	08 95       	ret

00004c64 <lora_driver_flushBuffers>:
    4c64:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <_serialReplyBufferHandle>
    4c68:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <_serialReplyBufferHandle+0x1>
    4c6c:	0c 94 1f 11 	jmp	0x223e	; 0x223e <xStreamBufferReset>
    4c70:	08 95       	ret

00004c72 <lora_driver_initialise>:
    4c72:	8f 92       	push	r8
    4c74:	9f 92       	push	r9
    4c76:	af 92       	push	r10
    4c78:	cf 92       	push	r12
    4c7a:	ef 92       	push	r14
    4c7c:	0f 93       	push	r16
    4c7e:	1f 93       	push	r17
    4c80:	cf 93       	push	r28
    4c82:	c8 2f       	mov	r28, r24
    4c84:	8b 01       	movw	r16, r22
    4c86:	41 e0       	ldi	r20, 0x01	; 1
    4c88:	60 e0       	ldi	r22, 0x00	; 0
    4c8a:	70 e0       	ldi	r23, 0x00	; 0
    4c8c:	88 ec       	ldi	r24, 0xC8	; 200
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	0e 94 ed 10 	call	0x21da	; 0x21da <xStreamBufferGenericCreate>
    4c94:	90 93 15 15 	sts	0x1515, r25	; 0x801515 <_serialReplyBufferHandle+0x1>
    4c98:	80 93 14 15 	sts	0x1514, r24	; 0x801514 <_serialReplyBufferHandle>
    4c9c:	10 93 13 15 	sts	0x1513, r17	; 0x801513 <_downlinkMessageBuffer+0x1>
    4ca0:	00 93 12 15 	sts	0x1512, r16	; 0x801512 <_downlinkMessageBuffer>
    4ca4:	0f 2e       	mov	r0, r31
    4ca6:	fa e1       	ldi	r31, 0x1A	; 26
    4ca8:	8f 2e       	mov	r8, r31
    4caa:	f5 e2       	ldi	r31, 0x25	; 37
    4cac:	9f 2e       	mov	r9, r31
    4cae:	f0 2d       	mov	r31, r0
    4cb0:	68 94       	set
    4cb2:	aa 24       	eor	r10, r10
    4cb4:	a6 f8       	bld	r10, 6
    4cb6:	68 94       	set
    4cb8:	cc 24       	eor	r12, r12
    4cba:	c6 f8       	bld	r12, 6
    4cbc:	e1 2c       	mov	r14, r1
    4cbe:	00 e0       	ldi	r16, 0x00	; 0
    4cc0:	23 e0       	ldi	r18, 0x03	; 3
    4cc2:	40 e0       	ldi	r20, 0x00	; 0
    4cc4:	51 ee       	ldi	r21, 0xE1	; 225
    4cc6:	60 e0       	ldi	r22, 0x00	; 0
    4cc8:	70 e0       	ldi	r23, 0x00	; 0
    4cca:	8c 2f       	mov	r24, r28
    4ccc:	06 d4       	rcall	.+2060   	; 0x54da <serial_create>
    4cce:	90 93 17 15 	sts	0x1517, r25	; 0x801517 <_rn2483_serial+0x1>
    4cd2:	80 93 16 15 	sts	0x1516, r24	; 0x801516 <_rn2483_serial>
    4cd6:	e7 e0       	ldi	r30, 0x07	; 7
    4cd8:	f1 e0       	ldi	r31, 0x01	; 1
    4cda:	80 81       	ld	r24, Z
    4cdc:	80 61       	ori	r24, 0x10	; 16
    4cde:	80 83       	st	Z, r24
    4ce0:	cf 91       	pop	r28
    4ce2:	1f 91       	pop	r17
    4ce4:	0f 91       	pop	r16
    4ce6:	ef 90       	pop	r14
    4ce8:	cf 90       	pop	r12
    4cea:	af 90       	pop	r10
    4cec:	9f 90       	pop	r9
    4cee:	8f 90       	pop	r8
    4cf0:	08 95       	ret

00004cf2 <lora_driver_resetRn2483>:
    4cf2:	88 23       	and	r24, r24
    4cf4:	31 f0       	breq	.+12     	; 0x4d02 <lora_driver_resetRn2483+0x10>
    4cf6:	e8 e0       	ldi	r30, 0x08	; 8
    4cf8:	f1 e0       	ldi	r31, 0x01	; 1
    4cfa:	80 81       	ld	r24, Z
    4cfc:	8f 7e       	andi	r24, 0xEF	; 239
    4cfe:	80 83       	st	Z, r24
    4d00:	08 95       	ret
    4d02:	e8 e0       	ldi	r30, 0x08	; 8
    4d04:	f1 e0       	ldi	r31, 0x01	; 1
    4d06:	80 81       	ld	r24, Z
    4d08:	80 61       	ori	r24, 0x10	; 16
    4d0a:	80 83       	st	Z, r24
    4d0c:	08 95       	ret

00004d0e <lora_driver_rn2483FactoryReset>:
    4d0e:	60 e0       	ldi	r22, 0x00	; 0
    4d10:	70 e0       	ldi	r23, 0x00	; 0
    4d12:	8c e4       	ldi	r24, 0x4C	; 76
    4d14:	95 e0       	ldi	r25, 0x05	; 5
    4d16:	d4 de       	rcall	.-600    	; 0x4ac0 <_uploadMessage>
    4d18:	ed e9       	ldi	r30, 0x9D	; 157
    4d1a:	f5 e1       	ldi	r31, 0x15	; 21
    4d1c:	01 90       	ld	r0, Z+
    4d1e:	00 20       	and	r0, r0
    4d20:	e9 f7       	brne	.-6      	; 0x4d1c <lora_driver_rn2483FactoryReset+0xe>
    4d22:	31 97       	sbiw	r30, 0x01	; 1
    4d24:	ed 59       	subi	r30, 0x9D	; 157
    4d26:	f5 41       	sbci	r31, 0x15	; 21
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	75 97       	sbiw	r30, 0x15	; 21
    4d2c:	08 f0       	brcs	.+2      	; 0x4d30 <lora_driver_rn2483FactoryReset+0x22>
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	08 95       	ret

00004d32 <lora_driver_getRn2483Hweui>:
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	ec 01       	movw	r28, r24
    4d38:	60 e0       	ldi	r22, 0x00	; 0
    4d3a:	70 e0       	ldi	r23, 0x00	; 0
    4d3c:	8d e5       	ldi	r24, 0x5D	; 93
    4d3e:	95 e0       	ldi	r25, 0x05	; 5
    4d40:	bf de       	rcall	.-642    	; 0x4ac0 <_uploadMessage>
    4d42:	ed e9       	ldi	r30, 0x9D	; 157
    4d44:	f5 e1       	ldi	r31, 0x15	; 21
    4d46:	01 90       	ld	r0, Z+
    4d48:	00 20       	and	r0, r0
    4d4a:	e9 f7       	brne	.-6      	; 0x4d46 <lora_driver_getRn2483Hweui+0x14>
    4d4c:	ee 5a       	subi	r30, 0xAE	; 174
    4d4e:	f5 41       	sbci	r31, 0x15	; 21
    4d50:	39 f4       	brne	.+14     	; 0x4d60 <lora_driver_getRn2483Hweui+0x2e>
    4d52:	6d e9       	ldi	r22, 0x9D	; 157
    4d54:	75 e1       	ldi	r23, 0x15	; 21
    4d56:	ce 01       	movw	r24, r28
    4d58:	0e 94 83 38 	call	0x7106	; 0x7106 <strcpy>
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <lora_driver_getRn2483Hweui+0x32>
    4d60:	18 82       	st	Y, r1
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	08 95       	ret

00004d6a <lora_driver_setDeviceIdentifier>:
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	01 90       	ld	r0, Z+
    4d6e:	00 20       	and	r0, r0
    4d70:	e9 f7       	brne	.-6      	; 0x4d6c <lora_driver_setDeviceIdentifier+0x2>
    4d72:	9f 01       	movw	r18, r30
    4d74:	21 51       	subi	r18, 0x11	; 17
    4d76:	31 09       	sbc	r19, r1
    4d78:	28 17       	cp	r18, r24
    4d7a:	39 07       	cpc	r19, r25
    4d7c:	29 f4       	brne	.+10     	; 0x4d88 <lora_driver_setDeviceIdentifier+0x1e>
    4d7e:	bc 01       	movw	r22, r24
    4d80:	8b e8       	ldi	r24, 0x8B	; 139
    4d82:	95 e0       	ldi	r25, 0x05	; 5
    4d84:	6c cf       	rjmp	.-296    	; 0x4c5e <_uploadMessageRc>
    4d86:	08 95       	ret
    4d88:	89 e0       	ldi	r24, 0x09	; 9
    4d8a:	08 95       	ret

00004d8c <lora_driver_setApplicationIdentifier>:
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	01 90       	ld	r0, Z+
    4d90:	00 20       	and	r0, r0
    4d92:	e9 f7       	brne	.-6      	; 0x4d8e <lora_driver_setApplicationIdentifier+0x2>
    4d94:	9f 01       	movw	r18, r30
    4d96:	21 51       	subi	r18, 0x11	; 17
    4d98:	31 09       	sbc	r19, r1
    4d9a:	28 17       	cp	r18, r24
    4d9c:	39 07       	cpc	r19, r25
    4d9e:	29 f4       	brne	.+10     	; 0x4daa <lora_driver_setApplicationIdentifier+0x1e>
    4da0:	bc 01       	movw	r22, r24
    4da2:	8a e9       	ldi	r24, 0x9A	; 154
    4da4:	95 e0       	ldi	r25, 0x05	; 5
    4da6:	5b cf       	rjmp	.-330    	; 0x4c5e <_uploadMessageRc>
    4da8:	08 95       	ret
    4daa:	89 e0       	ldi	r24, 0x09	; 9
    4dac:	08 95       	ret

00004dae <lora_driver_setApplicationKey>:
    4dae:	fc 01       	movw	r30, r24
    4db0:	01 90       	ld	r0, Z+
    4db2:	00 20       	and	r0, r0
    4db4:	e9 f7       	brne	.-6      	; 0x4db0 <lora_driver_setApplicationKey+0x2>
    4db6:	9f 01       	movw	r18, r30
    4db8:	21 52       	subi	r18, 0x21	; 33
    4dba:	31 09       	sbc	r19, r1
    4dbc:	28 17       	cp	r18, r24
    4dbe:	39 07       	cpc	r19, r25
    4dc0:	29 f4       	brne	.+10     	; 0x4dcc <lora_driver_setApplicationKey+0x1e>
    4dc2:	bc 01       	movw	r22, r24
    4dc4:	89 ea       	ldi	r24, 0xA9	; 169
    4dc6:	95 e0       	ldi	r25, 0x05	; 5
    4dc8:	4a cf       	rjmp	.-364    	; 0x4c5e <_uploadMessageRc>
    4dca:	08 95       	ret
    4dcc:	89 e0       	ldi	r24, 0x09	; 9
    4dce:	08 95       	ret

00004dd0 <lora_driver_saveMac>:
    4dd0:	60 e0       	ldi	r22, 0x00	; 0
    4dd2:	70 e0       	ldi	r23, 0x00	; 0
    4dd4:	88 ee       	ldi	r24, 0xE8	; 232
    4dd6:	95 e0       	ldi	r25, 0x05	; 5
    4dd8:	42 cf       	rjmp	.-380    	; 0x4c5e <_uploadMessageRc>
    4dda:	08 95       	ret

00004ddc <lora_driver_join>:
    4ddc:	0f 93       	push	r16
    4dde:	1f 93       	push	r17
    4de0:	e8 2f       	mov	r30, r24
    4de2:	f0 e0       	ldi	r31, 0x00	; 0
    4de4:	ee 0f       	add	r30, r30
    4de6:	ff 1f       	adc	r31, r31
    4de8:	ee 53       	subi	r30, 0x3E	; 62
    4dea:	f8 4f       	sbci	r31, 0xF8	; 248
    4dec:	60 81       	ld	r22, Z
    4dee:	71 81       	ldd	r23, Z+1	; 0x01
    4df0:	81 ef       	ldi	r24, 0xF1	; 241
    4df2:	95 e0       	ldi	r25, 0x05	; 5
    4df4:	34 df       	rcall	.-408    	; 0x4c5e <_uploadMessageRc>
    4df6:	81 11       	cpse	r24, r1
    4df8:	14 c0       	rjmp	.+40     	; 0x4e22 <lora_driver_join+0x46>
    4dfa:	08 e2       	ldi	r16, 0x28	; 40
    4dfc:	15 e0       	ldi	r17, 0x05	; 5
    4dfe:	20 e0       	ldi	r18, 0x00	; 0
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	4d e2       	ldi	r20, 0x2D	; 45
    4e04:	50 e0       	ldi	r21, 0x00	; 0
    4e06:	6d e9       	ldi	r22, 0x9D	; 157
    4e08:	75 e1       	ldi	r23, 0x15	; 21
    4e0a:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <_serialReplyBufferHandle>
    4e0e:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <_serialReplyBufferHandle+0x1>
    4e12:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xStreamBufferReceive>
    4e16:	88 23       	and	r24, r24
    4e18:	21 f0       	breq	.+8      	; 0x4e22 <lora_driver_join+0x46>
    4e1a:	8d e9       	ldi	r24, 0x9D	; 157
    4e1c:	95 e1       	ldi	r25, 0x15	; 21
    4e1e:	aa de       	rcall	.-684    	; 0x4b74 <_reply2ReturnCode>
    4e20:	03 c0       	rjmp	.+6      	; 0x4e28 <lora_driver_join+0x4c>
    4e22:	8d e9       	ldi	r24, 0x9D	; 157
    4e24:	95 e1       	ldi	r25, 0x15	; 21
    4e26:	a6 de       	rcall	.-692    	; 0x4b74 <_reply2ReturnCode>
    4e28:	1f 91       	pop	r17
    4e2a:	0f 91       	pop	r16
    4e2c:	08 95       	ret

00004e2e <lora_driver_sendUploadMessage>:
    4e2e:	0f 93       	push	r16
    4e30:	1f 93       	push	r17
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	1f 92       	push	r1
    4e38:	cd b7       	in	r28, 0x3d	; 61
    4e3a:	de b7       	in	r29, 0x3e	; 62
    4e3c:	db 01       	movw	r26, r22
    4e3e:	11 96       	adiw	r26, 0x01	; 1
    4e40:	9c 91       	ld	r25, X
    4e42:	11 97       	sbiw	r26, 0x01	; 1
    4e44:	95 31       	cpi	r25, 0x15	; 21
    4e46:	08 f0       	brcs	.+2      	; 0x4e4a <lora_driver_sendUploadMessage+0x1c>
    4e48:	b4 c0       	rjmp	.+360    	; 0x4fb2 <lora_driver_sendUploadMessage+0x184>
    4e4a:	99 23       	and	r25, r25
    4e4c:	81 f1       	breq	.+96     	; 0x4eae <lora_driver_sendUploadMessage+0x80>
    4e4e:	60 e0       	ldi	r22, 0x00	; 0
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	27 2f       	mov	r18, r23
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	46 2f       	mov	r20, r22
    4e58:	50 e0       	ldi	r21, 0x00	; 0
    4e5a:	fd 01       	movw	r30, r26
    4e5c:	e4 0f       	add	r30, r20
    4e5e:	f5 1f       	adc	r31, r21
    4e60:	92 81       	ldd	r25, Z+2	; 0x02
    4e62:	92 95       	swap	r25
    4e64:	9f 70       	andi	r25, 0x0F	; 15
    4e66:	9a 30       	cpi	r25, 0x0A	; 10
    4e68:	10 f0       	brcs	.+4      	; 0x4e6e <lora_driver_sendUploadMessage+0x40>
    4e6a:	99 5c       	subi	r25, 0xC9	; 201
    4e6c:	01 c0       	rjmp	.+2      	; 0x4e70 <lora_driver_sendUploadMessage+0x42>
    4e6e:	90 5d       	subi	r25, 0xD0	; 208
    4e70:	f9 01       	movw	r30, r18
    4e72:	e2 5d       	subi	r30, 0xD2	; 210
    4e74:	fa 4e       	sbci	r31, 0xEA	; 234
    4e76:	90 83       	st	Z, r25
    4e78:	2f 5f       	subi	r18, 0xFF	; 255
    4e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e7c:	fd 01       	movw	r30, r26
    4e7e:	e4 0f       	add	r30, r20
    4e80:	f5 1f       	adc	r31, r21
    4e82:	92 81       	ldd	r25, Z+2	; 0x02
    4e84:	9f 70       	andi	r25, 0x0F	; 15
    4e86:	49 2f       	mov	r20, r25
    4e88:	50 e0       	ldi	r21, 0x00	; 0
    4e8a:	4a 30       	cpi	r20, 0x0A	; 10
    4e8c:	51 05       	cpc	r21, r1
    4e8e:	14 f0       	brlt	.+4      	; 0x4e94 <lora_driver_sendUploadMessage+0x66>
    4e90:	99 5c       	subi	r25, 0xC9	; 201
    4e92:	01 c0       	rjmp	.+2      	; 0x4e96 <lora_driver_sendUploadMessage+0x68>
    4e94:	90 5d       	subi	r25, 0xD0	; 208
    4e96:	f9 01       	movw	r30, r18
    4e98:	e2 5d       	subi	r30, 0xD2	; 210
    4e9a:	fa 4e       	sbci	r31, 0xEA	; 234
    4e9c:	90 83       	st	Z, r25
    4e9e:	7e 5f       	subi	r23, 0xFE	; 254
    4ea0:	6f 5f       	subi	r22, 0xFF	; 255
    4ea2:	11 96       	adiw	r26, 0x01	; 1
    4ea4:	9c 91       	ld	r25, X
    4ea6:	11 97       	sbiw	r26, 0x01	; 1
    4ea8:	69 17       	cp	r22, r25
    4eaa:	98 f2       	brcs	.-90     	; 0x4e52 <lora_driver_sendUploadMessage+0x24>
    4eac:	01 c0       	rjmp	.+2      	; 0x4eb0 <lora_driver_sendUploadMessage+0x82>
    4eae:	70 e0       	ldi	r23, 0x00	; 0
    4eb0:	e7 2f       	mov	r30, r23
    4eb2:	f0 e0       	ldi	r31, 0x00	; 0
    4eb4:	e2 5d       	subi	r30, 0xD2	; 210
    4eb6:	fa 4e       	sbci	r31, 0xEA	; 234
    4eb8:	10 82       	st	Z, r1
    4eba:	4c 91       	ld	r20, X
    4ebc:	81 11       	cpse	r24, r1
    4ebe:	03 c0       	rjmp	.+6      	; 0x4ec6 <lora_driver_sendUploadMessage+0x98>
    4ec0:	8a ef       	ldi	r24, 0xFA	; 250
    4ec2:	95 e0       	ldi	r25, 0x05	; 5
    4ec4:	02 c0       	rjmp	.+4      	; 0x4eca <lora_driver_sendUploadMessage+0x9c>
    4ec6:	8c ef       	ldi	r24, 0xFC	; 252
    4ec8:	95 e0       	ldi	r25, 0x05	; 5
    4eca:	2e e2       	ldi	r18, 0x2E	; 46
    4ecc:	35 e1       	ldi	r19, 0x15	; 21
    4ece:	3f 93       	push	r19
    4ed0:	2f 93       	push	r18
    4ed2:	1f 92       	push	r1
    4ed4:	4f 93       	push	r20
    4ed6:	9f 93       	push	r25
    4ed8:	8f 93       	push	r24
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	96 e0       	ldi	r25, 0x06	; 6
    4ede:	9f 93       	push	r25
    4ee0:	8f 93       	push	r24
    4ee2:	80 e7       	ldi	r24, 0x70	; 112
    4ee4:	95 e1       	ldi	r25, 0x15	; 21
    4ee6:	9f 93       	push	r25
    4ee8:	8f 93       	push	r24
    4eea:	0e 94 2c 39 	call	0x7258	; 0x7258 <sprintf>
    4eee:	60 e0       	ldi	r22, 0x00	; 0
    4ef0:	70 e0       	ldi	r23, 0x00	; 0
    4ef2:	80 e7       	ldi	r24, 0x70	; 112
    4ef4:	95 e1       	ldi	r25, 0x15	; 21
    4ef6:	b3 de       	rcall	.-666    	; 0x4c5e <_uploadMessageRc>
    4ef8:	0f b6       	in	r0, 0x3f	; 63
    4efa:	f8 94       	cli
    4efc:	de bf       	out	0x3e, r29	; 62
    4efe:	0f be       	out	0x3f, r0	; 63
    4f00:	cd bf       	out	0x3d, r28	; 61
    4f02:	81 11       	cpse	r24, r1
    4f04:	59 c0       	rjmp	.+178    	; 0x4fb8 <lora_driver_sendUploadMessage+0x18a>
    4f06:	08 e2       	ldi	r16, 0x28	; 40
    4f08:	15 e0       	ldi	r17, 0x05	; 5
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	4d e2       	ldi	r20, 0x2D	; 45
    4f10:	50 e0       	ldi	r21, 0x00	; 0
    4f12:	6d e9       	ldi	r22, 0x9D	; 157
    4f14:	75 e1       	ldi	r23, 0x15	; 21
    4f16:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <_serialReplyBufferHandle>
    4f1a:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <_serialReplyBufferHandle+0x1>
    4f1e:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xStreamBufferReceive>
    4f22:	88 23       	and	r24, r24
    4f24:	09 f4       	brne	.+2      	; 0x4f28 <lora_driver_sendUploadMessage+0xfa>
    4f26:	47 c0       	rjmp	.+142    	; 0x4fb6 <lora_driver_sendUploadMessage+0x188>
    4f28:	8d e9       	ldi	r24, 0x9D	; 157
    4f2a:	95 e1       	ldi	r25, 0x15	; 21
    4f2c:	23 de       	rcall	.-954    	; 0x4b74 <_reply2ReturnCode>
    4f2e:	8e 30       	cpi	r24, 0x0E	; 14
    4f30:	09 f0       	breq	.+2      	; 0x4f34 <lora_driver_sendUploadMessage+0x106>
    4f32:	42 c0       	rjmp	.+132    	; 0x4fb8 <lora_driver_sendUploadMessage+0x18a>
    4f34:	87 e0       	ldi	r24, 0x07	; 7
    4f36:	89 83       	std	Y+1, r24	; 0x01
    4f38:	80 91 12 15 	lds	r24, 0x1512	; 0x801512 <_downlinkMessageBuffer>
    4f3c:	90 91 13 15 	lds	r25, 0x1513	; 0x801513 <_downlinkMessageBuffer+0x1>
    4f40:	89 2b       	or	r24, r25
    4f42:	a9 f1       	breq	.+106    	; 0x4fae <lora_driver_sendUploadMessage+0x180>
    4f44:	be 01       	movw	r22, r28
    4f46:	6f 5f       	subi	r22, 0xFF	; 255
    4f48:	7f 4f       	sbci	r23, 0xFF	; 255
    4f4a:	8d e9       	ldi	r24, 0x9D	; 157
    4f4c:	95 e1       	ldi	r25, 0x15	; 21
    4f4e:	68 d1       	rcall	.+720    	; 0x5220 <decode_port_no>
    4f50:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <_downlinkPayload>
    4f54:	e9 81       	ldd	r30, Y+1	; 0x01
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	e3 56       	subi	r30, 0x63	; 99
    4f5a:	fa 4e       	sbci	r31, 0xEA	; 234
    4f5c:	df 01       	movw	r26, r30
    4f5e:	0d 90       	ld	r0, X+
    4f60:	00 20       	and	r0, r0
    4f62:	e9 f7       	brne	.-6      	; 0x4f5e <lora_driver_sendUploadMessage+0x130>
    4f64:	11 97       	sbiw	r26, 0x01	; 1
    4f66:	ae 1b       	sub	r26, r30
    4f68:	bf 0b       	sbc	r27, r31
    4f6a:	aa 23       	and	r26, r26
    4f6c:	91 f0       	breq	.+36     	; 0x4f92 <lora_driver_sendUploadMessage+0x164>
    4f6e:	bb 27       	eor	r27, r27
    4f70:	cd 01       	movw	r24, r26
    4f72:	01 97       	sbiw	r24, 0x01	; 1
    4f74:	9c 01       	movw	r18, r24
    4f76:	12 f4       	brpl	.+4      	; 0x4f7c <lora_driver_sendUploadMessage+0x14e>
    4f78:	2f 5f       	subi	r18, 0xFF	; 255
    4f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7c:	35 95       	asr	r19
    4f7e:	27 95       	ror	r18
    4f80:	20 93 19 15 	sts	0x1519, r18	; 0x801519 <_downlinkPayload+0x1>
    4f84:	af 01       	movw	r20, r30
    4f86:	4f 5f       	subi	r20, 0xFF	; 255
    4f88:	5f 4f       	sbci	r21, 0xFF	; 255
    4f8a:	64 e1       	ldi	r22, 0x14	; 20
    4f8c:	8a e1       	ldi	r24, 0x1A	; 26
    4f8e:	95 e1       	ldi	r25, 0x15	; 21
    4f90:	73 d1       	rcall	.+742    	; 0x5278 <decode_hexadecimal_string_bytes>
    4f92:	01 e0       	ldi	r16, 0x01	; 1
    4f94:	10 e0       	ldi	r17, 0x00	; 0
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	46 e1       	ldi	r20, 0x16	; 22
    4f9c:	50 e0       	ldi	r21, 0x00	; 0
    4f9e:	68 e1       	ldi	r22, 0x18	; 24
    4fa0:	75 e1       	ldi	r23, 0x15	; 21
    4fa2:	80 91 12 15 	lds	r24, 0x1512	; 0x801512 <_downlinkMessageBuffer>
    4fa6:	90 91 13 15 	lds	r25, 0x1513	; 0x801513 <_downlinkMessageBuffer+0x1>
    4faa:	0e 94 4f 11 	call	0x229e	; 0x229e <xStreamBufferSend>
    4fae:	8e e0       	ldi	r24, 0x0E	; 14
    4fb0:	03 c0       	rjmp	.+6      	; 0x4fb8 <lora_driver_sendUploadMessage+0x18a>
    4fb2:	84 e1       	ldi	r24, 0x14	; 20
    4fb4:	01 c0       	rjmp	.+2      	; 0x4fb8 <lora_driver_sendUploadMessage+0x18a>
    4fb6:	80 e0       	ldi	r24, 0x00	; 0
    4fb8:	0f 90       	pop	r0
    4fba:	df 91       	pop	r29
    4fbc:	cf 91       	pop	r28
    4fbe:	1f 91       	pop	r17
    4fc0:	0f 91       	pop	r16
    4fc2:	08 95       	ret

00004fc4 <lora_driver_setAdaptiveDataRate>:
    4fc4:	81 30       	cpi	r24, 0x01	; 1
    4fc6:	19 f0       	breq	.+6      	; 0x4fce <lora_driver_setAdaptiveDataRate+0xa>
    4fc8:	60 e1       	ldi	r22, 0x10	; 16
    4fca:	76 e0       	ldi	r23, 0x06	; 6
    4fcc:	02 c0       	rjmp	.+4      	; 0x4fd2 <lora_driver_setAdaptiveDataRate+0xe>
    4fce:	69 ee       	ldi	r22, 0xE9	; 233
    4fd0:	76 e0       	ldi	r23, 0x06	; 6
    4fd2:	84 e1       	ldi	r24, 0x14	; 20
    4fd4:	96 e0       	ldi	r25, 0x06	; 6
    4fd6:	43 ce       	rjmp	.-890    	; 0x4c5e <_uploadMessageRc>
    4fd8:	08 95       	ret

00004fda <lora_driver_setReceiveDelay>:
    4fda:	9f 93       	push	r25
    4fdc:	8f 93       	push	r24
    4fde:	85 e4       	ldi	r24, 0x45	; 69
    4fe0:	96 e0       	ldi	r25, 0x06	; 6
    4fe2:	9f 93       	push	r25
    4fe4:	8f 93       	push	r24
    4fe6:	80 e7       	ldi	r24, 0x70	; 112
    4fe8:	95 e1       	ldi	r25, 0x15	; 21
    4fea:	9f 93       	push	r25
    4fec:	8f 93       	push	r24
    4fee:	0e 94 2c 39 	call	0x7258	; 0x7258 <sprintf>
    4ff2:	60 e0       	ldi	r22, 0x00	; 0
    4ff4:	70 e0       	ldi	r23, 0x00	; 0
    4ff6:	80 e7       	ldi	r24, 0x70	; 112
    4ff8:	95 e1       	ldi	r25, 0x15	; 21
    4ffa:	31 de       	rcall	.-926    	; 0x4c5e <_uploadMessageRc>
    4ffc:	0f 90       	pop	r0
    4ffe:	0f 90       	pop	r0
    5000:	0f 90       	pop	r0
    5002:	0f 90       	pop	r0
    5004:	0f 90       	pop	r0
    5006:	0f 90       	pop	r0
    5008:	08 95       	ret

0000500a <lora_driver_configureToEu868>:
    500a:	2f 92       	push	r2
    500c:	3f 92       	push	r3
    500e:	4f 92       	push	r4
    5010:	5f 92       	push	r5
    5012:	6f 92       	push	r6
    5014:	7f 92       	push	r7
    5016:	8f 92       	push	r8
    5018:	9f 92       	push	r9
    501a:	af 92       	push	r10
    501c:	bf 92       	push	r11
    501e:	cf 92       	push	r12
    5020:	df 92       	push	r13
    5022:	ef 92       	push	r14
    5024:	ff 92       	push	r15
    5026:	0f 93       	push	r16
    5028:	1f 93       	push	r17
    502a:	cf 93       	push	r28
    502c:	df 93       	push	r29
    502e:	cd b7       	in	r28, 0x3d	; 61
    5030:	de b7       	in	r29, 0x3e	; 62
    5032:	a0 97       	sbiw	r28, 0x20	; 32
    5034:	0f b6       	in	r0, 0x3f	; 63
    5036:	f8 94       	cli
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	0f be       	out	0x3f, r0	; 63
    503c:	cd bf       	out	0x3d, r28	; 61
    503e:	62 e7       	ldi	r22, 0x72	; 114
    5040:	76 e0       	ldi	r23, 0x06	; 6
    5042:	8e e7       	ldi	r24, 0x7E	; 126
    5044:	96 e0       	ldi	r25, 0x06	; 6
    5046:	3c dd       	rcall	.-1416   	; 0x4ac0 <_uploadMessage>
    5048:	95 dd       	rcall	.-1238   	; 0x4b74 <_reply2ReturnCode>
    504a:	81 11       	cpse	r24, r1
    504c:	a3 c0       	rjmp	.+326    	; 0x5194 <lora_driver_configureToEu868+0x18a>
    504e:	80 e2       	ldi	r24, 0x20	; 32
    5050:	e2 e2       	ldi	r30, 0x22	; 34
    5052:	f2 e0       	ldi	r31, 0x02	; 2
    5054:	de 01       	movw	r26, r28
    5056:	11 96       	adiw	r26, 0x01	; 1
    5058:	01 90       	ld	r0, Z+
    505a:	0d 92       	st	X+, r0
    505c:	8a 95       	dec	r24
    505e:	e1 f7       	brne	.-8      	; 0x5058 <lora_driver_configureToEu868+0x4e>
    5060:	9e 01       	movw	r18, r28
    5062:	2f 5f       	subi	r18, 0xFF	; 255
    5064:	3f 4f       	sbci	r19, 0xFF	; 255
    5066:	69 01       	movw	r12, r18
    5068:	e1 2c       	mov	r14, r1
    506a:	f1 2c       	mov	r15, r1
    506c:	0f 2e       	mov	r0, r31
    506e:	fa e8       	ldi	r31, 0x8A	; 138
    5070:	af 2e       	mov	r10, r31
    5072:	f6 e0       	ldi	r31, 0x06	; 6
    5074:	bf 2e       	mov	r11, r31
    5076:	f0 2d       	mov	r31, r0
    5078:	00 e7       	ldi	r16, 0x70	; 112
    507a:	15 e1       	ldi	r17, 0x15	; 21
    507c:	0f 2e       	mov	r0, r31
    507e:	f3 ea       	ldi	r31, 0xA3	; 163
    5080:	4f 2e       	mov	r4, r31
    5082:	f6 e0       	ldi	r31, 0x06	; 6
    5084:	5f 2e       	mov	r5, r31
    5086:	f0 2d       	mov	r31, r0
    5088:	0f 2e       	mov	r0, r31
    508a:	fa eb       	ldi	r31, 0xBA	; 186
    508c:	8f 2e       	mov	r8, r31
    508e:	f6 e0       	ldi	r31, 0x06	; 6
    5090:	9f 2e       	mov	r9, r31
    5092:	f0 2d       	mov	r31, r0
    5094:	0f 2e       	mov	r0, r31
    5096:	f4 ed       	ldi	r31, 0xD4	; 212
    5098:	6f 2e       	mov	r6, r31
    509a:	f6 e0       	ldi	r31, 0x06	; 6
    509c:	7f 2e       	mov	r7, r31
    509e:	f0 2d       	mov	r31, r0
    50a0:	3e 2c       	mov	r3, r14
    50a2:	2f 2c       	mov	r2, r15
    50a4:	ff 92       	push	r15
    50a6:	ef 92       	push	r14
    50a8:	bf 92       	push	r11
    50aa:	af 92       	push	r10
    50ac:	1f 93       	push	r17
    50ae:	0f 93       	push	r16
    50b0:	0e 94 2c 39 	call	0x7258	; 0x7258 <sprintf>
    50b4:	60 e0       	ldi	r22, 0x00	; 0
    50b6:	70 e0       	ldi	r23, 0x00	; 0
    50b8:	c8 01       	movw	r24, r16
    50ba:	02 dd       	rcall	.-1532   	; 0x4ac0 <_uploadMessage>
    50bc:	5b dd       	rcall	.-1354   	; 0x4b74 <_reply2ReturnCode>
    50be:	0f 90       	pop	r0
    50c0:	0f 90       	pop	r0
    50c2:	0f 90       	pop	r0
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	0f 90       	pop	r0
    50ca:	81 11       	cpse	r24, r1
    50cc:	63 c0       	rjmp	.+198    	; 0x5194 <lora_driver_configureToEu868+0x18a>
    50ce:	32 e0       	ldi	r19, 0x02	; 2
    50d0:	3e 15       	cp	r19, r14
    50d2:	e8 f4       	brcc	.+58     	; 0x510e <lora_driver_configureToEu868+0x104>
    50d4:	f6 01       	movw	r30, r12
    50d6:	83 81       	ldd	r24, Z+3	; 0x03
    50d8:	8f 93       	push	r24
    50da:	82 81       	ldd	r24, Z+2	; 0x02
    50dc:	8f 93       	push	r24
    50de:	81 81       	ldd	r24, Z+1	; 0x01
    50e0:	8f 93       	push	r24
    50e2:	80 81       	ld	r24, Z
    50e4:	8f 93       	push	r24
    50e6:	ff 92       	push	r15
    50e8:	ef 92       	push	r14
    50ea:	5f 92       	push	r5
    50ec:	4f 92       	push	r4
    50ee:	1f 93       	push	r17
    50f0:	0f 93       	push	r16
    50f2:	0e 94 2c 39 	call	0x7258	; 0x7258 <sprintf>
    50f6:	60 e0       	ldi	r22, 0x00	; 0
    50f8:	70 e0       	ldi	r23, 0x00	; 0
    50fa:	c8 01       	movw	r24, r16
    50fc:	e1 dc       	rcall	.-1598   	; 0x4ac0 <_uploadMessage>
    50fe:	3a dd       	rcall	.-1420   	; 0x4b74 <_reply2ReturnCode>
    5100:	0f b6       	in	r0, 0x3f	; 63
    5102:	f8 94       	cli
    5104:	de bf       	out	0x3e, r29	; 62
    5106:	0f be       	out	0x3f, r0	; 63
    5108:	cd bf       	out	0x3d, r28	; 61
    510a:	81 11       	cpse	r24, r1
    510c:	43 c0       	rjmp	.+134    	; 0x5194 <lora_driver_configureToEu868+0x18a>
    510e:	2f 92       	push	r2
    5110:	3f 92       	push	r3
    5112:	9f 92       	push	r9
    5114:	8f 92       	push	r8
    5116:	1f 93       	push	r17
    5118:	0f 93       	push	r16
    511a:	0e 94 2c 39 	call	0x7258	; 0x7258 <sprintf>
    511e:	60 e0       	ldi	r22, 0x00	; 0
    5120:	70 e0       	ldi	r23, 0x00	; 0
    5122:	c8 01       	movw	r24, r16
    5124:	cd dc       	rcall	.-1638   	; 0x4ac0 <_uploadMessage>
    5126:	26 dd       	rcall	.-1460   	; 0x4b74 <_reply2ReturnCode>
    5128:	0f 90       	pop	r0
    512a:	0f 90       	pop	r0
    512c:	0f 90       	pop	r0
    512e:	0f 90       	pop	r0
    5130:	0f 90       	pop	r0
    5132:	0f 90       	pop	r0
    5134:	81 11       	cpse	r24, r1
    5136:	2e c0       	rjmp	.+92     	; 0x5194 <lora_driver_configureToEu868+0x18a>
    5138:	2f 92       	push	r2
    513a:	3f 92       	push	r3
    513c:	7f 92       	push	r7
    513e:	6f 92       	push	r6
    5140:	1f 93       	push	r17
    5142:	0f 93       	push	r16
    5144:	0e 94 2c 39 	call	0x7258	; 0x7258 <sprintf>
    5148:	60 e0       	ldi	r22, 0x00	; 0
    514a:	70 e0       	ldi	r23, 0x00	; 0
    514c:	c8 01       	movw	r24, r16
    514e:	b8 dc       	rcall	.-1680   	; 0x4ac0 <_uploadMessage>
    5150:	11 dd       	rcall	.-1502   	; 0x4b74 <_reply2ReturnCode>
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	0f 90       	pop	r0
    515e:	81 11       	cpse	r24, r1
    5160:	19 c0       	rjmp	.+50     	; 0x5194 <lora_driver_configureToEu868+0x18a>
    5162:	3f ef       	ldi	r19, 0xFF	; 255
    5164:	e3 1a       	sub	r14, r19
    5166:	f3 0a       	sbc	r15, r19
    5168:	84 e0       	ldi	r24, 0x04	; 4
    516a:	c8 0e       	add	r12, r24
    516c:	d1 1c       	adc	r13, r1
    516e:	98 e0       	ldi	r25, 0x08	; 8
    5170:	e9 16       	cp	r14, r25
    5172:	f1 04       	cpc	r15, r1
    5174:	09 f0       	breq	.+2      	; 0x5178 <lora_driver_configureToEu868+0x16e>
    5176:	94 cf       	rjmp	.-216    	; 0x50a0 <lora_driver_configureToEu868+0x96>
    5178:	60 e0       	ldi	r22, 0x00	; 0
    517a:	70 e0       	ldi	r23, 0x00	; 0
    517c:	8c ee       	ldi	r24, 0xEC	; 236
    517e:	96 e0       	ldi	r25, 0x06	; 6
    5180:	9f dc       	rcall	.-1730   	; 0x4ac0 <_uploadMessage>
    5182:	f8 dc       	rcall	.-1552   	; 0x4b74 <_reply2ReturnCode>
    5184:	81 11       	cpse	r24, r1
    5186:	06 c0       	rjmp	.+12     	; 0x5194 <lora_driver_configureToEu868+0x18a>
    5188:	60 e0       	ldi	r22, 0x00	; 0
    518a:	70 e0       	ldi	r23, 0x00	; 0
    518c:	8d ef       	ldi	r24, 0xFD	; 253
    518e:	96 e0       	ldi	r25, 0x06	; 6
    5190:	97 dc       	rcall	.-1746   	; 0x4ac0 <_uploadMessage>
    5192:	f0 dc       	rcall	.-1568   	; 0x4b74 <_reply2ReturnCode>
    5194:	a0 96       	adiw	r28, 0x20	; 32
    5196:	0f b6       	in	r0, 0x3f	; 63
    5198:	f8 94       	cli
    519a:	de bf       	out	0x3e, r29	; 62
    519c:	0f be       	out	0x3f, r0	; 63
    519e:	cd bf       	out	0x3d, r28	; 61
    51a0:	df 91       	pop	r29
    51a2:	cf 91       	pop	r28
    51a4:	1f 91       	pop	r17
    51a6:	0f 91       	pop	r16
    51a8:	ff 90       	pop	r15
    51aa:	ef 90       	pop	r14
    51ac:	df 90       	pop	r13
    51ae:	cf 90       	pop	r12
    51b0:	bf 90       	pop	r11
    51b2:	af 90       	pop	r10
    51b4:	9f 90       	pop	r9
    51b6:	8f 90       	pop	r8
    51b8:	7f 90       	pop	r7
    51ba:	6f 90       	pop	r6
    51bc:	5f 90       	pop	r5
    51be:	4f 90       	pop	r4
    51c0:	3f 90       	pop	r3
    51c2:	2f 90       	pop	r2
    51c4:	08 95       	ret

000051c6 <lora_driver_setOtaaIdentity>:
    51c6:	ef 92       	push	r14
    51c8:	ff 92       	push	r15
    51ca:	0f 93       	push	r16
    51cc:	1f 93       	push	r17
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	ec 01       	movw	r28, r24
    51d4:	8b 01       	movw	r16, r22
    51d6:	7a 01       	movw	r14, r20
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	f4 de       	rcall	.-536    	; 0x4fc4 <lora_driver_setAdaptiveDataRate>
    51dc:	81 11       	cpse	r24, r1
    51de:	0d c0       	rjmp	.+26     	; 0x51fa <lora_driver_setOtaaIdentity+0x34>
    51e0:	ce 01       	movw	r24, r28
    51e2:	d4 dd       	rcall	.-1112   	; 0x4d8c <lora_driver_setApplicationIdentifier>
    51e4:	81 11       	cpse	r24, r1
    51e6:	09 c0       	rjmp	.+18     	; 0x51fa <lora_driver_setOtaaIdentity+0x34>
    51e8:	c8 01       	movw	r24, r16
    51ea:	e1 dd       	rcall	.-1086   	; 0x4dae <lora_driver_setApplicationKey>
    51ec:	81 11       	cpse	r24, r1
    51ee:	05 c0       	rjmp	.+10     	; 0x51fa <lora_driver_setOtaaIdentity+0x34>
    51f0:	c7 01       	movw	r24, r14
    51f2:	bb dd       	rcall	.-1162   	; 0x4d6a <lora_driver_setDeviceIdentifier>
    51f4:	81 11       	cpse	r24, r1
    51f6:	01 c0       	rjmp	.+2      	; 0x51fa <lora_driver_setOtaaIdentity+0x34>
    51f8:	eb dd       	rcall	.-1066   	; 0x4dd0 <lora_driver_saveMac>
    51fa:	df 91       	pop	r29
    51fc:	cf 91       	pop	r28
    51fe:	1f 91       	pop	r17
    5200:	0f 91       	pop	r16
    5202:	ff 90       	pop	r15
    5204:	ef 90       	pop	r14
    5206:	08 95       	ret

00005208 <lora_driver_mapReturnCodeToText>:
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	fc 01       	movw	r30, r24
    520c:	ee 0f       	add	r30, r30
    520e:	ff 1f       	adc	r31, r31
    5210:	8e 0f       	add	r24, r30
    5212:	9f 1f       	adc	r25, r31
    5214:	fc 01       	movw	r30, r24
    5216:	ea 53       	subi	r30, 0x3A	; 58
    5218:	f8 4f       	sbci	r31, 0xF8	; 248
    521a:	81 81       	ldd	r24, Z+1	; 0x01
    521c:	92 81       	ldd	r25, Z+2	; 0x02
    521e:	08 95       	ret

00005220 <decode_port_no>:
    5220:	dc 01       	movw	r26, r24
    5222:	00 97       	sbiw	r24, 0x00	; 0
    5224:	29 f1       	breq	.+74     	; 0x5270 <decode_port_no+0x50>
    5226:	fb 01       	movw	r30, r22
    5228:	20 81       	ld	r18, Z
    522a:	fc 01       	movw	r30, r24
    522c:	01 90       	ld	r0, Z+
    522e:	00 20       	and	r0, r0
    5230:	e9 f7       	brne	.-6      	; 0x522c <decode_port_no+0xc>
    5232:	31 97       	sbiw	r30, 0x01	; 1
    5234:	e8 1b       	sub	r30, r24
    5236:	f9 0b       	sbc	r31, r25
    5238:	82 2f       	mov	r24, r18
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	e8 17       	cp	r30, r24
    523e:	f9 07       	cpc	r31, r25
    5240:	c8 f0       	brcs	.+50     	; 0x5274 <decode_port_no+0x54>
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	08 c0       	rjmp	.+16     	; 0x5256 <decode_port_no+0x36>
    5246:	88 0f       	add	r24, r24
    5248:	38 2f       	mov	r19, r24
    524a:	33 0f       	add	r19, r19
    524c:	33 0f       	add	r19, r19
    524e:	83 0f       	add	r24, r19
    5250:	80 53       	subi	r24, 0x30	; 48
    5252:	89 0f       	add	r24, r25
    5254:	2f 5f       	subi	r18, 0xFF	; 255
    5256:	fd 01       	movw	r30, r26
    5258:	e2 0f       	add	r30, r18
    525a:	f1 1d       	adc	r31, r1
    525c:	90 81       	ld	r25, Z
    525e:	30 ed       	ldi	r19, 0xD0	; 208
    5260:	39 0f       	add	r19, r25
    5262:	3a 30       	cpi	r19, 0x0A	; 10
    5264:	10 f4       	brcc	.+4      	; 0x526a <decode_port_no+0x4a>
    5266:	91 11       	cpse	r25, r1
    5268:	ee cf       	rjmp	.-36     	; 0x5246 <decode_port_no+0x26>
    526a:	fb 01       	movw	r30, r22
    526c:	20 83       	st	Z, r18
    526e:	08 95       	ret
    5270:	80 e0       	ldi	r24, 0x00	; 0
    5272:	08 95       	ret
    5274:	80 e0       	ldi	r24, 0x00	; 0
    5276:	08 95       	ret

00005278 <decode_hexadecimal_string_bytes>:
    5278:	0f 93       	push	r16
    527a:	1f 93       	push	r17
    527c:	cf 93       	push	r28
    527e:	df 93       	push	r29
    5280:	dc 01       	movw	r26, r24
    5282:	ea 01       	movw	r28, r20
    5284:	20 97       	sbiw	r28, 0x00	; 0
    5286:	e1 f1       	breq	.+120    	; 0x5300 <decode_hexadecimal_string_bytes+0x88>
    5288:	fa 01       	movw	r30, r20
    528a:	01 90       	ld	r0, Z+
    528c:	00 20       	and	r0, r0
    528e:	e9 f7       	brne	.-6      	; 0x528a <decode_hexadecimal_string_bytes+0x12>
    5290:	31 97       	sbiw	r30, 0x01	; 1
    5292:	e4 1b       	sub	r30, r20
    5294:	f5 0b       	sbc	r31, r21
    5296:	32 97       	sbiw	r30, 0x02	; 2
    5298:	10 f5       	brcc	.+68     	; 0x52de <decode_hexadecimal_string_bytes+0x66>
    529a:	32 c0       	rjmp	.+100    	; 0x5300 <decode_hexadecimal_string_bytes+0x88>
    529c:	8d 01       	movw	r16, r26
    529e:	04 0f       	add	r16, r20
    52a0:	15 1f       	adc	r17, r21
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	ae 01       	movw	r20, r28
    52a6:	42 0f       	add	r20, r18
    52a8:	53 1f       	adc	r21, r19
    52aa:	fa 01       	movw	r30, r20
    52ac:	90 81       	ld	r25, Z
    52ae:	91 34       	cpi	r25, 0x41	; 65
    52b0:	28 f0       	brcs	.+10     	; 0x52bc <decode_hexadecimal_string_bytes+0x44>
    52b2:	97 53       	subi	r25, 0x37	; 55
    52b4:	59 2f       	mov	r21, r25
    52b6:	52 95       	swap	r21
    52b8:	50 7f       	andi	r21, 0xF0	; 240
    52ba:	03 c0       	rjmp	.+6      	; 0x52c2 <decode_hexadecimal_string_bytes+0x4a>
    52bc:	59 2f       	mov	r21, r25
    52be:	52 95       	swap	r21
    52c0:	50 7f       	andi	r21, 0xF0	; 240
    52c2:	2c 0f       	add	r18, r28
    52c4:	3d 1f       	adc	r19, r29
    52c6:	f9 01       	movw	r30, r18
    52c8:	91 81       	ldd	r25, Z+1	; 0x01
    52ca:	91 34       	cpi	r25, 0x41	; 65
    52cc:	10 f0       	brcs	.+4      	; 0x52d2 <decode_hexadecimal_string_bytes+0x5a>
    52ce:	97 53       	subi	r25, 0x37	; 55
    52d0:	01 c0       	rjmp	.+2      	; 0x52d4 <decode_hexadecimal_string_bytes+0x5c>
    52d2:	90 53       	subi	r25, 0x30	; 48
    52d4:	95 0f       	add	r25, r21
    52d6:	f8 01       	movw	r30, r16
    52d8:	90 83       	st	Z, r25
    52da:	8f 5f       	subi	r24, 0xFF	; 255
    52dc:	01 c0       	rjmp	.+2      	; 0x52e0 <decode_hexadecimal_string_bytes+0x68>
    52de:	80 e0       	ldi	r24, 0x00	; 0
    52e0:	28 2f       	mov	r18, r24
    52e2:	22 0f       	add	r18, r18
    52e4:	48 2f       	mov	r20, r24
    52e6:	50 e0       	ldi	r21, 0x00	; 0
    52e8:	fe 01       	movw	r30, r28
    52ea:	01 90       	ld	r0, Z+
    52ec:	00 20       	and	r0, r0
    52ee:	e9 f7       	brne	.-6      	; 0x52ea <decode_hexadecimal_string_bytes+0x72>
    52f0:	31 97       	sbiw	r30, 0x01	; 1
    52f2:	ec 1b       	sub	r30, r28
    52f4:	fd 0b       	sbc	r31, r29
    52f6:	4e 17       	cp	r20, r30
    52f8:	5f 07       	cpc	r21, r31
    52fa:	10 f4       	brcc	.+4      	; 0x5300 <decode_hexadecimal_string_bytes+0x88>
    52fc:	86 13       	cpse	r24, r22
    52fe:	ce cf       	rjmp	.-100    	; 0x529c <decode_hexadecimal_string_bytes+0x24>
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	1f 91       	pop	r17
    5306:	0f 91       	pop	r16
    5308:	08 95       	ret

0000530a <_serialCallBack>:
    530a:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <crc_sum.1945>
    530e:	86 0f       	add	r24, r22
    5310:	80 93 cd 15 	sts	0x15CD, r24	; 0x8015cd <crc_sum.1945>
    5314:	90 91 d0 15 	lds	r25, 0x15D0	; 0x8015d0 <_mh_state>
    5318:	91 30       	cpi	r25, 0x01	; 1
    531a:	79 f0       	breq	.+30     	; 0x533a <_serialCallBack+0x30>
    531c:	28 f0       	brcs	.+10     	; 0x5328 <_serialCallBack+0x1e>
    531e:	92 30       	cpi	r25, 0x02	; 2
    5320:	a9 f0       	breq	.+42     	; 0x534c <_serialCallBack+0x42>
    5322:	93 30       	cpi	r25, 0x03	; 3
    5324:	19 f1       	breq	.+70     	; 0x536c <_serialCallBack+0x62>
    5326:	08 95       	ret
    5328:	6f 3f       	cpi	r22, 0xFF	; 255
    532a:	09 f0       	breq	.+2      	; 0x532e <_serialCallBack+0x24>
    532c:	48 c0       	rjmp	.+144    	; 0x53be <_serialCallBack+0xb4>
    532e:	10 92 cd 15 	sts	0x15CD, r1	; 0x8015cd <crc_sum.1945>
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	80 93 d0 15 	sts	0x15D0, r24	; 0x8015d0 <_mh_state>
    5338:	08 95       	ret
    533a:	66 38       	cpi	r22, 0x86	; 134
    533c:	09 f0       	breq	.+2      	; 0x5340 <_serialCallBack+0x36>
    533e:	3f c0       	rjmp	.+126    	; 0x53be <_serialCallBack+0xb4>
    5340:	10 92 cc 15 	sts	0x15CC, r1	; 0x8015cc <inDex.1943>
    5344:	82 e0       	ldi	r24, 0x02	; 2
    5346:	80 93 d0 15 	sts	0x15D0, r24	; 0x8015d0 <_mh_state>
    534a:	08 95       	ret
    534c:	e0 91 cc 15 	lds	r30, 0x15CC	; 0x8015cc <inDex.1943>
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	8e 0f       	add	r24, r30
    5354:	80 93 cc 15 	sts	0x15CC, r24	; 0x8015cc <inDex.1943>
    5358:	f0 e0       	ldi	r31, 0x00	; 0
    535a:	e6 53       	subi	r30, 0x36	; 54
    535c:	fa 4e       	sbci	r31, 0xEA	; 234
    535e:	60 83       	st	Z, r22
    5360:	82 30       	cpi	r24, 0x02	; 2
    5362:	69 f5       	brne	.+90     	; 0x53be <_serialCallBack+0xb4>
    5364:	83 e0       	ldi	r24, 0x03	; 3
    5366:	80 93 d0 15 	sts	0x15D0, r24	; 0x8015d0 <_mh_state>
    536a:	08 95       	ret
    536c:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <inDex.1943>
    5370:	21 e0       	ldi	r18, 0x01	; 1
    5372:	29 0f       	add	r18, r25
    5374:	20 93 cc 15 	sts	0x15CC, r18	; 0x8015cc <inDex.1943>
    5378:	96 30       	cpi	r25, 0x06	; 6
    537a:	09 f5       	brne	.+66     	; 0x53be <_serialCallBack+0xb4>
    537c:	81 11       	cpse	r24, r1
    537e:	0e c0       	rjmp	.+28     	; 0x539c <_serialCallBack+0x92>
    5380:	ea ec       	ldi	r30, 0xCA	; 202
    5382:	f5 e1       	ldi	r31, 0x15	; 21
    5384:	80 81       	ld	r24, Z
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	98 2f       	mov	r25, r24
    538a:	88 27       	eor	r24, r24
    538c:	21 81       	ldd	r18, Z+1	; 0x01
    538e:	82 0f       	add	r24, r18
    5390:	91 1d       	adc	r25, r1
    5392:	90 93 d2 15 	sts	0x15D2, r25	; 0x8015d2 <_ppm+0x1>
    5396:	80 93 d1 15 	sts	0x15D1, r24	; 0x8015d1 <_ppm>
    539a:	04 c0       	rjmp	.+8      	; 0x53a4 <_serialCallBack+0x9a>
    539c:	10 92 d2 15 	sts	0x15D2, r1	; 0x8015d2 <_ppm+0x1>
    53a0:	10 92 d1 15 	sts	0x15D1, r1	; 0x8015d1 <_ppm>
    53a4:	10 92 d0 15 	sts	0x15D0, r1	; 0x8015d0 <_mh_state>
    53a8:	e0 91 ce 15 	lds	r30, 0x15CE	; 0x8015ce <_appCallBack>
    53ac:	f0 91 cf 15 	lds	r31, 0x15CF	; 0x8015cf <_appCallBack+0x1>
    53b0:	30 97       	sbiw	r30, 0x00	; 0
    53b2:	29 f0       	breq	.+10     	; 0x53be <_serialCallBack+0xb4>
    53b4:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <_ppm>
    53b8:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <_ppm+0x1>
    53bc:	19 95       	eicall
    53be:	08 95       	ret

000053c0 <mh_z19_initialise>:
    53c0:	8f 92       	push	r8
    53c2:	9f 92       	push	r9
    53c4:	af 92       	push	r10
    53c6:	cf 92       	push	r12
    53c8:	ef 92       	push	r14
    53ca:	0f 93       	push	r16
    53cc:	0f 2e       	mov	r0, r31
    53ce:	f5 e8       	ldi	r31, 0x85	; 133
    53d0:	8f 2e       	mov	r8, r31
    53d2:	f9 e2       	ldi	r31, 0x29	; 41
    53d4:	9f 2e       	mov	r9, r31
    53d6:	f0 2d       	mov	r31, r0
    53d8:	68 94       	set
    53da:	aa 24       	eor	r10, r10
    53dc:	a4 f8       	bld	r10, 4
    53de:	68 94       	set
    53e0:	cc 24       	eor	r12, r12
    53e2:	c4 f8       	bld	r12, 4
    53e4:	e1 2c       	mov	r14, r1
    53e6:	00 e0       	ldi	r16, 0x00	; 0
    53e8:	23 e0       	ldi	r18, 0x03	; 3
    53ea:	40 e8       	ldi	r20, 0x80	; 128
    53ec:	55 e2       	ldi	r21, 0x25	; 37
    53ee:	60 e0       	ldi	r22, 0x00	; 0
    53f0:	70 e0       	ldi	r23, 0x00	; 0
    53f2:	73 d0       	rcall	.+230    	; 0x54da <serial_create>
    53f4:	90 93 d4 15 	sts	0x15D4, r25	; 0x8015d4 <_serial+0x1>
    53f8:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <_serial>
    53fc:	0f 91       	pop	r16
    53fe:	ef 90       	pop	r14
    5400:	cf 90       	pop	r12
    5402:	af 90       	pop	r10
    5404:	9f 90       	pop	r9
    5406:	8f 90       	pop	r8
    5408:	08 95       	ret

0000540a <mh_z19_injectCallBack>:
    540a:	90 93 cf 15 	sts	0x15CF, r25	; 0x8015cf <_appCallBack+0x1>
    540e:	80 93 ce 15 	sts	0x15CE, r24	; 0x8015ce <_appCallBack>
    5412:	08 95       	ret

00005414 <mh_z19_takeMeassuring>:
    5414:	cf 93       	push	r28
    5416:	df 93       	push	r29
    5418:	cd b7       	in	r28, 0x3d	; 61
    541a:	de b7       	in	r29, 0x3e	; 62
    541c:	29 97       	sbiw	r28, 0x09	; 9
    541e:	0f b6       	in	r0, 0x3f	; 63
    5420:	f8 94       	cli
    5422:	de bf       	out	0x3e, r29	; 62
    5424:	0f be       	out	0x3f, r0	; 63
    5426:	cd bf       	out	0x3d, r28	; 61
    5428:	89 e0       	ldi	r24, 0x09	; 9
    542a:	e2 e4       	ldi	r30, 0x42	; 66
    542c:	f2 e0       	ldi	r31, 0x02	; 2
    542e:	9e 01       	movw	r18, r28
    5430:	2f 5f       	subi	r18, 0xFF	; 255
    5432:	3f 4f       	sbci	r19, 0xFF	; 255
    5434:	d9 01       	movw	r26, r18
    5436:	01 90       	ld	r0, Z+
    5438:	0d 92       	st	X+, r0
    543a:	8a 95       	dec	r24
    543c:	e1 f7       	brne	.-8      	; 0x5436 <mh_z19_takeMeassuring+0x22>
    543e:	10 92 d2 15 	sts	0x15D2, r1	; 0x8015d2 <_ppm+0x1>
    5442:	10 92 d1 15 	sts	0x15D1, r1	; 0x8015d1 <_ppm>
    5446:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <_serial>
    544a:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <_serial+0x1>
    544e:	00 97       	sbiw	r24, 0x00	; 0
    5450:	31 f0       	breq	.+12     	; 0x545e <mh_z19_takeMeassuring+0x4a>
    5452:	42 2f       	mov	r20, r18
    5454:	53 2f       	mov	r21, r19
    5456:	69 e0       	ldi	r22, 0x09	; 9
    5458:	0e d1       	rcall	.+540    	; 0x5676 <serial_sendBytes>
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	01 c0       	rjmp	.+2      	; 0x5460 <mh_z19_takeMeassuring+0x4c>
    545e:	82 e0       	ldi	r24, 0x02	; 2
    5460:	29 96       	adiw	r28, 0x09	; 9
    5462:	0f b6       	in	r0, 0x3f	; 63
    5464:	f8 94       	cli
    5466:	de bf       	out	0x3e, r29	; 62
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	cd bf       	out	0x3d, r28	; 61
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	08 95       	ret

00005472 <rc_servo_setPosition>:
    5472:	65 36       	cpi	r22, 0x65	; 101
    5474:	0c f0       	brlt	.+2      	; 0x5478 <rc_servo_setPosition+0x6>
    5476:	64 e6       	ldi	r22, 0x64	; 100
    5478:	6c 39       	cpi	r22, 0x9C	; 156
    547a:	0c f4       	brge	.+2      	; 0x547e <rc_servo_setPosition+0xc>
    547c:	6c e9       	ldi	r22, 0x9C	; 156
    547e:	96 ef       	ldi	r25, 0xF6	; 246
    5480:	69 02       	muls	r22, r25
    5482:	b0 01       	movw	r22, r0
    5484:	11 24       	eor	r1, r1
    5486:	68 54       	subi	r22, 0x48	; 72
    5488:	74 4f       	sbci	r23, 0xF4	; 244
    548a:	81 11       	cpse	r24, r1
    548c:	05 c0       	rjmp	.+10     	; 0x5498 <rc_servo_setPosition+0x26>
    548e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    5492:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    5496:	08 95       	ret
    5498:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    549c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    54a0:	08 95       	ret

000054a2 <rc_servo_initialise>:
    54a2:	ea e0       	ldi	r30, 0x0A	; 10
    54a4:	f1 e0       	ldi	r31, 0x01	; 1
    54a6:	80 81       	ld	r24, Z
    54a8:	88 61       	ori	r24, 0x18	; 24
    54aa:	80 83       	st	Z, r24
    54ac:	8f e3       	ldi	r24, 0x3F	; 63
    54ae:	9c e9       	ldi	r25, 0x9C	; 156
    54b0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    54b4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    54b8:	60 e0       	ldi	r22, 0x00	; 0
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	da df       	rcall	.-76     	; 0x5472 <rc_servo_setPosition>
    54be:	60 e0       	ldi	r22, 0x00	; 0
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	d7 df       	rcall	.-82     	; 0x5472 <rc_servo_setPosition>
    54c4:	e0 e2       	ldi	r30, 0x20	; 32
    54c6:	f1 e0       	ldi	r31, 0x01	; 1
    54c8:	80 81       	ld	r24, Z
    54ca:	82 6a       	ori	r24, 0xA2	; 162
    54cc:	80 83       	st	Z, r24
    54ce:	e1 e2       	ldi	r30, 0x21	; 33
    54d0:	f1 e0       	ldi	r31, 0x01	; 1
    54d2:	80 81       	ld	r24, Z
    54d4:	8a 61       	ori	r24, 0x1A	; 26
    54d6:	80 83       	st	Z, r24
    54d8:	08 95       	ret

000054da <serial_create>:
    54da:	2f 92       	push	r2
    54dc:	3f 92       	push	r3
    54de:	4f 92       	push	r4
    54e0:	5f 92       	push	r5
    54e2:	6f 92       	push	r6
    54e4:	7f 92       	push	r7
    54e6:	8f 92       	push	r8
    54e8:	9f 92       	push	r9
    54ea:	af 92       	push	r10
    54ec:	cf 92       	push	r12
    54ee:	ef 92       	push	r14
    54f0:	ff 92       	push	r15
    54f2:	0f 93       	push	r16
    54f4:	1f 93       	push	r17
    54f6:	cf 93       	push	r28
    54f8:	df 93       	push	r29
    54fa:	cd b7       	in	r28, 0x3d	; 61
    54fc:	de b7       	in	r29, 0x3e	; 62
    54fe:	f8 2e       	mov	r15, r24
    5500:	2a 01       	movw	r4, r20
    5502:	3b 01       	movw	r6, r22
    5504:	88 e0       	ldi	r24, 0x08	; 8
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <malloc>
    550c:	8c 01       	movw	r16, r24
    550e:	8f 2d       	mov	r24, r15
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	fc 01       	movw	r30, r24
    5514:	ee 0f       	add	r30, r30
    5516:	ff 1f       	adc	r31, r31
    5518:	eb 52       	subi	r30, 0x2B	; 43
    551a:	fa 4e       	sbci	r31, 0xEA	; 234
    551c:	11 83       	std	Z+1, r17	; 0x01
    551e:	00 83       	st	Z, r16
    5520:	01 15       	cp	r16, r1
    5522:	11 05       	cpc	r17, r1
    5524:	09 f4       	brne	.+2      	; 0x5528 <serial_create+0x4e>
    5526:	6a c0       	rjmp	.+212    	; 0x55fc <serial_create+0x122>
    5528:	88 0f       	add	r24, r24
    552a:	99 1f       	adc	r25, r25
    552c:	fc 01       	movw	r30, r24
    552e:	e5 5f       	subi	r30, 0xF5	; 245
    5530:	fd 4f       	sbci	r31, 0xFD	; 253
    5532:	80 81       	ld	r24, Z
    5534:	91 81       	ldd	r25, Z+1	; 0x01
    5536:	d8 01       	movw	r26, r16
    5538:	8d 93       	st	X+, r24
    553a:	9c 93       	st	X, r25
    553c:	8c 2d       	mov	r24, r12
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	88 0f       	add	r24, r24
    5542:	99 1f       	adc	r25, r25
    5544:	88 0f       	add	r24, r24
    5546:	99 1f       	adc	r25, r25
    5548:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <malloc>
    554c:	1c 01       	movw	r2, r24
    554e:	86 e0       	ldi	r24, 0x06	; 6
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <malloc>
    5556:	7c 01       	movw	r14, r24
    5558:	4c 2d       	mov	r20, r12
    555a:	b1 01       	movw	r22, r2
    555c:	be d6       	rcall	.+3452   	; 0x62da <fifo_init>
    555e:	f8 01       	movw	r30, r16
    5560:	f5 82       	std	Z+5, r15	; 0x05
    5562:	e4 82       	std	Z+4, r14	; 0x04
    5564:	8a 2d       	mov	r24, r10
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	88 0f       	add	r24, r24
    556a:	99 1f       	adc	r25, r25
    556c:	88 0f       	add	r24, r24
    556e:	99 1f       	adc	r25, r25
    5570:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <malloc>
    5574:	1c 01       	movw	r2, r24
    5576:	86 e0       	ldi	r24, 0x06	; 6
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <malloc>
    557e:	7c 01       	movw	r14, r24
    5580:	4a 2d       	mov	r20, r10
    5582:	b1 01       	movw	r22, r2
    5584:	aa d6       	rcall	.+3412   	; 0x62da <fifo_init>
    5586:	d8 01       	movw	r26, r16
    5588:	13 96       	adiw	r26, 0x03	; 3
    558a:	fc 92       	st	X, r15
    558c:	ee 92       	st	-X, r14
    558e:	12 97       	sbiw	r26, 0x02	; 2
    5590:	17 96       	adiw	r26, 0x07	; 7
    5592:	9c 92       	st	X, r9
    5594:	8e 92       	st	-X, r8
    5596:	16 97       	sbiw	r26, 0x06	; 6
    5598:	ff b6       	in	r15, 0x3f	; 63
    559a:	f8 94       	cli
    559c:	ed 91       	ld	r30, X+
    559e:	fc 91       	ld	r31, X
    55a0:	11 97       	sbiw	r26, 0x01	; 1
    55a2:	36 97       	sbiw	r30, 0x06	; 6
    55a4:	80 81       	ld	r24, Z
    55a6:	82 60       	ori	r24, 0x02	; 2
    55a8:	80 83       	st	Z, r24
    55aa:	8d 90       	ld	r8, X+
    55ac:	9c 90       	ld	r9, X
    55ae:	c3 01       	movw	r24, r6
    55b0:	b2 01       	movw	r22, r4
    55b2:	0e 94 83 35 	call	0x6b06	; 0x6b06 <__floatunsisf>
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	40 e0       	ldi	r20, 0x00	; 0
    55bc:	51 e4       	ldi	r21, 0x41	; 65
    55be:	a9 d8       	rcall	.-3758   	; 0x4712 <__mulsf3>
    55c0:	9b 01       	movw	r18, r22
    55c2:	ac 01       	movw	r20, r24
    55c4:	60 e0       	ldi	r22, 0x00	; 0
    55c6:	74 e2       	ldi	r23, 0x24	; 36
    55c8:	84 e7       	ldi	r24, 0x74	; 116
    55ca:	9b e4       	ldi	r25, 0x4B	; 75
    55cc:	0e 94 12 35 	call	0x6a24	; 0x6a24 <__divsf3>
    55d0:	20 e0       	ldi	r18, 0x00	; 0
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	40 e8       	ldi	r20, 0x80	; 128
    55d6:	5f e3       	ldi	r21, 0x3F	; 63
    55d8:	ff d8       	rcall	.-3586   	; 0x47d8 <__subsf3>
    55da:	13 d8       	rcall	.-4058   	; 0x4602 <__fixunssfsi>
    55dc:	f4 01       	movw	r30, r8
    55de:	32 97       	sbiw	r30, 0x02	; 2
    55e0:	60 83       	st	Z, r22
    55e2:	d8 01       	movw	r26, r16
    55e4:	ed 91       	ld	r30, X+
    55e6:	fc 91       	ld	r31, X
    55e8:	11 97       	sbiw	r26, 0x01	; 1
    55ea:	35 97       	sbiw	r30, 0x05	; 5
    55ec:	88 e9       	ldi	r24, 0x98	; 152
    55ee:	80 83       	st	Z, r24
    55f0:	ed 91       	ld	r30, X+
    55f2:	fc 91       	ld	r31, X
    55f4:	34 97       	sbiw	r30, 0x04	; 4
    55f6:	86 e0       	ldi	r24, 0x06	; 6
    55f8:	80 83       	st	Z, r24
    55fa:	ff be       	out	0x3f, r15	; 63
    55fc:	c8 01       	movw	r24, r16
    55fe:	df 91       	pop	r29
    5600:	cf 91       	pop	r28
    5602:	1f 91       	pop	r17
    5604:	0f 91       	pop	r16
    5606:	ff 90       	pop	r15
    5608:	ef 90       	pop	r14
    560a:	cf 90       	pop	r12
    560c:	af 90       	pop	r10
    560e:	9f 90       	pop	r9
    5610:	8f 90       	pop	r8
    5612:	7f 90       	pop	r7
    5614:	6f 90       	pop	r6
    5616:	5f 90       	pop	r5
    5618:	4f 90       	pop	r4
    561a:	3f 90       	pop	r3
    561c:	2f 90       	pop	r2
    561e:	08 95       	ret

00005620 <serial_sendByte>:
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	dc 01       	movw	r26, r24
    5626:	89 2b       	or	r24, r25
    5628:	01 f1       	breq	.+64     	; 0x566a <serial_sendByte+0x4a>
    562a:	12 96       	adiw	r26, 0x02	; 2
    562c:	ed 91       	ld	r30, X+
    562e:	fc 91       	ld	r31, X
    5630:	13 97       	sbiw	r26, 0x03	; 3
    5632:	93 81       	ldd	r25, Z+3	; 0x03
    5634:	82 81       	ldd	r24, Z+2	; 0x02
    5636:	25 81       	ldd	r18, Z+5	; 0x05
    5638:	98 1b       	sub	r25, r24
    563a:	92 23       	and	r25, r18
    563c:	84 81       	ldd	r24, Z+4	; 0x04
    563e:	98 17       	cp	r25, r24
    5640:	b1 f0       	breq	.+44     	; 0x566e <serial_sendByte+0x4e>
    5642:	83 81       	ldd	r24, Z+3	; 0x03
    5644:	26 95       	lsr	r18
    5646:	28 23       	and	r18, r24
    5648:	c0 81       	ld	r28, Z
    564a:	d1 81       	ldd	r29, Z+1	; 0x01
    564c:	c2 0f       	add	r28, r18
    564e:	d1 1d       	adc	r29, r1
    5650:	68 83       	st	Y, r22
    5652:	8f 5f       	subi	r24, 0xFF	; 255
    5654:	95 81       	ldd	r25, Z+5	; 0x05
    5656:	89 23       	and	r24, r25
    5658:	83 83       	std	Z+3, r24	; 0x03
    565a:	ed 91       	ld	r30, X+
    565c:	fc 91       	ld	r31, X
    565e:	35 97       	sbiw	r30, 0x05	; 5
    5660:	80 81       	ld	r24, Z
    5662:	80 62       	ori	r24, 0x20	; 32
    5664:	80 83       	st	Z, r24
    5666:	80 e0       	ldi	r24, 0x00	; 0
    5668:	03 c0       	rjmp	.+6      	; 0x5670 <serial_sendByte+0x50>
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	01 c0       	rjmp	.+2      	; 0x5670 <serial_sendByte+0x50>
    566e:	82 e0       	ldi	r24, 0x02	; 2
    5670:	df 91       	pop	r29
    5672:	cf 91       	pop	r28
    5674:	08 95       	ret

00005676 <serial_sendBytes>:
    5676:	ef 92       	push	r14
    5678:	ff 92       	push	r15
    567a:	0f 93       	push	r16
    567c:	1f 93       	push	r17
    567e:	cf 93       	push	r28
    5680:	df 93       	push	r29
    5682:	7c 01       	movw	r14, r24
    5684:	00 97       	sbiw	r24, 0x00	; 0
    5686:	09 f4       	brne	.+2      	; 0x568a <serial_sendBytes+0x14>
    5688:	41 c0       	rjmp	.+130    	; 0x570c <serial_sendBytes+0x96>
    568a:	dc 01       	movw	r26, r24
    568c:	12 96       	adiw	r26, 0x02	; 2
    568e:	ed 91       	ld	r30, X+
    5690:	fc 91       	ld	r31, X
    5692:	13 97       	sbiw	r26, 0x03	; 3
    5694:	93 81       	ldd	r25, Z+3	; 0x03
    5696:	82 81       	ldd	r24, Z+2	; 0x02
    5698:	98 1b       	sub	r25, r24
    569a:	85 81       	ldd	r24, Z+5	; 0x05
    569c:	98 23       	and	r25, r24
    569e:	84 81       	ldd	r24, Z+4	; 0x04
    56a0:	89 1b       	sub	r24, r25
    56a2:	86 17       	cp	r24, r22
    56a4:	a8 f1       	brcs	.+106    	; 0x5710 <serial_sendBytes+0x9a>
    56a6:	66 23       	and	r22, r22
    56a8:	41 f1       	breq	.+80     	; 0x56fa <serial_sendBytes+0x84>
    56aa:	84 2f       	mov	r24, r20
    56ac:	95 2f       	mov	r25, r21
    56ae:	dc 01       	movw	r26, r24
    56b0:	61 50       	subi	r22, 0x01	; 1
    56b2:	46 2f       	mov	r20, r22
    56b4:	50 e0       	ldi	r21, 0x00	; 0
    56b6:	4f 5f       	subi	r20, 0xFF	; 255
    56b8:	5f 4f       	sbci	r21, 0xFF	; 255
    56ba:	48 0f       	add	r20, r24
    56bc:	59 1f       	adc	r21, r25
    56be:	e7 01       	movw	r28, r14
    56c0:	ea 81       	ldd	r30, Y+2	; 0x02
    56c2:	fb 81       	ldd	r31, Y+3	; 0x03
    56c4:	93 81       	ldd	r25, Z+3	; 0x03
    56c6:	82 81       	ldd	r24, Z+2	; 0x02
    56c8:	25 81       	ldd	r18, Z+5	; 0x05
    56ca:	98 1b       	sub	r25, r24
    56cc:	92 23       	and	r25, r18
    56ce:	84 81       	ldd	r24, Z+4	; 0x04
    56d0:	98 17       	cp	r25, r24
    56d2:	79 f0       	breq	.+30     	; 0x56f2 <serial_sendBytes+0x7c>
    56d4:	8c 91       	ld	r24, X
    56d6:	93 81       	ldd	r25, Z+3	; 0x03
    56d8:	26 95       	lsr	r18
    56da:	29 23       	and	r18, r25
    56dc:	60 81       	ld	r22, Z
    56de:	71 81       	ldd	r23, Z+1	; 0x01
    56e0:	8b 01       	movw	r16, r22
    56e2:	02 0f       	add	r16, r18
    56e4:	11 1d       	adc	r17, r1
    56e6:	e8 01       	movw	r28, r16
    56e8:	88 83       	st	Y, r24
    56ea:	9f 5f       	subi	r25, 0xFF	; 255
    56ec:	85 81       	ldd	r24, Z+5	; 0x05
    56ee:	98 23       	and	r25, r24
    56f0:	93 83       	std	Z+3, r25	; 0x03
    56f2:	11 96       	adiw	r26, 0x01	; 1
    56f4:	a4 17       	cp	r26, r20
    56f6:	b5 07       	cpc	r27, r21
    56f8:	11 f7       	brne	.-60     	; 0x56be <serial_sendBytes+0x48>
    56fa:	d7 01       	movw	r26, r14
    56fc:	ed 91       	ld	r30, X+
    56fe:	fc 91       	ld	r31, X
    5700:	35 97       	sbiw	r30, 0x05	; 5
    5702:	80 81       	ld	r24, Z
    5704:	80 62       	ori	r24, 0x20	; 32
    5706:	80 83       	st	Z, r24
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	03 c0       	rjmp	.+6      	; 0x5712 <serial_sendBytes+0x9c>
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	01 c0       	rjmp	.+2      	; 0x5712 <serial_sendBytes+0x9c>
    5710:	82 e0       	ldi	r24, 0x02	; 2
    5712:	df 91       	pop	r29
    5714:	cf 91       	pop	r28
    5716:	1f 91       	pop	r17
    5718:	0f 91       	pop	r16
    571a:	ff 90       	pop	r15
    571c:	ef 90       	pop	r14
    571e:	08 95       	ret

00005720 <serial_getByte>:
    5720:	00 97       	sbiw	r24, 0x00	; 0
    5722:	d1 f0       	breq	.+52     	; 0x5758 <serial_getByte+0x38>
    5724:	dc 01       	movw	r26, r24
    5726:	14 96       	adiw	r26, 0x04	; 4
    5728:	ed 91       	ld	r30, X+
    572a:	fc 91       	ld	r31, X
    572c:	15 97       	sbiw	r26, 0x05	; 5
    572e:	93 81       	ldd	r25, Z+3	; 0x03
    5730:	82 81       	ldd	r24, Z+2	; 0x02
    5732:	98 17       	cp	r25, r24
    5734:	99 f0       	breq	.+38     	; 0x575c <serial_getByte+0x3c>
    5736:	92 81       	ldd	r25, Z+2	; 0x02
    5738:	85 81       	ldd	r24, Z+5	; 0x05
    573a:	86 95       	lsr	r24
    573c:	89 23       	and	r24, r25
    573e:	a0 81       	ld	r26, Z
    5740:	b1 81       	ldd	r27, Z+1	; 0x01
    5742:	a8 0f       	add	r26, r24
    5744:	b1 1d       	adc	r27, r1
    5746:	8c 91       	ld	r24, X
    5748:	db 01       	movw	r26, r22
    574a:	8c 93       	st	X, r24
    574c:	9f 5f       	subi	r25, 0xFF	; 255
    574e:	85 81       	ldd	r24, Z+5	; 0x05
    5750:	98 23       	and	r25, r24
    5752:	92 83       	std	Z+2, r25	; 0x02
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	08 95       	ret
    5758:	81 e0       	ldi	r24, 0x01	; 1
    575a:	08 95       	ret
    575c:	83 e0       	ldi	r24, 0x03	; 3
    575e:	08 95       	ret

00005760 <__vector_25>:
    5760:	1f 92       	push	r1
    5762:	0f 92       	push	r0
    5764:	0f b6       	in	r0, 0x3f	; 63
    5766:	0f 92       	push	r0
    5768:	11 24       	eor	r1, r1
    576a:	0b b6       	in	r0, 0x3b	; 59
    576c:	0f 92       	push	r0
    576e:	2f 93       	push	r18
    5770:	3f 93       	push	r19
    5772:	4f 93       	push	r20
    5774:	5f 93       	push	r21
    5776:	6f 93       	push	r22
    5778:	7f 93       	push	r23
    577a:	8f 93       	push	r24
    577c:	9f 93       	push	r25
    577e:	af 93       	push	r26
    5780:	bf 93       	push	r27
    5782:	cf 93       	push	r28
    5784:	df 93       	push	r29
    5786:	ef 93       	push	r30
    5788:	ff 93       	push	r31
    578a:	a0 91 d5 15 	lds	r26, 0x15D5	; 0x8015d5 <_ser_handle>
    578e:	b0 91 d6 15 	lds	r27, 0x15D6	; 0x8015d6 <_ser_handle+0x1>
    5792:	10 97       	sbiw	r26, 0x00	; 0
    5794:	11 f1       	breq	.+68     	; 0x57da <__vector_25+0x7a>
    5796:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    579a:	14 96       	adiw	r26, 0x04	; 4
    579c:	ed 91       	ld	r30, X+
    579e:	fc 91       	ld	r31, X
    57a0:	15 97       	sbiw	r26, 0x05	; 5
    57a2:	93 81       	ldd	r25, Z+3	; 0x03
    57a4:	82 81       	ldd	r24, Z+2	; 0x02
    57a6:	25 81       	ldd	r18, Z+5	; 0x05
    57a8:	98 1b       	sub	r25, r24
    57aa:	92 23       	and	r25, r18
    57ac:	84 81       	ldd	r24, Z+4	; 0x04
    57ae:	98 17       	cp	r25, r24
    57b0:	61 f0       	breq	.+24     	; 0x57ca <__vector_25+0x6a>
    57b2:	83 81       	ldd	r24, Z+3	; 0x03
    57b4:	26 95       	lsr	r18
    57b6:	28 23       	and	r18, r24
    57b8:	c0 81       	ld	r28, Z
    57ba:	d1 81       	ldd	r29, Z+1	; 0x01
    57bc:	c2 0f       	add	r28, r18
    57be:	d1 1d       	adc	r29, r1
    57c0:	68 83       	st	Y, r22
    57c2:	8f 5f       	subi	r24, 0xFF	; 255
    57c4:	95 81       	ldd	r25, Z+5	; 0x05
    57c6:	89 23       	and	r24, r25
    57c8:	83 83       	std	Z+3, r24	; 0x03
    57ca:	16 96       	adiw	r26, 0x06	; 6
    57cc:	ed 91       	ld	r30, X+
    57ce:	fc 91       	ld	r31, X
    57d0:	17 97       	sbiw	r26, 0x07	; 7
    57d2:	30 97       	sbiw	r30, 0x00	; 0
    57d4:	11 f0       	breq	.+4      	; 0x57da <__vector_25+0x7a>
    57d6:	cd 01       	movw	r24, r26
    57d8:	19 95       	eicall
    57da:	ff 91       	pop	r31
    57dc:	ef 91       	pop	r30
    57de:	df 91       	pop	r29
    57e0:	cf 91       	pop	r28
    57e2:	bf 91       	pop	r27
    57e4:	af 91       	pop	r26
    57e6:	9f 91       	pop	r25
    57e8:	8f 91       	pop	r24
    57ea:	7f 91       	pop	r23
    57ec:	6f 91       	pop	r22
    57ee:	5f 91       	pop	r21
    57f0:	4f 91       	pop	r20
    57f2:	3f 91       	pop	r19
    57f4:	2f 91       	pop	r18
    57f6:	0f 90       	pop	r0
    57f8:	0b be       	out	0x3b, r0	; 59
    57fa:	0f 90       	pop	r0
    57fc:	0f be       	out	0x3f, r0	; 63
    57fe:	0f 90       	pop	r0
    5800:	1f 90       	pop	r1
    5802:	18 95       	reti

00005804 <__vector_26>:
    5804:	1f 92       	push	r1
    5806:	0f 92       	push	r0
    5808:	0f b6       	in	r0, 0x3f	; 63
    580a:	0f 92       	push	r0
    580c:	11 24       	eor	r1, r1
    580e:	0b b6       	in	r0, 0x3b	; 59
    5810:	0f 92       	push	r0
    5812:	2f 93       	push	r18
    5814:	8f 93       	push	r24
    5816:	9f 93       	push	r25
    5818:	af 93       	push	r26
    581a:	bf 93       	push	r27
    581c:	ef 93       	push	r30
    581e:	ff 93       	push	r31
    5820:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <_ser_handle>
    5824:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <_ser_handle+0x1>
    5828:	30 97       	sbiw	r30, 0x00	; 0
    582a:	b9 f0       	breq	.+46     	; 0x585a <__vector_26+0x56>
    582c:	02 80       	ldd	r0, Z+2	; 0x02
    582e:	f3 81       	ldd	r31, Z+3	; 0x03
    5830:	e0 2d       	mov	r30, r0
    5832:	93 81       	ldd	r25, Z+3	; 0x03
    5834:	82 81       	ldd	r24, Z+2	; 0x02
    5836:	98 17       	cp	r25, r24
    5838:	b1 f0       	breq	.+44     	; 0x5866 <__vector_26+0x62>
    583a:	92 81       	ldd	r25, Z+2	; 0x02
    583c:	85 81       	ldd	r24, Z+5	; 0x05
    583e:	28 2f       	mov	r18, r24
    5840:	26 95       	lsr	r18
    5842:	29 23       	and	r18, r25
    5844:	a0 81       	ld	r26, Z
    5846:	b1 81       	ldd	r27, Z+1	; 0x01
    5848:	a2 0f       	add	r26, r18
    584a:	b1 1d       	adc	r27, r1
    584c:	2c 91       	ld	r18, X
    584e:	9f 5f       	subi	r25, 0xFF	; 255
    5850:	89 23       	and	r24, r25
    5852:	82 83       	std	Z+2, r24	; 0x02
    5854:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5858:	0b c0       	rjmp	.+22     	; 0x5870 <__vector_26+0x6c>
    585a:	e1 ec       	ldi	r30, 0xC1	; 193
    585c:	f0 e0       	ldi	r31, 0x00	; 0
    585e:	80 81       	ld	r24, Z
    5860:	8f 7d       	andi	r24, 0xDF	; 223
    5862:	80 83       	st	Z, r24
    5864:	05 c0       	rjmp	.+10     	; 0x5870 <__vector_26+0x6c>
    5866:	e1 ec       	ldi	r30, 0xC1	; 193
    5868:	f0 e0       	ldi	r31, 0x00	; 0
    586a:	80 81       	ld	r24, Z
    586c:	8f 7d       	andi	r24, 0xDF	; 223
    586e:	80 83       	st	Z, r24
    5870:	ff 91       	pop	r31
    5872:	ef 91       	pop	r30
    5874:	bf 91       	pop	r27
    5876:	af 91       	pop	r26
    5878:	9f 91       	pop	r25
    587a:	8f 91       	pop	r24
    587c:	2f 91       	pop	r18
    587e:	0f 90       	pop	r0
    5880:	0b be       	out	0x3b, r0	; 59
    5882:	0f 90       	pop	r0
    5884:	0f be       	out	0x3f, r0	; 63
    5886:	0f 90       	pop	r0
    5888:	1f 90       	pop	r1
    588a:	18 95       	reti

0000588c <__vector_36>:
    588c:	1f 92       	push	r1
    588e:	0f 92       	push	r0
    5890:	0f b6       	in	r0, 0x3f	; 63
    5892:	0f 92       	push	r0
    5894:	11 24       	eor	r1, r1
    5896:	0b b6       	in	r0, 0x3b	; 59
    5898:	0f 92       	push	r0
    589a:	2f 93       	push	r18
    589c:	3f 93       	push	r19
    589e:	4f 93       	push	r20
    58a0:	5f 93       	push	r21
    58a2:	6f 93       	push	r22
    58a4:	7f 93       	push	r23
    58a6:	8f 93       	push	r24
    58a8:	9f 93       	push	r25
    58aa:	af 93       	push	r26
    58ac:	bf 93       	push	r27
    58ae:	cf 93       	push	r28
    58b0:	df 93       	push	r29
    58b2:	ef 93       	push	r30
    58b4:	ff 93       	push	r31
    58b6:	a0 91 d7 15 	lds	r26, 0x15D7	; 0x8015d7 <_ser_handle+0x2>
    58ba:	b0 91 d8 15 	lds	r27, 0x15D8	; 0x8015d8 <_ser_handle+0x3>
    58be:	10 97       	sbiw	r26, 0x00	; 0
    58c0:	11 f1       	breq	.+68     	; 0x5906 <__vector_36+0x7a>
    58c2:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    58c6:	14 96       	adiw	r26, 0x04	; 4
    58c8:	ed 91       	ld	r30, X+
    58ca:	fc 91       	ld	r31, X
    58cc:	15 97       	sbiw	r26, 0x05	; 5
    58ce:	93 81       	ldd	r25, Z+3	; 0x03
    58d0:	82 81       	ldd	r24, Z+2	; 0x02
    58d2:	25 81       	ldd	r18, Z+5	; 0x05
    58d4:	98 1b       	sub	r25, r24
    58d6:	92 23       	and	r25, r18
    58d8:	84 81       	ldd	r24, Z+4	; 0x04
    58da:	98 17       	cp	r25, r24
    58dc:	61 f0       	breq	.+24     	; 0x58f6 <__vector_36+0x6a>
    58de:	83 81       	ldd	r24, Z+3	; 0x03
    58e0:	26 95       	lsr	r18
    58e2:	28 23       	and	r18, r24
    58e4:	c0 81       	ld	r28, Z
    58e6:	d1 81       	ldd	r29, Z+1	; 0x01
    58e8:	c2 0f       	add	r28, r18
    58ea:	d1 1d       	adc	r29, r1
    58ec:	68 83       	st	Y, r22
    58ee:	8f 5f       	subi	r24, 0xFF	; 255
    58f0:	95 81       	ldd	r25, Z+5	; 0x05
    58f2:	89 23       	and	r24, r25
    58f4:	83 83       	std	Z+3, r24	; 0x03
    58f6:	16 96       	adiw	r26, 0x06	; 6
    58f8:	ed 91       	ld	r30, X+
    58fa:	fc 91       	ld	r31, X
    58fc:	17 97       	sbiw	r26, 0x07	; 7
    58fe:	30 97       	sbiw	r30, 0x00	; 0
    5900:	11 f0       	breq	.+4      	; 0x5906 <__vector_36+0x7a>
    5902:	cd 01       	movw	r24, r26
    5904:	19 95       	eicall
    5906:	ff 91       	pop	r31
    5908:	ef 91       	pop	r30
    590a:	df 91       	pop	r29
    590c:	cf 91       	pop	r28
    590e:	bf 91       	pop	r27
    5910:	af 91       	pop	r26
    5912:	9f 91       	pop	r25
    5914:	8f 91       	pop	r24
    5916:	7f 91       	pop	r23
    5918:	6f 91       	pop	r22
    591a:	5f 91       	pop	r21
    591c:	4f 91       	pop	r20
    591e:	3f 91       	pop	r19
    5920:	2f 91       	pop	r18
    5922:	0f 90       	pop	r0
    5924:	0b be       	out	0x3b, r0	; 59
    5926:	0f 90       	pop	r0
    5928:	0f be       	out	0x3f, r0	; 63
    592a:	0f 90       	pop	r0
    592c:	1f 90       	pop	r1
    592e:	18 95       	reti

00005930 <__vector_37>:
    5930:	1f 92       	push	r1
    5932:	0f 92       	push	r0
    5934:	0f b6       	in	r0, 0x3f	; 63
    5936:	0f 92       	push	r0
    5938:	11 24       	eor	r1, r1
    593a:	0b b6       	in	r0, 0x3b	; 59
    593c:	0f 92       	push	r0
    593e:	2f 93       	push	r18
    5940:	8f 93       	push	r24
    5942:	9f 93       	push	r25
    5944:	af 93       	push	r26
    5946:	bf 93       	push	r27
    5948:	ef 93       	push	r30
    594a:	ff 93       	push	r31
    594c:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <_ser_handle+0x2>
    5950:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <_ser_handle+0x3>
    5954:	30 97       	sbiw	r30, 0x00	; 0
    5956:	b9 f0       	breq	.+46     	; 0x5986 <__vector_37+0x56>
    5958:	02 80       	ldd	r0, Z+2	; 0x02
    595a:	f3 81       	ldd	r31, Z+3	; 0x03
    595c:	e0 2d       	mov	r30, r0
    595e:	93 81       	ldd	r25, Z+3	; 0x03
    5960:	82 81       	ldd	r24, Z+2	; 0x02
    5962:	98 17       	cp	r25, r24
    5964:	b1 f0       	breq	.+44     	; 0x5992 <__vector_37+0x62>
    5966:	92 81       	ldd	r25, Z+2	; 0x02
    5968:	85 81       	ldd	r24, Z+5	; 0x05
    596a:	28 2f       	mov	r18, r24
    596c:	26 95       	lsr	r18
    596e:	29 23       	and	r18, r25
    5970:	a0 81       	ld	r26, Z
    5972:	b1 81       	ldd	r27, Z+1	; 0x01
    5974:	a2 0f       	add	r26, r18
    5976:	b1 1d       	adc	r27, r1
    5978:	2c 91       	ld	r18, X
    597a:	9f 5f       	subi	r25, 0xFF	; 255
    597c:	89 23       	and	r24, r25
    597e:	82 83       	std	Z+2, r24	; 0x02
    5980:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5984:	0b c0       	rjmp	.+22     	; 0x599c <__vector_37+0x6c>
    5986:	e9 ec       	ldi	r30, 0xC9	; 201
    5988:	f0 e0       	ldi	r31, 0x00	; 0
    598a:	80 81       	ld	r24, Z
    598c:	8f 7d       	andi	r24, 0xDF	; 223
    598e:	80 83       	st	Z, r24
    5990:	05 c0       	rjmp	.+10     	; 0x599c <__vector_37+0x6c>
    5992:	e9 ec       	ldi	r30, 0xC9	; 201
    5994:	f0 e0       	ldi	r31, 0x00	; 0
    5996:	80 81       	ld	r24, Z
    5998:	8f 7d       	andi	r24, 0xDF	; 223
    599a:	80 83       	st	Z, r24
    599c:	ff 91       	pop	r31
    599e:	ef 91       	pop	r30
    59a0:	bf 91       	pop	r27
    59a2:	af 91       	pop	r26
    59a4:	9f 91       	pop	r25
    59a6:	8f 91       	pop	r24
    59a8:	2f 91       	pop	r18
    59aa:	0f 90       	pop	r0
    59ac:	0b be       	out	0x3b, r0	; 59
    59ae:	0f 90       	pop	r0
    59b0:	0f be       	out	0x3f, r0	; 63
    59b2:	0f 90       	pop	r0
    59b4:	1f 90       	pop	r1
    59b6:	18 95       	reti

000059b8 <__vector_51>:
    59b8:	1f 92       	push	r1
    59ba:	0f 92       	push	r0
    59bc:	0f b6       	in	r0, 0x3f	; 63
    59be:	0f 92       	push	r0
    59c0:	11 24       	eor	r1, r1
    59c2:	0b b6       	in	r0, 0x3b	; 59
    59c4:	0f 92       	push	r0
    59c6:	2f 93       	push	r18
    59c8:	3f 93       	push	r19
    59ca:	4f 93       	push	r20
    59cc:	5f 93       	push	r21
    59ce:	6f 93       	push	r22
    59d0:	7f 93       	push	r23
    59d2:	8f 93       	push	r24
    59d4:	9f 93       	push	r25
    59d6:	af 93       	push	r26
    59d8:	bf 93       	push	r27
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	ef 93       	push	r30
    59e0:	ff 93       	push	r31
    59e2:	a0 91 d9 15 	lds	r26, 0x15D9	; 0x8015d9 <_ser_handle+0x4>
    59e6:	b0 91 da 15 	lds	r27, 0x15DA	; 0x8015da <_ser_handle+0x5>
    59ea:	10 97       	sbiw	r26, 0x00	; 0
    59ec:	11 f1       	breq	.+68     	; 0x5a32 <__vector_51+0x7a>
    59ee:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    59f2:	14 96       	adiw	r26, 0x04	; 4
    59f4:	ed 91       	ld	r30, X+
    59f6:	fc 91       	ld	r31, X
    59f8:	15 97       	sbiw	r26, 0x05	; 5
    59fa:	93 81       	ldd	r25, Z+3	; 0x03
    59fc:	82 81       	ldd	r24, Z+2	; 0x02
    59fe:	25 81       	ldd	r18, Z+5	; 0x05
    5a00:	98 1b       	sub	r25, r24
    5a02:	92 23       	and	r25, r18
    5a04:	84 81       	ldd	r24, Z+4	; 0x04
    5a06:	98 17       	cp	r25, r24
    5a08:	61 f0       	breq	.+24     	; 0x5a22 <__vector_51+0x6a>
    5a0a:	83 81       	ldd	r24, Z+3	; 0x03
    5a0c:	26 95       	lsr	r18
    5a0e:	28 23       	and	r18, r24
    5a10:	c0 81       	ld	r28, Z
    5a12:	d1 81       	ldd	r29, Z+1	; 0x01
    5a14:	c2 0f       	add	r28, r18
    5a16:	d1 1d       	adc	r29, r1
    5a18:	68 83       	st	Y, r22
    5a1a:	8f 5f       	subi	r24, 0xFF	; 255
    5a1c:	95 81       	ldd	r25, Z+5	; 0x05
    5a1e:	89 23       	and	r24, r25
    5a20:	83 83       	std	Z+3, r24	; 0x03
    5a22:	16 96       	adiw	r26, 0x06	; 6
    5a24:	ed 91       	ld	r30, X+
    5a26:	fc 91       	ld	r31, X
    5a28:	17 97       	sbiw	r26, 0x07	; 7
    5a2a:	30 97       	sbiw	r30, 0x00	; 0
    5a2c:	11 f0       	breq	.+4      	; 0x5a32 <__vector_51+0x7a>
    5a2e:	cd 01       	movw	r24, r26
    5a30:	19 95       	eicall
    5a32:	ff 91       	pop	r31
    5a34:	ef 91       	pop	r30
    5a36:	df 91       	pop	r29
    5a38:	cf 91       	pop	r28
    5a3a:	bf 91       	pop	r27
    5a3c:	af 91       	pop	r26
    5a3e:	9f 91       	pop	r25
    5a40:	8f 91       	pop	r24
    5a42:	7f 91       	pop	r23
    5a44:	6f 91       	pop	r22
    5a46:	5f 91       	pop	r21
    5a48:	4f 91       	pop	r20
    5a4a:	3f 91       	pop	r19
    5a4c:	2f 91       	pop	r18
    5a4e:	0f 90       	pop	r0
    5a50:	0b be       	out	0x3b, r0	; 59
    5a52:	0f 90       	pop	r0
    5a54:	0f be       	out	0x3f, r0	; 63
    5a56:	0f 90       	pop	r0
    5a58:	1f 90       	pop	r1
    5a5a:	18 95       	reti

00005a5c <__vector_52>:
    5a5c:	1f 92       	push	r1
    5a5e:	0f 92       	push	r0
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	0f 92       	push	r0
    5a64:	11 24       	eor	r1, r1
    5a66:	0b b6       	in	r0, 0x3b	; 59
    5a68:	0f 92       	push	r0
    5a6a:	2f 93       	push	r18
    5a6c:	8f 93       	push	r24
    5a6e:	9f 93       	push	r25
    5a70:	af 93       	push	r26
    5a72:	bf 93       	push	r27
    5a74:	ef 93       	push	r30
    5a76:	ff 93       	push	r31
    5a78:	e0 91 d9 15 	lds	r30, 0x15D9	; 0x8015d9 <_ser_handle+0x4>
    5a7c:	f0 91 da 15 	lds	r31, 0x15DA	; 0x8015da <_ser_handle+0x5>
    5a80:	30 97       	sbiw	r30, 0x00	; 0
    5a82:	b9 f0       	breq	.+46     	; 0x5ab2 <__vector_52+0x56>
    5a84:	02 80       	ldd	r0, Z+2	; 0x02
    5a86:	f3 81       	ldd	r31, Z+3	; 0x03
    5a88:	e0 2d       	mov	r30, r0
    5a8a:	93 81       	ldd	r25, Z+3	; 0x03
    5a8c:	82 81       	ldd	r24, Z+2	; 0x02
    5a8e:	98 17       	cp	r25, r24
    5a90:	b1 f0       	breq	.+44     	; 0x5abe <__vector_52+0x62>
    5a92:	92 81       	ldd	r25, Z+2	; 0x02
    5a94:	85 81       	ldd	r24, Z+5	; 0x05
    5a96:	28 2f       	mov	r18, r24
    5a98:	26 95       	lsr	r18
    5a9a:	29 23       	and	r18, r25
    5a9c:	a0 81       	ld	r26, Z
    5a9e:	b1 81       	ldd	r27, Z+1	; 0x01
    5aa0:	a2 0f       	add	r26, r18
    5aa2:	b1 1d       	adc	r27, r1
    5aa4:	2c 91       	ld	r18, X
    5aa6:	9f 5f       	subi	r25, 0xFF	; 255
    5aa8:	89 23       	and	r24, r25
    5aaa:	82 83       	std	Z+2, r24	; 0x02
    5aac:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5ab0:	0b c0       	rjmp	.+22     	; 0x5ac8 <__vector_52+0x6c>
    5ab2:	e1 ed       	ldi	r30, 0xD1	; 209
    5ab4:	f0 e0       	ldi	r31, 0x00	; 0
    5ab6:	80 81       	ld	r24, Z
    5ab8:	8f 7d       	andi	r24, 0xDF	; 223
    5aba:	80 83       	st	Z, r24
    5abc:	05 c0       	rjmp	.+10     	; 0x5ac8 <__vector_52+0x6c>
    5abe:	e1 ed       	ldi	r30, 0xD1	; 209
    5ac0:	f0 e0       	ldi	r31, 0x00	; 0
    5ac2:	80 81       	ld	r24, Z
    5ac4:	8f 7d       	andi	r24, 0xDF	; 223
    5ac6:	80 83       	st	Z, r24
    5ac8:	ff 91       	pop	r31
    5aca:	ef 91       	pop	r30
    5acc:	bf 91       	pop	r27
    5ace:	af 91       	pop	r26
    5ad0:	9f 91       	pop	r25
    5ad2:	8f 91       	pop	r24
    5ad4:	2f 91       	pop	r18
    5ad6:	0f 90       	pop	r0
    5ad8:	0b be       	out	0x3b, r0	; 59
    5ada:	0f 90       	pop	r0
    5adc:	0f be       	out	0x3f, r0	; 63
    5ade:	0f 90       	pop	r0
    5ae0:	1f 90       	pop	r1
    5ae2:	18 95       	reti

00005ae4 <__vector_54>:
    5ae4:	1f 92       	push	r1
    5ae6:	0f 92       	push	r0
    5ae8:	0f b6       	in	r0, 0x3f	; 63
    5aea:	0f 92       	push	r0
    5aec:	11 24       	eor	r1, r1
    5aee:	0b b6       	in	r0, 0x3b	; 59
    5af0:	0f 92       	push	r0
    5af2:	2f 93       	push	r18
    5af4:	3f 93       	push	r19
    5af6:	4f 93       	push	r20
    5af8:	5f 93       	push	r21
    5afa:	6f 93       	push	r22
    5afc:	7f 93       	push	r23
    5afe:	8f 93       	push	r24
    5b00:	9f 93       	push	r25
    5b02:	af 93       	push	r26
    5b04:	bf 93       	push	r27
    5b06:	cf 93       	push	r28
    5b08:	df 93       	push	r29
    5b0a:	ef 93       	push	r30
    5b0c:	ff 93       	push	r31
    5b0e:	a0 91 db 15 	lds	r26, 0x15DB	; 0x8015db <_ser_handle+0x6>
    5b12:	b0 91 dc 15 	lds	r27, 0x15DC	; 0x8015dc <_ser_handle+0x7>
    5b16:	10 97       	sbiw	r26, 0x00	; 0
    5b18:	11 f1       	breq	.+68     	; 0x5b5e <__vector_54+0x7a>
    5b1a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5b1e:	14 96       	adiw	r26, 0x04	; 4
    5b20:	ed 91       	ld	r30, X+
    5b22:	fc 91       	ld	r31, X
    5b24:	15 97       	sbiw	r26, 0x05	; 5
    5b26:	93 81       	ldd	r25, Z+3	; 0x03
    5b28:	82 81       	ldd	r24, Z+2	; 0x02
    5b2a:	25 81       	ldd	r18, Z+5	; 0x05
    5b2c:	98 1b       	sub	r25, r24
    5b2e:	92 23       	and	r25, r18
    5b30:	84 81       	ldd	r24, Z+4	; 0x04
    5b32:	98 17       	cp	r25, r24
    5b34:	61 f0       	breq	.+24     	; 0x5b4e <__vector_54+0x6a>
    5b36:	83 81       	ldd	r24, Z+3	; 0x03
    5b38:	26 95       	lsr	r18
    5b3a:	28 23       	and	r18, r24
    5b3c:	c0 81       	ld	r28, Z
    5b3e:	d1 81       	ldd	r29, Z+1	; 0x01
    5b40:	c2 0f       	add	r28, r18
    5b42:	d1 1d       	adc	r29, r1
    5b44:	68 83       	st	Y, r22
    5b46:	8f 5f       	subi	r24, 0xFF	; 255
    5b48:	95 81       	ldd	r25, Z+5	; 0x05
    5b4a:	89 23       	and	r24, r25
    5b4c:	83 83       	std	Z+3, r24	; 0x03
    5b4e:	16 96       	adiw	r26, 0x06	; 6
    5b50:	ed 91       	ld	r30, X+
    5b52:	fc 91       	ld	r31, X
    5b54:	17 97       	sbiw	r26, 0x07	; 7
    5b56:	30 97       	sbiw	r30, 0x00	; 0
    5b58:	11 f0       	breq	.+4      	; 0x5b5e <__vector_54+0x7a>
    5b5a:	cd 01       	movw	r24, r26
    5b5c:	19 95       	eicall
    5b5e:	ff 91       	pop	r31
    5b60:	ef 91       	pop	r30
    5b62:	df 91       	pop	r29
    5b64:	cf 91       	pop	r28
    5b66:	bf 91       	pop	r27
    5b68:	af 91       	pop	r26
    5b6a:	9f 91       	pop	r25
    5b6c:	8f 91       	pop	r24
    5b6e:	7f 91       	pop	r23
    5b70:	6f 91       	pop	r22
    5b72:	5f 91       	pop	r21
    5b74:	4f 91       	pop	r20
    5b76:	3f 91       	pop	r19
    5b78:	2f 91       	pop	r18
    5b7a:	0f 90       	pop	r0
    5b7c:	0b be       	out	0x3b, r0	; 59
    5b7e:	0f 90       	pop	r0
    5b80:	0f be       	out	0x3f, r0	; 63
    5b82:	0f 90       	pop	r0
    5b84:	1f 90       	pop	r1
    5b86:	18 95       	reti

00005b88 <__vector_55>:
    5b88:	1f 92       	push	r1
    5b8a:	0f 92       	push	r0
    5b8c:	0f b6       	in	r0, 0x3f	; 63
    5b8e:	0f 92       	push	r0
    5b90:	11 24       	eor	r1, r1
    5b92:	0b b6       	in	r0, 0x3b	; 59
    5b94:	0f 92       	push	r0
    5b96:	2f 93       	push	r18
    5b98:	8f 93       	push	r24
    5b9a:	9f 93       	push	r25
    5b9c:	af 93       	push	r26
    5b9e:	bf 93       	push	r27
    5ba0:	ef 93       	push	r30
    5ba2:	ff 93       	push	r31
    5ba4:	e0 91 db 15 	lds	r30, 0x15DB	; 0x8015db <_ser_handle+0x6>
    5ba8:	f0 91 dc 15 	lds	r31, 0x15DC	; 0x8015dc <_ser_handle+0x7>
    5bac:	30 97       	sbiw	r30, 0x00	; 0
    5bae:	b9 f0       	breq	.+46     	; 0x5bde <__vector_55+0x56>
    5bb0:	02 80       	ldd	r0, Z+2	; 0x02
    5bb2:	f3 81       	ldd	r31, Z+3	; 0x03
    5bb4:	e0 2d       	mov	r30, r0
    5bb6:	93 81       	ldd	r25, Z+3	; 0x03
    5bb8:	82 81       	ldd	r24, Z+2	; 0x02
    5bba:	98 17       	cp	r25, r24
    5bbc:	b1 f0       	breq	.+44     	; 0x5bea <__vector_55+0x62>
    5bbe:	92 81       	ldd	r25, Z+2	; 0x02
    5bc0:	85 81       	ldd	r24, Z+5	; 0x05
    5bc2:	28 2f       	mov	r18, r24
    5bc4:	26 95       	lsr	r18
    5bc6:	29 23       	and	r18, r25
    5bc8:	a0 81       	ld	r26, Z
    5bca:	b1 81       	ldd	r27, Z+1	; 0x01
    5bcc:	a2 0f       	add	r26, r18
    5bce:	b1 1d       	adc	r27, r1
    5bd0:	2c 91       	ld	r18, X
    5bd2:	9f 5f       	subi	r25, 0xFF	; 255
    5bd4:	89 23       	and	r24, r25
    5bd6:	82 83       	std	Z+2, r24	; 0x02
    5bd8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5bdc:	0b c0       	rjmp	.+22     	; 0x5bf4 <__vector_55+0x6c>
    5bde:	e1 e3       	ldi	r30, 0x31	; 49
    5be0:	f1 e0       	ldi	r31, 0x01	; 1
    5be2:	80 81       	ld	r24, Z
    5be4:	8f 7d       	andi	r24, 0xDF	; 223
    5be6:	80 83       	st	Z, r24
    5be8:	05 c0       	rjmp	.+10     	; 0x5bf4 <__vector_55+0x6c>
    5bea:	e1 e3       	ldi	r30, 0x31	; 49
    5bec:	f1 e0       	ldi	r31, 0x01	; 1
    5bee:	80 81       	ld	r24, Z
    5bf0:	8f 7d       	andi	r24, 0xDF	; 223
    5bf2:	80 83       	st	Z, r24
    5bf4:	ff 91       	pop	r31
    5bf6:	ef 91       	pop	r30
    5bf8:	bf 91       	pop	r27
    5bfa:	af 91       	pop	r26
    5bfc:	9f 91       	pop	r25
    5bfe:	8f 91       	pop	r24
    5c00:	2f 91       	pop	r18
    5c02:	0f 90       	pop	r0
    5c04:	0b be       	out	0x3b, r0	; 59
    5c06:	0f 90       	pop	r0
    5c08:	0f be       	out	0x3f, r0	; 63
    5c0a:	0f 90       	pop	r0
    5c0c:	1f 90       	pop	r1
    5c0e:	18 95       	reti

00005c10 <usart_getchar>:
    5c10:	cf 93       	push	r28
    5c12:	df 93       	push	r29
    5c14:	1f 92       	push	r1
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
    5c1a:	be 01       	movw	r22, r28
    5c1c:	6f 5f       	subi	r22, 0xFF	; 255
    5c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c20:	80 91 dd 15 	lds	r24, 0x15DD	; 0x8015dd <_com_serial_instance>
    5c24:	90 91 de 15 	lds	r25, 0x15DE	; 0x8015de <_com_serial_instance+0x1>
    5c28:	7b dd       	rcall	.-1290   	; 0x5720 <serial_getByte>
    5c2a:	81 11       	cpse	r24, r1
    5c2c:	f6 cf       	rjmp	.-20     	; 0x5c1a <usart_getchar+0xa>
    5c2e:	89 81       	ldd	r24, Y+1	; 0x01
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	0f 90       	pop	r0
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	08 95       	ret

00005c3a <usart_putchar>:
    5c3a:	68 2f       	mov	r22, r24
    5c3c:	80 91 dd 15 	lds	r24, 0x15DD	; 0x8015dd <_com_serial_instance>
    5c40:	90 91 de 15 	lds	r25, 0x15DE	; 0x8015de <_com_serial_instance+0x1>
    5c44:	ed dc       	rcall	.-1574   	; 0x5620 <serial_sendByte>
    5c46:	80 e0       	ldi	r24, 0x00	; 0
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	08 95       	ret

00005c4c <stdio_initialise>:
    5c4c:	8f 92       	push	r8
    5c4e:	9f 92       	push	r9
    5c50:	af 92       	push	r10
    5c52:	cf 92       	push	r12
    5c54:	ef 92       	push	r14
    5c56:	0f 93       	push	r16
    5c58:	81 2c       	mov	r8, r1
    5c5a:	91 2c       	mov	r9, r1
    5c5c:	68 94       	set
    5c5e:	aa 24       	eor	r10, r10
    5c60:	a7 f8       	bld	r10, 7
    5c62:	68 94       	set
    5c64:	cc 24       	eor	r12, r12
    5c66:	c7 f8       	bld	r12, 7
    5c68:	e1 2c       	mov	r14, r1
    5c6a:	00 e0       	ldi	r16, 0x00	; 0
    5c6c:	23 e0       	ldi	r18, 0x03	; 3
    5c6e:	40 e0       	ldi	r20, 0x00	; 0
    5c70:	51 ee       	ldi	r21, 0xE1	; 225
    5c72:	60 e0       	ldi	r22, 0x00	; 0
    5c74:	70 e0       	ldi	r23, 0x00	; 0
    5c76:	31 dc       	rcall	.-1950   	; 0x54da <serial_create>
    5c78:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <_com_serial_instance+0x1>
    5c7c:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <_com_serial_instance>
    5c80:	ed e1       	ldi	r30, 0x1D	; 29
    5c82:	f6 e1       	ldi	r31, 0x16	; 22
    5c84:	83 e1       	ldi	r24, 0x13	; 19
    5c86:	92 e0       	ldi	r25, 0x02	; 2
    5c88:	91 83       	std	Z+1, r25	; 0x01
    5c8a:	80 83       	st	Z, r24
    5c8c:	93 83       	std	Z+3, r25	; 0x03
    5c8e:	82 83       	std	Z+2, r24	; 0x02
    5c90:	0f 91       	pop	r16
    5c92:	ef 90       	pop	r14
    5c94:	cf 90       	pop	r12
    5c96:	af 90       	pop	r10
    5c98:	9f 90       	pop	r9
    5c9a:	8f 90       	pop	r8
    5c9c:	08 95       	ret

00005c9e <_callBack>:
    5c9e:	e0 91 e7 15 	lds	r30, 0x15E7	; 0x8015e7 <_callBackFunction>
    5ca2:	f0 91 e8 15 	lds	r31, 0x15E8	; 0x8015e8 <_callBackFunction+0x1>
    5ca6:	30 97       	sbiw	r30, 0x00	; 0
    5ca8:	09 f0       	breq	.+2      	; 0x5cac <_callBack+0xe>
    5caa:	19 95       	eicall
    5cac:	08 95       	ret

00005cae <_tsl2591TwiCallback>:
    5cae:	64 50       	subi	r22, 0x04	; 4
    5cb0:	62 30       	cpi	r22, 0x02	; 2
    5cb2:	08 f0       	brcs	.+2      	; 0x5cb6 <_tsl2591TwiCallback+0x8>
    5cb4:	3b c0       	rjmp	.+118    	; 0x5d2c <_tsl2591TwiCallback+0x7e>
    5cb6:	20 91 e6 15 	lds	r18, 0x15E6	; 0x8015e6 <_nextState>
    5cba:	22 30       	cpi	r18, 0x02	; 2
    5cbc:	79 f0       	breq	.+30     	; 0x5cdc <_tsl2591TwiCallback+0x2e>
    5cbe:	18 f4       	brcc	.+6      	; 0x5cc6 <_tsl2591TwiCallback+0x18>
    5cc0:	21 30       	cpi	r18, 0x01	; 1
    5cc2:	31 f0       	breq	.+12     	; 0x5cd0 <_tsl2591TwiCallback+0x22>
    5cc4:	30 c0       	rjmp	.+96     	; 0x5d26 <_tsl2591TwiCallback+0x78>
    5cc6:	23 30       	cpi	r18, 0x03	; 3
    5cc8:	81 f0       	breq	.+32     	; 0x5cea <_tsl2591TwiCallback+0x3c>
    5cca:	24 30       	cpi	r18, 0x04	; 4
    5ccc:	a1 f0       	breq	.+40     	; 0x5cf6 <_tsl2591TwiCallback+0x48>
    5cce:	2b c0       	rjmp	.+86     	; 0x5d26 <_tsl2591TwiCallback+0x78>
    5cd0:	22 e0       	ldi	r18, 0x02	; 2
    5cd2:	20 93 e6 15 	sts	0x15E6, r18	; 0x8015e6 <_nextState>
    5cd6:	61 e0       	ldi	r22, 0x01	; 1
    5cd8:	10 c2       	rjmp	.+1056   	; 0x60fa <twiReceive>
    5cda:	08 95       	ret
    5cdc:	fa 01       	movw	r30, r20
    5cde:	80 81       	ld	r24, Z
    5ce0:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <_deviceId>
    5ce4:	82 e0       	ldi	r24, 0x02	; 2
    5ce6:	db cf       	rjmp	.-74     	; 0x5c9e <_callBack>
    5ce8:	08 95       	ret
    5cea:	24 e0       	ldi	r18, 0x04	; 4
    5cec:	20 93 e6 15 	sts	0x15E6, r18	; 0x8015e6 <_nextState>
    5cf0:	64 e0       	ldi	r22, 0x04	; 4
    5cf2:	03 c2       	rjmp	.+1030   	; 0x60fa <twiReceive>
    5cf4:	08 95       	ret
    5cf6:	fa 01       	movw	r30, r20
    5cf8:	81 81       	ldd	r24, Z+1	; 0x01
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	98 2f       	mov	r25, r24
    5cfe:	88 27       	eor	r24, r24
    5d00:	20 81       	ld	r18, Z
    5d02:	82 2b       	or	r24, r18
    5d04:	90 93 e2 15 	sts	0x15E2, r25	; 0x8015e2 <_fullSpectrumRaw+0x1>
    5d08:	80 93 e1 15 	sts	0x15E1, r24	; 0x8015e1 <_fullSpectrumRaw>
    5d0c:	83 81       	ldd	r24, Z+3	; 0x03
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	98 2f       	mov	r25, r24
    5d12:	88 27       	eor	r24, r24
    5d14:	22 81       	ldd	r18, Z+2	; 0x02
    5d16:	82 2b       	or	r24, r18
    5d18:	90 93 e0 15 	sts	0x15E0, r25	; 0x8015e0 <_infraredRaw+0x1>
    5d1c:	80 93 df 15 	sts	0x15DF, r24	; 0x8015df <_infraredRaw>
    5d20:	81 e0       	ldi	r24, 0x01	; 1
    5d22:	bd cf       	rjmp	.-134    	; 0x5c9e <_callBack>
    5d24:	08 95       	ret
    5d26:	80 e0       	ldi	r24, 0x00	; 0
    5d28:	ba cf       	rjmp	.-140    	; 0x5c9e <_callBack>
    5d2a:	08 95       	ret
    5d2c:	10 92 e6 15 	sts	0x15E6, r1	; 0x8015e6 <_nextState>
    5d30:	86 e0       	ldi	r24, 0x06	; 6
    5d32:	b5 cf       	rjmp	.-150    	; 0x5c9e <_callBack>
    5d34:	08 95       	ret

00005d36 <_twiTransmit>:
    5d36:	20 91 e9 15 	lds	r18, 0x15E9	; 0x8015e9 <_twiHandler>
    5d3a:	30 91 ea 15 	lds	r19, 0x15EA	; 0x8015ea <_twiHandler+0x1>
    5d3e:	21 15       	cp	r18, r1
    5d40:	31 05       	cpc	r19, r1
    5d42:	41 f0       	breq	.+16     	; 0x5d54 <_twiTransmit+0x1e>
    5d44:	46 2f       	mov	r20, r22
    5d46:	bc 01       	movw	r22, r24
    5d48:	c9 01       	movw	r24, r18
    5d4a:	8b d1       	rcall	.+790    	; 0x6062 <twiTransmit>
    5d4c:	82 30       	cpi	r24, 0x02	; 2
    5d4e:	21 f0       	breq	.+8      	; 0x5d58 <_twiTransmit+0x22>
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	08 95       	ret
    5d54:	87 e0       	ldi	r24, 0x07	; 7
    5d56:	08 95       	ret
    5d58:	85 e0       	ldi	r24, 0x05	; 5
    5d5a:	08 95       	ret

00005d5c <tsl2591_initialise>:
    5d5c:	0f 93       	push	r16
    5d5e:	1f 93       	push	r17
    5d60:	90 93 e8 15 	sts	0x15E8, r25	; 0x8015e8 <_callBackFunction+0x1>
    5d64:	80 93 e7 15 	sts	0x15E7, r24	; 0x8015e7 <_callBackFunction>
    5d68:	07 e5       	ldi	r16, 0x57	; 87
    5d6a:	1e e2       	ldi	r17, 0x2E	; 46
    5d6c:	20 e0       	ldi	r18, 0x00	; 0
    5d6e:	34 e2       	ldi	r19, 0x24	; 36
    5d70:	44 ef       	ldi	r20, 0xF4	; 244
    5d72:	50 e0       	ldi	r21, 0x00	; 0
    5d74:	60 e0       	ldi	r22, 0x00	; 0
    5d76:	89 e2       	ldi	r24, 0x29	; 41
    5d78:	23 d1       	rcall	.+582    	; 0x5fc0 <twiCreate>
    5d7a:	90 93 ea 15 	sts	0x15EA, r25	; 0x8015ea <_twiHandler+0x1>
    5d7e:	80 93 e9 15 	sts	0x15E9, r24	; 0x8015e9 <_twiHandler>
    5d82:	89 2b       	or	r24, r25
    5d84:	11 f0       	breq	.+4      	; 0x5d8a <tsl2591_initialise+0x2e>
    5d86:	80 e0       	ldi	r24, 0x00	; 0
    5d88:	01 c0       	rjmp	.+2      	; 0x5d8c <tsl2591_initialise+0x30>
    5d8a:	88 e0       	ldi	r24, 0x08	; 8
    5d8c:	1f 91       	pop	r17
    5d8e:	0f 91       	pop	r16
    5d90:	08 95       	ret

00005d92 <tsl2591_enable>:
    5d92:	cf 93       	push	r28
    5d94:	df 93       	push	r29
    5d96:	1f 92       	push	r1
    5d98:	1f 92       	push	r1
    5d9a:	cd b7       	in	r28, 0x3d	; 61
    5d9c:	de b7       	in	r29, 0x3e	; 62
    5d9e:	80 ea       	ldi	r24, 0xA0	; 160
    5da0:	89 83       	std	Y+1, r24	; 0x01
    5da2:	83 e0       	ldi	r24, 0x03	; 3
    5da4:	8a 83       	std	Y+2, r24	; 0x02
    5da6:	10 92 e6 15 	sts	0x15E6, r1	; 0x8015e6 <_nextState>
    5daa:	62 e0       	ldi	r22, 0x02	; 2
    5dac:	ce 01       	movw	r24, r28
    5dae:	01 96       	adiw	r24, 0x01	; 1
    5db0:	c2 df       	rcall	.-124    	; 0x5d36 <_twiTransmit>
    5db2:	0f 90       	pop	r0
    5db4:	0f 90       	pop	r0
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	08 95       	ret

00005dbc <tsl2591_fetchData>:
    5dbc:	cf 93       	push	r28
    5dbe:	df 93       	push	r29
    5dc0:	1f 92       	push	r1
    5dc2:	cd b7       	in	r28, 0x3d	; 61
    5dc4:	de b7       	in	r29, 0x3e	; 62
    5dc6:	84 eb       	ldi	r24, 0xB4	; 180
    5dc8:	89 83       	std	Y+1, r24	; 0x01
    5dca:	83 e0       	ldi	r24, 0x03	; 3
    5dcc:	80 93 e6 15 	sts	0x15E6, r24	; 0x8015e6 <_nextState>
    5dd0:	61 e0       	ldi	r22, 0x01	; 1
    5dd2:	ce 01       	movw	r24, r28
    5dd4:	01 96       	adiw	r24, 0x01	; 1
    5dd6:	af df       	rcall	.-162    	; 0x5d36 <_twiTransmit>
    5dd8:	0f 90       	pop	r0
    5dda:	df 91       	pop	r29
    5ddc:	cf 91       	pop	r28
    5dde:	08 95       	ret

00005de0 <tsl2591_getLux>:
    5de0:	2f 92       	push	r2
    5de2:	3f 92       	push	r3
    5de4:	4f 92       	push	r4
    5de6:	5f 92       	push	r5
    5de8:	6f 92       	push	r6
    5dea:	7f 92       	push	r7
    5dec:	8f 92       	push	r8
    5dee:	9f 92       	push	r9
    5df0:	af 92       	push	r10
    5df2:	bf 92       	push	r11
    5df4:	cf 92       	push	r12
    5df6:	df 92       	push	r13
    5df8:	ef 92       	push	r14
    5dfa:	ff 92       	push	r15
    5dfc:	0f 93       	push	r16
    5dfe:	1f 93       	push	r17
    5e00:	cf 93       	push	r28
    5e02:	df 93       	push	r29
    5e04:	c0 91 df 15 	lds	r28, 0x15DF	; 0x8015df <_infraredRaw>
    5e08:	d0 91 e0 15 	lds	r29, 0x15E0	; 0x8015e0 <_infraredRaw+0x1>
    5e0c:	cf 3f       	cpi	r28, 0xFF	; 255
    5e0e:	2f ef       	ldi	r18, 0xFF	; 255
    5e10:	d2 07       	cpc	r29, r18
    5e12:	41 f0       	breq	.+16     	; 0x5e24 <tsl2591_getLux+0x44>
    5e14:	60 91 e1 15 	lds	r22, 0x15E1	; 0x8015e1 <_fullSpectrumRaw>
    5e18:	70 91 e2 15 	lds	r23, 0x15E2	; 0x8015e2 <_fullSpectrumRaw+0x1>
    5e1c:	6f 3f       	cpi	r22, 0xFF	; 255
    5e1e:	ef ef       	ldi	r30, 0xFF	; 255
    5e20:	7e 07       	cpc	r23, r30
    5e22:	59 f4       	brne	.+22     	; 0x5e3a <tsl2591_getLux+0x5a>
    5e24:	4f ef       	ldi	r20, 0xFF	; 255
    5e26:	5f ef       	ldi	r21, 0xFF	; 255
    5e28:	6f e7       	ldi	r22, 0x7F	; 127
    5e2a:	7f e7       	ldi	r23, 0x7F	; 127
    5e2c:	fc 01       	movw	r30, r24
    5e2e:	40 83       	st	Z, r20
    5e30:	51 83       	std	Z+1, r21	; 0x01
    5e32:	62 83       	std	Z+2, r22	; 0x02
    5e34:	73 83       	std	Z+3, r23	; 0x03
    5e36:	83 e0       	ldi	r24, 0x03	; 3
    5e38:	9f c0       	rjmp	.+318    	; 0x5f78 <tsl2591_getLux+0x198>
    5e3a:	1c 01       	movw	r2, r24
    5e3c:	80 e0       	ldi	r24, 0x00	; 0
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	62 d6       	rcall	.+3268   	; 0x6b06 <__floatunsisf>
    5e42:	2b 01       	movw	r4, r22
    5e44:	3c 01       	movw	r6, r24
    5e46:	be 01       	movw	r22, r28
    5e48:	80 e0       	ldi	r24, 0x00	; 0
    5e4a:	90 e0       	ldi	r25, 0x00	; 0
    5e4c:	5c d6       	rcall	.+3256   	; 0x6b06 <__floatunsisf>
    5e4e:	4b 01       	movw	r8, r22
    5e50:	5c 01       	movw	r10, r24
    5e52:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_currentIntegrationTime>
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	01 96       	adiw	r24, 0x01	; 1
    5e5a:	24 e6       	ldi	r18, 0x64	; 100
    5e5c:	28 9f       	mul	r18, r24
    5e5e:	b0 01       	movw	r22, r0
    5e60:	29 9f       	mul	r18, r25
    5e62:	70 0d       	add	r23, r0
    5e64:	11 24       	eor	r1, r1
    5e66:	80 91 e5 15 	lds	r24, 0x15E5	; 0x8015e5 <_currentGain>
    5e6a:	80 32       	cpi	r24, 0x20	; 32
    5e6c:	69 f0       	breq	.+26     	; 0x5e88 <tsl2591_getLux+0xa8>
    5e6e:	80 33       	cpi	r24, 0x30	; 48
    5e70:	a1 f0       	breq	.+40     	; 0x5e9a <tsl2591_getLux+0xba>
    5e72:	80 31       	cpi	r24, 0x10	; 16
    5e74:	e1 f4       	brne	.+56     	; 0x5eae <tsl2591_getLux+0xce>
    5e76:	0f 2e       	mov	r0, r31
    5e78:	c1 2c       	mov	r12, r1
    5e7a:	d1 2c       	mov	r13, r1
    5e7c:	f8 ec       	ldi	r31, 0xC8	; 200
    5e7e:	ef 2e       	mov	r14, r31
    5e80:	f1 e4       	ldi	r31, 0x41	; 65
    5e82:	ff 2e       	mov	r15, r31
    5e84:	f0 2d       	mov	r31, r0
    5e86:	1b c0       	rjmp	.+54     	; 0x5ebe <tsl2591_getLux+0xde>
    5e88:	0f 2e       	mov	r0, r31
    5e8a:	c1 2c       	mov	r12, r1
    5e8c:	d1 2c       	mov	r13, r1
    5e8e:	f6 ed       	ldi	r31, 0xD6	; 214
    5e90:	ef 2e       	mov	r14, r31
    5e92:	f3 e4       	ldi	r31, 0x43	; 67
    5e94:	ff 2e       	mov	r15, r31
    5e96:	f0 2d       	mov	r31, r0
    5e98:	12 c0       	rjmp	.+36     	; 0x5ebe <tsl2591_getLux+0xde>
    5e9a:	0f 2e       	mov	r0, r31
    5e9c:	c1 2c       	mov	r12, r1
    5e9e:	f0 e5       	ldi	r31, 0x50	; 80
    5ea0:	df 2e       	mov	r13, r31
    5ea2:	fa e1       	ldi	r31, 0x1A	; 26
    5ea4:	ef 2e       	mov	r14, r31
    5ea6:	f6 e4       	ldi	r31, 0x46	; 70
    5ea8:	ff 2e       	mov	r15, r31
    5eaa:	f0 2d       	mov	r31, r0
    5eac:	08 c0       	rjmp	.+16     	; 0x5ebe <tsl2591_getLux+0xde>
    5eae:	0f 2e       	mov	r0, r31
    5eb0:	c1 2c       	mov	r12, r1
    5eb2:	d1 2c       	mov	r13, r1
    5eb4:	f0 e8       	ldi	r31, 0x80	; 128
    5eb6:	ef 2e       	mov	r14, r31
    5eb8:	ff e3       	ldi	r31, 0x3F	; 63
    5eba:	ff 2e       	mov	r15, r31
    5ebc:	f0 2d       	mov	r31, r0
    5ebe:	07 2e       	mov	r0, r23
    5ec0:	00 0c       	add	r0, r0
    5ec2:	88 0b       	sbc	r24, r24
    5ec4:	99 0b       	sbc	r25, r25
    5ec6:	21 d6       	rcall	.+3138   	; 0x6b0a <__floatsisf>
    5ec8:	a7 01       	movw	r20, r14
    5eca:	96 01       	movw	r18, r12
    5ecc:	0e 94 89 23 	call	0x4712	; 0x4712 <__mulsf3>
    5ed0:	20 e0       	ldi	r18, 0x00	; 0
    5ed2:	30 e0       	ldi	r19, 0x00	; 0
    5ed4:	4c ec       	ldi	r20, 0xCC	; 204
    5ed6:	53 e4       	ldi	r21, 0x43	; 67
    5ed8:	a5 d5       	rcall	.+2890   	; 0x6a24 <__divsf3>
    5eda:	6b 01       	movw	r12, r22
    5edc:	7c 01       	movw	r14, r24
    5ede:	25 e8       	ldi	r18, 0x85	; 133
    5ee0:	3b ee       	ldi	r19, 0xEB	; 235
    5ee2:	41 ed       	ldi	r20, 0xD1	; 209
    5ee4:	5f e3       	ldi	r21, 0x3F	; 63
    5ee6:	c5 01       	movw	r24, r10
    5ee8:	b4 01       	movw	r22, r8
    5eea:	0e 94 89 23 	call	0x4712	; 0x4712 <__mulsf3>
    5eee:	9b 01       	movw	r18, r22
    5ef0:	ac 01       	movw	r20, r24
    5ef2:	c3 01       	movw	r24, r6
    5ef4:	b2 01       	movw	r22, r4
    5ef6:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__subsf3>
    5efa:	a7 01       	movw	r20, r14
    5efc:	96 01       	movw	r18, r12
    5efe:	92 d5       	rcall	.+2852   	; 0x6a24 <__divsf3>
    5f00:	16 2f       	mov	r17, r22
    5f02:	d7 2f       	mov	r29, r23
    5f04:	c8 2f       	mov	r28, r24
    5f06:	09 2f       	mov	r16, r25
    5f08:	2d e3       	ldi	r18, 0x3D	; 61
    5f0a:	3a e0       	ldi	r19, 0x0A	; 10
    5f0c:	47 e1       	ldi	r20, 0x17	; 23
    5f0e:	5f e3       	ldi	r21, 0x3F	; 63
    5f10:	c3 01       	movw	r24, r6
    5f12:	b2 01       	movw	r22, r4
    5f14:	0e 94 89 23 	call	0x4712	; 0x4712 <__mulsf3>
    5f18:	2b 01       	movw	r4, r22
    5f1a:	3c 01       	movw	r6, r24
    5f1c:	26 ef       	ldi	r18, 0xF6	; 246
    5f1e:	38 e2       	ldi	r19, 0x28	; 40
    5f20:	4c e5       	ldi	r20, 0x5C	; 92
    5f22:	5f e3       	ldi	r21, 0x3F	; 63
    5f24:	c5 01       	movw	r24, r10
    5f26:	b4 01       	movw	r22, r8
    5f28:	0e 94 89 23 	call	0x4712	; 0x4712 <__mulsf3>
    5f2c:	9b 01       	movw	r18, r22
    5f2e:	ac 01       	movw	r20, r24
    5f30:	c3 01       	movw	r24, r6
    5f32:	b2 01       	movw	r22, r4
    5f34:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__subsf3>
    5f38:	a7 01       	movw	r20, r14
    5f3a:	96 01       	movw	r18, r12
    5f3c:	73 d5       	rcall	.+2790   	; 0x6a24 <__divsf3>
    5f3e:	c6 2e       	mov	r12, r22
    5f40:	d7 2e       	mov	r13, r23
    5f42:	e8 2e       	mov	r14, r24
    5f44:	f9 2e       	mov	r15, r25
    5f46:	26 2f       	mov	r18, r22
    5f48:	37 2f       	mov	r19, r23
    5f4a:	48 2f       	mov	r20, r24
    5f4c:	59 2f       	mov	r21, r25
    5f4e:	61 2f       	mov	r22, r17
    5f50:	7d 2f       	mov	r23, r29
    5f52:	8c 2f       	mov	r24, r28
    5f54:	90 2f       	mov	r25, r16
    5f56:	14 d6       	rcall	.+3112   	; 0x6b80 <__gesf2>
    5f58:	18 16       	cp	r1, r24
    5f5a:	24 f0       	brlt	.+8      	; 0x5f64 <tsl2591_getLux+0x184>
    5f5c:	1c 2d       	mov	r17, r12
    5f5e:	dd 2d       	mov	r29, r13
    5f60:	ce 2d       	mov	r28, r14
    5f62:	0f 2d       	mov	r16, r15
    5f64:	41 2f       	mov	r20, r17
    5f66:	5d 2f       	mov	r21, r29
    5f68:	6c 2f       	mov	r22, r28
    5f6a:	70 2f       	mov	r23, r16
    5f6c:	f1 01       	movw	r30, r2
    5f6e:	40 83       	st	Z, r20
    5f70:	51 83       	std	Z+1, r21	; 0x01
    5f72:	62 83       	std	Z+2, r22	; 0x02
    5f74:	73 83       	std	Z+3, r23	; 0x03
    5f76:	80 e0       	ldi	r24, 0x00	; 0
    5f78:	df 91       	pop	r29
    5f7a:	cf 91       	pop	r28
    5f7c:	1f 91       	pop	r17
    5f7e:	0f 91       	pop	r16
    5f80:	ff 90       	pop	r15
    5f82:	ef 90       	pop	r14
    5f84:	df 90       	pop	r13
    5f86:	cf 90       	pop	r12
    5f88:	bf 90       	pop	r11
    5f8a:	af 90       	pop	r10
    5f8c:	9f 90       	pop	r9
    5f8e:	8f 90       	pop	r8
    5f90:	7f 90       	pop	r7
    5f92:	6f 90       	pop	r6
    5f94:	5f 90       	pop	r5
    5f96:	4f 90       	pop	r4
    5f98:	3f 90       	pop	r3
    5f9a:	2f 90       	pop	r2
    5f9c:	08 95       	ret

00005f9e <_initTwiInterface>:
    5f9e:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <_twiIsInitiated>
    5fa2:	81 11       	cpse	r24, r1
    5fa4:	0c c0       	rjmp	.+24     	; 0x5fbe <_initTwiInterface+0x20>
    5fa6:	8c e0       	ldi	r24, 0x0C	; 12
    5fa8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5fac:	8f ef       	ldi	r24, 0xFF	; 255
    5fae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5fb2:	84 e0       	ldi	r24, 0x04	; 4
    5fb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <_twiIsInitiated>
    5fbe:	08 95       	ret

00005fc0 <twiCreate>:
    5fc0:	af 92       	push	r10
    5fc2:	bf 92       	push	r11
    5fc4:	cf 92       	push	r12
    5fc6:	df 92       	push	r13
    5fc8:	ef 92       	push	r14
    5fca:	ff 92       	push	r15
    5fcc:	0f 93       	push	r16
    5fce:	1f 93       	push	r17
    5fd0:	cf 93       	push	r28
    5fd2:	df 93       	push	r29
    5fd4:	a8 2e       	mov	r10, r24
    5fd6:	b6 2e       	mov	r11, r22
    5fd8:	69 01       	movw	r12, r18
    5fda:	7a 01       	movw	r14, r20
    5fdc:	84 e0       	ldi	r24, 0x04	; 4
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	4a d6       	rcall	.+3220   	; 0x6c76 <malloc>
    5fe2:	ec 01       	movw	r28, r24
    5fe4:	89 2b       	or	r24, r25
    5fe6:	61 f1       	breq	.+88     	; 0x6040 <twiCreate+0x80>
    5fe8:	a8 82       	st	Y, r10
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	b8 12       	cpse	r11, r24
    5fee:	12 c0       	rjmp	.+36     	; 0x6014 <twiCreate+0x54>
    5ff0:	c7 01       	movw	r24, r14
    5ff2:	b6 01       	movw	r22, r12
    5ff4:	20 ea       	ldi	r18, 0xA0	; 160
    5ff6:	36 e8       	ldi	r19, 0x86	; 134
    5ff8:	41 e0       	ldi	r20, 0x01	; 1
    5ffa:	50 e0       	ldi	r21, 0x00	; 0
    5ffc:	e9 d5       	rcall	.+3026   	; 0x6bd0 <__udivmodsi4>
    5ffe:	da 01       	movw	r26, r20
    6000:	c9 01       	movw	r24, r18
    6002:	40 97       	sbiw	r24, 0x10	; 16
    6004:	a1 09       	sbc	r26, r1
    6006:	b1 09       	sbc	r27, r1
    6008:	b6 95       	lsr	r27
    600a:	a7 95       	ror	r26
    600c:	97 95       	ror	r25
    600e:	87 95       	ror	r24
    6010:	89 83       	std	Y+1, r24	; 0x01
    6012:	11 c0       	rjmp	.+34     	; 0x6036 <twiCreate+0x76>
    6014:	c7 01       	movw	r24, r14
    6016:	b6 01       	movw	r22, r12
    6018:	20 e8       	ldi	r18, 0x80	; 128
    601a:	3a e1       	ldi	r19, 0x1A	; 26
    601c:	46 e0       	ldi	r20, 0x06	; 6
    601e:	50 e0       	ldi	r21, 0x00	; 0
    6020:	d7 d5       	rcall	.+2990   	; 0x6bd0 <__udivmodsi4>
    6022:	da 01       	movw	r26, r20
    6024:	c9 01       	movw	r24, r18
    6026:	40 97       	sbiw	r24, 0x10	; 16
    6028:	a1 09       	sbc	r26, r1
    602a:	b1 09       	sbc	r27, r1
    602c:	b6 95       	lsr	r27
    602e:	a7 95       	ror	r26
    6030:	97 95       	ror	r25
    6032:	87 95       	ror	r24
    6034:	89 83       	std	Y+1, r24	; 0x01
    6036:	1b 83       	std	Y+3, r17	; 0x03
    6038:	0a 83       	std	Y+2, r16	; 0x02
    603a:	8c 2f       	mov	r24, r28
    603c:	9d 2f       	mov	r25, r29
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <twiCreate+0x84>
    6040:	80 e0       	ldi	r24, 0x00	; 0
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	df 91       	pop	r29
    6046:	cf 91       	pop	r28
    6048:	1f 91       	pop	r17
    604a:	0f 91       	pop	r16
    604c:	ff 90       	pop	r15
    604e:	ef 90       	pop	r14
    6050:	df 90       	pop	r13
    6052:	cf 90       	pop	r12
    6054:	bf 90       	pop	r11
    6056:	af 90       	pop	r10
    6058:	08 95       	ret

0000605a <twiIsBusy>:
    605a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    605e:	81 70       	andi	r24, 0x01	; 1
    6060:	08 95       	ret

00006062 <twiTransmit>:
    6062:	ff 92       	push	r15
    6064:	0f 93       	push	r16
    6066:	1f 93       	push	r17
    6068:	cf 93       	push	r28
    606a:	df 93       	push	r29
    606c:	00 97       	sbiw	r24, 0x00	; 0
    606e:	d1 f1       	breq	.+116    	; 0x60e4 <twiTransmit+0x82>
    6070:	4a 30       	cpi	r20, 0x0A	; 10
    6072:	d0 f5       	brcc	.+116    	; 0x60e8 <twiTransmit+0x86>
    6074:	f4 2e       	mov	r15, r20
    6076:	8b 01       	movw	r16, r22
    6078:	ec 01       	movw	r28, r24
    607a:	ef df       	rcall	.-34     	; 0x605a <twiIsBusy>
    607c:	81 11       	cpse	r24, r1
    607e:	36 c0       	rjmp	.+108    	; 0x60ec <twiTransmit+0x8a>
    6080:	80 91 ec 15 	lds	r24, 0x15EC	; 0x8015ec <_twiCurrentHandler>
    6084:	90 91 ed 15 	lds	r25, 0x15ED	; 0x8015ed <_twiCurrentHandler+0x1>
    6088:	c8 17       	cp	r28, r24
    608a:	d9 07       	cpc	r29, r25
    608c:	41 f0       	breq	.+16     	; 0x609e <twiTransmit+0x3c>
    608e:	87 df       	rcall	.-242    	; 0x5f9e <_initTwiInterface>
    6090:	89 81       	ldd	r24, Y+1	; 0x01
    6092:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    6096:	d0 93 ed 15 	sts	0x15ED, r29	; 0x8015ed <_twiCurrentHandler+0x1>
    609a:	c0 93 ec 15 	sts	0x15EC, r28	; 0x8015ec <_twiCurrentHandler>
    609e:	81 e0       	ldi	r24, 0x01	; 1
    60a0:	8f 0d       	add	r24, r15
    60a2:	80 93 ee 15 	sts	0x15EE, r24	; 0x8015ee <_twiMessageLen>
    60a6:	88 81       	ld	r24, Y
    60a8:	88 0f       	add	r24, r24
    60aa:	80 93 ef 15 	sts	0x15EF, r24	; 0x8015ef <_twiMessageBuffer>
    60ae:	ff 20       	and	r15, r15
    60b0:	89 f0       	breq	.+34     	; 0x60d4 <twiTransmit+0x72>
    60b2:	f8 01       	movw	r30, r16
    60b4:	a0 ef       	ldi	r26, 0xF0	; 240
    60b6:	b5 e1       	ldi	r27, 0x15	; 21
    60b8:	4f ef       	ldi	r20, 0xFF	; 255
    60ba:	4f 0d       	add	r20, r15
    60bc:	64 2f       	mov	r22, r20
    60be:	70 e0       	ldi	r23, 0x00	; 0
    60c0:	cb 01       	movw	r24, r22
    60c2:	01 96       	adiw	r24, 0x01	; 1
    60c4:	b8 01       	movw	r22, r16
    60c6:	68 0f       	add	r22, r24
    60c8:	79 1f       	adc	r23, r25
    60ca:	81 91       	ld	r24, Z+
    60cc:	8d 93       	st	X+, r24
    60ce:	e6 17       	cp	r30, r22
    60d0:	f7 07       	cpc	r31, r23
    60d2:	d9 f7       	brne	.-10     	; 0x60ca <twiTransmit+0x68>
    60d4:	88 ef       	ldi	r24, 0xF8	; 248
    60d6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    60da:	85 ea       	ldi	r24, 0xA5	; 165
    60dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60e0:	84 e0       	ldi	r24, 0x04	; 4
    60e2:	05 c0       	rjmp	.+10     	; 0x60ee <twiTransmit+0x8c>
    60e4:	86 e0       	ldi	r24, 0x06	; 6
    60e6:	03 c0       	rjmp	.+6      	; 0x60ee <twiTransmit+0x8c>
    60e8:	87 e0       	ldi	r24, 0x07	; 7
    60ea:	01 c0       	rjmp	.+2      	; 0x60ee <twiTransmit+0x8c>
    60ec:	82 e0       	ldi	r24, 0x02	; 2
    60ee:	df 91       	pop	r29
    60f0:	cf 91       	pop	r28
    60f2:	1f 91       	pop	r17
    60f4:	0f 91       	pop	r16
    60f6:	ff 90       	pop	r15
    60f8:	08 95       	ret

000060fa <twiReceive>:
    60fa:	1f 93       	push	r17
    60fc:	cf 93       	push	r28
    60fe:	df 93       	push	r29
    6100:	00 97       	sbiw	r24, 0x00	; 0
    6102:	29 f1       	breq	.+74     	; 0x614e <twiReceive+0x54>
    6104:	6b 30       	cpi	r22, 0x0B	; 11
    6106:	28 f5       	brcc	.+74     	; 0x6152 <twiReceive+0x58>
    6108:	16 2f       	mov	r17, r22
    610a:	ec 01       	movw	r28, r24
    610c:	a6 df       	rcall	.-180    	; 0x605a <twiIsBusy>
    610e:	81 11       	cpse	r24, r1
    6110:	22 c0       	rjmp	.+68     	; 0x6156 <twiReceive+0x5c>
    6112:	80 91 ec 15 	lds	r24, 0x15EC	; 0x8015ec <_twiCurrentHandler>
    6116:	90 91 ed 15 	lds	r25, 0x15ED	; 0x8015ed <_twiCurrentHandler+0x1>
    611a:	c8 17       	cp	r28, r24
    611c:	d9 07       	cpc	r29, r25
    611e:	41 f0       	breq	.+16     	; 0x6130 <twiReceive+0x36>
    6120:	3e df       	rcall	.-388    	; 0x5f9e <_initTwiInterface>
    6122:	89 81       	ldd	r24, Y+1	; 0x01
    6124:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    6128:	d0 93 ed 15 	sts	0x15ED, r29	; 0x8015ed <_twiCurrentHandler+0x1>
    612c:	c0 93 ec 15 	sts	0x15EC, r28	; 0x8015ec <_twiCurrentHandler>
    6130:	10 93 ee 15 	sts	0x15EE, r17	; 0x8015ee <_twiMessageLen>
    6134:	88 81       	ld	r24, Y
    6136:	88 0f       	add	r24, r24
    6138:	81 60       	ori	r24, 0x01	; 1
    613a:	80 93 ef 15 	sts	0x15EF, r24	; 0x8015ef <_twiMessageBuffer>
    613e:	88 ef       	ldi	r24, 0xF8	; 248
    6140:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6144:	85 ea       	ldi	r24, 0xA5	; 165
    6146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    614a:	85 e0       	ldi	r24, 0x05	; 5
    614c:	05 c0       	rjmp	.+10     	; 0x6158 <twiReceive+0x5e>
    614e:	86 e0       	ldi	r24, 0x06	; 6
    6150:	03 c0       	rjmp	.+6      	; 0x6158 <twiReceive+0x5e>
    6152:	87 e0       	ldi	r24, 0x07	; 7
    6154:	01 c0       	rjmp	.+2      	; 0x6158 <twiReceive+0x5e>
    6156:	82 e0       	ldi	r24, 0x02	; 2
    6158:	df 91       	pop	r29
    615a:	cf 91       	pop	r28
    615c:	1f 91       	pop	r17
    615e:	08 95       	ret

00006160 <__vector_39>:
    6160:	1f 92       	push	r1
    6162:	0f 92       	push	r0
    6164:	0f b6       	in	r0, 0x3f	; 63
    6166:	0f 92       	push	r0
    6168:	11 24       	eor	r1, r1
    616a:	0b b6       	in	r0, 0x3b	; 59
    616c:	0f 92       	push	r0
    616e:	2f 93       	push	r18
    6170:	3f 93       	push	r19
    6172:	4f 93       	push	r20
    6174:	5f 93       	push	r21
    6176:	6f 93       	push	r22
    6178:	7f 93       	push	r23
    617a:	8f 93       	push	r24
    617c:	9f 93       	push	r25
    617e:	af 93       	push	r26
    6180:	bf 93       	push	r27
    6182:	ef 93       	push	r30
    6184:	ff 93       	push	r31
    6186:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    618a:	8e 2f       	mov	r24, r30
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	fc 01       	movw	r30, r24
    6190:	38 97       	sbiw	r30, 0x08	; 8
    6192:	e1 35       	cpi	r30, 0x51	; 81
    6194:	f1 05       	cpc	r31, r1
    6196:	08 f0       	brcs	.+2      	; 0x619a <__vector_39+0x3a>
    6198:	75 c0       	rjmp	.+234    	; 0x6284 <__vector_39+0x124>
    619a:	88 27       	eor	r24, r24
    619c:	e4 58       	subi	r30, 0x84	; 132
    619e:	ff 4f       	sbci	r31, 0xFF	; 255
    61a0:	8f 4f       	sbci	r24, 0xFF	; 255
    61a2:	38 c5       	rjmp	.+2672   	; 0x6c14 <__tablejump2__>
    61a4:	10 92 eb 15 	sts	0x15EB, r1	; 0x8015eb <_index.1885>
    61a8:	e0 91 eb 15 	lds	r30, 0x15EB	; 0x8015eb <_index.1885>
    61ac:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <_twiMessageLen>
    61b0:	e8 17       	cp	r30, r24
    61b2:	70 f4       	brcc	.+28     	; 0x61d0 <__vector_39+0x70>
    61b4:	81 e0       	ldi	r24, 0x01	; 1
    61b6:	8e 0f       	add	r24, r30
    61b8:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <_index.1885>
    61bc:	f0 e0       	ldi	r31, 0x00	; 0
    61be:	e1 51       	subi	r30, 0x11	; 17
    61c0:	fa 4e       	sbci	r31, 0xEA	; 234
    61c2:	80 81       	ld	r24, Z
    61c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    61c8:	85 e8       	ldi	r24, 0x85	; 133
    61ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61ce:	72 c0       	rjmp	.+228    	; 0x62b4 <__vector_39+0x154>
    61d0:	84 e9       	ldi	r24, 0x94	; 148
    61d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61d6:	80 91 ec 15 	lds	r24, 0x15EC	; 0x8015ec <_twiCurrentHandler>
    61da:	90 91 ed 15 	lds	r25, 0x15ED	; 0x8015ed <_twiCurrentHandler+0x1>
    61de:	dc 01       	movw	r26, r24
    61e0:	12 96       	adiw	r26, 0x02	; 2
    61e2:	ed 91       	ld	r30, X+
    61e4:	fc 91       	ld	r31, X
    61e6:	13 97       	sbiw	r26, 0x03	; 3
    61e8:	30 97       	sbiw	r30, 0x00	; 0
    61ea:	09 f4       	brne	.+2      	; 0x61ee <__vector_39+0x8e>
    61ec:	63 c0       	rjmp	.+198    	; 0x62b4 <__vector_39+0x154>
    61ee:	20 e0       	ldi	r18, 0x00	; 0
    61f0:	40 e0       	ldi	r20, 0x00	; 0
    61f2:	50 e0       	ldi	r21, 0x00	; 0
    61f4:	64 e0       	ldi	r22, 0x04	; 4
    61f6:	19 95       	eicall
    61f8:	5d c0       	rjmp	.+186    	; 0x62b4 <__vector_39+0x154>
    61fa:	e0 91 eb 15 	lds	r30, 0x15EB	; 0x8015eb <_index.1885>
    61fe:	81 e0       	ldi	r24, 0x01	; 1
    6200:	8e 0f       	add	r24, r30
    6202:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <_index.1885>
    6206:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    620a:	f0 e0       	ldi	r31, 0x00	; 0
    620c:	e1 51       	subi	r30, 0x11	; 17
    620e:	fa 4e       	sbci	r31, 0xEA	; 234
    6210:	80 83       	st	Z, r24
    6212:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6216:	80 34       	cpi	r24, 0x40	; 64
    6218:	11 f4       	brne	.+4      	; 0x621e <__vector_39+0xbe>
    621a:	10 92 eb 15 	sts	0x15EB, r1	; 0x8015eb <_index.1885>
    621e:	20 91 eb 15 	lds	r18, 0x15EB	; 0x8015eb <_index.1885>
    6222:	30 e0       	ldi	r19, 0x00	; 0
    6224:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <_twiMessageLen>
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	01 97       	sbiw	r24, 0x01	; 1
    622c:	28 17       	cp	r18, r24
    622e:	39 07       	cpc	r19, r25
    6230:	24 f4       	brge	.+8      	; 0x623a <__vector_39+0xda>
    6232:	85 ec       	ldi	r24, 0xC5	; 197
    6234:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6238:	3d c0       	rjmp	.+122    	; 0x62b4 <__vector_39+0x154>
    623a:	85 e8       	ldi	r24, 0x85	; 133
    623c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6240:	39 c0       	rjmp	.+114    	; 0x62b4 <__vector_39+0x154>
    6242:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6246:	e0 91 eb 15 	lds	r30, 0x15EB	; 0x8015eb <_index.1885>
    624a:	f0 e0       	ldi	r31, 0x00	; 0
    624c:	e1 51       	subi	r30, 0x11	; 17
    624e:	fa 4e       	sbci	r31, 0xEA	; 234
    6250:	80 83       	st	Z, r24
    6252:	84 e9       	ldi	r24, 0x94	; 148
    6254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6258:	80 91 ec 15 	lds	r24, 0x15EC	; 0x8015ec <_twiCurrentHandler>
    625c:	90 91 ed 15 	lds	r25, 0x15ED	; 0x8015ed <_twiCurrentHandler+0x1>
    6260:	dc 01       	movw	r26, r24
    6262:	12 96       	adiw	r26, 0x02	; 2
    6264:	ed 91       	ld	r30, X+
    6266:	fc 91       	ld	r31, X
    6268:	13 97       	sbiw	r26, 0x03	; 3
    626a:	30 97       	sbiw	r30, 0x00	; 0
    626c:	19 f1       	breq	.+70     	; 0x62b4 <__vector_39+0x154>
    626e:	20 91 ee 15 	lds	r18, 0x15EE	; 0x8015ee <_twiMessageLen>
    6272:	4f ee       	ldi	r20, 0xEF	; 239
    6274:	55 e1       	ldi	r21, 0x15	; 21
    6276:	65 e0       	ldi	r22, 0x05	; 5
    6278:	19 95       	eicall
    627a:	1c c0       	rjmp	.+56     	; 0x62b4 <__vector_39+0x154>
    627c:	85 ea       	ldi	r24, 0xA5	; 165
    627e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6282:	18 c0       	rjmp	.+48     	; 0x62b4 <__vector_39+0x154>
    6284:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6288:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    628c:	84 e0       	ldi	r24, 0x04	; 4
    628e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6292:	80 91 ec 15 	lds	r24, 0x15EC	; 0x8015ec <_twiCurrentHandler>
    6296:	90 91 ed 15 	lds	r25, 0x15ED	; 0x8015ed <_twiCurrentHandler+0x1>
    629a:	dc 01       	movw	r26, r24
    629c:	12 96       	adiw	r26, 0x02	; 2
    629e:	ed 91       	ld	r30, X+
    62a0:	fc 91       	ld	r31, X
    62a2:	13 97       	sbiw	r26, 0x03	; 3
    62a4:	30 97       	sbiw	r30, 0x00	; 0
    62a6:	31 f0       	breq	.+12     	; 0x62b4 <__vector_39+0x154>
    62a8:	20 e0       	ldi	r18, 0x00	; 0
    62aa:	40 e0       	ldi	r20, 0x00	; 0
    62ac:	50 e0       	ldi	r21, 0x00	; 0
    62ae:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    62b2:	19 95       	eicall
    62b4:	ff 91       	pop	r31
    62b6:	ef 91       	pop	r30
    62b8:	bf 91       	pop	r27
    62ba:	af 91       	pop	r26
    62bc:	9f 91       	pop	r25
    62be:	8f 91       	pop	r24
    62c0:	7f 91       	pop	r23
    62c2:	6f 91       	pop	r22
    62c4:	5f 91       	pop	r21
    62c6:	4f 91       	pop	r20
    62c8:	3f 91       	pop	r19
    62ca:	2f 91       	pop	r18
    62cc:	0f 90       	pop	r0
    62ce:	0b be       	out	0x3b, r0	; 59
    62d0:	0f 90       	pop	r0
    62d2:	0f be       	out	0x3f, r0	; 63
    62d4:	0f 90       	pop	r0
    62d6:	1f 90       	pop	r1
    62d8:	18 95       	reti

000062da <fifo_init>:
    62da:	fc 01       	movw	r30, r24
    62dc:	41 11       	cpse	r20, r1
    62de:	01 c0       	rjmp	.+2      	; 0x62e2 <fifo_init+0x8>
    62e0:	eb d5       	rcall	.+3030   	; 0x6eb8 <abort>
    62e2:	84 2f       	mov	r24, r20
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	9c 01       	movw	r18, r24
    62e8:	21 50       	subi	r18, 0x01	; 1
    62ea:	31 09       	sbc	r19, r1
    62ec:	82 23       	and	r24, r18
    62ee:	93 23       	and	r25, r19
    62f0:	89 2b       	or	r24, r25
    62f2:	09 f0       	breq	.+2      	; 0x62f6 <fifo_init+0x1c>
    62f4:	e1 d5       	rcall	.+3010   	; 0x6eb8 <abort>
    62f6:	41 38       	cpi	r20, 0x81	; 129
    62f8:	08 f0       	brcs	.+2      	; 0x62fc <fifo_init+0x22>
    62fa:	de d5       	rcall	.+3004   	; 0x6eb8 <abort>
    62fc:	12 82       	std	Z+2, r1	; 0x02
    62fe:	13 82       	std	Z+3, r1	; 0x03
    6300:	44 83       	std	Z+4, r20	; 0x04
    6302:	44 0f       	add	r20, r20
    6304:	41 50       	subi	r20, 0x01	; 1
    6306:	45 83       	std	Z+5, r20	; 0x05
    6308:	71 83       	std	Z+1, r23	; 0x01
    630a:	60 83       	st	Z, r22
    630c:	80 e0       	ldi	r24, 0x00	; 0
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	08 95       	ret

00006312 <vfprintf>:
    6312:	2f 92       	push	r2
    6314:	3f 92       	push	r3
    6316:	4f 92       	push	r4
    6318:	5f 92       	push	r5
    631a:	6f 92       	push	r6
    631c:	7f 92       	push	r7
    631e:	8f 92       	push	r8
    6320:	9f 92       	push	r9
    6322:	af 92       	push	r10
    6324:	bf 92       	push	r11
    6326:	cf 92       	push	r12
    6328:	df 92       	push	r13
    632a:	ef 92       	push	r14
    632c:	ff 92       	push	r15
    632e:	0f 93       	push	r16
    6330:	1f 93       	push	r17
    6332:	cf 93       	push	r28
    6334:	df 93       	push	r29
    6336:	cd b7       	in	r28, 0x3d	; 61
    6338:	de b7       	in	r29, 0x3e	; 62
    633a:	60 97       	sbiw	r28, 0x10	; 16
    633c:	0f b6       	in	r0, 0x3f	; 63
    633e:	f8 94       	cli
    6340:	de bf       	out	0x3e, r29	; 62
    6342:	0f be       	out	0x3f, r0	; 63
    6344:	cd bf       	out	0x3d, r28	; 61
    6346:	7c 01       	movw	r14, r24
    6348:	1b 01       	movw	r2, r22
    634a:	6a 01       	movw	r12, r20
    634c:	fc 01       	movw	r30, r24
    634e:	17 82       	std	Z+7, r1	; 0x07
    6350:	16 82       	std	Z+6, r1	; 0x06
    6352:	83 81       	ldd	r24, Z+3	; 0x03
    6354:	81 ff       	sbrs	r24, 1
    6356:	2a c3       	rjmp	.+1620   	; 0x69ac <vfprintf+0x69a>
    6358:	9e 01       	movw	r18, r28
    635a:	2f 5f       	subi	r18, 0xFF	; 255
    635c:	3f 4f       	sbci	r19, 0xFF	; 255
    635e:	39 01       	movw	r6, r18
    6360:	f7 01       	movw	r30, r14
    6362:	93 81       	ldd	r25, Z+3	; 0x03
    6364:	f1 01       	movw	r30, r2
    6366:	93 fd       	sbrc	r25, 3
    6368:	85 91       	lpm	r24, Z+
    636a:	93 ff       	sbrs	r25, 3
    636c:	81 91       	ld	r24, Z+
    636e:	1f 01       	movw	r2, r30
    6370:	88 23       	and	r24, r24
    6372:	09 f4       	brne	.+2      	; 0x6376 <vfprintf+0x64>
    6374:	17 c3       	rjmp	.+1582   	; 0x69a4 <vfprintf+0x692>
    6376:	85 32       	cpi	r24, 0x25	; 37
    6378:	39 f4       	brne	.+14     	; 0x6388 <vfprintf+0x76>
    637a:	93 fd       	sbrc	r25, 3
    637c:	85 91       	lpm	r24, Z+
    637e:	93 ff       	sbrs	r25, 3
    6380:	81 91       	ld	r24, Z+
    6382:	1f 01       	movw	r2, r30
    6384:	85 32       	cpi	r24, 0x25	; 37
    6386:	31 f4       	brne	.+12     	; 0x6394 <vfprintf+0x82>
    6388:	b7 01       	movw	r22, r14
    638a:	90 e0       	ldi	r25, 0x00	; 0
    638c:	e6 d6       	rcall	.+3532   	; 0x715a <fputc>
    638e:	56 01       	movw	r10, r12
    6390:	65 01       	movw	r12, r10
    6392:	e6 cf       	rjmp	.-52     	; 0x6360 <vfprintf+0x4e>
    6394:	10 e0       	ldi	r17, 0x00	; 0
    6396:	51 2c       	mov	r5, r1
    6398:	91 2c       	mov	r9, r1
    639a:	ff e1       	ldi	r31, 0x1F	; 31
    639c:	f9 15       	cp	r31, r9
    639e:	d8 f0       	brcs	.+54     	; 0x63d6 <vfprintf+0xc4>
    63a0:	8b 32       	cpi	r24, 0x2B	; 43
    63a2:	79 f0       	breq	.+30     	; 0x63c2 <vfprintf+0xb0>
    63a4:	38 f4       	brcc	.+14     	; 0x63b4 <vfprintf+0xa2>
    63a6:	80 32       	cpi	r24, 0x20	; 32
    63a8:	79 f0       	breq	.+30     	; 0x63c8 <vfprintf+0xb6>
    63aa:	83 32       	cpi	r24, 0x23	; 35
    63ac:	a1 f4       	brne	.+40     	; 0x63d6 <vfprintf+0xc4>
    63ae:	f9 2d       	mov	r31, r9
    63b0:	f0 61       	ori	r31, 0x10	; 16
    63b2:	2e c0       	rjmp	.+92     	; 0x6410 <vfprintf+0xfe>
    63b4:	8d 32       	cpi	r24, 0x2D	; 45
    63b6:	61 f0       	breq	.+24     	; 0x63d0 <vfprintf+0xbe>
    63b8:	80 33       	cpi	r24, 0x30	; 48
    63ba:	69 f4       	brne	.+26     	; 0x63d6 <vfprintf+0xc4>
    63bc:	29 2d       	mov	r18, r9
    63be:	21 60       	ori	r18, 0x01	; 1
    63c0:	2d c0       	rjmp	.+90     	; 0x641c <vfprintf+0x10a>
    63c2:	39 2d       	mov	r19, r9
    63c4:	32 60       	ori	r19, 0x02	; 2
    63c6:	93 2e       	mov	r9, r19
    63c8:	89 2d       	mov	r24, r9
    63ca:	84 60       	ori	r24, 0x04	; 4
    63cc:	98 2e       	mov	r9, r24
    63ce:	2a c0       	rjmp	.+84     	; 0x6424 <vfprintf+0x112>
    63d0:	e9 2d       	mov	r30, r9
    63d2:	e8 60       	ori	r30, 0x08	; 8
    63d4:	15 c0       	rjmp	.+42     	; 0x6400 <vfprintf+0xee>
    63d6:	97 fc       	sbrc	r9, 7
    63d8:	2d c0       	rjmp	.+90     	; 0x6434 <vfprintf+0x122>
    63da:	20 ed       	ldi	r18, 0xD0	; 208
    63dc:	28 0f       	add	r18, r24
    63de:	2a 30       	cpi	r18, 0x0A	; 10
    63e0:	88 f4       	brcc	.+34     	; 0x6404 <vfprintf+0xf2>
    63e2:	96 fe       	sbrs	r9, 6
    63e4:	06 c0       	rjmp	.+12     	; 0x63f2 <vfprintf+0xe0>
    63e6:	3a e0       	ldi	r19, 0x0A	; 10
    63e8:	13 9f       	mul	r17, r19
    63ea:	20 0d       	add	r18, r0
    63ec:	11 24       	eor	r1, r1
    63ee:	12 2f       	mov	r17, r18
    63f0:	19 c0       	rjmp	.+50     	; 0x6424 <vfprintf+0x112>
    63f2:	8a e0       	ldi	r24, 0x0A	; 10
    63f4:	58 9e       	mul	r5, r24
    63f6:	20 0d       	add	r18, r0
    63f8:	11 24       	eor	r1, r1
    63fa:	52 2e       	mov	r5, r18
    63fc:	e9 2d       	mov	r30, r9
    63fe:	e0 62       	ori	r30, 0x20	; 32
    6400:	9e 2e       	mov	r9, r30
    6402:	10 c0       	rjmp	.+32     	; 0x6424 <vfprintf+0x112>
    6404:	8e 32       	cpi	r24, 0x2E	; 46
    6406:	31 f4       	brne	.+12     	; 0x6414 <vfprintf+0x102>
    6408:	96 fc       	sbrc	r9, 6
    640a:	cc c2       	rjmp	.+1432   	; 0x69a4 <vfprintf+0x692>
    640c:	f9 2d       	mov	r31, r9
    640e:	f0 64       	ori	r31, 0x40	; 64
    6410:	9f 2e       	mov	r9, r31
    6412:	08 c0       	rjmp	.+16     	; 0x6424 <vfprintf+0x112>
    6414:	8c 36       	cpi	r24, 0x6C	; 108
    6416:	21 f4       	brne	.+8      	; 0x6420 <vfprintf+0x10e>
    6418:	29 2d       	mov	r18, r9
    641a:	20 68       	ori	r18, 0x80	; 128
    641c:	92 2e       	mov	r9, r18
    641e:	02 c0       	rjmp	.+4      	; 0x6424 <vfprintf+0x112>
    6420:	88 36       	cpi	r24, 0x68	; 104
    6422:	41 f4       	brne	.+16     	; 0x6434 <vfprintf+0x122>
    6424:	f1 01       	movw	r30, r2
    6426:	93 fd       	sbrc	r25, 3
    6428:	85 91       	lpm	r24, Z+
    642a:	93 ff       	sbrs	r25, 3
    642c:	81 91       	ld	r24, Z+
    642e:	1f 01       	movw	r2, r30
    6430:	81 11       	cpse	r24, r1
    6432:	b3 cf       	rjmp	.-154    	; 0x639a <vfprintf+0x88>
    6434:	9b eb       	ldi	r25, 0xBB	; 187
    6436:	98 0f       	add	r25, r24
    6438:	93 30       	cpi	r25, 0x03	; 3
    643a:	20 f4       	brcc	.+8      	; 0x6444 <vfprintf+0x132>
    643c:	99 2d       	mov	r25, r9
    643e:	90 61       	ori	r25, 0x10	; 16
    6440:	80 5e       	subi	r24, 0xE0	; 224
    6442:	07 c0       	rjmp	.+14     	; 0x6452 <vfprintf+0x140>
    6444:	9b e9       	ldi	r25, 0x9B	; 155
    6446:	98 0f       	add	r25, r24
    6448:	93 30       	cpi	r25, 0x03	; 3
    644a:	08 f0       	brcs	.+2      	; 0x644e <vfprintf+0x13c>
    644c:	59 c1       	rjmp	.+690    	; 0x6700 <vfprintf+0x3ee>
    644e:	99 2d       	mov	r25, r9
    6450:	9f 7e       	andi	r25, 0xEF	; 239
    6452:	96 ff       	sbrs	r25, 6
    6454:	16 e0       	ldi	r17, 0x06	; 6
    6456:	9f 73       	andi	r25, 0x3F	; 63
    6458:	99 2e       	mov	r9, r25
    645a:	85 36       	cpi	r24, 0x65	; 101
    645c:	19 f4       	brne	.+6      	; 0x6464 <vfprintf+0x152>
    645e:	90 64       	ori	r25, 0x40	; 64
    6460:	99 2e       	mov	r9, r25
    6462:	08 c0       	rjmp	.+16     	; 0x6474 <vfprintf+0x162>
    6464:	86 36       	cpi	r24, 0x66	; 102
    6466:	21 f4       	brne	.+8      	; 0x6470 <vfprintf+0x15e>
    6468:	39 2f       	mov	r19, r25
    646a:	30 68       	ori	r19, 0x80	; 128
    646c:	93 2e       	mov	r9, r19
    646e:	02 c0       	rjmp	.+4      	; 0x6474 <vfprintf+0x162>
    6470:	11 11       	cpse	r17, r1
    6472:	11 50       	subi	r17, 0x01	; 1
    6474:	97 fe       	sbrs	r9, 7
    6476:	07 c0       	rjmp	.+14     	; 0x6486 <vfprintf+0x174>
    6478:	1c 33       	cpi	r17, 0x3C	; 60
    647a:	50 f4       	brcc	.+20     	; 0x6490 <vfprintf+0x17e>
    647c:	44 24       	eor	r4, r4
    647e:	43 94       	inc	r4
    6480:	41 0e       	add	r4, r17
    6482:	27 e0       	ldi	r18, 0x07	; 7
    6484:	0b c0       	rjmp	.+22     	; 0x649c <vfprintf+0x18a>
    6486:	18 30       	cpi	r17, 0x08	; 8
    6488:	38 f0       	brcs	.+14     	; 0x6498 <vfprintf+0x186>
    648a:	27 e0       	ldi	r18, 0x07	; 7
    648c:	17 e0       	ldi	r17, 0x07	; 7
    648e:	05 c0       	rjmp	.+10     	; 0x649a <vfprintf+0x188>
    6490:	27 e0       	ldi	r18, 0x07	; 7
    6492:	9c e3       	ldi	r25, 0x3C	; 60
    6494:	49 2e       	mov	r4, r25
    6496:	02 c0       	rjmp	.+4      	; 0x649c <vfprintf+0x18a>
    6498:	21 2f       	mov	r18, r17
    649a:	41 2c       	mov	r4, r1
    649c:	56 01       	movw	r10, r12
    649e:	84 e0       	ldi	r24, 0x04	; 4
    64a0:	a8 0e       	add	r10, r24
    64a2:	b1 1c       	adc	r11, r1
    64a4:	f6 01       	movw	r30, r12
    64a6:	60 81       	ld	r22, Z
    64a8:	71 81       	ldd	r23, Z+1	; 0x01
    64aa:	82 81       	ldd	r24, Z+2	; 0x02
    64ac:	93 81       	ldd	r25, Z+3	; 0x03
    64ae:	04 2d       	mov	r16, r4
    64b0:	a3 01       	movw	r20, r6
    64b2:	06 d5       	rcall	.+2572   	; 0x6ec0 <__ftoa_engine>
    64b4:	6c 01       	movw	r12, r24
    64b6:	f9 81       	ldd	r31, Y+1	; 0x01
    64b8:	fc 87       	std	Y+12, r31	; 0x0c
    64ba:	f0 ff       	sbrs	r31, 0
    64bc:	02 c0       	rjmp	.+4      	; 0x64c2 <vfprintf+0x1b0>
    64be:	f3 ff       	sbrs	r31, 3
    64c0:	06 c0       	rjmp	.+12     	; 0x64ce <vfprintf+0x1bc>
    64c2:	91 fc       	sbrc	r9, 1
    64c4:	06 c0       	rjmp	.+12     	; 0x64d2 <vfprintf+0x1c0>
    64c6:	92 fe       	sbrs	r9, 2
    64c8:	06 c0       	rjmp	.+12     	; 0x64d6 <vfprintf+0x1c4>
    64ca:	00 e2       	ldi	r16, 0x20	; 32
    64cc:	05 c0       	rjmp	.+10     	; 0x64d8 <vfprintf+0x1c6>
    64ce:	0d e2       	ldi	r16, 0x2D	; 45
    64d0:	03 c0       	rjmp	.+6      	; 0x64d8 <vfprintf+0x1c6>
    64d2:	0b e2       	ldi	r16, 0x2B	; 43
    64d4:	01 c0       	rjmp	.+2      	; 0x64d8 <vfprintf+0x1c6>
    64d6:	00 e0       	ldi	r16, 0x00	; 0
    64d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    64da:	8c 70       	andi	r24, 0x0C	; 12
    64dc:	19 f0       	breq	.+6      	; 0x64e4 <vfprintf+0x1d2>
    64de:	01 11       	cpse	r16, r1
    64e0:	43 c2       	rjmp	.+1158   	; 0x6968 <vfprintf+0x656>
    64e2:	80 c2       	rjmp	.+1280   	; 0x69e4 <vfprintf+0x6d2>
    64e4:	97 fe       	sbrs	r9, 7
    64e6:	10 c0       	rjmp	.+32     	; 0x6508 <vfprintf+0x1f6>
    64e8:	4c 0c       	add	r4, r12
    64ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    64ec:	f4 ff       	sbrs	r31, 4
    64ee:	04 c0       	rjmp	.+8      	; 0x64f8 <vfprintf+0x1e6>
    64f0:	8a 81       	ldd	r24, Y+2	; 0x02
    64f2:	81 33       	cpi	r24, 0x31	; 49
    64f4:	09 f4       	brne	.+2      	; 0x64f8 <vfprintf+0x1e6>
    64f6:	4a 94       	dec	r4
    64f8:	14 14       	cp	r1, r4
    64fa:	74 f5       	brge	.+92     	; 0x6558 <vfprintf+0x246>
    64fc:	28 e0       	ldi	r18, 0x08	; 8
    64fe:	24 15       	cp	r18, r4
    6500:	78 f5       	brcc	.+94     	; 0x6560 <vfprintf+0x24e>
    6502:	88 e0       	ldi	r24, 0x08	; 8
    6504:	48 2e       	mov	r4, r24
    6506:	2c c0       	rjmp	.+88     	; 0x6560 <vfprintf+0x24e>
    6508:	96 fc       	sbrc	r9, 6
    650a:	2a c0       	rjmp	.+84     	; 0x6560 <vfprintf+0x24e>
    650c:	81 2f       	mov	r24, r17
    650e:	90 e0       	ldi	r25, 0x00	; 0
    6510:	8c 15       	cp	r24, r12
    6512:	9d 05       	cpc	r25, r13
    6514:	9c f0       	brlt	.+38     	; 0x653c <vfprintf+0x22a>
    6516:	3c ef       	ldi	r19, 0xFC	; 252
    6518:	c3 16       	cp	r12, r19
    651a:	3f ef       	ldi	r19, 0xFF	; 255
    651c:	d3 06       	cpc	r13, r19
    651e:	74 f0       	brlt	.+28     	; 0x653c <vfprintf+0x22a>
    6520:	89 2d       	mov	r24, r9
    6522:	80 68       	ori	r24, 0x80	; 128
    6524:	98 2e       	mov	r9, r24
    6526:	0a c0       	rjmp	.+20     	; 0x653c <vfprintf+0x22a>
    6528:	e2 e0       	ldi	r30, 0x02	; 2
    652a:	f0 e0       	ldi	r31, 0x00	; 0
    652c:	ec 0f       	add	r30, r28
    652e:	fd 1f       	adc	r31, r29
    6530:	e1 0f       	add	r30, r17
    6532:	f1 1d       	adc	r31, r1
    6534:	80 81       	ld	r24, Z
    6536:	80 33       	cpi	r24, 0x30	; 48
    6538:	19 f4       	brne	.+6      	; 0x6540 <vfprintf+0x22e>
    653a:	11 50       	subi	r17, 0x01	; 1
    653c:	11 11       	cpse	r17, r1
    653e:	f4 cf       	rjmp	.-24     	; 0x6528 <vfprintf+0x216>
    6540:	97 fe       	sbrs	r9, 7
    6542:	0e c0       	rjmp	.+28     	; 0x6560 <vfprintf+0x24e>
    6544:	44 24       	eor	r4, r4
    6546:	43 94       	inc	r4
    6548:	41 0e       	add	r4, r17
    654a:	81 2f       	mov	r24, r17
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	c8 16       	cp	r12, r24
    6550:	d9 06       	cpc	r13, r25
    6552:	2c f4       	brge	.+10     	; 0x655e <vfprintf+0x24c>
    6554:	1c 19       	sub	r17, r12
    6556:	04 c0       	rjmp	.+8      	; 0x6560 <vfprintf+0x24e>
    6558:	44 24       	eor	r4, r4
    655a:	43 94       	inc	r4
    655c:	01 c0       	rjmp	.+2      	; 0x6560 <vfprintf+0x24e>
    655e:	10 e0       	ldi	r17, 0x00	; 0
    6560:	97 fe       	sbrs	r9, 7
    6562:	06 c0       	rjmp	.+12     	; 0x6570 <vfprintf+0x25e>
    6564:	1c 14       	cp	r1, r12
    6566:	1d 04       	cpc	r1, r13
    6568:	34 f4       	brge	.+12     	; 0x6576 <vfprintf+0x264>
    656a:	c6 01       	movw	r24, r12
    656c:	01 96       	adiw	r24, 0x01	; 1
    656e:	05 c0       	rjmp	.+10     	; 0x657a <vfprintf+0x268>
    6570:	85 e0       	ldi	r24, 0x05	; 5
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	02 c0       	rjmp	.+4      	; 0x657a <vfprintf+0x268>
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	01 11       	cpse	r16, r1
    657c:	01 96       	adiw	r24, 0x01	; 1
    657e:	11 23       	and	r17, r17
    6580:	31 f0       	breq	.+12     	; 0x658e <vfprintf+0x27c>
    6582:	21 2f       	mov	r18, r17
    6584:	30 e0       	ldi	r19, 0x00	; 0
    6586:	2f 5f       	subi	r18, 0xFF	; 255
    6588:	3f 4f       	sbci	r19, 0xFF	; 255
    658a:	82 0f       	add	r24, r18
    658c:	93 1f       	adc	r25, r19
    658e:	25 2d       	mov	r18, r5
    6590:	30 e0       	ldi	r19, 0x00	; 0
    6592:	82 17       	cp	r24, r18
    6594:	93 07       	cpc	r25, r19
    6596:	14 f4       	brge	.+4      	; 0x659c <vfprintf+0x28a>
    6598:	58 1a       	sub	r5, r24
    659a:	01 c0       	rjmp	.+2      	; 0x659e <vfprintf+0x28c>
    659c:	51 2c       	mov	r5, r1
    659e:	89 2d       	mov	r24, r9
    65a0:	89 70       	andi	r24, 0x09	; 9
    65a2:	41 f4       	brne	.+16     	; 0x65b4 <vfprintf+0x2a2>
    65a4:	55 20       	and	r5, r5
    65a6:	31 f0       	breq	.+12     	; 0x65b4 <vfprintf+0x2a2>
    65a8:	b7 01       	movw	r22, r14
    65aa:	80 e2       	ldi	r24, 0x20	; 32
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	d5 d5       	rcall	.+2986   	; 0x715a <fputc>
    65b0:	5a 94       	dec	r5
    65b2:	f8 cf       	rjmp	.-16     	; 0x65a4 <vfprintf+0x292>
    65b4:	00 23       	and	r16, r16
    65b6:	21 f0       	breq	.+8      	; 0x65c0 <vfprintf+0x2ae>
    65b8:	b7 01       	movw	r22, r14
    65ba:	80 2f       	mov	r24, r16
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	cd d5       	rcall	.+2970   	; 0x715a <fputc>
    65c0:	93 fc       	sbrc	r9, 3
    65c2:	08 c0       	rjmp	.+16     	; 0x65d4 <vfprintf+0x2c2>
    65c4:	55 20       	and	r5, r5
    65c6:	31 f0       	breq	.+12     	; 0x65d4 <vfprintf+0x2c2>
    65c8:	b7 01       	movw	r22, r14
    65ca:	80 e3       	ldi	r24, 0x30	; 48
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	c5 d5       	rcall	.+2954   	; 0x715a <fputc>
    65d0:	5a 94       	dec	r5
    65d2:	f8 cf       	rjmp	.-16     	; 0x65c4 <vfprintf+0x2b2>
    65d4:	97 fe       	sbrs	r9, 7
    65d6:	4a c0       	rjmp	.+148    	; 0x666c <vfprintf+0x35a>
    65d8:	46 01       	movw	r8, r12
    65da:	d7 fe       	sbrs	r13, 7
    65dc:	02 c0       	rjmp	.+4      	; 0x65e2 <vfprintf+0x2d0>
    65de:	81 2c       	mov	r8, r1
    65e0:	91 2c       	mov	r9, r1
    65e2:	c6 01       	movw	r24, r12
    65e4:	88 19       	sub	r24, r8
    65e6:	99 09       	sbc	r25, r9
    65e8:	f3 01       	movw	r30, r6
    65ea:	e8 0f       	add	r30, r24
    65ec:	f9 1f       	adc	r31, r25
    65ee:	fe 87       	std	Y+14, r31	; 0x0e
    65f0:	ed 87       	std	Y+13, r30	; 0x0d
    65f2:	96 01       	movw	r18, r12
    65f4:	24 19       	sub	r18, r4
    65f6:	31 09       	sbc	r19, r1
    65f8:	38 8b       	std	Y+16, r19	; 0x10
    65fa:	2f 87       	std	Y+15, r18	; 0x0f
    65fc:	01 2f       	mov	r16, r17
    65fe:	10 e0       	ldi	r17, 0x00	; 0
    6600:	11 95       	neg	r17
    6602:	01 95       	neg	r16
    6604:	11 09       	sbc	r17, r1
    6606:	3f ef       	ldi	r19, 0xFF	; 255
    6608:	83 16       	cp	r8, r19
    660a:	93 06       	cpc	r9, r19
    660c:	21 f4       	brne	.+8      	; 0x6616 <vfprintf+0x304>
    660e:	b7 01       	movw	r22, r14
    6610:	8e e2       	ldi	r24, 0x2E	; 46
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	a2 d5       	rcall	.+2884   	; 0x715a <fputc>
    6616:	c8 14       	cp	r12, r8
    6618:	d9 04       	cpc	r13, r9
    661a:	4c f0       	brlt	.+18     	; 0x662e <vfprintf+0x31c>
    661c:	8f 85       	ldd	r24, Y+15	; 0x0f
    661e:	98 89       	ldd	r25, Y+16	; 0x10
    6620:	88 15       	cp	r24, r8
    6622:	99 05       	cpc	r25, r9
    6624:	24 f4       	brge	.+8      	; 0x662e <vfprintf+0x31c>
    6626:	ed 85       	ldd	r30, Y+13	; 0x0d
    6628:	fe 85       	ldd	r31, Y+14	; 0x0e
    662a:	81 81       	ldd	r24, Z+1	; 0x01
    662c:	01 c0       	rjmp	.+2      	; 0x6630 <vfprintf+0x31e>
    662e:	80 e3       	ldi	r24, 0x30	; 48
    6630:	f1 e0       	ldi	r31, 0x01	; 1
    6632:	8f 1a       	sub	r8, r31
    6634:	91 08       	sbc	r9, r1
    6636:	2d 85       	ldd	r18, Y+13	; 0x0d
    6638:	3e 85       	ldd	r19, Y+14	; 0x0e
    663a:	2f 5f       	subi	r18, 0xFF	; 255
    663c:	3f 4f       	sbci	r19, 0xFF	; 255
    663e:	3e 87       	std	Y+14, r19	; 0x0e
    6640:	2d 87       	std	Y+13, r18	; 0x0d
    6642:	80 16       	cp	r8, r16
    6644:	91 06       	cpc	r9, r17
    6646:	24 f0       	brlt	.+8      	; 0x6650 <vfprintf+0x33e>
    6648:	b7 01       	movw	r22, r14
    664a:	90 e0       	ldi	r25, 0x00	; 0
    664c:	86 d5       	rcall	.+2828   	; 0x715a <fputc>
    664e:	db cf       	rjmp	.-74     	; 0x6606 <vfprintf+0x2f4>
    6650:	c8 14       	cp	r12, r8
    6652:	d9 04       	cpc	r13, r9
    6654:	41 f4       	brne	.+16     	; 0x6666 <vfprintf+0x354>
    6656:	9a 81       	ldd	r25, Y+2	; 0x02
    6658:	96 33       	cpi	r25, 0x36	; 54
    665a:	20 f4       	brcc	.+8      	; 0x6664 <vfprintf+0x352>
    665c:	95 33       	cpi	r25, 0x35	; 53
    665e:	19 f4       	brne	.+6      	; 0x6666 <vfprintf+0x354>
    6660:	3c 85       	ldd	r19, Y+12	; 0x0c
    6662:	34 ff       	sbrs	r19, 4
    6664:	81 e3       	ldi	r24, 0x31	; 49
    6666:	b7 01       	movw	r22, r14
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	48 c0       	rjmp	.+144    	; 0x66fc <vfprintf+0x3ea>
    666c:	8a 81       	ldd	r24, Y+2	; 0x02
    666e:	81 33       	cpi	r24, 0x31	; 49
    6670:	19 f0       	breq	.+6      	; 0x6678 <vfprintf+0x366>
    6672:	9c 85       	ldd	r25, Y+12	; 0x0c
    6674:	9f 7e       	andi	r25, 0xEF	; 239
    6676:	9c 87       	std	Y+12, r25	; 0x0c
    6678:	b7 01       	movw	r22, r14
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	6e d5       	rcall	.+2780   	; 0x715a <fputc>
    667e:	11 11       	cpse	r17, r1
    6680:	05 c0       	rjmp	.+10     	; 0x668c <vfprintf+0x37a>
    6682:	94 fc       	sbrc	r9, 4
    6684:	16 c0       	rjmp	.+44     	; 0x66b2 <vfprintf+0x3a0>
    6686:	85 e6       	ldi	r24, 0x65	; 101
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	15 c0       	rjmp	.+42     	; 0x66b6 <vfprintf+0x3a4>
    668c:	b7 01       	movw	r22, r14
    668e:	8e e2       	ldi	r24, 0x2E	; 46
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	63 d5       	rcall	.+2758   	; 0x715a <fputc>
    6694:	1e 5f       	subi	r17, 0xFE	; 254
    6696:	82 e0       	ldi	r24, 0x02	; 2
    6698:	01 e0       	ldi	r16, 0x01	; 1
    669a:	08 0f       	add	r16, r24
    669c:	f3 01       	movw	r30, r6
    669e:	e8 0f       	add	r30, r24
    66a0:	f1 1d       	adc	r31, r1
    66a2:	80 81       	ld	r24, Z
    66a4:	b7 01       	movw	r22, r14
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	58 d5       	rcall	.+2736   	; 0x715a <fputc>
    66aa:	80 2f       	mov	r24, r16
    66ac:	01 13       	cpse	r16, r17
    66ae:	f4 cf       	rjmp	.-24     	; 0x6698 <vfprintf+0x386>
    66b0:	e8 cf       	rjmp	.-48     	; 0x6682 <vfprintf+0x370>
    66b2:	85 e4       	ldi	r24, 0x45	; 69
    66b4:	90 e0       	ldi	r25, 0x00	; 0
    66b6:	b7 01       	movw	r22, r14
    66b8:	50 d5       	rcall	.+2720   	; 0x715a <fputc>
    66ba:	d7 fc       	sbrc	r13, 7
    66bc:	06 c0       	rjmp	.+12     	; 0x66ca <vfprintf+0x3b8>
    66be:	c1 14       	cp	r12, r1
    66c0:	d1 04       	cpc	r13, r1
    66c2:	41 f4       	brne	.+16     	; 0x66d4 <vfprintf+0x3c2>
    66c4:	ec 85       	ldd	r30, Y+12	; 0x0c
    66c6:	e4 ff       	sbrs	r30, 4
    66c8:	05 c0       	rjmp	.+10     	; 0x66d4 <vfprintf+0x3c2>
    66ca:	d1 94       	neg	r13
    66cc:	c1 94       	neg	r12
    66ce:	d1 08       	sbc	r13, r1
    66d0:	8d e2       	ldi	r24, 0x2D	; 45
    66d2:	01 c0       	rjmp	.+2      	; 0x66d6 <vfprintf+0x3c4>
    66d4:	8b e2       	ldi	r24, 0x2B	; 43
    66d6:	b7 01       	movw	r22, r14
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	3f d5       	rcall	.+2686   	; 0x715a <fputc>
    66dc:	80 e3       	ldi	r24, 0x30	; 48
    66de:	2a e0       	ldi	r18, 0x0A	; 10
    66e0:	c2 16       	cp	r12, r18
    66e2:	d1 04       	cpc	r13, r1
    66e4:	2c f0       	brlt	.+10     	; 0x66f0 <vfprintf+0x3de>
    66e6:	8f 5f       	subi	r24, 0xFF	; 255
    66e8:	fa e0       	ldi	r31, 0x0A	; 10
    66ea:	cf 1a       	sub	r12, r31
    66ec:	d1 08       	sbc	r13, r1
    66ee:	f7 cf       	rjmp	.-18     	; 0x66de <vfprintf+0x3cc>
    66f0:	b7 01       	movw	r22, r14
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	32 d5       	rcall	.+2660   	; 0x715a <fputc>
    66f6:	b7 01       	movw	r22, r14
    66f8:	c6 01       	movw	r24, r12
    66fa:	c0 96       	adiw	r24, 0x30	; 48
    66fc:	2e d5       	rcall	.+2652   	; 0x715a <fputc>
    66fe:	49 c1       	rjmp	.+658    	; 0x6992 <vfprintf+0x680>
    6700:	83 36       	cpi	r24, 0x63	; 99
    6702:	31 f0       	breq	.+12     	; 0x6710 <vfprintf+0x3fe>
    6704:	83 37       	cpi	r24, 0x73	; 115
    6706:	79 f0       	breq	.+30     	; 0x6726 <vfprintf+0x414>
    6708:	83 35       	cpi	r24, 0x53	; 83
    670a:	09 f0       	breq	.+2      	; 0x670e <vfprintf+0x3fc>
    670c:	52 c0       	rjmp	.+164    	; 0x67b2 <vfprintf+0x4a0>
    670e:	1f c0       	rjmp	.+62     	; 0x674e <vfprintf+0x43c>
    6710:	56 01       	movw	r10, r12
    6712:	32 e0       	ldi	r19, 0x02	; 2
    6714:	a3 0e       	add	r10, r19
    6716:	b1 1c       	adc	r11, r1
    6718:	f6 01       	movw	r30, r12
    671a:	80 81       	ld	r24, Z
    671c:	89 83       	std	Y+1, r24	; 0x01
    671e:	01 e0       	ldi	r16, 0x01	; 1
    6720:	10 e0       	ldi	r17, 0x00	; 0
    6722:	63 01       	movw	r12, r6
    6724:	11 c0       	rjmp	.+34     	; 0x6748 <vfprintf+0x436>
    6726:	56 01       	movw	r10, r12
    6728:	f2 e0       	ldi	r31, 0x02	; 2
    672a:	af 0e       	add	r10, r31
    672c:	b1 1c       	adc	r11, r1
    672e:	f6 01       	movw	r30, r12
    6730:	c0 80       	ld	r12, Z
    6732:	d1 80       	ldd	r13, Z+1	; 0x01
    6734:	96 fe       	sbrs	r9, 6
    6736:	03 c0       	rjmp	.+6      	; 0x673e <vfprintf+0x42c>
    6738:	61 2f       	mov	r22, r17
    673a:	70 e0       	ldi	r23, 0x00	; 0
    673c:	02 c0       	rjmp	.+4      	; 0x6742 <vfprintf+0x430>
    673e:	6f ef       	ldi	r22, 0xFF	; 255
    6740:	7f ef       	ldi	r23, 0xFF	; 255
    6742:	c6 01       	movw	r24, r12
    6744:	ff d4       	rcall	.+2558   	; 0x7144 <strnlen>
    6746:	8c 01       	movw	r16, r24
    6748:	f9 2d       	mov	r31, r9
    674a:	ff 77       	andi	r31, 0x7F	; 127
    674c:	13 c0       	rjmp	.+38     	; 0x6774 <vfprintf+0x462>
    674e:	56 01       	movw	r10, r12
    6750:	22 e0       	ldi	r18, 0x02	; 2
    6752:	a2 0e       	add	r10, r18
    6754:	b1 1c       	adc	r11, r1
    6756:	f6 01       	movw	r30, r12
    6758:	c0 80       	ld	r12, Z
    675a:	d1 80       	ldd	r13, Z+1	; 0x01
    675c:	96 fe       	sbrs	r9, 6
    675e:	03 c0       	rjmp	.+6      	; 0x6766 <vfprintf+0x454>
    6760:	61 2f       	mov	r22, r17
    6762:	70 e0       	ldi	r23, 0x00	; 0
    6764:	02 c0       	rjmp	.+4      	; 0x676a <vfprintf+0x458>
    6766:	6f ef       	ldi	r22, 0xFF	; 255
    6768:	7f ef       	ldi	r23, 0xFF	; 255
    676a:	c6 01       	movw	r24, r12
    676c:	81 d4       	rcall	.+2306   	; 0x7070 <strnlen_P>
    676e:	8c 01       	movw	r16, r24
    6770:	f9 2d       	mov	r31, r9
    6772:	f0 68       	ori	r31, 0x80	; 128
    6774:	9f 2e       	mov	r9, r31
    6776:	f3 fd       	sbrc	r31, 3
    6778:	18 c0       	rjmp	.+48     	; 0x67aa <vfprintf+0x498>
    677a:	85 2d       	mov	r24, r5
    677c:	90 e0       	ldi	r25, 0x00	; 0
    677e:	08 17       	cp	r16, r24
    6780:	19 07       	cpc	r17, r25
    6782:	98 f4       	brcc	.+38     	; 0x67aa <vfprintf+0x498>
    6784:	b7 01       	movw	r22, r14
    6786:	80 e2       	ldi	r24, 0x20	; 32
    6788:	90 e0       	ldi	r25, 0x00	; 0
    678a:	e7 d4       	rcall	.+2510   	; 0x715a <fputc>
    678c:	5a 94       	dec	r5
    678e:	f5 cf       	rjmp	.-22     	; 0x677a <vfprintf+0x468>
    6790:	f6 01       	movw	r30, r12
    6792:	97 fc       	sbrc	r9, 7
    6794:	85 91       	lpm	r24, Z+
    6796:	97 fe       	sbrs	r9, 7
    6798:	81 91       	ld	r24, Z+
    679a:	6f 01       	movw	r12, r30
    679c:	b7 01       	movw	r22, r14
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	dc d4       	rcall	.+2488   	; 0x715a <fputc>
    67a2:	51 10       	cpse	r5, r1
    67a4:	5a 94       	dec	r5
    67a6:	01 50       	subi	r16, 0x01	; 1
    67a8:	11 09       	sbc	r17, r1
    67aa:	01 15       	cp	r16, r1
    67ac:	11 05       	cpc	r17, r1
    67ae:	81 f7       	brne	.-32     	; 0x6790 <vfprintf+0x47e>
    67b0:	f0 c0       	rjmp	.+480    	; 0x6992 <vfprintf+0x680>
    67b2:	84 36       	cpi	r24, 0x64	; 100
    67b4:	11 f0       	breq	.+4      	; 0x67ba <vfprintf+0x4a8>
    67b6:	89 36       	cpi	r24, 0x69	; 105
    67b8:	59 f5       	brne	.+86     	; 0x6810 <vfprintf+0x4fe>
    67ba:	56 01       	movw	r10, r12
    67bc:	97 fe       	sbrs	r9, 7
    67be:	09 c0       	rjmp	.+18     	; 0x67d2 <vfprintf+0x4c0>
    67c0:	24 e0       	ldi	r18, 0x04	; 4
    67c2:	a2 0e       	add	r10, r18
    67c4:	b1 1c       	adc	r11, r1
    67c6:	f6 01       	movw	r30, r12
    67c8:	60 81       	ld	r22, Z
    67ca:	71 81       	ldd	r23, Z+1	; 0x01
    67cc:	82 81       	ldd	r24, Z+2	; 0x02
    67ce:	93 81       	ldd	r25, Z+3	; 0x03
    67d0:	0a c0       	rjmp	.+20     	; 0x67e6 <vfprintf+0x4d4>
    67d2:	f2 e0       	ldi	r31, 0x02	; 2
    67d4:	af 0e       	add	r10, r31
    67d6:	b1 1c       	adc	r11, r1
    67d8:	f6 01       	movw	r30, r12
    67da:	60 81       	ld	r22, Z
    67dc:	71 81       	ldd	r23, Z+1	; 0x01
    67de:	07 2e       	mov	r0, r23
    67e0:	00 0c       	add	r0, r0
    67e2:	88 0b       	sbc	r24, r24
    67e4:	99 0b       	sbc	r25, r25
    67e6:	f9 2d       	mov	r31, r9
    67e8:	ff 76       	andi	r31, 0x6F	; 111
    67ea:	9f 2e       	mov	r9, r31
    67ec:	97 ff       	sbrs	r25, 7
    67ee:	09 c0       	rjmp	.+18     	; 0x6802 <vfprintf+0x4f0>
    67f0:	90 95       	com	r25
    67f2:	80 95       	com	r24
    67f4:	70 95       	com	r23
    67f6:	61 95       	neg	r22
    67f8:	7f 4f       	sbci	r23, 0xFF	; 255
    67fa:	8f 4f       	sbci	r24, 0xFF	; 255
    67fc:	9f 4f       	sbci	r25, 0xFF	; 255
    67fe:	f0 68       	ori	r31, 0x80	; 128
    6800:	9f 2e       	mov	r9, r31
    6802:	2a e0       	ldi	r18, 0x0A	; 10
    6804:	30 e0       	ldi	r19, 0x00	; 0
    6806:	a3 01       	movw	r20, r6
    6808:	5c d5       	rcall	.+2744   	; 0x72c2 <__ultoa_invert>
    680a:	c8 2e       	mov	r12, r24
    680c:	c6 18       	sub	r12, r6
    680e:	3e c0       	rjmp	.+124    	; 0x688c <vfprintf+0x57a>
    6810:	09 2d       	mov	r16, r9
    6812:	85 37       	cpi	r24, 0x75	; 117
    6814:	21 f4       	brne	.+8      	; 0x681e <vfprintf+0x50c>
    6816:	0f 7e       	andi	r16, 0xEF	; 239
    6818:	2a e0       	ldi	r18, 0x0A	; 10
    681a:	30 e0       	ldi	r19, 0x00	; 0
    681c:	1d c0       	rjmp	.+58     	; 0x6858 <vfprintf+0x546>
    681e:	09 7f       	andi	r16, 0xF9	; 249
    6820:	8f 36       	cpi	r24, 0x6F	; 111
    6822:	91 f0       	breq	.+36     	; 0x6848 <vfprintf+0x536>
    6824:	18 f4       	brcc	.+6      	; 0x682c <vfprintf+0x51a>
    6826:	88 35       	cpi	r24, 0x58	; 88
    6828:	59 f0       	breq	.+22     	; 0x6840 <vfprintf+0x52e>
    682a:	bc c0       	rjmp	.+376    	; 0x69a4 <vfprintf+0x692>
    682c:	80 37       	cpi	r24, 0x70	; 112
    682e:	19 f0       	breq	.+6      	; 0x6836 <vfprintf+0x524>
    6830:	88 37       	cpi	r24, 0x78	; 120
    6832:	11 f0       	breq	.+4      	; 0x6838 <vfprintf+0x526>
    6834:	b7 c0       	rjmp	.+366    	; 0x69a4 <vfprintf+0x692>
    6836:	00 61       	ori	r16, 0x10	; 16
    6838:	04 ff       	sbrs	r16, 4
    683a:	09 c0       	rjmp	.+18     	; 0x684e <vfprintf+0x53c>
    683c:	04 60       	ori	r16, 0x04	; 4
    683e:	07 c0       	rjmp	.+14     	; 0x684e <vfprintf+0x53c>
    6840:	94 fe       	sbrs	r9, 4
    6842:	08 c0       	rjmp	.+16     	; 0x6854 <vfprintf+0x542>
    6844:	06 60       	ori	r16, 0x06	; 6
    6846:	06 c0       	rjmp	.+12     	; 0x6854 <vfprintf+0x542>
    6848:	28 e0       	ldi	r18, 0x08	; 8
    684a:	30 e0       	ldi	r19, 0x00	; 0
    684c:	05 c0       	rjmp	.+10     	; 0x6858 <vfprintf+0x546>
    684e:	20 e1       	ldi	r18, 0x10	; 16
    6850:	30 e0       	ldi	r19, 0x00	; 0
    6852:	02 c0       	rjmp	.+4      	; 0x6858 <vfprintf+0x546>
    6854:	20 e1       	ldi	r18, 0x10	; 16
    6856:	32 e0       	ldi	r19, 0x02	; 2
    6858:	56 01       	movw	r10, r12
    685a:	07 ff       	sbrs	r16, 7
    685c:	09 c0       	rjmp	.+18     	; 0x6870 <vfprintf+0x55e>
    685e:	84 e0       	ldi	r24, 0x04	; 4
    6860:	a8 0e       	add	r10, r24
    6862:	b1 1c       	adc	r11, r1
    6864:	f6 01       	movw	r30, r12
    6866:	60 81       	ld	r22, Z
    6868:	71 81       	ldd	r23, Z+1	; 0x01
    686a:	82 81       	ldd	r24, Z+2	; 0x02
    686c:	93 81       	ldd	r25, Z+3	; 0x03
    686e:	08 c0       	rjmp	.+16     	; 0x6880 <vfprintf+0x56e>
    6870:	f2 e0       	ldi	r31, 0x02	; 2
    6872:	af 0e       	add	r10, r31
    6874:	b1 1c       	adc	r11, r1
    6876:	f6 01       	movw	r30, r12
    6878:	60 81       	ld	r22, Z
    687a:	71 81       	ldd	r23, Z+1	; 0x01
    687c:	80 e0       	ldi	r24, 0x00	; 0
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	a3 01       	movw	r20, r6
    6882:	1f d5       	rcall	.+2622   	; 0x72c2 <__ultoa_invert>
    6884:	c8 2e       	mov	r12, r24
    6886:	c6 18       	sub	r12, r6
    6888:	0f 77       	andi	r16, 0x7F	; 127
    688a:	90 2e       	mov	r9, r16
    688c:	96 fe       	sbrs	r9, 6
    688e:	0b c0       	rjmp	.+22     	; 0x68a6 <vfprintf+0x594>
    6890:	09 2d       	mov	r16, r9
    6892:	0e 7f       	andi	r16, 0xFE	; 254
    6894:	c1 16       	cp	r12, r17
    6896:	50 f4       	brcc	.+20     	; 0x68ac <vfprintf+0x59a>
    6898:	94 fe       	sbrs	r9, 4
    689a:	0a c0       	rjmp	.+20     	; 0x68b0 <vfprintf+0x59e>
    689c:	92 fc       	sbrc	r9, 2
    689e:	08 c0       	rjmp	.+16     	; 0x68b0 <vfprintf+0x59e>
    68a0:	09 2d       	mov	r16, r9
    68a2:	0e 7e       	andi	r16, 0xEE	; 238
    68a4:	05 c0       	rjmp	.+10     	; 0x68b0 <vfprintf+0x59e>
    68a6:	dc 2c       	mov	r13, r12
    68a8:	09 2d       	mov	r16, r9
    68aa:	03 c0       	rjmp	.+6      	; 0x68b2 <vfprintf+0x5a0>
    68ac:	dc 2c       	mov	r13, r12
    68ae:	01 c0       	rjmp	.+2      	; 0x68b2 <vfprintf+0x5a0>
    68b0:	d1 2e       	mov	r13, r17
    68b2:	04 ff       	sbrs	r16, 4
    68b4:	0d c0       	rjmp	.+26     	; 0x68d0 <vfprintf+0x5be>
    68b6:	fe 01       	movw	r30, r28
    68b8:	ec 0d       	add	r30, r12
    68ba:	f1 1d       	adc	r31, r1
    68bc:	80 81       	ld	r24, Z
    68be:	80 33       	cpi	r24, 0x30	; 48
    68c0:	11 f4       	brne	.+4      	; 0x68c6 <vfprintf+0x5b4>
    68c2:	09 7e       	andi	r16, 0xE9	; 233
    68c4:	09 c0       	rjmp	.+18     	; 0x68d8 <vfprintf+0x5c6>
    68c6:	02 ff       	sbrs	r16, 2
    68c8:	06 c0       	rjmp	.+12     	; 0x68d6 <vfprintf+0x5c4>
    68ca:	d3 94       	inc	r13
    68cc:	d3 94       	inc	r13
    68ce:	04 c0       	rjmp	.+8      	; 0x68d8 <vfprintf+0x5c6>
    68d0:	80 2f       	mov	r24, r16
    68d2:	86 78       	andi	r24, 0x86	; 134
    68d4:	09 f0       	breq	.+2      	; 0x68d8 <vfprintf+0x5c6>
    68d6:	d3 94       	inc	r13
    68d8:	03 fd       	sbrc	r16, 3
    68da:	10 c0       	rjmp	.+32     	; 0x68fc <vfprintf+0x5ea>
    68dc:	00 ff       	sbrs	r16, 0
    68de:	06 c0       	rjmp	.+12     	; 0x68ec <vfprintf+0x5da>
    68e0:	1c 2d       	mov	r17, r12
    68e2:	d5 14       	cp	r13, r5
    68e4:	78 f4       	brcc	.+30     	; 0x6904 <vfprintf+0x5f2>
    68e6:	15 0d       	add	r17, r5
    68e8:	1d 19       	sub	r17, r13
    68ea:	0c c0       	rjmp	.+24     	; 0x6904 <vfprintf+0x5f2>
    68ec:	d5 14       	cp	r13, r5
    68ee:	50 f4       	brcc	.+20     	; 0x6904 <vfprintf+0x5f2>
    68f0:	b7 01       	movw	r22, r14
    68f2:	80 e2       	ldi	r24, 0x20	; 32
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	31 d4       	rcall	.+2146   	; 0x715a <fputc>
    68f8:	d3 94       	inc	r13
    68fa:	f8 cf       	rjmp	.-16     	; 0x68ec <vfprintf+0x5da>
    68fc:	d5 14       	cp	r13, r5
    68fe:	10 f4       	brcc	.+4      	; 0x6904 <vfprintf+0x5f2>
    6900:	5d 18       	sub	r5, r13
    6902:	01 c0       	rjmp	.+2      	; 0x6906 <vfprintf+0x5f4>
    6904:	51 2c       	mov	r5, r1
    6906:	04 ff       	sbrs	r16, 4
    6908:	0f c0       	rjmp	.+30     	; 0x6928 <vfprintf+0x616>
    690a:	b7 01       	movw	r22, r14
    690c:	80 e3       	ldi	r24, 0x30	; 48
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	24 d4       	rcall	.+2120   	; 0x715a <fputc>
    6912:	02 ff       	sbrs	r16, 2
    6914:	16 c0       	rjmp	.+44     	; 0x6942 <vfprintf+0x630>
    6916:	01 fd       	sbrc	r16, 1
    6918:	03 c0       	rjmp	.+6      	; 0x6920 <vfprintf+0x60e>
    691a:	88 e7       	ldi	r24, 0x78	; 120
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	02 c0       	rjmp	.+4      	; 0x6924 <vfprintf+0x612>
    6920:	88 e5       	ldi	r24, 0x58	; 88
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	b7 01       	movw	r22, r14
    6926:	0c c0       	rjmp	.+24     	; 0x6940 <vfprintf+0x62e>
    6928:	80 2f       	mov	r24, r16
    692a:	86 78       	andi	r24, 0x86	; 134
    692c:	51 f0       	breq	.+20     	; 0x6942 <vfprintf+0x630>
    692e:	01 ff       	sbrs	r16, 1
    6930:	02 c0       	rjmp	.+4      	; 0x6936 <vfprintf+0x624>
    6932:	8b e2       	ldi	r24, 0x2B	; 43
    6934:	01 c0       	rjmp	.+2      	; 0x6938 <vfprintf+0x626>
    6936:	80 e2       	ldi	r24, 0x20	; 32
    6938:	07 fd       	sbrc	r16, 7
    693a:	8d e2       	ldi	r24, 0x2D	; 45
    693c:	b7 01       	movw	r22, r14
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	0c d4       	rcall	.+2072   	; 0x715a <fputc>
    6942:	c1 16       	cp	r12, r17
    6944:	30 f4       	brcc	.+12     	; 0x6952 <vfprintf+0x640>
    6946:	b7 01       	movw	r22, r14
    6948:	80 e3       	ldi	r24, 0x30	; 48
    694a:	90 e0       	ldi	r25, 0x00	; 0
    694c:	06 d4       	rcall	.+2060   	; 0x715a <fputc>
    694e:	11 50       	subi	r17, 0x01	; 1
    6950:	f8 cf       	rjmp	.-16     	; 0x6942 <vfprintf+0x630>
    6952:	ca 94       	dec	r12
    6954:	f3 01       	movw	r30, r6
    6956:	ec 0d       	add	r30, r12
    6958:	f1 1d       	adc	r31, r1
    695a:	80 81       	ld	r24, Z
    695c:	b7 01       	movw	r22, r14
    695e:	90 e0       	ldi	r25, 0x00	; 0
    6960:	fc d3       	rcall	.+2040   	; 0x715a <fputc>
    6962:	c1 10       	cpse	r12, r1
    6964:	f6 cf       	rjmp	.-20     	; 0x6952 <vfprintf+0x640>
    6966:	15 c0       	rjmp	.+42     	; 0x6992 <vfprintf+0x680>
    6968:	f4 e0       	ldi	r31, 0x04	; 4
    696a:	f5 15       	cp	r31, r5
    696c:	50 f5       	brcc	.+84     	; 0x69c2 <vfprintf+0x6b0>
    696e:	84 e0       	ldi	r24, 0x04	; 4
    6970:	58 1a       	sub	r5, r24
    6972:	93 fe       	sbrs	r9, 3
    6974:	1e c0       	rjmp	.+60     	; 0x69b2 <vfprintf+0x6a0>
    6976:	01 11       	cpse	r16, r1
    6978:	25 c0       	rjmp	.+74     	; 0x69c4 <vfprintf+0x6b2>
    697a:	2c 85       	ldd	r18, Y+12	; 0x0c
    697c:	23 ff       	sbrs	r18, 3
    697e:	27 c0       	rjmp	.+78     	; 0x69ce <vfprintf+0x6bc>
    6980:	0a e9       	ldi	r16, 0x9A	; 154
    6982:	11 e0       	ldi	r17, 0x01	; 1
    6984:	39 2d       	mov	r19, r9
    6986:	30 71       	andi	r19, 0x10	; 16
    6988:	93 2e       	mov	r9, r19
    698a:	f8 01       	movw	r30, r16
    698c:	84 91       	lpm	r24, Z
    698e:	81 11       	cpse	r24, r1
    6990:	21 c0       	rjmp	.+66     	; 0x69d4 <vfprintf+0x6c2>
    6992:	55 20       	and	r5, r5
    6994:	09 f4       	brne	.+2      	; 0x6998 <vfprintf+0x686>
    6996:	fc cc       	rjmp	.-1544   	; 0x6390 <vfprintf+0x7e>
    6998:	b7 01       	movw	r22, r14
    699a:	80 e2       	ldi	r24, 0x20	; 32
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	dd d3       	rcall	.+1978   	; 0x715a <fputc>
    69a0:	5a 94       	dec	r5
    69a2:	f7 cf       	rjmp	.-18     	; 0x6992 <vfprintf+0x680>
    69a4:	f7 01       	movw	r30, r14
    69a6:	86 81       	ldd	r24, Z+6	; 0x06
    69a8:	97 81       	ldd	r25, Z+7	; 0x07
    69aa:	23 c0       	rjmp	.+70     	; 0x69f2 <vfprintf+0x6e0>
    69ac:	8f ef       	ldi	r24, 0xFF	; 255
    69ae:	9f ef       	ldi	r25, 0xFF	; 255
    69b0:	20 c0       	rjmp	.+64     	; 0x69f2 <vfprintf+0x6e0>
    69b2:	b7 01       	movw	r22, r14
    69b4:	80 e2       	ldi	r24, 0x20	; 32
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	d0 d3       	rcall	.+1952   	; 0x715a <fputc>
    69ba:	5a 94       	dec	r5
    69bc:	51 10       	cpse	r5, r1
    69be:	f9 cf       	rjmp	.-14     	; 0x69b2 <vfprintf+0x6a0>
    69c0:	da cf       	rjmp	.-76     	; 0x6976 <vfprintf+0x664>
    69c2:	51 2c       	mov	r5, r1
    69c4:	b7 01       	movw	r22, r14
    69c6:	80 2f       	mov	r24, r16
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	c7 d3       	rcall	.+1934   	; 0x715a <fputc>
    69cc:	d6 cf       	rjmp	.-84     	; 0x697a <vfprintf+0x668>
    69ce:	0e e9       	ldi	r16, 0x9E	; 158
    69d0:	11 e0       	ldi	r17, 0x01	; 1
    69d2:	d8 cf       	rjmp	.-80     	; 0x6984 <vfprintf+0x672>
    69d4:	91 10       	cpse	r9, r1
    69d6:	80 52       	subi	r24, 0x20	; 32
    69d8:	b7 01       	movw	r22, r14
    69da:	90 e0       	ldi	r25, 0x00	; 0
    69dc:	be d3       	rcall	.+1916   	; 0x715a <fputc>
    69de:	0f 5f       	subi	r16, 0xFF	; 255
    69e0:	1f 4f       	sbci	r17, 0xFF	; 255
    69e2:	d3 cf       	rjmp	.-90     	; 0x698a <vfprintf+0x678>
    69e4:	23 e0       	ldi	r18, 0x03	; 3
    69e6:	25 15       	cp	r18, r5
    69e8:	10 f4       	brcc	.+4      	; 0x69ee <vfprintf+0x6dc>
    69ea:	83 e0       	ldi	r24, 0x03	; 3
    69ec:	c1 cf       	rjmp	.-126    	; 0x6970 <vfprintf+0x65e>
    69ee:	51 2c       	mov	r5, r1
    69f0:	c4 cf       	rjmp	.-120    	; 0x697a <vfprintf+0x668>
    69f2:	60 96       	adiw	r28, 0x10	; 16
    69f4:	0f b6       	in	r0, 0x3f	; 63
    69f6:	f8 94       	cli
    69f8:	de bf       	out	0x3e, r29	; 62
    69fa:	0f be       	out	0x3f, r0	; 63
    69fc:	cd bf       	out	0x3d, r28	; 61
    69fe:	df 91       	pop	r29
    6a00:	cf 91       	pop	r28
    6a02:	1f 91       	pop	r17
    6a04:	0f 91       	pop	r16
    6a06:	ff 90       	pop	r15
    6a08:	ef 90       	pop	r14
    6a0a:	df 90       	pop	r13
    6a0c:	cf 90       	pop	r12
    6a0e:	bf 90       	pop	r11
    6a10:	af 90       	pop	r10
    6a12:	9f 90       	pop	r9
    6a14:	8f 90       	pop	r8
    6a16:	7f 90       	pop	r7
    6a18:	6f 90       	pop	r6
    6a1a:	5f 90       	pop	r5
    6a1c:	4f 90       	pop	r4
    6a1e:	3f 90       	pop	r3
    6a20:	2f 90       	pop	r2
    6a22:	08 95       	ret

00006a24 <__divsf3>:
    6a24:	12 d0       	rcall	.+36     	; 0x6a4a <__divsf3x>
    6a26:	0c 94 68 24 	jmp	0x48d0	; 0x48d0 <__fp_round>
    6a2a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__fp_pscB>
    6a2e:	58 f0       	brcs	.+22     	; 0x6a46 <__divsf3+0x22>
    6a30:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <__fp_pscA>
    6a34:	40 f0       	brcs	.+16     	; 0x6a46 <__divsf3+0x22>
    6a36:	29 f4       	brne	.+10     	; 0x6a42 <__divsf3+0x1e>
    6a38:	5f 3f       	cpi	r21, 0xFF	; 255
    6a3a:	29 f0       	breq	.+10     	; 0x6a46 <__divsf3+0x22>
    6a3c:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__fp_inf>
    6a40:	51 11       	cpse	r21, r1
    6a42:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <__fp_szero>
    6a46:	0c 94 57 24 	jmp	0x48ae	; 0x48ae <__fp_nan>

00006a4a <__divsf3x>:
    6a4a:	0e 94 2d 23 	call	0x465a	; 0x465a <__fp_split3>
    6a4e:	68 f3       	brcs	.-38     	; 0x6a2a <__divsf3+0x6>

00006a50 <__divsf3_pse>:
    6a50:	99 23       	and	r25, r25
    6a52:	b1 f3       	breq	.-20     	; 0x6a40 <__divsf3+0x1c>
    6a54:	55 23       	and	r21, r21
    6a56:	91 f3       	breq	.-28     	; 0x6a3c <__divsf3+0x18>
    6a58:	95 1b       	sub	r25, r21
    6a5a:	55 0b       	sbc	r21, r21
    6a5c:	bb 27       	eor	r27, r27
    6a5e:	aa 27       	eor	r26, r26
    6a60:	62 17       	cp	r22, r18
    6a62:	73 07       	cpc	r23, r19
    6a64:	84 07       	cpc	r24, r20
    6a66:	38 f0       	brcs	.+14     	; 0x6a76 <__divsf3_pse+0x26>
    6a68:	9f 5f       	subi	r25, 0xFF	; 255
    6a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a6c:	22 0f       	add	r18, r18
    6a6e:	33 1f       	adc	r19, r19
    6a70:	44 1f       	adc	r20, r20
    6a72:	aa 1f       	adc	r26, r26
    6a74:	a9 f3       	breq	.-22     	; 0x6a60 <__divsf3_pse+0x10>
    6a76:	35 d0       	rcall	.+106    	; 0x6ae2 <__divsf3_pse+0x92>
    6a78:	0e 2e       	mov	r0, r30
    6a7a:	3a f0       	brmi	.+14     	; 0x6a8a <__divsf3_pse+0x3a>
    6a7c:	e0 e8       	ldi	r30, 0x80	; 128
    6a7e:	32 d0       	rcall	.+100    	; 0x6ae4 <__divsf3_pse+0x94>
    6a80:	91 50       	subi	r25, 0x01	; 1
    6a82:	50 40       	sbci	r21, 0x00	; 0
    6a84:	e6 95       	lsr	r30
    6a86:	00 1c       	adc	r0, r0
    6a88:	ca f7       	brpl	.-14     	; 0x6a7c <__divsf3_pse+0x2c>
    6a8a:	2b d0       	rcall	.+86     	; 0x6ae2 <__divsf3_pse+0x92>
    6a8c:	fe 2f       	mov	r31, r30
    6a8e:	29 d0       	rcall	.+82     	; 0x6ae2 <__divsf3_pse+0x92>
    6a90:	66 0f       	add	r22, r22
    6a92:	77 1f       	adc	r23, r23
    6a94:	88 1f       	adc	r24, r24
    6a96:	bb 1f       	adc	r27, r27
    6a98:	26 17       	cp	r18, r22
    6a9a:	37 07       	cpc	r19, r23
    6a9c:	48 07       	cpc	r20, r24
    6a9e:	ab 07       	cpc	r26, r27
    6aa0:	b0 e8       	ldi	r27, 0x80	; 128
    6aa2:	09 f0       	breq	.+2      	; 0x6aa6 <__divsf3_pse+0x56>
    6aa4:	bb 0b       	sbc	r27, r27
    6aa6:	80 2d       	mov	r24, r0
    6aa8:	bf 01       	movw	r22, r30
    6aaa:	ff 27       	eor	r31, r31
    6aac:	93 58       	subi	r25, 0x83	; 131
    6aae:	5f 4f       	sbci	r21, 0xFF	; 255
    6ab0:	3a f0       	brmi	.+14     	; 0x6ac0 <__divsf3_pse+0x70>
    6ab2:	9e 3f       	cpi	r25, 0xFE	; 254
    6ab4:	51 05       	cpc	r21, r1
    6ab6:	78 f0       	brcs	.+30     	; 0x6ad6 <__divsf3_pse+0x86>
    6ab8:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__fp_inf>
    6abc:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <__fp_szero>
    6ac0:	5f 3f       	cpi	r21, 0xFF	; 255
    6ac2:	e4 f3       	brlt	.-8      	; 0x6abc <__divsf3_pse+0x6c>
    6ac4:	98 3e       	cpi	r25, 0xE8	; 232
    6ac6:	d4 f3       	brlt	.-12     	; 0x6abc <__divsf3_pse+0x6c>
    6ac8:	86 95       	lsr	r24
    6aca:	77 95       	ror	r23
    6acc:	67 95       	ror	r22
    6ace:	b7 95       	ror	r27
    6ad0:	f7 95       	ror	r31
    6ad2:	9f 5f       	subi	r25, 0xFF	; 255
    6ad4:	c9 f7       	brne	.-14     	; 0x6ac8 <__divsf3_pse+0x78>
    6ad6:	88 0f       	add	r24, r24
    6ad8:	91 1d       	adc	r25, r1
    6ada:	96 95       	lsr	r25
    6adc:	87 95       	ror	r24
    6ade:	97 f9       	bld	r25, 7
    6ae0:	08 95       	ret
    6ae2:	e1 e0       	ldi	r30, 0x01	; 1
    6ae4:	66 0f       	add	r22, r22
    6ae6:	77 1f       	adc	r23, r23
    6ae8:	88 1f       	adc	r24, r24
    6aea:	bb 1f       	adc	r27, r27
    6aec:	62 17       	cp	r22, r18
    6aee:	73 07       	cpc	r23, r19
    6af0:	84 07       	cpc	r24, r20
    6af2:	ba 07       	cpc	r27, r26
    6af4:	20 f0       	brcs	.+8      	; 0x6afe <__divsf3_pse+0xae>
    6af6:	62 1b       	sub	r22, r18
    6af8:	73 0b       	sbc	r23, r19
    6afa:	84 0b       	sbc	r24, r20
    6afc:	ba 0b       	sbc	r27, r26
    6afe:	ee 1f       	adc	r30, r30
    6b00:	88 f7       	brcc	.-30     	; 0x6ae4 <__divsf3_pse+0x94>
    6b02:	e0 95       	com	r30
    6b04:	08 95       	ret

00006b06 <__floatunsisf>:
    6b06:	e8 94       	clt
    6b08:	09 c0       	rjmp	.+18     	; 0x6b1c <__floatsisf+0x12>

00006b0a <__floatsisf>:
    6b0a:	97 fb       	bst	r25, 7
    6b0c:	3e f4       	brtc	.+14     	; 0x6b1c <__floatsisf+0x12>
    6b0e:	90 95       	com	r25
    6b10:	80 95       	com	r24
    6b12:	70 95       	com	r23
    6b14:	61 95       	neg	r22
    6b16:	7f 4f       	sbci	r23, 0xFF	; 255
    6b18:	8f 4f       	sbci	r24, 0xFF	; 255
    6b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b1c:	99 23       	and	r25, r25
    6b1e:	a9 f0       	breq	.+42     	; 0x6b4a <__floatsisf+0x40>
    6b20:	f9 2f       	mov	r31, r25
    6b22:	96 e9       	ldi	r25, 0x96	; 150
    6b24:	bb 27       	eor	r27, r27
    6b26:	93 95       	inc	r25
    6b28:	f6 95       	lsr	r31
    6b2a:	87 95       	ror	r24
    6b2c:	77 95       	ror	r23
    6b2e:	67 95       	ror	r22
    6b30:	b7 95       	ror	r27
    6b32:	f1 11       	cpse	r31, r1
    6b34:	f8 cf       	rjmp	.-16     	; 0x6b26 <__floatsisf+0x1c>
    6b36:	fa f4       	brpl	.+62     	; 0x6b76 <__floatsisf+0x6c>
    6b38:	bb 0f       	add	r27, r27
    6b3a:	11 f4       	brne	.+4      	; 0x6b40 <__floatsisf+0x36>
    6b3c:	60 ff       	sbrs	r22, 0
    6b3e:	1b c0       	rjmp	.+54     	; 0x6b76 <__floatsisf+0x6c>
    6b40:	6f 5f       	subi	r22, 0xFF	; 255
    6b42:	7f 4f       	sbci	r23, 0xFF	; 255
    6b44:	8f 4f       	sbci	r24, 0xFF	; 255
    6b46:	9f 4f       	sbci	r25, 0xFF	; 255
    6b48:	16 c0       	rjmp	.+44     	; 0x6b76 <__floatsisf+0x6c>
    6b4a:	88 23       	and	r24, r24
    6b4c:	11 f0       	breq	.+4      	; 0x6b52 <__floatsisf+0x48>
    6b4e:	96 e9       	ldi	r25, 0x96	; 150
    6b50:	11 c0       	rjmp	.+34     	; 0x6b74 <__floatsisf+0x6a>
    6b52:	77 23       	and	r23, r23
    6b54:	21 f0       	breq	.+8      	; 0x6b5e <__floatsisf+0x54>
    6b56:	9e e8       	ldi	r25, 0x8E	; 142
    6b58:	87 2f       	mov	r24, r23
    6b5a:	76 2f       	mov	r23, r22
    6b5c:	05 c0       	rjmp	.+10     	; 0x6b68 <__floatsisf+0x5e>
    6b5e:	66 23       	and	r22, r22
    6b60:	71 f0       	breq	.+28     	; 0x6b7e <__floatsisf+0x74>
    6b62:	96 e8       	ldi	r25, 0x86	; 134
    6b64:	86 2f       	mov	r24, r22
    6b66:	70 e0       	ldi	r23, 0x00	; 0
    6b68:	60 e0       	ldi	r22, 0x00	; 0
    6b6a:	2a f0       	brmi	.+10     	; 0x6b76 <__floatsisf+0x6c>
    6b6c:	9a 95       	dec	r25
    6b6e:	66 0f       	add	r22, r22
    6b70:	77 1f       	adc	r23, r23
    6b72:	88 1f       	adc	r24, r24
    6b74:	da f7       	brpl	.-10     	; 0x6b6c <__floatsisf+0x62>
    6b76:	88 0f       	add	r24, r24
    6b78:	96 95       	lsr	r25
    6b7a:	87 95       	ror	r24
    6b7c:	97 f9       	bld	r25, 7
    6b7e:	08 95       	ret

00006b80 <__gesf2>:
    6b80:	03 d0       	rcall	.+6      	; 0x6b88 <__fp_cmp>
    6b82:	08 f4       	brcc	.+2      	; 0x6b86 <__gesf2+0x6>
    6b84:	8f ef       	ldi	r24, 0xFF	; 255
    6b86:	08 95       	ret

00006b88 <__fp_cmp>:
    6b88:	99 0f       	add	r25, r25
    6b8a:	00 08       	sbc	r0, r0
    6b8c:	55 0f       	add	r21, r21
    6b8e:	aa 0b       	sbc	r26, r26
    6b90:	e0 e8       	ldi	r30, 0x80	; 128
    6b92:	fe ef       	ldi	r31, 0xFE	; 254
    6b94:	16 16       	cp	r1, r22
    6b96:	17 06       	cpc	r1, r23
    6b98:	e8 07       	cpc	r30, r24
    6b9a:	f9 07       	cpc	r31, r25
    6b9c:	c0 f0       	brcs	.+48     	; 0x6bce <__fp_cmp+0x46>
    6b9e:	12 16       	cp	r1, r18
    6ba0:	13 06       	cpc	r1, r19
    6ba2:	e4 07       	cpc	r30, r20
    6ba4:	f5 07       	cpc	r31, r21
    6ba6:	98 f0       	brcs	.+38     	; 0x6bce <__fp_cmp+0x46>
    6ba8:	62 1b       	sub	r22, r18
    6baa:	73 0b       	sbc	r23, r19
    6bac:	84 0b       	sbc	r24, r20
    6bae:	95 0b       	sbc	r25, r21
    6bb0:	39 f4       	brne	.+14     	; 0x6bc0 <__fp_cmp+0x38>
    6bb2:	0a 26       	eor	r0, r26
    6bb4:	61 f0       	breq	.+24     	; 0x6bce <__fp_cmp+0x46>
    6bb6:	23 2b       	or	r18, r19
    6bb8:	24 2b       	or	r18, r20
    6bba:	25 2b       	or	r18, r21
    6bbc:	21 f4       	brne	.+8      	; 0x6bc6 <__fp_cmp+0x3e>
    6bbe:	08 95       	ret
    6bc0:	0a 26       	eor	r0, r26
    6bc2:	09 f4       	brne	.+2      	; 0x6bc6 <__fp_cmp+0x3e>
    6bc4:	a1 40       	sbci	r26, 0x01	; 1
    6bc6:	a6 95       	lsr	r26
    6bc8:	8f ef       	ldi	r24, 0xFF	; 255
    6bca:	81 1d       	adc	r24, r1
    6bcc:	81 1d       	adc	r24, r1
    6bce:	08 95       	ret

00006bd0 <__udivmodsi4>:
    6bd0:	a1 e2       	ldi	r26, 0x21	; 33
    6bd2:	1a 2e       	mov	r1, r26
    6bd4:	aa 1b       	sub	r26, r26
    6bd6:	bb 1b       	sub	r27, r27
    6bd8:	fd 01       	movw	r30, r26
    6bda:	0d c0       	rjmp	.+26     	; 0x6bf6 <__udivmodsi4_ep>

00006bdc <__udivmodsi4_loop>:
    6bdc:	aa 1f       	adc	r26, r26
    6bde:	bb 1f       	adc	r27, r27
    6be0:	ee 1f       	adc	r30, r30
    6be2:	ff 1f       	adc	r31, r31
    6be4:	a2 17       	cp	r26, r18
    6be6:	b3 07       	cpc	r27, r19
    6be8:	e4 07       	cpc	r30, r20
    6bea:	f5 07       	cpc	r31, r21
    6bec:	20 f0       	brcs	.+8      	; 0x6bf6 <__udivmodsi4_ep>
    6bee:	a2 1b       	sub	r26, r18
    6bf0:	b3 0b       	sbc	r27, r19
    6bf2:	e4 0b       	sbc	r30, r20
    6bf4:	f5 0b       	sbc	r31, r21

00006bf6 <__udivmodsi4_ep>:
    6bf6:	66 1f       	adc	r22, r22
    6bf8:	77 1f       	adc	r23, r23
    6bfa:	88 1f       	adc	r24, r24
    6bfc:	99 1f       	adc	r25, r25
    6bfe:	1a 94       	dec	r1
    6c00:	69 f7       	brne	.-38     	; 0x6bdc <__udivmodsi4_loop>
    6c02:	60 95       	com	r22
    6c04:	70 95       	com	r23
    6c06:	80 95       	com	r24
    6c08:	90 95       	com	r25
    6c0a:	9b 01       	movw	r18, r22
    6c0c:	ac 01       	movw	r20, r24
    6c0e:	bd 01       	movw	r22, r26
    6c10:	cf 01       	movw	r24, r30
    6c12:	08 95       	ret

00006c14 <__tablejump2__>:
    6c14:	ee 0f       	add	r30, r30
    6c16:	ff 1f       	adc	r31, r31
    6c18:	88 1f       	adc	r24, r24
    6c1a:	8b bf       	out	0x3b, r24	; 59
    6c1c:	07 90       	elpm	r0, Z+
    6c1e:	f6 91       	elpm	r31, Z
    6c20:	e0 2d       	mov	r30, r0
    6c22:	19 94       	eijmp

00006c24 <__umulhisi3>:
    6c24:	a2 9f       	mul	r26, r18
    6c26:	b0 01       	movw	r22, r0
    6c28:	b3 9f       	mul	r27, r19
    6c2a:	c0 01       	movw	r24, r0
    6c2c:	a3 9f       	mul	r26, r19
    6c2e:	70 0d       	add	r23, r0
    6c30:	81 1d       	adc	r24, r1
    6c32:	11 24       	eor	r1, r1
    6c34:	91 1d       	adc	r25, r1
    6c36:	b2 9f       	mul	r27, r18
    6c38:	70 0d       	add	r23, r0
    6c3a:	81 1d       	adc	r24, r1
    6c3c:	11 24       	eor	r1, r1
    6c3e:	91 1d       	adc	r25, r1
    6c40:	08 95       	ret

00006c42 <calloc>:
    6c42:	0f 93       	push	r16
    6c44:	1f 93       	push	r17
    6c46:	cf 93       	push	r28
    6c48:	df 93       	push	r29
    6c4a:	86 9f       	mul	r24, r22
    6c4c:	80 01       	movw	r16, r0
    6c4e:	87 9f       	mul	r24, r23
    6c50:	10 0d       	add	r17, r0
    6c52:	96 9f       	mul	r25, r22
    6c54:	10 0d       	add	r17, r0
    6c56:	11 24       	eor	r1, r1
    6c58:	c8 01       	movw	r24, r16
    6c5a:	0d d0       	rcall	.+26     	; 0x6c76 <malloc>
    6c5c:	ec 01       	movw	r28, r24
    6c5e:	00 97       	sbiw	r24, 0x00	; 0
    6c60:	21 f0       	breq	.+8      	; 0x6c6a <calloc+0x28>
    6c62:	a8 01       	movw	r20, r16
    6c64:	60 e0       	ldi	r22, 0x00	; 0
    6c66:	70 e0       	ldi	r23, 0x00	; 0
    6c68:	17 d2       	rcall	.+1070   	; 0x7098 <memset>
    6c6a:	ce 01       	movw	r24, r28
    6c6c:	df 91       	pop	r29
    6c6e:	cf 91       	pop	r28
    6c70:	1f 91       	pop	r17
    6c72:	0f 91       	pop	r16
    6c74:	08 95       	ret

00006c76 <malloc>:
    6c76:	0f 93       	push	r16
    6c78:	1f 93       	push	r17
    6c7a:	cf 93       	push	r28
    6c7c:	df 93       	push	r29
    6c7e:	82 30       	cpi	r24, 0x02	; 2
    6c80:	91 05       	cpc	r25, r1
    6c82:	10 f4       	brcc	.+4      	; 0x6c88 <malloc+0x12>
    6c84:	82 e0       	ldi	r24, 0x02	; 2
    6c86:	90 e0       	ldi	r25, 0x00	; 0
    6c88:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <__flp>
    6c8c:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <__flp+0x1>
    6c90:	20 e0       	ldi	r18, 0x00	; 0
    6c92:	30 e0       	ldi	r19, 0x00	; 0
    6c94:	a0 e0       	ldi	r26, 0x00	; 0
    6c96:	b0 e0       	ldi	r27, 0x00	; 0
    6c98:	30 97       	sbiw	r30, 0x00	; 0
    6c9a:	19 f1       	breq	.+70     	; 0x6ce2 <malloc+0x6c>
    6c9c:	40 81       	ld	r20, Z
    6c9e:	51 81       	ldd	r21, Z+1	; 0x01
    6ca0:	02 81       	ldd	r16, Z+2	; 0x02
    6ca2:	13 81       	ldd	r17, Z+3	; 0x03
    6ca4:	48 17       	cp	r20, r24
    6ca6:	59 07       	cpc	r21, r25
    6ca8:	c8 f0       	brcs	.+50     	; 0x6cdc <malloc+0x66>
    6caa:	84 17       	cp	r24, r20
    6cac:	95 07       	cpc	r25, r21
    6cae:	69 f4       	brne	.+26     	; 0x6cca <malloc+0x54>
    6cb0:	10 97       	sbiw	r26, 0x00	; 0
    6cb2:	31 f0       	breq	.+12     	; 0x6cc0 <malloc+0x4a>
    6cb4:	12 96       	adiw	r26, 0x02	; 2
    6cb6:	0c 93       	st	X, r16
    6cb8:	12 97       	sbiw	r26, 0x02	; 2
    6cba:	13 96       	adiw	r26, 0x03	; 3
    6cbc:	1c 93       	st	X, r17
    6cbe:	27 c0       	rjmp	.+78     	; 0x6d0e <malloc+0x98>
    6cc0:	00 93 1b 16 	sts	0x161B, r16	; 0x80161b <__flp>
    6cc4:	10 93 1c 16 	sts	0x161C, r17	; 0x80161c <__flp+0x1>
    6cc8:	22 c0       	rjmp	.+68     	; 0x6d0e <malloc+0x98>
    6cca:	21 15       	cp	r18, r1
    6ccc:	31 05       	cpc	r19, r1
    6cce:	19 f0       	breq	.+6      	; 0x6cd6 <malloc+0x60>
    6cd0:	42 17       	cp	r20, r18
    6cd2:	53 07       	cpc	r21, r19
    6cd4:	18 f4       	brcc	.+6      	; 0x6cdc <malloc+0x66>
    6cd6:	9a 01       	movw	r18, r20
    6cd8:	bd 01       	movw	r22, r26
    6cda:	ef 01       	movw	r28, r30
    6cdc:	df 01       	movw	r26, r30
    6cde:	f8 01       	movw	r30, r16
    6ce0:	db cf       	rjmp	.-74     	; 0x6c98 <malloc+0x22>
    6ce2:	21 15       	cp	r18, r1
    6ce4:	31 05       	cpc	r19, r1
    6ce6:	f9 f0       	breq	.+62     	; 0x6d26 <malloc+0xb0>
    6ce8:	28 1b       	sub	r18, r24
    6cea:	39 0b       	sbc	r19, r25
    6cec:	24 30       	cpi	r18, 0x04	; 4
    6cee:	31 05       	cpc	r19, r1
    6cf0:	80 f4       	brcc	.+32     	; 0x6d12 <malloc+0x9c>
    6cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    6cf6:	61 15       	cp	r22, r1
    6cf8:	71 05       	cpc	r23, r1
    6cfa:	21 f0       	breq	.+8      	; 0x6d04 <malloc+0x8e>
    6cfc:	fb 01       	movw	r30, r22
    6cfe:	93 83       	std	Z+3, r25	; 0x03
    6d00:	82 83       	std	Z+2, r24	; 0x02
    6d02:	04 c0       	rjmp	.+8      	; 0x6d0c <malloc+0x96>
    6d04:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <__flp+0x1>
    6d08:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <__flp>
    6d0c:	fe 01       	movw	r30, r28
    6d0e:	32 96       	adiw	r30, 0x02	; 2
    6d10:	44 c0       	rjmp	.+136    	; 0x6d9a <malloc+0x124>
    6d12:	fe 01       	movw	r30, r28
    6d14:	e2 0f       	add	r30, r18
    6d16:	f3 1f       	adc	r31, r19
    6d18:	81 93       	st	Z+, r24
    6d1a:	91 93       	st	Z+, r25
    6d1c:	22 50       	subi	r18, 0x02	; 2
    6d1e:	31 09       	sbc	r19, r1
    6d20:	39 83       	std	Y+1, r19	; 0x01
    6d22:	28 83       	st	Y, r18
    6d24:	3a c0       	rjmp	.+116    	; 0x6d9a <malloc+0x124>
    6d26:	20 91 19 16 	lds	r18, 0x1619	; 0x801619 <__brkval>
    6d2a:	30 91 1a 16 	lds	r19, 0x161A	; 0x80161a <__brkval+0x1>
    6d2e:	23 2b       	or	r18, r19
    6d30:	41 f4       	brne	.+16     	; 0x6d42 <malloc+0xcc>
    6d32:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6d36:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6d3a:	30 93 1a 16 	sts	0x161A, r19	; 0x80161a <__brkval+0x1>
    6d3e:	20 93 19 16 	sts	0x1619, r18	; 0x801619 <__brkval>
    6d42:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6d46:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6d4a:	21 15       	cp	r18, r1
    6d4c:	31 05       	cpc	r19, r1
    6d4e:	41 f4       	brne	.+16     	; 0x6d60 <malloc+0xea>
    6d50:	2d b7       	in	r18, 0x3d	; 61
    6d52:	3e b7       	in	r19, 0x3e	; 62
    6d54:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6d58:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6d5c:	24 1b       	sub	r18, r20
    6d5e:	35 0b       	sbc	r19, r21
    6d60:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <__brkval>
    6d64:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <__brkval+0x1>
    6d68:	e2 17       	cp	r30, r18
    6d6a:	f3 07       	cpc	r31, r19
    6d6c:	a0 f4       	brcc	.+40     	; 0x6d96 <malloc+0x120>
    6d6e:	2e 1b       	sub	r18, r30
    6d70:	3f 0b       	sbc	r19, r31
    6d72:	28 17       	cp	r18, r24
    6d74:	39 07       	cpc	r19, r25
    6d76:	78 f0       	brcs	.+30     	; 0x6d96 <malloc+0x120>
    6d78:	ac 01       	movw	r20, r24
    6d7a:	4e 5f       	subi	r20, 0xFE	; 254
    6d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    6d7e:	24 17       	cp	r18, r20
    6d80:	35 07       	cpc	r19, r21
    6d82:	48 f0       	brcs	.+18     	; 0x6d96 <malloc+0x120>
    6d84:	4e 0f       	add	r20, r30
    6d86:	5f 1f       	adc	r21, r31
    6d88:	50 93 1a 16 	sts	0x161A, r21	; 0x80161a <__brkval+0x1>
    6d8c:	40 93 19 16 	sts	0x1619, r20	; 0x801619 <__brkval>
    6d90:	81 93       	st	Z+, r24
    6d92:	91 93       	st	Z+, r25
    6d94:	02 c0       	rjmp	.+4      	; 0x6d9a <malloc+0x124>
    6d96:	e0 e0       	ldi	r30, 0x00	; 0
    6d98:	f0 e0       	ldi	r31, 0x00	; 0
    6d9a:	cf 01       	movw	r24, r30
    6d9c:	df 91       	pop	r29
    6d9e:	cf 91       	pop	r28
    6da0:	1f 91       	pop	r17
    6da2:	0f 91       	pop	r16
    6da4:	08 95       	ret

00006da6 <free>:
    6da6:	cf 93       	push	r28
    6da8:	df 93       	push	r29
    6daa:	00 97       	sbiw	r24, 0x00	; 0
    6dac:	09 f4       	brne	.+2      	; 0x6db0 <free+0xa>
    6dae:	81 c0       	rjmp	.+258    	; 0x6eb2 <free+0x10c>
    6db0:	fc 01       	movw	r30, r24
    6db2:	32 97       	sbiw	r30, 0x02	; 2
    6db4:	13 82       	std	Z+3, r1	; 0x03
    6db6:	12 82       	std	Z+2, r1	; 0x02
    6db8:	a0 91 1b 16 	lds	r26, 0x161B	; 0x80161b <__flp>
    6dbc:	b0 91 1c 16 	lds	r27, 0x161C	; 0x80161c <__flp+0x1>
    6dc0:	10 97       	sbiw	r26, 0x00	; 0
    6dc2:	81 f4       	brne	.+32     	; 0x6de4 <free+0x3e>
    6dc4:	20 81       	ld	r18, Z
    6dc6:	31 81       	ldd	r19, Z+1	; 0x01
    6dc8:	82 0f       	add	r24, r18
    6dca:	93 1f       	adc	r25, r19
    6dcc:	20 91 19 16 	lds	r18, 0x1619	; 0x801619 <__brkval>
    6dd0:	30 91 1a 16 	lds	r19, 0x161A	; 0x80161a <__brkval+0x1>
    6dd4:	28 17       	cp	r18, r24
    6dd6:	39 07       	cpc	r19, r25
    6dd8:	51 f5       	brne	.+84     	; 0x6e2e <free+0x88>
    6dda:	f0 93 1a 16 	sts	0x161A, r31	; 0x80161a <__brkval+0x1>
    6dde:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <__brkval>
    6de2:	67 c0       	rjmp	.+206    	; 0x6eb2 <free+0x10c>
    6de4:	ed 01       	movw	r28, r26
    6de6:	20 e0       	ldi	r18, 0x00	; 0
    6de8:	30 e0       	ldi	r19, 0x00	; 0
    6dea:	ce 17       	cp	r28, r30
    6dec:	df 07       	cpc	r29, r31
    6dee:	40 f4       	brcc	.+16     	; 0x6e00 <free+0x5a>
    6df0:	4a 81       	ldd	r20, Y+2	; 0x02
    6df2:	5b 81       	ldd	r21, Y+3	; 0x03
    6df4:	9e 01       	movw	r18, r28
    6df6:	41 15       	cp	r20, r1
    6df8:	51 05       	cpc	r21, r1
    6dfa:	f1 f0       	breq	.+60     	; 0x6e38 <free+0x92>
    6dfc:	ea 01       	movw	r28, r20
    6dfe:	f5 cf       	rjmp	.-22     	; 0x6dea <free+0x44>
    6e00:	d3 83       	std	Z+3, r29	; 0x03
    6e02:	c2 83       	std	Z+2, r28	; 0x02
    6e04:	40 81       	ld	r20, Z
    6e06:	51 81       	ldd	r21, Z+1	; 0x01
    6e08:	84 0f       	add	r24, r20
    6e0a:	95 1f       	adc	r25, r21
    6e0c:	c8 17       	cp	r28, r24
    6e0e:	d9 07       	cpc	r29, r25
    6e10:	59 f4       	brne	.+22     	; 0x6e28 <free+0x82>
    6e12:	88 81       	ld	r24, Y
    6e14:	99 81       	ldd	r25, Y+1	; 0x01
    6e16:	84 0f       	add	r24, r20
    6e18:	95 1f       	adc	r25, r21
    6e1a:	02 96       	adiw	r24, 0x02	; 2
    6e1c:	91 83       	std	Z+1, r25	; 0x01
    6e1e:	80 83       	st	Z, r24
    6e20:	8a 81       	ldd	r24, Y+2	; 0x02
    6e22:	9b 81       	ldd	r25, Y+3	; 0x03
    6e24:	93 83       	std	Z+3, r25	; 0x03
    6e26:	82 83       	std	Z+2, r24	; 0x02
    6e28:	21 15       	cp	r18, r1
    6e2a:	31 05       	cpc	r19, r1
    6e2c:	29 f4       	brne	.+10     	; 0x6e38 <free+0x92>
    6e2e:	f0 93 1c 16 	sts	0x161C, r31	; 0x80161c <__flp+0x1>
    6e32:	e0 93 1b 16 	sts	0x161B, r30	; 0x80161b <__flp>
    6e36:	3d c0       	rjmp	.+122    	; 0x6eb2 <free+0x10c>
    6e38:	e9 01       	movw	r28, r18
    6e3a:	fb 83       	std	Y+3, r31	; 0x03
    6e3c:	ea 83       	std	Y+2, r30	; 0x02
    6e3e:	49 91       	ld	r20, Y+
    6e40:	59 91       	ld	r21, Y+
    6e42:	c4 0f       	add	r28, r20
    6e44:	d5 1f       	adc	r29, r21
    6e46:	ec 17       	cp	r30, r28
    6e48:	fd 07       	cpc	r31, r29
    6e4a:	61 f4       	brne	.+24     	; 0x6e64 <free+0xbe>
    6e4c:	80 81       	ld	r24, Z
    6e4e:	91 81       	ldd	r25, Z+1	; 0x01
    6e50:	84 0f       	add	r24, r20
    6e52:	95 1f       	adc	r25, r21
    6e54:	02 96       	adiw	r24, 0x02	; 2
    6e56:	e9 01       	movw	r28, r18
    6e58:	99 83       	std	Y+1, r25	; 0x01
    6e5a:	88 83       	st	Y, r24
    6e5c:	82 81       	ldd	r24, Z+2	; 0x02
    6e5e:	93 81       	ldd	r25, Z+3	; 0x03
    6e60:	9b 83       	std	Y+3, r25	; 0x03
    6e62:	8a 83       	std	Y+2, r24	; 0x02
    6e64:	e0 e0       	ldi	r30, 0x00	; 0
    6e66:	f0 e0       	ldi	r31, 0x00	; 0
    6e68:	12 96       	adiw	r26, 0x02	; 2
    6e6a:	8d 91       	ld	r24, X+
    6e6c:	9c 91       	ld	r25, X
    6e6e:	13 97       	sbiw	r26, 0x03	; 3
    6e70:	00 97       	sbiw	r24, 0x00	; 0
    6e72:	19 f0       	breq	.+6      	; 0x6e7a <free+0xd4>
    6e74:	fd 01       	movw	r30, r26
    6e76:	dc 01       	movw	r26, r24
    6e78:	f7 cf       	rjmp	.-18     	; 0x6e68 <free+0xc2>
    6e7a:	8d 91       	ld	r24, X+
    6e7c:	9c 91       	ld	r25, X
    6e7e:	11 97       	sbiw	r26, 0x01	; 1
    6e80:	9d 01       	movw	r18, r26
    6e82:	2e 5f       	subi	r18, 0xFE	; 254
    6e84:	3f 4f       	sbci	r19, 0xFF	; 255
    6e86:	82 0f       	add	r24, r18
    6e88:	93 1f       	adc	r25, r19
    6e8a:	20 91 19 16 	lds	r18, 0x1619	; 0x801619 <__brkval>
    6e8e:	30 91 1a 16 	lds	r19, 0x161A	; 0x80161a <__brkval+0x1>
    6e92:	28 17       	cp	r18, r24
    6e94:	39 07       	cpc	r19, r25
    6e96:	69 f4       	brne	.+26     	; 0x6eb2 <free+0x10c>
    6e98:	30 97       	sbiw	r30, 0x00	; 0
    6e9a:	29 f4       	brne	.+10     	; 0x6ea6 <free+0x100>
    6e9c:	10 92 1c 16 	sts	0x161C, r1	; 0x80161c <__flp+0x1>
    6ea0:	10 92 1b 16 	sts	0x161B, r1	; 0x80161b <__flp>
    6ea4:	02 c0       	rjmp	.+4      	; 0x6eaa <free+0x104>
    6ea6:	13 82       	std	Z+3, r1	; 0x03
    6ea8:	12 82       	std	Z+2, r1	; 0x02
    6eaa:	b0 93 1a 16 	sts	0x161A, r27	; 0x80161a <__brkval+0x1>
    6eae:	a0 93 19 16 	sts	0x1619, r26	; 0x801619 <__brkval>
    6eb2:	df 91       	pop	r29
    6eb4:	cf 91       	pop	r28
    6eb6:	08 95       	ret

00006eb8 <abort>:
    6eb8:	81 e0       	ldi	r24, 0x01	; 1
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	f8 94       	cli
    6ebe:	5f c2       	rjmp	.+1214   	; 0x737e <_exit>

00006ec0 <__ftoa_engine>:
    6ec0:	28 30       	cpi	r18, 0x08	; 8
    6ec2:	08 f0       	brcs	.+2      	; 0x6ec6 <__ftoa_engine+0x6>
    6ec4:	27 e0       	ldi	r18, 0x07	; 7
    6ec6:	33 27       	eor	r19, r19
    6ec8:	da 01       	movw	r26, r20
    6eca:	99 0f       	add	r25, r25
    6ecc:	31 1d       	adc	r19, r1
    6ece:	87 fd       	sbrc	r24, 7
    6ed0:	91 60       	ori	r25, 0x01	; 1
    6ed2:	00 96       	adiw	r24, 0x00	; 0
    6ed4:	61 05       	cpc	r22, r1
    6ed6:	71 05       	cpc	r23, r1
    6ed8:	39 f4       	brne	.+14     	; 0x6ee8 <__ftoa_engine+0x28>
    6eda:	32 60       	ori	r19, 0x02	; 2
    6edc:	2e 5f       	subi	r18, 0xFE	; 254
    6ede:	3d 93       	st	X+, r19
    6ee0:	30 e3       	ldi	r19, 0x30	; 48
    6ee2:	2a 95       	dec	r18
    6ee4:	e1 f7       	brne	.-8      	; 0x6ede <__ftoa_engine+0x1e>
    6ee6:	08 95       	ret
    6ee8:	9f 3f       	cpi	r25, 0xFF	; 255
    6eea:	30 f0       	brcs	.+12     	; 0x6ef8 <__ftoa_engine+0x38>
    6eec:	80 38       	cpi	r24, 0x80	; 128
    6eee:	71 05       	cpc	r23, r1
    6ef0:	61 05       	cpc	r22, r1
    6ef2:	09 f0       	breq	.+2      	; 0x6ef6 <__ftoa_engine+0x36>
    6ef4:	3c 5f       	subi	r19, 0xFC	; 252
    6ef6:	3c 5f       	subi	r19, 0xFC	; 252
    6ef8:	3d 93       	st	X+, r19
    6efa:	91 30       	cpi	r25, 0x01	; 1
    6efc:	08 f0       	brcs	.+2      	; 0x6f00 <__ftoa_engine+0x40>
    6efe:	80 68       	ori	r24, 0x80	; 128
    6f00:	91 1d       	adc	r25, r1
    6f02:	df 93       	push	r29
    6f04:	cf 93       	push	r28
    6f06:	1f 93       	push	r17
    6f08:	0f 93       	push	r16
    6f0a:	ff 92       	push	r15
    6f0c:	ef 92       	push	r14
    6f0e:	19 2f       	mov	r17, r25
    6f10:	98 7f       	andi	r25, 0xF8	; 248
    6f12:	96 95       	lsr	r25
    6f14:	e9 2f       	mov	r30, r25
    6f16:	96 95       	lsr	r25
    6f18:	96 95       	lsr	r25
    6f1a:	e9 0f       	add	r30, r25
    6f1c:	ff 27       	eor	r31, r31
    6f1e:	e4 50       	subi	r30, 0x04	; 4
    6f20:	fe 4f       	sbci	r31, 0xFE	; 254
    6f22:	99 27       	eor	r25, r25
    6f24:	33 27       	eor	r19, r19
    6f26:	ee 24       	eor	r14, r14
    6f28:	ff 24       	eor	r15, r15
    6f2a:	a7 01       	movw	r20, r14
    6f2c:	e7 01       	movw	r28, r14
    6f2e:	05 90       	lpm	r0, Z+
    6f30:	08 94       	sec
    6f32:	07 94       	ror	r0
    6f34:	28 f4       	brcc	.+10     	; 0x6f40 <__ftoa_engine+0x80>
    6f36:	36 0f       	add	r19, r22
    6f38:	e7 1e       	adc	r14, r23
    6f3a:	f8 1e       	adc	r15, r24
    6f3c:	49 1f       	adc	r20, r25
    6f3e:	51 1d       	adc	r21, r1
    6f40:	66 0f       	add	r22, r22
    6f42:	77 1f       	adc	r23, r23
    6f44:	88 1f       	adc	r24, r24
    6f46:	99 1f       	adc	r25, r25
    6f48:	06 94       	lsr	r0
    6f4a:	a1 f7       	brne	.-24     	; 0x6f34 <__ftoa_engine+0x74>
    6f4c:	05 90       	lpm	r0, Z+
    6f4e:	07 94       	ror	r0
    6f50:	28 f4       	brcc	.+10     	; 0x6f5c <__ftoa_engine+0x9c>
    6f52:	e7 0e       	add	r14, r23
    6f54:	f8 1e       	adc	r15, r24
    6f56:	49 1f       	adc	r20, r25
    6f58:	56 1f       	adc	r21, r22
    6f5a:	c1 1d       	adc	r28, r1
    6f5c:	77 0f       	add	r23, r23
    6f5e:	88 1f       	adc	r24, r24
    6f60:	99 1f       	adc	r25, r25
    6f62:	66 1f       	adc	r22, r22
    6f64:	06 94       	lsr	r0
    6f66:	a1 f7       	brne	.-24     	; 0x6f50 <__ftoa_engine+0x90>
    6f68:	05 90       	lpm	r0, Z+
    6f6a:	07 94       	ror	r0
    6f6c:	28 f4       	brcc	.+10     	; 0x6f78 <__ftoa_engine+0xb8>
    6f6e:	f8 0e       	add	r15, r24
    6f70:	49 1f       	adc	r20, r25
    6f72:	56 1f       	adc	r21, r22
    6f74:	c7 1f       	adc	r28, r23
    6f76:	d1 1d       	adc	r29, r1
    6f78:	88 0f       	add	r24, r24
    6f7a:	99 1f       	adc	r25, r25
    6f7c:	66 1f       	adc	r22, r22
    6f7e:	77 1f       	adc	r23, r23
    6f80:	06 94       	lsr	r0
    6f82:	a1 f7       	brne	.-24     	; 0x6f6c <__ftoa_engine+0xac>
    6f84:	05 90       	lpm	r0, Z+
    6f86:	07 94       	ror	r0
    6f88:	20 f4       	brcc	.+8      	; 0x6f92 <__ftoa_engine+0xd2>
    6f8a:	49 0f       	add	r20, r25
    6f8c:	56 1f       	adc	r21, r22
    6f8e:	c7 1f       	adc	r28, r23
    6f90:	d8 1f       	adc	r29, r24
    6f92:	99 0f       	add	r25, r25
    6f94:	66 1f       	adc	r22, r22
    6f96:	77 1f       	adc	r23, r23
    6f98:	88 1f       	adc	r24, r24
    6f9a:	06 94       	lsr	r0
    6f9c:	a9 f7       	brne	.-22     	; 0x6f88 <__ftoa_engine+0xc8>
    6f9e:	84 91       	lpm	r24, Z
    6fa0:	10 95       	com	r17
    6fa2:	17 70       	andi	r17, 0x07	; 7
    6fa4:	41 f0       	breq	.+16     	; 0x6fb6 <__ftoa_engine+0xf6>
    6fa6:	d6 95       	lsr	r29
    6fa8:	c7 95       	ror	r28
    6faa:	57 95       	ror	r21
    6fac:	47 95       	ror	r20
    6fae:	f7 94       	ror	r15
    6fb0:	e7 94       	ror	r14
    6fb2:	1a 95       	dec	r17
    6fb4:	c1 f7       	brne	.-16     	; 0x6fa6 <__ftoa_engine+0xe6>
    6fb6:	e2 ea       	ldi	r30, 0xA2	; 162
    6fb8:	f1 e0       	ldi	r31, 0x01	; 1
    6fba:	68 94       	set
    6fbc:	15 90       	lpm	r1, Z+
    6fbe:	15 91       	lpm	r17, Z+
    6fc0:	35 91       	lpm	r19, Z+
    6fc2:	65 91       	lpm	r22, Z+
    6fc4:	95 91       	lpm	r25, Z+
    6fc6:	05 90       	lpm	r0, Z+
    6fc8:	7f e2       	ldi	r23, 0x2F	; 47
    6fca:	73 95       	inc	r23
    6fcc:	e1 18       	sub	r14, r1
    6fce:	f1 0a       	sbc	r15, r17
    6fd0:	43 0b       	sbc	r20, r19
    6fd2:	56 0b       	sbc	r21, r22
    6fd4:	c9 0b       	sbc	r28, r25
    6fd6:	d0 09       	sbc	r29, r0
    6fd8:	c0 f7       	brcc	.-16     	; 0x6fca <__ftoa_engine+0x10a>
    6fda:	e1 0c       	add	r14, r1
    6fdc:	f1 1e       	adc	r15, r17
    6fde:	43 1f       	adc	r20, r19
    6fe0:	56 1f       	adc	r21, r22
    6fe2:	c9 1f       	adc	r28, r25
    6fe4:	d0 1d       	adc	r29, r0
    6fe6:	7e f4       	brtc	.+30     	; 0x7006 <__ftoa_engine+0x146>
    6fe8:	70 33       	cpi	r23, 0x30	; 48
    6fea:	11 f4       	brne	.+4      	; 0x6ff0 <__ftoa_engine+0x130>
    6fec:	8a 95       	dec	r24
    6fee:	e6 cf       	rjmp	.-52     	; 0x6fbc <__ftoa_engine+0xfc>
    6ff0:	e8 94       	clt
    6ff2:	01 50       	subi	r16, 0x01	; 1
    6ff4:	30 f0       	brcs	.+12     	; 0x7002 <__ftoa_engine+0x142>
    6ff6:	08 0f       	add	r16, r24
    6ff8:	0a f4       	brpl	.+2      	; 0x6ffc <__ftoa_engine+0x13c>
    6ffa:	00 27       	eor	r16, r16
    6ffc:	02 17       	cp	r16, r18
    6ffe:	08 f4       	brcc	.+2      	; 0x7002 <__ftoa_engine+0x142>
    7000:	20 2f       	mov	r18, r16
    7002:	23 95       	inc	r18
    7004:	02 2f       	mov	r16, r18
    7006:	7a 33       	cpi	r23, 0x3A	; 58
    7008:	28 f0       	brcs	.+10     	; 0x7014 <__ftoa_engine+0x154>
    700a:	79 e3       	ldi	r23, 0x39	; 57
    700c:	7d 93       	st	X+, r23
    700e:	2a 95       	dec	r18
    7010:	e9 f7       	brne	.-6      	; 0x700c <__ftoa_engine+0x14c>
    7012:	10 c0       	rjmp	.+32     	; 0x7034 <__ftoa_engine+0x174>
    7014:	7d 93       	st	X+, r23
    7016:	2a 95       	dec	r18
    7018:	89 f6       	brne	.-94     	; 0x6fbc <__ftoa_engine+0xfc>
    701a:	06 94       	lsr	r0
    701c:	97 95       	ror	r25
    701e:	67 95       	ror	r22
    7020:	37 95       	ror	r19
    7022:	17 95       	ror	r17
    7024:	17 94       	ror	r1
    7026:	e1 18       	sub	r14, r1
    7028:	f1 0a       	sbc	r15, r17
    702a:	43 0b       	sbc	r20, r19
    702c:	56 0b       	sbc	r21, r22
    702e:	c9 0b       	sbc	r28, r25
    7030:	d0 09       	sbc	r29, r0
    7032:	98 f0       	brcs	.+38     	; 0x705a <__ftoa_engine+0x19a>
    7034:	23 95       	inc	r18
    7036:	7e 91       	ld	r23, -X
    7038:	73 95       	inc	r23
    703a:	7a 33       	cpi	r23, 0x3A	; 58
    703c:	08 f0       	brcs	.+2      	; 0x7040 <__ftoa_engine+0x180>
    703e:	70 e3       	ldi	r23, 0x30	; 48
    7040:	7c 93       	st	X, r23
    7042:	20 13       	cpse	r18, r16
    7044:	b8 f7       	brcc	.-18     	; 0x7034 <__ftoa_engine+0x174>
    7046:	7e 91       	ld	r23, -X
    7048:	70 61       	ori	r23, 0x10	; 16
    704a:	7d 93       	st	X+, r23
    704c:	30 f0       	brcs	.+12     	; 0x705a <__ftoa_engine+0x19a>
    704e:	83 95       	inc	r24
    7050:	71 e3       	ldi	r23, 0x31	; 49
    7052:	7d 93       	st	X+, r23
    7054:	70 e3       	ldi	r23, 0x30	; 48
    7056:	2a 95       	dec	r18
    7058:	e1 f7       	brne	.-8      	; 0x7052 <__ftoa_engine+0x192>
    705a:	11 24       	eor	r1, r1
    705c:	ef 90       	pop	r14
    705e:	ff 90       	pop	r15
    7060:	0f 91       	pop	r16
    7062:	1f 91       	pop	r17
    7064:	cf 91       	pop	r28
    7066:	df 91       	pop	r29
    7068:	99 27       	eor	r25, r25
    706a:	87 fd       	sbrc	r24, 7
    706c:	90 95       	com	r25
    706e:	08 95       	ret

00007070 <strnlen_P>:
    7070:	fc 01       	movw	r30, r24
    7072:	05 90       	lpm	r0, Z+
    7074:	61 50       	subi	r22, 0x01	; 1
    7076:	70 40       	sbci	r23, 0x00	; 0
    7078:	01 10       	cpse	r0, r1
    707a:	d8 f7       	brcc	.-10     	; 0x7072 <strnlen_P+0x2>
    707c:	80 95       	com	r24
    707e:	90 95       	com	r25
    7080:	8e 0f       	add	r24, r30
    7082:	9f 1f       	adc	r25, r31
    7084:	08 95       	ret

00007086 <memcpy>:
    7086:	fb 01       	movw	r30, r22
    7088:	dc 01       	movw	r26, r24
    708a:	02 c0       	rjmp	.+4      	; 0x7090 <memcpy+0xa>
    708c:	01 90       	ld	r0, Z+
    708e:	0d 92       	st	X+, r0
    7090:	41 50       	subi	r20, 0x01	; 1
    7092:	50 40       	sbci	r21, 0x00	; 0
    7094:	d8 f7       	brcc	.-10     	; 0x708c <memcpy+0x6>
    7096:	08 95       	ret

00007098 <memset>:
    7098:	dc 01       	movw	r26, r24
    709a:	01 c0       	rjmp	.+2      	; 0x709e <memset+0x6>
    709c:	6d 93       	st	X+, r22
    709e:	41 50       	subi	r20, 0x01	; 1
    70a0:	50 40       	sbci	r21, 0x00	; 0
    70a2:	e0 f7       	brcc	.-8      	; 0x709c <memset+0x4>
    70a4:	08 95       	ret

000070a6 <strcasestr>:
    70a6:	fb 01       	movw	r30, r22
    70a8:	51 91       	ld	r21, Z+
    70aa:	55 23       	and	r21, r21
    70ac:	b1 f0       	breq	.+44     	; 0x70da <strcasestr+0x34>
    70ae:	bf 01       	movw	r22, r30
    70b0:	dc 01       	movw	r26, r24
    70b2:	05 2e       	mov	r0, r21
    70b4:	4d 91       	ld	r20, X+
    70b6:	44 23       	and	r20, r20
    70b8:	69 f0       	breq	.+26     	; 0x70d4 <strcasestr+0x2e>
    70ba:	10 d0       	rcall	.+32     	; 0x70dc <strcasestr+0x36>
    70bc:	d9 f7       	brne	.-10     	; 0x70b4 <strcasestr+0xe>
    70be:	cd 01       	movw	r24, r26
    70c0:	01 90       	ld	r0, Z+
    70c2:	00 20       	and	r0, r0
    70c4:	49 f0       	breq	.+18     	; 0x70d8 <strcasestr+0x32>
    70c6:	4d 91       	ld	r20, X+
    70c8:	41 11       	cpse	r20, r1
    70ca:	08 d0       	rcall	.+16     	; 0x70dc <strcasestr+0x36>
    70cc:	c9 f3       	breq	.-14     	; 0x70c0 <strcasestr+0x1a>
    70ce:	fb 01       	movw	r30, r22
    70d0:	41 11       	cpse	r20, r1
    70d2:	ee cf       	rjmp	.-36     	; 0x70b0 <strcasestr+0xa>
    70d4:	81 e0       	ldi	r24, 0x01	; 1
    70d6:	90 e0       	ldi	r25, 0x00	; 0
    70d8:	01 97       	sbiw	r24, 0x01	; 1
    70da:	08 95       	ret
    70dc:	40 25       	eor	r20, r0
    70de:	39 f0       	breq	.+14     	; 0x70ee <strcasestr+0x48>
    70e0:	40 32       	cpi	r20, 0x20	; 32
    70e2:	29 f4       	brne	.+10     	; 0x70ee <strcasestr+0x48>
    70e4:	40 29       	or	r20, r0
    70e6:	4b 57       	subi	r20, 0x7B	; 123
    70e8:	46 5e       	subi	r20, 0xE6	; 230
    70ea:	08 f0       	brcs	.+2      	; 0x70ee <strcasestr+0x48>
    70ec:	18 94       	sez
    70ee:	08 95       	ret

000070f0 <strcat>:
    70f0:	fb 01       	movw	r30, r22
    70f2:	dc 01       	movw	r26, r24
    70f4:	0d 90       	ld	r0, X+
    70f6:	00 20       	and	r0, r0
    70f8:	e9 f7       	brne	.-6      	; 0x70f4 <strcat+0x4>
    70fa:	11 97       	sbiw	r26, 0x01	; 1
    70fc:	01 90       	ld	r0, Z+
    70fe:	0d 92       	st	X+, r0
    7100:	00 20       	and	r0, r0
    7102:	e1 f7       	brne	.-8      	; 0x70fc <strcat+0xc>
    7104:	08 95       	ret

00007106 <strcpy>:
    7106:	fb 01       	movw	r30, r22
    7108:	dc 01       	movw	r26, r24
    710a:	01 90       	ld	r0, Z+
    710c:	0d 92       	st	X+, r0
    710e:	00 20       	and	r0, r0
    7110:	e1 f7       	brne	.-8      	; 0x710a <strcpy+0x4>
    7112:	08 95       	ret

00007114 <strncasecmp>:
    7114:	fb 01       	movw	r30, r22
    7116:	dc 01       	movw	r26, r24
    7118:	41 50       	subi	r20, 0x01	; 1
    711a:	50 40       	sbci	r21, 0x00	; 0
    711c:	88 f0       	brcs	.+34     	; 0x7140 <strncasecmp+0x2c>
    711e:	8d 91       	ld	r24, X+
    7120:	81 34       	cpi	r24, 0x41	; 65
    7122:	1c f0       	brlt	.+6      	; 0x712a <strncasecmp+0x16>
    7124:	8b 35       	cpi	r24, 0x5B	; 91
    7126:	0c f4       	brge	.+2      	; 0x712a <strncasecmp+0x16>
    7128:	80 5e       	subi	r24, 0xE0	; 224
    712a:	61 91       	ld	r22, Z+
    712c:	61 34       	cpi	r22, 0x41	; 65
    712e:	1c f0       	brlt	.+6      	; 0x7136 <strncasecmp+0x22>
    7130:	6b 35       	cpi	r22, 0x5B	; 91
    7132:	0c f4       	brge	.+2      	; 0x7136 <strncasecmp+0x22>
    7134:	60 5e       	subi	r22, 0xE0	; 224
    7136:	86 1b       	sub	r24, r22
    7138:	61 11       	cpse	r22, r1
    713a:	71 f3       	breq	.-36     	; 0x7118 <strncasecmp+0x4>
    713c:	99 0b       	sbc	r25, r25
    713e:	08 95       	ret
    7140:	88 1b       	sub	r24, r24
    7142:	fc cf       	rjmp	.-8      	; 0x713c <strncasecmp+0x28>

00007144 <strnlen>:
    7144:	fc 01       	movw	r30, r24
    7146:	61 50       	subi	r22, 0x01	; 1
    7148:	70 40       	sbci	r23, 0x00	; 0
    714a:	01 90       	ld	r0, Z+
    714c:	01 10       	cpse	r0, r1
    714e:	d8 f7       	brcc	.-10     	; 0x7146 <strnlen+0x2>
    7150:	80 95       	com	r24
    7152:	90 95       	com	r25
    7154:	8e 0f       	add	r24, r30
    7156:	9f 1f       	adc	r25, r31
    7158:	08 95       	ret

0000715a <fputc>:
    715a:	0f 93       	push	r16
    715c:	1f 93       	push	r17
    715e:	cf 93       	push	r28
    7160:	df 93       	push	r29
    7162:	fb 01       	movw	r30, r22
    7164:	23 81       	ldd	r18, Z+3	; 0x03
    7166:	21 fd       	sbrc	r18, 1
    7168:	03 c0       	rjmp	.+6      	; 0x7170 <fputc+0x16>
    716a:	8f ef       	ldi	r24, 0xFF	; 255
    716c:	9f ef       	ldi	r25, 0xFF	; 255
    716e:	2c c0       	rjmp	.+88     	; 0x71c8 <fputc+0x6e>
    7170:	22 ff       	sbrs	r18, 2
    7172:	16 c0       	rjmp	.+44     	; 0x71a0 <fputc+0x46>
    7174:	46 81       	ldd	r20, Z+6	; 0x06
    7176:	57 81       	ldd	r21, Z+7	; 0x07
    7178:	24 81       	ldd	r18, Z+4	; 0x04
    717a:	35 81       	ldd	r19, Z+5	; 0x05
    717c:	42 17       	cp	r20, r18
    717e:	53 07       	cpc	r21, r19
    7180:	44 f4       	brge	.+16     	; 0x7192 <fputc+0x38>
    7182:	a0 81       	ld	r26, Z
    7184:	b1 81       	ldd	r27, Z+1	; 0x01
    7186:	9d 01       	movw	r18, r26
    7188:	2f 5f       	subi	r18, 0xFF	; 255
    718a:	3f 4f       	sbci	r19, 0xFF	; 255
    718c:	31 83       	std	Z+1, r19	; 0x01
    718e:	20 83       	st	Z, r18
    7190:	8c 93       	st	X, r24
    7192:	26 81       	ldd	r18, Z+6	; 0x06
    7194:	37 81       	ldd	r19, Z+7	; 0x07
    7196:	2f 5f       	subi	r18, 0xFF	; 255
    7198:	3f 4f       	sbci	r19, 0xFF	; 255
    719a:	37 83       	std	Z+7, r19	; 0x07
    719c:	26 83       	std	Z+6, r18	; 0x06
    719e:	14 c0       	rjmp	.+40     	; 0x71c8 <fputc+0x6e>
    71a0:	8b 01       	movw	r16, r22
    71a2:	ec 01       	movw	r28, r24
    71a4:	fb 01       	movw	r30, r22
    71a6:	00 84       	ldd	r0, Z+8	; 0x08
    71a8:	f1 85       	ldd	r31, Z+9	; 0x09
    71aa:	e0 2d       	mov	r30, r0
    71ac:	19 95       	eicall
    71ae:	89 2b       	or	r24, r25
    71b0:	e1 f6       	brne	.-72     	; 0x716a <fputc+0x10>
    71b2:	d8 01       	movw	r26, r16
    71b4:	16 96       	adiw	r26, 0x06	; 6
    71b6:	8d 91       	ld	r24, X+
    71b8:	9c 91       	ld	r25, X
    71ba:	17 97       	sbiw	r26, 0x07	; 7
    71bc:	01 96       	adiw	r24, 0x01	; 1
    71be:	17 96       	adiw	r26, 0x07	; 7
    71c0:	9c 93       	st	X, r25
    71c2:	8e 93       	st	-X, r24
    71c4:	16 97       	sbiw	r26, 0x06	; 6
    71c6:	ce 01       	movw	r24, r28
    71c8:	df 91       	pop	r29
    71ca:	cf 91       	pop	r28
    71cc:	1f 91       	pop	r17
    71ce:	0f 91       	pop	r16
    71d0:	08 95       	ret

000071d2 <printf>:
    71d2:	cf 93       	push	r28
    71d4:	df 93       	push	r29
    71d6:	cd b7       	in	r28, 0x3d	; 61
    71d8:	de b7       	in	r29, 0x3e	; 62
    71da:	ae 01       	movw	r20, r28
    71dc:	4a 5f       	subi	r20, 0xFA	; 250
    71de:	5f 4f       	sbci	r21, 0xFF	; 255
    71e0:	fa 01       	movw	r30, r20
    71e2:	61 91       	ld	r22, Z+
    71e4:	71 91       	ld	r23, Z+
    71e6:	af 01       	movw	r20, r30
    71e8:	80 91 1f 16 	lds	r24, 0x161F	; 0x80161f <__iob+0x2>
    71ec:	90 91 20 16 	lds	r25, 0x1620	; 0x801620 <__iob+0x3>
    71f0:	90 d8       	rcall	.-3808   	; 0x6312 <vfprintf>
    71f2:	df 91       	pop	r29
    71f4:	cf 91       	pop	r28
    71f6:	08 95       	ret

000071f8 <puts>:
    71f8:	0f 93       	push	r16
    71fa:	1f 93       	push	r17
    71fc:	cf 93       	push	r28
    71fe:	df 93       	push	r29
    7200:	e0 91 1f 16 	lds	r30, 0x161F	; 0x80161f <__iob+0x2>
    7204:	f0 91 20 16 	lds	r31, 0x1620	; 0x801620 <__iob+0x3>
    7208:	23 81       	ldd	r18, Z+3	; 0x03
    720a:	21 ff       	sbrs	r18, 1
    720c:	1b c0       	rjmp	.+54     	; 0x7244 <puts+0x4c>
    720e:	8c 01       	movw	r16, r24
    7210:	d0 e0       	ldi	r29, 0x00	; 0
    7212:	c0 e0       	ldi	r28, 0x00	; 0
    7214:	f8 01       	movw	r30, r16
    7216:	81 91       	ld	r24, Z+
    7218:	8f 01       	movw	r16, r30
    721a:	60 91 1f 16 	lds	r22, 0x161F	; 0x80161f <__iob+0x2>
    721e:	70 91 20 16 	lds	r23, 0x1620	; 0x801620 <__iob+0x3>
    7222:	db 01       	movw	r26, r22
    7224:	18 96       	adiw	r26, 0x08	; 8
    7226:	ed 91       	ld	r30, X+
    7228:	fc 91       	ld	r31, X
    722a:	19 97       	sbiw	r26, 0x09	; 9
    722c:	88 23       	and	r24, r24
    722e:	31 f0       	breq	.+12     	; 0x723c <puts+0x44>
    7230:	19 95       	eicall
    7232:	89 2b       	or	r24, r25
    7234:	79 f3       	breq	.-34     	; 0x7214 <puts+0x1c>
    7236:	df ef       	ldi	r29, 0xFF	; 255
    7238:	cf ef       	ldi	r28, 0xFF	; 255
    723a:	ec cf       	rjmp	.-40     	; 0x7214 <puts+0x1c>
    723c:	8a e0       	ldi	r24, 0x0A	; 10
    723e:	19 95       	eicall
    7240:	89 2b       	or	r24, r25
    7242:	19 f0       	breq	.+6      	; 0x724a <puts+0x52>
    7244:	8f ef       	ldi	r24, 0xFF	; 255
    7246:	9f ef       	ldi	r25, 0xFF	; 255
    7248:	02 c0       	rjmp	.+4      	; 0x724e <puts+0x56>
    724a:	8d 2f       	mov	r24, r29
    724c:	9c 2f       	mov	r25, r28
    724e:	df 91       	pop	r29
    7250:	cf 91       	pop	r28
    7252:	1f 91       	pop	r17
    7254:	0f 91       	pop	r16
    7256:	08 95       	ret

00007258 <sprintf>:
    7258:	0f 93       	push	r16
    725a:	1f 93       	push	r17
    725c:	cf 93       	push	r28
    725e:	df 93       	push	r29
    7260:	cd b7       	in	r28, 0x3d	; 61
    7262:	de b7       	in	r29, 0x3e	; 62
    7264:	2e 97       	sbiw	r28, 0x0e	; 14
    7266:	0f b6       	in	r0, 0x3f	; 63
    7268:	f8 94       	cli
    726a:	de bf       	out	0x3e, r29	; 62
    726c:	0f be       	out	0x3f, r0	; 63
    726e:	cd bf       	out	0x3d, r28	; 61
    7270:	0e 89       	ldd	r16, Y+22	; 0x16
    7272:	1f 89       	ldd	r17, Y+23	; 0x17
    7274:	86 e0       	ldi	r24, 0x06	; 6
    7276:	8c 83       	std	Y+4, r24	; 0x04
    7278:	1a 83       	std	Y+2, r17	; 0x02
    727a:	09 83       	std	Y+1, r16	; 0x01
    727c:	8f ef       	ldi	r24, 0xFF	; 255
    727e:	9f e7       	ldi	r25, 0x7F	; 127
    7280:	9e 83       	std	Y+6, r25	; 0x06
    7282:	8d 83       	std	Y+5, r24	; 0x05
    7284:	ae 01       	movw	r20, r28
    7286:	46 5e       	subi	r20, 0xE6	; 230
    7288:	5f 4f       	sbci	r21, 0xFF	; 255
    728a:	68 8d       	ldd	r22, Y+24	; 0x18
    728c:	79 8d       	ldd	r23, Y+25	; 0x19
    728e:	ce 01       	movw	r24, r28
    7290:	01 96       	adiw	r24, 0x01	; 1
    7292:	3f d8       	rcall	.-3970   	; 0x6312 <vfprintf>
    7294:	ef 81       	ldd	r30, Y+7	; 0x07
    7296:	f8 85       	ldd	r31, Y+8	; 0x08
    7298:	e0 0f       	add	r30, r16
    729a:	f1 1f       	adc	r31, r17
    729c:	10 82       	st	Z, r1
    729e:	2e 96       	adiw	r28, 0x0e	; 14
    72a0:	0f b6       	in	r0, 0x3f	; 63
    72a2:	f8 94       	cli
    72a4:	de bf       	out	0x3e, r29	; 62
    72a6:	0f be       	out	0x3f, r0	; 63
    72a8:	cd bf       	out	0x3d, r28	; 61
    72aa:	df 91       	pop	r29
    72ac:	cf 91       	pop	r28
    72ae:	1f 91       	pop	r17
    72b0:	0f 91       	pop	r16
    72b2:	08 95       	ret

000072b4 <vprintf>:
    72b4:	ab 01       	movw	r20, r22
    72b6:	bc 01       	movw	r22, r24
    72b8:	80 91 1f 16 	lds	r24, 0x161F	; 0x80161f <__iob+0x2>
    72bc:	90 91 20 16 	lds	r25, 0x1620	; 0x801620 <__iob+0x3>
    72c0:	28 c8       	rjmp	.-4016   	; 0x6312 <vfprintf>

000072c2 <__ultoa_invert>:
    72c2:	fa 01       	movw	r30, r20
    72c4:	aa 27       	eor	r26, r26
    72c6:	28 30       	cpi	r18, 0x08	; 8
    72c8:	51 f1       	breq	.+84     	; 0x731e <__ultoa_invert+0x5c>
    72ca:	20 31       	cpi	r18, 0x10	; 16
    72cc:	81 f1       	breq	.+96     	; 0x732e <__ultoa_invert+0x6c>
    72ce:	e8 94       	clt
    72d0:	6f 93       	push	r22
    72d2:	6e 7f       	andi	r22, 0xFE	; 254
    72d4:	6e 5f       	subi	r22, 0xFE	; 254
    72d6:	7f 4f       	sbci	r23, 0xFF	; 255
    72d8:	8f 4f       	sbci	r24, 0xFF	; 255
    72da:	9f 4f       	sbci	r25, 0xFF	; 255
    72dc:	af 4f       	sbci	r26, 0xFF	; 255
    72de:	b1 e0       	ldi	r27, 0x01	; 1
    72e0:	3e d0       	rcall	.+124    	; 0x735e <__ultoa_invert+0x9c>
    72e2:	b4 e0       	ldi	r27, 0x04	; 4
    72e4:	3c d0       	rcall	.+120    	; 0x735e <__ultoa_invert+0x9c>
    72e6:	67 0f       	add	r22, r23
    72e8:	78 1f       	adc	r23, r24
    72ea:	89 1f       	adc	r24, r25
    72ec:	9a 1f       	adc	r25, r26
    72ee:	a1 1d       	adc	r26, r1
    72f0:	68 0f       	add	r22, r24
    72f2:	79 1f       	adc	r23, r25
    72f4:	8a 1f       	adc	r24, r26
    72f6:	91 1d       	adc	r25, r1
    72f8:	a1 1d       	adc	r26, r1
    72fa:	6a 0f       	add	r22, r26
    72fc:	71 1d       	adc	r23, r1
    72fe:	81 1d       	adc	r24, r1
    7300:	91 1d       	adc	r25, r1
    7302:	a1 1d       	adc	r26, r1
    7304:	20 d0       	rcall	.+64     	; 0x7346 <__ultoa_invert+0x84>
    7306:	09 f4       	brne	.+2      	; 0x730a <__ultoa_invert+0x48>
    7308:	68 94       	set
    730a:	3f 91       	pop	r19
    730c:	2a e0       	ldi	r18, 0x0A	; 10
    730e:	26 9f       	mul	r18, r22
    7310:	11 24       	eor	r1, r1
    7312:	30 19       	sub	r19, r0
    7314:	30 5d       	subi	r19, 0xD0	; 208
    7316:	31 93       	st	Z+, r19
    7318:	de f6       	brtc	.-74     	; 0x72d0 <__ultoa_invert+0xe>
    731a:	cf 01       	movw	r24, r30
    731c:	08 95       	ret
    731e:	46 2f       	mov	r20, r22
    7320:	47 70       	andi	r20, 0x07	; 7
    7322:	40 5d       	subi	r20, 0xD0	; 208
    7324:	41 93       	st	Z+, r20
    7326:	b3 e0       	ldi	r27, 0x03	; 3
    7328:	0f d0       	rcall	.+30     	; 0x7348 <__ultoa_invert+0x86>
    732a:	c9 f7       	brne	.-14     	; 0x731e <__ultoa_invert+0x5c>
    732c:	f6 cf       	rjmp	.-20     	; 0x731a <__ultoa_invert+0x58>
    732e:	46 2f       	mov	r20, r22
    7330:	4f 70       	andi	r20, 0x0F	; 15
    7332:	40 5d       	subi	r20, 0xD0	; 208
    7334:	4a 33       	cpi	r20, 0x3A	; 58
    7336:	18 f0       	brcs	.+6      	; 0x733e <__ultoa_invert+0x7c>
    7338:	49 5d       	subi	r20, 0xD9	; 217
    733a:	31 fd       	sbrc	r19, 1
    733c:	40 52       	subi	r20, 0x20	; 32
    733e:	41 93       	st	Z+, r20
    7340:	02 d0       	rcall	.+4      	; 0x7346 <__ultoa_invert+0x84>
    7342:	a9 f7       	brne	.-22     	; 0x732e <__ultoa_invert+0x6c>
    7344:	ea cf       	rjmp	.-44     	; 0x731a <__ultoa_invert+0x58>
    7346:	b4 e0       	ldi	r27, 0x04	; 4
    7348:	a6 95       	lsr	r26
    734a:	97 95       	ror	r25
    734c:	87 95       	ror	r24
    734e:	77 95       	ror	r23
    7350:	67 95       	ror	r22
    7352:	ba 95       	dec	r27
    7354:	c9 f7       	brne	.-14     	; 0x7348 <__ultoa_invert+0x86>
    7356:	00 97       	sbiw	r24, 0x00	; 0
    7358:	61 05       	cpc	r22, r1
    735a:	71 05       	cpc	r23, r1
    735c:	08 95       	ret
    735e:	9b 01       	movw	r18, r22
    7360:	ac 01       	movw	r20, r24
    7362:	0a 2e       	mov	r0, r26
    7364:	06 94       	lsr	r0
    7366:	57 95       	ror	r21
    7368:	47 95       	ror	r20
    736a:	37 95       	ror	r19
    736c:	27 95       	ror	r18
    736e:	ba 95       	dec	r27
    7370:	c9 f7       	brne	.-14     	; 0x7364 <__ultoa_invert+0xa2>
    7372:	62 0f       	add	r22, r18
    7374:	73 1f       	adc	r23, r19
    7376:	84 1f       	adc	r24, r20
    7378:	95 1f       	adc	r25, r21
    737a:	a0 1d       	adc	r26, r0
    737c:	08 95       	ret

0000737e <_exit>:
    737e:	f8 94       	cli

00007380 <__stop_program>:
    7380:	ff cf       	rjmp	.-2      	; 0x7380 <__stop_program>
