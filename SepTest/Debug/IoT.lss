
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004b4  00800200  0000617e  00006212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000617e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bf1  008006b4  008006b4  000066c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000066c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000990  00000000  00000000  00006764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c487  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eb9  00000000  00000000  0001357b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f45  00000000  00000000  00016434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023f8  00000000  00000000  0001c37c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d53  00000000  00000000  0001e774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bba5  00000000  00000000  000224c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  0002e06c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b4 c7       	rjmp	.+3944   	; 0xf9a <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__vector_25>
      68:	0c 94 6c 24 	jmp	0x48d8	; 0x48d8 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__vector_36>
      94:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9a 27 	jmp	0x4f34	; 0x4f34 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 46 25 	jmp	0x4a8c	; 0x4a8c <__vector_51>
      d0:	0c 94 98 25 	jmp	0x4b30	; 0x4b30 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <__vector_54>
      dc:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e4 1b       	sub	r30, r20
      e6:	e4 1b       	sub	r30, r20
      e8:	e4 1b       	sub	r30, r20
      ea:	1b 1c       	adc	r1, r11
      ec:	23 1c       	adc	r2, r3
      ee:	38 1c       	adc	r3, r8
      f0:	e4 1b       	sub	r30, r20
      f2:	e4 1b       	sub	r30, r20
      f4:	1b 1c       	adc	r1, r11
      f6:	23 1c       	adc	r2, r3
      f8:	bc 27       	eor	r27, r28
      fa:	2c 28       	or	r2, r12
      fc:	2c 28       	or	r2, r12
      fe:	2c 28       	or	r2, r12
     100:	2c 28       	or	r2, r12
     102:	2c 28       	or	r2, r12
     104:	2c 28       	or	r2, r12
     106:	2c 28       	or	r2, r12
     108:	bc 27       	eor	r27, r28
     10a:	2c 28       	or	r2, r12
     10c:	2c 28       	or	r2, r12
     10e:	2c 28       	or	r2, r12
     110:	2c 28       	or	r2, r12
     112:	2c 28       	or	r2, r12
     114:	2c 28       	or	r2, r12
     116:	2c 28       	or	r2, r12
     118:	be 27       	eor	r27, r30
     11a:	2c 28       	or	r2, r12
     11c:	2c 28       	or	r2, r12
     11e:	2c 28       	or	r2, r12
     120:	2c 28       	or	r2, r12
     122:	2c 28       	or	r2, r12
     124:	2c 28       	or	r2, r12
     126:	2c 28       	or	r2, r12
     128:	2c 28       	or	r2, r12
     12a:	2c 28       	or	r2, r12
     12c:	2c 28       	or	r2, r12
     12e:	2c 28       	or	r2, r12
     130:	2c 28       	or	r2, r12
     132:	2c 28       	or	r2, r12
     134:	2c 28       	or	r2, r12
     136:	2c 28       	or	r2, r12
     138:	be 27       	eor	r27, r30
     13a:	2c 28       	or	r2, r12
     13c:	2c 28       	or	r2, r12
     13e:	2c 28       	or	r2, r12
     140:	2c 28       	or	r2, r12
     142:	2c 28       	or	r2, r12
     144:	2c 28       	or	r2, r12
     146:	2c 28       	or	r2, r12
     148:	2c 28       	or	r2, r12
     14a:	2c 28       	or	r2, r12
     14c:	2c 28       	or	r2, r12
     14e:	2c 28       	or	r2, r12
     150:	2c 28       	or	r2, r12
     152:	2c 28       	or	r2, r12
     154:	2c 28       	or	r2, r12
     156:	2c 28       	or	r2, r12
     158:	28 28       	or	r2, r8
     15a:	2c 28       	or	r2, r12
     15c:	2c 28       	or	r2, r12
     15e:	2c 28       	or	r2, r12
     160:	2c 28       	or	r2, r12
     162:	2c 28       	or	r2, r12
     164:	2c 28       	or	r2, r12
     166:	2c 28       	or	r2, r12
     168:	f3 27       	eor	r31, r19
     16a:	2c 28       	or	r2, r12
     16c:	2c 28       	or	r2, r12
     16e:	2c 28       	or	r2, r12
     170:	2c 28       	or	r2, r12
     172:	2c 28       	or	r2, r12
     174:	2c 28       	or	r2, r12
     176:	2c 28       	or	r2, r12
     178:	2c 28       	or	r2, r12
     17a:	2c 28       	or	r2, r12
     17c:	2c 28       	or	r2, r12
     17e:	2c 28       	or	r2, r12
     180:	2c 28       	or	r2, r12
     182:	2c 28       	or	r2, r12
     184:	2c 28       	or	r2, r12
     186:	2c 28       	or	r2, r12
     188:	e7 27       	eor	r30, r23
     18a:	2c 28       	or	r2, r12
     18c:	2c 28       	or	r2, r12
     18e:	2c 28       	or	r2, r12
     190:	2c 28       	or	r2, r12
     192:	2c 28       	or	r2, r12
     194:	2c 28       	or	r2, r12
     196:	2c 28       	or	r2, r12
     198:	0b 28       	or	r0, r11

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <prvCheckTasksWaitingTermination>
     2a0:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	b2 d5       	rcall	.+2916   	; 0xe0e <vPortYield>
     2aa:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 61 19 	call	0x32c2	; 0x32c2 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 56 1b 	call	0x36ac	; 0x36ac <prvProcessTimerOrBlockTask>
     2c8:	0e 94 ad 1b 	call	0x375a	; 0x375a <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	16 e0       	ldi	r17, 0x06	; 6
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ee e7       	ldi	r30, 0x7E	; 126
     2e6:	f1 e6       	ldi	r31, 0x61	; 97
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a4 3b       	cpi	r26, 0xB4	; 180
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	22 e1       	ldi	r18, 0x12	; 18
     2fa:	a4 eb       	ldi	r26, 0xB4	; 180
     2fc:	b6 e0       	ldi	r27, 0x06	; 6
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a5 3a       	cpi	r26, 0xA5	; 165
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 c8 1c 	call	0x3990	; 0x3990 <main>
     30c:	0c 94 bd 30 	jmp	0x617a	; 0x617a <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <measureTemp>:
		
		measureTemp((Temperature_t) self);
	}
}

void measureTemp(Temperature_t self){
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     318:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <hih8120_getTemperature>
     31c:	26 2f       	mov	r18, r22
     31e:	37 2f       	mov	r19, r23
     320:	46 2f       	mov	r20, r22
     322:	57 2f       	mov	r21, r23
     324:	68 2f       	mov	r22, r24
     326:	79 2f       	mov	r23, r25
     328:	48 83       	st	Y, r20
     32a:	59 83       	std	Y+1, r21	; 0x01
     32c:	6a 83       	std	Y+2, r22	; 0x02
     32e:	7b 83       	std	Y+3, r23	; 0x03
	printf("%f \n", self->temperature);
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	3f 93       	push	r19
     336:	2f 93       	push	r18
     338:	82 e4       	ldi	r24, 0x42	; 66
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>
}
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <startReading>:
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}

void startReading(void* self){
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	00 d0       	rcall	.+0      	; 0x35c <startReading+0x6>
     35c:	1f 92       	push	r1
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     364:	0e 94 77 10 	call	0x20ee	; 0x20ee <xTaskGetTickCount>
     368:	69 83       	std	Y+1, r22	; 0x01
     36a:	7a 83       	std	Y+2, r23	; 0x02
     36c:	8b 83       	std	Y+3, r24	; 0x03
     36e:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     370:	42 ea       	ldi	r20, 0xA2	; 162
     372:	53 e0       	ldi	r21, 0x03	; 3
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	ce 01       	movw	r24, r28
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     380:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <hih8120_wakeup>
     384:	88 23       	and	r24, r24
     386:	21 f0       	breq	.+8      	; 0x390 <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     388:	87 e4       	ldi	r24, 0x47	; 71
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	0e 94 01 30 	call	0x6002	; 0x6002 <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     390:	40 91 8f 12 	lds	r20, 0x128F	; 0x80128f <ready_bit>
     394:	50 91 90 12 	lds	r21, 0x1290	; 0x801290 <ready_bit+0x1>
     398:	60 91 91 12 	lds	r22, 0x1291	; 0x801291 <ready_bit+0x2>
     39c:	70 91 92 12 	lds	r23, 0x1292	; 0x801292 <ready_bit+0x3>
     3a0:	cc 24       	eor	r12, r12
     3a2:	ca 94       	dec	r12
     3a4:	dc 2c       	mov	r13, r12
     3a6:	76 01       	movw	r14, r12
     3a8:	01 e0       	ldi	r16, 0x01	; 1
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	80 91 93 12 	lds	r24, 0x1293	; 0x801293 <group_start>
     3b0:	90 91 94 12 	lds	r25, 0x1294	; 0x801294 <group_start+0x1>
     3b4:	d7 d1       	rcall	.+942    	; 0x764 <xEventGroupWaitBits>
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     3b6:	64 e0       	ldi	r22, 0x04	; 4
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     3c2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	cb 01       	movw	r24, r22
     3cc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskDelay>
		
		measureTemp((Temperature_t) self);
     3d0:	c5 01       	movw	r24, r10
     3d2:	9f df       	rcall	.-194    	; 0x312 <measureTemp>
	}
     3d4:	cd cf       	rjmp	.-102    	; 0x370 <startReading+0x1a>

000003d6 <temperature_handler_init>:
void measureTemp(Temperature_t self){
	self->temperature = hih8120_getTemperature();
	printf("%f \n", self->temperature);
}

void temperature_handler_init(Temperature_t self, uint16_t priority){
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	ec 01       	movw	r28, r24
     3e2:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     3e4:	40 91 8f 12 	lds	r20, 0x128F	; 0x80128f <ready_bit>
     3e8:	50 91 90 12 	lds	r21, 0x1290	; 0x801290 <ready_bit+0x1>
     3ec:	60 91 91 12 	lds	r22, 0x1291	; 0x801291 <ready_bit+0x2>
     3f0:	70 91 92 12 	lds	r23, 0x1292	; 0x801292 <ready_bit+0x3>
     3f4:	80 91 93 12 	lds	r24, 0x1293	; 0x801293 <group_start>
     3f8:	90 91 94 12 	lds	r25, 0x1294	; 0x801294 <group_start+0x1>
     3fc:	53 d2       	rcall	.+1190   	; 0x8a4 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     3fe:	e1 2c       	mov	r14, r1
     400:	f1 2c       	mov	r15, r1
     402:	9e 01       	movw	r18, r28
     404:	40 ec       	ldi	r20, 0xC0	; 192
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	61 e6       	ldi	r22, 0x61	; 97
     40a:	72 e0       	ldi	r23, 0x02	; 2
     40c:	8b ea       	ldi	r24, 0xAB	; 171
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <xTaskCreate>
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	08 95       	ret

00000420 <createTemp>:
typedef struct TemperatureHandler{
	float temperature;
	} TemperatureHandler;
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     420:	af 92       	push	r10
     422:	bf 92       	push	r11
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	5b 01       	movw	r10, r22
     438:	69 01       	movw	r12, r18
     43a:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     43c:	84 e0       	ldi	r24, 0x04	; 4
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <malloc>
     444:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     446:	89 2b       	or	r24, r25
     448:	f1 f0       	breq	.+60     	; 0x486 <createTemp+0x66>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     44a:	18 82       	st	Y, r1
     44c:	19 82       	std	Y+1, r1	; 0x01
     44e:	1a 82       	std	Y+2, r1	; 0x02
     450:	1b 82       	std	Y+3, r1	; 0x03
	
	group_start = taskBits;
     452:	b0 92 94 12 	sts	0x1294, r11	; 0x801294 <group_start+0x1>
     456:	a0 92 93 12 	sts	0x1293, r10	; 0x801293 <group_start>
	ready_bit = bit;
     45a:	c0 92 8f 12 	sts	0x128F, r12	; 0x80128f <ready_bit>
     45e:	d0 92 90 12 	sts	0x1290, r13	; 0x801290 <ready_bit+0x1>
     462:	e0 92 91 12 	sts	0x1291, r14	; 0x801291 <ready_bit+0x2>
     466:	f0 92 92 12 	sts	0x1292, r15	; 0x801292 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     46a:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <hih8120_initialise>
     46e:	81 11       	cpse	r24, r1
     470:	04 c0       	rjmp	.+8      	; 0x47a <createTemp+0x5a>
	{
		puts("Temp sensor initialized.");
     472:	82 e7       	ldi	r24, 0x72	; 114
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	0e 94 01 30 	call	0x6002	; 0x6002 <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     47a:	b8 01       	movw	r22, r16
     47c:	ce 01       	movw	r24, r28
     47e:	ab df       	rcall	.-170    	; 0x3d6 <temperature_handler_init>
	return new_measure;
     480:	8c 2f       	mov	r24, r28
     482:	9d 2f       	mov	r25, r29
     484:	02 c0       	rjmp	.+4      	; 0x48a <createTemp+0x6a>
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	df 90       	pop	r13
     498:	cf 90       	pop	r12
     49a:	bf 90       	pop	r11
     49c:	af 90       	pop	r10
     49e:	08 95       	ret

000004a0 <getTemperature>:
	xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
}

float getTemperature(Temperature_t self){
	return self->temperature;
     4a0:	fc 01       	movw	r30, r24
     4a2:	60 81       	ld	r22, Z
     4a4:	71 81       	ldd	r23, Z+1	; 0x01
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	08 95       	ret

000004ac <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	64 97       	sbiw	r28, 0x14	; 20
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	//status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     4c4:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <lora_driver_rn2483FactoryReset>
     4c8:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	8b e8       	ldi	r24, 0x8B	; 139
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     4dc:	0e 94 56 21 	call	0x42ac	; 0x42ac <lora_driver_configureToEu868>
     4e0:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	8e e9       	ldi	r24, 0x9E	; 158
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
     4f0:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     4f4:	8e 01       	movw	r16, r28
     4f6:	0f 5f       	subi	r16, 0xFF	; 255
     4f8:	1f 4f       	sbci	r17, 0xFF	; 255
     4fa:	c8 01       	movw	r24, r16
     4fc:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     500:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     504:	1f 93       	push	r17
     506:	0f 93       	push	r16
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	87 eb       	ldi	r24, 0xB7	; 183
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     518:	c8 01       	movw	r24, r16
     51a:	0e 94 06 20 	call	0x400c	; 0x400c <lora_driver_setDeviceIdentifier>
     51e:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	1f 93       	push	r17
     528:	0f 93       	push	r16
     52a:	8b ec       	ldi	r24, 0xCB	; 203
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     536:	a8 01       	movw	r20, r16
     538:	60 ee       	ldi	r22, 0xE0	; 224
     53a:	72 e0       	ldi	r23, 0x02	; 2
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	93 e0       	ldi	r25, 0x03	; 3
     540:	0e 94 34 22 	call	0x4468	; 0x4468 <lora_driver_setOtaaIdentity>
     544:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	1f 93       	push	r17
     54e:	0f 93       	push	r16
     550:	80 ee       	ldi	r24, 0xE0	; 224
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	82 e1       	ldi	r24, 0x12	; 18
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     56c:	0e 94 39 20 	call	0x4072	; 0x4072 <lora_driver_saveMac>
     570:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	88 e4       	ldi	r24, 0x48	; 72
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 33 21 	call	0x4266	; 0x4266 <lora_driver_setAdaptiveDataRate>
     594:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     598:	9f 93       	push	r25
     59a:	8f 93       	push	r24
     59c:	87 e5       	ldi	r24, 0x57	; 87
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     5a8:	84 ef       	ldi	r24, 0xF4	; 244
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 3e 21 	call	0x427c	; 0x427c <lora_driver_setReceiveDelay>
     5b0:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	8f 93       	push	r24
     5bc:	84 ef       	ldi	r24, 0xF4	; 244
     5be:	8f 93       	push	r24
     5c0:	88 e7       	ldi	r24, 0x78	; 120
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     5d6:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 3f 20 	call	0x407e	; 0x407e <lora_driver_join>
     5de:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     5e0:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	1f 92       	push	r1
     5ea:	1f 93       	push	r17
     5ec:	88 e9       	ldi	r24, 0x98	; 152
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>

		if ( rc != LORA_ACCEPTED)
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	08 30       	cpi	r16, 0x08	; 8
     606:	41 f0       	breq	.+16     	; 0x618 <_lora_setup+0x16c>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     608:	66 e3       	ldi	r22, 0x36	; 54
     60a:	71 e0       	ldi	r23, 0x01	; 1
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     614:	11 50       	subi	r17, 0x01	; 1
     616:	01 f7       	brne	.-64     	; 0x5d8 <_lora_setup+0x12c>

	if (rc == LORA_ACCEPTED)
     618:	08 30       	cpi	r16, 0x08	; 8
     61a:	11 f0       	breq	.+4      	; 0x620 <_lora_setup+0x174>
		//status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     61c:	f8 d3       	rcall	.+2032   	; 0xe0e <vPortYield>
     61e:	fe cf       	rjmp	.-4      	; 0x61c <_lora_setup+0x170>
		}
	}
}
     620:	64 96       	adiw	r28, 0x14	; 20
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <lora_handler_task>:

void lora_handler_task(){
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	1f 92       	push	r1
     640:	1f 92       	push	r1
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lora_driver_resetRn2483>
	vTaskDelay(2);
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskDelay>
	lora_driver_resetRn2483(0);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     65e:	66 e9       	ldi	r22, 0x96	; 150
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     66a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <lora_driver_flushBuffers>

	_lora_setup();
     66e:	1e df       	rcall	.-452    	; 0x4ac <_lora_setup>
	
	
	_uplink_payload.len = 2;
     670:	04 eb       	ldi	r16, 0xB4	; 180
     672:	16 e0       	ldi	r17, 0x06	; 6
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	f8 01       	movw	r30, r16
     678:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 1;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 83       	st	Z, r24
	
	lora_driver_payload_t downlinkPayload;

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     67e:	0e 94 77 10 	call	0x20ee	; 0x20ee <xTaskGetTickCount>
	
	float temp = getTemperature(temperature);
     682:	80 91 95 12 	lds	r24, 0x1295	; 0x801295 <temperature>
     686:	90 91 96 12 	lds	r25, 0x1296	; 0x801296 <temperature+0x1>
     68a:	0a df       	rcall	.-492    	; 0x4a0 <getTemperature>
	int val1, val2;
	
	val2 = modf(temp, &val1);
     68c:	ae 01       	movw	r20, r28
     68e:	4f 5f       	subi	r20, 0xFF	; 255
     690:	5f 4f       	sbci	r21, 0xFF	; 255
     692:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <modf>
     696:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__fixsfsi>
	
	_uplink_payload.bytes[0] = val1;
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	f8 01       	movw	r30, r16
     69e:	82 83       	std	Z+2, r24	; 0x02
	_uplink_payload.bytes[1] = val2;
     6a0:	63 83       	std	Z+3, r22	; 0x03
	
	printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     6a2:	b8 01       	movw	r22, r16
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 68 20 	call	0x40d0	; 0x40d0 <lora_driver_sendUploadMessage>
     6aa:	0e 94 55 22 	call	0x44aa	; 0x44aa <lora_driver_mapReturnCodeToText>
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	88 eb       	ldi	r24, 0xB8	; 184
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <printf>
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;


void lora_handler_task();

void lora_handler_initialize(uint16_t lora_handler_task_priority, Temperature_t temperature){
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
	
	temperature = temperature;

	xTaskCreate(
     6da:	e1 2c       	mov	r14, r1
     6dc:	f1 2c       	mov	r15, r1
     6de:	08 2f       	mov	r16, r24
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	48 e8       	ldi	r20, 0x88	; 136
     6e6:	51 e0       	ldi	r21, 0x01	; 1
     6e8:	6d ec       	ldi	r22, 0xCD	; 205
     6ea:	73 e0       	ldi	r23, 0x03	; 3
     6ec:	8b e1       	ldi	r24, 0x1B	; 27
     6ee:	93 e0       	ldi	r25, 0x03	; 3
     6f0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	08 95       	ret

000006fc <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     6fc:	0f 93       	push	r16
     6fe:	01 11       	cpse	r16, r1
     700:	0c c0       	rjmp	.+24     	; 0x71a <prvTestWaitCondition+0x1e>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	82 23       	and	r24, r18
     708:	93 23       	and	r25, r19
     70a:	a4 23       	and	r26, r20
     70c:	b5 23       	and	r27, r21
     70e:	89 2b       	or	r24, r25
     710:	8a 2b       	or	r24, r26
     712:	8b 2b       	or	r24, r27
     714:	79 f4       	brne	.+30     	; 0x734 <prvTestWaitCondition+0x38>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	10 c0       	rjmp	.+32     	; 0x73a <prvTestWaitCondition+0x3e>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	82 23       	and	r24, r18
     720:	93 23       	and	r25, r19
     722:	a4 23       	and	r26, r20
     724:	b5 23       	and	r27, r21
     726:	28 17       	cp	r18, r24
     728:	39 07       	cpc	r19, r25
     72a:	4a 07       	cpc	r20, r26
     72c:	5b 07       	cpc	r21, r27
     72e:	21 f0       	breq	.+8      	; 0x738 <prvTestWaitCondition+0x3c>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	03 c0       	rjmp	.+6      	; 0x73a <prvTestWaitCondition+0x3e>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	01 c0       	rjmp	.+2      	; 0x73a <prvTestWaitCondition+0x3e>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0f 91       	pop	r16
     73c:	08 95       	ret

0000073e <xEventGroupCreate>:
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	8f e0       	ldi	r24, 0x0F	; 15
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	af d1       	rcall	.+862    	; 0xaa6 <pvPortMalloc>
     748:	ec 01       	movw	r28, r24
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	39 f0       	breq	.+14     	; 0x75c <xEventGroupCreate+0x1e>
     74e:	fc 01       	movw	r30, r24
     750:	11 92       	st	Z+, r1
     752:	11 92       	st	Z+, r1
     754:	11 92       	st	Z+, r1
     756:	11 92       	st	Z+, r1
     758:	cf 01       	movw	r24, r30
     75a:	8b d2       	rcall	.+1302   	; 0xc72 <vListInitialise>
     75c:	ce 01       	movw	r24, r28
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <xEventGroupWaitBits>:
     764:	2f 92       	push	r2
     766:	3f 92       	push	r3
     768:	4f 92       	push	r4
     76a:	5f 92       	push	r5
     76c:	6f 92       	push	r6
     76e:	7f 92       	push	r7
     770:	8f 92       	push	r8
     772:	9f 92       	push	r9
     774:	af 92       	push	r10
     776:	bf 92       	push	r11
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
     78a:	4a 01       	movw	r8, r20
     78c:	5b 01       	movw	r10, r22
     78e:	62 2e       	mov	r6, r18
     790:	70 2e       	mov	r7, r16
     792:	0e 94 71 10 	call	0x20e2	; 0x20e2 <vTaskSuspendAll>
     796:	28 80       	ld	r2, Y
     798:	39 80       	ldd	r3, Y+1	; 0x01
     79a:	4a 80       	ldd	r4, Y+2	; 0x02
     79c:	5b 80       	ldd	r5, Y+3	; 0x03
     79e:	a5 01       	movw	r20, r10
     7a0:	94 01       	movw	r18, r8
     7a2:	c2 01       	movw	r24, r4
     7a4:	b1 01       	movw	r22, r2
     7a6:	aa df       	rcall	.-172    	; 0x6fc <prvTestWaitCondition>
     7a8:	88 23       	and	r24, r24
     7aa:	a1 f0       	breq	.+40     	; 0x7d4 <xEventGroupWaitBits+0x70>
     7ac:	66 20       	and	r6, r6
     7ae:	89 f1       	breq	.+98     	; 0x812 <xEventGroupWaitBits+0xae>
     7b0:	d5 01       	movw	r26, r10
     7b2:	c4 01       	movw	r24, r8
     7b4:	80 95       	com	r24
     7b6:	90 95       	com	r25
     7b8:	a0 95       	com	r26
     7ba:	b0 95       	com	r27
     7bc:	82 21       	and	r24, r2
     7be:	93 21       	and	r25, r3
     7c0:	a4 21       	and	r26, r4
     7c2:	b5 21       	and	r27, r5
     7c4:	88 83       	st	Y, r24
     7c6:	99 83       	std	Y+1, r25	; 0x01
     7c8:	aa 83       	std	Y+2, r26	; 0x02
     7ca:	bb 83       	std	Y+3, r27	; 0x03
     7cc:	c1 2c       	mov	r12, r1
     7ce:	d1 2c       	mov	r13, r1
     7d0:	76 01       	movw	r14, r12
     7d2:	22 c0       	rjmp	.+68     	; 0x818 <xEventGroupWaitBits+0xb4>
     7d4:	c1 14       	cp	r12, r1
     7d6:	d1 04       	cpc	r13, r1
     7d8:	e1 04       	cpc	r14, r1
     7da:	f1 04       	cpc	r15, r1
     7dc:	e9 f0       	breq	.+58     	; 0x818 <xEventGroupWaitBits+0xb4>
     7de:	61 10       	cpse	r6, r1
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <xEventGroupWaitBits+0x86>
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	ba 01       	movw	r22, r20
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <xEventGroupWaitBits+0x8e>
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	71 10       	cpse	r7, r1
     7f4:	74 60       	ori	r23, 0x04	; 4
     7f6:	48 29       	or	r20, r8
     7f8:	59 29       	or	r21, r9
     7fa:	6a 29       	or	r22, r10
     7fc:	7b 29       	or	r23, r11
     7fe:	97 01       	movw	r18, r14
     800:	86 01       	movw	r16, r12
     802:	ce 01       	movw	r24, r28
     804:	04 96       	adiw	r24, 0x04	; 4
     806:	0e 94 89 13 	call	0x2712	; 0x2712 <vTaskPlaceOnUnorderedEventList>
     80a:	21 2c       	mov	r2, r1
     80c:	31 2c       	mov	r3, r1
     80e:	21 01       	movw	r4, r2
     810:	03 c0       	rjmp	.+6      	; 0x818 <xEventGroupWaitBits+0xb4>
     812:	c1 2c       	mov	r12, r1
     814:	d1 2c       	mov	r13, r1
     816:	76 01       	movw	r14, r12
     818:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
     81c:	cd 28       	or	r12, r13
     81e:	ce 28       	or	r12, r14
     820:	cf 28       	or	r12, r15
     822:	59 f1       	breq	.+86     	; 0x87a <xEventGroupWaitBits+0x116>
     824:	81 11       	cpse	r24, r1
     826:	01 c0       	rjmp	.+2      	; 0x82a <xEventGroupWaitBits+0xc6>
     828:	f2 d2       	rcall	.+1508   	; 0xe0e <vPortYield>
     82a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <uxTaskResetEventItemValue>
     82e:	6b 01       	movw	r12, r22
     830:	7c 01       	movw	r14, r24
     832:	91 fd       	sbrc	r25, 1
     834:	1f c0       	rjmp	.+62     	; 0x874 <xEventGroupWaitBits+0x110>
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	0f 92       	push	r0
     83c:	c8 80       	ld	r12, Y
     83e:	d9 80       	ldd	r13, Y+1	; 0x01
     840:	ea 80       	ldd	r14, Y+2	; 0x02
     842:	fb 80       	ldd	r15, Y+3	; 0x03
     844:	07 2d       	mov	r16, r7
     846:	a5 01       	movw	r20, r10
     848:	94 01       	movw	r18, r8
     84a:	c7 01       	movw	r24, r14
     84c:	b6 01       	movw	r22, r12
     84e:	56 df       	rcall	.-340    	; 0x6fc <prvTestWaitCondition>
     850:	88 23       	and	r24, r24
     852:	71 f0       	breq	.+28     	; 0x870 <xEventGroupWaitBits+0x10c>
     854:	66 20       	and	r6, r6
     856:	61 f0       	breq	.+24     	; 0x870 <xEventGroupWaitBits+0x10c>
     858:	80 94       	com	r8
     85a:	90 94       	com	r9
     85c:	a0 94       	com	r10
     85e:	b0 94       	com	r11
     860:	8c 20       	and	r8, r12
     862:	9d 20       	and	r9, r13
     864:	ae 20       	and	r10, r14
     866:	bf 20       	and	r11, r15
     868:	88 82       	st	Y, r8
     86a:	99 82       	std	Y+1, r9	; 0x01
     86c:	aa 82       	std	Y+2, r10	; 0x02
     86e:	bb 82       	std	Y+3, r11	; 0x03
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	16 01       	movw	r2, r12
     876:	27 01       	movw	r4, r14
     878:	55 24       	eor	r5, r5
     87a:	c2 01       	movw	r24, r4
     87c:	b1 01       	movw	r22, r2
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	7f 90       	pop	r7
     898:	6f 90       	pop	r6
     89a:	5f 90       	pop	r5
     89c:	4f 90       	pop	r4
     89e:	3f 90       	pop	r3
     8a0:	2f 90       	pop	r2
     8a2:	08 95       	ret

000008a4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     8a4:	4f 92       	push	r4
     8a6:	5f 92       	push	r5
     8a8:	6f 92       	push	r6
     8aa:	7f 92       	push	r7
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
     8c2:	6a 01       	movw	r12, r20
     8c4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8c6:	8c 01       	movw	r16, r24
     8c8:	09 5f       	subi	r16, 0xF9	; 249
     8ca:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     8cc:	0e 94 71 10 	call	0x20e2	; 0x20e2 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     8d0:	eb 85       	ldd	r30, Y+11	; 0x0b
     8d2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     8d4:	88 81       	ld	r24, Y
     8d6:	99 81       	ldd	r25, Y+1	; 0x01
     8d8:	aa 81       	ldd	r26, Y+2	; 0x02
     8da:	bb 81       	ldd	r27, Y+3	; 0x03
     8dc:	c8 2a       	or	r12, r24
     8de:	d9 2a       	or	r13, r25
     8e0:	ea 2a       	or	r14, r26
     8e2:	fb 2a       	or	r15, r27
     8e4:	c8 82       	st	Y, r12
     8e6:	d9 82       	std	Y+1, r13	; 0x01
     8e8:	ea 82       	std	Y+2, r14	; 0x02
     8ea:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8f2:	3d c0       	rjmp	.+122    	; 0x96e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     8f4:	a4 80       	ldd	r10, Z+4	; 0x04
     8f6:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	a2 81       	ldd	r26, Z+2	; 0x02
     8fe:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     900:	ac 01       	movw	r20, r24
     902:	bd 01       	movw	r22, r26
     904:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     906:	b2 fd       	sbrc	r27, 2
     908:	0e c0       	rjmp	.+28     	; 0x926 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     90a:	48 80       	ld	r4, Y
     90c:	59 80       	ldd	r5, Y+1	; 0x01
     90e:	6a 80       	ldd	r6, Y+2	; 0x02
     910:	7b 80       	ldd	r7, Y+3	; 0x03
     912:	44 22       	and	r4, r20
     914:	55 22       	and	r5, r21
     916:	66 22       	and	r6, r22
     918:	77 22       	and	r7, r23
     91a:	45 28       	or	r4, r5
     91c:	46 28       	or	r4, r6
     91e:	47 28       	or	r4, r7
     920:	89 f4       	brne	.+34     	; 0x944 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	12 c0       	rjmp	.+36     	; 0x94a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     926:	48 80       	ld	r4, Y
     928:	59 80       	ldd	r5, Y+1	; 0x01
     92a:	6a 80       	ldd	r6, Y+2	; 0x02
     92c:	7b 80       	ldd	r7, Y+3	; 0x03
     92e:	44 22       	and	r4, r20
     930:	55 22       	and	r5, r21
     932:	66 22       	and	r6, r22
     934:	77 22       	and	r7, r23
     936:	44 15       	cp	r20, r4
     938:	55 05       	cpc	r21, r5
     93a:	66 05       	cpc	r22, r6
     93c:	77 05       	cpc	r23, r7
     93e:	21 f0       	breq	.+8      	; 0x948 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	03 c0       	rjmp	.+6      	; 0x94a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	01 c0       	rjmp	.+2      	; 0x94a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     948:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     94a:	22 23       	and	r18, r18
     94c:	71 f0       	breq	.+28     	; 0x96a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     94e:	b0 ff       	sbrs	r27, 0
     950:	04 c0       	rjmp	.+8      	; 0x95a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     952:	c4 2a       	or	r12, r20
     954:	d5 2a       	or	r13, r21
     956:	e6 2a       	or	r14, r22
     958:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     95a:	48 81       	ld	r20, Y
     95c:	59 81       	ldd	r21, Y+1	; 0x01
     95e:	6a 81       	ldd	r22, Y+2	; 0x02
     960:	7b 81       	ldd	r23, Y+3	; 0x03
     962:	72 60       	ori	r23, 0x02	; 2
     964:	cf 01       	movw	r24, r30
     966:	0e 94 c4 14 	call	0x2988	; 0x2988 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     96a:	ea 2d       	mov	r30, r10
     96c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     96e:	e0 17       	cp	r30, r16
     970:	f1 07       	cpc	r31, r17
     972:	09 f0       	breq	.+2      	; 0x976 <xEventGroupSetBits+0xd2>
     974:	bf cf       	rjmp	.-130    	; 0x8f4 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     976:	c0 94       	com	r12
     978:	d0 94       	com	r13
     97a:	e0 94       	com	r14
     97c:	f0 94       	com	r15
     97e:	88 81       	ld	r24, Y
     980:	99 81       	ldd	r25, Y+1	; 0x01
     982:	aa 81       	ldd	r26, Y+2	; 0x02
     984:	bb 81       	ldd	r27, Y+3	; 0x03
     986:	c8 22       	and	r12, r24
     988:	d9 22       	and	r13, r25
     98a:	ea 22       	and	r14, r26
     98c:	fb 22       	and	r15, r27
     98e:	c8 82       	st	Y, r12
     990:	d9 82       	std	Y+1, r13	; 0x01
     992:	ea 82       	std	Y+2, r14	; 0x02
     994:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     996:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     99a:	68 81       	ld	r22, Y
     99c:	79 81       	ldd	r23, Y+1	; 0x01
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	7f 90       	pop	r7
     9b8:	6f 90       	pop	r6
     9ba:	5f 90       	pop	r5
     9bc:	4f 90       	pop	r4
     9be:	08 95       	ret

000009c0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     9c0:	e6 ed       	ldi	r30, 0xD6	; 214
     9c2:	f6 e0       	ldi	r31, 0x06	; 6
     9c4:	aa ed       	ldi	r26, 0xDA	; 218
     9c6:	b6 e0       	ldi	r27, 0x06	; 6
     9c8:	b1 83       	std	Z+1, r27	; 0x01
     9ca:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     9cc:	13 82       	std	Z+3, r1	; 0x03
     9ce:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     9d0:	ea e9       	ldi	r30, 0x9A	; 154
     9d2:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     9d4:	f0 93 d5 06 	sts	0x06D5, r31	; 0x8006d5 <pxEnd+0x1>
     9d8:	e0 93 d4 06 	sts	0x06D4, r30	; 0x8006d4 <pxEnd>
    pxEnd->xBlockSize = 0;
     9dc:	13 82       	std	Z+3, r1	; 0x03
     9de:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     9e0:	11 82       	std	Z+1, r1	; 0x01
     9e2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     9e4:	80 ec       	ldi	r24, 0xC0	; 192
     9e6:	99 e0       	ldi	r25, 0x09	; 9
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	9c 93       	st	X, r25
     9ec:	8e 93       	st	-X, r24
     9ee:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     9f0:	ed 93       	st	X+, r30
     9f2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9f4:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <xMinimumEverFreeBytesRemaining+0x1>
     9f8:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     9fc:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <xFreeBytesRemaining+0x1>
     a00:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e8       	ldi	r25, 0x80	; 128
     a08:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <xBlockAllocatedBit+0x1>
     a0c:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <xBlockAllocatedBit>
     a10:	08 95       	ret

00000a12 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     a18:	a6 ed       	ldi	r26, 0xD6	; 214
     a1a:	b6 e0       	ldi	r27, 0x06	; 6
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <prvInsertBlockIntoFreeList+0xe>
     a1e:	df 01       	movw	r26, r30
     a20:	ed 91       	ld	r30, X+
     a22:	fc 91       	ld	r31, X
     a24:	11 97       	sbiw	r26, 0x01	; 1
     a26:	ec 17       	cp	r30, r28
     a28:	fd 07       	cpc	r31, r29
     a2a:	c8 f3       	brcs	.-14     	; 0xa1e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	8d 91       	ld	r24, X+
     a30:	9c 91       	ld	r25, X
     a32:	13 97       	sbiw	r26, 0x03	; 3
     a34:	9d 01       	movw	r18, r26
     a36:	28 0f       	add	r18, r24
     a38:	39 1f       	adc	r19, r25
     a3a:	c2 17       	cp	r28, r18
     a3c:	d3 07       	cpc	r29, r19
     a3e:	49 f4       	brne	.+18     	; 0xa52 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     a40:	2a 81       	ldd	r18, Y+2	; 0x02
     a42:	3b 81       	ldd	r19, Y+3	; 0x03
     a44:	82 0f       	add	r24, r18
     a46:	93 1f       	adc	r25, r19
     a48:	13 96       	adiw	r26, 0x03	; 3
     a4a:	9c 93       	st	X, r25
     a4c:	8e 93       	st	-X, r24
     a4e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     a50:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	9b 81       	ldd	r25, Y+3	; 0x03
     a56:	9e 01       	movw	r18, r28
     a58:	28 0f       	add	r18, r24
     a5a:	39 1f       	adc	r19, r25
     a5c:	e2 17       	cp	r30, r18
     a5e:	f3 07       	cpc	r31, r19
     a60:	c1 f4       	brne	.+48     	; 0xa92 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a62:	20 91 d4 06 	lds	r18, 0x06D4	; 0x8006d4 <pxEnd>
     a66:	30 91 d5 06 	lds	r19, 0x06D5	; 0x8006d5 <pxEnd+0x1>
     a6a:	e2 17       	cp	r30, r18
     a6c:	f3 07       	cpc	r31, r19
     a6e:	71 f0       	breq	.+28     	; 0xa8c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a70:	22 81       	ldd	r18, Z+2	; 0x02
     a72:	33 81       	ldd	r19, Z+3	; 0x03
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
     a78:	9b 83       	std	Y+3, r25	; 0x03
     a7a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	11 97       	sbiw	r26, 0x01	; 1
     a82:	80 81       	ld	r24, Z
     a84:	91 81       	ldd	r25, Z+1	; 0x01
     a86:	99 83       	std	Y+1, r25	; 0x01
     a88:	88 83       	st	Y, r24
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a8c:	39 83       	std	Y+1, r19	; 0x01
     a8e:	28 83       	st	Y, r18
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a92:	f9 83       	std	Y+1, r31	; 0x01
     a94:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     a96:	ca 17       	cp	r28, r26
     a98:	db 07       	cpc	r29, r27
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a9c:	cd 93       	st	X+, r28
     a9e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     ab4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     ab8:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <pxEnd>
     abc:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <pxEnd+0x1>
     ac0:	89 2b       	or	r24, r25
     ac2:	09 f4       	brne	.+2      	; 0xac6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     ac4:	7d df       	rcall	.-262    	; 0x9c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ac6:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <xBlockAllocatedBit>
     aca:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <xBlockAllocatedBit+0x1>
     ace:	80 23       	and	r24, r16
     ad0:	91 23       	and	r25, r17
     ad2:	89 2b       	or	r24, r25
     ad4:	09 f0       	breq	.+2      	; 0xad8 <pvPortMalloc+0x32>
     ad6:	76 c0       	rjmp	.+236    	; 0xbc4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     ad8:	01 15       	cp	r16, r1
     ada:	11 05       	cpc	r17, r1
     adc:	49 f0       	breq	.+18     	; 0xaf0 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     ade:	c8 01       	movw	r24, r16
     ae0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     ae2:	08 17       	cp	r16, r24
     ae4:	19 07       	cpc	r17, r25
     ae6:	18 f0       	brcs	.+6      	; 0xaee <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     ae8:	00 e0       	ldi	r16, 0x00	; 0
     aea:	10 e0       	ldi	r17, 0x00	; 0
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     aee:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     af0:	01 15       	cp	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	09 f4       	brne	.+2      	; 0xaf8 <pvPortMalloc+0x52>
     af6:	69 c0       	rjmp	.+210    	; 0xbca <pvPortMalloc+0x124>
     af8:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <xFreeBytesRemaining>
     afc:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <xFreeBytesRemaining+0x1>
     b00:	80 17       	cp	r24, r16
     b02:	91 07       	cpc	r25, r17
     b04:	08 f4       	brcc	.+2      	; 0xb08 <pvPortMalloc+0x62>
     b06:	64 c0       	rjmp	.+200    	; 0xbd0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     b08:	c0 91 d6 06 	lds	r28, 0x06D6	; 0x8006d6 <xStart>
     b0c:	d0 91 d7 06 	lds	r29, 0x06D7	; 0x8006d7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     b10:	e6 ed       	ldi	r30, 0xD6	; 214
     b12:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     b16:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     b18:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	80 17       	cp	r24, r16
     b20:	91 07       	cpc	r25, r17
     b22:	20 f4       	brcc	.+8      	; 0xb2c <pvPortMalloc+0x86>
     b24:	88 81       	ld	r24, Y
     b26:	99 81       	ldd	r25, Y+1	; 0x01
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	a9 f7       	brne	.-22     	; 0xb16 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     b2c:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <pxEnd>
     b30:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <pxEnd+0x1>
     b34:	c8 17       	cp	r28, r24
     b36:	d9 07       	cpc	r29, r25
     b38:	09 f4       	brne	.+2      	; 0xb3c <pvPortMalloc+0x96>
     b3a:	4d c0       	rjmp	.+154    	; 0xbd6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     b3c:	e0 80       	ld	r14, Z
     b3e:	f1 80       	ldd	r15, Z+1	; 0x01
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	e8 0e       	add	r14, r24
     b44:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     b46:	88 81       	ld	r24, Y
     b48:	99 81       	ldd	r25, Y+1	; 0x01
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     b4e:	2a 81       	ldd	r18, Y+2	; 0x02
     b50:	3b 81       	ldd	r19, Y+3	; 0x03
     b52:	20 1b       	sub	r18, r16
     b54:	31 0b       	sbc	r19, r17
     b56:	29 30       	cpi	r18, 0x09	; 9
     b58:	31 05       	cpc	r19, r1
     b5a:	48 f0       	brcs	.+18     	; 0xb6e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b5c:	ce 01       	movw	r24, r28
     b5e:	80 0f       	add	r24, r16
     b60:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b62:	fc 01       	movw	r30, r24
     b64:	33 83       	std	Z+3, r19	; 0x03
     b66:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     b68:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     b6a:	0a 83       	std	Y+2, r16	; 0x02
     b6c:	52 df       	rcall	.-348    	; 0xa12 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     b6e:	2a 81       	ldd	r18, Y+2	; 0x02
     b70:	3b 81       	ldd	r19, Y+3	; 0x03
     b72:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <xFreeBytesRemaining>
     b76:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <xFreeBytesRemaining+0x1>
     b7a:	82 1b       	sub	r24, r18
     b7c:	93 0b       	sbc	r25, r19
     b7e:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <xFreeBytesRemaining+0x1>
     b82:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b86:	40 91 d0 06 	lds	r20, 0x06D0	; 0x8006d0 <xMinimumEverFreeBytesRemaining>
     b8a:	50 91 d1 06 	lds	r21, 0x06D1	; 0x8006d1 <xMinimumEverFreeBytesRemaining+0x1>
     b8e:	84 17       	cp	r24, r20
     b90:	95 07       	cpc	r25, r21
     b92:	20 f4       	brcc	.+8      	; 0xb9c <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b94:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <xMinimumEverFreeBytesRemaining+0x1>
     b98:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     b9c:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <xBlockAllocatedBit>
     ba0:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <xBlockAllocatedBit+0x1>
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	3b 83       	std	Y+3, r19	; 0x03
     baa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     bac:	19 82       	std	Y+1, r1	; 0x01
     bae:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     bb0:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <xNumberOfSuccessfulAllocations>
     bb4:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <xNumberOfSuccessfulAllocations+0x1>
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <xNumberOfSuccessfulAllocations+0x1>
     bbe:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <xNumberOfSuccessfulAllocations>
     bc2:	0b c0       	rjmp	.+22     	; 0xbda <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     bc4:	e1 2c       	mov	r14, r1
     bc6:	f1 2c       	mov	r15, r1
     bc8:	08 c0       	rjmp	.+16     	; 0xbda <pvPortMalloc+0x134>
     bca:	e1 2c       	mov	r14, r1
     bcc:	f1 2c       	mov	r15, r1
     bce:	05 c0       	rjmp	.+10     	; 0xbda <pvPortMalloc+0x134>
     bd0:	e1 2c       	mov	r14, r1
     bd2:	f1 2c       	mov	r15, r1
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <pvPortMalloc+0x134>
     bd6:	e1 2c       	mov	r14, r1
     bd8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     bda:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	11 f4       	brne	.+4      	; 0xbe8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     be4:	0e 94 6d 1c 	call	0x38da	; 0x38da <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     be8:	c7 01       	movw	r24, r14
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	08 95       	ret

00000bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	91 f1       	breq	.+100    	; 0xc68 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     c04:	ec 01       	movw	r28, r24
     c06:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     c08:	4a 81       	ldd	r20, Y+2	; 0x02
     c0a:	5b 81       	ldd	r21, Y+3	; 0x03
     c0c:	20 91 ca 06 	lds	r18, 0x06CA	; 0x8006ca <xBlockAllocatedBit>
     c10:	30 91 cb 06 	lds	r19, 0x06CB	; 0x8006cb <xBlockAllocatedBit+0x1>
     c14:	ba 01       	movw	r22, r20
     c16:	62 23       	and	r22, r18
     c18:	73 23       	and	r23, r19
     c1a:	67 2b       	or	r22, r23
     c1c:	29 f1       	breq	.+74     	; 0xc68 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     c1e:	68 81       	ld	r22, Y
     c20:	79 81       	ldd	r23, Y+1	; 0x01
     c22:	67 2b       	or	r22, r23
     c24:	09 f5       	brne	.+66     	; 0xc68 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     c26:	20 95       	com	r18
     c28:	30 95       	com	r19
     c2a:	24 23       	and	r18, r20
     c2c:	35 23       	and	r19, r21
     c2e:	3b 83       	std	Y+3, r19	; 0x03
     c30:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     c32:	0e 94 71 10 	call	0x20e2	; 0x20e2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	9b 81       	ldd	r25, Y+3	; 0x03
     c3a:	20 91 d2 06 	lds	r18, 0x06D2	; 0x8006d2 <xFreeBytesRemaining>
     c3e:	30 91 d3 06 	lds	r19, 0x06D3	; 0x8006d3 <xFreeBytesRemaining+0x1>
     c42:	82 0f       	add	r24, r18
     c44:	93 1f       	adc	r25, r19
     c46:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <xFreeBytesRemaining+0x1>
     c4a:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     c4e:	ce 01       	movw	r24, r28
     c50:	e0 de       	rcall	.-576    	; 0xa12 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     c52:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <xNumberOfSuccessfulFrees>
     c56:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <xNumberOfSuccessfulFrees+0x1>
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	90 93 cd 06 	sts	0x06CD, r25	; 0x8006cd <xNumberOfSuccessfulFrees+0x1>
     c60:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     c64:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     c72:	fc 01       	movw	r30, r24
     c74:	03 96       	adiw	r24, 0x03	; 3
     c76:	92 83       	std	Z+2, r25	; 0x02
     c78:	81 83       	std	Z+1, r24	; 0x01
     c7a:	4f ef       	ldi	r20, 0xFF	; 255
     c7c:	5f ef       	ldi	r21, 0xFF	; 255
     c7e:	ba 01       	movw	r22, r20
     c80:	43 83       	std	Z+3, r20	; 0x03
     c82:	54 83       	std	Z+4, r21	; 0x04
     c84:	65 83       	std	Z+5, r22	; 0x05
     c86:	76 83       	std	Z+6, r23	; 0x06
     c88:	90 87       	std	Z+8, r25	; 0x08
     c8a:	87 83       	std	Z+7, r24	; 0x07
     c8c:	92 87       	std	Z+10, r25	; 0x0a
     c8e:	81 87       	std	Z+9, r24	; 0x09
     c90:	10 82       	st	Z, r1
     c92:	08 95       	ret

00000c94 <vListInitialiseItem>:
     c94:	fc 01       	movw	r30, r24
     c96:	13 86       	std	Z+11, r1	; 0x0b
     c98:	12 86       	std	Z+10, r1	; 0x0a
     c9a:	08 95       	ret

00000c9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ca6:	08 81       	ld	r16, Y
     ca8:	19 81       	ldd	r17, Y+1	; 0x01
     caa:	2a 81       	ldd	r18, Y+2	; 0x02
     cac:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     cae:	0f 3f       	cpi	r16, 0xFF	; 255
     cb0:	4f ef       	ldi	r20, 0xFF	; 255
     cb2:	14 07       	cpc	r17, r20
     cb4:	24 07       	cpc	r18, r20
     cb6:	34 07       	cpc	r19, r20
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     cba:	fc 01       	movw	r30, r24
     cbc:	a1 85       	ldd	r26, Z+9	; 0x09
     cbe:	b2 85       	ldd	r27, Z+10	; 0x0a
     cc0:	11 c0       	rjmp	.+34     	; 0xce4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     cc2:	dc 01       	movw	r26, r24
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <vListInsert+0x2e>
     cc8:	df 01       	movw	r26, r30
     cca:	14 96       	adiw	r26, 0x04	; 4
     ccc:	ed 91       	ld	r30, X+
     cce:	fc 91       	ld	r31, X
     cd0:	15 97       	sbiw	r26, 0x05	; 5
     cd2:	40 81       	ld	r20, Z
     cd4:	51 81       	ldd	r21, Z+1	; 0x01
     cd6:	62 81       	ldd	r22, Z+2	; 0x02
     cd8:	73 81       	ldd	r23, Z+3	; 0x03
     cda:	04 17       	cp	r16, r20
     cdc:	15 07       	cpc	r17, r21
     cde:	26 07       	cpc	r18, r22
     ce0:	37 07       	cpc	r19, r23
     ce2:	90 f7       	brcc	.-28     	; 0xcc8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     ce4:	14 96       	adiw	r26, 0x04	; 4
     ce6:	ed 91       	ld	r30, X+
     ce8:	fc 91       	ld	r31, X
     cea:	15 97       	sbiw	r26, 0x05	; 5
     cec:	fd 83       	std	Y+5, r31	; 0x05
     cee:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cf0:	d7 83       	std	Z+7, r29	; 0x07
     cf2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     cf4:	bf 83       	std	Y+7, r27	; 0x07
     cf6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     cf8:	15 96       	adiw	r26, 0x05	; 5
     cfa:	dc 93       	st	X, r29
     cfc:	ce 93       	st	-X, r28
     cfe:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     d00:	9b 87       	std	Y+11, r25	; 0x0b
     d02:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     d04:	fc 01       	movw	r30, r24
     d06:	20 81       	ld	r18, Z
     d08:	2f 5f       	subi	r18, 0xFF	; 255
     d0a:	20 83       	st	Z, r18
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     d1c:	a2 85       	ldd	r26, Z+10	; 0x0a
     d1e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d20:	c4 81       	ldd	r28, Z+4	; 0x04
     d22:	d5 81       	ldd	r29, Z+5	; 0x05
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	97 81       	ldd	r25, Z+7	; 0x07
     d28:	9f 83       	std	Y+7, r25	; 0x07
     d2a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d2c:	c6 81       	ldd	r28, Z+6	; 0x06
     d2e:	d7 81       	ldd	r29, Z+7	; 0x07
     d30:	84 81       	ldd	r24, Z+4	; 0x04
     d32:	95 81       	ldd	r25, Z+5	; 0x05
     d34:	9d 83       	std	Y+5, r25	; 0x05
     d36:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	8d 91       	ld	r24, X+
     d3c:	9c 91       	ld	r25, X
     d3e:	12 97       	sbiw	r26, 0x02	; 2
     d40:	e8 17       	cp	r30, r24
     d42:	f9 07       	cpc	r31, r25
     d44:	31 f4       	brne	.+12     	; 0xd52 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     d46:	86 81       	ldd	r24, Z+6	; 0x06
     d48:	97 81       	ldd	r25, Z+7	; 0x07
     d4a:	12 96       	adiw	r26, 0x02	; 2
     d4c:	9c 93       	st	X, r25
     d4e:	8e 93       	st	-X, r24
     d50:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     d52:	13 86       	std	Z+11, r1	; 0x0b
     d54:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     d56:	8c 91       	ld	r24, X
     d58:	81 50       	subi	r24, 0x01	; 1
     d5a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d5c:	8c 91       	ld	r24, X
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     d64:	a8 95       	wdr
     d66:	90 ec       	ldi	r25, 0xC0	; 192
     d68:	88 e1       	ldi	r24, 0x18	; 24
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	a8 95       	wdr
     d70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     d7a:	08 95       	ret

00000d7c <pxPortInitialiseStack>:
     d7c:	fc 01       	movw	r30, r24
     d7e:	60 83       	st	Z, r22
     d80:	31 97       	sbiw	r30, 0x01	; 1
     d82:	70 83       	st	Z, r23
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	10 82       	st	Z, r1
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	10 82       	st	Z, r1
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	20 e8       	ldi	r18, 0x80	; 128
     d90:	20 83       	st	Z, r18
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	10 82       	st	Z, r1
     d96:	31 97       	sbiw	r30, 0x01	; 1
     d98:	10 82       	st	Z, r1
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	10 82       	st	Z, r1
     d9e:	77 97       	sbiw	r30, 0x17	; 23
     da0:	40 83       	st	Z, r20
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	50 83       	st	Z, r21
     da6:	86 97       	sbiw	r24, 0x26	; 38
     da8:	08 95       	ret

00000daa <xPortStartScheduler>:
     daa:	dc df       	rcall	.-72     	; 0xd64 <prvSetupTimerInterrupt>
     dac:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     db0:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     db4:	cd 91       	ld	r28, X+
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	dd 91       	ld	r29, X+
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	7f 90       	pop	r7
     dee:	6f 90       	pop	r6
     df0:	5f 90       	pop	r5
     df2:	4f 90       	pop	r4
     df4:	3f 90       	pop	r3
     df6:	2f 90       	pop	r2
     df8:	1f 90       	pop	r1
     dfa:	0f 90       	pop	r0
     dfc:	0c be       	out	0x3c, r0	; 60
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	08 95       	ret
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	08 95       	ret

00000e0e <vPortYield>:
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	0f 92       	push	r0
     e16:	0b b6       	in	r0, 0x3b	; 59
     e18:	0f 92       	push	r0
     e1a:	0c b6       	in	r0, 0x3c	; 60
     e1c:	0f 92       	push	r0
     e1e:	1f 92       	push	r1
     e20:	11 24       	eor	r1, r1
     e22:	2f 92       	push	r2
     e24:	3f 92       	push	r3
     e26:	4f 92       	push	r4
     e28:	5f 92       	push	r5
     e2a:	6f 92       	push	r6
     e2c:	7f 92       	push	r7
     e2e:	8f 92       	push	r8
     e30:	9f 92       	push	r9
     e32:	af 92       	push	r10
     e34:	bf 92       	push	r11
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
     e5e:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     e62:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     e66:	0d b6       	in	r0, 0x3d	; 61
     e68:	0d 92       	st	X+, r0
     e6a:	0e b6       	in	r0, 0x3e	; 62
     e6c:	0d 92       	st	X+, r0
     e6e:	0e 94 0d 13 	call	0x261a	; 0x261a <vTaskSwitchContext>
     e72:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     e76:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     e7a:	cd 91       	ld	r28, X+
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	dd 91       	ld	r29, X+
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	bf 90       	pop	r11
     eac:	af 90       	pop	r10
     eae:	9f 90       	pop	r9
     eb0:	8f 90       	pop	r8
     eb2:	7f 90       	pop	r7
     eb4:	6f 90       	pop	r6
     eb6:	5f 90       	pop	r5
     eb8:	4f 90       	pop	r4
     eba:	3f 90       	pop	r3
     ebc:	2f 90       	pop	r2
     ebe:	1f 90       	pop	r1
     ec0:	0f 90       	pop	r0
     ec2:	0c be       	out	0x3c, r0	; 60
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	08 95       	ret

00000ed0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	0f 92       	push	r0
     ed8:	0b b6       	in	r0, 0x3b	; 59
     eda:	0f 92       	push	r0
     edc:	0c b6       	in	r0, 0x3c	; 60
     ede:	0f 92       	push	r0
     ee0:	1f 92       	push	r1
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 92       	push	r2
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     f24:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     f28:	0d b6       	in	r0, 0x3d	; 61
     f2a:	0d 92       	st	X+, r0
     f2c:	0e b6       	in	r0, 0x3e	; 62
     f2e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     f30:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     f32:	0e 94 85 10 	call	0x210a	; 0x210a <xTaskIncrementTick>
     f36:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f38:	0e 94 0d 13 	call	0x261a	; 0x261a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     f3c:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     f40:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     f44:	cd 91       	ld	r28, X+
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	dd 91       	ld	r29, X+
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	7f 90       	pop	r7
     f7e:	6f 90       	pop	r6
     f80:	5f 90       	pop	r5
     f82:	4f 90       	pop	r4
     f84:	3f 90       	pop	r3
     f86:	2f 90       	pop	r2
     f88:	1f 90       	pop	r1
     f8a:	0f 90       	pop	r0
     f8c:	0c be       	out	0x3c, r0	; 60
     f8e:	0f 90       	pop	r0
     f90:	0b be       	out	0x3b, r0	; 59
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f98:	08 95       	ret

00000f9a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f9a:	9a df       	rcall	.-204    	; 0xed0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f9c:	18 95       	reti

00000f9e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	0f 92       	push	r0
     fa4:	fc 01       	movw	r30, r24
     fa6:	86 8d       	ldd	r24, Z+30	; 0x1e
     fa8:	81 11       	cpse	r24, r1
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <prvIsQueueEmpty+0x12>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <prvIsQueueEmpty+0x14>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	08 95       	ret

00000fb8 <prvIsQueueFull>:
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	0f 92       	push	r0
     fbe:	fc 01       	movw	r30, r24
     fc0:	26 8d       	ldd	r18, Z+30	; 0x1e
     fc2:	87 8d       	ldd	r24, Z+31	; 0x1f
     fc4:	28 13       	cpse	r18, r24
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <prvIsQueueFull+0x14>
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	01 c0       	rjmp	.+2      	; 0xfce <prvIsQueueFull+0x16>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	08 95       	ret

00000fd4 <prvCopyDataToQueue>:
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
     fde:	04 2f       	mov	r16, r20
     fe0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     fe2:	48 a1       	ldd	r20, Y+32	; 0x20
     fe4:	41 11       	cpse	r20, r1
     fe6:	0c c0       	rjmp	.+24     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fe8:	88 81       	ld	r24, Y
     fea:	99 81       	ldd	r25, Y+1	; 0x01
     fec:	89 2b       	or	r24, r25
     fee:	09 f0       	breq	.+2      	; 0xff2 <prvCopyDataToQueue+0x1e>
     ff0:	42 c0       	rjmp	.+132    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskPriorityDisinherit>
     ffa:	1d 82       	std	Y+5, r1	; 0x05
     ffc:	1c 82       	std	Y+4, r1	; 0x04
     ffe:	42 c0       	rjmp	.+132    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1000:	01 11       	cpse	r16, r1
    1002:	17 c0       	rjmp	.+46     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <memcpy>
    100e:	28 a1       	ldd	r18, Y+32	; 0x20
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	82 0f       	add	r24, r18
    1016:	91 1d       	adc	r25, r1
    1018:	9b 83       	std	Y+3, r25	; 0x03
    101a:	8a 83       	std	Y+2, r24	; 0x02
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	82 17       	cp	r24, r18
    1022:	93 07       	cpc	r25, r19
    1024:	50 f1       	brcs	.+84     	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1026:	88 81       	ld	r24, Y
    1028:	99 81       	ldd	r25, Y+1	; 0x01
    102a:	9b 83       	std	Y+3, r25	; 0x03
    102c:	8a 83       	std	Y+2, r24	; 0x02
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	29 c0       	rjmp	.+82     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	8e 81       	ldd	r24, Y+6	; 0x06
    1036:	9f 81       	ldd	r25, Y+7	; 0x07
    1038:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <memcpy>
    103c:	88 a1       	ldd	r24, Y+32	; 0x20
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	91 95       	neg	r25
    1042:	81 95       	neg	r24
    1044:	91 09       	sbc	r25, r1
    1046:	2e 81       	ldd	r18, Y+6	; 0x06
    1048:	3f 81       	ldd	r19, Y+7	; 0x07
    104a:	28 0f       	add	r18, r24
    104c:	39 1f       	adc	r19, r25
    104e:	3f 83       	std	Y+7, r19	; 0x07
    1050:	2e 83       	std	Y+6, r18	; 0x06
    1052:	48 81       	ld	r20, Y
    1054:	59 81       	ldd	r21, Y+1	; 0x01
    1056:	24 17       	cp	r18, r20
    1058:	35 07       	cpc	r19, r21
    105a:	30 f4       	brcc	.+12     	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	9f 83       	std	Y+7, r25	; 0x07
    1066:	8e 83       	std	Y+6, r24	; 0x06
    1068:	02 30       	cpi	r16, 0x02	; 2
    106a:	49 f4       	brne	.+18     	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
    106c:	11 23       	and	r17, r17
    106e:	49 f0       	breq	.+18     	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>
    1070:	11 50       	subi	r17, 0x01	; 1
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	1f 5f       	subi	r17, 0xFF	; 255
    1086:	1e 8f       	std	Y+30, r17	; 0x1e
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <prvCopyDataFromQueue>:
    1092:	fc 01       	movw	r30, r24
    1094:	40 a1       	ldd	r20, Z+32	; 0x20
    1096:	44 23       	and	r20, r20
    1098:	a9 f0       	breq	.+42     	; 0x10c4 <prvCopyDataFromQueue+0x32>
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	26 81       	ldd	r18, Z+6	; 0x06
    109e:	37 81       	ldd	r19, Z+7	; 0x07
    10a0:	24 0f       	add	r18, r20
    10a2:	35 1f       	adc	r19, r21
    10a4:	37 83       	std	Z+7, r19	; 0x07
    10a6:	26 83       	std	Z+6, r18	; 0x06
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	95 81       	ldd	r25, Z+5	; 0x05
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <prvCopyDataFromQueue+0x28>
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	97 83       	std	Z+7, r25	; 0x07
    10b8:	86 83       	std	Z+6, r24	; 0x06
    10ba:	cb 01       	movw	r24, r22
    10bc:	66 81       	ldd	r22, Z+6	; 0x06
    10be:	77 81       	ldd	r23, Z+7	; 0x07
    10c0:	0c 94 48 2f 	jmp	0x5e90	; 0x5e90 <memcpy>
    10c4:	08 95       	ret

000010c6 <prvUnlockQueue>:
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	0f 92       	push	r0
    10d4:	1a a1       	ldd	r17, Y+34	; 0x22
    10d6:	0b c0       	rjmp	.+22     	; 0x10ee <prvUnlockQueue+0x28>
    10d8:	8b 89       	ldd	r24, Y+19	; 0x13
    10da:	88 23       	and	r24, r24
    10dc:	51 f0       	breq	.+20     	; 0x10f2 <prvUnlockQueue+0x2c>
    10de:	ce 01       	movw	r24, r28
    10e0:	43 96       	adiw	r24, 0x13	; 19
    10e2:	0e 94 15 14 	call	0x282a	; 0x282a <xTaskRemoveFromEventList>
    10e6:	81 11       	cpse	r24, r1
    10e8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <vTaskMissedYield>
    10ec:	11 50       	subi	r17, 0x01	; 1
    10ee:	11 16       	cp	r1, r17
    10f0:	9c f3       	brlt	.-26     	; 0x10d8 <prvUnlockQueue+0x12>
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	8a a3       	std	Y+34, r24	; 0x22
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	0f 92       	push	r0
    1100:	19 a1       	ldd	r17, Y+33	; 0x21
    1102:	0b c0       	rjmp	.+22     	; 0x111a <prvUnlockQueue+0x54>
    1104:	88 85       	ldd	r24, Y+8	; 0x08
    1106:	88 23       	and	r24, r24
    1108:	51 f0       	breq	.+20     	; 0x111e <prvUnlockQueue+0x58>
    110a:	ce 01       	movw	r24, r28
    110c:	08 96       	adiw	r24, 0x08	; 8
    110e:	0e 94 15 14 	call	0x282a	; 0x282a <xTaskRemoveFromEventList>
    1112:	81 11       	cpse	r24, r1
    1114:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <vTaskMissedYield>
    1118:	11 50       	subi	r17, 0x01	; 1
    111a:	11 16       	cp	r1, r17
    111c:	9c f3       	brlt	.-26     	; 0x1104 <prvUnlockQueue+0x3e>
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	08 95       	ret

0000112e <xQueueGenericReset>:
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	0f 92       	push	r0
    113a:	e8 81       	ld	r30, Y
    113c:	f9 81       	ldd	r31, Y+1	; 0x01
    113e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1140:	28 a1       	ldd	r18, Y+32	; 0x20
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	82 9f       	mul	r24, r18
    1148:	a0 01       	movw	r20, r0
    114a:	83 9f       	mul	r24, r19
    114c:	50 0d       	add	r21, r0
    114e:	92 9f       	mul	r25, r18
    1150:	50 0d       	add	r21, r0
    1152:	11 24       	eor	r1, r1
    1154:	4e 0f       	add	r20, r30
    1156:	5f 1f       	adc	r21, r31
    1158:	5d 83       	std	Y+5, r21	; 0x05
    115a:	4c 83       	std	Y+4, r20	; 0x04
    115c:	1e 8e       	std	Y+30, r1	; 0x1e
    115e:	fb 83       	std	Y+3, r31	; 0x03
    1160:	ea 83       	std	Y+2, r30	; 0x02
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	28 9f       	mul	r18, r24
    1166:	a0 01       	movw	r20, r0
    1168:	29 9f       	mul	r18, r25
    116a:	50 0d       	add	r21, r0
    116c:	38 9f       	mul	r19, r24
    116e:	50 0d       	add	r21, r0
    1170:	11 24       	eor	r1, r1
    1172:	cf 01       	movw	r24, r30
    1174:	84 0f       	add	r24, r20
    1176:	95 1f       	adc	r25, r21
    1178:	9f 83       	std	Y+7, r25	; 0x07
    117a:	8e 83       	std	Y+6, r24	; 0x06
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	89 a3       	std	Y+33, r24	; 0x21
    1180:	8a a3       	std	Y+34, r24	; 0x22
    1182:	61 11       	cpse	r22, r1
    1184:	0b c0       	rjmp	.+22     	; 0x119c <xQueueGenericReset+0x6e>
    1186:	88 85       	ldd	r24, Y+8	; 0x08
    1188:	88 23       	and	r24, r24
    118a:	71 f0       	breq	.+28     	; 0x11a8 <xQueueGenericReset+0x7a>
    118c:	ce 01       	movw	r24, r28
    118e:	08 96       	adiw	r24, 0x08	; 8
    1190:	0e 94 15 14 	call	0x282a	; 0x282a <xTaskRemoveFromEventList>
    1194:	88 23       	and	r24, r24
    1196:	41 f0       	breq	.+16     	; 0x11a8 <xQueueGenericReset+0x7a>
    1198:	3a de       	rcall	.-908    	; 0xe0e <vPortYield>
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <xQueueGenericReset+0x7a>
    119c:	ce 01       	movw	r24, r28
    119e:	08 96       	adiw	r24, 0x08	; 8
    11a0:	68 dd       	rcall	.-1328   	; 0xc72 <vListInitialise>
    11a2:	ce 01       	movw	r24, r28
    11a4:	43 96       	adiw	r24, 0x13	; 19
    11a6:	65 dd       	rcall	.-1334   	; 0xc72 <vListInitialise>
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <prvInitialiseNewQueue>:
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	f8 01       	movw	r30, r16
    11ba:	61 11       	cpse	r22, r1
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <prvInitialiseNewQueue+0x10>
    11be:	11 83       	std	Z+1, r17	; 0x01
    11c0:	00 83       	st	Z, r16
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <prvInitialiseNewQueue+0x14>
    11c4:	51 83       	std	Z+1, r21	; 0x01
    11c6:	40 83       	st	Z, r20
    11c8:	87 8f       	std	Z+31, r24	; 0x1f
    11ca:	60 a3       	std	Z+32, r22	; 0x20
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	cf 01       	movw	r24, r30
    11d0:	ae df       	rcall	.-164    	; 0x112e <xQueueGenericReset>
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	08 95       	ret

000011d8 <xQueueGenericCreate>:
    11d8:	df 92       	push	r13
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	f8 2e       	mov	r15, r24
    11e8:	e6 2e       	mov	r14, r22
    11ea:	d4 2e       	mov	r13, r20
    11ec:	86 9f       	mul	r24, r22
    11ee:	c0 01       	movw	r24, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	83 96       	adiw	r24, 0x23	; 35
    11f4:	58 dc       	rcall	.-1872   	; 0xaa6 <pvPortMalloc>
    11f6:	ec 01       	movw	r28, r24
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	41 f0       	breq	.+16     	; 0x120c <xQueueGenericCreate+0x34>
    11fc:	8c 01       	movw	r16, r24
    11fe:	2d 2d       	mov	r18, r13
    1200:	ac 01       	movw	r20, r24
    1202:	4d 5d       	subi	r20, 0xDD	; 221
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	6e 2d       	mov	r22, r14
    1208:	8f 2d       	mov	r24, r15
    120a:	d4 df       	rcall	.-88     	; 0x11b4 <prvInitialiseNewQueue>
    120c:	ce 01       	movw	r24, r28
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	df 90       	pop	r13
    121c:	08 95       	ret

0000121e <xQueueGenericSend>:
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	29 97       	sbiw	r28, 0x09	; 9
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	7c 01       	movw	r14, r24
    1240:	6b 01       	movw	r12, r22
    1242:	2e 83       	std	Y+6, r18	; 0x06
    1244:	3f 83       	std	Y+7, r19	; 0x07
    1246:	48 87       	std	Y+8, r20	; 0x08
    1248:	59 87       	std	Y+9, r21	; 0x09
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	f7 01       	movw	r30, r14
    1254:	96 8d       	ldd	r25, Z+30	; 0x1e
    1256:	87 8d       	ldd	r24, Z+31	; 0x1f
    1258:	98 17       	cp	r25, r24
    125a:	10 f0       	brcs	.+4      	; 0x1260 <xQueueGenericSend+0x42>
    125c:	02 30       	cpi	r16, 0x02	; 2
    125e:	b1 f4       	brne	.+44     	; 0x128c <xQueueGenericSend+0x6e>
    1260:	40 2f       	mov	r20, r16
    1262:	b6 01       	movw	r22, r12
    1264:	c7 01       	movw	r24, r14
    1266:	b6 de       	rcall	.-660    	; 0xfd4 <prvCopyDataToQueue>
    1268:	f7 01       	movw	r30, r14
    126a:	93 89       	ldd	r25, Z+19	; 0x13
    126c:	99 23       	and	r25, r25
    126e:	41 f0       	breq	.+16     	; 0x1280 <xQueueGenericSend+0x62>
    1270:	c7 01       	movw	r24, r14
    1272:	43 96       	adiw	r24, 0x13	; 19
    1274:	0e 94 15 14 	call	0x282a	; 0x282a <xTaskRemoveFromEventList>
    1278:	88 23       	and	r24, r24
    127a:	21 f0       	breq	.+8      	; 0x1284 <xQueueGenericSend+0x66>
    127c:	c8 dd       	rcall	.-1136   	; 0xe0e <vPortYield>
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <xQueueGenericSend+0x66>
    1280:	81 11       	cpse	r24, r1
    1282:	c5 dd       	rcall	.-1142   	; 0xe0e <vPortYield>
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	4c c0       	rjmp	.+152    	; 0x1324 <xQueueGenericSend+0x106>
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	9f 81       	ldd	r25, Y+7	; 0x07
    1290:	a8 85       	ldd	r26, Y+8	; 0x08
    1292:	b9 85       	ldd	r27, Y+9	; 0x09
    1294:	89 2b       	or	r24, r25
    1296:	8a 2b       	or	r24, r26
    1298:	8b 2b       	or	r24, r27
    129a:	21 f4       	brne	.+8      	; 0x12a4 <xQueueGenericSend+0x86>
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	40 c0       	rjmp	.+128    	; 0x1324 <xQueueGenericSend+0x106>
    12a4:	11 11       	cpse	r17, r1
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <xQueueGenericSend+0x94>
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <vTaskInternalSetTimeOutState>
    12b0:	11 e0       	ldi	r17, 0x01	; 1
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	15 d7       	rcall	.+3626   	; 0x20e2 <vTaskSuspendAll>
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	0f 92       	push	r0
    12be:	f7 01       	movw	r30, r14
    12c0:	81 a1       	ldd	r24, Z+33	; 0x21
    12c2:	8f 3f       	cpi	r24, 0xFF	; 255
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <xQueueGenericSend+0xaa>
    12c6:	11 a2       	std	Z+33, r1	; 0x21
    12c8:	f7 01       	movw	r30, r14
    12ca:	82 a1       	ldd	r24, Z+34	; 0x22
    12cc:	8f 3f       	cpi	r24, 0xFF	; 255
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <xQueueGenericSend+0xb4>
    12d0:	12 a2       	std	Z+34, r1	; 0x22
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	be 01       	movw	r22, r28
    12d8:	6a 5f       	subi	r22, 0xFA	; 250
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	ce 01       	movw	r24, r28
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <xTaskCheckForTimeOut>
    12e4:	81 11       	cpse	r24, r1
    12e6:	19 c0       	rjmp	.+50     	; 0x131a <xQueueGenericSend+0xfc>
    12e8:	c7 01       	movw	r24, r14
    12ea:	66 de       	rcall	.-820    	; 0xfb8 <prvIsQueueFull>
    12ec:	88 23       	and	r24, r24
    12ee:	81 f0       	breq	.+32     	; 0x1310 <xQueueGenericSend+0xf2>
    12f0:	4e 81       	ldd	r20, Y+6	; 0x06
    12f2:	5f 81       	ldd	r21, Y+7	; 0x07
    12f4:	68 85       	ldd	r22, Y+8	; 0x08
    12f6:	79 85       	ldd	r23, Y+9	; 0x09
    12f8:	c7 01       	movw	r24, r14
    12fa:	08 96       	adiw	r24, 0x08	; 8
    12fc:	0e 94 72 13 	call	0x26e4	; 0x26e4 <vTaskPlaceOnEventList>
    1300:	c7 01       	movw	r24, r14
    1302:	e1 de       	rcall	.-574    	; 0x10c6 <prvUnlockQueue>
    1304:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
    1308:	81 11       	cpse	r24, r1
    130a:	a0 cf       	rjmp	.-192    	; 0x124c <xQueueGenericSend+0x2e>
    130c:	80 dd       	rcall	.-1280   	; 0xe0e <vPortYield>
    130e:	9e cf       	rjmp	.-196    	; 0x124c <xQueueGenericSend+0x2e>
    1310:	c7 01       	movw	r24, r14
    1312:	d9 de       	rcall	.-590    	; 0x10c6 <prvUnlockQueue>
    1314:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
    1318:	99 cf       	rjmp	.-206    	; 0x124c <xQueueGenericSend+0x2e>
    131a:	c7 01       	movw	r24, r14
    131c:	d4 de       	rcall	.-600    	; 0x10c6 <prvUnlockQueue>
    131e:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	29 96       	adiw	r28, 0x09	; 9
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	08 95       	ret

00001342 <prvInitialiseMutex>:
    1342:	0f 93       	push	r16
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	69 f0       	breq	.+26     	; 0x1362 <prvInitialiseMutex+0x20>
    1348:	fc 01       	movw	r30, r24
    134a:	15 82       	std	Z+5, r1	; 0x05
    134c:	14 82       	std	Z+4, r1	; 0x04
    134e:	11 82       	std	Z+1, r1	; 0x01
    1350:	10 82       	st	Z, r1
    1352:	16 82       	std	Z+6, r1	; 0x06
    1354:	00 e0       	ldi	r16, 0x00	; 0
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	5e df       	rcall	.-324    	; 0x121e <xQueueGenericSend>
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <xQueueCreateMutex>:
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	48 2f       	mov	r20, r24
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	33 df       	rcall	.-410    	; 0x11d8 <xQueueGenericCreate>
    1372:	ec 01       	movw	r28, r24
    1374:	e6 df       	rcall	.-52     	; 0x1342 <prvInitialiseMutex>
    1376:	ce 01       	movw	r24, r28
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <xQueueGenericSendFromISR>:
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	8a 01       	movw	r16, r20
    138c:	fc 01       	movw	r30, r24
    138e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1390:	37 8d       	ldd	r19, Z+31	; 0x1f
    1392:	53 17       	cp	r21, r19
    1394:	10 f0       	brcs	.+4      	; 0x139a <xQueueGenericSendFromISR+0x1c>
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	f9 f4       	brne	.+62     	; 0x13d8 <xQueueGenericSendFromISR+0x5a>
    139a:	42 2f       	mov	r20, r18
    139c:	78 01       	movw	r14, r16
    139e:	ec 01       	movw	r28, r24
    13a0:	1a a1       	ldd	r17, Y+34	; 0x22
    13a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a4:	ce 01       	movw	r24, r28
    13a6:	16 de       	rcall	.-980    	; 0xfd4 <prvCopyDataToQueue>
    13a8:	1f 3f       	cpi	r17, 0xFF	; 255
    13aa:	81 f4       	brne	.+32     	; 0x13cc <xQueueGenericSendFromISR+0x4e>
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	88 23       	and	r24, r24
    13b0:	a9 f0       	breq	.+42     	; 0x13dc <xQueueGenericSendFromISR+0x5e>
    13b2:	ce 01       	movw	r24, r28
    13b4:	43 96       	adiw	r24, 0x13	; 19
    13b6:	0e 94 15 14 	call	0x282a	; 0x282a <xTaskRemoveFromEventList>
    13ba:	88 23       	and	r24, r24
    13bc:	89 f0       	breq	.+34     	; 0x13e0 <xQueueGenericSendFromISR+0x62>
    13be:	e1 14       	cp	r14, r1
    13c0:	f1 04       	cpc	r15, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <xQueueGenericSendFromISR+0x66>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	f7 01       	movw	r30, r14
    13c8:	80 83       	st	Z, r24
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <xQueueGenericSendFromISR+0x68>
    13cc:	ff 24       	eor	r15, r15
    13ce:	f3 94       	inc	r15
    13d0:	f1 0e       	add	r15, r17
    13d2:	fa a2       	std	Y+34, r15	; 0x22
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <xQueueGenericSendFromISR+0x68>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <xQueueGenericSendFromISR+0x68>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <xQueueGenericSendFromISR+0x68>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <xQueueGenericSendFromISR+0x68>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	08 95       	ret

000013f4 <xQueueReceive>:
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	29 97       	sbiw	r28, 0x09	; 9
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	8c 01       	movw	r16, r24
    1416:	6b 01       	movw	r12, r22
    1418:	2e 83       	std	Y+6, r18	; 0x06
    141a:	3f 83       	std	Y+7, r19	; 0x07
    141c:	48 87       	std	Y+8, r20	; 0x08
    141e:	59 87       	std	Y+9, r21	; 0x09
    1420:	e1 2c       	mov	r14, r1
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	0f 92       	push	r0
    1428:	f8 01       	movw	r30, r16
    142a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    142c:	ff 20       	and	r15, r15
    142e:	99 f0       	breq	.+38     	; 0x1456 <xQueueReceive+0x62>
    1430:	b6 01       	movw	r22, r12
    1432:	c8 01       	movw	r24, r16
    1434:	2e de       	rcall	.-932    	; 0x1092 <prvCopyDataFromQueue>
    1436:	fa 94       	dec	r15
    1438:	f8 01       	movw	r30, r16
    143a:	f6 8e       	std	Z+30, r15	; 0x1e
    143c:	80 85       	ldd	r24, Z+8	; 0x08
    143e:	88 23       	and	r24, r24
    1440:	31 f0       	breq	.+12     	; 0x144e <xQueueReceive+0x5a>
    1442:	c8 01       	movw	r24, r16
    1444:	08 96       	adiw	r24, 0x08	; 8
    1446:	0e 94 15 14 	call	0x282a	; 0x282a <xTaskRemoveFromEventList>
    144a:	81 11       	cpse	r24, r1
    144c:	e0 dc       	rcall	.-1600   	; 0xe0e <vPortYield>
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	4f c0       	rjmp	.+158    	; 0x14f4 <xQueueReceive+0x100>
    1456:	8e 81       	ldd	r24, Y+6	; 0x06
    1458:	9f 81       	ldd	r25, Y+7	; 0x07
    145a:	a8 85       	ldd	r26, Y+8	; 0x08
    145c:	b9 85       	ldd	r27, Y+9	; 0x09
    145e:	89 2b       	or	r24, r25
    1460:	8a 2b       	or	r24, r26
    1462:	8b 2b       	or	r24, r27
    1464:	21 f4       	brne	.+8      	; 0x146e <xQueueReceive+0x7a>
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <xQueueReceive+0x100>
    146e:	e1 10       	cpse	r14, r1
    1470:	06 c0       	rjmp	.+12     	; 0x147e <xQueueReceive+0x8a>
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <vTaskInternalSetTimeOutState>
    147a:	ee 24       	eor	r14, r14
    147c:	e3 94       	inc	r14
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	2f d6       	rcall	.+3166   	; 0x20e2 <vTaskSuspendAll>
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	0f 92       	push	r0
    148a:	f8 01       	movw	r30, r16
    148c:	81 a1       	ldd	r24, Z+33	; 0x21
    148e:	8f 3f       	cpi	r24, 0xFF	; 255
    1490:	09 f4       	brne	.+2      	; 0x1494 <xQueueReceive+0xa0>
    1492:	11 a2       	std	Z+33, r1	; 0x21
    1494:	f8 01       	movw	r30, r16
    1496:	82 a1       	ldd	r24, Z+34	; 0x22
    1498:	8f 3f       	cpi	r24, 0xFF	; 255
    149a:	09 f4       	brne	.+2      	; 0x149e <xQueueReceive+0xaa>
    149c:	12 a2       	std	Z+34, r1	; 0x22
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	be 01       	movw	r22, r28
    14a4:	6a 5f       	subi	r22, 0xFA	; 250
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	ce 01       	movw	r24, r28
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <xTaskCheckForTimeOut>
    14b0:	81 11       	cpse	r24, r1
    14b2:	17 c0       	rjmp	.+46     	; 0x14e2 <xQueueReceive+0xee>
    14b4:	c8 01       	movw	r24, r16
    14b6:	73 dd       	rcall	.-1306   	; 0xf9e <prvIsQueueEmpty>
    14b8:	88 23       	and	r24, r24
    14ba:	79 f0       	breq	.+30     	; 0x14da <xQueueReceive+0xe6>
    14bc:	4e 81       	ldd	r20, Y+6	; 0x06
    14be:	5f 81       	ldd	r21, Y+7	; 0x07
    14c0:	68 85       	ldd	r22, Y+8	; 0x08
    14c2:	79 85       	ldd	r23, Y+9	; 0x09
    14c4:	c8 01       	movw	r24, r16
    14c6:	43 96       	adiw	r24, 0x13	; 19
    14c8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <vTaskPlaceOnEventList>
    14cc:	c8 01       	movw	r24, r16
    14ce:	fb dd       	rcall	.-1034   	; 0x10c6 <prvUnlockQueue>
    14d0:	48 d7       	rcall	.+3728   	; 0x2362 <xTaskResumeAll>
    14d2:	81 11       	cpse	r24, r1
    14d4:	a6 cf       	rjmp	.-180    	; 0x1422 <xQueueReceive+0x2e>
    14d6:	9b dc       	rcall	.-1738   	; 0xe0e <vPortYield>
    14d8:	a4 cf       	rjmp	.-184    	; 0x1422 <xQueueReceive+0x2e>
    14da:	c8 01       	movw	r24, r16
    14dc:	f4 dd       	rcall	.-1048   	; 0x10c6 <prvUnlockQueue>
    14de:	41 d7       	rcall	.+3714   	; 0x2362 <xTaskResumeAll>
    14e0:	a0 cf       	rjmp	.-192    	; 0x1422 <xQueueReceive+0x2e>
    14e2:	c8 01       	movw	r24, r16
    14e4:	f0 dd       	rcall	.-1056   	; 0x10c6 <prvUnlockQueue>
    14e6:	3d d7       	rcall	.+3706   	; 0x2362 <xTaskResumeAll>
    14e8:	c8 01       	movw	r24, r16
    14ea:	59 dd       	rcall	.-1358   	; 0xf9e <prvIsQueueEmpty>
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <xQueueReceive+0xfe>
    14f0:	98 cf       	rjmp	.-208    	; 0x1422 <xQueueReceive+0x2e>
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	29 96       	adiw	r28, 0x09	; 9
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	08 95       	ret

00001512 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	0f 92       	push	r0
    151e:	89 a1       	ldd	r24, Y+33	; 0x21
    1520:	8f 3f       	cpi	r24, 0xFF	; 255
    1522:	09 f4       	brne	.+2      	; 0x1526 <vQueueWaitForMessageRestricted+0x14>
    1524:	19 a2       	std	Y+33, r1	; 0x21
    1526:	8a a1       	ldd	r24, Y+34	; 0x22
    1528:	8f 3f       	cpi	r24, 0xFF	; 255
    152a:	09 f4       	brne	.+2      	; 0x152e <vQueueWaitForMessageRestricted+0x1c>
    152c:	1a a2       	std	Y+34, r1	; 0x22
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1532:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1534:	81 11       	cpse	r24, r1
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1538:	ce 01       	movw	r24, r28
    153a:	43 96       	adiw	r24, 0x13	; 19
    153c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1540:	ce 01       	movw	r24, r28
    1542:	c1 dd       	rcall	.-1150   	; 0x10c6 <prvUnlockQueue>
    }
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    154a:	fc 01       	movw	r30, r24
    154c:	44 81       	ldd	r20, Z+4	; 0x04
    154e:	55 81       	ldd	r21, Z+5	; 0x05
    1550:	22 81       	ldd	r18, Z+2	; 0x02
    1552:	33 81       	ldd	r19, Z+3	; 0x03
    1554:	24 0f       	add	r18, r20
    1556:	35 1f       	adc	r19, r21
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	b9 01       	movw	r22, r18
    155e:	68 1b       	sub	r22, r24
    1560:	79 0b       	sbc	r23, r25
    1562:	cb 01       	movw	r24, r22
    1564:	64 17       	cp	r22, r20
    1566:	75 07       	cpc	r23, r21
    1568:	10 f0       	brcs	.+4      	; 0x156e <prvBytesInBuffer+0x24>
    156a:	84 1b       	sub	r24, r20
    156c:	95 0b       	sbc	r25, r21
    156e:	08 95       	ret

00001570 <prvInitialiseNewStreamBuffer>:
    1570:	0f 93       	push	r16
    1572:	fc 01       	movw	r30, r24
    1574:	8f e0       	ldi	r24, 0x0F	; 15
    1576:	df 01       	movw	r26, r30
    1578:	1d 92       	st	X+, r1
    157a:	8a 95       	dec	r24
    157c:	e9 f7       	brne	.-6      	; 0x1578 <prvInitialiseNewStreamBuffer+0x8>
    157e:	75 87       	std	Z+13, r23	; 0x0d
    1580:	64 87       	std	Z+12, r22	; 0x0c
    1582:	55 83       	std	Z+5, r21	; 0x05
    1584:	44 83       	std	Z+4, r20	; 0x04
    1586:	37 83       	std	Z+7, r19	; 0x07
    1588:	26 83       	std	Z+6, r18	; 0x06
    158a:	06 87       	std	Z+14, r16	; 0x0e
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <prvWriteBytesToBuffer>:
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	6c 01       	movw	r12, r24
    15a6:	5b 01       	movw	r10, r22
    15a8:	7a 01       	movw	r14, r20
    15aa:	fc 01       	movw	r30, r24
    15ac:	c2 81       	ldd	r28, Z+2	; 0x02
    15ae:	d3 81       	ldd	r29, Z+3	; 0x03
    15b0:	04 81       	ldd	r16, Z+4	; 0x04
    15b2:	15 81       	ldd	r17, Z+5	; 0x05
    15b4:	0c 1b       	sub	r16, r28
    15b6:	1d 0b       	sbc	r17, r29
    15b8:	40 17       	cp	r20, r16
    15ba:	51 07       	cpc	r21, r17
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <prvWriteBytesToBuffer+0x30>
    15be:	8a 01       	movw	r16, r20
    15c0:	f6 01       	movw	r30, r12
    15c2:	84 85       	ldd	r24, Z+12	; 0x0c
    15c4:	95 85       	ldd	r25, Z+13	; 0x0d
    15c6:	a8 01       	movw	r20, r16
    15c8:	b5 01       	movw	r22, r10
    15ca:	8c 0f       	add	r24, r28
    15cc:	9d 1f       	adc	r25, r29
    15ce:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <memcpy>
    15d2:	0e 15       	cp	r16, r14
    15d4:	1f 05       	cpc	r17, r15
    15d6:	58 f4       	brcc	.+22     	; 0x15ee <prvWriteBytesToBuffer+0x5e>
    15d8:	a7 01       	movw	r20, r14
    15da:	40 1b       	sub	r20, r16
    15dc:	51 0b       	sbc	r21, r17
    15de:	b5 01       	movw	r22, r10
    15e0:	60 0f       	add	r22, r16
    15e2:	71 1f       	adc	r23, r17
    15e4:	f6 01       	movw	r30, r12
    15e6:	84 85       	ldd	r24, Z+12	; 0x0c
    15e8:	95 85       	ldd	r25, Z+13	; 0x0d
    15ea:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <memcpy>
    15ee:	ce 01       	movw	r24, r28
    15f0:	8e 0d       	add	r24, r14
    15f2:	9f 1d       	adc	r25, r15
    15f4:	f6 01       	movw	r30, r12
    15f6:	24 81       	ldd	r18, Z+4	; 0x04
    15f8:	35 81       	ldd	r19, Z+5	; 0x05
    15fa:	82 17       	cp	r24, r18
    15fc:	93 07       	cpc	r25, r19
    15fe:	10 f0       	brcs	.+4      	; 0x1604 <prvWriteBytesToBuffer+0x74>
    1600:	82 1b       	sub	r24, r18
    1602:	93 0b       	sbc	r25, r19
    1604:	f6 01       	movw	r30, r12
    1606:	93 83       	std	Z+3, r25	; 0x03
    1608:	82 83       	std	Z+2, r24	; 0x02
    160a:	c7 01       	movw	r24, r14
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	bf 90       	pop	r11
    161e:	af 90       	pop	r10
    1620:	08 95       	ret

00001622 <prvWriteMessageToBuffer>:
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	1f 92       	push	r1
    1634:	1f 92       	push	r1
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	7c 01       	movw	r14, r24
    163c:	6b 01       	movw	r12, r22
    163e:	5a 83       	std	Y+2, r21	; 0x02
    1640:	49 83       	std	Y+1, r20	; 0x01
    1642:	21 15       	cp	r18, r1
    1644:	31 05       	cpc	r19, r1
    1646:	c1 f0       	breq	.+48     	; 0x1678 <prvWriteMessageToBuffer+0x56>
    1648:	fc 01       	movw	r30, r24
    164a:	86 85       	ldd	r24, Z+14	; 0x0e
    164c:	80 fd       	sbrc	r24, 0
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <prvWriteMessageToBuffer+0x3e>
    1650:	42 17       	cp	r20, r18
    1652:	53 07       	cpc	r21, r19
    1654:	08 f4       	brcc	.+2      	; 0x1658 <prvWriteMessageToBuffer+0x36>
    1656:	9a 01       	movw	r18, r20
    1658:	3a 83       	std	Y+2, r19	; 0x02
    165a:	29 83       	std	Y+1, r18	; 0x01
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	0f c0       	rjmp	.+30     	; 0x167e <prvWriteMessageToBuffer+0x5c>
    1660:	20 17       	cp	r18, r16
    1662:	31 07       	cpc	r19, r17
    1664:	58 f0       	brcs	.+22     	; 0x167c <prvWriteMessageToBuffer+0x5a>
    1666:	42 e0       	ldi	r20, 0x02	; 2
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	be 01       	movw	r22, r28
    166c:	6f 5f       	subi	r22, 0xFF	; 255
    166e:	7f 4f       	sbci	r23, 0xFF	; 255
    1670:	c7 01       	movw	r24, r14
    1672:	8e df       	rcall	.-228    	; 0x1590 <prvWriteBytesToBuffer>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	03 c0       	rjmp	.+6      	; 0x167e <prvWriteMessageToBuffer+0x5c>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	01 c0       	rjmp	.+2      	; 0x167e <prvWriteMessageToBuffer+0x5c>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	88 23       	and	r24, r24
    1680:	31 f0       	breq	.+12     	; 0x168e <prvWriteMessageToBuffer+0x6c>
    1682:	49 81       	ldd	r20, Y+1	; 0x01
    1684:	5a 81       	ldd	r21, Y+2	; 0x02
    1686:	b6 01       	movw	r22, r12
    1688:	c7 01       	movw	r24, r14
    168a:	82 df       	rcall	.-252    	; 0x1590 <prvWriteBytesToBuffer>
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <prvWriteMessageToBuffer+0x70>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	08 95       	ret

000016a8 <prvReadBytesFromBuffer>:
    16a8:	af 92       	push	r10
    16aa:	bf 92       	push	r11
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	7c 01       	movw	r14, r24
    16be:	5b 01       	movw	r10, r22
    16c0:	e9 01       	movw	r28, r18
    16c2:	42 17       	cp	r20, r18
    16c4:	53 07       	cpc	r21, r19
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <prvReadBytesFromBuffer+0x22>
    16c8:	ea 01       	movw	r28, r20
    16ca:	20 97       	sbiw	r28, 0x00	; 0
    16cc:	81 f1       	breq	.+96     	; 0x172e <prvReadBytesFromBuffer+0x86>
    16ce:	f7 01       	movw	r30, r14
    16d0:	00 81       	ld	r16, Z
    16d2:	11 81       	ldd	r17, Z+1	; 0x01
    16d4:	84 81       	ldd	r24, Z+4	; 0x04
    16d6:	95 81       	ldd	r25, Z+5	; 0x05
    16d8:	80 1b       	sub	r24, r16
    16da:	91 0b       	sbc	r25, r17
    16dc:	6e 01       	movw	r12, r28
    16de:	8c 17       	cp	r24, r28
    16e0:	9d 07       	cpc	r25, r29
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <prvReadBytesFromBuffer+0x3e>
    16e4:	6c 01       	movw	r12, r24
    16e6:	f7 01       	movw	r30, r14
    16e8:	64 85       	ldd	r22, Z+12	; 0x0c
    16ea:	75 85       	ldd	r23, Z+13	; 0x0d
    16ec:	60 0f       	add	r22, r16
    16ee:	71 1f       	adc	r23, r17
    16f0:	a6 01       	movw	r20, r12
    16f2:	c5 01       	movw	r24, r10
    16f4:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <memcpy>
    16f8:	cc 16       	cp	r12, r28
    16fa:	dd 06       	cpc	r13, r29
    16fc:	58 f4       	brcc	.+22     	; 0x1714 <prvReadBytesFromBuffer+0x6c>
    16fe:	ae 01       	movw	r20, r28
    1700:	4c 19       	sub	r20, r12
    1702:	5d 09       	sbc	r21, r13
    1704:	f7 01       	movw	r30, r14
    1706:	64 85       	ldd	r22, Z+12	; 0x0c
    1708:	75 85       	ldd	r23, Z+13	; 0x0d
    170a:	c5 01       	movw	r24, r10
    170c:	8c 0d       	add	r24, r12
    170e:	9d 1d       	adc	r25, r13
    1710:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <memcpy>
    1714:	0c 0f       	add	r16, r28
    1716:	1d 1f       	adc	r17, r29
    1718:	f7 01       	movw	r30, r14
    171a:	84 81       	ldd	r24, Z+4	; 0x04
    171c:	95 81       	ldd	r25, Z+5	; 0x05
    171e:	08 17       	cp	r16, r24
    1720:	19 07       	cpc	r17, r25
    1722:	10 f0       	brcs	.+4      	; 0x1728 <prvReadBytesFromBuffer+0x80>
    1724:	08 1b       	sub	r16, r24
    1726:	19 0b       	sbc	r17, r25
    1728:	f7 01       	movw	r30, r14
    172a:	11 83       	std	Z+1, r17	; 0x01
    172c:	00 83       	st	Z, r16
    172e:	ce 01       	movw	r24, r28
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	af 90       	pop	r10
    1744:	08 95       	ret

00001746 <prvReadMessageFromBuffer>:
    1746:	6f 92       	push	r6
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	1f 92       	push	r1
    1764:	1f 92       	push	r1
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	6c 01       	movw	r12, r24
    176c:	4b 01       	movw	r8, r22
    176e:	5a 01       	movw	r10, r20
    1770:	79 01       	movw	r14, r18
    1772:	01 15       	cp	r16, r1
    1774:	11 05       	cpc	r17, r1
    1776:	b1 f0       	breq	.+44     	; 0x17a4 <prvReadMessageFromBuffer+0x5e>
    1778:	fc 01       	movw	r30, r24
    177a:	60 80       	ld	r6, Z
    177c:	71 80       	ldd	r7, Z+1	; 0x01
    177e:	a8 01       	movw	r20, r16
    1780:	be 01       	movw	r22, r28
    1782:	6f 5f       	subi	r22, 0xFF	; 255
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	90 df       	rcall	.-224    	; 0x16a8 <prvReadBytesFromBuffer>
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	e0 1a       	sub	r14, r16
    178e:	f1 0a       	sbc	r15, r17
    1790:	a8 16       	cp	r10, r24
    1792:	b9 06       	cpc	r11, r25
    1794:	30 f4       	brcc	.+12     	; 0x17a2 <prvReadMessageFromBuffer+0x5c>
    1796:	f6 01       	movw	r30, r12
    1798:	71 82       	std	Z+1, r7	; 0x01
    179a:	60 82       	st	Z, r6
    179c:	a1 2c       	mov	r10, r1
    179e:	b1 2c       	mov	r11, r1
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <prvReadMessageFromBuffer+0x5e>
    17a2:	5c 01       	movw	r10, r24
    17a4:	97 01       	movw	r18, r14
    17a6:	a5 01       	movw	r20, r10
    17a8:	b4 01       	movw	r22, r8
    17aa:	c6 01       	movw	r24, r12
    17ac:	7d df       	rcall	.-262    	; 0x16a8 <prvReadBytesFromBuffer>
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	8f 90       	pop	r8
    17ca:	7f 90       	pop	r7
    17cc:	6f 90       	pop	r6
    17ce:	08 95       	ret

000017d0 <xStreamBufferGenericCreate>:
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
    17e0:	6b 01       	movw	r12, r22
    17e2:	41 30       	cpi	r20, 0x01	; 1
    17e4:	11 f4       	brne	.+4      	; 0x17ea <xStreamBufferGenericCreate+0x1a>
    17e6:	01 e0       	ldi	r16, 0x01	; 1
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <xStreamBufferGenericCreate+0x1c>
    17ea:	00 e0       	ldi	r16, 0x00	; 0
    17ec:	c1 14       	cp	r12, r1
    17ee:	d1 04       	cpc	r13, r1
    17f0:	19 f4       	brne	.+6      	; 0x17f8 <xStreamBufferGenericCreate+0x28>
    17f2:	cc 24       	eor	r12, r12
    17f4:	c3 94       	inc	r12
    17f6:	d1 2c       	mov	r13, r1
    17f8:	ce 01       	movw	r24, r28
    17fa:	40 96       	adiw	r24, 0x10	; 16
    17fc:	c8 17       	cp	r28, r24
    17fe:	d9 07       	cpc	r29, r25
    1800:	20 f4       	brcc	.+8      	; 0x180a <xStreamBufferGenericCreate+0x3a>
    1802:	21 96       	adiw	r28, 0x01	; 1
    1804:	50 d9       	rcall	.-3424   	; 0xaa6 <pvPortMalloc>
    1806:	7c 01       	movw	r14, r24
    1808:	02 c0       	rjmp	.+4      	; 0x180e <xStreamBufferGenericCreate+0x3e>
    180a:	e1 2c       	mov	r14, r1
    180c:	f1 2c       	mov	r15, r1
    180e:	e1 14       	cp	r14, r1
    1810:	f1 04       	cpc	r15, r1
    1812:	39 f0       	breq	.+14     	; 0x1822 <xStreamBufferGenericCreate+0x52>
    1814:	96 01       	movw	r18, r12
    1816:	ae 01       	movw	r20, r28
    1818:	b7 01       	movw	r22, r14
    181a:	61 5f       	subi	r22, 0xF1	; 241
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	c7 01       	movw	r24, r14
    1820:	a7 de       	rcall	.-690    	; 0x1570 <prvInitialiseNewStreamBuffer>
    1822:	c7 01       	movw	r24, r14
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	08 95       	ret

00001834 <xStreamBufferReset>:
    1834:	0f 93       	push	r16
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	0f 92       	push	r0
    183c:	fc 01       	movw	r30, r24
    183e:	20 85       	ldd	r18, Z+8	; 0x08
    1840:	31 85       	ldd	r19, Z+9	; 0x09
    1842:	23 2b       	or	r18, r19
    1844:	71 f4       	brne	.+28     	; 0x1862 <xStreamBufferReset+0x2e>
    1846:	22 85       	ldd	r18, Z+10	; 0x0a
    1848:	33 85       	ldd	r19, Z+11	; 0x0b
    184a:	23 2b       	or	r18, r19
    184c:	61 f4       	brne	.+24     	; 0x1866 <xStreamBufferReset+0x32>
    184e:	26 81       	ldd	r18, Z+6	; 0x06
    1850:	37 81       	ldd	r19, Z+7	; 0x07
    1852:	44 81       	ldd	r20, Z+4	; 0x04
    1854:	55 81       	ldd	r21, Z+5	; 0x05
    1856:	64 85       	ldd	r22, Z+12	; 0x0c
    1858:	75 85       	ldd	r23, Z+13	; 0x0d
    185a:	06 85       	ldd	r16, Z+14	; 0x0e
    185c:	89 de       	rcall	.-750    	; 0x1570 <prvInitialiseNewStreamBuffer>
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <xStreamBufferReset+0x34>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <xStreamBufferReset+0x34>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret

00001870 <xStreamBufferSpacesAvailable>:
    1870:	fc 01       	movw	r30, r24
    1872:	24 81       	ldd	r18, Z+4	; 0x04
    1874:	35 81       	ldd	r19, Z+5	; 0x05
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	82 0f       	add	r24, r18
    187c:	93 1f       	adc	r25, r19
    187e:	42 81       	ldd	r20, Z+2	; 0x02
    1880:	53 81       	ldd	r21, Z+3	; 0x03
    1882:	84 1b       	sub	r24, r20
    1884:	95 0b       	sbc	r25, r21
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	82 17       	cp	r24, r18
    188a:	93 07       	cpc	r25, r19
    188c:	10 f0       	brcs	.+4      	; 0x1892 <xStreamBufferSpacesAvailable+0x22>
    188e:	82 1b       	sub	r24, r18
    1890:	93 0b       	sbc	r25, r19
    1892:	08 95       	ret

00001894 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1894:	2f 92       	push	r2
    1896:	3f 92       	push	r3
    1898:	4f 92       	push	r4
    189a:	5f 92       	push	r5
    189c:	6f 92       	push	r6
    189e:	7f 92       	push	r7
    18a0:	8f 92       	push	r8
    18a2:	9f 92       	push	r9
    18a4:	af 92       	push	r10
    18a6:	bf 92       	push	r11
    18a8:	cf 92       	push	r12
    18aa:	df 92       	push	r13
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	2b 97       	sbiw	r28, 0x0b	; 11
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	4c 01       	movw	r8, r24
    18ca:	7b 87       	std	Y+11, r23	; 0x0b
    18cc:	6a 87       	std	Y+10, r22	; 0x0a
    18ce:	1a 01       	movw	r2, r20
    18d0:	0e 83       	std	Y+6, r16	; 0x06
    18d2:	1f 83       	std	Y+7, r17	; 0x07
    18d4:	28 87       	std	Y+8, r18	; 0x08
    18d6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    18d8:	fc 01       	movw	r30, r24
    18da:	84 81       	ldd	r24, Z+4	; 0x04
    18dc:	95 81       	ldd	r25, Z+5	; 0x05
    18de:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18e0:	26 85       	ldd	r18, Z+14	; 0x0e
    18e2:	20 ff       	sbrs	r18, 0
    18e4:	0c c0       	rjmp	.+24     	; 0x18fe <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18e6:	2a 01       	movw	r4, r20
    18e8:	f2 e0       	ldi	r31, 0x02	; 2
    18ea:	4f 0e       	add	r4, r31
    18ec:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    18ee:	84 15       	cp	r24, r4
    18f0:	95 05       	cpc	r25, r5
    18f2:	58 f4       	brcc	.+22     	; 0x190a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    18f4:	1e 82       	std	Y+6, r1	; 0x06
    18f6:	1f 82       	std	Y+7, r1	; 0x07
    18f8:	18 86       	std	Y+8, r1	; 0x08
    18fa:	19 86       	std	Y+9, r1	; 0x09
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    18fe:	84 17       	cp	r24, r20
    1900:	95 07       	cpc	r25, r21
    1902:	10 f0       	brcs	.+4      	; 0x1908 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1904:	2a 01       	movw	r4, r20
    1906:	01 c0       	rjmp	.+2      	; 0x190a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1908:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    190a:	8e 81       	ldd	r24, Y+6	; 0x06
    190c:	9f 81       	ldd	r25, Y+7	; 0x07
    190e:	a8 85       	ldd	r26, Y+8	; 0x08
    1910:	b9 85       	ldd	r27, Y+9	; 0x09
    1912:	89 2b       	or	r24, r25
    1914:	8a 2b       	or	r24, r26
    1916:	8b 2b       	or	r24, r27
    1918:	09 f4       	brne	.+2      	; 0x191c <xStreamBufferSend+0x88>
    191a:	38 c0       	rjmp	.+112    	; 0x198c <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    191c:	ce 01       	movw	r24, r28
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	0e 94 5e 15 	call	0x2abc	; 0x2abc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    192a:	c4 01       	movw	r24, r8
    192c:	a1 df       	rcall	.-190    	; 0x1870 <xStreamBufferSpacesAvailable>
    192e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1930:	84 15       	cp	r24, r4
    1932:	95 05       	cpc	r25, r5
    1934:	40 f5       	brcc	.+80     	; 0x1986 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 47 19 	call	0x328e	; 0x328e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1940:	0e 94 ef 15 	call	0x2bde	; 0x2bde <xTaskGetCurrentTaskHandle>
    1944:	f4 01       	movw	r30, r8
    1946:	93 87       	std	Z+11, r25	; 0x0b
    1948:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    194e:	ae 80       	ldd	r10, Y+6	; 0x06
    1950:	bf 80       	ldd	r11, Y+7	; 0x07
    1952:	c8 84       	ldd	r12, Y+8	; 0x08
    1954:	d9 84       	ldd	r13, Y+9	; 0x09
    1956:	e1 2c       	mov	r14, r1
    1958:	f1 2c       	mov	r15, r1
    195a:	00 e0       	ldi	r16, 0x00	; 0
    195c:	10 e0       	ldi	r17, 0x00	; 0
    195e:	98 01       	movw	r18, r16
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	ba 01       	movw	r22, r20
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    196c:	f4 01       	movw	r30, r8
    196e:	13 86       	std	Z+11, r1	; 0x0b
    1970:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1972:	be 01       	movw	r22, r28
    1974:	6a 5f       	subi	r22, 0xFA	; 250
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	ce 01       	movw	r24, r28
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <xTaskCheckForTimeOut>
    1980:	88 23       	and	r24, r24
    1982:	81 f2       	breq	.-96     	; 0x1924 <xStreamBufferSend+0x90>
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
                    break;
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    198c:	61 2c       	mov	r6, r1
    198e:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1990:	61 14       	cp	r6, r1
    1992:	71 04       	cpc	r7, r1
    1994:	19 f4       	brne	.+6      	; 0x199c <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1996:	c4 01       	movw	r24, r8
    1998:	6b df       	rcall	.-298    	; 0x1870 <xStreamBufferSpacesAvailable>
    199a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    199c:	82 01       	movw	r16, r4
    199e:	93 01       	movw	r18, r6
    19a0:	a1 01       	movw	r20, r2
    19a2:	6a 85       	ldd	r22, Y+10	; 0x0a
    19a4:	7b 85       	ldd	r23, Y+11	; 0x0b
    19a6:	c4 01       	movw	r24, r8
    19a8:	3c de       	rcall	.-904    	; 0x1622 <prvWriteMessageToBuffer>
    19aa:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    19ac:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    19ae:	e9 f0       	breq	.+58     	; 0x19ea <xStreamBufferSend+0x156>
    19b0:	c4 01       	movw	r24, r8
    19b2:	cb dd       	rcall	.-1130   	; 0x154a <prvBytesInBuffer>
    19b4:	f4 01       	movw	r30, r8
    19b6:	26 81       	ldd	r18, Z+6	; 0x06
    19b8:	37 81       	ldd	r19, Z+7	; 0x07
    19ba:	82 17       	cp	r24, r18
    19bc:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    19be:	a8 f0       	brcs	.+42     	; 0x19ea <xStreamBufferSend+0x156>
    19c0:	90 d3       	rcall	.+1824   	; 0x20e2 <vTaskSuspendAll>
    19c2:	f4 01       	movw	r30, r8
    19c4:	80 85       	ldd	r24, Z+8	; 0x08
    19c6:	91 85       	ldd	r25, Z+9	; 0x09
    19c8:	89 2b       	or	r24, r25
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <xStreamBufferSend+0x154>
    19cc:	80 85       	ldd	r24, Z+8	; 0x08
    19ce:	91 85       	ldd	r25, Z+9	; 0x09
    19d0:	e1 2c       	mov	r14, r1
    19d2:	f1 2c       	mov	r15, r1
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	a9 01       	movw	r20, r18
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <xTaskGenericNotify>
    19e2:	f4 01       	movw	r30, r8
    19e4:	11 86       	std	Z+9, r1	; 0x09
    19e6:	10 86       	std	Z+8, r1	; 0x08
    19e8:	bc d4       	rcall	.+2424   	; 0x2362 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    19ea:	c6 01       	movw	r24, r12
    19ec:	2b 96       	adiw	r28, 0x0b	; 11
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
    1a06:	cf 90       	pop	r12
    1a08:	bf 90       	pop	r11
    1a0a:	af 90       	pop	r10
    1a0c:	9f 90       	pop	r9
    1a0e:	8f 90       	pop	r8
    1a10:	7f 90       	pop	r7
    1a12:	6f 90       	pop	r6
    1a14:	5f 90       	pop	r5
    1a16:	4f 90       	pop	r4
    1a18:	3f 90       	pop	r3
    1a1a:	2f 90       	pop	r2
    1a1c:	08 95       	ret

00001a1e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1a1e:	af 92       	push	r10
    1a20:	bf 92       	push	r11
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	ec 01       	movw	r28, r24
    1a34:	7b 01       	movw	r14, r22
    1a36:	5a 01       	movw	r10, r20
    1a38:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a3c:	80 ff       	sbrs	r24, 0
    1a3e:	04 c0       	rjmp	.+8      	; 0x1a48 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a40:	8a 01       	movw	r16, r20
    1a42:	0e 5f       	subi	r16, 0xFE	; 254
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1a48:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	11 df       	rcall	.-478    	; 0x1870 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a4e:	9c 01       	movw	r18, r24
    1a50:	a5 01       	movw	r20, r10
    1a52:	b7 01       	movw	r22, r14
    1a54:	ce 01       	movw	r24, r28
    1a56:	e5 dd       	rcall	.-1078   	; 0x1622 <prvWriteMessageToBuffer>
    1a58:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1a5a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a5c:	c1 f0       	breq	.+48     	; 0x1a8e <xStreamBufferSendFromISR+0x70>
    1a5e:	ce 01       	movw	r24, r28
    1a60:	74 dd       	rcall	.-1304   	; 0x154a <prvBytesInBuffer>
    1a62:	2e 81       	ldd	r18, Y+6	; 0x06
    1a64:	3f 81       	ldd	r19, Y+7	; 0x07
    1a66:	82 17       	cp	r24, r18
    1a68:	93 07       	cpc	r25, r19
    1a6a:	88 f0       	brcs	.+34     	; 0x1a8e <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1a6c:	88 85       	ldd	r24, Y+8	; 0x08
    1a6e:	99 85       	ldd	r25, Y+9	; 0x09
    1a70:	89 2b       	or	r24, r25
    1a72:	69 f0       	breq	.+26     	; 0x1a8e <xStreamBufferSendFromISR+0x70>
    1a74:	88 85       	ldd	r24, Y+8	; 0x08
    1a76:	99 85       	ldd	r25, Y+9	; 0x09
    1a78:	e1 2c       	mov	r14, r1
    1a7a:	f1 2c       	mov	r15, r1
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	a9 01       	movw	r20, r18
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 25 18 	call	0x304a	; 0x304a <xTaskGenericNotifyFromISR>
    1a8a:	19 86       	std	Y+9, r1	; 0x09
    1a8c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1a8e:	c5 01       	movw	r24, r10
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	08 95       	ret

00001aa6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1aa6:	4f 92       	push	r4
    1aa8:	5f 92       	push	r5
    1aaa:	6f 92       	push	r6
    1aac:	7f 92       	push	r7
    1aae:	8f 92       	push	r8
    1ab0:	9f 92       	push	r9
    1ab2:	af 92       	push	r10
    1ab4:	bf 92       	push	r11
    1ab6:	cf 92       	push	r12
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	ec 01       	movw	r28, r24
    1ac8:	2b 01       	movw	r4, r22
    1aca:	3a 01       	movw	r6, r20
    1acc:	58 01       	movw	r10, r16
    1ace:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ad0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ad2:	80 ff       	sbrs	r24, 0
    1ad4:	05 c0       	rjmp	.+10     	; 0x1ae0 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ad6:	68 94       	set
    1ad8:	88 24       	eor	r8, r8
    1ada:	81 f8       	bld	r8, 1
    1adc:	91 2c       	mov	r9, r1
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1ae0:	81 2c       	mov	r8, r1
    1ae2:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1ae4:	a1 14       	cp	r10, r1
    1ae6:	b1 04       	cpc	r11, r1
    1ae8:	c1 04       	cpc	r12, r1
    1aea:	d1 04       	cpc	r13, r1
    1aec:	41 f1       	breq	.+80     	; 0x1b3e <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1af4:	ce 01       	movw	r24, r28
    1af6:	29 dd       	rcall	.-1454   	; 0x154a <prvBytesInBuffer>
    1af8:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1afa:	88 16       	cp	r8, r24
    1afc:	99 06       	cpc	r9, r25
    1afe:	48 f0       	brcs	.+18     	; 0x1b12 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 47 19 	call	0x328e	; 0x328e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1b0a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <xTaskGetCurrentTaskHandle>
    1b0e:	99 87       	std	Y+9, r25	; 0x09
    1b10:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1b16:	8e 14       	cp	r8, r14
    1b18:	9f 04       	cpc	r9, r15
    1b1a:	a0 f0       	brcs	.+40     	; 0x1b44 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1b1c:	e1 2c       	mov	r14, r1
    1b1e:	f1 2c       	mov	r15, r1
    1b20:	00 e0       	ldi	r16, 0x00	; 0
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	98 01       	movw	r18, r16
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	ba 01       	movw	r22, r20
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1b32:	19 86       	std	Y+9, r1	; 0x09
    1b34:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b36:	ce 01       	movw	r24, r28
    1b38:	08 dd       	rcall	.-1520   	; 0x154a <prvBytesInBuffer>
    1b3a:	7c 01       	movw	r14, r24
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b3e:	ce 01       	movw	r24, r28
    1b40:	04 dd       	rcall	.-1528   	; 0x154a <prvBytesInBuffer>
    1b42:	7c 01       	movw	r14, r24
    1b44:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1b46:	9f 04       	cpc	r9, r15
    1b48:	e8 f4       	brcc	.+58     	; 0x1b84 <xStreamBufferReceive+0xde>
    1b4a:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1b4c:	97 01       	movw	r18, r14
    1b4e:	a3 01       	movw	r20, r6
    1b50:	b2 01       	movw	r22, r4
    1b52:	ce 01       	movw	r24, r28
    1b54:	f8 dd       	rcall	.-1040   	; 0x1746 <prvReadMessageFromBuffer>
    1b56:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1b58:	89 2b       	or	r24, r25
    1b5a:	b1 f0       	breq	.+44     	; 0x1b88 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1b5c:	c2 d2       	rcall	.+1412   	; 0x20e2 <vTaskSuspendAll>
    1b5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b62:	89 2b       	or	r24, r25
    1b64:	69 f0       	breq	.+26     	; 0x1b80 <xStreamBufferReceive+0xda>
    1b66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6a:	e1 2c       	mov	r14, r1
    1b6c:	f1 2c       	mov	r15, r1
    1b6e:	00 e0       	ldi	r16, 0x00	; 0
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	a9 01       	movw	r20, r18
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <xTaskGenericNotify>
    1b7c:	1b 86       	std	Y+11, r1	; 0x0b
    1b7e:	1a 86       	std	Y+10, r1	; 0x0a
    1b80:	f0 d3       	rcall	.+2016   	; 0x2362 <xTaskResumeAll>
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <xStreamBufferReceive+0xe2>
    1b84:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1b86:	d1 2c       	mov	r13, r1
    1b88:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	df 90       	pop	r13
    1b98:	cf 90       	pop	r12
    1b9a:	bf 90       	pop	r11
    1b9c:	af 90       	pop	r10
    1b9e:	9f 90       	pop	r9
    1ba0:	8f 90       	pop	r8
    1ba2:	7f 90       	pop	r7
    1ba4:	6f 90       	pop	r6
    1ba6:	5f 90       	pop	r5
    1ba8:	4f 90       	pop	r4
    1baa:	08 95       	ret

00001bac <prvResetNextTaskUnblockTime>:
    1bac:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    1bb0:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    1bb4:	80 81       	ld	r24, Z
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	0c c0       	rjmp	.+24     	; 0x1bd2 <prvResetNextTaskUnblockTime+0x26>
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xNextTaskUnblockTime>
    1bc4:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    1bc8:	a0 93 a3 10 	sts	0x10A3, r26	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    1bcc:	b0 93 a4 10 	sts	0x10A4, r27	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    1bd0:	08 95       	ret
    1bd2:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    1bd6:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    1bda:	07 80       	ldd	r0, Z+7	; 0x07
    1bdc:	f0 85       	ldd	r31, Z+8	; 0x08
    1bde:	e0 2d       	mov	r30, r0
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	a2 81       	ldd	r26, Z+2	; 0x02
    1be6:	b3 81       	ldd	r27, Z+3	; 0x03
    1be8:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xNextTaskUnblockTime>
    1bec:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    1bf0:	a0 93 a3 10 	sts	0x10A3, r26	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    1bf4:	b0 93 a4 10 	sts	0x10A4, r27	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    1bf8:	08 95       	ret

00001bfa <prvDeleteTCB>:
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
    1c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c04:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vPortFree>
    1c08:	ce 01       	movw	r24, r28
    1c0a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vPortFree>
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <prvInitialiseNewTask>:
    1c14:	4f 92       	push	r4
    1c16:	5f 92       	push	r5
    1c18:	6f 92       	push	r6
    1c1a:	7f 92       	push	r7
    1c1c:	8f 92       	push	r8
    1c1e:	9f 92       	push	r9
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	2c 01       	movw	r4, r24
    1c34:	5b 01       	movw	r10, r22
    1c36:	4a 01       	movw	r8, r20
    1c38:	39 01       	movw	r6, r18
    1c3a:	e6 01       	movw	r28, r12
    1c3c:	65 ea       	ldi	r22, 0xA5	; 165
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c44:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <memset>
    1c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4c:	21 e0       	ldi	r18, 0x01	; 1
    1c4e:	82 1a       	sub	r8, r18
    1c50:	91 08       	sbc	r9, r1
    1c52:	88 0e       	add	r8, r24
    1c54:	99 1e       	adc	r9, r25
    1c56:	a1 14       	cp	r10, r1
    1c58:	b1 04       	cpc	r11, r1
    1c5a:	89 f4       	brne	.+34     	; 0x1c7e <prvInitialiseNewTask+0x6a>
    1c5c:	15 c0       	rjmp	.+42     	; 0x1c88 <prvInitialiseNewTask+0x74>
    1c5e:	82 2f       	mov	r24, r18
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	f5 01       	movw	r30, r10
    1c64:	e8 0f       	add	r30, r24
    1c66:	f9 1f       	adc	r31, r25
    1c68:	30 81       	ld	r19, Z
    1c6a:	de 01       	movw	r26, r28
    1c6c:	a8 0f       	add	r26, r24
    1c6e:	b9 1f       	adc	r27, r25
    1c70:	5d 96       	adiw	r26, 0x1d	; 29
    1c72:	3c 93       	st	X, r19
    1c74:	80 81       	ld	r24, Z
    1c76:	88 23       	and	r24, r24
    1c78:	29 f0       	breq	.+10     	; 0x1c84 <prvInitialiseNewTask+0x70>
    1c7a:	2f 5f       	subi	r18, 0xFF	; 255
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <prvInitialiseNewTask+0x6c>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	20 31       	cpi	r18, 0x10	; 16
    1c82:	68 f3       	brcs	.-38     	; 0x1c5e <prvInitialiseNewTask+0x4a>
    1c84:	1c a6       	std	Y+44, r1	; 0x2c
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <prvInitialiseNewTask+0x76>
    1c88:	1d 8e       	std	Y+29, r1	; 0x1d
    1c8a:	0a 30       	cpi	r16, 0x0A	; 10
    1c8c:	08 f0       	brcs	.+2      	; 0x1c90 <prvInitialiseNewTask+0x7c>
    1c8e:	09 e0       	ldi	r16, 0x09	; 9
    1c90:	0a 8f       	std	Y+26, r16	; 0x1a
    1c92:	0d a7       	std	Y+45, r16	; 0x2d
    1c94:	1e a6       	std	Y+46, r1	; 0x2e
    1c96:	ce 01       	movw	r24, r28
    1c98:	02 96       	adiw	r24, 0x02	; 2
    1c9a:	0e 94 4a 06 	call	0xc94	; 0xc94 <vListInitialiseItem>
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	0e 96       	adiw	r24, 0x0e	; 14
    1ca2:	0e 94 4a 06 	call	0xc94	; 0xc94 <vListInitialiseItem>
    1ca6:	db 87       	std	Y+11, r29	; 0x0b
    1ca8:	ca 87       	std	Y+10, r28	; 0x0a
    1caa:	8a e0       	ldi	r24, 0x0A	; 10
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e0       	ldi	r26, 0x00	; 0
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	80 1b       	sub	r24, r16
    1cb4:	91 09       	sbc	r25, r1
    1cb6:	a1 09       	sbc	r26, r1
    1cb8:	b1 09       	sbc	r27, r1
    1cba:	8e 87       	std	Y+14, r24	; 0x0e
    1cbc:	9f 87       	std	Y+15, r25	; 0x0f
    1cbe:	a8 8b       	std	Y+16, r26	; 0x10
    1cc0:	b9 8b       	std	Y+17, r27	; 0x11
    1cc2:	df 8b       	std	Y+23, r29	; 0x17
    1cc4:	ce 8b       	std	Y+22, r28	; 0x16
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	fe 01       	movw	r30, r28
    1cca:	bf 96       	adiw	r30, 0x2f	; 47
    1ccc:	df 01       	movw	r26, r30
    1cce:	1d 92       	st	X+, r1
    1cd0:	8a 95       	dec	r24
    1cd2:	e9 f7       	brne	.-6      	; 0x1cce <prvInitialiseNewTask+0xba>
    1cd4:	1b aa       	std	Y+51, r1	; 0x33
    1cd6:	a3 01       	movw	r20, r6
    1cd8:	b2 01       	movw	r22, r4
    1cda:	c4 01       	movw	r24, r8
    1cdc:	4f d8       	rcall	.-3938   	; 0xd7c <pxPortInitialiseStack>
    1cde:	99 83       	std	Y+1, r25	; 0x01
    1ce0:	88 83       	st	Y, r24
    1ce2:	e1 14       	cp	r14, r1
    1ce4:	f1 04       	cpc	r15, r1
    1ce6:	19 f0       	breq	.+6      	; 0x1cee <prvInitialiseNewTask+0xda>
    1ce8:	f7 01       	movw	r30, r14
    1cea:	d1 83       	std	Z+1, r29	; 0x01
    1cec:	c0 83       	st	Z, r28
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	0f 91       	pop	r16
    1cf4:	ff 90       	pop	r15
    1cf6:	ef 90       	pop	r14
    1cf8:	df 90       	pop	r13
    1cfa:	cf 90       	pop	r12
    1cfc:	bf 90       	pop	r11
    1cfe:	af 90       	pop	r10
    1d00:	9f 90       	pop	r9
    1d02:	8f 90       	pop	r8
    1d04:	7f 90       	pop	r7
    1d06:	6f 90       	pop	r6
    1d08:	5f 90       	pop	r5
    1d0a:	4f 90       	pop	r4
    1d0c:	08 95       	ret

00001d0e <prvInitialiseTaskLists>:
    1d0e:	cf 93       	push	r28
    1d10:	c0 e0       	ldi	r28, 0x00	; 0
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <prvInitialiseTaskLists+0x18>
    1d14:	2b e0       	ldi	r18, 0x0B	; 11
    1d16:	c2 9f       	mul	r28, r18
    1d18:	c0 01       	movw	r24, r0
    1d1a:	11 24       	eor	r1, r1
    1d1c:	81 51       	subi	r24, 0x11	; 17
    1d1e:	9f 4e       	sbci	r25, 0xEF	; 239
    1d20:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    1d24:	cf 5f       	subi	r28, 0xFF	; 255
    1d26:	ca 30       	cpi	r28, 0x0A	; 10
    1d28:	a8 f3       	brcs	.-22     	; 0x1d14 <prvInitialiseTaskLists+0x6>
    1d2a:	84 ee       	ldi	r24, 0xE4	; 228
    1d2c:	90 e1       	ldi	r25, 0x10	; 16
    1d2e:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    1d32:	89 ed       	ldi	r24, 0xD9	; 217
    1d34:	90 e1       	ldi	r25, 0x10	; 16
    1d36:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    1d3a:	8a ec       	ldi	r24, 0xCA	; 202
    1d3c:	90 e1       	ldi	r25, 0x10	; 16
    1d3e:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    1d42:	8f eb       	ldi	r24, 0xBF	; 191
    1d44:	90 e1       	ldi	r25, 0x10	; 16
    1d46:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    1d4a:	83 eb       	ldi	r24, 0xB3	; 179
    1d4c:	90 e1       	ldi	r25, 0x10	; 16
    1d4e:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    1d52:	84 ee       	ldi	r24, 0xE4	; 228
    1d54:	90 e1       	ldi	r25, 0x10	; 16
    1d56:	90 93 d8 10 	sts	0x10D8, r25	; 0x8010d8 <pxDelayedTaskList+0x1>
    1d5a:	80 93 d7 10 	sts	0x10D7, r24	; 0x8010d7 <pxDelayedTaskList>
    1d5e:	89 ed       	ldi	r24, 0xD9	; 217
    1d60:	90 e1       	ldi	r25, 0x10	; 16
    1d62:	90 93 d6 10 	sts	0x10D6, r25	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    1d66:	80 93 d5 10 	sts	0x10D5, r24	; 0x8010d5 <pxOverflowDelayedTaskList>
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <prvAddNewTaskToReadyList>:
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	0f 92       	push	r0
    1d7a:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <uxCurrentNumberOfTasks>
    1d84:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1d88:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1d8c:	89 2b       	or	r24, r25
    1d8e:	51 f4       	brne	.+20     	; 0x1da4 <prvAddNewTaskToReadyList+0x36>
    1d90:	d0 93 5e 11 	sts	0x115E, r29	; 0x80115e <pxCurrentTCB+0x1>
    1d94:	c0 93 5d 11 	sts	0x115D, r28	; 0x80115d <pxCurrentTCB>
    1d98:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	91 f4       	brne	.+36     	; 0x1dc4 <prvAddNewTaskToReadyList+0x56>
    1da0:	b6 df       	rcall	.-148    	; 0x1d0e <prvInitialiseTaskLists>
    1da2:	10 c0       	rjmp	.+32     	; 0x1dc4 <prvAddNewTaskToReadyList+0x56>
    1da4:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <xSchedulerRunning>
    1da8:	81 11       	cpse	r24, r1
    1daa:	0c c0       	rjmp	.+24     	; 0x1dc4 <prvAddNewTaskToReadyList+0x56>
    1dac:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1db0:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1db4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1db6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1db8:	89 17       	cp	r24, r25
    1dba:	20 f0       	brcs	.+8      	; 0x1dc4 <prvAddNewTaskToReadyList+0x56>
    1dbc:	d0 93 5e 11 	sts	0x115E, r29	; 0x80115e <pxCurrentTCB+0x1>
    1dc0:	c0 93 5d 11 	sts	0x115D, r28	; 0x80115d <pxCurrentTCB>
    1dc4:	80 91 a5 10 	lds	r24, 0x10A5	; 0x8010a5 <uxTaskNumber>
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	80 93 a5 10 	sts	0x10A5, r24	; 0x8010a5 <uxTaskNumber>
    1dce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1dd0:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    1dd4:	8e 17       	cp	r24, r30
    1dd6:	10 f4       	brcc	.+4      	; 0x1ddc <prvAddNewTaskToReadyList+0x6e>
    1dd8:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    1ddc:	8b e0       	ldi	r24, 0x0B	; 11
    1dde:	8e 9f       	mul	r24, r30
    1de0:	f0 01       	movw	r30, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	e1 51       	subi	r30, 0x11	; 17
    1de6:	ff 4e       	sbci	r31, 0xEF	; 239
    1de8:	01 80       	ldd	r0, Z+1	; 0x01
    1dea:	f2 81       	ldd	r31, Z+2	; 0x02
    1dec:	e0 2d       	mov	r30, r0
    1dee:	ff 83       	std	Y+7, r31	; 0x07
    1df0:	ee 83       	std	Y+6, r30	; 0x06
    1df2:	26 81       	ldd	r18, Z+6	; 0x06
    1df4:	37 81       	ldd	r19, Z+7	; 0x07
    1df6:	39 87       	std	Y+9, r19	; 0x09
    1df8:	28 87       	std	Y+8, r18	; 0x08
    1dfa:	a6 81       	ldd	r26, Z+6	; 0x06
    1dfc:	b7 81       	ldd	r27, Z+7	; 0x07
    1dfe:	9e 01       	movw	r18, r28
    1e00:	2e 5f       	subi	r18, 0xFE	; 254
    1e02:	3f 4f       	sbci	r19, 0xFF	; 255
    1e04:	15 96       	adiw	r26, 0x05	; 5
    1e06:	3c 93       	st	X, r19
    1e08:	2e 93       	st	-X, r18
    1e0a:	14 97       	sbiw	r26, 0x04	; 4
    1e0c:	37 83       	std	Z+7, r19	; 0x07
    1e0e:	26 83       	std	Z+6, r18	; 0x06
    1e10:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e12:	8e 9f       	mul	r24, r30
    1e14:	f0 01       	movw	r30, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	e1 51       	subi	r30, 0x11	; 17
    1e1a:	ff 4e       	sbci	r31, 0xEF	; 239
    1e1c:	fd 87       	std	Y+13, r31	; 0x0d
    1e1e:	ec 87       	std	Y+12, r30	; 0x0c
    1e20:	80 81       	ld	r24, Z
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	80 83       	st	Z, r24
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <xSchedulerRunning>
    1e2e:	88 23       	and	r24, r24
    1e30:	51 f0       	breq	.+20     	; 0x1e46 <prvAddNewTaskToReadyList+0xd8>
    1e32:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1e36:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1e3a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e3e:	98 17       	cp	r25, r24
    1e40:	10 f4       	brcc	.+4      	; 0x1e46 <prvAddNewTaskToReadyList+0xd8>
    1e42:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	08 95       	ret

00001e4c <prvCheckTasksWaitingTermination>:
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	1b c0       	rjmp	.+54     	; 0x1e88 <prvCheckTasksWaitingTermination+0x3c>
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	0f 92       	push	r0
    1e58:	e0 91 c6 10 	lds	r30, 0x10C6	; 0x8010c6 <xTasksWaitingTermination+0x7>
    1e5c:	f0 91 c7 10 	lds	r31, 0x10C7	; 0x8010c7 <xTasksWaitingTermination+0x8>
    1e60:	c0 85       	ldd	r28, Z+8	; 0x08
    1e62:	d1 85       	ldd	r29, Z+9	; 0x09
    1e64:	ce 01       	movw	r24, r28
    1e66:	02 96       	adiw	r24, 0x02	; 2
    1e68:	0e 94 8b 06 	call	0xd16	; 0xd16 <uxListRemove>
    1e6c:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    1e70:	81 50       	subi	r24, 0x01	; 1
    1e72:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <uxCurrentNumberOfTasks>
    1e76:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <uxDeletedTasksWaitingCleanUp>
    1e7a:	81 50       	subi	r24, 0x01	; 1
    1e7c:	80 93 be 10 	sts	0x10BE, r24	; 0x8010be <uxDeletedTasksWaitingCleanUp>
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	ce 01       	movw	r24, r28
    1e86:	b9 de       	rcall	.-654    	; 0x1bfa <prvDeleteTCB>
    1e88:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <uxDeletedTasksWaitingCleanUp>
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	e1 cf       	rjmp	.-62     	; 0x1e52 <prvCheckTasksWaitingTermination+0x6>
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <prvAddCurrentTaskToDelayedList>:
    1e96:	8f 92       	push	r8
    1e98:	9f 92       	push	r9
    1e9a:	af 92       	push	r10
    1e9c:	bf 92       	push	r11
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	6b 01       	movw	r12, r22
    1eac:	7c 01       	movw	r14, r24
    1eae:	c4 2f       	mov	r28, r20
    1eb0:	80 90 ae 10 	lds	r8, 0x10AE	; 0x8010ae <xTickCount>
    1eb4:	90 90 af 10 	lds	r9, 0x10AF	; 0x8010af <xTickCount+0x1>
    1eb8:	a0 90 b0 10 	lds	r10, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    1ebc:	b0 90 b1 10 	lds	r11, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    1ec0:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1ec4:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1ec8:	02 96       	adiw	r24, 0x02	; 2
    1eca:	0e 94 8b 06 	call	0xd16	; 0xd16 <uxListRemove>
    1ece:	8f ef       	ldi	r24, 0xFF	; 255
    1ed0:	c8 16       	cp	r12, r24
    1ed2:	d8 06       	cpc	r13, r24
    1ed4:	e8 06       	cpc	r14, r24
    1ed6:	f8 06       	cpc	r15, r24
    1ed8:	b1 f5       	brne	.+108    	; 0x1f46 <prvAddCurrentTaskToDelayedList+0xb0>
    1eda:	cc 23       	and	r28, r28
    1edc:	a1 f1       	breq	.+104    	; 0x1f46 <prvAddCurrentTaskToDelayedList+0xb0>
    1ede:	e3 eb       	ldi	r30, 0xB3	; 179
    1ee0:	f0 e1       	ldi	r31, 0x10	; 16
    1ee2:	a1 81       	ldd	r26, Z+1	; 0x01
    1ee4:	b2 81       	ldd	r27, Z+2	; 0x02
    1ee6:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    1eea:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1eee:	bf 83       	std	Y+7, r27	; 0x07
    1ef0:	ae 83       	std	Y+6, r26	; 0x06
    1ef2:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    1ef6:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1efa:	16 96       	adiw	r26, 0x06	; 6
    1efc:	8d 91       	ld	r24, X+
    1efe:	9c 91       	ld	r25, X
    1f00:	17 97       	sbiw	r26, 0x07	; 7
    1f02:	99 87       	std	Y+9, r25	; 0x09
    1f04:	88 87       	std	Y+8, r24	; 0x08
    1f06:	16 96       	adiw	r26, 0x06	; 6
    1f08:	cd 91       	ld	r28, X+
    1f0a:	dc 91       	ld	r29, X
    1f0c:	17 97       	sbiw	r26, 0x07	; 7
    1f0e:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1f12:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f16:	02 96       	adiw	r24, 0x02	; 2
    1f18:	9d 83       	std	Y+5, r25	; 0x05
    1f1a:	8c 83       	std	Y+4, r24	; 0x04
    1f1c:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1f20:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f24:	02 96       	adiw	r24, 0x02	; 2
    1f26:	17 96       	adiw	r26, 0x07	; 7
    1f28:	9c 93       	st	X, r25
    1f2a:	8e 93       	st	-X, r24
    1f2c:	16 97       	sbiw	r26, 0x06	; 6
    1f2e:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    1f32:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f36:	1d 96       	adiw	r26, 0x0d	; 13
    1f38:	fc 93       	st	X, r31
    1f3a:	ee 93       	st	-X, r30
    1f3c:	1c 97       	sbiw	r26, 0x0c	; 12
    1f3e:	80 81       	ld	r24, Z
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	80 83       	st	Z, r24
    1f44:	3f c0       	rjmp	.+126    	; 0x1fc4 <prvAddCurrentTaskToDelayedList+0x12e>
    1f46:	c8 0c       	add	r12, r8
    1f48:	d9 1c       	adc	r13, r9
    1f4a:	ea 1c       	adc	r14, r10
    1f4c:	fb 1c       	adc	r15, r11
    1f4e:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1f52:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f56:	c2 82       	std	Z+2, r12	; 0x02
    1f58:	d3 82       	std	Z+3, r13	; 0x03
    1f5a:	e4 82       	std	Z+4, r14	; 0x04
    1f5c:	f5 82       	std	Z+5, r15	; 0x05
    1f5e:	c8 14       	cp	r12, r8
    1f60:	d9 04       	cpc	r13, r9
    1f62:	ea 04       	cpc	r14, r10
    1f64:	fb 04       	cpc	r15, r11
    1f66:	68 f4       	brcc	.+26     	; 0x1f82 <prvAddCurrentTaskToDelayedList+0xec>
    1f68:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    1f6c:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f70:	80 91 d5 10 	lds	r24, 0x10D5	; 0x8010d5 <pxOverflowDelayedTaskList>
    1f74:	90 91 d6 10 	lds	r25, 0x10D6	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    1f78:	6e 5f       	subi	r22, 0xFE	; 254
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInsert>
    1f80:	21 c0       	rjmp	.+66     	; 0x1fc4 <prvAddCurrentTaskToDelayedList+0x12e>
    1f82:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    1f86:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f8a:	80 91 d7 10 	lds	r24, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    1f8e:	90 91 d8 10 	lds	r25, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    1f92:	6e 5f       	subi	r22, 0xFE	; 254
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInsert>
    1f9a:	80 91 a1 10 	lds	r24, 0x10A1	; 0x8010a1 <xNextTaskUnblockTime>
    1f9e:	90 91 a2 10 	lds	r25, 0x10A2	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    1fa2:	a0 91 a3 10 	lds	r26, 0x10A3	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    1fa6:	b0 91 a4 10 	lds	r27, 0x10A4	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    1faa:	c8 16       	cp	r12, r24
    1fac:	d9 06       	cpc	r13, r25
    1fae:	ea 06       	cpc	r14, r26
    1fb0:	fb 06       	cpc	r15, r27
    1fb2:	40 f4       	brcc	.+16     	; 0x1fc4 <prvAddCurrentTaskToDelayedList+0x12e>
    1fb4:	c0 92 a1 10 	sts	0x10A1, r12	; 0x8010a1 <xNextTaskUnblockTime>
    1fb8:	d0 92 a2 10 	sts	0x10A2, r13	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    1fbc:	e0 92 a3 10 	sts	0x10A3, r14	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    1fc0:	f0 92 a4 10 	sts	0x10A4, r15	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	df 90       	pop	r13
    1fce:	cf 90       	pop	r12
    1fd0:	bf 90       	pop	r11
    1fd2:	af 90       	pop	r10
    1fd4:	9f 90       	pop	r9
    1fd6:	8f 90       	pop	r8
    1fd8:	08 95       	ret

00001fda <xTaskCreate>:
    1fda:	2f 92       	push	r2
    1fdc:	3f 92       	push	r3
    1fde:	4f 92       	push	r4
    1fe0:	5f 92       	push	r5
    1fe2:	6f 92       	push	r6
    1fe4:	7f 92       	push	r7
    1fe6:	8f 92       	push	r8
    1fe8:	9f 92       	push	r9
    1fea:	af 92       	push	r10
    1fec:	bf 92       	push	r11
    1fee:	cf 92       	push	r12
    1ff0:	df 92       	push	r13
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	3c 01       	movw	r6, r24
    1ffe:	1b 01       	movw	r2, r22
    2000:	4a 01       	movw	r8, r20
    2002:	29 01       	movw	r4, r18
    2004:	ca 01       	movw	r24, r20
    2006:	0e 94 53 05 	call	0xaa6	; 0xaa6 <pvPortMalloc>
    200a:	6c 01       	movw	r12, r24
    200c:	89 2b       	or	r24, r25
    200e:	71 f0       	breq	.+28     	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2010:	84 e3       	ldi	r24, 0x34	; 52
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 53 05 	call	0xaa6	; 0xaa6 <pvPortMalloc>
    2018:	ec 01       	movw	r28, r24
    201a:	89 2b       	or	r24, r25
    201c:	19 f0       	breq	.+6      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    201e:	dc 8e       	std	Y+28, r13	; 0x1c
    2020:	cb 8e       	std	Y+27, r12	; 0x1b
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    2024:	c6 01       	movw	r24, r12
    2026:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vPortFree>
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    202c:	c0 e0       	ldi	r28, 0x00	; 0
    202e:	d0 e0       	ldi	r29, 0x00	; 0
    2030:	20 97       	sbiw	r28, 0x00	; 0
    2032:	61 f0       	breq	.+24     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2034:	a1 2c       	mov	r10, r1
    2036:	b1 2c       	mov	r11, r1
    2038:	6e 01       	movw	r12, r28
    203a:	92 01       	movw	r18, r4
    203c:	a4 01       	movw	r20, r8
    203e:	b1 01       	movw	r22, r2
    2040:	c3 01       	movw	r24, r6
    2042:	e8 dd       	rcall	.-1072   	; 0x1c14 <prvInitialiseNewTask>
    2044:	ce 01       	movw	r24, r28
    2046:	93 de       	rcall	.-730    	; 0x1d6e <prvAddNewTaskToReadyList>
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	01 c0       	rjmp	.+2      	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	7f 90       	pop	r7
    2066:	6f 90       	pop	r6
    2068:	5f 90       	pop	r5
    206a:	4f 90       	pop	r4
    206c:	3f 90       	pop	r3
    206e:	2f 90       	pop	r2
    2070:	08 95       	ret

00002072 <vTaskStartScheduler>:
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	0f 2e       	mov	r0, r31
    207a:	ff e9       	ldi	r31, 0x9F	; 159
    207c:	ef 2e       	mov	r14, r31
    207e:	f0 e1       	ldi	r31, 0x10	; 16
    2080:	ff 2e       	mov	r15, r31
    2082:	f0 2d       	mov	r31, r0
    2084:	00 e0       	ldi	r16, 0x00	; 0
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 ec       	ldi	r20, 0xC0	; 192
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	6a ed       	ldi	r22, 0xDA	; 218
    2090:	73 e0       	ldi	r23, 0x03	; 3
    2092:	8e e4       	ldi	r24, 0x4E	; 78
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	a1 df       	rcall	.-190    	; 0x1fda <xTaskCreate>
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	11 f4       	brne	.+4      	; 0x20a0 <vTaskStartScheduler+0x2e>
    209c:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <xTimerCreateTimerTask>
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	c9 f4       	brne	.+50     	; 0x20d6 <vTaskStartScheduler+0x64>
    20a4:	f8 94       	cli
    20a6:	8f ef       	ldi	r24, 0xFF	; 255
    20a8:	9f ef       	ldi	r25, 0xFF	; 255
    20aa:	dc 01       	movw	r26, r24
    20ac:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xNextTaskUnblockTime>
    20b0:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    20b4:	a0 93 a3 10 	sts	0x10A3, r26	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    20b8:	b0 93 a4 10 	sts	0x10A4, r27	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 93 ac 10 	sts	0x10AC, r24	; 0x8010ac <xSchedulerRunning>
    20c2:	10 92 ae 10 	sts	0x10AE, r1	; 0x8010ae <xTickCount>
    20c6:	10 92 af 10 	sts	0x10AF, r1	; 0x8010af <xTickCount+0x1>
    20ca:	10 92 b0 10 	sts	0x10B0, r1	; 0x8010b0 <xTickCount+0x2>
    20ce:	10 92 b1 10 	sts	0x10B1, r1	; 0x8010b1 <xTickCount+0x3>
    20d2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <xPortStartScheduler>
    20d6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	08 95       	ret

000020e2 <vTaskSuspendAll>:
    20e2:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	80 93 9e 10 	sts	0x109E, r24	; 0x80109e <uxSchedulerSuspended>
    20ec:	08 95       	ret

000020ee <xTaskGetTickCount>:
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	0f 92       	push	r0
    20f4:	60 91 ae 10 	lds	r22, 0x10AE	; 0x8010ae <xTickCount>
    20f8:	70 91 af 10 	lds	r23, 0x10AF	; 0x8010af <xTickCount+0x1>
    20fc:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    2100:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    2104:	0f 90       	pop	r0
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	08 95       	ret

0000210a <xTaskIncrementTick>:
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    211a:	81 11       	cpse	r24, r1
    211c:	05 c1       	rjmp	.+522    	; 0x2328 <__stack+0x129>
    211e:	c0 90 ae 10 	lds	r12, 0x10AE	; 0x8010ae <xTickCount>
    2122:	d0 90 af 10 	lds	r13, 0x10AF	; 0x8010af <xTickCount+0x1>
    2126:	e0 90 b0 10 	lds	r14, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    212a:	f0 90 b1 10 	lds	r15, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	c8 1a       	sub	r12, r24
    2132:	d8 0a       	sbc	r13, r24
    2134:	e8 0a       	sbc	r14, r24
    2136:	f8 0a       	sbc	r15, r24
    2138:	c0 92 ae 10 	sts	0x10AE, r12	; 0x8010ae <xTickCount>
    213c:	d0 92 af 10 	sts	0x10AF, r13	; 0x8010af <xTickCount+0x1>
    2140:	e0 92 b0 10 	sts	0x10B0, r14	; 0x8010b0 <xTickCount+0x2>
    2144:	f0 92 b1 10 	sts	0x10B1, r15	; 0x8010b1 <xTickCount+0x3>
    2148:	c1 14       	cp	r12, r1
    214a:	d1 04       	cpc	r13, r1
    214c:	e1 04       	cpc	r14, r1
    214e:	f1 04       	cpc	r15, r1
    2150:	b1 f4       	brne	.+44     	; 0x217e <xTaskIncrementTick+0x74>
    2152:	80 91 d7 10 	lds	r24, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    2156:	90 91 d8 10 	lds	r25, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    215a:	20 91 d5 10 	lds	r18, 0x10D5	; 0x8010d5 <pxOverflowDelayedTaskList>
    215e:	30 91 d6 10 	lds	r19, 0x10D6	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    2162:	30 93 d8 10 	sts	0x10D8, r19	; 0x8010d8 <pxDelayedTaskList+0x1>
    2166:	20 93 d7 10 	sts	0x10D7, r18	; 0x8010d7 <pxDelayedTaskList>
    216a:	90 93 d6 10 	sts	0x10D6, r25	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    216e:	80 93 d5 10 	sts	0x10D5, r24	; 0x8010d5 <pxOverflowDelayedTaskList>
    2172:	80 91 a6 10 	lds	r24, 0x10A6	; 0x8010a6 <xNumOfOverflows>
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	80 93 a6 10 	sts	0x10A6, r24	; 0x8010a6 <xNumOfOverflows>
    217c:	17 dd       	rcall	.-1490   	; 0x1bac <prvResetNextTaskUnblockTime>
    217e:	80 91 a1 10 	lds	r24, 0x10A1	; 0x8010a1 <xNextTaskUnblockTime>
    2182:	90 91 a2 10 	lds	r25, 0x10A2	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    2186:	a0 91 a3 10 	lds	r26, 0x10A3	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    218a:	b0 91 a4 10 	lds	r27, 0x10A4	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    218e:	c8 16       	cp	r12, r24
    2190:	d9 06       	cpc	r13, r25
    2192:	ea 06       	cpc	r14, r26
    2194:	fb 06       	cpc	r15, r27
    2196:	20 f4       	brcc	.+8      	; 0x21a0 <xTaskIncrementTick+0x96>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	b2 c0       	rjmp	.+356    	; 0x2300 <__stack+0x101>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <xTaskIncrementTick+0x98>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    21a6:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    21aa:	90 81       	ld	r25, Z
    21ac:	91 11       	cpse	r25, r1
    21ae:	0c c0       	rjmp	.+24     	; 0x21c8 <xTaskIncrementTick+0xbe>
    21b0:	4f ef       	ldi	r20, 0xFF	; 255
    21b2:	5f ef       	ldi	r21, 0xFF	; 255
    21b4:	ba 01       	movw	r22, r20
    21b6:	40 93 a1 10 	sts	0x10A1, r20	; 0x8010a1 <xNextTaskUnblockTime>
    21ba:	50 93 a2 10 	sts	0x10A2, r21	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    21be:	60 93 a3 10 	sts	0x10A3, r22	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    21c2:	70 93 a4 10 	sts	0x10A4, r23	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    21c6:	9c c0       	rjmp	.+312    	; 0x2300 <__stack+0x101>
    21c8:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    21cc:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    21d0:	07 80       	ldd	r0, Z+7	; 0x07
    21d2:	f0 85       	ldd	r31, Z+8	; 0x08
    21d4:	e0 2d       	mov	r30, r0
    21d6:	00 84       	ldd	r0, Z+8	; 0x08
    21d8:	f1 85       	ldd	r31, Z+9	; 0x09
    21da:	e0 2d       	mov	r30, r0
    21dc:	42 81       	ldd	r20, Z+2	; 0x02
    21de:	53 81       	ldd	r21, Z+3	; 0x03
    21e0:	64 81       	ldd	r22, Z+4	; 0x04
    21e2:	75 81       	ldd	r23, Z+5	; 0x05
    21e4:	c4 16       	cp	r12, r20
    21e6:	d5 06       	cpc	r13, r21
    21e8:	e6 06       	cpc	r14, r22
    21ea:	f7 06       	cpc	r15, r23
    21ec:	48 f4       	brcc	.+18     	; 0x2200 <__stack+0x1>
    21ee:	40 93 a1 10 	sts	0x10A1, r20	; 0x8010a1 <xNextTaskUnblockTime>
    21f2:	50 93 a2 10 	sts	0x10A2, r21	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    21f6:	60 93 a3 10 	sts	0x10A3, r22	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    21fa:	70 93 a4 10 	sts	0x10A4, r23	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    21fe:	80 c0       	rjmp	.+256    	; 0x2300 <__stack+0x101>
    2200:	a4 85       	ldd	r26, Z+12	; 0x0c
    2202:	b5 85       	ldd	r27, Z+13	; 0x0d
    2204:	c6 81       	ldd	r28, Z+6	; 0x06
    2206:	d7 81       	ldd	r29, Z+7	; 0x07
    2208:	20 85       	ldd	r18, Z+8	; 0x08
    220a:	31 85       	ldd	r19, Z+9	; 0x09
    220c:	3f 83       	std	Y+7, r19	; 0x07
    220e:	2e 83       	std	Y+6, r18	; 0x06
    2210:	c0 85       	ldd	r28, Z+8	; 0x08
    2212:	d1 85       	ldd	r29, Z+9	; 0x09
    2214:	26 81       	ldd	r18, Z+6	; 0x06
    2216:	37 81       	ldd	r19, Z+7	; 0x07
    2218:	3d 83       	std	Y+5, r19	; 0x05
    221a:	2c 83       	std	Y+4, r18	; 0x04
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	4d 91       	ld	r20, X+
    2220:	5c 91       	ld	r21, X
    2222:	12 97       	sbiw	r26, 0x02	; 2
    2224:	9f 01       	movw	r18, r30
    2226:	2e 5f       	subi	r18, 0xFE	; 254
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	42 17       	cp	r20, r18
    222c:	53 07       	cpc	r21, r19
    222e:	31 f4       	brne	.+12     	; 0x223c <__stack+0x3d>
    2230:	40 85       	ldd	r20, Z+8	; 0x08
    2232:	51 85       	ldd	r21, Z+9	; 0x09
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	5c 93       	st	X, r21
    2238:	4e 93       	st	-X, r20
    223a:	11 97       	sbiw	r26, 0x01	; 1
    223c:	15 86       	std	Z+13, r1	; 0x0d
    223e:	14 86       	std	Z+12, r1	; 0x0c
    2240:	9c 91       	ld	r25, X
    2242:	91 50       	subi	r25, 0x01	; 1
    2244:	9c 93       	st	X, r25
    2246:	a0 8d       	ldd	r26, Z+24	; 0x18
    2248:	b1 8d       	ldd	r27, Z+25	; 0x19
    224a:	10 97       	sbiw	r26, 0x00	; 0
    224c:	09 f1       	breq	.+66     	; 0x2290 <__stack+0x91>
    224e:	c2 89       	ldd	r28, Z+18	; 0x12
    2250:	d3 89       	ldd	r29, Z+19	; 0x13
    2252:	44 89       	ldd	r20, Z+20	; 0x14
    2254:	55 89       	ldd	r21, Z+21	; 0x15
    2256:	5f 83       	std	Y+7, r21	; 0x07
    2258:	4e 83       	std	Y+6, r20	; 0x06
    225a:	c4 89       	ldd	r28, Z+20	; 0x14
    225c:	d5 89       	ldd	r29, Z+21	; 0x15
    225e:	42 89       	ldd	r20, Z+18	; 0x12
    2260:	53 89       	ldd	r21, Z+19	; 0x13
    2262:	5d 83       	std	Y+5, r21	; 0x05
    2264:	4c 83       	std	Y+4, r20	; 0x04
    2266:	11 96       	adiw	r26, 0x01	; 1
    2268:	6d 91       	ld	r22, X+
    226a:	7c 91       	ld	r23, X
    226c:	12 97       	sbiw	r26, 0x02	; 2
    226e:	af 01       	movw	r20, r30
    2270:	42 5f       	subi	r20, 0xF2	; 242
    2272:	5f 4f       	sbci	r21, 0xFF	; 255
    2274:	64 17       	cp	r22, r20
    2276:	75 07       	cpc	r23, r21
    2278:	31 f4       	brne	.+12     	; 0x2286 <__stack+0x87>
    227a:	44 89       	ldd	r20, Z+20	; 0x14
    227c:	55 89       	ldd	r21, Z+21	; 0x15
    227e:	12 96       	adiw	r26, 0x02	; 2
    2280:	5c 93       	st	X, r21
    2282:	4e 93       	st	-X, r20
    2284:	11 97       	sbiw	r26, 0x01	; 1
    2286:	11 8e       	std	Z+25, r1	; 0x19
    2288:	10 8e       	std	Z+24, r1	; 0x18
    228a:	9c 91       	ld	r25, X
    228c:	91 50       	subi	r25, 0x01	; 1
    228e:	9c 93       	st	X, r25
    2290:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2292:	90 91 ad 10 	lds	r25, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    2296:	9a 17       	cp	r25, r26
    2298:	10 f4       	brcc	.+4      	; 0x229e <__stack+0x9f>
    229a:	a0 93 ad 10 	sts	0x10AD, r26	; 0x8010ad <uxTopReadyPriority>
    229e:	9b e0       	ldi	r25, 0x0B	; 11
    22a0:	9a 9f       	mul	r25, r26
    22a2:	d0 01       	movw	r26, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	a1 51       	subi	r26, 0x11	; 17
    22a8:	bf 4e       	sbci	r27, 0xEF	; 239
    22aa:	11 96       	adiw	r26, 0x01	; 1
    22ac:	0d 90       	ld	r0, X+
    22ae:	bc 91       	ld	r27, X
    22b0:	a0 2d       	mov	r26, r0
    22b2:	b7 83       	std	Z+7, r27	; 0x07
    22b4:	a6 83       	std	Z+6, r26	; 0x06
    22b6:	16 96       	adiw	r26, 0x06	; 6
    22b8:	4d 91       	ld	r20, X+
    22ba:	5c 91       	ld	r21, X
    22bc:	17 97       	sbiw	r26, 0x07	; 7
    22be:	51 87       	std	Z+9, r21	; 0x09
    22c0:	40 87       	std	Z+8, r20	; 0x08
    22c2:	16 96       	adiw	r26, 0x06	; 6
    22c4:	cd 91       	ld	r28, X+
    22c6:	dc 91       	ld	r29, X
    22c8:	17 97       	sbiw	r26, 0x07	; 7
    22ca:	3d 83       	std	Y+5, r19	; 0x05
    22cc:	2c 83       	std	Y+4, r18	; 0x04
    22ce:	17 96       	adiw	r26, 0x07	; 7
    22d0:	3c 93       	st	X, r19
    22d2:	2e 93       	st	-X, r18
    22d4:	16 97       	sbiw	r26, 0x06	; 6
    22d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22d8:	9a 9f       	mul	r25, r26
    22da:	d0 01       	movw	r26, r0
    22dc:	11 24       	eor	r1, r1
    22de:	a1 51       	subi	r26, 0x11	; 17
    22e0:	bf 4e       	sbci	r27, 0xEF	; 239
    22e2:	b5 87       	std	Z+13, r27	; 0x0d
    22e4:	a4 87       	std	Z+12, r26	; 0x0c
    22e6:	9c 91       	ld	r25, X
    22e8:	9f 5f       	subi	r25, 0xFF	; 255
    22ea:	9c 93       	st	X, r25
    22ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    22ee:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    22f2:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    22f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    22f8:	29 17       	cp	r18, r25
    22fa:	08 f0       	brcs	.+2      	; 0x22fe <__stack+0xff>
    22fc:	4f cf       	rjmp	.-354    	; 0x219c <xTaskIncrementTick+0x92>
    22fe:	51 cf       	rjmp	.-350    	; 0x21a2 <xTaskIncrementTick+0x98>
    2300:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2304:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2308:	e2 8d       	ldd	r30, Z+26	; 0x1a
    230a:	9b e0       	ldi	r25, 0x0B	; 11
    230c:	e9 9f       	mul	r30, r25
    230e:	f0 01       	movw	r30, r0
    2310:	11 24       	eor	r1, r1
    2312:	e1 51       	subi	r30, 0x11	; 17
    2314:	ff 4e       	sbci	r31, 0xEF	; 239
    2316:	90 81       	ld	r25, Z
    2318:	92 30       	cpi	r25, 0x02	; 2
    231a:	08 f0       	brcs	.+2      	; 0x231e <__stack+0x11f>
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 91 a7 10 	lds	r25, 0x10A7	; 0x8010a7 <xYieldPending>
    2322:	91 11       	cpse	r25, r1
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <__stack+0x153>
    2326:	16 c0       	rjmp	.+44     	; 0x2354 <__stack+0x155>
    2328:	80 91 a8 10 	lds	r24, 0x10A8	; 0x8010a8 <xPendedTicks>
    232c:	90 91 a9 10 	lds	r25, 0x10A9	; 0x8010a9 <xPendedTicks+0x1>
    2330:	a0 91 aa 10 	lds	r26, 0x10AA	; 0x8010aa <xPendedTicks+0x2>
    2334:	b0 91 ab 10 	lds	r27, 0x10AB	; 0x8010ab <xPendedTicks+0x3>
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	a1 1d       	adc	r26, r1
    233c:	b1 1d       	adc	r27, r1
    233e:	80 93 a8 10 	sts	0x10A8, r24	; 0x8010a8 <xPendedTicks>
    2342:	90 93 a9 10 	sts	0x10A9, r25	; 0x8010a9 <xPendedTicks+0x1>
    2346:	a0 93 aa 10 	sts	0x10AA, r26	; 0x8010aa <xPendedTicks+0x2>
    234a:	b0 93 ab 10 	sts	0x10AB, r27	; 0x8010ab <xPendedTicks+0x3>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <__stack+0x155>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	08 95       	ret

00002362 <xTaskResumeAll>:
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	0f 92       	push	r0
    2374:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    2378:	81 50       	subi	r24, 0x01	; 1
    237a:	80 93 9e 10 	sts	0x109E, r24	; 0x80109e <uxSchedulerSuspended>
    237e:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    2382:	81 11       	cpse	r24, r1
    2384:	be c0       	rjmp	.+380    	; 0x2502 <xTaskResumeAll+0x1a0>
    2386:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    238a:	81 11       	cpse	r24, r1
    238c:	88 c0       	rjmp	.+272    	; 0x249e <xTaskResumeAll+0x13c>
    238e:	bc c0       	rjmp	.+376    	; 0x2508 <xTaskResumeAll+0x1a6>
    2390:	e0 91 d1 10 	lds	r30, 0x10D1	; 0x8010d1 <xPendingReadyList+0x7>
    2394:	f0 91 d2 10 	lds	r31, 0x10D2	; 0x8010d2 <xPendingReadyList+0x8>
    2398:	00 84       	ldd	r0, Z+8	; 0x08
    239a:	f1 85       	ldd	r31, Z+9	; 0x09
    239c:	e0 2d       	mov	r30, r0
    239e:	a0 8d       	ldd	r26, Z+24	; 0x18
    23a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    23a2:	c2 89       	ldd	r28, Z+18	; 0x12
    23a4:	d3 89       	ldd	r29, Z+19	; 0x13
    23a6:	84 89       	ldd	r24, Z+20	; 0x14
    23a8:	95 89       	ldd	r25, Z+21	; 0x15
    23aa:	9f 83       	std	Y+7, r25	; 0x07
    23ac:	8e 83       	std	Y+6, r24	; 0x06
    23ae:	c4 89       	ldd	r28, Z+20	; 0x14
    23b0:	d5 89       	ldd	r29, Z+21	; 0x15
    23b2:	82 89       	ldd	r24, Z+18	; 0x12
    23b4:	93 89       	ldd	r25, Z+19	; 0x13
    23b6:	9d 83       	std	Y+5, r25	; 0x05
    23b8:	8c 83       	std	Y+4, r24	; 0x04
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	2d 91       	ld	r18, X+
    23be:	3c 91       	ld	r19, X
    23c0:	12 97       	sbiw	r26, 0x02	; 2
    23c2:	cf 01       	movw	r24, r30
    23c4:	0e 96       	adiw	r24, 0x0e	; 14
    23c6:	28 17       	cp	r18, r24
    23c8:	39 07       	cpc	r19, r25
    23ca:	31 f4       	brne	.+12     	; 0x23d8 <xTaskResumeAll+0x76>
    23cc:	84 89       	ldd	r24, Z+20	; 0x14
    23ce:	95 89       	ldd	r25, Z+21	; 0x15
    23d0:	12 96       	adiw	r26, 0x02	; 2
    23d2:	9c 93       	st	X, r25
    23d4:	8e 93       	st	-X, r24
    23d6:	11 97       	sbiw	r26, 0x01	; 1
    23d8:	11 8e       	std	Z+25, r1	; 0x19
    23da:	10 8e       	std	Z+24, r1	; 0x18
    23dc:	8c 91       	ld	r24, X
    23de:	81 50       	subi	r24, 0x01	; 1
    23e0:	8c 93       	st	X, r24
    23e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    23e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    23e6:	c6 81       	ldd	r28, Z+6	; 0x06
    23e8:	d7 81       	ldd	r29, Z+7	; 0x07
    23ea:	80 85       	ldd	r24, Z+8	; 0x08
    23ec:	91 85       	ldd	r25, Z+9	; 0x09
    23ee:	9f 83       	std	Y+7, r25	; 0x07
    23f0:	8e 83       	std	Y+6, r24	; 0x06
    23f2:	c0 85       	ldd	r28, Z+8	; 0x08
    23f4:	d1 85       	ldd	r29, Z+9	; 0x09
    23f6:	86 81       	ldd	r24, Z+6	; 0x06
    23f8:	97 81       	ldd	r25, Z+7	; 0x07
    23fa:	9d 83       	std	Y+5, r25	; 0x05
    23fc:	8c 83       	std	Y+4, r24	; 0x04
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	8d 91       	ld	r24, X+
    2402:	9c 91       	ld	r25, X
    2404:	12 97       	sbiw	r26, 0x02	; 2
    2406:	9f 01       	movw	r18, r30
    2408:	2e 5f       	subi	r18, 0xFE	; 254
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	82 17       	cp	r24, r18
    240e:	93 07       	cpc	r25, r19
    2410:	31 f4       	brne	.+12     	; 0x241e <xTaskResumeAll+0xbc>
    2412:	80 85       	ldd	r24, Z+8	; 0x08
    2414:	91 85       	ldd	r25, Z+9	; 0x09
    2416:	12 96       	adiw	r26, 0x02	; 2
    2418:	9c 93       	st	X, r25
    241a:	8e 93       	st	-X, r24
    241c:	11 97       	sbiw	r26, 0x01	; 1
    241e:	15 86       	std	Z+13, r1	; 0x0d
    2420:	14 86       	std	Z+12, r1	; 0x0c
    2422:	8c 91       	ld	r24, X
    2424:	81 50       	subi	r24, 0x01	; 1
    2426:	8c 93       	st	X, r24
    2428:	a2 8d       	ldd	r26, Z+26	; 0x1a
    242a:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    242e:	8a 17       	cp	r24, r26
    2430:	10 f4       	brcc	.+4      	; 0x2436 <xTaskResumeAll+0xd4>
    2432:	a0 93 ad 10 	sts	0x10AD, r26	; 0x8010ad <uxTopReadyPriority>
    2436:	8b e0       	ldi	r24, 0x0B	; 11
    2438:	8a 9f       	mul	r24, r26
    243a:	d0 01       	movw	r26, r0
    243c:	11 24       	eor	r1, r1
    243e:	a1 51       	subi	r26, 0x11	; 17
    2440:	bf 4e       	sbci	r27, 0xEF	; 239
    2442:	11 96       	adiw	r26, 0x01	; 1
    2444:	0d 90       	ld	r0, X+
    2446:	bc 91       	ld	r27, X
    2448:	a0 2d       	mov	r26, r0
    244a:	b7 83       	std	Z+7, r27	; 0x07
    244c:	a6 83       	std	Z+6, r26	; 0x06
    244e:	16 96       	adiw	r26, 0x06	; 6
    2450:	4d 91       	ld	r20, X+
    2452:	5c 91       	ld	r21, X
    2454:	17 97       	sbiw	r26, 0x07	; 7
    2456:	51 87       	std	Z+9, r21	; 0x09
    2458:	40 87       	std	Z+8, r20	; 0x08
    245a:	16 96       	adiw	r26, 0x06	; 6
    245c:	cd 91       	ld	r28, X+
    245e:	dc 91       	ld	r29, X
    2460:	17 97       	sbiw	r26, 0x07	; 7
    2462:	3d 83       	std	Y+5, r19	; 0x05
    2464:	2c 83       	std	Y+4, r18	; 0x04
    2466:	17 96       	adiw	r26, 0x07	; 7
    2468:	3c 93       	st	X, r19
    246a:	2e 93       	st	-X, r18
    246c:	16 97       	sbiw	r26, 0x06	; 6
    246e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2470:	8a 9f       	mul	r24, r26
    2472:	d0 01       	movw	r26, r0
    2474:	11 24       	eor	r1, r1
    2476:	a1 51       	subi	r26, 0x11	; 17
    2478:	bf 4e       	sbci	r27, 0xEF	; 239
    247a:	b5 87       	std	Z+13, r27	; 0x0d
    247c:	a4 87       	std	Z+12, r26	; 0x0c
    247e:	8c 91       	ld	r24, X
    2480:	8f 5f       	subi	r24, 0xFF	; 255
    2482:	8c 93       	st	X, r24
    2484:	92 8d       	ldd	r25, Z+26	; 0x1a
    2486:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    248a:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    248e:	5a 96       	adiw	r26, 0x1a	; 26
    2490:	8c 91       	ld	r24, X
    2492:	98 17       	cp	r25, r24
    2494:	30 f0       	brcs	.+12     	; 0x24a2 <xTaskResumeAll+0x140>
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <xTaskResumeAll+0x140>
    249e:	e0 e0       	ldi	r30, 0x00	; 0
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <xPendingReadyList>
    24a6:	81 11       	cpse	r24, r1
    24a8:	73 cf       	rjmp	.-282    	; 0x2390 <xTaskResumeAll+0x2e>
    24aa:	ef 2b       	or	r30, r31
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <xTaskResumeAll+0x14e>
    24ae:	7e db       	rcall	.-2308   	; 0x1bac <prvResetNextTaskUnblockTime>
    24b0:	c0 90 a8 10 	lds	r12, 0x10A8	; 0x8010a8 <xPendedTicks>
    24b4:	d0 90 a9 10 	lds	r13, 0x10A9	; 0x8010a9 <xPendedTicks+0x1>
    24b8:	e0 90 aa 10 	lds	r14, 0x10AA	; 0x8010aa <xPendedTicks+0x2>
    24bc:	f0 90 ab 10 	lds	r15, 0x10AB	; 0x8010ab <xPendedTicks+0x3>
    24c0:	c1 14       	cp	r12, r1
    24c2:	d1 04       	cpc	r13, r1
    24c4:	e1 04       	cpc	r14, r1
    24c6:	f1 04       	cpc	r15, r1
    24c8:	a1 f0       	breq	.+40     	; 0x24f2 <xTaskResumeAll+0x190>
    24ca:	1f de       	rcall	.-962    	; 0x210a <xTaskIncrementTick>
    24cc:	88 23       	and	r24, r24
    24ce:	19 f0       	breq	.+6      	; 0x24d6 <xTaskResumeAll+0x174>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	c8 1a       	sub	r12, r24
    24da:	d1 08       	sbc	r13, r1
    24dc:	e1 08       	sbc	r14, r1
    24de:	f1 08       	sbc	r15, r1
    24e0:	a1 f7       	brne	.-24     	; 0x24ca <xTaskResumeAll+0x168>
    24e2:	10 92 a8 10 	sts	0x10A8, r1	; 0x8010a8 <xPendedTicks>
    24e6:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <xPendedTicks+0x1>
    24ea:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <xPendedTicks+0x2>
    24ee:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <xPendedTicks+0x3>
    24f2:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <xYieldPending>
    24f6:	88 23       	and	r24, r24
    24f8:	31 f0       	breq	.+12     	; 0x2506 <xTaskResumeAll+0x1a4>
    24fa:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <xTaskResumeAll+0x1a6>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <xTaskResumeAll+0x1a6>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	0f 90       	pop	r0
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	08 95       	ret

0000251a <xTaskDelayUntil>:
    251a:	8f 92       	push	r8
    251c:	9f 92       	push	r9
    251e:	af 92       	push	r10
    2520:	bf 92       	push	r11
    2522:	cf 92       	push	r12
    2524:	df 92       	push	r13
    2526:	ef 92       	push	r14
    2528:	ff 92       	push	r15
    252a:	1f 93       	push	r17
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	ec 01       	movw	r28, r24
    2532:	6a 01       	movw	r12, r20
    2534:	7b 01       	movw	r14, r22
    2536:	d5 dd       	rcall	.-1110   	; 0x20e2 <vTaskSuspendAll>
    2538:	80 90 ae 10 	lds	r8, 0x10AE	; 0x8010ae <xTickCount>
    253c:	90 90 af 10 	lds	r9, 0x10AF	; 0x8010af <xTickCount+0x1>
    2540:	a0 90 b0 10 	lds	r10, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    2544:	b0 90 b1 10 	lds	r11, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    2548:	88 81       	ld	r24, Y
    254a:	99 81       	ldd	r25, Y+1	; 0x01
    254c:	aa 81       	ldd	r26, Y+2	; 0x02
    254e:	bb 81       	ldd	r27, Y+3	; 0x03
    2550:	ac 01       	movw	r20, r24
    2552:	bd 01       	movw	r22, r26
    2554:	4c 0d       	add	r20, r12
    2556:	5d 1d       	adc	r21, r13
    2558:	6e 1d       	adc	r22, r14
    255a:	7f 1d       	adc	r23, r15
    255c:	88 16       	cp	r8, r24
    255e:	99 06       	cpc	r9, r25
    2560:	aa 06       	cpc	r10, r26
    2562:	bb 06       	cpc	r11, r27
    2564:	60 f4       	brcc	.+24     	; 0x257e <xTaskDelayUntil+0x64>
    2566:	48 17       	cp	r20, r24
    2568:	59 07       	cpc	r21, r25
    256a:	6a 07       	cpc	r22, r26
    256c:	7b 07       	cpc	r23, r27
    256e:	98 f4       	brcc	.+38     	; 0x2596 <xTaskDelayUntil+0x7c>
    2570:	84 16       	cp	r8, r20
    2572:	95 06       	cpc	r9, r21
    2574:	a6 06       	cpc	r10, r22
    2576:	b7 06       	cpc	r11, r23
    2578:	80 f0       	brcs	.+32     	; 0x259a <xTaskDelayUntil+0x80>
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	13 c0       	rjmp	.+38     	; 0x25a4 <xTaskDelayUntil+0x8a>
    257e:	48 17       	cp	r20, r24
    2580:	59 07       	cpc	r21, r25
    2582:	6a 07       	cpc	r22, r26
    2584:	7b 07       	cpc	r23, r27
    2586:	58 f0       	brcs	.+22     	; 0x259e <xTaskDelayUntil+0x84>
    2588:	84 16       	cp	r8, r20
    258a:	95 06       	cpc	r9, r21
    258c:	a6 06       	cpc	r10, r22
    258e:	b7 06       	cpc	r11, r23
    2590:	40 f0       	brcs	.+16     	; 0x25a2 <xTaskDelayUntil+0x88>
    2592:	10 e0       	ldi	r17, 0x00	; 0
    2594:	07 c0       	rjmp	.+14     	; 0x25a4 <xTaskDelayUntil+0x8a>
    2596:	10 e0       	ldi	r17, 0x00	; 0
    2598:	05 c0       	rjmp	.+10     	; 0x25a4 <xTaskDelayUntil+0x8a>
    259a:	11 e0       	ldi	r17, 0x01	; 1
    259c:	03 c0       	rjmp	.+6      	; 0x25a4 <xTaskDelayUntil+0x8a>
    259e:	11 e0       	ldi	r17, 0x01	; 1
    25a0:	01 c0       	rjmp	.+2      	; 0x25a4 <xTaskDelayUntil+0x8a>
    25a2:	11 e0       	ldi	r17, 0x01	; 1
    25a4:	48 83       	st	Y, r20
    25a6:	59 83       	std	Y+1, r21	; 0x01
    25a8:	6a 83       	std	Y+2, r22	; 0x02
    25aa:	7b 83       	std	Y+3, r23	; 0x03
    25ac:	11 23       	and	r17, r17
    25ae:	41 f0       	breq	.+16     	; 0x25c0 <xTaskDelayUntil+0xa6>
    25b0:	cb 01       	movw	r24, r22
    25b2:	ba 01       	movw	r22, r20
    25b4:	68 19       	sub	r22, r8
    25b6:	79 09       	sbc	r23, r9
    25b8:	8a 09       	sbc	r24, r10
    25ba:	9b 09       	sbc	r25, r11
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	6b dc       	rcall	.-1834   	; 0x1e96 <prvAddCurrentTaskToDelayedList>
    25c0:	d0 de       	rcall	.-608    	; 0x2362 <xTaskResumeAll>
    25c2:	81 11       	cpse	r24, r1
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <xTaskDelayUntil+0xb0>
    25c6:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    25ca:	81 2f       	mov	r24, r17
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	1f 91       	pop	r17
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	08 95       	ret

000025e4 <vTaskDelay>:
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	6b 01       	movw	r12, r22
    25ee:	7c 01       	movw	r14, r24
    25f0:	67 2b       	or	r22, r23
    25f2:	68 2b       	or	r22, r24
    25f4:	69 2b       	or	r22, r25
    25f6:	39 f0       	breq	.+14     	; 0x2606 <vTaskDelay+0x22>
    25f8:	74 dd       	rcall	.-1304   	; 0x20e2 <vTaskSuspendAll>
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	c7 01       	movw	r24, r14
    25fe:	b6 01       	movw	r22, r12
    2600:	4a dc       	rcall	.-1900   	; 0x1e96 <prvAddCurrentTaskToDelayedList>
    2602:	af de       	rcall	.-674    	; 0x2362 <xTaskResumeAll>
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <vTaskDelay+0x24>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	81 11       	cpse	r24, r1
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <vTaskDelay+0x2c>
    260c:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    2610:	ff 90       	pop	r15
    2612:	ef 90       	pop	r14
    2614:	df 90       	pop	r13
    2616:	cf 90       	pop	r12
    2618:	08 95       	ret

0000261a <vTaskSwitchContext>:
    261a:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    261e:	88 23       	and	r24, r24
    2620:	21 f0       	breq	.+8      	; 0x262a <vTaskSwitchContext+0x10>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    2628:	08 95       	ret
    262a:	10 92 a7 10 	sts	0x10A7, r1	; 0x8010a7 <xYieldPending>
    262e:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2632:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2636:	20 81       	ld	r18, Z
    2638:	31 81       	ldd	r19, Z+1	; 0x01
    263a:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    263e:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2642:	83 8d       	ldd	r24, Z+27	; 0x1b
    2644:	94 8d       	ldd	r25, Z+28	; 0x1c
    2646:	82 17       	cp	r24, r18
    2648:	93 07       	cpc	r25, r19
    264a:	60 f0       	brcs	.+24     	; 0x2664 <vTaskSwitchContext+0x4a>
    264c:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    2650:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2654:	63 5e       	subi	r22, 0xE3	; 227
    2656:	7f 4f       	sbci	r23, 0xFF	; 255
    2658:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    265c:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2660:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <vApplicationStackOverflowHook>
    2664:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    2668:	01 c0       	rjmp	.+2      	; 0x266c <vTaskSwitchContext+0x52>
    266a:	81 50       	subi	r24, 0x01	; 1
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	9b e0       	ldi	r25, 0x0B	; 11
    2672:	92 9f       	mul	r25, r18
    2674:	f0 01       	movw	r30, r0
    2676:	93 9f       	mul	r25, r19
    2678:	f0 0d       	add	r31, r0
    267a:	11 24       	eor	r1, r1
    267c:	e1 51       	subi	r30, 0x11	; 17
    267e:	ff 4e       	sbci	r31, 0xEF	; 239
    2680:	90 81       	ld	r25, Z
    2682:	99 23       	and	r25, r25
    2684:	91 f3       	breq	.-28     	; 0x266a <vTaskSwitchContext+0x50>
    2686:	9b e0       	ldi	r25, 0x0B	; 11
    2688:	92 9f       	mul	r25, r18
    268a:	a0 01       	movw	r20, r0
    268c:	93 9f       	mul	r25, r19
    268e:	50 0d       	add	r21, r0
    2690:	11 24       	eor	r1, r1
    2692:	df 01       	movw	r26, r30
    2694:	01 80       	ldd	r0, Z+1	; 0x01
    2696:	f2 81       	ldd	r31, Z+2	; 0x02
    2698:	e0 2d       	mov	r30, r0
    269a:	04 80       	ldd	r0, Z+4	; 0x04
    269c:	f5 81       	ldd	r31, Z+5	; 0x05
    269e:	e0 2d       	mov	r30, r0
    26a0:	12 96       	adiw	r26, 0x02	; 2
    26a2:	fc 93       	st	X, r31
    26a4:	ee 93       	st	-X, r30
    26a6:	11 97       	sbiw	r26, 0x01	; 1
    26a8:	4e 50       	subi	r20, 0x0E	; 14
    26aa:	5f 4e       	sbci	r21, 0xEF	; 239
    26ac:	e4 17       	cp	r30, r20
    26ae:	f5 07       	cpc	r31, r21
    26b0:	29 f4       	brne	.+10     	; 0x26bc <vTaskSwitchContext+0xa2>
    26b2:	44 81       	ldd	r20, Z+4	; 0x04
    26b4:	55 81       	ldd	r21, Z+5	; 0x05
    26b6:	fd 01       	movw	r30, r26
    26b8:	52 83       	std	Z+2, r21	; 0x02
    26ba:	41 83       	std	Z+1, r20	; 0x01
    26bc:	9b e0       	ldi	r25, 0x0B	; 11
    26be:	92 9f       	mul	r25, r18
    26c0:	f0 01       	movw	r30, r0
    26c2:	93 9f       	mul	r25, r19
    26c4:	f0 0d       	add	r31, r0
    26c6:	11 24       	eor	r1, r1
    26c8:	e1 51       	subi	r30, 0x11	; 17
    26ca:	ff 4e       	sbci	r31, 0xEF	; 239
    26cc:	01 80       	ldd	r0, Z+1	; 0x01
    26ce:	f2 81       	ldd	r31, Z+2	; 0x02
    26d0:	e0 2d       	mov	r30, r0
    26d2:	20 85       	ldd	r18, Z+8	; 0x08
    26d4:	31 85       	ldd	r19, Z+9	; 0x09
    26d6:	30 93 5e 11 	sts	0x115E, r19	; 0x80115e <pxCurrentTCB+0x1>
    26da:	20 93 5d 11 	sts	0x115D, r18	; 0x80115d <pxCurrentTCB>
    26de:	80 93 ad 10 	sts	0x10AD, r24	; 0x8010ad <uxTopReadyPriority>
    26e2:	08 95       	ret

000026e4 <vTaskPlaceOnEventList>:
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	ff 92       	push	r15
    26ec:	6a 01       	movw	r12, r20
    26ee:	7b 01       	movw	r14, r22
    26f0:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    26f4:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    26f8:	62 5f       	subi	r22, 0xF2	; 242
    26fa:	7f 4f       	sbci	r23, 0xFF	; 255
    26fc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInsert>
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	c7 01       	movw	r24, r14
    2704:	b6 01       	movw	r22, r12
    2706:	c7 db       	rcall	.-2162   	; 0x1e96 <prvAddCurrentTaskToDelayedList>
    2708:	ff 90       	pop	r15
    270a:	ef 90       	pop	r14
    270c:	df 90       	pop	r13
    270e:	cf 90       	pop	r12
    2710:	08 95       	ret

00002712 <vTaskPlaceOnUnorderedEventList>:
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	fc 01       	movw	r30, r24
    271c:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    2720:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2724:	70 68       	ori	r23, 0x80	; 128
    2726:	1e 96       	adiw	r26, 0x0e	; 14
    2728:	4d 93       	st	X+, r20
    272a:	5d 93       	st	X+, r21
    272c:	6d 93       	st	X+, r22
    272e:	7c 93       	st	X, r23
    2730:	51 97       	sbiw	r26, 0x11	; 17
    2732:	a1 81       	ldd	r26, Z+1	; 0x01
    2734:	b2 81       	ldd	r27, Z+2	; 0x02
    2736:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    273a:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    273e:	bb 8b       	std	Y+19, r27	; 0x13
    2740:	aa 8b       	std	Y+18, r26	; 0x12
    2742:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    2746:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    274a:	16 96       	adiw	r26, 0x06	; 6
    274c:	8d 91       	ld	r24, X+
    274e:	9c 91       	ld	r25, X
    2750:	17 97       	sbiw	r26, 0x07	; 7
    2752:	9d 8b       	std	Y+21, r25	; 0x15
    2754:	8c 8b       	std	Y+20, r24	; 0x14
    2756:	16 96       	adiw	r26, 0x06	; 6
    2758:	cd 91       	ld	r28, X+
    275a:	dc 91       	ld	r29, X
    275c:	17 97       	sbiw	r26, 0x07	; 7
    275e:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    2762:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2766:	0e 96       	adiw	r24, 0x0e	; 14
    2768:	9d 83       	std	Y+5, r25	; 0x05
    276a:	8c 83       	std	Y+4, r24	; 0x04
    276c:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    2770:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2774:	0e 96       	adiw	r24, 0x0e	; 14
    2776:	17 96       	adiw	r26, 0x07	; 7
    2778:	9c 93       	st	X, r25
    277a:	8e 93       	st	-X, r24
    277c:	16 97       	sbiw	r26, 0x06	; 6
    277e:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    2782:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2786:	59 96       	adiw	r26, 0x19	; 25
    2788:	fc 93       	st	X, r31
    278a:	ee 93       	st	-X, r30
    278c:	58 97       	sbiw	r26, 0x18	; 24
    278e:	80 81       	ld	r24, Z
    2790:	8f 5f       	subi	r24, 0xFF	; 255
    2792:	80 83       	st	Z, r24
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	c9 01       	movw	r24, r18
    2798:	b8 01       	movw	r22, r16
    279a:	7d db       	rcall	.-2310   	; 0x1e96 <prvAddCurrentTaskToDelayedList>
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <vTaskPlaceOnEventListRestricted>:
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	fc 01       	movw	r30, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	ba 01       	movw	r22, r20
    27b0:	a1 81       	ldd	r26, Z+1	; 0x01
    27b2:	b2 81       	ldd	r27, Z+2	; 0x02
    27b4:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    27b8:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    27bc:	bb 8b       	std	Y+19, r27	; 0x13
    27be:	aa 8b       	std	Y+18, r26	; 0x12
    27c0:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    27c4:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    27c8:	16 96       	adiw	r26, 0x06	; 6
    27ca:	4d 91       	ld	r20, X+
    27cc:	5c 91       	ld	r21, X
    27ce:	17 97       	sbiw	r26, 0x07	; 7
    27d0:	5d 8b       	std	Y+21, r21	; 0x15
    27d2:	4c 8b       	std	Y+20, r20	; 0x14
    27d4:	16 96       	adiw	r26, 0x06	; 6
    27d6:	cd 91       	ld	r28, X+
    27d8:	dc 91       	ld	r29, X
    27da:	17 97       	sbiw	r26, 0x07	; 7
    27dc:	40 91 5d 11 	lds	r20, 0x115D	; 0x80115d <pxCurrentTCB>
    27e0:	50 91 5e 11 	lds	r21, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    27e4:	42 5f       	subi	r20, 0xF2	; 242
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255
    27e8:	5d 83       	std	Y+5, r21	; 0x05
    27ea:	4c 83       	std	Y+4, r20	; 0x04
    27ec:	40 91 5d 11 	lds	r20, 0x115D	; 0x80115d <pxCurrentTCB>
    27f0:	50 91 5e 11 	lds	r21, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    27f4:	42 5f       	subi	r20, 0xF2	; 242
    27f6:	5f 4f       	sbci	r21, 0xFF	; 255
    27f8:	17 96       	adiw	r26, 0x07	; 7
    27fa:	5c 93       	st	X, r21
    27fc:	4e 93       	st	-X, r20
    27fe:	16 97       	sbiw	r26, 0x06	; 6
    2800:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    2804:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2808:	59 96       	adiw	r26, 0x19	; 25
    280a:	fc 93       	st	X, r31
    280c:	ee 93       	st	-X, r30
    280e:	58 97       	sbiw	r26, 0x18	; 24
    2810:	30 81       	ld	r19, Z
    2812:	3f 5f       	subi	r19, 0xFF	; 255
    2814:	30 83       	st	Z, r19
    2816:	22 23       	and	r18, r18
    2818:	19 f0       	breq	.+6      	; 0x2820 <vTaskPlaceOnEventListRestricted+0x7a>
    281a:	6f ef       	ldi	r22, 0xFF	; 255
    281c:	7f ef       	ldi	r23, 0xFF	; 255
    281e:	cb 01       	movw	r24, r22
    2820:	42 2f       	mov	r20, r18
    2822:	39 db       	rcall	.-2446   	; 0x1e96 <prvAddCurrentTaskToDelayedList>
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	08 95       	ret

0000282a <xTaskRemoveFromEventList>:
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	dc 01       	movw	r26, r24
    2830:	17 96       	adiw	r26, 0x07	; 7
    2832:	ed 91       	ld	r30, X+
    2834:	fc 91       	ld	r31, X
    2836:	18 97       	sbiw	r26, 0x08	; 8
    2838:	00 84       	ldd	r0, Z+8	; 0x08
    283a:	f1 85       	ldd	r31, Z+9	; 0x09
    283c:	e0 2d       	mov	r30, r0
    283e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2840:	b1 8d       	ldd	r27, Z+25	; 0x19
    2842:	c2 89       	ldd	r28, Z+18	; 0x12
    2844:	d3 89       	ldd	r29, Z+19	; 0x13
    2846:	84 89       	ldd	r24, Z+20	; 0x14
    2848:	95 89       	ldd	r25, Z+21	; 0x15
    284a:	9f 83       	std	Y+7, r25	; 0x07
    284c:	8e 83       	std	Y+6, r24	; 0x06
    284e:	c4 89       	ldd	r28, Z+20	; 0x14
    2850:	d5 89       	ldd	r29, Z+21	; 0x15
    2852:	82 89       	ldd	r24, Z+18	; 0x12
    2854:	93 89       	ldd	r25, Z+19	; 0x13
    2856:	9d 83       	std	Y+5, r25	; 0x05
    2858:	8c 83       	std	Y+4, r24	; 0x04
    285a:	11 96       	adiw	r26, 0x01	; 1
    285c:	8d 91       	ld	r24, X+
    285e:	9c 91       	ld	r25, X
    2860:	12 97       	sbiw	r26, 0x02	; 2
    2862:	9f 01       	movw	r18, r30
    2864:	22 5f       	subi	r18, 0xF2	; 242
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	82 17       	cp	r24, r18
    286a:	93 07       	cpc	r25, r19
    286c:	31 f4       	brne	.+12     	; 0x287a <xTaskRemoveFromEventList+0x50>
    286e:	84 89       	ldd	r24, Z+20	; 0x14
    2870:	95 89       	ldd	r25, Z+21	; 0x15
    2872:	12 96       	adiw	r26, 0x02	; 2
    2874:	9c 93       	st	X, r25
    2876:	8e 93       	st	-X, r24
    2878:	11 97       	sbiw	r26, 0x01	; 1
    287a:	11 8e       	std	Z+25, r1	; 0x19
    287c:	10 8e       	std	Z+24, r1	; 0x18
    287e:	8c 91       	ld	r24, X
    2880:	81 50       	subi	r24, 0x01	; 1
    2882:	8c 93       	st	X, r24
    2884:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    2888:	81 11       	cpse	r24, r1
    288a:	52 c0       	rjmp	.+164    	; 0x2930 <xTaskRemoveFromEventList+0x106>
    288c:	a4 85       	ldd	r26, Z+12	; 0x0c
    288e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2890:	c6 81       	ldd	r28, Z+6	; 0x06
    2892:	d7 81       	ldd	r29, Z+7	; 0x07
    2894:	80 85       	ldd	r24, Z+8	; 0x08
    2896:	91 85       	ldd	r25, Z+9	; 0x09
    2898:	9f 83       	std	Y+7, r25	; 0x07
    289a:	8e 83       	std	Y+6, r24	; 0x06
    289c:	c0 85       	ldd	r28, Z+8	; 0x08
    289e:	d1 85       	ldd	r29, Z+9	; 0x09
    28a0:	86 81       	ldd	r24, Z+6	; 0x06
    28a2:	97 81       	ldd	r25, Z+7	; 0x07
    28a4:	9d 83       	std	Y+5, r25	; 0x05
    28a6:	8c 83       	std	Y+4, r24	; 0x04
    28a8:	11 96       	adiw	r26, 0x01	; 1
    28aa:	8d 91       	ld	r24, X+
    28ac:	9c 91       	ld	r25, X
    28ae:	12 97       	sbiw	r26, 0x02	; 2
    28b0:	9f 01       	movw	r18, r30
    28b2:	2e 5f       	subi	r18, 0xFE	; 254
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	82 17       	cp	r24, r18
    28b8:	93 07       	cpc	r25, r19
    28ba:	31 f4       	brne	.+12     	; 0x28c8 <xTaskRemoveFromEventList+0x9e>
    28bc:	80 85       	ldd	r24, Z+8	; 0x08
    28be:	91 85       	ldd	r25, Z+9	; 0x09
    28c0:	12 96       	adiw	r26, 0x02	; 2
    28c2:	9c 93       	st	X, r25
    28c4:	8e 93       	st	-X, r24
    28c6:	11 97       	sbiw	r26, 0x01	; 1
    28c8:	15 86       	std	Z+13, r1	; 0x0d
    28ca:	14 86       	std	Z+12, r1	; 0x0c
    28cc:	8c 91       	ld	r24, X
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	8c 93       	st	X, r24
    28d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    28d4:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    28d8:	8a 17       	cp	r24, r26
    28da:	10 f4       	brcc	.+4      	; 0x28e0 <xTaskRemoveFromEventList+0xb6>
    28dc:	a0 93 ad 10 	sts	0x10AD, r26	; 0x8010ad <uxTopReadyPriority>
    28e0:	8b e0       	ldi	r24, 0x0B	; 11
    28e2:	8a 9f       	mul	r24, r26
    28e4:	d0 01       	movw	r26, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	a1 51       	subi	r26, 0x11	; 17
    28ea:	bf 4e       	sbci	r27, 0xEF	; 239
    28ec:	11 96       	adiw	r26, 0x01	; 1
    28ee:	0d 90       	ld	r0, X+
    28f0:	bc 91       	ld	r27, X
    28f2:	a0 2d       	mov	r26, r0
    28f4:	b7 83       	std	Z+7, r27	; 0x07
    28f6:	a6 83       	std	Z+6, r26	; 0x06
    28f8:	16 96       	adiw	r26, 0x06	; 6
    28fa:	4d 91       	ld	r20, X+
    28fc:	5c 91       	ld	r21, X
    28fe:	17 97       	sbiw	r26, 0x07	; 7
    2900:	51 87       	std	Z+9, r21	; 0x09
    2902:	40 87       	std	Z+8, r20	; 0x08
    2904:	16 96       	adiw	r26, 0x06	; 6
    2906:	cd 91       	ld	r28, X+
    2908:	dc 91       	ld	r29, X
    290a:	17 97       	sbiw	r26, 0x07	; 7
    290c:	3d 83       	std	Y+5, r19	; 0x05
    290e:	2c 83       	std	Y+4, r18	; 0x04
    2910:	17 96       	adiw	r26, 0x07	; 7
    2912:	3c 93       	st	X, r19
    2914:	2e 93       	st	-X, r18
    2916:	16 97       	sbiw	r26, 0x06	; 6
    2918:	a2 8d       	ldd	r26, Z+26	; 0x1a
    291a:	8a 9f       	mul	r24, r26
    291c:	d0 01       	movw	r26, r0
    291e:	11 24       	eor	r1, r1
    2920:	a1 51       	subi	r26, 0x11	; 17
    2922:	bf 4e       	sbci	r27, 0xEF	; 239
    2924:	b5 87       	std	Z+13, r27	; 0x0d
    2926:	a4 87       	std	Z+12, r26	; 0x0c
    2928:	8c 91       	ld	r24, X
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	8c 93       	st	X, r24
    292e:	1c c0       	rjmp	.+56     	; 0x2968 <xTaskRemoveFromEventList+0x13e>
    2930:	4a ec       	ldi	r20, 0xCA	; 202
    2932:	50 e1       	ldi	r21, 0x10	; 16
    2934:	da 01       	movw	r26, r20
    2936:	11 96       	adiw	r26, 0x01	; 1
    2938:	cd 91       	ld	r28, X+
    293a:	dc 91       	ld	r29, X
    293c:	12 97       	sbiw	r26, 0x02	; 2
    293e:	d3 8b       	std	Z+19, r29	; 0x13
    2940:	c2 8b       	std	Z+18, r28	; 0x12
    2942:	8e 81       	ldd	r24, Y+6	; 0x06
    2944:	9f 81       	ldd	r25, Y+7	; 0x07
    2946:	95 8b       	std	Z+21, r25	; 0x15
    2948:	84 8b       	std	Z+20, r24	; 0x14
    294a:	8e 81       	ldd	r24, Y+6	; 0x06
    294c:	9f 81       	ldd	r25, Y+7	; 0x07
    294e:	dc 01       	movw	r26, r24
    2950:	15 96       	adiw	r26, 0x05	; 5
    2952:	3c 93       	st	X, r19
    2954:	2e 93       	st	-X, r18
    2956:	14 97       	sbiw	r26, 0x04	; 4
    2958:	3f 83       	std	Y+7, r19	; 0x07
    295a:	2e 83       	std	Y+6, r18	; 0x06
    295c:	51 8f       	std	Z+25, r21	; 0x19
    295e:	40 8f       	std	Z+24, r20	; 0x18
    2960:	da 01       	movw	r26, r20
    2962:	8c 91       	ld	r24, X
    2964:	8f 5f       	subi	r24, 0xFF	; 255
    2966:	8c 93       	st	X, r24
    2968:	92 8d       	ldd	r25, Z+26	; 0x1a
    296a:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    296e:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2972:	82 8d       	ldd	r24, Z+26	; 0x1a
    2974:	89 17       	cp	r24, r25
    2976:	20 f4       	brcc	.+8      	; 0x2980 <xTaskRemoveFromEventList+0x156>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <xTaskRemoveFromEventList+0x158>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	08 95       	ret

00002988 <vTaskRemoveFromUnorderedEventList>:
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	dc 01       	movw	r26, r24
    298e:	70 68       	ori	r23, 0x80	; 128
    2990:	4d 93       	st	X+, r20
    2992:	5d 93       	st	X+, r21
    2994:	6d 93       	st	X+, r22
    2996:	7c 93       	st	X, r23
    2998:	13 97       	sbiw	r26, 0x03	; 3
    299a:	18 96       	adiw	r26, 0x08	; 8
    299c:	ed 91       	ld	r30, X+
    299e:	fc 91       	ld	r31, X
    29a0:	19 97       	sbiw	r26, 0x09	; 9
    29a2:	1a 96       	adiw	r26, 0x0a	; 10
    29a4:	4d 91       	ld	r20, X+
    29a6:	5c 91       	ld	r21, X
    29a8:	1b 97       	sbiw	r26, 0x0b	; 11
    29aa:	14 96       	adiw	r26, 0x04	; 4
    29ac:	8d 91       	ld	r24, X+
    29ae:	9c 91       	ld	r25, X
    29b0:	15 97       	sbiw	r26, 0x05	; 5
    29b2:	16 96       	adiw	r26, 0x06	; 6
    29b4:	2d 91       	ld	r18, X+
    29b6:	3c 91       	ld	r19, X
    29b8:	17 97       	sbiw	r26, 0x07	; 7
    29ba:	ec 01       	movw	r28, r24
    29bc:	3f 83       	std	Y+7, r19	; 0x07
    29be:	2e 83       	std	Y+6, r18	; 0x06
    29c0:	16 96       	adiw	r26, 0x06	; 6
    29c2:	8d 91       	ld	r24, X+
    29c4:	9c 91       	ld	r25, X
    29c6:	17 97       	sbiw	r26, 0x07	; 7
    29c8:	14 96       	adiw	r26, 0x04	; 4
    29ca:	2d 91       	ld	r18, X+
    29cc:	3c 91       	ld	r19, X
    29ce:	15 97       	sbiw	r26, 0x05	; 5
    29d0:	ec 01       	movw	r28, r24
    29d2:	3d 83       	std	Y+5, r19	; 0x05
    29d4:	2c 83       	std	Y+4, r18	; 0x04
    29d6:	ea 01       	movw	r28, r20
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	a8 17       	cp	r26, r24
    29de:	b9 07       	cpc	r27, r25
    29e0:	31 f4       	brne	.+12     	; 0x29ee <vTaskRemoveFromUnorderedEventList+0x66>
    29e2:	16 96       	adiw	r26, 0x06	; 6
    29e4:	8d 91       	ld	r24, X+
    29e6:	9c 91       	ld	r25, X
    29e8:	17 97       	sbiw	r26, 0x07	; 7
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	1b 96       	adiw	r26, 0x0b	; 11
    29f0:	1c 92       	st	X, r1
    29f2:	1e 92       	st	-X, r1
    29f4:	1a 97       	sbiw	r26, 0x0a	; 10
    29f6:	da 01       	movw	r26, r20
    29f8:	8c 91       	ld	r24, X
    29fa:	81 50       	subi	r24, 0x01	; 1
    29fc:	8c 93       	st	X, r24
    29fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a00:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a02:	c6 81       	ldd	r28, Z+6	; 0x06
    2a04:	d7 81       	ldd	r29, Z+7	; 0x07
    2a06:	80 85       	ldd	r24, Z+8	; 0x08
    2a08:	91 85       	ldd	r25, Z+9	; 0x09
    2a0a:	9f 83       	std	Y+7, r25	; 0x07
    2a0c:	8e 83       	std	Y+6, r24	; 0x06
    2a0e:	c0 85       	ldd	r28, Z+8	; 0x08
    2a10:	d1 85       	ldd	r29, Z+9	; 0x09
    2a12:	86 81       	ldd	r24, Z+6	; 0x06
    2a14:	97 81       	ldd	r25, Z+7	; 0x07
    2a16:	9d 83       	std	Y+5, r25	; 0x05
    2a18:	8c 83       	std	Y+4, r24	; 0x04
    2a1a:	11 96       	adiw	r26, 0x01	; 1
    2a1c:	8d 91       	ld	r24, X+
    2a1e:	9c 91       	ld	r25, X
    2a20:	12 97       	sbiw	r26, 0x02	; 2
    2a22:	9f 01       	movw	r18, r30
    2a24:	2e 5f       	subi	r18, 0xFE	; 254
    2a26:	3f 4f       	sbci	r19, 0xFF	; 255
    2a28:	82 17       	cp	r24, r18
    2a2a:	93 07       	cpc	r25, r19
    2a2c:	31 f4       	brne	.+12     	; 0x2a3a <vTaskRemoveFromUnorderedEventList+0xb2>
    2a2e:	80 85       	ldd	r24, Z+8	; 0x08
    2a30:	91 85       	ldd	r25, Z+9	; 0x09
    2a32:	12 96       	adiw	r26, 0x02	; 2
    2a34:	9c 93       	st	X, r25
    2a36:	8e 93       	st	-X, r24
    2a38:	11 97       	sbiw	r26, 0x01	; 1
    2a3a:	15 86       	std	Z+13, r1	; 0x0d
    2a3c:	14 86       	std	Z+12, r1	; 0x0c
    2a3e:	8c 91       	ld	r24, X
    2a40:	81 50       	subi	r24, 0x01	; 1
    2a42:	8c 93       	st	X, r24
    2a44:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a46:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    2a4a:	8a 17       	cp	r24, r26
    2a4c:	10 f4       	brcc	.+4      	; 0x2a52 <vTaskRemoveFromUnorderedEventList+0xca>
    2a4e:	a0 93 ad 10 	sts	0x10AD, r26	; 0x8010ad <uxTopReadyPriority>
    2a52:	8b e0       	ldi	r24, 0x0B	; 11
    2a54:	8a 9f       	mul	r24, r26
    2a56:	d0 01       	movw	r26, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	a1 51       	subi	r26, 0x11	; 17
    2a5c:	bf 4e       	sbci	r27, 0xEF	; 239
    2a5e:	11 96       	adiw	r26, 0x01	; 1
    2a60:	0d 90       	ld	r0, X+
    2a62:	bc 91       	ld	r27, X
    2a64:	a0 2d       	mov	r26, r0
    2a66:	b7 83       	std	Z+7, r27	; 0x07
    2a68:	a6 83       	std	Z+6, r26	; 0x06
    2a6a:	16 96       	adiw	r26, 0x06	; 6
    2a6c:	4d 91       	ld	r20, X+
    2a6e:	5c 91       	ld	r21, X
    2a70:	17 97       	sbiw	r26, 0x07	; 7
    2a72:	51 87       	std	Z+9, r21	; 0x09
    2a74:	40 87       	std	Z+8, r20	; 0x08
    2a76:	16 96       	adiw	r26, 0x06	; 6
    2a78:	cd 91       	ld	r28, X+
    2a7a:	dc 91       	ld	r29, X
    2a7c:	17 97       	sbiw	r26, 0x07	; 7
    2a7e:	3d 83       	std	Y+5, r19	; 0x05
    2a80:	2c 83       	std	Y+4, r18	; 0x04
    2a82:	17 96       	adiw	r26, 0x07	; 7
    2a84:	3c 93       	st	X, r19
    2a86:	2e 93       	st	-X, r18
    2a88:	16 97       	sbiw	r26, 0x06	; 6
    2a8a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a8c:	8a 9f       	mul	r24, r26
    2a8e:	d0 01       	movw	r26, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	a1 51       	subi	r26, 0x11	; 17
    2a94:	bf 4e       	sbci	r27, 0xEF	; 239
    2a96:	b5 87       	std	Z+13, r27	; 0x0d
    2a98:	a4 87       	std	Z+12, r26	; 0x0c
    2a9a:	8c 91       	ld	r24, X
    2a9c:	8f 5f       	subi	r24, 0xFF	; 255
    2a9e:	8c 93       	st	X, r24
    2aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2aa2:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2aa6:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2aaa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aac:	89 17       	cp	r24, r25
    2aae:	18 f4       	brcc	.+6      	; 0x2ab6 <vTaskRemoveFromUnorderedEventList+0x12e>
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	08 95       	ret

00002abc <vTaskSetTimeOutState>:
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	0f 92       	push	r0
    2ac2:	20 91 a6 10 	lds	r18, 0x10A6	; 0x8010a6 <xNumOfOverflows>
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	20 83       	st	Z, r18
    2aca:	40 91 ae 10 	lds	r20, 0x10AE	; 0x8010ae <xTickCount>
    2ace:	50 91 af 10 	lds	r21, 0x10AF	; 0x8010af <xTickCount+0x1>
    2ad2:	60 91 b0 10 	lds	r22, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    2ad6:	70 91 b1 10 	lds	r23, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    2ada:	41 83       	std	Z+1, r20	; 0x01
    2adc:	52 83       	std	Z+2, r21	; 0x02
    2ade:	63 83       	std	Z+3, r22	; 0x03
    2ae0:	74 83       	std	Z+4, r23	; 0x04
    2ae2:	0f 90       	pop	r0
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	08 95       	ret

00002ae8 <vTaskInternalSetTimeOutState>:
    2ae8:	20 91 a6 10 	lds	r18, 0x10A6	; 0x8010a6 <xNumOfOverflows>
    2aec:	fc 01       	movw	r30, r24
    2aee:	20 83       	st	Z, r18
    2af0:	40 91 ae 10 	lds	r20, 0x10AE	; 0x8010ae <xTickCount>
    2af4:	50 91 af 10 	lds	r21, 0x10AF	; 0x8010af <xTickCount+0x1>
    2af8:	60 91 b0 10 	lds	r22, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    2afc:	70 91 b1 10 	lds	r23, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    2b00:	41 83       	std	Z+1, r20	; 0x01
    2b02:	52 83       	std	Z+2, r21	; 0x02
    2b04:	63 83       	std	Z+3, r22	; 0x03
    2b06:	74 83       	std	Z+4, r23	; 0x04
    2b08:	08 95       	ret

00002b0a <xTaskCheckForTimeOut>:
    2b0a:	8f 92       	push	r8
    2b0c:	9f 92       	push	r9
    2b0e:	af 92       	push	r10
    2b10:	bf 92       	push	r11
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	fb 01       	movw	r30, r22
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	0f 92       	push	r0
    2b2a:	c0 90 ae 10 	lds	r12, 0x10AE	; 0x8010ae <xTickCount>
    2b2e:	d0 90 af 10 	lds	r13, 0x10AF	; 0x8010af <xTickCount+0x1>
    2b32:	e0 90 b0 10 	lds	r14, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    2b36:	f0 90 b1 10 	lds	r15, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	0d 91       	ld	r16, X+
    2b40:	1d 91       	ld	r17, X+
    2b42:	2d 91       	ld	r18, X+
    2b44:	3c 91       	ld	r19, X
    2b46:	14 97       	sbiw	r26, 0x04	; 4
    2b48:	46 01       	movw	r8, r12
    2b4a:	57 01       	movw	r10, r14
    2b4c:	80 1a       	sub	r8, r16
    2b4e:	91 0a       	sbc	r9, r17
    2b50:	a2 0a       	sbc	r10, r18
    2b52:	b3 0a       	sbc	r11, r19
    2b54:	40 81       	ld	r20, Z
    2b56:	51 81       	ldd	r21, Z+1	; 0x01
    2b58:	62 81       	ldd	r22, Z+2	; 0x02
    2b5a:	73 81       	ldd	r23, Z+3	; 0x03
    2b5c:	4f 3f       	cpi	r20, 0xFF	; 255
    2b5e:	bf ef       	ldi	r27, 0xFF	; 255
    2b60:	5b 07       	cpc	r21, r27
    2b62:	6b 07       	cpc	r22, r27
    2b64:	7b 07       	cpc	r23, r27
    2b66:	39 f1       	breq	.+78     	; 0x2bb6 <xTaskCheckForTimeOut+0xac>
    2b68:	ec 01       	movw	r28, r24
    2b6a:	b8 81       	ld	r27, Y
    2b6c:	a0 91 a6 10 	lds	r26, 0x10A6	; 0x8010a6 <xNumOfOverflows>
    2b70:	ba 17       	cp	r27, r26
    2b72:	59 f0       	breq	.+22     	; 0x2b8a <xTaskCheckForTimeOut+0x80>
    2b74:	c0 16       	cp	r12, r16
    2b76:	d1 06       	cpc	r13, r17
    2b78:	e2 06       	cpc	r14, r18
    2b7a:	f3 06       	cpc	r15, r19
    2b7c:	30 f0       	brcs	.+12     	; 0x2b8a <xTaskCheckForTimeOut+0x80>
    2b7e:	10 82       	st	Z, r1
    2b80:	11 82       	std	Z+1, r1	; 0x01
    2b82:	12 82       	std	Z+2, r1	; 0x02
    2b84:	13 82       	std	Z+3, r1	; 0x03
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	17 c0       	rjmp	.+46     	; 0x2bb8 <xTaskCheckForTimeOut+0xae>
    2b8a:	84 16       	cp	r8, r20
    2b8c:	95 06       	cpc	r9, r21
    2b8e:	a6 06       	cpc	r10, r22
    2b90:	b7 06       	cpc	r11, r23
    2b92:	58 f4       	brcc	.+22     	; 0x2baa <xTaskCheckForTimeOut+0xa0>
    2b94:	48 19       	sub	r20, r8
    2b96:	59 09       	sbc	r21, r9
    2b98:	6a 09       	sbc	r22, r10
    2b9a:	7b 09       	sbc	r23, r11
    2b9c:	40 83       	st	Z, r20
    2b9e:	51 83       	std	Z+1, r21	; 0x01
    2ba0:	62 83       	std	Z+2, r22	; 0x02
    2ba2:	73 83       	std	Z+3, r23	; 0x03
    2ba4:	a1 df       	rcall	.-190    	; 0x2ae8 <vTaskInternalSetTimeOutState>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	07 c0       	rjmp	.+14     	; 0x2bb8 <xTaskCheckForTimeOut+0xae>
    2baa:	10 82       	st	Z, r1
    2bac:	11 82       	std	Z+1, r1	; 0x01
    2bae:	12 82       	std	Z+2, r1	; 0x02
    2bb0:	13 82       	std	Z+3, r1	; 0x03
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <xTaskCheckForTimeOut+0xae>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0f 90       	pop	r0
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	df 91       	pop	r29
    2bbe:	cf 91       	pop	r28
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	ff 90       	pop	r15
    2bc6:	ef 90       	pop	r14
    2bc8:	df 90       	pop	r13
    2bca:	cf 90       	pop	r12
    2bcc:	bf 90       	pop	r11
    2bce:	af 90       	pop	r10
    2bd0:	9f 90       	pop	r9
    2bd2:	8f 90       	pop	r8
    2bd4:	08 95       	ret

00002bd6 <vTaskMissedYield>:
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    2bdc:	08 95       	ret

00002bde <xTaskGetCurrentTaskHandle>:
    2bde:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    2be2:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2be6:	08 95       	ret

00002be8 <xTaskGetSchedulerState>:
    2be8:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <xSchedulerRunning>
    2bec:	88 23       	and	r24, r24
    2bee:	31 f0       	breq	.+12     	; 0x2bfc <xTaskGetSchedulerState+0x14>
    2bf0:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <xTaskGetSchedulerState+0x18>
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	08 95       	ret
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	08 95       	ret
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	08 95       	ret

00002c04 <xTaskPriorityDisinherit>:
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	89 2b       	or	r24, r25
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <xTaskPriorityDisinherit+0x10>
    2c12:	49 c0       	rjmp	.+146    	; 0x2ca6 <xTaskPriorityDisinherit+0xa2>
    2c14:	86 a5       	ldd	r24, Z+46	; 0x2e
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	86 a7       	std	Z+46, r24	; 0x2e
    2c1a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c1c:	95 a5       	ldd	r25, Z+45	; 0x2d
    2c1e:	29 17       	cp	r18, r25
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <xTaskPriorityDisinherit+0x20>
    2c22:	43 c0       	rjmp	.+134    	; 0x2caa <xTaskPriorityDisinherit+0xa6>
    2c24:	81 11       	cpse	r24, r1
    2c26:	43 c0       	rjmp	.+134    	; 0x2cae <xTaskPriorityDisinherit+0xaa>
    2c28:	ef 01       	movw	r28, r30
    2c2a:	8f 01       	movw	r16, r30
    2c2c:	0e 5f       	subi	r16, 0xFE	; 254
    2c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c30:	c8 01       	movw	r24, r16
    2c32:	0e 94 8b 06 	call	0xd16	; 0xd16 <uxListRemove>
    2c36:	ed a5       	ldd	r30, Y+45	; 0x2d
    2c38:	ea 8f       	std	Y+26, r30	; 0x1a
    2c3a:	8a e0       	ldi	r24, 0x0A	; 10
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	8e 1b       	sub	r24, r30
    2c44:	91 09       	sbc	r25, r1
    2c46:	a1 09       	sbc	r26, r1
    2c48:	b1 09       	sbc	r27, r1
    2c4a:	8e 87       	std	Y+14, r24	; 0x0e
    2c4c:	9f 87       	std	Y+15, r25	; 0x0f
    2c4e:	a8 8b       	std	Y+16, r26	; 0x10
    2c50:	b9 8b       	std	Y+17, r27	; 0x11
    2c52:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    2c56:	8e 17       	cp	r24, r30
    2c58:	10 f4       	brcc	.+4      	; 0x2c5e <xTaskPriorityDisinherit+0x5a>
    2c5a:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    2c5e:	8b e0       	ldi	r24, 0x0B	; 11
    2c60:	8e 9f       	mul	r24, r30
    2c62:	f0 01       	movw	r30, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	e1 51       	subi	r30, 0x11	; 17
    2c68:	ff 4e       	sbci	r31, 0xEF	; 239
    2c6a:	01 80       	ldd	r0, Z+1	; 0x01
    2c6c:	f2 81       	ldd	r31, Z+2	; 0x02
    2c6e:	e0 2d       	mov	r30, r0
    2c70:	ff 83       	std	Y+7, r31	; 0x07
    2c72:	ee 83       	std	Y+6, r30	; 0x06
    2c74:	26 81       	ldd	r18, Z+6	; 0x06
    2c76:	37 81       	ldd	r19, Z+7	; 0x07
    2c78:	39 87       	std	Y+9, r19	; 0x09
    2c7a:	28 87       	std	Y+8, r18	; 0x08
    2c7c:	a6 81       	ldd	r26, Z+6	; 0x06
    2c7e:	b7 81       	ldd	r27, Z+7	; 0x07
    2c80:	15 96       	adiw	r26, 0x05	; 5
    2c82:	1c 93       	st	X, r17
    2c84:	0e 93       	st	-X, r16
    2c86:	14 97       	sbiw	r26, 0x04	; 4
    2c88:	17 83       	std	Z+7, r17	; 0x07
    2c8a:	06 83       	std	Z+6, r16	; 0x06
    2c8c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c8e:	8e 9f       	mul	r24, r30
    2c90:	f0 01       	movw	r30, r0
    2c92:	11 24       	eor	r1, r1
    2c94:	e1 51       	subi	r30, 0x11	; 17
    2c96:	ff 4e       	sbci	r31, 0xEF	; 239
    2c98:	fd 87       	std	Y+13, r31	; 0x0d
    2c9a:	ec 87       	std	Y+12, r30	; 0x0c
    2c9c:	80 81       	ld	r24, Z
    2c9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ca0:	80 83       	st	Z, r24
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	05 c0       	rjmp	.+10     	; 0x2cb0 <xTaskPriorityDisinherit+0xac>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	03 c0       	rjmp	.+6      	; 0x2cb0 <xTaskPriorityDisinherit+0xac>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	01 c0       	rjmp	.+2      	; 0x2cb0 <xTaskPriorityDisinherit+0xac>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	08 95       	ret

00002cba <uxTaskResetEventItemValue>:
    2cba:	cf 92       	push	r12
    2cbc:	df 92       	push	r13
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2cc6:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2cca:	66 85       	ldd	r22, Z+14	; 0x0e
    2ccc:	77 85       	ldd	r23, Z+15	; 0x0f
    2cce:	80 89       	ldd	r24, Z+16	; 0x10
    2cd0:	91 89       	ldd	r25, Z+17	; 0x11
    2cd2:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2cd6:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2cda:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    2cde:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2ce2:	5a 96       	adiw	r26, 0x1a	; 26
    2ce4:	2c 91       	ld	r18, X
    2ce6:	0f 2e       	mov	r0, r31
    2ce8:	fa e0       	ldi	r31, 0x0A	; 10
    2cea:	cf 2e       	mov	r12, r31
    2cec:	d1 2c       	mov	r13, r1
    2cee:	e1 2c       	mov	r14, r1
    2cf0:	f1 2c       	mov	r15, r1
    2cf2:	f0 2d       	mov	r31, r0
    2cf4:	c2 1a       	sub	r12, r18
    2cf6:	d1 08       	sbc	r13, r1
    2cf8:	e1 08       	sbc	r14, r1
    2cfa:	f1 08       	sbc	r15, r1
    2cfc:	c6 86       	std	Z+14, r12	; 0x0e
    2cfe:	d7 86       	std	Z+15, r13	; 0x0f
    2d00:	e0 8a       	std	Z+16, r14	; 0x10
    2d02:	f1 8a       	std	Z+17, r15	; 0x11
    2d04:	ff 90       	pop	r15
    2d06:	ef 90       	pop	r14
    2d08:	df 90       	pop	r13
    2d0a:	cf 90       	pop	r12
    2d0c:	08 95       	ret

00002d0e <xTaskGenericNotifyWait>:
    2d0e:	4f 92       	push	r4
    2d10:	5f 92       	push	r5
    2d12:	6f 92       	push	r6
    2d14:	7f 92       	push	r7
    2d16:	af 92       	push	r10
    2d18:	bf 92       	push	r11
    2d1a:	cf 92       	push	r12
    2d1c:	df 92       	push	r13
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	0f 93       	push	r16
    2d24:	1f 93       	push	r17
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	28 01       	movw	r4, r16
    2d2c:	39 01       	movw	r6, r18
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	0f 92       	push	r0
    2d34:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2d38:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2d3c:	c8 2f       	mov	r28, r24
    2d3e:	d0 e0       	ldi	r29, 0x00	; 0
    2d40:	ec 0f       	add	r30, r28
    2d42:	fd 1f       	adc	r31, r29
    2d44:	83 a9       	ldd	r24, Z+51	; 0x33
    2d46:	82 30       	cpi	r24, 0x02	; 2
    2d48:	71 f1       	breq	.+92     	; 0x2da6 <xTaskGenericNotifyWait+0x98>
    2d4a:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2d4e:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2d52:	ce 01       	movw	r24, r28
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d62:	90 a9       	ldd	r25, Z+48	; 0x30
    2d64:	a1 a9       	ldd	r26, Z+49	; 0x31
    2d66:	b2 a9       	ldd	r27, Z+50	; 0x32
    2d68:	40 95       	com	r20
    2d6a:	50 95       	com	r21
    2d6c:	60 95       	com	r22
    2d6e:	70 95       	com	r23
    2d70:	48 23       	and	r20, r24
    2d72:	59 23       	and	r21, r25
    2d74:	6a 23       	and	r22, r26
    2d76:	7b 23       	and	r23, r27
    2d78:	47 a7       	std	Z+47, r20	; 0x2f
    2d7a:	50 ab       	std	Z+48, r21	; 0x30
    2d7c:	61 ab       	std	Z+49, r22	; 0x31
    2d7e:	72 ab       	std	Z+50, r23	; 0x32
    2d80:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2d84:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2d88:	ec 0f       	add	r30, r28
    2d8a:	fd 1f       	adc	r31, r29
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	83 ab       	std	Z+51, r24	; 0x33
    2d90:	a1 14       	cp	r10, r1
    2d92:	b1 04       	cpc	r11, r1
    2d94:	c1 04       	cpc	r12, r1
    2d96:	d1 04       	cpc	r13, r1
    2d98:	31 f0       	breq	.+12     	; 0x2da6 <xTaskGenericNotifyWait+0x98>
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	c6 01       	movw	r24, r12
    2d9e:	b5 01       	movw	r22, r10
    2da0:	7a d8       	rcall	.-3852   	; 0x1e96 <prvAddCurrentTaskToDelayedList>
    2da2:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    2da6:	0f 90       	pop	r0
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	0f 92       	push	r0
    2db0:	e1 14       	cp	r14, r1
    2db2:	f1 04       	cpc	r15, r1
    2db4:	a1 f0       	breq	.+40     	; 0x2dde <xTaskGenericNotifyWait+0xd0>
    2db6:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2dba:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	e8 0f       	add	r30, r24
    2dca:	f9 1f       	adc	r31, r25
    2dcc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2dce:	90 a9       	ldd	r25, Z+48	; 0x30
    2dd0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2dd2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2dd4:	f7 01       	movw	r30, r14
    2dd6:	80 83       	st	Z, r24
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	a2 83       	std	Z+2, r26	; 0x02
    2ddc:	b3 83       	std	Z+3, r27	; 0x03
    2dde:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2de2:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2de6:	ec 0f       	add	r30, r28
    2de8:	fd 1f       	adc	r31, r29
    2dea:	83 a9       	ldd	r24, Z+51	; 0x33
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	e9 f4       	brne	.+58     	; 0x2e2a <xTaskGenericNotifyWait+0x11c>
    2df0:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2df4:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2df8:	ce 01       	movw	r24, r28
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	e8 0f       	add	r30, r24
    2e04:	f9 1f       	adc	r31, r25
    2e06:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e08:	90 a9       	ldd	r25, Z+48	; 0x30
    2e0a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e0c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e0e:	40 94       	com	r4
    2e10:	50 94       	com	r5
    2e12:	60 94       	com	r6
    2e14:	70 94       	com	r7
    2e16:	48 22       	and	r4, r24
    2e18:	59 22       	and	r5, r25
    2e1a:	6a 22       	and	r6, r26
    2e1c:	7b 22       	and	r7, r27
    2e1e:	47 a6       	std	Z+47, r4	; 0x2f
    2e20:	50 aa       	std	Z+48, r5	; 0x30
    2e22:	61 aa       	std	Z+49, r6	; 0x31
    2e24:	72 aa       	std	Z+50, r7	; 0x32
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <xTaskGenericNotifyWait+0x11e>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	20 91 5d 11 	lds	r18, 0x115D	; 0x80115d <pxCurrentTCB>
    2e30:	30 91 5e 11 	lds	r19, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2e34:	c2 0f       	add	r28, r18
    2e36:	d3 1f       	adc	r29, r19
    2e38:	1b aa       	std	Y+51, r1	; 0x33
    2e3a:	0f 90       	pop	r0
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	ff 90       	pop	r15
    2e48:	ef 90       	pop	r14
    2e4a:	df 90       	pop	r13
    2e4c:	cf 90       	pop	r12
    2e4e:	bf 90       	pop	r11
    2e50:	af 90       	pop	r10
    2e52:	7f 90       	pop	r7
    2e54:	6f 90       	pop	r6
    2e56:	5f 90       	pop	r5
    2e58:	4f 90       	pop	r4
    2e5a:	08 95       	ret

00002e5c <xTaskGenericNotify>:
    2e5c:	8f 92       	push	r8
    2e5e:	9f 92       	push	r9
    2e60:	af 92       	push	r10
    2e62:	bf 92       	push	r11
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	0f 93       	push	r16
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	dc 01       	movw	r26, r24
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	0f 92       	push	r0
    2e76:	e1 14       	cp	r14, r1
    2e78:	f1 04       	cpc	r15, r1
    2e7a:	89 f0       	breq	.+34     	; 0x2e9e <xTaskGenericNotify+0x42>
    2e7c:	e6 2f       	mov	r30, r22
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	ee 0f       	add	r30, r30
    2e82:	ff 1f       	adc	r31, r31
    2e84:	ee 0f       	add	r30, r30
    2e86:	ff 1f       	adc	r31, r31
    2e88:	e8 0f       	add	r30, r24
    2e8a:	f9 1f       	adc	r31, r25
    2e8c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e8e:	90 a8       	ldd	r9, Z+48	; 0x30
    2e90:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e92:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e94:	f7 01       	movw	r30, r14
    2e96:	80 82       	st	Z, r8
    2e98:	91 82       	std	Z+1, r9	; 0x01
    2e9a:	a2 82       	std	Z+2, r10	; 0x02
    2e9c:	b3 82       	std	Z+3, r11	; 0x03
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	fd 01       	movw	r30, r26
    2ea2:	e6 0f       	add	r30, r22
    2ea4:	f7 1f       	adc	r31, r23
    2ea6:	83 a9       	ldd	r24, Z+51	; 0x33
    2ea8:	92 e0       	ldi	r25, 0x02	; 2
    2eaa:	93 ab       	std	Z+51, r25	; 0x33
    2eac:	02 30       	cpi	r16, 0x02	; 2
    2eae:	01 f1       	breq	.+64     	; 0x2ef0 <xTaskGenericNotify+0x94>
    2eb0:	18 f4       	brcc	.+6      	; 0x2eb8 <xTaskGenericNotify+0x5c>
    2eb2:	01 30       	cpi	r16, 0x01	; 1
    2eb4:	31 f0       	breq	.+12     	; 0x2ec2 <xTaskGenericNotify+0x66>
    2eb6:	4d c0       	rjmp	.+154    	; 0x2f52 <xTaskGenericNotify+0xf6>
    2eb8:	03 30       	cpi	r16, 0x03	; 3
    2eba:	79 f1       	breq	.+94     	; 0x2f1a <xTaskGenericNotify+0xbe>
    2ebc:	04 30       	cpi	r16, 0x04	; 4
    2ebe:	d1 f1       	breq	.+116    	; 0x2f34 <xTaskGenericNotify+0xd8>
    2ec0:	48 c0       	rjmp	.+144    	; 0x2f52 <xTaskGenericNotify+0xf6>
    2ec2:	66 0f       	add	r22, r22
    2ec4:	77 1f       	adc	r23, r23
    2ec6:	66 0f       	add	r22, r22
    2ec8:	77 1f       	adc	r23, r23
    2eca:	fd 01       	movw	r30, r26
    2ecc:	e6 0f       	add	r30, r22
    2ece:	f7 1f       	adc	r31, r23
    2ed0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ed2:	90 a8       	ldd	r9, Z+48	; 0x30
    2ed4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ed6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ed8:	ba 01       	movw	r22, r20
    2eda:	a9 01       	movw	r20, r18
    2edc:	48 29       	or	r20, r8
    2ede:	59 29       	or	r21, r9
    2ee0:	6a 29       	or	r22, r10
    2ee2:	7b 29       	or	r23, r11
    2ee4:	47 a7       	std	Z+47, r20	; 0x2f
    2ee6:	50 ab       	std	Z+48, r21	; 0x30
    2ee8:	61 ab       	std	Z+49, r22	; 0x31
    2eea:	72 ab       	std	Z+50, r23	; 0x32
    2eec:	01 e0       	ldi	r16, 0x01	; 1
    2eee:	34 c0       	rjmp	.+104    	; 0x2f58 <xTaskGenericNotify+0xfc>
    2ef0:	66 0f       	add	r22, r22
    2ef2:	77 1f       	adc	r23, r23
    2ef4:	66 0f       	add	r22, r22
    2ef6:	77 1f       	adc	r23, r23
    2ef8:	fd 01       	movw	r30, r26
    2efa:	e6 0f       	add	r30, r22
    2efc:	f7 1f       	adc	r31, r23
    2efe:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f00:	50 a9       	ldd	r21, Z+48	; 0x30
    2f02:	61 a9       	ldd	r22, Z+49	; 0x31
    2f04:	72 a9       	ldd	r23, Z+50	; 0x32
    2f06:	4f 5f       	subi	r20, 0xFF	; 255
    2f08:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0a:	6f 4f       	sbci	r22, 0xFF	; 255
    2f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0e:	47 a7       	std	Z+47, r20	; 0x2f
    2f10:	50 ab       	std	Z+48, r21	; 0x30
    2f12:	61 ab       	std	Z+49, r22	; 0x31
    2f14:	72 ab       	std	Z+50, r23	; 0x32
    2f16:	01 e0       	ldi	r16, 0x01	; 1
    2f18:	1f c0       	rjmp	.+62     	; 0x2f58 <xTaskGenericNotify+0xfc>
    2f1a:	66 0f       	add	r22, r22
    2f1c:	77 1f       	adc	r23, r23
    2f1e:	66 0f       	add	r22, r22
    2f20:	77 1f       	adc	r23, r23
    2f22:	fd 01       	movw	r30, r26
    2f24:	e6 0f       	add	r30, r22
    2f26:	f7 1f       	adc	r31, r23
    2f28:	27 a7       	std	Z+47, r18	; 0x2f
    2f2a:	30 ab       	std	Z+48, r19	; 0x30
    2f2c:	41 ab       	std	Z+49, r20	; 0x31
    2f2e:	52 ab       	std	Z+50, r21	; 0x32
    2f30:	01 e0       	ldi	r16, 0x01	; 1
    2f32:	12 c0       	rjmp	.+36     	; 0x2f58 <xTaskGenericNotify+0xfc>
    2f34:	82 30       	cpi	r24, 0x02	; 2
    2f36:	79 f0       	breq	.+30     	; 0x2f56 <xTaskGenericNotify+0xfa>
    2f38:	66 0f       	add	r22, r22
    2f3a:	77 1f       	adc	r23, r23
    2f3c:	66 0f       	add	r22, r22
    2f3e:	77 1f       	adc	r23, r23
    2f40:	fd 01       	movw	r30, r26
    2f42:	e6 0f       	add	r30, r22
    2f44:	f7 1f       	adc	r31, r23
    2f46:	27 a7       	std	Z+47, r18	; 0x2f
    2f48:	30 ab       	std	Z+48, r19	; 0x30
    2f4a:	41 ab       	std	Z+49, r20	; 0x31
    2f4c:	52 ab       	std	Z+50, r21	; 0x32
    2f4e:	01 e0       	ldi	r16, 0x01	; 1
    2f50:	03 c0       	rjmp	.+6      	; 0x2f58 <xTaskGenericNotify+0xfc>
    2f52:	01 e0       	ldi	r16, 0x01	; 1
    2f54:	01 c0       	rjmp	.+2      	; 0x2f58 <xTaskGenericNotify+0xfc>
    2f56:	00 e0       	ldi	r16, 0x00	; 0
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	09 f0       	breq	.+2      	; 0x2f5e <xTaskGenericNotify+0x102>
    2f5c:	69 c0       	rjmp	.+210    	; 0x3030 <xTaskGenericNotify+0x1d4>
    2f5e:	1c 96       	adiw	r26, 0x0c	; 12
    2f60:	ed 91       	ld	r30, X+
    2f62:	fc 91       	ld	r31, X
    2f64:	1d 97       	sbiw	r26, 0x0d	; 13
    2f66:	16 96       	adiw	r26, 0x06	; 6
    2f68:	cd 91       	ld	r28, X+
    2f6a:	dc 91       	ld	r29, X
    2f6c:	17 97       	sbiw	r26, 0x07	; 7
    2f6e:	18 96       	adiw	r26, 0x08	; 8
    2f70:	8d 91       	ld	r24, X+
    2f72:	9c 91       	ld	r25, X
    2f74:	19 97       	sbiw	r26, 0x09	; 9
    2f76:	9f 83       	std	Y+7, r25	; 0x07
    2f78:	8e 83       	std	Y+6, r24	; 0x06
    2f7a:	18 96       	adiw	r26, 0x08	; 8
    2f7c:	cd 91       	ld	r28, X+
    2f7e:	dc 91       	ld	r29, X
    2f80:	19 97       	sbiw	r26, 0x09	; 9
    2f82:	16 96       	adiw	r26, 0x06	; 6
    2f84:	8d 91       	ld	r24, X+
    2f86:	9c 91       	ld	r25, X
    2f88:	17 97       	sbiw	r26, 0x07	; 7
    2f8a:	9d 83       	std	Y+5, r25	; 0x05
    2f8c:	8c 83       	std	Y+4, r24	; 0x04
    2f8e:	81 81       	ldd	r24, Z+1	; 0x01
    2f90:	92 81       	ldd	r25, Z+2	; 0x02
    2f92:	9d 01       	movw	r18, r26
    2f94:	2e 5f       	subi	r18, 0xFE	; 254
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	82 17       	cp	r24, r18
    2f9a:	93 07       	cpc	r25, r19
    2f9c:	31 f4       	brne	.+12     	; 0x2faa <xTaskGenericNotify+0x14e>
    2f9e:	18 96       	adiw	r26, 0x08	; 8
    2fa0:	8d 91       	ld	r24, X+
    2fa2:	9c 91       	ld	r25, X
    2fa4:	19 97       	sbiw	r26, 0x09	; 9
    2fa6:	92 83       	std	Z+2, r25	; 0x02
    2fa8:	81 83       	std	Z+1, r24	; 0x01
    2faa:	1d 96       	adiw	r26, 0x0d	; 13
    2fac:	1c 92       	st	X, r1
    2fae:	1e 92       	st	-X, r1
    2fb0:	1c 97       	sbiw	r26, 0x0c	; 12
    2fb2:	80 81       	ld	r24, Z
    2fb4:	81 50       	subi	r24, 0x01	; 1
    2fb6:	80 83       	st	Z, r24
    2fb8:	5a 96       	adiw	r26, 0x1a	; 26
    2fba:	ec 91       	ld	r30, X
    2fbc:	5a 97       	sbiw	r26, 0x1a	; 26
    2fbe:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    2fc2:	8e 17       	cp	r24, r30
    2fc4:	10 f4       	brcc	.+4      	; 0x2fca <xTaskGenericNotify+0x16e>
    2fc6:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    2fca:	8b e0       	ldi	r24, 0x0B	; 11
    2fcc:	8e 9f       	mul	r24, r30
    2fce:	f0 01       	movw	r30, r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	e1 51       	subi	r30, 0x11	; 17
    2fd4:	ff 4e       	sbci	r31, 0xEF	; 239
    2fd6:	01 80       	ldd	r0, Z+1	; 0x01
    2fd8:	f2 81       	ldd	r31, Z+2	; 0x02
    2fda:	e0 2d       	mov	r30, r0
    2fdc:	17 96       	adiw	r26, 0x07	; 7
    2fde:	fc 93       	st	X, r31
    2fe0:	ee 93       	st	-X, r30
    2fe2:	16 97       	sbiw	r26, 0x06	; 6
    2fe4:	46 81       	ldd	r20, Z+6	; 0x06
    2fe6:	57 81       	ldd	r21, Z+7	; 0x07
    2fe8:	19 96       	adiw	r26, 0x09	; 9
    2fea:	5c 93       	st	X, r21
    2fec:	4e 93       	st	-X, r20
    2fee:	18 97       	sbiw	r26, 0x08	; 8
    2ff0:	c6 81       	ldd	r28, Z+6	; 0x06
    2ff2:	d7 81       	ldd	r29, Z+7	; 0x07
    2ff4:	3d 83       	std	Y+5, r19	; 0x05
    2ff6:	2c 83       	std	Y+4, r18	; 0x04
    2ff8:	37 83       	std	Z+7, r19	; 0x07
    2ffa:	26 83       	std	Z+6, r18	; 0x06
    2ffc:	5a 96       	adiw	r26, 0x1a	; 26
    2ffe:	ec 91       	ld	r30, X
    3000:	5a 97       	sbiw	r26, 0x1a	; 26
    3002:	8e 9f       	mul	r24, r30
    3004:	f0 01       	movw	r30, r0
    3006:	11 24       	eor	r1, r1
    3008:	e1 51       	subi	r30, 0x11	; 17
    300a:	ff 4e       	sbci	r31, 0xEF	; 239
    300c:	1d 96       	adiw	r26, 0x0d	; 13
    300e:	fc 93       	st	X, r31
    3010:	ee 93       	st	-X, r30
    3012:	1c 97       	sbiw	r26, 0x0c	; 12
    3014:	80 81       	ld	r24, Z
    3016:	8f 5f       	subi	r24, 0xFF	; 255
    3018:	80 83       	st	Z, r24
    301a:	5a 96       	adiw	r26, 0x1a	; 26
    301c:	9c 91       	ld	r25, X
    301e:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    3022:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    3026:	82 8d       	ldd	r24, Z+26	; 0x1a
    3028:	89 17       	cp	r24, r25
    302a:	10 f4       	brcc	.+4      	; 0x3030 <xTaskGenericNotify+0x1d4>
    302c:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    3030:	0f 90       	pop	r0
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	80 2f       	mov	r24, r16
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	ef 90       	pop	r14
    3040:	bf 90       	pop	r11
    3042:	af 90       	pop	r10
    3044:	9f 90       	pop	r9
    3046:	8f 90       	pop	r8
    3048:	08 95       	ret

0000304a <xTaskGenericNotifyFromISR>:
    304a:	8f 92       	push	r8
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	dc 01       	movw	r26, r24
    3062:	e1 14       	cp	r14, r1
    3064:	f1 04       	cpc	r15, r1
    3066:	89 f0       	breq	.+34     	; 0x308a <xTaskGenericNotifyFromISR+0x40>
    3068:	e6 2f       	mov	r30, r22
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	ee 0f       	add	r30, r30
    306e:	ff 1f       	adc	r31, r31
    3070:	ee 0f       	add	r30, r30
    3072:	ff 1f       	adc	r31, r31
    3074:	e8 0f       	add	r30, r24
    3076:	f9 1f       	adc	r31, r25
    3078:	87 a4       	ldd	r8, Z+47	; 0x2f
    307a:	90 a8       	ldd	r9, Z+48	; 0x30
    307c:	a1 a8       	ldd	r10, Z+49	; 0x31
    307e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3080:	f7 01       	movw	r30, r14
    3082:	80 82       	st	Z, r8
    3084:	91 82       	std	Z+1, r9	; 0x01
    3086:	a2 82       	std	Z+2, r10	; 0x02
    3088:	b3 82       	std	Z+3, r11	; 0x03
    308a:	70 e0       	ldi	r23, 0x00	; 0
    308c:	fd 01       	movw	r30, r26
    308e:	e6 0f       	add	r30, r22
    3090:	f7 1f       	adc	r31, r23
    3092:	93 a9       	ldd	r25, Z+51	; 0x33
    3094:	82 e0       	ldi	r24, 0x02	; 2
    3096:	83 ab       	std	Z+51, r24	; 0x33
    3098:	02 30       	cpi	r16, 0x02	; 2
    309a:	01 f1       	breq	.+64     	; 0x30dc <xTaskGenericNotifyFromISR+0x92>
    309c:	18 f4       	brcc	.+6      	; 0x30a4 <xTaskGenericNotifyFromISR+0x5a>
    309e:	01 30       	cpi	r16, 0x01	; 1
    30a0:	31 f0       	breq	.+12     	; 0x30ae <xTaskGenericNotifyFromISR+0x64>
    30a2:	4d c0       	rjmp	.+154    	; 0x313e <xTaskGenericNotifyFromISR+0xf4>
    30a4:	03 30       	cpi	r16, 0x03	; 3
    30a6:	79 f1       	breq	.+94     	; 0x3106 <xTaskGenericNotifyFromISR+0xbc>
    30a8:	04 30       	cpi	r16, 0x04	; 4
    30aa:	d1 f1       	breq	.+116    	; 0x3120 <xTaskGenericNotifyFromISR+0xd6>
    30ac:	48 c0       	rjmp	.+144    	; 0x313e <xTaskGenericNotifyFromISR+0xf4>
    30ae:	66 0f       	add	r22, r22
    30b0:	77 1f       	adc	r23, r23
    30b2:	66 0f       	add	r22, r22
    30b4:	77 1f       	adc	r23, r23
    30b6:	fd 01       	movw	r30, r26
    30b8:	e6 0f       	add	r30, r22
    30ba:	f7 1f       	adc	r31, r23
    30bc:	87 a4       	ldd	r8, Z+47	; 0x2f
    30be:	90 a8       	ldd	r9, Z+48	; 0x30
    30c0:	a1 a8       	ldd	r10, Z+49	; 0x31
    30c2:	b2 a8       	ldd	r11, Z+50	; 0x32
    30c4:	ba 01       	movw	r22, r20
    30c6:	a9 01       	movw	r20, r18
    30c8:	48 29       	or	r20, r8
    30ca:	59 29       	or	r21, r9
    30cc:	6a 29       	or	r22, r10
    30ce:	7b 29       	or	r23, r11
    30d0:	47 a7       	std	Z+47, r20	; 0x2f
    30d2:	50 ab       	std	Z+48, r21	; 0x30
    30d4:	61 ab       	std	Z+49, r22	; 0x31
    30d6:	72 ab       	std	Z+50, r23	; 0x32
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	34 c0       	rjmp	.+104    	; 0x3144 <xTaskGenericNotifyFromISR+0xfa>
    30dc:	66 0f       	add	r22, r22
    30de:	77 1f       	adc	r23, r23
    30e0:	66 0f       	add	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	fd 01       	movw	r30, r26
    30e6:	e6 0f       	add	r30, r22
    30e8:	f7 1f       	adc	r31, r23
    30ea:	47 a5       	ldd	r20, Z+47	; 0x2f
    30ec:	50 a9       	ldd	r21, Z+48	; 0x30
    30ee:	61 a9       	ldd	r22, Z+49	; 0x31
    30f0:	72 a9       	ldd	r23, Z+50	; 0x32
    30f2:	4f 5f       	subi	r20, 0xFF	; 255
    30f4:	5f 4f       	sbci	r21, 0xFF	; 255
    30f6:	6f 4f       	sbci	r22, 0xFF	; 255
    30f8:	7f 4f       	sbci	r23, 0xFF	; 255
    30fa:	47 a7       	std	Z+47, r20	; 0x2f
    30fc:	50 ab       	std	Z+48, r21	; 0x30
    30fe:	61 ab       	std	Z+49, r22	; 0x31
    3100:	72 ab       	std	Z+50, r23	; 0x32
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	1f c0       	rjmp	.+62     	; 0x3144 <xTaskGenericNotifyFromISR+0xfa>
    3106:	66 0f       	add	r22, r22
    3108:	77 1f       	adc	r23, r23
    310a:	66 0f       	add	r22, r22
    310c:	77 1f       	adc	r23, r23
    310e:	fd 01       	movw	r30, r26
    3110:	e6 0f       	add	r30, r22
    3112:	f7 1f       	adc	r31, r23
    3114:	27 a7       	std	Z+47, r18	; 0x2f
    3116:	30 ab       	std	Z+48, r19	; 0x30
    3118:	41 ab       	std	Z+49, r20	; 0x31
    311a:	52 ab       	std	Z+50, r21	; 0x32
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	12 c0       	rjmp	.+36     	; 0x3144 <xTaskGenericNotifyFromISR+0xfa>
    3120:	92 30       	cpi	r25, 0x02	; 2
    3122:	79 f0       	breq	.+30     	; 0x3142 <xTaskGenericNotifyFromISR+0xf8>
    3124:	66 0f       	add	r22, r22
    3126:	77 1f       	adc	r23, r23
    3128:	66 0f       	add	r22, r22
    312a:	77 1f       	adc	r23, r23
    312c:	fd 01       	movw	r30, r26
    312e:	e6 0f       	add	r30, r22
    3130:	f7 1f       	adc	r31, r23
    3132:	27 a7       	std	Z+47, r18	; 0x2f
    3134:	30 ab       	std	Z+48, r19	; 0x30
    3136:	41 ab       	std	Z+49, r20	; 0x31
    3138:	52 ab       	std	Z+50, r21	; 0x32
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	03 c0       	rjmp	.+6      	; 0x3144 <xTaskGenericNotifyFromISR+0xfa>
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <xTaskGenericNotifyFromISR+0xfa>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	91 30       	cpi	r25, 0x01	; 1
    3146:	09 f0       	breq	.+2      	; 0x314a <xTaskGenericNotifyFromISR+0x100>
    3148:	96 c0       	rjmp	.+300    	; 0x3276 <xTaskGenericNotifyFromISR+0x22c>
    314a:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <uxSchedulerSuspended>
    314e:	91 11       	cpse	r25, r1
    3150:	5f c0       	rjmp	.+190    	; 0x3210 <xTaskGenericNotifyFromISR+0x1c6>
    3152:	1c 96       	adiw	r26, 0x0c	; 12
    3154:	ed 91       	ld	r30, X+
    3156:	fc 91       	ld	r31, X
    3158:	1d 97       	sbiw	r26, 0x0d	; 13
    315a:	16 96       	adiw	r26, 0x06	; 6
    315c:	cd 91       	ld	r28, X+
    315e:	dc 91       	ld	r29, X
    3160:	17 97       	sbiw	r26, 0x07	; 7
    3162:	18 96       	adiw	r26, 0x08	; 8
    3164:	2d 91       	ld	r18, X+
    3166:	3c 91       	ld	r19, X
    3168:	19 97       	sbiw	r26, 0x09	; 9
    316a:	3f 83       	std	Y+7, r19	; 0x07
    316c:	2e 83       	std	Y+6, r18	; 0x06
    316e:	18 96       	adiw	r26, 0x08	; 8
    3170:	cd 91       	ld	r28, X+
    3172:	dc 91       	ld	r29, X
    3174:	19 97       	sbiw	r26, 0x09	; 9
    3176:	16 96       	adiw	r26, 0x06	; 6
    3178:	2d 91       	ld	r18, X+
    317a:	3c 91       	ld	r19, X
    317c:	17 97       	sbiw	r26, 0x07	; 7
    317e:	3d 83       	std	Y+5, r19	; 0x05
    3180:	2c 83       	std	Y+4, r18	; 0x04
    3182:	41 81       	ldd	r20, Z+1	; 0x01
    3184:	52 81       	ldd	r21, Z+2	; 0x02
    3186:	9d 01       	movw	r18, r26
    3188:	2e 5f       	subi	r18, 0xFE	; 254
    318a:	3f 4f       	sbci	r19, 0xFF	; 255
    318c:	42 17       	cp	r20, r18
    318e:	53 07       	cpc	r21, r19
    3190:	31 f4       	brne	.+12     	; 0x319e <xTaskGenericNotifyFromISR+0x154>
    3192:	18 96       	adiw	r26, 0x08	; 8
    3194:	4d 91       	ld	r20, X+
    3196:	5c 91       	ld	r21, X
    3198:	19 97       	sbiw	r26, 0x09	; 9
    319a:	52 83       	std	Z+2, r21	; 0x02
    319c:	41 83       	std	Z+1, r20	; 0x01
    319e:	1d 96       	adiw	r26, 0x0d	; 13
    31a0:	1c 92       	st	X, r1
    31a2:	1e 92       	st	-X, r1
    31a4:	1c 97       	sbiw	r26, 0x0c	; 12
    31a6:	90 81       	ld	r25, Z
    31a8:	91 50       	subi	r25, 0x01	; 1
    31aa:	90 83       	st	Z, r25
    31ac:	5a 96       	adiw	r26, 0x1a	; 26
    31ae:	ec 91       	ld	r30, X
    31b0:	5a 97       	sbiw	r26, 0x1a	; 26
    31b2:	90 91 ad 10 	lds	r25, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    31b6:	9e 17       	cp	r25, r30
    31b8:	10 f4       	brcc	.+4      	; 0x31be <xTaskGenericNotifyFromISR+0x174>
    31ba:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    31be:	9b e0       	ldi	r25, 0x0B	; 11
    31c0:	9e 9f       	mul	r25, r30
    31c2:	f0 01       	movw	r30, r0
    31c4:	11 24       	eor	r1, r1
    31c6:	e1 51       	subi	r30, 0x11	; 17
    31c8:	ff 4e       	sbci	r31, 0xEF	; 239
    31ca:	01 80       	ldd	r0, Z+1	; 0x01
    31cc:	f2 81       	ldd	r31, Z+2	; 0x02
    31ce:	e0 2d       	mov	r30, r0
    31d0:	17 96       	adiw	r26, 0x07	; 7
    31d2:	fc 93       	st	X, r31
    31d4:	ee 93       	st	-X, r30
    31d6:	16 97       	sbiw	r26, 0x06	; 6
    31d8:	46 81       	ldd	r20, Z+6	; 0x06
    31da:	57 81       	ldd	r21, Z+7	; 0x07
    31dc:	19 96       	adiw	r26, 0x09	; 9
    31de:	5c 93       	st	X, r21
    31e0:	4e 93       	st	-X, r20
    31e2:	18 97       	sbiw	r26, 0x08	; 8
    31e4:	c6 81       	ldd	r28, Z+6	; 0x06
    31e6:	d7 81       	ldd	r29, Z+7	; 0x07
    31e8:	3d 83       	std	Y+5, r19	; 0x05
    31ea:	2c 83       	std	Y+4, r18	; 0x04
    31ec:	37 83       	std	Z+7, r19	; 0x07
    31ee:	26 83       	std	Z+6, r18	; 0x06
    31f0:	5a 96       	adiw	r26, 0x1a	; 26
    31f2:	ec 91       	ld	r30, X
    31f4:	5a 97       	sbiw	r26, 0x1a	; 26
    31f6:	9e 9f       	mul	r25, r30
    31f8:	f0 01       	movw	r30, r0
    31fa:	11 24       	eor	r1, r1
    31fc:	e1 51       	subi	r30, 0x11	; 17
    31fe:	ff 4e       	sbci	r31, 0xEF	; 239
    3200:	1d 96       	adiw	r26, 0x0d	; 13
    3202:	fc 93       	st	X, r31
    3204:	ee 93       	st	-X, r30
    3206:	1c 97       	sbiw	r26, 0x0c	; 12
    3208:	90 81       	ld	r25, Z
    320a:	9f 5f       	subi	r25, 0xFF	; 255
    320c:	90 83       	st	Z, r25
    320e:	21 c0       	rjmp	.+66     	; 0x3252 <xTaskGenericNotifyFromISR+0x208>
    3210:	6a ec       	ldi	r22, 0xCA	; 202
    3212:	70 e1       	ldi	r23, 0x10	; 16
    3214:	fb 01       	movw	r30, r22
    3216:	c1 81       	ldd	r28, Z+1	; 0x01
    3218:	d2 81       	ldd	r29, Z+2	; 0x02
    321a:	53 96       	adiw	r26, 0x13	; 19
    321c:	dc 93       	st	X, r29
    321e:	ce 93       	st	-X, r28
    3220:	52 97       	sbiw	r26, 0x12	; 18
    3222:	2e 81       	ldd	r18, Y+6	; 0x06
    3224:	3f 81       	ldd	r19, Y+7	; 0x07
    3226:	55 96       	adiw	r26, 0x15	; 21
    3228:	3c 93       	st	X, r19
    322a:	2e 93       	st	-X, r18
    322c:	54 97       	sbiw	r26, 0x14	; 20
    322e:	4e 81       	ldd	r20, Y+6	; 0x06
    3230:	5f 81       	ldd	r21, Y+7	; 0x07
    3232:	9d 01       	movw	r18, r26
    3234:	22 5f       	subi	r18, 0xF2	; 242
    3236:	3f 4f       	sbci	r19, 0xFF	; 255
    3238:	fa 01       	movw	r30, r20
    323a:	35 83       	std	Z+5, r19	; 0x05
    323c:	24 83       	std	Z+4, r18	; 0x04
    323e:	3f 83       	std	Y+7, r19	; 0x07
    3240:	2e 83       	std	Y+6, r18	; 0x06
    3242:	59 96       	adiw	r26, 0x19	; 25
    3244:	7c 93       	st	X, r23
    3246:	6e 93       	st	-X, r22
    3248:	58 97       	sbiw	r26, 0x18	; 24
    324a:	fb 01       	movw	r30, r22
    324c:	90 81       	ld	r25, Z
    324e:	9f 5f       	subi	r25, 0xFF	; 255
    3250:	90 83       	st	Z, r25
    3252:	5a 96       	adiw	r26, 0x1a	; 26
    3254:	2c 91       	ld	r18, X
    3256:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    325a:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    325e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3260:	92 17       	cp	r25, r18
    3262:	48 f4       	brcc	.+18     	; 0x3276 <xTaskGenericNotifyFromISR+0x22c>
    3264:	c1 14       	cp	r12, r1
    3266:	d1 04       	cpc	r13, r1
    3268:	19 f0       	breq	.+6      	; 0x3270 <xTaskGenericNotifyFromISR+0x226>
    326a:	91 e0       	ldi	r25, 0x01	; 1
    326c:	f6 01       	movw	r30, r12
    326e:	90 83       	st	Z, r25
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	90 93 a7 10 	sts	0x10A7, r25	; 0x8010a7 <xYieldPending>
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	0f 91       	pop	r16
    327c:	ff 90       	pop	r15
    327e:	ef 90       	pop	r14
    3280:	df 90       	pop	r13
    3282:	cf 90       	pop	r12
    3284:	bf 90       	pop	r11
    3286:	af 90       	pop	r10
    3288:	9f 90       	pop	r9
    328a:	8f 90       	pop	r8
    328c:	08 95       	ret

0000328e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	21 f4       	brne	.+8      	; 0x329a <xTaskGenericNotifyStateClear+0xc>
    3292:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    3296:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    32a0:	70 e0       	ldi	r23, 0x00	; 0
    32a2:	fc 01       	movw	r30, r24
    32a4:	e6 0f       	add	r30, r22
    32a6:	f7 1f       	adc	r31, r23
    32a8:	23 a9       	ldd	r18, Z+51	; 0x33
    32aa:	22 30       	cpi	r18, 0x02	; 2
    32ac:	31 f4       	brne	.+12     	; 0x32ba <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    32ae:	fc 01       	movw	r30, r24
    32b0:	e6 0f       	add	r30, r22
    32b2:	f7 1f       	adc	r31, r23
    32b4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    32ba:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    32bc:	0f 90       	pop	r0
    32be:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    32c0:	08 95       	ret

000032c2 <prvGetNextExpireTime>:
    32c2:	dc 01       	movw	r26, r24
    32c4:	e0 91 69 11 	lds	r30, 0x1169	; 0x801169 <pxCurrentTimerList>
    32c8:	f0 91 6a 11 	lds	r31, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    32cc:	80 81       	ld	r24, Z
    32ce:	91 e0       	ldi	r25, 0x01	; 1
    32d0:	81 11       	cpse	r24, r1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9c 93       	st	X, r25
    32d6:	91 11       	cpse	r25, r1
    32d8:	08 c0       	rjmp	.+16     	; 0x32ea <prvGetNextExpireTime+0x28>
    32da:	07 80       	ldd	r0, Z+7	; 0x07
    32dc:	f0 85       	ldd	r31, Z+8	; 0x08
    32de:	e0 2d       	mov	r30, r0
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	08 95       	ret
    32ea:	60 e0       	ldi	r22, 0x00	; 0
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	cb 01       	movw	r24, r22
    32f0:	08 95       	ret

000032f2 <prvInsertTimerInActiveList>:
    32f2:	cf 92       	push	r12
    32f4:	df 92       	push	r13
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	fc 01       	movw	r30, r24
    3300:	42 83       	std	Z+2, r20	; 0x02
    3302:	53 83       	std	Z+3, r21	; 0x03
    3304:	64 83       	std	Z+4, r22	; 0x04
    3306:	75 83       	std	Z+5, r23	; 0x05
    3308:	93 87       	std	Z+11, r25	; 0x0b
    330a:	82 87       	std	Z+10, r24	; 0x0a
    330c:	04 17       	cp	r16, r20
    330e:	15 07       	cpc	r17, r21
    3310:	26 07       	cpc	r18, r22
    3312:	37 07       	cpc	r19, r23
    3314:	c0 f0       	brcs	.+48     	; 0x3346 <prvInsertTimerInActiveList+0x54>
    3316:	0c 19       	sub	r16, r12
    3318:	1d 09       	sbc	r17, r13
    331a:	2e 09       	sbc	r18, r14
    331c:	3f 09       	sbc	r19, r15
    331e:	86 85       	ldd	r24, Z+14	; 0x0e
    3320:	97 85       	ldd	r25, Z+15	; 0x0f
    3322:	a0 89       	ldd	r26, Z+16	; 0x10
    3324:	b1 89       	ldd	r27, Z+17	; 0x11
    3326:	08 17       	cp	r16, r24
    3328:	19 07       	cpc	r17, r25
    332a:	2a 07       	cpc	r18, r26
    332c:	3b 07       	cpc	r19, r27
    332e:	00 f5       	brcc	.+64     	; 0x3370 <prvInsertTimerInActiveList+0x7e>
    3330:	bf 01       	movw	r22, r30
    3332:	6e 5f       	subi	r22, 0xFE	; 254
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	80 91 67 11 	lds	r24, 0x1167	; 0x801167 <pxOverflowTimerList>
    333a:	90 91 68 11 	lds	r25, 0x1168	; 0x801168 <pxOverflowTimerList+0x1>
    333e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInsert>
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	18 c0       	rjmp	.+48     	; 0x3376 <prvInsertTimerInActiveList+0x84>
    3346:	0c 15       	cp	r16, r12
    3348:	1d 05       	cpc	r17, r13
    334a:	2e 05       	cpc	r18, r14
    334c:	3f 05       	cpc	r19, r15
    334e:	28 f4       	brcc	.+10     	; 0x335a <prvInsertTimerInActiveList+0x68>
    3350:	4c 15       	cp	r20, r12
    3352:	5d 05       	cpc	r21, r13
    3354:	6e 05       	cpc	r22, r14
    3356:	7f 05       	cpc	r23, r15
    3358:	68 f4       	brcc	.+26     	; 0x3374 <prvInsertTimerInActiveList+0x82>
    335a:	bf 01       	movw	r22, r30
    335c:	6e 5f       	subi	r22, 0xFE	; 254
    335e:	7f 4f       	sbci	r23, 0xFF	; 255
    3360:	80 91 69 11 	lds	r24, 0x1169	; 0x801169 <pxCurrentTimerList>
    3364:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    3368:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInsert>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	03 c0       	rjmp	.+6      	; 0x3376 <prvInsertTimerInActiveList+0x84>
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	01 c0       	rjmp	.+2      	; 0x3376 <prvInsertTimerInActiveList+0x84>
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	1f 91       	pop	r17
    3378:	0f 91       	pop	r16
    337a:	ff 90       	pop	r15
    337c:	ef 90       	pop	r14
    337e:	df 90       	pop	r13
    3380:	cf 90       	pop	r12
    3382:	08 95       	ret

00003384 <prvCheckForValidListAndQueue>:
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	0f 92       	push	r0
    338a:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    338e:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    3392:	89 2b       	or	r24, r25
    3394:	e9 f4       	brne	.+58     	; 0x33d0 <prvCheckForValidListAndQueue+0x4c>
    3396:	86 e7       	ldi	r24, 0x76	; 118
    3398:	91 e1       	ldi	r25, 0x11	; 17
    339a:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    339e:	8b e6       	ldi	r24, 0x6B	; 107
    33a0:	91 e1       	ldi	r25, 0x11	; 17
    33a2:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialise>
    33a6:	86 e7       	ldi	r24, 0x76	; 118
    33a8:	91 e1       	ldi	r25, 0x11	; 17
    33aa:	90 93 6a 11 	sts	0x116A, r25	; 0x80116a <pxCurrentTimerList+0x1>
    33ae:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <pxCurrentTimerList>
    33b2:	8b e6       	ldi	r24, 0x6B	; 107
    33b4:	91 e1       	ldi	r25, 0x11	; 17
    33b6:	90 93 68 11 	sts	0x1168, r25	; 0x801168 <pxOverflowTimerList+0x1>
    33ba:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <pxOverflowTimerList>
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	67 e0       	ldi	r22, 0x07	; 7
    33c2:	8a e0       	ldi	r24, 0x0A	; 10
    33c4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <xQueueGenericCreate>
    33c8:	90 93 66 11 	sts	0x1166, r25	; 0x801166 <xTimerQueue+0x1>
    33cc:	80 93 65 11 	sts	0x1165, r24	; 0x801165 <xTimerQueue>
    33d0:	0f 90       	pop	r0
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	08 95       	ret

000033d6 <xTimerCreateTimerTask>:
    33d6:	ef 92       	push	r14
    33d8:	ff 92       	push	r15
    33da:	0f 93       	push	r16
    33dc:	d3 df       	rcall	.-90     	; 0x3384 <prvCheckForValidListAndQueue>
    33de:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    33e2:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    33e6:	89 2b       	or	r24, r25
    33e8:	91 f0       	breq	.+36     	; 0x340e <xTimerCreateTimerTask+0x38>
    33ea:	0f 2e       	mov	r0, r31
    33ec:	f3 e6       	ldi	r31, 0x63	; 99
    33ee:	ef 2e       	mov	r14, r31
    33f0:	f1 e1       	ldi	r31, 0x11	; 17
    33f2:	ff 2e       	mov	r15, r31
    33f4:	f0 2d       	mov	r31, r0
    33f6:	03 e0       	ldi	r16, 0x03	; 3
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 ec       	ldi	r20, 0xC0	; 192
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	6f ed       	ldi	r22, 0xDF	; 223
    3402:	73 e0       	ldi	r23, 0x03	; 3
    3404:	88 e5       	ldi	r24, 0x58	; 88
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <xTaskCreate>
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <xTimerCreateTimerTask+0x3a>
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	0f 91       	pop	r16
    3412:	ff 90       	pop	r15
    3414:	ef 90       	pop	r14
    3416:	08 95       	ret

00003418 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3418:	8f 92       	push	r8
    341a:	9f 92       	push	r9
    341c:	af 92       	push	r10
    341e:	bf 92       	push	r11
    3420:	cf 92       	push	r12
    3422:	df 92       	push	r13
    3424:	ef 92       	push	r14
    3426:	ff 92       	push	r15
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	27 97       	sbiw	r28, 0x07	; 7
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3440:	e0 91 65 11 	lds	r30, 0x1165	; 0x801165 <xTimerQueue>
    3444:	f0 91 66 11 	lds	r31, 0x1166	; 0x801166 <xTimerQueue+0x1>
    3448:	30 97       	sbiw	r30, 0x00	; 0
    344a:	81 f1       	breq	.+96     	; 0x34ac <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    344c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    344e:	2a 83       	std	Y+2, r18	; 0x02
    3450:	3b 83       	std	Y+3, r19	; 0x03
    3452:	4c 83       	std	Y+4, r20	; 0x04
    3454:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3456:	9f 83       	std	Y+7, r25	; 0x07
    3458:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    345a:	66 30       	cpi	r22, 0x06	; 6
    345c:	f4 f4       	brge	.+60     	; 0x349a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    345e:	c4 db       	rcall	.-2168   	; 0x2be8 <xTaskGetSchedulerState>
    3460:	82 30       	cpi	r24, 0x02	; 2
    3462:	69 f4       	brne	.+26     	; 0x347e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3464:	00 e0       	ldi	r16, 0x00	; 0
    3466:	a7 01       	movw	r20, r14
    3468:	96 01       	movw	r18, r12
    346a:	be 01       	movw	r22, r28
    346c:	6f 5f       	subi	r22, 0xFF	; 255
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    3474:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    3478:	0e 94 0f 09 	call	0x121e	; 0x121e <xQueueGenericSend>
    347c:	18 c0       	rjmp	.+48     	; 0x34ae <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    347e:	00 e0       	ldi	r16, 0x00	; 0
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	a9 01       	movw	r20, r18
    3486:	be 01       	movw	r22, r28
    3488:	6f 5f       	subi	r22, 0xFF	; 255
    348a:	7f 4f       	sbci	r23, 0xFF	; 255
    348c:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    3490:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    3494:	0e 94 0f 09 	call	0x121e	; 0x121e <xQueueGenericSend>
    3498:	0a c0       	rjmp	.+20     	; 0x34ae <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	a8 01       	movw	r20, r16
    349e:	be 01       	movw	r22, r28
    34a0:	6f 5f       	subi	r22, 0xFF	; 255
    34a2:	7f 4f       	sbci	r23, 0xFF	; 255
    34a4:	cf 01       	movw	r24, r30
    34a6:	0e 94 bf 09 	call	0x137e	; 0x137e <xQueueGenericSendFromISR>
    34aa:	01 c0       	rjmp	.+2      	; 0x34ae <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    34ac:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    34ae:	27 96       	adiw	r28, 0x07	; 7
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	df 90       	pop	r13
    34c8:	cf 90       	pop	r12
    34ca:	bf 90       	pop	r11
    34cc:	af 90       	pop	r10
    34ce:	9f 90       	pop	r9
    34d0:	8f 90       	pop	r8
    34d2:	08 95       	ret

000034d4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    34d4:	8f 92       	push	r8
    34d6:	9f 92       	push	r9
    34d8:	af 92       	push	r10
    34da:	bf 92       	push	r11
    34dc:	cf 92       	push	r12
    34de:	df 92       	push	r13
    34e0:	ef 92       	push	r14
    34e2:	ff 92       	push	r15
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34ec:	3b c0       	rjmp	.+118    	; 0x3564 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    34ee:	07 80       	ldd	r0, Z+7	; 0x07
    34f0:	f0 85       	ldd	r31, Z+8	; 0x08
    34f2:	e0 2d       	mov	r30, r0
    34f4:	80 80       	ld	r8, Z
    34f6:	91 80       	ldd	r9, Z+1	; 0x01
    34f8:	a2 80       	ldd	r10, Z+2	; 0x02
    34fa:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34fc:	c0 85       	ldd	r28, Z+8	; 0x08
    34fe:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3500:	8e 01       	movw	r16, r28
    3502:	0e 5f       	subi	r16, 0xFE	; 254
    3504:	1f 4f       	sbci	r17, 0xFF	; 255
    3506:	c8 01       	movw	r24, r16
    3508:	0e 94 8b 06 	call	0xd16	; 0xd16 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    350c:	ec 89       	ldd	r30, Y+20	; 0x14
    350e:	fd 89       	ldd	r31, Y+21	; 0x15
    3510:	ce 01       	movw	r24, r28
    3512:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3514:	8e 89       	ldd	r24, Y+22	; 0x16
    3516:	82 ff       	sbrs	r24, 2
    3518:	25 c0       	rjmp	.+74     	; 0x3564 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    351a:	8e 85       	ldd	r24, Y+14	; 0x0e
    351c:	9f 85       	ldd	r25, Y+15	; 0x0f
    351e:	a8 89       	ldd	r26, Y+16	; 0x10
    3520:	b9 89       	ldd	r27, Y+17	; 0x11
    3522:	88 0d       	add	r24, r8
    3524:	99 1d       	adc	r25, r9
    3526:	aa 1d       	adc	r26, r10
    3528:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    352a:	88 16       	cp	r8, r24
    352c:	99 06       	cpc	r9, r25
    352e:	aa 06       	cpc	r10, r26
    3530:	bb 06       	cpc	r11, r27
    3532:	70 f4       	brcc	.+28     	; 0x3550 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3534:	8a 83       	std	Y+2, r24	; 0x02
    3536:	9b 83       	std	Y+3, r25	; 0x03
    3538:	ac 83       	std	Y+4, r26	; 0x04
    353a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    353c:	db 87       	std	Y+11, r29	; 0x0b
    353e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3540:	b8 01       	movw	r22, r16
    3542:	80 91 69 11 	lds	r24, 0x1169	; 0x801169 <pxCurrentTimerList>
    3546:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    354a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInsert>
    354e:	0a c0       	rjmp	.+20     	; 0x3564 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3550:	c1 2c       	mov	r12, r1
    3552:	d1 2c       	mov	r13, r1
    3554:	76 01       	movw	r14, r12
    3556:	00 e0       	ldi	r16, 0x00	; 0
    3558:	10 e0       	ldi	r17, 0x00	; 0
    355a:	a5 01       	movw	r20, r10
    355c:	94 01       	movw	r18, r8
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	ce 01       	movw	r24, r28
    3562:	5a df       	rcall	.-332    	; 0x3418 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3564:	e0 91 69 11 	lds	r30, 0x1169	; 0x801169 <pxCurrentTimerList>
    3568:	f0 91 6a 11 	lds	r31, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    356c:	80 81       	ld	r24, Z
    356e:	81 11       	cpse	r24, r1
    3570:	be cf       	rjmp	.-132    	; 0x34ee <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3572:	80 91 67 11 	lds	r24, 0x1167	; 0x801167 <pxOverflowTimerList>
    3576:	90 91 68 11 	lds	r25, 0x1168	; 0x801168 <pxOverflowTimerList+0x1>
    357a:	90 93 6a 11 	sts	0x116A, r25	; 0x80116a <pxCurrentTimerList+0x1>
    357e:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3582:	f0 93 68 11 	sts	0x1168, r31	; 0x801168 <pxOverflowTimerList+0x1>
    3586:	e0 93 67 11 	sts	0x1167, r30	; 0x801167 <pxOverflowTimerList>
    }
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	df 90       	pop	r13
    3598:	cf 90       	pop	r12
    359a:	bf 90       	pop	r11
    359c:	af 90       	pop	r10
    359e:	9f 90       	pop	r9
    35a0:	8f 90       	pop	r8
    35a2:	08 95       	ret

000035a4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    35b2:	0e 94 77 10 	call	0x20ee	; 0x20ee <xTaskGetTickCount>
    35b6:	6b 01       	movw	r12, r22
    35b8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    35ba:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xLastTime.2436>
    35be:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xLastTime.2436+0x1>
    35c2:	a0 91 61 11 	lds	r26, 0x1161	; 0x801161 <xLastTime.2436+0x2>
    35c6:	b0 91 62 11 	lds	r27, 0x1162	; 0x801162 <xLastTime.2436+0x3>
    35ca:	c8 16       	cp	r12, r24
    35cc:	d9 06       	cpc	r13, r25
    35ce:	ea 06       	cpc	r14, r26
    35d0:	fb 06       	cpc	r15, r27
    35d2:	20 f4       	brcc	.+8      	; 0x35dc <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    35d4:	7f df       	rcall	.-258    	; 0x34d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	88 83       	st	Y, r24
    35da:	01 c0       	rjmp	.+2      	; 0x35de <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    35dc:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    35de:	c0 92 5f 11 	sts	0x115F, r12	; 0x80115f <xLastTime.2436>
    35e2:	d0 92 60 11 	sts	0x1160, r13	; 0x801160 <xLastTime.2436+0x1>
    35e6:	e0 92 61 11 	sts	0x1161, r14	; 0x801161 <xLastTime.2436+0x2>
    35ea:	f0 92 62 11 	sts	0x1162, r15	; 0x801162 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    35ee:	c7 01       	movw	r24, r14
    35f0:	b6 01       	movw	r22, r12
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	ff 90       	pop	r15
    35f8:	ef 90       	pop	r14
    35fa:	df 90       	pop	r13
    35fc:	cf 90       	pop	r12
    35fe:	08 95       	ret

00003600 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3600:	4f 92       	push	r4
    3602:	5f 92       	push	r5
    3604:	6f 92       	push	r6
    3606:	7f 92       	push	r7
    3608:	8f 92       	push	r8
    360a:	9f 92       	push	r9
    360c:	af 92       	push	r10
    360e:	bf 92       	push	r11
    3610:	cf 92       	push	r12
    3612:	df 92       	push	r13
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	4b 01       	movw	r8, r22
    3622:	5c 01       	movw	r10, r24
    3624:	29 01       	movw	r4, r18
    3626:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3628:	e0 91 69 11 	lds	r30, 0x1169	; 0x801169 <pxCurrentTimerList>
    362c:	f0 91 6a 11 	lds	r31, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    3630:	07 80       	ldd	r0, Z+7	; 0x07
    3632:	f0 85       	ldd	r31, Z+8	; 0x08
    3634:	e0 2d       	mov	r30, r0
    3636:	c0 85       	ldd	r28, Z+8	; 0x08
    3638:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    363a:	ce 01       	movw	r24, r28
    363c:	02 96       	adiw	r24, 0x02	; 2
    363e:	0e 94 8b 06 	call	0xd16	; 0xd16 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3642:	8e 89       	ldd	r24, Y+22	; 0x16
    3644:	82 ff       	sbrs	r24, 2
    3646:	1b c0       	rjmp	.+54     	; 0x367e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3648:	4e 85       	ldd	r20, Y+14	; 0x0e
    364a:	5f 85       	ldd	r21, Y+15	; 0x0f
    364c:	68 89       	ldd	r22, Y+16	; 0x10
    364e:	79 89       	ldd	r23, Y+17	; 0x11
    3650:	48 0d       	add	r20, r8
    3652:	59 1d       	adc	r21, r9
    3654:	6a 1d       	adc	r22, r10
    3656:	7b 1d       	adc	r23, r11
    3658:	75 01       	movw	r14, r10
    365a:	64 01       	movw	r12, r8
    365c:	93 01       	movw	r18, r6
    365e:	82 01       	movw	r16, r4
    3660:	ce 01       	movw	r24, r28
    3662:	47 de       	rcall	.-882    	; 0x32f2 <prvInsertTimerInActiveList>
    3664:	88 23       	and	r24, r24
    3666:	69 f0       	breq	.+26     	; 0x3682 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3668:	c1 2c       	mov	r12, r1
    366a:	d1 2c       	mov	r13, r1
    366c:	76 01       	movw	r14, r12
    366e:	00 e0       	ldi	r16, 0x00	; 0
    3670:	10 e0       	ldi	r17, 0x00	; 0
    3672:	a5 01       	movw	r20, r10
    3674:	94 01       	movw	r18, r8
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	ce 01       	movw	r24, r28
    367a:	ce de       	rcall	.-612    	; 0x3418 <xTimerGenericCommand>
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    367e:	8e 7f       	andi	r24, 0xFE	; 254
    3680:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3682:	ec 89       	ldd	r30, Y+20	; 0x14
    3684:	fd 89       	ldd	r31, Y+21	; 0x15
    3686:	ce 01       	movw	r24, r28
    3688:	19 95       	eicall
    }
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	ff 90       	pop	r15
    3694:	ef 90       	pop	r14
    3696:	df 90       	pop	r13
    3698:	cf 90       	pop	r12
    369a:	bf 90       	pop	r11
    369c:	af 90       	pop	r10
    369e:	9f 90       	pop	r9
    36a0:	8f 90       	pop	r8
    36a2:	7f 90       	pop	r7
    36a4:	6f 90       	pop	r6
    36a6:	5f 90       	pop	r5
    36a8:	4f 90       	pop	r4
    36aa:	08 95       	ret

000036ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    36ac:	8f 92       	push	r8
    36ae:	9f 92       	push	r9
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	1f 92       	push	r1
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	6b 01       	movw	r12, r22
    36ca:	7c 01       	movw	r14, r24
    36cc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    36ce:	0e 94 71 10 	call	0x20e2	; 0x20e2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    36d2:	ce 01       	movw	r24, r28
    36d4:	01 96       	adiw	r24, 0x01	; 1
    36d6:	66 df       	rcall	.-308    	; 0x35a4 <prvSampleTimeNow>
    36d8:	4b 01       	movw	r8, r22
    36da:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	81 11       	cpse	r24, r1
    36e0:	2d c0       	rjmp	.+90     	; 0x373c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    36e2:	11 11       	cpse	r17, r1
    36e4:	0d c0       	rjmp	.+26     	; 0x3700 <prvProcessTimerOrBlockTask+0x54>
    36e6:	8c 14       	cp	r8, r12
    36e8:	9d 04       	cpc	r9, r13
    36ea:	ae 04       	cpc	r10, r14
    36ec:	bf 04       	cpc	r11, r15
    36ee:	40 f0       	brcs	.+16     	; 0x3700 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    36f0:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    36f4:	a5 01       	movw	r20, r10
    36f6:	94 01       	movw	r18, r8
    36f8:	c7 01       	movw	r24, r14
    36fa:	b6 01       	movw	r22, r12
    36fc:	81 df       	rcall	.-254    	; 0x3600 <prvProcessExpiredTimer>
    36fe:	20 c0       	rjmp	.+64     	; 0x3740 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3700:	11 23       	and	r17, r17
    3702:	41 f0       	breq	.+16     	; 0x3714 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3704:	e0 91 67 11 	lds	r30, 0x1167	; 0x801167 <pxOverflowTimerList>
    3708:	f0 91 68 11 	lds	r31, 0x1168	; 0x801168 <pxOverflowTimerList+0x1>
    370c:	80 81       	ld	r24, Z
    370e:	11 e0       	ldi	r17, 0x01	; 1
    3710:	81 11       	cpse	r24, r1
    3712:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3714:	b7 01       	movw	r22, r14
    3716:	a6 01       	movw	r20, r12
    3718:	48 19       	sub	r20, r8
    371a:	59 09       	sbc	r21, r9
    371c:	6a 09       	sbc	r22, r10
    371e:	7b 09       	sbc	r23, r11
    3720:	21 2f       	mov	r18, r17
    3722:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    3726:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    372a:	0e 94 89 0a 	call	0x1512	; 0x1512 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    372e:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
    3732:	81 11       	cpse	r24, r1
    3734:	05 c0       	rjmp	.+10     	; 0x3740 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3736:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    373a:	02 c0       	rjmp	.+4      	; 0x3740 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    373c:	0e 94 b1 11 	call	0x2362	; 0x2362 <xTaskResumeAll>
            }
        }
    }
    3740:	0f 90       	pop	r0
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	1f 91       	pop	r17
    3748:	ff 90       	pop	r15
    374a:	ef 90       	pop	r14
    374c:	df 90       	pop	r13
    374e:	cf 90       	pop	r12
    3750:	bf 90       	pop	r11
    3752:	af 90       	pop	r10
    3754:	9f 90       	pop	r9
    3756:	8f 90       	pop	r8
    3758:	08 95       	ret

0000375a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    375a:	af 92       	push	r10
    375c:	bf 92       	push	r11
    375e:	cf 92       	push	r12
    3760:	df 92       	push	r13
    3762:	ef 92       	push	r14
    3764:	ff 92       	push	r15
    3766:	0f 93       	push	r16
    3768:	1f 93       	push	r17
    376a:	cf 93       	push	r28
    376c:	df 93       	push	r29
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	28 97       	sbiw	r28, 0x08	; 8
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    377e:	82 c0       	rjmp	.+260    	; 0x3884 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	88 23       	and	r24, r24
    3784:	0c f4       	brge	.+2      	; 0x3788 <prvProcessReceivedCommands+0x2e>
    3786:	7e c0       	rjmp	.+252    	; 0x3884 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3788:	ae 80       	ldd	r10, Y+6	; 0x06
    378a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    378c:	d5 01       	movw	r26, r10
    378e:	1c 96       	adiw	r26, 0x0c	; 12
    3790:	8d 91       	ld	r24, X+
    3792:	9c 91       	ld	r25, X
    3794:	1d 97       	sbiw	r26, 0x0d	; 13
    3796:	89 2b       	or	r24, r25
    3798:	21 f0       	breq	.+8      	; 0x37a2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    379a:	c5 01       	movw	r24, r10
    379c:	02 96       	adiw	r24, 0x02	; 2
    379e:	0e 94 8b 06 	call	0xd16	; 0xd16 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37a2:	ce 01       	movw	r24, r28
    37a4:	08 96       	adiw	r24, 0x08	; 8
    37a6:	fe de       	rcall	.-516    	; 0x35a4 <prvSampleTimeNow>
    37a8:	8b 01       	movw	r16, r22
    37aa:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    37ac:	e9 81       	ldd	r30, Y+1	; 0x01
    37ae:	0e 2e       	mov	r0, r30
    37b0:	00 0c       	add	r0, r0
    37b2:	ff 0b       	sbc	r31, r31
    37b4:	ea 30       	cpi	r30, 0x0A	; 10
    37b6:	f1 05       	cpc	r31, r1
    37b8:	08 f0       	brcs	.+2      	; 0x37bc <prvProcessReceivedCommands+0x62>
    37ba:	64 c0       	rjmp	.+200    	; 0x3884 <prvProcessReceivedCommands+0x12a>
    37bc:	88 27       	eor	r24, r24
    37be:	ee 58       	subi	r30, 0x8E	; 142
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	8f 4f       	sbci	r24, 0xFF	; 255
    37c4:	0c 94 38 2d 	jmp	0x5a70	; 0x5a70 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    37c8:	f5 01       	movw	r30, r10
    37ca:	86 89       	ldd	r24, Z+22	; 0x16
    37cc:	81 60       	ori	r24, 0x01	; 1
    37ce:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    37d0:	ca 80       	ldd	r12, Y+2	; 0x02
    37d2:	db 80       	ldd	r13, Y+3	; 0x03
    37d4:	ec 80       	ldd	r14, Y+4	; 0x04
    37d6:	fd 80       	ldd	r15, Y+5	; 0x05
    37d8:	46 85       	ldd	r20, Z+14	; 0x0e
    37da:	57 85       	ldd	r21, Z+15	; 0x0f
    37dc:	60 89       	ldd	r22, Z+16	; 0x10
    37de:	71 89       	ldd	r23, Z+17	; 0x11
    37e0:	4c 0d       	add	r20, r12
    37e2:	5d 1d       	adc	r21, r13
    37e4:	6e 1d       	adc	r22, r14
    37e6:	7f 1d       	adc	r23, r15
    37e8:	c5 01       	movw	r24, r10
    37ea:	83 dd       	rcall	.-1274   	; 0x32f2 <prvInsertTimerInActiveList>
    37ec:	88 23       	and	r24, r24
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <prvProcessReceivedCommands+0x98>
    37f0:	49 c0       	rjmp	.+146    	; 0x3884 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37f2:	d5 01       	movw	r26, r10
    37f4:	54 96       	adiw	r26, 0x14	; 20
    37f6:	ed 91       	ld	r30, X+
    37f8:	fc 91       	ld	r31, X
    37fa:	55 97       	sbiw	r26, 0x15	; 21
    37fc:	c5 01       	movw	r24, r10
    37fe:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3800:	f5 01       	movw	r30, r10
    3802:	86 89       	ldd	r24, Z+22	; 0x16
    3804:	82 ff       	sbrs	r24, 2
    3806:	3e c0       	rjmp	.+124    	; 0x3884 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3808:	4a 81       	ldd	r20, Y+2	; 0x02
    380a:	5b 81       	ldd	r21, Y+3	; 0x03
    380c:	6c 81       	ldd	r22, Y+4	; 0x04
    380e:	7d 81       	ldd	r23, Y+5	; 0x05
    3810:	86 85       	ldd	r24, Z+14	; 0x0e
    3812:	97 85       	ldd	r25, Z+15	; 0x0f
    3814:	a0 89       	ldd	r26, Z+16	; 0x10
    3816:	b1 89       	ldd	r27, Z+17	; 0x11
    3818:	9a 01       	movw	r18, r20
    381a:	ab 01       	movw	r20, r22
    381c:	28 0f       	add	r18, r24
    381e:	39 1f       	adc	r19, r25
    3820:	4a 1f       	adc	r20, r26
    3822:	5b 1f       	adc	r21, r27
    3824:	c1 2c       	mov	r12, r1
    3826:	d1 2c       	mov	r13, r1
    3828:	76 01       	movw	r14, r12
    382a:	00 e0       	ldi	r16, 0x00	; 0
    382c:	10 e0       	ldi	r17, 0x00	; 0
    382e:	60 e0       	ldi	r22, 0x00	; 0
    3830:	c5 01       	movw	r24, r10
    3832:	f2 dd       	rcall	.-1052   	; 0x3418 <xTimerGenericCommand>
    3834:	27 c0       	rjmp	.+78     	; 0x3884 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3836:	d5 01       	movw	r26, r10
    3838:	56 96       	adiw	r26, 0x16	; 22
    383a:	8c 91       	ld	r24, X
    383c:	56 97       	sbiw	r26, 0x16	; 22
    383e:	8e 7f       	andi	r24, 0xFE	; 254
    3840:	56 96       	adiw	r26, 0x16	; 22
    3842:	8c 93       	st	X, r24
                        break;
    3844:	1f c0       	rjmp	.+62     	; 0x3884 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3846:	f5 01       	movw	r30, r10
    3848:	86 89       	ldd	r24, Z+22	; 0x16
    384a:	81 60       	ori	r24, 0x01	; 1
    384c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    384e:	4a 81       	ldd	r20, Y+2	; 0x02
    3850:	5b 81       	ldd	r21, Y+3	; 0x03
    3852:	6c 81       	ldd	r22, Y+4	; 0x04
    3854:	7d 81       	ldd	r23, Y+5	; 0x05
    3856:	46 87       	std	Z+14, r20	; 0x0e
    3858:	57 87       	std	Z+15, r21	; 0x0f
    385a:	60 8b       	std	Z+16, r22	; 0x10
    385c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    385e:	40 0f       	add	r20, r16
    3860:	51 1f       	adc	r21, r17
    3862:	62 1f       	adc	r22, r18
    3864:	73 1f       	adc	r23, r19
    3866:	68 01       	movw	r12, r16
    3868:	79 01       	movw	r14, r18
    386a:	c5 01       	movw	r24, r10
    386c:	42 dd       	rcall	.-1404   	; 0x32f2 <prvInsertTimerInActiveList>
                        break;
    386e:	0a c0       	rjmp	.+20     	; 0x3884 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3870:	f5 01       	movw	r30, r10
    3872:	86 89       	ldd	r24, Z+22	; 0x16
    3874:	81 fd       	sbrc	r24, 1
    3876:	04 c0       	rjmp	.+8      	; 0x3880 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3878:	c5 01       	movw	r24, r10
    387a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vPortFree>
    387e:	02 c0       	rjmp	.+4      	; 0x3884 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3880:	8e 7f       	andi	r24, 0xFE	; 254
    3882:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	a9 01       	movw	r20, r18
    388a:	be 01       	movw	r22, r28
    388c:	6f 5f       	subi	r22, 0xFF	; 255
    388e:	7f 4f       	sbci	r23, 0xFF	; 255
    3890:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    3894:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    3898:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <xQueueReceive>
    389c:	81 11       	cpse	r24, r1
    389e:	70 cf       	rjmp	.-288    	; 0x3780 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    38a0:	28 96       	adiw	r28, 0x08	; 8
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	cd bf       	out	0x3d, r28	; 61
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	ff 90       	pop	r15
    38b6:	ef 90       	pop	r14
    38b8:	df 90       	pop	r13
    38ba:	cf 90       	pop	r12
    38bc:	bf 90       	pop	r11
    38be:	af 90       	pop	r10
    38c0:	08 95       	ret

000038c2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    38c2:	08 95       	ret

000038c4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    38c4:	84 b1       	in	r24, 0x04	; 4
    38c6:	80 68       	ori	r24, 0x80	; 128
    38c8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    38ca:	85 b1       	in	r24, 0x05	; 5
    38cc:	80 68       	ori	r24, 0x80	; 128
    38ce:	85 b9       	out	0x05, r24	; 5
    38d0:	08 95       	ret

000038d2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    38d2:	83 b1       	in	r24, 0x03	; 3
    38d4:	80 68       	ori	r24, 0x80	; 128
    38d6:	83 b9       	out	0x03, r24	; 3
    38d8:	08 95       	ret

000038da <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    38da:	f4 df       	rcall	.-24     	; 0x38c4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    38dc:	2f ef       	ldi	r18, 0xFF	; 255
    38de:	80 e7       	ldi	r24, 0x70	; 112
    38e0:	92 e0       	ldi	r25, 0x02	; 2
    38e2:	21 50       	subi	r18, 0x01	; 1
    38e4:	80 40       	sbci	r24, 0x00	; 0
    38e6:	90 40       	sbci	r25, 0x00	; 0
    38e8:	e1 f7       	brne	.-8      	; 0x38e2 <vApplicationMallocFailedHook+0x8>
    38ea:	00 c0       	rjmp	.+0      	; 0x38ec <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    38ec:	00 00       	nop
    38ee:	f1 df       	rcall	.-30     	; 0x38d2 <prvBlinkMainLed>
    38f0:	f5 cf       	rjmp	.-22     	; 0x38dc <vApplicationMallocFailedHook+0x2>

000038f2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    38f2:	e8 df       	rcall	.-48     	; 0x38c4 <prvSetMainLedOn>
    38f4:	2f ef       	ldi	r18, 0xFF	; 255
    38f6:	87 ea       	ldi	r24, 0xA7	; 167
    38f8:	91 e6       	ldi	r25, 0x61	; 97
    38fa:	21 50       	subi	r18, 0x01	; 1
    38fc:	80 40       	sbci	r24, 0x00	; 0
    38fe:	90 40       	sbci	r25, 0x00	; 0
    3900:	e1 f7       	brne	.-8      	; 0x38fa <vApplicationStackOverflowHook+0x8>
    3902:	00 c0       	rjmp	.+0      	; 0x3904 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3904:	00 00       	nop
    3906:	e5 df       	rcall	.-54     	; 0x38d2 <prvBlinkMainLed>
    3908:	f5 cf       	rjmp	.-22     	; 0x38f4 <vApplicationStackOverflowHook+0x2>

0000390a <createTasksForSensors>:
	createTasksForSensors();
	lora_handler_initialize(4, temperature_sensor);
}

void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    390a:	60 91 81 11 	lds	r22, 0x1181	; 0x801181 <taskReadyBits>
    390e:	70 91 82 11 	lds	r23, 0x1182	; 0x801182 <taskReadyBits+0x1>
    3912:	21 e0       	ldi	r18, 0x01	; 1
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e0       	ldi	r20, 0x00	; 0
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	83 e0       	ldi	r24, 0x03	; 3
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	0e 94 10 02 	call	0x420	; 0x420 <createTemp>
    3922:	90 93 98 12 	sts	0x1298, r25	; 0x801298 <temperature_sensor+0x1>
    3926:	80 93 97 12 	sts	0x1297, r24	; 0x801297 <temperature_sensor>
    392a:	08 95       	ret

0000392c <create_tasks_and_semaphores>:
#define BIT_TEMP_READY (1 << 0)



void create_tasks_and_semaphores(void)
{
    392c:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    392e:	80 91 99 12 	lds	r24, 0x1299	; 0x801299 <xTestSemaphore>
    3932:	90 91 9a 12 	lds	r25, 0x129A	; 0x80129a <xTestSemaphore+0x1>
    3936:	89 2b       	or	r24, r25
    3938:	89 f4       	brne	.+34     	; 0x395c <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	0e 94 b3 09 	call	0x1366	; 0x1366 <xQueueCreateMutex>
    3940:	90 93 9a 12 	sts	0x129A, r25	; 0x80129a <xTestSemaphore+0x1>
    3944:	80 93 99 12 	sts	0x1299, r24	; 0x801299 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3948:	00 97       	sbiw	r24, 0x00	; 0
    394a:	41 f0       	breq	.+16     	; 0x395c <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    394c:	00 e0       	ldi	r16, 0x00	; 0
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	a9 01       	movw	r20, r18
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	0e 94 0f 09 	call	0x121e	; 0x121e <xQueueGenericSend>
		}
	}
	
	
	createTasksForSensors();
    395c:	d6 df       	rcall	.-84     	; 0x390a <createTasksForSensors>
	lora_handler_initialize(4, temperature_sensor);
    395e:	60 91 97 12 	lds	r22, 0x1297	; 0x801297 <temperature_sensor>
    3962:	70 91 98 12 	lds	r23, 0x1298	; 0x801298 <temperature_sensor+0x1>
    3966:	84 e0       	ldi	r24, 0x04	; 4
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <lora_handler_initialize>
}
    396e:	0f 91       	pop	r16
    3970:	08 95       	ret

00003972 <initializeSystem>:
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    3972:	0e 94 9f 03 	call	0x73e	; 0x73e <xEventGroupCreate>
    3976:	90 93 82 11 	sts	0x1182, r25	; 0x801182 <taskReadyBits+0x1>
    397a:	80 93 81 11 	sts	0x1181, r24	; 0x801181 <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	0e 94 90 26 	call	0x4d20	; 0x4d20 <stdio_initialise>
	// Method for tasks and semaphore
	lora_driver_initialise(ser_USART1, NULL);
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	c4 d2       	rcall	.+1416   	; 0x3f14 <lora_driver_initialise>
	create_tasks_and_semaphores();
    398c:	cf cf       	rjmp	.-98     	; 0x392c <create_tasks_and_semaphores>
    398e:	08 95       	ret

00003990 <main>:
    3990:	f0 df       	rcall	.-32     	; 0x3972 <initializeSystem>
}

int main(void){
	initializeSystem();
	vTaskStartScheduler();
    3992:	0e 94 39 10 	call	0x2072	; 0x2072 <vTaskStartScheduler>
    3996:	ff cf       	rjmp	.-2      	; 0x3996 <main+0x6>

00003998 <__fixsfsi>:
    3998:	04 d0       	rcall	.+8      	; 0x39a2 <__fixunssfsi>
    399a:	68 94       	set
    399c:	b1 11       	cpse	r27, r1
    399e:	50 c0       	rjmp	.+160    	; 0x3a40 <__fp_szero>
    39a0:	08 95       	ret

000039a2 <__fixunssfsi>:
    39a2:	33 d0       	rcall	.+102    	; 0x3a0a <__fp_splitA>
    39a4:	88 f0       	brcs	.+34     	; 0x39c8 <__fixunssfsi+0x26>
    39a6:	9f 57       	subi	r25, 0x7F	; 127
    39a8:	90 f0       	brcs	.+36     	; 0x39ce <__fixunssfsi+0x2c>
    39aa:	b9 2f       	mov	r27, r25
    39ac:	99 27       	eor	r25, r25
    39ae:	b7 51       	subi	r27, 0x17	; 23
    39b0:	a0 f0       	brcs	.+40     	; 0x39da <__fixunssfsi+0x38>
    39b2:	d1 f0       	breq	.+52     	; 0x39e8 <__fixunssfsi+0x46>
    39b4:	66 0f       	add	r22, r22
    39b6:	77 1f       	adc	r23, r23
    39b8:	88 1f       	adc	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	1a f0       	brmi	.+6      	; 0x39c4 <__fixunssfsi+0x22>
    39be:	ba 95       	dec	r27
    39c0:	c9 f7       	brne	.-14     	; 0x39b4 <__fixunssfsi+0x12>
    39c2:	12 c0       	rjmp	.+36     	; 0x39e8 <__fixunssfsi+0x46>
    39c4:	b1 30       	cpi	r27, 0x01	; 1
    39c6:	81 f0       	breq	.+32     	; 0x39e8 <__fixunssfsi+0x46>
    39c8:	3a d0       	rcall	.+116    	; 0x3a3e <__fp_zero>
    39ca:	b1 e0       	ldi	r27, 0x01	; 1
    39cc:	08 95       	ret
    39ce:	37 c0       	rjmp	.+110    	; 0x3a3e <__fp_zero>
    39d0:	67 2f       	mov	r22, r23
    39d2:	78 2f       	mov	r23, r24
    39d4:	88 27       	eor	r24, r24
    39d6:	b8 5f       	subi	r27, 0xF8	; 248
    39d8:	39 f0       	breq	.+14     	; 0x39e8 <__fixunssfsi+0x46>
    39da:	b9 3f       	cpi	r27, 0xF9	; 249
    39dc:	cc f3       	brlt	.-14     	; 0x39d0 <__fixunssfsi+0x2e>
    39de:	86 95       	lsr	r24
    39e0:	77 95       	ror	r23
    39e2:	67 95       	ror	r22
    39e4:	b3 95       	inc	r27
    39e6:	d9 f7       	brne	.-10     	; 0x39de <__fixunssfsi+0x3c>
    39e8:	3e f4       	brtc	.+14     	; 0x39f8 <__fixunssfsi+0x56>
    39ea:	90 95       	com	r25
    39ec:	80 95       	com	r24
    39ee:	70 95       	com	r23
    39f0:	61 95       	neg	r22
    39f2:	7f 4f       	sbci	r23, 0xFF	; 255
    39f4:	8f 4f       	sbci	r24, 0xFF	; 255
    39f6:	9f 4f       	sbci	r25, 0xFF	; 255
    39f8:	08 95       	ret

000039fa <__fp_split3>:
    39fa:	57 fd       	sbrc	r21, 7
    39fc:	90 58       	subi	r25, 0x80	; 128
    39fe:	44 0f       	add	r20, r20
    3a00:	55 1f       	adc	r21, r21
    3a02:	59 f0       	breq	.+22     	; 0x3a1a <__fp_splitA+0x10>
    3a04:	5f 3f       	cpi	r21, 0xFF	; 255
    3a06:	71 f0       	breq	.+28     	; 0x3a24 <__fp_splitA+0x1a>
    3a08:	47 95       	ror	r20

00003a0a <__fp_splitA>:
    3a0a:	88 0f       	add	r24, r24
    3a0c:	97 fb       	bst	r25, 7
    3a0e:	99 1f       	adc	r25, r25
    3a10:	61 f0       	breq	.+24     	; 0x3a2a <__fp_splitA+0x20>
    3a12:	9f 3f       	cpi	r25, 0xFF	; 255
    3a14:	79 f0       	breq	.+30     	; 0x3a34 <__fp_splitA+0x2a>
    3a16:	87 95       	ror	r24
    3a18:	08 95       	ret
    3a1a:	12 16       	cp	r1, r18
    3a1c:	13 06       	cpc	r1, r19
    3a1e:	14 06       	cpc	r1, r20
    3a20:	55 1f       	adc	r21, r21
    3a22:	f2 cf       	rjmp	.-28     	; 0x3a08 <__fp_split3+0xe>
    3a24:	46 95       	lsr	r20
    3a26:	f1 df       	rcall	.-30     	; 0x3a0a <__fp_splitA>
    3a28:	08 c0       	rjmp	.+16     	; 0x3a3a <__fp_splitA+0x30>
    3a2a:	16 16       	cp	r1, r22
    3a2c:	17 06       	cpc	r1, r23
    3a2e:	18 06       	cpc	r1, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	f1 cf       	rjmp	.-30     	; 0x3a16 <__fp_splitA+0xc>
    3a34:	86 95       	lsr	r24
    3a36:	71 05       	cpc	r23, r1
    3a38:	61 05       	cpc	r22, r1
    3a3a:	08 94       	sec
    3a3c:	08 95       	ret

00003a3e <__fp_zero>:
    3a3e:	e8 94       	clt

00003a40 <__fp_szero>:
    3a40:	bb 27       	eor	r27, r27
    3a42:	66 27       	eor	r22, r22
    3a44:	77 27       	eor	r23, r23
    3a46:	cb 01       	movw	r24, r22
    3a48:	97 f9       	bld	r25, 7
    3a4a:	08 95       	ret

00003a4c <modf>:
    3a4c:	fa 01       	movw	r30, r20
    3a4e:	dc 01       	movw	r26, r24
    3a50:	aa 0f       	add	r26, r26
    3a52:	bb 1f       	adc	r27, r27
    3a54:	9b 01       	movw	r18, r22
    3a56:	ac 01       	movw	r20, r24
    3a58:	bf 57       	subi	r27, 0x7F	; 127
    3a5a:	28 f4       	brcc	.+10     	; 0x3a66 <modf+0x1a>
    3a5c:	22 27       	eor	r18, r18
    3a5e:	33 27       	eor	r19, r19
    3a60:	44 27       	eor	r20, r20
    3a62:	50 78       	andi	r21, 0x80	; 128
    3a64:	1f c0       	rjmp	.+62     	; 0x3aa4 <modf+0x58>
    3a66:	b7 51       	subi	r27, 0x17	; 23
    3a68:	88 f4       	brcc	.+34     	; 0x3a8c <modf+0x40>
    3a6a:	ab 2f       	mov	r26, r27
    3a6c:	00 24       	eor	r0, r0
    3a6e:	46 95       	lsr	r20
    3a70:	37 95       	ror	r19
    3a72:	27 95       	ror	r18
    3a74:	01 1c       	adc	r0, r1
    3a76:	a3 95       	inc	r26
    3a78:	d2 f3       	brmi	.-12     	; 0x3a6e <modf+0x22>
    3a7a:	00 20       	and	r0, r0
    3a7c:	69 f0       	breq	.+26     	; 0x3a98 <modf+0x4c>
    3a7e:	22 0f       	add	r18, r18
    3a80:	33 1f       	adc	r19, r19
    3a82:	44 1f       	adc	r20, r20
    3a84:	b3 95       	inc	r27
    3a86:	da f3       	brmi	.-10     	; 0x3a7e <modf+0x32>
    3a88:	0d d0       	rcall	.+26     	; 0x3aa4 <modf+0x58>
    3a8a:	13 c0       	rjmp	.+38     	; 0x3ab2 <__subsf3>
    3a8c:	61 30       	cpi	r22, 0x01	; 1
    3a8e:	71 05       	cpc	r23, r1
    3a90:	a0 e8       	ldi	r26, 0x80	; 128
    3a92:	8a 07       	cpc	r24, r26
    3a94:	b9 46       	sbci	r27, 0x69	; 105
    3a96:	30 f4       	brcc	.+12     	; 0x3aa4 <modf+0x58>
    3a98:	9b 01       	movw	r18, r22
    3a9a:	ac 01       	movw	r20, r24
    3a9c:	66 27       	eor	r22, r22
    3a9e:	77 27       	eor	r23, r23
    3aa0:	88 27       	eor	r24, r24
    3aa2:	90 78       	andi	r25, 0x80	; 128
    3aa4:	30 96       	adiw	r30, 0x00	; 0
    3aa6:	21 f0       	breq	.+8      	; 0x3ab0 <modf+0x64>
    3aa8:	20 83       	st	Z, r18
    3aaa:	31 83       	std	Z+1, r19	; 0x01
    3aac:	42 83       	std	Z+2, r20	; 0x02
    3aae:	53 83       	std	Z+3, r21	; 0x03
    3ab0:	08 95       	ret

00003ab2 <__subsf3>:
    3ab2:	50 58       	subi	r21, 0x80	; 128

00003ab4 <__addsf3>:
    3ab4:	bb 27       	eor	r27, r27
    3ab6:	aa 27       	eor	r26, r26
    3ab8:	0e d0       	rcall	.+28     	; 0x3ad6 <__addsf3x>
    3aba:	77 c0       	rjmp	.+238    	; 0x3baa <__fp_round>
    3abc:	68 d0       	rcall	.+208    	; 0x3b8e <__fp_pscA>
    3abe:	30 f0       	brcs	.+12     	; 0x3acc <__addsf3+0x18>
    3ac0:	6d d0       	rcall	.+218    	; 0x3b9c <__fp_pscB>
    3ac2:	20 f0       	brcs	.+8      	; 0x3acc <__addsf3+0x18>
    3ac4:	31 f4       	brne	.+12     	; 0x3ad2 <__addsf3+0x1e>
    3ac6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ac8:	11 f4       	brne	.+4      	; 0x3ace <__addsf3+0x1a>
    3aca:	1e f4       	brtc	.+6      	; 0x3ad2 <__addsf3+0x1e>
    3acc:	5d c0       	rjmp	.+186    	; 0x3b88 <__fp_nan>
    3ace:	0e f4       	brtc	.+2      	; 0x3ad2 <__addsf3+0x1e>
    3ad0:	e0 95       	com	r30
    3ad2:	e7 fb       	bst	r30, 7
    3ad4:	53 c0       	rjmp	.+166    	; 0x3b7c <__fp_inf>

00003ad6 <__addsf3x>:
    3ad6:	e9 2f       	mov	r30, r25
    3ad8:	90 df       	rcall	.-224    	; 0x39fa <__fp_split3>
    3ada:	80 f3       	brcs	.-32     	; 0x3abc <__addsf3+0x8>
    3adc:	ba 17       	cp	r27, r26
    3ade:	62 07       	cpc	r22, r18
    3ae0:	73 07       	cpc	r23, r19
    3ae2:	84 07       	cpc	r24, r20
    3ae4:	95 07       	cpc	r25, r21
    3ae6:	18 f0       	brcs	.+6      	; 0x3aee <__addsf3x+0x18>
    3ae8:	71 f4       	brne	.+28     	; 0x3b06 <__addsf3x+0x30>
    3aea:	9e f5       	brtc	.+102    	; 0x3b52 <__addsf3x+0x7c>
    3aec:	a8 cf       	rjmp	.-176    	; 0x3a3e <__fp_zero>
    3aee:	0e f4       	brtc	.+2      	; 0x3af2 <__addsf3x+0x1c>
    3af0:	e0 95       	com	r30
    3af2:	0b 2e       	mov	r0, r27
    3af4:	ba 2f       	mov	r27, r26
    3af6:	a0 2d       	mov	r26, r0
    3af8:	0b 01       	movw	r0, r22
    3afa:	b9 01       	movw	r22, r18
    3afc:	90 01       	movw	r18, r0
    3afe:	0c 01       	movw	r0, r24
    3b00:	ca 01       	movw	r24, r20
    3b02:	a0 01       	movw	r20, r0
    3b04:	11 24       	eor	r1, r1
    3b06:	ff 27       	eor	r31, r31
    3b08:	59 1b       	sub	r21, r25
    3b0a:	99 f0       	breq	.+38     	; 0x3b32 <__addsf3x+0x5c>
    3b0c:	59 3f       	cpi	r21, 0xF9	; 249
    3b0e:	50 f4       	brcc	.+20     	; 0x3b24 <__addsf3x+0x4e>
    3b10:	50 3e       	cpi	r21, 0xE0	; 224
    3b12:	68 f1       	brcs	.+90     	; 0x3b6e <__addsf3x+0x98>
    3b14:	1a 16       	cp	r1, r26
    3b16:	f0 40       	sbci	r31, 0x00	; 0
    3b18:	a2 2f       	mov	r26, r18
    3b1a:	23 2f       	mov	r18, r19
    3b1c:	34 2f       	mov	r19, r20
    3b1e:	44 27       	eor	r20, r20
    3b20:	58 5f       	subi	r21, 0xF8	; 248
    3b22:	f3 cf       	rjmp	.-26     	; 0x3b0a <__addsf3x+0x34>
    3b24:	46 95       	lsr	r20
    3b26:	37 95       	ror	r19
    3b28:	27 95       	ror	r18
    3b2a:	a7 95       	ror	r26
    3b2c:	f0 40       	sbci	r31, 0x00	; 0
    3b2e:	53 95       	inc	r21
    3b30:	c9 f7       	brne	.-14     	; 0x3b24 <__addsf3x+0x4e>
    3b32:	7e f4       	brtc	.+30     	; 0x3b52 <__addsf3x+0x7c>
    3b34:	1f 16       	cp	r1, r31
    3b36:	ba 0b       	sbc	r27, r26
    3b38:	62 0b       	sbc	r22, r18
    3b3a:	73 0b       	sbc	r23, r19
    3b3c:	84 0b       	sbc	r24, r20
    3b3e:	ba f0       	brmi	.+46     	; 0x3b6e <__addsf3x+0x98>
    3b40:	91 50       	subi	r25, 0x01	; 1
    3b42:	a1 f0       	breq	.+40     	; 0x3b6c <__addsf3x+0x96>
    3b44:	ff 0f       	add	r31, r31
    3b46:	bb 1f       	adc	r27, r27
    3b48:	66 1f       	adc	r22, r22
    3b4a:	77 1f       	adc	r23, r23
    3b4c:	88 1f       	adc	r24, r24
    3b4e:	c2 f7       	brpl	.-16     	; 0x3b40 <__addsf3x+0x6a>
    3b50:	0e c0       	rjmp	.+28     	; 0x3b6e <__addsf3x+0x98>
    3b52:	ba 0f       	add	r27, r26
    3b54:	62 1f       	adc	r22, r18
    3b56:	73 1f       	adc	r23, r19
    3b58:	84 1f       	adc	r24, r20
    3b5a:	48 f4       	brcc	.+18     	; 0x3b6e <__addsf3x+0x98>
    3b5c:	87 95       	ror	r24
    3b5e:	77 95       	ror	r23
    3b60:	67 95       	ror	r22
    3b62:	b7 95       	ror	r27
    3b64:	f7 95       	ror	r31
    3b66:	9e 3f       	cpi	r25, 0xFE	; 254
    3b68:	08 f0       	brcs	.+2      	; 0x3b6c <__addsf3x+0x96>
    3b6a:	b3 cf       	rjmp	.-154    	; 0x3ad2 <__addsf3+0x1e>
    3b6c:	93 95       	inc	r25
    3b6e:	88 0f       	add	r24, r24
    3b70:	08 f0       	brcs	.+2      	; 0x3b74 <__addsf3x+0x9e>
    3b72:	99 27       	eor	r25, r25
    3b74:	ee 0f       	add	r30, r30
    3b76:	97 95       	ror	r25
    3b78:	87 95       	ror	r24
    3b7a:	08 95       	ret

00003b7c <__fp_inf>:
    3b7c:	97 f9       	bld	r25, 7
    3b7e:	9f 67       	ori	r25, 0x7F	; 127
    3b80:	80 e8       	ldi	r24, 0x80	; 128
    3b82:	70 e0       	ldi	r23, 0x00	; 0
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	08 95       	ret

00003b88 <__fp_nan>:
    3b88:	9f ef       	ldi	r25, 0xFF	; 255
    3b8a:	80 ec       	ldi	r24, 0xC0	; 192
    3b8c:	08 95       	ret

00003b8e <__fp_pscA>:
    3b8e:	00 24       	eor	r0, r0
    3b90:	0a 94       	dec	r0
    3b92:	16 16       	cp	r1, r22
    3b94:	17 06       	cpc	r1, r23
    3b96:	18 06       	cpc	r1, r24
    3b98:	09 06       	cpc	r0, r25
    3b9a:	08 95       	ret

00003b9c <__fp_pscB>:
    3b9c:	00 24       	eor	r0, r0
    3b9e:	0a 94       	dec	r0
    3ba0:	12 16       	cp	r1, r18
    3ba2:	13 06       	cpc	r1, r19
    3ba4:	14 06       	cpc	r1, r20
    3ba6:	05 06       	cpc	r0, r21
    3ba8:	08 95       	ret

00003baa <__fp_round>:
    3baa:	09 2e       	mov	r0, r25
    3bac:	03 94       	inc	r0
    3bae:	00 0c       	add	r0, r0
    3bb0:	11 f4       	brne	.+4      	; 0x3bb6 <__fp_round+0xc>
    3bb2:	88 23       	and	r24, r24
    3bb4:	52 f0       	brmi	.+20     	; 0x3bca <__fp_round+0x20>
    3bb6:	bb 0f       	add	r27, r27
    3bb8:	40 f4       	brcc	.+16     	; 0x3bca <__fp_round+0x20>
    3bba:	bf 2b       	or	r27, r31
    3bbc:	11 f4       	brne	.+4      	; 0x3bc2 <__fp_round+0x18>
    3bbe:	60 ff       	sbrs	r22, 0
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <__fp_round+0x20>
    3bc2:	6f 5f       	subi	r22, 0xFF	; 255
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bca:	08 95       	ret

00003bcc <_hihTwiCallback>:
    3bcc:	65 30       	cpi	r22, 0x05	; 5
    3bce:	f1 f4       	brne	.+60     	; 0x3c0c <_hihTwiCallback+0x40>
    3bd0:	fa 01       	movw	r30, r20
    3bd2:	80 81       	ld	r24, Z
    3bd4:	8f 73       	andi	r24, 0x3F	; 63
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	98 2f       	mov	r25, r24
    3bda:	88 27       	eor	r24, r24
    3bdc:	21 81       	ldd	r18, Z+1	; 0x01
    3bde:	82 2b       	or	r24, r18
    3be0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3be4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	f0 e4       	ldi	r31, 0x40	; 64
    3bec:	8f 9f       	mul	r24, r31
    3bee:	c0 01       	movw	r24, r0
    3bf0:	11 24       	eor	r1, r1
    3bf2:	fa 01       	movw	r30, r20
    3bf4:	23 81       	ldd	r18, Z+3	; 0x03
    3bf6:	26 95       	lsr	r18
    3bf8:	26 95       	lsr	r18
    3bfa:	82 2b       	or	r24, r18
    3bfc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3c00:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	80 93 83 11 	sts	0x1183, r24	; 0x801183 <_measuringIsReady>
    3c0a:	08 95       	ret
    3c0c:	64 30       	cpi	r22, 0x04	; 4
    3c0e:	51 f0       	breq	.+20     	; 0x3c24 <_hihTwiCallback+0x58>
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e4       	ldi	r25, 0x40	; 64
    3c14:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3c18:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3c1c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3c20:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3c24:	08 95       	ret

00003c26 <hih8120_initialise>:
    3c26:	0f 93       	push	r16
    3c28:	1f 93       	push	r17
    3c2a:	06 ee       	ldi	r16, 0xE6	; 230
    3c2c:	1d e1       	ldi	r17, 0x1D	; 29
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	34 e2       	ldi	r19, 0x24	; 36
    3c32:	44 ef       	ldi	r20, 0xF4	; 244
    3c34:	50 e0       	ldi	r21, 0x00	; 0
    3c36:	60 e0       	ldi	r22, 0x00	; 0
    3c38:	87 e2       	ldi	r24, 0x27	; 39
    3c3a:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <twiCreate>
    3c3e:	90 93 85 11 	sts	0x1185, r25	; 0x801185 <_hih8120Handler+0x1>
    3c42:	80 93 84 11 	sts	0x1184, r24	; 0x801184 <_hih8120Handler>
    3c46:	21 e0       	ldi	r18, 0x01	; 1
    3c48:	89 2b       	or	r24, r25
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <hih8120_initialise+0x28>
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	82 2f       	mov	r24, r18
    3c50:	1f 91       	pop	r17
    3c52:	0f 91       	pop	r16
    3c54:	08 95       	ret

00003c56 <hih8120_wakeup>:
    3c56:	80 91 84 11 	lds	r24, 0x1184	; 0x801184 <_hih8120Handler>
    3c5a:	90 91 85 11 	lds	r25, 0x1185	; 0x801185 <_hih8120Handler+0x1>
    3c5e:	00 97       	sbiw	r24, 0x00	; 0
    3c60:	59 f0       	breq	.+22     	; 0x3c78 <hih8120_wakeup+0x22>
    3c62:	40 e0       	ldi	r20, 0x00	; 0
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	70 e0       	ldi	r23, 0x00	; 0
    3c68:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <twiTransmit>
    3c6c:	84 30       	cpi	r24, 0x04	; 4
    3c6e:	31 f4       	brne	.+12     	; 0x3c7c <hih8120_wakeup+0x26>
    3c70:	10 92 83 11 	sts	0x1183, r1	; 0x801183 <_measuringIsReady>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	08 95       	ret
    3c78:	82 e0       	ldi	r24, 0x02	; 2
    3c7a:	08 95       	ret
    3c7c:	83 e0       	ldi	r24, 0x03	; 3
    3c7e:	08 95       	ret

00003c80 <hih8120_measure>:
    3c80:	80 91 84 11 	lds	r24, 0x1184	; 0x801184 <_hih8120Handler>
    3c84:	90 91 85 11 	lds	r25, 0x1185	; 0x801185 <_hih8120Handler+0x1>
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	39 f0       	breq	.+14     	; 0x3c9a <hih8120_measure+0x1a>
    3c8c:	64 e0       	ldi	r22, 0x04	; 4
    3c8e:	0e 94 67 27 	call	0x4ece	; 0x4ece <twiReceive>
    3c92:	85 30       	cpi	r24, 0x05	; 5
    3c94:	21 f0       	breq	.+8      	; 0x3c9e <hih8120_measure+0x1e>
    3c96:	83 e0       	ldi	r24, 0x03	; 3
    3c98:	08 95       	ret
    3c9a:	82 e0       	ldi	r24, 0x02	; 2
    3c9c:	08 95       	ret
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	08 95       	ret

00003ca2 <hih8120_getTemperature>:
    3ca2:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3ca6:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	0e 94 6d 2c 	call	0x58da	; 0x58da <__floatunsisf>
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	45 e2       	ldi	r20, 0x25	; 37
    3cb8:	53 e4       	ldi	r21, 0x43	; 67
    3cba:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__mulsf3>
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	38 ef       	ldi	r19, 0xF8	; 248
    3cc2:	4f e7       	ldi	r20, 0x7F	; 127
    3cc4:	56 e4       	ldi	r21, 0x46	; 70
    3cc6:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <__divsf3>
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	40 e2       	ldi	r20, 0x20	; 32
    3cd0:	52 e4       	ldi	r21, 0x42	; 66
    3cd2:	ef ce       	rjmp	.-546    	; 0x3ab2 <__subsf3>
    3cd4:	08 95       	ret

00003cd6 <_serialCallBack>:
    3cd6:	0f 93       	push	r16
    3cd8:	1f 93       	push	r17
    3cda:	cf 93       	push	r28
    3cdc:	df 93       	push	r29
    3cde:	1f 92       	push	r1
    3ce0:	1f 92       	push	r1
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	8c 01       	movw	r16, r24
    3ce8:	19 82       	std	Y+1, r1	; 0x01
    3cea:	2d c0       	rjmp	.+90     	; 0x3d46 <_serialCallBack+0x70>
    3cec:	e0 91 bd 11 	lds	r30, 0x11BD	; 0x8011bd <rec_buf_inp.2878>
    3cf0:	ec 32       	cpi	r30, 0x2C	; 44
    3cf2:	50 f4       	brcc	.+20     	; 0x3d08 <_serialCallBack+0x32>
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	8e 0f       	add	r24, r30
    3cf8:	80 93 bd 11 	sts	0x11BD, r24	; 0x8011bd <rec_buf_inp.2878>
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	e1 51       	subi	r30, 0x11	; 17
    3d00:	fe 4e       	sbci	r31, 0xEE	; 238
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	80 83       	st	Z, r24
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <_serialCallBack+0x36>
    3d08:	10 92 bd 11 	sts	0x11BD, r1	; 0x8011bd <rec_buf_inp.2878>
    3d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0e:	8a 30       	cpi	r24, 0x0A	; 10
    3d10:	d1 f4       	brne	.+52     	; 0x3d46 <_serialCallBack+0x70>
    3d12:	40 91 bd 11 	lds	r20, 0x11BD	; 0x8011bd <rec_buf_inp.2878>
    3d16:	50 e0       	ldi	r21, 0x00	; 0
    3d18:	fa 01       	movw	r30, r20
    3d1a:	e3 51       	subi	r30, 0x13	; 19
    3d1c:	fe 4e       	sbci	r31, 0xEE	; 238
    3d1e:	10 82       	st	Z, r1
    3d20:	41 50       	subi	r20, 0x01	; 1
    3d22:	51 09       	sbc	r21, r1
    3d24:	9e 01       	movw	r18, r28
    3d26:	2f 5f       	subi	r18, 0xFF	; 255
    3d28:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2a:	6f ee       	ldi	r22, 0xEF	; 239
    3d2c:	71 e1       	ldi	r23, 0x11	; 17
    3d2e:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_serialReplyBufferHandle>
    3d32:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_serialReplyBufferHandle+0x1>
    3d36:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xStreamBufferSendFromISR>
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	81 11       	cpse	r24, r1
    3d3e:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    3d42:	10 92 bd 11 	sts	0x11BD, r1	; 0x8011bd <rec_buf_inp.2878>
    3d46:	be 01       	movw	r22, r28
    3d48:	6e 5f       	subi	r22, 0xFE	; 254
    3d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d4c:	c8 01       	movw	r24, r16
    3d4e:	52 d5       	rcall	.+2724   	; 0x47f4 <serial_getByte>
    3d50:	88 23       	and	r24, r24
    3d52:	61 f2       	breq	.-104    	; 0x3cec <_serialCallBack+0x16>
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	df 91       	pop	r29
    3d5a:	cf 91       	pop	r28
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	08 95       	ret

00003d62 <_uploadMessage>:
    3d62:	0f 93       	push	r16
    3d64:	1f 93       	push	r17
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	8c 01       	movw	r16, r24
    3d6c:	eb 01       	movw	r28, r22
    3d6e:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_serialReplyBufferHandle>
    3d72:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_serialReplyBufferHandle+0x1>
    3d76:	0e 94 1a 0c 	call	0x1834	; 0x1834 <xStreamBufferReset>
    3d7a:	b8 01       	movw	r22, r16
    3d7c:	86 e8       	ldi	r24, 0x86	; 134
    3d7e:	91 e1       	ldi	r25, 0x11	; 17
    3d80:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <strcpy>
    3d84:	20 97       	sbiw	r28, 0x00	; 0
    3d86:	79 f0       	breq	.+30     	; 0x3da6 <_uploadMessage+0x44>
    3d88:	e6 e8       	ldi	r30, 0x86	; 134
    3d8a:	f1 e1       	ldi	r31, 0x11	; 17
    3d8c:	01 90       	ld	r0, Z+
    3d8e:	00 20       	and	r0, r0
    3d90:	e9 f7       	brne	.-6      	; 0x3d8c <_uploadMessage+0x2a>
    3d92:	31 97       	sbiw	r30, 0x01	; 1
    3d94:	80 e2       	ldi	r24, 0x20	; 32
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	80 83       	st	Z, r24
    3d9c:	be 01       	movw	r22, r28
    3d9e:	86 e8       	ldi	r24, 0x86	; 134
    3da0:	91 e1       	ldi	r25, 0x11	; 17
    3da2:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <strcat>
    3da6:	e6 e8       	ldi	r30, 0x86	; 134
    3da8:	f1 e1       	ldi	r31, 0x11	; 17
    3daa:	df 01       	movw	r26, r30
    3dac:	0d 90       	ld	r0, X+
    3dae:	00 20       	and	r0, r0
    3db0:	e9 f7       	brne	.-6      	; 0x3dac <_uploadMessage+0x4a>
    3db2:	11 97       	sbiw	r26, 0x01	; 1
    3db4:	8d e0       	ldi	r24, 0x0D	; 13
    3db6:	9a e0       	ldi	r25, 0x0A	; 10
    3db8:	11 96       	adiw	r26, 0x01	; 1
    3dba:	9c 93       	st	X, r25
    3dbc:	8e 93       	st	-X, r24
    3dbe:	12 96       	adiw	r26, 0x02	; 2
    3dc0:	1c 92       	st	X, r1
    3dc2:	01 90       	ld	r0, Z+
    3dc4:	00 20       	and	r0, r0
    3dc6:	e9 f7       	brne	.-6      	; 0x3dc2 <_uploadMessage+0x60>
    3dc8:	31 97       	sbiw	r30, 0x01	; 1
    3dca:	e6 58       	subi	r30, 0x86	; 134
    3dcc:	f1 41       	sbci	r31, 0x11	; 17
    3dce:	ae 2f       	mov	r26, r30
    3dd0:	86 e8       	ldi	r24, 0x86	; 134
    3dd2:	91 e1       	ldi	r25, 0x11	; 17
    3dd4:	ac 01       	movw	r20, r24
    3dd6:	6a 2f       	mov	r22, r26
    3dd8:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <_rn2483_serial>
    3ddc:	90 91 c3 11 	lds	r25, 0x11C3	; 0x8011c3 <_rn2483_serial+0x1>
    3de0:	b4 d4       	rcall	.+2408   	; 0x474a <serial_sendBytes>
    3de2:	81 11       	cpse	r24, r1
    3de4:	11 c0       	rjmp	.+34     	; 0x3e08 <_uploadMessage+0xa6>
    3de6:	08 e2       	ldi	r16, 0x28	; 40
    3de8:	15 e0       	ldi	r17, 0x05	; 5
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	4d e2       	ldi	r20, 0x2D	; 45
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	69 e4       	ldi	r22, 0x49	; 73
    3df4:	72 e1       	ldi	r23, 0x12	; 18
    3df6:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_serialReplyBufferHandle>
    3dfa:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_serialReplyBufferHandle+0x1>
    3dfe:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xStreamBufferReceive>
    3e02:	89 e4       	ldi	r24, 0x49	; 73
    3e04:	92 e1       	ldi	r25, 0x12	; 18
    3e06:	02 c0       	rjmp	.+4      	; 0x3e0c <_uploadMessage+0xaa>
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	08 95       	ret

00003e16 <_reply2ReturnCode>:
    3e16:	2f 92       	push	r2
    3e18:	3f 92       	push	r3
    3e1a:	4f 92       	push	r4
    3e1c:	5f 92       	push	r5
    3e1e:	6f 92       	push	r6
    3e20:	7f 92       	push	r7
    3e22:	8f 92       	push	r8
    3e24:	9f 92       	push	r9
    3e26:	af 92       	push	r10
    3e28:	bf 92       	push	r11
    3e2a:	cf 92       	push	r12
    3e2c:	df 92       	push	r13
    3e2e:	ef 92       	push	r14
    3e30:	ff 92       	push	r15
    3e32:	0f 93       	push	r16
    3e34:	1f 93       	push	r17
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	5c 01       	movw	r10, r24
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	01 90       	ld	r0, Z+
    3e40:	00 20       	and	r0, r0
    3e42:	e9 f7       	brne	.-6      	; 0x3e3e <_reply2ReturnCode+0x28>
    3e44:	31 97       	sbiw	r30, 0x01	; 1
    3e46:	6f 01       	movw	r12, r30
    3e48:	c8 1a       	sub	r12, r24
    3e4a:	d9 0a       	sbc	r13, r25
    3e4c:	5c 2c       	mov	r5, r12
    3e4e:	0f 2e       	mov	r0, r31
    3e50:	f0 e8       	ldi	r31, 0x80	; 128
    3e52:	8f 2e       	mov	r8, r31
    3e54:	f6 e0       	ldi	r31, 0x06	; 6
    3e56:	9f 2e       	mov	r9, r31
    3e58:	f0 2d       	mov	r31, r0
    3e5a:	e1 2c       	mov	r14, r1
    3e5c:	f1 2c       	mov	r15, r1
    3e5e:	4c 2c       	mov	r4, r12
    3e60:	37 01       	movw	r6, r14
    3e62:	f4 01       	movw	r30, r8
    3e64:	01 81       	ldd	r16, Z+1	; 0x01
    3e66:	12 81       	ldd	r17, Z+2	; 0x02
    3e68:	e8 01       	movw	r28, r16
    3e6a:	09 90       	ld	r0, Y+
    3e6c:	00 20       	and	r0, r0
    3e6e:	e9 f7       	brne	.-6      	; 0x3e6a <_reply2ReturnCode+0x54>
    3e70:	21 97       	sbiw	r28, 0x01	; 1
    3e72:	c0 1b       	sub	r28, r16
    3e74:	d1 0b       	sbc	r29, r17
    3e76:	3c 2e       	mov	r3, r28
    3e78:	f9 e0       	ldi	r31, 0x09	; 9
    3e7a:	cf 16       	cp	r12, r31
    3e7c:	d1 04       	cpc	r13, r1
    3e7e:	58 f0       	brcs	.+22     	; 0x3e96 <_reply2ReturnCode+0x80>
    3e80:	f4 01       	movw	r30, r8
    3e82:	20 80       	ld	r2, Z
    3e84:	fe e0       	ldi	r31, 0x0E	; 14
    3e86:	2f 12       	cpse	r2, r31
    3e88:	06 c0       	rjmp	.+12     	; 0x3e96 <_reply2ReturnCode+0x80>
    3e8a:	b8 01       	movw	r22, r16
    3e8c:	c5 01       	movw	r24, r10
    3e8e:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <strcasestr>
    3e92:	89 2b       	or	r24, r25
    3e94:	09 f5       	brne	.+66     	; 0x3ed8 <_reply2ReturnCode+0xc2>
    3e96:	44 2d       	mov	r20, r4
    3e98:	35 14       	cp	r3, r5
    3e9a:	08 f4       	brcc	.+2      	; 0x3e9e <_reply2ReturnCode+0x88>
    3e9c:	4c 2f       	mov	r20, r28
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
    3ea0:	b8 01       	movw	r22, r16
    3ea2:	c5 01       	movw	r24, r10
    3ea4:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <strncasecmp>
    3ea8:	89 2b       	or	r24, r25
    3eaa:	49 f4       	brne	.+18     	; 0x3ebe <_reply2ReturnCode+0xa8>
    3eac:	f3 01       	movw	r30, r6
    3eae:	ee 0f       	add	r30, r30
    3eb0:	ff 1f       	adc	r31, r31
    3eb2:	e6 0d       	add	r30, r6
    3eb4:	f7 1d       	adc	r31, r7
    3eb6:	e0 58       	subi	r30, 0x80	; 128
    3eb8:	f9 4f       	sbci	r31, 0xF9	; 249
    3eba:	20 80       	ld	r2, Z
    3ebc:	0d c0       	rjmp	.+26     	; 0x3ed8 <_reply2ReturnCode+0xc2>
    3ebe:	8f ef       	ldi	r24, 0xFF	; 255
    3ec0:	e8 1a       	sub	r14, r24
    3ec2:	f8 0a       	sbc	r15, r24
    3ec4:	e3 e0       	ldi	r30, 0x03	; 3
    3ec6:	8e 0e       	add	r8, r30
    3ec8:	91 1c       	adc	r9, r1
    3eca:	f1 e1       	ldi	r31, 0x11	; 17
    3ecc:	ef 16       	cp	r14, r31
    3ece:	f1 04       	cpc	r15, r1
    3ed0:	39 f6       	brne	.-114    	; 0x3e60 <_reply2ReturnCode+0x4a>
    3ed2:	68 94       	set
    3ed4:	22 24       	eor	r2, r2
    3ed6:	24 f8       	bld	r2, 4
    3ed8:	82 2d       	mov	r24, r2
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	1f 91       	pop	r17
    3ee0:	0f 91       	pop	r16
    3ee2:	ff 90       	pop	r15
    3ee4:	ef 90       	pop	r14
    3ee6:	df 90       	pop	r13
    3ee8:	cf 90       	pop	r12
    3eea:	bf 90       	pop	r11
    3eec:	af 90       	pop	r10
    3eee:	9f 90       	pop	r9
    3ef0:	8f 90       	pop	r8
    3ef2:	7f 90       	pop	r7
    3ef4:	6f 90       	pop	r6
    3ef6:	5f 90       	pop	r5
    3ef8:	4f 90       	pop	r4
    3efa:	3f 90       	pop	r3
    3efc:	2f 90       	pop	r2
    3efe:	08 95       	ret

00003f00 <_uploadMessageRc>:
    3f00:	30 df       	rcall	.-416    	; 0x3d62 <_uploadMessage>
    3f02:	89 cf       	rjmp	.-238    	; 0x3e16 <_reply2ReturnCode>
    3f04:	08 95       	ret

00003f06 <lora_driver_flushBuffers>:
    3f06:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_serialReplyBufferHandle>
    3f0a:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_serialReplyBufferHandle+0x1>
    3f0e:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <xStreamBufferReset>
    3f12:	08 95       	ret

00003f14 <lora_driver_initialise>:
    3f14:	8f 92       	push	r8
    3f16:	9f 92       	push	r9
    3f18:	af 92       	push	r10
    3f1a:	cf 92       	push	r12
    3f1c:	ef 92       	push	r14
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	c8 2f       	mov	r28, r24
    3f26:	8b 01       	movw	r16, r22
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	70 e0       	ldi	r23, 0x00	; 0
    3f2e:	88 ec       	ldi	r24, 0xC8	; 200
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <xStreamBufferGenericCreate>
    3f36:	90 93 c1 11 	sts	0x11C1, r25	; 0x8011c1 <_serialReplyBufferHandle+0x1>
    3f3a:	80 93 c0 11 	sts	0x11C0, r24	; 0x8011c0 <_serialReplyBufferHandle>
    3f3e:	10 93 bf 11 	sts	0x11BF, r17	; 0x8011bf <_downlinkMessageBuffer+0x1>
    3f42:	00 93 be 11 	sts	0x11BE, r16	; 0x8011be <_downlinkMessageBuffer>
    3f46:	0f 2e       	mov	r0, r31
    3f48:	fb e6       	ldi	r31, 0x6B	; 107
    3f4a:	8f 2e       	mov	r8, r31
    3f4c:	fe e1       	ldi	r31, 0x1E	; 30
    3f4e:	9f 2e       	mov	r9, r31
    3f50:	f0 2d       	mov	r31, r0
    3f52:	68 94       	set
    3f54:	aa 24       	eor	r10, r10
    3f56:	a6 f8       	bld	r10, 6
    3f58:	68 94       	set
    3f5a:	cc 24       	eor	r12, r12
    3f5c:	c6 f8       	bld	r12, 6
    3f5e:	e1 2c       	mov	r14, r1
    3f60:	00 e0       	ldi	r16, 0x00	; 0
    3f62:	23 e0       	ldi	r18, 0x03	; 3
    3f64:	40 e0       	ldi	r20, 0x00	; 0
    3f66:	51 ee       	ldi	r21, 0xE1	; 225
    3f68:	60 e0       	ldi	r22, 0x00	; 0
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	8c 2f       	mov	r24, r28
    3f6e:	1e d3       	rcall	.+1596   	; 0x45ac <serial_create>
    3f70:	90 93 c3 11 	sts	0x11C3, r25	; 0x8011c3 <_rn2483_serial+0x1>
    3f74:	80 93 c2 11 	sts	0x11C2, r24	; 0x8011c2 <_rn2483_serial>
    3f78:	e7 e0       	ldi	r30, 0x07	; 7
    3f7a:	f1 e0       	ldi	r31, 0x01	; 1
    3f7c:	80 81       	ld	r24, Z
    3f7e:	80 61       	ori	r24, 0x10	; 16
    3f80:	80 83       	st	Z, r24
    3f82:	cf 91       	pop	r28
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	ef 90       	pop	r14
    3f8a:	cf 90       	pop	r12
    3f8c:	af 90       	pop	r10
    3f8e:	9f 90       	pop	r9
    3f90:	8f 90       	pop	r8
    3f92:	08 95       	ret

00003f94 <lora_driver_resetRn2483>:
    3f94:	88 23       	and	r24, r24
    3f96:	31 f0       	breq	.+12     	; 0x3fa4 <lora_driver_resetRn2483+0x10>
    3f98:	e8 e0       	ldi	r30, 0x08	; 8
    3f9a:	f1 e0       	ldi	r31, 0x01	; 1
    3f9c:	80 81       	ld	r24, Z
    3f9e:	8f 7e       	andi	r24, 0xEF	; 239
    3fa0:	80 83       	st	Z, r24
    3fa2:	08 95       	ret
    3fa4:	e8 e0       	ldi	r30, 0x08	; 8
    3fa6:	f1 e0       	ldi	r31, 0x01	; 1
    3fa8:	80 81       	ld	r24, Z
    3faa:	80 61       	ori	r24, 0x10	; 16
    3fac:	80 83       	st	Z, r24
    3fae:	08 95       	ret

00003fb0 <lora_driver_rn2483FactoryReset>:
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	70 e0       	ldi	r23, 0x00	; 0
    3fb4:	86 e0       	ldi	r24, 0x06	; 6
    3fb6:	94 e0       	ldi	r25, 0x04	; 4
    3fb8:	d4 de       	rcall	.-600    	; 0x3d62 <_uploadMessage>
    3fba:	e9 e4       	ldi	r30, 0x49	; 73
    3fbc:	f2 e1       	ldi	r31, 0x12	; 18
    3fbe:	01 90       	ld	r0, Z+
    3fc0:	00 20       	and	r0, r0
    3fc2:	e9 f7       	brne	.-6      	; 0x3fbe <lora_driver_rn2483FactoryReset+0xe>
    3fc4:	31 97       	sbiw	r30, 0x01	; 1
    3fc6:	e9 54       	subi	r30, 0x49	; 73
    3fc8:	f2 41       	sbci	r31, 0x12	; 18
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	75 97       	sbiw	r30, 0x15	; 21
    3fce:	08 f0       	brcs	.+2      	; 0x3fd2 <lora_driver_rn2483FactoryReset+0x22>
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	08 95       	ret

00003fd4 <lora_driver_getRn2483Hweui>:
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	ec 01       	movw	r28, r24
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	70 e0       	ldi	r23, 0x00	; 0
    3fde:	87 e1       	ldi	r24, 0x17	; 23
    3fe0:	94 e0       	ldi	r25, 0x04	; 4
    3fe2:	bf de       	rcall	.-642    	; 0x3d62 <_uploadMessage>
    3fe4:	e9 e4       	ldi	r30, 0x49	; 73
    3fe6:	f2 e1       	ldi	r31, 0x12	; 18
    3fe8:	01 90       	ld	r0, Z+
    3fea:	00 20       	and	r0, r0
    3fec:	e9 f7       	brne	.-6      	; 0x3fe8 <lora_driver_getRn2483Hweui+0x14>
    3fee:	ea 55       	subi	r30, 0x5A	; 90
    3ff0:	f2 41       	sbci	r31, 0x12	; 18
    3ff2:	39 f4       	brne	.+14     	; 0x4002 <lora_driver_getRn2483Hweui+0x2e>
    3ff4:	69 e4       	ldi	r22, 0x49	; 73
    3ff6:	72 e1       	ldi	r23, 0x12	; 18
    3ff8:	ce 01       	movw	r24, r28
    3ffa:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <strcpy>
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <lora_driver_getRn2483Hweui+0x32>
    4002:	18 82       	st	Y, r1
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	08 95       	ret

0000400c <lora_driver_setDeviceIdentifier>:
    400c:	fc 01       	movw	r30, r24
    400e:	01 90       	ld	r0, Z+
    4010:	00 20       	and	r0, r0
    4012:	e9 f7       	brne	.-6      	; 0x400e <lora_driver_setDeviceIdentifier+0x2>
    4014:	9f 01       	movw	r18, r30
    4016:	21 51       	subi	r18, 0x11	; 17
    4018:	31 09       	sbc	r19, r1
    401a:	28 17       	cp	r18, r24
    401c:	39 07       	cpc	r19, r25
    401e:	29 f4       	brne	.+10     	; 0x402a <lora_driver_setDeviceIdentifier+0x1e>
    4020:	bc 01       	movw	r22, r24
    4022:	85 e4       	ldi	r24, 0x45	; 69
    4024:	94 e0       	ldi	r25, 0x04	; 4
    4026:	6c cf       	rjmp	.-296    	; 0x3f00 <_uploadMessageRc>
    4028:	08 95       	ret
    402a:	89 e0       	ldi	r24, 0x09	; 9
    402c:	08 95       	ret

0000402e <lora_driver_setApplicationIdentifier>:
    402e:	fc 01       	movw	r30, r24
    4030:	01 90       	ld	r0, Z+
    4032:	00 20       	and	r0, r0
    4034:	e9 f7       	brne	.-6      	; 0x4030 <lora_driver_setApplicationIdentifier+0x2>
    4036:	9f 01       	movw	r18, r30
    4038:	21 51       	subi	r18, 0x11	; 17
    403a:	31 09       	sbc	r19, r1
    403c:	28 17       	cp	r18, r24
    403e:	39 07       	cpc	r19, r25
    4040:	29 f4       	brne	.+10     	; 0x404c <lora_driver_setApplicationIdentifier+0x1e>
    4042:	bc 01       	movw	r22, r24
    4044:	84 e5       	ldi	r24, 0x54	; 84
    4046:	94 e0       	ldi	r25, 0x04	; 4
    4048:	5b cf       	rjmp	.-330    	; 0x3f00 <_uploadMessageRc>
    404a:	08 95       	ret
    404c:	89 e0       	ldi	r24, 0x09	; 9
    404e:	08 95       	ret

00004050 <lora_driver_setApplicationKey>:
    4050:	fc 01       	movw	r30, r24
    4052:	01 90       	ld	r0, Z+
    4054:	00 20       	and	r0, r0
    4056:	e9 f7       	brne	.-6      	; 0x4052 <lora_driver_setApplicationKey+0x2>
    4058:	9f 01       	movw	r18, r30
    405a:	21 52       	subi	r18, 0x21	; 33
    405c:	31 09       	sbc	r19, r1
    405e:	28 17       	cp	r18, r24
    4060:	39 07       	cpc	r19, r25
    4062:	29 f4       	brne	.+10     	; 0x406e <lora_driver_setApplicationKey+0x1e>
    4064:	bc 01       	movw	r22, r24
    4066:	83 e6       	ldi	r24, 0x63	; 99
    4068:	94 e0       	ldi	r25, 0x04	; 4
    406a:	4a cf       	rjmp	.-364    	; 0x3f00 <_uploadMessageRc>
    406c:	08 95       	ret
    406e:	89 e0       	ldi	r24, 0x09	; 9
    4070:	08 95       	ret

00004072 <lora_driver_saveMac>:
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	70 e0       	ldi	r23, 0x00	; 0
    4076:	82 ea       	ldi	r24, 0xA2	; 162
    4078:	94 e0       	ldi	r25, 0x04	; 4
    407a:	42 cf       	rjmp	.-380    	; 0x3f00 <_uploadMessageRc>
    407c:	08 95       	ret

0000407e <lora_driver_join>:
    407e:	0f 93       	push	r16
    4080:	1f 93       	push	r17
    4082:	e8 2f       	mov	r30, r24
    4084:	f0 e0       	ldi	r31, 0x00	; 0
    4086:	ee 0f       	add	r30, r30
    4088:	ff 1f       	adc	r31, r31
    408a:	e4 58       	subi	r30, 0x84	; 132
    408c:	f9 4f       	sbci	r31, 0xF9	; 249
    408e:	60 81       	ld	r22, Z
    4090:	71 81       	ldd	r23, Z+1	; 0x01
    4092:	8b ea       	ldi	r24, 0xAB	; 171
    4094:	94 e0       	ldi	r25, 0x04	; 4
    4096:	34 df       	rcall	.-408    	; 0x3f00 <_uploadMessageRc>
    4098:	81 11       	cpse	r24, r1
    409a:	14 c0       	rjmp	.+40     	; 0x40c4 <lora_driver_join+0x46>
    409c:	08 e2       	ldi	r16, 0x28	; 40
    409e:	15 e0       	ldi	r17, 0x05	; 5
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	4d e2       	ldi	r20, 0x2D	; 45
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	69 e4       	ldi	r22, 0x49	; 73
    40aa:	72 e1       	ldi	r23, 0x12	; 18
    40ac:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_serialReplyBufferHandle>
    40b0:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_serialReplyBufferHandle+0x1>
    40b4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xStreamBufferReceive>
    40b8:	88 23       	and	r24, r24
    40ba:	21 f0       	breq	.+8      	; 0x40c4 <lora_driver_join+0x46>
    40bc:	89 e4       	ldi	r24, 0x49	; 73
    40be:	92 e1       	ldi	r25, 0x12	; 18
    40c0:	aa de       	rcall	.-684    	; 0x3e16 <_reply2ReturnCode>
    40c2:	03 c0       	rjmp	.+6      	; 0x40ca <lora_driver_join+0x4c>
    40c4:	89 e4       	ldi	r24, 0x49	; 73
    40c6:	92 e1       	ldi	r25, 0x12	; 18
    40c8:	a6 de       	rcall	.-692    	; 0x3e16 <_reply2ReturnCode>
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    40ce:	08 95       	ret

000040d0 <lora_driver_sendUploadMessage>:
    40d0:	0f 93       	push	r16
    40d2:	1f 93       	push	r17
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	1f 92       	push	r1
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	db 01       	movw	r26, r22
    40e0:	11 96       	adiw	r26, 0x01	; 1
    40e2:	9c 91       	ld	r25, X
    40e4:	11 97       	sbiw	r26, 0x01	; 1
    40e6:	95 31       	cpi	r25, 0x15	; 21
    40e8:	08 f0       	brcs	.+2      	; 0x40ec <lora_driver_sendUploadMessage+0x1c>
    40ea:	b4 c0       	rjmp	.+360    	; 0x4254 <lora_driver_sendUploadMessage+0x184>
    40ec:	99 23       	and	r25, r25
    40ee:	81 f1       	breq	.+96     	; 0x4150 <lora_driver_sendUploadMessage+0x80>
    40f0:	60 e0       	ldi	r22, 0x00	; 0
    40f2:	70 e0       	ldi	r23, 0x00	; 0
    40f4:	27 2f       	mov	r18, r23
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	46 2f       	mov	r20, r22
    40fa:	50 e0       	ldi	r21, 0x00	; 0
    40fc:	fd 01       	movw	r30, r26
    40fe:	e4 0f       	add	r30, r20
    4100:	f5 1f       	adc	r31, r21
    4102:	92 81       	ldd	r25, Z+2	; 0x02
    4104:	92 95       	swap	r25
    4106:	9f 70       	andi	r25, 0x0F	; 15
    4108:	9a 30       	cpi	r25, 0x0A	; 10
    410a:	10 f0       	brcs	.+4      	; 0x4110 <lora_driver_sendUploadMessage+0x40>
    410c:	99 5c       	subi	r25, 0xC9	; 201
    410e:	01 c0       	rjmp	.+2      	; 0x4112 <lora_driver_sendUploadMessage+0x42>
    4110:	90 5d       	subi	r25, 0xD0	; 208
    4112:	f9 01       	movw	r30, r18
    4114:	e6 52       	subi	r30, 0x26	; 38
    4116:	fe 4e       	sbci	r31, 0xEE	; 238
    4118:	90 83       	st	Z, r25
    411a:	2f 5f       	subi	r18, 0xFF	; 255
    411c:	3f 4f       	sbci	r19, 0xFF	; 255
    411e:	fd 01       	movw	r30, r26
    4120:	e4 0f       	add	r30, r20
    4122:	f5 1f       	adc	r31, r21
    4124:	92 81       	ldd	r25, Z+2	; 0x02
    4126:	9f 70       	andi	r25, 0x0F	; 15
    4128:	49 2f       	mov	r20, r25
    412a:	50 e0       	ldi	r21, 0x00	; 0
    412c:	4a 30       	cpi	r20, 0x0A	; 10
    412e:	51 05       	cpc	r21, r1
    4130:	14 f0       	brlt	.+4      	; 0x4136 <lora_driver_sendUploadMessage+0x66>
    4132:	99 5c       	subi	r25, 0xC9	; 201
    4134:	01 c0       	rjmp	.+2      	; 0x4138 <lora_driver_sendUploadMessage+0x68>
    4136:	90 5d       	subi	r25, 0xD0	; 208
    4138:	f9 01       	movw	r30, r18
    413a:	e6 52       	subi	r30, 0x26	; 38
    413c:	fe 4e       	sbci	r31, 0xEE	; 238
    413e:	90 83       	st	Z, r25
    4140:	7e 5f       	subi	r23, 0xFE	; 254
    4142:	6f 5f       	subi	r22, 0xFF	; 255
    4144:	11 96       	adiw	r26, 0x01	; 1
    4146:	9c 91       	ld	r25, X
    4148:	11 97       	sbiw	r26, 0x01	; 1
    414a:	69 17       	cp	r22, r25
    414c:	98 f2       	brcs	.-90     	; 0x40f4 <lora_driver_sendUploadMessage+0x24>
    414e:	01 c0       	rjmp	.+2      	; 0x4152 <lora_driver_sendUploadMessage+0x82>
    4150:	70 e0       	ldi	r23, 0x00	; 0
    4152:	e7 2f       	mov	r30, r23
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	e6 52       	subi	r30, 0x26	; 38
    4158:	fe 4e       	sbci	r31, 0xEE	; 238
    415a:	10 82       	st	Z, r1
    415c:	4c 91       	ld	r20, X
    415e:	81 11       	cpse	r24, r1
    4160:	03 c0       	rjmp	.+6      	; 0x4168 <lora_driver_sendUploadMessage+0x98>
    4162:	84 eb       	ldi	r24, 0xB4	; 180
    4164:	94 e0       	ldi	r25, 0x04	; 4
    4166:	02 c0       	rjmp	.+4      	; 0x416c <lora_driver_sendUploadMessage+0x9c>
    4168:	86 eb       	ldi	r24, 0xB6	; 182
    416a:	94 e0       	ldi	r25, 0x04	; 4
    416c:	2a ed       	ldi	r18, 0xDA	; 218
    416e:	31 e1       	ldi	r19, 0x11	; 17
    4170:	3f 93       	push	r19
    4172:	2f 93       	push	r18
    4174:	1f 92       	push	r1
    4176:	4f 93       	push	r20
    4178:	9f 93       	push	r25
    417a:	8f 93       	push	r24
    417c:	8a eb       	ldi	r24, 0xBA	; 186
    417e:	94 e0       	ldi	r25, 0x04	; 4
    4180:	9f 93       	push	r25
    4182:	8f 93       	push	r24
    4184:	8c e1       	ldi	r24, 0x1C	; 28
    4186:	92 e1       	ldi	r25, 0x12	; 18
    4188:	9f 93       	push	r25
    418a:	8f 93       	push	r24
    418c:	0e 94 31 30 	call	0x6062	; 0x6062 <sprintf>
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	8c e1       	ldi	r24, 0x1C	; 28
    4196:	92 e1       	ldi	r25, 0x12	; 18
    4198:	b3 de       	rcall	.-666    	; 0x3f00 <_uploadMessageRc>
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	f8 94       	cli
    419e:	de bf       	out	0x3e, r29	; 62
    41a0:	0f be       	out	0x3f, r0	; 63
    41a2:	cd bf       	out	0x3d, r28	; 61
    41a4:	81 11       	cpse	r24, r1
    41a6:	59 c0       	rjmp	.+178    	; 0x425a <lora_driver_sendUploadMessage+0x18a>
    41a8:	08 e2       	ldi	r16, 0x28	; 40
    41aa:	15 e0       	ldi	r17, 0x05	; 5
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	4d e2       	ldi	r20, 0x2D	; 45
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	69 e4       	ldi	r22, 0x49	; 73
    41b6:	72 e1       	ldi	r23, 0x12	; 18
    41b8:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_serialReplyBufferHandle>
    41bc:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_serialReplyBufferHandle+0x1>
    41c0:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xStreamBufferReceive>
    41c4:	88 23       	and	r24, r24
    41c6:	09 f4       	brne	.+2      	; 0x41ca <lora_driver_sendUploadMessage+0xfa>
    41c8:	47 c0       	rjmp	.+142    	; 0x4258 <lora_driver_sendUploadMessage+0x188>
    41ca:	89 e4       	ldi	r24, 0x49	; 73
    41cc:	92 e1       	ldi	r25, 0x12	; 18
    41ce:	23 de       	rcall	.-954    	; 0x3e16 <_reply2ReturnCode>
    41d0:	8e 30       	cpi	r24, 0x0E	; 14
    41d2:	09 f0       	breq	.+2      	; 0x41d6 <lora_driver_sendUploadMessage+0x106>
    41d4:	42 c0       	rjmp	.+132    	; 0x425a <lora_driver_sendUploadMessage+0x18a>
    41d6:	87 e0       	ldi	r24, 0x07	; 7
    41d8:	89 83       	std	Y+1, r24	; 0x01
    41da:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <_downlinkMessageBuffer>
    41de:	90 91 bf 11 	lds	r25, 0x11BF	; 0x8011bf <_downlinkMessageBuffer+0x1>
    41e2:	89 2b       	or	r24, r25
    41e4:	a9 f1       	breq	.+106    	; 0x4250 <lora_driver_sendUploadMessage+0x180>
    41e6:	be 01       	movw	r22, r28
    41e8:	6f 5f       	subi	r22, 0xFF	; 255
    41ea:	7f 4f       	sbci	r23, 0xFF	; 255
    41ec:	89 e4       	ldi	r24, 0x49	; 73
    41ee:	92 e1       	ldi	r25, 0x12	; 18
    41f0:	68 d1       	rcall	.+720    	; 0x44c2 <decode_port_no>
    41f2:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <_downlinkPayload>
    41f6:	e9 81       	ldd	r30, Y+1	; 0x01
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	e7 5b       	subi	r30, 0xB7	; 183
    41fc:	fd 4e       	sbci	r31, 0xED	; 237
    41fe:	df 01       	movw	r26, r30
    4200:	0d 90       	ld	r0, X+
    4202:	00 20       	and	r0, r0
    4204:	e9 f7       	brne	.-6      	; 0x4200 <lora_driver_sendUploadMessage+0x130>
    4206:	11 97       	sbiw	r26, 0x01	; 1
    4208:	ae 1b       	sub	r26, r30
    420a:	bf 0b       	sbc	r27, r31
    420c:	aa 23       	and	r26, r26
    420e:	91 f0       	breq	.+36     	; 0x4234 <lora_driver_sendUploadMessage+0x164>
    4210:	bb 27       	eor	r27, r27
    4212:	cd 01       	movw	r24, r26
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	9c 01       	movw	r18, r24
    4218:	12 f4       	brpl	.+4      	; 0x421e <lora_driver_sendUploadMessage+0x14e>
    421a:	2f 5f       	subi	r18, 0xFF	; 255
    421c:	3f 4f       	sbci	r19, 0xFF	; 255
    421e:	35 95       	asr	r19
    4220:	27 95       	ror	r18
    4222:	20 93 c5 11 	sts	0x11C5, r18	; 0x8011c5 <_downlinkPayload+0x1>
    4226:	af 01       	movw	r20, r30
    4228:	4f 5f       	subi	r20, 0xFF	; 255
    422a:	5f 4f       	sbci	r21, 0xFF	; 255
    422c:	64 e1       	ldi	r22, 0x14	; 20
    422e:	86 ec       	ldi	r24, 0xC6	; 198
    4230:	91 e1       	ldi	r25, 0x11	; 17
    4232:	73 d1       	rcall	.+742    	; 0x451a <decode_hexadecimal_string_bytes>
    4234:	01 e0       	ldi	r16, 0x01	; 1
    4236:	10 e0       	ldi	r17, 0x00	; 0
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	46 e1       	ldi	r20, 0x16	; 22
    423e:	50 e0       	ldi	r21, 0x00	; 0
    4240:	64 ec       	ldi	r22, 0xC4	; 196
    4242:	71 e1       	ldi	r23, 0x11	; 17
    4244:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <_downlinkMessageBuffer>
    4248:	90 91 bf 11 	lds	r25, 0x11BF	; 0x8011bf <_downlinkMessageBuffer+0x1>
    424c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <xStreamBufferSend>
    4250:	8e e0       	ldi	r24, 0x0E	; 14
    4252:	03 c0       	rjmp	.+6      	; 0x425a <lora_driver_sendUploadMessage+0x18a>
    4254:	84 e1       	ldi	r24, 0x14	; 20
    4256:	01 c0       	rjmp	.+2      	; 0x425a <lora_driver_sendUploadMessage+0x18a>
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	0f 90       	pop	r0
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	1f 91       	pop	r17
    4262:	0f 91       	pop	r16
    4264:	08 95       	ret

00004266 <lora_driver_setAdaptiveDataRate>:
    4266:	81 30       	cpi	r24, 0x01	; 1
    4268:	19 f0       	breq	.+6      	; 0x4270 <lora_driver_setAdaptiveDataRate+0xa>
    426a:	6a ec       	ldi	r22, 0xCA	; 202
    426c:	74 e0       	ldi	r23, 0x04	; 4
    426e:	02 c0       	rjmp	.+4      	; 0x4274 <lora_driver_setAdaptiveDataRate+0xe>
    4270:	63 ea       	ldi	r22, 0xA3	; 163
    4272:	75 e0       	ldi	r23, 0x05	; 5
    4274:	8e ec       	ldi	r24, 0xCE	; 206
    4276:	94 e0       	ldi	r25, 0x04	; 4
    4278:	43 ce       	rjmp	.-890    	; 0x3f00 <_uploadMessageRc>
    427a:	08 95       	ret

0000427c <lora_driver_setReceiveDelay>:
    427c:	9f 93       	push	r25
    427e:	8f 93       	push	r24
    4280:	8f ef       	ldi	r24, 0xFF	; 255
    4282:	94 e0       	ldi	r25, 0x04	; 4
    4284:	9f 93       	push	r25
    4286:	8f 93       	push	r24
    4288:	8c e1       	ldi	r24, 0x1C	; 28
    428a:	92 e1       	ldi	r25, 0x12	; 18
    428c:	9f 93       	push	r25
    428e:	8f 93       	push	r24
    4290:	0e 94 31 30 	call	0x6062	; 0x6062 <sprintf>
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	8c e1       	ldi	r24, 0x1C	; 28
    429a:	92 e1       	ldi	r25, 0x12	; 18
    429c:	31 de       	rcall	.-926    	; 0x3f00 <_uploadMessageRc>
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	0f 90       	pop	r0
    42aa:	08 95       	ret

000042ac <lora_driver_configureToEu868>:
    42ac:	2f 92       	push	r2
    42ae:	3f 92       	push	r3
    42b0:	4f 92       	push	r4
    42b2:	5f 92       	push	r5
    42b4:	6f 92       	push	r6
    42b6:	7f 92       	push	r7
    42b8:	8f 92       	push	r8
    42ba:	9f 92       	push	r9
    42bc:	af 92       	push	r10
    42be:	bf 92       	push	r11
    42c0:	cf 92       	push	r12
    42c2:	df 92       	push	r13
    42c4:	ef 92       	push	r14
    42c6:	ff 92       	push	r15
    42c8:	0f 93       	push	r16
    42ca:	1f 93       	push	r17
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	a0 97       	sbiw	r28, 0x20	; 32
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	f8 94       	cli
    42da:	de bf       	out	0x3e, r29	; 62
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	6c e2       	ldi	r22, 0x2C	; 44
    42e2:	75 e0       	ldi	r23, 0x05	; 5
    42e4:	88 e3       	ldi	r24, 0x38	; 56
    42e6:	95 e0       	ldi	r25, 0x05	; 5
    42e8:	3c dd       	rcall	.-1416   	; 0x3d62 <_uploadMessage>
    42ea:	95 dd       	rcall	.-1238   	; 0x3e16 <_reply2ReturnCode>
    42ec:	81 11       	cpse	r24, r1
    42ee:	a3 c0       	rjmp	.+326    	; 0x4436 <lora_driver_configureToEu868+0x18a>
    42f0:	80 e2       	ldi	r24, 0x20	; 32
    42f2:	e2 e2       	ldi	r30, 0x22	; 34
    42f4:	f2 e0       	ldi	r31, 0x02	; 2
    42f6:	de 01       	movw	r26, r28
    42f8:	11 96       	adiw	r26, 0x01	; 1
    42fa:	01 90       	ld	r0, Z+
    42fc:	0d 92       	st	X+, r0
    42fe:	8a 95       	dec	r24
    4300:	e1 f7       	brne	.-8      	; 0x42fa <lora_driver_configureToEu868+0x4e>
    4302:	9e 01       	movw	r18, r28
    4304:	2f 5f       	subi	r18, 0xFF	; 255
    4306:	3f 4f       	sbci	r19, 0xFF	; 255
    4308:	69 01       	movw	r12, r18
    430a:	e1 2c       	mov	r14, r1
    430c:	f1 2c       	mov	r15, r1
    430e:	0f 2e       	mov	r0, r31
    4310:	f4 e4       	ldi	r31, 0x44	; 68
    4312:	af 2e       	mov	r10, r31
    4314:	f5 e0       	ldi	r31, 0x05	; 5
    4316:	bf 2e       	mov	r11, r31
    4318:	f0 2d       	mov	r31, r0
    431a:	0c e1       	ldi	r16, 0x1C	; 28
    431c:	12 e1       	ldi	r17, 0x12	; 18
    431e:	0f 2e       	mov	r0, r31
    4320:	fd e5       	ldi	r31, 0x5D	; 93
    4322:	4f 2e       	mov	r4, r31
    4324:	f5 e0       	ldi	r31, 0x05	; 5
    4326:	5f 2e       	mov	r5, r31
    4328:	f0 2d       	mov	r31, r0
    432a:	0f 2e       	mov	r0, r31
    432c:	f4 e7       	ldi	r31, 0x74	; 116
    432e:	8f 2e       	mov	r8, r31
    4330:	f5 e0       	ldi	r31, 0x05	; 5
    4332:	9f 2e       	mov	r9, r31
    4334:	f0 2d       	mov	r31, r0
    4336:	0f 2e       	mov	r0, r31
    4338:	fe e8       	ldi	r31, 0x8E	; 142
    433a:	6f 2e       	mov	r6, r31
    433c:	f5 e0       	ldi	r31, 0x05	; 5
    433e:	7f 2e       	mov	r7, r31
    4340:	f0 2d       	mov	r31, r0
    4342:	3e 2c       	mov	r3, r14
    4344:	2f 2c       	mov	r2, r15
    4346:	ff 92       	push	r15
    4348:	ef 92       	push	r14
    434a:	bf 92       	push	r11
    434c:	af 92       	push	r10
    434e:	1f 93       	push	r17
    4350:	0f 93       	push	r16
    4352:	0e 94 31 30 	call	0x6062	; 0x6062 <sprintf>
    4356:	60 e0       	ldi	r22, 0x00	; 0
    4358:	70 e0       	ldi	r23, 0x00	; 0
    435a:	c8 01       	movw	r24, r16
    435c:	02 dd       	rcall	.-1532   	; 0x3d62 <_uploadMessage>
    435e:	5b dd       	rcall	.-1354   	; 0x3e16 <_reply2ReturnCode>
    4360:	0f 90       	pop	r0
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	81 11       	cpse	r24, r1
    436e:	63 c0       	rjmp	.+198    	; 0x4436 <lora_driver_configureToEu868+0x18a>
    4370:	32 e0       	ldi	r19, 0x02	; 2
    4372:	3e 15       	cp	r19, r14
    4374:	e8 f4       	brcc	.+58     	; 0x43b0 <lora_driver_configureToEu868+0x104>
    4376:	f6 01       	movw	r30, r12
    4378:	83 81       	ldd	r24, Z+3	; 0x03
    437a:	8f 93       	push	r24
    437c:	82 81       	ldd	r24, Z+2	; 0x02
    437e:	8f 93       	push	r24
    4380:	81 81       	ldd	r24, Z+1	; 0x01
    4382:	8f 93       	push	r24
    4384:	80 81       	ld	r24, Z
    4386:	8f 93       	push	r24
    4388:	ff 92       	push	r15
    438a:	ef 92       	push	r14
    438c:	5f 92       	push	r5
    438e:	4f 92       	push	r4
    4390:	1f 93       	push	r17
    4392:	0f 93       	push	r16
    4394:	0e 94 31 30 	call	0x6062	; 0x6062 <sprintf>
    4398:	60 e0       	ldi	r22, 0x00	; 0
    439a:	70 e0       	ldi	r23, 0x00	; 0
    439c:	c8 01       	movw	r24, r16
    439e:	e1 dc       	rcall	.-1598   	; 0x3d62 <_uploadMessage>
    43a0:	3a dd       	rcall	.-1420   	; 0x3e16 <_reply2ReturnCode>
    43a2:	0f b6       	in	r0, 0x3f	; 63
    43a4:	f8 94       	cli
    43a6:	de bf       	out	0x3e, r29	; 62
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	cd bf       	out	0x3d, r28	; 61
    43ac:	81 11       	cpse	r24, r1
    43ae:	43 c0       	rjmp	.+134    	; 0x4436 <lora_driver_configureToEu868+0x18a>
    43b0:	2f 92       	push	r2
    43b2:	3f 92       	push	r3
    43b4:	9f 92       	push	r9
    43b6:	8f 92       	push	r8
    43b8:	1f 93       	push	r17
    43ba:	0f 93       	push	r16
    43bc:	0e 94 31 30 	call	0x6062	; 0x6062 <sprintf>
    43c0:	60 e0       	ldi	r22, 0x00	; 0
    43c2:	70 e0       	ldi	r23, 0x00	; 0
    43c4:	c8 01       	movw	r24, r16
    43c6:	cd dc       	rcall	.-1638   	; 0x3d62 <_uploadMessage>
    43c8:	26 dd       	rcall	.-1460   	; 0x3e16 <_reply2ReturnCode>
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	81 11       	cpse	r24, r1
    43d8:	2e c0       	rjmp	.+92     	; 0x4436 <lora_driver_configureToEu868+0x18a>
    43da:	2f 92       	push	r2
    43dc:	3f 92       	push	r3
    43de:	7f 92       	push	r7
    43e0:	6f 92       	push	r6
    43e2:	1f 93       	push	r17
    43e4:	0f 93       	push	r16
    43e6:	0e 94 31 30 	call	0x6062	; 0x6062 <sprintf>
    43ea:	60 e0       	ldi	r22, 0x00	; 0
    43ec:	70 e0       	ldi	r23, 0x00	; 0
    43ee:	c8 01       	movw	r24, r16
    43f0:	b8 dc       	rcall	.-1680   	; 0x3d62 <_uploadMessage>
    43f2:	11 dd       	rcall	.-1502   	; 0x3e16 <_reply2ReturnCode>
    43f4:	0f 90       	pop	r0
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	81 11       	cpse	r24, r1
    4402:	19 c0       	rjmp	.+50     	; 0x4436 <lora_driver_configureToEu868+0x18a>
    4404:	3f ef       	ldi	r19, 0xFF	; 255
    4406:	e3 1a       	sub	r14, r19
    4408:	f3 0a       	sbc	r15, r19
    440a:	84 e0       	ldi	r24, 0x04	; 4
    440c:	c8 0e       	add	r12, r24
    440e:	d1 1c       	adc	r13, r1
    4410:	98 e0       	ldi	r25, 0x08	; 8
    4412:	e9 16       	cp	r14, r25
    4414:	f1 04       	cpc	r15, r1
    4416:	09 f0       	breq	.+2      	; 0x441a <lora_driver_configureToEu868+0x16e>
    4418:	94 cf       	rjmp	.-216    	; 0x4342 <lora_driver_configureToEu868+0x96>
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	70 e0       	ldi	r23, 0x00	; 0
    441e:	86 ea       	ldi	r24, 0xA6	; 166
    4420:	95 e0       	ldi	r25, 0x05	; 5
    4422:	9f dc       	rcall	.-1730   	; 0x3d62 <_uploadMessage>
    4424:	f8 dc       	rcall	.-1552   	; 0x3e16 <_reply2ReturnCode>
    4426:	81 11       	cpse	r24, r1
    4428:	06 c0       	rjmp	.+12     	; 0x4436 <lora_driver_configureToEu868+0x18a>
    442a:	60 e0       	ldi	r22, 0x00	; 0
    442c:	70 e0       	ldi	r23, 0x00	; 0
    442e:	87 eb       	ldi	r24, 0xB7	; 183
    4430:	95 e0       	ldi	r25, 0x05	; 5
    4432:	97 dc       	rcall	.-1746   	; 0x3d62 <_uploadMessage>
    4434:	f0 dc       	rcall	.-1568   	; 0x3e16 <_reply2ReturnCode>
    4436:	a0 96       	adiw	r28, 0x20	; 32
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	f8 94       	cli
    443c:	de bf       	out	0x3e, r29	; 62
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	cd bf       	out	0x3d, r28	; 61
    4442:	df 91       	pop	r29
    4444:	cf 91       	pop	r28
    4446:	1f 91       	pop	r17
    4448:	0f 91       	pop	r16
    444a:	ff 90       	pop	r15
    444c:	ef 90       	pop	r14
    444e:	df 90       	pop	r13
    4450:	cf 90       	pop	r12
    4452:	bf 90       	pop	r11
    4454:	af 90       	pop	r10
    4456:	9f 90       	pop	r9
    4458:	8f 90       	pop	r8
    445a:	7f 90       	pop	r7
    445c:	6f 90       	pop	r6
    445e:	5f 90       	pop	r5
    4460:	4f 90       	pop	r4
    4462:	3f 90       	pop	r3
    4464:	2f 90       	pop	r2
    4466:	08 95       	ret

00004468 <lora_driver_setOtaaIdentity>:
    4468:	ef 92       	push	r14
    446a:	ff 92       	push	r15
    446c:	0f 93       	push	r16
    446e:	1f 93       	push	r17
    4470:	cf 93       	push	r28
    4472:	df 93       	push	r29
    4474:	ec 01       	movw	r28, r24
    4476:	8b 01       	movw	r16, r22
    4478:	7a 01       	movw	r14, r20
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	f4 de       	rcall	.-536    	; 0x4266 <lora_driver_setAdaptiveDataRate>
    447e:	81 11       	cpse	r24, r1
    4480:	0d c0       	rjmp	.+26     	; 0x449c <lora_driver_setOtaaIdentity+0x34>
    4482:	ce 01       	movw	r24, r28
    4484:	d4 dd       	rcall	.-1112   	; 0x402e <lora_driver_setApplicationIdentifier>
    4486:	81 11       	cpse	r24, r1
    4488:	09 c0       	rjmp	.+18     	; 0x449c <lora_driver_setOtaaIdentity+0x34>
    448a:	c8 01       	movw	r24, r16
    448c:	e1 dd       	rcall	.-1086   	; 0x4050 <lora_driver_setApplicationKey>
    448e:	81 11       	cpse	r24, r1
    4490:	05 c0       	rjmp	.+10     	; 0x449c <lora_driver_setOtaaIdentity+0x34>
    4492:	c7 01       	movw	r24, r14
    4494:	bb dd       	rcall	.-1162   	; 0x400c <lora_driver_setDeviceIdentifier>
    4496:	81 11       	cpse	r24, r1
    4498:	01 c0       	rjmp	.+2      	; 0x449c <lora_driver_setOtaaIdentity+0x34>
    449a:	eb dd       	rcall	.-1066   	; 0x4072 <lora_driver_saveMac>
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	1f 91       	pop	r17
    44a2:	0f 91       	pop	r16
    44a4:	ff 90       	pop	r15
    44a6:	ef 90       	pop	r14
    44a8:	08 95       	ret

000044aa <lora_driver_mapReturnCodeToText>:
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	fc 01       	movw	r30, r24
    44ae:	ee 0f       	add	r30, r30
    44b0:	ff 1f       	adc	r31, r31
    44b2:	8e 0f       	add	r24, r30
    44b4:	9f 1f       	adc	r25, r31
    44b6:	fc 01       	movw	r30, r24
    44b8:	e0 58       	subi	r30, 0x80	; 128
    44ba:	f9 4f       	sbci	r31, 0xF9	; 249
    44bc:	81 81       	ldd	r24, Z+1	; 0x01
    44be:	92 81       	ldd	r25, Z+2	; 0x02
    44c0:	08 95       	ret

000044c2 <decode_port_no>:
    44c2:	dc 01       	movw	r26, r24
    44c4:	00 97       	sbiw	r24, 0x00	; 0
    44c6:	29 f1       	breq	.+74     	; 0x4512 <decode_port_no+0x50>
    44c8:	fb 01       	movw	r30, r22
    44ca:	20 81       	ld	r18, Z
    44cc:	fc 01       	movw	r30, r24
    44ce:	01 90       	ld	r0, Z+
    44d0:	00 20       	and	r0, r0
    44d2:	e9 f7       	brne	.-6      	; 0x44ce <decode_port_no+0xc>
    44d4:	31 97       	sbiw	r30, 0x01	; 1
    44d6:	e8 1b       	sub	r30, r24
    44d8:	f9 0b       	sbc	r31, r25
    44da:	82 2f       	mov	r24, r18
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	e8 17       	cp	r30, r24
    44e0:	f9 07       	cpc	r31, r25
    44e2:	c8 f0       	brcs	.+50     	; 0x4516 <decode_port_no+0x54>
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	08 c0       	rjmp	.+16     	; 0x44f8 <decode_port_no+0x36>
    44e8:	88 0f       	add	r24, r24
    44ea:	38 2f       	mov	r19, r24
    44ec:	33 0f       	add	r19, r19
    44ee:	33 0f       	add	r19, r19
    44f0:	83 0f       	add	r24, r19
    44f2:	80 53       	subi	r24, 0x30	; 48
    44f4:	89 0f       	add	r24, r25
    44f6:	2f 5f       	subi	r18, 0xFF	; 255
    44f8:	fd 01       	movw	r30, r26
    44fa:	e2 0f       	add	r30, r18
    44fc:	f1 1d       	adc	r31, r1
    44fe:	90 81       	ld	r25, Z
    4500:	30 ed       	ldi	r19, 0xD0	; 208
    4502:	39 0f       	add	r19, r25
    4504:	3a 30       	cpi	r19, 0x0A	; 10
    4506:	10 f4       	brcc	.+4      	; 0x450c <decode_port_no+0x4a>
    4508:	91 11       	cpse	r25, r1
    450a:	ee cf       	rjmp	.-36     	; 0x44e8 <decode_port_no+0x26>
    450c:	fb 01       	movw	r30, r22
    450e:	20 83       	st	Z, r18
    4510:	08 95       	ret
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	08 95       	ret
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	08 95       	ret

0000451a <decode_hexadecimal_string_bytes>:
    451a:	0f 93       	push	r16
    451c:	1f 93       	push	r17
    451e:	cf 93       	push	r28
    4520:	df 93       	push	r29
    4522:	dc 01       	movw	r26, r24
    4524:	ea 01       	movw	r28, r20
    4526:	20 97       	sbiw	r28, 0x00	; 0
    4528:	e1 f1       	breq	.+120    	; 0x45a2 <decode_hexadecimal_string_bytes+0x88>
    452a:	fa 01       	movw	r30, r20
    452c:	01 90       	ld	r0, Z+
    452e:	00 20       	and	r0, r0
    4530:	e9 f7       	brne	.-6      	; 0x452c <decode_hexadecimal_string_bytes+0x12>
    4532:	31 97       	sbiw	r30, 0x01	; 1
    4534:	e4 1b       	sub	r30, r20
    4536:	f5 0b       	sbc	r31, r21
    4538:	32 97       	sbiw	r30, 0x02	; 2
    453a:	10 f5       	brcc	.+68     	; 0x4580 <decode_hexadecimal_string_bytes+0x66>
    453c:	32 c0       	rjmp	.+100    	; 0x45a2 <decode_hexadecimal_string_bytes+0x88>
    453e:	8d 01       	movw	r16, r26
    4540:	04 0f       	add	r16, r20
    4542:	15 1f       	adc	r17, r21
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	ae 01       	movw	r20, r28
    4548:	42 0f       	add	r20, r18
    454a:	53 1f       	adc	r21, r19
    454c:	fa 01       	movw	r30, r20
    454e:	90 81       	ld	r25, Z
    4550:	91 34       	cpi	r25, 0x41	; 65
    4552:	28 f0       	brcs	.+10     	; 0x455e <decode_hexadecimal_string_bytes+0x44>
    4554:	97 53       	subi	r25, 0x37	; 55
    4556:	59 2f       	mov	r21, r25
    4558:	52 95       	swap	r21
    455a:	50 7f       	andi	r21, 0xF0	; 240
    455c:	03 c0       	rjmp	.+6      	; 0x4564 <decode_hexadecimal_string_bytes+0x4a>
    455e:	59 2f       	mov	r21, r25
    4560:	52 95       	swap	r21
    4562:	50 7f       	andi	r21, 0xF0	; 240
    4564:	2c 0f       	add	r18, r28
    4566:	3d 1f       	adc	r19, r29
    4568:	f9 01       	movw	r30, r18
    456a:	91 81       	ldd	r25, Z+1	; 0x01
    456c:	91 34       	cpi	r25, 0x41	; 65
    456e:	10 f0       	brcs	.+4      	; 0x4574 <decode_hexadecimal_string_bytes+0x5a>
    4570:	97 53       	subi	r25, 0x37	; 55
    4572:	01 c0       	rjmp	.+2      	; 0x4576 <decode_hexadecimal_string_bytes+0x5c>
    4574:	90 53       	subi	r25, 0x30	; 48
    4576:	95 0f       	add	r25, r21
    4578:	f8 01       	movw	r30, r16
    457a:	90 83       	st	Z, r25
    457c:	8f 5f       	subi	r24, 0xFF	; 255
    457e:	01 c0       	rjmp	.+2      	; 0x4582 <decode_hexadecimal_string_bytes+0x68>
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	28 2f       	mov	r18, r24
    4584:	22 0f       	add	r18, r18
    4586:	48 2f       	mov	r20, r24
    4588:	50 e0       	ldi	r21, 0x00	; 0
    458a:	fe 01       	movw	r30, r28
    458c:	01 90       	ld	r0, Z+
    458e:	00 20       	and	r0, r0
    4590:	e9 f7       	brne	.-6      	; 0x458c <decode_hexadecimal_string_bytes+0x72>
    4592:	31 97       	sbiw	r30, 0x01	; 1
    4594:	ec 1b       	sub	r30, r28
    4596:	fd 0b       	sbc	r31, r29
    4598:	4e 17       	cp	r20, r30
    459a:	5f 07       	cpc	r21, r31
    459c:	10 f4       	brcc	.+4      	; 0x45a2 <decode_hexadecimal_string_bytes+0x88>
    459e:	86 13       	cpse	r24, r22
    45a0:	ce cf       	rjmp	.-100    	; 0x453e <decode_hexadecimal_string_bytes+0x24>
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	08 95       	ret

000045ac <serial_create>:
    45ac:	2f 92       	push	r2
    45ae:	3f 92       	push	r3
    45b0:	4f 92       	push	r4
    45b2:	5f 92       	push	r5
    45b4:	6f 92       	push	r6
    45b6:	7f 92       	push	r7
    45b8:	8f 92       	push	r8
    45ba:	9f 92       	push	r9
    45bc:	af 92       	push	r10
    45be:	cf 92       	push	r12
    45c0:	ef 92       	push	r14
    45c2:	ff 92       	push	r15
    45c4:	0f 93       	push	r16
    45c6:	1f 93       	push	r17
    45c8:	cf 93       	push	r28
    45ca:	df 93       	push	r29
    45cc:	cd b7       	in	r28, 0x3d	; 61
    45ce:	de b7       	in	r29, 0x3e	; 62
    45d0:	f8 2e       	mov	r15, r24
    45d2:	2a 01       	movw	r4, r20
    45d4:	3b 01       	movw	r6, r22
    45d6:	88 e0       	ldi	r24, 0x08	; 8
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <malloc>
    45de:	8c 01       	movw	r16, r24
    45e0:	8f 2d       	mov	r24, r15
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	fc 01       	movw	r30, r24
    45e6:	ee 0f       	add	r30, r30
    45e8:	ff 1f       	adc	r31, r31
    45ea:	ea 58       	subi	r30, 0x8A	; 138
    45ec:	fd 4e       	sbci	r31, 0xED	; 237
    45ee:	11 83       	std	Z+1, r17	; 0x01
    45f0:	00 83       	st	Z, r16
    45f2:	01 15       	cp	r16, r1
    45f4:	11 05       	cpc	r17, r1
    45f6:	09 f4       	brne	.+2      	; 0x45fa <serial_create+0x4e>
    45f8:	6b c0       	rjmp	.+214    	; 0x46d0 <serial_create+0x124>
    45fa:	88 0f       	add	r24, r24
    45fc:	99 1f       	adc	r25, r25
    45fe:	fc 01       	movw	r30, r24
    4600:	e5 5f       	subi	r30, 0xF5	; 245
    4602:	fd 4f       	sbci	r31, 0xFD	; 253
    4604:	80 81       	ld	r24, Z
    4606:	91 81       	ldd	r25, Z+1	; 0x01
    4608:	d8 01       	movw	r26, r16
    460a:	8d 93       	st	X+, r24
    460c:	9c 93       	st	X, r25
    460e:	8c 2d       	mov	r24, r12
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	88 0f       	add	r24, r24
    4614:	99 1f       	adc	r25, r25
    4616:	88 0f       	add	r24, r24
    4618:	99 1f       	adc	r25, r25
    461a:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <malloc>
    461e:	1c 01       	movw	r2, r24
    4620:	86 e0       	ldi	r24, 0x06	; 6
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <malloc>
    4628:	7c 01       	movw	r14, r24
    462a:	4c 2d       	mov	r20, r12
    462c:	b1 01       	movw	r22, r2
    462e:	3f d5       	rcall	.+2686   	; 0x50ae <fifo_init>
    4630:	f8 01       	movw	r30, r16
    4632:	f5 82       	std	Z+5, r15	; 0x05
    4634:	e4 82       	std	Z+4, r14	; 0x04
    4636:	8a 2d       	mov	r24, r10
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	88 0f       	add	r24, r24
    463c:	99 1f       	adc	r25, r25
    463e:	88 0f       	add	r24, r24
    4640:	99 1f       	adc	r25, r25
    4642:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <malloc>
    4646:	1c 01       	movw	r2, r24
    4648:	86 e0       	ldi	r24, 0x06	; 6
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <malloc>
    4650:	7c 01       	movw	r14, r24
    4652:	4a 2d       	mov	r20, r10
    4654:	b1 01       	movw	r22, r2
    4656:	2b d5       	rcall	.+2646   	; 0x50ae <fifo_init>
    4658:	d8 01       	movw	r26, r16
    465a:	13 96       	adiw	r26, 0x03	; 3
    465c:	fc 92       	st	X, r15
    465e:	ee 92       	st	-X, r14
    4660:	12 97       	sbiw	r26, 0x02	; 2
    4662:	17 96       	adiw	r26, 0x07	; 7
    4664:	9c 92       	st	X, r9
    4666:	8e 92       	st	-X, r8
    4668:	16 97       	sbiw	r26, 0x06	; 6
    466a:	ff b6       	in	r15, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	ed 91       	ld	r30, X+
    4670:	fc 91       	ld	r31, X
    4672:	11 97       	sbiw	r26, 0x01	; 1
    4674:	36 97       	sbiw	r30, 0x06	; 6
    4676:	80 81       	ld	r24, Z
    4678:	82 60       	ori	r24, 0x02	; 2
    467a:	80 83       	st	Z, r24
    467c:	8d 90       	ld	r8, X+
    467e:	9c 90       	ld	r9, X
    4680:	c3 01       	movw	r24, r6
    4682:	b2 01       	movw	r22, r4
    4684:	0e 94 6d 2c 	call	0x58da	; 0x58da <__floatunsisf>
    4688:	20 e0       	ldi	r18, 0x00	; 0
    468a:	30 e0       	ldi	r19, 0x00	; 0
    468c:	40 e0       	ldi	r20, 0x00	; 0
    468e:	51 e4       	ldi	r21, 0x41	; 65
    4690:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__mulsf3>
    4694:	9b 01       	movw	r18, r22
    4696:	ac 01       	movw	r20, r24
    4698:	60 e0       	ldi	r22, 0x00	; 0
    469a:	74 e2       	ldi	r23, 0x24	; 36
    469c:	84 e7       	ldi	r24, 0x74	; 116
    469e:	9b e4       	ldi	r25, 0x4B	; 75
    46a0:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <__divsf3>
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	40 e8       	ldi	r20, 0x80	; 128
    46aa:	5f e3       	ldi	r21, 0x3F	; 63
    46ac:	02 da       	rcall	.-3068   	; 0x3ab2 <__subsf3>
    46ae:	79 d9       	rcall	.-3342   	; 0x39a2 <__fixunssfsi>
    46b0:	f4 01       	movw	r30, r8
    46b2:	32 97       	sbiw	r30, 0x02	; 2
    46b4:	60 83       	st	Z, r22
    46b6:	d8 01       	movw	r26, r16
    46b8:	ed 91       	ld	r30, X+
    46ba:	fc 91       	ld	r31, X
    46bc:	11 97       	sbiw	r26, 0x01	; 1
    46be:	35 97       	sbiw	r30, 0x05	; 5
    46c0:	88 e9       	ldi	r24, 0x98	; 152
    46c2:	80 83       	st	Z, r24
    46c4:	ed 91       	ld	r30, X+
    46c6:	fc 91       	ld	r31, X
    46c8:	34 97       	sbiw	r30, 0x04	; 4
    46ca:	86 e0       	ldi	r24, 0x06	; 6
    46cc:	80 83       	st	Z, r24
    46ce:	ff be       	out	0x3f, r15	; 63
    46d0:	c8 01       	movw	r24, r16
    46d2:	df 91       	pop	r29
    46d4:	cf 91       	pop	r28
    46d6:	1f 91       	pop	r17
    46d8:	0f 91       	pop	r16
    46da:	ff 90       	pop	r15
    46dc:	ef 90       	pop	r14
    46de:	cf 90       	pop	r12
    46e0:	af 90       	pop	r10
    46e2:	9f 90       	pop	r9
    46e4:	8f 90       	pop	r8
    46e6:	7f 90       	pop	r7
    46e8:	6f 90       	pop	r6
    46ea:	5f 90       	pop	r5
    46ec:	4f 90       	pop	r4
    46ee:	3f 90       	pop	r3
    46f0:	2f 90       	pop	r2
    46f2:	08 95       	ret

000046f4 <serial_sendByte>:
    46f4:	cf 93       	push	r28
    46f6:	df 93       	push	r29
    46f8:	dc 01       	movw	r26, r24
    46fa:	89 2b       	or	r24, r25
    46fc:	01 f1       	breq	.+64     	; 0x473e <serial_sendByte+0x4a>
    46fe:	12 96       	adiw	r26, 0x02	; 2
    4700:	ed 91       	ld	r30, X+
    4702:	fc 91       	ld	r31, X
    4704:	13 97       	sbiw	r26, 0x03	; 3
    4706:	93 81       	ldd	r25, Z+3	; 0x03
    4708:	82 81       	ldd	r24, Z+2	; 0x02
    470a:	25 81       	ldd	r18, Z+5	; 0x05
    470c:	98 1b       	sub	r25, r24
    470e:	92 23       	and	r25, r18
    4710:	84 81       	ldd	r24, Z+4	; 0x04
    4712:	98 17       	cp	r25, r24
    4714:	b1 f0       	breq	.+44     	; 0x4742 <serial_sendByte+0x4e>
    4716:	83 81       	ldd	r24, Z+3	; 0x03
    4718:	26 95       	lsr	r18
    471a:	28 23       	and	r18, r24
    471c:	c0 81       	ld	r28, Z
    471e:	d1 81       	ldd	r29, Z+1	; 0x01
    4720:	c2 0f       	add	r28, r18
    4722:	d1 1d       	adc	r29, r1
    4724:	68 83       	st	Y, r22
    4726:	8f 5f       	subi	r24, 0xFF	; 255
    4728:	95 81       	ldd	r25, Z+5	; 0x05
    472a:	89 23       	and	r24, r25
    472c:	83 83       	std	Z+3, r24	; 0x03
    472e:	ed 91       	ld	r30, X+
    4730:	fc 91       	ld	r31, X
    4732:	35 97       	sbiw	r30, 0x05	; 5
    4734:	80 81       	ld	r24, Z
    4736:	80 62       	ori	r24, 0x20	; 32
    4738:	80 83       	st	Z, r24
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	03 c0       	rjmp	.+6      	; 0x4744 <serial_sendByte+0x50>
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	01 c0       	rjmp	.+2      	; 0x4744 <serial_sendByte+0x50>
    4742:	82 e0       	ldi	r24, 0x02	; 2
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	08 95       	ret

0000474a <serial_sendBytes>:
    474a:	ef 92       	push	r14
    474c:	ff 92       	push	r15
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	7c 01       	movw	r14, r24
    4758:	00 97       	sbiw	r24, 0x00	; 0
    475a:	09 f4       	brne	.+2      	; 0x475e <serial_sendBytes+0x14>
    475c:	41 c0       	rjmp	.+130    	; 0x47e0 <serial_sendBytes+0x96>
    475e:	dc 01       	movw	r26, r24
    4760:	12 96       	adiw	r26, 0x02	; 2
    4762:	ed 91       	ld	r30, X+
    4764:	fc 91       	ld	r31, X
    4766:	13 97       	sbiw	r26, 0x03	; 3
    4768:	93 81       	ldd	r25, Z+3	; 0x03
    476a:	82 81       	ldd	r24, Z+2	; 0x02
    476c:	98 1b       	sub	r25, r24
    476e:	85 81       	ldd	r24, Z+5	; 0x05
    4770:	98 23       	and	r25, r24
    4772:	84 81       	ldd	r24, Z+4	; 0x04
    4774:	89 1b       	sub	r24, r25
    4776:	86 17       	cp	r24, r22
    4778:	a8 f1       	brcs	.+106    	; 0x47e4 <serial_sendBytes+0x9a>
    477a:	66 23       	and	r22, r22
    477c:	41 f1       	breq	.+80     	; 0x47ce <serial_sendBytes+0x84>
    477e:	84 2f       	mov	r24, r20
    4780:	95 2f       	mov	r25, r21
    4782:	dc 01       	movw	r26, r24
    4784:	61 50       	subi	r22, 0x01	; 1
    4786:	46 2f       	mov	r20, r22
    4788:	50 e0       	ldi	r21, 0x00	; 0
    478a:	4f 5f       	subi	r20, 0xFF	; 255
    478c:	5f 4f       	sbci	r21, 0xFF	; 255
    478e:	48 0f       	add	r20, r24
    4790:	59 1f       	adc	r21, r25
    4792:	e7 01       	movw	r28, r14
    4794:	ea 81       	ldd	r30, Y+2	; 0x02
    4796:	fb 81       	ldd	r31, Y+3	; 0x03
    4798:	93 81       	ldd	r25, Z+3	; 0x03
    479a:	82 81       	ldd	r24, Z+2	; 0x02
    479c:	25 81       	ldd	r18, Z+5	; 0x05
    479e:	98 1b       	sub	r25, r24
    47a0:	92 23       	and	r25, r18
    47a2:	84 81       	ldd	r24, Z+4	; 0x04
    47a4:	98 17       	cp	r25, r24
    47a6:	79 f0       	breq	.+30     	; 0x47c6 <serial_sendBytes+0x7c>
    47a8:	8c 91       	ld	r24, X
    47aa:	93 81       	ldd	r25, Z+3	; 0x03
    47ac:	26 95       	lsr	r18
    47ae:	29 23       	and	r18, r25
    47b0:	60 81       	ld	r22, Z
    47b2:	71 81       	ldd	r23, Z+1	; 0x01
    47b4:	8b 01       	movw	r16, r22
    47b6:	02 0f       	add	r16, r18
    47b8:	11 1d       	adc	r17, r1
    47ba:	e8 01       	movw	r28, r16
    47bc:	88 83       	st	Y, r24
    47be:	9f 5f       	subi	r25, 0xFF	; 255
    47c0:	85 81       	ldd	r24, Z+5	; 0x05
    47c2:	98 23       	and	r25, r24
    47c4:	93 83       	std	Z+3, r25	; 0x03
    47c6:	11 96       	adiw	r26, 0x01	; 1
    47c8:	a4 17       	cp	r26, r20
    47ca:	b5 07       	cpc	r27, r21
    47cc:	11 f7       	brne	.-60     	; 0x4792 <serial_sendBytes+0x48>
    47ce:	d7 01       	movw	r26, r14
    47d0:	ed 91       	ld	r30, X+
    47d2:	fc 91       	ld	r31, X
    47d4:	35 97       	sbiw	r30, 0x05	; 5
    47d6:	80 81       	ld	r24, Z
    47d8:	80 62       	ori	r24, 0x20	; 32
    47da:	80 83       	st	Z, r24
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	03 c0       	rjmp	.+6      	; 0x47e6 <serial_sendBytes+0x9c>
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	01 c0       	rjmp	.+2      	; 0x47e6 <serial_sendBytes+0x9c>
    47e4:	82 e0       	ldi	r24, 0x02	; 2
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	08 95       	ret

000047f4 <serial_getByte>:
    47f4:	00 97       	sbiw	r24, 0x00	; 0
    47f6:	d1 f0       	breq	.+52     	; 0x482c <serial_getByte+0x38>
    47f8:	dc 01       	movw	r26, r24
    47fa:	14 96       	adiw	r26, 0x04	; 4
    47fc:	ed 91       	ld	r30, X+
    47fe:	fc 91       	ld	r31, X
    4800:	15 97       	sbiw	r26, 0x05	; 5
    4802:	93 81       	ldd	r25, Z+3	; 0x03
    4804:	82 81       	ldd	r24, Z+2	; 0x02
    4806:	98 17       	cp	r25, r24
    4808:	99 f0       	breq	.+38     	; 0x4830 <serial_getByte+0x3c>
    480a:	92 81       	ldd	r25, Z+2	; 0x02
    480c:	85 81       	ldd	r24, Z+5	; 0x05
    480e:	86 95       	lsr	r24
    4810:	89 23       	and	r24, r25
    4812:	a0 81       	ld	r26, Z
    4814:	b1 81       	ldd	r27, Z+1	; 0x01
    4816:	a8 0f       	add	r26, r24
    4818:	b1 1d       	adc	r27, r1
    481a:	8c 91       	ld	r24, X
    481c:	db 01       	movw	r26, r22
    481e:	8c 93       	st	X, r24
    4820:	9f 5f       	subi	r25, 0xFF	; 255
    4822:	85 81       	ldd	r24, Z+5	; 0x05
    4824:	98 23       	and	r25, r24
    4826:	92 83       	std	Z+2, r25	; 0x02
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	08 95       	ret
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	08 95       	ret
    4830:	83 e0       	ldi	r24, 0x03	; 3
    4832:	08 95       	ret

00004834 <__vector_25>:
    4834:	1f 92       	push	r1
    4836:	0f 92       	push	r0
    4838:	0f b6       	in	r0, 0x3f	; 63
    483a:	0f 92       	push	r0
    483c:	11 24       	eor	r1, r1
    483e:	0b b6       	in	r0, 0x3b	; 59
    4840:	0f 92       	push	r0
    4842:	2f 93       	push	r18
    4844:	3f 93       	push	r19
    4846:	4f 93       	push	r20
    4848:	5f 93       	push	r21
    484a:	6f 93       	push	r22
    484c:	7f 93       	push	r23
    484e:	8f 93       	push	r24
    4850:	9f 93       	push	r25
    4852:	af 93       	push	r26
    4854:	bf 93       	push	r27
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	ef 93       	push	r30
    485c:	ff 93       	push	r31
    485e:	a0 91 76 12 	lds	r26, 0x1276	; 0x801276 <_ser_handle>
    4862:	b0 91 77 12 	lds	r27, 0x1277	; 0x801277 <_ser_handle+0x1>
    4866:	10 97       	sbiw	r26, 0x00	; 0
    4868:	11 f1       	breq	.+68     	; 0x48ae <__vector_25+0x7a>
    486a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    486e:	14 96       	adiw	r26, 0x04	; 4
    4870:	ed 91       	ld	r30, X+
    4872:	fc 91       	ld	r31, X
    4874:	15 97       	sbiw	r26, 0x05	; 5
    4876:	93 81       	ldd	r25, Z+3	; 0x03
    4878:	82 81       	ldd	r24, Z+2	; 0x02
    487a:	25 81       	ldd	r18, Z+5	; 0x05
    487c:	98 1b       	sub	r25, r24
    487e:	92 23       	and	r25, r18
    4880:	84 81       	ldd	r24, Z+4	; 0x04
    4882:	98 17       	cp	r25, r24
    4884:	61 f0       	breq	.+24     	; 0x489e <__vector_25+0x6a>
    4886:	83 81       	ldd	r24, Z+3	; 0x03
    4888:	26 95       	lsr	r18
    488a:	28 23       	and	r18, r24
    488c:	c0 81       	ld	r28, Z
    488e:	d1 81       	ldd	r29, Z+1	; 0x01
    4890:	c2 0f       	add	r28, r18
    4892:	d1 1d       	adc	r29, r1
    4894:	68 83       	st	Y, r22
    4896:	8f 5f       	subi	r24, 0xFF	; 255
    4898:	95 81       	ldd	r25, Z+5	; 0x05
    489a:	89 23       	and	r24, r25
    489c:	83 83       	std	Z+3, r24	; 0x03
    489e:	16 96       	adiw	r26, 0x06	; 6
    48a0:	ed 91       	ld	r30, X+
    48a2:	fc 91       	ld	r31, X
    48a4:	17 97       	sbiw	r26, 0x07	; 7
    48a6:	30 97       	sbiw	r30, 0x00	; 0
    48a8:	11 f0       	breq	.+4      	; 0x48ae <__vector_25+0x7a>
    48aa:	cd 01       	movw	r24, r26
    48ac:	19 95       	eicall
    48ae:	ff 91       	pop	r31
    48b0:	ef 91       	pop	r30
    48b2:	df 91       	pop	r29
    48b4:	cf 91       	pop	r28
    48b6:	bf 91       	pop	r27
    48b8:	af 91       	pop	r26
    48ba:	9f 91       	pop	r25
    48bc:	8f 91       	pop	r24
    48be:	7f 91       	pop	r23
    48c0:	6f 91       	pop	r22
    48c2:	5f 91       	pop	r21
    48c4:	4f 91       	pop	r20
    48c6:	3f 91       	pop	r19
    48c8:	2f 91       	pop	r18
    48ca:	0f 90       	pop	r0
    48cc:	0b be       	out	0x3b, r0	; 59
    48ce:	0f 90       	pop	r0
    48d0:	0f be       	out	0x3f, r0	; 63
    48d2:	0f 90       	pop	r0
    48d4:	1f 90       	pop	r1
    48d6:	18 95       	reti

000048d8 <__vector_26>:
    48d8:	1f 92       	push	r1
    48da:	0f 92       	push	r0
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	0f 92       	push	r0
    48e0:	11 24       	eor	r1, r1
    48e2:	0b b6       	in	r0, 0x3b	; 59
    48e4:	0f 92       	push	r0
    48e6:	2f 93       	push	r18
    48e8:	8f 93       	push	r24
    48ea:	9f 93       	push	r25
    48ec:	af 93       	push	r26
    48ee:	bf 93       	push	r27
    48f0:	ef 93       	push	r30
    48f2:	ff 93       	push	r31
    48f4:	e0 91 76 12 	lds	r30, 0x1276	; 0x801276 <_ser_handle>
    48f8:	f0 91 77 12 	lds	r31, 0x1277	; 0x801277 <_ser_handle+0x1>
    48fc:	30 97       	sbiw	r30, 0x00	; 0
    48fe:	b9 f0       	breq	.+46     	; 0x492e <__vector_26+0x56>
    4900:	02 80       	ldd	r0, Z+2	; 0x02
    4902:	f3 81       	ldd	r31, Z+3	; 0x03
    4904:	e0 2d       	mov	r30, r0
    4906:	93 81       	ldd	r25, Z+3	; 0x03
    4908:	82 81       	ldd	r24, Z+2	; 0x02
    490a:	98 17       	cp	r25, r24
    490c:	b1 f0       	breq	.+44     	; 0x493a <__vector_26+0x62>
    490e:	92 81       	ldd	r25, Z+2	; 0x02
    4910:	85 81       	ldd	r24, Z+5	; 0x05
    4912:	28 2f       	mov	r18, r24
    4914:	26 95       	lsr	r18
    4916:	29 23       	and	r18, r25
    4918:	a0 81       	ld	r26, Z
    491a:	b1 81       	ldd	r27, Z+1	; 0x01
    491c:	a2 0f       	add	r26, r18
    491e:	b1 1d       	adc	r27, r1
    4920:	2c 91       	ld	r18, X
    4922:	9f 5f       	subi	r25, 0xFF	; 255
    4924:	89 23       	and	r24, r25
    4926:	82 83       	std	Z+2, r24	; 0x02
    4928:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    492c:	0b c0       	rjmp	.+22     	; 0x4944 <__vector_26+0x6c>
    492e:	e1 ec       	ldi	r30, 0xC1	; 193
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	80 81       	ld	r24, Z
    4934:	8f 7d       	andi	r24, 0xDF	; 223
    4936:	80 83       	st	Z, r24
    4938:	05 c0       	rjmp	.+10     	; 0x4944 <__vector_26+0x6c>
    493a:	e1 ec       	ldi	r30, 0xC1	; 193
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	80 81       	ld	r24, Z
    4940:	8f 7d       	andi	r24, 0xDF	; 223
    4942:	80 83       	st	Z, r24
    4944:	ff 91       	pop	r31
    4946:	ef 91       	pop	r30
    4948:	bf 91       	pop	r27
    494a:	af 91       	pop	r26
    494c:	9f 91       	pop	r25
    494e:	8f 91       	pop	r24
    4950:	2f 91       	pop	r18
    4952:	0f 90       	pop	r0
    4954:	0b be       	out	0x3b, r0	; 59
    4956:	0f 90       	pop	r0
    4958:	0f be       	out	0x3f, r0	; 63
    495a:	0f 90       	pop	r0
    495c:	1f 90       	pop	r1
    495e:	18 95       	reti

00004960 <__vector_36>:
    4960:	1f 92       	push	r1
    4962:	0f 92       	push	r0
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	0f 92       	push	r0
    4968:	11 24       	eor	r1, r1
    496a:	0b b6       	in	r0, 0x3b	; 59
    496c:	0f 92       	push	r0
    496e:	2f 93       	push	r18
    4970:	3f 93       	push	r19
    4972:	4f 93       	push	r20
    4974:	5f 93       	push	r21
    4976:	6f 93       	push	r22
    4978:	7f 93       	push	r23
    497a:	8f 93       	push	r24
    497c:	9f 93       	push	r25
    497e:	af 93       	push	r26
    4980:	bf 93       	push	r27
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
    4986:	ef 93       	push	r30
    4988:	ff 93       	push	r31
    498a:	a0 91 78 12 	lds	r26, 0x1278	; 0x801278 <_ser_handle+0x2>
    498e:	b0 91 79 12 	lds	r27, 0x1279	; 0x801279 <_ser_handle+0x3>
    4992:	10 97       	sbiw	r26, 0x00	; 0
    4994:	11 f1       	breq	.+68     	; 0x49da <__vector_36+0x7a>
    4996:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    499a:	14 96       	adiw	r26, 0x04	; 4
    499c:	ed 91       	ld	r30, X+
    499e:	fc 91       	ld	r31, X
    49a0:	15 97       	sbiw	r26, 0x05	; 5
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	82 81       	ldd	r24, Z+2	; 0x02
    49a6:	25 81       	ldd	r18, Z+5	; 0x05
    49a8:	98 1b       	sub	r25, r24
    49aa:	92 23       	and	r25, r18
    49ac:	84 81       	ldd	r24, Z+4	; 0x04
    49ae:	98 17       	cp	r25, r24
    49b0:	61 f0       	breq	.+24     	; 0x49ca <__vector_36+0x6a>
    49b2:	83 81       	ldd	r24, Z+3	; 0x03
    49b4:	26 95       	lsr	r18
    49b6:	28 23       	and	r18, r24
    49b8:	c0 81       	ld	r28, Z
    49ba:	d1 81       	ldd	r29, Z+1	; 0x01
    49bc:	c2 0f       	add	r28, r18
    49be:	d1 1d       	adc	r29, r1
    49c0:	68 83       	st	Y, r22
    49c2:	8f 5f       	subi	r24, 0xFF	; 255
    49c4:	95 81       	ldd	r25, Z+5	; 0x05
    49c6:	89 23       	and	r24, r25
    49c8:	83 83       	std	Z+3, r24	; 0x03
    49ca:	16 96       	adiw	r26, 0x06	; 6
    49cc:	ed 91       	ld	r30, X+
    49ce:	fc 91       	ld	r31, X
    49d0:	17 97       	sbiw	r26, 0x07	; 7
    49d2:	30 97       	sbiw	r30, 0x00	; 0
    49d4:	11 f0       	breq	.+4      	; 0x49da <__vector_36+0x7a>
    49d6:	cd 01       	movw	r24, r26
    49d8:	19 95       	eicall
    49da:	ff 91       	pop	r31
    49dc:	ef 91       	pop	r30
    49de:	df 91       	pop	r29
    49e0:	cf 91       	pop	r28
    49e2:	bf 91       	pop	r27
    49e4:	af 91       	pop	r26
    49e6:	9f 91       	pop	r25
    49e8:	8f 91       	pop	r24
    49ea:	7f 91       	pop	r23
    49ec:	6f 91       	pop	r22
    49ee:	5f 91       	pop	r21
    49f0:	4f 91       	pop	r20
    49f2:	3f 91       	pop	r19
    49f4:	2f 91       	pop	r18
    49f6:	0f 90       	pop	r0
    49f8:	0b be       	out	0x3b, r0	; 59
    49fa:	0f 90       	pop	r0
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	0f 90       	pop	r0
    4a00:	1f 90       	pop	r1
    4a02:	18 95       	reti

00004a04 <__vector_37>:
    4a04:	1f 92       	push	r1
    4a06:	0f 92       	push	r0
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	0f 92       	push	r0
    4a0c:	11 24       	eor	r1, r1
    4a0e:	0b b6       	in	r0, 0x3b	; 59
    4a10:	0f 92       	push	r0
    4a12:	2f 93       	push	r18
    4a14:	8f 93       	push	r24
    4a16:	9f 93       	push	r25
    4a18:	af 93       	push	r26
    4a1a:	bf 93       	push	r27
    4a1c:	ef 93       	push	r30
    4a1e:	ff 93       	push	r31
    4a20:	e0 91 78 12 	lds	r30, 0x1278	; 0x801278 <_ser_handle+0x2>
    4a24:	f0 91 79 12 	lds	r31, 0x1279	; 0x801279 <_ser_handle+0x3>
    4a28:	30 97       	sbiw	r30, 0x00	; 0
    4a2a:	b9 f0       	breq	.+46     	; 0x4a5a <__vector_37+0x56>
    4a2c:	02 80       	ldd	r0, Z+2	; 0x02
    4a2e:	f3 81       	ldd	r31, Z+3	; 0x03
    4a30:	e0 2d       	mov	r30, r0
    4a32:	93 81       	ldd	r25, Z+3	; 0x03
    4a34:	82 81       	ldd	r24, Z+2	; 0x02
    4a36:	98 17       	cp	r25, r24
    4a38:	b1 f0       	breq	.+44     	; 0x4a66 <__vector_37+0x62>
    4a3a:	92 81       	ldd	r25, Z+2	; 0x02
    4a3c:	85 81       	ldd	r24, Z+5	; 0x05
    4a3e:	28 2f       	mov	r18, r24
    4a40:	26 95       	lsr	r18
    4a42:	29 23       	and	r18, r25
    4a44:	a0 81       	ld	r26, Z
    4a46:	b1 81       	ldd	r27, Z+1	; 0x01
    4a48:	a2 0f       	add	r26, r18
    4a4a:	b1 1d       	adc	r27, r1
    4a4c:	2c 91       	ld	r18, X
    4a4e:	9f 5f       	subi	r25, 0xFF	; 255
    4a50:	89 23       	and	r24, r25
    4a52:	82 83       	std	Z+2, r24	; 0x02
    4a54:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a58:	0b c0       	rjmp	.+22     	; 0x4a70 <__vector_37+0x6c>
    4a5a:	e9 ec       	ldi	r30, 0xC9	; 201
    4a5c:	f0 e0       	ldi	r31, 0x00	; 0
    4a5e:	80 81       	ld	r24, Z
    4a60:	8f 7d       	andi	r24, 0xDF	; 223
    4a62:	80 83       	st	Z, r24
    4a64:	05 c0       	rjmp	.+10     	; 0x4a70 <__vector_37+0x6c>
    4a66:	e9 ec       	ldi	r30, 0xC9	; 201
    4a68:	f0 e0       	ldi	r31, 0x00	; 0
    4a6a:	80 81       	ld	r24, Z
    4a6c:	8f 7d       	andi	r24, 0xDF	; 223
    4a6e:	80 83       	st	Z, r24
    4a70:	ff 91       	pop	r31
    4a72:	ef 91       	pop	r30
    4a74:	bf 91       	pop	r27
    4a76:	af 91       	pop	r26
    4a78:	9f 91       	pop	r25
    4a7a:	8f 91       	pop	r24
    4a7c:	2f 91       	pop	r18
    4a7e:	0f 90       	pop	r0
    4a80:	0b be       	out	0x3b, r0	; 59
    4a82:	0f 90       	pop	r0
    4a84:	0f be       	out	0x3f, r0	; 63
    4a86:	0f 90       	pop	r0
    4a88:	1f 90       	pop	r1
    4a8a:	18 95       	reti

00004a8c <__vector_51>:
    4a8c:	1f 92       	push	r1
    4a8e:	0f 92       	push	r0
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	0f 92       	push	r0
    4a94:	11 24       	eor	r1, r1
    4a96:	0b b6       	in	r0, 0x3b	; 59
    4a98:	0f 92       	push	r0
    4a9a:	2f 93       	push	r18
    4a9c:	3f 93       	push	r19
    4a9e:	4f 93       	push	r20
    4aa0:	5f 93       	push	r21
    4aa2:	6f 93       	push	r22
    4aa4:	7f 93       	push	r23
    4aa6:	8f 93       	push	r24
    4aa8:	9f 93       	push	r25
    4aaa:	af 93       	push	r26
    4aac:	bf 93       	push	r27
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	ef 93       	push	r30
    4ab4:	ff 93       	push	r31
    4ab6:	a0 91 7a 12 	lds	r26, 0x127A	; 0x80127a <_ser_handle+0x4>
    4aba:	b0 91 7b 12 	lds	r27, 0x127B	; 0x80127b <_ser_handle+0x5>
    4abe:	10 97       	sbiw	r26, 0x00	; 0
    4ac0:	11 f1       	breq	.+68     	; 0x4b06 <__vector_51+0x7a>
    4ac2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4ac6:	14 96       	adiw	r26, 0x04	; 4
    4ac8:	ed 91       	ld	r30, X+
    4aca:	fc 91       	ld	r31, X
    4acc:	15 97       	sbiw	r26, 0x05	; 5
    4ace:	93 81       	ldd	r25, Z+3	; 0x03
    4ad0:	82 81       	ldd	r24, Z+2	; 0x02
    4ad2:	25 81       	ldd	r18, Z+5	; 0x05
    4ad4:	98 1b       	sub	r25, r24
    4ad6:	92 23       	and	r25, r18
    4ad8:	84 81       	ldd	r24, Z+4	; 0x04
    4ada:	98 17       	cp	r25, r24
    4adc:	61 f0       	breq	.+24     	; 0x4af6 <__vector_51+0x6a>
    4ade:	83 81       	ldd	r24, Z+3	; 0x03
    4ae0:	26 95       	lsr	r18
    4ae2:	28 23       	and	r18, r24
    4ae4:	c0 81       	ld	r28, Z
    4ae6:	d1 81       	ldd	r29, Z+1	; 0x01
    4ae8:	c2 0f       	add	r28, r18
    4aea:	d1 1d       	adc	r29, r1
    4aec:	68 83       	st	Y, r22
    4aee:	8f 5f       	subi	r24, 0xFF	; 255
    4af0:	95 81       	ldd	r25, Z+5	; 0x05
    4af2:	89 23       	and	r24, r25
    4af4:	83 83       	std	Z+3, r24	; 0x03
    4af6:	16 96       	adiw	r26, 0x06	; 6
    4af8:	ed 91       	ld	r30, X+
    4afa:	fc 91       	ld	r31, X
    4afc:	17 97       	sbiw	r26, 0x07	; 7
    4afe:	30 97       	sbiw	r30, 0x00	; 0
    4b00:	11 f0       	breq	.+4      	; 0x4b06 <__vector_51+0x7a>
    4b02:	cd 01       	movw	r24, r26
    4b04:	19 95       	eicall
    4b06:	ff 91       	pop	r31
    4b08:	ef 91       	pop	r30
    4b0a:	df 91       	pop	r29
    4b0c:	cf 91       	pop	r28
    4b0e:	bf 91       	pop	r27
    4b10:	af 91       	pop	r26
    4b12:	9f 91       	pop	r25
    4b14:	8f 91       	pop	r24
    4b16:	7f 91       	pop	r23
    4b18:	6f 91       	pop	r22
    4b1a:	5f 91       	pop	r21
    4b1c:	4f 91       	pop	r20
    4b1e:	3f 91       	pop	r19
    4b20:	2f 91       	pop	r18
    4b22:	0f 90       	pop	r0
    4b24:	0b be       	out	0x3b, r0	; 59
    4b26:	0f 90       	pop	r0
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	0f 90       	pop	r0
    4b2c:	1f 90       	pop	r1
    4b2e:	18 95       	reti

00004b30 <__vector_52>:
    4b30:	1f 92       	push	r1
    4b32:	0f 92       	push	r0
    4b34:	0f b6       	in	r0, 0x3f	; 63
    4b36:	0f 92       	push	r0
    4b38:	11 24       	eor	r1, r1
    4b3a:	0b b6       	in	r0, 0x3b	; 59
    4b3c:	0f 92       	push	r0
    4b3e:	2f 93       	push	r18
    4b40:	8f 93       	push	r24
    4b42:	9f 93       	push	r25
    4b44:	af 93       	push	r26
    4b46:	bf 93       	push	r27
    4b48:	ef 93       	push	r30
    4b4a:	ff 93       	push	r31
    4b4c:	e0 91 7a 12 	lds	r30, 0x127A	; 0x80127a <_ser_handle+0x4>
    4b50:	f0 91 7b 12 	lds	r31, 0x127B	; 0x80127b <_ser_handle+0x5>
    4b54:	30 97       	sbiw	r30, 0x00	; 0
    4b56:	b9 f0       	breq	.+46     	; 0x4b86 <__vector_52+0x56>
    4b58:	02 80       	ldd	r0, Z+2	; 0x02
    4b5a:	f3 81       	ldd	r31, Z+3	; 0x03
    4b5c:	e0 2d       	mov	r30, r0
    4b5e:	93 81       	ldd	r25, Z+3	; 0x03
    4b60:	82 81       	ldd	r24, Z+2	; 0x02
    4b62:	98 17       	cp	r25, r24
    4b64:	b1 f0       	breq	.+44     	; 0x4b92 <__vector_52+0x62>
    4b66:	92 81       	ldd	r25, Z+2	; 0x02
    4b68:	85 81       	ldd	r24, Z+5	; 0x05
    4b6a:	28 2f       	mov	r18, r24
    4b6c:	26 95       	lsr	r18
    4b6e:	29 23       	and	r18, r25
    4b70:	a0 81       	ld	r26, Z
    4b72:	b1 81       	ldd	r27, Z+1	; 0x01
    4b74:	a2 0f       	add	r26, r18
    4b76:	b1 1d       	adc	r27, r1
    4b78:	2c 91       	ld	r18, X
    4b7a:	9f 5f       	subi	r25, 0xFF	; 255
    4b7c:	89 23       	and	r24, r25
    4b7e:	82 83       	std	Z+2, r24	; 0x02
    4b80:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b84:	0b c0       	rjmp	.+22     	; 0x4b9c <__vector_52+0x6c>
    4b86:	e1 ed       	ldi	r30, 0xD1	; 209
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	80 81       	ld	r24, Z
    4b8c:	8f 7d       	andi	r24, 0xDF	; 223
    4b8e:	80 83       	st	Z, r24
    4b90:	05 c0       	rjmp	.+10     	; 0x4b9c <__vector_52+0x6c>
    4b92:	e1 ed       	ldi	r30, 0xD1	; 209
    4b94:	f0 e0       	ldi	r31, 0x00	; 0
    4b96:	80 81       	ld	r24, Z
    4b98:	8f 7d       	andi	r24, 0xDF	; 223
    4b9a:	80 83       	st	Z, r24
    4b9c:	ff 91       	pop	r31
    4b9e:	ef 91       	pop	r30
    4ba0:	bf 91       	pop	r27
    4ba2:	af 91       	pop	r26
    4ba4:	9f 91       	pop	r25
    4ba6:	8f 91       	pop	r24
    4ba8:	2f 91       	pop	r18
    4baa:	0f 90       	pop	r0
    4bac:	0b be       	out	0x3b, r0	; 59
    4bae:	0f 90       	pop	r0
    4bb0:	0f be       	out	0x3f, r0	; 63
    4bb2:	0f 90       	pop	r0
    4bb4:	1f 90       	pop	r1
    4bb6:	18 95       	reti

00004bb8 <__vector_54>:
    4bb8:	1f 92       	push	r1
    4bba:	0f 92       	push	r0
    4bbc:	0f b6       	in	r0, 0x3f	; 63
    4bbe:	0f 92       	push	r0
    4bc0:	11 24       	eor	r1, r1
    4bc2:	0b b6       	in	r0, 0x3b	; 59
    4bc4:	0f 92       	push	r0
    4bc6:	2f 93       	push	r18
    4bc8:	3f 93       	push	r19
    4bca:	4f 93       	push	r20
    4bcc:	5f 93       	push	r21
    4bce:	6f 93       	push	r22
    4bd0:	7f 93       	push	r23
    4bd2:	8f 93       	push	r24
    4bd4:	9f 93       	push	r25
    4bd6:	af 93       	push	r26
    4bd8:	bf 93       	push	r27
    4bda:	cf 93       	push	r28
    4bdc:	df 93       	push	r29
    4bde:	ef 93       	push	r30
    4be0:	ff 93       	push	r31
    4be2:	a0 91 7c 12 	lds	r26, 0x127C	; 0x80127c <_ser_handle+0x6>
    4be6:	b0 91 7d 12 	lds	r27, 0x127D	; 0x80127d <_ser_handle+0x7>
    4bea:	10 97       	sbiw	r26, 0x00	; 0
    4bec:	11 f1       	breq	.+68     	; 0x4c32 <__vector_54+0x7a>
    4bee:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4bf2:	14 96       	adiw	r26, 0x04	; 4
    4bf4:	ed 91       	ld	r30, X+
    4bf6:	fc 91       	ld	r31, X
    4bf8:	15 97       	sbiw	r26, 0x05	; 5
    4bfa:	93 81       	ldd	r25, Z+3	; 0x03
    4bfc:	82 81       	ldd	r24, Z+2	; 0x02
    4bfe:	25 81       	ldd	r18, Z+5	; 0x05
    4c00:	98 1b       	sub	r25, r24
    4c02:	92 23       	and	r25, r18
    4c04:	84 81       	ldd	r24, Z+4	; 0x04
    4c06:	98 17       	cp	r25, r24
    4c08:	61 f0       	breq	.+24     	; 0x4c22 <__vector_54+0x6a>
    4c0a:	83 81       	ldd	r24, Z+3	; 0x03
    4c0c:	26 95       	lsr	r18
    4c0e:	28 23       	and	r18, r24
    4c10:	c0 81       	ld	r28, Z
    4c12:	d1 81       	ldd	r29, Z+1	; 0x01
    4c14:	c2 0f       	add	r28, r18
    4c16:	d1 1d       	adc	r29, r1
    4c18:	68 83       	st	Y, r22
    4c1a:	8f 5f       	subi	r24, 0xFF	; 255
    4c1c:	95 81       	ldd	r25, Z+5	; 0x05
    4c1e:	89 23       	and	r24, r25
    4c20:	83 83       	std	Z+3, r24	; 0x03
    4c22:	16 96       	adiw	r26, 0x06	; 6
    4c24:	ed 91       	ld	r30, X+
    4c26:	fc 91       	ld	r31, X
    4c28:	17 97       	sbiw	r26, 0x07	; 7
    4c2a:	30 97       	sbiw	r30, 0x00	; 0
    4c2c:	11 f0       	breq	.+4      	; 0x4c32 <__vector_54+0x7a>
    4c2e:	cd 01       	movw	r24, r26
    4c30:	19 95       	eicall
    4c32:	ff 91       	pop	r31
    4c34:	ef 91       	pop	r30
    4c36:	df 91       	pop	r29
    4c38:	cf 91       	pop	r28
    4c3a:	bf 91       	pop	r27
    4c3c:	af 91       	pop	r26
    4c3e:	9f 91       	pop	r25
    4c40:	8f 91       	pop	r24
    4c42:	7f 91       	pop	r23
    4c44:	6f 91       	pop	r22
    4c46:	5f 91       	pop	r21
    4c48:	4f 91       	pop	r20
    4c4a:	3f 91       	pop	r19
    4c4c:	2f 91       	pop	r18
    4c4e:	0f 90       	pop	r0
    4c50:	0b be       	out	0x3b, r0	; 59
    4c52:	0f 90       	pop	r0
    4c54:	0f be       	out	0x3f, r0	; 63
    4c56:	0f 90       	pop	r0
    4c58:	1f 90       	pop	r1
    4c5a:	18 95       	reti

00004c5c <__vector_55>:
    4c5c:	1f 92       	push	r1
    4c5e:	0f 92       	push	r0
    4c60:	0f b6       	in	r0, 0x3f	; 63
    4c62:	0f 92       	push	r0
    4c64:	11 24       	eor	r1, r1
    4c66:	0b b6       	in	r0, 0x3b	; 59
    4c68:	0f 92       	push	r0
    4c6a:	2f 93       	push	r18
    4c6c:	8f 93       	push	r24
    4c6e:	9f 93       	push	r25
    4c70:	af 93       	push	r26
    4c72:	bf 93       	push	r27
    4c74:	ef 93       	push	r30
    4c76:	ff 93       	push	r31
    4c78:	e0 91 7c 12 	lds	r30, 0x127C	; 0x80127c <_ser_handle+0x6>
    4c7c:	f0 91 7d 12 	lds	r31, 0x127D	; 0x80127d <_ser_handle+0x7>
    4c80:	30 97       	sbiw	r30, 0x00	; 0
    4c82:	b9 f0       	breq	.+46     	; 0x4cb2 <__vector_55+0x56>
    4c84:	02 80       	ldd	r0, Z+2	; 0x02
    4c86:	f3 81       	ldd	r31, Z+3	; 0x03
    4c88:	e0 2d       	mov	r30, r0
    4c8a:	93 81       	ldd	r25, Z+3	; 0x03
    4c8c:	82 81       	ldd	r24, Z+2	; 0x02
    4c8e:	98 17       	cp	r25, r24
    4c90:	b1 f0       	breq	.+44     	; 0x4cbe <__vector_55+0x62>
    4c92:	92 81       	ldd	r25, Z+2	; 0x02
    4c94:	85 81       	ldd	r24, Z+5	; 0x05
    4c96:	28 2f       	mov	r18, r24
    4c98:	26 95       	lsr	r18
    4c9a:	29 23       	and	r18, r25
    4c9c:	a0 81       	ld	r26, Z
    4c9e:	b1 81       	ldd	r27, Z+1	; 0x01
    4ca0:	a2 0f       	add	r26, r18
    4ca2:	b1 1d       	adc	r27, r1
    4ca4:	2c 91       	ld	r18, X
    4ca6:	9f 5f       	subi	r25, 0xFF	; 255
    4ca8:	89 23       	and	r24, r25
    4caa:	82 83       	std	Z+2, r24	; 0x02
    4cac:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4cb0:	0b c0       	rjmp	.+22     	; 0x4cc8 <__vector_55+0x6c>
    4cb2:	e1 e3       	ldi	r30, 0x31	; 49
    4cb4:	f1 e0       	ldi	r31, 0x01	; 1
    4cb6:	80 81       	ld	r24, Z
    4cb8:	8f 7d       	andi	r24, 0xDF	; 223
    4cba:	80 83       	st	Z, r24
    4cbc:	05 c0       	rjmp	.+10     	; 0x4cc8 <__vector_55+0x6c>
    4cbe:	e1 e3       	ldi	r30, 0x31	; 49
    4cc0:	f1 e0       	ldi	r31, 0x01	; 1
    4cc2:	80 81       	ld	r24, Z
    4cc4:	8f 7d       	andi	r24, 0xDF	; 223
    4cc6:	80 83       	st	Z, r24
    4cc8:	ff 91       	pop	r31
    4cca:	ef 91       	pop	r30
    4ccc:	bf 91       	pop	r27
    4cce:	af 91       	pop	r26
    4cd0:	9f 91       	pop	r25
    4cd2:	8f 91       	pop	r24
    4cd4:	2f 91       	pop	r18
    4cd6:	0f 90       	pop	r0
    4cd8:	0b be       	out	0x3b, r0	; 59
    4cda:	0f 90       	pop	r0
    4cdc:	0f be       	out	0x3f, r0	; 63
    4cde:	0f 90       	pop	r0
    4ce0:	1f 90       	pop	r1
    4ce2:	18 95       	reti

00004ce4 <usart_getchar>:
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	1f 92       	push	r1
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
    4cee:	be 01       	movw	r22, r28
    4cf0:	6f 5f       	subi	r22, 0xFF	; 255
    4cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf4:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <_com_serial_instance>
    4cf8:	90 91 7f 12 	lds	r25, 0x127F	; 0x80127f <_com_serial_instance+0x1>
    4cfc:	7b dd       	rcall	.-1290   	; 0x47f4 <serial_getByte>
    4cfe:	81 11       	cpse	r24, r1
    4d00:	f6 cf       	rjmp	.-20     	; 0x4cee <usart_getchar+0xa>
    4d02:	89 81       	ldd	r24, Y+1	; 0x01
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	0f 90       	pop	r0
    4d08:	df 91       	pop	r29
    4d0a:	cf 91       	pop	r28
    4d0c:	08 95       	ret

00004d0e <usart_putchar>:
    4d0e:	68 2f       	mov	r22, r24
    4d10:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <_com_serial_instance>
    4d14:	90 91 7f 12 	lds	r25, 0x127F	; 0x80127f <_com_serial_instance+0x1>
    4d18:	ed dc       	rcall	.-1574   	; 0x46f4 <serial_sendByte>
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	08 95       	ret

00004d20 <stdio_initialise>:
    4d20:	8f 92       	push	r8
    4d22:	9f 92       	push	r9
    4d24:	af 92       	push	r10
    4d26:	cf 92       	push	r12
    4d28:	ef 92       	push	r14
    4d2a:	0f 93       	push	r16
    4d2c:	81 2c       	mov	r8, r1
    4d2e:	91 2c       	mov	r9, r1
    4d30:	68 94       	set
    4d32:	aa 24       	eor	r10, r10
    4d34:	a7 f8       	bld	r10, 7
    4d36:	68 94       	set
    4d38:	cc 24       	eor	r12, r12
    4d3a:	c7 f8       	bld	r12, 7
    4d3c:	e1 2c       	mov	r14, r1
    4d3e:	00 e0       	ldi	r16, 0x00	; 0
    4d40:	23 e0       	ldi	r18, 0x03	; 3
    4d42:	40 e0       	ldi	r20, 0x00	; 0
    4d44:	51 ee       	ldi	r21, 0xE1	; 225
    4d46:	60 e0       	ldi	r22, 0x00	; 0
    4d48:	70 e0       	ldi	r23, 0x00	; 0
    4d4a:	30 dc       	rcall	.-1952   	; 0x45ac <serial_create>
    4d4c:	90 93 7f 12 	sts	0x127F, r25	; 0x80127f <_com_serial_instance+0x1>
    4d50:	80 93 7e 12 	sts	0x127E, r24	; 0x80127e <_com_serial_instance>
    4d54:	ef e9       	ldi	r30, 0x9F	; 159
    4d56:	f2 e1       	ldi	r31, 0x12	; 18
    4d58:	83 e1       	ldi	r24, 0x13	; 19
    4d5a:	92 e0       	ldi	r25, 0x02	; 2
    4d5c:	91 83       	std	Z+1, r25	; 0x01
    4d5e:	80 83       	st	Z, r24
    4d60:	93 83       	std	Z+3, r25	; 0x03
    4d62:	82 83       	std	Z+2, r24	; 0x02
    4d64:	0f 91       	pop	r16
    4d66:	ef 90       	pop	r14
    4d68:	cf 90       	pop	r12
    4d6a:	af 90       	pop	r10
    4d6c:	9f 90       	pop	r9
    4d6e:	8f 90       	pop	r8
    4d70:	08 95       	ret

00004d72 <_initTwiInterface>:
    4d72:	80 91 8e 12 	lds	r24, 0x128E	; 0x80128e <_twiIsInitiated>
    4d76:	81 11       	cpse	r24, r1
    4d78:	0c c0       	rjmp	.+24     	; 0x4d92 <_initTwiInterface+0x20>
    4d7a:	8c e0       	ldi	r24, 0x0C	; 12
    4d7c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4d80:	8f ef       	ldi	r24, 0xFF	; 255
    4d82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d86:	84 e0       	ldi	r24, 0x04	; 4
    4d88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	80 93 8e 12 	sts	0x128E, r24	; 0x80128e <_twiIsInitiated>
    4d92:	08 95       	ret

00004d94 <twiCreate>:
    4d94:	af 92       	push	r10
    4d96:	bf 92       	push	r11
    4d98:	cf 92       	push	r12
    4d9a:	df 92       	push	r13
    4d9c:	ef 92       	push	r14
    4d9e:	ff 92       	push	r15
    4da0:	0f 93       	push	r16
    4da2:	1f 93       	push	r17
    4da4:	cf 93       	push	r28
    4da6:	df 93       	push	r29
    4da8:	a8 2e       	mov	r10, r24
    4daa:	b6 2e       	mov	r11, r22
    4dac:	69 01       	movw	r12, r18
    4dae:	7a 01       	movw	r14, r20
    4db0:	84 e0       	ldi	r24, 0x04	; 4
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	65 d6       	rcall	.+3274   	; 0x5a80 <malloc>
    4db6:	ec 01       	movw	r28, r24
    4db8:	89 2b       	or	r24, r25
    4dba:	61 f1       	breq	.+88     	; 0x4e14 <twiCreate+0x80>
    4dbc:	a8 82       	st	Y, r10
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	b8 12       	cpse	r11, r24
    4dc2:	12 c0       	rjmp	.+36     	; 0x4de8 <twiCreate+0x54>
    4dc4:	c7 01       	movw	r24, r14
    4dc6:	b6 01       	movw	r22, r12
    4dc8:	20 ea       	ldi	r18, 0xA0	; 160
    4dca:	36 e8       	ldi	r19, 0x86	; 134
    4dcc:	41 e0       	ldi	r20, 0x01	; 1
    4dce:	50 e0       	ldi	r21, 0x00	; 0
    4dd0:	2d d6       	rcall	.+3162   	; 0x5a2c <__udivmodsi4>
    4dd2:	da 01       	movw	r26, r20
    4dd4:	c9 01       	movw	r24, r18
    4dd6:	40 97       	sbiw	r24, 0x10	; 16
    4dd8:	a1 09       	sbc	r26, r1
    4dda:	b1 09       	sbc	r27, r1
    4ddc:	b6 95       	lsr	r27
    4dde:	a7 95       	ror	r26
    4de0:	97 95       	ror	r25
    4de2:	87 95       	ror	r24
    4de4:	89 83       	std	Y+1, r24	; 0x01
    4de6:	11 c0       	rjmp	.+34     	; 0x4e0a <twiCreate+0x76>
    4de8:	c7 01       	movw	r24, r14
    4dea:	b6 01       	movw	r22, r12
    4dec:	20 e8       	ldi	r18, 0x80	; 128
    4dee:	3a e1       	ldi	r19, 0x1A	; 26
    4df0:	46 e0       	ldi	r20, 0x06	; 6
    4df2:	50 e0       	ldi	r21, 0x00	; 0
    4df4:	1b d6       	rcall	.+3126   	; 0x5a2c <__udivmodsi4>
    4df6:	da 01       	movw	r26, r20
    4df8:	c9 01       	movw	r24, r18
    4dfa:	40 97       	sbiw	r24, 0x10	; 16
    4dfc:	a1 09       	sbc	r26, r1
    4dfe:	b1 09       	sbc	r27, r1
    4e00:	b6 95       	lsr	r27
    4e02:	a7 95       	ror	r26
    4e04:	97 95       	ror	r25
    4e06:	87 95       	ror	r24
    4e08:	89 83       	std	Y+1, r24	; 0x01
    4e0a:	1b 83       	std	Y+3, r17	; 0x03
    4e0c:	0a 83       	std	Y+2, r16	; 0x02
    4e0e:	8c 2f       	mov	r24, r28
    4e10:	9d 2f       	mov	r25, r29
    4e12:	02 c0       	rjmp	.+4      	; 0x4e18 <twiCreate+0x84>
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	1f 91       	pop	r17
    4e1e:	0f 91       	pop	r16
    4e20:	ff 90       	pop	r15
    4e22:	ef 90       	pop	r14
    4e24:	df 90       	pop	r13
    4e26:	cf 90       	pop	r12
    4e28:	bf 90       	pop	r11
    4e2a:	af 90       	pop	r10
    4e2c:	08 95       	ret

00004e2e <twiIsBusy>:
    4e2e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e32:	81 70       	andi	r24, 0x01	; 1
    4e34:	08 95       	ret

00004e36 <twiTransmit>:
    4e36:	ff 92       	push	r15
    4e38:	0f 93       	push	r16
    4e3a:	1f 93       	push	r17
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	00 97       	sbiw	r24, 0x00	; 0
    4e42:	d1 f1       	breq	.+116    	; 0x4eb8 <twiTransmit+0x82>
    4e44:	4a 30       	cpi	r20, 0x0A	; 10
    4e46:	d0 f5       	brcc	.+116    	; 0x4ebc <twiTransmit+0x86>
    4e48:	f4 2e       	mov	r15, r20
    4e4a:	8b 01       	movw	r16, r22
    4e4c:	ec 01       	movw	r28, r24
    4e4e:	ef df       	rcall	.-34     	; 0x4e2e <twiIsBusy>
    4e50:	81 11       	cpse	r24, r1
    4e52:	36 c0       	rjmp	.+108    	; 0x4ec0 <twiTransmit+0x8a>
    4e54:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <_twiCurrentHandler>
    4e58:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <_twiCurrentHandler+0x1>
    4e5c:	c8 17       	cp	r28, r24
    4e5e:	d9 07       	cpc	r29, r25
    4e60:	41 f0       	breq	.+16     	; 0x4e72 <twiTransmit+0x3c>
    4e62:	87 df       	rcall	.-242    	; 0x4d72 <_initTwiInterface>
    4e64:	89 81       	ldd	r24, Y+1	; 0x01
    4e66:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e6a:	d0 93 82 12 	sts	0x1282, r29	; 0x801282 <_twiCurrentHandler+0x1>
    4e6e:	c0 93 81 12 	sts	0x1281, r28	; 0x801281 <_twiCurrentHandler>
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	8f 0d       	add	r24, r15
    4e76:	80 93 83 12 	sts	0x1283, r24	; 0x801283 <_twiMessageLen>
    4e7a:	88 81       	ld	r24, Y
    4e7c:	88 0f       	add	r24, r24
    4e7e:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <_twiMessageBuffer>
    4e82:	ff 20       	and	r15, r15
    4e84:	89 f0       	breq	.+34     	; 0x4ea8 <twiTransmit+0x72>
    4e86:	f8 01       	movw	r30, r16
    4e88:	a5 e8       	ldi	r26, 0x85	; 133
    4e8a:	b2 e1       	ldi	r27, 0x12	; 18
    4e8c:	4f ef       	ldi	r20, 0xFF	; 255
    4e8e:	4f 0d       	add	r20, r15
    4e90:	64 2f       	mov	r22, r20
    4e92:	70 e0       	ldi	r23, 0x00	; 0
    4e94:	cb 01       	movw	r24, r22
    4e96:	01 96       	adiw	r24, 0x01	; 1
    4e98:	b8 01       	movw	r22, r16
    4e9a:	68 0f       	add	r22, r24
    4e9c:	79 1f       	adc	r23, r25
    4e9e:	81 91       	ld	r24, Z+
    4ea0:	8d 93       	st	X+, r24
    4ea2:	e6 17       	cp	r30, r22
    4ea4:	f7 07       	cpc	r31, r23
    4ea6:	d9 f7       	brne	.-10     	; 0x4e9e <twiTransmit+0x68>
    4ea8:	88 ef       	ldi	r24, 0xF8	; 248
    4eaa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4eae:	85 ea       	ldi	r24, 0xA5	; 165
    4eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4eb4:	84 e0       	ldi	r24, 0x04	; 4
    4eb6:	05 c0       	rjmp	.+10     	; 0x4ec2 <twiTransmit+0x8c>
    4eb8:	86 e0       	ldi	r24, 0x06	; 6
    4eba:	03 c0       	rjmp	.+6      	; 0x4ec2 <twiTransmit+0x8c>
    4ebc:	87 e0       	ldi	r24, 0x07	; 7
    4ebe:	01 c0       	rjmp	.+2      	; 0x4ec2 <twiTransmit+0x8c>
    4ec0:	82 e0       	ldi	r24, 0x02	; 2
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	1f 91       	pop	r17
    4ec8:	0f 91       	pop	r16
    4eca:	ff 90       	pop	r15
    4ecc:	08 95       	ret

00004ece <twiReceive>:
    4ece:	1f 93       	push	r17
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	00 97       	sbiw	r24, 0x00	; 0
    4ed6:	29 f1       	breq	.+74     	; 0x4f22 <twiReceive+0x54>
    4ed8:	6b 30       	cpi	r22, 0x0B	; 11
    4eda:	28 f5       	brcc	.+74     	; 0x4f26 <twiReceive+0x58>
    4edc:	16 2f       	mov	r17, r22
    4ede:	ec 01       	movw	r28, r24
    4ee0:	a6 df       	rcall	.-180    	; 0x4e2e <twiIsBusy>
    4ee2:	81 11       	cpse	r24, r1
    4ee4:	22 c0       	rjmp	.+68     	; 0x4f2a <twiReceive+0x5c>
    4ee6:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <_twiCurrentHandler>
    4eea:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <_twiCurrentHandler+0x1>
    4eee:	c8 17       	cp	r28, r24
    4ef0:	d9 07       	cpc	r29, r25
    4ef2:	41 f0       	breq	.+16     	; 0x4f04 <twiReceive+0x36>
    4ef4:	3e df       	rcall	.-388    	; 0x4d72 <_initTwiInterface>
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4efc:	d0 93 82 12 	sts	0x1282, r29	; 0x801282 <_twiCurrentHandler+0x1>
    4f00:	c0 93 81 12 	sts	0x1281, r28	; 0x801281 <_twiCurrentHandler>
    4f04:	10 93 83 12 	sts	0x1283, r17	; 0x801283 <_twiMessageLen>
    4f08:	88 81       	ld	r24, Y
    4f0a:	88 0f       	add	r24, r24
    4f0c:	81 60       	ori	r24, 0x01	; 1
    4f0e:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <_twiMessageBuffer>
    4f12:	88 ef       	ldi	r24, 0xF8	; 248
    4f14:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4f18:	85 ea       	ldi	r24, 0xA5	; 165
    4f1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f1e:	85 e0       	ldi	r24, 0x05	; 5
    4f20:	05 c0       	rjmp	.+10     	; 0x4f2c <twiReceive+0x5e>
    4f22:	86 e0       	ldi	r24, 0x06	; 6
    4f24:	03 c0       	rjmp	.+6      	; 0x4f2c <twiReceive+0x5e>
    4f26:	87 e0       	ldi	r24, 0x07	; 7
    4f28:	01 c0       	rjmp	.+2      	; 0x4f2c <twiReceive+0x5e>
    4f2a:	82 e0       	ldi	r24, 0x02	; 2
    4f2c:	df 91       	pop	r29
    4f2e:	cf 91       	pop	r28
    4f30:	1f 91       	pop	r17
    4f32:	08 95       	ret

00004f34 <__vector_39>:
    4f34:	1f 92       	push	r1
    4f36:	0f 92       	push	r0
    4f38:	0f b6       	in	r0, 0x3f	; 63
    4f3a:	0f 92       	push	r0
    4f3c:	11 24       	eor	r1, r1
    4f3e:	0b b6       	in	r0, 0x3b	; 59
    4f40:	0f 92       	push	r0
    4f42:	2f 93       	push	r18
    4f44:	3f 93       	push	r19
    4f46:	4f 93       	push	r20
    4f48:	5f 93       	push	r21
    4f4a:	6f 93       	push	r22
    4f4c:	7f 93       	push	r23
    4f4e:	8f 93       	push	r24
    4f50:	9f 93       	push	r25
    4f52:	af 93       	push	r26
    4f54:	bf 93       	push	r27
    4f56:	ef 93       	push	r30
    4f58:	ff 93       	push	r31
    4f5a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f5e:	8e 2f       	mov	r24, r30
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	fc 01       	movw	r30, r24
    4f64:	38 97       	sbiw	r30, 0x08	; 8
    4f66:	e1 35       	cpi	r30, 0x51	; 81
    4f68:	f1 05       	cpc	r31, r1
    4f6a:	08 f0       	brcs	.+2      	; 0x4f6e <__vector_39+0x3a>
    4f6c:	75 c0       	rjmp	.+234    	; 0x5058 <__vector_39+0x124>
    4f6e:	88 27       	eor	r24, r24
    4f70:	e4 58       	subi	r30, 0x84	; 132
    4f72:	ff 4f       	sbci	r31, 0xFF	; 255
    4f74:	8f 4f       	sbci	r24, 0xFF	; 255
    4f76:	7c c5       	rjmp	.+2808   	; 0x5a70 <__tablejump2__>
    4f78:	10 92 80 12 	sts	0x1280, r1	; 0x801280 <_index.1885>
    4f7c:	e0 91 80 12 	lds	r30, 0x1280	; 0x801280 <_index.1885>
    4f80:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <_twiMessageLen>
    4f84:	e8 17       	cp	r30, r24
    4f86:	70 f4       	brcc	.+28     	; 0x4fa4 <__vector_39+0x70>
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	8e 0f       	add	r24, r30
    4f8c:	80 93 80 12 	sts	0x1280, r24	; 0x801280 <_index.1885>
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	ec 57       	subi	r30, 0x7C	; 124
    4f94:	fd 4e       	sbci	r31, 0xED	; 237
    4f96:	80 81       	ld	r24, Z
    4f98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f9c:	85 e8       	ldi	r24, 0x85	; 133
    4f9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fa2:	72 c0       	rjmp	.+228    	; 0x5088 <__vector_39+0x154>
    4fa4:	84 e9       	ldi	r24, 0x94	; 148
    4fa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4faa:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <_twiCurrentHandler>
    4fae:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <_twiCurrentHandler+0x1>
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	12 96       	adiw	r26, 0x02	; 2
    4fb6:	ed 91       	ld	r30, X+
    4fb8:	fc 91       	ld	r31, X
    4fba:	13 97       	sbiw	r26, 0x03	; 3
    4fbc:	30 97       	sbiw	r30, 0x00	; 0
    4fbe:	09 f4       	brne	.+2      	; 0x4fc2 <__vector_39+0x8e>
    4fc0:	63 c0       	rjmp	.+198    	; 0x5088 <__vector_39+0x154>
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	40 e0       	ldi	r20, 0x00	; 0
    4fc6:	50 e0       	ldi	r21, 0x00	; 0
    4fc8:	64 e0       	ldi	r22, 0x04	; 4
    4fca:	19 95       	eicall
    4fcc:	5d c0       	rjmp	.+186    	; 0x5088 <__vector_39+0x154>
    4fce:	e0 91 80 12 	lds	r30, 0x1280	; 0x801280 <_index.1885>
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	8e 0f       	add	r24, r30
    4fd6:	80 93 80 12 	sts	0x1280, r24	; 0x801280 <_index.1885>
    4fda:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4fde:	f0 e0       	ldi	r31, 0x00	; 0
    4fe0:	ec 57       	subi	r30, 0x7C	; 124
    4fe2:	fd 4e       	sbci	r31, 0xED	; 237
    4fe4:	80 83       	st	Z, r24
    4fe6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4fea:	80 34       	cpi	r24, 0x40	; 64
    4fec:	11 f4       	brne	.+4      	; 0x4ff2 <__vector_39+0xbe>
    4fee:	10 92 80 12 	sts	0x1280, r1	; 0x801280 <_index.1885>
    4ff2:	20 91 80 12 	lds	r18, 0x1280	; 0x801280 <_index.1885>
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <_twiMessageLen>
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	01 97       	sbiw	r24, 0x01	; 1
    5000:	28 17       	cp	r18, r24
    5002:	39 07       	cpc	r19, r25
    5004:	24 f4       	brge	.+8      	; 0x500e <__vector_39+0xda>
    5006:	85 ec       	ldi	r24, 0xC5	; 197
    5008:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    500c:	3d c0       	rjmp	.+122    	; 0x5088 <__vector_39+0x154>
    500e:	85 e8       	ldi	r24, 0x85	; 133
    5010:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5014:	39 c0       	rjmp	.+114    	; 0x5088 <__vector_39+0x154>
    5016:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    501a:	e0 91 80 12 	lds	r30, 0x1280	; 0x801280 <_index.1885>
    501e:	f0 e0       	ldi	r31, 0x00	; 0
    5020:	ec 57       	subi	r30, 0x7C	; 124
    5022:	fd 4e       	sbci	r31, 0xED	; 237
    5024:	80 83       	st	Z, r24
    5026:	84 e9       	ldi	r24, 0x94	; 148
    5028:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    502c:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <_twiCurrentHandler>
    5030:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <_twiCurrentHandler+0x1>
    5034:	dc 01       	movw	r26, r24
    5036:	12 96       	adiw	r26, 0x02	; 2
    5038:	ed 91       	ld	r30, X+
    503a:	fc 91       	ld	r31, X
    503c:	13 97       	sbiw	r26, 0x03	; 3
    503e:	30 97       	sbiw	r30, 0x00	; 0
    5040:	19 f1       	breq	.+70     	; 0x5088 <__vector_39+0x154>
    5042:	20 91 83 12 	lds	r18, 0x1283	; 0x801283 <_twiMessageLen>
    5046:	44 e8       	ldi	r20, 0x84	; 132
    5048:	52 e1       	ldi	r21, 0x12	; 18
    504a:	65 e0       	ldi	r22, 0x05	; 5
    504c:	19 95       	eicall
    504e:	1c c0       	rjmp	.+56     	; 0x5088 <__vector_39+0x154>
    5050:	85 ea       	ldi	r24, 0xA5	; 165
    5052:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5056:	18 c0       	rjmp	.+48     	; 0x5088 <__vector_39+0x154>
    5058:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    505c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5060:	84 e0       	ldi	r24, 0x04	; 4
    5062:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5066:	80 91 81 12 	lds	r24, 0x1281	; 0x801281 <_twiCurrentHandler>
    506a:	90 91 82 12 	lds	r25, 0x1282	; 0x801282 <_twiCurrentHandler+0x1>
    506e:	dc 01       	movw	r26, r24
    5070:	12 96       	adiw	r26, 0x02	; 2
    5072:	ed 91       	ld	r30, X+
    5074:	fc 91       	ld	r31, X
    5076:	13 97       	sbiw	r26, 0x03	; 3
    5078:	30 97       	sbiw	r30, 0x00	; 0
    507a:	31 f0       	breq	.+12     	; 0x5088 <__vector_39+0x154>
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	40 e0       	ldi	r20, 0x00	; 0
    5080:	50 e0       	ldi	r21, 0x00	; 0
    5082:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5086:	19 95       	eicall
    5088:	ff 91       	pop	r31
    508a:	ef 91       	pop	r30
    508c:	bf 91       	pop	r27
    508e:	af 91       	pop	r26
    5090:	9f 91       	pop	r25
    5092:	8f 91       	pop	r24
    5094:	7f 91       	pop	r23
    5096:	6f 91       	pop	r22
    5098:	5f 91       	pop	r21
    509a:	4f 91       	pop	r20
    509c:	3f 91       	pop	r19
    509e:	2f 91       	pop	r18
    50a0:	0f 90       	pop	r0
    50a2:	0b be       	out	0x3b, r0	; 59
    50a4:	0f 90       	pop	r0
    50a6:	0f be       	out	0x3f, r0	; 63
    50a8:	0f 90       	pop	r0
    50aa:	1f 90       	pop	r1
    50ac:	18 95       	reti

000050ae <fifo_init>:
    50ae:	fc 01       	movw	r30, r24
    50b0:	41 11       	cpse	r20, r1
    50b2:	01 c0       	rjmp	.+2      	; 0x50b6 <fifo_init+0x8>
    50b4:	06 d6       	rcall	.+3084   	; 0x5cc2 <abort>
    50b6:	84 2f       	mov	r24, r20
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	9c 01       	movw	r18, r24
    50bc:	21 50       	subi	r18, 0x01	; 1
    50be:	31 09       	sbc	r19, r1
    50c0:	82 23       	and	r24, r18
    50c2:	93 23       	and	r25, r19
    50c4:	89 2b       	or	r24, r25
    50c6:	09 f0       	breq	.+2      	; 0x50ca <fifo_init+0x1c>
    50c8:	fc d5       	rcall	.+3064   	; 0x5cc2 <abort>
    50ca:	41 38       	cpi	r20, 0x81	; 129
    50cc:	08 f0       	brcs	.+2      	; 0x50d0 <fifo_init+0x22>
    50ce:	f9 d5       	rcall	.+3058   	; 0x5cc2 <abort>
    50d0:	12 82       	std	Z+2, r1	; 0x02
    50d2:	13 82       	std	Z+3, r1	; 0x03
    50d4:	44 83       	std	Z+4, r20	; 0x04
    50d6:	44 0f       	add	r20, r20
    50d8:	41 50       	subi	r20, 0x01	; 1
    50da:	45 83       	std	Z+5, r20	; 0x05
    50dc:	71 83       	std	Z+1, r23	; 0x01
    50de:	60 83       	st	Z, r22
    50e0:	80 e0       	ldi	r24, 0x00	; 0
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	08 95       	ret

000050e6 <vfprintf>:
    50e6:	2f 92       	push	r2
    50e8:	3f 92       	push	r3
    50ea:	4f 92       	push	r4
    50ec:	5f 92       	push	r5
    50ee:	6f 92       	push	r6
    50f0:	7f 92       	push	r7
    50f2:	8f 92       	push	r8
    50f4:	9f 92       	push	r9
    50f6:	af 92       	push	r10
    50f8:	bf 92       	push	r11
    50fa:	cf 92       	push	r12
    50fc:	df 92       	push	r13
    50fe:	ef 92       	push	r14
    5100:	ff 92       	push	r15
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	cd b7       	in	r28, 0x3d	; 61
    510c:	de b7       	in	r29, 0x3e	; 62
    510e:	60 97       	sbiw	r28, 0x10	; 16
    5110:	0f b6       	in	r0, 0x3f	; 63
    5112:	f8 94       	cli
    5114:	de bf       	out	0x3e, r29	; 62
    5116:	0f be       	out	0x3f, r0	; 63
    5118:	cd bf       	out	0x3d, r28	; 61
    511a:	7c 01       	movw	r14, r24
    511c:	1b 01       	movw	r2, r22
    511e:	6a 01       	movw	r12, r20
    5120:	fc 01       	movw	r30, r24
    5122:	17 82       	std	Z+7, r1	; 0x07
    5124:	16 82       	std	Z+6, r1	; 0x06
    5126:	83 81       	ldd	r24, Z+3	; 0x03
    5128:	81 ff       	sbrs	r24, 1
    512a:	2a c3       	rjmp	.+1620   	; 0x5780 <vfprintf+0x69a>
    512c:	9e 01       	movw	r18, r28
    512e:	2f 5f       	subi	r18, 0xFF	; 255
    5130:	3f 4f       	sbci	r19, 0xFF	; 255
    5132:	39 01       	movw	r6, r18
    5134:	f7 01       	movw	r30, r14
    5136:	93 81       	ldd	r25, Z+3	; 0x03
    5138:	f1 01       	movw	r30, r2
    513a:	93 fd       	sbrc	r25, 3
    513c:	85 91       	lpm	r24, Z+
    513e:	93 ff       	sbrs	r25, 3
    5140:	81 91       	ld	r24, Z+
    5142:	1f 01       	movw	r2, r30
    5144:	88 23       	and	r24, r24
    5146:	09 f4       	brne	.+2      	; 0x514a <vfprintf+0x64>
    5148:	17 c3       	rjmp	.+1582   	; 0x5778 <vfprintf+0x692>
    514a:	85 32       	cpi	r24, 0x25	; 37
    514c:	39 f4       	brne	.+14     	; 0x515c <vfprintf+0x76>
    514e:	93 fd       	sbrc	r25, 3
    5150:	85 91       	lpm	r24, Z+
    5152:	93 ff       	sbrs	r25, 3
    5154:	81 91       	ld	r24, Z+
    5156:	1f 01       	movw	r2, r30
    5158:	85 32       	cpi	r24, 0x25	; 37
    515a:	31 f4       	brne	.+12     	; 0x5168 <vfprintf+0x82>
    515c:	b7 01       	movw	r22, r14
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	01 d7       	rcall	.+3586   	; 0x5f64 <fputc>
    5162:	56 01       	movw	r10, r12
    5164:	65 01       	movw	r12, r10
    5166:	e6 cf       	rjmp	.-52     	; 0x5134 <vfprintf+0x4e>
    5168:	10 e0       	ldi	r17, 0x00	; 0
    516a:	51 2c       	mov	r5, r1
    516c:	91 2c       	mov	r9, r1
    516e:	ff e1       	ldi	r31, 0x1F	; 31
    5170:	f9 15       	cp	r31, r9
    5172:	d8 f0       	brcs	.+54     	; 0x51aa <vfprintf+0xc4>
    5174:	8b 32       	cpi	r24, 0x2B	; 43
    5176:	79 f0       	breq	.+30     	; 0x5196 <vfprintf+0xb0>
    5178:	38 f4       	brcc	.+14     	; 0x5188 <vfprintf+0xa2>
    517a:	80 32       	cpi	r24, 0x20	; 32
    517c:	79 f0       	breq	.+30     	; 0x519c <vfprintf+0xb6>
    517e:	83 32       	cpi	r24, 0x23	; 35
    5180:	a1 f4       	brne	.+40     	; 0x51aa <vfprintf+0xc4>
    5182:	f9 2d       	mov	r31, r9
    5184:	f0 61       	ori	r31, 0x10	; 16
    5186:	2e c0       	rjmp	.+92     	; 0x51e4 <vfprintf+0xfe>
    5188:	8d 32       	cpi	r24, 0x2D	; 45
    518a:	61 f0       	breq	.+24     	; 0x51a4 <vfprintf+0xbe>
    518c:	80 33       	cpi	r24, 0x30	; 48
    518e:	69 f4       	brne	.+26     	; 0x51aa <vfprintf+0xc4>
    5190:	29 2d       	mov	r18, r9
    5192:	21 60       	ori	r18, 0x01	; 1
    5194:	2d c0       	rjmp	.+90     	; 0x51f0 <vfprintf+0x10a>
    5196:	39 2d       	mov	r19, r9
    5198:	32 60       	ori	r19, 0x02	; 2
    519a:	93 2e       	mov	r9, r19
    519c:	89 2d       	mov	r24, r9
    519e:	84 60       	ori	r24, 0x04	; 4
    51a0:	98 2e       	mov	r9, r24
    51a2:	2a c0       	rjmp	.+84     	; 0x51f8 <vfprintf+0x112>
    51a4:	e9 2d       	mov	r30, r9
    51a6:	e8 60       	ori	r30, 0x08	; 8
    51a8:	15 c0       	rjmp	.+42     	; 0x51d4 <vfprintf+0xee>
    51aa:	97 fc       	sbrc	r9, 7
    51ac:	2d c0       	rjmp	.+90     	; 0x5208 <vfprintf+0x122>
    51ae:	20 ed       	ldi	r18, 0xD0	; 208
    51b0:	28 0f       	add	r18, r24
    51b2:	2a 30       	cpi	r18, 0x0A	; 10
    51b4:	88 f4       	brcc	.+34     	; 0x51d8 <vfprintf+0xf2>
    51b6:	96 fe       	sbrs	r9, 6
    51b8:	06 c0       	rjmp	.+12     	; 0x51c6 <vfprintf+0xe0>
    51ba:	3a e0       	ldi	r19, 0x0A	; 10
    51bc:	13 9f       	mul	r17, r19
    51be:	20 0d       	add	r18, r0
    51c0:	11 24       	eor	r1, r1
    51c2:	12 2f       	mov	r17, r18
    51c4:	19 c0       	rjmp	.+50     	; 0x51f8 <vfprintf+0x112>
    51c6:	8a e0       	ldi	r24, 0x0A	; 10
    51c8:	58 9e       	mul	r5, r24
    51ca:	20 0d       	add	r18, r0
    51cc:	11 24       	eor	r1, r1
    51ce:	52 2e       	mov	r5, r18
    51d0:	e9 2d       	mov	r30, r9
    51d2:	e0 62       	ori	r30, 0x20	; 32
    51d4:	9e 2e       	mov	r9, r30
    51d6:	10 c0       	rjmp	.+32     	; 0x51f8 <vfprintf+0x112>
    51d8:	8e 32       	cpi	r24, 0x2E	; 46
    51da:	31 f4       	brne	.+12     	; 0x51e8 <vfprintf+0x102>
    51dc:	96 fc       	sbrc	r9, 6
    51de:	cc c2       	rjmp	.+1432   	; 0x5778 <vfprintf+0x692>
    51e0:	f9 2d       	mov	r31, r9
    51e2:	f0 64       	ori	r31, 0x40	; 64
    51e4:	9f 2e       	mov	r9, r31
    51e6:	08 c0       	rjmp	.+16     	; 0x51f8 <vfprintf+0x112>
    51e8:	8c 36       	cpi	r24, 0x6C	; 108
    51ea:	21 f4       	brne	.+8      	; 0x51f4 <vfprintf+0x10e>
    51ec:	29 2d       	mov	r18, r9
    51ee:	20 68       	ori	r18, 0x80	; 128
    51f0:	92 2e       	mov	r9, r18
    51f2:	02 c0       	rjmp	.+4      	; 0x51f8 <vfprintf+0x112>
    51f4:	88 36       	cpi	r24, 0x68	; 104
    51f6:	41 f4       	brne	.+16     	; 0x5208 <vfprintf+0x122>
    51f8:	f1 01       	movw	r30, r2
    51fa:	93 fd       	sbrc	r25, 3
    51fc:	85 91       	lpm	r24, Z+
    51fe:	93 ff       	sbrs	r25, 3
    5200:	81 91       	ld	r24, Z+
    5202:	1f 01       	movw	r2, r30
    5204:	81 11       	cpse	r24, r1
    5206:	b3 cf       	rjmp	.-154    	; 0x516e <vfprintf+0x88>
    5208:	9b eb       	ldi	r25, 0xBB	; 187
    520a:	98 0f       	add	r25, r24
    520c:	93 30       	cpi	r25, 0x03	; 3
    520e:	20 f4       	brcc	.+8      	; 0x5218 <vfprintf+0x132>
    5210:	99 2d       	mov	r25, r9
    5212:	90 61       	ori	r25, 0x10	; 16
    5214:	80 5e       	subi	r24, 0xE0	; 224
    5216:	07 c0       	rjmp	.+14     	; 0x5226 <vfprintf+0x140>
    5218:	9b e9       	ldi	r25, 0x9B	; 155
    521a:	98 0f       	add	r25, r24
    521c:	93 30       	cpi	r25, 0x03	; 3
    521e:	08 f0       	brcs	.+2      	; 0x5222 <vfprintf+0x13c>
    5220:	59 c1       	rjmp	.+690    	; 0x54d4 <vfprintf+0x3ee>
    5222:	99 2d       	mov	r25, r9
    5224:	9f 7e       	andi	r25, 0xEF	; 239
    5226:	96 ff       	sbrs	r25, 6
    5228:	16 e0       	ldi	r17, 0x06	; 6
    522a:	9f 73       	andi	r25, 0x3F	; 63
    522c:	99 2e       	mov	r9, r25
    522e:	85 36       	cpi	r24, 0x65	; 101
    5230:	19 f4       	brne	.+6      	; 0x5238 <vfprintf+0x152>
    5232:	90 64       	ori	r25, 0x40	; 64
    5234:	99 2e       	mov	r9, r25
    5236:	08 c0       	rjmp	.+16     	; 0x5248 <vfprintf+0x162>
    5238:	86 36       	cpi	r24, 0x66	; 102
    523a:	21 f4       	brne	.+8      	; 0x5244 <vfprintf+0x15e>
    523c:	39 2f       	mov	r19, r25
    523e:	30 68       	ori	r19, 0x80	; 128
    5240:	93 2e       	mov	r9, r19
    5242:	02 c0       	rjmp	.+4      	; 0x5248 <vfprintf+0x162>
    5244:	11 11       	cpse	r17, r1
    5246:	11 50       	subi	r17, 0x01	; 1
    5248:	97 fe       	sbrs	r9, 7
    524a:	07 c0       	rjmp	.+14     	; 0x525a <vfprintf+0x174>
    524c:	1c 33       	cpi	r17, 0x3C	; 60
    524e:	50 f4       	brcc	.+20     	; 0x5264 <vfprintf+0x17e>
    5250:	44 24       	eor	r4, r4
    5252:	43 94       	inc	r4
    5254:	41 0e       	add	r4, r17
    5256:	27 e0       	ldi	r18, 0x07	; 7
    5258:	0b c0       	rjmp	.+22     	; 0x5270 <vfprintf+0x18a>
    525a:	18 30       	cpi	r17, 0x08	; 8
    525c:	38 f0       	brcs	.+14     	; 0x526c <vfprintf+0x186>
    525e:	27 e0       	ldi	r18, 0x07	; 7
    5260:	17 e0       	ldi	r17, 0x07	; 7
    5262:	05 c0       	rjmp	.+10     	; 0x526e <vfprintf+0x188>
    5264:	27 e0       	ldi	r18, 0x07	; 7
    5266:	9c e3       	ldi	r25, 0x3C	; 60
    5268:	49 2e       	mov	r4, r25
    526a:	02 c0       	rjmp	.+4      	; 0x5270 <vfprintf+0x18a>
    526c:	21 2f       	mov	r18, r17
    526e:	41 2c       	mov	r4, r1
    5270:	56 01       	movw	r10, r12
    5272:	84 e0       	ldi	r24, 0x04	; 4
    5274:	a8 0e       	add	r10, r24
    5276:	b1 1c       	adc	r11, r1
    5278:	f6 01       	movw	r30, r12
    527a:	60 81       	ld	r22, Z
    527c:	71 81       	ldd	r23, Z+1	; 0x01
    527e:	82 81       	ldd	r24, Z+2	; 0x02
    5280:	93 81       	ldd	r25, Z+3	; 0x03
    5282:	04 2d       	mov	r16, r4
    5284:	a3 01       	movw	r20, r6
    5286:	21 d5       	rcall	.+2626   	; 0x5cca <__ftoa_engine>
    5288:	6c 01       	movw	r12, r24
    528a:	f9 81       	ldd	r31, Y+1	; 0x01
    528c:	fc 87       	std	Y+12, r31	; 0x0c
    528e:	f0 ff       	sbrs	r31, 0
    5290:	02 c0       	rjmp	.+4      	; 0x5296 <vfprintf+0x1b0>
    5292:	f3 ff       	sbrs	r31, 3
    5294:	06 c0       	rjmp	.+12     	; 0x52a2 <vfprintf+0x1bc>
    5296:	91 fc       	sbrc	r9, 1
    5298:	06 c0       	rjmp	.+12     	; 0x52a6 <vfprintf+0x1c0>
    529a:	92 fe       	sbrs	r9, 2
    529c:	06 c0       	rjmp	.+12     	; 0x52aa <vfprintf+0x1c4>
    529e:	00 e2       	ldi	r16, 0x20	; 32
    52a0:	05 c0       	rjmp	.+10     	; 0x52ac <vfprintf+0x1c6>
    52a2:	0d e2       	ldi	r16, 0x2D	; 45
    52a4:	03 c0       	rjmp	.+6      	; 0x52ac <vfprintf+0x1c6>
    52a6:	0b e2       	ldi	r16, 0x2B	; 43
    52a8:	01 c0       	rjmp	.+2      	; 0x52ac <vfprintf+0x1c6>
    52aa:	00 e0       	ldi	r16, 0x00	; 0
    52ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    52ae:	8c 70       	andi	r24, 0x0C	; 12
    52b0:	19 f0       	breq	.+6      	; 0x52b8 <vfprintf+0x1d2>
    52b2:	01 11       	cpse	r16, r1
    52b4:	43 c2       	rjmp	.+1158   	; 0x573c <vfprintf+0x656>
    52b6:	80 c2       	rjmp	.+1280   	; 0x57b8 <vfprintf+0x6d2>
    52b8:	97 fe       	sbrs	r9, 7
    52ba:	10 c0       	rjmp	.+32     	; 0x52dc <vfprintf+0x1f6>
    52bc:	4c 0c       	add	r4, r12
    52be:	fc 85       	ldd	r31, Y+12	; 0x0c
    52c0:	f4 ff       	sbrs	r31, 4
    52c2:	04 c0       	rjmp	.+8      	; 0x52cc <vfprintf+0x1e6>
    52c4:	8a 81       	ldd	r24, Y+2	; 0x02
    52c6:	81 33       	cpi	r24, 0x31	; 49
    52c8:	09 f4       	brne	.+2      	; 0x52cc <vfprintf+0x1e6>
    52ca:	4a 94       	dec	r4
    52cc:	14 14       	cp	r1, r4
    52ce:	74 f5       	brge	.+92     	; 0x532c <vfprintf+0x246>
    52d0:	28 e0       	ldi	r18, 0x08	; 8
    52d2:	24 15       	cp	r18, r4
    52d4:	78 f5       	brcc	.+94     	; 0x5334 <vfprintf+0x24e>
    52d6:	88 e0       	ldi	r24, 0x08	; 8
    52d8:	48 2e       	mov	r4, r24
    52da:	2c c0       	rjmp	.+88     	; 0x5334 <vfprintf+0x24e>
    52dc:	96 fc       	sbrc	r9, 6
    52de:	2a c0       	rjmp	.+84     	; 0x5334 <vfprintf+0x24e>
    52e0:	81 2f       	mov	r24, r17
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	8c 15       	cp	r24, r12
    52e6:	9d 05       	cpc	r25, r13
    52e8:	9c f0       	brlt	.+38     	; 0x5310 <vfprintf+0x22a>
    52ea:	3c ef       	ldi	r19, 0xFC	; 252
    52ec:	c3 16       	cp	r12, r19
    52ee:	3f ef       	ldi	r19, 0xFF	; 255
    52f0:	d3 06       	cpc	r13, r19
    52f2:	74 f0       	brlt	.+28     	; 0x5310 <vfprintf+0x22a>
    52f4:	89 2d       	mov	r24, r9
    52f6:	80 68       	ori	r24, 0x80	; 128
    52f8:	98 2e       	mov	r9, r24
    52fa:	0a c0       	rjmp	.+20     	; 0x5310 <vfprintf+0x22a>
    52fc:	e2 e0       	ldi	r30, 0x02	; 2
    52fe:	f0 e0       	ldi	r31, 0x00	; 0
    5300:	ec 0f       	add	r30, r28
    5302:	fd 1f       	adc	r31, r29
    5304:	e1 0f       	add	r30, r17
    5306:	f1 1d       	adc	r31, r1
    5308:	80 81       	ld	r24, Z
    530a:	80 33       	cpi	r24, 0x30	; 48
    530c:	19 f4       	brne	.+6      	; 0x5314 <vfprintf+0x22e>
    530e:	11 50       	subi	r17, 0x01	; 1
    5310:	11 11       	cpse	r17, r1
    5312:	f4 cf       	rjmp	.-24     	; 0x52fc <vfprintf+0x216>
    5314:	97 fe       	sbrs	r9, 7
    5316:	0e c0       	rjmp	.+28     	; 0x5334 <vfprintf+0x24e>
    5318:	44 24       	eor	r4, r4
    531a:	43 94       	inc	r4
    531c:	41 0e       	add	r4, r17
    531e:	81 2f       	mov	r24, r17
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	c8 16       	cp	r12, r24
    5324:	d9 06       	cpc	r13, r25
    5326:	2c f4       	brge	.+10     	; 0x5332 <vfprintf+0x24c>
    5328:	1c 19       	sub	r17, r12
    532a:	04 c0       	rjmp	.+8      	; 0x5334 <vfprintf+0x24e>
    532c:	44 24       	eor	r4, r4
    532e:	43 94       	inc	r4
    5330:	01 c0       	rjmp	.+2      	; 0x5334 <vfprintf+0x24e>
    5332:	10 e0       	ldi	r17, 0x00	; 0
    5334:	97 fe       	sbrs	r9, 7
    5336:	06 c0       	rjmp	.+12     	; 0x5344 <vfprintf+0x25e>
    5338:	1c 14       	cp	r1, r12
    533a:	1d 04       	cpc	r1, r13
    533c:	34 f4       	brge	.+12     	; 0x534a <vfprintf+0x264>
    533e:	c6 01       	movw	r24, r12
    5340:	01 96       	adiw	r24, 0x01	; 1
    5342:	05 c0       	rjmp	.+10     	; 0x534e <vfprintf+0x268>
    5344:	85 e0       	ldi	r24, 0x05	; 5
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	02 c0       	rjmp	.+4      	; 0x534e <vfprintf+0x268>
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	01 11       	cpse	r16, r1
    5350:	01 96       	adiw	r24, 0x01	; 1
    5352:	11 23       	and	r17, r17
    5354:	31 f0       	breq	.+12     	; 0x5362 <vfprintf+0x27c>
    5356:	21 2f       	mov	r18, r17
    5358:	30 e0       	ldi	r19, 0x00	; 0
    535a:	2f 5f       	subi	r18, 0xFF	; 255
    535c:	3f 4f       	sbci	r19, 0xFF	; 255
    535e:	82 0f       	add	r24, r18
    5360:	93 1f       	adc	r25, r19
    5362:	25 2d       	mov	r18, r5
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	82 17       	cp	r24, r18
    5368:	93 07       	cpc	r25, r19
    536a:	14 f4       	brge	.+4      	; 0x5370 <vfprintf+0x28a>
    536c:	58 1a       	sub	r5, r24
    536e:	01 c0       	rjmp	.+2      	; 0x5372 <vfprintf+0x28c>
    5370:	51 2c       	mov	r5, r1
    5372:	89 2d       	mov	r24, r9
    5374:	89 70       	andi	r24, 0x09	; 9
    5376:	41 f4       	brne	.+16     	; 0x5388 <vfprintf+0x2a2>
    5378:	55 20       	and	r5, r5
    537a:	31 f0       	breq	.+12     	; 0x5388 <vfprintf+0x2a2>
    537c:	b7 01       	movw	r22, r14
    537e:	80 e2       	ldi	r24, 0x20	; 32
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	f0 d5       	rcall	.+3040   	; 0x5f64 <fputc>
    5384:	5a 94       	dec	r5
    5386:	f8 cf       	rjmp	.-16     	; 0x5378 <vfprintf+0x292>
    5388:	00 23       	and	r16, r16
    538a:	21 f0       	breq	.+8      	; 0x5394 <vfprintf+0x2ae>
    538c:	b7 01       	movw	r22, r14
    538e:	80 2f       	mov	r24, r16
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	e8 d5       	rcall	.+3024   	; 0x5f64 <fputc>
    5394:	93 fc       	sbrc	r9, 3
    5396:	08 c0       	rjmp	.+16     	; 0x53a8 <vfprintf+0x2c2>
    5398:	55 20       	and	r5, r5
    539a:	31 f0       	breq	.+12     	; 0x53a8 <vfprintf+0x2c2>
    539c:	b7 01       	movw	r22, r14
    539e:	80 e3       	ldi	r24, 0x30	; 48
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	e0 d5       	rcall	.+3008   	; 0x5f64 <fputc>
    53a4:	5a 94       	dec	r5
    53a6:	f8 cf       	rjmp	.-16     	; 0x5398 <vfprintf+0x2b2>
    53a8:	97 fe       	sbrs	r9, 7
    53aa:	4a c0       	rjmp	.+148    	; 0x5440 <vfprintf+0x35a>
    53ac:	46 01       	movw	r8, r12
    53ae:	d7 fe       	sbrs	r13, 7
    53b0:	02 c0       	rjmp	.+4      	; 0x53b6 <vfprintf+0x2d0>
    53b2:	81 2c       	mov	r8, r1
    53b4:	91 2c       	mov	r9, r1
    53b6:	c6 01       	movw	r24, r12
    53b8:	88 19       	sub	r24, r8
    53ba:	99 09       	sbc	r25, r9
    53bc:	f3 01       	movw	r30, r6
    53be:	e8 0f       	add	r30, r24
    53c0:	f9 1f       	adc	r31, r25
    53c2:	fe 87       	std	Y+14, r31	; 0x0e
    53c4:	ed 87       	std	Y+13, r30	; 0x0d
    53c6:	96 01       	movw	r18, r12
    53c8:	24 19       	sub	r18, r4
    53ca:	31 09       	sbc	r19, r1
    53cc:	38 8b       	std	Y+16, r19	; 0x10
    53ce:	2f 87       	std	Y+15, r18	; 0x0f
    53d0:	01 2f       	mov	r16, r17
    53d2:	10 e0       	ldi	r17, 0x00	; 0
    53d4:	11 95       	neg	r17
    53d6:	01 95       	neg	r16
    53d8:	11 09       	sbc	r17, r1
    53da:	3f ef       	ldi	r19, 0xFF	; 255
    53dc:	83 16       	cp	r8, r19
    53de:	93 06       	cpc	r9, r19
    53e0:	21 f4       	brne	.+8      	; 0x53ea <vfprintf+0x304>
    53e2:	b7 01       	movw	r22, r14
    53e4:	8e e2       	ldi	r24, 0x2E	; 46
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	bd d5       	rcall	.+2938   	; 0x5f64 <fputc>
    53ea:	c8 14       	cp	r12, r8
    53ec:	d9 04       	cpc	r13, r9
    53ee:	4c f0       	brlt	.+18     	; 0x5402 <vfprintf+0x31c>
    53f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    53f2:	98 89       	ldd	r25, Y+16	; 0x10
    53f4:	88 15       	cp	r24, r8
    53f6:	99 05       	cpc	r25, r9
    53f8:	24 f4       	brge	.+8      	; 0x5402 <vfprintf+0x31c>
    53fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    53fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    53fe:	81 81       	ldd	r24, Z+1	; 0x01
    5400:	01 c0       	rjmp	.+2      	; 0x5404 <vfprintf+0x31e>
    5402:	80 e3       	ldi	r24, 0x30	; 48
    5404:	f1 e0       	ldi	r31, 0x01	; 1
    5406:	8f 1a       	sub	r8, r31
    5408:	91 08       	sbc	r9, r1
    540a:	2d 85       	ldd	r18, Y+13	; 0x0d
    540c:	3e 85       	ldd	r19, Y+14	; 0x0e
    540e:	2f 5f       	subi	r18, 0xFF	; 255
    5410:	3f 4f       	sbci	r19, 0xFF	; 255
    5412:	3e 87       	std	Y+14, r19	; 0x0e
    5414:	2d 87       	std	Y+13, r18	; 0x0d
    5416:	80 16       	cp	r8, r16
    5418:	91 06       	cpc	r9, r17
    541a:	24 f0       	brlt	.+8      	; 0x5424 <vfprintf+0x33e>
    541c:	b7 01       	movw	r22, r14
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	a1 d5       	rcall	.+2882   	; 0x5f64 <fputc>
    5422:	db cf       	rjmp	.-74     	; 0x53da <vfprintf+0x2f4>
    5424:	c8 14       	cp	r12, r8
    5426:	d9 04       	cpc	r13, r9
    5428:	41 f4       	brne	.+16     	; 0x543a <vfprintf+0x354>
    542a:	9a 81       	ldd	r25, Y+2	; 0x02
    542c:	96 33       	cpi	r25, 0x36	; 54
    542e:	20 f4       	brcc	.+8      	; 0x5438 <vfprintf+0x352>
    5430:	95 33       	cpi	r25, 0x35	; 53
    5432:	19 f4       	brne	.+6      	; 0x543a <vfprintf+0x354>
    5434:	3c 85       	ldd	r19, Y+12	; 0x0c
    5436:	34 ff       	sbrs	r19, 4
    5438:	81 e3       	ldi	r24, 0x31	; 49
    543a:	b7 01       	movw	r22, r14
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	48 c0       	rjmp	.+144    	; 0x54d0 <vfprintf+0x3ea>
    5440:	8a 81       	ldd	r24, Y+2	; 0x02
    5442:	81 33       	cpi	r24, 0x31	; 49
    5444:	19 f0       	breq	.+6      	; 0x544c <vfprintf+0x366>
    5446:	9c 85       	ldd	r25, Y+12	; 0x0c
    5448:	9f 7e       	andi	r25, 0xEF	; 239
    544a:	9c 87       	std	Y+12, r25	; 0x0c
    544c:	b7 01       	movw	r22, r14
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	89 d5       	rcall	.+2834   	; 0x5f64 <fputc>
    5452:	11 11       	cpse	r17, r1
    5454:	05 c0       	rjmp	.+10     	; 0x5460 <vfprintf+0x37a>
    5456:	94 fc       	sbrc	r9, 4
    5458:	16 c0       	rjmp	.+44     	; 0x5486 <vfprintf+0x3a0>
    545a:	85 e6       	ldi	r24, 0x65	; 101
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	15 c0       	rjmp	.+42     	; 0x548a <vfprintf+0x3a4>
    5460:	b7 01       	movw	r22, r14
    5462:	8e e2       	ldi	r24, 0x2E	; 46
    5464:	90 e0       	ldi	r25, 0x00	; 0
    5466:	7e d5       	rcall	.+2812   	; 0x5f64 <fputc>
    5468:	1e 5f       	subi	r17, 0xFE	; 254
    546a:	82 e0       	ldi	r24, 0x02	; 2
    546c:	01 e0       	ldi	r16, 0x01	; 1
    546e:	08 0f       	add	r16, r24
    5470:	f3 01       	movw	r30, r6
    5472:	e8 0f       	add	r30, r24
    5474:	f1 1d       	adc	r31, r1
    5476:	80 81       	ld	r24, Z
    5478:	b7 01       	movw	r22, r14
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	73 d5       	rcall	.+2790   	; 0x5f64 <fputc>
    547e:	80 2f       	mov	r24, r16
    5480:	01 13       	cpse	r16, r17
    5482:	f4 cf       	rjmp	.-24     	; 0x546c <vfprintf+0x386>
    5484:	e8 cf       	rjmp	.-48     	; 0x5456 <vfprintf+0x370>
    5486:	85 e4       	ldi	r24, 0x45	; 69
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	b7 01       	movw	r22, r14
    548c:	6b d5       	rcall	.+2774   	; 0x5f64 <fputc>
    548e:	d7 fc       	sbrc	r13, 7
    5490:	06 c0       	rjmp	.+12     	; 0x549e <vfprintf+0x3b8>
    5492:	c1 14       	cp	r12, r1
    5494:	d1 04       	cpc	r13, r1
    5496:	41 f4       	brne	.+16     	; 0x54a8 <vfprintf+0x3c2>
    5498:	ec 85       	ldd	r30, Y+12	; 0x0c
    549a:	e4 ff       	sbrs	r30, 4
    549c:	05 c0       	rjmp	.+10     	; 0x54a8 <vfprintf+0x3c2>
    549e:	d1 94       	neg	r13
    54a0:	c1 94       	neg	r12
    54a2:	d1 08       	sbc	r13, r1
    54a4:	8d e2       	ldi	r24, 0x2D	; 45
    54a6:	01 c0       	rjmp	.+2      	; 0x54aa <vfprintf+0x3c4>
    54a8:	8b e2       	ldi	r24, 0x2B	; 43
    54aa:	b7 01       	movw	r22, r14
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	5a d5       	rcall	.+2740   	; 0x5f64 <fputc>
    54b0:	80 e3       	ldi	r24, 0x30	; 48
    54b2:	2a e0       	ldi	r18, 0x0A	; 10
    54b4:	c2 16       	cp	r12, r18
    54b6:	d1 04       	cpc	r13, r1
    54b8:	2c f0       	brlt	.+10     	; 0x54c4 <vfprintf+0x3de>
    54ba:	8f 5f       	subi	r24, 0xFF	; 255
    54bc:	fa e0       	ldi	r31, 0x0A	; 10
    54be:	cf 1a       	sub	r12, r31
    54c0:	d1 08       	sbc	r13, r1
    54c2:	f7 cf       	rjmp	.-18     	; 0x54b2 <vfprintf+0x3cc>
    54c4:	b7 01       	movw	r22, r14
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	4d d5       	rcall	.+2714   	; 0x5f64 <fputc>
    54ca:	b7 01       	movw	r22, r14
    54cc:	c6 01       	movw	r24, r12
    54ce:	c0 96       	adiw	r24, 0x30	; 48
    54d0:	49 d5       	rcall	.+2706   	; 0x5f64 <fputc>
    54d2:	49 c1       	rjmp	.+658    	; 0x5766 <vfprintf+0x680>
    54d4:	83 36       	cpi	r24, 0x63	; 99
    54d6:	31 f0       	breq	.+12     	; 0x54e4 <vfprintf+0x3fe>
    54d8:	83 37       	cpi	r24, 0x73	; 115
    54da:	79 f0       	breq	.+30     	; 0x54fa <vfprintf+0x414>
    54dc:	83 35       	cpi	r24, 0x53	; 83
    54de:	09 f0       	breq	.+2      	; 0x54e2 <vfprintf+0x3fc>
    54e0:	52 c0       	rjmp	.+164    	; 0x5586 <vfprintf+0x4a0>
    54e2:	1f c0       	rjmp	.+62     	; 0x5522 <vfprintf+0x43c>
    54e4:	56 01       	movw	r10, r12
    54e6:	32 e0       	ldi	r19, 0x02	; 2
    54e8:	a3 0e       	add	r10, r19
    54ea:	b1 1c       	adc	r11, r1
    54ec:	f6 01       	movw	r30, r12
    54ee:	80 81       	ld	r24, Z
    54f0:	89 83       	std	Y+1, r24	; 0x01
    54f2:	01 e0       	ldi	r16, 0x01	; 1
    54f4:	10 e0       	ldi	r17, 0x00	; 0
    54f6:	63 01       	movw	r12, r6
    54f8:	11 c0       	rjmp	.+34     	; 0x551c <vfprintf+0x436>
    54fa:	56 01       	movw	r10, r12
    54fc:	f2 e0       	ldi	r31, 0x02	; 2
    54fe:	af 0e       	add	r10, r31
    5500:	b1 1c       	adc	r11, r1
    5502:	f6 01       	movw	r30, r12
    5504:	c0 80       	ld	r12, Z
    5506:	d1 80       	ldd	r13, Z+1	; 0x01
    5508:	96 fe       	sbrs	r9, 6
    550a:	03 c0       	rjmp	.+6      	; 0x5512 <vfprintf+0x42c>
    550c:	61 2f       	mov	r22, r17
    550e:	70 e0       	ldi	r23, 0x00	; 0
    5510:	02 c0       	rjmp	.+4      	; 0x5516 <vfprintf+0x430>
    5512:	6f ef       	ldi	r22, 0xFF	; 255
    5514:	7f ef       	ldi	r23, 0xFF	; 255
    5516:	c6 01       	movw	r24, r12
    5518:	1a d5       	rcall	.+2612   	; 0x5f4e <strnlen>
    551a:	8c 01       	movw	r16, r24
    551c:	f9 2d       	mov	r31, r9
    551e:	ff 77       	andi	r31, 0x7F	; 127
    5520:	13 c0       	rjmp	.+38     	; 0x5548 <vfprintf+0x462>
    5522:	56 01       	movw	r10, r12
    5524:	22 e0       	ldi	r18, 0x02	; 2
    5526:	a2 0e       	add	r10, r18
    5528:	b1 1c       	adc	r11, r1
    552a:	f6 01       	movw	r30, r12
    552c:	c0 80       	ld	r12, Z
    552e:	d1 80       	ldd	r13, Z+1	; 0x01
    5530:	96 fe       	sbrs	r9, 6
    5532:	03 c0       	rjmp	.+6      	; 0x553a <vfprintf+0x454>
    5534:	61 2f       	mov	r22, r17
    5536:	70 e0       	ldi	r23, 0x00	; 0
    5538:	02 c0       	rjmp	.+4      	; 0x553e <vfprintf+0x458>
    553a:	6f ef       	ldi	r22, 0xFF	; 255
    553c:	7f ef       	ldi	r23, 0xFF	; 255
    553e:	c6 01       	movw	r24, r12
    5540:	9c d4       	rcall	.+2360   	; 0x5e7a <strnlen_P>
    5542:	8c 01       	movw	r16, r24
    5544:	f9 2d       	mov	r31, r9
    5546:	f0 68       	ori	r31, 0x80	; 128
    5548:	9f 2e       	mov	r9, r31
    554a:	f3 fd       	sbrc	r31, 3
    554c:	18 c0       	rjmp	.+48     	; 0x557e <vfprintf+0x498>
    554e:	85 2d       	mov	r24, r5
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	08 17       	cp	r16, r24
    5554:	19 07       	cpc	r17, r25
    5556:	98 f4       	brcc	.+38     	; 0x557e <vfprintf+0x498>
    5558:	b7 01       	movw	r22, r14
    555a:	80 e2       	ldi	r24, 0x20	; 32
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	02 d5       	rcall	.+2564   	; 0x5f64 <fputc>
    5560:	5a 94       	dec	r5
    5562:	f5 cf       	rjmp	.-22     	; 0x554e <vfprintf+0x468>
    5564:	f6 01       	movw	r30, r12
    5566:	97 fc       	sbrc	r9, 7
    5568:	85 91       	lpm	r24, Z+
    556a:	97 fe       	sbrs	r9, 7
    556c:	81 91       	ld	r24, Z+
    556e:	6f 01       	movw	r12, r30
    5570:	b7 01       	movw	r22, r14
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	f7 d4       	rcall	.+2542   	; 0x5f64 <fputc>
    5576:	51 10       	cpse	r5, r1
    5578:	5a 94       	dec	r5
    557a:	01 50       	subi	r16, 0x01	; 1
    557c:	11 09       	sbc	r17, r1
    557e:	01 15       	cp	r16, r1
    5580:	11 05       	cpc	r17, r1
    5582:	81 f7       	brne	.-32     	; 0x5564 <vfprintf+0x47e>
    5584:	f0 c0       	rjmp	.+480    	; 0x5766 <vfprintf+0x680>
    5586:	84 36       	cpi	r24, 0x64	; 100
    5588:	11 f0       	breq	.+4      	; 0x558e <vfprintf+0x4a8>
    558a:	89 36       	cpi	r24, 0x69	; 105
    558c:	59 f5       	brne	.+86     	; 0x55e4 <vfprintf+0x4fe>
    558e:	56 01       	movw	r10, r12
    5590:	97 fe       	sbrs	r9, 7
    5592:	09 c0       	rjmp	.+18     	; 0x55a6 <vfprintf+0x4c0>
    5594:	24 e0       	ldi	r18, 0x04	; 4
    5596:	a2 0e       	add	r10, r18
    5598:	b1 1c       	adc	r11, r1
    559a:	f6 01       	movw	r30, r12
    559c:	60 81       	ld	r22, Z
    559e:	71 81       	ldd	r23, Z+1	; 0x01
    55a0:	82 81       	ldd	r24, Z+2	; 0x02
    55a2:	93 81       	ldd	r25, Z+3	; 0x03
    55a4:	0a c0       	rjmp	.+20     	; 0x55ba <vfprintf+0x4d4>
    55a6:	f2 e0       	ldi	r31, 0x02	; 2
    55a8:	af 0e       	add	r10, r31
    55aa:	b1 1c       	adc	r11, r1
    55ac:	f6 01       	movw	r30, r12
    55ae:	60 81       	ld	r22, Z
    55b0:	71 81       	ldd	r23, Z+1	; 0x01
    55b2:	07 2e       	mov	r0, r23
    55b4:	00 0c       	add	r0, r0
    55b6:	88 0b       	sbc	r24, r24
    55b8:	99 0b       	sbc	r25, r25
    55ba:	f9 2d       	mov	r31, r9
    55bc:	ff 76       	andi	r31, 0x6F	; 111
    55be:	9f 2e       	mov	r9, r31
    55c0:	97 ff       	sbrs	r25, 7
    55c2:	09 c0       	rjmp	.+18     	; 0x55d6 <vfprintf+0x4f0>
    55c4:	90 95       	com	r25
    55c6:	80 95       	com	r24
    55c8:	70 95       	com	r23
    55ca:	61 95       	neg	r22
    55cc:	7f 4f       	sbci	r23, 0xFF	; 255
    55ce:	8f 4f       	sbci	r24, 0xFF	; 255
    55d0:	9f 4f       	sbci	r25, 0xFF	; 255
    55d2:	f0 68       	ori	r31, 0x80	; 128
    55d4:	9f 2e       	mov	r9, r31
    55d6:	2a e0       	ldi	r18, 0x0A	; 10
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	a3 01       	movw	r20, r6
    55dc:	70 d5       	rcall	.+2784   	; 0x60be <__ultoa_invert>
    55de:	c8 2e       	mov	r12, r24
    55e0:	c6 18       	sub	r12, r6
    55e2:	3e c0       	rjmp	.+124    	; 0x5660 <vfprintf+0x57a>
    55e4:	09 2d       	mov	r16, r9
    55e6:	85 37       	cpi	r24, 0x75	; 117
    55e8:	21 f4       	brne	.+8      	; 0x55f2 <vfprintf+0x50c>
    55ea:	0f 7e       	andi	r16, 0xEF	; 239
    55ec:	2a e0       	ldi	r18, 0x0A	; 10
    55ee:	30 e0       	ldi	r19, 0x00	; 0
    55f0:	1d c0       	rjmp	.+58     	; 0x562c <vfprintf+0x546>
    55f2:	09 7f       	andi	r16, 0xF9	; 249
    55f4:	8f 36       	cpi	r24, 0x6F	; 111
    55f6:	91 f0       	breq	.+36     	; 0x561c <vfprintf+0x536>
    55f8:	18 f4       	brcc	.+6      	; 0x5600 <vfprintf+0x51a>
    55fa:	88 35       	cpi	r24, 0x58	; 88
    55fc:	59 f0       	breq	.+22     	; 0x5614 <vfprintf+0x52e>
    55fe:	bc c0       	rjmp	.+376    	; 0x5778 <vfprintf+0x692>
    5600:	80 37       	cpi	r24, 0x70	; 112
    5602:	19 f0       	breq	.+6      	; 0x560a <vfprintf+0x524>
    5604:	88 37       	cpi	r24, 0x78	; 120
    5606:	11 f0       	breq	.+4      	; 0x560c <vfprintf+0x526>
    5608:	b7 c0       	rjmp	.+366    	; 0x5778 <vfprintf+0x692>
    560a:	00 61       	ori	r16, 0x10	; 16
    560c:	04 ff       	sbrs	r16, 4
    560e:	09 c0       	rjmp	.+18     	; 0x5622 <vfprintf+0x53c>
    5610:	04 60       	ori	r16, 0x04	; 4
    5612:	07 c0       	rjmp	.+14     	; 0x5622 <vfprintf+0x53c>
    5614:	94 fe       	sbrs	r9, 4
    5616:	08 c0       	rjmp	.+16     	; 0x5628 <vfprintf+0x542>
    5618:	06 60       	ori	r16, 0x06	; 6
    561a:	06 c0       	rjmp	.+12     	; 0x5628 <vfprintf+0x542>
    561c:	28 e0       	ldi	r18, 0x08	; 8
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	05 c0       	rjmp	.+10     	; 0x562c <vfprintf+0x546>
    5622:	20 e1       	ldi	r18, 0x10	; 16
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	02 c0       	rjmp	.+4      	; 0x562c <vfprintf+0x546>
    5628:	20 e1       	ldi	r18, 0x10	; 16
    562a:	32 e0       	ldi	r19, 0x02	; 2
    562c:	56 01       	movw	r10, r12
    562e:	07 ff       	sbrs	r16, 7
    5630:	09 c0       	rjmp	.+18     	; 0x5644 <vfprintf+0x55e>
    5632:	84 e0       	ldi	r24, 0x04	; 4
    5634:	a8 0e       	add	r10, r24
    5636:	b1 1c       	adc	r11, r1
    5638:	f6 01       	movw	r30, r12
    563a:	60 81       	ld	r22, Z
    563c:	71 81       	ldd	r23, Z+1	; 0x01
    563e:	82 81       	ldd	r24, Z+2	; 0x02
    5640:	93 81       	ldd	r25, Z+3	; 0x03
    5642:	08 c0       	rjmp	.+16     	; 0x5654 <vfprintf+0x56e>
    5644:	f2 e0       	ldi	r31, 0x02	; 2
    5646:	af 0e       	add	r10, r31
    5648:	b1 1c       	adc	r11, r1
    564a:	f6 01       	movw	r30, r12
    564c:	60 81       	ld	r22, Z
    564e:	71 81       	ldd	r23, Z+1	; 0x01
    5650:	80 e0       	ldi	r24, 0x00	; 0
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	a3 01       	movw	r20, r6
    5656:	33 d5       	rcall	.+2662   	; 0x60be <__ultoa_invert>
    5658:	c8 2e       	mov	r12, r24
    565a:	c6 18       	sub	r12, r6
    565c:	0f 77       	andi	r16, 0x7F	; 127
    565e:	90 2e       	mov	r9, r16
    5660:	96 fe       	sbrs	r9, 6
    5662:	0b c0       	rjmp	.+22     	; 0x567a <vfprintf+0x594>
    5664:	09 2d       	mov	r16, r9
    5666:	0e 7f       	andi	r16, 0xFE	; 254
    5668:	c1 16       	cp	r12, r17
    566a:	50 f4       	brcc	.+20     	; 0x5680 <vfprintf+0x59a>
    566c:	94 fe       	sbrs	r9, 4
    566e:	0a c0       	rjmp	.+20     	; 0x5684 <vfprintf+0x59e>
    5670:	92 fc       	sbrc	r9, 2
    5672:	08 c0       	rjmp	.+16     	; 0x5684 <vfprintf+0x59e>
    5674:	09 2d       	mov	r16, r9
    5676:	0e 7e       	andi	r16, 0xEE	; 238
    5678:	05 c0       	rjmp	.+10     	; 0x5684 <vfprintf+0x59e>
    567a:	dc 2c       	mov	r13, r12
    567c:	09 2d       	mov	r16, r9
    567e:	03 c0       	rjmp	.+6      	; 0x5686 <vfprintf+0x5a0>
    5680:	dc 2c       	mov	r13, r12
    5682:	01 c0       	rjmp	.+2      	; 0x5686 <vfprintf+0x5a0>
    5684:	d1 2e       	mov	r13, r17
    5686:	04 ff       	sbrs	r16, 4
    5688:	0d c0       	rjmp	.+26     	; 0x56a4 <vfprintf+0x5be>
    568a:	fe 01       	movw	r30, r28
    568c:	ec 0d       	add	r30, r12
    568e:	f1 1d       	adc	r31, r1
    5690:	80 81       	ld	r24, Z
    5692:	80 33       	cpi	r24, 0x30	; 48
    5694:	11 f4       	brne	.+4      	; 0x569a <vfprintf+0x5b4>
    5696:	09 7e       	andi	r16, 0xE9	; 233
    5698:	09 c0       	rjmp	.+18     	; 0x56ac <vfprintf+0x5c6>
    569a:	02 ff       	sbrs	r16, 2
    569c:	06 c0       	rjmp	.+12     	; 0x56aa <vfprintf+0x5c4>
    569e:	d3 94       	inc	r13
    56a0:	d3 94       	inc	r13
    56a2:	04 c0       	rjmp	.+8      	; 0x56ac <vfprintf+0x5c6>
    56a4:	80 2f       	mov	r24, r16
    56a6:	86 78       	andi	r24, 0x86	; 134
    56a8:	09 f0       	breq	.+2      	; 0x56ac <vfprintf+0x5c6>
    56aa:	d3 94       	inc	r13
    56ac:	03 fd       	sbrc	r16, 3
    56ae:	10 c0       	rjmp	.+32     	; 0x56d0 <vfprintf+0x5ea>
    56b0:	00 ff       	sbrs	r16, 0
    56b2:	06 c0       	rjmp	.+12     	; 0x56c0 <vfprintf+0x5da>
    56b4:	1c 2d       	mov	r17, r12
    56b6:	d5 14       	cp	r13, r5
    56b8:	78 f4       	brcc	.+30     	; 0x56d8 <vfprintf+0x5f2>
    56ba:	15 0d       	add	r17, r5
    56bc:	1d 19       	sub	r17, r13
    56be:	0c c0       	rjmp	.+24     	; 0x56d8 <vfprintf+0x5f2>
    56c0:	d5 14       	cp	r13, r5
    56c2:	50 f4       	brcc	.+20     	; 0x56d8 <vfprintf+0x5f2>
    56c4:	b7 01       	movw	r22, r14
    56c6:	80 e2       	ldi	r24, 0x20	; 32
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	4c d4       	rcall	.+2200   	; 0x5f64 <fputc>
    56cc:	d3 94       	inc	r13
    56ce:	f8 cf       	rjmp	.-16     	; 0x56c0 <vfprintf+0x5da>
    56d0:	d5 14       	cp	r13, r5
    56d2:	10 f4       	brcc	.+4      	; 0x56d8 <vfprintf+0x5f2>
    56d4:	5d 18       	sub	r5, r13
    56d6:	01 c0       	rjmp	.+2      	; 0x56da <vfprintf+0x5f4>
    56d8:	51 2c       	mov	r5, r1
    56da:	04 ff       	sbrs	r16, 4
    56dc:	0f c0       	rjmp	.+30     	; 0x56fc <vfprintf+0x616>
    56de:	b7 01       	movw	r22, r14
    56e0:	80 e3       	ldi	r24, 0x30	; 48
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	3f d4       	rcall	.+2174   	; 0x5f64 <fputc>
    56e6:	02 ff       	sbrs	r16, 2
    56e8:	16 c0       	rjmp	.+44     	; 0x5716 <vfprintf+0x630>
    56ea:	01 fd       	sbrc	r16, 1
    56ec:	03 c0       	rjmp	.+6      	; 0x56f4 <vfprintf+0x60e>
    56ee:	88 e7       	ldi	r24, 0x78	; 120
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	02 c0       	rjmp	.+4      	; 0x56f8 <vfprintf+0x612>
    56f4:	88 e5       	ldi	r24, 0x58	; 88
    56f6:	90 e0       	ldi	r25, 0x00	; 0
    56f8:	b7 01       	movw	r22, r14
    56fa:	0c c0       	rjmp	.+24     	; 0x5714 <vfprintf+0x62e>
    56fc:	80 2f       	mov	r24, r16
    56fe:	86 78       	andi	r24, 0x86	; 134
    5700:	51 f0       	breq	.+20     	; 0x5716 <vfprintf+0x630>
    5702:	01 ff       	sbrs	r16, 1
    5704:	02 c0       	rjmp	.+4      	; 0x570a <vfprintf+0x624>
    5706:	8b e2       	ldi	r24, 0x2B	; 43
    5708:	01 c0       	rjmp	.+2      	; 0x570c <vfprintf+0x626>
    570a:	80 e2       	ldi	r24, 0x20	; 32
    570c:	07 fd       	sbrc	r16, 7
    570e:	8d e2       	ldi	r24, 0x2D	; 45
    5710:	b7 01       	movw	r22, r14
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	27 d4       	rcall	.+2126   	; 0x5f64 <fputc>
    5716:	c1 16       	cp	r12, r17
    5718:	30 f4       	brcc	.+12     	; 0x5726 <vfprintf+0x640>
    571a:	b7 01       	movw	r22, r14
    571c:	80 e3       	ldi	r24, 0x30	; 48
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	21 d4       	rcall	.+2114   	; 0x5f64 <fputc>
    5722:	11 50       	subi	r17, 0x01	; 1
    5724:	f8 cf       	rjmp	.-16     	; 0x5716 <vfprintf+0x630>
    5726:	ca 94       	dec	r12
    5728:	f3 01       	movw	r30, r6
    572a:	ec 0d       	add	r30, r12
    572c:	f1 1d       	adc	r31, r1
    572e:	80 81       	ld	r24, Z
    5730:	b7 01       	movw	r22, r14
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	17 d4       	rcall	.+2094   	; 0x5f64 <fputc>
    5736:	c1 10       	cpse	r12, r1
    5738:	f6 cf       	rjmp	.-20     	; 0x5726 <vfprintf+0x640>
    573a:	15 c0       	rjmp	.+42     	; 0x5766 <vfprintf+0x680>
    573c:	f4 e0       	ldi	r31, 0x04	; 4
    573e:	f5 15       	cp	r31, r5
    5740:	50 f5       	brcc	.+84     	; 0x5796 <vfprintf+0x6b0>
    5742:	84 e0       	ldi	r24, 0x04	; 4
    5744:	58 1a       	sub	r5, r24
    5746:	93 fe       	sbrs	r9, 3
    5748:	1e c0       	rjmp	.+60     	; 0x5786 <vfprintf+0x6a0>
    574a:	01 11       	cpse	r16, r1
    574c:	25 c0       	rjmp	.+74     	; 0x5798 <vfprintf+0x6b2>
    574e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5750:	23 ff       	sbrs	r18, 3
    5752:	27 c0       	rjmp	.+78     	; 0x57a2 <vfprintf+0x6bc>
    5754:	0a e9       	ldi	r16, 0x9A	; 154
    5756:	11 e0       	ldi	r17, 0x01	; 1
    5758:	39 2d       	mov	r19, r9
    575a:	30 71       	andi	r19, 0x10	; 16
    575c:	93 2e       	mov	r9, r19
    575e:	f8 01       	movw	r30, r16
    5760:	84 91       	lpm	r24, Z
    5762:	81 11       	cpse	r24, r1
    5764:	21 c0       	rjmp	.+66     	; 0x57a8 <vfprintf+0x6c2>
    5766:	55 20       	and	r5, r5
    5768:	09 f4       	brne	.+2      	; 0x576c <vfprintf+0x686>
    576a:	fc cc       	rjmp	.-1544   	; 0x5164 <vfprintf+0x7e>
    576c:	b7 01       	movw	r22, r14
    576e:	80 e2       	ldi	r24, 0x20	; 32
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	f8 d3       	rcall	.+2032   	; 0x5f64 <fputc>
    5774:	5a 94       	dec	r5
    5776:	f7 cf       	rjmp	.-18     	; 0x5766 <vfprintf+0x680>
    5778:	f7 01       	movw	r30, r14
    577a:	86 81       	ldd	r24, Z+6	; 0x06
    577c:	97 81       	ldd	r25, Z+7	; 0x07
    577e:	23 c0       	rjmp	.+70     	; 0x57c6 <vfprintf+0x6e0>
    5780:	8f ef       	ldi	r24, 0xFF	; 255
    5782:	9f ef       	ldi	r25, 0xFF	; 255
    5784:	20 c0       	rjmp	.+64     	; 0x57c6 <vfprintf+0x6e0>
    5786:	b7 01       	movw	r22, r14
    5788:	80 e2       	ldi	r24, 0x20	; 32
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	eb d3       	rcall	.+2006   	; 0x5f64 <fputc>
    578e:	5a 94       	dec	r5
    5790:	51 10       	cpse	r5, r1
    5792:	f9 cf       	rjmp	.-14     	; 0x5786 <vfprintf+0x6a0>
    5794:	da cf       	rjmp	.-76     	; 0x574a <vfprintf+0x664>
    5796:	51 2c       	mov	r5, r1
    5798:	b7 01       	movw	r22, r14
    579a:	80 2f       	mov	r24, r16
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	e2 d3       	rcall	.+1988   	; 0x5f64 <fputc>
    57a0:	d6 cf       	rjmp	.-84     	; 0x574e <vfprintf+0x668>
    57a2:	0e e9       	ldi	r16, 0x9E	; 158
    57a4:	11 e0       	ldi	r17, 0x01	; 1
    57a6:	d8 cf       	rjmp	.-80     	; 0x5758 <vfprintf+0x672>
    57a8:	91 10       	cpse	r9, r1
    57aa:	80 52       	subi	r24, 0x20	; 32
    57ac:	b7 01       	movw	r22, r14
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	d9 d3       	rcall	.+1970   	; 0x5f64 <fputc>
    57b2:	0f 5f       	subi	r16, 0xFF	; 255
    57b4:	1f 4f       	sbci	r17, 0xFF	; 255
    57b6:	d3 cf       	rjmp	.-90     	; 0x575e <vfprintf+0x678>
    57b8:	23 e0       	ldi	r18, 0x03	; 3
    57ba:	25 15       	cp	r18, r5
    57bc:	10 f4       	brcc	.+4      	; 0x57c2 <vfprintf+0x6dc>
    57be:	83 e0       	ldi	r24, 0x03	; 3
    57c0:	c1 cf       	rjmp	.-126    	; 0x5744 <vfprintf+0x65e>
    57c2:	51 2c       	mov	r5, r1
    57c4:	c4 cf       	rjmp	.-120    	; 0x574e <vfprintf+0x668>
    57c6:	60 96       	adiw	r28, 0x10	; 16
    57c8:	0f b6       	in	r0, 0x3f	; 63
    57ca:	f8 94       	cli
    57cc:	de bf       	out	0x3e, r29	; 62
    57ce:	0f be       	out	0x3f, r0	; 63
    57d0:	cd bf       	out	0x3d, r28	; 61
    57d2:	df 91       	pop	r29
    57d4:	cf 91       	pop	r28
    57d6:	1f 91       	pop	r17
    57d8:	0f 91       	pop	r16
    57da:	ff 90       	pop	r15
    57dc:	ef 90       	pop	r14
    57de:	df 90       	pop	r13
    57e0:	cf 90       	pop	r12
    57e2:	bf 90       	pop	r11
    57e4:	af 90       	pop	r10
    57e6:	9f 90       	pop	r9
    57e8:	8f 90       	pop	r8
    57ea:	7f 90       	pop	r7
    57ec:	6f 90       	pop	r6
    57ee:	5f 90       	pop	r5
    57f0:	4f 90       	pop	r4
    57f2:	3f 90       	pop	r3
    57f4:	2f 90       	pop	r2
    57f6:	08 95       	ret

000057f8 <__divsf3>:
    57f8:	12 d0       	rcall	.+36     	; 0x581e <__divsf3x>
    57fa:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_round>
    57fe:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__fp_pscB>
    5802:	58 f0       	brcs	.+22     	; 0x581a <__divsf3+0x22>
    5804:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__fp_pscA>
    5808:	40 f0       	brcs	.+16     	; 0x581a <__divsf3+0x22>
    580a:	29 f4       	brne	.+10     	; 0x5816 <__divsf3+0x1e>
    580c:	5f 3f       	cpi	r21, 0xFF	; 255
    580e:	29 f0       	breq	.+10     	; 0x581a <__divsf3+0x22>
    5810:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    5814:	51 11       	cpse	r21, r1
    5816:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__fp_szero>
    581a:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__fp_nan>

0000581e <__divsf3x>:
    581e:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__fp_split3>
    5822:	68 f3       	brcs	.-38     	; 0x57fe <__divsf3+0x6>

00005824 <__divsf3_pse>:
    5824:	99 23       	and	r25, r25
    5826:	b1 f3       	breq	.-20     	; 0x5814 <__divsf3+0x1c>
    5828:	55 23       	and	r21, r21
    582a:	91 f3       	breq	.-28     	; 0x5810 <__divsf3+0x18>
    582c:	95 1b       	sub	r25, r21
    582e:	55 0b       	sbc	r21, r21
    5830:	bb 27       	eor	r27, r27
    5832:	aa 27       	eor	r26, r26
    5834:	62 17       	cp	r22, r18
    5836:	73 07       	cpc	r23, r19
    5838:	84 07       	cpc	r24, r20
    583a:	38 f0       	brcs	.+14     	; 0x584a <__divsf3_pse+0x26>
    583c:	9f 5f       	subi	r25, 0xFF	; 255
    583e:	5f 4f       	sbci	r21, 0xFF	; 255
    5840:	22 0f       	add	r18, r18
    5842:	33 1f       	adc	r19, r19
    5844:	44 1f       	adc	r20, r20
    5846:	aa 1f       	adc	r26, r26
    5848:	a9 f3       	breq	.-22     	; 0x5834 <__divsf3_pse+0x10>
    584a:	35 d0       	rcall	.+106    	; 0x58b6 <__divsf3_pse+0x92>
    584c:	0e 2e       	mov	r0, r30
    584e:	3a f0       	brmi	.+14     	; 0x585e <__divsf3_pse+0x3a>
    5850:	e0 e8       	ldi	r30, 0x80	; 128
    5852:	32 d0       	rcall	.+100    	; 0x58b8 <__divsf3_pse+0x94>
    5854:	91 50       	subi	r25, 0x01	; 1
    5856:	50 40       	sbci	r21, 0x00	; 0
    5858:	e6 95       	lsr	r30
    585a:	00 1c       	adc	r0, r0
    585c:	ca f7       	brpl	.-14     	; 0x5850 <__divsf3_pse+0x2c>
    585e:	2b d0       	rcall	.+86     	; 0x58b6 <__divsf3_pse+0x92>
    5860:	fe 2f       	mov	r31, r30
    5862:	29 d0       	rcall	.+82     	; 0x58b6 <__divsf3_pse+0x92>
    5864:	66 0f       	add	r22, r22
    5866:	77 1f       	adc	r23, r23
    5868:	88 1f       	adc	r24, r24
    586a:	bb 1f       	adc	r27, r27
    586c:	26 17       	cp	r18, r22
    586e:	37 07       	cpc	r19, r23
    5870:	48 07       	cpc	r20, r24
    5872:	ab 07       	cpc	r26, r27
    5874:	b0 e8       	ldi	r27, 0x80	; 128
    5876:	09 f0       	breq	.+2      	; 0x587a <__divsf3_pse+0x56>
    5878:	bb 0b       	sbc	r27, r27
    587a:	80 2d       	mov	r24, r0
    587c:	bf 01       	movw	r22, r30
    587e:	ff 27       	eor	r31, r31
    5880:	93 58       	subi	r25, 0x83	; 131
    5882:	5f 4f       	sbci	r21, 0xFF	; 255
    5884:	3a f0       	brmi	.+14     	; 0x5894 <__divsf3_pse+0x70>
    5886:	9e 3f       	cpi	r25, 0xFE	; 254
    5888:	51 05       	cpc	r21, r1
    588a:	78 f0       	brcs	.+30     	; 0x58aa <__divsf3_pse+0x86>
    588c:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    5890:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__fp_szero>
    5894:	5f 3f       	cpi	r21, 0xFF	; 255
    5896:	e4 f3       	brlt	.-8      	; 0x5890 <__divsf3_pse+0x6c>
    5898:	98 3e       	cpi	r25, 0xE8	; 232
    589a:	d4 f3       	brlt	.-12     	; 0x5890 <__divsf3_pse+0x6c>
    589c:	86 95       	lsr	r24
    589e:	77 95       	ror	r23
    58a0:	67 95       	ror	r22
    58a2:	b7 95       	ror	r27
    58a4:	f7 95       	ror	r31
    58a6:	9f 5f       	subi	r25, 0xFF	; 255
    58a8:	c9 f7       	brne	.-14     	; 0x589c <__divsf3_pse+0x78>
    58aa:	88 0f       	add	r24, r24
    58ac:	91 1d       	adc	r25, r1
    58ae:	96 95       	lsr	r25
    58b0:	87 95       	ror	r24
    58b2:	97 f9       	bld	r25, 7
    58b4:	08 95       	ret
    58b6:	e1 e0       	ldi	r30, 0x01	; 1
    58b8:	66 0f       	add	r22, r22
    58ba:	77 1f       	adc	r23, r23
    58bc:	88 1f       	adc	r24, r24
    58be:	bb 1f       	adc	r27, r27
    58c0:	62 17       	cp	r22, r18
    58c2:	73 07       	cpc	r23, r19
    58c4:	84 07       	cpc	r24, r20
    58c6:	ba 07       	cpc	r27, r26
    58c8:	20 f0       	brcs	.+8      	; 0x58d2 <__divsf3_pse+0xae>
    58ca:	62 1b       	sub	r22, r18
    58cc:	73 0b       	sbc	r23, r19
    58ce:	84 0b       	sbc	r24, r20
    58d0:	ba 0b       	sbc	r27, r26
    58d2:	ee 1f       	adc	r30, r30
    58d4:	88 f7       	brcc	.-30     	; 0x58b8 <__divsf3_pse+0x94>
    58d6:	e0 95       	com	r30
    58d8:	08 95       	ret

000058da <__floatunsisf>:
    58da:	e8 94       	clt
    58dc:	09 c0       	rjmp	.+18     	; 0x58f0 <__floatsisf+0x12>

000058de <__floatsisf>:
    58de:	97 fb       	bst	r25, 7
    58e0:	3e f4       	brtc	.+14     	; 0x58f0 <__floatsisf+0x12>
    58e2:	90 95       	com	r25
    58e4:	80 95       	com	r24
    58e6:	70 95       	com	r23
    58e8:	61 95       	neg	r22
    58ea:	7f 4f       	sbci	r23, 0xFF	; 255
    58ec:	8f 4f       	sbci	r24, 0xFF	; 255
    58ee:	9f 4f       	sbci	r25, 0xFF	; 255
    58f0:	99 23       	and	r25, r25
    58f2:	a9 f0       	breq	.+42     	; 0x591e <__floatsisf+0x40>
    58f4:	f9 2f       	mov	r31, r25
    58f6:	96 e9       	ldi	r25, 0x96	; 150
    58f8:	bb 27       	eor	r27, r27
    58fa:	93 95       	inc	r25
    58fc:	f6 95       	lsr	r31
    58fe:	87 95       	ror	r24
    5900:	77 95       	ror	r23
    5902:	67 95       	ror	r22
    5904:	b7 95       	ror	r27
    5906:	f1 11       	cpse	r31, r1
    5908:	f8 cf       	rjmp	.-16     	; 0x58fa <__floatsisf+0x1c>
    590a:	fa f4       	brpl	.+62     	; 0x594a <__floatsisf+0x6c>
    590c:	bb 0f       	add	r27, r27
    590e:	11 f4       	brne	.+4      	; 0x5914 <__floatsisf+0x36>
    5910:	60 ff       	sbrs	r22, 0
    5912:	1b c0       	rjmp	.+54     	; 0x594a <__floatsisf+0x6c>
    5914:	6f 5f       	subi	r22, 0xFF	; 255
    5916:	7f 4f       	sbci	r23, 0xFF	; 255
    5918:	8f 4f       	sbci	r24, 0xFF	; 255
    591a:	9f 4f       	sbci	r25, 0xFF	; 255
    591c:	16 c0       	rjmp	.+44     	; 0x594a <__floatsisf+0x6c>
    591e:	88 23       	and	r24, r24
    5920:	11 f0       	breq	.+4      	; 0x5926 <__floatsisf+0x48>
    5922:	96 e9       	ldi	r25, 0x96	; 150
    5924:	11 c0       	rjmp	.+34     	; 0x5948 <__floatsisf+0x6a>
    5926:	77 23       	and	r23, r23
    5928:	21 f0       	breq	.+8      	; 0x5932 <__floatsisf+0x54>
    592a:	9e e8       	ldi	r25, 0x8E	; 142
    592c:	87 2f       	mov	r24, r23
    592e:	76 2f       	mov	r23, r22
    5930:	05 c0       	rjmp	.+10     	; 0x593c <__floatsisf+0x5e>
    5932:	66 23       	and	r22, r22
    5934:	71 f0       	breq	.+28     	; 0x5952 <__floatsisf+0x74>
    5936:	96 e8       	ldi	r25, 0x86	; 134
    5938:	86 2f       	mov	r24, r22
    593a:	70 e0       	ldi	r23, 0x00	; 0
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	2a f0       	brmi	.+10     	; 0x594a <__floatsisf+0x6c>
    5940:	9a 95       	dec	r25
    5942:	66 0f       	add	r22, r22
    5944:	77 1f       	adc	r23, r23
    5946:	88 1f       	adc	r24, r24
    5948:	da f7       	brpl	.-10     	; 0x5940 <__floatsisf+0x62>
    594a:	88 0f       	add	r24, r24
    594c:	96 95       	lsr	r25
    594e:	87 95       	ror	r24
    5950:	97 f9       	bld	r25, 7
    5952:	08 95       	ret

00005954 <__mulsf3>:
    5954:	11 d0       	rcall	.+34     	; 0x5978 <__mulsf3x>
    5956:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_round>
    595a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__fp_pscA>
    595e:	38 f0       	brcs	.+14     	; 0x596e <__mulsf3+0x1a>
    5960:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__fp_pscB>
    5964:	20 f0       	brcs	.+8      	; 0x596e <__mulsf3+0x1a>
    5966:	95 23       	and	r25, r21
    5968:	11 f0       	breq	.+4      	; 0x596e <__mulsf3+0x1a>
    596a:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    596e:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__fp_nan>
    5972:	11 24       	eor	r1, r1
    5974:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__fp_szero>

00005978 <__mulsf3x>:
    5978:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__fp_split3>
    597c:	70 f3       	brcs	.-36     	; 0x595a <__mulsf3+0x6>

0000597e <__mulsf3_pse>:
    597e:	95 9f       	mul	r25, r21
    5980:	c1 f3       	breq	.-16     	; 0x5972 <__mulsf3+0x1e>
    5982:	95 0f       	add	r25, r21
    5984:	50 e0       	ldi	r21, 0x00	; 0
    5986:	55 1f       	adc	r21, r21
    5988:	62 9f       	mul	r22, r18
    598a:	f0 01       	movw	r30, r0
    598c:	72 9f       	mul	r23, r18
    598e:	bb 27       	eor	r27, r27
    5990:	f0 0d       	add	r31, r0
    5992:	b1 1d       	adc	r27, r1
    5994:	63 9f       	mul	r22, r19
    5996:	aa 27       	eor	r26, r26
    5998:	f0 0d       	add	r31, r0
    599a:	b1 1d       	adc	r27, r1
    599c:	aa 1f       	adc	r26, r26
    599e:	64 9f       	mul	r22, r20
    59a0:	66 27       	eor	r22, r22
    59a2:	b0 0d       	add	r27, r0
    59a4:	a1 1d       	adc	r26, r1
    59a6:	66 1f       	adc	r22, r22
    59a8:	82 9f       	mul	r24, r18
    59aa:	22 27       	eor	r18, r18
    59ac:	b0 0d       	add	r27, r0
    59ae:	a1 1d       	adc	r26, r1
    59b0:	62 1f       	adc	r22, r18
    59b2:	73 9f       	mul	r23, r19
    59b4:	b0 0d       	add	r27, r0
    59b6:	a1 1d       	adc	r26, r1
    59b8:	62 1f       	adc	r22, r18
    59ba:	83 9f       	mul	r24, r19
    59bc:	a0 0d       	add	r26, r0
    59be:	61 1d       	adc	r22, r1
    59c0:	22 1f       	adc	r18, r18
    59c2:	74 9f       	mul	r23, r20
    59c4:	33 27       	eor	r19, r19
    59c6:	a0 0d       	add	r26, r0
    59c8:	61 1d       	adc	r22, r1
    59ca:	23 1f       	adc	r18, r19
    59cc:	84 9f       	mul	r24, r20
    59ce:	60 0d       	add	r22, r0
    59d0:	21 1d       	adc	r18, r1
    59d2:	82 2f       	mov	r24, r18
    59d4:	76 2f       	mov	r23, r22
    59d6:	6a 2f       	mov	r22, r26
    59d8:	11 24       	eor	r1, r1
    59da:	9f 57       	subi	r25, 0x7F	; 127
    59dc:	50 40       	sbci	r21, 0x00	; 0
    59de:	9a f0       	brmi	.+38     	; 0x5a06 <__mulsf3_pse+0x88>
    59e0:	f1 f0       	breq	.+60     	; 0x5a1e <__mulsf3_pse+0xa0>
    59e2:	88 23       	and	r24, r24
    59e4:	4a f0       	brmi	.+18     	; 0x59f8 <__mulsf3_pse+0x7a>
    59e6:	ee 0f       	add	r30, r30
    59e8:	ff 1f       	adc	r31, r31
    59ea:	bb 1f       	adc	r27, r27
    59ec:	66 1f       	adc	r22, r22
    59ee:	77 1f       	adc	r23, r23
    59f0:	88 1f       	adc	r24, r24
    59f2:	91 50       	subi	r25, 0x01	; 1
    59f4:	50 40       	sbci	r21, 0x00	; 0
    59f6:	a9 f7       	brne	.-22     	; 0x59e2 <__mulsf3_pse+0x64>
    59f8:	9e 3f       	cpi	r25, 0xFE	; 254
    59fa:	51 05       	cpc	r21, r1
    59fc:	80 f0       	brcs	.+32     	; 0x5a1e <__mulsf3_pse+0xa0>
    59fe:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    5a02:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__fp_szero>
    5a06:	5f 3f       	cpi	r21, 0xFF	; 255
    5a08:	e4 f3       	brlt	.-8      	; 0x5a02 <__mulsf3_pse+0x84>
    5a0a:	98 3e       	cpi	r25, 0xE8	; 232
    5a0c:	d4 f3       	brlt	.-12     	; 0x5a02 <__mulsf3_pse+0x84>
    5a0e:	86 95       	lsr	r24
    5a10:	77 95       	ror	r23
    5a12:	67 95       	ror	r22
    5a14:	b7 95       	ror	r27
    5a16:	f7 95       	ror	r31
    5a18:	e7 95       	ror	r30
    5a1a:	9f 5f       	subi	r25, 0xFF	; 255
    5a1c:	c1 f7       	brne	.-16     	; 0x5a0e <__mulsf3_pse+0x90>
    5a1e:	fe 2b       	or	r31, r30
    5a20:	88 0f       	add	r24, r24
    5a22:	91 1d       	adc	r25, r1
    5a24:	96 95       	lsr	r25
    5a26:	87 95       	ror	r24
    5a28:	97 f9       	bld	r25, 7
    5a2a:	08 95       	ret

00005a2c <__udivmodsi4>:
    5a2c:	a1 e2       	ldi	r26, 0x21	; 33
    5a2e:	1a 2e       	mov	r1, r26
    5a30:	aa 1b       	sub	r26, r26
    5a32:	bb 1b       	sub	r27, r27
    5a34:	fd 01       	movw	r30, r26
    5a36:	0d c0       	rjmp	.+26     	; 0x5a52 <__udivmodsi4_ep>

00005a38 <__udivmodsi4_loop>:
    5a38:	aa 1f       	adc	r26, r26
    5a3a:	bb 1f       	adc	r27, r27
    5a3c:	ee 1f       	adc	r30, r30
    5a3e:	ff 1f       	adc	r31, r31
    5a40:	a2 17       	cp	r26, r18
    5a42:	b3 07       	cpc	r27, r19
    5a44:	e4 07       	cpc	r30, r20
    5a46:	f5 07       	cpc	r31, r21
    5a48:	20 f0       	brcs	.+8      	; 0x5a52 <__udivmodsi4_ep>
    5a4a:	a2 1b       	sub	r26, r18
    5a4c:	b3 0b       	sbc	r27, r19
    5a4e:	e4 0b       	sbc	r30, r20
    5a50:	f5 0b       	sbc	r31, r21

00005a52 <__udivmodsi4_ep>:
    5a52:	66 1f       	adc	r22, r22
    5a54:	77 1f       	adc	r23, r23
    5a56:	88 1f       	adc	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	1a 94       	dec	r1
    5a5c:	69 f7       	brne	.-38     	; 0x5a38 <__udivmodsi4_loop>
    5a5e:	60 95       	com	r22
    5a60:	70 95       	com	r23
    5a62:	80 95       	com	r24
    5a64:	90 95       	com	r25
    5a66:	9b 01       	movw	r18, r22
    5a68:	ac 01       	movw	r20, r24
    5a6a:	bd 01       	movw	r22, r26
    5a6c:	cf 01       	movw	r24, r30
    5a6e:	08 95       	ret

00005a70 <__tablejump2__>:
    5a70:	ee 0f       	add	r30, r30
    5a72:	ff 1f       	adc	r31, r31
    5a74:	88 1f       	adc	r24, r24
    5a76:	8b bf       	out	0x3b, r24	; 59
    5a78:	07 90       	elpm	r0, Z+
    5a7a:	f6 91       	elpm	r31, Z
    5a7c:	e0 2d       	mov	r30, r0
    5a7e:	19 94       	eijmp

00005a80 <malloc>:
    5a80:	0f 93       	push	r16
    5a82:	1f 93       	push	r17
    5a84:	cf 93       	push	r28
    5a86:	df 93       	push	r29
    5a88:	82 30       	cpi	r24, 0x02	; 2
    5a8a:	91 05       	cpc	r25, r1
    5a8c:	10 f4       	brcc	.+4      	; 0x5a92 <malloc+0x12>
    5a8e:	82 e0       	ldi	r24, 0x02	; 2
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	e0 91 9d 12 	lds	r30, 0x129D	; 0x80129d <__flp>
    5a96:	f0 91 9e 12 	lds	r31, 0x129E	; 0x80129e <__flp+0x1>
    5a9a:	20 e0       	ldi	r18, 0x00	; 0
    5a9c:	30 e0       	ldi	r19, 0x00	; 0
    5a9e:	a0 e0       	ldi	r26, 0x00	; 0
    5aa0:	b0 e0       	ldi	r27, 0x00	; 0
    5aa2:	30 97       	sbiw	r30, 0x00	; 0
    5aa4:	19 f1       	breq	.+70     	; 0x5aec <malloc+0x6c>
    5aa6:	40 81       	ld	r20, Z
    5aa8:	51 81       	ldd	r21, Z+1	; 0x01
    5aaa:	02 81       	ldd	r16, Z+2	; 0x02
    5aac:	13 81       	ldd	r17, Z+3	; 0x03
    5aae:	48 17       	cp	r20, r24
    5ab0:	59 07       	cpc	r21, r25
    5ab2:	c8 f0       	brcs	.+50     	; 0x5ae6 <malloc+0x66>
    5ab4:	84 17       	cp	r24, r20
    5ab6:	95 07       	cpc	r25, r21
    5ab8:	69 f4       	brne	.+26     	; 0x5ad4 <malloc+0x54>
    5aba:	10 97       	sbiw	r26, 0x00	; 0
    5abc:	31 f0       	breq	.+12     	; 0x5aca <malloc+0x4a>
    5abe:	12 96       	adiw	r26, 0x02	; 2
    5ac0:	0c 93       	st	X, r16
    5ac2:	12 97       	sbiw	r26, 0x02	; 2
    5ac4:	13 96       	adiw	r26, 0x03	; 3
    5ac6:	1c 93       	st	X, r17
    5ac8:	27 c0       	rjmp	.+78     	; 0x5b18 <malloc+0x98>
    5aca:	00 93 9d 12 	sts	0x129D, r16	; 0x80129d <__flp>
    5ace:	10 93 9e 12 	sts	0x129E, r17	; 0x80129e <__flp+0x1>
    5ad2:	22 c0       	rjmp	.+68     	; 0x5b18 <malloc+0x98>
    5ad4:	21 15       	cp	r18, r1
    5ad6:	31 05       	cpc	r19, r1
    5ad8:	19 f0       	breq	.+6      	; 0x5ae0 <malloc+0x60>
    5ada:	42 17       	cp	r20, r18
    5adc:	53 07       	cpc	r21, r19
    5ade:	18 f4       	brcc	.+6      	; 0x5ae6 <malloc+0x66>
    5ae0:	9a 01       	movw	r18, r20
    5ae2:	bd 01       	movw	r22, r26
    5ae4:	ef 01       	movw	r28, r30
    5ae6:	df 01       	movw	r26, r30
    5ae8:	f8 01       	movw	r30, r16
    5aea:	db cf       	rjmp	.-74     	; 0x5aa2 <malloc+0x22>
    5aec:	21 15       	cp	r18, r1
    5aee:	31 05       	cpc	r19, r1
    5af0:	f9 f0       	breq	.+62     	; 0x5b30 <malloc+0xb0>
    5af2:	28 1b       	sub	r18, r24
    5af4:	39 0b       	sbc	r19, r25
    5af6:	24 30       	cpi	r18, 0x04	; 4
    5af8:	31 05       	cpc	r19, r1
    5afa:	80 f4       	brcc	.+32     	; 0x5b1c <malloc+0x9c>
    5afc:	8a 81       	ldd	r24, Y+2	; 0x02
    5afe:	9b 81       	ldd	r25, Y+3	; 0x03
    5b00:	61 15       	cp	r22, r1
    5b02:	71 05       	cpc	r23, r1
    5b04:	21 f0       	breq	.+8      	; 0x5b0e <malloc+0x8e>
    5b06:	fb 01       	movw	r30, r22
    5b08:	93 83       	std	Z+3, r25	; 0x03
    5b0a:	82 83       	std	Z+2, r24	; 0x02
    5b0c:	04 c0       	rjmp	.+8      	; 0x5b16 <malloc+0x96>
    5b0e:	90 93 9e 12 	sts	0x129E, r25	; 0x80129e <__flp+0x1>
    5b12:	80 93 9d 12 	sts	0x129D, r24	; 0x80129d <__flp>
    5b16:	fe 01       	movw	r30, r28
    5b18:	32 96       	adiw	r30, 0x02	; 2
    5b1a:	44 c0       	rjmp	.+136    	; 0x5ba4 <malloc+0x124>
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	e2 0f       	add	r30, r18
    5b20:	f3 1f       	adc	r31, r19
    5b22:	81 93       	st	Z+, r24
    5b24:	91 93       	st	Z+, r25
    5b26:	22 50       	subi	r18, 0x02	; 2
    5b28:	31 09       	sbc	r19, r1
    5b2a:	39 83       	std	Y+1, r19	; 0x01
    5b2c:	28 83       	st	Y, r18
    5b2e:	3a c0       	rjmp	.+116    	; 0x5ba4 <malloc+0x124>
    5b30:	20 91 9b 12 	lds	r18, 0x129B	; 0x80129b <__brkval>
    5b34:	30 91 9c 12 	lds	r19, 0x129C	; 0x80129c <__brkval+0x1>
    5b38:	23 2b       	or	r18, r19
    5b3a:	41 f4       	brne	.+16     	; 0x5b4c <malloc+0xcc>
    5b3c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5b40:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5b44:	30 93 9c 12 	sts	0x129C, r19	; 0x80129c <__brkval+0x1>
    5b48:	20 93 9b 12 	sts	0x129B, r18	; 0x80129b <__brkval>
    5b4c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5b50:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5b54:	21 15       	cp	r18, r1
    5b56:	31 05       	cpc	r19, r1
    5b58:	41 f4       	brne	.+16     	; 0x5b6a <malloc+0xea>
    5b5a:	2d b7       	in	r18, 0x3d	; 61
    5b5c:	3e b7       	in	r19, 0x3e	; 62
    5b5e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5b62:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5b66:	24 1b       	sub	r18, r20
    5b68:	35 0b       	sbc	r19, r21
    5b6a:	e0 91 9b 12 	lds	r30, 0x129B	; 0x80129b <__brkval>
    5b6e:	f0 91 9c 12 	lds	r31, 0x129C	; 0x80129c <__brkval+0x1>
    5b72:	e2 17       	cp	r30, r18
    5b74:	f3 07       	cpc	r31, r19
    5b76:	a0 f4       	brcc	.+40     	; 0x5ba0 <malloc+0x120>
    5b78:	2e 1b       	sub	r18, r30
    5b7a:	3f 0b       	sbc	r19, r31
    5b7c:	28 17       	cp	r18, r24
    5b7e:	39 07       	cpc	r19, r25
    5b80:	78 f0       	brcs	.+30     	; 0x5ba0 <malloc+0x120>
    5b82:	ac 01       	movw	r20, r24
    5b84:	4e 5f       	subi	r20, 0xFE	; 254
    5b86:	5f 4f       	sbci	r21, 0xFF	; 255
    5b88:	24 17       	cp	r18, r20
    5b8a:	35 07       	cpc	r19, r21
    5b8c:	48 f0       	brcs	.+18     	; 0x5ba0 <malloc+0x120>
    5b8e:	4e 0f       	add	r20, r30
    5b90:	5f 1f       	adc	r21, r31
    5b92:	50 93 9c 12 	sts	0x129C, r21	; 0x80129c <__brkval+0x1>
    5b96:	40 93 9b 12 	sts	0x129B, r20	; 0x80129b <__brkval>
    5b9a:	81 93       	st	Z+, r24
    5b9c:	91 93       	st	Z+, r25
    5b9e:	02 c0       	rjmp	.+4      	; 0x5ba4 <malloc+0x124>
    5ba0:	e0 e0       	ldi	r30, 0x00	; 0
    5ba2:	f0 e0       	ldi	r31, 0x00	; 0
    5ba4:	cf 01       	movw	r24, r30
    5ba6:	df 91       	pop	r29
    5ba8:	cf 91       	pop	r28
    5baa:	1f 91       	pop	r17
    5bac:	0f 91       	pop	r16
    5bae:	08 95       	ret

00005bb0 <free>:
    5bb0:	cf 93       	push	r28
    5bb2:	df 93       	push	r29
    5bb4:	00 97       	sbiw	r24, 0x00	; 0
    5bb6:	09 f4       	brne	.+2      	; 0x5bba <free+0xa>
    5bb8:	81 c0       	rjmp	.+258    	; 0x5cbc <free+0x10c>
    5bba:	fc 01       	movw	r30, r24
    5bbc:	32 97       	sbiw	r30, 0x02	; 2
    5bbe:	13 82       	std	Z+3, r1	; 0x03
    5bc0:	12 82       	std	Z+2, r1	; 0x02
    5bc2:	a0 91 9d 12 	lds	r26, 0x129D	; 0x80129d <__flp>
    5bc6:	b0 91 9e 12 	lds	r27, 0x129E	; 0x80129e <__flp+0x1>
    5bca:	10 97       	sbiw	r26, 0x00	; 0
    5bcc:	81 f4       	brne	.+32     	; 0x5bee <free+0x3e>
    5bce:	20 81       	ld	r18, Z
    5bd0:	31 81       	ldd	r19, Z+1	; 0x01
    5bd2:	82 0f       	add	r24, r18
    5bd4:	93 1f       	adc	r25, r19
    5bd6:	20 91 9b 12 	lds	r18, 0x129B	; 0x80129b <__brkval>
    5bda:	30 91 9c 12 	lds	r19, 0x129C	; 0x80129c <__brkval+0x1>
    5bde:	28 17       	cp	r18, r24
    5be0:	39 07       	cpc	r19, r25
    5be2:	51 f5       	brne	.+84     	; 0x5c38 <free+0x88>
    5be4:	f0 93 9c 12 	sts	0x129C, r31	; 0x80129c <__brkval+0x1>
    5be8:	e0 93 9b 12 	sts	0x129B, r30	; 0x80129b <__brkval>
    5bec:	67 c0       	rjmp	.+206    	; 0x5cbc <free+0x10c>
    5bee:	ed 01       	movw	r28, r26
    5bf0:	20 e0       	ldi	r18, 0x00	; 0
    5bf2:	30 e0       	ldi	r19, 0x00	; 0
    5bf4:	ce 17       	cp	r28, r30
    5bf6:	df 07       	cpc	r29, r31
    5bf8:	40 f4       	brcc	.+16     	; 0x5c0a <free+0x5a>
    5bfa:	4a 81       	ldd	r20, Y+2	; 0x02
    5bfc:	5b 81       	ldd	r21, Y+3	; 0x03
    5bfe:	9e 01       	movw	r18, r28
    5c00:	41 15       	cp	r20, r1
    5c02:	51 05       	cpc	r21, r1
    5c04:	f1 f0       	breq	.+60     	; 0x5c42 <free+0x92>
    5c06:	ea 01       	movw	r28, r20
    5c08:	f5 cf       	rjmp	.-22     	; 0x5bf4 <free+0x44>
    5c0a:	d3 83       	std	Z+3, r29	; 0x03
    5c0c:	c2 83       	std	Z+2, r28	; 0x02
    5c0e:	40 81       	ld	r20, Z
    5c10:	51 81       	ldd	r21, Z+1	; 0x01
    5c12:	84 0f       	add	r24, r20
    5c14:	95 1f       	adc	r25, r21
    5c16:	c8 17       	cp	r28, r24
    5c18:	d9 07       	cpc	r29, r25
    5c1a:	59 f4       	brne	.+22     	; 0x5c32 <free+0x82>
    5c1c:	88 81       	ld	r24, Y
    5c1e:	99 81       	ldd	r25, Y+1	; 0x01
    5c20:	84 0f       	add	r24, r20
    5c22:	95 1f       	adc	r25, r21
    5c24:	02 96       	adiw	r24, 0x02	; 2
    5c26:	91 83       	std	Z+1, r25	; 0x01
    5c28:	80 83       	st	Z, r24
    5c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c2e:	93 83       	std	Z+3, r25	; 0x03
    5c30:	82 83       	std	Z+2, r24	; 0x02
    5c32:	21 15       	cp	r18, r1
    5c34:	31 05       	cpc	r19, r1
    5c36:	29 f4       	brne	.+10     	; 0x5c42 <free+0x92>
    5c38:	f0 93 9e 12 	sts	0x129E, r31	; 0x80129e <__flp+0x1>
    5c3c:	e0 93 9d 12 	sts	0x129D, r30	; 0x80129d <__flp>
    5c40:	3d c0       	rjmp	.+122    	; 0x5cbc <free+0x10c>
    5c42:	e9 01       	movw	r28, r18
    5c44:	fb 83       	std	Y+3, r31	; 0x03
    5c46:	ea 83       	std	Y+2, r30	; 0x02
    5c48:	49 91       	ld	r20, Y+
    5c4a:	59 91       	ld	r21, Y+
    5c4c:	c4 0f       	add	r28, r20
    5c4e:	d5 1f       	adc	r29, r21
    5c50:	ec 17       	cp	r30, r28
    5c52:	fd 07       	cpc	r31, r29
    5c54:	61 f4       	brne	.+24     	; 0x5c6e <free+0xbe>
    5c56:	80 81       	ld	r24, Z
    5c58:	91 81       	ldd	r25, Z+1	; 0x01
    5c5a:	84 0f       	add	r24, r20
    5c5c:	95 1f       	adc	r25, r21
    5c5e:	02 96       	adiw	r24, 0x02	; 2
    5c60:	e9 01       	movw	r28, r18
    5c62:	99 83       	std	Y+1, r25	; 0x01
    5c64:	88 83       	st	Y, r24
    5c66:	82 81       	ldd	r24, Z+2	; 0x02
    5c68:	93 81       	ldd	r25, Z+3	; 0x03
    5c6a:	9b 83       	std	Y+3, r25	; 0x03
    5c6c:	8a 83       	std	Y+2, r24	; 0x02
    5c6e:	e0 e0       	ldi	r30, 0x00	; 0
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	12 96       	adiw	r26, 0x02	; 2
    5c74:	8d 91       	ld	r24, X+
    5c76:	9c 91       	ld	r25, X
    5c78:	13 97       	sbiw	r26, 0x03	; 3
    5c7a:	00 97       	sbiw	r24, 0x00	; 0
    5c7c:	19 f0       	breq	.+6      	; 0x5c84 <free+0xd4>
    5c7e:	fd 01       	movw	r30, r26
    5c80:	dc 01       	movw	r26, r24
    5c82:	f7 cf       	rjmp	.-18     	; 0x5c72 <free+0xc2>
    5c84:	8d 91       	ld	r24, X+
    5c86:	9c 91       	ld	r25, X
    5c88:	11 97       	sbiw	r26, 0x01	; 1
    5c8a:	9d 01       	movw	r18, r26
    5c8c:	2e 5f       	subi	r18, 0xFE	; 254
    5c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c90:	82 0f       	add	r24, r18
    5c92:	93 1f       	adc	r25, r19
    5c94:	20 91 9b 12 	lds	r18, 0x129B	; 0x80129b <__brkval>
    5c98:	30 91 9c 12 	lds	r19, 0x129C	; 0x80129c <__brkval+0x1>
    5c9c:	28 17       	cp	r18, r24
    5c9e:	39 07       	cpc	r19, r25
    5ca0:	69 f4       	brne	.+26     	; 0x5cbc <free+0x10c>
    5ca2:	30 97       	sbiw	r30, 0x00	; 0
    5ca4:	29 f4       	brne	.+10     	; 0x5cb0 <free+0x100>
    5ca6:	10 92 9e 12 	sts	0x129E, r1	; 0x80129e <__flp+0x1>
    5caa:	10 92 9d 12 	sts	0x129D, r1	; 0x80129d <__flp>
    5cae:	02 c0       	rjmp	.+4      	; 0x5cb4 <free+0x104>
    5cb0:	13 82       	std	Z+3, r1	; 0x03
    5cb2:	12 82       	std	Z+2, r1	; 0x02
    5cb4:	b0 93 9c 12 	sts	0x129C, r27	; 0x80129c <__brkval+0x1>
    5cb8:	a0 93 9b 12 	sts	0x129B, r26	; 0x80129b <__brkval>
    5cbc:	df 91       	pop	r29
    5cbe:	cf 91       	pop	r28
    5cc0:	08 95       	ret

00005cc2 <abort>:
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	f8 94       	cli
    5cc8:	58 c2       	rjmp	.+1200   	; 0x617a <_exit>

00005cca <__ftoa_engine>:
    5cca:	28 30       	cpi	r18, 0x08	; 8
    5ccc:	08 f0       	brcs	.+2      	; 0x5cd0 <__ftoa_engine+0x6>
    5cce:	27 e0       	ldi	r18, 0x07	; 7
    5cd0:	33 27       	eor	r19, r19
    5cd2:	da 01       	movw	r26, r20
    5cd4:	99 0f       	add	r25, r25
    5cd6:	31 1d       	adc	r19, r1
    5cd8:	87 fd       	sbrc	r24, 7
    5cda:	91 60       	ori	r25, 0x01	; 1
    5cdc:	00 96       	adiw	r24, 0x00	; 0
    5cde:	61 05       	cpc	r22, r1
    5ce0:	71 05       	cpc	r23, r1
    5ce2:	39 f4       	brne	.+14     	; 0x5cf2 <__ftoa_engine+0x28>
    5ce4:	32 60       	ori	r19, 0x02	; 2
    5ce6:	2e 5f       	subi	r18, 0xFE	; 254
    5ce8:	3d 93       	st	X+, r19
    5cea:	30 e3       	ldi	r19, 0x30	; 48
    5cec:	2a 95       	dec	r18
    5cee:	e1 f7       	brne	.-8      	; 0x5ce8 <__ftoa_engine+0x1e>
    5cf0:	08 95       	ret
    5cf2:	9f 3f       	cpi	r25, 0xFF	; 255
    5cf4:	30 f0       	brcs	.+12     	; 0x5d02 <__ftoa_engine+0x38>
    5cf6:	80 38       	cpi	r24, 0x80	; 128
    5cf8:	71 05       	cpc	r23, r1
    5cfa:	61 05       	cpc	r22, r1
    5cfc:	09 f0       	breq	.+2      	; 0x5d00 <__ftoa_engine+0x36>
    5cfe:	3c 5f       	subi	r19, 0xFC	; 252
    5d00:	3c 5f       	subi	r19, 0xFC	; 252
    5d02:	3d 93       	st	X+, r19
    5d04:	91 30       	cpi	r25, 0x01	; 1
    5d06:	08 f0       	brcs	.+2      	; 0x5d0a <__ftoa_engine+0x40>
    5d08:	80 68       	ori	r24, 0x80	; 128
    5d0a:	91 1d       	adc	r25, r1
    5d0c:	df 93       	push	r29
    5d0e:	cf 93       	push	r28
    5d10:	1f 93       	push	r17
    5d12:	0f 93       	push	r16
    5d14:	ff 92       	push	r15
    5d16:	ef 92       	push	r14
    5d18:	19 2f       	mov	r17, r25
    5d1a:	98 7f       	andi	r25, 0xF8	; 248
    5d1c:	96 95       	lsr	r25
    5d1e:	e9 2f       	mov	r30, r25
    5d20:	96 95       	lsr	r25
    5d22:	96 95       	lsr	r25
    5d24:	e9 0f       	add	r30, r25
    5d26:	ff 27       	eor	r31, r31
    5d28:	e4 50       	subi	r30, 0x04	; 4
    5d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    5d2c:	99 27       	eor	r25, r25
    5d2e:	33 27       	eor	r19, r19
    5d30:	ee 24       	eor	r14, r14
    5d32:	ff 24       	eor	r15, r15
    5d34:	a7 01       	movw	r20, r14
    5d36:	e7 01       	movw	r28, r14
    5d38:	05 90       	lpm	r0, Z+
    5d3a:	08 94       	sec
    5d3c:	07 94       	ror	r0
    5d3e:	28 f4       	brcc	.+10     	; 0x5d4a <__ftoa_engine+0x80>
    5d40:	36 0f       	add	r19, r22
    5d42:	e7 1e       	adc	r14, r23
    5d44:	f8 1e       	adc	r15, r24
    5d46:	49 1f       	adc	r20, r25
    5d48:	51 1d       	adc	r21, r1
    5d4a:	66 0f       	add	r22, r22
    5d4c:	77 1f       	adc	r23, r23
    5d4e:	88 1f       	adc	r24, r24
    5d50:	99 1f       	adc	r25, r25
    5d52:	06 94       	lsr	r0
    5d54:	a1 f7       	brne	.-24     	; 0x5d3e <__ftoa_engine+0x74>
    5d56:	05 90       	lpm	r0, Z+
    5d58:	07 94       	ror	r0
    5d5a:	28 f4       	brcc	.+10     	; 0x5d66 <__ftoa_engine+0x9c>
    5d5c:	e7 0e       	add	r14, r23
    5d5e:	f8 1e       	adc	r15, r24
    5d60:	49 1f       	adc	r20, r25
    5d62:	56 1f       	adc	r21, r22
    5d64:	c1 1d       	adc	r28, r1
    5d66:	77 0f       	add	r23, r23
    5d68:	88 1f       	adc	r24, r24
    5d6a:	99 1f       	adc	r25, r25
    5d6c:	66 1f       	adc	r22, r22
    5d6e:	06 94       	lsr	r0
    5d70:	a1 f7       	brne	.-24     	; 0x5d5a <__ftoa_engine+0x90>
    5d72:	05 90       	lpm	r0, Z+
    5d74:	07 94       	ror	r0
    5d76:	28 f4       	brcc	.+10     	; 0x5d82 <__ftoa_engine+0xb8>
    5d78:	f8 0e       	add	r15, r24
    5d7a:	49 1f       	adc	r20, r25
    5d7c:	56 1f       	adc	r21, r22
    5d7e:	c7 1f       	adc	r28, r23
    5d80:	d1 1d       	adc	r29, r1
    5d82:	88 0f       	add	r24, r24
    5d84:	99 1f       	adc	r25, r25
    5d86:	66 1f       	adc	r22, r22
    5d88:	77 1f       	adc	r23, r23
    5d8a:	06 94       	lsr	r0
    5d8c:	a1 f7       	brne	.-24     	; 0x5d76 <__ftoa_engine+0xac>
    5d8e:	05 90       	lpm	r0, Z+
    5d90:	07 94       	ror	r0
    5d92:	20 f4       	brcc	.+8      	; 0x5d9c <__ftoa_engine+0xd2>
    5d94:	49 0f       	add	r20, r25
    5d96:	56 1f       	adc	r21, r22
    5d98:	c7 1f       	adc	r28, r23
    5d9a:	d8 1f       	adc	r29, r24
    5d9c:	99 0f       	add	r25, r25
    5d9e:	66 1f       	adc	r22, r22
    5da0:	77 1f       	adc	r23, r23
    5da2:	88 1f       	adc	r24, r24
    5da4:	06 94       	lsr	r0
    5da6:	a9 f7       	brne	.-22     	; 0x5d92 <__ftoa_engine+0xc8>
    5da8:	84 91       	lpm	r24, Z
    5daa:	10 95       	com	r17
    5dac:	17 70       	andi	r17, 0x07	; 7
    5dae:	41 f0       	breq	.+16     	; 0x5dc0 <__ftoa_engine+0xf6>
    5db0:	d6 95       	lsr	r29
    5db2:	c7 95       	ror	r28
    5db4:	57 95       	ror	r21
    5db6:	47 95       	ror	r20
    5db8:	f7 94       	ror	r15
    5dba:	e7 94       	ror	r14
    5dbc:	1a 95       	dec	r17
    5dbe:	c1 f7       	brne	.-16     	; 0x5db0 <__ftoa_engine+0xe6>
    5dc0:	e2 ea       	ldi	r30, 0xA2	; 162
    5dc2:	f1 e0       	ldi	r31, 0x01	; 1
    5dc4:	68 94       	set
    5dc6:	15 90       	lpm	r1, Z+
    5dc8:	15 91       	lpm	r17, Z+
    5dca:	35 91       	lpm	r19, Z+
    5dcc:	65 91       	lpm	r22, Z+
    5dce:	95 91       	lpm	r25, Z+
    5dd0:	05 90       	lpm	r0, Z+
    5dd2:	7f e2       	ldi	r23, 0x2F	; 47
    5dd4:	73 95       	inc	r23
    5dd6:	e1 18       	sub	r14, r1
    5dd8:	f1 0a       	sbc	r15, r17
    5dda:	43 0b       	sbc	r20, r19
    5ddc:	56 0b       	sbc	r21, r22
    5dde:	c9 0b       	sbc	r28, r25
    5de0:	d0 09       	sbc	r29, r0
    5de2:	c0 f7       	brcc	.-16     	; 0x5dd4 <__ftoa_engine+0x10a>
    5de4:	e1 0c       	add	r14, r1
    5de6:	f1 1e       	adc	r15, r17
    5de8:	43 1f       	adc	r20, r19
    5dea:	56 1f       	adc	r21, r22
    5dec:	c9 1f       	adc	r28, r25
    5dee:	d0 1d       	adc	r29, r0
    5df0:	7e f4       	brtc	.+30     	; 0x5e10 <__ftoa_engine+0x146>
    5df2:	70 33       	cpi	r23, 0x30	; 48
    5df4:	11 f4       	brne	.+4      	; 0x5dfa <__ftoa_engine+0x130>
    5df6:	8a 95       	dec	r24
    5df8:	e6 cf       	rjmp	.-52     	; 0x5dc6 <__ftoa_engine+0xfc>
    5dfa:	e8 94       	clt
    5dfc:	01 50       	subi	r16, 0x01	; 1
    5dfe:	30 f0       	brcs	.+12     	; 0x5e0c <__ftoa_engine+0x142>
    5e00:	08 0f       	add	r16, r24
    5e02:	0a f4       	brpl	.+2      	; 0x5e06 <__ftoa_engine+0x13c>
    5e04:	00 27       	eor	r16, r16
    5e06:	02 17       	cp	r16, r18
    5e08:	08 f4       	brcc	.+2      	; 0x5e0c <__ftoa_engine+0x142>
    5e0a:	20 2f       	mov	r18, r16
    5e0c:	23 95       	inc	r18
    5e0e:	02 2f       	mov	r16, r18
    5e10:	7a 33       	cpi	r23, 0x3A	; 58
    5e12:	28 f0       	brcs	.+10     	; 0x5e1e <__ftoa_engine+0x154>
    5e14:	79 e3       	ldi	r23, 0x39	; 57
    5e16:	7d 93       	st	X+, r23
    5e18:	2a 95       	dec	r18
    5e1a:	e9 f7       	brne	.-6      	; 0x5e16 <__ftoa_engine+0x14c>
    5e1c:	10 c0       	rjmp	.+32     	; 0x5e3e <__ftoa_engine+0x174>
    5e1e:	7d 93       	st	X+, r23
    5e20:	2a 95       	dec	r18
    5e22:	89 f6       	brne	.-94     	; 0x5dc6 <__ftoa_engine+0xfc>
    5e24:	06 94       	lsr	r0
    5e26:	97 95       	ror	r25
    5e28:	67 95       	ror	r22
    5e2a:	37 95       	ror	r19
    5e2c:	17 95       	ror	r17
    5e2e:	17 94       	ror	r1
    5e30:	e1 18       	sub	r14, r1
    5e32:	f1 0a       	sbc	r15, r17
    5e34:	43 0b       	sbc	r20, r19
    5e36:	56 0b       	sbc	r21, r22
    5e38:	c9 0b       	sbc	r28, r25
    5e3a:	d0 09       	sbc	r29, r0
    5e3c:	98 f0       	brcs	.+38     	; 0x5e64 <__ftoa_engine+0x19a>
    5e3e:	23 95       	inc	r18
    5e40:	7e 91       	ld	r23, -X
    5e42:	73 95       	inc	r23
    5e44:	7a 33       	cpi	r23, 0x3A	; 58
    5e46:	08 f0       	brcs	.+2      	; 0x5e4a <__ftoa_engine+0x180>
    5e48:	70 e3       	ldi	r23, 0x30	; 48
    5e4a:	7c 93       	st	X, r23
    5e4c:	20 13       	cpse	r18, r16
    5e4e:	b8 f7       	brcc	.-18     	; 0x5e3e <__ftoa_engine+0x174>
    5e50:	7e 91       	ld	r23, -X
    5e52:	70 61       	ori	r23, 0x10	; 16
    5e54:	7d 93       	st	X+, r23
    5e56:	30 f0       	brcs	.+12     	; 0x5e64 <__ftoa_engine+0x19a>
    5e58:	83 95       	inc	r24
    5e5a:	71 e3       	ldi	r23, 0x31	; 49
    5e5c:	7d 93       	st	X+, r23
    5e5e:	70 e3       	ldi	r23, 0x30	; 48
    5e60:	2a 95       	dec	r18
    5e62:	e1 f7       	brne	.-8      	; 0x5e5c <__ftoa_engine+0x192>
    5e64:	11 24       	eor	r1, r1
    5e66:	ef 90       	pop	r14
    5e68:	ff 90       	pop	r15
    5e6a:	0f 91       	pop	r16
    5e6c:	1f 91       	pop	r17
    5e6e:	cf 91       	pop	r28
    5e70:	df 91       	pop	r29
    5e72:	99 27       	eor	r25, r25
    5e74:	87 fd       	sbrc	r24, 7
    5e76:	90 95       	com	r25
    5e78:	08 95       	ret

00005e7a <strnlen_P>:
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	05 90       	lpm	r0, Z+
    5e7e:	61 50       	subi	r22, 0x01	; 1
    5e80:	70 40       	sbci	r23, 0x00	; 0
    5e82:	01 10       	cpse	r0, r1
    5e84:	d8 f7       	brcc	.-10     	; 0x5e7c <strnlen_P+0x2>
    5e86:	80 95       	com	r24
    5e88:	90 95       	com	r25
    5e8a:	8e 0f       	add	r24, r30
    5e8c:	9f 1f       	adc	r25, r31
    5e8e:	08 95       	ret

00005e90 <memcpy>:
    5e90:	fb 01       	movw	r30, r22
    5e92:	dc 01       	movw	r26, r24
    5e94:	02 c0       	rjmp	.+4      	; 0x5e9a <memcpy+0xa>
    5e96:	01 90       	ld	r0, Z+
    5e98:	0d 92       	st	X+, r0
    5e9a:	41 50       	subi	r20, 0x01	; 1
    5e9c:	50 40       	sbci	r21, 0x00	; 0
    5e9e:	d8 f7       	brcc	.-10     	; 0x5e96 <memcpy+0x6>
    5ea0:	08 95       	ret

00005ea2 <memset>:
    5ea2:	dc 01       	movw	r26, r24
    5ea4:	01 c0       	rjmp	.+2      	; 0x5ea8 <memset+0x6>
    5ea6:	6d 93       	st	X+, r22
    5ea8:	41 50       	subi	r20, 0x01	; 1
    5eaa:	50 40       	sbci	r21, 0x00	; 0
    5eac:	e0 f7       	brcc	.-8      	; 0x5ea6 <memset+0x4>
    5eae:	08 95       	ret

00005eb0 <strcasestr>:
    5eb0:	fb 01       	movw	r30, r22
    5eb2:	51 91       	ld	r21, Z+
    5eb4:	55 23       	and	r21, r21
    5eb6:	b1 f0       	breq	.+44     	; 0x5ee4 <strcasestr+0x34>
    5eb8:	bf 01       	movw	r22, r30
    5eba:	dc 01       	movw	r26, r24
    5ebc:	05 2e       	mov	r0, r21
    5ebe:	4d 91       	ld	r20, X+
    5ec0:	44 23       	and	r20, r20
    5ec2:	69 f0       	breq	.+26     	; 0x5ede <strcasestr+0x2e>
    5ec4:	10 d0       	rcall	.+32     	; 0x5ee6 <strcasestr+0x36>
    5ec6:	d9 f7       	brne	.-10     	; 0x5ebe <strcasestr+0xe>
    5ec8:	cd 01       	movw	r24, r26
    5eca:	01 90       	ld	r0, Z+
    5ecc:	00 20       	and	r0, r0
    5ece:	49 f0       	breq	.+18     	; 0x5ee2 <strcasestr+0x32>
    5ed0:	4d 91       	ld	r20, X+
    5ed2:	41 11       	cpse	r20, r1
    5ed4:	08 d0       	rcall	.+16     	; 0x5ee6 <strcasestr+0x36>
    5ed6:	c9 f3       	breq	.-14     	; 0x5eca <strcasestr+0x1a>
    5ed8:	fb 01       	movw	r30, r22
    5eda:	41 11       	cpse	r20, r1
    5edc:	ee cf       	rjmp	.-36     	; 0x5eba <strcasestr+0xa>
    5ede:	81 e0       	ldi	r24, 0x01	; 1
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	01 97       	sbiw	r24, 0x01	; 1
    5ee4:	08 95       	ret
    5ee6:	40 25       	eor	r20, r0
    5ee8:	39 f0       	breq	.+14     	; 0x5ef8 <strcasestr+0x48>
    5eea:	40 32       	cpi	r20, 0x20	; 32
    5eec:	29 f4       	brne	.+10     	; 0x5ef8 <strcasestr+0x48>
    5eee:	40 29       	or	r20, r0
    5ef0:	4b 57       	subi	r20, 0x7B	; 123
    5ef2:	46 5e       	subi	r20, 0xE6	; 230
    5ef4:	08 f0       	brcs	.+2      	; 0x5ef8 <strcasestr+0x48>
    5ef6:	18 94       	sez
    5ef8:	08 95       	ret

00005efa <strcat>:
    5efa:	fb 01       	movw	r30, r22
    5efc:	dc 01       	movw	r26, r24
    5efe:	0d 90       	ld	r0, X+
    5f00:	00 20       	and	r0, r0
    5f02:	e9 f7       	brne	.-6      	; 0x5efe <strcat+0x4>
    5f04:	11 97       	sbiw	r26, 0x01	; 1
    5f06:	01 90       	ld	r0, Z+
    5f08:	0d 92       	st	X+, r0
    5f0a:	00 20       	and	r0, r0
    5f0c:	e1 f7       	brne	.-8      	; 0x5f06 <strcat+0xc>
    5f0e:	08 95       	ret

00005f10 <strcpy>:
    5f10:	fb 01       	movw	r30, r22
    5f12:	dc 01       	movw	r26, r24
    5f14:	01 90       	ld	r0, Z+
    5f16:	0d 92       	st	X+, r0
    5f18:	00 20       	and	r0, r0
    5f1a:	e1 f7       	brne	.-8      	; 0x5f14 <strcpy+0x4>
    5f1c:	08 95       	ret

00005f1e <strncasecmp>:
    5f1e:	fb 01       	movw	r30, r22
    5f20:	dc 01       	movw	r26, r24
    5f22:	41 50       	subi	r20, 0x01	; 1
    5f24:	50 40       	sbci	r21, 0x00	; 0
    5f26:	88 f0       	brcs	.+34     	; 0x5f4a <strncasecmp+0x2c>
    5f28:	8d 91       	ld	r24, X+
    5f2a:	81 34       	cpi	r24, 0x41	; 65
    5f2c:	1c f0       	brlt	.+6      	; 0x5f34 <strncasecmp+0x16>
    5f2e:	8b 35       	cpi	r24, 0x5B	; 91
    5f30:	0c f4       	brge	.+2      	; 0x5f34 <strncasecmp+0x16>
    5f32:	80 5e       	subi	r24, 0xE0	; 224
    5f34:	61 91       	ld	r22, Z+
    5f36:	61 34       	cpi	r22, 0x41	; 65
    5f38:	1c f0       	brlt	.+6      	; 0x5f40 <strncasecmp+0x22>
    5f3a:	6b 35       	cpi	r22, 0x5B	; 91
    5f3c:	0c f4       	brge	.+2      	; 0x5f40 <strncasecmp+0x22>
    5f3e:	60 5e       	subi	r22, 0xE0	; 224
    5f40:	86 1b       	sub	r24, r22
    5f42:	61 11       	cpse	r22, r1
    5f44:	71 f3       	breq	.-36     	; 0x5f22 <strncasecmp+0x4>
    5f46:	99 0b       	sbc	r25, r25
    5f48:	08 95       	ret
    5f4a:	88 1b       	sub	r24, r24
    5f4c:	fc cf       	rjmp	.-8      	; 0x5f46 <strncasecmp+0x28>

00005f4e <strnlen>:
    5f4e:	fc 01       	movw	r30, r24
    5f50:	61 50       	subi	r22, 0x01	; 1
    5f52:	70 40       	sbci	r23, 0x00	; 0
    5f54:	01 90       	ld	r0, Z+
    5f56:	01 10       	cpse	r0, r1
    5f58:	d8 f7       	brcc	.-10     	; 0x5f50 <strnlen+0x2>
    5f5a:	80 95       	com	r24
    5f5c:	90 95       	com	r25
    5f5e:	8e 0f       	add	r24, r30
    5f60:	9f 1f       	adc	r25, r31
    5f62:	08 95       	ret

00005f64 <fputc>:
    5f64:	0f 93       	push	r16
    5f66:	1f 93       	push	r17
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	fb 01       	movw	r30, r22
    5f6e:	23 81       	ldd	r18, Z+3	; 0x03
    5f70:	21 fd       	sbrc	r18, 1
    5f72:	03 c0       	rjmp	.+6      	; 0x5f7a <fputc+0x16>
    5f74:	8f ef       	ldi	r24, 0xFF	; 255
    5f76:	9f ef       	ldi	r25, 0xFF	; 255
    5f78:	2c c0       	rjmp	.+88     	; 0x5fd2 <fputc+0x6e>
    5f7a:	22 ff       	sbrs	r18, 2
    5f7c:	16 c0       	rjmp	.+44     	; 0x5faa <fputc+0x46>
    5f7e:	46 81       	ldd	r20, Z+6	; 0x06
    5f80:	57 81       	ldd	r21, Z+7	; 0x07
    5f82:	24 81       	ldd	r18, Z+4	; 0x04
    5f84:	35 81       	ldd	r19, Z+5	; 0x05
    5f86:	42 17       	cp	r20, r18
    5f88:	53 07       	cpc	r21, r19
    5f8a:	44 f4       	brge	.+16     	; 0x5f9c <fputc+0x38>
    5f8c:	a0 81       	ld	r26, Z
    5f8e:	b1 81       	ldd	r27, Z+1	; 0x01
    5f90:	9d 01       	movw	r18, r26
    5f92:	2f 5f       	subi	r18, 0xFF	; 255
    5f94:	3f 4f       	sbci	r19, 0xFF	; 255
    5f96:	31 83       	std	Z+1, r19	; 0x01
    5f98:	20 83       	st	Z, r18
    5f9a:	8c 93       	st	X, r24
    5f9c:	26 81       	ldd	r18, Z+6	; 0x06
    5f9e:	37 81       	ldd	r19, Z+7	; 0x07
    5fa0:	2f 5f       	subi	r18, 0xFF	; 255
    5fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa4:	37 83       	std	Z+7, r19	; 0x07
    5fa6:	26 83       	std	Z+6, r18	; 0x06
    5fa8:	14 c0       	rjmp	.+40     	; 0x5fd2 <fputc+0x6e>
    5faa:	8b 01       	movw	r16, r22
    5fac:	ec 01       	movw	r28, r24
    5fae:	fb 01       	movw	r30, r22
    5fb0:	00 84       	ldd	r0, Z+8	; 0x08
    5fb2:	f1 85       	ldd	r31, Z+9	; 0x09
    5fb4:	e0 2d       	mov	r30, r0
    5fb6:	19 95       	eicall
    5fb8:	89 2b       	or	r24, r25
    5fba:	e1 f6       	brne	.-72     	; 0x5f74 <fputc+0x10>
    5fbc:	d8 01       	movw	r26, r16
    5fbe:	16 96       	adiw	r26, 0x06	; 6
    5fc0:	8d 91       	ld	r24, X+
    5fc2:	9c 91       	ld	r25, X
    5fc4:	17 97       	sbiw	r26, 0x07	; 7
    5fc6:	01 96       	adiw	r24, 0x01	; 1
    5fc8:	17 96       	adiw	r26, 0x07	; 7
    5fca:	9c 93       	st	X, r25
    5fcc:	8e 93       	st	-X, r24
    5fce:	16 97       	sbiw	r26, 0x06	; 6
    5fd0:	ce 01       	movw	r24, r28
    5fd2:	df 91       	pop	r29
    5fd4:	cf 91       	pop	r28
    5fd6:	1f 91       	pop	r17
    5fd8:	0f 91       	pop	r16
    5fda:	08 95       	ret

00005fdc <printf>:
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	cd b7       	in	r28, 0x3d	; 61
    5fe2:	de b7       	in	r29, 0x3e	; 62
    5fe4:	ae 01       	movw	r20, r28
    5fe6:	4a 5f       	subi	r20, 0xFA	; 250
    5fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fea:	fa 01       	movw	r30, r20
    5fec:	61 91       	ld	r22, Z+
    5fee:	71 91       	ld	r23, Z+
    5ff0:	af 01       	movw	r20, r30
    5ff2:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <__iob+0x2>
    5ff6:	90 91 a2 12 	lds	r25, 0x12A2	; 0x8012a2 <__iob+0x3>
    5ffa:	75 d8       	rcall	.-3862   	; 0x50e6 <vfprintf>
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	08 95       	ret

00006002 <puts>:
    6002:	0f 93       	push	r16
    6004:	1f 93       	push	r17
    6006:	cf 93       	push	r28
    6008:	df 93       	push	r29
    600a:	e0 91 a1 12 	lds	r30, 0x12A1	; 0x8012a1 <__iob+0x2>
    600e:	f0 91 a2 12 	lds	r31, 0x12A2	; 0x8012a2 <__iob+0x3>
    6012:	23 81       	ldd	r18, Z+3	; 0x03
    6014:	21 ff       	sbrs	r18, 1
    6016:	1b c0       	rjmp	.+54     	; 0x604e <puts+0x4c>
    6018:	8c 01       	movw	r16, r24
    601a:	d0 e0       	ldi	r29, 0x00	; 0
    601c:	c0 e0       	ldi	r28, 0x00	; 0
    601e:	f8 01       	movw	r30, r16
    6020:	81 91       	ld	r24, Z+
    6022:	8f 01       	movw	r16, r30
    6024:	60 91 a1 12 	lds	r22, 0x12A1	; 0x8012a1 <__iob+0x2>
    6028:	70 91 a2 12 	lds	r23, 0x12A2	; 0x8012a2 <__iob+0x3>
    602c:	db 01       	movw	r26, r22
    602e:	18 96       	adiw	r26, 0x08	; 8
    6030:	ed 91       	ld	r30, X+
    6032:	fc 91       	ld	r31, X
    6034:	19 97       	sbiw	r26, 0x09	; 9
    6036:	88 23       	and	r24, r24
    6038:	31 f0       	breq	.+12     	; 0x6046 <puts+0x44>
    603a:	19 95       	eicall
    603c:	89 2b       	or	r24, r25
    603e:	79 f3       	breq	.-34     	; 0x601e <puts+0x1c>
    6040:	df ef       	ldi	r29, 0xFF	; 255
    6042:	cf ef       	ldi	r28, 0xFF	; 255
    6044:	ec cf       	rjmp	.-40     	; 0x601e <puts+0x1c>
    6046:	8a e0       	ldi	r24, 0x0A	; 10
    6048:	19 95       	eicall
    604a:	89 2b       	or	r24, r25
    604c:	19 f0       	breq	.+6      	; 0x6054 <puts+0x52>
    604e:	8f ef       	ldi	r24, 0xFF	; 255
    6050:	9f ef       	ldi	r25, 0xFF	; 255
    6052:	02 c0       	rjmp	.+4      	; 0x6058 <puts+0x56>
    6054:	8d 2f       	mov	r24, r29
    6056:	9c 2f       	mov	r25, r28
    6058:	df 91       	pop	r29
    605a:	cf 91       	pop	r28
    605c:	1f 91       	pop	r17
    605e:	0f 91       	pop	r16
    6060:	08 95       	ret

00006062 <sprintf>:
    6062:	0f 93       	push	r16
    6064:	1f 93       	push	r17
    6066:	cf 93       	push	r28
    6068:	df 93       	push	r29
    606a:	cd b7       	in	r28, 0x3d	; 61
    606c:	de b7       	in	r29, 0x3e	; 62
    606e:	2e 97       	sbiw	r28, 0x0e	; 14
    6070:	0f b6       	in	r0, 0x3f	; 63
    6072:	f8 94       	cli
    6074:	de bf       	out	0x3e, r29	; 62
    6076:	0f be       	out	0x3f, r0	; 63
    6078:	cd bf       	out	0x3d, r28	; 61
    607a:	0e 89       	ldd	r16, Y+22	; 0x16
    607c:	1f 89       	ldd	r17, Y+23	; 0x17
    607e:	86 e0       	ldi	r24, 0x06	; 6
    6080:	8c 83       	std	Y+4, r24	; 0x04
    6082:	1a 83       	std	Y+2, r17	; 0x02
    6084:	09 83       	std	Y+1, r16	; 0x01
    6086:	8f ef       	ldi	r24, 0xFF	; 255
    6088:	9f e7       	ldi	r25, 0x7F	; 127
    608a:	9e 83       	std	Y+6, r25	; 0x06
    608c:	8d 83       	std	Y+5, r24	; 0x05
    608e:	ae 01       	movw	r20, r28
    6090:	46 5e       	subi	r20, 0xE6	; 230
    6092:	5f 4f       	sbci	r21, 0xFF	; 255
    6094:	68 8d       	ldd	r22, Y+24	; 0x18
    6096:	79 8d       	ldd	r23, Y+25	; 0x19
    6098:	ce 01       	movw	r24, r28
    609a:	01 96       	adiw	r24, 0x01	; 1
    609c:	24 d8       	rcall	.-4024   	; 0x50e6 <vfprintf>
    609e:	ef 81       	ldd	r30, Y+7	; 0x07
    60a0:	f8 85       	ldd	r31, Y+8	; 0x08
    60a2:	e0 0f       	add	r30, r16
    60a4:	f1 1f       	adc	r31, r17
    60a6:	10 82       	st	Z, r1
    60a8:	2e 96       	adiw	r28, 0x0e	; 14
    60aa:	0f b6       	in	r0, 0x3f	; 63
    60ac:	f8 94       	cli
    60ae:	de bf       	out	0x3e, r29	; 62
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	cd bf       	out	0x3d, r28	; 61
    60b4:	df 91       	pop	r29
    60b6:	cf 91       	pop	r28
    60b8:	1f 91       	pop	r17
    60ba:	0f 91       	pop	r16
    60bc:	08 95       	ret

000060be <__ultoa_invert>:
    60be:	fa 01       	movw	r30, r20
    60c0:	aa 27       	eor	r26, r26
    60c2:	28 30       	cpi	r18, 0x08	; 8
    60c4:	51 f1       	breq	.+84     	; 0x611a <__ultoa_invert+0x5c>
    60c6:	20 31       	cpi	r18, 0x10	; 16
    60c8:	81 f1       	breq	.+96     	; 0x612a <__ultoa_invert+0x6c>
    60ca:	e8 94       	clt
    60cc:	6f 93       	push	r22
    60ce:	6e 7f       	andi	r22, 0xFE	; 254
    60d0:	6e 5f       	subi	r22, 0xFE	; 254
    60d2:	7f 4f       	sbci	r23, 0xFF	; 255
    60d4:	8f 4f       	sbci	r24, 0xFF	; 255
    60d6:	9f 4f       	sbci	r25, 0xFF	; 255
    60d8:	af 4f       	sbci	r26, 0xFF	; 255
    60da:	b1 e0       	ldi	r27, 0x01	; 1
    60dc:	3e d0       	rcall	.+124    	; 0x615a <__ultoa_invert+0x9c>
    60de:	b4 e0       	ldi	r27, 0x04	; 4
    60e0:	3c d0       	rcall	.+120    	; 0x615a <__ultoa_invert+0x9c>
    60e2:	67 0f       	add	r22, r23
    60e4:	78 1f       	adc	r23, r24
    60e6:	89 1f       	adc	r24, r25
    60e8:	9a 1f       	adc	r25, r26
    60ea:	a1 1d       	adc	r26, r1
    60ec:	68 0f       	add	r22, r24
    60ee:	79 1f       	adc	r23, r25
    60f0:	8a 1f       	adc	r24, r26
    60f2:	91 1d       	adc	r25, r1
    60f4:	a1 1d       	adc	r26, r1
    60f6:	6a 0f       	add	r22, r26
    60f8:	71 1d       	adc	r23, r1
    60fa:	81 1d       	adc	r24, r1
    60fc:	91 1d       	adc	r25, r1
    60fe:	a1 1d       	adc	r26, r1
    6100:	20 d0       	rcall	.+64     	; 0x6142 <__ultoa_invert+0x84>
    6102:	09 f4       	brne	.+2      	; 0x6106 <__ultoa_invert+0x48>
    6104:	68 94       	set
    6106:	3f 91       	pop	r19
    6108:	2a e0       	ldi	r18, 0x0A	; 10
    610a:	26 9f       	mul	r18, r22
    610c:	11 24       	eor	r1, r1
    610e:	30 19       	sub	r19, r0
    6110:	30 5d       	subi	r19, 0xD0	; 208
    6112:	31 93       	st	Z+, r19
    6114:	de f6       	brtc	.-74     	; 0x60cc <__ultoa_invert+0xe>
    6116:	cf 01       	movw	r24, r30
    6118:	08 95       	ret
    611a:	46 2f       	mov	r20, r22
    611c:	47 70       	andi	r20, 0x07	; 7
    611e:	40 5d       	subi	r20, 0xD0	; 208
    6120:	41 93       	st	Z+, r20
    6122:	b3 e0       	ldi	r27, 0x03	; 3
    6124:	0f d0       	rcall	.+30     	; 0x6144 <__ultoa_invert+0x86>
    6126:	c9 f7       	brne	.-14     	; 0x611a <__ultoa_invert+0x5c>
    6128:	f6 cf       	rjmp	.-20     	; 0x6116 <__ultoa_invert+0x58>
    612a:	46 2f       	mov	r20, r22
    612c:	4f 70       	andi	r20, 0x0F	; 15
    612e:	40 5d       	subi	r20, 0xD0	; 208
    6130:	4a 33       	cpi	r20, 0x3A	; 58
    6132:	18 f0       	brcs	.+6      	; 0x613a <__ultoa_invert+0x7c>
    6134:	49 5d       	subi	r20, 0xD9	; 217
    6136:	31 fd       	sbrc	r19, 1
    6138:	40 52       	subi	r20, 0x20	; 32
    613a:	41 93       	st	Z+, r20
    613c:	02 d0       	rcall	.+4      	; 0x6142 <__ultoa_invert+0x84>
    613e:	a9 f7       	brne	.-22     	; 0x612a <__ultoa_invert+0x6c>
    6140:	ea cf       	rjmp	.-44     	; 0x6116 <__ultoa_invert+0x58>
    6142:	b4 e0       	ldi	r27, 0x04	; 4
    6144:	a6 95       	lsr	r26
    6146:	97 95       	ror	r25
    6148:	87 95       	ror	r24
    614a:	77 95       	ror	r23
    614c:	67 95       	ror	r22
    614e:	ba 95       	dec	r27
    6150:	c9 f7       	brne	.-14     	; 0x6144 <__ultoa_invert+0x86>
    6152:	00 97       	sbiw	r24, 0x00	; 0
    6154:	61 05       	cpc	r22, r1
    6156:	71 05       	cpc	r23, r1
    6158:	08 95       	ret
    615a:	9b 01       	movw	r18, r22
    615c:	ac 01       	movw	r20, r24
    615e:	0a 2e       	mov	r0, r26
    6160:	06 94       	lsr	r0
    6162:	57 95       	ror	r21
    6164:	47 95       	ror	r20
    6166:	37 95       	ror	r19
    6168:	27 95       	ror	r18
    616a:	ba 95       	dec	r27
    616c:	c9 f7       	brne	.-14     	; 0x6160 <__ultoa_invert+0xa2>
    616e:	62 0f       	add	r22, r18
    6170:	73 1f       	adc	r23, r19
    6172:	84 1f       	adc	r24, r20
    6174:	95 1f       	adc	r25, r21
    6176:	a0 1d       	adc	r26, r0
    6178:	08 95       	ret

0000617a <_exit>:
    617a:	f8 94       	cli

0000617c <__stop_program>:
    617c:	ff cf       	rjmp	.-2      	; 0x617c <__stop_program>
