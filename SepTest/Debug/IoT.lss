
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ea  00800200  000070f6  0000718a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000070f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c2b  008008ea  008008ea  00007874  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000078d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b50  00000000  00000000  00007910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e684  00000000  00000000  00008460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000389b  00000000  00000000  00016ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f66  00000000  00000000  0001a37f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002974  00000000  00000000  000212e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048e0  00000000  00000000  00023c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d3cd  00000000  00000000  0002853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa0  00000000  00000000  00035909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__vector_25>
      68:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 df 2a 	jmp	0x55be	; 0x55be <__vector_36>
      94:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 71 2f 	jmp	0x5ee2	; 0x5ee2 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 75 2b 	jmp	0x56ea	; 0x56ea <__vector_51>
      d0:	0c 94 c7 2b 	jmp	0x578e	; 0x578e <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 0b 2c 	jmp	0x5816	; 0x5816 <__vector_54>
      dc:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	91 20       	and	r9, r1
      e6:	91 20       	and	r9, r1
      e8:	91 20       	and	r9, r1
      ea:	c8 20       	and	r12, r8
      ec:	d0 20       	and	r13, r0
      ee:	e5 20       	and	r14, r5
      f0:	91 20       	and	r9, r1
      f2:	91 20       	and	r9, r1
      f4:	c8 20       	and	r12, r8
      f6:	d0 20       	and	r13, r0
      f8:	93 2f       	mov	r25, r19
      fa:	03 30       	cpi	r16, 0x03	; 3
      fc:	03 30       	cpi	r16, 0x03	; 3
      fe:	03 30       	cpi	r16, 0x03	; 3
     100:	03 30       	cpi	r16, 0x03	; 3
     102:	03 30       	cpi	r16, 0x03	; 3
     104:	03 30       	cpi	r16, 0x03	; 3
     106:	03 30       	cpi	r16, 0x03	; 3
     108:	93 2f       	mov	r25, r19
     10a:	03 30       	cpi	r16, 0x03	; 3
     10c:	03 30       	cpi	r16, 0x03	; 3
     10e:	03 30       	cpi	r16, 0x03	; 3
     110:	03 30       	cpi	r16, 0x03	; 3
     112:	03 30       	cpi	r16, 0x03	; 3
     114:	03 30       	cpi	r16, 0x03	; 3
     116:	03 30       	cpi	r16, 0x03	; 3
     118:	95 2f       	mov	r25, r21
     11a:	03 30       	cpi	r16, 0x03	; 3
     11c:	03 30       	cpi	r16, 0x03	; 3
     11e:	03 30       	cpi	r16, 0x03	; 3
     120:	03 30       	cpi	r16, 0x03	; 3
     122:	03 30       	cpi	r16, 0x03	; 3
     124:	03 30       	cpi	r16, 0x03	; 3
     126:	03 30       	cpi	r16, 0x03	; 3
     128:	03 30       	cpi	r16, 0x03	; 3
     12a:	03 30       	cpi	r16, 0x03	; 3
     12c:	03 30       	cpi	r16, 0x03	; 3
     12e:	03 30       	cpi	r16, 0x03	; 3
     130:	03 30       	cpi	r16, 0x03	; 3
     132:	03 30       	cpi	r16, 0x03	; 3
     134:	03 30       	cpi	r16, 0x03	; 3
     136:	03 30       	cpi	r16, 0x03	; 3
     138:	95 2f       	mov	r25, r21
     13a:	03 30       	cpi	r16, 0x03	; 3
     13c:	03 30       	cpi	r16, 0x03	; 3
     13e:	03 30       	cpi	r16, 0x03	; 3
     140:	03 30       	cpi	r16, 0x03	; 3
     142:	03 30       	cpi	r16, 0x03	; 3
     144:	03 30       	cpi	r16, 0x03	; 3
     146:	03 30       	cpi	r16, 0x03	; 3
     148:	03 30       	cpi	r16, 0x03	; 3
     14a:	03 30       	cpi	r16, 0x03	; 3
     14c:	03 30       	cpi	r16, 0x03	; 3
     14e:	03 30       	cpi	r16, 0x03	; 3
     150:	03 30       	cpi	r16, 0x03	; 3
     152:	03 30       	cpi	r16, 0x03	; 3
     154:	03 30       	cpi	r16, 0x03	; 3
     156:	03 30       	cpi	r16, 0x03	; 3
     158:	ff 2f       	mov	r31, r31
     15a:	03 30       	cpi	r16, 0x03	; 3
     15c:	03 30       	cpi	r16, 0x03	; 3
     15e:	03 30       	cpi	r16, 0x03	; 3
     160:	03 30       	cpi	r16, 0x03	; 3
     162:	03 30       	cpi	r16, 0x03	; 3
     164:	03 30       	cpi	r16, 0x03	; 3
     166:	03 30       	cpi	r16, 0x03	; 3
     168:	ca 2f       	mov	r28, r26
     16a:	03 30       	cpi	r16, 0x03	; 3
     16c:	03 30       	cpi	r16, 0x03	; 3
     16e:	03 30       	cpi	r16, 0x03	; 3
     170:	03 30       	cpi	r16, 0x03	; 3
     172:	03 30       	cpi	r16, 0x03	; 3
     174:	03 30       	cpi	r16, 0x03	; 3
     176:	03 30       	cpi	r16, 0x03	; 3
     178:	03 30       	cpi	r16, 0x03	; 3
     17a:	03 30       	cpi	r16, 0x03	; 3
     17c:	03 30       	cpi	r16, 0x03	; 3
     17e:	03 30       	cpi	r16, 0x03	; 3
     180:	03 30       	cpi	r16, 0x03	; 3
     182:	03 30       	cpi	r16, 0x03	; 3
     184:	03 30       	cpi	r16, 0x03	; 3
     186:	03 30       	cpi	r16, 0x03	; 3
     188:	be 2f       	mov	r27, r30
     18a:	03 30       	cpi	r16, 0x03	; 3
     18c:	03 30       	cpi	r16, 0x03	; 3
     18e:	03 30       	cpi	r16, 0x03	; 3
     190:	03 30       	cpi	r16, 0x03	; 3
     192:	03 30       	cpi	r16, 0x03	; 3
     194:	03 30       	cpi	r16, 0x03	; 3
     196:	03 30       	cpi	r16, 0x03	; 3
     198:	e2 2f       	mov	r30, r18

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <prvCheckTasksWaitingTermination>
     2a0:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
     2ac:	0e 94 0e 21 	call	0x421c	; 0x421c <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 03 20 	call	0x4006	; 0x4006 <prvProcessTimerOrBlockTask>
     2ca:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	18 e0       	ldi	r17, 0x08	; 8
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	e6 ef       	ldi	r30, 0xF6	; 246
     2e8:	f0 e7       	ldi	r31, 0x70	; 112
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	aa 3e       	cpi	r26, 0xEA	; 234
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	25 e1       	ldi	r18, 0x15	; 21
     2fc:	aa ee       	ldi	r26, 0xEA	; 234
     2fe:	b8 e0       	ldi	r27, 0x08	; 8
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a5 31       	cpi	r26, 0x15	; 21
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 c5 21 	call	0x438a	; 0x438a <main>
     30e:	0c 94 79 38 	jmp	0x70f2	; 0x70f2 <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:
	uint16_t CO2;
	} CO2Handler;
	
	
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 f6 14 	sts	0x14F6, r25	; 0x8014f6 <ppm+0x1>
     318:	80 93 f5 14 	sts	0x14F5, r24	; 0x8014f5 <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:

uint16_t getCO2(CO2_t self){
	return self->CO2;
}

void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32c:	0e 94 23 14 	call	0x2846	; 0x2846 <xTaskGetTickCount>
     330:	69 83       	std	Y+1, r22	; 0x01
     332:	7a 83       	std	Y+2, r23	; 0x02
     334:	8b 83       	std	Y+3, r24	; 0x03
     336:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     338:	40 ee       	ldi	r20, 0xE0	; 224
     33a:	53 e0       	ldi	r21, 0x03	; 3
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 39 16 	call	0x2c72	; 0x2c72 <xTaskDelayUntil>
		//need to set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     348:	40 91 f7 14 	lds	r20, 0x14F7	; 0x8014f7 <ready_bit>
     34c:	50 91 f8 14 	lds	r21, 0x14F8	; 0x8014f8 <ready_bit+0x1>
     350:	60 91 f9 14 	lds	r22, 0x14F9	; 0x8014f9 <ready_bit+0x2>
     354:	70 91 fa 14 	lds	r23, 0x14FA	; 0x8014fa <ready_bit+0x3>
     358:	cc 24       	eor	r12, r12
     35a:	ca 94       	dec	r12
     35c:	dc 2c       	mov	r13, r12
     35e:	76 01       	movw	r14, r12
     360:	01 e0       	ldi	r16, 0x01	; 1
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	80 91 fd 14 	lds	r24, 0x14FD	; 0x8014fd <group_start>
     368:	90 91 fe 14 	lds	r25, 0x14FE	; 0x8014fe <group_start+0x1>
     36c:	e5 d4       	rcall	.+2506   	; 0xd38 <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		rc = mh_z19_takeMeassuring();
     36e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <mh_z19_takeMeassuring>
     372:	80 93 f4 14 	sts	0x14F4, r24	; 0x8014f4 <rc>
		if (rc != MHZ19_OK){
     376:	81 11       	cpse	r24, r1
     378:	df cf       	rjmp	.-66     	; 0x338 <startReadingCO2+0x1a>
			// Something went wrong
		} else {
			
			if(xMutexSemaphore != NULL){
     37a:	80 91 fb 14 	lds	r24, 0x14FB	; 0x8014fb <xMutexSemaphore>
     37e:	90 91 fc 14 	lds	r25, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	c9 f2       	breq	.-78     	; 0x338 <startReadingCO2+0x1a>
				if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 10) == pdTRUE){
     386:	4a e0       	ldi	r20, 0x0A	; 10
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xQueueSemaphoreTake>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	21 f5       	brne	.+72     	; 0x3de <startReadingCO2+0xc0>
					((CO2_t)self)->CO2 = ppm;
     396:	80 91 f5 14 	lds	r24, 0x14F5	; 0x8014f5 <ppm>
     39a:	90 91 f6 14 	lds	r25, 0x14F6	; 0x8014f6 <ppm+0x1>
     39e:	f5 01       	movw	r30, r10
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
					printf("CO2 %d", ppm);
     3a4:	80 91 f6 14 	lds	r24, 0x14F6	; 0x8014f6 <ppm+0x1>
     3a8:	8f 93       	push	r24
     3aa:	80 91 f5 14 	lds	r24, 0x14F5	; 0x8014f5 <ppm>
     3ae:	8f 93       	push	r24
     3b0:	8f e6       	ldi	r24, 0x6F	; 111
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	9f 93       	push	r25
     3b6:	8f 93       	push	r24
     3b8:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
					xSemaphoreGive(xMutexSemaphore);
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 fb 14 	lds	r24, 0x14FB	; 0x8014fb <xMutexSemaphore>
     3cc:	90 91 fc 14 	lds	r25, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
     3d0:	0e 94 09 0c 	call	0x1812	; 0x1812 <xQueueGenericSend>
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	ad cf       	rjmp	.-166    	; 0x338 <startReadingCO2+0x1a>
				}
				else{
					printf("The mutex could not be obtained.");
     3de:	86 e7       	ldi	r24, 0x76	; 118
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	a4 cf       	rjmp	.-184    	; 0x338 <startReadingCO2+0x1a>

000003f0 <getCO2>:
	return new_measure;
}

uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	08 95       	ret

000003f8 <CO2_handler_init>:
		}
		
	}
}

void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	08 2f       	mov	r16, r24
     404:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     406:	40 91 f7 14 	lds	r20, 0x14F7	; 0x8014f7 <ready_bit>
     40a:	50 91 f8 14 	lds	r21, 0x14F8	; 0x8014f8 <ready_bit+0x1>
     40e:	60 91 f9 14 	lds	r22, 0x14F9	; 0x8014f9 <ready_bit+0x2>
     412:	70 91 fa 14 	lds	r23, 0x14FA	; 0x8014fa <ready_bit+0x3>
     416:	80 91 fd 14 	lds	r24, 0x14FD	; 0x8014fd <group_start>
     41a:	90 91 fe 14 	lds	r25, 0x14FE	; 0x8014fe <group_start+0x1>
     41e:	2c d5       	rcall	.+2648   	; 0xe78 <xEventGroupSetBits>

	xTaskCreate(
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	9e 01       	movw	r18, r28
     426:	44 e2       	ldi	r20, 0x24	; 36
     428:	51 e0       	ldi	r21, 0x01	; 1
     42a:	67 e9       	ldi	r22, 0x97	; 151
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	8f e8       	ldi	r24, 0x8F	; 143
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
	puts("CO2 initialized");
     436:	8f e9       	ldi	r24, 0x9F	; 159
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	08 95       	ret

0000044a <createCO2>:
void CO2_callback(uint16_t callback){
	ppm = callback;
}

CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex)
{
     44a:	8f 92       	push	r8
     44c:	9f 92       	push	r9
     44e:	af 92       	push	r10
     450:	bf 92       	push	r11
     452:	cf 92       	push	r12
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	7c 01       	movw	r14, r24
     464:	6b 01       	movw	r12, r22
     466:	49 01       	movw	r8, r18
     468:	5a 01       	movw	r10, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <malloc>
     472:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     474:	89 2b       	or	r24, r25
     476:	f9 f0       	breq	.+62     	; 0x4b6 <createCO2+0x6c>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     478:	19 82       	std	Y+1, r1	; 0x01
     47a:	18 82       	st	Y, r1
	
	group_start = taskBits;
     47c:	d0 92 fe 14 	sts	0x14FE, r13	; 0x8014fe <group_start+0x1>
     480:	c0 92 fd 14 	sts	0x14FD, r12	; 0x8014fd <group_start>
	ready_bit = bit;
     484:	80 92 f7 14 	sts	0x14F7, r8	; 0x8014f7 <ready_bit>
     488:	90 92 f8 14 	sts	0x14F8, r9	; 0x8014f8 <ready_bit+0x1>
     48c:	a0 92 f9 14 	sts	0x14F9, r10	; 0x8014f9 <ready_bit+0x2>
     490:	b0 92 fa 14 	sts	0x14FA, r11	; 0x8014fa <ready_bit+0x3>
	xMutexSemaphore = mutex;
     494:	10 93 fc 14 	sts	0x14FC, r17	; 0x8014fc <xMutexSemaphore+0x1>
     498:	00 93 fb 14 	sts	0x14FB, r16	; 0x8014fb <xMutexSemaphore>
	//maybe wait time here?
	mh_z19_initialise(ser_USART3);
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	0e 94 ad 28 	call	0x515a	; 0x515a <mh_z19_initialise>
	
	mh_z19_injectCallBack(CO2_callback);
     4a2:	8a e8       	ldi	r24, 0x8A	; 138
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     4aa:	be 01       	movw	r22, r28
     4ac:	c7 01       	movw	r24, r14
     4ae:	a4 df       	rcall	.-184    	; 0x3f8 <CO2_handler_init>
	return new_measure;
     4b0:	8c 2f       	mov	r24, r28
     4b2:	9d 2f       	mov	r25, r29
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <createCO2+0x70>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
	
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	08 95       	ret

000004d4 <DownLinkHandler_Create>:
//uint16_t openWindow;
static lora_driver_payload_t downlinkPayload;

void lora_downlink_handler_task(void* messageBuffer);

void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	08 2f       	mov	r16, r24
     4e0:	eb 01       	movw	r28, r22
	
	printf("downlink 1");
     4e2:	8f ea       	ldi	r24, 0xAF	; 175
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
	xTaskCreate(
     4ee:	e1 2c       	mov	r14, r1
     4f0:	f1 2c       	mov	r15, r1
     4f2:	9e 01       	movw	r18, r28
     4f4:	48 e8       	ldi	r20, 0x88	; 136
     4f6:	51 e0       	ldi	r21, 0x01	; 1
     4f8:	6a eb       	ldi	r22, 0xBA	; 186
     4fa:	72 e0       	ldi	r23, 0x02	; 2
     4fc:	8a eb       	ldi	r24, 0xBA	; 186
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	08 95       	ret

00000514 <lora_DownLinkHandler_StartTask>:
				lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
		}
}


void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
	
	printf("downlink 2");
     51e:	84 ed       	ldi	r24, 0xD4	; 212
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     52a:	0f ef       	ldi	r16, 0xFF	; 255
     52c:	1f ef       	ldi	r17, 0xFF	; 255
     52e:	98 01       	movw	r18, r16
     530:	46 e1       	ldi	r20, 0x16	; 22
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	6a ee       	ldi	r22, 0xEA	; 234
     536:	78 e0       	ldi	r23, 0x08	; 8
     538:	ce 01       	movw	r24, r28
     53a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <xStreamBufferReceive>
	printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     53e:	ea ee       	ldi	r30, 0xEA	; 234
     540:	f8 e0       	ldi	r31, 0x08	; 8
     542:	91 81       	ldd	r25, Z+1	; 0x01
     544:	80 81       	ld	r24, Z
     546:	1f 92       	push	r1
     548:	9f 93       	push	r25
     54a:	1f 92       	push	r1
     54c:	8f 93       	push	r24
     54e:	8f ed       	ldi	r24, 0xDF	; 223
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
	if (1 == downlinkPayload.len){
		//openWindow = (downlinkPayload.bytes[0]);
		//printf("down link %d", openWindow);
	}
}
     55a:	8d b7       	in	r24, 0x3d	; 61
     55c:	9e b7       	in	r25, 0x3e	; 62
     55e:	08 96       	adiw	r24, 0x08	; 8
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	9e bf       	out	0x3e, r25	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	8d bf       	out	0x3d, r24	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <lora_downlink_handler_task>:
	, NULL);
}



void lora_downlink_handler_task(void* downLinkMessageBuffer){
     574:	ec 01       	movw	r28, r24
		for(;;){
			
				lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     576:	ce 01       	movw	r24, r28
     578:	cd df       	rcall	.-102    	; 0x514 <lora_DownLinkHandler_StartTask>
     57a:	fd cf       	rjmp	.-6      	; 0x576 <lora_downlink_handler_task+0x2>

0000057c <tsl2591Callback>:
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
		measure_light((LightHandler_t) self);
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	00 d0       	rcall	.+0      	; 0x586 <tsl2591Callback+0xa>
     586:	00 d0       	rcall	.+0      	; 0x588 <tsl2591Callback+0xc>
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	09 f0       	breq	.+2      	; 0x592 <tsl2591Callback+0x16>
     590:	7c c0       	rjmp	.+248    	; 0x68a <tsl2591Callback+0x10e>
     592:	8b 01       	movw	r16, r22
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <tsl2591_getFullSpectrumRaw>
     59c:	81 11       	cpse	r24, r1
     59e:	0f c0       	rjmp	.+30     	; 0x5be <tsl2591Callback+0x42>
     5a0:	8a 81       	ldd	r24, Y+2	; 0x02
     5a2:	8f 93       	push	r24
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	8f 93       	push	r24
     5a8:	80 e1       	ldi	r24, 0x10	; 16
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <tsl2591Callback+0x4e>
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	21 f4       	brne	.+8      	; 0x5ca <tsl2591Callback+0x4e>
     5c2:	80 e2       	ldi	r24, 0x20	; 32
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	0e 94 77 2d 	call	0x5aee	; 0x5aee <tsl259_getVisibleRaw>
     5d2:	81 11       	cpse	r24, r1
     5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <tsl2591Callback+0x78>
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	8f 93       	push	r24
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	8f 93       	push	r24
     5de:	8b e5       	ldi	r24, 0x5B	; 91
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <tsl2591Callback+0x84>
     5f4:	83 30       	cpi	r24, 0x03	; 3
     5f6:	21 f4       	brne	.+8      	; 0x600 <tsl2591Callback+0x84>
     5f8:	8d e6       	ldi	r24, 0x6D	; 109
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <tsl2591_getInfraredRaw>
     608:	81 11       	cpse	r24, r1
     60a:	0f c0       	rjmp	.+30     	; 0x62a <tsl2591Callback+0xae>
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	8f 93       	push	r24
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	8f 93       	push	r24
     614:	81 ea       	ldi	r24, 0xA1	; 161
     616:	93 e0       	ldi	r25, 0x03	; 3
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	06 c0       	rjmp	.+12     	; 0x636 <tsl2591Callback+0xba>
     62a:	83 30       	cpi	r24, 0x03	; 3
     62c:	21 f4       	brne	.+8      	; 0x636 <tsl2591Callback+0xba>
     62e:	84 eb       	ldi	r24, 0xB4	; 180
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
     636:	ce 01       	movw	r24, r28
     638:	03 96       	adiw	r24, 0x03	; 3
     63a:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <tsl2591_getLux>
     63e:	81 11       	cpse	r24, r1
     640:	1e c0       	rjmp	.+60     	; 0x67e <tsl2591Callback+0x102>
     642:	6b 81       	ldd	r22, Y+3	; 0x03
     644:	7c 81       	ldd	r23, Y+4	; 0x04
     646:	8d 81       	ldd	r24, Y+5	; 0x05
     648:	9e 81       	ldd	r25, Y+6	; 0x06
     64a:	0e 94 ce 21 	call	0x439c	; 0x439c <__fixunssfsi>
     64e:	f8 01       	movw	r30, r16
     650:	71 83       	std	Z+1, r23	; 0x01
     652:	60 83       	st	Z, r22
     654:	8e 81       	ldd	r24, Y+6	; 0x06
     656:	8f 93       	push	r24
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	8f 93       	push	r24
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	8f 93       	push	r24
     660:	8b 81       	ldd	r24, Y+3	; 0x03
     662:	8f 93       	push	r24
     664:	89 ee       	ldi	r24, 0xE9	; 233
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	06 c0       	rjmp	.+12     	; 0x68a <tsl2591Callback+0x10e>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	21 f4       	brne	.+8      	; 0x68a <tsl2591Callback+0x10e>
     682:	85 ef       	ldi	r24, 0xF5	; 245
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
     68a:	26 96       	adiw	r28, 0x06	; 6
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <createLightSensor>:
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	7b 01       	movw	r14, r22
     6b6:	49 01       	movw	r8, r18
     6b8:	5a 01       	movw	r10, r20
     6ba:	62 e0       	ldi	r22, 0x02	; 2
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <calloc>
     6c6:	ec 01       	movw	r28, r24
     6c8:	89 2b       	or	r24, r25
     6ca:	09 f1       	breq	.+66     	; 0x70e <createLightSensor+0x6e>
     6cc:	19 82       	std	Y+1, r1	; 0x01
     6ce:	18 82       	st	Y, r1
     6d0:	80 92 f7 14 	sts	0x14F7, r8	; 0x8014f7 <ready_bit>
     6d4:	90 92 f8 14 	sts	0x14F8, r9	; 0x8014f8 <ready_bit+0x1>
     6d8:	a0 92 f9 14 	sts	0x14F9, r10	; 0x8014f9 <ready_bit+0x2>
     6dc:	b0 92 fa 14 	sts	0x14FA, r11	; 0x8014fa <ready_bit+0x3>
     6e0:	f0 92 fe 14 	sts	0x14FE, r15	; 0x8014fe <group_start+0x1>
     6e4:	e0 92 fd 14 	sts	0x14FD, r14	; 0x8014fd <group_start>
     6e8:	10 93 fc 14 	sts	0x14FC, r17	; 0x8014fc <xMutexSemaphore+0x1>
     6ec:	00 93 fb 14 	sts	0x14FB, r16	; 0x8014fb <xMutexSemaphore>
     6f0:	8e eb       	ldi	r24, 0xBE	; 190
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <tsl2591_initialise>
     6f8:	81 11       	cpse	r24, r1
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <createLightSensor+0x64>
     6fc:	85 e2       	ldi	r24, 0x25	; 37
     6fe:	94 e0       	ldi	r25, 0x04	; 4
     700:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
     704:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <tsl2591_enable>
     708:	8c 2f       	mov	r24, r28
     70a:	9d 2f       	mov	r25, r29
     70c:	02 c0       	rjmp	.+4      	; 0x712 <createLightSensor+0x72>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	9f 90       	pop	r9
     724:	8f 90       	pop	r8
     726:	08 95       	ret

00000728 <getLight>:
}


uint16_t getLight(LightHandler_t self){
	return self->lux;
}
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	08 95       	ret

00000730 <measureTempAndHum>:
		
		measureTempAndHum((Temperature_t) self);
	}
}

void measureTempAndHum(Temperature_t self){
     730:	0f 93       	push	r16
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
	if(xMutexSemaphore != NULL){
     736:	20 91 fb 14 	lds	r18, 0x14FB	; 0x8014fb <xMutexSemaphore>
     73a:	30 91 fc 14 	lds	r19, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
     73e:	21 15       	cp	r18, r1
     740:	31 05       	cpc	r19, r1
     742:	49 f1       	breq	.+82     	; 0x796 <measureTempAndHum+0x66>
     744:	ec 01       	movw	r28, r24
		if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 10) == pdTRUE){
     746:	4a e0       	ldi	r20, 0x0A	; 10
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	c9 01       	movw	r24, r18
     750:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xQueueSemaphoreTake>
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	b9 f4       	brne	.+46     	; 0x786 <measureTempAndHum+0x56>
			self->temperature = hih8120_getTemperature();
     758:	0e 94 ce 23 	call	0x479c	; 0x479c <hih8120_getTemperature>
     75c:	68 83       	st	Y, r22
     75e:	79 83       	std	Y+1, r23	; 0x01
     760:	8a 83       	std	Y+2, r24	; 0x02
     762:	9b 83       	std	Y+3, r25	; 0x03
			self->humidity = hih8120_getHumidityPercent_x10();
     764:	0e 94 c5 23 	call	0x478a	; 0x478a <hih8120_getHumidityPercent_x10>
     768:	9d 83       	std	Y+5, r25	; 0x05
     76a:	8c 83       	std	Y+4, r24	; 0x04
			xSemaphoreGive(xMutexSemaphore);
     76c:	00 e0       	ldi	r16, 0x00	; 0
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	a9 01       	movw	r20, r18
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 91 fb 14 	lds	r24, 0x14FB	; 0x8014fb <xMutexSemaphore>
     77c:	90 91 fc 14 	lds	r25, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
     780:	0e 94 09 0c 	call	0x1812	; 0x1812 <xQueueGenericSend>
     784:	08 c0       	rjmp	.+16     	; 0x796 <measureTempAndHum+0x66>
		}else{
			printf("The mutex could not be obtained.");
     786:	86 e7       	ldi	r24, 0x76	; 118
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
		}
	}
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <startReading>:
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}

void startReading(void* self){
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <startReading+0x6>
     7a4:	1f 92       	push	r1
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     7ac:	0e 94 23 14 	call	0x2846	; 0x2846 <xTaskGetTickCount>
     7b0:	69 83       	std	Y+1, r22	; 0x01
     7b2:	7a 83       	std	Y+2, r23	; 0x02
     7b4:	8b 83       	std	Y+3, r24	; 0x03
     7b6:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     7b8:	42 ea       	ldi	r20, 0xA2	; 162
     7ba:	53 e0       	ldi	r21, 0x03	; 3
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	0e 94 39 16 	call	0x2c72	; 0x2c72 <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     7c8:	0e 94 8b 23 	call	0x4716	; 0x4716 <hih8120_wakeup>
     7cc:	88 23       	and	r24, r24
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     7d0:	89 e4       	ldi	r24, 0x49	; 73
     7d2:	94 e0       	ldi	r25, 0x04	; 4
     7d4:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     7d8:	40 91 f7 14 	lds	r20, 0x14F7	; 0x8014f7 <ready_bit>
     7dc:	50 91 f8 14 	lds	r21, 0x14F8	; 0x8014f8 <ready_bit+0x1>
     7e0:	60 91 f9 14 	lds	r22, 0x14F9	; 0x8014f9 <ready_bit+0x2>
     7e4:	70 91 fa 14 	lds	r23, 0x14FA	; 0x8014fa <ready_bit+0x3>
     7e8:	cc 24       	eor	r12, r12
     7ea:	ca 94       	dec	r12
     7ec:	dc 2c       	mov	r13, r12
     7ee:	76 01       	movw	r14, r12
     7f0:	01 e0       	ldi	r16, 0x01	; 1
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	80 91 fd 14 	lds	r24, 0x14FD	; 0x8014fd <group_start>
     7f8:	90 91 fe 14 	lds	r25, 0x14FE	; 0x8014fe <group_start+0x1>
     7fc:	9d d2       	rcall	.+1338   	; 0xd38 <xEventGroupWaitBits>
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     7fe:	64 e0       	ldi	r22, 0x04	; 4
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     80a:	0e 94 a0 23 	call	0x4740	; 0x4740 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	cb 01       	movw	r24, r22
     814:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <vTaskDelay>
		
		measureTempAndHum((Temperature_t) self);
     818:	c5 01       	movw	r24, r10
     81a:	8a df       	rcall	.-236    	; 0x730 <measureTempAndHum>
	}
     81c:	cd cf       	rjmp	.-102    	; 0x7b8 <startReading+0x1a>

0000081e <temperature_handler_init>:
			printf("The mutex could not be obtained.");
		}
	}
}

void temperature_handler_init(Temperature_t self, uint16_t priority){
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	ec 01       	movw	r28, r24
     82a:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     82c:	40 91 f7 14 	lds	r20, 0x14F7	; 0x8014f7 <ready_bit>
     830:	50 91 f8 14 	lds	r21, 0x14F8	; 0x8014f8 <ready_bit+0x1>
     834:	60 91 f9 14 	lds	r22, 0x14F9	; 0x8014f9 <ready_bit+0x2>
     838:	70 91 fa 14 	lds	r23, 0x14FA	; 0x8014fa <ready_bit+0x3>
     83c:	80 91 fd 14 	lds	r24, 0x14FD	; 0x8014fd <group_start>
     840:	90 91 fe 14 	lds	r25, 0x14FE	; 0x8014fe <group_start+0x1>
     844:	19 d3       	rcall	.+1586   	; 0xe78 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     846:	e1 2c       	mov	r14, r1
     848:	f1 2c       	mov	r15, r1
     84a:	9e 01       	movw	r18, r28
     84c:	40 ec       	ldi	r20, 0xC0	; 192
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	63 e6       	ldi	r22, 0x63	; 99
     852:	74 e0       	ldi	r23, 0x04	; 4
     854:	8f ec       	ldi	r24, 0xCF	; 207
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	08 95       	ret

00000868 <createTemp>:
	float temperature;
	uint16_t humidity;
	} TemperatureHandler;
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex){
     868:	8f 92       	push	r8
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	7c 01       	movw	r14, r24
     882:	6b 01       	movw	r12, r22
     884:	49 01       	movw	r8, r18
     886:	5a 01       	movw	r10, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     888:	86 e0       	ldi	r24, 0x06	; 6
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <malloc>
     890:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     892:	89 2b       	or	r24, r25
     894:	21 f1       	breq	.+72     	; 0x8de <createTemp+0x76>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     896:	18 82       	st	Y, r1
     898:	19 82       	std	Y+1, r1	; 0x01
     89a:	1a 82       	std	Y+2, r1	; 0x02
     89c:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     89e:	1d 82       	std	Y+5, r1	; 0x05
     8a0:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     8a2:	d0 92 fe 14 	sts	0x14FE, r13	; 0x8014fe <group_start+0x1>
     8a6:	c0 92 fd 14 	sts	0x14FD, r12	; 0x8014fd <group_start>
	ready_bit = bit;
     8aa:	80 92 f7 14 	sts	0x14F7, r8	; 0x8014f7 <ready_bit>
     8ae:	90 92 f8 14 	sts	0x14F8, r9	; 0x8014f8 <ready_bit+0x1>
     8b2:	a0 92 f9 14 	sts	0x14F9, r10	; 0x8014f9 <ready_bit+0x2>
     8b6:	b0 92 fa 14 	sts	0x14FA, r11	; 0x8014fa <ready_bit+0x3>
	xMutexSemaphore = mutex;
     8ba:	10 93 fc 14 	sts	0x14FC, r17	; 0x8014fc <xMutexSemaphore+0x1>
     8be:	00 93 fb 14 	sts	0x14FB, r16	; 0x8014fb <xMutexSemaphore>
	
	if (HIH8120_OK == hih8120_initialise())
     8c2:	0e 94 73 23 	call	0x46e6	; 0x46e6 <hih8120_initialise>
     8c6:	81 11       	cpse	r24, r1
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <createTemp+0x6a>
	{
		puts("Temp sensor initialized.");
     8ca:	84 e7       	ldi	r24, 0x74	; 116
     8cc:	94 e0       	ldi	r25, 0x04	; 4
     8ce:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     8d2:	b7 01       	movw	r22, r14
     8d4:	ce 01       	movw	r24, r28
     8d6:	a3 df       	rcall	.-186    	; 0x81e <temperature_handler_init>
	return new_measure;
     8d8:	8c 2f       	mov	r24, r28
     8da:	9d 2f       	mov	r25, r29
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <createTemp+0x7a>
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	08 95       	ret

000008fc <getTemperature>:
	xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
}

float getTemperature(Temperature_t self){
	return self->temperature;
     8fc:	fc 01       	movw	r30, r24
     8fe:	60 81       	ld	r22, Z
     900:	71 81       	ldd	r23, Z+1	; 0x01
     902:	82 81       	ldd	r24, Z+2	; 0x02
     904:	93 81       	ldd	r25, Z+3	; 0x03
}
     906:	08 95       	ret

00000908 <getHumidity>:

uint16_t getHumidity(Temperature_t self){
	return self -> humidity;
}
     908:	fc 01       	movw	r30, r24
     90a:	84 81       	ldd	r24, Z+4	; 0x04
     90c:	95 81       	ldd	r25, Z+5	; 0x05
     90e:	08 95       	ret

00000910 <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	64 97       	sbiw	r28, 0x14	; 20
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	//status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     928:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <lora_driver_rn2483FactoryReset>
     92c:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	8d e8       	ldi	r24, 0x8D	; 141
     936:	94 e0       	ldi	r25, 0x04	; 4
     938:	9f 93       	push	r25
     93a:	8f 93       	push	r24
     93c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     940:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <lora_driver_configureToEu868>
     944:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	80 ea       	ldi	r24, 0xA0	; 160
     94e:	94 e0       	ldi	r25, 0x04	; 4
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     958:	8e 01       	movw	r16, r28
     95a:	0f 5f       	subi	r16, 0xFF	; 255
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	c8 01       	movw	r24, r16
     960:	0e 94 66 25 	call	0x4acc	; 0x4acc <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     964:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     968:	1f 93       	push	r17
     96a:	0f 93       	push	r16
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	89 eb       	ldi	r24, 0xB9	; 185
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	9f 93       	push	r25
     976:	8f 93       	push	r24
     978:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     97c:	c8 01       	movw	r24, r16
     97e:	0e 94 82 25 	call	0x4b04	; 0x4b04 <lora_driver_setDeviceIdentifier>
     982:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     986:	9f 93       	push	r25
     988:	8f 93       	push	r24
     98a:	1f 93       	push	r17
     98c:	0f 93       	push	r16
     98e:	8d ec       	ldi	r24, 0xCD	; 205
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     99a:	a8 01       	movw	r20, r16
     99c:	62 ee       	ldi	r22, 0xE2	; 226
     99e:	74 e0       	ldi	r23, 0x04	; 4
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	95 e0       	ldi	r25, 0x05	; 5
     9a4:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <lora_driver_setOtaaIdentity>
     9a8:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	1f 93       	push	r17
     9b2:	0f 93       	push	r16
     9b4:	82 ee       	ldi	r24, 0xE2	; 226
     9b6:	94 e0       	ldi	r25, 0x04	; 4
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	95 e0       	ldi	r25, 0x05	; 5
     9c0:	9f 93       	push	r25
     9c2:	8f 93       	push	r24
     9c4:	84 e1       	ldi	r24, 0x14	; 20
     9c6:	95 e0       	ldi	r25, 0x05	; 5
     9c8:	9f 93       	push	r25
     9ca:	8f 93       	push	r24
     9cc:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     9d0:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <lora_driver_saveMac>
     9d4:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     9d8:	9f 93       	push	r25
     9da:	8f 93       	push	r24
     9dc:	8a e4       	ldi	r24, 0x4A	; 74
     9de:	95 e0       	ldi	r25, 0x05	; 5
     9e0:	9f 93       	push	r25
     9e2:	8f 93       	push	r24
     9e4:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <lora_driver_setAdaptiveDataRate>
     9f8:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	89 e5       	ldi	r24, 0x59	; 89
     a02:	95 e0       	ldi	r25, 0x05	; 5
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     a0c:	84 ef       	ldi	r24, 0xF4	; 244
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <lora_driver_setReceiveDelay>
     a14:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	8f 93       	push	r24
     a20:	84 ef       	ldi	r24, 0xF4	; 244
     a22:	8f 93       	push	r24
     a24:	8a e7       	ldi	r24, 0x7A	; 122
     a26:	95 e0       	ldi	r25, 0x05	; 5
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     a3a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <lora_driver_join>
     a42:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     a44:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	1f 92       	push	r1
     a4e:	1f 93       	push	r17
     a50:	8a e9       	ldi	r24, 0x9A	; 154
     a52:	95 e0       	ldi	r25, 0x05	; 5
     a54:	9f 93       	push	r25
     a56:	8f 93       	push	r24
     a58:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>

		if ( rc != LORA_ACCEPTED)
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	08 30       	cpi	r16, 0x08	; 8
     a6a:	41 f0       	breq	.+16     	; 0xa7c <_lora_setup+0x16c>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     a6c:	66 e3       	ldi	r22, 0x36	; 54
     a6e:	71 e0       	ldi	r23, 0x01	; 1
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     a78:	11 50       	subi	r17, 0x01	; 1
     a7a:	01 f7       	brne	.-64     	; 0xa3c <_lora_setup+0x12c>

	if (rc == LORA_ACCEPTED)
     a7c:	08 30       	cpi	r16, 0x08	; 8
     a7e:	11 f0       	breq	.+4      	; 0xa84 <_lora_setup+0x174>
		//status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     a80:	b0 d4       	rcall	.+2400   	; 0x13e2 <vPortYield>
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <_lora_setup+0x170>
		}
	}
}
     a84:	64 96       	adiw	r28, 0x14	; 20
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <lora_handler_task>:

void lora_handler_task(void* pvParameters){
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	28 97       	sbiw	r28, 0x08	; 8
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <lora_driver_resetRn2483>
	vTaskDelay(2);
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <vTaskDelay>
	lora_driver_resetRn2483(0);
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     ac6:	66 e9       	ldi	r22, 0x96	; 150
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     ad2:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_flushBuffers>

	_lora_setup();
     ad6:	1c df       	rcall	.-456    	; 0x910 <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     ad8:	0e 94 23 14 	call	0x2846	; 0x2846 <xTaskGetTickCount>
     adc:	69 83       	std	Y+1, r22	; 0x01
     ade:	7a 83       	std	Y+2, r23	; 0x02
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     ae4:	44 e4       	ldi	r20, 0x44	; 68
     ae6:	57 e0       	ldi	r21, 0x07	; 7
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <xTaskDelayUntil>
		_uplink_payload.len = 5;
     af4:	e0 e0       	ldi	r30, 0x00	; 0
     af6:	f9 e0       	ldi	r31, 0x09	; 9
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 83       	st	Z, r24
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
		uint16_t light_val = 0;
		if(xMutexSemaphore != NULL){
     b00:	80 91 fb 14 	lds	r24, 0x14FB	; 0x8014fb <xMutexSemaphore>
     b04:	90 91 fc 14 	lds	r25, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	09 f4       	brne	.+2      	; 0xb0e <lora_handler_task+0x74>
     b0c:	4e c0       	rjmp	.+156    	; 0xbaa <lora_handler_task+0x110>
			if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 10) == pdTRUE){
     b0e:	4a e0       	ldi	r20, 0x0A	; 10
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	f7 d7       	rcall	.+4078   	; 0x1b06 <xQueueSemaphoreTake>
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	a1 f5       	brne	.+104    	; 0xb84 <lora_handler_task+0xea>
				temp = (double) getTemperature(temperatureAndHumidity);
     b1c:	80 91 03 15 	lds	r24, 0x1503	; 0x801503 <temperatureAndHumidity>
     b20:	90 91 04 15 	lds	r25, 0x1504	; 0x801504 <temperatureAndHumidity+0x1>
     b24:	eb de       	rcall	.-554    	; 0x8fc <getTemperature>
     b26:	36 2e       	mov	r3, r22
     b28:	87 2e       	mov	r8, r23
     b2a:	98 2e       	mov	r9, r24
     b2c:	19 2f       	mov	r17, r25
				humidity = getHumidity(temperatureAndHumidity)/10;
     b2e:	80 91 03 15 	lds	r24, 0x1503	; 0x801503 <temperatureAndHumidity>
     b32:	90 91 04 15 	lds	r25, 0x1504	; 0x801504 <temperatureAndHumidity+0x1>
     b36:	e8 de       	rcall	.-560    	; 0x908 <getHumidity>
     b38:	9c 01       	movw	r18, r24
     b3a:	ad ec       	ldi	r26, 0xCD	; 205
     b3c:	bc ec       	ldi	r27, 0xCC	; 204
     b3e:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <__umulhisi3>
     b42:	7c 01       	movw	r14, r24
     b44:	f6 94       	lsr	r15
     b46:	e7 94       	ror	r14
     b48:	f6 94       	lsr	r15
     b4a:	e7 94       	ror	r14
     b4c:	f6 94       	lsr	r15
     b4e:	e7 94       	ror	r14
				co2_val = getCO2(co2);
     b50:	80 91 01 15 	lds	r24, 0x1501	; 0x801501 <co2>
     b54:	90 91 02 15 	lds	r25, 0x1502	; 0x801502 <co2+0x1>
     b58:	4b dc       	rcall	.-1898   	; 0x3f0 <getCO2>
     b5a:	b8 2e       	mov	r11, r24
     b5c:	a9 2e       	mov	r10, r25
				light_val = getLight(light_handler);
     b5e:	80 91 ff 14 	lds	r24, 0x14FF	; 0x8014ff <light_handler>
     b62:	90 91 00 15 	lds	r25, 0x1500	; 0x801500 <light_handler+0x1>
     b66:	e0 dd       	rcall	.-1088   	; 0x728 <getLight>
     b68:	d8 2e       	mov	r13, r24
     b6a:	c9 2e       	mov	r12, r25
				xSemaphoreGive(xMutexSemaphore);
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	a9 01       	movw	r20, r18
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	80 91 fb 14 	lds	r24, 0x14FB	; 0x8014fb <xMutexSemaphore>
     b7c:	90 91 fc 14 	lds	r25, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
     b80:	48 d6       	rcall	.+3216   	; 0x1812 <xQueueGenericSend>
     b82:	1d c0       	rjmp	.+58     	; 0xbbe <lora_handler_task+0x124>
			}
			else{
			   printf("The mutex could not be obtained.");
     b84:	86 e7       	ldi	r24, 0x76	; 118
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	9f 93       	push	r25
     b8a:	8f 93       	push	r24
     b8c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
		uint16_t light_val = 0;
     b94:	d1 2c       	mov	r13, r1
     b96:	c1 2c       	mov	r12, r1
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
     b98:	b1 2c       	mov	r11, r1
     b9a:	a1 2c       	mov	r10, r1
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
     b9c:	e1 2c       	mov	r14, r1
     b9e:	f1 2c       	mov	r15, r1
		_uplink_payload.len = 5;
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
     ba0:	31 2c       	mov	r3, r1
     ba2:	81 2c       	mov	r8, r1
     ba4:	91 2c       	mov	r9, r1
     ba6:	10 e0       	ldi	r17, 0x00	; 0
     ba8:	0a c0       	rjmp	.+20     	; 0xbbe <lora_handler_task+0x124>
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
		uint16_t light_val = 0;
     baa:	d1 2c       	mov	r13, r1
     bac:	c1 2c       	mov	r12, r1
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
     bae:	b1 2c       	mov	r11, r1
     bb0:	a1 2c       	mov	r10, r1
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
     bb2:	e1 2c       	mov	r14, r1
     bb4:	f1 2c       	mov	r15, r1
		_uplink_payload.len = 5;
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
     bb6:	31 2c       	mov	r3, r1
     bb8:	81 2c       	mov	r8, r1
     bba:	91 2c       	mov	r9, r1
     bbc:	10 e0       	ldi	r17, 0x00	; 0
			   printf("The mutex could not be obtained.");
			}
		}
			
		//temperature
		double val1=0;
     bbe:	1d 82       	std	Y+5, r1	; 0x05
     bc0:	1e 82       	std	Y+6, r1	; 0x06
     bc2:	1f 82       	std	Y+7, r1	; 0x07
     bc4:	18 86       	std	Y+8, r1	; 0x08
		double val2=0;
		val2 = modf(temp, &val1);
     bc6:	ae 01       	movw	r20, r28
     bc8:	4b 5f       	subi	r20, 0xFB	; 251
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
     bcc:	63 2d       	mov	r22, r3
     bce:	78 2d       	mov	r23, r8
     bd0:	89 2d       	mov	r24, r9
     bd2:	91 2f       	mov	r25, r17
     bd4:	0e 94 23 22 	call	0x4446	; 0x4446 <modf>
		val2 = val2 * 100;
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	48 ec       	ldi	r20, 0xC8	; 200
     bde:	52 e4       	ldi	r21, 0x42	; 66
     be0:	0e 94 56 22 	call	0x44ac	; 0x44ac <__mulsf3>
     be4:	2b 01       	movw	r4, r22
     be6:	3c 01       	movw	r6, r24
		printf("\ntemp: %f", temp);
     be8:	1f 93       	push	r17
     bea:	9f 92       	push	r9
     bec:	8f 92       	push	r8
     bee:	3f 92       	push	r3
     bf0:	8a eb       	ldi	r24, 0xBA	; 186
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
		_uplink_payload.bytes[0] = (int) val1;
     bfc:	6d 81       	ldd	r22, Y+5	; 0x05
     bfe:	7e 81       	ldd	r23, Y+6	; 0x06
     c00:	8f 81       	ldd	r24, Y+7	; 0x07
     c02:	98 85       	ldd	r25, Y+8	; 0x08
     c04:	0e 94 c9 21 	call	0x4392	; 0x4392 <__fixsfsi>
     c08:	00 e0       	ldi	r16, 0x00	; 0
     c0a:	19 e0       	ldi	r17, 0x09	; 9
     c0c:	f8 01       	movw	r30, r16
     c0e:	62 83       	std	Z+2, r22	; 0x02
		_uplink_payload.bytes[1] = (int) val2;	
     c10:	c3 01       	movw	r24, r6
     c12:	b2 01       	movw	r22, r4
     c14:	0e 94 c9 21 	call	0x4392	; 0x4392 <__fixsfsi>
     c18:	f8 01       	movw	r30, r16
     c1a:	63 83       	std	Z+3, r22	; 0x03
		
		//humidity
		printf("\nhumidity: %d", humidity);
     c1c:	ff 92       	push	r15
     c1e:	ef 92       	push	r14
     c20:	84 ec       	ldi	r24, 0xC4	; 196
     c22:	95 e0       	ldi	r25, 0x05	; 5
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
		_uplink_payload.bytes[2] = humidity;
     c2c:	f8 01       	movw	r30, r16
     c2e:	e4 82       	std	Z+4, r14	; 0x04
		
		//co2
		printf("\nco2: %d", co2_val);
     c30:	af 92       	push	r10
     c32:	bf 92       	push	r11
     c34:	82 ed       	ldi	r24, 0xD2	; 210
     c36:	95 e0       	ldi	r25, 0x05	; 5
     c38:	9f 93       	push	r25
     c3a:	8f 93       	push	r24
     c3c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
		_uplink_payload.bytes[3] = co2_val >> 8;
     c40:	f8 01       	movw	r30, r16
     c42:	a5 82       	std	Z+5, r10	; 0x05
		_uplink_payload.bytes[4] = co2_val & 0xFF;
     c44:	b6 82       	std	Z+6, r11	; 0x06
		
		//light 
	    printf("\n light in lux: %d", light_val);
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	8b ed       	ldi	r24, 0xDB	; 219
     c4c:	95 e0       	ldi	r25, 0x05	; 5
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
		_uplink_payload.bytes[5] = light_val >> 8;
     c56:	f8 01       	movw	r30, r16
     c58:	c7 82       	std	Z+7, r12	; 0x07
		_uplink_payload.bytes[6] = light_val & 0xFF;
     c5a:	d0 86       	std	Z+8, r13	; 0x08
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     c5c:	b8 01       	movw	r22, r16
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <lora_driver_sendUploadMessage>
     c64:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <lora_driver_mapReturnCodeToText>
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	8e ee       	ldi	r24, 0xEE	; 238
     c6e:	95 e0       	ldi	r25, 0x05	; 5
     c70:	9f 93       	push	r25
     c72:	8f 93       	push	r24
     c74:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <printf>
	}
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	30 cf       	rjmp	.-416    	; 0xae4 <lora_handler_task+0x4a>

00000c84 <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;
SemaphoreHandle_t xMutexSemaphore;

void lora_handler_task(void* pvParameters);

void lora_handler_initialize(uint16_t lora_handler_task_priority, Temperature_t temperatureObject, CO2_t co2Object, SemaphoreHandle_t mutex, LightHandler_t lightObject){
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
	
	temperatureAndHumidity = temperatureObject;
     c8c:	70 93 04 15 	sts	0x1504, r23	; 0x801504 <temperatureAndHumidity+0x1>
     c90:	60 93 03 15 	sts	0x1503, r22	; 0x801503 <temperatureAndHumidity>
	co2 = co2Object;
     c94:	50 93 02 15 	sts	0x1502, r21	; 0x801502 <co2+0x1>
     c98:	40 93 01 15 	sts	0x1501, r20	; 0x801501 <co2>
	xMutexSemaphore = mutex;
     c9c:	30 93 fc 14 	sts	0x14FC, r19	; 0x8014fc <xMutexSemaphore+0x1>
     ca0:	20 93 fb 14 	sts	0x14FB, r18	; 0x8014fb <xMutexSemaphore>
	light_handler = lightObject;
     ca4:	10 93 00 15 	sts	0x1500, r17	; 0x801500 <light_handler+0x1>
     ca8:	00 93 ff 14 	sts	0x14FF, r16	; 0x8014ff <light_handler>
	xTaskCreate(
     cac:	e1 2c       	mov	r14, r1
     cae:	f1 2c       	mov	r15, r1
     cb0:	08 2f       	mov	r16, r24
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	48 e8       	ldi	r20, 0x88	; 136
     cb8:	51 e0       	ldi	r21, 0x01	; 1
     cba:	63 e0       	ldi	r22, 0x03	; 3
     cbc:	76 e0       	ldi	r23, 0x06	; 6
     cbe:	8d e4       	ldi	r24, 0x4D	; 77
     cc0:	95 e0       	ldi	r25, 0x05	; 5
     cc2:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	08 95       	ret

00000cd0 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     cd0:	0f 93       	push	r16
     cd2:	01 11       	cpse	r16, r1
     cd4:	0c c0       	rjmp	.+24     	; 0xcee <prvTestWaitCondition+0x1e>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	82 23       	and	r24, r18
     cdc:	93 23       	and	r25, r19
     cde:	a4 23       	and	r26, r20
     ce0:	b5 23       	and	r27, r21
     ce2:	89 2b       	or	r24, r25
     ce4:	8a 2b       	or	r24, r26
     ce6:	8b 2b       	or	r24, r27
     ce8:	79 f4       	brne	.+30     	; 0xd08 <prvTestWaitCondition+0x38>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <prvTestWaitCondition+0x3e>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	82 23       	and	r24, r18
     cf4:	93 23       	and	r25, r19
     cf6:	a4 23       	and	r26, r20
     cf8:	b5 23       	and	r27, r21
     cfa:	28 17       	cp	r18, r24
     cfc:	39 07       	cpc	r19, r25
     cfe:	4a 07       	cpc	r20, r26
     d00:	5b 07       	cpc	r21, r27
     d02:	21 f0       	breq	.+8      	; 0xd0c <prvTestWaitCondition+0x3c>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <prvTestWaitCondition+0x3e>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <prvTestWaitCondition+0x3e>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <xEventGroupCreate>:
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	8f e0       	ldi	r24, 0x0F	; 15
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	af d1       	rcall	.+862    	; 0x107a <pvPortMalloc>
     d1c:	ec 01       	movw	r28, r24
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	39 f0       	breq	.+14     	; 0xd30 <xEventGroupCreate+0x1e>
     d22:	fc 01       	movw	r30, r24
     d24:	11 92       	st	Z+, r1
     d26:	11 92       	st	Z+, r1
     d28:	11 92       	st	Z+, r1
     d2a:	11 92       	st	Z+, r1
     d2c:	cf 01       	movw	r24, r30
     d2e:	8b d2       	rcall	.+1302   	; 0x1246 <vListInitialise>
     d30:	ce 01       	movw	r24, r28
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <xEventGroupWaitBits>:
     d38:	2f 92       	push	r2
     d3a:	3f 92       	push	r3
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
     d5e:	4a 01       	movw	r8, r20
     d60:	5b 01       	movw	r10, r22
     d62:	62 2e       	mov	r6, r18
     d64:	70 2e       	mov	r7, r16
     d66:	0e 94 1d 14 	call	0x283a	; 0x283a <vTaskSuspendAll>
     d6a:	28 80       	ld	r2, Y
     d6c:	39 80       	ldd	r3, Y+1	; 0x01
     d6e:	4a 80       	ldd	r4, Y+2	; 0x02
     d70:	5b 80       	ldd	r5, Y+3	; 0x03
     d72:	a5 01       	movw	r20, r10
     d74:	94 01       	movw	r18, r8
     d76:	c2 01       	movw	r24, r4
     d78:	b1 01       	movw	r22, r2
     d7a:	aa df       	rcall	.-172    	; 0xcd0 <prvTestWaitCondition>
     d7c:	88 23       	and	r24, r24
     d7e:	a1 f0       	breq	.+40     	; 0xda8 <xEventGroupWaitBits+0x70>
     d80:	66 20       	and	r6, r6
     d82:	89 f1       	breq	.+98     	; 0xde6 <xEventGroupWaitBits+0xae>
     d84:	d5 01       	movw	r26, r10
     d86:	c4 01       	movw	r24, r8
     d88:	80 95       	com	r24
     d8a:	90 95       	com	r25
     d8c:	a0 95       	com	r26
     d8e:	b0 95       	com	r27
     d90:	82 21       	and	r24, r2
     d92:	93 21       	and	r25, r3
     d94:	a4 21       	and	r26, r4
     d96:	b5 21       	and	r27, r5
     d98:	88 83       	st	Y, r24
     d9a:	99 83       	std	Y+1, r25	; 0x01
     d9c:	aa 83       	std	Y+2, r26	; 0x02
     d9e:	bb 83       	std	Y+3, r27	; 0x03
     da0:	c1 2c       	mov	r12, r1
     da2:	d1 2c       	mov	r13, r1
     da4:	76 01       	movw	r14, r12
     da6:	22 c0       	rjmp	.+68     	; 0xdec <xEventGroupWaitBits+0xb4>
     da8:	c1 14       	cp	r12, r1
     daa:	d1 04       	cpc	r13, r1
     dac:	e1 04       	cpc	r14, r1
     dae:	f1 04       	cpc	r15, r1
     db0:	e9 f0       	breq	.+58     	; 0xdec <xEventGroupWaitBits+0xb4>
     db2:	61 10       	cpse	r6, r1
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <xEventGroupWaitBits+0x86>
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	ba 01       	movw	r22, r20
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <xEventGroupWaitBits+0x8e>
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	71 10       	cpse	r7, r1
     dc8:	74 60       	ori	r23, 0x04	; 4
     dca:	48 29       	or	r20, r8
     dcc:	59 29       	or	r21, r9
     dce:	6a 29       	or	r22, r10
     dd0:	7b 29       	or	r23, r11
     dd2:	97 01       	movw	r18, r14
     dd4:	86 01       	movw	r16, r12
     dd6:	ce 01       	movw	r24, r28
     dd8:	04 96       	adiw	r24, 0x04	; 4
     dda:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <vTaskPlaceOnUnorderedEventList>
     dde:	21 2c       	mov	r2, r1
     de0:	31 2c       	mov	r3, r1
     de2:	21 01       	movw	r4, r2
     de4:	03 c0       	rjmp	.+6      	; 0xdec <xEventGroupWaitBits+0xb4>
     de6:	c1 2c       	mov	r12, r1
     de8:	d1 2c       	mov	r13, r1
     dea:	76 01       	movw	r14, r12
     dec:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
     df0:	cd 28       	or	r12, r13
     df2:	ce 28       	or	r12, r14
     df4:	cf 28       	or	r12, r15
     df6:	59 f1       	breq	.+86     	; 0xe4e <xEventGroupWaitBits+0x116>
     df8:	81 11       	cpse	r24, r1
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <xEventGroupWaitBits+0xc6>
     dfc:	f2 d2       	rcall	.+1508   	; 0x13e2 <vPortYield>
     dfe:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <uxTaskResetEventItemValue>
     e02:	6b 01       	movw	r12, r22
     e04:	7c 01       	movw	r14, r24
     e06:	91 fd       	sbrc	r25, 1
     e08:	1f c0       	rjmp	.+62     	; 0xe48 <xEventGroupWaitBits+0x110>
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	0f 92       	push	r0
     e10:	c8 80       	ld	r12, Y
     e12:	d9 80       	ldd	r13, Y+1	; 0x01
     e14:	ea 80       	ldd	r14, Y+2	; 0x02
     e16:	fb 80       	ldd	r15, Y+3	; 0x03
     e18:	07 2d       	mov	r16, r7
     e1a:	a5 01       	movw	r20, r10
     e1c:	94 01       	movw	r18, r8
     e1e:	c7 01       	movw	r24, r14
     e20:	b6 01       	movw	r22, r12
     e22:	56 df       	rcall	.-340    	; 0xcd0 <prvTestWaitCondition>
     e24:	88 23       	and	r24, r24
     e26:	71 f0       	breq	.+28     	; 0xe44 <xEventGroupWaitBits+0x10c>
     e28:	66 20       	and	r6, r6
     e2a:	61 f0       	breq	.+24     	; 0xe44 <xEventGroupWaitBits+0x10c>
     e2c:	80 94       	com	r8
     e2e:	90 94       	com	r9
     e30:	a0 94       	com	r10
     e32:	b0 94       	com	r11
     e34:	8c 20       	and	r8, r12
     e36:	9d 20       	and	r9, r13
     e38:	ae 20       	and	r10, r14
     e3a:	bf 20       	and	r11, r15
     e3c:	88 82       	st	Y, r8
     e3e:	99 82       	std	Y+1, r9	; 0x01
     e40:	aa 82       	std	Y+2, r10	; 0x02
     e42:	bb 82       	std	Y+3, r11	; 0x03
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	16 01       	movw	r2, r12
     e4a:	27 01       	movw	r4, r14
     e4c:	55 24       	eor	r5, r5
     e4e:	c2 01       	movw	r24, r4
     e50:	b1 01       	movw	r22, r2
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	af 90       	pop	r10
     e66:	9f 90       	pop	r9
     e68:	8f 90       	pop	r8
     e6a:	7f 90       	pop	r7
     e6c:	6f 90       	pop	r6
     e6e:	5f 90       	pop	r5
     e70:	4f 90       	pop	r4
     e72:	3f 90       	pop	r3
     e74:	2f 90       	pop	r2
     e76:	08 95       	ret

00000e78 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     e78:	4f 92       	push	r4
     e7a:	5f 92       	push	r5
     e7c:	6f 92       	push	r6
     e7e:	7f 92       	push	r7
     e80:	af 92       	push	r10
     e82:	bf 92       	push	r11
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
     e96:	6a 01       	movw	r12, r20
     e98:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e9a:	8c 01       	movw	r16, r24
     e9c:	09 5f       	subi	r16, 0xF9	; 249
     e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     ea0:	0e 94 1d 14 	call	0x283a	; 0x283a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     ea4:	eb 85       	ldd	r30, Y+11	; 0x0b
     ea6:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     ea8:	88 81       	ld	r24, Y
     eaa:	99 81       	ldd	r25, Y+1	; 0x01
     eac:	aa 81       	ldd	r26, Y+2	; 0x02
     eae:	bb 81       	ldd	r27, Y+3	; 0x03
     eb0:	c8 2a       	or	r12, r24
     eb2:	d9 2a       	or	r13, r25
     eb4:	ea 2a       	or	r14, r26
     eb6:	fb 2a       	or	r15, r27
     eb8:	c8 82       	st	Y, r12
     eba:	d9 82       	std	Y+1, r13	; 0x01
     ebc:	ea 82       	std	Y+2, r14	; 0x02
     ebe:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     ec0:	c1 2c       	mov	r12, r1
     ec2:	d1 2c       	mov	r13, r1
     ec4:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     ec6:	3d c0       	rjmp	.+122    	; 0xf42 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     ec8:	a4 80       	ldd	r10, Z+4	; 0x04
     eca:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	a2 81       	ldd	r26, Z+2	; 0x02
     ed2:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     ed4:	ac 01       	movw	r20, r24
     ed6:	bd 01       	movw	r22, r26
     ed8:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     eda:	b2 fd       	sbrc	r27, 2
     edc:	0e c0       	rjmp	.+28     	; 0xefa <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     ede:	48 80       	ld	r4, Y
     ee0:	59 80       	ldd	r5, Y+1	; 0x01
     ee2:	6a 80       	ldd	r6, Y+2	; 0x02
     ee4:	7b 80       	ldd	r7, Y+3	; 0x03
     ee6:	44 22       	and	r4, r20
     ee8:	55 22       	and	r5, r21
     eea:	66 22       	and	r6, r22
     eec:	77 22       	and	r7, r23
     eee:	45 28       	or	r4, r5
     ef0:	46 28       	or	r4, r6
     ef2:	47 28       	or	r4, r7
     ef4:	89 f4       	brne	.+34     	; 0xf18 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	12 c0       	rjmp	.+36     	; 0xf1e <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     efa:	48 80       	ld	r4, Y
     efc:	59 80       	ldd	r5, Y+1	; 0x01
     efe:	6a 80       	ldd	r6, Y+2	; 0x02
     f00:	7b 80       	ldd	r7, Y+3	; 0x03
     f02:	44 22       	and	r4, r20
     f04:	55 22       	and	r5, r21
     f06:	66 22       	and	r6, r22
     f08:	77 22       	and	r7, r23
     f0a:	44 15       	cp	r20, r4
     f0c:	55 05       	cpc	r21, r5
     f0e:	66 05       	cpc	r22, r6
     f10:	77 05       	cpc	r23, r7
     f12:	21 f0       	breq	.+8      	; 0xf1c <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     f18:	21 e0       	ldi	r18, 0x01	; 1
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     f1c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     f1e:	22 23       	and	r18, r18
     f20:	71 f0       	breq	.+28     	; 0xf3e <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     f22:	b0 ff       	sbrs	r27, 0
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     f26:	c4 2a       	or	r12, r20
     f28:	d5 2a       	or	r13, r21
     f2a:	e6 2a       	or	r14, r22
     f2c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     f2e:	48 81       	ld	r20, Y
     f30:	59 81       	ldd	r21, Y+1	; 0x01
     f32:	6a 81       	ldd	r22, Y+2	; 0x02
     f34:	7b 81       	ldd	r23, Y+3	; 0x03
     f36:	72 60       	ori	r23, 0x02	; 2
     f38:	cf 01       	movw	r24, r30
     f3a:	0e 94 70 18 	call	0x30e0	; 0x30e0 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     f3e:	ea 2d       	mov	r30, r10
     f40:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     f42:	e0 17       	cp	r30, r16
     f44:	f1 07       	cpc	r31, r17
     f46:	09 f0       	breq	.+2      	; 0xf4a <xEventGroupSetBits+0xd2>
     f48:	bf cf       	rjmp	.-130    	; 0xec8 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     f4a:	c0 94       	com	r12
     f4c:	d0 94       	com	r13
     f4e:	e0 94       	com	r14
     f50:	f0 94       	com	r15
     f52:	88 81       	ld	r24, Y
     f54:	99 81       	ldd	r25, Y+1	; 0x01
     f56:	aa 81       	ldd	r26, Y+2	; 0x02
     f58:	bb 81       	ldd	r27, Y+3	; 0x03
     f5a:	c8 22       	and	r12, r24
     f5c:	d9 22       	and	r13, r25
     f5e:	ea 22       	and	r14, r26
     f60:	fb 22       	and	r15, r27
     f62:	c8 82       	st	Y, r12
     f64:	d9 82       	std	Y+1, r13	; 0x01
     f66:	ea 82       	std	Y+2, r14	; 0x02
     f68:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     f6a:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     f6e:	68 81       	ld	r22, Y
     f70:	79 81       	ldd	r23, Y+1	; 0x01
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	9b 81       	ldd	r25, Y+3	; 0x03
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	bf 90       	pop	r11
     f88:	af 90       	pop	r10
     f8a:	7f 90       	pop	r7
     f8c:	6f 90       	pop	r6
     f8e:	5f 90       	pop	r5
     f90:	4f 90       	pop	r4
     f92:	08 95       	ret

00000f94 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     f94:	e2 e2       	ldi	r30, 0x22	; 34
     f96:	f9 e0       	ldi	r31, 0x09	; 9
     f98:	a6 e2       	ldi	r26, 0x26	; 38
     f9a:	b9 e0       	ldi	r27, 0x09	; 9
     f9c:	b1 83       	std	Z+1, r27	; 0x01
     f9e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     fa0:	13 82       	std	Z+3, r1	; 0x03
     fa2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     fa4:	e6 ee       	ldi	r30, 0xE6	; 230
     fa6:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     fa8:	f0 93 21 09 	sts	0x0921, r31	; 0x800921 <pxEnd+0x1>
     fac:	e0 93 20 09 	sts	0x0920, r30	; 0x800920 <pxEnd>
    pxEnd->xBlockSize = 0;
     fb0:	13 82       	std	Z+3, r1	; 0x03
     fb2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     fb4:	11 82       	std	Z+1, r1	; 0x01
     fb6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     fb8:	80 ec       	ldi	r24, 0xC0	; 192
     fba:	99 e0       	ldi	r25, 0x09	; 9
     fbc:	13 96       	adiw	r26, 0x03	; 3
     fbe:	9c 93       	st	X, r25
     fc0:	8e 93       	st	-X, r24
     fc2:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     fc4:	ed 93       	st	X+, r30
     fc6:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     fc8:	90 93 1d 09 	sts	0x091D, r25	; 0x80091d <xMinimumEverFreeBytesRemaining+0x1>
     fcc:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     fd0:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xFreeBytesRemaining+0x1>
     fd4:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e8       	ldi	r25, 0x80	; 128
     fdc:	90 93 17 09 	sts	0x0917, r25	; 0x800917 <xBlockAllocatedBit+0x1>
     fe0:	80 93 16 09 	sts	0x0916, r24	; 0x800916 <xBlockAllocatedBit>
     fe4:	08 95       	ret

00000fe6 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     fec:	a2 e2       	ldi	r26, 0x22	; 34
     fee:	b9 e0       	ldi	r27, 0x09	; 9
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <prvInsertBlockIntoFreeList+0xe>
     ff2:	df 01       	movw	r26, r30
     ff4:	ed 91       	ld	r30, X+
     ff6:	fc 91       	ld	r31, X
     ff8:	11 97       	sbiw	r26, 0x01	; 1
     ffa:	ec 17       	cp	r30, r28
     ffc:	fd 07       	cpc	r31, r29
     ffe:	c8 f3       	brcs	.-14     	; 0xff2 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	8d 91       	ld	r24, X+
    1004:	9c 91       	ld	r25, X
    1006:	13 97       	sbiw	r26, 0x03	; 3
    1008:	9d 01       	movw	r18, r26
    100a:	28 0f       	add	r18, r24
    100c:	39 1f       	adc	r19, r25
    100e:	c2 17       	cp	r28, r18
    1010:	d3 07       	cpc	r29, r19
    1012:	49 f4       	brne	.+18     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1014:	2a 81       	ldd	r18, Y+2	; 0x02
    1016:	3b 81       	ldd	r19, Y+3	; 0x03
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	13 96       	adiw	r26, 0x03	; 3
    101e:	9c 93       	st	X, r25
    1020:	8e 93       	st	-X, r24
    1022:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    1024:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	9e 01       	movw	r18, r28
    102c:	28 0f       	add	r18, r24
    102e:	39 1f       	adc	r19, r25
    1030:	e2 17       	cp	r30, r18
    1032:	f3 07       	cpc	r31, r19
    1034:	c1 f4       	brne	.+48     	; 0x1066 <__EEPROM_REGION_LENGTH__+0x66>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    1036:	20 91 20 09 	lds	r18, 0x0920	; 0x800920 <pxEnd>
    103a:	30 91 21 09 	lds	r19, 0x0921	; 0x800921 <pxEnd+0x1>
    103e:	e2 17       	cp	r30, r18
    1040:	f3 07       	cpc	r31, r19
    1042:	71 f0       	breq	.+28     	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1044:	22 81       	ldd	r18, Z+2	; 0x02
    1046:	33 81       	ldd	r19, Z+3	; 0x03
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	11 97       	sbiw	r26, 0x01	; 1
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	99 83       	std	Y+1, r25	; 0x01
    105c:	88 83       	st	Y, r24
    105e:	05 c0       	rjmp	.+10     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1060:	39 83       	std	Y+1, r19	; 0x01
    1062:	28 83       	st	Y, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1066:	f9 83       	std	Y+1, r31	; 0x01
    1068:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    106a:	ca 17       	cp	r28, r26
    106c:	db 07       	cpc	r29, r27
    106e:	11 f0       	breq	.+4      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1070:	cd 93       	st	X+, r28
    1072:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    1088:	0e 94 1d 14 	call	0x283a	; 0x283a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    108c:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <pxEnd>
    1090:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <pxEnd+0x1>
    1094:	89 2b       	or	r24, r25
    1096:	09 f4       	brne	.+2      	; 0x109a <pvPortMalloc+0x20>
        {
            prvHeapInit();
    1098:	7d df       	rcall	.-262    	; 0xf94 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    109a:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <xBlockAllocatedBit>
    109e:	90 91 17 09 	lds	r25, 0x0917	; 0x800917 <xBlockAllocatedBit+0x1>
    10a2:	80 23       	and	r24, r16
    10a4:	91 23       	and	r25, r17
    10a6:	89 2b       	or	r24, r25
    10a8:	09 f0       	breq	.+2      	; 0x10ac <pvPortMalloc+0x32>
    10aa:	76 c0       	rjmp	.+236    	; 0x1198 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    10ac:	01 15       	cp	r16, r1
    10ae:	11 05       	cpc	r17, r1
    10b0:	49 f0       	breq	.+18     	; 0x10c4 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    10b2:	c8 01       	movw	r24, r16
    10b4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    10b6:	08 17       	cp	r16, r24
    10b8:	19 07       	cpc	r17, r25
    10ba:	18 f0       	brcs	.+6      	; 0x10c2 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    10bc:	00 e0       	ldi	r16, 0x00	; 0
    10be:	10 e0       	ldi	r17, 0x00	; 0
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    10c2:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10c4:	01 15       	cp	r16, r1
    10c6:	11 05       	cpc	r17, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <pvPortMalloc+0x52>
    10ca:	69 c0       	rjmp	.+210    	; 0x119e <pvPortMalloc+0x124>
    10cc:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xFreeBytesRemaining>
    10d0:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xFreeBytesRemaining+0x1>
    10d4:	80 17       	cp	r24, r16
    10d6:	91 07       	cpc	r25, r17
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <pvPortMalloc+0x62>
    10da:	64 c0       	rjmp	.+200    	; 0x11a4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    10dc:	c0 91 22 09 	lds	r28, 0x0922	; 0x800922 <xStart>
    10e0:	d0 91 23 09 	lds	r29, 0x0923	; 0x800923 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    10e4:	e2 e2       	ldi	r30, 0x22	; 34
    10e6:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    10ea:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    10ec:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	9b 81       	ldd	r25, Y+3	; 0x03
    10f2:	80 17       	cp	r24, r16
    10f4:	91 07       	cpc	r25, r17
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <pvPortMalloc+0x86>
    10f8:	88 81       	ld	r24, Y
    10fa:	99 81       	ldd	r25, Y+1	; 0x01
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	a9 f7       	brne	.-22     	; 0x10ea <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    1100:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <pxEnd>
    1104:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <pxEnd+0x1>
    1108:	c8 17       	cp	r28, r24
    110a:	d9 07       	cpc	r29, r25
    110c:	09 f4       	brne	.+2      	; 0x1110 <pvPortMalloc+0x96>
    110e:	4d c0       	rjmp	.+154    	; 0x11aa <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1110:	e0 80       	ld	r14, Z
    1112:	f1 80       	ldd	r15, Z+1	; 0x01
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	e8 0e       	add	r14, r24
    1118:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    111a:	88 81       	ld	r24, Y
    111c:	99 81       	ldd	r25, Y+1	; 0x01
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1122:	2a 81       	ldd	r18, Y+2	; 0x02
    1124:	3b 81       	ldd	r19, Y+3	; 0x03
    1126:	20 1b       	sub	r18, r16
    1128:	31 0b       	sbc	r19, r17
    112a:	29 30       	cpi	r18, 0x09	; 9
    112c:	31 05       	cpc	r19, r1
    112e:	48 f0       	brcs	.+18     	; 0x1142 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1130:	ce 01       	movw	r24, r28
    1132:	80 0f       	add	r24, r16
    1134:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1136:	fc 01       	movw	r30, r24
    1138:	33 83       	std	Z+3, r19	; 0x03
    113a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    113c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    113e:	0a 83       	std	Y+2, r16	; 0x02
    1140:	52 df       	rcall	.-348    	; 0xfe6 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    1142:	2a 81       	ldd	r18, Y+2	; 0x02
    1144:	3b 81       	ldd	r19, Y+3	; 0x03
    1146:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xFreeBytesRemaining>
    114a:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xFreeBytesRemaining+0x1>
    114e:	82 1b       	sub	r24, r18
    1150:	93 0b       	sbc	r25, r19
    1152:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xFreeBytesRemaining+0x1>
    1156:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    115a:	40 91 1c 09 	lds	r20, 0x091C	; 0x80091c <xMinimumEverFreeBytesRemaining>
    115e:	50 91 1d 09 	lds	r21, 0x091D	; 0x80091d <xMinimumEverFreeBytesRemaining+0x1>
    1162:	84 17       	cp	r24, r20
    1164:	95 07       	cpc	r25, r21
    1166:	20 f4       	brcc	.+8      	; 0x1170 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1168:	90 93 1d 09 	sts	0x091D, r25	; 0x80091d <xMinimumEverFreeBytesRemaining+0x1>
    116c:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    1170:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <xBlockAllocatedBit>
    1174:	90 91 17 09 	lds	r25, 0x0917	; 0x800917 <xBlockAllocatedBit+0x1>
    1178:	28 2b       	or	r18, r24
    117a:	39 2b       	or	r19, r25
    117c:	3b 83       	std	Y+3, r19	; 0x03
    117e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1180:	19 82       	std	Y+1, r1	; 0x01
    1182:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    1184:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <xNumberOfSuccessfulAllocations>
    1188:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <xNumberOfSuccessfulAllocations+0x1>
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	90 93 1b 09 	sts	0x091B, r25	; 0x80091b <xNumberOfSuccessfulAllocations+0x1>
    1192:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <xNumberOfSuccessfulAllocations>
    1196:	0b c0       	rjmp	.+22     	; 0x11ae <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    1198:	e1 2c       	mov	r14, r1
    119a:	f1 2c       	mov	r15, r1
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <pvPortMalloc+0x134>
    119e:	e1 2c       	mov	r14, r1
    11a0:	f1 2c       	mov	r15, r1
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <pvPortMalloc+0x134>
    11a4:	e1 2c       	mov	r14, r1
    11a6:	f1 2c       	mov	r15, r1
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <pvPortMalloc+0x134>
    11aa:	e1 2c       	mov	r14, r1
    11ac:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    11ae:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    11b2:	e1 14       	cp	r14, r1
    11b4:	f1 04       	cpc	r15, r1
    11b6:	11 f4       	brne	.+4      	; 0x11bc <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    11b8:	0e 94 1a 21 	call	0x4234	; 0x4234 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    11bc:	c7 01       	movw	r24, r14
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	08 95       	ret

000011cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	91 f1       	breq	.+100    	; 0x123c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    11d8:	ec 01       	movw	r28, r24
    11da:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    11dc:	4a 81       	ldd	r20, Y+2	; 0x02
    11de:	5b 81       	ldd	r21, Y+3	; 0x03
    11e0:	20 91 16 09 	lds	r18, 0x0916	; 0x800916 <xBlockAllocatedBit>
    11e4:	30 91 17 09 	lds	r19, 0x0917	; 0x800917 <xBlockAllocatedBit+0x1>
    11e8:	ba 01       	movw	r22, r20
    11ea:	62 23       	and	r22, r18
    11ec:	73 23       	and	r23, r19
    11ee:	67 2b       	or	r22, r23
    11f0:	29 f1       	breq	.+74     	; 0x123c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    11f2:	68 81       	ld	r22, Y
    11f4:	79 81       	ldd	r23, Y+1	; 0x01
    11f6:	67 2b       	or	r22, r23
    11f8:	09 f5       	brne	.+66     	; 0x123c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    11fa:	20 95       	com	r18
    11fc:	30 95       	com	r19
    11fe:	24 23       	and	r18, r20
    1200:	35 23       	and	r19, r21
    1202:	3b 83       	std	Y+3, r19	; 0x03
    1204:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    1206:	0e 94 1d 14 	call	0x283a	; 0x283a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	9b 81       	ldd	r25, Y+3	; 0x03
    120e:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xFreeBytesRemaining>
    1212:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xFreeBytesRemaining+0x1>
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xFreeBytesRemaining+0x1>
    121e:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1222:	ce 01       	movw	r24, r28
    1224:	e0 de       	rcall	.-576    	; 0xfe6 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    1226:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <xNumberOfSuccessfulFrees>
    122a:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <xNumberOfSuccessfulFrees+0x1>
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <xNumberOfSuccessfulFrees+0x1>
    1234:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    1238:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1246:	fc 01       	movw	r30, r24
    1248:	03 96       	adiw	r24, 0x03	; 3
    124a:	92 83       	std	Z+2, r25	; 0x02
    124c:	81 83       	std	Z+1, r24	; 0x01
    124e:	4f ef       	ldi	r20, 0xFF	; 255
    1250:	5f ef       	ldi	r21, 0xFF	; 255
    1252:	ba 01       	movw	r22, r20
    1254:	43 83       	std	Z+3, r20	; 0x03
    1256:	54 83       	std	Z+4, r21	; 0x04
    1258:	65 83       	std	Z+5, r22	; 0x05
    125a:	76 83       	std	Z+6, r23	; 0x06
    125c:	90 87       	std	Z+8, r25	; 0x08
    125e:	87 83       	std	Z+7, r24	; 0x07
    1260:	92 87       	std	Z+10, r25	; 0x0a
    1262:	81 87       	std	Z+9, r24	; 0x09
    1264:	10 82       	st	Z, r1
    1266:	08 95       	ret

00001268 <vListInitialiseItem>:
    1268:	fc 01       	movw	r30, r24
    126a:	13 86       	std	Z+11, r1	; 0x0b
    126c:	12 86       	std	Z+10, r1	; 0x0a
    126e:	08 95       	ret

00001270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    127a:	08 81       	ld	r16, Y
    127c:	19 81       	ldd	r17, Y+1	; 0x01
    127e:	2a 81       	ldd	r18, Y+2	; 0x02
    1280:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1282:	0f 3f       	cpi	r16, 0xFF	; 255
    1284:	4f ef       	ldi	r20, 0xFF	; 255
    1286:	14 07       	cpc	r17, r20
    1288:	24 07       	cpc	r18, r20
    128a:	34 07       	cpc	r19, r20
    128c:	21 f4       	brne	.+8      	; 0x1296 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    128e:	fc 01       	movw	r30, r24
    1290:	a1 85       	ldd	r26, Z+9	; 0x09
    1292:	b2 85       	ldd	r27, Z+10	; 0x0a
    1294:	11 c0       	rjmp	.+34     	; 0x12b8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1296:	dc 01       	movw	r26, r24
    1298:	13 96       	adiw	r26, 0x03	; 3
    129a:	01 c0       	rjmp	.+2      	; 0x129e <vListInsert+0x2e>
    129c:	df 01       	movw	r26, r30
    129e:	14 96       	adiw	r26, 0x04	; 4
    12a0:	ed 91       	ld	r30, X+
    12a2:	fc 91       	ld	r31, X
    12a4:	15 97       	sbiw	r26, 0x05	; 5
    12a6:	40 81       	ld	r20, Z
    12a8:	51 81       	ldd	r21, Z+1	; 0x01
    12aa:	62 81       	ldd	r22, Z+2	; 0x02
    12ac:	73 81       	ldd	r23, Z+3	; 0x03
    12ae:	04 17       	cp	r16, r20
    12b0:	15 07       	cpc	r17, r21
    12b2:	26 07       	cpc	r18, r22
    12b4:	37 07       	cpc	r19, r23
    12b6:	90 f7       	brcc	.-28     	; 0x129c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    12b8:	14 96       	adiw	r26, 0x04	; 4
    12ba:	ed 91       	ld	r30, X+
    12bc:	fc 91       	ld	r31, X
    12be:	15 97       	sbiw	r26, 0x05	; 5
    12c0:	fd 83       	std	Y+5, r31	; 0x05
    12c2:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    12c4:	d7 83       	std	Z+7, r29	; 0x07
    12c6:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    12c8:	bf 83       	std	Y+7, r27	; 0x07
    12ca:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    12cc:	15 96       	adiw	r26, 0x05	; 5
    12ce:	dc 93       	st	X, r29
    12d0:	ce 93       	st	-X, r28
    12d2:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    12d4:	9b 87       	std	Y+11, r25	; 0x0b
    12d6:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    12d8:	fc 01       	movw	r30, r24
    12da:	20 81       	ld	r18, Z
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	20 83       	st	Z, r18
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    12f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    12f2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    12f4:	c4 81       	ldd	r28, Z+4	; 0x04
    12f6:	d5 81       	ldd	r29, Z+5	; 0x05
    12f8:	86 81       	ldd	r24, Z+6	; 0x06
    12fa:	97 81       	ldd	r25, Z+7	; 0x07
    12fc:	9f 83       	std	Y+7, r25	; 0x07
    12fe:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1300:	c6 81       	ldd	r28, Z+6	; 0x06
    1302:	d7 81       	ldd	r29, Z+7	; 0x07
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	95 81       	ldd	r25, Z+5	; 0x05
    1308:	9d 83       	std	Y+5, r25	; 0x05
    130a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	8d 91       	ld	r24, X+
    1310:	9c 91       	ld	r25, X
    1312:	12 97       	sbiw	r26, 0x02	; 2
    1314:	e8 17       	cp	r30, r24
    1316:	f9 07       	cpc	r31, r25
    1318:	31 f4       	brne	.+12     	; 0x1326 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    131a:	86 81       	ldd	r24, Z+6	; 0x06
    131c:	97 81       	ldd	r25, Z+7	; 0x07
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	9c 93       	st	X, r25
    1322:	8e 93       	st	-X, r24
    1324:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1326:	13 86       	std	Z+11, r1	; 0x0b
    1328:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    132a:	8c 91       	ld	r24, X
    132c:	81 50       	subi	r24, 0x01	; 1
    132e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1330:	8c 91       	ld	r24, X
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    1338:	a8 95       	wdr
    133a:	90 ec       	ldi	r25, 0xC0	; 192
    133c:	88 e1       	ldi	r24, 0x18	; 24
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	a8 95       	wdr
    1344:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    134e:	08 95       	ret

00001350 <pxPortInitialiseStack>:
    1350:	fc 01       	movw	r30, r24
    1352:	60 83       	st	Z, r22
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	70 83       	st	Z, r23
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	10 82       	st	Z, r1
    135c:	31 97       	sbiw	r30, 0x01	; 1
    135e:	10 82       	st	Z, r1
    1360:	31 97       	sbiw	r30, 0x01	; 1
    1362:	20 e8       	ldi	r18, 0x80	; 128
    1364:	20 83       	st	Z, r18
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	10 82       	st	Z, r1
    136a:	31 97       	sbiw	r30, 0x01	; 1
    136c:	10 82       	st	Z, r1
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	10 82       	st	Z, r1
    1372:	77 97       	sbiw	r30, 0x17	; 23
    1374:	40 83       	st	Z, r20
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	50 83       	st	Z, r21
    137a:	86 97       	sbiw	r24, 0x26	; 38
    137c:	08 95       	ret

0000137e <xPortStartScheduler>:
    137e:	dc df       	rcall	.-72     	; 0x1338 <prvSetupTimerInterrupt>
    1380:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1384:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1388:	cd 91       	ld	r28, X+
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	dd 91       	ld	r29, X+
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	bf 91       	pop	r27
    139a:	af 91       	pop	r26
    139c:	9f 91       	pop	r25
    139e:	8f 91       	pop	r24
    13a0:	7f 91       	pop	r23
    13a2:	6f 91       	pop	r22
    13a4:	5f 91       	pop	r21
    13a6:	4f 91       	pop	r20
    13a8:	3f 91       	pop	r19
    13aa:	2f 91       	pop	r18
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	9f 90       	pop	r9
    13be:	8f 90       	pop	r8
    13c0:	7f 90       	pop	r7
    13c2:	6f 90       	pop	r6
    13c4:	5f 90       	pop	r5
    13c6:	4f 90       	pop	r4
    13c8:	3f 90       	pop	r3
    13ca:	2f 90       	pop	r2
    13cc:	1f 90       	pop	r1
    13ce:	0f 90       	pop	r0
    13d0:	0c be       	out	0x3c, r0	; 60
    13d2:	0f 90       	pop	r0
    13d4:	0b be       	out	0x3b, r0	; 59
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	08 95       	ret
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	08 95       	ret

000013e2 <vPortYield>:
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	0f 92       	push	r0
    13ea:	0b b6       	in	r0, 0x3b	; 59
    13ec:	0f 92       	push	r0
    13ee:	0c b6       	in	r0, 0x3c	; 60
    13f0:	0f 92       	push	r0
    13f2:	1f 92       	push	r1
    13f4:	11 24       	eor	r1, r1
    13f6:	2f 92       	push	r2
    13f8:	3f 92       	push	r3
    13fa:	4f 92       	push	r4
    13fc:	5f 92       	push	r5
    13fe:	6f 92       	push	r6
    1400:	7f 92       	push	r7
    1402:	8f 92       	push	r8
    1404:	9f 92       	push	r9
    1406:	af 92       	push	r10
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	ef 93       	push	r30
    1430:	ff 93       	push	r31
    1432:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1436:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    143a:	0d b6       	in	r0, 0x3d	; 61
    143c:	0d 92       	st	X+, r0
    143e:	0e b6       	in	r0, 0x3e	; 62
    1440:	0d 92       	st	X+, r0
    1442:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <vTaskSwitchContext>
    1446:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    144a:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    144e:	cd 91       	ld	r28, X+
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	dd 91       	ld	r29, X+
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	ff 91       	pop	r31
    1458:	ef 91       	pop	r30
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	bf 90       	pop	r11
    1480:	af 90       	pop	r10
    1482:	9f 90       	pop	r9
    1484:	8f 90       	pop	r8
    1486:	7f 90       	pop	r7
    1488:	6f 90       	pop	r6
    148a:	5f 90       	pop	r5
    148c:	4f 90       	pop	r4
    148e:	3f 90       	pop	r3
    1490:	2f 90       	pop	r2
    1492:	1f 90       	pop	r1
    1494:	0f 90       	pop	r0
    1496:	0c be       	out	0x3c, r0	; 60
    1498:	0f 90       	pop	r0
    149a:	0b be       	out	0x3b, r0	; 59
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	08 95       	ret

000014a4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	0f 92       	push	r0
    14ac:	0b b6       	in	r0, 0x3b	; 59
    14ae:	0f 92       	push	r0
    14b0:	0c b6       	in	r0, 0x3c	; 60
    14b2:	0f 92       	push	r0
    14b4:	1f 92       	push	r1
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 92       	push	r2
    14ba:	3f 92       	push	r3
    14bc:	4f 92       	push	r4
    14be:	5f 92       	push	r5
    14c0:	6f 92       	push	r6
    14c2:	7f 92       	push	r7
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ef 93       	push	r30
    14f2:	ff 93       	push	r31
    14f4:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    14f8:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    14fc:	0d b6       	in	r0, 0x3d	; 61
    14fe:	0d 92       	st	X+, r0
    1500:	0e b6       	in	r0, 0x3e	; 62
    1502:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1504:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1506:	0e 94 31 14 	call	0x2862	; 0x2862 <xTaskIncrementTick>
    150a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    150c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1510:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1514:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1518:	cd 91       	ld	r28, X+
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	dd 91       	ld	r29, X+
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	bf 91       	pop	r27
    152a:	af 91       	pop	r26
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	7f 91       	pop	r23
    1532:	6f 91       	pop	r22
    1534:	5f 91       	pop	r21
    1536:	4f 91       	pop	r20
    1538:	3f 91       	pop	r19
    153a:	2f 91       	pop	r18
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	7f 90       	pop	r7
    1552:	6f 90       	pop	r6
    1554:	5f 90       	pop	r5
    1556:	4f 90       	pop	r4
    1558:	3f 90       	pop	r3
    155a:	2f 90       	pop	r2
    155c:	1f 90       	pop	r1
    155e:	0f 90       	pop	r0
    1560:	0c be       	out	0x3c, r0	; 60
    1562:	0f 90       	pop	r0
    1564:	0b be       	out	0x3b, r0	; 59
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    156c:	08 95       	ret

0000156e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    156e:	9a df       	rcall	.-204    	; 0x14a4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1570:	18 95       	reti

00001572 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1572:	dc 01       	movw	r26, r24
    1574:	53 96       	adiw	r26, 0x13	; 19
    1576:	2c 91       	ld	r18, X
    1578:	53 97       	sbiw	r26, 0x13	; 19
    157a:	22 23       	and	r18, r18
    157c:	41 f0       	breq	.+16     	; 0x158e <prvGetDisinheritPriorityAfterTimeout+0x1c>
    157e:	5a 96       	adiw	r26, 0x1a	; 26
    1580:	ed 91       	ld	r30, X+
    1582:	fc 91       	ld	r31, X
    1584:	5b 97       	sbiw	r26, 0x1b	; 27
    1586:	90 81       	ld	r25, Z
    1588:	8a e0       	ldi	r24, 0x0A	; 10
    158a:	89 1b       	sub	r24, r25
    158c:	08 95       	ret
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	08 95       	ret

00001592 <prvIsQueueEmpty>:
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	0f 92       	push	r0
    1598:	fc 01       	movw	r30, r24
    159a:	86 8d       	ldd	r24, Z+30	; 0x1e
    159c:	81 11       	cpse	r24, r1
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <prvIsQueueEmpty+0x12>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <prvIsQueueEmpty+0x14>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	08 95       	ret

000015ac <prvIsQueueFull>:
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	0f 92       	push	r0
    15b2:	fc 01       	movw	r30, r24
    15b4:	26 8d       	ldd	r18, Z+30	; 0x1e
    15b6:	87 8d       	ldd	r24, Z+31	; 0x1f
    15b8:	28 13       	cpse	r18, r24
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <prvIsQueueFull+0x14>
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <prvIsQueueFull+0x16>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	08 95       	ret

000015c8 <prvCopyDataToQueue>:
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	04 2f       	mov	r16, r20
    15d4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    15d6:	48 a1       	ldd	r20, Y+32	; 0x20
    15d8:	41 11       	cpse	r20, r1
    15da:	0c c0       	rjmp	.+24     	; 0x15f4 <prvCopyDataToQueue+0x2c>
    15dc:	88 81       	ld	r24, Y
    15de:	99 81       	ldd	r25, Y+1	; 0x01
    15e0:	89 2b       	or	r24, r25
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <prvCopyDataToQueue+0x1e>
    15e4:	42 c0       	rjmp	.+132    	; 0x166a <prvCopyDataToQueue+0xa2>
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	0e 94 35 1a 	call	0x346a	; 0x346a <xTaskPriorityDisinherit>
    15ee:	1d 82       	std	Y+5, r1	; 0x05
    15f0:	1c 82       	std	Y+4, r1	; 0x04
    15f2:	42 c0       	rjmp	.+132    	; 0x1678 <prvCopyDataToQueue+0xb0>
    15f4:	01 11       	cpse	r16, r1
    15f6:	17 c0       	rjmp	.+46     	; 0x1626 <prvCopyDataToQueue+0x5e>
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	0e 94 04 37 	call	0x6e08	; 0x6e08 <memcpy>
    1602:	28 a1       	ldd	r18, Y+32	; 0x20
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	82 0f       	add	r24, r18
    160a:	91 1d       	adc	r25, r1
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	8a 83       	std	Y+2, r24	; 0x02
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
    1618:	50 f1       	brcs	.+84     	; 0x166e <prvCopyDataToQueue+0xa6>
    161a:	88 81       	ld	r24, Y
    161c:	99 81       	ldd	r25, Y+1	; 0x01
    161e:	9b 83       	std	Y+3, r25	; 0x03
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	29 c0       	rjmp	.+82     	; 0x1678 <prvCopyDataToQueue+0xb0>
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	8e 81       	ldd	r24, Y+6	; 0x06
    162a:	9f 81       	ldd	r25, Y+7	; 0x07
    162c:	0e 94 04 37 	call	0x6e08	; 0x6e08 <memcpy>
    1630:	88 a1       	ldd	r24, Y+32	; 0x20
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	91 95       	neg	r25
    1636:	81 95       	neg	r24
    1638:	91 09       	sbc	r25, r1
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	3f 81       	ldd	r19, Y+7	; 0x07
    163e:	28 0f       	add	r18, r24
    1640:	39 1f       	adc	r19, r25
    1642:	3f 83       	std	Y+7, r19	; 0x07
    1644:	2e 83       	std	Y+6, r18	; 0x06
    1646:	48 81       	ld	r20, Y
    1648:	59 81       	ldd	r21, Y+1	; 0x01
    164a:	24 17       	cp	r18, r20
    164c:	35 07       	cpc	r19, r21
    164e:	30 f4       	brcc	.+12     	; 0x165c <prvCopyDataToQueue+0x94>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	82 0f       	add	r24, r18
    1656:	93 1f       	adc	r25, r19
    1658:	9f 83       	std	Y+7, r25	; 0x07
    165a:	8e 83       	std	Y+6, r24	; 0x06
    165c:	02 30       	cpi	r16, 0x02	; 2
    165e:	49 f4       	brne	.+18     	; 0x1672 <prvCopyDataToQueue+0xaa>
    1660:	11 23       	and	r17, r17
    1662:	49 f0       	breq	.+18     	; 0x1676 <prvCopyDataToQueue+0xae>
    1664:	11 50       	subi	r17, 0x01	; 1
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <prvCopyDataToQueue+0xb0>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <prvCopyDataToQueue+0xb0>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <prvCopyDataToQueue+0xb0>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <prvCopyDataToQueue+0xb0>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	1f 5f       	subi	r17, 0xFF	; 255
    167a:	1e 8f       	std	Y+30, r17	; 0x1e
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	08 95       	ret

00001686 <prvCopyDataFromQueue>:
    1686:	fc 01       	movw	r30, r24
    1688:	40 a1       	ldd	r20, Z+32	; 0x20
    168a:	44 23       	and	r20, r20
    168c:	a9 f0       	breq	.+42     	; 0x16b8 <prvCopyDataFromQueue+0x32>
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	26 81       	ldd	r18, Z+6	; 0x06
    1692:	37 81       	ldd	r19, Z+7	; 0x07
    1694:	24 0f       	add	r18, r20
    1696:	35 1f       	adc	r19, r21
    1698:	37 83       	std	Z+7, r19	; 0x07
    169a:	26 83       	std	Z+6, r18	; 0x06
    169c:	84 81       	ldd	r24, Z+4	; 0x04
    169e:	95 81       	ldd	r25, Z+5	; 0x05
    16a0:	28 17       	cp	r18, r24
    16a2:	39 07       	cpc	r19, r25
    16a4:	20 f0       	brcs	.+8      	; 0x16ae <prvCopyDataFromQueue+0x28>
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	97 83       	std	Z+7, r25	; 0x07
    16ac:	86 83       	std	Z+6, r24	; 0x06
    16ae:	cb 01       	movw	r24, r22
    16b0:	66 81       	ldd	r22, Z+6	; 0x06
    16b2:	77 81       	ldd	r23, Z+7	; 0x07
    16b4:	0c 94 04 37 	jmp	0x6e08	; 0x6e08 <memcpy>
    16b8:	08 95       	ret

000016ba <prvUnlockQueue>:
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	ec 01       	movw	r28, r24
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	0f 92       	push	r0
    16c8:	1a a1       	ldd	r17, Y+34	; 0x22
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <prvUnlockQueue+0x28>
    16cc:	8b 89       	ldd	r24, Y+19	; 0x13
    16ce:	88 23       	and	r24, r24
    16d0:	51 f0       	breq	.+20     	; 0x16e6 <prvUnlockQueue+0x2c>
    16d2:	ce 01       	movw	r24, r28
    16d4:	43 96       	adiw	r24, 0x13	; 19
    16d6:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskRemoveFromEventList>
    16da:	81 11       	cpse	r24, r1
    16dc:	0e 94 97 19 	call	0x332e	; 0x332e <vTaskMissedYield>
    16e0:	11 50       	subi	r17, 0x01	; 1
    16e2:	11 16       	cp	r1, r17
    16e4:	9c f3       	brlt	.-26     	; 0x16cc <prvUnlockQueue+0x12>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	8a a3       	std	Y+34, r24	; 0x22
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	0f 92       	push	r0
    16f4:	19 a1       	ldd	r17, Y+33	; 0x21
    16f6:	0b c0       	rjmp	.+22     	; 0x170e <prvUnlockQueue+0x54>
    16f8:	88 85       	ldd	r24, Y+8	; 0x08
    16fa:	88 23       	and	r24, r24
    16fc:	51 f0       	breq	.+20     	; 0x1712 <prvUnlockQueue+0x58>
    16fe:	ce 01       	movw	r24, r28
    1700:	08 96       	adiw	r24, 0x08	; 8
    1702:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskRemoveFromEventList>
    1706:	81 11       	cpse	r24, r1
    1708:	0e 94 97 19 	call	0x332e	; 0x332e <vTaskMissedYield>
    170c:	11 50       	subi	r17, 0x01	; 1
    170e:	11 16       	cp	r1, r17
    1710:	9c f3       	brlt	.-26     	; 0x16f8 <prvUnlockQueue+0x3e>
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	89 a3       	std	Y+33, r24	; 0x21
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	08 95       	ret

00001722 <xQueueGenericReset>:
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	ec 01       	movw	r28, r24
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	0f 92       	push	r0
    172e:	e8 81       	ld	r30, Y
    1730:	f9 81       	ldd	r31, Y+1	; 0x01
    1732:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1734:	28 a1       	ldd	r18, Y+32	; 0x20
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	82 9f       	mul	r24, r18
    173c:	a0 01       	movw	r20, r0
    173e:	83 9f       	mul	r24, r19
    1740:	50 0d       	add	r21, r0
    1742:	92 9f       	mul	r25, r18
    1744:	50 0d       	add	r21, r0
    1746:	11 24       	eor	r1, r1
    1748:	4e 0f       	add	r20, r30
    174a:	5f 1f       	adc	r21, r31
    174c:	5d 83       	std	Y+5, r21	; 0x05
    174e:	4c 83       	std	Y+4, r20	; 0x04
    1750:	1e 8e       	std	Y+30, r1	; 0x1e
    1752:	fb 83       	std	Y+3, r31	; 0x03
    1754:	ea 83       	std	Y+2, r30	; 0x02
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	28 9f       	mul	r18, r24
    175a:	a0 01       	movw	r20, r0
    175c:	29 9f       	mul	r18, r25
    175e:	50 0d       	add	r21, r0
    1760:	38 9f       	mul	r19, r24
    1762:	50 0d       	add	r21, r0
    1764:	11 24       	eor	r1, r1
    1766:	cf 01       	movw	r24, r30
    1768:	84 0f       	add	r24, r20
    176a:	95 1f       	adc	r25, r21
    176c:	9f 83       	std	Y+7, r25	; 0x07
    176e:	8e 83       	std	Y+6, r24	; 0x06
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	89 a3       	std	Y+33, r24	; 0x21
    1774:	8a a3       	std	Y+34, r24	; 0x22
    1776:	61 11       	cpse	r22, r1
    1778:	0b c0       	rjmp	.+22     	; 0x1790 <xQueueGenericReset+0x6e>
    177a:	88 85       	ldd	r24, Y+8	; 0x08
    177c:	88 23       	and	r24, r24
    177e:	71 f0       	breq	.+28     	; 0x179c <xQueueGenericReset+0x7a>
    1780:	ce 01       	movw	r24, r28
    1782:	08 96       	adiw	r24, 0x08	; 8
    1784:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskRemoveFromEventList>
    1788:	88 23       	and	r24, r24
    178a:	41 f0       	breq	.+16     	; 0x179c <xQueueGenericReset+0x7a>
    178c:	2a de       	rcall	.-940    	; 0x13e2 <vPortYield>
    178e:	06 c0       	rjmp	.+12     	; 0x179c <xQueueGenericReset+0x7a>
    1790:	ce 01       	movw	r24, r28
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	58 dd       	rcall	.-1360   	; 0x1246 <vListInitialise>
    1796:	ce 01       	movw	r24, r28
    1798:	43 96       	adiw	r24, 0x13	; 19
    179a:	55 dd       	rcall	.-1366   	; 0x1246 <vListInitialise>
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <prvInitialiseNewQueue>:
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	f8 01       	movw	r30, r16
    17ae:	61 11       	cpse	r22, r1
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <prvInitialiseNewQueue+0x10>
    17b2:	11 83       	std	Z+1, r17	; 0x01
    17b4:	00 83       	st	Z, r16
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <prvInitialiseNewQueue+0x14>
    17b8:	51 83       	std	Z+1, r21	; 0x01
    17ba:	40 83       	st	Z, r20
    17bc:	87 8f       	std	Z+31, r24	; 0x1f
    17be:	60 a3       	std	Z+32, r22	; 0x20
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	cf 01       	movw	r24, r30
    17c4:	ae df       	rcall	.-164    	; 0x1722 <xQueueGenericReset>
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <xQueueGenericCreate>:
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	f8 2e       	mov	r15, r24
    17dc:	e6 2e       	mov	r14, r22
    17de:	d4 2e       	mov	r13, r20
    17e0:	86 9f       	mul	r24, r22
    17e2:	c0 01       	movw	r24, r0
    17e4:	11 24       	eor	r1, r1
    17e6:	83 96       	adiw	r24, 0x23	; 35
    17e8:	48 dc       	rcall	.-1904   	; 0x107a <pvPortMalloc>
    17ea:	ec 01       	movw	r28, r24
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	41 f0       	breq	.+16     	; 0x1800 <xQueueGenericCreate+0x34>
    17f0:	8c 01       	movw	r16, r24
    17f2:	2d 2d       	mov	r18, r13
    17f4:	ac 01       	movw	r20, r24
    17f6:	4d 5d       	subi	r20, 0xDD	; 221
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	6e 2d       	mov	r22, r14
    17fc:	8f 2d       	mov	r24, r15
    17fe:	d4 df       	rcall	.-88     	; 0x17a8 <prvInitialiseNewQueue>
    1800:	ce 01       	movw	r24, r28
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	df 90       	pop	r13
    1810:	08 95       	ret

00001812 <xQueueGenericSend>:
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	29 97       	sbiw	r28, 0x09	; 9
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	7c 01       	movw	r14, r24
    1834:	6b 01       	movw	r12, r22
    1836:	2e 83       	std	Y+6, r18	; 0x06
    1838:	3f 83       	std	Y+7, r19	; 0x07
    183a:	48 87       	std	Y+8, r20	; 0x08
    183c:	59 87       	std	Y+9, r21	; 0x09
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	0f 92       	push	r0
    1846:	f7 01       	movw	r30, r14
    1848:	96 8d       	ldd	r25, Z+30	; 0x1e
    184a:	87 8d       	ldd	r24, Z+31	; 0x1f
    184c:	98 17       	cp	r25, r24
    184e:	10 f0       	brcs	.+4      	; 0x1854 <xQueueGenericSend+0x42>
    1850:	02 30       	cpi	r16, 0x02	; 2
    1852:	b1 f4       	brne	.+44     	; 0x1880 <xQueueGenericSend+0x6e>
    1854:	40 2f       	mov	r20, r16
    1856:	b6 01       	movw	r22, r12
    1858:	c7 01       	movw	r24, r14
    185a:	b6 de       	rcall	.-660    	; 0x15c8 <prvCopyDataToQueue>
    185c:	f7 01       	movw	r30, r14
    185e:	93 89       	ldd	r25, Z+19	; 0x13
    1860:	99 23       	and	r25, r25
    1862:	41 f0       	breq	.+16     	; 0x1874 <xQueueGenericSend+0x62>
    1864:	c7 01       	movw	r24, r14
    1866:	43 96       	adiw	r24, 0x13	; 19
    1868:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskRemoveFromEventList>
    186c:	88 23       	and	r24, r24
    186e:	21 f0       	breq	.+8      	; 0x1878 <xQueueGenericSend+0x66>
    1870:	b8 dd       	rcall	.-1168   	; 0x13e2 <vPortYield>
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <xQueueGenericSend+0x66>
    1874:	81 11       	cpse	r24, r1
    1876:	b5 dd       	rcall	.-1174   	; 0x13e2 <vPortYield>
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	4c c0       	rjmp	.+152    	; 0x1918 <xQueueGenericSend+0x106>
    1880:	8e 81       	ldd	r24, Y+6	; 0x06
    1882:	9f 81       	ldd	r25, Y+7	; 0x07
    1884:	a8 85       	ldd	r26, Y+8	; 0x08
    1886:	b9 85       	ldd	r27, Y+9	; 0x09
    1888:	89 2b       	or	r24, r25
    188a:	8a 2b       	or	r24, r26
    188c:	8b 2b       	or	r24, r27
    188e:	21 f4       	brne	.+8      	; 0x1898 <xQueueGenericSend+0x86>
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	40 c0       	rjmp	.+128    	; 0x1918 <xQueueGenericSend+0x106>
    1898:	11 11       	cpse	r17, r1
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <xQueueGenericSend+0x94>
    189c:	ce 01       	movw	r24, r28
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	0e 94 20 19 	call	0x3240	; 0x3240 <vTaskInternalSetTimeOutState>
    18a4:	11 e0       	ldi	r17, 0x01	; 1
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	c7 d7       	rcall	.+3982   	; 0x283a <vTaskSuspendAll>
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	0f 92       	push	r0
    18b2:	f7 01       	movw	r30, r14
    18b4:	81 a1       	ldd	r24, Z+33	; 0x21
    18b6:	8f 3f       	cpi	r24, 0xFF	; 255
    18b8:	09 f4       	brne	.+2      	; 0x18bc <xQueueGenericSend+0xaa>
    18ba:	11 a2       	std	Z+33, r1	; 0x21
    18bc:	f7 01       	movw	r30, r14
    18be:	82 a1       	ldd	r24, Z+34	; 0x22
    18c0:	8f 3f       	cpi	r24, 0xFF	; 255
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <xQueueGenericSend+0xb4>
    18c4:	12 a2       	std	Z+34, r1	; 0x22
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	be 01       	movw	r22, r28
    18cc:	6a 5f       	subi	r22, 0xFA	; 250
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	ce 01       	movw	r24, r28
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCheckForTimeOut>
    18d8:	81 11       	cpse	r24, r1
    18da:	19 c0       	rjmp	.+50     	; 0x190e <xQueueGenericSend+0xfc>
    18dc:	c7 01       	movw	r24, r14
    18de:	66 de       	rcall	.-820    	; 0x15ac <prvIsQueueFull>
    18e0:	88 23       	and	r24, r24
    18e2:	81 f0       	breq	.+32     	; 0x1904 <xQueueGenericSend+0xf2>
    18e4:	4e 81       	ldd	r20, Y+6	; 0x06
    18e6:	5f 81       	ldd	r21, Y+7	; 0x07
    18e8:	68 85       	ldd	r22, Y+8	; 0x08
    18ea:	79 85       	ldd	r23, Y+9	; 0x09
    18ec:	c7 01       	movw	r24, r14
    18ee:	08 96       	adiw	r24, 0x08	; 8
    18f0:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <vTaskPlaceOnEventList>
    18f4:	c7 01       	movw	r24, r14
    18f6:	e1 de       	rcall	.-574    	; 0x16ba <prvUnlockQueue>
    18f8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
    18fc:	81 11       	cpse	r24, r1
    18fe:	a0 cf       	rjmp	.-192    	; 0x1840 <xQueueGenericSend+0x2e>
    1900:	70 dd       	rcall	.-1312   	; 0x13e2 <vPortYield>
    1902:	9e cf       	rjmp	.-196    	; 0x1840 <xQueueGenericSend+0x2e>
    1904:	c7 01       	movw	r24, r14
    1906:	d9 de       	rcall	.-590    	; 0x16ba <prvUnlockQueue>
    1908:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
    190c:	99 cf       	rjmp	.-206    	; 0x1840 <xQueueGenericSend+0x2e>
    190e:	c7 01       	movw	r24, r14
    1910:	d4 de       	rcall	.-600    	; 0x16ba <prvUnlockQueue>
    1912:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	29 96       	adiw	r28, 0x09	; 9
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	08 95       	ret

00001936 <prvInitialiseMutex>:
    1936:	0f 93       	push	r16
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f0       	breq	.+26     	; 0x1956 <prvInitialiseMutex+0x20>
    193c:	fc 01       	movw	r30, r24
    193e:	15 82       	std	Z+5, r1	; 0x05
    1940:	14 82       	std	Z+4, r1	; 0x04
    1942:	11 82       	std	Z+1, r1	; 0x01
    1944:	10 82       	st	Z, r1
    1946:	16 82       	std	Z+6, r1	; 0x06
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	5e df       	rcall	.-324    	; 0x1812 <xQueueGenericSend>
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <xQueueCreateMutex>:
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	48 2f       	mov	r20, r24
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	33 df       	rcall	.-410    	; 0x17cc <xQueueGenericCreate>
    1966:	ec 01       	movw	r28, r24
    1968:	e6 df       	rcall	.-52     	; 0x1936 <prvInitialiseMutex>
    196a:	ce 01       	movw	r24, r28
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <xQueueGenericSendFromISR>:
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	8a 01       	movw	r16, r20
    1980:	fc 01       	movw	r30, r24
    1982:	56 8d       	ldd	r21, Z+30	; 0x1e
    1984:	37 8d       	ldd	r19, Z+31	; 0x1f
    1986:	53 17       	cp	r21, r19
    1988:	10 f0       	brcs	.+4      	; 0x198e <xQueueGenericSendFromISR+0x1c>
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	f9 f4       	brne	.+62     	; 0x19cc <xQueueGenericSendFromISR+0x5a>
    198e:	42 2f       	mov	r20, r18
    1990:	78 01       	movw	r14, r16
    1992:	ec 01       	movw	r28, r24
    1994:	1a a1       	ldd	r17, Y+34	; 0x22
    1996:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1998:	ce 01       	movw	r24, r28
    199a:	16 de       	rcall	.-980    	; 0x15c8 <prvCopyDataToQueue>
    199c:	1f 3f       	cpi	r17, 0xFF	; 255
    199e:	81 f4       	brne	.+32     	; 0x19c0 <xQueueGenericSendFromISR+0x4e>
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	88 23       	and	r24, r24
    19a4:	a9 f0       	breq	.+42     	; 0x19d0 <xQueueGenericSendFromISR+0x5e>
    19a6:	ce 01       	movw	r24, r28
    19a8:	43 96       	adiw	r24, 0x13	; 19
    19aa:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskRemoveFromEventList>
    19ae:	88 23       	and	r24, r24
    19b0:	89 f0       	breq	.+34     	; 0x19d4 <xQueueGenericSendFromISR+0x62>
    19b2:	e1 14       	cp	r14, r1
    19b4:	f1 04       	cpc	r15, r1
    19b6:	81 f0       	breq	.+32     	; 0x19d8 <xQueueGenericSendFromISR+0x66>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	f7 01       	movw	r30, r14
    19bc:	80 83       	st	Z, r24
    19be:	0d c0       	rjmp	.+26     	; 0x19da <xQueueGenericSendFromISR+0x68>
    19c0:	ff 24       	eor	r15, r15
    19c2:	f3 94       	inc	r15
    19c4:	f1 0e       	add	r15, r17
    19c6:	fa a2       	std	Y+34, r15	; 0x22
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <xQueueGenericSendFromISR+0x68>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <xQueueGenericSendFromISR+0x68>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <xQueueGenericSendFromISR+0x68>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <xQueueGenericSendFromISR+0x68>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	08 95       	ret

000019e8 <xQueueReceive>:
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	29 97       	sbiw	r28, 0x09	; 9
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	8c 01       	movw	r16, r24
    1a0a:	6b 01       	movw	r12, r22
    1a0c:	2e 83       	std	Y+6, r18	; 0x06
    1a0e:	3f 83       	std	Y+7, r19	; 0x07
    1a10:	48 87       	std	Y+8, r20	; 0x08
    1a12:	59 87       	std	Y+9, r21	; 0x09
    1a14:	e1 2c       	mov	r14, r1
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	0f 92       	push	r0
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1a20:	ff 20       	and	r15, r15
    1a22:	99 f0       	breq	.+38     	; 0x1a4a <xQueueReceive+0x62>
    1a24:	b6 01       	movw	r22, r12
    1a26:	c8 01       	movw	r24, r16
    1a28:	2e de       	rcall	.-932    	; 0x1686 <prvCopyDataFromQueue>
    1a2a:	fa 94       	dec	r15
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	f6 8e       	std	Z+30, r15	; 0x1e
    1a30:	80 85       	ldd	r24, Z+8	; 0x08
    1a32:	88 23       	and	r24, r24
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <xQueueReceive+0x5a>
    1a36:	c8 01       	movw	r24, r16
    1a38:	08 96       	adiw	r24, 0x08	; 8
    1a3a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskRemoveFromEventList>
    1a3e:	81 11       	cpse	r24, r1
    1a40:	d0 dc       	rcall	.-1632   	; 0x13e2 <vPortYield>
    1a42:	0f 90       	pop	r0
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	4f c0       	rjmp	.+158    	; 0x1ae8 <xQueueReceive+0x100>
    1a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4e:	a8 85       	ldd	r26, Y+8	; 0x08
    1a50:	b9 85       	ldd	r27, Y+9	; 0x09
    1a52:	89 2b       	or	r24, r25
    1a54:	8a 2b       	or	r24, r26
    1a56:	8b 2b       	or	r24, r27
    1a58:	21 f4       	brne	.+8      	; 0x1a62 <xQueueReceive+0x7a>
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	43 c0       	rjmp	.+134    	; 0x1ae8 <xQueueReceive+0x100>
    1a62:	e1 10       	cpse	r14, r1
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <xQueueReceive+0x8a>
    1a66:	ce 01       	movw	r24, r28
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	0e 94 20 19 	call	0x3240	; 0x3240 <vTaskInternalSetTimeOutState>
    1a6e:	ee 24       	eor	r14, r14
    1a70:	e3 94       	inc	r14
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	e1 d6       	rcall	.+3522   	; 0x283a <vTaskSuspendAll>
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	0f 92       	push	r0
    1a7e:	f8 01       	movw	r30, r16
    1a80:	81 a1       	ldd	r24, Z+33	; 0x21
    1a82:	8f 3f       	cpi	r24, 0xFF	; 255
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <xQueueReceive+0xa0>
    1a86:	11 a2       	std	Z+33, r1	; 0x21
    1a88:	f8 01       	movw	r30, r16
    1a8a:	82 a1       	ldd	r24, Z+34	; 0x22
    1a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <xQueueReceive+0xaa>
    1a90:	12 a2       	std	Z+34, r1	; 0x22
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	be 01       	movw	r22, r28
    1a98:	6a 5f       	subi	r22, 0xFA	; 250
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCheckForTimeOut>
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	17 c0       	rjmp	.+46     	; 0x1ad6 <xQueueReceive+0xee>
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	73 dd       	rcall	.-1306   	; 0x1592 <prvIsQueueEmpty>
    1aac:	88 23       	and	r24, r24
    1aae:	79 f0       	breq	.+30     	; 0x1ace <xQueueReceive+0xe6>
    1ab0:	4e 81       	ldd	r20, Y+6	; 0x06
    1ab2:	5f 81       	ldd	r21, Y+7	; 0x07
    1ab4:	68 85       	ldd	r22, Y+8	; 0x08
    1ab6:	79 85       	ldd	r23, Y+9	; 0x09
    1ab8:	c8 01       	movw	r24, r16
    1aba:	43 96       	adiw	r24, 0x13	; 19
    1abc:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <vTaskPlaceOnEventList>
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	fb dd       	rcall	.-1034   	; 0x16ba <prvUnlockQueue>
    1ac4:	fa d7       	rcall	.+4084   	; 0x2aba <xTaskResumeAll>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	a6 cf       	rjmp	.-180    	; 0x1a16 <xQueueReceive+0x2e>
    1aca:	8b dc       	rcall	.-1770   	; 0x13e2 <vPortYield>
    1acc:	a4 cf       	rjmp	.-184    	; 0x1a16 <xQueueReceive+0x2e>
    1ace:	c8 01       	movw	r24, r16
    1ad0:	f4 dd       	rcall	.-1048   	; 0x16ba <prvUnlockQueue>
    1ad2:	f3 d7       	rcall	.+4070   	; 0x2aba <xTaskResumeAll>
    1ad4:	a0 cf       	rjmp	.-192    	; 0x1a16 <xQueueReceive+0x2e>
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	f0 dd       	rcall	.-1056   	; 0x16ba <prvUnlockQueue>
    1ada:	ef d7       	rcall	.+4062   	; 0x2aba <xTaskResumeAll>
    1adc:	c8 01       	movw	r24, r16
    1ade:	59 dd       	rcall	.-1358   	; 0x1592 <prvIsQueueEmpty>
    1ae0:	88 23       	and	r24, r24
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <xQueueReceive+0xfe>
    1ae4:	98 cf       	rjmp	.-208    	; 0x1a16 <xQueueReceive+0x2e>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	29 96       	adiw	r28, 0x09	; 9
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	08 95       	ret

00001b06 <xQueueSemaphoreTake>:
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	29 97       	sbiw	r28, 0x09	; 9
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	8c 01       	movw	r16, r24
    1b24:	4e 83       	std	Y+6, r20	; 0x06
    1b26:	5f 83       	std	Y+7, r21	; 0x07
    1b28:	68 87       	std	Y+8, r22	; 0x08
    1b2a:	79 87       	std	Y+9, r23	; 0x09
    1b2c:	e1 2c       	mov	r14, r1
    1b2e:	f1 2c       	mov	r15, r1
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	0f 92       	push	r0
    1b36:	f8 01       	movw	r30, r16
    1b38:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b3a:	88 23       	and	r24, r24
    1b3c:	c9 f0       	breq	.+50     	; 0x1b70 <xQueueSemaphoreTake+0x6a>
    1b3e:	81 50       	subi	r24, 0x01	; 1
    1b40:	86 8f       	std	Z+30, r24	; 0x1e
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	89 2b       	or	r24, r25
    1b48:	29 f4       	brne	.+10     	; 0x1b54 <xQueueSemaphoreTake+0x4e>
    1b4a:	0e 94 21 1b 	call	0x3642	; 0x3642 <pvTaskIncrementMutexHeldCount>
    1b4e:	f8 01       	movw	r30, r16
    1b50:	95 83       	std	Z+5, r25	; 0x05
    1b52:	84 83       	std	Z+4, r24	; 0x04
    1b54:	f8 01       	movw	r30, r16
    1b56:	80 85       	ldd	r24, Z+8	; 0x08
    1b58:	88 23       	and	r24, r24
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <xQueueSemaphoreTake+0x62>
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	08 96       	adiw	r24, 0x08	; 8
    1b60:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <xTaskRemoveFromEventList>
    1b64:	81 11       	cpse	r24, r1
    1b66:	3d dc       	rcall	.-1926   	; 0x13e2 <vPortYield>
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	6f c0       	rjmp	.+222    	; 0x1c4e <xQueueSemaphoreTake+0x148>
    1b70:	8e 81       	ldd	r24, Y+6	; 0x06
    1b72:	9f 81       	ldd	r25, Y+7	; 0x07
    1b74:	a8 85       	ldd	r26, Y+8	; 0x08
    1b76:	b9 85       	ldd	r27, Y+9	; 0x09
    1b78:	89 2b       	or	r24, r25
    1b7a:	8a 2b       	or	r24, r26
    1b7c:	8b 2b       	or	r24, r27
    1b7e:	21 f4       	brne	.+8      	; 0x1b88 <xQueueSemaphoreTake+0x82>
    1b80:	0f 90       	pop	r0
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	63 c0       	rjmp	.+198    	; 0x1c4e <xQueueSemaphoreTake+0x148>
    1b88:	f1 10       	cpse	r15, r1
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <xQueueSemaphoreTake+0x92>
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	0e 94 20 19 	call	0x3240	; 0x3240 <vTaskInternalSetTimeOutState>
    1b94:	ff 24       	eor	r15, r15
    1b96:	f3 94       	inc	r15
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	4e d6       	rcall	.+3228   	; 0x283a <vTaskSuspendAll>
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	0f 92       	push	r0
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	81 a1       	ldd	r24, Z+33	; 0x21
    1ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    1baa:	09 f4       	brne	.+2      	; 0x1bae <xQueueSemaphoreTake+0xa8>
    1bac:	11 a2       	std	Z+33, r1	; 0x21
    1bae:	f8 01       	movw	r30, r16
    1bb0:	82 a1       	ldd	r24, Z+34	; 0x22
    1bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <xQueueSemaphoreTake+0xb2>
    1bb6:	12 a2       	std	Z+34, r1	; 0x22
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	be 01       	movw	r22, r28
    1bbe:	6a 5f       	subi	r22, 0xFA	; 250
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCheckForTimeOut>
    1bca:	81 11       	cpse	r24, r1
    1bcc:	26 c0       	rjmp	.+76     	; 0x1c1a <xQueueSemaphoreTake+0x114>
    1bce:	c8 01       	movw	r24, r16
    1bd0:	e0 dc       	rcall	.-1600   	; 0x1592 <prvIsQueueEmpty>
    1bd2:	88 23       	and	r24, r24
    1bd4:	f1 f0       	breq	.+60     	; 0x1c12 <xQueueSemaphoreTake+0x10c>
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	89 2b       	or	r24, r25
    1bde:	51 f4       	brne	.+20     	; 0x1bf4 <xQueueSemaphoreTake+0xee>
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	0f 92       	push	r0
    1be6:	84 81       	ldd	r24, Z+4	; 0x04
    1be8:	95 81       	ldd	r25, Z+5	; 0x05
    1bea:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskPriorityInherit>
    1bee:	e8 2e       	mov	r14, r24
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	4e 81       	ldd	r20, Y+6	; 0x06
    1bf6:	5f 81       	ldd	r21, Y+7	; 0x07
    1bf8:	68 85       	ldd	r22, Y+8	; 0x08
    1bfa:	79 85       	ldd	r23, Y+9	; 0x09
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	43 96       	adiw	r24, 0x13	; 19
    1c00:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <vTaskPlaceOnEventList>
    1c04:	c8 01       	movw	r24, r16
    1c06:	59 dd       	rcall	.-1358   	; 0x16ba <prvUnlockQueue>
    1c08:	58 d7       	rcall	.+3760   	; 0x2aba <xTaskResumeAll>
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	91 cf       	rjmp	.-222    	; 0x1b30 <xQueueSemaphoreTake+0x2a>
    1c0e:	e9 db       	rcall	.-2094   	; 0x13e2 <vPortYield>
    1c10:	8f cf       	rjmp	.-226    	; 0x1b30 <xQueueSemaphoreTake+0x2a>
    1c12:	c8 01       	movw	r24, r16
    1c14:	52 dd       	rcall	.-1372   	; 0x16ba <prvUnlockQueue>
    1c16:	51 d7       	rcall	.+3746   	; 0x2aba <xTaskResumeAll>
    1c18:	8b cf       	rjmp	.-234    	; 0x1b30 <xQueueSemaphoreTake+0x2a>
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	4e dd       	rcall	.-1380   	; 0x16ba <prvUnlockQueue>
    1c1e:	4d d7       	rcall	.+3738   	; 0x2aba <xTaskResumeAll>
    1c20:	c8 01       	movw	r24, r16
    1c22:	b7 dc       	rcall	.-1682   	; 0x1592 <prvIsQueueEmpty>
    1c24:	88 23       	and	r24, r24
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <xQueueSemaphoreTake+0x124>
    1c28:	83 cf       	rjmp	.-250    	; 0x1b30 <xQueueSemaphoreTake+0x2a>
    1c2a:	ee 20       	and	r14, r14
    1c2c:	79 f0       	breq	.+30     	; 0x1c4c <xQueueSemaphoreTake+0x146>
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	0f 92       	push	r0
    1c34:	c8 01       	movw	r24, r16
    1c36:	9d dc       	rcall	.-1734   	; 0x1572 <prvGetDisinheritPriorityAfterTimeout>
    1c38:	68 2f       	mov	r22, r24
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	84 81       	ldd	r24, Z+4	; 0x04
    1c3e:	95 81       	ldd	r25, Z+5	; 0x05
    1c40:	0e 94 90 1a 	call	0x3520	; 0x3520 <vTaskPriorityDisinheritAfterTimeout>
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <xQueueSemaphoreTake+0x148>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	29 96       	adiw	r28, 0x09	; 9
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	08 95       	ret

00001c68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	0f 92       	push	r0
    1c74:	89 a1       	ldd	r24, Y+33	; 0x21
    1c76:	8f 3f       	cpi	r24, 0xFF	; 255
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <vQueueWaitForMessageRestricted+0x14>
    1c7a:	19 a2       	std	Y+33, r1	; 0x21
    1c7c:	8a a1       	ldd	r24, Y+34	; 0x22
    1c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <vQueueWaitForMessageRestricted+0x1c>
    1c82:	1a a2       	std	Y+34, r1	; 0x22
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1c88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1c8e:	ce 01       	movw	r24, r28
    1c90:	43 96       	adiw	r24, 0x13	; 19
    1c92:	0e 94 7f 17 	call	0x2efe	; 0x2efe <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1c96:	ce 01       	movw	r24, r28
    1c98:	10 dd       	rcall	.-1504   	; 0x16ba <prvUnlockQueue>
    }
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	44 81       	ldd	r20, Z+4	; 0x04
    1ca4:	55 81       	ldd	r21, Z+5	; 0x05
    1ca6:	22 81       	ldd	r18, Z+2	; 0x02
    1ca8:	33 81       	ldd	r19, Z+3	; 0x03
    1caa:	24 0f       	add	r18, r20
    1cac:	35 1f       	adc	r19, r21
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	68 1b       	sub	r22, r24
    1cb6:	79 0b       	sbc	r23, r25
    1cb8:	cb 01       	movw	r24, r22
    1cba:	64 17       	cp	r22, r20
    1cbc:	75 07       	cpc	r23, r21
    1cbe:	10 f0       	brcs	.+4      	; 0x1cc4 <prvBytesInBuffer+0x24>
    1cc0:	84 1b       	sub	r24, r20
    1cc2:	95 0b       	sbc	r25, r21
    1cc4:	08 95       	ret

00001cc6 <prvInitialiseNewStreamBuffer>:
    1cc6:	0f 93       	push	r16
    1cc8:	fc 01       	movw	r30, r24
    1cca:	8f e0       	ldi	r24, 0x0F	; 15
    1ccc:	df 01       	movw	r26, r30
    1cce:	1d 92       	st	X+, r1
    1cd0:	8a 95       	dec	r24
    1cd2:	e9 f7       	brne	.-6      	; 0x1cce <prvInitialiseNewStreamBuffer+0x8>
    1cd4:	75 87       	std	Z+13, r23	; 0x0d
    1cd6:	64 87       	std	Z+12, r22	; 0x0c
    1cd8:	55 83       	std	Z+5, r21	; 0x05
    1cda:	44 83       	std	Z+4, r20	; 0x04
    1cdc:	37 83       	std	Z+7, r19	; 0x07
    1cde:	26 83       	std	Z+6, r18	; 0x06
    1ce0:	06 87       	std	Z+14, r16	; 0x0e
    1ce2:	0f 91       	pop	r16
    1ce4:	08 95       	ret

00001ce6 <prvWriteBytesToBuffer>:
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	6c 01       	movw	r12, r24
    1cfc:	5b 01       	movw	r10, r22
    1cfe:	7a 01       	movw	r14, r20
    1d00:	fc 01       	movw	r30, r24
    1d02:	c2 81       	ldd	r28, Z+2	; 0x02
    1d04:	d3 81       	ldd	r29, Z+3	; 0x03
    1d06:	04 81       	ldd	r16, Z+4	; 0x04
    1d08:	15 81       	ldd	r17, Z+5	; 0x05
    1d0a:	0c 1b       	sub	r16, r28
    1d0c:	1d 0b       	sbc	r17, r29
    1d0e:	40 17       	cp	r20, r16
    1d10:	51 07       	cpc	r21, r17
    1d12:	08 f4       	brcc	.+2      	; 0x1d16 <prvWriteBytesToBuffer+0x30>
    1d14:	8a 01       	movw	r16, r20
    1d16:	f6 01       	movw	r30, r12
    1d18:	84 85       	ldd	r24, Z+12	; 0x0c
    1d1a:	95 85       	ldd	r25, Z+13	; 0x0d
    1d1c:	a8 01       	movw	r20, r16
    1d1e:	b5 01       	movw	r22, r10
    1d20:	8c 0f       	add	r24, r28
    1d22:	9d 1f       	adc	r25, r29
    1d24:	0e 94 04 37 	call	0x6e08	; 0x6e08 <memcpy>
    1d28:	0e 15       	cp	r16, r14
    1d2a:	1f 05       	cpc	r17, r15
    1d2c:	58 f4       	brcc	.+22     	; 0x1d44 <prvWriteBytesToBuffer+0x5e>
    1d2e:	a7 01       	movw	r20, r14
    1d30:	40 1b       	sub	r20, r16
    1d32:	51 0b       	sbc	r21, r17
    1d34:	b5 01       	movw	r22, r10
    1d36:	60 0f       	add	r22, r16
    1d38:	71 1f       	adc	r23, r17
    1d3a:	f6 01       	movw	r30, r12
    1d3c:	84 85       	ldd	r24, Z+12	; 0x0c
    1d3e:	95 85       	ldd	r25, Z+13	; 0x0d
    1d40:	0e 94 04 37 	call	0x6e08	; 0x6e08 <memcpy>
    1d44:	ce 01       	movw	r24, r28
    1d46:	8e 0d       	add	r24, r14
    1d48:	9f 1d       	adc	r25, r15
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	24 81       	ldd	r18, Z+4	; 0x04
    1d4e:	35 81       	ldd	r19, Z+5	; 0x05
    1d50:	82 17       	cp	r24, r18
    1d52:	93 07       	cpc	r25, r19
    1d54:	10 f0       	brcs	.+4      	; 0x1d5a <prvWriteBytesToBuffer+0x74>
    1d56:	82 1b       	sub	r24, r18
    1d58:	93 0b       	sbc	r25, r19
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	93 83       	std	Z+3, r25	; 0x03
    1d5e:	82 83       	std	Z+2, r24	; 0x02
    1d60:	c7 01       	movw	r24, r14
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	bf 90       	pop	r11
    1d74:	af 90       	pop	r10
    1d76:	08 95       	ret

00001d78 <prvWriteMessageToBuffer>:
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	1f 92       	push	r1
    1d8a:	1f 92       	push	r1
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	7c 01       	movw	r14, r24
    1d92:	6b 01       	movw	r12, r22
    1d94:	5a 83       	std	Y+2, r21	; 0x02
    1d96:	49 83       	std	Y+1, r20	; 0x01
    1d98:	21 15       	cp	r18, r1
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	c1 f0       	breq	.+48     	; 0x1dce <prvWriteMessageToBuffer+0x56>
    1d9e:	fc 01       	movw	r30, r24
    1da0:	86 85       	ldd	r24, Z+14	; 0x0e
    1da2:	80 fd       	sbrc	r24, 0
    1da4:	08 c0       	rjmp	.+16     	; 0x1db6 <prvWriteMessageToBuffer+0x3e>
    1da6:	42 17       	cp	r20, r18
    1da8:	53 07       	cpc	r21, r19
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <prvWriteMessageToBuffer+0x36>
    1dac:	9a 01       	movw	r18, r20
    1dae:	3a 83       	std	Y+2, r19	; 0x02
    1db0:	29 83       	std	Y+1, r18	; 0x01
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <prvWriteMessageToBuffer+0x5c>
    1db6:	20 17       	cp	r18, r16
    1db8:	31 07       	cpc	r19, r17
    1dba:	58 f0       	brcs	.+22     	; 0x1dd2 <prvWriteMessageToBuffer+0x5a>
    1dbc:	42 e0       	ldi	r20, 0x02	; 2
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	be 01       	movw	r22, r28
    1dc2:	6f 5f       	subi	r22, 0xFF	; 255
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	8e df       	rcall	.-228    	; 0x1ce6 <prvWriteBytesToBuffer>
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <prvWriteMessageToBuffer+0x5c>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <prvWriteMessageToBuffer+0x5c>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	88 23       	and	r24, r24
    1dd6:	31 f0       	breq	.+12     	; 0x1de4 <prvWriteMessageToBuffer+0x6c>
    1dd8:	49 81       	ldd	r20, Y+1	; 0x01
    1dda:	5a 81       	ldd	r21, Y+2	; 0x02
    1ddc:	b6 01       	movw	r22, r12
    1dde:	c7 01       	movw	r24, r14
    1de0:	82 df       	rcall	.-252    	; 0x1ce6 <prvWriteBytesToBuffer>
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <prvWriteMessageToBuffer+0x70>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	cf 90       	pop	r12
    1dfc:	08 95       	ret

00001dfe <prvReadBytesFromBuffer>:
    1dfe:	af 92       	push	r10
    1e00:	bf 92       	push	r11
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	7c 01       	movw	r14, r24
    1e14:	5b 01       	movw	r10, r22
    1e16:	e9 01       	movw	r28, r18
    1e18:	42 17       	cp	r20, r18
    1e1a:	53 07       	cpc	r21, r19
    1e1c:	08 f4       	brcc	.+2      	; 0x1e20 <prvReadBytesFromBuffer+0x22>
    1e1e:	ea 01       	movw	r28, r20
    1e20:	20 97       	sbiw	r28, 0x00	; 0
    1e22:	81 f1       	breq	.+96     	; 0x1e84 <prvReadBytesFromBuffer+0x86>
    1e24:	f7 01       	movw	r30, r14
    1e26:	00 81       	ld	r16, Z
    1e28:	11 81       	ldd	r17, Z+1	; 0x01
    1e2a:	84 81       	ldd	r24, Z+4	; 0x04
    1e2c:	95 81       	ldd	r25, Z+5	; 0x05
    1e2e:	80 1b       	sub	r24, r16
    1e30:	91 0b       	sbc	r25, r17
    1e32:	6e 01       	movw	r12, r28
    1e34:	8c 17       	cp	r24, r28
    1e36:	9d 07       	cpc	r25, r29
    1e38:	08 f4       	brcc	.+2      	; 0x1e3c <prvReadBytesFromBuffer+0x3e>
    1e3a:	6c 01       	movw	r12, r24
    1e3c:	f7 01       	movw	r30, r14
    1e3e:	64 85       	ldd	r22, Z+12	; 0x0c
    1e40:	75 85       	ldd	r23, Z+13	; 0x0d
    1e42:	60 0f       	add	r22, r16
    1e44:	71 1f       	adc	r23, r17
    1e46:	a6 01       	movw	r20, r12
    1e48:	c5 01       	movw	r24, r10
    1e4a:	0e 94 04 37 	call	0x6e08	; 0x6e08 <memcpy>
    1e4e:	cc 16       	cp	r12, r28
    1e50:	dd 06       	cpc	r13, r29
    1e52:	58 f4       	brcc	.+22     	; 0x1e6a <prvReadBytesFromBuffer+0x6c>
    1e54:	ae 01       	movw	r20, r28
    1e56:	4c 19       	sub	r20, r12
    1e58:	5d 09       	sbc	r21, r13
    1e5a:	f7 01       	movw	r30, r14
    1e5c:	64 85       	ldd	r22, Z+12	; 0x0c
    1e5e:	75 85       	ldd	r23, Z+13	; 0x0d
    1e60:	c5 01       	movw	r24, r10
    1e62:	8c 0d       	add	r24, r12
    1e64:	9d 1d       	adc	r25, r13
    1e66:	0e 94 04 37 	call	0x6e08	; 0x6e08 <memcpy>
    1e6a:	0c 0f       	add	r16, r28
    1e6c:	1d 1f       	adc	r17, r29
    1e6e:	f7 01       	movw	r30, r14
    1e70:	84 81       	ldd	r24, Z+4	; 0x04
    1e72:	95 81       	ldd	r25, Z+5	; 0x05
    1e74:	08 17       	cp	r16, r24
    1e76:	19 07       	cpc	r17, r25
    1e78:	10 f0       	brcs	.+4      	; 0x1e7e <prvReadBytesFromBuffer+0x80>
    1e7a:	08 1b       	sub	r16, r24
    1e7c:	19 0b       	sbc	r17, r25
    1e7e:	f7 01       	movw	r30, r14
    1e80:	11 83       	std	Z+1, r17	; 0x01
    1e82:	00 83       	st	Z, r16
    1e84:	ce 01       	movw	r24, r28
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	08 95       	ret

00001e9c <prvReadMessageFromBuffer>:
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	1f 92       	push	r1
    1eba:	1f 92       	push	r1
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	6c 01       	movw	r12, r24
    1ec2:	4b 01       	movw	r8, r22
    1ec4:	5a 01       	movw	r10, r20
    1ec6:	79 01       	movw	r14, r18
    1ec8:	01 15       	cp	r16, r1
    1eca:	11 05       	cpc	r17, r1
    1ecc:	b1 f0       	breq	.+44     	; 0x1efa <prvReadMessageFromBuffer+0x5e>
    1ece:	fc 01       	movw	r30, r24
    1ed0:	60 80       	ld	r6, Z
    1ed2:	71 80       	ldd	r7, Z+1	; 0x01
    1ed4:	a8 01       	movw	r20, r16
    1ed6:	be 01       	movw	r22, r28
    1ed8:	6f 5f       	subi	r22, 0xFF	; 255
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	90 df       	rcall	.-224    	; 0x1dfe <prvReadBytesFromBuffer>
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee2:	e0 1a       	sub	r14, r16
    1ee4:	f1 0a       	sbc	r15, r17
    1ee6:	a8 16       	cp	r10, r24
    1ee8:	b9 06       	cpc	r11, r25
    1eea:	30 f4       	brcc	.+12     	; 0x1ef8 <prvReadMessageFromBuffer+0x5c>
    1eec:	f6 01       	movw	r30, r12
    1eee:	71 82       	std	Z+1, r7	; 0x01
    1ef0:	60 82       	st	Z, r6
    1ef2:	a1 2c       	mov	r10, r1
    1ef4:	b1 2c       	mov	r11, r1
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <prvReadMessageFromBuffer+0x5e>
    1ef8:	5c 01       	movw	r10, r24
    1efa:	97 01       	movw	r18, r14
    1efc:	a5 01       	movw	r20, r10
    1efe:	b4 01       	movw	r22, r8
    1f00:	c6 01       	movw	r24, r12
    1f02:	7d df       	rcall	.-262    	; 0x1dfe <prvReadBytesFromBuffer>
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	08 95       	ret

00001f26 <xStreamBufferGenericCreate>:
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	ec 01       	movw	r28, r24
    1f36:	6b 01       	movw	r12, r22
    1f38:	41 30       	cpi	r20, 0x01	; 1
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <xStreamBufferGenericCreate+0x1a>
    1f3c:	01 e0       	ldi	r16, 0x01	; 1
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <xStreamBufferGenericCreate+0x1c>
    1f40:	00 e0       	ldi	r16, 0x00	; 0
    1f42:	c1 14       	cp	r12, r1
    1f44:	d1 04       	cpc	r13, r1
    1f46:	19 f4       	brne	.+6      	; 0x1f4e <xStreamBufferGenericCreate+0x28>
    1f48:	cc 24       	eor	r12, r12
    1f4a:	c3 94       	inc	r12
    1f4c:	d1 2c       	mov	r13, r1
    1f4e:	ce 01       	movw	r24, r28
    1f50:	40 96       	adiw	r24, 0x10	; 16
    1f52:	c8 17       	cp	r28, r24
    1f54:	d9 07       	cpc	r29, r25
    1f56:	20 f4       	brcc	.+8      	; 0x1f60 <xStreamBufferGenericCreate+0x3a>
    1f58:	21 96       	adiw	r28, 0x01	; 1
    1f5a:	8f d8       	rcall	.-3810   	; 0x107a <pvPortMalloc>
    1f5c:	7c 01       	movw	r14, r24
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <xStreamBufferGenericCreate+0x3e>
    1f60:	e1 2c       	mov	r14, r1
    1f62:	f1 2c       	mov	r15, r1
    1f64:	e1 14       	cp	r14, r1
    1f66:	f1 04       	cpc	r15, r1
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <xStreamBufferGenericCreate+0x52>
    1f6a:	96 01       	movw	r18, r12
    1f6c:	ae 01       	movw	r20, r28
    1f6e:	b7 01       	movw	r22, r14
    1f70:	61 5f       	subi	r22, 0xF1	; 241
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255
    1f74:	c7 01       	movw	r24, r14
    1f76:	a7 de       	rcall	.-690    	; 0x1cc6 <prvInitialiseNewStreamBuffer>
    1f78:	c7 01       	movw	r24, r14
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	cf 90       	pop	r12
    1f88:	08 95       	ret

00001f8a <xStreamBufferReset>:
    1f8a:	0f 93       	push	r16
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	0f 92       	push	r0
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 85       	ldd	r18, Z+8	; 0x08
    1f96:	31 85       	ldd	r19, Z+9	; 0x09
    1f98:	23 2b       	or	r18, r19
    1f9a:	71 f4       	brne	.+28     	; 0x1fb8 <xStreamBufferReset+0x2e>
    1f9c:	22 85       	ldd	r18, Z+10	; 0x0a
    1f9e:	33 85       	ldd	r19, Z+11	; 0x0b
    1fa0:	23 2b       	or	r18, r19
    1fa2:	61 f4       	brne	.+24     	; 0x1fbc <xStreamBufferReset+0x32>
    1fa4:	26 81       	ldd	r18, Z+6	; 0x06
    1fa6:	37 81       	ldd	r19, Z+7	; 0x07
    1fa8:	44 81       	ldd	r20, Z+4	; 0x04
    1faa:	55 81       	ldd	r21, Z+5	; 0x05
    1fac:	64 85       	ldd	r22, Z+12	; 0x0c
    1fae:	75 85       	ldd	r23, Z+13	; 0x0d
    1fb0:	06 85       	ldd	r16, Z+14	; 0x0e
    1fb2:	89 de       	rcall	.-750    	; 0x1cc6 <prvInitialiseNewStreamBuffer>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <xStreamBufferReset+0x34>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <xStreamBufferReset+0x34>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	0f 91       	pop	r16
    1fc4:	08 95       	ret

00001fc6 <xStreamBufferSpacesAvailable>:
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	24 81       	ldd	r18, Z+4	; 0x04
    1fca:	35 81       	ldd	r19, Z+5	; 0x05
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	82 0f       	add	r24, r18
    1fd2:	93 1f       	adc	r25, r19
    1fd4:	42 81       	ldd	r20, Z+2	; 0x02
    1fd6:	53 81       	ldd	r21, Z+3	; 0x03
    1fd8:	84 1b       	sub	r24, r20
    1fda:	95 0b       	sbc	r25, r21
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	82 17       	cp	r24, r18
    1fe0:	93 07       	cpc	r25, r19
    1fe2:	10 f0       	brcs	.+4      	; 0x1fe8 <xStreamBufferSpacesAvailable+0x22>
    1fe4:	82 1b       	sub	r24, r18
    1fe6:	93 0b       	sbc	r25, r19
    1fe8:	08 95       	ret

00001fea <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1fea:	2f 92       	push	r2
    1fec:	3f 92       	push	r3
    1fee:	4f 92       	push	r4
    1ff0:	5f 92       	push	r5
    1ff2:	6f 92       	push	r6
    1ff4:	7f 92       	push	r7
    1ff6:	8f 92       	push	r8
    1ff8:	9f 92       	push	r9
    1ffa:	af 92       	push	r10
    1ffc:	bf 92       	push	r11
    1ffe:	cf 92       	push	r12
    2000:	df 92       	push	r13
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	2b 97       	sbiw	r28, 0x0b	; 11
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	4c 01       	movw	r8, r24
    2020:	7b 87       	std	Y+11, r23	; 0x0b
    2022:	6a 87       	std	Y+10, r22	; 0x0a
    2024:	1a 01       	movw	r2, r20
    2026:	0e 83       	std	Y+6, r16	; 0x06
    2028:	1f 83       	std	Y+7, r17	; 0x07
    202a:	28 87       	std	Y+8, r18	; 0x08
    202c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    202e:	fc 01       	movw	r30, r24
    2030:	84 81       	ldd	r24, Z+4	; 0x04
    2032:	95 81       	ldd	r25, Z+5	; 0x05
    2034:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2036:	26 85       	ldd	r18, Z+14	; 0x0e
    2038:	20 ff       	sbrs	r18, 0
    203a:	0c c0       	rjmp	.+24     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    203c:	2a 01       	movw	r4, r20
    203e:	f2 e0       	ldi	r31, 0x02	; 2
    2040:	4f 0e       	add	r4, r31
    2042:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    2044:	84 15       	cp	r24, r4
    2046:	95 05       	cpc	r25, r5
    2048:	58 f4       	brcc	.+22     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    204a:	1e 82       	std	Y+6, r1	; 0x06
    204c:	1f 82       	std	Y+7, r1	; 0x07
    204e:	18 86       	std	Y+8, r1	; 0x08
    2050:	19 86       	std	Y+9, r1	; 0x09
    2052:	06 c0       	rjmp	.+12     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    2054:	84 17       	cp	r24, r20
    2056:	95 07       	cpc	r25, r21
    2058:	10 f0       	brcs	.+4      	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    205a:	2a 01       	movw	r4, r20
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    205e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2060:	8e 81       	ldd	r24, Y+6	; 0x06
    2062:	9f 81       	ldd	r25, Y+7	; 0x07
    2064:	a8 85       	ldd	r26, Y+8	; 0x08
    2066:	b9 85       	ldd	r27, Y+9	; 0x09
    2068:	89 2b       	or	r24, r25
    206a:	8a 2b       	or	r24, r26
    206c:	8b 2b       	or	r24, r27
    206e:	09 f4       	brne	.+2      	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    2070:	38 c0       	rjmp	.+112    	; 0x20e2 <__DATA_REGION_LENGTH__+0xe2>
    {
        vTaskSetTimeOutState( &xTimeOut );
    2072:	ce 01       	movw	r24, r28
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2080:	c4 01       	movw	r24, r8
    2082:	a1 df       	rcall	.-190    	; 0x1fc6 <xStreamBufferSpacesAvailable>
    2084:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    2086:	84 15       	cp	r24, r4
    2088:	95 05       	cpc	r25, r5
    208a:	40 f5       	brcc	.+80     	; 0x20dc <__DATA_REGION_LENGTH__+0xdc>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2096:	0e 94 9b 19 	call	0x3336	; 0x3336 <xTaskGetCurrentTaskHandle>
    209a:	f4 01       	movw	r30, r8
    209c:	93 87       	std	Z+11, r25	; 0x0b
    209e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    20a4:	ae 80       	ldd	r10, Y+6	; 0x06
    20a6:	bf 80       	ldd	r11, Y+7	; 0x07
    20a8:	c8 84       	ldd	r12, Y+8	; 0x08
    20aa:	d9 84       	ldd	r13, Y+9	; 0x09
    20ac:	e1 2c       	mov	r14, r1
    20ae:	f1 2c       	mov	r15, r1
    20b0:	00 e0       	ldi	r16, 0x00	; 0
    20b2:	10 e0       	ldi	r17, 0x00	; 0
    20b4:	98 01       	movw	r18, r16
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	ba 01       	movw	r22, r20
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	0e 94 33 1b 	call	0x3666	; 0x3666 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    20c2:	f4 01       	movw	r30, r8
    20c4:	13 86       	std	Z+11, r1	; 0x0b
    20c6:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    20c8:	be 01       	movw	r22, r28
    20ca:	6a 5f       	subi	r22, 0xFA	; 250
    20cc:	7f 4f       	sbci	r23, 0xFF	; 255
    20ce:	ce 01       	movw	r24, r28
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	0e 94 31 19 	call	0x3262	; 0x3262 <xTaskCheckForTimeOut>
    20d6:	88 23       	and	r24, r24
    20d8:	81 f2       	breq	.-96     	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    20da:	05 c0       	rjmp	.+10     	; 0x20e6 <__DATA_REGION_LENGTH__+0xe6>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    20dc:	0f 90       	pop	r0
    20de:	0f be       	out	0x3f, r0	; 63
                    break;
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <__DATA_REGION_LENGTH__+0xe6>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    20e2:	61 2c       	mov	r6, r1
    20e4:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    20e6:	61 14       	cp	r6, r1
    20e8:	71 04       	cpc	r7, r1
    20ea:	19 f4       	brne	.+6      	; 0x20f2 <__DATA_REGION_LENGTH__+0xf2>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    20ec:	c4 01       	movw	r24, r8
    20ee:	6b df       	rcall	.-298    	; 0x1fc6 <xStreamBufferSpacesAvailable>
    20f0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    20f2:	82 01       	movw	r16, r4
    20f4:	93 01       	movw	r18, r6
    20f6:	a1 01       	movw	r20, r2
    20f8:	6a 85       	ldd	r22, Y+10	; 0x0a
    20fa:	7b 85       	ldd	r23, Y+11	; 0x0b
    20fc:	c4 01       	movw	r24, r8
    20fe:	3c de       	rcall	.-904    	; 0x1d78 <prvWriteMessageToBuffer>
    2100:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2102:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2104:	e9 f0       	breq	.+58     	; 0x2140 <__DATA_REGION_LENGTH__+0x140>
    2106:	c4 01       	movw	r24, r8
    2108:	cb dd       	rcall	.-1130   	; 0x1ca0 <prvBytesInBuffer>
    210a:	f4 01       	movw	r30, r8
    210c:	26 81       	ldd	r18, Z+6	; 0x06
    210e:	37 81       	ldd	r19, Z+7	; 0x07
    2110:	82 17       	cp	r24, r18
    2112:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    2114:	a8 f0       	brcs	.+42     	; 0x2140 <__DATA_REGION_LENGTH__+0x140>
    2116:	91 d3       	rcall	.+1826   	; 0x283a <vTaskSuspendAll>
    2118:	f4 01       	movw	r30, r8
    211a:	80 85       	ldd	r24, Z+8	; 0x08
    211c:	91 85       	ldd	r25, Z+9	; 0x09
    211e:	89 2b       	or	r24, r25
    2120:	71 f0       	breq	.+28     	; 0x213e <__DATA_REGION_LENGTH__+0x13e>
    2122:	80 85       	ldd	r24, Z+8	; 0x08
    2124:	91 85       	ldd	r25, Z+9	; 0x09
    2126:	e1 2c       	mov	r14, r1
    2128:	f1 2c       	mov	r15, r1
    212a:	00 e0       	ldi	r16, 0x00	; 0
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	a9 01       	movw	r20, r18
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskGenericNotify>
    2138:	f4 01       	movw	r30, r8
    213a:	11 86       	std	Z+9, r1	; 0x09
    213c:	10 86       	std	Z+8, r1	; 0x08
    213e:	bd d4       	rcall	.+2426   	; 0x2aba <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2140:	c6 01       	movw	r24, r12
    2142:	2b 96       	adiw	r28, 0x0b	; 11
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	ff 90       	pop	r15
    2158:	ef 90       	pop	r14
    215a:	df 90       	pop	r13
    215c:	cf 90       	pop	r12
    215e:	bf 90       	pop	r11
    2160:	af 90       	pop	r10
    2162:	9f 90       	pop	r9
    2164:	8f 90       	pop	r8
    2166:	7f 90       	pop	r7
    2168:	6f 90       	pop	r6
    216a:	5f 90       	pop	r5
    216c:	4f 90       	pop	r4
    216e:	3f 90       	pop	r3
    2170:	2f 90       	pop	r2
    2172:	08 95       	ret

00002174 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2174:	af 92       	push	r10
    2176:	bf 92       	push	r11
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ec 01       	movw	r28, r24
    218a:	7b 01       	movw	r14, r22
    218c:	5a 01       	movw	r10, r20
    218e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2190:	8e 85       	ldd	r24, Y+14	; 0x0e
    2192:	80 ff       	sbrs	r24, 0
    2194:	04 c0       	rjmp	.+8      	; 0x219e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2196:	8a 01       	movw	r16, r20
    2198:	0e 5f       	subi	r16, 0xFE	; 254
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    219e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    21a0:	ce 01       	movw	r24, r28
    21a2:	11 df       	rcall	.-478    	; 0x1fc6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    21a4:	9c 01       	movw	r18, r24
    21a6:	a5 01       	movw	r20, r10
    21a8:	b7 01       	movw	r22, r14
    21aa:	ce 01       	movw	r24, r28
    21ac:	e5 dd       	rcall	.-1078   	; 0x1d78 <prvWriteMessageToBuffer>
    21ae:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    21b0:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    21b2:	c1 f0       	breq	.+48     	; 0x21e4 <xStreamBufferSendFromISR+0x70>
    21b4:	ce 01       	movw	r24, r28
    21b6:	74 dd       	rcall	.-1304   	; 0x1ca0 <prvBytesInBuffer>
    21b8:	2e 81       	ldd	r18, Y+6	; 0x06
    21ba:	3f 81       	ldd	r19, Y+7	; 0x07
    21bc:	82 17       	cp	r24, r18
    21be:	93 07       	cpc	r25, r19
    21c0:	88 f0       	brcs	.+34     	; 0x21e4 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    21c2:	88 85       	ldd	r24, Y+8	; 0x08
    21c4:	99 85       	ldd	r25, Y+9	; 0x09
    21c6:	89 2b       	or	r24, r25
    21c8:	69 f0       	breq	.+26     	; 0x21e4 <xStreamBufferSendFromISR+0x70>
    21ca:	88 85       	ldd	r24, Y+8	; 0x08
    21cc:	99 85       	ldd	r25, Y+9	; 0x09
    21ce:	e1 2c       	mov	r14, r1
    21d0:	f1 2c       	mov	r15, r1
    21d2:	00 e0       	ldi	r16, 0x00	; 0
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	a9 01       	movw	r20, r18
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <xTaskGenericNotifyFromISR>
    21e0:	19 86       	std	Y+9, r1	; 0x09
    21e2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    21e4:	c5 01       	movw	r24, r10
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	ff 90       	pop	r15
    21f0:	ef 90       	pop	r14
    21f2:	df 90       	pop	r13
    21f4:	cf 90       	pop	r12
    21f6:	bf 90       	pop	r11
    21f8:	af 90       	pop	r10
    21fa:	08 95       	ret

000021fc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	ec 01       	movw	r28, r24
    221e:	2b 01       	movw	r4, r22
    2220:	3a 01       	movw	r6, r20
    2222:	58 01       	movw	r10, r16
    2224:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2226:	8e 85       	ldd	r24, Y+14	; 0x0e
    2228:	80 ff       	sbrs	r24, 0
    222a:	05 c0       	rjmp	.+10     	; 0x2236 <__stack+0x37>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    222c:	68 94       	set
    222e:	88 24       	eor	r8, r8
    2230:	81 f8       	bld	r8, 1
    2232:	91 2c       	mov	r9, r1
    2234:	02 c0       	rjmp	.+4      	; 0x223a <__stack+0x3b>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2236:	81 2c       	mov	r8, r1
    2238:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    223a:	a1 14       	cp	r10, r1
    223c:	b1 04       	cpc	r11, r1
    223e:	c1 04       	cpc	r12, r1
    2240:	d1 04       	cpc	r13, r1
    2242:	41 f1       	breq	.+80     	; 0x2294 <__stack+0x95>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    224a:	ce 01       	movw	r24, r28
    224c:	29 dd       	rcall	.-1454   	; 0x1ca0 <prvBytesInBuffer>
    224e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2250:	88 16       	cp	r8, r24
    2252:	99 06       	cpc	r9, r25
    2254:	48 f0       	brcs	.+18     	; 0x2268 <__stack+0x69>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2260:	0e 94 9b 19 	call	0x3336	; 0x3336 <xTaskGetCurrentTaskHandle>
    2264:	99 87       	std	Y+9, r25	; 0x09
    2266:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    226c:	8e 14       	cp	r8, r14
    226e:	9f 04       	cpc	r9, r15
    2270:	a0 f0       	brcs	.+40     	; 0x229a <__stack+0x9b>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2272:	e1 2c       	mov	r14, r1
    2274:	f1 2c       	mov	r15, r1
    2276:	00 e0       	ldi	r16, 0x00	; 0
    2278:	10 e0       	ldi	r17, 0x00	; 0
    227a:	98 01       	movw	r18, r16
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	ba 01       	movw	r22, r20
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 33 1b 	call	0x3666	; 0x3666 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2288:	19 86       	std	Y+9, r1	; 0x09
    228a:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    228c:	ce 01       	movw	r24, r28
    228e:	08 dd       	rcall	.-1520   	; 0x1ca0 <prvBytesInBuffer>
    2290:	7c 01       	movw	r14, r24
    2292:	03 c0       	rjmp	.+6      	; 0x229a <__stack+0x9b>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2294:	ce 01       	movw	r24, r28
    2296:	04 dd       	rcall	.-1528   	; 0x1ca0 <prvBytesInBuffer>
    2298:	7c 01       	movw	r14, r24
    229a:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    229c:	9f 04       	cpc	r9, r15
    229e:	e8 f4       	brcc	.+58     	; 0x22da <__stack+0xdb>
    22a0:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    22a2:	97 01       	movw	r18, r14
    22a4:	a3 01       	movw	r20, r6
    22a6:	b2 01       	movw	r22, r4
    22a8:	ce 01       	movw	r24, r28
    22aa:	f8 dd       	rcall	.-1040   	; 0x1e9c <prvReadMessageFromBuffer>
    22ac:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    22ae:	89 2b       	or	r24, r25
    22b0:	b1 f0       	breq	.+44     	; 0x22de <__stack+0xdf>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    22b2:	c3 d2       	rcall	.+1414   	; 0x283a <vTaskSuspendAll>
    22b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b8:	89 2b       	or	r24, r25
    22ba:	69 f0       	breq	.+26     	; 0x22d6 <__stack+0xd7>
    22bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22be:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c0:	e1 2c       	mov	r14, r1
    22c2:	f1 2c       	mov	r15, r1
    22c4:	00 e0       	ldi	r16, 0x00	; 0
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	a9 01       	movw	r20, r18
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskGenericNotify>
    22d2:	1b 86       	std	Y+11, r1	; 0x0b
    22d4:	1a 86       	std	Y+10, r1	; 0x0a
    22d6:	f1 d3       	rcall	.+2018   	; 0x2aba <xTaskResumeAll>
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <__stack+0xdf>
    22da:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    22dc:	d1 2c       	mov	r13, r1
    22de:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	ff 90       	pop	r15
    22ea:	ef 90       	pop	r14
    22ec:	df 90       	pop	r13
    22ee:	cf 90       	pop	r12
    22f0:	bf 90       	pop	r11
    22f2:	af 90       	pop	r10
    22f4:	9f 90       	pop	r9
    22f6:	8f 90       	pop	r8
    22f8:	7f 90       	pop	r7
    22fa:	6f 90       	pop	r6
    22fc:	5f 90       	pop	r5
    22fe:	4f 90       	pop	r4
    2300:	08 95       	ret

00002302 <prvResetNextTaskUnblockTime>:
    2302:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    2306:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    230a:	80 81       	ld	r24, Z
    230c:	81 11       	cpse	r24, r1
    230e:	0c c0       	rjmp	.+24     	; 0x2328 <prvResetNextTaskUnblockTime+0x26>
    2310:	8f ef       	ldi	r24, 0xFF	; 255
    2312:	9f ef       	ldi	r25, 0xFF	; 255
    2314:	dc 01       	movw	r26, r24
    2316:	80 93 ed 12 	sts	0x12ED, r24	; 0x8012ed <xNextTaskUnblockTime>
    231a:	90 93 ee 12 	sts	0x12EE, r25	; 0x8012ee <xNextTaskUnblockTime+0x1>
    231e:	a0 93 ef 12 	sts	0x12EF, r26	; 0x8012ef <xNextTaskUnblockTime+0x2>
    2322:	b0 93 f0 12 	sts	0x12F0, r27	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    2326:	08 95       	ret
    2328:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    232c:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    2330:	07 80       	ldd	r0, Z+7	; 0x07
    2332:	f0 85       	ldd	r31, Z+8	; 0x08
    2334:	e0 2d       	mov	r30, r0
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	a2 81       	ldd	r26, Z+2	; 0x02
    233c:	b3 81       	ldd	r27, Z+3	; 0x03
    233e:	80 93 ed 12 	sts	0x12ED, r24	; 0x8012ed <xNextTaskUnblockTime>
    2342:	90 93 ee 12 	sts	0x12EE, r25	; 0x8012ee <xNextTaskUnblockTime+0x1>
    2346:	a0 93 ef 12 	sts	0x12EF, r26	; 0x8012ef <xNextTaskUnblockTime+0x2>
    234a:	b0 93 f0 12 	sts	0x12F0, r27	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    234e:	08 95       	ret

00002350 <prvDeleteTCB>:
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	ec 01       	movw	r28, r24
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortFree>
    235e:	ce 01       	movw	r24, r28
    2360:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortFree>
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <prvInitialiseNewTask>:
    236a:	4f 92       	push	r4
    236c:	5f 92       	push	r5
    236e:	6f 92       	push	r6
    2370:	7f 92       	push	r7
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	2c 01       	movw	r4, r24
    238a:	5b 01       	movw	r10, r22
    238c:	4a 01       	movw	r8, r20
    238e:	39 01       	movw	r6, r18
    2390:	e6 01       	movw	r28, r12
    2392:	65 ea       	ldi	r22, 0xA5	; 165
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2398:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239a:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <memset>
    239e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	82 1a       	sub	r8, r18
    23a6:	91 08       	sbc	r9, r1
    23a8:	88 0e       	add	r8, r24
    23aa:	99 1e       	adc	r9, r25
    23ac:	a1 14       	cp	r10, r1
    23ae:	b1 04       	cpc	r11, r1
    23b0:	89 f4       	brne	.+34     	; 0x23d4 <prvInitialiseNewTask+0x6a>
    23b2:	15 c0       	rjmp	.+42     	; 0x23de <prvInitialiseNewTask+0x74>
    23b4:	82 2f       	mov	r24, r18
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	f5 01       	movw	r30, r10
    23ba:	e8 0f       	add	r30, r24
    23bc:	f9 1f       	adc	r31, r25
    23be:	30 81       	ld	r19, Z
    23c0:	de 01       	movw	r26, r28
    23c2:	a8 0f       	add	r26, r24
    23c4:	b9 1f       	adc	r27, r25
    23c6:	5d 96       	adiw	r26, 0x1d	; 29
    23c8:	3c 93       	st	X, r19
    23ca:	80 81       	ld	r24, Z
    23cc:	88 23       	and	r24, r24
    23ce:	29 f0       	breq	.+10     	; 0x23da <prvInitialiseNewTask+0x70>
    23d0:	2f 5f       	subi	r18, 0xFF	; 255
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <prvInitialiseNewTask+0x6c>
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	20 31       	cpi	r18, 0x10	; 16
    23d8:	68 f3       	brcs	.-38     	; 0x23b4 <prvInitialiseNewTask+0x4a>
    23da:	1c a6       	std	Y+44, r1	; 0x2c
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <prvInitialiseNewTask+0x76>
    23de:	1d 8e       	std	Y+29, r1	; 0x1d
    23e0:	0a 30       	cpi	r16, 0x0A	; 10
    23e2:	08 f0       	brcs	.+2      	; 0x23e6 <prvInitialiseNewTask+0x7c>
    23e4:	09 e0       	ldi	r16, 0x09	; 9
    23e6:	0a 8f       	std	Y+26, r16	; 0x1a
    23e8:	0d a7       	std	Y+45, r16	; 0x2d
    23ea:	1e a6       	std	Y+46, r1	; 0x2e
    23ec:	ce 01       	movw	r24, r28
    23ee:	02 96       	adiw	r24, 0x02	; 2
    23f0:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialiseItem>
    23f4:	ce 01       	movw	r24, r28
    23f6:	0e 96       	adiw	r24, 0x0e	; 14
    23f8:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialiseItem>
    23fc:	db 87       	std	Y+11, r29	; 0x0b
    23fe:	ca 87       	std	Y+10, r28	; 0x0a
    2400:	8a e0       	ldi	r24, 0x0A	; 10
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 e0       	ldi	r26, 0x00	; 0
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	80 1b       	sub	r24, r16
    240a:	91 09       	sbc	r25, r1
    240c:	a1 09       	sbc	r26, r1
    240e:	b1 09       	sbc	r27, r1
    2410:	8e 87       	std	Y+14, r24	; 0x0e
    2412:	9f 87       	std	Y+15, r25	; 0x0f
    2414:	a8 8b       	std	Y+16, r26	; 0x10
    2416:	b9 8b       	std	Y+17, r27	; 0x11
    2418:	df 8b       	std	Y+23, r29	; 0x17
    241a:	ce 8b       	std	Y+22, r28	; 0x16
    241c:	84 e0       	ldi	r24, 0x04	; 4
    241e:	fe 01       	movw	r30, r28
    2420:	bf 96       	adiw	r30, 0x2f	; 47
    2422:	df 01       	movw	r26, r30
    2424:	1d 92       	st	X+, r1
    2426:	8a 95       	dec	r24
    2428:	e9 f7       	brne	.-6      	; 0x2424 <prvInitialiseNewTask+0xba>
    242a:	1b aa       	std	Y+51, r1	; 0x33
    242c:	a3 01       	movw	r20, r6
    242e:	b2 01       	movw	r22, r4
    2430:	c4 01       	movw	r24, r8
    2432:	0e 94 a8 09 	call	0x1350	; 0x1350 <pxPortInitialiseStack>
    2436:	99 83       	std	Y+1, r25	; 0x01
    2438:	88 83       	st	Y, r24
    243a:	e1 14       	cp	r14, r1
    243c:	f1 04       	cpc	r15, r1
    243e:	19 f0       	breq	.+6      	; 0x2446 <prvInitialiseNewTask+0xdc>
    2440:	f7 01       	movw	r30, r14
    2442:	d1 83       	std	Z+1, r29	; 0x01
    2444:	c0 83       	st	Z, r28
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	0f 91       	pop	r16
    244c:	ff 90       	pop	r15
    244e:	ef 90       	pop	r14
    2450:	df 90       	pop	r13
    2452:	cf 90       	pop	r12
    2454:	bf 90       	pop	r11
    2456:	af 90       	pop	r10
    2458:	9f 90       	pop	r9
    245a:	8f 90       	pop	r8
    245c:	7f 90       	pop	r7
    245e:	6f 90       	pop	r6
    2460:	5f 90       	pop	r5
    2462:	4f 90       	pop	r4
    2464:	08 95       	ret

00002466 <prvInitialiseTaskLists>:
    2466:	cf 93       	push	r28
    2468:	c0 e0       	ldi	r28, 0x00	; 0
    246a:	09 c0       	rjmp	.+18     	; 0x247e <prvInitialiseTaskLists+0x18>
    246c:	2b e0       	ldi	r18, 0x0B	; 11
    246e:	c2 9f       	mul	r28, r18
    2470:	c0 01       	movw	r24, r0
    2472:	11 24       	eor	r1, r1
    2474:	85 5c       	subi	r24, 0xC5	; 197
    2476:	9c 4e       	sbci	r25, 0xEC	; 236
    2478:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    247c:	cf 5f       	subi	r28, 0xFF	; 255
    247e:	ca 30       	cpi	r28, 0x0A	; 10
    2480:	a8 f3       	brcs	.-22     	; 0x246c <prvInitialiseTaskLists+0x6>
    2482:	80 e3       	ldi	r24, 0x30	; 48
    2484:	93 e1       	ldi	r25, 0x13	; 19
    2486:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    248a:	85 e2       	ldi	r24, 0x25	; 37
    248c:	93 e1       	ldi	r25, 0x13	; 19
    248e:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    2492:	86 e1       	ldi	r24, 0x16	; 22
    2494:	93 e1       	ldi	r25, 0x13	; 19
    2496:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    249a:	8b e0       	ldi	r24, 0x0B	; 11
    249c:	93 e1       	ldi	r25, 0x13	; 19
    249e:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	92 e1       	ldi	r25, 0x12	; 18
    24a6:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    24aa:	80 e3       	ldi	r24, 0x30	; 48
    24ac:	93 e1       	ldi	r25, 0x13	; 19
    24ae:	90 93 24 13 	sts	0x1324, r25	; 0x801324 <pxDelayedTaskList+0x1>
    24b2:	80 93 23 13 	sts	0x1323, r24	; 0x801323 <pxDelayedTaskList>
    24b6:	85 e2       	ldi	r24, 0x25	; 37
    24b8:	93 e1       	ldi	r25, 0x13	; 19
    24ba:	90 93 22 13 	sts	0x1322, r25	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    24be:	80 93 21 13 	sts	0x1321, r24	; 0x801321 <pxOverflowDelayedTaskList>
    24c2:	cf 91       	pop	r28
    24c4:	08 95       	ret

000024c6 <prvAddNewTaskToReadyList>:
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	ec 01       	movw	r28, r24
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	0f 92       	push	r0
    24d2:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	80 93 fe 12 	sts	0x12FE, r24	; 0x8012fe <uxCurrentNumberOfTasks>
    24dc:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    24e0:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    24e4:	89 2b       	or	r24, r25
    24e6:	51 f4       	brne	.+20     	; 0x24fc <prvAddNewTaskToReadyList+0x36>
    24e8:	d0 93 aa 13 	sts	0x13AA, r29	; 0x8013aa <pxCurrentTCB+0x1>
    24ec:	c0 93 a9 13 	sts	0x13A9, r28	; 0x8013a9 <pxCurrentTCB>
    24f0:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	91 f4       	brne	.+36     	; 0x251c <prvAddNewTaskToReadyList+0x56>
    24f8:	b6 df       	rcall	.-148    	; 0x2466 <prvInitialiseTaskLists>
    24fa:	10 c0       	rjmp	.+32     	; 0x251c <prvAddNewTaskToReadyList+0x56>
    24fc:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <xSchedulerRunning>
    2500:	81 11       	cpse	r24, r1
    2502:	0c c0       	rjmp	.+24     	; 0x251c <prvAddNewTaskToReadyList+0x56>
    2504:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2508:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    250c:	92 8d       	ldd	r25, Z+26	; 0x1a
    250e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2510:	89 17       	cp	r24, r25
    2512:	20 f0       	brcs	.+8      	; 0x251c <prvAddNewTaskToReadyList+0x56>
    2514:	d0 93 aa 13 	sts	0x13AA, r29	; 0x8013aa <pxCurrentTCB+0x1>
    2518:	c0 93 a9 13 	sts	0x13A9, r28	; 0x8013a9 <pxCurrentTCB>
    251c:	80 91 f1 12 	lds	r24, 0x12F1	; 0x8012f1 <uxTaskNumber>
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	80 93 f1 12 	sts	0x12F1, r24	; 0x8012f1 <uxTaskNumber>
    2526:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2528:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    252c:	8e 17       	cp	r24, r30
    252e:	10 f4       	brcc	.+4      	; 0x2534 <prvAddNewTaskToReadyList+0x6e>
    2530:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    2534:	8b e0       	ldi	r24, 0x0B	; 11
    2536:	8e 9f       	mul	r24, r30
    2538:	f0 01       	movw	r30, r0
    253a:	11 24       	eor	r1, r1
    253c:	e5 5c       	subi	r30, 0xC5	; 197
    253e:	fc 4e       	sbci	r31, 0xEC	; 236
    2540:	01 80       	ldd	r0, Z+1	; 0x01
    2542:	f2 81       	ldd	r31, Z+2	; 0x02
    2544:	e0 2d       	mov	r30, r0
    2546:	ff 83       	std	Y+7, r31	; 0x07
    2548:	ee 83       	std	Y+6, r30	; 0x06
    254a:	26 81       	ldd	r18, Z+6	; 0x06
    254c:	37 81       	ldd	r19, Z+7	; 0x07
    254e:	39 87       	std	Y+9, r19	; 0x09
    2550:	28 87       	std	Y+8, r18	; 0x08
    2552:	a6 81       	ldd	r26, Z+6	; 0x06
    2554:	b7 81       	ldd	r27, Z+7	; 0x07
    2556:	9e 01       	movw	r18, r28
    2558:	2e 5f       	subi	r18, 0xFE	; 254
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	15 96       	adiw	r26, 0x05	; 5
    255e:	3c 93       	st	X, r19
    2560:	2e 93       	st	-X, r18
    2562:	14 97       	sbiw	r26, 0x04	; 4
    2564:	37 83       	std	Z+7, r19	; 0x07
    2566:	26 83       	std	Z+6, r18	; 0x06
    2568:	ea 8d       	ldd	r30, Y+26	; 0x1a
    256a:	8e 9f       	mul	r24, r30
    256c:	f0 01       	movw	r30, r0
    256e:	11 24       	eor	r1, r1
    2570:	e5 5c       	subi	r30, 0xC5	; 197
    2572:	fc 4e       	sbci	r31, 0xEC	; 236
    2574:	fd 87       	std	Y+13, r31	; 0x0d
    2576:	ec 87       	std	Y+12, r30	; 0x0c
    2578:	80 81       	ld	r24, Z
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	80 83       	st	Z, r24
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <xSchedulerRunning>
    2586:	88 23       	and	r24, r24
    2588:	51 f0       	breq	.+20     	; 0x259e <prvAddNewTaskToReadyList+0xd8>
    258a:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    258e:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2592:	92 8d       	ldd	r25, Z+26	; 0x1a
    2594:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2596:	98 17       	cp	r25, r24
    2598:	10 f4       	brcc	.+4      	; 0x259e <prvAddNewTaskToReadyList+0xd8>
    259a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	08 95       	ret

000025a4 <prvCheckTasksWaitingTermination>:
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	1b c0       	rjmp	.+54     	; 0x25e0 <prvCheckTasksWaitingTermination+0x3c>
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	0f 92       	push	r0
    25b0:	e0 91 12 13 	lds	r30, 0x1312	; 0x801312 <xTasksWaitingTermination+0x7>
    25b4:	f0 91 13 13 	lds	r31, 0x1313	; 0x801313 <xTasksWaitingTermination+0x8>
    25b8:	c0 85       	ldd	r28, Z+8	; 0x08
    25ba:	d1 85       	ldd	r29, Z+9	; 0x09
    25bc:	ce 01       	movw	r24, r28
    25be:	02 96       	adiw	r24, 0x02	; 2
    25c0:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
    25c4:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    25c8:	81 50       	subi	r24, 0x01	; 1
    25ca:	80 93 fe 12 	sts	0x12FE, r24	; 0x8012fe <uxCurrentNumberOfTasks>
    25ce:	80 91 0a 13 	lds	r24, 0x130A	; 0x80130a <uxDeletedTasksWaitingCleanUp>
    25d2:	81 50       	subi	r24, 0x01	; 1
    25d4:	80 93 0a 13 	sts	0x130A, r24	; 0x80130a <uxDeletedTasksWaitingCleanUp>
    25d8:	0f 90       	pop	r0
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	ce 01       	movw	r24, r28
    25de:	b8 de       	rcall	.-656    	; 0x2350 <prvDeleteTCB>
    25e0:	80 91 0a 13 	lds	r24, 0x130A	; 0x80130a <uxDeletedTasksWaitingCleanUp>
    25e4:	81 11       	cpse	r24, r1
    25e6:	e1 cf       	rjmp	.-62     	; 0x25aa <prvCheckTasksWaitingTermination+0x6>
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	08 95       	ret

000025ee <prvAddCurrentTaskToDelayedList>:
    25ee:	8f 92       	push	r8
    25f0:	9f 92       	push	r9
    25f2:	af 92       	push	r10
    25f4:	bf 92       	push	r11
    25f6:	cf 92       	push	r12
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	6b 01       	movw	r12, r22
    2604:	7c 01       	movw	r14, r24
    2606:	c4 2f       	mov	r28, r20
    2608:	80 90 fa 12 	lds	r8, 0x12FA	; 0x8012fa <xTickCount>
    260c:	90 90 fb 12 	lds	r9, 0x12FB	; 0x8012fb <xTickCount+0x1>
    2610:	a0 90 fc 12 	lds	r10, 0x12FC	; 0x8012fc <xTickCount+0x2>
    2614:	b0 90 fd 12 	lds	r11, 0x12FD	; 0x8012fd <xTickCount+0x3>
    2618:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    261c:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2620:	02 96       	adiw	r24, 0x02	; 2
    2622:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	c8 16       	cp	r12, r24
    262a:	d8 06       	cpc	r13, r24
    262c:	e8 06       	cpc	r14, r24
    262e:	f8 06       	cpc	r15, r24
    2630:	b1 f5       	brne	.+108    	; 0x269e <prvAddCurrentTaskToDelayedList+0xb0>
    2632:	cc 23       	and	r28, r28
    2634:	a1 f1       	breq	.+104    	; 0x269e <prvAddCurrentTaskToDelayedList+0xb0>
    2636:	ef ef       	ldi	r30, 0xFF	; 255
    2638:	f2 e1       	ldi	r31, 0x12	; 18
    263a:	a1 81       	ldd	r26, Z+1	; 0x01
    263c:	b2 81       	ldd	r27, Z+2	; 0x02
    263e:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2642:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2646:	bf 83       	std	Y+7, r27	; 0x07
    2648:	ae 83       	std	Y+6, r26	; 0x06
    264a:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    264e:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2652:	16 96       	adiw	r26, 0x06	; 6
    2654:	8d 91       	ld	r24, X+
    2656:	9c 91       	ld	r25, X
    2658:	17 97       	sbiw	r26, 0x07	; 7
    265a:	99 87       	std	Y+9, r25	; 0x09
    265c:	88 87       	std	Y+8, r24	; 0x08
    265e:	16 96       	adiw	r26, 0x06	; 6
    2660:	cd 91       	ld	r28, X+
    2662:	dc 91       	ld	r29, X
    2664:	17 97       	sbiw	r26, 0x07	; 7
    2666:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    266a:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    266e:	02 96       	adiw	r24, 0x02	; 2
    2670:	9d 83       	std	Y+5, r25	; 0x05
    2672:	8c 83       	std	Y+4, r24	; 0x04
    2674:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2678:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    267c:	02 96       	adiw	r24, 0x02	; 2
    267e:	17 96       	adiw	r26, 0x07	; 7
    2680:	9c 93       	st	X, r25
    2682:	8e 93       	st	-X, r24
    2684:	16 97       	sbiw	r26, 0x06	; 6
    2686:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    268a:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    268e:	1d 96       	adiw	r26, 0x0d	; 13
    2690:	fc 93       	st	X, r31
    2692:	ee 93       	st	-X, r30
    2694:	1c 97       	sbiw	r26, 0x0c	; 12
    2696:	80 81       	ld	r24, Z
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	80 83       	st	Z, r24
    269c:	3f c0       	rjmp	.+126    	; 0x271c <prvAddCurrentTaskToDelayedList+0x12e>
    269e:	c8 0c       	add	r12, r8
    26a0:	d9 1c       	adc	r13, r9
    26a2:	ea 1c       	adc	r14, r10
    26a4:	fb 1c       	adc	r15, r11
    26a6:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    26aa:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    26ae:	c2 82       	std	Z+2, r12	; 0x02
    26b0:	d3 82       	std	Z+3, r13	; 0x03
    26b2:	e4 82       	std	Z+4, r14	; 0x04
    26b4:	f5 82       	std	Z+5, r15	; 0x05
    26b6:	c8 14       	cp	r12, r8
    26b8:	d9 04       	cpc	r13, r9
    26ba:	ea 04       	cpc	r14, r10
    26bc:	fb 04       	cpc	r15, r11
    26be:	68 f4       	brcc	.+26     	; 0x26da <prvAddCurrentTaskToDelayedList+0xec>
    26c0:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    26c4:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    26c8:	80 91 21 13 	lds	r24, 0x1321	; 0x801321 <pxOverflowDelayedTaskList>
    26cc:	90 91 22 13 	lds	r25, 0x1322	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    26d0:	6e 5f       	subi	r22, 0xFE	; 254
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    26d8:	21 c0       	rjmp	.+66     	; 0x271c <prvAddCurrentTaskToDelayedList+0x12e>
    26da:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    26de:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    26e2:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <pxDelayedTaskList>
    26e6:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    26ea:	6e 5f       	subi	r22, 0xFE	; 254
    26ec:	7f 4f       	sbci	r23, 0xFF	; 255
    26ee:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    26f2:	80 91 ed 12 	lds	r24, 0x12ED	; 0x8012ed <xNextTaskUnblockTime>
    26f6:	90 91 ee 12 	lds	r25, 0x12EE	; 0x8012ee <xNextTaskUnblockTime+0x1>
    26fa:	a0 91 ef 12 	lds	r26, 0x12EF	; 0x8012ef <xNextTaskUnblockTime+0x2>
    26fe:	b0 91 f0 12 	lds	r27, 0x12F0	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    2702:	c8 16       	cp	r12, r24
    2704:	d9 06       	cpc	r13, r25
    2706:	ea 06       	cpc	r14, r26
    2708:	fb 06       	cpc	r15, r27
    270a:	40 f4       	brcc	.+16     	; 0x271c <prvAddCurrentTaskToDelayedList+0x12e>
    270c:	c0 92 ed 12 	sts	0x12ED, r12	; 0x8012ed <xNextTaskUnblockTime>
    2710:	d0 92 ee 12 	sts	0x12EE, r13	; 0x8012ee <xNextTaskUnblockTime+0x1>
    2714:	e0 92 ef 12 	sts	0x12EF, r14	; 0x8012ef <xNextTaskUnblockTime+0x2>
    2718:	f0 92 f0 12 	sts	0x12F0, r15	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	bf 90       	pop	r11
    272a:	af 90       	pop	r10
    272c:	9f 90       	pop	r9
    272e:	8f 90       	pop	r8
    2730:	08 95       	ret

00002732 <xTaskCreate>:
    2732:	2f 92       	push	r2
    2734:	3f 92       	push	r3
    2736:	4f 92       	push	r4
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	3c 01       	movw	r6, r24
    2756:	1b 01       	movw	r2, r22
    2758:	4a 01       	movw	r8, r20
    275a:	29 01       	movw	r4, r18
    275c:	ca 01       	movw	r24, r20
    275e:	0e 94 3d 08 	call	0x107a	; 0x107a <pvPortMalloc>
    2762:	6c 01       	movw	r12, r24
    2764:	89 2b       	or	r24, r25
    2766:	71 f0       	breq	.+28     	; 0x2784 <xTaskCreate+0x52>
    2768:	84 e3       	ldi	r24, 0x34	; 52
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 3d 08 	call	0x107a	; 0x107a <pvPortMalloc>
    2770:	ec 01       	movw	r28, r24
    2772:	89 2b       	or	r24, r25
    2774:	19 f0       	breq	.+6      	; 0x277c <xTaskCreate+0x4a>
    2776:	dc 8e       	std	Y+28, r13	; 0x1c
    2778:	cb 8e       	std	Y+27, r12	; 0x1b
    277a:	06 c0       	rjmp	.+12     	; 0x2788 <xTaskCreate+0x56>
    277c:	c6 01       	movw	r24, r12
    277e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortFree>
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <xTaskCreate+0x56>
    2784:	c0 e0       	ldi	r28, 0x00	; 0
    2786:	d0 e0       	ldi	r29, 0x00	; 0
    2788:	20 97       	sbiw	r28, 0x00	; 0
    278a:	61 f0       	breq	.+24     	; 0x27a4 <xTaskCreate+0x72>
    278c:	a1 2c       	mov	r10, r1
    278e:	b1 2c       	mov	r11, r1
    2790:	6e 01       	movw	r12, r28
    2792:	92 01       	movw	r18, r4
    2794:	a4 01       	movw	r20, r8
    2796:	b1 01       	movw	r22, r2
    2798:	c3 01       	movw	r24, r6
    279a:	e7 dd       	rcall	.-1074   	; 0x236a <prvInitialiseNewTask>
    279c:	ce 01       	movw	r24, r28
    279e:	93 de       	rcall	.-730    	; 0x24c6 <prvAddNewTaskToReadyList>
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	01 c0       	rjmp	.+2      	; 0x27a6 <xTaskCreate+0x74>
    27a4:	8f ef       	ldi	r24, 0xFF	; 255
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	df 90       	pop	r13
    27b2:	cf 90       	pop	r12
    27b4:	bf 90       	pop	r11
    27b6:	af 90       	pop	r10
    27b8:	9f 90       	pop	r9
    27ba:	8f 90       	pop	r8
    27bc:	7f 90       	pop	r7
    27be:	6f 90       	pop	r6
    27c0:	5f 90       	pop	r5
    27c2:	4f 90       	pop	r4
    27c4:	3f 90       	pop	r3
    27c6:	2f 90       	pop	r2
    27c8:	08 95       	ret

000027ca <vTaskStartScheduler>:
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	0f 2e       	mov	r0, r31
    27d2:	fb ee       	ldi	r31, 0xEB	; 235
    27d4:	ef 2e       	mov	r14, r31
    27d6:	f2 e1       	ldi	r31, 0x12	; 18
    27d8:	ff 2e       	mov	r15, r31
    27da:	f0 2d       	mov	r31, r0
    27dc:	00 e0       	ldi	r16, 0x00	; 0
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 ec       	ldi	r20, 0xC0	; 192
    27e4:	50 e0       	ldi	r21, 0x00	; 0
    27e6:	60 e1       	ldi	r22, 0x10	; 16
    27e8:	76 e0       	ldi	r23, 0x06	; 6
    27ea:	8e e4       	ldi	r24, 0x4E	; 78
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	a1 df       	rcall	.-190    	; 0x2732 <xTaskCreate>
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	11 f4       	brne	.+4      	; 0x27f8 <vTaskStartScheduler+0x2e>
    27f4:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <xTimerCreateTimerTask>
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	c9 f4       	brne	.+50     	; 0x282e <vTaskStartScheduler+0x64>
    27fc:	f8 94       	cli
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	9f ef       	ldi	r25, 0xFF	; 255
    2802:	dc 01       	movw	r26, r24
    2804:	80 93 ed 12 	sts	0x12ED, r24	; 0x8012ed <xNextTaskUnblockTime>
    2808:	90 93 ee 12 	sts	0x12EE, r25	; 0x8012ee <xNextTaskUnblockTime+0x1>
    280c:	a0 93 ef 12 	sts	0x12EF, r26	; 0x8012ef <xNextTaskUnblockTime+0x2>
    2810:	b0 93 f0 12 	sts	0x12F0, r27	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 93 f8 12 	sts	0x12F8, r24	; 0x8012f8 <xSchedulerRunning>
    281a:	10 92 fa 12 	sts	0x12FA, r1	; 0x8012fa <xTickCount>
    281e:	10 92 fb 12 	sts	0x12FB, r1	; 0x8012fb <xTickCount+0x1>
    2822:	10 92 fc 12 	sts	0x12FC, r1	; 0x8012fc <xTickCount+0x2>
    2826:	10 92 fd 12 	sts	0x12FD, r1	; 0x8012fd <xTickCount+0x3>
    282a:	0e 94 bf 09 	call	0x137e	; 0x137e <xPortStartScheduler>
    282e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	08 95       	ret

0000283a <vTaskSuspendAll>:
    283a:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	80 93 ea 12 	sts	0x12EA, r24	; 0x8012ea <uxSchedulerSuspended>
    2844:	08 95       	ret

00002846 <xTaskGetTickCount>:
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	0f 92       	push	r0
    284c:	60 91 fa 12 	lds	r22, 0x12FA	; 0x8012fa <xTickCount>
    2850:	70 91 fb 12 	lds	r23, 0x12FB	; 0x8012fb <xTickCount+0x1>
    2854:	80 91 fc 12 	lds	r24, 0x12FC	; 0x8012fc <xTickCount+0x2>
    2858:	90 91 fd 12 	lds	r25, 0x12FD	; 0x8012fd <xTickCount+0x3>
    285c:	0f 90       	pop	r0
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	08 95       	ret

00002862 <xTaskIncrementTick>:
    2862:	cf 92       	push	r12
    2864:	df 92       	push	r13
    2866:	ef 92       	push	r14
    2868:	ff 92       	push	r15
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    2872:	81 11       	cpse	r24, r1
    2874:	05 c1       	rjmp	.+522    	; 0x2a80 <xTaskIncrementTick+0x21e>
    2876:	c0 90 fa 12 	lds	r12, 0x12FA	; 0x8012fa <xTickCount>
    287a:	d0 90 fb 12 	lds	r13, 0x12FB	; 0x8012fb <xTickCount+0x1>
    287e:	e0 90 fc 12 	lds	r14, 0x12FC	; 0x8012fc <xTickCount+0x2>
    2882:	f0 90 fd 12 	lds	r15, 0x12FD	; 0x8012fd <xTickCount+0x3>
    2886:	8f ef       	ldi	r24, 0xFF	; 255
    2888:	c8 1a       	sub	r12, r24
    288a:	d8 0a       	sbc	r13, r24
    288c:	e8 0a       	sbc	r14, r24
    288e:	f8 0a       	sbc	r15, r24
    2890:	c0 92 fa 12 	sts	0x12FA, r12	; 0x8012fa <xTickCount>
    2894:	d0 92 fb 12 	sts	0x12FB, r13	; 0x8012fb <xTickCount+0x1>
    2898:	e0 92 fc 12 	sts	0x12FC, r14	; 0x8012fc <xTickCount+0x2>
    289c:	f0 92 fd 12 	sts	0x12FD, r15	; 0x8012fd <xTickCount+0x3>
    28a0:	c1 14       	cp	r12, r1
    28a2:	d1 04       	cpc	r13, r1
    28a4:	e1 04       	cpc	r14, r1
    28a6:	f1 04       	cpc	r15, r1
    28a8:	b1 f4       	brne	.+44     	; 0x28d6 <xTaskIncrementTick+0x74>
    28aa:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <pxDelayedTaskList>
    28ae:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    28b2:	20 91 21 13 	lds	r18, 0x1321	; 0x801321 <pxOverflowDelayedTaskList>
    28b6:	30 91 22 13 	lds	r19, 0x1322	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    28ba:	30 93 24 13 	sts	0x1324, r19	; 0x801324 <pxDelayedTaskList+0x1>
    28be:	20 93 23 13 	sts	0x1323, r18	; 0x801323 <pxDelayedTaskList>
    28c2:	90 93 22 13 	sts	0x1322, r25	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    28c6:	80 93 21 13 	sts	0x1321, r24	; 0x801321 <pxOverflowDelayedTaskList>
    28ca:	80 91 f2 12 	lds	r24, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    28ce:	8f 5f       	subi	r24, 0xFF	; 255
    28d0:	80 93 f2 12 	sts	0x12F2, r24	; 0x8012f2 <xNumOfOverflows>
    28d4:	16 dd       	rcall	.-1492   	; 0x2302 <prvResetNextTaskUnblockTime>
    28d6:	80 91 ed 12 	lds	r24, 0x12ED	; 0x8012ed <xNextTaskUnblockTime>
    28da:	90 91 ee 12 	lds	r25, 0x12EE	; 0x8012ee <xNextTaskUnblockTime+0x1>
    28de:	a0 91 ef 12 	lds	r26, 0x12EF	; 0x8012ef <xNextTaskUnblockTime+0x2>
    28e2:	b0 91 f0 12 	lds	r27, 0x12F0	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    28e6:	c8 16       	cp	r12, r24
    28e8:	d9 06       	cpc	r13, r25
    28ea:	ea 06       	cpc	r14, r26
    28ec:	fb 06       	cpc	r15, r27
    28ee:	20 f4       	brcc	.+8      	; 0x28f8 <xTaskIncrementTick+0x96>
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	b2 c0       	rjmp	.+356    	; 0x2a58 <xTaskIncrementTick+0x1f6>
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <xTaskIncrementTick+0x98>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    28fe:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    2902:	90 81       	ld	r25, Z
    2904:	91 11       	cpse	r25, r1
    2906:	0c c0       	rjmp	.+24     	; 0x2920 <xTaskIncrementTick+0xbe>
    2908:	4f ef       	ldi	r20, 0xFF	; 255
    290a:	5f ef       	ldi	r21, 0xFF	; 255
    290c:	ba 01       	movw	r22, r20
    290e:	40 93 ed 12 	sts	0x12ED, r20	; 0x8012ed <xNextTaskUnblockTime>
    2912:	50 93 ee 12 	sts	0x12EE, r21	; 0x8012ee <xNextTaskUnblockTime+0x1>
    2916:	60 93 ef 12 	sts	0x12EF, r22	; 0x8012ef <xNextTaskUnblockTime+0x2>
    291a:	70 93 f0 12 	sts	0x12F0, r23	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    291e:	9c c0       	rjmp	.+312    	; 0x2a58 <xTaskIncrementTick+0x1f6>
    2920:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    2924:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    2928:	07 80       	ldd	r0, Z+7	; 0x07
    292a:	f0 85       	ldd	r31, Z+8	; 0x08
    292c:	e0 2d       	mov	r30, r0
    292e:	00 84       	ldd	r0, Z+8	; 0x08
    2930:	f1 85       	ldd	r31, Z+9	; 0x09
    2932:	e0 2d       	mov	r30, r0
    2934:	42 81       	ldd	r20, Z+2	; 0x02
    2936:	53 81       	ldd	r21, Z+3	; 0x03
    2938:	64 81       	ldd	r22, Z+4	; 0x04
    293a:	75 81       	ldd	r23, Z+5	; 0x05
    293c:	c4 16       	cp	r12, r20
    293e:	d5 06       	cpc	r13, r21
    2940:	e6 06       	cpc	r14, r22
    2942:	f7 06       	cpc	r15, r23
    2944:	48 f4       	brcc	.+18     	; 0x2958 <xTaskIncrementTick+0xf6>
    2946:	40 93 ed 12 	sts	0x12ED, r20	; 0x8012ed <xNextTaskUnblockTime>
    294a:	50 93 ee 12 	sts	0x12EE, r21	; 0x8012ee <xNextTaskUnblockTime+0x1>
    294e:	60 93 ef 12 	sts	0x12EF, r22	; 0x8012ef <xNextTaskUnblockTime+0x2>
    2952:	70 93 f0 12 	sts	0x12F0, r23	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    2956:	80 c0       	rjmp	.+256    	; 0x2a58 <xTaskIncrementTick+0x1f6>
    2958:	a4 85       	ldd	r26, Z+12	; 0x0c
    295a:	b5 85       	ldd	r27, Z+13	; 0x0d
    295c:	c6 81       	ldd	r28, Z+6	; 0x06
    295e:	d7 81       	ldd	r29, Z+7	; 0x07
    2960:	20 85       	ldd	r18, Z+8	; 0x08
    2962:	31 85       	ldd	r19, Z+9	; 0x09
    2964:	3f 83       	std	Y+7, r19	; 0x07
    2966:	2e 83       	std	Y+6, r18	; 0x06
    2968:	c0 85       	ldd	r28, Z+8	; 0x08
    296a:	d1 85       	ldd	r29, Z+9	; 0x09
    296c:	26 81       	ldd	r18, Z+6	; 0x06
    296e:	37 81       	ldd	r19, Z+7	; 0x07
    2970:	3d 83       	std	Y+5, r19	; 0x05
    2972:	2c 83       	std	Y+4, r18	; 0x04
    2974:	11 96       	adiw	r26, 0x01	; 1
    2976:	4d 91       	ld	r20, X+
    2978:	5c 91       	ld	r21, X
    297a:	12 97       	sbiw	r26, 0x02	; 2
    297c:	9f 01       	movw	r18, r30
    297e:	2e 5f       	subi	r18, 0xFE	; 254
    2980:	3f 4f       	sbci	r19, 0xFF	; 255
    2982:	42 17       	cp	r20, r18
    2984:	53 07       	cpc	r21, r19
    2986:	31 f4       	brne	.+12     	; 0x2994 <xTaskIncrementTick+0x132>
    2988:	40 85       	ldd	r20, Z+8	; 0x08
    298a:	51 85       	ldd	r21, Z+9	; 0x09
    298c:	12 96       	adiw	r26, 0x02	; 2
    298e:	5c 93       	st	X, r21
    2990:	4e 93       	st	-X, r20
    2992:	11 97       	sbiw	r26, 0x01	; 1
    2994:	15 86       	std	Z+13, r1	; 0x0d
    2996:	14 86       	std	Z+12, r1	; 0x0c
    2998:	9c 91       	ld	r25, X
    299a:	91 50       	subi	r25, 0x01	; 1
    299c:	9c 93       	st	X, r25
    299e:	a0 8d       	ldd	r26, Z+24	; 0x18
    29a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    29a2:	10 97       	sbiw	r26, 0x00	; 0
    29a4:	09 f1       	breq	.+66     	; 0x29e8 <xTaskIncrementTick+0x186>
    29a6:	c2 89       	ldd	r28, Z+18	; 0x12
    29a8:	d3 89       	ldd	r29, Z+19	; 0x13
    29aa:	44 89       	ldd	r20, Z+20	; 0x14
    29ac:	55 89       	ldd	r21, Z+21	; 0x15
    29ae:	5f 83       	std	Y+7, r21	; 0x07
    29b0:	4e 83       	std	Y+6, r20	; 0x06
    29b2:	c4 89       	ldd	r28, Z+20	; 0x14
    29b4:	d5 89       	ldd	r29, Z+21	; 0x15
    29b6:	42 89       	ldd	r20, Z+18	; 0x12
    29b8:	53 89       	ldd	r21, Z+19	; 0x13
    29ba:	5d 83       	std	Y+5, r21	; 0x05
    29bc:	4c 83       	std	Y+4, r20	; 0x04
    29be:	11 96       	adiw	r26, 0x01	; 1
    29c0:	6d 91       	ld	r22, X+
    29c2:	7c 91       	ld	r23, X
    29c4:	12 97       	sbiw	r26, 0x02	; 2
    29c6:	af 01       	movw	r20, r30
    29c8:	42 5f       	subi	r20, 0xF2	; 242
    29ca:	5f 4f       	sbci	r21, 0xFF	; 255
    29cc:	64 17       	cp	r22, r20
    29ce:	75 07       	cpc	r23, r21
    29d0:	31 f4       	brne	.+12     	; 0x29de <xTaskIncrementTick+0x17c>
    29d2:	44 89       	ldd	r20, Z+20	; 0x14
    29d4:	55 89       	ldd	r21, Z+21	; 0x15
    29d6:	12 96       	adiw	r26, 0x02	; 2
    29d8:	5c 93       	st	X, r21
    29da:	4e 93       	st	-X, r20
    29dc:	11 97       	sbiw	r26, 0x01	; 1
    29de:	11 8e       	std	Z+25, r1	; 0x19
    29e0:	10 8e       	std	Z+24, r1	; 0x18
    29e2:	9c 91       	ld	r25, X
    29e4:	91 50       	subi	r25, 0x01	; 1
    29e6:	9c 93       	st	X, r25
    29e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29ea:	90 91 f9 12 	lds	r25, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    29ee:	9a 17       	cp	r25, r26
    29f0:	10 f4       	brcc	.+4      	; 0x29f6 <xTaskIncrementTick+0x194>
    29f2:	a0 93 f9 12 	sts	0x12F9, r26	; 0x8012f9 <uxTopReadyPriority>
    29f6:	9b e0       	ldi	r25, 0x0B	; 11
    29f8:	9a 9f       	mul	r25, r26
    29fa:	d0 01       	movw	r26, r0
    29fc:	11 24       	eor	r1, r1
    29fe:	a5 5c       	subi	r26, 0xC5	; 197
    2a00:	bc 4e       	sbci	r27, 0xEC	; 236
    2a02:	11 96       	adiw	r26, 0x01	; 1
    2a04:	0d 90       	ld	r0, X+
    2a06:	bc 91       	ld	r27, X
    2a08:	a0 2d       	mov	r26, r0
    2a0a:	b7 83       	std	Z+7, r27	; 0x07
    2a0c:	a6 83       	std	Z+6, r26	; 0x06
    2a0e:	16 96       	adiw	r26, 0x06	; 6
    2a10:	4d 91       	ld	r20, X+
    2a12:	5c 91       	ld	r21, X
    2a14:	17 97       	sbiw	r26, 0x07	; 7
    2a16:	51 87       	std	Z+9, r21	; 0x09
    2a18:	40 87       	std	Z+8, r20	; 0x08
    2a1a:	16 96       	adiw	r26, 0x06	; 6
    2a1c:	cd 91       	ld	r28, X+
    2a1e:	dc 91       	ld	r29, X
    2a20:	17 97       	sbiw	r26, 0x07	; 7
    2a22:	3d 83       	std	Y+5, r19	; 0x05
    2a24:	2c 83       	std	Y+4, r18	; 0x04
    2a26:	17 96       	adiw	r26, 0x07	; 7
    2a28:	3c 93       	st	X, r19
    2a2a:	2e 93       	st	-X, r18
    2a2c:	16 97       	sbiw	r26, 0x06	; 6
    2a2e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a30:	9a 9f       	mul	r25, r26
    2a32:	d0 01       	movw	r26, r0
    2a34:	11 24       	eor	r1, r1
    2a36:	a5 5c       	subi	r26, 0xC5	; 197
    2a38:	bc 4e       	sbci	r27, 0xEC	; 236
    2a3a:	b5 87       	std	Z+13, r27	; 0x0d
    2a3c:	a4 87       	std	Z+12, r26	; 0x0c
    2a3e:	9c 91       	ld	r25, X
    2a40:	9f 5f       	subi	r25, 0xFF	; 255
    2a42:	9c 93       	st	X, r25
    2a44:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a46:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2a4a:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2a4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a50:	29 17       	cp	r18, r25
    2a52:	08 f0       	brcs	.+2      	; 0x2a56 <xTaskIncrementTick+0x1f4>
    2a54:	4f cf       	rjmp	.-354    	; 0x28f4 <xTaskIncrementTick+0x92>
    2a56:	51 cf       	rjmp	.-350    	; 0x28fa <xTaskIncrementTick+0x98>
    2a58:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2a5c:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2a60:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2a62:	9b e0       	ldi	r25, 0x0B	; 11
    2a64:	e9 9f       	mul	r30, r25
    2a66:	f0 01       	movw	r30, r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	e5 5c       	subi	r30, 0xC5	; 197
    2a6c:	fc 4e       	sbci	r31, 0xEC	; 236
    2a6e:	90 81       	ld	r25, Z
    2a70:	92 30       	cpi	r25, 0x02	; 2
    2a72:	08 f0       	brcs	.+2      	; 0x2a76 <xTaskIncrementTick+0x214>
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 91 f3 12 	lds	r25, 0x12F3	; 0x8012f3 <xYieldPending>
    2a7a:	91 11       	cpse	r25, r1
    2a7c:	16 c0       	rjmp	.+44     	; 0x2aaa <xTaskIncrementTick+0x248>
    2a7e:	16 c0       	rjmp	.+44     	; 0x2aac <xTaskIncrementTick+0x24a>
    2a80:	80 91 f4 12 	lds	r24, 0x12F4	; 0x8012f4 <xPendedTicks>
    2a84:	90 91 f5 12 	lds	r25, 0x12F5	; 0x8012f5 <xPendedTicks+0x1>
    2a88:	a0 91 f6 12 	lds	r26, 0x12F6	; 0x8012f6 <xPendedTicks+0x2>
    2a8c:	b0 91 f7 12 	lds	r27, 0x12F7	; 0x8012f7 <xPendedTicks+0x3>
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	a1 1d       	adc	r26, r1
    2a94:	b1 1d       	adc	r27, r1
    2a96:	80 93 f4 12 	sts	0x12F4, r24	; 0x8012f4 <xPendedTicks>
    2a9a:	90 93 f5 12 	sts	0x12F5, r25	; 0x8012f5 <xPendedTicks+0x1>
    2a9e:	a0 93 f6 12 	sts	0x12F6, r26	; 0x8012f6 <xPendedTicks+0x2>
    2aa2:	b0 93 f7 12 	sts	0x12F7, r27	; 0x8012f7 <xPendedTicks+0x3>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <xTaskIncrementTick+0x24a>
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	08 95       	ret

00002aba <xTaskResumeAll>:
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	0f 92       	push	r0
    2acc:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    2ad0:	81 50       	subi	r24, 0x01	; 1
    2ad2:	80 93 ea 12 	sts	0x12EA, r24	; 0x8012ea <uxSchedulerSuspended>
    2ad6:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    2ada:	81 11       	cpse	r24, r1
    2adc:	be c0       	rjmp	.+380    	; 0x2c5a <xTaskResumeAll+0x1a0>
    2ade:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    2ae2:	81 11       	cpse	r24, r1
    2ae4:	88 c0       	rjmp	.+272    	; 0x2bf6 <xTaskResumeAll+0x13c>
    2ae6:	bc c0       	rjmp	.+376    	; 0x2c60 <xTaskResumeAll+0x1a6>
    2ae8:	e0 91 1d 13 	lds	r30, 0x131D	; 0x80131d <xPendingReadyList+0x7>
    2aec:	f0 91 1e 13 	lds	r31, 0x131E	; 0x80131e <xPendingReadyList+0x8>
    2af0:	00 84       	ldd	r0, Z+8	; 0x08
    2af2:	f1 85       	ldd	r31, Z+9	; 0x09
    2af4:	e0 2d       	mov	r30, r0
    2af6:	a0 8d       	ldd	r26, Z+24	; 0x18
    2af8:	b1 8d       	ldd	r27, Z+25	; 0x19
    2afa:	c2 89       	ldd	r28, Z+18	; 0x12
    2afc:	d3 89       	ldd	r29, Z+19	; 0x13
    2afe:	84 89       	ldd	r24, Z+20	; 0x14
    2b00:	95 89       	ldd	r25, Z+21	; 0x15
    2b02:	9f 83       	std	Y+7, r25	; 0x07
    2b04:	8e 83       	std	Y+6, r24	; 0x06
    2b06:	c4 89       	ldd	r28, Z+20	; 0x14
    2b08:	d5 89       	ldd	r29, Z+21	; 0x15
    2b0a:	82 89       	ldd	r24, Z+18	; 0x12
    2b0c:	93 89       	ldd	r25, Z+19	; 0x13
    2b0e:	9d 83       	std	Y+5, r25	; 0x05
    2b10:	8c 83       	std	Y+4, r24	; 0x04
    2b12:	11 96       	adiw	r26, 0x01	; 1
    2b14:	2d 91       	ld	r18, X+
    2b16:	3c 91       	ld	r19, X
    2b18:	12 97       	sbiw	r26, 0x02	; 2
    2b1a:	cf 01       	movw	r24, r30
    2b1c:	0e 96       	adiw	r24, 0x0e	; 14
    2b1e:	28 17       	cp	r18, r24
    2b20:	39 07       	cpc	r19, r25
    2b22:	31 f4       	brne	.+12     	; 0x2b30 <xTaskResumeAll+0x76>
    2b24:	84 89       	ldd	r24, Z+20	; 0x14
    2b26:	95 89       	ldd	r25, Z+21	; 0x15
    2b28:	12 96       	adiw	r26, 0x02	; 2
    2b2a:	9c 93       	st	X, r25
    2b2c:	8e 93       	st	-X, r24
    2b2e:	11 97       	sbiw	r26, 0x01	; 1
    2b30:	11 8e       	std	Z+25, r1	; 0x19
    2b32:	10 8e       	std	Z+24, r1	; 0x18
    2b34:	8c 91       	ld	r24, X
    2b36:	81 50       	subi	r24, 0x01	; 1
    2b38:	8c 93       	st	X, r24
    2b3a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b3c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b3e:	c6 81       	ldd	r28, Z+6	; 0x06
    2b40:	d7 81       	ldd	r29, Z+7	; 0x07
    2b42:	80 85       	ldd	r24, Z+8	; 0x08
    2b44:	91 85       	ldd	r25, Z+9	; 0x09
    2b46:	9f 83       	std	Y+7, r25	; 0x07
    2b48:	8e 83       	std	Y+6, r24	; 0x06
    2b4a:	c0 85       	ldd	r28, Z+8	; 0x08
    2b4c:	d1 85       	ldd	r29, Z+9	; 0x09
    2b4e:	86 81       	ldd	r24, Z+6	; 0x06
    2b50:	97 81       	ldd	r25, Z+7	; 0x07
    2b52:	9d 83       	std	Y+5, r25	; 0x05
    2b54:	8c 83       	std	Y+4, r24	; 0x04
    2b56:	11 96       	adiw	r26, 0x01	; 1
    2b58:	8d 91       	ld	r24, X+
    2b5a:	9c 91       	ld	r25, X
    2b5c:	12 97       	sbiw	r26, 0x02	; 2
    2b5e:	9f 01       	movw	r18, r30
    2b60:	2e 5f       	subi	r18, 0xFE	; 254
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	82 17       	cp	r24, r18
    2b66:	93 07       	cpc	r25, r19
    2b68:	31 f4       	brne	.+12     	; 0x2b76 <xTaskResumeAll+0xbc>
    2b6a:	80 85       	ldd	r24, Z+8	; 0x08
    2b6c:	91 85       	ldd	r25, Z+9	; 0x09
    2b6e:	12 96       	adiw	r26, 0x02	; 2
    2b70:	9c 93       	st	X, r25
    2b72:	8e 93       	st	-X, r24
    2b74:	11 97       	sbiw	r26, 0x01	; 1
    2b76:	15 86       	std	Z+13, r1	; 0x0d
    2b78:	14 86       	std	Z+12, r1	; 0x0c
    2b7a:	8c 91       	ld	r24, X
    2b7c:	81 50       	subi	r24, 0x01	; 1
    2b7e:	8c 93       	st	X, r24
    2b80:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b82:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    2b86:	8a 17       	cp	r24, r26
    2b88:	10 f4       	brcc	.+4      	; 0x2b8e <xTaskResumeAll+0xd4>
    2b8a:	a0 93 f9 12 	sts	0x12F9, r26	; 0x8012f9 <uxTopReadyPriority>
    2b8e:	8b e0       	ldi	r24, 0x0B	; 11
    2b90:	8a 9f       	mul	r24, r26
    2b92:	d0 01       	movw	r26, r0
    2b94:	11 24       	eor	r1, r1
    2b96:	a5 5c       	subi	r26, 0xC5	; 197
    2b98:	bc 4e       	sbci	r27, 0xEC	; 236
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	0d 90       	ld	r0, X+
    2b9e:	bc 91       	ld	r27, X
    2ba0:	a0 2d       	mov	r26, r0
    2ba2:	b7 83       	std	Z+7, r27	; 0x07
    2ba4:	a6 83       	std	Z+6, r26	; 0x06
    2ba6:	16 96       	adiw	r26, 0x06	; 6
    2ba8:	4d 91       	ld	r20, X+
    2baa:	5c 91       	ld	r21, X
    2bac:	17 97       	sbiw	r26, 0x07	; 7
    2bae:	51 87       	std	Z+9, r21	; 0x09
    2bb0:	40 87       	std	Z+8, r20	; 0x08
    2bb2:	16 96       	adiw	r26, 0x06	; 6
    2bb4:	cd 91       	ld	r28, X+
    2bb6:	dc 91       	ld	r29, X
    2bb8:	17 97       	sbiw	r26, 0x07	; 7
    2bba:	3d 83       	std	Y+5, r19	; 0x05
    2bbc:	2c 83       	std	Y+4, r18	; 0x04
    2bbe:	17 96       	adiw	r26, 0x07	; 7
    2bc0:	3c 93       	st	X, r19
    2bc2:	2e 93       	st	-X, r18
    2bc4:	16 97       	sbiw	r26, 0x06	; 6
    2bc6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bc8:	8a 9f       	mul	r24, r26
    2bca:	d0 01       	movw	r26, r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	a5 5c       	subi	r26, 0xC5	; 197
    2bd0:	bc 4e       	sbci	r27, 0xEC	; 236
    2bd2:	b5 87       	std	Z+13, r27	; 0x0d
    2bd4:	a4 87       	std	Z+12, r26	; 0x0c
    2bd6:	8c 91       	ld	r24, X
    2bd8:	8f 5f       	subi	r24, 0xFF	; 255
    2bda:	8c 93       	st	X, r24
    2bdc:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bde:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2be2:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2be6:	5a 96       	adiw	r26, 0x1a	; 26
    2be8:	8c 91       	ld	r24, X
    2bea:	98 17       	cp	r25, r24
    2bec:	30 f0       	brcs	.+12     	; 0x2bfa <xTaskResumeAll+0x140>
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <xTaskResumeAll+0x140>
    2bf6:	e0 e0       	ldi	r30, 0x00	; 0
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 91 16 13 	lds	r24, 0x1316	; 0x801316 <xPendingReadyList>
    2bfe:	81 11       	cpse	r24, r1
    2c00:	73 cf       	rjmp	.-282    	; 0x2ae8 <xTaskResumeAll+0x2e>
    2c02:	ef 2b       	or	r30, r31
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <xTaskResumeAll+0x14e>
    2c06:	7d db       	rcall	.-2310   	; 0x2302 <prvResetNextTaskUnblockTime>
    2c08:	c0 90 f4 12 	lds	r12, 0x12F4	; 0x8012f4 <xPendedTicks>
    2c0c:	d0 90 f5 12 	lds	r13, 0x12F5	; 0x8012f5 <xPendedTicks+0x1>
    2c10:	e0 90 f6 12 	lds	r14, 0x12F6	; 0x8012f6 <xPendedTicks+0x2>
    2c14:	f0 90 f7 12 	lds	r15, 0x12F7	; 0x8012f7 <xPendedTicks+0x3>
    2c18:	c1 14       	cp	r12, r1
    2c1a:	d1 04       	cpc	r13, r1
    2c1c:	e1 04       	cpc	r14, r1
    2c1e:	f1 04       	cpc	r15, r1
    2c20:	a1 f0       	breq	.+40     	; 0x2c4a <xTaskResumeAll+0x190>
    2c22:	1f de       	rcall	.-962    	; 0x2862 <xTaskIncrementTick>
    2c24:	88 23       	and	r24, r24
    2c26:	19 f0       	breq	.+6      	; 0x2c2e <xTaskResumeAll+0x174>
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	c8 1a       	sub	r12, r24
    2c32:	d1 08       	sbc	r13, r1
    2c34:	e1 08       	sbc	r14, r1
    2c36:	f1 08       	sbc	r15, r1
    2c38:	a1 f7       	brne	.-24     	; 0x2c22 <xTaskResumeAll+0x168>
    2c3a:	10 92 f4 12 	sts	0x12F4, r1	; 0x8012f4 <xPendedTicks>
    2c3e:	10 92 f5 12 	sts	0x12F5, r1	; 0x8012f5 <xPendedTicks+0x1>
    2c42:	10 92 f6 12 	sts	0x12F6, r1	; 0x8012f6 <xPendedTicks+0x2>
    2c46:	10 92 f7 12 	sts	0x12F7, r1	; 0x8012f7 <xPendedTicks+0x3>
    2c4a:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <xYieldPending>
    2c4e:	88 23       	and	r24, r24
    2c50:	31 f0       	breq	.+12     	; 0x2c5e <xTaskResumeAll+0x1a4>
    2c52:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	03 c0       	rjmp	.+6      	; 0x2c60 <xTaskResumeAll+0x1a6>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	01 c0       	rjmp	.+2      	; 0x2c60 <xTaskResumeAll+0x1a6>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	0f 90       	pop	r0
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	ff 90       	pop	r15
    2c6a:	ef 90       	pop	r14
    2c6c:	df 90       	pop	r13
    2c6e:	cf 90       	pop	r12
    2c70:	08 95       	ret

00002c72 <xTaskDelayUntil>:
    2c72:	8f 92       	push	r8
    2c74:	9f 92       	push	r9
    2c76:	af 92       	push	r10
    2c78:	bf 92       	push	r11
    2c7a:	cf 92       	push	r12
    2c7c:	df 92       	push	r13
    2c7e:	ef 92       	push	r14
    2c80:	ff 92       	push	r15
    2c82:	1f 93       	push	r17
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	ec 01       	movw	r28, r24
    2c8a:	6a 01       	movw	r12, r20
    2c8c:	7b 01       	movw	r14, r22
    2c8e:	d5 dd       	rcall	.-1110   	; 0x283a <vTaskSuspendAll>
    2c90:	80 90 fa 12 	lds	r8, 0x12FA	; 0x8012fa <xTickCount>
    2c94:	90 90 fb 12 	lds	r9, 0x12FB	; 0x8012fb <xTickCount+0x1>
    2c98:	a0 90 fc 12 	lds	r10, 0x12FC	; 0x8012fc <xTickCount+0x2>
    2c9c:	b0 90 fd 12 	lds	r11, 0x12FD	; 0x8012fd <xTickCount+0x3>
    2ca0:	88 81       	ld	r24, Y
    2ca2:	99 81       	ldd	r25, Y+1	; 0x01
    2ca4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ca6:	bb 81       	ldd	r27, Y+3	; 0x03
    2ca8:	ac 01       	movw	r20, r24
    2caa:	bd 01       	movw	r22, r26
    2cac:	4c 0d       	add	r20, r12
    2cae:	5d 1d       	adc	r21, r13
    2cb0:	6e 1d       	adc	r22, r14
    2cb2:	7f 1d       	adc	r23, r15
    2cb4:	88 16       	cp	r8, r24
    2cb6:	99 06       	cpc	r9, r25
    2cb8:	aa 06       	cpc	r10, r26
    2cba:	bb 06       	cpc	r11, r27
    2cbc:	60 f4       	brcc	.+24     	; 0x2cd6 <xTaskDelayUntil+0x64>
    2cbe:	48 17       	cp	r20, r24
    2cc0:	59 07       	cpc	r21, r25
    2cc2:	6a 07       	cpc	r22, r26
    2cc4:	7b 07       	cpc	r23, r27
    2cc6:	98 f4       	brcc	.+38     	; 0x2cee <xTaskDelayUntil+0x7c>
    2cc8:	84 16       	cp	r8, r20
    2cca:	95 06       	cpc	r9, r21
    2ccc:	a6 06       	cpc	r10, r22
    2cce:	b7 06       	cpc	r11, r23
    2cd0:	80 f0       	brcs	.+32     	; 0x2cf2 <xTaskDelayUntil+0x80>
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	13 c0       	rjmp	.+38     	; 0x2cfc <xTaskDelayUntil+0x8a>
    2cd6:	48 17       	cp	r20, r24
    2cd8:	59 07       	cpc	r21, r25
    2cda:	6a 07       	cpc	r22, r26
    2cdc:	7b 07       	cpc	r23, r27
    2cde:	58 f0       	brcs	.+22     	; 0x2cf6 <xTaskDelayUntil+0x84>
    2ce0:	84 16       	cp	r8, r20
    2ce2:	95 06       	cpc	r9, r21
    2ce4:	a6 06       	cpc	r10, r22
    2ce6:	b7 06       	cpc	r11, r23
    2ce8:	40 f0       	brcs	.+16     	; 0x2cfa <xTaskDelayUntil+0x88>
    2cea:	10 e0       	ldi	r17, 0x00	; 0
    2cec:	07 c0       	rjmp	.+14     	; 0x2cfc <xTaskDelayUntil+0x8a>
    2cee:	10 e0       	ldi	r17, 0x00	; 0
    2cf0:	05 c0       	rjmp	.+10     	; 0x2cfc <xTaskDelayUntil+0x8a>
    2cf2:	11 e0       	ldi	r17, 0x01	; 1
    2cf4:	03 c0       	rjmp	.+6      	; 0x2cfc <xTaskDelayUntil+0x8a>
    2cf6:	11 e0       	ldi	r17, 0x01	; 1
    2cf8:	01 c0       	rjmp	.+2      	; 0x2cfc <xTaskDelayUntil+0x8a>
    2cfa:	11 e0       	ldi	r17, 0x01	; 1
    2cfc:	48 83       	st	Y, r20
    2cfe:	59 83       	std	Y+1, r21	; 0x01
    2d00:	6a 83       	std	Y+2, r22	; 0x02
    2d02:	7b 83       	std	Y+3, r23	; 0x03
    2d04:	11 23       	and	r17, r17
    2d06:	41 f0       	breq	.+16     	; 0x2d18 <xTaskDelayUntil+0xa6>
    2d08:	cb 01       	movw	r24, r22
    2d0a:	ba 01       	movw	r22, r20
    2d0c:	68 19       	sub	r22, r8
    2d0e:	79 09       	sbc	r23, r9
    2d10:	8a 09       	sbc	r24, r10
    2d12:	9b 09       	sbc	r25, r11
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	6b dc       	rcall	.-1834   	; 0x25ee <prvAddCurrentTaskToDelayedList>
    2d18:	d0 de       	rcall	.-608    	; 0x2aba <xTaskResumeAll>
    2d1a:	81 11       	cpse	r24, r1
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <xTaskDelayUntil+0xb0>
    2d1e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    2d22:	81 2f       	mov	r24, r17
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	ff 90       	pop	r15
    2d2c:	ef 90       	pop	r14
    2d2e:	df 90       	pop	r13
    2d30:	cf 90       	pop	r12
    2d32:	bf 90       	pop	r11
    2d34:	af 90       	pop	r10
    2d36:	9f 90       	pop	r9
    2d38:	8f 90       	pop	r8
    2d3a:	08 95       	ret

00002d3c <vTaskDelay>:
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	6b 01       	movw	r12, r22
    2d46:	7c 01       	movw	r14, r24
    2d48:	67 2b       	or	r22, r23
    2d4a:	68 2b       	or	r22, r24
    2d4c:	69 2b       	or	r22, r25
    2d4e:	39 f0       	breq	.+14     	; 0x2d5e <vTaskDelay+0x22>
    2d50:	74 dd       	rcall	.-1304   	; 0x283a <vTaskSuspendAll>
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	c7 01       	movw	r24, r14
    2d56:	b6 01       	movw	r22, r12
    2d58:	4a dc       	rcall	.-1900   	; 0x25ee <prvAddCurrentTaskToDelayedList>
    2d5a:	af de       	rcall	.-674    	; 0x2aba <xTaskResumeAll>
    2d5c:	01 c0       	rjmp	.+2      	; 0x2d60 <vTaskDelay+0x24>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	81 11       	cpse	r24, r1
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <vTaskDelay+0x2c>
    2d64:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    2d68:	ff 90       	pop	r15
    2d6a:	ef 90       	pop	r14
    2d6c:	df 90       	pop	r13
    2d6e:	cf 90       	pop	r12
    2d70:	08 95       	ret

00002d72 <vTaskSwitchContext>:
    2d72:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    2d76:	88 23       	and	r24, r24
    2d78:	21 f0       	breq	.+8      	; 0x2d82 <vTaskSwitchContext+0x10>
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    2d80:	08 95       	ret
    2d82:	10 92 f3 12 	sts	0x12F3, r1	; 0x8012f3 <xYieldPending>
    2d86:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2d8a:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2d8e:	20 81       	ld	r18, Z
    2d90:	31 81       	ldd	r19, Z+1	; 0x01
    2d92:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2d96:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2d9a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d9c:	94 8d       	ldd	r25, Z+28	; 0x1c
    2d9e:	82 17       	cp	r24, r18
    2da0:	93 07       	cpc	r25, r19
    2da2:	60 f0       	brcs	.+24     	; 0x2dbc <vTaskSwitchContext+0x4a>
    2da4:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2da8:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2dac:	63 5e       	subi	r22, 0xE3	; 227
    2dae:	7f 4f       	sbci	r23, 0xFF	; 255
    2db0:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2db4:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2db8:	0e 94 26 21 	call	0x424c	; 0x424c <vApplicationStackOverflowHook>
    2dbc:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    2dc0:	01 c0       	rjmp	.+2      	; 0x2dc4 <vTaskSwitchContext+0x52>
    2dc2:	81 50       	subi	r24, 0x01	; 1
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	9b e0       	ldi	r25, 0x0B	; 11
    2dca:	92 9f       	mul	r25, r18
    2dcc:	f0 01       	movw	r30, r0
    2dce:	93 9f       	mul	r25, r19
    2dd0:	f0 0d       	add	r31, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	e5 5c       	subi	r30, 0xC5	; 197
    2dd6:	fc 4e       	sbci	r31, 0xEC	; 236
    2dd8:	90 81       	ld	r25, Z
    2dda:	99 23       	and	r25, r25
    2ddc:	91 f3       	breq	.-28     	; 0x2dc2 <vTaskSwitchContext+0x50>
    2dde:	9b e0       	ldi	r25, 0x0B	; 11
    2de0:	92 9f       	mul	r25, r18
    2de2:	a0 01       	movw	r20, r0
    2de4:	93 9f       	mul	r25, r19
    2de6:	50 0d       	add	r21, r0
    2de8:	11 24       	eor	r1, r1
    2dea:	df 01       	movw	r26, r30
    2dec:	01 80       	ldd	r0, Z+1	; 0x01
    2dee:	f2 81       	ldd	r31, Z+2	; 0x02
    2df0:	e0 2d       	mov	r30, r0
    2df2:	04 80       	ldd	r0, Z+4	; 0x04
    2df4:	f5 81       	ldd	r31, Z+5	; 0x05
    2df6:	e0 2d       	mov	r30, r0
    2df8:	12 96       	adiw	r26, 0x02	; 2
    2dfa:	fc 93       	st	X, r31
    2dfc:	ee 93       	st	-X, r30
    2dfe:	11 97       	sbiw	r26, 0x01	; 1
    2e00:	42 5c       	subi	r20, 0xC2	; 194
    2e02:	5c 4e       	sbci	r21, 0xEC	; 236
    2e04:	e4 17       	cp	r30, r20
    2e06:	f5 07       	cpc	r31, r21
    2e08:	29 f4       	brne	.+10     	; 0x2e14 <vTaskSwitchContext+0xa2>
    2e0a:	44 81       	ldd	r20, Z+4	; 0x04
    2e0c:	55 81       	ldd	r21, Z+5	; 0x05
    2e0e:	fd 01       	movw	r30, r26
    2e10:	52 83       	std	Z+2, r21	; 0x02
    2e12:	41 83       	std	Z+1, r20	; 0x01
    2e14:	9b e0       	ldi	r25, 0x0B	; 11
    2e16:	92 9f       	mul	r25, r18
    2e18:	f0 01       	movw	r30, r0
    2e1a:	93 9f       	mul	r25, r19
    2e1c:	f0 0d       	add	r31, r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	e5 5c       	subi	r30, 0xC5	; 197
    2e22:	fc 4e       	sbci	r31, 0xEC	; 236
    2e24:	01 80       	ldd	r0, Z+1	; 0x01
    2e26:	f2 81       	ldd	r31, Z+2	; 0x02
    2e28:	e0 2d       	mov	r30, r0
    2e2a:	20 85       	ldd	r18, Z+8	; 0x08
    2e2c:	31 85       	ldd	r19, Z+9	; 0x09
    2e2e:	30 93 aa 13 	sts	0x13AA, r19	; 0x8013aa <pxCurrentTCB+0x1>
    2e32:	20 93 a9 13 	sts	0x13A9, r18	; 0x8013a9 <pxCurrentTCB>
    2e36:	80 93 f9 12 	sts	0x12F9, r24	; 0x8012f9 <uxTopReadyPriority>
    2e3a:	08 95       	ret

00002e3c <vTaskPlaceOnEventList>:
    2e3c:	cf 92       	push	r12
    2e3e:	df 92       	push	r13
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	6a 01       	movw	r12, r20
    2e46:	7b 01       	movw	r14, r22
    2e48:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2e4c:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2e50:	62 5f       	subi	r22, 0xF2	; 242
    2e52:	7f 4f       	sbci	r23, 0xFF	; 255
    2e54:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    2e58:	41 e0       	ldi	r20, 0x01	; 1
    2e5a:	c7 01       	movw	r24, r14
    2e5c:	b6 01       	movw	r22, r12
    2e5e:	c7 db       	rcall	.-2162   	; 0x25ee <prvAddCurrentTaskToDelayedList>
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	08 95       	ret

00002e6a <vTaskPlaceOnUnorderedEventList>:
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	fc 01       	movw	r30, r24
    2e74:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2e78:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2e7c:	70 68       	ori	r23, 0x80	; 128
    2e7e:	1e 96       	adiw	r26, 0x0e	; 14
    2e80:	4d 93       	st	X+, r20
    2e82:	5d 93       	st	X+, r21
    2e84:	6d 93       	st	X+, r22
    2e86:	7c 93       	st	X, r23
    2e88:	51 97       	sbiw	r26, 0x11	; 17
    2e8a:	a1 81       	ldd	r26, Z+1	; 0x01
    2e8c:	b2 81       	ldd	r27, Z+2	; 0x02
    2e8e:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2e92:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2e96:	bb 8b       	std	Y+19, r27	; 0x13
    2e98:	aa 8b       	std	Y+18, r26	; 0x12
    2e9a:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2e9e:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2ea2:	16 96       	adiw	r26, 0x06	; 6
    2ea4:	8d 91       	ld	r24, X+
    2ea6:	9c 91       	ld	r25, X
    2ea8:	17 97       	sbiw	r26, 0x07	; 7
    2eaa:	9d 8b       	std	Y+21, r25	; 0x15
    2eac:	8c 8b       	std	Y+20, r24	; 0x14
    2eae:	16 96       	adiw	r26, 0x06	; 6
    2eb0:	cd 91       	ld	r28, X+
    2eb2:	dc 91       	ld	r29, X
    2eb4:	17 97       	sbiw	r26, 0x07	; 7
    2eb6:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2eba:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2ebe:	0e 96       	adiw	r24, 0x0e	; 14
    2ec0:	9d 83       	std	Y+5, r25	; 0x05
    2ec2:	8c 83       	std	Y+4, r24	; 0x04
    2ec4:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2ec8:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2ecc:	0e 96       	adiw	r24, 0x0e	; 14
    2ece:	17 96       	adiw	r26, 0x07	; 7
    2ed0:	9c 93       	st	X, r25
    2ed2:	8e 93       	st	-X, r24
    2ed4:	16 97       	sbiw	r26, 0x06	; 6
    2ed6:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2eda:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2ede:	59 96       	adiw	r26, 0x19	; 25
    2ee0:	fc 93       	st	X, r31
    2ee2:	ee 93       	st	-X, r30
    2ee4:	58 97       	sbiw	r26, 0x18	; 24
    2ee6:	80 81       	ld	r24, Z
    2ee8:	8f 5f       	subi	r24, 0xFF	; 255
    2eea:	80 83       	st	Z, r24
    2eec:	41 e0       	ldi	r20, 0x01	; 1
    2eee:	c9 01       	movw	r24, r18
    2ef0:	b8 01       	movw	r22, r16
    2ef2:	7d db       	rcall	.-2310   	; 0x25ee <prvAddCurrentTaskToDelayedList>
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	08 95       	ret

00002efe <vTaskPlaceOnEventListRestricted>:
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	fc 01       	movw	r30, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	ba 01       	movw	r22, r20
    2f08:	a1 81       	ldd	r26, Z+1	; 0x01
    2f0a:	b2 81       	ldd	r27, Z+2	; 0x02
    2f0c:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2f10:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2f14:	bb 8b       	std	Y+19, r27	; 0x13
    2f16:	aa 8b       	std	Y+18, r26	; 0x12
    2f18:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2f1c:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2f20:	16 96       	adiw	r26, 0x06	; 6
    2f22:	4d 91       	ld	r20, X+
    2f24:	5c 91       	ld	r21, X
    2f26:	17 97       	sbiw	r26, 0x07	; 7
    2f28:	5d 8b       	std	Y+21, r21	; 0x15
    2f2a:	4c 8b       	std	Y+20, r20	; 0x14
    2f2c:	16 96       	adiw	r26, 0x06	; 6
    2f2e:	cd 91       	ld	r28, X+
    2f30:	dc 91       	ld	r29, X
    2f32:	17 97       	sbiw	r26, 0x07	; 7
    2f34:	40 91 a9 13 	lds	r20, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2f38:	50 91 aa 13 	lds	r21, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2f3c:	42 5f       	subi	r20, 0xF2	; 242
    2f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f40:	5d 83       	std	Y+5, r21	; 0x05
    2f42:	4c 83       	std	Y+4, r20	; 0x04
    2f44:	40 91 a9 13 	lds	r20, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2f48:	50 91 aa 13 	lds	r21, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2f4c:	42 5f       	subi	r20, 0xF2	; 242
    2f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f50:	17 96       	adiw	r26, 0x07	; 7
    2f52:	5c 93       	st	X, r21
    2f54:	4e 93       	st	-X, r20
    2f56:	16 97       	sbiw	r26, 0x06	; 6
    2f58:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2f5c:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2f60:	59 96       	adiw	r26, 0x19	; 25
    2f62:	fc 93       	st	X, r31
    2f64:	ee 93       	st	-X, r30
    2f66:	58 97       	sbiw	r26, 0x18	; 24
    2f68:	30 81       	ld	r19, Z
    2f6a:	3f 5f       	subi	r19, 0xFF	; 255
    2f6c:	30 83       	st	Z, r19
    2f6e:	22 23       	and	r18, r18
    2f70:	19 f0       	breq	.+6      	; 0x2f78 <vTaskPlaceOnEventListRestricted+0x7a>
    2f72:	6f ef       	ldi	r22, 0xFF	; 255
    2f74:	7f ef       	ldi	r23, 0xFF	; 255
    2f76:	cb 01       	movw	r24, r22
    2f78:	42 2f       	mov	r20, r18
    2f7a:	39 db       	rcall	.-2446   	; 0x25ee <prvAddCurrentTaskToDelayedList>
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	08 95       	ret

00002f82 <xTaskRemoveFromEventList>:
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	dc 01       	movw	r26, r24
    2f88:	17 96       	adiw	r26, 0x07	; 7
    2f8a:	ed 91       	ld	r30, X+
    2f8c:	fc 91       	ld	r31, X
    2f8e:	18 97       	sbiw	r26, 0x08	; 8
    2f90:	00 84       	ldd	r0, Z+8	; 0x08
    2f92:	f1 85       	ldd	r31, Z+9	; 0x09
    2f94:	e0 2d       	mov	r30, r0
    2f96:	a0 8d       	ldd	r26, Z+24	; 0x18
    2f98:	b1 8d       	ldd	r27, Z+25	; 0x19
    2f9a:	c2 89       	ldd	r28, Z+18	; 0x12
    2f9c:	d3 89       	ldd	r29, Z+19	; 0x13
    2f9e:	84 89       	ldd	r24, Z+20	; 0x14
    2fa0:	95 89       	ldd	r25, Z+21	; 0x15
    2fa2:	9f 83       	std	Y+7, r25	; 0x07
    2fa4:	8e 83       	std	Y+6, r24	; 0x06
    2fa6:	c4 89       	ldd	r28, Z+20	; 0x14
    2fa8:	d5 89       	ldd	r29, Z+21	; 0x15
    2faa:	82 89       	ldd	r24, Z+18	; 0x12
    2fac:	93 89       	ldd	r25, Z+19	; 0x13
    2fae:	9d 83       	std	Y+5, r25	; 0x05
    2fb0:	8c 83       	std	Y+4, r24	; 0x04
    2fb2:	11 96       	adiw	r26, 0x01	; 1
    2fb4:	8d 91       	ld	r24, X+
    2fb6:	9c 91       	ld	r25, X
    2fb8:	12 97       	sbiw	r26, 0x02	; 2
    2fba:	9f 01       	movw	r18, r30
    2fbc:	22 5f       	subi	r18, 0xF2	; 242
    2fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc0:	82 17       	cp	r24, r18
    2fc2:	93 07       	cpc	r25, r19
    2fc4:	31 f4       	brne	.+12     	; 0x2fd2 <xTaskRemoveFromEventList+0x50>
    2fc6:	84 89       	ldd	r24, Z+20	; 0x14
    2fc8:	95 89       	ldd	r25, Z+21	; 0x15
    2fca:	12 96       	adiw	r26, 0x02	; 2
    2fcc:	9c 93       	st	X, r25
    2fce:	8e 93       	st	-X, r24
    2fd0:	11 97       	sbiw	r26, 0x01	; 1
    2fd2:	11 8e       	std	Z+25, r1	; 0x19
    2fd4:	10 8e       	std	Z+24, r1	; 0x18
    2fd6:	8c 91       	ld	r24, X
    2fd8:	81 50       	subi	r24, 0x01	; 1
    2fda:	8c 93       	st	X, r24
    2fdc:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    2fe0:	81 11       	cpse	r24, r1
    2fe2:	52 c0       	rjmp	.+164    	; 0x3088 <xTaskRemoveFromEventList+0x106>
    2fe4:	a4 85       	ldd	r26, Z+12	; 0x0c
    2fe6:	b5 85       	ldd	r27, Z+13	; 0x0d
    2fe8:	c6 81       	ldd	r28, Z+6	; 0x06
    2fea:	d7 81       	ldd	r29, Z+7	; 0x07
    2fec:	80 85       	ldd	r24, Z+8	; 0x08
    2fee:	91 85       	ldd	r25, Z+9	; 0x09
    2ff0:	9f 83       	std	Y+7, r25	; 0x07
    2ff2:	8e 83       	std	Y+6, r24	; 0x06
    2ff4:	c0 85       	ldd	r28, Z+8	; 0x08
    2ff6:	d1 85       	ldd	r29, Z+9	; 0x09
    2ff8:	86 81       	ldd	r24, Z+6	; 0x06
    2ffa:	97 81       	ldd	r25, Z+7	; 0x07
    2ffc:	9d 83       	std	Y+5, r25	; 0x05
    2ffe:	8c 83       	std	Y+4, r24	; 0x04
    3000:	11 96       	adiw	r26, 0x01	; 1
    3002:	8d 91       	ld	r24, X+
    3004:	9c 91       	ld	r25, X
    3006:	12 97       	sbiw	r26, 0x02	; 2
    3008:	9f 01       	movw	r18, r30
    300a:	2e 5f       	subi	r18, 0xFE	; 254
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	82 17       	cp	r24, r18
    3010:	93 07       	cpc	r25, r19
    3012:	31 f4       	brne	.+12     	; 0x3020 <xTaskRemoveFromEventList+0x9e>
    3014:	80 85       	ldd	r24, Z+8	; 0x08
    3016:	91 85       	ldd	r25, Z+9	; 0x09
    3018:	12 96       	adiw	r26, 0x02	; 2
    301a:	9c 93       	st	X, r25
    301c:	8e 93       	st	-X, r24
    301e:	11 97       	sbiw	r26, 0x01	; 1
    3020:	15 86       	std	Z+13, r1	; 0x0d
    3022:	14 86       	std	Z+12, r1	; 0x0c
    3024:	8c 91       	ld	r24, X
    3026:	81 50       	subi	r24, 0x01	; 1
    3028:	8c 93       	st	X, r24
    302a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    302c:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    3030:	8a 17       	cp	r24, r26
    3032:	10 f4       	brcc	.+4      	; 0x3038 <xTaskRemoveFromEventList+0xb6>
    3034:	a0 93 f9 12 	sts	0x12F9, r26	; 0x8012f9 <uxTopReadyPriority>
    3038:	8b e0       	ldi	r24, 0x0B	; 11
    303a:	8a 9f       	mul	r24, r26
    303c:	d0 01       	movw	r26, r0
    303e:	11 24       	eor	r1, r1
    3040:	a5 5c       	subi	r26, 0xC5	; 197
    3042:	bc 4e       	sbci	r27, 0xEC	; 236
    3044:	11 96       	adiw	r26, 0x01	; 1
    3046:	0d 90       	ld	r0, X+
    3048:	bc 91       	ld	r27, X
    304a:	a0 2d       	mov	r26, r0
    304c:	b7 83       	std	Z+7, r27	; 0x07
    304e:	a6 83       	std	Z+6, r26	; 0x06
    3050:	16 96       	adiw	r26, 0x06	; 6
    3052:	4d 91       	ld	r20, X+
    3054:	5c 91       	ld	r21, X
    3056:	17 97       	sbiw	r26, 0x07	; 7
    3058:	51 87       	std	Z+9, r21	; 0x09
    305a:	40 87       	std	Z+8, r20	; 0x08
    305c:	16 96       	adiw	r26, 0x06	; 6
    305e:	cd 91       	ld	r28, X+
    3060:	dc 91       	ld	r29, X
    3062:	17 97       	sbiw	r26, 0x07	; 7
    3064:	3d 83       	std	Y+5, r19	; 0x05
    3066:	2c 83       	std	Y+4, r18	; 0x04
    3068:	17 96       	adiw	r26, 0x07	; 7
    306a:	3c 93       	st	X, r19
    306c:	2e 93       	st	-X, r18
    306e:	16 97       	sbiw	r26, 0x06	; 6
    3070:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3072:	8a 9f       	mul	r24, r26
    3074:	d0 01       	movw	r26, r0
    3076:	11 24       	eor	r1, r1
    3078:	a5 5c       	subi	r26, 0xC5	; 197
    307a:	bc 4e       	sbci	r27, 0xEC	; 236
    307c:	b5 87       	std	Z+13, r27	; 0x0d
    307e:	a4 87       	std	Z+12, r26	; 0x0c
    3080:	8c 91       	ld	r24, X
    3082:	8f 5f       	subi	r24, 0xFF	; 255
    3084:	8c 93       	st	X, r24
    3086:	1c c0       	rjmp	.+56     	; 0x30c0 <xTaskRemoveFromEventList+0x13e>
    3088:	46 e1       	ldi	r20, 0x16	; 22
    308a:	53 e1       	ldi	r21, 0x13	; 19
    308c:	da 01       	movw	r26, r20
    308e:	11 96       	adiw	r26, 0x01	; 1
    3090:	cd 91       	ld	r28, X+
    3092:	dc 91       	ld	r29, X
    3094:	12 97       	sbiw	r26, 0x02	; 2
    3096:	d3 8b       	std	Z+19, r29	; 0x13
    3098:	c2 8b       	std	Z+18, r28	; 0x12
    309a:	8e 81       	ldd	r24, Y+6	; 0x06
    309c:	9f 81       	ldd	r25, Y+7	; 0x07
    309e:	95 8b       	std	Z+21, r25	; 0x15
    30a0:	84 8b       	std	Z+20, r24	; 0x14
    30a2:	8e 81       	ldd	r24, Y+6	; 0x06
    30a4:	9f 81       	ldd	r25, Y+7	; 0x07
    30a6:	dc 01       	movw	r26, r24
    30a8:	15 96       	adiw	r26, 0x05	; 5
    30aa:	3c 93       	st	X, r19
    30ac:	2e 93       	st	-X, r18
    30ae:	14 97       	sbiw	r26, 0x04	; 4
    30b0:	3f 83       	std	Y+7, r19	; 0x07
    30b2:	2e 83       	std	Y+6, r18	; 0x06
    30b4:	51 8f       	std	Z+25, r21	; 0x19
    30b6:	40 8f       	std	Z+24, r20	; 0x18
    30b8:	da 01       	movw	r26, r20
    30ba:	8c 91       	ld	r24, X
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
    30be:	8c 93       	st	X, r24
    30c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    30c2:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    30c6:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    30ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    30cc:	89 17       	cp	r24, r25
    30ce:	20 f4       	brcc	.+8      	; 0x30d8 <xTaskRemoveFromEventList+0x156>
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    30d6:	01 c0       	rjmp	.+2      	; 0x30da <xTaskRemoveFromEventList+0x158>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	08 95       	ret

000030e0 <vTaskRemoveFromUnorderedEventList>:
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	dc 01       	movw	r26, r24
    30e6:	70 68       	ori	r23, 0x80	; 128
    30e8:	4d 93       	st	X+, r20
    30ea:	5d 93       	st	X+, r21
    30ec:	6d 93       	st	X+, r22
    30ee:	7c 93       	st	X, r23
    30f0:	13 97       	sbiw	r26, 0x03	; 3
    30f2:	18 96       	adiw	r26, 0x08	; 8
    30f4:	ed 91       	ld	r30, X+
    30f6:	fc 91       	ld	r31, X
    30f8:	19 97       	sbiw	r26, 0x09	; 9
    30fa:	1a 96       	adiw	r26, 0x0a	; 10
    30fc:	4d 91       	ld	r20, X+
    30fe:	5c 91       	ld	r21, X
    3100:	1b 97       	sbiw	r26, 0x0b	; 11
    3102:	14 96       	adiw	r26, 0x04	; 4
    3104:	8d 91       	ld	r24, X+
    3106:	9c 91       	ld	r25, X
    3108:	15 97       	sbiw	r26, 0x05	; 5
    310a:	16 96       	adiw	r26, 0x06	; 6
    310c:	2d 91       	ld	r18, X+
    310e:	3c 91       	ld	r19, X
    3110:	17 97       	sbiw	r26, 0x07	; 7
    3112:	ec 01       	movw	r28, r24
    3114:	3f 83       	std	Y+7, r19	; 0x07
    3116:	2e 83       	std	Y+6, r18	; 0x06
    3118:	16 96       	adiw	r26, 0x06	; 6
    311a:	8d 91       	ld	r24, X+
    311c:	9c 91       	ld	r25, X
    311e:	17 97       	sbiw	r26, 0x07	; 7
    3120:	14 96       	adiw	r26, 0x04	; 4
    3122:	2d 91       	ld	r18, X+
    3124:	3c 91       	ld	r19, X
    3126:	15 97       	sbiw	r26, 0x05	; 5
    3128:	ec 01       	movw	r28, r24
    312a:	3d 83       	std	Y+5, r19	; 0x05
    312c:	2c 83       	std	Y+4, r18	; 0x04
    312e:	ea 01       	movw	r28, r20
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	a8 17       	cp	r26, r24
    3136:	b9 07       	cpc	r27, r25
    3138:	31 f4       	brne	.+12     	; 0x3146 <vTaskRemoveFromUnorderedEventList+0x66>
    313a:	16 96       	adiw	r26, 0x06	; 6
    313c:	8d 91       	ld	r24, X+
    313e:	9c 91       	ld	r25, X
    3140:	17 97       	sbiw	r26, 0x07	; 7
    3142:	9a 83       	std	Y+2, r25	; 0x02
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	1b 96       	adiw	r26, 0x0b	; 11
    3148:	1c 92       	st	X, r1
    314a:	1e 92       	st	-X, r1
    314c:	1a 97       	sbiw	r26, 0x0a	; 10
    314e:	da 01       	movw	r26, r20
    3150:	8c 91       	ld	r24, X
    3152:	81 50       	subi	r24, 0x01	; 1
    3154:	8c 93       	st	X, r24
    3156:	a4 85       	ldd	r26, Z+12	; 0x0c
    3158:	b5 85       	ldd	r27, Z+13	; 0x0d
    315a:	c6 81       	ldd	r28, Z+6	; 0x06
    315c:	d7 81       	ldd	r29, Z+7	; 0x07
    315e:	80 85       	ldd	r24, Z+8	; 0x08
    3160:	91 85       	ldd	r25, Z+9	; 0x09
    3162:	9f 83       	std	Y+7, r25	; 0x07
    3164:	8e 83       	std	Y+6, r24	; 0x06
    3166:	c0 85       	ldd	r28, Z+8	; 0x08
    3168:	d1 85       	ldd	r29, Z+9	; 0x09
    316a:	86 81       	ldd	r24, Z+6	; 0x06
    316c:	97 81       	ldd	r25, Z+7	; 0x07
    316e:	9d 83       	std	Y+5, r25	; 0x05
    3170:	8c 83       	std	Y+4, r24	; 0x04
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	8d 91       	ld	r24, X+
    3176:	9c 91       	ld	r25, X
    3178:	12 97       	sbiw	r26, 0x02	; 2
    317a:	9f 01       	movw	r18, r30
    317c:	2e 5f       	subi	r18, 0xFE	; 254
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	82 17       	cp	r24, r18
    3182:	93 07       	cpc	r25, r19
    3184:	31 f4       	brne	.+12     	; 0x3192 <vTaskRemoveFromUnorderedEventList+0xb2>
    3186:	80 85       	ldd	r24, Z+8	; 0x08
    3188:	91 85       	ldd	r25, Z+9	; 0x09
    318a:	12 96       	adiw	r26, 0x02	; 2
    318c:	9c 93       	st	X, r25
    318e:	8e 93       	st	-X, r24
    3190:	11 97       	sbiw	r26, 0x01	; 1
    3192:	15 86       	std	Z+13, r1	; 0x0d
    3194:	14 86       	std	Z+12, r1	; 0x0c
    3196:	8c 91       	ld	r24, X
    3198:	81 50       	subi	r24, 0x01	; 1
    319a:	8c 93       	st	X, r24
    319c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    319e:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    31a2:	8a 17       	cp	r24, r26
    31a4:	10 f4       	brcc	.+4      	; 0x31aa <vTaskRemoveFromUnorderedEventList+0xca>
    31a6:	a0 93 f9 12 	sts	0x12F9, r26	; 0x8012f9 <uxTopReadyPriority>
    31aa:	8b e0       	ldi	r24, 0x0B	; 11
    31ac:	8a 9f       	mul	r24, r26
    31ae:	d0 01       	movw	r26, r0
    31b0:	11 24       	eor	r1, r1
    31b2:	a5 5c       	subi	r26, 0xC5	; 197
    31b4:	bc 4e       	sbci	r27, 0xEC	; 236
    31b6:	11 96       	adiw	r26, 0x01	; 1
    31b8:	0d 90       	ld	r0, X+
    31ba:	bc 91       	ld	r27, X
    31bc:	a0 2d       	mov	r26, r0
    31be:	b7 83       	std	Z+7, r27	; 0x07
    31c0:	a6 83       	std	Z+6, r26	; 0x06
    31c2:	16 96       	adiw	r26, 0x06	; 6
    31c4:	4d 91       	ld	r20, X+
    31c6:	5c 91       	ld	r21, X
    31c8:	17 97       	sbiw	r26, 0x07	; 7
    31ca:	51 87       	std	Z+9, r21	; 0x09
    31cc:	40 87       	std	Z+8, r20	; 0x08
    31ce:	16 96       	adiw	r26, 0x06	; 6
    31d0:	cd 91       	ld	r28, X+
    31d2:	dc 91       	ld	r29, X
    31d4:	17 97       	sbiw	r26, 0x07	; 7
    31d6:	3d 83       	std	Y+5, r19	; 0x05
    31d8:	2c 83       	std	Y+4, r18	; 0x04
    31da:	17 96       	adiw	r26, 0x07	; 7
    31dc:	3c 93       	st	X, r19
    31de:	2e 93       	st	-X, r18
    31e0:	16 97       	sbiw	r26, 0x06	; 6
    31e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    31e4:	8a 9f       	mul	r24, r26
    31e6:	d0 01       	movw	r26, r0
    31e8:	11 24       	eor	r1, r1
    31ea:	a5 5c       	subi	r26, 0xC5	; 197
    31ec:	bc 4e       	sbci	r27, 0xEC	; 236
    31ee:	b5 87       	std	Z+13, r27	; 0x0d
    31f0:	a4 87       	std	Z+12, r26	; 0x0c
    31f2:	8c 91       	ld	r24, X
    31f4:	8f 5f       	subi	r24, 0xFF	; 255
    31f6:	8c 93       	st	X, r24
    31f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    31fa:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    31fe:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3202:	82 8d       	ldd	r24, Z+26	; 0x1a
    3204:	89 17       	cp	r24, r25
    3206:	18 f4       	brcc	.+6      	; 0x320e <vTaskRemoveFromUnorderedEventList+0x12e>
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <vTaskSetTimeOutState>:
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	0f 92       	push	r0
    321a:	20 91 f2 12 	lds	r18, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    321e:	fc 01       	movw	r30, r24
    3220:	20 83       	st	Z, r18
    3222:	40 91 fa 12 	lds	r20, 0x12FA	; 0x8012fa <xTickCount>
    3226:	50 91 fb 12 	lds	r21, 0x12FB	; 0x8012fb <xTickCount+0x1>
    322a:	60 91 fc 12 	lds	r22, 0x12FC	; 0x8012fc <xTickCount+0x2>
    322e:	70 91 fd 12 	lds	r23, 0x12FD	; 0x8012fd <xTickCount+0x3>
    3232:	41 83       	std	Z+1, r20	; 0x01
    3234:	52 83       	std	Z+2, r21	; 0x02
    3236:	63 83       	std	Z+3, r22	; 0x03
    3238:	74 83       	std	Z+4, r23	; 0x04
    323a:	0f 90       	pop	r0
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	08 95       	ret

00003240 <vTaskInternalSetTimeOutState>:
    3240:	20 91 f2 12 	lds	r18, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    3244:	fc 01       	movw	r30, r24
    3246:	20 83       	st	Z, r18
    3248:	40 91 fa 12 	lds	r20, 0x12FA	; 0x8012fa <xTickCount>
    324c:	50 91 fb 12 	lds	r21, 0x12FB	; 0x8012fb <xTickCount+0x1>
    3250:	60 91 fc 12 	lds	r22, 0x12FC	; 0x8012fc <xTickCount+0x2>
    3254:	70 91 fd 12 	lds	r23, 0x12FD	; 0x8012fd <xTickCount+0x3>
    3258:	41 83       	std	Z+1, r20	; 0x01
    325a:	52 83       	std	Z+2, r21	; 0x02
    325c:	63 83       	std	Z+3, r22	; 0x03
    325e:	74 83       	std	Z+4, r23	; 0x04
    3260:	08 95       	ret

00003262 <xTaskCheckForTimeOut>:
    3262:	8f 92       	push	r8
    3264:	9f 92       	push	r9
    3266:	af 92       	push	r10
    3268:	bf 92       	push	r11
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	fb 01       	movw	r30, r22
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	0f 92       	push	r0
    3282:	c0 90 fa 12 	lds	r12, 0x12FA	; 0x8012fa <xTickCount>
    3286:	d0 90 fb 12 	lds	r13, 0x12FB	; 0x8012fb <xTickCount+0x1>
    328a:	e0 90 fc 12 	lds	r14, 0x12FC	; 0x8012fc <xTickCount+0x2>
    328e:	f0 90 fd 12 	lds	r15, 0x12FD	; 0x8012fd <xTickCount+0x3>
    3292:	dc 01       	movw	r26, r24
    3294:	11 96       	adiw	r26, 0x01	; 1
    3296:	0d 91       	ld	r16, X+
    3298:	1d 91       	ld	r17, X+
    329a:	2d 91       	ld	r18, X+
    329c:	3c 91       	ld	r19, X
    329e:	14 97       	sbiw	r26, 0x04	; 4
    32a0:	46 01       	movw	r8, r12
    32a2:	57 01       	movw	r10, r14
    32a4:	80 1a       	sub	r8, r16
    32a6:	91 0a       	sbc	r9, r17
    32a8:	a2 0a       	sbc	r10, r18
    32aa:	b3 0a       	sbc	r11, r19
    32ac:	40 81       	ld	r20, Z
    32ae:	51 81       	ldd	r21, Z+1	; 0x01
    32b0:	62 81       	ldd	r22, Z+2	; 0x02
    32b2:	73 81       	ldd	r23, Z+3	; 0x03
    32b4:	4f 3f       	cpi	r20, 0xFF	; 255
    32b6:	bf ef       	ldi	r27, 0xFF	; 255
    32b8:	5b 07       	cpc	r21, r27
    32ba:	6b 07       	cpc	r22, r27
    32bc:	7b 07       	cpc	r23, r27
    32be:	39 f1       	breq	.+78     	; 0x330e <xTaskCheckForTimeOut+0xac>
    32c0:	ec 01       	movw	r28, r24
    32c2:	b8 81       	ld	r27, Y
    32c4:	a0 91 f2 12 	lds	r26, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    32c8:	ba 17       	cp	r27, r26
    32ca:	59 f0       	breq	.+22     	; 0x32e2 <xTaskCheckForTimeOut+0x80>
    32cc:	c0 16       	cp	r12, r16
    32ce:	d1 06       	cpc	r13, r17
    32d0:	e2 06       	cpc	r14, r18
    32d2:	f3 06       	cpc	r15, r19
    32d4:	30 f0       	brcs	.+12     	; 0x32e2 <xTaskCheckForTimeOut+0x80>
    32d6:	10 82       	st	Z, r1
    32d8:	11 82       	std	Z+1, r1	; 0x01
    32da:	12 82       	std	Z+2, r1	; 0x02
    32dc:	13 82       	std	Z+3, r1	; 0x03
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	17 c0       	rjmp	.+46     	; 0x3310 <xTaskCheckForTimeOut+0xae>
    32e2:	84 16       	cp	r8, r20
    32e4:	95 06       	cpc	r9, r21
    32e6:	a6 06       	cpc	r10, r22
    32e8:	b7 06       	cpc	r11, r23
    32ea:	58 f4       	brcc	.+22     	; 0x3302 <xTaskCheckForTimeOut+0xa0>
    32ec:	48 19       	sub	r20, r8
    32ee:	59 09       	sbc	r21, r9
    32f0:	6a 09       	sbc	r22, r10
    32f2:	7b 09       	sbc	r23, r11
    32f4:	40 83       	st	Z, r20
    32f6:	51 83       	std	Z+1, r21	; 0x01
    32f8:	62 83       	std	Z+2, r22	; 0x02
    32fa:	73 83       	std	Z+3, r23	; 0x03
    32fc:	a1 df       	rcall	.-190    	; 0x3240 <vTaskInternalSetTimeOutState>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	07 c0       	rjmp	.+14     	; 0x3310 <xTaskCheckForTimeOut+0xae>
    3302:	10 82       	st	Z, r1
    3304:	11 82       	std	Z+1, r1	; 0x01
    3306:	12 82       	std	Z+2, r1	; 0x02
    3308:	13 82       	std	Z+3, r1	; 0x03
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <xTaskCheckForTimeOut+0xae>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	0f 90       	pop	r0
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	bf 90       	pop	r11
    3326:	af 90       	pop	r10
    3328:	9f 90       	pop	r9
    332a:	8f 90       	pop	r8
    332c:	08 95       	ret

0000332e <vTaskMissedYield>:
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    3334:	08 95       	ret

00003336 <xTaskGetCurrentTaskHandle>:
    3336:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    333a:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    333e:	08 95       	ret

00003340 <xTaskGetSchedulerState>:
    3340:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <xSchedulerRunning>
    3344:	88 23       	and	r24, r24
    3346:	31 f0       	breq	.+12     	; 0x3354 <xTaskGetSchedulerState+0x14>
    3348:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    334c:	81 11       	cpse	r24, r1
    334e:	04 c0       	rjmp	.+8      	; 0x3358 <xTaskGetSchedulerState+0x18>
    3350:	82 e0       	ldi	r24, 0x02	; 2
    3352:	08 95       	ret
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	08 95       	ret
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	08 95       	ret

0000335c <xTaskPriorityInherit>:
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	fc 01       	movw	r30, r24
    3366:	89 2b       	or	r24, r25
    3368:	09 f4       	brne	.+2      	; 0x336c <xTaskPriorityInherit+0x10>
    336a:	77 c0       	rjmp	.+238    	; 0x345a <xTaskPriorityInherit+0xfe>
    336c:	82 8d       	ldd	r24, Z+26	; 0x1a
    336e:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3372:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3376:	5a 96       	adiw	r26, 0x1a	; 26
    3378:	9c 91       	ld	r25, X
    337a:	89 17       	cp	r24, r25
    337c:	08 f0       	brcs	.+2      	; 0x3380 <xTaskPriorityInherit+0x24>
    337e:	63 c0       	rjmp	.+198    	; 0x3446 <xTaskPriorityInherit+0xea>
    3380:	46 85       	ldd	r20, Z+14	; 0x0e
    3382:	57 85       	ldd	r21, Z+15	; 0x0f
    3384:	60 89       	ldd	r22, Z+16	; 0x10
    3386:	71 89       	ldd	r23, Z+17	; 0x11
    3388:	77 23       	and	r23, r23
    338a:	94 f0       	brlt	.+36     	; 0x33b0 <xTaskPriorityInherit+0x54>
    338c:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3390:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3394:	5a 96       	adiw	r26, 0x1a	; 26
    3396:	9c 91       	ld	r25, X
    3398:	4a e0       	ldi	r20, 0x0A	; 10
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	49 1b       	sub	r20, r25
    33a2:	51 09       	sbc	r21, r1
    33a4:	61 09       	sbc	r22, r1
    33a6:	71 09       	sbc	r23, r1
    33a8:	46 87       	std	Z+14, r20	; 0x0e
    33aa:	57 87       	std	Z+15, r21	; 0x0f
    33ac:	60 8b       	std	Z+16, r22	; 0x10
    33ae:	71 8b       	std	Z+17, r23	; 0x11
    33b0:	24 85       	ldd	r18, Z+12	; 0x0c
    33b2:	35 85       	ldd	r19, Z+13	; 0x0d
    33b4:	4b e0       	ldi	r20, 0x0B	; 11
    33b6:	84 9f       	mul	r24, r20
    33b8:	c0 01       	movw	r24, r0
    33ba:	11 24       	eor	r1, r1
    33bc:	85 5c       	subi	r24, 0xC5	; 197
    33be:	9c 4e       	sbci	r25, 0xEC	; 236
    33c0:	28 17       	cp	r18, r24
    33c2:	39 07       	cpc	r19, r25
    33c4:	b9 f5       	brne	.+110    	; 0x3434 <xTaskPriorityInherit+0xd8>
    33c6:	ef 01       	movw	r28, r30
    33c8:	8f 01       	movw	r16, r30
    33ca:	0e 5f       	subi	r16, 0xFE	; 254
    33cc:	1f 4f       	sbci	r17, 0xFF	; 255
    33ce:	c8 01       	movw	r24, r16
    33d0:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
    33d4:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    33d8:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    33dc:	e2 8d       	ldd	r30, Z+26	; 0x1a
    33de:	ea 8f       	std	Y+26, r30	; 0x1a
    33e0:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    33e4:	8e 17       	cp	r24, r30
    33e6:	10 f4       	brcc	.+4      	; 0x33ec <xTaskPriorityInherit+0x90>
    33e8:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    33ec:	8b e0       	ldi	r24, 0x0B	; 11
    33ee:	8e 9f       	mul	r24, r30
    33f0:	f0 01       	movw	r30, r0
    33f2:	11 24       	eor	r1, r1
    33f4:	e5 5c       	subi	r30, 0xC5	; 197
    33f6:	fc 4e       	sbci	r31, 0xEC	; 236
    33f8:	01 80       	ldd	r0, Z+1	; 0x01
    33fa:	f2 81       	ldd	r31, Z+2	; 0x02
    33fc:	e0 2d       	mov	r30, r0
    33fe:	ff 83       	std	Y+7, r31	; 0x07
    3400:	ee 83       	std	Y+6, r30	; 0x06
    3402:	26 81       	ldd	r18, Z+6	; 0x06
    3404:	37 81       	ldd	r19, Z+7	; 0x07
    3406:	39 87       	std	Y+9, r19	; 0x09
    3408:	28 87       	std	Y+8, r18	; 0x08
    340a:	a6 81       	ldd	r26, Z+6	; 0x06
    340c:	b7 81       	ldd	r27, Z+7	; 0x07
    340e:	15 96       	adiw	r26, 0x05	; 5
    3410:	1c 93       	st	X, r17
    3412:	0e 93       	st	-X, r16
    3414:	14 97       	sbiw	r26, 0x04	; 4
    3416:	17 83       	std	Z+7, r17	; 0x07
    3418:	06 83       	std	Z+6, r16	; 0x06
    341a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    341c:	8e 9f       	mul	r24, r30
    341e:	f0 01       	movw	r30, r0
    3420:	11 24       	eor	r1, r1
    3422:	e5 5c       	subi	r30, 0xC5	; 197
    3424:	fc 4e       	sbci	r31, 0xEC	; 236
    3426:	fd 87       	std	Y+13, r31	; 0x0d
    3428:	ec 87       	std	Y+12, r30	; 0x0c
    342a:	80 81       	ld	r24, Z
    342c:	8f 5f       	subi	r24, 0xFF	; 255
    342e:	80 83       	st	Z, r24
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	16 c0       	rjmp	.+44     	; 0x3460 <xTaskPriorityInherit+0x104>
    3434:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3438:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	8c 91       	ld	r24, X
    3440:	82 8f       	std	Z+26, r24	; 0x1a
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	0d c0       	rjmp	.+26     	; 0x3460 <xTaskPriorityInherit+0x104>
    3446:	95 a5       	ldd	r25, Z+45	; 0x2d
    3448:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    344c:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3450:	82 8d       	ldd	r24, Z+26	; 0x1a
    3452:	98 17       	cp	r25, r24
    3454:	20 f0       	brcs	.+8      	; 0x345e <xTaskPriorityInherit+0x102>
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	03 c0       	rjmp	.+6      	; 0x3460 <xTaskPriorityInherit+0x104>
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	01 c0       	rjmp	.+2      	; 0x3460 <xTaskPriorityInherit+0x104>
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	08 95       	ret

0000346a <xTaskPriorityDisinherit>:
    346a:	0f 93       	push	r16
    346c:	1f 93       	push	r17
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	fc 01       	movw	r30, r24
    3474:	89 2b       	or	r24, r25
    3476:	09 f4       	brne	.+2      	; 0x347a <xTaskPriorityDisinherit+0x10>
    3478:	49 c0       	rjmp	.+146    	; 0x350c <xTaskPriorityDisinherit+0xa2>
    347a:	86 a5       	ldd	r24, Z+46	; 0x2e
    347c:	81 50       	subi	r24, 0x01	; 1
    347e:	86 a7       	std	Z+46, r24	; 0x2e
    3480:	22 8d       	ldd	r18, Z+26	; 0x1a
    3482:	95 a5       	ldd	r25, Z+45	; 0x2d
    3484:	29 17       	cp	r18, r25
    3486:	09 f4       	brne	.+2      	; 0x348a <xTaskPriorityDisinherit+0x20>
    3488:	43 c0       	rjmp	.+134    	; 0x3510 <xTaskPriorityDisinherit+0xa6>
    348a:	81 11       	cpse	r24, r1
    348c:	43 c0       	rjmp	.+134    	; 0x3514 <xTaskPriorityDisinherit+0xaa>
    348e:	ef 01       	movw	r28, r30
    3490:	8f 01       	movw	r16, r30
    3492:	0e 5f       	subi	r16, 0xFE	; 254
    3494:	1f 4f       	sbci	r17, 0xFF	; 255
    3496:	c8 01       	movw	r24, r16
    3498:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
    349c:	ed a5       	ldd	r30, Y+45	; 0x2d
    349e:	ea 8f       	std	Y+26, r30	; 0x1a
    34a0:	8a e0       	ldi	r24, 0x0A	; 10
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	a0 e0       	ldi	r26, 0x00	; 0
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	8e 1b       	sub	r24, r30
    34aa:	91 09       	sbc	r25, r1
    34ac:	a1 09       	sbc	r26, r1
    34ae:	b1 09       	sbc	r27, r1
    34b0:	8e 87       	std	Y+14, r24	; 0x0e
    34b2:	9f 87       	std	Y+15, r25	; 0x0f
    34b4:	a8 8b       	std	Y+16, r26	; 0x10
    34b6:	b9 8b       	std	Y+17, r27	; 0x11
    34b8:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    34bc:	8e 17       	cp	r24, r30
    34be:	10 f4       	brcc	.+4      	; 0x34c4 <xTaskPriorityDisinherit+0x5a>
    34c0:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    34c4:	8b e0       	ldi	r24, 0x0B	; 11
    34c6:	8e 9f       	mul	r24, r30
    34c8:	f0 01       	movw	r30, r0
    34ca:	11 24       	eor	r1, r1
    34cc:	e5 5c       	subi	r30, 0xC5	; 197
    34ce:	fc 4e       	sbci	r31, 0xEC	; 236
    34d0:	01 80       	ldd	r0, Z+1	; 0x01
    34d2:	f2 81       	ldd	r31, Z+2	; 0x02
    34d4:	e0 2d       	mov	r30, r0
    34d6:	ff 83       	std	Y+7, r31	; 0x07
    34d8:	ee 83       	std	Y+6, r30	; 0x06
    34da:	26 81       	ldd	r18, Z+6	; 0x06
    34dc:	37 81       	ldd	r19, Z+7	; 0x07
    34de:	39 87       	std	Y+9, r19	; 0x09
    34e0:	28 87       	std	Y+8, r18	; 0x08
    34e2:	a6 81       	ldd	r26, Z+6	; 0x06
    34e4:	b7 81       	ldd	r27, Z+7	; 0x07
    34e6:	15 96       	adiw	r26, 0x05	; 5
    34e8:	1c 93       	st	X, r17
    34ea:	0e 93       	st	-X, r16
    34ec:	14 97       	sbiw	r26, 0x04	; 4
    34ee:	17 83       	std	Z+7, r17	; 0x07
    34f0:	06 83       	std	Z+6, r16	; 0x06
    34f2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    34f4:	8e 9f       	mul	r24, r30
    34f6:	f0 01       	movw	r30, r0
    34f8:	11 24       	eor	r1, r1
    34fa:	e5 5c       	subi	r30, 0xC5	; 197
    34fc:	fc 4e       	sbci	r31, 0xEC	; 236
    34fe:	fd 87       	std	Y+13, r31	; 0x0d
    3500:	ec 87       	std	Y+12, r30	; 0x0c
    3502:	80 81       	ld	r24, Z
    3504:	8f 5f       	subi	r24, 0xFF	; 255
    3506:	80 83       	st	Z, r24
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	05 c0       	rjmp	.+10     	; 0x3516 <xTaskPriorityDisinherit+0xac>
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	03 c0       	rjmp	.+6      	; 0x3516 <xTaskPriorityDisinherit+0xac>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <xTaskPriorityDisinherit+0xac>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	df 91       	pop	r29
    3518:	cf 91       	pop	r28
    351a:	1f 91       	pop	r17
    351c:	0f 91       	pop	r16
    351e:	08 95       	ret

00003520 <vTaskPriorityDisinheritAfterTimeout>:
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	fc 01       	movw	r30, r24
    352a:	89 2b       	or	r24, r25
    352c:	09 f4       	brne	.+2      	; 0x3530 <vTaskPriorityDisinheritAfterTimeout+0x10>
    352e:	5a c0       	rjmp	.+180    	; 0x35e4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3530:	85 a5       	ldd	r24, Z+45	; 0x2d
    3532:	86 17       	cp	r24, r22
    3534:	08 f4       	brcc	.+2      	; 0x3538 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3536:	86 2f       	mov	r24, r22
    3538:	92 8d       	ldd	r25, Z+26	; 0x1a
    353a:	89 17       	cp	r24, r25
    353c:	09 f4       	brne	.+2      	; 0x3540 <vTaskPriorityDisinheritAfterTimeout+0x20>
    353e:	52 c0       	rjmp	.+164    	; 0x35e4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3540:	26 a5       	ldd	r18, Z+46	; 0x2e
    3542:	21 30       	cpi	r18, 0x01	; 1
    3544:	09 f0       	breq	.+2      	; 0x3548 <vTaskPriorityDisinheritAfterTimeout+0x28>
    3546:	4e c0       	rjmp	.+156    	; 0x35e4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3548:	82 8f       	std	Z+26, r24	; 0x1a
    354a:	46 85       	ldd	r20, Z+14	; 0x0e
    354c:	57 85       	ldd	r21, Z+15	; 0x0f
    354e:	60 89       	ldd	r22, Z+16	; 0x10
    3550:	71 89       	ldd	r23, Z+17	; 0x11
    3552:	77 23       	and	r23, r23
    3554:	64 f0       	brlt	.+24     	; 0x356e <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3556:	4a e0       	ldi	r20, 0x0A	; 10
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	60 e0       	ldi	r22, 0x00	; 0
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	48 1b       	sub	r20, r24
    3560:	51 09       	sbc	r21, r1
    3562:	61 09       	sbc	r22, r1
    3564:	71 09       	sbc	r23, r1
    3566:	46 87       	std	Z+14, r20	; 0x0e
    3568:	57 87       	std	Z+15, r21	; 0x0f
    356a:	60 8b       	std	Z+16, r22	; 0x10
    356c:	71 8b       	std	Z+17, r23	; 0x11
    356e:	24 85       	ldd	r18, Z+12	; 0x0c
    3570:	35 85       	ldd	r19, Z+13	; 0x0d
    3572:	4b e0       	ldi	r20, 0x0B	; 11
    3574:	94 9f       	mul	r25, r20
    3576:	c0 01       	movw	r24, r0
    3578:	11 24       	eor	r1, r1
    357a:	85 5c       	subi	r24, 0xC5	; 197
    357c:	9c 4e       	sbci	r25, 0xEC	; 236
    357e:	28 17       	cp	r18, r24
    3580:	39 07       	cpc	r19, r25
    3582:	81 f5       	brne	.+96     	; 0x35e4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3584:	ef 01       	movw	r28, r30
    3586:	8f 01       	movw	r16, r30
    3588:	0e 5f       	subi	r16, 0xFE	; 254
    358a:	1f 4f       	sbci	r17, 0xFF	; 255
    358c:	c8 01       	movw	r24, r16
    358e:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
    3592:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3594:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    3598:	8e 17       	cp	r24, r30
    359a:	10 f4       	brcc	.+4      	; 0x35a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
    359c:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    35a0:	8b e0       	ldi	r24, 0x0B	; 11
    35a2:	8e 9f       	mul	r24, r30
    35a4:	f0 01       	movw	r30, r0
    35a6:	11 24       	eor	r1, r1
    35a8:	e5 5c       	subi	r30, 0xC5	; 197
    35aa:	fc 4e       	sbci	r31, 0xEC	; 236
    35ac:	01 80       	ldd	r0, Z+1	; 0x01
    35ae:	f2 81       	ldd	r31, Z+2	; 0x02
    35b0:	e0 2d       	mov	r30, r0
    35b2:	ff 83       	std	Y+7, r31	; 0x07
    35b4:	ee 83       	std	Y+6, r30	; 0x06
    35b6:	26 81       	ldd	r18, Z+6	; 0x06
    35b8:	37 81       	ldd	r19, Z+7	; 0x07
    35ba:	39 87       	std	Y+9, r19	; 0x09
    35bc:	28 87       	std	Y+8, r18	; 0x08
    35be:	a6 81       	ldd	r26, Z+6	; 0x06
    35c0:	b7 81       	ldd	r27, Z+7	; 0x07
    35c2:	15 96       	adiw	r26, 0x05	; 5
    35c4:	1c 93       	st	X, r17
    35c6:	0e 93       	st	-X, r16
    35c8:	14 97       	sbiw	r26, 0x04	; 4
    35ca:	17 83       	std	Z+7, r17	; 0x07
    35cc:	06 83       	std	Z+6, r16	; 0x06
    35ce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    35d0:	8e 9f       	mul	r24, r30
    35d2:	f0 01       	movw	r30, r0
    35d4:	11 24       	eor	r1, r1
    35d6:	e5 5c       	subi	r30, 0xC5	; 197
    35d8:	fc 4e       	sbci	r31, 0xEC	; 236
    35da:	fd 87       	std	Y+13, r31	; 0x0d
    35dc:	ec 87       	std	Y+12, r30	; 0x0c
    35de:	80 81       	ld	r24, Z
    35e0:	8f 5f       	subi	r24, 0xFF	; 255
    35e2:	80 83       	st	Z, r24
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	08 95       	ret

000035ee <uxTaskResetEventItemValue>:
    35ee:	cf 92       	push	r12
    35f0:	df 92       	push	r13
    35f2:	ef 92       	push	r14
    35f4:	ff 92       	push	r15
    35f6:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    35fa:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    35fe:	66 85       	ldd	r22, Z+14	; 0x0e
    3600:	77 85       	ldd	r23, Z+15	; 0x0f
    3602:	80 89       	ldd	r24, Z+16	; 0x10
    3604:	91 89       	ldd	r25, Z+17	; 0x11
    3606:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    360a:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    360e:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3612:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3616:	5a 96       	adiw	r26, 0x1a	; 26
    3618:	2c 91       	ld	r18, X
    361a:	0f 2e       	mov	r0, r31
    361c:	fa e0       	ldi	r31, 0x0A	; 10
    361e:	cf 2e       	mov	r12, r31
    3620:	d1 2c       	mov	r13, r1
    3622:	e1 2c       	mov	r14, r1
    3624:	f1 2c       	mov	r15, r1
    3626:	f0 2d       	mov	r31, r0
    3628:	c2 1a       	sub	r12, r18
    362a:	d1 08       	sbc	r13, r1
    362c:	e1 08       	sbc	r14, r1
    362e:	f1 08       	sbc	r15, r1
    3630:	c6 86       	std	Z+14, r12	; 0x0e
    3632:	d7 86       	std	Z+15, r13	; 0x0f
    3634:	e0 8a       	std	Z+16, r14	; 0x10
    3636:	f1 8a       	std	Z+17, r15	; 0x11
    3638:	ff 90       	pop	r15
    363a:	ef 90       	pop	r14
    363c:	df 90       	pop	r13
    363e:	cf 90       	pop	r12
    3640:	08 95       	ret

00003642 <pvTaskIncrementMutexHeldCount>:
    3642:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3646:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    364a:	89 2b       	or	r24, r25
    364c:	39 f0       	breq	.+14     	; 0x365c <pvTaskIncrementMutexHeldCount+0x1a>
    364e:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3652:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3656:	86 a5       	ldd	r24, Z+46	; 0x2e
    3658:	8f 5f       	subi	r24, 0xFF	; 255
    365a:	86 a7       	std	Z+46, r24	; 0x2e
    365c:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3660:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3664:	08 95       	ret

00003666 <xTaskGenericNotifyWait>:
    3666:	4f 92       	push	r4
    3668:	5f 92       	push	r5
    366a:	6f 92       	push	r6
    366c:	7f 92       	push	r7
    366e:	af 92       	push	r10
    3670:	bf 92       	push	r11
    3672:	cf 92       	push	r12
    3674:	df 92       	push	r13
    3676:	ef 92       	push	r14
    3678:	ff 92       	push	r15
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	28 01       	movw	r4, r16
    3684:	39 01       	movw	r6, r18
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	0f 92       	push	r0
    368c:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3690:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3694:	c8 2f       	mov	r28, r24
    3696:	d0 e0       	ldi	r29, 0x00	; 0
    3698:	ec 0f       	add	r30, r28
    369a:	fd 1f       	adc	r31, r29
    369c:	83 a9       	ldd	r24, Z+51	; 0x33
    369e:	82 30       	cpi	r24, 0x02	; 2
    36a0:	79 f1       	breq	.+94     	; 0x3700 <xTaskGenericNotifyWait+0x9a>
    36a2:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    36a6:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    36aa:	ce 01       	movw	r24, r28
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	e8 0f       	add	r30, r24
    36b6:	f9 1f       	adc	r31, r25
    36b8:	87 a5       	ldd	r24, Z+47	; 0x2f
    36ba:	90 a9       	ldd	r25, Z+48	; 0x30
    36bc:	a1 a9       	ldd	r26, Z+49	; 0x31
    36be:	b2 a9       	ldd	r27, Z+50	; 0x32
    36c0:	40 95       	com	r20
    36c2:	50 95       	com	r21
    36c4:	60 95       	com	r22
    36c6:	70 95       	com	r23
    36c8:	48 23       	and	r20, r24
    36ca:	59 23       	and	r21, r25
    36cc:	6a 23       	and	r22, r26
    36ce:	7b 23       	and	r23, r27
    36d0:	47 a7       	std	Z+47, r20	; 0x2f
    36d2:	50 ab       	std	Z+48, r21	; 0x30
    36d4:	61 ab       	std	Z+49, r22	; 0x31
    36d6:	72 ab       	std	Z+50, r23	; 0x32
    36d8:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    36dc:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    36e0:	ec 0f       	add	r30, r28
    36e2:	fd 1f       	adc	r31, r29
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	83 ab       	std	Z+51, r24	; 0x33
    36e8:	a1 14       	cp	r10, r1
    36ea:	b1 04       	cpc	r11, r1
    36ec:	c1 04       	cpc	r12, r1
    36ee:	d1 04       	cpc	r13, r1
    36f0:	39 f0       	breq	.+14     	; 0x3700 <xTaskGenericNotifyWait+0x9a>
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	c6 01       	movw	r24, r12
    36f6:	b5 01       	movw	r22, r10
    36f8:	0e 94 f7 12 	call	0x25ee	; 0x25ee <prvAddCurrentTaskToDelayedList>
    36fc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    3700:	0f 90       	pop	r0
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	0f 92       	push	r0
    370a:	e1 14       	cp	r14, r1
    370c:	f1 04       	cpc	r15, r1
    370e:	a1 f0       	breq	.+40     	; 0x3738 <xTaskGenericNotifyWait+0xd2>
    3710:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3714:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3718:	ce 01       	movw	r24, r28
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	88 0f       	add	r24, r24
    3720:	99 1f       	adc	r25, r25
    3722:	e8 0f       	add	r30, r24
    3724:	f9 1f       	adc	r31, r25
    3726:	87 a5       	ldd	r24, Z+47	; 0x2f
    3728:	90 a9       	ldd	r25, Z+48	; 0x30
    372a:	a1 a9       	ldd	r26, Z+49	; 0x31
    372c:	b2 a9       	ldd	r27, Z+50	; 0x32
    372e:	f7 01       	movw	r30, r14
    3730:	80 83       	st	Z, r24
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	a2 83       	std	Z+2, r26	; 0x02
    3736:	b3 83       	std	Z+3, r27	; 0x03
    3738:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    373c:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3740:	ec 0f       	add	r30, r28
    3742:	fd 1f       	adc	r31, r29
    3744:	83 a9       	ldd	r24, Z+51	; 0x33
    3746:	82 30       	cpi	r24, 0x02	; 2
    3748:	e9 f4       	brne	.+58     	; 0x3784 <xTaskGenericNotifyWait+0x11e>
    374a:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    374e:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3752:	ce 01       	movw	r24, r28
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	88 0f       	add	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	e8 0f       	add	r30, r24
    375e:	f9 1f       	adc	r31, r25
    3760:	87 a5       	ldd	r24, Z+47	; 0x2f
    3762:	90 a9       	ldd	r25, Z+48	; 0x30
    3764:	a1 a9       	ldd	r26, Z+49	; 0x31
    3766:	b2 a9       	ldd	r27, Z+50	; 0x32
    3768:	40 94       	com	r4
    376a:	50 94       	com	r5
    376c:	60 94       	com	r6
    376e:	70 94       	com	r7
    3770:	48 22       	and	r4, r24
    3772:	59 22       	and	r5, r25
    3774:	6a 22       	and	r6, r26
    3776:	7b 22       	and	r7, r27
    3778:	47 a6       	std	Z+47, r4	; 0x2f
    377a:	50 aa       	std	Z+48, r5	; 0x30
    377c:	61 aa       	std	Z+49, r6	; 0x31
    377e:	72 aa       	std	Z+50, r7	; 0x32
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	01 c0       	rjmp	.+2      	; 0x3786 <xTaskGenericNotifyWait+0x120>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	20 91 a9 13 	lds	r18, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    378a:	30 91 aa 13 	lds	r19, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    378e:	c2 0f       	add	r28, r18
    3790:	d3 1f       	adc	r29, r19
    3792:	1b aa       	std	Y+51, r1	; 0x33
    3794:	0f 90       	pop	r0
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
    37a8:	bf 90       	pop	r11
    37aa:	af 90       	pop	r10
    37ac:	7f 90       	pop	r7
    37ae:	6f 90       	pop	r6
    37b0:	5f 90       	pop	r5
    37b2:	4f 90       	pop	r4
    37b4:	08 95       	ret

000037b6 <xTaskGenericNotify>:
    37b6:	8f 92       	push	r8
    37b8:	9f 92       	push	r9
    37ba:	af 92       	push	r10
    37bc:	bf 92       	push	r11
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	dc 01       	movw	r26, r24
    37ca:	0f b6       	in	r0, 0x3f	; 63
    37cc:	f8 94       	cli
    37ce:	0f 92       	push	r0
    37d0:	e1 14       	cp	r14, r1
    37d2:	f1 04       	cpc	r15, r1
    37d4:	89 f0       	breq	.+34     	; 0x37f8 <xTaskGenericNotify+0x42>
    37d6:	e6 2f       	mov	r30, r22
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	ee 0f       	add	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	ee 0f       	add	r30, r30
    37e0:	ff 1f       	adc	r31, r31
    37e2:	e8 0f       	add	r30, r24
    37e4:	f9 1f       	adc	r31, r25
    37e6:	87 a4       	ldd	r8, Z+47	; 0x2f
    37e8:	90 a8       	ldd	r9, Z+48	; 0x30
    37ea:	a1 a8       	ldd	r10, Z+49	; 0x31
    37ec:	b2 a8       	ldd	r11, Z+50	; 0x32
    37ee:	f7 01       	movw	r30, r14
    37f0:	80 82       	st	Z, r8
    37f2:	91 82       	std	Z+1, r9	; 0x01
    37f4:	a2 82       	std	Z+2, r10	; 0x02
    37f6:	b3 82       	std	Z+3, r11	; 0x03
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	fd 01       	movw	r30, r26
    37fc:	e6 0f       	add	r30, r22
    37fe:	f7 1f       	adc	r31, r23
    3800:	83 a9       	ldd	r24, Z+51	; 0x33
    3802:	92 e0       	ldi	r25, 0x02	; 2
    3804:	93 ab       	std	Z+51, r25	; 0x33
    3806:	02 30       	cpi	r16, 0x02	; 2
    3808:	01 f1       	breq	.+64     	; 0x384a <xTaskGenericNotify+0x94>
    380a:	18 f4       	brcc	.+6      	; 0x3812 <xTaskGenericNotify+0x5c>
    380c:	01 30       	cpi	r16, 0x01	; 1
    380e:	31 f0       	breq	.+12     	; 0x381c <xTaskGenericNotify+0x66>
    3810:	4d c0       	rjmp	.+154    	; 0x38ac <xTaskGenericNotify+0xf6>
    3812:	03 30       	cpi	r16, 0x03	; 3
    3814:	79 f1       	breq	.+94     	; 0x3874 <xTaskGenericNotify+0xbe>
    3816:	04 30       	cpi	r16, 0x04	; 4
    3818:	d1 f1       	breq	.+116    	; 0x388e <xTaskGenericNotify+0xd8>
    381a:	48 c0       	rjmp	.+144    	; 0x38ac <xTaskGenericNotify+0xf6>
    381c:	66 0f       	add	r22, r22
    381e:	77 1f       	adc	r23, r23
    3820:	66 0f       	add	r22, r22
    3822:	77 1f       	adc	r23, r23
    3824:	fd 01       	movw	r30, r26
    3826:	e6 0f       	add	r30, r22
    3828:	f7 1f       	adc	r31, r23
    382a:	87 a4       	ldd	r8, Z+47	; 0x2f
    382c:	90 a8       	ldd	r9, Z+48	; 0x30
    382e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3830:	b2 a8       	ldd	r11, Z+50	; 0x32
    3832:	ba 01       	movw	r22, r20
    3834:	a9 01       	movw	r20, r18
    3836:	48 29       	or	r20, r8
    3838:	59 29       	or	r21, r9
    383a:	6a 29       	or	r22, r10
    383c:	7b 29       	or	r23, r11
    383e:	47 a7       	std	Z+47, r20	; 0x2f
    3840:	50 ab       	std	Z+48, r21	; 0x30
    3842:	61 ab       	std	Z+49, r22	; 0x31
    3844:	72 ab       	std	Z+50, r23	; 0x32
    3846:	01 e0       	ldi	r16, 0x01	; 1
    3848:	34 c0       	rjmp	.+104    	; 0x38b2 <xTaskGenericNotify+0xfc>
    384a:	66 0f       	add	r22, r22
    384c:	77 1f       	adc	r23, r23
    384e:	66 0f       	add	r22, r22
    3850:	77 1f       	adc	r23, r23
    3852:	fd 01       	movw	r30, r26
    3854:	e6 0f       	add	r30, r22
    3856:	f7 1f       	adc	r31, r23
    3858:	47 a5       	ldd	r20, Z+47	; 0x2f
    385a:	50 a9       	ldd	r21, Z+48	; 0x30
    385c:	61 a9       	ldd	r22, Z+49	; 0x31
    385e:	72 a9       	ldd	r23, Z+50	; 0x32
    3860:	4f 5f       	subi	r20, 0xFF	; 255
    3862:	5f 4f       	sbci	r21, 0xFF	; 255
    3864:	6f 4f       	sbci	r22, 0xFF	; 255
    3866:	7f 4f       	sbci	r23, 0xFF	; 255
    3868:	47 a7       	std	Z+47, r20	; 0x2f
    386a:	50 ab       	std	Z+48, r21	; 0x30
    386c:	61 ab       	std	Z+49, r22	; 0x31
    386e:	72 ab       	std	Z+50, r23	; 0x32
    3870:	01 e0       	ldi	r16, 0x01	; 1
    3872:	1f c0       	rjmp	.+62     	; 0x38b2 <xTaskGenericNotify+0xfc>
    3874:	66 0f       	add	r22, r22
    3876:	77 1f       	adc	r23, r23
    3878:	66 0f       	add	r22, r22
    387a:	77 1f       	adc	r23, r23
    387c:	fd 01       	movw	r30, r26
    387e:	e6 0f       	add	r30, r22
    3880:	f7 1f       	adc	r31, r23
    3882:	27 a7       	std	Z+47, r18	; 0x2f
    3884:	30 ab       	std	Z+48, r19	; 0x30
    3886:	41 ab       	std	Z+49, r20	; 0x31
    3888:	52 ab       	std	Z+50, r21	; 0x32
    388a:	01 e0       	ldi	r16, 0x01	; 1
    388c:	12 c0       	rjmp	.+36     	; 0x38b2 <xTaskGenericNotify+0xfc>
    388e:	82 30       	cpi	r24, 0x02	; 2
    3890:	79 f0       	breq	.+30     	; 0x38b0 <xTaskGenericNotify+0xfa>
    3892:	66 0f       	add	r22, r22
    3894:	77 1f       	adc	r23, r23
    3896:	66 0f       	add	r22, r22
    3898:	77 1f       	adc	r23, r23
    389a:	fd 01       	movw	r30, r26
    389c:	e6 0f       	add	r30, r22
    389e:	f7 1f       	adc	r31, r23
    38a0:	27 a7       	std	Z+47, r18	; 0x2f
    38a2:	30 ab       	std	Z+48, r19	; 0x30
    38a4:	41 ab       	std	Z+49, r20	; 0x31
    38a6:	52 ab       	std	Z+50, r21	; 0x32
    38a8:	01 e0       	ldi	r16, 0x01	; 1
    38aa:	03 c0       	rjmp	.+6      	; 0x38b2 <xTaskGenericNotify+0xfc>
    38ac:	01 e0       	ldi	r16, 0x01	; 1
    38ae:	01 c0       	rjmp	.+2      	; 0x38b2 <xTaskGenericNotify+0xfc>
    38b0:	00 e0       	ldi	r16, 0x00	; 0
    38b2:	81 30       	cpi	r24, 0x01	; 1
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <xTaskGenericNotify+0x102>
    38b6:	69 c0       	rjmp	.+210    	; 0x398a <xTaskGenericNotify+0x1d4>
    38b8:	1c 96       	adiw	r26, 0x0c	; 12
    38ba:	ed 91       	ld	r30, X+
    38bc:	fc 91       	ld	r31, X
    38be:	1d 97       	sbiw	r26, 0x0d	; 13
    38c0:	16 96       	adiw	r26, 0x06	; 6
    38c2:	cd 91       	ld	r28, X+
    38c4:	dc 91       	ld	r29, X
    38c6:	17 97       	sbiw	r26, 0x07	; 7
    38c8:	18 96       	adiw	r26, 0x08	; 8
    38ca:	8d 91       	ld	r24, X+
    38cc:	9c 91       	ld	r25, X
    38ce:	19 97       	sbiw	r26, 0x09	; 9
    38d0:	9f 83       	std	Y+7, r25	; 0x07
    38d2:	8e 83       	std	Y+6, r24	; 0x06
    38d4:	18 96       	adiw	r26, 0x08	; 8
    38d6:	cd 91       	ld	r28, X+
    38d8:	dc 91       	ld	r29, X
    38da:	19 97       	sbiw	r26, 0x09	; 9
    38dc:	16 96       	adiw	r26, 0x06	; 6
    38de:	8d 91       	ld	r24, X+
    38e0:	9c 91       	ld	r25, X
    38e2:	17 97       	sbiw	r26, 0x07	; 7
    38e4:	9d 83       	std	Y+5, r25	; 0x05
    38e6:	8c 83       	std	Y+4, r24	; 0x04
    38e8:	81 81       	ldd	r24, Z+1	; 0x01
    38ea:	92 81       	ldd	r25, Z+2	; 0x02
    38ec:	9d 01       	movw	r18, r26
    38ee:	2e 5f       	subi	r18, 0xFE	; 254
    38f0:	3f 4f       	sbci	r19, 0xFF	; 255
    38f2:	82 17       	cp	r24, r18
    38f4:	93 07       	cpc	r25, r19
    38f6:	31 f4       	brne	.+12     	; 0x3904 <xTaskGenericNotify+0x14e>
    38f8:	18 96       	adiw	r26, 0x08	; 8
    38fa:	8d 91       	ld	r24, X+
    38fc:	9c 91       	ld	r25, X
    38fe:	19 97       	sbiw	r26, 0x09	; 9
    3900:	92 83       	std	Z+2, r25	; 0x02
    3902:	81 83       	std	Z+1, r24	; 0x01
    3904:	1d 96       	adiw	r26, 0x0d	; 13
    3906:	1c 92       	st	X, r1
    3908:	1e 92       	st	-X, r1
    390a:	1c 97       	sbiw	r26, 0x0c	; 12
    390c:	80 81       	ld	r24, Z
    390e:	81 50       	subi	r24, 0x01	; 1
    3910:	80 83       	st	Z, r24
    3912:	5a 96       	adiw	r26, 0x1a	; 26
    3914:	ec 91       	ld	r30, X
    3916:	5a 97       	sbiw	r26, 0x1a	; 26
    3918:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    391c:	8e 17       	cp	r24, r30
    391e:	10 f4       	brcc	.+4      	; 0x3924 <xTaskGenericNotify+0x16e>
    3920:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    3924:	8b e0       	ldi	r24, 0x0B	; 11
    3926:	8e 9f       	mul	r24, r30
    3928:	f0 01       	movw	r30, r0
    392a:	11 24       	eor	r1, r1
    392c:	e5 5c       	subi	r30, 0xC5	; 197
    392e:	fc 4e       	sbci	r31, 0xEC	; 236
    3930:	01 80       	ldd	r0, Z+1	; 0x01
    3932:	f2 81       	ldd	r31, Z+2	; 0x02
    3934:	e0 2d       	mov	r30, r0
    3936:	17 96       	adiw	r26, 0x07	; 7
    3938:	fc 93       	st	X, r31
    393a:	ee 93       	st	-X, r30
    393c:	16 97       	sbiw	r26, 0x06	; 6
    393e:	46 81       	ldd	r20, Z+6	; 0x06
    3940:	57 81       	ldd	r21, Z+7	; 0x07
    3942:	19 96       	adiw	r26, 0x09	; 9
    3944:	5c 93       	st	X, r21
    3946:	4e 93       	st	-X, r20
    3948:	18 97       	sbiw	r26, 0x08	; 8
    394a:	c6 81       	ldd	r28, Z+6	; 0x06
    394c:	d7 81       	ldd	r29, Z+7	; 0x07
    394e:	3d 83       	std	Y+5, r19	; 0x05
    3950:	2c 83       	std	Y+4, r18	; 0x04
    3952:	37 83       	std	Z+7, r19	; 0x07
    3954:	26 83       	std	Z+6, r18	; 0x06
    3956:	5a 96       	adiw	r26, 0x1a	; 26
    3958:	ec 91       	ld	r30, X
    395a:	5a 97       	sbiw	r26, 0x1a	; 26
    395c:	8e 9f       	mul	r24, r30
    395e:	f0 01       	movw	r30, r0
    3960:	11 24       	eor	r1, r1
    3962:	e5 5c       	subi	r30, 0xC5	; 197
    3964:	fc 4e       	sbci	r31, 0xEC	; 236
    3966:	1d 96       	adiw	r26, 0x0d	; 13
    3968:	fc 93       	st	X, r31
    396a:	ee 93       	st	-X, r30
    396c:	1c 97       	sbiw	r26, 0x0c	; 12
    396e:	80 81       	ld	r24, Z
    3970:	8f 5f       	subi	r24, 0xFF	; 255
    3972:	80 83       	st	Z, r24
    3974:	5a 96       	adiw	r26, 0x1a	; 26
    3976:	9c 91       	ld	r25, X
    3978:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    397c:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3980:	82 8d       	ldd	r24, Z+26	; 0x1a
    3982:	89 17       	cp	r24, r25
    3984:	10 f4       	brcc	.+4      	; 0x398a <xTaskGenericNotify+0x1d4>
    3986:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    398a:	0f 90       	pop	r0
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	80 2f       	mov	r24, r16
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	0f 91       	pop	r16
    3996:	ff 90       	pop	r15
    3998:	ef 90       	pop	r14
    399a:	bf 90       	pop	r11
    399c:	af 90       	pop	r10
    399e:	9f 90       	pop	r9
    39a0:	8f 90       	pop	r8
    39a2:	08 95       	ret

000039a4 <xTaskGenericNotifyFromISR>:
    39a4:	8f 92       	push	r8
    39a6:	9f 92       	push	r9
    39a8:	af 92       	push	r10
    39aa:	bf 92       	push	r11
    39ac:	cf 92       	push	r12
    39ae:	df 92       	push	r13
    39b0:	ef 92       	push	r14
    39b2:	ff 92       	push	r15
    39b4:	0f 93       	push	r16
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	dc 01       	movw	r26, r24
    39bc:	e1 14       	cp	r14, r1
    39be:	f1 04       	cpc	r15, r1
    39c0:	89 f0       	breq	.+34     	; 0x39e4 <xTaskGenericNotifyFromISR+0x40>
    39c2:	e6 2f       	mov	r30, r22
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	ee 0f       	add	r30, r30
    39c8:	ff 1f       	adc	r31, r31
    39ca:	ee 0f       	add	r30, r30
    39cc:	ff 1f       	adc	r31, r31
    39ce:	e8 0f       	add	r30, r24
    39d0:	f9 1f       	adc	r31, r25
    39d2:	87 a4       	ldd	r8, Z+47	; 0x2f
    39d4:	90 a8       	ldd	r9, Z+48	; 0x30
    39d6:	a1 a8       	ldd	r10, Z+49	; 0x31
    39d8:	b2 a8       	ldd	r11, Z+50	; 0x32
    39da:	f7 01       	movw	r30, r14
    39dc:	80 82       	st	Z, r8
    39de:	91 82       	std	Z+1, r9	; 0x01
    39e0:	a2 82       	std	Z+2, r10	; 0x02
    39e2:	b3 82       	std	Z+3, r11	; 0x03
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	fd 01       	movw	r30, r26
    39e8:	e6 0f       	add	r30, r22
    39ea:	f7 1f       	adc	r31, r23
    39ec:	93 a9       	ldd	r25, Z+51	; 0x33
    39ee:	82 e0       	ldi	r24, 0x02	; 2
    39f0:	83 ab       	std	Z+51, r24	; 0x33
    39f2:	02 30       	cpi	r16, 0x02	; 2
    39f4:	01 f1       	breq	.+64     	; 0x3a36 <xTaskGenericNotifyFromISR+0x92>
    39f6:	18 f4       	brcc	.+6      	; 0x39fe <xTaskGenericNotifyFromISR+0x5a>
    39f8:	01 30       	cpi	r16, 0x01	; 1
    39fa:	31 f0       	breq	.+12     	; 0x3a08 <xTaskGenericNotifyFromISR+0x64>
    39fc:	4d c0       	rjmp	.+154    	; 0x3a98 <xTaskGenericNotifyFromISR+0xf4>
    39fe:	03 30       	cpi	r16, 0x03	; 3
    3a00:	79 f1       	breq	.+94     	; 0x3a60 <xTaskGenericNotifyFromISR+0xbc>
    3a02:	04 30       	cpi	r16, 0x04	; 4
    3a04:	d1 f1       	breq	.+116    	; 0x3a7a <xTaskGenericNotifyFromISR+0xd6>
    3a06:	48 c0       	rjmp	.+144    	; 0x3a98 <xTaskGenericNotifyFromISR+0xf4>
    3a08:	66 0f       	add	r22, r22
    3a0a:	77 1f       	adc	r23, r23
    3a0c:	66 0f       	add	r22, r22
    3a0e:	77 1f       	adc	r23, r23
    3a10:	fd 01       	movw	r30, r26
    3a12:	e6 0f       	add	r30, r22
    3a14:	f7 1f       	adc	r31, r23
    3a16:	87 a4       	ldd	r8, Z+47	; 0x2f
    3a18:	90 a8       	ldd	r9, Z+48	; 0x30
    3a1a:	a1 a8       	ldd	r10, Z+49	; 0x31
    3a1c:	b2 a8       	ldd	r11, Z+50	; 0x32
    3a1e:	ba 01       	movw	r22, r20
    3a20:	a9 01       	movw	r20, r18
    3a22:	48 29       	or	r20, r8
    3a24:	59 29       	or	r21, r9
    3a26:	6a 29       	or	r22, r10
    3a28:	7b 29       	or	r23, r11
    3a2a:	47 a7       	std	Z+47, r20	; 0x2f
    3a2c:	50 ab       	std	Z+48, r21	; 0x30
    3a2e:	61 ab       	std	Z+49, r22	; 0x31
    3a30:	72 ab       	std	Z+50, r23	; 0x32
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	34 c0       	rjmp	.+104    	; 0x3a9e <xTaskGenericNotifyFromISR+0xfa>
    3a36:	66 0f       	add	r22, r22
    3a38:	77 1f       	adc	r23, r23
    3a3a:	66 0f       	add	r22, r22
    3a3c:	77 1f       	adc	r23, r23
    3a3e:	fd 01       	movw	r30, r26
    3a40:	e6 0f       	add	r30, r22
    3a42:	f7 1f       	adc	r31, r23
    3a44:	47 a5       	ldd	r20, Z+47	; 0x2f
    3a46:	50 a9       	ldd	r21, Z+48	; 0x30
    3a48:	61 a9       	ldd	r22, Z+49	; 0x31
    3a4a:	72 a9       	ldd	r23, Z+50	; 0x32
    3a4c:	4f 5f       	subi	r20, 0xFF	; 255
    3a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a50:	6f 4f       	sbci	r22, 0xFF	; 255
    3a52:	7f 4f       	sbci	r23, 0xFF	; 255
    3a54:	47 a7       	std	Z+47, r20	; 0x2f
    3a56:	50 ab       	std	Z+48, r21	; 0x30
    3a58:	61 ab       	std	Z+49, r22	; 0x31
    3a5a:	72 ab       	std	Z+50, r23	; 0x32
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	1f c0       	rjmp	.+62     	; 0x3a9e <xTaskGenericNotifyFromISR+0xfa>
    3a60:	66 0f       	add	r22, r22
    3a62:	77 1f       	adc	r23, r23
    3a64:	66 0f       	add	r22, r22
    3a66:	77 1f       	adc	r23, r23
    3a68:	fd 01       	movw	r30, r26
    3a6a:	e6 0f       	add	r30, r22
    3a6c:	f7 1f       	adc	r31, r23
    3a6e:	27 a7       	std	Z+47, r18	; 0x2f
    3a70:	30 ab       	std	Z+48, r19	; 0x30
    3a72:	41 ab       	std	Z+49, r20	; 0x31
    3a74:	52 ab       	std	Z+50, r21	; 0x32
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	12 c0       	rjmp	.+36     	; 0x3a9e <xTaskGenericNotifyFromISR+0xfa>
    3a7a:	92 30       	cpi	r25, 0x02	; 2
    3a7c:	79 f0       	breq	.+30     	; 0x3a9c <xTaskGenericNotifyFromISR+0xf8>
    3a7e:	66 0f       	add	r22, r22
    3a80:	77 1f       	adc	r23, r23
    3a82:	66 0f       	add	r22, r22
    3a84:	77 1f       	adc	r23, r23
    3a86:	fd 01       	movw	r30, r26
    3a88:	e6 0f       	add	r30, r22
    3a8a:	f7 1f       	adc	r31, r23
    3a8c:	27 a7       	std	Z+47, r18	; 0x2f
    3a8e:	30 ab       	std	Z+48, r19	; 0x30
    3a90:	41 ab       	std	Z+49, r20	; 0x31
    3a92:	52 ab       	std	Z+50, r21	; 0x32
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	03 c0       	rjmp	.+6      	; 0x3a9e <xTaskGenericNotifyFromISR+0xfa>
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	01 c0       	rjmp	.+2      	; 0x3a9e <xTaskGenericNotifyFromISR+0xfa>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	91 30       	cpi	r25, 0x01	; 1
    3aa0:	09 f0       	breq	.+2      	; 0x3aa4 <xTaskGenericNotifyFromISR+0x100>
    3aa2:	96 c0       	rjmp	.+300    	; 0x3bd0 <xTaskGenericNotifyFromISR+0x22c>
    3aa4:	90 91 ea 12 	lds	r25, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    3aa8:	91 11       	cpse	r25, r1
    3aaa:	5f c0       	rjmp	.+190    	; 0x3b6a <xTaskGenericNotifyFromISR+0x1c6>
    3aac:	1c 96       	adiw	r26, 0x0c	; 12
    3aae:	ed 91       	ld	r30, X+
    3ab0:	fc 91       	ld	r31, X
    3ab2:	1d 97       	sbiw	r26, 0x0d	; 13
    3ab4:	16 96       	adiw	r26, 0x06	; 6
    3ab6:	cd 91       	ld	r28, X+
    3ab8:	dc 91       	ld	r29, X
    3aba:	17 97       	sbiw	r26, 0x07	; 7
    3abc:	18 96       	adiw	r26, 0x08	; 8
    3abe:	2d 91       	ld	r18, X+
    3ac0:	3c 91       	ld	r19, X
    3ac2:	19 97       	sbiw	r26, 0x09	; 9
    3ac4:	3f 83       	std	Y+7, r19	; 0x07
    3ac6:	2e 83       	std	Y+6, r18	; 0x06
    3ac8:	18 96       	adiw	r26, 0x08	; 8
    3aca:	cd 91       	ld	r28, X+
    3acc:	dc 91       	ld	r29, X
    3ace:	19 97       	sbiw	r26, 0x09	; 9
    3ad0:	16 96       	adiw	r26, 0x06	; 6
    3ad2:	2d 91       	ld	r18, X+
    3ad4:	3c 91       	ld	r19, X
    3ad6:	17 97       	sbiw	r26, 0x07	; 7
    3ad8:	3d 83       	std	Y+5, r19	; 0x05
    3ada:	2c 83       	std	Y+4, r18	; 0x04
    3adc:	41 81       	ldd	r20, Z+1	; 0x01
    3ade:	52 81       	ldd	r21, Z+2	; 0x02
    3ae0:	9d 01       	movw	r18, r26
    3ae2:	2e 5f       	subi	r18, 0xFE	; 254
    3ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae6:	42 17       	cp	r20, r18
    3ae8:	53 07       	cpc	r21, r19
    3aea:	31 f4       	brne	.+12     	; 0x3af8 <xTaskGenericNotifyFromISR+0x154>
    3aec:	18 96       	adiw	r26, 0x08	; 8
    3aee:	4d 91       	ld	r20, X+
    3af0:	5c 91       	ld	r21, X
    3af2:	19 97       	sbiw	r26, 0x09	; 9
    3af4:	52 83       	std	Z+2, r21	; 0x02
    3af6:	41 83       	std	Z+1, r20	; 0x01
    3af8:	1d 96       	adiw	r26, 0x0d	; 13
    3afa:	1c 92       	st	X, r1
    3afc:	1e 92       	st	-X, r1
    3afe:	1c 97       	sbiw	r26, 0x0c	; 12
    3b00:	90 81       	ld	r25, Z
    3b02:	91 50       	subi	r25, 0x01	; 1
    3b04:	90 83       	st	Z, r25
    3b06:	5a 96       	adiw	r26, 0x1a	; 26
    3b08:	ec 91       	ld	r30, X
    3b0a:	5a 97       	sbiw	r26, 0x1a	; 26
    3b0c:	90 91 f9 12 	lds	r25, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    3b10:	9e 17       	cp	r25, r30
    3b12:	10 f4       	brcc	.+4      	; 0x3b18 <xTaskGenericNotifyFromISR+0x174>
    3b14:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    3b18:	9b e0       	ldi	r25, 0x0B	; 11
    3b1a:	9e 9f       	mul	r25, r30
    3b1c:	f0 01       	movw	r30, r0
    3b1e:	11 24       	eor	r1, r1
    3b20:	e5 5c       	subi	r30, 0xC5	; 197
    3b22:	fc 4e       	sbci	r31, 0xEC	; 236
    3b24:	01 80       	ldd	r0, Z+1	; 0x01
    3b26:	f2 81       	ldd	r31, Z+2	; 0x02
    3b28:	e0 2d       	mov	r30, r0
    3b2a:	17 96       	adiw	r26, 0x07	; 7
    3b2c:	fc 93       	st	X, r31
    3b2e:	ee 93       	st	-X, r30
    3b30:	16 97       	sbiw	r26, 0x06	; 6
    3b32:	46 81       	ldd	r20, Z+6	; 0x06
    3b34:	57 81       	ldd	r21, Z+7	; 0x07
    3b36:	19 96       	adiw	r26, 0x09	; 9
    3b38:	5c 93       	st	X, r21
    3b3a:	4e 93       	st	-X, r20
    3b3c:	18 97       	sbiw	r26, 0x08	; 8
    3b3e:	c6 81       	ldd	r28, Z+6	; 0x06
    3b40:	d7 81       	ldd	r29, Z+7	; 0x07
    3b42:	3d 83       	std	Y+5, r19	; 0x05
    3b44:	2c 83       	std	Y+4, r18	; 0x04
    3b46:	37 83       	std	Z+7, r19	; 0x07
    3b48:	26 83       	std	Z+6, r18	; 0x06
    3b4a:	5a 96       	adiw	r26, 0x1a	; 26
    3b4c:	ec 91       	ld	r30, X
    3b4e:	5a 97       	sbiw	r26, 0x1a	; 26
    3b50:	9e 9f       	mul	r25, r30
    3b52:	f0 01       	movw	r30, r0
    3b54:	11 24       	eor	r1, r1
    3b56:	e5 5c       	subi	r30, 0xC5	; 197
    3b58:	fc 4e       	sbci	r31, 0xEC	; 236
    3b5a:	1d 96       	adiw	r26, 0x0d	; 13
    3b5c:	fc 93       	st	X, r31
    3b5e:	ee 93       	st	-X, r30
    3b60:	1c 97       	sbiw	r26, 0x0c	; 12
    3b62:	90 81       	ld	r25, Z
    3b64:	9f 5f       	subi	r25, 0xFF	; 255
    3b66:	90 83       	st	Z, r25
    3b68:	21 c0       	rjmp	.+66     	; 0x3bac <xTaskGenericNotifyFromISR+0x208>
    3b6a:	66 e1       	ldi	r22, 0x16	; 22
    3b6c:	73 e1       	ldi	r23, 0x13	; 19
    3b6e:	fb 01       	movw	r30, r22
    3b70:	c1 81       	ldd	r28, Z+1	; 0x01
    3b72:	d2 81       	ldd	r29, Z+2	; 0x02
    3b74:	53 96       	adiw	r26, 0x13	; 19
    3b76:	dc 93       	st	X, r29
    3b78:	ce 93       	st	-X, r28
    3b7a:	52 97       	sbiw	r26, 0x12	; 18
    3b7c:	2e 81       	ldd	r18, Y+6	; 0x06
    3b7e:	3f 81       	ldd	r19, Y+7	; 0x07
    3b80:	55 96       	adiw	r26, 0x15	; 21
    3b82:	3c 93       	st	X, r19
    3b84:	2e 93       	st	-X, r18
    3b86:	54 97       	sbiw	r26, 0x14	; 20
    3b88:	4e 81       	ldd	r20, Y+6	; 0x06
    3b8a:	5f 81       	ldd	r21, Y+7	; 0x07
    3b8c:	9d 01       	movw	r18, r26
    3b8e:	22 5f       	subi	r18, 0xF2	; 242
    3b90:	3f 4f       	sbci	r19, 0xFF	; 255
    3b92:	fa 01       	movw	r30, r20
    3b94:	35 83       	std	Z+5, r19	; 0x05
    3b96:	24 83       	std	Z+4, r18	; 0x04
    3b98:	3f 83       	std	Y+7, r19	; 0x07
    3b9a:	2e 83       	std	Y+6, r18	; 0x06
    3b9c:	59 96       	adiw	r26, 0x19	; 25
    3b9e:	7c 93       	st	X, r23
    3ba0:	6e 93       	st	-X, r22
    3ba2:	58 97       	sbiw	r26, 0x18	; 24
    3ba4:	fb 01       	movw	r30, r22
    3ba6:	90 81       	ld	r25, Z
    3ba8:	9f 5f       	subi	r25, 0xFF	; 255
    3baa:	90 83       	st	Z, r25
    3bac:	5a 96       	adiw	r26, 0x1a	; 26
    3bae:	2c 91       	ld	r18, X
    3bb0:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3bb4:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    3bb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bba:	92 17       	cp	r25, r18
    3bbc:	48 f4       	brcc	.+18     	; 0x3bd0 <xTaskGenericNotifyFromISR+0x22c>
    3bbe:	c1 14       	cp	r12, r1
    3bc0:	d1 04       	cpc	r13, r1
    3bc2:	19 f0       	breq	.+6      	; 0x3bca <xTaskGenericNotifyFromISR+0x226>
    3bc4:	91 e0       	ldi	r25, 0x01	; 1
    3bc6:	f6 01       	movw	r30, r12
    3bc8:	90 83       	st	Z, r25
    3bca:	91 e0       	ldi	r25, 0x01	; 1
    3bcc:	90 93 f3 12 	sts	0x12F3, r25	; 0x8012f3 <xYieldPending>
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	0f 91       	pop	r16
    3bd6:	ff 90       	pop	r15
    3bd8:	ef 90       	pop	r14
    3bda:	df 90       	pop	r13
    3bdc:	cf 90       	pop	r12
    3bde:	bf 90       	pop	r11
    3be0:	af 90       	pop	r10
    3be2:	9f 90       	pop	r9
    3be4:	8f 90       	pop	r8
    3be6:	08 95       	ret

00003be8 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3be8:	00 97       	sbiw	r24, 0x00	; 0
    3bea:	21 f4       	brne	.+8      	; 0x3bf4 <xTaskGenericNotifyStateClear+0xc>
    3bec:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    3bf0:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	e6 0f       	add	r30, r22
    3c00:	f7 1f       	adc	r31, r23
    3c02:	23 a9       	ldd	r18, Z+51	; 0x33
    3c04:	22 30       	cpi	r18, 0x02	; 2
    3c06:	31 f4       	brne	.+12     	; 0x3c14 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3c08:	fc 01       	movw	r30, r24
    3c0a:	e6 0f       	add	r30, r22
    3c0c:	f7 1f       	adc	r31, r23
    3c0e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	01 c0       	rjmp	.+2      	; 0x3c16 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3c14:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3c16:	0f 90       	pop	r0
    3c18:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3c1a:	08 95       	ret

00003c1c <prvGetNextExpireTime>:
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    3c22:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    3c26:	80 81       	ld	r24, Z
    3c28:	91 e0       	ldi	r25, 0x01	; 1
    3c2a:	81 11       	cpse	r24, r1
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	9c 93       	st	X, r25
    3c30:	91 11       	cpse	r25, r1
    3c32:	08 c0       	rjmp	.+16     	; 0x3c44 <prvGetNextExpireTime+0x28>
    3c34:	07 80       	ldd	r0, Z+7	; 0x07
    3c36:	f0 85       	ldd	r31, Z+8	; 0x08
    3c38:	e0 2d       	mov	r30, r0
    3c3a:	60 81       	ld	r22, Z
    3c3c:	71 81       	ldd	r23, Z+1	; 0x01
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	08 95       	ret
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	cb 01       	movw	r24, r22
    3c4a:	08 95       	ret

00003c4c <prvInsertTimerInActiveList>:
    3c4c:	cf 92       	push	r12
    3c4e:	df 92       	push	r13
    3c50:	ef 92       	push	r14
    3c52:	ff 92       	push	r15
    3c54:	0f 93       	push	r16
    3c56:	1f 93       	push	r17
    3c58:	fc 01       	movw	r30, r24
    3c5a:	42 83       	std	Z+2, r20	; 0x02
    3c5c:	53 83       	std	Z+3, r21	; 0x03
    3c5e:	64 83       	std	Z+4, r22	; 0x04
    3c60:	75 83       	std	Z+5, r23	; 0x05
    3c62:	93 87       	std	Z+11, r25	; 0x0b
    3c64:	82 87       	std	Z+10, r24	; 0x0a
    3c66:	04 17       	cp	r16, r20
    3c68:	15 07       	cpc	r17, r21
    3c6a:	26 07       	cpc	r18, r22
    3c6c:	37 07       	cpc	r19, r23
    3c6e:	c0 f0       	brcs	.+48     	; 0x3ca0 <prvInsertTimerInActiveList+0x54>
    3c70:	0c 19       	sub	r16, r12
    3c72:	1d 09       	sbc	r17, r13
    3c74:	2e 09       	sbc	r18, r14
    3c76:	3f 09       	sbc	r19, r15
    3c78:	86 85       	ldd	r24, Z+14	; 0x0e
    3c7a:	97 85       	ldd	r25, Z+15	; 0x0f
    3c7c:	a0 89       	ldd	r26, Z+16	; 0x10
    3c7e:	b1 89       	ldd	r27, Z+17	; 0x11
    3c80:	08 17       	cp	r16, r24
    3c82:	19 07       	cpc	r17, r25
    3c84:	2a 07       	cpc	r18, r26
    3c86:	3b 07       	cpc	r19, r27
    3c88:	00 f5       	brcc	.+64     	; 0x3cca <prvInsertTimerInActiveList+0x7e>
    3c8a:	bf 01       	movw	r22, r30
    3c8c:	6e 5f       	subi	r22, 0xFE	; 254
    3c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c90:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <pxOverflowTimerList>
    3c94:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <pxOverflowTimerList+0x1>
    3c98:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	18 c0       	rjmp	.+48     	; 0x3cd0 <prvInsertTimerInActiveList+0x84>
    3ca0:	0c 15       	cp	r16, r12
    3ca2:	1d 05       	cpc	r17, r13
    3ca4:	2e 05       	cpc	r18, r14
    3ca6:	3f 05       	cpc	r19, r15
    3ca8:	28 f4       	brcc	.+10     	; 0x3cb4 <prvInsertTimerInActiveList+0x68>
    3caa:	4c 15       	cp	r20, r12
    3cac:	5d 05       	cpc	r21, r13
    3cae:	6e 05       	cpc	r22, r14
    3cb0:	7f 05       	cpc	r23, r15
    3cb2:	68 f4       	brcc	.+26     	; 0x3cce <prvInsertTimerInActiveList+0x82>
    3cb4:	bf 01       	movw	r22, r30
    3cb6:	6e 5f       	subi	r22, 0xFE	; 254
    3cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cba:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    3cbe:	90 91 b6 13 	lds	r25, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    3cc2:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	03 c0       	rjmp	.+6      	; 0x3cd0 <prvInsertTimerInActiveList+0x84>
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	01 c0       	rjmp	.+2      	; 0x3cd0 <prvInsertTimerInActiveList+0x84>
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	1f 91       	pop	r17
    3cd2:	0f 91       	pop	r16
    3cd4:	ff 90       	pop	r15
    3cd6:	ef 90       	pop	r14
    3cd8:	df 90       	pop	r13
    3cda:	cf 90       	pop	r12
    3cdc:	08 95       	ret

00003cde <prvCheckForValidListAndQueue>:
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	0f 92       	push	r0
    3ce4:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    3ce8:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    3cec:	89 2b       	or	r24, r25
    3cee:	e9 f4       	brne	.+58     	; 0x3d2a <prvCheckForValidListAndQueue+0x4c>
    3cf0:	82 ec       	ldi	r24, 0xC2	; 194
    3cf2:	93 e1       	ldi	r25, 0x13	; 19
    3cf4:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    3cf8:	87 eb       	ldi	r24, 0xB7	; 183
    3cfa:	93 e1       	ldi	r25, 0x13	; 19
    3cfc:	0e 94 23 09 	call	0x1246	; 0x1246 <vListInitialise>
    3d00:	82 ec       	ldi	r24, 0xC2	; 194
    3d02:	93 e1       	ldi	r25, 0x13	; 19
    3d04:	90 93 b6 13 	sts	0x13B6, r25	; 0x8013b6 <pxCurrentTimerList+0x1>
    3d08:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <pxCurrentTimerList>
    3d0c:	87 eb       	ldi	r24, 0xB7	; 183
    3d0e:	93 e1       	ldi	r25, 0x13	; 19
    3d10:	90 93 b4 13 	sts	0x13B4, r25	; 0x8013b4 <pxOverflowTimerList+0x1>
    3d14:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <pxOverflowTimerList>
    3d18:	40 e0       	ldi	r20, 0x00	; 0
    3d1a:	67 e0       	ldi	r22, 0x07	; 7
    3d1c:	8a e0       	ldi	r24, 0x0A	; 10
    3d1e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <xQueueGenericCreate>
    3d22:	90 93 b2 13 	sts	0x13B2, r25	; 0x8013b2 <xTimerQueue+0x1>
    3d26:	80 93 b1 13 	sts	0x13B1, r24	; 0x8013b1 <xTimerQueue>
    3d2a:	0f 90       	pop	r0
    3d2c:	0f be       	out	0x3f, r0	; 63
    3d2e:	08 95       	ret

00003d30 <xTimerCreateTimerTask>:
    3d30:	ef 92       	push	r14
    3d32:	ff 92       	push	r15
    3d34:	0f 93       	push	r16
    3d36:	d3 df       	rcall	.-90     	; 0x3cde <prvCheckForValidListAndQueue>
    3d38:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    3d3c:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    3d40:	89 2b       	or	r24, r25
    3d42:	91 f0       	breq	.+36     	; 0x3d68 <xTimerCreateTimerTask+0x38>
    3d44:	0f 2e       	mov	r0, r31
    3d46:	ff ea       	ldi	r31, 0xAF	; 175
    3d48:	ef 2e       	mov	r14, r31
    3d4a:	f3 e1       	ldi	r31, 0x13	; 19
    3d4c:	ff 2e       	mov	r15, r31
    3d4e:	f0 2d       	mov	r31, r0
    3d50:	03 e0       	ldi	r16, 0x03	; 3
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	40 ec       	ldi	r20, 0xC0	; 192
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	65 e1       	ldi	r22, 0x15	; 21
    3d5c:	76 e0       	ldi	r23, 0x06	; 6
    3d5e:	89 e5       	ldi	r24, 0x59	; 89
    3d60:	91 e0       	ldi	r25, 0x01	; 1
    3d62:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
    3d66:	01 c0       	rjmp	.+2      	; 0x3d6a <xTimerCreateTimerTask+0x3a>
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	0f 91       	pop	r16
    3d6c:	ff 90       	pop	r15
    3d6e:	ef 90       	pop	r14
    3d70:	08 95       	ret

00003d72 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3d72:	8f 92       	push	r8
    3d74:	9f 92       	push	r9
    3d76:	af 92       	push	r10
    3d78:	bf 92       	push	r11
    3d7a:	cf 92       	push	r12
    3d7c:	df 92       	push	r13
    3d7e:	ef 92       	push	r14
    3d80:	ff 92       	push	r15
    3d82:	0f 93       	push	r16
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	27 97       	sbiw	r28, 0x07	; 7
    3d90:	0f b6       	in	r0, 0x3f	; 63
    3d92:	f8 94       	cli
    3d94:	de bf       	out	0x3e, r29	; 62
    3d96:	0f be       	out	0x3f, r0	; 63
    3d98:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3d9a:	e0 91 b1 13 	lds	r30, 0x13B1	; 0x8013b1 <xTimerQueue>
    3d9e:	f0 91 b2 13 	lds	r31, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    3da2:	30 97       	sbiw	r30, 0x00	; 0
    3da4:	81 f1       	breq	.+96     	; 0x3e06 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3da6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3da8:	2a 83       	std	Y+2, r18	; 0x02
    3daa:	3b 83       	std	Y+3, r19	; 0x03
    3dac:	4c 83       	std	Y+4, r20	; 0x04
    3dae:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3db0:	9f 83       	std	Y+7, r25	; 0x07
    3db2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3db4:	66 30       	cpi	r22, 0x06	; 6
    3db6:	f4 f4       	brge	.+60     	; 0x3df4 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3db8:	c3 da       	rcall	.-2682   	; 0x3340 <xTaskGetSchedulerState>
    3dba:	82 30       	cpi	r24, 0x02	; 2
    3dbc:	69 f4       	brne	.+26     	; 0x3dd8 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3dbe:	00 e0       	ldi	r16, 0x00	; 0
    3dc0:	a7 01       	movw	r20, r14
    3dc2:	96 01       	movw	r18, r12
    3dc4:	be 01       	movw	r22, r28
    3dc6:	6f 5f       	subi	r22, 0xFF	; 255
    3dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dca:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    3dce:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    3dd2:	0e 94 09 0c 	call	0x1812	; 0x1812 <xQueueGenericSend>
    3dd6:	18 c0       	rjmp	.+48     	; 0x3e08 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3dd8:	00 e0       	ldi	r16, 0x00	; 0
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	a9 01       	movw	r20, r18
    3de0:	be 01       	movw	r22, r28
    3de2:	6f 5f       	subi	r22, 0xFF	; 255
    3de4:	7f 4f       	sbci	r23, 0xFF	; 255
    3de6:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    3dea:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    3dee:	0e 94 09 0c 	call	0x1812	; 0x1812 <xQueueGenericSend>
    3df2:	0a c0       	rjmp	.+20     	; 0x3e08 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	a8 01       	movw	r20, r16
    3df8:	be 01       	movw	r22, r28
    3dfa:	6f 5f       	subi	r22, 0xFF	; 255
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	cf 01       	movw	r24, r30
    3e00:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xQueueGenericSendFromISR>
    3e04:	01 c0       	rjmp	.+2      	; 0x3e08 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3e06:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3e08:	27 96       	adiw	r28, 0x07	; 7
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	1f 91       	pop	r17
    3e1a:	0f 91       	pop	r16
    3e1c:	ff 90       	pop	r15
    3e1e:	ef 90       	pop	r14
    3e20:	df 90       	pop	r13
    3e22:	cf 90       	pop	r12
    3e24:	bf 90       	pop	r11
    3e26:	af 90       	pop	r10
    3e28:	9f 90       	pop	r9
    3e2a:	8f 90       	pop	r8
    3e2c:	08 95       	ret

00003e2e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3e2e:	8f 92       	push	r8
    3e30:	9f 92       	push	r9
    3e32:	af 92       	push	r10
    3e34:	bf 92       	push	r11
    3e36:	cf 92       	push	r12
    3e38:	df 92       	push	r13
    3e3a:	ef 92       	push	r14
    3e3c:	ff 92       	push	r15
    3e3e:	0f 93       	push	r16
    3e40:	1f 93       	push	r17
    3e42:	cf 93       	push	r28
    3e44:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3e46:	3b c0       	rjmp	.+118    	; 0x3ebe <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3e48:	07 80       	ldd	r0, Z+7	; 0x07
    3e4a:	f0 85       	ldd	r31, Z+8	; 0x08
    3e4c:	e0 2d       	mov	r30, r0
    3e4e:	80 80       	ld	r8, Z
    3e50:	91 80       	ldd	r9, Z+1	; 0x01
    3e52:	a2 80       	ldd	r10, Z+2	; 0x02
    3e54:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3e56:	c0 85       	ldd	r28, Z+8	; 0x08
    3e58:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3e5a:	8e 01       	movw	r16, r28
    3e5c:	0e 5f       	subi	r16, 0xFE	; 254
    3e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e60:	c8 01       	movw	r24, r16
    3e62:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e66:	ec 89       	ldd	r30, Y+20	; 0x14
    3e68:	fd 89       	ldd	r31, Y+21	; 0x15
    3e6a:	ce 01       	movw	r24, r28
    3e6c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3e6e:	8e 89       	ldd	r24, Y+22	; 0x16
    3e70:	82 ff       	sbrs	r24, 2
    3e72:	25 c0       	rjmp	.+74     	; 0x3ebe <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e78:	a8 89       	ldd	r26, Y+16	; 0x10
    3e7a:	b9 89       	ldd	r27, Y+17	; 0x11
    3e7c:	88 0d       	add	r24, r8
    3e7e:	99 1d       	adc	r25, r9
    3e80:	aa 1d       	adc	r26, r10
    3e82:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3e84:	88 16       	cp	r8, r24
    3e86:	99 06       	cpc	r9, r25
    3e88:	aa 06       	cpc	r10, r26
    3e8a:	bb 06       	cpc	r11, r27
    3e8c:	70 f4       	brcc	.+28     	; 0x3eaa <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3e8e:	8a 83       	std	Y+2, r24	; 0x02
    3e90:	9b 83       	std	Y+3, r25	; 0x03
    3e92:	ac 83       	std	Y+4, r26	; 0x04
    3e94:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3e96:	db 87       	std	Y+11, r29	; 0x0b
    3e98:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3e9a:	b8 01       	movw	r22, r16
    3e9c:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    3ea0:	90 91 b6 13 	lds	r25, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    3ea4:	0e 94 38 09 	call	0x1270	; 0x1270 <vListInsert>
    3ea8:	0a c0       	rjmp	.+20     	; 0x3ebe <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3eaa:	c1 2c       	mov	r12, r1
    3eac:	d1 2c       	mov	r13, r1
    3eae:	76 01       	movw	r14, r12
    3eb0:	00 e0       	ldi	r16, 0x00	; 0
    3eb2:	10 e0       	ldi	r17, 0x00	; 0
    3eb4:	a5 01       	movw	r20, r10
    3eb6:	94 01       	movw	r18, r8
    3eb8:	60 e0       	ldi	r22, 0x00	; 0
    3eba:	ce 01       	movw	r24, r28
    3ebc:	5a df       	rcall	.-332    	; 0x3d72 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ebe:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    3ec2:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    3ec6:	80 81       	ld	r24, Z
    3ec8:	81 11       	cpse	r24, r1
    3eca:	be cf       	rjmp	.-132    	; 0x3e48 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3ecc:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <pxOverflowTimerList>
    3ed0:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <pxOverflowTimerList+0x1>
    3ed4:	90 93 b6 13 	sts	0x13B6, r25	; 0x8013b6 <pxCurrentTimerList+0x1>
    3ed8:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3edc:	f0 93 b4 13 	sts	0x13B4, r31	; 0x8013b4 <pxOverflowTimerList+0x1>
    3ee0:	e0 93 b3 13 	sts	0x13B3, r30	; 0x8013b3 <pxOverflowTimerList>
    }
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	df 90       	pop	r13
    3ef2:	cf 90       	pop	r12
    3ef4:	bf 90       	pop	r11
    3ef6:	af 90       	pop	r10
    3ef8:	9f 90       	pop	r9
    3efa:	8f 90       	pop	r8
    3efc:	08 95       	ret

00003efe <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3efe:	cf 92       	push	r12
    3f00:	df 92       	push	r13
    3f02:	ef 92       	push	r14
    3f04:	ff 92       	push	r15
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3f0c:	0e 94 23 14 	call	0x2846	; 0x2846 <xTaskGetTickCount>
    3f10:	6b 01       	movw	r12, r22
    3f12:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3f14:	80 91 ab 13 	lds	r24, 0x13AB	; 0x8013ab <xLastTime.2436>
    3f18:	90 91 ac 13 	lds	r25, 0x13AC	; 0x8013ac <xLastTime.2436+0x1>
    3f1c:	a0 91 ad 13 	lds	r26, 0x13AD	; 0x8013ad <xLastTime.2436+0x2>
    3f20:	b0 91 ae 13 	lds	r27, 0x13AE	; 0x8013ae <xLastTime.2436+0x3>
    3f24:	c8 16       	cp	r12, r24
    3f26:	d9 06       	cpc	r13, r25
    3f28:	ea 06       	cpc	r14, r26
    3f2a:	fb 06       	cpc	r15, r27
    3f2c:	20 f4       	brcc	.+8      	; 0x3f36 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3f2e:	7f df       	rcall	.-258    	; 0x3e2e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	88 83       	st	Y, r24
    3f34:	01 c0       	rjmp	.+2      	; 0x3f38 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3f36:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3f38:	c0 92 ab 13 	sts	0x13AB, r12	; 0x8013ab <xLastTime.2436>
    3f3c:	d0 92 ac 13 	sts	0x13AC, r13	; 0x8013ac <xLastTime.2436+0x1>
    3f40:	e0 92 ad 13 	sts	0x13AD, r14	; 0x8013ad <xLastTime.2436+0x2>
    3f44:	f0 92 ae 13 	sts	0x13AE, r15	; 0x8013ae <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3f48:	c7 01       	movw	r24, r14
    3f4a:	b6 01       	movw	r22, r12
    3f4c:	df 91       	pop	r29
    3f4e:	cf 91       	pop	r28
    3f50:	ff 90       	pop	r15
    3f52:	ef 90       	pop	r14
    3f54:	df 90       	pop	r13
    3f56:	cf 90       	pop	r12
    3f58:	08 95       	ret

00003f5a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3f5a:	4f 92       	push	r4
    3f5c:	5f 92       	push	r5
    3f5e:	6f 92       	push	r6
    3f60:	7f 92       	push	r7
    3f62:	8f 92       	push	r8
    3f64:	9f 92       	push	r9
    3f66:	af 92       	push	r10
    3f68:	bf 92       	push	r11
    3f6a:	cf 92       	push	r12
    3f6c:	df 92       	push	r13
    3f6e:	ef 92       	push	r14
    3f70:	ff 92       	push	r15
    3f72:	0f 93       	push	r16
    3f74:	1f 93       	push	r17
    3f76:	cf 93       	push	r28
    3f78:	df 93       	push	r29
    3f7a:	4b 01       	movw	r8, r22
    3f7c:	5c 01       	movw	r10, r24
    3f7e:	29 01       	movw	r4, r18
    3f80:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3f82:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    3f86:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    3f8a:	07 80       	ldd	r0, Z+7	; 0x07
    3f8c:	f0 85       	ldd	r31, Z+8	; 0x08
    3f8e:	e0 2d       	mov	r30, r0
    3f90:	c0 85       	ldd	r28, Z+8	; 0x08
    3f92:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3f94:	ce 01       	movw	r24, r28
    3f96:	02 96       	adiw	r24, 0x02	; 2
    3f98:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3f9c:	8e 89       	ldd	r24, Y+22	; 0x16
    3f9e:	82 ff       	sbrs	r24, 2
    3fa0:	1b c0       	rjmp	.+54     	; 0x3fd8 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3fa2:	4e 85       	ldd	r20, Y+14	; 0x0e
    3fa4:	5f 85       	ldd	r21, Y+15	; 0x0f
    3fa6:	68 89       	ldd	r22, Y+16	; 0x10
    3fa8:	79 89       	ldd	r23, Y+17	; 0x11
    3faa:	48 0d       	add	r20, r8
    3fac:	59 1d       	adc	r21, r9
    3fae:	6a 1d       	adc	r22, r10
    3fb0:	7b 1d       	adc	r23, r11
    3fb2:	75 01       	movw	r14, r10
    3fb4:	64 01       	movw	r12, r8
    3fb6:	93 01       	movw	r18, r6
    3fb8:	82 01       	movw	r16, r4
    3fba:	ce 01       	movw	r24, r28
    3fbc:	47 de       	rcall	.-882    	; 0x3c4c <prvInsertTimerInActiveList>
    3fbe:	88 23       	and	r24, r24
    3fc0:	69 f0       	breq	.+26     	; 0x3fdc <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3fc2:	c1 2c       	mov	r12, r1
    3fc4:	d1 2c       	mov	r13, r1
    3fc6:	76 01       	movw	r14, r12
    3fc8:	00 e0       	ldi	r16, 0x00	; 0
    3fca:	10 e0       	ldi	r17, 0x00	; 0
    3fcc:	a5 01       	movw	r20, r10
    3fce:	94 01       	movw	r18, r8
    3fd0:	60 e0       	ldi	r22, 0x00	; 0
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	ce de       	rcall	.-612    	; 0x3d72 <xTimerGenericCommand>
    3fd6:	02 c0       	rjmp	.+4      	; 0x3fdc <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3fd8:	8e 7f       	andi	r24, 0xFE	; 254
    3fda:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3fdc:	ec 89       	ldd	r30, Y+20	; 0x14
    3fde:	fd 89       	ldd	r31, Y+21	; 0x15
    3fe0:	ce 01       	movw	r24, r28
    3fe2:	19 95       	eicall
    }
    3fe4:	df 91       	pop	r29
    3fe6:	cf 91       	pop	r28
    3fe8:	1f 91       	pop	r17
    3fea:	0f 91       	pop	r16
    3fec:	ff 90       	pop	r15
    3fee:	ef 90       	pop	r14
    3ff0:	df 90       	pop	r13
    3ff2:	cf 90       	pop	r12
    3ff4:	bf 90       	pop	r11
    3ff6:	af 90       	pop	r10
    3ff8:	9f 90       	pop	r9
    3ffa:	8f 90       	pop	r8
    3ffc:	7f 90       	pop	r7
    3ffe:	6f 90       	pop	r6
    4000:	5f 90       	pop	r5
    4002:	4f 90       	pop	r4
    4004:	08 95       	ret

00004006 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    4006:	8f 92       	push	r8
    4008:	9f 92       	push	r9
    400a:	af 92       	push	r10
    400c:	bf 92       	push	r11
    400e:	cf 92       	push	r12
    4010:	df 92       	push	r13
    4012:	ef 92       	push	r14
    4014:	ff 92       	push	r15
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	1f 92       	push	r1
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
    4022:	6b 01       	movw	r12, r22
    4024:	7c 01       	movw	r14, r24
    4026:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    4028:	0e 94 1d 14 	call	0x283a	; 0x283a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    402c:	ce 01       	movw	r24, r28
    402e:	01 96       	adiw	r24, 0x01	; 1
    4030:	66 df       	rcall	.-308    	; 0x3efe <prvSampleTimeNow>
    4032:	4b 01       	movw	r8, r22
    4034:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	81 11       	cpse	r24, r1
    403a:	2d c0       	rjmp	.+90     	; 0x4096 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    403c:	11 11       	cpse	r17, r1
    403e:	0d c0       	rjmp	.+26     	; 0x405a <prvProcessTimerOrBlockTask+0x54>
    4040:	8c 14       	cp	r8, r12
    4042:	9d 04       	cpc	r9, r13
    4044:	ae 04       	cpc	r10, r14
    4046:	bf 04       	cpc	r11, r15
    4048:	40 f0       	brcs	.+16     	; 0x405a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    404a:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    404e:	a5 01       	movw	r20, r10
    4050:	94 01       	movw	r18, r8
    4052:	c7 01       	movw	r24, r14
    4054:	b6 01       	movw	r22, r12
    4056:	81 df       	rcall	.-254    	; 0x3f5a <prvProcessExpiredTimer>
    4058:	20 c0       	rjmp	.+64     	; 0x409a <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    405a:	11 23       	and	r17, r17
    405c:	41 f0       	breq	.+16     	; 0x406e <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    405e:	e0 91 b3 13 	lds	r30, 0x13B3	; 0x8013b3 <pxOverflowTimerList>
    4062:	f0 91 b4 13 	lds	r31, 0x13B4	; 0x8013b4 <pxOverflowTimerList+0x1>
    4066:	80 81       	ld	r24, Z
    4068:	11 e0       	ldi	r17, 0x01	; 1
    406a:	81 11       	cpse	r24, r1
    406c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    406e:	b7 01       	movw	r22, r14
    4070:	a6 01       	movw	r20, r12
    4072:	48 19       	sub	r20, r8
    4074:	59 09       	sbc	r21, r9
    4076:	6a 09       	sbc	r22, r10
    4078:	7b 09       	sbc	r23, r11
    407a:	21 2f       	mov	r18, r17
    407c:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    4080:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    4084:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    4088:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
    408c:	81 11       	cpse	r24, r1
    408e:	05 c0       	rjmp	.+10     	; 0x409a <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    4090:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    4094:	02 c0       	rjmp	.+4      	; 0x409a <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    4096:	0e 94 5d 15 	call	0x2aba	; 0x2aba <xTaskResumeAll>
            }
        }
    }
    409a:	0f 90       	pop	r0
    409c:	df 91       	pop	r29
    409e:	cf 91       	pop	r28
    40a0:	1f 91       	pop	r17
    40a2:	ff 90       	pop	r15
    40a4:	ef 90       	pop	r14
    40a6:	df 90       	pop	r13
    40a8:	cf 90       	pop	r12
    40aa:	bf 90       	pop	r11
    40ac:	af 90       	pop	r10
    40ae:	9f 90       	pop	r9
    40b0:	8f 90       	pop	r8
    40b2:	08 95       	ret

000040b4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    40b4:	af 92       	push	r10
    40b6:	bf 92       	push	r11
    40b8:	cf 92       	push	r12
    40ba:	df 92       	push	r13
    40bc:	ef 92       	push	r14
    40be:	ff 92       	push	r15
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
    40cc:	28 97       	sbiw	r28, 0x08	; 8
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    40d8:	82 c0       	rjmp	.+260    	; 0x41de <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	88 23       	and	r24, r24
    40de:	0c f4       	brge	.+2      	; 0x40e2 <prvProcessReceivedCommands+0x2e>
    40e0:	7e c0       	rjmp	.+252    	; 0x41de <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    40e2:	ae 80       	ldd	r10, Y+6	; 0x06
    40e4:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    40e6:	d5 01       	movw	r26, r10
    40e8:	1c 96       	adiw	r26, 0x0c	; 12
    40ea:	8d 91       	ld	r24, X+
    40ec:	9c 91       	ld	r25, X
    40ee:	1d 97       	sbiw	r26, 0x0d	; 13
    40f0:	89 2b       	or	r24, r25
    40f2:	21 f0       	breq	.+8      	; 0x40fc <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    40f4:	c5 01       	movw	r24, r10
    40f6:	02 96       	adiw	r24, 0x02	; 2
    40f8:	0e 94 75 09 	call	0x12ea	; 0x12ea <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    40fc:	ce 01       	movw	r24, r28
    40fe:	08 96       	adiw	r24, 0x08	; 8
    4100:	fe de       	rcall	.-516    	; 0x3efe <prvSampleTimeNow>
    4102:	8b 01       	movw	r16, r22
    4104:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    4106:	e9 81       	ldd	r30, Y+1	; 0x01
    4108:	0e 2e       	mov	r0, r30
    410a:	00 0c       	add	r0, r0
    410c:	ff 0b       	sbc	r31, r31
    410e:	ea 30       	cpi	r30, 0x0A	; 10
    4110:	f1 05       	cpc	r31, r1
    4112:	08 f0       	brcs	.+2      	; 0x4116 <prvProcessReceivedCommands+0x62>
    4114:	64 c0       	rjmp	.+200    	; 0x41de <prvProcessReceivedCommands+0x12a>
    4116:	88 27       	eor	r24, r24
    4118:	ee 58       	subi	r30, 0x8E	; 142
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	8f 4f       	sbci	r24, 0xFF	; 255
    411e:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4122:	f5 01       	movw	r30, r10
    4124:	86 89       	ldd	r24, Z+22	; 0x16
    4126:	81 60       	ori	r24, 0x01	; 1
    4128:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    412a:	ca 80       	ldd	r12, Y+2	; 0x02
    412c:	db 80       	ldd	r13, Y+3	; 0x03
    412e:	ec 80       	ldd	r14, Y+4	; 0x04
    4130:	fd 80       	ldd	r15, Y+5	; 0x05
    4132:	46 85       	ldd	r20, Z+14	; 0x0e
    4134:	57 85       	ldd	r21, Z+15	; 0x0f
    4136:	60 89       	ldd	r22, Z+16	; 0x10
    4138:	71 89       	ldd	r23, Z+17	; 0x11
    413a:	4c 0d       	add	r20, r12
    413c:	5d 1d       	adc	r21, r13
    413e:	6e 1d       	adc	r22, r14
    4140:	7f 1d       	adc	r23, r15
    4142:	c5 01       	movw	r24, r10
    4144:	83 dd       	rcall	.-1274   	; 0x3c4c <prvInsertTimerInActiveList>
    4146:	88 23       	and	r24, r24
    4148:	09 f4       	brne	.+2      	; 0x414c <prvProcessReceivedCommands+0x98>
    414a:	49 c0       	rjmp	.+146    	; 0x41de <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    414c:	d5 01       	movw	r26, r10
    414e:	54 96       	adiw	r26, 0x14	; 20
    4150:	ed 91       	ld	r30, X+
    4152:	fc 91       	ld	r31, X
    4154:	55 97       	sbiw	r26, 0x15	; 21
    4156:	c5 01       	movw	r24, r10
    4158:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    415a:	f5 01       	movw	r30, r10
    415c:	86 89       	ldd	r24, Z+22	; 0x16
    415e:	82 ff       	sbrs	r24, 2
    4160:	3e c0       	rjmp	.+124    	; 0x41de <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4162:	4a 81       	ldd	r20, Y+2	; 0x02
    4164:	5b 81       	ldd	r21, Y+3	; 0x03
    4166:	6c 81       	ldd	r22, Y+4	; 0x04
    4168:	7d 81       	ldd	r23, Y+5	; 0x05
    416a:	86 85       	ldd	r24, Z+14	; 0x0e
    416c:	97 85       	ldd	r25, Z+15	; 0x0f
    416e:	a0 89       	ldd	r26, Z+16	; 0x10
    4170:	b1 89       	ldd	r27, Z+17	; 0x11
    4172:	9a 01       	movw	r18, r20
    4174:	ab 01       	movw	r20, r22
    4176:	28 0f       	add	r18, r24
    4178:	39 1f       	adc	r19, r25
    417a:	4a 1f       	adc	r20, r26
    417c:	5b 1f       	adc	r21, r27
    417e:	c1 2c       	mov	r12, r1
    4180:	d1 2c       	mov	r13, r1
    4182:	76 01       	movw	r14, r12
    4184:	00 e0       	ldi	r16, 0x00	; 0
    4186:	10 e0       	ldi	r17, 0x00	; 0
    4188:	60 e0       	ldi	r22, 0x00	; 0
    418a:	c5 01       	movw	r24, r10
    418c:	f2 dd       	rcall	.-1052   	; 0x3d72 <xTimerGenericCommand>
    418e:	27 c0       	rjmp	.+78     	; 0x41de <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4190:	d5 01       	movw	r26, r10
    4192:	56 96       	adiw	r26, 0x16	; 22
    4194:	8c 91       	ld	r24, X
    4196:	56 97       	sbiw	r26, 0x16	; 22
    4198:	8e 7f       	andi	r24, 0xFE	; 254
    419a:	56 96       	adiw	r26, 0x16	; 22
    419c:	8c 93       	st	X, r24
                        break;
    419e:	1f c0       	rjmp	.+62     	; 0x41de <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    41a0:	f5 01       	movw	r30, r10
    41a2:	86 89       	ldd	r24, Z+22	; 0x16
    41a4:	81 60       	ori	r24, 0x01	; 1
    41a6:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    41a8:	4a 81       	ldd	r20, Y+2	; 0x02
    41aa:	5b 81       	ldd	r21, Y+3	; 0x03
    41ac:	6c 81       	ldd	r22, Y+4	; 0x04
    41ae:	7d 81       	ldd	r23, Y+5	; 0x05
    41b0:	46 87       	std	Z+14, r20	; 0x0e
    41b2:	57 87       	std	Z+15, r21	; 0x0f
    41b4:	60 8b       	std	Z+16, r22	; 0x10
    41b6:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    41b8:	40 0f       	add	r20, r16
    41ba:	51 1f       	adc	r21, r17
    41bc:	62 1f       	adc	r22, r18
    41be:	73 1f       	adc	r23, r19
    41c0:	68 01       	movw	r12, r16
    41c2:	79 01       	movw	r14, r18
    41c4:	c5 01       	movw	r24, r10
    41c6:	42 dd       	rcall	.-1404   	; 0x3c4c <prvInsertTimerInActiveList>
                        break;
    41c8:	0a c0       	rjmp	.+20     	; 0x41de <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    41ca:	f5 01       	movw	r30, r10
    41cc:	86 89       	ldd	r24, Z+22	; 0x16
    41ce:	81 fd       	sbrc	r24, 1
    41d0:	04 c0       	rjmp	.+8      	; 0x41da <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    41d2:	c5 01       	movw	r24, r10
    41d4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <vPortFree>
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    41da:	8e 7f       	andi	r24, 0xFE	; 254
    41dc:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	a9 01       	movw	r20, r18
    41e4:	be 01       	movw	r22, r28
    41e6:	6f 5f       	subi	r22, 0xFF	; 255
    41e8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ea:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    41ee:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    41f2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <xQueueReceive>
    41f6:	81 11       	cpse	r24, r1
    41f8:	70 cf       	rjmp	.-288    	; 0x40da <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    41fa:	28 96       	adiw	r28, 0x08	; 8
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	f8 94       	cli
    4200:	de bf       	out	0x3e, r29	; 62
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	cd bf       	out	0x3d, r28	; 61
    4206:	df 91       	pop	r29
    4208:	cf 91       	pop	r28
    420a:	1f 91       	pop	r17
    420c:	0f 91       	pop	r16
    420e:	ff 90       	pop	r15
    4210:	ef 90       	pop	r14
    4212:	df 90       	pop	r13
    4214:	cf 90       	pop	r12
    4216:	bf 90       	pop	r11
    4218:	af 90       	pop	r10
    421a:	08 95       	ret

0000421c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    421c:	08 95       	ret

0000421e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    421e:	84 b1       	in	r24, 0x04	; 4
    4220:	80 68       	ori	r24, 0x80	; 128
    4222:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4224:	85 b1       	in	r24, 0x05	; 5
    4226:	80 68       	ori	r24, 0x80	; 128
    4228:	85 b9       	out	0x05, r24	; 5
    422a:	08 95       	ret

0000422c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    422c:	83 b1       	in	r24, 0x03	; 3
    422e:	80 68       	ori	r24, 0x80	; 128
    4230:	83 b9       	out	0x03, r24	; 3
    4232:	08 95       	ret

00004234 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    4234:	f4 df       	rcall	.-24     	; 0x421e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4236:	2f ef       	ldi	r18, 0xFF	; 255
    4238:	80 e7       	ldi	r24, 0x70	; 112
    423a:	92 e0       	ldi	r25, 0x02	; 2
    423c:	21 50       	subi	r18, 0x01	; 1
    423e:	80 40       	sbci	r24, 0x00	; 0
    4240:	90 40       	sbci	r25, 0x00	; 0
    4242:	e1 f7       	brne	.-8      	; 0x423c <vApplicationMallocFailedHook+0x8>
    4244:	00 c0       	rjmp	.+0      	; 0x4246 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    4246:	00 00       	nop
    4248:	f1 df       	rcall	.-30     	; 0x422c <prvBlinkMainLed>
    424a:	f5 cf       	rjmp	.-22     	; 0x4236 <vApplicationMallocFailedHook+0x2>

0000424c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    424c:	e8 df       	rcall	.-48     	; 0x421e <prvSetMainLedOn>
    424e:	2f ef       	ldi	r18, 0xFF	; 255
    4250:	87 ea       	ldi	r24, 0xA7	; 167
    4252:	91 e6       	ldi	r25, 0x61	; 97
    4254:	21 50       	subi	r18, 0x01	; 1
    4256:	80 40       	sbci	r24, 0x00	; 0
    4258:	90 40       	sbci	r25, 0x00	; 0
    425a:	e1 f7       	brne	.-8      	; 0x4254 <vApplicationStackOverflowHook+0x8>
    425c:	00 c0       	rjmp	.+0      	; 0x425e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    425e:	00 00       	nop
    4260:	e5 df       	rcall	.-54     	; 0x422c <prvBlinkMainLed>
    4262:	f5 cf       	rjmp	.-22     	; 0x424e <vApplicationStackOverflowHook+0x2>

00004264 <createTasksForSensors>:
	createTasksForSensors();
	DownLinkHandler_Create(3, downLinkMessageBufferHandle);
	lora_handler_initialize(2, temperature_sensor, co2_sensor, xMutexSemaphore, lighthandler);	
}

void createTasksForSensors(){
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY, xMutexSemaphore);
    4268:	00 91 fb 14 	lds	r16, 0x14FB	; 0x8014fb <xMutexSemaphore>
    426c:	10 91 fc 14 	lds	r17, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
    4270:	60 91 cf 13 	lds	r22, 0x13CF	; 0x8013cf <taskReadyBits>
    4274:	70 91 d0 13 	lds	r23, 0x13D0	; 0x8013d0 <taskReadyBits+0x1>
    4278:	21 e0       	ldi	r18, 0x01	; 1
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	83 e0       	ldi	r24, 0x03	; 3
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 34 04 	call	0x868	; 0x868 <createTemp>
    4288:	90 93 06 15 	sts	0x1506, r25	; 0x801506 <temperature_sensor+0x1>
    428c:	80 93 05 15 	sts	0x1505, r24	; 0x801505 <temperature_sensor>
	lighthandler = createLightSensor(4, taskReadyBits, BIT_LIGHT_READY, xMutexSemaphore);
    4290:	00 91 fb 14 	lds	r16, 0x14FB	; 0x8014fb <xMutexSemaphore>
    4294:	10 91 fc 14 	lds	r17, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
    4298:	60 91 cf 13 	lds	r22, 0x13CF	; 0x8013cf <taskReadyBits>
    429c:	70 91 d0 13 	lds	r23, 0x13D0	; 0x8013d0 <taskReadyBits+0x1>
    42a0:	24 e0       	ldi	r18, 0x04	; 4
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e0       	ldi	r20, 0x00	; 0
    42a6:	50 e0       	ldi	r21, 0x00	; 0
    42a8:	84 e0       	ldi	r24, 0x04	; 4
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	0e 94 50 03 	call	0x6a0	; 0x6a0 <createLightSensor>
    42b0:	90 93 08 15 	sts	0x1508, r25	; 0x801508 <lighthandler+0x1>
    42b4:	80 93 07 15 	sts	0x1507, r24	; 0x801507 <lighthandler>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY, xMutexSemaphore);
    42b8:	00 91 fb 14 	lds	r16, 0x14FB	; 0x8014fb <xMutexSemaphore>
    42bc:	10 91 fc 14 	lds	r17, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
    42c0:	60 91 cf 13 	lds	r22, 0x13CF	; 0x8013cf <taskReadyBits>
    42c4:	70 91 d0 13 	lds	r23, 0x13D0	; 0x8013d0 <taskReadyBits+0x1>
    42c8:	22 e0       	ldi	r18, 0x02	; 2
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	83 e0       	ldi	r24, 0x03	; 3
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	0e 94 25 02 	call	0x44a	; 0x44a <createCO2>
    42d8:	90 93 0a 15 	sts	0x150A, r25	; 0x80150a <co2_sensor+0x1>
    42dc:	80 93 09 15 	sts	0x1509, r24	; 0x801509 <co2_sensor>
	
}
    42e0:	1f 91       	pop	r17
    42e2:	0f 91       	pop	r16
    42e4:	08 95       	ret

000042e6 <create_tasks_and_semaphores>:
#define BIT_LIGHT_READY (1 << 2)

MessageBufferHandle_t downLinkMessageBufferHandle = NULL;

void create_tasks_and_semaphores(void)
{
    42e6:	0f 93       	push	r16
    42e8:	1f 93       	push	r17
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xMutexSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    42ea:	80 91 fb 14 	lds	r24, 0x14FB	; 0x8014fb <xMutexSemaphore>
    42ee:	90 91 fc 14 	lds	r25, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
    42f2:	89 2b       	or	r24, r25
    42f4:	89 f4       	brne	.+34     	; 0x4318 <create_tasks_and_semaphores+0x32>
	{
		xMutexSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	0e 94 ad 0c 	call	0x195a	; 0x195a <xQueueCreateMutex>
    42fc:	90 93 fc 14 	sts	0x14FC, r25	; 0x8014fc <xMutexSemaphore+0x1>
    4300:	80 93 fb 14 	sts	0x14FB, r24	; 0x8014fb <xMutexSemaphore>
		if ( ( xMutexSemaphore ) != NULL )
    4304:	00 97       	sbiw	r24, 0x00	; 0
    4306:	41 f0       	breq	.+16     	; 0x4318 <create_tasks_and_semaphores+0x32>
		{
			xSemaphoreGive( ( xMutexSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    4308:	00 e0       	ldi	r16, 0x00	; 0
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	a9 01       	movw	r20, r18
    4310:	60 e0       	ldi	r22, 0x00	; 0
    4312:	70 e0       	ldi	r23, 0x00	; 0
    4314:	0e 94 09 0c 	call	0x1812	; 0x1812 <xQueueGenericSend>
		}
	}
	
	
	createTasksForSensors();
    4318:	a5 df       	rcall	.-182    	; 0x4264 <createTasksForSensors>
	DownLinkHandler_Create(3, downLinkMessageBufferHandle);
    431a:	60 91 cd 13 	lds	r22, 0x13CD	; 0x8013cd <downLinkMessageBufferHandle>
    431e:	70 91 ce 13 	lds	r23, 0x13CE	; 0x8013ce <downLinkMessageBufferHandle+0x1>
    4322:	83 e0       	ldi	r24, 0x03	; 3
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DownLinkHandler_Create>
	lora_handler_initialize(2, temperature_sensor, co2_sensor, xMutexSemaphore, lighthandler);	
    432a:	00 91 07 15 	lds	r16, 0x1507	; 0x801507 <lighthandler>
    432e:	10 91 08 15 	lds	r17, 0x1508	; 0x801508 <lighthandler+0x1>
    4332:	20 91 fb 14 	lds	r18, 0x14FB	; 0x8014fb <xMutexSemaphore>
    4336:	30 91 fc 14 	lds	r19, 0x14FC	; 0x8014fc <xMutexSemaphore+0x1>
    433a:	40 91 09 15 	lds	r20, 0x1509	; 0x801509 <co2_sensor>
    433e:	50 91 0a 15 	lds	r21, 0x150A	; 0x80150a <co2_sensor+0x1>
    4342:	60 91 05 15 	lds	r22, 0x1505	; 0x801505 <temperature_sensor>
    4346:	70 91 06 15 	lds	r23, 0x1506	; 0x801506 <temperature_sensor+0x1>
    434a:	82 e0       	ldi	r24, 0x02	; 2
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	0e 94 42 06 	call	0xc84	; 0xc84 <lora_handler_initialize>
}
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	08 95       	ret

00004358 <initializeSystem>:
	
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    4358:	0e 94 89 06 	call	0xd12	; 0xd12 <xEventGroupCreate>
    435c:	90 93 d0 13 	sts	0x13D0, r25	; 0x8013d0 <taskReadyBits+0x1>
    4360:	80 93 cf 13 	sts	0x13CF, r24	; 0x8013cf <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	0e 94 bf 2c 	call	0x597e	; 0x597e <stdio_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*1);
    436a:	41 e0       	ldi	r20, 0x01	; 1
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	86 e1       	ldi	r24, 0x16	; 22
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <xStreamBufferGenericCreate>
    4378:	90 93 ce 13 	sts	0x13CE, r25	; 0x8013ce <downLinkMessageBufferHandle+0x1>
    437c:	80 93 cd 13 	sts	0x13CD, r24	; 0x8013cd <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    4380:	bc 01       	movw	r22, r24
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	43 d3       	rcall	.+1670   	; 0x4a0c <lora_driver_initialise>
	create_tasks_and_semaphores();
    4386:	af cf       	rjmp	.-162    	; 0x42e6 <create_tasks_and_semaphores>
    4388:	08 95       	ret

0000438a <main>:
    438a:	e6 df       	rcall	.-52     	; 0x4358 <initializeSystem>
}

int main(void){
	initializeSystem();
	vTaskStartScheduler();
    438c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <vTaskStartScheduler>
    4390:	ff cf       	rjmp	.-2      	; 0x4390 <main+0x6>

00004392 <__fixsfsi>:
    4392:	04 d0       	rcall	.+8      	; 0x439c <__fixunssfsi>
    4394:	68 94       	set
    4396:	b1 11       	cpse	r27, r1
    4398:	50 c0       	rjmp	.+160    	; 0x443a <__fp_szero>
    439a:	08 95       	ret

0000439c <__fixunssfsi>:
    439c:	33 d0       	rcall	.+102    	; 0x4404 <__fp_splitA>
    439e:	88 f0       	brcs	.+34     	; 0x43c2 <__fixunssfsi+0x26>
    43a0:	9f 57       	subi	r25, 0x7F	; 127
    43a2:	90 f0       	brcs	.+36     	; 0x43c8 <__fixunssfsi+0x2c>
    43a4:	b9 2f       	mov	r27, r25
    43a6:	99 27       	eor	r25, r25
    43a8:	b7 51       	subi	r27, 0x17	; 23
    43aa:	a0 f0       	brcs	.+40     	; 0x43d4 <__fixunssfsi+0x38>
    43ac:	d1 f0       	breq	.+52     	; 0x43e2 <__fixunssfsi+0x46>
    43ae:	66 0f       	add	r22, r22
    43b0:	77 1f       	adc	r23, r23
    43b2:	88 1f       	adc	r24, r24
    43b4:	99 1f       	adc	r25, r25
    43b6:	1a f0       	brmi	.+6      	; 0x43be <__fixunssfsi+0x22>
    43b8:	ba 95       	dec	r27
    43ba:	c9 f7       	brne	.-14     	; 0x43ae <__fixunssfsi+0x12>
    43bc:	12 c0       	rjmp	.+36     	; 0x43e2 <__fixunssfsi+0x46>
    43be:	b1 30       	cpi	r27, 0x01	; 1
    43c0:	81 f0       	breq	.+32     	; 0x43e2 <__fixunssfsi+0x46>
    43c2:	3a d0       	rcall	.+116    	; 0x4438 <__fp_zero>
    43c4:	b1 e0       	ldi	r27, 0x01	; 1
    43c6:	08 95       	ret
    43c8:	37 c0       	rjmp	.+110    	; 0x4438 <__fp_zero>
    43ca:	67 2f       	mov	r22, r23
    43cc:	78 2f       	mov	r23, r24
    43ce:	88 27       	eor	r24, r24
    43d0:	b8 5f       	subi	r27, 0xF8	; 248
    43d2:	39 f0       	breq	.+14     	; 0x43e2 <__fixunssfsi+0x46>
    43d4:	b9 3f       	cpi	r27, 0xF9	; 249
    43d6:	cc f3       	brlt	.-14     	; 0x43ca <__fixunssfsi+0x2e>
    43d8:	86 95       	lsr	r24
    43da:	77 95       	ror	r23
    43dc:	67 95       	ror	r22
    43de:	b3 95       	inc	r27
    43e0:	d9 f7       	brne	.-10     	; 0x43d8 <__fixunssfsi+0x3c>
    43e2:	3e f4       	brtc	.+14     	; 0x43f2 <__fixunssfsi+0x56>
    43e4:	90 95       	com	r25
    43e6:	80 95       	com	r24
    43e8:	70 95       	com	r23
    43ea:	61 95       	neg	r22
    43ec:	7f 4f       	sbci	r23, 0xFF	; 255
    43ee:	8f 4f       	sbci	r24, 0xFF	; 255
    43f0:	9f 4f       	sbci	r25, 0xFF	; 255
    43f2:	08 95       	ret

000043f4 <__fp_split3>:
    43f4:	57 fd       	sbrc	r21, 7
    43f6:	90 58       	subi	r25, 0x80	; 128
    43f8:	44 0f       	add	r20, r20
    43fa:	55 1f       	adc	r21, r21
    43fc:	59 f0       	breq	.+22     	; 0x4414 <__fp_splitA+0x10>
    43fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4400:	71 f0       	breq	.+28     	; 0x441e <__fp_splitA+0x1a>
    4402:	47 95       	ror	r20

00004404 <__fp_splitA>:
    4404:	88 0f       	add	r24, r24
    4406:	97 fb       	bst	r25, 7
    4408:	99 1f       	adc	r25, r25
    440a:	61 f0       	breq	.+24     	; 0x4424 <__fp_splitA+0x20>
    440c:	9f 3f       	cpi	r25, 0xFF	; 255
    440e:	79 f0       	breq	.+30     	; 0x442e <__fp_splitA+0x2a>
    4410:	87 95       	ror	r24
    4412:	08 95       	ret
    4414:	12 16       	cp	r1, r18
    4416:	13 06       	cpc	r1, r19
    4418:	14 06       	cpc	r1, r20
    441a:	55 1f       	adc	r21, r21
    441c:	f2 cf       	rjmp	.-28     	; 0x4402 <__fp_split3+0xe>
    441e:	46 95       	lsr	r20
    4420:	f1 df       	rcall	.-30     	; 0x4404 <__fp_splitA>
    4422:	08 c0       	rjmp	.+16     	; 0x4434 <__fp_splitA+0x30>
    4424:	16 16       	cp	r1, r22
    4426:	17 06       	cpc	r1, r23
    4428:	18 06       	cpc	r1, r24
    442a:	99 1f       	adc	r25, r25
    442c:	f1 cf       	rjmp	.-30     	; 0x4410 <__fp_splitA+0xc>
    442e:	86 95       	lsr	r24
    4430:	71 05       	cpc	r23, r1
    4432:	61 05       	cpc	r22, r1
    4434:	08 94       	sec
    4436:	08 95       	ret

00004438 <__fp_zero>:
    4438:	e8 94       	clt

0000443a <__fp_szero>:
    443a:	bb 27       	eor	r27, r27
    443c:	66 27       	eor	r22, r22
    443e:	77 27       	eor	r23, r23
    4440:	cb 01       	movw	r24, r22
    4442:	97 f9       	bld	r25, 7
    4444:	08 95       	ret

00004446 <modf>:
    4446:	fa 01       	movw	r30, r20
    4448:	dc 01       	movw	r26, r24
    444a:	aa 0f       	add	r26, r26
    444c:	bb 1f       	adc	r27, r27
    444e:	9b 01       	movw	r18, r22
    4450:	ac 01       	movw	r20, r24
    4452:	bf 57       	subi	r27, 0x7F	; 127
    4454:	28 f4       	brcc	.+10     	; 0x4460 <modf+0x1a>
    4456:	22 27       	eor	r18, r18
    4458:	33 27       	eor	r19, r19
    445a:	44 27       	eor	r20, r20
    445c:	50 78       	andi	r21, 0x80	; 128
    445e:	1f c0       	rjmp	.+62     	; 0x449e <modf+0x58>
    4460:	b7 51       	subi	r27, 0x17	; 23
    4462:	88 f4       	brcc	.+34     	; 0x4486 <modf+0x40>
    4464:	ab 2f       	mov	r26, r27
    4466:	00 24       	eor	r0, r0
    4468:	46 95       	lsr	r20
    446a:	37 95       	ror	r19
    446c:	27 95       	ror	r18
    446e:	01 1c       	adc	r0, r1
    4470:	a3 95       	inc	r26
    4472:	d2 f3       	brmi	.-12     	; 0x4468 <modf+0x22>
    4474:	00 20       	and	r0, r0
    4476:	69 f0       	breq	.+26     	; 0x4492 <modf+0x4c>
    4478:	22 0f       	add	r18, r18
    447a:	33 1f       	adc	r19, r19
    447c:	44 1f       	adc	r20, r20
    447e:	b3 95       	inc	r27
    4480:	da f3       	brmi	.-10     	; 0x4478 <modf+0x32>
    4482:	0d d0       	rcall	.+26     	; 0x449e <modf+0x58>
    4484:	76 c0       	rjmp	.+236    	; 0x4572 <__subsf3>
    4486:	61 30       	cpi	r22, 0x01	; 1
    4488:	71 05       	cpc	r23, r1
    448a:	a0 e8       	ldi	r26, 0x80	; 128
    448c:	8a 07       	cpc	r24, r26
    448e:	b9 46       	sbci	r27, 0x69	; 105
    4490:	30 f4       	brcc	.+12     	; 0x449e <modf+0x58>
    4492:	9b 01       	movw	r18, r22
    4494:	ac 01       	movw	r20, r24
    4496:	66 27       	eor	r22, r22
    4498:	77 27       	eor	r23, r23
    449a:	88 27       	eor	r24, r24
    449c:	90 78       	andi	r25, 0x80	; 128
    449e:	30 96       	adiw	r30, 0x00	; 0
    44a0:	21 f0       	breq	.+8      	; 0x44aa <modf+0x64>
    44a2:	20 83       	st	Z, r18
    44a4:	31 83       	std	Z+1, r19	; 0x01
    44a6:	42 83       	std	Z+2, r20	; 0x02
    44a8:	53 83       	std	Z+3, r21	; 0x03
    44aa:	08 95       	ret

000044ac <__mulsf3>:
    44ac:	0b d0       	rcall	.+22     	; 0x44c4 <__mulsf3x>
    44ae:	dd c0       	rjmp	.+442    	; 0x466a <__fp_round>
    44b0:	ce d0       	rcall	.+412    	; 0x464e <__fp_pscA>
    44b2:	28 f0       	brcs	.+10     	; 0x44be <__mulsf3+0x12>
    44b4:	d3 d0       	rcall	.+422    	; 0x465c <__fp_pscB>
    44b6:	18 f0       	brcs	.+6      	; 0x44be <__mulsf3+0x12>
    44b8:	95 23       	and	r25, r21
    44ba:	09 f0       	breq	.+2      	; 0x44be <__mulsf3+0x12>
    44bc:	bf c0       	rjmp	.+382    	; 0x463c <__fp_inf>
    44be:	c4 c0       	rjmp	.+392    	; 0x4648 <__fp_nan>
    44c0:	11 24       	eor	r1, r1
    44c2:	bb cf       	rjmp	.-138    	; 0x443a <__fp_szero>

000044c4 <__mulsf3x>:
    44c4:	97 df       	rcall	.-210    	; 0x43f4 <__fp_split3>
    44c6:	a0 f3       	brcs	.-24     	; 0x44b0 <__mulsf3+0x4>

000044c8 <__mulsf3_pse>:
    44c8:	95 9f       	mul	r25, r21
    44ca:	d1 f3       	breq	.-12     	; 0x44c0 <__mulsf3+0x14>
    44cc:	95 0f       	add	r25, r21
    44ce:	50 e0       	ldi	r21, 0x00	; 0
    44d0:	55 1f       	adc	r21, r21
    44d2:	62 9f       	mul	r22, r18
    44d4:	f0 01       	movw	r30, r0
    44d6:	72 9f       	mul	r23, r18
    44d8:	bb 27       	eor	r27, r27
    44da:	f0 0d       	add	r31, r0
    44dc:	b1 1d       	adc	r27, r1
    44de:	63 9f       	mul	r22, r19
    44e0:	aa 27       	eor	r26, r26
    44e2:	f0 0d       	add	r31, r0
    44e4:	b1 1d       	adc	r27, r1
    44e6:	aa 1f       	adc	r26, r26
    44e8:	64 9f       	mul	r22, r20
    44ea:	66 27       	eor	r22, r22
    44ec:	b0 0d       	add	r27, r0
    44ee:	a1 1d       	adc	r26, r1
    44f0:	66 1f       	adc	r22, r22
    44f2:	82 9f       	mul	r24, r18
    44f4:	22 27       	eor	r18, r18
    44f6:	b0 0d       	add	r27, r0
    44f8:	a1 1d       	adc	r26, r1
    44fa:	62 1f       	adc	r22, r18
    44fc:	73 9f       	mul	r23, r19
    44fe:	b0 0d       	add	r27, r0
    4500:	a1 1d       	adc	r26, r1
    4502:	62 1f       	adc	r22, r18
    4504:	83 9f       	mul	r24, r19
    4506:	a0 0d       	add	r26, r0
    4508:	61 1d       	adc	r22, r1
    450a:	22 1f       	adc	r18, r18
    450c:	74 9f       	mul	r23, r20
    450e:	33 27       	eor	r19, r19
    4510:	a0 0d       	add	r26, r0
    4512:	61 1d       	adc	r22, r1
    4514:	23 1f       	adc	r18, r19
    4516:	84 9f       	mul	r24, r20
    4518:	60 0d       	add	r22, r0
    451a:	21 1d       	adc	r18, r1
    451c:	82 2f       	mov	r24, r18
    451e:	76 2f       	mov	r23, r22
    4520:	6a 2f       	mov	r22, r26
    4522:	11 24       	eor	r1, r1
    4524:	9f 57       	subi	r25, 0x7F	; 127
    4526:	50 40       	sbci	r21, 0x00	; 0
    4528:	8a f0       	brmi	.+34     	; 0x454c <__mulsf3_pse+0x84>
    452a:	e1 f0       	breq	.+56     	; 0x4564 <__mulsf3_pse+0x9c>
    452c:	88 23       	and	r24, r24
    452e:	4a f0       	brmi	.+18     	; 0x4542 <__mulsf3_pse+0x7a>
    4530:	ee 0f       	add	r30, r30
    4532:	ff 1f       	adc	r31, r31
    4534:	bb 1f       	adc	r27, r27
    4536:	66 1f       	adc	r22, r22
    4538:	77 1f       	adc	r23, r23
    453a:	88 1f       	adc	r24, r24
    453c:	91 50       	subi	r25, 0x01	; 1
    453e:	50 40       	sbci	r21, 0x00	; 0
    4540:	a9 f7       	brne	.-22     	; 0x452c <__mulsf3_pse+0x64>
    4542:	9e 3f       	cpi	r25, 0xFE	; 254
    4544:	51 05       	cpc	r21, r1
    4546:	70 f0       	brcs	.+28     	; 0x4564 <__mulsf3_pse+0x9c>
    4548:	79 c0       	rjmp	.+242    	; 0x463c <__fp_inf>
    454a:	77 cf       	rjmp	.-274    	; 0x443a <__fp_szero>
    454c:	5f 3f       	cpi	r21, 0xFF	; 255
    454e:	ec f3       	brlt	.-6      	; 0x454a <__mulsf3_pse+0x82>
    4550:	98 3e       	cpi	r25, 0xE8	; 232
    4552:	dc f3       	brlt	.-10     	; 0x454a <__mulsf3_pse+0x82>
    4554:	86 95       	lsr	r24
    4556:	77 95       	ror	r23
    4558:	67 95       	ror	r22
    455a:	b7 95       	ror	r27
    455c:	f7 95       	ror	r31
    455e:	e7 95       	ror	r30
    4560:	9f 5f       	subi	r25, 0xFF	; 255
    4562:	c1 f7       	brne	.-16     	; 0x4554 <__mulsf3_pse+0x8c>
    4564:	fe 2b       	or	r31, r30
    4566:	88 0f       	add	r24, r24
    4568:	91 1d       	adc	r25, r1
    456a:	96 95       	lsr	r25
    456c:	87 95       	ror	r24
    456e:	97 f9       	bld	r25, 7
    4570:	08 95       	ret

00004572 <__subsf3>:
    4572:	50 58       	subi	r21, 0x80	; 128

00004574 <__addsf3>:
    4574:	bb 27       	eor	r27, r27
    4576:	aa 27       	eor	r26, r26
    4578:	0e d0       	rcall	.+28     	; 0x4596 <__addsf3x>
    457a:	77 c0       	rjmp	.+238    	; 0x466a <__fp_round>
    457c:	68 d0       	rcall	.+208    	; 0x464e <__fp_pscA>
    457e:	30 f0       	brcs	.+12     	; 0x458c <__addsf3+0x18>
    4580:	6d d0       	rcall	.+218    	; 0x465c <__fp_pscB>
    4582:	20 f0       	brcs	.+8      	; 0x458c <__addsf3+0x18>
    4584:	31 f4       	brne	.+12     	; 0x4592 <__addsf3+0x1e>
    4586:	9f 3f       	cpi	r25, 0xFF	; 255
    4588:	11 f4       	brne	.+4      	; 0x458e <__addsf3+0x1a>
    458a:	1e f4       	brtc	.+6      	; 0x4592 <__addsf3+0x1e>
    458c:	5d c0       	rjmp	.+186    	; 0x4648 <__fp_nan>
    458e:	0e f4       	brtc	.+2      	; 0x4592 <__addsf3+0x1e>
    4590:	e0 95       	com	r30
    4592:	e7 fb       	bst	r30, 7
    4594:	53 c0       	rjmp	.+166    	; 0x463c <__fp_inf>

00004596 <__addsf3x>:
    4596:	e9 2f       	mov	r30, r25
    4598:	2d df       	rcall	.-422    	; 0x43f4 <__fp_split3>
    459a:	80 f3       	brcs	.-32     	; 0x457c <__addsf3+0x8>
    459c:	ba 17       	cp	r27, r26
    459e:	62 07       	cpc	r22, r18
    45a0:	73 07       	cpc	r23, r19
    45a2:	84 07       	cpc	r24, r20
    45a4:	95 07       	cpc	r25, r21
    45a6:	18 f0       	brcs	.+6      	; 0x45ae <__addsf3x+0x18>
    45a8:	71 f4       	brne	.+28     	; 0x45c6 <__addsf3x+0x30>
    45aa:	9e f5       	brtc	.+102    	; 0x4612 <__addsf3x+0x7c>
    45ac:	45 cf       	rjmp	.-374    	; 0x4438 <__fp_zero>
    45ae:	0e f4       	brtc	.+2      	; 0x45b2 <__addsf3x+0x1c>
    45b0:	e0 95       	com	r30
    45b2:	0b 2e       	mov	r0, r27
    45b4:	ba 2f       	mov	r27, r26
    45b6:	a0 2d       	mov	r26, r0
    45b8:	0b 01       	movw	r0, r22
    45ba:	b9 01       	movw	r22, r18
    45bc:	90 01       	movw	r18, r0
    45be:	0c 01       	movw	r0, r24
    45c0:	ca 01       	movw	r24, r20
    45c2:	a0 01       	movw	r20, r0
    45c4:	11 24       	eor	r1, r1
    45c6:	ff 27       	eor	r31, r31
    45c8:	59 1b       	sub	r21, r25
    45ca:	99 f0       	breq	.+38     	; 0x45f2 <__addsf3x+0x5c>
    45cc:	59 3f       	cpi	r21, 0xF9	; 249
    45ce:	50 f4       	brcc	.+20     	; 0x45e4 <__addsf3x+0x4e>
    45d0:	50 3e       	cpi	r21, 0xE0	; 224
    45d2:	68 f1       	brcs	.+90     	; 0x462e <__addsf3x+0x98>
    45d4:	1a 16       	cp	r1, r26
    45d6:	f0 40       	sbci	r31, 0x00	; 0
    45d8:	a2 2f       	mov	r26, r18
    45da:	23 2f       	mov	r18, r19
    45dc:	34 2f       	mov	r19, r20
    45de:	44 27       	eor	r20, r20
    45e0:	58 5f       	subi	r21, 0xF8	; 248
    45e2:	f3 cf       	rjmp	.-26     	; 0x45ca <__addsf3x+0x34>
    45e4:	46 95       	lsr	r20
    45e6:	37 95       	ror	r19
    45e8:	27 95       	ror	r18
    45ea:	a7 95       	ror	r26
    45ec:	f0 40       	sbci	r31, 0x00	; 0
    45ee:	53 95       	inc	r21
    45f0:	c9 f7       	brne	.-14     	; 0x45e4 <__addsf3x+0x4e>
    45f2:	7e f4       	brtc	.+30     	; 0x4612 <__addsf3x+0x7c>
    45f4:	1f 16       	cp	r1, r31
    45f6:	ba 0b       	sbc	r27, r26
    45f8:	62 0b       	sbc	r22, r18
    45fa:	73 0b       	sbc	r23, r19
    45fc:	84 0b       	sbc	r24, r20
    45fe:	ba f0       	brmi	.+46     	; 0x462e <__addsf3x+0x98>
    4600:	91 50       	subi	r25, 0x01	; 1
    4602:	a1 f0       	breq	.+40     	; 0x462c <__addsf3x+0x96>
    4604:	ff 0f       	add	r31, r31
    4606:	bb 1f       	adc	r27, r27
    4608:	66 1f       	adc	r22, r22
    460a:	77 1f       	adc	r23, r23
    460c:	88 1f       	adc	r24, r24
    460e:	c2 f7       	brpl	.-16     	; 0x4600 <__addsf3x+0x6a>
    4610:	0e c0       	rjmp	.+28     	; 0x462e <__addsf3x+0x98>
    4612:	ba 0f       	add	r27, r26
    4614:	62 1f       	adc	r22, r18
    4616:	73 1f       	adc	r23, r19
    4618:	84 1f       	adc	r24, r20
    461a:	48 f4       	brcc	.+18     	; 0x462e <__addsf3x+0x98>
    461c:	87 95       	ror	r24
    461e:	77 95       	ror	r23
    4620:	67 95       	ror	r22
    4622:	b7 95       	ror	r27
    4624:	f7 95       	ror	r31
    4626:	9e 3f       	cpi	r25, 0xFE	; 254
    4628:	08 f0       	brcs	.+2      	; 0x462c <__addsf3x+0x96>
    462a:	b3 cf       	rjmp	.-154    	; 0x4592 <__addsf3+0x1e>
    462c:	93 95       	inc	r25
    462e:	88 0f       	add	r24, r24
    4630:	08 f0       	brcs	.+2      	; 0x4634 <__addsf3x+0x9e>
    4632:	99 27       	eor	r25, r25
    4634:	ee 0f       	add	r30, r30
    4636:	97 95       	ror	r25
    4638:	87 95       	ror	r24
    463a:	08 95       	ret

0000463c <__fp_inf>:
    463c:	97 f9       	bld	r25, 7
    463e:	9f 67       	ori	r25, 0x7F	; 127
    4640:	80 e8       	ldi	r24, 0x80	; 128
    4642:	70 e0       	ldi	r23, 0x00	; 0
    4644:	60 e0       	ldi	r22, 0x00	; 0
    4646:	08 95       	ret

00004648 <__fp_nan>:
    4648:	9f ef       	ldi	r25, 0xFF	; 255
    464a:	80 ec       	ldi	r24, 0xC0	; 192
    464c:	08 95       	ret

0000464e <__fp_pscA>:
    464e:	00 24       	eor	r0, r0
    4650:	0a 94       	dec	r0
    4652:	16 16       	cp	r1, r22
    4654:	17 06       	cpc	r1, r23
    4656:	18 06       	cpc	r1, r24
    4658:	09 06       	cpc	r0, r25
    465a:	08 95       	ret

0000465c <__fp_pscB>:
    465c:	00 24       	eor	r0, r0
    465e:	0a 94       	dec	r0
    4660:	12 16       	cp	r1, r18
    4662:	13 06       	cpc	r1, r19
    4664:	14 06       	cpc	r1, r20
    4666:	05 06       	cpc	r0, r21
    4668:	08 95       	ret

0000466a <__fp_round>:
    466a:	09 2e       	mov	r0, r25
    466c:	03 94       	inc	r0
    466e:	00 0c       	add	r0, r0
    4670:	11 f4       	brne	.+4      	; 0x4676 <__fp_round+0xc>
    4672:	88 23       	and	r24, r24
    4674:	52 f0       	brmi	.+20     	; 0x468a <__fp_round+0x20>
    4676:	bb 0f       	add	r27, r27
    4678:	40 f4       	brcc	.+16     	; 0x468a <__fp_round+0x20>
    467a:	bf 2b       	or	r27, r31
    467c:	11 f4       	brne	.+4      	; 0x4682 <__fp_round+0x18>
    467e:	60 ff       	sbrs	r22, 0
    4680:	04 c0       	rjmp	.+8      	; 0x468a <__fp_round+0x20>
    4682:	6f 5f       	subi	r22, 0xFF	; 255
    4684:	7f 4f       	sbci	r23, 0xFF	; 255
    4686:	8f 4f       	sbci	r24, 0xFF	; 255
    4688:	9f 4f       	sbci	r25, 0xFF	; 255
    468a:	08 95       	ret

0000468c <_hihTwiCallback>:
    468c:	65 30       	cpi	r22, 0x05	; 5
    468e:	f1 f4       	brne	.+60     	; 0x46cc <_hihTwiCallback+0x40>
    4690:	fa 01       	movw	r30, r20
    4692:	80 81       	ld	r24, Z
    4694:	8f 73       	andi	r24, 0x3F	; 63
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	98 2f       	mov	r25, r24
    469a:	88 27       	eor	r24, r24
    469c:	21 81       	ldd	r18, Z+1	; 0x01
    469e:	82 2b       	or	r24, r18
    46a0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    46a4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    46a8:	82 81       	ldd	r24, Z+2	; 0x02
    46aa:	f0 e4       	ldi	r31, 0x40	; 64
    46ac:	8f 9f       	mul	r24, r31
    46ae:	c0 01       	movw	r24, r0
    46b0:	11 24       	eor	r1, r1
    46b2:	fa 01       	movw	r30, r20
    46b4:	23 81       	ldd	r18, Z+3	; 0x03
    46b6:	26 95       	lsr	r18
    46b8:	26 95       	lsr	r18
    46ba:	82 2b       	or	r24, r18
    46bc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    46c0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	80 93 d1 13 	sts	0x13D1, r24	; 0x8013d1 <_measuringIsReady>
    46ca:	08 95       	ret
    46cc:	64 30       	cpi	r22, 0x04	; 4
    46ce:	51 f0       	breq	.+20     	; 0x46e4 <_hihTwiCallback+0x58>
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	90 e4       	ldi	r25, 0x40	; 64
    46d4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    46d8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    46dc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    46e0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    46e4:	08 95       	ret

000046e6 <hih8120_initialise>:
    46e6:	0f 93       	push	r16
    46e8:	1f 93       	push	r17
    46ea:	06 e4       	ldi	r16, 0x46	; 70
    46ec:	13 e2       	ldi	r17, 0x23	; 35
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	34 e2       	ldi	r19, 0x24	; 36
    46f2:	44 ef       	ldi	r20, 0xF4	; 244
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	60 e0       	ldi	r22, 0x00	; 0
    46f8:	87 e2       	ldi	r24, 0x27	; 39
    46fa:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <twiCreate>
    46fe:	90 93 d3 13 	sts	0x13D3, r25	; 0x8013d3 <_hih8120Handler+0x1>
    4702:	80 93 d2 13 	sts	0x13D2, r24	; 0x8013d2 <_hih8120Handler>
    4706:	21 e0       	ldi	r18, 0x01	; 1
    4708:	89 2b       	or	r24, r25
    470a:	09 f0       	breq	.+2      	; 0x470e <hih8120_initialise+0x28>
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	82 2f       	mov	r24, r18
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	08 95       	ret

00004716 <hih8120_wakeup>:
    4716:	80 91 d2 13 	lds	r24, 0x13D2	; 0x8013d2 <_hih8120Handler>
    471a:	90 91 d3 13 	lds	r25, 0x13D3	; 0x8013d3 <_hih8120Handler+0x1>
    471e:	00 97       	sbiw	r24, 0x00	; 0
    4720:	59 f0       	breq	.+22     	; 0x4738 <hih8120_wakeup+0x22>
    4722:	40 e0       	ldi	r20, 0x00	; 0
    4724:	60 e0       	ldi	r22, 0x00	; 0
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <twiTransmit>
    472c:	84 30       	cpi	r24, 0x04	; 4
    472e:	31 f4       	brne	.+12     	; 0x473c <hih8120_wakeup+0x26>
    4730:	10 92 d1 13 	sts	0x13D1, r1	; 0x8013d1 <_measuringIsReady>
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	08 95       	ret
    4738:	82 e0       	ldi	r24, 0x02	; 2
    473a:	08 95       	ret
    473c:	83 e0       	ldi	r24, 0x03	; 3
    473e:	08 95       	ret

00004740 <hih8120_measure>:
    4740:	80 91 d2 13 	lds	r24, 0x13D2	; 0x8013d2 <_hih8120Handler>
    4744:	90 91 d3 13 	lds	r25, 0x13D3	; 0x8013d3 <_hih8120Handler+0x1>
    4748:	00 97       	sbiw	r24, 0x00	; 0
    474a:	39 f0       	breq	.+14     	; 0x475a <hih8120_measure+0x1a>
    474c:	64 e0       	ldi	r22, 0x04	; 4
    474e:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <twiReceive>
    4752:	85 30       	cpi	r24, 0x05	; 5
    4754:	21 f0       	breq	.+8      	; 0x475e <hih8120_measure+0x1e>
    4756:	83 e0       	ldi	r24, 0x03	; 3
    4758:	08 95       	ret
    475a:	82 e0       	ldi	r24, 0x02	; 2
    475c:	08 95       	ret
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	08 95       	ret

00004762 <hih8120_getHumidity>:
    4762:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4766:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	0e 94 44 34 	call	0x6888	; 0x6888 <__floatunsisf>
    4772:	20 e0       	ldi	r18, 0x00	; 0
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	48 ec       	ldi	r20, 0xC8	; 200
    4778:	52 e4       	ldi	r21, 0x42	; 66
    477a:	98 de       	rcall	.-720    	; 0x44ac <__mulsf3>
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	38 ef       	ldi	r19, 0xF8	; 248
    4780:	4f e7       	ldi	r20, 0x7F	; 127
    4782:	56 e4       	ldi	r21, 0x46	; 70
    4784:	0c 94 d3 33 	jmp	0x67a6	; 0x67a6 <__divsf3>
    4788:	08 95       	ret

0000478a <hih8120_getHumidityPercent_x10>:
    478a:	eb df       	rcall	.-42     	; 0x4762 <hih8120_getHumidity>
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	40 e2       	ldi	r20, 0x20	; 32
    4792:	51 e4       	ldi	r21, 0x41	; 65
    4794:	8b de       	rcall	.-746    	; 0x44ac <__mulsf3>
    4796:	02 de       	rcall	.-1020   	; 0x439c <__fixunssfsi>
    4798:	cb 01       	movw	r24, r22
    479a:	08 95       	ret

0000479c <hih8120_getTemperature>:
    479c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    47a0:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	0e 94 44 34 	call	0x6888	; 0x6888 <__floatunsisf>
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	45 e2       	ldi	r20, 0x25	; 37
    47b2:	53 e4       	ldi	r21, 0x43	; 67
    47b4:	7b de       	rcall	.-778    	; 0x44ac <__mulsf3>
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	38 ef       	ldi	r19, 0xF8	; 248
    47ba:	4f e7       	ldi	r20, 0x7F	; 127
    47bc:	56 e4       	ldi	r21, 0x46	; 70
    47be:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <__divsf3>
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e2       	ldi	r20, 0x20	; 32
    47c8:	52 e4       	ldi	r21, 0x42	; 66
    47ca:	d3 ce       	rjmp	.-602    	; 0x4572 <__subsf3>
    47cc:	08 95       	ret

000047ce <_serialCallBack>:
    47ce:	0f 93       	push	r16
    47d0:	1f 93       	push	r17
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	1f 92       	push	r1
    47d8:	1f 92       	push	r1
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	8c 01       	movw	r16, r24
    47e0:	19 82       	std	Y+1, r1	; 0x01
    47e2:	2d c0       	rjmp	.+90     	; 0x483e <_serialCallBack+0x70>
    47e4:	e0 91 0b 14 	lds	r30, 0x140B	; 0x80140b <rec_buf_inp.2878>
    47e8:	ec 32       	cpi	r30, 0x2C	; 44
    47ea:	50 f4       	brcc	.+20     	; 0x4800 <_serialCallBack+0x32>
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	8e 0f       	add	r24, r30
    47f0:	80 93 0b 14 	sts	0x140B, r24	; 0x80140b <rec_buf_inp.2878>
    47f4:	f0 e0       	ldi	r31, 0x00	; 0
    47f6:	e3 5c       	subi	r30, 0xC3	; 195
    47f8:	fb 4e       	sbci	r31, 0xEB	; 235
    47fa:	8a 81       	ldd	r24, Y+2	; 0x02
    47fc:	80 83       	st	Z, r24
    47fe:	02 c0       	rjmp	.+4      	; 0x4804 <_serialCallBack+0x36>
    4800:	10 92 0b 14 	sts	0x140B, r1	; 0x80140b <rec_buf_inp.2878>
    4804:	8a 81       	ldd	r24, Y+2	; 0x02
    4806:	8a 30       	cpi	r24, 0x0A	; 10
    4808:	d1 f4       	brne	.+52     	; 0x483e <_serialCallBack+0x70>
    480a:	40 91 0b 14 	lds	r20, 0x140B	; 0x80140b <rec_buf_inp.2878>
    480e:	50 e0       	ldi	r21, 0x00	; 0
    4810:	fa 01       	movw	r30, r20
    4812:	e5 5c       	subi	r30, 0xC5	; 197
    4814:	fb 4e       	sbci	r31, 0xEB	; 235
    4816:	10 82       	st	Z, r1
    4818:	41 50       	subi	r20, 0x01	; 1
    481a:	51 09       	sbc	r21, r1
    481c:	9e 01       	movw	r18, r28
    481e:	2f 5f       	subi	r18, 0xFF	; 255
    4820:	3f 4f       	sbci	r19, 0xFF	; 255
    4822:	6d e3       	ldi	r22, 0x3D	; 61
    4824:	74 e1       	ldi	r23, 0x14	; 20
    4826:	80 91 0e 14 	lds	r24, 0x140E	; 0x80140e <_serialReplyBufferHandle>
    482a:	90 91 0f 14 	lds	r25, 0x140F	; 0x80140f <_serialReplyBufferHandle+0x1>
    482e:	0e 94 ba 10 	call	0x2174	; 0x2174 <xStreamBufferSendFromISR>
    4832:	89 81       	ldd	r24, Y+1	; 0x01
    4834:	81 11       	cpse	r24, r1
    4836:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    483a:	10 92 0b 14 	sts	0x140B, r1	; 0x80140b <rec_buf_inp.2878>
    483e:	be 01       	movw	r22, r28
    4840:	6e 5f       	subi	r22, 0xFE	; 254
    4842:	7f 4f       	sbci	r23, 0xFF	; 255
    4844:	c8 01       	movw	r24, r16
    4846:	05 d6       	rcall	.+3082   	; 0x5452 <serial_getByte>
    4848:	88 23       	and	r24, r24
    484a:	61 f2       	breq	.-104    	; 0x47e4 <_serialCallBack+0x16>
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	1f 91       	pop	r17
    4856:	0f 91       	pop	r16
    4858:	08 95       	ret

0000485a <_uploadMessage>:
    485a:	0f 93       	push	r16
    485c:	1f 93       	push	r17
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	8c 01       	movw	r16, r24
    4864:	eb 01       	movw	r28, r22
    4866:	80 91 0e 14 	lds	r24, 0x140E	; 0x80140e <_serialReplyBufferHandle>
    486a:	90 91 0f 14 	lds	r25, 0x140F	; 0x80140f <_serialReplyBufferHandle+0x1>
    486e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <xStreamBufferReset>
    4872:	b8 01       	movw	r22, r16
    4874:	84 ed       	ldi	r24, 0xD4	; 212
    4876:	93 e1       	ldi	r25, 0x13	; 19
    4878:	0e 94 44 37 	call	0x6e88	; 0x6e88 <strcpy>
    487c:	20 97       	sbiw	r28, 0x00	; 0
    487e:	79 f0       	breq	.+30     	; 0x489e <_uploadMessage+0x44>
    4880:	e4 ed       	ldi	r30, 0xD4	; 212
    4882:	f3 e1       	ldi	r31, 0x13	; 19
    4884:	01 90       	ld	r0, Z+
    4886:	00 20       	and	r0, r0
    4888:	e9 f7       	brne	.-6      	; 0x4884 <_uploadMessage+0x2a>
    488a:	31 97       	sbiw	r30, 0x01	; 1
    488c:	80 e2       	ldi	r24, 0x20	; 32
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	91 83       	std	Z+1, r25	; 0x01
    4892:	80 83       	st	Z, r24
    4894:	be 01       	movw	r22, r28
    4896:	84 ed       	ldi	r24, 0xD4	; 212
    4898:	93 e1       	ldi	r25, 0x13	; 19
    489a:	0e 94 39 37 	call	0x6e72	; 0x6e72 <strcat>
    489e:	e4 ed       	ldi	r30, 0xD4	; 212
    48a0:	f3 e1       	ldi	r31, 0x13	; 19
    48a2:	df 01       	movw	r26, r30
    48a4:	0d 90       	ld	r0, X+
    48a6:	00 20       	and	r0, r0
    48a8:	e9 f7       	brne	.-6      	; 0x48a4 <_uploadMessage+0x4a>
    48aa:	11 97       	sbiw	r26, 0x01	; 1
    48ac:	8d e0       	ldi	r24, 0x0D	; 13
    48ae:	9a e0       	ldi	r25, 0x0A	; 10
    48b0:	11 96       	adiw	r26, 0x01	; 1
    48b2:	9c 93       	st	X, r25
    48b4:	8e 93       	st	-X, r24
    48b6:	12 96       	adiw	r26, 0x02	; 2
    48b8:	1c 92       	st	X, r1
    48ba:	01 90       	ld	r0, Z+
    48bc:	00 20       	and	r0, r0
    48be:	e9 f7       	brne	.-6      	; 0x48ba <_uploadMessage+0x60>
    48c0:	31 97       	sbiw	r30, 0x01	; 1
    48c2:	e4 5d       	subi	r30, 0xD4	; 212
    48c4:	f3 41       	sbci	r31, 0x13	; 19
    48c6:	ae 2f       	mov	r26, r30
    48c8:	84 ed       	ldi	r24, 0xD4	; 212
    48ca:	93 e1       	ldi	r25, 0x13	; 19
    48cc:	ac 01       	movw	r20, r24
    48ce:	6a 2f       	mov	r22, r26
    48d0:	80 91 10 14 	lds	r24, 0x1410	; 0x801410 <_rn2483_serial>
    48d4:	90 91 11 14 	lds	r25, 0x1411	; 0x801411 <_rn2483_serial+0x1>
    48d8:	67 d5       	rcall	.+2766   	; 0x53a8 <serial_sendBytes>
    48da:	81 11       	cpse	r24, r1
    48dc:	11 c0       	rjmp	.+34     	; 0x4900 <_uploadMessage+0xa6>
    48de:	08 e2       	ldi	r16, 0x28	; 40
    48e0:	15 e0       	ldi	r17, 0x05	; 5
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	4d e2       	ldi	r20, 0x2D	; 45
    48e8:	50 e0       	ldi	r21, 0x00	; 0
    48ea:	67 e9       	ldi	r22, 0x97	; 151
    48ec:	74 e1       	ldi	r23, 0x14	; 20
    48ee:	80 91 0e 14 	lds	r24, 0x140E	; 0x80140e <_serialReplyBufferHandle>
    48f2:	90 91 0f 14 	lds	r25, 0x140F	; 0x80140f <_serialReplyBufferHandle+0x1>
    48f6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <xStreamBufferReceive>
    48fa:	87 e9       	ldi	r24, 0x97	; 151
    48fc:	94 e1       	ldi	r25, 0x14	; 20
    48fe:	02 c0       	rjmp	.+4      	; 0x4904 <_uploadMessage+0xaa>
    4900:	80 e0       	ldi	r24, 0x00	; 0
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	df 91       	pop	r29
    4906:	cf 91       	pop	r28
    4908:	1f 91       	pop	r17
    490a:	0f 91       	pop	r16
    490c:	08 95       	ret

0000490e <_reply2ReturnCode>:
    490e:	2f 92       	push	r2
    4910:	3f 92       	push	r3
    4912:	4f 92       	push	r4
    4914:	5f 92       	push	r5
    4916:	6f 92       	push	r6
    4918:	7f 92       	push	r7
    491a:	8f 92       	push	r8
    491c:	9f 92       	push	r9
    491e:	af 92       	push	r10
    4920:	bf 92       	push	r11
    4922:	cf 92       	push	r12
    4924:	df 92       	push	r13
    4926:	ef 92       	push	r14
    4928:	ff 92       	push	r15
    492a:	0f 93       	push	r16
    492c:	1f 93       	push	r17
    492e:	cf 93       	push	r28
    4930:	df 93       	push	r29
    4932:	5c 01       	movw	r10, r24
    4934:	fc 01       	movw	r30, r24
    4936:	01 90       	ld	r0, Z+
    4938:	00 20       	and	r0, r0
    493a:	e9 f7       	brne	.-6      	; 0x4936 <_reply2ReturnCode+0x28>
    493c:	31 97       	sbiw	r30, 0x01	; 1
    493e:	6f 01       	movw	r12, r30
    4940:	c8 1a       	sub	r12, r24
    4942:	d9 0a       	sbc	r13, r25
    4944:	5c 2c       	mov	r5, r12
    4946:	0f 2e       	mov	r0, r31
    4948:	f6 eb       	ldi	r31, 0xB6	; 182
    494a:	8f 2e       	mov	r8, r31
    494c:	f8 e0       	ldi	r31, 0x08	; 8
    494e:	9f 2e       	mov	r9, r31
    4950:	f0 2d       	mov	r31, r0
    4952:	e1 2c       	mov	r14, r1
    4954:	f1 2c       	mov	r15, r1
    4956:	4c 2c       	mov	r4, r12
    4958:	37 01       	movw	r6, r14
    495a:	f4 01       	movw	r30, r8
    495c:	01 81       	ldd	r16, Z+1	; 0x01
    495e:	12 81       	ldd	r17, Z+2	; 0x02
    4960:	e8 01       	movw	r28, r16
    4962:	09 90       	ld	r0, Y+
    4964:	00 20       	and	r0, r0
    4966:	e9 f7       	brne	.-6      	; 0x4962 <_reply2ReturnCode+0x54>
    4968:	21 97       	sbiw	r28, 0x01	; 1
    496a:	c0 1b       	sub	r28, r16
    496c:	d1 0b       	sbc	r29, r17
    496e:	3c 2e       	mov	r3, r28
    4970:	f9 e0       	ldi	r31, 0x09	; 9
    4972:	cf 16       	cp	r12, r31
    4974:	d1 04       	cpc	r13, r1
    4976:	58 f0       	brcs	.+22     	; 0x498e <_reply2ReturnCode+0x80>
    4978:	f4 01       	movw	r30, r8
    497a:	20 80       	ld	r2, Z
    497c:	fe e0       	ldi	r31, 0x0E	; 14
    497e:	2f 12       	cpse	r2, r31
    4980:	06 c0       	rjmp	.+12     	; 0x498e <_reply2ReturnCode+0x80>
    4982:	b8 01       	movw	r22, r16
    4984:	c5 01       	movw	r24, r10
    4986:	0e 94 14 37 	call	0x6e28	; 0x6e28 <strcasestr>
    498a:	89 2b       	or	r24, r25
    498c:	09 f5       	brne	.+66     	; 0x49d0 <_reply2ReturnCode+0xc2>
    498e:	44 2d       	mov	r20, r4
    4990:	35 14       	cp	r3, r5
    4992:	08 f4       	brcc	.+2      	; 0x4996 <_reply2ReturnCode+0x88>
    4994:	4c 2f       	mov	r20, r28
    4996:	50 e0       	ldi	r21, 0x00	; 0
    4998:	b8 01       	movw	r22, r16
    499a:	c5 01       	movw	r24, r10
    499c:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <strncasecmp>
    49a0:	89 2b       	or	r24, r25
    49a2:	49 f4       	brne	.+18     	; 0x49b6 <_reply2ReturnCode+0xa8>
    49a4:	f3 01       	movw	r30, r6
    49a6:	ee 0f       	add	r30, r30
    49a8:	ff 1f       	adc	r31, r31
    49aa:	e6 0d       	add	r30, r6
    49ac:	f7 1d       	adc	r31, r7
    49ae:	ea 54       	subi	r30, 0x4A	; 74
    49b0:	f7 4f       	sbci	r31, 0xF7	; 247
    49b2:	20 80       	ld	r2, Z
    49b4:	0d c0       	rjmp	.+26     	; 0x49d0 <_reply2ReturnCode+0xc2>
    49b6:	8f ef       	ldi	r24, 0xFF	; 255
    49b8:	e8 1a       	sub	r14, r24
    49ba:	f8 0a       	sbc	r15, r24
    49bc:	e3 e0       	ldi	r30, 0x03	; 3
    49be:	8e 0e       	add	r8, r30
    49c0:	91 1c       	adc	r9, r1
    49c2:	f1 e1       	ldi	r31, 0x11	; 17
    49c4:	ef 16       	cp	r14, r31
    49c6:	f1 04       	cpc	r15, r1
    49c8:	39 f6       	brne	.-114    	; 0x4958 <_reply2ReturnCode+0x4a>
    49ca:	68 94       	set
    49cc:	22 24       	eor	r2, r2
    49ce:	24 f8       	bld	r2, 4
    49d0:	82 2d       	mov	r24, r2
    49d2:	df 91       	pop	r29
    49d4:	cf 91       	pop	r28
    49d6:	1f 91       	pop	r17
    49d8:	0f 91       	pop	r16
    49da:	ff 90       	pop	r15
    49dc:	ef 90       	pop	r14
    49de:	df 90       	pop	r13
    49e0:	cf 90       	pop	r12
    49e2:	bf 90       	pop	r11
    49e4:	af 90       	pop	r10
    49e6:	9f 90       	pop	r9
    49e8:	8f 90       	pop	r8
    49ea:	7f 90       	pop	r7
    49ec:	6f 90       	pop	r6
    49ee:	5f 90       	pop	r5
    49f0:	4f 90       	pop	r4
    49f2:	3f 90       	pop	r3
    49f4:	2f 90       	pop	r2
    49f6:	08 95       	ret

000049f8 <_uploadMessageRc>:
    49f8:	30 df       	rcall	.-416    	; 0x485a <_uploadMessage>
    49fa:	89 cf       	rjmp	.-238    	; 0x490e <_reply2ReturnCode>
    49fc:	08 95       	ret

000049fe <lora_driver_flushBuffers>:
    49fe:	80 91 0e 14 	lds	r24, 0x140E	; 0x80140e <_serialReplyBufferHandle>
    4a02:	90 91 0f 14 	lds	r25, 0x140F	; 0x80140f <_serialReplyBufferHandle+0x1>
    4a06:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <xStreamBufferReset>
    4a0a:	08 95       	ret

00004a0c <lora_driver_initialise>:
    4a0c:	8f 92       	push	r8
    4a0e:	9f 92       	push	r9
    4a10:	af 92       	push	r10
    4a12:	cf 92       	push	r12
    4a14:	ef 92       	push	r14
    4a16:	0f 93       	push	r16
    4a18:	1f 93       	push	r17
    4a1a:	cf 93       	push	r28
    4a1c:	c8 2f       	mov	r28, r24
    4a1e:	8b 01       	movw	r16, r22
    4a20:	41 e0       	ldi	r20, 0x01	; 1
    4a22:	60 e0       	ldi	r22, 0x00	; 0
    4a24:	70 e0       	ldi	r23, 0x00	; 0
    4a26:	88 ec       	ldi	r24, 0xC8	; 200
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <xStreamBufferGenericCreate>
    4a2e:	90 93 0f 14 	sts	0x140F, r25	; 0x80140f <_serialReplyBufferHandle+0x1>
    4a32:	80 93 0e 14 	sts	0x140E, r24	; 0x80140e <_serialReplyBufferHandle>
    4a36:	10 93 0d 14 	sts	0x140D, r17	; 0x80140d <_downlinkMessageBuffer+0x1>
    4a3a:	00 93 0c 14 	sts	0x140C, r16	; 0x80140c <_downlinkMessageBuffer>
    4a3e:	0f 2e       	mov	r0, r31
    4a40:	f7 ee       	ldi	r31, 0xE7	; 231
    4a42:	8f 2e       	mov	r8, r31
    4a44:	f3 e2       	ldi	r31, 0x23	; 35
    4a46:	9f 2e       	mov	r9, r31
    4a48:	f0 2d       	mov	r31, r0
    4a4a:	68 94       	set
    4a4c:	aa 24       	eor	r10, r10
    4a4e:	a6 f8       	bld	r10, 6
    4a50:	68 94       	set
    4a52:	cc 24       	eor	r12, r12
    4a54:	c6 f8       	bld	r12, 6
    4a56:	e1 2c       	mov	r14, r1
    4a58:	00 e0       	ldi	r16, 0x00	; 0
    4a5a:	23 e0       	ldi	r18, 0x03	; 3
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	51 ee       	ldi	r21, 0xE1	; 225
    4a60:	60 e0       	ldi	r22, 0x00	; 0
    4a62:	70 e0       	ldi	r23, 0x00	; 0
    4a64:	8c 2f       	mov	r24, r28
    4a66:	d2 d3       	rcall	.+1956   	; 0x520c <serial_create>
    4a68:	90 93 11 14 	sts	0x1411, r25	; 0x801411 <_rn2483_serial+0x1>
    4a6c:	80 93 10 14 	sts	0x1410, r24	; 0x801410 <_rn2483_serial>
    4a70:	e7 e0       	ldi	r30, 0x07	; 7
    4a72:	f1 e0       	ldi	r31, 0x01	; 1
    4a74:	80 81       	ld	r24, Z
    4a76:	80 61       	ori	r24, 0x10	; 16
    4a78:	80 83       	st	Z, r24
    4a7a:	cf 91       	pop	r28
    4a7c:	1f 91       	pop	r17
    4a7e:	0f 91       	pop	r16
    4a80:	ef 90       	pop	r14
    4a82:	cf 90       	pop	r12
    4a84:	af 90       	pop	r10
    4a86:	9f 90       	pop	r9
    4a88:	8f 90       	pop	r8
    4a8a:	08 95       	ret

00004a8c <lora_driver_resetRn2483>:
    4a8c:	88 23       	and	r24, r24
    4a8e:	31 f0       	breq	.+12     	; 0x4a9c <lora_driver_resetRn2483+0x10>
    4a90:	e8 e0       	ldi	r30, 0x08	; 8
    4a92:	f1 e0       	ldi	r31, 0x01	; 1
    4a94:	80 81       	ld	r24, Z
    4a96:	8f 7e       	andi	r24, 0xEF	; 239
    4a98:	80 83       	st	Z, r24
    4a9a:	08 95       	ret
    4a9c:	e8 e0       	ldi	r30, 0x08	; 8
    4a9e:	f1 e0       	ldi	r31, 0x01	; 1
    4aa0:	80 81       	ld	r24, Z
    4aa2:	80 61       	ori	r24, 0x10	; 16
    4aa4:	80 83       	st	Z, r24
    4aa6:	08 95       	ret

00004aa8 <lora_driver_rn2483FactoryReset>:
    4aa8:	60 e0       	ldi	r22, 0x00	; 0
    4aaa:	70 e0       	ldi	r23, 0x00	; 0
    4aac:	8c e3       	ldi	r24, 0x3C	; 60
    4aae:	96 e0       	ldi	r25, 0x06	; 6
    4ab0:	d4 de       	rcall	.-600    	; 0x485a <_uploadMessage>
    4ab2:	e7 e9       	ldi	r30, 0x97	; 151
    4ab4:	f4 e1       	ldi	r31, 0x14	; 20
    4ab6:	01 90       	ld	r0, Z+
    4ab8:	00 20       	and	r0, r0
    4aba:	e9 f7       	brne	.-6      	; 0x4ab6 <lora_driver_rn2483FactoryReset+0xe>
    4abc:	31 97       	sbiw	r30, 0x01	; 1
    4abe:	e7 59       	subi	r30, 0x97	; 151
    4ac0:	f4 41       	sbci	r31, 0x14	; 20
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	75 97       	sbiw	r30, 0x15	; 21
    4ac6:	08 f0       	brcs	.+2      	; 0x4aca <lora_driver_rn2483FactoryReset+0x22>
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	08 95       	ret

00004acc <lora_driver_getRn2483Hweui>:
    4acc:	cf 93       	push	r28
    4ace:	df 93       	push	r29
    4ad0:	ec 01       	movw	r28, r24
    4ad2:	60 e0       	ldi	r22, 0x00	; 0
    4ad4:	70 e0       	ldi	r23, 0x00	; 0
    4ad6:	8d e4       	ldi	r24, 0x4D	; 77
    4ad8:	96 e0       	ldi	r25, 0x06	; 6
    4ada:	bf de       	rcall	.-642    	; 0x485a <_uploadMessage>
    4adc:	e7 e9       	ldi	r30, 0x97	; 151
    4ade:	f4 e1       	ldi	r31, 0x14	; 20
    4ae0:	01 90       	ld	r0, Z+
    4ae2:	00 20       	and	r0, r0
    4ae4:	e9 f7       	brne	.-6      	; 0x4ae0 <lora_driver_getRn2483Hweui+0x14>
    4ae6:	e8 5a       	subi	r30, 0xA8	; 168
    4ae8:	f4 41       	sbci	r31, 0x14	; 20
    4aea:	39 f4       	brne	.+14     	; 0x4afa <lora_driver_getRn2483Hweui+0x2e>
    4aec:	67 e9       	ldi	r22, 0x97	; 151
    4aee:	74 e1       	ldi	r23, 0x14	; 20
    4af0:	ce 01       	movw	r24, r28
    4af2:	0e 94 44 37 	call	0x6e88	; 0x6e88 <strcpy>
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	02 c0       	rjmp	.+4      	; 0x4afe <lora_driver_getRn2483Hweui+0x32>
    4afa:	18 82       	st	Y, r1
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	df 91       	pop	r29
    4b00:	cf 91       	pop	r28
    4b02:	08 95       	ret

00004b04 <lora_driver_setDeviceIdentifier>:
    4b04:	fc 01       	movw	r30, r24
    4b06:	01 90       	ld	r0, Z+
    4b08:	00 20       	and	r0, r0
    4b0a:	e9 f7       	brne	.-6      	; 0x4b06 <lora_driver_setDeviceIdentifier+0x2>
    4b0c:	9f 01       	movw	r18, r30
    4b0e:	21 51       	subi	r18, 0x11	; 17
    4b10:	31 09       	sbc	r19, r1
    4b12:	28 17       	cp	r18, r24
    4b14:	39 07       	cpc	r19, r25
    4b16:	29 f4       	brne	.+10     	; 0x4b22 <lora_driver_setDeviceIdentifier+0x1e>
    4b18:	bc 01       	movw	r22, r24
    4b1a:	8b e7       	ldi	r24, 0x7B	; 123
    4b1c:	96 e0       	ldi	r25, 0x06	; 6
    4b1e:	6c cf       	rjmp	.-296    	; 0x49f8 <_uploadMessageRc>
    4b20:	08 95       	ret
    4b22:	89 e0       	ldi	r24, 0x09	; 9
    4b24:	08 95       	ret

00004b26 <lora_driver_setApplicationIdentifier>:
    4b26:	fc 01       	movw	r30, r24
    4b28:	01 90       	ld	r0, Z+
    4b2a:	00 20       	and	r0, r0
    4b2c:	e9 f7       	brne	.-6      	; 0x4b28 <lora_driver_setApplicationIdentifier+0x2>
    4b2e:	9f 01       	movw	r18, r30
    4b30:	21 51       	subi	r18, 0x11	; 17
    4b32:	31 09       	sbc	r19, r1
    4b34:	28 17       	cp	r18, r24
    4b36:	39 07       	cpc	r19, r25
    4b38:	29 f4       	brne	.+10     	; 0x4b44 <lora_driver_setApplicationIdentifier+0x1e>
    4b3a:	bc 01       	movw	r22, r24
    4b3c:	8a e8       	ldi	r24, 0x8A	; 138
    4b3e:	96 e0       	ldi	r25, 0x06	; 6
    4b40:	5b cf       	rjmp	.-330    	; 0x49f8 <_uploadMessageRc>
    4b42:	08 95       	ret
    4b44:	89 e0       	ldi	r24, 0x09	; 9
    4b46:	08 95       	ret

00004b48 <lora_driver_setApplicationKey>:
    4b48:	fc 01       	movw	r30, r24
    4b4a:	01 90       	ld	r0, Z+
    4b4c:	00 20       	and	r0, r0
    4b4e:	e9 f7       	brne	.-6      	; 0x4b4a <lora_driver_setApplicationKey+0x2>
    4b50:	9f 01       	movw	r18, r30
    4b52:	21 52       	subi	r18, 0x21	; 33
    4b54:	31 09       	sbc	r19, r1
    4b56:	28 17       	cp	r18, r24
    4b58:	39 07       	cpc	r19, r25
    4b5a:	29 f4       	brne	.+10     	; 0x4b66 <lora_driver_setApplicationKey+0x1e>
    4b5c:	bc 01       	movw	r22, r24
    4b5e:	89 e9       	ldi	r24, 0x99	; 153
    4b60:	96 e0       	ldi	r25, 0x06	; 6
    4b62:	4a cf       	rjmp	.-364    	; 0x49f8 <_uploadMessageRc>
    4b64:	08 95       	ret
    4b66:	89 e0       	ldi	r24, 0x09	; 9
    4b68:	08 95       	ret

00004b6a <lora_driver_saveMac>:
    4b6a:	60 e0       	ldi	r22, 0x00	; 0
    4b6c:	70 e0       	ldi	r23, 0x00	; 0
    4b6e:	88 ed       	ldi	r24, 0xD8	; 216
    4b70:	96 e0       	ldi	r25, 0x06	; 6
    4b72:	42 cf       	rjmp	.-380    	; 0x49f8 <_uploadMessageRc>
    4b74:	08 95       	ret

00004b76 <lora_driver_join>:
    4b76:	0f 93       	push	r16
    4b78:	1f 93       	push	r17
    4b7a:	e8 2f       	mov	r30, r24
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	ee 0f       	add	r30, r30
    4b80:	ff 1f       	adc	r31, r31
    4b82:	ee 54       	subi	r30, 0x4E	; 78
    4b84:	f7 4f       	sbci	r31, 0xF7	; 247
    4b86:	60 81       	ld	r22, Z
    4b88:	71 81       	ldd	r23, Z+1	; 0x01
    4b8a:	81 ee       	ldi	r24, 0xE1	; 225
    4b8c:	96 e0       	ldi	r25, 0x06	; 6
    4b8e:	34 df       	rcall	.-408    	; 0x49f8 <_uploadMessageRc>
    4b90:	81 11       	cpse	r24, r1
    4b92:	14 c0       	rjmp	.+40     	; 0x4bbc <lora_driver_join+0x46>
    4b94:	08 e2       	ldi	r16, 0x28	; 40
    4b96:	15 e0       	ldi	r17, 0x05	; 5
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	4d e2       	ldi	r20, 0x2D	; 45
    4b9e:	50 e0       	ldi	r21, 0x00	; 0
    4ba0:	67 e9       	ldi	r22, 0x97	; 151
    4ba2:	74 e1       	ldi	r23, 0x14	; 20
    4ba4:	80 91 0e 14 	lds	r24, 0x140E	; 0x80140e <_serialReplyBufferHandle>
    4ba8:	90 91 0f 14 	lds	r25, 0x140F	; 0x80140f <_serialReplyBufferHandle+0x1>
    4bac:	0e 94 fe 10 	call	0x21fc	; 0x21fc <xStreamBufferReceive>
    4bb0:	88 23       	and	r24, r24
    4bb2:	21 f0       	breq	.+8      	; 0x4bbc <lora_driver_join+0x46>
    4bb4:	87 e9       	ldi	r24, 0x97	; 151
    4bb6:	94 e1       	ldi	r25, 0x14	; 20
    4bb8:	aa de       	rcall	.-684    	; 0x490e <_reply2ReturnCode>
    4bba:	03 c0       	rjmp	.+6      	; 0x4bc2 <lora_driver_join+0x4c>
    4bbc:	87 e9       	ldi	r24, 0x97	; 151
    4bbe:	94 e1       	ldi	r25, 0x14	; 20
    4bc0:	a6 de       	rcall	.-692    	; 0x490e <_reply2ReturnCode>
    4bc2:	1f 91       	pop	r17
    4bc4:	0f 91       	pop	r16
    4bc6:	08 95       	ret

00004bc8 <lora_driver_sendUploadMessage>:
    4bc8:	0f 93       	push	r16
    4bca:	1f 93       	push	r17
    4bcc:	cf 93       	push	r28
    4bce:	df 93       	push	r29
    4bd0:	1f 92       	push	r1
    4bd2:	cd b7       	in	r28, 0x3d	; 61
    4bd4:	de b7       	in	r29, 0x3e	; 62
    4bd6:	db 01       	movw	r26, r22
    4bd8:	11 96       	adiw	r26, 0x01	; 1
    4bda:	9c 91       	ld	r25, X
    4bdc:	11 97       	sbiw	r26, 0x01	; 1
    4bde:	95 31       	cpi	r25, 0x15	; 21
    4be0:	08 f0       	brcs	.+2      	; 0x4be4 <lora_driver_sendUploadMessage+0x1c>
    4be2:	b4 c0       	rjmp	.+360    	; 0x4d4c <lora_driver_sendUploadMessage+0x184>
    4be4:	99 23       	and	r25, r25
    4be6:	81 f1       	breq	.+96     	; 0x4c48 <lora_driver_sendUploadMessage+0x80>
    4be8:	60 e0       	ldi	r22, 0x00	; 0
    4bea:	70 e0       	ldi	r23, 0x00	; 0
    4bec:	27 2f       	mov	r18, r23
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	46 2f       	mov	r20, r22
    4bf2:	50 e0       	ldi	r21, 0x00	; 0
    4bf4:	fd 01       	movw	r30, r26
    4bf6:	e4 0f       	add	r30, r20
    4bf8:	f5 1f       	adc	r31, r21
    4bfa:	92 81       	ldd	r25, Z+2	; 0x02
    4bfc:	92 95       	swap	r25
    4bfe:	9f 70       	andi	r25, 0x0F	; 15
    4c00:	9a 30       	cpi	r25, 0x0A	; 10
    4c02:	10 f0       	brcs	.+4      	; 0x4c08 <lora_driver_sendUploadMessage+0x40>
    4c04:	99 5c       	subi	r25, 0xC9	; 201
    4c06:	01 c0       	rjmp	.+2      	; 0x4c0a <lora_driver_sendUploadMessage+0x42>
    4c08:	90 5d       	subi	r25, 0xD0	; 208
    4c0a:	f9 01       	movw	r30, r18
    4c0c:	e8 5d       	subi	r30, 0xD8	; 216
    4c0e:	fb 4e       	sbci	r31, 0xEB	; 235
    4c10:	90 83       	st	Z, r25
    4c12:	2f 5f       	subi	r18, 0xFF	; 255
    4c14:	3f 4f       	sbci	r19, 0xFF	; 255
    4c16:	fd 01       	movw	r30, r26
    4c18:	e4 0f       	add	r30, r20
    4c1a:	f5 1f       	adc	r31, r21
    4c1c:	92 81       	ldd	r25, Z+2	; 0x02
    4c1e:	9f 70       	andi	r25, 0x0F	; 15
    4c20:	49 2f       	mov	r20, r25
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	4a 30       	cpi	r20, 0x0A	; 10
    4c26:	51 05       	cpc	r21, r1
    4c28:	14 f0       	brlt	.+4      	; 0x4c2e <lora_driver_sendUploadMessage+0x66>
    4c2a:	99 5c       	subi	r25, 0xC9	; 201
    4c2c:	01 c0       	rjmp	.+2      	; 0x4c30 <lora_driver_sendUploadMessage+0x68>
    4c2e:	90 5d       	subi	r25, 0xD0	; 208
    4c30:	f9 01       	movw	r30, r18
    4c32:	e8 5d       	subi	r30, 0xD8	; 216
    4c34:	fb 4e       	sbci	r31, 0xEB	; 235
    4c36:	90 83       	st	Z, r25
    4c38:	7e 5f       	subi	r23, 0xFE	; 254
    4c3a:	6f 5f       	subi	r22, 0xFF	; 255
    4c3c:	11 96       	adiw	r26, 0x01	; 1
    4c3e:	9c 91       	ld	r25, X
    4c40:	11 97       	sbiw	r26, 0x01	; 1
    4c42:	69 17       	cp	r22, r25
    4c44:	98 f2       	brcs	.-90     	; 0x4bec <lora_driver_sendUploadMessage+0x24>
    4c46:	01 c0       	rjmp	.+2      	; 0x4c4a <lora_driver_sendUploadMessage+0x82>
    4c48:	70 e0       	ldi	r23, 0x00	; 0
    4c4a:	e7 2f       	mov	r30, r23
    4c4c:	f0 e0       	ldi	r31, 0x00	; 0
    4c4e:	e8 5d       	subi	r30, 0xD8	; 216
    4c50:	fb 4e       	sbci	r31, 0xEB	; 235
    4c52:	10 82       	st	Z, r1
    4c54:	4c 91       	ld	r20, X
    4c56:	81 11       	cpse	r24, r1
    4c58:	03 c0       	rjmp	.+6      	; 0x4c60 <lora_driver_sendUploadMessage+0x98>
    4c5a:	8a ee       	ldi	r24, 0xEA	; 234
    4c5c:	96 e0       	ldi	r25, 0x06	; 6
    4c5e:	02 c0       	rjmp	.+4      	; 0x4c64 <lora_driver_sendUploadMessage+0x9c>
    4c60:	8c ee       	ldi	r24, 0xEC	; 236
    4c62:	96 e0       	ldi	r25, 0x06	; 6
    4c64:	28 e2       	ldi	r18, 0x28	; 40
    4c66:	34 e1       	ldi	r19, 0x14	; 20
    4c68:	3f 93       	push	r19
    4c6a:	2f 93       	push	r18
    4c6c:	1f 92       	push	r1
    4c6e:	4f 93       	push	r20
    4c70:	9f 93       	push	r25
    4c72:	8f 93       	push	r24
    4c74:	80 ef       	ldi	r24, 0xF0	; 240
    4c76:	96 e0       	ldi	r25, 0x06	; 6
    4c78:	9f 93       	push	r25
    4c7a:	8f 93       	push	r24
    4c7c:	8a e6       	ldi	r24, 0x6A	; 106
    4c7e:	94 e1       	ldi	r25, 0x14	; 20
    4c80:	9f 93       	push	r25
    4c82:	8f 93       	push	r24
    4c84:	0e 94 ed 37 	call	0x6fda	; 0x6fda <sprintf>
    4c88:	60 e0       	ldi	r22, 0x00	; 0
    4c8a:	70 e0       	ldi	r23, 0x00	; 0
    4c8c:	8a e6       	ldi	r24, 0x6A	; 106
    4c8e:	94 e1       	ldi	r25, 0x14	; 20
    4c90:	b3 de       	rcall	.-666    	; 0x49f8 <_uploadMessageRc>
    4c92:	0f b6       	in	r0, 0x3f	; 63
    4c94:	f8 94       	cli
    4c96:	de bf       	out	0x3e, r29	; 62
    4c98:	0f be       	out	0x3f, r0	; 63
    4c9a:	cd bf       	out	0x3d, r28	; 61
    4c9c:	81 11       	cpse	r24, r1
    4c9e:	59 c0       	rjmp	.+178    	; 0x4d52 <lora_driver_sendUploadMessage+0x18a>
    4ca0:	08 e2       	ldi	r16, 0x28	; 40
    4ca2:	15 e0       	ldi	r17, 0x05	; 5
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	4d e2       	ldi	r20, 0x2D	; 45
    4caa:	50 e0       	ldi	r21, 0x00	; 0
    4cac:	67 e9       	ldi	r22, 0x97	; 151
    4cae:	74 e1       	ldi	r23, 0x14	; 20
    4cb0:	80 91 0e 14 	lds	r24, 0x140E	; 0x80140e <_serialReplyBufferHandle>
    4cb4:	90 91 0f 14 	lds	r25, 0x140F	; 0x80140f <_serialReplyBufferHandle+0x1>
    4cb8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <xStreamBufferReceive>
    4cbc:	88 23       	and	r24, r24
    4cbe:	09 f4       	brne	.+2      	; 0x4cc2 <lora_driver_sendUploadMessage+0xfa>
    4cc0:	47 c0       	rjmp	.+142    	; 0x4d50 <lora_driver_sendUploadMessage+0x188>
    4cc2:	87 e9       	ldi	r24, 0x97	; 151
    4cc4:	94 e1       	ldi	r25, 0x14	; 20
    4cc6:	23 de       	rcall	.-954    	; 0x490e <_reply2ReturnCode>
    4cc8:	8e 30       	cpi	r24, 0x0E	; 14
    4cca:	09 f0       	breq	.+2      	; 0x4cce <lora_driver_sendUploadMessage+0x106>
    4ccc:	42 c0       	rjmp	.+132    	; 0x4d52 <lora_driver_sendUploadMessage+0x18a>
    4cce:	87 e0       	ldi	r24, 0x07	; 7
    4cd0:	89 83       	std	Y+1, r24	; 0x01
    4cd2:	80 91 0c 14 	lds	r24, 0x140C	; 0x80140c <_downlinkMessageBuffer>
    4cd6:	90 91 0d 14 	lds	r25, 0x140D	; 0x80140d <_downlinkMessageBuffer+0x1>
    4cda:	89 2b       	or	r24, r25
    4cdc:	a9 f1       	breq	.+106    	; 0x4d48 <lora_driver_sendUploadMessage+0x180>
    4cde:	be 01       	movw	r22, r28
    4ce0:	6f 5f       	subi	r22, 0xFF	; 255
    4ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce4:	87 e9       	ldi	r24, 0x97	; 151
    4ce6:	94 e1       	ldi	r25, 0x14	; 20
    4ce8:	68 d1       	rcall	.+720    	; 0x4fba <decode_port_no>
    4cea:	80 93 12 14 	sts	0x1412, r24	; 0x801412 <_downlinkPayload>
    4cee:	e9 81       	ldd	r30, Y+1	; 0x01
    4cf0:	f0 e0       	ldi	r31, 0x00	; 0
    4cf2:	e9 56       	subi	r30, 0x69	; 105
    4cf4:	fb 4e       	sbci	r31, 0xEB	; 235
    4cf6:	df 01       	movw	r26, r30
    4cf8:	0d 90       	ld	r0, X+
    4cfa:	00 20       	and	r0, r0
    4cfc:	e9 f7       	brne	.-6      	; 0x4cf8 <lora_driver_sendUploadMessage+0x130>
    4cfe:	11 97       	sbiw	r26, 0x01	; 1
    4d00:	ae 1b       	sub	r26, r30
    4d02:	bf 0b       	sbc	r27, r31
    4d04:	aa 23       	and	r26, r26
    4d06:	91 f0       	breq	.+36     	; 0x4d2c <lora_driver_sendUploadMessage+0x164>
    4d08:	bb 27       	eor	r27, r27
    4d0a:	cd 01       	movw	r24, r26
    4d0c:	01 97       	sbiw	r24, 0x01	; 1
    4d0e:	9c 01       	movw	r18, r24
    4d10:	12 f4       	brpl	.+4      	; 0x4d16 <lora_driver_sendUploadMessage+0x14e>
    4d12:	2f 5f       	subi	r18, 0xFF	; 255
    4d14:	3f 4f       	sbci	r19, 0xFF	; 255
    4d16:	35 95       	asr	r19
    4d18:	27 95       	ror	r18
    4d1a:	20 93 13 14 	sts	0x1413, r18	; 0x801413 <_downlinkPayload+0x1>
    4d1e:	af 01       	movw	r20, r30
    4d20:	4f 5f       	subi	r20, 0xFF	; 255
    4d22:	5f 4f       	sbci	r21, 0xFF	; 255
    4d24:	64 e1       	ldi	r22, 0x14	; 20
    4d26:	84 e1       	ldi	r24, 0x14	; 20
    4d28:	94 e1       	ldi	r25, 0x14	; 20
    4d2a:	73 d1       	rcall	.+742    	; 0x5012 <decode_hexadecimal_string_bytes>
    4d2c:	01 e0       	ldi	r16, 0x01	; 1
    4d2e:	10 e0       	ldi	r17, 0x00	; 0
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	46 e1       	ldi	r20, 0x16	; 22
    4d36:	50 e0       	ldi	r21, 0x00	; 0
    4d38:	62 e1       	ldi	r22, 0x12	; 18
    4d3a:	74 e1       	ldi	r23, 0x14	; 20
    4d3c:	80 91 0c 14 	lds	r24, 0x140C	; 0x80140c <_downlinkMessageBuffer>
    4d40:	90 91 0d 14 	lds	r25, 0x140D	; 0x80140d <_downlinkMessageBuffer+0x1>
    4d44:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xStreamBufferSend>
    4d48:	8e e0       	ldi	r24, 0x0E	; 14
    4d4a:	03 c0       	rjmp	.+6      	; 0x4d52 <lora_driver_sendUploadMessage+0x18a>
    4d4c:	84 e1       	ldi	r24, 0x14	; 20
    4d4e:	01 c0       	rjmp	.+2      	; 0x4d52 <lora_driver_sendUploadMessage+0x18a>
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	0f 90       	pop	r0
    4d54:	df 91       	pop	r29
    4d56:	cf 91       	pop	r28
    4d58:	1f 91       	pop	r17
    4d5a:	0f 91       	pop	r16
    4d5c:	08 95       	ret

00004d5e <lora_driver_setAdaptiveDataRate>:
    4d5e:	81 30       	cpi	r24, 0x01	; 1
    4d60:	19 f0       	breq	.+6      	; 0x4d68 <lora_driver_setAdaptiveDataRate+0xa>
    4d62:	60 e0       	ldi	r22, 0x00	; 0
    4d64:	77 e0       	ldi	r23, 0x07	; 7
    4d66:	02 c0       	rjmp	.+4      	; 0x4d6c <lora_driver_setAdaptiveDataRate+0xe>
    4d68:	69 ed       	ldi	r22, 0xD9	; 217
    4d6a:	77 e0       	ldi	r23, 0x07	; 7
    4d6c:	84 e0       	ldi	r24, 0x04	; 4
    4d6e:	97 e0       	ldi	r25, 0x07	; 7
    4d70:	43 ce       	rjmp	.-890    	; 0x49f8 <_uploadMessageRc>
    4d72:	08 95       	ret

00004d74 <lora_driver_setReceiveDelay>:
    4d74:	9f 93       	push	r25
    4d76:	8f 93       	push	r24
    4d78:	85 e3       	ldi	r24, 0x35	; 53
    4d7a:	97 e0       	ldi	r25, 0x07	; 7
    4d7c:	9f 93       	push	r25
    4d7e:	8f 93       	push	r24
    4d80:	8a e6       	ldi	r24, 0x6A	; 106
    4d82:	94 e1       	ldi	r25, 0x14	; 20
    4d84:	9f 93       	push	r25
    4d86:	8f 93       	push	r24
    4d88:	0e 94 ed 37 	call	0x6fda	; 0x6fda <sprintf>
    4d8c:	60 e0       	ldi	r22, 0x00	; 0
    4d8e:	70 e0       	ldi	r23, 0x00	; 0
    4d90:	8a e6       	ldi	r24, 0x6A	; 106
    4d92:	94 e1       	ldi	r25, 0x14	; 20
    4d94:	31 de       	rcall	.-926    	; 0x49f8 <_uploadMessageRc>
    4d96:	0f 90       	pop	r0
    4d98:	0f 90       	pop	r0
    4d9a:	0f 90       	pop	r0
    4d9c:	0f 90       	pop	r0
    4d9e:	0f 90       	pop	r0
    4da0:	0f 90       	pop	r0
    4da2:	08 95       	ret

00004da4 <lora_driver_configureToEu868>:
    4da4:	2f 92       	push	r2
    4da6:	3f 92       	push	r3
    4da8:	4f 92       	push	r4
    4daa:	5f 92       	push	r5
    4dac:	6f 92       	push	r6
    4dae:	7f 92       	push	r7
    4db0:	8f 92       	push	r8
    4db2:	9f 92       	push	r9
    4db4:	af 92       	push	r10
    4db6:	bf 92       	push	r11
    4db8:	cf 92       	push	r12
    4dba:	df 92       	push	r13
    4dbc:	ef 92       	push	r14
    4dbe:	ff 92       	push	r15
    4dc0:	0f 93       	push	r16
    4dc2:	1f 93       	push	r17
    4dc4:	cf 93       	push	r28
    4dc6:	df 93       	push	r29
    4dc8:	cd b7       	in	r28, 0x3d	; 61
    4dca:	de b7       	in	r29, 0x3e	; 62
    4dcc:	a0 97       	sbiw	r28, 0x20	; 32
    4dce:	0f b6       	in	r0, 0x3f	; 63
    4dd0:	f8 94       	cli
    4dd2:	de bf       	out	0x3e, r29	; 62
    4dd4:	0f be       	out	0x3f, r0	; 63
    4dd6:	cd bf       	out	0x3d, r28	; 61
    4dd8:	62 e6       	ldi	r22, 0x62	; 98
    4dda:	77 e0       	ldi	r23, 0x07	; 7
    4ddc:	8e e6       	ldi	r24, 0x6E	; 110
    4dde:	97 e0       	ldi	r25, 0x07	; 7
    4de0:	3c dd       	rcall	.-1416   	; 0x485a <_uploadMessage>
    4de2:	95 dd       	rcall	.-1238   	; 0x490e <_reply2ReturnCode>
    4de4:	81 11       	cpse	r24, r1
    4de6:	a3 c0       	rjmp	.+326    	; 0x4f2e <lora_driver_configureToEu868+0x18a>
    4de8:	80 e2       	ldi	r24, 0x20	; 32
    4dea:	e2 e2       	ldi	r30, 0x22	; 34
    4dec:	f2 e0       	ldi	r31, 0x02	; 2
    4dee:	de 01       	movw	r26, r28
    4df0:	11 96       	adiw	r26, 0x01	; 1
    4df2:	01 90       	ld	r0, Z+
    4df4:	0d 92       	st	X+, r0
    4df6:	8a 95       	dec	r24
    4df8:	e1 f7       	brne	.-8      	; 0x4df2 <lora_driver_configureToEu868+0x4e>
    4dfa:	9e 01       	movw	r18, r28
    4dfc:	2f 5f       	subi	r18, 0xFF	; 255
    4dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    4e00:	69 01       	movw	r12, r18
    4e02:	e1 2c       	mov	r14, r1
    4e04:	f1 2c       	mov	r15, r1
    4e06:	0f 2e       	mov	r0, r31
    4e08:	fa e7       	ldi	r31, 0x7A	; 122
    4e0a:	af 2e       	mov	r10, r31
    4e0c:	f7 e0       	ldi	r31, 0x07	; 7
    4e0e:	bf 2e       	mov	r11, r31
    4e10:	f0 2d       	mov	r31, r0
    4e12:	0a e6       	ldi	r16, 0x6A	; 106
    4e14:	14 e1       	ldi	r17, 0x14	; 20
    4e16:	0f 2e       	mov	r0, r31
    4e18:	f3 e9       	ldi	r31, 0x93	; 147
    4e1a:	4f 2e       	mov	r4, r31
    4e1c:	f7 e0       	ldi	r31, 0x07	; 7
    4e1e:	5f 2e       	mov	r5, r31
    4e20:	f0 2d       	mov	r31, r0
    4e22:	0f 2e       	mov	r0, r31
    4e24:	fa ea       	ldi	r31, 0xAA	; 170
    4e26:	8f 2e       	mov	r8, r31
    4e28:	f7 e0       	ldi	r31, 0x07	; 7
    4e2a:	9f 2e       	mov	r9, r31
    4e2c:	f0 2d       	mov	r31, r0
    4e2e:	0f 2e       	mov	r0, r31
    4e30:	f4 ec       	ldi	r31, 0xC4	; 196
    4e32:	6f 2e       	mov	r6, r31
    4e34:	f7 e0       	ldi	r31, 0x07	; 7
    4e36:	7f 2e       	mov	r7, r31
    4e38:	f0 2d       	mov	r31, r0
    4e3a:	3e 2c       	mov	r3, r14
    4e3c:	2f 2c       	mov	r2, r15
    4e3e:	ff 92       	push	r15
    4e40:	ef 92       	push	r14
    4e42:	bf 92       	push	r11
    4e44:	af 92       	push	r10
    4e46:	1f 93       	push	r17
    4e48:	0f 93       	push	r16
    4e4a:	0e 94 ed 37 	call	0x6fda	; 0x6fda <sprintf>
    4e4e:	60 e0       	ldi	r22, 0x00	; 0
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	c8 01       	movw	r24, r16
    4e54:	02 dd       	rcall	.-1532   	; 0x485a <_uploadMessage>
    4e56:	5b dd       	rcall	.-1354   	; 0x490e <_reply2ReturnCode>
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	0f 90       	pop	r0
    4e60:	0f 90       	pop	r0
    4e62:	0f 90       	pop	r0
    4e64:	81 11       	cpse	r24, r1
    4e66:	63 c0       	rjmp	.+198    	; 0x4f2e <lora_driver_configureToEu868+0x18a>
    4e68:	32 e0       	ldi	r19, 0x02	; 2
    4e6a:	3e 15       	cp	r19, r14
    4e6c:	e8 f4       	brcc	.+58     	; 0x4ea8 <lora_driver_configureToEu868+0x104>
    4e6e:	f6 01       	movw	r30, r12
    4e70:	83 81       	ldd	r24, Z+3	; 0x03
    4e72:	8f 93       	push	r24
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	8f 93       	push	r24
    4e78:	81 81       	ldd	r24, Z+1	; 0x01
    4e7a:	8f 93       	push	r24
    4e7c:	80 81       	ld	r24, Z
    4e7e:	8f 93       	push	r24
    4e80:	ff 92       	push	r15
    4e82:	ef 92       	push	r14
    4e84:	5f 92       	push	r5
    4e86:	4f 92       	push	r4
    4e88:	1f 93       	push	r17
    4e8a:	0f 93       	push	r16
    4e8c:	0e 94 ed 37 	call	0x6fda	; 0x6fda <sprintf>
    4e90:	60 e0       	ldi	r22, 0x00	; 0
    4e92:	70 e0       	ldi	r23, 0x00	; 0
    4e94:	c8 01       	movw	r24, r16
    4e96:	e1 dc       	rcall	.-1598   	; 0x485a <_uploadMessage>
    4e98:	3a dd       	rcall	.-1420   	; 0x490e <_reply2ReturnCode>
    4e9a:	0f b6       	in	r0, 0x3f	; 63
    4e9c:	f8 94       	cli
    4e9e:	de bf       	out	0x3e, r29	; 62
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	cd bf       	out	0x3d, r28	; 61
    4ea4:	81 11       	cpse	r24, r1
    4ea6:	43 c0       	rjmp	.+134    	; 0x4f2e <lora_driver_configureToEu868+0x18a>
    4ea8:	2f 92       	push	r2
    4eaa:	3f 92       	push	r3
    4eac:	9f 92       	push	r9
    4eae:	8f 92       	push	r8
    4eb0:	1f 93       	push	r17
    4eb2:	0f 93       	push	r16
    4eb4:	0e 94 ed 37 	call	0x6fda	; 0x6fda <sprintf>
    4eb8:	60 e0       	ldi	r22, 0x00	; 0
    4eba:	70 e0       	ldi	r23, 0x00	; 0
    4ebc:	c8 01       	movw	r24, r16
    4ebe:	cd dc       	rcall	.-1638   	; 0x485a <_uploadMessage>
    4ec0:	26 dd       	rcall	.-1460   	; 0x490e <_reply2ReturnCode>
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	0f 90       	pop	r0
    4ece:	81 11       	cpse	r24, r1
    4ed0:	2e c0       	rjmp	.+92     	; 0x4f2e <lora_driver_configureToEu868+0x18a>
    4ed2:	2f 92       	push	r2
    4ed4:	3f 92       	push	r3
    4ed6:	7f 92       	push	r7
    4ed8:	6f 92       	push	r6
    4eda:	1f 93       	push	r17
    4edc:	0f 93       	push	r16
    4ede:	0e 94 ed 37 	call	0x6fda	; 0x6fda <sprintf>
    4ee2:	60 e0       	ldi	r22, 0x00	; 0
    4ee4:	70 e0       	ldi	r23, 0x00	; 0
    4ee6:	c8 01       	movw	r24, r16
    4ee8:	b8 dc       	rcall	.-1680   	; 0x485a <_uploadMessage>
    4eea:	11 dd       	rcall	.-1502   	; 0x490e <_reply2ReturnCode>
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	0f 90       	pop	r0
    4ef4:	0f 90       	pop	r0
    4ef6:	0f 90       	pop	r0
    4ef8:	81 11       	cpse	r24, r1
    4efa:	19 c0       	rjmp	.+50     	; 0x4f2e <lora_driver_configureToEu868+0x18a>
    4efc:	3f ef       	ldi	r19, 0xFF	; 255
    4efe:	e3 1a       	sub	r14, r19
    4f00:	f3 0a       	sbc	r15, r19
    4f02:	84 e0       	ldi	r24, 0x04	; 4
    4f04:	c8 0e       	add	r12, r24
    4f06:	d1 1c       	adc	r13, r1
    4f08:	98 e0       	ldi	r25, 0x08	; 8
    4f0a:	e9 16       	cp	r14, r25
    4f0c:	f1 04       	cpc	r15, r1
    4f0e:	09 f0       	breq	.+2      	; 0x4f12 <lora_driver_configureToEu868+0x16e>
    4f10:	94 cf       	rjmp	.-216    	; 0x4e3a <lora_driver_configureToEu868+0x96>
    4f12:	60 e0       	ldi	r22, 0x00	; 0
    4f14:	70 e0       	ldi	r23, 0x00	; 0
    4f16:	8c ed       	ldi	r24, 0xDC	; 220
    4f18:	97 e0       	ldi	r25, 0x07	; 7
    4f1a:	9f dc       	rcall	.-1730   	; 0x485a <_uploadMessage>
    4f1c:	f8 dc       	rcall	.-1552   	; 0x490e <_reply2ReturnCode>
    4f1e:	81 11       	cpse	r24, r1
    4f20:	06 c0       	rjmp	.+12     	; 0x4f2e <lora_driver_configureToEu868+0x18a>
    4f22:	60 e0       	ldi	r22, 0x00	; 0
    4f24:	70 e0       	ldi	r23, 0x00	; 0
    4f26:	8d ee       	ldi	r24, 0xED	; 237
    4f28:	97 e0       	ldi	r25, 0x07	; 7
    4f2a:	97 dc       	rcall	.-1746   	; 0x485a <_uploadMessage>
    4f2c:	f0 dc       	rcall	.-1568   	; 0x490e <_reply2ReturnCode>
    4f2e:	a0 96       	adiw	r28, 0x20	; 32
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	f8 94       	cli
    4f34:	de bf       	out	0x3e, r29	; 62
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	cd bf       	out	0x3d, r28	; 61
    4f3a:	df 91       	pop	r29
    4f3c:	cf 91       	pop	r28
    4f3e:	1f 91       	pop	r17
    4f40:	0f 91       	pop	r16
    4f42:	ff 90       	pop	r15
    4f44:	ef 90       	pop	r14
    4f46:	df 90       	pop	r13
    4f48:	cf 90       	pop	r12
    4f4a:	bf 90       	pop	r11
    4f4c:	af 90       	pop	r10
    4f4e:	9f 90       	pop	r9
    4f50:	8f 90       	pop	r8
    4f52:	7f 90       	pop	r7
    4f54:	6f 90       	pop	r6
    4f56:	5f 90       	pop	r5
    4f58:	4f 90       	pop	r4
    4f5a:	3f 90       	pop	r3
    4f5c:	2f 90       	pop	r2
    4f5e:	08 95       	ret

00004f60 <lora_driver_setOtaaIdentity>:
    4f60:	ef 92       	push	r14
    4f62:	ff 92       	push	r15
    4f64:	0f 93       	push	r16
    4f66:	1f 93       	push	r17
    4f68:	cf 93       	push	r28
    4f6a:	df 93       	push	r29
    4f6c:	ec 01       	movw	r28, r24
    4f6e:	8b 01       	movw	r16, r22
    4f70:	7a 01       	movw	r14, r20
    4f72:	81 e0       	ldi	r24, 0x01	; 1
    4f74:	f4 de       	rcall	.-536    	; 0x4d5e <lora_driver_setAdaptiveDataRate>
    4f76:	81 11       	cpse	r24, r1
    4f78:	0d c0       	rjmp	.+26     	; 0x4f94 <lora_driver_setOtaaIdentity+0x34>
    4f7a:	ce 01       	movw	r24, r28
    4f7c:	d4 dd       	rcall	.-1112   	; 0x4b26 <lora_driver_setApplicationIdentifier>
    4f7e:	81 11       	cpse	r24, r1
    4f80:	09 c0       	rjmp	.+18     	; 0x4f94 <lora_driver_setOtaaIdentity+0x34>
    4f82:	c8 01       	movw	r24, r16
    4f84:	e1 dd       	rcall	.-1086   	; 0x4b48 <lora_driver_setApplicationKey>
    4f86:	81 11       	cpse	r24, r1
    4f88:	05 c0       	rjmp	.+10     	; 0x4f94 <lora_driver_setOtaaIdentity+0x34>
    4f8a:	c7 01       	movw	r24, r14
    4f8c:	bb dd       	rcall	.-1162   	; 0x4b04 <lora_driver_setDeviceIdentifier>
    4f8e:	81 11       	cpse	r24, r1
    4f90:	01 c0       	rjmp	.+2      	; 0x4f94 <lora_driver_setOtaaIdentity+0x34>
    4f92:	eb dd       	rcall	.-1066   	; 0x4b6a <lora_driver_saveMac>
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	1f 91       	pop	r17
    4f9a:	0f 91       	pop	r16
    4f9c:	ff 90       	pop	r15
    4f9e:	ef 90       	pop	r14
    4fa0:	08 95       	ret

00004fa2 <lora_driver_mapReturnCodeToText>:
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	ee 0f       	add	r30, r30
    4fa8:	ff 1f       	adc	r31, r31
    4faa:	8e 0f       	add	r24, r30
    4fac:	9f 1f       	adc	r25, r31
    4fae:	fc 01       	movw	r30, r24
    4fb0:	ea 54       	subi	r30, 0x4A	; 74
    4fb2:	f7 4f       	sbci	r31, 0xF7	; 247
    4fb4:	81 81       	ldd	r24, Z+1	; 0x01
    4fb6:	92 81       	ldd	r25, Z+2	; 0x02
    4fb8:	08 95       	ret

00004fba <decode_port_no>:
    4fba:	dc 01       	movw	r26, r24
    4fbc:	00 97       	sbiw	r24, 0x00	; 0
    4fbe:	29 f1       	breq	.+74     	; 0x500a <decode_port_no+0x50>
    4fc0:	fb 01       	movw	r30, r22
    4fc2:	20 81       	ld	r18, Z
    4fc4:	fc 01       	movw	r30, r24
    4fc6:	01 90       	ld	r0, Z+
    4fc8:	00 20       	and	r0, r0
    4fca:	e9 f7       	brne	.-6      	; 0x4fc6 <decode_port_no+0xc>
    4fcc:	31 97       	sbiw	r30, 0x01	; 1
    4fce:	e8 1b       	sub	r30, r24
    4fd0:	f9 0b       	sbc	r31, r25
    4fd2:	82 2f       	mov	r24, r18
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	e8 17       	cp	r30, r24
    4fd8:	f9 07       	cpc	r31, r25
    4fda:	c8 f0       	brcs	.+50     	; 0x500e <decode_port_no+0x54>
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	08 c0       	rjmp	.+16     	; 0x4ff0 <decode_port_no+0x36>
    4fe0:	88 0f       	add	r24, r24
    4fe2:	38 2f       	mov	r19, r24
    4fe4:	33 0f       	add	r19, r19
    4fe6:	33 0f       	add	r19, r19
    4fe8:	83 0f       	add	r24, r19
    4fea:	80 53       	subi	r24, 0x30	; 48
    4fec:	89 0f       	add	r24, r25
    4fee:	2f 5f       	subi	r18, 0xFF	; 255
    4ff0:	fd 01       	movw	r30, r26
    4ff2:	e2 0f       	add	r30, r18
    4ff4:	f1 1d       	adc	r31, r1
    4ff6:	90 81       	ld	r25, Z
    4ff8:	30 ed       	ldi	r19, 0xD0	; 208
    4ffa:	39 0f       	add	r19, r25
    4ffc:	3a 30       	cpi	r19, 0x0A	; 10
    4ffe:	10 f4       	brcc	.+4      	; 0x5004 <decode_port_no+0x4a>
    5000:	91 11       	cpse	r25, r1
    5002:	ee cf       	rjmp	.-36     	; 0x4fe0 <decode_port_no+0x26>
    5004:	fb 01       	movw	r30, r22
    5006:	20 83       	st	Z, r18
    5008:	08 95       	ret
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	08 95       	ret
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	08 95       	ret

00005012 <decode_hexadecimal_string_bytes>:
    5012:	0f 93       	push	r16
    5014:	1f 93       	push	r17
    5016:	cf 93       	push	r28
    5018:	df 93       	push	r29
    501a:	dc 01       	movw	r26, r24
    501c:	ea 01       	movw	r28, r20
    501e:	20 97       	sbiw	r28, 0x00	; 0
    5020:	e1 f1       	breq	.+120    	; 0x509a <decode_hexadecimal_string_bytes+0x88>
    5022:	fa 01       	movw	r30, r20
    5024:	01 90       	ld	r0, Z+
    5026:	00 20       	and	r0, r0
    5028:	e9 f7       	brne	.-6      	; 0x5024 <decode_hexadecimal_string_bytes+0x12>
    502a:	31 97       	sbiw	r30, 0x01	; 1
    502c:	e4 1b       	sub	r30, r20
    502e:	f5 0b       	sbc	r31, r21
    5030:	32 97       	sbiw	r30, 0x02	; 2
    5032:	10 f5       	brcc	.+68     	; 0x5078 <decode_hexadecimal_string_bytes+0x66>
    5034:	32 c0       	rjmp	.+100    	; 0x509a <decode_hexadecimal_string_bytes+0x88>
    5036:	8d 01       	movw	r16, r26
    5038:	04 0f       	add	r16, r20
    503a:	15 1f       	adc	r17, r21
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	ae 01       	movw	r20, r28
    5040:	42 0f       	add	r20, r18
    5042:	53 1f       	adc	r21, r19
    5044:	fa 01       	movw	r30, r20
    5046:	90 81       	ld	r25, Z
    5048:	91 34       	cpi	r25, 0x41	; 65
    504a:	28 f0       	brcs	.+10     	; 0x5056 <decode_hexadecimal_string_bytes+0x44>
    504c:	97 53       	subi	r25, 0x37	; 55
    504e:	59 2f       	mov	r21, r25
    5050:	52 95       	swap	r21
    5052:	50 7f       	andi	r21, 0xF0	; 240
    5054:	03 c0       	rjmp	.+6      	; 0x505c <decode_hexadecimal_string_bytes+0x4a>
    5056:	59 2f       	mov	r21, r25
    5058:	52 95       	swap	r21
    505a:	50 7f       	andi	r21, 0xF0	; 240
    505c:	2c 0f       	add	r18, r28
    505e:	3d 1f       	adc	r19, r29
    5060:	f9 01       	movw	r30, r18
    5062:	91 81       	ldd	r25, Z+1	; 0x01
    5064:	91 34       	cpi	r25, 0x41	; 65
    5066:	10 f0       	brcs	.+4      	; 0x506c <decode_hexadecimal_string_bytes+0x5a>
    5068:	97 53       	subi	r25, 0x37	; 55
    506a:	01 c0       	rjmp	.+2      	; 0x506e <decode_hexadecimal_string_bytes+0x5c>
    506c:	90 53       	subi	r25, 0x30	; 48
    506e:	95 0f       	add	r25, r21
    5070:	f8 01       	movw	r30, r16
    5072:	90 83       	st	Z, r25
    5074:	8f 5f       	subi	r24, 0xFF	; 255
    5076:	01 c0       	rjmp	.+2      	; 0x507a <decode_hexadecimal_string_bytes+0x68>
    5078:	80 e0       	ldi	r24, 0x00	; 0
    507a:	28 2f       	mov	r18, r24
    507c:	22 0f       	add	r18, r18
    507e:	48 2f       	mov	r20, r24
    5080:	50 e0       	ldi	r21, 0x00	; 0
    5082:	fe 01       	movw	r30, r28
    5084:	01 90       	ld	r0, Z+
    5086:	00 20       	and	r0, r0
    5088:	e9 f7       	brne	.-6      	; 0x5084 <decode_hexadecimal_string_bytes+0x72>
    508a:	31 97       	sbiw	r30, 0x01	; 1
    508c:	ec 1b       	sub	r30, r28
    508e:	fd 0b       	sbc	r31, r29
    5090:	4e 17       	cp	r20, r30
    5092:	5f 07       	cpc	r21, r31
    5094:	10 f4       	brcc	.+4      	; 0x509a <decode_hexadecimal_string_bytes+0x88>
    5096:	86 13       	cpse	r24, r22
    5098:	ce cf       	rjmp	.-100    	; 0x5036 <decode_hexadecimal_string_bytes+0x24>
    509a:	df 91       	pop	r29
    509c:	cf 91       	pop	r28
    509e:	1f 91       	pop	r17
    50a0:	0f 91       	pop	r16
    50a2:	08 95       	ret

000050a4 <_serialCallBack>:
    50a4:	80 91 c7 14 	lds	r24, 0x14C7	; 0x8014c7 <crc_sum.1945>
    50a8:	86 0f       	add	r24, r22
    50aa:	80 93 c7 14 	sts	0x14C7, r24	; 0x8014c7 <crc_sum.1945>
    50ae:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <_mh_state>
    50b2:	91 30       	cpi	r25, 0x01	; 1
    50b4:	79 f0       	breq	.+30     	; 0x50d4 <_serialCallBack+0x30>
    50b6:	28 f0       	brcs	.+10     	; 0x50c2 <_serialCallBack+0x1e>
    50b8:	92 30       	cpi	r25, 0x02	; 2
    50ba:	a9 f0       	breq	.+42     	; 0x50e6 <_serialCallBack+0x42>
    50bc:	93 30       	cpi	r25, 0x03	; 3
    50be:	19 f1       	breq	.+70     	; 0x5106 <_serialCallBack+0x62>
    50c0:	08 95       	ret
    50c2:	6f 3f       	cpi	r22, 0xFF	; 255
    50c4:	09 f0       	breq	.+2      	; 0x50c8 <_serialCallBack+0x24>
    50c6:	48 c0       	rjmp	.+144    	; 0x5158 <_serialCallBack+0xb4>
    50c8:	10 92 c7 14 	sts	0x14C7, r1	; 0x8014c7 <crc_sum.1945>
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_mh_state>
    50d2:	08 95       	ret
    50d4:	66 38       	cpi	r22, 0x86	; 134
    50d6:	09 f0       	breq	.+2      	; 0x50da <_serialCallBack+0x36>
    50d8:	3f c0       	rjmp	.+126    	; 0x5158 <_serialCallBack+0xb4>
    50da:	10 92 c6 14 	sts	0x14C6, r1	; 0x8014c6 <inDex.1943>
    50de:	82 e0       	ldi	r24, 0x02	; 2
    50e0:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_mh_state>
    50e4:	08 95       	ret
    50e6:	e0 91 c6 14 	lds	r30, 0x14C6	; 0x8014c6 <inDex.1943>
    50ea:	81 e0       	ldi	r24, 0x01	; 1
    50ec:	8e 0f       	add	r24, r30
    50ee:	80 93 c6 14 	sts	0x14C6, r24	; 0x8014c6 <inDex.1943>
    50f2:	f0 e0       	ldi	r31, 0x00	; 0
    50f4:	ec 53       	subi	r30, 0x3C	; 60
    50f6:	fb 4e       	sbci	r31, 0xEB	; 235
    50f8:	60 83       	st	Z, r22
    50fa:	82 30       	cpi	r24, 0x02	; 2
    50fc:	69 f5       	brne	.+90     	; 0x5158 <_serialCallBack+0xb4>
    50fe:	83 e0       	ldi	r24, 0x03	; 3
    5100:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_mh_state>
    5104:	08 95       	ret
    5106:	90 91 c6 14 	lds	r25, 0x14C6	; 0x8014c6 <inDex.1943>
    510a:	21 e0       	ldi	r18, 0x01	; 1
    510c:	29 0f       	add	r18, r25
    510e:	20 93 c6 14 	sts	0x14C6, r18	; 0x8014c6 <inDex.1943>
    5112:	96 30       	cpi	r25, 0x06	; 6
    5114:	09 f5       	brne	.+66     	; 0x5158 <_serialCallBack+0xb4>
    5116:	81 11       	cpse	r24, r1
    5118:	0e c0       	rjmp	.+28     	; 0x5136 <_serialCallBack+0x92>
    511a:	e4 ec       	ldi	r30, 0xC4	; 196
    511c:	f4 e1       	ldi	r31, 0x14	; 20
    511e:	80 81       	ld	r24, Z
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	98 2f       	mov	r25, r24
    5124:	88 27       	eor	r24, r24
    5126:	21 81       	ldd	r18, Z+1	; 0x01
    5128:	82 0f       	add	r24, r18
    512a:	91 1d       	adc	r25, r1
    512c:	90 93 cc 14 	sts	0x14CC, r25	; 0x8014cc <_ppm+0x1>
    5130:	80 93 cb 14 	sts	0x14CB, r24	; 0x8014cb <_ppm>
    5134:	04 c0       	rjmp	.+8      	; 0x513e <_serialCallBack+0x9a>
    5136:	10 92 cc 14 	sts	0x14CC, r1	; 0x8014cc <_ppm+0x1>
    513a:	10 92 cb 14 	sts	0x14CB, r1	; 0x8014cb <_ppm>
    513e:	10 92 ca 14 	sts	0x14CA, r1	; 0x8014ca <_mh_state>
    5142:	e0 91 c8 14 	lds	r30, 0x14C8	; 0x8014c8 <_appCallBack>
    5146:	f0 91 c9 14 	lds	r31, 0x14C9	; 0x8014c9 <_appCallBack+0x1>
    514a:	30 97       	sbiw	r30, 0x00	; 0
    514c:	29 f0       	breq	.+10     	; 0x5158 <_serialCallBack+0xb4>
    514e:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_ppm>
    5152:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_ppm+0x1>
    5156:	19 95       	eicall
    5158:	08 95       	ret

0000515a <mh_z19_initialise>:
    515a:	8f 92       	push	r8
    515c:	9f 92       	push	r9
    515e:	af 92       	push	r10
    5160:	cf 92       	push	r12
    5162:	ef 92       	push	r14
    5164:	0f 93       	push	r16
    5166:	0f 2e       	mov	r0, r31
    5168:	f2 e5       	ldi	r31, 0x52	; 82
    516a:	8f 2e       	mov	r8, r31
    516c:	f8 e2       	ldi	r31, 0x28	; 40
    516e:	9f 2e       	mov	r9, r31
    5170:	f0 2d       	mov	r31, r0
    5172:	68 94       	set
    5174:	aa 24       	eor	r10, r10
    5176:	a4 f8       	bld	r10, 4
    5178:	68 94       	set
    517a:	cc 24       	eor	r12, r12
    517c:	c4 f8       	bld	r12, 4
    517e:	e1 2c       	mov	r14, r1
    5180:	00 e0       	ldi	r16, 0x00	; 0
    5182:	23 e0       	ldi	r18, 0x03	; 3
    5184:	40 e8       	ldi	r20, 0x80	; 128
    5186:	55 e2       	ldi	r21, 0x25	; 37
    5188:	60 e0       	ldi	r22, 0x00	; 0
    518a:	70 e0       	ldi	r23, 0x00	; 0
    518c:	3f d0       	rcall	.+126    	; 0x520c <serial_create>
    518e:	90 93 ce 14 	sts	0x14CE, r25	; 0x8014ce <_serial+0x1>
    5192:	80 93 cd 14 	sts	0x14CD, r24	; 0x8014cd <_serial>
    5196:	0f 91       	pop	r16
    5198:	ef 90       	pop	r14
    519a:	cf 90       	pop	r12
    519c:	af 90       	pop	r10
    519e:	9f 90       	pop	r9
    51a0:	8f 90       	pop	r8
    51a2:	08 95       	ret

000051a4 <mh_z19_injectCallBack>:
    51a4:	90 93 c9 14 	sts	0x14C9, r25	; 0x8014c9 <_appCallBack+0x1>
    51a8:	80 93 c8 14 	sts	0x14C8, r24	; 0x8014c8 <_appCallBack>
    51ac:	08 95       	ret

000051ae <mh_z19_takeMeassuring>:
    51ae:	cf 93       	push	r28
    51b0:	df 93       	push	r29
    51b2:	cd b7       	in	r28, 0x3d	; 61
    51b4:	de b7       	in	r29, 0x3e	; 62
    51b6:	29 97       	sbiw	r28, 0x09	; 9
    51b8:	0f b6       	in	r0, 0x3f	; 63
    51ba:	f8 94       	cli
    51bc:	de bf       	out	0x3e, r29	; 62
    51be:	0f be       	out	0x3f, r0	; 63
    51c0:	cd bf       	out	0x3d, r28	; 61
    51c2:	89 e0       	ldi	r24, 0x09	; 9
    51c4:	e2 e4       	ldi	r30, 0x42	; 66
    51c6:	f2 e0       	ldi	r31, 0x02	; 2
    51c8:	9e 01       	movw	r18, r28
    51ca:	2f 5f       	subi	r18, 0xFF	; 255
    51cc:	3f 4f       	sbci	r19, 0xFF	; 255
    51ce:	d9 01       	movw	r26, r18
    51d0:	01 90       	ld	r0, Z+
    51d2:	0d 92       	st	X+, r0
    51d4:	8a 95       	dec	r24
    51d6:	e1 f7       	brne	.-8      	; 0x51d0 <mh_z19_takeMeassuring+0x22>
    51d8:	10 92 cc 14 	sts	0x14CC, r1	; 0x8014cc <_ppm+0x1>
    51dc:	10 92 cb 14 	sts	0x14CB, r1	; 0x8014cb <_ppm>
    51e0:	80 91 cd 14 	lds	r24, 0x14CD	; 0x8014cd <_serial>
    51e4:	90 91 ce 14 	lds	r25, 0x14CE	; 0x8014ce <_serial+0x1>
    51e8:	00 97       	sbiw	r24, 0x00	; 0
    51ea:	31 f0       	breq	.+12     	; 0x51f8 <mh_z19_takeMeassuring+0x4a>
    51ec:	42 2f       	mov	r20, r18
    51ee:	53 2f       	mov	r21, r19
    51f0:	69 e0       	ldi	r22, 0x09	; 9
    51f2:	da d0       	rcall	.+436    	; 0x53a8 <serial_sendBytes>
    51f4:	80 e0       	ldi	r24, 0x00	; 0
    51f6:	01 c0       	rjmp	.+2      	; 0x51fa <mh_z19_takeMeassuring+0x4c>
    51f8:	82 e0       	ldi	r24, 0x02	; 2
    51fa:	29 96       	adiw	r28, 0x09	; 9
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	de bf       	out	0x3e, r29	; 62
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	df 91       	pop	r29
    5208:	cf 91       	pop	r28
    520a:	08 95       	ret

0000520c <serial_create>:
    520c:	2f 92       	push	r2
    520e:	3f 92       	push	r3
    5210:	4f 92       	push	r4
    5212:	5f 92       	push	r5
    5214:	6f 92       	push	r6
    5216:	7f 92       	push	r7
    5218:	8f 92       	push	r8
    521a:	9f 92       	push	r9
    521c:	af 92       	push	r10
    521e:	cf 92       	push	r12
    5220:	ef 92       	push	r14
    5222:	ff 92       	push	r15
    5224:	0f 93       	push	r16
    5226:	1f 93       	push	r17
    5228:	cf 93       	push	r28
    522a:	df 93       	push	r29
    522c:	cd b7       	in	r28, 0x3d	; 61
    522e:	de b7       	in	r29, 0x3e	; 62
    5230:	f8 2e       	mov	r15, r24
    5232:	2a 01       	movw	r4, r20
    5234:	3b 01       	movw	r6, r22
    5236:	88 e0       	ldi	r24, 0x08	; 8
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <malloc>
    523e:	8c 01       	movw	r16, r24
    5240:	8f 2d       	mov	r24, r15
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	fc 01       	movw	r30, r24
    5246:	ee 0f       	add	r30, r30
    5248:	ff 1f       	adc	r31, r31
    524a:	e1 53       	subi	r30, 0x31	; 49
    524c:	fb 4e       	sbci	r31, 0xEB	; 235
    524e:	11 83       	std	Z+1, r17	; 0x01
    5250:	00 83       	st	Z, r16
    5252:	01 15       	cp	r16, r1
    5254:	11 05       	cpc	r17, r1
    5256:	09 f4       	brne	.+2      	; 0x525a <serial_create+0x4e>
    5258:	6a c0       	rjmp	.+212    	; 0x532e <serial_create+0x122>
    525a:	88 0f       	add	r24, r24
    525c:	99 1f       	adc	r25, r25
    525e:	fc 01       	movw	r30, r24
    5260:	e5 5f       	subi	r30, 0xF5	; 245
    5262:	fd 4f       	sbci	r31, 0xFD	; 253
    5264:	80 81       	ld	r24, Z
    5266:	91 81       	ldd	r25, Z+1	; 0x01
    5268:	d8 01       	movw	r26, r16
    526a:	8d 93       	st	X+, r24
    526c:	9c 93       	st	X, r25
    526e:	8c 2d       	mov	r24, r12
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	88 0f       	add	r24, r24
    5274:	99 1f       	adc	r25, r25
    5276:	88 0f       	add	r24, r24
    5278:	99 1f       	adc	r25, r25
    527a:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <malloc>
    527e:	1c 01       	movw	r2, r24
    5280:	86 e0       	ldi	r24, 0x06	; 6
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <malloc>
    5288:	7c 01       	movw	r14, r24
    528a:	4c 2d       	mov	r20, r12
    528c:	b1 01       	movw	r22, r2
    528e:	e6 d6       	rcall	.+3532   	; 0x605c <fifo_init>
    5290:	f8 01       	movw	r30, r16
    5292:	f5 82       	std	Z+5, r15	; 0x05
    5294:	e4 82       	std	Z+4, r14	; 0x04
    5296:	8a 2d       	mov	r24, r10
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	88 0f       	add	r24, r24
    529c:	99 1f       	adc	r25, r25
    529e:	88 0f       	add	r24, r24
    52a0:	99 1f       	adc	r25, r25
    52a2:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <malloc>
    52a6:	1c 01       	movw	r2, r24
    52a8:	86 e0       	ldi	r24, 0x06	; 6
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <malloc>
    52b0:	7c 01       	movw	r14, r24
    52b2:	4a 2d       	mov	r20, r10
    52b4:	b1 01       	movw	r22, r2
    52b6:	d2 d6       	rcall	.+3492   	; 0x605c <fifo_init>
    52b8:	d8 01       	movw	r26, r16
    52ba:	13 96       	adiw	r26, 0x03	; 3
    52bc:	fc 92       	st	X, r15
    52be:	ee 92       	st	-X, r14
    52c0:	12 97       	sbiw	r26, 0x02	; 2
    52c2:	17 96       	adiw	r26, 0x07	; 7
    52c4:	9c 92       	st	X, r9
    52c6:	8e 92       	st	-X, r8
    52c8:	16 97       	sbiw	r26, 0x06	; 6
    52ca:	ff b6       	in	r15, 0x3f	; 63
    52cc:	f8 94       	cli
    52ce:	ed 91       	ld	r30, X+
    52d0:	fc 91       	ld	r31, X
    52d2:	11 97       	sbiw	r26, 0x01	; 1
    52d4:	36 97       	sbiw	r30, 0x06	; 6
    52d6:	80 81       	ld	r24, Z
    52d8:	82 60       	ori	r24, 0x02	; 2
    52da:	80 83       	st	Z, r24
    52dc:	8d 90       	ld	r8, X+
    52de:	9c 90       	ld	r9, X
    52e0:	c3 01       	movw	r24, r6
    52e2:	b2 01       	movw	r22, r4
    52e4:	0e 94 44 34 	call	0x6888	; 0x6888 <__floatunsisf>
    52e8:	20 e0       	ldi	r18, 0x00	; 0
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	40 e0       	ldi	r20, 0x00	; 0
    52ee:	51 e4       	ldi	r21, 0x41	; 65
    52f0:	dd d8       	rcall	.-3654   	; 0x44ac <__mulsf3>
    52f2:	9b 01       	movw	r18, r22
    52f4:	ac 01       	movw	r20, r24
    52f6:	60 e0       	ldi	r22, 0x00	; 0
    52f8:	74 e2       	ldi	r23, 0x24	; 36
    52fa:	84 e7       	ldi	r24, 0x74	; 116
    52fc:	9b e4       	ldi	r25, 0x4B	; 75
    52fe:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <__divsf3>
    5302:	20 e0       	ldi	r18, 0x00	; 0
    5304:	30 e0       	ldi	r19, 0x00	; 0
    5306:	40 e8       	ldi	r20, 0x80	; 128
    5308:	5f e3       	ldi	r21, 0x3F	; 63
    530a:	33 d9       	rcall	.-3482   	; 0x4572 <__subsf3>
    530c:	47 d8       	rcall	.-3954   	; 0x439c <__fixunssfsi>
    530e:	f4 01       	movw	r30, r8
    5310:	32 97       	sbiw	r30, 0x02	; 2
    5312:	60 83       	st	Z, r22
    5314:	d8 01       	movw	r26, r16
    5316:	ed 91       	ld	r30, X+
    5318:	fc 91       	ld	r31, X
    531a:	11 97       	sbiw	r26, 0x01	; 1
    531c:	35 97       	sbiw	r30, 0x05	; 5
    531e:	88 e9       	ldi	r24, 0x98	; 152
    5320:	80 83       	st	Z, r24
    5322:	ed 91       	ld	r30, X+
    5324:	fc 91       	ld	r31, X
    5326:	34 97       	sbiw	r30, 0x04	; 4
    5328:	86 e0       	ldi	r24, 0x06	; 6
    532a:	80 83       	st	Z, r24
    532c:	ff be       	out	0x3f, r15	; 63
    532e:	c8 01       	movw	r24, r16
    5330:	df 91       	pop	r29
    5332:	cf 91       	pop	r28
    5334:	1f 91       	pop	r17
    5336:	0f 91       	pop	r16
    5338:	ff 90       	pop	r15
    533a:	ef 90       	pop	r14
    533c:	cf 90       	pop	r12
    533e:	af 90       	pop	r10
    5340:	9f 90       	pop	r9
    5342:	8f 90       	pop	r8
    5344:	7f 90       	pop	r7
    5346:	6f 90       	pop	r6
    5348:	5f 90       	pop	r5
    534a:	4f 90       	pop	r4
    534c:	3f 90       	pop	r3
    534e:	2f 90       	pop	r2
    5350:	08 95       	ret

00005352 <serial_sendByte>:
    5352:	cf 93       	push	r28
    5354:	df 93       	push	r29
    5356:	dc 01       	movw	r26, r24
    5358:	89 2b       	or	r24, r25
    535a:	01 f1       	breq	.+64     	; 0x539c <serial_sendByte+0x4a>
    535c:	12 96       	adiw	r26, 0x02	; 2
    535e:	ed 91       	ld	r30, X+
    5360:	fc 91       	ld	r31, X
    5362:	13 97       	sbiw	r26, 0x03	; 3
    5364:	93 81       	ldd	r25, Z+3	; 0x03
    5366:	82 81       	ldd	r24, Z+2	; 0x02
    5368:	25 81       	ldd	r18, Z+5	; 0x05
    536a:	98 1b       	sub	r25, r24
    536c:	92 23       	and	r25, r18
    536e:	84 81       	ldd	r24, Z+4	; 0x04
    5370:	98 17       	cp	r25, r24
    5372:	b1 f0       	breq	.+44     	; 0x53a0 <serial_sendByte+0x4e>
    5374:	83 81       	ldd	r24, Z+3	; 0x03
    5376:	26 95       	lsr	r18
    5378:	28 23       	and	r18, r24
    537a:	c0 81       	ld	r28, Z
    537c:	d1 81       	ldd	r29, Z+1	; 0x01
    537e:	c2 0f       	add	r28, r18
    5380:	d1 1d       	adc	r29, r1
    5382:	68 83       	st	Y, r22
    5384:	8f 5f       	subi	r24, 0xFF	; 255
    5386:	95 81       	ldd	r25, Z+5	; 0x05
    5388:	89 23       	and	r24, r25
    538a:	83 83       	std	Z+3, r24	; 0x03
    538c:	ed 91       	ld	r30, X+
    538e:	fc 91       	ld	r31, X
    5390:	35 97       	sbiw	r30, 0x05	; 5
    5392:	80 81       	ld	r24, Z
    5394:	80 62       	ori	r24, 0x20	; 32
    5396:	80 83       	st	Z, r24
    5398:	80 e0       	ldi	r24, 0x00	; 0
    539a:	03 c0       	rjmp	.+6      	; 0x53a2 <serial_sendByte+0x50>
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	01 c0       	rjmp	.+2      	; 0x53a2 <serial_sendByte+0x50>
    53a0:	82 e0       	ldi	r24, 0x02	; 2
    53a2:	df 91       	pop	r29
    53a4:	cf 91       	pop	r28
    53a6:	08 95       	ret

000053a8 <serial_sendBytes>:
    53a8:	ef 92       	push	r14
    53aa:	ff 92       	push	r15
    53ac:	0f 93       	push	r16
    53ae:	1f 93       	push	r17
    53b0:	cf 93       	push	r28
    53b2:	df 93       	push	r29
    53b4:	7c 01       	movw	r14, r24
    53b6:	00 97       	sbiw	r24, 0x00	; 0
    53b8:	09 f4       	brne	.+2      	; 0x53bc <serial_sendBytes+0x14>
    53ba:	41 c0       	rjmp	.+130    	; 0x543e <serial_sendBytes+0x96>
    53bc:	dc 01       	movw	r26, r24
    53be:	12 96       	adiw	r26, 0x02	; 2
    53c0:	ed 91       	ld	r30, X+
    53c2:	fc 91       	ld	r31, X
    53c4:	13 97       	sbiw	r26, 0x03	; 3
    53c6:	93 81       	ldd	r25, Z+3	; 0x03
    53c8:	82 81       	ldd	r24, Z+2	; 0x02
    53ca:	98 1b       	sub	r25, r24
    53cc:	85 81       	ldd	r24, Z+5	; 0x05
    53ce:	98 23       	and	r25, r24
    53d0:	84 81       	ldd	r24, Z+4	; 0x04
    53d2:	89 1b       	sub	r24, r25
    53d4:	86 17       	cp	r24, r22
    53d6:	a8 f1       	brcs	.+106    	; 0x5442 <serial_sendBytes+0x9a>
    53d8:	66 23       	and	r22, r22
    53da:	41 f1       	breq	.+80     	; 0x542c <serial_sendBytes+0x84>
    53dc:	84 2f       	mov	r24, r20
    53de:	95 2f       	mov	r25, r21
    53e0:	dc 01       	movw	r26, r24
    53e2:	61 50       	subi	r22, 0x01	; 1
    53e4:	46 2f       	mov	r20, r22
    53e6:	50 e0       	ldi	r21, 0x00	; 0
    53e8:	4f 5f       	subi	r20, 0xFF	; 255
    53ea:	5f 4f       	sbci	r21, 0xFF	; 255
    53ec:	48 0f       	add	r20, r24
    53ee:	59 1f       	adc	r21, r25
    53f0:	e7 01       	movw	r28, r14
    53f2:	ea 81       	ldd	r30, Y+2	; 0x02
    53f4:	fb 81       	ldd	r31, Y+3	; 0x03
    53f6:	93 81       	ldd	r25, Z+3	; 0x03
    53f8:	82 81       	ldd	r24, Z+2	; 0x02
    53fa:	25 81       	ldd	r18, Z+5	; 0x05
    53fc:	98 1b       	sub	r25, r24
    53fe:	92 23       	and	r25, r18
    5400:	84 81       	ldd	r24, Z+4	; 0x04
    5402:	98 17       	cp	r25, r24
    5404:	79 f0       	breq	.+30     	; 0x5424 <serial_sendBytes+0x7c>
    5406:	8c 91       	ld	r24, X
    5408:	93 81       	ldd	r25, Z+3	; 0x03
    540a:	26 95       	lsr	r18
    540c:	29 23       	and	r18, r25
    540e:	60 81       	ld	r22, Z
    5410:	71 81       	ldd	r23, Z+1	; 0x01
    5412:	8b 01       	movw	r16, r22
    5414:	02 0f       	add	r16, r18
    5416:	11 1d       	adc	r17, r1
    5418:	e8 01       	movw	r28, r16
    541a:	88 83       	st	Y, r24
    541c:	9f 5f       	subi	r25, 0xFF	; 255
    541e:	85 81       	ldd	r24, Z+5	; 0x05
    5420:	98 23       	and	r25, r24
    5422:	93 83       	std	Z+3, r25	; 0x03
    5424:	11 96       	adiw	r26, 0x01	; 1
    5426:	a4 17       	cp	r26, r20
    5428:	b5 07       	cpc	r27, r21
    542a:	11 f7       	brne	.-60     	; 0x53f0 <serial_sendBytes+0x48>
    542c:	d7 01       	movw	r26, r14
    542e:	ed 91       	ld	r30, X+
    5430:	fc 91       	ld	r31, X
    5432:	35 97       	sbiw	r30, 0x05	; 5
    5434:	80 81       	ld	r24, Z
    5436:	80 62       	ori	r24, 0x20	; 32
    5438:	80 83       	st	Z, r24
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	03 c0       	rjmp	.+6      	; 0x5444 <serial_sendBytes+0x9c>
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <serial_sendBytes+0x9c>
    5442:	82 e0       	ldi	r24, 0x02	; 2
    5444:	df 91       	pop	r29
    5446:	cf 91       	pop	r28
    5448:	1f 91       	pop	r17
    544a:	0f 91       	pop	r16
    544c:	ff 90       	pop	r15
    544e:	ef 90       	pop	r14
    5450:	08 95       	ret

00005452 <serial_getByte>:
    5452:	00 97       	sbiw	r24, 0x00	; 0
    5454:	d1 f0       	breq	.+52     	; 0x548a <serial_getByte+0x38>
    5456:	dc 01       	movw	r26, r24
    5458:	14 96       	adiw	r26, 0x04	; 4
    545a:	ed 91       	ld	r30, X+
    545c:	fc 91       	ld	r31, X
    545e:	15 97       	sbiw	r26, 0x05	; 5
    5460:	93 81       	ldd	r25, Z+3	; 0x03
    5462:	82 81       	ldd	r24, Z+2	; 0x02
    5464:	98 17       	cp	r25, r24
    5466:	99 f0       	breq	.+38     	; 0x548e <serial_getByte+0x3c>
    5468:	92 81       	ldd	r25, Z+2	; 0x02
    546a:	85 81       	ldd	r24, Z+5	; 0x05
    546c:	86 95       	lsr	r24
    546e:	89 23       	and	r24, r25
    5470:	a0 81       	ld	r26, Z
    5472:	b1 81       	ldd	r27, Z+1	; 0x01
    5474:	a8 0f       	add	r26, r24
    5476:	b1 1d       	adc	r27, r1
    5478:	8c 91       	ld	r24, X
    547a:	db 01       	movw	r26, r22
    547c:	8c 93       	st	X, r24
    547e:	9f 5f       	subi	r25, 0xFF	; 255
    5480:	85 81       	ldd	r24, Z+5	; 0x05
    5482:	98 23       	and	r25, r24
    5484:	92 83       	std	Z+2, r25	; 0x02
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	08 95       	ret
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	08 95       	ret
    548e:	83 e0       	ldi	r24, 0x03	; 3
    5490:	08 95       	ret

00005492 <__vector_25>:
    5492:	1f 92       	push	r1
    5494:	0f 92       	push	r0
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	0f 92       	push	r0
    549a:	11 24       	eor	r1, r1
    549c:	0b b6       	in	r0, 0x3b	; 59
    549e:	0f 92       	push	r0
    54a0:	2f 93       	push	r18
    54a2:	3f 93       	push	r19
    54a4:	4f 93       	push	r20
    54a6:	5f 93       	push	r21
    54a8:	6f 93       	push	r22
    54aa:	7f 93       	push	r23
    54ac:	8f 93       	push	r24
    54ae:	9f 93       	push	r25
    54b0:	af 93       	push	r26
    54b2:	bf 93       	push	r27
    54b4:	cf 93       	push	r28
    54b6:	df 93       	push	r29
    54b8:	ef 93       	push	r30
    54ba:	ff 93       	push	r31
    54bc:	a0 91 cf 14 	lds	r26, 0x14CF	; 0x8014cf <_ser_handle>
    54c0:	b0 91 d0 14 	lds	r27, 0x14D0	; 0x8014d0 <_ser_handle+0x1>
    54c4:	10 97       	sbiw	r26, 0x00	; 0
    54c6:	11 f1       	breq	.+68     	; 0x550c <__vector_25+0x7a>
    54c8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    54cc:	14 96       	adiw	r26, 0x04	; 4
    54ce:	ed 91       	ld	r30, X+
    54d0:	fc 91       	ld	r31, X
    54d2:	15 97       	sbiw	r26, 0x05	; 5
    54d4:	93 81       	ldd	r25, Z+3	; 0x03
    54d6:	82 81       	ldd	r24, Z+2	; 0x02
    54d8:	25 81       	ldd	r18, Z+5	; 0x05
    54da:	98 1b       	sub	r25, r24
    54dc:	92 23       	and	r25, r18
    54de:	84 81       	ldd	r24, Z+4	; 0x04
    54e0:	98 17       	cp	r25, r24
    54e2:	61 f0       	breq	.+24     	; 0x54fc <__vector_25+0x6a>
    54e4:	83 81       	ldd	r24, Z+3	; 0x03
    54e6:	26 95       	lsr	r18
    54e8:	28 23       	and	r18, r24
    54ea:	c0 81       	ld	r28, Z
    54ec:	d1 81       	ldd	r29, Z+1	; 0x01
    54ee:	c2 0f       	add	r28, r18
    54f0:	d1 1d       	adc	r29, r1
    54f2:	68 83       	st	Y, r22
    54f4:	8f 5f       	subi	r24, 0xFF	; 255
    54f6:	95 81       	ldd	r25, Z+5	; 0x05
    54f8:	89 23       	and	r24, r25
    54fa:	83 83       	std	Z+3, r24	; 0x03
    54fc:	16 96       	adiw	r26, 0x06	; 6
    54fe:	ed 91       	ld	r30, X+
    5500:	fc 91       	ld	r31, X
    5502:	17 97       	sbiw	r26, 0x07	; 7
    5504:	30 97       	sbiw	r30, 0x00	; 0
    5506:	11 f0       	breq	.+4      	; 0x550c <__vector_25+0x7a>
    5508:	cd 01       	movw	r24, r26
    550a:	19 95       	eicall
    550c:	ff 91       	pop	r31
    550e:	ef 91       	pop	r30
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	bf 91       	pop	r27
    5516:	af 91       	pop	r26
    5518:	9f 91       	pop	r25
    551a:	8f 91       	pop	r24
    551c:	7f 91       	pop	r23
    551e:	6f 91       	pop	r22
    5520:	5f 91       	pop	r21
    5522:	4f 91       	pop	r20
    5524:	3f 91       	pop	r19
    5526:	2f 91       	pop	r18
    5528:	0f 90       	pop	r0
    552a:	0b be       	out	0x3b, r0	; 59
    552c:	0f 90       	pop	r0
    552e:	0f be       	out	0x3f, r0	; 63
    5530:	0f 90       	pop	r0
    5532:	1f 90       	pop	r1
    5534:	18 95       	reti

00005536 <__vector_26>:
    5536:	1f 92       	push	r1
    5538:	0f 92       	push	r0
    553a:	0f b6       	in	r0, 0x3f	; 63
    553c:	0f 92       	push	r0
    553e:	11 24       	eor	r1, r1
    5540:	0b b6       	in	r0, 0x3b	; 59
    5542:	0f 92       	push	r0
    5544:	2f 93       	push	r18
    5546:	8f 93       	push	r24
    5548:	9f 93       	push	r25
    554a:	af 93       	push	r26
    554c:	bf 93       	push	r27
    554e:	ef 93       	push	r30
    5550:	ff 93       	push	r31
    5552:	e0 91 cf 14 	lds	r30, 0x14CF	; 0x8014cf <_ser_handle>
    5556:	f0 91 d0 14 	lds	r31, 0x14D0	; 0x8014d0 <_ser_handle+0x1>
    555a:	30 97       	sbiw	r30, 0x00	; 0
    555c:	b9 f0       	breq	.+46     	; 0x558c <__vector_26+0x56>
    555e:	02 80       	ldd	r0, Z+2	; 0x02
    5560:	f3 81       	ldd	r31, Z+3	; 0x03
    5562:	e0 2d       	mov	r30, r0
    5564:	93 81       	ldd	r25, Z+3	; 0x03
    5566:	82 81       	ldd	r24, Z+2	; 0x02
    5568:	98 17       	cp	r25, r24
    556a:	b1 f0       	breq	.+44     	; 0x5598 <__vector_26+0x62>
    556c:	92 81       	ldd	r25, Z+2	; 0x02
    556e:	85 81       	ldd	r24, Z+5	; 0x05
    5570:	28 2f       	mov	r18, r24
    5572:	26 95       	lsr	r18
    5574:	29 23       	and	r18, r25
    5576:	a0 81       	ld	r26, Z
    5578:	b1 81       	ldd	r27, Z+1	; 0x01
    557a:	a2 0f       	add	r26, r18
    557c:	b1 1d       	adc	r27, r1
    557e:	2c 91       	ld	r18, X
    5580:	9f 5f       	subi	r25, 0xFF	; 255
    5582:	89 23       	and	r24, r25
    5584:	82 83       	std	Z+2, r24	; 0x02
    5586:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    558a:	0b c0       	rjmp	.+22     	; 0x55a2 <__vector_26+0x6c>
    558c:	e1 ec       	ldi	r30, 0xC1	; 193
    558e:	f0 e0       	ldi	r31, 0x00	; 0
    5590:	80 81       	ld	r24, Z
    5592:	8f 7d       	andi	r24, 0xDF	; 223
    5594:	80 83       	st	Z, r24
    5596:	05 c0       	rjmp	.+10     	; 0x55a2 <__vector_26+0x6c>
    5598:	e1 ec       	ldi	r30, 0xC1	; 193
    559a:	f0 e0       	ldi	r31, 0x00	; 0
    559c:	80 81       	ld	r24, Z
    559e:	8f 7d       	andi	r24, 0xDF	; 223
    55a0:	80 83       	st	Z, r24
    55a2:	ff 91       	pop	r31
    55a4:	ef 91       	pop	r30
    55a6:	bf 91       	pop	r27
    55a8:	af 91       	pop	r26
    55aa:	9f 91       	pop	r25
    55ac:	8f 91       	pop	r24
    55ae:	2f 91       	pop	r18
    55b0:	0f 90       	pop	r0
    55b2:	0b be       	out	0x3b, r0	; 59
    55b4:	0f 90       	pop	r0
    55b6:	0f be       	out	0x3f, r0	; 63
    55b8:	0f 90       	pop	r0
    55ba:	1f 90       	pop	r1
    55bc:	18 95       	reti

000055be <__vector_36>:
    55be:	1f 92       	push	r1
    55c0:	0f 92       	push	r0
    55c2:	0f b6       	in	r0, 0x3f	; 63
    55c4:	0f 92       	push	r0
    55c6:	11 24       	eor	r1, r1
    55c8:	0b b6       	in	r0, 0x3b	; 59
    55ca:	0f 92       	push	r0
    55cc:	2f 93       	push	r18
    55ce:	3f 93       	push	r19
    55d0:	4f 93       	push	r20
    55d2:	5f 93       	push	r21
    55d4:	6f 93       	push	r22
    55d6:	7f 93       	push	r23
    55d8:	8f 93       	push	r24
    55da:	9f 93       	push	r25
    55dc:	af 93       	push	r26
    55de:	bf 93       	push	r27
    55e0:	cf 93       	push	r28
    55e2:	df 93       	push	r29
    55e4:	ef 93       	push	r30
    55e6:	ff 93       	push	r31
    55e8:	a0 91 d1 14 	lds	r26, 0x14D1	; 0x8014d1 <_ser_handle+0x2>
    55ec:	b0 91 d2 14 	lds	r27, 0x14D2	; 0x8014d2 <_ser_handle+0x3>
    55f0:	10 97       	sbiw	r26, 0x00	; 0
    55f2:	11 f1       	breq	.+68     	; 0x5638 <__vector_36+0x7a>
    55f4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    55f8:	14 96       	adiw	r26, 0x04	; 4
    55fa:	ed 91       	ld	r30, X+
    55fc:	fc 91       	ld	r31, X
    55fe:	15 97       	sbiw	r26, 0x05	; 5
    5600:	93 81       	ldd	r25, Z+3	; 0x03
    5602:	82 81       	ldd	r24, Z+2	; 0x02
    5604:	25 81       	ldd	r18, Z+5	; 0x05
    5606:	98 1b       	sub	r25, r24
    5608:	92 23       	and	r25, r18
    560a:	84 81       	ldd	r24, Z+4	; 0x04
    560c:	98 17       	cp	r25, r24
    560e:	61 f0       	breq	.+24     	; 0x5628 <__vector_36+0x6a>
    5610:	83 81       	ldd	r24, Z+3	; 0x03
    5612:	26 95       	lsr	r18
    5614:	28 23       	and	r18, r24
    5616:	c0 81       	ld	r28, Z
    5618:	d1 81       	ldd	r29, Z+1	; 0x01
    561a:	c2 0f       	add	r28, r18
    561c:	d1 1d       	adc	r29, r1
    561e:	68 83       	st	Y, r22
    5620:	8f 5f       	subi	r24, 0xFF	; 255
    5622:	95 81       	ldd	r25, Z+5	; 0x05
    5624:	89 23       	and	r24, r25
    5626:	83 83       	std	Z+3, r24	; 0x03
    5628:	16 96       	adiw	r26, 0x06	; 6
    562a:	ed 91       	ld	r30, X+
    562c:	fc 91       	ld	r31, X
    562e:	17 97       	sbiw	r26, 0x07	; 7
    5630:	30 97       	sbiw	r30, 0x00	; 0
    5632:	11 f0       	breq	.+4      	; 0x5638 <__vector_36+0x7a>
    5634:	cd 01       	movw	r24, r26
    5636:	19 95       	eicall
    5638:	ff 91       	pop	r31
    563a:	ef 91       	pop	r30
    563c:	df 91       	pop	r29
    563e:	cf 91       	pop	r28
    5640:	bf 91       	pop	r27
    5642:	af 91       	pop	r26
    5644:	9f 91       	pop	r25
    5646:	8f 91       	pop	r24
    5648:	7f 91       	pop	r23
    564a:	6f 91       	pop	r22
    564c:	5f 91       	pop	r21
    564e:	4f 91       	pop	r20
    5650:	3f 91       	pop	r19
    5652:	2f 91       	pop	r18
    5654:	0f 90       	pop	r0
    5656:	0b be       	out	0x3b, r0	; 59
    5658:	0f 90       	pop	r0
    565a:	0f be       	out	0x3f, r0	; 63
    565c:	0f 90       	pop	r0
    565e:	1f 90       	pop	r1
    5660:	18 95       	reti

00005662 <__vector_37>:
    5662:	1f 92       	push	r1
    5664:	0f 92       	push	r0
    5666:	0f b6       	in	r0, 0x3f	; 63
    5668:	0f 92       	push	r0
    566a:	11 24       	eor	r1, r1
    566c:	0b b6       	in	r0, 0x3b	; 59
    566e:	0f 92       	push	r0
    5670:	2f 93       	push	r18
    5672:	8f 93       	push	r24
    5674:	9f 93       	push	r25
    5676:	af 93       	push	r26
    5678:	bf 93       	push	r27
    567a:	ef 93       	push	r30
    567c:	ff 93       	push	r31
    567e:	e0 91 d1 14 	lds	r30, 0x14D1	; 0x8014d1 <_ser_handle+0x2>
    5682:	f0 91 d2 14 	lds	r31, 0x14D2	; 0x8014d2 <_ser_handle+0x3>
    5686:	30 97       	sbiw	r30, 0x00	; 0
    5688:	b9 f0       	breq	.+46     	; 0x56b8 <__vector_37+0x56>
    568a:	02 80       	ldd	r0, Z+2	; 0x02
    568c:	f3 81       	ldd	r31, Z+3	; 0x03
    568e:	e0 2d       	mov	r30, r0
    5690:	93 81       	ldd	r25, Z+3	; 0x03
    5692:	82 81       	ldd	r24, Z+2	; 0x02
    5694:	98 17       	cp	r25, r24
    5696:	b1 f0       	breq	.+44     	; 0x56c4 <__vector_37+0x62>
    5698:	92 81       	ldd	r25, Z+2	; 0x02
    569a:	85 81       	ldd	r24, Z+5	; 0x05
    569c:	28 2f       	mov	r18, r24
    569e:	26 95       	lsr	r18
    56a0:	29 23       	and	r18, r25
    56a2:	a0 81       	ld	r26, Z
    56a4:	b1 81       	ldd	r27, Z+1	; 0x01
    56a6:	a2 0f       	add	r26, r18
    56a8:	b1 1d       	adc	r27, r1
    56aa:	2c 91       	ld	r18, X
    56ac:	9f 5f       	subi	r25, 0xFF	; 255
    56ae:	89 23       	and	r24, r25
    56b0:	82 83       	std	Z+2, r24	; 0x02
    56b2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    56b6:	0b c0       	rjmp	.+22     	; 0x56ce <__vector_37+0x6c>
    56b8:	e9 ec       	ldi	r30, 0xC9	; 201
    56ba:	f0 e0       	ldi	r31, 0x00	; 0
    56bc:	80 81       	ld	r24, Z
    56be:	8f 7d       	andi	r24, 0xDF	; 223
    56c0:	80 83       	st	Z, r24
    56c2:	05 c0       	rjmp	.+10     	; 0x56ce <__vector_37+0x6c>
    56c4:	e9 ec       	ldi	r30, 0xC9	; 201
    56c6:	f0 e0       	ldi	r31, 0x00	; 0
    56c8:	80 81       	ld	r24, Z
    56ca:	8f 7d       	andi	r24, 0xDF	; 223
    56cc:	80 83       	st	Z, r24
    56ce:	ff 91       	pop	r31
    56d0:	ef 91       	pop	r30
    56d2:	bf 91       	pop	r27
    56d4:	af 91       	pop	r26
    56d6:	9f 91       	pop	r25
    56d8:	8f 91       	pop	r24
    56da:	2f 91       	pop	r18
    56dc:	0f 90       	pop	r0
    56de:	0b be       	out	0x3b, r0	; 59
    56e0:	0f 90       	pop	r0
    56e2:	0f be       	out	0x3f, r0	; 63
    56e4:	0f 90       	pop	r0
    56e6:	1f 90       	pop	r1
    56e8:	18 95       	reti

000056ea <__vector_51>:
    56ea:	1f 92       	push	r1
    56ec:	0f 92       	push	r0
    56ee:	0f b6       	in	r0, 0x3f	; 63
    56f0:	0f 92       	push	r0
    56f2:	11 24       	eor	r1, r1
    56f4:	0b b6       	in	r0, 0x3b	; 59
    56f6:	0f 92       	push	r0
    56f8:	2f 93       	push	r18
    56fa:	3f 93       	push	r19
    56fc:	4f 93       	push	r20
    56fe:	5f 93       	push	r21
    5700:	6f 93       	push	r22
    5702:	7f 93       	push	r23
    5704:	8f 93       	push	r24
    5706:	9f 93       	push	r25
    5708:	af 93       	push	r26
    570a:	bf 93       	push	r27
    570c:	cf 93       	push	r28
    570e:	df 93       	push	r29
    5710:	ef 93       	push	r30
    5712:	ff 93       	push	r31
    5714:	a0 91 d3 14 	lds	r26, 0x14D3	; 0x8014d3 <_ser_handle+0x4>
    5718:	b0 91 d4 14 	lds	r27, 0x14D4	; 0x8014d4 <_ser_handle+0x5>
    571c:	10 97       	sbiw	r26, 0x00	; 0
    571e:	11 f1       	breq	.+68     	; 0x5764 <__vector_51+0x7a>
    5720:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5724:	14 96       	adiw	r26, 0x04	; 4
    5726:	ed 91       	ld	r30, X+
    5728:	fc 91       	ld	r31, X
    572a:	15 97       	sbiw	r26, 0x05	; 5
    572c:	93 81       	ldd	r25, Z+3	; 0x03
    572e:	82 81       	ldd	r24, Z+2	; 0x02
    5730:	25 81       	ldd	r18, Z+5	; 0x05
    5732:	98 1b       	sub	r25, r24
    5734:	92 23       	and	r25, r18
    5736:	84 81       	ldd	r24, Z+4	; 0x04
    5738:	98 17       	cp	r25, r24
    573a:	61 f0       	breq	.+24     	; 0x5754 <__vector_51+0x6a>
    573c:	83 81       	ldd	r24, Z+3	; 0x03
    573e:	26 95       	lsr	r18
    5740:	28 23       	and	r18, r24
    5742:	c0 81       	ld	r28, Z
    5744:	d1 81       	ldd	r29, Z+1	; 0x01
    5746:	c2 0f       	add	r28, r18
    5748:	d1 1d       	adc	r29, r1
    574a:	68 83       	st	Y, r22
    574c:	8f 5f       	subi	r24, 0xFF	; 255
    574e:	95 81       	ldd	r25, Z+5	; 0x05
    5750:	89 23       	and	r24, r25
    5752:	83 83       	std	Z+3, r24	; 0x03
    5754:	16 96       	adiw	r26, 0x06	; 6
    5756:	ed 91       	ld	r30, X+
    5758:	fc 91       	ld	r31, X
    575a:	17 97       	sbiw	r26, 0x07	; 7
    575c:	30 97       	sbiw	r30, 0x00	; 0
    575e:	11 f0       	breq	.+4      	; 0x5764 <__vector_51+0x7a>
    5760:	cd 01       	movw	r24, r26
    5762:	19 95       	eicall
    5764:	ff 91       	pop	r31
    5766:	ef 91       	pop	r30
    5768:	df 91       	pop	r29
    576a:	cf 91       	pop	r28
    576c:	bf 91       	pop	r27
    576e:	af 91       	pop	r26
    5770:	9f 91       	pop	r25
    5772:	8f 91       	pop	r24
    5774:	7f 91       	pop	r23
    5776:	6f 91       	pop	r22
    5778:	5f 91       	pop	r21
    577a:	4f 91       	pop	r20
    577c:	3f 91       	pop	r19
    577e:	2f 91       	pop	r18
    5780:	0f 90       	pop	r0
    5782:	0b be       	out	0x3b, r0	; 59
    5784:	0f 90       	pop	r0
    5786:	0f be       	out	0x3f, r0	; 63
    5788:	0f 90       	pop	r0
    578a:	1f 90       	pop	r1
    578c:	18 95       	reti

0000578e <__vector_52>:
    578e:	1f 92       	push	r1
    5790:	0f 92       	push	r0
    5792:	0f b6       	in	r0, 0x3f	; 63
    5794:	0f 92       	push	r0
    5796:	11 24       	eor	r1, r1
    5798:	0b b6       	in	r0, 0x3b	; 59
    579a:	0f 92       	push	r0
    579c:	2f 93       	push	r18
    579e:	8f 93       	push	r24
    57a0:	9f 93       	push	r25
    57a2:	af 93       	push	r26
    57a4:	bf 93       	push	r27
    57a6:	ef 93       	push	r30
    57a8:	ff 93       	push	r31
    57aa:	e0 91 d3 14 	lds	r30, 0x14D3	; 0x8014d3 <_ser_handle+0x4>
    57ae:	f0 91 d4 14 	lds	r31, 0x14D4	; 0x8014d4 <_ser_handle+0x5>
    57b2:	30 97       	sbiw	r30, 0x00	; 0
    57b4:	b9 f0       	breq	.+46     	; 0x57e4 <__vector_52+0x56>
    57b6:	02 80       	ldd	r0, Z+2	; 0x02
    57b8:	f3 81       	ldd	r31, Z+3	; 0x03
    57ba:	e0 2d       	mov	r30, r0
    57bc:	93 81       	ldd	r25, Z+3	; 0x03
    57be:	82 81       	ldd	r24, Z+2	; 0x02
    57c0:	98 17       	cp	r25, r24
    57c2:	b1 f0       	breq	.+44     	; 0x57f0 <__vector_52+0x62>
    57c4:	92 81       	ldd	r25, Z+2	; 0x02
    57c6:	85 81       	ldd	r24, Z+5	; 0x05
    57c8:	28 2f       	mov	r18, r24
    57ca:	26 95       	lsr	r18
    57cc:	29 23       	and	r18, r25
    57ce:	a0 81       	ld	r26, Z
    57d0:	b1 81       	ldd	r27, Z+1	; 0x01
    57d2:	a2 0f       	add	r26, r18
    57d4:	b1 1d       	adc	r27, r1
    57d6:	2c 91       	ld	r18, X
    57d8:	9f 5f       	subi	r25, 0xFF	; 255
    57da:	89 23       	and	r24, r25
    57dc:	82 83       	std	Z+2, r24	; 0x02
    57de:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    57e2:	0b c0       	rjmp	.+22     	; 0x57fa <__vector_52+0x6c>
    57e4:	e1 ed       	ldi	r30, 0xD1	; 209
    57e6:	f0 e0       	ldi	r31, 0x00	; 0
    57e8:	80 81       	ld	r24, Z
    57ea:	8f 7d       	andi	r24, 0xDF	; 223
    57ec:	80 83       	st	Z, r24
    57ee:	05 c0       	rjmp	.+10     	; 0x57fa <__vector_52+0x6c>
    57f0:	e1 ed       	ldi	r30, 0xD1	; 209
    57f2:	f0 e0       	ldi	r31, 0x00	; 0
    57f4:	80 81       	ld	r24, Z
    57f6:	8f 7d       	andi	r24, 0xDF	; 223
    57f8:	80 83       	st	Z, r24
    57fa:	ff 91       	pop	r31
    57fc:	ef 91       	pop	r30
    57fe:	bf 91       	pop	r27
    5800:	af 91       	pop	r26
    5802:	9f 91       	pop	r25
    5804:	8f 91       	pop	r24
    5806:	2f 91       	pop	r18
    5808:	0f 90       	pop	r0
    580a:	0b be       	out	0x3b, r0	; 59
    580c:	0f 90       	pop	r0
    580e:	0f be       	out	0x3f, r0	; 63
    5810:	0f 90       	pop	r0
    5812:	1f 90       	pop	r1
    5814:	18 95       	reti

00005816 <__vector_54>:
    5816:	1f 92       	push	r1
    5818:	0f 92       	push	r0
    581a:	0f b6       	in	r0, 0x3f	; 63
    581c:	0f 92       	push	r0
    581e:	11 24       	eor	r1, r1
    5820:	0b b6       	in	r0, 0x3b	; 59
    5822:	0f 92       	push	r0
    5824:	2f 93       	push	r18
    5826:	3f 93       	push	r19
    5828:	4f 93       	push	r20
    582a:	5f 93       	push	r21
    582c:	6f 93       	push	r22
    582e:	7f 93       	push	r23
    5830:	8f 93       	push	r24
    5832:	9f 93       	push	r25
    5834:	af 93       	push	r26
    5836:	bf 93       	push	r27
    5838:	cf 93       	push	r28
    583a:	df 93       	push	r29
    583c:	ef 93       	push	r30
    583e:	ff 93       	push	r31
    5840:	a0 91 d5 14 	lds	r26, 0x14D5	; 0x8014d5 <_ser_handle+0x6>
    5844:	b0 91 d6 14 	lds	r27, 0x14D6	; 0x8014d6 <_ser_handle+0x7>
    5848:	10 97       	sbiw	r26, 0x00	; 0
    584a:	11 f1       	breq	.+68     	; 0x5890 <__vector_54+0x7a>
    584c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5850:	14 96       	adiw	r26, 0x04	; 4
    5852:	ed 91       	ld	r30, X+
    5854:	fc 91       	ld	r31, X
    5856:	15 97       	sbiw	r26, 0x05	; 5
    5858:	93 81       	ldd	r25, Z+3	; 0x03
    585a:	82 81       	ldd	r24, Z+2	; 0x02
    585c:	25 81       	ldd	r18, Z+5	; 0x05
    585e:	98 1b       	sub	r25, r24
    5860:	92 23       	and	r25, r18
    5862:	84 81       	ldd	r24, Z+4	; 0x04
    5864:	98 17       	cp	r25, r24
    5866:	61 f0       	breq	.+24     	; 0x5880 <__vector_54+0x6a>
    5868:	83 81       	ldd	r24, Z+3	; 0x03
    586a:	26 95       	lsr	r18
    586c:	28 23       	and	r18, r24
    586e:	c0 81       	ld	r28, Z
    5870:	d1 81       	ldd	r29, Z+1	; 0x01
    5872:	c2 0f       	add	r28, r18
    5874:	d1 1d       	adc	r29, r1
    5876:	68 83       	st	Y, r22
    5878:	8f 5f       	subi	r24, 0xFF	; 255
    587a:	95 81       	ldd	r25, Z+5	; 0x05
    587c:	89 23       	and	r24, r25
    587e:	83 83       	std	Z+3, r24	; 0x03
    5880:	16 96       	adiw	r26, 0x06	; 6
    5882:	ed 91       	ld	r30, X+
    5884:	fc 91       	ld	r31, X
    5886:	17 97       	sbiw	r26, 0x07	; 7
    5888:	30 97       	sbiw	r30, 0x00	; 0
    588a:	11 f0       	breq	.+4      	; 0x5890 <__vector_54+0x7a>
    588c:	cd 01       	movw	r24, r26
    588e:	19 95       	eicall
    5890:	ff 91       	pop	r31
    5892:	ef 91       	pop	r30
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	bf 91       	pop	r27
    589a:	af 91       	pop	r26
    589c:	9f 91       	pop	r25
    589e:	8f 91       	pop	r24
    58a0:	7f 91       	pop	r23
    58a2:	6f 91       	pop	r22
    58a4:	5f 91       	pop	r21
    58a6:	4f 91       	pop	r20
    58a8:	3f 91       	pop	r19
    58aa:	2f 91       	pop	r18
    58ac:	0f 90       	pop	r0
    58ae:	0b be       	out	0x3b, r0	; 59
    58b0:	0f 90       	pop	r0
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	0f 90       	pop	r0
    58b6:	1f 90       	pop	r1
    58b8:	18 95       	reti

000058ba <__vector_55>:
    58ba:	1f 92       	push	r1
    58bc:	0f 92       	push	r0
    58be:	0f b6       	in	r0, 0x3f	; 63
    58c0:	0f 92       	push	r0
    58c2:	11 24       	eor	r1, r1
    58c4:	0b b6       	in	r0, 0x3b	; 59
    58c6:	0f 92       	push	r0
    58c8:	2f 93       	push	r18
    58ca:	8f 93       	push	r24
    58cc:	9f 93       	push	r25
    58ce:	af 93       	push	r26
    58d0:	bf 93       	push	r27
    58d2:	ef 93       	push	r30
    58d4:	ff 93       	push	r31
    58d6:	e0 91 d5 14 	lds	r30, 0x14D5	; 0x8014d5 <_ser_handle+0x6>
    58da:	f0 91 d6 14 	lds	r31, 0x14D6	; 0x8014d6 <_ser_handle+0x7>
    58de:	30 97       	sbiw	r30, 0x00	; 0
    58e0:	b9 f0       	breq	.+46     	; 0x5910 <__vector_55+0x56>
    58e2:	02 80       	ldd	r0, Z+2	; 0x02
    58e4:	f3 81       	ldd	r31, Z+3	; 0x03
    58e6:	e0 2d       	mov	r30, r0
    58e8:	93 81       	ldd	r25, Z+3	; 0x03
    58ea:	82 81       	ldd	r24, Z+2	; 0x02
    58ec:	98 17       	cp	r25, r24
    58ee:	b1 f0       	breq	.+44     	; 0x591c <__vector_55+0x62>
    58f0:	92 81       	ldd	r25, Z+2	; 0x02
    58f2:	85 81       	ldd	r24, Z+5	; 0x05
    58f4:	28 2f       	mov	r18, r24
    58f6:	26 95       	lsr	r18
    58f8:	29 23       	and	r18, r25
    58fa:	a0 81       	ld	r26, Z
    58fc:	b1 81       	ldd	r27, Z+1	; 0x01
    58fe:	a2 0f       	add	r26, r18
    5900:	b1 1d       	adc	r27, r1
    5902:	2c 91       	ld	r18, X
    5904:	9f 5f       	subi	r25, 0xFF	; 255
    5906:	89 23       	and	r24, r25
    5908:	82 83       	std	Z+2, r24	; 0x02
    590a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    590e:	0b c0       	rjmp	.+22     	; 0x5926 <__vector_55+0x6c>
    5910:	e1 e3       	ldi	r30, 0x31	; 49
    5912:	f1 e0       	ldi	r31, 0x01	; 1
    5914:	80 81       	ld	r24, Z
    5916:	8f 7d       	andi	r24, 0xDF	; 223
    5918:	80 83       	st	Z, r24
    591a:	05 c0       	rjmp	.+10     	; 0x5926 <__vector_55+0x6c>
    591c:	e1 e3       	ldi	r30, 0x31	; 49
    591e:	f1 e0       	ldi	r31, 0x01	; 1
    5920:	80 81       	ld	r24, Z
    5922:	8f 7d       	andi	r24, 0xDF	; 223
    5924:	80 83       	st	Z, r24
    5926:	ff 91       	pop	r31
    5928:	ef 91       	pop	r30
    592a:	bf 91       	pop	r27
    592c:	af 91       	pop	r26
    592e:	9f 91       	pop	r25
    5930:	8f 91       	pop	r24
    5932:	2f 91       	pop	r18
    5934:	0f 90       	pop	r0
    5936:	0b be       	out	0x3b, r0	; 59
    5938:	0f 90       	pop	r0
    593a:	0f be       	out	0x3f, r0	; 63
    593c:	0f 90       	pop	r0
    593e:	1f 90       	pop	r1
    5940:	18 95       	reti

00005942 <usart_getchar>:
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	1f 92       	push	r1
    5948:	cd b7       	in	r28, 0x3d	; 61
    594a:	de b7       	in	r29, 0x3e	; 62
    594c:	be 01       	movw	r22, r28
    594e:	6f 5f       	subi	r22, 0xFF	; 255
    5950:	7f 4f       	sbci	r23, 0xFF	; 255
    5952:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <_com_serial_instance>
    5956:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <_com_serial_instance+0x1>
    595a:	7b dd       	rcall	.-1290   	; 0x5452 <serial_getByte>
    595c:	81 11       	cpse	r24, r1
    595e:	f6 cf       	rjmp	.-20     	; 0x594c <usart_getchar+0xa>
    5960:	89 81       	ldd	r24, Y+1	; 0x01
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	0f 90       	pop	r0
    5966:	df 91       	pop	r29
    5968:	cf 91       	pop	r28
    596a:	08 95       	ret

0000596c <usart_putchar>:
    596c:	68 2f       	mov	r22, r24
    596e:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <_com_serial_instance>
    5972:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <_com_serial_instance+0x1>
    5976:	ed dc       	rcall	.-1574   	; 0x5352 <serial_sendByte>
    5978:	80 e0       	ldi	r24, 0x00	; 0
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	08 95       	ret

0000597e <stdio_initialise>:
    597e:	8f 92       	push	r8
    5980:	9f 92       	push	r9
    5982:	af 92       	push	r10
    5984:	cf 92       	push	r12
    5986:	ef 92       	push	r14
    5988:	0f 93       	push	r16
    598a:	81 2c       	mov	r8, r1
    598c:	91 2c       	mov	r9, r1
    598e:	68 94       	set
    5990:	aa 24       	eor	r10, r10
    5992:	a7 f8       	bld	r10, 7
    5994:	68 94       	set
    5996:	cc 24       	eor	r12, r12
    5998:	c7 f8       	bld	r12, 7
    599a:	e1 2c       	mov	r14, r1
    599c:	00 e0       	ldi	r16, 0x00	; 0
    599e:	23 e0       	ldi	r18, 0x03	; 3
    59a0:	40 e0       	ldi	r20, 0x00	; 0
    59a2:	51 ee       	ldi	r21, 0xE1	; 225
    59a4:	60 e0       	ldi	r22, 0x00	; 0
    59a6:	70 e0       	ldi	r23, 0x00	; 0
    59a8:	31 dc       	rcall	.-1950   	; 0x520c <serial_create>
    59aa:	90 93 d8 14 	sts	0x14D8, r25	; 0x8014d8 <_com_serial_instance+0x1>
    59ae:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <_com_serial_instance>
    59b2:	ef e0       	ldi	r30, 0x0F	; 15
    59b4:	f5 e1       	ldi	r31, 0x15	; 21
    59b6:	83 e1       	ldi	r24, 0x13	; 19
    59b8:	92 e0       	ldi	r25, 0x02	; 2
    59ba:	91 83       	std	Z+1, r25	; 0x01
    59bc:	80 83       	st	Z, r24
    59be:	93 83       	std	Z+3, r25	; 0x03
    59c0:	82 83       	std	Z+2, r24	; 0x02
    59c2:	0f 91       	pop	r16
    59c4:	ef 90       	pop	r14
    59c6:	cf 90       	pop	r12
    59c8:	af 90       	pop	r10
    59ca:	9f 90       	pop	r9
    59cc:	8f 90       	pop	r8
    59ce:	08 95       	ret

000059d0 <_callBack>:
    59d0:	e0 91 e1 14 	lds	r30, 0x14E1	; 0x8014e1 <_callBackFunction>
    59d4:	f0 91 e2 14 	lds	r31, 0x14E2	; 0x8014e2 <_callBackFunction+0x1>
    59d8:	30 97       	sbiw	r30, 0x00	; 0
    59da:	09 f0       	breq	.+2      	; 0x59de <_callBack+0xe>
    59dc:	19 95       	eicall
    59de:	08 95       	ret

000059e0 <_tsl2591TwiCallback>:
    59e0:	64 50       	subi	r22, 0x04	; 4
    59e2:	62 30       	cpi	r22, 0x02	; 2
    59e4:	08 f0       	brcs	.+2      	; 0x59e8 <_tsl2591TwiCallback+0x8>
    59e6:	3b c0       	rjmp	.+118    	; 0x5a5e <_tsl2591TwiCallback+0x7e>
    59e8:	20 91 e0 14 	lds	r18, 0x14E0	; 0x8014e0 <_nextState>
    59ec:	22 30       	cpi	r18, 0x02	; 2
    59ee:	79 f0       	breq	.+30     	; 0x5a0e <_tsl2591TwiCallback+0x2e>
    59f0:	18 f4       	brcc	.+6      	; 0x59f8 <_tsl2591TwiCallback+0x18>
    59f2:	21 30       	cpi	r18, 0x01	; 1
    59f4:	31 f0       	breq	.+12     	; 0x5a02 <_tsl2591TwiCallback+0x22>
    59f6:	30 c0       	rjmp	.+96     	; 0x5a58 <_tsl2591TwiCallback+0x78>
    59f8:	23 30       	cpi	r18, 0x03	; 3
    59fa:	81 f0       	breq	.+32     	; 0x5a1c <_tsl2591TwiCallback+0x3c>
    59fc:	24 30       	cpi	r18, 0x04	; 4
    59fe:	a1 f0       	breq	.+40     	; 0x5a28 <_tsl2591TwiCallback+0x48>
    5a00:	2b c0       	rjmp	.+86     	; 0x5a58 <_tsl2591TwiCallback+0x78>
    5a02:	22 e0       	ldi	r18, 0x02	; 2
    5a04:	20 93 e0 14 	sts	0x14E0, r18	; 0x8014e0 <_nextState>
    5a08:	61 e0       	ldi	r22, 0x01	; 1
    5a0a:	38 c2       	rjmp	.+1136   	; 0x5e7c <twiReceive>
    5a0c:	08 95       	ret
    5a0e:	fa 01       	movw	r30, r20
    5a10:	80 81       	ld	r24, Z
    5a12:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <_deviceId>
    5a16:	82 e0       	ldi	r24, 0x02	; 2
    5a18:	db cf       	rjmp	.-74     	; 0x59d0 <_callBack>
    5a1a:	08 95       	ret
    5a1c:	24 e0       	ldi	r18, 0x04	; 4
    5a1e:	20 93 e0 14 	sts	0x14E0, r18	; 0x8014e0 <_nextState>
    5a22:	64 e0       	ldi	r22, 0x04	; 4
    5a24:	2b c2       	rjmp	.+1110   	; 0x5e7c <twiReceive>
    5a26:	08 95       	ret
    5a28:	fa 01       	movw	r30, r20
    5a2a:	81 81       	ldd	r24, Z+1	; 0x01
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	98 2f       	mov	r25, r24
    5a30:	88 27       	eor	r24, r24
    5a32:	20 81       	ld	r18, Z
    5a34:	82 2b       	or	r24, r18
    5a36:	90 93 dc 14 	sts	0x14DC, r25	; 0x8014dc <_fullSpectrumRaw+0x1>
    5a3a:	80 93 db 14 	sts	0x14DB, r24	; 0x8014db <_fullSpectrumRaw>
    5a3e:	83 81       	ldd	r24, Z+3	; 0x03
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	98 2f       	mov	r25, r24
    5a44:	88 27       	eor	r24, r24
    5a46:	22 81       	ldd	r18, Z+2	; 0x02
    5a48:	82 2b       	or	r24, r18
    5a4a:	90 93 da 14 	sts	0x14DA, r25	; 0x8014da <_infraredRaw+0x1>
    5a4e:	80 93 d9 14 	sts	0x14D9, r24	; 0x8014d9 <_infraredRaw>
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	bd cf       	rjmp	.-134    	; 0x59d0 <_callBack>
    5a56:	08 95       	ret
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	ba cf       	rjmp	.-140    	; 0x59d0 <_callBack>
    5a5c:	08 95       	ret
    5a5e:	10 92 e0 14 	sts	0x14E0, r1	; 0x8014e0 <_nextState>
    5a62:	86 e0       	ldi	r24, 0x06	; 6
    5a64:	b5 cf       	rjmp	.-150    	; 0x59d0 <_callBack>
    5a66:	08 95       	ret

00005a68 <_twiTransmit>:
    5a68:	20 91 e3 14 	lds	r18, 0x14E3	; 0x8014e3 <_twiHandler>
    5a6c:	30 91 e4 14 	lds	r19, 0x14E4	; 0x8014e4 <_twiHandler+0x1>
    5a70:	21 15       	cp	r18, r1
    5a72:	31 05       	cpc	r19, r1
    5a74:	41 f0       	breq	.+16     	; 0x5a86 <_twiTransmit+0x1e>
    5a76:	46 2f       	mov	r20, r22
    5a78:	bc 01       	movw	r22, r24
    5a7a:	c9 01       	movw	r24, r18
    5a7c:	b3 d1       	rcall	.+870    	; 0x5de4 <twiTransmit>
    5a7e:	82 30       	cpi	r24, 0x02	; 2
    5a80:	21 f0       	breq	.+8      	; 0x5a8a <_twiTransmit+0x22>
    5a82:	80 e0       	ldi	r24, 0x00	; 0
    5a84:	08 95       	ret
    5a86:	87 e0       	ldi	r24, 0x07	; 7
    5a88:	08 95       	ret
    5a8a:	85 e0       	ldi	r24, 0x05	; 5
    5a8c:	08 95       	ret

00005a8e <tsl2591_initialise>:
    5a8e:	0f 93       	push	r16
    5a90:	1f 93       	push	r17
    5a92:	90 93 e2 14 	sts	0x14E2, r25	; 0x8014e2 <_callBackFunction+0x1>
    5a96:	80 93 e1 14 	sts	0x14E1, r24	; 0x8014e1 <_callBackFunction>
    5a9a:	00 ef       	ldi	r16, 0xF0	; 240
    5a9c:	1c e2       	ldi	r17, 0x2C	; 44
    5a9e:	20 e0       	ldi	r18, 0x00	; 0
    5aa0:	34 e2       	ldi	r19, 0x24	; 36
    5aa2:	44 ef       	ldi	r20, 0xF4	; 244
    5aa4:	50 e0       	ldi	r21, 0x00	; 0
    5aa6:	60 e0       	ldi	r22, 0x00	; 0
    5aa8:	89 e2       	ldi	r24, 0x29	; 41
    5aaa:	4b d1       	rcall	.+662    	; 0x5d42 <twiCreate>
    5aac:	90 93 e4 14 	sts	0x14E4, r25	; 0x8014e4 <_twiHandler+0x1>
    5ab0:	80 93 e3 14 	sts	0x14E3, r24	; 0x8014e3 <_twiHandler>
    5ab4:	89 2b       	or	r24, r25
    5ab6:	11 f0       	breq	.+4      	; 0x5abc <tsl2591_initialise+0x2e>
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	01 c0       	rjmp	.+2      	; 0x5abe <tsl2591_initialise+0x30>
    5abc:	88 e0       	ldi	r24, 0x08	; 8
    5abe:	1f 91       	pop	r17
    5ac0:	0f 91       	pop	r16
    5ac2:	08 95       	ret

00005ac4 <tsl2591_enable>:
    5ac4:	cf 93       	push	r28
    5ac6:	df 93       	push	r29
    5ac8:	1f 92       	push	r1
    5aca:	1f 92       	push	r1
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
    5ad0:	80 ea       	ldi	r24, 0xA0	; 160
    5ad2:	89 83       	std	Y+1, r24	; 0x01
    5ad4:	83 e0       	ldi	r24, 0x03	; 3
    5ad6:	8a 83       	std	Y+2, r24	; 0x02
    5ad8:	10 92 e0 14 	sts	0x14E0, r1	; 0x8014e0 <_nextState>
    5adc:	62 e0       	ldi	r22, 0x02	; 2
    5ade:	ce 01       	movw	r24, r28
    5ae0:	01 96       	adiw	r24, 0x01	; 1
    5ae2:	c2 df       	rcall	.-124    	; 0x5a68 <_twiTransmit>
    5ae4:	0f 90       	pop	r0
    5ae6:	0f 90       	pop	r0
    5ae8:	df 91       	pop	r29
    5aea:	cf 91       	pop	r28
    5aec:	08 95       	ret

00005aee <tsl259_getVisibleRaw>:
    5aee:	20 91 d9 14 	lds	r18, 0x14D9	; 0x8014d9 <_infraredRaw>
    5af2:	30 91 da 14 	lds	r19, 0x14DA	; 0x8014da <_infraredRaw+0x1>
    5af6:	2f 3f       	cpi	r18, 0xFF	; 255
    5af8:	4f ef       	ldi	r20, 0xFF	; 255
    5afa:	34 07       	cpc	r19, r20
    5afc:	41 f0       	breq	.+16     	; 0x5b0e <tsl259_getVisibleRaw+0x20>
    5afe:	40 91 db 14 	lds	r20, 0x14DB	; 0x8014db <_fullSpectrumRaw>
    5b02:	50 91 dc 14 	lds	r21, 0x14DC	; 0x8014dc <_fullSpectrumRaw+0x1>
    5b06:	4f 3f       	cpi	r20, 0xFF	; 255
    5b08:	6f ef       	ldi	r22, 0xFF	; 255
    5b0a:	56 07       	cpc	r21, r22
    5b0c:	39 f4       	brne	.+14     	; 0x5b1c <tsl259_getVisibleRaw+0x2e>
    5b0e:	2f ef       	ldi	r18, 0xFF	; 255
    5b10:	3f ef       	ldi	r19, 0xFF	; 255
    5b12:	fc 01       	movw	r30, r24
    5b14:	31 83       	std	Z+1, r19	; 0x01
    5b16:	20 83       	st	Z, r18
    5b18:	83 e0       	ldi	r24, 0x03	; 3
    5b1a:	08 95       	ret
    5b1c:	42 1b       	sub	r20, r18
    5b1e:	53 0b       	sbc	r21, r19
    5b20:	fc 01       	movw	r30, r24
    5b22:	51 83       	std	Z+1, r21	; 0x01
    5b24:	40 83       	st	Z, r20
    5b26:	80 e0       	ldi	r24, 0x00	; 0
    5b28:	08 95       	ret

00005b2a <tsl2591_getInfraredRaw>:
    5b2a:	20 91 d9 14 	lds	r18, 0x14D9	; 0x8014d9 <_infraredRaw>
    5b2e:	30 91 da 14 	lds	r19, 0x14DA	; 0x8014da <_infraredRaw+0x1>
    5b32:	fc 01       	movw	r30, r24
    5b34:	31 83       	std	Z+1, r19	; 0x01
    5b36:	20 83       	st	Z, r18
    5b38:	2f 3f       	cpi	r18, 0xFF	; 255
    5b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b3c:	11 f0       	breq	.+4      	; 0x5b42 <tsl2591_getInfraredRaw+0x18>
    5b3e:	80 e0       	ldi	r24, 0x00	; 0
    5b40:	08 95       	ret
    5b42:	83 e0       	ldi	r24, 0x03	; 3
    5b44:	08 95       	ret

00005b46 <tsl2591_getFullSpectrumRaw>:
    5b46:	20 91 db 14 	lds	r18, 0x14DB	; 0x8014db <_fullSpectrumRaw>
    5b4a:	30 91 dc 14 	lds	r19, 0x14DC	; 0x8014dc <_fullSpectrumRaw+0x1>
    5b4e:	fc 01       	movw	r30, r24
    5b50:	31 83       	std	Z+1, r19	; 0x01
    5b52:	20 83       	st	Z, r18
    5b54:	2f 3f       	cpi	r18, 0xFF	; 255
    5b56:	3f 4f       	sbci	r19, 0xFF	; 255
    5b58:	11 f0       	breq	.+4      	; 0x5b5e <tsl2591_getFullSpectrumRaw+0x18>
    5b5a:	80 e0       	ldi	r24, 0x00	; 0
    5b5c:	08 95       	ret
    5b5e:	83 e0       	ldi	r24, 0x03	; 3
    5b60:	08 95       	ret

00005b62 <tsl2591_getLux>:
    5b62:	2f 92       	push	r2
    5b64:	3f 92       	push	r3
    5b66:	4f 92       	push	r4
    5b68:	5f 92       	push	r5
    5b6a:	6f 92       	push	r6
    5b6c:	7f 92       	push	r7
    5b6e:	8f 92       	push	r8
    5b70:	9f 92       	push	r9
    5b72:	af 92       	push	r10
    5b74:	bf 92       	push	r11
    5b76:	cf 92       	push	r12
    5b78:	df 92       	push	r13
    5b7a:	ef 92       	push	r14
    5b7c:	ff 92       	push	r15
    5b7e:	0f 93       	push	r16
    5b80:	1f 93       	push	r17
    5b82:	cf 93       	push	r28
    5b84:	df 93       	push	r29
    5b86:	c0 91 d9 14 	lds	r28, 0x14D9	; 0x8014d9 <_infraredRaw>
    5b8a:	d0 91 da 14 	lds	r29, 0x14DA	; 0x8014da <_infraredRaw+0x1>
    5b8e:	cf 3f       	cpi	r28, 0xFF	; 255
    5b90:	2f ef       	ldi	r18, 0xFF	; 255
    5b92:	d2 07       	cpc	r29, r18
    5b94:	41 f0       	breq	.+16     	; 0x5ba6 <tsl2591_getLux+0x44>
    5b96:	60 91 db 14 	lds	r22, 0x14DB	; 0x8014db <_fullSpectrumRaw>
    5b9a:	70 91 dc 14 	lds	r23, 0x14DC	; 0x8014dc <_fullSpectrumRaw+0x1>
    5b9e:	6f 3f       	cpi	r22, 0xFF	; 255
    5ba0:	ef ef       	ldi	r30, 0xFF	; 255
    5ba2:	7e 07       	cpc	r23, r30
    5ba4:	59 f4       	brne	.+22     	; 0x5bbc <tsl2591_getLux+0x5a>
    5ba6:	4f ef       	ldi	r20, 0xFF	; 255
    5ba8:	5f ef       	ldi	r21, 0xFF	; 255
    5baa:	6f e7       	ldi	r22, 0x7F	; 127
    5bac:	7f e7       	ldi	r23, 0x7F	; 127
    5bae:	fc 01       	movw	r30, r24
    5bb0:	40 83       	st	Z, r20
    5bb2:	51 83       	std	Z+1, r21	; 0x01
    5bb4:	62 83       	std	Z+2, r22	; 0x02
    5bb6:	73 83       	std	Z+3, r23	; 0x03
    5bb8:	83 e0       	ldi	r24, 0x03	; 3
    5bba:	9f c0       	rjmp	.+318    	; 0x5cfa <tsl2591_getLux+0x198>
    5bbc:	1c 01       	movw	r2, r24
    5bbe:	80 e0       	ldi	r24, 0x00	; 0
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	62 d6       	rcall	.+3268   	; 0x6888 <__floatunsisf>
    5bc4:	2b 01       	movw	r4, r22
    5bc6:	3c 01       	movw	r6, r24
    5bc8:	be 01       	movw	r22, r28
    5bca:	80 e0       	ldi	r24, 0x00	; 0
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	5c d6       	rcall	.+3256   	; 0x6888 <__floatunsisf>
    5bd0:	4b 01       	movw	r8, r22
    5bd2:	5c 01       	movw	r10, r24
    5bd4:	80 91 de 14 	lds	r24, 0x14DE	; 0x8014de <_currentIntegrationTime>
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	01 96       	adiw	r24, 0x01	; 1
    5bdc:	24 e6       	ldi	r18, 0x64	; 100
    5bde:	28 9f       	mul	r18, r24
    5be0:	b0 01       	movw	r22, r0
    5be2:	29 9f       	mul	r18, r25
    5be4:	70 0d       	add	r23, r0
    5be6:	11 24       	eor	r1, r1
    5be8:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <_currentGain>
    5bec:	80 32       	cpi	r24, 0x20	; 32
    5bee:	69 f0       	breq	.+26     	; 0x5c0a <tsl2591_getLux+0xa8>
    5bf0:	80 33       	cpi	r24, 0x30	; 48
    5bf2:	a1 f0       	breq	.+40     	; 0x5c1c <tsl2591_getLux+0xba>
    5bf4:	80 31       	cpi	r24, 0x10	; 16
    5bf6:	e1 f4       	brne	.+56     	; 0x5c30 <tsl2591_getLux+0xce>
    5bf8:	0f 2e       	mov	r0, r31
    5bfa:	c1 2c       	mov	r12, r1
    5bfc:	d1 2c       	mov	r13, r1
    5bfe:	f8 ec       	ldi	r31, 0xC8	; 200
    5c00:	ef 2e       	mov	r14, r31
    5c02:	f1 e4       	ldi	r31, 0x41	; 65
    5c04:	ff 2e       	mov	r15, r31
    5c06:	f0 2d       	mov	r31, r0
    5c08:	1b c0       	rjmp	.+54     	; 0x5c40 <tsl2591_getLux+0xde>
    5c0a:	0f 2e       	mov	r0, r31
    5c0c:	c1 2c       	mov	r12, r1
    5c0e:	d1 2c       	mov	r13, r1
    5c10:	f6 ed       	ldi	r31, 0xD6	; 214
    5c12:	ef 2e       	mov	r14, r31
    5c14:	f3 e4       	ldi	r31, 0x43	; 67
    5c16:	ff 2e       	mov	r15, r31
    5c18:	f0 2d       	mov	r31, r0
    5c1a:	12 c0       	rjmp	.+36     	; 0x5c40 <tsl2591_getLux+0xde>
    5c1c:	0f 2e       	mov	r0, r31
    5c1e:	c1 2c       	mov	r12, r1
    5c20:	f0 e5       	ldi	r31, 0x50	; 80
    5c22:	df 2e       	mov	r13, r31
    5c24:	fa e1       	ldi	r31, 0x1A	; 26
    5c26:	ef 2e       	mov	r14, r31
    5c28:	f6 e4       	ldi	r31, 0x46	; 70
    5c2a:	ff 2e       	mov	r15, r31
    5c2c:	f0 2d       	mov	r31, r0
    5c2e:	08 c0       	rjmp	.+16     	; 0x5c40 <tsl2591_getLux+0xde>
    5c30:	0f 2e       	mov	r0, r31
    5c32:	c1 2c       	mov	r12, r1
    5c34:	d1 2c       	mov	r13, r1
    5c36:	f0 e8       	ldi	r31, 0x80	; 128
    5c38:	ef 2e       	mov	r14, r31
    5c3a:	ff e3       	ldi	r31, 0x3F	; 63
    5c3c:	ff 2e       	mov	r15, r31
    5c3e:	f0 2d       	mov	r31, r0
    5c40:	07 2e       	mov	r0, r23
    5c42:	00 0c       	add	r0, r0
    5c44:	88 0b       	sbc	r24, r24
    5c46:	99 0b       	sbc	r25, r25
    5c48:	21 d6       	rcall	.+3138   	; 0x688c <__floatsisf>
    5c4a:	a7 01       	movw	r20, r14
    5c4c:	96 01       	movw	r18, r12
    5c4e:	0e 94 56 22 	call	0x44ac	; 0x44ac <__mulsf3>
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	4c ec       	ldi	r20, 0xCC	; 204
    5c58:	53 e4       	ldi	r21, 0x43	; 67
    5c5a:	a5 d5       	rcall	.+2890   	; 0x67a6 <__divsf3>
    5c5c:	6b 01       	movw	r12, r22
    5c5e:	7c 01       	movw	r14, r24
    5c60:	25 e8       	ldi	r18, 0x85	; 133
    5c62:	3b ee       	ldi	r19, 0xEB	; 235
    5c64:	41 ed       	ldi	r20, 0xD1	; 209
    5c66:	5f e3       	ldi	r21, 0x3F	; 63
    5c68:	c5 01       	movw	r24, r10
    5c6a:	b4 01       	movw	r22, r8
    5c6c:	0e 94 56 22 	call	0x44ac	; 0x44ac <__mulsf3>
    5c70:	9b 01       	movw	r18, r22
    5c72:	ac 01       	movw	r20, r24
    5c74:	c3 01       	movw	r24, r6
    5c76:	b2 01       	movw	r22, r4
    5c78:	0e 94 b9 22 	call	0x4572	; 0x4572 <__subsf3>
    5c7c:	a7 01       	movw	r20, r14
    5c7e:	96 01       	movw	r18, r12
    5c80:	92 d5       	rcall	.+2852   	; 0x67a6 <__divsf3>
    5c82:	16 2f       	mov	r17, r22
    5c84:	d7 2f       	mov	r29, r23
    5c86:	c8 2f       	mov	r28, r24
    5c88:	09 2f       	mov	r16, r25
    5c8a:	2d e3       	ldi	r18, 0x3D	; 61
    5c8c:	3a e0       	ldi	r19, 0x0A	; 10
    5c8e:	47 e1       	ldi	r20, 0x17	; 23
    5c90:	5f e3       	ldi	r21, 0x3F	; 63
    5c92:	c3 01       	movw	r24, r6
    5c94:	b2 01       	movw	r22, r4
    5c96:	0e 94 56 22 	call	0x44ac	; 0x44ac <__mulsf3>
    5c9a:	2b 01       	movw	r4, r22
    5c9c:	3c 01       	movw	r6, r24
    5c9e:	26 ef       	ldi	r18, 0xF6	; 246
    5ca0:	38 e2       	ldi	r19, 0x28	; 40
    5ca2:	4c e5       	ldi	r20, 0x5C	; 92
    5ca4:	5f e3       	ldi	r21, 0x3F	; 63
    5ca6:	c5 01       	movw	r24, r10
    5ca8:	b4 01       	movw	r22, r8
    5caa:	0e 94 56 22 	call	0x44ac	; 0x44ac <__mulsf3>
    5cae:	9b 01       	movw	r18, r22
    5cb0:	ac 01       	movw	r20, r24
    5cb2:	c3 01       	movw	r24, r6
    5cb4:	b2 01       	movw	r22, r4
    5cb6:	0e 94 b9 22 	call	0x4572	; 0x4572 <__subsf3>
    5cba:	a7 01       	movw	r20, r14
    5cbc:	96 01       	movw	r18, r12
    5cbe:	73 d5       	rcall	.+2790   	; 0x67a6 <__divsf3>
    5cc0:	c6 2e       	mov	r12, r22
    5cc2:	d7 2e       	mov	r13, r23
    5cc4:	e8 2e       	mov	r14, r24
    5cc6:	f9 2e       	mov	r15, r25
    5cc8:	26 2f       	mov	r18, r22
    5cca:	37 2f       	mov	r19, r23
    5ccc:	48 2f       	mov	r20, r24
    5cce:	59 2f       	mov	r21, r25
    5cd0:	61 2f       	mov	r22, r17
    5cd2:	7d 2f       	mov	r23, r29
    5cd4:	8c 2f       	mov	r24, r28
    5cd6:	90 2f       	mov	r25, r16
    5cd8:	14 d6       	rcall	.+3112   	; 0x6902 <__gesf2>
    5cda:	18 16       	cp	r1, r24
    5cdc:	24 f0       	brlt	.+8      	; 0x5ce6 <tsl2591_getLux+0x184>
    5cde:	1c 2d       	mov	r17, r12
    5ce0:	dd 2d       	mov	r29, r13
    5ce2:	ce 2d       	mov	r28, r14
    5ce4:	0f 2d       	mov	r16, r15
    5ce6:	41 2f       	mov	r20, r17
    5ce8:	5d 2f       	mov	r21, r29
    5cea:	6c 2f       	mov	r22, r28
    5cec:	70 2f       	mov	r23, r16
    5cee:	f1 01       	movw	r30, r2
    5cf0:	40 83       	st	Z, r20
    5cf2:	51 83       	std	Z+1, r21	; 0x01
    5cf4:	62 83       	std	Z+2, r22	; 0x02
    5cf6:	73 83       	std	Z+3, r23	; 0x03
    5cf8:	80 e0       	ldi	r24, 0x00	; 0
    5cfa:	df 91       	pop	r29
    5cfc:	cf 91       	pop	r28
    5cfe:	1f 91       	pop	r17
    5d00:	0f 91       	pop	r16
    5d02:	ff 90       	pop	r15
    5d04:	ef 90       	pop	r14
    5d06:	df 90       	pop	r13
    5d08:	cf 90       	pop	r12
    5d0a:	bf 90       	pop	r11
    5d0c:	af 90       	pop	r10
    5d0e:	9f 90       	pop	r9
    5d10:	8f 90       	pop	r8
    5d12:	7f 90       	pop	r7
    5d14:	6f 90       	pop	r6
    5d16:	5f 90       	pop	r5
    5d18:	4f 90       	pop	r4
    5d1a:	3f 90       	pop	r3
    5d1c:	2f 90       	pop	r2
    5d1e:	08 95       	ret

00005d20 <_initTwiInterface>:
    5d20:	80 91 f3 14 	lds	r24, 0x14F3	; 0x8014f3 <_twiIsInitiated>
    5d24:	81 11       	cpse	r24, r1
    5d26:	0c c0       	rjmp	.+24     	; 0x5d40 <_initTwiInterface+0x20>
    5d28:	8c e0       	ldi	r24, 0x0C	; 12
    5d2a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5d2e:	8f ef       	ldi	r24, 0xFF	; 255
    5d30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d34:	84 e0       	ldi	r24, 0x04	; 4
    5d36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	80 93 f3 14 	sts	0x14F3, r24	; 0x8014f3 <_twiIsInitiated>
    5d40:	08 95       	ret

00005d42 <twiCreate>:
    5d42:	af 92       	push	r10
    5d44:	bf 92       	push	r11
    5d46:	cf 92       	push	r12
    5d48:	df 92       	push	r13
    5d4a:	ef 92       	push	r14
    5d4c:	ff 92       	push	r15
    5d4e:	0f 93       	push	r16
    5d50:	1f 93       	push	r17
    5d52:	cf 93       	push	r28
    5d54:	df 93       	push	r29
    5d56:	a8 2e       	mov	r10, r24
    5d58:	b6 2e       	mov	r11, r22
    5d5a:	69 01       	movw	r12, r18
    5d5c:	7a 01       	movw	r14, r20
    5d5e:	84 e0       	ldi	r24, 0x04	; 4
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	4a d6       	rcall	.+3220   	; 0x69f8 <malloc>
    5d64:	ec 01       	movw	r28, r24
    5d66:	89 2b       	or	r24, r25
    5d68:	61 f1       	breq	.+88     	; 0x5dc2 <twiCreate+0x80>
    5d6a:	a8 82       	st	Y, r10
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	b8 12       	cpse	r11, r24
    5d70:	12 c0       	rjmp	.+36     	; 0x5d96 <twiCreate+0x54>
    5d72:	c7 01       	movw	r24, r14
    5d74:	b6 01       	movw	r22, r12
    5d76:	20 ea       	ldi	r18, 0xA0	; 160
    5d78:	36 e8       	ldi	r19, 0x86	; 134
    5d7a:	41 e0       	ldi	r20, 0x01	; 1
    5d7c:	50 e0       	ldi	r21, 0x00	; 0
    5d7e:	e9 d5       	rcall	.+3026   	; 0x6952 <__udivmodsi4>
    5d80:	da 01       	movw	r26, r20
    5d82:	c9 01       	movw	r24, r18
    5d84:	40 97       	sbiw	r24, 0x10	; 16
    5d86:	a1 09       	sbc	r26, r1
    5d88:	b1 09       	sbc	r27, r1
    5d8a:	b6 95       	lsr	r27
    5d8c:	a7 95       	ror	r26
    5d8e:	97 95       	ror	r25
    5d90:	87 95       	ror	r24
    5d92:	89 83       	std	Y+1, r24	; 0x01
    5d94:	11 c0       	rjmp	.+34     	; 0x5db8 <twiCreate+0x76>
    5d96:	c7 01       	movw	r24, r14
    5d98:	b6 01       	movw	r22, r12
    5d9a:	20 e8       	ldi	r18, 0x80	; 128
    5d9c:	3a e1       	ldi	r19, 0x1A	; 26
    5d9e:	46 e0       	ldi	r20, 0x06	; 6
    5da0:	50 e0       	ldi	r21, 0x00	; 0
    5da2:	d7 d5       	rcall	.+2990   	; 0x6952 <__udivmodsi4>
    5da4:	da 01       	movw	r26, r20
    5da6:	c9 01       	movw	r24, r18
    5da8:	40 97       	sbiw	r24, 0x10	; 16
    5daa:	a1 09       	sbc	r26, r1
    5dac:	b1 09       	sbc	r27, r1
    5dae:	b6 95       	lsr	r27
    5db0:	a7 95       	ror	r26
    5db2:	97 95       	ror	r25
    5db4:	87 95       	ror	r24
    5db6:	89 83       	std	Y+1, r24	; 0x01
    5db8:	1b 83       	std	Y+3, r17	; 0x03
    5dba:	0a 83       	std	Y+2, r16	; 0x02
    5dbc:	8c 2f       	mov	r24, r28
    5dbe:	9d 2f       	mov	r25, r29
    5dc0:	02 c0       	rjmp	.+4      	; 0x5dc6 <twiCreate+0x84>
    5dc2:	80 e0       	ldi	r24, 0x00	; 0
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	df 91       	pop	r29
    5dc8:	cf 91       	pop	r28
    5dca:	1f 91       	pop	r17
    5dcc:	0f 91       	pop	r16
    5dce:	ff 90       	pop	r15
    5dd0:	ef 90       	pop	r14
    5dd2:	df 90       	pop	r13
    5dd4:	cf 90       	pop	r12
    5dd6:	bf 90       	pop	r11
    5dd8:	af 90       	pop	r10
    5dda:	08 95       	ret

00005ddc <twiIsBusy>:
    5ddc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5de0:	81 70       	andi	r24, 0x01	; 1
    5de2:	08 95       	ret

00005de4 <twiTransmit>:
    5de4:	ff 92       	push	r15
    5de6:	0f 93       	push	r16
    5de8:	1f 93       	push	r17
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
    5dee:	00 97       	sbiw	r24, 0x00	; 0
    5df0:	d1 f1       	breq	.+116    	; 0x5e66 <twiTransmit+0x82>
    5df2:	4a 30       	cpi	r20, 0x0A	; 10
    5df4:	d0 f5       	brcc	.+116    	; 0x5e6a <twiTransmit+0x86>
    5df6:	f4 2e       	mov	r15, r20
    5df8:	8b 01       	movw	r16, r22
    5dfa:	ec 01       	movw	r28, r24
    5dfc:	ef df       	rcall	.-34     	; 0x5ddc <twiIsBusy>
    5dfe:	81 11       	cpse	r24, r1
    5e00:	36 c0       	rjmp	.+108    	; 0x5e6e <twiTransmit+0x8a>
    5e02:	80 91 e6 14 	lds	r24, 0x14E6	; 0x8014e6 <_twiCurrentHandler>
    5e06:	90 91 e7 14 	lds	r25, 0x14E7	; 0x8014e7 <_twiCurrentHandler+0x1>
    5e0a:	c8 17       	cp	r28, r24
    5e0c:	d9 07       	cpc	r29, r25
    5e0e:	41 f0       	breq	.+16     	; 0x5e20 <twiTransmit+0x3c>
    5e10:	87 df       	rcall	.-242    	; 0x5d20 <_initTwiInterface>
    5e12:	89 81       	ldd	r24, Y+1	; 0x01
    5e14:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5e18:	d0 93 e7 14 	sts	0x14E7, r29	; 0x8014e7 <_twiCurrentHandler+0x1>
    5e1c:	c0 93 e6 14 	sts	0x14E6, r28	; 0x8014e6 <_twiCurrentHandler>
    5e20:	81 e0       	ldi	r24, 0x01	; 1
    5e22:	8f 0d       	add	r24, r15
    5e24:	80 93 e8 14 	sts	0x14E8, r24	; 0x8014e8 <_twiMessageLen>
    5e28:	88 81       	ld	r24, Y
    5e2a:	88 0f       	add	r24, r24
    5e2c:	80 93 e9 14 	sts	0x14E9, r24	; 0x8014e9 <_twiMessageBuffer>
    5e30:	ff 20       	and	r15, r15
    5e32:	89 f0       	breq	.+34     	; 0x5e56 <twiTransmit+0x72>
    5e34:	f8 01       	movw	r30, r16
    5e36:	aa ee       	ldi	r26, 0xEA	; 234
    5e38:	b4 e1       	ldi	r27, 0x14	; 20
    5e3a:	4f ef       	ldi	r20, 0xFF	; 255
    5e3c:	4f 0d       	add	r20, r15
    5e3e:	64 2f       	mov	r22, r20
    5e40:	70 e0       	ldi	r23, 0x00	; 0
    5e42:	cb 01       	movw	r24, r22
    5e44:	01 96       	adiw	r24, 0x01	; 1
    5e46:	b8 01       	movw	r22, r16
    5e48:	68 0f       	add	r22, r24
    5e4a:	79 1f       	adc	r23, r25
    5e4c:	81 91       	ld	r24, Z+
    5e4e:	8d 93       	st	X+, r24
    5e50:	e6 17       	cp	r30, r22
    5e52:	f7 07       	cpc	r31, r23
    5e54:	d9 f7       	brne	.-10     	; 0x5e4c <twiTransmit+0x68>
    5e56:	88 ef       	ldi	r24, 0xF8	; 248
    5e58:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5e5c:	85 ea       	ldi	r24, 0xA5	; 165
    5e5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e62:	84 e0       	ldi	r24, 0x04	; 4
    5e64:	05 c0       	rjmp	.+10     	; 0x5e70 <twiTransmit+0x8c>
    5e66:	86 e0       	ldi	r24, 0x06	; 6
    5e68:	03 c0       	rjmp	.+6      	; 0x5e70 <twiTransmit+0x8c>
    5e6a:	87 e0       	ldi	r24, 0x07	; 7
    5e6c:	01 c0       	rjmp	.+2      	; 0x5e70 <twiTransmit+0x8c>
    5e6e:	82 e0       	ldi	r24, 0x02	; 2
    5e70:	df 91       	pop	r29
    5e72:	cf 91       	pop	r28
    5e74:	1f 91       	pop	r17
    5e76:	0f 91       	pop	r16
    5e78:	ff 90       	pop	r15
    5e7a:	08 95       	ret

00005e7c <twiReceive>:
    5e7c:	1f 93       	push	r17
    5e7e:	cf 93       	push	r28
    5e80:	df 93       	push	r29
    5e82:	00 97       	sbiw	r24, 0x00	; 0
    5e84:	29 f1       	breq	.+74     	; 0x5ed0 <twiReceive+0x54>
    5e86:	6b 30       	cpi	r22, 0x0B	; 11
    5e88:	28 f5       	brcc	.+74     	; 0x5ed4 <twiReceive+0x58>
    5e8a:	16 2f       	mov	r17, r22
    5e8c:	ec 01       	movw	r28, r24
    5e8e:	a6 df       	rcall	.-180    	; 0x5ddc <twiIsBusy>
    5e90:	81 11       	cpse	r24, r1
    5e92:	22 c0       	rjmp	.+68     	; 0x5ed8 <twiReceive+0x5c>
    5e94:	80 91 e6 14 	lds	r24, 0x14E6	; 0x8014e6 <_twiCurrentHandler>
    5e98:	90 91 e7 14 	lds	r25, 0x14E7	; 0x8014e7 <_twiCurrentHandler+0x1>
    5e9c:	c8 17       	cp	r28, r24
    5e9e:	d9 07       	cpc	r29, r25
    5ea0:	41 f0       	breq	.+16     	; 0x5eb2 <twiReceive+0x36>
    5ea2:	3e df       	rcall	.-388    	; 0x5d20 <_initTwiInterface>
    5ea4:	89 81       	ldd	r24, Y+1	; 0x01
    5ea6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5eaa:	d0 93 e7 14 	sts	0x14E7, r29	; 0x8014e7 <_twiCurrentHandler+0x1>
    5eae:	c0 93 e6 14 	sts	0x14E6, r28	; 0x8014e6 <_twiCurrentHandler>
    5eb2:	10 93 e8 14 	sts	0x14E8, r17	; 0x8014e8 <_twiMessageLen>
    5eb6:	88 81       	ld	r24, Y
    5eb8:	88 0f       	add	r24, r24
    5eba:	81 60       	ori	r24, 0x01	; 1
    5ebc:	80 93 e9 14 	sts	0x14E9, r24	; 0x8014e9 <_twiMessageBuffer>
    5ec0:	88 ef       	ldi	r24, 0xF8	; 248
    5ec2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5ec6:	85 ea       	ldi	r24, 0xA5	; 165
    5ec8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ecc:	85 e0       	ldi	r24, 0x05	; 5
    5ece:	05 c0       	rjmp	.+10     	; 0x5eda <twiReceive+0x5e>
    5ed0:	86 e0       	ldi	r24, 0x06	; 6
    5ed2:	03 c0       	rjmp	.+6      	; 0x5eda <twiReceive+0x5e>
    5ed4:	87 e0       	ldi	r24, 0x07	; 7
    5ed6:	01 c0       	rjmp	.+2      	; 0x5eda <twiReceive+0x5e>
    5ed8:	82 e0       	ldi	r24, 0x02	; 2
    5eda:	df 91       	pop	r29
    5edc:	cf 91       	pop	r28
    5ede:	1f 91       	pop	r17
    5ee0:	08 95       	ret

00005ee2 <__vector_39>:
    5ee2:	1f 92       	push	r1
    5ee4:	0f 92       	push	r0
    5ee6:	0f b6       	in	r0, 0x3f	; 63
    5ee8:	0f 92       	push	r0
    5eea:	11 24       	eor	r1, r1
    5eec:	0b b6       	in	r0, 0x3b	; 59
    5eee:	0f 92       	push	r0
    5ef0:	2f 93       	push	r18
    5ef2:	3f 93       	push	r19
    5ef4:	4f 93       	push	r20
    5ef6:	5f 93       	push	r21
    5ef8:	6f 93       	push	r22
    5efa:	7f 93       	push	r23
    5efc:	8f 93       	push	r24
    5efe:	9f 93       	push	r25
    5f00:	af 93       	push	r26
    5f02:	bf 93       	push	r27
    5f04:	ef 93       	push	r30
    5f06:	ff 93       	push	r31
    5f08:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5f0c:	8e 2f       	mov	r24, r30
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	fc 01       	movw	r30, r24
    5f12:	38 97       	sbiw	r30, 0x08	; 8
    5f14:	e1 35       	cpi	r30, 0x51	; 81
    5f16:	f1 05       	cpc	r31, r1
    5f18:	08 f0       	brcs	.+2      	; 0x5f1c <__vector_39+0x3a>
    5f1a:	75 c0       	rjmp	.+234    	; 0x6006 <__vector_39+0x124>
    5f1c:	88 27       	eor	r24, r24
    5f1e:	e4 58       	subi	r30, 0x84	; 132
    5f20:	ff 4f       	sbci	r31, 0xFF	; 255
    5f22:	8f 4f       	sbci	r24, 0xFF	; 255
    5f24:	38 c5       	rjmp	.+2672   	; 0x6996 <__tablejump2__>
    5f26:	10 92 e5 14 	sts	0x14E5, r1	; 0x8014e5 <_index.1885>
    5f2a:	e0 91 e5 14 	lds	r30, 0x14E5	; 0x8014e5 <_index.1885>
    5f2e:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <_twiMessageLen>
    5f32:	e8 17       	cp	r30, r24
    5f34:	70 f4       	brcc	.+28     	; 0x5f52 <__vector_39+0x70>
    5f36:	81 e0       	ldi	r24, 0x01	; 1
    5f38:	8e 0f       	add	r24, r30
    5f3a:	80 93 e5 14 	sts	0x14E5, r24	; 0x8014e5 <_index.1885>
    5f3e:	f0 e0       	ldi	r31, 0x00	; 0
    5f40:	e7 51       	subi	r30, 0x17	; 23
    5f42:	fb 4e       	sbci	r31, 0xEB	; 235
    5f44:	80 81       	ld	r24, Z
    5f46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5f4a:	85 e8       	ldi	r24, 0x85	; 133
    5f4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f50:	72 c0       	rjmp	.+228    	; 0x6036 <__vector_39+0x154>
    5f52:	84 e9       	ldi	r24, 0x94	; 148
    5f54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f58:	80 91 e6 14 	lds	r24, 0x14E6	; 0x8014e6 <_twiCurrentHandler>
    5f5c:	90 91 e7 14 	lds	r25, 0x14E7	; 0x8014e7 <_twiCurrentHandler+0x1>
    5f60:	dc 01       	movw	r26, r24
    5f62:	12 96       	adiw	r26, 0x02	; 2
    5f64:	ed 91       	ld	r30, X+
    5f66:	fc 91       	ld	r31, X
    5f68:	13 97       	sbiw	r26, 0x03	; 3
    5f6a:	30 97       	sbiw	r30, 0x00	; 0
    5f6c:	09 f4       	brne	.+2      	; 0x5f70 <__vector_39+0x8e>
    5f6e:	63 c0       	rjmp	.+198    	; 0x6036 <__vector_39+0x154>
    5f70:	20 e0       	ldi	r18, 0x00	; 0
    5f72:	40 e0       	ldi	r20, 0x00	; 0
    5f74:	50 e0       	ldi	r21, 0x00	; 0
    5f76:	64 e0       	ldi	r22, 0x04	; 4
    5f78:	19 95       	eicall
    5f7a:	5d c0       	rjmp	.+186    	; 0x6036 <__vector_39+0x154>
    5f7c:	e0 91 e5 14 	lds	r30, 0x14E5	; 0x8014e5 <_index.1885>
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	8e 0f       	add	r24, r30
    5f84:	80 93 e5 14 	sts	0x14E5, r24	; 0x8014e5 <_index.1885>
    5f88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5f8c:	f0 e0       	ldi	r31, 0x00	; 0
    5f8e:	e7 51       	subi	r30, 0x17	; 23
    5f90:	fb 4e       	sbci	r31, 0xEB	; 235
    5f92:	80 83       	st	Z, r24
    5f94:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5f98:	80 34       	cpi	r24, 0x40	; 64
    5f9a:	11 f4       	brne	.+4      	; 0x5fa0 <__vector_39+0xbe>
    5f9c:	10 92 e5 14 	sts	0x14E5, r1	; 0x8014e5 <_index.1885>
    5fa0:	20 91 e5 14 	lds	r18, 0x14E5	; 0x8014e5 <_index.1885>
    5fa4:	30 e0       	ldi	r19, 0x00	; 0
    5fa6:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <_twiMessageLen>
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	01 97       	sbiw	r24, 0x01	; 1
    5fae:	28 17       	cp	r18, r24
    5fb0:	39 07       	cpc	r19, r25
    5fb2:	24 f4       	brge	.+8      	; 0x5fbc <__vector_39+0xda>
    5fb4:	85 ec       	ldi	r24, 0xC5	; 197
    5fb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fba:	3d c0       	rjmp	.+122    	; 0x6036 <__vector_39+0x154>
    5fbc:	85 e8       	ldi	r24, 0x85	; 133
    5fbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fc2:	39 c0       	rjmp	.+114    	; 0x6036 <__vector_39+0x154>
    5fc4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5fc8:	e0 91 e5 14 	lds	r30, 0x14E5	; 0x8014e5 <_index.1885>
    5fcc:	f0 e0       	ldi	r31, 0x00	; 0
    5fce:	e7 51       	subi	r30, 0x17	; 23
    5fd0:	fb 4e       	sbci	r31, 0xEB	; 235
    5fd2:	80 83       	st	Z, r24
    5fd4:	84 e9       	ldi	r24, 0x94	; 148
    5fd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fda:	80 91 e6 14 	lds	r24, 0x14E6	; 0x8014e6 <_twiCurrentHandler>
    5fde:	90 91 e7 14 	lds	r25, 0x14E7	; 0x8014e7 <_twiCurrentHandler+0x1>
    5fe2:	dc 01       	movw	r26, r24
    5fe4:	12 96       	adiw	r26, 0x02	; 2
    5fe6:	ed 91       	ld	r30, X+
    5fe8:	fc 91       	ld	r31, X
    5fea:	13 97       	sbiw	r26, 0x03	; 3
    5fec:	30 97       	sbiw	r30, 0x00	; 0
    5fee:	19 f1       	breq	.+70     	; 0x6036 <__vector_39+0x154>
    5ff0:	20 91 e8 14 	lds	r18, 0x14E8	; 0x8014e8 <_twiMessageLen>
    5ff4:	49 ee       	ldi	r20, 0xE9	; 233
    5ff6:	54 e1       	ldi	r21, 0x14	; 20
    5ff8:	65 e0       	ldi	r22, 0x05	; 5
    5ffa:	19 95       	eicall
    5ffc:	1c c0       	rjmp	.+56     	; 0x6036 <__vector_39+0x154>
    5ffe:	85 ea       	ldi	r24, 0xA5	; 165
    6000:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6004:	18 c0       	rjmp	.+48     	; 0x6036 <__vector_39+0x154>
    6006:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    600a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    600e:	84 e0       	ldi	r24, 0x04	; 4
    6010:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6014:	80 91 e6 14 	lds	r24, 0x14E6	; 0x8014e6 <_twiCurrentHandler>
    6018:	90 91 e7 14 	lds	r25, 0x14E7	; 0x8014e7 <_twiCurrentHandler+0x1>
    601c:	dc 01       	movw	r26, r24
    601e:	12 96       	adiw	r26, 0x02	; 2
    6020:	ed 91       	ld	r30, X+
    6022:	fc 91       	ld	r31, X
    6024:	13 97       	sbiw	r26, 0x03	; 3
    6026:	30 97       	sbiw	r30, 0x00	; 0
    6028:	31 f0       	breq	.+12     	; 0x6036 <__vector_39+0x154>
    602a:	20 e0       	ldi	r18, 0x00	; 0
    602c:	40 e0       	ldi	r20, 0x00	; 0
    602e:	50 e0       	ldi	r21, 0x00	; 0
    6030:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    6034:	19 95       	eicall
    6036:	ff 91       	pop	r31
    6038:	ef 91       	pop	r30
    603a:	bf 91       	pop	r27
    603c:	af 91       	pop	r26
    603e:	9f 91       	pop	r25
    6040:	8f 91       	pop	r24
    6042:	7f 91       	pop	r23
    6044:	6f 91       	pop	r22
    6046:	5f 91       	pop	r21
    6048:	4f 91       	pop	r20
    604a:	3f 91       	pop	r19
    604c:	2f 91       	pop	r18
    604e:	0f 90       	pop	r0
    6050:	0b be       	out	0x3b, r0	; 59
    6052:	0f 90       	pop	r0
    6054:	0f be       	out	0x3f, r0	; 63
    6056:	0f 90       	pop	r0
    6058:	1f 90       	pop	r1
    605a:	18 95       	reti

0000605c <fifo_init>:
    605c:	fc 01       	movw	r30, r24
    605e:	41 11       	cpse	r20, r1
    6060:	01 c0       	rjmp	.+2      	; 0x6064 <fifo_init+0x8>
    6062:	eb d5       	rcall	.+3030   	; 0x6c3a <abort>
    6064:	84 2f       	mov	r24, r20
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	9c 01       	movw	r18, r24
    606a:	21 50       	subi	r18, 0x01	; 1
    606c:	31 09       	sbc	r19, r1
    606e:	82 23       	and	r24, r18
    6070:	93 23       	and	r25, r19
    6072:	89 2b       	or	r24, r25
    6074:	09 f0       	breq	.+2      	; 0x6078 <fifo_init+0x1c>
    6076:	e1 d5       	rcall	.+3010   	; 0x6c3a <abort>
    6078:	41 38       	cpi	r20, 0x81	; 129
    607a:	08 f0       	brcs	.+2      	; 0x607e <fifo_init+0x22>
    607c:	de d5       	rcall	.+3004   	; 0x6c3a <abort>
    607e:	12 82       	std	Z+2, r1	; 0x02
    6080:	13 82       	std	Z+3, r1	; 0x03
    6082:	44 83       	std	Z+4, r20	; 0x04
    6084:	44 0f       	add	r20, r20
    6086:	41 50       	subi	r20, 0x01	; 1
    6088:	45 83       	std	Z+5, r20	; 0x05
    608a:	71 83       	std	Z+1, r23	; 0x01
    608c:	60 83       	st	Z, r22
    608e:	80 e0       	ldi	r24, 0x00	; 0
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	08 95       	ret

00006094 <vfprintf>:
    6094:	2f 92       	push	r2
    6096:	3f 92       	push	r3
    6098:	4f 92       	push	r4
    609a:	5f 92       	push	r5
    609c:	6f 92       	push	r6
    609e:	7f 92       	push	r7
    60a0:	8f 92       	push	r8
    60a2:	9f 92       	push	r9
    60a4:	af 92       	push	r10
    60a6:	bf 92       	push	r11
    60a8:	cf 92       	push	r12
    60aa:	df 92       	push	r13
    60ac:	ef 92       	push	r14
    60ae:	ff 92       	push	r15
    60b0:	0f 93       	push	r16
    60b2:	1f 93       	push	r17
    60b4:	cf 93       	push	r28
    60b6:	df 93       	push	r29
    60b8:	cd b7       	in	r28, 0x3d	; 61
    60ba:	de b7       	in	r29, 0x3e	; 62
    60bc:	60 97       	sbiw	r28, 0x10	; 16
    60be:	0f b6       	in	r0, 0x3f	; 63
    60c0:	f8 94       	cli
    60c2:	de bf       	out	0x3e, r29	; 62
    60c4:	0f be       	out	0x3f, r0	; 63
    60c6:	cd bf       	out	0x3d, r28	; 61
    60c8:	7c 01       	movw	r14, r24
    60ca:	1b 01       	movw	r2, r22
    60cc:	6a 01       	movw	r12, r20
    60ce:	fc 01       	movw	r30, r24
    60d0:	17 82       	std	Z+7, r1	; 0x07
    60d2:	16 82       	std	Z+6, r1	; 0x06
    60d4:	83 81       	ldd	r24, Z+3	; 0x03
    60d6:	81 ff       	sbrs	r24, 1
    60d8:	2a c3       	rjmp	.+1620   	; 0x672e <vfprintf+0x69a>
    60da:	9e 01       	movw	r18, r28
    60dc:	2f 5f       	subi	r18, 0xFF	; 255
    60de:	3f 4f       	sbci	r19, 0xFF	; 255
    60e0:	39 01       	movw	r6, r18
    60e2:	f7 01       	movw	r30, r14
    60e4:	93 81       	ldd	r25, Z+3	; 0x03
    60e6:	f1 01       	movw	r30, r2
    60e8:	93 fd       	sbrc	r25, 3
    60ea:	85 91       	lpm	r24, Z+
    60ec:	93 ff       	sbrs	r25, 3
    60ee:	81 91       	ld	r24, Z+
    60f0:	1f 01       	movw	r2, r30
    60f2:	88 23       	and	r24, r24
    60f4:	09 f4       	brne	.+2      	; 0x60f8 <vfprintf+0x64>
    60f6:	17 c3       	rjmp	.+1582   	; 0x6726 <vfprintf+0x692>
    60f8:	85 32       	cpi	r24, 0x25	; 37
    60fa:	39 f4       	brne	.+14     	; 0x610a <vfprintf+0x76>
    60fc:	93 fd       	sbrc	r25, 3
    60fe:	85 91       	lpm	r24, Z+
    6100:	93 ff       	sbrs	r25, 3
    6102:	81 91       	ld	r24, Z+
    6104:	1f 01       	movw	r2, r30
    6106:	85 32       	cpi	r24, 0x25	; 37
    6108:	31 f4       	brne	.+12     	; 0x6116 <vfprintf+0x82>
    610a:	b7 01       	movw	r22, r14
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	e6 d6       	rcall	.+3532   	; 0x6edc <fputc>
    6110:	56 01       	movw	r10, r12
    6112:	65 01       	movw	r12, r10
    6114:	e6 cf       	rjmp	.-52     	; 0x60e2 <vfprintf+0x4e>
    6116:	10 e0       	ldi	r17, 0x00	; 0
    6118:	51 2c       	mov	r5, r1
    611a:	91 2c       	mov	r9, r1
    611c:	ff e1       	ldi	r31, 0x1F	; 31
    611e:	f9 15       	cp	r31, r9
    6120:	d8 f0       	brcs	.+54     	; 0x6158 <vfprintf+0xc4>
    6122:	8b 32       	cpi	r24, 0x2B	; 43
    6124:	79 f0       	breq	.+30     	; 0x6144 <vfprintf+0xb0>
    6126:	38 f4       	brcc	.+14     	; 0x6136 <vfprintf+0xa2>
    6128:	80 32       	cpi	r24, 0x20	; 32
    612a:	79 f0       	breq	.+30     	; 0x614a <vfprintf+0xb6>
    612c:	83 32       	cpi	r24, 0x23	; 35
    612e:	a1 f4       	brne	.+40     	; 0x6158 <vfprintf+0xc4>
    6130:	f9 2d       	mov	r31, r9
    6132:	f0 61       	ori	r31, 0x10	; 16
    6134:	2e c0       	rjmp	.+92     	; 0x6192 <vfprintf+0xfe>
    6136:	8d 32       	cpi	r24, 0x2D	; 45
    6138:	61 f0       	breq	.+24     	; 0x6152 <vfprintf+0xbe>
    613a:	80 33       	cpi	r24, 0x30	; 48
    613c:	69 f4       	brne	.+26     	; 0x6158 <vfprintf+0xc4>
    613e:	29 2d       	mov	r18, r9
    6140:	21 60       	ori	r18, 0x01	; 1
    6142:	2d c0       	rjmp	.+90     	; 0x619e <vfprintf+0x10a>
    6144:	39 2d       	mov	r19, r9
    6146:	32 60       	ori	r19, 0x02	; 2
    6148:	93 2e       	mov	r9, r19
    614a:	89 2d       	mov	r24, r9
    614c:	84 60       	ori	r24, 0x04	; 4
    614e:	98 2e       	mov	r9, r24
    6150:	2a c0       	rjmp	.+84     	; 0x61a6 <vfprintf+0x112>
    6152:	e9 2d       	mov	r30, r9
    6154:	e8 60       	ori	r30, 0x08	; 8
    6156:	15 c0       	rjmp	.+42     	; 0x6182 <vfprintf+0xee>
    6158:	97 fc       	sbrc	r9, 7
    615a:	2d c0       	rjmp	.+90     	; 0x61b6 <vfprintf+0x122>
    615c:	20 ed       	ldi	r18, 0xD0	; 208
    615e:	28 0f       	add	r18, r24
    6160:	2a 30       	cpi	r18, 0x0A	; 10
    6162:	88 f4       	brcc	.+34     	; 0x6186 <vfprintf+0xf2>
    6164:	96 fe       	sbrs	r9, 6
    6166:	06 c0       	rjmp	.+12     	; 0x6174 <vfprintf+0xe0>
    6168:	3a e0       	ldi	r19, 0x0A	; 10
    616a:	13 9f       	mul	r17, r19
    616c:	20 0d       	add	r18, r0
    616e:	11 24       	eor	r1, r1
    6170:	12 2f       	mov	r17, r18
    6172:	19 c0       	rjmp	.+50     	; 0x61a6 <vfprintf+0x112>
    6174:	8a e0       	ldi	r24, 0x0A	; 10
    6176:	58 9e       	mul	r5, r24
    6178:	20 0d       	add	r18, r0
    617a:	11 24       	eor	r1, r1
    617c:	52 2e       	mov	r5, r18
    617e:	e9 2d       	mov	r30, r9
    6180:	e0 62       	ori	r30, 0x20	; 32
    6182:	9e 2e       	mov	r9, r30
    6184:	10 c0       	rjmp	.+32     	; 0x61a6 <vfprintf+0x112>
    6186:	8e 32       	cpi	r24, 0x2E	; 46
    6188:	31 f4       	brne	.+12     	; 0x6196 <vfprintf+0x102>
    618a:	96 fc       	sbrc	r9, 6
    618c:	cc c2       	rjmp	.+1432   	; 0x6726 <vfprintf+0x692>
    618e:	f9 2d       	mov	r31, r9
    6190:	f0 64       	ori	r31, 0x40	; 64
    6192:	9f 2e       	mov	r9, r31
    6194:	08 c0       	rjmp	.+16     	; 0x61a6 <vfprintf+0x112>
    6196:	8c 36       	cpi	r24, 0x6C	; 108
    6198:	21 f4       	brne	.+8      	; 0x61a2 <vfprintf+0x10e>
    619a:	29 2d       	mov	r18, r9
    619c:	20 68       	ori	r18, 0x80	; 128
    619e:	92 2e       	mov	r9, r18
    61a0:	02 c0       	rjmp	.+4      	; 0x61a6 <vfprintf+0x112>
    61a2:	88 36       	cpi	r24, 0x68	; 104
    61a4:	41 f4       	brne	.+16     	; 0x61b6 <vfprintf+0x122>
    61a6:	f1 01       	movw	r30, r2
    61a8:	93 fd       	sbrc	r25, 3
    61aa:	85 91       	lpm	r24, Z+
    61ac:	93 ff       	sbrs	r25, 3
    61ae:	81 91       	ld	r24, Z+
    61b0:	1f 01       	movw	r2, r30
    61b2:	81 11       	cpse	r24, r1
    61b4:	b3 cf       	rjmp	.-154    	; 0x611c <vfprintf+0x88>
    61b6:	9b eb       	ldi	r25, 0xBB	; 187
    61b8:	98 0f       	add	r25, r24
    61ba:	93 30       	cpi	r25, 0x03	; 3
    61bc:	20 f4       	brcc	.+8      	; 0x61c6 <vfprintf+0x132>
    61be:	99 2d       	mov	r25, r9
    61c0:	90 61       	ori	r25, 0x10	; 16
    61c2:	80 5e       	subi	r24, 0xE0	; 224
    61c4:	07 c0       	rjmp	.+14     	; 0x61d4 <vfprintf+0x140>
    61c6:	9b e9       	ldi	r25, 0x9B	; 155
    61c8:	98 0f       	add	r25, r24
    61ca:	93 30       	cpi	r25, 0x03	; 3
    61cc:	08 f0       	brcs	.+2      	; 0x61d0 <vfprintf+0x13c>
    61ce:	59 c1       	rjmp	.+690    	; 0x6482 <vfprintf+0x3ee>
    61d0:	99 2d       	mov	r25, r9
    61d2:	9f 7e       	andi	r25, 0xEF	; 239
    61d4:	96 ff       	sbrs	r25, 6
    61d6:	16 e0       	ldi	r17, 0x06	; 6
    61d8:	9f 73       	andi	r25, 0x3F	; 63
    61da:	99 2e       	mov	r9, r25
    61dc:	85 36       	cpi	r24, 0x65	; 101
    61de:	19 f4       	brne	.+6      	; 0x61e6 <vfprintf+0x152>
    61e0:	90 64       	ori	r25, 0x40	; 64
    61e2:	99 2e       	mov	r9, r25
    61e4:	08 c0       	rjmp	.+16     	; 0x61f6 <vfprintf+0x162>
    61e6:	86 36       	cpi	r24, 0x66	; 102
    61e8:	21 f4       	brne	.+8      	; 0x61f2 <vfprintf+0x15e>
    61ea:	39 2f       	mov	r19, r25
    61ec:	30 68       	ori	r19, 0x80	; 128
    61ee:	93 2e       	mov	r9, r19
    61f0:	02 c0       	rjmp	.+4      	; 0x61f6 <vfprintf+0x162>
    61f2:	11 11       	cpse	r17, r1
    61f4:	11 50       	subi	r17, 0x01	; 1
    61f6:	97 fe       	sbrs	r9, 7
    61f8:	07 c0       	rjmp	.+14     	; 0x6208 <vfprintf+0x174>
    61fa:	1c 33       	cpi	r17, 0x3C	; 60
    61fc:	50 f4       	brcc	.+20     	; 0x6212 <vfprintf+0x17e>
    61fe:	44 24       	eor	r4, r4
    6200:	43 94       	inc	r4
    6202:	41 0e       	add	r4, r17
    6204:	27 e0       	ldi	r18, 0x07	; 7
    6206:	0b c0       	rjmp	.+22     	; 0x621e <vfprintf+0x18a>
    6208:	18 30       	cpi	r17, 0x08	; 8
    620a:	38 f0       	brcs	.+14     	; 0x621a <vfprintf+0x186>
    620c:	27 e0       	ldi	r18, 0x07	; 7
    620e:	17 e0       	ldi	r17, 0x07	; 7
    6210:	05 c0       	rjmp	.+10     	; 0x621c <vfprintf+0x188>
    6212:	27 e0       	ldi	r18, 0x07	; 7
    6214:	9c e3       	ldi	r25, 0x3C	; 60
    6216:	49 2e       	mov	r4, r25
    6218:	02 c0       	rjmp	.+4      	; 0x621e <vfprintf+0x18a>
    621a:	21 2f       	mov	r18, r17
    621c:	41 2c       	mov	r4, r1
    621e:	56 01       	movw	r10, r12
    6220:	84 e0       	ldi	r24, 0x04	; 4
    6222:	a8 0e       	add	r10, r24
    6224:	b1 1c       	adc	r11, r1
    6226:	f6 01       	movw	r30, r12
    6228:	60 81       	ld	r22, Z
    622a:	71 81       	ldd	r23, Z+1	; 0x01
    622c:	82 81       	ldd	r24, Z+2	; 0x02
    622e:	93 81       	ldd	r25, Z+3	; 0x03
    6230:	04 2d       	mov	r16, r4
    6232:	a3 01       	movw	r20, r6
    6234:	06 d5       	rcall	.+2572   	; 0x6c42 <__ftoa_engine>
    6236:	6c 01       	movw	r12, r24
    6238:	f9 81       	ldd	r31, Y+1	; 0x01
    623a:	fc 87       	std	Y+12, r31	; 0x0c
    623c:	f0 ff       	sbrs	r31, 0
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <vfprintf+0x1b0>
    6240:	f3 ff       	sbrs	r31, 3
    6242:	06 c0       	rjmp	.+12     	; 0x6250 <vfprintf+0x1bc>
    6244:	91 fc       	sbrc	r9, 1
    6246:	06 c0       	rjmp	.+12     	; 0x6254 <vfprintf+0x1c0>
    6248:	92 fe       	sbrs	r9, 2
    624a:	06 c0       	rjmp	.+12     	; 0x6258 <vfprintf+0x1c4>
    624c:	00 e2       	ldi	r16, 0x20	; 32
    624e:	05 c0       	rjmp	.+10     	; 0x625a <vfprintf+0x1c6>
    6250:	0d e2       	ldi	r16, 0x2D	; 45
    6252:	03 c0       	rjmp	.+6      	; 0x625a <vfprintf+0x1c6>
    6254:	0b e2       	ldi	r16, 0x2B	; 43
    6256:	01 c0       	rjmp	.+2      	; 0x625a <vfprintf+0x1c6>
    6258:	00 e0       	ldi	r16, 0x00	; 0
    625a:	8c 85       	ldd	r24, Y+12	; 0x0c
    625c:	8c 70       	andi	r24, 0x0C	; 12
    625e:	19 f0       	breq	.+6      	; 0x6266 <vfprintf+0x1d2>
    6260:	01 11       	cpse	r16, r1
    6262:	43 c2       	rjmp	.+1158   	; 0x66ea <vfprintf+0x656>
    6264:	80 c2       	rjmp	.+1280   	; 0x6766 <vfprintf+0x6d2>
    6266:	97 fe       	sbrs	r9, 7
    6268:	10 c0       	rjmp	.+32     	; 0x628a <vfprintf+0x1f6>
    626a:	4c 0c       	add	r4, r12
    626c:	fc 85       	ldd	r31, Y+12	; 0x0c
    626e:	f4 ff       	sbrs	r31, 4
    6270:	04 c0       	rjmp	.+8      	; 0x627a <vfprintf+0x1e6>
    6272:	8a 81       	ldd	r24, Y+2	; 0x02
    6274:	81 33       	cpi	r24, 0x31	; 49
    6276:	09 f4       	brne	.+2      	; 0x627a <vfprintf+0x1e6>
    6278:	4a 94       	dec	r4
    627a:	14 14       	cp	r1, r4
    627c:	74 f5       	brge	.+92     	; 0x62da <vfprintf+0x246>
    627e:	28 e0       	ldi	r18, 0x08	; 8
    6280:	24 15       	cp	r18, r4
    6282:	78 f5       	brcc	.+94     	; 0x62e2 <vfprintf+0x24e>
    6284:	88 e0       	ldi	r24, 0x08	; 8
    6286:	48 2e       	mov	r4, r24
    6288:	2c c0       	rjmp	.+88     	; 0x62e2 <vfprintf+0x24e>
    628a:	96 fc       	sbrc	r9, 6
    628c:	2a c0       	rjmp	.+84     	; 0x62e2 <vfprintf+0x24e>
    628e:	81 2f       	mov	r24, r17
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	8c 15       	cp	r24, r12
    6294:	9d 05       	cpc	r25, r13
    6296:	9c f0       	brlt	.+38     	; 0x62be <vfprintf+0x22a>
    6298:	3c ef       	ldi	r19, 0xFC	; 252
    629a:	c3 16       	cp	r12, r19
    629c:	3f ef       	ldi	r19, 0xFF	; 255
    629e:	d3 06       	cpc	r13, r19
    62a0:	74 f0       	brlt	.+28     	; 0x62be <vfprintf+0x22a>
    62a2:	89 2d       	mov	r24, r9
    62a4:	80 68       	ori	r24, 0x80	; 128
    62a6:	98 2e       	mov	r9, r24
    62a8:	0a c0       	rjmp	.+20     	; 0x62be <vfprintf+0x22a>
    62aa:	e2 e0       	ldi	r30, 0x02	; 2
    62ac:	f0 e0       	ldi	r31, 0x00	; 0
    62ae:	ec 0f       	add	r30, r28
    62b0:	fd 1f       	adc	r31, r29
    62b2:	e1 0f       	add	r30, r17
    62b4:	f1 1d       	adc	r31, r1
    62b6:	80 81       	ld	r24, Z
    62b8:	80 33       	cpi	r24, 0x30	; 48
    62ba:	19 f4       	brne	.+6      	; 0x62c2 <vfprintf+0x22e>
    62bc:	11 50       	subi	r17, 0x01	; 1
    62be:	11 11       	cpse	r17, r1
    62c0:	f4 cf       	rjmp	.-24     	; 0x62aa <vfprintf+0x216>
    62c2:	97 fe       	sbrs	r9, 7
    62c4:	0e c0       	rjmp	.+28     	; 0x62e2 <vfprintf+0x24e>
    62c6:	44 24       	eor	r4, r4
    62c8:	43 94       	inc	r4
    62ca:	41 0e       	add	r4, r17
    62cc:	81 2f       	mov	r24, r17
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	c8 16       	cp	r12, r24
    62d2:	d9 06       	cpc	r13, r25
    62d4:	2c f4       	brge	.+10     	; 0x62e0 <vfprintf+0x24c>
    62d6:	1c 19       	sub	r17, r12
    62d8:	04 c0       	rjmp	.+8      	; 0x62e2 <vfprintf+0x24e>
    62da:	44 24       	eor	r4, r4
    62dc:	43 94       	inc	r4
    62de:	01 c0       	rjmp	.+2      	; 0x62e2 <vfprintf+0x24e>
    62e0:	10 e0       	ldi	r17, 0x00	; 0
    62e2:	97 fe       	sbrs	r9, 7
    62e4:	06 c0       	rjmp	.+12     	; 0x62f2 <vfprintf+0x25e>
    62e6:	1c 14       	cp	r1, r12
    62e8:	1d 04       	cpc	r1, r13
    62ea:	34 f4       	brge	.+12     	; 0x62f8 <vfprintf+0x264>
    62ec:	c6 01       	movw	r24, r12
    62ee:	01 96       	adiw	r24, 0x01	; 1
    62f0:	05 c0       	rjmp	.+10     	; 0x62fc <vfprintf+0x268>
    62f2:	85 e0       	ldi	r24, 0x05	; 5
    62f4:	90 e0       	ldi	r25, 0x00	; 0
    62f6:	02 c0       	rjmp	.+4      	; 0x62fc <vfprintf+0x268>
    62f8:	81 e0       	ldi	r24, 0x01	; 1
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	01 11       	cpse	r16, r1
    62fe:	01 96       	adiw	r24, 0x01	; 1
    6300:	11 23       	and	r17, r17
    6302:	31 f0       	breq	.+12     	; 0x6310 <vfprintf+0x27c>
    6304:	21 2f       	mov	r18, r17
    6306:	30 e0       	ldi	r19, 0x00	; 0
    6308:	2f 5f       	subi	r18, 0xFF	; 255
    630a:	3f 4f       	sbci	r19, 0xFF	; 255
    630c:	82 0f       	add	r24, r18
    630e:	93 1f       	adc	r25, r19
    6310:	25 2d       	mov	r18, r5
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	82 17       	cp	r24, r18
    6316:	93 07       	cpc	r25, r19
    6318:	14 f4       	brge	.+4      	; 0x631e <vfprintf+0x28a>
    631a:	58 1a       	sub	r5, r24
    631c:	01 c0       	rjmp	.+2      	; 0x6320 <vfprintf+0x28c>
    631e:	51 2c       	mov	r5, r1
    6320:	89 2d       	mov	r24, r9
    6322:	89 70       	andi	r24, 0x09	; 9
    6324:	41 f4       	brne	.+16     	; 0x6336 <vfprintf+0x2a2>
    6326:	55 20       	and	r5, r5
    6328:	31 f0       	breq	.+12     	; 0x6336 <vfprintf+0x2a2>
    632a:	b7 01       	movw	r22, r14
    632c:	80 e2       	ldi	r24, 0x20	; 32
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	d5 d5       	rcall	.+2986   	; 0x6edc <fputc>
    6332:	5a 94       	dec	r5
    6334:	f8 cf       	rjmp	.-16     	; 0x6326 <vfprintf+0x292>
    6336:	00 23       	and	r16, r16
    6338:	21 f0       	breq	.+8      	; 0x6342 <vfprintf+0x2ae>
    633a:	b7 01       	movw	r22, r14
    633c:	80 2f       	mov	r24, r16
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	cd d5       	rcall	.+2970   	; 0x6edc <fputc>
    6342:	93 fc       	sbrc	r9, 3
    6344:	08 c0       	rjmp	.+16     	; 0x6356 <vfprintf+0x2c2>
    6346:	55 20       	and	r5, r5
    6348:	31 f0       	breq	.+12     	; 0x6356 <vfprintf+0x2c2>
    634a:	b7 01       	movw	r22, r14
    634c:	80 e3       	ldi	r24, 0x30	; 48
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	c5 d5       	rcall	.+2954   	; 0x6edc <fputc>
    6352:	5a 94       	dec	r5
    6354:	f8 cf       	rjmp	.-16     	; 0x6346 <vfprintf+0x2b2>
    6356:	97 fe       	sbrs	r9, 7
    6358:	4a c0       	rjmp	.+148    	; 0x63ee <vfprintf+0x35a>
    635a:	46 01       	movw	r8, r12
    635c:	d7 fe       	sbrs	r13, 7
    635e:	02 c0       	rjmp	.+4      	; 0x6364 <vfprintf+0x2d0>
    6360:	81 2c       	mov	r8, r1
    6362:	91 2c       	mov	r9, r1
    6364:	c6 01       	movw	r24, r12
    6366:	88 19       	sub	r24, r8
    6368:	99 09       	sbc	r25, r9
    636a:	f3 01       	movw	r30, r6
    636c:	e8 0f       	add	r30, r24
    636e:	f9 1f       	adc	r31, r25
    6370:	fe 87       	std	Y+14, r31	; 0x0e
    6372:	ed 87       	std	Y+13, r30	; 0x0d
    6374:	96 01       	movw	r18, r12
    6376:	24 19       	sub	r18, r4
    6378:	31 09       	sbc	r19, r1
    637a:	38 8b       	std	Y+16, r19	; 0x10
    637c:	2f 87       	std	Y+15, r18	; 0x0f
    637e:	01 2f       	mov	r16, r17
    6380:	10 e0       	ldi	r17, 0x00	; 0
    6382:	11 95       	neg	r17
    6384:	01 95       	neg	r16
    6386:	11 09       	sbc	r17, r1
    6388:	3f ef       	ldi	r19, 0xFF	; 255
    638a:	83 16       	cp	r8, r19
    638c:	93 06       	cpc	r9, r19
    638e:	21 f4       	brne	.+8      	; 0x6398 <vfprintf+0x304>
    6390:	b7 01       	movw	r22, r14
    6392:	8e e2       	ldi	r24, 0x2E	; 46
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	a2 d5       	rcall	.+2884   	; 0x6edc <fputc>
    6398:	c8 14       	cp	r12, r8
    639a:	d9 04       	cpc	r13, r9
    639c:	4c f0       	brlt	.+18     	; 0x63b0 <vfprintf+0x31c>
    639e:	8f 85       	ldd	r24, Y+15	; 0x0f
    63a0:	98 89       	ldd	r25, Y+16	; 0x10
    63a2:	88 15       	cp	r24, r8
    63a4:	99 05       	cpc	r25, r9
    63a6:	24 f4       	brge	.+8      	; 0x63b0 <vfprintf+0x31c>
    63a8:	ed 85       	ldd	r30, Y+13	; 0x0d
    63aa:	fe 85       	ldd	r31, Y+14	; 0x0e
    63ac:	81 81       	ldd	r24, Z+1	; 0x01
    63ae:	01 c0       	rjmp	.+2      	; 0x63b2 <vfprintf+0x31e>
    63b0:	80 e3       	ldi	r24, 0x30	; 48
    63b2:	f1 e0       	ldi	r31, 0x01	; 1
    63b4:	8f 1a       	sub	r8, r31
    63b6:	91 08       	sbc	r9, r1
    63b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    63ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    63bc:	2f 5f       	subi	r18, 0xFF	; 255
    63be:	3f 4f       	sbci	r19, 0xFF	; 255
    63c0:	3e 87       	std	Y+14, r19	; 0x0e
    63c2:	2d 87       	std	Y+13, r18	; 0x0d
    63c4:	80 16       	cp	r8, r16
    63c6:	91 06       	cpc	r9, r17
    63c8:	24 f0       	brlt	.+8      	; 0x63d2 <vfprintf+0x33e>
    63ca:	b7 01       	movw	r22, r14
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	86 d5       	rcall	.+2828   	; 0x6edc <fputc>
    63d0:	db cf       	rjmp	.-74     	; 0x6388 <vfprintf+0x2f4>
    63d2:	c8 14       	cp	r12, r8
    63d4:	d9 04       	cpc	r13, r9
    63d6:	41 f4       	brne	.+16     	; 0x63e8 <vfprintf+0x354>
    63d8:	9a 81       	ldd	r25, Y+2	; 0x02
    63da:	96 33       	cpi	r25, 0x36	; 54
    63dc:	20 f4       	brcc	.+8      	; 0x63e6 <vfprintf+0x352>
    63de:	95 33       	cpi	r25, 0x35	; 53
    63e0:	19 f4       	brne	.+6      	; 0x63e8 <vfprintf+0x354>
    63e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    63e4:	34 ff       	sbrs	r19, 4
    63e6:	81 e3       	ldi	r24, 0x31	; 49
    63e8:	b7 01       	movw	r22, r14
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	48 c0       	rjmp	.+144    	; 0x647e <vfprintf+0x3ea>
    63ee:	8a 81       	ldd	r24, Y+2	; 0x02
    63f0:	81 33       	cpi	r24, 0x31	; 49
    63f2:	19 f0       	breq	.+6      	; 0x63fa <vfprintf+0x366>
    63f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    63f6:	9f 7e       	andi	r25, 0xEF	; 239
    63f8:	9c 87       	std	Y+12, r25	; 0x0c
    63fa:	b7 01       	movw	r22, r14
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	6e d5       	rcall	.+2780   	; 0x6edc <fputc>
    6400:	11 11       	cpse	r17, r1
    6402:	05 c0       	rjmp	.+10     	; 0x640e <vfprintf+0x37a>
    6404:	94 fc       	sbrc	r9, 4
    6406:	16 c0       	rjmp	.+44     	; 0x6434 <vfprintf+0x3a0>
    6408:	85 e6       	ldi	r24, 0x65	; 101
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	15 c0       	rjmp	.+42     	; 0x6438 <vfprintf+0x3a4>
    640e:	b7 01       	movw	r22, r14
    6410:	8e e2       	ldi	r24, 0x2E	; 46
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	63 d5       	rcall	.+2758   	; 0x6edc <fputc>
    6416:	1e 5f       	subi	r17, 0xFE	; 254
    6418:	82 e0       	ldi	r24, 0x02	; 2
    641a:	01 e0       	ldi	r16, 0x01	; 1
    641c:	08 0f       	add	r16, r24
    641e:	f3 01       	movw	r30, r6
    6420:	e8 0f       	add	r30, r24
    6422:	f1 1d       	adc	r31, r1
    6424:	80 81       	ld	r24, Z
    6426:	b7 01       	movw	r22, r14
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	58 d5       	rcall	.+2736   	; 0x6edc <fputc>
    642c:	80 2f       	mov	r24, r16
    642e:	01 13       	cpse	r16, r17
    6430:	f4 cf       	rjmp	.-24     	; 0x641a <vfprintf+0x386>
    6432:	e8 cf       	rjmp	.-48     	; 0x6404 <vfprintf+0x370>
    6434:	85 e4       	ldi	r24, 0x45	; 69
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	b7 01       	movw	r22, r14
    643a:	50 d5       	rcall	.+2720   	; 0x6edc <fputc>
    643c:	d7 fc       	sbrc	r13, 7
    643e:	06 c0       	rjmp	.+12     	; 0x644c <vfprintf+0x3b8>
    6440:	c1 14       	cp	r12, r1
    6442:	d1 04       	cpc	r13, r1
    6444:	41 f4       	brne	.+16     	; 0x6456 <vfprintf+0x3c2>
    6446:	ec 85       	ldd	r30, Y+12	; 0x0c
    6448:	e4 ff       	sbrs	r30, 4
    644a:	05 c0       	rjmp	.+10     	; 0x6456 <vfprintf+0x3c2>
    644c:	d1 94       	neg	r13
    644e:	c1 94       	neg	r12
    6450:	d1 08       	sbc	r13, r1
    6452:	8d e2       	ldi	r24, 0x2D	; 45
    6454:	01 c0       	rjmp	.+2      	; 0x6458 <vfprintf+0x3c4>
    6456:	8b e2       	ldi	r24, 0x2B	; 43
    6458:	b7 01       	movw	r22, r14
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	3f d5       	rcall	.+2686   	; 0x6edc <fputc>
    645e:	80 e3       	ldi	r24, 0x30	; 48
    6460:	2a e0       	ldi	r18, 0x0A	; 10
    6462:	c2 16       	cp	r12, r18
    6464:	d1 04       	cpc	r13, r1
    6466:	2c f0       	brlt	.+10     	; 0x6472 <vfprintf+0x3de>
    6468:	8f 5f       	subi	r24, 0xFF	; 255
    646a:	fa e0       	ldi	r31, 0x0A	; 10
    646c:	cf 1a       	sub	r12, r31
    646e:	d1 08       	sbc	r13, r1
    6470:	f7 cf       	rjmp	.-18     	; 0x6460 <vfprintf+0x3cc>
    6472:	b7 01       	movw	r22, r14
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	32 d5       	rcall	.+2660   	; 0x6edc <fputc>
    6478:	b7 01       	movw	r22, r14
    647a:	c6 01       	movw	r24, r12
    647c:	c0 96       	adiw	r24, 0x30	; 48
    647e:	2e d5       	rcall	.+2652   	; 0x6edc <fputc>
    6480:	49 c1       	rjmp	.+658    	; 0x6714 <vfprintf+0x680>
    6482:	83 36       	cpi	r24, 0x63	; 99
    6484:	31 f0       	breq	.+12     	; 0x6492 <vfprintf+0x3fe>
    6486:	83 37       	cpi	r24, 0x73	; 115
    6488:	79 f0       	breq	.+30     	; 0x64a8 <vfprintf+0x414>
    648a:	83 35       	cpi	r24, 0x53	; 83
    648c:	09 f0       	breq	.+2      	; 0x6490 <vfprintf+0x3fc>
    648e:	52 c0       	rjmp	.+164    	; 0x6534 <vfprintf+0x4a0>
    6490:	1f c0       	rjmp	.+62     	; 0x64d0 <vfprintf+0x43c>
    6492:	56 01       	movw	r10, r12
    6494:	32 e0       	ldi	r19, 0x02	; 2
    6496:	a3 0e       	add	r10, r19
    6498:	b1 1c       	adc	r11, r1
    649a:	f6 01       	movw	r30, r12
    649c:	80 81       	ld	r24, Z
    649e:	89 83       	std	Y+1, r24	; 0x01
    64a0:	01 e0       	ldi	r16, 0x01	; 1
    64a2:	10 e0       	ldi	r17, 0x00	; 0
    64a4:	63 01       	movw	r12, r6
    64a6:	11 c0       	rjmp	.+34     	; 0x64ca <vfprintf+0x436>
    64a8:	56 01       	movw	r10, r12
    64aa:	f2 e0       	ldi	r31, 0x02	; 2
    64ac:	af 0e       	add	r10, r31
    64ae:	b1 1c       	adc	r11, r1
    64b0:	f6 01       	movw	r30, r12
    64b2:	c0 80       	ld	r12, Z
    64b4:	d1 80       	ldd	r13, Z+1	; 0x01
    64b6:	96 fe       	sbrs	r9, 6
    64b8:	03 c0       	rjmp	.+6      	; 0x64c0 <vfprintf+0x42c>
    64ba:	61 2f       	mov	r22, r17
    64bc:	70 e0       	ldi	r23, 0x00	; 0
    64be:	02 c0       	rjmp	.+4      	; 0x64c4 <vfprintf+0x430>
    64c0:	6f ef       	ldi	r22, 0xFF	; 255
    64c2:	7f ef       	ldi	r23, 0xFF	; 255
    64c4:	c6 01       	movw	r24, r12
    64c6:	ff d4       	rcall	.+2558   	; 0x6ec6 <strnlen>
    64c8:	8c 01       	movw	r16, r24
    64ca:	f9 2d       	mov	r31, r9
    64cc:	ff 77       	andi	r31, 0x7F	; 127
    64ce:	13 c0       	rjmp	.+38     	; 0x64f6 <vfprintf+0x462>
    64d0:	56 01       	movw	r10, r12
    64d2:	22 e0       	ldi	r18, 0x02	; 2
    64d4:	a2 0e       	add	r10, r18
    64d6:	b1 1c       	adc	r11, r1
    64d8:	f6 01       	movw	r30, r12
    64da:	c0 80       	ld	r12, Z
    64dc:	d1 80       	ldd	r13, Z+1	; 0x01
    64de:	96 fe       	sbrs	r9, 6
    64e0:	03 c0       	rjmp	.+6      	; 0x64e8 <vfprintf+0x454>
    64e2:	61 2f       	mov	r22, r17
    64e4:	70 e0       	ldi	r23, 0x00	; 0
    64e6:	02 c0       	rjmp	.+4      	; 0x64ec <vfprintf+0x458>
    64e8:	6f ef       	ldi	r22, 0xFF	; 255
    64ea:	7f ef       	ldi	r23, 0xFF	; 255
    64ec:	c6 01       	movw	r24, r12
    64ee:	81 d4       	rcall	.+2306   	; 0x6df2 <strnlen_P>
    64f0:	8c 01       	movw	r16, r24
    64f2:	f9 2d       	mov	r31, r9
    64f4:	f0 68       	ori	r31, 0x80	; 128
    64f6:	9f 2e       	mov	r9, r31
    64f8:	f3 fd       	sbrc	r31, 3
    64fa:	18 c0       	rjmp	.+48     	; 0x652c <vfprintf+0x498>
    64fc:	85 2d       	mov	r24, r5
    64fe:	90 e0       	ldi	r25, 0x00	; 0
    6500:	08 17       	cp	r16, r24
    6502:	19 07       	cpc	r17, r25
    6504:	98 f4       	brcc	.+38     	; 0x652c <vfprintf+0x498>
    6506:	b7 01       	movw	r22, r14
    6508:	80 e2       	ldi	r24, 0x20	; 32
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	e7 d4       	rcall	.+2510   	; 0x6edc <fputc>
    650e:	5a 94       	dec	r5
    6510:	f5 cf       	rjmp	.-22     	; 0x64fc <vfprintf+0x468>
    6512:	f6 01       	movw	r30, r12
    6514:	97 fc       	sbrc	r9, 7
    6516:	85 91       	lpm	r24, Z+
    6518:	97 fe       	sbrs	r9, 7
    651a:	81 91       	ld	r24, Z+
    651c:	6f 01       	movw	r12, r30
    651e:	b7 01       	movw	r22, r14
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	dc d4       	rcall	.+2488   	; 0x6edc <fputc>
    6524:	51 10       	cpse	r5, r1
    6526:	5a 94       	dec	r5
    6528:	01 50       	subi	r16, 0x01	; 1
    652a:	11 09       	sbc	r17, r1
    652c:	01 15       	cp	r16, r1
    652e:	11 05       	cpc	r17, r1
    6530:	81 f7       	brne	.-32     	; 0x6512 <vfprintf+0x47e>
    6532:	f0 c0       	rjmp	.+480    	; 0x6714 <vfprintf+0x680>
    6534:	84 36       	cpi	r24, 0x64	; 100
    6536:	11 f0       	breq	.+4      	; 0x653c <vfprintf+0x4a8>
    6538:	89 36       	cpi	r24, 0x69	; 105
    653a:	59 f5       	brne	.+86     	; 0x6592 <vfprintf+0x4fe>
    653c:	56 01       	movw	r10, r12
    653e:	97 fe       	sbrs	r9, 7
    6540:	09 c0       	rjmp	.+18     	; 0x6554 <vfprintf+0x4c0>
    6542:	24 e0       	ldi	r18, 0x04	; 4
    6544:	a2 0e       	add	r10, r18
    6546:	b1 1c       	adc	r11, r1
    6548:	f6 01       	movw	r30, r12
    654a:	60 81       	ld	r22, Z
    654c:	71 81       	ldd	r23, Z+1	; 0x01
    654e:	82 81       	ldd	r24, Z+2	; 0x02
    6550:	93 81       	ldd	r25, Z+3	; 0x03
    6552:	0a c0       	rjmp	.+20     	; 0x6568 <vfprintf+0x4d4>
    6554:	f2 e0       	ldi	r31, 0x02	; 2
    6556:	af 0e       	add	r10, r31
    6558:	b1 1c       	adc	r11, r1
    655a:	f6 01       	movw	r30, r12
    655c:	60 81       	ld	r22, Z
    655e:	71 81       	ldd	r23, Z+1	; 0x01
    6560:	07 2e       	mov	r0, r23
    6562:	00 0c       	add	r0, r0
    6564:	88 0b       	sbc	r24, r24
    6566:	99 0b       	sbc	r25, r25
    6568:	f9 2d       	mov	r31, r9
    656a:	ff 76       	andi	r31, 0x6F	; 111
    656c:	9f 2e       	mov	r9, r31
    656e:	97 ff       	sbrs	r25, 7
    6570:	09 c0       	rjmp	.+18     	; 0x6584 <vfprintf+0x4f0>
    6572:	90 95       	com	r25
    6574:	80 95       	com	r24
    6576:	70 95       	com	r23
    6578:	61 95       	neg	r22
    657a:	7f 4f       	sbci	r23, 0xFF	; 255
    657c:	8f 4f       	sbci	r24, 0xFF	; 255
    657e:	9f 4f       	sbci	r25, 0xFF	; 255
    6580:	f0 68       	ori	r31, 0x80	; 128
    6582:	9f 2e       	mov	r9, r31
    6584:	2a e0       	ldi	r18, 0x0A	; 10
    6586:	30 e0       	ldi	r19, 0x00	; 0
    6588:	a3 01       	movw	r20, r6
    658a:	55 d5       	rcall	.+2730   	; 0x7036 <__ultoa_invert>
    658c:	c8 2e       	mov	r12, r24
    658e:	c6 18       	sub	r12, r6
    6590:	3e c0       	rjmp	.+124    	; 0x660e <vfprintf+0x57a>
    6592:	09 2d       	mov	r16, r9
    6594:	85 37       	cpi	r24, 0x75	; 117
    6596:	21 f4       	brne	.+8      	; 0x65a0 <vfprintf+0x50c>
    6598:	0f 7e       	andi	r16, 0xEF	; 239
    659a:	2a e0       	ldi	r18, 0x0A	; 10
    659c:	30 e0       	ldi	r19, 0x00	; 0
    659e:	1d c0       	rjmp	.+58     	; 0x65da <vfprintf+0x546>
    65a0:	09 7f       	andi	r16, 0xF9	; 249
    65a2:	8f 36       	cpi	r24, 0x6F	; 111
    65a4:	91 f0       	breq	.+36     	; 0x65ca <vfprintf+0x536>
    65a6:	18 f4       	brcc	.+6      	; 0x65ae <vfprintf+0x51a>
    65a8:	88 35       	cpi	r24, 0x58	; 88
    65aa:	59 f0       	breq	.+22     	; 0x65c2 <vfprintf+0x52e>
    65ac:	bc c0       	rjmp	.+376    	; 0x6726 <vfprintf+0x692>
    65ae:	80 37       	cpi	r24, 0x70	; 112
    65b0:	19 f0       	breq	.+6      	; 0x65b8 <vfprintf+0x524>
    65b2:	88 37       	cpi	r24, 0x78	; 120
    65b4:	11 f0       	breq	.+4      	; 0x65ba <vfprintf+0x526>
    65b6:	b7 c0       	rjmp	.+366    	; 0x6726 <vfprintf+0x692>
    65b8:	00 61       	ori	r16, 0x10	; 16
    65ba:	04 ff       	sbrs	r16, 4
    65bc:	09 c0       	rjmp	.+18     	; 0x65d0 <vfprintf+0x53c>
    65be:	04 60       	ori	r16, 0x04	; 4
    65c0:	07 c0       	rjmp	.+14     	; 0x65d0 <vfprintf+0x53c>
    65c2:	94 fe       	sbrs	r9, 4
    65c4:	08 c0       	rjmp	.+16     	; 0x65d6 <vfprintf+0x542>
    65c6:	06 60       	ori	r16, 0x06	; 6
    65c8:	06 c0       	rjmp	.+12     	; 0x65d6 <vfprintf+0x542>
    65ca:	28 e0       	ldi	r18, 0x08	; 8
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	05 c0       	rjmp	.+10     	; 0x65da <vfprintf+0x546>
    65d0:	20 e1       	ldi	r18, 0x10	; 16
    65d2:	30 e0       	ldi	r19, 0x00	; 0
    65d4:	02 c0       	rjmp	.+4      	; 0x65da <vfprintf+0x546>
    65d6:	20 e1       	ldi	r18, 0x10	; 16
    65d8:	32 e0       	ldi	r19, 0x02	; 2
    65da:	56 01       	movw	r10, r12
    65dc:	07 ff       	sbrs	r16, 7
    65de:	09 c0       	rjmp	.+18     	; 0x65f2 <vfprintf+0x55e>
    65e0:	84 e0       	ldi	r24, 0x04	; 4
    65e2:	a8 0e       	add	r10, r24
    65e4:	b1 1c       	adc	r11, r1
    65e6:	f6 01       	movw	r30, r12
    65e8:	60 81       	ld	r22, Z
    65ea:	71 81       	ldd	r23, Z+1	; 0x01
    65ec:	82 81       	ldd	r24, Z+2	; 0x02
    65ee:	93 81       	ldd	r25, Z+3	; 0x03
    65f0:	08 c0       	rjmp	.+16     	; 0x6602 <vfprintf+0x56e>
    65f2:	f2 e0       	ldi	r31, 0x02	; 2
    65f4:	af 0e       	add	r10, r31
    65f6:	b1 1c       	adc	r11, r1
    65f8:	f6 01       	movw	r30, r12
    65fa:	60 81       	ld	r22, Z
    65fc:	71 81       	ldd	r23, Z+1	; 0x01
    65fe:	80 e0       	ldi	r24, 0x00	; 0
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	a3 01       	movw	r20, r6
    6604:	18 d5       	rcall	.+2608   	; 0x7036 <__ultoa_invert>
    6606:	c8 2e       	mov	r12, r24
    6608:	c6 18       	sub	r12, r6
    660a:	0f 77       	andi	r16, 0x7F	; 127
    660c:	90 2e       	mov	r9, r16
    660e:	96 fe       	sbrs	r9, 6
    6610:	0b c0       	rjmp	.+22     	; 0x6628 <vfprintf+0x594>
    6612:	09 2d       	mov	r16, r9
    6614:	0e 7f       	andi	r16, 0xFE	; 254
    6616:	c1 16       	cp	r12, r17
    6618:	50 f4       	brcc	.+20     	; 0x662e <vfprintf+0x59a>
    661a:	94 fe       	sbrs	r9, 4
    661c:	0a c0       	rjmp	.+20     	; 0x6632 <vfprintf+0x59e>
    661e:	92 fc       	sbrc	r9, 2
    6620:	08 c0       	rjmp	.+16     	; 0x6632 <vfprintf+0x59e>
    6622:	09 2d       	mov	r16, r9
    6624:	0e 7e       	andi	r16, 0xEE	; 238
    6626:	05 c0       	rjmp	.+10     	; 0x6632 <vfprintf+0x59e>
    6628:	dc 2c       	mov	r13, r12
    662a:	09 2d       	mov	r16, r9
    662c:	03 c0       	rjmp	.+6      	; 0x6634 <vfprintf+0x5a0>
    662e:	dc 2c       	mov	r13, r12
    6630:	01 c0       	rjmp	.+2      	; 0x6634 <vfprintf+0x5a0>
    6632:	d1 2e       	mov	r13, r17
    6634:	04 ff       	sbrs	r16, 4
    6636:	0d c0       	rjmp	.+26     	; 0x6652 <vfprintf+0x5be>
    6638:	fe 01       	movw	r30, r28
    663a:	ec 0d       	add	r30, r12
    663c:	f1 1d       	adc	r31, r1
    663e:	80 81       	ld	r24, Z
    6640:	80 33       	cpi	r24, 0x30	; 48
    6642:	11 f4       	brne	.+4      	; 0x6648 <vfprintf+0x5b4>
    6644:	09 7e       	andi	r16, 0xE9	; 233
    6646:	09 c0       	rjmp	.+18     	; 0x665a <vfprintf+0x5c6>
    6648:	02 ff       	sbrs	r16, 2
    664a:	06 c0       	rjmp	.+12     	; 0x6658 <vfprintf+0x5c4>
    664c:	d3 94       	inc	r13
    664e:	d3 94       	inc	r13
    6650:	04 c0       	rjmp	.+8      	; 0x665a <vfprintf+0x5c6>
    6652:	80 2f       	mov	r24, r16
    6654:	86 78       	andi	r24, 0x86	; 134
    6656:	09 f0       	breq	.+2      	; 0x665a <vfprintf+0x5c6>
    6658:	d3 94       	inc	r13
    665a:	03 fd       	sbrc	r16, 3
    665c:	10 c0       	rjmp	.+32     	; 0x667e <vfprintf+0x5ea>
    665e:	00 ff       	sbrs	r16, 0
    6660:	06 c0       	rjmp	.+12     	; 0x666e <vfprintf+0x5da>
    6662:	1c 2d       	mov	r17, r12
    6664:	d5 14       	cp	r13, r5
    6666:	78 f4       	brcc	.+30     	; 0x6686 <vfprintf+0x5f2>
    6668:	15 0d       	add	r17, r5
    666a:	1d 19       	sub	r17, r13
    666c:	0c c0       	rjmp	.+24     	; 0x6686 <vfprintf+0x5f2>
    666e:	d5 14       	cp	r13, r5
    6670:	50 f4       	brcc	.+20     	; 0x6686 <vfprintf+0x5f2>
    6672:	b7 01       	movw	r22, r14
    6674:	80 e2       	ldi	r24, 0x20	; 32
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	31 d4       	rcall	.+2146   	; 0x6edc <fputc>
    667a:	d3 94       	inc	r13
    667c:	f8 cf       	rjmp	.-16     	; 0x666e <vfprintf+0x5da>
    667e:	d5 14       	cp	r13, r5
    6680:	10 f4       	brcc	.+4      	; 0x6686 <vfprintf+0x5f2>
    6682:	5d 18       	sub	r5, r13
    6684:	01 c0       	rjmp	.+2      	; 0x6688 <vfprintf+0x5f4>
    6686:	51 2c       	mov	r5, r1
    6688:	04 ff       	sbrs	r16, 4
    668a:	0f c0       	rjmp	.+30     	; 0x66aa <vfprintf+0x616>
    668c:	b7 01       	movw	r22, r14
    668e:	80 e3       	ldi	r24, 0x30	; 48
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	24 d4       	rcall	.+2120   	; 0x6edc <fputc>
    6694:	02 ff       	sbrs	r16, 2
    6696:	16 c0       	rjmp	.+44     	; 0x66c4 <vfprintf+0x630>
    6698:	01 fd       	sbrc	r16, 1
    669a:	03 c0       	rjmp	.+6      	; 0x66a2 <vfprintf+0x60e>
    669c:	88 e7       	ldi	r24, 0x78	; 120
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	02 c0       	rjmp	.+4      	; 0x66a6 <vfprintf+0x612>
    66a2:	88 e5       	ldi	r24, 0x58	; 88
    66a4:	90 e0       	ldi	r25, 0x00	; 0
    66a6:	b7 01       	movw	r22, r14
    66a8:	0c c0       	rjmp	.+24     	; 0x66c2 <vfprintf+0x62e>
    66aa:	80 2f       	mov	r24, r16
    66ac:	86 78       	andi	r24, 0x86	; 134
    66ae:	51 f0       	breq	.+20     	; 0x66c4 <vfprintf+0x630>
    66b0:	01 ff       	sbrs	r16, 1
    66b2:	02 c0       	rjmp	.+4      	; 0x66b8 <vfprintf+0x624>
    66b4:	8b e2       	ldi	r24, 0x2B	; 43
    66b6:	01 c0       	rjmp	.+2      	; 0x66ba <vfprintf+0x626>
    66b8:	80 e2       	ldi	r24, 0x20	; 32
    66ba:	07 fd       	sbrc	r16, 7
    66bc:	8d e2       	ldi	r24, 0x2D	; 45
    66be:	b7 01       	movw	r22, r14
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	0c d4       	rcall	.+2072   	; 0x6edc <fputc>
    66c4:	c1 16       	cp	r12, r17
    66c6:	30 f4       	brcc	.+12     	; 0x66d4 <vfprintf+0x640>
    66c8:	b7 01       	movw	r22, r14
    66ca:	80 e3       	ldi	r24, 0x30	; 48
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	06 d4       	rcall	.+2060   	; 0x6edc <fputc>
    66d0:	11 50       	subi	r17, 0x01	; 1
    66d2:	f8 cf       	rjmp	.-16     	; 0x66c4 <vfprintf+0x630>
    66d4:	ca 94       	dec	r12
    66d6:	f3 01       	movw	r30, r6
    66d8:	ec 0d       	add	r30, r12
    66da:	f1 1d       	adc	r31, r1
    66dc:	80 81       	ld	r24, Z
    66de:	b7 01       	movw	r22, r14
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	fc d3       	rcall	.+2040   	; 0x6edc <fputc>
    66e4:	c1 10       	cpse	r12, r1
    66e6:	f6 cf       	rjmp	.-20     	; 0x66d4 <vfprintf+0x640>
    66e8:	15 c0       	rjmp	.+42     	; 0x6714 <vfprintf+0x680>
    66ea:	f4 e0       	ldi	r31, 0x04	; 4
    66ec:	f5 15       	cp	r31, r5
    66ee:	50 f5       	brcc	.+84     	; 0x6744 <vfprintf+0x6b0>
    66f0:	84 e0       	ldi	r24, 0x04	; 4
    66f2:	58 1a       	sub	r5, r24
    66f4:	93 fe       	sbrs	r9, 3
    66f6:	1e c0       	rjmp	.+60     	; 0x6734 <vfprintf+0x6a0>
    66f8:	01 11       	cpse	r16, r1
    66fa:	25 c0       	rjmp	.+74     	; 0x6746 <vfprintf+0x6b2>
    66fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    66fe:	23 ff       	sbrs	r18, 3
    6700:	27 c0       	rjmp	.+78     	; 0x6750 <vfprintf+0x6bc>
    6702:	0a e9       	ldi	r16, 0x9A	; 154
    6704:	11 e0       	ldi	r17, 0x01	; 1
    6706:	39 2d       	mov	r19, r9
    6708:	30 71       	andi	r19, 0x10	; 16
    670a:	93 2e       	mov	r9, r19
    670c:	f8 01       	movw	r30, r16
    670e:	84 91       	lpm	r24, Z
    6710:	81 11       	cpse	r24, r1
    6712:	21 c0       	rjmp	.+66     	; 0x6756 <vfprintf+0x6c2>
    6714:	55 20       	and	r5, r5
    6716:	09 f4       	brne	.+2      	; 0x671a <vfprintf+0x686>
    6718:	fc cc       	rjmp	.-1544   	; 0x6112 <vfprintf+0x7e>
    671a:	b7 01       	movw	r22, r14
    671c:	80 e2       	ldi	r24, 0x20	; 32
    671e:	90 e0       	ldi	r25, 0x00	; 0
    6720:	dd d3       	rcall	.+1978   	; 0x6edc <fputc>
    6722:	5a 94       	dec	r5
    6724:	f7 cf       	rjmp	.-18     	; 0x6714 <vfprintf+0x680>
    6726:	f7 01       	movw	r30, r14
    6728:	86 81       	ldd	r24, Z+6	; 0x06
    672a:	97 81       	ldd	r25, Z+7	; 0x07
    672c:	23 c0       	rjmp	.+70     	; 0x6774 <vfprintf+0x6e0>
    672e:	8f ef       	ldi	r24, 0xFF	; 255
    6730:	9f ef       	ldi	r25, 0xFF	; 255
    6732:	20 c0       	rjmp	.+64     	; 0x6774 <vfprintf+0x6e0>
    6734:	b7 01       	movw	r22, r14
    6736:	80 e2       	ldi	r24, 0x20	; 32
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	d0 d3       	rcall	.+1952   	; 0x6edc <fputc>
    673c:	5a 94       	dec	r5
    673e:	51 10       	cpse	r5, r1
    6740:	f9 cf       	rjmp	.-14     	; 0x6734 <vfprintf+0x6a0>
    6742:	da cf       	rjmp	.-76     	; 0x66f8 <vfprintf+0x664>
    6744:	51 2c       	mov	r5, r1
    6746:	b7 01       	movw	r22, r14
    6748:	80 2f       	mov	r24, r16
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	c7 d3       	rcall	.+1934   	; 0x6edc <fputc>
    674e:	d6 cf       	rjmp	.-84     	; 0x66fc <vfprintf+0x668>
    6750:	0e e9       	ldi	r16, 0x9E	; 158
    6752:	11 e0       	ldi	r17, 0x01	; 1
    6754:	d8 cf       	rjmp	.-80     	; 0x6706 <vfprintf+0x672>
    6756:	91 10       	cpse	r9, r1
    6758:	80 52       	subi	r24, 0x20	; 32
    675a:	b7 01       	movw	r22, r14
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	be d3       	rcall	.+1916   	; 0x6edc <fputc>
    6760:	0f 5f       	subi	r16, 0xFF	; 255
    6762:	1f 4f       	sbci	r17, 0xFF	; 255
    6764:	d3 cf       	rjmp	.-90     	; 0x670c <vfprintf+0x678>
    6766:	23 e0       	ldi	r18, 0x03	; 3
    6768:	25 15       	cp	r18, r5
    676a:	10 f4       	brcc	.+4      	; 0x6770 <vfprintf+0x6dc>
    676c:	83 e0       	ldi	r24, 0x03	; 3
    676e:	c1 cf       	rjmp	.-126    	; 0x66f2 <vfprintf+0x65e>
    6770:	51 2c       	mov	r5, r1
    6772:	c4 cf       	rjmp	.-120    	; 0x66fc <vfprintf+0x668>
    6774:	60 96       	adiw	r28, 0x10	; 16
    6776:	0f b6       	in	r0, 0x3f	; 63
    6778:	f8 94       	cli
    677a:	de bf       	out	0x3e, r29	; 62
    677c:	0f be       	out	0x3f, r0	; 63
    677e:	cd bf       	out	0x3d, r28	; 61
    6780:	df 91       	pop	r29
    6782:	cf 91       	pop	r28
    6784:	1f 91       	pop	r17
    6786:	0f 91       	pop	r16
    6788:	ff 90       	pop	r15
    678a:	ef 90       	pop	r14
    678c:	df 90       	pop	r13
    678e:	cf 90       	pop	r12
    6790:	bf 90       	pop	r11
    6792:	af 90       	pop	r10
    6794:	9f 90       	pop	r9
    6796:	8f 90       	pop	r8
    6798:	7f 90       	pop	r7
    679a:	6f 90       	pop	r6
    679c:	5f 90       	pop	r5
    679e:	4f 90       	pop	r4
    67a0:	3f 90       	pop	r3
    67a2:	2f 90       	pop	r2
    67a4:	08 95       	ret

000067a6 <__divsf3>:
    67a6:	12 d0       	rcall	.+36     	; 0x67cc <__divsf3x>
    67a8:	0c 94 35 23 	jmp	0x466a	; 0x466a <__fp_round>
    67ac:	0e 94 2e 23 	call	0x465c	; 0x465c <__fp_pscB>
    67b0:	58 f0       	brcs	.+22     	; 0x67c8 <__divsf3+0x22>
    67b2:	0e 94 27 23 	call	0x464e	; 0x464e <__fp_pscA>
    67b6:	40 f0       	brcs	.+16     	; 0x67c8 <__divsf3+0x22>
    67b8:	29 f4       	brne	.+10     	; 0x67c4 <__divsf3+0x1e>
    67ba:	5f 3f       	cpi	r21, 0xFF	; 255
    67bc:	29 f0       	breq	.+10     	; 0x67c8 <__divsf3+0x22>
    67be:	0c 94 1e 23 	jmp	0x463c	; 0x463c <__fp_inf>
    67c2:	51 11       	cpse	r21, r1
    67c4:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__fp_szero>
    67c8:	0c 94 24 23 	jmp	0x4648	; 0x4648 <__fp_nan>

000067cc <__divsf3x>:
    67cc:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__fp_split3>
    67d0:	68 f3       	brcs	.-38     	; 0x67ac <__divsf3+0x6>

000067d2 <__divsf3_pse>:
    67d2:	99 23       	and	r25, r25
    67d4:	b1 f3       	breq	.-20     	; 0x67c2 <__divsf3+0x1c>
    67d6:	55 23       	and	r21, r21
    67d8:	91 f3       	breq	.-28     	; 0x67be <__divsf3+0x18>
    67da:	95 1b       	sub	r25, r21
    67dc:	55 0b       	sbc	r21, r21
    67de:	bb 27       	eor	r27, r27
    67e0:	aa 27       	eor	r26, r26
    67e2:	62 17       	cp	r22, r18
    67e4:	73 07       	cpc	r23, r19
    67e6:	84 07       	cpc	r24, r20
    67e8:	38 f0       	brcs	.+14     	; 0x67f8 <__divsf3_pse+0x26>
    67ea:	9f 5f       	subi	r25, 0xFF	; 255
    67ec:	5f 4f       	sbci	r21, 0xFF	; 255
    67ee:	22 0f       	add	r18, r18
    67f0:	33 1f       	adc	r19, r19
    67f2:	44 1f       	adc	r20, r20
    67f4:	aa 1f       	adc	r26, r26
    67f6:	a9 f3       	breq	.-22     	; 0x67e2 <__divsf3_pse+0x10>
    67f8:	35 d0       	rcall	.+106    	; 0x6864 <__divsf3_pse+0x92>
    67fa:	0e 2e       	mov	r0, r30
    67fc:	3a f0       	brmi	.+14     	; 0x680c <__divsf3_pse+0x3a>
    67fe:	e0 e8       	ldi	r30, 0x80	; 128
    6800:	32 d0       	rcall	.+100    	; 0x6866 <__divsf3_pse+0x94>
    6802:	91 50       	subi	r25, 0x01	; 1
    6804:	50 40       	sbci	r21, 0x00	; 0
    6806:	e6 95       	lsr	r30
    6808:	00 1c       	adc	r0, r0
    680a:	ca f7       	brpl	.-14     	; 0x67fe <__divsf3_pse+0x2c>
    680c:	2b d0       	rcall	.+86     	; 0x6864 <__divsf3_pse+0x92>
    680e:	fe 2f       	mov	r31, r30
    6810:	29 d0       	rcall	.+82     	; 0x6864 <__divsf3_pse+0x92>
    6812:	66 0f       	add	r22, r22
    6814:	77 1f       	adc	r23, r23
    6816:	88 1f       	adc	r24, r24
    6818:	bb 1f       	adc	r27, r27
    681a:	26 17       	cp	r18, r22
    681c:	37 07       	cpc	r19, r23
    681e:	48 07       	cpc	r20, r24
    6820:	ab 07       	cpc	r26, r27
    6822:	b0 e8       	ldi	r27, 0x80	; 128
    6824:	09 f0       	breq	.+2      	; 0x6828 <__divsf3_pse+0x56>
    6826:	bb 0b       	sbc	r27, r27
    6828:	80 2d       	mov	r24, r0
    682a:	bf 01       	movw	r22, r30
    682c:	ff 27       	eor	r31, r31
    682e:	93 58       	subi	r25, 0x83	; 131
    6830:	5f 4f       	sbci	r21, 0xFF	; 255
    6832:	3a f0       	brmi	.+14     	; 0x6842 <__divsf3_pse+0x70>
    6834:	9e 3f       	cpi	r25, 0xFE	; 254
    6836:	51 05       	cpc	r21, r1
    6838:	78 f0       	brcs	.+30     	; 0x6858 <__divsf3_pse+0x86>
    683a:	0c 94 1e 23 	jmp	0x463c	; 0x463c <__fp_inf>
    683e:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__fp_szero>
    6842:	5f 3f       	cpi	r21, 0xFF	; 255
    6844:	e4 f3       	brlt	.-8      	; 0x683e <__divsf3_pse+0x6c>
    6846:	98 3e       	cpi	r25, 0xE8	; 232
    6848:	d4 f3       	brlt	.-12     	; 0x683e <__divsf3_pse+0x6c>
    684a:	86 95       	lsr	r24
    684c:	77 95       	ror	r23
    684e:	67 95       	ror	r22
    6850:	b7 95       	ror	r27
    6852:	f7 95       	ror	r31
    6854:	9f 5f       	subi	r25, 0xFF	; 255
    6856:	c9 f7       	brne	.-14     	; 0x684a <__divsf3_pse+0x78>
    6858:	88 0f       	add	r24, r24
    685a:	91 1d       	adc	r25, r1
    685c:	96 95       	lsr	r25
    685e:	87 95       	ror	r24
    6860:	97 f9       	bld	r25, 7
    6862:	08 95       	ret
    6864:	e1 e0       	ldi	r30, 0x01	; 1
    6866:	66 0f       	add	r22, r22
    6868:	77 1f       	adc	r23, r23
    686a:	88 1f       	adc	r24, r24
    686c:	bb 1f       	adc	r27, r27
    686e:	62 17       	cp	r22, r18
    6870:	73 07       	cpc	r23, r19
    6872:	84 07       	cpc	r24, r20
    6874:	ba 07       	cpc	r27, r26
    6876:	20 f0       	brcs	.+8      	; 0x6880 <__divsf3_pse+0xae>
    6878:	62 1b       	sub	r22, r18
    687a:	73 0b       	sbc	r23, r19
    687c:	84 0b       	sbc	r24, r20
    687e:	ba 0b       	sbc	r27, r26
    6880:	ee 1f       	adc	r30, r30
    6882:	88 f7       	brcc	.-30     	; 0x6866 <__divsf3_pse+0x94>
    6884:	e0 95       	com	r30
    6886:	08 95       	ret

00006888 <__floatunsisf>:
    6888:	e8 94       	clt
    688a:	09 c0       	rjmp	.+18     	; 0x689e <__floatsisf+0x12>

0000688c <__floatsisf>:
    688c:	97 fb       	bst	r25, 7
    688e:	3e f4       	brtc	.+14     	; 0x689e <__floatsisf+0x12>
    6890:	90 95       	com	r25
    6892:	80 95       	com	r24
    6894:	70 95       	com	r23
    6896:	61 95       	neg	r22
    6898:	7f 4f       	sbci	r23, 0xFF	; 255
    689a:	8f 4f       	sbci	r24, 0xFF	; 255
    689c:	9f 4f       	sbci	r25, 0xFF	; 255
    689e:	99 23       	and	r25, r25
    68a0:	a9 f0       	breq	.+42     	; 0x68cc <__floatsisf+0x40>
    68a2:	f9 2f       	mov	r31, r25
    68a4:	96 e9       	ldi	r25, 0x96	; 150
    68a6:	bb 27       	eor	r27, r27
    68a8:	93 95       	inc	r25
    68aa:	f6 95       	lsr	r31
    68ac:	87 95       	ror	r24
    68ae:	77 95       	ror	r23
    68b0:	67 95       	ror	r22
    68b2:	b7 95       	ror	r27
    68b4:	f1 11       	cpse	r31, r1
    68b6:	f8 cf       	rjmp	.-16     	; 0x68a8 <__floatsisf+0x1c>
    68b8:	fa f4       	brpl	.+62     	; 0x68f8 <__floatsisf+0x6c>
    68ba:	bb 0f       	add	r27, r27
    68bc:	11 f4       	brne	.+4      	; 0x68c2 <__floatsisf+0x36>
    68be:	60 ff       	sbrs	r22, 0
    68c0:	1b c0       	rjmp	.+54     	; 0x68f8 <__floatsisf+0x6c>
    68c2:	6f 5f       	subi	r22, 0xFF	; 255
    68c4:	7f 4f       	sbci	r23, 0xFF	; 255
    68c6:	8f 4f       	sbci	r24, 0xFF	; 255
    68c8:	9f 4f       	sbci	r25, 0xFF	; 255
    68ca:	16 c0       	rjmp	.+44     	; 0x68f8 <__floatsisf+0x6c>
    68cc:	88 23       	and	r24, r24
    68ce:	11 f0       	breq	.+4      	; 0x68d4 <__floatsisf+0x48>
    68d0:	96 e9       	ldi	r25, 0x96	; 150
    68d2:	11 c0       	rjmp	.+34     	; 0x68f6 <__floatsisf+0x6a>
    68d4:	77 23       	and	r23, r23
    68d6:	21 f0       	breq	.+8      	; 0x68e0 <__floatsisf+0x54>
    68d8:	9e e8       	ldi	r25, 0x8E	; 142
    68da:	87 2f       	mov	r24, r23
    68dc:	76 2f       	mov	r23, r22
    68de:	05 c0       	rjmp	.+10     	; 0x68ea <__floatsisf+0x5e>
    68e0:	66 23       	and	r22, r22
    68e2:	71 f0       	breq	.+28     	; 0x6900 <__floatsisf+0x74>
    68e4:	96 e8       	ldi	r25, 0x86	; 134
    68e6:	86 2f       	mov	r24, r22
    68e8:	70 e0       	ldi	r23, 0x00	; 0
    68ea:	60 e0       	ldi	r22, 0x00	; 0
    68ec:	2a f0       	brmi	.+10     	; 0x68f8 <__floatsisf+0x6c>
    68ee:	9a 95       	dec	r25
    68f0:	66 0f       	add	r22, r22
    68f2:	77 1f       	adc	r23, r23
    68f4:	88 1f       	adc	r24, r24
    68f6:	da f7       	brpl	.-10     	; 0x68ee <__floatsisf+0x62>
    68f8:	88 0f       	add	r24, r24
    68fa:	96 95       	lsr	r25
    68fc:	87 95       	ror	r24
    68fe:	97 f9       	bld	r25, 7
    6900:	08 95       	ret

00006902 <__gesf2>:
    6902:	03 d0       	rcall	.+6      	; 0x690a <__fp_cmp>
    6904:	08 f4       	brcc	.+2      	; 0x6908 <__gesf2+0x6>
    6906:	8f ef       	ldi	r24, 0xFF	; 255
    6908:	08 95       	ret

0000690a <__fp_cmp>:
    690a:	99 0f       	add	r25, r25
    690c:	00 08       	sbc	r0, r0
    690e:	55 0f       	add	r21, r21
    6910:	aa 0b       	sbc	r26, r26
    6912:	e0 e8       	ldi	r30, 0x80	; 128
    6914:	fe ef       	ldi	r31, 0xFE	; 254
    6916:	16 16       	cp	r1, r22
    6918:	17 06       	cpc	r1, r23
    691a:	e8 07       	cpc	r30, r24
    691c:	f9 07       	cpc	r31, r25
    691e:	c0 f0       	brcs	.+48     	; 0x6950 <__fp_cmp+0x46>
    6920:	12 16       	cp	r1, r18
    6922:	13 06       	cpc	r1, r19
    6924:	e4 07       	cpc	r30, r20
    6926:	f5 07       	cpc	r31, r21
    6928:	98 f0       	brcs	.+38     	; 0x6950 <__fp_cmp+0x46>
    692a:	62 1b       	sub	r22, r18
    692c:	73 0b       	sbc	r23, r19
    692e:	84 0b       	sbc	r24, r20
    6930:	95 0b       	sbc	r25, r21
    6932:	39 f4       	brne	.+14     	; 0x6942 <__fp_cmp+0x38>
    6934:	0a 26       	eor	r0, r26
    6936:	61 f0       	breq	.+24     	; 0x6950 <__fp_cmp+0x46>
    6938:	23 2b       	or	r18, r19
    693a:	24 2b       	or	r18, r20
    693c:	25 2b       	or	r18, r21
    693e:	21 f4       	brne	.+8      	; 0x6948 <__fp_cmp+0x3e>
    6940:	08 95       	ret
    6942:	0a 26       	eor	r0, r26
    6944:	09 f4       	brne	.+2      	; 0x6948 <__fp_cmp+0x3e>
    6946:	a1 40       	sbci	r26, 0x01	; 1
    6948:	a6 95       	lsr	r26
    694a:	8f ef       	ldi	r24, 0xFF	; 255
    694c:	81 1d       	adc	r24, r1
    694e:	81 1d       	adc	r24, r1
    6950:	08 95       	ret

00006952 <__udivmodsi4>:
    6952:	a1 e2       	ldi	r26, 0x21	; 33
    6954:	1a 2e       	mov	r1, r26
    6956:	aa 1b       	sub	r26, r26
    6958:	bb 1b       	sub	r27, r27
    695a:	fd 01       	movw	r30, r26
    695c:	0d c0       	rjmp	.+26     	; 0x6978 <__udivmodsi4_ep>

0000695e <__udivmodsi4_loop>:
    695e:	aa 1f       	adc	r26, r26
    6960:	bb 1f       	adc	r27, r27
    6962:	ee 1f       	adc	r30, r30
    6964:	ff 1f       	adc	r31, r31
    6966:	a2 17       	cp	r26, r18
    6968:	b3 07       	cpc	r27, r19
    696a:	e4 07       	cpc	r30, r20
    696c:	f5 07       	cpc	r31, r21
    696e:	20 f0       	brcs	.+8      	; 0x6978 <__udivmodsi4_ep>
    6970:	a2 1b       	sub	r26, r18
    6972:	b3 0b       	sbc	r27, r19
    6974:	e4 0b       	sbc	r30, r20
    6976:	f5 0b       	sbc	r31, r21

00006978 <__udivmodsi4_ep>:
    6978:	66 1f       	adc	r22, r22
    697a:	77 1f       	adc	r23, r23
    697c:	88 1f       	adc	r24, r24
    697e:	99 1f       	adc	r25, r25
    6980:	1a 94       	dec	r1
    6982:	69 f7       	brne	.-38     	; 0x695e <__udivmodsi4_loop>
    6984:	60 95       	com	r22
    6986:	70 95       	com	r23
    6988:	80 95       	com	r24
    698a:	90 95       	com	r25
    698c:	9b 01       	movw	r18, r22
    698e:	ac 01       	movw	r20, r24
    6990:	bd 01       	movw	r22, r26
    6992:	cf 01       	movw	r24, r30
    6994:	08 95       	ret

00006996 <__tablejump2__>:
    6996:	ee 0f       	add	r30, r30
    6998:	ff 1f       	adc	r31, r31
    699a:	88 1f       	adc	r24, r24
    699c:	8b bf       	out	0x3b, r24	; 59
    699e:	07 90       	elpm	r0, Z+
    69a0:	f6 91       	elpm	r31, Z
    69a2:	e0 2d       	mov	r30, r0
    69a4:	19 94       	eijmp

000069a6 <__umulhisi3>:
    69a6:	a2 9f       	mul	r26, r18
    69a8:	b0 01       	movw	r22, r0
    69aa:	b3 9f       	mul	r27, r19
    69ac:	c0 01       	movw	r24, r0
    69ae:	a3 9f       	mul	r26, r19
    69b0:	70 0d       	add	r23, r0
    69b2:	81 1d       	adc	r24, r1
    69b4:	11 24       	eor	r1, r1
    69b6:	91 1d       	adc	r25, r1
    69b8:	b2 9f       	mul	r27, r18
    69ba:	70 0d       	add	r23, r0
    69bc:	81 1d       	adc	r24, r1
    69be:	11 24       	eor	r1, r1
    69c0:	91 1d       	adc	r25, r1
    69c2:	08 95       	ret

000069c4 <calloc>:
    69c4:	0f 93       	push	r16
    69c6:	1f 93       	push	r17
    69c8:	cf 93       	push	r28
    69ca:	df 93       	push	r29
    69cc:	86 9f       	mul	r24, r22
    69ce:	80 01       	movw	r16, r0
    69d0:	87 9f       	mul	r24, r23
    69d2:	10 0d       	add	r17, r0
    69d4:	96 9f       	mul	r25, r22
    69d6:	10 0d       	add	r17, r0
    69d8:	11 24       	eor	r1, r1
    69da:	c8 01       	movw	r24, r16
    69dc:	0d d0       	rcall	.+26     	; 0x69f8 <malloc>
    69de:	ec 01       	movw	r28, r24
    69e0:	00 97       	sbiw	r24, 0x00	; 0
    69e2:	21 f0       	breq	.+8      	; 0x69ec <calloc+0x28>
    69e4:	a8 01       	movw	r20, r16
    69e6:	60 e0       	ldi	r22, 0x00	; 0
    69e8:	70 e0       	ldi	r23, 0x00	; 0
    69ea:	17 d2       	rcall	.+1070   	; 0x6e1a <memset>
    69ec:	ce 01       	movw	r24, r28
    69ee:	df 91       	pop	r29
    69f0:	cf 91       	pop	r28
    69f2:	1f 91       	pop	r17
    69f4:	0f 91       	pop	r16
    69f6:	08 95       	ret

000069f8 <malloc>:
    69f8:	0f 93       	push	r16
    69fa:	1f 93       	push	r17
    69fc:	cf 93       	push	r28
    69fe:	df 93       	push	r29
    6a00:	82 30       	cpi	r24, 0x02	; 2
    6a02:	91 05       	cpc	r25, r1
    6a04:	10 f4       	brcc	.+4      	; 0x6a0a <malloc+0x12>
    6a06:	82 e0       	ldi	r24, 0x02	; 2
    6a08:	90 e0       	ldi	r25, 0x00	; 0
    6a0a:	e0 91 0d 15 	lds	r30, 0x150D	; 0x80150d <__flp>
    6a0e:	f0 91 0e 15 	lds	r31, 0x150E	; 0x80150e <__flp+0x1>
    6a12:	20 e0       	ldi	r18, 0x00	; 0
    6a14:	30 e0       	ldi	r19, 0x00	; 0
    6a16:	a0 e0       	ldi	r26, 0x00	; 0
    6a18:	b0 e0       	ldi	r27, 0x00	; 0
    6a1a:	30 97       	sbiw	r30, 0x00	; 0
    6a1c:	19 f1       	breq	.+70     	; 0x6a64 <malloc+0x6c>
    6a1e:	40 81       	ld	r20, Z
    6a20:	51 81       	ldd	r21, Z+1	; 0x01
    6a22:	02 81       	ldd	r16, Z+2	; 0x02
    6a24:	13 81       	ldd	r17, Z+3	; 0x03
    6a26:	48 17       	cp	r20, r24
    6a28:	59 07       	cpc	r21, r25
    6a2a:	c8 f0       	brcs	.+50     	; 0x6a5e <malloc+0x66>
    6a2c:	84 17       	cp	r24, r20
    6a2e:	95 07       	cpc	r25, r21
    6a30:	69 f4       	brne	.+26     	; 0x6a4c <malloc+0x54>
    6a32:	10 97       	sbiw	r26, 0x00	; 0
    6a34:	31 f0       	breq	.+12     	; 0x6a42 <malloc+0x4a>
    6a36:	12 96       	adiw	r26, 0x02	; 2
    6a38:	0c 93       	st	X, r16
    6a3a:	12 97       	sbiw	r26, 0x02	; 2
    6a3c:	13 96       	adiw	r26, 0x03	; 3
    6a3e:	1c 93       	st	X, r17
    6a40:	27 c0       	rjmp	.+78     	; 0x6a90 <malloc+0x98>
    6a42:	00 93 0d 15 	sts	0x150D, r16	; 0x80150d <__flp>
    6a46:	10 93 0e 15 	sts	0x150E, r17	; 0x80150e <__flp+0x1>
    6a4a:	22 c0       	rjmp	.+68     	; 0x6a90 <malloc+0x98>
    6a4c:	21 15       	cp	r18, r1
    6a4e:	31 05       	cpc	r19, r1
    6a50:	19 f0       	breq	.+6      	; 0x6a58 <malloc+0x60>
    6a52:	42 17       	cp	r20, r18
    6a54:	53 07       	cpc	r21, r19
    6a56:	18 f4       	brcc	.+6      	; 0x6a5e <malloc+0x66>
    6a58:	9a 01       	movw	r18, r20
    6a5a:	bd 01       	movw	r22, r26
    6a5c:	ef 01       	movw	r28, r30
    6a5e:	df 01       	movw	r26, r30
    6a60:	f8 01       	movw	r30, r16
    6a62:	db cf       	rjmp	.-74     	; 0x6a1a <malloc+0x22>
    6a64:	21 15       	cp	r18, r1
    6a66:	31 05       	cpc	r19, r1
    6a68:	f9 f0       	breq	.+62     	; 0x6aa8 <malloc+0xb0>
    6a6a:	28 1b       	sub	r18, r24
    6a6c:	39 0b       	sbc	r19, r25
    6a6e:	24 30       	cpi	r18, 0x04	; 4
    6a70:	31 05       	cpc	r19, r1
    6a72:	80 f4       	brcc	.+32     	; 0x6a94 <malloc+0x9c>
    6a74:	8a 81       	ldd	r24, Y+2	; 0x02
    6a76:	9b 81       	ldd	r25, Y+3	; 0x03
    6a78:	61 15       	cp	r22, r1
    6a7a:	71 05       	cpc	r23, r1
    6a7c:	21 f0       	breq	.+8      	; 0x6a86 <malloc+0x8e>
    6a7e:	fb 01       	movw	r30, r22
    6a80:	93 83       	std	Z+3, r25	; 0x03
    6a82:	82 83       	std	Z+2, r24	; 0x02
    6a84:	04 c0       	rjmp	.+8      	; 0x6a8e <malloc+0x96>
    6a86:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <__flp+0x1>
    6a8a:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <__flp>
    6a8e:	fe 01       	movw	r30, r28
    6a90:	32 96       	adiw	r30, 0x02	; 2
    6a92:	44 c0       	rjmp	.+136    	; 0x6b1c <malloc+0x124>
    6a94:	fe 01       	movw	r30, r28
    6a96:	e2 0f       	add	r30, r18
    6a98:	f3 1f       	adc	r31, r19
    6a9a:	81 93       	st	Z+, r24
    6a9c:	91 93       	st	Z+, r25
    6a9e:	22 50       	subi	r18, 0x02	; 2
    6aa0:	31 09       	sbc	r19, r1
    6aa2:	39 83       	std	Y+1, r19	; 0x01
    6aa4:	28 83       	st	Y, r18
    6aa6:	3a c0       	rjmp	.+116    	; 0x6b1c <malloc+0x124>
    6aa8:	20 91 0b 15 	lds	r18, 0x150B	; 0x80150b <__brkval>
    6aac:	30 91 0c 15 	lds	r19, 0x150C	; 0x80150c <__brkval+0x1>
    6ab0:	23 2b       	or	r18, r19
    6ab2:	41 f4       	brne	.+16     	; 0x6ac4 <malloc+0xcc>
    6ab4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6ab8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6abc:	30 93 0c 15 	sts	0x150C, r19	; 0x80150c <__brkval+0x1>
    6ac0:	20 93 0b 15 	sts	0x150B, r18	; 0x80150b <__brkval>
    6ac4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6ac8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6acc:	21 15       	cp	r18, r1
    6ace:	31 05       	cpc	r19, r1
    6ad0:	41 f4       	brne	.+16     	; 0x6ae2 <malloc+0xea>
    6ad2:	2d b7       	in	r18, 0x3d	; 61
    6ad4:	3e b7       	in	r19, 0x3e	; 62
    6ad6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6ada:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6ade:	24 1b       	sub	r18, r20
    6ae0:	35 0b       	sbc	r19, r21
    6ae2:	e0 91 0b 15 	lds	r30, 0x150B	; 0x80150b <__brkval>
    6ae6:	f0 91 0c 15 	lds	r31, 0x150C	; 0x80150c <__brkval+0x1>
    6aea:	e2 17       	cp	r30, r18
    6aec:	f3 07       	cpc	r31, r19
    6aee:	a0 f4       	brcc	.+40     	; 0x6b18 <malloc+0x120>
    6af0:	2e 1b       	sub	r18, r30
    6af2:	3f 0b       	sbc	r19, r31
    6af4:	28 17       	cp	r18, r24
    6af6:	39 07       	cpc	r19, r25
    6af8:	78 f0       	brcs	.+30     	; 0x6b18 <malloc+0x120>
    6afa:	ac 01       	movw	r20, r24
    6afc:	4e 5f       	subi	r20, 0xFE	; 254
    6afe:	5f 4f       	sbci	r21, 0xFF	; 255
    6b00:	24 17       	cp	r18, r20
    6b02:	35 07       	cpc	r19, r21
    6b04:	48 f0       	brcs	.+18     	; 0x6b18 <malloc+0x120>
    6b06:	4e 0f       	add	r20, r30
    6b08:	5f 1f       	adc	r21, r31
    6b0a:	50 93 0c 15 	sts	0x150C, r21	; 0x80150c <__brkval+0x1>
    6b0e:	40 93 0b 15 	sts	0x150B, r20	; 0x80150b <__brkval>
    6b12:	81 93       	st	Z+, r24
    6b14:	91 93       	st	Z+, r25
    6b16:	02 c0       	rjmp	.+4      	; 0x6b1c <malloc+0x124>
    6b18:	e0 e0       	ldi	r30, 0x00	; 0
    6b1a:	f0 e0       	ldi	r31, 0x00	; 0
    6b1c:	cf 01       	movw	r24, r30
    6b1e:	df 91       	pop	r29
    6b20:	cf 91       	pop	r28
    6b22:	1f 91       	pop	r17
    6b24:	0f 91       	pop	r16
    6b26:	08 95       	ret

00006b28 <free>:
    6b28:	cf 93       	push	r28
    6b2a:	df 93       	push	r29
    6b2c:	00 97       	sbiw	r24, 0x00	; 0
    6b2e:	09 f4       	brne	.+2      	; 0x6b32 <free+0xa>
    6b30:	81 c0       	rjmp	.+258    	; 0x6c34 <free+0x10c>
    6b32:	fc 01       	movw	r30, r24
    6b34:	32 97       	sbiw	r30, 0x02	; 2
    6b36:	13 82       	std	Z+3, r1	; 0x03
    6b38:	12 82       	std	Z+2, r1	; 0x02
    6b3a:	a0 91 0d 15 	lds	r26, 0x150D	; 0x80150d <__flp>
    6b3e:	b0 91 0e 15 	lds	r27, 0x150E	; 0x80150e <__flp+0x1>
    6b42:	10 97       	sbiw	r26, 0x00	; 0
    6b44:	81 f4       	brne	.+32     	; 0x6b66 <free+0x3e>
    6b46:	20 81       	ld	r18, Z
    6b48:	31 81       	ldd	r19, Z+1	; 0x01
    6b4a:	82 0f       	add	r24, r18
    6b4c:	93 1f       	adc	r25, r19
    6b4e:	20 91 0b 15 	lds	r18, 0x150B	; 0x80150b <__brkval>
    6b52:	30 91 0c 15 	lds	r19, 0x150C	; 0x80150c <__brkval+0x1>
    6b56:	28 17       	cp	r18, r24
    6b58:	39 07       	cpc	r19, r25
    6b5a:	51 f5       	brne	.+84     	; 0x6bb0 <free+0x88>
    6b5c:	f0 93 0c 15 	sts	0x150C, r31	; 0x80150c <__brkval+0x1>
    6b60:	e0 93 0b 15 	sts	0x150B, r30	; 0x80150b <__brkval>
    6b64:	67 c0       	rjmp	.+206    	; 0x6c34 <free+0x10c>
    6b66:	ed 01       	movw	r28, r26
    6b68:	20 e0       	ldi	r18, 0x00	; 0
    6b6a:	30 e0       	ldi	r19, 0x00	; 0
    6b6c:	ce 17       	cp	r28, r30
    6b6e:	df 07       	cpc	r29, r31
    6b70:	40 f4       	brcc	.+16     	; 0x6b82 <free+0x5a>
    6b72:	4a 81       	ldd	r20, Y+2	; 0x02
    6b74:	5b 81       	ldd	r21, Y+3	; 0x03
    6b76:	9e 01       	movw	r18, r28
    6b78:	41 15       	cp	r20, r1
    6b7a:	51 05       	cpc	r21, r1
    6b7c:	f1 f0       	breq	.+60     	; 0x6bba <free+0x92>
    6b7e:	ea 01       	movw	r28, r20
    6b80:	f5 cf       	rjmp	.-22     	; 0x6b6c <free+0x44>
    6b82:	d3 83       	std	Z+3, r29	; 0x03
    6b84:	c2 83       	std	Z+2, r28	; 0x02
    6b86:	40 81       	ld	r20, Z
    6b88:	51 81       	ldd	r21, Z+1	; 0x01
    6b8a:	84 0f       	add	r24, r20
    6b8c:	95 1f       	adc	r25, r21
    6b8e:	c8 17       	cp	r28, r24
    6b90:	d9 07       	cpc	r29, r25
    6b92:	59 f4       	brne	.+22     	; 0x6baa <free+0x82>
    6b94:	88 81       	ld	r24, Y
    6b96:	99 81       	ldd	r25, Y+1	; 0x01
    6b98:	84 0f       	add	r24, r20
    6b9a:	95 1f       	adc	r25, r21
    6b9c:	02 96       	adiw	r24, 0x02	; 2
    6b9e:	91 83       	std	Z+1, r25	; 0x01
    6ba0:	80 83       	st	Z, r24
    6ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ba6:	93 83       	std	Z+3, r25	; 0x03
    6ba8:	82 83       	std	Z+2, r24	; 0x02
    6baa:	21 15       	cp	r18, r1
    6bac:	31 05       	cpc	r19, r1
    6bae:	29 f4       	brne	.+10     	; 0x6bba <free+0x92>
    6bb0:	f0 93 0e 15 	sts	0x150E, r31	; 0x80150e <__flp+0x1>
    6bb4:	e0 93 0d 15 	sts	0x150D, r30	; 0x80150d <__flp>
    6bb8:	3d c0       	rjmp	.+122    	; 0x6c34 <free+0x10c>
    6bba:	e9 01       	movw	r28, r18
    6bbc:	fb 83       	std	Y+3, r31	; 0x03
    6bbe:	ea 83       	std	Y+2, r30	; 0x02
    6bc0:	49 91       	ld	r20, Y+
    6bc2:	59 91       	ld	r21, Y+
    6bc4:	c4 0f       	add	r28, r20
    6bc6:	d5 1f       	adc	r29, r21
    6bc8:	ec 17       	cp	r30, r28
    6bca:	fd 07       	cpc	r31, r29
    6bcc:	61 f4       	brne	.+24     	; 0x6be6 <free+0xbe>
    6bce:	80 81       	ld	r24, Z
    6bd0:	91 81       	ldd	r25, Z+1	; 0x01
    6bd2:	84 0f       	add	r24, r20
    6bd4:	95 1f       	adc	r25, r21
    6bd6:	02 96       	adiw	r24, 0x02	; 2
    6bd8:	e9 01       	movw	r28, r18
    6bda:	99 83       	std	Y+1, r25	; 0x01
    6bdc:	88 83       	st	Y, r24
    6bde:	82 81       	ldd	r24, Z+2	; 0x02
    6be0:	93 81       	ldd	r25, Z+3	; 0x03
    6be2:	9b 83       	std	Y+3, r25	; 0x03
    6be4:	8a 83       	std	Y+2, r24	; 0x02
    6be6:	e0 e0       	ldi	r30, 0x00	; 0
    6be8:	f0 e0       	ldi	r31, 0x00	; 0
    6bea:	12 96       	adiw	r26, 0x02	; 2
    6bec:	8d 91       	ld	r24, X+
    6bee:	9c 91       	ld	r25, X
    6bf0:	13 97       	sbiw	r26, 0x03	; 3
    6bf2:	00 97       	sbiw	r24, 0x00	; 0
    6bf4:	19 f0       	breq	.+6      	; 0x6bfc <free+0xd4>
    6bf6:	fd 01       	movw	r30, r26
    6bf8:	dc 01       	movw	r26, r24
    6bfa:	f7 cf       	rjmp	.-18     	; 0x6bea <free+0xc2>
    6bfc:	8d 91       	ld	r24, X+
    6bfe:	9c 91       	ld	r25, X
    6c00:	11 97       	sbiw	r26, 0x01	; 1
    6c02:	9d 01       	movw	r18, r26
    6c04:	2e 5f       	subi	r18, 0xFE	; 254
    6c06:	3f 4f       	sbci	r19, 0xFF	; 255
    6c08:	82 0f       	add	r24, r18
    6c0a:	93 1f       	adc	r25, r19
    6c0c:	20 91 0b 15 	lds	r18, 0x150B	; 0x80150b <__brkval>
    6c10:	30 91 0c 15 	lds	r19, 0x150C	; 0x80150c <__brkval+0x1>
    6c14:	28 17       	cp	r18, r24
    6c16:	39 07       	cpc	r19, r25
    6c18:	69 f4       	brne	.+26     	; 0x6c34 <free+0x10c>
    6c1a:	30 97       	sbiw	r30, 0x00	; 0
    6c1c:	29 f4       	brne	.+10     	; 0x6c28 <free+0x100>
    6c1e:	10 92 0e 15 	sts	0x150E, r1	; 0x80150e <__flp+0x1>
    6c22:	10 92 0d 15 	sts	0x150D, r1	; 0x80150d <__flp>
    6c26:	02 c0       	rjmp	.+4      	; 0x6c2c <free+0x104>
    6c28:	13 82       	std	Z+3, r1	; 0x03
    6c2a:	12 82       	std	Z+2, r1	; 0x02
    6c2c:	b0 93 0c 15 	sts	0x150C, r27	; 0x80150c <__brkval+0x1>
    6c30:	a0 93 0b 15 	sts	0x150B, r26	; 0x80150b <__brkval>
    6c34:	df 91       	pop	r29
    6c36:	cf 91       	pop	r28
    6c38:	08 95       	ret

00006c3a <abort>:
    6c3a:	81 e0       	ldi	r24, 0x01	; 1
    6c3c:	90 e0       	ldi	r25, 0x00	; 0
    6c3e:	f8 94       	cli
    6c40:	58 c2       	rjmp	.+1200   	; 0x70f2 <_exit>

00006c42 <__ftoa_engine>:
    6c42:	28 30       	cpi	r18, 0x08	; 8
    6c44:	08 f0       	brcs	.+2      	; 0x6c48 <__ftoa_engine+0x6>
    6c46:	27 e0       	ldi	r18, 0x07	; 7
    6c48:	33 27       	eor	r19, r19
    6c4a:	da 01       	movw	r26, r20
    6c4c:	99 0f       	add	r25, r25
    6c4e:	31 1d       	adc	r19, r1
    6c50:	87 fd       	sbrc	r24, 7
    6c52:	91 60       	ori	r25, 0x01	; 1
    6c54:	00 96       	adiw	r24, 0x00	; 0
    6c56:	61 05       	cpc	r22, r1
    6c58:	71 05       	cpc	r23, r1
    6c5a:	39 f4       	brne	.+14     	; 0x6c6a <__ftoa_engine+0x28>
    6c5c:	32 60       	ori	r19, 0x02	; 2
    6c5e:	2e 5f       	subi	r18, 0xFE	; 254
    6c60:	3d 93       	st	X+, r19
    6c62:	30 e3       	ldi	r19, 0x30	; 48
    6c64:	2a 95       	dec	r18
    6c66:	e1 f7       	brne	.-8      	; 0x6c60 <__ftoa_engine+0x1e>
    6c68:	08 95       	ret
    6c6a:	9f 3f       	cpi	r25, 0xFF	; 255
    6c6c:	30 f0       	brcs	.+12     	; 0x6c7a <__ftoa_engine+0x38>
    6c6e:	80 38       	cpi	r24, 0x80	; 128
    6c70:	71 05       	cpc	r23, r1
    6c72:	61 05       	cpc	r22, r1
    6c74:	09 f0       	breq	.+2      	; 0x6c78 <__ftoa_engine+0x36>
    6c76:	3c 5f       	subi	r19, 0xFC	; 252
    6c78:	3c 5f       	subi	r19, 0xFC	; 252
    6c7a:	3d 93       	st	X+, r19
    6c7c:	91 30       	cpi	r25, 0x01	; 1
    6c7e:	08 f0       	brcs	.+2      	; 0x6c82 <__ftoa_engine+0x40>
    6c80:	80 68       	ori	r24, 0x80	; 128
    6c82:	91 1d       	adc	r25, r1
    6c84:	df 93       	push	r29
    6c86:	cf 93       	push	r28
    6c88:	1f 93       	push	r17
    6c8a:	0f 93       	push	r16
    6c8c:	ff 92       	push	r15
    6c8e:	ef 92       	push	r14
    6c90:	19 2f       	mov	r17, r25
    6c92:	98 7f       	andi	r25, 0xF8	; 248
    6c94:	96 95       	lsr	r25
    6c96:	e9 2f       	mov	r30, r25
    6c98:	96 95       	lsr	r25
    6c9a:	96 95       	lsr	r25
    6c9c:	e9 0f       	add	r30, r25
    6c9e:	ff 27       	eor	r31, r31
    6ca0:	e4 50       	subi	r30, 0x04	; 4
    6ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    6ca4:	99 27       	eor	r25, r25
    6ca6:	33 27       	eor	r19, r19
    6ca8:	ee 24       	eor	r14, r14
    6caa:	ff 24       	eor	r15, r15
    6cac:	a7 01       	movw	r20, r14
    6cae:	e7 01       	movw	r28, r14
    6cb0:	05 90       	lpm	r0, Z+
    6cb2:	08 94       	sec
    6cb4:	07 94       	ror	r0
    6cb6:	28 f4       	brcc	.+10     	; 0x6cc2 <__ftoa_engine+0x80>
    6cb8:	36 0f       	add	r19, r22
    6cba:	e7 1e       	adc	r14, r23
    6cbc:	f8 1e       	adc	r15, r24
    6cbe:	49 1f       	adc	r20, r25
    6cc0:	51 1d       	adc	r21, r1
    6cc2:	66 0f       	add	r22, r22
    6cc4:	77 1f       	adc	r23, r23
    6cc6:	88 1f       	adc	r24, r24
    6cc8:	99 1f       	adc	r25, r25
    6cca:	06 94       	lsr	r0
    6ccc:	a1 f7       	brne	.-24     	; 0x6cb6 <__ftoa_engine+0x74>
    6cce:	05 90       	lpm	r0, Z+
    6cd0:	07 94       	ror	r0
    6cd2:	28 f4       	brcc	.+10     	; 0x6cde <__ftoa_engine+0x9c>
    6cd4:	e7 0e       	add	r14, r23
    6cd6:	f8 1e       	adc	r15, r24
    6cd8:	49 1f       	adc	r20, r25
    6cda:	56 1f       	adc	r21, r22
    6cdc:	c1 1d       	adc	r28, r1
    6cde:	77 0f       	add	r23, r23
    6ce0:	88 1f       	adc	r24, r24
    6ce2:	99 1f       	adc	r25, r25
    6ce4:	66 1f       	adc	r22, r22
    6ce6:	06 94       	lsr	r0
    6ce8:	a1 f7       	brne	.-24     	; 0x6cd2 <__ftoa_engine+0x90>
    6cea:	05 90       	lpm	r0, Z+
    6cec:	07 94       	ror	r0
    6cee:	28 f4       	brcc	.+10     	; 0x6cfa <__ftoa_engine+0xb8>
    6cf0:	f8 0e       	add	r15, r24
    6cf2:	49 1f       	adc	r20, r25
    6cf4:	56 1f       	adc	r21, r22
    6cf6:	c7 1f       	adc	r28, r23
    6cf8:	d1 1d       	adc	r29, r1
    6cfa:	88 0f       	add	r24, r24
    6cfc:	99 1f       	adc	r25, r25
    6cfe:	66 1f       	adc	r22, r22
    6d00:	77 1f       	adc	r23, r23
    6d02:	06 94       	lsr	r0
    6d04:	a1 f7       	brne	.-24     	; 0x6cee <__ftoa_engine+0xac>
    6d06:	05 90       	lpm	r0, Z+
    6d08:	07 94       	ror	r0
    6d0a:	20 f4       	brcc	.+8      	; 0x6d14 <__ftoa_engine+0xd2>
    6d0c:	49 0f       	add	r20, r25
    6d0e:	56 1f       	adc	r21, r22
    6d10:	c7 1f       	adc	r28, r23
    6d12:	d8 1f       	adc	r29, r24
    6d14:	99 0f       	add	r25, r25
    6d16:	66 1f       	adc	r22, r22
    6d18:	77 1f       	adc	r23, r23
    6d1a:	88 1f       	adc	r24, r24
    6d1c:	06 94       	lsr	r0
    6d1e:	a9 f7       	brne	.-22     	; 0x6d0a <__ftoa_engine+0xc8>
    6d20:	84 91       	lpm	r24, Z
    6d22:	10 95       	com	r17
    6d24:	17 70       	andi	r17, 0x07	; 7
    6d26:	41 f0       	breq	.+16     	; 0x6d38 <__ftoa_engine+0xf6>
    6d28:	d6 95       	lsr	r29
    6d2a:	c7 95       	ror	r28
    6d2c:	57 95       	ror	r21
    6d2e:	47 95       	ror	r20
    6d30:	f7 94       	ror	r15
    6d32:	e7 94       	ror	r14
    6d34:	1a 95       	dec	r17
    6d36:	c1 f7       	brne	.-16     	; 0x6d28 <__ftoa_engine+0xe6>
    6d38:	e2 ea       	ldi	r30, 0xA2	; 162
    6d3a:	f1 e0       	ldi	r31, 0x01	; 1
    6d3c:	68 94       	set
    6d3e:	15 90       	lpm	r1, Z+
    6d40:	15 91       	lpm	r17, Z+
    6d42:	35 91       	lpm	r19, Z+
    6d44:	65 91       	lpm	r22, Z+
    6d46:	95 91       	lpm	r25, Z+
    6d48:	05 90       	lpm	r0, Z+
    6d4a:	7f e2       	ldi	r23, 0x2F	; 47
    6d4c:	73 95       	inc	r23
    6d4e:	e1 18       	sub	r14, r1
    6d50:	f1 0a       	sbc	r15, r17
    6d52:	43 0b       	sbc	r20, r19
    6d54:	56 0b       	sbc	r21, r22
    6d56:	c9 0b       	sbc	r28, r25
    6d58:	d0 09       	sbc	r29, r0
    6d5a:	c0 f7       	brcc	.-16     	; 0x6d4c <__ftoa_engine+0x10a>
    6d5c:	e1 0c       	add	r14, r1
    6d5e:	f1 1e       	adc	r15, r17
    6d60:	43 1f       	adc	r20, r19
    6d62:	56 1f       	adc	r21, r22
    6d64:	c9 1f       	adc	r28, r25
    6d66:	d0 1d       	adc	r29, r0
    6d68:	7e f4       	brtc	.+30     	; 0x6d88 <__ftoa_engine+0x146>
    6d6a:	70 33       	cpi	r23, 0x30	; 48
    6d6c:	11 f4       	brne	.+4      	; 0x6d72 <__ftoa_engine+0x130>
    6d6e:	8a 95       	dec	r24
    6d70:	e6 cf       	rjmp	.-52     	; 0x6d3e <__ftoa_engine+0xfc>
    6d72:	e8 94       	clt
    6d74:	01 50       	subi	r16, 0x01	; 1
    6d76:	30 f0       	brcs	.+12     	; 0x6d84 <__ftoa_engine+0x142>
    6d78:	08 0f       	add	r16, r24
    6d7a:	0a f4       	brpl	.+2      	; 0x6d7e <__ftoa_engine+0x13c>
    6d7c:	00 27       	eor	r16, r16
    6d7e:	02 17       	cp	r16, r18
    6d80:	08 f4       	brcc	.+2      	; 0x6d84 <__ftoa_engine+0x142>
    6d82:	20 2f       	mov	r18, r16
    6d84:	23 95       	inc	r18
    6d86:	02 2f       	mov	r16, r18
    6d88:	7a 33       	cpi	r23, 0x3A	; 58
    6d8a:	28 f0       	brcs	.+10     	; 0x6d96 <__ftoa_engine+0x154>
    6d8c:	79 e3       	ldi	r23, 0x39	; 57
    6d8e:	7d 93       	st	X+, r23
    6d90:	2a 95       	dec	r18
    6d92:	e9 f7       	brne	.-6      	; 0x6d8e <__ftoa_engine+0x14c>
    6d94:	10 c0       	rjmp	.+32     	; 0x6db6 <__ftoa_engine+0x174>
    6d96:	7d 93       	st	X+, r23
    6d98:	2a 95       	dec	r18
    6d9a:	89 f6       	brne	.-94     	; 0x6d3e <__ftoa_engine+0xfc>
    6d9c:	06 94       	lsr	r0
    6d9e:	97 95       	ror	r25
    6da0:	67 95       	ror	r22
    6da2:	37 95       	ror	r19
    6da4:	17 95       	ror	r17
    6da6:	17 94       	ror	r1
    6da8:	e1 18       	sub	r14, r1
    6daa:	f1 0a       	sbc	r15, r17
    6dac:	43 0b       	sbc	r20, r19
    6dae:	56 0b       	sbc	r21, r22
    6db0:	c9 0b       	sbc	r28, r25
    6db2:	d0 09       	sbc	r29, r0
    6db4:	98 f0       	brcs	.+38     	; 0x6ddc <__ftoa_engine+0x19a>
    6db6:	23 95       	inc	r18
    6db8:	7e 91       	ld	r23, -X
    6dba:	73 95       	inc	r23
    6dbc:	7a 33       	cpi	r23, 0x3A	; 58
    6dbe:	08 f0       	brcs	.+2      	; 0x6dc2 <__ftoa_engine+0x180>
    6dc0:	70 e3       	ldi	r23, 0x30	; 48
    6dc2:	7c 93       	st	X, r23
    6dc4:	20 13       	cpse	r18, r16
    6dc6:	b8 f7       	brcc	.-18     	; 0x6db6 <__ftoa_engine+0x174>
    6dc8:	7e 91       	ld	r23, -X
    6dca:	70 61       	ori	r23, 0x10	; 16
    6dcc:	7d 93       	st	X+, r23
    6dce:	30 f0       	brcs	.+12     	; 0x6ddc <__ftoa_engine+0x19a>
    6dd0:	83 95       	inc	r24
    6dd2:	71 e3       	ldi	r23, 0x31	; 49
    6dd4:	7d 93       	st	X+, r23
    6dd6:	70 e3       	ldi	r23, 0x30	; 48
    6dd8:	2a 95       	dec	r18
    6dda:	e1 f7       	brne	.-8      	; 0x6dd4 <__ftoa_engine+0x192>
    6ddc:	11 24       	eor	r1, r1
    6dde:	ef 90       	pop	r14
    6de0:	ff 90       	pop	r15
    6de2:	0f 91       	pop	r16
    6de4:	1f 91       	pop	r17
    6de6:	cf 91       	pop	r28
    6de8:	df 91       	pop	r29
    6dea:	99 27       	eor	r25, r25
    6dec:	87 fd       	sbrc	r24, 7
    6dee:	90 95       	com	r25
    6df0:	08 95       	ret

00006df2 <strnlen_P>:
    6df2:	fc 01       	movw	r30, r24
    6df4:	05 90       	lpm	r0, Z+
    6df6:	61 50       	subi	r22, 0x01	; 1
    6df8:	70 40       	sbci	r23, 0x00	; 0
    6dfa:	01 10       	cpse	r0, r1
    6dfc:	d8 f7       	brcc	.-10     	; 0x6df4 <strnlen_P+0x2>
    6dfe:	80 95       	com	r24
    6e00:	90 95       	com	r25
    6e02:	8e 0f       	add	r24, r30
    6e04:	9f 1f       	adc	r25, r31
    6e06:	08 95       	ret

00006e08 <memcpy>:
    6e08:	fb 01       	movw	r30, r22
    6e0a:	dc 01       	movw	r26, r24
    6e0c:	02 c0       	rjmp	.+4      	; 0x6e12 <memcpy+0xa>
    6e0e:	01 90       	ld	r0, Z+
    6e10:	0d 92       	st	X+, r0
    6e12:	41 50       	subi	r20, 0x01	; 1
    6e14:	50 40       	sbci	r21, 0x00	; 0
    6e16:	d8 f7       	brcc	.-10     	; 0x6e0e <memcpy+0x6>
    6e18:	08 95       	ret

00006e1a <memset>:
    6e1a:	dc 01       	movw	r26, r24
    6e1c:	01 c0       	rjmp	.+2      	; 0x6e20 <memset+0x6>
    6e1e:	6d 93       	st	X+, r22
    6e20:	41 50       	subi	r20, 0x01	; 1
    6e22:	50 40       	sbci	r21, 0x00	; 0
    6e24:	e0 f7       	brcc	.-8      	; 0x6e1e <memset+0x4>
    6e26:	08 95       	ret

00006e28 <strcasestr>:
    6e28:	fb 01       	movw	r30, r22
    6e2a:	51 91       	ld	r21, Z+
    6e2c:	55 23       	and	r21, r21
    6e2e:	b1 f0       	breq	.+44     	; 0x6e5c <strcasestr+0x34>
    6e30:	bf 01       	movw	r22, r30
    6e32:	dc 01       	movw	r26, r24
    6e34:	05 2e       	mov	r0, r21
    6e36:	4d 91       	ld	r20, X+
    6e38:	44 23       	and	r20, r20
    6e3a:	69 f0       	breq	.+26     	; 0x6e56 <strcasestr+0x2e>
    6e3c:	10 d0       	rcall	.+32     	; 0x6e5e <strcasestr+0x36>
    6e3e:	d9 f7       	brne	.-10     	; 0x6e36 <strcasestr+0xe>
    6e40:	cd 01       	movw	r24, r26
    6e42:	01 90       	ld	r0, Z+
    6e44:	00 20       	and	r0, r0
    6e46:	49 f0       	breq	.+18     	; 0x6e5a <strcasestr+0x32>
    6e48:	4d 91       	ld	r20, X+
    6e4a:	41 11       	cpse	r20, r1
    6e4c:	08 d0       	rcall	.+16     	; 0x6e5e <strcasestr+0x36>
    6e4e:	c9 f3       	breq	.-14     	; 0x6e42 <strcasestr+0x1a>
    6e50:	fb 01       	movw	r30, r22
    6e52:	41 11       	cpse	r20, r1
    6e54:	ee cf       	rjmp	.-36     	; 0x6e32 <strcasestr+0xa>
    6e56:	81 e0       	ldi	r24, 0x01	; 1
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	01 97       	sbiw	r24, 0x01	; 1
    6e5c:	08 95       	ret
    6e5e:	40 25       	eor	r20, r0
    6e60:	39 f0       	breq	.+14     	; 0x6e70 <strcasestr+0x48>
    6e62:	40 32       	cpi	r20, 0x20	; 32
    6e64:	29 f4       	brne	.+10     	; 0x6e70 <strcasestr+0x48>
    6e66:	40 29       	or	r20, r0
    6e68:	4b 57       	subi	r20, 0x7B	; 123
    6e6a:	46 5e       	subi	r20, 0xE6	; 230
    6e6c:	08 f0       	brcs	.+2      	; 0x6e70 <strcasestr+0x48>
    6e6e:	18 94       	sez
    6e70:	08 95       	ret

00006e72 <strcat>:
    6e72:	fb 01       	movw	r30, r22
    6e74:	dc 01       	movw	r26, r24
    6e76:	0d 90       	ld	r0, X+
    6e78:	00 20       	and	r0, r0
    6e7a:	e9 f7       	brne	.-6      	; 0x6e76 <strcat+0x4>
    6e7c:	11 97       	sbiw	r26, 0x01	; 1
    6e7e:	01 90       	ld	r0, Z+
    6e80:	0d 92       	st	X+, r0
    6e82:	00 20       	and	r0, r0
    6e84:	e1 f7       	brne	.-8      	; 0x6e7e <strcat+0xc>
    6e86:	08 95       	ret

00006e88 <strcpy>:
    6e88:	fb 01       	movw	r30, r22
    6e8a:	dc 01       	movw	r26, r24
    6e8c:	01 90       	ld	r0, Z+
    6e8e:	0d 92       	st	X+, r0
    6e90:	00 20       	and	r0, r0
    6e92:	e1 f7       	brne	.-8      	; 0x6e8c <strcpy+0x4>
    6e94:	08 95       	ret

00006e96 <strncasecmp>:
    6e96:	fb 01       	movw	r30, r22
    6e98:	dc 01       	movw	r26, r24
    6e9a:	41 50       	subi	r20, 0x01	; 1
    6e9c:	50 40       	sbci	r21, 0x00	; 0
    6e9e:	88 f0       	brcs	.+34     	; 0x6ec2 <strncasecmp+0x2c>
    6ea0:	8d 91       	ld	r24, X+
    6ea2:	81 34       	cpi	r24, 0x41	; 65
    6ea4:	1c f0       	brlt	.+6      	; 0x6eac <strncasecmp+0x16>
    6ea6:	8b 35       	cpi	r24, 0x5B	; 91
    6ea8:	0c f4       	brge	.+2      	; 0x6eac <strncasecmp+0x16>
    6eaa:	80 5e       	subi	r24, 0xE0	; 224
    6eac:	61 91       	ld	r22, Z+
    6eae:	61 34       	cpi	r22, 0x41	; 65
    6eb0:	1c f0       	brlt	.+6      	; 0x6eb8 <strncasecmp+0x22>
    6eb2:	6b 35       	cpi	r22, 0x5B	; 91
    6eb4:	0c f4       	brge	.+2      	; 0x6eb8 <strncasecmp+0x22>
    6eb6:	60 5e       	subi	r22, 0xE0	; 224
    6eb8:	86 1b       	sub	r24, r22
    6eba:	61 11       	cpse	r22, r1
    6ebc:	71 f3       	breq	.-36     	; 0x6e9a <strncasecmp+0x4>
    6ebe:	99 0b       	sbc	r25, r25
    6ec0:	08 95       	ret
    6ec2:	88 1b       	sub	r24, r24
    6ec4:	fc cf       	rjmp	.-8      	; 0x6ebe <strncasecmp+0x28>

00006ec6 <strnlen>:
    6ec6:	fc 01       	movw	r30, r24
    6ec8:	61 50       	subi	r22, 0x01	; 1
    6eca:	70 40       	sbci	r23, 0x00	; 0
    6ecc:	01 90       	ld	r0, Z+
    6ece:	01 10       	cpse	r0, r1
    6ed0:	d8 f7       	brcc	.-10     	; 0x6ec8 <strnlen+0x2>
    6ed2:	80 95       	com	r24
    6ed4:	90 95       	com	r25
    6ed6:	8e 0f       	add	r24, r30
    6ed8:	9f 1f       	adc	r25, r31
    6eda:	08 95       	ret

00006edc <fputc>:
    6edc:	0f 93       	push	r16
    6ede:	1f 93       	push	r17
    6ee0:	cf 93       	push	r28
    6ee2:	df 93       	push	r29
    6ee4:	fb 01       	movw	r30, r22
    6ee6:	23 81       	ldd	r18, Z+3	; 0x03
    6ee8:	21 fd       	sbrc	r18, 1
    6eea:	03 c0       	rjmp	.+6      	; 0x6ef2 <fputc+0x16>
    6eec:	8f ef       	ldi	r24, 0xFF	; 255
    6eee:	9f ef       	ldi	r25, 0xFF	; 255
    6ef0:	2c c0       	rjmp	.+88     	; 0x6f4a <fputc+0x6e>
    6ef2:	22 ff       	sbrs	r18, 2
    6ef4:	16 c0       	rjmp	.+44     	; 0x6f22 <fputc+0x46>
    6ef6:	46 81       	ldd	r20, Z+6	; 0x06
    6ef8:	57 81       	ldd	r21, Z+7	; 0x07
    6efa:	24 81       	ldd	r18, Z+4	; 0x04
    6efc:	35 81       	ldd	r19, Z+5	; 0x05
    6efe:	42 17       	cp	r20, r18
    6f00:	53 07       	cpc	r21, r19
    6f02:	44 f4       	brge	.+16     	; 0x6f14 <fputc+0x38>
    6f04:	a0 81       	ld	r26, Z
    6f06:	b1 81       	ldd	r27, Z+1	; 0x01
    6f08:	9d 01       	movw	r18, r26
    6f0a:	2f 5f       	subi	r18, 0xFF	; 255
    6f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f0e:	31 83       	std	Z+1, r19	; 0x01
    6f10:	20 83       	st	Z, r18
    6f12:	8c 93       	st	X, r24
    6f14:	26 81       	ldd	r18, Z+6	; 0x06
    6f16:	37 81       	ldd	r19, Z+7	; 0x07
    6f18:	2f 5f       	subi	r18, 0xFF	; 255
    6f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6f1c:	37 83       	std	Z+7, r19	; 0x07
    6f1e:	26 83       	std	Z+6, r18	; 0x06
    6f20:	14 c0       	rjmp	.+40     	; 0x6f4a <fputc+0x6e>
    6f22:	8b 01       	movw	r16, r22
    6f24:	ec 01       	movw	r28, r24
    6f26:	fb 01       	movw	r30, r22
    6f28:	00 84       	ldd	r0, Z+8	; 0x08
    6f2a:	f1 85       	ldd	r31, Z+9	; 0x09
    6f2c:	e0 2d       	mov	r30, r0
    6f2e:	19 95       	eicall
    6f30:	89 2b       	or	r24, r25
    6f32:	e1 f6       	brne	.-72     	; 0x6eec <fputc+0x10>
    6f34:	d8 01       	movw	r26, r16
    6f36:	16 96       	adiw	r26, 0x06	; 6
    6f38:	8d 91       	ld	r24, X+
    6f3a:	9c 91       	ld	r25, X
    6f3c:	17 97       	sbiw	r26, 0x07	; 7
    6f3e:	01 96       	adiw	r24, 0x01	; 1
    6f40:	17 96       	adiw	r26, 0x07	; 7
    6f42:	9c 93       	st	X, r25
    6f44:	8e 93       	st	-X, r24
    6f46:	16 97       	sbiw	r26, 0x06	; 6
    6f48:	ce 01       	movw	r24, r28
    6f4a:	df 91       	pop	r29
    6f4c:	cf 91       	pop	r28
    6f4e:	1f 91       	pop	r17
    6f50:	0f 91       	pop	r16
    6f52:	08 95       	ret

00006f54 <printf>:
    6f54:	cf 93       	push	r28
    6f56:	df 93       	push	r29
    6f58:	cd b7       	in	r28, 0x3d	; 61
    6f5a:	de b7       	in	r29, 0x3e	; 62
    6f5c:	ae 01       	movw	r20, r28
    6f5e:	4a 5f       	subi	r20, 0xFA	; 250
    6f60:	5f 4f       	sbci	r21, 0xFF	; 255
    6f62:	fa 01       	movw	r30, r20
    6f64:	61 91       	ld	r22, Z+
    6f66:	71 91       	ld	r23, Z+
    6f68:	af 01       	movw	r20, r30
    6f6a:	80 91 11 15 	lds	r24, 0x1511	; 0x801511 <__iob+0x2>
    6f6e:	90 91 12 15 	lds	r25, 0x1512	; 0x801512 <__iob+0x3>
    6f72:	90 d8       	rcall	.-3808   	; 0x6094 <vfprintf>
    6f74:	df 91       	pop	r29
    6f76:	cf 91       	pop	r28
    6f78:	08 95       	ret

00006f7a <puts>:
    6f7a:	0f 93       	push	r16
    6f7c:	1f 93       	push	r17
    6f7e:	cf 93       	push	r28
    6f80:	df 93       	push	r29
    6f82:	e0 91 11 15 	lds	r30, 0x1511	; 0x801511 <__iob+0x2>
    6f86:	f0 91 12 15 	lds	r31, 0x1512	; 0x801512 <__iob+0x3>
    6f8a:	23 81       	ldd	r18, Z+3	; 0x03
    6f8c:	21 ff       	sbrs	r18, 1
    6f8e:	1b c0       	rjmp	.+54     	; 0x6fc6 <puts+0x4c>
    6f90:	8c 01       	movw	r16, r24
    6f92:	d0 e0       	ldi	r29, 0x00	; 0
    6f94:	c0 e0       	ldi	r28, 0x00	; 0
    6f96:	f8 01       	movw	r30, r16
    6f98:	81 91       	ld	r24, Z+
    6f9a:	8f 01       	movw	r16, r30
    6f9c:	60 91 11 15 	lds	r22, 0x1511	; 0x801511 <__iob+0x2>
    6fa0:	70 91 12 15 	lds	r23, 0x1512	; 0x801512 <__iob+0x3>
    6fa4:	db 01       	movw	r26, r22
    6fa6:	18 96       	adiw	r26, 0x08	; 8
    6fa8:	ed 91       	ld	r30, X+
    6faa:	fc 91       	ld	r31, X
    6fac:	19 97       	sbiw	r26, 0x09	; 9
    6fae:	88 23       	and	r24, r24
    6fb0:	31 f0       	breq	.+12     	; 0x6fbe <puts+0x44>
    6fb2:	19 95       	eicall
    6fb4:	89 2b       	or	r24, r25
    6fb6:	79 f3       	breq	.-34     	; 0x6f96 <puts+0x1c>
    6fb8:	df ef       	ldi	r29, 0xFF	; 255
    6fba:	cf ef       	ldi	r28, 0xFF	; 255
    6fbc:	ec cf       	rjmp	.-40     	; 0x6f96 <puts+0x1c>
    6fbe:	8a e0       	ldi	r24, 0x0A	; 10
    6fc0:	19 95       	eicall
    6fc2:	89 2b       	or	r24, r25
    6fc4:	19 f0       	breq	.+6      	; 0x6fcc <puts+0x52>
    6fc6:	8f ef       	ldi	r24, 0xFF	; 255
    6fc8:	9f ef       	ldi	r25, 0xFF	; 255
    6fca:	02 c0       	rjmp	.+4      	; 0x6fd0 <puts+0x56>
    6fcc:	8d 2f       	mov	r24, r29
    6fce:	9c 2f       	mov	r25, r28
    6fd0:	df 91       	pop	r29
    6fd2:	cf 91       	pop	r28
    6fd4:	1f 91       	pop	r17
    6fd6:	0f 91       	pop	r16
    6fd8:	08 95       	ret

00006fda <sprintf>:
    6fda:	0f 93       	push	r16
    6fdc:	1f 93       	push	r17
    6fde:	cf 93       	push	r28
    6fe0:	df 93       	push	r29
    6fe2:	cd b7       	in	r28, 0x3d	; 61
    6fe4:	de b7       	in	r29, 0x3e	; 62
    6fe6:	2e 97       	sbiw	r28, 0x0e	; 14
    6fe8:	0f b6       	in	r0, 0x3f	; 63
    6fea:	f8 94       	cli
    6fec:	de bf       	out	0x3e, r29	; 62
    6fee:	0f be       	out	0x3f, r0	; 63
    6ff0:	cd bf       	out	0x3d, r28	; 61
    6ff2:	0e 89       	ldd	r16, Y+22	; 0x16
    6ff4:	1f 89       	ldd	r17, Y+23	; 0x17
    6ff6:	86 e0       	ldi	r24, 0x06	; 6
    6ff8:	8c 83       	std	Y+4, r24	; 0x04
    6ffa:	1a 83       	std	Y+2, r17	; 0x02
    6ffc:	09 83       	std	Y+1, r16	; 0x01
    6ffe:	8f ef       	ldi	r24, 0xFF	; 255
    7000:	9f e7       	ldi	r25, 0x7F	; 127
    7002:	9e 83       	std	Y+6, r25	; 0x06
    7004:	8d 83       	std	Y+5, r24	; 0x05
    7006:	ae 01       	movw	r20, r28
    7008:	46 5e       	subi	r20, 0xE6	; 230
    700a:	5f 4f       	sbci	r21, 0xFF	; 255
    700c:	68 8d       	ldd	r22, Y+24	; 0x18
    700e:	79 8d       	ldd	r23, Y+25	; 0x19
    7010:	ce 01       	movw	r24, r28
    7012:	01 96       	adiw	r24, 0x01	; 1
    7014:	3f d8       	rcall	.-3970   	; 0x6094 <vfprintf>
    7016:	ef 81       	ldd	r30, Y+7	; 0x07
    7018:	f8 85       	ldd	r31, Y+8	; 0x08
    701a:	e0 0f       	add	r30, r16
    701c:	f1 1f       	adc	r31, r17
    701e:	10 82       	st	Z, r1
    7020:	2e 96       	adiw	r28, 0x0e	; 14
    7022:	0f b6       	in	r0, 0x3f	; 63
    7024:	f8 94       	cli
    7026:	de bf       	out	0x3e, r29	; 62
    7028:	0f be       	out	0x3f, r0	; 63
    702a:	cd bf       	out	0x3d, r28	; 61
    702c:	df 91       	pop	r29
    702e:	cf 91       	pop	r28
    7030:	1f 91       	pop	r17
    7032:	0f 91       	pop	r16
    7034:	08 95       	ret

00007036 <__ultoa_invert>:
    7036:	fa 01       	movw	r30, r20
    7038:	aa 27       	eor	r26, r26
    703a:	28 30       	cpi	r18, 0x08	; 8
    703c:	51 f1       	breq	.+84     	; 0x7092 <__ultoa_invert+0x5c>
    703e:	20 31       	cpi	r18, 0x10	; 16
    7040:	81 f1       	breq	.+96     	; 0x70a2 <__ultoa_invert+0x6c>
    7042:	e8 94       	clt
    7044:	6f 93       	push	r22
    7046:	6e 7f       	andi	r22, 0xFE	; 254
    7048:	6e 5f       	subi	r22, 0xFE	; 254
    704a:	7f 4f       	sbci	r23, 0xFF	; 255
    704c:	8f 4f       	sbci	r24, 0xFF	; 255
    704e:	9f 4f       	sbci	r25, 0xFF	; 255
    7050:	af 4f       	sbci	r26, 0xFF	; 255
    7052:	b1 e0       	ldi	r27, 0x01	; 1
    7054:	3e d0       	rcall	.+124    	; 0x70d2 <__ultoa_invert+0x9c>
    7056:	b4 e0       	ldi	r27, 0x04	; 4
    7058:	3c d0       	rcall	.+120    	; 0x70d2 <__ultoa_invert+0x9c>
    705a:	67 0f       	add	r22, r23
    705c:	78 1f       	adc	r23, r24
    705e:	89 1f       	adc	r24, r25
    7060:	9a 1f       	adc	r25, r26
    7062:	a1 1d       	adc	r26, r1
    7064:	68 0f       	add	r22, r24
    7066:	79 1f       	adc	r23, r25
    7068:	8a 1f       	adc	r24, r26
    706a:	91 1d       	adc	r25, r1
    706c:	a1 1d       	adc	r26, r1
    706e:	6a 0f       	add	r22, r26
    7070:	71 1d       	adc	r23, r1
    7072:	81 1d       	adc	r24, r1
    7074:	91 1d       	adc	r25, r1
    7076:	a1 1d       	adc	r26, r1
    7078:	20 d0       	rcall	.+64     	; 0x70ba <__ultoa_invert+0x84>
    707a:	09 f4       	brne	.+2      	; 0x707e <__ultoa_invert+0x48>
    707c:	68 94       	set
    707e:	3f 91       	pop	r19
    7080:	2a e0       	ldi	r18, 0x0A	; 10
    7082:	26 9f       	mul	r18, r22
    7084:	11 24       	eor	r1, r1
    7086:	30 19       	sub	r19, r0
    7088:	30 5d       	subi	r19, 0xD0	; 208
    708a:	31 93       	st	Z+, r19
    708c:	de f6       	brtc	.-74     	; 0x7044 <__ultoa_invert+0xe>
    708e:	cf 01       	movw	r24, r30
    7090:	08 95       	ret
    7092:	46 2f       	mov	r20, r22
    7094:	47 70       	andi	r20, 0x07	; 7
    7096:	40 5d       	subi	r20, 0xD0	; 208
    7098:	41 93       	st	Z+, r20
    709a:	b3 e0       	ldi	r27, 0x03	; 3
    709c:	0f d0       	rcall	.+30     	; 0x70bc <__ultoa_invert+0x86>
    709e:	c9 f7       	brne	.-14     	; 0x7092 <__ultoa_invert+0x5c>
    70a0:	f6 cf       	rjmp	.-20     	; 0x708e <__ultoa_invert+0x58>
    70a2:	46 2f       	mov	r20, r22
    70a4:	4f 70       	andi	r20, 0x0F	; 15
    70a6:	40 5d       	subi	r20, 0xD0	; 208
    70a8:	4a 33       	cpi	r20, 0x3A	; 58
    70aa:	18 f0       	brcs	.+6      	; 0x70b2 <__ultoa_invert+0x7c>
    70ac:	49 5d       	subi	r20, 0xD9	; 217
    70ae:	31 fd       	sbrc	r19, 1
    70b0:	40 52       	subi	r20, 0x20	; 32
    70b2:	41 93       	st	Z+, r20
    70b4:	02 d0       	rcall	.+4      	; 0x70ba <__ultoa_invert+0x84>
    70b6:	a9 f7       	brne	.-22     	; 0x70a2 <__ultoa_invert+0x6c>
    70b8:	ea cf       	rjmp	.-44     	; 0x708e <__ultoa_invert+0x58>
    70ba:	b4 e0       	ldi	r27, 0x04	; 4
    70bc:	a6 95       	lsr	r26
    70be:	97 95       	ror	r25
    70c0:	87 95       	ror	r24
    70c2:	77 95       	ror	r23
    70c4:	67 95       	ror	r22
    70c6:	ba 95       	dec	r27
    70c8:	c9 f7       	brne	.-14     	; 0x70bc <__ultoa_invert+0x86>
    70ca:	00 97       	sbiw	r24, 0x00	; 0
    70cc:	61 05       	cpc	r22, r1
    70ce:	71 05       	cpc	r23, r1
    70d0:	08 95       	ret
    70d2:	9b 01       	movw	r18, r22
    70d4:	ac 01       	movw	r20, r24
    70d6:	0a 2e       	mov	r0, r26
    70d8:	06 94       	lsr	r0
    70da:	57 95       	ror	r21
    70dc:	47 95       	ror	r20
    70de:	37 95       	ror	r19
    70e0:	27 95       	ror	r18
    70e2:	ba 95       	dec	r27
    70e4:	c9 f7       	brne	.-14     	; 0x70d8 <__ultoa_invert+0xa2>
    70e6:	62 0f       	add	r22, r18
    70e8:	73 1f       	adc	r23, r19
    70ea:	84 1f       	adc	r24, r20
    70ec:	95 1f       	adc	r25, r21
    70ee:	a0 1d       	adc	r26, r0
    70f0:	08 95       	ret

000070f2 <_exit>:
    70f2:	f8 94       	cli

000070f4 <__stop_program>:
    70f4:	ff cf       	rjmp	.-2      	; 0x70f4 <__stop_program>
