
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000624  00800200  00007282  00007316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e23  00800824  00800824  0000793a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000793a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be0  00000000  00000000  000079d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ec0c  00000000  00000000  000085b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b95  00000000  00000000  000171c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007406  00000000  00000000  0001ad59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a88  00000000  00000000  00022160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a38  00000000  00000000  00024be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d5b1  00000000  00000000  00029620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  00036bd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__vector_25>
      68:	0c 94 82 2b 	jmp	0x5704	; 0x5704 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c6 2b 	jmp	0x578c	; 0x578c <__vector_36>
      94:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 30 30 	jmp	0x6060	; 0x6060 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5c 2c 	jmp	0x58b8	; 0x58b8 <__vector_51>
      d0:	0c 94 ae 2c 	jmp	0x595c	; 0x595c <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f2 2c 	jmp	0x59e4	; 0x59e4 <__vector_54>
      dc:	0c 94 44 2d 	jmp	0x5a88	; 0x5a88 <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3c 21       	and	r19, r12
      e6:	3c 21       	and	r19, r12
      e8:	3c 21       	and	r19, r12
      ea:	73 21       	and	r23, r3
      ec:	7b 21       	and	r23, r11
      ee:	90 21       	and	r25, r0
      f0:	3c 21       	and	r19, r12
      f2:	3c 21       	and	r19, r12
      f4:	73 21       	and	r23, r3
      f6:	7b 21       	and	r23, r11
      f8:	52 30       	cpi	r21, 0x02	; 2
      fa:	c2 30       	cpi	r28, 0x02	; 2
      fc:	c2 30       	cpi	r28, 0x02	; 2
      fe:	c2 30       	cpi	r28, 0x02	; 2
     100:	c2 30       	cpi	r28, 0x02	; 2
     102:	c2 30       	cpi	r28, 0x02	; 2
     104:	c2 30       	cpi	r28, 0x02	; 2
     106:	c2 30       	cpi	r28, 0x02	; 2
     108:	52 30       	cpi	r21, 0x02	; 2
     10a:	c2 30       	cpi	r28, 0x02	; 2
     10c:	c2 30       	cpi	r28, 0x02	; 2
     10e:	c2 30       	cpi	r28, 0x02	; 2
     110:	c2 30       	cpi	r28, 0x02	; 2
     112:	c2 30       	cpi	r28, 0x02	; 2
     114:	c2 30       	cpi	r28, 0x02	; 2
     116:	c2 30       	cpi	r28, 0x02	; 2
     118:	54 30       	cpi	r21, 0x04	; 4
     11a:	c2 30       	cpi	r28, 0x02	; 2
     11c:	c2 30       	cpi	r28, 0x02	; 2
     11e:	c2 30       	cpi	r28, 0x02	; 2
     120:	c2 30       	cpi	r28, 0x02	; 2
     122:	c2 30       	cpi	r28, 0x02	; 2
     124:	c2 30       	cpi	r28, 0x02	; 2
     126:	c2 30       	cpi	r28, 0x02	; 2
     128:	c2 30       	cpi	r28, 0x02	; 2
     12a:	c2 30       	cpi	r28, 0x02	; 2
     12c:	c2 30       	cpi	r28, 0x02	; 2
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	c2 30       	cpi	r28, 0x02	; 2
     132:	c2 30       	cpi	r28, 0x02	; 2
     134:	c2 30       	cpi	r28, 0x02	; 2
     136:	c2 30       	cpi	r28, 0x02	; 2
     138:	54 30       	cpi	r21, 0x04	; 4
     13a:	c2 30       	cpi	r28, 0x02	; 2
     13c:	c2 30       	cpi	r28, 0x02	; 2
     13e:	c2 30       	cpi	r28, 0x02	; 2
     140:	c2 30       	cpi	r28, 0x02	; 2
     142:	c2 30       	cpi	r28, 0x02	; 2
     144:	c2 30       	cpi	r28, 0x02	; 2
     146:	c2 30       	cpi	r28, 0x02	; 2
     148:	c2 30       	cpi	r28, 0x02	; 2
     14a:	c2 30       	cpi	r28, 0x02	; 2
     14c:	c2 30       	cpi	r28, 0x02	; 2
     14e:	c2 30       	cpi	r28, 0x02	; 2
     150:	c2 30       	cpi	r28, 0x02	; 2
     152:	c2 30       	cpi	r28, 0x02	; 2
     154:	c2 30       	cpi	r28, 0x02	; 2
     156:	c2 30       	cpi	r28, 0x02	; 2
     158:	be 30       	cpi	r27, 0x0E	; 14
     15a:	c2 30       	cpi	r28, 0x02	; 2
     15c:	c2 30       	cpi	r28, 0x02	; 2
     15e:	c2 30       	cpi	r28, 0x02	; 2
     160:	c2 30       	cpi	r28, 0x02	; 2
     162:	c2 30       	cpi	r28, 0x02	; 2
     164:	c2 30       	cpi	r28, 0x02	; 2
     166:	c2 30       	cpi	r28, 0x02	; 2
     168:	89 30       	cpi	r24, 0x09	; 9
     16a:	c2 30       	cpi	r28, 0x02	; 2
     16c:	c2 30       	cpi	r28, 0x02	; 2
     16e:	c2 30       	cpi	r28, 0x02	; 2
     170:	c2 30       	cpi	r28, 0x02	; 2
     172:	c2 30       	cpi	r28, 0x02	; 2
     174:	c2 30       	cpi	r28, 0x02	; 2
     176:	c2 30       	cpi	r28, 0x02	; 2
     178:	c2 30       	cpi	r28, 0x02	; 2
     17a:	c2 30       	cpi	r28, 0x02	; 2
     17c:	c2 30       	cpi	r28, 0x02	; 2
     17e:	c2 30       	cpi	r28, 0x02	; 2
     180:	c2 30       	cpi	r28, 0x02	; 2
     182:	c2 30       	cpi	r28, 0x02	; 2
     184:	c2 30       	cpi	r28, 0x02	; 2
     186:	c2 30       	cpi	r28, 0x02	; 2
     188:	7d 30       	cpi	r23, 0x0D	; 13
     18a:	c2 30       	cpi	r28, 0x02	; 2
     18c:	c2 30       	cpi	r28, 0x02	; 2
     18e:	c2 30       	cpi	r28, 0x02	; 2
     190:	c2 30       	cpi	r28, 0x02	; 2
     192:	c2 30       	cpi	r28, 0x02	; 2
     194:	c2 30       	cpi	r28, 0x02	; 2
     196:	c2 30       	cpi	r28, 0x02	; 2
     198:	a1 30       	cpi	r26, 0x01	; 1

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <prvCheckTasksWaitingTermination>
     2a0:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
     2ac:	0e 94 b9 21 	call	0x4372	; 0x4372 <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 ae 20 	call	0x415c	; 0x415c <prvProcessTimerOrBlockTask>
     2ca:	0e 94 05 21 	call	0x420a	; 0x420a <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	18 e0       	ldi	r17, 0x08	; 8
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	e2 e8       	ldi	r30, 0x82	; 130
     2e8:	f2 e7       	ldi	r31, 0x72	; 114
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a4 32       	cpi	r26, 0x24	; 36
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	26 e1       	ldi	r18, 0x16	; 22
     2fc:	a4 e2       	ldi	r26, 0x24	; 36
     2fe:	b8 e0       	ldi	r27, 0x08	; 8
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a7 34       	cpi	r26, 0x47	; 71
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 78 22 	call	0x44f0	; 0x44f0 <main>
     30e:	0c 94 3f 39 	jmp	0x727e	; 0x727e <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:

/*
* Callback function called by the driver when the new CO2 measure is received.
*/
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 24 16 	sts	0x1624, r25	; 0x801624 <ppm+0x1>
     318:	80 93 23 16 	sts	0x1623, r24	; 0x801623 <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:
}

/*
* Task for taking the CO2 measurements and setting the CO2 value accordingly.
*/
void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32c:	0e 94 ce 14 	call	0x299c	; 0x299c <xTaskGetTickCount>
     330:	69 83       	std	Y+1, r22	; 0x01
     332:	7a 83       	std	Y+2, r23	; 0x02
     334:	8b 83       	std	Y+3, r24	; 0x03
     336:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     338:	40 ee       	ldi	r20, 0xE0	; 224
     33a:	53 e0       	ldi	r21, 0x03	; 3
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskDelayUntil>
		//need to set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     348:	40 91 25 16 	lds	r20, 0x1625	; 0x801625 <ready_bit>
     34c:	50 91 26 16 	lds	r21, 0x1626	; 0x801626 <ready_bit+0x1>
     350:	60 91 27 16 	lds	r22, 0x1627	; 0x801627 <ready_bit+0x2>
     354:	70 91 28 16 	lds	r23, 0x1628	; 0x801628 <ready_bit+0x3>
     358:	cc 24       	eor	r12, r12
     35a:	ca 94       	dec	r12
     35c:	dc 2c       	mov	r13, r12
     35e:	76 01       	movw	r14, r12
     360:	01 e0       	ldi	r16, 0x01	; 1
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <group_start>
     368:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <group_start+0x1>
     36c:	90 d5       	rcall	.+2848   	; 0xe8e <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		rc = mh_z19_takeMeassuring();
     36e:	0e 94 8a 29 	call	0x5314	; 0x5314 <mh_z19_takeMeassuring>
     372:	80 93 22 16 	sts	0x1622, r24	; 0x801622 <rc>
		if (rc != MHZ19_OK){
     376:	81 11       	cpse	r24, r1
     378:	df cf       	rjmp	.-66     	; 0x338 <startReadingCO2+0x1a>
			// Something went wrong
			} else {
			
			if(xMutexSemaphore != NULL){
     37a:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     37e:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	c9 f2       	breq	.-78     	; 0x338 <startReadingCO2+0x1a>
				if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 10) == pdTRUE){
     386:	4a e0       	ldi	r20, 0x0A	; 10
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <xQueueSemaphoreTake>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	21 f5       	brne	.+72     	; 0x3de <startReadingCO2+0xc0>
					((CO2_t)self)->CO2 = ppm;
     396:	80 91 23 16 	lds	r24, 0x1623	; 0x801623 <ppm>
     39a:	90 91 24 16 	lds	r25, 0x1624	; 0x801624 <ppm+0x1>
     39e:	f5 01       	movw	r30, r10
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
					printf("CO2 %d", ppm); // switch
     3a4:	80 91 24 16 	lds	r24, 0x1624	; 0x801624 <ppm+0x1>
     3a8:	8f 93       	push	r24
     3aa:	80 91 23 16 	lds	r24, 0x1623	; 0x801623 <ppm>
     3ae:	8f 93       	push	r24
     3b0:	8f e6       	ldi	r24, 0x6F	; 111
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	9f 93       	push	r25
     3b6:	8f 93       	push	r24
     3b8:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
					xSemaphoreGive(xMutexSemaphore);
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     3cc:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     3d0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <xQueueGenericSend>
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	ad cf       	rjmp	.-166    	; 0x338 <startReadingCO2+0x1a>
				}
				else{
					printf("The mutex could not be obtained.");
     3de:	86 e7       	ldi	r24, 0x76	; 118
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	a4 cf       	rjmp	.-184    	; 0x338 <startReadingCO2+0x1a>

000003f0 <getCO2>:
/*
* Method used for returning the CO2 value.
*/
uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	08 95       	ret

000003f8 <CO2_handler_init>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	08 2f       	mov	r16, r24
     404:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     406:	40 91 25 16 	lds	r20, 0x1625	; 0x801625 <ready_bit>
     40a:	50 91 26 16 	lds	r21, 0x1626	; 0x801626 <ready_bit+0x1>
     40e:	60 91 27 16 	lds	r22, 0x1627	; 0x801627 <ready_bit+0x2>
     412:	70 91 28 16 	lds	r23, 0x1628	; 0x801628 <ready_bit+0x3>
     416:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <group_start>
     41a:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <group_start+0x1>
     41e:	d7 d5       	rcall	.+2990   	; 0xfce <xEventGroupSetBits>

	xTaskCreate(
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	9e 01       	movw	r18, r28
     426:	44 e2       	ldi	r20, 0x24	; 36
     428:	51 e0       	ldi	r21, 0x01	; 1
     42a:	67 e9       	ldi	r22, 0x97	; 151
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	8f e8       	ldi	r24, 0x8F	; 143
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 44 14 	call	0x2888	; 0x2888 <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <createCO2>:
/*
* Method used for allocating memory for CO2 struct and returning it, initializing the CO2 value to 0, setting groups and bits,
* initializing the driver, injecting callback and creating a CO2 task.
*/
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex)
{
     442:	8f 92       	push	r8
     444:	9f 92       	push	r9
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	7c 01       	movw	r14, r24
     45c:	6b 01       	movw	r12, r22
     45e:	49 01       	movw	r8, r18
     460:	5a 01       	movw	r10, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <malloc>
     46a:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     46c:	89 2b       	or	r24, r25
     46e:	f9 f0       	breq	.+62     	; 0x4ae <createCO2+0x6c>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     470:	19 82       	std	Y+1, r1	; 0x01
     472:	18 82       	st	Y, r1
	
	group_start = taskBits;
     474:	d0 92 2c 16 	sts	0x162C, r13	; 0x80162c <group_start+0x1>
     478:	c0 92 2b 16 	sts	0x162B, r12	; 0x80162b <group_start>
	ready_bit = bit;
     47c:	80 92 25 16 	sts	0x1625, r8	; 0x801625 <ready_bit>
     480:	90 92 26 16 	sts	0x1626, r9	; 0x801626 <ready_bit+0x1>
     484:	a0 92 27 16 	sts	0x1627, r10	; 0x801627 <ready_bit+0x2>
     488:	b0 92 28 16 	sts	0x1628, r11	; 0x801628 <ready_bit+0x3>
	xMutexSemaphore = mutex; // switch
     48c:	10 93 2a 16 	sts	0x162A, r17	; 0x80162a <xMutexSemaphore+0x1>
     490:	00 93 29 16 	sts	0x1629, r16	; 0x801629 <xMutexSemaphore>
	mh_z19_initialise(ser_USART3);
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	0e 94 60 29 	call	0x52c0	; 0x52c0 <mh_z19_initialise>
	mh_z19_injectCallBack(CO2_callback);
     49a:	8a e8       	ldi	r24, 0x8A	; 138
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 85 29 	call	0x530a	; 0x530a <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     4a2:	be 01       	movw	r22, r28
     4a4:	c7 01       	movw	r24, r14
     4a6:	a8 df       	rcall	.-176    	; 0x3f8 <CO2_handler_init>
	return new_measure;
     4a8:	8c 2f       	mov	r24, r28
     4aa:	9d 2f       	mov	r25, r29
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <createCO2+0x70>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
	mh_z19_initialise(ser_USART3);
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	af 90       	pop	r10
     4c6:	9f 90       	pop	r9
     4c8:	8f 90       	pop	r8
     4ca:	08 95       	ret

000004cc <DownLinkHandler_Create>:
//uint16_t openWindow;
static lora_driver_payload_t downlinkPayload;

void lora_downlink_handler_task(void* messageBuffer);

void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	08 2f       	mov	r16, r24
     4d8:	eb 01       	movw	r28, r22
	
	printf("downlink 1");
     4da:	8f e9       	ldi	r24, 0x9F	; 159
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
	xTaskCreate(
     4e6:	e1 2c       	mov	r14, r1
     4e8:	f1 2c       	mov	r15, r1
     4ea:	9e 01       	movw	r18, r28
     4ec:	48 e8       	ldi	r20, 0x88	; 136
     4ee:	51 e0       	ldi	r21, 0x01	; 1
     4f0:	6a ea       	ldi	r22, 0xAA	; 170
     4f2:	72 e0       	ldi	r23, 0x02	; 2
     4f4:	88 ec       	ldi	r24, 0xC8	; 200
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	0e 94 44 14 	call	0x2888	; 0x2888 <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	08 95       	ret

0000050c <lora_DownLinkHandler_StartTask>:
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
	}
}


void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	ec 01       	movw	r28, r24
	
	printf("downlink 2");
     516:	84 ec       	ldi	r24, 0xC4	; 196
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
	
	rc_servo_setPosition(0,-100);
     522:	6c e9       	ldi	r22, 0x9C	; 156
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 b9 29 	call	0x5372	; 0x5372 <rc_servo_setPosition>
	rc_servo_setPosition(0, 100);
     52a:	64 e6       	ldi	r22, 0x64	; 100
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 b9 29 	call	0x5372	; 0x5372 <rc_servo_setPosition>
	rc_servo_setPosition(0,-100);
     532:	6c e9       	ldi	r22, 0x9C	; 156
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 b9 29 	call	0x5372	; 0x5372 <rc_servo_setPosition>
	
	printf("servo work");
     53a:	8f ec       	ldi	r24, 0xCF	; 207
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     546:	0f ef       	ldi	r16, 0xFF	; 255
     548:	1f ef       	ldi	r17, 0xFF	; 255
     54a:	98 01       	movw	r18, r16
     54c:	46 e1       	ldi	r20, 0x16	; 22
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	64 e2       	ldi	r22, 0x24	; 36
     552:	78 e0       	ldi	r23, 0x08	; 8
     554:	ce 01       	movw	r24, r28
     556:	0e 94 a9 11 	call	0x2352	; 0x2352 <xStreamBufferReceive>
	printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     55a:	e4 e2       	ldi	r30, 0x24	; 36
     55c:	f8 e0       	ldi	r31, 0x08	; 8
     55e:	91 81       	ldd	r25, Z+1	; 0x01
     560:	80 81       	ld	r24, Z
     562:	1f 92       	push	r1
     564:	9f 93       	push	r25
     566:	1f 92       	push	r1
     568:	8f 93       	push	r24
     56a:	8a ed       	ldi	r24, 0xDA	; 218
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
		//printf("down link %d", openWindow);
	}
	//} else {
	//printf("downlink Timeout\n");
	//	}
}
     576:	8d b7       	in	r24, 0x3d	; 61
     578:	9e b7       	in	r25, 0x3e	; 62
     57a:	0a 96       	adiw	r24, 0x0a	; 10
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	9e bf       	out	0x3e, r25	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	8d bf       	out	0x3d, r24	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <lora_downlink_handler_task>:
	, NULL);
}



void lora_downlink_handler_task(void* downLinkMessageBuffer){
     590:	ec 01       	movw	r28, r24
	for(;;){
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     592:	ce 01       	movw	r24, r28
     594:	bb df       	rcall	.-138    	; 0x50c <lora_DownLinkHandler_StartTask>
     596:	fd cf       	rjmp	.-6      	; 0x592 <lora_downlink_handler_task+0x2>

00000598 <tsl2591Callback>:

/*
* Callback function called when the new lux data is fetched.
*/
void tsl2591Callback(tsl2591_returnCode_t rc, LightHandler_t self)
{
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <tsl2591Callback+0xa>
     5a2:	1f 92       	push	r1
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
	uint16_t _tmp;
	float _lux;
	switch (rc)
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	59 f5       	brne	.+86     	; 0x602 <tsl2591Callback+0x6a>
     5ac:	8b 01       	movw	r16, r22
		else if( TSL2591_OVERFLOW == rc )
		{
			printf("Infrared overflow - change gain and integration time\n");
		}
		*/
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <tsl2591_getLux>
     5b6:	81 11       	cpse	r24, r1
     5b8:	1e c0       	rjmp	.+60     	; 0x5f6 <tsl2591Callback+0x5e>
		{
			self->lux = _lux;
     5ba:	69 81       	ldd	r22, Y+1	; 0x01
     5bc:	7a 81       	ldd	r23, Y+2	; 0x02
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	0e 94 81 22 	call	0x4502	; 0x4502 <__fixunssfsi>
     5c6:	f8 01       	movw	r30, r16
     5c8:	71 83       	std	Z+1, r23	; 0x01
     5ca:	60 83       	st	Z, r22
			printf("Lux: %5.4f\n", _lux); //switch
     5cc:	8c 81       	ldd	r24, Y+4	; 0x04
     5ce:	8f 93       	push	r24
     5d0:	8b 81       	ldd	r24, Y+3	; 0x03
     5d2:	8f 93       	push	r24
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	8f 93       	push	r24
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	8f 93       	push	r24
     5dc:	8b e0       	ldi	r24, 0x0B	; 11
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	9f 93       	push	r25
     5e2:	8f 93       	push	r24
     5e4:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	06 c0       	rjmp	.+12     	; 0x602 <tsl2591Callback+0x6a>
		}
		else if( TSL2591_OVERFLOW == rc )
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	21 f4       	brne	.+8      	; 0x602 <tsl2591Callback+0x6a>
		{
			printf("Lux overflow - change gain and integration time\n"); //switch
     5fa:	87 e1       	ldi	r24, 0x17	; 23
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <puts>
		break;
		
		default:
		break;
	}
}
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <createLightTask>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void createLightTask(UBaseType_t light_priority, LightHandler_t self){
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	08 2f       	mov	r16, r24
     620:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     622:	40 91 25 16 	lds	r20, 0x1625	; 0x801625 <ready_bit>
     626:	50 91 26 16 	lds	r21, 0x1626	; 0x801626 <ready_bit+0x1>
     62a:	60 91 27 16 	lds	r22, 0x1627	; 0x801627 <ready_bit+0x2>
     62e:	70 91 28 16 	lds	r23, 0x1628	; 0x801628 <ready_bit+0x3>
     632:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <group_start>
     636:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <group_start+0x1>
     63a:	c9 d4       	rcall	.+2450   	; 0xfce <xEventGroupSetBits>
	
	xTaskCreate(startReadingLight
     63c:	e1 2c       	mov	r14, r1
     63e:	f1 2c       	mov	r15, r1
     640:	9e 01       	movw	r18, r28
     642:	48 e8       	ldi	r20, 0x88	; 136
     644:	51 e0       	ldi	r21, 0x01	; 1
     646:	67 e4       	ldi	r22, 0x47	; 71
     648:	73 e0       	ldi	r23, 0x03	; 3
     64a:	84 ea       	ldi	r24, 0xA4	; 164
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	0e 94 44 14 	call	0x2888	; 0x2888 <xTaskCreate>
	, "Light task"
	, configMINIMAL_STACK_SIZE + 200,
	(void*) self, 
	light_priority, 
	NULL);
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	08 95       	ret

0000065e <createLightSensor>:
/*
* Method used for allocating memory for LightHandler struct and returning it, initializing the lux value to 0, setting groups and bits,
* initializing the driver, injecting callback, enabling the driver and creating a light task.
*/
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits, SemaphoreHandle_t mutex)
{
     65e:	8f 92       	push	r8
     660:	9f 92       	push	r9
     662:	af 92       	push	r10
     664:	bf 92       	push	r11
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	f8 2e       	mov	r15, r24
     676:	6b 01       	movw	r12, r22
     678:	49 01       	movw	r8, r18
     67a:	5a 01       	movw	r10, r20
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <calloc>
     688:	ec 01       	movw	r28, r24
	
	if(new_measure == NULL){
     68a:	89 2b       	or	r24, r25
     68c:	29 f1       	breq	.+74     	; 0x6d8 <createLightSensor+0x7a>
		return NULL;
	}
	new_measure -> lux = 0;	
     68e:	19 82       	std	Y+1, r1	; 0x01
     690:	18 82       	st	Y, r1
	ready_bit = bits;
     692:	80 92 25 16 	sts	0x1625, r8	; 0x801625 <ready_bit>
     696:	90 92 26 16 	sts	0x1626, r9	; 0x801626 <ready_bit+0x1>
     69a:	a0 92 27 16 	sts	0x1627, r10	; 0x801627 <ready_bit+0x2>
     69e:	b0 92 28 16 	sts	0x1628, r11	; 0x801628 <ready_bit+0x3>
	group_start = eventBits;
     6a2:	d0 92 2c 16 	sts	0x162C, r13	; 0x80162c <group_start+0x1>
     6a6:	c0 92 2b 16 	sts	0x162B, r12	; 0x80162b <group_start>
	xMutexSemaphore = mutex;
     6aa:	10 93 2a 16 	sts	0x162A, r17	; 0x80162a <xMutexSemaphore+0x1>
     6ae:	00 93 29 16 	sts	0x1629, r16	; 0x801629 <xMutexSemaphore>
	
	if ( TSL2591_OK == tsl2591_initialise(tsl2591Callback) )
     6b2:	8c ec       	ldi	r24, 0xCC	; 204
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <tsl2591_initialise>
     6ba:	81 11       	cpse	r24, r1
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <createLightSensor+0x68>
	{
		puts("Light sensor initialized"); //switch
     6be:	82 e5       	ldi	r24, 0x52	; 82
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <puts>
	}
	
	if ( TSL2591_OK != tsl2591_enable() )
     6c6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <tsl2591_enable>
	{
	  //some error handling here
	}
	createLightTask(light_priority, new_measure);
     6ca:	be 01       	movw	r22, r28
     6cc:	8f 2d       	mov	r24, r15
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	a1 df       	rcall	.-190    	; 0x614 <createLightTask>
	return new_measure;
     6d2:	8c 2f       	mov	r24, r28
     6d4:	9d 2f       	mov	r25, r29
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <createLightSensor+0x7e>
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits, SemaphoreHandle_t mutex)
{
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
	
	if(new_measure == NULL){
		return NULL;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
	{
	  //some error handling here
	}
	createLightTask(light_priority, new_measure);
	return new_measure;
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	08 95       	ret

000006f4 <measure_light>:
		default:
		break;
	}
}

void measure_light(LightHandler_t self){
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
	
	EventBits_t readyBits = xEventGroupWaitBits(group_start,
     704:	40 91 25 16 	lds	r20, 0x1625	; 0x801625 <ready_bit>
     708:	50 91 26 16 	lds	r21, 0x1626	; 0x801626 <ready_bit+0x1>
     70c:	60 91 27 16 	lds	r22, 0x1627	; 0x801627 <ready_bit+0x2>
     710:	70 91 28 16 	lds	r23, 0x1628	; 0x801628 <ready_bit+0x3>
     714:	cc 24       	eor	r12, r12
     716:	ca 94       	dec	r12
     718:	dc 2c       	mov	r13, r12
     71a:	76 01       	movw	r14, r12
     71c:	01 e0       	ldi	r16, 0x01	; 1
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <group_start>
     724:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <group_start+0x1>
     728:	b2 d3       	rcall	.+1892   	; 0xe8e <xEventGroupWaitBits>
	ready_bit,
	pdFALSE,
	pdTRUE,
	portMAX_DELAY);
	
	if ( TSL2591_OK != tsl2591_fetchData() )
     72a:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <tsl2591_fetchData>
     72e:	81 11       	cpse	r24, r1
     730:	03 c0       	rjmp	.+6      	; 0x738 <measure_light+0x44>
		// Investigate the return code further
	}
	else
	{
		//The light data will be ready after the driver calls the call back function with
		tsl2591Callback(TSL2591_DATA_READY, self);
     732:	be 01       	movw	r22, r28
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	30 df       	rcall	.-416    	; 0x598 <tsl2591Callback>
	}
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	08 95       	ret

00000748 <startReadingLight>:

void startReadingLight(void* self){
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <startReadingLight+0x6>
     74e:	1f 92       	push	r1
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     756:	0e 94 ce 14 	call	0x299c	; 0x299c <xTaskGetTickCount>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     762:	42 ea       	ldi	r20, 0xA2	; 162
     764:	53 e0       	ldi	r21, 0x03	; 3
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskDelayUntil>
		measure_light((LightHandler_t) self);
     772:	c8 01       	movw	r24, r16
     774:	bf df       	rcall	.-130    	; 0x6f4 <measure_light>
     776:	f5 cf       	rjmp	.-22     	; 0x762 <startReadingLight+0x1a>

00000778 <getLight>:
}


uint16_t getLight(LightHandler_t self){
	return self->lux;
}
     778:	fc 01       	movw	r30, r24
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	08 95       	ret

00000780 <create_shared_printf>:
#include "SharedPrintf.h"

SemaphoreHandle_t xMutexPrint;

void create_shared_printf(){
	if (xMutexPrint == NULL ){
     780:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <xMutexPrint>
     784:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <xMutexPrint+0x1>
     788:	89 2b       	or	r24, r25
     78a:	39 f4       	brne	.+14     	; 0x79a <create_shared_printf+0x1a>
		xMutexPrint = xSemaphoreCreateMutex();
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <xQueueCreateMutex>
     792:	90 93 2e 16 	sts	0x162E, r25	; 0x80162e <xMutexPrint+0x1>
     796:	80 93 2d 16 	sts	0x162D, r24	; 0x80162d <xMutexPrint>
     79a:	08 95       	ret

0000079c <print_sharedf>:
	}
}

void print_sharedf(char* format, ...){
     79c:	0f 93       	push	r16
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
	va_list lst;
	if (xSemaphoreTake(xMutexPrint, (TickType_t) 300) == pdTRUE) {
     7a6:	4c e2       	ldi	r20, 0x2C	; 44
     7a8:	51 e0       	ldi	r21, 0x01	; 1
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <xMutexPrint>
     7b2:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <xMutexPrint+0x1>
     7b6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <xQueueSemaphoreTake>
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	99 f4       	brne	.+38     	; 0x7e4 <print_sharedf+0x48>
		va_start(lst, format);
		vprintf(format, lst);
     7be:	be 01       	movw	r22, r28
     7c0:	67 5f       	subi	r22, 0xF7	; 247
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	8f 81       	ldd	r24, Y+7	; 0x07
     7c6:	98 85       	ldd	r25, Y+8	; 0x08
     7c8:	0e 94 da 38 	call	0x71b4	; 0x71b4 <vprintf>
		xSemaphoreGive(xMutexPrint);
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	a9 01       	movw	r20, r18
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <xMutexPrint>
     7dc:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <xMutexPrint+0x1>
     7e0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <xQueueGenericSend>
	}
	else {}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	0f 91       	pop	r16
     7ea:	08 95       	ret

000007ec <create_semaphore_mutex_and_sensors>:
			return tempHum;
			} else{
			printf("The mutex could not be obtained."); //replace with sharedprint
		}
	}
}
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     7f6:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     7fa:	89 2b       	or	r24, r25
     7fc:	39 f4       	brne	.+14     	; 0x80c <create_semaphore_mutex_and_sensors+0x20>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <xQueueCreateMutex>
     804:	90 93 2a 16 	sts	0x162A, r25	; 0x80162a <xMutexSemaphore+0x1>
     808:	80 93 29 16 	sts	0x1629, r24	; 0x801629 <xMutexSemaphore>
     80c:	d0 93 30 16 	sts	0x1630, r29	; 0x801630 <tempHum+0x1>
     810:	c0 93 2f 16 	sts	0x162F, r28	; 0x80162f <tempHum>
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <set_temp_hum_val>:
     81a:	0f 93       	push	r16
     81c:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     820:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	11 f1       	breq	.+68     	; 0x86c <set_temp_hum_val+0x52>
     828:	4c e2       	ldi	r20, 0x2C	; 44
     82a:	51 e0       	ldi	r21, 0x01	; 1
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <xQueueSemaphoreTake>
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	91 f4       	brne	.+36     	; 0x85c <set_temp_hum_val+0x42>
     838:	80 91 2f 16 	lds	r24, 0x162F	; 0x80162f <tempHum>
     83c:	90 91 30 16 	lds	r25, 0x1630	; 0x801630 <tempHum+0x1>
     840:	ef d0       	rcall	.+478    	; 0xa20 <set_values>
     842:	00 e0       	ldi	r16, 0x00	; 0
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	a9 01       	movw	r20, r18
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     852:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     856:	0e 94 b4 0c 	call	0x1968	; 0x1968 <xQueueGenericSend>
     85a:	08 c0       	rjmp	.+16     	; 0x86c <set_temp_hum_val+0x52>
     85c:	86 e7       	ldi	r24, 0x76	; 118
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <get_humidity_val>:

uint16_t get_humidity_val(){
	if(xMutexSemaphore != NULL){
     870:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     874:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	b1 f0       	breq	.+44     	; 0x8a8 <get_humidity_val+0x38>
		if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     87c:	4c e2       	ldi	r20, 0x2C	; 44
     87e:	51 e0       	ldi	r21, 0x01	; 1
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <xQueueSemaphoreTake>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	31 f4       	brne	.+12     	; 0x898 <get_humidity_val+0x28>
			return getHumidity(tempHum);
     88c:	80 91 2f 16 	lds	r24, 0x162F	; 0x80162f <tempHum>
     890:	90 91 30 16 	lds	r25, 0x1630	; 0x801630 <tempHum+0x1>
     894:	c1 c0       	rjmp	.+386    	; 0xa18 <getHumidity>
     896:	08 95       	ret
			} else{
			printf("The mutex could not be obtained."); //replace with sharedprint
     898:	86 e7       	ldi	r24, 0x76	; 118
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
		}
	}
     8a8:	08 95       	ret

000008aa <measureTempAndHum>:
		measureTempAndHum((Temperature_t) self);
	}
}

void measureTempAndHum(Temperature_t self){
	set_temp_hum_val();
     8aa:	b7 cf       	rjmp	.-146    	; 0x81a <set_temp_hum_val>
     8ac:	08 95       	ret

000008ae <startReading>:
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}

void startReading(void* self){
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <startReading+0x6>
     8b4:	1f 92       	push	r1
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     8bc:	0e 94 ce 14 	call	0x299c	; 0x299c <xTaskGetTickCount>
     8c0:	69 83       	std	Y+1, r22	; 0x01
     8c2:	7a 83       	std	Y+2, r23	; 0x02
     8c4:	8b 83       	std	Y+3, r24	; 0x03
     8c6:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     8c8:	42 ea       	ldi	r20, 0xA2	; 162
     8ca:	53 e0       	ldi	r21, 0x03	; 3
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     8d8:	0e 94 3e 24 	call	0x487c	; 0x487c <hih8120_wakeup>
     8dc:	88 23       	and	r24, r24
     8de:	21 f0       	breq	.+8      	; 0x8e8 <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     8e0:	8b e6       	ldi	r24, 0x6B	; 107
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     8e8:	40 91 25 16 	lds	r20, 0x1625	; 0x801625 <ready_bit>
     8ec:	50 91 26 16 	lds	r21, 0x1626	; 0x801626 <ready_bit+0x1>
     8f0:	60 91 27 16 	lds	r22, 0x1627	; 0x801627 <ready_bit+0x2>
     8f4:	70 91 28 16 	lds	r23, 0x1628	; 0x801628 <ready_bit+0x3>
     8f8:	cc 24       	eor	r12, r12
     8fa:	ca 94       	dec	r12
     8fc:	dc 2c       	mov	r13, r12
     8fe:	76 01       	movw	r14, r12
     900:	01 e0       	ldi	r16, 0x01	; 1
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <group_start>
     908:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <group_start+0x1>
     90c:	c0 d2       	rcall	.+1408   	; 0xe8e <xEventGroupWaitBits>
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 49 17 	call	0x2e92	; 0x2e92 <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     91a:	0e 94 53 24 	call	0x48a6	; 0x48a6 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	cb 01       	movw	r24, r22
     924:	0e 94 49 17 	call	0x2e92	; 0x2e92 <vTaskDelay>
		
		measureTempAndHum((Temperature_t) self);
     928:	c5 01       	movw	r24, r10
     92a:	bf df       	rcall	.-130    	; 0x8aa <measureTempAndHum>
	}
     92c:	cd cf       	rjmp	.-102    	; 0x8c8 <startReading+0x1a>

0000092e <temperature_handler_init>:

void measureTempAndHum(Temperature_t self){
	set_temp_hum_val();
}

void temperature_handler_init(Temperature_t self, uint16_t priority){
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     93c:	40 91 25 16 	lds	r20, 0x1625	; 0x801625 <ready_bit>
     940:	50 91 26 16 	lds	r21, 0x1626	; 0x801626 <ready_bit+0x1>
     944:	60 91 27 16 	lds	r22, 0x1627	; 0x801627 <ready_bit+0x2>
     948:	70 91 28 16 	lds	r23, 0x1628	; 0x801628 <ready_bit+0x3>
     94c:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <group_start>
     950:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <group_start+0x1>
     954:	3c d3       	rcall	.+1656   	; 0xfce <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     956:	e1 2c       	mov	r14, r1
     958:	f1 2c       	mov	r15, r1
     95a:	9e 01       	movw	r18, r28
     95c:	40 ec       	ldi	r20, 0xC0	; 192
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	65 e8       	ldi	r22, 0x85	; 133
     962:	73 e0       	ldi	r23, 0x03	; 3
     964:	87 e5       	ldi	r24, 0x57	; 87
     966:	94 e0       	ldi	r25, 0x04	; 4
     968:	0e 94 44 14 	call	0x2888	; 0x2888 <xTaskCreate>
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	08 95       	ret

00000978 <createTemp>:
	float temperature;
	uint16_t humidity;
	} TemperatureHandler;
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex){
     978:	8f 92       	push	r8
     97a:	9f 92       	push	r9
     97c:	af 92       	push	r10
     97e:	bf 92       	push	r11
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	7c 01       	movw	r14, r24
     992:	6b 01       	movw	r12, r22
     994:	49 01       	movw	r8, r18
     996:	5a 01       	movw	r10, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     998:	86 e0       	ldi	r24, 0x06	; 6
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <malloc>
     9a0:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     9a2:	89 2b       	or	r24, r25
     9a4:	21 f1       	breq	.+72     	; 0x9ee <createTemp+0x76>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     9a6:	18 82       	st	Y, r1
     9a8:	19 82       	std	Y+1, r1	; 0x01
     9aa:	1a 82       	std	Y+2, r1	; 0x02
     9ac:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     9ae:	1d 82       	std	Y+5, r1	; 0x05
     9b0:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     9b2:	d0 92 2c 16 	sts	0x162C, r13	; 0x80162c <group_start+0x1>
     9b6:	c0 92 2b 16 	sts	0x162B, r12	; 0x80162b <group_start>
	ready_bit = bit;
     9ba:	80 92 25 16 	sts	0x1625, r8	; 0x801625 <ready_bit>
     9be:	90 92 26 16 	sts	0x1626, r9	; 0x801626 <ready_bit+0x1>
     9c2:	a0 92 27 16 	sts	0x1627, r10	; 0x801627 <ready_bit+0x2>
     9c6:	b0 92 28 16 	sts	0x1628, r11	; 0x801628 <ready_bit+0x3>
	xMutexSemaphore = mutex;
     9ca:	10 93 2a 16 	sts	0x162A, r17	; 0x80162a <xMutexSemaphore+0x1>
     9ce:	00 93 29 16 	sts	0x1629, r16	; 0x801629 <xMutexSemaphore>
	
	if (HIH8120_OK == hih8120_initialise())
     9d2:	0e 94 26 24 	call	0x484c	; 0x484c <hih8120_initialise>
     9d6:	81 11       	cpse	r24, r1
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <createTemp+0x6a>
	{
		puts("Temp sensor initialized.");
     9da:	86 e9       	ldi	r24, 0x96	; 150
     9dc:	93 e0       	ldi	r25, 0x03	; 3
     9de:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     9e2:	b7 01       	movw	r22, r14
     9e4:	ce 01       	movw	r24, r28
     9e6:	a3 df       	rcall	.-186    	; 0x92e <temperature_handler_init>
	return new_measure;
     9e8:	8c 2f       	mov	r24, r28
     9ea:	9d 2f       	mov	r25, r29
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <createTemp+0x7a>
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit, SemaphoreHandle_t mutex){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	9f 90       	pop	r9
     a08:	8f 90       	pop	r8
     a0a:	08 95       	ret

00000a0c <getTemperature>:
	xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
}

float getTemperature(Temperature_t self){
	return self->temperature;
     a0c:	fc 01       	movw	r30, r24
     a0e:	60 81       	ld	r22, Z
     a10:	71 81       	ldd	r23, Z+1	; 0x01
     a12:	82 81       	ldd	r24, Z+2	; 0x02
     a14:	93 81       	ldd	r25, Z+3	; 0x03
}
     a16:	08 95       	ret

00000a18 <getHumidity>:

uint16_t getHumidity(Temperature_t self){
	return self -> humidity;
}
     a18:	fc 01       	movw	r30, r24
     a1a:	84 81       	ldd	r24, Z+4	; 0x04
     a1c:	95 81       	ldd	r25, Z+5	; 0x05
     a1e:	08 95       	ret

00000a20 <set_values>:

void set_values(Temperature_t self){
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     a26:	0e 94 81 24 	call	0x4902	; 0x4902 <hih8120_getTemperature>
     a2a:	68 83       	st	Y, r22
     a2c:	79 83       	std	Y+1, r23	; 0x01
     a2e:	8a 83       	std	Y+2, r24	; 0x02
     a30:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10()/10;
     a32:	0e 94 78 24 	call	0x48f0	; 0x48f0 <hih8120_getHumidityPercent_x10>
     a36:	9c 01       	movw	r18, r24
     a38:	ad ec       	ldi	r26, 0xCD	; 205
     a3a:	bc ec       	ldi	r27, 0xCC	; 204
     a3c:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__umulhisi3>
     a40:	96 95       	lsr	r25
     a42:	87 95       	ror	r24
     a44:	96 95       	lsr	r25
     a46:	87 95       	ror	r24
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	9d 83       	std	Y+5, r25	; 0x05
     a4e:	8c 83       	std	Y+4, r24	; 0x04
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	64 97       	sbiw	r28, 0x14	; 20
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	//status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     a6e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <lora_driver_rn2483FactoryReset>
     a72:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     a76:	9f 93       	push	r25
     a78:	8f 93       	push	r24
     a7a:	8f ea       	ldi	r24, 0xAF	; 175
     a7c:	93 e0       	ldi	r25, 0x03	; 3
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     a86:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <lora_driver_configureToEu868>
     a8a:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	82 ec       	ldi	r24, 0xC2	; 194
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	9f 93       	push	r25
     a98:	8f 93       	push	r24
     a9a:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     a9e:	8e 01       	movw	r16, r28
     aa0:	0f 5f       	subi	r16, 0xFF	; 255
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 94 19 26 	call	0x4c32	; 0x4c32 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     aaa:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     aae:	1f 93       	push	r17
     ab0:	0f 93       	push	r16
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	8b ed       	ldi	r24, 0xDB	; 219
     ab8:	93 e0       	ldi	r25, 0x03	; 3
     aba:	9f 93       	push	r25
     abc:	8f 93       	push	r24
     abe:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     ac2:	c8 01       	movw	r24, r16
     ac4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <lora_driver_setDeviceIdentifier>
     ac8:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	1f 93       	push	r17
     ad2:	0f 93       	push	r16
     ad4:	8f ee       	ldi	r24, 0xEF	; 239
     ad6:	93 e0       	ldi	r25, 0x03	; 3
     ad8:	9f 93       	push	r25
     ada:	8f 93       	push	r24
     adc:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     ae0:	a8 01       	movw	r20, r16
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	74 e0       	ldi	r23, 0x04	; 4
     ae6:	85 e2       	ldi	r24, 0x25	; 37
     ae8:	94 e0       	ldi	r25, 0x04	; 4
     aea:	0e 94 63 28 	call	0x50c6	; 0x50c6 <lora_driver_setOtaaIdentity>
     aee:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     af2:	9f 93       	push	r25
     af4:	8f 93       	push	r24
     af6:	1f 93       	push	r17
     af8:	0f 93       	push	r16
     afa:	84 e0       	ldi	r24, 0x04	; 4
     afc:	94 e0       	ldi	r25, 0x04	; 4
     afe:	9f 93       	push	r25
     b00:	8f 93       	push	r24
     b02:	85 e2       	ldi	r24, 0x25	; 37
     b04:	94 e0       	ldi	r25, 0x04	; 4
     b06:	9f 93       	push	r25
     b08:	8f 93       	push	r24
     b0a:	86 e3       	ldi	r24, 0x36	; 54
     b0c:	94 e0       	ldi	r25, 0x04	; 4
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     b16:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <lora_driver_saveMac>
     b1a:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     b1e:	9f 93       	push	r25
     b20:	8f 93       	push	r24
     b22:	8c e6       	ldi	r24, 0x6C	; 108
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	9f 93       	push	r25
     b28:	8f 93       	push	r24
     b2a:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <lora_driver_setAdaptiveDataRate>
     b3e:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     b42:	9f 93       	push	r25
     b44:	8f 93       	push	r24
     b46:	8b e7       	ldi	r24, 0x7B	; 123
     b48:	94 e0       	ldi	r25, 0x04	; 4
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     b52:	84 ef       	ldi	r24, 0xF4	; 244
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 6d 27 	call	0x4eda	; 0x4eda <lora_driver_setReceiveDelay>
     b5a:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     b5e:	9f 93       	push	r25
     b60:	8f 93       	push	r24
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	8f 93       	push	r24
     b66:	84 ef       	ldi	r24, 0xF4	; 244
     b68:	8f 93       	push	r24
     b6a:	8c e9       	ldi	r24, 0x9C	; 156
     b6c:	94 e0       	ldi	r25, 0x04	; 4
     b6e:	9f 93       	push	r25
     b70:	8f 93       	push	r24
     b72:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     b80:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <lora_driver_join>
     b88:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     b8a:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     b8e:	9f 93       	push	r25
     b90:	8f 93       	push	r24
     b92:	1f 92       	push	r1
     b94:	1f 93       	push	r17
     b96:	8c eb       	ldi	r24, 0xBC	; 188
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>

		if ( rc != LORA_ACCEPTED)
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	08 30       	cpi	r16, 0x08	; 8
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <_lora_setup+0x16c>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     bb2:	66 e3       	ldi	r22, 0x36	; 54
     bb4:	71 e0       	ldi	r23, 0x01	; 1
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 49 17 	call	0x2e92	; 0x2e92 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     bbe:	11 50       	subi	r17, 0x01	; 1
     bc0:	01 f7       	brne	.-64     	; 0xb82 <_lora_setup+0x12c>

	if (rc == LORA_ACCEPTED)
     bc2:	08 30       	cpi	r16, 0x08	; 8
     bc4:	11 f0       	breq	.+4      	; 0xbca <_lora_setup+0x174>
		//status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     bc6:	b8 d4       	rcall	.+2416   	; 0x1538 <vPortYield>
     bc8:	fe cf       	rjmp	.-4      	; 0xbc6 <_lora_setup+0x170>
		}
	}
}
     bca:	64 96       	adiw	r28, 0x14	; 20
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <lora_handler_task>:

void lora_handler_task(void* pvParameters){
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	28 97       	sbiw	r28, 0x08	; 8
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <lora_driver_resetRn2483>
	vTaskDelay(2);
     bfa:	62 e0       	ldi	r22, 0x02	; 2
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 49 17 	call	0x2e92	; 0x2e92 <vTaskDelay>
	lora_driver_resetRn2483(0);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     c0c:	66 e9       	ldi	r22, 0x96	; 150
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 49 17 	call	0x2e92	; 0x2e92 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     c18:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <lora_driver_flushBuffers>

	_lora_setup();
     c1c:	1c df       	rcall	.-456    	; 0xa56 <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     c1e:	0e 94 ce 14 	call	0x299c	; 0x299c <xTaskGetTickCount>
     c22:	69 83       	std	Y+1, r22	; 0x01
     c24:	7a 83       	std	Y+2, r23	; 0x02
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     c2a:	44 e4       	ldi	r20, 0x44	; 68
     c2c:	57 e0       	ldi	r21, 0x07	; 7
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskDelayUntil>
		_uplink_payload.len = 7;
     c3a:	ea e3       	ldi	r30, 0x3A	; 58
     c3c:	f8 e0       	ldi	r31, 0x08	; 8
     c3e:	87 e0       	ldi	r24, 0x07	; 7
     c40:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 83       	st	Z, r24
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
		uint16_t light_val = 0;
		if(xMutexSemaphore != NULL){
     c46:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     c4a:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	09 f4       	brne	.+2      	; 0xc54 <lora_handler_task+0x74>
     c52:	4e c0       	rjmp	.+156    	; 0xcf0 <lora_handler_task+0x110>
			if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 10) == pdTRUE){
     c54:	4a e0       	ldi	r20, 0x0A	; 10
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	ff d7       	rcall	.+4094   	; 0x1c5c <xQueueSemaphoreTake>
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f5       	brne	.+104    	; 0xcca <lora_handler_task+0xea>
				temp = (double) getTemperature(temperatureAndHumidity);
     c62:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <temperatureAndHumidity>
     c66:	90 91 36 16 	lds	r25, 0x1636	; 0x801636 <temperatureAndHumidity+0x1>
     c6a:	d0 de       	rcall	.-608    	; 0xa0c <getTemperature>
     c6c:	36 2e       	mov	r3, r22
     c6e:	87 2e       	mov	r8, r23
     c70:	98 2e       	mov	r9, r24
     c72:	19 2f       	mov	r17, r25
				humidity = getHumidity(temperatureAndHumidity)/10;
     c74:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <temperatureAndHumidity>
     c78:	90 91 36 16 	lds	r25, 0x1636	; 0x801636 <temperatureAndHumidity+0x1>
     c7c:	cd de       	rcall	.-614    	; 0xa18 <getHumidity>
     c7e:	9c 01       	movw	r18, r24
     c80:	ad ec       	ldi	r26, 0xCD	; 205
     c82:	bc ec       	ldi	r27, 0xCC	; 204
     c84:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__umulhisi3>
     c88:	7c 01       	movw	r14, r24
     c8a:	f6 94       	lsr	r15
     c8c:	e7 94       	ror	r14
     c8e:	f6 94       	lsr	r15
     c90:	e7 94       	ror	r14
     c92:	f6 94       	lsr	r15
     c94:	e7 94       	ror	r14
				co2_val = getCO2(co2);
     c96:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <co2>
     c9a:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <co2+0x1>
     c9e:	a8 db       	rcall	.-2224   	; 0x3f0 <getCO2>
     ca0:	b8 2e       	mov	r11, r24
     ca2:	a9 2e       	mov	r10, r25
				light_val = getLight(light_handler);
     ca4:	80 91 31 16 	lds	r24, 0x1631	; 0x801631 <light_handler>
     ca8:	90 91 32 16 	lds	r25, 0x1632	; 0x801632 <light_handler+0x1>
     cac:	65 dd       	rcall	.-1334   	; 0x778 <getLight>
     cae:	d8 2e       	mov	r13, r24
     cb0:	c9 2e       	mov	r12, r25
				xSemaphoreGive(xMutexSemaphore);
     cb2:	00 e0       	ldi	r16, 0x00	; 0
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	a9 01       	movw	r20, r18
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
     cc2:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
     cc6:	50 d6       	rcall	.+3232   	; 0x1968 <xQueueGenericSend>
     cc8:	1d c0       	rjmp	.+58     	; 0xd04 <lora_handler_task+0x124>
			}
			else{
				printf("The mutex could not be obtained.");
     cca:	86 e7       	ldi	r24, 0x76	; 118
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
		uint16_t light_val = 0;
     cda:	d1 2c       	mov	r13, r1
     cdc:	c1 2c       	mov	r12, r1
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
     cde:	b1 2c       	mov	r11, r1
     ce0:	a1 2c       	mov	r10, r1
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
     ce2:	e1 2c       	mov	r14, r1
     ce4:	f1 2c       	mov	r15, r1
		_uplink_payload.len = 7;
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
     ce6:	31 2c       	mov	r3, r1
     ce8:	81 2c       	mov	r8, r1
     cea:	91 2c       	mov	r9, r1
     cec:	10 e0       	ldi	r17, 0x00	; 0
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <lora_handler_task+0x124>
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
		uint16_t light_val = 0;
     cf0:	d1 2c       	mov	r13, r1
     cf2:	c1 2c       	mov	r12, r1
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
		uint16_t co2_val = 0;
     cf4:	b1 2c       	mov	r11, r1
     cf6:	a1 2c       	mov	r10, r1
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
		uint16_t humidity = 0;
     cf8:	e1 2c       	mov	r14, r1
		_uplink_payload.len = 7;
		_uplink_payload.portNo = 1;
		
		//lora_driver_payload_t downlinkPayload;
		
		double temp = 0.0;
     cfa:	f1 2c       	mov	r15, r1
     cfc:	31 2c       	mov	r3, r1
     cfe:	81 2c       	mov	r8, r1
     d00:	91 2c       	mov	r9, r1
			else{
				printf("The mutex could not be obtained.");
			}
		}
		
		uint16_t test = get_humidity_val();
     d02:	10 e0       	ldi	r17, 0x00	; 0
		print_sharedf("Humidity value maybe %d", test);
     d04:	b5 dd       	rcall	.-1174   	; 0x870 <get_humidity_val>
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	8c ed       	ldi	r24, 0xDC	; 220
     d0c:	94 e0       	ldi	r25, 0x04	; 4
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	44 dd       	rcall	.-1400   	; 0x79c <print_sharedf>
		//printf("Humidity value maybe %d", test);
		//temperature
		double val1=0;
     d14:	1d 82       	std	Y+5, r1	; 0x05
     d16:	1e 82       	std	Y+6, r1	; 0x06
     d18:	1f 82       	std	Y+7, r1	; 0x07
     d1a:	18 86       	std	Y+8, r1	; 0x08
		double val2=0;
		val2 = modf(temp, &val1);
     d1c:	ae 01       	movw	r20, r28
     d1e:	4b 5f       	subi	r20, 0xFB	; 251
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	63 2d       	mov	r22, r3
     d24:	78 2d       	mov	r23, r8
     d26:	89 2d       	mov	r24, r9
     d28:	91 2f       	mov	r25, r17
     d2a:	0e 94 d6 22 	call	0x45ac	; 0x45ac <modf>
		val2 = val2 * 100;
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	48 ec       	ldi	r20, 0xC8	; 200
     d34:	52 e4       	ldi	r21, 0x42	; 66
     d36:	0e 94 09 23 	call	0x4612	; 0x4612 <__mulsf3>
     d3a:	2b 01       	movw	r4, r22
     d3c:	3c 01       	movw	r6, r24
		printf("\ntemp: %f", temp);
     d3e:	1f 93       	push	r17
     d40:	9f 92       	push	r9
     d42:	8f 92       	push	r8
     d44:	3f 92       	push	r3
     d46:	84 ef       	ldi	r24, 0xF4	; 244
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
		_uplink_payload.bytes[0] = (int) val1;
     d52:	6d 81       	ldd	r22, Y+5	; 0x05
     d54:	7e 81       	ldd	r23, Y+6	; 0x06
     d56:	8f 81       	ldd	r24, Y+7	; 0x07
     d58:	98 85       	ldd	r25, Y+8	; 0x08
     d5a:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <__fixsfsi>
     d5e:	0a e3       	ldi	r16, 0x3A	; 58
     d60:	18 e0       	ldi	r17, 0x08	; 8
     d62:	f8 01       	movw	r30, r16
     d64:	62 83       	std	Z+2, r22	; 0x02
		_uplink_payload.bytes[1] = (int) val2;
     d66:	c3 01       	movw	r24, r6
     d68:	b2 01       	movw	r22, r4
     d6a:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <__fixsfsi>
     d6e:	f8 01       	movw	r30, r16
     d70:	63 83       	std	Z+3, r22	; 0x03
		
		//humidity
		printf("\nhumidity: %d", humidity);
     d72:	ff 92       	push	r15
     d74:	ef 92       	push	r14
     d76:	8e ef       	ldi	r24, 0xFE	; 254
     d78:	94 e0       	ldi	r25, 0x04	; 4
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
		_uplink_payload.bytes[2] = humidity;
     d82:	f8 01       	movw	r30, r16
     d84:	e4 82       	std	Z+4, r14	; 0x04
		
		//co2
		printf("\nco2: %d", co2_val);
     d86:	af 92       	push	r10
     d88:	bf 92       	push	r11
     d8a:	8c e0       	ldi	r24, 0x0C	; 12
     d8c:	95 e0       	ldi	r25, 0x05	; 5
     d8e:	9f 93       	push	r25
     d90:	8f 93       	push	r24
     d92:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
		_uplink_payload.bytes[3] = co2_val >> 8;
     d96:	f8 01       	movw	r30, r16
     d98:	a5 82       	std	Z+5, r10	; 0x05
		_uplink_payload.bytes[4] = co2_val & 0xFF;
     d9a:	b6 82       	std	Z+6, r11	; 0x06
		
		//light
		printf("\n light in lux: %d", light_val);
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	85 e1       	ldi	r24, 0x15	; 21
     da2:	95 e0       	ldi	r25, 0x05	; 5
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
		_uplink_payload.bytes[5] = light_val >> 8;
     dac:	f8 01       	movw	r30, r16
     dae:	c7 82       	std	Z+7, r12	; 0x07
		_uplink_payload.bytes[6] = light_val & 0xFF;
     db0:	d0 86       	std	Z+8, r13	; 0x08
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     db2:	b8 01       	movw	r22, r16
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <lora_driver_sendUploadMessage>
     dba:	0e 94 84 28 	call	0x5108	; 0x5108 <lora_driver_mapReturnCodeToText>
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	88 e2       	ldi	r24, 0x28	; 40
     dc4:	95 e0       	ldi	r25, 0x05	; 5
     dc6:	9f 93       	push	r25
     dc8:	8f 93       	push	r24
     dca:	0e 94 69 38 	call	0x70d2	; 0x70d2 <printf>
	}
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	28 cf       	rjmp	.-432    	; 0xc2a <lora_handler_task+0x4a>

00000dda <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;
SemaphoreHandle_t xMutexSemaphore;

void lora_handler_task(void* pvParameters);

void lora_handler_initialize(uint16_t lora_handler_task_priority, Temperature_t temperatureObject, CO2_t co2Object, SemaphoreHandle_t mutex, LightHandler_t lightObject){
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
	
	temperatureAndHumidity = temperatureObject;
     de2:	70 93 36 16 	sts	0x1636, r23	; 0x801636 <temperatureAndHumidity+0x1>
     de6:	60 93 35 16 	sts	0x1635, r22	; 0x801635 <temperatureAndHumidity>
	co2 = co2Object;
     dea:	50 93 34 16 	sts	0x1634, r21	; 0x801634 <co2+0x1>
     dee:	40 93 33 16 	sts	0x1633, r20	; 0x801633 <co2>
	xMutexSemaphore = mutex;
     df2:	30 93 2a 16 	sts	0x162A, r19	; 0x80162a <xMutexSemaphore+0x1>
     df6:	20 93 29 16 	sts	0x1629, r18	; 0x801629 <xMutexSemaphore>
	light_handler = lightObject;
     dfa:	10 93 32 16 	sts	0x1632, r17	; 0x801632 <light_handler+0x1>
     dfe:	00 93 31 16 	sts	0x1631, r16	; 0x801631 <light_handler>
	xTaskCreate(
     e02:	e1 2c       	mov	r14, r1
     e04:	f1 2c       	mov	r15, r1
     e06:	08 2f       	mov	r16, r24
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	48 e8       	ldi	r20, 0x88	; 136
     e0e:	51 e0       	ldi	r21, 0x01	; 1
     e10:	6d e3       	ldi	r22, 0x3D	; 61
     e12:	75 e0       	ldi	r23, 0x05	; 5
     e14:	80 ef       	ldi	r24, 0xF0	; 240
     e16:	95 e0       	ldi	r25, 0x05	; 5
     e18:	0e 94 44 14 	call	0x2888	; 0x2888 <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	08 95       	ret

00000e26 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     e26:	0f 93       	push	r16
     e28:	01 11       	cpse	r16, r1
     e2a:	0c c0       	rjmp	.+24     	; 0xe44 <prvTestWaitCondition+0x1e>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	82 23       	and	r24, r18
     e32:	93 23       	and	r25, r19
     e34:	a4 23       	and	r26, r20
     e36:	b5 23       	and	r27, r21
     e38:	89 2b       	or	r24, r25
     e3a:	8a 2b       	or	r24, r26
     e3c:	8b 2b       	or	r24, r27
     e3e:	79 f4       	brne	.+30     	; 0xe5e <prvTestWaitCondition+0x38>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	10 c0       	rjmp	.+32     	; 0xe64 <prvTestWaitCondition+0x3e>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	82 23       	and	r24, r18
     e4a:	93 23       	and	r25, r19
     e4c:	a4 23       	and	r26, r20
     e4e:	b5 23       	and	r27, r21
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	4a 07       	cpc	r20, r26
     e56:	5b 07       	cpc	r21, r27
     e58:	21 f0       	breq	.+8      	; 0xe62 <prvTestWaitCondition+0x3c>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <prvTestWaitCondition+0x3e>
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <prvTestWaitCondition+0x3e>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <xEventGroupCreate>:
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	8f e0       	ldi	r24, 0x0F	; 15
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	af d1       	rcall	.+862    	; 0x11d0 <pvPortMalloc>
     e72:	ec 01       	movw	r28, r24
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	39 f0       	breq	.+14     	; 0xe86 <xEventGroupCreate+0x1e>
     e78:	fc 01       	movw	r30, r24
     e7a:	11 92       	st	Z+, r1
     e7c:	11 92       	st	Z+, r1
     e7e:	11 92       	st	Z+, r1
     e80:	11 92       	st	Z+, r1
     e82:	cf 01       	movw	r24, r30
     e84:	8b d2       	rcall	.+1302   	; 0x139c <vListInitialise>
     e86:	ce 01       	movw	r24, r28
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <xEventGroupWaitBits>:
     e8e:	2f 92       	push	r2
     e90:	3f 92       	push	r3
     e92:	4f 92       	push	r4
     e94:	5f 92       	push	r5
     e96:	6f 92       	push	r6
     e98:	7f 92       	push	r7
     e9a:	8f 92       	push	r8
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	ec 01       	movw	r28, r24
     eb4:	4a 01       	movw	r8, r20
     eb6:	5b 01       	movw	r10, r22
     eb8:	62 2e       	mov	r6, r18
     eba:	70 2e       	mov	r7, r16
     ebc:	0e 94 c8 14 	call	0x2990	; 0x2990 <vTaskSuspendAll>
     ec0:	28 80       	ld	r2, Y
     ec2:	39 80       	ldd	r3, Y+1	; 0x01
     ec4:	4a 80       	ldd	r4, Y+2	; 0x02
     ec6:	5b 80       	ldd	r5, Y+3	; 0x03
     ec8:	a5 01       	movw	r20, r10
     eca:	94 01       	movw	r18, r8
     ecc:	c2 01       	movw	r24, r4
     ece:	b1 01       	movw	r22, r2
     ed0:	aa df       	rcall	.-172    	; 0xe26 <prvTestWaitCondition>
     ed2:	88 23       	and	r24, r24
     ed4:	a1 f0       	breq	.+40     	; 0xefe <xEventGroupWaitBits+0x70>
     ed6:	66 20       	and	r6, r6
     ed8:	89 f1       	breq	.+98     	; 0xf3c <xEventGroupWaitBits+0xae>
     eda:	d5 01       	movw	r26, r10
     edc:	c4 01       	movw	r24, r8
     ede:	80 95       	com	r24
     ee0:	90 95       	com	r25
     ee2:	a0 95       	com	r26
     ee4:	b0 95       	com	r27
     ee6:	82 21       	and	r24, r2
     ee8:	93 21       	and	r25, r3
     eea:	a4 21       	and	r26, r4
     eec:	b5 21       	and	r27, r5
     eee:	88 83       	st	Y, r24
     ef0:	99 83       	std	Y+1, r25	; 0x01
     ef2:	aa 83       	std	Y+2, r26	; 0x02
     ef4:	bb 83       	std	Y+3, r27	; 0x03
     ef6:	c1 2c       	mov	r12, r1
     ef8:	d1 2c       	mov	r13, r1
     efa:	76 01       	movw	r14, r12
     efc:	22 c0       	rjmp	.+68     	; 0xf42 <xEventGroupWaitBits+0xb4>
     efe:	c1 14       	cp	r12, r1
     f00:	d1 04       	cpc	r13, r1
     f02:	e1 04       	cpc	r14, r1
     f04:	f1 04       	cpc	r15, r1
     f06:	e9 f0       	breq	.+58     	; 0xf42 <xEventGroupWaitBits+0xb4>
     f08:	61 10       	cpse	r6, r1
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <xEventGroupWaitBits+0x86>
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	ba 01       	movw	r22, r20
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <xEventGroupWaitBits+0x8e>
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	71 e0       	ldi	r23, 0x01	; 1
     f1c:	71 10       	cpse	r7, r1
     f1e:	74 60       	ori	r23, 0x04	; 4
     f20:	48 29       	or	r20, r8
     f22:	59 29       	or	r21, r9
     f24:	6a 29       	or	r22, r10
     f26:	7b 29       	or	r23, r11
     f28:	97 01       	movw	r18, r14
     f2a:	86 01       	movw	r16, r12
     f2c:	ce 01       	movw	r24, r28
     f2e:	04 96       	adiw	r24, 0x04	; 4
     f30:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <vTaskPlaceOnUnorderedEventList>
     f34:	21 2c       	mov	r2, r1
     f36:	31 2c       	mov	r3, r1
     f38:	21 01       	movw	r4, r2
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <xEventGroupWaitBits+0xb4>
     f3c:	c1 2c       	mov	r12, r1
     f3e:	d1 2c       	mov	r13, r1
     f40:	76 01       	movw	r14, r12
     f42:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
     f46:	cd 28       	or	r12, r13
     f48:	ce 28       	or	r12, r14
     f4a:	cf 28       	or	r12, r15
     f4c:	59 f1       	breq	.+86     	; 0xfa4 <xEventGroupWaitBits+0x116>
     f4e:	81 11       	cpse	r24, r1
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <xEventGroupWaitBits+0xc6>
     f52:	f2 d2       	rcall	.+1508   	; 0x1538 <vPortYield>
     f54:	0e 94 a2 1b 	call	0x3744	; 0x3744 <uxTaskResetEventItemValue>
     f58:	6b 01       	movw	r12, r22
     f5a:	7c 01       	movw	r14, r24
     f5c:	91 fd       	sbrc	r25, 1
     f5e:	1f c0       	rjmp	.+62     	; 0xf9e <xEventGroupWaitBits+0x110>
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	0f 92       	push	r0
     f66:	c8 80       	ld	r12, Y
     f68:	d9 80       	ldd	r13, Y+1	; 0x01
     f6a:	ea 80       	ldd	r14, Y+2	; 0x02
     f6c:	fb 80       	ldd	r15, Y+3	; 0x03
     f6e:	07 2d       	mov	r16, r7
     f70:	a5 01       	movw	r20, r10
     f72:	94 01       	movw	r18, r8
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	56 df       	rcall	.-340    	; 0xe26 <prvTestWaitCondition>
     f7a:	88 23       	and	r24, r24
     f7c:	71 f0       	breq	.+28     	; 0xf9a <xEventGroupWaitBits+0x10c>
     f7e:	66 20       	and	r6, r6
     f80:	61 f0       	breq	.+24     	; 0xf9a <xEventGroupWaitBits+0x10c>
     f82:	80 94       	com	r8
     f84:	90 94       	com	r9
     f86:	a0 94       	com	r10
     f88:	b0 94       	com	r11
     f8a:	8c 20       	and	r8, r12
     f8c:	9d 20       	and	r9, r13
     f8e:	ae 20       	and	r10, r14
     f90:	bf 20       	and	r11, r15
     f92:	88 82       	st	Y, r8
     f94:	99 82       	std	Y+1, r9	; 0x01
     f96:	aa 82       	std	Y+2, r10	; 0x02
     f98:	bb 82       	std	Y+3, r11	; 0x03
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	16 01       	movw	r2, r12
     fa0:	27 01       	movw	r4, r14
     fa2:	55 24       	eor	r5, r5
     fa4:	c2 01       	movw	r24, r4
     fa6:	b1 01       	movw	r22, r2
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	9f 90       	pop	r9
     fbe:	8f 90       	pop	r8
     fc0:	7f 90       	pop	r7
     fc2:	6f 90       	pop	r6
     fc4:	5f 90       	pop	r5
     fc6:	4f 90       	pop	r4
     fc8:	3f 90       	pop	r3
     fca:	2f 90       	pop	r2
     fcc:	08 95       	ret

00000fce <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	af 92       	push	r10
     fd8:	bf 92       	push	r11
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
     fec:	6a 01       	movw	r12, r20
     fee:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ff0:	8c 01       	movw	r16, r24
     ff2:	09 5f       	subi	r16, 0xF9	; 249
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     ff6:	0e 94 c8 14 	call	0x2990	; 0x2990 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     ffa:	eb 85       	ldd	r30, Y+11	; 0x0b
     ffc:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     ffe:	88 81       	ld	r24, Y
    1000:	99 81       	ldd	r25, Y+1	; 0x01
    1002:	aa 81       	ldd	r26, Y+2	; 0x02
    1004:	bb 81       	ldd	r27, Y+3	; 0x03
    1006:	c8 2a       	or	r12, r24
    1008:	d9 2a       	or	r13, r25
    100a:	ea 2a       	or	r14, r26
    100c:	fb 2a       	or	r15, r27
    100e:	c8 82       	st	Y, r12
    1010:	d9 82       	std	Y+1, r13	; 0x01
    1012:	ea 82       	std	Y+2, r14	; 0x02
    1014:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1016:	c1 2c       	mov	r12, r1
    1018:	d1 2c       	mov	r13, r1
    101a:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    101c:	3d c0       	rjmp	.+122    	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
        {
            pxNext = listGET_NEXT( pxListItem );
    101e:	a4 80       	ldd	r10, Z+4	; 0x04
    1020:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	a2 81       	ldd	r26, Z+2	; 0x02
    1028:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    102a:	ac 01       	movw	r20, r24
    102c:	bd 01       	movw	r22, r26
    102e:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1030:	b2 fd       	sbrc	r27, 2
    1032:	0e c0       	rjmp	.+28     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    1034:	48 80       	ld	r4, Y
    1036:	59 80       	ldd	r5, Y+1	; 0x01
    1038:	6a 80       	ldd	r6, Y+2	; 0x02
    103a:	7b 80       	ldd	r7, Y+3	; 0x03
    103c:	44 22       	and	r4, r20
    103e:	55 22       	and	r5, r21
    1040:	66 22       	and	r6, r22
    1042:	77 22       	and	r7, r23
    1044:	45 28       	or	r4, r5
    1046:	46 28       	or	r4, r6
    1048:	47 28       	or	r4, r7
    104a:	89 f4       	brne	.+34     	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	12 c0       	rjmp	.+36     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1050:	48 80       	ld	r4, Y
    1052:	59 80       	ldd	r5, Y+1	; 0x01
    1054:	6a 80       	ldd	r6, Y+2	; 0x02
    1056:	7b 80       	ldd	r7, Y+3	; 0x03
    1058:	44 22       	and	r4, r20
    105a:	55 22       	and	r5, r21
    105c:	66 22       	and	r6, r22
    105e:	77 22       	and	r7, r23
    1060:	44 15       	cp	r20, r4
    1062:	55 05       	cpc	r21, r5
    1064:	66 05       	cpc	r22, r6
    1066:	77 05       	cpc	r23, r7
    1068:	21 f0       	breq	.+8      	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    1072:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1074:	22 23       	and	r18, r18
    1076:	71 f0       	breq	.+28     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1078:	b0 ff       	sbrs	r27, 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    107c:	c4 2a       	or	r12, r20
    107e:	d5 2a       	or	r13, r21
    1080:	e6 2a       	or	r14, r22
    1082:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1084:	48 81       	ld	r20, Y
    1086:	59 81       	ldd	r21, Y+1	; 0x01
    1088:	6a 81       	ldd	r22, Y+2	; 0x02
    108a:	7b 81       	ldd	r23, Y+3	; 0x03
    108c:	72 60       	ori	r23, 0x02	; 2
    108e:	cf 01       	movw	r24, r30
    1090:	0e 94 1b 19 	call	0x3236	; 0x3236 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1094:	ea 2d       	mov	r30, r10
    1096:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1098:	e0 17       	cp	r30, r16
    109a:	f1 07       	cpc	r31, r17
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    109e:	bf cf       	rjmp	.-130    	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    10a0:	c0 94       	com	r12
    10a2:	d0 94       	com	r13
    10a4:	e0 94       	com	r14
    10a6:	f0 94       	com	r15
    10a8:	88 81       	ld	r24, Y
    10aa:	99 81       	ldd	r25, Y+1	; 0x01
    10ac:	aa 81       	ldd	r26, Y+2	; 0x02
    10ae:	bb 81       	ldd	r27, Y+3	; 0x03
    10b0:	c8 22       	and	r12, r24
    10b2:	d9 22       	and	r13, r25
    10b4:	ea 22       	and	r14, r26
    10b6:	fb 22       	and	r15, r27
    10b8:	c8 82       	st	Y, r12
    10ba:	d9 82       	std	Y+1, r13	; 0x01
    10bc:	ea 82       	std	Y+2, r14	; 0x02
    10be:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    10c0:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    10c4:	68 81       	ld	r22, Y
    10c6:	79 81       	ldd	r23, Y+1	; 0x01
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	7f 90       	pop	r7
    10e2:	6f 90       	pop	r6
    10e4:	5f 90       	pop	r5
    10e6:	4f 90       	pop	r4
    10e8:	08 95       	ret

000010ea <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    10ea:	ec e5       	ldi	r30, 0x5C	; 92
    10ec:	f8 e0       	ldi	r31, 0x08	; 8
    10ee:	a0 e6       	ldi	r26, 0x60	; 96
    10f0:	b8 e0       	ldi	r27, 0x08	; 8
    10f2:	b1 83       	std	Z+1, r27	; 0x01
    10f4:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    10f6:	13 82       	std	Z+3, r1	; 0x03
    10f8:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    10fa:	e4 e1       	ldi	r30, 0x14	; 20
    10fc:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    10fe:	f0 93 5b 08 	sts	0x085B, r31	; 0x80085b <pxEnd+0x1>
    1102:	e0 93 5a 08 	sts	0x085A, r30	; 0x80085a <pxEnd>
    pxEnd->xBlockSize = 0;
    1106:	13 82       	std	Z+3, r1	; 0x03
    1108:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    110a:	11 82       	std	Z+1, r1	; 0x01
    110c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    110e:	84 eb       	ldi	r24, 0xB4	; 180
    1110:	9b e0       	ldi	r25, 0x0B	; 11
    1112:	13 96       	adiw	r26, 0x03	; 3
    1114:	9c 93       	st	X, r25
    1116:	8e 93       	st	-X, r24
    1118:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    111a:	ed 93       	st	X+, r30
    111c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    111e:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <xMinimumEverFreeBytesRemaining+0x1>
    1122:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1126:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <xFreeBytesRemaining+0x1>
    112a:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e8       	ldi	r25, 0x80	; 128
    1132:	90 93 51 08 	sts	0x0851, r25	; 0x800851 <xBlockAllocatedBit+0x1>
    1136:	80 93 50 08 	sts	0x0850, r24	; 0x800850 <xBlockAllocatedBit>
    113a:	08 95       	ret

0000113c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1142:	ac e5       	ldi	r26, 0x5C	; 92
    1144:	b8 e0       	ldi	r27, 0x08	; 8
    1146:	01 c0       	rjmp	.+2      	; 0x114a <prvInsertBlockIntoFreeList+0xe>
    1148:	df 01       	movw	r26, r30
    114a:	ed 91       	ld	r30, X+
    114c:	fc 91       	ld	r31, X
    114e:	11 97       	sbiw	r26, 0x01	; 1
    1150:	ec 17       	cp	r30, r28
    1152:	fd 07       	cpc	r31, r29
    1154:	c8 f3       	brcs	.-14     	; 0x1148 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1156:	12 96       	adiw	r26, 0x02	; 2
    1158:	8d 91       	ld	r24, X+
    115a:	9c 91       	ld	r25, X
    115c:	13 97       	sbiw	r26, 0x03	; 3
    115e:	9d 01       	movw	r18, r26
    1160:	28 0f       	add	r18, r24
    1162:	39 1f       	adc	r19, r25
    1164:	c2 17       	cp	r28, r18
    1166:	d3 07       	cpc	r29, r19
    1168:	49 f4       	brne	.+18     	; 0x117c <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    116a:	2a 81       	ldd	r18, Y+2	; 0x02
    116c:	3b 81       	ldd	r19, Y+3	; 0x03
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	13 96       	adiw	r26, 0x03	; 3
    1174:	9c 93       	st	X, r25
    1176:	8e 93       	st	-X, r24
    1178:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    117a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	9e 01       	movw	r18, r28
    1182:	28 0f       	add	r18, r24
    1184:	39 1f       	adc	r19, r25
    1186:	e2 17       	cp	r30, r18
    1188:	f3 07       	cpc	r31, r19
    118a:	c1 f4       	brne	.+48     	; 0x11bc <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    118c:	20 91 5a 08 	lds	r18, 0x085A	; 0x80085a <pxEnd>
    1190:	30 91 5b 08 	lds	r19, 0x085B	; 0x80085b <pxEnd+0x1>
    1194:	e2 17       	cp	r30, r18
    1196:	f3 07       	cpc	r31, r19
    1198:	71 f0       	breq	.+28     	; 0x11b6 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    119a:	22 81       	ldd	r18, Z+2	; 0x02
    119c:	33 81       	ldd	r19, Z+3	; 0x03
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	9b 83       	std	Y+3, r25	; 0x03
    11a4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11a6:	ed 91       	ld	r30, X+
    11a8:	fc 91       	ld	r31, X
    11aa:	11 97       	sbiw	r26, 0x01	; 1
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	99 83       	std	Y+1, r25	; 0x01
    11b2:	88 83       	st	Y, r24
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11b6:	39 83       	std	Y+1, r19	; 0x01
    11b8:	28 83       	st	Y, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11bc:	f9 83       	std	Y+1, r31	; 0x01
    11be:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    11c0:	ca 17       	cp	r28, r26
    11c2:	db 07       	cpc	r29, r27
    11c4:	11 f0       	breq	.+4      	; 0x11ca <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11c6:	cd 93       	st	X+, r28
    11c8:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    11de:	0e 94 c8 14 	call	0x2990	; 0x2990 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    11e2:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <pxEnd>
    11e6:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <pxEnd+0x1>
    11ea:	89 2b       	or	r24, r25
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <pvPortMalloc+0x20>
        {
            prvHeapInit();
    11ee:	7d df       	rcall	.-262    	; 0x10ea <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    11f0:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <xBlockAllocatedBit>
    11f4:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <xBlockAllocatedBit+0x1>
    11f8:	80 23       	and	r24, r16
    11fa:	91 23       	and	r25, r17
    11fc:	89 2b       	or	r24, r25
    11fe:	09 f0       	breq	.+2      	; 0x1202 <pvPortMalloc+0x32>
    1200:	76 c0       	rjmp	.+236    	; 0x12ee <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1202:	01 15       	cp	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	49 f0       	breq	.+18     	; 0x121a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1208:	c8 01       	movw	r24, r16
    120a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    120c:	08 17       	cp	r16, r24
    120e:	19 07       	cpc	r17, r25
    1210:	18 f0       	brcs	.+6      	; 0x1218 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	01 c0       	rjmp	.+2      	; 0x121a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    1218:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    121a:	01 15       	cp	r16, r1
    121c:	11 05       	cpc	r17, r1
    121e:	09 f4       	brne	.+2      	; 0x1222 <pvPortMalloc+0x52>
    1220:	69 c0       	rjmp	.+210    	; 0x12f4 <pvPortMalloc+0x124>
    1222:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <xFreeBytesRemaining>
    1226:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <xFreeBytesRemaining+0x1>
    122a:	80 17       	cp	r24, r16
    122c:	91 07       	cpc	r25, r17
    122e:	08 f4       	brcc	.+2      	; 0x1232 <pvPortMalloc+0x62>
    1230:	64 c0       	rjmp	.+200    	; 0x12fa <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    1232:	c0 91 5c 08 	lds	r28, 0x085C	; 0x80085c <xStart>
    1236:	d0 91 5d 08 	lds	r29, 0x085D	; 0x80085d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    123a:	ec e5       	ldi	r30, 0x5C	; 92
    123c:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    1240:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    1242:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	9b 81       	ldd	r25, Y+3	; 0x03
    1248:	80 17       	cp	r24, r16
    124a:	91 07       	cpc	r25, r17
    124c:	20 f4       	brcc	.+8      	; 0x1256 <pvPortMalloc+0x86>
    124e:	88 81       	ld	r24, Y
    1250:	99 81       	ldd	r25, Y+1	; 0x01
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	a9 f7       	brne	.-22     	; 0x1240 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    1256:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <pxEnd>
    125a:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <pxEnd+0x1>
    125e:	c8 17       	cp	r28, r24
    1260:	d9 07       	cpc	r29, r25
    1262:	09 f4       	brne	.+2      	; 0x1266 <pvPortMalloc+0x96>
    1264:	4d c0       	rjmp	.+154    	; 0x1300 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1266:	e0 80       	ld	r14, Z
    1268:	f1 80       	ldd	r15, Z+1	; 0x01
    126a:	84 e0       	ldi	r24, 0x04	; 4
    126c:	e8 0e       	add	r14, r24
    126e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1270:	88 81       	ld	r24, Y
    1272:	99 81       	ldd	r25, Y+1	; 0x01
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1278:	2a 81       	ldd	r18, Y+2	; 0x02
    127a:	3b 81       	ldd	r19, Y+3	; 0x03
    127c:	20 1b       	sub	r18, r16
    127e:	31 0b       	sbc	r19, r17
    1280:	29 30       	cpi	r18, 0x09	; 9
    1282:	31 05       	cpc	r19, r1
    1284:	48 f0       	brcs	.+18     	; 0x1298 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1286:	ce 01       	movw	r24, r28
    1288:	80 0f       	add	r24, r16
    128a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    128c:	fc 01       	movw	r30, r24
    128e:	33 83       	std	Z+3, r19	; 0x03
    1290:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    1292:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    1294:	0a 83       	std	Y+2, r16	; 0x02
    1296:	52 df       	rcall	.-348    	; 0x113c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <xFreeBytesRemaining>
    12a0:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <xFreeBytesRemaining+0x1>
    12a4:	82 1b       	sub	r24, r18
    12a6:	93 0b       	sbc	r25, r19
    12a8:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <xFreeBytesRemaining+0x1>
    12ac:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    12b0:	40 91 56 08 	lds	r20, 0x0856	; 0x800856 <xMinimumEverFreeBytesRemaining>
    12b4:	50 91 57 08 	lds	r21, 0x0857	; 0x800857 <xMinimumEverFreeBytesRemaining+0x1>
    12b8:	84 17       	cp	r24, r20
    12ba:	95 07       	cpc	r25, r21
    12bc:	20 f4       	brcc	.+8      	; 0x12c6 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    12be:	90 93 57 08 	sts	0x0857, r25	; 0x800857 <xMinimumEverFreeBytesRemaining+0x1>
    12c2:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    12c6:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <xBlockAllocatedBit>
    12ca:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <xBlockAllocatedBit+0x1>
    12ce:	28 2b       	or	r18, r24
    12d0:	39 2b       	or	r19, r25
    12d2:	3b 83       	std	Y+3, r19	; 0x03
    12d4:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    12d6:	19 82       	std	Y+1, r1	; 0x01
    12d8:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    12da:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <xNumberOfSuccessfulAllocations>
    12de:	90 91 55 08 	lds	r25, 0x0855	; 0x800855 <xNumberOfSuccessfulAllocations+0x1>
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xNumberOfSuccessfulAllocations+0x1>
    12e8:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xNumberOfSuccessfulAllocations>
    12ec:	0b c0       	rjmp	.+22     	; 0x1304 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    12ee:	e1 2c       	mov	r14, r1
    12f0:	f1 2c       	mov	r15, r1
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <pvPortMalloc+0x134>
    12f4:	e1 2c       	mov	r14, r1
    12f6:	f1 2c       	mov	r15, r1
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <pvPortMalloc+0x134>
    12fa:	e1 2c       	mov	r14, r1
    12fc:	f1 2c       	mov	r15, r1
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <pvPortMalloc+0x134>
    1300:	e1 2c       	mov	r14, r1
    1302:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1304:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    1308:	e1 14       	cp	r14, r1
    130a:	f1 04       	cpc	r15, r1
    130c:	11 f4       	brne	.+4      	; 0x1312 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    130e:	0e 94 c5 21 	call	0x438a	; 0x438a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    1312:	c7 01       	movw	r24, r14
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	08 95       	ret

00001322 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	91 f1       	breq	.+100    	; 0x1392 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    132e:	ec 01       	movw	r28, r24
    1330:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    1332:	4a 81       	ldd	r20, Y+2	; 0x02
    1334:	5b 81       	ldd	r21, Y+3	; 0x03
    1336:	20 91 50 08 	lds	r18, 0x0850	; 0x800850 <xBlockAllocatedBit>
    133a:	30 91 51 08 	lds	r19, 0x0851	; 0x800851 <xBlockAllocatedBit+0x1>
    133e:	ba 01       	movw	r22, r20
    1340:	62 23       	and	r22, r18
    1342:	73 23       	and	r23, r19
    1344:	67 2b       	or	r22, r23
    1346:	29 f1       	breq	.+74     	; 0x1392 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    1348:	68 81       	ld	r22, Y
    134a:	79 81       	ldd	r23, Y+1	; 0x01
    134c:	67 2b       	or	r22, r23
    134e:	09 f5       	brne	.+66     	; 0x1392 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1350:	20 95       	com	r18
    1352:	30 95       	com	r19
    1354:	24 23       	and	r18, r20
    1356:	35 23       	and	r19, r21
    1358:	3b 83       	std	Y+3, r19	; 0x03
    135a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    135c:	0e 94 c8 14 	call	0x2990	; 0x2990 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	9b 81       	ldd	r25, Y+3	; 0x03
    1364:	20 91 58 08 	lds	r18, 0x0858	; 0x800858 <xFreeBytesRemaining>
    1368:	30 91 59 08 	lds	r19, 0x0859	; 0x800859 <xFreeBytesRemaining+0x1>
    136c:	82 0f       	add	r24, r18
    136e:	93 1f       	adc	r25, r19
    1370:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <xFreeBytesRemaining+0x1>
    1374:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1378:	ce 01       	movw	r24, r28
    137a:	e0 de       	rcall	.-576    	; 0x113c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    137c:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <xNumberOfSuccessfulFrees>
    1380:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <xNumberOfSuccessfulFrees+0x1>
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <xNumberOfSuccessfulFrees+0x1>
    138a:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    138e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	08 95       	ret

0000139c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    139c:	fc 01       	movw	r30, r24
    139e:	03 96       	adiw	r24, 0x03	; 3
    13a0:	92 83       	std	Z+2, r25	; 0x02
    13a2:	81 83       	std	Z+1, r24	; 0x01
    13a4:	4f ef       	ldi	r20, 0xFF	; 255
    13a6:	5f ef       	ldi	r21, 0xFF	; 255
    13a8:	ba 01       	movw	r22, r20
    13aa:	43 83       	std	Z+3, r20	; 0x03
    13ac:	54 83       	std	Z+4, r21	; 0x04
    13ae:	65 83       	std	Z+5, r22	; 0x05
    13b0:	76 83       	std	Z+6, r23	; 0x06
    13b2:	90 87       	std	Z+8, r25	; 0x08
    13b4:	87 83       	std	Z+7, r24	; 0x07
    13b6:	92 87       	std	Z+10, r25	; 0x0a
    13b8:	81 87       	std	Z+9, r24	; 0x09
    13ba:	10 82       	st	Z, r1
    13bc:	08 95       	ret

000013be <vListInitialiseItem>:
    13be:	fc 01       	movw	r30, r24
    13c0:	13 86       	std	Z+11, r1	; 0x0b
    13c2:	12 86       	std	Z+10, r1	; 0x0a
    13c4:	08 95       	ret

000013c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    13d0:	08 81       	ld	r16, Y
    13d2:	19 81       	ldd	r17, Y+1	; 0x01
    13d4:	2a 81       	ldd	r18, Y+2	; 0x02
    13d6:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    13d8:	0f 3f       	cpi	r16, 0xFF	; 255
    13da:	4f ef       	ldi	r20, 0xFF	; 255
    13dc:	14 07       	cpc	r17, r20
    13de:	24 07       	cpc	r18, r20
    13e0:	34 07       	cpc	r19, r20
    13e2:	21 f4       	brne	.+8      	; 0x13ec <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    13e4:	fc 01       	movw	r30, r24
    13e6:	a1 85       	ldd	r26, Z+9	; 0x09
    13e8:	b2 85       	ldd	r27, Z+10	; 0x0a
    13ea:	11 c0       	rjmp	.+34     	; 0x140e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    13ec:	dc 01       	movw	r26, r24
    13ee:	13 96       	adiw	r26, 0x03	; 3
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <vListInsert+0x2e>
    13f2:	df 01       	movw	r26, r30
    13f4:	14 96       	adiw	r26, 0x04	; 4
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	15 97       	sbiw	r26, 0x05	; 5
    13fc:	40 81       	ld	r20, Z
    13fe:	51 81       	ldd	r21, Z+1	; 0x01
    1400:	62 81       	ldd	r22, Z+2	; 0x02
    1402:	73 81       	ldd	r23, Z+3	; 0x03
    1404:	04 17       	cp	r16, r20
    1406:	15 07       	cpc	r17, r21
    1408:	26 07       	cpc	r18, r22
    140a:	37 07       	cpc	r19, r23
    140c:	90 f7       	brcc	.-28     	; 0x13f2 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    140e:	14 96       	adiw	r26, 0x04	; 4
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	15 97       	sbiw	r26, 0x05	; 5
    1416:	fd 83       	std	Y+5, r31	; 0x05
    1418:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    141a:	d7 83       	std	Z+7, r29	; 0x07
    141c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    141e:	bf 83       	std	Y+7, r27	; 0x07
    1420:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1422:	15 96       	adiw	r26, 0x05	; 5
    1424:	dc 93       	st	X, r29
    1426:	ce 93       	st	-X, r28
    1428:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    142a:	9b 87       	std	Y+11, r25	; 0x0b
    142c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    142e:	fc 01       	movw	r30, r24
    1430:	20 81       	ld	r18, Z
    1432:	2f 5f       	subi	r18, 0xFF	; 255
    1434:	20 83       	st	Z, r18
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1446:	a2 85       	ldd	r26, Z+10	; 0x0a
    1448:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    144a:	c4 81       	ldd	r28, Z+4	; 0x04
    144c:	d5 81       	ldd	r29, Z+5	; 0x05
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	97 81       	ldd	r25, Z+7	; 0x07
    1452:	9f 83       	std	Y+7, r25	; 0x07
    1454:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1456:	c6 81       	ldd	r28, Z+6	; 0x06
    1458:	d7 81       	ldd	r29, Z+7	; 0x07
    145a:	84 81       	ldd	r24, Z+4	; 0x04
    145c:	95 81       	ldd	r25, Z+5	; 0x05
    145e:	9d 83       	std	Y+5, r25	; 0x05
    1460:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1462:	11 96       	adiw	r26, 0x01	; 1
    1464:	8d 91       	ld	r24, X+
    1466:	9c 91       	ld	r25, X
    1468:	12 97       	sbiw	r26, 0x02	; 2
    146a:	e8 17       	cp	r30, r24
    146c:	f9 07       	cpc	r31, r25
    146e:	31 f4       	brne	.+12     	; 0x147c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1470:	86 81       	ldd	r24, Z+6	; 0x06
    1472:	97 81       	ldd	r25, Z+7	; 0x07
    1474:	12 96       	adiw	r26, 0x02	; 2
    1476:	9c 93       	st	X, r25
    1478:	8e 93       	st	-X, r24
    147a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    147c:	13 86       	std	Z+11, r1	; 0x0b
    147e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1480:	8c 91       	ld	r24, X
    1482:	81 50       	subi	r24, 0x01	; 1
    1484:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1486:	8c 91       	ld	r24, X
}
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    148e:	a8 95       	wdr
    1490:	90 ec       	ldi	r25, 0xC0	; 192
    1492:	88 e1       	ldi	r24, 0x18	; 24
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	a8 95       	wdr
    149a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    14a4:	08 95       	ret

000014a6 <pxPortInitialiseStack>:
    14a6:	fc 01       	movw	r30, r24
    14a8:	60 83       	st	Z, r22
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	70 83       	st	Z, r23
    14ae:	31 97       	sbiw	r30, 0x01	; 1
    14b0:	10 82       	st	Z, r1
    14b2:	31 97       	sbiw	r30, 0x01	; 1
    14b4:	10 82       	st	Z, r1
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	20 e8       	ldi	r18, 0x80	; 128
    14ba:	20 83       	st	Z, r18
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	10 82       	st	Z, r1
    14c0:	31 97       	sbiw	r30, 0x01	; 1
    14c2:	10 82       	st	Z, r1
    14c4:	31 97       	sbiw	r30, 0x01	; 1
    14c6:	10 82       	st	Z, r1
    14c8:	77 97       	sbiw	r30, 0x17	; 23
    14ca:	40 83       	st	Z, r20
    14cc:	31 97       	sbiw	r30, 0x01	; 1
    14ce:	50 83       	st	Z, r21
    14d0:	86 97       	sbiw	r24, 0x26	; 38
    14d2:	08 95       	ret

000014d4 <xPortStartScheduler>:
    14d4:	dc df       	rcall	.-72     	; 0x148e <prvSetupTimerInterrupt>
    14d6:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    14da:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    14de:	cd 91       	ld	r28, X+
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	dd 91       	ld	r29, X+
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	ff 91       	pop	r31
    14e8:	ef 91       	pop	r30
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	df 90       	pop	r13
    150c:	cf 90       	pop	r12
    150e:	bf 90       	pop	r11
    1510:	af 90       	pop	r10
    1512:	9f 90       	pop	r9
    1514:	8f 90       	pop	r8
    1516:	7f 90       	pop	r7
    1518:	6f 90       	pop	r6
    151a:	5f 90       	pop	r5
    151c:	4f 90       	pop	r4
    151e:	3f 90       	pop	r3
    1520:	2f 90       	pop	r2
    1522:	1f 90       	pop	r1
    1524:	0f 90       	pop	r0
    1526:	0c be       	out	0x3c, r0	; 60
    1528:	0f 90       	pop	r0
    152a:	0b be       	out	0x3b, r0	; 59
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	08 95       	ret
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	08 95       	ret

00001538 <vPortYield>:
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	0f 92       	push	r0
    1540:	0b b6       	in	r0, 0x3b	; 59
    1542:	0f 92       	push	r0
    1544:	0c b6       	in	r0, 0x3c	; 60
    1546:	0f 92       	push	r0
    1548:	1f 92       	push	r1
    154a:	11 24       	eor	r1, r1
    154c:	2f 92       	push	r2
    154e:	3f 92       	push	r3
    1550:	4f 92       	push	r4
    1552:	5f 92       	push	r5
    1554:	6f 92       	push	r6
    1556:	7f 92       	push	r7
    1558:	8f 92       	push	r8
    155a:	9f 92       	push	r9
    155c:	af 92       	push	r10
    155e:	bf 92       	push	r11
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	4f 93       	push	r20
    1572:	5f 93       	push	r21
    1574:	6f 93       	push	r22
    1576:	7f 93       	push	r23
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
    1588:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    158c:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    1590:	0d b6       	in	r0, 0x3d	; 61
    1592:	0d 92       	st	X+, r0
    1594:	0e b6       	in	r0, 0x3e	; 62
    1596:	0d 92       	st	X+, r0
    1598:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <vTaskSwitchContext>
    159c:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    15a0:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    15a4:	cd 91       	ld	r28, X+
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	dd 91       	ld	r29, X+
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	9f 90       	pop	r9
    15da:	8f 90       	pop	r8
    15dc:	7f 90       	pop	r7
    15de:	6f 90       	pop	r6
    15e0:	5f 90       	pop	r5
    15e2:	4f 90       	pop	r4
    15e4:	3f 90       	pop	r3
    15e6:	2f 90       	pop	r2
    15e8:	1f 90       	pop	r1
    15ea:	0f 90       	pop	r0
    15ec:	0c be       	out	0x3c, r0	; 60
    15ee:	0f 90       	pop	r0
    15f0:	0b be       	out	0x3b, r0	; 59
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	08 95       	ret

000015fa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	0f 92       	push	r0
    1602:	0b b6       	in	r0, 0x3b	; 59
    1604:	0f 92       	push	r0
    1606:	0c b6       	in	r0, 0x3c	; 60
    1608:	0f 92       	push	r0
    160a:	1f 92       	push	r1
    160c:	11 24       	eor	r1, r1
    160e:	2f 92       	push	r2
    1610:	3f 92       	push	r3
    1612:	4f 92       	push	r4
    1614:	5f 92       	push	r5
    1616:	6f 92       	push	r6
    1618:	7f 92       	push	r7
    161a:	8f 92       	push	r8
    161c:	9f 92       	push	r9
    161e:	af 92       	push	r10
    1620:	bf 92       	push	r11
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    164e:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    1652:	0d b6       	in	r0, 0x3d	; 61
    1654:	0d 92       	st	X+, r0
    1656:	0e b6       	in	r0, 0x3e	; 62
    1658:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    165a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    165c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <xTaskIncrementTick>
    1660:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1662:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1666:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    166a:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    166e:	cd 91       	ld	r28, X+
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	dd 91       	ld	r29, X+
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	ff 91       	pop	r31
    1678:	ef 91       	pop	r30
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	5f 90       	pop	r5
    16ac:	4f 90       	pop	r4
    16ae:	3f 90       	pop	r3
    16b0:	2f 90       	pop	r2
    16b2:	1f 90       	pop	r1
    16b4:	0f 90       	pop	r0
    16b6:	0c be       	out	0x3c, r0	; 60
    16b8:	0f 90       	pop	r0
    16ba:	0b be       	out	0x3b, r0	; 59
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    16c2:	08 95       	ret

000016c4 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    16c4:	9a df       	rcall	.-204    	; 0x15fa <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    16c6:	18 95       	reti

000016c8 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    16c8:	dc 01       	movw	r26, r24
    16ca:	53 96       	adiw	r26, 0x13	; 19
    16cc:	2c 91       	ld	r18, X
    16ce:	53 97       	sbiw	r26, 0x13	; 19
    16d0:	22 23       	and	r18, r18
    16d2:	41 f0       	breq	.+16     	; 0x16e4 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    16d4:	5a 96       	adiw	r26, 0x1a	; 26
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	5b 97       	sbiw	r26, 0x1b	; 27
    16dc:	90 81       	ld	r25, Z
    16de:	8a e0       	ldi	r24, 0x0A	; 10
    16e0:	89 1b       	sub	r24, r25
    16e2:	08 95       	ret
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	08 95       	ret

000016e8 <prvIsQueueEmpty>:
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	0f 92       	push	r0
    16ee:	fc 01       	movw	r30, r24
    16f0:	86 8d       	ldd	r24, Z+30	; 0x1e
    16f2:	81 11       	cpse	r24, r1
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <prvIsQueueEmpty+0x12>
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <prvIsQueueEmpty+0x14>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	08 95       	ret

00001702 <prvIsQueueFull>:
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	0f 92       	push	r0
    1708:	fc 01       	movw	r30, r24
    170a:	26 8d       	ldd	r18, Z+30	; 0x1e
    170c:	87 8d       	ldd	r24, Z+31	; 0x1f
    170e:	28 13       	cpse	r18, r24
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <prvIsQueueFull+0x14>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <prvIsQueueFull+0x16>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	08 95       	ret

0000171e <prvCopyDataToQueue>:
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	ec 01       	movw	r28, r24
    1728:	04 2f       	mov	r16, r20
    172a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    172c:	48 a1       	ldd	r20, Y+32	; 0x20
    172e:	41 11       	cpse	r20, r1
    1730:	0c c0       	rjmp	.+24     	; 0x174a <prvCopyDataToQueue+0x2c>
    1732:	88 81       	ld	r24, Y
    1734:	99 81       	ldd	r25, Y+1	; 0x01
    1736:	89 2b       	or	r24, r25
    1738:	09 f0       	breq	.+2      	; 0x173c <prvCopyDataToQueue+0x1e>
    173a:	42 c0       	rjmp	.+132    	; 0x17c0 <prvCopyDataToQueue+0xa2>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskPriorityDisinherit>
    1744:	1d 82       	std	Y+5, r1	; 0x05
    1746:	1c 82       	std	Y+4, r1	; 0x04
    1748:	42 c0       	rjmp	.+132    	; 0x17ce <prvCopyDataToQueue+0xb0>
    174a:	01 11       	cpse	r16, r1
    174c:	17 c0       	rjmp	.+46     	; 0x177c <prvCopyDataToQueue+0x5e>
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	9b 81       	ldd	r25, Y+3	; 0x03
    1754:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <memcpy>
    1758:	28 a1       	ldd	r18, Y+32	; 0x20
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	82 0f       	add	r24, r18
    1760:	91 1d       	adc	r25, r1
    1762:	9b 83       	std	Y+3, r25	; 0x03
    1764:	8a 83       	std	Y+2, r24	; 0x02
    1766:	2c 81       	ldd	r18, Y+4	; 0x04
    1768:	3d 81       	ldd	r19, Y+5	; 0x05
    176a:	82 17       	cp	r24, r18
    176c:	93 07       	cpc	r25, r19
    176e:	50 f1       	brcs	.+84     	; 0x17c4 <prvCopyDataToQueue+0xa6>
    1770:	88 81       	ld	r24, Y
    1772:	99 81       	ldd	r25, Y+1	; 0x01
    1774:	9b 83       	std	Y+3, r25	; 0x03
    1776:	8a 83       	std	Y+2, r24	; 0x02
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	29 c0       	rjmp	.+82     	; 0x17ce <prvCopyDataToQueue+0xb0>
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <memcpy>
    1786:	88 a1       	ldd	r24, Y+32	; 0x20
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	91 95       	neg	r25
    178c:	81 95       	neg	r24
    178e:	91 09       	sbc	r25, r1
    1790:	2e 81       	ldd	r18, Y+6	; 0x06
    1792:	3f 81       	ldd	r19, Y+7	; 0x07
    1794:	28 0f       	add	r18, r24
    1796:	39 1f       	adc	r19, r25
    1798:	3f 83       	std	Y+7, r19	; 0x07
    179a:	2e 83       	std	Y+6, r18	; 0x06
    179c:	48 81       	ld	r20, Y
    179e:	59 81       	ldd	r21, Y+1	; 0x01
    17a0:	24 17       	cp	r18, r20
    17a2:	35 07       	cpc	r19, r21
    17a4:	30 f4       	brcc	.+12     	; 0x17b2 <prvCopyDataToQueue+0x94>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	82 0f       	add	r24, r18
    17ac:	93 1f       	adc	r25, r19
    17ae:	9f 83       	std	Y+7, r25	; 0x07
    17b0:	8e 83       	std	Y+6, r24	; 0x06
    17b2:	02 30       	cpi	r16, 0x02	; 2
    17b4:	49 f4       	brne	.+18     	; 0x17c8 <prvCopyDataToQueue+0xaa>
    17b6:	11 23       	and	r17, r17
    17b8:	49 f0       	breq	.+18     	; 0x17cc <prvCopyDataToQueue+0xae>
    17ba:	11 50       	subi	r17, 0x01	; 1
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <prvCopyDataToQueue+0xb0>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <prvCopyDataToQueue+0xb0>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <prvCopyDataToQueue+0xb0>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <prvCopyDataToQueue+0xb0>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	1f 5f       	subi	r17, 0xFF	; 255
    17d0:	1e 8f       	std	Y+30, r17	; 0x1e
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <prvCopyDataFromQueue>:
    17dc:	fc 01       	movw	r30, r24
    17de:	40 a1       	ldd	r20, Z+32	; 0x20
    17e0:	44 23       	and	r20, r20
    17e2:	a9 f0       	breq	.+42     	; 0x180e <prvCopyDataFromQueue+0x32>
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	26 81       	ldd	r18, Z+6	; 0x06
    17e8:	37 81       	ldd	r19, Z+7	; 0x07
    17ea:	24 0f       	add	r18, r20
    17ec:	35 1f       	adc	r19, r21
    17ee:	37 83       	std	Z+7, r19	; 0x07
    17f0:	26 83       	std	Z+6, r18	; 0x06
    17f2:	84 81       	ldd	r24, Z+4	; 0x04
    17f4:	95 81       	ldd	r25, Z+5	; 0x05
    17f6:	28 17       	cp	r18, r24
    17f8:	39 07       	cpc	r19, r25
    17fa:	20 f0       	brcs	.+8      	; 0x1804 <prvCopyDataFromQueue+0x28>
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	97 83       	std	Z+7, r25	; 0x07
    1802:	86 83       	std	Z+6, r24	; 0x06
    1804:	cb 01       	movw	r24, r22
    1806:	66 81       	ldd	r22, Z+6	; 0x06
    1808:	77 81       	ldd	r23, Z+7	; 0x07
    180a:	0c 94 c3 37 	jmp	0x6f86	; 0x6f86 <memcpy>
    180e:	08 95       	ret

00001810 <prvUnlockQueue>:
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	ec 01       	movw	r28, r24
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	0f 92       	push	r0
    181e:	1a a1       	ldd	r17, Y+34	; 0x22
    1820:	0b c0       	rjmp	.+22     	; 0x1838 <prvUnlockQueue+0x28>
    1822:	8b 89       	ldd	r24, Y+19	; 0x13
    1824:	88 23       	and	r24, r24
    1826:	51 f0       	breq	.+20     	; 0x183c <prvUnlockQueue+0x2c>
    1828:	ce 01       	movw	r24, r28
    182a:	43 96       	adiw	r24, 0x13	; 19
    182c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskRemoveFromEventList>
    1830:	81 11       	cpse	r24, r1
    1832:	0e 94 42 1a 	call	0x3484	; 0x3484 <vTaskMissedYield>
    1836:	11 50       	subi	r17, 0x01	; 1
    1838:	11 16       	cp	r1, r17
    183a:	9c f3       	brlt	.-26     	; 0x1822 <prvUnlockQueue+0x12>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	8a a3       	std	Y+34, r24	; 0x22
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	0f 92       	push	r0
    184a:	19 a1       	ldd	r17, Y+33	; 0x21
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <prvUnlockQueue+0x54>
    184e:	88 85       	ldd	r24, Y+8	; 0x08
    1850:	88 23       	and	r24, r24
    1852:	51 f0       	breq	.+20     	; 0x1868 <prvUnlockQueue+0x58>
    1854:	ce 01       	movw	r24, r28
    1856:	08 96       	adiw	r24, 0x08	; 8
    1858:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskRemoveFromEventList>
    185c:	81 11       	cpse	r24, r1
    185e:	0e 94 42 1a 	call	0x3484	; 0x3484 <vTaskMissedYield>
    1862:	11 50       	subi	r17, 0x01	; 1
    1864:	11 16       	cp	r1, r17
    1866:	9c f3       	brlt	.-26     	; 0x184e <prvUnlockQueue+0x3e>
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	89 a3       	std	Y+33, r24	; 0x21
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	08 95       	ret

00001878 <xQueueGenericReset>:
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	ec 01       	movw	r28, r24
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	0f 92       	push	r0
    1884:	e8 81       	ld	r30, Y
    1886:	f9 81       	ldd	r31, Y+1	; 0x01
    1888:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188a:	28 a1       	ldd	r18, Y+32	; 0x20
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	82 9f       	mul	r24, r18
    1892:	a0 01       	movw	r20, r0
    1894:	83 9f       	mul	r24, r19
    1896:	50 0d       	add	r21, r0
    1898:	92 9f       	mul	r25, r18
    189a:	50 0d       	add	r21, r0
    189c:	11 24       	eor	r1, r1
    189e:	4e 0f       	add	r20, r30
    18a0:	5f 1f       	adc	r21, r31
    18a2:	5d 83       	std	Y+5, r21	; 0x05
    18a4:	4c 83       	std	Y+4, r20	; 0x04
    18a6:	1e 8e       	std	Y+30, r1	; 0x1e
    18a8:	fb 83       	std	Y+3, r31	; 0x03
    18aa:	ea 83       	std	Y+2, r30	; 0x02
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	28 9f       	mul	r18, r24
    18b0:	a0 01       	movw	r20, r0
    18b2:	29 9f       	mul	r18, r25
    18b4:	50 0d       	add	r21, r0
    18b6:	38 9f       	mul	r19, r24
    18b8:	50 0d       	add	r21, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	cf 01       	movw	r24, r30
    18be:	84 0f       	add	r24, r20
    18c0:	95 1f       	adc	r25, r21
    18c2:	9f 83       	std	Y+7, r25	; 0x07
    18c4:	8e 83       	std	Y+6, r24	; 0x06
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	89 a3       	std	Y+33, r24	; 0x21
    18ca:	8a a3       	std	Y+34, r24	; 0x22
    18cc:	61 11       	cpse	r22, r1
    18ce:	0b c0       	rjmp	.+22     	; 0x18e6 <xQueueGenericReset+0x6e>
    18d0:	88 85       	ldd	r24, Y+8	; 0x08
    18d2:	88 23       	and	r24, r24
    18d4:	71 f0       	breq	.+28     	; 0x18f2 <xQueueGenericReset+0x7a>
    18d6:	ce 01       	movw	r24, r28
    18d8:	08 96       	adiw	r24, 0x08	; 8
    18da:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskRemoveFromEventList>
    18de:	88 23       	and	r24, r24
    18e0:	41 f0       	breq	.+16     	; 0x18f2 <xQueueGenericReset+0x7a>
    18e2:	2a de       	rcall	.-940    	; 0x1538 <vPortYield>
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <xQueueGenericReset+0x7a>
    18e6:	ce 01       	movw	r24, r28
    18e8:	08 96       	adiw	r24, 0x08	; 8
    18ea:	58 dd       	rcall	.-1360   	; 0x139c <vListInitialise>
    18ec:	ce 01       	movw	r24, r28
    18ee:	43 96       	adiw	r24, 0x13	; 19
    18f0:	55 dd       	rcall	.-1366   	; 0x139c <vListInitialise>
    18f2:	0f 90       	pop	r0
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <prvInitialiseNewQueue>:
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	f8 01       	movw	r30, r16
    1904:	61 11       	cpse	r22, r1
    1906:	03 c0       	rjmp	.+6      	; 0x190e <prvInitialiseNewQueue+0x10>
    1908:	11 83       	std	Z+1, r17	; 0x01
    190a:	00 83       	st	Z, r16
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <prvInitialiseNewQueue+0x14>
    190e:	51 83       	std	Z+1, r21	; 0x01
    1910:	40 83       	st	Z, r20
    1912:	87 8f       	std	Z+31, r24	; 0x1f
    1914:	60 a3       	std	Z+32, r22	; 0x20
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	cf 01       	movw	r24, r30
    191a:	ae df       	rcall	.-164    	; 0x1878 <xQueueGenericReset>
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <xQueueGenericCreate>:
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	f8 2e       	mov	r15, r24
    1932:	e6 2e       	mov	r14, r22
    1934:	d4 2e       	mov	r13, r20
    1936:	86 9f       	mul	r24, r22
    1938:	c0 01       	movw	r24, r0
    193a:	11 24       	eor	r1, r1
    193c:	83 96       	adiw	r24, 0x23	; 35
    193e:	48 dc       	rcall	.-1904   	; 0x11d0 <pvPortMalloc>
    1940:	ec 01       	movw	r28, r24
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	41 f0       	breq	.+16     	; 0x1956 <xQueueGenericCreate+0x34>
    1946:	8c 01       	movw	r16, r24
    1948:	2d 2d       	mov	r18, r13
    194a:	ac 01       	movw	r20, r24
    194c:	4d 5d       	subi	r20, 0xDD	; 221
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	6e 2d       	mov	r22, r14
    1952:	8f 2d       	mov	r24, r15
    1954:	d4 df       	rcall	.-88     	; 0x18fe <prvInitialiseNewQueue>
    1956:	ce 01       	movw	r24, r28
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	08 95       	ret

00001968 <xQueueGenericSend>:
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	29 97       	sbiw	r28, 0x09	; 9
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	7c 01       	movw	r14, r24
    198a:	6b 01       	movw	r12, r22
    198c:	2e 83       	std	Y+6, r18	; 0x06
    198e:	3f 83       	std	Y+7, r19	; 0x07
    1990:	48 87       	std	Y+8, r20	; 0x08
    1992:	59 87       	std	Y+9, r21	; 0x09
    1994:	10 e0       	ldi	r17, 0x00	; 0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	0f 92       	push	r0
    199c:	f7 01       	movw	r30, r14
    199e:	96 8d       	ldd	r25, Z+30	; 0x1e
    19a0:	87 8d       	ldd	r24, Z+31	; 0x1f
    19a2:	98 17       	cp	r25, r24
    19a4:	10 f0       	brcs	.+4      	; 0x19aa <xQueueGenericSend+0x42>
    19a6:	02 30       	cpi	r16, 0x02	; 2
    19a8:	b1 f4       	brne	.+44     	; 0x19d6 <xQueueGenericSend+0x6e>
    19aa:	40 2f       	mov	r20, r16
    19ac:	b6 01       	movw	r22, r12
    19ae:	c7 01       	movw	r24, r14
    19b0:	b6 de       	rcall	.-660    	; 0x171e <prvCopyDataToQueue>
    19b2:	f7 01       	movw	r30, r14
    19b4:	93 89       	ldd	r25, Z+19	; 0x13
    19b6:	99 23       	and	r25, r25
    19b8:	41 f0       	breq	.+16     	; 0x19ca <xQueueGenericSend+0x62>
    19ba:	c7 01       	movw	r24, r14
    19bc:	43 96       	adiw	r24, 0x13	; 19
    19be:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskRemoveFromEventList>
    19c2:	88 23       	and	r24, r24
    19c4:	21 f0       	breq	.+8      	; 0x19ce <xQueueGenericSend+0x66>
    19c6:	b8 dd       	rcall	.-1168   	; 0x1538 <vPortYield>
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <xQueueGenericSend+0x66>
    19ca:	81 11       	cpse	r24, r1
    19cc:	b5 dd       	rcall	.-1174   	; 0x1538 <vPortYield>
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	4c c0       	rjmp	.+152    	; 0x1a6e <xQueueGenericSend+0x106>
    19d6:	8e 81       	ldd	r24, Y+6	; 0x06
    19d8:	9f 81       	ldd	r25, Y+7	; 0x07
    19da:	a8 85       	ldd	r26, Y+8	; 0x08
    19dc:	b9 85       	ldd	r27, Y+9	; 0x09
    19de:	89 2b       	or	r24, r25
    19e0:	8a 2b       	or	r24, r26
    19e2:	8b 2b       	or	r24, r27
    19e4:	21 f4       	brne	.+8      	; 0x19ee <xQueueGenericSend+0x86>
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	40 c0       	rjmp	.+128    	; 0x1a6e <xQueueGenericSend+0x106>
    19ee:	11 11       	cpse	r17, r1
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <xQueueGenericSend+0x94>
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	0e 94 cb 19 	call	0x3396	; 0x3396 <vTaskInternalSetTimeOutState>
    19fa:	11 e0       	ldi	r17, 0x01	; 1
    19fc:	0f 90       	pop	r0
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	c7 d7       	rcall	.+3982   	; 0x2990 <vTaskSuspendAll>
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	0f 92       	push	r0
    1a08:	f7 01       	movw	r30, r14
    1a0a:	81 a1       	ldd	r24, Z+33	; 0x21
    1a0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <xQueueGenericSend+0xaa>
    1a10:	11 a2       	std	Z+33, r1	; 0x21
    1a12:	f7 01       	movw	r30, r14
    1a14:	82 a1       	ldd	r24, Z+34	; 0x22
    1a16:	8f 3f       	cpi	r24, 0xFF	; 255
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <xQueueGenericSend+0xb4>
    1a1a:	12 a2       	std	Z+34, r1	; 0x22
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	be 01       	movw	r22, r28
    1a22:	6a 5f       	subi	r22, 0xFA	; 250
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	ce 01       	movw	r24, r28
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <xTaskCheckForTimeOut>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	19 c0       	rjmp	.+50     	; 0x1a64 <xQueueGenericSend+0xfc>
    1a32:	c7 01       	movw	r24, r14
    1a34:	66 de       	rcall	.-820    	; 0x1702 <prvIsQueueFull>
    1a36:	88 23       	and	r24, r24
    1a38:	81 f0       	breq	.+32     	; 0x1a5a <xQueueGenericSend+0xf2>
    1a3a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a3c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a3e:	68 85       	ldd	r22, Y+8	; 0x08
    1a40:	79 85       	ldd	r23, Y+9	; 0x09
    1a42:	c7 01       	movw	r24, r14
    1a44:	08 96       	adiw	r24, 0x08	; 8
    1a46:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <vTaskPlaceOnEventList>
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	e1 de       	rcall	.-574    	; 0x1810 <prvUnlockQueue>
    1a4e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
    1a52:	81 11       	cpse	r24, r1
    1a54:	a0 cf       	rjmp	.-192    	; 0x1996 <xQueueGenericSend+0x2e>
    1a56:	70 dd       	rcall	.-1312   	; 0x1538 <vPortYield>
    1a58:	9e cf       	rjmp	.-196    	; 0x1996 <xQueueGenericSend+0x2e>
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	d9 de       	rcall	.-590    	; 0x1810 <prvUnlockQueue>
    1a5e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
    1a62:	99 cf       	rjmp	.-206    	; 0x1996 <xQueueGenericSend+0x2e>
    1a64:	c7 01       	movw	r24, r14
    1a66:	d4 de       	rcall	.-600    	; 0x1810 <prvUnlockQueue>
    1a68:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	29 96       	adiw	r28, 0x09	; 9
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	08 95       	ret

00001a8c <prvInitialiseMutex>:
    1a8c:	0f 93       	push	r16
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f0       	breq	.+26     	; 0x1aac <prvInitialiseMutex+0x20>
    1a92:	fc 01       	movw	r30, r24
    1a94:	15 82       	std	Z+5, r1	; 0x05
    1a96:	14 82       	std	Z+4, r1	; 0x04
    1a98:	11 82       	std	Z+1, r1	; 0x01
    1a9a:	10 82       	st	Z, r1
    1a9c:	16 82       	std	Z+6, r1	; 0x06
    1a9e:	00 e0       	ldi	r16, 0x00	; 0
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	5e df       	rcall	.-324    	; 0x1968 <xQueueGenericSend>
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <xQueueCreateMutex>:
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	33 df       	rcall	.-410    	; 0x1922 <xQueueGenericCreate>
    1abc:	ec 01       	movw	r28, r24
    1abe:	e6 df       	rcall	.-52     	; 0x1a8c <prvInitialiseMutex>
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <xQueueGenericSendFromISR>:
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	8a 01       	movw	r16, r20
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	56 8d       	ldd	r21, Z+30	; 0x1e
    1ada:	37 8d       	ldd	r19, Z+31	; 0x1f
    1adc:	53 17       	cp	r21, r19
    1ade:	10 f0       	brcs	.+4      	; 0x1ae4 <xQueueGenericSendFromISR+0x1c>
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	f9 f4       	brne	.+62     	; 0x1b22 <xQueueGenericSendFromISR+0x5a>
    1ae4:	42 2f       	mov	r20, r18
    1ae6:	78 01       	movw	r14, r16
    1ae8:	ec 01       	movw	r28, r24
    1aea:	1a a1       	ldd	r17, Y+34	; 0x22
    1aec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aee:	ce 01       	movw	r24, r28
    1af0:	16 de       	rcall	.-980    	; 0x171e <prvCopyDataToQueue>
    1af2:	1f 3f       	cpi	r17, 0xFF	; 255
    1af4:	81 f4       	brne	.+32     	; 0x1b16 <xQueueGenericSendFromISR+0x4e>
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	88 23       	and	r24, r24
    1afa:	a9 f0       	breq	.+42     	; 0x1b26 <xQueueGenericSendFromISR+0x5e>
    1afc:	ce 01       	movw	r24, r28
    1afe:	43 96       	adiw	r24, 0x13	; 19
    1b00:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskRemoveFromEventList>
    1b04:	88 23       	and	r24, r24
    1b06:	89 f0       	breq	.+34     	; 0x1b2a <xQueueGenericSendFromISR+0x62>
    1b08:	e1 14       	cp	r14, r1
    1b0a:	f1 04       	cpc	r15, r1
    1b0c:	81 f0       	breq	.+32     	; 0x1b2e <xQueueGenericSendFromISR+0x66>
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	f7 01       	movw	r30, r14
    1b12:	80 83       	st	Z, r24
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <xQueueGenericSendFromISR+0x68>
    1b16:	ff 24       	eor	r15, r15
    1b18:	f3 94       	inc	r15
    1b1a:	f1 0e       	add	r15, r17
    1b1c:	fa a2       	std	Y+34, r15	; 0x22
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <xQueueGenericSendFromISR+0x68>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <xQueueGenericSendFromISR+0x68>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <xQueueGenericSendFromISR+0x68>
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <xQueueGenericSendFromISR+0x68>
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	08 95       	ret

00001b3e <xQueueReceive>:
    1b3e:	cf 92       	push	r12
    1b40:	df 92       	push	r13
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	29 97       	sbiw	r28, 0x09	; 9
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	8c 01       	movw	r16, r24
    1b60:	6b 01       	movw	r12, r22
    1b62:	2e 83       	std	Y+6, r18	; 0x06
    1b64:	3f 83       	std	Y+7, r19	; 0x07
    1b66:	48 87       	std	Y+8, r20	; 0x08
    1b68:	59 87       	std	Y+9, r21	; 0x09
    1b6a:	e1 2c       	mov	r14, r1
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	0f 92       	push	r0
    1b72:	f8 01       	movw	r30, r16
    1b74:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1b76:	ff 20       	and	r15, r15
    1b78:	99 f0       	breq	.+38     	; 0x1ba0 <xQueueReceive+0x62>
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	2e de       	rcall	.-932    	; 0x17dc <prvCopyDataFromQueue>
    1b80:	fa 94       	dec	r15
    1b82:	f8 01       	movw	r30, r16
    1b84:	f6 8e       	std	Z+30, r15	; 0x1e
    1b86:	80 85       	ldd	r24, Z+8	; 0x08
    1b88:	88 23       	and	r24, r24
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <xQueueReceive+0x5a>
    1b8c:	c8 01       	movw	r24, r16
    1b8e:	08 96       	adiw	r24, 0x08	; 8
    1b90:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskRemoveFromEventList>
    1b94:	81 11       	cpse	r24, r1
    1b96:	d0 dc       	rcall	.-1632   	; 0x1538 <vPortYield>
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	4f c0       	rjmp	.+158    	; 0x1c3e <xQueueReceive+0x100>
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ba6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ba8:	89 2b       	or	r24, r25
    1baa:	8a 2b       	or	r24, r26
    1bac:	8b 2b       	or	r24, r27
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <xQueueReceive+0x7a>
    1bb0:	0f 90       	pop	r0
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	43 c0       	rjmp	.+134    	; 0x1c3e <xQueueReceive+0x100>
    1bb8:	e1 10       	cpse	r14, r1
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <xQueueReceive+0x8a>
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	0e 94 cb 19 	call	0x3396	; 0x3396 <vTaskInternalSetTimeOutState>
    1bc4:	ee 24       	eor	r14, r14
    1bc6:	e3 94       	inc	r14
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	e1 d6       	rcall	.+3522   	; 0x2990 <vTaskSuspendAll>
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	0f 92       	push	r0
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	81 a1       	ldd	r24, Z+33	; 0x21
    1bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bda:	09 f4       	brne	.+2      	; 0x1bde <xQueueReceive+0xa0>
    1bdc:	11 a2       	std	Z+33, r1	; 0x21
    1bde:	f8 01       	movw	r30, r16
    1be0:	82 a1       	ldd	r24, Z+34	; 0x22
    1be2:	8f 3f       	cpi	r24, 0xFF	; 255
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <xQueueReceive+0xaa>
    1be6:	12 a2       	std	Z+34, r1	; 0x22
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	be 01       	movw	r22, r28
    1bee:	6a 5f       	subi	r22, 0xFA	; 250
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <xTaskCheckForTimeOut>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	17 c0       	rjmp	.+46     	; 0x1c2c <xQueueReceive+0xee>
    1bfe:	c8 01       	movw	r24, r16
    1c00:	73 dd       	rcall	.-1306   	; 0x16e8 <prvIsQueueEmpty>
    1c02:	88 23       	and	r24, r24
    1c04:	79 f0       	breq	.+30     	; 0x1c24 <xQueueReceive+0xe6>
    1c06:	4e 81       	ldd	r20, Y+6	; 0x06
    1c08:	5f 81       	ldd	r21, Y+7	; 0x07
    1c0a:	68 85       	ldd	r22, Y+8	; 0x08
    1c0c:	79 85       	ldd	r23, Y+9	; 0x09
    1c0e:	c8 01       	movw	r24, r16
    1c10:	43 96       	adiw	r24, 0x13	; 19
    1c12:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <vTaskPlaceOnEventList>
    1c16:	c8 01       	movw	r24, r16
    1c18:	fb dd       	rcall	.-1034   	; 0x1810 <prvUnlockQueue>
    1c1a:	fa d7       	rcall	.+4084   	; 0x2c10 <xTaskResumeAll>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	a6 cf       	rjmp	.-180    	; 0x1b6c <xQueueReceive+0x2e>
    1c20:	8b dc       	rcall	.-1770   	; 0x1538 <vPortYield>
    1c22:	a4 cf       	rjmp	.-184    	; 0x1b6c <xQueueReceive+0x2e>
    1c24:	c8 01       	movw	r24, r16
    1c26:	f4 dd       	rcall	.-1048   	; 0x1810 <prvUnlockQueue>
    1c28:	f3 d7       	rcall	.+4070   	; 0x2c10 <xTaskResumeAll>
    1c2a:	a0 cf       	rjmp	.-192    	; 0x1b6c <xQueueReceive+0x2e>
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	f0 dd       	rcall	.-1056   	; 0x1810 <prvUnlockQueue>
    1c30:	ef d7       	rcall	.+4062   	; 0x2c10 <xTaskResumeAll>
    1c32:	c8 01       	movw	r24, r16
    1c34:	59 dd       	rcall	.-1358   	; 0x16e8 <prvIsQueueEmpty>
    1c36:	88 23       	and	r24, r24
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <xQueueReceive+0xfe>
    1c3a:	98 cf       	rjmp	.-208    	; 0x1b6c <xQueueReceive+0x2e>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	29 96       	adiw	r28, 0x09	; 9
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	08 95       	ret

00001c5c <xQueueSemaphoreTake>:
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	29 97       	sbiw	r28, 0x09	; 9
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	8c 01       	movw	r16, r24
    1c7a:	4e 83       	std	Y+6, r20	; 0x06
    1c7c:	5f 83       	std	Y+7, r21	; 0x07
    1c7e:	68 87       	std	Y+8, r22	; 0x08
    1c80:	79 87       	std	Y+9, r23	; 0x09
    1c82:	e1 2c       	mov	r14, r1
    1c84:	f1 2c       	mov	r15, r1
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	0f 92       	push	r0
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c90:	88 23       	and	r24, r24
    1c92:	c9 f0       	breq	.+50     	; 0x1cc6 <xQueueSemaphoreTake+0x6a>
    1c94:	81 50       	subi	r24, 0x01	; 1
    1c96:	86 8f       	std	Z+30, r24	; 0x1e
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	89 2b       	or	r24, r25
    1c9e:	29 f4       	brne	.+10     	; 0x1caa <xQueueSemaphoreTake+0x4e>
    1ca0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <pvTaskIncrementMutexHeldCount>
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	95 83       	std	Z+5, r25	; 0x05
    1ca8:	84 83       	std	Z+4, r24	; 0x04
    1caa:	f8 01       	movw	r30, r16
    1cac:	80 85       	ldd	r24, Z+8	; 0x08
    1cae:	88 23       	and	r24, r24
    1cb0:	31 f0       	breq	.+12     	; 0x1cbe <xQueueSemaphoreTake+0x62>
    1cb2:	c8 01       	movw	r24, r16
    1cb4:	08 96       	adiw	r24, 0x08	; 8
    1cb6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskRemoveFromEventList>
    1cba:	81 11       	cpse	r24, r1
    1cbc:	3d dc       	rcall	.-1926   	; 0x1538 <vPortYield>
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	6f c0       	rjmp	.+222    	; 0x1da4 <xQueueSemaphoreTake+0x148>
    1cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cca:	a8 85       	ldd	r26, Y+8	; 0x08
    1ccc:	b9 85       	ldd	r27, Y+9	; 0x09
    1cce:	89 2b       	or	r24, r25
    1cd0:	8a 2b       	or	r24, r26
    1cd2:	8b 2b       	or	r24, r27
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <xQueueSemaphoreTake+0x82>
    1cd6:	0f 90       	pop	r0
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	63 c0       	rjmp	.+198    	; 0x1da4 <xQueueSemaphoreTake+0x148>
    1cde:	f1 10       	cpse	r15, r1
    1ce0:	06 c0       	rjmp	.+12     	; 0x1cee <xQueueSemaphoreTake+0x92>
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	0e 94 cb 19 	call	0x3396	; 0x3396 <vTaskInternalSetTimeOutState>
    1cea:	ff 24       	eor	r15, r15
    1cec:	f3 94       	inc	r15
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	4e d6       	rcall	.+3228   	; 0x2990 <vTaskSuspendAll>
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	0f 92       	push	r0
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	81 a1       	ldd	r24, Z+33	; 0x21
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <xQueueSemaphoreTake+0xa8>
    1d02:	11 a2       	std	Z+33, r1	; 0x21
    1d04:	f8 01       	movw	r30, r16
    1d06:	82 a1       	ldd	r24, Z+34	; 0x22
    1d08:	8f 3f       	cpi	r24, 0xFF	; 255
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <xQueueSemaphoreTake+0xb2>
    1d0c:	12 a2       	std	Z+34, r1	; 0x22
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	be 01       	movw	r22, r28
    1d14:	6a 5f       	subi	r22, 0xFA	; 250
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <xTaskCheckForTimeOut>
    1d20:	81 11       	cpse	r24, r1
    1d22:	26 c0       	rjmp	.+76     	; 0x1d70 <xQueueSemaphoreTake+0x114>
    1d24:	c8 01       	movw	r24, r16
    1d26:	e0 dc       	rcall	.-1600   	; 0x16e8 <prvIsQueueEmpty>
    1d28:	88 23       	and	r24, r24
    1d2a:	f1 f0       	breq	.+60     	; 0x1d68 <xQueueSemaphoreTake+0x10c>
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	89 2b       	or	r24, r25
    1d34:	51 f4       	brne	.+20     	; 0x1d4a <xQueueSemaphoreTake+0xee>
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	0f 92       	push	r0
    1d3c:	84 81       	ldd	r24, Z+4	; 0x04
    1d3e:	95 81       	ldd	r25, Z+5	; 0x05
    1d40:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <xTaskPriorityInherit>
    1d44:	e8 2e       	mov	r14, r24
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d4c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d4e:	68 85       	ldd	r22, Y+8	; 0x08
    1d50:	79 85       	ldd	r23, Y+9	; 0x09
    1d52:	c8 01       	movw	r24, r16
    1d54:	43 96       	adiw	r24, 0x13	; 19
    1d56:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <vTaskPlaceOnEventList>
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	59 dd       	rcall	.-1358   	; 0x1810 <prvUnlockQueue>
    1d5e:	58 d7       	rcall	.+3760   	; 0x2c10 <xTaskResumeAll>
    1d60:	81 11       	cpse	r24, r1
    1d62:	91 cf       	rjmp	.-222    	; 0x1c86 <xQueueSemaphoreTake+0x2a>
    1d64:	e9 db       	rcall	.-2094   	; 0x1538 <vPortYield>
    1d66:	8f cf       	rjmp	.-226    	; 0x1c86 <xQueueSemaphoreTake+0x2a>
    1d68:	c8 01       	movw	r24, r16
    1d6a:	52 dd       	rcall	.-1372   	; 0x1810 <prvUnlockQueue>
    1d6c:	51 d7       	rcall	.+3746   	; 0x2c10 <xTaskResumeAll>
    1d6e:	8b cf       	rjmp	.-234    	; 0x1c86 <xQueueSemaphoreTake+0x2a>
    1d70:	c8 01       	movw	r24, r16
    1d72:	4e dd       	rcall	.-1380   	; 0x1810 <prvUnlockQueue>
    1d74:	4d d7       	rcall	.+3738   	; 0x2c10 <xTaskResumeAll>
    1d76:	c8 01       	movw	r24, r16
    1d78:	b7 dc       	rcall	.-1682   	; 0x16e8 <prvIsQueueEmpty>
    1d7a:	88 23       	and	r24, r24
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <xQueueSemaphoreTake+0x124>
    1d7e:	83 cf       	rjmp	.-250    	; 0x1c86 <xQueueSemaphoreTake+0x2a>
    1d80:	ee 20       	and	r14, r14
    1d82:	79 f0       	breq	.+30     	; 0x1da2 <xQueueSemaphoreTake+0x146>
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	0f 92       	push	r0
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	9d dc       	rcall	.-1734   	; 0x16c8 <prvGetDisinheritPriorityAfterTimeout>
    1d8e:	68 2f       	mov	r22, r24
    1d90:	f8 01       	movw	r30, r16
    1d92:	84 81       	ldd	r24, Z+4	; 0x04
    1d94:	95 81       	ldd	r25, Z+5	; 0x05
    1d96:	0e 94 3b 1b 	call	0x3676	; 0x3676 <vTaskPriorityDisinheritAfterTimeout>
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <xQueueSemaphoreTake+0x148>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	29 96       	adiw	r28, 0x09	; 9
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	08 95       	ret

00001dbe <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	0f 92       	push	r0
    1dca:	89 a1       	ldd	r24, Y+33	; 0x21
    1dcc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <vQueueWaitForMessageRestricted+0x14>
    1dd0:	19 a2       	std	Y+33, r1	; 0x21
    1dd2:	8a a1       	ldd	r24, Y+34	; 0x22
    1dd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <vQueueWaitForMessageRestricted+0x1c>
    1dd8:	1a a2       	std	Y+34, r1	; 0x22
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1dde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1de0:	81 11       	cpse	r24, r1
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1de4:	ce 01       	movw	r24, r28
    1de6:	43 96       	adiw	r24, 0x13	; 19
    1de8:	0e 94 2a 18 	call	0x3054	; 0x3054 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1dec:	ce 01       	movw	r24, r28
    1dee:	10 dd       	rcall	.-1504   	; 0x1810 <prvUnlockQueue>
    }
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret

00001df6 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1df6:	fc 01       	movw	r30, r24
    1df8:	44 81       	ldd	r20, Z+4	; 0x04
    1dfa:	55 81       	ldd	r21, Z+5	; 0x05
    1dfc:	22 81       	ldd	r18, Z+2	; 0x02
    1dfe:	33 81       	ldd	r19, Z+3	; 0x03
    1e00:	24 0f       	add	r18, r20
    1e02:	35 1f       	adc	r19, r21
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	b9 01       	movw	r22, r18
    1e0a:	68 1b       	sub	r22, r24
    1e0c:	79 0b       	sbc	r23, r25
    1e0e:	cb 01       	movw	r24, r22
    1e10:	64 17       	cp	r22, r20
    1e12:	75 07       	cpc	r23, r21
    1e14:	10 f0       	brcs	.+4      	; 0x1e1a <prvBytesInBuffer+0x24>
    1e16:	84 1b       	sub	r24, r20
    1e18:	95 0b       	sbc	r25, r21
    1e1a:	08 95       	ret

00001e1c <prvInitialiseNewStreamBuffer>:
    1e1c:	0f 93       	push	r16
    1e1e:	fc 01       	movw	r30, r24
    1e20:	8f e0       	ldi	r24, 0x0F	; 15
    1e22:	df 01       	movw	r26, r30
    1e24:	1d 92       	st	X+, r1
    1e26:	8a 95       	dec	r24
    1e28:	e9 f7       	brne	.-6      	; 0x1e24 <prvInitialiseNewStreamBuffer+0x8>
    1e2a:	75 87       	std	Z+13, r23	; 0x0d
    1e2c:	64 87       	std	Z+12, r22	; 0x0c
    1e2e:	55 83       	std	Z+5, r21	; 0x05
    1e30:	44 83       	std	Z+4, r20	; 0x04
    1e32:	37 83       	std	Z+7, r19	; 0x07
    1e34:	26 83       	std	Z+6, r18	; 0x06
    1e36:	06 87       	std	Z+14, r16	; 0x0e
    1e38:	0f 91       	pop	r16
    1e3a:	08 95       	ret

00001e3c <prvWriteBytesToBuffer>:
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	6c 01       	movw	r12, r24
    1e52:	5b 01       	movw	r10, r22
    1e54:	7a 01       	movw	r14, r20
    1e56:	fc 01       	movw	r30, r24
    1e58:	c2 81       	ldd	r28, Z+2	; 0x02
    1e5a:	d3 81       	ldd	r29, Z+3	; 0x03
    1e5c:	04 81       	ldd	r16, Z+4	; 0x04
    1e5e:	15 81       	ldd	r17, Z+5	; 0x05
    1e60:	0c 1b       	sub	r16, r28
    1e62:	1d 0b       	sbc	r17, r29
    1e64:	40 17       	cp	r20, r16
    1e66:	51 07       	cpc	r21, r17
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <prvWriteBytesToBuffer+0x30>
    1e6a:	8a 01       	movw	r16, r20
    1e6c:	f6 01       	movw	r30, r12
    1e6e:	84 85       	ldd	r24, Z+12	; 0x0c
    1e70:	95 85       	ldd	r25, Z+13	; 0x0d
    1e72:	a8 01       	movw	r20, r16
    1e74:	b5 01       	movw	r22, r10
    1e76:	8c 0f       	add	r24, r28
    1e78:	9d 1f       	adc	r25, r29
    1e7a:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <memcpy>
    1e7e:	0e 15       	cp	r16, r14
    1e80:	1f 05       	cpc	r17, r15
    1e82:	58 f4       	brcc	.+22     	; 0x1e9a <prvWriteBytesToBuffer+0x5e>
    1e84:	a7 01       	movw	r20, r14
    1e86:	40 1b       	sub	r20, r16
    1e88:	51 0b       	sbc	r21, r17
    1e8a:	b5 01       	movw	r22, r10
    1e8c:	60 0f       	add	r22, r16
    1e8e:	71 1f       	adc	r23, r17
    1e90:	f6 01       	movw	r30, r12
    1e92:	84 85       	ldd	r24, Z+12	; 0x0c
    1e94:	95 85       	ldd	r25, Z+13	; 0x0d
    1e96:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <memcpy>
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	8e 0d       	add	r24, r14
    1e9e:	9f 1d       	adc	r25, r15
    1ea0:	f6 01       	movw	r30, r12
    1ea2:	24 81       	ldd	r18, Z+4	; 0x04
    1ea4:	35 81       	ldd	r19, Z+5	; 0x05
    1ea6:	82 17       	cp	r24, r18
    1ea8:	93 07       	cpc	r25, r19
    1eaa:	10 f0       	brcs	.+4      	; 0x1eb0 <prvWriteBytesToBuffer+0x74>
    1eac:	82 1b       	sub	r24, r18
    1eae:	93 0b       	sbc	r25, r19
    1eb0:	f6 01       	movw	r30, r12
    1eb2:	93 83       	std	Z+3, r25	; 0x03
    1eb4:	82 83       	std	Z+2, r24	; 0x02
    1eb6:	c7 01       	movw	r24, r14
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	08 95       	ret

00001ece <prvWriteMessageToBuffer>:
    1ece:	cf 92       	push	r12
    1ed0:	df 92       	push	r13
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	1f 92       	push	r1
    1ee0:	1f 92       	push	r1
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	7c 01       	movw	r14, r24
    1ee8:	6b 01       	movw	r12, r22
    1eea:	5a 83       	std	Y+2, r21	; 0x02
    1eec:	49 83       	std	Y+1, r20	; 0x01
    1eee:	21 15       	cp	r18, r1
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	c1 f0       	breq	.+48     	; 0x1f24 <prvWriteMessageToBuffer+0x56>
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ef8:	80 fd       	sbrc	r24, 0
    1efa:	08 c0       	rjmp	.+16     	; 0x1f0c <prvWriteMessageToBuffer+0x3e>
    1efc:	42 17       	cp	r20, r18
    1efe:	53 07       	cpc	r21, r19
    1f00:	08 f4       	brcc	.+2      	; 0x1f04 <prvWriteMessageToBuffer+0x36>
    1f02:	9a 01       	movw	r18, r20
    1f04:	3a 83       	std	Y+2, r19	; 0x02
    1f06:	29 83       	std	Y+1, r18	; 0x01
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <prvWriteMessageToBuffer+0x5c>
    1f0c:	20 17       	cp	r18, r16
    1f0e:	31 07       	cpc	r19, r17
    1f10:	58 f0       	brcs	.+22     	; 0x1f28 <prvWriteMessageToBuffer+0x5a>
    1f12:	42 e0       	ldi	r20, 0x02	; 2
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	be 01       	movw	r22, r28
    1f18:	6f 5f       	subi	r22, 0xFF	; 255
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	c7 01       	movw	r24, r14
    1f1e:	8e df       	rcall	.-228    	; 0x1e3c <prvWriteBytesToBuffer>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	03 c0       	rjmp	.+6      	; 0x1f2a <prvWriteMessageToBuffer+0x5c>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <prvWriteMessageToBuffer+0x5c>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	88 23       	and	r24, r24
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <prvWriteMessageToBuffer+0x6c>
    1f2e:	49 81       	ldd	r20, Y+1	; 0x01
    1f30:	5a 81       	ldd	r21, Y+2	; 0x02
    1f32:	b6 01       	movw	r22, r12
    1f34:	c7 01       	movw	r24, r14
    1f36:	82 df       	rcall	.-252    	; 0x1e3c <prvWriteBytesToBuffer>
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <prvWriteMessageToBuffer+0x70>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	08 95       	ret

00001f54 <prvReadBytesFromBuffer>:
    1f54:	af 92       	push	r10
    1f56:	bf 92       	push	r11
    1f58:	cf 92       	push	r12
    1f5a:	df 92       	push	r13
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	7c 01       	movw	r14, r24
    1f6a:	5b 01       	movw	r10, r22
    1f6c:	e9 01       	movw	r28, r18
    1f6e:	42 17       	cp	r20, r18
    1f70:	53 07       	cpc	r21, r19
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <prvReadBytesFromBuffer+0x22>
    1f74:	ea 01       	movw	r28, r20
    1f76:	20 97       	sbiw	r28, 0x00	; 0
    1f78:	81 f1       	breq	.+96     	; 0x1fda <prvReadBytesFromBuffer+0x86>
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	00 81       	ld	r16, Z
    1f7e:	11 81       	ldd	r17, Z+1	; 0x01
    1f80:	84 81       	ldd	r24, Z+4	; 0x04
    1f82:	95 81       	ldd	r25, Z+5	; 0x05
    1f84:	80 1b       	sub	r24, r16
    1f86:	91 0b       	sbc	r25, r17
    1f88:	6e 01       	movw	r12, r28
    1f8a:	8c 17       	cp	r24, r28
    1f8c:	9d 07       	cpc	r25, r29
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <prvReadBytesFromBuffer+0x3e>
    1f90:	6c 01       	movw	r12, r24
    1f92:	f7 01       	movw	r30, r14
    1f94:	64 85       	ldd	r22, Z+12	; 0x0c
    1f96:	75 85       	ldd	r23, Z+13	; 0x0d
    1f98:	60 0f       	add	r22, r16
    1f9a:	71 1f       	adc	r23, r17
    1f9c:	a6 01       	movw	r20, r12
    1f9e:	c5 01       	movw	r24, r10
    1fa0:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <memcpy>
    1fa4:	cc 16       	cp	r12, r28
    1fa6:	dd 06       	cpc	r13, r29
    1fa8:	58 f4       	brcc	.+22     	; 0x1fc0 <prvReadBytesFromBuffer+0x6c>
    1faa:	ae 01       	movw	r20, r28
    1fac:	4c 19       	sub	r20, r12
    1fae:	5d 09       	sbc	r21, r13
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	64 85       	ldd	r22, Z+12	; 0x0c
    1fb4:	75 85       	ldd	r23, Z+13	; 0x0d
    1fb6:	c5 01       	movw	r24, r10
    1fb8:	8c 0d       	add	r24, r12
    1fba:	9d 1d       	adc	r25, r13
    1fbc:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <memcpy>
    1fc0:	0c 0f       	add	r16, r28
    1fc2:	1d 1f       	adc	r17, r29
    1fc4:	f7 01       	movw	r30, r14
    1fc6:	84 81       	ldd	r24, Z+4	; 0x04
    1fc8:	95 81       	ldd	r25, Z+5	; 0x05
    1fca:	08 17       	cp	r16, r24
    1fcc:	19 07       	cpc	r17, r25
    1fce:	10 f0       	brcs	.+4      	; 0x1fd4 <prvReadBytesFromBuffer+0x80>
    1fd0:	08 1b       	sub	r16, r24
    1fd2:	19 0b       	sbc	r17, r25
    1fd4:	f7 01       	movw	r30, r14
    1fd6:	11 83       	std	Z+1, r17	; 0x01
    1fd8:	00 83       	st	Z, r16
    1fda:	ce 01       	movw	r24, r28
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	cf 90       	pop	r12
    1fec:	bf 90       	pop	r11
    1fee:	af 90       	pop	r10
    1ff0:	08 95       	ret

00001ff2 <prvReadMessageFromBuffer>:
    1ff2:	6f 92       	push	r6
    1ff4:	7f 92       	push	r7
    1ff6:	8f 92       	push	r8
    1ff8:	9f 92       	push	r9
    1ffa:	af 92       	push	r10
    1ffc:	bf 92       	push	r11
    1ffe:	cf 92       	push	r12
    2000:	df 92       	push	r13
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	1f 92       	push	r1
    2010:	1f 92       	push	r1
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	6c 01       	movw	r12, r24
    2018:	4b 01       	movw	r8, r22
    201a:	5a 01       	movw	r10, r20
    201c:	79 01       	movw	r14, r18
    201e:	01 15       	cp	r16, r1
    2020:	11 05       	cpc	r17, r1
    2022:	b1 f0       	breq	.+44     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    2024:	fc 01       	movw	r30, r24
    2026:	60 80       	ld	r6, Z
    2028:	71 80       	ldd	r7, Z+1	; 0x01
    202a:	a8 01       	movw	r20, r16
    202c:	be 01       	movw	r22, r28
    202e:	6f 5f       	subi	r22, 0xFF	; 255
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	90 df       	rcall	.-224    	; 0x1f54 <prvReadBytesFromBuffer>
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	e0 1a       	sub	r14, r16
    203a:	f1 0a       	sbc	r15, r17
    203c:	a8 16       	cp	r10, r24
    203e:	b9 06       	cpc	r11, r25
    2040:	30 f4       	brcc	.+12     	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    2042:	f6 01       	movw	r30, r12
    2044:	71 82       	std	Z+1, r7	; 0x01
    2046:	60 82       	st	Z, r6
    2048:	a1 2c       	mov	r10, r1
    204a:	b1 2c       	mov	r11, r1
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    204e:	5c 01       	movw	r10, r24
    2050:	97 01       	movw	r18, r14
    2052:	a5 01       	movw	r20, r10
    2054:	b4 01       	movw	r22, r8
    2056:	c6 01       	movw	r24, r12
    2058:	7d df       	rcall	.-262    	; 0x1f54 <prvReadBytesFromBuffer>
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	bf 90       	pop	r11
    2070:	af 90       	pop	r10
    2072:	9f 90       	pop	r9
    2074:	8f 90       	pop	r8
    2076:	7f 90       	pop	r7
    2078:	6f 90       	pop	r6
    207a:	08 95       	ret

0000207c <xStreamBufferGenericCreate>:
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	ec 01       	movw	r28, r24
    208c:	6b 01       	movw	r12, r22
    208e:	41 30       	cpi	r20, 0x01	; 1
    2090:	11 f4       	brne	.+4      	; 0x2096 <xStreamBufferGenericCreate+0x1a>
    2092:	01 e0       	ldi	r16, 0x01	; 1
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <xStreamBufferGenericCreate+0x1c>
    2096:	00 e0       	ldi	r16, 0x00	; 0
    2098:	c1 14       	cp	r12, r1
    209a:	d1 04       	cpc	r13, r1
    209c:	19 f4       	brne	.+6      	; 0x20a4 <xStreamBufferGenericCreate+0x28>
    209e:	cc 24       	eor	r12, r12
    20a0:	c3 94       	inc	r12
    20a2:	d1 2c       	mov	r13, r1
    20a4:	ce 01       	movw	r24, r28
    20a6:	40 96       	adiw	r24, 0x10	; 16
    20a8:	c8 17       	cp	r28, r24
    20aa:	d9 07       	cpc	r29, r25
    20ac:	20 f4       	brcc	.+8      	; 0x20b6 <xStreamBufferGenericCreate+0x3a>
    20ae:	21 96       	adiw	r28, 0x01	; 1
    20b0:	8f d8       	rcall	.-3810   	; 0x11d0 <pvPortMalloc>
    20b2:	7c 01       	movw	r14, r24
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <xStreamBufferGenericCreate+0x3e>
    20b6:	e1 2c       	mov	r14, r1
    20b8:	f1 2c       	mov	r15, r1
    20ba:	e1 14       	cp	r14, r1
    20bc:	f1 04       	cpc	r15, r1
    20be:	39 f0       	breq	.+14     	; 0x20ce <xStreamBufferGenericCreate+0x52>
    20c0:	96 01       	movw	r18, r12
    20c2:	ae 01       	movw	r20, r28
    20c4:	b7 01       	movw	r22, r14
    20c6:	61 5f       	subi	r22, 0xF1	; 241
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	c7 01       	movw	r24, r14
    20cc:	a7 de       	rcall	.-690    	; 0x1e1c <prvInitialiseNewStreamBuffer>
    20ce:	c7 01       	movw	r24, r14
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	df 90       	pop	r13
    20dc:	cf 90       	pop	r12
    20de:	08 95       	ret

000020e0 <xStreamBufferReset>:
    20e0:	0f 93       	push	r16
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	0f 92       	push	r0
    20e8:	fc 01       	movw	r30, r24
    20ea:	20 85       	ldd	r18, Z+8	; 0x08
    20ec:	31 85       	ldd	r19, Z+9	; 0x09
    20ee:	23 2b       	or	r18, r19
    20f0:	71 f4       	brne	.+28     	; 0x210e <xStreamBufferReset+0x2e>
    20f2:	22 85       	ldd	r18, Z+10	; 0x0a
    20f4:	33 85       	ldd	r19, Z+11	; 0x0b
    20f6:	23 2b       	or	r18, r19
    20f8:	61 f4       	brne	.+24     	; 0x2112 <xStreamBufferReset+0x32>
    20fa:	26 81       	ldd	r18, Z+6	; 0x06
    20fc:	37 81       	ldd	r19, Z+7	; 0x07
    20fe:	44 81       	ldd	r20, Z+4	; 0x04
    2100:	55 81       	ldd	r21, Z+5	; 0x05
    2102:	64 85       	ldd	r22, Z+12	; 0x0c
    2104:	75 85       	ldd	r23, Z+13	; 0x0d
    2106:	06 85       	ldd	r16, Z+14	; 0x0e
    2108:	89 de       	rcall	.-750    	; 0x1e1c <prvInitialiseNewStreamBuffer>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <xStreamBufferReset+0x34>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <xStreamBufferReset+0x34>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret

0000211c <xStreamBufferSpacesAvailable>:
    211c:	fc 01       	movw	r30, r24
    211e:	24 81       	ldd	r18, Z+4	; 0x04
    2120:	35 81       	ldd	r19, Z+5	; 0x05
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	82 0f       	add	r24, r18
    2128:	93 1f       	adc	r25, r19
    212a:	42 81       	ldd	r20, Z+2	; 0x02
    212c:	53 81       	ldd	r21, Z+3	; 0x03
    212e:	84 1b       	sub	r24, r20
    2130:	95 0b       	sbc	r25, r21
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	82 17       	cp	r24, r18
    2136:	93 07       	cpc	r25, r19
    2138:	10 f0       	brcs	.+4      	; 0x213e <xStreamBufferSpacesAvailable+0x22>
    213a:	82 1b       	sub	r24, r18
    213c:	93 0b       	sbc	r25, r19
    213e:	08 95       	ret

00002140 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2140:	2f 92       	push	r2
    2142:	3f 92       	push	r3
    2144:	4f 92       	push	r4
    2146:	5f 92       	push	r5
    2148:	6f 92       	push	r6
    214a:	7f 92       	push	r7
    214c:	8f 92       	push	r8
    214e:	9f 92       	push	r9
    2150:	af 92       	push	r10
    2152:	bf 92       	push	r11
    2154:	cf 92       	push	r12
    2156:	df 92       	push	r13
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	2b 97       	sbiw	r28, 0x0b	; 11
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	4c 01       	movw	r8, r24
    2176:	7b 87       	std	Y+11, r23	; 0x0b
    2178:	6a 87       	std	Y+10, r22	; 0x0a
    217a:	1a 01       	movw	r2, r20
    217c:	0e 83       	std	Y+6, r16	; 0x06
    217e:	1f 83       	std	Y+7, r17	; 0x07
    2180:	28 87       	std	Y+8, r18	; 0x08
    2182:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2184:	fc 01       	movw	r30, r24
    2186:	84 81       	ldd	r24, Z+4	; 0x04
    2188:	95 81       	ldd	r25, Z+5	; 0x05
    218a:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    218c:	26 85       	ldd	r18, Z+14	; 0x0e
    218e:	20 ff       	sbrs	r18, 0
    2190:	0c c0       	rjmp	.+24     	; 0x21aa <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2192:	2a 01       	movw	r4, r20
    2194:	f2 e0       	ldi	r31, 0x02	; 2
    2196:	4f 0e       	add	r4, r31
    2198:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    219a:	84 15       	cp	r24, r4
    219c:	95 05       	cpc	r25, r5
    219e:	58 f4       	brcc	.+22     	; 0x21b6 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    21a0:	1e 82       	std	Y+6, r1	; 0x06
    21a2:	1f 82       	std	Y+7, r1	; 0x07
    21a4:	18 86       	std	Y+8, r1	; 0x08
    21a6:	19 86       	std	Y+9, r1	; 0x09
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    21aa:	84 17       	cp	r24, r20
    21ac:	95 07       	cpc	r25, r21
    21ae:	10 f0       	brcs	.+4      	; 0x21b4 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    21b0:	2a 01       	movw	r4, r20
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    21b4:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    21b6:	8e 81       	ldd	r24, Y+6	; 0x06
    21b8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ba:	a8 85       	ldd	r26, Y+8	; 0x08
    21bc:	b9 85       	ldd	r27, Y+9	; 0x09
    21be:	89 2b       	or	r24, r25
    21c0:	8a 2b       	or	r24, r26
    21c2:	8b 2b       	or	r24, r27
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <xStreamBufferSend+0x88>
    21c6:	38 c0       	rjmp	.+112    	; 0x2238 <__stack+0x39>
    {
        vTaskSetTimeOutState( &xTimeOut );
    21c8:	ce 01       	movw	r24, r28
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	0e 94 b5 19 	call	0x336a	; 0x336a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    21d6:	c4 01       	movw	r24, r8
    21d8:	a1 df       	rcall	.-190    	; 0x211c <xStreamBufferSpacesAvailable>
    21da:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    21dc:	84 15       	cp	r24, r4
    21de:	95 05       	cpc	r25, r5
    21e0:	40 f5       	brcc	.+80     	; 0x2232 <__stack+0x33>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    21ec:	0e 94 46 1a 	call	0x348c	; 0x348c <xTaskGetCurrentTaskHandle>
    21f0:	f4 01       	movw	r30, r8
    21f2:	93 87       	std	Z+11, r25	; 0x0b
    21f4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    21fa:	ae 80       	ldd	r10, Y+6	; 0x06
    21fc:	bf 80       	ldd	r11, Y+7	; 0x07
    21fe:	c8 84       	ldd	r12, Y+8	; 0x08
    2200:	d9 84       	ldd	r13, Y+9	; 0x09
    2202:	e1 2c       	mov	r14, r1
    2204:	f1 2c       	mov	r15, r1
    2206:	00 e0       	ldi	r16, 0x00	; 0
    2208:	10 e0       	ldi	r17, 0x00	; 0
    220a:	98 01       	movw	r18, r16
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	ba 01       	movw	r22, r20
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	0e 94 de 1b 	call	0x37bc	; 0x37bc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2218:	f4 01       	movw	r30, r8
    221a:	13 86       	std	Z+11, r1	; 0x0b
    221c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    221e:	be 01       	movw	r22, r28
    2220:	6a 5f       	subi	r22, 0xFA	; 250
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	ce 01       	movw	r24, r28
    2226:	01 96       	adiw	r24, 0x01	; 1
    2228:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <xTaskCheckForTimeOut>
    222c:	88 23       	and	r24, r24
    222e:	81 f2       	breq	.-96     	; 0x21d0 <xStreamBufferSend+0x90>
    2230:	05 c0       	rjmp	.+10     	; 0x223c <__stack+0x3d>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2232:	0f 90       	pop	r0
    2234:	0f be       	out	0x3f, r0	; 63
                    break;
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__stack+0x3d>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    2238:	61 2c       	mov	r6, r1
    223a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    223c:	61 14       	cp	r6, r1
    223e:	71 04       	cpc	r7, r1
    2240:	19 f4       	brne	.+6      	; 0x2248 <__stack+0x49>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2242:	c4 01       	movw	r24, r8
    2244:	6b df       	rcall	.-298    	; 0x211c <xStreamBufferSpacesAvailable>
    2246:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2248:	82 01       	movw	r16, r4
    224a:	93 01       	movw	r18, r6
    224c:	a1 01       	movw	r20, r2
    224e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2250:	7b 85       	ldd	r23, Y+11	; 0x0b
    2252:	c4 01       	movw	r24, r8
    2254:	3c de       	rcall	.-904    	; 0x1ece <prvWriteMessageToBuffer>
    2256:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    2258:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    225a:	e9 f0       	breq	.+58     	; 0x2296 <__stack+0x97>
    225c:	c4 01       	movw	r24, r8
    225e:	cb dd       	rcall	.-1130   	; 0x1df6 <prvBytesInBuffer>
    2260:	f4 01       	movw	r30, r8
    2262:	26 81       	ldd	r18, Z+6	; 0x06
    2264:	37 81       	ldd	r19, Z+7	; 0x07
    2266:	82 17       	cp	r24, r18
    2268:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    226a:	a8 f0       	brcs	.+42     	; 0x2296 <__stack+0x97>
    226c:	91 d3       	rcall	.+1826   	; 0x2990 <vTaskSuspendAll>
    226e:	f4 01       	movw	r30, r8
    2270:	80 85       	ldd	r24, Z+8	; 0x08
    2272:	91 85       	ldd	r25, Z+9	; 0x09
    2274:	89 2b       	or	r24, r25
    2276:	71 f0       	breq	.+28     	; 0x2294 <__stack+0x95>
    2278:	80 85       	ldd	r24, Z+8	; 0x08
    227a:	91 85       	ldd	r25, Z+9	; 0x09
    227c:	e1 2c       	mov	r14, r1
    227e:	f1 2c       	mov	r15, r1
    2280:	00 e0       	ldi	r16, 0x00	; 0
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	a9 01       	movw	r20, r18
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskGenericNotify>
    228e:	f4 01       	movw	r30, r8
    2290:	11 86       	std	Z+9, r1	; 0x09
    2292:	10 86       	std	Z+8, r1	; 0x08
    2294:	bd d4       	rcall	.+2426   	; 0x2c10 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    2296:	c6 01       	movw	r24, r12
    2298:	2b 96       	adiw	r28, 0x0b	; 11
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	bf 90       	pop	r11
    22b6:	af 90       	pop	r10
    22b8:	9f 90       	pop	r9
    22ba:	8f 90       	pop	r8
    22bc:	7f 90       	pop	r7
    22be:	6f 90       	pop	r6
    22c0:	5f 90       	pop	r5
    22c2:	4f 90       	pop	r4
    22c4:	3f 90       	pop	r3
    22c6:	2f 90       	pop	r2
    22c8:	08 95       	ret

000022ca <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	ec 01       	movw	r28, r24
    22e0:	7b 01       	movw	r14, r22
    22e2:	5a 01       	movw	r10, r20
    22e4:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    22e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22e8:	80 ff       	sbrs	r24, 0
    22ea:	04 c0       	rjmp	.+8      	; 0x22f4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    22ec:	8a 01       	movw	r16, r20
    22ee:	0e 5f       	subi	r16, 0xFE	; 254
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    22f4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    22f6:	ce 01       	movw	r24, r28
    22f8:	11 df       	rcall	.-478    	; 0x211c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    22fa:	9c 01       	movw	r18, r24
    22fc:	a5 01       	movw	r20, r10
    22fe:	b7 01       	movw	r22, r14
    2300:	ce 01       	movw	r24, r28
    2302:	e5 dd       	rcall	.-1078   	; 0x1ece <prvWriteMessageToBuffer>
    2304:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    2306:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2308:	c1 f0       	breq	.+48     	; 0x233a <xStreamBufferSendFromISR+0x70>
    230a:	ce 01       	movw	r24, r28
    230c:	74 dd       	rcall	.-1304   	; 0x1df6 <prvBytesInBuffer>
    230e:	2e 81       	ldd	r18, Y+6	; 0x06
    2310:	3f 81       	ldd	r19, Y+7	; 0x07
    2312:	82 17       	cp	r24, r18
    2314:	93 07       	cpc	r25, r19
    2316:	88 f0       	brcs	.+34     	; 0x233a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2318:	88 85       	ldd	r24, Y+8	; 0x08
    231a:	99 85       	ldd	r25, Y+9	; 0x09
    231c:	89 2b       	or	r24, r25
    231e:	69 f0       	breq	.+26     	; 0x233a <xStreamBufferSendFromISR+0x70>
    2320:	88 85       	ldd	r24, Y+8	; 0x08
    2322:	99 85       	ldd	r25, Y+9	; 0x09
    2324:	e1 2c       	mov	r14, r1
    2326:	f1 2c       	mov	r15, r1
    2328:	00 e0       	ldi	r16, 0x00	; 0
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	a9 01       	movw	r20, r18
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <xTaskGenericNotifyFromISR>
    2336:	19 86       	std	Y+9, r1	; 0x09
    2338:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    233a:	c5 01       	movw	r24, r10
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	ff 90       	pop	r15
    2346:	ef 90       	pop	r14
    2348:	df 90       	pop	r13
    234a:	cf 90       	pop	r12
    234c:	bf 90       	pop	r11
    234e:	af 90       	pop	r10
    2350:	08 95       	ret

00002352 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2352:	4f 92       	push	r4
    2354:	5f 92       	push	r5
    2356:	6f 92       	push	r6
    2358:	7f 92       	push	r7
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
    2374:	2b 01       	movw	r4, r22
    2376:	3a 01       	movw	r6, r20
    2378:	58 01       	movw	r10, r16
    237a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    237c:	8e 85       	ldd	r24, Y+14	; 0x0e
    237e:	80 ff       	sbrs	r24, 0
    2380:	05 c0       	rjmp	.+10     	; 0x238c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2382:	68 94       	set
    2384:	88 24       	eor	r8, r8
    2386:	81 f8       	bld	r8, 1
    2388:	91 2c       	mov	r9, r1
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    238c:	81 2c       	mov	r8, r1
    238e:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2390:	a1 14       	cp	r10, r1
    2392:	b1 04       	cpc	r11, r1
    2394:	c1 04       	cpc	r12, r1
    2396:	d1 04       	cpc	r13, r1
    2398:	41 f1       	breq	.+80     	; 0x23ea <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    23a0:	ce 01       	movw	r24, r28
    23a2:	29 dd       	rcall	.-1454   	; 0x1df6 <prvBytesInBuffer>
    23a4:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    23a6:	88 16       	cp	r8, r24
    23a8:	99 06       	cpc	r9, r25
    23aa:	48 f0       	brcs	.+18     	; 0x23be <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    23b6:	0e 94 46 1a 	call	0x348c	; 0x348c <xTaskGetCurrentTaskHandle>
    23ba:	99 87       	std	Y+9, r25	; 0x09
    23bc:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    23be:	0f 90       	pop	r0
    23c0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    23c2:	8e 14       	cp	r8, r14
    23c4:	9f 04       	cpc	r9, r15
    23c6:	a0 f0       	brcs	.+40     	; 0x23f0 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    23c8:	e1 2c       	mov	r14, r1
    23ca:	f1 2c       	mov	r15, r1
    23cc:	00 e0       	ldi	r16, 0x00	; 0
    23ce:	10 e0       	ldi	r17, 0x00	; 0
    23d0:	98 01       	movw	r18, r16
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	ba 01       	movw	r22, r20
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	0e 94 de 1b 	call	0x37bc	; 0x37bc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    23de:	19 86       	std	Y+9, r1	; 0x09
    23e0:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    23e2:	ce 01       	movw	r24, r28
    23e4:	08 dd       	rcall	.-1520   	; 0x1df6 <prvBytesInBuffer>
    23e6:	7c 01       	movw	r14, r24
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    23ea:	ce 01       	movw	r24, r28
    23ec:	04 dd       	rcall	.-1528   	; 0x1df6 <prvBytesInBuffer>
    23ee:	7c 01       	movw	r14, r24
    23f0:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    23f2:	9f 04       	cpc	r9, r15
    23f4:	e8 f4       	brcc	.+58     	; 0x2430 <xStreamBufferReceive+0xde>
    23f6:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    23f8:	97 01       	movw	r18, r14
    23fa:	a3 01       	movw	r20, r6
    23fc:	b2 01       	movw	r22, r4
    23fe:	ce 01       	movw	r24, r28
    2400:	f8 dd       	rcall	.-1040   	; 0x1ff2 <prvReadMessageFromBuffer>
    2402:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2404:	89 2b       	or	r24, r25
    2406:	b1 f0       	breq	.+44     	; 0x2434 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2408:	c3 d2       	rcall	.+1414   	; 0x2990 <vTaskSuspendAll>
    240a:	8a 85       	ldd	r24, Y+10	; 0x0a
    240c:	9b 85       	ldd	r25, Y+11	; 0x0b
    240e:	89 2b       	or	r24, r25
    2410:	69 f0       	breq	.+26     	; 0x242c <xStreamBufferReceive+0xda>
    2412:	8a 85       	ldd	r24, Y+10	; 0x0a
    2414:	9b 85       	ldd	r25, Y+11	; 0x0b
    2416:	e1 2c       	mov	r14, r1
    2418:	f1 2c       	mov	r15, r1
    241a:	00 e0       	ldi	r16, 0x00	; 0
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	a9 01       	movw	r20, r18
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskGenericNotify>
    2428:	1b 86       	std	Y+11, r1	; 0x0b
    242a:	1a 86       	std	Y+10, r1	; 0x0a
    242c:	f1 d3       	rcall	.+2018   	; 0x2c10 <xTaskResumeAll>
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <xStreamBufferReceive+0xe2>
    2430:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2432:	d1 2c       	mov	r13, r1
    2434:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	9f 90       	pop	r9
    244c:	8f 90       	pop	r8
    244e:	7f 90       	pop	r7
    2450:	6f 90       	pop	r6
    2452:	5f 90       	pop	r5
    2454:	4f 90       	pop	r4
    2456:	08 95       	ret

00002458 <prvResetNextTaskUnblockTime>:
    2458:	e0 91 51 14 	lds	r30, 0x1451	; 0x801451 <pxDelayedTaskList>
    245c:	f0 91 52 14 	lds	r31, 0x1452	; 0x801452 <pxDelayedTaskList+0x1>
    2460:	80 81       	ld	r24, Z
    2462:	81 11       	cpse	r24, r1
    2464:	0c c0       	rjmp	.+24     	; 0x247e <prvResetNextTaskUnblockTime+0x26>
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	9f ef       	ldi	r25, 0xFF	; 255
    246a:	dc 01       	movw	r26, r24
    246c:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <xNextTaskUnblockTime>
    2470:	90 93 1c 14 	sts	0x141C, r25	; 0x80141c <xNextTaskUnblockTime+0x1>
    2474:	a0 93 1d 14 	sts	0x141D, r26	; 0x80141d <xNextTaskUnblockTime+0x2>
    2478:	b0 93 1e 14 	sts	0x141E, r27	; 0x80141e <xNextTaskUnblockTime+0x3>
    247c:	08 95       	ret
    247e:	e0 91 51 14 	lds	r30, 0x1451	; 0x801451 <pxDelayedTaskList>
    2482:	f0 91 52 14 	lds	r31, 0x1452	; 0x801452 <pxDelayedTaskList+0x1>
    2486:	07 80       	ldd	r0, Z+7	; 0x07
    2488:	f0 85       	ldd	r31, Z+8	; 0x08
    248a:	e0 2d       	mov	r30, r0
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	a2 81       	ldd	r26, Z+2	; 0x02
    2492:	b3 81       	ldd	r27, Z+3	; 0x03
    2494:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <xNextTaskUnblockTime>
    2498:	90 93 1c 14 	sts	0x141C, r25	; 0x80141c <xNextTaskUnblockTime+0x1>
    249c:	a0 93 1d 14 	sts	0x141D, r26	; 0x80141d <xNextTaskUnblockTime+0x2>
    24a0:	b0 93 1e 14 	sts	0x141E, r27	; 0x80141e <xNextTaskUnblockTime+0x3>
    24a4:	08 95       	ret

000024a6 <prvDeleteTCB>:
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
    24ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b0:	0e 94 91 09 	call	0x1322	; 0x1322 <vPortFree>
    24b4:	ce 01       	movw	r24, r28
    24b6:	0e 94 91 09 	call	0x1322	; 0x1322 <vPortFree>
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <prvInitialiseNewTask>:
    24c0:	4f 92       	push	r4
    24c2:	5f 92       	push	r5
    24c4:	6f 92       	push	r6
    24c6:	7f 92       	push	r7
    24c8:	8f 92       	push	r8
    24ca:	9f 92       	push	r9
    24cc:	af 92       	push	r10
    24ce:	bf 92       	push	r11
    24d0:	cf 92       	push	r12
    24d2:	df 92       	push	r13
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	0f 93       	push	r16
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	2c 01       	movw	r4, r24
    24e0:	5b 01       	movw	r10, r22
    24e2:	4a 01       	movw	r8, r20
    24e4:	39 01       	movw	r6, r18
    24e6:	e6 01       	movw	r28, r12
    24e8:	65 ea       	ldi	r22, 0xA5	; 165
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f0:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <memset>
    24f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f8:	21 e0       	ldi	r18, 0x01	; 1
    24fa:	82 1a       	sub	r8, r18
    24fc:	91 08       	sbc	r9, r1
    24fe:	88 0e       	add	r8, r24
    2500:	99 1e       	adc	r9, r25
    2502:	a1 14       	cp	r10, r1
    2504:	b1 04       	cpc	r11, r1
    2506:	89 f4       	brne	.+34     	; 0x252a <prvInitialiseNewTask+0x6a>
    2508:	15 c0       	rjmp	.+42     	; 0x2534 <prvInitialiseNewTask+0x74>
    250a:	82 2f       	mov	r24, r18
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	f5 01       	movw	r30, r10
    2510:	e8 0f       	add	r30, r24
    2512:	f9 1f       	adc	r31, r25
    2514:	30 81       	ld	r19, Z
    2516:	de 01       	movw	r26, r28
    2518:	a8 0f       	add	r26, r24
    251a:	b9 1f       	adc	r27, r25
    251c:	5d 96       	adiw	r26, 0x1d	; 29
    251e:	3c 93       	st	X, r19
    2520:	80 81       	ld	r24, Z
    2522:	88 23       	and	r24, r24
    2524:	29 f0       	breq	.+10     	; 0x2530 <prvInitialiseNewTask+0x70>
    2526:	2f 5f       	subi	r18, 0xFF	; 255
    2528:	01 c0       	rjmp	.+2      	; 0x252c <prvInitialiseNewTask+0x6c>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	20 31       	cpi	r18, 0x10	; 16
    252e:	68 f3       	brcs	.-38     	; 0x250a <prvInitialiseNewTask+0x4a>
    2530:	1c a6       	std	Y+44, r1	; 0x2c
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <prvInitialiseNewTask+0x76>
    2534:	1d 8e       	std	Y+29, r1	; 0x1d
    2536:	0a 30       	cpi	r16, 0x0A	; 10
    2538:	08 f0       	brcs	.+2      	; 0x253c <prvInitialiseNewTask+0x7c>
    253a:	09 e0       	ldi	r16, 0x09	; 9
    253c:	0a 8f       	std	Y+26, r16	; 0x1a
    253e:	0d a7       	std	Y+45, r16	; 0x2d
    2540:	1e a6       	std	Y+46, r1	; 0x2e
    2542:	ce 01       	movw	r24, r28
    2544:	02 96       	adiw	r24, 0x02	; 2
    2546:	0e 94 df 09 	call	0x13be	; 0x13be <vListInitialiseItem>
    254a:	ce 01       	movw	r24, r28
    254c:	0e 96       	adiw	r24, 0x0e	; 14
    254e:	0e 94 df 09 	call	0x13be	; 0x13be <vListInitialiseItem>
    2552:	db 87       	std	Y+11, r29	; 0x0b
    2554:	ca 87       	std	Y+10, r28	; 0x0a
    2556:	8a e0       	ldi	r24, 0x0A	; 10
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	80 1b       	sub	r24, r16
    2560:	91 09       	sbc	r25, r1
    2562:	a1 09       	sbc	r26, r1
    2564:	b1 09       	sbc	r27, r1
    2566:	8e 87       	std	Y+14, r24	; 0x0e
    2568:	9f 87       	std	Y+15, r25	; 0x0f
    256a:	a8 8b       	std	Y+16, r26	; 0x10
    256c:	b9 8b       	std	Y+17, r27	; 0x11
    256e:	df 8b       	std	Y+23, r29	; 0x17
    2570:	ce 8b       	std	Y+22, r28	; 0x16
    2572:	84 e0       	ldi	r24, 0x04	; 4
    2574:	fe 01       	movw	r30, r28
    2576:	bf 96       	adiw	r30, 0x2f	; 47
    2578:	df 01       	movw	r26, r30
    257a:	1d 92       	st	X+, r1
    257c:	8a 95       	dec	r24
    257e:	e9 f7       	brne	.-6      	; 0x257a <prvInitialiseNewTask+0xba>
    2580:	1b aa       	std	Y+51, r1	; 0x33
    2582:	a3 01       	movw	r20, r6
    2584:	b2 01       	movw	r22, r4
    2586:	c4 01       	movw	r24, r8
    2588:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <pxPortInitialiseStack>
    258c:	99 83       	std	Y+1, r25	; 0x01
    258e:	88 83       	st	Y, r24
    2590:	e1 14       	cp	r14, r1
    2592:	f1 04       	cpc	r15, r1
    2594:	19 f0       	breq	.+6      	; 0x259c <prvInitialiseNewTask+0xdc>
    2596:	f7 01       	movw	r30, r14
    2598:	d1 83       	std	Z+1, r29	; 0x01
    259a:	c0 83       	st	Z, r28
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	df 90       	pop	r13
    25a8:	cf 90       	pop	r12
    25aa:	bf 90       	pop	r11
    25ac:	af 90       	pop	r10
    25ae:	9f 90       	pop	r9
    25b0:	8f 90       	pop	r8
    25b2:	7f 90       	pop	r7
    25b4:	6f 90       	pop	r6
    25b6:	5f 90       	pop	r5
    25b8:	4f 90       	pop	r4
    25ba:	08 95       	ret

000025bc <prvInitialiseTaskLists>:
    25bc:	cf 93       	push	r28
    25be:	c0 e0       	ldi	r28, 0x00	; 0
    25c0:	09 c0       	rjmp	.+18     	; 0x25d4 <prvInitialiseTaskLists+0x18>
    25c2:	2b e0       	ldi	r18, 0x0B	; 11
    25c4:	c2 9f       	mul	r28, r18
    25c6:	c0 01       	movw	r24, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	87 59       	subi	r24, 0x97	; 151
    25cc:	9b 4e       	sbci	r25, 0xEB	; 235
    25ce:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    25d2:	cf 5f       	subi	r28, 0xFF	; 255
    25d4:	ca 30       	cpi	r28, 0x0A	; 10
    25d6:	a8 f3       	brcs	.-22     	; 0x25c2 <prvInitialiseTaskLists+0x6>
    25d8:	8e e5       	ldi	r24, 0x5E	; 94
    25da:	94 e1       	ldi	r25, 0x14	; 20
    25dc:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    25e0:	83 e5       	ldi	r24, 0x53	; 83
    25e2:	94 e1       	ldi	r25, 0x14	; 20
    25e4:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    25e8:	84 e4       	ldi	r24, 0x44	; 68
    25ea:	94 e1       	ldi	r25, 0x14	; 20
    25ec:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    25f0:	89 e3       	ldi	r24, 0x39	; 57
    25f2:	94 e1       	ldi	r25, 0x14	; 20
    25f4:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    25f8:	8d e2       	ldi	r24, 0x2D	; 45
    25fa:	94 e1       	ldi	r25, 0x14	; 20
    25fc:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    2600:	8e e5       	ldi	r24, 0x5E	; 94
    2602:	94 e1       	ldi	r25, 0x14	; 20
    2604:	90 93 52 14 	sts	0x1452, r25	; 0x801452 <pxDelayedTaskList+0x1>
    2608:	80 93 51 14 	sts	0x1451, r24	; 0x801451 <pxDelayedTaskList>
    260c:	83 e5       	ldi	r24, 0x53	; 83
    260e:	94 e1       	ldi	r25, 0x14	; 20
    2610:	90 93 50 14 	sts	0x1450, r25	; 0x801450 <pxOverflowDelayedTaskList+0x1>
    2614:	80 93 4f 14 	sts	0x144F, r24	; 0x80144f <pxOverflowDelayedTaskList>
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <prvAddNewTaskToReadyList>:
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	ec 01       	movw	r28, r24
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	0f 92       	push	r0
    2628:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <uxCurrentNumberOfTasks>
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	80 93 2c 14 	sts	0x142C, r24	; 0x80142c <uxCurrentNumberOfTasks>
    2632:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2636:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    263a:	89 2b       	or	r24, r25
    263c:	51 f4       	brne	.+20     	; 0x2652 <prvAddNewTaskToReadyList+0x36>
    263e:	d0 93 d8 14 	sts	0x14D8, r29	; 0x8014d8 <pxCurrentTCB+0x1>
    2642:	c0 93 d7 14 	sts	0x14D7, r28	; 0x8014d7 <pxCurrentTCB>
    2646:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <uxCurrentNumberOfTasks>
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	91 f4       	brne	.+36     	; 0x2672 <prvAddNewTaskToReadyList+0x56>
    264e:	b6 df       	rcall	.-148    	; 0x25bc <prvInitialiseTaskLists>
    2650:	10 c0       	rjmp	.+32     	; 0x2672 <prvAddNewTaskToReadyList+0x56>
    2652:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <xSchedulerRunning>
    2656:	81 11       	cpse	r24, r1
    2658:	0c c0       	rjmp	.+24     	; 0x2672 <prvAddNewTaskToReadyList+0x56>
    265a:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    265e:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2662:	92 8d       	ldd	r25, Z+26	; 0x1a
    2664:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2666:	89 17       	cp	r24, r25
    2668:	20 f0       	brcs	.+8      	; 0x2672 <prvAddNewTaskToReadyList+0x56>
    266a:	d0 93 d8 14 	sts	0x14D8, r29	; 0x8014d8 <pxCurrentTCB+0x1>
    266e:	c0 93 d7 14 	sts	0x14D7, r28	; 0x8014d7 <pxCurrentTCB>
    2672:	80 91 1f 14 	lds	r24, 0x141F	; 0x80141f <uxTaskNumber>
    2676:	8f 5f       	subi	r24, 0xFF	; 255
    2678:	80 93 1f 14 	sts	0x141F, r24	; 0x80141f <uxTaskNumber>
    267c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    267e:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    2682:	8e 17       	cp	r24, r30
    2684:	10 f4       	brcc	.+4      	; 0x268a <prvAddNewTaskToReadyList+0x6e>
    2686:	e0 93 27 14 	sts	0x1427, r30	; 0x801427 <uxTopReadyPriority>
    268a:	8b e0       	ldi	r24, 0x0B	; 11
    268c:	8e 9f       	mul	r24, r30
    268e:	f0 01       	movw	r30, r0
    2690:	11 24       	eor	r1, r1
    2692:	e7 59       	subi	r30, 0x97	; 151
    2694:	fb 4e       	sbci	r31, 0xEB	; 235
    2696:	01 80       	ldd	r0, Z+1	; 0x01
    2698:	f2 81       	ldd	r31, Z+2	; 0x02
    269a:	e0 2d       	mov	r30, r0
    269c:	ff 83       	std	Y+7, r31	; 0x07
    269e:	ee 83       	std	Y+6, r30	; 0x06
    26a0:	26 81       	ldd	r18, Z+6	; 0x06
    26a2:	37 81       	ldd	r19, Z+7	; 0x07
    26a4:	39 87       	std	Y+9, r19	; 0x09
    26a6:	28 87       	std	Y+8, r18	; 0x08
    26a8:	a6 81       	ldd	r26, Z+6	; 0x06
    26aa:	b7 81       	ldd	r27, Z+7	; 0x07
    26ac:	9e 01       	movw	r18, r28
    26ae:	2e 5f       	subi	r18, 0xFE	; 254
    26b0:	3f 4f       	sbci	r19, 0xFF	; 255
    26b2:	15 96       	adiw	r26, 0x05	; 5
    26b4:	3c 93       	st	X, r19
    26b6:	2e 93       	st	-X, r18
    26b8:	14 97       	sbiw	r26, 0x04	; 4
    26ba:	37 83       	std	Z+7, r19	; 0x07
    26bc:	26 83       	std	Z+6, r18	; 0x06
    26be:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26c0:	8e 9f       	mul	r24, r30
    26c2:	f0 01       	movw	r30, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	e7 59       	subi	r30, 0x97	; 151
    26c8:	fb 4e       	sbci	r31, 0xEB	; 235
    26ca:	fd 87       	std	Y+13, r31	; 0x0d
    26cc:	ec 87       	std	Y+12, r30	; 0x0c
    26ce:	80 81       	ld	r24, Z
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	80 83       	st	Z, r24
    26d4:	0f 90       	pop	r0
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <xSchedulerRunning>
    26dc:	88 23       	and	r24, r24
    26de:	51 f0       	breq	.+20     	; 0x26f4 <prvAddNewTaskToReadyList+0xd8>
    26e0:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    26e4:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    26e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    26ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26ec:	98 17       	cp	r25, r24
    26ee:	10 f4       	brcc	.+4      	; 0x26f4 <prvAddNewTaskToReadyList+0xd8>
    26f0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	08 95       	ret

000026fa <prvCheckTasksWaitingTermination>:
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	1b c0       	rjmp	.+54     	; 0x2736 <prvCheckTasksWaitingTermination+0x3c>
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	0f 92       	push	r0
    2706:	e0 91 40 14 	lds	r30, 0x1440	; 0x801440 <xTasksWaitingTermination+0x7>
    270a:	f0 91 41 14 	lds	r31, 0x1441	; 0x801441 <xTasksWaitingTermination+0x8>
    270e:	c0 85       	ldd	r28, Z+8	; 0x08
    2710:	d1 85       	ldd	r29, Z+9	; 0x09
    2712:	ce 01       	movw	r24, r28
    2714:	02 96       	adiw	r24, 0x02	; 2
    2716:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    271a:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <uxCurrentNumberOfTasks>
    271e:	81 50       	subi	r24, 0x01	; 1
    2720:	80 93 2c 14 	sts	0x142C, r24	; 0x80142c <uxCurrentNumberOfTasks>
    2724:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <uxDeletedTasksWaitingCleanUp>
    2728:	81 50       	subi	r24, 0x01	; 1
    272a:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <uxDeletedTasksWaitingCleanUp>
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	ce 01       	movw	r24, r28
    2734:	b8 de       	rcall	.-656    	; 0x24a6 <prvDeleteTCB>
    2736:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <uxDeletedTasksWaitingCleanUp>
    273a:	81 11       	cpse	r24, r1
    273c:	e1 cf       	rjmp	.-62     	; 0x2700 <prvCheckTasksWaitingTermination+0x6>
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	08 95       	ret

00002744 <prvAddCurrentTaskToDelayedList>:
    2744:	8f 92       	push	r8
    2746:	9f 92       	push	r9
    2748:	af 92       	push	r10
    274a:	bf 92       	push	r11
    274c:	cf 92       	push	r12
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	6b 01       	movw	r12, r22
    275a:	7c 01       	movw	r14, r24
    275c:	c4 2f       	mov	r28, r20
    275e:	80 90 28 14 	lds	r8, 0x1428	; 0x801428 <xTickCount>
    2762:	90 90 29 14 	lds	r9, 0x1429	; 0x801429 <xTickCount+0x1>
    2766:	a0 90 2a 14 	lds	r10, 0x142A	; 0x80142a <xTickCount+0x2>
    276a:	b0 90 2b 14 	lds	r11, 0x142B	; 0x80142b <xTickCount+0x3>
    276e:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2772:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2776:	02 96       	adiw	r24, 0x02	; 2
    2778:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	c8 16       	cp	r12, r24
    2780:	d8 06       	cpc	r13, r24
    2782:	e8 06       	cpc	r14, r24
    2784:	f8 06       	cpc	r15, r24
    2786:	b1 f5       	brne	.+108    	; 0x27f4 <prvAddCurrentTaskToDelayedList+0xb0>
    2788:	cc 23       	and	r28, r28
    278a:	a1 f1       	breq	.+104    	; 0x27f4 <prvAddCurrentTaskToDelayedList+0xb0>
    278c:	ed e2       	ldi	r30, 0x2D	; 45
    278e:	f4 e1       	ldi	r31, 0x14	; 20
    2790:	a1 81       	ldd	r26, Z+1	; 0x01
    2792:	b2 81       	ldd	r27, Z+2	; 0x02
    2794:	c0 91 d7 14 	lds	r28, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2798:	d0 91 d8 14 	lds	r29, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    279c:	bf 83       	std	Y+7, r27	; 0x07
    279e:	ae 83       	std	Y+6, r26	; 0x06
    27a0:	c0 91 d7 14 	lds	r28, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    27a4:	d0 91 d8 14 	lds	r29, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    27a8:	16 96       	adiw	r26, 0x06	; 6
    27aa:	8d 91       	ld	r24, X+
    27ac:	9c 91       	ld	r25, X
    27ae:	17 97       	sbiw	r26, 0x07	; 7
    27b0:	99 87       	std	Y+9, r25	; 0x09
    27b2:	88 87       	std	Y+8, r24	; 0x08
    27b4:	16 96       	adiw	r26, 0x06	; 6
    27b6:	cd 91       	ld	r28, X+
    27b8:	dc 91       	ld	r29, X
    27ba:	17 97       	sbiw	r26, 0x07	; 7
    27bc:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    27c0:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    27c4:	02 96       	adiw	r24, 0x02	; 2
    27c6:	9d 83       	std	Y+5, r25	; 0x05
    27c8:	8c 83       	std	Y+4, r24	; 0x04
    27ca:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    27ce:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    27d2:	02 96       	adiw	r24, 0x02	; 2
    27d4:	17 96       	adiw	r26, 0x07	; 7
    27d6:	9c 93       	st	X, r25
    27d8:	8e 93       	st	-X, r24
    27da:	16 97       	sbiw	r26, 0x06	; 6
    27dc:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    27e0:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    27e4:	1d 96       	adiw	r26, 0x0d	; 13
    27e6:	fc 93       	st	X, r31
    27e8:	ee 93       	st	-X, r30
    27ea:	1c 97       	sbiw	r26, 0x0c	; 12
    27ec:	80 81       	ld	r24, Z
    27ee:	8f 5f       	subi	r24, 0xFF	; 255
    27f0:	80 83       	st	Z, r24
    27f2:	3f c0       	rjmp	.+126    	; 0x2872 <prvAddCurrentTaskToDelayedList+0x12e>
    27f4:	c8 0c       	add	r12, r8
    27f6:	d9 1c       	adc	r13, r9
    27f8:	ea 1c       	adc	r14, r10
    27fa:	fb 1c       	adc	r15, r11
    27fc:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2800:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2804:	c2 82       	std	Z+2, r12	; 0x02
    2806:	d3 82       	std	Z+3, r13	; 0x03
    2808:	e4 82       	std	Z+4, r14	; 0x04
    280a:	f5 82       	std	Z+5, r15	; 0x05
    280c:	c8 14       	cp	r12, r8
    280e:	d9 04       	cpc	r13, r9
    2810:	ea 04       	cpc	r14, r10
    2812:	fb 04       	cpc	r15, r11
    2814:	68 f4       	brcc	.+26     	; 0x2830 <prvAddCurrentTaskToDelayedList+0xec>
    2816:	60 91 d7 14 	lds	r22, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    281a:	70 91 d8 14 	lds	r23, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    281e:	80 91 4f 14 	lds	r24, 0x144F	; 0x80144f <pxOverflowDelayedTaskList>
    2822:	90 91 50 14 	lds	r25, 0x1450	; 0x801450 <pxOverflowDelayedTaskList+0x1>
    2826:	6e 5f       	subi	r22, 0xFE	; 254
    2828:	7f 4f       	sbci	r23, 0xFF	; 255
    282a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    282e:	21 c0       	rjmp	.+66     	; 0x2872 <prvAddCurrentTaskToDelayedList+0x12e>
    2830:	60 91 d7 14 	lds	r22, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2834:	70 91 d8 14 	lds	r23, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2838:	80 91 51 14 	lds	r24, 0x1451	; 0x801451 <pxDelayedTaskList>
    283c:	90 91 52 14 	lds	r25, 0x1452	; 0x801452 <pxDelayedTaskList+0x1>
    2840:	6e 5f       	subi	r22, 0xFE	; 254
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    2848:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <xNextTaskUnblockTime>
    284c:	90 91 1c 14 	lds	r25, 0x141C	; 0x80141c <xNextTaskUnblockTime+0x1>
    2850:	a0 91 1d 14 	lds	r26, 0x141D	; 0x80141d <xNextTaskUnblockTime+0x2>
    2854:	b0 91 1e 14 	lds	r27, 0x141E	; 0x80141e <xNextTaskUnblockTime+0x3>
    2858:	c8 16       	cp	r12, r24
    285a:	d9 06       	cpc	r13, r25
    285c:	ea 06       	cpc	r14, r26
    285e:	fb 06       	cpc	r15, r27
    2860:	40 f4       	brcc	.+16     	; 0x2872 <prvAddCurrentTaskToDelayedList+0x12e>
    2862:	c0 92 1b 14 	sts	0x141B, r12	; 0x80141b <xNextTaskUnblockTime>
    2866:	d0 92 1c 14 	sts	0x141C, r13	; 0x80141c <xNextTaskUnblockTime+0x1>
    286a:	e0 92 1d 14 	sts	0x141D, r14	; 0x80141d <xNextTaskUnblockTime+0x2>
    286e:	f0 92 1e 14 	sts	0x141E, r15	; 0x80141e <xNextTaskUnblockTime+0x3>
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	df 90       	pop	r13
    287c:	cf 90       	pop	r12
    287e:	bf 90       	pop	r11
    2880:	af 90       	pop	r10
    2882:	9f 90       	pop	r9
    2884:	8f 90       	pop	r8
    2886:	08 95       	ret

00002888 <xTaskCreate>:
    2888:	2f 92       	push	r2
    288a:	3f 92       	push	r3
    288c:	4f 92       	push	r4
    288e:	5f 92       	push	r5
    2890:	6f 92       	push	r6
    2892:	7f 92       	push	r7
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	3c 01       	movw	r6, r24
    28ac:	1b 01       	movw	r2, r22
    28ae:	4a 01       	movw	r8, r20
    28b0:	29 01       	movw	r4, r18
    28b2:	ca 01       	movw	r24, r20
    28b4:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pvPortMalloc>
    28b8:	6c 01       	movw	r12, r24
    28ba:	89 2b       	or	r24, r25
    28bc:	71 f0       	breq	.+28     	; 0x28da <xTaskCreate+0x52>
    28be:	84 e3       	ldi	r24, 0x34	; 52
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <pvPortMalloc>
    28c6:	ec 01       	movw	r28, r24
    28c8:	89 2b       	or	r24, r25
    28ca:	19 f0       	breq	.+6      	; 0x28d2 <xTaskCreate+0x4a>
    28cc:	dc 8e       	std	Y+28, r13	; 0x1c
    28ce:	cb 8e       	std	Y+27, r12	; 0x1b
    28d0:	06 c0       	rjmp	.+12     	; 0x28de <xTaskCreate+0x56>
    28d2:	c6 01       	movw	r24, r12
    28d4:	0e 94 91 09 	call	0x1322	; 0x1322 <vPortFree>
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <xTaskCreate+0x56>
    28da:	c0 e0       	ldi	r28, 0x00	; 0
    28dc:	d0 e0       	ldi	r29, 0x00	; 0
    28de:	20 97       	sbiw	r28, 0x00	; 0
    28e0:	61 f0       	breq	.+24     	; 0x28fa <xTaskCreate+0x72>
    28e2:	a1 2c       	mov	r10, r1
    28e4:	b1 2c       	mov	r11, r1
    28e6:	6e 01       	movw	r12, r28
    28e8:	92 01       	movw	r18, r4
    28ea:	a4 01       	movw	r20, r8
    28ec:	b1 01       	movw	r22, r2
    28ee:	c3 01       	movw	r24, r6
    28f0:	e7 dd       	rcall	.-1074   	; 0x24c0 <prvInitialiseNewTask>
    28f2:	ce 01       	movw	r24, r28
    28f4:	93 de       	rcall	.-730    	; 0x261c <prvAddNewTaskToReadyList>
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <xTaskCreate+0x74>
    28fa:	8f ef       	ldi	r24, 0xFF	; 255
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	0f 91       	pop	r16
    2902:	ff 90       	pop	r15
    2904:	ef 90       	pop	r14
    2906:	df 90       	pop	r13
    2908:	cf 90       	pop	r12
    290a:	bf 90       	pop	r11
    290c:	af 90       	pop	r10
    290e:	9f 90       	pop	r9
    2910:	8f 90       	pop	r8
    2912:	7f 90       	pop	r7
    2914:	6f 90       	pop	r6
    2916:	5f 90       	pop	r5
    2918:	4f 90       	pop	r4
    291a:	3f 90       	pop	r3
    291c:	2f 90       	pop	r2
    291e:	08 95       	ret

00002920 <vTaskStartScheduler>:
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	0f 2e       	mov	r0, r31
    2928:	f9 e1       	ldi	r31, 0x19	; 25
    292a:	ef 2e       	mov	r14, r31
    292c:	f4 e1       	ldi	r31, 0x14	; 20
    292e:	ff 2e       	mov	r15, r31
    2930:	f0 2d       	mov	r31, r0
    2932:	00 e0       	ldi	r16, 0x00	; 0
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 ec       	ldi	r20, 0xC0	; 192
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	6a e4       	ldi	r22, 0x4A	; 74
    293e:	75 e0       	ldi	r23, 0x05	; 5
    2940:	8e e4       	ldi	r24, 0x4E	; 78
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	a1 df       	rcall	.-190    	; 0x2888 <xTaskCreate>
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	11 f4       	brne	.+4      	; 0x294e <vTaskStartScheduler+0x2e>
    294a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <xTimerCreateTimerTask>
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	c9 f4       	brne	.+50     	; 0x2984 <vTaskStartScheduler+0x64>
    2952:	f8 94       	cli
    2954:	8f ef       	ldi	r24, 0xFF	; 255
    2956:	9f ef       	ldi	r25, 0xFF	; 255
    2958:	dc 01       	movw	r26, r24
    295a:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <xNextTaskUnblockTime>
    295e:	90 93 1c 14 	sts	0x141C, r25	; 0x80141c <xNextTaskUnblockTime+0x1>
    2962:	a0 93 1d 14 	sts	0x141D, r26	; 0x80141d <xNextTaskUnblockTime+0x2>
    2966:	b0 93 1e 14 	sts	0x141E, r27	; 0x80141e <xNextTaskUnblockTime+0x3>
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	80 93 26 14 	sts	0x1426, r24	; 0x801426 <xSchedulerRunning>
    2970:	10 92 28 14 	sts	0x1428, r1	; 0x801428 <xTickCount>
    2974:	10 92 29 14 	sts	0x1429, r1	; 0x801429 <xTickCount+0x1>
    2978:	10 92 2a 14 	sts	0x142A, r1	; 0x80142a <xTickCount+0x2>
    297c:	10 92 2b 14 	sts	0x142B, r1	; 0x80142b <xTickCount+0x3>
    2980:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <xPortStartScheduler>
    2984:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2988:	0f 91       	pop	r16
    298a:	ff 90       	pop	r15
    298c:	ef 90       	pop	r14
    298e:	08 95       	ret

00002990 <vTaskSuspendAll>:
    2990:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <uxSchedulerSuspended>
    2994:	8f 5f       	subi	r24, 0xFF	; 255
    2996:	80 93 18 14 	sts	0x1418, r24	; 0x801418 <uxSchedulerSuspended>
    299a:	08 95       	ret

0000299c <xTaskGetTickCount>:
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	0f 92       	push	r0
    29a2:	60 91 28 14 	lds	r22, 0x1428	; 0x801428 <xTickCount>
    29a6:	70 91 29 14 	lds	r23, 0x1429	; 0x801429 <xTickCount+0x1>
    29aa:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <xTickCount+0x2>
    29ae:	90 91 2b 14 	lds	r25, 0x142B	; 0x80142b <xTickCount+0x3>
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	08 95       	ret

000029b8 <xTaskIncrementTick>:
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <uxSchedulerSuspended>
    29c8:	81 11       	cpse	r24, r1
    29ca:	05 c1       	rjmp	.+522    	; 0x2bd6 <xTaskIncrementTick+0x21e>
    29cc:	c0 90 28 14 	lds	r12, 0x1428	; 0x801428 <xTickCount>
    29d0:	d0 90 29 14 	lds	r13, 0x1429	; 0x801429 <xTickCount+0x1>
    29d4:	e0 90 2a 14 	lds	r14, 0x142A	; 0x80142a <xTickCount+0x2>
    29d8:	f0 90 2b 14 	lds	r15, 0x142B	; 0x80142b <xTickCount+0x3>
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	c8 1a       	sub	r12, r24
    29e0:	d8 0a       	sbc	r13, r24
    29e2:	e8 0a       	sbc	r14, r24
    29e4:	f8 0a       	sbc	r15, r24
    29e6:	c0 92 28 14 	sts	0x1428, r12	; 0x801428 <xTickCount>
    29ea:	d0 92 29 14 	sts	0x1429, r13	; 0x801429 <xTickCount+0x1>
    29ee:	e0 92 2a 14 	sts	0x142A, r14	; 0x80142a <xTickCount+0x2>
    29f2:	f0 92 2b 14 	sts	0x142B, r15	; 0x80142b <xTickCount+0x3>
    29f6:	c1 14       	cp	r12, r1
    29f8:	d1 04       	cpc	r13, r1
    29fa:	e1 04       	cpc	r14, r1
    29fc:	f1 04       	cpc	r15, r1
    29fe:	b1 f4       	brne	.+44     	; 0x2a2c <xTaskIncrementTick+0x74>
    2a00:	80 91 51 14 	lds	r24, 0x1451	; 0x801451 <pxDelayedTaskList>
    2a04:	90 91 52 14 	lds	r25, 0x1452	; 0x801452 <pxDelayedTaskList+0x1>
    2a08:	20 91 4f 14 	lds	r18, 0x144F	; 0x80144f <pxOverflowDelayedTaskList>
    2a0c:	30 91 50 14 	lds	r19, 0x1450	; 0x801450 <pxOverflowDelayedTaskList+0x1>
    2a10:	30 93 52 14 	sts	0x1452, r19	; 0x801452 <pxDelayedTaskList+0x1>
    2a14:	20 93 51 14 	sts	0x1451, r18	; 0x801451 <pxDelayedTaskList>
    2a18:	90 93 50 14 	sts	0x1450, r25	; 0x801450 <pxOverflowDelayedTaskList+0x1>
    2a1c:	80 93 4f 14 	sts	0x144F, r24	; 0x80144f <pxOverflowDelayedTaskList>
    2a20:	80 91 20 14 	lds	r24, 0x1420	; 0x801420 <xNumOfOverflows>
    2a24:	8f 5f       	subi	r24, 0xFF	; 255
    2a26:	80 93 20 14 	sts	0x1420, r24	; 0x801420 <xNumOfOverflows>
    2a2a:	16 dd       	rcall	.-1492   	; 0x2458 <prvResetNextTaskUnblockTime>
    2a2c:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <xNextTaskUnblockTime>
    2a30:	90 91 1c 14 	lds	r25, 0x141C	; 0x80141c <xNextTaskUnblockTime+0x1>
    2a34:	a0 91 1d 14 	lds	r26, 0x141D	; 0x80141d <xNextTaskUnblockTime+0x2>
    2a38:	b0 91 1e 14 	lds	r27, 0x141E	; 0x80141e <xNextTaskUnblockTime+0x3>
    2a3c:	c8 16       	cp	r12, r24
    2a3e:	d9 06       	cpc	r13, r25
    2a40:	ea 06       	cpc	r14, r26
    2a42:	fb 06       	cpc	r15, r27
    2a44:	20 f4       	brcc	.+8      	; 0x2a4e <xTaskIncrementTick+0x96>
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	b2 c0       	rjmp	.+356    	; 0x2bae <xTaskIncrementTick+0x1f6>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <xTaskIncrementTick+0x98>
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	e0 91 51 14 	lds	r30, 0x1451	; 0x801451 <pxDelayedTaskList>
    2a54:	f0 91 52 14 	lds	r31, 0x1452	; 0x801452 <pxDelayedTaskList+0x1>
    2a58:	90 81       	ld	r25, Z
    2a5a:	91 11       	cpse	r25, r1
    2a5c:	0c c0       	rjmp	.+24     	; 0x2a76 <xTaskIncrementTick+0xbe>
    2a5e:	4f ef       	ldi	r20, 0xFF	; 255
    2a60:	5f ef       	ldi	r21, 0xFF	; 255
    2a62:	ba 01       	movw	r22, r20
    2a64:	40 93 1b 14 	sts	0x141B, r20	; 0x80141b <xNextTaskUnblockTime>
    2a68:	50 93 1c 14 	sts	0x141C, r21	; 0x80141c <xNextTaskUnblockTime+0x1>
    2a6c:	60 93 1d 14 	sts	0x141D, r22	; 0x80141d <xNextTaskUnblockTime+0x2>
    2a70:	70 93 1e 14 	sts	0x141E, r23	; 0x80141e <xNextTaskUnblockTime+0x3>
    2a74:	9c c0       	rjmp	.+312    	; 0x2bae <xTaskIncrementTick+0x1f6>
    2a76:	e0 91 51 14 	lds	r30, 0x1451	; 0x801451 <pxDelayedTaskList>
    2a7a:	f0 91 52 14 	lds	r31, 0x1452	; 0x801452 <pxDelayedTaskList+0x1>
    2a7e:	07 80       	ldd	r0, Z+7	; 0x07
    2a80:	f0 85       	ldd	r31, Z+8	; 0x08
    2a82:	e0 2d       	mov	r30, r0
    2a84:	00 84       	ldd	r0, Z+8	; 0x08
    2a86:	f1 85       	ldd	r31, Z+9	; 0x09
    2a88:	e0 2d       	mov	r30, r0
    2a8a:	42 81       	ldd	r20, Z+2	; 0x02
    2a8c:	53 81       	ldd	r21, Z+3	; 0x03
    2a8e:	64 81       	ldd	r22, Z+4	; 0x04
    2a90:	75 81       	ldd	r23, Z+5	; 0x05
    2a92:	c4 16       	cp	r12, r20
    2a94:	d5 06       	cpc	r13, r21
    2a96:	e6 06       	cpc	r14, r22
    2a98:	f7 06       	cpc	r15, r23
    2a9a:	48 f4       	brcc	.+18     	; 0x2aae <xTaskIncrementTick+0xf6>
    2a9c:	40 93 1b 14 	sts	0x141B, r20	; 0x80141b <xNextTaskUnblockTime>
    2aa0:	50 93 1c 14 	sts	0x141C, r21	; 0x80141c <xNextTaskUnblockTime+0x1>
    2aa4:	60 93 1d 14 	sts	0x141D, r22	; 0x80141d <xNextTaskUnblockTime+0x2>
    2aa8:	70 93 1e 14 	sts	0x141E, r23	; 0x80141e <xNextTaskUnblockTime+0x3>
    2aac:	80 c0       	rjmp	.+256    	; 0x2bae <xTaskIncrementTick+0x1f6>
    2aae:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ab0:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ab2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ab4:	d7 81       	ldd	r29, Z+7	; 0x07
    2ab6:	20 85       	ldd	r18, Z+8	; 0x08
    2ab8:	31 85       	ldd	r19, Z+9	; 0x09
    2aba:	3f 83       	std	Y+7, r19	; 0x07
    2abc:	2e 83       	std	Y+6, r18	; 0x06
    2abe:	c0 85       	ldd	r28, Z+8	; 0x08
    2ac0:	d1 85       	ldd	r29, Z+9	; 0x09
    2ac2:	26 81       	ldd	r18, Z+6	; 0x06
    2ac4:	37 81       	ldd	r19, Z+7	; 0x07
    2ac6:	3d 83       	std	Y+5, r19	; 0x05
    2ac8:	2c 83       	std	Y+4, r18	; 0x04
    2aca:	11 96       	adiw	r26, 0x01	; 1
    2acc:	4d 91       	ld	r20, X+
    2ace:	5c 91       	ld	r21, X
    2ad0:	12 97       	sbiw	r26, 0x02	; 2
    2ad2:	9f 01       	movw	r18, r30
    2ad4:	2e 5f       	subi	r18, 0xFE	; 254
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	42 17       	cp	r20, r18
    2ada:	53 07       	cpc	r21, r19
    2adc:	31 f4       	brne	.+12     	; 0x2aea <xTaskIncrementTick+0x132>
    2ade:	40 85       	ldd	r20, Z+8	; 0x08
    2ae0:	51 85       	ldd	r21, Z+9	; 0x09
    2ae2:	12 96       	adiw	r26, 0x02	; 2
    2ae4:	5c 93       	st	X, r21
    2ae6:	4e 93       	st	-X, r20
    2ae8:	11 97       	sbiw	r26, 0x01	; 1
    2aea:	15 86       	std	Z+13, r1	; 0x0d
    2aec:	14 86       	std	Z+12, r1	; 0x0c
    2aee:	9c 91       	ld	r25, X
    2af0:	91 50       	subi	r25, 0x01	; 1
    2af2:	9c 93       	st	X, r25
    2af4:	a0 8d       	ldd	r26, Z+24	; 0x18
    2af6:	b1 8d       	ldd	r27, Z+25	; 0x19
    2af8:	10 97       	sbiw	r26, 0x00	; 0
    2afa:	09 f1       	breq	.+66     	; 0x2b3e <xTaskIncrementTick+0x186>
    2afc:	c2 89       	ldd	r28, Z+18	; 0x12
    2afe:	d3 89       	ldd	r29, Z+19	; 0x13
    2b00:	44 89       	ldd	r20, Z+20	; 0x14
    2b02:	55 89       	ldd	r21, Z+21	; 0x15
    2b04:	5f 83       	std	Y+7, r21	; 0x07
    2b06:	4e 83       	std	Y+6, r20	; 0x06
    2b08:	c4 89       	ldd	r28, Z+20	; 0x14
    2b0a:	d5 89       	ldd	r29, Z+21	; 0x15
    2b0c:	42 89       	ldd	r20, Z+18	; 0x12
    2b0e:	53 89       	ldd	r21, Z+19	; 0x13
    2b10:	5d 83       	std	Y+5, r21	; 0x05
    2b12:	4c 83       	std	Y+4, r20	; 0x04
    2b14:	11 96       	adiw	r26, 0x01	; 1
    2b16:	6d 91       	ld	r22, X+
    2b18:	7c 91       	ld	r23, X
    2b1a:	12 97       	sbiw	r26, 0x02	; 2
    2b1c:	af 01       	movw	r20, r30
    2b1e:	42 5f       	subi	r20, 0xF2	; 242
    2b20:	5f 4f       	sbci	r21, 0xFF	; 255
    2b22:	64 17       	cp	r22, r20
    2b24:	75 07       	cpc	r23, r21
    2b26:	31 f4       	brne	.+12     	; 0x2b34 <xTaskIncrementTick+0x17c>
    2b28:	44 89       	ldd	r20, Z+20	; 0x14
    2b2a:	55 89       	ldd	r21, Z+21	; 0x15
    2b2c:	12 96       	adiw	r26, 0x02	; 2
    2b2e:	5c 93       	st	X, r21
    2b30:	4e 93       	st	-X, r20
    2b32:	11 97       	sbiw	r26, 0x01	; 1
    2b34:	11 8e       	std	Z+25, r1	; 0x19
    2b36:	10 8e       	std	Z+24, r1	; 0x18
    2b38:	9c 91       	ld	r25, X
    2b3a:	91 50       	subi	r25, 0x01	; 1
    2b3c:	9c 93       	st	X, r25
    2b3e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b40:	90 91 27 14 	lds	r25, 0x1427	; 0x801427 <uxTopReadyPriority>
    2b44:	9a 17       	cp	r25, r26
    2b46:	10 f4       	brcc	.+4      	; 0x2b4c <xTaskIncrementTick+0x194>
    2b48:	a0 93 27 14 	sts	0x1427, r26	; 0x801427 <uxTopReadyPriority>
    2b4c:	9b e0       	ldi	r25, 0x0B	; 11
    2b4e:	9a 9f       	mul	r25, r26
    2b50:	d0 01       	movw	r26, r0
    2b52:	11 24       	eor	r1, r1
    2b54:	a7 59       	subi	r26, 0x97	; 151
    2b56:	bb 4e       	sbci	r27, 0xEB	; 235
    2b58:	11 96       	adiw	r26, 0x01	; 1
    2b5a:	0d 90       	ld	r0, X+
    2b5c:	bc 91       	ld	r27, X
    2b5e:	a0 2d       	mov	r26, r0
    2b60:	b7 83       	std	Z+7, r27	; 0x07
    2b62:	a6 83       	std	Z+6, r26	; 0x06
    2b64:	16 96       	adiw	r26, 0x06	; 6
    2b66:	4d 91       	ld	r20, X+
    2b68:	5c 91       	ld	r21, X
    2b6a:	17 97       	sbiw	r26, 0x07	; 7
    2b6c:	51 87       	std	Z+9, r21	; 0x09
    2b6e:	40 87       	std	Z+8, r20	; 0x08
    2b70:	16 96       	adiw	r26, 0x06	; 6
    2b72:	cd 91       	ld	r28, X+
    2b74:	dc 91       	ld	r29, X
    2b76:	17 97       	sbiw	r26, 0x07	; 7
    2b78:	3d 83       	std	Y+5, r19	; 0x05
    2b7a:	2c 83       	std	Y+4, r18	; 0x04
    2b7c:	17 96       	adiw	r26, 0x07	; 7
    2b7e:	3c 93       	st	X, r19
    2b80:	2e 93       	st	-X, r18
    2b82:	16 97       	sbiw	r26, 0x06	; 6
    2b84:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b86:	9a 9f       	mul	r25, r26
    2b88:	d0 01       	movw	r26, r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	a7 59       	subi	r26, 0x97	; 151
    2b8e:	bb 4e       	sbci	r27, 0xEB	; 235
    2b90:	b5 87       	std	Z+13, r27	; 0x0d
    2b92:	a4 87       	std	Z+12, r26	; 0x0c
    2b94:	9c 91       	ld	r25, X
    2b96:	9f 5f       	subi	r25, 0xFF	; 255
    2b98:	9c 93       	st	X, r25
    2b9a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b9c:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2ba0:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2ba4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ba6:	29 17       	cp	r18, r25
    2ba8:	08 f0       	brcs	.+2      	; 0x2bac <xTaskIncrementTick+0x1f4>
    2baa:	4f cf       	rjmp	.-354    	; 0x2a4a <xTaskIncrementTick+0x92>
    2bac:	51 cf       	rjmp	.-350    	; 0x2a50 <xTaskIncrementTick+0x98>
    2bae:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2bb2:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2bb6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2bb8:	9b e0       	ldi	r25, 0x0B	; 11
    2bba:	e9 9f       	mul	r30, r25
    2bbc:	f0 01       	movw	r30, r0
    2bbe:	11 24       	eor	r1, r1
    2bc0:	e7 59       	subi	r30, 0x97	; 151
    2bc2:	fb 4e       	sbci	r31, 0xEB	; 235
    2bc4:	90 81       	ld	r25, Z
    2bc6:	92 30       	cpi	r25, 0x02	; 2
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <xTaskIncrementTick+0x214>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 91 21 14 	lds	r25, 0x1421	; 0x801421 <xYieldPending>
    2bd0:	91 11       	cpse	r25, r1
    2bd2:	16 c0       	rjmp	.+44     	; 0x2c00 <xTaskIncrementTick+0x248>
    2bd4:	16 c0       	rjmp	.+44     	; 0x2c02 <xTaskIncrementTick+0x24a>
    2bd6:	80 91 22 14 	lds	r24, 0x1422	; 0x801422 <xPendedTicks>
    2bda:	90 91 23 14 	lds	r25, 0x1423	; 0x801423 <xPendedTicks+0x1>
    2bde:	a0 91 24 14 	lds	r26, 0x1424	; 0x801424 <xPendedTicks+0x2>
    2be2:	b0 91 25 14 	lds	r27, 0x1425	; 0x801425 <xPendedTicks+0x3>
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	a1 1d       	adc	r26, r1
    2bea:	b1 1d       	adc	r27, r1
    2bec:	80 93 22 14 	sts	0x1422, r24	; 0x801422 <xPendedTicks>
    2bf0:	90 93 23 14 	sts	0x1423, r25	; 0x801423 <xPendedTicks+0x1>
    2bf4:	a0 93 24 14 	sts	0x1424, r26	; 0x801424 <xPendedTicks+0x2>
    2bf8:	b0 93 25 14 	sts	0x1425, r27	; 0x801425 <xPendedTicks+0x3>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	01 c0       	rjmp	.+2      	; 0x2c02 <xTaskIncrementTick+0x24a>
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	ff 90       	pop	r15
    2c08:	ef 90       	pop	r14
    2c0a:	df 90       	pop	r13
    2c0c:	cf 90       	pop	r12
    2c0e:	08 95       	ret

00002c10 <xTaskResumeAll>:
    2c10:	cf 92       	push	r12
    2c12:	df 92       	push	r13
    2c14:	ef 92       	push	r14
    2c16:	ff 92       	push	r15
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	0f 92       	push	r0
    2c22:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <uxSchedulerSuspended>
    2c26:	81 50       	subi	r24, 0x01	; 1
    2c28:	80 93 18 14 	sts	0x1418, r24	; 0x801418 <uxSchedulerSuspended>
    2c2c:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <uxSchedulerSuspended>
    2c30:	81 11       	cpse	r24, r1
    2c32:	be c0       	rjmp	.+380    	; 0x2db0 <xTaskResumeAll+0x1a0>
    2c34:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <uxCurrentNumberOfTasks>
    2c38:	81 11       	cpse	r24, r1
    2c3a:	88 c0       	rjmp	.+272    	; 0x2d4c <xTaskResumeAll+0x13c>
    2c3c:	bc c0       	rjmp	.+376    	; 0x2db6 <xTaskResumeAll+0x1a6>
    2c3e:	e0 91 4b 14 	lds	r30, 0x144B	; 0x80144b <xPendingReadyList+0x7>
    2c42:	f0 91 4c 14 	lds	r31, 0x144C	; 0x80144c <xPendingReadyList+0x8>
    2c46:	00 84       	ldd	r0, Z+8	; 0x08
    2c48:	f1 85       	ldd	r31, Z+9	; 0x09
    2c4a:	e0 2d       	mov	r30, r0
    2c4c:	a0 8d       	ldd	r26, Z+24	; 0x18
    2c4e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2c50:	c2 89       	ldd	r28, Z+18	; 0x12
    2c52:	d3 89       	ldd	r29, Z+19	; 0x13
    2c54:	84 89       	ldd	r24, Z+20	; 0x14
    2c56:	95 89       	ldd	r25, Z+21	; 0x15
    2c58:	9f 83       	std	Y+7, r25	; 0x07
    2c5a:	8e 83       	std	Y+6, r24	; 0x06
    2c5c:	c4 89       	ldd	r28, Z+20	; 0x14
    2c5e:	d5 89       	ldd	r29, Z+21	; 0x15
    2c60:	82 89       	ldd	r24, Z+18	; 0x12
    2c62:	93 89       	ldd	r25, Z+19	; 0x13
    2c64:	9d 83       	std	Y+5, r25	; 0x05
    2c66:	8c 83       	std	Y+4, r24	; 0x04
    2c68:	11 96       	adiw	r26, 0x01	; 1
    2c6a:	2d 91       	ld	r18, X+
    2c6c:	3c 91       	ld	r19, X
    2c6e:	12 97       	sbiw	r26, 0x02	; 2
    2c70:	cf 01       	movw	r24, r30
    2c72:	0e 96       	adiw	r24, 0x0e	; 14
    2c74:	28 17       	cp	r18, r24
    2c76:	39 07       	cpc	r19, r25
    2c78:	31 f4       	brne	.+12     	; 0x2c86 <xTaskResumeAll+0x76>
    2c7a:	84 89       	ldd	r24, Z+20	; 0x14
    2c7c:	95 89       	ldd	r25, Z+21	; 0x15
    2c7e:	12 96       	adiw	r26, 0x02	; 2
    2c80:	9c 93       	st	X, r25
    2c82:	8e 93       	st	-X, r24
    2c84:	11 97       	sbiw	r26, 0x01	; 1
    2c86:	11 8e       	std	Z+25, r1	; 0x19
    2c88:	10 8e       	std	Z+24, r1	; 0x18
    2c8a:	8c 91       	ld	r24, X
    2c8c:	81 50       	subi	r24, 0x01	; 1
    2c8e:	8c 93       	st	X, r24
    2c90:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c92:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c94:	c6 81       	ldd	r28, Z+6	; 0x06
    2c96:	d7 81       	ldd	r29, Z+7	; 0x07
    2c98:	80 85       	ldd	r24, Z+8	; 0x08
    2c9a:	91 85       	ldd	r25, Z+9	; 0x09
    2c9c:	9f 83       	std	Y+7, r25	; 0x07
    2c9e:	8e 83       	std	Y+6, r24	; 0x06
    2ca0:	c0 85       	ldd	r28, Z+8	; 0x08
    2ca2:	d1 85       	ldd	r29, Z+9	; 0x09
    2ca4:	86 81       	ldd	r24, Z+6	; 0x06
    2ca6:	97 81       	ldd	r25, Z+7	; 0x07
    2ca8:	9d 83       	std	Y+5, r25	; 0x05
    2caa:	8c 83       	std	Y+4, r24	; 0x04
    2cac:	11 96       	adiw	r26, 0x01	; 1
    2cae:	8d 91       	ld	r24, X+
    2cb0:	9c 91       	ld	r25, X
    2cb2:	12 97       	sbiw	r26, 0x02	; 2
    2cb4:	9f 01       	movw	r18, r30
    2cb6:	2e 5f       	subi	r18, 0xFE	; 254
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	82 17       	cp	r24, r18
    2cbc:	93 07       	cpc	r25, r19
    2cbe:	31 f4       	brne	.+12     	; 0x2ccc <xTaskResumeAll+0xbc>
    2cc0:	80 85       	ldd	r24, Z+8	; 0x08
    2cc2:	91 85       	ldd	r25, Z+9	; 0x09
    2cc4:	12 96       	adiw	r26, 0x02	; 2
    2cc6:	9c 93       	st	X, r25
    2cc8:	8e 93       	st	-X, r24
    2cca:	11 97       	sbiw	r26, 0x01	; 1
    2ccc:	15 86       	std	Z+13, r1	; 0x0d
    2cce:	14 86       	std	Z+12, r1	; 0x0c
    2cd0:	8c 91       	ld	r24, X
    2cd2:	81 50       	subi	r24, 0x01	; 1
    2cd4:	8c 93       	st	X, r24
    2cd6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2cd8:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    2cdc:	8a 17       	cp	r24, r26
    2cde:	10 f4       	brcc	.+4      	; 0x2ce4 <xTaskResumeAll+0xd4>
    2ce0:	a0 93 27 14 	sts	0x1427, r26	; 0x801427 <uxTopReadyPriority>
    2ce4:	8b e0       	ldi	r24, 0x0B	; 11
    2ce6:	8a 9f       	mul	r24, r26
    2ce8:	d0 01       	movw	r26, r0
    2cea:	11 24       	eor	r1, r1
    2cec:	a7 59       	subi	r26, 0x97	; 151
    2cee:	bb 4e       	sbci	r27, 0xEB	; 235
    2cf0:	11 96       	adiw	r26, 0x01	; 1
    2cf2:	0d 90       	ld	r0, X+
    2cf4:	bc 91       	ld	r27, X
    2cf6:	a0 2d       	mov	r26, r0
    2cf8:	b7 83       	std	Z+7, r27	; 0x07
    2cfa:	a6 83       	std	Z+6, r26	; 0x06
    2cfc:	16 96       	adiw	r26, 0x06	; 6
    2cfe:	4d 91       	ld	r20, X+
    2d00:	5c 91       	ld	r21, X
    2d02:	17 97       	sbiw	r26, 0x07	; 7
    2d04:	51 87       	std	Z+9, r21	; 0x09
    2d06:	40 87       	std	Z+8, r20	; 0x08
    2d08:	16 96       	adiw	r26, 0x06	; 6
    2d0a:	cd 91       	ld	r28, X+
    2d0c:	dc 91       	ld	r29, X
    2d0e:	17 97       	sbiw	r26, 0x07	; 7
    2d10:	3d 83       	std	Y+5, r19	; 0x05
    2d12:	2c 83       	std	Y+4, r18	; 0x04
    2d14:	17 96       	adiw	r26, 0x07	; 7
    2d16:	3c 93       	st	X, r19
    2d18:	2e 93       	st	-X, r18
    2d1a:	16 97       	sbiw	r26, 0x06	; 6
    2d1c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d1e:	8a 9f       	mul	r24, r26
    2d20:	d0 01       	movw	r26, r0
    2d22:	11 24       	eor	r1, r1
    2d24:	a7 59       	subi	r26, 0x97	; 151
    2d26:	bb 4e       	sbci	r27, 0xEB	; 235
    2d28:	b5 87       	std	Z+13, r27	; 0x0d
    2d2a:	a4 87       	std	Z+12, r26	; 0x0c
    2d2c:	8c 91       	ld	r24, X
    2d2e:	8f 5f       	subi	r24, 0xFF	; 255
    2d30:	8c 93       	st	X, r24
    2d32:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d34:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2d38:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2d3c:	5a 96       	adiw	r26, 0x1a	; 26
    2d3e:	8c 91       	ld	r24, X
    2d40:	98 17       	cp	r25, r24
    2d42:	30 f0       	brcs	.+12     	; 0x2d50 <xTaskResumeAll+0x140>
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	80 93 21 14 	sts	0x1421, r24	; 0x801421 <xYieldPending>
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <xTaskResumeAll+0x140>
    2d4c:	e0 e0       	ldi	r30, 0x00	; 0
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <xPendingReadyList>
    2d54:	81 11       	cpse	r24, r1
    2d56:	73 cf       	rjmp	.-282    	; 0x2c3e <xTaskResumeAll+0x2e>
    2d58:	ef 2b       	or	r30, r31
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <xTaskResumeAll+0x14e>
    2d5c:	7d db       	rcall	.-2310   	; 0x2458 <prvResetNextTaskUnblockTime>
    2d5e:	c0 90 22 14 	lds	r12, 0x1422	; 0x801422 <xPendedTicks>
    2d62:	d0 90 23 14 	lds	r13, 0x1423	; 0x801423 <xPendedTicks+0x1>
    2d66:	e0 90 24 14 	lds	r14, 0x1424	; 0x801424 <xPendedTicks+0x2>
    2d6a:	f0 90 25 14 	lds	r15, 0x1425	; 0x801425 <xPendedTicks+0x3>
    2d6e:	c1 14       	cp	r12, r1
    2d70:	d1 04       	cpc	r13, r1
    2d72:	e1 04       	cpc	r14, r1
    2d74:	f1 04       	cpc	r15, r1
    2d76:	a1 f0       	breq	.+40     	; 0x2da0 <xTaskResumeAll+0x190>
    2d78:	1f de       	rcall	.-962    	; 0x29b8 <xTaskIncrementTick>
    2d7a:	88 23       	and	r24, r24
    2d7c:	19 f0       	breq	.+6      	; 0x2d84 <xTaskResumeAll+0x174>
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	80 93 21 14 	sts	0x1421, r24	; 0x801421 <xYieldPending>
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	c8 1a       	sub	r12, r24
    2d88:	d1 08       	sbc	r13, r1
    2d8a:	e1 08       	sbc	r14, r1
    2d8c:	f1 08       	sbc	r15, r1
    2d8e:	a1 f7       	brne	.-24     	; 0x2d78 <xTaskResumeAll+0x168>
    2d90:	10 92 22 14 	sts	0x1422, r1	; 0x801422 <xPendedTicks>
    2d94:	10 92 23 14 	sts	0x1423, r1	; 0x801423 <xPendedTicks+0x1>
    2d98:	10 92 24 14 	sts	0x1424, r1	; 0x801424 <xPendedTicks+0x2>
    2d9c:	10 92 25 14 	sts	0x1425, r1	; 0x801425 <xPendedTicks+0x3>
    2da0:	80 91 21 14 	lds	r24, 0x1421	; 0x801421 <xYieldPending>
    2da4:	88 23       	and	r24, r24
    2da6:	31 f0       	breq	.+12     	; 0x2db4 <xTaskResumeAll+0x1a4>
    2da8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	03 c0       	rjmp	.+6      	; 0x2db6 <xTaskResumeAll+0x1a6>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	01 c0       	rjmp	.+2      	; 0x2db6 <xTaskResumeAll+0x1a6>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	0f 90       	pop	r0
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	ff 90       	pop	r15
    2dc0:	ef 90       	pop	r14
    2dc2:	df 90       	pop	r13
    2dc4:	cf 90       	pop	r12
    2dc6:	08 95       	ret

00002dc8 <xTaskDelayUntil>:
    2dc8:	8f 92       	push	r8
    2dca:	9f 92       	push	r9
    2dcc:	af 92       	push	r10
    2dce:	bf 92       	push	r11
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	ec 01       	movw	r28, r24
    2de0:	6a 01       	movw	r12, r20
    2de2:	7b 01       	movw	r14, r22
    2de4:	d5 dd       	rcall	.-1110   	; 0x2990 <vTaskSuspendAll>
    2de6:	80 90 28 14 	lds	r8, 0x1428	; 0x801428 <xTickCount>
    2dea:	90 90 29 14 	lds	r9, 0x1429	; 0x801429 <xTickCount+0x1>
    2dee:	a0 90 2a 14 	lds	r10, 0x142A	; 0x80142a <xTickCount+0x2>
    2df2:	b0 90 2b 14 	lds	r11, 0x142B	; 0x80142b <xTickCount+0x3>
    2df6:	88 81       	ld	r24, Y
    2df8:	99 81       	ldd	r25, Y+1	; 0x01
    2dfa:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfc:	bb 81       	ldd	r27, Y+3	; 0x03
    2dfe:	ac 01       	movw	r20, r24
    2e00:	bd 01       	movw	r22, r26
    2e02:	4c 0d       	add	r20, r12
    2e04:	5d 1d       	adc	r21, r13
    2e06:	6e 1d       	adc	r22, r14
    2e08:	7f 1d       	adc	r23, r15
    2e0a:	88 16       	cp	r8, r24
    2e0c:	99 06       	cpc	r9, r25
    2e0e:	aa 06       	cpc	r10, r26
    2e10:	bb 06       	cpc	r11, r27
    2e12:	60 f4       	brcc	.+24     	; 0x2e2c <xTaskDelayUntil+0x64>
    2e14:	48 17       	cp	r20, r24
    2e16:	59 07       	cpc	r21, r25
    2e18:	6a 07       	cpc	r22, r26
    2e1a:	7b 07       	cpc	r23, r27
    2e1c:	98 f4       	brcc	.+38     	; 0x2e44 <xTaskDelayUntil+0x7c>
    2e1e:	84 16       	cp	r8, r20
    2e20:	95 06       	cpc	r9, r21
    2e22:	a6 06       	cpc	r10, r22
    2e24:	b7 06       	cpc	r11, r23
    2e26:	80 f0       	brcs	.+32     	; 0x2e48 <xTaskDelayUntil+0x80>
    2e28:	10 e0       	ldi	r17, 0x00	; 0
    2e2a:	13 c0       	rjmp	.+38     	; 0x2e52 <xTaskDelayUntil+0x8a>
    2e2c:	48 17       	cp	r20, r24
    2e2e:	59 07       	cpc	r21, r25
    2e30:	6a 07       	cpc	r22, r26
    2e32:	7b 07       	cpc	r23, r27
    2e34:	58 f0       	brcs	.+22     	; 0x2e4c <xTaskDelayUntil+0x84>
    2e36:	84 16       	cp	r8, r20
    2e38:	95 06       	cpc	r9, r21
    2e3a:	a6 06       	cpc	r10, r22
    2e3c:	b7 06       	cpc	r11, r23
    2e3e:	40 f0       	brcs	.+16     	; 0x2e50 <xTaskDelayUntil+0x88>
    2e40:	10 e0       	ldi	r17, 0x00	; 0
    2e42:	07 c0       	rjmp	.+14     	; 0x2e52 <xTaskDelayUntil+0x8a>
    2e44:	10 e0       	ldi	r17, 0x00	; 0
    2e46:	05 c0       	rjmp	.+10     	; 0x2e52 <xTaskDelayUntil+0x8a>
    2e48:	11 e0       	ldi	r17, 0x01	; 1
    2e4a:	03 c0       	rjmp	.+6      	; 0x2e52 <xTaskDelayUntil+0x8a>
    2e4c:	11 e0       	ldi	r17, 0x01	; 1
    2e4e:	01 c0       	rjmp	.+2      	; 0x2e52 <xTaskDelayUntil+0x8a>
    2e50:	11 e0       	ldi	r17, 0x01	; 1
    2e52:	48 83       	st	Y, r20
    2e54:	59 83       	std	Y+1, r21	; 0x01
    2e56:	6a 83       	std	Y+2, r22	; 0x02
    2e58:	7b 83       	std	Y+3, r23	; 0x03
    2e5a:	11 23       	and	r17, r17
    2e5c:	41 f0       	breq	.+16     	; 0x2e6e <xTaskDelayUntil+0xa6>
    2e5e:	cb 01       	movw	r24, r22
    2e60:	ba 01       	movw	r22, r20
    2e62:	68 19       	sub	r22, r8
    2e64:	79 09       	sbc	r23, r9
    2e66:	8a 09       	sbc	r24, r10
    2e68:	9b 09       	sbc	r25, r11
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	6b dc       	rcall	.-1834   	; 0x2744 <prvAddCurrentTaskToDelayedList>
    2e6e:	d0 de       	rcall	.-608    	; 0x2c10 <xTaskResumeAll>
    2e70:	81 11       	cpse	r24, r1
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <xTaskDelayUntil+0xb0>
    2e74:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    2e78:	81 2f       	mov	r24, r17
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	ff 90       	pop	r15
    2e82:	ef 90       	pop	r14
    2e84:	df 90       	pop	r13
    2e86:	cf 90       	pop	r12
    2e88:	bf 90       	pop	r11
    2e8a:	af 90       	pop	r10
    2e8c:	9f 90       	pop	r9
    2e8e:	8f 90       	pop	r8
    2e90:	08 95       	ret

00002e92 <vTaskDelay>:
    2e92:	cf 92       	push	r12
    2e94:	df 92       	push	r13
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	6b 01       	movw	r12, r22
    2e9c:	7c 01       	movw	r14, r24
    2e9e:	67 2b       	or	r22, r23
    2ea0:	68 2b       	or	r22, r24
    2ea2:	69 2b       	or	r22, r25
    2ea4:	39 f0       	breq	.+14     	; 0x2eb4 <vTaskDelay+0x22>
    2ea6:	74 dd       	rcall	.-1304   	; 0x2990 <vTaskSuspendAll>
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	c7 01       	movw	r24, r14
    2eac:	b6 01       	movw	r22, r12
    2eae:	4a dc       	rcall	.-1900   	; 0x2744 <prvAddCurrentTaskToDelayedList>
    2eb0:	af de       	rcall	.-674    	; 0x2c10 <xTaskResumeAll>
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <vTaskDelay+0x24>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	81 11       	cpse	r24, r1
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <vTaskDelay+0x2c>
    2eba:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    2ebe:	ff 90       	pop	r15
    2ec0:	ef 90       	pop	r14
    2ec2:	df 90       	pop	r13
    2ec4:	cf 90       	pop	r12
    2ec6:	08 95       	ret

00002ec8 <vTaskSwitchContext>:
    2ec8:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <uxSchedulerSuspended>
    2ecc:	88 23       	and	r24, r24
    2ece:	21 f0       	breq	.+8      	; 0x2ed8 <vTaskSwitchContext+0x10>
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	80 93 21 14 	sts	0x1421, r24	; 0x801421 <xYieldPending>
    2ed6:	08 95       	ret
    2ed8:	10 92 21 14 	sts	0x1421, r1	; 0x801421 <xYieldPending>
    2edc:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2ee0:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2ee4:	20 81       	ld	r18, Z
    2ee6:	31 81       	ldd	r19, Z+1	; 0x01
    2ee8:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2eec:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2ef0:	83 8d       	ldd	r24, Z+27	; 0x1b
    2ef2:	94 8d       	ldd	r25, Z+28	; 0x1c
    2ef4:	82 17       	cp	r24, r18
    2ef6:	93 07       	cpc	r25, r19
    2ef8:	60 f0       	brcs	.+24     	; 0x2f12 <vTaskSwitchContext+0x4a>
    2efa:	60 91 d7 14 	lds	r22, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2efe:	70 91 d8 14 	lds	r23, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2f02:	63 5e       	subi	r22, 0xE3	; 227
    2f04:	7f 4f       	sbci	r23, 0xFF	; 255
    2f06:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2f0a:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2f0e:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <vApplicationStackOverflowHook>
    2f12:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    2f16:	01 c0       	rjmp	.+2      	; 0x2f1a <vTaskSwitchContext+0x52>
    2f18:	81 50       	subi	r24, 0x01	; 1
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	9b e0       	ldi	r25, 0x0B	; 11
    2f20:	92 9f       	mul	r25, r18
    2f22:	f0 01       	movw	r30, r0
    2f24:	93 9f       	mul	r25, r19
    2f26:	f0 0d       	add	r31, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	e7 59       	subi	r30, 0x97	; 151
    2f2c:	fb 4e       	sbci	r31, 0xEB	; 235
    2f2e:	90 81       	ld	r25, Z
    2f30:	99 23       	and	r25, r25
    2f32:	91 f3       	breq	.-28     	; 0x2f18 <vTaskSwitchContext+0x50>
    2f34:	9b e0       	ldi	r25, 0x0B	; 11
    2f36:	92 9f       	mul	r25, r18
    2f38:	a0 01       	movw	r20, r0
    2f3a:	93 9f       	mul	r25, r19
    2f3c:	50 0d       	add	r21, r0
    2f3e:	11 24       	eor	r1, r1
    2f40:	df 01       	movw	r26, r30
    2f42:	01 80       	ldd	r0, Z+1	; 0x01
    2f44:	f2 81       	ldd	r31, Z+2	; 0x02
    2f46:	e0 2d       	mov	r30, r0
    2f48:	04 80       	ldd	r0, Z+4	; 0x04
    2f4a:	f5 81       	ldd	r31, Z+5	; 0x05
    2f4c:	e0 2d       	mov	r30, r0
    2f4e:	12 96       	adiw	r26, 0x02	; 2
    2f50:	fc 93       	st	X, r31
    2f52:	ee 93       	st	-X, r30
    2f54:	11 97       	sbiw	r26, 0x01	; 1
    2f56:	44 59       	subi	r20, 0x94	; 148
    2f58:	5b 4e       	sbci	r21, 0xEB	; 235
    2f5a:	e4 17       	cp	r30, r20
    2f5c:	f5 07       	cpc	r31, r21
    2f5e:	29 f4       	brne	.+10     	; 0x2f6a <vTaskSwitchContext+0xa2>
    2f60:	44 81       	ldd	r20, Z+4	; 0x04
    2f62:	55 81       	ldd	r21, Z+5	; 0x05
    2f64:	fd 01       	movw	r30, r26
    2f66:	52 83       	std	Z+2, r21	; 0x02
    2f68:	41 83       	std	Z+1, r20	; 0x01
    2f6a:	9b e0       	ldi	r25, 0x0B	; 11
    2f6c:	92 9f       	mul	r25, r18
    2f6e:	f0 01       	movw	r30, r0
    2f70:	93 9f       	mul	r25, r19
    2f72:	f0 0d       	add	r31, r0
    2f74:	11 24       	eor	r1, r1
    2f76:	e7 59       	subi	r30, 0x97	; 151
    2f78:	fb 4e       	sbci	r31, 0xEB	; 235
    2f7a:	01 80       	ldd	r0, Z+1	; 0x01
    2f7c:	f2 81       	ldd	r31, Z+2	; 0x02
    2f7e:	e0 2d       	mov	r30, r0
    2f80:	20 85       	ldd	r18, Z+8	; 0x08
    2f82:	31 85       	ldd	r19, Z+9	; 0x09
    2f84:	30 93 d8 14 	sts	0x14D8, r19	; 0x8014d8 <pxCurrentTCB+0x1>
    2f88:	20 93 d7 14 	sts	0x14D7, r18	; 0x8014d7 <pxCurrentTCB>
    2f8c:	80 93 27 14 	sts	0x1427, r24	; 0x801427 <uxTopReadyPriority>
    2f90:	08 95       	ret

00002f92 <vTaskPlaceOnEventList>:
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	6a 01       	movw	r12, r20
    2f9c:	7b 01       	movw	r14, r22
    2f9e:	60 91 d7 14 	lds	r22, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2fa2:	70 91 d8 14 	lds	r23, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2fa6:	62 5f       	subi	r22, 0xF2	; 242
    2fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2faa:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	c7 01       	movw	r24, r14
    2fb2:	b6 01       	movw	r22, r12
    2fb4:	c7 db       	rcall	.-2162   	; 0x2744 <prvAddCurrentTaskToDelayedList>
    2fb6:	ff 90       	pop	r15
    2fb8:	ef 90       	pop	r14
    2fba:	df 90       	pop	r13
    2fbc:	cf 90       	pop	r12
    2fbe:	08 95       	ret

00002fc0 <vTaskPlaceOnUnorderedEventList>:
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	fc 01       	movw	r30, r24
    2fca:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2fce:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2fd2:	70 68       	ori	r23, 0x80	; 128
    2fd4:	1e 96       	adiw	r26, 0x0e	; 14
    2fd6:	4d 93       	st	X+, r20
    2fd8:	5d 93       	st	X+, r21
    2fda:	6d 93       	st	X+, r22
    2fdc:	7c 93       	st	X, r23
    2fde:	51 97       	sbiw	r26, 0x11	; 17
    2fe0:	a1 81       	ldd	r26, Z+1	; 0x01
    2fe2:	b2 81       	ldd	r27, Z+2	; 0x02
    2fe4:	c0 91 d7 14 	lds	r28, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2fe8:	d0 91 d8 14 	lds	r29, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2fec:	bb 8b       	std	Y+19, r27	; 0x13
    2fee:	aa 8b       	std	Y+18, r26	; 0x12
    2ff0:	c0 91 d7 14 	lds	r28, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    2ff4:	d0 91 d8 14 	lds	r29, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    2ff8:	16 96       	adiw	r26, 0x06	; 6
    2ffa:	8d 91       	ld	r24, X+
    2ffc:	9c 91       	ld	r25, X
    2ffe:	17 97       	sbiw	r26, 0x07	; 7
    3000:	9d 8b       	std	Y+21, r25	; 0x15
    3002:	8c 8b       	std	Y+20, r24	; 0x14
    3004:	16 96       	adiw	r26, 0x06	; 6
    3006:	cd 91       	ld	r28, X+
    3008:	dc 91       	ld	r29, X
    300a:	17 97       	sbiw	r26, 0x07	; 7
    300c:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3010:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3014:	0e 96       	adiw	r24, 0x0e	; 14
    3016:	9d 83       	std	Y+5, r25	; 0x05
    3018:	8c 83       	std	Y+4, r24	; 0x04
    301a:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    301e:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3022:	0e 96       	adiw	r24, 0x0e	; 14
    3024:	17 96       	adiw	r26, 0x07	; 7
    3026:	9c 93       	st	X, r25
    3028:	8e 93       	st	-X, r24
    302a:	16 97       	sbiw	r26, 0x06	; 6
    302c:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3030:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3034:	59 96       	adiw	r26, 0x19	; 25
    3036:	fc 93       	st	X, r31
    3038:	ee 93       	st	-X, r30
    303a:	58 97       	sbiw	r26, 0x18	; 24
    303c:	80 81       	ld	r24, Z
    303e:	8f 5f       	subi	r24, 0xFF	; 255
    3040:	80 83       	st	Z, r24
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	c9 01       	movw	r24, r18
    3046:	b8 01       	movw	r22, r16
    3048:	7d db       	rcall	.-2310   	; 0x2744 <prvAddCurrentTaskToDelayedList>
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	0f 91       	pop	r16
    3052:	08 95       	ret

00003054 <vTaskPlaceOnEventListRestricted>:
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	fc 01       	movw	r30, r24
    305a:	cb 01       	movw	r24, r22
    305c:	ba 01       	movw	r22, r20
    305e:	a1 81       	ldd	r26, Z+1	; 0x01
    3060:	b2 81       	ldd	r27, Z+2	; 0x02
    3062:	c0 91 d7 14 	lds	r28, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3066:	d0 91 d8 14 	lds	r29, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    306a:	bb 8b       	std	Y+19, r27	; 0x13
    306c:	aa 8b       	std	Y+18, r26	; 0x12
    306e:	c0 91 d7 14 	lds	r28, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3072:	d0 91 d8 14 	lds	r29, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3076:	16 96       	adiw	r26, 0x06	; 6
    3078:	4d 91       	ld	r20, X+
    307a:	5c 91       	ld	r21, X
    307c:	17 97       	sbiw	r26, 0x07	; 7
    307e:	5d 8b       	std	Y+21, r21	; 0x15
    3080:	4c 8b       	std	Y+20, r20	; 0x14
    3082:	16 96       	adiw	r26, 0x06	; 6
    3084:	cd 91       	ld	r28, X+
    3086:	dc 91       	ld	r29, X
    3088:	17 97       	sbiw	r26, 0x07	; 7
    308a:	40 91 d7 14 	lds	r20, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    308e:	50 91 d8 14 	lds	r21, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3092:	42 5f       	subi	r20, 0xF2	; 242
    3094:	5f 4f       	sbci	r21, 0xFF	; 255
    3096:	5d 83       	std	Y+5, r21	; 0x05
    3098:	4c 83       	std	Y+4, r20	; 0x04
    309a:	40 91 d7 14 	lds	r20, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    309e:	50 91 d8 14 	lds	r21, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    30a2:	42 5f       	subi	r20, 0xF2	; 242
    30a4:	5f 4f       	sbci	r21, 0xFF	; 255
    30a6:	17 96       	adiw	r26, 0x07	; 7
    30a8:	5c 93       	st	X, r21
    30aa:	4e 93       	st	-X, r20
    30ac:	16 97       	sbiw	r26, 0x06	; 6
    30ae:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    30b2:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    30b6:	59 96       	adiw	r26, 0x19	; 25
    30b8:	fc 93       	st	X, r31
    30ba:	ee 93       	st	-X, r30
    30bc:	58 97       	sbiw	r26, 0x18	; 24
    30be:	30 81       	ld	r19, Z
    30c0:	3f 5f       	subi	r19, 0xFF	; 255
    30c2:	30 83       	st	Z, r19
    30c4:	22 23       	and	r18, r18
    30c6:	19 f0       	breq	.+6      	; 0x30ce <vTaskPlaceOnEventListRestricted+0x7a>
    30c8:	6f ef       	ldi	r22, 0xFF	; 255
    30ca:	7f ef       	ldi	r23, 0xFF	; 255
    30cc:	cb 01       	movw	r24, r22
    30ce:	42 2f       	mov	r20, r18
    30d0:	39 db       	rcall	.-2446   	; 0x2744 <prvAddCurrentTaskToDelayedList>
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	08 95       	ret

000030d8 <xTaskRemoveFromEventList>:
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	dc 01       	movw	r26, r24
    30de:	17 96       	adiw	r26, 0x07	; 7
    30e0:	ed 91       	ld	r30, X+
    30e2:	fc 91       	ld	r31, X
    30e4:	18 97       	sbiw	r26, 0x08	; 8
    30e6:	00 84       	ldd	r0, Z+8	; 0x08
    30e8:	f1 85       	ldd	r31, Z+9	; 0x09
    30ea:	e0 2d       	mov	r30, r0
    30ec:	a0 8d       	ldd	r26, Z+24	; 0x18
    30ee:	b1 8d       	ldd	r27, Z+25	; 0x19
    30f0:	c2 89       	ldd	r28, Z+18	; 0x12
    30f2:	d3 89       	ldd	r29, Z+19	; 0x13
    30f4:	84 89       	ldd	r24, Z+20	; 0x14
    30f6:	95 89       	ldd	r25, Z+21	; 0x15
    30f8:	9f 83       	std	Y+7, r25	; 0x07
    30fa:	8e 83       	std	Y+6, r24	; 0x06
    30fc:	c4 89       	ldd	r28, Z+20	; 0x14
    30fe:	d5 89       	ldd	r29, Z+21	; 0x15
    3100:	82 89       	ldd	r24, Z+18	; 0x12
    3102:	93 89       	ldd	r25, Z+19	; 0x13
    3104:	9d 83       	std	Y+5, r25	; 0x05
    3106:	8c 83       	std	Y+4, r24	; 0x04
    3108:	11 96       	adiw	r26, 0x01	; 1
    310a:	8d 91       	ld	r24, X+
    310c:	9c 91       	ld	r25, X
    310e:	12 97       	sbiw	r26, 0x02	; 2
    3110:	9f 01       	movw	r18, r30
    3112:	22 5f       	subi	r18, 0xF2	; 242
    3114:	3f 4f       	sbci	r19, 0xFF	; 255
    3116:	82 17       	cp	r24, r18
    3118:	93 07       	cpc	r25, r19
    311a:	31 f4       	brne	.+12     	; 0x3128 <xTaskRemoveFromEventList+0x50>
    311c:	84 89       	ldd	r24, Z+20	; 0x14
    311e:	95 89       	ldd	r25, Z+21	; 0x15
    3120:	12 96       	adiw	r26, 0x02	; 2
    3122:	9c 93       	st	X, r25
    3124:	8e 93       	st	-X, r24
    3126:	11 97       	sbiw	r26, 0x01	; 1
    3128:	11 8e       	std	Z+25, r1	; 0x19
    312a:	10 8e       	std	Z+24, r1	; 0x18
    312c:	8c 91       	ld	r24, X
    312e:	81 50       	subi	r24, 0x01	; 1
    3130:	8c 93       	st	X, r24
    3132:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <uxSchedulerSuspended>
    3136:	81 11       	cpse	r24, r1
    3138:	52 c0       	rjmp	.+164    	; 0x31de <xTaskRemoveFromEventList+0x106>
    313a:	a4 85       	ldd	r26, Z+12	; 0x0c
    313c:	b5 85       	ldd	r27, Z+13	; 0x0d
    313e:	c6 81       	ldd	r28, Z+6	; 0x06
    3140:	d7 81       	ldd	r29, Z+7	; 0x07
    3142:	80 85       	ldd	r24, Z+8	; 0x08
    3144:	91 85       	ldd	r25, Z+9	; 0x09
    3146:	9f 83       	std	Y+7, r25	; 0x07
    3148:	8e 83       	std	Y+6, r24	; 0x06
    314a:	c0 85       	ldd	r28, Z+8	; 0x08
    314c:	d1 85       	ldd	r29, Z+9	; 0x09
    314e:	86 81       	ldd	r24, Z+6	; 0x06
    3150:	97 81       	ldd	r25, Z+7	; 0x07
    3152:	9d 83       	std	Y+5, r25	; 0x05
    3154:	8c 83       	std	Y+4, r24	; 0x04
    3156:	11 96       	adiw	r26, 0x01	; 1
    3158:	8d 91       	ld	r24, X+
    315a:	9c 91       	ld	r25, X
    315c:	12 97       	sbiw	r26, 0x02	; 2
    315e:	9f 01       	movw	r18, r30
    3160:	2e 5f       	subi	r18, 0xFE	; 254
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	82 17       	cp	r24, r18
    3166:	93 07       	cpc	r25, r19
    3168:	31 f4       	brne	.+12     	; 0x3176 <xTaskRemoveFromEventList+0x9e>
    316a:	80 85       	ldd	r24, Z+8	; 0x08
    316c:	91 85       	ldd	r25, Z+9	; 0x09
    316e:	12 96       	adiw	r26, 0x02	; 2
    3170:	9c 93       	st	X, r25
    3172:	8e 93       	st	-X, r24
    3174:	11 97       	sbiw	r26, 0x01	; 1
    3176:	15 86       	std	Z+13, r1	; 0x0d
    3178:	14 86       	std	Z+12, r1	; 0x0c
    317a:	8c 91       	ld	r24, X
    317c:	81 50       	subi	r24, 0x01	; 1
    317e:	8c 93       	st	X, r24
    3180:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3182:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    3186:	8a 17       	cp	r24, r26
    3188:	10 f4       	brcc	.+4      	; 0x318e <xTaskRemoveFromEventList+0xb6>
    318a:	a0 93 27 14 	sts	0x1427, r26	; 0x801427 <uxTopReadyPriority>
    318e:	8b e0       	ldi	r24, 0x0B	; 11
    3190:	8a 9f       	mul	r24, r26
    3192:	d0 01       	movw	r26, r0
    3194:	11 24       	eor	r1, r1
    3196:	a7 59       	subi	r26, 0x97	; 151
    3198:	bb 4e       	sbci	r27, 0xEB	; 235
    319a:	11 96       	adiw	r26, 0x01	; 1
    319c:	0d 90       	ld	r0, X+
    319e:	bc 91       	ld	r27, X
    31a0:	a0 2d       	mov	r26, r0
    31a2:	b7 83       	std	Z+7, r27	; 0x07
    31a4:	a6 83       	std	Z+6, r26	; 0x06
    31a6:	16 96       	adiw	r26, 0x06	; 6
    31a8:	4d 91       	ld	r20, X+
    31aa:	5c 91       	ld	r21, X
    31ac:	17 97       	sbiw	r26, 0x07	; 7
    31ae:	51 87       	std	Z+9, r21	; 0x09
    31b0:	40 87       	std	Z+8, r20	; 0x08
    31b2:	16 96       	adiw	r26, 0x06	; 6
    31b4:	cd 91       	ld	r28, X+
    31b6:	dc 91       	ld	r29, X
    31b8:	17 97       	sbiw	r26, 0x07	; 7
    31ba:	3d 83       	std	Y+5, r19	; 0x05
    31bc:	2c 83       	std	Y+4, r18	; 0x04
    31be:	17 96       	adiw	r26, 0x07	; 7
    31c0:	3c 93       	st	X, r19
    31c2:	2e 93       	st	-X, r18
    31c4:	16 97       	sbiw	r26, 0x06	; 6
    31c6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    31c8:	8a 9f       	mul	r24, r26
    31ca:	d0 01       	movw	r26, r0
    31cc:	11 24       	eor	r1, r1
    31ce:	a7 59       	subi	r26, 0x97	; 151
    31d0:	bb 4e       	sbci	r27, 0xEB	; 235
    31d2:	b5 87       	std	Z+13, r27	; 0x0d
    31d4:	a4 87       	std	Z+12, r26	; 0x0c
    31d6:	8c 91       	ld	r24, X
    31d8:	8f 5f       	subi	r24, 0xFF	; 255
    31da:	8c 93       	st	X, r24
    31dc:	1c c0       	rjmp	.+56     	; 0x3216 <xTaskRemoveFromEventList+0x13e>
    31de:	44 e4       	ldi	r20, 0x44	; 68
    31e0:	54 e1       	ldi	r21, 0x14	; 20
    31e2:	da 01       	movw	r26, r20
    31e4:	11 96       	adiw	r26, 0x01	; 1
    31e6:	cd 91       	ld	r28, X+
    31e8:	dc 91       	ld	r29, X
    31ea:	12 97       	sbiw	r26, 0x02	; 2
    31ec:	d3 8b       	std	Z+19, r29	; 0x13
    31ee:	c2 8b       	std	Z+18, r28	; 0x12
    31f0:	8e 81       	ldd	r24, Y+6	; 0x06
    31f2:	9f 81       	ldd	r25, Y+7	; 0x07
    31f4:	95 8b       	std	Z+21, r25	; 0x15
    31f6:	84 8b       	std	Z+20, r24	; 0x14
    31f8:	8e 81       	ldd	r24, Y+6	; 0x06
    31fa:	9f 81       	ldd	r25, Y+7	; 0x07
    31fc:	dc 01       	movw	r26, r24
    31fe:	15 96       	adiw	r26, 0x05	; 5
    3200:	3c 93       	st	X, r19
    3202:	2e 93       	st	-X, r18
    3204:	14 97       	sbiw	r26, 0x04	; 4
    3206:	3f 83       	std	Y+7, r19	; 0x07
    3208:	2e 83       	std	Y+6, r18	; 0x06
    320a:	51 8f       	std	Z+25, r21	; 0x19
    320c:	40 8f       	std	Z+24, r20	; 0x18
    320e:	da 01       	movw	r26, r20
    3210:	8c 91       	ld	r24, X
    3212:	8f 5f       	subi	r24, 0xFF	; 255
    3214:	8c 93       	st	X, r24
    3216:	92 8d       	ldd	r25, Z+26	; 0x1a
    3218:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    321c:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3220:	82 8d       	ldd	r24, Z+26	; 0x1a
    3222:	89 17       	cp	r24, r25
    3224:	20 f4       	brcc	.+8      	; 0x322e <xTaskRemoveFromEventList+0x156>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	80 93 21 14 	sts	0x1421, r24	; 0x801421 <xYieldPending>
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <xTaskRemoveFromEventList+0x158>
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	08 95       	ret

00003236 <vTaskRemoveFromUnorderedEventList>:
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	dc 01       	movw	r26, r24
    323c:	70 68       	ori	r23, 0x80	; 128
    323e:	4d 93       	st	X+, r20
    3240:	5d 93       	st	X+, r21
    3242:	6d 93       	st	X+, r22
    3244:	7c 93       	st	X, r23
    3246:	13 97       	sbiw	r26, 0x03	; 3
    3248:	18 96       	adiw	r26, 0x08	; 8
    324a:	ed 91       	ld	r30, X+
    324c:	fc 91       	ld	r31, X
    324e:	19 97       	sbiw	r26, 0x09	; 9
    3250:	1a 96       	adiw	r26, 0x0a	; 10
    3252:	4d 91       	ld	r20, X+
    3254:	5c 91       	ld	r21, X
    3256:	1b 97       	sbiw	r26, 0x0b	; 11
    3258:	14 96       	adiw	r26, 0x04	; 4
    325a:	8d 91       	ld	r24, X+
    325c:	9c 91       	ld	r25, X
    325e:	15 97       	sbiw	r26, 0x05	; 5
    3260:	16 96       	adiw	r26, 0x06	; 6
    3262:	2d 91       	ld	r18, X+
    3264:	3c 91       	ld	r19, X
    3266:	17 97       	sbiw	r26, 0x07	; 7
    3268:	ec 01       	movw	r28, r24
    326a:	3f 83       	std	Y+7, r19	; 0x07
    326c:	2e 83       	std	Y+6, r18	; 0x06
    326e:	16 96       	adiw	r26, 0x06	; 6
    3270:	8d 91       	ld	r24, X+
    3272:	9c 91       	ld	r25, X
    3274:	17 97       	sbiw	r26, 0x07	; 7
    3276:	14 96       	adiw	r26, 0x04	; 4
    3278:	2d 91       	ld	r18, X+
    327a:	3c 91       	ld	r19, X
    327c:	15 97       	sbiw	r26, 0x05	; 5
    327e:	ec 01       	movw	r28, r24
    3280:	3d 83       	std	Y+5, r19	; 0x05
    3282:	2c 83       	std	Y+4, r18	; 0x04
    3284:	ea 01       	movw	r28, r20
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	a8 17       	cp	r26, r24
    328c:	b9 07       	cpc	r27, r25
    328e:	31 f4       	brne	.+12     	; 0x329c <vTaskRemoveFromUnorderedEventList+0x66>
    3290:	16 96       	adiw	r26, 0x06	; 6
    3292:	8d 91       	ld	r24, X+
    3294:	9c 91       	ld	r25, X
    3296:	17 97       	sbiw	r26, 0x07	; 7
    3298:	9a 83       	std	Y+2, r25	; 0x02
    329a:	89 83       	std	Y+1, r24	; 0x01
    329c:	1b 96       	adiw	r26, 0x0b	; 11
    329e:	1c 92       	st	X, r1
    32a0:	1e 92       	st	-X, r1
    32a2:	1a 97       	sbiw	r26, 0x0a	; 10
    32a4:	da 01       	movw	r26, r20
    32a6:	8c 91       	ld	r24, X
    32a8:	81 50       	subi	r24, 0x01	; 1
    32aa:	8c 93       	st	X, r24
    32ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    32ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    32b0:	c6 81       	ldd	r28, Z+6	; 0x06
    32b2:	d7 81       	ldd	r29, Z+7	; 0x07
    32b4:	80 85       	ldd	r24, Z+8	; 0x08
    32b6:	91 85       	ldd	r25, Z+9	; 0x09
    32b8:	9f 83       	std	Y+7, r25	; 0x07
    32ba:	8e 83       	std	Y+6, r24	; 0x06
    32bc:	c0 85       	ldd	r28, Z+8	; 0x08
    32be:	d1 85       	ldd	r29, Z+9	; 0x09
    32c0:	86 81       	ldd	r24, Z+6	; 0x06
    32c2:	97 81       	ldd	r25, Z+7	; 0x07
    32c4:	9d 83       	std	Y+5, r25	; 0x05
    32c6:	8c 83       	std	Y+4, r24	; 0x04
    32c8:	11 96       	adiw	r26, 0x01	; 1
    32ca:	8d 91       	ld	r24, X+
    32cc:	9c 91       	ld	r25, X
    32ce:	12 97       	sbiw	r26, 0x02	; 2
    32d0:	9f 01       	movw	r18, r30
    32d2:	2e 5f       	subi	r18, 0xFE	; 254
    32d4:	3f 4f       	sbci	r19, 0xFF	; 255
    32d6:	82 17       	cp	r24, r18
    32d8:	93 07       	cpc	r25, r19
    32da:	31 f4       	brne	.+12     	; 0x32e8 <vTaskRemoveFromUnorderedEventList+0xb2>
    32dc:	80 85       	ldd	r24, Z+8	; 0x08
    32de:	91 85       	ldd	r25, Z+9	; 0x09
    32e0:	12 96       	adiw	r26, 0x02	; 2
    32e2:	9c 93       	st	X, r25
    32e4:	8e 93       	st	-X, r24
    32e6:	11 97       	sbiw	r26, 0x01	; 1
    32e8:	15 86       	std	Z+13, r1	; 0x0d
    32ea:	14 86       	std	Z+12, r1	; 0x0c
    32ec:	8c 91       	ld	r24, X
    32ee:	81 50       	subi	r24, 0x01	; 1
    32f0:	8c 93       	st	X, r24
    32f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    32f4:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    32f8:	8a 17       	cp	r24, r26
    32fa:	10 f4       	brcc	.+4      	; 0x3300 <vTaskRemoveFromUnorderedEventList+0xca>
    32fc:	a0 93 27 14 	sts	0x1427, r26	; 0x801427 <uxTopReadyPriority>
    3300:	8b e0       	ldi	r24, 0x0B	; 11
    3302:	8a 9f       	mul	r24, r26
    3304:	d0 01       	movw	r26, r0
    3306:	11 24       	eor	r1, r1
    3308:	a7 59       	subi	r26, 0x97	; 151
    330a:	bb 4e       	sbci	r27, 0xEB	; 235
    330c:	11 96       	adiw	r26, 0x01	; 1
    330e:	0d 90       	ld	r0, X+
    3310:	bc 91       	ld	r27, X
    3312:	a0 2d       	mov	r26, r0
    3314:	b7 83       	std	Z+7, r27	; 0x07
    3316:	a6 83       	std	Z+6, r26	; 0x06
    3318:	16 96       	adiw	r26, 0x06	; 6
    331a:	4d 91       	ld	r20, X+
    331c:	5c 91       	ld	r21, X
    331e:	17 97       	sbiw	r26, 0x07	; 7
    3320:	51 87       	std	Z+9, r21	; 0x09
    3322:	40 87       	std	Z+8, r20	; 0x08
    3324:	16 96       	adiw	r26, 0x06	; 6
    3326:	cd 91       	ld	r28, X+
    3328:	dc 91       	ld	r29, X
    332a:	17 97       	sbiw	r26, 0x07	; 7
    332c:	3d 83       	std	Y+5, r19	; 0x05
    332e:	2c 83       	std	Y+4, r18	; 0x04
    3330:	17 96       	adiw	r26, 0x07	; 7
    3332:	3c 93       	st	X, r19
    3334:	2e 93       	st	-X, r18
    3336:	16 97       	sbiw	r26, 0x06	; 6
    3338:	a2 8d       	ldd	r26, Z+26	; 0x1a
    333a:	8a 9f       	mul	r24, r26
    333c:	d0 01       	movw	r26, r0
    333e:	11 24       	eor	r1, r1
    3340:	a7 59       	subi	r26, 0x97	; 151
    3342:	bb 4e       	sbci	r27, 0xEB	; 235
    3344:	b5 87       	std	Z+13, r27	; 0x0d
    3346:	a4 87       	std	Z+12, r26	; 0x0c
    3348:	8c 91       	ld	r24, X
    334a:	8f 5f       	subi	r24, 0xFF	; 255
    334c:	8c 93       	st	X, r24
    334e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3350:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3354:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3358:	82 8d       	ldd	r24, Z+26	; 0x1a
    335a:	89 17       	cp	r24, r25
    335c:	18 f4       	brcc	.+6      	; 0x3364 <vTaskRemoveFromUnorderedEventList+0x12e>
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	80 93 21 14 	sts	0x1421, r24	; 0x801421 <xYieldPending>
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <vTaskSetTimeOutState>:
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	0f 92       	push	r0
    3370:	20 91 20 14 	lds	r18, 0x1420	; 0x801420 <xNumOfOverflows>
    3374:	fc 01       	movw	r30, r24
    3376:	20 83       	st	Z, r18
    3378:	40 91 28 14 	lds	r20, 0x1428	; 0x801428 <xTickCount>
    337c:	50 91 29 14 	lds	r21, 0x1429	; 0x801429 <xTickCount+0x1>
    3380:	60 91 2a 14 	lds	r22, 0x142A	; 0x80142a <xTickCount+0x2>
    3384:	70 91 2b 14 	lds	r23, 0x142B	; 0x80142b <xTickCount+0x3>
    3388:	41 83       	std	Z+1, r20	; 0x01
    338a:	52 83       	std	Z+2, r21	; 0x02
    338c:	63 83       	std	Z+3, r22	; 0x03
    338e:	74 83       	std	Z+4, r23	; 0x04
    3390:	0f 90       	pop	r0
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	08 95       	ret

00003396 <vTaskInternalSetTimeOutState>:
    3396:	20 91 20 14 	lds	r18, 0x1420	; 0x801420 <xNumOfOverflows>
    339a:	fc 01       	movw	r30, r24
    339c:	20 83       	st	Z, r18
    339e:	40 91 28 14 	lds	r20, 0x1428	; 0x801428 <xTickCount>
    33a2:	50 91 29 14 	lds	r21, 0x1429	; 0x801429 <xTickCount+0x1>
    33a6:	60 91 2a 14 	lds	r22, 0x142A	; 0x80142a <xTickCount+0x2>
    33aa:	70 91 2b 14 	lds	r23, 0x142B	; 0x80142b <xTickCount+0x3>
    33ae:	41 83       	std	Z+1, r20	; 0x01
    33b0:	52 83       	std	Z+2, r21	; 0x02
    33b2:	63 83       	std	Z+3, r22	; 0x03
    33b4:	74 83       	std	Z+4, r23	; 0x04
    33b6:	08 95       	ret

000033b8 <xTaskCheckForTimeOut>:
    33b8:	8f 92       	push	r8
    33ba:	9f 92       	push	r9
    33bc:	af 92       	push	r10
    33be:	bf 92       	push	r11
    33c0:	cf 92       	push	r12
    33c2:	df 92       	push	r13
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	1f 93       	push	r17
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	fb 01       	movw	r30, r22
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	0f 92       	push	r0
    33d8:	c0 90 28 14 	lds	r12, 0x1428	; 0x801428 <xTickCount>
    33dc:	d0 90 29 14 	lds	r13, 0x1429	; 0x801429 <xTickCount+0x1>
    33e0:	e0 90 2a 14 	lds	r14, 0x142A	; 0x80142a <xTickCount+0x2>
    33e4:	f0 90 2b 14 	lds	r15, 0x142B	; 0x80142b <xTickCount+0x3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	11 96       	adiw	r26, 0x01	; 1
    33ec:	0d 91       	ld	r16, X+
    33ee:	1d 91       	ld	r17, X+
    33f0:	2d 91       	ld	r18, X+
    33f2:	3c 91       	ld	r19, X
    33f4:	14 97       	sbiw	r26, 0x04	; 4
    33f6:	46 01       	movw	r8, r12
    33f8:	57 01       	movw	r10, r14
    33fa:	80 1a       	sub	r8, r16
    33fc:	91 0a       	sbc	r9, r17
    33fe:	a2 0a       	sbc	r10, r18
    3400:	b3 0a       	sbc	r11, r19
    3402:	40 81       	ld	r20, Z
    3404:	51 81       	ldd	r21, Z+1	; 0x01
    3406:	62 81       	ldd	r22, Z+2	; 0x02
    3408:	73 81       	ldd	r23, Z+3	; 0x03
    340a:	4f 3f       	cpi	r20, 0xFF	; 255
    340c:	bf ef       	ldi	r27, 0xFF	; 255
    340e:	5b 07       	cpc	r21, r27
    3410:	6b 07       	cpc	r22, r27
    3412:	7b 07       	cpc	r23, r27
    3414:	39 f1       	breq	.+78     	; 0x3464 <xTaskCheckForTimeOut+0xac>
    3416:	ec 01       	movw	r28, r24
    3418:	b8 81       	ld	r27, Y
    341a:	a0 91 20 14 	lds	r26, 0x1420	; 0x801420 <xNumOfOverflows>
    341e:	ba 17       	cp	r27, r26
    3420:	59 f0       	breq	.+22     	; 0x3438 <xTaskCheckForTimeOut+0x80>
    3422:	c0 16       	cp	r12, r16
    3424:	d1 06       	cpc	r13, r17
    3426:	e2 06       	cpc	r14, r18
    3428:	f3 06       	cpc	r15, r19
    342a:	30 f0       	brcs	.+12     	; 0x3438 <xTaskCheckForTimeOut+0x80>
    342c:	10 82       	st	Z, r1
    342e:	11 82       	std	Z+1, r1	; 0x01
    3430:	12 82       	std	Z+2, r1	; 0x02
    3432:	13 82       	std	Z+3, r1	; 0x03
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	17 c0       	rjmp	.+46     	; 0x3466 <xTaskCheckForTimeOut+0xae>
    3438:	84 16       	cp	r8, r20
    343a:	95 06       	cpc	r9, r21
    343c:	a6 06       	cpc	r10, r22
    343e:	b7 06       	cpc	r11, r23
    3440:	58 f4       	brcc	.+22     	; 0x3458 <xTaskCheckForTimeOut+0xa0>
    3442:	48 19       	sub	r20, r8
    3444:	59 09       	sbc	r21, r9
    3446:	6a 09       	sbc	r22, r10
    3448:	7b 09       	sbc	r23, r11
    344a:	40 83       	st	Z, r20
    344c:	51 83       	std	Z+1, r21	; 0x01
    344e:	62 83       	std	Z+2, r22	; 0x02
    3450:	73 83       	std	Z+3, r23	; 0x03
    3452:	a1 df       	rcall	.-190    	; 0x3396 <vTaskInternalSetTimeOutState>
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	07 c0       	rjmp	.+14     	; 0x3466 <xTaskCheckForTimeOut+0xae>
    3458:	10 82       	st	Z, r1
    345a:	11 82       	std	Z+1, r1	; 0x01
    345c:	12 82       	std	Z+2, r1	; 0x02
    345e:	13 82       	std	Z+3, r1	; 0x03
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <xTaskCheckForTimeOut+0xae>
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	1f 91       	pop	r17
    3470:	0f 91       	pop	r16
    3472:	ff 90       	pop	r15
    3474:	ef 90       	pop	r14
    3476:	df 90       	pop	r13
    3478:	cf 90       	pop	r12
    347a:	bf 90       	pop	r11
    347c:	af 90       	pop	r10
    347e:	9f 90       	pop	r9
    3480:	8f 90       	pop	r8
    3482:	08 95       	ret

00003484 <vTaskMissedYield>:
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	80 93 21 14 	sts	0x1421, r24	; 0x801421 <xYieldPending>
    348a:	08 95       	ret

0000348c <xTaskGetCurrentTaskHandle>:
    348c:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3490:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3494:	08 95       	ret

00003496 <xTaskGetSchedulerState>:
    3496:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <xSchedulerRunning>
    349a:	88 23       	and	r24, r24
    349c:	31 f0       	breq	.+12     	; 0x34aa <xTaskGetSchedulerState+0x14>
    349e:	80 91 18 14 	lds	r24, 0x1418	; 0x801418 <uxSchedulerSuspended>
    34a2:	81 11       	cpse	r24, r1
    34a4:	04 c0       	rjmp	.+8      	; 0x34ae <xTaskGetSchedulerState+0x18>
    34a6:	82 e0       	ldi	r24, 0x02	; 2
    34a8:	08 95       	ret
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	08 95       	ret
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	08 95       	ret

000034b2 <xTaskPriorityInherit>:
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	fc 01       	movw	r30, r24
    34bc:	89 2b       	or	r24, r25
    34be:	09 f4       	brne	.+2      	; 0x34c2 <xTaskPriorityInherit+0x10>
    34c0:	77 c0       	rjmp	.+238    	; 0x35b0 <xTaskPriorityInherit+0xfe>
    34c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34c4:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    34c8:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    34cc:	5a 96       	adiw	r26, 0x1a	; 26
    34ce:	9c 91       	ld	r25, X
    34d0:	89 17       	cp	r24, r25
    34d2:	08 f0       	brcs	.+2      	; 0x34d6 <xTaskPriorityInherit+0x24>
    34d4:	63 c0       	rjmp	.+198    	; 0x359c <xTaskPriorityInherit+0xea>
    34d6:	46 85       	ldd	r20, Z+14	; 0x0e
    34d8:	57 85       	ldd	r21, Z+15	; 0x0f
    34da:	60 89       	ldd	r22, Z+16	; 0x10
    34dc:	71 89       	ldd	r23, Z+17	; 0x11
    34de:	77 23       	and	r23, r23
    34e0:	94 f0       	brlt	.+36     	; 0x3506 <xTaskPriorityInherit+0x54>
    34e2:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    34e6:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    34ea:	5a 96       	adiw	r26, 0x1a	; 26
    34ec:	9c 91       	ld	r25, X
    34ee:	4a e0       	ldi	r20, 0x0A	; 10
    34f0:	50 e0       	ldi	r21, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	49 1b       	sub	r20, r25
    34f8:	51 09       	sbc	r21, r1
    34fa:	61 09       	sbc	r22, r1
    34fc:	71 09       	sbc	r23, r1
    34fe:	46 87       	std	Z+14, r20	; 0x0e
    3500:	57 87       	std	Z+15, r21	; 0x0f
    3502:	60 8b       	std	Z+16, r22	; 0x10
    3504:	71 8b       	std	Z+17, r23	; 0x11
    3506:	24 85       	ldd	r18, Z+12	; 0x0c
    3508:	35 85       	ldd	r19, Z+13	; 0x0d
    350a:	4b e0       	ldi	r20, 0x0B	; 11
    350c:	84 9f       	mul	r24, r20
    350e:	c0 01       	movw	r24, r0
    3510:	11 24       	eor	r1, r1
    3512:	87 59       	subi	r24, 0x97	; 151
    3514:	9b 4e       	sbci	r25, 0xEB	; 235
    3516:	28 17       	cp	r18, r24
    3518:	39 07       	cpc	r19, r25
    351a:	b9 f5       	brne	.+110    	; 0x358a <xTaskPriorityInherit+0xd8>
    351c:	ef 01       	movw	r28, r30
    351e:	8f 01       	movw	r16, r30
    3520:	0e 5f       	subi	r16, 0xFE	; 254
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	c8 01       	movw	r24, r16
    3526:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    352a:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    352e:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3532:	e2 8d       	ldd	r30, Z+26	; 0x1a
    3534:	ea 8f       	std	Y+26, r30	; 0x1a
    3536:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    353a:	8e 17       	cp	r24, r30
    353c:	10 f4       	brcc	.+4      	; 0x3542 <xTaskPriorityInherit+0x90>
    353e:	e0 93 27 14 	sts	0x1427, r30	; 0x801427 <uxTopReadyPriority>
    3542:	8b e0       	ldi	r24, 0x0B	; 11
    3544:	8e 9f       	mul	r24, r30
    3546:	f0 01       	movw	r30, r0
    3548:	11 24       	eor	r1, r1
    354a:	e7 59       	subi	r30, 0x97	; 151
    354c:	fb 4e       	sbci	r31, 0xEB	; 235
    354e:	01 80       	ldd	r0, Z+1	; 0x01
    3550:	f2 81       	ldd	r31, Z+2	; 0x02
    3552:	e0 2d       	mov	r30, r0
    3554:	ff 83       	std	Y+7, r31	; 0x07
    3556:	ee 83       	std	Y+6, r30	; 0x06
    3558:	26 81       	ldd	r18, Z+6	; 0x06
    355a:	37 81       	ldd	r19, Z+7	; 0x07
    355c:	39 87       	std	Y+9, r19	; 0x09
    355e:	28 87       	std	Y+8, r18	; 0x08
    3560:	a6 81       	ldd	r26, Z+6	; 0x06
    3562:	b7 81       	ldd	r27, Z+7	; 0x07
    3564:	15 96       	adiw	r26, 0x05	; 5
    3566:	1c 93       	st	X, r17
    3568:	0e 93       	st	-X, r16
    356a:	14 97       	sbiw	r26, 0x04	; 4
    356c:	17 83       	std	Z+7, r17	; 0x07
    356e:	06 83       	std	Z+6, r16	; 0x06
    3570:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3572:	8e 9f       	mul	r24, r30
    3574:	f0 01       	movw	r30, r0
    3576:	11 24       	eor	r1, r1
    3578:	e7 59       	subi	r30, 0x97	; 151
    357a:	fb 4e       	sbci	r31, 0xEB	; 235
    357c:	fd 87       	std	Y+13, r31	; 0x0d
    357e:	ec 87       	std	Y+12, r30	; 0x0c
    3580:	80 81       	ld	r24, Z
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	80 83       	st	Z, r24
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	16 c0       	rjmp	.+44     	; 0x35b6 <xTaskPriorityInherit+0x104>
    358a:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    358e:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3592:	5a 96       	adiw	r26, 0x1a	; 26
    3594:	8c 91       	ld	r24, X
    3596:	82 8f       	std	Z+26, r24	; 0x1a
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	0d c0       	rjmp	.+26     	; 0x35b6 <xTaskPriorityInherit+0x104>
    359c:	95 a5       	ldd	r25, Z+45	; 0x2d
    359e:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    35a2:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    35a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    35a8:	98 17       	cp	r25, r24
    35aa:	20 f0       	brcs	.+8      	; 0x35b4 <xTaskPriorityInherit+0x102>
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	03 c0       	rjmp	.+6      	; 0x35b6 <xTaskPriorityInherit+0x104>
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	01 c0       	rjmp	.+2      	; 0x35b6 <xTaskPriorityInherit+0x104>
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
    35be:	08 95       	ret

000035c0 <xTaskPriorityDisinherit>:
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	fc 01       	movw	r30, r24
    35ca:	89 2b       	or	r24, r25
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <xTaskPriorityDisinherit+0x10>
    35ce:	49 c0       	rjmp	.+146    	; 0x3662 <xTaskPriorityDisinherit+0xa2>
    35d0:	86 a5       	ldd	r24, Z+46	; 0x2e
    35d2:	81 50       	subi	r24, 0x01	; 1
    35d4:	86 a7       	std	Z+46, r24	; 0x2e
    35d6:	22 8d       	ldd	r18, Z+26	; 0x1a
    35d8:	95 a5       	ldd	r25, Z+45	; 0x2d
    35da:	29 17       	cp	r18, r25
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <xTaskPriorityDisinherit+0x20>
    35de:	43 c0       	rjmp	.+134    	; 0x3666 <xTaskPriorityDisinherit+0xa6>
    35e0:	81 11       	cpse	r24, r1
    35e2:	43 c0       	rjmp	.+134    	; 0x366a <xTaskPriorityDisinherit+0xaa>
    35e4:	ef 01       	movw	r28, r30
    35e6:	8f 01       	movw	r16, r30
    35e8:	0e 5f       	subi	r16, 0xFE	; 254
    35ea:	1f 4f       	sbci	r17, 0xFF	; 255
    35ec:	c8 01       	movw	r24, r16
    35ee:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    35f2:	ed a5       	ldd	r30, Y+45	; 0x2d
    35f4:	ea 8f       	std	Y+26, r30	; 0x1a
    35f6:	8a e0       	ldi	r24, 0x0A	; 10
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a0 e0       	ldi	r26, 0x00	; 0
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	8e 1b       	sub	r24, r30
    3600:	91 09       	sbc	r25, r1
    3602:	a1 09       	sbc	r26, r1
    3604:	b1 09       	sbc	r27, r1
    3606:	8e 87       	std	Y+14, r24	; 0x0e
    3608:	9f 87       	std	Y+15, r25	; 0x0f
    360a:	a8 8b       	std	Y+16, r26	; 0x10
    360c:	b9 8b       	std	Y+17, r27	; 0x11
    360e:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    3612:	8e 17       	cp	r24, r30
    3614:	10 f4       	brcc	.+4      	; 0x361a <xTaskPriorityDisinherit+0x5a>
    3616:	e0 93 27 14 	sts	0x1427, r30	; 0x801427 <uxTopReadyPriority>
    361a:	8b e0       	ldi	r24, 0x0B	; 11
    361c:	8e 9f       	mul	r24, r30
    361e:	f0 01       	movw	r30, r0
    3620:	11 24       	eor	r1, r1
    3622:	e7 59       	subi	r30, 0x97	; 151
    3624:	fb 4e       	sbci	r31, 0xEB	; 235
    3626:	01 80       	ldd	r0, Z+1	; 0x01
    3628:	f2 81       	ldd	r31, Z+2	; 0x02
    362a:	e0 2d       	mov	r30, r0
    362c:	ff 83       	std	Y+7, r31	; 0x07
    362e:	ee 83       	std	Y+6, r30	; 0x06
    3630:	26 81       	ldd	r18, Z+6	; 0x06
    3632:	37 81       	ldd	r19, Z+7	; 0x07
    3634:	39 87       	std	Y+9, r19	; 0x09
    3636:	28 87       	std	Y+8, r18	; 0x08
    3638:	a6 81       	ldd	r26, Z+6	; 0x06
    363a:	b7 81       	ldd	r27, Z+7	; 0x07
    363c:	15 96       	adiw	r26, 0x05	; 5
    363e:	1c 93       	st	X, r17
    3640:	0e 93       	st	-X, r16
    3642:	14 97       	sbiw	r26, 0x04	; 4
    3644:	17 83       	std	Z+7, r17	; 0x07
    3646:	06 83       	std	Z+6, r16	; 0x06
    3648:	ea 8d       	ldd	r30, Y+26	; 0x1a
    364a:	8e 9f       	mul	r24, r30
    364c:	f0 01       	movw	r30, r0
    364e:	11 24       	eor	r1, r1
    3650:	e7 59       	subi	r30, 0x97	; 151
    3652:	fb 4e       	sbci	r31, 0xEB	; 235
    3654:	fd 87       	std	Y+13, r31	; 0x0d
    3656:	ec 87       	std	Y+12, r30	; 0x0c
    3658:	80 81       	ld	r24, Z
    365a:	8f 5f       	subi	r24, 0xFF	; 255
    365c:	80 83       	st	Z, r24
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	05 c0       	rjmp	.+10     	; 0x366c <xTaskPriorityDisinherit+0xac>
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	03 c0       	rjmp	.+6      	; 0x366c <xTaskPriorityDisinherit+0xac>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	01 c0       	rjmp	.+2      	; 0x366c <xTaskPriorityDisinherit+0xac>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	df 91       	pop	r29
    366e:	cf 91       	pop	r28
    3670:	1f 91       	pop	r17
    3672:	0f 91       	pop	r16
    3674:	08 95       	ret

00003676 <vTaskPriorityDisinheritAfterTimeout>:
    3676:	0f 93       	push	r16
    3678:	1f 93       	push	r17
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	fc 01       	movw	r30, r24
    3680:	89 2b       	or	r24, r25
    3682:	09 f4       	brne	.+2      	; 0x3686 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3684:	5a c0       	rjmp	.+180    	; 0x373a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3686:	85 a5       	ldd	r24, Z+45	; 0x2d
    3688:	86 17       	cp	r24, r22
    368a:	08 f4       	brcc	.+2      	; 0x368e <vTaskPriorityDisinheritAfterTimeout+0x18>
    368c:	86 2f       	mov	r24, r22
    368e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3690:	89 17       	cp	r24, r25
    3692:	09 f4       	brne	.+2      	; 0x3696 <vTaskPriorityDisinheritAfterTimeout+0x20>
    3694:	52 c0       	rjmp	.+164    	; 0x373a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3696:	26 a5       	ldd	r18, Z+46	; 0x2e
    3698:	21 30       	cpi	r18, 0x01	; 1
    369a:	09 f0       	breq	.+2      	; 0x369e <vTaskPriorityDisinheritAfterTimeout+0x28>
    369c:	4e c0       	rjmp	.+156    	; 0x373a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    369e:	82 8f       	std	Z+26, r24	; 0x1a
    36a0:	46 85       	ldd	r20, Z+14	; 0x0e
    36a2:	57 85       	ldd	r21, Z+15	; 0x0f
    36a4:	60 89       	ldd	r22, Z+16	; 0x10
    36a6:	71 89       	ldd	r23, Z+17	; 0x11
    36a8:	77 23       	and	r23, r23
    36aa:	64 f0       	brlt	.+24     	; 0x36c4 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    36ac:	4a e0       	ldi	r20, 0x0A	; 10
    36ae:	50 e0       	ldi	r21, 0x00	; 0
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	48 1b       	sub	r20, r24
    36b6:	51 09       	sbc	r21, r1
    36b8:	61 09       	sbc	r22, r1
    36ba:	71 09       	sbc	r23, r1
    36bc:	46 87       	std	Z+14, r20	; 0x0e
    36be:	57 87       	std	Z+15, r21	; 0x0f
    36c0:	60 8b       	std	Z+16, r22	; 0x10
    36c2:	71 8b       	std	Z+17, r23	; 0x11
    36c4:	24 85       	ldd	r18, Z+12	; 0x0c
    36c6:	35 85       	ldd	r19, Z+13	; 0x0d
    36c8:	4b e0       	ldi	r20, 0x0B	; 11
    36ca:	94 9f       	mul	r25, r20
    36cc:	c0 01       	movw	r24, r0
    36ce:	11 24       	eor	r1, r1
    36d0:	87 59       	subi	r24, 0x97	; 151
    36d2:	9b 4e       	sbci	r25, 0xEB	; 235
    36d4:	28 17       	cp	r18, r24
    36d6:	39 07       	cpc	r19, r25
    36d8:	81 f5       	brne	.+96     	; 0x373a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    36da:	ef 01       	movw	r28, r30
    36dc:	8f 01       	movw	r16, r30
    36de:	0e 5f       	subi	r16, 0xFE	; 254
    36e0:	1f 4f       	sbci	r17, 0xFF	; 255
    36e2:	c8 01       	movw	r24, r16
    36e4:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
    36e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    36ea:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    36ee:	8e 17       	cp	r24, r30
    36f0:	10 f4       	brcc	.+4      	; 0x36f6 <vTaskPriorityDisinheritAfterTimeout+0x80>
    36f2:	e0 93 27 14 	sts	0x1427, r30	; 0x801427 <uxTopReadyPriority>
    36f6:	8b e0       	ldi	r24, 0x0B	; 11
    36f8:	8e 9f       	mul	r24, r30
    36fa:	f0 01       	movw	r30, r0
    36fc:	11 24       	eor	r1, r1
    36fe:	e7 59       	subi	r30, 0x97	; 151
    3700:	fb 4e       	sbci	r31, 0xEB	; 235
    3702:	01 80       	ldd	r0, Z+1	; 0x01
    3704:	f2 81       	ldd	r31, Z+2	; 0x02
    3706:	e0 2d       	mov	r30, r0
    3708:	ff 83       	std	Y+7, r31	; 0x07
    370a:	ee 83       	std	Y+6, r30	; 0x06
    370c:	26 81       	ldd	r18, Z+6	; 0x06
    370e:	37 81       	ldd	r19, Z+7	; 0x07
    3710:	39 87       	std	Y+9, r19	; 0x09
    3712:	28 87       	std	Y+8, r18	; 0x08
    3714:	a6 81       	ldd	r26, Z+6	; 0x06
    3716:	b7 81       	ldd	r27, Z+7	; 0x07
    3718:	15 96       	adiw	r26, 0x05	; 5
    371a:	1c 93       	st	X, r17
    371c:	0e 93       	st	-X, r16
    371e:	14 97       	sbiw	r26, 0x04	; 4
    3720:	17 83       	std	Z+7, r17	; 0x07
    3722:	06 83       	std	Z+6, r16	; 0x06
    3724:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3726:	8e 9f       	mul	r24, r30
    3728:	f0 01       	movw	r30, r0
    372a:	11 24       	eor	r1, r1
    372c:	e7 59       	subi	r30, 0x97	; 151
    372e:	fb 4e       	sbci	r31, 0xEB	; 235
    3730:	fd 87       	std	Y+13, r31	; 0x0d
    3732:	ec 87       	std	Y+12, r30	; 0x0c
    3734:	80 81       	ld	r24, Z
    3736:	8f 5f       	subi	r24, 0xFF	; 255
    3738:	80 83       	st	Z, r24
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	08 95       	ret

00003744 <uxTaskResetEventItemValue>:
    3744:	cf 92       	push	r12
    3746:	df 92       	push	r13
    3748:	ef 92       	push	r14
    374a:	ff 92       	push	r15
    374c:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3750:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3754:	66 85       	ldd	r22, Z+14	; 0x0e
    3756:	77 85       	ldd	r23, Z+15	; 0x0f
    3758:	80 89       	ldd	r24, Z+16	; 0x10
    375a:	91 89       	ldd	r25, Z+17	; 0x11
    375c:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3760:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3764:	a0 91 d7 14 	lds	r26, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3768:	b0 91 d8 14 	lds	r27, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    376c:	5a 96       	adiw	r26, 0x1a	; 26
    376e:	2c 91       	ld	r18, X
    3770:	0f 2e       	mov	r0, r31
    3772:	fa e0       	ldi	r31, 0x0A	; 10
    3774:	cf 2e       	mov	r12, r31
    3776:	d1 2c       	mov	r13, r1
    3778:	e1 2c       	mov	r14, r1
    377a:	f1 2c       	mov	r15, r1
    377c:	f0 2d       	mov	r31, r0
    377e:	c2 1a       	sub	r12, r18
    3780:	d1 08       	sbc	r13, r1
    3782:	e1 08       	sbc	r14, r1
    3784:	f1 08       	sbc	r15, r1
    3786:	c6 86       	std	Z+14, r12	; 0x0e
    3788:	d7 86       	std	Z+15, r13	; 0x0f
    378a:	e0 8a       	std	Z+16, r14	; 0x10
    378c:	f1 8a       	std	Z+17, r15	; 0x11
    378e:	ff 90       	pop	r15
    3790:	ef 90       	pop	r14
    3792:	df 90       	pop	r13
    3794:	cf 90       	pop	r12
    3796:	08 95       	ret

00003798 <pvTaskIncrementMutexHeldCount>:
    3798:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    379c:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    37a0:	89 2b       	or	r24, r25
    37a2:	39 f0       	breq	.+14     	; 0x37b2 <pvTaskIncrementMutexHeldCount+0x1a>
    37a4:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    37a8:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    37ac:	86 a5       	ldd	r24, Z+46	; 0x2e
    37ae:	8f 5f       	subi	r24, 0xFF	; 255
    37b0:	86 a7       	std	Z+46, r24	; 0x2e
    37b2:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    37b6:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    37ba:	08 95       	ret

000037bc <xTaskGenericNotifyWait>:
    37bc:	4f 92       	push	r4
    37be:	5f 92       	push	r5
    37c0:	6f 92       	push	r6
    37c2:	7f 92       	push	r7
    37c4:	af 92       	push	r10
    37c6:	bf 92       	push	r11
    37c8:	cf 92       	push	r12
    37ca:	df 92       	push	r13
    37cc:	ef 92       	push	r14
    37ce:	ff 92       	push	r15
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    37d4:	cf 93       	push	r28
    37d6:	df 93       	push	r29
    37d8:	28 01       	movw	r4, r16
    37da:	39 01       	movw	r6, r18
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	0f 92       	push	r0
    37e2:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    37e6:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    37ea:	c8 2f       	mov	r28, r24
    37ec:	d0 e0       	ldi	r29, 0x00	; 0
    37ee:	ec 0f       	add	r30, r28
    37f0:	fd 1f       	adc	r31, r29
    37f2:	83 a9       	ldd	r24, Z+51	; 0x33
    37f4:	82 30       	cpi	r24, 0x02	; 2
    37f6:	79 f1       	breq	.+94     	; 0x3856 <xTaskGenericNotifyWait+0x9a>
    37f8:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    37fc:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3800:	ce 01       	movw	r24, r28
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	e8 0f       	add	r30, r24
    380c:	f9 1f       	adc	r31, r25
    380e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3810:	90 a9       	ldd	r25, Z+48	; 0x30
    3812:	a1 a9       	ldd	r26, Z+49	; 0x31
    3814:	b2 a9       	ldd	r27, Z+50	; 0x32
    3816:	40 95       	com	r20
    3818:	50 95       	com	r21
    381a:	60 95       	com	r22
    381c:	70 95       	com	r23
    381e:	48 23       	and	r20, r24
    3820:	59 23       	and	r21, r25
    3822:	6a 23       	and	r22, r26
    3824:	7b 23       	and	r23, r27
    3826:	47 a7       	std	Z+47, r20	; 0x2f
    3828:	50 ab       	std	Z+48, r21	; 0x30
    382a:	61 ab       	std	Z+49, r22	; 0x31
    382c:	72 ab       	std	Z+50, r23	; 0x32
    382e:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3832:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3836:	ec 0f       	add	r30, r28
    3838:	fd 1f       	adc	r31, r29
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	83 ab       	std	Z+51, r24	; 0x33
    383e:	a1 14       	cp	r10, r1
    3840:	b1 04       	cpc	r11, r1
    3842:	c1 04       	cpc	r12, r1
    3844:	d1 04       	cpc	r13, r1
    3846:	39 f0       	breq	.+14     	; 0x3856 <xTaskGenericNotifyWait+0x9a>
    3848:	41 e0       	ldi	r20, 0x01	; 1
    384a:	c6 01       	movw	r24, r12
    384c:	b5 01       	movw	r22, r10
    384e:	0e 94 a2 13 	call	0x2744	; 0x2744 <prvAddCurrentTaskToDelayedList>
    3852:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    3856:	0f 90       	pop	r0
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	0f 92       	push	r0
    3860:	e1 14       	cp	r14, r1
    3862:	f1 04       	cpc	r15, r1
    3864:	a1 f0       	breq	.+40     	; 0x388e <xTaskGenericNotifyWait+0xd2>
    3866:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    386a:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    386e:	ce 01       	movw	r24, r28
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	e8 0f       	add	r30, r24
    387a:	f9 1f       	adc	r31, r25
    387c:	87 a5       	ldd	r24, Z+47	; 0x2f
    387e:	90 a9       	ldd	r25, Z+48	; 0x30
    3880:	a1 a9       	ldd	r26, Z+49	; 0x31
    3882:	b2 a9       	ldd	r27, Z+50	; 0x32
    3884:	f7 01       	movw	r30, r14
    3886:	80 83       	st	Z, r24
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	a2 83       	std	Z+2, r26	; 0x02
    388c:	b3 83       	std	Z+3, r27	; 0x03
    388e:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3892:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3896:	ec 0f       	add	r30, r28
    3898:	fd 1f       	adc	r31, r29
    389a:	83 a9       	ldd	r24, Z+51	; 0x33
    389c:	82 30       	cpi	r24, 0x02	; 2
    389e:	e9 f4       	brne	.+58     	; 0x38da <xTaskGenericNotifyWait+0x11e>
    38a0:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    38a4:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    38a8:	ce 01       	movw	r24, r28
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	e8 0f       	add	r30, r24
    38b4:	f9 1f       	adc	r31, r25
    38b6:	87 a5       	ldd	r24, Z+47	; 0x2f
    38b8:	90 a9       	ldd	r25, Z+48	; 0x30
    38ba:	a1 a9       	ldd	r26, Z+49	; 0x31
    38bc:	b2 a9       	ldd	r27, Z+50	; 0x32
    38be:	40 94       	com	r4
    38c0:	50 94       	com	r5
    38c2:	60 94       	com	r6
    38c4:	70 94       	com	r7
    38c6:	48 22       	and	r4, r24
    38c8:	59 22       	and	r5, r25
    38ca:	6a 22       	and	r6, r26
    38cc:	7b 22       	and	r7, r27
    38ce:	47 a6       	std	Z+47, r4	; 0x2f
    38d0:	50 aa       	std	Z+48, r5	; 0x30
    38d2:	61 aa       	std	Z+49, r6	; 0x31
    38d4:	72 aa       	std	Z+50, r7	; 0x32
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	01 c0       	rjmp	.+2      	; 0x38dc <xTaskGenericNotifyWait+0x120>
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	20 91 d7 14 	lds	r18, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    38e0:	30 91 d8 14 	lds	r19, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    38e4:	c2 0f       	add	r28, r18
    38e6:	d3 1f       	adc	r29, r19
    38e8:	1b aa       	std	Y+51, r1	; 0x33
    38ea:	0f 90       	pop	r0
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	1f 91       	pop	r17
    38f4:	0f 91       	pop	r16
    38f6:	ff 90       	pop	r15
    38f8:	ef 90       	pop	r14
    38fa:	df 90       	pop	r13
    38fc:	cf 90       	pop	r12
    38fe:	bf 90       	pop	r11
    3900:	af 90       	pop	r10
    3902:	7f 90       	pop	r7
    3904:	6f 90       	pop	r6
    3906:	5f 90       	pop	r5
    3908:	4f 90       	pop	r4
    390a:	08 95       	ret

0000390c <xTaskGenericNotify>:
    390c:	8f 92       	push	r8
    390e:	9f 92       	push	r9
    3910:	af 92       	push	r10
    3912:	bf 92       	push	r11
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	dc 01       	movw	r26, r24
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	0f 92       	push	r0
    3926:	e1 14       	cp	r14, r1
    3928:	f1 04       	cpc	r15, r1
    392a:	89 f0       	breq	.+34     	; 0x394e <xTaskGenericNotify+0x42>
    392c:	e6 2f       	mov	r30, r22
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	ee 0f       	add	r30, r30
    3932:	ff 1f       	adc	r31, r31
    3934:	ee 0f       	add	r30, r30
    3936:	ff 1f       	adc	r31, r31
    3938:	e8 0f       	add	r30, r24
    393a:	f9 1f       	adc	r31, r25
    393c:	87 a4       	ldd	r8, Z+47	; 0x2f
    393e:	90 a8       	ldd	r9, Z+48	; 0x30
    3940:	a1 a8       	ldd	r10, Z+49	; 0x31
    3942:	b2 a8       	ldd	r11, Z+50	; 0x32
    3944:	f7 01       	movw	r30, r14
    3946:	80 82       	st	Z, r8
    3948:	91 82       	std	Z+1, r9	; 0x01
    394a:	a2 82       	std	Z+2, r10	; 0x02
    394c:	b3 82       	std	Z+3, r11	; 0x03
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	fd 01       	movw	r30, r26
    3952:	e6 0f       	add	r30, r22
    3954:	f7 1f       	adc	r31, r23
    3956:	83 a9       	ldd	r24, Z+51	; 0x33
    3958:	92 e0       	ldi	r25, 0x02	; 2
    395a:	93 ab       	std	Z+51, r25	; 0x33
    395c:	02 30       	cpi	r16, 0x02	; 2
    395e:	01 f1       	breq	.+64     	; 0x39a0 <xTaskGenericNotify+0x94>
    3960:	18 f4       	brcc	.+6      	; 0x3968 <xTaskGenericNotify+0x5c>
    3962:	01 30       	cpi	r16, 0x01	; 1
    3964:	31 f0       	breq	.+12     	; 0x3972 <xTaskGenericNotify+0x66>
    3966:	4d c0       	rjmp	.+154    	; 0x3a02 <xTaskGenericNotify+0xf6>
    3968:	03 30       	cpi	r16, 0x03	; 3
    396a:	79 f1       	breq	.+94     	; 0x39ca <xTaskGenericNotify+0xbe>
    396c:	04 30       	cpi	r16, 0x04	; 4
    396e:	d1 f1       	breq	.+116    	; 0x39e4 <xTaskGenericNotify+0xd8>
    3970:	48 c0       	rjmp	.+144    	; 0x3a02 <xTaskGenericNotify+0xf6>
    3972:	66 0f       	add	r22, r22
    3974:	77 1f       	adc	r23, r23
    3976:	66 0f       	add	r22, r22
    3978:	77 1f       	adc	r23, r23
    397a:	fd 01       	movw	r30, r26
    397c:	e6 0f       	add	r30, r22
    397e:	f7 1f       	adc	r31, r23
    3980:	87 a4       	ldd	r8, Z+47	; 0x2f
    3982:	90 a8       	ldd	r9, Z+48	; 0x30
    3984:	a1 a8       	ldd	r10, Z+49	; 0x31
    3986:	b2 a8       	ldd	r11, Z+50	; 0x32
    3988:	ba 01       	movw	r22, r20
    398a:	a9 01       	movw	r20, r18
    398c:	48 29       	or	r20, r8
    398e:	59 29       	or	r21, r9
    3990:	6a 29       	or	r22, r10
    3992:	7b 29       	or	r23, r11
    3994:	47 a7       	std	Z+47, r20	; 0x2f
    3996:	50 ab       	std	Z+48, r21	; 0x30
    3998:	61 ab       	std	Z+49, r22	; 0x31
    399a:	72 ab       	std	Z+50, r23	; 0x32
    399c:	01 e0       	ldi	r16, 0x01	; 1
    399e:	34 c0       	rjmp	.+104    	; 0x3a08 <xTaskGenericNotify+0xfc>
    39a0:	66 0f       	add	r22, r22
    39a2:	77 1f       	adc	r23, r23
    39a4:	66 0f       	add	r22, r22
    39a6:	77 1f       	adc	r23, r23
    39a8:	fd 01       	movw	r30, r26
    39aa:	e6 0f       	add	r30, r22
    39ac:	f7 1f       	adc	r31, r23
    39ae:	47 a5       	ldd	r20, Z+47	; 0x2f
    39b0:	50 a9       	ldd	r21, Z+48	; 0x30
    39b2:	61 a9       	ldd	r22, Z+49	; 0x31
    39b4:	72 a9       	ldd	r23, Z+50	; 0x32
    39b6:	4f 5f       	subi	r20, 0xFF	; 255
    39b8:	5f 4f       	sbci	r21, 0xFF	; 255
    39ba:	6f 4f       	sbci	r22, 0xFF	; 255
    39bc:	7f 4f       	sbci	r23, 0xFF	; 255
    39be:	47 a7       	std	Z+47, r20	; 0x2f
    39c0:	50 ab       	std	Z+48, r21	; 0x30
    39c2:	61 ab       	std	Z+49, r22	; 0x31
    39c4:	72 ab       	std	Z+50, r23	; 0x32
    39c6:	01 e0       	ldi	r16, 0x01	; 1
    39c8:	1f c0       	rjmp	.+62     	; 0x3a08 <xTaskGenericNotify+0xfc>
    39ca:	66 0f       	add	r22, r22
    39cc:	77 1f       	adc	r23, r23
    39ce:	66 0f       	add	r22, r22
    39d0:	77 1f       	adc	r23, r23
    39d2:	fd 01       	movw	r30, r26
    39d4:	e6 0f       	add	r30, r22
    39d6:	f7 1f       	adc	r31, r23
    39d8:	27 a7       	std	Z+47, r18	; 0x2f
    39da:	30 ab       	std	Z+48, r19	; 0x30
    39dc:	41 ab       	std	Z+49, r20	; 0x31
    39de:	52 ab       	std	Z+50, r21	; 0x32
    39e0:	01 e0       	ldi	r16, 0x01	; 1
    39e2:	12 c0       	rjmp	.+36     	; 0x3a08 <xTaskGenericNotify+0xfc>
    39e4:	82 30       	cpi	r24, 0x02	; 2
    39e6:	79 f0       	breq	.+30     	; 0x3a06 <xTaskGenericNotify+0xfa>
    39e8:	66 0f       	add	r22, r22
    39ea:	77 1f       	adc	r23, r23
    39ec:	66 0f       	add	r22, r22
    39ee:	77 1f       	adc	r23, r23
    39f0:	fd 01       	movw	r30, r26
    39f2:	e6 0f       	add	r30, r22
    39f4:	f7 1f       	adc	r31, r23
    39f6:	27 a7       	std	Z+47, r18	; 0x2f
    39f8:	30 ab       	std	Z+48, r19	; 0x30
    39fa:	41 ab       	std	Z+49, r20	; 0x31
    39fc:	52 ab       	std	Z+50, r21	; 0x32
    39fe:	01 e0       	ldi	r16, 0x01	; 1
    3a00:	03 c0       	rjmp	.+6      	; 0x3a08 <xTaskGenericNotify+0xfc>
    3a02:	01 e0       	ldi	r16, 0x01	; 1
    3a04:	01 c0       	rjmp	.+2      	; 0x3a08 <xTaskGenericNotify+0xfc>
    3a06:	00 e0       	ldi	r16, 0x00	; 0
    3a08:	81 30       	cpi	r24, 0x01	; 1
    3a0a:	09 f0       	breq	.+2      	; 0x3a0e <xTaskGenericNotify+0x102>
    3a0c:	69 c0       	rjmp	.+210    	; 0x3ae0 <xTaskGenericNotify+0x1d4>
    3a0e:	1c 96       	adiw	r26, 0x0c	; 12
    3a10:	ed 91       	ld	r30, X+
    3a12:	fc 91       	ld	r31, X
    3a14:	1d 97       	sbiw	r26, 0x0d	; 13
    3a16:	16 96       	adiw	r26, 0x06	; 6
    3a18:	cd 91       	ld	r28, X+
    3a1a:	dc 91       	ld	r29, X
    3a1c:	17 97       	sbiw	r26, 0x07	; 7
    3a1e:	18 96       	adiw	r26, 0x08	; 8
    3a20:	8d 91       	ld	r24, X+
    3a22:	9c 91       	ld	r25, X
    3a24:	19 97       	sbiw	r26, 0x09	; 9
    3a26:	9f 83       	std	Y+7, r25	; 0x07
    3a28:	8e 83       	std	Y+6, r24	; 0x06
    3a2a:	18 96       	adiw	r26, 0x08	; 8
    3a2c:	cd 91       	ld	r28, X+
    3a2e:	dc 91       	ld	r29, X
    3a30:	19 97       	sbiw	r26, 0x09	; 9
    3a32:	16 96       	adiw	r26, 0x06	; 6
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	17 97       	sbiw	r26, 0x07	; 7
    3a3a:	9d 83       	std	Y+5, r25	; 0x05
    3a3c:	8c 83       	std	Y+4, r24	; 0x04
    3a3e:	81 81       	ldd	r24, Z+1	; 0x01
    3a40:	92 81       	ldd	r25, Z+2	; 0x02
    3a42:	9d 01       	movw	r18, r26
    3a44:	2e 5f       	subi	r18, 0xFE	; 254
    3a46:	3f 4f       	sbci	r19, 0xFF	; 255
    3a48:	82 17       	cp	r24, r18
    3a4a:	93 07       	cpc	r25, r19
    3a4c:	31 f4       	brne	.+12     	; 0x3a5a <xTaskGenericNotify+0x14e>
    3a4e:	18 96       	adiw	r26, 0x08	; 8
    3a50:	8d 91       	ld	r24, X+
    3a52:	9c 91       	ld	r25, X
    3a54:	19 97       	sbiw	r26, 0x09	; 9
    3a56:	92 83       	std	Z+2, r25	; 0x02
    3a58:	81 83       	std	Z+1, r24	; 0x01
    3a5a:	1d 96       	adiw	r26, 0x0d	; 13
    3a5c:	1c 92       	st	X, r1
    3a5e:	1e 92       	st	-X, r1
    3a60:	1c 97       	sbiw	r26, 0x0c	; 12
    3a62:	80 81       	ld	r24, Z
    3a64:	81 50       	subi	r24, 0x01	; 1
    3a66:	80 83       	st	Z, r24
    3a68:	5a 96       	adiw	r26, 0x1a	; 26
    3a6a:	ec 91       	ld	r30, X
    3a6c:	5a 97       	sbiw	r26, 0x1a	; 26
    3a6e:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <uxTopReadyPriority>
    3a72:	8e 17       	cp	r24, r30
    3a74:	10 f4       	brcc	.+4      	; 0x3a7a <xTaskGenericNotify+0x16e>
    3a76:	e0 93 27 14 	sts	0x1427, r30	; 0x801427 <uxTopReadyPriority>
    3a7a:	8b e0       	ldi	r24, 0x0B	; 11
    3a7c:	8e 9f       	mul	r24, r30
    3a7e:	f0 01       	movw	r30, r0
    3a80:	11 24       	eor	r1, r1
    3a82:	e7 59       	subi	r30, 0x97	; 151
    3a84:	fb 4e       	sbci	r31, 0xEB	; 235
    3a86:	01 80       	ldd	r0, Z+1	; 0x01
    3a88:	f2 81       	ldd	r31, Z+2	; 0x02
    3a8a:	e0 2d       	mov	r30, r0
    3a8c:	17 96       	adiw	r26, 0x07	; 7
    3a8e:	fc 93       	st	X, r31
    3a90:	ee 93       	st	-X, r30
    3a92:	16 97       	sbiw	r26, 0x06	; 6
    3a94:	46 81       	ldd	r20, Z+6	; 0x06
    3a96:	57 81       	ldd	r21, Z+7	; 0x07
    3a98:	19 96       	adiw	r26, 0x09	; 9
    3a9a:	5c 93       	st	X, r21
    3a9c:	4e 93       	st	-X, r20
    3a9e:	18 97       	sbiw	r26, 0x08	; 8
    3aa0:	c6 81       	ldd	r28, Z+6	; 0x06
    3aa2:	d7 81       	ldd	r29, Z+7	; 0x07
    3aa4:	3d 83       	std	Y+5, r19	; 0x05
    3aa6:	2c 83       	std	Y+4, r18	; 0x04
    3aa8:	37 83       	std	Z+7, r19	; 0x07
    3aaa:	26 83       	std	Z+6, r18	; 0x06
    3aac:	5a 96       	adiw	r26, 0x1a	; 26
    3aae:	ec 91       	ld	r30, X
    3ab0:	5a 97       	sbiw	r26, 0x1a	; 26
    3ab2:	8e 9f       	mul	r24, r30
    3ab4:	f0 01       	movw	r30, r0
    3ab6:	11 24       	eor	r1, r1
    3ab8:	e7 59       	subi	r30, 0x97	; 151
    3aba:	fb 4e       	sbci	r31, 0xEB	; 235
    3abc:	1d 96       	adiw	r26, 0x0d	; 13
    3abe:	fc 93       	st	X, r31
    3ac0:	ee 93       	st	-X, r30
    3ac2:	1c 97       	sbiw	r26, 0x0c	; 12
    3ac4:	80 81       	ld	r24, Z
    3ac6:	8f 5f       	subi	r24, 0xFF	; 255
    3ac8:	80 83       	st	Z, r24
    3aca:	5a 96       	adiw	r26, 0x1a	; 26
    3acc:	9c 91       	ld	r25, X
    3ace:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3ad2:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3ad6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ad8:	89 17       	cp	r24, r25
    3ada:	10 f4       	brcc	.+4      	; 0x3ae0 <xTaskGenericNotify+0x1d4>
    3adc:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    3ae0:	0f 90       	pop	r0
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	80 2f       	mov	r24, r16
    3ae6:	df 91       	pop	r29
    3ae8:	cf 91       	pop	r28
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	ef 90       	pop	r14
    3af0:	bf 90       	pop	r11
    3af2:	af 90       	pop	r10
    3af4:	9f 90       	pop	r9
    3af6:	8f 90       	pop	r8
    3af8:	08 95       	ret

00003afa <xTaskGenericNotifyFromISR>:
    3afa:	8f 92       	push	r8
    3afc:	9f 92       	push	r9
    3afe:	af 92       	push	r10
    3b00:	bf 92       	push	r11
    3b02:	cf 92       	push	r12
    3b04:	df 92       	push	r13
    3b06:	ef 92       	push	r14
    3b08:	ff 92       	push	r15
    3b0a:	0f 93       	push	r16
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	dc 01       	movw	r26, r24
    3b12:	e1 14       	cp	r14, r1
    3b14:	f1 04       	cpc	r15, r1
    3b16:	89 f0       	breq	.+34     	; 0x3b3a <xTaskGenericNotifyFromISR+0x40>
    3b18:	e6 2f       	mov	r30, r22
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	ee 0f       	add	r30, r30
    3b1e:	ff 1f       	adc	r31, r31
    3b20:	ee 0f       	add	r30, r30
    3b22:	ff 1f       	adc	r31, r31
    3b24:	e8 0f       	add	r30, r24
    3b26:	f9 1f       	adc	r31, r25
    3b28:	87 a4       	ldd	r8, Z+47	; 0x2f
    3b2a:	90 a8       	ldd	r9, Z+48	; 0x30
    3b2c:	a1 a8       	ldd	r10, Z+49	; 0x31
    3b2e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3b30:	f7 01       	movw	r30, r14
    3b32:	80 82       	st	Z, r8
    3b34:	91 82       	std	Z+1, r9	; 0x01
    3b36:	a2 82       	std	Z+2, r10	; 0x02
    3b38:	b3 82       	std	Z+3, r11	; 0x03
    3b3a:	70 e0       	ldi	r23, 0x00	; 0
    3b3c:	fd 01       	movw	r30, r26
    3b3e:	e6 0f       	add	r30, r22
    3b40:	f7 1f       	adc	r31, r23
    3b42:	93 a9       	ldd	r25, Z+51	; 0x33
    3b44:	82 e0       	ldi	r24, 0x02	; 2
    3b46:	83 ab       	std	Z+51, r24	; 0x33
    3b48:	02 30       	cpi	r16, 0x02	; 2
    3b4a:	01 f1       	breq	.+64     	; 0x3b8c <xTaskGenericNotifyFromISR+0x92>
    3b4c:	18 f4       	brcc	.+6      	; 0x3b54 <xTaskGenericNotifyFromISR+0x5a>
    3b4e:	01 30       	cpi	r16, 0x01	; 1
    3b50:	31 f0       	breq	.+12     	; 0x3b5e <xTaskGenericNotifyFromISR+0x64>
    3b52:	4d c0       	rjmp	.+154    	; 0x3bee <xTaskGenericNotifyFromISR+0xf4>
    3b54:	03 30       	cpi	r16, 0x03	; 3
    3b56:	79 f1       	breq	.+94     	; 0x3bb6 <xTaskGenericNotifyFromISR+0xbc>
    3b58:	04 30       	cpi	r16, 0x04	; 4
    3b5a:	d1 f1       	breq	.+116    	; 0x3bd0 <xTaskGenericNotifyFromISR+0xd6>
    3b5c:	48 c0       	rjmp	.+144    	; 0x3bee <xTaskGenericNotifyFromISR+0xf4>
    3b5e:	66 0f       	add	r22, r22
    3b60:	77 1f       	adc	r23, r23
    3b62:	66 0f       	add	r22, r22
    3b64:	77 1f       	adc	r23, r23
    3b66:	fd 01       	movw	r30, r26
    3b68:	e6 0f       	add	r30, r22
    3b6a:	f7 1f       	adc	r31, r23
    3b6c:	87 a4       	ldd	r8, Z+47	; 0x2f
    3b6e:	90 a8       	ldd	r9, Z+48	; 0x30
    3b70:	a1 a8       	ldd	r10, Z+49	; 0x31
    3b72:	b2 a8       	ldd	r11, Z+50	; 0x32
    3b74:	ba 01       	movw	r22, r20
    3b76:	a9 01       	movw	r20, r18
    3b78:	48 29       	or	r20, r8
    3b7a:	59 29       	or	r21, r9
    3b7c:	6a 29       	or	r22, r10
    3b7e:	7b 29       	or	r23, r11
    3b80:	47 a7       	std	Z+47, r20	; 0x2f
    3b82:	50 ab       	std	Z+48, r21	; 0x30
    3b84:	61 ab       	std	Z+49, r22	; 0x31
    3b86:	72 ab       	std	Z+50, r23	; 0x32
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	34 c0       	rjmp	.+104    	; 0x3bf4 <xTaskGenericNotifyFromISR+0xfa>
    3b8c:	66 0f       	add	r22, r22
    3b8e:	77 1f       	adc	r23, r23
    3b90:	66 0f       	add	r22, r22
    3b92:	77 1f       	adc	r23, r23
    3b94:	fd 01       	movw	r30, r26
    3b96:	e6 0f       	add	r30, r22
    3b98:	f7 1f       	adc	r31, r23
    3b9a:	47 a5       	ldd	r20, Z+47	; 0x2f
    3b9c:	50 a9       	ldd	r21, Z+48	; 0x30
    3b9e:	61 a9       	ldd	r22, Z+49	; 0x31
    3ba0:	72 a9       	ldd	r23, Z+50	; 0x32
    3ba2:	4f 5f       	subi	r20, 0xFF	; 255
    3ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba6:	6f 4f       	sbci	r22, 0xFF	; 255
    3ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    3baa:	47 a7       	std	Z+47, r20	; 0x2f
    3bac:	50 ab       	std	Z+48, r21	; 0x30
    3bae:	61 ab       	std	Z+49, r22	; 0x31
    3bb0:	72 ab       	std	Z+50, r23	; 0x32
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	1f c0       	rjmp	.+62     	; 0x3bf4 <xTaskGenericNotifyFromISR+0xfa>
    3bb6:	66 0f       	add	r22, r22
    3bb8:	77 1f       	adc	r23, r23
    3bba:	66 0f       	add	r22, r22
    3bbc:	77 1f       	adc	r23, r23
    3bbe:	fd 01       	movw	r30, r26
    3bc0:	e6 0f       	add	r30, r22
    3bc2:	f7 1f       	adc	r31, r23
    3bc4:	27 a7       	std	Z+47, r18	; 0x2f
    3bc6:	30 ab       	std	Z+48, r19	; 0x30
    3bc8:	41 ab       	std	Z+49, r20	; 0x31
    3bca:	52 ab       	std	Z+50, r21	; 0x32
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	12 c0       	rjmp	.+36     	; 0x3bf4 <xTaskGenericNotifyFromISR+0xfa>
    3bd0:	92 30       	cpi	r25, 0x02	; 2
    3bd2:	79 f0       	breq	.+30     	; 0x3bf2 <xTaskGenericNotifyFromISR+0xf8>
    3bd4:	66 0f       	add	r22, r22
    3bd6:	77 1f       	adc	r23, r23
    3bd8:	66 0f       	add	r22, r22
    3bda:	77 1f       	adc	r23, r23
    3bdc:	fd 01       	movw	r30, r26
    3bde:	e6 0f       	add	r30, r22
    3be0:	f7 1f       	adc	r31, r23
    3be2:	27 a7       	std	Z+47, r18	; 0x2f
    3be4:	30 ab       	std	Z+48, r19	; 0x30
    3be6:	41 ab       	std	Z+49, r20	; 0x31
    3be8:	52 ab       	std	Z+50, r21	; 0x32
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	03 c0       	rjmp	.+6      	; 0x3bf4 <xTaskGenericNotifyFromISR+0xfa>
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <xTaskGenericNotifyFromISR+0xfa>
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	91 30       	cpi	r25, 0x01	; 1
    3bf6:	09 f0       	breq	.+2      	; 0x3bfa <xTaskGenericNotifyFromISR+0x100>
    3bf8:	96 c0       	rjmp	.+300    	; 0x3d26 <xTaskGenericNotifyFromISR+0x22c>
    3bfa:	90 91 18 14 	lds	r25, 0x1418	; 0x801418 <uxSchedulerSuspended>
    3bfe:	91 11       	cpse	r25, r1
    3c00:	5f c0       	rjmp	.+190    	; 0x3cc0 <xTaskGenericNotifyFromISR+0x1c6>
    3c02:	1c 96       	adiw	r26, 0x0c	; 12
    3c04:	ed 91       	ld	r30, X+
    3c06:	fc 91       	ld	r31, X
    3c08:	1d 97       	sbiw	r26, 0x0d	; 13
    3c0a:	16 96       	adiw	r26, 0x06	; 6
    3c0c:	cd 91       	ld	r28, X+
    3c0e:	dc 91       	ld	r29, X
    3c10:	17 97       	sbiw	r26, 0x07	; 7
    3c12:	18 96       	adiw	r26, 0x08	; 8
    3c14:	2d 91       	ld	r18, X+
    3c16:	3c 91       	ld	r19, X
    3c18:	19 97       	sbiw	r26, 0x09	; 9
    3c1a:	3f 83       	std	Y+7, r19	; 0x07
    3c1c:	2e 83       	std	Y+6, r18	; 0x06
    3c1e:	18 96       	adiw	r26, 0x08	; 8
    3c20:	cd 91       	ld	r28, X+
    3c22:	dc 91       	ld	r29, X
    3c24:	19 97       	sbiw	r26, 0x09	; 9
    3c26:	16 96       	adiw	r26, 0x06	; 6
    3c28:	2d 91       	ld	r18, X+
    3c2a:	3c 91       	ld	r19, X
    3c2c:	17 97       	sbiw	r26, 0x07	; 7
    3c2e:	3d 83       	std	Y+5, r19	; 0x05
    3c30:	2c 83       	std	Y+4, r18	; 0x04
    3c32:	41 81       	ldd	r20, Z+1	; 0x01
    3c34:	52 81       	ldd	r21, Z+2	; 0x02
    3c36:	9d 01       	movw	r18, r26
    3c38:	2e 5f       	subi	r18, 0xFE	; 254
    3c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3c:	42 17       	cp	r20, r18
    3c3e:	53 07       	cpc	r21, r19
    3c40:	31 f4       	brne	.+12     	; 0x3c4e <xTaskGenericNotifyFromISR+0x154>
    3c42:	18 96       	adiw	r26, 0x08	; 8
    3c44:	4d 91       	ld	r20, X+
    3c46:	5c 91       	ld	r21, X
    3c48:	19 97       	sbiw	r26, 0x09	; 9
    3c4a:	52 83       	std	Z+2, r21	; 0x02
    3c4c:	41 83       	std	Z+1, r20	; 0x01
    3c4e:	1d 96       	adiw	r26, 0x0d	; 13
    3c50:	1c 92       	st	X, r1
    3c52:	1e 92       	st	-X, r1
    3c54:	1c 97       	sbiw	r26, 0x0c	; 12
    3c56:	90 81       	ld	r25, Z
    3c58:	91 50       	subi	r25, 0x01	; 1
    3c5a:	90 83       	st	Z, r25
    3c5c:	5a 96       	adiw	r26, 0x1a	; 26
    3c5e:	ec 91       	ld	r30, X
    3c60:	5a 97       	sbiw	r26, 0x1a	; 26
    3c62:	90 91 27 14 	lds	r25, 0x1427	; 0x801427 <uxTopReadyPriority>
    3c66:	9e 17       	cp	r25, r30
    3c68:	10 f4       	brcc	.+4      	; 0x3c6e <xTaskGenericNotifyFromISR+0x174>
    3c6a:	e0 93 27 14 	sts	0x1427, r30	; 0x801427 <uxTopReadyPriority>
    3c6e:	9b e0       	ldi	r25, 0x0B	; 11
    3c70:	9e 9f       	mul	r25, r30
    3c72:	f0 01       	movw	r30, r0
    3c74:	11 24       	eor	r1, r1
    3c76:	e7 59       	subi	r30, 0x97	; 151
    3c78:	fb 4e       	sbci	r31, 0xEB	; 235
    3c7a:	01 80       	ldd	r0, Z+1	; 0x01
    3c7c:	f2 81       	ldd	r31, Z+2	; 0x02
    3c7e:	e0 2d       	mov	r30, r0
    3c80:	17 96       	adiw	r26, 0x07	; 7
    3c82:	fc 93       	st	X, r31
    3c84:	ee 93       	st	-X, r30
    3c86:	16 97       	sbiw	r26, 0x06	; 6
    3c88:	46 81       	ldd	r20, Z+6	; 0x06
    3c8a:	57 81       	ldd	r21, Z+7	; 0x07
    3c8c:	19 96       	adiw	r26, 0x09	; 9
    3c8e:	5c 93       	st	X, r21
    3c90:	4e 93       	st	-X, r20
    3c92:	18 97       	sbiw	r26, 0x08	; 8
    3c94:	c6 81       	ldd	r28, Z+6	; 0x06
    3c96:	d7 81       	ldd	r29, Z+7	; 0x07
    3c98:	3d 83       	std	Y+5, r19	; 0x05
    3c9a:	2c 83       	std	Y+4, r18	; 0x04
    3c9c:	37 83       	std	Z+7, r19	; 0x07
    3c9e:	26 83       	std	Z+6, r18	; 0x06
    3ca0:	5a 96       	adiw	r26, 0x1a	; 26
    3ca2:	ec 91       	ld	r30, X
    3ca4:	5a 97       	sbiw	r26, 0x1a	; 26
    3ca6:	9e 9f       	mul	r25, r30
    3ca8:	f0 01       	movw	r30, r0
    3caa:	11 24       	eor	r1, r1
    3cac:	e7 59       	subi	r30, 0x97	; 151
    3cae:	fb 4e       	sbci	r31, 0xEB	; 235
    3cb0:	1d 96       	adiw	r26, 0x0d	; 13
    3cb2:	fc 93       	st	X, r31
    3cb4:	ee 93       	st	-X, r30
    3cb6:	1c 97       	sbiw	r26, 0x0c	; 12
    3cb8:	90 81       	ld	r25, Z
    3cba:	9f 5f       	subi	r25, 0xFF	; 255
    3cbc:	90 83       	st	Z, r25
    3cbe:	21 c0       	rjmp	.+66     	; 0x3d02 <xTaskGenericNotifyFromISR+0x208>
    3cc0:	64 e4       	ldi	r22, 0x44	; 68
    3cc2:	74 e1       	ldi	r23, 0x14	; 20
    3cc4:	fb 01       	movw	r30, r22
    3cc6:	c1 81       	ldd	r28, Z+1	; 0x01
    3cc8:	d2 81       	ldd	r29, Z+2	; 0x02
    3cca:	53 96       	adiw	r26, 0x13	; 19
    3ccc:	dc 93       	st	X, r29
    3cce:	ce 93       	st	-X, r28
    3cd0:	52 97       	sbiw	r26, 0x12	; 18
    3cd2:	2e 81       	ldd	r18, Y+6	; 0x06
    3cd4:	3f 81       	ldd	r19, Y+7	; 0x07
    3cd6:	55 96       	adiw	r26, 0x15	; 21
    3cd8:	3c 93       	st	X, r19
    3cda:	2e 93       	st	-X, r18
    3cdc:	54 97       	sbiw	r26, 0x14	; 20
    3cde:	4e 81       	ldd	r20, Y+6	; 0x06
    3ce0:	5f 81       	ldd	r21, Y+7	; 0x07
    3ce2:	9d 01       	movw	r18, r26
    3ce4:	22 5f       	subi	r18, 0xF2	; 242
    3ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce8:	fa 01       	movw	r30, r20
    3cea:	35 83       	std	Z+5, r19	; 0x05
    3cec:	24 83       	std	Z+4, r18	; 0x04
    3cee:	3f 83       	std	Y+7, r19	; 0x07
    3cf0:	2e 83       	std	Y+6, r18	; 0x06
    3cf2:	59 96       	adiw	r26, 0x19	; 25
    3cf4:	7c 93       	st	X, r23
    3cf6:	6e 93       	st	-X, r22
    3cf8:	58 97       	sbiw	r26, 0x18	; 24
    3cfa:	fb 01       	movw	r30, r22
    3cfc:	90 81       	ld	r25, Z
    3cfe:	9f 5f       	subi	r25, 0xFF	; 255
    3d00:	90 83       	st	Z, r25
    3d02:	5a 96       	adiw	r26, 0x1a	; 26
    3d04:	2c 91       	ld	r18, X
    3d06:	e0 91 d7 14 	lds	r30, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3d0a:	f0 91 d8 14 	lds	r31, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>
    3d0e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d10:	92 17       	cp	r25, r18
    3d12:	48 f4       	brcc	.+18     	; 0x3d26 <xTaskGenericNotifyFromISR+0x22c>
    3d14:	c1 14       	cp	r12, r1
    3d16:	d1 04       	cpc	r13, r1
    3d18:	19 f0       	breq	.+6      	; 0x3d20 <xTaskGenericNotifyFromISR+0x226>
    3d1a:	91 e0       	ldi	r25, 0x01	; 1
    3d1c:	f6 01       	movw	r30, r12
    3d1e:	90 83       	st	Z, r25
    3d20:	91 e0       	ldi	r25, 0x01	; 1
    3d22:	90 93 21 14 	sts	0x1421, r25	; 0x801421 <xYieldPending>
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	df 90       	pop	r13
    3d32:	cf 90       	pop	r12
    3d34:	bf 90       	pop	r11
    3d36:	af 90       	pop	r10
    3d38:	9f 90       	pop	r9
    3d3a:	8f 90       	pop	r8
    3d3c:	08 95       	ret

00003d3e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	21 f4       	brne	.+8      	; 0x3d4a <xTaskGenericNotifyStateClear+0xc>
    3d42:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <pxCurrentTCB>
    3d46:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	fc 01       	movw	r30, r24
    3d54:	e6 0f       	add	r30, r22
    3d56:	f7 1f       	adc	r31, r23
    3d58:	23 a9       	ldd	r18, Z+51	; 0x33
    3d5a:	22 30       	cpi	r18, 0x02	; 2
    3d5c:	31 f4       	brne	.+12     	; 0x3d6a <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3d5e:	fc 01       	movw	r30, r24
    3d60:	e6 0f       	add	r30, r22
    3d62:	f7 1f       	adc	r31, r23
    3d64:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	01 c0       	rjmp	.+2      	; 0x3d6c <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3d6c:	0f 90       	pop	r0
    3d6e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3d70:	08 95       	ret

00003d72 <prvGetNextExpireTime>:
    3d72:	dc 01       	movw	r26, r24
    3d74:	e0 91 e3 14 	lds	r30, 0x14E3	; 0x8014e3 <pxCurrentTimerList>
    3d78:	f0 91 e4 14 	lds	r31, 0x14E4	; 0x8014e4 <pxCurrentTimerList+0x1>
    3d7c:	80 81       	ld	r24, Z
    3d7e:	91 e0       	ldi	r25, 0x01	; 1
    3d80:	81 11       	cpse	r24, r1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	9c 93       	st	X, r25
    3d86:	91 11       	cpse	r25, r1
    3d88:	08 c0       	rjmp	.+16     	; 0x3d9a <prvGetNextExpireTime+0x28>
    3d8a:	07 80       	ldd	r0, Z+7	; 0x07
    3d8c:	f0 85       	ldd	r31, Z+8	; 0x08
    3d8e:	e0 2d       	mov	r30, r0
    3d90:	60 81       	ld	r22, Z
    3d92:	71 81       	ldd	r23, Z+1	; 0x01
    3d94:	82 81       	ldd	r24, Z+2	; 0x02
    3d96:	93 81       	ldd	r25, Z+3	; 0x03
    3d98:	08 95       	ret
    3d9a:	60 e0       	ldi	r22, 0x00	; 0
    3d9c:	70 e0       	ldi	r23, 0x00	; 0
    3d9e:	cb 01       	movw	r24, r22
    3da0:	08 95       	ret

00003da2 <prvInsertTimerInActiveList>:
    3da2:	cf 92       	push	r12
    3da4:	df 92       	push	r13
    3da6:	ef 92       	push	r14
    3da8:	ff 92       	push	r15
    3daa:	0f 93       	push	r16
    3dac:	1f 93       	push	r17
    3dae:	fc 01       	movw	r30, r24
    3db0:	42 83       	std	Z+2, r20	; 0x02
    3db2:	53 83       	std	Z+3, r21	; 0x03
    3db4:	64 83       	std	Z+4, r22	; 0x04
    3db6:	75 83       	std	Z+5, r23	; 0x05
    3db8:	93 87       	std	Z+11, r25	; 0x0b
    3dba:	82 87       	std	Z+10, r24	; 0x0a
    3dbc:	04 17       	cp	r16, r20
    3dbe:	15 07       	cpc	r17, r21
    3dc0:	26 07       	cpc	r18, r22
    3dc2:	37 07       	cpc	r19, r23
    3dc4:	c0 f0       	brcs	.+48     	; 0x3df6 <prvInsertTimerInActiveList+0x54>
    3dc6:	0c 19       	sub	r16, r12
    3dc8:	1d 09       	sbc	r17, r13
    3dca:	2e 09       	sbc	r18, r14
    3dcc:	3f 09       	sbc	r19, r15
    3dce:	86 85       	ldd	r24, Z+14	; 0x0e
    3dd0:	97 85       	ldd	r25, Z+15	; 0x0f
    3dd2:	a0 89       	ldd	r26, Z+16	; 0x10
    3dd4:	b1 89       	ldd	r27, Z+17	; 0x11
    3dd6:	08 17       	cp	r16, r24
    3dd8:	19 07       	cpc	r17, r25
    3dda:	2a 07       	cpc	r18, r26
    3ddc:	3b 07       	cpc	r19, r27
    3dde:	00 f5       	brcc	.+64     	; 0x3e20 <prvInsertTimerInActiveList+0x7e>
    3de0:	bf 01       	movw	r22, r30
    3de2:	6e 5f       	subi	r22, 0xFE	; 254
    3de4:	7f 4f       	sbci	r23, 0xFF	; 255
    3de6:	80 91 e1 14 	lds	r24, 0x14E1	; 0x8014e1 <pxOverflowTimerList>
    3dea:	90 91 e2 14 	lds	r25, 0x14E2	; 0x8014e2 <pxOverflowTimerList+0x1>
    3dee:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	18 c0       	rjmp	.+48     	; 0x3e26 <prvInsertTimerInActiveList+0x84>
    3df6:	0c 15       	cp	r16, r12
    3df8:	1d 05       	cpc	r17, r13
    3dfa:	2e 05       	cpc	r18, r14
    3dfc:	3f 05       	cpc	r19, r15
    3dfe:	28 f4       	brcc	.+10     	; 0x3e0a <prvInsertTimerInActiveList+0x68>
    3e00:	4c 15       	cp	r20, r12
    3e02:	5d 05       	cpc	r21, r13
    3e04:	6e 05       	cpc	r22, r14
    3e06:	7f 05       	cpc	r23, r15
    3e08:	68 f4       	brcc	.+26     	; 0x3e24 <prvInsertTimerInActiveList+0x82>
    3e0a:	bf 01       	movw	r22, r30
    3e0c:	6e 5f       	subi	r22, 0xFE	; 254
    3e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e10:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <pxCurrentTimerList>
    3e14:	90 91 e4 14 	lds	r25, 0x14E4	; 0x8014e4 <pxCurrentTimerList+0x1>
    3e18:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	03 c0       	rjmp	.+6      	; 0x3e26 <prvInsertTimerInActiveList+0x84>
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	01 c0       	rjmp	.+2      	; 0x3e26 <prvInsertTimerInActiveList+0x84>
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	1f 91       	pop	r17
    3e28:	0f 91       	pop	r16
    3e2a:	ff 90       	pop	r15
    3e2c:	ef 90       	pop	r14
    3e2e:	df 90       	pop	r13
    3e30:	cf 90       	pop	r12
    3e32:	08 95       	ret

00003e34 <prvCheckForValidListAndQueue>:
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	0f 92       	push	r0
    3e3a:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <xTimerQueue>
    3e3e:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <xTimerQueue+0x1>
    3e42:	89 2b       	or	r24, r25
    3e44:	e9 f4       	brne	.+58     	; 0x3e80 <prvCheckForValidListAndQueue+0x4c>
    3e46:	80 ef       	ldi	r24, 0xF0	; 240
    3e48:	94 e1       	ldi	r25, 0x14	; 20
    3e4a:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    3e4e:	85 ee       	ldi	r24, 0xE5	; 229
    3e50:	94 e1       	ldi	r25, 0x14	; 20
    3e52:	0e 94 ce 09 	call	0x139c	; 0x139c <vListInitialise>
    3e56:	80 ef       	ldi	r24, 0xF0	; 240
    3e58:	94 e1       	ldi	r25, 0x14	; 20
    3e5a:	90 93 e4 14 	sts	0x14E4, r25	; 0x8014e4 <pxCurrentTimerList+0x1>
    3e5e:	80 93 e3 14 	sts	0x14E3, r24	; 0x8014e3 <pxCurrentTimerList>
    3e62:	85 ee       	ldi	r24, 0xE5	; 229
    3e64:	94 e1       	ldi	r25, 0x14	; 20
    3e66:	90 93 e2 14 	sts	0x14E2, r25	; 0x8014e2 <pxOverflowTimerList+0x1>
    3e6a:	80 93 e1 14 	sts	0x14E1, r24	; 0x8014e1 <pxOverflowTimerList>
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	67 e0       	ldi	r22, 0x07	; 7
    3e72:	8a e0       	ldi	r24, 0x0A	; 10
    3e74:	0e 94 91 0c 	call	0x1922	; 0x1922 <xQueueGenericCreate>
    3e78:	90 93 e0 14 	sts	0x14E0, r25	; 0x8014e0 <xTimerQueue+0x1>
    3e7c:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <xTimerQueue>
    3e80:	0f 90       	pop	r0
    3e82:	0f be       	out	0x3f, r0	; 63
    3e84:	08 95       	ret

00003e86 <xTimerCreateTimerTask>:
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	d3 df       	rcall	.-90     	; 0x3e34 <prvCheckForValidListAndQueue>
    3e8e:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <xTimerQueue>
    3e92:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <xTimerQueue+0x1>
    3e96:	89 2b       	or	r24, r25
    3e98:	91 f0       	breq	.+36     	; 0x3ebe <xTimerCreateTimerTask+0x38>
    3e9a:	0f 2e       	mov	r0, r31
    3e9c:	fd ed       	ldi	r31, 0xDD	; 221
    3e9e:	ef 2e       	mov	r14, r31
    3ea0:	f4 e1       	ldi	r31, 0x14	; 20
    3ea2:	ff 2e       	mov	r15, r31
    3ea4:	f0 2d       	mov	r31, r0
    3ea6:	03 e0       	ldi	r16, 0x03	; 3
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	40 ec       	ldi	r20, 0xC0	; 192
    3eae:	50 e0       	ldi	r21, 0x00	; 0
    3eb0:	6f e4       	ldi	r22, 0x4F	; 79
    3eb2:	75 e0       	ldi	r23, 0x05	; 5
    3eb4:	89 e5       	ldi	r24, 0x59	; 89
    3eb6:	91 e0       	ldi	r25, 0x01	; 1
    3eb8:	0e 94 44 14 	call	0x2888	; 0x2888 <xTaskCreate>
    3ebc:	01 c0       	rjmp	.+2      	; 0x3ec0 <xTimerCreateTimerTask+0x3a>
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	0f 91       	pop	r16
    3ec2:	ff 90       	pop	r15
    3ec4:	ef 90       	pop	r14
    3ec6:	08 95       	ret

00003ec8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3ec8:	8f 92       	push	r8
    3eca:	9f 92       	push	r9
    3ecc:	af 92       	push	r10
    3ece:	bf 92       	push	r11
    3ed0:	cf 92       	push	r12
    3ed2:	df 92       	push	r13
    3ed4:	ef 92       	push	r14
    3ed6:	ff 92       	push	r15
    3ed8:	0f 93       	push	r16
    3eda:	1f 93       	push	r17
    3edc:	cf 93       	push	r28
    3ede:	df 93       	push	r29
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	27 97       	sbiw	r28, 0x07	; 7
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3ef0:	e0 91 df 14 	lds	r30, 0x14DF	; 0x8014df <xTimerQueue>
    3ef4:	f0 91 e0 14 	lds	r31, 0x14E0	; 0x8014e0 <xTimerQueue+0x1>
    3ef8:	30 97       	sbiw	r30, 0x00	; 0
    3efa:	81 f1       	breq	.+96     	; 0x3f5c <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3efc:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3efe:	2a 83       	std	Y+2, r18	; 0x02
    3f00:	3b 83       	std	Y+3, r19	; 0x03
    3f02:	4c 83       	std	Y+4, r20	; 0x04
    3f04:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3f06:	9f 83       	std	Y+7, r25	; 0x07
    3f08:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3f0a:	66 30       	cpi	r22, 0x06	; 6
    3f0c:	f4 f4       	brge	.+60     	; 0x3f4a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3f0e:	c3 da       	rcall	.-2682   	; 0x3496 <xTaskGetSchedulerState>
    3f10:	82 30       	cpi	r24, 0x02	; 2
    3f12:	69 f4       	brne	.+26     	; 0x3f2e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3f14:	00 e0       	ldi	r16, 0x00	; 0
    3f16:	a7 01       	movw	r20, r14
    3f18:	96 01       	movw	r18, r12
    3f1a:	be 01       	movw	r22, r28
    3f1c:	6f 5f       	subi	r22, 0xFF	; 255
    3f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f20:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <xTimerQueue>
    3f24:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <xTimerQueue+0x1>
    3f28:	0e 94 b4 0c 	call	0x1968	; 0x1968 <xQueueGenericSend>
    3f2c:	18 c0       	rjmp	.+48     	; 0x3f5e <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3f2e:	00 e0       	ldi	r16, 0x00	; 0
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	a9 01       	movw	r20, r18
    3f36:	be 01       	movw	r22, r28
    3f38:	6f 5f       	subi	r22, 0xFF	; 255
    3f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3c:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <xTimerQueue>
    3f40:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <xTimerQueue+0x1>
    3f44:	0e 94 b4 0c 	call	0x1968	; 0x1968 <xQueueGenericSend>
    3f48:	0a c0       	rjmp	.+20     	; 0x3f5e <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	a8 01       	movw	r20, r16
    3f4e:	be 01       	movw	r22, r28
    3f50:	6f 5f       	subi	r22, 0xFF	; 255
    3f52:	7f 4f       	sbci	r23, 0xFF	; 255
    3f54:	cf 01       	movw	r24, r30
    3f56:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xQueueGenericSendFromISR>
    3f5a:	01 c0       	rjmp	.+2      	; 0x3f5e <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3f5e:	27 96       	adiw	r28, 0x07	; 7
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	df 91       	pop	r29
    3f6c:	cf 91       	pop	r28
    3f6e:	1f 91       	pop	r17
    3f70:	0f 91       	pop	r16
    3f72:	ff 90       	pop	r15
    3f74:	ef 90       	pop	r14
    3f76:	df 90       	pop	r13
    3f78:	cf 90       	pop	r12
    3f7a:	bf 90       	pop	r11
    3f7c:	af 90       	pop	r10
    3f7e:	9f 90       	pop	r9
    3f80:	8f 90       	pop	r8
    3f82:	08 95       	ret

00003f84 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3f84:	8f 92       	push	r8
    3f86:	9f 92       	push	r9
    3f88:	af 92       	push	r10
    3f8a:	bf 92       	push	r11
    3f8c:	cf 92       	push	r12
    3f8e:	df 92       	push	r13
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3f9c:	3b c0       	rjmp	.+118    	; 0x4014 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3f9e:	07 80       	ldd	r0, Z+7	; 0x07
    3fa0:	f0 85       	ldd	r31, Z+8	; 0x08
    3fa2:	e0 2d       	mov	r30, r0
    3fa4:	80 80       	ld	r8, Z
    3fa6:	91 80       	ldd	r9, Z+1	; 0x01
    3fa8:	a2 80       	ldd	r10, Z+2	; 0x02
    3faa:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3fac:	c0 85       	ldd	r28, Z+8	; 0x08
    3fae:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3fb0:	8e 01       	movw	r16, r28
    3fb2:	0e 5f       	subi	r16, 0xFE	; 254
    3fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb6:	c8 01       	movw	r24, r16
    3fb8:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3fbc:	ec 89       	ldd	r30, Y+20	; 0x14
    3fbe:	fd 89       	ldd	r31, Y+21	; 0x15
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3fc4:	8e 89       	ldd	r24, Y+22	; 0x16
    3fc6:	82 ff       	sbrs	r24, 2
    3fc8:	25 c0       	rjmp	.+74     	; 0x4014 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3fca:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fcc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fce:	a8 89       	ldd	r26, Y+16	; 0x10
    3fd0:	b9 89       	ldd	r27, Y+17	; 0x11
    3fd2:	88 0d       	add	r24, r8
    3fd4:	99 1d       	adc	r25, r9
    3fd6:	aa 1d       	adc	r26, r10
    3fd8:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3fda:	88 16       	cp	r8, r24
    3fdc:	99 06       	cpc	r9, r25
    3fde:	aa 06       	cpc	r10, r26
    3fe0:	bb 06       	cpc	r11, r27
    3fe2:	70 f4       	brcc	.+28     	; 0x4000 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3fe4:	8a 83       	std	Y+2, r24	; 0x02
    3fe6:	9b 83       	std	Y+3, r25	; 0x03
    3fe8:	ac 83       	std	Y+4, r26	; 0x04
    3fea:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3fec:	db 87       	std	Y+11, r29	; 0x0b
    3fee:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3ff0:	b8 01       	movw	r22, r16
    3ff2:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <pxCurrentTimerList>
    3ff6:	90 91 e4 14 	lds	r25, 0x14E4	; 0x8014e4 <pxCurrentTimerList+0x1>
    3ffa:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vListInsert>
    3ffe:	0a c0       	rjmp	.+20     	; 0x4014 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4000:	c1 2c       	mov	r12, r1
    4002:	d1 2c       	mov	r13, r1
    4004:	76 01       	movw	r14, r12
    4006:	00 e0       	ldi	r16, 0x00	; 0
    4008:	10 e0       	ldi	r17, 0x00	; 0
    400a:	a5 01       	movw	r20, r10
    400c:	94 01       	movw	r18, r8
    400e:	60 e0       	ldi	r22, 0x00	; 0
    4010:	ce 01       	movw	r24, r28
    4012:	5a df       	rcall	.-332    	; 0x3ec8 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4014:	e0 91 e3 14 	lds	r30, 0x14E3	; 0x8014e3 <pxCurrentTimerList>
    4018:	f0 91 e4 14 	lds	r31, 0x14E4	; 0x8014e4 <pxCurrentTimerList+0x1>
    401c:	80 81       	ld	r24, Z
    401e:	81 11       	cpse	r24, r1
    4020:	be cf       	rjmp	.-132    	; 0x3f9e <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    4022:	80 91 e1 14 	lds	r24, 0x14E1	; 0x8014e1 <pxOverflowTimerList>
    4026:	90 91 e2 14 	lds	r25, 0x14E2	; 0x8014e2 <pxOverflowTimerList+0x1>
    402a:	90 93 e4 14 	sts	0x14E4, r25	; 0x8014e4 <pxCurrentTimerList+0x1>
    402e:	80 93 e3 14 	sts	0x14E3, r24	; 0x8014e3 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    4032:	f0 93 e2 14 	sts	0x14E2, r31	; 0x8014e2 <pxOverflowTimerList+0x1>
    4036:	e0 93 e1 14 	sts	0x14E1, r30	; 0x8014e1 <pxOverflowTimerList>
    }
    403a:	df 91       	pop	r29
    403c:	cf 91       	pop	r28
    403e:	1f 91       	pop	r17
    4040:	0f 91       	pop	r16
    4042:	ff 90       	pop	r15
    4044:	ef 90       	pop	r14
    4046:	df 90       	pop	r13
    4048:	cf 90       	pop	r12
    404a:	bf 90       	pop	r11
    404c:	af 90       	pop	r10
    404e:	9f 90       	pop	r9
    4050:	8f 90       	pop	r8
    4052:	08 95       	ret

00004054 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    4054:	cf 92       	push	r12
    4056:	df 92       	push	r13
    4058:	ef 92       	push	r14
    405a:	ff 92       	push	r15
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    4062:	0e 94 ce 14 	call	0x299c	; 0x299c <xTaskGetTickCount>
    4066:	6b 01       	movw	r12, r22
    4068:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    406a:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <xLastTime.2436>
    406e:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <xLastTime.2436+0x1>
    4072:	a0 91 db 14 	lds	r26, 0x14DB	; 0x8014db <xLastTime.2436+0x2>
    4076:	b0 91 dc 14 	lds	r27, 0x14DC	; 0x8014dc <xLastTime.2436+0x3>
    407a:	c8 16       	cp	r12, r24
    407c:	d9 06       	cpc	r13, r25
    407e:	ea 06       	cpc	r14, r26
    4080:	fb 06       	cpc	r15, r27
    4082:	20 f4       	brcc	.+8      	; 0x408c <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    4084:	7f df       	rcall	.-258    	; 0x3f84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	88 83       	st	Y, r24
    408a:	01 c0       	rjmp	.+2      	; 0x408e <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    408c:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    408e:	c0 92 d9 14 	sts	0x14D9, r12	; 0x8014d9 <xLastTime.2436>
    4092:	d0 92 da 14 	sts	0x14DA, r13	; 0x8014da <xLastTime.2436+0x1>
    4096:	e0 92 db 14 	sts	0x14DB, r14	; 0x8014db <xLastTime.2436+0x2>
    409a:	f0 92 dc 14 	sts	0x14DC, r15	; 0x8014dc <xLastTime.2436+0x3>

        return xTimeNow;
    }
    409e:	c7 01       	movw	r24, r14
    40a0:	b6 01       	movw	r22, r12
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	ff 90       	pop	r15
    40a8:	ef 90       	pop	r14
    40aa:	df 90       	pop	r13
    40ac:	cf 90       	pop	r12
    40ae:	08 95       	ret

000040b0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    40b0:	4f 92       	push	r4
    40b2:	5f 92       	push	r5
    40b4:	6f 92       	push	r6
    40b6:	7f 92       	push	r7
    40b8:	8f 92       	push	r8
    40ba:	9f 92       	push	r9
    40bc:	af 92       	push	r10
    40be:	bf 92       	push	r11
    40c0:	cf 92       	push	r12
    40c2:	df 92       	push	r13
    40c4:	ef 92       	push	r14
    40c6:	ff 92       	push	r15
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	4b 01       	movw	r8, r22
    40d2:	5c 01       	movw	r10, r24
    40d4:	29 01       	movw	r4, r18
    40d6:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    40d8:	e0 91 e3 14 	lds	r30, 0x14E3	; 0x8014e3 <pxCurrentTimerList>
    40dc:	f0 91 e4 14 	lds	r31, 0x14E4	; 0x8014e4 <pxCurrentTimerList+0x1>
    40e0:	07 80       	ldd	r0, Z+7	; 0x07
    40e2:	f0 85       	ldd	r31, Z+8	; 0x08
    40e4:	e0 2d       	mov	r30, r0
    40e6:	c0 85       	ldd	r28, Z+8	; 0x08
    40e8:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    40ea:	ce 01       	movw	r24, r28
    40ec:	02 96       	adiw	r24, 0x02	; 2
    40ee:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    40f2:	8e 89       	ldd	r24, Y+22	; 0x16
    40f4:	82 ff       	sbrs	r24, 2
    40f6:	1b c0       	rjmp	.+54     	; 0x412e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    40f8:	4e 85       	ldd	r20, Y+14	; 0x0e
    40fa:	5f 85       	ldd	r21, Y+15	; 0x0f
    40fc:	68 89       	ldd	r22, Y+16	; 0x10
    40fe:	79 89       	ldd	r23, Y+17	; 0x11
    4100:	48 0d       	add	r20, r8
    4102:	59 1d       	adc	r21, r9
    4104:	6a 1d       	adc	r22, r10
    4106:	7b 1d       	adc	r23, r11
    4108:	75 01       	movw	r14, r10
    410a:	64 01       	movw	r12, r8
    410c:	93 01       	movw	r18, r6
    410e:	82 01       	movw	r16, r4
    4110:	ce 01       	movw	r24, r28
    4112:	47 de       	rcall	.-882    	; 0x3da2 <prvInsertTimerInActiveList>
    4114:	88 23       	and	r24, r24
    4116:	69 f0       	breq	.+26     	; 0x4132 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4118:	c1 2c       	mov	r12, r1
    411a:	d1 2c       	mov	r13, r1
    411c:	76 01       	movw	r14, r12
    411e:	00 e0       	ldi	r16, 0x00	; 0
    4120:	10 e0       	ldi	r17, 0x00	; 0
    4122:	a5 01       	movw	r20, r10
    4124:	94 01       	movw	r18, r8
    4126:	60 e0       	ldi	r22, 0x00	; 0
    4128:	ce 01       	movw	r24, r28
    412a:	ce de       	rcall	.-612    	; 0x3ec8 <xTimerGenericCommand>
    412c:	02 c0       	rjmp	.+4      	; 0x4132 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    412e:	8e 7f       	andi	r24, 0xFE	; 254
    4130:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4132:	ec 89       	ldd	r30, Y+20	; 0x14
    4134:	fd 89       	ldd	r31, Y+21	; 0x15
    4136:	ce 01       	movw	r24, r28
    4138:	19 95       	eicall
    }
    413a:	df 91       	pop	r29
    413c:	cf 91       	pop	r28
    413e:	1f 91       	pop	r17
    4140:	0f 91       	pop	r16
    4142:	ff 90       	pop	r15
    4144:	ef 90       	pop	r14
    4146:	df 90       	pop	r13
    4148:	cf 90       	pop	r12
    414a:	bf 90       	pop	r11
    414c:	af 90       	pop	r10
    414e:	9f 90       	pop	r9
    4150:	8f 90       	pop	r8
    4152:	7f 90       	pop	r7
    4154:	6f 90       	pop	r6
    4156:	5f 90       	pop	r5
    4158:	4f 90       	pop	r4
    415a:	08 95       	ret

0000415c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    415c:	8f 92       	push	r8
    415e:	9f 92       	push	r9
    4160:	af 92       	push	r10
    4162:	bf 92       	push	r11
    4164:	cf 92       	push	r12
    4166:	df 92       	push	r13
    4168:	ef 92       	push	r14
    416a:	ff 92       	push	r15
    416c:	1f 93       	push	r17
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
    4172:	1f 92       	push	r1
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
    4178:	6b 01       	movw	r12, r22
    417a:	7c 01       	movw	r14, r24
    417c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    417e:	0e 94 c8 14 	call	0x2990	; 0x2990 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4182:	ce 01       	movw	r24, r28
    4184:	01 96       	adiw	r24, 0x01	; 1
    4186:	66 df       	rcall	.-308    	; 0x4054 <prvSampleTimeNow>
    4188:	4b 01       	movw	r8, r22
    418a:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	81 11       	cpse	r24, r1
    4190:	2d c0       	rjmp	.+90     	; 0x41ec <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4192:	11 11       	cpse	r17, r1
    4194:	0d c0       	rjmp	.+26     	; 0x41b0 <prvProcessTimerOrBlockTask+0x54>
    4196:	8c 14       	cp	r8, r12
    4198:	9d 04       	cpc	r9, r13
    419a:	ae 04       	cpc	r10, r14
    419c:	bf 04       	cpc	r11, r15
    419e:	40 f0       	brcs	.+16     	; 0x41b0 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    41a0:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    41a4:	a5 01       	movw	r20, r10
    41a6:	94 01       	movw	r18, r8
    41a8:	c7 01       	movw	r24, r14
    41aa:	b6 01       	movw	r22, r12
    41ac:	81 df       	rcall	.-254    	; 0x40b0 <prvProcessExpiredTimer>
    41ae:	20 c0       	rjmp	.+64     	; 0x41f0 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    41b0:	11 23       	and	r17, r17
    41b2:	41 f0       	breq	.+16     	; 0x41c4 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    41b4:	e0 91 e1 14 	lds	r30, 0x14E1	; 0x8014e1 <pxOverflowTimerList>
    41b8:	f0 91 e2 14 	lds	r31, 0x14E2	; 0x8014e2 <pxOverflowTimerList+0x1>
    41bc:	80 81       	ld	r24, Z
    41be:	11 e0       	ldi	r17, 0x01	; 1
    41c0:	81 11       	cpse	r24, r1
    41c2:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    41c4:	b7 01       	movw	r22, r14
    41c6:	a6 01       	movw	r20, r12
    41c8:	48 19       	sub	r20, r8
    41ca:	59 09       	sbc	r21, r9
    41cc:	6a 09       	sbc	r22, r10
    41ce:	7b 09       	sbc	r23, r11
    41d0:	21 2f       	mov	r18, r17
    41d2:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <xTimerQueue>
    41d6:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <xTimerQueue+0x1>
    41da:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    41de:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
    41e2:	81 11       	cpse	r24, r1
    41e4:	05 c0       	rjmp	.+10     	; 0x41f0 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    41e6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    41ea:	02 c0       	rjmp	.+4      	; 0x41f0 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    41ec:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskResumeAll>
            }
        }
    }
    41f0:	0f 90       	pop	r0
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	1f 91       	pop	r17
    41f8:	ff 90       	pop	r15
    41fa:	ef 90       	pop	r14
    41fc:	df 90       	pop	r13
    41fe:	cf 90       	pop	r12
    4200:	bf 90       	pop	r11
    4202:	af 90       	pop	r10
    4204:	9f 90       	pop	r9
    4206:	8f 90       	pop	r8
    4208:	08 95       	ret

0000420a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    420a:	af 92       	push	r10
    420c:	bf 92       	push	r11
    420e:	cf 92       	push	r12
    4210:	df 92       	push	r13
    4212:	ef 92       	push	r14
    4214:	ff 92       	push	r15
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	df 93       	push	r29
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
    4222:	28 97       	sbiw	r28, 0x08	; 8
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    422e:	82 c0       	rjmp	.+260    	; 0x4334 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	88 23       	and	r24, r24
    4234:	0c f4       	brge	.+2      	; 0x4238 <prvProcessReceivedCommands+0x2e>
    4236:	7e c0       	rjmp	.+252    	; 0x4334 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4238:	ae 80       	ldd	r10, Y+6	; 0x06
    423a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    423c:	d5 01       	movw	r26, r10
    423e:	1c 96       	adiw	r26, 0x0c	; 12
    4240:	8d 91       	ld	r24, X+
    4242:	9c 91       	ld	r25, X
    4244:	1d 97       	sbiw	r26, 0x0d	; 13
    4246:	89 2b       	or	r24, r25
    4248:	21 f0       	breq	.+8      	; 0x4252 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    424a:	c5 01       	movw	r24, r10
    424c:	02 96       	adiw	r24, 0x02	; 2
    424e:	0e 94 20 0a 	call	0x1440	; 0x1440 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4252:	ce 01       	movw	r24, r28
    4254:	08 96       	adiw	r24, 0x08	; 8
    4256:	fe de       	rcall	.-516    	; 0x4054 <prvSampleTimeNow>
    4258:	8b 01       	movw	r16, r22
    425a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    425c:	e9 81       	ldd	r30, Y+1	; 0x01
    425e:	0e 2e       	mov	r0, r30
    4260:	00 0c       	add	r0, r0
    4262:	ff 0b       	sbc	r31, r31
    4264:	ea 30       	cpi	r30, 0x0A	; 10
    4266:	f1 05       	cpc	r31, r1
    4268:	08 f0       	brcs	.+2      	; 0x426c <prvProcessReceivedCommands+0x62>
    426a:	64 c0       	rjmp	.+200    	; 0x4334 <prvProcessReceivedCommands+0x12a>
    426c:	88 27       	eor	r24, r24
    426e:	ee 58       	subi	r30, 0x8E	; 142
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	8f 4f       	sbci	r24, 0xFF	; 255
    4274:	0c 94 8a 35 	jmp	0x6b14	; 0x6b14 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4278:	f5 01       	movw	r30, r10
    427a:	86 89       	ldd	r24, Z+22	; 0x16
    427c:	81 60       	ori	r24, 0x01	; 1
    427e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    4280:	ca 80       	ldd	r12, Y+2	; 0x02
    4282:	db 80       	ldd	r13, Y+3	; 0x03
    4284:	ec 80       	ldd	r14, Y+4	; 0x04
    4286:	fd 80       	ldd	r15, Y+5	; 0x05
    4288:	46 85       	ldd	r20, Z+14	; 0x0e
    428a:	57 85       	ldd	r21, Z+15	; 0x0f
    428c:	60 89       	ldd	r22, Z+16	; 0x10
    428e:	71 89       	ldd	r23, Z+17	; 0x11
    4290:	4c 0d       	add	r20, r12
    4292:	5d 1d       	adc	r21, r13
    4294:	6e 1d       	adc	r22, r14
    4296:	7f 1d       	adc	r23, r15
    4298:	c5 01       	movw	r24, r10
    429a:	83 dd       	rcall	.-1274   	; 0x3da2 <prvInsertTimerInActiveList>
    429c:	88 23       	and	r24, r24
    429e:	09 f4       	brne	.+2      	; 0x42a2 <prvProcessReceivedCommands+0x98>
    42a0:	49 c0       	rjmp	.+146    	; 0x4334 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    42a2:	d5 01       	movw	r26, r10
    42a4:	54 96       	adiw	r26, 0x14	; 20
    42a6:	ed 91       	ld	r30, X+
    42a8:	fc 91       	ld	r31, X
    42aa:	55 97       	sbiw	r26, 0x15	; 21
    42ac:	c5 01       	movw	r24, r10
    42ae:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    42b0:	f5 01       	movw	r30, r10
    42b2:	86 89       	ldd	r24, Z+22	; 0x16
    42b4:	82 ff       	sbrs	r24, 2
    42b6:	3e c0       	rjmp	.+124    	; 0x4334 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    42b8:	4a 81       	ldd	r20, Y+2	; 0x02
    42ba:	5b 81       	ldd	r21, Y+3	; 0x03
    42bc:	6c 81       	ldd	r22, Y+4	; 0x04
    42be:	7d 81       	ldd	r23, Y+5	; 0x05
    42c0:	86 85       	ldd	r24, Z+14	; 0x0e
    42c2:	97 85       	ldd	r25, Z+15	; 0x0f
    42c4:	a0 89       	ldd	r26, Z+16	; 0x10
    42c6:	b1 89       	ldd	r27, Z+17	; 0x11
    42c8:	9a 01       	movw	r18, r20
    42ca:	ab 01       	movw	r20, r22
    42cc:	28 0f       	add	r18, r24
    42ce:	39 1f       	adc	r19, r25
    42d0:	4a 1f       	adc	r20, r26
    42d2:	5b 1f       	adc	r21, r27
    42d4:	c1 2c       	mov	r12, r1
    42d6:	d1 2c       	mov	r13, r1
    42d8:	76 01       	movw	r14, r12
    42da:	00 e0       	ldi	r16, 0x00	; 0
    42dc:	10 e0       	ldi	r17, 0x00	; 0
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	c5 01       	movw	r24, r10
    42e2:	f2 dd       	rcall	.-1052   	; 0x3ec8 <xTimerGenericCommand>
    42e4:	27 c0       	rjmp	.+78     	; 0x4334 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    42e6:	d5 01       	movw	r26, r10
    42e8:	56 96       	adiw	r26, 0x16	; 22
    42ea:	8c 91       	ld	r24, X
    42ec:	56 97       	sbiw	r26, 0x16	; 22
    42ee:	8e 7f       	andi	r24, 0xFE	; 254
    42f0:	56 96       	adiw	r26, 0x16	; 22
    42f2:	8c 93       	st	X, r24
                        break;
    42f4:	1f c0       	rjmp	.+62     	; 0x4334 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    42f6:	f5 01       	movw	r30, r10
    42f8:	86 89       	ldd	r24, Z+22	; 0x16
    42fa:	81 60       	ori	r24, 0x01	; 1
    42fc:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    42fe:	4a 81       	ldd	r20, Y+2	; 0x02
    4300:	5b 81       	ldd	r21, Y+3	; 0x03
    4302:	6c 81       	ldd	r22, Y+4	; 0x04
    4304:	7d 81       	ldd	r23, Y+5	; 0x05
    4306:	46 87       	std	Z+14, r20	; 0x0e
    4308:	57 87       	std	Z+15, r21	; 0x0f
    430a:	60 8b       	std	Z+16, r22	; 0x10
    430c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    430e:	40 0f       	add	r20, r16
    4310:	51 1f       	adc	r21, r17
    4312:	62 1f       	adc	r22, r18
    4314:	73 1f       	adc	r23, r19
    4316:	68 01       	movw	r12, r16
    4318:	79 01       	movw	r14, r18
    431a:	c5 01       	movw	r24, r10
    431c:	42 dd       	rcall	.-1404   	; 0x3da2 <prvInsertTimerInActiveList>
                        break;
    431e:	0a c0       	rjmp	.+20     	; 0x4334 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    4320:	f5 01       	movw	r30, r10
    4322:	86 89       	ldd	r24, Z+22	; 0x16
    4324:	81 fd       	sbrc	r24, 1
    4326:	04 c0       	rjmp	.+8      	; 0x4330 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    4328:	c5 01       	movw	r24, r10
    432a:	0e 94 91 09 	call	0x1322	; 0x1322 <vPortFree>
    432e:	02 c0       	rjmp	.+4      	; 0x4334 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4330:	8e 7f       	andi	r24, 0xFE	; 254
    4332:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	a9 01       	movw	r20, r18
    433a:	be 01       	movw	r22, r28
    433c:	6f 5f       	subi	r22, 0xFF	; 255
    433e:	7f 4f       	sbci	r23, 0xFF	; 255
    4340:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <xTimerQueue>
    4344:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <xTimerQueue+0x1>
    4348:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xQueueReceive>
    434c:	81 11       	cpse	r24, r1
    434e:	70 cf       	rjmp	.-288    	; 0x4230 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    4350:	28 96       	adiw	r28, 0x08	; 8
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	1f 91       	pop	r17
    4362:	0f 91       	pop	r16
    4364:	ff 90       	pop	r15
    4366:	ef 90       	pop	r14
    4368:	df 90       	pop	r13
    436a:	cf 90       	pop	r12
    436c:	bf 90       	pop	r11
    436e:	af 90       	pop	r10
    4370:	08 95       	ret

00004372 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    4372:	08 95       	ret

00004374 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4374:	84 b1       	in	r24, 0x04	; 4
    4376:	80 68       	ori	r24, 0x80	; 128
    4378:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    437a:	85 b1       	in	r24, 0x05	; 5
    437c:	80 68       	ori	r24, 0x80	; 128
    437e:	85 b9       	out	0x05, r24	; 5
    4380:	08 95       	ret

00004382 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    4382:	83 b1       	in	r24, 0x03	; 3
    4384:	80 68       	ori	r24, 0x80	; 128
    4386:	83 b9       	out	0x03, r24	; 3
    4388:	08 95       	ret

0000438a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    438a:	f4 df       	rcall	.-24     	; 0x4374 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    438c:	2f ef       	ldi	r18, 0xFF	; 255
    438e:	80 e7       	ldi	r24, 0x70	; 112
    4390:	92 e0       	ldi	r25, 0x02	; 2
    4392:	21 50       	subi	r18, 0x01	; 1
    4394:	80 40       	sbci	r24, 0x00	; 0
    4396:	90 40       	sbci	r25, 0x00	; 0
    4398:	e1 f7       	brne	.-8      	; 0x4392 <vApplicationMallocFailedHook+0x8>
    439a:	00 c0       	rjmp	.+0      	; 0x439c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    439c:	00 00       	nop
    439e:	f1 df       	rcall	.-30     	; 0x4382 <prvBlinkMainLed>
    43a0:	f5 cf       	rjmp	.-22     	; 0x438c <vApplicationMallocFailedHook+0x2>

000043a2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    43a2:	e8 df       	rcall	.-48     	; 0x4374 <prvSetMainLedOn>
    43a4:	2f ef       	ldi	r18, 0xFF	; 255
    43a6:	87 ea       	ldi	r24, 0xA7	; 167
    43a8:	91 e6       	ldi	r25, 0x61	; 97
    43aa:	21 50       	subi	r18, 0x01	; 1
    43ac:	80 40       	sbci	r24, 0x00	; 0
    43ae:	90 40       	sbci	r25, 0x00	; 0
    43b0:	e1 f7       	brne	.-8      	; 0x43aa <vApplicationStackOverflowHook+0x8>
    43b2:	00 c0       	rjmp	.+0      	; 0x43b4 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    43b4:	00 00       	nop
    43b6:	e5 df       	rcall	.-54     	; 0x4382 <prvBlinkMainLed>
    43b8:	f5 cf       	rjmp	.-22     	; 0x43a4 <vApplicationStackOverflowHook+0x2>

000043ba <createTasksForSensors>:
	create_semaphore_mutex_and_sensors(temperature_sensor);
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
	lora_handler_initialize(2, temperature_sensor, co2_sensor, xMutexSemaphore, lighthandler);	
}

void createTasksForSensors(){
    43ba:	0f 93       	push	r16
    43bc:	1f 93       	push	r17
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY, xMutexSemaphore);
    43be:	00 91 29 16 	lds	r16, 0x1629	; 0x801629 <xMutexSemaphore>
    43c2:	10 91 2a 16 	lds	r17, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
    43c6:	60 91 fd 14 	lds	r22, 0x14FD	; 0x8014fd <taskReadyBits>
    43ca:	70 91 fe 14 	lds	r23, 0x14FE	; 0x8014fe <taskReadyBits+0x1>
    43ce:	21 e0       	ldi	r18, 0x01	; 1
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	40 e0       	ldi	r20, 0x00	; 0
    43d4:	50 e0       	ldi	r21, 0x00	; 0
    43d6:	83 e0       	ldi	r24, 0x03	; 3
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 bc 04 	call	0x978	; 0x978 <createTemp>
    43de:	90 93 38 16 	sts	0x1638, r25	; 0x801638 <temperature_sensor+0x1>
    43e2:	80 93 37 16 	sts	0x1637, r24	; 0x801637 <temperature_sensor>
	lighthandler = createLightSensor(3, taskReadyBits, BIT_LIGHT_READY, xMutexSemaphore);
    43e6:	00 91 29 16 	lds	r16, 0x1629	; 0x801629 <xMutexSemaphore>
    43ea:	10 91 2a 16 	lds	r17, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
    43ee:	60 91 fd 14 	lds	r22, 0x14FD	; 0x8014fd <taskReadyBits>
    43f2:	70 91 fe 14 	lds	r23, 0x14FE	; 0x8014fe <taskReadyBits+0x1>
    43f6:	24 e0       	ldi	r18, 0x04	; 4
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e0       	ldi	r20, 0x00	; 0
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	83 e0       	ldi	r24, 0x03	; 3
    4400:	0e 94 2f 03 	call	0x65e	; 0x65e <createLightSensor>
    4404:	90 93 3a 16 	sts	0x163A, r25	; 0x80163a <lighthandler+0x1>
    4408:	80 93 39 16 	sts	0x1639, r24	; 0x801639 <lighthandler>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY, xMutexSemaphore);
    440c:	00 91 29 16 	lds	r16, 0x1629	; 0x801629 <xMutexSemaphore>
    4410:	10 91 2a 16 	lds	r17, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
    4414:	60 91 fd 14 	lds	r22, 0x14FD	; 0x8014fd <taskReadyBits>
    4418:	70 91 fe 14 	lds	r23, 0x14FE	; 0x8014fe <taskReadyBits+0x1>
    441c:	22 e0       	ldi	r18, 0x02	; 2
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e0       	ldi	r20, 0x00	; 0
    4422:	50 e0       	ldi	r21, 0x00	; 0
    4424:	83 e0       	ldi	r24, 0x03	; 3
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	0e 94 21 02 	call	0x442	; 0x442 <createCO2>
    442c:	90 93 3c 16 	sts	0x163C, r25	; 0x80163c <co2_sensor+0x1>
    4430:	80 93 3b 16 	sts	0x163B, r24	; 0x80163b <co2_sensor>
	
}
    4434:	1f 91       	pop	r17
    4436:	0f 91       	pop	r16
    4438:	08 95       	ret

0000443a <create_tasks_and_semaphores>:
#define BIT_LIGHT_READY (1 << 2)



void create_tasks_and_semaphores(void)
{
    443a:	0f 93       	push	r16
    443c:	1f 93       	push	r17
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xMutexSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    443e:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <xMutexSemaphore>
    4442:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
    4446:	89 2b       	or	r24, r25
    4448:	89 f4       	brne	.+34     	; 0x446c <create_tasks_and_semaphores+0x32>
	{
		xMutexSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <xQueueCreateMutex>
    4450:	90 93 2a 16 	sts	0x162A, r25	; 0x80162a <xMutexSemaphore+0x1>
    4454:	80 93 29 16 	sts	0x1629, r24	; 0x801629 <xMutexSemaphore>
		if ( ( xMutexSemaphore ) != NULL )
    4458:	00 97       	sbiw	r24, 0x00	; 0
    445a:	41 f0       	breq	.+16     	; 0x446c <create_tasks_and_semaphores+0x32>
		{
			xSemaphoreGive( ( xMutexSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    445c:	00 e0       	ldi	r16, 0x00	; 0
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	a9 01       	movw	r20, r18
    4464:	60 e0       	ldi	r22, 0x00	; 0
    4466:	70 e0       	ldi	r23, 0x00	; 0
    4468:	0e 94 b4 0c 	call	0x1968	; 0x1968 <xQueueGenericSend>
		}
	}
	
	create_shared_printf();
    446c:	0e 94 c0 03 	call	0x780	; 0x780 <create_shared_printf>
	createTasksForSensors();
    4470:	a4 df       	rcall	.-184    	; 0x43ba <createTasksForSensors>
	create_semaphore_mutex_and_sensors(temperature_sensor);
    4472:	80 91 37 16 	lds	r24, 0x1637	; 0x801637 <temperature_sensor>
    4476:	90 91 38 16 	lds	r25, 0x1638	; 0x801638 <temperature_sensor+0x1>
    447a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <create_semaphore_mutex_and_sensors>
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
    447e:	60 91 fb 14 	lds	r22, 0x14FB	; 0x8014fb <downLinkMessageBufferHandle>
    4482:	70 91 fc 14 	lds	r23, 0x14FC	; 0x8014fc <downLinkMessageBufferHandle+0x1>
    4486:	84 e0       	ldi	r24, 0x04	; 4
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	0e 94 66 02 	call	0x4cc	; 0x4cc <DownLinkHandler_Create>
	lora_handler_initialize(2, temperature_sensor, co2_sensor, xMutexSemaphore, lighthandler);	
    448e:	00 91 39 16 	lds	r16, 0x1639	; 0x801639 <lighthandler>
    4492:	10 91 3a 16 	lds	r17, 0x163A	; 0x80163a <lighthandler+0x1>
    4496:	20 91 29 16 	lds	r18, 0x1629	; 0x801629 <xMutexSemaphore>
    449a:	30 91 2a 16 	lds	r19, 0x162A	; 0x80162a <xMutexSemaphore+0x1>
    449e:	40 91 3b 16 	lds	r20, 0x163B	; 0x80163b <co2_sensor>
    44a2:	50 91 3c 16 	lds	r21, 0x163C	; 0x80163c <co2_sensor+0x1>
    44a6:	60 91 37 16 	lds	r22, 0x1637	; 0x801637 <temperature_sensor>
    44aa:	70 91 38 16 	lds	r23, 0x1638	; 0x801638 <temperature_sensor+0x1>
    44ae:	82 e0       	ldi	r24, 0x02	; 2
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 ed 06 	call	0xdda	; 0xdda <lora_handler_initialize>
}
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	08 95       	ret

000044bc <initializeSystem>:
	
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    44bc:	0e 94 34 07 	call	0xe68	; 0xe68 <xEventGroupCreate>
    44c0:	90 93 fe 14 	sts	0x14FE, r25	; 0x8014fe <taskReadyBits+0x1>
    44c4:	80 93 fd 14 	sts	0x14FD, r24	; 0x8014fd <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <stdio_initialise>
	
	
	rc_servo_initialise();
    44ce:	69 d7       	rcall	.+3794   	; 0x53a2 <rc_servo_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*1);
    44d0:	41 e0       	ldi	r20, 0x01	; 1
    44d2:	60 e0       	ldi	r22, 0x00	; 0
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	86 e1       	ldi	r24, 0x16	; 22
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	0e 94 3e 10 	call	0x207c	; 0x207c <xStreamBufferGenericCreate>
    44de:	90 93 fc 14 	sts	0x14FC, r25	; 0x8014fc <downLinkMessageBufferHandle+0x1>
    44e2:	80 93 fb 14 	sts	0x14FB, r24	; 0x8014fb <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    44e6:	bc 01       	movw	r22, r24
    44e8:	81 e0       	ldi	r24, 0x01	; 1
	create_tasks_and_semaphores();
    44ea:	43 d3       	rcall	.+1670   	; 0x4b72 <lora_driver_initialise>
    44ec:	a6 cf       	rjmp	.-180    	; 0x443a <create_tasks_and_semaphores>
    44ee:	08 95       	ret

000044f0 <main>:
}

int main(void){
	initializeSystem();
    44f0:	e5 df       	rcall	.-54     	; 0x44bc <initializeSystem>
	vTaskStartScheduler();
    44f2:	0e 94 90 14 	call	0x2920	; 0x2920 <vTaskStartScheduler>
    44f6:	ff cf       	rjmp	.-2      	; 0x44f6 <main+0x6>

000044f8 <__fixsfsi>:
    44f8:	04 d0       	rcall	.+8      	; 0x4502 <__fixunssfsi>
    44fa:	68 94       	set
    44fc:	b1 11       	cpse	r27, r1
    44fe:	50 c0       	rjmp	.+160    	; 0x45a0 <__fp_szero>
    4500:	08 95       	ret

00004502 <__fixunssfsi>:
    4502:	33 d0       	rcall	.+102    	; 0x456a <__fp_splitA>
    4504:	88 f0       	brcs	.+34     	; 0x4528 <__fixunssfsi+0x26>
    4506:	9f 57       	subi	r25, 0x7F	; 127
    4508:	90 f0       	brcs	.+36     	; 0x452e <__fixunssfsi+0x2c>
    450a:	b9 2f       	mov	r27, r25
    450c:	99 27       	eor	r25, r25
    450e:	b7 51       	subi	r27, 0x17	; 23
    4510:	a0 f0       	brcs	.+40     	; 0x453a <__fixunssfsi+0x38>
    4512:	d1 f0       	breq	.+52     	; 0x4548 <__fixunssfsi+0x46>
    4514:	66 0f       	add	r22, r22
    4516:	77 1f       	adc	r23, r23
    4518:	88 1f       	adc	r24, r24
    451a:	99 1f       	adc	r25, r25
    451c:	1a f0       	brmi	.+6      	; 0x4524 <__fixunssfsi+0x22>
    451e:	ba 95       	dec	r27
    4520:	c9 f7       	brne	.-14     	; 0x4514 <__fixunssfsi+0x12>
    4522:	12 c0       	rjmp	.+36     	; 0x4548 <__fixunssfsi+0x46>
    4524:	b1 30       	cpi	r27, 0x01	; 1
    4526:	81 f0       	breq	.+32     	; 0x4548 <__fixunssfsi+0x46>
    4528:	3a d0       	rcall	.+116    	; 0x459e <__fp_zero>
    452a:	b1 e0       	ldi	r27, 0x01	; 1
    452c:	08 95       	ret
    452e:	37 c0       	rjmp	.+110    	; 0x459e <__fp_zero>
    4530:	67 2f       	mov	r22, r23
    4532:	78 2f       	mov	r23, r24
    4534:	88 27       	eor	r24, r24
    4536:	b8 5f       	subi	r27, 0xF8	; 248
    4538:	39 f0       	breq	.+14     	; 0x4548 <__fixunssfsi+0x46>
    453a:	b9 3f       	cpi	r27, 0xF9	; 249
    453c:	cc f3       	brlt	.-14     	; 0x4530 <__fixunssfsi+0x2e>
    453e:	86 95       	lsr	r24
    4540:	77 95       	ror	r23
    4542:	67 95       	ror	r22
    4544:	b3 95       	inc	r27
    4546:	d9 f7       	brne	.-10     	; 0x453e <__fixunssfsi+0x3c>
    4548:	3e f4       	brtc	.+14     	; 0x4558 <__fixunssfsi+0x56>
    454a:	90 95       	com	r25
    454c:	80 95       	com	r24
    454e:	70 95       	com	r23
    4550:	61 95       	neg	r22
    4552:	7f 4f       	sbci	r23, 0xFF	; 255
    4554:	8f 4f       	sbci	r24, 0xFF	; 255
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	08 95       	ret

0000455a <__fp_split3>:
    455a:	57 fd       	sbrc	r21, 7
    455c:	90 58       	subi	r25, 0x80	; 128
    455e:	44 0f       	add	r20, r20
    4560:	55 1f       	adc	r21, r21
    4562:	59 f0       	breq	.+22     	; 0x457a <__fp_splitA+0x10>
    4564:	5f 3f       	cpi	r21, 0xFF	; 255
    4566:	71 f0       	breq	.+28     	; 0x4584 <__fp_splitA+0x1a>
    4568:	47 95       	ror	r20

0000456a <__fp_splitA>:
    456a:	88 0f       	add	r24, r24
    456c:	97 fb       	bst	r25, 7
    456e:	99 1f       	adc	r25, r25
    4570:	61 f0       	breq	.+24     	; 0x458a <__fp_splitA+0x20>
    4572:	9f 3f       	cpi	r25, 0xFF	; 255
    4574:	79 f0       	breq	.+30     	; 0x4594 <__fp_splitA+0x2a>
    4576:	87 95       	ror	r24
    4578:	08 95       	ret
    457a:	12 16       	cp	r1, r18
    457c:	13 06       	cpc	r1, r19
    457e:	14 06       	cpc	r1, r20
    4580:	55 1f       	adc	r21, r21
    4582:	f2 cf       	rjmp	.-28     	; 0x4568 <__fp_split3+0xe>
    4584:	46 95       	lsr	r20
    4586:	f1 df       	rcall	.-30     	; 0x456a <__fp_splitA>
    4588:	08 c0       	rjmp	.+16     	; 0x459a <__fp_splitA+0x30>
    458a:	16 16       	cp	r1, r22
    458c:	17 06       	cpc	r1, r23
    458e:	18 06       	cpc	r1, r24
    4590:	99 1f       	adc	r25, r25
    4592:	f1 cf       	rjmp	.-30     	; 0x4576 <__fp_splitA+0xc>
    4594:	86 95       	lsr	r24
    4596:	71 05       	cpc	r23, r1
    4598:	61 05       	cpc	r22, r1
    459a:	08 94       	sec
    459c:	08 95       	ret

0000459e <__fp_zero>:
    459e:	e8 94       	clt

000045a0 <__fp_szero>:
    45a0:	bb 27       	eor	r27, r27
    45a2:	66 27       	eor	r22, r22
    45a4:	77 27       	eor	r23, r23
    45a6:	cb 01       	movw	r24, r22
    45a8:	97 f9       	bld	r25, 7
    45aa:	08 95       	ret

000045ac <modf>:
    45ac:	fa 01       	movw	r30, r20
    45ae:	dc 01       	movw	r26, r24
    45b0:	aa 0f       	add	r26, r26
    45b2:	bb 1f       	adc	r27, r27
    45b4:	9b 01       	movw	r18, r22
    45b6:	ac 01       	movw	r20, r24
    45b8:	bf 57       	subi	r27, 0x7F	; 127
    45ba:	28 f4       	brcc	.+10     	; 0x45c6 <modf+0x1a>
    45bc:	22 27       	eor	r18, r18
    45be:	33 27       	eor	r19, r19
    45c0:	44 27       	eor	r20, r20
    45c2:	50 78       	andi	r21, 0x80	; 128
    45c4:	1f c0       	rjmp	.+62     	; 0x4604 <modf+0x58>
    45c6:	b7 51       	subi	r27, 0x17	; 23
    45c8:	88 f4       	brcc	.+34     	; 0x45ec <modf+0x40>
    45ca:	ab 2f       	mov	r26, r27
    45cc:	00 24       	eor	r0, r0
    45ce:	46 95       	lsr	r20
    45d0:	37 95       	ror	r19
    45d2:	27 95       	ror	r18
    45d4:	01 1c       	adc	r0, r1
    45d6:	a3 95       	inc	r26
    45d8:	d2 f3       	brmi	.-12     	; 0x45ce <modf+0x22>
    45da:	00 20       	and	r0, r0
    45dc:	69 f0       	breq	.+26     	; 0x45f8 <modf+0x4c>
    45de:	22 0f       	add	r18, r18
    45e0:	33 1f       	adc	r19, r19
    45e2:	44 1f       	adc	r20, r20
    45e4:	b3 95       	inc	r27
    45e6:	da f3       	brmi	.-10     	; 0x45de <modf+0x32>
    45e8:	0d d0       	rcall	.+26     	; 0x4604 <modf+0x58>
    45ea:	76 c0       	rjmp	.+236    	; 0x46d8 <__subsf3>
    45ec:	61 30       	cpi	r22, 0x01	; 1
    45ee:	71 05       	cpc	r23, r1
    45f0:	a0 e8       	ldi	r26, 0x80	; 128
    45f2:	8a 07       	cpc	r24, r26
    45f4:	b9 46       	sbci	r27, 0x69	; 105
    45f6:	30 f4       	brcc	.+12     	; 0x4604 <modf+0x58>
    45f8:	9b 01       	movw	r18, r22
    45fa:	ac 01       	movw	r20, r24
    45fc:	66 27       	eor	r22, r22
    45fe:	77 27       	eor	r23, r23
    4600:	88 27       	eor	r24, r24
    4602:	90 78       	andi	r25, 0x80	; 128
    4604:	30 96       	adiw	r30, 0x00	; 0
    4606:	21 f0       	breq	.+8      	; 0x4610 <modf+0x64>
    4608:	20 83       	st	Z, r18
    460a:	31 83       	std	Z+1, r19	; 0x01
    460c:	42 83       	std	Z+2, r20	; 0x02
    460e:	53 83       	std	Z+3, r21	; 0x03
    4610:	08 95       	ret

00004612 <__mulsf3>:
    4612:	0b d0       	rcall	.+22     	; 0x462a <__mulsf3x>
    4614:	dd c0       	rjmp	.+442    	; 0x47d0 <__fp_round>
    4616:	ce d0       	rcall	.+412    	; 0x47b4 <__fp_pscA>
    4618:	28 f0       	brcs	.+10     	; 0x4624 <__mulsf3+0x12>
    461a:	d3 d0       	rcall	.+422    	; 0x47c2 <__fp_pscB>
    461c:	18 f0       	brcs	.+6      	; 0x4624 <__mulsf3+0x12>
    461e:	95 23       	and	r25, r21
    4620:	09 f0       	breq	.+2      	; 0x4624 <__mulsf3+0x12>
    4622:	bf c0       	rjmp	.+382    	; 0x47a2 <__fp_inf>
    4624:	c4 c0       	rjmp	.+392    	; 0x47ae <__fp_nan>
    4626:	11 24       	eor	r1, r1
    4628:	bb cf       	rjmp	.-138    	; 0x45a0 <__fp_szero>

0000462a <__mulsf3x>:
    462a:	97 df       	rcall	.-210    	; 0x455a <__fp_split3>
    462c:	a0 f3       	brcs	.-24     	; 0x4616 <__mulsf3+0x4>

0000462e <__mulsf3_pse>:
    462e:	95 9f       	mul	r25, r21
    4630:	d1 f3       	breq	.-12     	; 0x4626 <__mulsf3+0x14>
    4632:	95 0f       	add	r25, r21
    4634:	50 e0       	ldi	r21, 0x00	; 0
    4636:	55 1f       	adc	r21, r21
    4638:	62 9f       	mul	r22, r18
    463a:	f0 01       	movw	r30, r0
    463c:	72 9f       	mul	r23, r18
    463e:	bb 27       	eor	r27, r27
    4640:	f0 0d       	add	r31, r0
    4642:	b1 1d       	adc	r27, r1
    4644:	63 9f       	mul	r22, r19
    4646:	aa 27       	eor	r26, r26
    4648:	f0 0d       	add	r31, r0
    464a:	b1 1d       	adc	r27, r1
    464c:	aa 1f       	adc	r26, r26
    464e:	64 9f       	mul	r22, r20
    4650:	66 27       	eor	r22, r22
    4652:	b0 0d       	add	r27, r0
    4654:	a1 1d       	adc	r26, r1
    4656:	66 1f       	adc	r22, r22
    4658:	82 9f       	mul	r24, r18
    465a:	22 27       	eor	r18, r18
    465c:	b0 0d       	add	r27, r0
    465e:	a1 1d       	adc	r26, r1
    4660:	62 1f       	adc	r22, r18
    4662:	73 9f       	mul	r23, r19
    4664:	b0 0d       	add	r27, r0
    4666:	a1 1d       	adc	r26, r1
    4668:	62 1f       	adc	r22, r18
    466a:	83 9f       	mul	r24, r19
    466c:	a0 0d       	add	r26, r0
    466e:	61 1d       	adc	r22, r1
    4670:	22 1f       	adc	r18, r18
    4672:	74 9f       	mul	r23, r20
    4674:	33 27       	eor	r19, r19
    4676:	a0 0d       	add	r26, r0
    4678:	61 1d       	adc	r22, r1
    467a:	23 1f       	adc	r18, r19
    467c:	84 9f       	mul	r24, r20
    467e:	60 0d       	add	r22, r0
    4680:	21 1d       	adc	r18, r1
    4682:	82 2f       	mov	r24, r18
    4684:	76 2f       	mov	r23, r22
    4686:	6a 2f       	mov	r22, r26
    4688:	11 24       	eor	r1, r1
    468a:	9f 57       	subi	r25, 0x7F	; 127
    468c:	50 40       	sbci	r21, 0x00	; 0
    468e:	8a f0       	brmi	.+34     	; 0x46b2 <__mulsf3_pse+0x84>
    4690:	e1 f0       	breq	.+56     	; 0x46ca <__mulsf3_pse+0x9c>
    4692:	88 23       	and	r24, r24
    4694:	4a f0       	brmi	.+18     	; 0x46a8 <__mulsf3_pse+0x7a>
    4696:	ee 0f       	add	r30, r30
    4698:	ff 1f       	adc	r31, r31
    469a:	bb 1f       	adc	r27, r27
    469c:	66 1f       	adc	r22, r22
    469e:	77 1f       	adc	r23, r23
    46a0:	88 1f       	adc	r24, r24
    46a2:	91 50       	subi	r25, 0x01	; 1
    46a4:	50 40       	sbci	r21, 0x00	; 0
    46a6:	a9 f7       	brne	.-22     	; 0x4692 <__mulsf3_pse+0x64>
    46a8:	9e 3f       	cpi	r25, 0xFE	; 254
    46aa:	51 05       	cpc	r21, r1
    46ac:	70 f0       	brcs	.+28     	; 0x46ca <__mulsf3_pse+0x9c>
    46ae:	79 c0       	rjmp	.+242    	; 0x47a2 <__fp_inf>
    46b0:	77 cf       	rjmp	.-274    	; 0x45a0 <__fp_szero>
    46b2:	5f 3f       	cpi	r21, 0xFF	; 255
    46b4:	ec f3       	brlt	.-6      	; 0x46b0 <__mulsf3_pse+0x82>
    46b6:	98 3e       	cpi	r25, 0xE8	; 232
    46b8:	dc f3       	brlt	.-10     	; 0x46b0 <__mulsf3_pse+0x82>
    46ba:	86 95       	lsr	r24
    46bc:	77 95       	ror	r23
    46be:	67 95       	ror	r22
    46c0:	b7 95       	ror	r27
    46c2:	f7 95       	ror	r31
    46c4:	e7 95       	ror	r30
    46c6:	9f 5f       	subi	r25, 0xFF	; 255
    46c8:	c1 f7       	brne	.-16     	; 0x46ba <__mulsf3_pse+0x8c>
    46ca:	fe 2b       	or	r31, r30
    46cc:	88 0f       	add	r24, r24
    46ce:	91 1d       	adc	r25, r1
    46d0:	96 95       	lsr	r25
    46d2:	87 95       	ror	r24
    46d4:	97 f9       	bld	r25, 7
    46d6:	08 95       	ret

000046d8 <__subsf3>:
    46d8:	50 58       	subi	r21, 0x80	; 128

000046da <__addsf3>:
    46da:	bb 27       	eor	r27, r27
    46dc:	aa 27       	eor	r26, r26
    46de:	0e d0       	rcall	.+28     	; 0x46fc <__addsf3x>
    46e0:	77 c0       	rjmp	.+238    	; 0x47d0 <__fp_round>
    46e2:	68 d0       	rcall	.+208    	; 0x47b4 <__fp_pscA>
    46e4:	30 f0       	brcs	.+12     	; 0x46f2 <__addsf3+0x18>
    46e6:	6d d0       	rcall	.+218    	; 0x47c2 <__fp_pscB>
    46e8:	20 f0       	brcs	.+8      	; 0x46f2 <__addsf3+0x18>
    46ea:	31 f4       	brne	.+12     	; 0x46f8 <__addsf3+0x1e>
    46ec:	9f 3f       	cpi	r25, 0xFF	; 255
    46ee:	11 f4       	brne	.+4      	; 0x46f4 <__addsf3+0x1a>
    46f0:	1e f4       	brtc	.+6      	; 0x46f8 <__addsf3+0x1e>
    46f2:	5d c0       	rjmp	.+186    	; 0x47ae <__fp_nan>
    46f4:	0e f4       	brtc	.+2      	; 0x46f8 <__addsf3+0x1e>
    46f6:	e0 95       	com	r30
    46f8:	e7 fb       	bst	r30, 7
    46fa:	53 c0       	rjmp	.+166    	; 0x47a2 <__fp_inf>

000046fc <__addsf3x>:
    46fc:	e9 2f       	mov	r30, r25
    46fe:	2d df       	rcall	.-422    	; 0x455a <__fp_split3>
    4700:	80 f3       	brcs	.-32     	; 0x46e2 <__addsf3+0x8>
    4702:	ba 17       	cp	r27, r26
    4704:	62 07       	cpc	r22, r18
    4706:	73 07       	cpc	r23, r19
    4708:	84 07       	cpc	r24, r20
    470a:	95 07       	cpc	r25, r21
    470c:	18 f0       	brcs	.+6      	; 0x4714 <__addsf3x+0x18>
    470e:	71 f4       	brne	.+28     	; 0x472c <__addsf3x+0x30>
    4710:	9e f5       	brtc	.+102    	; 0x4778 <__addsf3x+0x7c>
    4712:	45 cf       	rjmp	.-374    	; 0x459e <__fp_zero>
    4714:	0e f4       	brtc	.+2      	; 0x4718 <__addsf3x+0x1c>
    4716:	e0 95       	com	r30
    4718:	0b 2e       	mov	r0, r27
    471a:	ba 2f       	mov	r27, r26
    471c:	a0 2d       	mov	r26, r0
    471e:	0b 01       	movw	r0, r22
    4720:	b9 01       	movw	r22, r18
    4722:	90 01       	movw	r18, r0
    4724:	0c 01       	movw	r0, r24
    4726:	ca 01       	movw	r24, r20
    4728:	a0 01       	movw	r20, r0
    472a:	11 24       	eor	r1, r1
    472c:	ff 27       	eor	r31, r31
    472e:	59 1b       	sub	r21, r25
    4730:	99 f0       	breq	.+38     	; 0x4758 <__addsf3x+0x5c>
    4732:	59 3f       	cpi	r21, 0xF9	; 249
    4734:	50 f4       	brcc	.+20     	; 0x474a <__addsf3x+0x4e>
    4736:	50 3e       	cpi	r21, 0xE0	; 224
    4738:	68 f1       	brcs	.+90     	; 0x4794 <__addsf3x+0x98>
    473a:	1a 16       	cp	r1, r26
    473c:	f0 40       	sbci	r31, 0x00	; 0
    473e:	a2 2f       	mov	r26, r18
    4740:	23 2f       	mov	r18, r19
    4742:	34 2f       	mov	r19, r20
    4744:	44 27       	eor	r20, r20
    4746:	58 5f       	subi	r21, 0xF8	; 248
    4748:	f3 cf       	rjmp	.-26     	; 0x4730 <__addsf3x+0x34>
    474a:	46 95       	lsr	r20
    474c:	37 95       	ror	r19
    474e:	27 95       	ror	r18
    4750:	a7 95       	ror	r26
    4752:	f0 40       	sbci	r31, 0x00	; 0
    4754:	53 95       	inc	r21
    4756:	c9 f7       	brne	.-14     	; 0x474a <__addsf3x+0x4e>
    4758:	7e f4       	brtc	.+30     	; 0x4778 <__addsf3x+0x7c>
    475a:	1f 16       	cp	r1, r31
    475c:	ba 0b       	sbc	r27, r26
    475e:	62 0b       	sbc	r22, r18
    4760:	73 0b       	sbc	r23, r19
    4762:	84 0b       	sbc	r24, r20
    4764:	ba f0       	brmi	.+46     	; 0x4794 <__addsf3x+0x98>
    4766:	91 50       	subi	r25, 0x01	; 1
    4768:	a1 f0       	breq	.+40     	; 0x4792 <__addsf3x+0x96>
    476a:	ff 0f       	add	r31, r31
    476c:	bb 1f       	adc	r27, r27
    476e:	66 1f       	adc	r22, r22
    4770:	77 1f       	adc	r23, r23
    4772:	88 1f       	adc	r24, r24
    4774:	c2 f7       	brpl	.-16     	; 0x4766 <__addsf3x+0x6a>
    4776:	0e c0       	rjmp	.+28     	; 0x4794 <__addsf3x+0x98>
    4778:	ba 0f       	add	r27, r26
    477a:	62 1f       	adc	r22, r18
    477c:	73 1f       	adc	r23, r19
    477e:	84 1f       	adc	r24, r20
    4780:	48 f4       	brcc	.+18     	; 0x4794 <__addsf3x+0x98>
    4782:	87 95       	ror	r24
    4784:	77 95       	ror	r23
    4786:	67 95       	ror	r22
    4788:	b7 95       	ror	r27
    478a:	f7 95       	ror	r31
    478c:	9e 3f       	cpi	r25, 0xFE	; 254
    478e:	08 f0       	brcs	.+2      	; 0x4792 <__addsf3x+0x96>
    4790:	b3 cf       	rjmp	.-154    	; 0x46f8 <__addsf3+0x1e>
    4792:	93 95       	inc	r25
    4794:	88 0f       	add	r24, r24
    4796:	08 f0       	brcs	.+2      	; 0x479a <__addsf3x+0x9e>
    4798:	99 27       	eor	r25, r25
    479a:	ee 0f       	add	r30, r30
    479c:	97 95       	ror	r25
    479e:	87 95       	ror	r24
    47a0:	08 95       	ret

000047a2 <__fp_inf>:
    47a2:	97 f9       	bld	r25, 7
    47a4:	9f 67       	ori	r25, 0x7F	; 127
    47a6:	80 e8       	ldi	r24, 0x80	; 128
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	60 e0       	ldi	r22, 0x00	; 0
    47ac:	08 95       	ret

000047ae <__fp_nan>:
    47ae:	9f ef       	ldi	r25, 0xFF	; 255
    47b0:	80 ec       	ldi	r24, 0xC0	; 192
    47b2:	08 95       	ret

000047b4 <__fp_pscA>:
    47b4:	00 24       	eor	r0, r0
    47b6:	0a 94       	dec	r0
    47b8:	16 16       	cp	r1, r22
    47ba:	17 06       	cpc	r1, r23
    47bc:	18 06       	cpc	r1, r24
    47be:	09 06       	cpc	r0, r25
    47c0:	08 95       	ret

000047c2 <__fp_pscB>:
    47c2:	00 24       	eor	r0, r0
    47c4:	0a 94       	dec	r0
    47c6:	12 16       	cp	r1, r18
    47c8:	13 06       	cpc	r1, r19
    47ca:	14 06       	cpc	r1, r20
    47cc:	05 06       	cpc	r0, r21
    47ce:	08 95       	ret

000047d0 <__fp_round>:
    47d0:	09 2e       	mov	r0, r25
    47d2:	03 94       	inc	r0
    47d4:	00 0c       	add	r0, r0
    47d6:	11 f4       	brne	.+4      	; 0x47dc <__fp_round+0xc>
    47d8:	88 23       	and	r24, r24
    47da:	52 f0       	brmi	.+20     	; 0x47f0 <__fp_round+0x20>
    47dc:	bb 0f       	add	r27, r27
    47de:	40 f4       	brcc	.+16     	; 0x47f0 <__fp_round+0x20>
    47e0:	bf 2b       	or	r27, r31
    47e2:	11 f4       	brne	.+4      	; 0x47e8 <__fp_round+0x18>
    47e4:	60 ff       	sbrs	r22, 0
    47e6:	04 c0       	rjmp	.+8      	; 0x47f0 <__fp_round+0x20>
    47e8:	6f 5f       	subi	r22, 0xFF	; 255
    47ea:	7f 4f       	sbci	r23, 0xFF	; 255
    47ec:	8f 4f       	sbci	r24, 0xFF	; 255
    47ee:	9f 4f       	sbci	r25, 0xFF	; 255
    47f0:	08 95       	ret

000047f2 <_hihTwiCallback>:
    47f2:	65 30       	cpi	r22, 0x05	; 5
    47f4:	f1 f4       	brne	.+60     	; 0x4832 <_hihTwiCallback+0x40>
    47f6:	fa 01       	movw	r30, r20
    47f8:	80 81       	ld	r24, Z
    47fa:	8f 73       	andi	r24, 0x3F	; 63
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	98 2f       	mov	r25, r24
    4800:	88 27       	eor	r24, r24
    4802:	21 81       	ldd	r18, Z+1	; 0x01
    4804:	82 2b       	or	r24, r18
    4806:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    480a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    480e:	82 81       	ldd	r24, Z+2	; 0x02
    4810:	f0 e4       	ldi	r31, 0x40	; 64
    4812:	8f 9f       	mul	r24, r31
    4814:	c0 01       	movw	r24, r0
    4816:	11 24       	eor	r1, r1
    4818:	fa 01       	movw	r30, r20
    481a:	23 81       	ldd	r18, Z+3	; 0x03
    481c:	26 95       	lsr	r18
    481e:	26 95       	lsr	r18
    4820:	82 2b       	or	r24, r18
    4822:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4826:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	80 93 ff 14 	sts	0x14FF, r24	; 0x8014ff <_measuringIsReady>
    4830:	08 95       	ret
    4832:	64 30       	cpi	r22, 0x04	; 4
    4834:	51 f0       	breq	.+20     	; 0x484a <_hihTwiCallback+0x58>
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	90 e4       	ldi	r25, 0x40	; 64
    483a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    483e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4842:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4846:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    484a:	08 95       	ret

0000484c <hih8120_initialise>:
    484c:	0f 93       	push	r16
    484e:	1f 93       	push	r17
    4850:	09 ef       	ldi	r16, 0xF9	; 249
    4852:	13 e2       	ldi	r17, 0x23	; 35
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	34 e2       	ldi	r19, 0x24	; 36
    4858:	44 ef       	ldi	r20, 0xF4	; 244
    485a:	50 e0       	ldi	r21, 0x00	; 0
    485c:	60 e0       	ldi	r22, 0x00	; 0
    485e:	87 e2       	ldi	r24, 0x27	; 39
    4860:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <twiCreate>
    4864:	90 93 01 15 	sts	0x1501, r25	; 0x801501 <_hih8120Handler+0x1>
    4868:	80 93 00 15 	sts	0x1500, r24	; 0x801500 <_hih8120Handler>
    486c:	21 e0       	ldi	r18, 0x01	; 1
    486e:	89 2b       	or	r24, r25
    4870:	09 f0       	breq	.+2      	; 0x4874 <hih8120_initialise+0x28>
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	82 2f       	mov	r24, r18
    4876:	1f 91       	pop	r17
    4878:	0f 91       	pop	r16
    487a:	08 95       	ret

0000487c <hih8120_wakeup>:
    487c:	80 91 00 15 	lds	r24, 0x1500	; 0x801500 <_hih8120Handler>
    4880:	90 91 01 15 	lds	r25, 0x1501	; 0x801501 <_hih8120Handler+0x1>
    4884:	00 97       	sbiw	r24, 0x00	; 0
    4886:	59 f0       	breq	.+22     	; 0x489e <hih8120_wakeup+0x22>
    4888:	40 e0       	ldi	r20, 0x00	; 0
    488a:	60 e0       	ldi	r22, 0x00	; 0
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <twiTransmit>
    4892:	84 30       	cpi	r24, 0x04	; 4
    4894:	31 f4       	brne	.+12     	; 0x48a2 <hih8120_wakeup+0x26>
    4896:	10 92 ff 14 	sts	0x14FF, r1	; 0x8014ff <_measuringIsReady>
    489a:	80 e0       	ldi	r24, 0x00	; 0
    489c:	08 95       	ret
    489e:	82 e0       	ldi	r24, 0x02	; 2
    48a0:	08 95       	ret
    48a2:	83 e0       	ldi	r24, 0x03	; 3
    48a4:	08 95       	ret

000048a6 <hih8120_measure>:
    48a6:	80 91 00 15 	lds	r24, 0x1500	; 0x801500 <_hih8120Handler>
    48aa:	90 91 01 15 	lds	r25, 0x1501	; 0x801501 <_hih8120Handler+0x1>
    48ae:	00 97       	sbiw	r24, 0x00	; 0
    48b0:	39 f0       	breq	.+14     	; 0x48c0 <hih8120_measure+0x1a>
    48b2:	64 e0       	ldi	r22, 0x04	; 4
    48b4:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <twiReceive>
    48b8:	85 30       	cpi	r24, 0x05	; 5
    48ba:	21 f0       	breq	.+8      	; 0x48c4 <hih8120_measure+0x1e>
    48bc:	83 e0       	ldi	r24, 0x03	; 3
    48be:	08 95       	ret
    48c0:	82 e0       	ldi	r24, 0x02	; 2
    48c2:	08 95       	ret
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	08 95       	ret

000048c8 <hih8120_getHumidity>:
    48c8:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    48cc:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	0e 94 03 35 	call	0x6a06	; 0x6a06 <__floatunsisf>
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	48 ec       	ldi	r20, 0xC8	; 200
    48de:	52 e4       	ldi	r21, 0x42	; 66
    48e0:	98 de       	rcall	.-720    	; 0x4612 <__mulsf3>
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	38 ef       	ldi	r19, 0xF8	; 248
    48e6:	4f e7       	ldi	r20, 0x7F	; 127
    48e8:	56 e4       	ldi	r21, 0x46	; 70
    48ea:	0c 94 92 34 	jmp	0x6924	; 0x6924 <__divsf3>
    48ee:	08 95       	ret

000048f0 <hih8120_getHumidityPercent_x10>:
    48f0:	eb df       	rcall	.-42     	; 0x48c8 <hih8120_getHumidity>
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e2       	ldi	r20, 0x20	; 32
    48f8:	51 e4       	ldi	r21, 0x41	; 65
    48fa:	8b de       	rcall	.-746    	; 0x4612 <__mulsf3>
    48fc:	02 de       	rcall	.-1020   	; 0x4502 <__fixunssfsi>
    48fe:	cb 01       	movw	r24, r22
    4900:	08 95       	ret

00004902 <hih8120_getTemperature>:
    4902:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4906:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	0e 94 03 35 	call	0x6a06	; 0x6a06 <__floatunsisf>
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	45 e2       	ldi	r20, 0x25	; 37
    4918:	53 e4       	ldi	r21, 0x43	; 67
    491a:	7b de       	rcall	.-778    	; 0x4612 <__mulsf3>
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	38 ef       	ldi	r19, 0xF8	; 248
    4920:	4f e7       	ldi	r20, 0x7F	; 127
    4922:	56 e4       	ldi	r21, 0x46	; 70
    4924:	0e 94 92 34 	call	0x6924	; 0x6924 <__divsf3>
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	40 e2       	ldi	r20, 0x20	; 32
    492e:	52 e4       	ldi	r21, 0x42	; 66
    4930:	d3 ce       	rjmp	.-602    	; 0x46d8 <__subsf3>
    4932:	08 95       	ret

00004934 <_serialCallBack>:
    4934:	0f 93       	push	r16
    4936:	1f 93       	push	r17
    4938:	cf 93       	push	r28
    493a:	df 93       	push	r29
    493c:	1f 92       	push	r1
    493e:	1f 92       	push	r1
    4940:	cd b7       	in	r28, 0x3d	; 61
    4942:	de b7       	in	r29, 0x3e	; 62
    4944:	8c 01       	movw	r16, r24
    4946:	19 82       	std	Y+1, r1	; 0x01
    4948:	2d c0       	rjmp	.+90     	; 0x49a4 <_serialCallBack+0x70>
    494a:	e0 91 39 15 	lds	r30, 0x1539	; 0x801539 <rec_buf_inp.2878>
    494e:	ec 32       	cpi	r30, 0x2C	; 44
    4950:	50 f4       	brcc	.+20     	; 0x4966 <_serialCallBack+0x32>
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	8e 0f       	add	r24, r30
    4956:	80 93 39 15 	sts	0x1539, r24	; 0x801539 <rec_buf_inp.2878>
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	e5 59       	subi	r30, 0x95	; 149
    495e:	fa 4e       	sbci	r31, 0xEA	; 234
    4960:	8a 81       	ldd	r24, Y+2	; 0x02
    4962:	80 83       	st	Z, r24
    4964:	02 c0       	rjmp	.+4      	; 0x496a <_serialCallBack+0x36>
    4966:	10 92 39 15 	sts	0x1539, r1	; 0x801539 <rec_buf_inp.2878>
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	8a 30       	cpi	r24, 0x0A	; 10
    496e:	d1 f4       	brne	.+52     	; 0x49a4 <_serialCallBack+0x70>
    4970:	40 91 39 15 	lds	r20, 0x1539	; 0x801539 <rec_buf_inp.2878>
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	fa 01       	movw	r30, r20
    4978:	e7 59       	subi	r30, 0x97	; 151
    497a:	fa 4e       	sbci	r31, 0xEA	; 234
    497c:	10 82       	st	Z, r1
    497e:	41 50       	subi	r20, 0x01	; 1
    4980:	51 09       	sbc	r21, r1
    4982:	9e 01       	movw	r18, r28
    4984:	2f 5f       	subi	r18, 0xFF	; 255
    4986:	3f 4f       	sbci	r19, 0xFF	; 255
    4988:	6b e6       	ldi	r22, 0x6B	; 107
    498a:	75 e1       	ldi	r23, 0x15	; 21
    498c:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <_serialReplyBufferHandle>
    4990:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <_serialReplyBufferHandle+0x1>
    4994:	0e 94 65 11 	call	0x22ca	; 0x22ca <xStreamBufferSendFromISR>
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	81 11       	cpse	r24, r1
    499c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vPortYield>
    49a0:	10 92 39 15 	sts	0x1539, r1	; 0x801539 <rec_buf_inp.2878>
    49a4:	be 01       	movw	r22, r28
    49a6:	6e 5f       	subi	r22, 0xFE	; 254
    49a8:	7f 4f       	sbci	r23, 0xFF	; 255
    49aa:	c8 01       	movw	r24, r16
    49ac:	39 d6       	rcall	.+3186   	; 0x5620 <serial_getByte>
    49ae:	88 23       	and	r24, r24
    49b0:	61 f2       	breq	.-104    	; 0x494a <_serialCallBack+0x16>
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	df 91       	pop	r29
    49b8:	cf 91       	pop	r28
    49ba:	1f 91       	pop	r17
    49bc:	0f 91       	pop	r16
    49be:	08 95       	ret

000049c0 <_uploadMessage>:
    49c0:	0f 93       	push	r16
    49c2:	1f 93       	push	r17
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	8c 01       	movw	r16, r24
    49ca:	eb 01       	movw	r28, r22
    49cc:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <_serialReplyBufferHandle>
    49d0:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <_serialReplyBufferHandle+0x1>
    49d4:	0e 94 70 10 	call	0x20e0	; 0x20e0 <xStreamBufferReset>
    49d8:	b8 01       	movw	r22, r16
    49da:	82 e0       	ldi	r24, 0x02	; 2
    49dc:	95 e1       	ldi	r25, 0x15	; 21
    49de:	0e 94 03 38 	call	0x7006	; 0x7006 <strcpy>
    49e2:	20 97       	sbiw	r28, 0x00	; 0
    49e4:	79 f0       	breq	.+30     	; 0x4a04 <_uploadMessage+0x44>
    49e6:	e2 e0       	ldi	r30, 0x02	; 2
    49e8:	f5 e1       	ldi	r31, 0x15	; 21
    49ea:	01 90       	ld	r0, Z+
    49ec:	00 20       	and	r0, r0
    49ee:	e9 f7       	brne	.-6      	; 0x49ea <_uploadMessage+0x2a>
    49f0:	31 97       	sbiw	r30, 0x01	; 1
    49f2:	80 e2       	ldi	r24, 0x20	; 32
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	91 83       	std	Z+1, r25	; 0x01
    49f8:	80 83       	st	Z, r24
    49fa:	be 01       	movw	r22, r28
    49fc:	82 e0       	ldi	r24, 0x02	; 2
    49fe:	95 e1       	ldi	r25, 0x15	; 21
    4a00:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <strcat>
    4a04:	e2 e0       	ldi	r30, 0x02	; 2
    4a06:	f5 e1       	ldi	r31, 0x15	; 21
    4a08:	df 01       	movw	r26, r30
    4a0a:	0d 90       	ld	r0, X+
    4a0c:	00 20       	and	r0, r0
    4a0e:	e9 f7       	brne	.-6      	; 0x4a0a <_uploadMessage+0x4a>
    4a10:	11 97       	sbiw	r26, 0x01	; 1
    4a12:	8d e0       	ldi	r24, 0x0D	; 13
    4a14:	9a e0       	ldi	r25, 0x0A	; 10
    4a16:	11 96       	adiw	r26, 0x01	; 1
    4a18:	9c 93       	st	X, r25
    4a1a:	8e 93       	st	-X, r24
    4a1c:	12 96       	adiw	r26, 0x02	; 2
    4a1e:	1c 92       	st	X, r1
    4a20:	01 90       	ld	r0, Z+
    4a22:	00 20       	and	r0, r0
    4a24:	e9 f7       	brne	.-6      	; 0x4a20 <_uploadMessage+0x60>
    4a26:	31 97       	sbiw	r30, 0x01	; 1
    4a28:	e2 50       	subi	r30, 0x02	; 2
    4a2a:	f5 41       	sbci	r31, 0x15	; 21
    4a2c:	ae 2f       	mov	r26, r30
    4a2e:	82 e0       	ldi	r24, 0x02	; 2
    4a30:	95 e1       	ldi	r25, 0x15	; 21
    4a32:	ac 01       	movw	r20, r24
    4a34:	6a 2f       	mov	r22, r26
    4a36:	80 91 3e 15 	lds	r24, 0x153E	; 0x80153e <_rn2483_serial>
    4a3a:	90 91 3f 15 	lds	r25, 0x153F	; 0x80153f <_rn2483_serial+0x1>
    4a3e:	9b d5       	rcall	.+2870   	; 0x5576 <serial_sendBytes>
    4a40:	81 11       	cpse	r24, r1
    4a42:	11 c0       	rjmp	.+34     	; 0x4a66 <_uploadMessage+0xa6>
    4a44:	08 e2       	ldi	r16, 0x28	; 40
    4a46:	15 e0       	ldi	r17, 0x05	; 5
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	4d e2       	ldi	r20, 0x2D	; 45
    4a4e:	50 e0       	ldi	r21, 0x00	; 0
    4a50:	65 ec       	ldi	r22, 0xC5	; 197
    4a52:	75 e1       	ldi	r23, 0x15	; 21
    4a54:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <_serialReplyBufferHandle>
    4a58:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <_serialReplyBufferHandle+0x1>
    4a5c:	0e 94 a9 11 	call	0x2352	; 0x2352 <xStreamBufferReceive>
    4a60:	85 ec       	ldi	r24, 0xC5	; 197
    4a62:	95 e1       	ldi	r25, 0x15	; 21
    4a64:	02 c0       	rjmp	.+4      	; 0x4a6a <_uploadMessage+0xaa>
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	df 91       	pop	r29
    4a6c:	cf 91       	pop	r28
    4a6e:	1f 91       	pop	r17
    4a70:	0f 91       	pop	r16
    4a72:	08 95       	ret

00004a74 <_reply2ReturnCode>:
    4a74:	2f 92       	push	r2
    4a76:	3f 92       	push	r3
    4a78:	4f 92       	push	r4
    4a7a:	5f 92       	push	r5
    4a7c:	6f 92       	push	r6
    4a7e:	7f 92       	push	r7
    4a80:	8f 92       	push	r8
    4a82:	9f 92       	push	r9
    4a84:	af 92       	push	r10
    4a86:	bf 92       	push	r11
    4a88:	cf 92       	push	r12
    4a8a:	df 92       	push	r13
    4a8c:	ef 92       	push	r14
    4a8e:	ff 92       	push	r15
    4a90:	0f 93       	push	r16
    4a92:	1f 93       	push	r17
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    4a98:	5c 01       	movw	r10, r24
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	01 90       	ld	r0, Z+
    4a9e:	00 20       	and	r0, r0
    4aa0:	e9 f7       	brne	.-6      	; 0x4a9c <_reply2ReturnCode+0x28>
    4aa2:	31 97       	sbiw	r30, 0x01	; 1
    4aa4:	6f 01       	movw	r12, r30
    4aa6:	c8 1a       	sub	r12, r24
    4aa8:	d9 0a       	sbc	r13, r25
    4aaa:	5c 2c       	mov	r5, r12
    4aac:	0f 2e       	mov	r0, r31
    4aae:	f0 ef       	ldi	r31, 0xF0	; 240
    4ab0:	8f 2e       	mov	r8, r31
    4ab2:	f7 e0       	ldi	r31, 0x07	; 7
    4ab4:	9f 2e       	mov	r9, r31
    4ab6:	f0 2d       	mov	r31, r0
    4ab8:	e1 2c       	mov	r14, r1
    4aba:	f1 2c       	mov	r15, r1
    4abc:	4c 2c       	mov	r4, r12
    4abe:	37 01       	movw	r6, r14
    4ac0:	f4 01       	movw	r30, r8
    4ac2:	01 81       	ldd	r16, Z+1	; 0x01
    4ac4:	12 81       	ldd	r17, Z+2	; 0x02
    4ac6:	e8 01       	movw	r28, r16
    4ac8:	09 90       	ld	r0, Y+
    4aca:	00 20       	and	r0, r0
    4acc:	e9 f7       	brne	.-6      	; 0x4ac8 <_reply2ReturnCode+0x54>
    4ace:	21 97       	sbiw	r28, 0x01	; 1
    4ad0:	c0 1b       	sub	r28, r16
    4ad2:	d1 0b       	sbc	r29, r17
    4ad4:	3c 2e       	mov	r3, r28
    4ad6:	f9 e0       	ldi	r31, 0x09	; 9
    4ad8:	cf 16       	cp	r12, r31
    4ada:	d1 04       	cpc	r13, r1
    4adc:	58 f0       	brcs	.+22     	; 0x4af4 <_reply2ReturnCode+0x80>
    4ade:	f4 01       	movw	r30, r8
    4ae0:	20 80       	ld	r2, Z
    4ae2:	fe e0       	ldi	r31, 0x0E	; 14
    4ae4:	2f 12       	cpse	r2, r31
    4ae6:	06 c0       	rjmp	.+12     	; 0x4af4 <_reply2ReturnCode+0x80>
    4ae8:	b8 01       	movw	r22, r16
    4aea:	c5 01       	movw	r24, r10
    4aec:	0e 94 d3 37 	call	0x6fa6	; 0x6fa6 <strcasestr>
    4af0:	89 2b       	or	r24, r25
    4af2:	09 f5       	brne	.+66     	; 0x4b36 <_reply2ReturnCode+0xc2>
    4af4:	44 2d       	mov	r20, r4
    4af6:	35 14       	cp	r3, r5
    4af8:	08 f4       	brcc	.+2      	; 0x4afc <_reply2ReturnCode+0x88>
    4afa:	4c 2f       	mov	r20, r28
    4afc:	50 e0       	ldi	r21, 0x00	; 0
    4afe:	b8 01       	movw	r22, r16
    4b00:	c5 01       	movw	r24, r10
    4b02:	0e 94 0a 38 	call	0x7014	; 0x7014 <strncasecmp>
    4b06:	89 2b       	or	r24, r25
    4b08:	49 f4       	brne	.+18     	; 0x4b1c <_reply2ReturnCode+0xa8>
    4b0a:	f3 01       	movw	r30, r6
    4b0c:	ee 0f       	add	r30, r30
    4b0e:	ff 1f       	adc	r31, r31
    4b10:	e6 0d       	add	r30, r6
    4b12:	f7 1d       	adc	r31, r7
    4b14:	e0 51       	subi	r30, 0x10	; 16
    4b16:	f8 4f       	sbci	r31, 0xF8	; 248
    4b18:	20 80       	ld	r2, Z
    4b1a:	0d c0       	rjmp	.+26     	; 0x4b36 <_reply2ReturnCode+0xc2>
    4b1c:	8f ef       	ldi	r24, 0xFF	; 255
    4b1e:	e8 1a       	sub	r14, r24
    4b20:	f8 0a       	sbc	r15, r24
    4b22:	e3 e0       	ldi	r30, 0x03	; 3
    4b24:	8e 0e       	add	r8, r30
    4b26:	91 1c       	adc	r9, r1
    4b28:	f1 e1       	ldi	r31, 0x11	; 17
    4b2a:	ef 16       	cp	r14, r31
    4b2c:	f1 04       	cpc	r15, r1
    4b2e:	39 f6       	brne	.-114    	; 0x4abe <_reply2ReturnCode+0x4a>
    4b30:	68 94       	set
    4b32:	22 24       	eor	r2, r2
    4b34:	24 f8       	bld	r2, 4
    4b36:	82 2d       	mov	r24, r2
    4b38:	df 91       	pop	r29
    4b3a:	cf 91       	pop	r28
    4b3c:	1f 91       	pop	r17
    4b3e:	0f 91       	pop	r16
    4b40:	ff 90       	pop	r15
    4b42:	ef 90       	pop	r14
    4b44:	df 90       	pop	r13
    4b46:	cf 90       	pop	r12
    4b48:	bf 90       	pop	r11
    4b4a:	af 90       	pop	r10
    4b4c:	9f 90       	pop	r9
    4b4e:	8f 90       	pop	r8
    4b50:	7f 90       	pop	r7
    4b52:	6f 90       	pop	r6
    4b54:	5f 90       	pop	r5
    4b56:	4f 90       	pop	r4
    4b58:	3f 90       	pop	r3
    4b5a:	2f 90       	pop	r2
    4b5c:	08 95       	ret

00004b5e <_uploadMessageRc>:
    4b5e:	30 df       	rcall	.-416    	; 0x49c0 <_uploadMessage>
    4b60:	89 cf       	rjmp	.-238    	; 0x4a74 <_reply2ReturnCode>
    4b62:	08 95       	ret

00004b64 <lora_driver_flushBuffers>:
    4b64:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <_serialReplyBufferHandle>
    4b68:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <_serialReplyBufferHandle+0x1>
    4b6c:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <xStreamBufferReset>
    4b70:	08 95       	ret

00004b72 <lora_driver_initialise>:
    4b72:	8f 92       	push	r8
    4b74:	9f 92       	push	r9
    4b76:	af 92       	push	r10
    4b78:	cf 92       	push	r12
    4b7a:	ef 92       	push	r14
    4b7c:	0f 93       	push	r16
    4b7e:	1f 93       	push	r17
    4b80:	cf 93       	push	r28
    4b82:	c8 2f       	mov	r28, r24
    4b84:	8b 01       	movw	r16, r22
    4b86:	41 e0       	ldi	r20, 0x01	; 1
    4b88:	60 e0       	ldi	r22, 0x00	; 0
    4b8a:	70 e0       	ldi	r23, 0x00	; 0
    4b8c:	88 ec       	ldi	r24, 0xC8	; 200
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	0e 94 3e 10 	call	0x207c	; 0x207c <xStreamBufferGenericCreate>
    4b94:	90 93 3d 15 	sts	0x153D, r25	; 0x80153d <_serialReplyBufferHandle+0x1>
    4b98:	80 93 3c 15 	sts	0x153C, r24	; 0x80153c <_serialReplyBufferHandle>
    4b9c:	10 93 3b 15 	sts	0x153B, r17	; 0x80153b <_downlinkMessageBuffer+0x1>
    4ba0:	00 93 3a 15 	sts	0x153A, r16	; 0x80153a <_downlinkMessageBuffer>
    4ba4:	0f 2e       	mov	r0, r31
    4ba6:	fa e9       	ldi	r31, 0x9A	; 154
    4ba8:	8f 2e       	mov	r8, r31
    4baa:	f4 e2       	ldi	r31, 0x24	; 36
    4bac:	9f 2e       	mov	r9, r31
    4bae:	f0 2d       	mov	r31, r0
    4bb0:	68 94       	set
    4bb2:	aa 24       	eor	r10, r10
    4bb4:	a6 f8       	bld	r10, 6
    4bb6:	68 94       	set
    4bb8:	cc 24       	eor	r12, r12
    4bba:	c6 f8       	bld	r12, 6
    4bbc:	e1 2c       	mov	r14, r1
    4bbe:	00 e0       	ldi	r16, 0x00	; 0
    4bc0:	23 e0       	ldi	r18, 0x03	; 3
    4bc2:	40 e0       	ldi	r20, 0x00	; 0
    4bc4:	51 ee       	ldi	r21, 0xE1	; 225
    4bc6:	60 e0       	ldi	r22, 0x00	; 0
    4bc8:	70 e0       	ldi	r23, 0x00	; 0
    4bca:	8c 2f       	mov	r24, r28
    4bcc:	06 d4       	rcall	.+2060   	; 0x53da <serial_create>
    4bce:	90 93 3f 15 	sts	0x153F, r25	; 0x80153f <_rn2483_serial+0x1>
    4bd2:	80 93 3e 15 	sts	0x153E, r24	; 0x80153e <_rn2483_serial>
    4bd6:	e7 e0       	ldi	r30, 0x07	; 7
    4bd8:	f1 e0       	ldi	r31, 0x01	; 1
    4bda:	80 81       	ld	r24, Z
    4bdc:	80 61       	ori	r24, 0x10	; 16
    4bde:	80 83       	st	Z, r24
    4be0:	cf 91       	pop	r28
    4be2:	1f 91       	pop	r17
    4be4:	0f 91       	pop	r16
    4be6:	ef 90       	pop	r14
    4be8:	cf 90       	pop	r12
    4bea:	af 90       	pop	r10
    4bec:	9f 90       	pop	r9
    4bee:	8f 90       	pop	r8
    4bf0:	08 95       	ret

00004bf2 <lora_driver_resetRn2483>:
    4bf2:	88 23       	and	r24, r24
    4bf4:	31 f0       	breq	.+12     	; 0x4c02 <lora_driver_resetRn2483+0x10>
    4bf6:	e8 e0       	ldi	r30, 0x08	; 8
    4bf8:	f1 e0       	ldi	r31, 0x01	; 1
    4bfa:	80 81       	ld	r24, Z
    4bfc:	8f 7e       	andi	r24, 0xEF	; 239
    4bfe:	80 83       	st	Z, r24
    4c00:	08 95       	ret
    4c02:	e8 e0       	ldi	r30, 0x08	; 8
    4c04:	f1 e0       	ldi	r31, 0x01	; 1
    4c06:	80 81       	ld	r24, Z
    4c08:	80 61       	ori	r24, 0x10	; 16
    4c0a:	80 83       	st	Z, r24
    4c0c:	08 95       	ret

00004c0e <lora_driver_rn2483FactoryReset>:
    4c0e:	60 e0       	ldi	r22, 0x00	; 0
    4c10:	70 e0       	ldi	r23, 0x00	; 0
    4c12:	86 e7       	ldi	r24, 0x76	; 118
    4c14:	95 e0       	ldi	r25, 0x05	; 5
    4c16:	d4 de       	rcall	.-600    	; 0x49c0 <_uploadMessage>
    4c18:	e5 ec       	ldi	r30, 0xC5	; 197
    4c1a:	f5 e1       	ldi	r31, 0x15	; 21
    4c1c:	01 90       	ld	r0, Z+
    4c1e:	00 20       	and	r0, r0
    4c20:	e9 f7       	brne	.-6      	; 0x4c1c <lora_driver_rn2483FactoryReset+0xe>
    4c22:	31 97       	sbiw	r30, 0x01	; 1
    4c24:	e5 5c       	subi	r30, 0xC5	; 197
    4c26:	f5 41       	sbci	r31, 0x15	; 21
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	75 97       	sbiw	r30, 0x15	; 21
    4c2c:	08 f0       	brcs	.+2      	; 0x4c30 <lora_driver_rn2483FactoryReset+0x22>
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	08 95       	ret

00004c32 <lora_driver_getRn2483Hweui>:
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	ec 01       	movw	r28, r24
    4c38:	60 e0       	ldi	r22, 0x00	; 0
    4c3a:	70 e0       	ldi	r23, 0x00	; 0
    4c3c:	87 e8       	ldi	r24, 0x87	; 135
    4c3e:	95 e0       	ldi	r25, 0x05	; 5
    4c40:	bf de       	rcall	.-642    	; 0x49c0 <_uploadMessage>
    4c42:	e5 ec       	ldi	r30, 0xC5	; 197
    4c44:	f5 e1       	ldi	r31, 0x15	; 21
    4c46:	01 90       	ld	r0, Z+
    4c48:	00 20       	and	r0, r0
    4c4a:	e9 f7       	brne	.-6      	; 0x4c46 <lora_driver_getRn2483Hweui+0x14>
    4c4c:	e6 5d       	subi	r30, 0xD6	; 214
    4c4e:	f5 41       	sbci	r31, 0x15	; 21
    4c50:	39 f4       	brne	.+14     	; 0x4c60 <lora_driver_getRn2483Hweui+0x2e>
    4c52:	65 ec       	ldi	r22, 0xC5	; 197
    4c54:	75 e1       	ldi	r23, 0x15	; 21
    4c56:	ce 01       	movw	r24, r28
    4c58:	0e 94 03 38 	call	0x7006	; 0x7006 <strcpy>
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	02 c0       	rjmp	.+4      	; 0x4c64 <lora_driver_getRn2483Hweui+0x32>
    4c60:	18 82       	st	Y, r1
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	08 95       	ret

00004c6a <lora_driver_setDeviceIdentifier>:
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	01 90       	ld	r0, Z+
    4c6e:	00 20       	and	r0, r0
    4c70:	e9 f7       	brne	.-6      	; 0x4c6c <lora_driver_setDeviceIdentifier+0x2>
    4c72:	9f 01       	movw	r18, r30
    4c74:	21 51       	subi	r18, 0x11	; 17
    4c76:	31 09       	sbc	r19, r1
    4c78:	28 17       	cp	r18, r24
    4c7a:	39 07       	cpc	r19, r25
    4c7c:	29 f4       	brne	.+10     	; 0x4c88 <lora_driver_setDeviceIdentifier+0x1e>
    4c7e:	bc 01       	movw	r22, r24
    4c80:	85 eb       	ldi	r24, 0xB5	; 181
    4c82:	95 e0       	ldi	r25, 0x05	; 5
    4c84:	6c cf       	rjmp	.-296    	; 0x4b5e <_uploadMessageRc>
    4c86:	08 95       	ret
    4c88:	89 e0       	ldi	r24, 0x09	; 9
    4c8a:	08 95       	ret

00004c8c <lora_driver_setApplicationIdentifier>:
    4c8c:	fc 01       	movw	r30, r24
    4c8e:	01 90       	ld	r0, Z+
    4c90:	00 20       	and	r0, r0
    4c92:	e9 f7       	brne	.-6      	; 0x4c8e <lora_driver_setApplicationIdentifier+0x2>
    4c94:	9f 01       	movw	r18, r30
    4c96:	21 51       	subi	r18, 0x11	; 17
    4c98:	31 09       	sbc	r19, r1
    4c9a:	28 17       	cp	r18, r24
    4c9c:	39 07       	cpc	r19, r25
    4c9e:	29 f4       	brne	.+10     	; 0x4caa <lora_driver_setApplicationIdentifier+0x1e>
    4ca0:	bc 01       	movw	r22, r24
    4ca2:	84 ec       	ldi	r24, 0xC4	; 196
    4ca4:	95 e0       	ldi	r25, 0x05	; 5
    4ca6:	5b cf       	rjmp	.-330    	; 0x4b5e <_uploadMessageRc>
    4ca8:	08 95       	ret
    4caa:	89 e0       	ldi	r24, 0x09	; 9
    4cac:	08 95       	ret

00004cae <lora_driver_setApplicationKey>:
    4cae:	fc 01       	movw	r30, r24
    4cb0:	01 90       	ld	r0, Z+
    4cb2:	00 20       	and	r0, r0
    4cb4:	e9 f7       	brne	.-6      	; 0x4cb0 <lora_driver_setApplicationKey+0x2>
    4cb6:	9f 01       	movw	r18, r30
    4cb8:	21 52       	subi	r18, 0x21	; 33
    4cba:	31 09       	sbc	r19, r1
    4cbc:	28 17       	cp	r18, r24
    4cbe:	39 07       	cpc	r19, r25
    4cc0:	29 f4       	brne	.+10     	; 0x4ccc <lora_driver_setApplicationKey+0x1e>
    4cc2:	bc 01       	movw	r22, r24
    4cc4:	83 ed       	ldi	r24, 0xD3	; 211
    4cc6:	95 e0       	ldi	r25, 0x05	; 5
    4cc8:	4a cf       	rjmp	.-364    	; 0x4b5e <_uploadMessageRc>
    4cca:	08 95       	ret
    4ccc:	89 e0       	ldi	r24, 0x09	; 9
    4cce:	08 95       	ret

00004cd0 <lora_driver_saveMac>:
    4cd0:	60 e0       	ldi	r22, 0x00	; 0
    4cd2:	70 e0       	ldi	r23, 0x00	; 0
    4cd4:	82 e1       	ldi	r24, 0x12	; 18
    4cd6:	96 e0       	ldi	r25, 0x06	; 6
    4cd8:	42 cf       	rjmp	.-380    	; 0x4b5e <_uploadMessageRc>
    4cda:	08 95       	ret

00004cdc <lora_driver_join>:
    4cdc:	0f 93       	push	r16
    4cde:	1f 93       	push	r17
    4ce0:	e8 2f       	mov	r30, r24
    4ce2:	f0 e0       	ldi	r31, 0x00	; 0
    4ce4:	ee 0f       	add	r30, r30
    4ce6:	ff 1f       	adc	r31, r31
    4ce8:	e4 51       	subi	r30, 0x14	; 20
    4cea:	f8 4f       	sbci	r31, 0xF8	; 248
    4cec:	60 81       	ld	r22, Z
    4cee:	71 81       	ldd	r23, Z+1	; 0x01
    4cf0:	8b e1       	ldi	r24, 0x1B	; 27
    4cf2:	96 e0       	ldi	r25, 0x06	; 6
    4cf4:	34 df       	rcall	.-408    	; 0x4b5e <_uploadMessageRc>
    4cf6:	81 11       	cpse	r24, r1
    4cf8:	14 c0       	rjmp	.+40     	; 0x4d22 <lora_driver_join+0x46>
    4cfa:	08 e2       	ldi	r16, 0x28	; 40
    4cfc:	15 e0       	ldi	r17, 0x05	; 5
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	4d e2       	ldi	r20, 0x2D	; 45
    4d04:	50 e0       	ldi	r21, 0x00	; 0
    4d06:	65 ec       	ldi	r22, 0xC5	; 197
    4d08:	75 e1       	ldi	r23, 0x15	; 21
    4d0a:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <_serialReplyBufferHandle>
    4d0e:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <_serialReplyBufferHandle+0x1>
    4d12:	0e 94 a9 11 	call	0x2352	; 0x2352 <xStreamBufferReceive>
    4d16:	88 23       	and	r24, r24
    4d18:	21 f0       	breq	.+8      	; 0x4d22 <lora_driver_join+0x46>
    4d1a:	85 ec       	ldi	r24, 0xC5	; 197
    4d1c:	95 e1       	ldi	r25, 0x15	; 21
    4d1e:	aa de       	rcall	.-684    	; 0x4a74 <_reply2ReturnCode>
    4d20:	03 c0       	rjmp	.+6      	; 0x4d28 <lora_driver_join+0x4c>
    4d22:	85 ec       	ldi	r24, 0xC5	; 197
    4d24:	95 e1       	ldi	r25, 0x15	; 21
    4d26:	a6 de       	rcall	.-692    	; 0x4a74 <_reply2ReturnCode>
    4d28:	1f 91       	pop	r17
    4d2a:	0f 91       	pop	r16
    4d2c:	08 95       	ret

00004d2e <lora_driver_sendUploadMessage>:
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	1f 92       	push	r1
    4d38:	cd b7       	in	r28, 0x3d	; 61
    4d3a:	de b7       	in	r29, 0x3e	; 62
    4d3c:	db 01       	movw	r26, r22
    4d3e:	11 96       	adiw	r26, 0x01	; 1
    4d40:	9c 91       	ld	r25, X
    4d42:	11 97       	sbiw	r26, 0x01	; 1
    4d44:	95 31       	cpi	r25, 0x15	; 21
    4d46:	08 f0       	brcs	.+2      	; 0x4d4a <lora_driver_sendUploadMessage+0x1c>
    4d48:	b4 c0       	rjmp	.+360    	; 0x4eb2 <lora_driver_sendUploadMessage+0x184>
    4d4a:	99 23       	and	r25, r25
    4d4c:	81 f1       	breq	.+96     	; 0x4dae <lora_driver_sendUploadMessage+0x80>
    4d4e:	60 e0       	ldi	r22, 0x00	; 0
    4d50:	70 e0       	ldi	r23, 0x00	; 0
    4d52:	27 2f       	mov	r18, r23
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	46 2f       	mov	r20, r22
    4d58:	50 e0       	ldi	r21, 0x00	; 0
    4d5a:	fd 01       	movw	r30, r26
    4d5c:	e4 0f       	add	r30, r20
    4d5e:	f5 1f       	adc	r31, r21
    4d60:	92 81       	ldd	r25, Z+2	; 0x02
    4d62:	92 95       	swap	r25
    4d64:	9f 70       	andi	r25, 0x0F	; 15
    4d66:	9a 30       	cpi	r25, 0x0A	; 10
    4d68:	10 f0       	brcs	.+4      	; 0x4d6e <lora_driver_sendUploadMessage+0x40>
    4d6a:	99 5c       	subi	r25, 0xC9	; 201
    4d6c:	01 c0       	rjmp	.+2      	; 0x4d70 <lora_driver_sendUploadMessage+0x42>
    4d6e:	90 5d       	subi	r25, 0xD0	; 208
    4d70:	f9 01       	movw	r30, r18
    4d72:	ea 5a       	subi	r30, 0xAA	; 170
    4d74:	fa 4e       	sbci	r31, 0xEA	; 234
    4d76:	90 83       	st	Z, r25
    4d78:	2f 5f       	subi	r18, 0xFF	; 255
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	fd 01       	movw	r30, r26
    4d7e:	e4 0f       	add	r30, r20
    4d80:	f5 1f       	adc	r31, r21
    4d82:	92 81       	ldd	r25, Z+2	; 0x02
    4d84:	9f 70       	andi	r25, 0x0F	; 15
    4d86:	49 2f       	mov	r20, r25
    4d88:	50 e0       	ldi	r21, 0x00	; 0
    4d8a:	4a 30       	cpi	r20, 0x0A	; 10
    4d8c:	51 05       	cpc	r21, r1
    4d8e:	14 f0       	brlt	.+4      	; 0x4d94 <lora_driver_sendUploadMessage+0x66>
    4d90:	99 5c       	subi	r25, 0xC9	; 201
    4d92:	01 c0       	rjmp	.+2      	; 0x4d96 <lora_driver_sendUploadMessage+0x68>
    4d94:	90 5d       	subi	r25, 0xD0	; 208
    4d96:	f9 01       	movw	r30, r18
    4d98:	ea 5a       	subi	r30, 0xAA	; 170
    4d9a:	fa 4e       	sbci	r31, 0xEA	; 234
    4d9c:	90 83       	st	Z, r25
    4d9e:	7e 5f       	subi	r23, 0xFE	; 254
    4da0:	6f 5f       	subi	r22, 0xFF	; 255
    4da2:	11 96       	adiw	r26, 0x01	; 1
    4da4:	9c 91       	ld	r25, X
    4da6:	11 97       	sbiw	r26, 0x01	; 1
    4da8:	69 17       	cp	r22, r25
    4daa:	98 f2       	brcs	.-90     	; 0x4d52 <lora_driver_sendUploadMessage+0x24>
    4dac:	01 c0       	rjmp	.+2      	; 0x4db0 <lora_driver_sendUploadMessage+0x82>
    4dae:	70 e0       	ldi	r23, 0x00	; 0
    4db0:	e7 2f       	mov	r30, r23
    4db2:	f0 e0       	ldi	r31, 0x00	; 0
    4db4:	ea 5a       	subi	r30, 0xAA	; 170
    4db6:	fa 4e       	sbci	r31, 0xEA	; 234
    4db8:	10 82       	st	Z, r1
    4dba:	4c 91       	ld	r20, X
    4dbc:	81 11       	cpse	r24, r1
    4dbe:	03 c0       	rjmp	.+6      	; 0x4dc6 <lora_driver_sendUploadMessage+0x98>
    4dc0:	84 e2       	ldi	r24, 0x24	; 36
    4dc2:	96 e0       	ldi	r25, 0x06	; 6
    4dc4:	02 c0       	rjmp	.+4      	; 0x4dca <lora_driver_sendUploadMessage+0x9c>
    4dc6:	86 e2       	ldi	r24, 0x26	; 38
    4dc8:	96 e0       	ldi	r25, 0x06	; 6
    4dca:	26 e5       	ldi	r18, 0x56	; 86
    4dcc:	35 e1       	ldi	r19, 0x15	; 21
    4dce:	3f 93       	push	r19
    4dd0:	2f 93       	push	r18
    4dd2:	1f 92       	push	r1
    4dd4:	4f 93       	push	r20
    4dd6:	9f 93       	push	r25
    4dd8:	8f 93       	push	r24
    4dda:	8a e2       	ldi	r24, 0x2A	; 42
    4ddc:	96 e0       	ldi	r25, 0x06	; 6
    4dde:	9f 93       	push	r25
    4de0:	8f 93       	push	r24
    4de2:	88 e9       	ldi	r24, 0x98	; 152
    4de4:	95 e1       	ldi	r25, 0x15	; 21
    4de6:	9f 93       	push	r25
    4de8:	8f 93       	push	r24
    4dea:	0e 94 ac 38 	call	0x7158	; 0x7158 <sprintf>
    4dee:	60 e0       	ldi	r22, 0x00	; 0
    4df0:	70 e0       	ldi	r23, 0x00	; 0
    4df2:	88 e9       	ldi	r24, 0x98	; 152
    4df4:	95 e1       	ldi	r25, 0x15	; 21
    4df6:	b3 de       	rcall	.-666    	; 0x4b5e <_uploadMessageRc>
    4df8:	0f b6       	in	r0, 0x3f	; 63
    4dfa:	f8 94       	cli
    4dfc:	de bf       	out	0x3e, r29	; 62
    4dfe:	0f be       	out	0x3f, r0	; 63
    4e00:	cd bf       	out	0x3d, r28	; 61
    4e02:	81 11       	cpse	r24, r1
    4e04:	59 c0       	rjmp	.+178    	; 0x4eb8 <lora_driver_sendUploadMessage+0x18a>
    4e06:	08 e2       	ldi	r16, 0x28	; 40
    4e08:	15 e0       	ldi	r17, 0x05	; 5
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	4d e2       	ldi	r20, 0x2D	; 45
    4e10:	50 e0       	ldi	r21, 0x00	; 0
    4e12:	65 ec       	ldi	r22, 0xC5	; 197
    4e14:	75 e1       	ldi	r23, 0x15	; 21
    4e16:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <_serialReplyBufferHandle>
    4e1a:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <_serialReplyBufferHandle+0x1>
    4e1e:	0e 94 a9 11 	call	0x2352	; 0x2352 <xStreamBufferReceive>
    4e22:	88 23       	and	r24, r24
    4e24:	09 f4       	brne	.+2      	; 0x4e28 <lora_driver_sendUploadMessage+0xfa>
    4e26:	47 c0       	rjmp	.+142    	; 0x4eb6 <lora_driver_sendUploadMessage+0x188>
    4e28:	85 ec       	ldi	r24, 0xC5	; 197
    4e2a:	95 e1       	ldi	r25, 0x15	; 21
    4e2c:	23 de       	rcall	.-954    	; 0x4a74 <_reply2ReturnCode>
    4e2e:	8e 30       	cpi	r24, 0x0E	; 14
    4e30:	09 f0       	breq	.+2      	; 0x4e34 <lora_driver_sendUploadMessage+0x106>
    4e32:	42 c0       	rjmp	.+132    	; 0x4eb8 <lora_driver_sendUploadMessage+0x18a>
    4e34:	87 e0       	ldi	r24, 0x07	; 7
    4e36:	89 83       	std	Y+1, r24	; 0x01
    4e38:	80 91 3a 15 	lds	r24, 0x153A	; 0x80153a <_downlinkMessageBuffer>
    4e3c:	90 91 3b 15 	lds	r25, 0x153B	; 0x80153b <_downlinkMessageBuffer+0x1>
    4e40:	89 2b       	or	r24, r25
    4e42:	a9 f1       	breq	.+106    	; 0x4eae <lora_driver_sendUploadMessage+0x180>
    4e44:	be 01       	movw	r22, r28
    4e46:	6f 5f       	subi	r22, 0xFF	; 255
    4e48:	7f 4f       	sbci	r23, 0xFF	; 255
    4e4a:	85 ec       	ldi	r24, 0xC5	; 197
    4e4c:	95 e1       	ldi	r25, 0x15	; 21
    4e4e:	68 d1       	rcall	.+720    	; 0x5120 <decode_port_no>
    4e50:	80 93 40 15 	sts	0x1540, r24	; 0x801540 <_downlinkPayload>
    4e54:	e9 81       	ldd	r30, Y+1	; 0x01
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	eb 53       	subi	r30, 0x3B	; 59
    4e5a:	fa 4e       	sbci	r31, 0xEA	; 234
    4e5c:	df 01       	movw	r26, r30
    4e5e:	0d 90       	ld	r0, X+
    4e60:	00 20       	and	r0, r0
    4e62:	e9 f7       	brne	.-6      	; 0x4e5e <lora_driver_sendUploadMessage+0x130>
    4e64:	11 97       	sbiw	r26, 0x01	; 1
    4e66:	ae 1b       	sub	r26, r30
    4e68:	bf 0b       	sbc	r27, r31
    4e6a:	aa 23       	and	r26, r26
    4e6c:	91 f0       	breq	.+36     	; 0x4e92 <lora_driver_sendUploadMessage+0x164>
    4e6e:	bb 27       	eor	r27, r27
    4e70:	cd 01       	movw	r24, r26
    4e72:	01 97       	sbiw	r24, 0x01	; 1
    4e74:	9c 01       	movw	r18, r24
    4e76:	12 f4       	brpl	.+4      	; 0x4e7c <lora_driver_sendUploadMessage+0x14e>
    4e78:	2f 5f       	subi	r18, 0xFF	; 255
    4e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e7c:	35 95       	asr	r19
    4e7e:	27 95       	ror	r18
    4e80:	20 93 41 15 	sts	0x1541, r18	; 0x801541 <_downlinkPayload+0x1>
    4e84:	af 01       	movw	r20, r30
    4e86:	4f 5f       	subi	r20, 0xFF	; 255
    4e88:	5f 4f       	sbci	r21, 0xFF	; 255
    4e8a:	64 e1       	ldi	r22, 0x14	; 20
    4e8c:	82 e4       	ldi	r24, 0x42	; 66
    4e8e:	95 e1       	ldi	r25, 0x15	; 21
    4e90:	73 d1       	rcall	.+742    	; 0x5178 <decode_hexadecimal_string_bytes>
    4e92:	01 e0       	ldi	r16, 0x01	; 1
    4e94:	10 e0       	ldi	r17, 0x00	; 0
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	46 e1       	ldi	r20, 0x16	; 22
    4e9c:	50 e0       	ldi	r21, 0x00	; 0
    4e9e:	60 e4       	ldi	r22, 0x40	; 64
    4ea0:	75 e1       	ldi	r23, 0x15	; 21
    4ea2:	80 91 3a 15 	lds	r24, 0x153A	; 0x80153a <_downlinkMessageBuffer>
    4ea6:	90 91 3b 15 	lds	r25, 0x153B	; 0x80153b <_downlinkMessageBuffer+0x1>
    4eaa:	0e 94 a0 10 	call	0x2140	; 0x2140 <xStreamBufferSend>
    4eae:	8e e0       	ldi	r24, 0x0E	; 14
    4eb0:	03 c0       	rjmp	.+6      	; 0x4eb8 <lora_driver_sendUploadMessage+0x18a>
    4eb2:	84 e1       	ldi	r24, 0x14	; 20
    4eb4:	01 c0       	rjmp	.+2      	; 0x4eb8 <lora_driver_sendUploadMessage+0x18a>
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	0f 90       	pop	r0
    4eba:	df 91       	pop	r29
    4ebc:	cf 91       	pop	r28
    4ebe:	1f 91       	pop	r17
    4ec0:	0f 91       	pop	r16
    4ec2:	08 95       	ret

00004ec4 <lora_driver_setAdaptiveDataRate>:
    4ec4:	81 30       	cpi	r24, 0x01	; 1
    4ec6:	19 f0       	breq	.+6      	; 0x4ece <lora_driver_setAdaptiveDataRate+0xa>
    4ec8:	6a e3       	ldi	r22, 0x3A	; 58
    4eca:	76 e0       	ldi	r23, 0x06	; 6
    4ecc:	02 c0       	rjmp	.+4      	; 0x4ed2 <lora_driver_setAdaptiveDataRate+0xe>
    4ece:	63 e1       	ldi	r22, 0x13	; 19
    4ed0:	77 e0       	ldi	r23, 0x07	; 7
    4ed2:	8e e3       	ldi	r24, 0x3E	; 62
    4ed4:	96 e0       	ldi	r25, 0x06	; 6
    4ed6:	43 ce       	rjmp	.-890    	; 0x4b5e <_uploadMessageRc>
    4ed8:	08 95       	ret

00004eda <lora_driver_setReceiveDelay>:
    4eda:	9f 93       	push	r25
    4edc:	8f 93       	push	r24
    4ede:	8f e6       	ldi	r24, 0x6F	; 111
    4ee0:	96 e0       	ldi	r25, 0x06	; 6
    4ee2:	9f 93       	push	r25
    4ee4:	8f 93       	push	r24
    4ee6:	88 e9       	ldi	r24, 0x98	; 152
    4ee8:	95 e1       	ldi	r25, 0x15	; 21
    4eea:	9f 93       	push	r25
    4eec:	8f 93       	push	r24
    4eee:	0e 94 ac 38 	call	0x7158	; 0x7158 <sprintf>
    4ef2:	60 e0       	ldi	r22, 0x00	; 0
    4ef4:	70 e0       	ldi	r23, 0x00	; 0
    4ef6:	88 e9       	ldi	r24, 0x98	; 152
    4ef8:	95 e1       	ldi	r25, 0x15	; 21
    4efa:	31 de       	rcall	.-926    	; 0x4b5e <_uploadMessageRc>
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	0f 90       	pop	r0
    4f02:	0f 90       	pop	r0
    4f04:	0f 90       	pop	r0
    4f06:	0f 90       	pop	r0
    4f08:	08 95       	ret

00004f0a <lora_driver_configureToEu868>:
    4f0a:	2f 92       	push	r2
    4f0c:	3f 92       	push	r3
    4f0e:	4f 92       	push	r4
    4f10:	5f 92       	push	r5
    4f12:	6f 92       	push	r6
    4f14:	7f 92       	push	r7
    4f16:	8f 92       	push	r8
    4f18:	9f 92       	push	r9
    4f1a:	af 92       	push	r10
    4f1c:	bf 92       	push	r11
    4f1e:	cf 92       	push	r12
    4f20:	df 92       	push	r13
    4f22:	ef 92       	push	r14
    4f24:	ff 92       	push	r15
    4f26:	0f 93       	push	r16
    4f28:	1f 93       	push	r17
    4f2a:	cf 93       	push	r28
    4f2c:	df 93       	push	r29
    4f2e:	cd b7       	in	r28, 0x3d	; 61
    4f30:	de b7       	in	r29, 0x3e	; 62
    4f32:	a0 97       	sbiw	r28, 0x20	; 32
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	f8 94       	cli
    4f38:	de bf       	out	0x3e, r29	; 62
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	cd bf       	out	0x3d, r28	; 61
    4f3e:	6c e9       	ldi	r22, 0x9C	; 156
    4f40:	76 e0       	ldi	r23, 0x06	; 6
    4f42:	88 ea       	ldi	r24, 0xA8	; 168
    4f44:	96 e0       	ldi	r25, 0x06	; 6
    4f46:	3c dd       	rcall	.-1416   	; 0x49c0 <_uploadMessage>
    4f48:	95 dd       	rcall	.-1238   	; 0x4a74 <_reply2ReturnCode>
    4f4a:	81 11       	cpse	r24, r1
    4f4c:	a3 c0       	rjmp	.+326    	; 0x5094 <lora_driver_configureToEu868+0x18a>
    4f4e:	80 e2       	ldi	r24, 0x20	; 32
    4f50:	e2 e2       	ldi	r30, 0x22	; 34
    4f52:	f2 e0       	ldi	r31, 0x02	; 2
    4f54:	de 01       	movw	r26, r28
    4f56:	11 96       	adiw	r26, 0x01	; 1
    4f58:	01 90       	ld	r0, Z+
    4f5a:	0d 92       	st	X+, r0
    4f5c:	8a 95       	dec	r24
    4f5e:	e1 f7       	brne	.-8      	; 0x4f58 <lora_driver_configureToEu868+0x4e>
    4f60:	9e 01       	movw	r18, r28
    4f62:	2f 5f       	subi	r18, 0xFF	; 255
    4f64:	3f 4f       	sbci	r19, 0xFF	; 255
    4f66:	69 01       	movw	r12, r18
    4f68:	e1 2c       	mov	r14, r1
    4f6a:	f1 2c       	mov	r15, r1
    4f6c:	0f 2e       	mov	r0, r31
    4f6e:	f4 eb       	ldi	r31, 0xB4	; 180
    4f70:	af 2e       	mov	r10, r31
    4f72:	f6 e0       	ldi	r31, 0x06	; 6
    4f74:	bf 2e       	mov	r11, r31
    4f76:	f0 2d       	mov	r31, r0
    4f78:	08 e9       	ldi	r16, 0x98	; 152
    4f7a:	15 e1       	ldi	r17, 0x15	; 21
    4f7c:	0f 2e       	mov	r0, r31
    4f7e:	fd ec       	ldi	r31, 0xCD	; 205
    4f80:	4f 2e       	mov	r4, r31
    4f82:	f6 e0       	ldi	r31, 0x06	; 6
    4f84:	5f 2e       	mov	r5, r31
    4f86:	f0 2d       	mov	r31, r0
    4f88:	0f 2e       	mov	r0, r31
    4f8a:	f4 ee       	ldi	r31, 0xE4	; 228
    4f8c:	8f 2e       	mov	r8, r31
    4f8e:	f6 e0       	ldi	r31, 0x06	; 6
    4f90:	9f 2e       	mov	r9, r31
    4f92:	f0 2d       	mov	r31, r0
    4f94:	0f 2e       	mov	r0, r31
    4f96:	fe ef       	ldi	r31, 0xFE	; 254
    4f98:	6f 2e       	mov	r6, r31
    4f9a:	f6 e0       	ldi	r31, 0x06	; 6
    4f9c:	7f 2e       	mov	r7, r31
    4f9e:	f0 2d       	mov	r31, r0
    4fa0:	3e 2c       	mov	r3, r14
    4fa2:	2f 2c       	mov	r2, r15
    4fa4:	ff 92       	push	r15
    4fa6:	ef 92       	push	r14
    4fa8:	bf 92       	push	r11
    4faa:	af 92       	push	r10
    4fac:	1f 93       	push	r17
    4fae:	0f 93       	push	r16
    4fb0:	0e 94 ac 38 	call	0x7158	; 0x7158 <sprintf>
    4fb4:	60 e0       	ldi	r22, 0x00	; 0
    4fb6:	70 e0       	ldi	r23, 0x00	; 0
    4fb8:	c8 01       	movw	r24, r16
    4fba:	02 dd       	rcall	.-1532   	; 0x49c0 <_uploadMessage>
    4fbc:	5b dd       	rcall	.-1354   	; 0x4a74 <_reply2ReturnCode>
    4fbe:	0f 90       	pop	r0
    4fc0:	0f 90       	pop	r0
    4fc2:	0f 90       	pop	r0
    4fc4:	0f 90       	pop	r0
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	81 11       	cpse	r24, r1
    4fcc:	63 c0       	rjmp	.+198    	; 0x5094 <lora_driver_configureToEu868+0x18a>
    4fce:	32 e0       	ldi	r19, 0x02	; 2
    4fd0:	3e 15       	cp	r19, r14
    4fd2:	e8 f4       	brcc	.+58     	; 0x500e <lora_driver_configureToEu868+0x104>
    4fd4:	f6 01       	movw	r30, r12
    4fd6:	83 81       	ldd	r24, Z+3	; 0x03
    4fd8:	8f 93       	push	r24
    4fda:	82 81       	ldd	r24, Z+2	; 0x02
    4fdc:	8f 93       	push	r24
    4fde:	81 81       	ldd	r24, Z+1	; 0x01
    4fe0:	8f 93       	push	r24
    4fe2:	80 81       	ld	r24, Z
    4fe4:	8f 93       	push	r24
    4fe6:	ff 92       	push	r15
    4fe8:	ef 92       	push	r14
    4fea:	5f 92       	push	r5
    4fec:	4f 92       	push	r4
    4fee:	1f 93       	push	r17
    4ff0:	0f 93       	push	r16
    4ff2:	0e 94 ac 38 	call	0x7158	; 0x7158 <sprintf>
    4ff6:	60 e0       	ldi	r22, 0x00	; 0
    4ff8:	70 e0       	ldi	r23, 0x00	; 0
    4ffa:	c8 01       	movw	r24, r16
    4ffc:	e1 dc       	rcall	.-1598   	; 0x49c0 <_uploadMessage>
    4ffe:	3a dd       	rcall	.-1420   	; 0x4a74 <_reply2ReturnCode>
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	f8 94       	cli
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	cd bf       	out	0x3d, r28	; 61
    500a:	81 11       	cpse	r24, r1
    500c:	43 c0       	rjmp	.+134    	; 0x5094 <lora_driver_configureToEu868+0x18a>
    500e:	2f 92       	push	r2
    5010:	3f 92       	push	r3
    5012:	9f 92       	push	r9
    5014:	8f 92       	push	r8
    5016:	1f 93       	push	r17
    5018:	0f 93       	push	r16
    501a:	0e 94 ac 38 	call	0x7158	; 0x7158 <sprintf>
    501e:	60 e0       	ldi	r22, 0x00	; 0
    5020:	70 e0       	ldi	r23, 0x00	; 0
    5022:	c8 01       	movw	r24, r16
    5024:	cd dc       	rcall	.-1638   	; 0x49c0 <_uploadMessage>
    5026:	26 dd       	rcall	.-1460   	; 0x4a74 <_reply2ReturnCode>
    5028:	0f 90       	pop	r0
    502a:	0f 90       	pop	r0
    502c:	0f 90       	pop	r0
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	81 11       	cpse	r24, r1
    5036:	2e c0       	rjmp	.+92     	; 0x5094 <lora_driver_configureToEu868+0x18a>
    5038:	2f 92       	push	r2
    503a:	3f 92       	push	r3
    503c:	7f 92       	push	r7
    503e:	6f 92       	push	r6
    5040:	1f 93       	push	r17
    5042:	0f 93       	push	r16
    5044:	0e 94 ac 38 	call	0x7158	; 0x7158 <sprintf>
    5048:	60 e0       	ldi	r22, 0x00	; 0
    504a:	70 e0       	ldi	r23, 0x00	; 0
    504c:	c8 01       	movw	r24, r16
    504e:	b8 dc       	rcall	.-1680   	; 0x49c0 <_uploadMessage>
    5050:	11 dd       	rcall	.-1502   	; 0x4a74 <_reply2ReturnCode>
    5052:	0f 90       	pop	r0
    5054:	0f 90       	pop	r0
    5056:	0f 90       	pop	r0
    5058:	0f 90       	pop	r0
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	81 11       	cpse	r24, r1
    5060:	19 c0       	rjmp	.+50     	; 0x5094 <lora_driver_configureToEu868+0x18a>
    5062:	3f ef       	ldi	r19, 0xFF	; 255
    5064:	e3 1a       	sub	r14, r19
    5066:	f3 0a       	sbc	r15, r19
    5068:	84 e0       	ldi	r24, 0x04	; 4
    506a:	c8 0e       	add	r12, r24
    506c:	d1 1c       	adc	r13, r1
    506e:	98 e0       	ldi	r25, 0x08	; 8
    5070:	e9 16       	cp	r14, r25
    5072:	f1 04       	cpc	r15, r1
    5074:	09 f0       	breq	.+2      	; 0x5078 <lora_driver_configureToEu868+0x16e>
    5076:	94 cf       	rjmp	.-216    	; 0x4fa0 <lora_driver_configureToEu868+0x96>
    5078:	60 e0       	ldi	r22, 0x00	; 0
    507a:	70 e0       	ldi	r23, 0x00	; 0
    507c:	86 e1       	ldi	r24, 0x16	; 22
    507e:	97 e0       	ldi	r25, 0x07	; 7
    5080:	9f dc       	rcall	.-1730   	; 0x49c0 <_uploadMessage>
    5082:	f8 dc       	rcall	.-1552   	; 0x4a74 <_reply2ReturnCode>
    5084:	81 11       	cpse	r24, r1
    5086:	06 c0       	rjmp	.+12     	; 0x5094 <lora_driver_configureToEu868+0x18a>
    5088:	60 e0       	ldi	r22, 0x00	; 0
    508a:	70 e0       	ldi	r23, 0x00	; 0
    508c:	87 e2       	ldi	r24, 0x27	; 39
    508e:	97 e0       	ldi	r25, 0x07	; 7
    5090:	97 dc       	rcall	.-1746   	; 0x49c0 <_uploadMessage>
    5092:	f0 dc       	rcall	.-1568   	; 0x4a74 <_reply2ReturnCode>
    5094:	a0 96       	adiw	r28, 0x20	; 32
    5096:	0f b6       	in	r0, 0x3f	; 63
    5098:	f8 94       	cli
    509a:	de bf       	out	0x3e, r29	; 62
    509c:	0f be       	out	0x3f, r0	; 63
    509e:	cd bf       	out	0x3d, r28	; 61
    50a0:	df 91       	pop	r29
    50a2:	cf 91       	pop	r28
    50a4:	1f 91       	pop	r17
    50a6:	0f 91       	pop	r16
    50a8:	ff 90       	pop	r15
    50aa:	ef 90       	pop	r14
    50ac:	df 90       	pop	r13
    50ae:	cf 90       	pop	r12
    50b0:	bf 90       	pop	r11
    50b2:	af 90       	pop	r10
    50b4:	9f 90       	pop	r9
    50b6:	8f 90       	pop	r8
    50b8:	7f 90       	pop	r7
    50ba:	6f 90       	pop	r6
    50bc:	5f 90       	pop	r5
    50be:	4f 90       	pop	r4
    50c0:	3f 90       	pop	r3
    50c2:	2f 90       	pop	r2
    50c4:	08 95       	ret

000050c6 <lora_driver_setOtaaIdentity>:
    50c6:	ef 92       	push	r14
    50c8:	ff 92       	push	r15
    50ca:	0f 93       	push	r16
    50cc:	1f 93       	push	r17
    50ce:	cf 93       	push	r28
    50d0:	df 93       	push	r29
    50d2:	ec 01       	movw	r28, r24
    50d4:	8b 01       	movw	r16, r22
    50d6:	7a 01       	movw	r14, r20
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	f4 de       	rcall	.-536    	; 0x4ec4 <lora_driver_setAdaptiveDataRate>
    50dc:	81 11       	cpse	r24, r1
    50de:	0d c0       	rjmp	.+26     	; 0x50fa <lora_driver_setOtaaIdentity+0x34>
    50e0:	ce 01       	movw	r24, r28
    50e2:	d4 dd       	rcall	.-1112   	; 0x4c8c <lora_driver_setApplicationIdentifier>
    50e4:	81 11       	cpse	r24, r1
    50e6:	09 c0       	rjmp	.+18     	; 0x50fa <lora_driver_setOtaaIdentity+0x34>
    50e8:	c8 01       	movw	r24, r16
    50ea:	e1 dd       	rcall	.-1086   	; 0x4cae <lora_driver_setApplicationKey>
    50ec:	81 11       	cpse	r24, r1
    50ee:	05 c0       	rjmp	.+10     	; 0x50fa <lora_driver_setOtaaIdentity+0x34>
    50f0:	c7 01       	movw	r24, r14
    50f2:	bb dd       	rcall	.-1162   	; 0x4c6a <lora_driver_setDeviceIdentifier>
    50f4:	81 11       	cpse	r24, r1
    50f6:	01 c0       	rjmp	.+2      	; 0x50fa <lora_driver_setOtaaIdentity+0x34>
    50f8:	eb dd       	rcall	.-1066   	; 0x4cd0 <lora_driver_saveMac>
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	1f 91       	pop	r17
    5100:	0f 91       	pop	r16
    5102:	ff 90       	pop	r15
    5104:	ef 90       	pop	r14
    5106:	08 95       	ret

00005108 <lora_driver_mapReturnCodeToText>:
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	fc 01       	movw	r30, r24
    510c:	ee 0f       	add	r30, r30
    510e:	ff 1f       	adc	r31, r31
    5110:	8e 0f       	add	r24, r30
    5112:	9f 1f       	adc	r25, r31
    5114:	fc 01       	movw	r30, r24
    5116:	e0 51       	subi	r30, 0x10	; 16
    5118:	f8 4f       	sbci	r31, 0xF8	; 248
    511a:	81 81       	ldd	r24, Z+1	; 0x01
    511c:	92 81       	ldd	r25, Z+2	; 0x02
    511e:	08 95       	ret

00005120 <decode_port_no>:
    5120:	dc 01       	movw	r26, r24
    5122:	00 97       	sbiw	r24, 0x00	; 0
    5124:	29 f1       	breq	.+74     	; 0x5170 <decode_port_no+0x50>
    5126:	fb 01       	movw	r30, r22
    5128:	20 81       	ld	r18, Z
    512a:	fc 01       	movw	r30, r24
    512c:	01 90       	ld	r0, Z+
    512e:	00 20       	and	r0, r0
    5130:	e9 f7       	brne	.-6      	; 0x512c <decode_port_no+0xc>
    5132:	31 97       	sbiw	r30, 0x01	; 1
    5134:	e8 1b       	sub	r30, r24
    5136:	f9 0b       	sbc	r31, r25
    5138:	82 2f       	mov	r24, r18
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	e8 17       	cp	r30, r24
    513e:	f9 07       	cpc	r31, r25
    5140:	c8 f0       	brcs	.+50     	; 0x5174 <decode_port_no+0x54>
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	08 c0       	rjmp	.+16     	; 0x5156 <decode_port_no+0x36>
    5146:	88 0f       	add	r24, r24
    5148:	38 2f       	mov	r19, r24
    514a:	33 0f       	add	r19, r19
    514c:	33 0f       	add	r19, r19
    514e:	83 0f       	add	r24, r19
    5150:	80 53       	subi	r24, 0x30	; 48
    5152:	89 0f       	add	r24, r25
    5154:	2f 5f       	subi	r18, 0xFF	; 255
    5156:	fd 01       	movw	r30, r26
    5158:	e2 0f       	add	r30, r18
    515a:	f1 1d       	adc	r31, r1
    515c:	90 81       	ld	r25, Z
    515e:	30 ed       	ldi	r19, 0xD0	; 208
    5160:	39 0f       	add	r19, r25
    5162:	3a 30       	cpi	r19, 0x0A	; 10
    5164:	10 f4       	brcc	.+4      	; 0x516a <decode_port_no+0x4a>
    5166:	91 11       	cpse	r25, r1
    5168:	ee cf       	rjmp	.-36     	; 0x5146 <decode_port_no+0x26>
    516a:	fb 01       	movw	r30, r22
    516c:	20 83       	st	Z, r18
    516e:	08 95       	ret
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	08 95       	ret
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	08 95       	ret

00005178 <decode_hexadecimal_string_bytes>:
    5178:	0f 93       	push	r16
    517a:	1f 93       	push	r17
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	dc 01       	movw	r26, r24
    5182:	ea 01       	movw	r28, r20
    5184:	20 97       	sbiw	r28, 0x00	; 0
    5186:	e1 f1       	breq	.+120    	; 0x5200 <decode_hexadecimal_string_bytes+0x88>
    5188:	fa 01       	movw	r30, r20
    518a:	01 90       	ld	r0, Z+
    518c:	00 20       	and	r0, r0
    518e:	e9 f7       	brne	.-6      	; 0x518a <decode_hexadecimal_string_bytes+0x12>
    5190:	31 97       	sbiw	r30, 0x01	; 1
    5192:	e4 1b       	sub	r30, r20
    5194:	f5 0b       	sbc	r31, r21
    5196:	32 97       	sbiw	r30, 0x02	; 2
    5198:	10 f5       	brcc	.+68     	; 0x51de <decode_hexadecimal_string_bytes+0x66>
    519a:	32 c0       	rjmp	.+100    	; 0x5200 <decode_hexadecimal_string_bytes+0x88>
    519c:	8d 01       	movw	r16, r26
    519e:	04 0f       	add	r16, r20
    51a0:	15 1f       	adc	r17, r21
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	ae 01       	movw	r20, r28
    51a6:	42 0f       	add	r20, r18
    51a8:	53 1f       	adc	r21, r19
    51aa:	fa 01       	movw	r30, r20
    51ac:	90 81       	ld	r25, Z
    51ae:	91 34       	cpi	r25, 0x41	; 65
    51b0:	28 f0       	brcs	.+10     	; 0x51bc <decode_hexadecimal_string_bytes+0x44>
    51b2:	97 53       	subi	r25, 0x37	; 55
    51b4:	59 2f       	mov	r21, r25
    51b6:	52 95       	swap	r21
    51b8:	50 7f       	andi	r21, 0xF0	; 240
    51ba:	03 c0       	rjmp	.+6      	; 0x51c2 <decode_hexadecimal_string_bytes+0x4a>
    51bc:	59 2f       	mov	r21, r25
    51be:	52 95       	swap	r21
    51c0:	50 7f       	andi	r21, 0xF0	; 240
    51c2:	2c 0f       	add	r18, r28
    51c4:	3d 1f       	adc	r19, r29
    51c6:	f9 01       	movw	r30, r18
    51c8:	91 81       	ldd	r25, Z+1	; 0x01
    51ca:	91 34       	cpi	r25, 0x41	; 65
    51cc:	10 f0       	brcs	.+4      	; 0x51d2 <decode_hexadecimal_string_bytes+0x5a>
    51ce:	97 53       	subi	r25, 0x37	; 55
    51d0:	01 c0       	rjmp	.+2      	; 0x51d4 <decode_hexadecimal_string_bytes+0x5c>
    51d2:	90 53       	subi	r25, 0x30	; 48
    51d4:	95 0f       	add	r25, r21
    51d6:	f8 01       	movw	r30, r16
    51d8:	90 83       	st	Z, r25
    51da:	8f 5f       	subi	r24, 0xFF	; 255
    51dc:	01 c0       	rjmp	.+2      	; 0x51e0 <decode_hexadecimal_string_bytes+0x68>
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	28 2f       	mov	r18, r24
    51e2:	22 0f       	add	r18, r18
    51e4:	48 2f       	mov	r20, r24
    51e6:	50 e0       	ldi	r21, 0x00	; 0
    51e8:	fe 01       	movw	r30, r28
    51ea:	01 90       	ld	r0, Z+
    51ec:	00 20       	and	r0, r0
    51ee:	e9 f7       	brne	.-6      	; 0x51ea <decode_hexadecimal_string_bytes+0x72>
    51f0:	31 97       	sbiw	r30, 0x01	; 1
    51f2:	ec 1b       	sub	r30, r28
    51f4:	fd 0b       	sbc	r31, r29
    51f6:	4e 17       	cp	r20, r30
    51f8:	5f 07       	cpc	r21, r31
    51fa:	10 f4       	brcc	.+4      	; 0x5200 <decode_hexadecimal_string_bytes+0x88>
    51fc:	86 13       	cpse	r24, r22
    51fe:	ce cf       	rjmp	.-100    	; 0x519c <decode_hexadecimal_string_bytes+0x24>
    5200:	df 91       	pop	r29
    5202:	cf 91       	pop	r28
    5204:	1f 91       	pop	r17
    5206:	0f 91       	pop	r16
    5208:	08 95       	ret

0000520a <_serialCallBack>:
    520a:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <crc_sum.1945>
    520e:	86 0f       	add	r24, r22
    5210:	80 93 f5 15 	sts	0x15F5, r24	; 0x8015f5 <crc_sum.1945>
    5214:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <_mh_state>
    5218:	91 30       	cpi	r25, 0x01	; 1
    521a:	79 f0       	breq	.+30     	; 0x523a <_serialCallBack+0x30>
    521c:	28 f0       	brcs	.+10     	; 0x5228 <_serialCallBack+0x1e>
    521e:	92 30       	cpi	r25, 0x02	; 2
    5220:	a9 f0       	breq	.+42     	; 0x524c <_serialCallBack+0x42>
    5222:	93 30       	cpi	r25, 0x03	; 3
    5224:	19 f1       	breq	.+70     	; 0x526c <_serialCallBack+0x62>
    5226:	08 95       	ret
    5228:	6f 3f       	cpi	r22, 0xFF	; 255
    522a:	09 f0       	breq	.+2      	; 0x522e <_serialCallBack+0x24>
    522c:	48 c0       	rjmp	.+144    	; 0x52be <_serialCallBack+0xb4>
    522e:	10 92 f5 15 	sts	0x15F5, r1	; 0x8015f5 <crc_sum.1945>
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	80 93 f8 15 	sts	0x15F8, r24	; 0x8015f8 <_mh_state>
    5238:	08 95       	ret
    523a:	66 38       	cpi	r22, 0x86	; 134
    523c:	09 f0       	breq	.+2      	; 0x5240 <_serialCallBack+0x36>
    523e:	3f c0       	rjmp	.+126    	; 0x52be <_serialCallBack+0xb4>
    5240:	10 92 f4 15 	sts	0x15F4, r1	; 0x8015f4 <inDex.1943>
    5244:	82 e0       	ldi	r24, 0x02	; 2
    5246:	80 93 f8 15 	sts	0x15F8, r24	; 0x8015f8 <_mh_state>
    524a:	08 95       	ret
    524c:	e0 91 f4 15 	lds	r30, 0x15F4	; 0x8015f4 <inDex.1943>
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	8e 0f       	add	r24, r30
    5254:	80 93 f4 15 	sts	0x15F4, r24	; 0x8015f4 <inDex.1943>
    5258:	f0 e0       	ldi	r31, 0x00	; 0
    525a:	ee 50       	subi	r30, 0x0E	; 14
    525c:	fa 4e       	sbci	r31, 0xEA	; 234
    525e:	60 83       	st	Z, r22
    5260:	82 30       	cpi	r24, 0x02	; 2
    5262:	69 f5       	brne	.+90     	; 0x52be <_serialCallBack+0xb4>
    5264:	83 e0       	ldi	r24, 0x03	; 3
    5266:	80 93 f8 15 	sts	0x15F8, r24	; 0x8015f8 <_mh_state>
    526a:	08 95       	ret
    526c:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <inDex.1943>
    5270:	21 e0       	ldi	r18, 0x01	; 1
    5272:	29 0f       	add	r18, r25
    5274:	20 93 f4 15 	sts	0x15F4, r18	; 0x8015f4 <inDex.1943>
    5278:	96 30       	cpi	r25, 0x06	; 6
    527a:	09 f5       	brne	.+66     	; 0x52be <_serialCallBack+0xb4>
    527c:	81 11       	cpse	r24, r1
    527e:	0e c0       	rjmp	.+28     	; 0x529c <_serialCallBack+0x92>
    5280:	e2 ef       	ldi	r30, 0xF2	; 242
    5282:	f5 e1       	ldi	r31, 0x15	; 21
    5284:	80 81       	ld	r24, Z
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	98 2f       	mov	r25, r24
    528a:	88 27       	eor	r24, r24
    528c:	21 81       	ldd	r18, Z+1	; 0x01
    528e:	82 0f       	add	r24, r18
    5290:	91 1d       	adc	r25, r1
    5292:	90 93 fa 15 	sts	0x15FA, r25	; 0x8015fa <_ppm+0x1>
    5296:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <_ppm>
    529a:	04 c0       	rjmp	.+8      	; 0x52a4 <_serialCallBack+0x9a>
    529c:	10 92 fa 15 	sts	0x15FA, r1	; 0x8015fa <_ppm+0x1>
    52a0:	10 92 f9 15 	sts	0x15F9, r1	; 0x8015f9 <_ppm>
    52a4:	10 92 f8 15 	sts	0x15F8, r1	; 0x8015f8 <_mh_state>
    52a8:	e0 91 f6 15 	lds	r30, 0x15F6	; 0x8015f6 <_appCallBack>
    52ac:	f0 91 f7 15 	lds	r31, 0x15F7	; 0x8015f7 <_appCallBack+0x1>
    52b0:	30 97       	sbiw	r30, 0x00	; 0
    52b2:	29 f0       	breq	.+10     	; 0x52be <_serialCallBack+0xb4>
    52b4:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <_ppm>
    52b8:	90 91 fa 15 	lds	r25, 0x15FA	; 0x8015fa <_ppm+0x1>
    52bc:	19 95       	eicall
    52be:	08 95       	ret

000052c0 <mh_z19_initialise>:
    52c0:	8f 92       	push	r8
    52c2:	9f 92       	push	r9
    52c4:	af 92       	push	r10
    52c6:	cf 92       	push	r12
    52c8:	ef 92       	push	r14
    52ca:	0f 93       	push	r16
    52cc:	0f 2e       	mov	r0, r31
    52ce:	f5 e0       	ldi	r31, 0x05	; 5
    52d0:	8f 2e       	mov	r8, r31
    52d2:	f9 e2       	ldi	r31, 0x29	; 41
    52d4:	9f 2e       	mov	r9, r31
    52d6:	f0 2d       	mov	r31, r0
    52d8:	68 94       	set
    52da:	aa 24       	eor	r10, r10
    52dc:	a4 f8       	bld	r10, 4
    52de:	68 94       	set
    52e0:	cc 24       	eor	r12, r12
    52e2:	c4 f8       	bld	r12, 4
    52e4:	e1 2c       	mov	r14, r1
    52e6:	00 e0       	ldi	r16, 0x00	; 0
    52e8:	23 e0       	ldi	r18, 0x03	; 3
    52ea:	40 e8       	ldi	r20, 0x80	; 128
    52ec:	55 e2       	ldi	r21, 0x25	; 37
    52ee:	60 e0       	ldi	r22, 0x00	; 0
    52f0:	70 e0       	ldi	r23, 0x00	; 0
    52f2:	73 d0       	rcall	.+230    	; 0x53da <serial_create>
    52f4:	90 93 fc 15 	sts	0x15FC, r25	; 0x8015fc <_serial+0x1>
    52f8:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <_serial>
    52fc:	0f 91       	pop	r16
    52fe:	ef 90       	pop	r14
    5300:	cf 90       	pop	r12
    5302:	af 90       	pop	r10
    5304:	9f 90       	pop	r9
    5306:	8f 90       	pop	r8
    5308:	08 95       	ret

0000530a <mh_z19_injectCallBack>:
    530a:	90 93 f7 15 	sts	0x15F7, r25	; 0x8015f7 <_appCallBack+0x1>
    530e:	80 93 f6 15 	sts	0x15F6, r24	; 0x8015f6 <_appCallBack>
    5312:	08 95       	ret

00005314 <mh_z19_takeMeassuring>:
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	29 97       	sbiw	r28, 0x09	; 9
    531e:	0f b6       	in	r0, 0x3f	; 63
    5320:	f8 94       	cli
    5322:	de bf       	out	0x3e, r29	; 62
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	cd bf       	out	0x3d, r28	; 61
    5328:	89 e0       	ldi	r24, 0x09	; 9
    532a:	e2 e4       	ldi	r30, 0x42	; 66
    532c:	f2 e0       	ldi	r31, 0x02	; 2
    532e:	9e 01       	movw	r18, r28
    5330:	2f 5f       	subi	r18, 0xFF	; 255
    5332:	3f 4f       	sbci	r19, 0xFF	; 255
    5334:	d9 01       	movw	r26, r18
    5336:	01 90       	ld	r0, Z+
    5338:	0d 92       	st	X+, r0
    533a:	8a 95       	dec	r24
    533c:	e1 f7       	brne	.-8      	; 0x5336 <mh_z19_takeMeassuring+0x22>
    533e:	10 92 fa 15 	sts	0x15FA, r1	; 0x8015fa <_ppm+0x1>
    5342:	10 92 f9 15 	sts	0x15F9, r1	; 0x8015f9 <_ppm>
    5346:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <_serial>
    534a:	90 91 fc 15 	lds	r25, 0x15FC	; 0x8015fc <_serial+0x1>
    534e:	00 97       	sbiw	r24, 0x00	; 0
    5350:	31 f0       	breq	.+12     	; 0x535e <mh_z19_takeMeassuring+0x4a>
    5352:	42 2f       	mov	r20, r18
    5354:	53 2f       	mov	r21, r19
    5356:	69 e0       	ldi	r22, 0x09	; 9
    5358:	0e d1       	rcall	.+540    	; 0x5576 <serial_sendBytes>
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	01 c0       	rjmp	.+2      	; 0x5360 <mh_z19_takeMeassuring+0x4c>
    535e:	82 e0       	ldi	r24, 0x02	; 2
    5360:	29 96       	adiw	r28, 0x09	; 9
    5362:	0f b6       	in	r0, 0x3f	; 63
    5364:	f8 94       	cli
    5366:	de bf       	out	0x3e, r29	; 62
    5368:	0f be       	out	0x3f, r0	; 63
    536a:	cd bf       	out	0x3d, r28	; 61
    536c:	df 91       	pop	r29
    536e:	cf 91       	pop	r28
    5370:	08 95       	ret

00005372 <rc_servo_setPosition>:
    5372:	65 36       	cpi	r22, 0x65	; 101
    5374:	0c f0       	brlt	.+2      	; 0x5378 <rc_servo_setPosition+0x6>
    5376:	64 e6       	ldi	r22, 0x64	; 100
    5378:	6c 39       	cpi	r22, 0x9C	; 156
    537a:	0c f4       	brge	.+2      	; 0x537e <rc_servo_setPosition+0xc>
    537c:	6c e9       	ldi	r22, 0x9C	; 156
    537e:	96 ef       	ldi	r25, 0xF6	; 246
    5380:	69 02       	muls	r22, r25
    5382:	b0 01       	movw	r22, r0
    5384:	11 24       	eor	r1, r1
    5386:	68 54       	subi	r22, 0x48	; 72
    5388:	74 4f       	sbci	r23, 0xF4	; 244
    538a:	81 11       	cpse	r24, r1
    538c:	05 c0       	rjmp	.+10     	; 0x5398 <rc_servo_setPosition+0x26>
    538e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    5392:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    5396:	08 95       	ret
    5398:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    539c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    53a0:	08 95       	ret

000053a2 <rc_servo_initialise>:
    53a2:	ea e0       	ldi	r30, 0x0A	; 10
    53a4:	f1 e0       	ldi	r31, 0x01	; 1
    53a6:	80 81       	ld	r24, Z
    53a8:	88 61       	ori	r24, 0x18	; 24
    53aa:	80 83       	st	Z, r24
    53ac:	8f e3       	ldi	r24, 0x3F	; 63
    53ae:	9c e9       	ldi	r25, 0x9C	; 156
    53b0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    53b4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    53b8:	60 e0       	ldi	r22, 0x00	; 0
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	da df       	rcall	.-76     	; 0x5372 <rc_servo_setPosition>
    53be:	60 e0       	ldi	r22, 0x00	; 0
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	d7 df       	rcall	.-82     	; 0x5372 <rc_servo_setPosition>
    53c4:	e0 e2       	ldi	r30, 0x20	; 32
    53c6:	f1 e0       	ldi	r31, 0x01	; 1
    53c8:	80 81       	ld	r24, Z
    53ca:	82 6a       	ori	r24, 0xA2	; 162
    53cc:	80 83       	st	Z, r24
    53ce:	e1 e2       	ldi	r30, 0x21	; 33
    53d0:	f1 e0       	ldi	r31, 0x01	; 1
    53d2:	80 81       	ld	r24, Z
    53d4:	8a 61       	ori	r24, 0x1A	; 26
    53d6:	80 83       	st	Z, r24
    53d8:	08 95       	ret

000053da <serial_create>:
    53da:	2f 92       	push	r2
    53dc:	3f 92       	push	r3
    53de:	4f 92       	push	r4
    53e0:	5f 92       	push	r5
    53e2:	6f 92       	push	r6
    53e4:	7f 92       	push	r7
    53e6:	8f 92       	push	r8
    53e8:	9f 92       	push	r9
    53ea:	af 92       	push	r10
    53ec:	cf 92       	push	r12
    53ee:	ef 92       	push	r14
    53f0:	ff 92       	push	r15
    53f2:	0f 93       	push	r16
    53f4:	1f 93       	push	r17
    53f6:	cf 93       	push	r28
    53f8:	df 93       	push	r29
    53fa:	cd b7       	in	r28, 0x3d	; 61
    53fc:	de b7       	in	r29, 0x3e	; 62
    53fe:	f8 2e       	mov	r15, r24
    5400:	2a 01       	movw	r4, r20
    5402:	3b 01       	movw	r6, r22
    5404:	88 e0       	ldi	r24, 0x08	; 8
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <malloc>
    540c:	8c 01       	movw	r16, r24
    540e:	8f 2d       	mov	r24, r15
    5410:	90 e0       	ldi	r25, 0x00	; 0
    5412:	fc 01       	movw	r30, r24
    5414:	ee 0f       	add	r30, r30
    5416:	ff 1f       	adc	r31, r31
    5418:	e3 50       	subi	r30, 0x03	; 3
    541a:	fa 4e       	sbci	r31, 0xEA	; 234
    541c:	11 83       	std	Z+1, r17	; 0x01
    541e:	00 83       	st	Z, r16
    5420:	01 15       	cp	r16, r1
    5422:	11 05       	cpc	r17, r1
    5424:	09 f4       	brne	.+2      	; 0x5428 <serial_create+0x4e>
    5426:	6a c0       	rjmp	.+212    	; 0x54fc <serial_create+0x122>
    5428:	88 0f       	add	r24, r24
    542a:	99 1f       	adc	r25, r25
    542c:	fc 01       	movw	r30, r24
    542e:	e5 5f       	subi	r30, 0xF5	; 245
    5430:	fd 4f       	sbci	r31, 0xFD	; 253
    5432:	80 81       	ld	r24, Z
    5434:	91 81       	ldd	r25, Z+1	; 0x01
    5436:	d8 01       	movw	r26, r16
    5438:	8d 93       	st	X+, r24
    543a:	9c 93       	st	X, r25
    543c:	8c 2d       	mov	r24, r12
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	88 0f       	add	r24, r24
    5442:	99 1f       	adc	r25, r25
    5444:	88 0f       	add	r24, r24
    5446:	99 1f       	adc	r25, r25
    5448:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <malloc>
    544c:	1c 01       	movw	r2, r24
    544e:	86 e0       	ldi	r24, 0x06	; 6
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <malloc>
    5456:	7c 01       	movw	r14, r24
    5458:	4c 2d       	mov	r20, r12
    545a:	b1 01       	movw	r22, r2
    545c:	be d6       	rcall	.+3452   	; 0x61da <fifo_init>
    545e:	f8 01       	movw	r30, r16
    5460:	f5 82       	std	Z+5, r15	; 0x05
    5462:	e4 82       	std	Z+4, r14	; 0x04
    5464:	8a 2d       	mov	r24, r10
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	88 0f       	add	r24, r24
    546a:	99 1f       	adc	r25, r25
    546c:	88 0f       	add	r24, r24
    546e:	99 1f       	adc	r25, r25
    5470:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <malloc>
    5474:	1c 01       	movw	r2, r24
    5476:	86 e0       	ldi	r24, 0x06	; 6
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <malloc>
    547e:	7c 01       	movw	r14, r24
    5480:	4a 2d       	mov	r20, r10
    5482:	b1 01       	movw	r22, r2
    5484:	aa d6       	rcall	.+3412   	; 0x61da <fifo_init>
    5486:	d8 01       	movw	r26, r16
    5488:	13 96       	adiw	r26, 0x03	; 3
    548a:	fc 92       	st	X, r15
    548c:	ee 92       	st	-X, r14
    548e:	12 97       	sbiw	r26, 0x02	; 2
    5490:	17 96       	adiw	r26, 0x07	; 7
    5492:	9c 92       	st	X, r9
    5494:	8e 92       	st	-X, r8
    5496:	16 97       	sbiw	r26, 0x06	; 6
    5498:	ff b6       	in	r15, 0x3f	; 63
    549a:	f8 94       	cli
    549c:	ed 91       	ld	r30, X+
    549e:	fc 91       	ld	r31, X
    54a0:	11 97       	sbiw	r26, 0x01	; 1
    54a2:	36 97       	sbiw	r30, 0x06	; 6
    54a4:	80 81       	ld	r24, Z
    54a6:	82 60       	ori	r24, 0x02	; 2
    54a8:	80 83       	st	Z, r24
    54aa:	8d 90       	ld	r8, X+
    54ac:	9c 90       	ld	r9, X
    54ae:	c3 01       	movw	r24, r6
    54b0:	b2 01       	movw	r22, r4
    54b2:	0e 94 03 35 	call	0x6a06	; 0x6a06 <__floatunsisf>
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	40 e0       	ldi	r20, 0x00	; 0
    54bc:	51 e4       	ldi	r21, 0x41	; 65
    54be:	a9 d8       	rcall	.-3758   	; 0x4612 <__mulsf3>
    54c0:	9b 01       	movw	r18, r22
    54c2:	ac 01       	movw	r20, r24
    54c4:	60 e0       	ldi	r22, 0x00	; 0
    54c6:	74 e2       	ldi	r23, 0x24	; 36
    54c8:	84 e7       	ldi	r24, 0x74	; 116
    54ca:	9b e4       	ldi	r25, 0x4B	; 75
    54cc:	0e 94 92 34 	call	0x6924	; 0x6924 <__divsf3>
    54d0:	20 e0       	ldi	r18, 0x00	; 0
    54d2:	30 e0       	ldi	r19, 0x00	; 0
    54d4:	40 e8       	ldi	r20, 0x80	; 128
    54d6:	5f e3       	ldi	r21, 0x3F	; 63
    54d8:	ff d8       	rcall	.-3586   	; 0x46d8 <__subsf3>
    54da:	13 d8       	rcall	.-4058   	; 0x4502 <__fixunssfsi>
    54dc:	f4 01       	movw	r30, r8
    54de:	32 97       	sbiw	r30, 0x02	; 2
    54e0:	60 83       	st	Z, r22
    54e2:	d8 01       	movw	r26, r16
    54e4:	ed 91       	ld	r30, X+
    54e6:	fc 91       	ld	r31, X
    54e8:	11 97       	sbiw	r26, 0x01	; 1
    54ea:	35 97       	sbiw	r30, 0x05	; 5
    54ec:	88 e9       	ldi	r24, 0x98	; 152
    54ee:	80 83       	st	Z, r24
    54f0:	ed 91       	ld	r30, X+
    54f2:	fc 91       	ld	r31, X
    54f4:	34 97       	sbiw	r30, 0x04	; 4
    54f6:	86 e0       	ldi	r24, 0x06	; 6
    54f8:	80 83       	st	Z, r24
    54fa:	ff be       	out	0x3f, r15	; 63
    54fc:	c8 01       	movw	r24, r16
    54fe:	df 91       	pop	r29
    5500:	cf 91       	pop	r28
    5502:	1f 91       	pop	r17
    5504:	0f 91       	pop	r16
    5506:	ff 90       	pop	r15
    5508:	ef 90       	pop	r14
    550a:	cf 90       	pop	r12
    550c:	af 90       	pop	r10
    550e:	9f 90       	pop	r9
    5510:	8f 90       	pop	r8
    5512:	7f 90       	pop	r7
    5514:	6f 90       	pop	r6
    5516:	5f 90       	pop	r5
    5518:	4f 90       	pop	r4
    551a:	3f 90       	pop	r3
    551c:	2f 90       	pop	r2
    551e:	08 95       	ret

00005520 <serial_sendByte>:
    5520:	cf 93       	push	r28
    5522:	df 93       	push	r29
    5524:	dc 01       	movw	r26, r24
    5526:	89 2b       	or	r24, r25
    5528:	01 f1       	breq	.+64     	; 0x556a <serial_sendByte+0x4a>
    552a:	12 96       	adiw	r26, 0x02	; 2
    552c:	ed 91       	ld	r30, X+
    552e:	fc 91       	ld	r31, X
    5530:	13 97       	sbiw	r26, 0x03	; 3
    5532:	93 81       	ldd	r25, Z+3	; 0x03
    5534:	82 81       	ldd	r24, Z+2	; 0x02
    5536:	25 81       	ldd	r18, Z+5	; 0x05
    5538:	98 1b       	sub	r25, r24
    553a:	92 23       	and	r25, r18
    553c:	84 81       	ldd	r24, Z+4	; 0x04
    553e:	98 17       	cp	r25, r24
    5540:	b1 f0       	breq	.+44     	; 0x556e <serial_sendByte+0x4e>
    5542:	83 81       	ldd	r24, Z+3	; 0x03
    5544:	26 95       	lsr	r18
    5546:	28 23       	and	r18, r24
    5548:	c0 81       	ld	r28, Z
    554a:	d1 81       	ldd	r29, Z+1	; 0x01
    554c:	c2 0f       	add	r28, r18
    554e:	d1 1d       	adc	r29, r1
    5550:	68 83       	st	Y, r22
    5552:	8f 5f       	subi	r24, 0xFF	; 255
    5554:	95 81       	ldd	r25, Z+5	; 0x05
    5556:	89 23       	and	r24, r25
    5558:	83 83       	std	Z+3, r24	; 0x03
    555a:	ed 91       	ld	r30, X+
    555c:	fc 91       	ld	r31, X
    555e:	35 97       	sbiw	r30, 0x05	; 5
    5560:	80 81       	ld	r24, Z
    5562:	80 62       	ori	r24, 0x20	; 32
    5564:	80 83       	st	Z, r24
    5566:	80 e0       	ldi	r24, 0x00	; 0
    5568:	03 c0       	rjmp	.+6      	; 0x5570 <serial_sendByte+0x50>
    556a:	81 e0       	ldi	r24, 0x01	; 1
    556c:	01 c0       	rjmp	.+2      	; 0x5570 <serial_sendByte+0x50>
    556e:	82 e0       	ldi	r24, 0x02	; 2
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	08 95       	ret

00005576 <serial_sendBytes>:
    5576:	ef 92       	push	r14
    5578:	ff 92       	push	r15
    557a:	0f 93       	push	r16
    557c:	1f 93       	push	r17
    557e:	cf 93       	push	r28
    5580:	df 93       	push	r29
    5582:	7c 01       	movw	r14, r24
    5584:	00 97       	sbiw	r24, 0x00	; 0
    5586:	09 f4       	brne	.+2      	; 0x558a <serial_sendBytes+0x14>
    5588:	41 c0       	rjmp	.+130    	; 0x560c <serial_sendBytes+0x96>
    558a:	dc 01       	movw	r26, r24
    558c:	12 96       	adiw	r26, 0x02	; 2
    558e:	ed 91       	ld	r30, X+
    5590:	fc 91       	ld	r31, X
    5592:	13 97       	sbiw	r26, 0x03	; 3
    5594:	93 81       	ldd	r25, Z+3	; 0x03
    5596:	82 81       	ldd	r24, Z+2	; 0x02
    5598:	98 1b       	sub	r25, r24
    559a:	85 81       	ldd	r24, Z+5	; 0x05
    559c:	98 23       	and	r25, r24
    559e:	84 81       	ldd	r24, Z+4	; 0x04
    55a0:	89 1b       	sub	r24, r25
    55a2:	86 17       	cp	r24, r22
    55a4:	a8 f1       	brcs	.+106    	; 0x5610 <serial_sendBytes+0x9a>
    55a6:	66 23       	and	r22, r22
    55a8:	41 f1       	breq	.+80     	; 0x55fa <serial_sendBytes+0x84>
    55aa:	84 2f       	mov	r24, r20
    55ac:	95 2f       	mov	r25, r21
    55ae:	dc 01       	movw	r26, r24
    55b0:	61 50       	subi	r22, 0x01	; 1
    55b2:	46 2f       	mov	r20, r22
    55b4:	50 e0       	ldi	r21, 0x00	; 0
    55b6:	4f 5f       	subi	r20, 0xFF	; 255
    55b8:	5f 4f       	sbci	r21, 0xFF	; 255
    55ba:	48 0f       	add	r20, r24
    55bc:	59 1f       	adc	r21, r25
    55be:	e7 01       	movw	r28, r14
    55c0:	ea 81       	ldd	r30, Y+2	; 0x02
    55c2:	fb 81       	ldd	r31, Y+3	; 0x03
    55c4:	93 81       	ldd	r25, Z+3	; 0x03
    55c6:	82 81       	ldd	r24, Z+2	; 0x02
    55c8:	25 81       	ldd	r18, Z+5	; 0x05
    55ca:	98 1b       	sub	r25, r24
    55cc:	92 23       	and	r25, r18
    55ce:	84 81       	ldd	r24, Z+4	; 0x04
    55d0:	98 17       	cp	r25, r24
    55d2:	79 f0       	breq	.+30     	; 0x55f2 <serial_sendBytes+0x7c>
    55d4:	8c 91       	ld	r24, X
    55d6:	93 81       	ldd	r25, Z+3	; 0x03
    55d8:	26 95       	lsr	r18
    55da:	29 23       	and	r18, r25
    55dc:	60 81       	ld	r22, Z
    55de:	71 81       	ldd	r23, Z+1	; 0x01
    55e0:	8b 01       	movw	r16, r22
    55e2:	02 0f       	add	r16, r18
    55e4:	11 1d       	adc	r17, r1
    55e6:	e8 01       	movw	r28, r16
    55e8:	88 83       	st	Y, r24
    55ea:	9f 5f       	subi	r25, 0xFF	; 255
    55ec:	85 81       	ldd	r24, Z+5	; 0x05
    55ee:	98 23       	and	r25, r24
    55f0:	93 83       	std	Z+3, r25	; 0x03
    55f2:	11 96       	adiw	r26, 0x01	; 1
    55f4:	a4 17       	cp	r26, r20
    55f6:	b5 07       	cpc	r27, r21
    55f8:	11 f7       	brne	.-60     	; 0x55be <serial_sendBytes+0x48>
    55fa:	d7 01       	movw	r26, r14
    55fc:	ed 91       	ld	r30, X+
    55fe:	fc 91       	ld	r31, X
    5600:	35 97       	sbiw	r30, 0x05	; 5
    5602:	80 81       	ld	r24, Z
    5604:	80 62       	ori	r24, 0x20	; 32
    5606:	80 83       	st	Z, r24
    5608:	80 e0       	ldi	r24, 0x00	; 0
    560a:	03 c0       	rjmp	.+6      	; 0x5612 <serial_sendBytes+0x9c>
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	01 c0       	rjmp	.+2      	; 0x5612 <serial_sendBytes+0x9c>
    5610:	82 e0       	ldi	r24, 0x02	; 2
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	1f 91       	pop	r17
    5618:	0f 91       	pop	r16
    561a:	ff 90       	pop	r15
    561c:	ef 90       	pop	r14
    561e:	08 95       	ret

00005620 <serial_getByte>:
    5620:	00 97       	sbiw	r24, 0x00	; 0
    5622:	d1 f0       	breq	.+52     	; 0x5658 <serial_getByte+0x38>
    5624:	dc 01       	movw	r26, r24
    5626:	14 96       	adiw	r26, 0x04	; 4
    5628:	ed 91       	ld	r30, X+
    562a:	fc 91       	ld	r31, X
    562c:	15 97       	sbiw	r26, 0x05	; 5
    562e:	93 81       	ldd	r25, Z+3	; 0x03
    5630:	82 81       	ldd	r24, Z+2	; 0x02
    5632:	98 17       	cp	r25, r24
    5634:	99 f0       	breq	.+38     	; 0x565c <serial_getByte+0x3c>
    5636:	92 81       	ldd	r25, Z+2	; 0x02
    5638:	85 81       	ldd	r24, Z+5	; 0x05
    563a:	86 95       	lsr	r24
    563c:	89 23       	and	r24, r25
    563e:	a0 81       	ld	r26, Z
    5640:	b1 81       	ldd	r27, Z+1	; 0x01
    5642:	a8 0f       	add	r26, r24
    5644:	b1 1d       	adc	r27, r1
    5646:	8c 91       	ld	r24, X
    5648:	db 01       	movw	r26, r22
    564a:	8c 93       	st	X, r24
    564c:	9f 5f       	subi	r25, 0xFF	; 255
    564e:	85 81       	ldd	r24, Z+5	; 0x05
    5650:	98 23       	and	r25, r24
    5652:	92 83       	std	Z+2, r25	; 0x02
    5654:	80 e0       	ldi	r24, 0x00	; 0
    5656:	08 95       	ret
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	08 95       	ret
    565c:	83 e0       	ldi	r24, 0x03	; 3
    565e:	08 95       	ret

00005660 <__vector_25>:
    5660:	1f 92       	push	r1
    5662:	0f 92       	push	r0
    5664:	0f b6       	in	r0, 0x3f	; 63
    5666:	0f 92       	push	r0
    5668:	11 24       	eor	r1, r1
    566a:	0b b6       	in	r0, 0x3b	; 59
    566c:	0f 92       	push	r0
    566e:	2f 93       	push	r18
    5670:	3f 93       	push	r19
    5672:	4f 93       	push	r20
    5674:	5f 93       	push	r21
    5676:	6f 93       	push	r22
    5678:	7f 93       	push	r23
    567a:	8f 93       	push	r24
    567c:	9f 93       	push	r25
    567e:	af 93       	push	r26
    5680:	bf 93       	push	r27
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	ef 93       	push	r30
    5688:	ff 93       	push	r31
    568a:	a0 91 fd 15 	lds	r26, 0x15FD	; 0x8015fd <_ser_handle>
    568e:	b0 91 fe 15 	lds	r27, 0x15FE	; 0x8015fe <_ser_handle+0x1>
    5692:	10 97       	sbiw	r26, 0x00	; 0
    5694:	11 f1       	breq	.+68     	; 0x56da <__vector_25+0x7a>
    5696:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    569a:	14 96       	adiw	r26, 0x04	; 4
    569c:	ed 91       	ld	r30, X+
    569e:	fc 91       	ld	r31, X
    56a0:	15 97       	sbiw	r26, 0x05	; 5
    56a2:	93 81       	ldd	r25, Z+3	; 0x03
    56a4:	82 81       	ldd	r24, Z+2	; 0x02
    56a6:	25 81       	ldd	r18, Z+5	; 0x05
    56a8:	98 1b       	sub	r25, r24
    56aa:	92 23       	and	r25, r18
    56ac:	84 81       	ldd	r24, Z+4	; 0x04
    56ae:	98 17       	cp	r25, r24
    56b0:	61 f0       	breq	.+24     	; 0x56ca <__vector_25+0x6a>
    56b2:	83 81       	ldd	r24, Z+3	; 0x03
    56b4:	26 95       	lsr	r18
    56b6:	28 23       	and	r18, r24
    56b8:	c0 81       	ld	r28, Z
    56ba:	d1 81       	ldd	r29, Z+1	; 0x01
    56bc:	c2 0f       	add	r28, r18
    56be:	d1 1d       	adc	r29, r1
    56c0:	68 83       	st	Y, r22
    56c2:	8f 5f       	subi	r24, 0xFF	; 255
    56c4:	95 81       	ldd	r25, Z+5	; 0x05
    56c6:	89 23       	and	r24, r25
    56c8:	83 83       	std	Z+3, r24	; 0x03
    56ca:	16 96       	adiw	r26, 0x06	; 6
    56cc:	ed 91       	ld	r30, X+
    56ce:	fc 91       	ld	r31, X
    56d0:	17 97       	sbiw	r26, 0x07	; 7
    56d2:	30 97       	sbiw	r30, 0x00	; 0
    56d4:	11 f0       	breq	.+4      	; 0x56da <__vector_25+0x7a>
    56d6:	cd 01       	movw	r24, r26
    56d8:	19 95       	eicall
    56da:	ff 91       	pop	r31
    56dc:	ef 91       	pop	r30
    56de:	df 91       	pop	r29
    56e0:	cf 91       	pop	r28
    56e2:	bf 91       	pop	r27
    56e4:	af 91       	pop	r26
    56e6:	9f 91       	pop	r25
    56e8:	8f 91       	pop	r24
    56ea:	7f 91       	pop	r23
    56ec:	6f 91       	pop	r22
    56ee:	5f 91       	pop	r21
    56f0:	4f 91       	pop	r20
    56f2:	3f 91       	pop	r19
    56f4:	2f 91       	pop	r18
    56f6:	0f 90       	pop	r0
    56f8:	0b be       	out	0x3b, r0	; 59
    56fa:	0f 90       	pop	r0
    56fc:	0f be       	out	0x3f, r0	; 63
    56fe:	0f 90       	pop	r0
    5700:	1f 90       	pop	r1
    5702:	18 95       	reti

00005704 <__vector_26>:
    5704:	1f 92       	push	r1
    5706:	0f 92       	push	r0
    5708:	0f b6       	in	r0, 0x3f	; 63
    570a:	0f 92       	push	r0
    570c:	11 24       	eor	r1, r1
    570e:	0b b6       	in	r0, 0x3b	; 59
    5710:	0f 92       	push	r0
    5712:	2f 93       	push	r18
    5714:	8f 93       	push	r24
    5716:	9f 93       	push	r25
    5718:	af 93       	push	r26
    571a:	bf 93       	push	r27
    571c:	ef 93       	push	r30
    571e:	ff 93       	push	r31
    5720:	e0 91 fd 15 	lds	r30, 0x15FD	; 0x8015fd <_ser_handle>
    5724:	f0 91 fe 15 	lds	r31, 0x15FE	; 0x8015fe <_ser_handle+0x1>
    5728:	30 97       	sbiw	r30, 0x00	; 0
    572a:	b9 f0       	breq	.+46     	; 0x575a <__vector_26+0x56>
    572c:	02 80       	ldd	r0, Z+2	; 0x02
    572e:	f3 81       	ldd	r31, Z+3	; 0x03
    5730:	e0 2d       	mov	r30, r0
    5732:	93 81       	ldd	r25, Z+3	; 0x03
    5734:	82 81       	ldd	r24, Z+2	; 0x02
    5736:	98 17       	cp	r25, r24
    5738:	b1 f0       	breq	.+44     	; 0x5766 <__vector_26+0x62>
    573a:	92 81       	ldd	r25, Z+2	; 0x02
    573c:	85 81       	ldd	r24, Z+5	; 0x05
    573e:	28 2f       	mov	r18, r24
    5740:	26 95       	lsr	r18
    5742:	29 23       	and	r18, r25
    5744:	a0 81       	ld	r26, Z
    5746:	b1 81       	ldd	r27, Z+1	; 0x01
    5748:	a2 0f       	add	r26, r18
    574a:	b1 1d       	adc	r27, r1
    574c:	2c 91       	ld	r18, X
    574e:	9f 5f       	subi	r25, 0xFF	; 255
    5750:	89 23       	and	r24, r25
    5752:	82 83       	std	Z+2, r24	; 0x02
    5754:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5758:	0b c0       	rjmp	.+22     	; 0x5770 <__vector_26+0x6c>
    575a:	e1 ec       	ldi	r30, 0xC1	; 193
    575c:	f0 e0       	ldi	r31, 0x00	; 0
    575e:	80 81       	ld	r24, Z
    5760:	8f 7d       	andi	r24, 0xDF	; 223
    5762:	80 83       	st	Z, r24
    5764:	05 c0       	rjmp	.+10     	; 0x5770 <__vector_26+0x6c>
    5766:	e1 ec       	ldi	r30, 0xC1	; 193
    5768:	f0 e0       	ldi	r31, 0x00	; 0
    576a:	80 81       	ld	r24, Z
    576c:	8f 7d       	andi	r24, 0xDF	; 223
    576e:	80 83       	st	Z, r24
    5770:	ff 91       	pop	r31
    5772:	ef 91       	pop	r30
    5774:	bf 91       	pop	r27
    5776:	af 91       	pop	r26
    5778:	9f 91       	pop	r25
    577a:	8f 91       	pop	r24
    577c:	2f 91       	pop	r18
    577e:	0f 90       	pop	r0
    5780:	0b be       	out	0x3b, r0	; 59
    5782:	0f 90       	pop	r0
    5784:	0f be       	out	0x3f, r0	; 63
    5786:	0f 90       	pop	r0
    5788:	1f 90       	pop	r1
    578a:	18 95       	reti

0000578c <__vector_36>:
    578c:	1f 92       	push	r1
    578e:	0f 92       	push	r0
    5790:	0f b6       	in	r0, 0x3f	; 63
    5792:	0f 92       	push	r0
    5794:	11 24       	eor	r1, r1
    5796:	0b b6       	in	r0, 0x3b	; 59
    5798:	0f 92       	push	r0
    579a:	2f 93       	push	r18
    579c:	3f 93       	push	r19
    579e:	4f 93       	push	r20
    57a0:	5f 93       	push	r21
    57a2:	6f 93       	push	r22
    57a4:	7f 93       	push	r23
    57a6:	8f 93       	push	r24
    57a8:	9f 93       	push	r25
    57aa:	af 93       	push	r26
    57ac:	bf 93       	push	r27
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	ef 93       	push	r30
    57b4:	ff 93       	push	r31
    57b6:	a0 91 ff 15 	lds	r26, 0x15FF	; 0x8015ff <_ser_handle+0x2>
    57ba:	b0 91 00 16 	lds	r27, 0x1600	; 0x801600 <_ser_handle+0x3>
    57be:	10 97       	sbiw	r26, 0x00	; 0
    57c0:	11 f1       	breq	.+68     	; 0x5806 <__vector_36+0x7a>
    57c2:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    57c6:	14 96       	adiw	r26, 0x04	; 4
    57c8:	ed 91       	ld	r30, X+
    57ca:	fc 91       	ld	r31, X
    57cc:	15 97       	sbiw	r26, 0x05	; 5
    57ce:	93 81       	ldd	r25, Z+3	; 0x03
    57d0:	82 81       	ldd	r24, Z+2	; 0x02
    57d2:	25 81       	ldd	r18, Z+5	; 0x05
    57d4:	98 1b       	sub	r25, r24
    57d6:	92 23       	and	r25, r18
    57d8:	84 81       	ldd	r24, Z+4	; 0x04
    57da:	98 17       	cp	r25, r24
    57dc:	61 f0       	breq	.+24     	; 0x57f6 <__vector_36+0x6a>
    57de:	83 81       	ldd	r24, Z+3	; 0x03
    57e0:	26 95       	lsr	r18
    57e2:	28 23       	and	r18, r24
    57e4:	c0 81       	ld	r28, Z
    57e6:	d1 81       	ldd	r29, Z+1	; 0x01
    57e8:	c2 0f       	add	r28, r18
    57ea:	d1 1d       	adc	r29, r1
    57ec:	68 83       	st	Y, r22
    57ee:	8f 5f       	subi	r24, 0xFF	; 255
    57f0:	95 81       	ldd	r25, Z+5	; 0x05
    57f2:	89 23       	and	r24, r25
    57f4:	83 83       	std	Z+3, r24	; 0x03
    57f6:	16 96       	adiw	r26, 0x06	; 6
    57f8:	ed 91       	ld	r30, X+
    57fa:	fc 91       	ld	r31, X
    57fc:	17 97       	sbiw	r26, 0x07	; 7
    57fe:	30 97       	sbiw	r30, 0x00	; 0
    5800:	11 f0       	breq	.+4      	; 0x5806 <__vector_36+0x7a>
    5802:	cd 01       	movw	r24, r26
    5804:	19 95       	eicall
    5806:	ff 91       	pop	r31
    5808:	ef 91       	pop	r30
    580a:	df 91       	pop	r29
    580c:	cf 91       	pop	r28
    580e:	bf 91       	pop	r27
    5810:	af 91       	pop	r26
    5812:	9f 91       	pop	r25
    5814:	8f 91       	pop	r24
    5816:	7f 91       	pop	r23
    5818:	6f 91       	pop	r22
    581a:	5f 91       	pop	r21
    581c:	4f 91       	pop	r20
    581e:	3f 91       	pop	r19
    5820:	2f 91       	pop	r18
    5822:	0f 90       	pop	r0
    5824:	0b be       	out	0x3b, r0	; 59
    5826:	0f 90       	pop	r0
    5828:	0f be       	out	0x3f, r0	; 63
    582a:	0f 90       	pop	r0
    582c:	1f 90       	pop	r1
    582e:	18 95       	reti

00005830 <__vector_37>:
    5830:	1f 92       	push	r1
    5832:	0f 92       	push	r0
    5834:	0f b6       	in	r0, 0x3f	; 63
    5836:	0f 92       	push	r0
    5838:	11 24       	eor	r1, r1
    583a:	0b b6       	in	r0, 0x3b	; 59
    583c:	0f 92       	push	r0
    583e:	2f 93       	push	r18
    5840:	8f 93       	push	r24
    5842:	9f 93       	push	r25
    5844:	af 93       	push	r26
    5846:	bf 93       	push	r27
    5848:	ef 93       	push	r30
    584a:	ff 93       	push	r31
    584c:	e0 91 ff 15 	lds	r30, 0x15FF	; 0x8015ff <_ser_handle+0x2>
    5850:	f0 91 00 16 	lds	r31, 0x1600	; 0x801600 <_ser_handle+0x3>
    5854:	30 97       	sbiw	r30, 0x00	; 0
    5856:	b9 f0       	breq	.+46     	; 0x5886 <__vector_37+0x56>
    5858:	02 80       	ldd	r0, Z+2	; 0x02
    585a:	f3 81       	ldd	r31, Z+3	; 0x03
    585c:	e0 2d       	mov	r30, r0
    585e:	93 81       	ldd	r25, Z+3	; 0x03
    5860:	82 81       	ldd	r24, Z+2	; 0x02
    5862:	98 17       	cp	r25, r24
    5864:	b1 f0       	breq	.+44     	; 0x5892 <__vector_37+0x62>
    5866:	92 81       	ldd	r25, Z+2	; 0x02
    5868:	85 81       	ldd	r24, Z+5	; 0x05
    586a:	28 2f       	mov	r18, r24
    586c:	26 95       	lsr	r18
    586e:	29 23       	and	r18, r25
    5870:	a0 81       	ld	r26, Z
    5872:	b1 81       	ldd	r27, Z+1	; 0x01
    5874:	a2 0f       	add	r26, r18
    5876:	b1 1d       	adc	r27, r1
    5878:	2c 91       	ld	r18, X
    587a:	9f 5f       	subi	r25, 0xFF	; 255
    587c:	89 23       	and	r24, r25
    587e:	82 83       	std	Z+2, r24	; 0x02
    5880:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5884:	0b c0       	rjmp	.+22     	; 0x589c <__vector_37+0x6c>
    5886:	e9 ec       	ldi	r30, 0xC9	; 201
    5888:	f0 e0       	ldi	r31, 0x00	; 0
    588a:	80 81       	ld	r24, Z
    588c:	8f 7d       	andi	r24, 0xDF	; 223
    588e:	80 83       	st	Z, r24
    5890:	05 c0       	rjmp	.+10     	; 0x589c <__vector_37+0x6c>
    5892:	e9 ec       	ldi	r30, 0xC9	; 201
    5894:	f0 e0       	ldi	r31, 0x00	; 0
    5896:	80 81       	ld	r24, Z
    5898:	8f 7d       	andi	r24, 0xDF	; 223
    589a:	80 83       	st	Z, r24
    589c:	ff 91       	pop	r31
    589e:	ef 91       	pop	r30
    58a0:	bf 91       	pop	r27
    58a2:	af 91       	pop	r26
    58a4:	9f 91       	pop	r25
    58a6:	8f 91       	pop	r24
    58a8:	2f 91       	pop	r18
    58aa:	0f 90       	pop	r0
    58ac:	0b be       	out	0x3b, r0	; 59
    58ae:	0f 90       	pop	r0
    58b0:	0f be       	out	0x3f, r0	; 63
    58b2:	0f 90       	pop	r0
    58b4:	1f 90       	pop	r1
    58b6:	18 95       	reti

000058b8 <__vector_51>:
    58b8:	1f 92       	push	r1
    58ba:	0f 92       	push	r0
    58bc:	0f b6       	in	r0, 0x3f	; 63
    58be:	0f 92       	push	r0
    58c0:	11 24       	eor	r1, r1
    58c2:	0b b6       	in	r0, 0x3b	; 59
    58c4:	0f 92       	push	r0
    58c6:	2f 93       	push	r18
    58c8:	3f 93       	push	r19
    58ca:	4f 93       	push	r20
    58cc:	5f 93       	push	r21
    58ce:	6f 93       	push	r22
    58d0:	7f 93       	push	r23
    58d2:	8f 93       	push	r24
    58d4:	9f 93       	push	r25
    58d6:	af 93       	push	r26
    58d8:	bf 93       	push	r27
    58da:	cf 93       	push	r28
    58dc:	df 93       	push	r29
    58de:	ef 93       	push	r30
    58e0:	ff 93       	push	r31
    58e2:	a0 91 01 16 	lds	r26, 0x1601	; 0x801601 <_ser_handle+0x4>
    58e6:	b0 91 02 16 	lds	r27, 0x1602	; 0x801602 <_ser_handle+0x5>
    58ea:	10 97       	sbiw	r26, 0x00	; 0
    58ec:	11 f1       	breq	.+68     	; 0x5932 <__vector_51+0x7a>
    58ee:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    58f2:	14 96       	adiw	r26, 0x04	; 4
    58f4:	ed 91       	ld	r30, X+
    58f6:	fc 91       	ld	r31, X
    58f8:	15 97       	sbiw	r26, 0x05	; 5
    58fa:	93 81       	ldd	r25, Z+3	; 0x03
    58fc:	82 81       	ldd	r24, Z+2	; 0x02
    58fe:	25 81       	ldd	r18, Z+5	; 0x05
    5900:	98 1b       	sub	r25, r24
    5902:	92 23       	and	r25, r18
    5904:	84 81       	ldd	r24, Z+4	; 0x04
    5906:	98 17       	cp	r25, r24
    5908:	61 f0       	breq	.+24     	; 0x5922 <__vector_51+0x6a>
    590a:	83 81       	ldd	r24, Z+3	; 0x03
    590c:	26 95       	lsr	r18
    590e:	28 23       	and	r18, r24
    5910:	c0 81       	ld	r28, Z
    5912:	d1 81       	ldd	r29, Z+1	; 0x01
    5914:	c2 0f       	add	r28, r18
    5916:	d1 1d       	adc	r29, r1
    5918:	68 83       	st	Y, r22
    591a:	8f 5f       	subi	r24, 0xFF	; 255
    591c:	95 81       	ldd	r25, Z+5	; 0x05
    591e:	89 23       	and	r24, r25
    5920:	83 83       	std	Z+3, r24	; 0x03
    5922:	16 96       	adiw	r26, 0x06	; 6
    5924:	ed 91       	ld	r30, X+
    5926:	fc 91       	ld	r31, X
    5928:	17 97       	sbiw	r26, 0x07	; 7
    592a:	30 97       	sbiw	r30, 0x00	; 0
    592c:	11 f0       	breq	.+4      	; 0x5932 <__vector_51+0x7a>
    592e:	cd 01       	movw	r24, r26
    5930:	19 95       	eicall
    5932:	ff 91       	pop	r31
    5934:	ef 91       	pop	r30
    5936:	df 91       	pop	r29
    5938:	cf 91       	pop	r28
    593a:	bf 91       	pop	r27
    593c:	af 91       	pop	r26
    593e:	9f 91       	pop	r25
    5940:	8f 91       	pop	r24
    5942:	7f 91       	pop	r23
    5944:	6f 91       	pop	r22
    5946:	5f 91       	pop	r21
    5948:	4f 91       	pop	r20
    594a:	3f 91       	pop	r19
    594c:	2f 91       	pop	r18
    594e:	0f 90       	pop	r0
    5950:	0b be       	out	0x3b, r0	; 59
    5952:	0f 90       	pop	r0
    5954:	0f be       	out	0x3f, r0	; 63
    5956:	0f 90       	pop	r0
    5958:	1f 90       	pop	r1
    595a:	18 95       	reti

0000595c <__vector_52>:
    595c:	1f 92       	push	r1
    595e:	0f 92       	push	r0
    5960:	0f b6       	in	r0, 0x3f	; 63
    5962:	0f 92       	push	r0
    5964:	11 24       	eor	r1, r1
    5966:	0b b6       	in	r0, 0x3b	; 59
    5968:	0f 92       	push	r0
    596a:	2f 93       	push	r18
    596c:	8f 93       	push	r24
    596e:	9f 93       	push	r25
    5970:	af 93       	push	r26
    5972:	bf 93       	push	r27
    5974:	ef 93       	push	r30
    5976:	ff 93       	push	r31
    5978:	e0 91 01 16 	lds	r30, 0x1601	; 0x801601 <_ser_handle+0x4>
    597c:	f0 91 02 16 	lds	r31, 0x1602	; 0x801602 <_ser_handle+0x5>
    5980:	30 97       	sbiw	r30, 0x00	; 0
    5982:	b9 f0       	breq	.+46     	; 0x59b2 <__vector_52+0x56>
    5984:	02 80       	ldd	r0, Z+2	; 0x02
    5986:	f3 81       	ldd	r31, Z+3	; 0x03
    5988:	e0 2d       	mov	r30, r0
    598a:	93 81       	ldd	r25, Z+3	; 0x03
    598c:	82 81       	ldd	r24, Z+2	; 0x02
    598e:	98 17       	cp	r25, r24
    5990:	b1 f0       	breq	.+44     	; 0x59be <__vector_52+0x62>
    5992:	92 81       	ldd	r25, Z+2	; 0x02
    5994:	85 81       	ldd	r24, Z+5	; 0x05
    5996:	28 2f       	mov	r18, r24
    5998:	26 95       	lsr	r18
    599a:	29 23       	and	r18, r25
    599c:	a0 81       	ld	r26, Z
    599e:	b1 81       	ldd	r27, Z+1	; 0x01
    59a0:	a2 0f       	add	r26, r18
    59a2:	b1 1d       	adc	r27, r1
    59a4:	2c 91       	ld	r18, X
    59a6:	9f 5f       	subi	r25, 0xFF	; 255
    59a8:	89 23       	and	r24, r25
    59aa:	82 83       	std	Z+2, r24	; 0x02
    59ac:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    59b0:	0b c0       	rjmp	.+22     	; 0x59c8 <__vector_52+0x6c>
    59b2:	e1 ed       	ldi	r30, 0xD1	; 209
    59b4:	f0 e0       	ldi	r31, 0x00	; 0
    59b6:	80 81       	ld	r24, Z
    59b8:	8f 7d       	andi	r24, 0xDF	; 223
    59ba:	80 83       	st	Z, r24
    59bc:	05 c0       	rjmp	.+10     	; 0x59c8 <__vector_52+0x6c>
    59be:	e1 ed       	ldi	r30, 0xD1	; 209
    59c0:	f0 e0       	ldi	r31, 0x00	; 0
    59c2:	80 81       	ld	r24, Z
    59c4:	8f 7d       	andi	r24, 0xDF	; 223
    59c6:	80 83       	st	Z, r24
    59c8:	ff 91       	pop	r31
    59ca:	ef 91       	pop	r30
    59cc:	bf 91       	pop	r27
    59ce:	af 91       	pop	r26
    59d0:	9f 91       	pop	r25
    59d2:	8f 91       	pop	r24
    59d4:	2f 91       	pop	r18
    59d6:	0f 90       	pop	r0
    59d8:	0b be       	out	0x3b, r0	; 59
    59da:	0f 90       	pop	r0
    59dc:	0f be       	out	0x3f, r0	; 63
    59de:	0f 90       	pop	r0
    59e0:	1f 90       	pop	r1
    59e2:	18 95       	reti

000059e4 <__vector_54>:
    59e4:	1f 92       	push	r1
    59e6:	0f 92       	push	r0
    59e8:	0f b6       	in	r0, 0x3f	; 63
    59ea:	0f 92       	push	r0
    59ec:	11 24       	eor	r1, r1
    59ee:	0b b6       	in	r0, 0x3b	; 59
    59f0:	0f 92       	push	r0
    59f2:	2f 93       	push	r18
    59f4:	3f 93       	push	r19
    59f6:	4f 93       	push	r20
    59f8:	5f 93       	push	r21
    59fa:	6f 93       	push	r22
    59fc:	7f 93       	push	r23
    59fe:	8f 93       	push	r24
    5a00:	9f 93       	push	r25
    5a02:	af 93       	push	r26
    5a04:	bf 93       	push	r27
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	ef 93       	push	r30
    5a0c:	ff 93       	push	r31
    5a0e:	a0 91 03 16 	lds	r26, 0x1603	; 0x801603 <_ser_handle+0x6>
    5a12:	b0 91 04 16 	lds	r27, 0x1604	; 0x801604 <_ser_handle+0x7>
    5a16:	10 97       	sbiw	r26, 0x00	; 0
    5a18:	11 f1       	breq	.+68     	; 0x5a5e <__vector_54+0x7a>
    5a1a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5a1e:	14 96       	adiw	r26, 0x04	; 4
    5a20:	ed 91       	ld	r30, X+
    5a22:	fc 91       	ld	r31, X
    5a24:	15 97       	sbiw	r26, 0x05	; 5
    5a26:	93 81       	ldd	r25, Z+3	; 0x03
    5a28:	82 81       	ldd	r24, Z+2	; 0x02
    5a2a:	25 81       	ldd	r18, Z+5	; 0x05
    5a2c:	98 1b       	sub	r25, r24
    5a2e:	92 23       	and	r25, r18
    5a30:	84 81       	ldd	r24, Z+4	; 0x04
    5a32:	98 17       	cp	r25, r24
    5a34:	61 f0       	breq	.+24     	; 0x5a4e <__vector_54+0x6a>
    5a36:	83 81       	ldd	r24, Z+3	; 0x03
    5a38:	26 95       	lsr	r18
    5a3a:	28 23       	and	r18, r24
    5a3c:	c0 81       	ld	r28, Z
    5a3e:	d1 81       	ldd	r29, Z+1	; 0x01
    5a40:	c2 0f       	add	r28, r18
    5a42:	d1 1d       	adc	r29, r1
    5a44:	68 83       	st	Y, r22
    5a46:	8f 5f       	subi	r24, 0xFF	; 255
    5a48:	95 81       	ldd	r25, Z+5	; 0x05
    5a4a:	89 23       	and	r24, r25
    5a4c:	83 83       	std	Z+3, r24	; 0x03
    5a4e:	16 96       	adiw	r26, 0x06	; 6
    5a50:	ed 91       	ld	r30, X+
    5a52:	fc 91       	ld	r31, X
    5a54:	17 97       	sbiw	r26, 0x07	; 7
    5a56:	30 97       	sbiw	r30, 0x00	; 0
    5a58:	11 f0       	breq	.+4      	; 0x5a5e <__vector_54+0x7a>
    5a5a:	cd 01       	movw	r24, r26
    5a5c:	19 95       	eicall
    5a5e:	ff 91       	pop	r31
    5a60:	ef 91       	pop	r30
    5a62:	df 91       	pop	r29
    5a64:	cf 91       	pop	r28
    5a66:	bf 91       	pop	r27
    5a68:	af 91       	pop	r26
    5a6a:	9f 91       	pop	r25
    5a6c:	8f 91       	pop	r24
    5a6e:	7f 91       	pop	r23
    5a70:	6f 91       	pop	r22
    5a72:	5f 91       	pop	r21
    5a74:	4f 91       	pop	r20
    5a76:	3f 91       	pop	r19
    5a78:	2f 91       	pop	r18
    5a7a:	0f 90       	pop	r0
    5a7c:	0b be       	out	0x3b, r0	; 59
    5a7e:	0f 90       	pop	r0
    5a80:	0f be       	out	0x3f, r0	; 63
    5a82:	0f 90       	pop	r0
    5a84:	1f 90       	pop	r1
    5a86:	18 95       	reti

00005a88 <__vector_55>:
    5a88:	1f 92       	push	r1
    5a8a:	0f 92       	push	r0
    5a8c:	0f b6       	in	r0, 0x3f	; 63
    5a8e:	0f 92       	push	r0
    5a90:	11 24       	eor	r1, r1
    5a92:	0b b6       	in	r0, 0x3b	; 59
    5a94:	0f 92       	push	r0
    5a96:	2f 93       	push	r18
    5a98:	8f 93       	push	r24
    5a9a:	9f 93       	push	r25
    5a9c:	af 93       	push	r26
    5a9e:	bf 93       	push	r27
    5aa0:	ef 93       	push	r30
    5aa2:	ff 93       	push	r31
    5aa4:	e0 91 03 16 	lds	r30, 0x1603	; 0x801603 <_ser_handle+0x6>
    5aa8:	f0 91 04 16 	lds	r31, 0x1604	; 0x801604 <_ser_handle+0x7>
    5aac:	30 97       	sbiw	r30, 0x00	; 0
    5aae:	b9 f0       	breq	.+46     	; 0x5ade <__vector_55+0x56>
    5ab0:	02 80       	ldd	r0, Z+2	; 0x02
    5ab2:	f3 81       	ldd	r31, Z+3	; 0x03
    5ab4:	e0 2d       	mov	r30, r0
    5ab6:	93 81       	ldd	r25, Z+3	; 0x03
    5ab8:	82 81       	ldd	r24, Z+2	; 0x02
    5aba:	98 17       	cp	r25, r24
    5abc:	b1 f0       	breq	.+44     	; 0x5aea <__vector_55+0x62>
    5abe:	92 81       	ldd	r25, Z+2	; 0x02
    5ac0:	85 81       	ldd	r24, Z+5	; 0x05
    5ac2:	28 2f       	mov	r18, r24
    5ac4:	26 95       	lsr	r18
    5ac6:	29 23       	and	r18, r25
    5ac8:	a0 81       	ld	r26, Z
    5aca:	b1 81       	ldd	r27, Z+1	; 0x01
    5acc:	a2 0f       	add	r26, r18
    5ace:	b1 1d       	adc	r27, r1
    5ad0:	2c 91       	ld	r18, X
    5ad2:	9f 5f       	subi	r25, 0xFF	; 255
    5ad4:	89 23       	and	r24, r25
    5ad6:	82 83       	std	Z+2, r24	; 0x02
    5ad8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5adc:	0b c0       	rjmp	.+22     	; 0x5af4 <__vector_55+0x6c>
    5ade:	e1 e3       	ldi	r30, 0x31	; 49
    5ae0:	f1 e0       	ldi	r31, 0x01	; 1
    5ae2:	80 81       	ld	r24, Z
    5ae4:	8f 7d       	andi	r24, 0xDF	; 223
    5ae6:	80 83       	st	Z, r24
    5ae8:	05 c0       	rjmp	.+10     	; 0x5af4 <__vector_55+0x6c>
    5aea:	e1 e3       	ldi	r30, 0x31	; 49
    5aec:	f1 e0       	ldi	r31, 0x01	; 1
    5aee:	80 81       	ld	r24, Z
    5af0:	8f 7d       	andi	r24, 0xDF	; 223
    5af2:	80 83       	st	Z, r24
    5af4:	ff 91       	pop	r31
    5af6:	ef 91       	pop	r30
    5af8:	bf 91       	pop	r27
    5afa:	af 91       	pop	r26
    5afc:	9f 91       	pop	r25
    5afe:	8f 91       	pop	r24
    5b00:	2f 91       	pop	r18
    5b02:	0f 90       	pop	r0
    5b04:	0b be       	out	0x3b, r0	; 59
    5b06:	0f 90       	pop	r0
    5b08:	0f be       	out	0x3f, r0	; 63
    5b0a:	0f 90       	pop	r0
    5b0c:	1f 90       	pop	r1
    5b0e:	18 95       	reti

00005b10 <usart_getchar>:
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	1f 92       	push	r1
    5b16:	cd b7       	in	r28, 0x3d	; 61
    5b18:	de b7       	in	r29, 0x3e	; 62
    5b1a:	be 01       	movw	r22, r28
    5b1c:	6f 5f       	subi	r22, 0xFF	; 255
    5b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b20:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <_com_serial_instance>
    5b24:	90 91 06 16 	lds	r25, 0x1606	; 0x801606 <_com_serial_instance+0x1>
    5b28:	7b dd       	rcall	.-1290   	; 0x5620 <serial_getByte>
    5b2a:	81 11       	cpse	r24, r1
    5b2c:	f6 cf       	rjmp	.-20     	; 0x5b1a <usart_getchar+0xa>
    5b2e:	89 81       	ldd	r24, Y+1	; 0x01
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	0f 90       	pop	r0
    5b34:	df 91       	pop	r29
    5b36:	cf 91       	pop	r28
    5b38:	08 95       	ret

00005b3a <usart_putchar>:
    5b3a:	68 2f       	mov	r22, r24
    5b3c:	80 91 05 16 	lds	r24, 0x1605	; 0x801605 <_com_serial_instance>
    5b40:	90 91 06 16 	lds	r25, 0x1606	; 0x801606 <_com_serial_instance+0x1>
    5b44:	ed dc       	rcall	.-1574   	; 0x5520 <serial_sendByte>
    5b46:	80 e0       	ldi	r24, 0x00	; 0
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	08 95       	ret

00005b4c <stdio_initialise>:
    5b4c:	8f 92       	push	r8
    5b4e:	9f 92       	push	r9
    5b50:	af 92       	push	r10
    5b52:	cf 92       	push	r12
    5b54:	ef 92       	push	r14
    5b56:	0f 93       	push	r16
    5b58:	81 2c       	mov	r8, r1
    5b5a:	91 2c       	mov	r9, r1
    5b5c:	68 94       	set
    5b5e:	aa 24       	eor	r10, r10
    5b60:	a7 f8       	bld	r10, 7
    5b62:	68 94       	set
    5b64:	cc 24       	eor	r12, r12
    5b66:	c7 f8       	bld	r12, 7
    5b68:	e1 2c       	mov	r14, r1
    5b6a:	00 e0       	ldi	r16, 0x00	; 0
    5b6c:	23 e0       	ldi	r18, 0x03	; 3
    5b6e:	40 e0       	ldi	r20, 0x00	; 0
    5b70:	51 ee       	ldi	r21, 0xE1	; 225
    5b72:	60 e0       	ldi	r22, 0x00	; 0
    5b74:	70 e0       	ldi	r23, 0x00	; 0
    5b76:	31 dc       	rcall	.-1950   	; 0x53da <serial_create>
    5b78:	90 93 06 16 	sts	0x1606, r25	; 0x801606 <_com_serial_instance+0x1>
    5b7c:	80 93 05 16 	sts	0x1605, r24	; 0x801605 <_com_serial_instance>
    5b80:	e1 e4       	ldi	r30, 0x41	; 65
    5b82:	f6 e1       	ldi	r31, 0x16	; 22
    5b84:	83 e1       	ldi	r24, 0x13	; 19
    5b86:	92 e0       	ldi	r25, 0x02	; 2
    5b88:	91 83       	std	Z+1, r25	; 0x01
    5b8a:	80 83       	st	Z, r24
    5b8c:	93 83       	std	Z+3, r25	; 0x03
    5b8e:	82 83       	std	Z+2, r24	; 0x02
    5b90:	0f 91       	pop	r16
    5b92:	ef 90       	pop	r14
    5b94:	cf 90       	pop	r12
    5b96:	af 90       	pop	r10
    5b98:	9f 90       	pop	r9
    5b9a:	8f 90       	pop	r8
    5b9c:	08 95       	ret

00005b9e <_callBack>:
    5b9e:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <_callBackFunction>
    5ba2:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <_callBackFunction+0x1>
    5ba6:	30 97       	sbiw	r30, 0x00	; 0
    5ba8:	09 f0       	breq	.+2      	; 0x5bac <_callBack+0xe>
    5baa:	19 95       	eicall
    5bac:	08 95       	ret

00005bae <_tsl2591TwiCallback>:
    5bae:	64 50       	subi	r22, 0x04	; 4
    5bb0:	62 30       	cpi	r22, 0x02	; 2
    5bb2:	08 f0       	brcs	.+2      	; 0x5bb6 <_tsl2591TwiCallback+0x8>
    5bb4:	3b c0       	rjmp	.+118    	; 0x5c2c <_tsl2591TwiCallback+0x7e>
    5bb6:	20 91 0e 16 	lds	r18, 0x160E	; 0x80160e <_nextState>
    5bba:	22 30       	cpi	r18, 0x02	; 2
    5bbc:	79 f0       	breq	.+30     	; 0x5bdc <_tsl2591TwiCallback+0x2e>
    5bbe:	18 f4       	brcc	.+6      	; 0x5bc6 <_tsl2591TwiCallback+0x18>
    5bc0:	21 30       	cpi	r18, 0x01	; 1
    5bc2:	31 f0       	breq	.+12     	; 0x5bd0 <_tsl2591TwiCallback+0x22>
    5bc4:	30 c0       	rjmp	.+96     	; 0x5c26 <_tsl2591TwiCallback+0x78>
    5bc6:	23 30       	cpi	r18, 0x03	; 3
    5bc8:	81 f0       	breq	.+32     	; 0x5bea <_tsl2591TwiCallback+0x3c>
    5bca:	24 30       	cpi	r18, 0x04	; 4
    5bcc:	a1 f0       	breq	.+40     	; 0x5bf6 <_tsl2591TwiCallback+0x48>
    5bce:	2b c0       	rjmp	.+86     	; 0x5c26 <_tsl2591TwiCallback+0x78>
    5bd0:	22 e0       	ldi	r18, 0x02	; 2
    5bd2:	20 93 0e 16 	sts	0x160E, r18	; 0x80160e <_nextState>
    5bd6:	61 e0       	ldi	r22, 0x01	; 1
    5bd8:	10 c2       	rjmp	.+1056   	; 0x5ffa <twiReceive>
    5bda:	08 95       	ret
    5bdc:	fa 01       	movw	r30, r20
    5bde:	80 81       	ld	r24, Z
    5be0:	80 93 0b 16 	sts	0x160B, r24	; 0x80160b <_deviceId>
    5be4:	82 e0       	ldi	r24, 0x02	; 2
    5be6:	db cf       	rjmp	.-74     	; 0x5b9e <_callBack>
    5be8:	08 95       	ret
    5bea:	24 e0       	ldi	r18, 0x04	; 4
    5bec:	20 93 0e 16 	sts	0x160E, r18	; 0x80160e <_nextState>
    5bf0:	64 e0       	ldi	r22, 0x04	; 4
    5bf2:	03 c2       	rjmp	.+1030   	; 0x5ffa <twiReceive>
    5bf4:	08 95       	ret
    5bf6:	fa 01       	movw	r30, r20
    5bf8:	81 81       	ldd	r24, Z+1	; 0x01
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	98 2f       	mov	r25, r24
    5bfe:	88 27       	eor	r24, r24
    5c00:	20 81       	ld	r18, Z
    5c02:	82 2b       	or	r24, r18
    5c04:	90 93 0a 16 	sts	0x160A, r25	; 0x80160a <_fullSpectrumRaw+0x1>
    5c08:	80 93 09 16 	sts	0x1609, r24	; 0x801609 <_fullSpectrumRaw>
    5c0c:	83 81       	ldd	r24, Z+3	; 0x03
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	98 2f       	mov	r25, r24
    5c12:	88 27       	eor	r24, r24
    5c14:	22 81       	ldd	r18, Z+2	; 0x02
    5c16:	82 2b       	or	r24, r18
    5c18:	90 93 08 16 	sts	0x1608, r25	; 0x801608 <_infraredRaw+0x1>
    5c1c:	80 93 07 16 	sts	0x1607, r24	; 0x801607 <_infraredRaw>
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	bd cf       	rjmp	.-134    	; 0x5b9e <_callBack>
    5c24:	08 95       	ret
    5c26:	80 e0       	ldi	r24, 0x00	; 0
    5c28:	ba cf       	rjmp	.-140    	; 0x5b9e <_callBack>
    5c2a:	08 95       	ret
    5c2c:	10 92 0e 16 	sts	0x160E, r1	; 0x80160e <_nextState>
    5c30:	86 e0       	ldi	r24, 0x06	; 6
    5c32:	b5 cf       	rjmp	.-150    	; 0x5b9e <_callBack>
    5c34:	08 95       	ret

00005c36 <_twiTransmit>:
    5c36:	20 91 11 16 	lds	r18, 0x1611	; 0x801611 <_twiHandler>
    5c3a:	30 91 12 16 	lds	r19, 0x1612	; 0x801612 <_twiHandler+0x1>
    5c3e:	21 15       	cp	r18, r1
    5c40:	31 05       	cpc	r19, r1
    5c42:	41 f0       	breq	.+16     	; 0x5c54 <_twiTransmit+0x1e>
    5c44:	46 2f       	mov	r20, r22
    5c46:	bc 01       	movw	r22, r24
    5c48:	c9 01       	movw	r24, r18
    5c4a:	8b d1       	rcall	.+790    	; 0x5f62 <twiTransmit>
    5c4c:	82 30       	cpi	r24, 0x02	; 2
    5c4e:	21 f0       	breq	.+8      	; 0x5c58 <_twiTransmit+0x22>
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	08 95       	ret
    5c54:	87 e0       	ldi	r24, 0x07	; 7
    5c56:	08 95       	ret
    5c58:	85 e0       	ldi	r24, 0x05	; 5
    5c5a:	08 95       	ret

00005c5c <tsl2591_initialise>:
    5c5c:	0f 93       	push	r16
    5c5e:	1f 93       	push	r17
    5c60:	90 93 10 16 	sts	0x1610, r25	; 0x801610 <_callBackFunction+0x1>
    5c64:	80 93 0f 16 	sts	0x160F, r24	; 0x80160f <_callBackFunction>
    5c68:	07 ed       	ldi	r16, 0xD7	; 215
    5c6a:	1d e2       	ldi	r17, 0x2D	; 45
    5c6c:	20 e0       	ldi	r18, 0x00	; 0
    5c6e:	34 e2       	ldi	r19, 0x24	; 36
    5c70:	44 ef       	ldi	r20, 0xF4	; 244
    5c72:	50 e0       	ldi	r21, 0x00	; 0
    5c74:	60 e0       	ldi	r22, 0x00	; 0
    5c76:	89 e2       	ldi	r24, 0x29	; 41
    5c78:	23 d1       	rcall	.+582    	; 0x5ec0 <twiCreate>
    5c7a:	90 93 12 16 	sts	0x1612, r25	; 0x801612 <_twiHandler+0x1>
    5c7e:	80 93 11 16 	sts	0x1611, r24	; 0x801611 <_twiHandler>
    5c82:	89 2b       	or	r24, r25
    5c84:	11 f0       	breq	.+4      	; 0x5c8a <tsl2591_initialise+0x2e>
    5c86:	80 e0       	ldi	r24, 0x00	; 0
    5c88:	01 c0       	rjmp	.+2      	; 0x5c8c <tsl2591_initialise+0x30>
    5c8a:	88 e0       	ldi	r24, 0x08	; 8
    5c8c:	1f 91       	pop	r17
    5c8e:	0f 91       	pop	r16
    5c90:	08 95       	ret

00005c92 <tsl2591_enable>:
    5c92:	cf 93       	push	r28
    5c94:	df 93       	push	r29
    5c96:	1f 92       	push	r1
    5c98:	1f 92       	push	r1
    5c9a:	cd b7       	in	r28, 0x3d	; 61
    5c9c:	de b7       	in	r29, 0x3e	; 62
    5c9e:	80 ea       	ldi	r24, 0xA0	; 160
    5ca0:	89 83       	std	Y+1, r24	; 0x01
    5ca2:	83 e0       	ldi	r24, 0x03	; 3
    5ca4:	8a 83       	std	Y+2, r24	; 0x02
    5ca6:	10 92 0e 16 	sts	0x160E, r1	; 0x80160e <_nextState>
    5caa:	62 e0       	ldi	r22, 0x02	; 2
    5cac:	ce 01       	movw	r24, r28
    5cae:	01 96       	adiw	r24, 0x01	; 1
    5cb0:	c2 df       	rcall	.-124    	; 0x5c36 <_twiTransmit>
    5cb2:	0f 90       	pop	r0
    5cb4:	0f 90       	pop	r0
    5cb6:	df 91       	pop	r29
    5cb8:	cf 91       	pop	r28
    5cba:	08 95       	ret

00005cbc <tsl2591_fetchData>:
    5cbc:	cf 93       	push	r28
    5cbe:	df 93       	push	r29
    5cc0:	1f 92       	push	r1
    5cc2:	cd b7       	in	r28, 0x3d	; 61
    5cc4:	de b7       	in	r29, 0x3e	; 62
    5cc6:	84 eb       	ldi	r24, 0xB4	; 180
    5cc8:	89 83       	std	Y+1, r24	; 0x01
    5cca:	83 e0       	ldi	r24, 0x03	; 3
    5ccc:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <_nextState>
    5cd0:	61 e0       	ldi	r22, 0x01	; 1
    5cd2:	ce 01       	movw	r24, r28
    5cd4:	01 96       	adiw	r24, 0x01	; 1
    5cd6:	af df       	rcall	.-162    	; 0x5c36 <_twiTransmit>
    5cd8:	0f 90       	pop	r0
    5cda:	df 91       	pop	r29
    5cdc:	cf 91       	pop	r28
    5cde:	08 95       	ret

00005ce0 <tsl2591_getLux>:
    5ce0:	2f 92       	push	r2
    5ce2:	3f 92       	push	r3
    5ce4:	4f 92       	push	r4
    5ce6:	5f 92       	push	r5
    5ce8:	6f 92       	push	r6
    5cea:	7f 92       	push	r7
    5cec:	8f 92       	push	r8
    5cee:	9f 92       	push	r9
    5cf0:	af 92       	push	r10
    5cf2:	bf 92       	push	r11
    5cf4:	cf 92       	push	r12
    5cf6:	df 92       	push	r13
    5cf8:	ef 92       	push	r14
    5cfa:	ff 92       	push	r15
    5cfc:	0f 93       	push	r16
    5cfe:	1f 93       	push	r17
    5d00:	cf 93       	push	r28
    5d02:	df 93       	push	r29
    5d04:	c0 91 07 16 	lds	r28, 0x1607	; 0x801607 <_infraredRaw>
    5d08:	d0 91 08 16 	lds	r29, 0x1608	; 0x801608 <_infraredRaw+0x1>
    5d0c:	cf 3f       	cpi	r28, 0xFF	; 255
    5d0e:	2f ef       	ldi	r18, 0xFF	; 255
    5d10:	d2 07       	cpc	r29, r18
    5d12:	41 f0       	breq	.+16     	; 0x5d24 <tsl2591_getLux+0x44>
    5d14:	60 91 09 16 	lds	r22, 0x1609	; 0x801609 <_fullSpectrumRaw>
    5d18:	70 91 0a 16 	lds	r23, 0x160A	; 0x80160a <_fullSpectrumRaw+0x1>
    5d1c:	6f 3f       	cpi	r22, 0xFF	; 255
    5d1e:	ef ef       	ldi	r30, 0xFF	; 255
    5d20:	7e 07       	cpc	r23, r30
    5d22:	59 f4       	brne	.+22     	; 0x5d3a <tsl2591_getLux+0x5a>
    5d24:	4f ef       	ldi	r20, 0xFF	; 255
    5d26:	5f ef       	ldi	r21, 0xFF	; 255
    5d28:	6f e7       	ldi	r22, 0x7F	; 127
    5d2a:	7f e7       	ldi	r23, 0x7F	; 127
    5d2c:	fc 01       	movw	r30, r24
    5d2e:	40 83       	st	Z, r20
    5d30:	51 83       	std	Z+1, r21	; 0x01
    5d32:	62 83       	std	Z+2, r22	; 0x02
    5d34:	73 83       	std	Z+3, r23	; 0x03
    5d36:	83 e0       	ldi	r24, 0x03	; 3
    5d38:	9f c0       	rjmp	.+318    	; 0x5e78 <tsl2591_getLux+0x198>
    5d3a:	1c 01       	movw	r2, r24
    5d3c:	80 e0       	ldi	r24, 0x00	; 0
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	62 d6       	rcall	.+3268   	; 0x6a06 <__floatunsisf>
    5d42:	2b 01       	movw	r4, r22
    5d44:	3c 01       	movw	r6, r24
    5d46:	be 01       	movw	r22, r28
    5d48:	80 e0       	ldi	r24, 0x00	; 0
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	5c d6       	rcall	.+3256   	; 0x6a06 <__floatunsisf>
    5d4e:	4b 01       	movw	r8, r22
    5d50:	5c 01       	movw	r10, r24
    5d52:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <_currentIntegrationTime>
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	01 96       	adiw	r24, 0x01	; 1
    5d5a:	24 e6       	ldi	r18, 0x64	; 100
    5d5c:	28 9f       	mul	r18, r24
    5d5e:	b0 01       	movw	r22, r0
    5d60:	29 9f       	mul	r18, r25
    5d62:	70 0d       	add	r23, r0
    5d64:	11 24       	eor	r1, r1
    5d66:	80 91 0d 16 	lds	r24, 0x160D	; 0x80160d <_currentGain>
    5d6a:	80 32       	cpi	r24, 0x20	; 32
    5d6c:	69 f0       	breq	.+26     	; 0x5d88 <tsl2591_getLux+0xa8>
    5d6e:	80 33       	cpi	r24, 0x30	; 48
    5d70:	a1 f0       	breq	.+40     	; 0x5d9a <tsl2591_getLux+0xba>
    5d72:	80 31       	cpi	r24, 0x10	; 16
    5d74:	e1 f4       	brne	.+56     	; 0x5dae <tsl2591_getLux+0xce>
    5d76:	0f 2e       	mov	r0, r31
    5d78:	c1 2c       	mov	r12, r1
    5d7a:	d1 2c       	mov	r13, r1
    5d7c:	f8 ec       	ldi	r31, 0xC8	; 200
    5d7e:	ef 2e       	mov	r14, r31
    5d80:	f1 e4       	ldi	r31, 0x41	; 65
    5d82:	ff 2e       	mov	r15, r31
    5d84:	f0 2d       	mov	r31, r0
    5d86:	1b c0       	rjmp	.+54     	; 0x5dbe <tsl2591_getLux+0xde>
    5d88:	0f 2e       	mov	r0, r31
    5d8a:	c1 2c       	mov	r12, r1
    5d8c:	d1 2c       	mov	r13, r1
    5d8e:	f6 ed       	ldi	r31, 0xD6	; 214
    5d90:	ef 2e       	mov	r14, r31
    5d92:	f3 e4       	ldi	r31, 0x43	; 67
    5d94:	ff 2e       	mov	r15, r31
    5d96:	f0 2d       	mov	r31, r0
    5d98:	12 c0       	rjmp	.+36     	; 0x5dbe <tsl2591_getLux+0xde>
    5d9a:	0f 2e       	mov	r0, r31
    5d9c:	c1 2c       	mov	r12, r1
    5d9e:	f0 e5       	ldi	r31, 0x50	; 80
    5da0:	df 2e       	mov	r13, r31
    5da2:	fa e1       	ldi	r31, 0x1A	; 26
    5da4:	ef 2e       	mov	r14, r31
    5da6:	f6 e4       	ldi	r31, 0x46	; 70
    5da8:	ff 2e       	mov	r15, r31
    5daa:	f0 2d       	mov	r31, r0
    5dac:	08 c0       	rjmp	.+16     	; 0x5dbe <tsl2591_getLux+0xde>
    5dae:	0f 2e       	mov	r0, r31
    5db0:	c1 2c       	mov	r12, r1
    5db2:	d1 2c       	mov	r13, r1
    5db4:	f0 e8       	ldi	r31, 0x80	; 128
    5db6:	ef 2e       	mov	r14, r31
    5db8:	ff e3       	ldi	r31, 0x3F	; 63
    5dba:	ff 2e       	mov	r15, r31
    5dbc:	f0 2d       	mov	r31, r0
    5dbe:	07 2e       	mov	r0, r23
    5dc0:	00 0c       	add	r0, r0
    5dc2:	88 0b       	sbc	r24, r24
    5dc4:	99 0b       	sbc	r25, r25
    5dc6:	21 d6       	rcall	.+3138   	; 0x6a0a <__floatsisf>
    5dc8:	a7 01       	movw	r20, r14
    5dca:	96 01       	movw	r18, r12
    5dcc:	0e 94 09 23 	call	0x4612	; 0x4612 <__mulsf3>
    5dd0:	20 e0       	ldi	r18, 0x00	; 0
    5dd2:	30 e0       	ldi	r19, 0x00	; 0
    5dd4:	4c ec       	ldi	r20, 0xCC	; 204
    5dd6:	53 e4       	ldi	r21, 0x43	; 67
    5dd8:	a5 d5       	rcall	.+2890   	; 0x6924 <__divsf3>
    5dda:	6b 01       	movw	r12, r22
    5ddc:	7c 01       	movw	r14, r24
    5dde:	25 e8       	ldi	r18, 0x85	; 133
    5de0:	3b ee       	ldi	r19, 0xEB	; 235
    5de2:	41 ed       	ldi	r20, 0xD1	; 209
    5de4:	5f e3       	ldi	r21, 0x3F	; 63
    5de6:	c5 01       	movw	r24, r10
    5de8:	b4 01       	movw	r22, r8
    5dea:	0e 94 09 23 	call	0x4612	; 0x4612 <__mulsf3>
    5dee:	9b 01       	movw	r18, r22
    5df0:	ac 01       	movw	r20, r24
    5df2:	c3 01       	movw	r24, r6
    5df4:	b2 01       	movw	r22, r4
    5df6:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__subsf3>
    5dfa:	a7 01       	movw	r20, r14
    5dfc:	96 01       	movw	r18, r12
    5dfe:	92 d5       	rcall	.+2852   	; 0x6924 <__divsf3>
    5e00:	16 2f       	mov	r17, r22
    5e02:	d7 2f       	mov	r29, r23
    5e04:	c8 2f       	mov	r28, r24
    5e06:	09 2f       	mov	r16, r25
    5e08:	2d e3       	ldi	r18, 0x3D	; 61
    5e0a:	3a e0       	ldi	r19, 0x0A	; 10
    5e0c:	47 e1       	ldi	r20, 0x17	; 23
    5e0e:	5f e3       	ldi	r21, 0x3F	; 63
    5e10:	c3 01       	movw	r24, r6
    5e12:	b2 01       	movw	r22, r4
    5e14:	0e 94 09 23 	call	0x4612	; 0x4612 <__mulsf3>
    5e18:	2b 01       	movw	r4, r22
    5e1a:	3c 01       	movw	r6, r24
    5e1c:	26 ef       	ldi	r18, 0xF6	; 246
    5e1e:	38 e2       	ldi	r19, 0x28	; 40
    5e20:	4c e5       	ldi	r20, 0x5C	; 92
    5e22:	5f e3       	ldi	r21, 0x3F	; 63
    5e24:	c5 01       	movw	r24, r10
    5e26:	b4 01       	movw	r22, r8
    5e28:	0e 94 09 23 	call	0x4612	; 0x4612 <__mulsf3>
    5e2c:	9b 01       	movw	r18, r22
    5e2e:	ac 01       	movw	r20, r24
    5e30:	c3 01       	movw	r24, r6
    5e32:	b2 01       	movw	r22, r4
    5e34:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__subsf3>
    5e38:	a7 01       	movw	r20, r14
    5e3a:	96 01       	movw	r18, r12
    5e3c:	73 d5       	rcall	.+2790   	; 0x6924 <__divsf3>
    5e3e:	c6 2e       	mov	r12, r22
    5e40:	d7 2e       	mov	r13, r23
    5e42:	e8 2e       	mov	r14, r24
    5e44:	f9 2e       	mov	r15, r25
    5e46:	26 2f       	mov	r18, r22
    5e48:	37 2f       	mov	r19, r23
    5e4a:	48 2f       	mov	r20, r24
    5e4c:	59 2f       	mov	r21, r25
    5e4e:	61 2f       	mov	r22, r17
    5e50:	7d 2f       	mov	r23, r29
    5e52:	8c 2f       	mov	r24, r28
    5e54:	90 2f       	mov	r25, r16
    5e56:	14 d6       	rcall	.+3112   	; 0x6a80 <__gesf2>
    5e58:	18 16       	cp	r1, r24
    5e5a:	24 f0       	brlt	.+8      	; 0x5e64 <tsl2591_getLux+0x184>
    5e5c:	1c 2d       	mov	r17, r12
    5e5e:	dd 2d       	mov	r29, r13
    5e60:	ce 2d       	mov	r28, r14
    5e62:	0f 2d       	mov	r16, r15
    5e64:	41 2f       	mov	r20, r17
    5e66:	5d 2f       	mov	r21, r29
    5e68:	6c 2f       	mov	r22, r28
    5e6a:	70 2f       	mov	r23, r16
    5e6c:	f1 01       	movw	r30, r2
    5e6e:	40 83       	st	Z, r20
    5e70:	51 83       	std	Z+1, r21	; 0x01
    5e72:	62 83       	std	Z+2, r22	; 0x02
    5e74:	73 83       	std	Z+3, r23	; 0x03
    5e76:	80 e0       	ldi	r24, 0x00	; 0
    5e78:	df 91       	pop	r29
    5e7a:	cf 91       	pop	r28
    5e7c:	1f 91       	pop	r17
    5e7e:	0f 91       	pop	r16
    5e80:	ff 90       	pop	r15
    5e82:	ef 90       	pop	r14
    5e84:	df 90       	pop	r13
    5e86:	cf 90       	pop	r12
    5e88:	bf 90       	pop	r11
    5e8a:	af 90       	pop	r10
    5e8c:	9f 90       	pop	r9
    5e8e:	8f 90       	pop	r8
    5e90:	7f 90       	pop	r7
    5e92:	6f 90       	pop	r6
    5e94:	5f 90       	pop	r5
    5e96:	4f 90       	pop	r4
    5e98:	3f 90       	pop	r3
    5e9a:	2f 90       	pop	r2
    5e9c:	08 95       	ret

00005e9e <_initTwiInterface>:
    5e9e:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <_twiIsInitiated>
    5ea2:	81 11       	cpse	r24, r1
    5ea4:	0c c0       	rjmp	.+24     	; 0x5ebe <_initTwiInterface+0x20>
    5ea6:	8c e0       	ldi	r24, 0x0C	; 12
    5ea8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5eac:	8f ef       	ldi	r24, 0xFF	; 255
    5eae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5eb2:	84 e0       	ldi	r24, 0x04	; 4
    5eb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    5eba:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <_twiIsInitiated>
    5ebe:	08 95       	ret

00005ec0 <twiCreate>:
    5ec0:	af 92       	push	r10
    5ec2:	bf 92       	push	r11
    5ec4:	cf 92       	push	r12
    5ec6:	df 92       	push	r13
    5ec8:	ef 92       	push	r14
    5eca:	ff 92       	push	r15
    5ecc:	0f 93       	push	r16
    5ece:	1f 93       	push	r17
    5ed0:	cf 93       	push	r28
    5ed2:	df 93       	push	r29
    5ed4:	a8 2e       	mov	r10, r24
    5ed6:	b6 2e       	mov	r11, r22
    5ed8:	69 01       	movw	r12, r18
    5eda:	7a 01       	movw	r14, r20
    5edc:	84 e0       	ldi	r24, 0x04	; 4
    5ede:	90 e0       	ldi	r25, 0x00	; 0
    5ee0:	4a d6       	rcall	.+3220   	; 0x6b76 <malloc>
    5ee2:	ec 01       	movw	r28, r24
    5ee4:	89 2b       	or	r24, r25
    5ee6:	61 f1       	breq	.+88     	; 0x5f40 <twiCreate+0x80>
    5ee8:	a8 82       	st	Y, r10
    5eea:	81 e0       	ldi	r24, 0x01	; 1
    5eec:	b8 12       	cpse	r11, r24
    5eee:	12 c0       	rjmp	.+36     	; 0x5f14 <twiCreate+0x54>
    5ef0:	c7 01       	movw	r24, r14
    5ef2:	b6 01       	movw	r22, r12
    5ef4:	20 ea       	ldi	r18, 0xA0	; 160
    5ef6:	36 e8       	ldi	r19, 0x86	; 134
    5ef8:	41 e0       	ldi	r20, 0x01	; 1
    5efa:	50 e0       	ldi	r21, 0x00	; 0
    5efc:	e9 d5       	rcall	.+3026   	; 0x6ad0 <__udivmodsi4>
    5efe:	da 01       	movw	r26, r20
    5f00:	c9 01       	movw	r24, r18
    5f02:	40 97       	sbiw	r24, 0x10	; 16
    5f04:	a1 09       	sbc	r26, r1
    5f06:	b1 09       	sbc	r27, r1
    5f08:	b6 95       	lsr	r27
    5f0a:	a7 95       	ror	r26
    5f0c:	97 95       	ror	r25
    5f0e:	87 95       	ror	r24
    5f10:	89 83       	std	Y+1, r24	; 0x01
    5f12:	11 c0       	rjmp	.+34     	; 0x5f36 <twiCreate+0x76>
    5f14:	c7 01       	movw	r24, r14
    5f16:	b6 01       	movw	r22, r12
    5f18:	20 e8       	ldi	r18, 0x80	; 128
    5f1a:	3a e1       	ldi	r19, 0x1A	; 26
    5f1c:	46 e0       	ldi	r20, 0x06	; 6
    5f1e:	50 e0       	ldi	r21, 0x00	; 0
    5f20:	d7 d5       	rcall	.+2990   	; 0x6ad0 <__udivmodsi4>
    5f22:	da 01       	movw	r26, r20
    5f24:	c9 01       	movw	r24, r18
    5f26:	40 97       	sbiw	r24, 0x10	; 16
    5f28:	a1 09       	sbc	r26, r1
    5f2a:	b1 09       	sbc	r27, r1
    5f2c:	b6 95       	lsr	r27
    5f2e:	a7 95       	ror	r26
    5f30:	97 95       	ror	r25
    5f32:	87 95       	ror	r24
    5f34:	89 83       	std	Y+1, r24	; 0x01
    5f36:	1b 83       	std	Y+3, r17	; 0x03
    5f38:	0a 83       	std	Y+2, r16	; 0x02
    5f3a:	8c 2f       	mov	r24, r28
    5f3c:	9d 2f       	mov	r25, r29
    5f3e:	02 c0       	rjmp	.+4      	; 0x5f44 <twiCreate+0x84>
    5f40:	80 e0       	ldi	r24, 0x00	; 0
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	df 91       	pop	r29
    5f46:	cf 91       	pop	r28
    5f48:	1f 91       	pop	r17
    5f4a:	0f 91       	pop	r16
    5f4c:	ff 90       	pop	r15
    5f4e:	ef 90       	pop	r14
    5f50:	df 90       	pop	r13
    5f52:	cf 90       	pop	r12
    5f54:	bf 90       	pop	r11
    5f56:	af 90       	pop	r10
    5f58:	08 95       	ret

00005f5a <twiIsBusy>:
    5f5a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f5e:	81 70       	andi	r24, 0x01	; 1
    5f60:	08 95       	ret

00005f62 <twiTransmit>:
    5f62:	ff 92       	push	r15
    5f64:	0f 93       	push	r16
    5f66:	1f 93       	push	r17
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	00 97       	sbiw	r24, 0x00	; 0
    5f6e:	d1 f1       	breq	.+116    	; 0x5fe4 <twiTransmit+0x82>
    5f70:	4a 30       	cpi	r20, 0x0A	; 10
    5f72:	d0 f5       	brcc	.+116    	; 0x5fe8 <twiTransmit+0x86>
    5f74:	f4 2e       	mov	r15, r20
    5f76:	8b 01       	movw	r16, r22
    5f78:	ec 01       	movw	r28, r24
    5f7a:	ef df       	rcall	.-34     	; 0x5f5a <twiIsBusy>
    5f7c:	81 11       	cpse	r24, r1
    5f7e:	36 c0       	rjmp	.+108    	; 0x5fec <twiTransmit+0x8a>
    5f80:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <_twiCurrentHandler>
    5f84:	90 91 15 16 	lds	r25, 0x1615	; 0x801615 <_twiCurrentHandler+0x1>
    5f88:	c8 17       	cp	r28, r24
    5f8a:	d9 07       	cpc	r29, r25
    5f8c:	41 f0       	breq	.+16     	; 0x5f9e <twiTransmit+0x3c>
    5f8e:	87 df       	rcall	.-242    	; 0x5e9e <_initTwiInterface>
    5f90:	89 81       	ldd	r24, Y+1	; 0x01
    5f92:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5f96:	d0 93 15 16 	sts	0x1615, r29	; 0x801615 <_twiCurrentHandler+0x1>
    5f9a:	c0 93 14 16 	sts	0x1614, r28	; 0x801614 <_twiCurrentHandler>
    5f9e:	81 e0       	ldi	r24, 0x01	; 1
    5fa0:	8f 0d       	add	r24, r15
    5fa2:	80 93 16 16 	sts	0x1616, r24	; 0x801616 <_twiMessageLen>
    5fa6:	88 81       	ld	r24, Y
    5fa8:	88 0f       	add	r24, r24
    5faa:	80 93 17 16 	sts	0x1617, r24	; 0x801617 <_twiMessageBuffer>
    5fae:	ff 20       	and	r15, r15
    5fb0:	89 f0       	breq	.+34     	; 0x5fd4 <twiTransmit+0x72>
    5fb2:	f8 01       	movw	r30, r16
    5fb4:	a8 e1       	ldi	r26, 0x18	; 24
    5fb6:	b6 e1       	ldi	r27, 0x16	; 22
    5fb8:	4f ef       	ldi	r20, 0xFF	; 255
    5fba:	4f 0d       	add	r20, r15
    5fbc:	64 2f       	mov	r22, r20
    5fbe:	70 e0       	ldi	r23, 0x00	; 0
    5fc0:	cb 01       	movw	r24, r22
    5fc2:	01 96       	adiw	r24, 0x01	; 1
    5fc4:	b8 01       	movw	r22, r16
    5fc6:	68 0f       	add	r22, r24
    5fc8:	79 1f       	adc	r23, r25
    5fca:	81 91       	ld	r24, Z+
    5fcc:	8d 93       	st	X+, r24
    5fce:	e6 17       	cp	r30, r22
    5fd0:	f7 07       	cpc	r31, r23
    5fd2:	d9 f7       	brne	.-10     	; 0x5fca <twiTransmit+0x68>
    5fd4:	88 ef       	ldi	r24, 0xF8	; 248
    5fd6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5fda:	85 ea       	ldi	r24, 0xA5	; 165
    5fdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fe0:	84 e0       	ldi	r24, 0x04	; 4
    5fe2:	05 c0       	rjmp	.+10     	; 0x5fee <twiTransmit+0x8c>
    5fe4:	86 e0       	ldi	r24, 0x06	; 6
    5fe6:	03 c0       	rjmp	.+6      	; 0x5fee <twiTransmit+0x8c>
    5fe8:	87 e0       	ldi	r24, 0x07	; 7
    5fea:	01 c0       	rjmp	.+2      	; 0x5fee <twiTransmit+0x8c>
    5fec:	82 e0       	ldi	r24, 0x02	; 2
    5fee:	df 91       	pop	r29
    5ff0:	cf 91       	pop	r28
    5ff2:	1f 91       	pop	r17
    5ff4:	0f 91       	pop	r16
    5ff6:	ff 90       	pop	r15
    5ff8:	08 95       	ret

00005ffa <twiReceive>:
    5ffa:	1f 93       	push	r17
    5ffc:	cf 93       	push	r28
    5ffe:	df 93       	push	r29
    6000:	00 97       	sbiw	r24, 0x00	; 0
    6002:	29 f1       	breq	.+74     	; 0x604e <twiReceive+0x54>
    6004:	6b 30       	cpi	r22, 0x0B	; 11
    6006:	28 f5       	brcc	.+74     	; 0x6052 <twiReceive+0x58>
    6008:	16 2f       	mov	r17, r22
    600a:	ec 01       	movw	r28, r24
    600c:	a6 df       	rcall	.-180    	; 0x5f5a <twiIsBusy>
    600e:	81 11       	cpse	r24, r1
    6010:	22 c0       	rjmp	.+68     	; 0x6056 <twiReceive+0x5c>
    6012:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <_twiCurrentHandler>
    6016:	90 91 15 16 	lds	r25, 0x1615	; 0x801615 <_twiCurrentHandler+0x1>
    601a:	c8 17       	cp	r28, r24
    601c:	d9 07       	cpc	r29, r25
    601e:	41 f0       	breq	.+16     	; 0x6030 <twiReceive+0x36>
    6020:	3e df       	rcall	.-388    	; 0x5e9e <_initTwiInterface>
    6022:	89 81       	ldd	r24, Y+1	; 0x01
    6024:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    6028:	d0 93 15 16 	sts	0x1615, r29	; 0x801615 <_twiCurrentHandler+0x1>
    602c:	c0 93 14 16 	sts	0x1614, r28	; 0x801614 <_twiCurrentHandler>
    6030:	10 93 16 16 	sts	0x1616, r17	; 0x801616 <_twiMessageLen>
    6034:	88 81       	ld	r24, Y
    6036:	88 0f       	add	r24, r24
    6038:	81 60       	ori	r24, 0x01	; 1
    603a:	80 93 17 16 	sts	0x1617, r24	; 0x801617 <_twiMessageBuffer>
    603e:	88 ef       	ldi	r24, 0xF8	; 248
    6040:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6044:	85 ea       	ldi	r24, 0xA5	; 165
    6046:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    604a:	85 e0       	ldi	r24, 0x05	; 5
    604c:	05 c0       	rjmp	.+10     	; 0x6058 <twiReceive+0x5e>
    604e:	86 e0       	ldi	r24, 0x06	; 6
    6050:	03 c0       	rjmp	.+6      	; 0x6058 <twiReceive+0x5e>
    6052:	87 e0       	ldi	r24, 0x07	; 7
    6054:	01 c0       	rjmp	.+2      	; 0x6058 <twiReceive+0x5e>
    6056:	82 e0       	ldi	r24, 0x02	; 2
    6058:	df 91       	pop	r29
    605a:	cf 91       	pop	r28
    605c:	1f 91       	pop	r17
    605e:	08 95       	ret

00006060 <__vector_39>:
    6060:	1f 92       	push	r1
    6062:	0f 92       	push	r0
    6064:	0f b6       	in	r0, 0x3f	; 63
    6066:	0f 92       	push	r0
    6068:	11 24       	eor	r1, r1
    606a:	0b b6       	in	r0, 0x3b	; 59
    606c:	0f 92       	push	r0
    606e:	2f 93       	push	r18
    6070:	3f 93       	push	r19
    6072:	4f 93       	push	r20
    6074:	5f 93       	push	r21
    6076:	6f 93       	push	r22
    6078:	7f 93       	push	r23
    607a:	8f 93       	push	r24
    607c:	9f 93       	push	r25
    607e:	af 93       	push	r26
    6080:	bf 93       	push	r27
    6082:	ef 93       	push	r30
    6084:	ff 93       	push	r31
    6086:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    608a:	8e 2f       	mov	r24, r30
    608c:	90 e0       	ldi	r25, 0x00	; 0
    608e:	fc 01       	movw	r30, r24
    6090:	38 97       	sbiw	r30, 0x08	; 8
    6092:	e1 35       	cpi	r30, 0x51	; 81
    6094:	f1 05       	cpc	r31, r1
    6096:	08 f0       	brcs	.+2      	; 0x609a <__vector_39+0x3a>
    6098:	75 c0       	rjmp	.+234    	; 0x6184 <__vector_39+0x124>
    609a:	88 27       	eor	r24, r24
    609c:	e4 58       	subi	r30, 0x84	; 132
    609e:	ff 4f       	sbci	r31, 0xFF	; 255
    60a0:	8f 4f       	sbci	r24, 0xFF	; 255
    60a2:	38 c5       	rjmp	.+2672   	; 0x6b14 <__tablejump2__>
    60a4:	10 92 13 16 	sts	0x1613, r1	; 0x801613 <_index.1885>
    60a8:	e0 91 13 16 	lds	r30, 0x1613	; 0x801613 <_index.1885>
    60ac:	80 91 16 16 	lds	r24, 0x1616	; 0x801616 <_twiMessageLen>
    60b0:	e8 17       	cp	r30, r24
    60b2:	70 f4       	brcc	.+28     	; 0x60d0 <__vector_39+0x70>
    60b4:	81 e0       	ldi	r24, 0x01	; 1
    60b6:	8e 0f       	add	r24, r30
    60b8:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <_index.1885>
    60bc:	f0 e0       	ldi	r31, 0x00	; 0
    60be:	e9 5e       	subi	r30, 0xE9	; 233
    60c0:	f9 4e       	sbci	r31, 0xE9	; 233
    60c2:	80 81       	ld	r24, Z
    60c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    60c8:	85 e8       	ldi	r24, 0x85	; 133
    60ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60ce:	72 c0       	rjmp	.+228    	; 0x61b4 <__vector_39+0x154>
    60d0:	84 e9       	ldi	r24, 0x94	; 148
    60d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60d6:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <_twiCurrentHandler>
    60da:	90 91 15 16 	lds	r25, 0x1615	; 0x801615 <_twiCurrentHandler+0x1>
    60de:	dc 01       	movw	r26, r24
    60e0:	12 96       	adiw	r26, 0x02	; 2
    60e2:	ed 91       	ld	r30, X+
    60e4:	fc 91       	ld	r31, X
    60e6:	13 97       	sbiw	r26, 0x03	; 3
    60e8:	30 97       	sbiw	r30, 0x00	; 0
    60ea:	09 f4       	brne	.+2      	; 0x60ee <__vector_39+0x8e>
    60ec:	63 c0       	rjmp	.+198    	; 0x61b4 <__vector_39+0x154>
    60ee:	20 e0       	ldi	r18, 0x00	; 0
    60f0:	40 e0       	ldi	r20, 0x00	; 0
    60f2:	50 e0       	ldi	r21, 0x00	; 0
    60f4:	64 e0       	ldi	r22, 0x04	; 4
    60f6:	19 95       	eicall
    60f8:	5d c0       	rjmp	.+186    	; 0x61b4 <__vector_39+0x154>
    60fa:	e0 91 13 16 	lds	r30, 0x1613	; 0x801613 <_index.1885>
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	8e 0f       	add	r24, r30
    6102:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <_index.1885>
    6106:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    610a:	f0 e0       	ldi	r31, 0x00	; 0
    610c:	e9 5e       	subi	r30, 0xE9	; 233
    610e:	f9 4e       	sbci	r31, 0xE9	; 233
    6110:	80 83       	st	Z, r24
    6112:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6116:	80 34       	cpi	r24, 0x40	; 64
    6118:	11 f4       	brne	.+4      	; 0x611e <__vector_39+0xbe>
    611a:	10 92 13 16 	sts	0x1613, r1	; 0x801613 <_index.1885>
    611e:	20 91 13 16 	lds	r18, 0x1613	; 0x801613 <_index.1885>
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	80 91 16 16 	lds	r24, 0x1616	; 0x801616 <_twiMessageLen>
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	01 97       	sbiw	r24, 0x01	; 1
    612c:	28 17       	cp	r18, r24
    612e:	39 07       	cpc	r19, r25
    6130:	24 f4       	brge	.+8      	; 0x613a <__vector_39+0xda>
    6132:	85 ec       	ldi	r24, 0xC5	; 197
    6134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6138:	3d c0       	rjmp	.+122    	; 0x61b4 <__vector_39+0x154>
    613a:	85 e8       	ldi	r24, 0x85	; 133
    613c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6140:	39 c0       	rjmp	.+114    	; 0x61b4 <__vector_39+0x154>
    6142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6146:	e0 91 13 16 	lds	r30, 0x1613	; 0x801613 <_index.1885>
    614a:	f0 e0       	ldi	r31, 0x00	; 0
    614c:	e9 5e       	subi	r30, 0xE9	; 233
    614e:	f9 4e       	sbci	r31, 0xE9	; 233
    6150:	80 83       	st	Z, r24
    6152:	84 e9       	ldi	r24, 0x94	; 148
    6154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6158:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <_twiCurrentHandler>
    615c:	90 91 15 16 	lds	r25, 0x1615	; 0x801615 <_twiCurrentHandler+0x1>
    6160:	dc 01       	movw	r26, r24
    6162:	12 96       	adiw	r26, 0x02	; 2
    6164:	ed 91       	ld	r30, X+
    6166:	fc 91       	ld	r31, X
    6168:	13 97       	sbiw	r26, 0x03	; 3
    616a:	30 97       	sbiw	r30, 0x00	; 0
    616c:	19 f1       	breq	.+70     	; 0x61b4 <__vector_39+0x154>
    616e:	20 91 16 16 	lds	r18, 0x1616	; 0x801616 <_twiMessageLen>
    6172:	47 e1       	ldi	r20, 0x17	; 23
    6174:	56 e1       	ldi	r21, 0x16	; 22
    6176:	65 e0       	ldi	r22, 0x05	; 5
    6178:	19 95       	eicall
    617a:	1c c0       	rjmp	.+56     	; 0x61b4 <__vector_39+0x154>
    617c:	85 ea       	ldi	r24, 0xA5	; 165
    617e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6182:	18 c0       	rjmp	.+48     	; 0x61b4 <__vector_39+0x154>
    6184:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6188:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    618c:	84 e0       	ldi	r24, 0x04	; 4
    618e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6192:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <_twiCurrentHandler>
    6196:	90 91 15 16 	lds	r25, 0x1615	; 0x801615 <_twiCurrentHandler+0x1>
    619a:	dc 01       	movw	r26, r24
    619c:	12 96       	adiw	r26, 0x02	; 2
    619e:	ed 91       	ld	r30, X+
    61a0:	fc 91       	ld	r31, X
    61a2:	13 97       	sbiw	r26, 0x03	; 3
    61a4:	30 97       	sbiw	r30, 0x00	; 0
    61a6:	31 f0       	breq	.+12     	; 0x61b4 <__vector_39+0x154>
    61a8:	20 e0       	ldi	r18, 0x00	; 0
    61aa:	40 e0       	ldi	r20, 0x00	; 0
    61ac:	50 e0       	ldi	r21, 0x00	; 0
    61ae:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    61b2:	19 95       	eicall
    61b4:	ff 91       	pop	r31
    61b6:	ef 91       	pop	r30
    61b8:	bf 91       	pop	r27
    61ba:	af 91       	pop	r26
    61bc:	9f 91       	pop	r25
    61be:	8f 91       	pop	r24
    61c0:	7f 91       	pop	r23
    61c2:	6f 91       	pop	r22
    61c4:	5f 91       	pop	r21
    61c6:	4f 91       	pop	r20
    61c8:	3f 91       	pop	r19
    61ca:	2f 91       	pop	r18
    61cc:	0f 90       	pop	r0
    61ce:	0b be       	out	0x3b, r0	; 59
    61d0:	0f 90       	pop	r0
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	0f 90       	pop	r0
    61d6:	1f 90       	pop	r1
    61d8:	18 95       	reti

000061da <fifo_init>:
    61da:	fc 01       	movw	r30, r24
    61dc:	41 11       	cpse	r20, r1
    61de:	01 c0       	rjmp	.+2      	; 0x61e2 <fifo_init+0x8>
    61e0:	eb d5       	rcall	.+3030   	; 0x6db8 <abort>
    61e2:	84 2f       	mov	r24, r20
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	9c 01       	movw	r18, r24
    61e8:	21 50       	subi	r18, 0x01	; 1
    61ea:	31 09       	sbc	r19, r1
    61ec:	82 23       	and	r24, r18
    61ee:	93 23       	and	r25, r19
    61f0:	89 2b       	or	r24, r25
    61f2:	09 f0       	breq	.+2      	; 0x61f6 <fifo_init+0x1c>
    61f4:	e1 d5       	rcall	.+3010   	; 0x6db8 <abort>
    61f6:	41 38       	cpi	r20, 0x81	; 129
    61f8:	08 f0       	brcs	.+2      	; 0x61fc <fifo_init+0x22>
    61fa:	de d5       	rcall	.+3004   	; 0x6db8 <abort>
    61fc:	12 82       	std	Z+2, r1	; 0x02
    61fe:	13 82       	std	Z+3, r1	; 0x03
    6200:	44 83       	std	Z+4, r20	; 0x04
    6202:	44 0f       	add	r20, r20
    6204:	41 50       	subi	r20, 0x01	; 1
    6206:	45 83       	std	Z+5, r20	; 0x05
    6208:	71 83       	std	Z+1, r23	; 0x01
    620a:	60 83       	st	Z, r22
    620c:	80 e0       	ldi	r24, 0x00	; 0
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	08 95       	ret

00006212 <vfprintf>:
    6212:	2f 92       	push	r2
    6214:	3f 92       	push	r3
    6216:	4f 92       	push	r4
    6218:	5f 92       	push	r5
    621a:	6f 92       	push	r6
    621c:	7f 92       	push	r7
    621e:	8f 92       	push	r8
    6220:	9f 92       	push	r9
    6222:	af 92       	push	r10
    6224:	bf 92       	push	r11
    6226:	cf 92       	push	r12
    6228:	df 92       	push	r13
    622a:	ef 92       	push	r14
    622c:	ff 92       	push	r15
    622e:	0f 93       	push	r16
    6230:	1f 93       	push	r17
    6232:	cf 93       	push	r28
    6234:	df 93       	push	r29
    6236:	cd b7       	in	r28, 0x3d	; 61
    6238:	de b7       	in	r29, 0x3e	; 62
    623a:	60 97       	sbiw	r28, 0x10	; 16
    623c:	0f b6       	in	r0, 0x3f	; 63
    623e:	f8 94       	cli
    6240:	de bf       	out	0x3e, r29	; 62
    6242:	0f be       	out	0x3f, r0	; 63
    6244:	cd bf       	out	0x3d, r28	; 61
    6246:	7c 01       	movw	r14, r24
    6248:	1b 01       	movw	r2, r22
    624a:	6a 01       	movw	r12, r20
    624c:	fc 01       	movw	r30, r24
    624e:	17 82       	std	Z+7, r1	; 0x07
    6250:	16 82       	std	Z+6, r1	; 0x06
    6252:	83 81       	ldd	r24, Z+3	; 0x03
    6254:	81 ff       	sbrs	r24, 1
    6256:	2a c3       	rjmp	.+1620   	; 0x68ac <vfprintf+0x69a>
    6258:	9e 01       	movw	r18, r28
    625a:	2f 5f       	subi	r18, 0xFF	; 255
    625c:	3f 4f       	sbci	r19, 0xFF	; 255
    625e:	39 01       	movw	r6, r18
    6260:	f7 01       	movw	r30, r14
    6262:	93 81       	ldd	r25, Z+3	; 0x03
    6264:	f1 01       	movw	r30, r2
    6266:	93 fd       	sbrc	r25, 3
    6268:	85 91       	lpm	r24, Z+
    626a:	93 ff       	sbrs	r25, 3
    626c:	81 91       	ld	r24, Z+
    626e:	1f 01       	movw	r2, r30
    6270:	88 23       	and	r24, r24
    6272:	09 f4       	brne	.+2      	; 0x6276 <vfprintf+0x64>
    6274:	17 c3       	rjmp	.+1582   	; 0x68a4 <vfprintf+0x692>
    6276:	85 32       	cpi	r24, 0x25	; 37
    6278:	39 f4       	brne	.+14     	; 0x6288 <vfprintf+0x76>
    627a:	93 fd       	sbrc	r25, 3
    627c:	85 91       	lpm	r24, Z+
    627e:	93 ff       	sbrs	r25, 3
    6280:	81 91       	ld	r24, Z+
    6282:	1f 01       	movw	r2, r30
    6284:	85 32       	cpi	r24, 0x25	; 37
    6286:	31 f4       	brne	.+12     	; 0x6294 <vfprintf+0x82>
    6288:	b7 01       	movw	r22, r14
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	e6 d6       	rcall	.+3532   	; 0x705a <fputc>
    628e:	56 01       	movw	r10, r12
    6290:	65 01       	movw	r12, r10
    6292:	e6 cf       	rjmp	.-52     	; 0x6260 <vfprintf+0x4e>
    6294:	10 e0       	ldi	r17, 0x00	; 0
    6296:	51 2c       	mov	r5, r1
    6298:	91 2c       	mov	r9, r1
    629a:	ff e1       	ldi	r31, 0x1F	; 31
    629c:	f9 15       	cp	r31, r9
    629e:	d8 f0       	brcs	.+54     	; 0x62d6 <vfprintf+0xc4>
    62a0:	8b 32       	cpi	r24, 0x2B	; 43
    62a2:	79 f0       	breq	.+30     	; 0x62c2 <vfprintf+0xb0>
    62a4:	38 f4       	brcc	.+14     	; 0x62b4 <vfprintf+0xa2>
    62a6:	80 32       	cpi	r24, 0x20	; 32
    62a8:	79 f0       	breq	.+30     	; 0x62c8 <vfprintf+0xb6>
    62aa:	83 32       	cpi	r24, 0x23	; 35
    62ac:	a1 f4       	brne	.+40     	; 0x62d6 <vfprintf+0xc4>
    62ae:	f9 2d       	mov	r31, r9
    62b0:	f0 61       	ori	r31, 0x10	; 16
    62b2:	2e c0       	rjmp	.+92     	; 0x6310 <vfprintf+0xfe>
    62b4:	8d 32       	cpi	r24, 0x2D	; 45
    62b6:	61 f0       	breq	.+24     	; 0x62d0 <vfprintf+0xbe>
    62b8:	80 33       	cpi	r24, 0x30	; 48
    62ba:	69 f4       	brne	.+26     	; 0x62d6 <vfprintf+0xc4>
    62bc:	29 2d       	mov	r18, r9
    62be:	21 60       	ori	r18, 0x01	; 1
    62c0:	2d c0       	rjmp	.+90     	; 0x631c <vfprintf+0x10a>
    62c2:	39 2d       	mov	r19, r9
    62c4:	32 60       	ori	r19, 0x02	; 2
    62c6:	93 2e       	mov	r9, r19
    62c8:	89 2d       	mov	r24, r9
    62ca:	84 60       	ori	r24, 0x04	; 4
    62cc:	98 2e       	mov	r9, r24
    62ce:	2a c0       	rjmp	.+84     	; 0x6324 <vfprintf+0x112>
    62d0:	e9 2d       	mov	r30, r9
    62d2:	e8 60       	ori	r30, 0x08	; 8
    62d4:	15 c0       	rjmp	.+42     	; 0x6300 <vfprintf+0xee>
    62d6:	97 fc       	sbrc	r9, 7
    62d8:	2d c0       	rjmp	.+90     	; 0x6334 <vfprintf+0x122>
    62da:	20 ed       	ldi	r18, 0xD0	; 208
    62dc:	28 0f       	add	r18, r24
    62de:	2a 30       	cpi	r18, 0x0A	; 10
    62e0:	88 f4       	brcc	.+34     	; 0x6304 <vfprintf+0xf2>
    62e2:	96 fe       	sbrs	r9, 6
    62e4:	06 c0       	rjmp	.+12     	; 0x62f2 <vfprintf+0xe0>
    62e6:	3a e0       	ldi	r19, 0x0A	; 10
    62e8:	13 9f       	mul	r17, r19
    62ea:	20 0d       	add	r18, r0
    62ec:	11 24       	eor	r1, r1
    62ee:	12 2f       	mov	r17, r18
    62f0:	19 c0       	rjmp	.+50     	; 0x6324 <vfprintf+0x112>
    62f2:	8a e0       	ldi	r24, 0x0A	; 10
    62f4:	58 9e       	mul	r5, r24
    62f6:	20 0d       	add	r18, r0
    62f8:	11 24       	eor	r1, r1
    62fa:	52 2e       	mov	r5, r18
    62fc:	e9 2d       	mov	r30, r9
    62fe:	e0 62       	ori	r30, 0x20	; 32
    6300:	9e 2e       	mov	r9, r30
    6302:	10 c0       	rjmp	.+32     	; 0x6324 <vfprintf+0x112>
    6304:	8e 32       	cpi	r24, 0x2E	; 46
    6306:	31 f4       	brne	.+12     	; 0x6314 <vfprintf+0x102>
    6308:	96 fc       	sbrc	r9, 6
    630a:	cc c2       	rjmp	.+1432   	; 0x68a4 <vfprintf+0x692>
    630c:	f9 2d       	mov	r31, r9
    630e:	f0 64       	ori	r31, 0x40	; 64
    6310:	9f 2e       	mov	r9, r31
    6312:	08 c0       	rjmp	.+16     	; 0x6324 <vfprintf+0x112>
    6314:	8c 36       	cpi	r24, 0x6C	; 108
    6316:	21 f4       	brne	.+8      	; 0x6320 <vfprintf+0x10e>
    6318:	29 2d       	mov	r18, r9
    631a:	20 68       	ori	r18, 0x80	; 128
    631c:	92 2e       	mov	r9, r18
    631e:	02 c0       	rjmp	.+4      	; 0x6324 <vfprintf+0x112>
    6320:	88 36       	cpi	r24, 0x68	; 104
    6322:	41 f4       	brne	.+16     	; 0x6334 <vfprintf+0x122>
    6324:	f1 01       	movw	r30, r2
    6326:	93 fd       	sbrc	r25, 3
    6328:	85 91       	lpm	r24, Z+
    632a:	93 ff       	sbrs	r25, 3
    632c:	81 91       	ld	r24, Z+
    632e:	1f 01       	movw	r2, r30
    6330:	81 11       	cpse	r24, r1
    6332:	b3 cf       	rjmp	.-154    	; 0x629a <vfprintf+0x88>
    6334:	9b eb       	ldi	r25, 0xBB	; 187
    6336:	98 0f       	add	r25, r24
    6338:	93 30       	cpi	r25, 0x03	; 3
    633a:	20 f4       	brcc	.+8      	; 0x6344 <vfprintf+0x132>
    633c:	99 2d       	mov	r25, r9
    633e:	90 61       	ori	r25, 0x10	; 16
    6340:	80 5e       	subi	r24, 0xE0	; 224
    6342:	07 c0       	rjmp	.+14     	; 0x6352 <vfprintf+0x140>
    6344:	9b e9       	ldi	r25, 0x9B	; 155
    6346:	98 0f       	add	r25, r24
    6348:	93 30       	cpi	r25, 0x03	; 3
    634a:	08 f0       	brcs	.+2      	; 0x634e <vfprintf+0x13c>
    634c:	59 c1       	rjmp	.+690    	; 0x6600 <vfprintf+0x3ee>
    634e:	99 2d       	mov	r25, r9
    6350:	9f 7e       	andi	r25, 0xEF	; 239
    6352:	96 ff       	sbrs	r25, 6
    6354:	16 e0       	ldi	r17, 0x06	; 6
    6356:	9f 73       	andi	r25, 0x3F	; 63
    6358:	99 2e       	mov	r9, r25
    635a:	85 36       	cpi	r24, 0x65	; 101
    635c:	19 f4       	brne	.+6      	; 0x6364 <vfprintf+0x152>
    635e:	90 64       	ori	r25, 0x40	; 64
    6360:	99 2e       	mov	r9, r25
    6362:	08 c0       	rjmp	.+16     	; 0x6374 <vfprintf+0x162>
    6364:	86 36       	cpi	r24, 0x66	; 102
    6366:	21 f4       	brne	.+8      	; 0x6370 <vfprintf+0x15e>
    6368:	39 2f       	mov	r19, r25
    636a:	30 68       	ori	r19, 0x80	; 128
    636c:	93 2e       	mov	r9, r19
    636e:	02 c0       	rjmp	.+4      	; 0x6374 <vfprintf+0x162>
    6370:	11 11       	cpse	r17, r1
    6372:	11 50       	subi	r17, 0x01	; 1
    6374:	97 fe       	sbrs	r9, 7
    6376:	07 c0       	rjmp	.+14     	; 0x6386 <vfprintf+0x174>
    6378:	1c 33       	cpi	r17, 0x3C	; 60
    637a:	50 f4       	brcc	.+20     	; 0x6390 <vfprintf+0x17e>
    637c:	44 24       	eor	r4, r4
    637e:	43 94       	inc	r4
    6380:	41 0e       	add	r4, r17
    6382:	27 e0       	ldi	r18, 0x07	; 7
    6384:	0b c0       	rjmp	.+22     	; 0x639c <vfprintf+0x18a>
    6386:	18 30       	cpi	r17, 0x08	; 8
    6388:	38 f0       	brcs	.+14     	; 0x6398 <vfprintf+0x186>
    638a:	27 e0       	ldi	r18, 0x07	; 7
    638c:	17 e0       	ldi	r17, 0x07	; 7
    638e:	05 c0       	rjmp	.+10     	; 0x639a <vfprintf+0x188>
    6390:	27 e0       	ldi	r18, 0x07	; 7
    6392:	9c e3       	ldi	r25, 0x3C	; 60
    6394:	49 2e       	mov	r4, r25
    6396:	02 c0       	rjmp	.+4      	; 0x639c <vfprintf+0x18a>
    6398:	21 2f       	mov	r18, r17
    639a:	41 2c       	mov	r4, r1
    639c:	56 01       	movw	r10, r12
    639e:	84 e0       	ldi	r24, 0x04	; 4
    63a0:	a8 0e       	add	r10, r24
    63a2:	b1 1c       	adc	r11, r1
    63a4:	f6 01       	movw	r30, r12
    63a6:	60 81       	ld	r22, Z
    63a8:	71 81       	ldd	r23, Z+1	; 0x01
    63aa:	82 81       	ldd	r24, Z+2	; 0x02
    63ac:	93 81       	ldd	r25, Z+3	; 0x03
    63ae:	04 2d       	mov	r16, r4
    63b0:	a3 01       	movw	r20, r6
    63b2:	06 d5       	rcall	.+2572   	; 0x6dc0 <__ftoa_engine>
    63b4:	6c 01       	movw	r12, r24
    63b6:	f9 81       	ldd	r31, Y+1	; 0x01
    63b8:	fc 87       	std	Y+12, r31	; 0x0c
    63ba:	f0 ff       	sbrs	r31, 0
    63bc:	02 c0       	rjmp	.+4      	; 0x63c2 <vfprintf+0x1b0>
    63be:	f3 ff       	sbrs	r31, 3
    63c0:	06 c0       	rjmp	.+12     	; 0x63ce <vfprintf+0x1bc>
    63c2:	91 fc       	sbrc	r9, 1
    63c4:	06 c0       	rjmp	.+12     	; 0x63d2 <vfprintf+0x1c0>
    63c6:	92 fe       	sbrs	r9, 2
    63c8:	06 c0       	rjmp	.+12     	; 0x63d6 <vfprintf+0x1c4>
    63ca:	00 e2       	ldi	r16, 0x20	; 32
    63cc:	05 c0       	rjmp	.+10     	; 0x63d8 <vfprintf+0x1c6>
    63ce:	0d e2       	ldi	r16, 0x2D	; 45
    63d0:	03 c0       	rjmp	.+6      	; 0x63d8 <vfprintf+0x1c6>
    63d2:	0b e2       	ldi	r16, 0x2B	; 43
    63d4:	01 c0       	rjmp	.+2      	; 0x63d8 <vfprintf+0x1c6>
    63d6:	00 e0       	ldi	r16, 0x00	; 0
    63d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    63da:	8c 70       	andi	r24, 0x0C	; 12
    63dc:	19 f0       	breq	.+6      	; 0x63e4 <vfprintf+0x1d2>
    63de:	01 11       	cpse	r16, r1
    63e0:	43 c2       	rjmp	.+1158   	; 0x6868 <vfprintf+0x656>
    63e2:	80 c2       	rjmp	.+1280   	; 0x68e4 <vfprintf+0x6d2>
    63e4:	97 fe       	sbrs	r9, 7
    63e6:	10 c0       	rjmp	.+32     	; 0x6408 <vfprintf+0x1f6>
    63e8:	4c 0c       	add	r4, r12
    63ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    63ec:	f4 ff       	sbrs	r31, 4
    63ee:	04 c0       	rjmp	.+8      	; 0x63f8 <vfprintf+0x1e6>
    63f0:	8a 81       	ldd	r24, Y+2	; 0x02
    63f2:	81 33       	cpi	r24, 0x31	; 49
    63f4:	09 f4       	brne	.+2      	; 0x63f8 <vfprintf+0x1e6>
    63f6:	4a 94       	dec	r4
    63f8:	14 14       	cp	r1, r4
    63fa:	74 f5       	brge	.+92     	; 0x6458 <vfprintf+0x246>
    63fc:	28 e0       	ldi	r18, 0x08	; 8
    63fe:	24 15       	cp	r18, r4
    6400:	78 f5       	brcc	.+94     	; 0x6460 <vfprintf+0x24e>
    6402:	88 e0       	ldi	r24, 0x08	; 8
    6404:	48 2e       	mov	r4, r24
    6406:	2c c0       	rjmp	.+88     	; 0x6460 <vfprintf+0x24e>
    6408:	96 fc       	sbrc	r9, 6
    640a:	2a c0       	rjmp	.+84     	; 0x6460 <vfprintf+0x24e>
    640c:	81 2f       	mov	r24, r17
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	8c 15       	cp	r24, r12
    6412:	9d 05       	cpc	r25, r13
    6414:	9c f0       	brlt	.+38     	; 0x643c <vfprintf+0x22a>
    6416:	3c ef       	ldi	r19, 0xFC	; 252
    6418:	c3 16       	cp	r12, r19
    641a:	3f ef       	ldi	r19, 0xFF	; 255
    641c:	d3 06       	cpc	r13, r19
    641e:	74 f0       	brlt	.+28     	; 0x643c <vfprintf+0x22a>
    6420:	89 2d       	mov	r24, r9
    6422:	80 68       	ori	r24, 0x80	; 128
    6424:	98 2e       	mov	r9, r24
    6426:	0a c0       	rjmp	.+20     	; 0x643c <vfprintf+0x22a>
    6428:	e2 e0       	ldi	r30, 0x02	; 2
    642a:	f0 e0       	ldi	r31, 0x00	; 0
    642c:	ec 0f       	add	r30, r28
    642e:	fd 1f       	adc	r31, r29
    6430:	e1 0f       	add	r30, r17
    6432:	f1 1d       	adc	r31, r1
    6434:	80 81       	ld	r24, Z
    6436:	80 33       	cpi	r24, 0x30	; 48
    6438:	19 f4       	brne	.+6      	; 0x6440 <vfprintf+0x22e>
    643a:	11 50       	subi	r17, 0x01	; 1
    643c:	11 11       	cpse	r17, r1
    643e:	f4 cf       	rjmp	.-24     	; 0x6428 <vfprintf+0x216>
    6440:	97 fe       	sbrs	r9, 7
    6442:	0e c0       	rjmp	.+28     	; 0x6460 <vfprintf+0x24e>
    6444:	44 24       	eor	r4, r4
    6446:	43 94       	inc	r4
    6448:	41 0e       	add	r4, r17
    644a:	81 2f       	mov	r24, r17
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	c8 16       	cp	r12, r24
    6450:	d9 06       	cpc	r13, r25
    6452:	2c f4       	brge	.+10     	; 0x645e <vfprintf+0x24c>
    6454:	1c 19       	sub	r17, r12
    6456:	04 c0       	rjmp	.+8      	; 0x6460 <vfprintf+0x24e>
    6458:	44 24       	eor	r4, r4
    645a:	43 94       	inc	r4
    645c:	01 c0       	rjmp	.+2      	; 0x6460 <vfprintf+0x24e>
    645e:	10 e0       	ldi	r17, 0x00	; 0
    6460:	97 fe       	sbrs	r9, 7
    6462:	06 c0       	rjmp	.+12     	; 0x6470 <vfprintf+0x25e>
    6464:	1c 14       	cp	r1, r12
    6466:	1d 04       	cpc	r1, r13
    6468:	34 f4       	brge	.+12     	; 0x6476 <vfprintf+0x264>
    646a:	c6 01       	movw	r24, r12
    646c:	01 96       	adiw	r24, 0x01	; 1
    646e:	05 c0       	rjmp	.+10     	; 0x647a <vfprintf+0x268>
    6470:	85 e0       	ldi	r24, 0x05	; 5
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	02 c0       	rjmp	.+4      	; 0x647a <vfprintf+0x268>
    6476:	81 e0       	ldi	r24, 0x01	; 1
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	01 11       	cpse	r16, r1
    647c:	01 96       	adiw	r24, 0x01	; 1
    647e:	11 23       	and	r17, r17
    6480:	31 f0       	breq	.+12     	; 0x648e <vfprintf+0x27c>
    6482:	21 2f       	mov	r18, r17
    6484:	30 e0       	ldi	r19, 0x00	; 0
    6486:	2f 5f       	subi	r18, 0xFF	; 255
    6488:	3f 4f       	sbci	r19, 0xFF	; 255
    648a:	82 0f       	add	r24, r18
    648c:	93 1f       	adc	r25, r19
    648e:	25 2d       	mov	r18, r5
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	82 17       	cp	r24, r18
    6494:	93 07       	cpc	r25, r19
    6496:	14 f4       	brge	.+4      	; 0x649c <vfprintf+0x28a>
    6498:	58 1a       	sub	r5, r24
    649a:	01 c0       	rjmp	.+2      	; 0x649e <vfprintf+0x28c>
    649c:	51 2c       	mov	r5, r1
    649e:	89 2d       	mov	r24, r9
    64a0:	89 70       	andi	r24, 0x09	; 9
    64a2:	41 f4       	brne	.+16     	; 0x64b4 <vfprintf+0x2a2>
    64a4:	55 20       	and	r5, r5
    64a6:	31 f0       	breq	.+12     	; 0x64b4 <vfprintf+0x2a2>
    64a8:	b7 01       	movw	r22, r14
    64aa:	80 e2       	ldi	r24, 0x20	; 32
    64ac:	90 e0       	ldi	r25, 0x00	; 0
    64ae:	d5 d5       	rcall	.+2986   	; 0x705a <fputc>
    64b0:	5a 94       	dec	r5
    64b2:	f8 cf       	rjmp	.-16     	; 0x64a4 <vfprintf+0x292>
    64b4:	00 23       	and	r16, r16
    64b6:	21 f0       	breq	.+8      	; 0x64c0 <vfprintf+0x2ae>
    64b8:	b7 01       	movw	r22, r14
    64ba:	80 2f       	mov	r24, r16
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	cd d5       	rcall	.+2970   	; 0x705a <fputc>
    64c0:	93 fc       	sbrc	r9, 3
    64c2:	08 c0       	rjmp	.+16     	; 0x64d4 <vfprintf+0x2c2>
    64c4:	55 20       	and	r5, r5
    64c6:	31 f0       	breq	.+12     	; 0x64d4 <vfprintf+0x2c2>
    64c8:	b7 01       	movw	r22, r14
    64ca:	80 e3       	ldi	r24, 0x30	; 48
    64cc:	90 e0       	ldi	r25, 0x00	; 0
    64ce:	c5 d5       	rcall	.+2954   	; 0x705a <fputc>
    64d0:	5a 94       	dec	r5
    64d2:	f8 cf       	rjmp	.-16     	; 0x64c4 <vfprintf+0x2b2>
    64d4:	97 fe       	sbrs	r9, 7
    64d6:	4a c0       	rjmp	.+148    	; 0x656c <vfprintf+0x35a>
    64d8:	46 01       	movw	r8, r12
    64da:	d7 fe       	sbrs	r13, 7
    64dc:	02 c0       	rjmp	.+4      	; 0x64e2 <vfprintf+0x2d0>
    64de:	81 2c       	mov	r8, r1
    64e0:	91 2c       	mov	r9, r1
    64e2:	c6 01       	movw	r24, r12
    64e4:	88 19       	sub	r24, r8
    64e6:	99 09       	sbc	r25, r9
    64e8:	f3 01       	movw	r30, r6
    64ea:	e8 0f       	add	r30, r24
    64ec:	f9 1f       	adc	r31, r25
    64ee:	fe 87       	std	Y+14, r31	; 0x0e
    64f0:	ed 87       	std	Y+13, r30	; 0x0d
    64f2:	96 01       	movw	r18, r12
    64f4:	24 19       	sub	r18, r4
    64f6:	31 09       	sbc	r19, r1
    64f8:	38 8b       	std	Y+16, r19	; 0x10
    64fa:	2f 87       	std	Y+15, r18	; 0x0f
    64fc:	01 2f       	mov	r16, r17
    64fe:	10 e0       	ldi	r17, 0x00	; 0
    6500:	11 95       	neg	r17
    6502:	01 95       	neg	r16
    6504:	11 09       	sbc	r17, r1
    6506:	3f ef       	ldi	r19, 0xFF	; 255
    6508:	83 16       	cp	r8, r19
    650a:	93 06       	cpc	r9, r19
    650c:	21 f4       	brne	.+8      	; 0x6516 <vfprintf+0x304>
    650e:	b7 01       	movw	r22, r14
    6510:	8e e2       	ldi	r24, 0x2E	; 46
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	a2 d5       	rcall	.+2884   	; 0x705a <fputc>
    6516:	c8 14       	cp	r12, r8
    6518:	d9 04       	cpc	r13, r9
    651a:	4c f0       	brlt	.+18     	; 0x652e <vfprintf+0x31c>
    651c:	8f 85       	ldd	r24, Y+15	; 0x0f
    651e:	98 89       	ldd	r25, Y+16	; 0x10
    6520:	88 15       	cp	r24, r8
    6522:	99 05       	cpc	r25, r9
    6524:	24 f4       	brge	.+8      	; 0x652e <vfprintf+0x31c>
    6526:	ed 85       	ldd	r30, Y+13	; 0x0d
    6528:	fe 85       	ldd	r31, Y+14	; 0x0e
    652a:	81 81       	ldd	r24, Z+1	; 0x01
    652c:	01 c0       	rjmp	.+2      	; 0x6530 <vfprintf+0x31e>
    652e:	80 e3       	ldi	r24, 0x30	; 48
    6530:	f1 e0       	ldi	r31, 0x01	; 1
    6532:	8f 1a       	sub	r8, r31
    6534:	91 08       	sbc	r9, r1
    6536:	2d 85       	ldd	r18, Y+13	; 0x0d
    6538:	3e 85       	ldd	r19, Y+14	; 0x0e
    653a:	2f 5f       	subi	r18, 0xFF	; 255
    653c:	3f 4f       	sbci	r19, 0xFF	; 255
    653e:	3e 87       	std	Y+14, r19	; 0x0e
    6540:	2d 87       	std	Y+13, r18	; 0x0d
    6542:	80 16       	cp	r8, r16
    6544:	91 06       	cpc	r9, r17
    6546:	24 f0       	brlt	.+8      	; 0x6550 <vfprintf+0x33e>
    6548:	b7 01       	movw	r22, r14
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	86 d5       	rcall	.+2828   	; 0x705a <fputc>
    654e:	db cf       	rjmp	.-74     	; 0x6506 <vfprintf+0x2f4>
    6550:	c8 14       	cp	r12, r8
    6552:	d9 04       	cpc	r13, r9
    6554:	41 f4       	brne	.+16     	; 0x6566 <vfprintf+0x354>
    6556:	9a 81       	ldd	r25, Y+2	; 0x02
    6558:	96 33       	cpi	r25, 0x36	; 54
    655a:	20 f4       	brcc	.+8      	; 0x6564 <vfprintf+0x352>
    655c:	95 33       	cpi	r25, 0x35	; 53
    655e:	19 f4       	brne	.+6      	; 0x6566 <vfprintf+0x354>
    6560:	3c 85       	ldd	r19, Y+12	; 0x0c
    6562:	34 ff       	sbrs	r19, 4
    6564:	81 e3       	ldi	r24, 0x31	; 49
    6566:	b7 01       	movw	r22, r14
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	48 c0       	rjmp	.+144    	; 0x65fc <vfprintf+0x3ea>
    656c:	8a 81       	ldd	r24, Y+2	; 0x02
    656e:	81 33       	cpi	r24, 0x31	; 49
    6570:	19 f0       	breq	.+6      	; 0x6578 <vfprintf+0x366>
    6572:	9c 85       	ldd	r25, Y+12	; 0x0c
    6574:	9f 7e       	andi	r25, 0xEF	; 239
    6576:	9c 87       	std	Y+12, r25	; 0x0c
    6578:	b7 01       	movw	r22, r14
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	6e d5       	rcall	.+2780   	; 0x705a <fputc>
    657e:	11 11       	cpse	r17, r1
    6580:	05 c0       	rjmp	.+10     	; 0x658c <vfprintf+0x37a>
    6582:	94 fc       	sbrc	r9, 4
    6584:	16 c0       	rjmp	.+44     	; 0x65b2 <vfprintf+0x3a0>
    6586:	85 e6       	ldi	r24, 0x65	; 101
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	15 c0       	rjmp	.+42     	; 0x65b6 <vfprintf+0x3a4>
    658c:	b7 01       	movw	r22, r14
    658e:	8e e2       	ldi	r24, 0x2E	; 46
    6590:	90 e0       	ldi	r25, 0x00	; 0
    6592:	63 d5       	rcall	.+2758   	; 0x705a <fputc>
    6594:	1e 5f       	subi	r17, 0xFE	; 254
    6596:	82 e0       	ldi	r24, 0x02	; 2
    6598:	01 e0       	ldi	r16, 0x01	; 1
    659a:	08 0f       	add	r16, r24
    659c:	f3 01       	movw	r30, r6
    659e:	e8 0f       	add	r30, r24
    65a0:	f1 1d       	adc	r31, r1
    65a2:	80 81       	ld	r24, Z
    65a4:	b7 01       	movw	r22, r14
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	58 d5       	rcall	.+2736   	; 0x705a <fputc>
    65aa:	80 2f       	mov	r24, r16
    65ac:	01 13       	cpse	r16, r17
    65ae:	f4 cf       	rjmp	.-24     	; 0x6598 <vfprintf+0x386>
    65b0:	e8 cf       	rjmp	.-48     	; 0x6582 <vfprintf+0x370>
    65b2:	85 e4       	ldi	r24, 0x45	; 69
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	b7 01       	movw	r22, r14
    65b8:	50 d5       	rcall	.+2720   	; 0x705a <fputc>
    65ba:	d7 fc       	sbrc	r13, 7
    65bc:	06 c0       	rjmp	.+12     	; 0x65ca <vfprintf+0x3b8>
    65be:	c1 14       	cp	r12, r1
    65c0:	d1 04       	cpc	r13, r1
    65c2:	41 f4       	brne	.+16     	; 0x65d4 <vfprintf+0x3c2>
    65c4:	ec 85       	ldd	r30, Y+12	; 0x0c
    65c6:	e4 ff       	sbrs	r30, 4
    65c8:	05 c0       	rjmp	.+10     	; 0x65d4 <vfprintf+0x3c2>
    65ca:	d1 94       	neg	r13
    65cc:	c1 94       	neg	r12
    65ce:	d1 08       	sbc	r13, r1
    65d0:	8d e2       	ldi	r24, 0x2D	; 45
    65d2:	01 c0       	rjmp	.+2      	; 0x65d6 <vfprintf+0x3c4>
    65d4:	8b e2       	ldi	r24, 0x2B	; 43
    65d6:	b7 01       	movw	r22, r14
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	3f d5       	rcall	.+2686   	; 0x705a <fputc>
    65dc:	80 e3       	ldi	r24, 0x30	; 48
    65de:	2a e0       	ldi	r18, 0x0A	; 10
    65e0:	c2 16       	cp	r12, r18
    65e2:	d1 04       	cpc	r13, r1
    65e4:	2c f0       	brlt	.+10     	; 0x65f0 <vfprintf+0x3de>
    65e6:	8f 5f       	subi	r24, 0xFF	; 255
    65e8:	fa e0       	ldi	r31, 0x0A	; 10
    65ea:	cf 1a       	sub	r12, r31
    65ec:	d1 08       	sbc	r13, r1
    65ee:	f7 cf       	rjmp	.-18     	; 0x65de <vfprintf+0x3cc>
    65f0:	b7 01       	movw	r22, r14
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	32 d5       	rcall	.+2660   	; 0x705a <fputc>
    65f6:	b7 01       	movw	r22, r14
    65f8:	c6 01       	movw	r24, r12
    65fa:	c0 96       	adiw	r24, 0x30	; 48
    65fc:	2e d5       	rcall	.+2652   	; 0x705a <fputc>
    65fe:	49 c1       	rjmp	.+658    	; 0x6892 <vfprintf+0x680>
    6600:	83 36       	cpi	r24, 0x63	; 99
    6602:	31 f0       	breq	.+12     	; 0x6610 <vfprintf+0x3fe>
    6604:	83 37       	cpi	r24, 0x73	; 115
    6606:	79 f0       	breq	.+30     	; 0x6626 <vfprintf+0x414>
    6608:	83 35       	cpi	r24, 0x53	; 83
    660a:	09 f0       	breq	.+2      	; 0x660e <vfprintf+0x3fc>
    660c:	52 c0       	rjmp	.+164    	; 0x66b2 <vfprintf+0x4a0>
    660e:	1f c0       	rjmp	.+62     	; 0x664e <vfprintf+0x43c>
    6610:	56 01       	movw	r10, r12
    6612:	32 e0       	ldi	r19, 0x02	; 2
    6614:	a3 0e       	add	r10, r19
    6616:	b1 1c       	adc	r11, r1
    6618:	f6 01       	movw	r30, r12
    661a:	80 81       	ld	r24, Z
    661c:	89 83       	std	Y+1, r24	; 0x01
    661e:	01 e0       	ldi	r16, 0x01	; 1
    6620:	10 e0       	ldi	r17, 0x00	; 0
    6622:	63 01       	movw	r12, r6
    6624:	11 c0       	rjmp	.+34     	; 0x6648 <vfprintf+0x436>
    6626:	56 01       	movw	r10, r12
    6628:	f2 e0       	ldi	r31, 0x02	; 2
    662a:	af 0e       	add	r10, r31
    662c:	b1 1c       	adc	r11, r1
    662e:	f6 01       	movw	r30, r12
    6630:	c0 80       	ld	r12, Z
    6632:	d1 80       	ldd	r13, Z+1	; 0x01
    6634:	96 fe       	sbrs	r9, 6
    6636:	03 c0       	rjmp	.+6      	; 0x663e <vfprintf+0x42c>
    6638:	61 2f       	mov	r22, r17
    663a:	70 e0       	ldi	r23, 0x00	; 0
    663c:	02 c0       	rjmp	.+4      	; 0x6642 <vfprintf+0x430>
    663e:	6f ef       	ldi	r22, 0xFF	; 255
    6640:	7f ef       	ldi	r23, 0xFF	; 255
    6642:	c6 01       	movw	r24, r12
    6644:	ff d4       	rcall	.+2558   	; 0x7044 <strnlen>
    6646:	8c 01       	movw	r16, r24
    6648:	f9 2d       	mov	r31, r9
    664a:	ff 77       	andi	r31, 0x7F	; 127
    664c:	13 c0       	rjmp	.+38     	; 0x6674 <vfprintf+0x462>
    664e:	56 01       	movw	r10, r12
    6650:	22 e0       	ldi	r18, 0x02	; 2
    6652:	a2 0e       	add	r10, r18
    6654:	b1 1c       	adc	r11, r1
    6656:	f6 01       	movw	r30, r12
    6658:	c0 80       	ld	r12, Z
    665a:	d1 80       	ldd	r13, Z+1	; 0x01
    665c:	96 fe       	sbrs	r9, 6
    665e:	03 c0       	rjmp	.+6      	; 0x6666 <vfprintf+0x454>
    6660:	61 2f       	mov	r22, r17
    6662:	70 e0       	ldi	r23, 0x00	; 0
    6664:	02 c0       	rjmp	.+4      	; 0x666a <vfprintf+0x458>
    6666:	6f ef       	ldi	r22, 0xFF	; 255
    6668:	7f ef       	ldi	r23, 0xFF	; 255
    666a:	c6 01       	movw	r24, r12
    666c:	81 d4       	rcall	.+2306   	; 0x6f70 <strnlen_P>
    666e:	8c 01       	movw	r16, r24
    6670:	f9 2d       	mov	r31, r9
    6672:	f0 68       	ori	r31, 0x80	; 128
    6674:	9f 2e       	mov	r9, r31
    6676:	f3 fd       	sbrc	r31, 3
    6678:	18 c0       	rjmp	.+48     	; 0x66aa <vfprintf+0x498>
    667a:	85 2d       	mov	r24, r5
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	08 17       	cp	r16, r24
    6680:	19 07       	cpc	r17, r25
    6682:	98 f4       	brcc	.+38     	; 0x66aa <vfprintf+0x498>
    6684:	b7 01       	movw	r22, r14
    6686:	80 e2       	ldi	r24, 0x20	; 32
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	e7 d4       	rcall	.+2510   	; 0x705a <fputc>
    668c:	5a 94       	dec	r5
    668e:	f5 cf       	rjmp	.-22     	; 0x667a <vfprintf+0x468>
    6690:	f6 01       	movw	r30, r12
    6692:	97 fc       	sbrc	r9, 7
    6694:	85 91       	lpm	r24, Z+
    6696:	97 fe       	sbrs	r9, 7
    6698:	81 91       	ld	r24, Z+
    669a:	6f 01       	movw	r12, r30
    669c:	b7 01       	movw	r22, r14
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	dc d4       	rcall	.+2488   	; 0x705a <fputc>
    66a2:	51 10       	cpse	r5, r1
    66a4:	5a 94       	dec	r5
    66a6:	01 50       	subi	r16, 0x01	; 1
    66a8:	11 09       	sbc	r17, r1
    66aa:	01 15       	cp	r16, r1
    66ac:	11 05       	cpc	r17, r1
    66ae:	81 f7       	brne	.-32     	; 0x6690 <vfprintf+0x47e>
    66b0:	f0 c0       	rjmp	.+480    	; 0x6892 <vfprintf+0x680>
    66b2:	84 36       	cpi	r24, 0x64	; 100
    66b4:	11 f0       	breq	.+4      	; 0x66ba <vfprintf+0x4a8>
    66b6:	89 36       	cpi	r24, 0x69	; 105
    66b8:	59 f5       	brne	.+86     	; 0x6710 <vfprintf+0x4fe>
    66ba:	56 01       	movw	r10, r12
    66bc:	97 fe       	sbrs	r9, 7
    66be:	09 c0       	rjmp	.+18     	; 0x66d2 <vfprintf+0x4c0>
    66c0:	24 e0       	ldi	r18, 0x04	; 4
    66c2:	a2 0e       	add	r10, r18
    66c4:	b1 1c       	adc	r11, r1
    66c6:	f6 01       	movw	r30, r12
    66c8:	60 81       	ld	r22, Z
    66ca:	71 81       	ldd	r23, Z+1	; 0x01
    66cc:	82 81       	ldd	r24, Z+2	; 0x02
    66ce:	93 81       	ldd	r25, Z+3	; 0x03
    66d0:	0a c0       	rjmp	.+20     	; 0x66e6 <vfprintf+0x4d4>
    66d2:	f2 e0       	ldi	r31, 0x02	; 2
    66d4:	af 0e       	add	r10, r31
    66d6:	b1 1c       	adc	r11, r1
    66d8:	f6 01       	movw	r30, r12
    66da:	60 81       	ld	r22, Z
    66dc:	71 81       	ldd	r23, Z+1	; 0x01
    66de:	07 2e       	mov	r0, r23
    66e0:	00 0c       	add	r0, r0
    66e2:	88 0b       	sbc	r24, r24
    66e4:	99 0b       	sbc	r25, r25
    66e6:	f9 2d       	mov	r31, r9
    66e8:	ff 76       	andi	r31, 0x6F	; 111
    66ea:	9f 2e       	mov	r9, r31
    66ec:	97 ff       	sbrs	r25, 7
    66ee:	09 c0       	rjmp	.+18     	; 0x6702 <vfprintf+0x4f0>
    66f0:	90 95       	com	r25
    66f2:	80 95       	com	r24
    66f4:	70 95       	com	r23
    66f6:	61 95       	neg	r22
    66f8:	7f 4f       	sbci	r23, 0xFF	; 255
    66fa:	8f 4f       	sbci	r24, 0xFF	; 255
    66fc:	9f 4f       	sbci	r25, 0xFF	; 255
    66fe:	f0 68       	ori	r31, 0x80	; 128
    6700:	9f 2e       	mov	r9, r31
    6702:	2a e0       	ldi	r18, 0x0A	; 10
    6704:	30 e0       	ldi	r19, 0x00	; 0
    6706:	a3 01       	movw	r20, r6
    6708:	5c d5       	rcall	.+2744   	; 0x71c2 <__ultoa_invert>
    670a:	c8 2e       	mov	r12, r24
    670c:	c6 18       	sub	r12, r6
    670e:	3e c0       	rjmp	.+124    	; 0x678c <vfprintf+0x57a>
    6710:	09 2d       	mov	r16, r9
    6712:	85 37       	cpi	r24, 0x75	; 117
    6714:	21 f4       	brne	.+8      	; 0x671e <vfprintf+0x50c>
    6716:	0f 7e       	andi	r16, 0xEF	; 239
    6718:	2a e0       	ldi	r18, 0x0A	; 10
    671a:	30 e0       	ldi	r19, 0x00	; 0
    671c:	1d c0       	rjmp	.+58     	; 0x6758 <vfprintf+0x546>
    671e:	09 7f       	andi	r16, 0xF9	; 249
    6720:	8f 36       	cpi	r24, 0x6F	; 111
    6722:	91 f0       	breq	.+36     	; 0x6748 <vfprintf+0x536>
    6724:	18 f4       	brcc	.+6      	; 0x672c <vfprintf+0x51a>
    6726:	88 35       	cpi	r24, 0x58	; 88
    6728:	59 f0       	breq	.+22     	; 0x6740 <vfprintf+0x52e>
    672a:	bc c0       	rjmp	.+376    	; 0x68a4 <vfprintf+0x692>
    672c:	80 37       	cpi	r24, 0x70	; 112
    672e:	19 f0       	breq	.+6      	; 0x6736 <vfprintf+0x524>
    6730:	88 37       	cpi	r24, 0x78	; 120
    6732:	11 f0       	breq	.+4      	; 0x6738 <vfprintf+0x526>
    6734:	b7 c0       	rjmp	.+366    	; 0x68a4 <vfprintf+0x692>
    6736:	00 61       	ori	r16, 0x10	; 16
    6738:	04 ff       	sbrs	r16, 4
    673a:	09 c0       	rjmp	.+18     	; 0x674e <vfprintf+0x53c>
    673c:	04 60       	ori	r16, 0x04	; 4
    673e:	07 c0       	rjmp	.+14     	; 0x674e <vfprintf+0x53c>
    6740:	94 fe       	sbrs	r9, 4
    6742:	08 c0       	rjmp	.+16     	; 0x6754 <vfprintf+0x542>
    6744:	06 60       	ori	r16, 0x06	; 6
    6746:	06 c0       	rjmp	.+12     	; 0x6754 <vfprintf+0x542>
    6748:	28 e0       	ldi	r18, 0x08	; 8
    674a:	30 e0       	ldi	r19, 0x00	; 0
    674c:	05 c0       	rjmp	.+10     	; 0x6758 <vfprintf+0x546>
    674e:	20 e1       	ldi	r18, 0x10	; 16
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	02 c0       	rjmp	.+4      	; 0x6758 <vfprintf+0x546>
    6754:	20 e1       	ldi	r18, 0x10	; 16
    6756:	32 e0       	ldi	r19, 0x02	; 2
    6758:	56 01       	movw	r10, r12
    675a:	07 ff       	sbrs	r16, 7
    675c:	09 c0       	rjmp	.+18     	; 0x6770 <vfprintf+0x55e>
    675e:	84 e0       	ldi	r24, 0x04	; 4
    6760:	a8 0e       	add	r10, r24
    6762:	b1 1c       	adc	r11, r1
    6764:	f6 01       	movw	r30, r12
    6766:	60 81       	ld	r22, Z
    6768:	71 81       	ldd	r23, Z+1	; 0x01
    676a:	82 81       	ldd	r24, Z+2	; 0x02
    676c:	93 81       	ldd	r25, Z+3	; 0x03
    676e:	08 c0       	rjmp	.+16     	; 0x6780 <vfprintf+0x56e>
    6770:	f2 e0       	ldi	r31, 0x02	; 2
    6772:	af 0e       	add	r10, r31
    6774:	b1 1c       	adc	r11, r1
    6776:	f6 01       	movw	r30, r12
    6778:	60 81       	ld	r22, Z
    677a:	71 81       	ldd	r23, Z+1	; 0x01
    677c:	80 e0       	ldi	r24, 0x00	; 0
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	a3 01       	movw	r20, r6
    6782:	1f d5       	rcall	.+2622   	; 0x71c2 <__ultoa_invert>
    6784:	c8 2e       	mov	r12, r24
    6786:	c6 18       	sub	r12, r6
    6788:	0f 77       	andi	r16, 0x7F	; 127
    678a:	90 2e       	mov	r9, r16
    678c:	96 fe       	sbrs	r9, 6
    678e:	0b c0       	rjmp	.+22     	; 0x67a6 <vfprintf+0x594>
    6790:	09 2d       	mov	r16, r9
    6792:	0e 7f       	andi	r16, 0xFE	; 254
    6794:	c1 16       	cp	r12, r17
    6796:	50 f4       	brcc	.+20     	; 0x67ac <vfprintf+0x59a>
    6798:	94 fe       	sbrs	r9, 4
    679a:	0a c0       	rjmp	.+20     	; 0x67b0 <vfprintf+0x59e>
    679c:	92 fc       	sbrc	r9, 2
    679e:	08 c0       	rjmp	.+16     	; 0x67b0 <vfprintf+0x59e>
    67a0:	09 2d       	mov	r16, r9
    67a2:	0e 7e       	andi	r16, 0xEE	; 238
    67a4:	05 c0       	rjmp	.+10     	; 0x67b0 <vfprintf+0x59e>
    67a6:	dc 2c       	mov	r13, r12
    67a8:	09 2d       	mov	r16, r9
    67aa:	03 c0       	rjmp	.+6      	; 0x67b2 <vfprintf+0x5a0>
    67ac:	dc 2c       	mov	r13, r12
    67ae:	01 c0       	rjmp	.+2      	; 0x67b2 <vfprintf+0x5a0>
    67b0:	d1 2e       	mov	r13, r17
    67b2:	04 ff       	sbrs	r16, 4
    67b4:	0d c0       	rjmp	.+26     	; 0x67d0 <vfprintf+0x5be>
    67b6:	fe 01       	movw	r30, r28
    67b8:	ec 0d       	add	r30, r12
    67ba:	f1 1d       	adc	r31, r1
    67bc:	80 81       	ld	r24, Z
    67be:	80 33       	cpi	r24, 0x30	; 48
    67c0:	11 f4       	brne	.+4      	; 0x67c6 <vfprintf+0x5b4>
    67c2:	09 7e       	andi	r16, 0xE9	; 233
    67c4:	09 c0       	rjmp	.+18     	; 0x67d8 <vfprintf+0x5c6>
    67c6:	02 ff       	sbrs	r16, 2
    67c8:	06 c0       	rjmp	.+12     	; 0x67d6 <vfprintf+0x5c4>
    67ca:	d3 94       	inc	r13
    67cc:	d3 94       	inc	r13
    67ce:	04 c0       	rjmp	.+8      	; 0x67d8 <vfprintf+0x5c6>
    67d0:	80 2f       	mov	r24, r16
    67d2:	86 78       	andi	r24, 0x86	; 134
    67d4:	09 f0       	breq	.+2      	; 0x67d8 <vfprintf+0x5c6>
    67d6:	d3 94       	inc	r13
    67d8:	03 fd       	sbrc	r16, 3
    67da:	10 c0       	rjmp	.+32     	; 0x67fc <vfprintf+0x5ea>
    67dc:	00 ff       	sbrs	r16, 0
    67de:	06 c0       	rjmp	.+12     	; 0x67ec <vfprintf+0x5da>
    67e0:	1c 2d       	mov	r17, r12
    67e2:	d5 14       	cp	r13, r5
    67e4:	78 f4       	brcc	.+30     	; 0x6804 <vfprintf+0x5f2>
    67e6:	15 0d       	add	r17, r5
    67e8:	1d 19       	sub	r17, r13
    67ea:	0c c0       	rjmp	.+24     	; 0x6804 <vfprintf+0x5f2>
    67ec:	d5 14       	cp	r13, r5
    67ee:	50 f4       	brcc	.+20     	; 0x6804 <vfprintf+0x5f2>
    67f0:	b7 01       	movw	r22, r14
    67f2:	80 e2       	ldi	r24, 0x20	; 32
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	31 d4       	rcall	.+2146   	; 0x705a <fputc>
    67f8:	d3 94       	inc	r13
    67fa:	f8 cf       	rjmp	.-16     	; 0x67ec <vfprintf+0x5da>
    67fc:	d5 14       	cp	r13, r5
    67fe:	10 f4       	brcc	.+4      	; 0x6804 <vfprintf+0x5f2>
    6800:	5d 18       	sub	r5, r13
    6802:	01 c0       	rjmp	.+2      	; 0x6806 <vfprintf+0x5f4>
    6804:	51 2c       	mov	r5, r1
    6806:	04 ff       	sbrs	r16, 4
    6808:	0f c0       	rjmp	.+30     	; 0x6828 <vfprintf+0x616>
    680a:	b7 01       	movw	r22, r14
    680c:	80 e3       	ldi	r24, 0x30	; 48
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	24 d4       	rcall	.+2120   	; 0x705a <fputc>
    6812:	02 ff       	sbrs	r16, 2
    6814:	16 c0       	rjmp	.+44     	; 0x6842 <vfprintf+0x630>
    6816:	01 fd       	sbrc	r16, 1
    6818:	03 c0       	rjmp	.+6      	; 0x6820 <vfprintf+0x60e>
    681a:	88 e7       	ldi	r24, 0x78	; 120
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	02 c0       	rjmp	.+4      	; 0x6824 <vfprintf+0x612>
    6820:	88 e5       	ldi	r24, 0x58	; 88
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	b7 01       	movw	r22, r14
    6826:	0c c0       	rjmp	.+24     	; 0x6840 <vfprintf+0x62e>
    6828:	80 2f       	mov	r24, r16
    682a:	86 78       	andi	r24, 0x86	; 134
    682c:	51 f0       	breq	.+20     	; 0x6842 <vfprintf+0x630>
    682e:	01 ff       	sbrs	r16, 1
    6830:	02 c0       	rjmp	.+4      	; 0x6836 <vfprintf+0x624>
    6832:	8b e2       	ldi	r24, 0x2B	; 43
    6834:	01 c0       	rjmp	.+2      	; 0x6838 <vfprintf+0x626>
    6836:	80 e2       	ldi	r24, 0x20	; 32
    6838:	07 fd       	sbrc	r16, 7
    683a:	8d e2       	ldi	r24, 0x2D	; 45
    683c:	b7 01       	movw	r22, r14
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	0c d4       	rcall	.+2072   	; 0x705a <fputc>
    6842:	c1 16       	cp	r12, r17
    6844:	30 f4       	brcc	.+12     	; 0x6852 <vfprintf+0x640>
    6846:	b7 01       	movw	r22, r14
    6848:	80 e3       	ldi	r24, 0x30	; 48
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	06 d4       	rcall	.+2060   	; 0x705a <fputc>
    684e:	11 50       	subi	r17, 0x01	; 1
    6850:	f8 cf       	rjmp	.-16     	; 0x6842 <vfprintf+0x630>
    6852:	ca 94       	dec	r12
    6854:	f3 01       	movw	r30, r6
    6856:	ec 0d       	add	r30, r12
    6858:	f1 1d       	adc	r31, r1
    685a:	80 81       	ld	r24, Z
    685c:	b7 01       	movw	r22, r14
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	fc d3       	rcall	.+2040   	; 0x705a <fputc>
    6862:	c1 10       	cpse	r12, r1
    6864:	f6 cf       	rjmp	.-20     	; 0x6852 <vfprintf+0x640>
    6866:	15 c0       	rjmp	.+42     	; 0x6892 <vfprintf+0x680>
    6868:	f4 e0       	ldi	r31, 0x04	; 4
    686a:	f5 15       	cp	r31, r5
    686c:	50 f5       	brcc	.+84     	; 0x68c2 <vfprintf+0x6b0>
    686e:	84 e0       	ldi	r24, 0x04	; 4
    6870:	58 1a       	sub	r5, r24
    6872:	93 fe       	sbrs	r9, 3
    6874:	1e c0       	rjmp	.+60     	; 0x68b2 <vfprintf+0x6a0>
    6876:	01 11       	cpse	r16, r1
    6878:	25 c0       	rjmp	.+74     	; 0x68c4 <vfprintf+0x6b2>
    687a:	2c 85       	ldd	r18, Y+12	; 0x0c
    687c:	23 ff       	sbrs	r18, 3
    687e:	27 c0       	rjmp	.+78     	; 0x68ce <vfprintf+0x6bc>
    6880:	0a e9       	ldi	r16, 0x9A	; 154
    6882:	11 e0       	ldi	r17, 0x01	; 1
    6884:	39 2d       	mov	r19, r9
    6886:	30 71       	andi	r19, 0x10	; 16
    6888:	93 2e       	mov	r9, r19
    688a:	f8 01       	movw	r30, r16
    688c:	84 91       	lpm	r24, Z
    688e:	81 11       	cpse	r24, r1
    6890:	21 c0       	rjmp	.+66     	; 0x68d4 <vfprintf+0x6c2>
    6892:	55 20       	and	r5, r5
    6894:	09 f4       	brne	.+2      	; 0x6898 <vfprintf+0x686>
    6896:	fc cc       	rjmp	.-1544   	; 0x6290 <vfprintf+0x7e>
    6898:	b7 01       	movw	r22, r14
    689a:	80 e2       	ldi	r24, 0x20	; 32
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	dd d3       	rcall	.+1978   	; 0x705a <fputc>
    68a0:	5a 94       	dec	r5
    68a2:	f7 cf       	rjmp	.-18     	; 0x6892 <vfprintf+0x680>
    68a4:	f7 01       	movw	r30, r14
    68a6:	86 81       	ldd	r24, Z+6	; 0x06
    68a8:	97 81       	ldd	r25, Z+7	; 0x07
    68aa:	23 c0       	rjmp	.+70     	; 0x68f2 <vfprintf+0x6e0>
    68ac:	8f ef       	ldi	r24, 0xFF	; 255
    68ae:	9f ef       	ldi	r25, 0xFF	; 255
    68b0:	20 c0       	rjmp	.+64     	; 0x68f2 <vfprintf+0x6e0>
    68b2:	b7 01       	movw	r22, r14
    68b4:	80 e2       	ldi	r24, 0x20	; 32
    68b6:	90 e0       	ldi	r25, 0x00	; 0
    68b8:	d0 d3       	rcall	.+1952   	; 0x705a <fputc>
    68ba:	5a 94       	dec	r5
    68bc:	51 10       	cpse	r5, r1
    68be:	f9 cf       	rjmp	.-14     	; 0x68b2 <vfprintf+0x6a0>
    68c0:	da cf       	rjmp	.-76     	; 0x6876 <vfprintf+0x664>
    68c2:	51 2c       	mov	r5, r1
    68c4:	b7 01       	movw	r22, r14
    68c6:	80 2f       	mov	r24, r16
    68c8:	90 e0       	ldi	r25, 0x00	; 0
    68ca:	c7 d3       	rcall	.+1934   	; 0x705a <fputc>
    68cc:	d6 cf       	rjmp	.-84     	; 0x687a <vfprintf+0x668>
    68ce:	0e e9       	ldi	r16, 0x9E	; 158
    68d0:	11 e0       	ldi	r17, 0x01	; 1
    68d2:	d8 cf       	rjmp	.-80     	; 0x6884 <vfprintf+0x672>
    68d4:	91 10       	cpse	r9, r1
    68d6:	80 52       	subi	r24, 0x20	; 32
    68d8:	b7 01       	movw	r22, r14
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	be d3       	rcall	.+1916   	; 0x705a <fputc>
    68de:	0f 5f       	subi	r16, 0xFF	; 255
    68e0:	1f 4f       	sbci	r17, 0xFF	; 255
    68e2:	d3 cf       	rjmp	.-90     	; 0x688a <vfprintf+0x678>
    68e4:	23 e0       	ldi	r18, 0x03	; 3
    68e6:	25 15       	cp	r18, r5
    68e8:	10 f4       	brcc	.+4      	; 0x68ee <vfprintf+0x6dc>
    68ea:	83 e0       	ldi	r24, 0x03	; 3
    68ec:	c1 cf       	rjmp	.-126    	; 0x6870 <vfprintf+0x65e>
    68ee:	51 2c       	mov	r5, r1
    68f0:	c4 cf       	rjmp	.-120    	; 0x687a <vfprintf+0x668>
    68f2:	60 96       	adiw	r28, 0x10	; 16
    68f4:	0f b6       	in	r0, 0x3f	; 63
    68f6:	f8 94       	cli
    68f8:	de bf       	out	0x3e, r29	; 62
    68fa:	0f be       	out	0x3f, r0	; 63
    68fc:	cd bf       	out	0x3d, r28	; 61
    68fe:	df 91       	pop	r29
    6900:	cf 91       	pop	r28
    6902:	1f 91       	pop	r17
    6904:	0f 91       	pop	r16
    6906:	ff 90       	pop	r15
    6908:	ef 90       	pop	r14
    690a:	df 90       	pop	r13
    690c:	cf 90       	pop	r12
    690e:	bf 90       	pop	r11
    6910:	af 90       	pop	r10
    6912:	9f 90       	pop	r9
    6914:	8f 90       	pop	r8
    6916:	7f 90       	pop	r7
    6918:	6f 90       	pop	r6
    691a:	5f 90       	pop	r5
    691c:	4f 90       	pop	r4
    691e:	3f 90       	pop	r3
    6920:	2f 90       	pop	r2
    6922:	08 95       	ret

00006924 <__divsf3>:
    6924:	12 d0       	rcall	.+36     	; 0x694a <__divsf3x>
    6926:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <__fp_round>
    692a:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__fp_pscB>
    692e:	58 f0       	brcs	.+22     	; 0x6946 <__divsf3+0x22>
    6930:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__fp_pscA>
    6934:	40 f0       	brcs	.+16     	; 0x6946 <__divsf3+0x22>
    6936:	29 f4       	brne	.+10     	; 0x6942 <__divsf3+0x1e>
    6938:	5f 3f       	cpi	r21, 0xFF	; 255
    693a:	29 f0       	breq	.+10     	; 0x6946 <__divsf3+0x22>
    693c:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <__fp_inf>
    6940:	51 11       	cpse	r21, r1
    6942:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__fp_szero>
    6946:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <__fp_nan>

0000694a <__divsf3x>:
    694a:	0e 94 ad 22 	call	0x455a	; 0x455a <__fp_split3>
    694e:	68 f3       	brcs	.-38     	; 0x692a <__divsf3+0x6>

00006950 <__divsf3_pse>:
    6950:	99 23       	and	r25, r25
    6952:	b1 f3       	breq	.-20     	; 0x6940 <__divsf3+0x1c>
    6954:	55 23       	and	r21, r21
    6956:	91 f3       	breq	.-28     	; 0x693c <__divsf3+0x18>
    6958:	95 1b       	sub	r25, r21
    695a:	55 0b       	sbc	r21, r21
    695c:	bb 27       	eor	r27, r27
    695e:	aa 27       	eor	r26, r26
    6960:	62 17       	cp	r22, r18
    6962:	73 07       	cpc	r23, r19
    6964:	84 07       	cpc	r24, r20
    6966:	38 f0       	brcs	.+14     	; 0x6976 <__divsf3_pse+0x26>
    6968:	9f 5f       	subi	r25, 0xFF	; 255
    696a:	5f 4f       	sbci	r21, 0xFF	; 255
    696c:	22 0f       	add	r18, r18
    696e:	33 1f       	adc	r19, r19
    6970:	44 1f       	adc	r20, r20
    6972:	aa 1f       	adc	r26, r26
    6974:	a9 f3       	breq	.-22     	; 0x6960 <__divsf3_pse+0x10>
    6976:	35 d0       	rcall	.+106    	; 0x69e2 <__divsf3_pse+0x92>
    6978:	0e 2e       	mov	r0, r30
    697a:	3a f0       	brmi	.+14     	; 0x698a <__divsf3_pse+0x3a>
    697c:	e0 e8       	ldi	r30, 0x80	; 128
    697e:	32 d0       	rcall	.+100    	; 0x69e4 <__divsf3_pse+0x94>
    6980:	91 50       	subi	r25, 0x01	; 1
    6982:	50 40       	sbci	r21, 0x00	; 0
    6984:	e6 95       	lsr	r30
    6986:	00 1c       	adc	r0, r0
    6988:	ca f7       	brpl	.-14     	; 0x697c <__divsf3_pse+0x2c>
    698a:	2b d0       	rcall	.+86     	; 0x69e2 <__divsf3_pse+0x92>
    698c:	fe 2f       	mov	r31, r30
    698e:	29 d0       	rcall	.+82     	; 0x69e2 <__divsf3_pse+0x92>
    6990:	66 0f       	add	r22, r22
    6992:	77 1f       	adc	r23, r23
    6994:	88 1f       	adc	r24, r24
    6996:	bb 1f       	adc	r27, r27
    6998:	26 17       	cp	r18, r22
    699a:	37 07       	cpc	r19, r23
    699c:	48 07       	cpc	r20, r24
    699e:	ab 07       	cpc	r26, r27
    69a0:	b0 e8       	ldi	r27, 0x80	; 128
    69a2:	09 f0       	breq	.+2      	; 0x69a6 <__divsf3_pse+0x56>
    69a4:	bb 0b       	sbc	r27, r27
    69a6:	80 2d       	mov	r24, r0
    69a8:	bf 01       	movw	r22, r30
    69aa:	ff 27       	eor	r31, r31
    69ac:	93 58       	subi	r25, 0x83	; 131
    69ae:	5f 4f       	sbci	r21, 0xFF	; 255
    69b0:	3a f0       	brmi	.+14     	; 0x69c0 <__divsf3_pse+0x70>
    69b2:	9e 3f       	cpi	r25, 0xFE	; 254
    69b4:	51 05       	cpc	r21, r1
    69b6:	78 f0       	brcs	.+30     	; 0x69d6 <__divsf3_pse+0x86>
    69b8:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <__fp_inf>
    69bc:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__fp_szero>
    69c0:	5f 3f       	cpi	r21, 0xFF	; 255
    69c2:	e4 f3       	brlt	.-8      	; 0x69bc <__divsf3_pse+0x6c>
    69c4:	98 3e       	cpi	r25, 0xE8	; 232
    69c6:	d4 f3       	brlt	.-12     	; 0x69bc <__divsf3_pse+0x6c>
    69c8:	86 95       	lsr	r24
    69ca:	77 95       	ror	r23
    69cc:	67 95       	ror	r22
    69ce:	b7 95       	ror	r27
    69d0:	f7 95       	ror	r31
    69d2:	9f 5f       	subi	r25, 0xFF	; 255
    69d4:	c9 f7       	brne	.-14     	; 0x69c8 <__divsf3_pse+0x78>
    69d6:	88 0f       	add	r24, r24
    69d8:	91 1d       	adc	r25, r1
    69da:	96 95       	lsr	r25
    69dc:	87 95       	ror	r24
    69de:	97 f9       	bld	r25, 7
    69e0:	08 95       	ret
    69e2:	e1 e0       	ldi	r30, 0x01	; 1
    69e4:	66 0f       	add	r22, r22
    69e6:	77 1f       	adc	r23, r23
    69e8:	88 1f       	adc	r24, r24
    69ea:	bb 1f       	adc	r27, r27
    69ec:	62 17       	cp	r22, r18
    69ee:	73 07       	cpc	r23, r19
    69f0:	84 07       	cpc	r24, r20
    69f2:	ba 07       	cpc	r27, r26
    69f4:	20 f0       	brcs	.+8      	; 0x69fe <__divsf3_pse+0xae>
    69f6:	62 1b       	sub	r22, r18
    69f8:	73 0b       	sbc	r23, r19
    69fa:	84 0b       	sbc	r24, r20
    69fc:	ba 0b       	sbc	r27, r26
    69fe:	ee 1f       	adc	r30, r30
    6a00:	88 f7       	brcc	.-30     	; 0x69e4 <__divsf3_pse+0x94>
    6a02:	e0 95       	com	r30
    6a04:	08 95       	ret

00006a06 <__floatunsisf>:
    6a06:	e8 94       	clt
    6a08:	09 c0       	rjmp	.+18     	; 0x6a1c <__floatsisf+0x12>

00006a0a <__floatsisf>:
    6a0a:	97 fb       	bst	r25, 7
    6a0c:	3e f4       	brtc	.+14     	; 0x6a1c <__floatsisf+0x12>
    6a0e:	90 95       	com	r25
    6a10:	80 95       	com	r24
    6a12:	70 95       	com	r23
    6a14:	61 95       	neg	r22
    6a16:	7f 4f       	sbci	r23, 0xFF	; 255
    6a18:	8f 4f       	sbci	r24, 0xFF	; 255
    6a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6a1c:	99 23       	and	r25, r25
    6a1e:	a9 f0       	breq	.+42     	; 0x6a4a <__floatsisf+0x40>
    6a20:	f9 2f       	mov	r31, r25
    6a22:	96 e9       	ldi	r25, 0x96	; 150
    6a24:	bb 27       	eor	r27, r27
    6a26:	93 95       	inc	r25
    6a28:	f6 95       	lsr	r31
    6a2a:	87 95       	ror	r24
    6a2c:	77 95       	ror	r23
    6a2e:	67 95       	ror	r22
    6a30:	b7 95       	ror	r27
    6a32:	f1 11       	cpse	r31, r1
    6a34:	f8 cf       	rjmp	.-16     	; 0x6a26 <__floatsisf+0x1c>
    6a36:	fa f4       	brpl	.+62     	; 0x6a76 <__floatsisf+0x6c>
    6a38:	bb 0f       	add	r27, r27
    6a3a:	11 f4       	brne	.+4      	; 0x6a40 <__floatsisf+0x36>
    6a3c:	60 ff       	sbrs	r22, 0
    6a3e:	1b c0       	rjmp	.+54     	; 0x6a76 <__floatsisf+0x6c>
    6a40:	6f 5f       	subi	r22, 0xFF	; 255
    6a42:	7f 4f       	sbci	r23, 0xFF	; 255
    6a44:	8f 4f       	sbci	r24, 0xFF	; 255
    6a46:	9f 4f       	sbci	r25, 0xFF	; 255
    6a48:	16 c0       	rjmp	.+44     	; 0x6a76 <__floatsisf+0x6c>
    6a4a:	88 23       	and	r24, r24
    6a4c:	11 f0       	breq	.+4      	; 0x6a52 <__floatsisf+0x48>
    6a4e:	96 e9       	ldi	r25, 0x96	; 150
    6a50:	11 c0       	rjmp	.+34     	; 0x6a74 <__floatsisf+0x6a>
    6a52:	77 23       	and	r23, r23
    6a54:	21 f0       	breq	.+8      	; 0x6a5e <__floatsisf+0x54>
    6a56:	9e e8       	ldi	r25, 0x8E	; 142
    6a58:	87 2f       	mov	r24, r23
    6a5a:	76 2f       	mov	r23, r22
    6a5c:	05 c0       	rjmp	.+10     	; 0x6a68 <__floatsisf+0x5e>
    6a5e:	66 23       	and	r22, r22
    6a60:	71 f0       	breq	.+28     	; 0x6a7e <__floatsisf+0x74>
    6a62:	96 e8       	ldi	r25, 0x86	; 134
    6a64:	86 2f       	mov	r24, r22
    6a66:	70 e0       	ldi	r23, 0x00	; 0
    6a68:	60 e0       	ldi	r22, 0x00	; 0
    6a6a:	2a f0       	brmi	.+10     	; 0x6a76 <__floatsisf+0x6c>
    6a6c:	9a 95       	dec	r25
    6a6e:	66 0f       	add	r22, r22
    6a70:	77 1f       	adc	r23, r23
    6a72:	88 1f       	adc	r24, r24
    6a74:	da f7       	brpl	.-10     	; 0x6a6c <__floatsisf+0x62>
    6a76:	88 0f       	add	r24, r24
    6a78:	96 95       	lsr	r25
    6a7a:	87 95       	ror	r24
    6a7c:	97 f9       	bld	r25, 7
    6a7e:	08 95       	ret

00006a80 <__gesf2>:
    6a80:	03 d0       	rcall	.+6      	; 0x6a88 <__fp_cmp>
    6a82:	08 f4       	brcc	.+2      	; 0x6a86 <__gesf2+0x6>
    6a84:	8f ef       	ldi	r24, 0xFF	; 255
    6a86:	08 95       	ret

00006a88 <__fp_cmp>:
    6a88:	99 0f       	add	r25, r25
    6a8a:	00 08       	sbc	r0, r0
    6a8c:	55 0f       	add	r21, r21
    6a8e:	aa 0b       	sbc	r26, r26
    6a90:	e0 e8       	ldi	r30, 0x80	; 128
    6a92:	fe ef       	ldi	r31, 0xFE	; 254
    6a94:	16 16       	cp	r1, r22
    6a96:	17 06       	cpc	r1, r23
    6a98:	e8 07       	cpc	r30, r24
    6a9a:	f9 07       	cpc	r31, r25
    6a9c:	c0 f0       	brcs	.+48     	; 0x6ace <__fp_cmp+0x46>
    6a9e:	12 16       	cp	r1, r18
    6aa0:	13 06       	cpc	r1, r19
    6aa2:	e4 07       	cpc	r30, r20
    6aa4:	f5 07       	cpc	r31, r21
    6aa6:	98 f0       	brcs	.+38     	; 0x6ace <__fp_cmp+0x46>
    6aa8:	62 1b       	sub	r22, r18
    6aaa:	73 0b       	sbc	r23, r19
    6aac:	84 0b       	sbc	r24, r20
    6aae:	95 0b       	sbc	r25, r21
    6ab0:	39 f4       	brne	.+14     	; 0x6ac0 <__fp_cmp+0x38>
    6ab2:	0a 26       	eor	r0, r26
    6ab4:	61 f0       	breq	.+24     	; 0x6ace <__fp_cmp+0x46>
    6ab6:	23 2b       	or	r18, r19
    6ab8:	24 2b       	or	r18, r20
    6aba:	25 2b       	or	r18, r21
    6abc:	21 f4       	brne	.+8      	; 0x6ac6 <__fp_cmp+0x3e>
    6abe:	08 95       	ret
    6ac0:	0a 26       	eor	r0, r26
    6ac2:	09 f4       	brne	.+2      	; 0x6ac6 <__fp_cmp+0x3e>
    6ac4:	a1 40       	sbci	r26, 0x01	; 1
    6ac6:	a6 95       	lsr	r26
    6ac8:	8f ef       	ldi	r24, 0xFF	; 255
    6aca:	81 1d       	adc	r24, r1
    6acc:	81 1d       	adc	r24, r1
    6ace:	08 95       	ret

00006ad0 <__udivmodsi4>:
    6ad0:	a1 e2       	ldi	r26, 0x21	; 33
    6ad2:	1a 2e       	mov	r1, r26
    6ad4:	aa 1b       	sub	r26, r26
    6ad6:	bb 1b       	sub	r27, r27
    6ad8:	fd 01       	movw	r30, r26
    6ada:	0d c0       	rjmp	.+26     	; 0x6af6 <__udivmodsi4_ep>

00006adc <__udivmodsi4_loop>:
    6adc:	aa 1f       	adc	r26, r26
    6ade:	bb 1f       	adc	r27, r27
    6ae0:	ee 1f       	adc	r30, r30
    6ae2:	ff 1f       	adc	r31, r31
    6ae4:	a2 17       	cp	r26, r18
    6ae6:	b3 07       	cpc	r27, r19
    6ae8:	e4 07       	cpc	r30, r20
    6aea:	f5 07       	cpc	r31, r21
    6aec:	20 f0       	brcs	.+8      	; 0x6af6 <__udivmodsi4_ep>
    6aee:	a2 1b       	sub	r26, r18
    6af0:	b3 0b       	sbc	r27, r19
    6af2:	e4 0b       	sbc	r30, r20
    6af4:	f5 0b       	sbc	r31, r21

00006af6 <__udivmodsi4_ep>:
    6af6:	66 1f       	adc	r22, r22
    6af8:	77 1f       	adc	r23, r23
    6afa:	88 1f       	adc	r24, r24
    6afc:	99 1f       	adc	r25, r25
    6afe:	1a 94       	dec	r1
    6b00:	69 f7       	brne	.-38     	; 0x6adc <__udivmodsi4_loop>
    6b02:	60 95       	com	r22
    6b04:	70 95       	com	r23
    6b06:	80 95       	com	r24
    6b08:	90 95       	com	r25
    6b0a:	9b 01       	movw	r18, r22
    6b0c:	ac 01       	movw	r20, r24
    6b0e:	bd 01       	movw	r22, r26
    6b10:	cf 01       	movw	r24, r30
    6b12:	08 95       	ret

00006b14 <__tablejump2__>:
    6b14:	ee 0f       	add	r30, r30
    6b16:	ff 1f       	adc	r31, r31
    6b18:	88 1f       	adc	r24, r24
    6b1a:	8b bf       	out	0x3b, r24	; 59
    6b1c:	07 90       	elpm	r0, Z+
    6b1e:	f6 91       	elpm	r31, Z
    6b20:	e0 2d       	mov	r30, r0
    6b22:	19 94       	eijmp

00006b24 <__umulhisi3>:
    6b24:	a2 9f       	mul	r26, r18
    6b26:	b0 01       	movw	r22, r0
    6b28:	b3 9f       	mul	r27, r19
    6b2a:	c0 01       	movw	r24, r0
    6b2c:	a3 9f       	mul	r26, r19
    6b2e:	70 0d       	add	r23, r0
    6b30:	81 1d       	adc	r24, r1
    6b32:	11 24       	eor	r1, r1
    6b34:	91 1d       	adc	r25, r1
    6b36:	b2 9f       	mul	r27, r18
    6b38:	70 0d       	add	r23, r0
    6b3a:	81 1d       	adc	r24, r1
    6b3c:	11 24       	eor	r1, r1
    6b3e:	91 1d       	adc	r25, r1
    6b40:	08 95       	ret

00006b42 <calloc>:
    6b42:	0f 93       	push	r16
    6b44:	1f 93       	push	r17
    6b46:	cf 93       	push	r28
    6b48:	df 93       	push	r29
    6b4a:	86 9f       	mul	r24, r22
    6b4c:	80 01       	movw	r16, r0
    6b4e:	87 9f       	mul	r24, r23
    6b50:	10 0d       	add	r17, r0
    6b52:	96 9f       	mul	r25, r22
    6b54:	10 0d       	add	r17, r0
    6b56:	11 24       	eor	r1, r1
    6b58:	c8 01       	movw	r24, r16
    6b5a:	0d d0       	rcall	.+26     	; 0x6b76 <malloc>
    6b5c:	ec 01       	movw	r28, r24
    6b5e:	00 97       	sbiw	r24, 0x00	; 0
    6b60:	21 f0       	breq	.+8      	; 0x6b6a <calloc+0x28>
    6b62:	a8 01       	movw	r20, r16
    6b64:	60 e0       	ldi	r22, 0x00	; 0
    6b66:	70 e0       	ldi	r23, 0x00	; 0
    6b68:	17 d2       	rcall	.+1070   	; 0x6f98 <memset>
    6b6a:	ce 01       	movw	r24, r28
    6b6c:	df 91       	pop	r29
    6b6e:	cf 91       	pop	r28
    6b70:	1f 91       	pop	r17
    6b72:	0f 91       	pop	r16
    6b74:	08 95       	ret

00006b76 <malloc>:
    6b76:	0f 93       	push	r16
    6b78:	1f 93       	push	r17
    6b7a:	cf 93       	push	r28
    6b7c:	df 93       	push	r29
    6b7e:	82 30       	cpi	r24, 0x02	; 2
    6b80:	91 05       	cpc	r25, r1
    6b82:	10 f4       	brcc	.+4      	; 0x6b88 <malloc+0x12>
    6b84:	82 e0       	ldi	r24, 0x02	; 2
    6b86:	90 e0       	ldi	r25, 0x00	; 0
    6b88:	e0 91 3f 16 	lds	r30, 0x163F	; 0x80163f <__flp>
    6b8c:	f0 91 40 16 	lds	r31, 0x1640	; 0x801640 <__flp+0x1>
    6b90:	20 e0       	ldi	r18, 0x00	; 0
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	a0 e0       	ldi	r26, 0x00	; 0
    6b96:	b0 e0       	ldi	r27, 0x00	; 0
    6b98:	30 97       	sbiw	r30, 0x00	; 0
    6b9a:	19 f1       	breq	.+70     	; 0x6be2 <malloc+0x6c>
    6b9c:	40 81       	ld	r20, Z
    6b9e:	51 81       	ldd	r21, Z+1	; 0x01
    6ba0:	02 81       	ldd	r16, Z+2	; 0x02
    6ba2:	13 81       	ldd	r17, Z+3	; 0x03
    6ba4:	48 17       	cp	r20, r24
    6ba6:	59 07       	cpc	r21, r25
    6ba8:	c8 f0       	brcs	.+50     	; 0x6bdc <malloc+0x66>
    6baa:	84 17       	cp	r24, r20
    6bac:	95 07       	cpc	r25, r21
    6bae:	69 f4       	brne	.+26     	; 0x6bca <malloc+0x54>
    6bb0:	10 97       	sbiw	r26, 0x00	; 0
    6bb2:	31 f0       	breq	.+12     	; 0x6bc0 <malloc+0x4a>
    6bb4:	12 96       	adiw	r26, 0x02	; 2
    6bb6:	0c 93       	st	X, r16
    6bb8:	12 97       	sbiw	r26, 0x02	; 2
    6bba:	13 96       	adiw	r26, 0x03	; 3
    6bbc:	1c 93       	st	X, r17
    6bbe:	27 c0       	rjmp	.+78     	; 0x6c0e <malloc+0x98>
    6bc0:	00 93 3f 16 	sts	0x163F, r16	; 0x80163f <__flp>
    6bc4:	10 93 40 16 	sts	0x1640, r17	; 0x801640 <__flp+0x1>
    6bc8:	22 c0       	rjmp	.+68     	; 0x6c0e <malloc+0x98>
    6bca:	21 15       	cp	r18, r1
    6bcc:	31 05       	cpc	r19, r1
    6bce:	19 f0       	breq	.+6      	; 0x6bd6 <malloc+0x60>
    6bd0:	42 17       	cp	r20, r18
    6bd2:	53 07       	cpc	r21, r19
    6bd4:	18 f4       	brcc	.+6      	; 0x6bdc <malloc+0x66>
    6bd6:	9a 01       	movw	r18, r20
    6bd8:	bd 01       	movw	r22, r26
    6bda:	ef 01       	movw	r28, r30
    6bdc:	df 01       	movw	r26, r30
    6bde:	f8 01       	movw	r30, r16
    6be0:	db cf       	rjmp	.-74     	; 0x6b98 <malloc+0x22>
    6be2:	21 15       	cp	r18, r1
    6be4:	31 05       	cpc	r19, r1
    6be6:	f9 f0       	breq	.+62     	; 0x6c26 <malloc+0xb0>
    6be8:	28 1b       	sub	r18, r24
    6bea:	39 0b       	sbc	r19, r25
    6bec:	24 30       	cpi	r18, 0x04	; 4
    6bee:	31 05       	cpc	r19, r1
    6bf0:	80 f4       	brcc	.+32     	; 0x6c12 <malloc+0x9c>
    6bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    6bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    6bf6:	61 15       	cp	r22, r1
    6bf8:	71 05       	cpc	r23, r1
    6bfa:	21 f0       	breq	.+8      	; 0x6c04 <malloc+0x8e>
    6bfc:	fb 01       	movw	r30, r22
    6bfe:	93 83       	std	Z+3, r25	; 0x03
    6c00:	82 83       	std	Z+2, r24	; 0x02
    6c02:	04 c0       	rjmp	.+8      	; 0x6c0c <malloc+0x96>
    6c04:	90 93 40 16 	sts	0x1640, r25	; 0x801640 <__flp+0x1>
    6c08:	80 93 3f 16 	sts	0x163F, r24	; 0x80163f <__flp>
    6c0c:	fe 01       	movw	r30, r28
    6c0e:	32 96       	adiw	r30, 0x02	; 2
    6c10:	44 c0       	rjmp	.+136    	; 0x6c9a <malloc+0x124>
    6c12:	fe 01       	movw	r30, r28
    6c14:	e2 0f       	add	r30, r18
    6c16:	f3 1f       	adc	r31, r19
    6c18:	81 93       	st	Z+, r24
    6c1a:	91 93       	st	Z+, r25
    6c1c:	22 50       	subi	r18, 0x02	; 2
    6c1e:	31 09       	sbc	r19, r1
    6c20:	39 83       	std	Y+1, r19	; 0x01
    6c22:	28 83       	st	Y, r18
    6c24:	3a c0       	rjmp	.+116    	; 0x6c9a <malloc+0x124>
    6c26:	20 91 3d 16 	lds	r18, 0x163D	; 0x80163d <__brkval>
    6c2a:	30 91 3e 16 	lds	r19, 0x163E	; 0x80163e <__brkval+0x1>
    6c2e:	23 2b       	or	r18, r19
    6c30:	41 f4       	brne	.+16     	; 0x6c42 <malloc+0xcc>
    6c32:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6c36:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6c3a:	30 93 3e 16 	sts	0x163E, r19	; 0x80163e <__brkval+0x1>
    6c3e:	20 93 3d 16 	sts	0x163D, r18	; 0x80163d <__brkval>
    6c42:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6c46:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6c4a:	21 15       	cp	r18, r1
    6c4c:	31 05       	cpc	r19, r1
    6c4e:	41 f4       	brne	.+16     	; 0x6c60 <malloc+0xea>
    6c50:	2d b7       	in	r18, 0x3d	; 61
    6c52:	3e b7       	in	r19, 0x3e	; 62
    6c54:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6c58:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6c5c:	24 1b       	sub	r18, r20
    6c5e:	35 0b       	sbc	r19, r21
    6c60:	e0 91 3d 16 	lds	r30, 0x163D	; 0x80163d <__brkval>
    6c64:	f0 91 3e 16 	lds	r31, 0x163E	; 0x80163e <__brkval+0x1>
    6c68:	e2 17       	cp	r30, r18
    6c6a:	f3 07       	cpc	r31, r19
    6c6c:	a0 f4       	brcc	.+40     	; 0x6c96 <malloc+0x120>
    6c6e:	2e 1b       	sub	r18, r30
    6c70:	3f 0b       	sbc	r19, r31
    6c72:	28 17       	cp	r18, r24
    6c74:	39 07       	cpc	r19, r25
    6c76:	78 f0       	brcs	.+30     	; 0x6c96 <malloc+0x120>
    6c78:	ac 01       	movw	r20, r24
    6c7a:	4e 5f       	subi	r20, 0xFE	; 254
    6c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    6c7e:	24 17       	cp	r18, r20
    6c80:	35 07       	cpc	r19, r21
    6c82:	48 f0       	brcs	.+18     	; 0x6c96 <malloc+0x120>
    6c84:	4e 0f       	add	r20, r30
    6c86:	5f 1f       	adc	r21, r31
    6c88:	50 93 3e 16 	sts	0x163E, r21	; 0x80163e <__brkval+0x1>
    6c8c:	40 93 3d 16 	sts	0x163D, r20	; 0x80163d <__brkval>
    6c90:	81 93       	st	Z+, r24
    6c92:	91 93       	st	Z+, r25
    6c94:	02 c0       	rjmp	.+4      	; 0x6c9a <malloc+0x124>
    6c96:	e0 e0       	ldi	r30, 0x00	; 0
    6c98:	f0 e0       	ldi	r31, 0x00	; 0
    6c9a:	cf 01       	movw	r24, r30
    6c9c:	df 91       	pop	r29
    6c9e:	cf 91       	pop	r28
    6ca0:	1f 91       	pop	r17
    6ca2:	0f 91       	pop	r16
    6ca4:	08 95       	ret

00006ca6 <free>:
    6ca6:	cf 93       	push	r28
    6ca8:	df 93       	push	r29
    6caa:	00 97       	sbiw	r24, 0x00	; 0
    6cac:	09 f4       	brne	.+2      	; 0x6cb0 <free+0xa>
    6cae:	81 c0       	rjmp	.+258    	; 0x6db2 <free+0x10c>
    6cb0:	fc 01       	movw	r30, r24
    6cb2:	32 97       	sbiw	r30, 0x02	; 2
    6cb4:	13 82       	std	Z+3, r1	; 0x03
    6cb6:	12 82       	std	Z+2, r1	; 0x02
    6cb8:	a0 91 3f 16 	lds	r26, 0x163F	; 0x80163f <__flp>
    6cbc:	b0 91 40 16 	lds	r27, 0x1640	; 0x801640 <__flp+0x1>
    6cc0:	10 97       	sbiw	r26, 0x00	; 0
    6cc2:	81 f4       	brne	.+32     	; 0x6ce4 <free+0x3e>
    6cc4:	20 81       	ld	r18, Z
    6cc6:	31 81       	ldd	r19, Z+1	; 0x01
    6cc8:	82 0f       	add	r24, r18
    6cca:	93 1f       	adc	r25, r19
    6ccc:	20 91 3d 16 	lds	r18, 0x163D	; 0x80163d <__brkval>
    6cd0:	30 91 3e 16 	lds	r19, 0x163E	; 0x80163e <__brkval+0x1>
    6cd4:	28 17       	cp	r18, r24
    6cd6:	39 07       	cpc	r19, r25
    6cd8:	51 f5       	brne	.+84     	; 0x6d2e <free+0x88>
    6cda:	f0 93 3e 16 	sts	0x163E, r31	; 0x80163e <__brkval+0x1>
    6cde:	e0 93 3d 16 	sts	0x163D, r30	; 0x80163d <__brkval>
    6ce2:	67 c0       	rjmp	.+206    	; 0x6db2 <free+0x10c>
    6ce4:	ed 01       	movw	r28, r26
    6ce6:	20 e0       	ldi	r18, 0x00	; 0
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	ce 17       	cp	r28, r30
    6cec:	df 07       	cpc	r29, r31
    6cee:	40 f4       	brcc	.+16     	; 0x6d00 <free+0x5a>
    6cf0:	4a 81       	ldd	r20, Y+2	; 0x02
    6cf2:	5b 81       	ldd	r21, Y+3	; 0x03
    6cf4:	9e 01       	movw	r18, r28
    6cf6:	41 15       	cp	r20, r1
    6cf8:	51 05       	cpc	r21, r1
    6cfa:	f1 f0       	breq	.+60     	; 0x6d38 <free+0x92>
    6cfc:	ea 01       	movw	r28, r20
    6cfe:	f5 cf       	rjmp	.-22     	; 0x6cea <free+0x44>
    6d00:	d3 83       	std	Z+3, r29	; 0x03
    6d02:	c2 83       	std	Z+2, r28	; 0x02
    6d04:	40 81       	ld	r20, Z
    6d06:	51 81       	ldd	r21, Z+1	; 0x01
    6d08:	84 0f       	add	r24, r20
    6d0a:	95 1f       	adc	r25, r21
    6d0c:	c8 17       	cp	r28, r24
    6d0e:	d9 07       	cpc	r29, r25
    6d10:	59 f4       	brne	.+22     	; 0x6d28 <free+0x82>
    6d12:	88 81       	ld	r24, Y
    6d14:	99 81       	ldd	r25, Y+1	; 0x01
    6d16:	84 0f       	add	r24, r20
    6d18:	95 1f       	adc	r25, r21
    6d1a:	02 96       	adiw	r24, 0x02	; 2
    6d1c:	91 83       	std	Z+1, r25	; 0x01
    6d1e:	80 83       	st	Z, r24
    6d20:	8a 81       	ldd	r24, Y+2	; 0x02
    6d22:	9b 81       	ldd	r25, Y+3	; 0x03
    6d24:	93 83       	std	Z+3, r25	; 0x03
    6d26:	82 83       	std	Z+2, r24	; 0x02
    6d28:	21 15       	cp	r18, r1
    6d2a:	31 05       	cpc	r19, r1
    6d2c:	29 f4       	brne	.+10     	; 0x6d38 <free+0x92>
    6d2e:	f0 93 40 16 	sts	0x1640, r31	; 0x801640 <__flp+0x1>
    6d32:	e0 93 3f 16 	sts	0x163F, r30	; 0x80163f <__flp>
    6d36:	3d c0       	rjmp	.+122    	; 0x6db2 <free+0x10c>
    6d38:	e9 01       	movw	r28, r18
    6d3a:	fb 83       	std	Y+3, r31	; 0x03
    6d3c:	ea 83       	std	Y+2, r30	; 0x02
    6d3e:	49 91       	ld	r20, Y+
    6d40:	59 91       	ld	r21, Y+
    6d42:	c4 0f       	add	r28, r20
    6d44:	d5 1f       	adc	r29, r21
    6d46:	ec 17       	cp	r30, r28
    6d48:	fd 07       	cpc	r31, r29
    6d4a:	61 f4       	brne	.+24     	; 0x6d64 <free+0xbe>
    6d4c:	80 81       	ld	r24, Z
    6d4e:	91 81       	ldd	r25, Z+1	; 0x01
    6d50:	84 0f       	add	r24, r20
    6d52:	95 1f       	adc	r25, r21
    6d54:	02 96       	adiw	r24, 0x02	; 2
    6d56:	e9 01       	movw	r28, r18
    6d58:	99 83       	std	Y+1, r25	; 0x01
    6d5a:	88 83       	st	Y, r24
    6d5c:	82 81       	ldd	r24, Z+2	; 0x02
    6d5e:	93 81       	ldd	r25, Z+3	; 0x03
    6d60:	9b 83       	std	Y+3, r25	; 0x03
    6d62:	8a 83       	std	Y+2, r24	; 0x02
    6d64:	e0 e0       	ldi	r30, 0x00	; 0
    6d66:	f0 e0       	ldi	r31, 0x00	; 0
    6d68:	12 96       	adiw	r26, 0x02	; 2
    6d6a:	8d 91       	ld	r24, X+
    6d6c:	9c 91       	ld	r25, X
    6d6e:	13 97       	sbiw	r26, 0x03	; 3
    6d70:	00 97       	sbiw	r24, 0x00	; 0
    6d72:	19 f0       	breq	.+6      	; 0x6d7a <free+0xd4>
    6d74:	fd 01       	movw	r30, r26
    6d76:	dc 01       	movw	r26, r24
    6d78:	f7 cf       	rjmp	.-18     	; 0x6d68 <free+0xc2>
    6d7a:	8d 91       	ld	r24, X+
    6d7c:	9c 91       	ld	r25, X
    6d7e:	11 97       	sbiw	r26, 0x01	; 1
    6d80:	9d 01       	movw	r18, r26
    6d82:	2e 5f       	subi	r18, 0xFE	; 254
    6d84:	3f 4f       	sbci	r19, 0xFF	; 255
    6d86:	82 0f       	add	r24, r18
    6d88:	93 1f       	adc	r25, r19
    6d8a:	20 91 3d 16 	lds	r18, 0x163D	; 0x80163d <__brkval>
    6d8e:	30 91 3e 16 	lds	r19, 0x163E	; 0x80163e <__brkval+0x1>
    6d92:	28 17       	cp	r18, r24
    6d94:	39 07       	cpc	r19, r25
    6d96:	69 f4       	brne	.+26     	; 0x6db2 <free+0x10c>
    6d98:	30 97       	sbiw	r30, 0x00	; 0
    6d9a:	29 f4       	brne	.+10     	; 0x6da6 <free+0x100>
    6d9c:	10 92 40 16 	sts	0x1640, r1	; 0x801640 <__flp+0x1>
    6da0:	10 92 3f 16 	sts	0x163F, r1	; 0x80163f <__flp>
    6da4:	02 c0       	rjmp	.+4      	; 0x6daa <free+0x104>
    6da6:	13 82       	std	Z+3, r1	; 0x03
    6da8:	12 82       	std	Z+2, r1	; 0x02
    6daa:	b0 93 3e 16 	sts	0x163E, r27	; 0x80163e <__brkval+0x1>
    6dae:	a0 93 3d 16 	sts	0x163D, r26	; 0x80163d <__brkval>
    6db2:	df 91       	pop	r29
    6db4:	cf 91       	pop	r28
    6db6:	08 95       	ret

00006db8 <abort>:
    6db8:	81 e0       	ldi	r24, 0x01	; 1
    6dba:	90 e0       	ldi	r25, 0x00	; 0
    6dbc:	f8 94       	cli
    6dbe:	5f c2       	rjmp	.+1214   	; 0x727e <_exit>

00006dc0 <__ftoa_engine>:
    6dc0:	28 30       	cpi	r18, 0x08	; 8
    6dc2:	08 f0       	brcs	.+2      	; 0x6dc6 <__ftoa_engine+0x6>
    6dc4:	27 e0       	ldi	r18, 0x07	; 7
    6dc6:	33 27       	eor	r19, r19
    6dc8:	da 01       	movw	r26, r20
    6dca:	99 0f       	add	r25, r25
    6dcc:	31 1d       	adc	r19, r1
    6dce:	87 fd       	sbrc	r24, 7
    6dd0:	91 60       	ori	r25, 0x01	; 1
    6dd2:	00 96       	adiw	r24, 0x00	; 0
    6dd4:	61 05       	cpc	r22, r1
    6dd6:	71 05       	cpc	r23, r1
    6dd8:	39 f4       	brne	.+14     	; 0x6de8 <__ftoa_engine+0x28>
    6dda:	32 60       	ori	r19, 0x02	; 2
    6ddc:	2e 5f       	subi	r18, 0xFE	; 254
    6dde:	3d 93       	st	X+, r19
    6de0:	30 e3       	ldi	r19, 0x30	; 48
    6de2:	2a 95       	dec	r18
    6de4:	e1 f7       	brne	.-8      	; 0x6dde <__ftoa_engine+0x1e>
    6de6:	08 95       	ret
    6de8:	9f 3f       	cpi	r25, 0xFF	; 255
    6dea:	30 f0       	brcs	.+12     	; 0x6df8 <__ftoa_engine+0x38>
    6dec:	80 38       	cpi	r24, 0x80	; 128
    6dee:	71 05       	cpc	r23, r1
    6df0:	61 05       	cpc	r22, r1
    6df2:	09 f0       	breq	.+2      	; 0x6df6 <__ftoa_engine+0x36>
    6df4:	3c 5f       	subi	r19, 0xFC	; 252
    6df6:	3c 5f       	subi	r19, 0xFC	; 252
    6df8:	3d 93       	st	X+, r19
    6dfa:	91 30       	cpi	r25, 0x01	; 1
    6dfc:	08 f0       	brcs	.+2      	; 0x6e00 <__ftoa_engine+0x40>
    6dfe:	80 68       	ori	r24, 0x80	; 128
    6e00:	91 1d       	adc	r25, r1
    6e02:	df 93       	push	r29
    6e04:	cf 93       	push	r28
    6e06:	1f 93       	push	r17
    6e08:	0f 93       	push	r16
    6e0a:	ff 92       	push	r15
    6e0c:	ef 92       	push	r14
    6e0e:	19 2f       	mov	r17, r25
    6e10:	98 7f       	andi	r25, 0xF8	; 248
    6e12:	96 95       	lsr	r25
    6e14:	e9 2f       	mov	r30, r25
    6e16:	96 95       	lsr	r25
    6e18:	96 95       	lsr	r25
    6e1a:	e9 0f       	add	r30, r25
    6e1c:	ff 27       	eor	r31, r31
    6e1e:	e4 50       	subi	r30, 0x04	; 4
    6e20:	fe 4f       	sbci	r31, 0xFE	; 254
    6e22:	99 27       	eor	r25, r25
    6e24:	33 27       	eor	r19, r19
    6e26:	ee 24       	eor	r14, r14
    6e28:	ff 24       	eor	r15, r15
    6e2a:	a7 01       	movw	r20, r14
    6e2c:	e7 01       	movw	r28, r14
    6e2e:	05 90       	lpm	r0, Z+
    6e30:	08 94       	sec
    6e32:	07 94       	ror	r0
    6e34:	28 f4       	brcc	.+10     	; 0x6e40 <__ftoa_engine+0x80>
    6e36:	36 0f       	add	r19, r22
    6e38:	e7 1e       	adc	r14, r23
    6e3a:	f8 1e       	adc	r15, r24
    6e3c:	49 1f       	adc	r20, r25
    6e3e:	51 1d       	adc	r21, r1
    6e40:	66 0f       	add	r22, r22
    6e42:	77 1f       	adc	r23, r23
    6e44:	88 1f       	adc	r24, r24
    6e46:	99 1f       	adc	r25, r25
    6e48:	06 94       	lsr	r0
    6e4a:	a1 f7       	brne	.-24     	; 0x6e34 <__ftoa_engine+0x74>
    6e4c:	05 90       	lpm	r0, Z+
    6e4e:	07 94       	ror	r0
    6e50:	28 f4       	brcc	.+10     	; 0x6e5c <__ftoa_engine+0x9c>
    6e52:	e7 0e       	add	r14, r23
    6e54:	f8 1e       	adc	r15, r24
    6e56:	49 1f       	adc	r20, r25
    6e58:	56 1f       	adc	r21, r22
    6e5a:	c1 1d       	adc	r28, r1
    6e5c:	77 0f       	add	r23, r23
    6e5e:	88 1f       	adc	r24, r24
    6e60:	99 1f       	adc	r25, r25
    6e62:	66 1f       	adc	r22, r22
    6e64:	06 94       	lsr	r0
    6e66:	a1 f7       	brne	.-24     	; 0x6e50 <__ftoa_engine+0x90>
    6e68:	05 90       	lpm	r0, Z+
    6e6a:	07 94       	ror	r0
    6e6c:	28 f4       	brcc	.+10     	; 0x6e78 <__ftoa_engine+0xb8>
    6e6e:	f8 0e       	add	r15, r24
    6e70:	49 1f       	adc	r20, r25
    6e72:	56 1f       	adc	r21, r22
    6e74:	c7 1f       	adc	r28, r23
    6e76:	d1 1d       	adc	r29, r1
    6e78:	88 0f       	add	r24, r24
    6e7a:	99 1f       	adc	r25, r25
    6e7c:	66 1f       	adc	r22, r22
    6e7e:	77 1f       	adc	r23, r23
    6e80:	06 94       	lsr	r0
    6e82:	a1 f7       	brne	.-24     	; 0x6e6c <__ftoa_engine+0xac>
    6e84:	05 90       	lpm	r0, Z+
    6e86:	07 94       	ror	r0
    6e88:	20 f4       	brcc	.+8      	; 0x6e92 <__ftoa_engine+0xd2>
    6e8a:	49 0f       	add	r20, r25
    6e8c:	56 1f       	adc	r21, r22
    6e8e:	c7 1f       	adc	r28, r23
    6e90:	d8 1f       	adc	r29, r24
    6e92:	99 0f       	add	r25, r25
    6e94:	66 1f       	adc	r22, r22
    6e96:	77 1f       	adc	r23, r23
    6e98:	88 1f       	adc	r24, r24
    6e9a:	06 94       	lsr	r0
    6e9c:	a9 f7       	brne	.-22     	; 0x6e88 <__ftoa_engine+0xc8>
    6e9e:	84 91       	lpm	r24, Z
    6ea0:	10 95       	com	r17
    6ea2:	17 70       	andi	r17, 0x07	; 7
    6ea4:	41 f0       	breq	.+16     	; 0x6eb6 <__ftoa_engine+0xf6>
    6ea6:	d6 95       	lsr	r29
    6ea8:	c7 95       	ror	r28
    6eaa:	57 95       	ror	r21
    6eac:	47 95       	ror	r20
    6eae:	f7 94       	ror	r15
    6eb0:	e7 94       	ror	r14
    6eb2:	1a 95       	dec	r17
    6eb4:	c1 f7       	brne	.-16     	; 0x6ea6 <__ftoa_engine+0xe6>
    6eb6:	e2 ea       	ldi	r30, 0xA2	; 162
    6eb8:	f1 e0       	ldi	r31, 0x01	; 1
    6eba:	68 94       	set
    6ebc:	15 90       	lpm	r1, Z+
    6ebe:	15 91       	lpm	r17, Z+
    6ec0:	35 91       	lpm	r19, Z+
    6ec2:	65 91       	lpm	r22, Z+
    6ec4:	95 91       	lpm	r25, Z+
    6ec6:	05 90       	lpm	r0, Z+
    6ec8:	7f e2       	ldi	r23, 0x2F	; 47
    6eca:	73 95       	inc	r23
    6ecc:	e1 18       	sub	r14, r1
    6ece:	f1 0a       	sbc	r15, r17
    6ed0:	43 0b       	sbc	r20, r19
    6ed2:	56 0b       	sbc	r21, r22
    6ed4:	c9 0b       	sbc	r28, r25
    6ed6:	d0 09       	sbc	r29, r0
    6ed8:	c0 f7       	brcc	.-16     	; 0x6eca <__ftoa_engine+0x10a>
    6eda:	e1 0c       	add	r14, r1
    6edc:	f1 1e       	adc	r15, r17
    6ede:	43 1f       	adc	r20, r19
    6ee0:	56 1f       	adc	r21, r22
    6ee2:	c9 1f       	adc	r28, r25
    6ee4:	d0 1d       	adc	r29, r0
    6ee6:	7e f4       	brtc	.+30     	; 0x6f06 <__ftoa_engine+0x146>
    6ee8:	70 33       	cpi	r23, 0x30	; 48
    6eea:	11 f4       	brne	.+4      	; 0x6ef0 <__ftoa_engine+0x130>
    6eec:	8a 95       	dec	r24
    6eee:	e6 cf       	rjmp	.-52     	; 0x6ebc <__ftoa_engine+0xfc>
    6ef0:	e8 94       	clt
    6ef2:	01 50       	subi	r16, 0x01	; 1
    6ef4:	30 f0       	brcs	.+12     	; 0x6f02 <__ftoa_engine+0x142>
    6ef6:	08 0f       	add	r16, r24
    6ef8:	0a f4       	brpl	.+2      	; 0x6efc <__ftoa_engine+0x13c>
    6efa:	00 27       	eor	r16, r16
    6efc:	02 17       	cp	r16, r18
    6efe:	08 f4       	brcc	.+2      	; 0x6f02 <__ftoa_engine+0x142>
    6f00:	20 2f       	mov	r18, r16
    6f02:	23 95       	inc	r18
    6f04:	02 2f       	mov	r16, r18
    6f06:	7a 33       	cpi	r23, 0x3A	; 58
    6f08:	28 f0       	brcs	.+10     	; 0x6f14 <__ftoa_engine+0x154>
    6f0a:	79 e3       	ldi	r23, 0x39	; 57
    6f0c:	7d 93       	st	X+, r23
    6f0e:	2a 95       	dec	r18
    6f10:	e9 f7       	brne	.-6      	; 0x6f0c <__ftoa_engine+0x14c>
    6f12:	10 c0       	rjmp	.+32     	; 0x6f34 <__ftoa_engine+0x174>
    6f14:	7d 93       	st	X+, r23
    6f16:	2a 95       	dec	r18
    6f18:	89 f6       	brne	.-94     	; 0x6ebc <__ftoa_engine+0xfc>
    6f1a:	06 94       	lsr	r0
    6f1c:	97 95       	ror	r25
    6f1e:	67 95       	ror	r22
    6f20:	37 95       	ror	r19
    6f22:	17 95       	ror	r17
    6f24:	17 94       	ror	r1
    6f26:	e1 18       	sub	r14, r1
    6f28:	f1 0a       	sbc	r15, r17
    6f2a:	43 0b       	sbc	r20, r19
    6f2c:	56 0b       	sbc	r21, r22
    6f2e:	c9 0b       	sbc	r28, r25
    6f30:	d0 09       	sbc	r29, r0
    6f32:	98 f0       	brcs	.+38     	; 0x6f5a <__ftoa_engine+0x19a>
    6f34:	23 95       	inc	r18
    6f36:	7e 91       	ld	r23, -X
    6f38:	73 95       	inc	r23
    6f3a:	7a 33       	cpi	r23, 0x3A	; 58
    6f3c:	08 f0       	brcs	.+2      	; 0x6f40 <__ftoa_engine+0x180>
    6f3e:	70 e3       	ldi	r23, 0x30	; 48
    6f40:	7c 93       	st	X, r23
    6f42:	20 13       	cpse	r18, r16
    6f44:	b8 f7       	brcc	.-18     	; 0x6f34 <__ftoa_engine+0x174>
    6f46:	7e 91       	ld	r23, -X
    6f48:	70 61       	ori	r23, 0x10	; 16
    6f4a:	7d 93       	st	X+, r23
    6f4c:	30 f0       	brcs	.+12     	; 0x6f5a <__ftoa_engine+0x19a>
    6f4e:	83 95       	inc	r24
    6f50:	71 e3       	ldi	r23, 0x31	; 49
    6f52:	7d 93       	st	X+, r23
    6f54:	70 e3       	ldi	r23, 0x30	; 48
    6f56:	2a 95       	dec	r18
    6f58:	e1 f7       	brne	.-8      	; 0x6f52 <__ftoa_engine+0x192>
    6f5a:	11 24       	eor	r1, r1
    6f5c:	ef 90       	pop	r14
    6f5e:	ff 90       	pop	r15
    6f60:	0f 91       	pop	r16
    6f62:	1f 91       	pop	r17
    6f64:	cf 91       	pop	r28
    6f66:	df 91       	pop	r29
    6f68:	99 27       	eor	r25, r25
    6f6a:	87 fd       	sbrc	r24, 7
    6f6c:	90 95       	com	r25
    6f6e:	08 95       	ret

00006f70 <strnlen_P>:
    6f70:	fc 01       	movw	r30, r24
    6f72:	05 90       	lpm	r0, Z+
    6f74:	61 50       	subi	r22, 0x01	; 1
    6f76:	70 40       	sbci	r23, 0x00	; 0
    6f78:	01 10       	cpse	r0, r1
    6f7a:	d8 f7       	brcc	.-10     	; 0x6f72 <strnlen_P+0x2>
    6f7c:	80 95       	com	r24
    6f7e:	90 95       	com	r25
    6f80:	8e 0f       	add	r24, r30
    6f82:	9f 1f       	adc	r25, r31
    6f84:	08 95       	ret

00006f86 <memcpy>:
    6f86:	fb 01       	movw	r30, r22
    6f88:	dc 01       	movw	r26, r24
    6f8a:	02 c0       	rjmp	.+4      	; 0x6f90 <memcpy+0xa>
    6f8c:	01 90       	ld	r0, Z+
    6f8e:	0d 92       	st	X+, r0
    6f90:	41 50       	subi	r20, 0x01	; 1
    6f92:	50 40       	sbci	r21, 0x00	; 0
    6f94:	d8 f7       	brcc	.-10     	; 0x6f8c <memcpy+0x6>
    6f96:	08 95       	ret

00006f98 <memset>:
    6f98:	dc 01       	movw	r26, r24
    6f9a:	01 c0       	rjmp	.+2      	; 0x6f9e <memset+0x6>
    6f9c:	6d 93       	st	X+, r22
    6f9e:	41 50       	subi	r20, 0x01	; 1
    6fa0:	50 40       	sbci	r21, 0x00	; 0
    6fa2:	e0 f7       	brcc	.-8      	; 0x6f9c <memset+0x4>
    6fa4:	08 95       	ret

00006fa6 <strcasestr>:
    6fa6:	fb 01       	movw	r30, r22
    6fa8:	51 91       	ld	r21, Z+
    6faa:	55 23       	and	r21, r21
    6fac:	b1 f0       	breq	.+44     	; 0x6fda <strcasestr+0x34>
    6fae:	bf 01       	movw	r22, r30
    6fb0:	dc 01       	movw	r26, r24
    6fb2:	05 2e       	mov	r0, r21
    6fb4:	4d 91       	ld	r20, X+
    6fb6:	44 23       	and	r20, r20
    6fb8:	69 f0       	breq	.+26     	; 0x6fd4 <strcasestr+0x2e>
    6fba:	10 d0       	rcall	.+32     	; 0x6fdc <strcasestr+0x36>
    6fbc:	d9 f7       	brne	.-10     	; 0x6fb4 <strcasestr+0xe>
    6fbe:	cd 01       	movw	r24, r26
    6fc0:	01 90       	ld	r0, Z+
    6fc2:	00 20       	and	r0, r0
    6fc4:	49 f0       	breq	.+18     	; 0x6fd8 <strcasestr+0x32>
    6fc6:	4d 91       	ld	r20, X+
    6fc8:	41 11       	cpse	r20, r1
    6fca:	08 d0       	rcall	.+16     	; 0x6fdc <strcasestr+0x36>
    6fcc:	c9 f3       	breq	.-14     	; 0x6fc0 <strcasestr+0x1a>
    6fce:	fb 01       	movw	r30, r22
    6fd0:	41 11       	cpse	r20, r1
    6fd2:	ee cf       	rjmp	.-36     	; 0x6fb0 <strcasestr+0xa>
    6fd4:	81 e0       	ldi	r24, 0x01	; 1
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	01 97       	sbiw	r24, 0x01	; 1
    6fda:	08 95       	ret
    6fdc:	40 25       	eor	r20, r0
    6fde:	39 f0       	breq	.+14     	; 0x6fee <strcasestr+0x48>
    6fe0:	40 32       	cpi	r20, 0x20	; 32
    6fe2:	29 f4       	brne	.+10     	; 0x6fee <strcasestr+0x48>
    6fe4:	40 29       	or	r20, r0
    6fe6:	4b 57       	subi	r20, 0x7B	; 123
    6fe8:	46 5e       	subi	r20, 0xE6	; 230
    6fea:	08 f0       	brcs	.+2      	; 0x6fee <strcasestr+0x48>
    6fec:	18 94       	sez
    6fee:	08 95       	ret

00006ff0 <strcat>:
    6ff0:	fb 01       	movw	r30, r22
    6ff2:	dc 01       	movw	r26, r24
    6ff4:	0d 90       	ld	r0, X+
    6ff6:	00 20       	and	r0, r0
    6ff8:	e9 f7       	brne	.-6      	; 0x6ff4 <strcat+0x4>
    6ffa:	11 97       	sbiw	r26, 0x01	; 1
    6ffc:	01 90       	ld	r0, Z+
    6ffe:	0d 92       	st	X+, r0
    7000:	00 20       	and	r0, r0
    7002:	e1 f7       	brne	.-8      	; 0x6ffc <strcat+0xc>
    7004:	08 95       	ret

00007006 <strcpy>:
    7006:	fb 01       	movw	r30, r22
    7008:	dc 01       	movw	r26, r24
    700a:	01 90       	ld	r0, Z+
    700c:	0d 92       	st	X+, r0
    700e:	00 20       	and	r0, r0
    7010:	e1 f7       	brne	.-8      	; 0x700a <strcpy+0x4>
    7012:	08 95       	ret

00007014 <strncasecmp>:
    7014:	fb 01       	movw	r30, r22
    7016:	dc 01       	movw	r26, r24
    7018:	41 50       	subi	r20, 0x01	; 1
    701a:	50 40       	sbci	r21, 0x00	; 0
    701c:	88 f0       	brcs	.+34     	; 0x7040 <strncasecmp+0x2c>
    701e:	8d 91       	ld	r24, X+
    7020:	81 34       	cpi	r24, 0x41	; 65
    7022:	1c f0       	brlt	.+6      	; 0x702a <strncasecmp+0x16>
    7024:	8b 35       	cpi	r24, 0x5B	; 91
    7026:	0c f4       	brge	.+2      	; 0x702a <strncasecmp+0x16>
    7028:	80 5e       	subi	r24, 0xE0	; 224
    702a:	61 91       	ld	r22, Z+
    702c:	61 34       	cpi	r22, 0x41	; 65
    702e:	1c f0       	brlt	.+6      	; 0x7036 <strncasecmp+0x22>
    7030:	6b 35       	cpi	r22, 0x5B	; 91
    7032:	0c f4       	brge	.+2      	; 0x7036 <strncasecmp+0x22>
    7034:	60 5e       	subi	r22, 0xE0	; 224
    7036:	86 1b       	sub	r24, r22
    7038:	61 11       	cpse	r22, r1
    703a:	71 f3       	breq	.-36     	; 0x7018 <strncasecmp+0x4>
    703c:	99 0b       	sbc	r25, r25
    703e:	08 95       	ret
    7040:	88 1b       	sub	r24, r24
    7042:	fc cf       	rjmp	.-8      	; 0x703c <strncasecmp+0x28>

00007044 <strnlen>:
    7044:	fc 01       	movw	r30, r24
    7046:	61 50       	subi	r22, 0x01	; 1
    7048:	70 40       	sbci	r23, 0x00	; 0
    704a:	01 90       	ld	r0, Z+
    704c:	01 10       	cpse	r0, r1
    704e:	d8 f7       	brcc	.-10     	; 0x7046 <strnlen+0x2>
    7050:	80 95       	com	r24
    7052:	90 95       	com	r25
    7054:	8e 0f       	add	r24, r30
    7056:	9f 1f       	adc	r25, r31
    7058:	08 95       	ret

0000705a <fputc>:
    705a:	0f 93       	push	r16
    705c:	1f 93       	push	r17
    705e:	cf 93       	push	r28
    7060:	df 93       	push	r29
    7062:	fb 01       	movw	r30, r22
    7064:	23 81       	ldd	r18, Z+3	; 0x03
    7066:	21 fd       	sbrc	r18, 1
    7068:	03 c0       	rjmp	.+6      	; 0x7070 <fputc+0x16>
    706a:	8f ef       	ldi	r24, 0xFF	; 255
    706c:	9f ef       	ldi	r25, 0xFF	; 255
    706e:	2c c0       	rjmp	.+88     	; 0x70c8 <fputc+0x6e>
    7070:	22 ff       	sbrs	r18, 2
    7072:	16 c0       	rjmp	.+44     	; 0x70a0 <fputc+0x46>
    7074:	46 81       	ldd	r20, Z+6	; 0x06
    7076:	57 81       	ldd	r21, Z+7	; 0x07
    7078:	24 81       	ldd	r18, Z+4	; 0x04
    707a:	35 81       	ldd	r19, Z+5	; 0x05
    707c:	42 17       	cp	r20, r18
    707e:	53 07       	cpc	r21, r19
    7080:	44 f4       	brge	.+16     	; 0x7092 <fputc+0x38>
    7082:	a0 81       	ld	r26, Z
    7084:	b1 81       	ldd	r27, Z+1	; 0x01
    7086:	9d 01       	movw	r18, r26
    7088:	2f 5f       	subi	r18, 0xFF	; 255
    708a:	3f 4f       	sbci	r19, 0xFF	; 255
    708c:	31 83       	std	Z+1, r19	; 0x01
    708e:	20 83       	st	Z, r18
    7090:	8c 93       	st	X, r24
    7092:	26 81       	ldd	r18, Z+6	; 0x06
    7094:	37 81       	ldd	r19, Z+7	; 0x07
    7096:	2f 5f       	subi	r18, 0xFF	; 255
    7098:	3f 4f       	sbci	r19, 0xFF	; 255
    709a:	37 83       	std	Z+7, r19	; 0x07
    709c:	26 83       	std	Z+6, r18	; 0x06
    709e:	14 c0       	rjmp	.+40     	; 0x70c8 <fputc+0x6e>
    70a0:	8b 01       	movw	r16, r22
    70a2:	ec 01       	movw	r28, r24
    70a4:	fb 01       	movw	r30, r22
    70a6:	00 84       	ldd	r0, Z+8	; 0x08
    70a8:	f1 85       	ldd	r31, Z+9	; 0x09
    70aa:	e0 2d       	mov	r30, r0
    70ac:	19 95       	eicall
    70ae:	89 2b       	or	r24, r25
    70b0:	e1 f6       	brne	.-72     	; 0x706a <fputc+0x10>
    70b2:	d8 01       	movw	r26, r16
    70b4:	16 96       	adiw	r26, 0x06	; 6
    70b6:	8d 91       	ld	r24, X+
    70b8:	9c 91       	ld	r25, X
    70ba:	17 97       	sbiw	r26, 0x07	; 7
    70bc:	01 96       	adiw	r24, 0x01	; 1
    70be:	17 96       	adiw	r26, 0x07	; 7
    70c0:	9c 93       	st	X, r25
    70c2:	8e 93       	st	-X, r24
    70c4:	16 97       	sbiw	r26, 0x06	; 6
    70c6:	ce 01       	movw	r24, r28
    70c8:	df 91       	pop	r29
    70ca:	cf 91       	pop	r28
    70cc:	1f 91       	pop	r17
    70ce:	0f 91       	pop	r16
    70d0:	08 95       	ret

000070d2 <printf>:
    70d2:	cf 93       	push	r28
    70d4:	df 93       	push	r29
    70d6:	cd b7       	in	r28, 0x3d	; 61
    70d8:	de b7       	in	r29, 0x3e	; 62
    70da:	ae 01       	movw	r20, r28
    70dc:	4a 5f       	subi	r20, 0xFA	; 250
    70de:	5f 4f       	sbci	r21, 0xFF	; 255
    70e0:	fa 01       	movw	r30, r20
    70e2:	61 91       	ld	r22, Z+
    70e4:	71 91       	ld	r23, Z+
    70e6:	af 01       	movw	r20, r30
    70e8:	80 91 43 16 	lds	r24, 0x1643	; 0x801643 <__iob+0x2>
    70ec:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <__iob+0x3>
    70f0:	90 d8       	rcall	.-3808   	; 0x6212 <vfprintf>
    70f2:	df 91       	pop	r29
    70f4:	cf 91       	pop	r28
    70f6:	08 95       	ret

000070f8 <puts>:
    70f8:	0f 93       	push	r16
    70fa:	1f 93       	push	r17
    70fc:	cf 93       	push	r28
    70fe:	df 93       	push	r29
    7100:	e0 91 43 16 	lds	r30, 0x1643	; 0x801643 <__iob+0x2>
    7104:	f0 91 44 16 	lds	r31, 0x1644	; 0x801644 <__iob+0x3>
    7108:	23 81       	ldd	r18, Z+3	; 0x03
    710a:	21 ff       	sbrs	r18, 1
    710c:	1b c0       	rjmp	.+54     	; 0x7144 <puts+0x4c>
    710e:	8c 01       	movw	r16, r24
    7110:	d0 e0       	ldi	r29, 0x00	; 0
    7112:	c0 e0       	ldi	r28, 0x00	; 0
    7114:	f8 01       	movw	r30, r16
    7116:	81 91       	ld	r24, Z+
    7118:	8f 01       	movw	r16, r30
    711a:	60 91 43 16 	lds	r22, 0x1643	; 0x801643 <__iob+0x2>
    711e:	70 91 44 16 	lds	r23, 0x1644	; 0x801644 <__iob+0x3>
    7122:	db 01       	movw	r26, r22
    7124:	18 96       	adiw	r26, 0x08	; 8
    7126:	ed 91       	ld	r30, X+
    7128:	fc 91       	ld	r31, X
    712a:	19 97       	sbiw	r26, 0x09	; 9
    712c:	88 23       	and	r24, r24
    712e:	31 f0       	breq	.+12     	; 0x713c <puts+0x44>
    7130:	19 95       	eicall
    7132:	89 2b       	or	r24, r25
    7134:	79 f3       	breq	.-34     	; 0x7114 <puts+0x1c>
    7136:	df ef       	ldi	r29, 0xFF	; 255
    7138:	cf ef       	ldi	r28, 0xFF	; 255
    713a:	ec cf       	rjmp	.-40     	; 0x7114 <puts+0x1c>
    713c:	8a e0       	ldi	r24, 0x0A	; 10
    713e:	19 95       	eicall
    7140:	89 2b       	or	r24, r25
    7142:	19 f0       	breq	.+6      	; 0x714a <puts+0x52>
    7144:	8f ef       	ldi	r24, 0xFF	; 255
    7146:	9f ef       	ldi	r25, 0xFF	; 255
    7148:	02 c0       	rjmp	.+4      	; 0x714e <puts+0x56>
    714a:	8d 2f       	mov	r24, r29
    714c:	9c 2f       	mov	r25, r28
    714e:	df 91       	pop	r29
    7150:	cf 91       	pop	r28
    7152:	1f 91       	pop	r17
    7154:	0f 91       	pop	r16
    7156:	08 95       	ret

00007158 <sprintf>:
    7158:	0f 93       	push	r16
    715a:	1f 93       	push	r17
    715c:	cf 93       	push	r28
    715e:	df 93       	push	r29
    7160:	cd b7       	in	r28, 0x3d	; 61
    7162:	de b7       	in	r29, 0x3e	; 62
    7164:	2e 97       	sbiw	r28, 0x0e	; 14
    7166:	0f b6       	in	r0, 0x3f	; 63
    7168:	f8 94       	cli
    716a:	de bf       	out	0x3e, r29	; 62
    716c:	0f be       	out	0x3f, r0	; 63
    716e:	cd bf       	out	0x3d, r28	; 61
    7170:	0e 89       	ldd	r16, Y+22	; 0x16
    7172:	1f 89       	ldd	r17, Y+23	; 0x17
    7174:	86 e0       	ldi	r24, 0x06	; 6
    7176:	8c 83       	std	Y+4, r24	; 0x04
    7178:	1a 83       	std	Y+2, r17	; 0x02
    717a:	09 83       	std	Y+1, r16	; 0x01
    717c:	8f ef       	ldi	r24, 0xFF	; 255
    717e:	9f e7       	ldi	r25, 0x7F	; 127
    7180:	9e 83       	std	Y+6, r25	; 0x06
    7182:	8d 83       	std	Y+5, r24	; 0x05
    7184:	ae 01       	movw	r20, r28
    7186:	46 5e       	subi	r20, 0xE6	; 230
    7188:	5f 4f       	sbci	r21, 0xFF	; 255
    718a:	68 8d       	ldd	r22, Y+24	; 0x18
    718c:	79 8d       	ldd	r23, Y+25	; 0x19
    718e:	ce 01       	movw	r24, r28
    7190:	01 96       	adiw	r24, 0x01	; 1
    7192:	3f d8       	rcall	.-3970   	; 0x6212 <vfprintf>
    7194:	ef 81       	ldd	r30, Y+7	; 0x07
    7196:	f8 85       	ldd	r31, Y+8	; 0x08
    7198:	e0 0f       	add	r30, r16
    719a:	f1 1f       	adc	r31, r17
    719c:	10 82       	st	Z, r1
    719e:	2e 96       	adiw	r28, 0x0e	; 14
    71a0:	0f b6       	in	r0, 0x3f	; 63
    71a2:	f8 94       	cli
    71a4:	de bf       	out	0x3e, r29	; 62
    71a6:	0f be       	out	0x3f, r0	; 63
    71a8:	cd bf       	out	0x3d, r28	; 61
    71aa:	df 91       	pop	r29
    71ac:	cf 91       	pop	r28
    71ae:	1f 91       	pop	r17
    71b0:	0f 91       	pop	r16
    71b2:	08 95       	ret

000071b4 <vprintf>:
    71b4:	ab 01       	movw	r20, r22
    71b6:	bc 01       	movw	r22, r24
    71b8:	80 91 43 16 	lds	r24, 0x1643	; 0x801643 <__iob+0x2>
    71bc:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <__iob+0x3>
    71c0:	28 c8       	rjmp	.-4016   	; 0x6212 <vfprintf>

000071c2 <__ultoa_invert>:
    71c2:	fa 01       	movw	r30, r20
    71c4:	aa 27       	eor	r26, r26
    71c6:	28 30       	cpi	r18, 0x08	; 8
    71c8:	51 f1       	breq	.+84     	; 0x721e <__ultoa_invert+0x5c>
    71ca:	20 31       	cpi	r18, 0x10	; 16
    71cc:	81 f1       	breq	.+96     	; 0x722e <__ultoa_invert+0x6c>
    71ce:	e8 94       	clt
    71d0:	6f 93       	push	r22
    71d2:	6e 7f       	andi	r22, 0xFE	; 254
    71d4:	6e 5f       	subi	r22, 0xFE	; 254
    71d6:	7f 4f       	sbci	r23, 0xFF	; 255
    71d8:	8f 4f       	sbci	r24, 0xFF	; 255
    71da:	9f 4f       	sbci	r25, 0xFF	; 255
    71dc:	af 4f       	sbci	r26, 0xFF	; 255
    71de:	b1 e0       	ldi	r27, 0x01	; 1
    71e0:	3e d0       	rcall	.+124    	; 0x725e <__ultoa_invert+0x9c>
    71e2:	b4 e0       	ldi	r27, 0x04	; 4
    71e4:	3c d0       	rcall	.+120    	; 0x725e <__ultoa_invert+0x9c>
    71e6:	67 0f       	add	r22, r23
    71e8:	78 1f       	adc	r23, r24
    71ea:	89 1f       	adc	r24, r25
    71ec:	9a 1f       	adc	r25, r26
    71ee:	a1 1d       	adc	r26, r1
    71f0:	68 0f       	add	r22, r24
    71f2:	79 1f       	adc	r23, r25
    71f4:	8a 1f       	adc	r24, r26
    71f6:	91 1d       	adc	r25, r1
    71f8:	a1 1d       	adc	r26, r1
    71fa:	6a 0f       	add	r22, r26
    71fc:	71 1d       	adc	r23, r1
    71fe:	81 1d       	adc	r24, r1
    7200:	91 1d       	adc	r25, r1
    7202:	a1 1d       	adc	r26, r1
    7204:	20 d0       	rcall	.+64     	; 0x7246 <__ultoa_invert+0x84>
    7206:	09 f4       	brne	.+2      	; 0x720a <__ultoa_invert+0x48>
    7208:	68 94       	set
    720a:	3f 91       	pop	r19
    720c:	2a e0       	ldi	r18, 0x0A	; 10
    720e:	26 9f       	mul	r18, r22
    7210:	11 24       	eor	r1, r1
    7212:	30 19       	sub	r19, r0
    7214:	30 5d       	subi	r19, 0xD0	; 208
    7216:	31 93       	st	Z+, r19
    7218:	de f6       	brtc	.-74     	; 0x71d0 <__ultoa_invert+0xe>
    721a:	cf 01       	movw	r24, r30
    721c:	08 95       	ret
    721e:	46 2f       	mov	r20, r22
    7220:	47 70       	andi	r20, 0x07	; 7
    7222:	40 5d       	subi	r20, 0xD0	; 208
    7224:	41 93       	st	Z+, r20
    7226:	b3 e0       	ldi	r27, 0x03	; 3
    7228:	0f d0       	rcall	.+30     	; 0x7248 <__ultoa_invert+0x86>
    722a:	c9 f7       	brne	.-14     	; 0x721e <__ultoa_invert+0x5c>
    722c:	f6 cf       	rjmp	.-20     	; 0x721a <__ultoa_invert+0x58>
    722e:	46 2f       	mov	r20, r22
    7230:	4f 70       	andi	r20, 0x0F	; 15
    7232:	40 5d       	subi	r20, 0xD0	; 208
    7234:	4a 33       	cpi	r20, 0x3A	; 58
    7236:	18 f0       	brcs	.+6      	; 0x723e <__ultoa_invert+0x7c>
    7238:	49 5d       	subi	r20, 0xD9	; 217
    723a:	31 fd       	sbrc	r19, 1
    723c:	40 52       	subi	r20, 0x20	; 32
    723e:	41 93       	st	Z+, r20
    7240:	02 d0       	rcall	.+4      	; 0x7246 <__ultoa_invert+0x84>
    7242:	a9 f7       	brne	.-22     	; 0x722e <__ultoa_invert+0x6c>
    7244:	ea cf       	rjmp	.-44     	; 0x721a <__ultoa_invert+0x58>
    7246:	b4 e0       	ldi	r27, 0x04	; 4
    7248:	a6 95       	lsr	r26
    724a:	97 95       	ror	r25
    724c:	87 95       	ror	r24
    724e:	77 95       	ror	r23
    7250:	67 95       	ror	r22
    7252:	ba 95       	dec	r27
    7254:	c9 f7       	brne	.-14     	; 0x7248 <__ultoa_invert+0x86>
    7256:	00 97       	sbiw	r24, 0x00	; 0
    7258:	61 05       	cpc	r22, r1
    725a:	71 05       	cpc	r23, r1
    725c:	08 95       	ret
    725e:	9b 01       	movw	r18, r22
    7260:	ac 01       	movw	r20, r24
    7262:	0a 2e       	mov	r0, r26
    7264:	06 94       	lsr	r0
    7266:	57 95       	ror	r21
    7268:	47 95       	ror	r20
    726a:	37 95       	ror	r19
    726c:	27 95       	ror	r18
    726e:	ba 95       	dec	r27
    7270:	c9 f7       	brne	.-14     	; 0x7264 <__ultoa_invert+0xa2>
    7272:	62 0f       	add	r22, r18
    7274:	73 1f       	adc	r23, r19
    7276:	84 1f       	adc	r24, r20
    7278:	95 1f       	adc	r25, r21
    727a:	a0 1d       	adc	r26, r0
    727c:	08 95       	ret

0000727e <_exit>:
    727e:	f8 94       	cli

00007280 <__stop_program>:
    7280:	ff cf       	rjmp	.-2      	; 0x7280 <__stop_program>
