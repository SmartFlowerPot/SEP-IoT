
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000598  00800200  00006dce  00006e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000df4  00800798  00800798  000073fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000073fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb0  00000000  00000000  00007498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e77d  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039ab  00000000  00000000  000167c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071cf  00000000  00000000  0001a170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ab4  00000000  00000000  00021340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a0c  00000000  00000000  00023df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d475  00000000  00000000  00028800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  00035c75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cf 28 	jmp	0x519e	; 0x519e <__vector_25>
      68:	0c 94 21 29 	jmp	0x5242	; 0x5242 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 65 29 	jmp	0x52ca	; 0x52ca <__vector_36>
      94:	0c 94 b7 29 	jmp	0x536e	; 0x536e <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 fb 29 	jmp	0x53f6	; 0x53f6 <__vector_51>
      d0:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 91 2a 	jmp	0x5522	; 0x5522 <__vector_54>
      dc:	0c 94 e3 2a 	jmp	0x55c6	; 0x55c6 <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6c 20       	and	r6, r12
      e6:	6c 20       	and	r6, r12
      e8:	6c 20       	and	r6, r12
      ea:	a3 20       	and	r10, r3
      ec:	ab 20       	and	r10, r11
      ee:	c0 20       	and	r12, r0
      f0:	6c 20       	and	r6, r12
      f2:	6c 20       	and	r6, r12
      f4:	a3 20       	and	r10, r3
      f6:	ab 20       	and	r10, r11
      f8:	ed 2d       	mov	r30, r13
      fa:	5d 2e       	mov	r5, r29
      fc:	5d 2e       	mov	r5, r29
      fe:	5d 2e       	mov	r5, r29
     100:	5d 2e       	mov	r5, r29
     102:	5d 2e       	mov	r5, r29
     104:	5d 2e       	mov	r5, r29
     106:	5d 2e       	mov	r5, r29
     108:	ed 2d       	mov	r30, r13
     10a:	5d 2e       	mov	r5, r29
     10c:	5d 2e       	mov	r5, r29
     10e:	5d 2e       	mov	r5, r29
     110:	5d 2e       	mov	r5, r29
     112:	5d 2e       	mov	r5, r29
     114:	5d 2e       	mov	r5, r29
     116:	5d 2e       	mov	r5, r29
     118:	ef 2d       	mov	r30, r15
     11a:	5d 2e       	mov	r5, r29
     11c:	5d 2e       	mov	r5, r29
     11e:	5d 2e       	mov	r5, r29
     120:	5d 2e       	mov	r5, r29
     122:	5d 2e       	mov	r5, r29
     124:	5d 2e       	mov	r5, r29
     126:	5d 2e       	mov	r5, r29
     128:	5d 2e       	mov	r5, r29
     12a:	5d 2e       	mov	r5, r29
     12c:	5d 2e       	mov	r5, r29
     12e:	5d 2e       	mov	r5, r29
     130:	5d 2e       	mov	r5, r29
     132:	5d 2e       	mov	r5, r29
     134:	5d 2e       	mov	r5, r29
     136:	5d 2e       	mov	r5, r29
     138:	ef 2d       	mov	r30, r15
     13a:	5d 2e       	mov	r5, r29
     13c:	5d 2e       	mov	r5, r29
     13e:	5d 2e       	mov	r5, r29
     140:	5d 2e       	mov	r5, r29
     142:	5d 2e       	mov	r5, r29
     144:	5d 2e       	mov	r5, r29
     146:	5d 2e       	mov	r5, r29
     148:	5d 2e       	mov	r5, r29
     14a:	5d 2e       	mov	r5, r29
     14c:	5d 2e       	mov	r5, r29
     14e:	5d 2e       	mov	r5, r29
     150:	5d 2e       	mov	r5, r29
     152:	5d 2e       	mov	r5, r29
     154:	5d 2e       	mov	r5, r29
     156:	5d 2e       	mov	r5, r29
     158:	59 2e       	mov	r5, r25
     15a:	5d 2e       	mov	r5, r29
     15c:	5d 2e       	mov	r5, r29
     15e:	5d 2e       	mov	r5, r29
     160:	5d 2e       	mov	r5, r29
     162:	5d 2e       	mov	r5, r29
     164:	5d 2e       	mov	r5, r29
     166:	5d 2e       	mov	r5, r29
     168:	24 2e       	mov	r2, r20
     16a:	5d 2e       	mov	r5, r29
     16c:	5d 2e       	mov	r5, r29
     16e:	5d 2e       	mov	r5, r29
     170:	5d 2e       	mov	r5, r29
     172:	5d 2e       	mov	r5, r29
     174:	5d 2e       	mov	r5, r29
     176:	5d 2e       	mov	r5, r29
     178:	5d 2e       	mov	r5, r29
     17a:	5d 2e       	mov	r5, r29
     17c:	5d 2e       	mov	r5, r29
     17e:	5d 2e       	mov	r5, r29
     180:	5d 2e       	mov	r5, r29
     182:	5d 2e       	mov	r5, r29
     184:	5d 2e       	mov	r5, r29
     186:	5d 2e       	mov	r5, r29
     188:	18 2e       	mov	r1, r24
     18a:	5d 2e       	mov	r5, r29
     18c:	5d 2e       	mov	r5, r29
     18e:	5d 2e       	mov	r5, r29
     190:	5d 2e       	mov	r5, r29
     192:	5d 2e       	mov	r5, r29
     194:	5d 2e       	mov	r5, r29
     196:	5d 2e       	mov	r5, r29
     198:	3c 2e       	mov	r3, r28

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 c3 12 	call	0x2586	; 0x2586 <prvCheckTasksWaitingTermination>
     2a0:	80 91 d3 13 	lds	r24, 0x13D3	; 0x8013d3 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
     2ac:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <prvProcessTimerOrBlockTask>
     2ca:	0e 94 35 20 	call	0x406a	; 0x406a <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	17 e0       	ldi	r17, 0x07	; 7
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	ee ec       	ldi	r30, 0xCE	; 206
     2e8:	fd e6       	ldi	r31, 0x6D	; 109
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a8 39       	cpi	r26, 0x98	; 152
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	25 e1       	ldi	r18, 0x15	; 21
     2fc:	a8 e9       	ldi	r26, 0x98	; 152
     2fe:	b7 e0       	ldi	r27, 0x07	; 7
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	ac 38       	cpi	r26, 0x8C	; 140
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 93 21 	call	0x4326	; 0x4326 <main>
     30e:	0c 94 e5 36 	jmp	0x6dca	; 0x6dca <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:

/*
* Callback function called by the driver when the new CO2 measure is received.
*/
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 63 15 	sts	0x1563, r25	; 0x801563 <ppm+0x1>
     318:	80 93 62 15 	sts	0x1562, r24	; 0x801562 <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:


/*
* Task for taking the CO2 measurements and setting the CO2 value accordingly.
*/
void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32c:	0e 94 14 14 	call	0x2828	; 0x2828 <xTaskGetTickCount>
     330:	69 83       	std	Y+1, r22	; 0x01
     332:	7a 83       	std	Y+2, r23	; 0x02
     334:	8b 83       	std	Y+3, r24	; 0x03
     336:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     338:	40 ee       	ldi	r20, 0xE0	; 224
     33a:	53 e0       	ldi	r21, 0x03	; 3
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <xTaskDelayUntil>
		//pdFALSE,
		//pdTRUE,
		//portMAX_DELAY);
		
		//if ((readyBits & (ready_bit)) == (ready_bit)) {
			rc = mh_z19_takeMeassuring();
     348:	0e 94 28 27 	call	0x4e50	; 0x4e50 <mh_z19_takeMeassuring>
     34c:	80 93 61 15 	sts	0x1561, r24	; 0x801561 <rc>
			if (rc != MHZ19_OK){
     350:	81 11       	cpse	r24, r1
     352:	f2 cf       	rjmp	.-28     	; 0x338 <startReadingCO2+0x1a>
				// Something went wrong
				} else {
				((CO2_t)self)->CO2 = ppm;
     354:	80 91 62 15 	lds	r24, 0x1562	; 0x801562 <ppm>
     358:	90 91 63 15 	lds	r25, 0x1563	; 0x801563 <ppm+0x1>
     35c:	f8 01       	movw	r30, r16
     35e:	91 83       	std	Z+1, r25	; 0x01
     360:	80 83       	st	Z, r24
				set_co2(ppm);
     362:	80 91 62 15 	lds	r24, 0x1562	; 0x801562 <ppm>
     366:	90 91 63 15 	lds	r25, 0x1563	; 0x801563 <ppm+0x1>
     36a:	87 d2       	rcall	.+1294   	; 0x87a <set_co2>
				xEventGroupSetBits(group_start, ready_bit);
     36c:	40 91 64 15 	lds	r20, 0x1564	; 0x801564 <ready_bit>
     370:	50 91 65 15 	lds	r21, 0x1565	; 0x801565 <ready_bit+0x1>
     374:	60 91 66 15 	lds	r22, 0x1566	; 0x801566 <ready_bit+0x2>
     378:	70 91 67 15 	lds	r23, 0x1567	; 0x801567 <ready_bit+0x3>
     37c:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <group_start>
     380:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <group_start+0x1>
     384:	31 d6       	rcall	.+3170   	; 0xfe8 <xEventGroupSetBits>
     386:	d8 cf       	rjmp	.-80     	; 0x338 <startReadingCO2+0x1a>

00000388 <CO2_handler_init>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	9b 01       	movw	r18, r22
	//xEventGroupSetBits(group_start, ready_bit);

	xTaskCreate(
     390:	e1 2c       	mov	r14, r1
     392:	f1 2c       	mov	r15, r1
     394:	08 2f       	mov	r16, r24
     396:	44 e2       	ldi	r20, 0x24	; 36
     398:	51 e0       	ldi	r21, 0x01	; 1
     39a:	6f e6       	ldi	r22, 0x6F	; 111
     39c:	72 e0       	ldi	r23, 0x02	; 2
     39e:	8f e8       	ldi	r24, 0x8F	; 143
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 8a 13 	call	0x2714	; 0x2714 <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
}
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <createCO2>:
/*
* Method used for allocating memory for CO2 struct and returning it, initializing the CO2 value to 0, setting groups and bits,
* initializing the driver, injecting callback and creating a CO2 task.
*/
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	8c 01       	movw	r16, r24
     3c4:	5b 01       	movw	r10, r22
     3c6:	69 01       	movw	r12, r18
     3c8:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 9f 33 	call	0x673e	; 0x673e <malloc>
     3d2:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     3d4:	89 2b       	or	r24, r25
     3d6:	11 f1       	breq	.+68     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     3d8:	19 82       	std	Y+1, r1	; 0x01
     3da:	18 82       	st	Y, r1
	
	group_start = taskBits;
     3dc:	b0 92 69 15 	sts	0x1569, r11	; 0x801569 <group_start+0x1>
     3e0:	a0 92 68 15 	sts	0x1568, r10	; 0x801568 <group_start>
	ready_bit = bit;
     3e4:	c0 92 64 15 	sts	0x1564, r12	; 0x801564 <ready_bit>
     3e8:	d0 92 65 15 	sts	0x1565, r13	; 0x801565 <ready_bit+0x1>
     3ec:	e0 92 66 15 	sts	0x1566, r14	; 0x801566 <ready_bit+0x2>
     3f0:	f0 92 67 15 	sts	0x1567, r15	; 0x801567 <ready_bit+0x3>
	
	mh_z19_initialise(ser_USART3);
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <mh_z19_initialise>
	print_sharedf("CO2 sensor initialized");
     3fa:	87 e7       	ldi	r24, 0x77	; 119
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	55 d1       	rcall	.+682    	; 0x6ae <print_sharedf>
	mh_z19_injectCallBack(CO2_callback);
     404:	8a e8       	ldi	r24, 0x8A	; 138
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 23 27 	call	0x4e46	; 0x4e46 <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     40c:	be 01       	movw	r22, r28
     40e:	c8 01       	movw	r24, r16
     410:	bb df       	rcall	.-138    	; 0x388 <CO2_handler_init>
	return new_measure;
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	8c 2f       	mov	r24, r28
     418:	9d 2f       	mov	r25, r29
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
	print_sharedf("CO2 sensor initialized");
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	08 95       	ret

00000436 <DownLinkHandler_Create>:
void lora_downlink_handler_task(void* messageBuffer);

/*
* Function that creates the listener task
*/
void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	9b 01       	movw	r18, r22
	xTaskCreate(
     43e:	e1 2c       	mov	r14, r1
     440:	f1 2c       	mov	r15, r1
     442:	08 2f       	mov	r16, r24
     444:	48 e8       	ldi	r20, 0x88	; 136
     446:	51 e0       	ldi	r21, 0x01	; 1
     448:	6e e8       	ldi	r22, 0x8E	; 142
     44a:	72 e0       	ldi	r23, 0x02	; 2
     44c:	80 e7       	ldi	r24, 0x70	; 112
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	0e 94 8a 13 	call	0x2714	; 0x2714 <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	08 95       	ret

0000045c <lora_DownLinkHandler_StartTask>:

/*
* Function that contains task body and accepts incoming messages to open/close the window
*/
void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
	
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     464:	0f ef       	ldi	r16, 0xFF	; 255
     466:	1f ef       	ldi	r17, 0xFF	; 255
     468:	98 01       	movw	r18, r16
     46a:	46 e1       	ldi	r20, 0x16	; 22
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	68 e9       	ldi	r22, 0x98	; 152
     470:	77 e0       	ldi	r23, 0x07	; 7
     472:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xStreamBufferReceive>
	print_sharedf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     476:	c8 e9       	ldi	r28, 0x98	; 152
     478:	d7 e0       	ldi	r29, 0x07	; 7
     47a:	99 81       	ldd	r25, Y+1	; 0x01
     47c:	88 81       	ld	r24, Y
     47e:	1f 92       	push	r1
     480:	9f 93       	push	r25
     482:	1f 92       	push	r1
     484:	8f 93       	push	r24
     486:	88 ea       	ldi	r24, 0xA8	; 168
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0f d1       	rcall	.+542    	; 0x6ae <print_sharedf>
	if (1 == downlinkPayload.len){
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	d1 f4       	brne	.+52     	; 0x4d6 <lora_DownLinkHandler_StartTask+0x7a>
		if(downlinkPayload.bytes[0] == 1){
     4a2:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <__data_end+0x2>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	59 f4       	brne	.+22     	; 0x4c0 <lora_DownLinkHandler_StartTask+0x64>
			rc_servo_setPosition(1,-100); // fully open
     4aa:	6c e9       	ldi	r22, 0x9C	; 156
     4ac:	0e 94 57 27 	call	0x4eae	; 0x4eae <rc_servo_setPosition>
			print_sharedf("Window opened");
     4b0:	89 ed       	ldi	r24, 0xD9	; 217
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	fa d0       	rcall	.+500    	; 0x6ae <print_sharedf>
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0b c0       	rjmp	.+22     	; 0x4d6 <lora_DownLinkHandler_StartTask+0x7a>
		}
		else{
			rc_servo_setPosition(1, 100); // fully close
     4c0:	64 e6       	ldi	r22, 0x64	; 100
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 57 27 	call	0x4eae	; 0x4eae <rc_servo_setPosition>
			print_sharedf("Window closed");
     4c8:	87 ee       	ldi	r24, 0xE7	; 231
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	ee d0       	rcall	.+476    	; 0x6ae <print_sharedf>
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
		}
	}
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <lora_downlink_handler_task>:

/*
* Task method used to run the actual task
*/
void lora_downlink_handler_task(void* downLinkMessageBuffer){
     4e0:	ec 01       	movw	r28, r24
	for(;;){
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     4e2:	ce 01       	movw	r24, r28
     4e4:	bb df       	rcall	.-138    	; 0x45c <lora_DownLinkHandler_StartTask>
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <lora_downlink_handler_task+0x2>

000004e8 <tsl2591Callback>:

/*
* Callback function called when the new lux data is fetched.
*/
void tsl2591Callback(tsl2591_returnCode_t rc, LightHandler_t self)
{
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <tsl2591Callback+0xa>
     4f2:	1f 92       	push	r1
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
	
	float _lux;
	switch (rc)
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	99 f5       	brne	.+102    	; 0x562 <tsl2591Callback+0x7a>
     4fc:	8b 01       	movw	r16, r22
	{
		case TSL2591_DATA_READY:
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	0e 94 0f 2c 	call	0x581e	; 0x581e <tsl2591_getLux>
     506:	81 11       	cpse	r24, r1
     508:	23 c0       	rjmp	.+70     	; 0x550 <tsl2591Callback+0x68>
		{
			lux_val = _lux;
     50a:	69 81       	ldd	r22, Y+1	; 0x01
     50c:	7a 81       	ldd	r23, Y+2	; 0x02
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	0e 94 9b 21 	call	0x4336	; 0x4336 <__fixunssfsi>
     516:	70 93 af 07 	sts	0x07AF, r23	; 0x8007af <lux_val+0x1>
     51a:	60 93 ae 07 	sts	0x07AE, r22	; 0x8007ae <lux_val>
			//setting data using the shared sensor data c file
			set_light(_lux);
     51e:	cb 01       	movw	r24, r22
     520:	07 d2       	rcall	.+1038   	; 0x930 <set_light>
			xEventGroupSetBits(group_start, ready_bit);
     522:	40 91 64 15 	lds	r20, 0x1564	; 0x801564 <ready_bit>
     526:	50 91 65 15 	lds	r21, 0x1565	; 0x801565 <ready_bit+0x1>
     52a:	60 91 66 15 	lds	r22, 0x1566	; 0x801566 <ready_bit+0x2>
     52e:	70 91 67 15 	lds	r23, 0x1567	; 0x801567 <ready_bit+0x3>
     532:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <group_start>
     536:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <group_start+0x1>
     53a:	56 d5       	rcall	.+2732   	; 0xfe8 <xEventGroupSetBits>
			self ->lux = _lux;
     53c:	69 81       	ldd	r22, Y+1	; 0x01
     53e:	7a 81       	ldd	r23, Y+2	; 0x02
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	0e 94 9b 21 	call	0x4336	; 0x4336 <__fixunssfsi>
     548:	f8 01       	movw	r30, r16
     54a:	71 83       	std	Z+1, r23	; 0x01
     54c:	60 83       	st	Z, r22
     54e:	09 c0       	rjmp	.+18     	; 0x562 <tsl2591Callback+0x7a>
			
		}
		else if( TSL2591_OVERFLOW == rc )
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	39 f4       	brne	.+14     	; 0x562 <tsl2591Callback+0x7a>
		{
			print_sharedf("Lux overflow - change gain and integration time\n"); //switch
     554:	85 ef       	ldi	r24, 0xF5	; 245
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	a8 d0       	rcall	.+336    	; 0x6ae <print_sharedf>
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
		break;
		
		default:
		break;
	}
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <createLightTask>:
} LightHandler;

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void createLightTask(UBaseType_t light_priority, LightHandler_t self){
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	08 2f       	mov	r16, r24
     580:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     582:	40 91 64 15 	lds	r20, 0x1564	; 0x801564 <ready_bit>
     586:	50 91 65 15 	lds	r21, 0x1565	; 0x801565 <ready_bit+0x1>
     58a:	60 91 66 15 	lds	r22, 0x1566	; 0x801566 <ready_bit+0x2>
     58e:	70 91 67 15 	lds	r23, 0x1567	; 0x801567 <ready_bit+0x3>
     592:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <group_start>
     596:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <group_start+0x1>
     59a:	26 d5       	rcall	.+2636   	; 0xfe8 <xEventGroupSetBits>
	
	xTaskCreate(startReadingLight
     59c:	e1 2c       	mov	r14, r1
     59e:	f1 2c       	mov	r15, r1
     5a0:	9e 01       	movw	r18, r28
     5a2:	48 e8       	ldi	r20, 0x88	; 136
     5a4:	51 e0       	ldi	r21, 0x01	; 1
     5a6:	66 e2       	ldi	r22, 0x26	; 38
     5a8:	73 e0       	ldi	r23, 0x03	; 3
     5aa:	81 e3       	ldi	r24, 0x31	; 49
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 8a 13 	call	0x2714	; 0x2714 <xTaskCreate>
	, "Light task"
	, configMINIMAL_STACK_SIZE + 200,
	(void*) self,
	light_priority,
	NULL);
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	08 95       	ret

000005be <createLightSensor>:
/*
* Method used for allocating memory for LightHandler struct and returning it, initializing the lux value to 0, setting groups and bits,
* initializing the driver, injecting callback, enabling the driver and creating a light task.
*/
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	18 2f       	mov	r17, r24
     5d2:	7b 01       	movw	r14, r22
     5d4:	49 01       	movw	r8, r18
     5d6:	5a 01       	movw	r10, r20
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
     5d8:	62 e0       	ldi	r22, 0x02	; 2
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 85 33 	call	0x670a	; 0x670a <calloc>
     5e4:	ec 01       	movw	r28, r24
	
	if(new_measure == NULL){
     5e6:	89 2b       	or	r24, r25
     5e8:	19 f1       	breq	.+70     	; 0x630 <createLightSensor+0x72>
		return NULL;
	}
	new_measure -> lux = 0;
     5ea:	19 82       	std	Y+1, r1	; 0x01
     5ec:	18 82       	st	Y, r1
	ready_bit = bits;
     5ee:	80 92 64 15 	sts	0x1564, r8	; 0x801564 <ready_bit>
     5f2:	90 92 65 15 	sts	0x1565, r9	; 0x801565 <ready_bit+0x1>
     5f6:	a0 92 66 15 	sts	0x1566, r10	; 0x801566 <ready_bit+0x2>
     5fa:	b0 92 67 15 	sts	0x1567, r11	; 0x801567 <ready_bit+0x3>
	group_start = eventBits;
     5fe:	f0 92 69 15 	sts	0x1569, r15	; 0x801569 <group_start+0x1>
     602:	e0 92 68 15 	sts	0x1568, r14	; 0x801568 <group_start>
	
	//initialize sensor with the callback function
	if ( TSL2591_OK == tsl2591_initialise(tsl2591Callback))
     606:	84 e7       	ldi	r24, 0x74	; 116
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	0e 94 cd 2b 	call	0x579a	; 0x579a <tsl2591_initialise>
     60e:	81 11       	cpse	r24, r1
     610:	07 c0       	rjmp	.+14     	; 0x620 <createLightSensor+0x62>
	{
		print_sharedf("Light sensor initialized");
     612:	81 e3       	ldi	r24, 0x31	; 49
     614:	93 e0       	ldi	r25, 0x03	; 3
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	49 d0       	rcall	.+146    	; 0x6ae <print_sharedf>
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
	}
	
	//enable sensor
	if ( TSL2591_OK != tsl2591_enable() )
     620:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <tsl2591_enable>
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
     624:	be 01       	movw	r22, r28
     626:	81 2f       	mov	r24, r17
     628:	a5 df       	rcall	.-182    	; 0x574 <createLightTask>
	return new_measure;
     62a:	8c 2f       	mov	r24, r28
     62c:	9d 2f       	mov	r25, r29
     62e:	02 c0       	rjmp	.+4      	; 0x634 <createLightSensor+0x76>
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
	
	if(new_measure == NULL){
		return NULL;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
	return new_measure;
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	bf 90       	pop	r11
     640:	af 90       	pop	r10
     642:	9f 90       	pop	r9
     644:	8f 90       	pop	r8
     646:	08 95       	ret

00000648 <measure_light>:

/*
* Function used for measuring
*/
void measure_light(LightHandler_t self){
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
	//pdTRUE,
	//portMAX_DELAY);
	
	//check if all bits are set
	//if ((readyBits & (ready_bit)) == (ready_bit)) {
		if ( TSL2591_OK != tsl2591_fetchData() )
     64e:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <tsl2591_fetchData>
     652:	81 11       	cpse	r24, r1
     654:	03 c0       	rjmp	.+6      	; 0x65c <measure_light+0x14>
			// Investigate the return code further
		}
		else
		{
			//The light data will be ready after the driver calls the call back function with
			tsl2591Callback(TSL2591_DATA_READY, self);
     656:	be 01       	movw	r22, r28
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	46 df       	rcall	.-372    	; 0x4e8 <tsl2591Callback>
		}
	//}
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <startReadingLight>:

/*
* Reading task for sensor
*/
void startReadingLight(void* self){
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	00 d0       	rcall	.+0      	; 0x668 <startReadingLight+0x6>
     668:	1f 92       	push	r1
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     670:	0e 94 14 14 	call	0x2828	; 0x2828 <xTaskGetTickCount>
     674:	69 83       	std	Y+1, r22	; 0x01
     676:	7a 83       	std	Y+2, r23	; 0x02
     678:	8b 83       	std	Y+3, r24	; 0x03
     67a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds to read
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     67c:	42 ea       	ldi	r20, 0xA2	; 162
     67e:	53 e0       	ldi	r21, 0x03	; 3
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <xTaskDelayUntil>
		measure_light((LightHandler_t) self);
     68c:	c8 01       	movw	r24, r16
     68e:	dc df       	rcall	.-72     	; 0x648 <measure_light>
     690:	f5 cf       	rjmp	.-22     	; 0x67c <startReadingLight+0x1a>

00000692 <create_shared_printf>:

/*
* Initialize the semaphore mutex used to print text to the terminal
*/
void create_shared_printf(){
	if (xMutexPrint == NULL ){
     692:	80 91 6a 15 	lds	r24, 0x156A	; 0x80156a <xMutexPrint>
     696:	90 91 6b 15 	lds	r25, 0x156B	; 0x80156b <xMutexPrint+0x1>
     69a:	89 2b       	or	r24, r25
     69c:	39 f4       	brne	.+14     	; 0x6ac <create_shared_printf+0x1a>
		xMutexPrint = xSemaphoreCreateMutex();
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <xQueueCreateMutex>
     6a4:	90 93 6b 15 	sts	0x156B, r25	; 0x80156b <xMutexPrint+0x1>
     6a8:	80 93 6a 15 	sts	0x156A, r24	; 0x80156a <xMutexPrint>
     6ac:	08 95       	ret

000006ae <print_sharedf>:
}

/*
* Method used to print to the terminal, synchronized with the mutex
*/
void print_sharedf(char* format, ...){
     6ae:	0f 93       	push	r16
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
	va_list lst;
	if (xSemaphoreTake(xMutexPrint, (TickType_t) 300) == pdTRUE) {
     6b8:	4c e2       	ldi	r20, 0x2C	; 44
     6ba:	51 e0       	ldi	r21, 0x01	; 1
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 91 6a 15 	lds	r24, 0x156A	; 0x80156a <xMutexPrint>
     6c4:	90 91 6b 15 	lds	r25, 0x156B	; 0x80156b <xMutexPrint+0x1>
     6c8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	b9 f4       	brne	.+46     	; 0x6fe <print_sharedf+0x50>
		va_start(lst, format);
		//needs testing
		vprintf(format, lst);
     6d0:	be 01       	movw	r22, r28
     6d2:	67 5f       	subi	r22, 0xF7	; 247
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	98 85       	ldd	r25, Y+8	; 0x08
     6da:	0e 94 80 36 	call	0x6d00	; 0x6d00 <vprintf>
		printf("\n");
     6de:	8a e0       	ldi	r24, 0x0A	; 10
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 4d 36 	call	0x6c9a	; 0x6c9a <putchar>
		xSemaphoreGive(xMutexPrint);
     6e6:	00 e0       	ldi	r16, 0x00	; 0
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	a9 01       	movw	r20, r18
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 91 6a 15 	lds	r24, 0x156A	; 0x80156a <xMutexPrint>
     6f6:	90 91 6b 15 	lds	r25, 0x156B	; 0x80156b <xMutexPrint+0x1>
     6fa:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
	}
	else {}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	0f 91       	pop	r16
     704:	08 95       	ret

00000706 <create_semaphore_mutex_and_sensors>:
static uint16_t light_value = 0;
/*
* Function used to initialize pointers to the necessary structs and initializing the mutex for the shared data
*/
void create_semaphore_mutex_and_sensors(){
	if (xMutexSemaphore == NULL){
     706:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     70a:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     70e:	89 2b       	or	r24, r25
     710:	39 f4       	brne	.+14     	; 0x720 <create_semaphore_mutex_and_sensors+0x1a>
		xMutexSemaphore = xSemaphoreCreateMutex();
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 65 0d 	call	0x1aca	; 0x1aca <xQueueCreateMutex>
     718:	90 93 6d 15 	sts	0x156D, r25	; 0x80156d <xMutexSemaphore+0x1>
     71c:	80 93 6c 15 	sts	0x156C, r24	; 0x80156c <xMutexSemaphore>
     720:	08 95       	ret

00000722 <set_temp_hum>:
}

/*
* Function used to set the temperature and humidity, protected by the mutex 
*/
void set_temp_hum(float temp, uint16_t hum){
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	6b 01       	movw	r12, r22
     732:	7c 01       	movw	r14, r24
     734:	ea 01       	movw	r28, r20
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     736:	4c e2       	ldi	r20, 0x2C	; 44
     738:	51 e0       	ldi	r21, 0x01	; 1
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     742:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     746:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	c9 f4       	brne	.+50     	; 0x780 <set_temp_hum+0x5e>
		temperature_value = temp;
     74e:	c0 92 b6 07 	sts	0x07B6, r12	; 0x8007b6 <temperature_value>
     752:	d0 92 b7 07 	sts	0x07B7, r13	; 0x8007b7 <temperature_value+0x1>
     756:	e0 92 b8 07 	sts	0x07B8, r14	; 0x8007b8 <temperature_value+0x2>
     75a:	f0 92 b9 07 	sts	0x07B9, r15	; 0x8007b9 <temperature_value+0x3>
		humidity_value = hum;
     75e:	d0 93 b5 07 	sts	0x07B5, r29	; 0x8007b5 <humidity_value+0x1>
     762:	c0 93 b4 07 	sts	0x07B4, r28	; 0x8007b4 <humidity_value>
		xSemaphoreGive(xMutexSemaphore);
     766:	00 e0       	ldi	r16, 0x00	; 0
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	a9 01       	movw	r20, r18
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     776:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     77a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
     77e:	07 c0       	rjmp	.+14     	; 0x78e <set_temp_hum+0x6c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     780:	8a e4       	ldi	r24, 0x4A	; 74
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	92 df       	rcall	.-220    	; 0x6ae <print_sharedf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
	}
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	08 95       	ret

0000079e <get_humidity>:

/*
* Getter for the humidity, protected by the mutex
*/
uint16_t get_humidity(){
     79e:	0f 93       	push	r16
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
	uint16_t tmp;

	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     7a4:	4c e2       	ldi	r20, 0x2C	; 44
     7a6:	51 e0       	ldi	r21, 0x01	; 1
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     7b0:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     7b4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	99 f4       	brne	.+38     	; 0x7e2 <get_humidity+0x44>
		tmp = humidity_value;
     7bc:	d0 91 b4 07 	lds	r29, 0x07B4	; 0x8007b4 <humidity_value>
     7c0:	c0 91 b5 07 	lds	r28, 0x07B5	; 0x8007b5 <humidity_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     7c4:	00 e0       	ldi	r16, 0x00	; 0
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	a9 01       	movw	r20, r18
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     7d4:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     7d8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
		return tmp;
     7dc:	8d 2f       	mov	r24, r29
     7de:	9c 2f       	mov	r25, r28
     7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <get_humidity+0x56>
		} else{
		print_sharedf("The mutex could not be obtained.");
     7e2:	8a e4       	ldi	r24, 0x4A	; 74
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	61 df       	rcall	.-318    	; 0x6ae <print_sharedf>
		return 0;
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <get_temp>:

/*
* Getter for the temperature, protected by the mutex
*/
float get_temp(){
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
	float tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     806:	4c e2       	ldi	r20, 0x2C	; 44
     808:	51 e0       	ldi	r21, 0x01	; 1
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     812:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     816:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	c9 f4       	brne	.+50     	; 0x850 <get_temp+0x54>
		tmp = temperature_value;
     81e:	f0 90 b6 07 	lds	r15, 0x07B6	; 0x8007b6 <temperature_value>
     822:	10 91 b7 07 	lds	r17, 0x07B7	; 0x8007b7 <temperature_value+0x1>
     826:	d0 91 b8 07 	lds	r29, 0x07B8	; 0x8007b8 <temperature_value+0x2>
     82a:	c0 91 b9 07 	lds	r28, 0x07B9	; 0x8007b9 <temperature_value+0x3>
		xSemaphoreGive(xMutexSemaphore);
     82e:	00 e0       	ldi	r16, 0x00	; 0
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	a9 01       	movw	r20, r18
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     83e:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     842:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
		return tmp;
     846:	5f 2d       	mov	r21, r15
     848:	41 2f       	mov	r20, r17
     84a:	3d 2f       	mov	r19, r29
     84c:	2c 2f       	mov	r18, r28
     84e:	0b c0       	rjmp	.+22     	; 0x866 <get_temp+0x6a>
		} else{
		print_sharedf("The mutex could not be obtained.");
     850:	8a e4       	ldi	r24, 0x4A	; 74
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	2a df       	rcall	.-428    	; 0x6ae <print_sharedf>
		return 0.0;
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     866:	65 2f       	mov	r22, r21
     868:	74 2f       	mov	r23, r20
     86a:	83 2f       	mov	r24, r19
     86c:	92 2f       	mov	r25, r18
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	08 95       	ret

0000087a <set_co2>:

/*
* Setter for the co2, protected by the mutex
*/
void set_co2(uint16_t co2){
     87a:	0f 93       	push	r16
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     882:	4c e2       	ldi	r20, 0x2C	; 44
     884:	51 e0       	ldi	r21, 0x01	; 1
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     88e:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     892:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	89 f4       	brne	.+34     	; 0x8bc <set_co2+0x42>
		co2_value = co2;
     89a:	d0 93 b3 07 	sts	0x07B3, r29	; 0x8007b3 <co2_value+0x1>
     89e:	c0 93 b2 07 	sts	0x07B2, r28	; 0x8007b2 <co2_value>
		xSemaphoreGive(xMutexSemaphore);
     8a2:	00 e0       	ldi	r16, 0x00	; 0
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	a9 01       	movw	r20, r18
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     8b2:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     8b6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
     8ba:	07 c0       	rjmp	.+14     	; 0x8ca <set_co2+0x50>
		} else{
		print_sharedf("The mutex could not be obtained.");
     8bc:	8a e4       	ldi	r24, 0x4A	; 74
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	f4 de       	rcall	.-536    	; 0x6ae <print_sharedf>
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
	}
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <get_co2>:

/*
* Getter for co2, protected by the mutex
*/
uint16_t get_co2(){
     8d2:	0f 93       	push	r16
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     8d8:	4c e2       	ldi	r20, 0x2C	; 44
     8da:	51 e0       	ldi	r21, 0x01	; 1
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     8e4:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     8e8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	99 f4       	brne	.+38     	; 0x916 <get_co2+0x44>
		tmp = co2_value;
     8f0:	d0 91 b2 07 	lds	r29, 0x07B2	; 0x8007b2 <co2_value>
     8f4:	c0 91 b3 07 	lds	r28, 0x07B3	; 0x8007b3 <co2_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	a9 01       	movw	r20, r18
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     908:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     90c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
		return tmp;
     910:	8d 2f       	mov	r24, r29
     912:	9c 2f       	mov	r25, r28
     914:	09 c0       	rjmp	.+18     	; 0x928 <get_co2+0x56>
		} else{
		print_sharedf("The mutex could not be obtained.");
     916:	8a e4       	ldi	r24, 0x4A	; 74
     918:	93 e0       	ldi	r25, 0x03	; 3
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	c7 de       	rcall	.-626    	; 0x6ae <print_sharedf>
		return 0;
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <set_light>:

/*
* Setter for light levels, protected by the mutex
*/
void set_light(uint16_t light_lux){
     930:	0f 93       	push	r16
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     938:	4c e2       	ldi	r20, 0x2C	; 44
     93a:	51 e0       	ldi	r21, 0x01	; 1
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     944:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     948:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	89 f4       	brne	.+34     	; 0x972 <set_light+0x42>
		light_value = light_lux;
     950:	d0 93 b1 07 	sts	0x07B1, r29	; 0x8007b1 <light_value+0x1>
     954:	c0 93 b0 07 	sts	0x07B0, r28	; 0x8007b0 <light_value>
		xSemaphoreGive(xMutexSemaphore);
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     968:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     96c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
     970:	07 c0       	rjmp	.+14     	; 0x980 <set_light+0x50>
		} else{
		print_sharedf("The mutex could not be obtained.");
     972:	8a e4       	ldi	r24, 0x4A	; 74
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	99 de       	rcall	.-718    	; 0x6ae <print_sharedf>
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
	}
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	0f 91       	pop	r16
     986:	08 95       	ret

00000988 <get_light>:

/*
* Getter for the light levels, protected by the mutex
*/
uint16_t get_light(){
     988:	0f 93       	push	r16
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     98e:	4c e2       	ldi	r20, 0x2C	; 44
     990:	51 e0       	ldi	r21, 0x01	; 1
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     99a:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     99e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xQueueSemaphoreTake>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	91 f4       	brne	.+36     	; 0x9ca <get_light+0x42>
		tmp = light_value;
     9a6:	d0 91 b0 07 	lds	r29, 0x07B0	; 0x8007b0 <light_value>
     9aa:	c0 91 b1 07 	lds	r28, 0x07B1	; 0x8007b1 <light_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     9ae:	00 e0       	ldi	r16, 0x00	; 0
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	a9 01       	movw	r20, r18
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xMutexSemaphore>
     9be:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xMutexSemaphore+0x1>
     9c2:	df d7       	rcall	.+4030   	; 0x1982 <xQueueGenericSend>
		return tmp;
     9c4:	8d 2f       	mov	r24, r29
     9c6:	9c 2f       	mov	r25, r28
     9c8:	09 c0       	rjmp	.+18     	; 0x9dc <get_light+0x54>
		} else{
		print_sharedf("The mutex could not be obtained.");
     9ca:	8a e4       	ldi	r24, 0x4A	; 74
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	6d de       	rcall	.-806    	; 0x6ae <print_sharedf>
		return 0;
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
	}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <temperature_handler_init>:
} TemperatureHandler;

/*
* initialize bits and create the task
*/
void temperature_handler_init(Temperature_t self, uint16_t priority){
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
	//xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	06 2f       	mov	r16, r22
     9f0:	9c 01       	movw	r18, r24
     9f2:	40 ec       	ldi	r20, 0xC0	; 192
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	6b e6       	ldi	r22, 0x6B	; 107
     9f8:	73 e0       	ldi	r23, 0x03	; 3
     9fa:	88 e7       	ldi	r24, 0x78	; 120
     9fc:	95 e0       	ldi	r25, 0x05	; 5
     9fe:	0e 94 8a 13 	call	0x2714	; 0x2714 <xTaskCreate>
}
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	08 95       	ret

00000a0a <createTemp>:

/*
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     a0a:	af 92       	push	r10
     a0c:	bf 92       	push	r11
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	8c 01       	movw	r16, r24
     a20:	5b 01       	movw	r10, r22
     a22:	69 01       	movw	r12, r18
     a24:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     a26:	86 e0       	ldi	r24, 0x06	; 6
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 9f 33 	call	0x673e	; 0x673e <malloc>
     a2e:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     a30:	89 2b       	or	r24, r25
     a32:	19 f1       	breq	.+70     	; 0xa7a <createTemp+0x70>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     a34:	18 82       	st	Y, r1
     a36:	19 82       	std	Y+1, r1	; 0x01
     a38:	1a 82       	std	Y+2, r1	; 0x02
     a3a:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     a3c:	1d 82       	std	Y+5, r1	; 0x05
     a3e:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     a40:	b0 92 69 15 	sts	0x1569, r11	; 0x801569 <group_start+0x1>
     a44:	a0 92 68 15 	sts	0x1568, r10	; 0x801568 <group_start>
	ready_bit = bit;
     a48:	c0 92 64 15 	sts	0x1564, r12	; 0x801564 <ready_bit>
     a4c:	d0 92 65 15 	sts	0x1565, r13	; 0x801565 <ready_bit+0x1>
     a50:	e0 92 66 15 	sts	0x1566, r14	; 0x801566 <ready_bit+0x2>
     a54:	f0 92 67 15 	sts	0x1567, r15	; 0x801567 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     a58:	0e 94 01 23 	call	0x4602	; 0x4602 <hih8120_initialise>
     a5c:	81 11       	cpse	r24, r1
     a5e:	07 c0       	rjmp	.+14     	; 0xa6e <createTemp+0x64>
	{
		print_sharedf("Temperature and humidity sensor initialized.");
     a60:	8c e7       	ldi	r24, 0x7C	; 124
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	22 de       	rcall	.-956    	; 0x6ae <print_sharedf>
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
	}
	
	temperature_handler_init(new_measure, priority);
     a6e:	b8 01       	movw	r22, r16
     a70:	ce 01       	movw	r24, r28
     a72:	b8 df       	rcall	.-144    	; 0x9e4 <temperature_handler_init>
	return new_measure;
     a74:	8c 2f       	mov	r24, r28
     a76:	9d 2f       	mov	r25, r29
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <createTemp+0x74>
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
		print_sharedf("Temperature and humidity sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	bf 90       	pop	r11
     a90:	af 90       	pop	r10
     a92:	08 95       	ret

00000a94 <measureTempAndHum>:

/*
* set data using the shared sensor data c file
*/
void measureTempAndHum(Temperature_t self){
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24

	self->temperature = hih8120_getTemperature();
     a9a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <hih8120_getTemperature>
     a9e:	68 83       	st	Y, r22
     aa0:	79 83       	std	Y+1, r23	; 0x01
     aa2:	8a 83       	std	Y+2, r24	; 0x02
     aa4:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10()/10;
     aa6:	0e 94 54 23 	call	0x46a8	; 0x46a8 <hih8120_getHumidityPercent_x10>
     aaa:	9c 01       	movw	r18, r24
     aac:	ad ec       	ldi	r26, 0xCD	; 205
     aae:	bc ec       	ldi	r27, 0xCC	; 204
     ab0:	0e 94 76 33 	call	0x66ec	; 0x66ec <__umulhisi3>
     ab4:	ac 01       	movw	r20, r24
     ab6:	56 95       	lsr	r21
     ab8:	47 95       	ror	r20
     aba:	56 95       	lsr	r21
     abc:	47 95       	ror	r20
     abe:	56 95       	lsr	r21
     ac0:	47 95       	ror	r20
     ac2:	5d 83       	std	Y+5, r21	; 0x05
     ac4:	4c 83       	std	Y+4, r20	; 0x04
	
	set_temp_hum(self->temperature, self->humidity);
     ac6:	68 81       	ld	r22, Y
     ac8:	79 81       	ldd	r23, Y+1	; 0x01
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	29 de       	rcall	.-942    	; 0x722 <set_temp_hum>
	xEventGroupSetBits(group_start, ready_bit);
     ad0:	40 91 64 15 	lds	r20, 0x1564	; 0x801564 <ready_bit>
     ad4:	50 91 65 15 	lds	r21, 0x1565	; 0x801565 <ready_bit+0x1>
     ad8:	60 91 66 15 	lds	r22, 0x1566	; 0x801566 <ready_bit+0x2>
     adc:	70 91 67 15 	lds	r23, 0x1567	; 0x801567 <ready_bit+0x3>
     ae0:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <group_start>
     ae4:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <group_start+0x1>
     ae8:	7f d2       	rcall	.+1278   	; 0xfe8 <xEventGroupSetBits>
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <startReading>:

/*
* start reading data
*/
void startReading(void* self){
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <startReading+0x6>
     af6:	1f 92       	push	r1
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     afe:	0e 94 14 14 	call	0x2828	; 0x2828 <xTaskGetTickCount>
     b02:	69 83       	std	Y+1, r22	; 0x01
     b04:	7a 83       	std	Y+2, r23	; 0x02
     b06:	8b 83       	std	Y+3, r24	; 0x03
     b08:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     b0a:	42 ea       	ldi	r20, 0xA2	; 162
     b0c:	53 e0       	ldi	r21, 0x03	; 3
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <xTaskDelayUntil>
		//wake-up sensor
		if (HIH8120_OK != hih8120_wakeup())
     b1a:	0e 94 19 23 	call	0x4632	; 0x4632 <hih8120_wakeup>
     b1e:	88 23       	and	r24, r24
     b20:	39 f0       	breq	.+14     	; 0xb30 <startReading+0x40>
		{
			print_sharedf("Temp task failed to work!");
     b22:	89 ea       	ldi	r24, 0xA9	; 169
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	9f 93       	push	r25
     b28:	8f 93       	push	r24
     b2a:	c1 dd       	rcall	.-1150   	; 0x6ae <print_sharedf>
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
		//pdFALSE,
		//pdTRUE,
		//portMAX_DELAY);
		
		//give the sensor time to wake up
		vTaskDelay(pdMS_TO_TICKS(70));
     b30:	64 e0       	ldi	r22, 0x04	; 4
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <vTaskDelay>
		//check if the bits are set
		//if ((readyBits & (ready_bit)) == (ready_bit)) {
			hih8120_measure(); //measure temperature and humidity
     b3c:	0e 94 2e 23 	call	0x465c	; 0x465c <hih8120_measure>
			vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	cb 01       	movw	r24, r22
     b46:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <vTaskDelay>
			
			measureTempAndHum((Temperature_t) self);
     b4a:	c8 01       	movw	r24, r16
     b4c:	a3 df       	rcall	.-186    	; 0xa94 <measureTempAndHum>
		//}
	}
     b4e:	dd cf       	rjmp	.-70     	; 0xb0a <startReading+0x1a>

00000b50 <_lora_setup>:

/*
* Setup function that initializes the LoRaWAN Parameters
*/
static void _lora_setup(void)
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	64 97       	sbiw	r28, 0x14	; 20
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;

	// Factory reset the transceiver
	lora_driver_rn2483FactoryReset();
     b68:	0e 94 e5 24 	call	0x49ca	; 0x49ca <lora_driver_rn2483FactoryReset>
	
	// Configure to EU868 LoRaWAN standards
	lora_driver_configureToEu868();
     b6c:	0e 94 98 25 	call	0x4b30	; 0x4b30 <lora_driver_configureToEu868>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     b70:	ce 01       	movw	r24, r28
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	0e 94 f7 24 	call	0x49ee	; 0x49ee <lora_driver_getRn2483Hweui>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	lora_driver_setDeviceIdentifier(_out_buf);
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 13 25 	call	0x4a26	; 0x4a26 <lora_driver_setDeviceIdentifier>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf);
     b80:	ae 01       	movw	r20, r28
     b82:	4f 5f       	subi	r20, 0xFF	; 255
     b84:	5f 4f       	sbci	r21, 0xFF	; 255
     b86:	63 ec       	ldi	r22, 0xC3	; 195
     b88:	73 e0       	ldi	r23, 0x03	; 3
     b8a:	84 ee       	ldi	r24, 0xE4	; 228
     b8c:	93 e0       	ldi	r25, 0x03	; 3
     b8e:	0e 94 76 26 	call	0x4cec	; 0x4cec <lora_driver_setOtaaIdentity>

	// Save all the MAC settings in the transceiver
	lora_driver_saveMac();
     b92:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <lora_driver_saveMac>

	// Enable Adaptive Data Rate
	lora_driver_setAdaptiveDataRate(LORA_ON);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 75 25 	call	0x4aea	; 0x4aea <lora_driver_setAdaptiveDataRate>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	lora_driver_setReceiveDelay(500);
     b9c:	84 ef       	ldi	r24, 0xF4	; 244
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 80 25 	call	0x4b00	; 0x4b00 <lora_driver_setReceiveDelay>

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     ba4:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <lora_driver_join>
     bac:	08 2f       	mov	r16, r24
		print_sharedf("Join Network Tries Left:%d >%s<", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     bae:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <lora_driver_mapReturnCodeToText>
     bb2:	9f 93       	push	r25
     bb4:	8f 93       	push	r24
     bb6:	1f 92       	push	r1
     bb8:	1f 93       	push	r17
     bba:	85 ef       	ldi	r24, 0xF5	; 245
     bbc:	93 e0       	ldi	r25, 0x03	; 3
     bbe:	9f 93       	push	r25
     bc0:	8f 93       	push	r24
     bc2:	75 dd       	rcall	.-1302   	; 0x6ae <print_sharedf>

		if ( rc != LORA_ACCEPTED)
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	08 30       	cpi	r16, 0x08	; 8
     bd2:	41 f0       	breq	.+16     	; 0xbe4 <_lora_setup+0x94>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     bd4:	66 e3       	ldi	r22, 0x36	; 54
     bd6:	71 e0       	ldi	r23, 0x01	; 1
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     be0:	11 50       	subi	r17, 0x01	; 1
     be2:	09 f7       	brne	.-62     	; 0xba6 <_lora_setup+0x56>

	if (rc == LORA_ACCEPTED)
     be4:	08 30       	cpi	r16, 0x08	; 8
     be6:	41 f4       	brne	.+16     	; 0xbf8 <_lora_setup+0xa8>
	{
		// Connected to LoRaWAN :-)
		print_sharedf("Connected to the LoRaWAN Network successfully.");
     be8:	85 e1       	ldi	r24, 0x15	; 21
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	5e dd       	rcall	.-1348   	; 0x6ae <print_sharedf>
		while (1)
		{
			taskYIELD();
		}
	}
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
	{
		// Something went wrong
		// Lets stay here
		while (1)
		{
			taskYIELD();
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <_lora_setup+0xac>
     bf8:	ac d4       	rcall	.+2392   	; 0x1552 <vPortYield>
     bfa:	fe cf       	rjmp	.-4      	; 0xbf8 <_lora_setup+0xa8>
		}
	}
}
     bfc:	64 96       	adiw	r28, 0x14	; 20
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <lora_handler_task>:

/*
* Function task that stars sending data in the specified 5 minute interval
*/
void lora_handler_task(void* pvParameters){
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	00 d0       	rcall	.+0      	; 0xc18 <lora_handler_task+0x6>
     c18:	1f 92       	push	r1
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	
	const TickType_t delay = 10000/portTICK_PERIOD_MS;
	vTaskDelay(delay);
     c1e:	61 e7       	ldi	r22, 0x71	; 113
     c20:	72 e0       	ldi	r23, 0x02	; 2
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <vTaskDelay>
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 d7 24 	call	0x49ae	; 0x49ae <lora_driver_resetRn2483>
	vTaskDelay(2);
     c30:	62 e0       	ldi	r22, 0x02	; 2
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <vTaskDelay>
	lora_driver_resetRn2483(0);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 d7 24 	call	0x49ae	; 0x49ae <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     c42:	66 e9       	ldi	r22, 0x96	; 150
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     c4e:	0e 94 90 24 	call	0x4920	; 0x4920 <lora_driver_flushBuffers>

	_lora_setup();
     c52:	7e df       	rcall	.-260    	; 0xb50 <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     c54:	0e 94 14 14 	call	0x2828	; 0x2828 <xTaskGetTickCount>
		//xTaskDelayUntil(&xLastWakeTime, xFrequency);
		_uplink_payload.len = 7;
		_uplink_payload.portNo = 1;
		
		EventBits_t readyBits = xEventGroupWaitBits(taskBits_ready,
		tempbit_ready&co2bit_ready&lightbit_ready,
     c58:	40 91 78 15 	lds	r20, 0x1578	; 0x801578 <tempbit_ready>
     c5c:	50 91 79 15 	lds	r21, 0x1579	; 0x801579 <tempbit_ready+0x1>
     c60:	60 91 7a 15 	lds	r22, 0x157A	; 0x80157a <tempbit_ready+0x2>
     c64:	70 91 7b 15 	lds	r23, 0x157B	; 0x80157b <tempbit_ready+0x3>
     c68:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <co2bit_ready>
     c6c:	90 91 6f 15 	lds	r25, 0x156F	; 0x80156f <co2bit_ready+0x1>
     c70:	a0 91 70 15 	lds	r26, 0x1570	; 0x801570 <co2bit_ready+0x2>
     c74:	b0 91 71 15 	lds	r27, 0x1571	; 0x801571 <co2bit_ready+0x3>
     c78:	48 23       	and	r20, r24
     c7a:	59 23       	and	r21, r25
     c7c:	6a 23       	and	r22, r26
     c7e:	7b 23       	and	r23, r27
		
		//xTaskDelayUntil(&xLastWakeTime, xFrequency);
		_uplink_payload.len = 7;
		_uplink_payload.portNo = 1;
		
		EventBits_t readyBits = xEventGroupWaitBits(taskBits_ready,
     c80:	80 91 72 15 	lds	r24, 0x1572	; 0x801572 <lightbit_ready>
     c84:	90 91 73 15 	lds	r25, 0x1573	; 0x801573 <lightbit_ready+0x1>
     c88:	a0 91 74 15 	lds	r26, 0x1574	; 0x801574 <lightbit_ready+0x2>
     c8c:	b0 91 75 15 	lds	r27, 0x1575	; 0x801575 <lightbit_ready+0x3>
     c90:	48 23       	and	r20, r24
     c92:	59 23       	and	r21, r25
     c94:	6a 23       	and	r22, r26
     c96:	7b 23       	and	r23, r27
     c98:	cc 24       	eor	r12, r12
     c9a:	ca 94       	dec	r12
     c9c:	dc 2c       	mov	r13, r12
     c9e:	76 01       	movw	r14, r12
     ca0:	01 e0       	ldi	r16, 0x01	; 1
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	80 91 76 15 	lds	r24, 0x1576	; 0x801576 <taskBits_ready>
     ca8:	90 91 77 15 	lds	r25, 0x1577	; 0x801577 <taskBits_ready+0x1>
     cac:	fd d0       	rcall	.+506    	; 0xea8 <xEventGroupWaitBits>
     cae:	8b 01       	movw	r16, r22
     cb0:	9c 01       	movw	r18, r24
		tempbit_ready&co2bit_ready&lightbit_ready,
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		if((readyBits & (tempbit_ready&co2bit_ready&lightbit_ready)) == (tempbit_ready&co2bit_ready&lightbit_ready)){
     cb2:	40 91 78 15 	lds	r20, 0x1578	; 0x801578 <tempbit_ready>
     cb6:	50 91 79 15 	lds	r21, 0x1579	; 0x801579 <tempbit_ready+0x1>
     cba:	60 91 7a 15 	lds	r22, 0x157A	; 0x80157a <tempbit_ready+0x2>
     cbe:	70 91 7b 15 	lds	r23, 0x157B	; 0x80157b <tempbit_ready+0x3>
     cc2:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <co2bit_ready>
     cc6:	90 91 6f 15 	lds	r25, 0x156F	; 0x80156f <co2bit_ready+0x1>
     cca:	a0 91 70 15 	lds	r26, 0x1570	; 0x801570 <co2bit_ready+0x2>
     cce:	b0 91 71 15 	lds	r27, 0x1571	; 0x801571 <co2bit_ready+0x3>
     cd2:	84 23       	and	r24, r20
     cd4:	95 23       	and	r25, r21
     cd6:	a6 23       	and	r26, r22
     cd8:	b7 23       	and	r27, r23
     cda:	40 91 72 15 	lds	r20, 0x1572	; 0x801572 <lightbit_ready>
     cde:	50 91 73 15 	lds	r21, 0x1573	; 0x801573 <lightbit_ready+0x1>
     ce2:	60 91 74 15 	lds	r22, 0x1574	; 0x801574 <lightbit_ready+0x2>
     ce6:	70 91 75 15 	lds	r23, 0x1575	; 0x801575 <lightbit_ready+0x3>
     cea:	84 23       	and	r24, r20
     cec:	95 23       	and	r25, r21
     cee:	a6 23       	and	r26, r22
     cf0:	b7 23       	and	r27, r23
     cf2:	b9 01       	movw	r22, r18
     cf4:	a8 01       	movw	r20, r16
     cf6:	48 23       	and	r20, r24
     cf8:	59 23       	and	r21, r25
     cfa:	6a 23       	and	r22, r26
     cfc:	7b 23       	and	r23, r27
     cfe:	84 17       	cp	r24, r20
     d00:	95 07       	cpc	r25, r21
     d02:	a6 07       	cpc	r26, r22
     d04:	b7 07       	cpc	r27, r23
     d06:	09 f0       	breq	.+2      	; 0xd0a <lora_handler_task+0xf8>
			
			double temp = (double) get_temp();
     d08:	a7 cf       	rjmp	.-178    	; 0xc58 <lora_handler_task+0x46>
     d0a:	78 dd       	rcall	.-1296   	; 0x7fc <get_temp>
     d0c:	d6 2e       	mov	r13, r22
     d0e:	c7 2e       	mov	r12, r23
     d10:	b8 2e       	mov	r11, r24
			uint16_t humidity = get_humidity();
     d12:	a9 2e       	mov	r10, r25
     d14:	44 dd       	rcall	.-1400   	; 0x79e <get_humidity>
			uint16_t co2_val = get_co2();
     d16:	8c 01       	movw	r16, r24
     d18:	dc dd       	rcall	.-1096   	; 0x8d2 <get_co2>
     d1a:	7c 01       	movw	r14, r24
			uint16_t light_val = get_light();
     d1c:	35 de       	rcall	.-918    	; 0x988 <get_light>
     d1e:	98 2e       	mov	r9, r24
     d20:	89 2e       	mov	r8, r25
     d22:	20 e0       	ldi	r18, 0x00	; 0
			
			if(temp == 0.0 || humidity == 0 || co2_val == 0){
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	a9 01       	movw	r20, r18
     d28:	6d 2d       	mov	r22, r13
     d2a:	7c 2d       	mov	r23, r12
     d2c:	8b 2d       	mov	r24, r11
     d2e:	9a 2d       	mov	r25, r10
     d30:	0e 94 97 21 	call	0x432e	; 0x432e <__cmpsf2>
     d34:	88 23       	and	r24, r24
     d36:	31 f0       	breq	.+12     	; 0xd44 <lora_handler_task+0x132>
     d38:	01 15       	cp	r16, r1
     d3a:	11 05       	cpc	r17, r1
     d3c:	19 f0       	breq	.+6      	; 0xd44 <lora_handler_task+0x132>
     d3e:	e1 14       	cp	r14, r1
     d40:	f1 04       	cpc	r15, r1
     d42:	99 f4       	brne	.+38     	; 0xd6a <lora_handler_task+0x158>
     d44:	ff 92       	push	r15
				print_sharedf("Sensors are still calibrating %f, %d, %d", temp, humidity, co2_val);
     d46:	ef 92       	push	r14
     d48:	1f 93       	push	r17
     d4a:	0f 93       	push	r16
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	84 e4       	ldi	r24, 0x44	; 68
     d56:	94 e0       	ldi	r25, 0x04	; 4
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	a8 dc       	rcall	.-1712   	; 0x6ae <print_sharedf>
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	77 cf       	rjmp	.-274    	; 0xc58 <lora_handler_task+0x46>
     d6a:	19 82       	std	Y+1, r1	; 0x01
			}
			else{
				double val1=0;
     d6c:	1a 82       	std	Y+2, r1	; 0x02
     d6e:	1b 82       	std	Y+3, r1	; 0x03
     d70:	1c 82       	std	Y+4, r1	; 0x04
     d72:	ae 01       	movw	r20, r28
				double val2=0;
				val2 = modf(temp, &val1);
     d74:	4f 5f       	subi	r20, 0xFF	; 255
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	6d 2d       	mov	r22, r13
     d7a:	7c 2d       	mov	r23, r12
     d7c:	8b 2d       	mov	r24, r11
     d7e:	9a 2d       	mov	r25, r10
     d80:	0e 94 14 22 	call	0x4428	; 0x4428 <modf>
     d84:	af 92       	push	r10
				val2 = val2 * 100;
				
				//temperature
				print_sharedf("Temperature: %f", temp);
     d86:	bf 92       	push	r11
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	8d e6       	ldi	r24, 0x6D	; 109
     d8e:	94 e0       	ldi	r25, 0x04	; 4
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	8c dc       	rcall	.-1768   	; 0x6ae <print_sharedf>
				_uplink_payload.bytes[0] = (int) val1;
				_uplink_payload.bytes[1] = (int) val2;
				
				//humidity
				print_sharedf("Humidity: %d", humidity);
     d96:	1f 93       	push	r17
     d98:	0f 93       	push	r16
     d9a:	8d e7       	ldi	r24, 0x7D	; 125
     d9c:	94 e0       	ldi	r25, 0x04	; 4
     d9e:	9f 93       	push	r25
     da0:	8f 93       	push	r24
     da2:	85 dc       	rcall	.-1782   	; 0x6ae <print_sharedf>
				_uplink_payload.bytes[2] = humidity;
				
				//co2
				print_sharedf("CO2: %d", co2_val);
     da4:	ff 92       	push	r15
     da6:	ef 92       	push	r14
     da8:	8a e8       	ldi	r24, 0x8A	; 138
     daa:	94 e0       	ldi	r25, 0x04	; 4
     dac:	9f 93       	push	r25
     dae:	8f 93       	push	r24
     db0:	7e dc       	rcall	.-1796   	; 0x6ae <print_sharedf>
				_uplink_payload.bytes[3] = co2_val >> 8;
				_uplink_payload.bytes[4] = co2_val & 0xFF;
				
				//light
				print_sharedf("Light in lux: %d", light_val);
     db2:	8f 92       	push	r8
     db4:	9f 92       	push	r9
     db6:	82 e9       	ldi	r24, 0x92	; 146
     db8:	94 e0       	ldi	r25, 0x04	; 4
     dba:	9f 93       	push	r25
     dbc:	8f 93       	push	r24
     dbe:	77 dc       	rcall	.-1810   	; 0x6ae <print_sharedf>
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	46 cf       	rjmp	.-372    	; 0xc58 <lora_handler_task+0x46>

00000dcc <lora_handler_initialize>:
     dcc:	af 92       	push	r10
void lora_handler_task(void* pvParameters);

/*
* Function call used to start the networking task
*/
void lora_handler_initialize(uint16_t lora_handler_task_priority, EventGroupHandle_t taskReadyBits, EventBits_t tempbit, EventBits_t co2bit, EventBits_t lightbit){
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
	
	taskBits_ready = taskReadyBits;
     ddc:	70 93 77 15 	sts	0x1577, r23	; 0x801577 <taskBits_ready+0x1>
     de0:	60 93 76 15 	sts	0x1576, r22	; 0x801576 <taskBits_ready>
	tempbit_ready = tempbit;
     de4:	20 93 78 15 	sts	0x1578, r18	; 0x801578 <tempbit_ready>
     de8:	30 93 79 15 	sts	0x1579, r19	; 0x801579 <tempbit_ready+0x1>
     dec:	40 93 7a 15 	sts	0x157A, r20	; 0x80157a <tempbit_ready+0x2>
     df0:	50 93 7b 15 	sts	0x157B, r21	; 0x80157b <tempbit_ready+0x3>
	co2bit_ready = co2bit;
     df4:	e0 92 6e 15 	sts	0x156E, r14	; 0x80156e <co2bit_ready>
     df8:	f0 92 6f 15 	sts	0x156F, r15	; 0x80156f <co2bit_ready+0x1>
     dfc:	00 93 70 15 	sts	0x1570, r16	; 0x801570 <co2bit_ready+0x2>
     e00:	10 93 71 15 	sts	0x1571, r17	; 0x801571 <co2bit_ready+0x3>
	lightbit_ready = lightbit;
     e04:	a0 92 72 15 	sts	0x1572, r10	; 0x801572 <lightbit_ready>
     e08:	b0 92 73 15 	sts	0x1573, r11	; 0x801573 <lightbit_ready+0x1>
     e0c:	c0 92 74 15 	sts	0x1574, r12	; 0x801574 <lightbit_ready+0x2>
     e10:	d0 92 75 15 	sts	0x1575, r13	; 0x801575 <lightbit_ready+0x3>
	
	xTaskCreate(
     e14:	e1 2c       	mov	r14, r1
     e16:	f1 2c       	mov	r15, r1
     e18:	08 2f       	mov	r16, r24
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	48 e8       	ldi	r20, 0x88	; 136
     e20:	51 e0       	ldi	r21, 0x01	; 1
     e22:	63 ea       	ldi	r22, 0xA3	; 163
     e24:	74 e0       	ldi	r23, 0x04	; 4
     e26:	89 e0       	ldi	r24, 0x09	; 9
     e28:	96 e0       	ldi	r25, 0x06	; 6
     e2a:	0e 94 8a 13 	call	0x2714	; 0x2714 <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	df 90       	pop	r13
     e38:	cf 90       	pop	r12
     e3a:	bf 90       	pop	r11
     e3c:	af 90       	pop	r10
     e3e:	08 95       	ret

00000e40 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     e40:	0f 93       	push	r16
     e42:	01 11       	cpse	r16, r1
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <prvTestWaitCondition+0x1e>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	82 23       	and	r24, r18
     e4c:	93 23       	and	r25, r19
     e4e:	a4 23       	and	r26, r20
     e50:	b5 23       	and	r27, r21
     e52:	89 2b       	or	r24, r25
     e54:	8a 2b       	or	r24, r26
     e56:	8b 2b       	or	r24, r27
     e58:	79 f4       	brne	.+30     	; 0xe78 <prvTestWaitCondition+0x38>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	10 c0       	rjmp	.+32     	; 0xe7e <prvTestWaitCondition+0x3e>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	82 23       	and	r24, r18
     e64:	93 23       	and	r25, r19
     e66:	a4 23       	and	r26, r20
     e68:	b5 23       	and	r27, r21
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	4a 07       	cpc	r20, r26
     e70:	5b 07       	cpc	r21, r27
     e72:	21 f0       	breq	.+8      	; 0xe7c <prvTestWaitCondition+0x3c>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <prvTestWaitCondition+0x3e>
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <prvTestWaitCondition+0x3e>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <xEventGroupCreate>:
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	8f e0       	ldi	r24, 0x0F	; 15
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	af d1       	rcall	.+862    	; 0x11ea <pvPortMalloc>
     e8c:	ec 01       	movw	r28, r24
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	39 f0       	breq	.+14     	; 0xea0 <xEventGroupCreate+0x1e>
     e92:	fc 01       	movw	r30, r24
     e94:	11 92       	st	Z+, r1
     e96:	11 92       	st	Z+, r1
     e98:	11 92       	st	Z+, r1
     e9a:	11 92       	st	Z+, r1
     e9c:	cf 01       	movw	r24, r30
     e9e:	8b d2       	rcall	.+1302   	; 0x13b6 <vListInitialise>
     ea0:	ce 01       	movw	r24, r28
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <xEventGroupWaitBits>:
     ea8:	2f 92       	push	r2
     eaa:	3f 92       	push	r3
     eac:	4f 92       	push	r4
     eae:	5f 92       	push	r5
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
     ece:	4a 01       	movw	r8, r20
     ed0:	5b 01       	movw	r10, r22
     ed2:	62 2e       	mov	r6, r18
     ed4:	70 2e       	mov	r7, r16
     ed6:	0e 94 0e 14 	call	0x281c	; 0x281c <vTaskSuspendAll>
     eda:	28 80       	ld	r2, Y
     edc:	39 80       	ldd	r3, Y+1	; 0x01
     ede:	4a 80       	ldd	r4, Y+2	; 0x02
     ee0:	5b 80       	ldd	r5, Y+3	; 0x03
     ee2:	a5 01       	movw	r20, r10
     ee4:	94 01       	movw	r18, r8
     ee6:	c2 01       	movw	r24, r4
     ee8:	b1 01       	movw	r22, r2
     eea:	aa df       	rcall	.-172    	; 0xe40 <prvTestWaitCondition>
     eec:	88 23       	and	r24, r24
     eee:	a1 f0       	breq	.+40     	; 0xf18 <xEventGroupWaitBits+0x70>
     ef0:	66 20       	and	r6, r6
     ef2:	89 f1       	breq	.+98     	; 0xf56 <xEventGroupWaitBits+0xae>
     ef4:	d5 01       	movw	r26, r10
     ef6:	c4 01       	movw	r24, r8
     ef8:	80 95       	com	r24
     efa:	90 95       	com	r25
     efc:	a0 95       	com	r26
     efe:	b0 95       	com	r27
     f00:	82 21       	and	r24, r2
     f02:	93 21       	and	r25, r3
     f04:	a4 21       	and	r26, r4
     f06:	b5 21       	and	r27, r5
     f08:	88 83       	st	Y, r24
     f0a:	99 83       	std	Y+1, r25	; 0x01
     f0c:	aa 83       	std	Y+2, r26	; 0x02
     f0e:	bb 83       	std	Y+3, r27	; 0x03
     f10:	c1 2c       	mov	r12, r1
     f12:	d1 2c       	mov	r13, r1
     f14:	76 01       	movw	r14, r12
     f16:	22 c0       	rjmp	.+68     	; 0xf5c <xEventGroupWaitBits+0xb4>
     f18:	c1 14       	cp	r12, r1
     f1a:	d1 04       	cpc	r13, r1
     f1c:	e1 04       	cpc	r14, r1
     f1e:	f1 04       	cpc	r15, r1
     f20:	e9 f0       	breq	.+58     	; 0xf5c <xEventGroupWaitBits+0xb4>
     f22:	61 10       	cpse	r6, r1
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <xEventGroupWaitBits+0x86>
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	ba 01       	movw	r22, r20
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <xEventGroupWaitBits+0x8e>
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	71 e0       	ldi	r23, 0x01	; 1
     f36:	71 10       	cpse	r7, r1
     f38:	74 60       	ori	r23, 0x04	; 4
     f3a:	48 29       	or	r20, r8
     f3c:	59 29       	or	r21, r9
     f3e:	6a 29       	or	r22, r10
     f40:	7b 29       	or	r23, r11
     f42:	97 01       	movw	r18, r14
     f44:	86 01       	movw	r16, r12
     f46:	ce 01       	movw	r24, r28
     f48:	04 96       	adiw	r24, 0x04	; 4
     f4a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <vTaskPlaceOnUnorderedEventList>
     f4e:	21 2c       	mov	r2, r1
     f50:	31 2c       	mov	r3, r1
     f52:	21 01       	movw	r4, r2
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <xEventGroupWaitBits+0xb4>
     f56:	c1 2c       	mov	r12, r1
     f58:	d1 2c       	mov	r13, r1
     f5a:	76 01       	movw	r14, r12
     f5c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
     f60:	cd 28       	or	r12, r13
     f62:	ce 28       	or	r12, r14
     f64:	cf 28       	or	r12, r15
     f66:	59 f1       	breq	.+86     	; 0xfbe <xEventGroupWaitBits+0x116>
     f68:	81 11       	cpse	r24, r1
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <xEventGroupWaitBits+0xc6>
     f6c:	f2 d2       	rcall	.+1508   	; 0x1552 <vPortYield>
     f6e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <uxTaskResetEventItemValue>
     f72:	6b 01       	movw	r12, r22
     f74:	7c 01       	movw	r14, r24
     f76:	91 fd       	sbrc	r25, 1
     f78:	1f c0       	rjmp	.+62     	; 0xfb8 <xEventGroupWaitBits+0x110>
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	0f 92       	push	r0
     f80:	c8 80       	ld	r12, Y
     f82:	d9 80       	ldd	r13, Y+1	; 0x01
     f84:	ea 80       	ldd	r14, Y+2	; 0x02
     f86:	fb 80       	ldd	r15, Y+3	; 0x03
     f88:	07 2d       	mov	r16, r7
     f8a:	a5 01       	movw	r20, r10
     f8c:	94 01       	movw	r18, r8
     f8e:	c7 01       	movw	r24, r14
     f90:	b6 01       	movw	r22, r12
     f92:	56 df       	rcall	.-340    	; 0xe40 <prvTestWaitCondition>
     f94:	88 23       	and	r24, r24
     f96:	71 f0       	breq	.+28     	; 0xfb4 <xEventGroupWaitBits+0x10c>
     f98:	66 20       	and	r6, r6
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <xEventGroupWaitBits+0x10c>
     f9c:	80 94       	com	r8
     f9e:	90 94       	com	r9
     fa0:	a0 94       	com	r10
     fa2:	b0 94       	com	r11
     fa4:	8c 20       	and	r8, r12
     fa6:	9d 20       	and	r9, r13
     fa8:	ae 20       	and	r10, r14
     faa:	bf 20       	and	r11, r15
     fac:	88 82       	st	Y, r8
     fae:	99 82       	std	Y+1, r9	; 0x01
     fb0:	aa 82       	std	Y+2, r10	; 0x02
     fb2:	bb 82       	std	Y+3, r11	; 0x03
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	16 01       	movw	r2, r12
     fba:	27 01       	movw	r4, r14
     fbc:	55 24       	eor	r5, r5
     fbe:	c2 01       	movw	r24, r4
     fc0:	b1 01       	movw	r22, r2
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	7f 90       	pop	r7
     fdc:	6f 90       	pop	r6
     fde:	5f 90       	pop	r5
     fe0:	4f 90       	pop	r4
     fe2:	3f 90       	pop	r3
     fe4:	2f 90       	pop	r2
     fe6:	08 95       	ret

00000fe8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     fe8:	4f 92       	push	r4
     fea:	5f 92       	push	r5
     fec:	6f 92       	push	r6
     fee:	7f 92       	push	r7
     ff0:	af 92       	push	r10
     ff2:	bf 92       	push	r11
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
    1006:	6a 01       	movw	r12, r20
    1008:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100a:	8c 01       	movw	r16, r24
    100c:	09 5f       	subi	r16, 0xF9	; 249
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    1010:	0e 94 0e 14 	call	0x281c	; 0x281c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    1014:	eb 85       	ldd	r30, Y+11	; 0x0b
    1016:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1018:	88 81       	ld	r24, Y
    101a:	99 81       	ldd	r25, Y+1	; 0x01
    101c:	aa 81       	ldd	r26, Y+2	; 0x02
    101e:	bb 81       	ldd	r27, Y+3	; 0x03
    1020:	c8 2a       	or	r12, r24
    1022:	d9 2a       	or	r13, r25
    1024:	ea 2a       	or	r14, r26
    1026:	fb 2a       	or	r15, r27
    1028:	c8 82       	st	Y, r12
    102a:	d9 82       	std	Y+1, r13	; 0x01
    102c:	ea 82       	std	Y+2, r14	; 0x02
    102e:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1030:	c1 2c       	mov	r12, r1
    1032:	d1 2c       	mov	r13, r1
    1034:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1036:	3d c0       	rjmp	.+122    	; 0x10b2 <__EEPROM_REGION_LENGTH__+0xb2>
        {
            pxNext = listGET_NEXT( pxListItem );
    1038:	a4 80       	ldd	r10, Z+4	; 0x04
    103a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	a2 81       	ldd	r26, Z+2	; 0x02
    1042:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1044:	ac 01       	movw	r20, r24
    1046:	bd 01       	movw	r22, r26
    1048:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    104a:	b2 fd       	sbrc	r27, 2
    104c:	0e c0       	rjmp	.+28     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    104e:	48 80       	ld	r4, Y
    1050:	59 80       	ldd	r5, Y+1	; 0x01
    1052:	6a 80       	ldd	r6, Y+2	; 0x02
    1054:	7b 80       	ldd	r7, Y+3	; 0x03
    1056:	44 22       	and	r4, r20
    1058:	55 22       	and	r5, r21
    105a:	66 22       	and	r6, r22
    105c:	77 22       	and	r7, r23
    105e:	45 28       	or	r4, r5
    1060:	46 28       	or	r4, r6
    1062:	47 28       	or	r4, r7
    1064:	89 f4       	brne	.+34     	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	12 c0       	rjmp	.+36     	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    106a:	48 80       	ld	r4, Y
    106c:	59 80       	ldd	r5, Y+1	; 0x01
    106e:	6a 80       	ldd	r6, Y+2	; 0x02
    1070:	7b 80       	ldd	r7, Y+3	; 0x03
    1072:	44 22       	and	r4, r20
    1074:	55 22       	and	r5, r21
    1076:	66 22       	and	r6, r22
    1078:	77 22       	and	r7, r23
    107a:	44 15       	cp	r20, r4
    107c:	55 05       	cpc	r21, r5
    107e:	66 05       	cpc	r22, r6
    1080:	77 05       	cpc	r23, r7
    1082:	21 f0       	breq	.+8      	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	03 c0       	rjmp	.+6      	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	01 c0       	rjmp	.+2      	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    108c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    108e:	22 23       	and	r18, r18
    1090:	71 f0       	breq	.+28     	; 0x10ae <__EEPROM_REGION_LENGTH__+0xae>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1092:	b0 ff       	sbrs	r27, 0
    1094:	04 c0       	rjmp	.+8      	; 0x109e <__EEPROM_REGION_LENGTH__+0x9e>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1096:	c4 2a       	or	r12, r20
    1098:	d5 2a       	or	r13, r21
    109a:	e6 2a       	or	r14, r22
    109c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    109e:	48 81       	ld	r20, Y
    10a0:	59 81       	ldd	r21, Y+1	; 0x01
    10a2:	6a 81       	ldd	r22, Y+2	; 0x02
    10a4:	7b 81       	ldd	r23, Y+3	; 0x03
    10a6:	72 60       	ori	r23, 0x02	; 2
    10a8:	cf 01       	movw	r24, r30
    10aa:	0e 94 61 18 	call	0x30c2	; 0x30c2 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    10ae:	ea 2d       	mov	r30, r10
    10b0:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10b2:	e0 17       	cp	r30, r16
    10b4:	f1 07       	cpc	r31, r17
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__EEPROM_REGION_LENGTH__+0xba>
    10b8:	bf cf       	rjmp	.-130    	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    10ba:	c0 94       	com	r12
    10bc:	d0 94       	com	r13
    10be:	e0 94       	com	r14
    10c0:	f0 94       	com	r15
    10c2:	88 81       	ld	r24, Y
    10c4:	99 81       	ldd	r25, Y+1	; 0x01
    10c6:	aa 81       	ldd	r26, Y+2	; 0x02
    10c8:	bb 81       	ldd	r27, Y+3	; 0x03
    10ca:	c8 22       	and	r12, r24
    10cc:	d9 22       	and	r13, r25
    10ce:	ea 22       	and	r14, r26
    10d0:	fb 22       	and	r15, r27
    10d2:	c8 82       	st	Y, r12
    10d4:	d9 82       	std	Y+1, r13	; 0x01
    10d6:	ea 82       	std	Y+2, r14	; 0x02
    10d8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    10da:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    10de:	68 81       	ld	r22, Y
    10e0:	79 81       	ldd	r23, Y+1	; 0x01
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	af 90       	pop	r10
    10fa:	7f 90       	pop	r7
    10fc:	6f 90       	pop	r6
    10fe:	5f 90       	pop	r5
    1100:	4f 90       	pop	r4
    1102:	08 95       	ret

00001104 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1104:	e6 ec       	ldi	r30, 0xC6	; 198
    1106:	f7 e0       	ldi	r31, 0x07	; 7
    1108:	aa ec       	ldi	r26, 0xCA	; 202
    110a:	b7 e0       	ldi	r27, 0x07	; 7
    110c:	b1 83       	std	Z+1, r27	; 0x01
    110e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    1110:	13 82       	std	Z+3, r1	; 0x03
    1112:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    1114:	ee e7       	ldi	r30, 0x7E	; 126
    1116:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1118:	f0 93 c5 07 	sts	0x07C5, r31	; 0x8007c5 <pxEnd+0x1>
    111c:	e0 93 c4 07 	sts	0x07C4, r30	; 0x8007c4 <pxEnd>
    pxEnd->xBlockSize = 0;
    1120:	13 82       	std	Z+3, r1	; 0x03
    1122:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    1124:	11 82       	std	Z+1, r1	; 0x01
    1126:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1128:	84 eb       	ldi	r24, 0xB4	; 180
    112a:	9b e0       	ldi	r25, 0x0B	; 11
    112c:	13 96       	adiw	r26, 0x03	; 3
    112e:	9c 93       	st	X, r25
    1130:	8e 93       	st	-X, r24
    1132:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1134:	ed 93       	st	X+, r30
    1136:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1138:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <xMinimumEverFreeBytesRemaining+0x1>
    113c:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1140:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <xFreeBytesRemaining+0x1>
    1144:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e8       	ldi	r25, 0x80	; 128
    114c:	90 93 bb 07 	sts	0x07BB, r25	; 0x8007bb <xBlockAllocatedBit+0x1>
    1150:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <xBlockAllocatedBit>
    1154:	08 95       	ret

00001156 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    115c:	a6 ec       	ldi	r26, 0xC6	; 198
    115e:	b7 e0       	ldi	r27, 0x07	; 7
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <prvInsertBlockIntoFreeList+0xe>
    1162:	df 01       	movw	r26, r30
    1164:	ed 91       	ld	r30, X+
    1166:	fc 91       	ld	r31, X
    1168:	11 97       	sbiw	r26, 0x01	; 1
    116a:	ec 17       	cp	r30, r28
    116c:	fd 07       	cpc	r31, r29
    116e:	c8 f3       	brcs	.-14     	; 0x1162 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1170:	12 96       	adiw	r26, 0x02	; 2
    1172:	8d 91       	ld	r24, X+
    1174:	9c 91       	ld	r25, X
    1176:	13 97       	sbiw	r26, 0x03	; 3
    1178:	9d 01       	movw	r18, r26
    117a:	28 0f       	add	r18, r24
    117c:	39 1f       	adc	r19, r25
    117e:	c2 17       	cp	r28, r18
    1180:	d3 07       	cpc	r29, r19
    1182:	49 f4       	brne	.+18     	; 0x1196 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	3b 81       	ldd	r19, Y+3	; 0x03
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	13 96       	adiw	r26, 0x03	; 3
    118e:	9c 93       	st	X, r25
    1190:	8e 93       	st	-X, r24
    1192:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    1194:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	9e 01       	movw	r18, r28
    119c:	28 0f       	add	r18, r24
    119e:	39 1f       	adc	r19, r25
    11a0:	e2 17       	cp	r30, r18
    11a2:	f3 07       	cpc	r31, r19
    11a4:	c1 f4       	brne	.+48     	; 0x11d6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    11a6:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxEnd>
    11aa:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxEnd+0x1>
    11ae:	e2 17       	cp	r30, r18
    11b0:	f3 07       	cpc	r31, r19
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11b4:	22 81       	ldd	r18, Z+2	; 0x02
    11b6:	33 81       	ldd	r19, Z+3	; 0x03
    11b8:	82 0f       	add	r24, r18
    11ba:	93 1f       	adc	r25, r19
    11bc:	9b 83       	std	Y+3, r25	; 0x03
    11be:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11c0:	ed 91       	ld	r30, X+
    11c2:	fc 91       	ld	r31, X
    11c4:	11 97       	sbiw	r26, 0x01	; 1
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	99 83       	std	Y+1, r25	; 0x01
    11cc:	88 83       	st	Y, r24
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11d0:	39 83       	std	Y+1, r19	; 0x01
    11d2:	28 83       	st	Y, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11d6:	f9 83       	std	Y+1, r31	; 0x01
    11d8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    11da:	ca 17       	cp	r28, r26
    11dc:	db 07       	cpc	r29, r27
    11de:	11 f0       	breq	.+4      	; 0x11e4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11e0:	cd 93       	st	X+, r28
    11e2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    11f8:	0e 94 0e 14 	call	0x281c	; 0x281c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    11fc:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxEnd>
    1200:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxEnd+0x1>
    1204:	89 2b       	or	r24, r25
    1206:	09 f4       	brne	.+2      	; 0x120a <pvPortMalloc+0x20>
        {
            prvHeapInit();
    1208:	7d df       	rcall	.-262    	; 0x1104 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    120a:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <xBlockAllocatedBit>
    120e:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <xBlockAllocatedBit+0x1>
    1212:	80 23       	and	r24, r16
    1214:	91 23       	and	r25, r17
    1216:	89 2b       	or	r24, r25
    1218:	09 f0       	breq	.+2      	; 0x121c <pvPortMalloc+0x32>
    121a:	76 c0       	rjmp	.+236    	; 0x1308 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    121c:	01 15       	cp	r16, r1
    121e:	11 05       	cpc	r17, r1
    1220:	49 f0       	breq	.+18     	; 0x1234 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    1222:	c8 01       	movw	r24, r16
    1224:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1226:	08 17       	cp	r16, r24
    1228:	19 07       	cpc	r17, r25
    122a:	18 f0       	brcs	.+6      	; 0x1232 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    1232:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1234:	01 15       	cp	r16, r1
    1236:	11 05       	cpc	r17, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <pvPortMalloc+0x52>
    123a:	69 c0       	rjmp	.+210    	; 0x130e <pvPortMalloc+0x124>
    123c:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <xFreeBytesRemaining>
    1240:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <xFreeBytesRemaining+0x1>
    1244:	80 17       	cp	r24, r16
    1246:	91 07       	cpc	r25, r17
    1248:	08 f4       	brcc	.+2      	; 0x124c <pvPortMalloc+0x62>
    124a:	64 c0       	rjmp	.+200    	; 0x1314 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    124c:	c0 91 c6 07 	lds	r28, 0x07C6	; 0x8007c6 <xStart>
    1250:	d0 91 c7 07 	lds	r29, 0x07C7	; 0x8007c7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    1254:	e6 ec       	ldi	r30, 0xC6	; 198
    1256:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1258:	02 c0       	rjmp	.+4      	; 0x125e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    125a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    125c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	80 17       	cp	r24, r16
    1264:	91 07       	cpc	r25, r17
    1266:	20 f4       	brcc	.+8      	; 0x1270 <pvPortMalloc+0x86>
    1268:	88 81       	ld	r24, Y
    126a:	99 81       	ldd	r25, Y+1	; 0x01
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	a9 f7       	brne	.-22     	; 0x125a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    1270:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxEnd>
    1274:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxEnd+0x1>
    1278:	c8 17       	cp	r28, r24
    127a:	d9 07       	cpc	r29, r25
    127c:	09 f4       	brne	.+2      	; 0x1280 <pvPortMalloc+0x96>
    127e:	4d c0       	rjmp	.+154    	; 0x131a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1280:	e0 80       	ld	r14, Z
    1282:	f1 80       	ldd	r15, Z+1	; 0x01
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	e8 0e       	add	r14, r24
    1288:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    128a:	88 81       	ld	r24, Y
    128c:	99 81       	ldd	r25, Y+1	; 0x01
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1292:	2a 81       	ldd	r18, Y+2	; 0x02
    1294:	3b 81       	ldd	r19, Y+3	; 0x03
    1296:	20 1b       	sub	r18, r16
    1298:	31 0b       	sbc	r19, r17
    129a:	29 30       	cpi	r18, 0x09	; 9
    129c:	31 05       	cpc	r19, r1
    129e:	48 f0       	brcs	.+18     	; 0x12b2 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    12a0:	ce 01       	movw	r24, r28
    12a2:	80 0f       	add	r24, r16
    12a4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    12a6:	fc 01       	movw	r30, r24
    12a8:	33 83       	std	Z+3, r19	; 0x03
    12aa:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    12ac:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    12ae:	0a 83       	std	Y+2, r16	; 0x02
    12b0:	52 df       	rcall	.-348    	; 0x1156 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    12b2:	2a 81       	ldd	r18, Y+2	; 0x02
    12b4:	3b 81       	ldd	r19, Y+3	; 0x03
    12b6:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <xFreeBytesRemaining>
    12ba:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <xFreeBytesRemaining+0x1>
    12be:	82 1b       	sub	r24, r18
    12c0:	93 0b       	sbc	r25, r19
    12c2:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <xFreeBytesRemaining+0x1>
    12c6:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    12ca:	40 91 c0 07 	lds	r20, 0x07C0	; 0x8007c0 <xMinimumEverFreeBytesRemaining>
    12ce:	50 91 c1 07 	lds	r21, 0x07C1	; 0x8007c1 <xMinimumEverFreeBytesRemaining+0x1>
    12d2:	84 17       	cp	r24, r20
    12d4:	95 07       	cpc	r25, r21
    12d6:	20 f4       	brcc	.+8      	; 0x12e0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    12d8:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <xMinimumEverFreeBytesRemaining+0x1>
    12dc:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    12e0:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <xBlockAllocatedBit>
    12e4:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <xBlockAllocatedBit+0x1>
    12e8:	28 2b       	or	r18, r24
    12ea:	39 2b       	or	r19, r25
    12ec:	3b 83       	std	Y+3, r19	; 0x03
    12ee:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    12f4:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <xNumberOfSuccessfulAllocations>
    12f8:	90 91 bf 07 	lds	r25, 0x07BF	; 0x8007bf <xNumberOfSuccessfulAllocations+0x1>
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <xNumberOfSuccessfulAllocations+0x1>
    1302:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <xNumberOfSuccessfulAllocations>
    1306:	0b c0       	rjmp	.+22     	; 0x131e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    1308:	e1 2c       	mov	r14, r1
    130a:	f1 2c       	mov	r15, r1
    130c:	08 c0       	rjmp	.+16     	; 0x131e <pvPortMalloc+0x134>
    130e:	e1 2c       	mov	r14, r1
    1310:	f1 2c       	mov	r15, r1
    1312:	05 c0       	rjmp	.+10     	; 0x131e <pvPortMalloc+0x134>
    1314:	e1 2c       	mov	r14, r1
    1316:	f1 2c       	mov	r15, r1
    1318:	02 c0       	rjmp	.+4      	; 0x131e <pvPortMalloc+0x134>
    131a:	e1 2c       	mov	r14, r1
    131c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    131e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    1322:	e1 14       	cp	r14, r1
    1324:	f1 04       	cpc	r15, r1
    1326:	11 f4       	brne	.+4      	; 0x132c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    1328:	0e 94 f5 20 	call	0x41ea	; 0x41ea <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    132c:	c7 01       	movw	r24, r14
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	08 95       	ret

0000133c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	91 f1       	breq	.+100    	; 0x13ac <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    1348:	ec 01       	movw	r28, r24
    134a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    134c:	4a 81       	ldd	r20, Y+2	; 0x02
    134e:	5b 81       	ldd	r21, Y+3	; 0x03
    1350:	20 91 ba 07 	lds	r18, 0x07BA	; 0x8007ba <xBlockAllocatedBit>
    1354:	30 91 bb 07 	lds	r19, 0x07BB	; 0x8007bb <xBlockAllocatedBit+0x1>
    1358:	ba 01       	movw	r22, r20
    135a:	62 23       	and	r22, r18
    135c:	73 23       	and	r23, r19
    135e:	67 2b       	or	r22, r23
    1360:	29 f1       	breq	.+74     	; 0x13ac <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    1362:	68 81       	ld	r22, Y
    1364:	79 81       	ldd	r23, Y+1	; 0x01
    1366:	67 2b       	or	r22, r23
    1368:	09 f5       	brne	.+66     	; 0x13ac <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    136a:	20 95       	com	r18
    136c:	30 95       	com	r19
    136e:	24 23       	and	r18, r20
    1370:	35 23       	and	r19, r21
    1372:	3b 83       	std	Y+3, r19	; 0x03
    1374:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    1376:	0e 94 0e 14 	call	0x281c	; 0x281c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	20 91 c2 07 	lds	r18, 0x07C2	; 0x8007c2 <xFreeBytesRemaining>
    1382:	30 91 c3 07 	lds	r19, 0x07C3	; 0x8007c3 <xFreeBytesRemaining+0x1>
    1386:	82 0f       	add	r24, r18
    1388:	93 1f       	adc	r25, r19
    138a:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <xFreeBytesRemaining+0x1>
    138e:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1392:	ce 01       	movw	r24, r28
    1394:	e0 de       	rcall	.-576    	; 0x1156 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    1396:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <xNumberOfSuccessfulFrees>
    139a:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <xNumberOfSuccessfulFrees+0x1>
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <xNumberOfSuccessfulFrees+0x1>
    13a4:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    13a8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    13b6:	fc 01       	movw	r30, r24
    13b8:	03 96       	adiw	r24, 0x03	; 3
    13ba:	92 83       	std	Z+2, r25	; 0x02
    13bc:	81 83       	std	Z+1, r24	; 0x01
    13be:	4f ef       	ldi	r20, 0xFF	; 255
    13c0:	5f ef       	ldi	r21, 0xFF	; 255
    13c2:	ba 01       	movw	r22, r20
    13c4:	43 83       	std	Z+3, r20	; 0x03
    13c6:	54 83       	std	Z+4, r21	; 0x04
    13c8:	65 83       	std	Z+5, r22	; 0x05
    13ca:	76 83       	std	Z+6, r23	; 0x06
    13cc:	90 87       	std	Z+8, r25	; 0x08
    13ce:	87 83       	std	Z+7, r24	; 0x07
    13d0:	92 87       	std	Z+10, r25	; 0x0a
    13d2:	81 87       	std	Z+9, r24	; 0x09
    13d4:	10 82       	st	Z, r1
    13d6:	08 95       	ret

000013d8 <vListInitialiseItem>:
    13d8:	fc 01       	movw	r30, r24
    13da:	13 86       	std	Z+11, r1	; 0x0b
    13dc:	12 86       	std	Z+10, r1	; 0x0a
    13de:	08 95       	ret

000013e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    13ea:	08 81       	ld	r16, Y
    13ec:	19 81       	ldd	r17, Y+1	; 0x01
    13ee:	2a 81       	ldd	r18, Y+2	; 0x02
    13f0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    13f2:	0f 3f       	cpi	r16, 0xFF	; 255
    13f4:	4f ef       	ldi	r20, 0xFF	; 255
    13f6:	14 07       	cpc	r17, r20
    13f8:	24 07       	cpc	r18, r20
    13fa:	34 07       	cpc	r19, r20
    13fc:	21 f4       	brne	.+8      	; 0x1406 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    13fe:	fc 01       	movw	r30, r24
    1400:	a1 85       	ldd	r26, Z+9	; 0x09
    1402:	b2 85       	ldd	r27, Z+10	; 0x0a
    1404:	11 c0       	rjmp	.+34     	; 0x1428 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1406:	dc 01       	movw	r26, r24
    1408:	13 96       	adiw	r26, 0x03	; 3
    140a:	01 c0       	rjmp	.+2      	; 0x140e <vListInsert+0x2e>
    140c:	df 01       	movw	r26, r30
    140e:	14 96       	adiw	r26, 0x04	; 4
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	15 97       	sbiw	r26, 0x05	; 5
    1416:	40 81       	ld	r20, Z
    1418:	51 81       	ldd	r21, Z+1	; 0x01
    141a:	62 81       	ldd	r22, Z+2	; 0x02
    141c:	73 81       	ldd	r23, Z+3	; 0x03
    141e:	04 17       	cp	r16, r20
    1420:	15 07       	cpc	r17, r21
    1422:	26 07       	cpc	r18, r22
    1424:	37 07       	cpc	r19, r23
    1426:	90 f7       	brcc	.-28     	; 0x140c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1428:	14 96       	adiw	r26, 0x04	; 4
    142a:	ed 91       	ld	r30, X+
    142c:	fc 91       	ld	r31, X
    142e:	15 97       	sbiw	r26, 0x05	; 5
    1430:	fd 83       	std	Y+5, r31	; 0x05
    1432:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1434:	d7 83       	std	Z+7, r29	; 0x07
    1436:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1438:	bf 83       	std	Y+7, r27	; 0x07
    143a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    143c:	15 96       	adiw	r26, 0x05	; 5
    143e:	dc 93       	st	X, r29
    1440:	ce 93       	st	-X, r28
    1442:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1444:	9b 87       	std	Y+11, r25	; 0x0b
    1446:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1448:	fc 01       	movw	r30, r24
    144a:	20 81       	ld	r18, Z
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	20 83       	st	Z, r18
}
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	08 95       	ret

0000145a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1460:	a2 85       	ldd	r26, Z+10	; 0x0a
    1462:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1464:	c4 81       	ldd	r28, Z+4	; 0x04
    1466:	d5 81       	ldd	r29, Z+5	; 0x05
    1468:	86 81       	ldd	r24, Z+6	; 0x06
    146a:	97 81       	ldd	r25, Z+7	; 0x07
    146c:	9f 83       	std	Y+7, r25	; 0x07
    146e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1470:	c6 81       	ldd	r28, Z+6	; 0x06
    1472:	d7 81       	ldd	r29, Z+7	; 0x07
    1474:	84 81       	ldd	r24, Z+4	; 0x04
    1476:	95 81       	ldd	r25, Z+5	; 0x05
    1478:	9d 83       	std	Y+5, r25	; 0x05
    147a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	8d 91       	ld	r24, X+
    1480:	9c 91       	ld	r25, X
    1482:	12 97       	sbiw	r26, 0x02	; 2
    1484:	e8 17       	cp	r30, r24
    1486:	f9 07       	cpc	r31, r25
    1488:	31 f4       	brne	.+12     	; 0x1496 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    148a:	86 81       	ldd	r24, Z+6	; 0x06
    148c:	97 81       	ldd	r25, Z+7	; 0x07
    148e:	12 96       	adiw	r26, 0x02	; 2
    1490:	9c 93       	st	X, r25
    1492:	8e 93       	st	-X, r24
    1494:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1496:	13 86       	std	Z+11, r1	; 0x0b
    1498:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    149a:	8c 91       	ld	r24, X
    149c:	81 50       	subi	r24, 0x01	; 1
    149e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    14a0:	8c 91       	ld	r24, X
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    14a8:	a8 95       	wdr
    14aa:	90 ec       	ldi	r25, 0xC0	; 192
    14ac:	88 e1       	ldi	r24, 0x18	; 24
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	a8 95       	wdr
    14b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    14be:	08 95       	ret

000014c0 <pxPortInitialiseStack>:
    14c0:	fc 01       	movw	r30, r24
    14c2:	60 83       	st	Z, r22
    14c4:	31 97       	sbiw	r30, 0x01	; 1
    14c6:	70 83       	st	Z, r23
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	10 82       	st	Z, r1
    14cc:	31 97       	sbiw	r30, 0x01	; 1
    14ce:	10 82       	st	Z, r1
    14d0:	31 97       	sbiw	r30, 0x01	; 1
    14d2:	20 e8       	ldi	r18, 0x80	; 128
    14d4:	20 83       	st	Z, r18
    14d6:	31 97       	sbiw	r30, 0x01	; 1
    14d8:	10 82       	st	Z, r1
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	10 82       	st	Z, r1
    14de:	31 97       	sbiw	r30, 0x01	; 1
    14e0:	10 82       	st	Z, r1
    14e2:	77 97       	sbiw	r30, 0x17	; 23
    14e4:	40 83       	st	Z, r20
    14e6:	31 97       	sbiw	r30, 0x01	; 1
    14e8:	50 83       	st	Z, r21
    14ea:	86 97       	sbiw	r24, 0x26	; 38
    14ec:	08 95       	ret

000014ee <xPortStartScheduler>:
    14ee:	dc df       	rcall	.-72     	; 0x14a8 <prvSetupTimerInterrupt>
    14f0:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    14f4:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    14f8:	cd 91       	ld	r28, X+
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	dd 91       	ld	r29, X+
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	9f 90       	pop	r9
    152e:	8f 90       	pop	r8
    1530:	7f 90       	pop	r7
    1532:	6f 90       	pop	r6
    1534:	5f 90       	pop	r5
    1536:	4f 90       	pop	r4
    1538:	3f 90       	pop	r3
    153a:	2f 90       	pop	r2
    153c:	1f 90       	pop	r1
    153e:	0f 90       	pop	r0
    1540:	0c be       	out	0x3c, r0	; 60
    1542:	0f 90       	pop	r0
    1544:	0b be       	out	0x3b, r0	; 59
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	08 95       	ret
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	08 95       	ret

00001552 <vPortYield>:
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	0f 92       	push	r0
    155a:	0b b6       	in	r0, 0x3b	; 59
    155c:	0f 92       	push	r0
    155e:	0c b6       	in	r0, 0x3c	; 60
    1560:	0f 92       	push	r0
    1562:	1f 92       	push	r1
    1564:	11 24       	eor	r1, r1
    1566:	2f 92       	push	r2
    1568:	3f 92       	push	r3
    156a:	4f 92       	push	r4
    156c:	5f 92       	push	r5
    156e:	6f 92       	push	r6
    1570:	7f 92       	push	r7
    1572:	8f 92       	push	r8
    1574:	9f 92       	push	r9
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ef 93       	push	r30
    15a0:	ff 93       	push	r31
    15a2:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    15a6:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    15aa:	0d b6       	in	r0, 0x3d	; 61
    15ac:	0d 92       	st	X+, r0
    15ae:	0e b6       	in	r0, 0x3e	; 62
    15b0:	0d 92       	st	X+, r0
    15b2:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSwitchContext>
    15b6:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    15ba:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    15be:	cd 91       	ld	r28, X+
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	dd 91       	ld	r29, X+
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	bf 91       	pop	r27
    15d0:	af 91       	pop	r26
    15d2:	9f 91       	pop	r25
    15d4:	8f 91       	pop	r24
    15d6:	7f 91       	pop	r23
    15d8:	6f 91       	pop	r22
    15da:	5f 91       	pop	r21
    15dc:	4f 91       	pop	r20
    15de:	3f 91       	pop	r19
    15e0:	2f 91       	pop	r18
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	af 90       	pop	r10
    15f2:	9f 90       	pop	r9
    15f4:	8f 90       	pop	r8
    15f6:	7f 90       	pop	r7
    15f8:	6f 90       	pop	r6
    15fa:	5f 90       	pop	r5
    15fc:	4f 90       	pop	r4
    15fe:	3f 90       	pop	r3
    1600:	2f 90       	pop	r2
    1602:	1f 90       	pop	r1
    1604:	0f 90       	pop	r0
    1606:	0c be       	out	0x3c, r0	; 60
    1608:	0f 90       	pop	r0
    160a:	0b be       	out	0x3b, r0	; 59
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	08 95       	ret

00001614 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	0f 92       	push	r0
    161c:	0b b6       	in	r0, 0x3b	; 59
    161e:	0f 92       	push	r0
    1620:	0c b6       	in	r0, 0x3c	; 60
    1622:	0f 92       	push	r0
    1624:	1f 92       	push	r1
    1626:	11 24       	eor	r1, r1
    1628:	2f 92       	push	r2
    162a:	3f 92       	push	r3
    162c:	4f 92       	push	r4
    162e:	5f 92       	push	r5
    1630:	6f 92       	push	r6
    1632:	7f 92       	push	r7
    1634:	8f 92       	push	r8
    1636:	9f 92       	push	r9
    1638:	af 92       	push	r10
    163a:	bf 92       	push	r11
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ef 93       	push	r30
    1662:	ff 93       	push	r31
    1664:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    1668:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    166c:	0d b6       	in	r0, 0x3d	; 61
    166e:	0d 92       	st	X+, r0
    1670:	0e b6       	in	r0, 0x3e	; 62
    1672:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1674:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1676:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskIncrementTick>
    167a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    167c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1680:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    1684:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    1688:	cd 91       	ld	r28, X+
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	dd 91       	ld	r29, X+
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	ff 91       	pop	r31
    1692:	ef 91       	pop	r30
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	7f 91       	pop	r23
    16a2:	6f 91       	pop	r22
    16a4:	5f 91       	pop	r21
    16a6:	4f 91       	pop	r20
    16a8:	3f 91       	pop	r19
    16aa:	2f 91       	pop	r18
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	bf 90       	pop	r11
    16ba:	af 90       	pop	r10
    16bc:	9f 90       	pop	r9
    16be:	8f 90       	pop	r8
    16c0:	7f 90       	pop	r7
    16c2:	6f 90       	pop	r6
    16c4:	5f 90       	pop	r5
    16c6:	4f 90       	pop	r4
    16c8:	3f 90       	pop	r3
    16ca:	2f 90       	pop	r2
    16cc:	1f 90       	pop	r1
    16ce:	0f 90       	pop	r0
    16d0:	0c be       	out	0x3c, r0	; 60
    16d2:	0f 90       	pop	r0
    16d4:	0b be       	out	0x3b, r0	; 59
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    16dc:	08 95       	ret

000016de <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    16de:	9a df       	rcall	.-204    	; 0x1614 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    16e0:	18 95       	reti

000016e2 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    16e2:	dc 01       	movw	r26, r24
    16e4:	53 96       	adiw	r26, 0x13	; 19
    16e6:	2c 91       	ld	r18, X
    16e8:	53 97       	sbiw	r26, 0x13	; 19
    16ea:	22 23       	and	r18, r18
    16ec:	41 f0       	breq	.+16     	; 0x16fe <prvGetDisinheritPriorityAfterTimeout+0x1c>
    16ee:	5a 96       	adiw	r26, 0x1a	; 26
    16f0:	ed 91       	ld	r30, X+
    16f2:	fc 91       	ld	r31, X
    16f4:	5b 97       	sbiw	r26, 0x1b	; 27
    16f6:	90 81       	ld	r25, Z
    16f8:	8a e0       	ldi	r24, 0x0A	; 10
    16fa:	89 1b       	sub	r24, r25
    16fc:	08 95       	ret
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	08 95       	ret

00001702 <prvIsQueueEmpty>:
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	0f 92       	push	r0
    1708:	fc 01       	movw	r30, r24
    170a:	86 8d       	ldd	r24, Z+30	; 0x1e
    170c:	81 11       	cpse	r24, r1
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <prvIsQueueEmpty+0x12>
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <prvIsQueueEmpty+0x14>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	08 95       	ret

0000171c <prvIsQueueFull>:
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	0f 92       	push	r0
    1722:	fc 01       	movw	r30, r24
    1724:	26 8d       	ldd	r18, Z+30	; 0x1e
    1726:	87 8d       	ldd	r24, Z+31	; 0x1f
    1728:	28 13       	cpse	r18, r24
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <prvIsQueueFull+0x14>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <prvIsQueueFull+0x16>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	08 95       	ret

00001738 <prvCopyDataToQueue>:
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	04 2f       	mov	r16, r20
    1744:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1746:	48 a1       	ldd	r20, Y+32	; 0x20
    1748:	41 11       	cpse	r20, r1
    174a:	0c c0       	rjmp	.+24     	; 0x1764 <prvCopyDataToQueue+0x2c>
    174c:	88 81       	ld	r24, Y
    174e:	99 81       	ldd	r25, Y+1	; 0x01
    1750:	89 2b       	or	r24, r25
    1752:	09 f0       	breq	.+2      	; 0x1756 <prvCopyDataToQueue+0x1e>
    1754:	42 c0       	rjmp	.+132    	; 0x17da <prvCopyDataToQueue+0xa2>
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	9d 81       	ldd	r25, Y+5	; 0x05
    175a:	0e 94 10 1a 	call	0x3420	; 0x3420 <xTaskPriorityDisinherit>
    175e:	1d 82       	std	Y+5, r1	; 0x05
    1760:	1c 82       	std	Y+4, r1	; 0x04
    1762:	42 c0       	rjmp	.+132    	; 0x17e8 <prvCopyDataToQueue+0xb0>
    1764:	01 11       	cpse	r16, r1
    1766:	17 c0       	rjmp	.+46     	; 0x1796 <prvCopyDataToQueue+0x5e>
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	9b 81       	ldd	r25, Y+3	; 0x03
    176e:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <memcpy>
    1772:	28 a1       	ldd	r18, Y+32	; 0x20
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	82 0f       	add	r24, r18
    177a:	91 1d       	adc	r25, r1
    177c:	9b 83       	std	Y+3, r25	; 0x03
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	2c 81       	ldd	r18, Y+4	; 0x04
    1782:	3d 81       	ldd	r19, Y+5	; 0x05
    1784:	82 17       	cp	r24, r18
    1786:	93 07       	cpc	r25, r19
    1788:	50 f1       	brcs	.+84     	; 0x17de <prvCopyDataToQueue+0xa6>
    178a:	88 81       	ld	r24, Y
    178c:	99 81       	ldd	r25, Y+1	; 0x01
    178e:	9b 83       	std	Y+3, r25	; 0x03
    1790:	8a 83       	std	Y+2, r24	; 0x02
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	29 c0       	rjmp	.+82     	; 0x17e8 <prvCopyDataToQueue+0xb0>
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	9f 81       	ldd	r25, Y+7	; 0x07
    179c:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <memcpy>
    17a0:	88 a1       	ldd	r24, Y+32	; 0x20
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	91 95       	neg	r25
    17a6:	81 95       	neg	r24
    17a8:	91 09       	sbc	r25, r1
    17aa:	2e 81       	ldd	r18, Y+6	; 0x06
    17ac:	3f 81       	ldd	r19, Y+7	; 0x07
    17ae:	28 0f       	add	r18, r24
    17b0:	39 1f       	adc	r19, r25
    17b2:	3f 83       	std	Y+7, r19	; 0x07
    17b4:	2e 83       	std	Y+6, r18	; 0x06
    17b6:	48 81       	ld	r20, Y
    17b8:	59 81       	ldd	r21, Y+1	; 0x01
    17ba:	24 17       	cp	r18, r20
    17bc:	35 07       	cpc	r19, r21
    17be:	30 f4       	brcc	.+12     	; 0x17cc <prvCopyDataToQueue+0x94>
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	82 0f       	add	r24, r18
    17c6:	93 1f       	adc	r25, r19
    17c8:	9f 83       	std	Y+7, r25	; 0x07
    17ca:	8e 83       	std	Y+6, r24	; 0x06
    17cc:	02 30       	cpi	r16, 0x02	; 2
    17ce:	49 f4       	brne	.+18     	; 0x17e2 <prvCopyDataToQueue+0xaa>
    17d0:	11 23       	and	r17, r17
    17d2:	49 f0       	breq	.+18     	; 0x17e6 <prvCopyDataToQueue+0xae>
    17d4:	11 50       	subi	r17, 0x01	; 1
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <prvCopyDataToQueue+0xb0>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <prvCopyDataToQueue+0xb0>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <prvCopyDataToQueue+0xb0>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <prvCopyDataToQueue+0xb0>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	1f 5f       	subi	r17, 0xFF	; 255
    17ea:	1e 8f       	std	Y+30, r17	; 0x1e
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <prvCopyDataFromQueue>:
    17f6:	fc 01       	movw	r30, r24
    17f8:	40 a1       	ldd	r20, Z+32	; 0x20
    17fa:	44 23       	and	r20, r20
    17fc:	a9 f0       	breq	.+42     	; 0x1828 <prvCopyDataFromQueue+0x32>
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	26 81       	ldd	r18, Z+6	; 0x06
    1802:	37 81       	ldd	r19, Z+7	; 0x07
    1804:	24 0f       	add	r18, r20
    1806:	35 1f       	adc	r19, r21
    1808:	37 83       	std	Z+7, r19	; 0x07
    180a:	26 83       	std	Z+6, r18	; 0x06
    180c:	84 81       	ldd	r24, Z+4	; 0x04
    180e:	95 81       	ldd	r25, Z+5	; 0x05
    1810:	28 17       	cp	r18, r24
    1812:	39 07       	cpc	r19, r25
    1814:	20 f0       	brcs	.+8      	; 0x181e <prvCopyDataFromQueue+0x28>
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	97 83       	std	Z+7, r25	; 0x07
    181c:	86 83       	std	Z+6, r24	; 0x06
    181e:	cb 01       	movw	r24, r22
    1820:	66 81       	ldd	r22, Z+6	; 0x06
    1822:	77 81       	ldd	r23, Z+7	; 0x07
    1824:	0c 94 a7 35 	jmp	0x6b4e	; 0x6b4e <memcpy>
    1828:	08 95       	ret

0000182a <prvUnlockQueue>:
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	0f 92       	push	r0
    1838:	1a a1       	ldd	r17, Y+34	; 0x22
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <prvUnlockQueue+0x28>
    183c:	8b 89       	ldd	r24, Y+19	; 0x13
    183e:	88 23       	and	r24, r24
    1840:	51 f0       	breq	.+20     	; 0x1856 <prvUnlockQueue+0x2c>
    1842:	ce 01       	movw	r24, r28
    1844:	43 96       	adiw	r24, 0x13	; 19
    1846:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <xTaskRemoveFromEventList>
    184a:	81 11       	cpse	r24, r1
    184c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <vTaskMissedYield>
    1850:	11 50       	subi	r17, 0x01	; 1
    1852:	11 16       	cp	r1, r17
    1854:	9c f3       	brlt	.-26     	; 0x183c <prvUnlockQueue+0x12>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	8a a3       	std	Y+34, r24	; 0x22
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	0f 92       	push	r0
    1864:	19 a1       	ldd	r17, Y+33	; 0x21
    1866:	0b c0       	rjmp	.+22     	; 0x187e <prvUnlockQueue+0x54>
    1868:	88 85       	ldd	r24, Y+8	; 0x08
    186a:	88 23       	and	r24, r24
    186c:	51 f0       	breq	.+20     	; 0x1882 <prvUnlockQueue+0x58>
    186e:	ce 01       	movw	r24, r28
    1870:	08 96       	adiw	r24, 0x08	; 8
    1872:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <xTaskRemoveFromEventList>
    1876:	81 11       	cpse	r24, r1
    1878:	0e 94 72 19 	call	0x32e4	; 0x32e4 <vTaskMissedYield>
    187c:	11 50       	subi	r17, 0x01	; 1
    187e:	11 16       	cp	r1, r17
    1880:	9c f3       	brlt	.-26     	; 0x1868 <prvUnlockQueue+0x3e>
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	89 a3       	std	Y+33, r24	; 0x21
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	08 95       	ret

00001892 <xQueueGenericReset>:
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	0f 92       	push	r0
    189e:	e8 81       	ld	r30, Y
    18a0:	f9 81       	ldd	r31, Y+1	; 0x01
    18a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a4:	28 a1       	ldd	r18, Y+32	; 0x20
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	82 9f       	mul	r24, r18
    18ac:	a0 01       	movw	r20, r0
    18ae:	83 9f       	mul	r24, r19
    18b0:	50 0d       	add	r21, r0
    18b2:	92 9f       	mul	r25, r18
    18b4:	50 0d       	add	r21, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	4e 0f       	add	r20, r30
    18ba:	5f 1f       	adc	r21, r31
    18bc:	5d 83       	std	Y+5, r21	; 0x05
    18be:	4c 83       	std	Y+4, r20	; 0x04
    18c0:	1e 8e       	std	Y+30, r1	; 0x1e
    18c2:	fb 83       	std	Y+3, r31	; 0x03
    18c4:	ea 83       	std	Y+2, r30	; 0x02
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	28 9f       	mul	r18, r24
    18ca:	a0 01       	movw	r20, r0
    18cc:	29 9f       	mul	r18, r25
    18ce:	50 0d       	add	r21, r0
    18d0:	38 9f       	mul	r19, r24
    18d2:	50 0d       	add	r21, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	cf 01       	movw	r24, r30
    18d8:	84 0f       	add	r24, r20
    18da:	95 1f       	adc	r25, r21
    18dc:	9f 83       	std	Y+7, r25	; 0x07
    18de:	8e 83       	std	Y+6, r24	; 0x06
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	8a a3       	std	Y+34, r24	; 0x22
    18e6:	61 11       	cpse	r22, r1
    18e8:	0b c0       	rjmp	.+22     	; 0x1900 <xQueueGenericReset+0x6e>
    18ea:	88 85       	ldd	r24, Y+8	; 0x08
    18ec:	88 23       	and	r24, r24
    18ee:	71 f0       	breq	.+28     	; 0x190c <xQueueGenericReset+0x7a>
    18f0:	ce 01       	movw	r24, r28
    18f2:	08 96       	adiw	r24, 0x08	; 8
    18f4:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <xTaskRemoveFromEventList>
    18f8:	88 23       	and	r24, r24
    18fa:	41 f0       	breq	.+16     	; 0x190c <xQueueGenericReset+0x7a>
    18fc:	2a de       	rcall	.-940    	; 0x1552 <vPortYield>
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <xQueueGenericReset+0x7a>
    1900:	ce 01       	movw	r24, r28
    1902:	08 96       	adiw	r24, 0x08	; 8
    1904:	58 dd       	rcall	.-1360   	; 0x13b6 <vListInitialise>
    1906:	ce 01       	movw	r24, r28
    1908:	43 96       	adiw	r24, 0x13	; 19
    190a:	55 dd       	rcall	.-1366   	; 0x13b6 <vListInitialise>
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <prvInitialiseNewQueue>:
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	f8 01       	movw	r30, r16
    191e:	61 11       	cpse	r22, r1
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <prvInitialiseNewQueue+0x10>
    1922:	11 83       	std	Z+1, r17	; 0x01
    1924:	00 83       	st	Z, r16
    1926:	02 c0       	rjmp	.+4      	; 0x192c <prvInitialiseNewQueue+0x14>
    1928:	51 83       	std	Z+1, r21	; 0x01
    192a:	40 83       	st	Z, r20
    192c:	87 8f       	std	Z+31, r24	; 0x1f
    192e:	60 a3       	std	Z+32, r22	; 0x20
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	cf 01       	movw	r24, r30
    1934:	ae df       	rcall	.-164    	; 0x1892 <xQueueGenericReset>
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <xQueueGenericCreate>:
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	f8 2e       	mov	r15, r24
    194c:	e6 2e       	mov	r14, r22
    194e:	d4 2e       	mov	r13, r20
    1950:	86 9f       	mul	r24, r22
    1952:	c0 01       	movw	r24, r0
    1954:	11 24       	eor	r1, r1
    1956:	83 96       	adiw	r24, 0x23	; 35
    1958:	48 dc       	rcall	.-1904   	; 0x11ea <pvPortMalloc>
    195a:	ec 01       	movw	r28, r24
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	41 f0       	breq	.+16     	; 0x1970 <xQueueGenericCreate+0x34>
    1960:	8c 01       	movw	r16, r24
    1962:	2d 2d       	mov	r18, r13
    1964:	ac 01       	movw	r20, r24
    1966:	4d 5d       	subi	r20, 0xDD	; 221
    1968:	5f 4f       	sbci	r21, 0xFF	; 255
    196a:	6e 2d       	mov	r22, r14
    196c:	8f 2d       	mov	r24, r15
    196e:	d4 df       	rcall	.-88     	; 0x1918 <prvInitialiseNewQueue>
    1970:	ce 01       	movw	r24, r28
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	08 95       	ret

00001982 <xQueueGenericSend>:
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	29 97       	sbiw	r28, 0x09	; 9
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	7c 01       	movw	r14, r24
    19a4:	6b 01       	movw	r12, r22
    19a6:	2e 83       	std	Y+6, r18	; 0x06
    19a8:	3f 83       	std	Y+7, r19	; 0x07
    19aa:	48 87       	std	Y+8, r20	; 0x08
    19ac:	59 87       	std	Y+9, r21	; 0x09
    19ae:	10 e0       	ldi	r17, 0x00	; 0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	0f 92       	push	r0
    19b6:	f7 01       	movw	r30, r14
    19b8:	96 8d       	ldd	r25, Z+30	; 0x1e
    19ba:	87 8d       	ldd	r24, Z+31	; 0x1f
    19bc:	98 17       	cp	r25, r24
    19be:	10 f0       	brcs	.+4      	; 0x19c4 <xQueueGenericSend+0x42>
    19c0:	02 30       	cpi	r16, 0x02	; 2
    19c2:	b1 f4       	brne	.+44     	; 0x19f0 <xQueueGenericSend+0x6e>
    19c4:	40 2f       	mov	r20, r16
    19c6:	b6 01       	movw	r22, r12
    19c8:	c7 01       	movw	r24, r14
    19ca:	b6 de       	rcall	.-660    	; 0x1738 <prvCopyDataToQueue>
    19cc:	f7 01       	movw	r30, r14
    19ce:	93 89       	ldd	r25, Z+19	; 0x13
    19d0:	99 23       	and	r25, r25
    19d2:	41 f0       	breq	.+16     	; 0x19e4 <xQueueGenericSend+0x62>
    19d4:	c7 01       	movw	r24, r14
    19d6:	43 96       	adiw	r24, 0x13	; 19
    19d8:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <xTaskRemoveFromEventList>
    19dc:	88 23       	and	r24, r24
    19de:	21 f0       	breq	.+8      	; 0x19e8 <xQueueGenericSend+0x66>
    19e0:	b8 dd       	rcall	.-1168   	; 0x1552 <vPortYield>
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <xQueueGenericSend+0x66>
    19e4:	81 11       	cpse	r24, r1
    19e6:	b5 dd       	rcall	.-1174   	; 0x1552 <vPortYield>
    19e8:	0f 90       	pop	r0
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	4c c0       	rjmp	.+152    	; 0x1a88 <xQueueGenericSend+0x106>
    19f0:	8e 81       	ldd	r24, Y+6	; 0x06
    19f2:	9f 81       	ldd	r25, Y+7	; 0x07
    19f4:	a8 85       	ldd	r26, Y+8	; 0x08
    19f6:	b9 85       	ldd	r27, Y+9	; 0x09
    19f8:	89 2b       	or	r24, r25
    19fa:	8a 2b       	or	r24, r26
    19fc:	8b 2b       	or	r24, r27
    19fe:	21 f4       	brne	.+8      	; 0x1a08 <xQueueGenericSend+0x86>
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	40 c0       	rjmp	.+128    	; 0x1a88 <xQueueGenericSend+0x106>
    1a08:	11 11       	cpse	r17, r1
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <xQueueGenericSend+0x94>
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <vTaskInternalSetTimeOutState>
    1a14:	11 e0       	ldi	r17, 0x01	; 1
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	00 d7       	rcall	.+3584   	; 0x281c <vTaskSuspendAll>
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	0f 92       	push	r0
    1a22:	f7 01       	movw	r30, r14
    1a24:	81 a1       	ldd	r24, Z+33	; 0x21
    1a26:	8f 3f       	cpi	r24, 0xFF	; 255
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <xQueueGenericSend+0xaa>
    1a2a:	11 a2       	std	Z+33, r1	; 0x21
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	82 a1       	ldd	r24, Z+34	; 0x22
    1a30:	8f 3f       	cpi	r24, 0xFF	; 255
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <xQueueGenericSend+0xb4>
    1a34:	12 a2       	std	Z+34, r1	; 0x22
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	be 01       	movw	r22, r28
    1a3c:	6a 5f       	subi	r22, 0xFA	; 250
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	ce 01       	movw	r24, r28
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	0e 94 0c 19 	call	0x3218	; 0x3218 <xTaskCheckForTimeOut>
    1a48:	81 11       	cpse	r24, r1
    1a4a:	19 c0       	rjmp	.+50     	; 0x1a7e <xQueueGenericSend+0xfc>
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	66 de       	rcall	.-820    	; 0x171c <prvIsQueueFull>
    1a50:	88 23       	and	r24, r24
    1a52:	81 f0       	breq	.+32     	; 0x1a74 <xQueueGenericSend+0xf2>
    1a54:	4e 81       	ldd	r20, Y+6	; 0x06
    1a56:	5f 81       	ldd	r21, Y+7	; 0x07
    1a58:	68 85       	ldd	r22, Y+8	; 0x08
    1a5a:	79 85       	ldd	r23, Y+9	; 0x09
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	08 96       	adiw	r24, 0x08	; 8
    1a60:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskPlaceOnEventList>
    1a64:	c7 01       	movw	r24, r14
    1a66:	e1 de       	rcall	.-574    	; 0x182a <prvUnlockQueue>
    1a68:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	a0 cf       	rjmp	.-192    	; 0x19b0 <xQueueGenericSend+0x2e>
    1a70:	70 dd       	rcall	.-1312   	; 0x1552 <vPortYield>
    1a72:	9e cf       	rjmp	.-196    	; 0x19b0 <xQueueGenericSend+0x2e>
    1a74:	c7 01       	movw	r24, r14
    1a76:	d9 de       	rcall	.-590    	; 0x182a <prvUnlockQueue>
    1a78:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
    1a7c:	99 cf       	rjmp	.-206    	; 0x19b0 <xQueueGenericSend+0x2e>
    1a7e:	c7 01       	movw	r24, r14
    1a80:	d4 de       	rcall	.-600    	; 0x182a <prvUnlockQueue>
    1a82:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	29 96       	adiw	r28, 0x09	; 9
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	08 95       	ret

00001aa6 <prvInitialiseMutex>:
    1aa6:	0f 93       	push	r16
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f0       	breq	.+26     	; 0x1ac6 <prvInitialiseMutex+0x20>
    1aac:	fc 01       	movw	r30, r24
    1aae:	15 82       	std	Z+5, r1	; 0x05
    1ab0:	14 82       	std	Z+4, r1	; 0x04
    1ab2:	11 82       	std	Z+1, r1	; 0x01
    1ab4:	10 82       	st	Z, r1
    1ab6:	16 82       	std	Z+6, r1	; 0x06
    1ab8:	00 e0       	ldi	r16, 0x00	; 0
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	a9 01       	movw	r20, r18
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	5e df       	rcall	.-324    	; 0x1982 <xQueueGenericSend>
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <xQueueCreateMutex>:
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	48 2f       	mov	r20, r24
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	33 df       	rcall	.-410    	; 0x193c <xQueueGenericCreate>
    1ad6:	ec 01       	movw	r28, r24
    1ad8:	e6 df       	rcall	.-52     	; 0x1aa6 <prvInitialiseMutex>
    1ada:	ce 01       	movw	r24, r28
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <xQueueGenericSendFromISR>:
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	8a 01       	movw	r16, r20
    1af0:	fc 01       	movw	r30, r24
    1af2:	56 8d       	ldd	r21, Z+30	; 0x1e
    1af4:	37 8d       	ldd	r19, Z+31	; 0x1f
    1af6:	53 17       	cp	r21, r19
    1af8:	10 f0       	brcs	.+4      	; 0x1afe <xQueueGenericSendFromISR+0x1c>
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	f9 f4       	brne	.+62     	; 0x1b3c <xQueueGenericSendFromISR+0x5a>
    1afe:	42 2f       	mov	r20, r18
    1b00:	78 01       	movw	r14, r16
    1b02:	ec 01       	movw	r28, r24
    1b04:	1a a1       	ldd	r17, Y+34	; 0x22
    1b06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b08:	ce 01       	movw	r24, r28
    1b0a:	16 de       	rcall	.-980    	; 0x1738 <prvCopyDataToQueue>
    1b0c:	1f 3f       	cpi	r17, 0xFF	; 255
    1b0e:	81 f4       	brne	.+32     	; 0x1b30 <xQueueGenericSendFromISR+0x4e>
    1b10:	8b 89       	ldd	r24, Y+19	; 0x13
    1b12:	88 23       	and	r24, r24
    1b14:	a9 f0       	breq	.+42     	; 0x1b40 <xQueueGenericSendFromISR+0x5e>
    1b16:	ce 01       	movw	r24, r28
    1b18:	43 96       	adiw	r24, 0x13	; 19
    1b1a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <xTaskRemoveFromEventList>
    1b1e:	88 23       	and	r24, r24
    1b20:	89 f0       	breq	.+34     	; 0x1b44 <xQueueGenericSendFromISR+0x62>
    1b22:	e1 14       	cp	r14, r1
    1b24:	f1 04       	cpc	r15, r1
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <xQueueGenericSendFromISR+0x66>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	f7 01       	movw	r30, r14
    1b2c:	80 83       	st	Z, r24
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <xQueueGenericSendFromISR+0x68>
    1b30:	ff 24       	eor	r15, r15
    1b32:	f3 94       	inc	r15
    1b34:	f1 0e       	add	r15, r17
    1b36:	fa a2       	std	Y+34, r15	; 0x22
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <xQueueGenericSendFromISR+0x68>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <xQueueGenericSendFromISR+0x68>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <xQueueGenericSendFromISR+0x68>
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <xQueueGenericSendFromISR+0x68>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	08 95       	ret

00001b58 <xQueueReceive>:
    1b58:	cf 92       	push	r12
    1b5a:	df 92       	push	r13
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	29 97       	sbiw	r28, 0x09	; 9
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	8c 01       	movw	r16, r24
    1b7a:	6b 01       	movw	r12, r22
    1b7c:	2e 83       	std	Y+6, r18	; 0x06
    1b7e:	3f 83       	std	Y+7, r19	; 0x07
    1b80:	48 87       	std	Y+8, r20	; 0x08
    1b82:	59 87       	std	Y+9, r21	; 0x09
    1b84:	e1 2c       	mov	r14, r1
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	0f 92       	push	r0
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1b90:	ff 20       	and	r15, r15
    1b92:	99 f0       	breq	.+38     	; 0x1bba <xQueueReceive+0x62>
    1b94:	b6 01       	movw	r22, r12
    1b96:	c8 01       	movw	r24, r16
    1b98:	2e de       	rcall	.-932    	; 0x17f6 <prvCopyDataFromQueue>
    1b9a:	fa 94       	dec	r15
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	f6 8e       	std	Z+30, r15	; 0x1e
    1ba0:	80 85       	ldd	r24, Z+8	; 0x08
    1ba2:	88 23       	and	r24, r24
    1ba4:	31 f0       	breq	.+12     	; 0x1bb2 <xQueueReceive+0x5a>
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	08 96       	adiw	r24, 0x08	; 8
    1baa:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <xTaskRemoveFromEventList>
    1bae:	81 11       	cpse	r24, r1
    1bb0:	d0 dc       	rcall	.-1632   	; 0x1552 <vPortYield>
    1bb2:	0f 90       	pop	r0
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	4f c0       	rjmp	.+158    	; 0x1c58 <xQueueReceive+0x100>
    1bba:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbe:	a8 85       	ldd	r26, Y+8	; 0x08
    1bc0:	b9 85       	ldd	r27, Y+9	; 0x09
    1bc2:	89 2b       	or	r24, r25
    1bc4:	8a 2b       	or	r24, r26
    1bc6:	8b 2b       	or	r24, r27
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <xQueueReceive+0x7a>
    1bca:	0f 90       	pop	r0
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	43 c0       	rjmp	.+134    	; 0x1c58 <xQueueReceive+0x100>
    1bd2:	e1 10       	cpse	r14, r1
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <xQueueReceive+0x8a>
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <vTaskInternalSetTimeOutState>
    1bde:	ee 24       	eor	r14, r14
    1be0:	e3 94       	inc	r14
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	1a d6       	rcall	.+3124   	; 0x281c <vTaskSuspendAll>
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	0f 92       	push	r0
    1bee:	f8 01       	movw	r30, r16
    1bf0:	81 a1       	ldd	r24, Z+33	; 0x21
    1bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <xQueueReceive+0xa0>
    1bf6:	11 a2       	std	Z+33, r1	; 0x21
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	82 a1       	ldd	r24, Z+34	; 0x22
    1bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <xQueueReceive+0xaa>
    1c00:	12 a2       	std	Z+34, r1	; 0x22
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	be 01       	movw	r22, r28
    1c08:	6a 5f       	subi	r22, 0xFA	; 250
    1c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	0e 94 0c 19 	call	0x3218	; 0x3218 <xTaskCheckForTimeOut>
    1c14:	81 11       	cpse	r24, r1
    1c16:	17 c0       	rjmp	.+46     	; 0x1c46 <xQueueReceive+0xee>
    1c18:	c8 01       	movw	r24, r16
    1c1a:	73 dd       	rcall	.-1306   	; 0x1702 <prvIsQueueEmpty>
    1c1c:	88 23       	and	r24, r24
    1c1e:	79 f0       	breq	.+30     	; 0x1c3e <xQueueReceive+0xe6>
    1c20:	4e 81       	ldd	r20, Y+6	; 0x06
    1c22:	5f 81       	ldd	r21, Y+7	; 0x07
    1c24:	68 85       	ldd	r22, Y+8	; 0x08
    1c26:	79 85       	ldd	r23, Y+9	; 0x09
    1c28:	c8 01       	movw	r24, r16
    1c2a:	43 96       	adiw	r24, 0x13	; 19
    1c2c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskPlaceOnEventList>
    1c30:	c8 01       	movw	r24, r16
    1c32:	fb dd       	rcall	.-1034   	; 0x182a <prvUnlockQueue>
    1c34:	33 d7       	rcall	.+3686   	; 0x2a9c <xTaskResumeAll>
    1c36:	81 11       	cpse	r24, r1
    1c38:	a6 cf       	rjmp	.-180    	; 0x1b86 <xQueueReceive+0x2e>
    1c3a:	8b dc       	rcall	.-1770   	; 0x1552 <vPortYield>
    1c3c:	a4 cf       	rjmp	.-184    	; 0x1b86 <xQueueReceive+0x2e>
    1c3e:	c8 01       	movw	r24, r16
    1c40:	f4 dd       	rcall	.-1048   	; 0x182a <prvUnlockQueue>
    1c42:	2c d7       	rcall	.+3672   	; 0x2a9c <xTaskResumeAll>
    1c44:	a0 cf       	rjmp	.-192    	; 0x1b86 <xQueueReceive+0x2e>
    1c46:	c8 01       	movw	r24, r16
    1c48:	f0 dd       	rcall	.-1056   	; 0x182a <prvUnlockQueue>
    1c4a:	28 d7       	rcall	.+3664   	; 0x2a9c <xTaskResumeAll>
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	59 dd       	rcall	.-1358   	; 0x1702 <prvIsQueueEmpty>
    1c50:	88 23       	and	r24, r24
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <xQueueReceive+0xfe>
    1c54:	98 cf       	rjmp	.-208    	; 0x1b86 <xQueueReceive+0x2e>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	29 96       	adiw	r28, 0x09	; 9
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	df 90       	pop	r13
    1c72:	cf 90       	pop	r12
    1c74:	08 95       	ret

00001c76 <xQueueSemaphoreTake>:
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	29 97       	sbiw	r28, 0x09	; 9
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	8c 01       	movw	r16, r24
    1c94:	4e 83       	std	Y+6, r20	; 0x06
    1c96:	5f 83       	std	Y+7, r21	; 0x07
    1c98:	68 87       	std	Y+8, r22	; 0x08
    1c9a:	79 87       	std	Y+9, r23	; 0x09
    1c9c:	e1 2c       	mov	r14, r1
    1c9e:	f1 2c       	mov	r15, r1
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	0f 92       	push	r0
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1caa:	88 23       	and	r24, r24
    1cac:	c9 f0       	breq	.+50     	; 0x1ce0 <xQueueSemaphoreTake+0x6a>
    1cae:	81 50       	subi	r24, 0x01	; 1
    1cb0:	86 8f       	std	Z+30, r24	; 0x1e
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	89 2b       	or	r24, r25
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <xQueueSemaphoreTake+0x4e>
    1cba:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <pvTaskIncrementMutexHeldCount>
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	95 83       	std	Z+5, r25	; 0x05
    1cc2:	84 83       	std	Z+4, r24	; 0x04
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	80 85       	ldd	r24, Z+8	; 0x08
    1cc8:	88 23       	and	r24, r24
    1cca:	31 f0       	breq	.+12     	; 0x1cd8 <xQueueSemaphoreTake+0x62>
    1ccc:	c8 01       	movw	r24, r16
    1cce:	08 96       	adiw	r24, 0x08	; 8
    1cd0:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <xTaskRemoveFromEventList>
    1cd4:	81 11       	cpse	r24, r1
    1cd6:	3d dc       	rcall	.-1926   	; 0x1552 <vPortYield>
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	6f c0       	rjmp	.+222    	; 0x1dbe <xQueueSemaphoreTake+0x148>
    1ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ce6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ce8:	89 2b       	or	r24, r25
    1cea:	8a 2b       	or	r24, r26
    1cec:	8b 2b       	or	r24, r27
    1cee:	21 f4       	brne	.+8      	; 0x1cf8 <xQueueSemaphoreTake+0x82>
    1cf0:	0f 90       	pop	r0
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	63 c0       	rjmp	.+198    	; 0x1dbe <xQueueSemaphoreTake+0x148>
    1cf8:	f1 10       	cpse	r15, r1
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <xQueueSemaphoreTake+0x92>
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <vTaskInternalSetTimeOutState>
    1d04:	ff 24       	eor	r15, r15
    1d06:	f3 94       	inc	r15
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	87 d5       	rcall	.+2830   	; 0x281c <vTaskSuspendAll>
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	0f 92       	push	r0
    1d14:	f8 01       	movw	r30, r16
    1d16:	81 a1       	ldd	r24, Z+33	; 0x21
    1d18:	8f 3f       	cpi	r24, 0xFF	; 255
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <xQueueSemaphoreTake+0xa8>
    1d1c:	11 a2       	std	Z+33, r1	; 0x21
    1d1e:	f8 01       	movw	r30, r16
    1d20:	82 a1       	ldd	r24, Z+34	; 0x22
    1d22:	8f 3f       	cpi	r24, 0xFF	; 255
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <xQueueSemaphoreTake+0xb2>
    1d26:	12 a2       	std	Z+34, r1	; 0x22
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	be 01       	movw	r22, r28
    1d2e:	6a 5f       	subi	r22, 0xFA	; 250
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	0e 94 0c 19 	call	0x3218	; 0x3218 <xTaskCheckForTimeOut>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	26 c0       	rjmp	.+76     	; 0x1d8a <xQueueSemaphoreTake+0x114>
    1d3e:	c8 01       	movw	r24, r16
    1d40:	e0 dc       	rcall	.-1600   	; 0x1702 <prvIsQueueEmpty>
    1d42:	88 23       	and	r24, r24
    1d44:	f1 f0       	breq	.+60     	; 0x1d82 <xQueueSemaphoreTake+0x10c>
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	89 2b       	or	r24, r25
    1d4e:	51 f4       	brne	.+20     	; 0x1d64 <xQueueSemaphoreTake+0xee>
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	0f 92       	push	r0
    1d56:	84 81       	ldd	r24, Z+4	; 0x04
    1d58:	95 81       	ldd	r25, Z+5	; 0x05
    1d5a:	0e 94 89 19 	call	0x3312	; 0x3312 <xTaskPriorityInherit>
    1d5e:	e8 2e       	mov	r14, r24
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	4e 81       	ldd	r20, Y+6	; 0x06
    1d66:	5f 81       	ldd	r21, Y+7	; 0x07
    1d68:	68 85       	ldd	r22, Y+8	; 0x08
    1d6a:	79 85       	ldd	r23, Y+9	; 0x09
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	43 96       	adiw	r24, 0x13	; 19
    1d70:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskPlaceOnEventList>
    1d74:	c8 01       	movw	r24, r16
    1d76:	59 dd       	rcall	.-1358   	; 0x182a <prvUnlockQueue>
    1d78:	91 d6       	rcall	.+3362   	; 0x2a9c <xTaskResumeAll>
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	91 cf       	rjmp	.-222    	; 0x1ca0 <xQueueSemaphoreTake+0x2a>
    1d7e:	e9 db       	rcall	.-2094   	; 0x1552 <vPortYield>
    1d80:	8f cf       	rjmp	.-226    	; 0x1ca0 <xQueueSemaphoreTake+0x2a>
    1d82:	c8 01       	movw	r24, r16
    1d84:	52 dd       	rcall	.-1372   	; 0x182a <prvUnlockQueue>
    1d86:	8a d6       	rcall	.+3348   	; 0x2a9c <xTaskResumeAll>
    1d88:	8b cf       	rjmp	.-234    	; 0x1ca0 <xQueueSemaphoreTake+0x2a>
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	4e dd       	rcall	.-1380   	; 0x182a <prvUnlockQueue>
    1d8e:	86 d6       	rcall	.+3340   	; 0x2a9c <xTaskResumeAll>
    1d90:	c8 01       	movw	r24, r16
    1d92:	b7 dc       	rcall	.-1682   	; 0x1702 <prvIsQueueEmpty>
    1d94:	88 23       	and	r24, r24
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <xQueueSemaphoreTake+0x124>
    1d98:	83 cf       	rjmp	.-250    	; 0x1ca0 <xQueueSemaphoreTake+0x2a>
    1d9a:	ee 20       	and	r14, r14
    1d9c:	79 f0       	breq	.+30     	; 0x1dbc <xQueueSemaphoreTake+0x146>
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	0f 92       	push	r0
    1da4:	c8 01       	movw	r24, r16
    1da6:	9d dc       	rcall	.-1734   	; 0x16e2 <prvGetDisinheritPriorityAfterTimeout>
    1da8:	68 2f       	mov	r22, r24
    1daa:	f8 01       	movw	r30, r16
    1dac:	84 81       	ldd	r24, Z+4	; 0x04
    1dae:	95 81       	ldd	r25, Z+5	; 0x05
    1db0:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <vTaskPriorityDisinheritAfterTimeout>
    1db4:	0f 90       	pop	r0
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	01 c0       	rjmp	.+2      	; 0x1dbe <xQueueSemaphoreTake+0x148>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	29 96       	adiw	r28, 0x09	; 9
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	08 95       	ret

00001dd8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	0f 92       	push	r0
    1de4:	89 a1       	ldd	r24, Y+33	; 0x21
    1de6:	8f 3f       	cpi	r24, 0xFF	; 255
    1de8:	09 f4       	brne	.+2      	; 0x1dec <vQueueWaitForMessageRestricted+0x14>
    1dea:	19 a2       	std	Y+33, r1	; 0x21
    1dec:	8a a1       	ldd	r24, Y+34	; 0x22
    1dee:	8f 3f       	cpi	r24, 0xFF	; 255
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <vQueueWaitForMessageRestricted+0x1c>
    1df2:	1a a2       	std	Y+34, r1	; 0x22
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1df8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dfa:	81 11       	cpse	r24, r1
    1dfc:	04 c0       	rjmp	.+8      	; 0x1e06 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1dfe:	ce 01       	movw	r24, r28
    1e00:	43 96       	adiw	r24, 0x13	; 19
    1e02:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1e06:	ce 01       	movw	r24, r28
    1e08:	10 dd       	rcall	.-1504   	; 0x182a <prvUnlockQueue>
    }
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret

00001e10 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1e10:	fc 01       	movw	r30, r24
    1e12:	44 81       	ldd	r20, Z+4	; 0x04
    1e14:	55 81       	ldd	r21, Z+5	; 0x05
    1e16:	22 81       	ldd	r18, Z+2	; 0x02
    1e18:	33 81       	ldd	r19, Z+3	; 0x03
    1e1a:	24 0f       	add	r18, r20
    1e1c:	35 1f       	adc	r19, r21
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	b9 01       	movw	r22, r18
    1e24:	68 1b       	sub	r22, r24
    1e26:	79 0b       	sbc	r23, r25
    1e28:	cb 01       	movw	r24, r22
    1e2a:	64 17       	cp	r22, r20
    1e2c:	75 07       	cpc	r23, r21
    1e2e:	10 f0       	brcs	.+4      	; 0x1e34 <prvBytesInBuffer+0x24>
    1e30:	84 1b       	sub	r24, r20
    1e32:	95 0b       	sbc	r25, r21
    1e34:	08 95       	ret

00001e36 <prvInitialiseNewStreamBuffer>:
    1e36:	0f 93       	push	r16
    1e38:	fc 01       	movw	r30, r24
    1e3a:	8f e0       	ldi	r24, 0x0F	; 15
    1e3c:	df 01       	movw	r26, r30
    1e3e:	1d 92       	st	X+, r1
    1e40:	8a 95       	dec	r24
    1e42:	e9 f7       	brne	.-6      	; 0x1e3e <prvInitialiseNewStreamBuffer+0x8>
    1e44:	75 87       	std	Z+13, r23	; 0x0d
    1e46:	64 87       	std	Z+12, r22	; 0x0c
    1e48:	55 83       	std	Z+5, r21	; 0x05
    1e4a:	44 83       	std	Z+4, r20	; 0x04
    1e4c:	37 83       	std	Z+7, r19	; 0x07
    1e4e:	26 83       	std	Z+6, r18	; 0x06
    1e50:	06 87       	std	Z+14, r16	; 0x0e
    1e52:	0f 91       	pop	r16
    1e54:	08 95       	ret

00001e56 <prvWriteBytesToBuffer>:
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	6c 01       	movw	r12, r24
    1e6c:	5b 01       	movw	r10, r22
    1e6e:	7a 01       	movw	r14, r20
    1e70:	fc 01       	movw	r30, r24
    1e72:	c2 81       	ldd	r28, Z+2	; 0x02
    1e74:	d3 81       	ldd	r29, Z+3	; 0x03
    1e76:	04 81       	ldd	r16, Z+4	; 0x04
    1e78:	15 81       	ldd	r17, Z+5	; 0x05
    1e7a:	0c 1b       	sub	r16, r28
    1e7c:	1d 0b       	sbc	r17, r29
    1e7e:	40 17       	cp	r20, r16
    1e80:	51 07       	cpc	r21, r17
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <prvWriteBytesToBuffer+0x30>
    1e84:	8a 01       	movw	r16, r20
    1e86:	f6 01       	movw	r30, r12
    1e88:	84 85       	ldd	r24, Z+12	; 0x0c
    1e8a:	95 85       	ldd	r25, Z+13	; 0x0d
    1e8c:	a8 01       	movw	r20, r16
    1e8e:	b5 01       	movw	r22, r10
    1e90:	8c 0f       	add	r24, r28
    1e92:	9d 1f       	adc	r25, r29
    1e94:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <memcpy>
    1e98:	0e 15       	cp	r16, r14
    1e9a:	1f 05       	cpc	r17, r15
    1e9c:	58 f4       	brcc	.+22     	; 0x1eb4 <prvWriteBytesToBuffer+0x5e>
    1e9e:	a7 01       	movw	r20, r14
    1ea0:	40 1b       	sub	r20, r16
    1ea2:	51 0b       	sbc	r21, r17
    1ea4:	b5 01       	movw	r22, r10
    1ea6:	60 0f       	add	r22, r16
    1ea8:	71 1f       	adc	r23, r17
    1eaa:	f6 01       	movw	r30, r12
    1eac:	84 85       	ldd	r24, Z+12	; 0x0c
    1eae:	95 85       	ldd	r25, Z+13	; 0x0d
    1eb0:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <memcpy>
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	8e 0d       	add	r24, r14
    1eb8:	9f 1d       	adc	r25, r15
    1eba:	f6 01       	movw	r30, r12
    1ebc:	24 81       	ldd	r18, Z+4	; 0x04
    1ebe:	35 81       	ldd	r19, Z+5	; 0x05
    1ec0:	82 17       	cp	r24, r18
    1ec2:	93 07       	cpc	r25, r19
    1ec4:	10 f0       	brcs	.+4      	; 0x1eca <prvWriteBytesToBuffer+0x74>
    1ec6:	82 1b       	sub	r24, r18
    1ec8:	93 0b       	sbc	r25, r19
    1eca:	f6 01       	movw	r30, r12
    1ecc:	93 83       	std	Z+3, r25	; 0x03
    1ece:	82 83       	std	Z+2, r24	; 0x02
    1ed0:	c7 01       	movw	r24, r14
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	df 90       	pop	r13
    1ee0:	cf 90       	pop	r12
    1ee2:	bf 90       	pop	r11
    1ee4:	af 90       	pop	r10
    1ee6:	08 95       	ret

00001ee8 <prvWriteMessageToBuffer>:
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	1f 92       	push	r1
    1efa:	1f 92       	push	r1
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	7c 01       	movw	r14, r24
    1f02:	6b 01       	movw	r12, r22
    1f04:	5a 83       	std	Y+2, r21	; 0x02
    1f06:	49 83       	std	Y+1, r20	; 0x01
    1f08:	21 15       	cp	r18, r1
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	c1 f0       	breq	.+48     	; 0x1f3e <prvWriteMessageToBuffer+0x56>
    1f0e:	fc 01       	movw	r30, r24
    1f10:	86 85       	ldd	r24, Z+14	; 0x0e
    1f12:	80 fd       	sbrc	r24, 0
    1f14:	08 c0       	rjmp	.+16     	; 0x1f26 <prvWriteMessageToBuffer+0x3e>
    1f16:	42 17       	cp	r20, r18
    1f18:	53 07       	cpc	r21, r19
    1f1a:	08 f4       	brcc	.+2      	; 0x1f1e <prvWriteMessageToBuffer+0x36>
    1f1c:	9a 01       	movw	r18, r20
    1f1e:	3a 83       	std	Y+2, r19	; 0x02
    1f20:	29 83       	std	Y+1, r18	; 0x01
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <prvWriteMessageToBuffer+0x5c>
    1f26:	20 17       	cp	r18, r16
    1f28:	31 07       	cpc	r19, r17
    1f2a:	58 f0       	brcs	.+22     	; 0x1f42 <prvWriteMessageToBuffer+0x5a>
    1f2c:	42 e0       	ldi	r20, 0x02	; 2
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	be 01       	movw	r22, r28
    1f32:	6f 5f       	subi	r22, 0xFF	; 255
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	c7 01       	movw	r24, r14
    1f38:	8e df       	rcall	.-228    	; 0x1e56 <prvWriteBytesToBuffer>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <prvWriteMessageToBuffer+0x5c>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <prvWriteMessageToBuffer+0x5c>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	88 23       	and	r24, r24
    1f46:	31 f0       	breq	.+12     	; 0x1f54 <prvWriteMessageToBuffer+0x6c>
    1f48:	49 81       	ldd	r20, Y+1	; 0x01
    1f4a:	5a 81       	ldd	r21, Y+2	; 0x02
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	c7 01       	movw	r24, r14
    1f50:	82 df       	rcall	.-252    	; 0x1e56 <prvWriteBytesToBuffer>
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <prvWriteMessageToBuffer+0x70>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	cf 90       	pop	r12
    1f6c:	08 95       	ret

00001f6e <prvReadBytesFromBuffer>:
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	7c 01       	movw	r14, r24
    1f84:	5b 01       	movw	r10, r22
    1f86:	e9 01       	movw	r28, r18
    1f88:	42 17       	cp	r20, r18
    1f8a:	53 07       	cpc	r21, r19
    1f8c:	08 f4       	brcc	.+2      	; 0x1f90 <prvReadBytesFromBuffer+0x22>
    1f8e:	ea 01       	movw	r28, r20
    1f90:	20 97       	sbiw	r28, 0x00	; 0
    1f92:	81 f1       	breq	.+96     	; 0x1ff4 <prvReadBytesFromBuffer+0x86>
    1f94:	f7 01       	movw	r30, r14
    1f96:	00 81       	ld	r16, Z
    1f98:	11 81       	ldd	r17, Z+1	; 0x01
    1f9a:	84 81       	ldd	r24, Z+4	; 0x04
    1f9c:	95 81       	ldd	r25, Z+5	; 0x05
    1f9e:	80 1b       	sub	r24, r16
    1fa0:	91 0b       	sbc	r25, r17
    1fa2:	6e 01       	movw	r12, r28
    1fa4:	8c 17       	cp	r24, r28
    1fa6:	9d 07       	cpc	r25, r29
    1fa8:	08 f4       	brcc	.+2      	; 0x1fac <prvReadBytesFromBuffer+0x3e>
    1faa:	6c 01       	movw	r12, r24
    1fac:	f7 01       	movw	r30, r14
    1fae:	64 85       	ldd	r22, Z+12	; 0x0c
    1fb0:	75 85       	ldd	r23, Z+13	; 0x0d
    1fb2:	60 0f       	add	r22, r16
    1fb4:	71 1f       	adc	r23, r17
    1fb6:	a6 01       	movw	r20, r12
    1fb8:	c5 01       	movw	r24, r10
    1fba:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <memcpy>
    1fbe:	cc 16       	cp	r12, r28
    1fc0:	dd 06       	cpc	r13, r29
    1fc2:	58 f4       	brcc	.+22     	; 0x1fda <prvReadBytesFromBuffer+0x6c>
    1fc4:	ae 01       	movw	r20, r28
    1fc6:	4c 19       	sub	r20, r12
    1fc8:	5d 09       	sbc	r21, r13
    1fca:	f7 01       	movw	r30, r14
    1fcc:	64 85       	ldd	r22, Z+12	; 0x0c
    1fce:	75 85       	ldd	r23, Z+13	; 0x0d
    1fd0:	c5 01       	movw	r24, r10
    1fd2:	8c 0d       	add	r24, r12
    1fd4:	9d 1d       	adc	r25, r13
    1fd6:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <memcpy>
    1fda:	0c 0f       	add	r16, r28
    1fdc:	1d 1f       	adc	r17, r29
    1fde:	f7 01       	movw	r30, r14
    1fe0:	84 81       	ldd	r24, Z+4	; 0x04
    1fe2:	95 81       	ldd	r25, Z+5	; 0x05
    1fe4:	08 17       	cp	r16, r24
    1fe6:	19 07       	cpc	r17, r25
    1fe8:	10 f0       	brcs	.+4      	; 0x1fee <prvReadBytesFromBuffer+0x80>
    1fea:	08 1b       	sub	r16, r24
    1fec:	19 0b       	sbc	r17, r25
    1fee:	f7 01       	movw	r30, r14
    1ff0:	11 83       	std	Z+1, r17	; 0x01
    1ff2:	00 83       	st	Z, r16
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	bf 90       	pop	r11
    2008:	af 90       	pop	r10
    200a:	08 95       	ret

0000200c <prvReadMessageFromBuffer>:
    200c:	6f 92       	push	r6
    200e:	7f 92       	push	r7
    2010:	8f 92       	push	r8
    2012:	9f 92       	push	r9
    2014:	af 92       	push	r10
    2016:	bf 92       	push	r11
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	1f 92       	push	r1
    202a:	1f 92       	push	r1
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	6c 01       	movw	r12, r24
    2032:	4b 01       	movw	r8, r22
    2034:	5a 01       	movw	r10, r20
    2036:	79 01       	movw	r14, r18
    2038:	01 15       	cp	r16, r1
    203a:	11 05       	cpc	r17, r1
    203c:	b1 f0       	breq	.+44     	; 0x206a <prvReadMessageFromBuffer+0x5e>
    203e:	fc 01       	movw	r30, r24
    2040:	60 80       	ld	r6, Z
    2042:	71 80       	ldd	r7, Z+1	; 0x01
    2044:	a8 01       	movw	r20, r16
    2046:	be 01       	movw	r22, r28
    2048:	6f 5f       	subi	r22, 0xFF	; 255
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	90 df       	rcall	.-224    	; 0x1f6e <prvReadBytesFromBuffer>
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	e0 1a       	sub	r14, r16
    2054:	f1 0a       	sbc	r15, r17
    2056:	a8 16       	cp	r10, r24
    2058:	b9 06       	cpc	r11, r25
    205a:	30 f4       	brcc	.+12     	; 0x2068 <prvReadMessageFromBuffer+0x5c>
    205c:	f6 01       	movw	r30, r12
    205e:	71 82       	std	Z+1, r7	; 0x01
    2060:	60 82       	st	Z, r6
    2062:	a1 2c       	mov	r10, r1
    2064:	b1 2c       	mov	r11, r1
    2066:	01 c0       	rjmp	.+2      	; 0x206a <prvReadMessageFromBuffer+0x5e>
    2068:	5c 01       	movw	r10, r24
    206a:	97 01       	movw	r18, r14
    206c:	a5 01       	movw	r20, r10
    206e:	b4 01       	movw	r22, r8
    2070:	c6 01       	movw	r24, r12
    2072:	7d df       	rcall	.-262    	; 0x1f6e <prvReadBytesFromBuffer>
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	df 90       	pop	r13
    2086:	cf 90       	pop	r12
    2088:	bf 90       	pop	r11
    208a:	af 90       	pop	r10
    208c:	9f 90       	pop	r9
    208e:	8f 90       	pop	r8
    2090:	7f 90       	pop	r7
    2092:	6f 90       	pop	r6
    2094:	08 95       	ret

00002096 <xStreamBufferGenericCreate>:
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	ec 01       	movw	r28, r24
    20a6:	6b 01       	movw	r12, r22
    20a8:	41 30       	cpi	r20, 0x01	; 1
    20aa:	11 f4       	brne	.+4      	; 0x20b0 <xStreamBufferGenericCreate+0x1a>
    20ac:	01 e0       	ldi	r16, 0x01	; 1
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <xStreamBufferGenericCreate+0x1c>
    20b0:	00 e0       	ldi	r16, 0x00	; 0
    20b2:	c1 14       	cp	r12, r1
    20b4:	d1 04       	cpc	r13, r1
    20b6:	19 f4       	brne	.+6      	; 0x20be <xStreamBufferGenericCreate+0x28>
    20b8:	cc 24       	eor	r12, r12
    20ba:	c3 94       	inc	r12
    20bc:	d1 2c       	mov	r13, r1
    20be:	ce 01       	movw	r24, r28
    20c0:	40 96       	adiw	r24, 0x10	; 16
    20c2:	c8 17       	cp	r28, r24
    20c4:	d9 07       	cpc	r29, r25
    20c6:	20 f4       	brcc	.+8      	; 0x20d0 <xStreamBufferGenericCreate+0x3a>
    20c8:	21 96       	adiw	r28, 0x01	; 1
    20ca:	8f d8       	rcall	.-3810   	; 0x11ea <pvPortMalloc>
    20cc:	7c 01       	movw	r14, r24
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <xStreamBufferGenericCreate+0x3e>
    20d0:	e1 2c       	mov	r14, r1
    20d2:	f1 2c       	mov	r15, r1
    20d4:	e1 14       	cp	r14, r1
    20d6:	f1 04       	cpc	r15, r1
    20d8:	39 f0       	breq	.+14     	; 0x20e8 <xStreamBufferGenericCreate+0x52>
    20da:	96 01       	movw	r18, r12
    20dc:	ae 01       	movw	r20, r28
    20de:	b7 01       	movw	r22, r14
    20e0:	61 5f       	subi	r22, 0xF1	; 241
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	c7 01       	movw	r24, r14
    20e6:	a7 de       	rcall	.-690    	; 0x1e36 <prvInitialiseNewStreamBuffer>
    20e8:	c7 01       	movw	r24, r14
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	df 90       	pop	r13
    20f6:	cf 90       	pop	r12
    20f8:	08 95       	ret

000020fa <xStreamBufferReset>:
    20fa:	0f 93       	push	r16
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	0f 92       	push	r0
    2102:	fc 01       	movw	r30, r24
    2104:	20 85       	ldd	r18, Z+8	; 0x08
    2106:	31 85       	ldd	r19, Z+9	; 0x09
    2108:	23 2b       	or	r18, r19
    210a:	71 f4       	brne	.+28     	; 0x2128 <xStreamBufferReset+0x2e>
    210c:	22 85       	ldd	r18, Z+10	; 0x0a
    210e:	33 85       	ldd	r19, Z+11	; 0x0b
    2110:	23 2b       	or	r18, r19
    2112:	61 f4       	brne	.+24     	; 0x212c <xStreamBufferReset+0x32>
    2114:	26 81       	ldd	r18, Z+6	; 0x06
    2116:	37 81       	ldd	r19, Z+7	; 0x07
    2118:	44 81       	ldd	r20, Z+4	; 0x04
    211a:	55 81       	ldd	r21, Z+5	; 0x05
    211c:	64 85       	ldd	r22, Z+12	; 0x0c
    211e:	75 85       	ldd	r23, Z+13	; 0x0d
    2120:	06 85       	ldd	r16, Z+14	; 0x0e
    2122:	89 de       	rcall	.-750    	; 0x1e36 <prvInitialiseNewStreamBuffer>
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	03 c0       	rjmp	.+6      	; 0x212e <xStreamBufferReset+0x34>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	01 c0       	rjmp	.+2      	; 0x212e <xStreamBufferReset+0x34>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0f 90       	pop	r0
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	0f 91       	pop	r16
    2134:	08 95       	ret

00002136 <xStreamBufferSpacesAvailable>:
    2136:	fc 01       	movw	r30, r24
    2138:	24 81       	ldd	r18, Z+4	; 0x04
    213a:	35 81       	ldd	r19, Z+5	; 0x05
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	82 0f       	add	r24, r18
    2142:	93 1f       	adc	r25, r19
    2144:	42 81       	ldd	r20, Z+2	; 0x02
    2146:	53 81       	ldd	r21, Z+3	; 0x03
    2148:	84 1b       	sub	r24, r20
    214a:	95 0b       	sbc	r25, r21
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	82 17       	cp	r24, r18
    2150:	93 07       	cpc	r25, r19
    2152:	10 f0       	brcs	.+4      	; 0x2158 <xStreamBufferSpacesAvailable+0x22>
    2154:	82 1b       	sub	r24, r18
    2156:	93 0b       	sbc	r25, r19
    2158:	08 95       	ret

0000215a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	ec 01       	movw	r28, r24
    2170:	7b 01       	movw	r14, r22
    2172:	5a 01       	movw	r10, r20
    2174:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2176:	8e 85       	ldd	r24, Y+14	; 0x0e
    2178:	80 ff       	sbrs	r24, 0
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    217c:	8a 01       	movw	r16, r20
    217e:	0e 5f       	subi	r16, 0xFE	; 254
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    2184:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2186:	ce 01       	movw	r24, r28
    2188:	d6 df       	rcall	.-84     	; 0x2136 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    218a:	9c 01       	movw	r18, r24
    218c:	a5 01       	movw	r20, r10
    218e:	b7 01       	movw	r22, r14
    2190:	ce 01       	movw	r24, r28
    2192:	aa de       	rcall	.-684    	; 0x1ee8 <prvWriteMessageToBuffer>
    2194:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    2196:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2198:	c1 f0       	breq	.+48     	; 0x21ca <xStreamBufferSendFromISR+0x70>
    219a:	ce 01       	movw	r24, r28
    219c:	39 de       	rcall	.-910    	; 0x1e10 <prvBytesInBuffer>
    219e:	2e 81       	ldd	r18, Y+6	; 0x06
    21a0:	3f 81       	ldd	r19, Y+7	; 0x07
    21a2:	82 17       	cp	r24, r18
    21a4:	93 07       	cpc	r25, r19
    21a6:	88 f0       	brcs	.+34     	; 0x21ca <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    21a8:	88 85       	ldd	r24, Y+8	; 0x08
    21aa:	99 85       	ldd	r25, Y+9	; 0x09
    21ac:	89 2b       	or	r24, r25
    21ae:	69 f0       	breq	.+26     	; 0x21ca <xStreamBufferSendFromISR+0x70>
    21b0:	88 85       	ldd	r24, Y+8	; 0x08
    21b2:	99 85       	ldd	r25, Y+9	; 0x09
    21b4:	e1 2c       	mov	r14, r1
    21b6:	f1 2c       	mov	r15, r1
    21b8:	00 e0       	ldi	r16, 0x00	; 0
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	0e 94 ad 1c 	call	0x395a	; 0x395a <xTaskGenericNotifyFromISR>
    21c6:	19 86       	std	Y+9, r1	; 0x09
    21c8:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    21ca:	c5 01       	movw	r24, r10
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	ff 90       	pop	r15
    21d6:	ef 90       	pop	r14
    21d8:	df 90       	pop	r13
    21da:	cf 90       	pop	r12
    21dc:	bf 90       	pop	r11
    21de:	af 90       	pop	r10
    21e0:	08 95       	ret

000021e2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    21e2:	4f 92       	push	r4
    21e4:	5f 92       	push	r5
    21e6:	6f 92       	push	r6
    21e8:	7f 92       	push	r7
    21ea:	8f 92       	push	r8
    21ec:	9f 92       	push	r9
    21ee:	af 92       	push	r10
    21f0:	bf 92       	push	r11
    21f2:	cf 92       	push	r12
    21f4:	df 92       	push	r13
    21f6:	ef 92       	push	r14
    21f8:	ff 92       	push	r15
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
    2204:	2b 01       	movw	r4, r22
    2206:	3a 01       	movw	r6, r20
    2208:	58 01       	movw	r10, r16
    220a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    220c:	8e 85       	ldd	r24, Y+14	; 0x0e
    220e:	80 ff       	sbrs	r24, 0
    2210:	05 c0       	rjmp	.+10     	; 0x221c <__stack+0x1d>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2212:	68 94       	set
    2214:	88 24       	eor	r8, r8
    2216:	81 f8       	bld	r8, 1
    2218:	91 2c       	mov	r9, r1
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x21>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    221c:	81 2c       	mov	r8, r1
    221e:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2220:	a1 14       	cp	r10, r1
    2222:	b1 04       	cpc	r11, r1
    2224:	c1 04       	cpc	r12, r1
    2226:	d1 04       	cpc	r13, r1
    2228:	41 f1       	breq	.+80     	; 0x227a <__stack+0x7b>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2230:	ce 01       	movw	r24, r28
    2232:	ee dd       	rcall	.-1060   	; 0x1e10 <prvBytesInBuffer>
    2234:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2236:	88 16       	cp	r8, r24
    2238:	99 06       	cpc	r9, r25
    223a:	48 f0       	brcs	.+18     	; 0x224e <__stack+0x4f>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2246:	0e 94 76 19 	call	0x32ec	; 0x32ec <xTaskGetCurrentTaskHandle>
    224a:	99 87       	std	Y+9, r25	; 0x09
    224c:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2252:	8e 14       	cp	r8, r14
    2254:	9f 04       	cpc	r9, r15
    2256:	a0 f0       	brcs	.+40     	; 0x2280 <__stack+0x81>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2258:	e1 2c       	mov	r14, r1
    225a:	f1 2c       	mov	r15, r1
    225c:	00 e0       	ldi	r16, 0x00	; 0
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	98 01       	movw	r18, r16
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	ba 01       	movw	r22, r20
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	0e 94 0e 1b 	call	0x361c	; 0x361c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    226e:	19 86       	std	Y+9, r1	; 0x09
    2270:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2272:	ce 01       	movw	r24, r28
    2274:	cd dd       	rcall	.-1126   	; 0x1e10 <prvBytesInBuffer>
    2276:	7c 01       	movw	r14, r24
    2278:	03 c0       	rjmp	.+6      	; 0x2280 <__stack+0x81>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    227a:	ce 01       	movw	r24, r28
    227c:	c9 dd       	rcall	.-1134   	; 0x1e10 <prvBytesInBuffer>
    227e:	7c 01       	movw	r14, r24
    2280:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2282:	9f 04       	cpc	r9, r15
    2284:	e8 f4       	brcc	.+58     	; 0x22c0 <__stack+0xc1>
    2286:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    2288:	97 01       	movw	r18, r14
    228a:	a3 01       	movw	r20, r6
    228c:	b2 01       	movw	r22, r4
    228e:	ce 01       	movw	r24, r28
    2290:	bd de       	rcall	.-646    	; 0x200c <prvReadMessageFromBuffer>
    2292:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2294:	89 2b       	or	r24, r25
    2296:	b1 f0       	breq	.+44     	; 0x22c4 <__stack+0xc5>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    2298:	c1 d2       	rcall	.+1410   	; 0x281c <vTaskSuspendAll>
    229a:	8a 85       	ldd	r24, Y+10	; 0x0a
    229c:	9b 85       	ldd	r25, Y+11	; 0x0b
    229e:	89 2b       	or	r24, r25
    22a0:	69 f0       	breq	.+26     	; 0x22bc <__stack+0xbd>
    22a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a6:	e1 2c       	mov	r14, r1
    22a8:	f1 2c       	mov	r15, r1
    22aa:	00 e0       	ldi	r16, 0x00	; 0
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	a9 01       	movw	r20, r18
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	0e 94 b6 1b 	call	0x376c	; 0x376c <xTaskGenericNotify>
    22b8:	1b 86       	std	Y+11, r1	; 0x0b
    22ba:	1a 86       	std	Y+10, r1	; 0x0a
    22bc:	ef d3       	rcall	.+2014   	; 0x2a9c <xTaskResumeAll>
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <__stack+0xc5>
    22c0:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    22c2:	d1 2c       	mov	r13, r1
    22c4:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	ff 90       	pop	r15
    22d0:	ef 90       	pop	r14
    22d2:	df 90       	pop	r13
    22d4:	cf 90       	pop	r12
    22d6:	bf 90       	pop	r11
    22d8:	af 90       	pop	r10
    22da:	9f 90       	pop	r9
    22dc:	8f 90       	pop	r8
    22de:	7f 90       	pop	r7
    22e0:	6f 90       	pop	r6
    22e2:	5f 90       	pop	r5
    22e4:	4f 90       	pop	r4
    22e6:	08 95       	ret

000022e8 <prvResetNextTaskUnblockTime>:
    22e8:	e0 91 bb 13 	lds	r30, 0x13BB	; 0x8013bb <pxDelayedTaskList>
    22ec:	f0 91 bc 13 	lds	r31, 0x13BC	; 0x8013bc <pxDelayedTaskList+0x1>
    22f0:	80 81       	ld	r24, Z
    22f2:	81 11       	cpse	r24, r1
    22f4:	0c c0       	rjmp	.+24     	; 0x230e <prvResetNextTaskUnblockTime+0x26>
    22f6:	8f ef       	ldi	r24, 0xFF	; 255
    22f8:	9f ef       	ldi	r25, 0xFF	; 255
    22fa:	dc 01       	movw	r26, r24
    22fc:	80 93 85 13 	sts	0x1385, r24	; 0x801385 <xNextTaskUnblockTime>
    2300:	90 93 86 13 	sts	0x1386, r25	; 0x801386 <xNextTaskUnblockTime+0x1>
    2304:	a0 93 87 13 	sts	0x1387, r26	; 0x801387 <xNextTaskUnblockTime+0x2>
    2308:	b0 93 88 13 	sts	0x1388, r27	; 0x801388 <xNextTaskUnblockTime+0x3>
    230c:	08 95       	ret
    230e:	e0 91 bb 13 	lds	r30, 0x13BB	; 0x8013bb <pxDelayedTaskList>
    2312:	f0 91 bc 13 	lds	r31, 0x13BC	; 0x8013bc <pxDelayedTaskList+0x1>
    2316:	07 80       	ldd	r0, Z+7	; 0x07
    2318:	f0 85       	ldd	r31, Z+8	; 0x08
    231a:	e0 2d       	mov	r30, r0
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	a2 81       	ldd	r26, Z+2	; 0x02
    2322:	b3 81       	ldd	r27, Z+3	; 0x03
    2324:	80 93 85 13 	sts	0x1385, r24	; 0x801385 <xNextTaskUnblockTime>
    2328:	90 93 86 13 	sts	0x1386, r25	; 0x801386 <xNextTaskUnblockTime+0x1>
    232c:	a0 93 87 13 	sts	0x1387, r26	; 0x801387 <xNextTaskUnblockTime+0x2>
    2330:	b0 93 88 13 	sts	0x1388, r27	; 0x801388 <xNextTaskUnblockTime+0x3>
    2334:	08 95       	ret

00002336 <prvDeleteTCB>:
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	ec 01       	movw	r28, r24
    233c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2340:	0e 94 9e 09 	call	0x133c	; 0x133c <vPortFree>
    2344:	ce 01       	movw	r24, r28
    2346:	0e 94 9e 09 	call	0x133c	; 0x133c <vPortFree>
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	08 95       	ret

00002350 <prvInitialiseNewTask>:
    2350:	4f 92       	push	r4
    2352:	5f 92       	push	r5
    2354:	6f 92       	push	r6
    2356:	7f 92       	push	r7
    2358:	8f 92       	push	r8
    235a:	9f 92       	push	r9
    235c:	af 92       	push	r10
    235e:	bf 92       	push	r11
    2360:	cf 92       	push	r12
    2362:	df 92       	push	r13
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	2c 01       	movw	r4, r24
    2370:	5b 01       	movw	r10, r22
    2372:	4a 01       	movw	r8, r20
    2374:	39 01       	movw	r6, r18
    2376:	e6 01       	movw	r28, r12
    2378:	65 ea       	ldi	r22, 0xA5	; 165
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2380:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <memset>
    2384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2388:	21 e0       	ldi	r18, 0x01	; 1
    238a:	82 1a       	sub	r8, r18
    238c:	91 08       	sbc	r9, r1
    238e:	88 0e       	add	r8, r24
    2390:	99 1e       	adc	r9, r25
    2392:	a1 14       	cp	r10, r1
    2394:	b1 04       	cpc	r11, r1
    2396:	89 f4       	brne	.+34     	; 0x23ba <prvInitialiseNewTask+0x6a>
    2398:	15 c0       	rjmp	.+42     	; 0x23c4 <prvInitialiseNewTask+0x74>
    239a:	82 2f       	mov	r24, r18
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	f5 01       	movw	r30, r10
    23a0:	e8 0f       	add	r30, r24
    23a2:	f9 1f       	adc	r31, r25
    23a4:	30 81       	ld	r19, Z
    23a6:	de 01       	movw	r26, r28
    23a8:	a8 0f       	add	r26, r24
    23aa:	b9 1f       	adc	r27, r25
    23ac:	5d 96       	adiw	r26, 0x1d	; 29
    23ae:	3c 93       	st	X, r19
    23b0:	80 81       	ld	r24, Z
    23b2:	88 23       	and	r24, r24
    23b4:	29 f0       	breq	.+10     	; 0x23c0 <prvInitialiseNewTask+0x70>
    23b6:	2f 5f       	subi	r18, 0xFF	; 255
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <prvInitialiseNewTask+0x6c>
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	20 31       	cpi	r18, 0x10	; 16
    23be:	68 f3       	brcs	.-38     	; 0x239a <prvInitialiseNewTask+0x4a>
    23c0:	1c a6       	std	Y+44, r1	; 0x2c
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <prvInitialiseNewTask+0x76>
    23c4:	1d 8e       	std	Y+29, r1	; 0x1d
    23c6:	0a 30       	cpi	r16, 0x0A	; 10
    23c8:	08 f0       	brcs	.+2      	; 0x23cc <prvInitialiseNewTask+0x7c>
    23ca:	09 e0       	ldi	r16, 0x09	; 9
    23cc:	0a 8f       	std	Y+26, r16	; 0x1a
    23ce:	0d a7       	std	Y+45, r16	; 0x2d
    23d0:	1e a6       	std	Y+46, r1	; 0x2e
    23d2:	ce 01       	movw	r24, r28
    23d4:	02 96       	adiw	r24, 0x02	; 2
    23d6:	00 d8       	rcall	.-4096   	; 0x13d8 <vListInitialiseItem>
    23d8:	ce 01       	movw	r24, r28
    23da:	0e 96       	adiw	r24, 0x0e	; 14
    23dc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <vListInitialiseItem>
    23e0:	db 87       	std	Y+11, r29	; 0x0b
    23e2:	ca 87       	std	Y+10, r28	; 0x0a
    23e4:	8a e0       	ldi	r24, 0x0A	; 10
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	a0 e0       	ldi	r26, 0x00	; 0
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	80 1b       	sub	r24, r16
    23ee:	91 09       	sbc	r25, r1
    23f0:	a1 09       	sbc	r26, r1
    23f2:	b1 09       	sbc	r27, r1
    23f4:	8e 87       	std	Y+14, r24	; 0x0e
    23f6:	9f 87       	std	Y+15, r25	; 0x0f
    23f8:	a8 8b       	std	Y+16, r26	; 0x10
    23fa:	b9 8b       	std	Y+17, r27	; 0x11
    23fc:	df 8b       	std	Y+23, r29	; 0x17
    23fe:	ce 8b       	std	Y+22, r28	; 0x16
    2400:	84 e0       	ldi	r24, 0x04	; 4
    2402:	fe 01       	movw	r30, r28
    2404:	bf 96       	adiw	r30, 0x2f	; 47
    2406:	df 01       	movw	r26, r30
    2408:	1d 92       	st	X+, r1
    240a:	8a 95       	dec	r24
    240c:	e9 f7       	brne	.-6      	; 0x2408 <prvInitialiseNewTask+0xb8>
    240e:	1b aa       	std	Y+51, r1	; 0x33
    2410:	a3 01       	movw	r20, r6
    2412:	b2 01       	movw	r22, r4
    2414:	c4 01       	movw	r24, r8
    2416:	54 d8       	rcall	.-3928   	; 0x14c0 <pxPortInitialiseStack>
    2418:	99 83       	std	Y+1, r25	; 0x01
    241a:	88 83       	st	Y, r24
    241c:	e1 14       	cp	r14, r1
    241e:	f1 04       	cpc	r15, r1
    2420:	19 f0       	breq	.+6      	; 0x2428 <prvInitialiseNewTask+0xd8>
    2422:	f7 01       	movw	r30, r14
    2424:	d1 83       	std	Z+1, r29	; 0x01
    2426:	c0 83       	st	Z, r28
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	bf 90       	pop	r11
    2438:	af 90       	pop	r10
    243a:	9f 90       	pop	r9
    243c:	8f 90       	pop	r8
    243e:	7f 90       	pop	r7
    2440:	6f 90       	pop	r6
    2442:	5f 90       	pop	r5
    2444:	4f 90       	pop	r4
    2446:	08 95       	ret

00002448 <prvInitialiseTaskLists>:
    2448:	cf 93       	push	r28
    244a:	c0 e0       	ldi	r28, 0x00	; 0
    244c:	09 c0       	rjmp	.+18     	; 0x2460 <prvInitialiseTaskLists+0x18>
    244e:	2b e0       	ldi	r18, 0x0B	; 11
    2450:	c2 9f       	mul	r28, r18
    2452:	c0 01       	movw	r24, r0
    2454:	11 24       	eor	r1, r1
    2456:	8d 52       	subi	r24, 0x2D	; 45
    2458:	9c 4e       	sbci	r25, 0xEC	; 236
    245a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    245e:	cf 5f       	subi	r28, 0xFF	; 255
    2460:	ca 30       	cpi	r28, 0x0A	; 10
    2462:	a8 f3       	brcs	.-22     	; 0x244e <prvInitialiseTaskLists+0x6>
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	93 e1       	ldi	r25, 0x13	; 19
    2468:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    246c:	8d eb       	ldi	r24, 0xBD	; 189
    246e:	93 e1       	ldi	r25, 0x13	; 19
    2470:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    2474:	8e ea       	ldi	r24, 0xAE	; 174
    2476:	93 e1       	ldi	r25, 0x13	; 19
    2478:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    247c:	83 ea       	ldi	r24, 0xA3	; 163
    247e:	93 e1       	ldi	r25, 0x13	; 19
    2480:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    2484:	87 e9       	ldi	r24, 0x97	; 151
    2486:	93 e1       	ldi	r25, 0x13	; 19
    2488:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    248c:	88 ec       	ldi	r24, 0xC8	; 200
    248e:	93 e1       	ldi	r25, 0x13	; 19
    2490:	90 93 bc 13 	sts	0x13BC, r25	; 0x8013bc <pxDelayedTaskList+0x1>
    2494:	80 93 bb 13 	sts	0x13BB, r24	; 0x8013bb <pxDelayedTaskList>
    2498:	8d eb       	ldi	r24, 0xBD	; 189
    249a:	93 e1       	ldi	r25, 0x13	; 19
    249c:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <pxOverflowDelayedTaskList+0x1>
    24a0:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <pxOverflowDelayedTaskList>
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <prvAddNewTaskToReadyList>:
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	ec 01       	movw	r28, r24
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	0f 92       	push	r0
    24b4:	80 91 96 13 	lds	r24, 0x1396	; 0x801396 <uxCurrentNumberOfTasks>
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <uxCurrentNumberOfTasks>
    24be:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    24c2:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    24c6:	89 2b       	or	r24, r25
    24c8:	51 f4       	brne	.+20     	; 0x24de <prvAddNewTaskToReadyList+0x36>
    24ca:	d0 93 42 14 	sts	0x1442, r29	; 0x801442 <pxCurrentTCB+0x1>
    24ce:	c0 93 41 14 	sts	0x1441, r28	; 0x801441 <pxCurrentTCB>
    24d2:	80 91 96 13 	lds	r24, 0x1396	; 0x801396 <uxCurrentNumberOfTasks>
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	91 f4       	brne	.+36     	; 0x24fe <prvAddNewTaskToReadyList+0x56>
    24da:	b6 df       	rcall	.-148    	; 0x2448 <prvInitialiseTaskLists>
    24dc:	10 c0       	rjmp	.+32     	; 0x24fe <prvAddNewTaskToReadyList+0x56>
    24de:	80 91 90 13 	lds	r24, 0x1390	; 0x801390 <xSchedulerRunning>
    24e2:	81 11       	cpse	r24, r1
    24e4:	0c c0       	rjmp	.+24     	; 0x24fe <prvAddNewTaskToReadyList+0x56>
    24e6:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    24ea:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    24ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    24f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24f2:	89 17       	cp	r24, r25
    24f4:	20 f0       	brcs	.+8      	; 0x24fe <prvAddNewTaskToReadyList+0x56>
    24f6:	d0 93 42 14 	sts	0x1442, r29	; 0x801442 <pxCurrentTCB+0x1>
    24fa:	c0 93 41 14 	sts	0x1441, r28	; 0x801441 <pxCurrentTCB>
    24fe:	80 91 89 13 	lds	r24, 0x1389	; 0x801389 <uxTaskNumber>
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	80 93 89 13 	sts	0x1389, r24	; 0x801389 <uxTaskNumber>
    2508:	ea 8d       	ldd	r30, Y+26	; 0x1a
    250a:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    250e:	8e 17       	cp	r24, r30
    2510:	10 f4       	brcc	.+4      	; 0x2516 <prvAddNewTaskToReadyList+0x6e>
    2512:	e0 93 91 13 	sts	0x1391, r30	; 0x801391 <uxTopReadyPriority>
    2516:	8b e0       	ldi	r24, 0x0B	; 11
    2518:	8e 9f       	mul	r24, r30
    251a:	f0 01       	movw	r30, r0
    251c:	11 24       	eor	r1, r1
    251e:	ed 52       	subi	r30, 0x2D	; 45
    2520:	fc 4e       	sbci	r31, 0xEC	; 236
    2522:	01 80       	ldd	r0, Z+1	; 0x01
    2524:	f2 81       	ldd	r31, Z+2	; 0x02
    2526:	e0 2d       	mov	r30, r0
    2528:	ff 83       	std	Y+7, r31	; 0x07
    252a:	ee 83       	std	Y+6, r30	; 0x06
    252c:	26 81       	ldd	r18, Z+6	; 0x06
    252e:	37 81       	ldd	r19, Z+7	; 0x07
    2530:	39 87       	std	Y+9, r19	; 0x09
    2532:	28 87       	std	Y+8, r18	; 0x08
    2534:	a6 81       	ldd	r26, Z+6	; 0x06
    2536:	b7 81       	ldd	r27, Z+7	; 0x07
    2538:	9e 01       	movw	r18, r28
    253a:	2e 5f       	subi	r18, 0xFE	; 254
    253c:	3f 4f       	sbci	r19, 0xFF	; 255
    253e:	15 96       	adiw	r26, 0x05	; 5
    2540:	3c 93       	st	X, r19
    2542:	2e 93       	st	-X, r18
    2544:	14 97       	sbiw	r26, 0x04	; 4
    2546:	37 83       	std	Z+7, r19	; 0x07
    2548:	26 83       	std	Z+6, r18	; 0x06
    254a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    254c:	8e 9f       	mul	r24, r30
    254e:	f0 01       	movw	r30, r0
    2550:	11 24       	eor	r1, r1
    2552:	ed 52       	subi	r30, 0x2D	; 45
    2554:	fc 4e       	sbci	r31, 0xEC	; 236
    2556:	fd 87       	std	Y+13, r31	; 0x0d
    2558:	ec 87       	std	Y+12, r30	; 0x0c
    255a:	80 81       	ld	r24, Z
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	80 83       	st	Z, r24
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	80 91 90 13 	lds	r24, 0x1390	; 0x801390 <xSchedulerRunning>
    2568:	88 23       	and	r24, r24
    256a:	51 f0       	breq	.+20     	; 0x2580 <prvAddNewTaskToReadyList+0xd8>
    256c:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    2570:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2574:	92 8d       	ldd	r25, Z+26	; 0x1a
    2576:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2578:	98 17       	cp	r25, r24
    257a:	10 f4       	brcc	.+4      	; 0x2580 <prvAddNewTaskToReadyList+0xd8>
    257c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	08 95       	ret

00002586 <prvCheckTasksWaitingTermination>:
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	1b c0       	rjmp	.+54     	; 0x25c2 <prvCheckTasksWaitingTermination+0x3c>
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	0f 92       	push	r0
    2592:	e0 91 aa 13 	lds	r30, 0x13AA	; 0x8013aa <xTasksWaitingTermination+0x7>
    2596:	f0 91 ab 13 	lds	r31, 0x13AB	; 0x8013ab <xTasksWaitingTermination+0x8>
    259a:	c0 85       	ldd	r28, Z+8	; 0x08
    259c:	d1 85       	ldd	r29, Z+9	; 0x09
    259e:	ce 01       	movw	r24, r28
    25a0:	02 96       	adiw	r24, 0x02	; 2
    25a2:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
    25a6:	80 91 96 13 	lds	r24, 0x1396	; 0x801396 <uxCurrentNumberOfTasks>
    25aa:	81 50       	subi	r24, 0x01	; 1
    25ac:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <uxCurrentNumberOfTasks>
    25b0:	80 91 a2 13 	lds	r24, 0x13A2	; 0x8013a2 <uxDeletedTasksWaitingCleanUp>
    25b4:	81 50       	subi	r24, 0x01	; 1
    25b6:	80 93 a2 13 	sts	0x13A2, r24	; 0x8013a2 <uxDeletedTasksWaitingCleanUp>
    25ba:	0f 90       	pop	r0
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	ce 01       	movw	r24, r28
    25c0:	ba de       	rcall	.-652    	; 0x2336 <prvDeleteTCB>
    25c2:	80 91 a2 13 	lds	r24, 0x13A2	; 0x8013a2 <uxDeletedTasksWaitingCleanUp>
    25c6:	81 11       	cpse	r24, r1
    25c8:	e1 cf       	rjmp	.-62     	; 0x258c <prvCheckTasksWaitingTermination+0x6>
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	08 95       	ret

000025d0 <prvAddCurrentTaskToDelayedList>:
    25d0:	8f 92       	push	r8
    25d2:	9f 92       	push	r9
    25d4:	af 92       	push	r10
    25d6:	bf 92       	push	r11
    25d8:	cf 92       	push	r12
    25da:	df 92       	push	r13
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	6b 01       	movw	r12, r22
    25e6:	7c 01       	movw	r14, r24
    25e8:	c4 2f       	mov	r28, r20
    25ea:	80 90 92 13 	lds	r8, 0x1392	; 0x801392 <xTickCount>
    25ee:	90 90 93 13 	lds	r9, 0x1393	; 0x801393 <xTickCount+0x1>
    25f2:	a0 90 94 13 	lds	r10, 0x1394	; 0x801394 <xTickCount+0x2>
    25f6:	b0 90 95 13 	lds	r11, 0x1395	; 0x801395 <xTickCount+0x3>
    25fa:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    25fe:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2602:	02 96       	adiw	r24, 0x02	; 2
    2604:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	c8 16       	cp	r12, r24
    260c:	d8 06       	cpc	r13, r24
    260e:	e8 06       	cpc	r14, r24
    2610:	f8 06       	cpc	r15, r24
    2612:	b1 f5       	brne	.+108    	; 0x2680 <prvAddCurrentTaskToDelayedList+0xb0>
    2614:	cc 23       	and	r28, r28
    2616:	a1 f1       	breq	.+104    	; 0x2680 <prvAddCurrentTaskToDelayedList+0xb0>
    2618:	e7 e9       	ldi	r30, 0x97	; 151
    261a:	f3 e1       	ldi	r31, 0x13	; 19
    261c:	a1 81       	ldd	r26, Z+1	; 0x01
    261e:	b2 81       	ldd	r27, Z+2	; 0x02
    2620:	c0 91 41 14 	lds	r28, 0x1441	; 0x801441 <pxCurrentTCB>
    2624:	d0 91 42 14 	lds	r29, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2628:	bf 83       	std	Y+7, r27	; 0x07
    262a:	ae 83       	std	Y+6, r26	; 0x06
    262c:	c0 91 41 14 	lds	r28, 0x1441	; 0x801441 <pxCurrentTCB>
    2630:	d0 91 42 14 	lds	r29, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2634:	16 96       	adiw	r26, 0x06	; 6
    2636:	8d 91       	ld	r24, X+
    2638:	9c 91       	ld	r25, X
    263a:	17 97       	sbiw	r26, 0x07	; 7
    263c:	99 87       	std	Y+9, r25	; 0x09
    263e:	88 87       	std	Y+8, r24	; 0x08
    2640:	16 96       	adiw	r26, 0x06	; 6
    2642:	cd 91       	ld	r28, X+
    2644:	dc 91       	ld	r29, X
    2646:	17 97       	sbiw	r26, 0x07	; 7
    2648:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    264c:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2650:	02 96       	adiw	r24, 0x02	; 2
    2652:	9d 83       	std	Y+5, r25	; 0x05
    2654:	8c 83       	std	Y+4, r24	; 0x04
    2656:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    265a:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    265e:	02 96       	adiw	r24, 0x02	; 2
    2660:	17 96       	adiw	r26, 0x07	; 7
    2662:	9c 93       	st	X, r25
    2664:	8e 93       	st	-X, r24
    2666:	16 97       	sbiw	r26, 0x06	; 6
    2668:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    266c:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2670:	1d 96       	adiw	r26, 0x0d	; 13
    2672:	fc 93       	st	X, r31
    2674:	ee 93       	st	-X, r30
    2676:	1c 97       	sbiw	r26, 0x0c	; 12
    2678:	80 81       	ld	r24, Z
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	80 83       	st	Z, r24
    267e:	3f c0       	rjmp	.+126    	; 0x26fe <prvAddCurrentTaskToDelayedList+0x12e>
    2680:	c8 0c       	add	r12, r8
    2682:	d9 1c       	adc	r13, r9
    2684:	ea 1c       	adc	r14, r10
    2686:	fb 1c       	adc	r15, r11
    2688:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    268c:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2690:	c2 82       	std	Z+2, r12	; 0x02
    2692:	d3 82       	std	Z+3, r13	; 0x03
    2694:	e4 82       	std	Z+4, r14	; 0x04
    2696:	f5 82       	std	Z+5, r15	; 0x05
    2698:	c8 14       	cp	r12, r8
    269a:	d9 04       	cpc	r13, r9
    269c:	ea 04       	cpc	r14, r10
    269e:	fb 04       	cpc	r15, r11
    26a0:	68 f4       	brcc	.+26     	; 0x26bc <prvAddCurrentTaskToDelayedList+0xec>
    26a2:	60 91 41 14 	lds	r22, 0x1441	; 0x801441 <pxCurrentTCB>
    26a6:	70 91 42 14 	lds	r23, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    26aa:	80 91 b9 13 	lds	r24, 0x13B9	; 0x8013b9 <pxOverflowDelayedTaskList>
    26ae:	90 91 ba 13 	lds	r25, 0x13BA	; 0x8013ba <pxOverflowDelayedTaskList+0x1>
    26b2:	6e 5f       	subi	r22, 0xFE	; 254
    26b4:	7f 4f       	sbci	r23, 0xFF	; 255
    26b6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vListInsert>
    26ba:	21 c0       	rjmp	.+66     	; 0x26fe <prvAddCurrentTaskToDelayedList+0x12e>
    26bc:	60 91 41 14 	lds	r22, 0x1441	; 0x801441 <pxCurrentTCB>
    26c0:	70 91 42 14 	lds	r23, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    26c4:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <pxDelayedTaskList>
    26c8:	90 91 bc 13 	lds	r25, 0x13BC	; 0x8013bc <pxDelayedTaskList+0x1>
    26cc:	6e 5f       	subi	r22, 0xFE	; 254
    26ce:	7f 4f       	sbci	r23, 0xFF	; 255
    26d0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vListInsert>
    26d4:	80 91 85 13 	lds	r24, 0x1385	; 0x801385 <xNextTaskUnblockTime>
    26d8:	90 91 86 13 	lds	r25, 0x1386	; 0x801386 <xNextTaskUnblockTime+0x1>
    26dc:	a0 91 87 13 	lds	r26, 0x1387	; 0x801387 <xNextTaskUnblockTime+0x2>
    26e0:	b0 91 88 13 	lds	r27, 0x1388	; 0x801388 <xNextTaskUnblockTime+0x3>
    26e4:	c8 16       	cp	r12, r24
    26e6:	d9 06       	cpc	r13, r25
    26e8:	ea 06       	cpc	r14, r26
    26ea:	fb 06       	cpc	r15, r27
    26ec:	40 f4       	brcc	.+16     	; 0x26fe <prvAddCurrentTaskToDelayedList+0x12e>
    26ee:	c0 92 85 13 	sts	0x1385, r12	; 0x801385 <xNextTaskUnblockTime>
    26f2:	d0 92 86 13 	sts	0x1386, r13	; 0x801386 <xNextTaskUnblockTime+0x1>
    26f6:	e0 92 87 13 	sts	0x1387, r14	; 0x801387 <xNextTaskUnblockTime+0x2>
    26fa:	f0 92 88 13 	sts	0x1388, r15	; 0x801388 <xNextTaskUnblockTime+0x3>
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	af 90       	pop	r10
    270e:	9f 90       	pop	r9
    2710:	8f 90       	pop	r8
    2712:	08 95       	ret

00002714 <xTaskCreate>:
    2714:	2f 92       	push	r2
    2716:	3f 92       	push	r3
    2718:	4f 92       	push	r4
    271a:	5f 92       	push	r5
    271c:	6f 92       	push	r6
    271e:	7f 92       	push	r7
    2720:	8f 92       	push	r8
    2722:	9f 92       	push	r9
    2724:	af 92       	push	r10
    2726:	bf 92       	push	r11
    2728:	cf 92       	push	r12
    272a:	df 92       	push	r13
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	3c 01       	movw	r6, r24
    2738:	1b 01       	movw	r2, r22
    273a:	4a 01       	movw	r8, r20
    273c:	29 01       	movw	r4, r18
    273e:	ca 01       	movw	r24, r20
    2740:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pvPortMalloc>
    2744:	6c 01       	movw	r12, r24
    2746:	89 2b       	or	r24, r25
    2748:	71 f0       	breq	.+28     	; 0x2766 <xTaskCreate+0x52>
    274a:	84 e3       	ldi	r24, 0x34	; 52
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pvPortMalloc>
    2752:	ec 01       	movw	r28, r24
    2754:	89 2b       	or	r24, r25
    2756:	19 f0       	breq	.+6      	; 0x275e <xTaskCreate+0x4a>
    2758:	dc 8e       	std	Y+28, r13	; 0x1c
    275a:	cb 8e       	std	Y+27, r12	; 0x1b
    275c:	06 c0       	rjmp	.+12     	; 0x276a <xTaskCreate+0x56>
    275e:	c6 01       	movw	r24, r12
    2760:	0e 94 9e 09 	call	0x133c	; 0x133c <vPortFree>
    2764:	02 c0       	rjmp	.+4      	; 0x276a <xTaskCreate+0x56>
    2766:	c0 e0       	ldi	r28, 0x00	; 0
    2768:	d0 e0       	ldi	r29, 0x00	; 0
    276a:	20 97       	sbiw	r28, 0x00	; 0
    276c:	61 f0       	breq	.+24     	; 0x2786 <xTaskCreate+0x72>
    276e:	a1 2c       	mov	r10, r1
    2770:	b1 2c       	mov	r11, r1
    2772:	6e 01       	movw	r12, r28
    2774:	92 01       	movw	r18, r4
    2776:	a4 01       	movw	r20, r8
    2778:	b1 01       	movw	r22, r2
    277a:	c3 01       	movw	r24, r6
    277c:	e9 dd       	rcall	.-1070   	; 0x2350 <prvInitialiseNewTask>
    277e:	ce 01       	movw	r24, r28
    2780:	93 de       	rcall	.-730    	; 0x24a8 <prvAddNewTaskToReadyList>
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <xTaskCreate+0x74>
    2786:	8f ef       	ldi	r24, 0xFF	; 255
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	ef 90       	pop	r14
    2792:	df 90       	pop	r13
    2794:	cf 90       	pop	r12
    2796:	bf 90       	pop	r11
    2798:	af 90       	pop	r10
    279a:	9f 90       	pop	r9
    279c:	8f 90       	pop	r8
    279e:	7f 90       	pop	r7
    27a0:	6f 90       	pop	r6
    27a2:	5f 90       	pop	r5
    27a4:	4f 90       	pop	r4
    27a6:	3f 90       	pop	r3
    27a8:	2f 90       	pop	r2
    27aa:	08 95       	ret

000027ac <vTaskStartScheduler>:
    27ac:	ef 92       	push	r14
    27ae:	ff 92       	push	r15
    27b0:	0f 93       	push	r16
    27b2:	0f 2e       	mov	r0, r31
    27b4:	f3 e8       	ldi	r31, 0x83	; 131
    27b6:	ef 2e       	mov	r14, r31
    27b8:	f3 e1       	ldi	r31, 0x13	; 19
    27ba:	ff 2e       	mov	r15, r31
    27bc:	f0 2d       	mov	r31, r0
    27be:	00 e0       	ldi	r16, 0x00	; 0
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 ec       	ldi	r20, 0xC0	; 192
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	60 eb       	ldi	r22, 0xB0	; 176
    27ca:	74 e0       	ldi	r23, 0x04	; 4
    27cc:	8e e4       	ldi	r24, 0x4E	; 78
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	a1 df       	rcall	.-190    	; 0x2714 <xTaskCreate>
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	11 f4       	brne	.+4      	; 0x27da <vTaskStartScheduler+0x2e>
    27d6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <xTimerCreateTimerTask>
    27da:	81 30       	cpi	r24, 0x01	; 1
    27dc:	c9 f4       	brne	.+50     	; 0x2810 <vTaskStartScheduler+0x64>
    27de:	f8 94       	cli
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	9f ef       	ldi	r25, 0xFF	; 255
    27e4:	dc 01       	movw	r26, r24
    27e6:	80 93 85 13 	sts	0x1385, r24	; 0x801385 <xNextTaskUnblockTime>
    27ea:	90 93 86 13 	sts	0x1386, r25	; 0x801386 <xNextTaskUnblockTime+0x1>
    27ee:	a0 93 87 13 	sts	0x1387, r26	; 0x801387 <xNextTaskUnblockTime+0x2>
    27f2:	b0 93 88 13 	sts	0x1388, r27	; 0x801388 <xNextTaskUnblockTime+0x3>
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	80 93 90 13 	sts	0x1390, r24	; 0x801390 <xSchedulerRunning>
    27fc:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <xTickCount>
    2800:	10 92 93 13 	sts	0x1393, r1	; 0x801393 <xTickCount+0x1>
    2804:	10 92 94 13 	sts	0x1394, r1	; 0x801394 <xTickCount+0x2>
    2808:	10 92 95 13 	sts	0x1395, r1	; 0x801395 <xTickCount+0x3>
    280c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <xPortStartScheduler>
    2810:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2814:	0f 91       	pop	r16
    2816:	ff 90       	pop	r15
    2818:	ef 90       	pop	r14
    281a:	08 95       	ret

0000281c <vTaskSuspendAll>:
    281c:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <uxSchedulerSuspended>
    2820:	8f 5f       	subi	r24, 0xFF	; 255
    2822:	80 93 82 13 	sts	0x1382, r24	; 0x801382 <uxSchedulerSuspended>
    2826:	08 95       	ret

00002828 <xTaskGetTickCount>:
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	0f 92       	push	r0
    282e:	60 91 92 13 	lds	r22, 0x1392	; 0x801392 <xTickCount>
    2832:	70 91 93 13 	lds	r23, 0x1393	; 0x801393 <xTickCount+0x1>
    2836:	80 91 94 13 	lds	r24, 0x1394	; 0x801394 <xTickCount+0x2>
    283a:	90 91 95 13 	lds	r25, 0x1395	; 0x801395 <xTickCount+0x3>
    283e:	0f 90       	pop	r0
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	08 95       	ret

00002844 <xTaskIncrementTick>:
    2844:	cf 92       	push	r12
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <uxSchedulerSuspended>
    2854:	81 11       	cpse	r24, r1
    2856:	05 c1       	rjmp	.+522    	; 0x2a62 <xTaskIncrementTick+0x21e>
    2858:	c0 90 92 13 	lds	r12, 0x1392	; 0x801392 <xTickCount>
    285c:	d0 90 93 13 	lds	r13, 0x1393	; 0x801393 <xTickCount+0x1>
    2860:	e0 90 94 13 	lds	r14, 0x1394	; 0x801394 <xTickCount+0x2>
    2864:	f0 90 95 13 	lds	r15, 0x1395	; 0x801395 <xTickCount+0x3>
    2868:	8f ef       	ldi	r24, 0xFF	; 255
    286a:	c8 1a       	sub	r12, r24
    286c:	d8 0a       	sbc	r13, r24
    286e:	e8 0a       	sbc	r14, r24
    2870:	f8 0a       	sbc	r15, r24
    2872:	c0 92 92 13 	sts	0x1392, r12	; 0x801392 <xTickCount>
    2876:	d0 92 93 13 	sts	0x1393, r13	; 0x801393 <xTickCount+0x1>
    287a:	e0 92 94 13 	sts	0x1394, r14	; 0x801394 <xTickCount+0x2>
    287e:	f0 92 95 13 	sts	0x1395, r15	; 0x801395 <xTickCount+0x3>
    2882:	c1 14       	cp	r12, r1
    2884:	d1 04       	cpc	r13, r1
    2886:	e1 04       	cpc	r14, r1
    2888:	f1 04       	cpc	r15, r1
    288a:	b1 f4       	brne	.+44     	; 0x28b8 <xTaskIncrementTick+0x74>
    288c:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <pxDelayedTaskList>
    2890:	90 91 bc 13 	lds	r25, 0x13BC	; 0x8013bc <pxDelayedTaskList+0x1>
    2894:	20 91 b9 13 	lds	r18, 0x13B9	; 0x8013b9 <pxOverflowDelayedTaskList>
    2898:	30 91 ba 13 	lds	r19, 0x13BA	; 0x8013ba <pxOverflowDelayedTaskList+0x1>
    289c:	30 93 bc 13 	sts	0x13BC, r19	; 0x8013bc <pxDelayedTaskList+0x1>
    28a0:	20 93 bb 13 	sts	0x13BB, r18	; 0x8013bb <pxDelayedTaskList>
    28a4:	90 93 ba 13 	sts	0x13BA, r25	; 0x8013ba <pxOverflowDelayedTaskList+0x1>
    28a8:	80 93 b9 13 	sts	0x13B9, r24	; 0x8013b9 <pxOverflowDelayedTaskList>
    28ac:	80 91 8a 13 	lds	r24, 0x138A	; 0x80138a <xNumOfOverflows>
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	80 93 8a 13 	sts	0x138A, r24	; 0x80138a <xNumOfOverflows>
    28b6:	18 dd       	rcall	.-1488   	; 0x22e8 <prvResetNextTaskUnblockTime>
    28b8:	80 91 85 13 	lds	r24, 0x1385	; 0x801385 <xNextTaskUnblockTime>
    28bc:	90 91 86 13 	lds	r25, 0x1386	; 0x801386 <xNextTaskUnblockTime+0x1>
    28c0:	a0 91 87 13 	lds	r26, 0x1387	; 0x801387 <xNextTaskUnblockTime+0x2>
    28c4:	b0 91 88 13 	lds	r27, 0x1388	; 0x801388 <xNextTaskUnblockTime+0x3>
    28c8:	c8 16       	cp	r12, r24
    28ca:	d9 06       	cpc	r13, r25
    28cc:	ea 06       	cpc	r14, r26
    28ce:	fb 06       	cpc	r15, r27
    28d0:	20 f4       	brcc	.+8      	; 0x28da <xTaskIncrementTick+0x96>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	b2 c0       	rjmp	.+356    	; 0x2a3a <xTaskIncrementTick+0x1f6>
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <xTaskIncrementTick+0x98>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	e0 91 bb 13 	lds	r30, 0x13BB	; 0x8013bb <pxDelayedTaskList>
    28e0:	f0 91 bc 13 	lds	r31, 0x13BC	; 0x8013bc <pxDelayedTaskList+0x1>
    28e4:	90 81       	ld	r25, Z
    28e6:	91 11       	cpse	r25, r1
    28e8:	0c c0       	rjmp	.+24     	; 0x2902 <xTaskIncrementTick+0xbe>
    28ea:	4f ef       	ldi	r20, 0xFF	; 255
    28ec:	5f ef       	ldi	r21, 0xFF	; 255
    28ee:	ba 01       	movw	r22, r20
    28f0:	40 93 85 13 	sts	0x1385, r20	; 0x801385 <xNextTaskUnblockTime>
    28f4:	50 93 86 13 	sts	0x1386, r21	; 0x801386 <xNextTaskUnblockTime+0x1>
    28f8:	60 93 87 13 	sts	0x1387, r22	; 0x801387 <xNextTaskUnblockTime+0x2>
    28fc:	70 93 88 13 	sts	0x1388, r23	; 0x801388 <xNextTaskUnblockTime+0x3>
    2900:	9c c0       	rjmp	.+312    	; 0x2a3a <xTaskIncrementTick+0x1f6>
    2902:	e0 91 bb 13 	lds	r30, 0x13BB	; 0x8013bb <pxDelayedTaskList>
    2906:	f0 91 bc 13 	lds	r31, 0x13BC	; 0x8013bc <pxDelayedTaskList+0x1>
    290a:	07 80       	ldd	r0, Z+7	; 0x07
    290c:	f0 85       	ldd	r31, Z+8	; 0x08
    290e:	e0 2d       	mov	r30, r0
    2910:	00 84       	ldd	r0, Z+8	; 0x08
    2912:	f1 85       	ldd	r31, Z+9	; 0x09
    2914:	e0 2d       	mov	r30, r0
    2916:	42 81       	ldd	r20, Z+2	; 0x02
    2918:	53 81       	ldd	r21, Z+3	; 0x03
    291a:	64 81       	ldd	r22, Z+4	; 0x04
    291c:	75 81       	ldd	r23, Z+5	; 0x05
    291e:	c4 16       	cp	r12, r20
    2920:	d5 06       	cpc	r13, r21
    2922:	e6 06       	cpc	r14, r22
    2924:	f7 06       	cpc	r15, r23
    2926:	48 f4       	brcc	.+18     	; 0x293a <xTaskIncrementTick+0xf6>
    2928:	40 93 85 13 	sts	0x1385, r20	; 0x801385 <xNextTaskUnblockTime>
    292c:	50 93 86 13 	sts	0x1386, r21	; 0x801386 <xNextTaskUnblockTime+0x1>
    2930:	60 93 87 13 	sts	0x1387, r22	; 0x801387 <xNextTaskUnblockTime+0x2>
    2934:	70 93 88 13 	sts	0x1388, r23	; 0x801388 <xNextTaskUnblockTime+0x3>
    2938:	80 c0       	rjmp	.+256    	; 0x2a3a <xTaskIncrementTick+0x1f6>
    293a:	a4 85       	ldd	r26, Z+12	; 0x0c
    293c:	b5 85       	ldd	r27, Z+13	; 0x0d
    293e:	c6 81       	ldd	r28, Z+6	; 0x06
    2940:	d7 81       	ldd	r29, Z+7	; 0x07
    2942:	20 85       	ldd	r18, Z+8	; 0x08
    2944:	31 85       	ldd	r19, Z+9	; 0x09
    2946:	3f 83       	std	Y+7, r19	; 0x07
    2948:	2e 83       	std	Y+6, r18	; 0x06
    294a:	c0 85       	ldd	r28, Z+8	; 0x08
    294c:	d1 85       	ldd	r29, Z+9	; 0x09
    294e:	26 81       	ldd	r18, Z+6	; 0x06
    2950:	37 81       	ldd	r19, Z+7	; 0x07
    2952:	3d 83       	std	Y+5, r19	; 0x05
    2954:	2c 83       	std	Y+4, r18	; 0x04
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	4d 91       	ld	r20, X+
    295a:	5c 91       	ld	r21, X
    295c:	12 97       	sbiw	r26, 0x02	; 2
    295e:	9f 01       	movw	r18, r30
    2960:	2e 5f       	subi	r18, 0xFE	; 254
    2962:	3f 4f       	sbci	r19, 0xFF	; 255
    2964:	42 17       	cp	r20, r18
    2966:	53 07       	cpc	r21, r19
    2968:	31 f4       	brne	.+12     	; 0x2976 <xTaskIncrementTick+0x132>
    296a:	40 85       	ldd	r20, Z+8	; 0x08
    296c:	51 85       	ldd	r21, Z+9	; 0x09
    296e:	12 96       	adiw	r26, 0x02	; 2
    2970:	5c 93       	st	X, r21
    2972:	4e 93       	st	-X, r20
    2974:	11 97       	sbiw	r26, 0x01	; 1
    2976:	15 86       	std	Z+13, r1	; 0x0d
    2978:	14 86       	std	Z+12, r1	; 0x0c
    297a:	9c 91       	ld	r25, X
    297c:	91 50       	subi	r25, 0x01	; 1
    297e:	9c 93       	st	X, r25
    2980:	a0 8d       	ldd	r26, Z+24	; 0x18
    2982:	b1 8d       	ldd	r27, Z+25	; 0x19
    2984:	10 97       	sbiw	r26, 0x00	; 0
    2986:	09 f1       	breq	.+66     	; 0x29ca <xTaskIncrementTick+0x186>
    2988:	c2 89       	ldd	r28, Z+18	; 0x12
    298a:	d3 89       	ldd	r29, Z+19	; 0x13
    298c:	44 89       	ldd	r20, Z+20	; 0x14
    298e:	55 89       	ldd	r21, Z+21	; 0x15
    2990:	5f 83       	std	Y+7, r21	; 0x07
    2992:	4e 83       	std	Y+6, r20	; 0x06
    2994:	c4 89       	ldd	r28, Z+20	; 0x14
    2996:	d5 89       	ldd	r29, Z+21	; 0x15
    2998:	42 89       	ldd	r20, Z+18	; 0x12
    299a:	53 89       	ldd	r21, Z+19	; 0x13
    299c:	5d 83       	std	Y+5, r21	; 0x05
    299e:	4c 83       	std	Y+4, r20	; 0x04
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	6d 91       	ld	r22, X+
    29a4:	7c 91       	ld	r23, X
    29a6:	12 97       	sbiw	r26, 0x02	; 2
    29a8:	af 01       	movw	r20, r30
    29aa:	42 5f       	subi	r20, 0xF2	; 242
    29ac:	5f 4f       	sbci	r21, 0xFF	; 255
    29ae:	64 17       	cp	r22, r20
    29b0:	75 07       	cpc	r23, r21
    29b2:	31 f4       	brne	.+12     	; 0x29c0 <xTaskIncrementTick+0x17c>
    29b4:	44 89       	ldd	r20, Z+20	; 0x14
    29b6:	55 89       	ldd	r21, Z+21	; 0x15
    29b8:	12 96       	adiw	r26, 0x02	; 2
    29ba:	5c 93       	st	X, r21
    29bc:	4e 93       	st	-X, r20
    29be:	11 97       	sbiw	r26, 0x01	; 1
    29c0:	11 8e       	std	Z+25, r1	; 0x19
    29c2:	10 8e       	std	Z+24, r1	; 0x18
    29c4:	9c 91       	ld	r25, X
    29c6:	91 50       	subi	r25, 0x01	; 1
    29c8:	9c 93       	st	X, r25
    29ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29cc:	90 91 91 13 	lds	r25, 0x1391	; 0x801391 <uxTopReadyPriority>
    29d0:	9a 17       	cp	r25, r26
    29d2:	10 f4       	brcc	.+4      	; 0x29d8 <xTaskIncrementTick+0x194>
    29d4:	a0 93 91 13 	sts	0x1391, r26	; 0x801391 <uxTopReadyPriority>
    29d8:	9b e0       	ldi	r25, 0x0B	; 11
    29da:	9a 9f       	mul	r25, r26
    29dc:	d0 01       	movw	r26, r0
    29de:	11 24       	eor	r1, r1
    29e0:	ad 52       	subi	r26, 0x2D	; 45
    29e2:	bc 4e       	sbci	r27, 0xEC	; 236
    29e4:	11 96       	adiw	r26, 0x01	; 1
    29e6:	0d 90       	ld	r0, X+
    29e8:	bc 91       	ld	r27, X
    29ea:	a0 2d       	mov	r26, r0
    29ec:	b7 83       	std	Z+7, r27	; 0x07
    29ee:	a6 83       	std	Z+6, r26	; 0x06
    29f0:	16 96       	adiw	r26, 0x06	; 6
    29f2:	4d 91       	ld	r20, X+
    29f4:	5c 91       	ld	r21, X
    29f6:	17 97       	sbiw	r26, 0x07	; 7
    29f8:	51 87       	std	Z+9, r21	; 0x09
    29fa:	40 87       	std	Z+8, r20	; 0x08
    29fc:	16 96       	adiw	r26, 0x06	; 6
    29fe:	cd 91       	ld	r28, X+
    2a00:	dc 91       	ld	r29, X
    2a02:	17 97       	sbiw	r26, 0x07	; 7
    2a04:	3d 83       	std	Y+5, r19	; 0x05
    2a06:	2c 83       	std	Y+4, r18	; 0x04
    2a08:	17 96       	adiw	r26, 0x07	; 7
    2a0a:	3c 93       	st	X, r19
    2a0c:	2e 93       	st	-X, r18
    2a0e:	16 97       	sbiw	r26, 0x06	; 6
    2a10:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a12:	9a 9f       	mul	r25, r26
    2a14:	d0 01       	movw	r26, r0
    2a16:	11 24       	eor	r1, r1
    2a18:	ad 52       	subi	r26, 0x2D	; 45
    2a1a:	bc 4e       	sbci	r27, 0xEC	; 236
    2a1c:	b5 87       	std	Z+13, r27	; 0x0d
    2a1e:	a4 87       	std	Z+12, r26	; 0x0c
    2a20:	9c 91       	ld	r25, X
    2a22:	9f 5f       	subi	r25, 0xFF	; 255
    2a24:	9c 93       	st	X, r25
    2a26:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a28:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    2a2c:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2a30:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a32:	29 17       	cp	r18, r25
    2a34:	08 f0       	brcs	.+2      	; 0x2a38 <xTaskIncrementTick+0x1f4>
    2a36:	4f cf       	rjmp	.-354    	; 0x28d6 <xTaskIncrementTick+0x92>
    2a38:	51 cf       	rjmp	.-350    	; 0x28dc <xTaskIncrementTick+0x98>
    2a3a:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    2a3e:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2a42:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2a44:	9b e0       	ldi	r25, 0x0B	; 11
    2a46:	e9 9f       	mul	r30, r25
    2a48:	f0 01       	movw	r30, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	ed 52       	subi	r30, 0x2D	; 45
    2a4e:	fc 4e       	sbci	r31, 0xEC	; 236
    2a50:	90 81       	ld	r25, Z
    2a52:	92 30       	cpi	r25, 0x02	; 2
    2a54:	08 f0       	brcs	.+2      	; 0x2a58 <xTaskIncrementTick+0x214>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 91 8b 13 	lds	r25, 0x138B	; 0x80138b <xYieldPending>
    2a5c:	91 11       	cpse	r25, r1
    2a5e:	16 c0       	rjmp	.+44     	; 0x2a8c <xTaskIncrementTick+0x248>
    2a60:	16 c0       	rjmp	.+44     	; 0x2a8e <xTaskIncrementTick+0x24a>
    2a62:	80 91 8c 13 	lds	r24, 0x138C	; 0x80138c <xPendedTicks>
    2a66:	90 91 8d 13 	lds	r25, 0x138D	; 0x80138d <xPendedTicks+0x1>
    2a6a:	a0 91 8e 13 	lds	r26, 0x138E	; 0x80138e <xPendedTicks+0x2>
    2a6e:	b0 91 8f 13 	lds	r27, 0x138F	; 0x80138f <xPendedTicks+0x3>
    2a72:	01 96       	adiw	r24, 0x01	; 1
    2a74:	a1 1d       	adc	r26, r1
    2a76:	b1 1d       	adc	r27, r1
    2a78:	80 93 8c 13 	sts	0x138C, r24	; 0x80138c <xPendedTicks>
    2a7c:	90 93 8d 13 	sts	0x138D, r25	; 0x80138d <xPendedTicks+0x1>
    2a80:	a0 93 8e 13 	sts	0x138E, r26	; 0x80138e <xPendedTicks+0x2>
    2a84:	b0 93 8f 13 	sts	0x138F, r27	; 0x80138f <xPendedTicks+0x3>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	01 c0       	rjmp	.+2      	; 0x2a8e <xTaskIncrementTick+0x24a>
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	08 95       	ret

00002a9c <xTaskResumeAll>:
    2a9c:	cf 92       	push	r12
    2a9e:	df 92       	push	r13
    2aa0:	ef 92       	push	r14
    2aa2:	ff 92       	push	r15
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	0f 92       	push	r0
    2aae:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <uxSchedulerSuspended>
    2ab2:	81 50       	subi	r24, 0x01	; 1
    2ab4:	80 93 82 13 	sts	0x1382, r24	; 0x801382 <uxSchedulerSuspended>
    2ab8:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <uxSchedulerSuspended>
    2abc:	81 11       	cpse	r24, r1
    2abe:	be c0       	rjmp	.+380    	; 0x2c3c <xTaskResumeAll+0x1a0>
    2ac0:	80 91 96 13 	lds	r24, 0x1396	; 0x801396 <uxCurrentNumberOfTasks>
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	88 c0       	rjmp	.+272    	; 0x2bd8 <xTaskResumeAll+0x13c>
    2ac8:	bc c0       	rjmp	.+376    	; 0x2c42 <xTaskResumeAll+0x1a6>
    2aca:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <xPendingReadyList+0x7>
    2ace:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <xPendingReadyList+0x8>
    2ad2:	00 84       	ldd	r0, Z+8	; 0x08
    2ad4:	f1 85       	ldd	r31, Z+9	; 0x09
    2ad6:	e0 2d       	mov	r30, r0
    2ad8:	a0 8d       	ldd	r26, Z+24	; 0x18
    2ada:	b1 8d       	ldd	r27, Z+25	; 0x19
    2adc:	c2 89       	ldd	r28, Z+18	; 0x12
    2ade:	d3 89       	ldd	r29, Z+19	; 0x13
    2ae0:	84 89       	ldd	r24, Z+20	; 0x14
    2ae2:	95 89       	ldd	r25, Z+21	; 0x15
    2ae4:	9f 83       	std	Y+7, r25	; 0x07
    2ae6:	8e 83       	std	Y+6, r24	; 0x06
    2ae8:	c4 89       	ldd	r28, Z+20	; 0x14
    2aea:	d5 89       	ldd	r29, Z+21	; 0x15
    2aec:	82 89       	ldd	r24, Z+18	; 0x12
    2aee:	93 89       	ldd	r25, Z+19	; 0x13
    2af0:	9d 83       	std	Y+5, r25	; 0x05
    2af2:	8c 83       	std	Y+4, r24	; 0x04
    2af4:	11 96       	adiw	r26, 0x01	; 1
    2af6:	2d 91       	ld	r18, X+
    2af8:	3c 91       	ld	r19, X
    2afa:	12 97       	sbiw	r26, 0x02	; 2
    2afc:	cf 01       	movw	r24, r30
    2afe:	0e 96       	adiw	r24, 0x0e	; 14
    2b00:	28 17       	cp	r18, r24
    2b02:	39 07       	cpc	r19, r25
    2b04:	31 f4       	brne	.+12     	; 0x2b12 <xTaskResumeAll+0x76>
    2b06:	84 89       	ldd	r24, Z+20	; 0x14
    2b08:	95 89       	ldd	r25, Z+21	; 0x15
    2b0a:	12 96       	adiw	r26, 0x02	; 2
    2b0c:	9c 93       	st	X, r25
    2b0e:	8e 93       	st	-X, r24
    2b10:	11 97       	sbiw	r26, 0x01	; 1
    2b12:	11 8e       	std	Z+25, r1	; 0x19
    2b14:	10 8e       	std	Z+24, r1	; 0x18
    2b16:	8c 91       	ld	r24, X
    2b18:	81 50       	subi	r24, 0x01	; 1
    2b1a:	8c 93       	st	X, r24
    2b1c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b1e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b20:	c6 81       	ldd	r28, Z+6	; 0x06
    2b22:	d7 81       	ldd	r29, Z+7	; 0x07
    2b24:	80 85       	ldd	r24, Z+8	; 0x08
    2b26:	91 85       	ldd	r25, Z+9	; 0x09
    2b28:	9f 83       	std	Y+7, r25	; 0x07
    2b2a:	8e 83       	std	Y+6, r24	; 0x06
    2b2c:	c0 85       	ldd	r28, Z+8	; 0x08
    2b2e:	d1 85       	ldd	r29, Z+9	; 0x09
    2b30:	86 81       	ldd	r24, Z+6	; 0x06
    2b32:	97 81       	ldd	r25, Z+7	; 0x07
    2b34:	9d 83       	std	Y+5, r25	; 0x05
    2b36:	8c 83       	std	Y+4, r24	; 0x04
    2b38:	11 96       	adiw	r26, 0x01	; 1
    2b3a:	8d 91       	ld	r24, X+
    2b3c:	9c 91       	ld	r25, X
    2b3e:	12 97       	sbiw	r26, 0x02	; 2
    2b40:	9f 01       	movw	r18, r30
    2b42:	2e 5f       	subi	r18, 0xFE	; 254
    2b44:	3f 4f       	sbci	r19, 0xFF	; 255
    2b46:	82 17       	cp	r24, r18
    2b48:	93 07       	cpc	r25, r19
    2b4a:	31 f4       	brne	.+12     	; 0x2b58 <xTaskResumeAll+0xbc>
    2b4c:	80 85       	ldd	r24, Z+8	; 0x08
    2b4e:	91 85       	ldd	r25, Z+9	; 0x09
    2b50:	12 96       	adiw	r26, 0x02	; 2
    2b52:	9c 93       	st	X, r25
    2b54:	8e 93       	st	-X, r24
    2b56:	11 97       	sbiw	r26, 0x01	; 1
    2b58:	15 86       	std	Z+13, r1	; 0x0d
    2b5a:	14 86       	std	Z+12, r1	; 0x0c
    2b5c:	8c 91       	ld	r24, X
    2b5e:	81 50       	subi	r24, 0x01	; 1
    2b60:	8c 93       	st	X, r24
    2b62:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b64:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    2b68:	8a 17       	cp	r24, r26
    2b6a:	10 f4       	brcc	.+4      	; 0x2b70 <xTaskResumeAll+0xd4>
    2b6c:	a0 93 91 13 	sts	0x1391, r26	; 0x801391 <uxTopReadyPriority>
    2b70:	8b e0       	ldi	r24, 0x0B	; 11
    2b72:	8a 9f       	mul	r24, r26
    2b74:	d0 01       	movw	r26, r0
    2b76:	11 24       	eor	r1, r1
    2b78:	ad 52       	subi	r26, 0x2D	; 45
    2b7a:	bc 4e       	sbci	r27, 0xEC	; 236
    2b7c:	11 96       	adiw	r26, 0x01	; 1
    2b7e:	0d 90       	ld	r0, X+
    2b80:	bc 91       	ld	r27, X
    2b82:	a0 2d       	mov	r26, r0
    2b84:	b7 83       	std	Z+7, r27	; 0x07
    2b86:	a6 83       	std	Z+6, r26	; 0x06
    2b88:	16 96       	adiw	r26, 0x06	; 6
    2b8a:	4d 91       	ld	r20, X+
    2b8c:	5c 91       	ld	r21, X
    2b8e:	17 97       	sbiw	r26, 0x07	; 7
    2b90:	51 87       	std	Z+9, r21	; 0x09
    2b92:	40 87       	std	Z+8, r20	; 0x08
    2b94:	16 96       	adiw	r26, 0x06	; 6
    2b96:	cd 91       	ld	r28, X+
    2b98:	dc 91       	ld	r29, X
    2b9a:	17 97       	sbiw	r26, 0x07	; 7
    2b9c:	3d 83       	std	Y+5, r19	; 0x05
    2b9e:	2c 83       	std	Y+4, r18	; 0x04
    2ba0:	17 96       	adiw	r26, 0x07	; 7
    2ba2:	3c 93       	st	X, r19
    2ba4:	2e 93       	st	-X, r18
    2ba6:	16 97       	sbiw	r26, 0x06	; 6
    2ba8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2baa:	8a 9f       	mul	r24, r26
    2bac:	d0 01       	movw	r26, r0
    2bae:	11 24       	eor	r1, r1
    2bb0:	ad 52       	subi	r26, 0x2D	; 45
    2bb2:	bc 4e       	sbci	r27, 0xEC	; 236
    2bb4:	b5 87       	std	Z+13, r27	; 0x0d
    2bb6:	a4 87       	std	Z+12, r26	; 0x0c
    2bb8:	8c 91       	ld	r24, X
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	8c 93       	st	X, r24
    2bbe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bc0:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    2bc4:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2bc8:	5a 96       	adiw	r26, 0x1a	; 26
    2bca:	8c 91       	ld	r24, X
    2bcc:	98 17       	cp	r25, r24
    2bce:	30 f0       	brcs	.+12     	; 0x2bdc <xTaskResumeAll+0x140>
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xYieldPending>
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <xTaskResumeAll+0x140>
    2bd8:	e0 e0       	ldi	r30, 0x00	; 0
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <xPendingReadyList>
    2be0:	81 11       	cpse	r24, r1
    2be2:	73 cf       	rjmp	.-282    	; 0x2aca <xTaskResumeAll+0x2e>
    2be4:	ef 2b       	or	r30, r31
    2be6:	09 f0       	breq	.+2      	; 0x2bea <xTaskResumeAll+0x14e>
    2be8:	7f db       	rcall	.-2306   	; 0x22e8 <prvResetNextTaskUnblockTime>
    2bea:	c0 90 8c 13 	lds	r12, 0x138C	; 0x80138c <xPendedTicks>
    2bee:	d0 90 8d 13 	lds	r13, 0x138D	; 0x80138d <xPendedTicks+0x1>
    2bf2:	e0 90 8e 13 	lds	r14, 0x138E	; 0x80138e <xPendedTicks+0x2>
    2bf6:	f0 90 8f 13 	lds	r15, 0x138F	; 0x80138f <xPendedTicks+0x3>
    2bfa:	c1 14       	cp	r12, r1
    2bfc:	d1 04       	cpc	r13, r1
    2bfe:	e1 04       	cpc	r14, r1
    2c00:	f1 04       	cpc	r15, r1
    2c02:	a1 f0       	breq	.+40     	; 0x2c2c <xTaskResumeAll+0x190>
    2c04:	1f de       	rcall	.-962    	; 0x2844 <xTaskIncrementTick>
    2c06:	88 23       	and	r24, r24
    2c08:	19 f0       	breq	.+6      	; 0x2c10 <xTaskResumeAll+0x174>
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xYieldPending>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	c8 1a       	sub	r12, r24
    2c14:	d1 08       	sbc	r13, r1
    2c16:	e1 08       	sbc	r14, r1
    2c18:	f1 08       	sbc	r15, r1
    2c1a:	a1 f7       	brne	.-24     	; 0x2c04 <xTaskResumeAll+0x168>
    2c1c:	10 92 8c 13 	sts	0x138C, r1	; 0x80138c <xPendedTicks>
    2c20:	10 92 8d 13 	sts	0x138D, r1	; 0x80138d <xPendedTicks+0x1>
    2c24:	10 92 8e 13 	sts	0x138E, r1	; 0x80138e <xPendedTicks+0x2>
    2c28:	10 92 8f 13 	sts	0x138F, r1	; 0x80138f <xPendedTicks+0x3>
    2c2c:	80 91 8b 13 	lds	r24, 0x138B	; 0x80138b <xYieldPending>
    2c30:	88 23       	and	r24, r24
    2c32:	31 f0       	breq	.+12     	; 0x2c40 <xTaskResumeAll+0x1a4>
    2c34:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	03 c0       	rjmp	.+6      	; 0x2c42 <xTaskResumeAll+0x1a6>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <xTaskResumeAll+0x1a6>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	0f 90       	pop	r0
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	08 95       	ret

00002c54 <xTaskDelayUntil>:
    2c54:	8f 92       	push	r8
    2c56:	9f 92       	push	r9
    2c58:	af 92       	push	r10
    2c5a:	bf 92       	push	r11
    2c5c:	cf 92       	push	r12
    2c5e:	df 92       	push	r13
    2c60:	ef 92       	push	r14
    2c62:	ff 92       	push	r15
    2c64:	1f 93       	push	r17
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	ec 01       	movw	r28, r24
    2c6c:	6a 01       	movw	r12, r20
    2c6e:	7b 01       	movw	r14, r22
    2c70:	d5 dd       	rcall	.-1110   	; 0x281c <vTaskSuspendAll>
    2c72:	80 90 92 13 	lds	r8, 0x1392	; 0x801392 <xTickCount>
    2c76:	90 90 93 13 	lds	r9, 0x1393	; 0x801393 <xTickCount+0x1>
    2c7a:	a0 90 94 13 	lds	r10, 0x1394	; 0x801394 <xTickCount+0x2>
    2c7e:	b0 90 95 13 	lds	r11, 0x1395	; 0x801395 <xTickCount+0x3>
    2c82:	88 81       	ld	r24, Y
    2c84:	99 81       	ldd	r25, Y+1	; 0x01
    2c86:	aa 81       	ldd	r26, Y+2	; 0x02
    2c88:	bb 81       	ldd	r27, Y+3	; 0x03
    2c8a:	ac 01       	movw	r20, r24
    2c8c:	bd 01       	movw	r22, r26
    2c8e:	4c 0d       	add	r20, r12
    2c90:	5d 1d       	adc	r21, r13
    2c92:	6e 1d       	adc	r22, r14
    2c94:	7f 1d       	adc	r23, r15
    2c96:	88 16       	cp	r8, r24
    2c98:	99 06       	cpc	r9, r25
    2c9a:	aa 06       	cpc	r10, r26
    2c9c:	bb 06       	cpc	r11, r27
    2c9e:	60 f4       	brcc	.+24     	; 0x2cb8 <xTaskDelayUntil+0x64>
    2ca0:	48 17       	cp	r20, r24
    2ca2:	59 07       	cpc	r21, r25
    2ca4:	6a 07       	cpc	r22, r26
    2ca6:	7b 07       	cpc	r23, r27
    2ca8:	98 f4       	brcc	.+38     	; 0x2cd0 <xTaskDelayUntil+0x7c>
    2caa:	84 16       	cp	r8, r20
    2cac:	95 06       	cpc	r9, r21
    2cae:	a6 06       	cpc	r10, r22
    2cb0:	b7 06       	cpc	r11, r23
    2cb2:	80 f0       	brcs	.+32     	; 0x2cd4 <xTaskDelayUntil+0x80>
    2cb4:	10 e0       	ldi	r17, 0x00	; 0
    2cb6:	13 c0       	rjmp	.+38     	; 0x2cde <xTaskDelayUntil+0x8a>
    2cb8:	48 17       	cp	r20, r24
    2cba:	59 07       	cpc	r21, r25
    2cbc:	6a 07       	cpc	r22, r26
    2cbe:	7b 07       	cpc	r23, r27
    2cc0:	58 f0       	brcs	.+22     	; 0x2cd8 <xTaskDelayUntil+0x84>
    2cc2:	84 16       	cp	r8, r20
    2cc4:	95 06       	cpc	r9, r21
    2cc6:	a6 06       	cpc	r10, r22
    2cc8:	b7 06       	cpc	r11, r23
    2cca:	40 f0       	brcs	.+16     	; 0x2cdc <xTaskDelayUntil+0x88>
    2ccc:	10 e0       	ldi	r17, 0x00	; 0
    2cce:	07 c0       	rjmp	.+14     	; 0x2cde <xTaskDelayUntil+0x8a>
    2cd0:	10 e0       	ldi	r17, 0x00	; 0
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <xTaskDelayUntil+0x8a>
    2cd4:	11 e0       	ldi	r17, 0x01	; 1
    2cd6:	03 c0       	rjmp	.+6      	; 0x2cde <xTaskDelayUntil+0x8a>
    2cd8:	11 e0       	ldi	r17, 0x01	; 1
    2cda:	01 c0       	rjmp	.+2      	; 0x2cde <xTaskDelayUntil+0x8a>
    2cdc:	11 e0       	ldi	r17, 0x01	; 1
    2cde:	48 83       	st	Y, r20
    2ce0:	59 83       	std	Y+1, r21	; 0x01
    2ce2:	6a 83       	std	Y+2, r22	; 0x02
    2ce4:	7b 83       	std	Y+3, r23	; 0x03
    2ce6:	11 23       	and	r17, r17
    2ce8:	41 f0       	breq	.+16     	; 0x2cfa <xTaskDelayUntil+0xa6>
    2cea:	cb 01       	movw	r24, r22
    2cec:	ba 01       	movw	r22, r20
    2cee:	68 19       	sub	r22, r8
    2cf0:	79 09       	sbc	r23, r9
    2cf2:	8a 09       	sbc	r24, r10
    2cf4:	9b 09       	sbc	r25, r11
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	6b dc       	rcall	.-1834   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2cfa:	d0 de       	rcall	.-608    	; 0x2a9c <xTaskResumeAll>
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <xTaskDelayUntil+0xb0>
    2d00:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    2d04:	81 2f       	mov	r24, r17
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	1f 91       	pop	r17
    2d0c:	ff 90       	pop	r15
    2d0e:	ef 90       	pop	r14
    2d10:	df 90       	pop	r13
    2d12:	cf 90       	pop	r12
    2d14:	bf 90       	pop	r11
    2d16:	af 90       	pop	r10
    2d18:	9f 90       	pop	r9
    2d1a:	8f 90       	pop	r8
    2d1c:	08 95       	ret

00002d1e <vTaskDelay>:
    2d1e:	cf 92       	push	r12
    2d20:	df 92       	push	r13
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	6b 01       	movw	r12, r22
    2d28:	7c 01       	movw	r14, r24
    2d2a:	67 2b       	or	r22, r23
    2d2c:	68 2b       	or	r22, r24
    2d2e:	69 2b       	or	r22, r25
    2d30:	39 f0       	breq	.+14     	; 0x2d40 <vTaskDelay+0x22>
    2d32:	74 dd       	rcall	.-1304   	; 0x281c <vTaskSuspendAll>
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	c7 01       	movw	r24, r14
    2d38:	b6 01       	movw	r22, r12
    2d3a:	4a dc       	rcall	.-1900   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2d3c:	af de       	rcall	.-674    	; 0x2a9c <xTaskResumeAll>
    2d3e:	01 c0       	rjmp	.+2      	; 0x2d42 <vTaskDelay+0x24>
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	81 11       	cpse	r24, r1
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vTaskDelay+0x2c>
    2d46:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    2d4a:	ff 90       	pop	r15
    2d4c:	ef 90       	pop	r14
    2d4e:	df 90       	pop	r13
    2d50:	cf 90       	pop	r12
    2d52:	08 95       	ret

00002d54 <vTaskSwitchContext>:
    2d54:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <uxSchedulerSuspended>
    2d58:	88 23       	and	r24, r24
    2d5a:	21 f0       	breq	.+8      	; 0x2d64 <vTaskSwitchContext+0x10>
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xYieldPending>
    2d62:	08 95       	ret
    2d64:	10 92 8b 13 	sts	0x138B, r1	; 0x80138b <xYieldPending>
    2d68:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    2d6c:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2d70:	20 81       	ld	r18, Z
    2d72:	31 81       	ldd	r19, Z+1	; 0x01
    2d74:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    2d78:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2d7c:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d7e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2d80:	82 17       	cp	r24, r18
    2d82:	93 07       	cpc	r25, r19
    2d84:	60 f0       	brcs	.+24     	; 0x2d9e <vTaskSwitchContext+0x4a>
    2d86:	60 91 41 14 	lds	r22, 0x1441	; 0x801441 <pxCurrentTCB>
    2d8a:	70 91 42 14 	lds	r23, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2d8e:	63 5e       	subi	r22, 0xE3	; 227
    2d90:	7f 4f       	sbci	r23, 0xFF	; 255
    2d92:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    2d96:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2d9a:	0e 94 01 21 	call	0x4202	; 0x4202 <vApplicationStackOverflowHook>
    2d9e:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <vTaskSwitchContext+0x52>
    2da4:	81 50       	subi	r24, 0x01	; 1
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	9b e0       	ldi	r25, 0x0B	; 11
    2dac:	92 9f       	mul	r25, r18
    2dae:	f0 01       	movw	r30, r0
    2db0:	93 9f       	mul	r25, r19
    2db2:	f0 0d       	add	r31, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	ed 52       	subi	r30, 0x2D	; 45
    2db8:	fc 4e       	sbci	r31, 0xEC	; 236
    2dba:	90 81       	ld	r25, Z
    2dbc:	99 23       	and	r25, r25
    2dbe:	91 f3       	breq	.-28     	; 0x2da4 <vTaskSwitchContext+0x50>
    2dc0:	9b e0       	ldi	r25, 0x0B	; 11
    2dc2:	92 9f       	mul	r25, r18
    2dc4:	a0 01       	movw	r20, r0
    2dc6:	93 9f       	mul	r25, r19
    2dc8:	50 0d       	add	r21, r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	df 01       	movw	r26, r30
    2dce:	01 80       	ldd	r0, Z+1	; 0x01
    2dd0:	f2 81       	ldd	r31, Z+2	; 0x02
    2dd2:	e0 2d       	mov	r30, r0
    2dd4:	04 80       	ldd	r0, Z+4	; 0x04
    2dd6:	f5 81       	ldd	r31, Z+5	; 0x05
    2dd8:	e0 2d       	mov	r30, r0
    2dda:	12 96       	adiw	r26, 0x02	; 2
    2ddc:	fc 93       	st	X, r31
    2dde:	ee 93       	st	-X, r30
    2de0:	11 97       	sbiw	r26, 0x01	; 1
    2de2:	4a 52       	subi	r20, 0x2A	; 42
    2de4:	5c 4e       	sbci	r21, 0xEC	; 236
    2de6:	e4 17       	cp	r30, r20
    2de8:	f5 07       	cpc	r31, r21
    2dea:	29 f4       	brne	.+10     	; 0x2df6 <vTaskSwitchContext+0xa2>
    2dec:	44 81       	ldd	r20, Z+4	; 0x04
    2dee:	55 81       	ldd	r21, Z+5	; 0x05
    2df0:	fd 01       	movw	r30, r26
    2df2:	52 83       	std	Z+2, r21	; 0x02
    2df4:	41 83       	std	Z+1, r20	; 0x01
    2df6:	9b e0       	ldi	r25, 0x0B	; 11
    2df8:	92 9f       	mul	r25, r18
    2dfa:	f0 01       	movw	r30, r0
    2dfc:	93 9f       	mul	r25, r19
    2dfe:	f0 0d       	add	r31, r0
    2e00:	11 24       	eor	r1, r1
    2e02:	ed 52       	subi	r30, 0x2D	; 45
    2e04:	fc 4e       	sbci	r31, 0xEC	; 236
    2e06:	01 80       	ldd	r0, Z+1	; 0x01
    2e08:	f2 81       	ldd	r31, Z+2	; 0x02
    2e0a:	e0 2d       	mov	r30, r0
    2e0c:	20 85       	ldd	r18, Z+8	; 0x08
    2e0e:	31 85       	ldd	r19, Z+9	; 0x09
    2e10:	30 93 42 14 	sts	0x1442, r19	; 0x801442 <pxCurrentTCB+0x1>
    2e14:	20 93 41 14 	sts	0x1441, r18	; 0x801441 <pxCurrentTCB>
    2e18:	80 93 91 13 	sts	0x1391, r24	; 0x801391 <uxTopReadyPriority>
    2e1c:	08 95       	ret

00002e1e <vTaskPlaceOnEventList>:
    2e1e:	cf 92       	push	r12
    2e20:	df 92       	push	r13
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	6a 01       	movw	r12, r20
    2e28:	7b 01       	movw	r14, r22
    2e2a:	60 91 41 14 	lds	r22, 0x1441	; 0x801441 <pxCurrentTCB>
    2e2e:	70 91 42 14 	lds	r23, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2e32:	62 5f       	subi	r22, 0xF2	; 242
    2e34:	7f 4f       	sbci	r23, 0xFF	; 255
    2e36:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vListInsert>
    2e3a:	41 e0       	ldi	r20, 0x01	; 1
    2e3c:	c7 01       	movw	r24, r14
    2e3e:	b6 01       	movw	r22, r12
    2e40:	c7 db       	rcall	.-2162   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2e42:	ff 90       	pop	r15
    2e44:	ef 90       	pop	r14
    2e46:	df 90       	pop	r13
    2e48:	cf 90       	pop	r12
    2e4a:	08 95       	ret

00002e4c <vTaskPlaceOnUnorderedEventList>:
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	fc 01       	movw	r30, r24
    2e56:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    2e5a:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2e5e:	70 68       	ori	r23, 0x80	; 128
    2e60:	1e 96       	adiw	r26, 0x0e	; 14
    2e62:	4d 93       	st	X+, r20
    2e64:	5d 93       	st	X+, r21
    2e66:	6d 93       	st	X+, r22
    2e68:	7c 93       	st	X, r23
    2e6a:	51 97       	sbiw	r26, 0x11	; 17
    2e6c:	a1 81       	ldd	r26, Z+1	; 0x01
    2e6e:	b2 81       	ldd	r27, Z+2	; 0x02
    2e70:	c0 91 41 14 	lds	r28, 0x1441	; 0x801441 <pxCurrentTCB>
    2e74:	d0 91 42 14 	lds	r29, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2e78:	bb 8b       	std	Y+19, r27	; 0x13
    2e7a:	aa 8b       	std	Y+18, r26	; 0x12
    2e7c:	c0 91 41 14 	lds	r28, 0x1441	; 0x801441 <pxCurrentTCB>
    2e80:	d0 91 42 14 	lds	r29, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2e84:	16 96       	adiw	r26, 0x06	; 6
    2e86:	8d 91       	ld	r24, X+
    2e88:	9c 91       	ld	r25, X
    2e8a:	17 97       	sbiw	r26, 0x07	; 7
    2e8c:	9d 8b       	std	Y+21, r25	; 0x15
    2e8e:	8c 8b       	std	Y+20, r24	; 0x14
    2e90:	16 96       	adiw	r26, 0x06	; 6
    2e92:	cd 91       	ld	r28, X+
    2e94:	dc 91       	ld	r29, X
    2e96:	17 97       	sbiw	r26, 0x07	; 7
    2e98:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    2e9c:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2ea0:	0e 96       	adiw	r24, 0x0e	; 14
    2ea2:	9d 83       	std	Y+5, r25	; 0x05
    2ea4:	8c 83       	std	Y+4, r24	; 0x04
    2ea6:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    2eaa:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2eae:	0e 96       	adiw	r24, 0x0e	; 14
    2eb0:	17 96       	adiw	r26, 0x07	; 7
    2eb2:	9c 93       	st	X, r25
    2eb4:	8e 93       	st	-X, r24
    2eb6:	16 97       	sbiw	r26, 0x06	; 6
    2eb8:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    2ebc:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2ec0:	59 96       	adiw	r26, 0x19	; 25
    2ec2:	fc 93       	st	X, r31
    2ec4:	ee 93       	st	-X, r30
    2ec6:	58 97       	sbiw	r26, 0x18	; 24
    2ec8:	80 81       	ld	r24, Z
    2eca:	8f 5f       	subi	r24, 0xFF	; 255
    2ecc:	80 83       	st	Z, r24
    2ece:	41 e0       	ldi	r20, 0x01	; 1
    2ed0:	c9 01       	movw	r24, r18
    2ed2:	b8 01       	movw	r22, r16
    2ed4:	7d db       	rcall	.-2310   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	08 95       	ret

00002ee0 <vTaskPlaceOnEventListRestricted>:
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	ba 01       	movw	r22, r20
    2eea:	a1 81       	ldd	r26, Z+1	; 0x01
    2eec:	b2 81       	ldd	r27, Z+2	; 0x02
    2eee:	c0 91 41 14 	lds	r28, 0x1441	; 0x801441 <pxCurrentTCB>
    2ef2:	d0 91 42 14 	lds	r29, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2ef6:	bb 8b       	std	Y+19, r27	; 0x13
    2ef8:	aa 8b       	std	Y+18, r26	; 0x12
    2efa:	c0 91 41 14 	lds	r28, 0x1441	; 0x801441 <pxCurrentTCB>
    2efe:	d0 91 42 14 	lds	r29, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2f02:	16 96       	adiw	r26, 0x06	; 6
    2f04:	4d 91       	ld	r20, X+
    2f06:	5c 91       	ld	r21, X
    2f08:	17 97       	sbiw	r26, 0x07	; 7
    2f0a:	5d 8b       	std	Y+21, r21	; 0x15
    2f0c:	4c 8b       	std	Y+20, r20	; 0x14
    2f0e:	16 96       	adiw	r26, 0x06	; 6
    2f10:	cd 91       	ld	r28, X+
    2f12:	dc 91       	ld	r29, X
    2f14:	17 97       	sbiw	r26, 0x07	; 7
    2f16:	40 91 41 14 	lds	r20, 0x1441	; 0x801441 <pxCurrentTCB>
    2f1a:	50 91 42 14 	lds	r21, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2f1e:	42 5f       	subi	r20, 0xF2	; 242
    2f20:	5f 4f       	sbci	r21, 0xFF	; 255
    2f22:	5d 83       	std	Y+5, r21	; 0x05
    2f24:	4c 83       	std	Y+4, r20	; 0x04
    2f26:	40 91 41 14 	lds	r20, 0x1441	; 0x801441 <pxCurrentTCB>
    2f2a:	50 91 42 14 	lds	r21, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2f2e:	42 5f       	subi	r20, 0xF2	; 242
    2f30:	5f 4f       	sbci	r21, 0xFF	; 255
    2f32:	17 96       	adiw	r26, 0x07	; 7
    2f34:	5c 93       	st	X, r21
    2f36:	4e 93       	st	-X, r20
    2f38:	16 97       	sbiw	r26, 0x06	; 6
    2f3a:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    2f3e:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    2f42:	59 96       	adiw	r26, 0x19	; 25
    2f44:	fc 93       	st	X, r31
    2f46:	ee 93       	st	-X, r30
    2f48:	58 97       	sbiw	r26, 0x18	; 24
    2f4a:	30 81       	ld	r19, Z
    2f4c:	3f 5f       	subi	r19, 0xFF	; 255
    2f4e:	30 83       	st	Z, r19
    2f50:	22 23       	and	r18, r18
    2f52:	19 f0       	breq	.+6      	; 0x2f5a <vTaskPlaceOnEventListRestricted+0x7a>
    2f54:	6f ef       	ldi	r22, 0xFF	; 255
    2f56:	7f ef       	ldi	r23, 0xFF	; 255
    2f58:	cb 01       	movw	r24, r22
    2f5a:	42 2f       	mov	r20, r18
    2f5c:	39 db       	rcall	.-2446   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	08 95       	ret

00002f64 <xTaskRemoveFromEventList>:
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	dc 01       	movw	r26, r24
    2f6a:	17 96       	adiw	r26, 0x07	; 7
    2f6c:	ed 91       	ld	r30, X+
    2f6e:	fc 91       	ld	r31, X
    2f70:	18 97       	sbiw	r26, 0x08	; 8
    2f72:	00 84       	ldd	r0, Z+8	; 0x08
    2f74:	f1 85       	ldd	r31, Z+9	; 0x09
    2f76:	e0 2d       	mov	r30, r0
    2f78:	a0 8d       	ldd	r26, Z+24	; 0x18
    2f7a:	b1 8d       	ldd	r27, Z+25	; 0x19
    2f7c:	c2 89       	ldd	r28, Z+18	; 0x12
    2f7e:	d3 89       	ldd	r29, Z+19	; 0x13
    2f80:	84 89       	ldd	r24, Z+20	; 0x14
    2f82:	95 89       	ldd	r25, Z+21	; 0x15
    2f84:	9f 83       	std	Y+7, r25	; 0x07
    2f86:	8e 83       	std	Y+6, r24	; 0x06
    2f88:	c4 89       	ldd	r28, Z+20	; 0x14
    2f8a:	d5 89       	ldd	r29, Z+21	; 0x15
    2f8c:	82 89       	ldd	r24, Z+18	; 0x12
    2f8e:	93 89       	ldd	r25, Z+19	; 0x13
    2f90:	9d 83       	std	Y+5, r25	; 0x05
    2f92:	8c 83       	std	Y+4, r24	; 0x04
    2f94:	11 96       	adiw	r26, 0x01	; 1
    2f96:	8d 91       	ld	r24, X+
    2f98:	9c 91       	ld	r25, X
    2f9a:	12 97       	sbiw	r26, 0x02	; 2
    2f9c:	9f 01       	movw	r18, r30
    2f9e:	22 5f       	subi	r18, 0xF2	; 242
    2fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa2:	82 17       	cp	r24, r18
    2fa4:	93 07       	cpc	r25, r19
    2fa6:	31 f4       	brne	.+12     	; 0x2fb4 <xTaskRemoveFromEventList+0x50>
    2fa8:	84 89       	ldd	r24, Z+20	; 0x14
    2faa:	95 89       	ldd	r25, Z+21	; 0x15
    2fac:	12 96       	adiw	r26, 0x02	; 2
    2fae:	9c 93       	st	X, r25
    2fb0:	8e 93       	st	-X, r24
    2fb2:	11 97       	sbiw	r26, 0x01	; 1
    2fb4:	11 8e       	std	Z+25, r1	; 0x19
    2fb6:	10 8e       	std	Z+24, r1	; 0x18
    2fb8:	8c 91       	ld	r24, X
    2fba:	81 50       	subi	r24, 0x01	; 1
    2fbc:	8c 93       	st	X, r24
    2fbe:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <uxSchedulerSuspended>
    2fc2:	81 11       	cpse	r24, r1
    2fc4:	52 c0       	rjmp	.+164    	; 0x306a <xTaskRemoveFromEventList+0x106>
    2fc6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2fc8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2fca:	c6 81       	ldd	r28, Z+6	; 0x06
    2fcc:	d7 81       	ldd	r29, Z+7	; 0x07
    2fce:	80 85       	ldd	r24, Z+8	; 0x08
    2fd0:	91 85       	ldd	r25, Z+9	; 0x09
    2fd2:	9f 83       	std	Y+7, r25	; 0x07
    2fd4:	8e 83       	std	Y+6, r24	; 0x06
    2fd6:	c0 85       	ldd	r28, Z+8	; 0x08
    2fd8:	d1 85       	ldd	r29, Z+9	; 0x09
    2fda:	86 81       	ldd	r24, Z+6	; 0x06
    2fdc:	97 81       	ldd	r25, Z+7	; 0x07
    2fde:	9d 83       	std	Y+5, r25	; 0x05
    2fe0:	8c 83       	std	Y+4, r24	; 0x04
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	8d 91       	ld	r24, X+
    2fe6:	9c 91       	ld	r25, X
    2fe8:	12 97       	sbiw	r26, 0x02	; 2
    2fea:	9f 01       	movw	r18, r30
    2fec:	2e 5f       	subi	r18, 0xFE	; 254
    2fee:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff0:	82 17       	cp	r24, r18
    2ff2:	93 07       	cpc	r25, r19
    2ff4:	31 f4       	brne	.+12     	; 0x3002 <xTaskRemoveFromEventList+0x9e>
    2ff6:	80 85       	ldd	r24, Z+8	; 0x08
    2ff8:	91 85       	ldd	r25, Z+9	; 0x09
    2ffa:	12 96       	adiw	r26, 0x02	; 2
    2ffc:	9c 93       	st	X, r25
    2ffe:	8e 93       	st	-X, r24
    3000:	11 97       	sbiw	r26, 0x01	; 1
    3002:	15 86       	std	Z+13, r1	; 0x0d
    3004:	14 86       	std	Z+12, r1	; 0x0c
    3006:	8c 91       	ld	r24, X
    3008:	81 50       	subi	r24, 0x01	; 1
    300a:	8c 93       	st	X, r24
    300c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    300e:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    3012:	8a 17       	cp	r24, r26
    3014:	10 f4       	brcc	.+4      	; 0x301a <xTaskRemoveFromEventList+0xb6>
    3016:	a0 93 91 13 	sts	0x1391, r26	; 0x801391 <uxTopReadyPriority>
    301a:	8b e0       	ldi	r24, 0x0B	; 11
    301c:	8a 9f       	mul	r24, r26
    301e:	d0 01       	movw	r26, r0
    3020:	11 24       	eor	r1, r1
    3022:	ad 52       	subi	r26, 0x2D	; 45
    3024:	bc 4e       	sbci	r27, 0xEC	; 236
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	0d 90       	ld	r0, X+
    302a:	bc 91       	ld	r27, X
    302c:	a0 2d       	mov	r26, r0
    302e:	b7 83       	std	Z+7, r27	; 0x07
    3030:	a6 83       	std	Z+6, r26	; 0x06
    3032:	16 96       	adiw	r26, 0x06	; 6
    3034:	4d 91       	ld	r20, X+
    3036:	5c 91       	ld	r21, X
    3038:	17 97       	sbiw	r26, 0x07	; 7
    303a:	51 87       	std	Z+9, r21	; 0x09
    303c:	40 87       	std	Z+8, r20	; 0x08
    303e:	16 96       	adiw	r26, 0x06	; 6
    3040:	cd 91       	ld	r28, X+
    3042:	dc 91       	ld	r29, X
    3044:	17 97       	sbiw	r26, 0x07	; 7
    3046:	3d 83       	std	Y+5, r19	; 0x05
    3048:	2c 83       	std	Y+4, r18	; 0x04
    304a:	17 96       	adiw	r26, 0x07	; 7
    304c:	3c 93       	st	X, r19
    304e:	2e 93       	st	-X, r18
    3050:	16 97       	sbiw	r26, 0x06	; 6
    3052:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3054:	8a 9f       	mul	r24, r26
    3056:	d0 01       	movw	r26, r0
    3058:	11 24       	eor	r1, r1
    305a:	ad 52       	subi	r26, 0x2D	; 45
    305c:	bc 4e       	sbci	r27, 0xEC	; 236
    305e:	b5 87       	std	Z+13, r27	; 0x0d
    3060:	a4 87       	std	Z+12, r26	; 0x0c
    3062:	8c 91       	ld	r24, X
    3064:	8f 5f       	subi	r24, 0xFF	; 255
    3066:	8c 93       	st	X, r24
    3068:	1c c0       	rjmp	.+56     	; 0x30a2 <xTaskRemoveFromEventList+0x13e>
    306a:	4e ea       	ldi	r20, 0xAE	; 174
    306c:	53 e1       	ldi	r21, 0x13	; 19
    306e:	da 01       	movw	r26, r20
    3070:	11 96       	adiw	r26, 0x01	; 1
    3072:	cd 91       	ld	r28, X+
    3074:	dc 91       	ld	r29, X
    3076:	12 97       	sbiw	r26, 0x02	; 2
    3078:	d3 8b       	std	Z+19, r29	; 0x13
    307a:	c2 8b       	std	Z+18, r28	; 0x12
    307c:	8e 81       	ldd	r24, Y+6	; 0x06
    307e:	9f 81       	ldd	r25, Y+7	; 0x07
    3080:	95 8b       	std	Z+21, r25	; 0x15
    3082:	84 8b       	std	Z+20, r24	; 0x14
    3084:	8e 81       	ldd	r24, Y+6	; 0x06
    3086:	9f 81       	ldd	r25, Y+7	; 0x07
    3088:	dc 01       	movw	r26, r24
    308a:	15 96       	adiw	r26, 0x05	; 5
    308c:	3c 93       	st	X, r19
    308e:	2e 93       	st	-X, r18
    3090:	14 97       	sbiw	r26, 0x04	; 4
    3092:	3f 83       	std	Y+7, r19	; 0x07
    3094:	2e 83       	std	Y+6, r18	; 0x06
    3096:	51 8f       	std	Z+25, r21	; 0x19
    3098:	40 8f       	std	Z+24, r20	; 0x18
    309a:	da 01       	movw	r26, r20
    309c:	8c 91       	ld	r24, X
    309e:	8f 5f       	subi	r24, 0xFF	; 255
    30a0:	8c 93       	st	X, r24
    30a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    30a4:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    30a8:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    30ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    30ae:	89 17       	cp	r24, r25
    30b0:	20 f4       	brcc	.+8      	; 0x30ba <xTaskRemoveFromEventList+0x156>
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xYieldPending>
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <xTaskRemoveFromEventList+0x158>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	08 95       	ret

000030c2 <vTaskRemoveFromUnorderedEventList>:
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	dc 01       	movw	r26, r24
    30c8:	70 68       	ori	r23, 0x80	; 128
    30ca:	4d 93       	st	X+, r20
    30cc:	5d 93       	st	X+, r21
    30ce:	6d 93       	st	X+, r22
    30d0:	7c 93       	st	X, r23
    30d2:	13 97       	sbiw	r26, 0x03	; 3
    30d4:	18 96       	adiw	r26, 0x08	; 8
    30d6:	ed 91       	ld	r30, X+
    30d8:	fc 91       	ld	r31, X
    30da:	19 97       	sbiw	r26, 0x09	; 9
    30dc:	1a 96       	adiw	r26, 0x0a	; 10
    30de:	4d 91       	ld	r20, X+
    30e0:	5c 91       	ld	r21, X
    30e2:	1b 97       	sbiw	r26, 0x0b	; 11
    30e4:	14 96       	adiw	r26, 0x04	; 4
    30e6:	8d 91       	ld	r24, X+
    30e8:	9c 91       	ld	r25, X
    30ea:	15 97       	sbiw	r26, 0x05	; 5
    30ec:	16 96       	adiw	r26, 0x06	; 6
    30ee:	2d 91       	ld	r18, X+
    30f0:	3c 91       	ld	r19, X
    30f2:	17 97       	sbiw	r26, 0x07	; 7
    30f4:	ec 01       	movw	r28, r24
    30f6:	3f 83       	std	Y+7, r19	; 0x07
    30f8:	2e 83       	std	Y+6, r18	; 0x06
    30fa:	16 96       	adiw	r26, 0x06	; 6
    30fc:	8d 91       	ld	r24, X+
    30fe:	9c 91       	ld	r25, X
    3100:	17 97       	sbiw	r26, 0x07	; 7
    3102:	14 96       	adiw	r26, 0x04	; 4
    3104:	2d 91       	ld	r18, X+
    3106:	3c 91       	ld	r19, X
    3108:	15 97       	sbiw	r26, 0x05	; 5
    310a:	ec 01       	movw	r28, r24
    310c:	3d 83       	std	Y+5, r19	; 0x05
    310e:	2c 83       	std	Y+4, r18	; 0x04
    3110:	ea 01       	movw	r28, r20
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	9a 81       	ldd	r25, Y+2	; 0x02
    3116:	a8 17       	cp	r26, r24
    3118:	b9 07       	cpc	r27, r25
    311a:	31 f4       	brne	.+12     	; 0x3128 <vTaskRemoveFromUnorderedEventList+0x66>
    311c:	16 96       	adiw	r26, 0x06	; 6
    311e:	8d 91       	ld	r24, X+
    3120:	9c 91       	ld	r25, X
    3122:	17 97       	sbiw	r26, 0x07	; 7
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	1b 96       	adiw	r26, 0x0b	; 11
    312a:	1c 92       	st	X, r1
    312c:	1e 92       	st	-X, r1
    312e:	1a 97       	sbiw	r26, 0x0a	; 10
    3130:	da 01       	movw	r26, r20
    3132:	8c 91       	ld	r24, X
    3134:	81 50       	subi	r24, 0x01	; 1
    3136:	8c 93       	st	X, r24
    3138:	a4 85       	ldd	r26, Z+12	; 0x0c
    313a:	b5 85       	ldd	r27, Z+13	; 0x0d
    313c:	c6 81       	ldd	r28, Z+6	; 0x06
    313e:	d7 81       	ldd	r29, Z+7	; 0x07
    3140:	80 85       	ldd	r24, Z+8	; 0x08
    3142:	91 85       	ldd	r25, Z+9	; 0x09
    3144:	9f 83       	std	Y+7, r25	; 0x07
    3146:	8e 83       	std	Y+6, r24	; 0x06
    3148:	c0 85       	ldd	r28, Z+8	; 0x08
    314a:	d1 85       	ldd	r29, Z+9	; 0x09
    314c:	86 81       	ldd	r24, Z+6	; 0x06
    314e:	97 81       	ldd	r25, Z+7	; 0x07
    3150:	9d 83       	std	Y+5, r25	; 0x05
    3152:	8c 83       	std	Y+4, r24	; 0x04
    3154:	11 96       	adiw	r26, 0x01	; 1
    3156:	8d 91       	ld	r24, X+
    3158:	9c 91       	ld	r25, X
    315a:	12 97       	sbiw	r26, 0x02	; 2
    315c:	9f 01       	movw	r18, r30
    315e:	2e 5f       	subi	r18, 0xFE	; 254
    3160:	3f 4f       	sbci	r19, 0xFF	; 255
    3162:	82 17       	cp	r24, r18
    3164:	93 07       	cpc	r25, r19
    3166:	31 f4       	brne	.+12     	; 0x3174 <vTaskRemoveFromUnorderedEventList+0xb2>
    3168:	80 85       	ldd	r24, Z+8	; 0x08
    316a:	91 85       	ldd	r25, Z+9	; 0x09
    316c:	12 96       	adiw	r26, 0x02	; 2
    316e:	9c 93       	st	X, r25
    3170:	8e 93       	st	-X, r24
    3172:	11 97       	sbiw	r26, 0x01	; 1
    3174:	15 86       	std	Z+13, r1	; 0x0d
    3176:	14 86       	std	Z+12, r1	; 0x0c
    3178:	8c 91       	ld	r24, X
    317a:	81 50       	subi	r24, 0x01	; 1
    317c:	8c 93       	st	X, r24
    317e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3180:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    3184:	8a 17       	cp	r24, r26
    3186:	10 f4       	brcc	.+4      	; 0x318c <vTaskRemoveFromUnorderedEventList+0xca>
    3188:	a0 93 91 13 	sts	0x1391, r26	; 0x801391 <uxTopReadyPriority>
    318c:	8b e0       	ldi	r24, 0x0B	; 11
    318e:	8a 9f       	mul	r24, r26
    3190:	d0 01       	movw	r26, r0
    3192:	11 24       	eor	r1, r1
    3194:	ad 52       	subi	r26, 0x2D	; 45
    3196:	bc 4e       	sbci	r27, 0xEC	; 236
    3198:	11 96       	adiw	r26, 0x01	; 1
    319a:	0d 90       	ld	r0, X+
    319c:	bc 91       	ld	r27, X
    319e:	a0 2d       	mov	r26, r0
    31a0:	b7 83       	std	Z+7, r27	; 0x07
    31a2:	a6 83       	std	Z+6, r26	; 0x06
    31a4:	16 96       	adiw	r26, 0x06	; 6
    31a6:	4d 91       	ld	r20, X+
    31a8:	5c 91       	ld	r21, X
    31aa:	17 97       	sbiw	r26, 0x07	; 7
    31ac:	51 87       	std	Z+9, r21	; 0x09
    31ae:	40 87       	std	Z+8, r20	; 0x08
    31b0:	16 96       	adiw	r26, 0x06	; 6
    31b2:	cd 91       	ld	r28, X+
    31b4:	dc 91       	ld	r29, X
    31b6:	17 97       	sbiw	r26, 0x07	; 7
    31b8:	3d 83       	std	Y+5, r19	; 0x05
    31ba:	2c 83       	std	Y+4, r18	; 0x04
    31bc:	17 96       	adiw	r26, 0x07	; 7
    31be:	3c 93       	st	X, r19
    31c0:	2e 93       	st	-X, r18
    31c2:	16 97       	sbiw	r26, 0x06	; 6
    31c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    31c6:	8a 9f       	mul	r24, r26
    31c8:	d0 01       	movw	r26, r0
    31ca:	11 24       	eor	r1, r1
    31cc:	ad 52       	subi	r26, 0x2D	; 45
    31ce:	bc 4e       	sbci	r27, 0xEC	; 236
    31d0:	b5 87       	std	Z+13, r27	; 0x0d
    31d2:	a4 87       	std	Z+12, r26	; 0x0c
    31d4:	8c 91       	ld	r24, X
    31d6:	8f 5f       	subi	r24, 0xFF	; 255
    31d8:	8c 93       	st	X, r24
    31da:	92 8d       	ldd	r25, Z+26	; 0x1a
    31dc:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    31e0:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    31e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    31e6:	89 17       	cp	r24, r25
    31e8:	18 f4       	brcc	.+6      	; 0x31f0 <vTaskRemoveFromUnorderedEventList+0x12e>
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xYieldPending>
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	08 95       	ret

000031f6 <vTaskInternalSetTimeOutState>:
    31f6:	20 91 8a 13 	lds	r18, 0x138A	; 0x80138a <xNumOfOverflows>
    31fa:	fc 01       	movw	r30, r24
    31fc:	20 83       	st	Z, r18
    31fe:	40 91 92 13 	lds	r20, 0x1392	; 0x801392 <xTickCount>
    3202:	50 91 93 13 	lds	r21, 0x1393	; 0x801393 <xTickCount+0x1>
    3206:	60 91 94 13 	lds	r22, 0x1394	; 0x801394 <xTickCount+0x2>
    320a:	70 91 95 13 	lds	r23, 0x1395	; 0x801395 <xTickCount+0x3>
    320e:	41 83       	std	Z+1, r20	; 0x01
    3210:	52 83       	std	Z+2, r21	; 0x02
    3212:	63 83       	std	Z+3, r22	; 0x03
    3214:	74 83       	std	Z+4, r23	; 0x04
    3216:	08 95       	ret

00003218 <xTaskCheckForTimeOut>:
    3218:	8f 92       	push	r8
    321a:	9f 92       	push	r9
    321c:	af 92       	push	r10
    321e:	bf 92       	push	r11
    3220:	cf 92       	push	r12
    3222:	df 92       	push	r13
    3224:	ef 92       	push	r14
    3226:	ff 92       	push	r15
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	fb 01       	movw	r30, r22
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	0f 92       	push	r0
    3238:	c0 90 92 13 	lds	r12, 0x1392	; 0x801392 <xTickCount>
    323c:	d0 90 93 13 	lds	r13, 0x1393	; 0x801393 <xTickCount+0x1>
    3240:	e0 90 94 13 	lds	r14, 0x1394	; 0x801394 <xTickCount+0x2>
    3244:	f0 90 95 13 	lds	r15, 0x1395	; 0x801395 <xTickCount+0x3>
    3248:	dc 01       	movw	r26, r24
    324a:	11 96       	adiw	r26, 0x01	; 1
    324c:	0d 91       	ld	r16, X+
    324e:	1d 91       	ld	r17, X+
    3250:	2d 91       	ld	r18, X+
    3252:	3c 91       	ld	r19, X
    3254:	14 97       	sbiw	r26, 0x04	; 4
    3256:	46 01       	movw	r8, r12
    3258:	57 01       	movw	r10, r14
    325a:	80 1a       	sub	r8, r16
    325c:	91 0a       	sbc	r9, r17
    325e:	a2 0a       	sbc	r10, r18
    3260:	b3 0a       	sbc	r11, r19
    3262:	40 81       	ld	r20, Z
    3264:	51 81       	ldd	r21, Z+1	; 0x01
    3266:	62 81       	ldd	r22, Z+2	; 0x02
    3268:	73 81       	ldd	r23, Z+3	; 0x03
    326a:	4f 3f       	cpi	r20, 0xFF	; 255
    326c:	bf ef       	ldi	r27, 0xFF	; 255
    326e:	5b 07       	cpc	r21, r27
    3270:	6b 07       	cpc	r22, r27
    3272:	7b 07       	cpc	r23, r27
    3274:	39 f1       	breq	.+78     	; 0x32c4 <xTaskCheckForTimeOut+0xac>
    3276:	ec 01       	movw	r28, r24
    3278:	b8 81       	ld	r27, Y
    327a:	a0 91 8a 13 	lds	r26, 0x138A	; 0x80138a <xNumOfOverflows>
    327e:	ba 17       	cp	r27, r26
    3280:	59 f0       	breq	.+22     	; 0x3298 <xTaskCheckForTimeOut+0x80>
    3282:	c0 16       	cp	r12, r16
    3284:	d1 06       	cpc	r13, r17
    3286:	e2 06       	cpc	r14, r18
    3288:	f3 06       	cpc	r15, r19
    328a:	30 f0       	brcs	.+12     	; 0x3298 <xTaskCheckForTimeOut+0x80>
    328c:	10 82       	st	Z, r1
    328e:	11 82       	std	Z+1, r1	; 0x01
    3290:	12 82       	std	Z+2, r1	; 0x02
    3292:	13 82       	std	Z+3, r1	; 0x03
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	17 c0       	rjmp	.+46     	; 0x32c6 <xTaskCheckForTimeOut+0xae>
    3298:	84 16       	cp	r8, r20
    329a:	95 06       	cpc	r9, r21
    329c:	a6 06       	cpc	r10, r22
    329e:	b7 06       	cpc	r11, r23
    32a0:	58 f4       	brcc	.+22     	; 0x32b8 <xTaskCheckForTimeOut+0xa0>
    32a2:	48 19       	sub	r20, r8
    32a4:	59 09       	sbc	r21, r9
    32a6:	6a 09       	sbc	r22, r10
    32a8:	7b 09       	sbc	r23, r11
    32aa:	40 83       	st	Z, r20
    32ac:	51 83       	std	Z+1, r21	; 0x01
    32ae:	62 83       	std	Z+2, r22	; 0x02
    32b0:	73 83       	std	Z+3, r23	; 0x03
    32b2:	a1 df       	rcall	.-190    	; 0x31f6 <vTaskInternalSetTimeOutState>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	07 c0       	rjmp	.+14     	; 0x32c6 <xTaskCheckForTimeOut+0xae>
    32b8:	10 82       	st	Z, r1
    32ba:	11 82       	std	Z+1, r1	; 0x01
    32bc:	12 82       	std	Z+2, r1	; 0x02
    32be:	13 82       	std	Z+3, r1	; 0x03
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	01 c0       	rjmp	.+2      	; 0x32c6 <xTaskCheckForTimeOut+0xae>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	0f 90       	pop	r0
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	1f 91       	pop	r17
    32d0:	0f 91       	pop	r16
    32d2:	ff 90       	pop	r15
    32d4:	ef 90       	pop	r14
    32d6:	df 90       	pop	r13
    32d8:	cf 90       	pop	r12
    32da:	bf 90       	pop	r11
    32dc:	af 90       	pop	r10
    32de:	9f 90       	pop	r9
    32e0:	8f 90       	pop	r8
    32e2:	08 95       	ret

000032e4 <vTaskMissedYield>:
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xYieldPending>
    32ea:	08 95       	ret

000032ec <xTaskGetCurrentTaskHandle>:
    32ec:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    32f0:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    32f4:	08 95       	ret

000032f6 <xTaskGetSchedulerState>:
    32f6:	80 91 90 13 	lds	r24, 0x1390	; 0x801390 <xSchedulerRunning>
    32fa:	88 23       	and	r24, r24
    32fc:	31 f0       	breq	.+12     	; 0x330a <xTaskGetSchedulerState+0x14>
    32fe:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <uxSchedulerSuspended>
    3302:	81 11       	cpse	r24, r1
    3304:	04 c0       	rjmp	.+8      	; 0x330e <xTaskGetSchedulerState+0x18>
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	08 95       	ret
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	08 95       	ret
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	08 95       	ret

00003312 <xTaskPriorityInherit>:
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	fc 01       	movw	r30, r24
    331c:	89 2b       	or	r24, r25
    331e:	09 f4       	brne	.+2      	; 0x3322 <xTaskPriorityInherit+0x10>
    3320:	77 c0       	rjmp	.+238    	; 0x3410 <xTaskPriorityInherit+0xfe>
    3322:	82 8d       	ldd	r24, Z+26	; 0x1a
    3324:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    3328:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    332c:	5a 96       	adiw	r26, 0x1a	; 26
    332e:	9c 91       	ld	r25, X
    3330:	89 17       	cp	r24, r25
    3332:	08 f0       	brcs	.+2      	; 0x3336 <xTaskPriorityInherit+0x24>
    3334:	63 c0       	rjmp	.+198    	; 0x33fc <xTaskPriorityInherit+0xea>
    3336:	46 85       	ldd	r20, Z+14	; 0x0e
    3338:	57 85       	ldd	r21, Z+15	; 0x0f
    333a:	60 89       	ldd	r22, Z+16	; 0x10
    333c:	71 89       	ldd	r23, Z+17	; 0x11
    333e:	77 23       	and	r23, r23
    3340:	94 f0       	brlt	.+36     	; 0x3366 <xTaskPriorityInherit+0x54>
    3342:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    3346:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    334a:	5a 96       	adiw	r26, 0x1a	; 26
    334c:	9c 91       	ld	r25, X
    334e:	4a e0       	ldi	r20, 0x0A	; 10
    3350:	50 e0       	ldi	r21, 0x00	; 0
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	49 1b       	sub	r20, r25
    3358:	51 09       	sbc	r21, r1
    335a:	61 09       	sbc	r22, r1
    335c:	71 09       	sbc	r23, r1
    335e:	46 87       	std	Z+14, r20	; 0x0e
    3360:	57 87       	std	Z+15, r21	; 0x0f
    3362:	60 8b       	std	Z+16, r22	; 0x10
    3364:	71 8b       	std	Z+17, r23	; 0x11
    3366:	24 85       	ldd	r18, Z+12	; 0x0c
    3368:	35 85       	ldd	r19, Z+13	; 0x0d
    336a:	4b e0       	ldi	r20, 0x0B	; 11
    336c:	84 9f       	mul	r24, r20
    336e:	c0 01       	movw	r24, r0
    3370:	11 24       	eor	r1, r1
    3372:	8d 52       	subi	r24, 0x2D	; 45
    3374:	9c 4e       	sbci	r25, 0xEC	; 236
    3376:	28 17       	cp	r18, r24
    3378:	39 07       	cpc	r19, r25
    337a:	b9 f5       	brne	.+110    	; 0x33ea <xTaskPriorityInherit+0xd8>
    337c:	ef 01       	movw	r28, r30
    337e:	8f 01       	movw	r16, r30
    3380:	0e 5f       	subi	r16, 0xFE	; 254
    3382:	1f 4f       	sbci	r17, 0xFF	; 255
    3384:	c8 01       	movw	r24, r16
    3386:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
    338a:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    338e:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3392:	e2 8d       	ldd	r30, Z+26	; 0x1a
    3394:	ea 8f       	std	Y+26, r30	; 0x1a
    3396:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    339a:	8e 17       	cp	r24, r30
    339c:	10 f4       	brcc	.+4      	; 0x33a2 <xTaskPriorityInherit+0x90>
    339e:	e0 93 91 13 	sts	0x1391, r30	; 0x801391 <uxTopReadyPriority>
    33a2:	8b e0       	ldi	r24, 0x0B	; 11
    33a4:	8e 9f       	mul	r24, r30
    33a6:	f0 01       	movw	r30, r0
    33a8:	11 24       	eor	r1, r1
    33aa:	ed 52       	subi	r30, 0x2D	; 45
    33ac:	fc 4e       	sbci	r31, 0xEC	; 236
    33ae:	01 80       	ldd	r0, Z+1	; 0x01
    33b0:	f2 81       	ldd	r31, Z+2	; 0x02
    33b2:	e0 2d       	mov	r30, r0
    33b4:	ff 83       	std	Y+7, r31	; 0x07
    33b6:	ee 83       	std	Y+6, r30	; 0x06
    33b8:	26 81       	ldd	r18, Z+6	; 0x06
    33ba:	37 81       	ldd	r19, Z+7	; 0x07
    33bc:	39 87       	std	Y+9, r19	; 0x09
    33be:	28 87       	std	Y+8, r18	; 0x08
    33c0:	a6 81       	ldd	r26, Z+6	; 0x06
    33c2:	b7 81       	ldd	r27, Z+7	; 0x07
    33c4:	15 96       	adiw	r26, 0x05	; 5
    33c6:	1c 93       	st	X, r17
    33c8:	0e 93       	st	-X, r16
    33ca:	14 97       	sbiw	r26, 0x04	; 4
    33cc:	17 83       	std	Z+7, r17	; 0x07
    33ce:	06 83       	std	Z+6, r16	; 0x06
    33d0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    33d2:	8e 9f       	mul	r24, r30
    33d4:	f0 01       	movw	r30, r0
    33d6:	11 24       	eor	r1, r1
    33d8:	ed 52       	subi	r30, 0x2D	; 45
    33da:	fc 4e       	sbci	r31, 0xEC	; 236
    33dc:	fd 87       	std	Y+13, r31	; 0x0d
    33de:	ec 87       	std	Y+12, r30	; 0x0c
    33e0:	80 81       	ld	r24, Z
    33e2:	8f 5f       	subi	r24, 0xFF	; 255
    33e4:	80 83       	st	Z, r24
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	16 c0       	rjmp	.+44     	; 0x3416 <xTaskPriorityInherit+0x104>
    33ea:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    33ee:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    33f2:	5a 96       	adiw	r26, 0x1a	; 26
    33f4:	8c 91       	ld	r24, X
    33f6:	82 8f       	std	Z+26, r24	; 0x1a
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	0d c0       	rjmp	.+26     	; 0x3416 <xTaskPriorityInherit+0x104>
    33fc:	95 a5       	ldd	r25, Z+45	; 0x2d
    33fe:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    3402:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3406:	82 8d       	ldd	r24, Z+26	; 0x1a
    3408:	98 17       	cp	r25, r24
    340a:	20 f0       	brcs	.+8      	; 0x3414 <xTaskPriorityInherit+0x102>
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	03 c0       	rjmp	.+6      	; 0x3416 <xTaskPriorityInherit+0x104>
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	01 c0       	rjmp	.+2      	; 0x3416 <xTaskPriorityInherit+0x104>
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	08 95       	ret

00003420 <xTaskPriorityDisinherit>:
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	fc 01       	movw	r30, r24
    342a:	89 2b       	or	r24, r25
    342c:	09 f4       	brne	.+2      	; 0x3430 <xTaskPriorityDisinherit+0x10>
    342e:	49 c0       	rjmp	.+146    	; 0x34c2 <xTaskPriorityDisinherit+0xa2>
    3430:	86 a5       	ldd	r24, Z+46	; 0x2e
    3432:	81 50       	subi	r24, 0x01	; 1
    3434:	86 a7       	std	Z+46, r24	; 0x2e
    3436:	22 8d       	ldd	r18, Z+26	; 0x1a
    3438:	95 a5       	ldd	r25, Z+45	; 0x2d
    343a:	29 17       	cp	r18, r25
    343c:	09 f4       	brne	.+2      	; 0x3440 <xTaskPriorityDisinherit+0x20>
    343e:	43 c0       	rjmp	.+134    	; 0x34c6 <xTaskPriorityDisinherit+0xa6>
    3440:	81 11       	cpse	r24, r1
    3442:	43 c0       	rjmp	.+134    	; 0x34ca <xTaskPriorityDisinherit+0xaa>
    3444:	ef 01       	movw	r28, r30
    3446:	8f 01       	movw	r16, r30
    3448:	0e 5f       	subi	r16, 0xFE	; 254
    344a:	1f 4f       	sbci	r17, 0xFF	; 255
    344c:	c8 01       	movw	r24, r16
    344e:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
    3452:	ed a5       	ldd	r30, Y+45	; 0x2d
    3454:	ea 8f       	std	Y+26, r30	; 0x1a
    3456:	8a e0       	ldi	r24, 0x0A	; 10
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	a0 e0       	ldi	r26, 0x00	; 0
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	8e 1b       	sub	r24, r30
    3460:	91 09       	sbc	r25, r1
    3462:	a1 09       	sbc	r26, r1
    3464:	b1 09       	sbc	r27, r1
    3466:	8e 87       	std	Y+14, r24	; 0x0e
    3468:	9f 87       	std	Y+15, r25	; 0x0f
    346a:	a8 8b       	std	Y+16, r26	; 0x10
    346c:	b9 8b       	std	Y+17, r27	; 0x11
    346e:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    3472:	8e 17       	cp	r24, r30
    3474:	10 f4       	brcc	.+4      	; 0x347a <xTaskPriorityDisinherit+0x5a>
    3476:	e0 93 91 13 	sts	0x1391, r30	; 0x801391 <uxTopReadyPriority>
    347a:	8b e0       	ldi	r24, 0x0B	; 11
    347c:	8e 9f       	mul	r24, r30
    347e:	f0 01       	movw	r30, r0
    3480:	11 24       	eor	r1, r1
    3482:	ed 52       	subi	r30, 0x2D	; 45
    3484:	fc 4e       	sbci	r31, 0xEC	; 236
    3486:	01 80       	ldd	r0, Z+1	; 0x01
    3488:	f2 81       	ldd	r31, Z+2	; 0x02
    348a:	e0 2d       	mov	r30, r0
    348c:	ff 83       	std	Y+7, r31	; 0x07
    348e:	ee 83       	std	Y+6, r30	; 0x06
    3490:	26 81       	ldd	r18, Z+6	; 0x06
    3492:	37 81       	ldd	r19, Z+7	; 0x07
    3494:	39 87       	std	Y+9, r19	; 0x09
    3496:	28 87       	std	Y+8, r18	; 0x08
    3498:	a6 81       	ldd	r26, Z+6	; 0x06
    349a:	b7 81       	ldd	r27, Z+7	; 0x07
    349c:	15 96       	adiw	r26, 0x05	; 5
    349e:	1c 93       	st	X, r17
    34a0:	0e 93       	st	-X, r16
    34a2:	14 97       	sbiw	r26, 0x04	; 4
    34a4:	17 83       	std	Z+7, r17	; 0x07
    34a6:	06 83       	std	Z+6, r16	; 0x06
    34a8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    34aa:	8e 9f       	mul	r24, r30
    34ac:	f0 01       	movw	r30, r0
    34ae:	11 24       	eor	r1, r1
    34b0:	ed 52       	subi	r30, 0x2D	; 45
    34b2:	fc 4e       	sbci	r31, 0xEC	; 236
    34b4:	fd 87       	std	Y+13, r31	; 0x0d
    34b6:	ec 87       	std	Y+12, r30	; 0x0c
    34b8:	80 81       	ld	r24, Z
    34ba:	8f 5f       	subi	r24, 0xFF	; 255
    34bc:	80 83       	st	Z, r24
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	05 c0       	rjmp	.+10     	; 0x34cc <xTaskPriorityDisinherit+0xac>
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	03 c0       	rjmp	.+6      	; 0x34cc <xTaskPriorityDisinherit+0xac>
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <xTaskPriorityDisinherit+0xac>
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	08 95       	ret

000034d6 <vTaskPriorityDisinheritAfterTimeout>:
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	fc 01       	movw	r30, r24
    34e0:	89 2b       	or	r24, r25
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    34e4:	5a c0       	rjmp	.+180    	; 0x359a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    34e6:	85 a5       	ldd	r24, Z+45	; 0x2d
    34e8:	86 17       	cp	r24, r22
    34ea:	08 f4       	brcc	.+2      	; 0x34ee <vTaskPriorityDisinheritAfterTimeout+0x18>
    34ec:	86 2f       	mov	r24, r22
    34ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    34f0:	89 17       	cp	r24, r25
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    34f4:	52 c0       	rjmp	.+164    	; 0x359a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    34f6:	26 a5       	ldd	r18, Z+46	; 0x2e
    34f8:	21 30       	cpi	r18, 0x01	; 1
    34fa:	09 f0       	breq	.+2      	; 0x34fe <vTaskPriorityDisinheritAfterTimeout+0x28>
    34fc:	4e c0       	rjmp	.+156    	; 0x359a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    34fe:	82 8f       	std	Z+26, r24	; 0x1a
    3500:	46 85       	ldd	r20, Z+14	; 0x0e
    3502:	57 85       	ldd	r21, Z+15	; 0x0f
    3504:	60 89       	ldd	r22, Z+16	; 0x10
    3506:	71 89       	ldd	r23, Z+17	; 0x11
    3508:	77 23       	and	r23, r23
    350a:	64 f0       	brlt	.+24     	; 0x3524 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    350c:	4a e0       	ldi	r20, 0x0A	; 10
    350e:	50 e0       	ldi	r21, 0x00	; 0
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	48 1b       	sub	r20, r24
    3516:	51 09       	sbc	r21, r1
    3518:	61 09       	sbc	r22, r1
    351a:	71 09       	sbc	r23, r1
    351c:	46 87       	std	Z+14, r20	; 0x0e
    351e:	57 87       	std	Z+15, r21	; 0x0f
    3520:	60 8b       	std	Z+16, r22	; 0x10
    3522:	71 8b       	std	Z+17, r23	; 0x11
    3524:	24 85       	ldd	r18, Z+12	; 0x0c
    3526:	35 85       	ldd	r19, Z+13	; 0x0d
    3528:	4b e0       	ldi	r20, 0x0B	; 11
    352a:	94 9f       	mul	r25, r20
    352c:	c0 01       	movw	r24, r0
    352e:	11 24       	eor	r1, r1
    3530:	8d 52       	subi	r24, 0x2D	; 45
    3532:	9c 4e       	sbci	r25, 0xEC	; 236
    3534:	28 17       	cp	r18, r24
    3536:	39 07       	cpc	r19, r25
    3538:	81 f5       	brne	.+96     	; 0x359a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    353a:	ef 01       	movw	r28, r30
    353c:	8f 01       	movw	r16, r30
    353e:	0e 5f       	subi	r16, 0xFE	; 254
    3540:	1f 4f       	sbci	r17, 0xFF	; 255
    3542:	c8 01       	movw	r24, r16
    3544:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
    3548:	ea 8d       	ldd	r30, Y+26	; 0x1a
    354a:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    354e:	8e 17       	cp	r24, r30
    3550:	10 f4       	brcc	.+4      	; 0x3556 <vTaskPriorityDisinheritAfterTimeout+0x80>
    3552:	e0 93 91 13 	sts	0x1391, r30	; 0x801391 <uxTopReadyPriority>
    3556:	8b e0       	ldi	r24, 0x0B	; 11
    3558:	8e 9f       	mul	r24, r30
    355a:	f0 01       	movw	r30, r0
    355c:	11 24       	eor	r1, r1
    355e:	ed 52       	subi	r30, 0x2D	; 45
    3560:	fc 4e       	sbci	r31, 0xEC	; 236
    3562:	01 80       	ldd	r0, Z+1	; 0x01
    3564:	f2 81       	ldd	r31, Z+2	; 0x02
    3566:	e0 2d       	mov	r30, r0
    3568:	ff 83       	std	Y+7, r31	; 0x07
    356a:	ee 83       	std	Y+6, r30	; 0x06
    356c:	26 81       	ldd	r18, Z+6	; 0x06
    356e:	37 81       	ldd	r19, Z+7	; 0x07
    3570:	39 87       	std	Y+9, r19	; 0x09
    3572:	28 87       	std	Y+8, r18	; 0x08
    3574:	a6 81       	ldd	r26, Z+6	; 0x06
    3576:	b7 81       	ldd	r27, Z+7	; 0x07
    3578:	15 96       	adiw	r26, 0x05	; 5
    357a:	1c 93       	st	X, r17
    357c:	0e 93       	st	-X, r16
    357e:	14 97       	sbiw	r26, 0x04	; 4
    3580:	17 83       	std	Z+7, r17	; 0x07
    3582:	06 83       	std	Z+6, r16	; 0x06
    3584:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3586:	8e 9f       	mul	r24, r30
    3588:	f0 01       	movw	r30, r0
    358a:	11 24       	eor	r1, r1
    358c:	ed 52       	subi	r30, 0x2D	; 45
    358e:	fc 4e       	sbci	r31, 0xEC	; 236
    3590:	fd 87       	std	Y+13, r31	; 0x0d
    3592:	ec 87       	std	Y+12, r30	; 0x0c
    3594:	80 81       	ld	r24, Z
    3596:	8f 5f       	subi	r24, 0xFF	; 255
    3598:	80 83       	st	Z, r24
    359a:	df 91       	pop	r29
    359c:	cf 91       	pop	r28
    359e:	1f 91       	pop	r17
    35a0:	0f 91       	pop	r16
    35a2:	08 95       	ret

000035a4 <uxTaskResetEventItemValue>:
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    35b0:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    35b4:	66 85       	ldd	r22, Z+14	; 0x0e
    35b6:	77 85       	ldd	r23, Z+15	; 0x0f
    35b8:	80 89       	ldd	r24, Z+16	; 0x10
    35ba:	91 89       	ldd	r25, Z+17	; 0x11
    35bc:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    35c0:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    35c4:	a0 91 41 14 	lds	r26, 0x1441	; 0x801441 <pxCurrentTCB>
    35c8:	b0 91 42 14 	lds	r27, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    35cc:	5a 96       	adiw	r26, 0x1a	; 26
    35ce:	2c 91       	ld	r18, X
    35d0:	0f 2e       	mov	r0, r31
    35d2:	fa e0       	ldi	r31, 0x0A	; 10
    35d4:	cf 2e       	mov	r12, r31
    35d6:	d1 2c       	mov	r13, r1
    35d8:	e1 2c       	mov	r14, r1
    35da:	f1 2c       	mov	r15, r1
    35dc:	f0 2d       	mov	r31, r0
    35de:	c2 1a       	sub	r12, r18
    35e0:	d1 08       	sbc	r13, r1
    35e2:	e1 08       	sbc	r14, r1
    35e4:	f1 08       	sbc	r15, r1
    35e6:	c6 86       	std	Z+14, r12	; 0x0e
    35e8:	d7 86       	std	Z+15, r13	; 0x0f
    35ea:	e0 8a       	std	Z+16, r14	; 0x10
    35ec:	f1 8a       	std	Z+17, r15	; 0x11
    35ee:	ff 90       	pop	r15
    35f0:	ef 90       	pop	r14
    35f2:	df 90       	pop	r13
    35f4:	cf 90       	pop	r12
    35f6:	08 95       	ret

000035f8 <pvTaskIncrementMutexHeldCount>:
    35f8:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    35fc:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3600:	89 2b       	or	r24, r25
    3602:	39 f0       	breq	.+14     	; 0x3612 <pvTaskIncrementMutexHeldCount+0x1a>
    3604:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    3608:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    360c:	86 a5       	ldd	r24, Z+46	; 0x2e
    360e:	8f 5f       	subi	r24, 0xFF	; 255
    3610:	86 a7       	std	Z+46, r24	; 0x2e
    3612:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    3616:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    361a:	08 95       	ret

0000361c <xTaskGenericNotifyWait>:
    361c:	4f 92       	push	r4
    361e:	5f 92       	push	r5
    3620:	6f 92       	push	r6
    3622:	7f 92       	push	r7
    3624:	af 92       	push	r10
    3626:	bf 92       	push	r11
    3628:	cf 92       	push	r12
    362a:	df 92       	push	r13
    362c:	ef 92       	push	r14
    362e:	ff 92       	push	r15
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	28 01       	movw	r4, r16
    363a:	39 01       	movw	r6, r18
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	0f 92       	push	r0
    3642:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    3646:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    364a:	c8 2f       	mov	r28, r24
    364c:	d0 e0       	ldi	r29, 0x00	; 0
    364e:	ec 0f       	add	r30, r28
    3650:	fd 1f       	adc	r31, r29
    3652:	83 a9       	ldd	r24, Z+51	; 0x33
    3654:	82 30       	cpi	r24, 0x02	; 2
    3656:	79 f1       	breq	.+94     	; 0x36b6 <xTaskGenericNotifyWait+0x9a>
    3658:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    365c:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3660:	ce 01       	movw	r24, r28
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	88 0f       	add	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	e8 0f       	add	r30, r24
    366c:	f9 1f       	adc	r31, r25
    366e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3670:	90 a9       	ldd	r25, Z+48	; 0x30
    3672:	a1 a9       	ldd	r26, Z+49	; 0x31
    3674:	b2 a9       	ldd	r27, Z+50	; 0x32
    3676:	40 95       	com	r20
    3678:	50 95       	com	r21
    367a:	60 95       	com	r22
    367c:	70 95       	com	r23
    367e:	48 23       	and	r20, r24
    3680:	59 23       	and	r21, r25
    3682:	6a 23       	and	r22, r26
    3684:	7b 23       	and	r23, r27
    3686:	47 a7       	std	Z+47, r20	; 0x2f
    3688:	50 ab       	std	Z+48, r21	; 0x30
    368a:	61 ab       	std	Z+49, r22	; 0x31
    368c:	72 ab       	std	Z+50, r23	; 0x32
    368e:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    3692:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3696:	ec 0f       	add	r30, r28
    3698:	fd 1f       	adc	r31, r29
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	83 ab       	std	Z+51, r24	; 0x33
    369e:	a1 14       	cp	r10, r1
    36a0:	b1 04       	cpc	r11, r1
    36a2:	c1 04       	cpc	r12, r1
    36a4:	d1 04       	cpc	r13, r1
    36a6:	39 f0       	breq	.+14     	; 0x36b6 <xTaskGenericNotifyWait+0x9a>
    36a8:	41 e0       	ldi	r20, 0x01	; 1
    36aa:	c6 01       	movw	r24, r12
    36ac:	b5 01       	movw	r22, r10
    36ae:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    36b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    36b6:	0f 90       	pop	r0
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	0f 92       	push	r0
    36c0:	e1 14       	cp	r14, r1
    36c2:	f1 04       	cpc	r15, r1
    36c4:	a1 f0       	breq	.+40     	; 0x36ee <xTaskGenericNotifyWait+0xd2>
    36c6:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    36ca:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    36ce:	ce 01       	movw	r24, r28
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	e8 0f       	add	r30, r24
    36da:	f9 1f       	adc	r31, r25
    36dc:	87 a5       	ldd	r24, Z+47	; 0x2f
    36de:	90 a9       	ldd	r25, Z+48	; 0x30
    36e0:	a1 a9       	ldd	r26, Z+49	; 0x31
    36e2:	b2 a9       	ldd	r27, Z+50	; 0x32
    36e4:	f7 01       	movw	r30, r14
    36e6:	80 83       	st	Z, r24
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	a2 83       	std	Z+2, r26	; 0x02
    36ec:	b3 83       	std	Z+3, r27	; 0x03
    36ee:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    36f2:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    36f6:	ec 0f       	add	r30, r28
    36f8:	fd 1f       	adc	r31, r29
    36fa:	83 a9       	ldd	r24, Z+51	; 0x33
    36fc:	82 30       	cpi	r24, 0x02	; 2
    36fe:	e9 f4       	brne	.+58     	; 0x373a <xTaskGenericNotifyWait+0x11e>
    3700:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    3704:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3708:	ce 01       	movw	r24, r28
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	e8 0f       	add	r30, r24
    3714:	f9 1f       	adc	r31, r25
    3716:	87 a5       	ldd	r24, Z+47	; 0x2f
    3718:	90 a9       	ldd	r25, Z+48	; 0x30
    371a:	a1 a9       	ldd	r26, Z+49	; 0x31
    371c:	b2 a9       	ldd	r27, Z+50	; 0x32
    371e:	40 94       	com	r4
    3720:	50 94       	com	r5
    3722:	60 94       	com	r6
    3724:	70 94       	com	r7
    3726:	48 22       	and	r4, r24
    3728:	59 22       	and	r5, r25
    372a:	6a 22       	and	r6, r26
    372c:	7b 22       	and	r7, r27
    372e:	47 a6       	std	Z+47, r4	; 0x2f
    3730:	50 aa       	std	Z+48, r5	; 0x30
    3732:	61 aa       	std	Z+49, r6	; 0x31
    3734:	72 aa       	std	Z+50, r7	; 0x32
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	01 c0       	rjmp	.+2      	; 0x373c <xTaskGenericNotifyWait+0x120>
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	20 91 41 14 	lds	r18, 0x1441	; 0x801441 <pxCurrentTCB>
    3740:	30 91 42 14 	lds	r19, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3744:	c2 0f       	add	r28, r18
    3746:	d3 1f       	adc	r29, r19
    3748:	1b aa       	std	Y+51, r1	; 0x33
    374a:	0f 90       	pop	r0
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
    3756:	ff 90       	pop	r15
    3758:	ef 90       	pop	r14
    375a:	df 90       	pop	r13
    375c:	cf 90       	pop	r12
    375e:	bf 90       	pop	r11
    3760:	af 90       	pop	r10
    3762:	7f 90       	pop	r7
    3764:	6f 90       	pop	r6
    3766:	5f 90       	pop	r5
    3768:	4f 90       	pop	r4
    376a:	08 95       	ret

0000376c <xTaskGenericNotify>:
    376c:	8f 92       	push	r8
    376e:	9f 92       	push	r9
    3770:	af 92       	push	r10
    3772:	bf 92       	push	r11
    3774:	ef 92       	push	r14
    3776:	ff 92       	push	r15
    3778:	0f 93       	push	r16
    377a:	cf 93       	push	r28
    377c:	df 93       	push	r29
    377e:	dc 01       	movw	r26, r24
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	0f 92       	push	r0
    3786:	e1 14       	cp	r14, r1
    3788:	f1 04       	cpc	r15, r1
    378a:	89 f0       	breq	.+34     	; 0x37ae <xTaskGenericNotify+0x42>
    378c:	e6 2f       	mov	r30, r22
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	ee 0f       	add	r30, r30
    3792:	ff 1f       	adc	r31, r31
    3794:	ee 0f       	add	r30, r30
    3796:	ff 1f       	adc	r31, r31
    3798:	e8 0f       	add	r30, r24
    379a:	f9 1f       	adc	r31, r25
    379c:	87 a4       	ldd	r8, Z+47	; 0x2f
    379e:	90 a8       	ldd	r9, Z+48	; 0x30
    37a0:	a1 a8       	ldd	r10, Z+49	; 0x31
    37a2:	b2 a8       	ldd	r11, Z+50	; 0x32
    37a4:	f7 01       	movw	r30, r14
    37a6:	80 82       	st	Z, r8
    37a8:	91 82       	std	Z+1, r9	; 0x01
    37aa:	a2 82       	std	Z+2, r10	; 0x02
    37ac:	b3 82       	std	Z+3, r11	; 0x03
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	fd 01       	movw	r30, r26
    37b2:	e6 0f       	add	r30, r22
    37b4:	f7 1f       	adc	r31, r23
    37b6:	83 a9       	ldd	r24, Z+51	; 0x33
    37b8:	92 e0       	ldi	r25, 0x02	; 2
    37ba:	93 ab       	std	Z+51, r25	; 0x33
    37bc:	02 30       	cpi	r16, 0x02	; 2
    37be:	01 f1       	breq	.+64     	; 0x3800 <xTaskGenericNotify+0x94>
    37c0:	18 f4       	brcc	.+6      	; 0x37c8 <xTaskGenericNotify+0x5c>
    37c2:	01 30       	cpi	r16, 0x01	; 1
    37c4:	31 f0       	breq	.+12     	; 0x37d2 <xTaskGenericNotify+0x66>
    37c6:	4d c0       	rjmp	.+154    	; 0x3862 <xTaskGenericNotify+0xf6>
    37c8:	03 30       	cpi	r16, 0x03	; 3
    37ca:	79 f1       	breq	.+94     	; 0x382a <xTaskGenericNotify+0xbe>
    37cc:	04 30       	cpi	r16, 0x04	; 4
    37ce:	d1 f1       	breq	.+116    	; 0x3844 <xTaskGenericNotify+0xd8>
    37d0:	48 c0       	rjmp	.+144    	; 0x3862 <xTaskGenericNotify+0xf6>
    37d2:	66 0f       	add	r22, r22
    37d4:	77 1f       	adc	r23, r23
    37d6:	66 0f       	add	r22, r22
    37d8:	77 1f       	adc	r23, r23
    37da:	fd 01       	movw	r30, r26
    37dc:	e6 0f       	add	r30, r22
    37de:	f7 1f       	adc	r31, r23
    37e0:	87 a4       	ldd	r8, Z+47	; 0x2f
    37e2:	90 a8       	ldd	r9, Z+48	; 0x30
    37e4:	a1 a8       	ldd	r10, Z+49	; 0x31
    37e6:	b2 a8       	ldd	r11, Z+50	; 0x32
    37e8:	ba 01       	movw	r22, r20
    37ea:	a9 01       	movw	r20, r18
    37ec:	48 29       	or	r20, r8
    37ee:	59 29       	or	r21, r9
    37f0:	6a 29       	or	r22, r10
    37f2:	7b 29       	or	r23, r11
    37f4:	47 a7       	std	Z+47, r20	; 0x2f
    37f6:	50 ab       	std	Z+48, r21	; 0x30
    37f8:	61 ab       	std	Z+49, r22	; 0x31
    37fa:	72 ab       	std	Z+50, r23	; 0x32
    37fc:	01 e0       	ldi	r16, 0x01	; 1
    37fe:	34 c0       	rjmp	.+104    	; 0x3868 <xTaskGenericNotify+0xfc>
    3800:	66 0f       	add	r22, r22
    3802:	77 1f       	adc	r23, r23
    3804:	66 0f       	add	r22, r22
    3806:	77 1f       	adc	r23, r23
    3808:	fd 01       	movw	r30, r26
    380a:	e6 0f       	add	r30, r22
    380c:	f7 1f       	adc	r31, r23
    380e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3810:	50 a9       	ldd	r21, Z+48	; 0x30
    3812:	61 a9       	ldd	r22, Z+49	; 0x31
    3814:	72 a9       	ldd	r23, Z+50	; 0x32
    3816:	4f 5f       	subi	r20, 0xFF	; 255
    3818:	5f 4f       	sbci	r21, 0xFF	; 255
    381a:	6f 4f       	sbci	r22, 0xFF	; 255
    381c:	7f 4f       	sbci	r23, 0xFF	; 255
    381e:	47 a7       	std	Z+47, r20	; 0x2f
    3820:	50 ab       	std	Z+48, r21	; 0x30
    3822:	61 ab       	std	Z+49, r22	; 0x31
    3824:	72 ab       	std	Z+50, r23	; 0x32
    3826:	01 e0       	ldi	r16, 0x01	; 1
    3828:	1f c0       	rjmp	.+62     	; 0x3868 <xTaskGenericNotify+0xfc>
    382a:	66 0f       	add	r22, r22
    382c:	77 1f       	adc	r23, r23
    382e:	66 0f       	add	r22, r22
    3830:	77 1f       	adc	r23, r23
    3832:	fd 01       	movw	r30, r26
    3834:	e6 0f       	add	r30, r22
    3836:	f7 1f       	adc	r31, r23
    3838:	27 a7       	std	Z+47, r18	; 0x2f
    383a:	30 ab       	std	Z+48, r19	; 0x30
    383c:	41 ab       	std	Z+49, r20	; 0x31
    383e:	52 ab       	std	Z+50, r21	; 0x32
    3840:	01 e0       	ldi	r16, 0x01	; 1
    3842:	12 c0       	rjmp	.+36     	; 0x3868 <xTaskGenericNotify+0xfc>
    3844:	82 30       	cpi	r24, 0x02	; 2
    3846:	79 f0       	breq	.+30     	; 0x3866 <xTaskGenericNotify+0xfa>
    3848:	66 0f       	add	r22, r22
    384a:	77 1f       	adc	r23, r23
    384c:	66 0f       	add	r22, r22
    384e:	77 1f       	adc	r23, r23
    3850:	fd 01       	movw	r30, r26
    3852:	e6 0f       	add	r30, r22
    3854:	f7 1f       	adc	r31, r23
    3856:	27 a7       	std	Z+47, r18	; 0x2f
    3858:	30 ab       	std	Z+48, r19	; 0x30
    385a:	41 ab       	std	Z+49, r20	; 0x31
    385c:	52 ab       	std	Z+50, r21	; 0x32
    385e:	01 e0       	ldi	r16, 0x01	; 1
    3860:	03 c0       	rjmp	.+6      	; 0x3868 <xTaskGenericNotify+0xfc>
    3862:	01 e0       	ldi	r16, 0x01	; 1
    3864:	01 c0       	rjmp	.+2      	; 0x3868 <xTaskGenericNotify+0xfc>
    3866:	00 e0       	ldi	r16, 0x00	; 0
    3868:	81 30       	cpi	r24, 0x01	; 1
    386a:	09 f0       	breq	.+2      	; 0x386e <xTaskGenericNotify+0x102>
    386c:	69 c0       	rjmp	.+210    	; 0x3940 <xTaskGenericNotify+0x1d4>
    386e:	1c 96       	adiw	r26, 0x0c	; 12
    3870:	ed 91       	ld	r30, X+
    3872:	fc 91       	ld	r31, X
    3874:	1d 97       	sbiw	r26, 0x0d	; 13
    3876:	16 96       	adiw	r26, 0x06	; 6
    3878:	cd 91       	ld	r28, X+
    387a:	dc 91       	ld	r29, X
    387c:	17 97       	sbiw	r26, 0x07	; 7
    387e:	18 96       	adiw	r26, 0x08	; 8
    3880:	8d 91       	ld	r24, X+
    3882:	9c 91       	ld	r25, X
    3884:	19 97       	sbiw	r26, 0x09	; 9
    3886:	9f 83       	std	Y+7, r25	; 0x07
    3888:	8e 83       	std	Y+6, r24	; 0x06
    388a:	18 96       	adiw	r26, 0x08	; 8
    388c:	cd 91       	ld	r28, X+
    388e:	dc 91       	ld	r29, X
    3890:	19 97       	sbiw	r26, 0x09	; 9
    3892:	16 96       	adiw	r26, 0x06	; 6
    3894:	8d 91       	ld	r24, X+
    3896:	9c 91       	ld	r25, X
    3898:	17 97       	sbiw	r26, 0x07	; 7
    389a:	9d 83       	std	Y+5, r25	; 0x05
    389c:	8c 83       	std	Y+4, r24	; 0x04
    389e:	81 81       	ldd	r24, Z+1	; 0x01
    38a0:	92 81       	ldd	r25, Z+2	; 0x02
    38a2:	9d 01       	movw	r18, r26
    38a4:	2e 5f       	subi	r18, 0xFE	; 254
    38a6:	3f 4f       	sbci	r19, 0xFF	; 255
    38a8:	82 17       	cp	r24, r18
    38aa:	93 07       	cpc	r25, r19
    38ac:	31 f4       	brne	.+12     	; 0x38ba <xTaskGenericNotify+0x14e>
    38ae:	18 96       	adiw	r26, 0x08	; 8
    38b0:	8d 91       	ld	r24, X+
    38b2:	9c 91       	ld	r25, X
    38b4:	19 97       	sbiw	r26, 0x09	; 9
    38b6:	92 83       	std	Z+2, r25	; 0x02
    38b8:	81 83       	std	Z+1, r24	; 0x01
    38ba:	1d 96       	adiw	r26, 0x0d	; 13
    38bc:	1c 92       	st	X, r1
    38be:	1e 92       	st	-X, r1
    38c0:	1c 97       	sbiw	r26, 0x0c	; 12
    38c2:	80 81       	ld	r24, Z
    38c4:	81 50       	subi	r24, 0x01	; 1
    38c6:	80 83       	st	Z, r24
    38c8:	5a 96       	adiw	r26, 0x1a	; 26
    38ca:	ec 91       	ld	r30, X
    38cc:	5a 97       	sbiw	r26, 0x1a	; 26
    38ce:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <uxTopReadyPriority>
    38d2:	8e 17       	cp	r24, r30
    38d4:	10 f4       	brcc	.+4      	; 0x38da <xTaskGenericNotify+0x16e>
    38d6:	e0 93 91 13 	sts	0x1391, r30	; 0x801391 <uxTopReadyPriority>
    38da:	8b e0       	ldi	r24, 0x0B	; 11
    38dc:	8e 9f       	mul	r24, r30
    38de:	f0 01       	movw	r30, r0
    38e0:	11 24       	eor	r1, r1
    38e2:	ed 52       	subi	r30, 0x2D	; 45
    38e4:	fc 4e       	sbci	r31, 0xEC	; 236
    38e6:	01 80       	ldd	r0, Z+1	; 0x01
    38e8:	f2 81       	ldd	r31, Z+2	; 0x02
    38ea:	e0 2d       	mov	r30, r0
    38ec:	17 96       	adiw	r26, 0x07	; 7
    38ee:	fc 93       	st	X, r31
    38f0:	ee 93       	st	-X, r30
    38f2:	16 97       	sbiw	r26, 0x06	; 6
    38f4:	46 81       	ldd	r20, Z+6	; 0x06
    38f6:	57 81       	ldd	r21, Z+7	; 0x07
    38f8:	19 96       	adiw	r26, 0x09	; 9
    38fa:	5c 93       	st	X, r21
    38fc:	4e 93       	st	-X, r20
    38fe:	18 97       	sbiw	r26, 0x08	; 8
    3900:	c6 81       	ldd	r28, Z+6	; 0x06
    3902:	d7 81       	ldd	r29, Z+7	; 0x07
    3904:	3d 83       	std	Y+5, r19	; 0x05
    3906:	2c 83       	std	Y+4, r18	; 0x04
    3908:	37 83       	std	Z+7, r19	; 0x07
    390a:	26 83       	std	Z+6, r18	; 0x06
    390c:	5a 96       	adiw	r26, 0x1a	; 26
    390e:	ec 91       	ld	r30, X
    3910:	5a 97       	sbiw	r26, 0x1a	; 26
    3912:	8e 9f       	mul	r24, r30
    3914:	f0 01       	movw	r30, r0
    3916:	11 24       	eor	r1, r1
    3918:	ed 52       	subi	r30, 0x2D	; 45
    391a:	fc 4e       	sbci	r31, 0xEC	; 236
    391c:	1d 96       	adiw	r26, 0x0d	; 13
    391e:	fc 93       	st	X, r31
    3920:	ee 93       	st	-X, r30
    3922:	1c 97       	sbiw	r26, 0x0c	; 12
    3924:	80 81       	ld	r24, Z
    3926:	8f 5f       	subi	r24, 0xFF	; 255
    3928:	80 83       	st	Z, r24
    392a:	5a 96       	adiw	r26, 0x1a	; 26
    392c:	9c 91       	ld	r25, X
    392e:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    3932:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3936:	82 8d       	ldd	r24, Z+26	; 0x1a
    3938:	89 17       	cp	r24, r25
    393a:	10 f4       	brcc	.+4      	; 0x3940 <xTaskGenericNotify+0x1d4>
    393c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    3940:	0f 90       	pop	r0
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	80 2f       	mov	r24, r16
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	0f 91       	pop	r16
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	bf 90       	pop	r11
    3952:	af 90       	pop	r10
    3954:	9f 90       	pop	r9
    3956:	8f 90       	pop	r8
    3958:	08 95       	ret

0000395a <xTaskGenericNotifyFromISR>:
    395a:	8f 92       	push	r8
    395c:	9f 92       	push	r9
    395e:	af 92       	push	r10
    3960:	bf 92       	push	r11
    3962:	cf 92       	push	r12
    3964:	df 92       	push	r13
    3966:	ef 92       	push	r14
    3968:	ff 92       	push	r15
    396a:	0f 93       	push	r16
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	dc 01       	movw	r26, r24
    3972:	e1 14       	cp	r14, r1
    3974:	f1 04       	cpc	r15, r1
    3976:	89 f0       	breq	.+34     	; 0x399a <xTaskGenericNotifyFromISR+0x40>
    3978:	e6 2f       	mov	r30, r22
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	ee 0f       	add	r30, r30
    397e:	ff 1f       	adc	r31, r31
    3980:	ee 0f       	add	r30, r30
    3982:	ff 1f       	adc	r31, r31
    3984:	e8 0f       	add	r30, r24
    3986:	f9 1f       	adc	r31, r25
    3988:	87 a4       	ldd	r8, Z+47	; 0x2f
    398a:	90 a8       	ldd	r9, Z+48	; 0x30
    398c:	a1 a8       	ldd	r10, Z+49	; 0x31
    398e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3990:	f7 01       	movw	r30, r14
    3992:	80 82       	st	Z, r8
    3994:	91 82       	std	Z+1, r9	; 0x01
    3996:	a2 82       	std	Z+2, r10	; 0x02
    3998:	b3 82       	std	Z+3, r11	; 0x03
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	fd 01       	movw	r30, r26
    399e:	e6 0f       	add	r30, r22
    39a0:	f7 1f       	adc	r31, r23
    39a2:	93 a9       	ldd	r25, Z+51	; 0x33
    39a4:	82 e0       	ldi	r24, 0x02	; 2
    39a6:	83 ab       	std	Z+51, r24	; 0x33
    39a8:	02 30       	cpi	r16, 0x02	; 2
    39aa:	01 f1       	breq	.+64     	; 0x39ec <xTaskGenericNotifyFromISR+0x92>
    39ac:	18 f4       	brcc	.+6      	; 0x39b4 <xTaskGenericNotifyFromISR+0x5a>
    39ae:	01 30       	cpi	r16, 0x01	; 1
    39b0:	31 f0       	breq	.+12     	; 0x39be <xTaskGenericNotifyFromISR+0x64>
    39b2:	4d c0       	rjmp	.+154    	; 0x3a4e <xTaskGenericNotifyFromISR+0xf4>
    39b4:	03 30       	cpi	r16, 0x03	; 3
    39b6:	79 f1       	breq	.+94     	; 0x3a16 <xTaskGenericNotifyFromISR+0xbc>
    39b8:	04 30       	cpi	r16, 0x04	; 4
    39ba:	d1 f1       	breq	.+116    	; 0x3a30 <xTaskGenericNotifyFromISR+0xd6>
    39bc:	48 c0       	rjmp	.+144    	; 0x3a4e <xTaskGenericNotifyFromISR+0xf4>
    39be:	66 0f       	add	r22, r22
    39c0:	77 1f       	adc	r23, r23
    39c2:	66 0f       	add	r22, r22
    39c4:	77 1f       	adc	r23, r23
    39c6:	fd 01       	movw	r30, r26
    39c8:	e6 0f       	add	r30, r22
    39ca:	f7 1f       	adc	r31, r23
    39cc:	87 a4       	ldd	r8, Z+47	; 0x2f
    39ce:	90 a8       	ldd	r9, Z+48	; 0x30
    39d0:	a1 a8       	ldd	r10, Z+49	; 0x31
    39d2:	b2 a8       	ldd	r11, Z+50	; 0x32
    39d4:	ba 01       	movw	r22, r20
    39d6:	a9 01       	movw	r20, r18
    39d8:	48 29       	or	r20, r8
    39da:	59 29       	or	r21, r9
    39dc:	6a 29       	or	r22, r10
    39de:	7b 29       	or	r23, r11
    39e0:	47 a7       	std	Z+47, r20	; 0x2f
    39e2:	50 ab       	std	Z+48, r21	; 0x30
    39e4:	61 ab       	std	Z+49, r22	; 0x31
    39e6:	72 ab       	std	Z+50, r23	; 0x32
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	34 c0       	rjmp	.+104    	; 0x3a54 <xTaskGenericNotifyFromISR+0xfa>
    39ec:	66 0f       	add	r22, r22
    39ee:	77 1f       	adc	r23, r23
    39f0:	66 0f       	add	r22, r22
    39f2:	77 1f       	adc	r23, r23
    39f4:	fd 01       	movw	r30, r26
    39f6:	e6 0f       	add	r30, r22
    39f8:	f7 1f       	adc	r31, r23
    39fa:	47 a5       	ldd	r20, Z+47	; 0x2f
    39fc:	50 a9       	ldd	r21, Z+48	; 0x30
    39fe:	61 a9       	ldd	r22, Z+49	; 0x31
    3a00:	72 a9       	ldd	r23, Z+50	; 0x32
    3a02:	4f 5f       	subi	r20, 0xFF	; 255
    3a04:	5f 4f       	sbci	r21, 0xFF	; 255
    3a06:	6f 4f       	sbci	r22, 0xFF	; 255
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	47 a7       	std	Z+47, r20	; 0x2f
    3a0c:	50 ab       	std	Z+48, r21	; 0x30
    3a0e:	61 ab       	std	Z+49, r22	; 0x31
    3a10:	72 ab       	std	Z+50, r23	; 0x32
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	1f c0       	rjmp	.+62     	; 0x3a54 <xTaskGenericNotifyFromISR+0xfa>
    3a16:	66 0f       	add	r22, r22
    3a18:	77 1f       	adc	r23, r23
    3a1a:	66 0f       	add	r22, r22
    3a1c:	77 1f       	adc	r23, r23
    3a1e:	fd 01       	movw	r30, r26
    3a20:	e6 0f       	add	r30, r22
    3a22:	f7 1f       	adc	r31, r23
    3a24:	27 a7       	std	Z+47, r18	; 0x2f
    3a26:	30 ab       	std	Z+48, r19	; 0x30
    3a28:	41 ab       	std	Z+49, r20	; 0x31
    3a2a:	52 ab       	std	Z+50, r21	; 0x32
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	12 c0       	rjmp	.+36     	; 0x3a54 <xTaskGenericNotifyFromISR+0xfa>
    3a30:	92 30       	cpi	r25, 0x02	; 2
    3a32:	79 f0       	breq	.+30     	; 0x3a52 <xTaskGenericNotifyFromISR+0xf8>
    3a34:	66 0f       	add	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	66 0f       	add	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	fd 01       	movw	r30, r26
    3a3e:	e6 0f       	add	r30, r22
    3a40:	f7 1f       	adc	r31, r23
    3a42:	27 a7       	std	Z+47, r18	; 0x2f
    3a44:	30 ab       	std	Z+48, r19	; 0x30
    3a46:	41 ab       	std	Z+49, r20	; 0x31
    3a48:	52 ab       	std	Z+50, r21	; 0x32
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	03 c0       	rjmp	.+6      	; 0x3a54 <xTaskGenericNotifyFromISR+0xfa>
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	01 c0       	rjmp	.+2      	; 0x3a54 <xTaskGenericNotifyFromISR+0xfa>
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	91 30       	cpi	r25, 0x01	; 1
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <xTaskGenericNotifyFromISR+0x100>
    3a58:	96 c0       	rjmp	.+300    	; 0x3b86 <xTaskGenericNotifyFromISR+0x22c>
    3a5a:	90 91 82 13 	lds	r25, 0x1382	; 0x801382 <uxSchedulerSuspended>
    3a5e:	91 11       	cpse	r25, r1
    3a60:	5f c0       	rjmp	.+190    	; 0x3b20 <xTaskGenericNotifyFromISR+0x1c6>
    3a62:	1c 96       	adiw	r26, 0x0c	; 12
    3a64:	ed 91       	ld	r30, X+
    3a66:	fc 91       	ld	r31, X
    3a68:	1d 97       	sbiw	r26, 0x0d	; 13
    3a6a:	16 96       	adiw	r26, 0x06	; 6
    3a6c:	cd 91       	ld	r28, X+
    3a6e:	dc 91       	ld	r29, X
    3a70:	17 97       	sbiw	r26, 0x07	; 7
    3a72:	18 96       	adiw	r26, 0x08	; 8
    3a74:	2d 91       	ld	r18, X+
    3a76:	3c 91       	ld	r19, X
    3a78:	19 97       	sbiw	r26, 0x09	; 9
    3a7a:	3f 83       	std	Y+7, r19	; 0x07
    3a7c:	2e 83       	std	Y+6, r18	; 0x06
    3a7e:	18 96       	adiw	r26, 0x08	; 8
    3a80:	cd 91       	ld	r28, X+
    3a82:	dc 91       	ld	r29, X
    3a84:	19 97       	sbiw	r26, 0x09	; 9
    3a86:	16 96       	adiw	r26, 0x06	; 6
    3a88:	2d 91       	ld	r18, X+
    3a8a:	3c 91       	ld	r19, X
    3a8c:	17 97       	sbiw	r26, 0x07	; 7
    3a8e:	3d 83       	std	Y+5, r19	; 0x05
    3a90:	2c 83       	std	Y+4, r18	; 0x04
    3a92:	41 81       	ldd	r20, Z+1	; 0x01
    3a94:	52 81       	ldd	r21, Z+2	; 0x02
    3a96:	9d 01       	movw	r18, r26
    3a98:	2e 5f       	subi	r18, 0xFE	; 254
    3a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9c:	42 17       	cp	r20, r18
    3a9e:	53 07       	cpc	r21, r19
    3aa0:	31 f4       	brne	.+12     	; 0x3aae <xTaskGenericNotifyFromISR+0x154>
    3aa2:	18 96       	adiw	r26, 0x08	; 8
    3aa4:	4d 91       	ld	r20, X+
    3aa6:	5c 91       	ld	r21, X
    3aa8:	19 97       	sbiw	r26, 0x09	; 9
    3aaa:	52 83       	std	Z+2, r21	; 0x02
    3aac:	41 83       	std	Z+1, r20	; 0x01
    3aae:	1d 96       	adiw	r26, 0x0d	; 13
    3ab0:	1c 92       	st	X, r1
    3ab2:	1e 92       	st	-X, r1
    3ab4:	1c 97       	sbiw	r26, 0x0c	; 12
    3ab6:	90 81       	ld	r25, Z
    3ab8:	91 50       	subi	r25, 0x01	; 1
    3aba:	90 83       	st	Z, r25
    3abc:	5a 96       	adiw	r26, 0x1a	; 26
    3abe:	ec 91       	ld	r30, X
    3ac0:	5a 97       	sbiw	r26, 0x1a	; 26
    3ac2:	90 91 91 13 	lds	r25, 0x1391	; 0x801391 <uxTopReadyPriority>
    3ac6:	9e 17       	cp	r25, r30
    3ac8:	10 f4       	brcc	.+4      	; 0x3ace <xTaskGenericNotifyFromISR+0x174>
    3aca:	e0 93 91 13 	sts	0x1391, r30	; 0x801391 <uxTopReadyPriority>
    3ace:	9b e0       	ldi	r25, 0x0B	; 11
    3ad0:	9e 9f       	mul	r25, r30
    3ad2:	f0 01       	movw	r30, r0
    3ad4:	11 24       	eor	r1, r1
    3ad6:	ed 52       	subi	r30, 0x2D	; 45
    3ad8:	fc 4e       	sbci	r31, 0xEC	; 236
    3ada:	01 80       	ldd	r0, Z+1	; 0x01
    3adc:	f2 81       	ldd	r31, Z+2	; 0x02
    3ade:	e0 2d       	mov	r30, r0
    3ae0:	17 96       	adiw	r26, 0x07	; 7
    3ae2:	fc 93       	st	X, r31
    3ae4:	ee 93       	st	-X, r30
    3ae6:	16 97       	sbiw	r26, 0x06	; 6
    3ae8:	46 81       	ldd	r20, Z+6	; 0x06
    3aea:	57 81       	ldd	r21, Z+7	; 0x07
    3aec:	19 96       	adiw	r26, 0x09	; 9
    3aee:	5c 93       	st	X, r21
    3af0:	4e 93       	st	-X, r20
    3af2:	18 97       	sbiw	r26, 0x08	; 8
    3af4:	c6 81       	ldd	r28, Z+6	; 0x06
    3af6:	d7 81       	ldd	r29, Z+7	; 0x07
    3af8:	3d 83       	std	Y+5, r19	; 0x05
    3afa:	2c 83       	std	Y+4, r18	; 0x04
    3afc:	37 83       	std	Z+7, r19	; 0x07
    3afe:	26 83       	std	Z+6, r18	; 0x06
    3b00:	5a 96       	adiw	r26, 0x1a	; 26
    3b02:	ec 91       	ld	r30, X
    3b04:	5a 97       	sbiw	r26, 0x1a	; 26
    3b06:	9e 9f       	mul	r25, r30
    3b08:	f0 01       	movw	r30, r0
    3b0a:	11 24       	eor	r1, r1
    3b0c:	ed 52       	subi	r30, 0x2D	; 45
    3b0e:	fc 4e       	sbci	r31, 0xEC	; 236
    3b10:	1d 96       	adiw	r26, 0x0d	; 13
    3b12:	fc 93       	st	X, r31
    3b14:	ee 93       	st	-X, r30
    3b16:	1c 97       	sbiw	r26, 0x0c	; 12
    3b18:	90 81       	ld	r25, Z
    3b1a:	9f 5f       	subi	r25, 0xFF	; 255
    3b1c:	90 83       	st	Z, r25
    3b1e:	21 c0       	rjmp	.+66     	; 0x3b62 <xTaskGenericNotifyFromISR+0x208>
    3b20:	6e ea       	ldi	r22, 0xAE	; 174
    3b22:	73 e1       	ldi	r23, 0x13	; 19
    3b24:	fb 01       	movw	r30, r22
    3b26:	c1 81       	ldd	r28, Z+1	; 0x01
    3b28:	d2 81       	ldd	r29, Z+2	; 0x02
    3b2a:	53 96       	adiw	r26, 0x13	; 19
    3b2c:	dc 93       	st	X, r29
    3b2e:	ce 93       	st	-X, r28
    3b30:	52 97       	sbiw	r26, 0x12	; 18
    3b32:	2e 81       	ldd	r18, Y+6	; 0x06
    3b34:	3f 81       	ldd	r19, Y+7	; 0x07
    3b36:	55 96       	adiw	r26, 0x15	; 21
    3b38:	3c 93       	st	X, r19
    3b3a:	2e 93       	st	-X, r18
    3b3c:	54 97       	sbiw	r26, 0x14	; 20
    3b3e:	4e 81       	ldd	r20, Y+6	; 0x06
    3b40:	5f 81       	ldd	r21, Y+7	; 0x07
    3b42:	9d 01       	movw	r18, r26
    3b44:	22 5f       	subi	r18, 0xF2	; 242
    3b46:	3f 4f       	sbci	r19, 0xFF	; 255
    3b48:	fa 01       	movw	r30, r20
    3b4a:	35 83       	std	Z+5, r19	; 0x05
    3b4c:	24 83       	std	Z+4, r18	; 0x04
    3b4e:	3f 83       	std	Y+7, r19	; 0x07
    3b50:	2e 83       	std	Y+6, r18	; 0x06
    3b52:	59 96       	adiw	r26, 0x19	; 25
    3b54:	7c 93       	st	X, r23
    3b56:	6e 93       	st	-X, r22
    3b58:	58 97       	sbiw	r26, 0x18	; 24
    3b5a:	fb 01       	movw	r30, r22
    3b5c:	90 81       	ld	r25, Z
    3b5e:	9f 5f       	subi	r25, 0xFF	; 255
    3b60:	90 83       	st	Z, r25
    3b62:	5a 96       	adiw	r26, 0x1a	; 26
    3b64:	2c 91       	ld	r18, X
    3b66:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <pxCurrentTCB>
    3b6a:	f0 91 42 14 	lds	r31, 0x1442	; 0x801442 <pxCurrentTCB+0x1>
    3b6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b70:	92 17       	cp	r25, r18
    3b72:	48 f4       	brcc	.+18     	; 0x3b86 <xTaskGenericNotifyFromISR+0x22c>
    3b74:	c1 14       	cp	r12, r1
    3b76:	d1 04       	cpc	r13, r1
    3b78:	19 f0       	breq	.+6      	; 0x3b80 <xTaskGenericNotifyFromISR+0x226>
    3b7a:	91 e0       	ldi	r25, 0x01	; 1
    3b7c:	f6 01       	movw	r30, r12
    3b7e:	90 83       	st	Z, r25
    3b80:	91 e0       	ldi	r25, 0x01	; 1
    3b82:	90 93 8b 13 	sts	0x138B, r25	; 0x80138b <xYieldPending>
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	0f 91       	pop	r16
    3b8c:	ff 90       	pop	r15
    3b8e:	ef 90       	pop	r14
    3b90:	df 90       	pop	r13
    3b92:	cf 90       	pop	r12
    3b94:	bf 90       	pop	r11
    3b96:	af 90       	pop	r10
    3b98:	9f 90       	pop	r9
    3b9a:	8f 90       	pop	r8
    3b9c:	08 95       	ret

00003b9e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	21 f4       	brne	.+8      	; 0x3baa <xTaskGenericNotifyStateClear+0xc>
    3ba2:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <pxCurrentTCB>
    3ba6:	90 91 42 14 	lds	r25, 0x1442	; 0x801442 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3bb0:	70 e0       	ldi	r23, 0x00	; 0
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	e6 0f       	add	r30, r22
    3bb6:	f7 1f       	adc	r31, r23
    3bb8:	23 a9       	ldd	r18, Z+51	; 0x33
    3bba:	22 30       	cpi	r18, 0x02	; 2
    3bbc:	31 f4       	brne	.+12     	; 0x3bca <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	e6 0f       	add	r30, r22
    3bc2:	f7 1f       	adc	r31, r23
    3bc4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	01 c0       	rjmp	.+2      	; 0x3bcc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3bca:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3bcc:	0f 90       	pop	r0
    3bce:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3bd0:	08 95       	ret

00003bd2 <prvGetNextExpireTime>:
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	e0 91 4d 14 	lds	r30, 0x144D	; 0x80144d <pxCurrentTimerList>
    3bd8:	f0 91 4e 14 	lds	r31, 0x144E	; 0x80144e <pxCurrentTimerList+0x1>
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 e0       	ldi	r25, 0x01	; 1
    3be0:	81 11       	cpse	r24, r1
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	9c 93       	st	X, r25
    3be6:	91 11       	cpse	r25, r1
    3be8:	08 c0       	rjmp	.+16     	; 0x3bfa <prvGetNextExpireTime+0x28>
    3bea:	07 80       	ldd	r0, Z+7	; 0x07
    3bec:	f0 85       	ldd	r31, Z+8	; 0x08
    3bee:	e0 2d       	mov	r30, r0
    3bf0:	60 81       	ld	r22, Z
    3bf2:	71 81       	ldd	r23, Z+1	; 0x01
    3bf4:	82 81       	ldd	r24, Z+2	; 0x02
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	08 95       	ret
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	cb 01       	movw	r24, r22
    3c00:	08 95       	ret

00003c02 <prvInsertTimerInActiveList>:
    3c02:	cf 92       	push	r12
    3c04:	df 92       	push	r13
    3c06:	ef 92       	push	r14
    3c08:	ff 92       	push	r15
    3c0a:	0f 93       	push	r16
    3c0c:	1f 93       	push	r17
    3c0e:	fc 01       	movw	r30, r24
    3c10:	42 83       	std	Z+2, r20	; 0x02
    3c12:	53 83       	std	Z+3, r21	; 0x03
    3c14:	64 83       	std	Z+4, r22	; 0x04
    3c16:	75 83       	std	Z+5, r23	; 0x05
    3c18:	93 87       	std	Z+11, r25	; 0x0b
    3c1a:	82 87       	std	Z+10, r24	; 0x0a
    3c1c:	04 17       	cp	r16, r20
    3c1e:	15 07       	cpc	r17, r21
    3c20:	26 07       	cpc	r18, r22
    3c22:	37 07       	cpc	r19, r23
    3c24:	c0 f0       	brcs	.+48     	; 0x3c56 <prvInsertTimerInActiveList+0x54>
    3c26:	0c 19       	sub	r16, r12
    3c28:	1d 09       	sbc	r17, r13
    3c2a:	2e 09       	sbc	r18, r14
    3c2c:	3f 09       	sbc	r19, r15
    3c2e:	86 85       	ldd	r24, Z+14	; 0x0e
    3c30:	97 85       	ldd	r25, Z+15	; 0x0f
    3c32:	a0 89       	ldd	r26, Z+16	; 0x10
    3c34:	b1 89       	ldd	r27, Z+17	; 0x11
    3c36:	08 17       	cp	r16, r24
    3c38:	19 07       	cpc	r17, r25
    3c3a:	2a 07       	cpc	r18, r26
    3c3c:	3b 07       	cpc	r19, r27
    3c3e:	00 f5       	brcc	.+64     	; 0x3c80 <prvInsertTimerInActiveList+0x7e>
    3c40:	bf 01       	movw	r22, r30
    3c42:	6e 5f       	subi	r22, 0xFE	; 254
    3c44:	7f 4f       	sbci	r23, 0xFF	; 255
    3c46:	80 91 4b 14 	lds	r24, 0x144B	; 0x80144b <pxOverflowTimerList>
    3c4a:	90 91 4c 14 	lds	r25, 0x144C	; 0x80144c <pxOverflowTimerList+0x1>
    3c4e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vListInsert>
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	18 c0       	rjmp	.+48     	; 0x3c86 <prvInsertTimerInActiveList+0x84>
    3c56:	0c 15       	cp	r16, r12
    3c58:	1d 05       	cpc	r17, r13
    3c5a:	2e 05       	cpc	r18, r14
    3c5c:	3f 05       	cpc	r19, r15
    3c5e:	28 f4       	brcc	.+10     	; 0x3c6a <prvInsertTimerInActiveList+0x68>
    3c60:	4c 15       	cp	r20, r12
    3c62:	5d 05       	cpc	r21, r13
    3c64:	6e 05       	cpc	r22, r14
    3c66:	7f 05       	cpc	r23, r15
    3c68:	68 f4       	brcc	.+26     	; 0x3c84 <prvInsertTimerInActiveList+0x82>
    3c6a:	bf 01       	movw	r22, r30
    3c6c:	6e 5f       	subi	r22, 0xFE	; 254
    3c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c70:	80 91 4d 14 	lds	r24, 0x144D	; 0x80144d <pxCurrentTimerList>
    3c74:	90 91 4e 14 	lds	r25, 0x144E	; 0x80144e <pxCurrentTimerList+0x1>
    3c78:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vListInsert>
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	03 c0       	rjmp	.+6      	; 0x3c86 <prvInsertTimerInActiveList+0x84>
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	01 c0       	rjmp	.+2      	; 0x3c86 <prvInsertTimerInActiveList+0x84>
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	1f 91       	pop	r17
    3c88:	0f 91       	pop	r16
    3c8a:	ff 90       	pop	r15
    3c8c:	ef 90       	pop	r14
    3c8e:	df 90       	pop	r13
    3c90:	cf 90       	pop	r12
    3c92:	08 95       	ret

00003c94 <prvCheckForValidListAndQueue>:
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	0f 92       	push	r0
    3c9a:	80 91 49 14 	lds	r24, 0x1449	; 0x801449 <xTimerQueue>
    3c9e:	90 91 4a 14 	lds	r25, 0x144A	; 0x80144a <xTimerQueue+0x1>
    3ca2:	89 2b       	or	r24, r25
    3ca4:	e9 f4       	brne	.+58     	; 0x3ce0 <prvCheckForValidListAndQueue+0x4c>
    3ca6:	8a e5       	ldi	r24, 0x5A	; 90
    3ca8:	94 e1       	ldi	r25, 0x14	; 20
    3caa:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    3cae:	8f e4       	ldi	r24, 0x4F	; 79
    3cb0:	94 e1       	ldi	r25, 0x14	; 20
    3cb2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vListInitialise>
    3cb6:	8a e5       	ldi	r24, 0x5A	; 90
    3cb8:	94 e1       	ldi	r25, 0x14	; 20
    3cba:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <pxCurrentTimerList+0x1>
    3cbe:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <pxCurrentTimerList>
    3cc2:	8f e4       	ldi	r24, 0x4F	; 79
    3cc4:	94 e1       	ldi	r25, 0x14	; 20
    3cc6:	90 93 4c 14 	sts	0x144C, r25	; 0x80144c <pxOverflowTimerList+0x1>
    3cca:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <pxOverflowTimerList>
    3cce:	40 e0       	ldi	r20, 0x00	; 0
    3cd0:	67 e0       	ldi	r22, 0x07	; 7
    3cd2:	8a e0       	ldi	r24, 0x0A	; 10
    3cd4:	0e 94 9e 0c 	call	0x193c	; 0x193c <xQueueGenericCreate>
    3cd8:	90 93 4a 14 	sts	0x144A, r25	; 0x80144a <xTimerQueue+0x1>
    3cdc:	80 93 49 14 	sts	0x1449, r24	; 0x801449 <xTimerQueue>
    3ce0:	0f 90       	pop	r0
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	08 95       	ret

00003ce6 <xTimerCreateTimerTask>:
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	d3 df       	rcall	.-90     	; 0x3c94 <prvCheckForValidListAndQueue>
    3cee:	80 91 49 14 	lds	r24, 0x1449	; 0x801449 <xTimerQueue>
    3cf2:	90 91 4a 14 	lds	r25, 0x144A	; 0x80144a <xTimerQueue+0x1>
    3cf6:	89 2b       	or	r24, r25
    3cf8:	91 f0       	breq	.+36     	; 0x3d1e <xTimerCreateTimerTask+0x38>
    3cfa:	0f 2e       	mov	r0, r31
    3cfc:	f7 e4       	ldi	r31, 0x47	; 71
    3cfe:	ef 2e       	mov	r14, r31
    3d00:	f4 e1       	ldi	r31, 0x14	; 20
    3d02:	ff 2e       	mov	r15, r31
    3d04:	f0 2d       	mov	r31, r0
    3d06:	03 e0       	ldi	r16, 0x03	; 3
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 ec       	ldi	r20, 0xC0	; 192
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	65 eb       	ldi	r22, 0xB5	; 181
    3d12:	74 e0       	ldi	r23, 0x04	; 4
    3d14:	89 e5       	ldi	r24, 0x59	; 89
    3d16:	91 e0       	ldi	r25, 0x01	; 1
    3d18:	0e 94 8a 13 	call	0x2714	; 0x2714 <xTaskCreate>
    3d1c:	01 c0       	rjmp	.+2      	; 0x3d20 <xTimerCreateTimerTask+0x3a>
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	0f 91       	pop	r16
    3d22:	ff 90       	pop	r15
    3d24:	ef 90       	pop	r14
    3d26:	08 95       	ret

00003d28 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3d28:	8f 92       	push	r8
    3d2a:	9f 92       	push	r9
    3d2c:	af 92       	push	r10
    3d2e:	bf 92       	push	r11
    3d30:	cf 92       	push	r12
    3d32:	df 92       	push	r13
    3d34:	ef 92       	push	r14
    3d36:	ff 92       	push	r15
    3d38:	0f 93       	push	r16
    3d3a:	1f 93       	push	r17
    3d3c:	cf 93       	push	r28
    3d3e:	df 93       	push	r29
    3d40:	cd b7       	in	r28, 0x3d	; 61
    3d42:	de b7       	in	r29, 0x3e	; 62
    3d44:	27 97       	sbiw	r28, 0x07	; 7
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	de bf       	out	0x3e, r29	; 62
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3d50:	e0 91 49 14 	lds	r30, 0x1449	; 0x801449 <xTimerQueue>
    3d54:	f0 91 4a 14 	lds	r31, 0x144A	; 0x80144a <xTimerQueue+0x1>
    3d58:	30 97       	sbiw	r30, 0x00	; 0
    3d5a:	81 f1       	breq	.+96     	; 0x3dbc <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3d5c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3d5e:	2a 83       	std	Y+2, r18	; 0x02
    3d60:	3b 83       	std	Y+3, r19	; 0x03
    3d62:	4c 83       	std	Y+4, r20	; 0x04
    3d64:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3d66:	9f 83       	std	Y+7, r25	; 0x07
    3d68:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3d6a:	66 30       	cpi	r22, 0x06	; 6
    3d6c:	f4 f4       	brge	.+60     	; 0x3daa <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3d6e:	c3 da       	rcall	.-2682   	; 0x32f6 <xTaskGetSchedulerState>
    3d70:	82 30       	cpi	r24, 0x02	; 2
    3d72:	69 f4       	brne	.+26     	; 0x3d8e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3d74:	00 e0       	ldi	r16, 0x00	; 0
    3d76:	a7 01       	movw	r20, r14
    3d78:	96 01       	movw	r18, r12
    3d7a:	be 01       	movw	r22, r28
    3d7c:	6f 5f       	subi	r22, 0xFF	; 255
    3d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d80:	80 91 49 14 	lds	r24, 0x1449	; 0x801449 <xTimerQueue>
    3d84:	90 91 4a 14 	lds	r25, 0x144A	; 0x80144a <xTimerQueue+0x1>
    3d88:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
    3d8c:	18 c0       	rjmp	.+48     	; 0x3dbe <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3d8e:	00 e0       	ldi	r16, 0x00	; 0
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	a9 01       	movw	r20, r18
    3d96:	be 01       	movw	r22, r28
    3d98:	6f 5f       	subi	r22, 0xFF	; 255
    3d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d9c:	80 91 49 14 	lds	r24, 0x1449	; 0x801449 <xTimerQueue>
    3da0:	90 91 4a 14 	lds	r25, 0x144A	; 0x80144a <xTimerQueue+0x1>
    3da4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <xQueueGenericSend>
    3da8:	0a c0       	rjmp	.+20     	; 0x3dbe <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	a8 01       	movw	r20, r16
    3dae:	be 01       	movw	r22, r28
    3db0:	6f 5f       	subi	r22, 0xFF	; 255
    3db2:	7f 4f       	sbci	r23, 0xFF	; 255
    3db4:	cf 01       	movw	r24, r30
    3db6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <xQueueGenericSendFromISR>
    3dba:	01 c0       	rjmp	.+2      	; 0x3dbe <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3dbe:	27 96       	adiw	r28, 0x07	; 7
    3dc0:	0f b6       	in	r0, 0x3f	; 63
    3dc2:	f8 94       	cli
    3dc4:	de bf       	out	0x3e, r29	; 62
    3dc6:	0f be       	out	0x3f, r0	; 63
    3dc8:	cd bf       	out	0x3d, r28	; 61
    3dca:	df 91       	pop	r29
    3dcc:	cf 91       	pop	r28
    3dce:	1f 91       	pop	r17
    3dd0:	0f 91       	pop	r16
    3dd2:	ff 90       	pop	r15
    3dd4:	ef 90       	pop	r14
    3dd6:	df 90       	pop	r13
    3dd8:	cf 90       	pop	r12
    3dda:	bf 90       	pop	r11
    3ddc:	af 90       	pop	r10
    3dde:	9f 90       	pop	r9
    3de0:	8f 90       	pop	r8
    3de2:	08 95       	ret

00003de4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3de4:	8f 92       	push	r8
    3de6:	9f 92       	push	r9
    3de8:	af 92       	push	r10
    3dea:	bf 92       	push	r11
    3dec:	cf 92       	push	r12
    3dee:	df 92       	push	r13
    3df0:	ef 92       	push	r14
    3df2:	ff 92       	push	r15
    3df4:	0f 93       	push	r16
    3df6:	1f 93       	push	r17
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3dfc:	3b c0       	rjmp	.+118    	; 0x3e74 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3dfe:	07 80       	ldd	r0, Z+7	; 0x07
    3e00:	f0 85       	ldd	r31, Z+8	; 0x08
    3e02:	e0 2d       	mov	r30, r0
    3e04:	80 80       	ld	r8, Z
    3e06:	91 80       	ldd	r9, Z+1	; 0x01
    3e08:	a2 80       	ldd	r10, Z+2	; 0x02
    3e0a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3e0c:	c0 85       	ldd	r28, Z+8	; 0x08
    3e0e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3e10:	8e 01       	movw	r16, r28
    3e12:	0e 5f       	subi	r16, 0xFE	; 254
    3e14:	1f 4f       	sbci	r17, 0xFF	; 255
    3e16:	c8 01       	movw	r24, r16
    3e18:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e1c:	ec 89       	ldd	r30, Y+20	; 0x14
    3e1e:	fd 89       	ldd	r31, Y+21	; 0x15
    3e20:	ce 01       	movw	r24, r28
    3e22:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3e24:	8e 89       	ldd	r24, Y+22	; 0x16
    3e26:	82 ff       	sbrs	r24, 2
    3e28:	25 c0       	rjmp	.+74     	; 0x3e74 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3e2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e2e:	a8 89       	ldd	r26, Y+16	; 0x10
    3e30:	b9 89       	ldd	r27, Y+17	; 0x11
    3e32:	88 0d       	add	r24, r8
    3e34:	99 1d       	adc	r25, r9
    3e36:	aa 1d       	adc	r26, r10
    3e38:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3e3a:	88 16       	cp	r8, r24
    3e3c:	99 06       	cpc	r9, r25
    3e3e:	aa 06       	cpc	r10, r26
    3e40:	bb 06       	cpc	r11, r27
    3e42:	70 f4       	brcc	.+28     	; 0x3e60 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3e44:	8a 83       	std	Y+2, r24	; 0x02
    3e46:	9b 83       	std	Y+3, r25	; 0x03
    3e48:	ac 83       	std	Y+4, r26	; 0x04
    3e4a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3e4c:	db 87       	std	Y+11, r29	; 0x0b
    3e4e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3e50:	b8 01       	movw	r22, r16
    3e52:	80 91 4d 14 	lds	r24, 0x144D	; 0x80144d <pxCurrentTimerList>
    3e56:	90 91 4e 14 	lds	r25, 0x144E	; 0x80144e <pxCurrentTimerList+0x1>
    3e5a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vListInsert>
    3e5e:	0a c0       	rjmp	.+20     	; 0x3e74 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3e60:	c1 2c       	mov	r12, r1
    3e62:	d1 2c       	mov	r13, r1
    3e64:	76 01       	movw	r14, r12
    3e66:	00 e0       	ldi	r16, 0x00	; 0
    3e68:	10 e0       	ldi	r17, 0x00	; 0
    3e6a:	a5 01       	movw	r20, r10
    3e6c:	94 01       	movw	r18, r8
    3e6e:	60 e0       	ldi	r22, 0x00	; 0
    3e70:	ce 01       	movw	r24, r28
    3e72:	5a df       	rcall	.-332    	; 0x3d28 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3e74:	e0 91 4d 14 	lds	r30, 0x144D	; 0x80144d <pxCurrentTimerList>
    3e78:	f0 91 4e 14 	lds	r31, 0x144E	; 0x80144e <pxCurrentTimerList+0x1>
    3e7c:	80 81       	ld	r24, Z
    3e7e:	81 11       	cpse	r24, r1
    3e80:	be cf       	rjmp	.-132    	; 0x3dfe <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3e82:	80 91 4b 14 	lds	r24, 0x144B	; 0x80144b <pxOverflowTimerList>
    3e86:	90 91 4c 14 	lds	r25, 0x144C	; 0x80144c <pxOverflowTimerList+0x1>
    3e8a:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <pxCurrentTimerList+0x1>
    3e8e:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3e92:	f0 93 4c 14 	sts	0x144C, r31	; 0x80144c <pxOverflowTimerList+0x1>
    3e96:	e0 93 4b 14 	sts	0x144B, r30	; 0x80144b <pxOverflowTimerList>
    }
    3e9a:	df 91       	pop	r29
    3e9c:	cf 91       	pop	r28
    3e9e:	1f 91       	pop	r17
    3ea0:	0f 91       	pop	r16
    3ea2:	ff 90       	pop	r15
    3ea4:	ef 90       	pop	r14
    3ea6:	df 90       	pop	r13
    3ea8:	cf 90       	pop	r12
    3eaa:	bf 90       	pop	r11
    3eac:	af 90       	pop	r10
    3eae:	9f 90       	pop	r9
    3eb0:	8f 90       	pop	r8
    3eb2:	08 95       	ret

00003eb4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3eb4:	cf 92       	push	r12
    3eb6:	df 92       	push	r13
    3eb8:	ef 92       	push	r14
    3eba:	ff 92       	push	r15
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3ec2:	0e 94 14 14 	call	0x2828	; 0x2828 <xTaskGetTickCount>
    3ec6:	6b 01       	movw	r12, r22
    3ec8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3eca:	80 91 43 14 	lds	r24, 0x1443	; 0x801443 <xLastTime.2436>
    3ece:	90 91 44 14 	lds	r25, 0x1444	; 0x801444 <xLastTime.2436+0x1>
    3ed2:	a0 91 45 14 	lds	r26, 0x1445	; 0x801445 <xLastTime.2436+0x2>
    3ed6:	b0 91 46 14 	lds	r27, 0x1446	; 0x801446 <xLastTime.2436+0x3>
    3eda:	c8 16       	cp	r12, r24
    3edc:	d9 06       	cpc	r13, r25
    3ede:	ea 06       	cpc	r14, r26
    3ee0:	fb 06       	cpc	r15, r27
    3ee2:	20 f4       	brcc	.+8      	; 0x3eec <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3ee4:	7f df       	rcall	.-258    	; 0x3de4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	88 83       	st	Y, r24
    3eea:	01 c0       	rjmp	.+2      	; 0x3eee <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3eec:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3eee:	c0 92 43 14 	sts	0x1443, r12	; 0x801443 <xLastTime.2436>
    3ef2:	d0 92 44 14 	sts	0x1444, r13	; 0x801444 <xLastTime.2436+0x1>
    3ef6:	e0 92 45 14 	sts	0x1445, r14	; 0x801445 <xLastTime.2436+0x2>
    3efa:	f0 92 46 14 	sts	0x1446, r15	; 0x801446 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3efe:	c7 01       	movw	r24, r14
    3f00:	b6 01       	movw	r22, r12
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	ff 90       	pop	r15
    3f08:	ef 90       	pop	r14
    3f0a:	df 90       	pop	r13
    3f0c:	cf 90       	pop	r12
    3f0e:	08 95       	ret

00003f10 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3f10:	4f 92       	push	r4
    3f12:	5f 92       	push	r5
    3f14:	6f 92       	push	r6
    3f16:	7f 92       	push	r7
    3f18:	8f 92       	push	r8
    3f1a:	9f 92       	push	r9
    3f1c:	af 92       	push	r10
    3f1e:	bf 92       	push	r11
    3f20:	cf 92       	push	r12
    3f22:	df 92       	push	r13
    3f24:	ef 92       	push	r14
    3f26:	ff 92       	push	r15
    3f28:	0f 93       	push	r16
    3f2a:	1f 93       	push	r17
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	4b 01       	movw	r8, r22
    3f32:	5c 01       	movw	r10, r24
    3f34:	29 01       	movw	r4, r18
    3f36:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3f38:	e0 91 4d 14 	lds	r30, 0x144D	; 0x80144d <pxCurrentTimerList>
    3f3c:	f0 91 4e 14 	lds	r31, 0x144E	; 0x80144e <pxCurrentTimerList+0x1>
    3f40:	07 80       	ldd	r0, Z+7	; 0x07
    3f42:	f0 85       	ldd	r31, Z+8	; 0x08
    3f44:	e0 2d       	mov	r30, r0
    3f46:	c0 85       	ldd	r28, Z+8	; 0x08
    3f48:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	02 96       	adiw	r24, 0x02	; 2
    3f4e:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3f52:	8e 89       	ldd	r24, Y+22	; 0x16
    3f54:	82 ff       	sbrs	r24, 2
    3f56:	1b c0       	rjmp	.+54     	; 0x3f8e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3f58:	4e 85       	ldd	r20, Y+14	; 0x0e
    3f5a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3f5c:	68 89       	ldd	r22, Y+16	; 0x10
    3f5e:	79 89       	ldd	r23, Y+17	; 0x11
    3f60:	48 0d       	add	r20, r8
    3f62:	59 1d       	adc	r21, r9
    3f64:	6a 1d       	adc	r22, r10
    3f66:	7b 1d       	adc	r23, r11
    3f68:	75 01       	movw	r14, r10
    3f6a:	64 01       	movw	r12, r8
    3f6c:	93 01       	movw	r18, r6
    3f6e:	82 01       	movw	r16, r4
    3f70:	ce 01       	movw	r24, r28
    3f72:	47 de       	rcall	.-882    	; 0x3c02 <prvInsertTimerInActiveList>
    3f74:	88 23       	and	r24, r24
    3f76:	69 f0       	breq	.+26     	; 0x3f92 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3f78:	c1 2c       	mov	r12, r1
    3f7a:	d1 2c       	mov	r13, r1
    3f7c:	76 01       	movw	r14, r12
    3f7e:	00 e0       	ldi	r16, 0x00	; 0
    3f80:	10 e0       	ldi	r17, 0x00	; 0
    3f82:	a5 01       	movw	r20, r10
    3f84:	94 01       	movw	r18, r8
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	ce 01       	movw	r24, r28
    3f8a:	ce de       	rcall	.-612    	; 0x3d28 <xTimerGenericCommand>
    3f8c:	02 c0       	rjmp	.+4      	; 0x3f92 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3f8e:	8e 7f       	andi	r24, 0xFE	; 254
    3f90:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3f92:	ec 89       	ldd	r30, Y+20	; 0x14
    3f94:	fd 89       	ldd	r31, Y+21	; 0x15
    3f96:	ce 01       	movw	r24, r28
    3f98:	19 95       	eicall
    }
    3f9a:	df 91       	pop	r29
    3f9c:	cf 91       	pop	r28
    3f9e:	1f 91       	pop	r17
    3fa0:	0f 91       	pop	r16
    3fa2:	ff 90       	pop	r15
    3fa4:	ef 90       	pop	r14
    3fa6:	df 90       	pop	r13
    3fa8:	cf 90       	pop	r12
    3faa:	bf 90       	pop	r11
    3fac:	af 90       	pop	r10
    3fae:	9f 90       	pop	r9
    3fb0:	8f 90       	pop	r8
    3fb2:	7f 90       	pop	r7
    3fb4:	6f 90       	pop	r6
    3fb6:	5f 90       	pop	r5
    3fb8:	4f 90       	pop	r4
    3fba:	08 95       	ret

00003fbc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3fbc:	8f 92       	push	r8
    3fbe:	9f 92       	push	r9
    3fc0:	af 92       	push	r10
    3fc2:	bf 92       	push	r11
    3fc4:	cf 92       	push	r12
    3fc6:	df 92       	push	r13
    3fc8:	ef 92       	push	r14
    3fca:	ff 92       	push	r15
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	1f 92       	push	r1
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
    3fd8:	6b 01       	movw	r12, r22
    3fda:	7c 01       	movw	r14, r24
    3fdc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3fde:	0e 94 0e 14 	call	0x281c	; 0x281c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3fe2:	ce 01       	movw	r24, r28
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	66 df       	rcall	.-308    	; 0x3eb4 <prvSampleTimeNow>
    3fe8:	4b 01       	movw	r8, r22
    3fea:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3fec:	89 81       	ldd	r24, Y+1	; 0x01
    3fee:	81 11       	cpse	r24, r1
    3ff0:	2d c0       	rjmp	.+90     	; 0x404c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3ff2:	11 11       	cpse	r17, r1
    3ff4:	0d c0       	rjmp	.+26     	; 0x4010 <prvProcessTimerOrBlockTask+0x54>
    3ff6:	8c 14       	cp	r8, r12
    3ff8:	9d 04       	cpc	r9, r13
    3ffa:	ae 04       	cpc	r10, r14
    3ffc:	bf 04       	cpc	r11, r15
    3ffe:	40 f0       	brcs	.+16     	; 0x4010 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    4000:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4004:	a5 01       	movw	r20, r10
    4006:	94 01       	movw	r18, r8
    4008:	c7 01       	movw	r24, r14
    400a:	b6 01       	movw	r22, r12
    400c:	81 df       	rcall	.-254    	; 0x3f10 <prvProcessExpiredTimer>
    400e:	20 c0       	rjmp	.+64     	; 0x4050 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    4010:	11 23       	and	r17, r17
    4012:	41 f0       	breq	.+16     	; 0x4024 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4014:	e0 91 4b 14 	lds	r30, 0x144B	; 0x80144b <pxOverflowTimerList>
    4018:	f0 91 4c 14 	lds	r31, 0x144C	; 0x80144c <pxOverflowTimerList+0x1>
    401c:	80 81       	ld	r24, Z
    401e:	11 e0       	ldi	r17, 0x01	; 1
    4020:	81 11       	cpse	r24, r1
    4022:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4024:	b7 01       	movw	r22, r14
    4026:	a6 01       	movw	r20, r12
    4028:	48 19       	sub	r20, r8
    402a:	59 09       	sbc	r21, r9
    402c:	6a 09       	sbc	r22, r10
    402e:	7b 09       	sbc	r23, r11
    4030:	21 2f       	mov	r18, r17
    4032:	80 91 49 14 	lds	r24, 0x1449	; 0x801449 <xTimerQueue>
    4036:	90 91 4a 14 	lds	r25, 0x144A	; 0x80144a <xTimerQueue+0x1>
    403a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    403e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
    4042:	81 11       	cpse	r24, r1
    4044:	05 c0       	rjmp	.+10     	; 0x4050 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    4046:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    404a:	02 c0       	rjmp	.+4      	; 0x4050 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    404c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <xTaskResumeAll>
            }
        }
    }
    4050:	0f 90       	pop	r0
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	1f 91       	pop	r17
    4058:	ff 90       	pop	r15
    405a:	ef 90       	pop	r14
    405c:	df 90       	pop	r13
    405e:	cf 90       	pop	r12
    4060:	bf 90       	pop	r11
    4062:	af 90       	pop	r10
    4064:	9f 90       	pop	r9
    4066:	8f 90       	pop	r8
    4068:	08 95       	ret

0000406a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    406a:	af 92       	push	r10
    406c:	bf 92       	push	r11
    406e:	cf 92       	push	r12
    4070:	df 92       	push	r13
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	28 97       	sbiw	r28, 0x08	; 8
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	f8 94       	cli
    4088:	de bf       	out	0x3e, r29	; 62
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    408e:	82 c0       	rjmp	.+260    	; 0x4194 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	88 23       	and	r24, r24
    4094:	0c f4       	brge	.+2      	; 0x4098 <prvProcessReceivedCommands+0x2e>
    4096:	7e c0       	rjmp	.+252    	; 0x4194 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4098:	ae 80       	ldd	r10, Y+6	; 0x06
    409a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    409c:	d5 01       	movw	r26, r10
    409e:	1c 96       	adiw	r26, 0x0c	; 12
    40a0:	8d 91       	ld	r24, X+
    40a2:	9c 91       	ld	r25, X
    40a4:	1d 97       	sbiw	r26, 0x0d	; 13
    40a6:	89 2b       	or	r24, r25
    40a8:	21 f0       	breq	.+8      	; 0x40b2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    40aa:	c5 01       	movw	r24, r10
    40ac:	02 96       	adiw	r24, 0x02	; 2
    40ae:	0e 94 2d 0a 	call	0x145a	; 0x145a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    40b2:	ce 01       	movw	r24, r28
    40b4:	08 96       	adiw	r24, 0x08	; 8
    40b6:	fe de       	rcall	.-516    	; 0x3eb4 <prvSampleTimeNow>
    40b8:	8b 01       	movw	r16, r22
    40ba:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    40bc:	e9 81       	ldd	r30, Y+1	; 0x01
    40be:	0e 2e       	mov	r0, r30
    40c0:	00 0c       	add	r0, r0
    40c2:	ff 0b       	sbc	r31, r31
    40c4:	ea 30       	cpi	r30, 0x0A	; 10
    40c6:	f1 05       	cpc	r31, r1
    40c8:	08 f0       	brcs	.+2      	; 0x40cc <prvProcessReceivedCommands+0x62>
    40ca:	64 c0       	rjmp	.+200    	; 0x4194 <prvProcessReceivedCommands+0x12a>
    40cc:	88 27       	eor	r24, r24
    40ce:	ee 58       	subi	r30, 0x8E	; 142
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	8f 4f       	sbci	r24, 0xFF	; 255
    40d4:	0c 94 6e 33 	jmp	0x66dc	; 0x66dc <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    40d8:	f5 01       	movw	r30, r10
    40da:	86 89       	ldd	r24, Z+22	; 0x16
    40dc:	81 60       	ori	r24, 0x01	; 1
    40de:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    40e0:	ca 80       	ldd	r12, Y+2	; 0x02
    40e2:	db 80       	ldd	r13, Y+3	; 0x03
    40e4:	ec 80       	ldd	r14, Y+4	; 0x04
    40e6:	fd 80       	ldd	r15, Y+5	; 0x05
    40e8:	46 85       	ldd	r20, Z+14	; 0x0e
    40ea:	57 85       	ldd	r21, Z+15	; 0x0f
    40ec:	60 89       	ldd	r22, Z+16	; 0x10
    40ee:	71 89       	ldd	r23, Z+17	; 0x11
    40f0:	4c 0d       	add	r20, r12
    40f2:	5d 1d       	adc	r21, r13
    40f4:	6e 1d       	adc	r22, r14
    40f6:	7f 1d       	adc	r23, r15
    40f8:	c5 01       	movw	r24, r10
    40fa:	83 dd       	rcall	.-1274   	; 0x3c02 <prvInsertTimerInActiveList>
    40fc:	88 23       	and	r24, r24
    40fe:	09 f4       	brne	.+2      	; 0x4102 <prvProcessReceivedCommands+0x98>
    4100:	49 c0       	rjmp	.+146    	; 0x4194 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4102:	d5 01       	movw	r26, r10
    4104:	54 96       	adiw	r26, 0x14	; 20
    4106:	ed 91       	ld	r30, X+
    4108:	fc 91       	ld	r31, X
    410a:	55 97       	sbiw	r26, 0x15	; 21
    410c:	c5 01       	movw	r24, r10
    410e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4110:	f5 01       	movw	r30, r10
    4112:	86 89       	ldd	r24, Z+22	; 0x16
    4114:	82 ff       	sbrs	r24, 2
    4116:	3e c0       	rjmp	.+124    	; 0x4194 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4118:	4a 81       	ldd	r20, Y+2	; 0x02
    411a:	5b 81       	ldd	r21, Y+3	; 0x03
    411c:	6c 81       	ldd	r22, Y+4	; 0x04
    411e:	7d 81       	ldd	r23, Y+5	; 0x05
    4120:	86 85       	ldd	r24, Z+14	; 0x0e
    4122:	97 85       	ldd	r25, Z+15	; 0x0f
    4124:	a0 89       	ldd	r26, Z+16	; 0x10
    4126:	b1 89       	ldd	r27, Z+17	; 0x11
    4128:	9a 01       	movw	r18, r20
    412a:	ab 01       	movw	r20, r22
    412c:	28 0f       	add	r18, r24
    412e:	39 1f       	adc	r19, r25
    4130:	4a 1f       	adc	r20, r26
    4132:	5b 1f       	adc	r21, r27
    4134:	c1 2c       	mov	r12, r1
    4136:	d1 2c       	mov	r13, r1
    4138:	76 01       	movw	r14, r12
    413a:	00 e0       	ldi	r16, 0x00	; 0
    413c:	10 e0       	ldi	r17, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	c5 01       	movw	r24, r10
    4142:	f2 dd       	rcall	.-1052   	; 0x3d28 <xTimerGenericCommand>
    4144:	27 c0       	rjmp	.+78     	; 0x4194 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4146:	d5 01       	movw	r26, r10
    4148:	56 96       	adiw	r26, 0x16	; 22
    414a:	8c 91       	ld	r24, X
    414c:	56 97       	sbiw	r26, 0x16	; 22
    414e:	8e 7f       	andi	r24, 0xFE	; 254
    4150:	56 96       	adiw	r26, 0x16	; 22
    4152:	8c 93       	st	X, r24
                        break;
    4154:	1f c0       	rjmp	.+62     	; 0x4194 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4156:	f5 01       	movw	r30, r10
    4158:	86 89       	ldd	r24, Z+22	; 0x16
    415a:	81 60       	ori	r24, 0x01	; 1
    415c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    415e:	4a 81       	ldd	r20, Y+2	; 0x02
    4160:	5b 81       	ldd	r21, Y+3	; 0x03
    4162:	6c 81       	ldd	r22, Y+4	; 0x04
    4164:	7d 81       	ldd	r23, Y+5	; 0x05
    4166:	46 87       	std	Z+14, r20	; 0x0e
    4168:	57 87       	std	Z+15, r21	; 0x0f
    416a:	60 8b       	std	Z+16, r22	; 0x10
    416c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    416e:	40 0f       	add	r20, r16
    4170:	51 1f       	adc	r21, r17
    4172:	62 1f       	adc	r22, r18
    4174:	73 1f       	adc	r23, r19
    4176:	68 01       	movw	r12, r16
    4178:	79 01       	movw	r14, r18
    417a:	c5 01       	movw	r24, r10
    417c:	42 dd       	rcall	.-1404   	; 0x3c02 <prvInsertTimerInActiveList>
                        break;
    417e:	0a c0       	rjmp	.+20     	; 0x4194 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    4180:	f5 01       	movw	r30, r10
    4182:	86 89       	ldd	r24, Z+22	; 0x16
    4184:	81 fd       	sbrc	r24, 1
    4186:	04 c0       	rjmp	.+8      	; 0x4190 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    4188:	c5 01       	movw	r24, r10
    418a:	0e 94 9e 09 	call	0x133c	; 0x133c <vPortFree>
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4190:	8e 7f       	andi	r24, 0xFE	; 254
    4192:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	a9 01       	movw	r20, r18
    419a:	be 01       	movw	r22, r28
    419c:	6f 5f       	subi	r22, 0xFF	; 255
    419e:	7f 4f       	sbci	r23, 0xFF	; 255
    41a0:	80 91 49 14 	lds	r24, 0x1449	; 0x801449 <xTimerQueue>
    41a4:	90 91 4a 14 	lds	r25, 0x144A	; 0x80144a <xTimerQueue+0x1>
    41a8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <xQueueReceive>
    41ac:	81 11       	cpse	r24, r1
    41ae:	70 cf       	rjmp	.-288    	; 0x4090 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    41b0:	28 96       	adiw	r28, 0x08	; 8
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	f8 94       	cli
    41b6:	de bf       	out	0x3e, r29	; 62
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	cd bf       	out	0x3d, r28	; 61
    41bc:	df 91       	pop	r29
    41be:	cf 91       	pop	r28
    41c0:	1f 91       	pop	r17
    41c2:	0f 91       	pop	r16
    41c4:	ff 90       	pop	r15
    41c6:	ef 90       	pop	r14
    41c8:	df 90       	pop	r13
    41ca:	cf 90       	pop	r12
    41cc:	bf 90       	pop	r11
    41ce:	af 90       	pop	r10
    41d0:	08 95       	ret

000041d2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    41d2:	08 95       	ret

000041d4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    41d4:	84 b1       	in	r24, 0x04	; 4
    41d6:	80 68       	ori	r24, 0x80	; 128
    41d8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    41da:	85 b1       	in	r24, 0x05	; 5
    41dc:	80 68       	ori	r24, 0x80	; 128
    41de:	85 b9       	out	0x05, r24	; 5
    41e0:	08 95       	ret

000041e2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    41e2:	83 b1       	in	r24, 0x03	; 3
    41e4:	80 68       	ori	r24, 0x80	; 128
    41e6:	83 b9       	out	0x03, r24	; 3
    41e8:	08 95       	ret

000041ea <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    41ea:	f4 df       	rcall	.-24     	; 0x41d4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    41ec:	2f ef       	ldi	r18, 0xFF	; 255
    41ee:	80 e7       	ldi	r24, 0x70	; 112
    41f0:	92 e0       	ldi	r25, 0x02	; 2
    41f2:	21 50       	subi	r18, 0x01	; 1
    41f4:	80 40       	sbci	r24, 0x00	; 0
    41f6:	90 40       	sbci	r25, 0x00	; 0
    41f8:	e1 f7       	brne	.-8      	; 0x41f2 <vApplicationMallocFailedHook+0x8>
    41fa:	00 c0       	rjmp	.+0      	; 0x41fc <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    41fc:	00 00       	nop
    41fe:	f1 df       	rcall	.-30     	; 0x41e2 <prvBlinkMainLed>
    4200:	f5 cf       	rjmp	.-22     	; 0x41ec <vApplicationMallocFailedHook+0x2>

00004202 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    4202:	e8 df       	rcall	.-48     	; 0x41d4 <prvSetMainLedOn>
    4204:	2f ef       	ldi	r18, 0xFF	; 255
    4206:	87 ea       	ldi	r24, 0xA7	; 167
    4208:	91 e6       	ldi	r25, 0x61	; 97
    420a:	21 50       	subi	r18, 0x01	; 1
    420c:	80 40       	sbci	r24, 0x00	; 0
    420e:	90 40       	sbci	r25, 0x00	; 0
    4210:	e1 f7       	brne	.-8      	; 0x420a <vApplicationStackOverflowHook+0x8>
    4212:	00 c0       	rjmp	.+0      	; 0x4214 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    4214:	00 00       	nop
    4216:	e5 df       	rcall	.-54     	; 0x41e2 <prvBlinkMainLed>
    4218:	f5 cf       	rjmp	.-22     	; 0x4204 <vApplicationStackOverflowHook+0x2>

0000421a <createTasksForSensors>:

/*
* Function call to initialize all sensors
*/
void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    421a:	60 91 67 14 	lds	r22, 0x1467	; 0x801467 <taskReadyBits>
    421e:	70 91 68 14 	lds	r23, 0x1468	; 0x801468 <taskReadyBits+0x1>
    4222:	21 e0       	ldi	r18, 0x01	; 1
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	83 e0       	ldi	r24, 0x03	; 3
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	0e 94 05 05 	call	0xa0a	; 0xa0a <createTemp>
    4232:	90 93 7d 15 	sts	0x157D, r25	; 0x80157d <temperature_sensor+0x1>
    4236:	80 93 7c 15 	sts	0x157C, r24	; 0x80157c <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    423a:	60 91 67 14 	lds	r22, 0x1467	; 0x801467 <taskReadyBits>
    423e:	70 91 68 14 	lds	r23, 0x1468	; 0x801468 <taskReadyBits+0x1>
    4242:	22 e0       	ldi	r18, 0x02	; 2
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e0       	ldi	r20, 0x00	; 0
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	83 e0       	ldi	r24, 0x03	; 3
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <createCO2>
    4252:	90 93 81 15 	sts	0x1581, r25	; 0x801581 <co2_sensor+0x1>
    4256:	80 93 80 15 	sts	0x1580, r24	; 0x801580 <co2_sensor>
	lighthandler = createLightSensor(3, taskReadyBits, BIT_LIGHT_READY);
    425a:	60 91 67 14 	lds	r22, 0x1467	; 0x801467 <taskReadyBits>
    425e:	70 91 68 14 	lds	r23, 0x1468	; 0x801468 <taskReadyBits+0x1>
    4262:	24 e0       	ldi	r18, 0x04	; 4
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	40 e0       	ldi	r20, 0x00	; 0
    4268:	50 e0       	ldi	r21, 0x00	; 0
    426a:	83 e0       	ldi	r24, 0x03	; 3
    426c:	0e 94 df 02 	call	0x5be	; 0x5be <createLightSensor>
    4270:	90 93 7f 15 	sts	0x157F, r25	; 0x80157f <lighthandler+0x1>
    4274:	80 93 7e 15 	sts	0x157E, r24	; 0x80157e <lighthandler>
    4278:	08 95       	ret

0000427a <create_tasks_and_semaphores>:

/*
* Function call that initializes all needed tasks for sensors and shared print, as well as LoRaWAN uplink
*/
void create_tasks_and_semaphores(void)
{
    427a:	af 92       	push	r10
    427c:	bf 92       	push	r11
    427e:	cf 92       	push	r12
    4280:	df 92       	push	r13
    4282:	ef 92       	push	r14
    4284:	ff 92       	push	r15
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
	create_shared_printf();
    428a:	0e 94 49 03 	call	0x692	; 0x692 <create_shared_printf>
	print_sharedf("Board started.");
    428e:	8d eb       	ldi	r24, 0xBD	; 189
    4290:	94 e0       	ldi	r25, 0x04	; 4
    4292:	9f 93       	push	r25
    4294:	8f 93       	push	r24
    4296:	0e 94 57 03 	call	0x6ae	; 0x6ae <print_sharedf>
	createTasksForSensors();
    429a:	bf df       	rcall	.-130    	; 0x421a <createTasksForSensors>
	create_semaphore_mutex_and_sensors();
    429c:	0e 94 83 03 	call	0x706	; 0x706 <create_semaphore_mutex_and_sensors>
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
    42a0:	60 91 65 14 	lds	r22, 0x1465	; 0x801465 <downLinkMessageBufferHandle>
    42a4:	70 91 66 14 	lds	r23, 0x1466	; 0x801466 <downLinkMessageBufferHandle+0x1>
    42a8:	84 e0       	ldi	r24, 0x04	; 4
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	0e 94 1b 02 	call	0x436	; 0x436 <DownLinkHandler_Create>
	lora_handler_initialize(2, taskReadyBits, BIT_TEMP_READY, BIT_CO2_READY, BIT_LIGHT_READY);
    42b0:	60 91 67 14 	lds	r22, 0x1467	; 0x801467 <taskReadyBits>
    42b4:	70 91 68 14 	lds	r23, 0x1468	; 0x801468 <taskReadyBits+0x1>
    42b8:	a1 2c       	mov	r10, r1
    42ba:	b1 2c       	mov	r11, r1
    42bc:	65 01       	movw	r12, r10
    42be:	68 94       	set
    42c0:	a2 f8       	bld	r10, 2
    42c2:	12 e0       	ldi	r17, 0x02	; 2
    42c4:	e1 2e       	mov	r14, r17
    42c6:	f1 2c       	mov	r15, r1
    42c8:	00 e0       	ldi	r16, 0x00	; 0
    42ca:	10 e0       	ldi	r17, 0x00	; 0
    42cc:	21 e0       	ldi	r18, 0x01	; 1
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	40 e0       	ldi	r20, 0x00	; 0
    42d2:	50 e0       	ldi	r21, 0x00	; 0
    42d4:	82 e0       	ldi	r24, 0x02	; 2
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <lora_handler_initialize>
}
    42dc:	0f 90       	pop	r0
    42de:	0f 90       	pop	r0
    42e0:	1f 91       	pop	r17
    42e2:	0f 91       	pop	r16
    42e4:	ff 90       	pop	r15
    42e6:	ef 90       	pop	r14
    42e8:	df 90       	pop	r13
    42ea:	cf 90       	pop	r12
    42ec:	bf 90       	pop	r11
    42ee:	af 90       	pop	r10
    42f0:	08 95       	ret

000042f2 <initializeSystem>:
/*
* Function call that initializes the Event groups, the Arduino board, Downlink message buffer, tasks, and Sempahore mutex
*/
void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    42f2:	0e 94 41 07 	call	0xe82	; 0xe82 <xEventGroupCreate>
    42f6:	90 93 68 14 	sts	0x1468, r25	; 0x801468 <taskReadyBits+0x1>
    42fa:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	0e 94 45 2b 	call	0x568a	; 0x568a <stdio_initialise>
	
	rc_servo_initialise();
    4304:	ec d5       	rcall	.+3032   	; 0x4ede <rc_servo_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    4306:	41 e0       	ldi	r20, 0x01	; 1
    4308:	60 e0       	ldi	r22, 0x00	; 0
    430a:	70 e0       	ldi	r23, 0x00	; 0
    430c:	8c e2       	ldi	r24, 0x2C	; 44
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 4b 10 	call	0x2096	; 0x2096 <xStreamBufferGenericCreate>
    4314:	90 93 66 14 	sts	0x1466, r25	; 0x801466 <downLinkMessageBufferHandle+0x1>
    4318:	80 93 65 14 	sts	0x1465, r24	; 0x801465 <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    431c:	bc 01       	movw	r22, r24
    431e:	81 e0       	ldi	r24, 0x01	; 1
	create_tasks_and_semaphores();
    4320:	06 d3       	rcall	.+1548   	; 0x492e <lora_driver_initialise>
    4322:	ab cf       	rjmp	.-170    	; 0x427a <create_tasks_and_semaphores>
    4324:	08 95       	ret

00004326 <main>:
}

int main(void){
	initializeSystem();
    4326:	e5 df       	rcall	.-54     	; 0x42f2 <initializeSystem>
	vTaskStartScheduler();
    4328:	0e 94 d6 13 	call	0x27ac	; 0x27ac <vTaskStartScheduler>
    432c:	ff cf       	rjmp	.-2      	; 0x432c <main+0x6>

0000432e <__cmpsf2>:
    432e:	2f d0       	rcall	.+94     	; 0x438e <__fp_cmp>
    4330:	08 f4       	brcc	.+2      	; 0x4334 <__cmpsf2+0x6>
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	08 95       	ret

00004336 <__fixunssfsi>:
    4336:	57 d0       	rcall	.+174    	; 0x43e6 <__fp_splitA>
    4338:	88 f0       	brcs	.+34     	; 0x435c <__fixunssfsi+0x26>
    433a:	9f 57       	subi	r25, 0x7F	; 127
    433c:	90 f0       	brcs	.+36     	; 0x4362 <__fixunssfsi+0x2c>
    433e:	b9 2f       	mov	r27, r25
    4340:	99 27       	eor	r25, r25
    4342:	b7 51       	subi	r27, 0x17	; 23
    4344:	a0 f0       	brcs	.+40     	; 0x436e <__fixunssfsi+0x38>
    4346:	d1 f0       	breq	.+52     	; 0x437c <__fixunssfsi+0x46>
    4348:	66 0f       	add	r22, r22
    434a:	77 1f       	adc	r23, r23
    434c:	88 1f       	adc	r24, r24
    434e:	99 1f       	adc	r25, r25
    4350:	1a f0       	brmi	.+6      	; 0x4358 <__fixunssfsi+0x22>
    4352:	ba 95       	dec	r27
    4354:	c9 f7       	brne	.-14     	; 0x4348 <__fixunssfsi+0x12>
    4356:	12 c0       	rjmp	.+36     	; 0x437c <__fixunssfsi+0x46>
    4358:	b1 30       	cpi	r27, 0x01	; 1
    435a:	81 f0       	breq	.+32     	; 0x437c <__fixunssfsi+0x46>
    435c:	5e d0       	rcall	.+188    	; 0x441a <__fp_zero>
    435e:	b1 e0       	ldi	r27, 0x01	; 1
    4360:	08 95       	ret
    4362:	5b c0       	rjmp	.+182    	; 0x441a <__fp_zero>
    4364:	67 2f       	mov	r22, r23
    4366:	78 2f       	mov	r23, r24
    4368:	88 27       	eor	r24, r24
    436a:	b8 5f       	subi	r27, 0xF8	; 248
    436c:	39 f0       	breq	.+14     	; 0x437c <__fixunssfsi+0x46>
    436e:	b9 3f       	cpi	r27, 0xF9	; 249
    4370:	cc f3       	brlt	.-14     	; 0x4364 <__fixunssfsi+0x2e>
    4372:	86 95       	lsr	r24
    4374:	77 95       	ror	r23
    4376:	67 95       	ror	r22
    4378:	b3 95       	inc	r27
    437a:	d9 f7       	brne	.-10     	; 0x4372 <__fixunssfsi+0x3c>
    437c:	3e f4       	brtc	.+14     	; 0x438c <__fixunssfsi+0x56>
    437e:	90 95       	com	r25
    4380:	80 95       	com	r24
    4382:	70 95       	com	r23
    4384:	61 95       	neg	r22
    4386:	7f 4f       	sbci	r23, 0xFF	; 255
    4388:	8f 4f       	sbci	r24, 0xFF	; 255
    438a:	9f 4f       	sbci	r25, 0xFF	; 255
    438c:	08 95       	ret

0000438e <__fp_cmp>:
    438e:	99 0f       	add	r25, r25
    4390:	00 08       	sbc	r0, r0
    4392:	55 0f       	add	r21, r21
    4394:	aa 0b       	sbc	r26, r26
    4396:	e0 e8       	ldi	r30, 0x80	; 128
    4398:	fe ef       	ldi	r31, 0xFE	; 254
    439a:	16 16       	cp	r1, r22
    439c:	17 06       	cpc	r1, r23
    439e:	e8 07       	cpc	r30, r24
    43a0:	f9 07       	cpc	r31, r25
    43a2:	c0 f0       	brcs	.+48     	; 0x43d4 <__fp_cmp+0x46>
    43a4:	12 16       	cp	r1, r18
    43a6:	13 06       	cpc	r1, r19
    43a8:	e4 07       	cpc	r30, r20
    43aa:	f5 07       	cpc	r31, r21
    43ac:	98 f0       	brcs	.+38     	; 0x43d4 <__fp_cmp+0x46>
    43ae:	62 1b       	sub	r22, r18
    43b0:	73 0b       	sbc	r23, r19
    43b2:	84 0b       	sbc	r24, r20
    43b4:	95 0b       	sbc	r25, r21
    43b6:	39 f4       	brne	.+14     	; 0x43c6 <__fp_cmp+0x38>
    43b8:	0a 26       	eor	r0, r26
    43ba:	61 f0       	breq	.+24     	; 0x43d4 <__fp_cmp+0x46>
    43bc:	23 2b       	or	r18, r19
    43be:	24 2b       	or	r18, r20
    43c0:	25 2b       	or	r18, r21
    43c2:	21 f4       	brne	.+8      	; 0x43cc <__fp_cmp+0x3e>
    43c4:	08 95       	ret
    43c6:	0a 26       	eor	r0, r26
    43c8:	09 f4       	brne	.+2      	; 0x43cc <__fp_cmp+0x3e>
    43ca:	a1 40       	sbci	r26, 0x01	; 1
    43cc:	a6 95       	lsr	r26
    43ce:	8f ef       	ldi	r24, 0xFF	; 255
    43d0:	81 1d       	adc	r24, r1
    43d2:	81 1d       	adc	r24, r1
    43d4:	08 95       	ret

000043d6 <__fp_split3>:
    43d6:	57 fd       	sbrc	r21, 7
    43d8:	90 58       	subi	r25, 0x80	; 128
    43da:	44 0f       	add	r20, r20
    43dc:	55 1f       	adc	r21, r21
    43de:	59 f0       	breq	.+22     	; 0x43f6 <__fp_splitA+0x10>
    43e0:	5f 3f       	cpi	r21, 0xFF	; 255
    43e2:	71 f0       	breq	.+28     	; 0x4400 <__fp_splitA+0x1a>
    43e4:	47 95       	ror	r20

000043e6 <__fp_splitA>:
    43e6:	88 0f       	add	r24, r24
    43e8:	97 fb       	bst	r25, 7
    43ea:	99 1f       	adc	r25, r25
    43ec:	61 f0       	breq	.+24     	; 0x4406 <__fp_splitA+0x20>
    43ee:	9f 3f       	cpi	r25, 0xFF	; 255
    43f0:	79 f0       	breq	.+30     	; 0x4410 <__fp_splitA+0x2a>
    43f2:	87 95       	ror	r24
    43f4:	08 95       	ret
    43f6:	12 16       	cp	r1, r18
    43f8:	13 06       	cpc	r1, r19
    43fa:	14 06       	cpc	r1, r20
    43fc:	55 1f       	adc	r21, r21
    43fe:	f2 cf       	rjmp	.-28     	; 0x43e4 <__fp_split3+0xe>
    4400:	46 95       	lsr	r20
    4402:	f1 df       	rcall	.-30     	; 0x43e6 <__fp_splitA>
    4404:	08 c0       	rjmp	.+16     	; 0x4416 <__fp_splitA+0x30>
    4406:	16 16       	cp	r1, r22
    4408:	17 06       	cpc	r1, r23
    440a:	18 06       	cpc	r1, r24
    440c:	99 1f       	adc	r25, r25
    440e:	f1 cf       	rjmp	.-30     	; 0x43f2 <__fp_splitA+0xc>
    4410:	86 95       	lsr	r24
    4412:	71 05       	cpc	r23, r1
    4414:	61 05       	cpc	r22, r1
    4416:	08 94       	sec
    4418:	08 95       	ret

0000441a <__fp_zero>:
    441a:	e8 94       	clt

0000441c <__fp_szero>:
    441c:	bb 27       	eor	r27, r27
    441e:	66 27       	eor	r22, r22
    4420:	77 27       	eor	r23, r23
    4422:	cb 01       	movw	r24, r22
    4424:	97 f9       	bld	r25, 7
    4426:	08 95       	ret

00004428 <modf>:
    4428:	fa 01       	movw	r30, r20
    442a:	dc 01       	movw	r26, r24
    442c:	aa 0f       	add	r26, r26
    442e:	bb 1f       	adc	r27, r27
    4430:	9b 01       	movw	r18, r22
    4432:	ac 01       	movw	r20, r24
    4434:	bf 57       	subi	r27, 0x7F	; 127
    4436:	28 f4       	brcc	.+10     	; 0x4442 <modf+0x1a>
    4438:	22 27       	eor	r18, r18
    443a:	33 27       	eor	r19, r19
    443c:	44 27       	eor	r20, r20
    443e:	50 78       	andi	r21, 0x80	; 128
    4440:	1f c0       	rjmp	.+62     	; 0x4480 <modf+0x58>
    4442:	b7 51       	subi	r27, 0x17	; 23
    4444:	88 f4       	brcc	.+34     	; 0x4468 <modf+0x40>
    4446:	ab 2f       	mov	r26, r27
    4448:	00 24       	eor	r0, r0
    444a:	46 95       	lsr	r20
    444c:	37 95       	ror	r19
    444e:	27 95       	ror	r18
    4450:	01 1c       	adc	r0, r1
    4452:	a3 95       	inc	r26
    4454:	d2 f3       	brmi	.-12     	; 0x444a <modf+0x22>
    4456:	00 20       	and	r0, r0
    4458:	69 f0       	breq	.+26     	; 0x4474 <modf+0x4c>
    445a:	22 0f       	add	r18, r18
    445c:	33 1f       	adc	r19, r19
    445e:	44 1f       	adc	r20, r20
    4460:	b3 95       	inc	r27
    4462:	da f3       	brmi	.-10     	; 0x445a <modf+0x32>
    4464:	0d d0       	rcall	.+26     	; 0x4480 <modf+0x58>
    4466:	13 c0       	rjmp	.+38     	; 0x448e <__subsf3>
    4468:	61 30       	cpi	r22, 0x01	; 1
    446a:	71 05       	cpc	r23, r1
    446c:	a0 e8       	ldi	r26, 0x80	; 128
    446e:	8a 07       	cpc	r24, r26
    4470:	b9 46       	sbci	r27, 0x69	; 105
    4472:	30 f4       	brcc	.+12     	; 0x4480 <modf+0x58>
    4474:	9b 01       	movw	r18, r22
    4476:	ac 01       	movw	r20, r24
    4478:	66 27       	eor	r22, r22
    447a:	77 27       	eor	r23, r23
    447c:	88 27       	eor	r24, r24
    447e:	90 78       	andi	r25, 0x80	; 128
    4480:	30 96       	adiw	r30, 0x00	; 0
    4482:	21 f0       	breq	.+8      	; 0x448c <modf+0x64>
    4484:	20 83       	st	Z, r18
    4486:	31 83       	std	Z+1, r19	; 0x01
    4488:	42 83       	std	Z+2, r20	; 0x02
    448a:	53 83       	std	Z+3, r21	; 0x03
    448c:	08 95       	ret

0000448e <__subsf3>:
    448e:	50 58       	subi	r21, 0x80	; 128

00004490 <__addsf3>:
    4490:	bb 27       	eor	r27, r27
    4492:	aa 27       	eor	r26, r26
    4494:	0e d0       	rcall	.+28     	; 0x44b2 <__addsf3x>
    4496:	77 c0       	rjmp	.+238    	; 0x4586 <__fp_round>
    4498:	68 d0       	rcall	.+208    	; 0x456a <__fp_pscA>
    449a:	30 f0       	brcs	.+12     	; 0x44a8 <__addsf3+0x18>
    449c:	6d d0       	rcall	.+218    	; 0x4578 <__fp_pscB>
    449e:	20 f0       	brcs	.+8      	; 0x44a8 <__addsf3+0x18>
    44a0:	31 f4       	brne	.+12     	; 0x44ae <__addsf3+0x1e>
    44a2:	9f 3f       	cpi	r25, 0xFF	; 255
    44a4:	11 f4       	brne	.+4      	; 0x44aa <__addsf3+0x1a>
    44a6:	1e f4       	brtc	.+6      	; 0x44ae <__addsf3+0x1e>
    44a8:	5d c0       	rjmp	.+186    	; 0x4564 <__fp_nan>
    44aa:	0e f4       	brtc	.+2      	; 0x44ae <__addsf3+0x1e>
    44ac:	e0 95       	com	r30
    44ae:	e7 fb       	bst	r30, 7
    44b0:	53 c0       	rjmp	.+166    	; 0x4558 <__fp_inf>

000044b2 <__addsf3x>:
    44b2:	e9 2f       	mov	r30, r25
    44b4:	90 df       	rcall	.-224    	; 0x43d6 <__fp_split3>
    44b6:	80 f3       	brcs	.-32     	; 0x4498 <__addsf3+0x8>
    44b8:	ba 17       	cp	r27, r26
    44ba:	62 07       	cpc	r22, r18
    44bc:	73 07       	cpc	r23, r19
    44be:	84 07       	cpc	r24, r20
    44c0:	95 07       	cpc	r25, r21
    44c2:	18 f0       	brcs	.+6      	; 0x44ca <__addsf3x+0x18>
    44c4:	71 f4       	brne	.+28     	; 0x44e2 <__addsf3x+0x30>
    44c6:	9e f5       	brtc	.+102    	; 0x452e <__addsf3x+0x7c>
    44c8:	a8 cf       	rjmp	.-176    	; 0x441a <__fp_zero>
    44ca:	0e f4       	brtc	.+2      	; 0x44ce <__addsf3x+0x1c>
    44cc:	e0 95       	com	r30
    44ce:	0b 2e       	mov	r0, r27
    44d0:	ba 2f       	mov	r27, r26
    44d2:	a0 2d       	mov	r26, r0
    44d4:	0b 01       	movw	r0, r22
    44d6:	b9 01       	movw	r22, r18
    44d8:	90 01       	movw	r18, r0
    44da:	0c 01       	movw	r0, r24
    44dc:	ca 01       	movw	r24, r20
    44de:	a0 01       	movw	r20, r0
    44e0:	11 24       	eor	r1, r1
    44e2:	ff 27       	eor	r31, r31
    44e4:	59 1b       	sub	r21, r25
    44e6:	99 f0       	breq	.+38     	; 0x450e <__addsf3x+0x5c>
    44e8:	59 3f       	cpi	r21, 0xF9	; 249
    44ea:	50 f4       	brcc	.+20     	; 0x4500 <__addsf3x+0x4e>
    44ec:	50 3e       	cpi	r21, 0xE0	; 224
    44ee:	68 f1       	brcs	.+90     	; 0x454a <__addsf3x+0x98>
    44f0:	1a 16       	cp	r1, r26
    44f2:	f0 40       	sbci	r31, 0x00	; 0
    44f4:	a2 2f       	mov	r26, r18
    44f6:	23 2f       	mov	r18, r19
    44f8:	34 2f       	mov	r19, r20
    44fa:	44 27       	eor	r20, r20
    44fc:	58 5f       	subi	r21, 0xF8	; 248
    44fe:	f3 cf       	rjmp	.-26     	; 0x44e6 <__addsf3x+0x34>
    4500:	46 95       	lsr	r20
    4502:	37 95       	ror	r19
    4504:	27 95       	ror	r18
    4506:	a7 95       	ror	r26
    4508:	f0 40       	sbci	r31, 0x00	; 0
    450a:	53 95       	inc	r21
    450c:	c9 f7       	brne	.-14     	; 0x4500 <__addsf3x+0x4e>
    450e:	7e f4       	brtc	.+30     	; 0x452e <__addsf3x+0x7c>
    4510:	1f 16       	cp	r1, r31
    4512:	ba 0b       	sbc	r27, r26
    4514:	62 0b       	sbc	r22, r18
    4516:	73 0b       	sbc	r23, r19
    4518:	84 0b       	sbc	r24, r20
    451a:	ba f0       	brmi	.+46     	; 0x454a <__addsf3x+0x98>
    451c:	91 50       	subi	r25, 0x01	; 1
    451e:	a1 f0       	breq	.+40     	; 0x4548 <__addsf3x+0x96>
    4520:	ff 0f       	add	r31, r31
    4522:	bb 1f       	adc	r27, r27
    4524:	66 1f       	adc	r22, r22
    4526:	77 1f       	adc	r23, r23
    4528:	88 1f       	adc	r24, r24
    452a:	c2 f7       	brpl	.-16     	; 0x451c <__addsf3x+0x6a>
    452c:	0e c0       	rjmp	.+28     	; 0x454a <__addsf3x+0x98>
    452e:	ba 0f       	add	r27, r26
    4530:	62 1f       	adc	r22, r18
    4532:	73 1f       	adc	r23, r19
    4534:	84 1f       	adc	r24, r20
    4536:	48 f4       	brcc	.+18     	; 0x454a <__addsf3x+0x98>
    4538:	87 95       	ror	r24
    453a:	77 95       	ror	r23
    453c:	67 95       	ror	r22
    453e:	b7 95       	ror	r27
    4540:	f7 95       	ror	r31
    4542:	9e 3f       	cpi	r25, 0xFE	; 254
    4544:	08 f0       	brcs	.+2      	; 0x4548 <__addsf3x+0x96>
    4546:	b3 cf       	rjmp	.-154    	; 0x44ae <__addsf3+0x1e>
    4548:	93 95       	inc	r25
    454a:	88 0f       	add	r24, r24
    454c:	08 f0       	brcs	.+2      	; 0x4550 <__addsf3x+0x9e>
    454e:	99 27       	eor	r25, r25
    4550:	ee 0f       	add	r30, r30
    4552:	97 95       	ror	r25
    4554:	87 95       	ror	r24
    4556:	08 95       	ret

00004558 <__fp_inf>:
    4558:	97 f9       	bld	r25, 7
    455a:	9f 67       	ori	r25, 0x7F	; 127
    455c:	80 e8       	ldi	r24, 0x80	; 128
    455e:	70 e0       	ldi	r23, 0x00	; 0
    4560:	60 e0       	ldi	r22, 0x00	; 0
    4562:	08 95       	ret

00004564 <__fp_nan>:
    4564:	9f ef       	ldi	r25, 0xFF	; 255
    4566:	80 ec       	ldi	r24, 0xC0	; 192
    4568:	08 95       	ret

0000456a <__fp_pscA>:
    456a:	00 24       	eor	r0, r0
    456c:	0a 94       	dec	r0
    456e:	16 16       	cp	r1, r22
    4570:	17 06       	cpc	r1, r23
    4572:	18 06       	cpc	r1, r24
    4574:	09 06       	cpc	r0, r25
    4576:	08 95       	ret

00004578 <__fp_pscB>:
    4578:	00 24       	eor	r0, r0
    457a:	0a 94       	dec	r0
    457c:	12 16       	cp	r1, r18
    457e:	13 06       	cpc	r1, r19
    4580:	14 06       	cpc	r1, r20
    4582:	05 06       	cpc	r0, r21
    4584:	08 95       	ret

00004586 <__fp_round>:
    4586:	09 2e       	mov	r0, r25
    4588:	03 94       	inc	r0
    458a:	00 0c       	add	r0, r0
    458c:	11 f4       	brne	.+4      	; 0x4592 <__fp_round+0xc>
    458e:	88 23       	and	r24, r24
    4590:	52 f0       	brmi	.+20     	; 0x45a6 <__fp_round+0x20>
    4592:	bb 0f       	add	r27, r27
    4594:	40 f4       	brcc	.+16     	; 0x45a6 <__fp_round+0x20>
    4596:	bf 2b       	or	r27, r31
    4598:	11 f4       	brne	.+4      	; 0x459e <__fp_round+0x18>
    459a:	60 ff       	sbrs	r22, 0
    459c:	04 c0       	rjmp	.+8      	; 0x45a6 <__fp_round+0x20>
    459e:	6f 5f       	subi	r22, 0xFF	; 255
    45a0:	7f 4f       	sbci	r23, 0xFF	; 255
    45a2:	8f 4f       	sbci	r24, 0xFF	; 255
    45a4:	9f 4f       	sbci	r25, 0xFF	; 255
    45a6:	08 95       	ret

000045a8 <_hihTwiCallback>:
    45a8:	65 30       	cpi	r22, 0x05	; 5
    45aa:	f1 f4       	brne	.+60     	; 0x45e8 <_hihTwiCallback+0x40>
    45ac:	fa 01       	movw	r30, r20
    45ae:	80 81       	ld	r24, Z
    45b0:	8f 73       	andi	r24, 0x3F	; 63
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	98 2f       	mov	r25, r24
    45b6:	88 27       	eor	r24, r24
    45b8:	21 81       	ldd	r18, Z+1	; 0x01
    45ba:	82 2b       	or	r24, r18
    45bc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    45c0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    45c4:	82 81       	ldd	r24, Z+2	; 0x02
    45c6:	f0 e4       	ldi	r31, 0x40	; 64
    45c8:	8f 9f       	mul	r24, r31
    45ca:	c0 01       	movw	r24, r0
    45cc:	11 24       	eor	r1, r1
    45ce:	fa 01       	movw	r30, r20
    45d0:	23 81       	ldd	r18, Z+3	; 0x03
    45d2:	26 95       	lsr	r18
    45d4:	26 95       	lsr	r18
    45d6:	82 2b       	or	r24, r18
    45d8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    45dc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <_measuringIsReady>
    45e6:	08 95       	ret
    45e8:	64 30       	cpi	r22, 0x04	; 4
    45ea:	51 f0       	breq	.+20     	; 0x4600 <_hihTwiCallback+0x58>
    45ec:	80 e0       	ldi	r24, 0x00	; 0
    45ee:	90 e4       	ldi	r25, 0x40	; 64
    45f0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    45f4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    45f8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    45fc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4600:	08 95       	ret

00004602 <hih8120_initialise>:
    4602:	0f 93       	push	r16
    4604:	1f 93       	push	r17
    4606:	04 ed       	ldi	r16, 0xD4	; 212
    4608:	12 e2       	ldi	r17, 0x22	; 34
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	34 e2       	ldi	r19, 0x24	; 36
    460e:	44 ef       	ldi	r20, 0xF4	; 244
    4610:	50 e0       	ldi	r21, 0x00	; 0
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	87 e2       	ldi	r24, 0x27	; 39
    4616:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <twiCreate>
    461a:	90 93 6b 14 	sts	0x146B, r25	; 0x80146b <_hih8120Handler+0x1>
    461e:	80 93 6a 14 	sts	0x146A, r24	; 0x80146a <_hih8120Handler>
    4622:	21 e0       	ldi	r18, 0x01	; 1
    4624:	89 2b       	or	r24, r25
    4626:	09 f0       	breq	.+2      	; 0x462a <hih8120_initialise+0x28>
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	82 2f       	mov	r24, r18
    462c:	1f 91       	pop	r17
    462e:	0f 91       	pop	r16
    4630:	08 95       	ret

00004632 <hih8120_wakeup>:
    4632:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_hih8120Handler>
    4636:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_hih8120Handler+0x1>
    463a:	00 97       	sbiw	r24, 0x00	; 0
    463c:	59 f0       	breq	.+22     	; 0x4654 <hih8120_wakeup+0x22>
    463e:	40 e0       	ldi	r20, 0x00	; 0
    4640:	60 e0       	ldi	r22, 0x00	; 0
    4642:	70 e0       	ldi	r23, 0x00	; 0
    4644:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <twiTransmit>
    4648:	84 30       	cpi	r24, 0x04	; 4
    464a:	31 f4       	brne	.+12     	; 0x4658 <hih8120_wakeup+0x26>
    464c:	10 92 69 14 	sts	0x1469, r1	; 0x801469 <_measuringIsReady>
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	08 95       	ret
    4654:	82 e0       	ldi	r24, 0x02	; 2
    4656:	08 95       	ret
    4658:	83 e0       	ldi	r24, 0x03	; 3
    465a:	08 95       	ret

0000465c <hih8120_measure>:
    465c:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <_hih8120Handler>
    4660:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <_hih8120Handler+0x1>
    4664:	00 97       	sbiw	r24, 0x00	; 0
    4666:	39 f0       	breq	.+14     	; 0x4676 <hih8120_measure+0x1a>
    4668:	64 e0       	ldi	r22, 0x04	; 4
    466a:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <twiReceive>
    466e:	85 30       	cpi	r24, 0x05	; 5
    4670:	21 f0       	breq	.+8      	; 0x467a <hih8120_measure+0x1e>
    4672:	83 e0       	ldi	r24, 0x03	; 3
    4674:	08 95       	ret
    4676:	82 e0       	ldi	r24, 0x02	; 2
    4678:	08 95       	ret
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	08 95       	ret

0000467e <hih8120_getHumidity>:
    467e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4682:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	0e 94 9e 32 	call	0x653c	; 0x653c <__floatunsisf>
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	48 ec       	ldi	r20, 0xC8	; 200
    4694:	52 e4       	ldi	r21, 0x42	; 66
    4696:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	38 ef       	ldi	r19, 0xF8	; 248
    469e:	4f e7       	ldi	r20, 0x7F	; 127
    46a0:	56 e4       	ldi	r21, 0x46	; 70
    46a2:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__divsf3>
    46a6:	08 95       	ret

000046a8 <hih8120_getHumidityPercent_x10>:
    46a8:	ea df       	rcall	.-44     	; 0x467e <hih8120_getHumidity>
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	40 e2       	ldi	r20, 0x20	; 32
    46b0:	51 e4       	ldi	r21, 0x41	; 65
    46b2:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    46b6:	3f de       	rcall	.-898    	; 0x4336 <__fixunssfsi>
    46b8:	cb 01       	movw	r24, r22
    46ba:	08 95       	ret

000046bc <hih8120_getTemperature>:
    46bc:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    46c0:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	0e 94 9e 32 	call	0x653c	; 0x653c <__floatunsisf>
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	45 e2       	ldi	r20, 0x25	; 37
    46d2:	53 e4       	ldi	r21, 0x43	; 67
    46d4:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	38 ef       	ldi	r19, 0xF8	; 248
    46dc:	4f e7       	ldi	r20, 0x7F	; 127
    46de:	56 e4       	ldi	r21, 0x46	; 70
    46e0:	0e 94 2d 32 	call	0x645a	; 0x645a <__divsf3>
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	40 e2       	ldi	r20, 0x20	; 32
    46ea:	52 e4       	ldi	r21, 0x42	; 66
    46ec:	d0 ce       	rjmp	.-608    	; 0x448e <__subsf3>
    46ee:	08 95       	ret

000046f0 <_serialCallBack>:
    46f0:	0f 93       	push	r16
    46f2:	1f 93       	push	r17
    46f4:	cf 93       	push	r28
    46f6:	df 93       	push	r29
    46f8:	1f 92       	push	r1
    46fa:	1f 92       	push	r1
    46fc:	cd b7       	in	r28, 0x3d	; 61
    46fe:	de b7       	in	r29, 0x3e	; 62
    4700:	8c 01       	movw	r16, r24
    4702:	19 82       	std	Y+1, r1	; 0x01
    4704:	2d c0       	rjmp	.+90     	; 0x4760 <_serialCallBack+0x70>
    4706:	e0 91 a3 14 	lds	r30, 0x14A3	; 0x8014a3 <rec_buf_inp.2878>
    470a:	ec 32       	cpi	r30, 0x2C	; 44
    470c:	50 f4       	brcc	.+20     	; 0x4722 <_serialCallBack+0x32>
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	8e 0f       	add	r24, r30
    4712:	80 93 a3 14 	sts	0x14A3, r24	; 0x8014a3 <rec_buf_inp.2878>
    4716:	f0 e0       	ldi	r31, 0x00	; 0
    4718:	e6 55       	subi	r30, 0x56	; 86
    471a:	fb 4e       	sbci	r31, 0xEB	; 235
    471c:	8a 81       	ldd	r24, Y+2	; 0x02
    471e:	80 83       	st	Z, r24
    4720:	02 c0       	rjmp	.+4      	; 0x4726 <_serialCallBack+0x36>
    4722:	10 92 a3 14 	sts	0x14A3, r1	; 0x8014a3 <rec_buf_inp.2878>
    4726:	8a 81       	ldd	r24, Y+2	; 0x02
    4728:	8a 30       	cpi	r24, 0x0A	; 10
    472a:	d1 f4       	brne	.+52     	; 0x4760 <_serialCallBack+0x70>
    472c:	40 91 a3 14 	lds	r20, 0x14A3	; 0x8014a3 <rec_buf_inp.2878>
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	fa 01       	movw	r30, r20
    4734:	e8 55       	subi	r30, 0x58	; 88
    4736:	fb 4e       	sbci	r31, 0xEB	; 235
    4738:	10 82       	st	Z, r1
    473a:	41 50       	subi	r20, 0x01	; 1
    473c:	51 09       	sbc	r21, r1
    473e:	9e 01       	movw	r18, r28
    4740:	2f 5f       	subi	r18, 0xFF	; 255
    4742:	3f 4f       	sbci	r19, 0xFF	; 255
    4744:	6a ea       	ldi	r22, 0xAA	; 170
    4746:	74 e1       	ldi	r23, 0x14	; 20
    4748:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <_serialReplyBufferHandle>
    474c:	90 91 a7 14 	lds	r25, 0x14A7	; 0x8014a7 <_serialReplyBufferHandle+0x1>
    4750:	0e 94 ad 10 	call	0x215a	; 0x215a <xStreamBufferSendFromISR>
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	81 11       	cpse	r24, r1
    4758:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vPortYield>
    475c:	10 92 a3 14 	sts	0x14A3, r1	; 0x8014a3 <rec_buf_inp.2878>
    4760:	be 01       	movw	r22, r28
    4762:	6e 5f       	subi	r22, 0xFE	; 254
    4764:	7f 4f       	sbci	r23, 0xFF	; 255
    4766:	c8 01       	movw	r24, r16
    4768:	fa d4       	rcall	.+2548   	; 0x515e <serial_getByte>
    476a:	88 23       	and	r24, r24
    476c:	61 f2       	breq	.-104    	; 0x4706 <_serialCallBack+0x16>
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	1f 91       	pop	r17
    4778:	0f 91       	pop	r16
    477a:	08 95       	ret

0000477c <_uploadMessage>:
    477c:	0f 93       	push	r16
    477e:	1f 93       	push	r17
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	8c 01       	movw	r16, r24
    4786:	eb 01       	movw	r28, r22
    4788:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <_serialReplyBufferHandle>
    478c:	90 91 a7 14 	lds	r25, 0x14A7	; 0x8014a7 <_serialReplyBufferHandle+0x1>
    4790:	0e 94 7d 10 	call	0x20fa	; 0x20fa <xStreamBufferReset>
    4794:	b8 01       	movw	r22, r16
    4796:	8c e6       	ldi	r24, 0x6C	; 108
    4798:	94 e1       	ldi	r25, 0x14	; 20
    479a:	0e 94 e7 35 	call	0x6bce	; 0x6bce <strcpy>
    479e:	20 97       	sbiw	r28, 0x00	; 0
    47a0:	79 f0       	breq	.+30     	; 0x47c0 <_uploadMessage+0x44>
    47a2:	ec e6       	ldi	r30, 0x6C	; 108
    47a4:	f4 e1       	ldi	r31, 0x14	; 20
    47a6:	01 90       	ld	r0, Z+
    47a8:	00 20       	and	r0, r0
    47aa:	e9 f7       	brne	.-6      	; 0x47a6 <_uploadMessage+0x2a>
    47ac:	31 97       	sbiw	r30, 0x01	; 1
    47ae:	80 e2       	ldi	r24, 0x20	; 32
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	91 83       	std	Z+1, r25	; 0x01
    47b4:	80 83       	st	Z, r24
    47b6:	be 01       	movw	r22, r28
    47b8:	8c e6       	ldi	r24, 0x6C	; 108
    47ba:	94 e1       	ldi	r25, 0x14	; 20
    47bc:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <strcat>
    47c0:	ec e6       	ldi	r30, 0x6C	; 108
    47c2:	f4 e1       	ldi	r31, 0x14	; 20
    47c4:	df 01       	movw	r26, r30
    47c6:	0d 90       	ld	r0, X+
    47c8:	00 20       	and	r0, r0
    47ca:	e9 f7       	brne	.-6      	; 0x47c6 <_uploadMessage+0x4a>
    47cc:	11 97       	sbiw	r26, 0x01	; 1
    47ce:	8d e0       	ldi	r24, 0x0D	; 13
    47d0:	9a e0       	ldi	r25, 0x0A	; 10
    47d2:	11 96       	adiw	r26, 0x01	; 1
    47d4:	9c 93       	st	X, r25
    47d6:	8e 93       	st	-X, r24
    47d8:	12 96       	adiw	r26, 0x02	; 2
    47da:	1c 92       	st	X, r1
    47dc:	01 90       	ld	r0, Z+
    47de:	00 20       	and	r0, r0
    47e0:	e9 f7       	brne	.-6      	; 0x47dc <_uploadMessage+0x60>
    47e2:	31 97       	sbiw	r30, 0x01	; 1
    47e4:	ec 56       	subi	r30, 0x6C	; 108
    47e6:	f4 41       	sbci	r31, 0x14	; 20
    47e8:	ae 2f       	mov	r26, r30
    47ea:	8c e6       	ldi	r24, 0x6C	; 108
    47ec:	94 e1       	ldi	r25, 0x14	; 20
    47ee:	ac 01       	movw	r20, r24
    47f0:	6a 2f       	mov	r22, r26
    47f2:	80 91 a8 14 	lds	r24, 0x14A8	; 0x8014a8 <_rn2483_serial>
    47f6:	90 91 a9 14 	lds	r25, 0x14A9	; 0x8014a9 <_rn2483_serial+0x1>
    47fa:	5c d4       	rcall	.+2232   	; 0x50b4 <serial_sendBytes>
    47fc:	81 11       	cpse	r24, r1
    47fe:	11 c0       	rjmp	.+34     	; 0x4822 <_uploadMessage+0xa6>
    4800:	08 e2       	ldi	r16, 0x28	; 40
    4802:	15 e0       	ldi	r17, 0x05	; 5
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	4d e2       	ldi	r20, 0x2D	; 45
    480a:	50 e0       	ldi	r21, 0x00	; 0
    480c:	64 e0       	ldi	r22, 0x04	; 4
    480e:	75 e1       	ldi	r23, 0x15	; 21
    4810:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <_serialReplyBufferHandle>
    4814:	90 91 a7 14 	lds	r25, 0x14A7	; 0x8014a7 <_serialReplyBufferHandle+0x1>
    4818:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xStreamBufferReceive>
    481c:	84 e0       	ldi	r24, 0x04	; 4
    481e:	95 e1       	ldi	r25, 0x15	; 21
    4820:	02 c0       	rjmp	.+4      	; 0x4826 <_uploadMessage+0xaa>
    4822:	80 e0       	ldi	r24, 0x00	; 0
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	df 91       	pop	r29
    4828:	cf 91       	pop	r28
    482a:	1f 91       	pop	r17
    482c:	0f 91       	pop	r16
    482e:	08 95       	ret

00004830 <_reply2ReturnCode>:
    4830:	2f 92       	push	r2
    4832:	3f 92       	push	r3
    4834:	4f 92       	push	r4
    4836:	5f 92       	push	r5
    4838:	6f 92       	push	r6
    483a:	7f 92       	push	r7
    483c:	8f 92       	push	r8
    483e:	9f 92       	push	r9
    4840:	af 92       	push	r10
    4842:	bf 92       	push	r11
    4844:	cf 92       	push	r12
    4846:	df 92       	push	r13
    4848:	ef 92       	push	r14
    484a:	ff 92       	push	r15
    484c:	0f 93       	push	r16
    484e:	1f 93       	push	r17
    4850:	cf 93       	push	r28
    4852:	df 93       	push	r29
    4854:	5c 01       	movw	r10, r24
    4856:	fc 01       	movw	r30, r24
    4858:	01 90       	ld	r0, Z+
    485a:	00 20       	and	r0, r0
    485c:	e9 f7       	brne	.-6      	; 0x4858 <_reply2ReturnCode+0x28>
    485e:	31 97       	sbiw	r30, 0x01	; 1
    4860:	6f 01       	movw	r12, r30
    4862:	c8 1a       	sub	r12, r24
    4864:	d9 0a       	sbc	r13, r25
    4866:	5c 2c       	mov	r5, r12
    4868:	0f 2e       	mov	r0, r31
    486a:	f5 e6       	ldi	r31, 0x65	; 101
    486c:	8f 2e       	mov	r8, r31
    486e:	f7 e0       	ldi	r31, 0x07	; 7
    4870:	9f 2e       	mov	r9, r31
    4872:	f0 2d       	mov	r31, r0
    4874:	e1 2c       	mov	r14, r1
    4876:	f1 2c       	mov	r15, r1
    4878:	4c 2c       	mov	r4, r12
    487a:	37 01       	movw	r6, r14
    487c:	f4 01       	movw	r30, r8
    487e:	01 81       	ldd	r16, Z+1	; 0x01
    4880:	12 81       	ldd	r17, Z+2	; 0x02
    4882:	e8 01       	movw	r28, r16
    4884:	09 90       	ld	r0, Y+
    4886:	00 20       	and	r0, r0
    4888:	e9 f7       	brne	.-6      	; 0x4884 <_reply2ReturnCode+0x54>
    488a:	21 97       	sbiw	r28, 0x01	; 1
    488c:	c0 1b       	sub	r28, r16
    488e:	d1 0b       	sbc	r29, r17
    4890:	3c 2e       	mov	r3, r28
    4892:	f9 e0       	ldi	r31, 0x09	; 9
    4894:	cf 16       	cp	r12, r31
    4896:	d1 04       	cpc	r13, r1
    4898:	58 f0       	brcs	.+22     	; 0x48b0 <_reply2ReturnCode+0x80>
    489a:	f4 01       	movw	r30, r8
    489c:	20 80       	ld	r2, Z
    489e:	fe e0       	ldi	r31, 0x0E	; 14
    48a0:	2f 12       	cpse	r2, r31
    48a2:	06 c0       	rjmp	.+12     	; 0x48b0 <_reply2ReturnCode+0x80>
    48a4:	b8 01       	movw	r22, r16
    48a6:	c5 01       	movw	r24, r10
    48a8:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <strcasestr>
    48ac:	89 2b       	or	r24, r25
    48ae:	09 f5       	brne	.+66     	; 0x48f2 <_reply2ReturnCode+0xc2>
    48b0:	44 2d       	mov	r20, r4
    48b2:	35 14       	cp	r3, r5
    48b4:	08 f4       	brcc	.+2      	; 0x48b8 <_reply2ReturnCode+0x88>
    48b6:	4c 2f       	mov	r20, r28
    48b8:	50 e0       	ldi	r21, 0x00	; 0
    48ba:	b8 01       	movw	r22, r16
    48bc:	c5 01       	movw	r24, r10
    48be:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <strncasecmp>
    48c2:	89 2b       	or	r24, r25
    48c4:	49 f4       	brne	.+18     	; 0x48d8 <_reply2ReturnCode+0xa8>
    48c6:	f3 01       	movw	r30, r6
    48c8:	ee 0f       	add	r30, r30
    48ca:	ff 1f       	adc	r31, r31
    48cc:	e6 0d       	add	r30, r6
    48ce:	f7 1d       	adc	r31, r7
    48d0:	eb 59       	subi	r30, 0x9B	; 155
    48d2:	f8 4f       	sbci	r31, 0xF8	; 248
    48d4:	20 80       	ld	r2, Z
    48d6:	0d c0       	rjmp	.+26     	; 0x48f2 <_reply2ReturnCode+0xc2>
    48d8:	8f ef       	ldi	r24, 0xFF	; 255
    48da:	e8 1a       	sub	r14, r24
    48dc:	f8 0a       	sbc	r15, r24
    48de:	e3 e0       	ldi	r30, 0x03	; 3
    48e0:	8e 0e       	add	r8, r30
    48e2:	91 1c       	adc	r9, r1
    48e4:	f1 e1       	ldi	r31, 0x11	; 17
    48e6:	ef 16       	cp	r14, r31
    48e8:	f1 04       	cpc	r15, r1
    48ea:	39 f6       	brne	.-114    	; 0x487a <_reply2ReturnCode+0x4a>
    48ec:	68 94       	set
    48ee:	22 24       	eor	r2, r2
    48f0:	24 f8       	bld	r2, 4
    48f2:	82 2d       	mov	r24, r2
    48f4:	df 91       	pop	r29
    48f6:	cf 91       	pop	r28
    48f8:	1f 91       	pop	r17
    48fa:	0f 91       	pop	r16
    48fc:	ff 90       	pop	r15
    48fe:	ef 90       	pop	r14
    4900:	df 90       	pop	r13
    4902:	cf 90       	pop	r12
    4904:	bf 90       	pop	r11
    4906:	af 90       	pop	r10
    4908:	9f 90       	pop	r9
    490a:	8f 90       	pop	r8
    490c:	7f 90       	pop	r7
    490e:	6f 90       	pop	r6
    4910:	5f 90       	pop	r5
    4912:	4f 90       	pop	r4
    4914:	3f 90       	pop	r3
    4916:	2f 90       	pop	r2
    4918:	08 95       	ret

0000491a <_uploadMessageRc>:
    491a:	30 df       	rcall	.-416    	; 0x477c <_uploadMessage>
    491c:	89 cf       	rjmp	.-238    	; 0x4830 <_reply2ReturnCode>
    491e:	08 95       	ret

00004920 <lora_driver_flushBuffers>:
    4920:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <_serialReplyBufferHandle>
    4924:	90 91 a7 14 	lds	r25, 0x14A7	; 0x8014a7 <_serialReplyBufferHandle+0x1>
    4928:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <xStreamBufferReset>
    492c:	08 95       	ret

0000492e <lora_driver_initialise>:
    492e:	8f 92       	push	r8
    4930:	9f 92       	push	r9
    4932:	af 92       	push	r10
    4934:	cf 92       	push	r12
    4936:	ef 92       	push	r14
    4938:	0f 93       	push	r16
    493a:	1f 93       	push	r17
    493c:	cf 93       	push	r28
    493e:	c8 2f       	mov	r28, r24
    4940:	8b 01       	movw	r16, r22
    4942:	41 e0       	ldi	r20, 0x01	; 1
    4944:	60 e0       	ldi	r22, 0x00	; 0
    4946:	70 e0       	ldi	r23, 0x00	; 0
    4948:	88 ec       	ldi	r24, 0xC8	; 200
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	0e 94 4b 10 	call	0x2096	; 0x2096 <xStreamBufferGenericCreate>
    4950:	90 93 a7 14 	sts	0x14A7, r25	; 0x8014a7 <_serialReplyBufferHandle+0x1>
    4954:	80 93 a6 14 	sts	0x14A6, r24	; 0x8014a6 <_serialReplyBufferHandle>
    4958:	10 93 a5 14 	sts	0x14A5, r17	; 0x8014a5 <_downlinkMessageBuffer+0x1>
    495c:	00 93 a4 14 	sts	0x14A4, r16	; 0x8014a4 <_downlinkMessageBuffer>
    4960:	0f 2e       	mov	r0, r31
    4962:	f8 e7       	ldi	r31, 0x78	; 120
    4964:	8f 2e       	mov	r8, r31
    4966:	f3 e2       	ldi	r31, 0x23	; 35
    4968:	9f 2e       	mov	r9, r31
    496a:	f0 2d       	mov	r31, r0
    496c:	68 94       	set
    496e:	aa 24       	eor	r10, r10
    4970:	a6 f8       	bld	r10, 6
    4972:	68 94       	set
    4974:	cc 24       	eor	r12, r12
    4976:	c6 f8       	bld	r12, 6
    4978:	e1 2c       	mov	r14, r1
    497a:	00 e0       	ldi	r16, 0x00	; 0
    497c:	23 e0       	ldi	r18, 0x03	; 3
    497e:	40 e0       	ldi	r20, 0x00	; 0
    4980:	51 ee       	ldi	r21, 0xE1	; 225
    4982:	60 e0       	ldi	r22, 0x00	; 0
    4984:	70 e0       	ldi	r23, 0x00	; 0
    4986:	8c 2f       	mov	r24, r28
    4988:	c6 d2       	rcall	.+1420   	; 0x4f16 <serial_create>
    498a:	90 93 a9 14 	sts	0x14A9, r25	; 0x8014a9 <_rn2483_serial+0x1>
    498e:	80 93 a8 14 	sts	0x14A8, r24	; 0x8014a8 <_rn2483_serial>
    4992:	e7 e0       	ldi	r30, 0x07	; 7
    4994:	f1 e0       	ldi	r31, 0x01	; 1
    4996:	80 81       	ld	r24, Z
    4998:	80 61       	ori	r24, 0x10	; 16
    499a:	80 83       	st	Z, r24
    499c:	cf 91       	pop	r28
    499e:	1f 91       	pop	r17
    49a0:	0f 91       	pop	r16
    49a2:	ef 90       	pop	r14
    49a4:	cf 90       	pop	r12
    49a6:	af 90       	pop	r10
    49a8:	9f 90       	pop	r9
    49aa:	8f 90       	pop	r8
    49ac:	08 95       	ret

000049ae <lora_driver_resetRn2483>:
    49ae:	88 23       	and	r24, r24
    49b0:	31 f0       	breq	.+12     	; 0x49be <lora_driver_resetRn2483+0x10>
    49b2:	e8 e0       	ldi	r30, 0x08	; 8
    49b4:	f1 e0       	ldi	r31, 0x01	; 1
    49b6:	80 81       	ld	r24, Z
    49b8:	8f 7e       	andi	r24, 0xEF	; 239
    49ba:	80 83       	st	Z, r24
    49bc:	08 95       	ret
    49be:	e8 e0       	ldi	r30, 0x08	; 8
    49c0:	f1 e0       	ldi	r31, 0x01	; 1
    49c2:	80 81       	ld	r24, Z
    49c4:	80 61       	ori	r24, 0x10	; 16
    49c6:	80 83       	st	Z, r24
    49c8:	08 95       	ret

000049ca <lora_driver_rn2483FactoryReset>:
    49ca:	60 e0       	ldi	r22, 0x00	; 0
    49cc:	70 e0       	ldi	r23, 0x00	; 0
    49ce:	8b ee       	ldi	r24, 0xEB	; 235
    49d0:	94 e0       	ldi	r25, 0x04	; 4
    49d2:	d4 de       	rcall	.-600    	; 0x477c <_uploadMessage>
    49d4:	e4 e0       	ldi	r30, 0x04	; 4
    49d6:	f5 e1       	ldi	r31, 0x15	; 21
    49d8:	01 90       	ld	r0, Z+
    49da:	00 20       	and	r0, r0
    49dc:	e9 f7       	brne	.-6      	; 0x49d8 <lora_driver_rn2483FactoryReset+0xe>
    49de:	31 97       	sbiw	r30, 0x01	; 1
    49e0:	e4 50       	subi	r30, 0x04	; 4
    49e2:	f5 41       	sbci	r31, 0x15	; 21
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	75 97       	sbiw	r30, 0x15	; 21
    49e8:	08 f0       	brcs	.+2      	; 0x49ec <lora_driver_rn2483FactoryReset+0x22>
    49ea:	80 e0       	ldi	r24, 0x00	; 0
    49ec:	08 95       	ret

000049ee <lora_driver_getRn2483Hweui>:
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
    49f2:	ec 01       	movw	r28, r24
    49f4:	60 e0       	ldi	r22, 0x00	; 0
    49f6:	70 e0       	ldi	r23, 0x00	; 0
    49f8:	8c ef       	ldi	r24, 0xFC	; 252
    49fa:	94 e0       	ldi	r25, 0x04	; 4
    49fc:	bf de       	rcall	.-642    	; 0x477c <_uploadMessage>
    49fe:	e4 e0       	ldi	r30, 0x04	; 4
    4a00:	f5 e1       	ldi	r31, 0x15	; 21
    4a02:	01 90       	ld	r0, Z+
    4a04:	00 20       	and	r0, r0
    4a06:	e9 f7       	brne	.-6      	; 0x4a02 <lora_driver_getRn2483Hweui+0x14>
    4a08:	e5 51       	subi	r30, 0x15	; 21
    4a0a:	f5 41       	sbci	r31, 0x15	; 21
    4a0c:	39 f4       	brne	.+14     	; 0x4a1c <lora_driver_getRn2483Hweui+0x2e>
    4a0e:	64 e0       	ldi	r22, 0x04	; 4
    4a10:	75 e1       	ldi	r23, 0x15	; 21
    4a12:	ce 01       	movw	r24, r28
    4a14:	0e 94 e7 35 	call	0x6bce	; 0x6bce <strcpy>
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	02 c0       	rjmp	.+4      	; 0x4a20 <lora_driver_getRn2483Hweui+0x32>
    4a1c:	18 82       	st	Y, r1
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	df 91       	pop	r29
    4a22:	cf 91       	pop	r28
    4a24:	08 95       	ret

00004a26 <lora_driver_setDeviceIdentifier>:
    4a26:	fc 01       	movw	r30, r24
    4a28:	01 90       	ld	r0, Z+
    4a2a:	00 20       	and	r0, r0
    4a2c:	e9 f7       	brne	.-6      	; 0x4a28 <lora_driver_setDeviceIdentifier+0x2>
    4a2e:	9f 01       	movw	r18, r30
    4a30:	21 51       	subi	r18, 0x11	; 17
    4a32:	31 09       	sbc	r19, r1
    4a34:	28 17       	cp	r18, r24
    4a36:	39 07       	cpc	r19, r25
    4a38:	29 f4       	brne	.+10     	; 0x4a44 <lora_driver_setDeviceIdentifier+0x1e>
    4a3a:	bc 01       	movw	r22, r24
    4a3c:	8a e2       	ldi	r24, 0x2A	; 42
    4a3e:	95 e0       	ldi	r25, 0x05	; 5
    4a40:	6c cf       	rjmp	.-296    	; 0x491a <_uploadMessageRc>
    4a42:	08 95       	ret
    4a44:	89 e0       	ldi	r24, 0x09	; 9
    4a46:	08 95       	ret

00004a48 <lora_driver_setApplicationIdentifier>:
    4a48:	fc 01       	movw	r30, r24
    4a4a:	01 90       	ld	r0, Z+
    4a4c:	00 20       	and	r0, r0
    4a4e:	e9 f7       	brne	.-6      	; 0x4a4a <lora_driver_setApplicationIdentifier+0x2>
    4a50:	9f 01       	movw	r18, r30
    4a52:	21 51       	subi	r18, 0x11	; 17
    4a54:	31 09       	sbc	r19, r1
    4a56:	28 17       	cp	r18, r24
    4a58:	39 07       	cpc	r19, r25
    4a5a:	29 f4       	brne	.+10     	; 0x4a66 <lora_driver_setApplicationIdentifier+0x1e>
    4a5c:	bc 01       	movw	r22, r24
    4a5e:	89 e3       	ldi	r24, 0x39	; 57
    4a60:	95 e0       	ldi	r25, 0x05	; 5
    4a62:	5b cf       	rjmp	.-330    	; 0x491a <_uploadMessageRc>
    4a64:	08 95       	ret
    4a66:	89 e0       	ldi	r24, 0x09	; 9
    4a68:	08 95       	ret

00004a6a <lora_driver_setApplicationKey>:
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	01 90       	ld	r0, Z+
    4a6e:	00 20       	and	r0, r0
    4a70:	e9 f7       	brne	.-6      	; 0x4a6c <lora_driver_setApplicationKey+0x2>
    4a72:	9f 01       	movw	r18, r30
    4a74:	21 52       	subi	r18, 0x21	; 33
    4a76:	31 09       	sbc	r19, r1
    4a78:	28 17       	cp	r18, r24
    4a7a:	39 07       	cpc	r19, r25
    4a7c:	29 f4       	brne	.+10     	; 0x4a88 <lora_driver_setApplicationKey+0x1e>
    4a7e:	bc 01       	movw	r22, r24
    4a80:	88 e4       	ldi	r24, 0x48	; 72
    4a82:	95 e0       	ldi	r25, 0x05	; 5
    4a84:	4a cf       	rjmp	.-364    	; 0x491a <_uploadMessageRc>
    4a86:	08 95       	ret
    4a88:	89 e0       	ldi	r24, 0x09	; 9
    4a8a:	08 95       	ret

00004a8c <lora_driver_saveMac>:
    4a8c:	60 e0       	ldi	r22, 0x00	; 0
    4a8e:	70 e0       	ldi	r23, 0x00	; 0
    4a90:	87 e8       	ldi	r24, 0x87	; 135
    4a92:	95 e0       	ldi	r25, 0x05	; 5
    4a94:	42 cf       	rjmp	.-380    	; 0x491a <_uploadMessageRc>
    4a96:	08 95       	ret

00004a98 <lora_driver_join>:
    4a98:	0f 93       	push	r16
    4a9a:	1f 93       	push	r17
    4a9c:	e8 2f       	mov	r30, r24
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	ee 0f       	add	r30, r30
    4aa2:	ff 1f       	adc	r31, r31
    4aa4:	ef 59       	subi	r30, 0x9F	; 159
    4aa6:	f8 4f       	sbci	r31, 0xF8	; 248
    4aa8:	60 81       	ld	r22, Z
    4aaa:	71 81       	ldd	r23, Z+1	; 0x01
    4aac:	80 e9       	ldi	r24, 0x90	; 144
    4aae:	95 e0       	ldi	r25, 0x05	; 5
    4ab0:	34 df       	rcall	.-408    	; 0x491a <_uploadMessageRc>
    4ab2:	81 11       	cpse	r24, r1
    4ab4:	14 c0       	rjmp	.+40     	; 0x4ade <lora_driver_join+0x46>
    4ab6:	08 e2       	ldi	r16, 0x28	; 40
    4ab8:	15 e0       	ldi	r17, 0x05	; 5
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	4d e2       	ldi	r20, 0x2D	; 45
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	64 e0       	ldi	r22, 0x04	; 4
    4ac4:	75 e1       	ldi	r23, 0x15	; 21
    4ac6:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <_serialReplyBufferHandle>
    4aca:	90 91 a7 14 	lds	r25, 0x14A7	; 0x8014a7 <_serialReplyBufferHandle+0x1>
    4ace:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xStreamBufferReceive>
    4ad2:	88 23       	and	r24, r24
    4ad4:	21 f0       	breq	.+8      	; 0x4ade <lora_driver_join+0x46>
    4ad6:	84 e0       	ldi	r24, 0x04	; 4
    4ad8:	95 e1       	ldi	r25, 0x15	; 21
    4ada:	aa de       	rcall	.-684    	; 0x4830 <_reply2ReturnCode>
    4adc:	03 c0       	rjmp	.+6      	; 0x4ae4 <lora_driver_join+0x4c>
    4ade:	84 e0       	ldi	r24, 0x04	; 4
    4ae0:	95 e1       	ldi	r25, 0x15	; 21
    4ae2:	a6 de       	rcall	.-692    	; 0x4830 <_reply2ReturnCode>
    4ae4:	1f 91       	pop	r17
    4ae6:	0f 91       	pop	r16
    4ae8:	08 95       	ret

00004aea <lora_driver_setAdaptiveDataRate>:
    4aea:	81 30       	cpi	r24, 0x01	; 1
    4aec:	19 f0       	breq	.+6      	; 0x4af4 <lora_driver_setAdaptiveDataRate+0xa>
    4aee:	6f ea       	ldi	r22, 0xAF	; 175
    4af0:	75 e0       	ldi	r23, 0x05	; 5
    4af2:	02 c0       	rjmp	.+4      	; 0x4af8 <lora_driver_setAdaptiveDataRate+0xe>
    4af4:	68 e8       	ldi	r22, 0x88	; 136
    4af6:	76 e0       	ldi	r23, 0x06	; 6
    4af8:	83 eb       	ldi	r24, 0xB3	; 179
    4afa:	95 e0       	ldi	r25, 0x05	; 5
    4afc:	0e cf       	rjmp	.-484    	; 0x491a <_uploadMessageRc>
    4afe:	08 95       	ret

00004b00 <lora_driver_setReceiveDelay>:
    4b00:	9f 93       	push	r25
    4b02:	8f 93       	push	r24
    4b04:	84 ee       	ldi	r24, 0xE4	; 228
    4b06:	95 e0       	ldi	r25, 0x05	; 5
    4b08:	9f 93       	push	r25
    4b0a:	8f 93       	push	r24
    4b0c:	87 ed       	ldi	r24, 0xD7	; 215
    4b0e:	94 e1       	ldi	r25, 0x14	; 20
    4b10:	9f 93       	push	r25
    4b12:	8f 93       	push	r24
    4b14:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <sprintf>
    4b18:	60 e0       	ldi	r22, 0x00	; 0
    4b1a:	70 e0       	ldi	r23, 0x00	; 0
    4b1c:	87 ed       	ldi	r24, 0xD7	; 215
    4b1e:	94 e1       	ldi	r25, 0x14	; 20
    4b20:	fc de       	rcall	.-520    	; 0x491a <_uploadMessageRc>
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	0f 90       	pop	r0
    4b28:	0f 90       	pop	r0
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	08 95       	ret

00004b30 <lora_driver_configureToEu868>:
    4b30:	2f 92       	push	r2
    4b32:	3f 92       	push	r3
    4b34:	4f 92       	push	r4
    4b36:	5f 92       	push	r5
    4b38:	6f 92       	push	r6
    4b3a:	7f 92       	push	r7
    4b3c:	8f 92       	push	r8
    4b3e:	9f 92       	push	r9
    4b40:	af 92       	push	r10
    4b42:	bf 92       	push	r11
    4b44:	cf 92       	push	r12
    4b46:	df 92       	push	r13
    4b48:	ef 92       	push	r14
    4b4a:	ff 92       	push	r15
    4b4c:	0f 93       	push	r16
    4b4e:	1f 93       	push	r17
    4b50:	cf 93       	push	r28
    4b52:	df 93       	push	r29
    4b54:	cd b7       	in	r28, 0x3d	; 61
    4b56:	de b7       	in	r29, 0x3e	; 62
    4b58:	a0 97       	sbiw	r28, 0x20	; 32
    4b5a:	0f b6       	in	r0, 0x3f	; 63
    4b5c:	f8 94       	cli
    4b5e:	de bf       	out	0x3e, r29	; 62
    4b60:	0f be       	out	0x3f, r0	; 63
    4b62:	cd bf       	out	0x3d, r28	; 61
    4b64:	61 e1       	ldi	r22, 0x11	; 17
    4b66:	76 e0       	ldi	r23, 0x06	; 6
    4b68:	8d e1       	ldi	r24, 0x1D	; 29
    4b6a:	96 e0       	ldi	r25, 0x06	; 6
    4b6c:	07 de       	rcall	.-1010   	; 0x477c <_uploadMessage>
    4b6e:	60 de       	rcall	.-832    	; 0x4830 <_reply2ReturnCode>
    4b70:	81 11       	cpse	r24, r1
    4b72:	a3 c0       	rjmp	.+326    	; 0x4cba <lora_driver_configureToEu868+0x18a>
    4b74:	80 e2       	ldi	r24, 0x20	; 32
    4b76:	e2 e2       	ldi	r30, 0x22	; 34
    4b78:	f2 e0       	ldi	r31, 0x02	; 2
    4b7a:	de 01       	movw	r26, r28
    4b7c:	11 96       	adiw	r26, 0x01	; 1
    4b7e:	01 90       	ld	r0, Z+
    4b80:	0d 92       	st	X+, r0
    4b82:	8a 95       	dec	r24
    4b84:	e1 f7       	brne	.-8      	; 0x4b7e <lora_driver_configureToEu868+0x4e>
    4b86:	9e 01       	movw	r18, r28
    4b88:	2f 5f       	subi	r18, 0xFF	; 255
    4b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8c:	69 01       	movw	r12, r18
    4b8e:	e1 2c       	mov	r14, r1
    4b90:	f1 2c       	mov	r15, r1
    4b92:	0f 2e       	mov	r0, r31
    4b94:	f9 e2       	ldi	r31, 0x29	; 41
    4b96:	af 2e       	mov	r10, r31
    4b98:	f6 e0       	ldi	r31, 0x06	; 6
    4b9a:	bf 2e       	mov	r11, r31
    4b9c:	f0 2d       	mov	r31, r0
    4b9e:	07 ed       	ldi	r16, 0xD7	; 215
    4ba0:	14 e1       	ldi	r17, 0x14	; 20
    4ba2:	0f 2e       	mov	r0, r31
    4ba4:	f2 e4       	ldi	r31, 0x42	; 66
    4ba6:	4f 2e       	mov	r4, r31
    4ba8:	f6 e0       	ldi	r31, 0x06	; 6
    4baa:	5f 2e       	mov	r5, r31
    4bac:	f0 2d       	mov	r31, r0
    4bae:	0f 2e       	mov	r0, r31
    4bb0:	f9 e5       	ldi	r31, 0x59	; 89
    4bb2:	8f 2e       	mov	r8, r31
    4bb4:	f6 e0       	ldi	r31, 0x06	; 6
    4bb6:	9f 2e       	mov	r9, r31
    4bb8:	f0 2d       	mov	r31, r0
    4bba:	0f 2e       	mov	r0, r31
    4bbc:	f3 e7       	ldi	r31, 0x73	; 115
    4bbe:	6f 2e       	mov	r6, r31
    4bc0:	f6 e0       	ldi	r31, 0x06	; 6
    4bc2:	7f 2e       	mov	r7, r31
    4bc4:	f0 2d       	mov	r31, r0
    4bc6:	3e 2c       	mov	r3, r14
    4bc8:	2f 2c       	mov	r2, r15
    4bca:	ff 92       	push	r15
    4bcc:	ef 92       	push	r14
    4bce:	bf 92       	push	r11
    4bd0:	af 92       	push	r10
    4bd2:	1f 93       	push	r17
    4bd4:	0f 93       	push	r16
    4bd6:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <sprintf>
    4bda:	60 e0       	ldi	r22, 0x00	; 0
    4bdc:	70 e0       	ldi	r23, 0x00	; 0
    4bde:	c8 01       	movw	r24, r16
    4be0:	cd dd       	rcall	.-1126   	; 0x477c <_uploadMessage>
    4be2:	26 de       	rcall	.-948    	; 0x4830 <_reply2ReturnCode>
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	0f 90       	pop	r0
    4bee:	0f 90       	pop	r0
    4bf0:	81 11       	cpse	r24, r1
    4bf2:	63 c0       	rjmp	.+198    	; 0x4cba <lora_driver_configureToEu868+0x18a>
    4bf4:	32 e0       	ldi	r19, 0x02	; 2
    4bf6:	3e 15       	cp	r19, r14
    4bf8:	e8 f4       	brcc	.+58     	; 0x4c34 <lora_driver_configureToEu868+0x104>
    4bfa:	f6 01       	movw	r30, r12
    4bfc:	83 81       	ldd	r24, Z+3	; 0x03
    4bfe:	8f 93       	push	r24
    4c00:	82 81       	ldd	r24, Z+2	; 0x02
    4c02:	8f 93       	push	r24
    4c04:	81 81       	ldd	r24, Z+1	; 0x01
    4c06:	8f 93       	push	r24
    4c08:	80 81       	ld	r24, Z
    4c0a:	8f 93       	push	r24
    4c0c:	ff 92       	push	r15
    4c0e:	ef 92       	push	r14
    4c10:	5f 92       	push	r5
    4c12:	4f 92       	push	r4
    4c14:	1f 93       	push	r17
    4c16:	0f 93       	push	r16
    4c18:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <sprintf>
    4c1c:	60 e0       	ldi	r22, 0x00	; 0
    4c1e:	70 e0       	ldi	r23, 0x00	; 0
    4c20:	c8 01       	movw	r24, r16
    4c22:	ac dd       	rcall	.-1192   	; 0x477c <_uploadMessage>
    4c24:	05 de       	rcall	.-1014   	; 0x4830 <_reply2ReturnCode>
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	f8 94       	cli
    4c2a:	de bf       	out	0x3e, r29	; 62
    4c2c:	0f be       	out	0x3f, r0	; 63
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	81 11       	cpse	r24, r1
    4c32:	43 c0       	rjmp	.+134    	; 0x4cba <lora_driver_configureToEu868+0x18a>
    4c34:	2f 92       	push	r2
    4c36:	3f 92       	push	r3
    4c38:	9f 92       	push	r9
    4c3a:	8f 92       	push	r8
    4c3c:	1f 93       	push	r17
    4c3e:	0f 93       	push	r16
    4c40:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <sprintf>
    4c44:	60 e0       	ldi	r22, 0x00	; 0
    4c46:	70 e0       	ldi	r23, 0x00	; 0
    4c48:	c8 01       	movw	r24, r16
    4c4a:	98 dd       	rcall	.-1232   	; 0x477c <_uploadMessage>
    4c4c:	f1 dd       	rcall	.-1054   	; 0x4830 <_reply2ReturnCode>
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
    4c56:	0f 90       	pop	r0
    4c58:	0f 90       	pop	r0
    4c5a:	81 11       	cpse	r24, r1
    4c5c:	2e c0       	rjmp	.+92     	; 0x4cba <lora_driver_configureToEu868+0x18a>
    4c5e:	2f 92       	push	r2
    4c60:	3f 92       	push	r3
    4c62:	7f 92       	push	r7
    4c64:	6f 92       	push	r6
    4c66:	1f 93       	push	r17
    4c68:	0f 93       	push	r16
    4c6a:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <sprintf>
    4c6e:	60 e0       	ldi	r22, 0x00	; 0
    4c70:	70 e0       	ldi	r23, 0x00	; 0
    4c72:	c8 01       	movw	r24, r16
    4c74:	83 dd       	rcall	.-1274   	; 0x477c <_uploadMessage>
    4c76:	dc dd       	rcall	.-1096   	; 0x4830 <_reply2ReturnCode>
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	81 11       	cpse	r24, r1
    4c86:	19 c0       	rjmp	.+50     	; 0x4cba <lora_driver_configureToEu868+0x18a>
    4c88:	3f ef       	ldi	r19, 0xFF	; 255
    4c8a:	e3 1a       	sub	r14, r19
    4c8c:	f3 0a       	sbc	r15, r19
    4c8e:	84 e0       	ldi	r24, 0x04	; 4
    4c90:	c8 0e       	add	r12, r24
    4c92:	d1 1c       	adc	r13, r1
    4c94:	98 e0       	ldi	r25, 0x08	; 8
    4c96:	e9 16       	cp	r14, r25
    4c98:	f1 04       	cpc	r15, r1
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <lora_driver_configureToEu868+0x16e>
    4c9c:	94 cf       	rjmp	.-216    	; 0x4bc6 <lora_driver_configureToEu868+0x96>
    4c9e:	60 e0       	ldi	r22, 0x00	; 0
    4ca0:	70 e0       	ldi	r23, 0x00	; 0
    4ca2:	8b e8       	ldi	r24, 0x8B	; 139
    4ca4:	96 e0       	ldi	r25, 0x06	; 6
    4ca6:	6a dd       	rcall	.-1324   	; 0x477c <_uploadMessage>
    4ca8:	c3 dd       	rcall	.-1146   	; 0x4830 <_reply2ReturnCode>
    4caa:	81 11       	cpse	r24, r1
    4cac:	06 c0       	rjmp	.+12     	; 0x4cba <lora_driver_configureToEu868+0x18a>
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	70 e0       	ldi	r23, 0x00	; 0
    4cb2:	8c e9       	ldi	r24, 0x9C	; 156
    4cb4:	96 e0       	ldi	r25, 0x06	; 6
    4cb6:	62 dd       	rcall	.-1340   	; 0x477c <_uploadMessage>
    4cb8:	bb dd       	rcall	.-1162   	; 0x4830 <_reply2ReturnCode>
    4cba:	a0 96       	adiw	r28, 0x20	; 32
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	1f 91       	pop	r17
    4ccc:	0f 91       	pop	r16
    4cce:	ff 90       	pop	r15
    4cd0:	ef 90       	pop	r14
    4cd2:	df 90       	pop	r13
    4cd4:	cf 90       	pop	r12
    4cd6:	bf 90       	pop	r11
    4cd8:	af 90       	pop	r10
    4cda:	9f 90       	pop	r9
    4cdc:	8f 90       	pop	r8
    4cde:	7f 90       	pop	r7
    4ce0:	6f 90       	pop	r6
    4ce2:	5f 90       	pop	r5
    4ce4:	4f 90       	pop	r4
    4ce6:	3f 90       	pop	r3
    4ce8:	2f 90       	pop	r2
    4cea:	08 95       	ret

00004cec <lora_driver_setOtaaIdentity>:
    4cec:	ef 92       	push	r14
    4cee:	ff 92       	push	r15
    4cf0:	0f 93       	push	r16
    4cf2:	1f 93       	push	r17
    4cf4:	cf 93       	push	r28
    4cf6:	df 93       	push	r29
    4cf8:	ec 01       	movw	r28, r24
    4cfa:	8b 01       	movw	r16, r22
    4cfc:	7a 01       	movw	r14, r20
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	f4 de       	rcall	.-536    	; 0x4aea <lora_driver_setAdaptiveDataRate>
    4d02:	81 11       	cpse	r24, r1
    4d04:	0d c0       	rjmp	.+26     	; 0x4d20 <lora_driver_setOtaaIdentity+0x34>
    4d06:	ce 01       	movw	r24, r28
    4d08:	9f de       	rcall	.-706    	; 0x4a48 <lora_driver_setApplicationIdentifier>
    4d0a:	81 11       	cpse	r24, r1
    4d0c:	09 c0       	rjmp	.+18     	; 0x4d20 <lora_driver_setOtaaIdentity+0x34>
    4d0e:	c8 01       	movw	r24, r16
    4d10:	ac de       	rcall	.-680    	; 0x4a6a <lora_driver_setApplicationKey>
    4d12:	81 11       	cpse	r24, r1
    4d14:	05 c0       	rjmp	.+10     	; 0x4d20 <lora_driver_setOtaaIdentity+0x34>
    4d16:	c7 01       	movw	r24, r14
    4d18:	86 de       	rcall	.-756    	; 0x4a26 <lora_driver_setDeviceIdentifier>
    4d1a:	81 11       	cpse	r24, r1
    4d1c:	01 c0       	rjmp	.+2      	; 0x4d20 <lora_driver_setOtaaIdentity+0x34>
    4d1e:	b6 de       	rcall	.-660    	; 0x4a8c <lora_driver_saveMac>
    4d20:	df 91       	pop	r29
    4d22:	cf 91       	pop	r28
    4d24:	1f 91       	pop	r17
    4d26:	0f 91       	pop	r16
    4d28:	ff 90       	pop	r15
    4d2a:	ef 90       	pop	r14
    4d2c:	08 95       	ret

00004d2e <lora_driver_mapReturnCodeToText>:
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	fc 01       	movw	r30, r24
    4d32:	ee 0f       	add	r30, r30
    4d34:	ff 1f       	adc	r31, r31
    4d36:	8e 0f       	add	r24, r30
    4d38:	9f 1f       	adc	r25, r31
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	eb 59       	subi	r30, 0x9B	; 155
    4d3e:	f8 4f       	sbci	r31, 0xF8	; 248
    4d40:	81 81       	ldd	r24, Z+1	; 0x01
    4d42:	92 81       	ldd	r25, Z+2	; 0x02
    4d44:	08 95       	ret

00004d46 <_serialCallBack>:
    4d46:	80 91 34 15 	lds	r24, 0x1534	; 0x801534 <crc_sum.1945>
    4d4a:	86 0f       	add	r24, r22
    4d4c:	80 93 34 15 	sts	0x1534, r24	; 0x801534 <crc_sum.1945>
    4d50:	90 91 37 15 	lds	r25, 0x1537	; 0x801537 <_mh_state>
    4d54:	91 30       	cpi	r25, 0x01	; 1
    4d56:	79 f0       	breq	.+30     	; 0x4d76 <_serialCallBack+0x30>
    4d58:	28 f0       	brcs	.+10     	; 0x4d64 <_serialCallBack+0x1e>
    4d5a:	92 30       	cpi	r25, 0x02	; 2
    4d5c:	a9 f0       	breq	.+42     	; 0x4d88 <_serialCallBack+0x42>
    4d5e:	93 30       	cpi	r25, 0x03	; 3
    4d60:	19 f1       	breq	.+70     	; 0x4da8 <_serialCallBack+0x62>
    4d62:	08 95       	ret
    4d64:	6f 3f       	cpi	r22, 0xFF	; 255
    4d66:	09 f0       	breq	.+2      	; 0x4d6a <_serialCallBack+0x24>
    4d68:	48 c0       	rjmp	.+144    	; 0x4dfa <_serialCallBack+0xb4>
    4d6a:	10 92 34 15 	sts	0x1534, r1	; 0x801534 <crc_sum.1945>
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
    4d70:	80 93 37 15 	sts	0x1537, r24	; 0x801537 <_mh_state>
    4d74:	08 95       	ret
    4d76:	66 38       	cpi	r22, 0x86	; 134
    4d78:	09 f0       	breq	.+2      	; 0x4d7c <_serialCallBack+0x36>
    4d7a:	3f c0       	rjmp	.+126    	; 0x4dfa <_serialCallBack+0xb4>
    4d7c:	10 92 33 15 	sts	0x1533, r1	; 0x801533 <inDex.1943>
    4d80:	82 e0       	ldi	r24, 0x02	; 2
    4d82:	80 93 37 15 	sts	0x1537, r24	; 0x801537 <_mh_state>
    4d86:	08 95       	ret
    4d88:	e0 91 33 15 	lds	r30, 0x1533	; 0x801533 <inDex.1943>
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	8e 0f       	add	r24, r30
    4d90:	80 93 33 15 	sts	0x1533, r24	; 0x801533 <inDex.1943>
    4d94:	f0 e0       	ldi	r31, 0x00	; 0
    4d96:	ef 5c       	subi	r30, 0xCF	; 207
    4d98:	fa 4e       	sbci	r31, 0xEA	; 234
    4d9a:	60 83       	st	Z, r22
    4d9c:	82 30       	cpi	r24, 0x02	; 2
    4d9e:	69 f5       	brne	.+90     	; 0x4dfa <_serialCallBack+0xb4>
    4da0:	83 e0       	ldi	r24, 0x03	; 3
    4da2:	80 93 37 15 	sts	0x1537, r24	; 0x801537 <_mh_state>
    4da6:	08 95       	ret
    4da8:	90 91 33 15 	lds	r25, 0x1533	; 0x801533 <inDex.1943>
    4dac:	21 e0       	ldi	r18, 0x01	; 1
    4dae:	29 0f       	add	r18, r25
    4db0:	20 93 33 15 	sts	0x1533, r18	; 0x801533 <inDex.1943>
    4db4:	96 30       	cpi	r25, 0x06	; 6
    4db6:	09 f5       	brne	.+66     	; 0x4dfa <_serialCallBack+0xb4>
    4db8:	81 11       	cpse	r24, r1
    4dba:	0e c0       	rjmp	.+28     	; 0x4dd8 <_serialCallBack+0x92>
    4dbc:	e1 e3       	ldi	r30, 0x31	; 49
    4dbe:	f5 e1       	ldi	r31, 0x15	; 21
    4dc0:	80 81       	ld	r24, Z
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	98 2f       	mov	r25, r24
    4dc6:	88 27       	eor	r24, r24
    4dc8:	21 81       	ldd	r18, Z+1	; 0x01
    4dca:	82 0f       	add	r24, r18
    4dcc:	91 1d       	adc	r25, r1
    4dce:	90 93 39 15 	sts	0x1539, r25	; 0x801539 <_ppm+0x1>
    4dd2:	80 93 38 15 	sts	0x1538, r24	; 0x801538 <_ppm>
    4dd6:	04 c0       	rjmp	.+8      	; 0x4de0 <_serialCallBack+0x9a>
    4dd8:	10 92 39 15 	sts	0x1539, r1	; 0x801539 <_ppm+0x1>
    4ddc:	10 92 38 15 	sts	0x1538, r1	; 0x801538 <_ppm>
    4de0:	10 92 37 15 	sts	0x1537, r1	; 0x801537 <_mh_state>
    4de4:	e0 91 35 15 	lds	r30, 0x1535	; 0x801535 <_appCallBack>
    4de8:	f0 91 36 15 	lds	r31, 0x1536	; 0x801536 <_appCallBack+0x1>
    4dec:	30 97       	sbiw	r30, 0x00	; 0
    4dee:	29 f0       	breq	.+10     	; 0x4dfa <_serialCallBack+0xb4>
    4df0:	80 91 38 15 	lds	r24, 0x1538	; 0x801538 <_ppm>
    4df4:	90 91 39 15 	lds	r25, 0x1539	; 0x801539 <_ppm+0x1>
    4df8:	19 95       	eicall
    4dfa:	08 95       	ret

00004dfc <mh_z19_initialise>:
    4dfc:	8f 92       	push	r8
    4dfe:	9f 92       	push	r9
    4e00:	af 92       	push	r10
    4e02:	cf 92       	push	r12
    4e04:	ef 92       	push	r14
    4e06:	0f 93       	push	r16
    4e08:	0f 2e       	mov	r0, r31
    4e0a:	f3 ea       	ldi	r31, 0xA3	; 163
    4e0c:	8f 2e       	mov	r8, r31
    4e0e:	f6 e2       	ldi	r31, 0x26	; 38
    4e10:	9f 2e       	mov	r9, r31
    4e12:	f0 2d       	mov	r31, r0
    4e14:	68 94       	set
    4e16:	aa 24       	eor	r10, r10
    4e18:	a4 f8       	bld	r10, 4
    4e1a:	68 94       	set
    4e1c:	cc 24       	eor	r12, r12
    4e1e:	c4 f8       	bld	r12, 4
    4e20:	e1 2c       	mov	r14, r1
    4e22:	00 e0       	ldi	r16, 0x00	; 0
    4e24:	23 e0       	ldi	r18, 0x03	; 3
    4e26:	40 e8       	ldi	r20, 0x80	; 128
    4e28:	55 e2       	ldi	r21, 0x25	; 37
    4e2a:	60 e0       	ldi	r22, 0x00	; 0
    4e2c:	70 e0       	ldi	r23, 0x00	; 0
    4e2e:	73 d0       	rcall	.+230    	; 0x4f16 <serial_create>
    4e30:	90 93 3b 15 	sts	0x153B, r25	; 0x80153b <_serial+0x1>
    4e34:	80 93 3a 15 	sts	0x153A, r24	; 0x80153a <_serial>
    4e38:	0f 91       	pop	r16
    4e3a:	ef 90       	pop	r14
    4e3c:	cf 90       	pop	r12
    4e3e:	af 90       	pop	r10
    4e40:	9f 90       	pop	r9
    4e42:	8f 90       	pop	r8
    4e44:	08 95       	ret

00004e46 <mh_z19_injectCallBack>:
    4e46:	90 93 36 15 	sts	0x1536, r25	; 0x801536 <_appCallBack+0x1>
    4e4a:	80 93 35 15 	sts	0x1535, r24	; 0x801535 <_appCallBack>
    4e4e:	08 95       	ret

00004e50 <mh_z19_takeMeassuring>:
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
    4e54:	cd b7       	in	r28, 0x3d	; 61
    4e56:	de b7       	in	r29, 0x3e	; 62
    4e58:	29 97       	sbiw	r28, 0x09	; 9
    4e5a:	0f b6       	in	r0, 0x3f	; 63
    4e5c:	f8 94       	cli
    4e5e:	de bf       	out	0x3e, r29	; 62
    4e60:	0f be       	out	0x3f, r0	; 63
    4e62:	cd bf       	out	0x3d, r28	; 61
    4e64:	89 e0       	ldi	r24, 0x09	; 9
    4e66:	e2 e4       	ldi	r30, 0x42	; 66
    4e68:	f2 e0       	ldi	r31, 0x02	; 2
    4e6a:	9e 01       	movw	r18, r28
    4e6c:	2f 5f       	subi	r18, 0xFF	; 255
    4e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e70:	d9 01       	movw	r26, r18
    4e72:	01 90       	ld	r0, Z+
    4e74:	0d 92       	st	X+, r0
    4e76:	8a 95       	dec	r24
    4e78:	e1 f7       	brne	.-8      	; 0x4e72 <mh_z19_takeMeassuring+0x22>
    4e7a:	10 92 39 15 	sts	0x1539, r1	; 0x801539 <_ppm+0x1>
    4e7e:	10 92 38 15 	sts	0x1538, r1	; 0x801538 <_ppm>
    4e82:	80 91 3a 15 	lds	r24, 0x153A	; 0x80153a <_serial>
    4e86:	90 91 3b 15 	lds	r25, 0x153B	; 0x80153b <_serial+0x1>
    4e8a:	00 97       	sbiw	r24, 0x00	; 0
    4e8c:	31 f0       	breq	.+12     	; 0x4e9a <mh_z19_takeMeassuring+0x4a>
    4e8e:	42 2f       	mov	r20, r18
    4e90:	53 2f       	mov	r21, r19
    4e92:	69 e0       	ldi	r22, 0x09	; 9
    4e94:	0f d1       	rcall	.+542    	; 0x50b4 <serial_sendBytes>
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	01 c0       	rjmp	.+2      	; 0x4e9c <mh_z19_takeMeassuring+0x4c>
    4e9a:	82 e0       	ldi	r24, 0x02	; 2
    4e9c:	29 96       	adiw	r28, 0x09	; 9
    4e9e:	0f b6       	in	r0, 0x3f	; 63
    4ea0:	f8 94       	cli
    4ea2:	de bf       	out	0x3e, r29	; 62
    4ea4:	0f be       	out	0x3f, r0	; 63
    4ea6:	cd bf       	out	0x3d, r28	; 61
    4ea8:	df 91       	pop	r29
    4eaa:	cf 91       	pop	r28
    4eac:	08 95       	ret

00004eae <rc_servo_setPosition>:
    4eae:	65 36       	cpi	r22, 0x65	; 101
    4eb0:	0c f0       	brlt	.+2      	; 0x4eb4 <rc_servo_setPosition+0x6>
    4eb2:	64 e6       	ldi	r22, 0x64	; 100
    4eb4:	6c 39       	cpi	r22, 0x9C	; 156
    4eb6:	0c f4       	brge	.+2      	; 0x4eba <rc_servo_setPosition+0xc>
    4eb8:	6c e9       	ldi	r22, 0x9C	; 156
    4eba:	96 ef       	ldi	r25, 0xF6	; 246
    4ebc:	69 02       	muls	r22, r25
    4ebe:	b0 01       	movw	r22, r0
    4ec0:	11 24       	eor	r1, r1
    4ec2:	68 54       	subi	r22, 0x48	; 72
    4ec4:	74 4f       	sbci	r23, 0xF4	; 244
    4ec6:	81 11       	cpse	r24, r1
    4ec8:	05 c0       	rjmp	.+10     	; 0x4ed4 <rc_servo_setPosition+0x26>
    4eca:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4ece:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4ed2:	08 95       	ret
    4ed4:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4ed8:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4edc:	08 95       	ret

00004ede <rc_servo_initialise>:
    4ede:	ea e0       	ldi	r30, 0x0A	; 10
    4ee0:	f1 e0       	ldi	r31, 0x01	; 1
    4ee2:	80 81       	ld	r24, Z
    4ee4:	88 61       	ori	r24, 0x18	; 24
    4ee6:	80 83       	st	Z, r24
    4ee8:	8f e3       	ldi	r24, 0x3F	; 63
    4eea:	9c e9       	ldi	r25, 0x9C	; 156
    4eec:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4ef0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4ef4:	60 e0       	ldi	r22, 0x00	; 0
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	da df       	rcall	.-76     	; 0x4eae <rc_servo_setPosition>
    4efa:	60 e0       	ldi	r22, 0x00	; 0
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	d7 df       	rcall	.-82     	; 0x4eae <rc_servo_setPosition>
    4f00:	e0 e2       	ldi	r30, 0x20	; 32
    4f02:	f1 e0       	ldi	r31, 0x01	; 1
    4f04:	80 81       	ld	r24, Z
    4f06:	82 6a       	ori	r24, 0xA2	; 162
    4f08:	80 83       	st	Z, r24
    4f0a:	e1 e2       	ldi	r30, 0x21	; 33
    4f0c:	f1 e0       	ldi	r31, 0x01	; 1
    4f0e:	80 81       	ld	r24, Z
    4f10:	8a 61       	ori	r24, 0x1A	; 26
    4f12:	80 83       	st	Z, r24
    4f14:	08 95       	ret

00004f16 <serial_create>:
    4f16:	2f 92       	push	r2
    4f18:	3f 92       	push	r3
    4f1a:	4f 92       	push	r4
    4f1c:	5f 92       	push	r5
    4f1e:	6f 92       	push	r6
    4f20:	7f 92       	push	r7
    4f22:	8f 92       	push	r8
    4f24:	9f 92       	push	r9
    4f26:	af 92       	push	r10
    4f28:	cf 92       	push	r12
    4f2a:	ef 92       	push	r14
    4f2c:	ff 92       	push	r15
    4f2e:	0f 93       	push	r16
    4f30:	1f 93       	push	r17
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
    4f36:	cd b7       	in	r28, 0x3d	; 61
    4f38:	de b7       	in	r29, 0x3e	; 62
    4f3a:	f8 2e       	mov	r15, r24
    4f3c:	2a 01       	movw	r4, r20
    4f3e:	3b 01       	movw	r6, r22
    4f40:	88 e0       	ldi	r24, 0x08	; 8
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	0e 94 9f 33 	call	0x673e	; 0x673e <malloc>
    4f48:	8c 01       	movw	r16, r24
    4f4a:	8f 2d       	mov	r24, r15
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	fc 01       	movw	r30, r24
    4f50:	ee 0f       	add	r30, r30
    4f52:	ff 1f       	adc	r31, r31
    4f54:	e4 5c       	subi	r30, 0xC4	; 196
    4f56:	fa 4e       	sbci	r31, 0xEA	; 234
    4f58:	11 83       	std	Z+1, r17	; 0x01
    4f5a:	00 83       	st	Z, r16
    4f5c:	01 15       	cp	r16, r1
    4f5e:	11 05       	cpc	r17, r1
    4f60:	09 f4       	brne	.+2      	; 0x4f64 <serial_create+0x4e>
    4f62:	6b c0       	rjmp	.+214    	; 0x503a <serial_create+0x124>
    4f64:	88 0f       	add	r24, r24
    4f66:	99 1f       	adc	r25, r25
    4f68:	fc 01       	movw	r30, r24
    4f6a:	e5 5f       	subi	r30, 0xF5	; 245
    4f6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f6e:	80 81       	ld	r24, Z
    4f70:	91 81       	ldd	r25, Z+1	; 0x01
    4f72:	d8 01       	movw	r26, r16
    4f74:	8d 93       	st	X+, r24
    4f76:	9c 93       	st	X, r25
    4f78:	8c 2d       	mov	r24, r12
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	88 0f       	add	r24, r24
    4f7e:	99 1f       	adc	r25, r25
    4f80:	88 0f       	add	r24, r24
    4f82:	99 1f       	adc	r25, r25
    4f84:	0e 94 9f 33 	call	0x673e	; 0x673e <malloc>
    4f88:	1c 01       	movw	r2, r24
    4f8a:	86 e0       	ldi	r24, 0x06	; 6
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	0e 94 9f 33 	call	0x673e	; 0x673e <malloc>
    4f92:	7c 01       	movw	r14, r24
    4f94:	4c 2d       	mov	r20, r12
    4f96:	b1 01       	movw	r22, r2
    4f98:	bb d6       	rcall	.+3446   	; 0x5d10 <fifo_init>
    4f9a:	f8 01       	movw	r30, r16
    4f9c:	f5 82       	std	Z+5, r15	; 0x05
    4f9e:	e4 82       	std	Z+4, r14	; 0x04
    4fa0:	8a 2d       	mov	r24, r10
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	88 0f       	add	r24, r24
    4fa6:	99 1f       	adc	r25, r25
    4fa8:	88 0f       	add	r24, r24
    4faa:	99 1f       	adc	r25, r25
    4fac:	0e 94 9f 33 	call	0x673e	; 0x673e <malloc>
    4fb0:	1c 01       	movw	r2, r24
    4fb2:	86 e0       	ldi	r24, 0x06	; 6
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	0e 94 9f 33 	call	0x673e	; 0x673e <malloc>
    4fba:	7c 01       	movw	r14, r24
    4fbc:	4a 2d       	mov	r20, r10
    4fbe:	b1 01       	movw	r22, r2
    4fc0:	a7 d6       	rcall	.+3406   	; 0x5d10 <fifo_init>
    4fc2:	d8 01       	movw	r26, r16
    4fc4:	13 96       	adiw	r26, 0x03	; 3
    4fc6:	fc 92       	st	X, r15
    4fc8:	ee 92       	st	-X, r14
    4fca:	12 97       	sbiw	r26, 0x02	; 2
    4fcc:	17 96       	adiw	r26, 0x07	; 7
    4fce:	9c 92       	st	X, r9
    4fd0:	8e 92       	st	-X, r8
    4fd2:	16 97       	sbiw	r26, 0x06	; 6
    4fd4:	ff b6       	in	r15, 0x3f	; 63
    4fd6:	f8 94       	cli
    4fd8:	ed 91       	ld	r30, X+
    4fda:	fc 91       	ld	r31, X
    4fdc:	11 97       	sbiw	r26, 0x01	; 1
    4fde:	36 97       	sbiw	r30, 0x06	; 6
    4fe0:	80 81       	ld	r24, Z
    4fe2:	82 60       	ori	r24, 0x02	; 2
    4fe4:	80 83       	st	Z, r24
    4fe6:	8d 90       	ld	r8, X+
    4fe8:	9c 90       	ld	r9, X
    4fea:	c3 01       	movw	r24, r6
    4fec:	b2 01       	movw	r22, r4
    4fee:	0e 94 9e 32 	call	0x653c	; 0x653c <__floatunsisf>
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	40 e0       	ldi	r20, 0x00	; 0
    4ff8:	51 e4       	ldi	r21, 0x41	; 65
    4ffa:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    4ffe:	9b 01       	movw	r18, r22
    5000:	ac 01       	movw	r20, r24
    5002:	60 e0       	ldi	r22, 0x00	; 0
    5004:	74 e2       	ldi	r23, 0x24	; 36
    5006:	84 e7       	ldi	r24, 0x74	; 116
    5008:	9b e4       	ldi	r25, 0x4B	; 75
    500a:	0e 94 2d 32 	call	0x645a	; 0x645a <__divsf3>
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	40 e8       	ldi	r20, 0x80	; 128
    5014:	5f e3       	ldi	r21, 0x3F	; 63
    5016:	3b da       	rcall	.-2954   	; 0x448e <__subsf3>
    5018:	8e d9       	rcall	.-3300   	; 0x4336 <__fixunssfsi>
    501a:	f4 01       	movw	r30, r8
    501c:	32 97       	sbiw	r30, 0x02	; 2
    501e:	60 83       	st	Z, r22
    5020:	d8 01       	movw	r26, r16
    5022:	ed 91       	ld	r30, X+
    5024:	fc 91       	ld	r31, X
    5026:	11 97       	sbiw	r26, 0x01	; 1
    5028:	35 97       	sbiw	r30, 0x05	; 5
    502a:	88 e9       	ldi	r24, 0x98	; 152
    502c:	80 83       	st	Z, r24
    502e:	ed 91       	ld	r30, X+
    5030:	fc 91       	ld	r31, X
    5032:	34 97       	sbiw	r30, 0x04	; 4
    5034:	86 e0       	ldi	r24, 0x06	; 6
    5036:	80 83       	st	Z, r24
    5038:	ff be       	out	0x3f, r15	; 63
    503a:	c8 01       	movw	r24, r16
    503c:	df 91       	pop	r29
    503e:	cf 91       	pop	r28
    5040:	1f 91       	pop	r17
    5042:	0f 91       	pop	r16
    5044:	ff 90       	pop	r15
    5046:	ef 90       	pop	r14
    5048:	cf 90       	pop	r12
    504a:	af 90       	pop	r10
    504c:	9f 90       	pop	r9
    504e:	8f 90       	pop	r8
    5050:	7f 90       	pop	r7
    5052:	6f 90       	pop	r6
    5054:	5f 90       	pop	r5
    5056:	4f 90       	pop	r4
    5058:	3f 90       	pop	r3
    505a:	2f 90       	pop	r2
    505c:	08 95       	ret

0000505e <serial_sendByte>:
    505e:	cf 93       	push	r28
    5060:	df 93       	push	r29
    5062:	dc 01       	movw	r26, r24
    5064:	89 2b       	or	r24, r25
    5066:	01 f1       	breq	.+64     	; 0x50a8 <serial_sendByte+0x4a>
    5068:	12 96       	adiw	r26, 0x02	; 2
    506a:	ed 91       	ld	r30, X+
    506c:	fc 91       	ld	r31, X
    506e:	13 97       	sbiw	r26, 0x03	; 3
    5070:	93 81       	ldd	r25, Z+3	; 0x03
    5072:	82 81       	ldd	r24, Z+2	; 0x02
    5074:	25 81       	ldd	r18, Z+5	; 0x05
    5076:	98 1b       	sub	r25, r24
    5078:	92 23       	and	r25, r18
    507a:	84 81       	ldd	r24, Z+4	; 0x04
    507c:	98 17       	cp	r25, r24
    507e:	b1 f0       	breq	.+44     	; 0x50ac <serial_sendByte+0x4e>
    5080:	83 81       	ldd	r24, Z+3	; 0x03
    5082:	26 95       	lsr	r18
    5084:	28 23       	and	r18, r24
    5086:	c0 81       	ld	r28, Z
    5088:	d1 81       	ldd	r29, Z+1	; 0x01
    508a:	c2 0f       	add	r28, r18
    508c:	d1 1d       	adc	r29, r1
    508e:	68 83       	st	Y, r22
    5090:	8f 5f       	subi	r24, 0xFF	; 255
    5092:	95 81       	ldd	r25, Z+5	; 0x05
    5094:	89 23       	and	r24, r25
    5096:	83 83       	std	Z+3, r24	; 0x03
    5098:	ed 91       	ld	r30, X+
    509a:	fc 91       	ld	r31, X
    509c:	35 97       	sbiw	r30, 0x05	; 5
    509e:	80 81       	ld	r24, Z
    50a0:	80 62       	ori	r24, 0x20	; 32
    50a2:	80 83       	st	Z, r24
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	03 c0       	rjmp	.+6      	; 0x50ae <serial_sendByte+0x50>
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	01 c0       	rjmp	.+2      	; 0x50ae <serial_sendByte+0x50>
    50ac:	82 e0       	ldi	r24, 0x02	; 2
    50ae:	df 91       	pop	r29
    50b0:	cf 91       	pop	r28
    50b2:	08 95       	ret

000050b4 <serial_sendBytes>:
    50b4:	ef 92       	push	r14
    50b6:	ff 92       	push	r15
    50b8:	0f 93       	push	r16
    50ba:	1f 93       	push	r17
    50bc:	cf 93       	push	r28
    50be:	df 93       	push	r29
    50c0:	7c 01       	movw	r14, r24
    50c2:	00 97       	sbiw	r24, 0x00	; 0
    50c4:	09 f4       	brne	.+2      	; 0x50c8 <serial_sendBytes+0x14>
    50c6:	41 c0       	rjmp	.+130    	; 0x514a <serial_sendBytes+0x96>
    50c8:	dc 01       	movw	r26, r24
    50ca:	12 96       	adiw	r26, 0x02	; 2
    50cc:	ed 91       	ld	r30, X+
    50ce:	fc 91       	ld	r31, X
    50d0:	13 97       	sbiw	r26, 0x03	; 3
    50d2:	93 81       	ldd	r25, Z+3	; 0x03
    50d4:	82 81       	ldd	r24, Z+2	; 0x02
    50d6:	98 1b       	sub	r25, r24
    50d8:	85 81       	ldd	r24, Z+5	; 0x05
    50da:	98 23       	and	r25, r24
    50dc:	84 81       	ldd	r24, Z+4	; 0x04
    50de:	89 1b       	sub	r24, r25
    50e0:	86 17       	cp	r24, r22
    50e2:	a8 f1       	brcs	.+106    	; 0x514e <serial_sendBytes+0x9a>
    50e4:	66 23       	and	r22, r22
    50e6:	41 f1       	breq	.+80     	; 0x5138 <serial_sendBytes+0x84>
    50e8:	84 2f       	mov	r24, r20
    50ea:	95 2f       	mov	r25, r21
    50ec:	dc 01       	movw	r26, r24
    50ee:	61 50       	subi	r22, 0x01	; 1
    50f0:	46 2f       	mov	r20, r22
    50f2:	50 e0       	ldi	r21, 0x00	; 0
    50f4:	4f 5f       	subi	r20, 0xFF	; 255
    50f6:	5f 4f       	sbci	r21, 0xFF	; 255
    50f8:	48 0f       	add	r20, r24
    50fa:	59 1f       	adc	r21, r25
    50fc:	e7 01       	movw	r28, r14
    50fe:	ea 81       	ldd	r30, Y+2	; 0x02
    5100:	fb 81       	ldd	r31, Y+3	; 0x03
    5102:	93 81       	ldd	r25, Z+3	; 0x03
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	25 81       	ldd	r18, Z+5	; 0x05
    5108:	98 1b       	sub	r25, r24
    510a:	92 23       	and	r25, r18
    510c:	84 81       	ldd	r24, Z+4	; 0x04
    510e:	98 17       	cp	r25, r24
    5110:	79 f0       	breq	.+30     	; 0x5130 <serial_sendBytes+0x7c>
    5112:	8c 91       	ld	r24, X
    5114:	93 81       	ldd	r25, Z+3	; 0x03
    5116:	26 95       	lsr	r18
    5118:	29 23       	and	r18, r25
    511a:	60 81       	ld	r22, Z
    511c:	71 81       	ldd	r23, Z+1	; 0x01
    511e:	8b 01       	movw	r16, r22
    5120:	02 0f       	add	r16, r18
    5122:	11 1d       	adc	r17, r1
    5124:	e8 01       	movw	r28, r16
    5126:	88 83       	st	Y, r24
    5128:	9f 5f       	subi	r25, 0xFF	; 255
    512a:	85 81       	ldd	r24, Z+5	; 0x05
    512c:	98 23       	and	r25, r24
    512e:	93 83       	std	Z+3, r25	; 0x03
    5130:	11 96       	adiw	r26, 0x01	; 1
    5132:	a4 17       	cp	r26, r20
    5134:	b5 07       	cpc	r27, r21
    5136:	11 f7       	brne	.-60     	; 0x50fc <serial_sendBytes+0x48>
    5138:	d7 01       	movw	r26, r14
    513a:	ed 91       	ld	r30, X+
    513c:	fc 91       	ld	r31, X
    513e:	35 97       	sbiw	r30, 0x05	; 5
    5140:	80 81       	ld	r24, Z
    5142:	80 62       	ori	r24, 0x20	; 32
    5144:	80 83       	st	Z, r24
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	03 c0       	rjmp	.+6      	; 0x5150 <serial_sendBytes+0x9c>
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	01 c0       	rjmp	.+2      	; 0x5150 <serial_sendBytes+0x9c>
    514e:	82 e0       	ldi	r24, 0x02	; 2
    5150:	df 91       	pop	r29
    5152:	cf 91       	pop	r28
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	ff 90       	pop	r15
    515a:	ef 90       	pop	r14
    515c:	08 95       	ret

0000515e <serial_getByte>:
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	d1 f0       	breq	.+52     	; 0x5196 <serial_getByte+0x38>
    5162:	dc 01       	movw	r26, r24
    5164:	14 96       	adiw	r26, 0x04	; 4
    5166:	ed 91       	ld	r30, X+
    5168:	fc 91       	ld	r31, X
    516a:	15 97       	sbiw	r26, 0x05	; 5
    516c:	93 81       	ldd	r25, Z+3	; 0x03
    516e:	82 81       	ldd	r24, Z+2	; 0x02
    5170:	98 17       	cp	r25, r24
    5172:	99 f0       	breq	.+38     	; 0x519a <serial_getByte+0x3c>
    5174:	92 81       	ldd	r25, Z+2	; 0x02
    5176:	85 81       	ldd	r24, Z+5	; 0x05
    5178:	86 95       	lsr	r24
    517a:	89 23       	and	r24, r25
    517c:	a0 81       	ld	r26, Z
    517e:	b1 81       	ldd	r27, Z+1	; 0x01
    5180:	a8 0f       	add	r26, r24
    5182:	b1 1d       	adc	r27, r1
    5184:	8c 91       	ld	r24, X
    5186:	db 01       	movw	r26, r22
    5188:	8c 93       	st	X, r24
    518a:	9f 5f       	subi	r25, 0xFF	; 255
    518c:	85 81       	ldd	r24, Z+5	; 0x05
    518e:	98 23       	and	r25, r24
    5190:	92 83       	std	Z+2, r25	; 0x02
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	08 95       	ret
    5196:	81 e0       	ldi	r24, 0x01	; 1
    5198:	08 95       	ret
    519a:	83 e0       	ldi	r24, 0x03	; 3
    519c:	08 95       	ret

0000519e <__vector_25>:
    519e:	1f 92       	push	r1
    51a0:	0f 92       	push	r0
    51a2:	0f b6       	in	r0, 0x3f	; 63
    51a4:	0f 92       	push	r0
    51a6:	11 24       	eor	r1, r1
    51a8:	0b b6       	in	r0, 0x3b	; 59
    51aa:	0f 92       	push	r0
    51ac:	2f 93       	push	r18
    51ae:	3f 93       	push	r19
    51b0:	4f 93       	push	r20
    51b2:	5f 93       	push	r21
    51b4:	6f 93       	push	r22
    51b6:	7f 93       	push	r23
    51b8:	8f 93       	push	r24
    51ba:	9f 93       	push	r25
    51bc:	af 93       	push	r26
    51be:	bf 93       	push	r27
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	ef 93       	push	r30
    51c6:	ff 93       	push	r31
    51c8:	a0 91 3c 15 	lds	r26, 0x153C	; 0x80153c <_ser_handle>
    51cc:	b0 91 3d 15 	lds	r27, 0x153D	; 0x80153d <_ser_handle+0x1>
    51d0:	10 97       	sbiw	r26, 0x00	; 0
    51d2:	11 f1       	breq	.+68     	; 0x5218 <__vector_25+0x7a>
    51d4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    51d8:	14 96       	adiw	r26, 0x04	; 4
    51da:	ed 91       	ld	r30, X+
    51dc:	fc 91       	ld	r31, X
    51de:	15 97       	sbiw	r26, 0x05	; 5
    51e0:	93 81       	ldd	r25, Z+3	; 0x03
    51e2:	82 81       	ldd	r24, Z+2	; 0x02
    51e4:	25 81       	ldd	r18, Z+5	; 0x05
    51e6:	98 1b       	sub	r25, r24
    51e8:	92 23       	and	r25, r18
    51ea:	84 81       	ldd	r24, Z+4	; 0x04
    51ec:	98 17       	cp	r25, r24
    51ee:	61 f0       	breq	.+24     	; 0x5208 <__vector_25+0x6a>
    51f0:	83 81       	ldd	r24, Z+3	; 0x03
    51f2:	26 95       	lsr	r18
    51f4:	28 23       	and	r18, r24
    51f6:	c0 81       	ld	r28, Z
    51f8:	d1 81       	ldd	r29, Z+1	; 0x01
    51fa:	c2 0f       	add	r28, r18
    51fc:	d1 1d       	adc	r29, r1
    51fe:	68 83       	st	Y, r22
    5200:	8f 5f       	subi	r24, 0xFF	; 255
    5202:	95 81       	ldd	r25, Z+5	; 0x05
    5204:	89 23       	and	r24, r25
    5206:	83 83       	std	Z+3, r24	; 0x03
    5208:	16 96       	adiw	r26, 0x06	; 6
    520a:	ed 91       	ld	r30, X+
    520c:	fc 91       	ld	r31, X
    520e:	17 97       	sbiw	r26, 0x07	; 7
    5210:	30 97       	sbiw	r30, 0x00	; 0
    5212:	11 f0       	breq	.+4      	; 0x5218 <__vector_25+0x7a>
    5214:	cd 01       	movw	r24, r26
    5216:	19 95       	eicall
    5218:	ff 91       	pop	r31
    521a:	ef 91       	pop	r30
    521c:	df 91       	pop	r29
    521e:	cf 91       	pop	r28
    5220:	bf 91       	pop	r27
    5222:	af 91       	pop	r26
    5224:	9f 91       	pop	r25
    5226:	8f 91       	pop	r24
    5228:	7f 91       	pop	r23
    522a:	6f 91       	pop	r22
    522c:	5f 91       	pop	r21
    522e:	4f 91       	pop	r20
    5230:	3f 91       	pop	r19
    5232:	2f 91       	pop	r18
    5234:	0f 90       	pop	r0
    5236:	0b be       	out	0x3b, r0	; 59
    5238:	0f 90       	pop	r0
    523a:	0f be       	out	0x3f, r0	; 63
    523c:	0f 90       	pop	r0
    523e:	1f 90       	pop	r1
    5240:	18 95       	reti

00005242 <__vector_26>:
    5242:	1f 92       	push	r1
    5244:	0f 92       	push	r0
    5246:	0f b6       	in	r0, 0x3f	; 63
    5248:	0f 92       	push	r0
    524a:	11 24       	eor	r1, r1
    524c:	0b b6       	in	r0, 0x3b	; 59
    524e:	0f 92       	push	r0
    5250:	2f 93       	push	r18
    5252:	8f 93       	push	r24
    5254:	9f 93       	push	r25
    5256:	af 93       	push	r26
    5258:	bf 93       	push	r27
    525a:	ef 93       	push	r30
    525c:	ff 93       	push	r31
    525e:	e0 91 3c 15 	lds	r30, 0x153C	; 0x80153c <_ser_handle>
    5262:	f0 91 3d 15 	lds	r31, 0x153D	; 0x80153d <_ser_handle+0x1>
    5266:	30 97       	sbiw	r30, 0x00	; 0
    5268:	b9 f0       	breq	.+46     	; 0x5298 <__vector_26+0x56>
    526a:	02 80       	ldd	r0, Z+2	; 0x02
    526c:	f3 81       	ldd	r31, Z+3	; 0x03
    526e:	e0 2d       	mov	r30, r0
    5270:	93 81       	ldd	r25, Z+3	; 0x03
    5272:	82 81       	ldd	r24, Z+2	; 0x02
    5274:	98 17       	cp	r25, r24
    5276:	b1 f0       	breq	.+44     	; 0x52a4 <__vector_26+0x62>
    5278:	92 81       	ldd	r25, Z+2	; 0x02
    527a:	85 81       	ldd	r24, Z+5	; 0x05
    527c:	28 2f       	mov	r18, r24
    527e:	26 95       	lsr	r18
    5280:	29 23       	and	r18, r25
    5282:	a0 81       	ld	r26, Z
    5284:	b1 81       	ldd	r27, Z+1	; 0x01
    5286:	a2 0f       	add	r26, r18
    5288:	b1 1d       	adc	r27, r1
    528a:	2c 91       	ld	r18, X
    528c:	9f 5f       	subi	r25, 0xFF	; 255
    528e:	89 23       	and	r24, r25
    5290:	82 83       	std	Z+2, r24	; 0x02
    5292:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5296:	0b c0       	rjmp	.+22     	; 0x52ae <__vector_26+0x6c>
    5298:	e1 ec       	ldi	r30, 0xC1	; 193
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	80 81       	ld	r24, Z
    529e:	8f 7d       	andi	r24, 0xDF	; 223
    52a0:	80 83       	st	Z, r24
    52a2:	05 c0       	rjmp	.+10     	; 0x52ae <__vector_26+0x6c>
    52a4:	e1 ec       	ldi	r30, 0xC1	; 193
    52a6:	f0 e0       	ldi	r31, 0x00	; 0
    52a8:	80 81       	ld	r24, Z
    52aa:	8f 7d       	andi	r24, 0xDF	; 223
    52ac:	80 83       	st	Z, r24
    52ae:	ff 91       	pop	r31
    52b0:	ef 91       	pop	r30
    52b2:	bf 91       	pop	r27
    52b4:	af 91       	pop	r26
    52b6:	9f 91       	pop	r25
    52b8:	8f 91       	pop	r24
    52ba:	2f 91       	pop	r18
    52bc:	0f 90       	pop	r0
    52be:	0b be       	out	0x3b, r0	; 59
    52c0:	0f 90       	pop	r0
    52c2:	0f be       	out	0x3f, r0	; 63
    52c4:	0f 90       	pop	r0
    52c6:	1f 90       	pop	r1
    52c8:	18 95       	reti

000052ca <__vector_36>:
    52ca:	1f 92       	push	r1
    52cc:	0f 92       	push	r0
    52ce:	0f b6       	in	r0, 0x3f	; 63
    52d0:	0f 92       	push	r0
    52d2:	11 24       	eor	r1, r1
    52d4:	0b b6       	in	r0, 0x3b	; 59
    52d6:	0f 92       	push	r0
    52d8:	2f 93       	push	r18
    52da:	3f 93       	push	r19
    52dc:	4f 93       	push	r20
    52de:	5f 93       	push	r21
    52e0:	6f 93       	push	r22
    52e2:	7f 93       	push	r23
    52e4:	8f 93       	push	r24
    52e6:	9f 93       	push	r25
    52e8:	af 93       	push	r26
    52ea:	bf 93       	push	r27
    52ec:	cf 93       	push	r28
    52ee:	df 93       	push	r29
    52f0:	ef 93       	push	r30
    52f2:	ff 93       	push	r31
    52f4:	a0 91 3e 15 	lds	r26, 0x153E	; 0x80153e <_ser_handle+0x2>
    52f8:	b0 91 3f 15 	lds	r27, 0x153F	; 0x80153f <_ser_handle+0x3>
    52fc:	10 97       	sbiw	r26, 0x00	; 0
    52fe:	11 f1       	breq	.+68     	; 0x5344 <__vector_36+0x7a>
    5300:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5304:	14 96       	adiw	r26, 0x04	; 4
    5306:	ed 91       	ld	r30, X+
    5308:	fc 91       	ld	r31, X
    530a:	15 97       	sbiw	r26, 0x05	; 5
    530c:	93 81       	ldd	r25, Z+3	; 0x03
    530e:	82 81       	ldd	r24, Z+2	; 0x02
    5310:	25 81       	ldd	r18, Z+5	; 0x05
    5312:	98 1b       	sub	r25, r24
    5314:	92 23       	and	r25, r18
    5316:	84 81       	ldd	r24, Z+4	; 0x04
    5318:	98 17       	cp	r25, r24
    531a:	61 f0       	breq	.+24     	; 0x5334 <__vector_36+0x6a>
    531c:	83 81       	ldd	r24, Z+3	; 0x03
    531e:	26 95       	lsr	r18
    5320:	28 23       	and	r18, r24
    5322:	c0 81       	ld	r28, Z
    5324:	d1 81       	ldd	r29, Z+1	; 0x01
    5326:	c2 0f       	add	r28, r18
    5328:	d1 1d       	adc	r29, r1
    532a:	68 83       	st	Y, r22
    532c:	8f 5f       	subi	r24, 0xFF	; 255
    532e:	95 81       	ldd	r25, Z+5	; 0x05
    5330:	89 23       	and	r24, r25
    5332:	83 83       	std	Z+3, r24	; 0x03
    5334:	16 96       	adiw	r26, 0x06	; 6
    5336:	ed 91       	ld	r30, X+
    5338:	fc 91       	ld	r31, X
    533a:	17 97       	sbiw	r26, 0x07	; 7
    533c:	30 97       	sbiw	r30, 0x00	; 0
    533e:	11 f0       	breq	.+4      	; 0x5344 <__vector_36+0x7a>
    5340:	cd 01       	movw	r24, r26
    5342:	19 95       	eicall
    5344:	ff 91       	pop	r31
    5346:	ef 91       	pop	r30
    5348:	df 91       	pop	r29
    534a:	cf 91       	pop	r28
    534c:	bf 91       	pop	r27
    534e:	af 91       	pop	r26
    5350:	9f 91       	pop	r25
    5352:	8f 91       	pop	r24
    5354:	7f 91       	pop	r23
    5356:	6f 91       	pop	r22
    5358:	5f 91       	pop	r21
    535a:	4f 91       	pop	r20
    535c:	3f 91       	pop	r19
    535e:	2f 91       	pop	r18
    5360:	0f 90       	pop	r0
    5362:	0b be       	out	0x3b, r0	; 59
    5364:	0f 90       	pop	r0
    5366:	0f be       	out	0x3f, r0	; 63
    5368:	0f 90       	pop	r0
    536a:	1f 90       	pop	r1
    536c:	18 95       	reti

0000536e <__vector_37>:
    536e:	1f 92       	push	r1
    5370:	0f 92       	push	r0
    5372:	0f b6       	in	r0, 0x3f	; 63
    5374:	0f 92       	push	r0
    5376:	11 24       	eor	r1, r1
    5378:	0b b6       	in	r0, 0x3b	; 59
    537a:	0f 92       	push	r0
    537c:	2f 93       	push	r18
    537e:	8f 93       	push	r24
    5380:	9f 93       	push	r25
    5382:	af 93       	push	r26
    5384:	bf 93       	push	r27
    5386:	ef 93       	push	r30
    5388:	ff 93       	push	r31
    538a:	e0 91 3e 15 	lds	r30, 0x153E	; 0x80153e <_ser_handle+0x2>
    538e:	f0 91 3f 15 	lds	r31, 0x153F	; 0x80153f <_ser_handle+0x3>
    5392:	30 97       	sbiw	r30, 0x00	; 0
    5394:	b9 f0       	breq	.+46     	; 0x53c4 <__vector_37+0x56>
    5396:	02 80       	ldd	r0, Z+2	; 0x02
    5398:	f3 81       	ldd	r31, Z+3	; 0x03
    539a:	e0 2d       	mov	r30, r0
    539c:	93 81       	ldd	r25, Z+3	; 0x03
    539e:	82 81       	ldd	r24, Z+2	; 0x02
    53a0:	98 17       	cp	r25, r24
    53a2:	b1 f0       	breq	.+44     	; 0x53d0 <__vector_37+0x62>
    53a4:	92 81       	ldd	r25, Z+2	; 0x02
    53a6:	85 81       	ldd	r24, Z+5	; 0x05
    53a8:	28 2f       	mov	r18, r24
    53aa:	26 95       	lsr	r18
    53ac:	29 23       	and	r18, r25
    53ae:	a0 81       	ld	r26, Z
    53b0:	b1 81       	ldd	r27, Z+1	; 0x01
    53b2:	a2 0f       	add	r26, r18
    53b4:	b1 1d       	adc	r27, r1
    53b6:	2c 91       	ld	r18, X
    53b8:	9f 5f       	subi	r25, 0xFF	; 255
    53ba:	89 23       	and	r24, r25
    53bc:	82 83       	std	Z+2, r24	; 0x02
    53be:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    53c2:	0b c0       	rjmp	.+22     	; 0x53da <__vector_37+0x6c>
    53c4:	e9 ec       	ldi	r30, 0xC9	; 201
    53c6:	f0 e0       	ldi	r31, 0x00	; 0
    53c8:	80 81       	ld	r24, Z
    53ca:	8f 7d       	andi	r24, 0xDF	; 223
    53cc:	80 83       	st	Z, r24
    53ce:	05 c0       	rjmp	.+10     	; 0x53da <__vector_37+0x6c>
    53d0:	e9 ec       	ldi	r30, 0xC9	; 201
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	80 81       	ld	r24, Z
    53d6:	8f 7d       	andi	r24, 0xDF	; 223
    53d8:	80 83       	st	Z, r24
    53da:	ff 91       	pop	r31
    53dc:	ef 91       	pop	r30
    53de:	bf 91       	pop	r27
    53e0:	af 91       	pop	r26
    53e2:	9f 91       	pop	r25
    53e4:	8f 91       	pop	r24
    53e6:	2f 91       	pop	r18
    53e8:	0f 90       	pop	r0
    53ea:	0b be       	out	0x3b, r0	; 59
    53ec:	0f 90       	pop	r0
    53ee:	0f be       	out	0x3f, r0	; 63
    53f0:	0f 90       	pop	r0
    53f2:	1f 90       	pop	r1
    53f4:	18 95       	reti

000053f6 <__vector_51>:
    53f6:	1f 92       	push	r1
    53f8:	0f 92       	push	r0
    53fa:	0f b6       	in	r0, 0x3f	; 63
    53fc:	0f 92       	push	r0
    53fe:	11 24       	eor	r1, r1
    5400:	0b b6       	in	r0, 0x3b	; 59
    5402:	0f 92       	push	r0
    5404:	2f 93       	push	r18
    5406:	3f 93       	push	r19
    5408:	4f 93       	push	r20
    540a:	5f 93       	push	r21
    540c:	6f 93       	push	r22
    540e:	7f 93       	push	r23
    5410:	8f 93       	push	r24
    5412:	9f 93       	push	r25
    5414:	af 93       	push	r26
    5416:	bf 93       	push	r27
    5418:	cf 93       	push	r28
    541a:	df 93       	push	r29
    541c:	ef 93       	push	r30
    541e:	ff 93       	push	r31
    5420:	a0 91 40 15 	lds	r26, 0x1540	; 0x801540 <_ser_handle+0x4>
    5424:	b0 91 41 15 	lds	r27, 0x1541	; 0x801541 <_ser_handle+0x5>
    5428:	10 97       	sbiw	r26, 0x00	; 0
    542a:	11 f1       	breq	.+68     	; 0x5470 <__vector_51+0x7a>
    542c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5430:	14 96       	adiw	r26, 0x04	; 4
    5432:	ed 91       	ld	r30, X+
    5434:	fc 91       	ld	r31, X
    5436:	15 97       	sbiw	r26, 0x05	; 5
    5438:	93 81       	ldd	r25, Z+3	; 0x03
    543a:	82 81       	ldd	r24, Z+2	; 0x02
    543c:	25 81       	ldd	r18, Z+5	; 0x05
    543e:	98 1b       	sub	r25, r24
    5440:	92 23       	and	r25, r18
    5442:	84 81       	ldd	r24, Z+4	; 0x04
    5444:	98 17       	cp	r25, r24
    5446:	61 f0       	breq	.+24     	; 0x5460 <__vector_51+0x6a>
    5448:	83 81       	ldd	r24, Z+3	; 0x03
    544a:	26 95       	lsr	r18
    544c:	28 23       	and	r18, r24
    544e:	c0 81       	ld	r28, Z
    5450:	d1 81       	ldd	r29, Z+1	; 0x01
    5452:	c2 0f       	add	r28, r18
    5454:	d1 1d       	adc	r29, r1
    5456:	68 83       	st	Y, r22
    5458:	8f 5f       	subi	r24, 0xFF	; 255
    545a:	95 81       	ldd	r25, Z+5	; 0x05
    545c:	89 23       	and	r24, r25
    545e:	83 83       	std	Z+3, r24	; 0x03
    5460:	16 96       	adiw	r26, 0x06	; 6
    5462:	ed 91       	ld	r30, X+
    5464:	fc 91       	ld	r31, X
    5466:	17 97       	sbiw	r26, 0x07	; 7
    5468:	30 97       	sbiw	r30, 0x00	; 0
    546a:	11 f0       	breq	.+4      	; 0x5470 <__vector_51+0x7a>
    546c:	cd 01       	movw	r24, r26
    546e:	19 95       	eicall
    5470:	ff 91       	pop	r31
    5472:	ef 91       	pop	r30
    5474:	df 91       	pop	r29
    5476:	cf 91       	pop	r28
    5478:	bf 91       	pop	r27
    547a:	af 91       	pop	r26
    547c:	9f 91       	pop	r25
    547e:	8f 91       	pop	r24
    5480:	7f 91       	pop	r23
    5482:	6f 91       	pop	r22
    5484:	5f 91       	pop	r21
    5486:	4f 91       	pop	r20
    5488:	3f 91       	pop	r19
    548a:	2f 91       	pop	r18
    548c:	0f 90       	pop	r0
    548e:	0b be       	out	0x3b, r0	; 59
    5490:	0f 90       	pop	r0
    5492:	0f be       	out	0x3f, r0	; 63
    5494:	0f 90       	pop	r0
    5496:	1f 90       	pop	r1
    5498:	18 95       	reti

0000549a <__vector_52>:
    549a:	1f 92       	push	r1
    549c:	0f 92       	push	r0
    549e:	0f b6       	in	r0, 0x3f	; 63
    54a0:	0f 92       	push	r0
    54a2:	11 24       	eor	r1, r1
    54a4:	0b b6       	in	r0, 0x3b	; 59
    54a6:	0f 92       	push	r0
    54a8:	2f 93       	push	r18
    54aa:	8f 93       	push	r24
    54ac:	9f 93       	push	r25
    54ae:	af 93       	push	r26
    54b0:	bf 93       	push	r27
    54b2:	ef 93       	push	r30
    54b4:	ff 93       	push	r31
    54b6:	e0 91 40 15 	lds	r30, 0x1540	; 0x801540 <_ser_handle+0x4>
    54ba:	f0 91 41 15 	lds	r31, 0x1541	; 0x801541 <_ser_handle+0x5>
    54be:	30 97       	sbiw	r30, 0x00	; 0
    54c0:	b9 f0       	breq	.+46     	; 0x54f0 <__vector_52+0x56>
    54c2:	02 80       	ldd	r0, Z+2	; 0x02
    54c4:	f3 81       	ldd	r31, Z+3	; 0x03
    54c6:	e0 2d       	mov	r30, r0
    54c8:	93 81       	ldd	r25, Z+3	; 0x03
    54ca:	82 81       	ldd	r24, Z+2	; 0x02
    54cc:	98 17       	cp	r25, r24
    54ce:	b1 f0       	breq	.+44     	; 0x54fc <__vector_52+0x62>
    54d0:	92 81       	ldd	r25, Z+2	; 0x02
    54d2:	85 81       	ldd	r24, Z+5	; 0x05
    54d4:	28 2f       	mov	r18, r24
    54d6:	26 95       	lsr	r18
    54d8:	29 23       	and	r18, r25
    54da:	a0 81       	ld	r26, Z
    54dc:	b1 81       	ldd	r27, Z+1	; 0x01
    54de:	a2 0f       	add	r26, r18
    54e0:	b1 1d       	adc	r27, r1
    54e2:	2c 91       	ld	r18, X
    54e4:	9f 5f       	subi	r25, 0xFF	; 255
    54e6:	89 23       	and	r24, r25
    54e8:	82 83       	std	Z+2, r24	; 0x02
    54ea:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    54ee:	0b c0       	rjmp	.+22     	; 0x5506 <__vector_52+0x6c>
    54f0:	e1 ed       	ldi	r30, 0xD1	; 209
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	80 81       	ld	r24, Z
    54f6:	8f 7d       	andi	r24, 0xDF	; 223
    54f8:	80 83       	st	Z, r24
    54fa:	05 c0       	rjmp	.+10     	; 0x5506 <__vector_52+0x6c>
    54fc:	e1 ed       	ldi	r30, 0xD1	; 209
    54fe:	f0 e0       	ldi	r31, 0x00	; 0
    5500:	80 81       	ld	r24, Z
    5502:	8f 7d       	andi	r24, 0xDF	; 223
    5504:	80 83       	st	Z, r24
    5506:	ff 91       	pop	r31
    5508:	ef 91       	pop	r30
    550a:	bf 91       	pop	r27
    550c:	af 91       	pop	r26
    550e:	9f 91       	pop	r25
    5510:	8f 91       	pop	r24
    5512:	2f 91       	pop	r18
    5514:	0f 90       	pop	r0
    5516:	0b be       	out	0x3b, r0	; 59
    5518:	0f 90       	pop	r0
    551a:	0f be       	out	0x3f, r0	; 63
    551c:	0f 90       	pop	r0
    551e:	1f 90       	pop	r1
    5520:	18 95       	reti

00005522 <__vector_54>:
    5522:	1f 92       	push	r1
    5524:	0f 92       	push	r0
    5526:	0f b6       	in	r0, 0x3f	; 63
    5528:	0f 92       	push	r0
    552a:	11 24       	eor	r1, r1
    552c:	0b b6       	in	r0, 0x3b	; 59
    552e:	0f 92       	push	r0
    5530:	2f 93       	push	r18
    5532:	3f 93       	push	r19
    5534:	4f 93       	push	r20
    5536:	5f 93       	push	r21
    5538:	6f 93       	push	r22
    553a:	7f 93       	push	r23
    553c:	8f 93       	push	r24
    553e:	9f 93       	push	r25
    5540:	af 93       	push	r26
    5542:	bf 93       	push	r27
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	ef 93       	push	r30
    554a:	ff 93       	push	r31
    554c:	a0 91 42 15 	lds	r26, 0x1542	; 0x801542 <_ser_handle+0x6>
    5550:	b0 91 43 15 	lds	r27, 0x1543	; 0x801543 <_ser_handle+0x7>
    5554:	10 97       	sbiw	r26, 0x00	; 0
    5556:	11 f1       	breq	.+68     	; 0x559c <__vector_54+0x7a>
    5558:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    555c:	14 96       	adiw	r26, 0x04	; 4
    555e:	ed 91       	ld	r30, X+
    5560:	fc 91       	ld	r31, X
    5562:	15 97       	sbiw	r26, 0x05	; 5
    5564:	93 81       	ldd	r25, Z+3	; 0x03
    5566:	82 81       	ldd	r24, Z+2	; 0x02
    5568:	25 81       	ldd	r18, Z+5	; 0x05
    556a:	98 1b       	sub	r25, r24
    556c:	92 23       	and	r25, r18
    556e:	84 81       	ldd	r24, Z+4	; 0x04
    5570:	98 17       	cp	r25, r24
    5572:	61 f0       	breq	.+24     	; 0x558c <__vector_54+0x6a>
    5574:	83 81       	ldd	r24, Z+3	; 0x03
    5576:	26 95       	lsr	r18
    5578:	28 23       	and	r18, r24
    557a:	c0 81       	ld	r28, Z
    557c:	d1 81       	ldd	r29, Z+1	; 0x01
    557e:	c2 0f       	add	r28, r18
    5580:	d1 1d       	adc	r29, r1
    5582:	68 83       	st	Y, r22
    5584:	8f 5f       	subi	r24, 0xFF	; 255
    5586:	95 81       	ldd	r25, Z+5	; 0x05
    5588:	89 23       	and	r24, r25
    558a:	83 83       	std	Z+3, r24	; 0x03
    558c:	16 96       	adiw	r26, 0x06	; 6
    558e:	ed 91       	ld	r30, X+
    5590:	fc 91       	ld	r31, X
    5592:	17 97       	sbiw	r26, 0x07	; 7
    5594:	30 97       	sbiw	r30, 0x00	; 0
    5596:	11 f0       	breq	.+4      	; 0x559c <__vector_54+0x7a>
    5598:	cd 01       	movw	r24, r26
    559a:	19 95       	eicall
    559c:	ff 91       	pop	r31
    559e:	ef 91       	pop	r30
    55a0:	df 91       	pop	r29
    55a2:	cf 91       	pop	r28
    55a4:	bf 91       	pop	r27
    55a6:	af 91       	pop	r26
    55a8:	9f 91       	pop	r25
    55aa:	8f 91       	pop	r24
    55ac:	7f 91       	pop	r23
    55ae:	6f 91       	pop	r22
    55b0:	5f 91       	pop	r21
    55b2:	4f 91       	pop	r20
    55b4:	3f 91       	pop	r19
    55b6:	2f 91       	pop	r18
    55b8:	0f 90       	pop	r0
    55ba:	0b be       	out	0x3b, r0	; 59
    55bc:	0f 90       	pop	r0
    55be:	0f be       	out	0x3f, r0	; 63
    55c0:	0f 90       	pop	r0
    55c2:	1f 90       	pop	r1
    55c4:	18 95       	reti

000055c6 <__vector_55>:
    55c6:	1f 92       	push	r1
    55c8:	0f 92       	push	r0
    55ca:	0f b6       	in	r0, 0x3f	; 63
    55cc:	0f 92       	push	r0
    55ce:	11 24       	eor	r1, r1
    55d0:	0b b6       	in	r0, 0x3b	; 59
    55d2:	0f 92       	push	r0
    55d4:	2f 93       	push	r18
    55d6:	8f 93       	push	r24
    55d8:	9f 93       	push	r25
    55da:	af 93       	push	r26
    55dc:	bf 93       	push	r27
    55de:	ef 93       	push	r30
    55e0:	ff 93       	push	r31
    55e2:	e0 91 42 15 	lds	r30, 0x1542	; 0x801542 <_ser_handle+0x6>
    55e6:	f0 91 43 15 	lds	r31, 0x1543	; 0x801543 <_ser_handle+0x7>
    55ea:	30 97       	sbiw	r30, 0x00	; 0
    55ec:	b9 f0       	breq	.+46     	; 0x561c <__vector_55+0x56>
    55ee:	02 80       	ldd	r0, Z+2	; 0x02
    55f0:	f3 81       	ldd	r31, Z+3	; 0x03
    55f2:	e0 2d       	mov	r30, r0
    55f4:	93 81       	ldd	r25, Z+3	; 0x03
    55f6:	82 81       	ldd	r24, Z+2	; 0x02
    55f8:	98 17       	cp	r25, r24
    55fa:	b1 f0       	breq	.+44     	; 0x5628 <__vector_55+0x62>
    55fc:	92 81       	ldd	r25, Z+2	; 0x02
    55fe:	85 81       	ldd	r24, Z+5	; 0x05
    5600:	28 2f       	mov	r18, r24
    5602:	26 95       	lsr	r18
    5604:	29 23       	and	r18, r25
    5606:	a0 81       	ld	r26, Z
    5608:	b1 81       	ldd	r27, Z+1	; 0x01
    560a:	a2 0f       	add	r26, r18
    560c:	b1 1d       	adc	r27, r1
    560e:	2c 91       	ld	r18, X
    5610:	9f 5f       	subi	r25, 0xFF	; 255
    5612:	89 23       	and	r24, r25
    5614:	82 83       	std	Z+2, r24	; 0x02
    5616:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    561a:	0b c0       	rjmp	.+22     	; 0x5632 <__vector_55+0x6c>
    561c:	e1 e3       	ldi	r30, 0x31	; 49
    561e:	f1 e0       	ldi	r31, 0x01	; 1
    5620:	80 81       	ld	r24, Z
    5622:	8f 7d       	andi	r24, 0xDF	; 223
    5624:	80 83       	st	Z, r24
    5626:	05 c0       	rjmp	.+10     	; 0x5632 <__vector_55+0x6c>
    5628:	e1 e3       	ldi	r30, 0x31	; 49
    562a:	f1 e0       	ldi	r31, 0x01	; 1
    562c:	80 81       	ld	r24, Z
    562e:	8f 7d       	andi	r24, 0xDF	; 223
    5630:	80 83       	st	Z, r24
    5632:	ff 91       	pop	r31
    5634:	ef 91       	pop	r30
    5636:	bf 91       	pop	r27
    5638:	af 91       	pop	r26
    563a:	9f 91       	pop	r25
    563c:	8f 91       	pop	r24
    563e:	2f 91       	pop	r18
    5640:	0f 90       	pop	r0
    5642:	0b be       	out	0x3b, r0	; 59
    5644:	0f 90       	pop	r0
    5646:	0f be       	out	0x3f, r0	; 63
    5648:	0f 90       	pop	r0
    564a:	1f 90       	pop	r1
    564c:	18 95       	reti

0000564e <usart_getchar>:
    564e:	cf 93       	push	r28
    5650:	df 93       	push	r29
    5652:	1f 92       	push	r1
    5654:	cd b7       	in	r28, 0x3d	; 61
    5656:	de b7       	in	r29, 0x3e	; 62
    5658:	be 01       	movw	r22, r28
    565a:	6f 5f       	subi	r22, 0xFF	; 255
    565c:	7f 4f       	sbci	r23, 0xFF	; 255
    565e:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <_com_serial_instance>
    5662:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <_com_serial_instance+0x1>
    5666:	7b dd       	rcall	.-1290   	; 0x515e <serial_getByte>
    5668:	81 11       	cpse	r24, r1
    566a:	f6 cf       	rjmp	.-20     	; 0x5658 <usart_getchar+0xa>
    566c:	89 81       	ldd	r24, Y+1	; 0x01
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	0f 90       	pop	r0
    5672:	df 91       	pop	r29
    5674:	cf 91       	pop	r28
    5676:	08 95       	ret

00005678 <usart_putchar>:
    5678:	68 2f       	mov	r22, r24
    567a:	80 91 44 15 	lds	r24, 0x1544	; 0x801544 <_com_serial_instance>
    567e:	90 91 45 15 	lds	r25, 0x1545	; 0x801545 <_com_serial_instance+0x1>
    5682:	ed dc       	rcall	.-1574   	; 0x505e <serial_sendByte>
    5684:	80 e0       	ldi	r24, 0x00	; 0
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	08 95       	ret

0000568a <stdio_initialise>:
    568a:	8f 92       	push	r8
    568c:	9f 92       	push	r9
    568e:	af 92       	push	r10
    5690:	cf 92       	push	r12
    5692:	ef 92       	push	r14
    5694:	0f 93       	push	r16
    5696:	81 2c       	mov	r8, r1
    5698:	91 2c       	mov	r9, r1
    569a:	68 94       	set
    569c:	aa 24       	eor	r10, r10
    569e:	a7 f8       	bld	r10, 7
    56a0:	68 94       	set
    56a2:	cc 24       	eor	r12, r12
    56a4:	c7 f8       	bld	r12, 7
    56a6:	e1 2c       	mov	r14, r1
    56a8:	00 e0       	ldi	r16, 0x00	; 0
    56aa:	23 e0       	ldi	r18, 0x03	; 3
    56ac:	40 e0       	ldi	r20, 0x00	; 0
    56ae:	51 ee       	ldi	r21, 0xE1	; 225
    56b0:	60 e0       	ldi	r22, 0x00	; 0
    56b2:	70 e0       	ldi	r23, 0x00	; 0
    56b4:	30 dc       	rcall	.-1952   	; 0x4f16 <serial_create>
    56b6:	90 93 45 15 	sts	0x1545, r25	; 0x801545 <_com_serial_instance+0x1>
    56ba:	80 93 44 15 	sts	0x1544, r24	; 0x801544 <_com_serial_instance>
    56be:	e6 e8       	ldi	r30, 0x86	; 134
    56c0:	f5 e1       	ldi	r31, 0x15	; 21
    56c2:	83 e1       	ldi	r24, 0x13	; 19
    56c4:	92 e0       	ldi	r25, 0x02	; 2
    56c6:	91 83       	std	Z+1, r25	; 0x01
    56c8:	80 83       	st	Z, r24
    56ca:	93 83       	std	Z+3, r25	; 0x03
    56cc:	82 83       	std	Z+2, r24	; 0x02
    56ce:	0f 91       	pop	r16
    56d0:	ef 90       	pop	r14
    56d2:	cf 90       	pop	r12
    56d4:	af 90       	pop	r10
    56d6:	9f 90       	pop	r9
    56d8:	8f 90       	pop	r8
    56da:	08 95       	ret

000056dc <_callBack>:
    56dc:	e0 91 4e 15 	lds	r30, 0x154E	; 0x80154e <_callBackFunction>
    56e0:	f0 91 4f 15 	lds	r31, 0x154F	; 0x80154f <_callBackFunction+0x1>
    56e4:	30 97       	sbiw	r30, 0x00	; 0
    56e6:	09 f0       	breq	.+2      	; 0x56ea <_callBack+0xe>
    56e8:	19 95       	eicall
    56ea:	08 95       	ret

000056ec <_tsl2591TwiCallback>:
    56ec:	64 50       	subi	r22, 0x04	; 4
    56ee:	62 30       	cpi	r22, 0x02	; 2
    56f0:	08 f0       	brcs	.+2      	; 0x56f4 <_tsl2591TwiCallback+0x8>
    56f2:	3b c0       	rjmp	.+118    	; 0x576a <_tsl2591TwiCallback+0x7e>
    56f4:	20 91 4d 15 	lds	r18, 0x154D	; 0x80154d <_nextState>
    56f8:	22 30       	cpi	r18, 0x02	; 2
    56fa:	79 f0       	breq	.+30     	; 0x571a <_tsl2591TwiCallback+0x2e>
    56fc:	18 f4       	brcc	.+6      	; 0x5704 <_tsl2591TwiCallback+0x18>
    56fe:	21 30       	cpi	r18, 0x01	; 1
    5700:	31 f0       	breq	.+12     	; 0x570e <_tsl2591TwiCallback+0x22>
    5702:	30 c0       	rjmp	.+96     	; 0x5764 <_tsl2591TwiCallback+0x78>
    5704:	23 30       	cpi	r18, 0x03	; 3
    5706:	81 f0       	breq	.+32     	; 0x5728 <_tsl2591TwiCallback+0x3c>
    5708:	24 30       	cpi	r18, 0x04	; 4
    570a:	a1 f0       	breq	.+40     	; 0x5734 <_tsl2591TwiCallback+0x48>
    570c:	2b c0       	rjmp	.+86     	; 0x5764 <_tsl2591TwiCallback+0x78>
    570e:	22 e0       	ldi	r18, 0x02	; 2
    5710:	20 93 4d 15 	sts	0x154D, r18	; 0x80154d <_nextState>
    5714:	61 e0       	ldi	r22, 0x01	; 1
    5716:	0c c2       	rjmp	.+1048   	; 0x5b30 <twiReceive>
    5718:	08 95       	ret
    571a:	fa 01       	movw	r30, r20
    571c:	80 81       	ld	r24, Z
    571e:	80 93 4a 15 	sts	0x154A, r24	; 0x80154a <_deviceId>
    5722:	82 e0       	ldi	r24, 0x02	; 2
    5724:	db cf       	rjmp	.-74     	; 0x56dc <_callBack>
    5726:	08 95       	ret
    5728:	24 e0       	ldi	r18, 0x04	; 4
    572a:	20 93 4d 15 	sts	0x154D, r18	; 0x80154d <_nextState>
    572e:	64 e0       	ldi	r22, 0x04	; 4
    5730:	ff c1       	rjmp	.+1022   	; 0x5b30 <twiReceive>
    5732:	08 95       	ret
    5734:	fa 01       	movw	r30, r20
    5736:	81 81       	ldd	r24, Z+1	; 0x01
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	98 2f       	mov	r25, r24
    573c:	88 27       	eor	r24, r24
    573e:	20 81       	ld	r18, Z
    5740:	82 2b       	or	r24, r18
    5742:	90 93 49 15 	sts	0x1549, r25	; 0x801549 <_fullSpectrumRaw+0x1>
    5746:	80 93 48 15 	sts	0x1548, r24	; 0x801548 <_fullSpectrumRaw>
    574a:	83 81       	ldd	r24, Z+3	; 0x03
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	98 2f       	mov	r25, r24
    5750:	88 27       	eor	r24, r24
    5752:	22 81       	ldd	r18, Z+2	; 0x02
    5754:	82 2b       	or	r24, r18
    5756:	90 93 47 15 	sts	0x1547, r25	; 0x801547 <_infraredRaw+0x1>
    575a:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <_infraredRaw>
    575e:	81 e0       	ldi	r24, 0x01	; 1
    5760:	bd cf       	rjmp	.-134    	; 0x56dc <_callBack>
    5762:	08 95       	ret
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	ba cf       	rjmp	.-140    	; 0x56dc <_callBack>
    5768:	08 95       	ret
    576a:	10 92 4d 15 	sts	0x154D, r1	; 0x80154d <_nextState>
    576e:	86 e0       	ldi	r24, 0x06	; 6
    5770:	b5 cf       	rjmp	.-150    	; 0x56dc <_callBack>
    5772:	08 95       	ret

00005774 <_twiTransmit>:
    5774:	20 91 50 15 	lds	r18, 0x1550	; 0x801550 <_twiHandler>
    5778:	30 91 51 15 	lds	r19, 0x1551	; 0x801551 <_twiHandler+0x1>
    577c:	21 15       	cp	r18, r1
    577e:	31 05       	cpc	r19, r1
    5780:	41 f0       	breq	.+16     	; 0x5792 <_twiTransmit+0x1e>
    5782:	46 2f       	mov	r20, r22
    5784:	bc 01       	movw	r22, r24
    5786:	c9 01       	movw	r24, r18
    5788:	87 d1       	rcall	.+782    	; 0x5a98 <twiTransmit>
    578a:	82 30       	cpi	r24, 0x02	; 2
    578c:	21 f0       	breq	.+8      	; 0x5796 <_twiTransmit+0x22>
    578e:	80 e0       	ldi	r24, 0x00	; 0
    5790:	08 95       	ret
    5792:	87 e0       	ldi	r24, 0x07	; 7
    5794:	08 95       	ret
    5796:	85 e0       	ldi	r24, 0x05	; 5
    5798:	08 95       	ret

0000579a <tsl2591_initialise>:
    579a:	0f 93       	push	r16
    579c:	1f 93       	push	r17
    579e:	90 93 4f 15 	sts	0x154F, r25	; 0x80154f <_callBackFunction+0x1>
    57a2:	80 93 4e 15 	sts	0x154E, r24	; 0x80154e <_callBackFunction>
    57a6:	06 e7       	ldi	r16, 0x76	; 118
    57a8:	1b e2       	ldi	r17, 0x2B	; 43
    57aa:	20 e0       	ldi	r18, 0x00	; 0
    57ac:	34 e2       	ldi	r19, 0x24	; 36
    57ae:	44 ef       	ldi	r20, 0xF4	; 244
    57b0:	50 e0       	ldi	r21, 0x00	; 0
    57b2:	60 e0       	ldi	r22, 0x00	; 0
    57b4:	89 e2       	ldi	r24, 0x29	; 41
    57b6:	1f d1       	rcall	.+574    	; 0x59f6 <twiCreate>
    57b8:	90 93 51 15 	sts	0x1551, r25	; 0x801551 <_twiHandler+0x1>
    57bc:	80 93 50 15 	sts	0x1550, r24	; 0x801550 <_twiHandler>
    57c0:	89 2b       	or	r24, r25
    57c2:	11 f0       	breq	.+4      	; 0x57c8 <tsl2591_initialise+0x2e>
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	01 c0       	rjmp	.+2      	; 0x57ca <tsl2591_initialise+0x30>
    57c8:	88 e0       	ldi	r24, 0x08	; 8
    57ca:	1f 91       	pop	r17
    57cc:	0f 91       	pop	r16
    57ce:	08 95       	ret

000057d0 <tsl2591_enable>:
    57d0:	cf 93       	push	r28
    57d2:	df 93       	push	r29
    57d4:	1f 92       	push	r1
    57d6:	1f 92       	push	r1
    57d8:	cd b7       	in	r28, 0x3d	; 61
    57da:	de b7       	in	r29, 0x3e	; 62
    57dc:	80 ea       	ldi	r24, 0xA0	; 160
    57de:	89 83       	std	Y+1, r24	; 0x01
    57e0:	83 e0       	ldi	r24, 0x03	; 3
    57e2:	8a 83       	std	Y+2, r24	; 0x02
    57e4:	10 92 4d 15 	sts	0x154D, r1	; 0x80154d <_nextState>
    57e8:	62 e0       	ldi	r22, 0x02	; 2
    57ea:	ce 01       	movw	r24, r28
    57ec:	01 96       	adiw	r24, 0x01	; 1
    57ee:	c2 df       	rcall	.-124    	; 0x5774 <_twiTransmit>
    57f0:	0f 90       	pop	r0
    57f2:	0f 90       	pop	r0
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	08 95       	ret

000057fa <tsl2591_fetchData>:
    57fa:	cf 93       	push	r28
    57fc:	df 93       	push	r29
    57fe:	1f 92       	push	r1
    5800:	cd b7       	in	r28, 0x3d	; 61
    5802:	de b7       	in	r29, 0x3e	; 62
    5804:	84 eb       	ldi	r24, 0xB4	; 180
    5806:	89 83       	std	Y+1, r24	; 0x01
    5808:	83 e0       	ldi	r24, 0x03	; 3
    580a:	80 93 4d 15 	sts	0x154D, r24	; 0x80154d <_nextState>
    580e:	61 e0       	ldi	r22, 0x01	; 1
    5810:	ce 01       	movw	r24, r28
    5812:	01 96       	adiw	r24, 0x01	; 1
    5814:	af df       	rcall	.-162    	; 0x5774 <_twiTransmit>
    5816:	0f 90       	pop	r0
    5818:	df 91       	pop	r29
    581a:	cf 91       	pop	r28
    581c:	08 95       	ret

0000581e <tsl2591_getLux>:
    581e:	2f 92       	push	r2
    5820:	3f 92       	push	r3
    5822:	4f 92       	push	r4
    5824:	5f 92       	push	r5
    5826:	6f 92       	push	r6
    5828:	7f 92       	push	r7
    582a:	8f 92       	push	r8
    582c:	9f 92       	push	r9
    582e:	af 92       	push	r10
    5830:	bf 92       	push	r11
    5832:	cf 92       	push	r12
    5834:	df 92       	push	r13
    5836:	ef 92       	push	r14
    5838:	ff 92       	push	r15
    583a:	0f 93       	push	r16
    583c:	1f 93       	push	r17
    583e:	cf 93       	push	r28
    5840:	df 93       	push	r29
    5842:	c0 91 46 15 	lds	r28, 0x1546	; 0x801546 <_infraredRaw>
    5846:	d0 91 47 15 	lds	r29, 0x1547	; 0x801547 <_infraredRaw+0x1>
    584a:	cf 3f       	cpi	r28, 0xFF	; 255
    584c:	2f ef       	ldi	r18, 0xFF	; 255
    584e:	d2 07       	cpc	r29, r18
    5850:	41 f0       	breq	.+16     	; 0x5862 <tsl2591_getLux+0x44>
    5852:	60 91 48 15 	lds	r22, 0x1548	; 0x801548 <_fullSpectrumRaw>
    5856:	70 91 49 15 	lds	r23, 0x1549	; 0x801549 <_fullSpectrumRaw+0x1>
    585a:	6f 3f       	cpi	r22, 0xFF	; 255
    585c:	ef ef       	ldi	r30, 0xFF	; 255
    585e:	7e 07       	cpc	r23, r30
    5860:	59 f4       	brne	.+22     	; 0x5878 <tsl2591_getLux+0x5a>
    5862:	4f ef       	ldi	r20, 0xFF	; 255
    5864:	5f ef       	ldi	r21, 0xFF	; 255
    5866:	6f e7       	ldi	r22, 0x7F	; 127
    5868:	7f e7       	ldi	r23, 0x7F	; 127
    586a:	fc 01       	movw	r30, r24
    586c:	40 83       	st	Z, r20
    586e:	51 83       	std	Z+1, r21	; 0x01
    5870:	62 83       	std	Z+2, r22	; 0x02
    5872:	73 83       	std	Z+3, r23	; 0x03
    5874:	83 e0       	ldi	r24, 0x03	; 3
    5876:	9b c0       	rjmp	.+310    	; 0x59ae <tsl2591_getLux+0x190>
    5878:	1c 01       	movw	r2, r24
    587a:	80 e0       	ldi	r24, 0x00	; 0
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	5e d6       	rcall	.+3260   	; 0x653c <__floatunsisf>
    5880:	2b 01       	movw	r4, r22
    5882:	3c 01       	movw	r6, r24
    5884:	be 01       	movw	r22, r28
    5886:	80 e0       	ldi	r24, 0x00	; 0
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	58 d6       	rcall	.+3248   	; 0x653c <__floatunsisf>
    588c:	4b 01       	movw	r8, r22
    588e:	5c 01       	movw	r10, r24
    5890:	80 91 4b 15 	lds	r24, 0x154B	; 0x80154b <_currentIntegrationTime>
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	01 96       	adiw	r24, 0x01	; 1
    5898:	24 e6       	ldi	r18, 0x64	; 100
    589a:	28 9f       	mul	r18, r24
    589c:	b0 01       	movw	r22, r0
    589e:	29 9f       	mul	r18, r25
    58a0:	70 0d       	add	r23, r0
    58a2:	11 24       	eor	r1, r1
    58a4:	80 91 4c 15 	lds	r24, 0x154C	; 0x80154c <_currentGain>
    58a8:	80 32       	cpi	r24, 0x20	; 32
    58aa:	69 f0       	breq	.+26     	; 0x58c6 <tsl2591_getLux+0xa8>
    58ac:	80 33       	cpi	r24, 0x30	; 48
    58ae:	a1 f0       	breq	.+40     	; 0x58d8 <tsl2591_getLux+0xba>
    58b0:	80 31       	cpi	r24, 0x10	; 16
    58b2:	e1 f4       	brne	.+56     	; 0x58ec <tsl2591_getLux+0xce>
    58b4:	0f 2e       	mov	r0, r31
    58b6:	c1 2c       	mov	r12, r1
    58b8:	d1 2c       	mov	r13, r1
    58ba:	f8 ec       	ldi	r31, 0xC8	; 200
    58bc:	ef 2e       	mov	r14, r31
    58be:	f1 e4       	ldi	r31, 0x41	; 65
    58c0:	ff 2e       	mov	r15, r31
    58c2:	f0 2d       	mov	r31, r0
    58c4:	1b c0       	rjmp	.+54     	; 0x58fc <tsl2591_getLux+0xde>
    58c6:	0f 2e       	mov	r0, r31
    58c8:	c1 2c       	mov	r12, r1
    58ca:	d1 2c       	mov	r13, r1
    58cc:	f6 ed       	ldi	r31, 0xD6	; 214
    58ce:	ef 2e       	mov	r14, r31
    58d0:	f3 e4       	ldi	r31, 0x43	; 67
    58d2:	ff 2e       	mov	r15, r31
    58d4:	f0 2d       	mov	r31, r0
    58d6:	12 c0       	rjmp	.+36     	; 0x58fc <tsl2591_getLux+0xde>
    58d8:	0f 2e       	mov	r0, r31
    58da:	c1 2c       	mov	r12, r1
    58dc:	f0 e5       	ldi	r31, 0x50	; 80
    58de:	df 2e       	mov	r13, r31
    58e0:	fa e1       	ldi	r31, 0x1A	; 26
    58e2:	ef 2e       	mov	r14, r31
    58e4:	f6 e4       	ldi	r31, 0x46	; 70
    58e6:	ff 2e       	mov	r15, r31
    58e8:	f0 2d       	mov	r31, r0
    58ea:	08 c0       	rjmp	.+16     	; 0x58fc <tsl2591_getLux+0xde>
    58ec:	0f 2e       	mov	r0, r31
    58ee:	c1 2c       	mov	r12, r1
    58f0:	d1 2c       	mov	r13, r1
    58f2:	f0 e8       	ldi	r31, 0x80	; 128
    58f4:	ef 2e       	mov	r14, r31
    58f6:	ff e3       	ldi	r31, 0x3F	; 63
    58f8:	ff 2e       	mov	r15, r31
    58fa:	f0 2d       	mov	r31, r0
    58fc:	07 2e       	mov	r0, r23
    58fe:	00 0c       	add	r0, r0
    5900:	88 0b       	sbc	r24, r24
    5902:	99 0b       	sbc	r25, r25
    5904:	1d d6       	rcall	.+3130   	; 0x6540 <__floatsisf>
    5906:	a7 01       	movw	r20, r14
    5908:	96 01       	movw	r18, r12
    590a:	5a d6       	rcall	.+3252   	; 0x65c0 <__mulsf3>
    590c:	20 e0       	ldi	r18, 0x00	; 0
    590e:	30 e0       	ldi	r19, 0x00	; 0
    5910:	4c ec       	ldi	r20, 0xCC	; 204
    5912:	53 e4       	ldi	r21, 0x43	; 67
    5914:	a2 d5       	rcall	.+2884   	; 0x645a <__divsf3>
    5916:	6b 01       	movw	r12, r22
    5918:	7c 01       	movw	r14, r24
    591a:	25 e8       	ldi	r18, 0x85	; 133
    591c:	3b ee       	ldi	r19, 0xEB	; 235
    591e:	41 ed       	ldi	r20, 0xD1	; 209
    5920:	5f e3       	ldi	r21, 0x3F	; 63
    5922:	c5 01       	movw	r24, r10
    5924:	b4 01       	movw	r22, r8
    5926:	4c d6       	rcall	.+3224   	; 0x65c0 <__mulsf3>
    5928:	9b 01       	movw	r18, r22
    592a:	ac 01       	movw	r20, r24
    592c:	c3 01       	movw	r24, r6
    592e:	b2 01       	movw	r22, r4
    5930:	0e 94 47 22 	call	0x448e	; 0x448e <__subsf3>
    5934:	a7 01       	movw	r20, r14
    5936:	96 01       	movw	r18, r12
    5938:	90 d5       	rcall	.+2848   	; 0x645a <__divsf3>
    593a:	16 2f       	mov	r17, r22
    593c:	d7 2f       	mov	r29, r23
    593e:	c8 2f       	mov	r28, r24
    5940:	09 2f       	mov	r16, r25
    5942:	2d e3       	ldi	r18, 0x3D	; 61
    5944:	3a e0       	ldi	r19, 0x0A	; 10
    5946:	47 e1       	ldi	r20, 0x17	; 23
    5948:	5f e3       	ldi	r21, 0x3F	; 63
    594a:	c3 01       	movw	r24, r6
    594c:	b2 01       	movw	r22, r4
    594e:	38 d6       	rcall	.+3184   	; 0x65c0 <__mulsf3>
    5950:	2b 01       	movw	r4, r22
    5952:	3c 01       	movw	r6, r24
    5954:	26 ef       	ldi	r18, 0xF6	; 246
    5956:	38 e2       	ldi	r19, 0x28	; 40
    5958:	4c e5       	ldi	r20, 0x5C	; 92
    595a:	5f e3       	ldi	r21, 0x3F	; 63
    595c:	c5 01       	movw	r24, r10
    595e:	b4 01       	movw	r22, r8
    5960:	2f d6       	rcall	.+3166   	; 0x65c0 <__mulsf3>
    5962:	9b 01       	movw	r18, r22
    5964:	ac 01       	movw	r20, r24
    5966:	c3 01       	movw	r24, r6
    5968:	b2 01       	movw	r22, r4
    596a:	0e 94 47 22 	call	0x448e	; 0x448e <__subsf3>
    596e:	a7 01       	movw	r20, r14
    5970:	96 01       	movw	r18, r12
    5972:	73 d5       	rcall	.+2790   	; 0x645a <__divsf3>
    5974:	c6 2e       	mov	r12, r22
    5976:	d7 2e       	mov	r13, r23
    5978:	e8 2e       	mov	r14, r24
    597a:	f9 2e       	mov	r15, r25
    597c:	26 2f       	mov	r18, r22
    597e:	37 2f       	mov	r19, r23
    5980:	48 2f       	mov	r20, r24
    5982:	59 2f       	mov	r21, r25
    5984:	61 2f       	mov	r22, r17
    5986:	7d 2f       	mov	r23, r29
    5988:	8c 2f       	mov	r24, r28
    598a:	90 2f       	mov	r25, r16
    598c:	14 d6       	rcall	.+3112   	; 0x65b6 <__gesf2>
    598e:	18 16       	cp	r1, r24
    5990:	24 f0       	brlt	.+8      	; 0x599a <tsl2591_getLux+0x17c>
    5992:	1c 2d       	mov	r17, r12
    5994:	dd 2d       	mov	r29, r13
    5996:	ce 2d       	mov	r28, r14
    5998:	0f 2d       	mov	r16, r15
    599a:	41 2f       	mov	r20, r17
    599c:	5d 2f       	mov	r21, r29
    599e:	6c 2f       	mov	r22, r28
    59a0:	70 2f       	mov	r23, r16
    59a2:	f1 01       	movw	r30, r2
    59a4:	40 83       	st	Z, r20
    59a6:	51 83       	std	Z+1, r21	; 0x01
    59a8:	62 83       	std	Z+2, r22	; 0x02
    59aa:	73 83       	std	Z+3, r23	; 0x03
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	1f 91       	pop	r17
    59b4:	0f 91       	pop	r16
    59b6:	ff 90       	pop	r15
    59b8:	ef 90       	pop	r14
    59ba:	df 90       	pop	r13
    59bc:	cf 90       	pop	r12
    59be:	bf 90       	pop	r11
    59c0:	af 90       	pop	r10
    59c2:	9f 90       	pop	r9
    59c4:	8f 90       	pop	r8
    59c6:	7f 90       	pop	r7
    59c8:	6f 90       	pop	r6
    59ca:	5f 90       	pop	r5
    59cc:	4f 90       	pop	r4
    59ce:	3f 90       	pop	r3
    59d0:	2f 90       	pop	r2
    59d2:	08 95       	ret

000059d4 <_initTwiInterface>:
    59d4:	80 91 60 15 	lds	r24, 0x1560	; 0x801560 <_twiIsInitiated>
    59d8:	81 11       	cpse	r24, r1
    59da:	0c c0       	rjmp	.+24     	; 0x59f4 <_initTwiInterface+0x20>
    59dc:	8c e0       	ldi	r24, 0x0C	; 12
    59de:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    59e2:	8f ef       	ldi	r24, 0xFF	; 255
    59e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    59e8:	84 e0       	ldi	r24, 0x04	; 4
    59ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59ee:	81 e0       	ldi	r24, 0x01	; 1
    59f0:	80 93 60 15 	sts	0x1560, r24	; 0x801560 <_twiIsInitiated>
    59f4:	08 95       	ret

000059f6 <twiCreate>:
    59f6:	af 92       	push	r10
    59f8:	bf 92       	push	r11
    59fa:	cf 92       	push	r12
    59fc:	df 92       	push	r13
    59fe:	ef 92       	push	r14
    5a00:	ff 92       	push	r15
    5a02:	0f 93       	push	r16
    5a04:	1f 93       	push	r17
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	a8 2e       	mov	r10, r24
    5a0c:	b6 2e       	mov	r11, r22
    5a0e:	69 01       	movw	r12, r18
    5a10:	7a 01       	movw	r14, r20
    5a12:	84 e0       	ldi	r24, 0x04	; 4
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	93 d6       	rcall	.+3366   	; 0x673e <malloc>
    5a18:	ec 01       	movw	r28, r24
    5a1a:	89 2b       	or	r24, r25
    5a1c:	61 f1       	breq	.+88     	; 0x5a76 <twiCreate+0x80>
    5a1e:	a8 82       	st	Y, r10
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	b8 12       	cpse	r11, r24
    5a24:	12 c0       	rjmp	.+36     	; 0x5a4a <twiCreate+0x54>
    5a26:	c7 01       	movw	r24, r14
    5a28:	b6 01       	movw	r22, r12
    5a2a:	20 ea       	ldi	r18, 0xA0	; 160
    5a2c:	36 e8       	ldi	r19, 0x86	; 134
    5a2e:	41 e0       	ldi	r20, 0x01	; 1
    5a30:	50 e0       	ldi	r21, 0x00	; 0
    5a32:	32 d6       	rcall	.+3172   	; 0x6698 <__udivmodsi4>
    5a34:	da 01       	movw	r26, r20
    5a36:	c9 01       	movw	r24, r18
    5a38:	40 97       	sbiw	r24, 0x10	; 16
    5a3a:	a1 09       	sbc	r26, r1
    5a3c:	b1 09       	sbc	r27, r1
    5a3e:	b6 95       	lsr	r27
    5a40:	a7 95       	ror	r26
    5a42:	97 95       	ror	r25
    5a44:	87 95       	ror	r24
    5a46:	89 83       	std	Y+1, r24	; 0x01
    5a48:	11 c0       	rjmp	.+34     	; 0x5a6c <twiCreate+0x76>
    5a4a:	c7 01       	movw	r24, r14
    5a4c:	b6 01       	movw	r22, r12
    5a4e:	20 e8       	ldi	r18, 0x80	; 128
    5a50:	3a e1       	ldi	r19, 0x1A	; 26
    5a52:	46 e0       	ldi	r20, 0x06	; 6
    5a54:	50 e0       	ldi	r21, 0x00	; 0
    5a56:	20 d6       	rcall	.+3136   	; 0x6698 <__udivmodsi4>
    5a58:	da 01       	movw	r26, r20
    5a5a:	c9 01       	movw	r24, r18
    5a5c:	40 97       	sbiw	r24, 0x10	; 16
    5a5e:	a1 09       	sbc	r26, r1
    5a60:	b1 09       	sbc	r27, r1
    5a62:	b6 95       	lsr	r27
    5a64:	a7 95       	ror	r26
    5a66:	97 95       	ror	r25
    5a68:	87 95       	ror	r24
    5a6a:	89 83       	std	Y+1, r24	; 0x01
    5a6c:	1b 83       	std	Y+3, r17	; 0x03
    5a6e:	0a 83       	std	Y+2, r16	; 0x02
    5a70:	8c 2f       	mov	r24, r28
    5a72:	9d 2f       	mov	r25, r29
    5a74:	02 c0       	rjmp	.+4      	; 0x5a7a <twiCreate+0x84>
    5a76:	80 e0       	ldi	r24, 0x00	; 0
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	df 91       	pop	r29
    5a7c:	cf 91       	pop	r28
    5a7e:	1f 91       	pop	r17
    5a80:	0f 91       	pop	r16
    5a82:	ff 90       	pop	r15
    5a84:	ef 90       	pop	r14
    5a86:	df 90       	pop	r13
    5a88:	cf 90       	pop	r12
    5a8a:	bf 90       	pop	r11
    5a8c:	af 90       	pop	r10
    5a8e:	08 95       	ret

00005a90 <twiIsBusy>:
    5a90:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a94:	81 70       	andi	r24, 0x01	; 1
    5a96:	08 95       	ret

00005a98 <twiTransmit>:
    5a98:	ff 92       	push	r15
    5a9a:	0f 93       	push	r16
    5a9c:	1f 93       	push	r17
    5a9e:	cf 93       	push	r28
    5aa0:	df 93       	push	r29
    5aa2:	00 97       	sbiw	r24, 0x00	; 0
    5aa4:	d1 f1       	breq	.+116    	; 0x5b1a <twiTransmit+0x82>
    5aa6:	4a 30       	cpi	r20, 0x0A	; 10
    5aa8:	d0 f5       	brcc	.+116    	; 0x5b1e <twiTransmit+0x86>
    5aaa:	f4 2e       	mov	r15, r20
    5aac:	8b 01       	movw	r16, r22
    5aae:	ec 01       	movw	r28, r24
    5ab0:	ef df       	rcall	.-34     	; 0x5a90 <twiIsBusy>
    5ab2:	81 11       	cpse	r24, r1
    5ab4:	36 c0       	rjmp	.+108    	; 0x5b22 <twiTransmit+0x8a>
    5ab6:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <_twiCurrentHandler>
    5aba:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <_twiCurrentHandler+0x1>
    5abe:	c8 17       	cp	r28, r24
    5ac0:	d9 07       	cpc	r29, r25
    5ac2:	41 f0       	breq	.+16     	; 0x5ad4 <twiTransmit+0x3c>
    5ac4:	87 df       	rcall	.-242    	; 0x59d4 <_initTwiInterface>
    5ac6:	89 81       	ldd	r24, Y+1	; 0x01
    5ac8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5acc:	d0 93 54 15 	sts	0x1554, r29	; 0x801554 <_twiCurrentHandler+0x1>
    5ad0:	c0 93 53 15 	sts	0x1553, r28	; 0x801553 <_twiCurrentHandler>
    5ad4:	81 e0       	ldi	r24, 0x01	; 1
    5ad6:	8f 0d       	add	r24, r15
    5ad8:	80 93 55 15 	sts	0x1555, r24	; 0x801555 <_twiMessageLen>
    5adc:	88 81       	ld	r24, Y
    5ade:	88 0f       	add	r24, r24
    5ae0:	80 93 56 15 	sts	0x1556, r24	; 0x801556 <_twiMessageBuffer>
    5ae4:	ff 20       	and	r15, r15
    5ae6:	89 f0       	breq	.+34     	; 0x5b0a <twiTransmit+0x72>
    5ae8:	f8 01       	movw	r30, r16
    5aea:	a7 e5       	ldi	r26, 0x57	; 87
    5aec:	b5 e1       	ldi	r27, 0x15	; 21
    5aee:	4f ef       	ldi	r20, 0xFF	; 255
    5af0:	4f 0d       	add	r20, r15
    5af2:	64 2f       	mov	r22, r20
    5af4:	70 e0       	ldi	r23, 0x00	; 0
    5af6:	cb 01       	movw	r24, r22
    5af8:	01 96       	adiw	r24, 0x01	; 1
    5afa:	b8 01       	movw	r22, r16
    5afc:	68 0f       	add	r22, r24
    5afe:	79 1f       	adc	r23, r25
    5b00:	81 91       	ld	r24, Z+
    5b02:	8d 93       	st	X+, r24
    5b04:	e6 17       	cp	r30, r22
    5b06:	f7 07       	cpc	r31, r23
    5b08:	d9 f7       	brne	.-10     	; 0x5b00 <twiTransmit+0x68>
    5b0a:	88 ef       	ldi	r24, 0xF8	; 248
    5b0c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b10:	85 ea       	ldi	r24, 0xA5	; 165
    5b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b16:	84 e0       	ldi	r24, 0x04	; 4
    5b18:	05 c0       	rjmp	.+10     	; 0x5b24 <twiTransmit+0x8c>
    5b1a:	86 e0       	ldi	r24, 0x06	; 6
    5b1c:	03 c0       	rjmp	.+6      	; 0x5b24 <twiTransmit+0x8c>
    5b1e:	87 e0       	ldi	r24, 0x07	; 7
    5b20:	01 c0       	rjmp	.+2      	; 0x5b24 <twiTransmit+0x8c>
    5b22:	82 e0       	ldi	r24, 0x02	; 2
    5b24:	df 91       	pop	r29
    5b26:	cf 91       	pop	r28
    5b28:	1f 91       	pop	r17
    5b2a:	0f 91       	pop	r16
    5b2c:	ff 90       	pop	r15
    5b2e:	08 95       	ret

00005b30 <twiReceive>:
    5b30:	1f 93       	push	r17
    5b32:	cf 93       	push	r28
    5b34:	df 93       	push	r29
    5b36:	00 97       	sbiw	r24, 0x00	; 0
    5b38:	29 f1       	breq	.+74     	; 0x5b84 <twiReceive+0x54>
    5b3a:	6b 30       	cpi	r22, 0x0B	; 11
    5b3c:	28 f5       	brcc	.+74     	; 0x5b88 <twiReceive+0x58>
    5b3e:	16 2f       	mov	r17, r22
    5b40:	ec 01       	movw	r28, r24
    5b42:	a6 df       	rcall	.-180    	; 0x5a90 <twiIsBusy>
    5b44:	81 11       	cpse	r24, r1
    5b46:	22 c0       	rjmp	.+68     	; 0x5b8c <twiReceive+0x5c>
    5b48:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <_twiCurrentHandler>
    5b4c:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <_twiCurrentHandler+0x1>
    5b50:	c8 17       	cp	r28, r24
    5b52:	d9 07       	cpc	r29, r25
    5b54:	41 f0       	breq	.+16     	; 0x5b66 <twiReceive+0x36>
    5b56:	3e df       	rcall	.-388    	; 0x59d4 <_initTwiInterface>
    5b58:	89 81       	ldd	r24, Y+1	; 0x01
    5b5a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b5e:	d0 93 54 15 	sts	0x1554, r29	; 0x801554 <_twiCurrentHandler+0x1>
    5b62:	c0 93 53 15 	sts	0x1553, r28	; 0x801553 <_twiCurrentHandler>
    5b66:	10 93 55 15 	sts	0x1555, r17	; 0x801555 <_twiMessageLen>
    5b6a:	88 81       	ld	r24, Y
    5b6c:	88 0f       	add	r24, r24
    5b6e:	81 60       	ori	r24, 0x01	; 1
    5b70:	80 93 56 15 	sts	0x1556, r24	; 0x801556 <_twiMessageBuffer>
    5b74:	88 ef       	ldi	r24, 0xF8	; 248
    5b76:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b7a:	85 ea       	ldi	r24, 0xA5	; 165
    5b7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b80:	85 e0       	ldi	r24, 0x05	; 5
    5b82:	05 c0       	rjmp	.+10     	; 0x5b8e <twiReceive+0x5e>
    5b84:	86 e0       	ldi	r24, 0x06	; 6
    5b86:	03 c0       	rjmp	.+6      	; 0x5b8e <twiReceive+0x5e>
    5b88:	87 e0       	ldi	r24, 0x07	; 7
    5b8a:	01 c0       	rjmp	.+2      	; 0x5b8e <twiReceive+0x5e>
    5b8c:	82 e0       	ldi	r24, 0x02	; 2
    5b8e:	df 91       	pop	r29
    5b90:	cf 91       	pop	r28
    5b92:	1f 91       	pop	r17
    5b94:	08 95       	ret

00005b96 <__vector_39>:
    5b96:	1f 92       	push	r1
    5b98:	0f 92       	push	r0
    5b9a:	0f b6       	in	r0, 0x3f	; 63
    5b9c:	0f 92       	push	r0
    5b9e:	11 24       	eor	r1, r1
    5ba0:	0b b6       	in	r0, 0x3b	; 59
    5ba2:	0f 92       	push	r0
    5ba4:	2f 93       	push	r18
    5ba6:	3f 93       	push	r19
    5ba8:	4f 93       	push	r20
    5baa:	5f 93       	push	r21
    5bac:	6f 93       	push	r22
    5bae:	7f 93       	push	r23
    5bb0:	8f 93       	push	r24
    5bb2:	9f 93       	push	r25
    5bb4:	af 93       	push	r26
    5bb6:	bf 93       	push	r27
    5bb8:	ef 93       	push	r30
    5bba:	ff 93       	push	r31
    5bbc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5bc0:	8e 2f       	mov	r24, r30
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	38 97       	sbiw	r30, 0x08	; 8
    5bc8:	e1 35       	cpi	r30, 0x51	; 81
    5bca:	f1 05       	cpc	r31, r1
    5bcc:	08 f0       	brcs	.+2      	; 0x5bd0 <__vector_39+0x3a>
    5bce:	75 c0       	rjmp	.+234    	; 0x5cba <__vector_39+0x124>
    5bd0:	88 27       	eor	r24, r24
    5bd2:	e4 58       	subi	r30, 0x84	; 132
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    5bd8:	81 c5       	rjmp	.+2818   	; 0x66dc <__tablejump2__>
    5bda:	10 92 52 15 	sts	0x1552, r1	; 0x801552 <_index.1885>
    5bde:	e0 91 52 15 	lds	r30, 0x1552	; 0x801552 <_index.1885>
    5be2:	80 91 55 15 	lds	r24, 0x1555	; 0x801555 <_twiMessageLen>
    5be6:	e8 17       	cp	r30, r24
    5be8:	70 f4       	brcc	.+28     	; 0x5c06 <__vector_39+0x70>
    5bea:	81 e0       	ldi	r24, 0x01	; 1
    5bec:	8e 0f       	add	r24, r30
    5bee:	80 93 52 15 	sts	0x1552, r24	; 0x801552 <_index.1885>
    5bf2:	f0 e0       	ldi	r31, 0x00	; 0
    5bf4:	ea 5a       	subi	r30, 0xAA	; 170
    5bf6:	fa 4e       	sbci	r31, 0xEA	; 234
    5bf8:	80 81       	ld	r24, Z
    5bfa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5bfe:	85 e8       	ldi	r24, 0x85	; 133
    5c00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c04:	72 c0       	rjmp	.+228    	; 0x5cea <__vector_39+0x154>
    5c06:	84 e9       	ldi	r24, 0x94	; 148
    5c08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c0c:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <_twiCurrentHandler>
    5c10:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <_twiCurrentHandler+0x1>
    5c14:	dc 01       	movw	r26, r24
    5c16:	12 96       	adiw	r26, 0x02	; 2
    5c18:	ed 91       	ld	r30, X+
    5c1a:	fc 91       	ld	r31, X
    5c1c:	13 97       	sbiw	r26, 0x03	; 3
    5c1e:	30 97       	sbiw	r30, 0x00	; 0
    5c20:	09 f4       	brne	.+2      	; 0x5c24 <__vector_39+0x8e>
    5c22:	63 c0       	rjmp	.+198    	; 0x5cea <__vector_39+0x154>
    5c24:	20 e0       	ldi	r18, 0x00	; 0
    5c26:	40 e0       	ldi	r20, 0x00	; 0
    5c28:	50 e0       	ldi	r21, 0x00	; 0
    5c2a:	64 e0       	ldi	r22, 0x04	; 4
    5c2c:	19 95       	eicall
    5c2e:	5d c0       	rjmp	.+186    	; 0x5cea <__vector_39+0x154>
    5c30:	e0 91 52 15 	lds	r30, 0x1552	; 0x801552 <_index.1885>
    5c34:	81 e0       	ldi	r24, 0x01	; 1
    5c36:	8e 0f       	add	r24, r30
    5c38:	80 93 52 15 	sts	0x1552, r24	; 0x801552 <_index.1885>
    5c3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5c40:	f0 e0       	ldi	r31, 0x00	; 0
    5c42:	ea 5a       	subi	r30, 0xAA	; 170
    5c44:	fa 4e       	sbci	r31, 0xEA	; 234
    5c46:	80 83       	st	Z, r24
    5c48:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5c4c:	80 34       	cpi	r24, 0x40	; 64
    5c4e:	11 f4       	brne	.+4      	; 0x5c54 <__vector_39+0xbe>
    5c50:	10 92 52 15 	sts	0x1552, r1	; 0x801552 <_index.1885>
    5c54:	20 91 52 15 	lds	r18, 0x1552	; 0x801552 <_index.1885>
    5c58:	30 e0       	ldi	r19, 0x00	; 0
    5c5a:	80 91 55 15 	lds	r24, 0x1555	; 0x801555 <_twiMessageLen>
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	01 97       	sbiw	r24, 0x01	; 1
    5c62:	28 17       	cp	r18, r24
    5c64:	39 07       	cpc	r19, r25
    5c66:	24 f4       	brge	.+8      	; 0x5c70 <__vector_39+0xda>
    5c68:	85 ec       	ldi	r24, 0xC5	; 197
    5c6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c6e:	3d c0       	rjmp	.+122    	; 0x5cea <__vector_39+0x154>
    5c70:	85 e8       	ldi	r24, 0x85	; 133
    5c72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c76:	39 c0       	rjmp	.+114    	; 0x5cea <__vector_39+0x154>
    5c78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5c7c:	e0 91 52 15 	lds	r30, 0x1552	; 0x801552 <_index.1885>
    5c80:	f0 e0       	ldi	r31, 0x00	; 0
    5c82:	ea 5a       	subi	r30, 0xAA	; 170
    5c84:	fa 4e       	sbci	r31, 0xEA	; 234
    5c86:	80 83       	st	Z, r24
    5c88:	84 e9       	ldi	r24, 0x94	; 148
    5c8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c8e:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <_twiCurrentHandler>
    5c92:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <_twiCurrentHandler+0x1>
    5c96:	dc 01       	movw	r26, r24
    5c98:	12 96       	adiw	r26, 0x02	; 2
    5c9a:	ed 91       	ld	r30, X+
    5c9c:	fc 91       	ld	r31, X
    5c9e:	13 97       	sbiw	r26, 0x03	; 3
    5ca0:	30 97       	sbiw	r30, 0x00	; 0
    5ca2:	19 f1       	breq	.+70     	; 0x5cea <__vector_39+0x154>
    5ca4:	20 91 55 15 	lds	r18, 0x1555	; 0x801555 <_twiMessageLen>
    5ca8:	46 e5       	ldi	r20, 0x56	; 86
    5caa:	55 e1       	ldi	r21, 0x15	; 21
    5cac:	65 e0       	ldi	r22, 0x05	; 5
    5cae:	19 95       	eicall
    5cb0:	1c c0       	rjmp	.+56     	; 0x5cea <__vector_39+0x154>
    5cb2:	85 ea       	ldi	r24, 0xA5	; 165
    5cb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cb8:	18 c0       	rjmp	.+48     	; 0x5cea <__vector_39+0x154>
    5cba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5cbe:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5cc2:	84 e0       	ldi	r24, 0x04	; 4
    5cc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cc8:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <_twiCurrentHandler>
    5ccc:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <_twiCurrentHandler+0x1>
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	12 96       	adiw	r26, 0x02	; 2
    5cd4:	ed 91       	ld	r30, X+
    5cd6:	fc 91       	ld	r31, X
    5cd8:	13 97       	sbiw	r26, 0x03	; 3
    5cda:	30 97       	sbiw	r30, 0x00	; 0
    5cdc:	31 f0       	breq	.+12     	; 0x5cea <__vector_39+0x154>
    5cde:	20 e0       	ldi	r18, 0x00	; 0
    5ce0:	40 e0       	ldi	r20, 0x00	; 0
    5ce2:	50 e0       	ldi	r21, 0x00	; 0
    5ce4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5ce8:	19 95       	eicall
    5cea:	ff 91       	pop	r31
    5cec:	ef 91       	pop	r30
    5cee:	bf 91       	pop	r27
    5cf0:	af 91       	pop	r26
    5cf2:	9f 91       	pop	r25
    5cf4:	8f 91       	pop	r24
    5cf6:	7f 91       	pop	r23
    5cf8:	6f 91       	pop	r22
    5cfa:	5f 91       	pop	r21
    5cfc:	4f 91       	pop	r20
    5cfe:	3f 91       	pop	r19
    5d00:	2f 91       	pop	r18
    5d02:	0f 90       	pop	r0
    5d04:	0b be       	out	0x3b, r0	; 59
    5d06:	0f 90       	pop	r0
    5d08:	0f be       	out	0x3f, r0	; 63
    5d0a:	0f 90       	pop	r0
    5d0c:	1f 90       	pop	r1
    5d0e:	18 95       	reti

00005d10 <fifo_init>:
    5d10:	fc 01       	movw	r30, r24
    5d12:	41 11       	cpse	r20, r1
    5d14:	01 c0       	rjmp	.+2      	; 0x5d18 <fifo_init+0x8>
    5d16:	34 d6       	rcall	.+3176   	; 0x6980 <abort>
    5d18:	84 2f       	mov	r24, r20
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	9c 01       	movw	r18, r24
    5d1e:	21 50       	subi	r18, 0x01	; 1
    5d20:	31 09       	sbc	r19, r1
    5d22:	82 23       	and	r24, r18
    5d24:	93 23       	and	r25, r19
    5d26:	89 2b       	or	r24, r25
    5d28:	09 f0       	breq	.+2      	; 0x5d2c <fifo_init+0x1c>
    5d2a:	2a d6       	rcall	.+3156   	; 0x6980 <abort>
    5d2c:	41 38       	cpi	r20, 0x81	; 129
    5d2e:	08 f0       	brcs	.+2      	; 0x5d32 <fifo_init+0x22>
    5d30:	27 d6       	rcall	.+3150   	; 0x6980 <abort>
    5d32:	12 82       	std	Z+2, r1	; 0x02
    5d34:	13 82       	std	Z+3, r1	; 0x03
    5d36:	44 83       	std	Z+4, r20	; 0x04
    5d38:	44 0f       	add	r20, r20
    5d3a:	41 50       	subi	r20, 0x01	; 1
    5d3c:	45 83       	std	Z+5, r20	; 0x05
    5d3e:	71 83       	std	Z+1, r23	; 0x01
    5d40:	60 83       	st	Z, r22
    5d42:	80 e0       	ldi	r24, 0x00	; 0
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	08 95       	ret

00005d48 <vfprintf>:
    5d48:	2f 92       	push	r2
    5d4a:	3f 92       	push	r3
    5d4c:	4f 92       	push	r4
    5d4e:	5f 92       	push	r5
    5d50:	6f 92       	push	r6
    5d52:	7f 92       	push	r7
    5d54:	8f 92       	push	r8
    5d56:	9f 92       	push	r9
    5d58:	af 92       	push	r10
    5d5a:	bf 92       	push	r11
    5d5c:	cf 92       	push	r12
    5d5e:	df 92       	push	r13
    5d60:	ef 92       	push	r14
    5d62:	ff 92       	push	r15
    5d64:	0f 93       	push	r16
    5d66:	1f 93       	push	r17
    5d68:	cf 93       	push	r28
    5d6a:	df 93       	push	r29
    5d6c:	cd b7       	in	r28, 0x3d	; 61
    5d6e:	de b7       	in	r29, 0x3e	; 62
    5d70:	60 97       	sbiw	r28, 0x10	; 16
    5d72:	0f b6       	in	r0, 0x3f	; 63
    5d74:	f8 94       	cli
    5d76:	de bf       	out	0x3e, r29	; 62
    5d78:	0f be       	out	0x3f, r0	; 63
    5d7a:	cd bf       	out	0x3d, r28	; 61
    5d7c:	7c 01       	movw	r14, r24
    5d7e:	1b 01       	movw	r2, r22
    5d80:	6a 01       	movw	r12, r20
    5d82:	fc 01       	movw	r30, r24
    5d84:	17 82       	std	Z+7, r1	; 0x07
    5d86:	16 82       	std	Z+6, r1	; 0x06
    5d88:	83 81       	ldd	r24, Z+3	; 0x03
    5d8a:	81 ff       	sbrs	r24, 1
    5d8c:	2a c3       	rjmp	.+1620   	; 0x63e2 <vfprintf+0x69a>
    5d8e:	9e 01       	movw	r18, r28
    5d90:	2f 5f       	subi	r18, 0xFF	; 255
    5d92:	3f 4f       	sbci	r19, 0xFF	; 255
    5d94:	39 01       	movw	r6, r18
    5d96:	f7 01       	movw	r30, r14
    5d98:	93 81       	ldd	r25, Z+3	; 0x03
    5d9a:	f1 01       	movw	r30, r2
    5d9c:	93 fd       	sbrc	r25, 3
    5d9e:	85 91       	lpm	r24, Z+
    5da0:	93 ff       	sbrs	r25, 3
    5da2:	81 91       	ld	r24, Z+
    5da4:	1f 01       	movw	r2, r30
    5da6:	88 23       	and	r24, r24
    5da8:	09 f4       	brne	.+2      	; 0x5dac <vfprintf+0x64>
    5daa:	17 c3       	rjmp	.+1582   	; 0x63da <vfprintf+0x692>
    5dac:	85 32       	cpi	r24, 0x25	; 37
    5dae:	39 f4       	brne	.+14     	; 0x5dbe <vfprintf+0x76>
    5db0:	93 fd       	sbrc	r25, 3
    5db2:	85 91       	lpm	r24, Z+
    5db4:	93 ff       	sbrs	r25, 3
    5db6:	81 91       	ld	r24, Z+
    5db8:	1f 01       	movw	r2, r30
    5dba:	85 32       	cpi	r24, 0x25	; 37
    5dbc:	31 f4       	brne	.+12     	; 0x5dca <vfprintf+0x82>
    5dbe:	b7 01       	movw	r22, r14
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	2f d7       	rcall	.+3678   	; 0x6c22 <fputc>
    5dc4:	56 01       	movw	r10, r12
    5dc6:	65 01       	movw	r12, r10
    5dc8:	e6 cf       	rjmp	.-52     	; 0x5d96 <vfprintf+0x4e>
    5dca:	10 e0       	ldi	r17, 0x00	; 0
    5dcc:	51 2c       	mov	r5, r1
    5dce:	91 2c       	mov	r9, r1
    5dd0:	ff e1       	ldi	r31, 0x1F	; 31
    5dd2:	f9 15       	cp	r31, r9
    5dd4:	d8 f0       	brcs	.+54     	; 0x5e0c <vfprintf+0xc4>
    5dd6:	8b 32       	cpi	r24, 0x2B	; 43
    5dd8:	79 f0       	breq	.+30     	; 0x5df8 <vfprintf+0xb0>
    5dda:	38 f4       	brcc	.+14     	; 0x5dea <vfprintf+0xa2>
    5ddc:	80 32       	cpi	r24, 0x20	; 32
    5dde:	79 f0       	breq	.+30     	; 0x5dfe <vfprintf+0xb6>
    5de0:	83 32       	cpi	r24, 0x23	; 35
    5de2:	a1 f4       	brne	.+40     	; 0x5e0c <vfprintf+0xc4>
    5de4:	f9 2d       	mov	r31, r9
    5de6:	f0 61       	ori	r31, 0x10	; 16
    5de8:	2e c0       	rjmp	.+92     	; 0x5e46 <vfprintf+0xfe>
    5dea:	8d 32       	cpi	r24, 0x2D	; 45
    5dec:	61 f0       	breq	.+24     	; 0x5e06 <vfprintf+0xbe>
    5dee:	80 33       	cpi	r24, 0x30	; 48
    5df0:	69 f4       	brne	.+26     	; 0x5e0c <vfprintf+0xc4>
    5df2:	29 2d       	mov	r18, r9
    5df4:	21 60       	ori	r18, 0x01	; 1
    5df6:	2d c0       	rjmp	.+90     	; 0x5e52 <vfprintf+0x10a>
    5df8:	39 2d       	mov	r19, r9
    5dfa:	32 60       	ori	r19, 0x02	; 2
    5dfc:	93 2e       	mov	r9, r19
    5dfe:	89 2d       	mov	r24, r9
    5e00:	84 60       	ori	r24, 0x04	; 4
    5e02:	98 2e       	mov	r9, r24
    5e04:	2a c0       	rjmp	.+84     	; 0x5e5a <vfprintf+0x112>
    5e06:	e9 2d       	mov	r30, r9
    5e08:	e8 60       	ori	r30, 0x08	; 8
    5e0a:	15 c0       	rjmp	.+42     	; 0x5e36 <vfprintf+0xee>
    5e0c:	97 fc       	sbrc	r9, 7
    5e0e:	2d c0       	rjmp	.+90     	; 0x5e6a <vfprintf+0x122>
    5e10:	20 ed       	ldi	r18, 0xD0	; 208
    5e12:	28 0f       	add	r18, r24
    5e14:	2a 30       	cpi	r18, 0x0A	; 10
    5e16:	88 f4       	brcc	.+34     	; 0x5e3a <vfprintf+0xf2>
    5e18:	96 fe       	sbrs	r9, 6
    5e1a:	06 c0       	rjmp	.+12     	; 0x5e28 <vfprintf+0xe0>
    5e1c:	3a e0       	ldi	r19, 0x0A	; 10
    5e1e:	13 9f       	mul	r17, r19
    5e20:	20 0d       	add	r18, r0
    5e22:	11 24       	eor	r1, r1
    5e24:	12 2f       	mov	r17, r18
    5e26:	19 c0       	rjmp	.+50     	; 0x5e5a <vfprintf+0x112>
    5e28:	8a e0       	ldi	r24, 0x0A	; 10
    5e2a:	58 9e       	mul	r5, r24
    5e2c:	20 0d       	add	r18, r0
    5e2e:	11 24       	eor	r1, r1
    5e30:	52 2e       	mov	r5, r18
    5e32:	e9 2d       	mov	r30, r9
    5e34:	e0 62       	ori	r30, 0x20	; 32
    5e36:	9e 2e       	mov	r9, r30
    5e38:	10 c0       	rjmp	.+32     	; 0x5e5a <vfprintf+0x112>
    5e3a:	8e 32       	cpi	r24, 0x2E	; 46
    5e3c:	31 f4       	brne	.+12     	; 0x5e4a <vfprintf+0x102>
    5e3e:	96 fc       	sbrc	r9, 6
    5e40:	cc c2       	rjmp	.+1432   	; 0x63da <vfprintf+0x692>
    5e42:	f9 2d       	mov	r31, r9
    5e44:	f0 64       	ori	r31, 0x40	; 64
    5e46:	9f 2e       	mov	r9, r31
    5e48:	08 c0       	rjmp	.+16     	; 0x5e5a <vfprintf+0x112>
    5e4a:	8c 36       	cpi	r24, 0x6C	; 108
    5e4c:	21 f4       	brne	.+8      	; 0x5e56 <vfprintf+0x10e>
    5e4e:	29 2d       	mov	r18, r9
    5e50:	20 68       	ori	r18, 0x80	; 128
    5e52:	92 2e       	mov	r9, r18
    5e54:	02 c0       	rjmp	.+4      	; 0x5e5a <vfprintf+0x112>
    5e56:	88 36       	cpi	r24, 0x68	; 104
    5e58:	41 f4       	brne	.+16     	; 0x5e6a <vfprintf+0x122>
    5e5a:	f1 01       	movw	r30, r2
    5e5c:	93 fd       	sbrc	r25, 3
    5e5e:	85 91       	lpm	r24, Z+
    5e60:	93 ff       	sbrs	r25, 3
    5e62:	81 91       	ld	r24, Z+
    5e64:	1f 01       	movw	r2, r30
    5e66:	81 11       	cpse	r24, r1
    5e68:	b3 cf       	rjmp	.-154    	; 0x5dd0 <vfprintf+0x88>
    5e6a:	9b eb       	ldi	r25, 0xBB	; 187
    5e6c:	98 0f       	add	r25, r24
    5e6e:	93 30       	cpi	r25, 0x03	; 3
    5e70:	20 f4       	brcc	.+8      	; 0x5e7a <vfprintf+0x132>
    5e72:	99 2d       	mov	r25, r9
    5e74:	90 61       	ori	r25, 0x10	; 16
    5e76:	80 5e       	subi	r24, 0xE0	; 224
    5e78:	07 c0       	rjmp	.+14     	; 0x5e88 <vfprintf+0x140>
    5e7a:	9b e9       	ldi	r25, 0x9B	; 155
    5e7c:	98 0f       	add	r25, r24
    5e7e:	93 30       	cpi	r25, 0x03	; 3
    5e80:	08 f0       	brcs	.+2      	; 0x5e84 <vfprintf+0x13c>
    5e82:	59 c1       	rjmp	.+690    	; 0x6136 <vfprintf+0x3ee>
    5e84:	99 2d       	mov	r25, r9
    5e86:	9f 7e       	andi	r25, 0xEF	; 239
    5e88:	96 ff       	sbrs	r25, 6
    5e8a:	16 e0       	ldi	r17, 0x06	; 6
    5e8c:	9f 73       	andi	r25, 0x3F	; 63
    5e8e:	99 2e       	mov	r9, r25
    5e90:	85 36       	cpi	r24, 0x65	; 101
    5e92:	19 f4       	brne	.+6      	; 0x5e9a <vfprintf+0x152>
    5e94:	90 64       	ori	r25, 0x40	; 64
    5e96:	99 2e       	mov	r9, r25
    5e98:	08 c0       	rjmp	.+16     	; 0x5eaa <vfprintf+0x162>
    5e9a:	86 36       	cpi	r24, 0x66	; 102
    5e9c:	21 f4       	brne	.+8      	; 0x5ea6 <vfprintf+0x15e>
    5e9e:	39 2f       	mov	r19, r25
    5ea0:	30 68       	ori	r19, 0x80	; 128
    5ea2:	93 2e       	mov	r9, r19
    5ea4:	02 c0       	rjmp	.+4      	; 0x5eaa <vfprintf+0x162>
    5ea6:	11 11       	cpse	r17, r1
    5ea8:	11 50       	subi	r17, 0x01	; 1
    5eaa:	97 fe       	sbrs	r9, 7
    5eac:	07 c0       	rjmp	.+14     	; 0x5ebc <vfprintf+0x174>
    5eae:	1c 33       	cpi	r17, 0x3C	; 60
    5eb0:	50 f4       	brcc	.+20     	; 0x5ec6 <vfprintf+0x17e>
    5eb2:	44 24       	eor	r4, r4
    5eb4:	43 94       	inc	r4
    5eb6:	41 0e       	add	r4, r17
    5eb8:	27 e0       	ldi	r18, 0x07	; 7
    5eba:	0b c0       	rjmp	.+22     	; 0x5ed2 <vfprintf+0x18a>
    5ebc:	18 30       	cpi	r17, 0x08	; 8
    5ebe:	38 f0       	brcs	.+14     	; 0x5ece <vfprintf+0x186>
    5ec0:	27 e0       	ldi	r18, 0x07	; 7
    5ec2:	17 e0       	ldi	r17, 0x07	; 7
    5ec4:	05 c0       	rjmp	.+10     	; 0x5ed0 <vfprintf+0x188>
    5ec6:	27 e0       	ldi	r18, 0x07	; 7
    5ec8:	9c e3       	ldi	r25, 0x3C	; 60
    5eca:	49 2e       	mov	r4, r25
    5ecc:	02 c0       	rjmp	.+4      	; 0x5ed2 <vfprintf+0x18a>
    5ece:	21 2f       	mov	r18, r17
    5ed0:	41 2c       	mov	r4, r1
    5ed2:	56 01       	movw	r10, r12
    5ed4:	84 e0       	ldi	r24, 0x04	; 4
    5ed6:	a8 0e       	add	r10, r24
    5ed8:	b1 1c       	adc	r11, r1
    5eda:	f6 01       	movw	r30, r12
    5edc:	60 81       	ld	r22, Z
    5ede:	71 81       	ldd	r23, Z+1	; 0x01
    5ee0:	82 81       	ldd	r24, Z+2	; 0x02
    5ee2:	93 81       	ldd	r25, Z+3	; 0x03
    5ee4:	04 2d       	mov	r16, r4
    5ee6:	a3 01       	movw	r20, r6
    5ee8:	4f d5       	rcall	.+2718   	; 0x6988 <__ftoa_engine>
    5eea:	6c 01       	movw	r12, r24
    5eec:	f9 81       	ldd	r31, Y+1	; 0x01
    5eee:	fc 87       	std	Y+12, r31	; 0x0c
    5ef0:	f0 ff       	sbrs	r31, 0
    5ef2:	02 c0       	rjmp	.+4      	; 0x5ef8 <vfprintf+0x1b0>
    5ef4:	f3 ff       	sbrs	r31, 3
    5ef6:	06 c0       	rjmp	.+12     	; 0x5f04 <vfprintf+0x1bc>
    5ef8:	91 fc       	sbrc	r9, 1
    5efa:	06 c0       	rjmp	.+12     	; 0x5f08 <vfprintf+0x1c0>
    5efc:	92 fe       	sbrs	r9, 2
    5efe:	06 c0       	rjmp	.+12     	; 0x5f0c <vfprintf+0x1c4>
    5f00:	00 e2       	ldi	r16, 0x20	; 32
    5f02:	05 c0       	rjmp	.+10     	; 0x5f0e <vfprintf+0x1c6>
    5f04:	0d e2       	ldi	r16, 0x2D	; 45
    5f06:	03 c0       	rjmp	.+6      	; 0x5f0e <vfprintf+0x1c6>
    5f08:	0b e2       	ldi	r16, 0x2B	; 43
    5f0a:	01 c0       	rjmp	.+2      	; 0x5f0e <vfprintf+0x1c6>
    5f0c:	00 e0       	ldi	r16, 0x00	; 0
    5f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f10:	8c 70       	andi	r24, 0x0C	; 12
    5f12:	19 f0       	breq	.+6      	; 0x5f1a <vfprintf+0x1d2>
    5f14:	01 11       	cpse	r16, r1
    5f16:	43 c2       	rjmp	.+1158   	; 0x639e <vfprintf+0x656>
    5f18:	80 c2       	rjmp	.+1280   	; 0x641a <vfprintf+0x6d2>
    5f1a:	97 fe       	sbrs	r9, 7
    5f1c:	10 c0       	rjmp	.+32     	; 0x5f3e <vfprintf+0x1f6>
    5f1e:	4c 0c       	add	r4, r12
    5f20:	fc 85       	ldd	r31, Y+12	; 0x0c
    5f22:	f4 ff       	sbrs	r31, 4
    5f24:	04 c0       	rjmp	.+8      	; 0x5f2e <vfprintf+0x1e6>
    5f26:	8a 81       	ldd	r24, Y+2	; 0x02
    5f28:	81 33       	cpi	r24, 0x31	; 49
    5f2a:	09 f4       	brne	.+2      	; 0x5f2e <vfprintf+0x1e6>
    5f2c:	4a 94       	dec	r4
    5f2e:	14 14       	cp	r1, r4
    5f30:	74 f5       	brge	.+92     	; 0x5f8e <vfprintf+0x246>
    5f32:	28 e0       	ldi	r18, 0x08	; 8
    5f34:	24 15       	cp	r18, r4
    5f36:	78 f5       	brcc	.+94     	; 0x5f96 <vfprintf+0x24e>
    5f38:	88 e0       	ldi	r24, 0x08	; 8
    5f3a:	48 2e       	mov	r4, r24
    5f3c:	2c c0       	rjmp	.+88     	; 0x5f96 <vfprintf+0x24e>
    5f3e:	96 fc       	sbrc	r9, 6
    5f40:	2a c0       	rjmp	.+84     	; 0x5f96 <vfprintf+0x24e>
    5f42:	81 2f       	mov	r24, r17
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	8c 15       	cp	r24, r12
    5f48:	9d 05       	cpc	r25, r13
    5f4a:	9c f0       	brlt	.+38     	; 0x5f72 <vfprintf+0x22a>
    5f4c:	3c ef       	ldi	r19, 0xFC	; 252
    5f4e:	c3 16       	cp	r12, r19
    5f50:	3f ef       	ldi	r19, 0xFF	; 255
    5f52:	d3 06       	cpc	r13, r19
    5f54:	74 f0       	brlt	.+28     	; 0x5f72 <vfprintf+0x22a>
    5f56:	89 2d       	mov	r24, r9
    5f58:	80 68       	ori	r24, 0x80	; 128
    5f5a:	98 2e       	mov	r9, r24
    5f5c:	0a c0       	rjmp	.+20     	; 0x5f72 <vfprintf+0x22a>
    5f5e:	e2 e0       	ldi	r30, 0x02	; 2
    5f60:	f0 e0       	ldi	r31, 0x00	; 0
    5f62:	ec 0f       	add	r30, r28
    5f64:	fd 1f       	adc	r31, r29
    5f66:	e1 0f       	add	r30, r17
    5f68:	f1 1d       	adc	r31, r1
    5f6a:	80 81       	ld	r24, Z
    5f6c:	80 33       	cpi	r24, 0x30	; 48
    5f6e:	19 f4       	brne	.+6      	; 0x5f76 <vfprintf+0x22e>
    5f70:	11 50       	subi	r17, 0x01	; 1
    5f72:	11 11       	cpse	r17, r1
    5f74:	f4 cf       	rjmp	.-24     	; 0x5f5e <vfprintf+0x216>
    5f76:	97 fe       	sbrs	r9, 7
    5f78:	0e c0       	rjmp	.+28     	; 0x5f96 <vfprintf+0x24e>
    5f7a:	44 24       	eor	r4, r4
    5f7c:	43 94       	inc	r4
    5f7e:	41 0e       	add	r4, r17
    5f80:	81 2f       	mov	r24, r17
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	c8 16       	cp	r12, r24
    5f86:	d9 06       	cpc	r13, r25
    5f88:	2c f4       	brge	.+10     	; 0x5f94 <vfprintf+0x24c>
    5f8a:	1c 19       	sub	r17, r12
    5f8c:	04 c0       	rjmp	.+8      	; 0x5f96 <vfprintf+0x24e>
    5f8e:	44 24       	eor	r4, r4
    5f90:	43 94       	inc	r4
    5f92:	01 c0       	rjmp	.+2      	; 0x5f96 <vfprintf+0x24e>
    5f94:	10 e0       	ldi	r17, 0x00	; 0
    5f96:	97 fe       	sbrs	r9, 7
    5f98:	06 c0       	rjmp	.+12     	; 0x5fa6 <vfprintf+0x25e>
    5f9a:	1c 14       	cp	r1, r12
    5f9c:	1d 04       	cpc	r1, r13
    5f9e:	34 f4       	brge	.+12     	; 0x5fac <vfprintf+0x264>
    5fa0:	c6 01       	movw	r24, r12
    5fa2:	01 96       	adiw	r24, 0x01	; 1
    5fa4:	05 c0       	rjmp	.+10     	; 0x5fb0 <vfprintf+0x268>
    5fa6:	85 e0       	ldi	r24, 0x05	; 5
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	02 c0       	rjmp	.+4      	; 0x5fb0 <vfprintf+0x268>
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	01 11       	cpse	r16, r1
    5fb2:	01 96       	adiw	r24, 0x01	; 1
    5fb4:	11 23       	and	r17, r17
    5fb6:	31 f0       	breq	.+12     	; 0x5fc4 <vfprintf+0x27c>
    5fb8:	21 2f       	mov	r18, r17
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	2f 5f       	subi	r18, 0xFF	; 255
    5fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc0:	82 0f       	add	r24, r18
    5fc2:	93 1f       	adc	r25, r19
    5fc4:	25 2d       	mov	r18, r5
    5fc6:	30 e0       	ldi	r19, 0x00	; 0
    5fc8:	82 17       	cp	r24, r18
    5fca:	93 07       	cpc	r25, r19
    5fcc:	14 f4       	brge	.+4      	; 0x5fd2 <vfprintf+0x28a>
    5fce:	58 1a       	sub	r5, r24
    5fd0:	01 c0       	rjmp	.+2      	; 0x5fd4 <vfprintf+0x28c>
    5fd2:	51 2c       	mov	r5, r1
    5fd4:	89 2d       	mov	r24, r9
    5fd6:	89 70       	andi	r24, 0x09	; 9
    5fd8:	41 f4       	brne	.+16     	; 0x5fea <vfprintf+0x2a2>
    5fda:	55 20       	and	r5, r5
    5fdc:	31 f0       	breq	.+12     	; 0x5fea <vfprintf+0x2a2>
    5fde:	b7 01       	movw	r22, r14
    5fe0:	80 e2       	ldi	r24, 0x20	; 32
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	1e d6       	rcall	.+3132   	; 0x6c22 <fputc>
    5fe6:	5a 94       	dec	r5
    5fe8:	f8 cf       	rjmp	.-16     	; 0x5fda <vfprintf+0x292>
    5fea:	00 23       	and	r16, r16
    5fec:	21 f0       	breq	.+8      	; 0x5ff6 <vfprintf+0x2ae>
    5fee:	b7 01       	movw	r22, r14
    5ff0:	80 2f       	mov	r24, r16
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	16 d6       	rcall	.+3116   	; 0x6c22 <fputc>
    5ff6:	93 fc       	sbrc	r9, 3
    5ff8:	08 c0       	rjmp	.+16     	; 0x600a <vfprintf+0x2c2>
    5ffa:	55 20       	and	r5, r5
    5ffc:	31 f0       	breq	.+12     	; 0x600a <vfprintf+0x2c2>
    5ffe:	b7 01       	movw	r22, r14
    6000:	80 e3       	ldi	r24, 0x30	; 48
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	0e d6       	rcall	.+3100   	; 0x6c22 <fputc>
    6006:	5a 94       	dec	r5
    6008:	f8 cf       	rjmp	.-16     	; 0x5ffa <vfprintf+0x2b2>
    600a:	97 fe       	sbrs	r9, 7
    600c:	4a c0       	rjmp	.+148    	; 0x60a2 <vfprintf+0x35a>
    600e:	46 01       	movw	r8, r12
    6010:	d7 fe       	sbrs	r13, 7
    6012:	02 c0       	rjmp	.+4      	; 0x6018 <vfprintf+0x2d0>
    6014:	81 2c       	mov	r8, r1
    6016:	91 2c       	mov	r9, r1
    6018:	c6 01       	movw	r24, r12
    601a:	88 19       	sub	r24, r8
    601c:	99 09       	sbc	r25, r9
    601e:	f3 01       	movw	r30, r6
    6020:	e8 0f       	add	r30, r24
    6022:	f9 1f       	adc	r31, r25
    6024:	fe 87       	std	Y+14, r31	; 0x0e
    6026:	ed 87       	std	Y+13, r30	; 0x0d
    6028:	96 01       	movw	r18, r12
    602a:	24 19       	sub	r18, r4
    602c:	31 09       	sbc	r19, r1
    602e:	38 8b       	std	Y+16, r19	; 0x10
    6030:	2f 87       	std	Y+15, r18	; 0x0f
    6032:	01 2f       	mov	r16, r17
    6034:	10 e0       	ldi	r17, 0x00	; 0
    6036:	11 95       	neg	r17
    6038:	01 95       	neg	r16
    603a:	11 09       	sbc	r17, r1
    603c:	3f ef       	ldi	r19, 0xFF	; 255
    603e:	83 16       	cp	r8, r19
    6040:	93 06       	cpc	r9, r19
    6042:	21 f4       	brne	.+8      	; 0x604c <vfprintf+0x304>
    6044:	b7 01       	movw	r22, r14
    6046:	8e e2       	ldi	r24, 0x2E	; 46
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	eb d5       	rcall	.+3030   	; 0x6c22 <fputc>
    604c:	c8 14       	cp	r12, r8
    604e:	d9 04       	cpc	r13, r9
    6050:	4c f0       	brlt	.+18     	; 0x6064 <vfprintf+0x31c>
    6052:	8f 85       	ldd	r24, Y+15	; 0x0f
    6054:	98 89       	ldd	r25, Y+16	; 0x10
    6056:	88 15       	cp	r24, r8
    6058:	99 05       	cpc	r25, r9
    605a:	24 f4       	brge	.+8      	; 0x6064 <vfprintf+0x31c>
    605c:	ed 85       	ldd	r30, Y+13	; 0x0d
    605e:	fe 85       	ldd	r31, Y+14	; 0x0e
    6060:	81 81       	ldd	r24, Z+1	; 0x01
    6062:	01 c0       	rjmp	.+2      	; 0x6066 <vfprintf+0x31e>
    6064:	80 e3       	ldi	r24, 0x30	; 48
    6066:	f1 e0       	ldi	r31, 0x01	; 1
    6068:	8f 1a       	sub	r8, r31
    606a:	91 08       	sbc	r9, r1
    606c:	2d 85       	ldd	r18, Y+13	; 0x0d
    606e:	3e 85       	ldd	r19, Y+14	; 0x0e
    6070:	2f 5f       	subi	r18, 0xFF	; 255
    6072:	3f 4f       	sbci	r19, 0xFF	; 255
    6074:	3e 87       	std	Y+14, r19	; 0x0e
    6076:	2d 87       	std	Y+13, r18	; 0x0d
    6078:	80 16       	cp	r8, r16
    607a:	91 06       	cpc	r9, r17
    607c:	24 f0       	brlt	.+8      	; 0x6086 <vfprintf+0x33e>
    607e:	b7 01       	movw	r22, r14
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	cf d5       	rcall	.+2974   	; 0x6c22 <fputc>
    6084:	db cf       	rjmp	.-74     	; 0x603c <vfprintf+0x2f4>
    6086:	c8 14       	cp	r12, r8
    6088:	d9 04       	cpc	r13, r9
    608a:	41 f4       	brne	.+16     	; 0x609c <vfprintf+0x354>
    608c:	9a 81       	ldd	r25, Y+2	; 0x02
    608e:	96 33       	cpi	r25, 0x36	; 54
    6090:	20 f4       	brcc	.+8      	; 0x609a <vfprintf+0x352>
    6092:	95 33       	cpi	r25, 0x35	; 53
    6094:	19 f4       	brne	.+6      	; 0x609c <vfprintf+0x354>
    6096:	3c 85       	ldd	r19, Y+12	; 0x0c
    6098:	34 ff       	sbrs	r19, 4
    609a:	81 e3       	ldi	r24, 0x31	; 49
    609c:	b7 01       	movw	r22, r14
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	48 c0       	rjmp	.+144    	; 0x6132 <vfprintf+0x3ea>
    60a2:	8a 81       	ldd	r24, Y+2	; 0x02
    60a4:	81 33       	cpi	r24, 0x31	; 49
    60a6:	19 f0       	breq	.+6      	; 0x60ae <vfprintf+0x366>
    60a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    60aa:	9f 7e       	andi	r25, 0xEF	; 239
    60ac:	9c 87       	std	Y+12, r25	; 0x0c
    60ae:	b7 01       	movw	r22, r14
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	b7 d5       	rcall	.+2926   	; 0x6c22 <fputc>
    60b4:	11 11       	cpse	r17, r1
    60b6:	05 c0       	rjmp	.+10     	; 0x60c2 <vfprintf+0x37a>
    60b8:	94 fc       	sbrc	r9, 4
    60ba:	16 c0       	rjmp	.+44     	; 0x60e8 <vfprintf+0x3a0>
    60bc:	85 e6       	ldi	r24, 0x65	; 101
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	15 c0       	rjmp	.+42     	; 0x60ec <vfprintf+0x3a4>
    60c2:	b7 01       	movw	r22, r14
    60c4:	8e e2       	ldi	r24, 0x2E	; 46
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	ac d5       	rcall	.+2904   	; 0x6c22 <fputc>
    60ca:	1e 5f       	subi	r17, 0xFE	; 254
    60cc:	82 e0       	ldi	r24, 0x02	; 2
    60ce:	01 e0       	ldi	r16, 0x01	; 1
    60d0:	08 0f       	add	r16, r24
    60d2:	f3 01       	movw	r30, r6
    60d4:	e8 0f       	add	r30, r24
    60d6:	f1 1d       	adc	r31, r1
    60d8:	80 81       	ld	r24, Z
    60da:	b7 01       	movw	r22, r14
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	a1 d5       	rcall	.+2882   	; 0x6c22 <fputc>
    60e0:	80 2f       	mov	r24, r16
    60e2:	01 13       	cpse	r16, r17
    60e4:	f4 cf       	rjmp	.-24     	; 0x60ce <vfprintf+0x386>
    60e6:	e8 cf       	rjmp	.-48     	; 0x60b8 <vfprintf+0x370>
    60e8:	85 e4       	ldi	r24, 0x45	; 69
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	b7 01       	movw	r22, r14
    60ee:	99 d5       	rcall	.+2866   	; 0x6c22 <fputc>
    60f0:	d7 fc       	sbrc	r13, 7
    60f2:	06 c0       	rjmp	.+12     	; 0x6100 <vfprintf+0x3b8>
    60f4:	c1 14       	cp	r12, r1
    60f6:	d1 04       	cpc	r13, r1
    60f8:	41 f4       	brne	.+16     	; 0x610a <vfprintf+0x3c2>
    60fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    60fc:	e4 ff       	sbrs	r30, 4
    60fe:	05 c0       	rjmp	.+10     	; 0x610a <vfprintf+0x3c2>
    6100:	d1 94       	neg	r13
    6102:	c1 94       	neg	r12
    6104:	d1 08       	sbc	r13, r1
    6106:	8d e2       	ldi	r24, 0x2D	; 45
    6108:	01 c0       	rjmp	.+2      	; 0x610c <vfprintf+0x3c4>
    610a:	8b e2       	ldi	r24, 0x2B	; 43
    610c:	b7 01       	movw	r22, r14
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	88 d5       	rcall	.+2832   	; 0x6c22 <fputc>
    6112:	80 e3       	ldi	r24, 0x30	; 48
    6114:	2a e0       	ldi	r18, 0x0A	; 10
    6116:	c2 16       	cp	r12, r18
    6118:	d1 04       	cpc	r13, r1
    611a:	2c f0       	brlt	.+10     	; 0x6126 <vfprintf+0x3de>
    611c:	8f 5f       	subi	r24, 0xFF	; 255
    611e:	fa e0       	ldi	r31, 0x0A	; 10
    6120:	cf 1a       	sub	r12, r31
    6122:	d1 08       	sbc	r13, r1
    6124:	f7 cf       	rjmp	.-18     	; 0x6114 <vfprintf+0x3cc>
    6126:	b7 01       	movw	r22, r14
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	7b d5       	rcall	.+2806   	; 0x6c22 <fputc>
    612c:	b7 01       	movw	r22, r14
    612e:	c6 01       	movw	r24, r12
    6130:	c0 96       	adiw	r24, 0x30	; 48
    6132:	77 d5       	rcall	.+2798   	; 0x6c22 <fputc>
    6134:	49 c1       	rjmp	.+658    	; 0x63c8 <vfprintf+0x680>
    6136:	83 36       	cpi	r24, 0x63	; 99
    6138:	31 f0       	breq	.+12     	; 0x6146 <vfprintf+0x3fe>
    613a:	83 37       	cpi	r24, 0x73	; 115
    613c:	79 f0       	breq	.+30     	; 0x615c <vfprintf+0x414>
    613e:	83 35       	cpi	r24, 0x53	; 83
    6140:	09 f0       	breq	.+2      	; 0x6144 <vfprintf+0x3fc>
    6142:	52 c0       	rjmp	.+164    	; 0x61e8 <vfprintf+0x4a0>
    6144:	1f c0       	rjmp	.+62     	; 0x6184 <vfprintf+0x43c>
    6146:	56 01       	movw	r10, r12
    6148:	32 e0       	ldi	r19, 0x02	; 2
    614a:	a3 0e       	add	r10, r19
    614c:	b1 1c       	adc	r11, r1
    614e:	f6 01       	movw	r30, r12
    6150:	80 81       	ld	r24, Z
    6152:	89 83       	std	Y+1, r24	; 0x01
    6154:	01 e0       	ldi	r16, 0x01	; 1
    6156:	10 e0       	ldi	r17, 0x00	; 0
    6158:	63 01       	movw	r12, r6
    615a:	11 c0       	rjmp	.+34     	; 0x617e <vfprintf+0x436>
    615c:	56 01       	movw	r10, r12
    615e:	f2 e0       	ldi	r31, 0x02	; 2
    6160:	af 0e       	add	r10, r31
    6162:	b1 1c       	adc	r11, r1
    6164:	f6 01       	movw	r30, r12
    6166:	c0 80       	ld	r12, Z
    6168:	d1 80       	ldd	r13, Z+1	; 0x01
    616a:	96 fe       	sbrs	r9, 6
    616c:	03 c0       	rjmp	.+6      	; 0x6174 <vfprintf+0x42c>
    616e:	61 2f       	mov	r22, r17
    6170:	70 e0       	ldi	r23, 0x00	; 0
    6172:	02 c0       	rjmp	.+4      	; 0x6178 <vfprintf+0x430>
    6174:	6f ef       	ldi	r22, 0xFF	; 255
    6176:	7f ef       	ldi	r23, 0xFF	; 255
    6178:	c6 01       	movw	r24, r12
    617a:	48 d5       	rcall	.+2704   	; 0x6c0c <strnlen>
    617c:	8c 01       	movw	r16, r24
    617e:	f9 2d       	mov	r31, r9
    6180:	ff 77       	andi	r31, 0x7F	; 127
    6182:	13 c0       	rjmp	.+38     	; 0x61aa <vfprintf+0x462>
    6184:	56 01       	movw	r10, r12
    6186:	22 e0       	ldi	r18, 0x02	; 2
    6188:	a2 0e       	add	r10, r18
    618a:	b1 1c       	adc	r11, r1
    618c:	f6 01       	movw	r30, r12
    618e:	c0 80       	ld	r12, Z
    6190:	d1 80       	ldd	r13, Z+1	; 0x01
    6192:	96 fe       	sbrs	r9, 6
    6194:	03 c0       	rjmp	.+6      	; 0x619c <vfprintf+0x454>
    6196:	61 2f       	mov	r22, r17
    6198:	70 e0       	ldi	r23, 0x00	; 0
    619a:	02 c0       	rjmp	.+4      	; 0x61a0 <vfprintf+0x458>
    619c:	6f ef       	ldi	r22, 0xFF	; 255
    619e:	7f ef       	ldi	r23, 0xFF	; 255
    61a0:	c6 01       	movw	r24, r12
    61a2:	ca d4       	rcall	.+2452   	; 0x6b38 <strnlen_P>
    61a4:	8c 01       	movw	r16, r24
    61a6:	f9 2d       	mov	r31, r9
    61a8:	f0 68       	ori	r31, 0x80	; 128
    61aa:	9f 2e       	mov	r9, r31
    61ac:	f3 fd       	sbrc	r31, 3
    61ae:	18 c0       	rjmp	.+48     	; 0x61e0 <vfprintf+0x498>
    61b0:	85 2d       	mov	r24, r5
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	08 17       	cp	r16, r24
    61b6:	19 07       	cpc	r17, r25
    61b8:	98 f4       	brcc	.+38     	; 0x61e0 <vfprintf+0x498>
    61ba:	b7 01       	movw	r22, r14
    61bc:	80 e2       	ldi	r24, 0x20	; 32
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	30 d5       	rcall	.+2656   	; 0x6c22 <fputc>
    61c2:	5a 94       	dec	r5
    61c4:	f5 cf       	rjmp	.-22     	; 0x61b0 <vfprintf+0x468>
    61c6:	f6 01       	movw	r30, r12
    61c8:	97 fc       	sbrc	r9, 7
    61ca:	85 91       	lpm	r24, Z+
    61cc:	97 fe       	sbrs	r9, 7
    61ce:	81 91       	ld	r24, Z+
    61d0:	6f 01       	movw	r12, r30
    61d2:	b7 01       	movw	r22, r14
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	25 d5       	rcall	.+2634   	; 0x6c22 <fputc>
    61d8:	51 10       	cpse	r5, r1
    61da:	5a 94       	dec	r5
    61dc:	01 50       	subi	r16, 0x01	; 1
    61de:	11 09       	sbc	r17, r1
    61e0:	01 15       	cp	r16, r1
    61e2:	11 05       	cpc	r17, r1
    61e4:	81 f7       	brne	.-32     	; 0x61c6 <vfprintf+0x47e>
    61e6:	f0 c0       	rjmp	.+480    	; 0x63c8 <vfprintf+0x680>
    61e8:	84 36       	cpi	r24, 0x64	; 100
    61ea:	11 f0       	breq	.+4      	; 0x61f0 <vfprintf+0x4a8>
    61ec:	89 36       	cpi	r24, 0x69	; 105
    61ee:	59 f5       	brne	.+86     	; 0x6246 <vfprintf+0x4fe>
    61f0:	56 01       	movw	r10, r12
    61f2:	97 fe       	sbrs	r9, 7
    61f4:	09 c0       	rjmp	.+18     	; 0x6208 <vfprintf+0x4c0>
    61f6:	24 e0       	ldi	r18, 0x04	; 4
    61f8:	a2 0e       	add	r10, r18
    61fa:	b1 1c       	adc	r11, r1
    61fc:	f6 01       	movw	r30, r12
    61fe:	60 81       	ld	r22, Z
    6200:	71 81       	ldd	r23, Z+1	; 0x01
    6202:	82 81       	ldd	r24, Z+2	; 0x02
    6204:	93 81       	ldd	r25, Z+3	; 0x03
    6206:	0a c0       	rjmp	.+20     	; 0x621c <vfprintf+0x4d4>
    6208:	f2 e0       	ldi	r31, 0x02	; 2
    620a:	af 0e       	add	r10, r31
    620c:	b1 1c       	adc	r11, r1
    620e:	f6 01       	movw	r30, r12
    6210:	60 81       	ld	r22, Z
    6212:	71 81       	ldd	r23, Z+1	; 0x01
    6214:	07 2e       	mov	r0, r23
    6216:	00 0c       	add	r0, r0
    6218:	88 0b       	sbc	r24, r24
    621a:	99 0b       	sbc	r25, r25
    621c:	f9 2d       	mov	r31, r9
    621e:	ff 76       	andi	r31, 0x6F	; 111
    6220:	9f 2e       	mov	r9, r31
    6222:	97 ff       	sbrs	r25, 7
    6224:	09 c0       	rjmp	.+18     	; 0x6238 <vfprintf+0x4f0>
    6226:	90 95       	com	r25
    6228:	80 95       	com	r24
    622a:	70 95       	com	r23
    622c:	61 95       	neg	r22
    622e:	7f 4f       	sbci	r23, 0xFF	; 255
    6230:	8f 4f       	sbci	r24, 0xFF	; 255
    6232:	9f 4f       	sbci	r25, 0xFF	; 255
    6234:	f0 68       	ori	r31, 0x80	; 128
    6236:	9f 2e       	mov	r9, r31
    6238:	2a e0       	ldi	r18, 0x0A	; 10
    623a:	30 e0       	ldi	r19, 0x00	; 0
    623c:	a3 01       	movw	r20, r6
    623e:	67 d5       	rcall	.+2766   	; 0x6d0e <__ultoa_invert>
    6240:	c8 2e       	mov	r12, r24
    6242:	c6 18       	sub	r12, r6
    6244:	3e c0       	rjmp	.+124    	; 0x62c2 <vfprintf+0x57a>
    6246:	09 2d       	mov	r16, r9
    6248:	85 37       	cpi	r24, 0x75	; 117
    624a:	21 f4       	brne	.+8      	; 0x6254 <vfprintf+0x50c>
    624c:	0f 7e       	andi	r16, 0xEF	; 239
    624e:	2a e0       	ldi	r18, 0x0A	; 10
    6250:	30 e0       	ldi	r19, 0x00	; 0
    6252:	1d c0       	rjmp	.+58     	; 0x628e <vfprintf+0x546>
    6254:	09 7f       	andi	r16, 0xF9	; 249
    6256:	8f 36       	cpi	r24, 0x6F	; 111
    6258:	91 f0       	breq	.+36     	; 0x627e <vfprintf+0x536>
    625a:	18 f4       	brcc	.+6      	; 0x6262 <vfprintf+0x51a>
    625c:	88 35       	cpi	r24, 0x58	; 88
    625e:	59 f0       	breq	.+22     	; 0x6276 <vfprintf+0x52e>
    6260:	bc c0       	rjmp	.+376    	; 0x63da <vfprintf+0x692>
    6262:	80 37       	cpi	r24, 0x70	; 112
    6264:	19 f0       	breq	.+6      	; 0x626c <vfprintf+0x524>
    6266:	88 37       	cpi	r24, 0x78	; 120
    6268:	11 f0       	breq	.+4      	; 0x626e <vfprintf+0x526>
    626a:	b7 c0       	rjmp	.+366    	; 0x63da <vfprintf+0x692>
    626c:	00 61       	ori	r16, 0x10	; 16
    626e:	04 ff       	sbrs	r16, 4
    6270:	09 c0       	rjmp	.+18     	; 0x6284 <vfprintf+0x53c>
    6272:	04 60       	ori	r16, 0x04	; 4
    6274:	07 c0       	rjmp	.+14     	; 0x6284 <vfprintf+0x53c>
    6276:	94 fe       	sbrs	r9, 4
    6278:	08 c0       	rjmp	.+16     	; 0x628a <vfprintf+0x542>
    627a:	06 60       	ori	r16, 0x06	; 6
    627c:	06 c0       	rjmp	.+12     	; 0x628a <vfprintf+0x542>
    627e:	28 e0       	ldi	r18, 0x08	; 8
    6280:	30 e0       	ldi	r19, 0x00	; 0
    6282:	05 c0       	rjmp	.+10     	; 0x628e <vfprintf+0x546>
    6284:	20 e1       	ldi	r18, 0x10	; 16
    6286:	30 e0       	ldi	r19, 0x00	; 0
    6288:	02 c0       	rjmp	.+4      	; 0x628e <vfprintf+0x546>
    628a:	20 e1       	ldi	r18, 0x10	; 16
    628c:	32 e0       	ldi	r19, 0x02	; 2
    628e:	56 01       	movw	r10, r12
    6290:	07 ff       	sbrs	r16, 7
    6292:	09 c0       	rjmp	.+18     	; 0x62a6 <vfprintf+0x55e>
    6294:	84 e0       	ldi	r24, 0x04	; 4
    6296:	a8 0e       	add	r10, r24
    6298:	b1 1c       	adc	r11, r1
    629a:	f6 01       	movw	r30, r12
    629c:	60 81       	ld	r22, Z
    629e:	71 81       	ldd	r23, Z+1	; 0x01
    62a0:	82 81       	ldd	r24, Z+2	; 0x02
    62a2:	93 81       	ldd	r25, Z+3	; 0x03
    62a4:	08 c0       	rjmp	.+16     	; 0x62b6 <vfprintf+0x56e>
    62a6:	f2 e0       	ldi	r31, 0x02	; 2
    62a8:	af 0e       	add	r10, r31
    62aa:	b1 1c       	adc	r11, r1
    62ac:	f6 01       	movw	r30, r12
    62ae:	60 81       	ld	r22, Z
    62b0:	71 81       	ldd	r23, Z+1	; 0x01
    62b2:	80 e0       	ldi	r24, 0x00	; 0
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	a3 01       	movw	r20, r6
    62b8:	2a d5       	rcall	.+2644   	; 0x6d0e <__ultoa_invert>
    62ba:	c8 2e       	mov	r12, r24
    62bc:	c6 18       	sub	r12, r6
    62be:	0f 77       	andi	r16, 0x7F	; 127
    62c0:	90 2e       	mov	r9, r16
    62c2:	96 fe       	sbrs	r9, 6
    62c4:	0b c0       	rjmp	.+22     	; 0x62dc <vfprintf+0x594>
    62c6:	09 2d       	mov	r16, r9
    62c8:	0e 7f       	andi	r16, 0xFE	; 254
    62ca:	c1 16       	cp	r12, r17
    62cc:	50 f4       	brcc	.+20     	; 0x62e2 <vfprintf+0x59a>
    62ce:	94 fe       	sbrs	r9, 4
    62d0:	0a c0       	rjmp	.+20     	; 0x62e6 <vfprintf+0x59e>
    62d2:	92 fc       	sbrc	r9, 2
    62d4:	08 c0       	rjmp	.+16     	; 0x62e6 <vfprintf+0x59e>
    62d6:	09 2d       	mov	r16, r9
    62d8:	0e 7e       	andi	r16, 0xEE	; 238
    62da:	05 c0       	rjmp	.+10     	; 0x62e6 <vfprintf+0x59e>
    62dc:	dc 2c       	mov	r13, r12
    62de:	09 2d       	mov	r16, r9
    62e0:	03 c0       	rjmp	.+6      	; 0x62e8 <vfprintf+0x5a0>
    62e2:	dc 2c       	mov	r13, r12
    62e4:	01 c0       	rjmp	.+2      	; 0x62e8 <vfprintf+0x5a0>
    62e6:	d1 2e       	mov	r13, r17
    62e8:	04 ff       	sbrs	r16, 4
    62ea:	0d c0       	rjmp	.+26     	; 0x6306 <vfprintf+0x5be>
    62ec:	fe 01       	movw	r30, r28
    62ee:	ec 0d       	add	r30, r12
    62f0:	f1 1d       	adc	r31, r1
    62f2:	80 81       	ld	r24, Z
    62f4:	80 33       	cpi	r24, 0x30	; 48
    62f6:	11 f4       	brne	.+4      	; 0x62fc <vfprintf+0x5b4>
    62f8:	09 7e       	andi	r16, 0xE9	; 233
    62fa:	09 c0       	rjmp	.+18     	; 0x630e <vfprintf+0x5c6>
    62fc:	02 ff       	sbrs	r16, 2
    62fe:	06 c0       	rjmp	.+12     	; 0x630c <vfprintf+0x5c4>
    6300:	d3 94       	inc	r13
    6302:	d3 94       	inc	r13
    6304:	04 c0       	rjmp	.+8      	; 0x630e <vfprintf+0x5c6>
    6306:	80 2f       	mov	r24, r16
    6308:	86 78       	andi	r24, 0x86	; 134
    630a:	09 f0       	breq	.+2      	; 0x630e <vfprintf+0x5c6>
    630c:	d3 94       	inc	r13
    630e:	03 fd       	sbrc	r16, 3
    6310:	10 c0       	rjmp	.+32     	; 0x6332 <vfprintf+0x5ea>
    6312:	00 ff       	sbrs	r16, 0
    6314:	06 c0       	rjmp	.+12     	; 0x6322 <vfprintf+0x5da>
    6316:	1c 2d       	mov	r17, r12
    6318:	d5 14       	cp	r13, r5
    631a:	78 f4       	brcc	.+30     	; 0x633a <vfprintf+0x5f2>
    631c:	15 0d       	add	r17, r5
    631e:	1d 19       	sub	r17, r13
    6320:	0c c0       	rjmp	.+24     	; 0x633a <vfprintf+0x5f2>
    6322:	d5 14       	cp	r13, r5
    6324:	50 f4       	brcc	.+20     	; 0x633a <vfprintf+0x5f2>
    6326:	b7 01       	movw	r22, r14
    6328:	80 e2       	ldi	r24, 0x20	; 32
    632a:	90 e0       	ldi	r25, 0x00	; 0
    632c:	7a d4       	rcall	.+2292   	; 0x6c22 <fputc>
    632e:	d3 94       	inc	r13
    6330:	f8 cf       	rjmp	.-16     	; 0x6322 <vfprintf+0x5da>
    6332:	d5 14       	cp	r13, r5
    6334:	10 f4       	brcc	.+4      	; 0x633a <vfprintf+0x5f2>
    6336:	5d 18       	sub	r5, r13
    6338:	01 c0       	rjmp	.+2      	; 0x633c <vfprintf+0x5f4>
    633a:	51 2c       	mov	r5, r1
    633c:	04 ff       	sbrs	r16, 4
    633e:	0f c0       	rjmp	.+30     	; 0x635e <vfprintf+0x616>
    6340:	b7 01       	movw	r22, r14
    6342:	80 e3       	ldi	r24, 0x30	; 48
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	6d d4       	rcall	.+2266   	; 0x6c22 <fputc>
    6348:	02 ff       	sbrs	r16, 2
    634a:	16 c0       	rjmp	.+44     	; 0x6378 <vfprintf+0x630>
    634c:	01 fd       	sbrc	r16, 1
    634e:	03 c0       	rjmp	.+6      	; 0x6356 <vfprintf+0x60e>
    6350:	88 e7       	ldi	r24, 0x78	; 120
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	02 c0       	rjmp	.+4      	; 0x635a <vfprintf+0x612>
    6356:	88 e5       	ldi	r24, 0x58	; 88
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	b7 01       	movw	r22, r14
    635c:	0c c0       	rjmp	.+24     	; 0x6376 <vfprintf+0x62e>
    635e:	80 2f       	mov	r24, r16
    6360:	86 78       	andi	r24, 0x86	; 134
    6362:	51 f0       	breq	.+20     	; 0x6378 <vfprintf+0x630>
    6364:	01 ff       	sbrs	r16, 1
    6366:	02 c0       	rjmp	.+4      	; 0x636c <vfprintf+0x624>
    6368:	8b e2       	ldi	r24, 0x2B	; 43
    636a:	01 c0       	rjmp	.+2      	; 0x636e <vfprintf+0x626>
    636c:	80 e2       	ldi	r24, 0x20	; 32
    636e:	07 fd       	sbrc	r16, 7
    6370:	8d e2       	ldi	r24, 0x2D	; 45
    6372:	b7 01       	movw	r22, r14
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	55 d4       	rcall	.+2218   	; 0x6c22 <fputc>
    6378:	c1 16       	cp	r12, r17
    637a:	30 f4       	brcc	.+12     	; 0x6388 <vfprintf+0x640>
    637c:	b7 01       	movw	r22, r14
    637e:	80 e3       	ldi	r24, 0x30	; 48
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	4f d4       	rcall	.+2206   	; 0x6c22 <fputc>
    6384:	11 50       	subi	r17, 0x01	; 1
    6386:	f8 cf       	rjmp	.-16     	; 0x6378 <vfprintf+0x630>
    6388:	ca 94       	dec	r12
    638a:	f3 01       	movw	r30, r6
    638c:	ec 0d       	add	r30, r12
    638e:	f1 1d       	adc	r31, r1
    6390:	80 81       	ld	r24, Z
    6392:	b7 01       	movw	r22, r14
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	45 d4       	rcall	.+2186   	; 0x6c22 <fputc>
    6398:	c1 10       	cpse	r12, r1
    639a:	f6 cf       	rjmp	.-20     	; 0x6388 <vfprintf+0x640>
    639c:	15 c0       	rjmp	.+42     	; 0x63c8 <vfprintf+0x680>
    639e:	f4 e0       	ldi	r31, 0x04	; 4
    63a0:	f5 15       	cp	r31, r5
    63a2:	50 f5       	brcc	.+84     	; 0x63f8 <vfprintf+0x6b0>
    63a4:	84 e0       	ldi	r24, 0x04	; 4
    63a6:	58 1a       	sub	r5, r24
    63a8:	93 fe       	sbrs	r9, 3
    63aa:	1e c0       	rjmp	.+60     	; 0x63e8 <vfprintf+0x6a0>
    63ac:	01 11       	cpse	r16, r1
    63ae:	25 c0       	rjmp	.+74     	; 0x63fa <vfprintf+0x6b2>
    63b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    63b2:	23 ff       	sbrs	r18, 3
    63b4:	27 c0       	rjmp	.+78     	; 0x6404 <vfprintf+0x6bc>
    63b6:	0a e9       	ldi	r16, 0x9A	; 154
    63b8:	11 e0       	ldi	r17, 0x01	; 1
    63ba:	39 2d       	mov	r19, r9
    63bc:	30 71       	andi	r19, 0x10	; 16
    63be:	93 2e       	mov	r9, r19
    63c0:	f8 01       	movw	r30, r16
    63c2:	84 91       	lpm	r24, Z
    63c4:	81 11       	cpse	r24, r1
    63c6:	21 c0       	rjmp	.+66     	; 0x640a <vfprintf+0x6c2>
    63c8:	55 20       	and	r5, r5
    63ca:	09 f4       	brne	.+2      	; 0x63ce <vfprintf+0x686>
    63cc:	fc cc       	rjmp	.-1544   	; 0x5dc6 <vfprintf+0x7e>
    63ce:	b7 01       	movw	r22, r14
    63d0:	80 e2       	ldi	r24, 0x20	; 32
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	26 d4       	rcall	.+2124   	; 0x6c22 <fputc>
    63d6:	5a 94       	dec	r5
    63d8:	f7 cf       	rjmp	.-18     	; 0x63c8 <vfprintf+0x680>
    63da:	f7 01       	movw	r30, r14
    63dc:	86 81       	ldd	r24, Z+6	; 0x06
    63de:	97 81       	ldd	r25, Z+7	; 0x07
    63e0:	23 c0       	rjmp	.+70     	; 0x6428 <vfprintf+0x6e0>
    63e2:	8f ef       	ldi	r24, 0xFF	; 255
    63e4:	9f ef       	ldi	r25, 0xFF	; 255
    63e6:	20 c0       	rjmp	.+64     	; 0x6428 <vfprintf+0x6e0>
    63e8:	b7 01       	movw	r22, r14
    63ea:	80 e2       	ldi	r24, 0x20	; 32
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	19 d4       	rcall	.+2098   	; 0x6c22 <fputc>
    63f0:	5a 94       	dec	r5
    63f2:	51 10       	cpse	r5, r1
    63f4:	f9 cf       	rjmp	.-14     	; 0x63e8 <vfprintf+0x6a0>
    63f6:	da cf       	rjmp	.-76     	; 0x63ac <vfprintf+0x664>
    63f8:	51 2c       	mov	r5, r1
    63fa:	b7 01       	movw	r22, r14
    63fc:	80 2f       	mov	r24, r16
    63fe:	90 e0       	ldi	r25, 0x00	; 0
    6400:	10 d4       	rcall	.+2080   	; 0x6c22 <fputc>
    6402:	d6 cf       	rjmp	.-84     	; 0x63b0 <vfprintf+0x668>
    6404:	0e e9       	ldi	r16, 0x9E	; 158
    6406:	11 e0       	ldi	r17, 0x01	; 1
    6408:	d8 cf       	rjmp	.-80     	; 0x63ba <vfprintf+0x672>
    640a:	91 10       	cpse	r9, r1
    640c:	80 52       	subi	r24, 0x20	; 32
    640e:	b7 01       	movw	r22, r14
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	07 d4       	rcall	.+2062   	; 0x6c22 <fputc>
    6414:	0f 5f       	subi	r16, 0xFF	; 255
    6416:	1f 4f       	sbci	r17, 0xFF	; 255
    6418:	d3 cf       	rjmp	.-90     	; 0x63c0 <vfprintf+0x678>
    641a:	23 e0       	ldi	r18, 0x03	; 3
    641c:	25 15       	cp	r18, r5
    641e:	10 f4       	brcc	.+4      	; 0x6424 <vfprintf+0x6dc>
    6420:	83 e0       	ldi	r24, 0x03	; 3
    6422:	c1 cf       	rjmp	.-126    	; 0x63a6 <vfprintf+0x65e>
    6424:	51 2c       	mov	r5, r1
    6426:	c4 cf       	rjmp	.-120    	; 0x63b0 <vfprintf+0x668>
    6428:	60 96       	adiw	r28, 0x10	; 16
    642a:	0f b6       	in	r0, 0x3f	; 63
    642c:	f8 94       	cli
    642e:	de bf       	out	0x3e, r29	; 62
    6430:	0f be       	out	0x3f, r0	; 63
    6432:	cd bf       	out	0x3d, r28	; 61
    6434:	df 91       	pop	r29
    6436:	cf 91       	pop	r28
    6438:	1f 91       	pop	r17
    643a:	0f 91       	pop	r16
    643c:	ff 90       	pop	r15
    643e:	ef 90       	pop	r14
    6440:	df 90       	pop	r13
    6442:	cf 90       	pop	r12
    6444:	bf 90       	pop	r11
    6446:	af 90       	pop	r10
    6448:	9f 90       	pop	r9
    644a:	8f 90       	pop	r8
    644c:	7f 90       	pop	r7
    644e:	6f 90       	pop	r6
    6450:	5f 90       	pop	r5
    6452:	4f 90       	pop	r4
    6454:	3f 90       	pop	r3
    6456:	2f 90       	pop	r2
    6458:	08 95       	ret

0000645a <__divsf3>:
    645a:	12 d0       	rcall	.+36     	; 0x6480 <__divsf3x>
    645c:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__fp_round>
    6460:	0e 94 bc 22 	call	0x4578	; 0x4578 <__fp_pscB>
    6464:	58 f0       	brcs	.+22     	; 0x647c <__divsf3+0x22>
    6466:	0e 94 b5 22 	call	0x456a	; 0x456a <__fp_pscA>
    646a:	40 f0       	brcs	.+16     	; 0x647c <__divsf3+0x22>
    646c:	29 f4       	brne	.+10     	; 0x6478 <__divsf3+0x1e>
    646e:	5f 3f       	cpi	r21, 0xFF	; 255
    6470:	29 f0       	breq	.+10     	; 0x647c <__divsf3+0x22>
    6472:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__fp_inf>
    6476:	51 11       	cpse	r21, r1
    6478:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__fp_szero>
    647c:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__fp_nan>

00006480 <__divsf3x>:
    6480:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <__fp_split3>
    6484:	68 f3       	brcs	.-38     	; 0x6460 <__divsf3+0x6>

00006486 <__divsf3_pse>:
    6486:	99 23       	and	r25, r25
    6488:	b1 f3       	breq	.-20     	; 0x6476 <__divsf3+0x1c>
    648a:	55 23       	and	r21, r21
    648c:	91 f3       	breq	.-28     	; 0x6472 <__divsf3+0x18>
    648e:	95 1b       	sub	r25, r21
    6490:	55 0b       	sbc	r21, r21
    6492:	bb 27       	eor	r27, r27
    6494:	aa 27       	eor	r26, r26
    6496:	62 17       	cp	r22, r18
    6498:	73 07       	cpc	r23, r19
    649a:	84 07       	cpc	r24, r20
    649c:	38 f0       	brcs	.+14     	; 0x64ac <__divsf3_pse+0x26>
    649e:	9f 5f       	subi	r25, 0xFF	; 255
    64a0:	5f 4f       	sbci	r21, 0xFF	; 255
    64a2:	22 0f       	add	r18, r18
    64a4:	33 1f       	adc	r19, r19
    64a6:	44 1f       	adc	r20, r20
    64a8:	aa 1f       	adc	r26, r26
    64aa:	a9 f3       	breq	.-22     	; 0x6496 <__divsf3_pse+0x10>
    64ac:	35 d0       	rcall	.+106    	; 0x6518 <__divsf3_pse+0x92>
    64ae:	0e 2e       	mov	r0, r30
    64b0:	3a f0       	brmi	.+14     	; 0x64c0 <__divsf3_pse+0x3a>
    64b2:	e0 e8       	ldi	r30, 0x80	; 128
    64b4:	32 d0       	rcall	.+100    	; 0x651a <__divsf3_pse+0x94>
    64b6:	91 50       	subi	r25, 0x01	; 1
    64b8:	50 40       	sbci	r21, 0x00	; 0
    64ba:	e6 95       	lsr	r30
    64bc:	00 1c       	adc	r0, r0
    64be:	ca f7       	brpl	.-14     	; 0x64b2 <__divsf3_pse+0x2c>
    64c0:	2b d0       	rcall	.+86     	; 0x6518 <__divsf3_pse+0x92>
    64c2:	fe 2f       	mov	r31, r30
    64c4:	29 d0       	rcall	.+82     	; 0x6518 <__divsf3_pse+0x92>
    64c6:	66 0f       	add	r22, r22
    64c8:	77 1f       	adc	r23, r23
    64ca:	88 1f       	adc	r24, r24
    64cc:	bb 1f       	adc	r27, r27
    64ce:	26 17       	cp	r18, r22
    64d0:	37 07       	cpc	r19, r23
    64d2:	48 07       	cpc	r20, r24
    64d4:	ab 07       	cpc	r26, r27
    64d6:	b0 e8       	ldi	r27, 0x80	; 128
    64d8:	09 f0       	breq	.+2      	; 0x64dc <__divsf3_pse+0x56>
    64da:	bb 0b       	sbc	r27, r27
    64dc:	80 2d       	mov	r24, r0
    64de:	bf 01       	movw	r22, r30
    64e0:	ff 27       	eor	r31, r31
    64e2:	93 58       	subi	r25, 0x83	; 131
    64e4:	5f 4f       	sbci	r21, 0xFF	; 255
    64e6:	3a f0       	brmi	.+14     	; 0x64f6 <__divsf3_pse+0x70>
    64e8:	9e 3f       	cpi	r25, 0xFE	; 254
    64ea:	51 05       	cpc	r21, r1
    64ec:	78 f0       	brcs	.+30     	; 0x650c <__divsf3_pse+0x86>
    64ee:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__fp_inf>
    64f2:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__fp_szero>
    64f6:	5f 3f       	cpi	r21, 0xFF	; 255
    64f8:	e4 f3       	brlt	.-8      	; 0x64f2 <__divsf3_pse+0x6c>
    64fa:	98 3e       	cpi	r25, 0xE8	; 232
    64fc:	d4 f3       	brlt	.-12     	; 0x64f2 <__divsf3_pse+0x6c>
    64fe:	86 95       	lsr	r24
    6500:	77 95       	ror	r23
    6502:	67 95       	ror	r22
    6504:	b7 95       	ror	r27
    6506:	f7 95       	ror	r31
    6508:	9f 5f       	subi	r25, 0xFF	; 255
    650a:	c9 f7       	brne	.-14     	; 0x64fe <__divsf3_pse+0x78>
    650c:	88 0f       	add	r24, r24
    650e:	91 1d       	adc	r25, r1
    6510:	96 95       	lsr	r25
    6512:	87 95       	ror	r24
    6514:	97 f9       	bld	r25, 7
    6516:	08 95       	ret
    6518:	e1 e0       	ldi	r30, 0x01	; 1
    651a:	66 0f       	add	r22, r22
    651c:	77 1f       	adc	r23, r23
    651e:	88 1f       	adc	r24, r24
    6520:	bb 1f       	adc	r27, r27
    6522:	62 17       	cp	r22, r18
    6524:	73 07       	cpc	r23, r19
    6526:	84 07       	cpc	r24, r20
    6528:	ba 07       	cpc	r27, r26
    652a:	20 f0       	brcs	.+8      	; 0x6534 <__divsf3_pse+0xae>
    652c:	62 1b       	sub	r22, r18
    652e:	73 0b       	sbc	r23, r19
    6530:	84 0b       	sbc	r24, r20
    6532:	ba 0b       	sbc	r27, r26
    6534:	ee 1f       	adc	r30, r30
    6536:	88 f7       	brcc	.-30     	; 0x651a <__divsf3_pse+0x94>
    6538:	e0 95       	com	r30
    653a:	08 95       	ret

0000653c <__floatunsisf>:
    653c:	e8 94       	clt
    653e:	09 c0       	rjmp	.+18     	; 0x6552 <__floatsisf+0x12>

00006540 <__floatsisf>:
    6540:	97 fb       	bst	r25, 7
    6542:	3e f4       	brtc	.+14     	; 0x6552 <__floatsisf+0x12>
    6544:	90 95       	com	r25
    6546:	80 95       	com	r24
    6548:	70 95       	com	r23
    654a:	61 95       	neg	r22
    654c:	7f 4f       	sbci	r23, 0xFF	; 255
    654e:	8f 4f       	sbci	r24, 0xFF	; 255
    6550:	9f 4f       	sbci	r25, 0xFF	; 255
    6552:	99 23       	and	r25, r25
    6554:	a9 f0       	breq	.+42     	; 0x6580 <__floatsisf+0x40>
    6556:	f9 2f       	mov	r31, r25
    6558:	96 e9       	ldi	r25, 0x96	; 150
    655a:	bb 27       	eor	r27, r27
    655c:	93 95       	inc	r25
    655e:	f6 95       	lsr	r31
    6560:	87 95       	ror	r24
    6562:	77 95       	ror	r23
    6564:	67 95       	ror	r22
    6566:	b7 95       	ror	r27
    6568:	f1 11       	cpse	r31, r1
    656a:	f8 cf       	rjmp	.-16     	; 0x655c <__floatsisf+0x1c>
    656c:	fa f4       	brpl	.+62     	; 0x65ac <__floatsisf+0x6c>
    656e:	bb 0f       	add	r27, r27
    6570:	11 f4       	brne	.+4      	; 0x6576 <__floatsisf+0x36>
    6572:	60 ff       	sbrs	r22, 0
    6574:	1b c0       	rjmp	.+54     	; 0x65ac <__floatsisf+0x6c>
    6576:	6f 5f       	subi	r22, 0xFF	; 255
    6578:	7f 4f       	sbci	r23, 0xFF	; 255
    657a:	8f 4f       	sbci	r24, 0xFF	; 255
    657c:	9f 4f       	sbci	r25, 0xFF	; 255
    657e:	16 c0       	rjmp	.+44     	; 0x65ac <__floatsisf+0x6c>
    6580:	88 23       	and	r24, r24
    6582:	11 f0       	breq	.+4      	; 0x6588 <__floatsisf+0x48>
    6584:	96 e9       	ldi	r25, 0x96	; 150
    6586:	11 c0       	rjmp	.+34     	; 0x65aa <__floatsisf+0x6a>
    6588:	77 23       	and	r23, r23
    658a:	21 f0       	breq	.+8      	; 0x6594 <__floatsisf+0x54>
    658c:	9e e8       	ldi	r25, 0x8E	; 142
    658e:	87 2f       	mov	r24, r23
    6590:	76 2f       	mov	r23, r22
    6592:	05 c0       	rjmp	.+10     	; 0x659e <__floatsisf+0x5e>
    6594:	66 23       	and	r22, r22
    6596:	71 f0       	breq	.+28     	; 0x65b4 <__floatsisf+0x74>
    6598:	96 e8       	ldi	r25, 0x86	; 134
    659a:	86 2f       	mov	r24, r22
    659c:	70 e0       	ldi	r23, 0x00	; 0
    659e:	60 e0       	ldi	r22, 0x00	; 0
    65a0:	2a f0       	brmi	.+10     	; 0x65ac <__floatsisf+0x6c>
    65a2:	9a 95       	dec	r25
    65a4:	66 0f       	add	r22, r22
    65a6:	77 1f       	adc	r23, r23
    65a8:	88 1f       	adc	r24, r24
    65aa:	da f7       	brpl	.-10     	; 0x65a2 <__floatsisf+0x62>
    65ac:	88 0f       	add	r24, r24
    65ae:	96 95       	lsr	r25
    65b0:	87 95       	ror	r24
    65b2:	97 f9       	bld	r25, 7
    65b4:	08 95       	ret

000065b6 <__gesf2>:
    65b6:	0e 94 c7 21 	call	0x438e	; 0x438e <__fp_cmp>
    65ba:	08 f4       	brcc	.+2      	; 0x65be <__gesf2+0x8>
    65bc:	8f ef       	ldi	r24, 0xFF	; 255
    65be:	08 95       	ret

000065c0 <__mulsf3>:
    65c0:	11 d0       	rcall	.+34     	; 0x65e4 <__mulsf3x>
    65c2:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__fp_round>
    65c6:	0e 94 b5 22 	call	0x456a	; 0x456a <__fp_pscA>
    65ca:	38 f0       	brcs	.+14     	; 0x65da <__mulsf3+0x1a>
    65cc:	0e 94 bc 22 	call	0x4578	; 0x4578 <__fp_pscB>
    65d0:	20 f0       	brcs	.+8      	; 0x65da <__mulsf3+0x1a>
    65d2:	95 23       	and	r25, r21
    65d4:	11 f0       	breq	.+4      	; 0x65da <__mulsf3+0x1a>
    65d6:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__fp_inf>
    65da:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__fp_nan>
    65de:	11 24       	eor	r1, r1
    65e0:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__fp_szero>

000065e4 <__mulsf3x>:
    65e4:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <__fp_split3>
    65e8:	70 f3       	brcs	.-36     	; 0x65c6 <__mulsf3+0x6>

000065ea <__mulsf3_pse>:
    65ea:	95 9f       	mul	r25, r21
    65ec:	c1 f3       	breq	.-16     	; 0x65de <__mulsf3+0x1e>
    65ee:	95 0f       	add	r25, r21
    65f0:	50 e0       	ldi	r21, 0x00	; 0
    65f2:	55 1f       	adc	r21, r21
    65f4:	62 9f       	mul	r22, r18
    65f6:	f0 01       	movw	r30, r0
    65f8:	72 9f       	mul	r23, r18
    65fa:	bb 27       	eor	r27, r27
    65fc:	f0 0d       	add	r31, r0
    65fe:	b1 1d       	adc	r27, r1
    6600:	63 9f       	mul	r22, r19
    6602:	aa 27       	eor	r26, r26
    6604:	f0 0d       	add	r31, r0
    6606:	b1 1d       	adc	r27, r1
    6608:	aa 1f       	adc	r26, r26
    660a:	64 9f       	mul	r22, r20
    660c:	66 27       	eor	r22, r22
    660e:	b0 0d       	add	r27, r0
    6610:	a1 1d       	adc	r26, r1
    6612:	66 1f       	adc	r22, r22
    6614:	82 9f       	mul	r24, r18
    6616:	22 27       	eor	r18, r18
    6618:	b0 0d       	add	r27, r0
    661a:	a1 1d       	adc	r26, r1
    661c:	62 1f       	adc	r22, r18
    661e:	73 9f       	mul	r23, r19
    6620:	b0 0d       	add	r27, r0
    6622:	a1 1d       	adc	r26, r1
    6624:	62 1f       	adc	r22, r18
    6626:	83 9f       	mul	r24, r19
    6628:	a0 0d       	add	r26, r0
    662a:	61 1d       	adc	r22, r1
    662c:	22 1f       	adc	r18, r18
    662e:	74 9f       	mul	r23, r20
    6630:	33 27       	eor	r19, r19
    6632:	a0 0d       	add	r26, r0
    6634:	61 1d       	adc	r22, r1
    6636:	23 1f       	adc	r18, r19
    6638:	84 9f       	mul	r24, r20
    663a:	60 0d       	add	r22, r0
    663c:	21 1d       	adc	r18, r1
    663e:	82 2f       	mov	r24, r18
    6640:	76 2f       	mov	r23, r22
    6642:	6a 2f       	mov	r22, r26
    6644:	11 24       	eor	r1, r1
    6646:	9f 57       	subi	r25, 0x7F	; 127
    6648:	50 40       	sbci	r21, 0x00	; 0
    664a:	9a f0       	brmi	.+38     	; 0x6672 <__mulsf3_pse+0x88>
    664c:	f1 f0       	breq	.+60     	; 0x668a <__mulsf3_pse+0xa0>
    664e:	88 23       	and	r24, r24
    6650:	4a f0       	brmi	.+18     	; 0x6664 <__mulsf3_pse+0x7a>
    6652:	ee 0f       	add	r30, r30
    6654:	ff 1f       	adc	r31, r31
    6656:	bb 1f       	adc	r27, r27
    6658:	66 1f       	adc	r22, r22
    665a:	77 1f       	adc	r23, r23
    665c:	88 1f       	adc	r24, r24
    665e:	91 50       	subi	r25, 0x01	; 1
    6660:	50 40       	sbci	r21, 0x00	; 0
    6662:	a9 f7       	brne	.-22     	; 0x664e <__mulsf3_pse+0x64>
    6664:	9e 3f       	cpi	r25, 0xFE	; 254
    6666:	51 05       	cpc	r21, r1
    6668:	80 f0       	brcs	.+32     	; 0x668a <__mulsf3_pse+0xa0>
    666a:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__fp_inf>
    666e:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__fp_szero>
    6672:	5f 3f       	cpi	r21, 0xFF	; 255
    6674:	e4 f3       	brlt	.-8      	; 0x666e <__mulsf3_pse+0x84>
    6676:	98 3e       	cpi	r25, 0xE8	; 232
    6678:	d4 f3       	brlt	.-12     	; 0x666e <__mulsf3_pse+0x84>
    667a:	86 95       	lsr	r24
    667c:	77 95       	ror	r23
    667e:	67 95       	ror	r22
    6680:	b7 95       	ror	r27
    6682:	f7 95       	ror	r31
    6684:	e7 95       	ror	r30
    6686:	9f 5f       	subi	r25, 0xFF	; 255
    6688:	c1 f7       	brne	.-16     	; 0x667a <__mulsf3_pse+0x90>
    668a:	fe 2b       	or	r31, r30
    668c:	88 0f       	add	r24, r24
    668e:	91 1d       	adc	r25, r1
    6690:	96 95       	lsr	r25
    6692:	87 95       	ror	r24
    6694:	97 f9       	bld	r25, 7
    6696:	08 95       	ret

00006698 <__udivmodsi4>:
    6698:	a1 e2       	ldi	r26, 0x21	; 33
    669a:	1a 2e       	mov	r1, r26
    669c:	aa 1b       	sub	r26, r26
    669e:	bb 1b       	sub	r27, r27
    66a0:	fd 01       	movw	r30, r26
    66a2:	0d c0       	rjmp	.+26     	; 0x66be <__udivmodsi4_ep>

000066a4 <__udivmodsi4_loop>:
    66a4:	aa 1f       	adc	r26, r26
    66a6:	bb 1f       	adc	r27, r27
    66a8:	ee 1f       	adc	r30, r30
    66aa:	ff 1f       	adc	r31, r31
    66ac:	a2 17       	cp	r26, r18
    66ae:	b3 07       	cpc	r27, r19
    66b0:	e4 07       	cpc	r30, r20
    66b2:	f5 07       	cpc	r31, r21
    66b4:	20 f0       	brcs	.+8      	; 0x66be <__udivmodsi4_ep>
    66b6:	a2 1b       	sub	r26, r18
    66b8:	b3 0b       	sbc	r27, r19
    66ba:	e4 0b       	sbc	r30, r20
    66bc:	f5 0b       	sbc	r31, r21

000066be <__udivmodsi4_ep>:
    66be:	66 1f       	adc	r22, r22
    66c0:	77 1f       	adc	r23, r23
    66c2:	88 1f       	adc	r24, r24
    66c4:	99 1f       	adc	r25, r25
    66c6:	1a 94       	dec	r1
    66c8:	69 f7       	brne	.-38     	; 0x66a4 <__udivmodsi4_loop>
    66ca:	60 95       	com	r22
    66cc:	70 95       	com	r23
    66ce:	80 95       	com	r24
    66d0:	90 95       	com	r25
    66d2:	9b 01       	movw	r18, r22
    66d4:	ac 01       	movw	r20, r24
    66d6:	bd 01       	movw	r22, r26
    66d8:	cf 01       	movw	r24, r30
    66da:	08 95       	ret

000066dc <__tablejump2__>:
    66dc:	ee 0f       	add	r30, r30
    66de:	ff 1f       	adc	r31, r31
    66e0:	88 1f       	adc	r24, r24
    66e2:	8b bf       	out	0x3b, r24	; 59
    66e4:	07 90       	elpm	r0, Z+
    66e6:	f6 91       	elpm	r31, Z
    66e8:	e0 2d       	mov	r30, r0
    66ea:	19 94       	eijmp

000066ec <__umulhisi3>:
    66ec:	a2 9f       	mul	r26, r18
    66ee:	b0 01       	movw	r22, r0
    66f0:	b3 9f       	mul	r27, r19
    66f2:	c0 01       	movw	r24, r0
    66f4:	a3 9f       	mul	r26, r19
    66f6:	70 0d       	add	r23, r0
    66f8:	81 1d       	adc	r24, r1
    66fa:	11 24       	eor	r1, r1
    66fc:	91 1d       	adc	r25, r1
    66fe:	b2 9f       	mul	r27, r18
    6700:	70 0d       	add	r23, r0
    6702:	81 1d       	adc	r24, r1
    6704:	11 24       	eor	r1, r1
    6706:	91 1d       	adc	r25, r1
    6708:	08 95       	ret

0000670a <calloc>:
    670a:	0f 93       	push	r16
    670c:	1f 93       	push	r17
    670e:	cf 93       	push	r28
    6710:	df 93       	push	r29
    6712:	86 9f       	mul	r24, r22
    6714:	80 01       	movw	r16, r0
    6716:	87 9f       	mul	r24, r23
    6718:	10 0d       	add	r17, r0
    671a:	96 9f       	mul	r25, r22
    671c:	10 0d       	add	r17, r0
    671e:	11 24       	eor	r1, r1
    6720:	c8 01       	movw	r24, r16
    6722:	0d d0       	rcall	.+26     	; 0x673e <malloc>
    6724:	ec 01       	movw	r28, r24
    6726:	00 97       	sbiw	r24, 0x00	; 0
    6728:	21 f0       	breq	.+8      	; 0x6732 <calloc+0x28>
    672a:	a8 01       	movw	r20, r16
    672c:	60 e0       	ldi	r22, 0x00	; 0
    672e:	70 e0       	ldi	r23, 0x00	; 0
    6730:	17 d2       	rcall	.+1070   	; 0x6b60 <memset>
    6732:	ce 01       	movw	r24, r28
    6734:	df 91       	pop	r29
    6736:	cf 91       	pop	r28
    6738:	1f 91       	pop	r17
    673a:	0f 91       	pop	r16
    673c:	08 95       	ret

0000673e <malloc>:
    673e:	0f 93       	push	r16
    6740:	1f 93       	push	r17
    6742:	cf 93       	push	r28
    6744:	df 93       	push	r29
    6746:	82 30       	cpi	r24, 0x02	; 2
    6748:	91 05       	cpc	r25, r1
    674a:	10 f4       	brcc	.+4      	; 0x6750 <malloc+0x12>
    674c:	82 e0       	ldi	r24, 0x02	; 2
    674e:	90 e0       	ldi	r25, 0x00	; 0
    6750:	e0 91 84 15 	lds	r30, 0x1584	; 0x801584 <__flp>
    6754:	f0 91 85 15 	lds	r31, 0x1585	; 0x801585 <__flp+0x1>
    6758:	20 e0       	ldi	r18, 0x00	; 0
    675a:	30 e0       	ldi	r19, 0x00	; 0
    675c:	a0 e0       	ldi	r26, 0x00	; 0
    675e:	b0 e0       	ldi	r27, 0x00	; 0
    6760:	30 97       	sbiw	r30, 0x00	; 0
    6762:	19 f1       	breq	.+70     	; 0x67aa <malloc+0x6c>
    6764:	40 81       	ld	r20, Z
    6766:	51 81       	ldd	r21, Z+1	; 0x01
    6768:	02 81       	ldd	r16, Z+2	; 0x02
    676a:	13 81       	ldd	r17, Z+3	; 0x03
    676c:	48 17       	cp	r20, r24
    676e:	59 07       	cpc	r21, r25
    6770:	c8 f0       	brcs	.+50     	; 0x67a4 <malloc+0x66>
    6772:	84 17       	cp	r24, r20
    6774:	95 07       	cpc	r25, r21
    6776:	69 f4       	brne	.+26     	; 0x6792 <malloc+0x54>
    6778:	10 97       	sbiw	r26, 0x00	; 0
    677a:	31 f0       	breq	.+12     	; 0x6788 <malloc+0x4a>
    677c:	12 96       	adiw	r26, 0x02	; 2
    677e:	0c 93       	st	X, r16
    6780:	12 97       	sbiw	r26, 0x02	; 2
    6782:	13 96       	adiw	r26, 0x03	; 3
    6784:	1c 93       	st	X, r17
    6786:	27 c0       	rjmp	.+78     	; 0x67d6 <malloc+0x98>
    6788:	00 93 84 15 	sts	0x1584, r16	; 0x801584 <__flp>
    678c:	10 93 85 15 	sts	0x1585, r17	; 0x801585 <__flp+0x1>
    6790:	22 c0       	rjmp	.+68     	; 0x67d6 <malloc+0x98>
    6792:	21 15       	cp	r18, r1
    6794:	31 05       	cpc	r19, r1
    6796:	19 f0       	breq	.+6      	; 0x679e <malloc+0x60>
    6798:	42 17       	cp	r20, r18
    679a:	53 07       	cpc	r21, r19
    679c:	18 f4       	brcc	.+6      	; 0x67a4 <malloc+0x66>
    679e:	9a 01       	movw	r18, r20
    67a0:	bd 01       	movw	r22, r26
    67a2:	ef 01       	movw	r28, r30
    67a4:	df 01       	movw	r26, r30
    67a6:	f8 01       	movw	r30, r16
    67a8:	db cf       	rjmp	.-74     	; 0x6760 <malloc+0x22>
    67aa:	21 15       	cp	r18, r1
    67ac:	31 05       	cpc	r19, r1
    67ae:	f9 f0       	breq	.+62     	; 0x67ee <malloc+0xb0>
    67b0:	28 1b       	sub	r18, r24
    67b2:	39 0b       	sbc	r19, r25
    67b4:	24 30       	cpi	r18, 0x04	; 4
    67b6:	31 05       	cpc	r19, r1
    67b8:	80 f4       	brcc	.+32     	; 0x67da <malloc+0x9c>
    67ba:	8a 81       	ldd	r24, Y+2	; 0x02
    67bc:	9b 81       	ldd	r25, Y+3	; 0x03
    67be:	61 15       	cp	r22, r1
    67c0:	71 05       	cpc	r23, r1
    67c2:	21 f0       	breq	.+8      	; 0x67cc <malloc+0x8e>
    67c4:	fb 01       	movw	r30, r22
    67c6:	93 83       	std	Z+3, r25	; 0x03
    67c8:	82 83       	std	Z+2, r24	; 0x02
    67ca:	04 c0       	rjmp	.+8      	; 0x67d4 <malloc+0x96>
    67cc:	90 93 85 15 	sts	0x1585, r25	; 0x801585 <__flp+0x1>
    67d0:	80 93 84 15 	sts	0x1584, r24	; 0x801584 <__flp>
    67d4:	fe 01       	movw	r30, r28
    67d6:	32 96       	adiw	r30, 0x02	; 2
    67d8:	44 c0       	rjmp	.+136    	; 0x6862 <malloc+0x124>
    67da:	fe 01       	movw	r30, r28
    67dc:	e2 0f       	add	r30, r18
    67de:	f3 1f       	adc	r31, r19
    67e0:	81 93       	st	Z+, r24
    67e2:	91 93       	st	Z+, r25
    67e4:	22 50       	subi	r18, 0x02	; 2
    67e6:	31 09       	sbc	r19, r1
    67e8:	39 83       	std	Y+1, r19	; 0x01
    67ea:	28 83       	st	Y, r18
    67ec:	3a c0       	rjmp	.+116    	; 0x6862 <malloc+0x124>
    67ee:	20 91 82 15 	lds	r18, 0x1582	; 0x801582 <__brkval>
    67f2:	30 91 83 15 	lds	r19, 0x1583	; 0x801583 <__brkval+0x1>
    67f6:	23 2b       	or	r18, r19
    67f8:	41 f4       	brne	.+16     	; 0x680a <malloc+0xcc>
    67fa:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    67fe:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6802:	30 93 83 15 	sts	0x1583, r19	; 0x801583 <__brkval+0x1>
    6806:	20 93 82 15 	sts	0x1582, r18	; 0x801582 <__brkval>
    680a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    680e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6812:	21 15       	cp	r18, r1
    6814:	31 05       	cpc	r19, r1
    6816:	41 f4       	brne	.+16     	; 0x6828 <malloc+0xea>
    6818:	2d b7       	in	r18, 0x3d	; 61
    681a:	3e b7       	in	r19, 0x3e	; 62
    681c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6820:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6824:	24 1b       	sub	r18, r20
    6826:	35 0b       	sbc	r19, r21
    6828:	e0 91 82 15 	lds	r30, 0x1582	; 0x801582 <__brkval>
    682c:	f0 91 83 15 	lds	r31, 0x1583	; 0x801583 <__brkval+0x1>
    6830:	e2 17       	cp	r30, r18
    6832:	f3 07       	cpc	r31, r19
    6834:	a0 f4       	brcc	.+40     	; 0x685e <malloc+0x120>
    6836:	2e 1b       	sub	r18, r30
    6838:	3f 0b       	sbc	r19, r31
    683a:	28 17       	cp	r18, r24
    683c:	39 07       	cpc	r19, r25
    683e:	78 f0       	brcs	.+30     	; 0x685e <malloc+0x120>
    6840:	ac 01       	movw	r20, r24
    6842:	4e 5f       	subi	r20, 0xFE	; 254
    6844:	5f 4f       	sbci	r21, 0xFF	; 255
    6846:	24 17       	cp	r18, r20
    6848:	35 07       	cpc	r19, r21
    684a:	48 f0       	brcs	.+18     	; 0x685e <malloc+0x120>
    684c:	4e 0f       	add	r20, r30
    684e:	5f 1f       	adc	r21, r31
    6850:	50 93 83 15 	sts	0x1583, r21	; 0x801583 <__brkval+0x1>
    6854:	40 93 82 15 	sts	0x1582, r20	; 0x801582 <__brkval>
    6858:	81 93       	st	Z+, r24
    685a:	91 93       	st	Z+, r25
    685c:	02 c0       	rjmp	.+4      	; 0x6862 <malloc+0x124>
    685e:	e0 e0       	ldi	r30, 0x00	; 0
    6860:	f0 e0       	ldi	r31, 0x00	; 0
    6862:	cf 01       	movw	r24, r30
    6864:	df 91       	pop	r29
    6866:	cf 91       	pop	r28
    6868:	1f 91       	pop	r17
    686a:	0f 91       	pop	r16
    686c:	08 95       	ret

0000686e <free>:
    686e:	cf 93       	push	r28
    6870:	df 93       	push	r29
    6872:	00 97       	sbiw	r24, 0x00	; 0
    6874:	09 f4       	brne	.+2      	; 0x6878 <free+0xa>
    6876:	81 c0       	rjmp	.+258    	; 0x697a <free+0x10c>
    6878:	fc 01       	movw	r30, r24
    687a:	32 97       	sbiw	r30, 0x02	; 2
    687c:	13 82       	std	Z+3, r1	; 0x03
    687e:	12 82       	std	Z+2, r1	; 0x02
    6880:	a0 91 84 15 	lds	r26, 0x1584	; 0x801584 <__flp>
    6884:	b0 91 85 15 	lds	r27, 0x1585	; 0x801585 <__flp+0x1>
    6888:	10 97       	sbiw	r26, 0x00	; 0
    688a:	81 f4       	brne	.+32     	; 0x68ac <free+0x3e>
    688c:	20 81       	ld	r18, Z
    688e:	31 81       	ldd	r19, Z+1	; 0x01
    6890:	82 0f       	add	r24, r18
    6892:	93 1f       	adc	r25, r19
    6894:	20 91 82 15 	lds	r18, 0x1582	; 0x801582 <__brkval>
    6898:	30 91 83 15 	lds	r19, 0x1583	; 0x801583 <__brkval+0x1>
    689c:	28 17       	cp	r18, r24
    689e:	39 07       	cpc	r19, r25
    68a0:	51 f5       	brne	.+84     	; 0x68f6 <free+0x88>
    68a2:	f0 93 83 15 	sts	0x1583, r31	; 0x801583 <__brkval+0x1>
    68a6:	e0 93 82 15 	sts	0x1582, r30	; 0x801582 <__brkval>
    68aa:	67 c0       	rjmp	.+206    	; 0x697a <free+0x10c>
    68ac:	ed 01       	movw	r28, r26
    68ae:	20 e0       	ldi	r18, 0x00	; 0
    68b0:	30 e0       	ldi	r19, 0x00	; 0
    68b2:	ce 17       	cp	r28, r30
    68b4:	df 07       	cpc	r29, r31
    68b6:	40 f4       	brcc	.+16     	; 0x68c8 <free+0x5a>
    68b8:	4a 81       	ldd	r20, Y+2	; 0x02
    68ba:	5b 81       	ldd	r21, Y+3	; 0x03
    68bc:	9e 01       	movw	r18, r28
    68be:	41 15       	cp	r20, r1
    68c0:	51 05       	cpc	r21, r1
    68c2:	f1 f0       	breq	.+60     	; 0x6900 <free+0x92>
    68c4:	ea 01       	movw	r28, r20
    68c6:	f5 cf       	rjmp	.-22     	; 0x68b2 <free+0x44>
    68c8:	d3 83       	std	Z+3, r29	; 0x03
    68ca:	c2 83       	std	Z+2, r28	; 0x02
    68cc:	40 81       	ld	r20, Z
    68ce:	51 81       	ldd	r21, Z+1	; 0x01
    68d0:	84 0f       	add	r24, r20
    68d2:	95 1f       	adc	r25, r21
    68d4:	c8 17       	cp	r28, r24
    68d6:	d9 07       	cpc	r29, r25
    68d8:	59 f4       	brne	.+22     	; 0x68f0 <free+0x82>
    68da:	88 81       	ld	r24, Y
    68dc:	99 81       	ldd	r25, Y+1	; 0x01
    68de:	84 0f       	add	r24, r20
    68e0:	95 1f       	adc	r25, r21
    68e2:	02 96       	adiw	r24, 0x02	; 2
    68e4:	91 83       	std	Z+1, r25	; 0x01
    68e6:	80 83       	st	Z, r24
    68e8:	8a 81       	ldd	r24, Y+2	; 0x02
    68ea:	9b 81       	ldd	r25, Y+3	; 0x03
    68ec:	93 83       	std	Z+3, r25	; 0x03
    68ee:	82 83       	std	Z+2, r24	; 0x02
    68f0:	21 15       	cp	r18, r1
    68f2:	31 05       	cpc	r19, r1
    68f4:	29 f4       	brne	.+10     	; 0x6900 <free+0x92>
    68f6:	f0 93 85 15 	sts	0x1585, r31	; 0x801585 <__flp+0x1>
    68fa:	e0 93 84 15 	sts	0x1584, r30	; 0x801584 <__flp>
    68fe:	3d c0       	rjmp	.+122    	; 0x697a <free+0x10c>
    6900:	e9 01       	movw	r28, r18
    6902:	fb 83       	std	Y+3, r31	; 0x03
    6904:	ea 83       	std	Y+2, r30	; 0x02
    6906:	49 91       	ld	r20, Y+
    6908:	59 91       	ld	r21, Y+
    690a:	c4 0f       	add	r28, r20
    690c:	d5 1f       	adc	r29, r21
    690e:	ec 17       	cp	r30, r28
    6910:	fd 07       	cpc	r31, r29
    6912:	61 f4       	brne	.+24     	; 0x692c <free+0xbe>
    6914:	80 81       	ld	r24, Z
    6916:	91 81       	ldd	r25, Z+1	; 0x01
    6918:	84 0f       	add	r24, r20
    691a:	95 1f       	adc	r25, r21
    691c:	02 96       	adiw	r24, 0x02	; 2
    691e:	e9 01       	movw	r28, r18
    6920:	99 83       	std	Y+1, r25	; 0x01
    6922:	88 83       	st	Y, r24
    6924:	82 81       	ldd	r24, Z+2	; 0x02
    6926:	93 81       	ldd	r25, Z+3	; 0x03
    6928:	9b 83       	std	Y+3, r25	; 0x03
    692a:	8a 83       	std	Y+2, r24	; 0x02
    692c:	e0 e0       	ldi	r30, 0x00	; 0
    692e:	f0 e0       	ldi	r31, 0x00	; 0
    6930:	12 96       	adiw	r26, 0x02	; 2
    6932:	8d 91       	ld	r24, X+
    6934:	9c 91       	ld	r25, X
    6936:	13 97       	sbiw	r26, 0x03	; 3
    6938:	00 97       	sbiw	r24, 0x00	; 0
    693a:	19 f0       	breq	.+6      	; 0x6942 <free+0xd4>
    693c:	fd 01       	movw	r30, r26
    693e:	dc 01       	movw	r26, r24
    6940:	f7 cf       	rjmp	.-18     	; 0x6930 <free+0xc2>
    6942:	8d 91       	ld	r24, X+
    6944:	9c 91       	ld	r25, X
    6946:	11 97       	sbiw	r26, 0x01	; 1
    6948:	9d 01       	movw	r18, r26
    694a:	2e 5f       	subi	r18, 0xFE	; 254
    694c:	3f 4f       	sbci	r19, 0xFF	; 255
    694e:	82 0f       	add	r24, r18
    6950:	93 1f       	adc	r25, r19
    6952:	20 91 82 15 	lds	r18, 0x1582	; 0x801582 <__brkval>
    6956:	30 91 83 15 	lds	r19, 0x1583	; 0x801583 <__brkval+0x1>
    695a:	28 17       	cp	r18, r24
    695c:	39 07       	cpc	r19, r25
    695e:	69 f4       	brne	.+26     	; 0x697a <free+0x10c>
    6960:	30 97       	sbiw	r30, 0x00	; 0
    6962:	29 f4       	brne	.+10     	; 0x696e <free+0x100>
    6964:	10 92 85 15 	sts	0x1585, r1	; 0x801585 <__flp+0x1>
    6968:	10 92 84 15 	sts	0x1584, r1	; 0x801584 <__flp>
    696c:	02 c0       	rjmp	.+4      	; 0x6972 <free+0x104>
    696e:	13 82       	std	Z+3, r1	; 0x03
    6970:	12 82       	std	Z+2, r1	; 0x02
    6972:	b0 93 83 15 	sts	0x1583, r27	; 0x801583 <__brkval+0x1>
    6976:	a0 93 82 15 	sts	0x1582, r26	; 0x801582 <__brkval>
    697a:	df 91       	pop	r29
    697c:	cf 91       	pop	r28
    697e:	08 95       	ret

00006980 <abort>:
    6980:	81 e0       	ldi	r24, 0x01	; 1
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	f8 94       	cli
    6986:	21 c2       	rjmp	.+1090   	; 0x6dca <_exit>

00006988 <__ftoa_engine>:
    6988:	28 30       	cpi	r18, 0x08	; 8
    698a:	08 f0       	brcs	.+2      	; 0x698e <__ftoa_engine+0x6>
    698c:	27 e0       	ldi	r18, 0x07	; 7
    698e:	33 27       	eor	r19, r19
    6990:	da 01       	movw	r26, r20
    6992:	99 0f       	add	r25, r25
    6994:	31 1d       	adc	r19, r1
    6996:	87 fd       	sbrc	r24, 7
    6998:	91 60       	ori	r25, 0x01	; 1
    699a:	00 96       	adiw	r24, 0x00	; 0
    699c:	61 05       	cpc	r22, r1
    699e:	71 05       	cpc	r23, r1
    69a0:	39 f4       	brne	.+14     	; 0x69b0 <__ftoa_engine+0x28>
    69a2:	32 60       	ori	r19, 0x02	; 2
    69a4:	2e 5f       	subi	r18, 0xFE	; 254
    69a6:	3d 93       	st	X+, r19
    69a8:	30 e3       	ldi	r19, 0x30	; 48
    69aa:	2a 95       	dec	r18
    69ac:	e1 f7       	brne	.-8      	; 0x69a6 <__ftoa_engine+0x1e>
    69ae:	08 95       	ret
    69b0:	9f 3f       	cpi	r25, 0xFF	; 255
    69b2:	30 f0       	brcs	.+12     	; 0x69c0 <__ftoa_engine+0x38>
    69b4:	80 38       	cpi	r24, 0x80	; 128
    69b6:	71 05       	cpc	r23, r1
    69b8:	61 05       	cpc	r22, r1
    69ba:	09 f0       	breq	.+2      	; 0x69be <__ftoa_engine+0x36>
    69bc:	3c 5f       	subi	r19, 0xFC	; 252
    69be:	3c 5f       	subi	r19, 0xFC	; 252
    69c0:	3d 93       	st	X+, r19
    69c2:	91 30       	cpi	r25, 0x01	; 1
    69c4:	08 f0       	brcs	.+2      	; 0x69c8 <__ftoa_engine+0x40>
    69c6:	80 68       	ori	r24, 0x80	; 128
    69c8:	91 1d       	adc	r25, r1
    69ca:	df 93       	push	r29
    69cc:	cf 93       	push	r28
    69ce:	1f 93       	push	r17
    69d0:	0f 93       	push	r16
    69d2:	ff 92       	push	r15
    69d4:	ef 92       	push	r14
    69d6:	19 2f       	mov	r17, r25
    69d8:	98 7f       	andi	r25, 0xF8	; 248
    69da:	96 95       	lsr	r25
    69dc:	e9 2f       	mov	r30, r25
    69de:	96 95       	lsr	r25
    69e0:	96 95       	lsr	r25
    69e2:	e9 0f       	add	r30, r25
    69e4:	ff 27       	eor	r31, r31
    69e6:	e4 50       	subi	r30, 0x04	; 4
    69e8:	fe 4f       	sbci	r31, 0xFE	; 254
    69ea:	99 27       	eor	r25, r25
    69ec:	33 27       	eor	r19, r19
    69ee:	ee 24       	eor	r14, r14
    69f0:	ff 24       	eor	r15, r15
    69f2:	a7 01       	movw	r20, r14
    69f4:	e7 01       	movw	r28, r14
    69f6:	05 90       	lpm	r0, Z+
    69f8:	08 94       	sec
    69fa:	07 94       	ror	r0
    69fc:	28 f4       	brcc	.+10     	; 0x6a08 <__ftoa_engine+0x80>
    69fe:	36 0f       	add	r19, r22
    6a00:	e7 1e       	adc	r14, r23
    6a02:	f8 1e       	adc	r15, r24
    6a04:	49 1f       	adc	r20, r25
    6a06:	51 1d       	adc	r21, r1
    6a08:	66 0f       	add	r22, r22
    6a0a:	77 1f       	adc	r23, r23
    6a0c:	88 1f       	adc	r24, r24
    6a0e:	99 1f       	adc	r25, r25
    6a10:	06 94       	lsr	r0
    6a12:	a1 f7       	brne	.-24     	; 0x69fc <__ftoa_engine+0x74>
    6a14:	05 90       	lpm	r0, Z+
    6a16:	07 94       	ror	r0
    6a18:	28 f4       	brcc	.+10     	; 0x6a24 <__ftoa_engine+0x9c>
    6a1a:	e7 0e       	add	r14, r23
    6a1c:	f8 1e       	adc	r15, r24
    6a1e:	49 1f       	adc	r20, r25
    6a20:	56 1f       	adc	r21, r22
    6a22:	c1 1d       	adc	r28, r1
    6a24:	77 0f       	add	r23, r23
    6a26:	88 1f       	adc	r24, r24
    6a28:	99 1f       	adc	r25, r25
    6a2a:	66 1f       	adc	r22, r22
    6a2c:	06 94       	lsr	r0
    6a2e:	a1 f7       	brne	.-24     	; 0x6a18 <__ftoa_engine+0x90>
    6a30:	05 90       	lpm	r0, Z+
    6a32:	07 94       	ror	r0
    6a34:	28 f4       	brcc	.+10     	; 0x6a40 <__ftoa_engine+0xb8>
    6a36:	f8 0e       	add	r15, r24
    6a38:	49 1f       	adc	r20, r25
    6a3a:	56 1f       	adc	r21, r22
    6a3c:	c7 1f       	adc	r28, r23
    6a3e:	d1 1d       	adc	r29, r1
    6a40:	88 0f       	add	r24, r24
    6a42:	99 1f       	adc	r25, r25
    6a44:	66 1f       	adc	r22, r22
    6a46:	77 1f       	adc	r23, r23
    6a48:	06 94       	lsr	r0
    6a4a:	a1 f7       	brne	.-24     	; 0x6a34 <__ftoa_engine+0xac>
    6a4c:	05 90       	lpm	r0, Z+
    6a4e:	07 94       	ror	r0
    6a50:	20 f4       	brcc	.+8      	; 0x6a5a <__ftoa_engine+0xd2>
    6a52:	49 0f       	add	r20, r25
    6a54:	56 1f       	adc	r21, r22
    6a56:	c7 1f       	adc	r28, r23
    6a58:	d8 1f       	adc	r29, r24
    6a5a:	99 0f       	add	r25, r25
    6a5c:	66 1f       	adc	r22, r22
    6a5e:	77 1f       	adc	r23, r23
    6a60:	88 1f       	adc	r24, r24
    6a62:	06 94       	lsr	r0
    6a64:	a9 f7       	brne	.-22     	; 0x6a50 <__ftoa_engine+0xc8>
    6a66:	84 91       	lpm	r24, Z
    6a68:	10 95       	com	r17
    6a6a:	17 70       	andi	r17, 0x07	; 7
    6a6c:	41 f0       	breq	.+16     	; 0x6a7e <__ftoa_engine+0xf6>
    6a6e:	d6 95       	lsr	r29
    6a70:	c7 95       	ror	r28
    6a72:	57 95       	ror	r21
    6a74:	47 95       	ror	r20
    6a76:	f7 94       	ror	r15
    6a78:	e7 94       	ror	r14
    6a7a:	1a 95       	dec	r17
    6a7c:	c1 f7       	brne	.-16     	; 0x6a6e <__ftoa_engine+0xe6>
    6a7e:	e2 ea       	ldi	r30, 0xA2	; 162
    6a80:	f1 e0       	ldi	r31, 0x01	; 1
    6a82:	68 94       	set
    6a84:	15 90       	lpm	r1, Z+
    6a86:	15 91       	lpm	r17, Z+
    6a88:	35 91       	lpm	r19, Z+
    6a8a:	65 91       	lpm	r22, Z+
    6a8c:	95 91       	lpm	r25, Z+
    6a8e:	05 90       	lpm	r0, Z+
    6a90:	7f e2       	ldi	r23, 0x2F	; 47
    6a92:	73 95       	inc	r23
    6a94:	e1 18       	sub	r14, r1
    6a96:	f1 0a       	sbc	r15, r17
    6a98:	43 0b       	sbc	r20, r19
    6a9a:	56 0b       	sbc	r21, r22
    6a9c:	c9 0b       	sbc	r28, r25
    6a9e:	d0 09       	sbc	r29, r0
    6aa0:	c0 f7       	brcc	.-16     	; 0x6a92 <__ftoa_engine+0x10a>
    6aa2:	e1 0c       	add	r14, r1
    6aa4:	f1 1e       	adc	r15, r17
    6aa6:	43 1f       	adc	r20, r19
    6aa8:	56 1f       	adc	r21, r22
    6aaa:	c9 1f       	adc	r28, r25
    6aac:	d0 1d       	adc	r29, r0
    6aae:	7e f4       	brtc	.+30     	; 0x6ace <__ftoa_engine+0x146>
    6ab0:	70 33       	cpi	r23, 0x30	; 48
    6ab2:	11 f4       	brne	.+4      	; 0x6ab8 <__ftoa_engine+0x130>
    6ab4:	8a 95       	dec	r24
    6ab6:	e6 cf       	rjmp	.-52     	; 0x6a84 <__ftoa_engine+0xfc>
    6ab8:	e8 94       	clt
    6aba:	01 50       	subi	r16, 0x01	; 1
    6abc:	30 f0       	brcs	.+12     	; 0x6aca <__ftoa_engine+0x142>
    6abe:	08 0f       	add	r16, r24
    6ac0:	0a f4       	brpl	.+2      	; 0x6ac4 <__ftoa_engine+0x13c>
    6ac2:	00 27       	eor	r16, r16
    6ac4:	02 17       	cp	r16, r18
    6ac6:	08 f4       	brcc	.+2      	; 0x6aca <__ftoa_engine+0x142>
    6ac8:	20 2f       	mov	r18, r16
    6aca:	23 95       	inc	r18
    6acc:	02 2f       	mov	r16, r18
    6ace:	7a 33       	cpi	r23, 0x3A	; 58
    6ad0:	28 f0       	brcs	.+10     	; 0x6adc <__ftoa_engine+0x154>
    6ad2:	79 e3       	ldi	r23, 0x39	; 57
    6ad4:	7d 93       	st	X+, r23
    6ad6:	2a 95       	dec	r18
    6ad8:	e9 f7       	brne	.-6      	; 0x6ad4 <__ftoa_engine+0x14c>
    6ada:	10 c0       	rjmp	.+32     	; 0x6afc <__ftoa_engine+0x174>
    6adc:	7d 93       	st	X+, r23
    6ade:	2a 95       	dec	r18
    6ae0:	89 f6       	brne	.-94     	; 0x6a84 <__ftoa_engine+0xfc>
    6ae2:	06 94       	lsr	r0
    6ae4:	97 95       	ror	r25
    6ae6:	67 95       	ror	r22
    6ae8:	37 95       	ror	r19
    6aea:	17 95       	ror	r17
    6aec:	17 94       	ror	r1
    6aee:	e1 18       	sub	r14, r1
    6af0:	f1 0a       	sbc	r15, r17
    6af2:	43 0b       	sbc	r20, r19
    6af4:	56 0b       	sbc	r21, r22
    6af6:	c9 0b       	sbc	r28, r25
    6af8:	d0 09       	sbc	r29, r0
    6afa:	98 f0       	brcs	.+38     	; 0x6b22 <__ftoa_engine+0x19a>
    6afc:	23 95       	inc	r18
    6afe:	7e 91       	ld	r23, -X
    6b00:	73 95       	inc	r23
    6b02:	7a 33       	cpi	r23, 0x3A	; 58
    6b04:	08 f0       	brcs	.+2      	; 0x6b08 <__ftoa_engine+0x180>
    6b06:	70 e3       	ldi	r23, 0x30	; 48
    6b08:	7c 93       	st	X, r23
    6b0a:	20 13       	cpse	r18, r16
    6b0c:	b8 f7       	brcc	.-18     	; 0x6afc <__ftoa_engine+0x174>
    6b0e:	7e 91       	ld	r23, -X
    6b10:	70 61       	ori	r23, 0x10	; 16
    6b12:	7d 93       	st	X+, r23
    6b14:	30 f0       	brcs	.+12     	; 0x6b22 <__ftoa_engine+0x19a>
    6b16:	83 95       	inc	r24
    6b18:	71 e3       	ldi	r23, 0x31	; 49
    6b1a:	7d 93       	st	X+, r23
    6b1c:	70 e3       	ldi	r23, 0x30	; 48
    6b1e:	2a 95       	dec	r18
    6b20:	e1 f7       	brne	.-8      	; 0x6b1a <__ftoa_engine+0x192>
    6b22:	11 24       	eor	r1, r1
    6b24:	ef 90       	pop	r14
    6b26:	ff 90       	pop	r15
    6b28:	0f 91       	pop	r16
    6b2a:	1f 91       	pop	r17
    6b2c:	cf 91       	pop	r28
    6b2e:	df 91       	pop	r29
    6b30:	99 27       	eor	r25, r25
    6b32:	87 fd       	sbrc	r24, 7
    6b34:	90 95       	com	r25
    6b36:	08 95       	ret

00006b38 <strnlen_P>:
    6b38:	fc 01       	movw	r30, r24
    6b3a:	05 90       	lpm	r0, Z+
    6b3c:	61 50       	subi	r22, 0x01	; 1
    6b3e:	70 40       	sbci	r23, 0x00	; 0
    6b40:	01 10       	cpse	r0, r1
    6b42:	d8 f7       	brcc	.-10     	; 0x6b3a <strnlen_P+0x2>
    6b44:	80 95       	com	r24
    6b46:	90 95       	com	r25
    6b48:	8e 0f       	add	r24, r30
    6b4a:	9f 1f       	adc	r25, r31
    6b4c:	08 95       	ret

00006b4e <memcpy>:
    6b4e:	fb 01       	movw	r30, r22
    6b50:	dc 01       	movw	r26, r24
    6b52:	02 c0       	rjmp	.+4      	; 0x6b58 <memcpy+0xa>
    6b54:	01 90       	ld	r0, Z+
    6b56:	0d 92       	st	X+, r0
    6b58:	41 50       	subi	r20, 0x01	; 1
    6b5a:	50 40       	sbci	r21, 0x00	; 0
    6b5c:	d8 f7       	brcc	.-10     	; 0x6b54 <memcpy+0x6>
    6b5e:	08 95       	ret

00006b60 <memset>:
    6b60:	dc 01       	movw	r26, r24
    6b62:	01 c0       	rjmp	.+2      	; 0x6b66 <memset+0x6>
    6b64:	6d 93       	st	X+, r22
    6b66:	41 50       	subi	r20, 0x01	; 1
    6b68:	50 40       	sbci	r21, 0x00	; 0
    6b6a:	e0 f7       	brcc	.-8      	; 0x6b64 <memset+0x4>
    6b6c:	08 95       	ret

00006b6e <strcasestr>:
    6b6e:	fb 01       	movw	r30, r22
    6b70:	51 91       	ld	r21, Z+
    6b72:	55 23       	and	r21, r21
    6b74:	b1 f0       	breq	.+44     	; 0x6ba2 <strcasestr+0x34>
    6b76:	bf 01       	movw	r22, r30
    6b78:	dc 01       	movw	r26, r24
    6b7a:	05 2e       	mov	r0, r21
    6b7c:	4d 91       	ld	r20, X+
    6b7e:	44 23       	and	r20, r20
    6b80:	69 f0       	breq	.+26     	; 0x6b9c <strcasestr+0x2e>
    6b82:	10 d0       	rcall	.+32     	; 0x6ba4 <strcasestr+0x36>
    6b84:	d9 f7       	brne	.-10     	; 0x6b7c <strcasestr+0xe>
    6b86:	cd 01       	movw	r24, r26
    6b88:	01 90       	ld	r0, Z+
    6b8a:	00 20       	and	r0, r0
    6b8c:	49 f0       	breq	.+18     	; 0x6ba0 <strcasestr+0x32>
    6b8e:	4d 91       	ld	r20, X+
    6b90:	41 11       	cpse	r20, r1
    6b92:	08 d0       	rcall	.+16     	; 0x6ba4 <strcasestr+0x36>
    6b94:	c9 f3       	breq	.-14     	; 0x6b88 <strcasestr+0x1a>
    6b96:	fb 01       	movw	r30, r22
    6b98:	41 11       	cpse	r20, r1
    6b9a:	ee cf       	rjmp	.-36     	; 0x6b78 <strcasestr+0xa>
    6b9c:	81 e0       	ldi	r24, 0x01	; 1
    6b9e:	90 e0       	ldi	r25, 0x00	; 0
    6ba0:	01 97       	sbiw	r24, 0x01	; 1
    6ba2:	08 95       	ret
    6ba4:	40 25       	eor	r20, r0
    6ba6:	39 f0       	breq	.+14     	; 0x6bb6 <strcasestr+0x48>
    6ba8:	40 32       	cpi	r20, 0x20	; 32
    6baa:	29 f4       	brne	.+10     	; 0x6bb6 <strcasestr+0x48>
    6bac:	40 29       	or	r20, r0
    6bae:	4b 57       	subi	r20, 0x7B	; 123
    6bb0:	46 5e       	subi	r20, 0xE6	; 230
    6bb2:	08 f0       	brcs	.+2      	; 0x6bb6 <strcasestr+0x48>
    6bb4:	18 94       	sez
    6bb6:	08 95       	ret

00006bb8 <strcat>:
    6bb8:	fb 01       	movw	r30, r22
    6bba:	dc 01       	movw	r26, r24
    6bbc:	0d 90       	ld	r0, X+
    6bbe:	00 20       	and	r0, r0
    6bc0:	e9 f7       	brne	.-6      	; 0x6bbc <strcat+0x4>
    6bc2:	11 97       	sbiw	r26, 0x01	; 1
    6bc4:	01 90       	ld	r0, Z+
    6bc6:	0d 92       	st	X+, r0
    6bc8:	00 20       	and	r0, r0
    6bca:	e1 f7       	brne	.-8      	; 0x6bc4 <strcat+0xc>
    6bcc:	08 95       	ret

00006bce <strcpy>:
    6bce:	fb 01       	movw	r30, r22
    6bd0:	dc 01       	movw	r26, r24
    6bd2:	01 90       	ld	r0, Z+
    6bd4:	0d 92       	st	X+, r0
    6bd6:	00 20       	and	r0, r0
    6bd8:	e1 f7       	brne	.-8      	; 0x6bd2 <strcpy+0x4>
    6bda:	08 95       	ret

00006bdc <strncasecmp>:
    6bdc:	fb 01       	movw	r30, r22
    6bde:	dc 01       	movw	r26, r24
    6be0:	41 50       	subi	r20, 0x01	; 1
    6be2:	50 40       	sbci	r21, 0x00	; 0
    6be4:	88 f0       	brcs	.+34     	; 0x6c08 <strncasecmp+0x2c>
    6be6:	8d 91       	ld	r24, X+
    6be8:	81 34       	cpi	r24, 0x41	; 65
    6bea:	1c f0       	brlt	.+6      	; 0x6bf2 <strncasecmp+0x16>
    6bec:	8b 35       	cpi	r24, 0x5B	; 91
    6bee:	0c f4       	brge	.+2      	; 0x6bf2 <strncasecmp+0x16>
    6bf0:	80 5e       	subi	r24, 0xE0	; 224
    6bf2:	61 91       	ld	r22, Z+
    6bf4:	61 34       	cpi	r22, 0x41	; 65
    6bf6:	1c f0       	brlt	.+6      	; 0x6bfe <strncasecmp+0x22>
    6bf8:	6b 35       	cpi	r22, 0x5B	; 91
    6bfa:	0c f4       	brge	.+2      	; 0x6bfe <strncasecmp+0x22>
    6bfc:	60 5e       	subi	r22, 0xE0	; 224
    6bfe:	86 1b       	sub	r24, r22
    6c00:	61 11       	cpse	r22, r1
    6c02:	71 f3       	breq	.-36     	; 0x6be0 <strncasecmp+0x4>
    6c04:	99 0b       	sbc	r25, r25
    6c06:	08 95       	ret
    6c08:	88 1b       	sub	r24, r24
    6c0a:	fc cf       	rjmp	.-8      	; 0x6c04 <strncasecmp+0x28>

00006c0c <strnlen>:
    6c0c:	fc 01       	movw	r30, r24
    6c0e:	61 50       	subi	r22, 0x01	; 1
    6c10:	70 40       	sbci	r23, 0x00	; 0
    6c12:	01 90       	ld	r0, Z+
    6c14:	01 10       	cpse	r0, r1
    6c16:	d8 f7       	brcc	.-10     	; 0x6c0e <strnlen+0x2>
    6c18:	80 95       	com	r24
    6c1a:	90 95       	com	r25
    6c1c:	8e 0f       	add	r24, r30
    6c1e:	9f 1f       	adc	r25, r31
    6c20:	08 95       	ret

00006c22 <fputc>:
    6c22:	0f 93       	push	r16
    6c24:	1f 93       	push	r17
    6c26:	cf 93       	push	r28
    6c28:	df 93       	push	r29
    6c2a:	fb 01       	movw	r30, r22
    6c2c:	23 81       	ldd	r18, Z+3	; 0x03
    6c2e:	21 fd       	sbrc	r18, 1
    6c30:	03 c0       	rjmp	.+6      	; 0x6c38 <fputc+0x16>
    6c32:	8f ef       	ldi	r24, 0xFF	; 255
    6c34:	9f ef       	ldi	r25, 0xFF	; 255
    6c36:	2c c0       	rjmp	.+88     	; 0x6c90 <fputc+0x6e>
    6c38:	22 ff       	sbrs	r18, 2
    6c3a:	16 c0       	rjmp	.+44     	; 0x6c68 <fputc+0x46>
    6c3c:	46 81       	ldd	r20, Z+6	; 0x06
    6c3e:	57 81       	ldd	r21, Z+7	; 0x07
    6c40:	24 81       	ldd	r18, Z+4	; 0x04
    6c42:	35 81       	ldd	r19, Z+5	; 0x05
    6c44:	42 17       	cp	r20, r18
    6c46:	53 07       	cpc	r21, r19
    6c48:	44 f4       	brge	.+16     	; 0x6c5a <fputc+0x38>
    6c4a:	a0 81       	ld	r26, Z
    6c4c:	b1 81       	ldd	r27, Z+1	; 0x01
    6c4e:	9d 01       	movw	r18, r26
    6c50:	2f 5f       	subi	r18, 0xFF	; 255
    6c52:	3f 4f       	sbci	r19, 0xFF	; 255
    6c54:	31 83       	std	Z+1, r19	; 0x01
    6c56:	20 83       	st	Z, r18
    6c58:	8c 93       	st	X, r24
    6c5a:	26 81       	ldd	r18, Z+6	; 0x06
    6c5c:	37 81       	ldd	r19, Z+7	; 0x07
    6c5e:	2f 5f       	subi	r18, 0xFF	; 255
    6c60:	3f 4f       	sbci	r19, 0xFF	; 255
    6c62:	37 83       	std	Z+7, r19	; 0x07
    6c64:	26 83       	std	Z+6, r18	; 0x06
    6c66:	14 c0       	rjmp	.+40     	; 0x6c90 <fputc+0x6e>
    6c68:	8b 01       	movw	r16, r22
    6c6a:	ec 01       	movw	r28, r24
    6c6c:	fb 01       	movw	r30, r22
    6c6e:	00 84       	ldd	r0, Z+8	; 0x08
    6c70:	f1 85       	ldd	r31, Z+9	; 0x09
    6c72:	e0 2d       	mov	r30, r0
    6c74:	19 95       	eicall
    6c76:	89 2b       	or	r24, r25
    6c78:	e1 f6       	brne	.-72     	; 0x6c32 <fputc+0x10>
    6c7a:	d8 01       	movw	r26, r16
    6c7c:	16 96       	adiw	r26, 0x06	; 6
    6c7e:	8d 91       	ld	r24, X+
    6c80:	9c 91       	ld	r25, X
    6c82:	17 97       	sbiw	r26, 0x07	; 7
    6c84:	01 96       	adiw	r24, 0x01	; 1
    6c86:	17 96       	adiw	r26, 0x07	; 7
    6c88:	9c 93       	st	X, r25
    6c8a:	8e 93       	st	-X, r24
    6c8c:	16 97       	sbiw	r26, 0x06	; 6
    6c8e:	ce 01       	movw	r24, r28
    6c90:	df 91       	pop	r29
    6c92:	cf 91       	pop	r28
    6c94:	1f 91       	pop	r17
    6c96:	0f 91       	pop	r16
    6c98:	08 95       	ret

00006c9a <putchar>:
    6c9a:	60 91 88 15 	lds	r22, 0x1588	; 0x801588 <__iob+0x2>
    6c9e:	70 91 89 15 	lds	r23, 0x1589	; 0x801589 <__iob+0x3>
    6ca2:	bf cf       	rjmp	.-130    	; 0x6c22 <fputc>

00006ca4 <sprintf>:
    6ca4:	0f 93       	push	r16
    6ca6:	1f 93       	push	r17
    6ca8:	cf 93       	push	r28
    6caa:	df 93       	push	r29
    6cac:	cd b7       	in	r28, 0x3d	; 61
    6cae:	de b7       	in	r29, 0x3e	; 62
    6cb0:	2e 97       	sbiw	r28, 0x0e	; 14
    6cb2:	0f b6       	in	r0, 0x3f	; 63
    6cb4:	f8 94       	cli
    6cb6:	de bf       	out	0x3e, r29	; 62
    6cb8:	0f be       	out	0x3f, r0	; 63
    6cba:	cd bf       	out	0x3d, r28	; 61
    6cbc:	0e 89       	ldd	r16, Y+22	; 0x16
    6cbe:	1f 89       	ldd	r17, Y+23	; 0x17
    6cc0:	86 e0       	ldi	r24, 0x06	; 6
    6cc2:	8c 83       	std	Y+4, r24	; 0x04
    6cc4:	1a 83       	std	Y+2, r17	; 0x02
    6cc6:	09 83       	std	Y+1, r16	; 0x01
    6cc8:	8f ef       	ldi	r24, 0xFF	; 255
    6cca:	9f e7       	ldi	r25, 0x7F	; 127
    6ccc:	9e 83       	std	Y+6, r25	; 0x06
    6cce:	8d 83       	std	Y+5, r24	; 0x05
    6cd0:	ae 01       	movw	r20, r28
    6cd2:	46 5e       	subi	r20, 0xE6	; 230
    6cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    6cd6:	68 8d       	ldd	r22, Y+24	; 0x18
    6cd8:	79 8d       	ldd	r23, Y+25	; 0x19
    6cda:	ce 01       	movw	r24, r28
    6cdc:	01 96       	adiw	r24, 0x01	; 1
    6cde:	34 d8       	rcall	.-3992   	; 0x5d48 <vfprintf>
    6ce0:	ef 81       	ldd	r30, Y+7	; 0x07
    6ce2:	f8 85       	ldd	r31, Y+8	; 0x08
    6ce4:	e0 0f       	add	r30, r16
    6ce6:	f1 1f       	adc	r31, r17
    6ce8:	10 82       	st	Z, r1
    6cea:	2e 96       	adiw	r28, 0x0e	; 14
    6cec:	0f b6       	in	r0, 0x3f	; 63
    6cee:	f8 94       	cli
    6cf0:	de bf       	out	0x3e, r29	; 62
    6cf2:	0f be       	out	0x3f, r0	; 63
    6cf4:	cd bf       	out	0x3d, r28	; 61
    6cf6:	df 91       	pop	r29
    6cf8:	cf 91       	pop	r28
    6cfa:	1f 91       	pop	r17
    6cfc:	0f 91       	pop	r16
    6cfe:	08 95       	ret

00006d00 <vprintf>:
    6d00:	ab 01       	movw	r20, r22
    6d02:	bc 01       	movw	r22, r24
    6d04:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <__iob+0x2>
    6d08:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <__iob+0x3>
    6d0c:	1d c8       	rjmp	.-4038   	; 0x5d48 <vfprintf>

00006d0e <__ultoa_invert>:
    6d0e:	fa 01       	movw	r30, r20
    6d10:	aa 27       	eor	r26, r26
    6d12:	28 30       	cpi	r18, 0x08	; 8
    6d14:	51 f1       	breq	.+84     	; 0x6d6a <__ultoa_invert+0x5c>
    6d16:	20 31       	cpi	r18, 0x10	; 16
    6d18:	81 f1       	breq	.+96     	; 0x6d7a <__ultoa_invert+0x6c>
    6d1a:	e8 94       	clt
    6d1c:	6f 93       	push	r22
    6d1e:	6e 7f       	andi	r22, 0xFE	; 254
    6d20:	6e 5f       	subi	r22, 0xFE	; 254
    6d22:	7f 4f       	sbci	r23, 0xFF	; 255
    6d24:	8f 4f       	sbci	r24, 0xFF	; 255
    6d26:	9f 4f       	sbci	r25, 0xFF	; 255
    6d28:	af 4f       	sbci	r26, 0xFF	; 255
    6d2a:	b1 e0       	ldi	r27, 0x01	; 1
    6d2c:	3e d0       	rcall	.+124    	; 0x6daa <__ultoa_invert+0x9c>
    6d2e:	b4 e0       	ldi	r27, 0x04	; 4
    6d30:	3c d0       	rcall	.+120    	; 0x6daa <__ultoa_invert+0x9c>
    6d32:	67 0f       	add	r22, r23
    6d34:	78 1f       	adc	r23, r24
    6d36:	89 1f       	adc	r24, r25
    6d38:	9a 1f       	adc	r25, r26
    6d3a:	a1 1d       	adc	r26, r1
    6d3c:	68 0f       	add	r22, r24
    6d3e:	79 1f       	adc	r23, r25
    6d40:	8a 1f       	adc	r24, r26
    6d42:	91 1d       	adc	r25, r1
    6d44:	a1 1d       	adc	r26, r1
    6d46:	6a 0f       	add	r22, r26
    6d48:	71 1d       	adc	r23, r1
    6d4a:	81 1d       	adc	r24, r1
    6d4c:	91 1d       	adc	r25, r1
    6d4e:	a1 1d       	adc	r26, r1
    6d50:	20 d0       	rcall	.+64     	; 0x6d92 <__ultoa_invert+0x84>
    6d52:	09 f4       	brne	.+2      	; 0x6d56 <__ultoa_invert+0x48>
    6d54:	68 94       	set
    6d56:	3f 91       	pop	r19
    6d58:	2a e0       	ldi	r18, 0x0A	; 10
    6d5a:	26 9f       	mul	r18, r22
    6d5c:	11 24       	eor	r1, r1
    6d5e:	30 19       	sub	r19, r0
    6d60:	30 5d       	subi	r19, 0xD0	; 208
    6d62:	31 93       	st	Z+, r19
    6d64:	de f6       	brtc	.-74     	; 0x6d1c <__ultoa_invert+0xe>
    6d66:	cf 01       	movw	r24, r30
    6d68:	08 95       	ret
    6d6a:	46 2f       	mov	r20, r22
    6d6c:	47 70       	andi	r20, 0x07	; 7
    6d6e:	40 5d       	subi	r20, 0xD0	; 208
    6d70:	41 93       	st	Z+, r20
    6d72:	b3 e0       	ldi	r27, 0x03	; 3
    6d74:	0f d0       	rcall	.+30     	; 0x6d94 <__ultoa_invert+0x86>
    6d76:	c9 f7       	brne	.-14     	; 0x6d6a <__ultoa_invert+0x5c>
    6d78:	f6 cf       	rjmp	.-20     	; 0x6d66 <__ultoa_invert+0x58>
    6d7a:	46 2f       	mov	r20, r22
    6d7c:	4f 70       	andi	r20, 0x0F	; 15
    6d7e:	40 5d       	subi	r20, 0xD0	; 208
    6d80:	4a 33       	cpi	r20, 0x3A	; 58
    6d82:	18 f0       	brcs	.+6      	; 0x6d8a <__ultoa_invert+0x7c>
    6d84:	49 5d       	subi	r20, 0xD9	; 217
    6d86:	31 fd       	sbrc	r19, 1
    6d88:	40 52       	subi	r20, 0x20	; 32
    6d8a:	41 93       	st	Z+, r20
    6d8c:	02 d0       	rcall	.+4      	; 0x6d92 <__ultoa_invert+0x84>
    6d8e:	a9 f7       	brne	.-22     	; 0x6d7a <__ultoa_invert+0x6c>
    6d90:	ea cf       	rjmp	.-44     	; 0x6d66 <__ultoa_invert+0x58>
    6d92:	b4 e0       	ldi	r27, 0x04	; 4
    6d94:	a6 95       	lsr	r26
    6d96:	97 95       	ror	r25
    6d98:	87 95       	ror	r24
    6d9a:	77 95       	ror	r23
    6d9c:	67 95       	ror	r22
    6d9e:	ba 95       	dec	r27
    6da0:	c9 f7       	brne	.-14     	; 0x6d94 <__ultoa_invert+0x86>
    6da2:	00 97       	sbiw	r24, 0x00	; 0
    6da4:	61 05       	cpc	r22, r1
    6da6:	71 05       	cpc	r23, r1
    6da8:	08 95       	ret
    6daa:	9b 01       	movw	r18, r22
    6dac:	ac 01       	movw	r20, r24
    6dae:	0a 2e       	mov	r0, r26
    6db0:	06 94       	lsr	r0
    6db2:	57 95       	ror	r21
    6db4:	47 95       	ror	r20
    6db6:	37 95       	ror	r19
    6db8:	27 95       	ror	r18
    6dba:	ba 95       	dec	r27
    6dbc:	c9 f7       	brne	.-14     	; 0x6db0 <__ultoa_invert+0xa2>
    6dbe:	62 0f       	add	r22, r18
    6dc0:	73 1f       	adc	r23, r19
    6dc2:	84 1f       	adc	r24, r20
    6dc4:	95 1f       	adc	r25, r21
    6dc6:	a0 1d       	adc	r26, r0
    6dc8:	08 95       	ret

00006dca <_exit>:
    6dca:	f8 94       	cli

00006dcc <__stop_program>:
    6dcc:	ff cf       	rjmp	.-2      	; 0x6dcc <__stop_program>
