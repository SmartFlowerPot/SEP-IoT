
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b0  00800200  00007280  00007314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e23  008007b0  008007b0  000078c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000078c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c10  00000000  00000000  00007960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eb92  00000000  00000000  00008570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b38  00000000  00000000  00017102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000074af  00000000  00000000  0001ac3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b48  00000000  00000000  000220ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a85  00000000  00000000  00024c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d6ba  00000000  00000000  000296b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  00036d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 90 2b 	jmp	0x5720	; 0x5720 <__vector_25>
      68:	0c 94 e2 2b 	jmp	0x57c4	; 0x57c4 <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 26 2c 	jmp	0x584c	; 0x584c <__vector_36>
      94:	0c 94 78 2c 	jmp	0x58f0	; 0x58f0 <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 90 30 	jmp	0x6120	; 0x6120 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 bc 2c 	jmp	0x5978	; 0x5978 <__vector_51>
      d0:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 52 2d 	jmp	0x5aa4	; 0x5aa4 <__vector_54>
      dc:	0c 94 a4 2d 	jmp	0x5b48	; 0x5b48 <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e 21       	and	r25, r14
      e6:	9e 21       	and	r25, r14
      e8:	9e 21       	and	r25, r14
      ea:	d5 21       	and	r29, r5
      ec:	dd 21       	and	r29, r13
      ee:	f2 21       	and	r31, r2
      f0:	9e 21       	and	r25, r14
      f2:	9e 21       	and	r25, r14
      f4:	d5 21       	and	r29, r5
      f6:	dd 21       	and	r29, r13
      f8:	b2 30       	cpi	r27, 0x02	; 2
      fa:	22 31       	cpi	r18, 0x12	; 18
      fc:	22 31       	cpi	r18, 0x12	; 18
      fe:	22 31       	cpi	r18, 0x12	; 18
     100:	22 31       	cpi	r18, 0x12	; 18
     102:	22 31       	cpi	r18, 0x12	; 18
     104:	22 31       	cpi	r18, 0x12	; 18
     106:	22 31       	cpi	r18, 0x12	; 18
     108:	b2 30       	cpi	r27, 0x02	; 2
     10a:	22 31       	cpi	r18, 0x12	; 18
     10c:	22 31       	cpi	r18, 0x12	; 18
     10e:	22 31       	cpi	r18, 0x12	; 18
     110:	22 31       	cpi	r18, 0x12	; 18
     112:	22 31       	cpi	r18, 0x12	; 18
     114:	22 31       	cpi	r18, 0x12	; 18
     116:	22 31       	cpi	r18, 0x12	; 18
     118:	b4 30       	cpi	r27, 0x04	; 4
     11a:	22 31       	cpi	r18, 0x12	; 18
     11c:	22 31       	cpi	r18, 0x12	; 18
     11e:	22 31       	cpi	r18, 0x12	; 18
     120:	22 31       	cpi	r18, 0x12	; 18
     122:	22 31       	cpi	r18, 0x12	; 18
     124:	22 31       	cpi	r18, 0x12	; 18
     126:	22 31       	cpi	r18, 0x12	; 18
     128:	22 31       	cpi	r18, 0x12	; 18
     12a:	22 31       	cpi	r18, 0x12	; 18
     12c:	22 31       	cpi	r18, 0x12	; 18
     12e:	22 31       	cpi	r18, 0x12	; 18
     130:	22 31       	cpi	r18, 0x12	; 18
     132:	22 31       	cpi	r18, 0x12	; 18
     134:	22 31       	cpi	r18, 0x12	; 18
     136:	22 31       	cpi	r18, 0x12	; 18
     138:	b4 30       	cpi	r27, 0x04	; 4
     13a:	22 31       	cpi	r18, 0x12	; 18
     13c:	22 31       	cpi	r18, 0x12	; 18
     13e:	22 31       	cpi	r18, 0x12	; 18
     140:	22 31       	cpi	r18, 0x12	; 18
     142:	22 31       	cpi	r18, 0x12	; 18
     144:	22 31       	cpi	r18, 0x12	; 18
     146:	22 31       	cpi	r18, 0x12	; 18
     148:	22 31       	cpi	r18, 0x12	; 18
     14a:	22 31       	cpi	r18, 0x12	; 18
     14c:	22 31       	cpi	r18, 0x12	; 18
     14e:	22 31       	cpi	r18, 0x12	; 18
     150:	22 31       	cpi	r18, 0x12	; 18
     152:	22 31       	cpi	r18, 0x12	; 18
     154:	22 31       	cpi	r18, 0x12	; 18
     156:	22 31       	cpi	r18, 0x12	; 18
     158:	1e 31       	cpi	r17, 0x1E	; 30
     15a:	22 31       	cpi	r18, 0x12	; 18
     15c:	22 31       	cpi	r18, 0x12	; 18
     15e:	22 31       	cpi	r18, 0x12	; 18
     160:	22 31       	cpi	r18, 0x12	; 18
     162:	22 31       	cpi	r18, 0x12	; 18
     164:	22 31       	cpi	r18, 0x12	; 18
     166:	22 31       	cpi	r18, 0x12	; 18
     168:	e9 30       	cpi	r30, 0x09	; 9
     16a:	22 31       	cpi	r18, 0x12	; 18
     16c:	22 31       	cpi	r18, 0x12	; 18
     16e:	22 31       	cpi	r18, 0x12	; 18
     170:	22 31       	cpi	r18, 0x12	; 18
     172:	22 31       	cpi	r18, 0x12	; 18
     174:	22 31       	cpi	r18, 0x12	; 18
     176:	22 31       	cpi	r18, 0x12	; 18
     178:	22 31       	cpi	r18, 0x12	; 18
     17a:	22 31       	cpi	r18, 0x12	; 18
     17c:	22 31       	cpi	r18, 0x12	; 18
     17e:	22 31       	cpi	r18, 0x12	; 18
     180:	22 31       	cpi	r18, 0x12	; 18
     182:	22 31       	cpi	r18, 0x12	; 18
     184:	22 31       	cpi	r18, 0x12	; 18
     186:	22 31       	cpi	r18, 0x12	; 18
     188:	dd 30       	cpi	r29, 0x0D	; 13
     18a:	22 31       	cpi	r18, 0x12	; 18
     18c:	22 31       	cpi	r18, 0x12	; 18
     18e:	22 31       	cpi	r18, 0x12	; 18
     190:	22 31       	cpi	r18, 0x12	; 18
     192:	22 31       	cpi	r18, 0x12	; 18
     194:	22 31       	cpi	r18, 0x12	; 18
     196:	22 31       	cpi	r18, 0x12	; 18
     198:	01 31       	cpi	r16, 0x11	; 17

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 df 13 	call	0x27be	; 0x27be <prvCheckTasksWaitingTermination>
     2a0:	80 91 f7 13 	lds	r24, 0x13F7	; 0x8013f7 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
     2ac:	0e 94 1b 22 	call	0x4436	; 0x4436 <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 10 21 	call	0x4220	; 0x4220 <prvProcessTimerOrBlockTask>
     2ca:	0e 94 67 21 	call	0x42ce	; 0x42ce <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	17 e0       	ldi	r17, 0x07	; 7
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	e0 e8       	ldi	r30, 0x80	; 128
     2e8:	f2 e7       	ldi	r31, 0x72	; 114
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a0 3b       	cpi	r26, 0xB0	; 176
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	25 e1       	ldi	r18, 0x15	; 21
     2fc:	a0 eb       	ldi	r26, 0xB0	; 176
     2fe:	b7 e0       	ldi	r27, 0x07	; 7
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a3 3d       	cpi	r26, 0xD3	; 211
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 af 22 	call	0x455e	; 0x455e <main>
     30e:	0c 94 3e 39 	jmp	0x727c	; 0x727c <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:

/*
* Callback function called by the driver when the new CO2 measure is received.
*/
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 b2 15 	sts	0x15B2, r25	; 0x8015b2 <ppm+0x1>
     318:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:
}

/*
* Task for taking the CO2 measurements and setting the CO2 value accordingly.
*/
void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <xTaskGetTickCount>
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     336:	40 ee       	ldi	r20, 0xE0	; 224
     338:	53 e0       	ldi	r21, 0x03	; 3
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <xTaskDelayUntil>
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     346:	40 91 b3 15 	lds	r20, 0x15B3	; 0x8015b3 <ready_bit>
     34a:	50 91 b4 15 	lds	r21, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     34e:	60 91 b5 15 	lds	r22, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     352:	70 91 b6 15 	lds	r23, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     356:	cc 24       	eor	r12, r12
     358:	ca 94       	dec	r12
     35a:	dc 2c       	mov	r13, r12
     35c:	76 01       	movw	r14, r12
     35e:	01 e0       	ldi	r16, 0x01	; 1
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <group_start>
     366:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <group_start+0x1>
     36a:	f3 d5       	rcall	.+3046   	; 0xf52 <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     36c:	00 91 b3 15 	lds	r16, 0x15B3	; 0x8015b3 <ready_bit>
     370:	10 91 b4 15 	lds	r17, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     374:	20 91 b5 15 	lds	r18, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     378:	30 91 b6 15 	lds	r19, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	80 23       	and	r24, r16
     382:	91 23       	and	r25, r17
     384:	a2 23       	and	r26, r18
     386:	b3 23       	and	r27, r19
     388:	08 17       	cp	r16, r24
     38a:	19 07       	cpc	r17, r25
     38c:	2a 07       	cpc	r18, r26
     38e:	3b 07       	cpc	r19, r27
     390:	91 f6       	brne	.-92     	; 0x336 <startReadingCO2+0x18>
			rc = mh_z19_takeMeassuring();
     392:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <mh_z19_takeMeassuring>
     396:	80 93 b0 15 	sts	0x15B0, r24	; 0x8015b0 <rc>
			if (rc != MHZ19_OK){
     39a:	81 11       	cpse	r24, r1
				// Something went wrong
				} else {
				set_co2_mutex();
     39c:	cc cf       	rjmp	.-104    	; 0x336 <startReadingCO2+0x18>
     39e:	c3 d2       	rcall	.+1414   	; 0x926 <set_co2_mutex>
     3a0:	ca cf       	rjmp	.-108    	; 0x336 <startReadingCO2+0x18>

000003a2 <CO2_handler_init>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	08 2f       	mov	r16, r24
     3ae:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     3b0:	40 91 b3 15 	lds	r20, 0x15B3	; 0x8015b3 <ready_bit>
     3b4:	50 91 b4 15 	lds	r21, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     3b8:	60 91 b5 15 	lds	r22, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     3bc:	70 91 b6 15 	lds	r23, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     3c0:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <group_start>
     3c4:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <group_start+0x1>
     3c8:	64 d6       	rcall	.+3272   	; 0x1092 <xEventGroupSetBits>

	xTaskCreate(
     3ca:	e1 2c       	mov	r14, r1
     3cc:	f1 2c       	mov	r15, r1
     3ce:	9e 01       	movw	r18, r28
     3d0:	44 e2       	ldi	r20, 0x24	; 36
     3d2:	51 e0       	ldi	r21, 0x01	; 1
     3d4:	6f e6       	ldi	r22, 0x6F	; 111
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	8f e8       	ldi	r24, 0x8F	; 143
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 a6 14 	call	0x294c	; 0x294c <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <createCO2>:
/*
* Method used for allocating memory for CO2 struct and returning it, initializing the CO2 value to 0, setting groups and bits,
* initializing the driver, injecting callback and creating a CO2 task.
*/
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     3ec:	af 92       	push	r10
     3ee:	bf 92       	push	r11
     3f0:	cf 92       	push	r12
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	8c 01       	movw	r16, r24
     402:	5b 01       	movw	r10, r22
     404:	69 01       	movw	r12, r18
     406:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <malloc>
     410:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     412:	89 2b       	or	r24, r25
     414:	11 f1       	breq	.+68     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     416:	19 82       	std	Y+1, r1	; 0x01
     418:	18 82       	st	Y, r1
	
	group_start = taskBits;
     41a:	b0 92 b8 15 	sts	0x15B8, r11	; 0x8015b8 <group_start+0x1>
     41e:	a0 92 b7 15 	sts	0x15B7, r10	; 0x8015b7 <group_start>
	ready_bit = bit;
     422:	c0 92 b3 15 	sts	0x15B3, r12	; 0x8015b3 <ready_bit>
     426:	d0 92 b4 15 	sts	0x15B4, r13	; 0x8015b4 <ready_bit+0x1>
     42a:	e0 92 b5 15 	sts	0x15B5, r14	; 0x8015b5 <ready_bit+0x2>
     42e:	f0 92 b6 15 	sts	0x15B6, r15	; 0x8015b6 <ready_bit+0x3>
	
	mh_z19_initialise(ser_USART3);
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	0e 94 bf 29 	call	0x537e	; 0x537e <mh_z19_initialise>
	print_sharedf("CO2 sensor initialized");
     438:	87 e7       	ldi	r24, 0x77	; 119
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	83 d1       	rcall	.+774    	; 0x748 <print_sharedf>
	mh_z19_injectCallBack(CO2_callback);
     442:	8a e8       	ldi	r24, 0x8A	; 138
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     44a:	be 01       	movw	r22, r28
     44c:	c8 01       	movw	r24, r16
     44e:	a9 df       	rcall	.-174    	; 0x3a2 <CO2_handler_init>
	return new_measure;
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	8c 2f       	mov	r24, r28
     456:	9d 2f       	mov	r25, r29
     458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
	print_sharedf("CO2 sensor initialized");
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	bf 90       	pop	r11
     470:	af 90       	pop	r10
     472:	08 95       	ret

00000474 <getCO2>:
/*
* Method used for returning the CO2 value.
*/
uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     474:	fc 01       	movw	r30, r24
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	08 95       	ret

0000047c <set_co2>:

void set_co2(CO2_t self){
	((CO2_t)self)->CO2 = ppm;
     47c:	20 91 b1 15 	lds	r18, 0x15B1	; 0x8015b1 <ppm>
     480:	30 91 b2 15 	lds	r19, 0x15B2	; 0x8015b2 <ppm+0x1>
     484:	fc 01       	movw	r30, r24
     486:	31 83       	std	Z+1, r19	; 0x01
     488:	20 83       	st	Z, r18
     48a:	08 95       	ret

0000048c <DownLinkHandler_Create>:
void lora_downlink_handler_task(void* messageBuffer);

/*
* Function that creates the listener task
*/
void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	9b 01       	movw	r18, r22
	xTaskCreate(
     494:	e1 2c       	mov	r14, r1
     496:	f1 2c       	mov	r15, r1
     498:	08 2f       	mov	r16, r24
     49a:	48 e8       	ldi	r20, 0x88	; 136
     49c:	51 e0       	ldi	r21, 0x01	; 1
     49e:	6e e8       	ldi	r22, 0x8E	; 142
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	8b e9       	ldi	r24, 0x9B	; 155
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 a6 14 	call	0x294c	; 0x294c <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	08 95       	ret

000004b2 <lora_DownLinkHandler_StartTask>:

/*
* Function that contains task body and accepts incoming messages to open/close the window
*/
void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
	
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     4ba:	0f ef       	ldi	r16, 0xFF	; 255
     4bc:	1f ef       	ldi	r17, 0xFF	; 255
     4be:	98 01       	movw	r18, r16
     4c0:	46 e1       	ldi	r20, 0x16	; 22
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 eb       	ldi	r22, 0xB0	; 176
     4c6:	77 e0       	ldi	r23, 0x07	; 7
     4c8:	0e 94 0b 12 	call	0x2416	; 0x2416 <xStreamBufferReceive>
	print_sharedf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     4cc:	c0 eb       	ldi	r28, 0xB0	; 176
     4ce:	d7 e0       	ldi	r29, 0x07	; 7
     4d0:	99 81       	ldd	r25, Y+1	; 0x01
     4d2:	88 81       	ld	r24, Y
     4d4:	1f 92       	push	r1
     4d6:	9f 93       	push	r25
     4d8:	1f 92       	push	r1
     4da:	8f 93       	push	r24
     4dc:	88 ea       	ldi	r24, 0xA8	; 168
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	31 d1       	rcall	.+610    	; 0x748 <print_sharedf>
	if (1 == downlinkPayload.len){
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	d1 f4       	brne	.+52     	; 0x52c <lora_DownLinkHandler_StartTask+0x7a>
		if(downlinkPayload.bytes[0] == 1){
     4f8:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <__data_end+0x2>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	59 f4       	brne	.+22     	; 0x516 <lora_DownLinkHandler_StartTask+0x64>
			rc_servo_setPosition(1,-100); // fully open
     500:	6c e9       	ldi	r22, 0x9C	; 156
     502:	0e 94 18 2a 	call	0x5430	; 0x5430 <rc_servo_setPosition>
			print_sharedf("Window opened");
     506:	89 ed       	ldi	r24, 0xD9	; 217
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	1c d1       	rcall	.+568    	; 0x748 <print_sharedf>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0b c0       	rjmp	.+22     	; 0x52c <lora_DownLinkHandler_StartTask+0x7a>
		}
		else{
			rc_servo_setPosition(1, 100); // fully close
     516:	64 e6       	ldi	r22, 0x64	; 100
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 18 2a 	call	0x5430	; 0x5430 <rc_servo_setPosition>
			print_sharedf("Window closed");
     51e:	87 ee       	ldi	r24, 0xE7	; 231
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	10 d1       	rcall	.+544    	; 0x748 <print_sharedf>
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
		}
		
	}
	
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <lora_downlink_handler_task>:

/*
* Task method used to run
*/
void lora_downlink_handler_task(void* downLinkMessageBuffer){
     536:	ec 01       	movw	r28, r24
	for(;;){
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     538:	ce 01       	movw	r24, r28
     53a:	bb df       	rcall	.-138    	; 0x4b2 <lora_DownLinkHandler_StartTask>
     53c:	fd cf       	rjmp	.-6      	; 0x538 <lora_downlink_handler_task+0x2>

0000053e <tsl2591Callback>:

/*
* Callback function called when the new lux data is fetched.
*/
void tsl2591Callback(tsl2591_returnCode_t rc, LightHandler_t self)
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	00 d0       	rcall	.+0      	; 0x544 <tsl2591Callback+0x6>
     544:	1f 92       	push	r1
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	
	float _lux;
	switch (rc)
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	d9 f4       	brne	.+54     	; 0x584 <tsl2591Callback+0x46>
	{
		case TSL2591_DATA_READY:
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
     54e:	ce 01       	movw	r24, r28
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <tsl2591_getLux>
     556:	81 11       	cpse	r24, r1
     558:	0c c0       	rjmp	.+24     	; 0x572 <tsl2591Callback+0x34>
		{
			lux_val = _lux;
     55a:	69 81       	ldd	r22, Y+1	; 0x01
     55c:	7a 81       	ldd	r23, Y+2	; 0x02
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	0e 94 bc 22 	call	0x4578	; 0x4578 <__fixunssfsi>
     566:	70 93 c7 07 	sts	0x07C7, r23	; 0x8007c7 <lux_val+0x1>
     56a:	60 93 c6 07 	sts	0x07C6, r22	; 0x8007c6 <lux_val>
			//setting data using the shared sensor data c file
			set_light_mutex();
     56e:	35 d2       	rcall	.+1130   	; 0x9da <set_light_mutex>
     570:	09 c0       	rjmp	.+18     	; 0x584 <tsl2591Callback+0x46>
			
		}
		else if( TSL2591_OVERFLOW == rc )
     572:	83 30       	cpi	r24, 0x03	; 3
     574:	39 f4       	brne	.+14     	; 0x584 <tsl2591Callback+0x46>
		{
			print_sharedf("Lux overflow - change gain and integration time\n"); //switch
     576:	85 ef       	ldi	r24, 0xF5	; 245
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	e4 d0       	rcall	.+456    	; 0x748 <print_sharedf>
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
		break;
		
		default:
		break;
	}
}
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <createLightTask>:
} LightHandler;

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void createLightTask(UBaseType_t light_priority, LightHandler_t self){
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	08 2f       	mov	r16, r24
     59e:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     5a0:	40 91 b3 15 	lds	r20, 0x15B3	; 0x8015b3 <ready_bit>
     5a4:	50 91 b4 15 	lds	r21, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     5a8:	60 91 b5 15 	lds	r22, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     5ac:	70 91 b6 15 	lds	r23, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     5b0:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <group_start>
     5b4:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <group_start+0x1>
     5b8:	6c d5       	rcall	.+2776   	; 0x1092 <xEventGroupSetBits>
	
	xTaskCreate(startReadingLight
     5ba:	e1 2c       	mov	r14, r1
     5bc:	f1 2c       	mov	r15, r1
     5be:	9e 01       	movw	r18, r28
     5c0:	48 e8       	ldi	r20, 0x88	; 136
     5c2:	51 e0       	ldi	r21, 0x01	; 1
     5c4:	66 e2       	ldi	r22, 0x26	; 38
     5c6:	73 e0       	ldi	r23, 0x03	; 3
     5c8:	82 e7       	ldi	r24, 0x72	; 114
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	0e 94 a6 14 	call	0x294c	; 0x294c <xTaskCreate>
	, "Light task"
	, configMINIMAL_STACK_SIZE + 200,
	(void*) self,
	light_priority,
	NULL);
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	08 95       	ret

000005dc <createLightSensor>:
/*
* Method used for allocating memory for LightHandler struct and returning it, initializing the lux value to 0, setting groups and bits,
* initializing the driver, injecting callback, enabling the driver and creating a light task.
*/
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	18 2f       	mov	r17, r24
     5f0:	7b 01       	movw	r14, r22
     5f2:	49 01       	movw	r8, r18
     5f4:	5a 01       	movw	r10, r20
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
     5f6:	62 e0       	ldi	r22, 0x02	; 2
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <calloc>
     602:	ec 01       	movw	r28, r24
	
	if(new_measure == NULL){
     604:	89 2b       	or	r24, r25
     606:	19 f1       	breq	.+70     	; 0x64e <createLightSensor+0x72>
		return NULL;
	}
	new_measure -> lux = 0;
     608:	19 82       	std	Y+1, r1	; 0x01
     60a:	18 82       	st	Y, r1
	ready_bit = bits;
     60c:	80 92 b3 15 	sts	0x15B3, r8	; 0x8015b3 <ready_bit>
     610:	90 92 b4 15 	sts	0x15B4, r9	; 0x8015b4 <ready_bit+0x1>
     614:	a0 92 b5 15 	sts	0x15B5, r10	; 0x8015b5 <ready_bit+0x2>
     618:	b0 92 b6 15 	sts	0x15B6, r11	; 0x8015b6 <ready_bit+0x3>
	group_start = eventBits;
     61c:	f0 92 b8 15 	sts	0x15B8, r15	; 0x8015b8 <group_start+0x1>
     620:	e0 92 b7 15 	sts	0x15B7, r14	; 0x8015b7 <group_start>
	
	//initialize sensor with the callback function
	if ( TSL2591_OK == tsl2591_initialise(tsl2591Callback))
     624:	8f e9       	ldi	r24, 0x9F	; 159
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <tsl2591_initialise>
     62c:	81 11       	cpse	r24, r1
     62e:	07 c0       	rjmp	.+14     	; 0x63e <createLightSensor+0x62>
	{
		print_sharedf("Light sensor initialized");
     630:	81 e3       	ldi	r24, 0x31	; 49
     632:	93 e0       	ldi	r25, 0x03	; 3
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	87 d0       	rcall	.+270    	; 0x748 <print_sharedf>
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
	}
	
	//enable sensor
	if ( TSL2591_OK != tsl2591_enable() )
     63e:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <tsl2591_enable>
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
     642:	be 01       	movw	r22, r28
     644:	81 2f       	mov	r24, r17
     646:	a5 df       	rcall	.-182    	; 0x592 <createLightTask>
	return new_measure;
     648:	8c 2f       	mov	r24, r28
     64a:	9d 2f       	mov	r25, r29
     64c:	02 c0       	rjmp	.+4      	; 0x652 <createLightSensor+0x76>
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
	
	if(new_measure == NULL){
		return NULL;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
	return new_measure;
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <measure_light>:

/*
* Function used for measuring
*/
void measure_light(LightHandler_t self){
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
	
	//set bits
	EventBits_t readyBits = xEventGroupWaitBits(group_start,
     678:	40 91 b3 15 	lds	r20, 0x15B3	; 0x8015b3 <ready_bit>
     67c:	50 91 b4 15 	lds	r21, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     680:	60 91 b5 15 	lds	r22, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     684:	70 91 b6 15 	lds	r23, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     688:	cc 24       	eor	r12, r12
     68a:	ca 94       	dec	r12
     68c:	dc 2c       	mov	r13, r12
     68e:	76 01       	movw	r14, r12
     690:	01 e0       	ldi	r16, 0x01	; 1
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <group_start>
     698:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <group_start+0x1>
     69c:	5a d4       	rcall	.+2228   	; 0xf52 <xEventGroupWaitBits>
	pdFALSE,
	pdTRUE,
	portMAX_DELAY);
	
	//check if all bits are set
	if ((readyBits & (ready_bit)) == (ready_bit)) {
     69e:	00 91 b3 15 	lds	r16, 0x15B3	; 0x8015b3 <ready_bit>
     6a2:	10 91 b4 15 	lds	r17, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     6a6:	20 91 b5 15 	lds	r18, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     6aa:	30 91 b6 15 	lds	r19, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	80 23       	and	r24, r16
     6b4:	91 23       	and	r25, r17
     6b6:	a2 23       	and	r26, r18
     6b8:	b3 23       	and	r27, r19
     6ba:	08 17       	cp	r16, r24
     6bc:	19 07       	cpc	r17, r25
     6be:	2a 07       	cpc	r18, r26
     6c0:	3b 07       	cpc	r19, r27
     6c2:	39 f4       	brne	.+14     	; 0x6d2 <measure_light+0x6c>
		if ( TSL2591_OK != tsl2591_fetchData() )
     6c4:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <tsl2591_fetchData>
     6c8:	81 11       	cpse	r24, r1
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <measure_light+0x6c>
			// Investigate the return code further
		}
		else
		{
			//The light data will be ready after the driver calls the call back function with
			tsl2591Callback(TSL2591_DATA_READY, self);
     6cc:	be 01       	movw	r22, r28
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	36 df       	rcall	.-404    	; 0x53e <tsl2591Callback>
		}
	}
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	08 95       	ret

000006e4 <startReadingLight>:

/*
* Reading task for sensor
*/
void startReadingLight(void* self){
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <startReadingLight+0x6>
     6ea:	1f 92       	push	r1
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     6f2:	0e 94 30 15 	call	0x2a60	; 0x2a60 <xTaskGetTickCount>
     6f6:	69 83       	std	Y+1, r22	; 0x01
     6f8:	7a 83       	std	Y+2, r23	; 0x02
     6fa:	8b 83       	std	Y+3, r24	; 0x03
     6fc:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds to read
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     6fe:	42 ea       	ldi	r20, 0xA2	; 162
     700:	53 e0       	ldi	r21, 0x03	; 3
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <xTaskDelayUntil>
		measure_light((LightHandler_t) self);
     70e:	c8 01       	movw	r24, r16
     710:	aa df       	rcall	.-172    	; 0x666 <measure_light>
     712:	f5 cf       	rjmp	.-22     	; 0x6fe <startReadingLight+0x1a>

00000714 <getLight>:
/*
* Simple getter for the light level
*/
uint16_t getLight(LightHandler_t self){
	return self->lux;
}
     714:	fc 01       	movw	r30, r24
     716:	80 81       	ld	r24, Z
     718:	91 81       	ldd	r25, Z+1	; 0x01
     71a:	08 95       	ret

0000071c <setLight>:

/*
* Simple setter for the light level
*/
void setLight(LightHandler_t self){
		self->lux = lux_val;
     71c:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <lux_val>
     720:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <lux_val+0x1>
     724:	fc 01       	movw	r30, r24
     726:	31 83       	std	Z+1, r19	; 0x01
     728:	20 83       	st	Z, r18
     72a:	08 95       	ret

0000072c <create_shared_printf>:

/*
* Initialize the semaphore mutex used to print text to the terminal
*/
void create_shared_printf(){
	if (xMutexPrint == NULL ){
     72c:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <xMutexPrint>
     730:	90 91 ba 15 	lds	r25, 0x15BA	; 0x8015ba <xMutexPrint+0x1>
     734:	89 2b       	or	r24, r25
     736:	39 f4       	brne	.+14     	; 0x746 <create_shared_printf+0x1a>
		xMutexPrint = xSemaphoreCreateMutex();
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xQueueCreateMutex>
     73e:	90 93 ba 15 	sts	0x15BA, r25	; 0x8015ba <xMutexPrint+0x1>
     742:	80 93 b9 15 	sts	0x15B9, r24	; 0x8015b9 <xMutexPrint>
     746:	08 95       	ret

00000748 <print_sharedf>:
}

/*
* Method used to print to the terminal, synchronized with the mutex
*/
void print_sharedf(char* format, ...){
     748:	0f 93       	push	r16
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	va_list lst;
	if (xSemaphoreTake(xMutexPrint, (TickType_t) 300) == pdTRUE) {
     752:	4c e2       	ldi	r20, 0x2C	; 44
     754:	51 e0       	ldi	r21, 0x01	; 1
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <xMutexPrint>
     75e:	90 91 ba 15 	lds	r25, 0x15BA	; 0x8015ba <xMutexPrint+0x1>
     762:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	b9 f4       	brne	.+46     	; 0x798 <print_sharedf+0x50>
		va_start(lst, format);
		//needs testing
		vprintf(format, lst);
     76a:	be 01       	movw	r22, r28
     76c:	67 5f       	subi	r22, 0xF7	; 247
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	8f 81       	ldd	r24, Y+7	; 0x07
     772:	98 85       	ldd	r25, Y+8	; 0x08
     774:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <vprintf>
		printf("\n");
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 a6 38 	call	0x714c	; 0x714c <putchar>
		xSemaphoreGive(xMutexPrint);
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <xMutexPrint>
     790:	90 91 ba 15 	lds	r25, 0x15BA	; 0x8015ba <xMutexPrint+0x1>
     794:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
	}
	else {}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <create_semaphore_mutex_and_sensors>:
SemaphoreHandle_t xMutexSemaphore;

/*
* Function used to initialize pointers to the necessary structs and initializing the mutex for the shared data
*/
void create_semaphore_mutex_and_sensors(Temperature_t temperatureObject, CO2_t co2Object, LightHandler_t lightObject){
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	7c 01       	movw	r14, r24
     7ae:	8b 01       	movw	r16, r22
     7b0:	ea 01       	movw	r28, r20
	if (xMutexSemaphore == NULL){
     7b2:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     7b6:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     7ba:	89 2b       	or	r24, r25
     7bc:	39 f4       	brne	.+14     	; 0x7cc <create_semaphore_mutex_and_sensors+0x2c>
		xMutexSemaphore = xSemaphoreCreateMutex();
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xQueueCreateMutex>
     7c4:	90 93 c2 15 	sts	0x15C2, r25	; 0x8015c2 <xMutexSemaphore+0x1>
     7c8:	80 93 c1 15 	sts	0x15C1, r24	; 0x8015c1 <xMutexSemaphore>
	}
	
	tempHum = temperatureObject;
     7cc:	f0 92 bc 15 	sts	0x15BC, r15	; 0x8015bc <tempHum+0x1>
     7d0:	e0 92 bb 15 	sts	0x15BB, r14	; 0x8015bb <tempHum>
	co2 = co2Object;
     7d4:	10 93 be 15 	sts	0x15BE, r17	; 0x8015be <co2+0x1>
     7d8:	00 93 bd 15 	sts	0x15BD, r16	; 0x8015bd <co2>
	light = lightObject;
     7dc:	d0 93 c0 15 	sts	0x15C0, r29	; 0x8015c0 <light+0x1>
     7e0:	c0 93 bf 15 	sts	0x15BF, r28	; 0x8015bf <light>
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	08 95       	ret

000007f2 <set_temp_hum_mutex>:

/*
* Function used to set the temperature and humidity, protected by the mutex 
*/
void set_temp_hum_mutex(){
     7f2:	0f 93       	push	r16
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     7f4:	4c e2       	ldi	r20, 0x2C	; 44
     7f6:	51 e0       	ldi	r21, 0x01	; 1
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     800:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     804:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	91 f4       	brne	.+36     	; 0x830 <set_temp_hum_mutex+0x3e>
		temp_hum_set(tempHum);
     80c:	80 91 bb 15 	lds	r24, 0x15BB	; 0x8015bb <tempHum>
     810:	90 91 bc 15 	lds	r25, 0x15BC	; 0x8015bc <tempHum+0x1>
     814:	08 d2       	rcall	.+1040   	; 0xc26 <temp_hum_set>
		xSemaphoreGive(xMutexSemaphore);
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	a9 01       	movw	r20, r18
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     826:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     82a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
     82e:	07 c0       	rjmp	.+14     	; 0x83e <set_temp_hum_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     830:	8a e4       	ldi	r24, 0x4A	; 74
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	87 df       	rcall	.-242    	; 0x748 <print_sharedf>
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
	}
}
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <get_humidity_val>:

/*
* Getter for the humidity, protected by the mutex
*/
uint16_t get_humidity_val(){
     842:	0f 93       	push	r16
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	uint16_t tmp;

	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     848:	4c e2       	ldi	r20, 0x2C	; 44
     84a:	51 e0       	ldi	r21, 0x01	; 1
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     854:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     858:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	b1 f4       	brne	.+44     	; 0x88c <get_humidity_val+0x4a>
		tmp = getHumidity(tempHum);
     860:	80 91 bb 15 	lds	r24, 0x15BB	; 0x8015bb <tempHum>
     864:	90 91 bc 15 	lds	r25, 0x15BC	; 0x8015bc <tempHum+0x1>
     868:	da d1       	rcall	.+948    	; 0xc1e <getHumidity>
     86a:	d8 2f       	mov	r29, r24
     86c:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     86e:	00 e0       	ldi	r16, 0x00	; 0
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     87e:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     882:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
		return tmp;
     886:	8d 2f       	mov	r24, r29
     888:	9c 2f       	mov	r25, r28
     88a:	09 c0       	rjmp	.+18     	; 0x89e <get_humidity_val+0x5c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     88c:	8a e4       	ldi	r24, 0x4A	; 74
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	59 df       	rcall	.-334    	; 0x748 <print_sharedf>
		return 0;
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <get_temp_val>:

/*
* Getter for the temperature, protected by the mutex
*/
float get_temp_val(){
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
	float tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     8b0:	4c e2       	ldi	r20, 0x2C	; 44
     8b2:	51 e0       	ldi	r21, 0x01	; 1
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     8bc:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     8c0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	d1 f4       	brne	.+52     	; 0x8fc <get_temp_val+0x56>
		tmp = getTemperature(tempHum);
     8c8:	80 91 bb 15 	lds	r24, 0x15BB	; 0x8015bb <tempHum>
     8cc:	90 91 bc 15 	lds	r25, 0x15BC	; 0x8015bc <tempHum+0x1>
     8d0:	a0 d1       	rcall	.+832    	; 0xc12 <getTemperature>
     8d2:	f6 2e       	mov	r15, r22
     8d4:	17 2f       	mov	r17, r23
     8d6:	d8 2f       	mov	r29, r24
     8d8:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     8ea:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     8ee:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
		return tmp;
     8f2:	5f 2d       	mov	r21, r15
     8f4:	41 2f       	mov	r20, r17
     8f6:	3d 2f       	mov	r19, r29
     8f8:	2c 2f       	mov	r18, r28
     8fa:	0b c0       	rjmp	.+22     	; 0x912 <get_temp_val+0x6c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     8fc:	8a e4       	ldi	r24, 0x4A	; 74
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	21 df       	rcall	.-446    	; 0x748 <print_sharedf>
		return 0.0;
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     912:	65 2f       	mov	r22, r21
     914:	74 2f       	mov	r23, r20
     916:	83 2f       	mov	r24, r19
     918:	92 2f       	mov	r25, r18
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	08 95       	ret

00000926 <set_co2_mutex>:

/*
* Setter for the co2, protected by the mutex
*/
void set_co2_mutex(){
     926:	0f 93       	push	r16
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     928:	4c e2       	ldi	r20, 0x2C	; 44
     92a:	51 e0       	ldi	r21, 0x01	; 1
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     934:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     938:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	91 f4       	brne	.+36     	; 0x964 <set_co2_mutex+0x3e>
		set_co2(co2);
     940:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <co2>
     944:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <co2+0x1>
     948:	99 dd       	rcall	.-1230   	; 0x47c <set_co2>
		xSemaphoreGive(xMutexSemaphore);
     94a:	00 e0       	ldi	r16, 0x00	; 0
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	a9 01       	movw	r20, r18
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     95a:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     95e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
     962:	07 c0       	rjmp	.+14     	; 0x972 <set_co2_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     964:	8a e4       	ldi	r24, 0x4A	; 74
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	ed de       	rcall	.-550    	; 0x748 <print_sharedf>
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
	}
}
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <get_co2_mutex>:

/*
* Getter for co2, protected by the mutex
*/
uint16_t get_co2_mutex(){
     976:	0f 93       	push	r16
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     97c:	4c e2       	ldi	r20, 0x2C	; 44
     97e:	51 e0       	ldi	r21, 0x01	; 1
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     988:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     98c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	b1 f4       	brne	.+44     	; 0x9c0 <get_co2_mutex+0x4a>
		tmp = getCO2(co2);
     994:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <co2>
     998:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <co2+0x1>
     99c:	6b dd       	rcall	.-1322   	; 0x474 <getCO2>
     99e:	d8 2f       	mov	r29, r24
     9a0:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     9a2:	00 e0       	ldi	r16, 0x00	; 0
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	a9 01       	movw	r20, r18
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     9b2:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     9b6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
		return tmp;
     9ba:	8d 2f       	mov	r24, r29
     9bc:	9c 2f       	mov	r25, r28
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <get_co2_mutex+0x5c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     9c0:	8a e4       	ldi	r24, 0x4A	; 74
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	bf de       	rcall	.-642    	; 0x748 <print_sharedf>
		return 0;
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <set_light_mutex>:

/*
* Setter for light levels, protected by the mutex
*/
void set_light_mutex(){
     9da:	0f 93       	push	r16
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     9dc:	4c e2       	ldi	r20, 0x2C	; 44
     9de:	51 e0       	ldi	r21, 0x01	; 1
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     9e8:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     9ec:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	91 f4       	brne	.+36     	; 0xa18 <set_light_mutex+0x3e>
		setLight(light);
     9f4:	80 91 bf 15 	lds	r24, 0x15BF	; 0x8015bf <light>
     9f8:	90 91 c0 15 	lds	r25, 0x15C0	; 0x8015c0 <light+0x1>
     9fc:	8f de       	rcall	.-738    	; 0x71c <setLight>
		xSemaphoreGive(xMutexSemaphore);
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	a9 01       	movw	r20, r18
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     a0e:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     a12:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <set_light_mutex+0x4c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a18:	8a e4       	ldi	r24, 0x4A	; 74
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	93 de       	rcall	.-730    	; 0x748 <print_sharedf>
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
	}
}
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <get_light_mutex>:

/*
* Getter for the light levels, protected by the mutex
*/
uint16_t get_light_mutex(){
     a2a:	0f 93       	push	r16
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     a30:	4c e2       	ldi	r20, 0x2C	; 44
     a32:	51 e0       	ldi	r21, 0x01	; 1
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     a3c:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     a40:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xQueueSemaphoreTake>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	a9 f4       	brne	.+42     	; 0xa72 <get_light_mutex+0x48>
		tmp = getLight(light);
     a48:	80 91 bf 15 	lds	r24, 0x15BF	; 0x8015bf <light>
     a4c:	90 91 c0 15 	lds	r25, 0x15C0	; 0x8015c0 <light+0x1>
     a50:	61 de       	rcall	.-830    	; 0x714 <getLight>
     a52:	d8 2f       	mov	r29, r24
     a54:	c9 2f       	mov	r28, r25
		xSemaphoreGive(xMutexSemaphore);
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	a9 01       	movw	r20, r18
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     a66:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     a6a:	e0 d7       	rcall	.+4032   	; 0x1a2c <xQueueGenericSend>
		return tmp;
     a6c:	8d 2f       	mov	r24, r29
     a6e:	9c 2f       	mov	r25, r28
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <get_light_mutex+0x5a>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a72:	8a e4       	ldi	r24, 0x4A	; 74
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	9f 93       	push	r25
     a78:	8f 93       	push	r24
     a7a:	66 de       	rcall	.-820    	; 0x748 <print_sharedf>
		return 0;
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
	}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <temperature_handler_init>:
} TemperatureHandler;

/*
* initialize bits and create the task
*/
void temperature_handler_init(Temperature_t self, uint16_t priority){
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24
     a98:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     a9a:	40 91 b3 15 	lds	r20, 0x15B3	; 0x8015b3 <ready_bit>
     a9e:	50 91 b4 15 	lds	r21, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     aa2:	60 91 b5 15 	lds	r22, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     aa6:	70 91 b6 15 	lds	r23, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     aaa:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <group_start>
     aae:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <group_start+0x1>
     ab2:	ef d2       	rcall	.+1502   	; 0x1092 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     ab4:	e1 2c       	mov	r14, r1
     ab6:	f1 2c       	mov	r15, r1
     ab8:	9e 01       	movw	r18, r28
     aba:	40 ec       	ldi	r20, 0xC0	; 192
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	6b e6       	ldi	r22, 0x6B	; 107
     ac0:	73 e0       	ldi	r23, 0x03	; 3
     ac2:	82 eb       	ldi	r24, 0xB2	; 178
     ac4:	95 e0       	ldi	r25, 0x05	; 5
     ac6:	0e 94 a6 14 	call	0x294c	; 0x294c <xTaskCreate>
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <createTemp>:

/*
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	8c 01       	movw	r16, r24
     aec:	5b 01       	movw	r10, r22
     aee:	69 01       	movw	r12, r18
     af0:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     af2:	86 e0       	ldi	r24, 0x06	; 6
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <malloc>
     afa:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     afc:	89 2b       	or	r24, r25
     afe:	19 f1       	breq	.+70     	; 0xb46 <createTemp+0x70>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     b00:	18 82       	st	Y, r1
     b02:	19 82       	std	Y+1, r1	; 0x01
     b04:	1a 82       	std	Y+2, r1	; 0x02
     b06:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     b08:	1d 82       	std	Y+5, r1	; 0x05
     b0a:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     b0c:	b0 92 b8 15 	sts	0x15B8, r11	; 0x8015b8 <group_start+0x1>
     b10:	a0 92 b7 15 	sts	0x15B7, r10	; 0x8015b7 <group_start>
	ready_bit = bit;
     b14:	c0 92 b3 15 	sts	0x15B3, r12	; 0x8015b3 <ready_bit>
     b18:	d0 92 b4 15 	sts	0x15B4, r13	; 0x8015b4 <ready_bit+0x1>
     b1c:	e0 92 b5 15 	sts	0x15B5, r14	; 0x8015b5 <ready_bit+0x2>
     b20:	f0 92 b6 15 	sts	0x15B6, r15	; 0x8015b6 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     b24:	0e 94 85 24 	call	0x490a	; 0x490a <hih8120_initialise>
     b28:	81 11       	cpse	r24, r1
     b2a:	07 c0       	rjmp	.+14     	; 0xb3a <createTemp+0x64>
	{
		print_sharedf("Temperature and humidity sensor initialized.");
     b2c:	8c e7       	ldi	r24, 0x7C	; 124
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	09 de       	rcall	.-1006   	; 0x748 <print_sharedf>
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
	}
	
	temperature_handler_init(new_measure, priority);
     b3a:	b8 01       	movw	r22, r16
     b3c:	ce 01       	movw	r24, r28
     b3e:	a6 df       	rcall	.-180    	; 0xa8c <temperature_handler_init>
	return new_measure;
     b40:	8c 2f       	mov	r24, r28
     b42:	9d 2f       	mov	r25, r29
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <createTemp+0x74>
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
		print_sharedf("Temperature and humidity sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	08 95       	ret

00000b60 <measureTempAndHum>:

/*
* set data using the shared sensor data c file
*/
void measureTempAndHum(Temperature_t self){
	set_temp_hum_mutex();
     b60:	48 ce       	rjmp	.-880    	; 0x7f2 <set_temp_hum_mutex>
     b62:	08 95       	ret

00000b64 <startReading>:
}

/*
* start reading data
*/
void startReading(void* self){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	00 d0       	rcall	.+0      	; 0xb6a <startReading+0x6>
     b6a:	1f 92       	push	r1
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     b72:	0e 94 30 15 	call	0x2a60	; 0x2a60 <xTaskGetTickCount>
     b76:	69 83       	std	Y+1, r22	; 0x01
     b78:	7a 83       	std	Y+2, r23	; 0x02
     b7a:	8b 83       	std	Y+3, r24	; 0x03
     b7c:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     b7e:	42 ea       	ldi	r20, 0xA2	; 162
     b80:	53 e0       	ldi	r21, 0x03	; 3
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <xTaskDelayUntil>
		//wake-up sensor
		if (HIH8120_OK != hih8120_wakeup())
     b8e:	0e 94 9d 24 	call	0x493a	; 0x493a <hih8120_wakeup>
     b92:	88 23       	and	r24, r24
     b94:	39 f0       	breq	.+14     	; 0xba4 <startReading+0x40>
		{
			print_sharedf("Temp task failed to work!");
     b96:	89 ea       	ldi	r24, 0xA9	; 169
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	d4 dd       	rcall	.-1112   	; 0x748 <print_sharedf>
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
		}
		
		//set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     ba4:	40 91 b3 15 	lds	r20, 0x15B3	; 0x8015b3 <ready_bit>
     ba8:	50 91 b4 15 	lds	r21, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     bac:	60 91 b5 15 	lds	r22, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     bb0:	70 91 b6 15 	lds	r23, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     bb4:	cc 24       	eor	r12, r12
     bb6:	ca 94       	dec	r12
     bb8:	dc 2c       	mov	r13, r12
     bba:	76 01       	movw	r14, r12
     bbc:	01 e0       	ldi	r16, 0x01	; 1
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <group_start>
     bc4:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <group_start+0x1>
     bc8:	c4 d1       	rcall	.+904    	; 0xf52 <xEventGroupWaitBits>
     bca:	6b 01       	movw	r12, r22
     bcc:	7c 01       	movw	r14, r24
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		//give the sensor time to wake up
		vTaskDelay(pdMS_TO_TICKS(70));
     bce:	64 e0       	ldi	r22, 0x04	; 4
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <vTaskDelay>
		//check if the bits are set
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     bda:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <ready_bit>
     bde:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <ready_bit+0x1>
     be2:	a0 91 b5 15 	lds	r26, 0x15B5	; 0x8015b5 <ready_bit+0x2>
     be6:	b0 91 b6 15 	lds	r27, 0x15B6	; 0x8015b6 <ready_bit+0x3>
     bea:	c8 22       	and	r12, r24
     bec:	d9 22       	and	r13, r25
     bee:	ea 22       	and	r14, r26
     bf0:	fb 22       	and	r15, r27
     bf2:	8c 15       	cp	r24, r12
     bf4:	9d 05       	cpc	r25, r13
     bf6:	ae 05       	cpc	r26, r14
     bf8:	bf 05       	cpc	r27, r15
     bfa:	09 f0       	breq	.+2      	; 0xbfe <startReading+0x9a>
     bfc:	c0 cf       	rjmp	.-128    	; 0xb7e <startReading+0x1a>
			hih8120_measure(); //measure temperature and humidity
     bfe:	0e 94 b2 24 	call	0x4964	; 0x4964 <hih8120_measure>
			vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	cb 01       	movw	r24, r22
     c08:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <vTaskDelay>
			
			measureTempAndHum((Temperature_t) self);
     c0c:	c5 01       	movw	r24, r10
     c0e:	a8 df       	rcall	.-176    	; 0xb60 <measureTempAndHum>
     c10:	b6 cf       	rjmp	.-148    	; 0xb7e <startReading+0x1a>

00000c12 <getTemperature>:

/*
* getter for temperature
*/
float getTemperature(Temperature_t self){
	return self->temperature;
     c12:	fc 01       	movw	r30, r24
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
}
     c1c:	08 95       	ret

00000c1e <getHumidity>:
/*
* getter for humidity
*/
uint16_t getHumidity(Temperature_t self){
	return self -> humidity;
}
     c1e:	fc 01       	movw	r30, r24
     c20:	84 81       	ldd	r24, Z+4	; 0x04
     c22:	95 81       	ldd	r25, Z+5	; 0x05
     c24:	08 95       	ret

00000c26 <temp_hum_set>:

/*
* setter for both temperature and humidity
*/
void temp_hum_set(Temperature_t self){
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
	//needed to avoid problem values
	if(hih8120_getTemperature() != 0)
     c2c:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <hih8120_getTemperature>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	a9 01       	movw	r20, r18
     c36:	0e 94 b3 22 	call	0x4566	; 0x4566 <__cmpsf2>
     c3a:	88 23       	and	r24, r24
     c3c:	31 f0       	breq	.+12     	; 0xc4a <temp_hum_set+0x24>
		self->temperature = hih8120_getTemperature();
     c3e:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <hih8120_getTemperature>
     c42:	68 83       	st	Y, r22
     c44:	79 83       	std	Y+1, r23	; 0x01
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	9b 83       	std	Y+3, r25	; 0x03
	if(hih8120_getHumidityPercent_x10() != 0)
     c4a:	0e 94 d7 24 	call	0x49ae	; 0x49ae <hih8120_getHumidityPercent_x10>
     c4e:	89 2b       	or	r24, r25
     c50:	79 f0       	breq	.+30     	; 0xc70 <temp_hum_set+0x4a>
		self->humidity = hih8120_getHumidityPercent_x10()/10;
     c52:	0e 94 d7 24 	call	0x49ae	; 0x49ae <hih8120_getHumidityPercent_x10>
     c56:	9c 01       	movw	r18, r24
     c58:	ad ec       	ldi	r26, 0xCD	; 205
     c5a:	bc ec       	ldi	r27, 0xCC	; 204
     c5c:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <__umulhisi3>
     c60:	96 95       	lsr	r25
     c62:	87 95       	ror	r24
     c64:	96 95       	lsr	r25
     c66:	87 95       	ror	r24
     c68:	96 95       	lsr	r25
     c6a:	87 95       	ror	r24
     c6c:	9d 83       	std	Y+5, r25	; 0x05
     c6e:	8c 83       	std	Y+4, r24	; 0x04
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <_lora_setup>:

/*
* Setup function that initializes the LoRaWAN Parameters
*/
static void _lora_setup(void)
{
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	64 97       	sbiw	r28, 0x14	; 20
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;

	// Factory reset the transceiver
	lora_driver_rn2483FactoryReset();
     c8e:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <lora_driver_rn2483FactoryReset>
	
	// Configure to EU868 LoRaWAN standards
	lora_driver_configureToEu868();
     c92:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <lora_driver_configureToEu868>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <lora_driver_getRn2483Hweui>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	lora_driver_setDeviceIdentifier(_out_buf);
     c9e:	ce 01       	movw	r24, r28
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	0e 94 94 26 	call	0x4d28	; 0x4d28 <lora_driver_setDeviceIdentifier>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf);
     ca6:	ae 01       	movw	r20, r28
     ca8:	4f 5f       	subi	r20, 0xFF	; 255
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	63 ec       	ldi	r22, 0xC3	; 195
     cae:	73 e0       	ldi	r23, 0x03	; 3
     cb0:	84 ee       	ldi	r24, 0xE4	; 228
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 c2 28 	call	0x5184	; 0x5184 <lora_driver_setOtaaIdentity>

	// Save all the MAC settings in the transceiver
	lora_driver_saveMac();
     cb8:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <lora_driver_saveMac>

	// Enable Adaptive Data Rate
	lora_driver_setAdaptiveDataRate(LORA_ON);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <lora_driver_setAdaptiveDataRate>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	lora_driver_setReceiveDelay(500);
     cc2:	84 ef       	ldi	r24, 0xF4	; 244
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <lora_driver_setReceiveDelay>

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     cca:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <lora_driver_join>
     cd2:	08 2f       	mov	r16, r24
		print_sharedf("Join Network Tries Left:%d >%s<", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     cd4:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <lora_driver_mapReturnCodeToText>
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	1f 92       	push	r1
     cde:	1f 93       	push	r17
     ce0:	85 ef       	ldi	r24, 0xF5	; 245
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	2f dd       	rcall	.-1442   	; 0x748 <print_sharedf>

		if ( rc != LORA_ACCEPTED)
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	08 30       	cpi	r16, 0x08	; 8
     cf8:	41 f0       	breq	.+16     	; 0xd0a <_lora_setup+0x94>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     cfa:	66 e3       	ldi	r22, 0x36	; 54
     cfc:	71 e0       	ldi	r23, 0x01	; 1
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     d06:	11 50       	subi	r17, 0x01	; 1
     d08:	09 f7       	brne	.-62     	; 0xccc <_lora_setup+0x56>

	if (rc == LORA_ACCEPTED)
     d0a:	08 30       	cpi	r16, 0x08	; 8
     d0c:	41 f4       	brne	.+16     	; 0xd1e <_lora_setup+0xa8>
	{
		// Connected to LoRaWAN :-)
		print_sharedf("Connected to the LoRaWAN Network successfully.");
     d0e:	85 e1       	ldi	r24, 0x15	; 21
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	18 dd       	rcall	.-1488   	; 0x748 <print_sharedf>
		while (1)
		{
			taskYIELD();
		}
	}
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
	{
		// Something went wrong
		// Lets stay here
		while (1)
		{
			taskYIELD();
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <_lora_setup+0xac>
     d1e:	6e d4       	rcall	.+2268   	; 0x15fc <vPortYield>
     d20:	fe cf       	rjmp	.-4      	; 0xd1e <_lora_setup+0xa8>
		}
	}
}
     d22:	64 96       	adiw	r28, 0x14	; 20
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <lora_handler_task>:

/*
* Function task that stars sending data in the specified 5 minute interval
*/
void lora_handler_task(void* pvParameters){
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	28 97       	sbiw	r28, 0x08	; 8
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_resetRn2483>
	vTaskDelay(2);
     d52:	62 e0       	ldi	r22, 0x02	; 2
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <vTaskDelay>
	lora_driver_resetRn2483(0);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     d64:	66 e9       	ldi	r22, 0x96	; 150
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     d70:	0e 94 11 26 	call	0x4c22	; 0x4c22 <lora_driver_flushBuffers>

	_lora_setup();
     d74:	80 df       	rcall	.-256    	; 0xc76 <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     d76:	0e 94 30 15 	call	0x2a60	; 0x2a60 <xTaskGetTickCount>
     d7a:	69 83       	std	Y+1, r22	; 0x01
     d7c:	7a 83       	std	Y+2, r23	; 0x02
     d7e:	8b 83       	std	Y+3, r24	; 0x03
     d80:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     d82:	44 e4       	ldi	r20, 0x44	; 68
     d84:	57 e0       	ldi	r21, 0x07	; 7
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <xTaskDelayUntil>
		_uplink_payload.len = 7;
     d92:	e8 ec       	ldi	r30, 0xC8	; 200
     d94:	f7 e0       	ldi	r31, 0x07	; 7
     d96:	87 e0       	ldi	r24, 0x07	; 7
     d98:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
		
		double temp = (double) get_temp_val();
     d9c:	80 83       	st	Z, r24
     d9e:	83 dd       	rcall	.-1274   	; 0x8a6 <get_temp_val>
     da0:	d6 2e       	mov	r13, r22
     da2:	c7 2e       	mov	r12, r23
     da4:	b8 2e       	mov	r11, r24
		uint16_t humidity = get_humidity_val();
     da6:	a9 2e       	mov	r10, r25
     da8:	4c dd       	rcall	.-1384   	; 0x842 <get_humidity_val>
		uint16_t co2_val = get_co2_mutex();
     daa:	8c 01       	movw	r16, r24
     dac:	e4 dd       	rcall	.-1080   	; 0x976 <get_co2_mutex>
     dae:	7c 01       	movw	r14, r24
		uint16_t light_val = get_light_mutex();
     db0:	3c de       	rcall	.-904    	; 0xa2a <get_light_mutex>
     db2:	88 2e       	mov	r8, r24
     db4:	99 2e       	mov	r9, r25
     db6:	20 e0       	ldi	r18, 0x00	; 0
		
		if(temp == 0.0 || humidity == 0 || co2_val == 0){
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	a9 01       	movw	r20, r18
     dbc:	6d 2d       	mov	r22, r13
     dbe:	7c 2d       	mov	r23, r12
     dc0:	8b 2d       	mov	r24, r11
     dc2:	9a 2d       	mov	r25, r10
     dc4:	0e 94 b3 22 	call	0x4566	; 0x4566 <__cmpsf2>
     dc8:	88 23       	and	r24, r24
     dca:	31 f0       	breq	.+12     	; 0xdd8 <lora_handler_task+0xa0>
     dcc:	01 15       	cp	r16, r1
     dce:	11 05       	cpc	r17, r1
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <lora_handler_task+0xa0>
     dd2:	e1 14       	cp	r14, r1
     dd4:	f1 04       	cpc	r15, r1
     dd6:	99 f4       	brne	.+38     	; 0xdfe <lora_handler_task+0xc6>
     dd8:	ff 92       	push	r15
			print_sharedf("Sensors are still calibrating %f, %d, %d, %d", temp, humidity, co2_val);
     dda:	ef 92       	push	r14
     ddc:	1f 93       	push	r17
     dde:	0f 93       	push	r16
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	84 e4       	ldi	r24, 0x44	; 68
     dea:	94 e0       	ldi	r25, 0x04	; 4
     dec:	9f 93       	push	r25
     dee:	8f 93       	push	r24
     df0:	ab dc       	rcall	.-1706   	; 0x748 <print_sharedf>
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	c2 cf       	rjmp	.-124    	; 0xd82 <lora_handler_task+0x4a>
     dfe:	1d 82       	std	Y+5, r1	; 0x05
		}
		else{
		double val1=0;
     e00:	1e 82       	std	Y+6, r1	; 0x06
     e02:	1f 82       	std	Y+7, r1	; 0x07
     e04:	18 86       	std	Y+8, r1	; 0x08
     e06:	ae 01       	movw	r20, r28
		double val2=0;
		val2 = modf(temp, &val1);
     e08:	4b 5f       	subi	r20, 0xFB	; 251
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	6d 2d       	mov	r22, r13
     e0e:	7c 2d       	mov	r23, r12
     e10:	8b 2d       	mov	r24, r11
     e12:	9a 2d       	mov	r25, r10
     e14:	0e 94 35 23 	call	0x466a	; 0x466a <modf>
     e18:	20 e0       	ldi	r18, 0x00	; 0
		val2 = val2 * 100;
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	48 ec       	ldi	r20, 0xC8	; 200
     e1e:	52 e4       	ldi	r21, 0x42	; 66
     e20:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__mulsf3>
     e24:	2b 01       	movw	r4, r22
     e26:	3c 01       	movw	r6, r24
     e28:	af 92       	push	r10
		
		//temperature
		print_sharedf("Temperature: %f", temp);
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	81 e7       	ldi	r24, 0x71	; 113
     e32:	94 e0       	ldi	r25, 0x04	; 4
     e34:	9f 93       	push	r25
     e36:	8f 93       	push	r24
     e38:	87 dc       	rcall	.-1778   	; 0x748 <print_sharedf>
     e3a:	6d 81       	ldd	r22, Y+5	; 0x05
		_uplink_payload.bytes[0] = (int) val1;
     e3c:	7e 81       	ldd	r23, Y+6	; 0x06
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
     e40:	98 85       	ldd	r25, Y+8	; 0x08
     e42:	0e 94 b7 22 	call	0x456e	; 0x456e <__fixsfsi>
     e46:	0f 2e       	mov	r0, r31
     e48:	f8 ec       	ldi	r31, 0xC8	; 200
     e4a:	cf 2e       	mov	r12, r31
     e4c:	f7 e0       	ldi	r31, 0x07	; 7
     e4e:	df 2e       	mov	r13, r31
     e50:	f0 2d       	mov	r31, r0
     e52:	f6 01       	movw	r30, r12
     e54:	62 83       	std	Z+2, r22	; 0x02
     e56:	c3 01       	movw	r24, r6
		_uplink_payload.bytes[1] = (int) val2;
     e58:	b2 01       	movw	r22, r4
     e5a:	0e 94 b7 22 	call	0x456e	; 0x456e <__fixsfsi>
     e5e:	f6 01       	movw	r30, r12
     e60:	63 83       	std	Z+3, r22	; 0x03
		
		//humidity
		print_sharedf("Humidity: %d", humidity);
     e62:	1f 93       	push	r17
     e64:	0f 93       	push	r16
     e66:	81 e8       	ldi	r24, 0x81	; 129
     e68:	94 e0       	ldi	r25, 0x04	; 4
     e6a:	9f 93       	push	r25
     e6c:	8f 93       	push	r24
     e6e:	6c dc       	rcall	.-1832   	; 0x748 <print_sharedf>
     e70:	f6 01       	movw	r30, r12
		_uplink_payload.bytes[2] = humidity;
     e72:	04 83       	std	Z+4, r16	; 0x04
		
		//co2
		print_sharedf("CO2: %d", co2_val);
     e74:	ff 92       	push	r15
     e76:	ef 92       	push	r14
     e78:	8e e8       	ldi	r24, 0x8E	; 142
     e7a:	94 e0       	ldi	r25, 0x04	; 4
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	63 dc       	rcall	.-1850   	; 0x748 <print_sharedf>
     e82:	f6 01       	movw	r30, r12
		_uplink_payload.bytes[3] = co2_val >> 8;
     e84:	f5 82       	std	Z+5, r15	; 0x05
		_uplink_payload.bytes[4] = co2_val & 0xFF;
     e86:	e6 82       	std	Z+6, r14	; 0x06
		
		//light
		print_sharedf("Light in lux: %d", light_val);
     e88:	9f 92       	push	r9
     e8a:	8f 92       	push	r8
     e8c:	86 e9       	ldi	r24, 0x96	; 150
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	59 dc       	rcall	.-1870   	; 0x748 <print_sharedf>
     e96:	f6 01       	movw	r30, r12
		_uplink_payload.bytes[5] = light_val >> 8;
     e98:	97 82       	std	Z+7, r9	; 0x07
     e9a:	80 86       	std	Z+8, r8	; 0x08
		_uplink_payload.bytes[6] = light_val & 0xFF;
     e9c:	b6 01       	movw	r22, r12
		
		char* message = lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload));
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 f6 26 	call	0x4dec	; 0x4dec <lora_driver_sendUploadMessage>
     ea4:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <lora_driver_mapReturnCodeToText>
		print_sharedf("Upload Message >%s<", message);
     ea8:	9f 93       	push	r25
     eaa:	8f 93       	push	r24
     eac:	87 ea       	ldi	r24, 0xA7	; 167
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	49 dc       	rcall	.-1902   	; 0x748 <print_sharedf>
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	60 cf       	rjmp	.-320    	; 0xd82 <lora_handler_task+0x4a>

00000ec2 <lora_handler_initialize>:
     ec2:	ef 92       	push	r14
void lora_handler_task(void* pvParameters);

/*
* Function call used to start the networking task
*/
void lora_handler_initialize(uint16_t lora_handler_task_priority){
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
	
	xTaskCreate(
     ec8:	e1 2c       	mov	r14, r1
     eca:	f1 2c       	mov	r15, r1
     ecc:	08 2f       	mov	r16, r24
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	48 e8       	ldi	r20, 0x88	; 136
     ed4:	51 e0       	ldi	r21, 0x01	; 1
     ed6:	6b eb       	ldi	r22, 0xBB	; 187
     ed8:	74 e0       	ldi	r23, 0x04	; 4
     eda:	8c e9       	ldi	r24, 0x9C	; 156
     edc:	96 e0       	ldi	r25, 0x06	; 6
     ede:	0e 94 a6 14 	call	0x294c	; 0x294c <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	08 95       	ret

00000eea <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     eea:	0f 93       	push	r16
     eec:	01 11       	cpse	r16, r1
     eee:	0c c0       	rjmp	.+24     	; 0xf08 <prvTestWaitCondition+0x1e>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	82 23       	and	r24, r18
     ef6:	93 23       	and	r25, r19
     ef8:	a4 23       	and	r26, r20
     efa:	b5 23       	and	r27, r21
     efc:	89 2b       	or	r24, r25
     efe:	8a 2b       	or	r24, r26
     f00:	8b 2b       	or	r24, r27
     f02:	79 f4       	brne	.+30     	; 0xf22 <prvTestWaitCondition+0x38>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	10 c0       	rjmp	.+32     	; 0xf28 <prvTestWaitCondition+0x3e>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	82 23       	and	r24, r18
     f0e:	93 23       	and	r25, r19
     f10:	a4 23       	and	r26, r20
     f12:	b5 23       	and	r27, r21
     f14:	28 17       	cp	r18, r24
     f16:	39 07       	cpc	r19, r25
     f18:	4a 07       	cpc	r20, r26
     f1a:	5b 07       	cpc	r21, r27
     f1c:	21 f0       	breq	.+8      	; 0xf26 <prvTestWaitCondition+0x3c>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <prvTestWaitCondition+0x3e>
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <prvTestWaitCondition+0x3e>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <xEventGroupCreate>:
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	8f e0       	ldi	r24, 0x0F	; 15
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	af d1       	rcall	.+862    	; 0x1294 <pvPortMalloc>
     f36:	ec 01       	movw	r28, r24
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	39 f0       	breq	.+14     	; 0xf4a <xEventGroupCreate+0x1e>
     f3c:	fc 01       	movw	r30, r24
     f3e:	11 92       	st	Z+, r1
     f40:	11 92       	st	Z+, r1
     f42:	11 92       	st	Z+, r1
     f44:	11 92       	st	Z+, r1
     f46:	cf 01       	movw	r24, r30
     f48:	8b d2       	rcall	.+1302   	; 0x1460 <vListInitialise>
     f4a:	ce 01       	movw	r24, r28
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <xEventGroupWaitBits>:
     f52:	2f 92       	push	r2
     f54:	3f 92       	push	r3
     f56:	4f 92       	push	r4
     f58:	5f 92       	push	r5
     f5a:	6f 92       	push	r6
     f5c:	7f 92       	push	r7
     f5e:	8f 92       	push	r8
     f60:	9f 92       	push	r9
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	4a 01       	movw	r8, r20
     f7a:	5b 01       	movw	r10, r22
     f7c:	62 2e       	mov	r6, r18
     f7e:	70 2e       	mov	r7, r16
     f80:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskSuspendAll>
     f84:	28 80       	ld	r2, Y
     f86:	39 80       	ldd	r3, Y+1	; 0x01
     f88:	4a 80       	ldd	r4, Y+2	; 0x02
     f8a:	5b 80       	ldd	r5, Y+3	; 0x03
     f8c:	a5 01       	movw	r20, r10
     f8e:	94 01       	movw	r18, r8
     f90:	c2 01       	movw	r24, r4
     f92:	b1 01       	movw	r22, r2
     f94:	aa df       	rcall	.-172    	; 0xeea <prvTestWaitCondition>
     f96:	88 23       	and	r24, r24
     f98:	a1 f0       	breq	.+40     	; 0xfc2 <xEventGroupWaitBits+0x70>
     f9a:	66 20       	and	r6, r6
     f9c:	89 f1       	breq	.+98     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     f9e:	d5 01       	movw	r26, r10
     fa0:	c4 01       	movw	r24, r8
     fa2:	80 95       	com	r24
     fa4:	90 95       	com	r25
     fa6:	a0 95       	com	r26
     fa8:	b0 95       	com	r27
     faa:	82 21       	and	r24, r2
     fac:	93 21       	and	r25, r3
     fae:	a4 21       	and	r26, r4
     fb0:	b5 21       	and	r27, r5
     fb2:	88 83       	st	Y, r24
     fb4:	99 83       	std	Y+1, r25	; 0x01
     fb6:	aa 83       	std	Y+2, r26	; 0x02
     fb8:	bb 83       	std	Y+3, r27	; 0x03
     fba:	c1 2c       	mov	r12, r1
     fbc:	d1 2c       	mov	r13, r1
     fbe:	76 01       	movw	r14, r12
     fc0:	22 c0       	rjmp	.+68     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
     fc2:	c1 14       	cp	r12, r1
     fc4:	d1 04       	cpc	r13, r1
     fc6:	e1 04       	cpc	r14, r1
     fc8:	f1 04       	cpc	r15, r1
     fca:	e9 f0       	breq	.+58     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
     fcc:	61 10       	cpse	r6, r1
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <xEventGroupWaitBits+0x86>
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	ba 01       	movw	r22, r20
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <xEventGroupWaitBits+0x8e>
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	71 10       	cpse	r7, r1
     fe2:	74 60       	ori	r23, 0x04	; 4
     fe4:	48 29       	or	r20, r8
     fe6:	59 29       	or	r21, r9
     fe8:	6a 29       	or	r22, r10
     fea:	7b 29       	or	r23, r11
     fec:	97 01       	movw	r18, r14
     fee:	86 01       	movw	r16, r12
     ff0:	ce 01       	movw	r24, r28
     ff2:	04 96       	adiw	r24, 0x04	; 4
     ff4:	0e 94 42 18 	call	0x3084	; 0x3084 <vTaskPlaceOnUnorderedEventList>
     ff8:	21 2c       	mov	r2, r1
     ffa:	31 2c       	mov	r3, r1
     ffc:	21 01       	movw	r4, r2
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1000:	c1 2c       	mov	r12, r1
    1002:	d1 2c       	mov	r13, r1
    1004:	76 01       	movw	r14, r12
    1006:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
    100a:	cd 28       	or	r12, r13
    100c:	ce 28       	or	r12, r14
    100e:	cf 28       	or	r12, r15
    1010:	59 f1       	breq	.+86     	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1012:	81 11       	cpse	r24, r1
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1016:	f2 d2       	rcall	.+1508   	; 0x15fc <vPortYield>
    1018:	0e 94 04 1c 	call	0x3808	; 0x3808 <uxTaskResetEventItemValue>
    101c:	6b 01       	movw	r12, r22
    101e:	7c 01       	movw	r14, r24
    1020:	91 fd       	sbrc	r25, 1
    1022:	1f c0       	rjmp	.+62     	; 0x1062 <__EEPROM_REGION_LENGTH__+0x62>
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	0f 92       	push	r0
    102a:	c8 80       	ld	r12, Y
    102c:	d9 80       	ldd	r13, Y+1	; 0x01
    102e:	ea 80       	ldd	r14, Y+2	; 0x02
    1030:	fb 80       	ldd	r15, Y+3	; 0x03
    1032:	07 2d       	mov	r16, r7
    1034:	a5 01       	movw	r20, r10
    1036:	94 01       	movw	r18, r8
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	56 df       	rcall	.-340    	; 0xeea <prvTestWaitCondition>
    103e:	88 23       	and	r24, r24
    1040:	71 f0       	breq	.+28     	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>
    1042:	66 20       	and	r6, r6
    1044:	61 f0       	breq	.+24     	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>
    1046:	80 94       	com	r8
    1048:	90 94       	com	r9
    104a:	a0 94       	com	r10
    104c:	b0 94       	com	r11
    104e:	8c 20       	and	r8, r12
    1050:	9d 20       	and	r9, r13
    1052:	ae 20       	and	r10, r14
    1054:	bf 20       	and	r11, r15
    1056:	88 82       	st	Y, r8
    1058:	99 82       	std	Y+1, r9	; 0x01
    105a:	aa 82       	std	Y+2, r10	; 0x02
    105c:	bb 82       	std	Y+3, r11	; 0x03
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	16 01       	movw	r2, r12
    1064:	27 01       	movw	r4, r14
    1066:	55 24       	eor	r5, r5
    1068:	c2 01       	movw	r24, r4
    106a:	b1 01       	movw	r22, r2
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	7f 90       	pop	r7
    1086:	6f 90       	pop	r6
    1088:	5f 90       	pop	r5
    108a:	4f 90       	pop	r4
    108c:	3f 90       	pop	r3
    108e:	2f 90       	pop	r2
    1090:	08 95       	ret

00001092 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
    1092:	4f 92       	push	r4
    1094:	5f 92       	push	r5
    1096:	6f 92       	push	r6
    1098:	7f 92       	push	r7
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	ec 01       	movw	r28, r24
    10b0:	6a 01       	movw	r12, r20
    10b2:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    10b4:	8c 01       	movw	r16, r24
    10b6:	09 5f       	subi	r16, 0xF9	; 249
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    10ba:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    10be:	eb 85       	ldd	r30, Y+11	; 0x0b
    10c0:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    10c2:	88 81       	ld	r24, Y
    10c4:	99 81       	ldd	r25, Y+1	; 0x01
    10c6:	aa 81       	ldd	r26, Y+2	; 0x02
    10c8:	bb 81       	ldd	r27, Y+3	; 0x03
    10ca:	c8 2a       	or	r12, r24
    10cc:	d9 2a       	or	r13, r25
    10ce:	ea 2a       	or	r14, r26
    10d0:	fb 2a       	or	r15, r27
    10d2:	c8 82       	st	Y, r12
    10d4:	d9 82       	std	Y+1, r13	; 0x01
    10d6:	ea 82       	std	Y+2, r14	; 0x02
    10d8:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    10da:	c1 2c       	mov	r12, r1
    10dc:	d1 2c       	mov	r13, r1
    10de:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10e0:	3d c0       	rjmp	.+122    	; 0x115c <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
    10e2:	a4 80       	ldd	r10, Z+4	; 0x04
    10e4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	a2 81       	ldd	r26, Z+2	; 0x02
    10ec:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10ee:	ac 01       	movw	r20, r24
    10f0:	bd 01       	movw	r22, r26
    10f2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10f4:	b2 fd       	sbrc	r27, 2
    10f6:	0e c0       	rjmp	.+28     	; 0x1114 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    10f8:	48 80       	ld	r4, Y
    10fa:	59 80       	ldd	r5, Y+1	; 0x01
    10fc:	6a 80       	ldd	r6, Y+2	; 0x02
    10fe:	7b 80       	ldd	r7, Y+3	; 0x03
    1100:	44 22       	and	r4, r20
    1102:	55 22       	and	r5, r21
    1104:	66 22       	and	r6, r22
    1106:	77 22       	and	r7, r23
    1108:	45 28       	or	r4, r5
    110a:	46 28       	or	r4, r6
    110c:	47 28       	or	r4, r7
    110e:	89 f4       	brne	.+34     	; 0x1132 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	12 c0       	rjmp	.+36     	; 0x1138 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1114:	48 80       	ld	r4, Y
    1116:	59 80       	ldd	r5, Y+1	; 0x01
    1118:	6a 80       	ldd	r6, Y+2	; 0x02
    111a:	7b 80       	ldd	r7, Y+3	; 0x03
    111c:	44 22       	and	r4, r20
    111e:	55 22       	and	r5, r21
    1120:	66 22       	and	r6, r22
    1122:	77 22       	and	r7, r23
    1124:	44 15       	cp	r20, r4
    1126:	55 05       	cpc	r21, r5
    1128:	66 05       	cpc	r22, r6
    112a:	77 05       	cpc	r23, r7
    112c:	21 f0       	breq	.+8      	; 0x1136 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    1136:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1138:	22 23       	and	r18, r18
    113a:	71 f0       	breq	.+28     	; 0x1158 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    113c:	b0 ff       	sbrs	r27, 0
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1140:	c4 2a       	or	r12, r20
    1142:	d5 2a       	or	r13, r21
    1144:	e6 2a       	or	r14, r22
    1146:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1148:	48 81       	ld	r20, Y
    114a:	59 81       	ldd	r21, Y+1	; 0x01
    114c:	6a 81       	ldd	r22, Y+2	; 0x02
    114e:	7b 81       	ldd	r23, Y+3	; 0x03
    1150:	72 60       	ori	r23, 0x02	; 2
    1152:	cf 01       	movw	r24, r30
    1154:	0e 94 7d 19 	call	0x32fa	; 0x32fa <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1158:	ea 2d       	mov	r30, r10
    115a:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    115c:	e0 17       	cp	r30, r16
    115e:	f1 07       	cpc	r31, r17
    1160:	09 f0       	breq	.+2      	; 0x1164 <xEventGroupSetBits+0xd2>
    1162:	bf cf       	rjmp	.-130    	; 0x10e2 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1164:	c0 94       	com	r12
    1166:	d0 94       	com	r13
    1168:	e0 94       	com	r14
    116a:	f0 94       	com	r15
    116c:	88 81       	ld	r24, Y
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	aa 81       	ldd	r26, Y+2	; 0x02
    1172:	bb 81       	ldd	r27, Y+3	; 0x03
    1174:	c8 22       	and	r12, r24
    1176:	d9 22       	and	r13, r25
    1178:	ea 22       	and	r14, r26
    117a:	fb 22       	and	r15, r27
    117c:	c8 82       	st	Y, r12
    117e:	d9 82       	std	Y+1, r13	; 0x01
    1180:	ea 82       	std	Y+2, r14	; 0x02
    1182:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1184:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1188:	68 81       	ld	r22, Y
    118a:	79 81       	ldd	r23, Y+1	; 0x01
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	7f 90       	pop	r7
    11a6:	6f 90       	pop	r6
    11a8:	5f 90       	pop	r5
    11aa:	4f 90       	pop	r4
    11ac:	08 95       	ret

000011ae <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    11ae:	ea ee       	ldi	r30, 0xEA	; 234
    11b0:	f7 e0       	ldi	r31, 0x07	; 7
    11b2:	ae ee       	ldi	r26, 0xEE	; 238
    11b4:	b7 e0       	ldi	r27, 0x07	; 7
    11b6:	b1 83       	std	Z+1, r27	; 0x01
    11b8:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    11ba:	13 82       	std	Z+3, r1	; 0x03
    11bc:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    11be:	e2 ea       	ldi	r30, 0xA2	; 162
    11c0:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    11c2:	f0 93 e9 07 	sts	0x07E9, r31	; 0x8007e9 <pxEnd+0x1>
    11c6:	e0 93 e8 07 	sts	0x07E8, r30	; 0x8007e8 <pxEnd>
    pxEnd->xBlockSize = 0;
    11ca:	13 82       	std	Z+3, r1	; 0x03
    11cc:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    11ce:	11 82       	std	Z+1, r1	; 0x01
    11d0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    11d2:	84 eb       	ldi	r24, 0xB4	; 180
    11d4:	9b e0       	ldi	r25, 0x0B	; 11
    11d6:	13 96       	adiw	r26, 0x03	; 3
    11d8:	9c 93       	st	X, r25
    11da:	8e 93       	st	-X, r24
    11dc:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    11de:	ed 93       	st	X+, r30
    11e0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11e2:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <xMinimumEverFreeBytesRemaining+0x1>
    11e6:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11ea:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <xFreeBytesRemaining+0x1>
    11ee:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e8       	ldi	r25, 0x80	; 128
    11f6:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xBlockAllocatedBit+0x1>
    11fa:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xBlockAllocatedBit>
    11fe:	08 95       	ret

00001200 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1206:	aa ee       	ldi	r26, 0xEA	; 234
    1208:	b7 e0       	ldi	r27, 0x07	; 7
    120a:	01 c0       	rjmp	.+2      	; 0x120e <prvInsertBlockIntoFreeList+0xe>
    120c:	df 01       	movw	r26, r30
    120e:	ed 91       	ld	r30, X+
    1210:	fc 91       	ld	r31, X
    1212:	11 97       	sbiw	r26, 0x01	; 1
    1214:	ec 17       	cp	r30, r28
    1216:	fd 07       	cpc	r31, r29
    1218:	c8 f3       	brcs	.-14     	; 0x120c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    121a:	12 96       	adiw	r26, 0x02	; 2
    121c:	8d 91       	ld	r24, X+
    121e:	9c 91       	ld	r25, X
    1220:	13 97       	sbiw	r26, 0x03	; 3
    1222:	9d 01       	movw	r18, r26
    1224:	28 0f       	add	r18, r24
    1226:	39 1f       	adc	r19, r25
    1228:	c2 17       	cp	r28, r18
    122a:	d3 07       	cpc	r29, r19
    122c:	49 f4       	brne	.+18     	; 0x1240 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    122e:	2a 81       	ldd	r18, Y+2	; 0x02
    1230:	3b 81       	ldd	r19, Y+3	; 0x03
    1232:	82 0f       	add	r24, r18
    1234:	93 1f       	adc	r25, r19
    1236:	13 96       	adiw	r26, 0x03	; 3
    1238:	9c 93       	st	X, r25
    123a:	8e 93       	st	-X, r24
    123c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    123e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	9b 81       	ldd	r25, Y+3	; 0x03
    1244:	9e 01       	movw	r18, r28
    1246:	28 0f       	add	r18, r24
    1248:	39 1f       	adc	r19, r25
    124a:	e2 17       	cp	r30, r18
    124c:	f3 07       	cpc	r31, r19
    124e:	c1 f4       	brne	.+48     	; 0x1280 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    1250:	20 91 e8 07 	lds	r18, 0x07E8	; 0x8007e8 <pxEnd>
    1254:	30 91 e9 07 	lds	r19, 0x07E9	; 0x8007e9 <pxEnd+0x1>
    1258:	e2 17       	cp	r30, r18
    125a:	f3 07       	cpc	r31, r19
    125c:	71 f0       	breq	.+28     	; 0x127a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    125e:	22 81       	ldd	r18, Z+2	; 0x02
    1260:	33 81       	ldd	r19, Z+3	; 0x03
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	9b 83       	std	Y+3, r25	; 0x03
    1268:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    126a:	ed 91       	ld	r30, X+
    126c:	fc 91       	ld	r31, X
    126e:	11 97       	sbiw	r26, 0x01	; 1
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	99 83       	std	Y+1, r25	; 0x01
    1276:	88 83       	st	Y, r24
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    127a:	39 83       	std	Y+1, r19	; 0x01
    127c:	28 83       	st	Y, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1280:	f9 83       	std	Y+1, r31	; 0x01
    1282:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1284:	ca 17       	cp	r28, r26
    1286:	db 07       	cpc	r29, r27
    1288:	11 f0       	breq	.+4      	; 0x128e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    128a:	cd 93       	st	X+, r28
    128c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    12a2:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    12a6:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxEnd>
    12aa:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxEnd+0x1>
    12ae:	89 2b       	or	r24, r25
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <pvPortMalloc+0x20>
        {
            prvHeapInit();
    12b2:	7d df       	rcall	.-262    	; 0x11ae <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    12b4:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xBlockAllocatedBit>
    12b8:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xBlockAllocatedBit+0x1>
    12bc:	80 23       	and	r24, r16
    12be:	91 23       	and	r25, r17
    12c0:	89 2b       	or	r24, r25
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <pvPortMalloc+0x32>
    12c4:	76 c0       	rjmp	.+236    	; 0x13b2 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    12c6:	01 15       	cp	r16, r1
    12c8:	11 05       	cpc	r17, r1
    12ca:	49 f0       	breq	.+18     	; 0x12de <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    12cc:	c8 01       	movw	r24, r16
    12ce:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    12d0:	08 17       	cp	r16, r24
    12d2:	19 07       	cpc	r17, r25
    12d4:	18 f0       	brcs	.+6      	; 0x12dc <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    12d6:	00 e0       	ldi	r16, 0x00	; 0
    12d8:	10 e0       	ldi	r17, 0x00	; 0
    12da:	01 c0       	rjmp	.+2      	; 0x12de <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    12dc:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    12de:	01 15       	cp	r16, r1
    12e0:	11 05       	cpc	r17, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <pvPortMalloc+0x52>
    12e4:	69 c0       	rjmp	.+210    	; 0x13b8 <pvPortMalloc+0x124>
    12e6:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <xFreeBytesRemaining>
    12ea:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <xFreeBytesRemaining+0x1>
    12ee:	80 17       	cp	r24, r16
    12f0:	91 07       	cpc	r25, r17
    12f2:	08 f4       	brcc	.+2      	; 0x12f6 <pvPortMalloc+0x62>
    12f4:	64 c0       	rjmp	.+200    	; 0x13be <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    12f6:	c0 91 ea 07 	lds	r28, 0x07EA	; 0x8007ea <xStart>
    12fa:	d0 91 eb 07 	lds	r29, 0x07EB	; 0x8007eb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    12fe:	ea ee       	ldi	r30, 0xEA	; 234
    1300:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    1304:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    1306:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	9b 81       	ldd	r25, Y+3	; 0x03
    130c:	80 17       	cp	r24, r16
    130e:	91 07       	cpc	r25, r17
    1310:	20 f4       	brcc	.+8      	; 0x131a <pvPortMalloc+0x86>
    1312:	88 81       	ld	r24, Y
    1314:	99 81       	ldd	r25, Y+1	; 0x01
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	a9 f7       	brne	.-22     	; 0x1304 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    131a:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxEnd>
    131e:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxEnd+0x1>
    1322:	c8 17       	cp	r28, r24
    1324:	d9 07       	cpc	r29, r25
    1326:	09 f4       	brne	.+2      	; 0x132a <pvPortMalloc+0x96>
    1328:	4d c0       	rjmp	.+154    	; 0x13c4 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    132a:	e0 80       	ld	r14, Z
    132c:	f1 80       	ldd	r15, Z+1	; 0x01
    132e:	84 e0       	ldi	r24, 0x04	; 4
    1330:	e8 0e       	add	r14, r24
    1332:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1334:	88 81       	ld	r24, Y
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    133c:	2a 81       	ldd	r18, Y+2	; 0x02
    133e:	3b 81       	ldd	r19, Y+3	; 0x03
    1340:	20 1b       	sub	r18, r16
    1342:	31 0b       	sbc	r19, r17
    1344:	29 30       	cpi	r18, 0x09	; 9
    1346:	31 05       	cpc	r19, r1
    1348:	48 f0       	brcs	.+18     	; 0x135c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    134a:	ce 01       	movw	r24, r28
    134c:	80 0f       	add	r24, r16
    134e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1350:	fc 01       	movw	r30, r24
    1352:	33 83       	std	Z+3, r19	; 0x03
    1354:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    1356:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    1358:	0a 83       	std	Y+2, r16	; 0x02
    135a:	52 df       	rcall	.-348    	; 0x1200 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    135c:	2a 81       	ldd	r18, Y+2	; 0x02
    135e:	3b 81       	ldd	r19, Y+3	; 0x03
    1360:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <xFreeBytesRemaining>
    1364:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <xFreeBytesRemaining+0x1>
    1368:	82 1b       	sub	r24, r18
    136a:	93 0b       	sbc	r25, r19
    136c:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <xFreeBytesRemaining+0x1>
    1370:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1374:	40 91 e4 07 	lds	r20, 0x07E4	; 0x8007e4 <xMinimumEverFreeBytesRemaining>
    1378:	50 91 e5 07 	lds	r21, 0x07E5	; 0x8007e5 <xMinimumEverFreeBytesRemaining+0x1>
    137c:	84 17       	cp	r24, r20
    137e:	95 07       	cpc	r25, r21
    1380:	20 f4       	brcc	.+8      	; 0x138a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1382:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <xMinimumEverFreeBytesRemaining+0x1>
    1386:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    138a:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xBlockAllocatedBit>
    138e:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xBlockAllocatedBit+0x1>
    1392:	28 2b       	or	r18, r24
    1394:	39 2b       	or	r19, r25
    1396:	3b 83       	std	Y+3, r19	; 0x03
    1398:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    139e:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <xNumberOfSuccessfulAllocations>
    13a2:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <xNumberOfSuccessfulAllocations+0x1>
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <xNumberOfSuccessfulAllocations+0x1>
    13ac:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <xNumberOfSuccessfulAllocations>
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    13b2:	e1 2c       	mov	r14, r1
    13b4:	f1 2c       	mov	r15, r1
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <pvPortMalloc+0x134>
    13b8:	e1 2c       	mov	r14, r1
    13ba:	f1 2c       	mov	r15, r1
    13bc:	05 c0       	rjmp	.+10     	; 0x13c8 <pvPortMalloc+0x134>
    13be:	e1 2c       	mov	r14, r1
    13c0:	f1 2c       	mov	r15, r1
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <pvPortMalloc+0x134>
    13c4:	e1 2c       	mov	r14, r1
    13c6:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    13c8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    13cc:	e1 14       	cp	r14, r1
    13ce:	f1 04       	cpc	r15, r1
    13d0:	11 f4       	brne	.+4      	; 0x13d6 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    13d2:	0e 94 27 22 	call	0x444e	; 0x444e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    13d6:	c7 01       	movw	r24, r14
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	08 95       	ret

000013e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	91 f1       	breq	.+100    	; 0x1456 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    13f2:	ec 01       	movw	r28, r24
    13f4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    13f6:	4a 81       	ldd	r20, Y+2	; 0x02
    13f8:	5b 81       	ldd	r21, Y+3	; 0x03
    13fa:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <xBlockAllocatedBit>
    13fe:	30 91 df 07 	lds	r19, 0x07DF	; 0x8007df <xBlockAllocatedBit+0x1>
    1402:	ba 01       	movw	r22, r20
    1404:	62 23       	and	r22, r18
    1406:	73 23       	and	r23, r19
    1408:	67 2b       	or	r22, r23
    140a:	29 f1       	breq	.+74     	; 0x1456 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    140c:	68 81       	ld	r22, Y
    140e:	79 81       	ldd	r23, Y+1	; 0x01
    1410:	67 2b       	or	r22, r23
    1412:	09 f5       	brne	.+66     	; 0x1456 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1414:	20 95       	com	r18
    1416:	30 95       	com	r19
    1418:	24 23       	and	r18, r20
    141a:	35 23       	and	r19, r21
    141c:	3b 83       	std	Y+3, r19	; 0x03
    141e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    1420:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	9b 81       	ldd	r25, Y+3	; 0x03
    1428:	20 91 e6 07 	lds	r18, 0x07E6	; 0x8007e6 <xFreeBytesRemaining>
    142c:	30 91 e7 07 	lds	r19, 0x07E7	; 0x8007e7 <xFreeBytesRemaining+0x1>
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <xFreeBytesRemaining+0x1>
    1438:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    143c:	ce 01       	movw	r24, r28
    143e:	e0 de       	rcall	.-576    	; 0x1200 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    1440:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <xNumberOfSuccessfulFrees>
    1444:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <xNumberOfSuccessfulFrees+0x1>
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <xNumberOfSuccessfulFrees+0x1>
    144e:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    1452:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1460:	fc 01       	movw	r30, r24
    1462:	03 96       	adiw	r24, 0x03	; 3
    1464:	92 83       	std	Z+2, r25	; 0x02
    1466:	81 83       	std	Z+1, r24	; 0x01
    1468:	4f ef       	ldi	r20, 0xFF	; 255
    146a:	5f ef       	ldi	r21, 0xFF	; 255
    146c:	ba 01       	movw	r22, r20
    146e:	43 83       	std	Z+3, r20	; 0x03
    1470:	54 83       	std	Z+4, r21	; 0x04
    1472:	65 83       	std	Z+5, r22	; 0x05
    1474:	76 83       	std	Z+6, r23	; 0x06
    1476:	90 87       	std	Z+8, r25	; 0x08
    1478:	87 83       	std	Z+7, r24	; 0x07
    147a:	92 87       	std	Z+10, r25	; 0x0a
    147c:	81 87       	std	Z+9, r24	; 0x09
    147e:	10 82       	st	Z, r1
    1480:	08 95       	ret

00001482 <vListInitialiseItem>:
    1482:	fc 01       	movw	r30, r24
    1484:	13 86       	std	Z+11, r1	; 0x0b
    1486:	12 86       	std	Z+10, r1	; 0x0a
    1488:	08 95       	ret

0000148a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1494:	08 81       	ld	r16, Y
    1496:	19 81       	ldd	r17, Y+1	; 0x01
    1498:	2a 81       	ldd	r18, Y+2	; 0x02
    149a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    149c:	0f 3f       	cpi	r16, 0xFF	; 255
    149e:	4f ef       	ldi	r20, 0xFF	; 255
    14a0:	14 07       	cpc	r17, r20
    14a2:	24 07       	cpc	r18, r20
    14a4:	34 07       	cpc	r19, r20
    14a6:	21 f4       	brne	.+8      	; 0x14b0 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    14a8:	fc 01       	movw	r30, r24
    14aa:	a1 85       	ldd	r26, Z+9	; 0x09
    14ac:	b2 85       	ldd	r27, Z+10	; 0x0a
    14ae:	11 c0       	rjmp	.+34     	; 0x14d2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    14b0:	dc 01       	movw	r26, r24
    14b2:	13 96       	adiw	r26, 0x03	; 3
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <vListInsert+0x2e>
    14b6:	df 01       	movw	r26, r30
    14b8:	14 96       	adiw	r26, 0x04	; 4
    14ba:	ed 91       	ld	r30, X+
    14bc:	fc 91       	ld	r31, X
    14be:	15 97       	sbiw	r26, 0x05	; 5
    14c0:	40 81       	ld	r20, Z
    14c2:	51 81       	ldd	r21, Z+1	; 0x01
    14c4:	62 81       	ldd	r22, Z+2	; 0x02
    14c6:	73 81       	ldd	r23, Z+3	; 0x03
    14c8:	04 17       	cp	r16, r20
    14ca:	15 07       	cpc	r17, r21
    14cc:	26 07       	cpc	r18, r22
    14ce:	37 07       	cpc	r19, r23
    14d0:	90 f7       	brcc	.-28     	; 0x14b6 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    14d2:	14 96       	adiw	r26, 0x04	; 4
    14d4:	ed 91       	ld	r30, X+
    14d6:	fc 91       	ld	r31, X
    14d8:	15 97       	sbiw	r26, 0x05	; 5
    14da:	fd 83       	std	Y+5, r31	; 0x05
    14dc:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14de:	d7 83       	std	Z+7, r29	; 0x07
    14e0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    14e2:	bf 83       	std	Y+7, r27	; 0x07
    14e4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14e6:	15 96       	adiw	r26, 0x05	; 5
    14e8:	dc 93       	st	X, r29
    14ea:	ce 93       	st	-X, r28
    14ec:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    14ee:	9b 87       	std	Y+11, r25	; 0x0b
    14f0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14f2:	fc 01       	movw	r30, r24
    14f4:	20 81       	ld	r18, Z
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	20 83       	st	Z, r18
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    150a:	a2 85       	ldd	r26, Z+10	; 0x0a
    150c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    150e:	c4 81       	ldd	r28, Z+4	; 0x04
    1510:	d5 81       	ldd	r29, Z+5	; 0x05
    1512:	86 81       	ldd	r24, Z+6	; 0x06
    1514:	97 81       	ldd	r25, Z+7	; 0x07
    1516:	9f 83       	std	Y+7, r25	; 0x07
    1518:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    151a:	c6 81       	ldd	r28, Z+6	; 0x06
    151c:	d7 81       	ldd	r29, Z+7	; 0x07
    151e:	84 81       	ldd	r24, Z+4	; 0x04
    1520:	95 81       	ldd	r25, Z+5	; 0x05
    1522:	9d 83       	std	Y+5, r25	; 0x05
    1524:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1526:	11 96       	adiw	r26, 0x01	; 1
    1528:	8d 91       	ld	r24, X+
    152a:	9c 91       	ld	r25, X
    152c:	12 97       	sbiw	r26, 0x02	; 2
    152e:	e8 17       	cp	r30, r24
    1530:	f9 07       	cpc	r31, r25
    1532:	31 f4       	brne	.+12     	; 0x1540 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1534:	86 81       	ldd	r24, Z+6	; 0x06
    1536:	97 81       	ldd	r25, Z+7	; 0x07
    1538:	12 96       	adiw	r26, 0x02	; 2
    153a:	9c 93       	st	X, r25
    153c:	8e 93       	st	-X, r24
    153e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1540:	13 86       	std	Z+11, r1	; 0x0b
    1542:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1544:	8c 91       	ld	r24, X
    1546:	81 50       	subi	r24, 0x01	; 1
    1548:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    154a:	8c 91       	ld	r24, X
}
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	08 95       	ret

00001552 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    1552:	a8 95       	wdr
    1554:	90 ec       	ldi	r25, 0xC0	; 192
    1556:	88 e1       	ldi	r24, 0x18	; 24
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	a8 95       	wdr
    155e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1568:	08 95       	ret

0000156a <pxPortInitialiseStack>:
    156a:	fc 01       	movw	r30, r24
    156c:	60 83       	st	Z, r22
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	70 83       	st	Z, r23
    1572:	31 97       	sbiw	r30, 0x01	; 1
    1574:	10 82       	st	Z, r1
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	10 82       	st	Z, r1
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	20 e8       	ldi	r18, 0x80	; 128
    157e:	20 83       	st	Z, r18
    1580:	31 97       	sbiw	r30, 0x01	; 1
    1582:	10 82       	st	Z, r1
    1584:	31 97       	sbiw	r30, 0x01	; 1
    1586:	10 82       	st	Z, r1
    1588:	31 97       	sbiw	r30, 0x01	; 1
    158a:	10 82       	st	Z, r1
    158c:	77 97       	sbiw	r30, 0x17	; 23
    158e:	40 83       	st	Z, r20
    1590:	31 97       	sbiw	r30, 0x01	; 1
    1592:	50 83       	st	Z, r21
    1594:	86 97       	sbiw	r24, 0x26	; 38
    1596:	08 95       	ret

00001598 <xPortStartScheduler>:
    1598:	dc df       	rcall	.-72     	; 0x1552 <prvSetupTimerInterrupt>
    159a:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    159e:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    15a2:	cd 91       	ld	r28, X+
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	dd 91       	ld	r29, X+
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	7f 91       	pop	r23
    15bc:	6f 91       	pop	r22
    15be:	5f 91       	pop	r21
    15c0:	4f 91       	pop	r20
    15c2:	3f 91       	pop	r19
    15c4:	2f 91       	pop	r18
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	af 90       	pop	r10
    15d6:	9f 90       	pop	r9
    15d8:	8f 90       	pop	r8
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	5f 90       	pop	r5
    15e0:	4f 90       	pop	r4
    15e2:	3f 90       	pop	r3
    15e4:	2f 90       	pop	r2
    15e6:	1f 90       	pop	r1
    15e8:	0f 90       	pop	r0
    15ea:	0c be       	out	0x3c, r0	; 60
    15ec:	0f 90       	pop	r0
    15ee:	0b be       	out	0x3b, r0	; 59
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	08 95       	ret
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	08 95       	ret

000015fc <vPortYield>:
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	0f 92       	push	r0
    1604:	0b b6       	in	r0, 0x3b	; 59
    1606:	0f 92       	push	r0
    1608:	0c b6       	in	r0, 0x3c	; 60
    160a:	0f 92       	push	r0
    160c:	1f 92       	push	r1
    160e:	11 24       	eor	r1, r1
    1610:	2f 92       	push	r2
    1612:	3f 92       	push	r3
    1614:	4f 92       	push	r4
    1616:	5f 92       	push	r5
    1618:	6f 92       	push	r6
    161a:	7f 92       	push	r7
    161c:	8f 92       	push	r8
    161e:	9f 92       	push	r9
    1620:	af 92       	push	r10
    1622:	bf 92       	push	r11
    1624:	cf 92       	push	r12
    1626:	df 92       	push	r13
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
    164c:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    1650:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    1654:	0d b6       	in	r0, 0x3d	; 61
    1656:	0d 92       	st	X+, r0
    1658:	0e b6       	in	r0, 0x3e	; 62
    165a:	0d 92       	st	X+, r0
    165c:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <vTaskSwitchContext>
    1660:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    1664:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    1668:	cd 91       	ld	r28, X+
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	dd 91       	ld	r29, X+
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	bf 90       	pop	r11
    169a:	af 90       	pop	r10
    169c:	9f 90       	pop	r9
    169e:	8f 90       	pop	r8
    16a0:	7f 90       	pop	r7
    16a2:	6f 90       	pop	r6
    16a4:	5f 90       	pop	r5
    16a6:	4f 90       	pop	r4
    16a8:	3f 90       	pop	r3
    16aa:	2f 90       	pop	r2
    16ac:	1f 90       	pop	r1
    16ae:	0f 90       	pop	r0
    16b0:	0c be       	out	0x3c, r0	; 60
    16b2:	0f 90       	pop	r0
    16b4:	0b be       	out	0x3b, r0	; 59
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	0f 90       	pop	r0
    16bc:	08 95       	ret

000016be <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    16be:	0f 92       	push	r0
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	0f 92       	push	r0
    16c6:	0b b6       	in	r0, 0x3b	; 59
    16c8:	0f 92       	push	r0
    16ca:	0c b6       	in	r0, 0x3c	; 60
    16cc:	0f 92       	push	r0
    16ce:	1f 92       	push	r1
    16d0:	11 24       	eor	r1, r1
    16d2:	2f 92       	push	r2
    16d4:	3f 92       	push	r3
    16d6:	4f 92       	push	r4
    16d8:	5f 92       	push	r5
    16da:	6f 92       	push	r6
    16dc:	7f 92       	push	r7
    16de:	8f 92       	push	r8
    16e0:	9f 92       	push	r9
    16e2:	af 92       	push	r10
    16e4:	bf 92       	push	r11
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    1712:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    1716:	0d b6       	in	r0, 0x3d	; 61
    1718:	0d 92       	st	X+, r0
    171a:	0e b6       	in	r0, 0x3e	; 62
    171c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    171e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1720:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <xTaskIncrementTick>
    1724:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1726:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    172a:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    172e:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    1732:	cd 91       	ld	r28, X+
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	dd 91       	ld	r29, X+
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	ff 91       	pop	r31
    173c:	ef 91       	pop	r30
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	af 90       	pop	r10
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	7f 90       	pop	r7
    176c:	6f 90       	pop	r6
    176e:	5f 90       	pop	r5
    1770:	4f 90       	pop	r4
    1772:	3f 90       	pop	r3
    1774:	2f 90       	pop	r2
    1776:	1f 90       	pop	r1
    1778:	0f 90       	pop	r0
    177a:	0c be       	out	0x3c, r0	; 60
    177c:	0f 90       	pop	r0
    177e:	0b be       	out	0x3b, r0	; 59
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1786:	08 95       	ret

00001788 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1788:	9a df       	rcall	.-204    	; 0x16be <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    178a:	18 95       	reti

0000178c <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    178c:	dc 01       	movw	r26, r24
    178e:	53 96       	adiw	r26, 0x13	; 19
    1790:	2c 91       	ld	r18, X
    1792:	53 97       	sbiw	r26, 0x13	; 19
    1794:	22 23       	and	r18, r18
    1796:	41 f0       	breq	.+16     	; 0x17a8 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1798:	5a 96       	adiw	r26, 0x1a	; 26
    179a:	ed 91       	ld	r30, X+
    179c:	fc 91       	ld	r31, X
    179e:	5b 97       	sbiw	r26, 0x1b	; 27
    17a0:	90 81       	ld	r25, Z
    17a2:	8a e0       	ldi	r24, 0x0A	; 10
    17a4:	89 1b       	sub	r24, r25
    17a6:	08 95       	ret
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	08 95       	ret

000017ac <prvIsQueueEmpty>:
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	0f 92       	push	r0
    17b2:	fc 01       	movw	r30, r24
    17b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    17b6:	81 11       	cpse	r24, r1
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <prvIsQueueEmpty+0x12>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <prvIsQueueEmpty+0x14>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	08 95       	ret

000017c6 <prvIsQueueFull>:
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	0f 92       	push	r0
    17cc:	fc 01       	movw	r30, r24
    17ce:	26 8d       	ldd	r18, Z+30	; 0x1e
    17d0:	87 8d       	ldd	r24, Z+31	; 0x1f
    17d2:	28 13       	cpse	r18, r24
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <prvIsQueueFull+0x14>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <prvIsQueueFull+0x16>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	08 95       	ret

000017e2 <prvCopyDataToQueue>:
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
    17ec:	04 2f       	mov	r16, r20
    17ee:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17f0:	48 a1       	ldd	r20, Y+32	; 0x20
    17f2:	41 11       	cpse	r20, r1
    17f4:	0c c0       	rjmp	.+24     	; 0x180e <prvCopyDataToQueue+0x2c>
    17f6:	88 81       	ld	r24, Y
    17f8:	99 81       	ldd	r25, Y+1	; 0x01
    17fa:	89 2b       	or	r24, r25
    17fc:	09 f0       	breq	.+2      	; 0x1800 <prvCopyDataToQueue+0x1e>
    17fe:	42 c0       	rjmp	.+132    	; 0x1884 <prvCopyDataToQueue+0xa2>
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	0e 94 42 1b 	call	0x3684	; 0x3684 <xTaskPriorityDisinherit>
    1808:	1d 82       	std	Y+5, r1	; 0x05
    180a:	1c 82       	std	Y+4, r1	; 0x04
    180c:	42 c0       	rjmp	.+132    	; 0x1892 <prvCopyDataToQueue+0xb0>
    180e:	01 11       	cpse	r16, r1
    1810:	17 c0       	rjmp	.+46     	; 0x1840 <prvCopyDataToQueue+0x5e>
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	9b 81       	ldd	r25, Y+3	; 0x03
    1818:	0e 94 00 38 	call	0x7000	; 0x7000 <memcpy>
    181c:	28 a1       	ldd	r18, Y+32	; 0x20
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	82 0f       	add	r24, r18
    1824:	91 1d       	adc	r25, r1
    1826:	9b 83       	std	Y+3, r25	; 0x03
    1828:	8a 83       	std	Y+2, r24	; 0x02
    182a:	2c 81       	ldd	r18, Y+4	; 0x04
    182c:	3d 81       	ldd	r19, Y+5	; 0x05
    182e:	82 17       	cp	r24, r18
    1830:	93 07       	cpc	r25, r19
    1832:	50 f1       	brcs	.+84     	; 0x1888 <prvCopyDataToQueue+0xa6>
    1834:	88 81       	ld	r24, Y
    1836:	99 81       	ldd	r25, Y+1	; 0x01
    1838:	9b 83       	std	Y+3, r25	; 0x03
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	29 c0       	rjmp	.+82     	; 0x1892 <prvCopyDataToQueue+0xb0>
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	8e 81       	ldd	r24, Y+6	; 0x06
    1844:	9f 81       	ldd	r25, Y+7	; 0x07
    1846:	0e 94 00 38 	call	0x7000	; 0x7000 <memcpy>
    184a:	88 a1       	ldd	r24, Y+32	; 0x20
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	91 95       	neg	r25
    1850:	81 95       	neg	r24
    1852:	91 09       	sbc	r25, r1
    1854:	2e 81       	ldd	r18, Y+6	; 0x06
    1856:	3f 81       	ldd	r19, Y+7	; 0x07
    1858:	28 0f       	add	r18, r24
    185a:	39 1f       	adc	r19, r25
    185c:	3f 83       	std	Y+7, r19	; 0x07
    185e:	2e 83       	std	Y+6, r18	; 0x06
    1860:	48 81       	ld	r20, Y
    1862:	59 81       	ldd	r21, Y+1	; 0x01
    1864:	24 17       	cp	r18, r20
    1866:	35 07       	cpc	r19, r21
    1868:	30 f4       	brcc	.+12     	; 0x1876 <prvCopyDataToQueue+0x94>
    186a:	2c 81       	ldd	r18, Y+4	; 0x04
    186c:	3d 81       	ldd	r19, Y+5	; 0x05
    186e:	82 0f       	add	r24, r18
    1870:	93 1f       	adc	r25, r19
    1872:	9f 83       	std	Y+7, r25	; 0x07
    1874:	8e 83       	std	Y+6, r24	; 0x06
    1876:	02 30       	cpi	r16, 0x02	; 2
    1878:	49 f4       	brne	.+18     	; 0x188c <prvCopyDataToQueue+0xaa>
    187a:	11 23       	and	r17, r17
    187c:	49 f0       	breq	.+18     	; 0x1890 <prvCopyDataToQueue+0xae>
    187e:	11 50       	subi	r17, 0x01	; 1
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	07 c0       	rjmp	.+14     	; 0x1892 <prvCopyDataToQueue+0xb0>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	05 c0       	rjmp	.+10     	; 0x1892 <prvCopyDataToQueue+0xb0>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <prvCopyDataToQueue+0xb0>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <prvCopyDataToQueue+0xb0>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	1f 5f       	subi	r17, 0xFF	; 255
    1894:	1e 8f       	std	Y+30, r17	; 0x1e
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <prvCopyDataFromQueue>:
    18a0:	fc 01       	movw	r30, r24
    18a2:	40 a1       	ldd	r20, Z+32	; 0x20
    18a4:	44 23       	and	r20, r20
    18a6:	a9 f0       	breq	.+42     	; 0x18d2 <prvCopyDataFromQueue+0x32>
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	26 81       	ldd	r18, Z+6	; 0x06
    18ac:	37 81       	ldd	r19, Z+7	; 0x07
    18ae:	24 0f       	add	r18, r20
    18b0:	35 1f       	adc	r19, r21
    18b2:	37 83       	std	Z+7, r19	; 0x07
    18b4:	26 83       	std	Z+6, r18	; 0x06
    18b6:	84 81       	ldd	r24, Z+4	; 0x04
    18b8:	95 81       	ldd	r25, Z+5	; 0x05
    18ba:	28 17       	cp	r18, r24
    18bc:	39 07       	cpc	r19, r25
    18be:	20 f0       	brcs	.+8      	; 0x18c8 <prvCopyDataFromQueue+0x28>
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	97 83       	std	Z+7, r25	; 0x07
    18c6:	86 83       	std	Z+6, r24	; 0x06
    18c8:	cb 01       	movw	r24, r22
    18ca:	66 81       	ldd	r22, Z+6	; 0x06
    18cc:	77 81       	ldd	r23, Z+7	; 0x07
    18ce:	0c 94 00 38 	jmp	0x7000	; 0x7000 <memcpy>
    18d2:	08 95       	ret

000018d4 <prvUnlockQueue>:
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	0f 92       	push	r0
    18e2:	1a a1       	ldd	r17, Y+34	; 0x22
    18e4:	0b c0       	rjmp	.+22     	; 0x18fc <prvUnlockQueue+0x28>
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	88 23       	and	r24, r24
    18ea:	51 f0       	breq	.+20     	; 0x1900 <prvUnlockQueue+0x2c>
    18ec:	ce 01       	movw	r24, r28
    18ee:	43 96       	adiw	r24, 0x13	; 19
    18f0:	0e 94 ce 18 	call	0x319c	; 0x319c <xTaskRemoveFromEventList>
    18f4:	81 11       	cpse	r24, r1
    18f6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <vTaskMissedYield>
    18fa:	11 50       	subi	r17, 0x01	; 1
    18fc:	11 16       	cp	r1, r17
    18fe:	9c f3       	brlt	.-26     	; 0x18e6 <prvUnlockQueue+0x12>
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	8a a3       	std	Y+34, r24	; 0x22
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	0f 92       	push	r0
    190e:	19 a1       	ldd	r17, Y+33	; 0x21
    1910:	0b c0       	rjmp	.+22     	; 0x1928 <prvUnlockQueue+0x54>
    1912:	88 85       	ldd	r24, Y+8	; 0x08
    1914:	88 23       	and	r24, r24
    1916:	51 f0       	breq	.+20     	; 0x192c <prvUnlockQueue+0x58>
    1918:	ce 01       	movw	r24, r28
    191a:	08 96       	adiw	r24, 0x08	; 8
    191c:	0e 94 ce 18 	call	0x319c	; 0x319c <xTaskRemoveFromEventList>
    1920:	81 11       	cpse	r24, r1
    1922:	0e 94 a4 1a 	call	0x3548	; 0x3548 <vTaskMissedYield>
    1926:	11 50       	subi	r17, 0x01	; 1
    1928:	11 16       	cp	r1, r17
    192a:	9c f3       	brlt	.-26     	; 0x1912 <prvUnlockQueue+0x3e>
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	89 a3       	std	Y+33, r24	; 0x21
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	08 95       	ret

0000193c <xQueueGenericReset>:
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	ec 01       	movw	r28, r24
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	0f 92       	push	r0
    1948:	e8 81       	ld	r30, Y
    194a:	f9 81       	ldd	r31, Y+1	; 0x01
    194c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    194e:	28 a1       	ldd	r18, Y+32	; 0x20
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	82 9f       	mul	r24, r18
    1956:	a0 01       	movw	r20, r0
    1958:	83 9f       	mul	r24, r19
    195a:	50 0d       	add	r21, r0
    195c:	92 9f       	mul	r25, r18
    195e:	50 0d       	add	r21, r0
    1960:	11 24       	eor	r1, r1
    1962:	4e 0f       	add	r20, r30
    1964:	5f 1f       	adc	r21, r31
    1966:	5d 83       	std	Y+5, r21	; 0x05
    1968:	4c 83       	std	Y+4, r20	; 0x04
    196a:	1e 8e       	std	Y+30, r1	; 0x1e
    196c:	fb 83       	std	Y+3, r31	; 0x03
    196e:	ea 83       	std	Y+2, r30	; 0x02
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	28 9f       	mul	r18, r24
    1974:	a0 01       	movw	r20, r0
    1976:	29 9f       	mul	r18, r25
    1978:	50 0d       	add	r21, r0
    197a:	38 9f       	mul	r19, r24
    197c:	50 0d       	add	r21, r0
    197e:	11 24       	eor	r1, r1
    1980:	cf 01       	movw	r24, r30
    1982:	84 0f       	add	r24, r20
    1984:	95 1f       	adc	r25, r21
    1986:	9f 83       	std	Y+7, r25	; 0x07
    1988:	8e 83       	std	Y+6, r24	; 0x06
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	89 a3       	std	Y+33, r24	; 0x21
    198e:	8a a3       	std	Y+34, r24	; 0x22
    1990:	61 11       	cpse	r22, r1
    1992:	0b c0       	rjmp	.+22     	; 0x19aa <xQueueGenericReset+0x6e>
    1994:	88 85       	ldd	r24, Y+8	; 0x08
    1996:	88 23       	and	r24, r24
    1998:	71 f0       	breq	.+28     	; 0x19b6 <xQueueGenericReset+0x7a>
    199a:	ce 01       	movw	r24, r28
    199c:	08 96       	adiw	r24, 0x08	; 8
    199e:	0e 94 ce 18 	call	0x319c	; 0x319c <xTaskRemoveFromEventList>
    19a2:	88 23       	and	r24, r24
    19a4:	41 f0       	breq	.+16     	; 0x19b6 <xQueueGenericReset+0x7a>
    19a6:	2a de       	rcall	.-940    	; 0x15fc <vPortYield>
    19a8:	06 c0       	rjmp	.+12     	; 0x19b6 <xQueueGenericReset+0x7a>
    19aa:	ce 01       	movw	r24, r28
    19ac:	08 96       	adiw	r24, 0x08	; 8
    19ae:	58 dd       	rcall	.-1360   	; 0x1460 <vListInitialise>
    19b0:	ce 01       	movw	r24, r28
    19b2:	43 96       	adiw	r24, 0x13	; 19
    19b4:	55 dd       	rcall	.-1366   	; 0x1460 <vListInitialise>
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <prvInitialiseNewQueue>:
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	f8 01       	movw	r30, r16
    19c8:	61 11       	cpse	r22, r1
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <prvInitialiseNewQueue+0x10>
    19cc:	11 83       	std	Z+1, r17	; 0x01
    19ce:	00 83       	st	Z, r16
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <prvInitialiseNewQueue+0x14>
    19d2:	51 83       	std	Z+1, r21	; 0x01
    19d4:	40 83       	st	Z, r20
    19d6:	87 8f       	std	Z+31, r24	; 0x1f
    19d8:	60 a3       	std	Z+32, r22	; 0x20
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	cf 01       	movw	r24, r30
    19de:	ae df       	rcall	.-164    	; 0x193c <xQueueGenericReset>
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	08 95       	ret

000019e6 <xQueueGenericCreate>:
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	f8 2e       	mov	r15, r24
    19f6:	e6 2e       	mov	r14, r22
    19f8:	d4 2e       	mov	r13, r20
    19fa:	86 9f       	mul	r24, r22
    19fc:	c0 01       	movw	r24, r0
    19fe:	11 24       	eor	r1, r1
    1a00:	83 96       	adiw	r24, 0x23	; 35
    1a02:	48 dc       	rcall	.-1904   	; 0x1294 <pvPortMalloc>
    1a04:	ec 01       	movw	r28, r24
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	41 f0       	breq	.+16     	; 0x1a1a <xQueueGenericCreate+0x34>
    1a0a:	8c 01       	movw	r16, r24
    1a0c:	2d 2d       	mov	r18, r13
    1a0e:	ac 01       	movw	r20, r24
    1a10:	4d 5d       	subi	r20, 0xDD	; 221
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	6e 2d       	mov	r22, r14
    1a16:	8f 2d       	mov	r24, r15
    1a18:	d4 df       	rcall	.-88     	; 0x19c2 <prvInitialiseNewQueue>
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	df 90       	pop	r13
    1a2a:	08 95       	ret

00001a2c <xQueueGenericSend>:
    1a2c:	cf 92       	push	r12
    1a2e:	df 92       	push	r13
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	29 97       	sbiw	r28, 0x09	; 9
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	7c 01       	movw	r14, r24
    1a4e:	6b 01       	movw	r12, r22
    1a50:	2e 83       	std	Y+6, r18	; 0x06
    1a52:	3f 83       	std	Y+7, r19	; 0x07
    1a54:	48 87       	std	Y+8, r20	; 0x08
    1a56:	59 87       	std	Y+9, r21	; 0x09
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	0f 92       	push	r0
    1a60:	f7 01       	movw	r30, r14
    1a62:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a64:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a66:	98 17       	cp	r25, r24
    1a68:	10 f0       	brcs	.+4      	; 0x1a6e <xQueueGenericSend+0x42>
    1a6a:	02 30       	cpi	r16, 0x02	; 2
    1a6c:	b1 f4       	brne	.+44     	; 0x1a9a <xQueueGenericSend+0x6e>
    1a6e:	40 2f       	mov	r20, r16
    1a70:	b6 01       	movw	r22, r12
    1a72:	c7 01       	movw	r24, r14
    1a74:	b6 de       	rcall	.-660    	; 0x17e2 <prvCopyDataToQueue>
    1a76:	f7 01       	movw	r30, r14
    1a78:	93 89       	ldd	r25, Z+19	; 0x13
    1a7a:	99 23       	and	r25, r25
    1a7c:	41 f0       	breq	.+16     	; 0x1a8e <xQueueGenericSend+0x62>
    1a7e:	c7 01       	movw	r24, r14
    1a80:	43 96       	adiw	r24, 0x13	; 19
    1a82:	0e 94 ce 18 	call	0x319c	; 0x319c <xTaskRemoveFromEventList>
    1a86:	88 23       	and	r24, r24
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <xQueueGenericSend+0x66>
    1a8a:	b8 dd       	rcall	.-1168   	; 0x15fc <vPortYield>
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <xQueueGenericSend+0x66>
    1a8e:	81 11       	cpse	r24, r1
    1a90:	b5 dd       	rcall	.-1174   	; 0x15fc <vPortYield>
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	4c c0       	rjmp	.+152    	; 0x1b32 <xQueueGenericSend+0x106>
    1a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9e:	a8 85       	ldd	r26, Y+8	; 0x08
    1aa0:	b9 85       	ldd	r27, Y+9	; 0x09
    1aa2:	89 2b       	or	r24, r25
    1aa4:	8a 2b       	or	r24, r26
    1aa6:	8b 2b       	or	r24, r27
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <xQueueGenericSend+0x86>
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	40 c0       	rjmp	.+128    	; 0x1b32 <xQueueGenericSend+0x106>
    1ab2:	11 11       	cpse	r17, r1
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <xQueueGenericSend+0x94>
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	0e 94 2d 1a 	call	0x345a	; 0x345a <vTaskInternalSetTimeOutState>
    1abe:	11 e0       	ldi	r17, 0x01	; 1
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	c7 d7       	rcall	.+3982   	; 0x2a54 <vTaskSuspendAll>
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	0f 92       	push	r0
    1acc:	f7 01       	movw	r30, r14
    1ace:	81 a1       	ldd	r24, Z+33	; 0x21
    1ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <xQueueGenericSend+0xaa>
    1ad4:	11 a2       	std	Z+33, r1	; 0x21
    1ad6:	f7 01       	movw	r30, r14
    1ad8:	82 a1       	ldd	r24, Z+34	; 0x22
    1ada:	8f 3f       	cpi	r24, 0xFF	; 255
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <xQueueGenericSend+0xb4>
    1ade:	12 a2       	std	Z+34, r1	; 0x22
    1ae0:	0f 90       	pop	r0
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	be 01       	movw	r22, r28
    1ae6:	6a 5f       	subi	r22, 0xFA	; 250
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	0e 94 3e 1a 	call	0x347c	; 0x347c <xTaskCheckForTimeOut>
    1af2:	81 11       	cpse	r24, r1
    1af4:	19 c0       	rjmp	.+50     	; 0x1b28 <xQueueGenericSend+0xfc>
    1af6:	c7 01       	movw	r24, r14
    1af8:	66 de       	rcall	.-820    	; 0x17c6 <prvIsQueueFull>
    1afa:	88 23       	and	r24, r24
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <xQueueGenericSend+0xf2>
    1afe:	4e 81       	ldd	r20, Y+6	; 0x06
    1b00:	5f 81       	ldd	r21, Y+7	; 0x07
    1b02:	68 85       	ldd	r22, Y+8	; 0x08
    1b04:	79 85       	ldd	r23, Y+9	; 0x09
    1b06:	c7 01       	movw	r24, r14
    1b08:	08 96       	adiw	r24, 0x08	; 8
    1b0a:	0e 94 2b 18 	call	0x3056	; 0x3056 <vTaskPlaceOnEventList>
    1b0e:	c7 01       	movw	r24, r14
    1b10:	e1 de       	rcall	.-574    	; 0x18d4 <prvUnlockQueue>
    1b12:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
    1b16:	81 11       	cpse	r24, r1
    1b18:	a0 cf       	rjmp	.-192    	; 0x1a5a <xQueueGenericSend+0x2e>
    1b1a:	70 dd       	rcall	.-1312   	; 0x15fc <vPortYield>
    1b1c:	9e cf       	rjmp	.-196    	; 0x1a5a <xQueueGenericSend+0x2e>
    1b1e:	c7 01       	movw	r24, r14
    1b20:	d9 de       	rcall	.-590    	; 0x18d4 <prvUnlockQueue>
    1b22:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
    1b26:	99 cf       	rjmp	.-206    	; 0x1a5a <xQueueGenericSend+0x2e>
    1b28:	c7 01       	movw	r24, r14
    1b2a:	d4 de       	rcall	.-600    	; 0x18d4 <prvUnlockQueue>
    1b2c:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	29 96       	adiw	r28, 0x09	; 9
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	08 95       	ret

00001b50 <prvInitialiseMutex>:
    1b50:	0f 93       	push	r16
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	69 f0       	breq	.+26     	; 0x1b70 <prvInitialiseMutex+0x20>
    1b56:	fc 01       	movw	r30, r24
    1b58:	15 82       	std	Z+5, r1	; 0x05
    1b5a:	14 82       	std	Z+4, r1	; 0x04
    1b5c:	11 82       	std	Z+1, r1	; 0x01
    1b5e:	10 82       	st	Z, r1
    1b60:	16 82       	std	Z+6, r1	; 0x06
    1b62:	00 e0       	ldi	r16, 0x00	; 0
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	a9 01       	movw	r20, r18
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	5e df       	rcall	.-324    	; 0x1a2c <xQueueGenericSend>
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <xQueueCreateMutex>:
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	48 2f       	mov	r20, r24
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	33 df       	rcall	.-410    	; 0x19e6 <xQueueGenericCreate>
    1b80:	ec 01       	movw	r28, r24
    1b82:	e6 df       	rcall	.-52     	; 0x1b50 <prvInitialiseMutex>
    1b84:	ce 01       	movw	r24, r28
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <xQueueGenericSendFromISR>:
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	8a 01       	movw	r16, r20
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b9e:	37 8d       	ldd	r19, Z+31	; 0x1f
    1ba0:	53 17       	cp	r21, r19
    1ba2:	10 f0       	brcs	.+4      	; 0x1ba8 <xQueueGenericSendFromISR+0x1c>
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	f9 f4       	brne	.+62     	; 0x1be6 <xQueueGenericSendFromISR+0x5a>
    1ba8:	42 2f       	mov	r20, r18
    1baa:	78 01       	movw	r14, r16
    1bac:	ec 01       	movw	r28, r24
    1bae:	1a a1       	ldd	r17, Y+34	; 0x22
    1bb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	16 de       	rcall	.-980    	; 0x17e2 <prvCopyDataToQueue>
    1bb6:	1f 3f       	cpi	r17, 0xFF	; 255
    1bb8:	81 f4       	brne	.+32     	; 0x1bda <xQueueGenericSendFromISR+0x4e>
    1bba:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbc:	88 23       	and	r24, r24
    1bbe:	a9 f0       	breq	.+42     	; 0x1bea <xQueueGenericSendFromISR+0x5e>
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	43 96       	adiw	r24, 0x13	; 19
    1bc4:	0e 94 ce 18 	call	0x319c	; 0x319c <xTaskRemoveFromEventList>
    1bc8:	88 23       	and	r24, r24
    1bca:	89 f0       	breq	.+34     	; 0x1bee <xQueueGenericSendFromISR+0x62>
    1bcc:	e1 14       	cp	r14, r1
    1bce:	f1 04       	cpc	r15, r1
    1bd0:	81 f0       	breq	.+32     	; 0x1bf2 <xQueueGenericSendFromISR+0x66>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	f7 01       	movw	r30, r14
    1bd6:	80 83       	st	Z, r24
    1bd8:	0d c0       	rjmp	.+26     	; 0x1bf4 <xQueueGenericSendFromISR+0x68>
    1bda:	ff 24       	eor	r15, r15
    1bdc:	f3 94       	inc	r15
    1bde:	f1 0e       	add	r15, r17
    1be0:	fa a2       	std	Y+34, r15	; 0x22
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <xQueueGenericSendFromISR+0x68>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <xQueueGenericSendFromISR+0x68>
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <xQueueGenericSendFromISR+0x68>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <xQueueGenericSendFromISR+0x68>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	08 95       	ret

00001c02 <xQueueReceive>:
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	29 97       	sbiw	r28, 0x09	; 9
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	8c 01       	movw	r16, r24
    1c24:	6b 01       	movw	r12, r22
    1c26:	2e 83       	std	Y+6, r18	; 0x06
    1c28:	3f 83       	std	Y+7, r19	; 0x07
    1c2a:	48 87       	std	Y+8, r20	; 0x08
    1c2c:	59 87       	std	Y+9, r21	; 0x09
    1c2e:	e1 2c       	mov	r14, r1
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	0f 92       	push	r0
    1c36:	f8 01       	movw	r30, r16
    1c38:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1c3a:	ff 20       	and	r15, r15
    1c3c:	99 f0       	breq	.+38     	; 0x1c64 <xQueueReceive+0x62>
    1c3e:	b6 01       	movw	r22, r12
    1c40:	c8 01       	movw	r24, r16
    1c42:	2e de       	rcall	.-932    	; 0x18a0 <prvCopyDataFromQueue>
    1c44:	fa 94       	dec	r15
    1c46:	f8 01       	movw	r30, r16
    1c48:	f6 8e       	std	Z+30, r15	; 0x1e
    1c4a:	80 85       	ldd	r24, Z+8	; 0x08
    1c4c:	88 23       	and	r24, r24
    1c4e:	31 f0       	breq	.+12     	; 0x1c5c <xQueueReceive+0x5a>
    1c50:	c8 01       	movw	r24, r16
    1c52:	08 96       	adiw	r24, 0x08	; 8
    1c54:	0e 94 ce 18 	call	0x319c	; 0x319c <xTaskRemoveFromEventList>
    1c58:	81 11       	cpse	r24, r1
    1c5a:	d0 dc       	rcall	.-1632   	; 0x15fc <vPortYield>
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	4f c0       	rjmp	.+158    	; 0x1d02 <xQueueReceive+0x100>
    1c64:	8e 81       	ldd	r24, Y+6	; 0x06
    1c66:	9f 81       	ldd	r25, Y+7	; 0x07
    1c68:	a8 85       	ldd	r26, Y+8	; 0x08
    1c6a:	b9 85       	ldd	r27, Y+9	; 0x09
    1c6c:	89 2b       	or	r24, r25
    1c6e:	8a 2b       	or	r24, r26
    1c70:	8b 2b       	or	r24, r27
    1c72:	21 f4       	brne	.+8      	; 0x1c7c <xQueueReceive+0x7a>
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	43 c0       	rjmp	.+134    	; 0x1d02 <xQueueReceive+0x100>
    1c7c:	e1 10       	cpse	r14, r1
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <xQueueReceive+0x8a>
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	0e 94 2d 1a 	call	0x345a	; 0x345a <vTaskInternalSetTimeOutState>
    1c88:	ee 24       	eor	r14, r14
    1c8a:	e3 94       	inc	r14
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	e1 d6       	rcall	.+3522   	; 0x2a54 <vTaskSuspendAll>
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	0f 92       	push	r0
    1c98:	f8 01       	movw	r30, r16
    1c9a:	81 a1       	ldd	r24, Z+33	; 0x21
    1c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <xQueueReceive+0xa0>
    1ca0:	11 a2       	std	Z+33, r1	; 0x21
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	82 a1       	ldd	r24, Z+34	; 0x22
    1ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <xQueueReceive+0xaa>
    1caa:	12 a2       	std	Z+34, r1	; 0x22
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	be 01       	movw	r22, r28
    1cb2:	6a 5f       	subi	r22, 0xFA	; 250
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	0e 94 3e 1a 	call	0x347c	; 0x347c <xTaskCheckForTimeOut>
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	17 c0       	rjmp	.+46     	; 0x1cf0 <xQueueReceive+0xee>
    1cc2:	c8 01       	movw	r24, r16
    1cc4:	73 dd       	rcall	.-1306   	; 0x17ac <prvIsQueueEmpty>
    1cc6:	88 23       	and	r24, r24
    1cc8:	79 f0       	breq	.+30     	; 0x1ce8 <xQueueReceive+0xe6>
    1cca:	4e 81       	ldd	r20, Y+6	; 0x06
    1ccc:	5f 81       	ldd	r21, Y+7	; 0x07
    1cce:	68 85       	ldd	r22, Y+8	; 0x08
    1cd0:	79 85       	ldd	r23, Y+9	; 0x09
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	43 96       	adiw	r24, 0x13	; 19
    1cd6:	0e 94 2b 18 	call	0x3056	; 0x3056 <vTaskPlaceOnEventList>
    1cda:	c8 01       	movw	r24, r16
    1cdc:	fb dd       	rcall	.-1034   	; 0x18d4 <prvUnlockQueue>
    1cde:	fa d7       	rcall	.+4084   	; 0x2cd4 <xTaskResumeAll>
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	a6 cf       	rjmp	.-180    	; 0x1c30 <xQueueReceive+0x2e>
    1ce4:	8b dc       	rcall	.-1770   	; 0x15fc <vPortYield>
    1ce6:	a4 cf       	rjmp	.-184    	; 0x1c30 <xQueueReceive+0x2e>
    1ce8:	c8 01       	movw	r24, r16
    1cea:	f4 dd       	rcall	.-1048   	; 0x18d4 <prvUnlockQueue>
    1cec:	f3 d7       	rcall	.+4070   	; 0x2cd4 <xTaskResumeAll>
    1cee:	a0 cf       	rjmp	.-192    	; 0x1c30 <xQueueReceive+0x2e>
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	f0 dd       	rcall	.-1056   	; 0x18d4 <prvUnlockQueue>
    1cf4:	ef d7       	rcall	.+4062   	; 0x2cd4 <xTaskResumeAll>
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	59 dd       	rcall	.-1358   	; 0x17ac <prvIsQueueEmpty>
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <xQueueReceive+0xfe>
    1cfe:	98 cf       	rjmp	.-208    	; 0x1c30 <xQueueReceive+0x2e>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	29 96       	adiw	r28, 0x09	; 9
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <xQueueSemaphoreTake>:
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	29 97       	sbiw	r28, 0x09	; 9
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	4e 83       	std	Y+6, r20	; 0x06
    1d40:	5f 83       	std	Y+7, r21	; 0x07
    1d42:	68 87       	std	Y+8, r22	; 0x08
    1d44:	79 87       	std	Y+9, r23	; 0x09
    1d46:	e1 2c       	mov	r14, r1
    1d48:	f1 2c       	mov	r15, r1
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	0f 92       	push	r0
    1d50:	f8 01       	movw	r30, r16
    1d52:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d54:	88 23       	and	r24, r24
    1d56:	c9 f0       	breq	.+50     	; 0x1d8a <xQueueSemaphoreTake+0x6a>
    1d58:	81 50       	subi	r24, 0x01	; 1
    1d5a:	86 8f       	std	Z+30, r24	; 0x1e
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	89 2b       	or	r24, r25
    1d62:	29 f4       	brne	.+10     	; 0x1d6e <xQueueSemaphoreTake+0x4e>
    1d64:	0e 94 2e 1c 	call	0x385c	; 0x385c <pvTaskIncrementMutexHeldCount>
    1d68:	f8 01       	movw	r30, r16
    1d6a:	95 83       	std	Z+5, r25	; 0x05
    1d6c:	84 83       	std	Z+4, r24	; 0x04
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 85       	ldd	r24, Z+8	; 0x08
    1d72:	88 23       	and	r24, r24
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <xQueueSemaphoreTake+0x62>
    1d76:	c8 01       	movw	r24, r16
    1d78:	08 96       	adiw	r24, 0x08	; 8
    1d7a:	0e 94 ce 18 	call	0x319c	; 0x319c <xTaskRemoveFromEventList>
    1d7e:	81 11       	cpse	r24, r1
    1d80:	3d dc       	rcall	.-1926   	; 0x15fc <vPortYield>
    1d82:	0f 90       	pop	r0
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	6f c0       	rjmp	.+222    	; 0x1e68 <xQueueSemaphoreTake+0x148>
    1d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8e:	a8 85       	ldd	r26, Y+8	; 0x08
    1d90:	b9 85       	ldd	r27, Y+9	; 0x09
    1d92:	89 2b       	or	r24, r25
    1d94:	8a 2b       	or	r24, r26
    1d96:	8b 2b       	or	r24, r27
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <xQueueSemaphoreTake+0x82>
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	63 c0       	rjmp	.+198    	; 0x1e68 <xQueueSemaphoreTake+0x148>
    1da2:	f1 10       	cpse	r15, r1
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <xQueueSemaphoreTake+0x92>
    1da6:	ce 01       	movw	r24, r28
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	0e 94 2d 1a 	call	0x345a	; 0x345a <vTaskInternalSetTimeOutState>
    1dae:	ff 24       	eor	r15, r15
    1db0:	f3 94       	inc	r15
    1db2:	0f 90       	pop	r0
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	4e d6       	rcall	.+3228   	; 0x2a54 <vTaskSuspendAll>
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	0f 92       	push	r0
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	81 a1       	ldd	r24, Z+33	; 0x21
    1dc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <xQueueSemaphoreTake+0xa8>
    1dc6:	11 a2       	std	Z+33, r1	; 0x21
    1dc8:	f8 01       	movw	r30, r16
    1dca:	82 a1       	ldd	r24, Z+34	; 0x22
    1dcc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <xQueueSemaphoreTake+0xb2>
    1dd0:	12 a2       	std	Z+34, r1	; 0x22
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	be 01       	movw	r22, r28
    1dd8:	6a 5f       	subi	r22, 0xFA	; 250
    1dda:	7f 4f       	sbci	r23, 0xFF	; 255
    1ddc:	ce 01       	movw	r24, r28
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	0e 94 3e 1a 	call	0x347c	; 0x347c <xTaskCheckForTimeOut>
    1de4:	81 11       	cpse	r24, r1
    1de6:	26 c0       	rjmp	.+76     	; 0x1e34 <xQueueSemaphoreTake+0x114>
    1de8:	c8 01       	movw	r24, r16
    1dea:	e0 dc       	rcall	.-1600   	; 0x17ac <prvIsQueueEmpty>
    1dec:	88 23       	and	r24, r24
    1dee:	f1 f0       	breq	.+60     	; 0x1e2c <xQueueSemaphoreTake+0x10c>
    1df0:	f8 01       	movw	r30, r16
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	89 2b       	or	r24, r25
    1df8:	51 f4       	brne	.+20     	; 0x1e0e <xQueueSemaphoreTake+0xee>
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	0f 92       	push	r0
    1e00:	84 81       	ldd	r24, Z+4	; 0x04
    1e02:	95 81       	ldd	r25, Z+5	; 0x05
    1e04:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskPriorityInherit>
    1e08:	e8 2e       	mov	r14, r24
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e10:	5f 81       	ldd	r21, Y+7	; 0x07
    1e12:	68 85       	ldd	r22, Y+8	; 0x08
    1e14:	79 85       	ldd	r23, Y+9	; 0x09
    1e16:	c8 01       	movw	r24, r16
    1e18:	43 96       	adiw	r24, 0x13	; 19
    1e1a:	0e 94 2b 18 	call	0x3056	; 0x3056 <vTaskPlaceOnEventList>
    1e1e:	c8 01       	movw	r24, r16
    1e20:	59 dd       	rcall	.-1358   	; 0x18d4 <prvUnlockQueue>
    1e22:	58 d7       	rcall	.+3760   	; 0x2cd4 <xTaskResumeAll>
    1e24:	81 11       	cpse	r24, r1
    1e26:	91 cf       	rjmp	.-222    	; 0x1d4a <xQueueSemaphoreTake+0x2a>
    1e28:	e9 db       	rcall	.-2094   	; 0x15fc <vPortYield>
    1e2a:	8f cf       	rjmp	.-226    	; 0x1d4a <xQueueSemaphoreTake+0x2a>
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	52 dd       	rcall	.-1372   	; 0x18d4 <prvUnlockQueue>
    1e30:	51 d7       	rcall	.+3746   	; 0x2cd4 <xTaskResumeAll>
    1e32:	8b cf       	rjmp	.-234    	; 0x1d4a <xQueueSemaphoreTake+0x2a>
    1e34:	c8 01       	movw	r24, r16
    1e36:	4e dd       	rcall	.-1380   	; 0x18d4 <prvUnlockQueue>
    1e38:	4d d7       	rcall	.+3738   	; 0x2cd4 <xTaskResumeAll>
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	b7 dc       	rcall	.-1682   	; 0x17ac <prvIsQueueEmpty>
    1e3e:	88 23       	and	r24, r24
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <xQueueSemaphoreTake+0x124>
    1e42:	83 cf       	rjmp	.-250    	; 0x1d4a <xQueueSemaphoreTake+0x2a>
    1e44:	ee 20       	and	r14, r14
    1e46:	79 f0       	breq	.+30     	; 0x1e66 <xQueueSemaphoreTake+0x146>
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	0f 92       	push	r0
    1e4e:	c8 01       	movw	r24, r16
    1e50:	9d dc       	rcall	.-1734   	; 0x178c <prvGetDisinheritPriorityAfterTimeout>
    1e52:	68 2f       	mov	r22, r24
    1e54:	f8 01       	movw	r30, r16
    1e56:	84 81       	ldd	r24, Z+4	; 0x04
    1e58:	95 81       	ldd	r25, Z+5	; 0x05
    1e5a:	0e 94 9d 1b 	call	0x373a	; 0x373a <vTaskPriorityDisinheritAfterTimeout>
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <xQueueSemaphoreTake+0x148>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	29 96       	adiw	r28, 0x09	; 9
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	08 95       	ret

00001e82 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	0f 92       	push	r0
    1e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e90:	8f 3f       	cpi	r24, 0xFF	; 255
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <vQueueWaitForMessageRestricted+0x14>
    1e94:	19 a2       	std	Y+33, r1	; 0x21
    1e96:	8a a1       	ldd	r24, Y+34	; 0x22
    1e98:	8f 3f       	cpi	r24, 0xFF	; 255
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <vQueueWaitForMessageRestricted+0x1c>
    1e9c:	1a a2       	std	Y+34, r1	; 0x22
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1ea2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	04 c0       	rjmp	.+8      	; 0x1eb0 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	43 96       	adiw	r24, 0x13	; 19
    1eac:	0e 94 8c 18 	call	0x3118	; 0x3118 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	10 dd       	rcall	.-1504   	; 0x18d4 <prvUnlockQueue>
    }
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	08 95       	ret

00001eba <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1eba:	fc 01       	movw	r30, r24
    1ebc:	44 81       	ldd	r20, Z+4	; 0x04
    1ebe:	55 81       	ldd	r21, Z+5	; 0x05
    1ec0:	22 81       	ldd	r18, Z+2	; 0x02
    1ec2:	33 81       	ldd	r19, Z+3	; 0x03
    1ec4:	24 0f       	add	r18, r20
    1ec6:	35 1f       	adc	r19, r21
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	b9 01       	movw	r22, r18
    1ece:	68 1b       	sub	r22, r24
    1ed0:	79 0b       	sbc	r23, r25
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	64 17       	cp	r22, r20
    1ed6:	75 07       	cpc	r23, r21
    1ed8:	10 f0       	brcs	.+4      	; 0x1ede <prvBytesInBuffer+0x24>
    1eda:	84 1b       	sub	r24, r20
    1edc:	95 0b       	sbc	r25, r21
    1ede:	08 95       	ret

00001ee0 <prvInitialiseNewStreamBuffer>:
    1ee0:	0f 93       	push	r16
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	8f e0       	ldi	r24, 0x0F	; 15
    1ee6:	df 01       	movw	r26, r30
    1ee8:	1d 92       	st	X+, r1
    1eea:	8a 95       	dec	r24
    1eec:	e9 f7       	brne	.-6      	; 0x1ee8 <prvInitialiseNewStreamBuffer+0x8>
    1eee:	75 87       	std	Z+13, r23	; 0x0d
    1ef0:	64 87       	std	Z+12, r22	; 0x0c
    1ef2:	55 83       	std	Z+5, r21	; 0x05
    1ef4:	44 83       	std	Z+4, r20	; 0x04
    1ef6:	37 83       	std	Z+7, r19	; 0x07
    1ef8:	26 83       	std	Z+6, r18	; 0x06
    1efa:	06 87       	std	Z+14, r16	; 0x0e
    1efc:	0f 91       	pop	r16
    1efe:	08 95       	ret

00001f00 <prvWriteBytesToBuffer>:
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	6c 01       	movw	r12, r24
    1f16:	5b 01       	movw	r10, r22
    1f18:	7a 01       	movw	r14, r20
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	c2 81       	ldd	r28, Z+2	; 0x02
    1f1e:	d3 81       	ldd	r29, Z+3	; 0x03
    1f20:	04 81       	ldd	r16, Z+4	; 0x04
    1f22:	15 81       	ldd	r17, Z+5	; 0x05
    1f24:	0c 1b       	sub	r16, r28
    1f26:	1d 0b       	sbc	r17, r29
    1f28:	40 17       	cp	r20, r16
    1f2a:	51 07       	cpc	r21, r17
    1f2c:	08 f4       	brcc	.+2      	; 0x1f30 <prvWriteBytesToBuffer+0x30>
    1f2e:	8a 01       	movw	r16, r20
    1f30:	f6 01       	movw	r30, r12
    1f32:	84 85       	ldd	r24, Z+12	; 0x0c
    1f34:	95 85       	ldd	r25, Z+13	; 0x0d
    1f36:	a8 01       	movw	r20, r16
    1f38:	b5 01       	movw	r22, r10
    1f3a:	8c 0f       	add	r24, r28
    1f3c:	9d 1f       	adc	r25, r29
    1f3e:	0e 94 00 38 	call	0x7000	; 0x7000 <memcpy>
    1f42:	0e 15       	cp	r16, r14
    1f44:	1f 05       	cpc	r17, r15
    1f46:	58 f4       	brcc	.+22     	; 0x1f5e <prvWriteBytesToBuffer+0x5e>
    1f48:	a7 01       	movw	r20, r14
    1f4a:	40 1b       	sub	r20, r16
    1f4c:	51 0b       	sbc	r21, r17
    1f4e:	b5 01       	movw	r22, r10
    1f50:	60 0f       	add	r22, r16
    1f52:	71 1f       	adc	r23, r17
    1f54:	f6 01       	movw	r30, r12
    1f56:	84 85       	ldd	r24, Z+12	; 0x0c
    1f58:	95 85       	ldd	r25, Z+13	; 0x0d
    1f5a:	0e 94 00 38 	call	0x7000	; 0x7000 <memcpy>
    1f5e:	ce 01       	movw	r24, r28
    1f60:	8e 0d       	add	r24, r14
    1f62:	9f 1d       	adc	r25, r15
    1f64:	f6 01       	movw	r30, r12
    1f66:	24 81       	ldd	r18, Z+4	; 0x04
    1f68:	35 81       	ldd	r19, Z+5	; 0x05
    1f6a:	82 17       	cp	r24, r18
    1f6c:	93 07       	cpc	r25, r19
    1f6e:	10 f0       	brcs	.+4      	; 0x1f74 <prvWriteBytesToBuffer+0x74>
    1f70:	82 1b       	sub	r24, r18
    1f72:	93 0b       	sbc	r25, r19
    1f74:	f6 01       	movw	r30, r12
    1f76:	93 83       	std	Z+3, r25	; 0x03
    1f78:	82 83       	std	Z+2, r24	; 0x02
    1f7a:	c7 01       	movw	r24, r14
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	df 90       	pop	r13
    1f8a:	cf 90       	pop	r12
    1f8c:	bf 90       	pop	r11
    1f8e:	af 90       	pop	r10
    1f90:	08 95       	ret

00001f92 <prvWriteMessageToBuffer>:
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	1f 92       	push	r1
    1fa4:	1f 92       	push	r1
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	7c 01       	movw	r14, r24
    1fac:	6b 01       	movw	r12, r22
    1fae:	5a 83       	std	Y+2, r21	; 0x02
    1fb0:	49 83       	std	Y+1, r20	; 0x01
    1fb2:	21 15       	cp	r18, r1
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	c1 f0       	breq	.+48     	; 0x1fe8 <prvWriteMessageToBuffer+0x56>
    1fb8:	fc 01       	movw	r30, r24
    1fba:	86 85       	ldd	r24, Z+14	; 0x0e
    1fbc:	80 fd       	sbrc	r24, 0
    1fbe:	08 c0       	rjmp	.+16     	; 0x1fd0 <prvWriteMessageToBuffer+0x3e>
    1fc0:	42 17       	cp	r20, r18
    1fc2:	53 07       	cpc	r21, r19
    1fc4:	08 f4       	brcc	.+2      	; 0x1fc8 <prvWriteMessageToBuffer+0x36>
    1fc6:	9a 01       	movw	r18, r20
    1fc8:	3a 83       	std	Y+2, r19	; 0x02
    1fca:	29 83       	std	Y+1, r18	; 0x01
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <prvWriteMessageToBuffer+0x5c>
    1fd0:	20 17       	cp	r18, r16
    1fd2:	31 07       	cpc	r19, r17
    1fd4:	58 f0       	brcs	.+22     	; 0x1fec <prvWriteMessageToBuffer+0x5a>
    1fd6:	42 e0       	ldi	r20, 0x02	; 2
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	be 01       	movw	r22, r28
    1fdc:	6f 5f       	subi	r22, 0xFF	; 255
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	c7 01       	movw	r24, r14
    1fe2:	8e df       	rcall	.-228    	; 0x1f00 <prvWriteBytesToBuffer>
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <prvWriteMessageToBuffer+0x5c>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <prvWriteMessageToBuffer+0x5c>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	88 23       	and	r24, r24
    1ff0:	31 f0       	breq	.+12     	; 0x1ffe <prvWriteMessageToBuffer+0x6c>
    1ff2:	49 81       	ldd	r20, Y+1	; 0x01
    1ff4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	c7 01       	movw	r24, r14
    1ffa:	82 df       	rcall	.-252    	; 0x1f00 <prvWriteBytesToBuffer>
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	df 90       	pop	r13
    2014:	cf 90       	pop	r12
    2016:	08 95       	ret

00002018 <prvReadBytesFromBuffer>:
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	7c 01       	movw	r14, r24
    202e:	5b 01       	movw	r10, r22
    2030:	e9 01       	movw	r28, r18
    2032:	42 17       	cp	r20, r18
    2034:	53 07       	cpc	r21, r19
    2036:	08 f4       	brcc	.+2      	; 0x203a <prvReadBytesFromBuffer+0x22>
    2038:	ea 01       	movw	r28, r20
    203a:	20 97       	sbiw	r28, 0x00	; 0
    203c:	81 f1       	breq	.+96     	; 0x209e <prvReadBytesFromBuffer+0x86>
    203e:	f7 01       	movw	r30, r14
    2040:	00 81       	ld	r16, Z
    2042:	11 81       	ldd	r17, Z+1	; 0x01
    2044:	84 81       	ldd	r24, Z+4	; 0x04
    2046:	95 81       	ldd	r25, Z+5	; 0x05
    2048:	80 1b       	sub	r24, r16
    204a:	91 0b       	sbc	r25, r17
    204c:	6e 01       	movw	r12, r28
    204e:	8c 17       	cp	r24, r28
    2050:	9d 07       	cpc	r25, r29
    2052:	08 f4       	brcc	.+2      	; 0x2056 <prvReadBytesFromBuffer+0x3e>
    2054:	6c 01       	movw	r12, r24
    2056:	f7 01       	movw	r30, r14
    2058:	64 85       	ldd	r22, Z+12	; 0x0c
    205a:	75 85       	ldd	r23, Z+13	; 0x0d
    205c:	60 0f       	add	r22, r16
    205e:	71 1f       	adc	r23, r17
    2060:	a6 01       	movw	r20, r12
    2062:	c5 01       	movw	r24, r10
    2064:	0e 94 00 38 	call	0x7000	; 0x7000 <memcpy>
    2068:	cc 16       	cp	r12, r28
    206a:	dd 06       	cpc	r13, r29
    206c:	58 f4       	brcc	.+22     	; 0x2084 <prvReadBytesFromBuffer+0x6c>
    206e:	ae 01       	movw	r20, r28
    2070:	4c 19       	sub	r20, r12
    2072:	5d 09       	sbc	r21, r13
    2074:	f7 01       	movw	r30, r14
    2076:	64 85       	ldd	r22, Z+12	; 0x0c
    2078:	75 85       	ldd	r23, Z+13	; 0x0d
    207a:	c5 01       	movw	r24, r10
    207c:	8c 0d       	add	r24, r12
    207e:	9d 1d       	adc	r25, r13
    2080:	0e 94 00 38 	call	0x7000	; 0x7000 <memcpy>
    2084:	0c 0f       	add	r16, r28
    2086:	1d 1f       	adc	r17, r29
    2088:	f7 01       	movw	r30, r14
    208a:	84 81       	ldd	r24, Z+4	; 0x04
    208c:	95 81       	ldd	r25, Z+5	; 0x05
    208e:	08 17       	cp	r16, r24
    2090:	19 07       	cpc	r17, r25
    2092:	10 f0       	brcs	.+4      	; 0x2098 <prvReadBytesFromBuffer+0x80>
    2094:	08 1b       	sub	r16, r24
    2096:	19 0b       	sbc	r17, r25
    2098:	f7 01       	movw	r30, r14
    209a:	11 83       	std	Z+1, r17	; 0x01
    209c:	00 83       	st	Z, r16
    209e:	ce 01       	movw	r24, r28
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	cf 90       	pop	r12
    20b0:	bf 90       	pop	r11
    20b2:	af 90       	pop	r10
    20b4:	08 95       	ret

000020b6 <prvReadMessageFromBuffer>:
    20b6:	6f 92       	push	r6
    20b8:	7f 92       	push	r7
    20ba:	8f 92       	push	r8
    20bc:	9f 92       	push	r9
    20be:	af 92       	push	r10
    20c0:	bf 92       	push	r11
    20c2:	cf 92       	push	r12
    20c4:	df 92       	push	r13
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	1f 92       	push	r1
    20d4:	1f 92       	push	r1
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	6c 01       	movw	r12, r24
    20dc:	4b 01       	movw	r8, r22
    20de:	5a 01       	movw	r10, r20
    20e0:	79 01       	movw	r14, r18
    20e2:	01 15       	cp	r16, r1
    20e4:	11 05       	cpc	r17, r1
    20e6:	b1 f0       	breq	.+44     	; 0x2114 <prvReadMessageFromBuffer+0x5e>
    20e8:	fc 01       	movw	r30, r24
    20ea:	60 80       	ld	r6, Z
    20ec:	71 80       	ldd	r7, Z+1	; 0x01
    20ee:	a8 01       	movw	r20, r16
    20f0:	be 01       	movw	r22, r28
    20f2:	6f 5f       	subi	r22, 0xFF	; 255
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	90 df       	rcall	.-224    	; 0x2018 <prvReadBytesFromBuffer>
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	e0 1a       	sub	r14, r16
    20fe:	f1 0a       	sbc	r15, r17
    2100:	a8 16       	cp	r10, r24
    2102:	b9 06       	cpc	r11, r25
    2104:	30 f4       	brcc	.+12     	; 0x2112 <prvReadMessageFromBuffer+0x5c>
    2106:	f6 01       	movw	r30, r12
    2108:	71 82       	std	Z+1, r7	; 0x01
    210a:	60 82       	st	Z, r6
    210c:	a1 2c       	mov	r10, r1
    210e:	b1 2c       	mov	r11, r1
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <prvReadMessageFromBuffer+0x5e>
    2112:	5c 01       	movw	r10, r24
    2114:	97 01       	movw	r18, r14
    2116:	a5 01       	movw	r20, r10
    2118:	b4 01       	movw	r22, r8
    211a:	c6 01       	movw	r24, r12
    211c:	7d df       	rcall	.-262    	; 0x2018 <prvReadBytesFromBuffer>
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	df 90       	pop	r13
    2130:	cf 90       	pop	r12
    2132:	bf 90       	pop	r11
    2134:	af 90       	pop	r10
    2136:	9f 90       	pop	r9
    2138:	8f 90       	pop	r8
    213a:	7f 90       	pop	r7
    213c:	6f 90       	pop	r6
    213e:	08 95       	ret

00002140 <xStreamBufferGenericCreate>:
    2140:	cf 92       	push	r12
    2142:	df 92       	push	r13
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	ec 01       	movw	r28, r24
    2150:	6b 01       	movw	r12, r22
    2152:	41 30       	cpi	r20, 0x01	; 1
    2154:	11 f4       	brne	.+4      	; 0x215a <xStreamBufferGenericCreate+0x1a>
    2156:	01 e0       	ldi	r16, 0x01	; 1
    2158:	01 c0       	rjmp	.+2      	; 0x215c <xStreamBufferGenericCreate+0x1c>
    215a:	00 e0       	ldi	r16, 0x00	; 0
    215c:	c1 14       	cp	r12, r1
    215e:	d1 04       	cpc	r13, r1
    2160:	19 f4       	brne	.+6      	; 0x2168 <xStreamBufferGenericCreate+0x28>
    2162:	cc 24       	eor	r12, r12
    2164:	c3 94       	inc	r12
    2166:	d1 2c       	mov	r13, r1
    2168:	ce 01       	movw	r24, r28
    216a:	40 96       	adiw	r24, 0x10	; 16
    216c:	c8 17       	cp	r28, r24
    216e:	d9 07       	cpc	r29, r25
    2170:	20 f4       	brcc	.+8      	; 0x217a <xStreamBufferGenericCreate+0x3a>
    2172:	21 96       	adiw	r28, 0x01	; 1
    2174:	8f d8       	rcall	.-3810   	; 0x1294 <pvPortMalloc>
    2176:	7c 01       	movw	r14, r24
    2178:	02 c0       	rjmp	.+4      	; 0x217e <xStreamBufferGenericCreate+0x3e>
    217a:	e1 2c       	mov	r14, r1
    217c:	f1 2c       	mov	r15, r1
    217e:	e1 14       	cp	r14, r1
    2180:	f1 04       	cpc	r15, r1
    2182:	39 f0       	breq	.+14     	; 0x2192 <xStreamBufferGenericCreate+0x52>
    2184:	96 01       	movw	r18, r12
    2186:	ae 01       	movw	r20, r28
    2188:	b7 01       	movw	r22, r14
    218a:	61 5f       	subi	r22, 0xF1	; 241
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	c7 01       	movw	r24, r14
    2190:	a7 de       	rcall	.-690    	; 0x1ee0 <prvInitialiseNewStreamBuffer>
    2192:	c7 01       	movw	r24, r14
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	0f 91       	pop	r16
    219a:	ff 90       	pop	r15
    219c:	ef 90       	pop	r14
    219e:	df 90       	pop	r13
    21a0:	cf 90       	pop	r12
    21a2:	08 95       	ret

000021a4 <xStreamBufferReset>:
    21a4:	0f 93       	push	r16
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	0f 92       	push	r0
    21ac:	fc 01       	movw	r30, r24
    21ae:	20 85       	ldd	r18, Z+8	; 0x08
    21b0:	31 85       	ldd	r19, Z+9	; 0x09
    21b2:	23 2b       	or	r18, r19
    21b4:	71 f4       	brne	.+28     	; 0x21d2 <xStreamBufferReset+0x2e>
    21b6:	22 85       	ldd	r18, Z+10	; 0x0a
    21b8:	33 85       	ldd	r19, Z+11	; 0x0b
    21ba:	23 2b       	or	r18, r19
    21bc:	61 f4       	brne	.+24     	; 0x21d6 <xStreamBufferReset+0x32>
    21be:	26 81       	ldd	r18, Z+6	; 0x06
    21c0:	37 81       	ldd	r19, Z+7	; 0x07
    21c2:	44 81       	ldd	r20, Z+4	; 0x04
    21c4:	55 81       	ldd	r21, Z+5	; 0x05
    21c6:	64 85       	ldd	r22, Z+12	; 0x0c
    21c8:	75 85       	ldd	r23, Z+13	; 0x0d
    21ca:	06 85       	ldd	r16, Z+14	; 0x0e
    21cc:	89 de       	rcall	.-750    	; 0x1ee0 <prvInitialiseNewStreamBuffer>
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <xStreamBufferReset+0x34>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <xStreamBufferReset+0x34>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	0f 91       	pop	r16
    21de:	08 95       	ret

000021e0 <xStreamBufferSpacesAvailable>:
    21e0:	fc 01       	movw	r30, r24
    21e2:	24 81       	ldd	r18, Z+4	; 0x04
    21e4:	35 81       	ldd	r19, Z+5	; 0x05
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	82 0f       	add	r24, r18
    21ec:	93 1f       	adc	r25, r19
    21ee:	42 81       	ldd	r20, Z+2	; 0x02
    21f0:	53 81       	ldd	r21, Z+3	; 0x03
    21f2:	84 1b       	sub	r24, r20
    21f4:	95 0b       	sbc	r25, r21
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	82 17       	cp	r24, r18
    21fa:	93 07       	cpc	r25, r19
    21fc:	10 f0       	brcs	.+4      	; 0x2202 <__stack+0x3>
    21fe:	82 1b       	sub	r24, r18
    2200:	93 0b       	sbc	r25, r19
    2202:	08 95       	ret

00002204 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2204:	2f 92       	push	r2
    2206:	3f 92       	push	r3
    2208:	4f 92       	push	r4
    220a:	5f 92       	push	r5
    220c:	6f 92       	push	r6
    220e:	7f 92       	push	r7
    2210:	8f 92       	push	r8
    2212:	9f 92       	push	r9
    2214:	af 92       	push	r10
    2216:	bf 92       	push	r11
    2218:	cf 92       	push	r12
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	2b 97       	sbiw	r28, 0x0b	; 11
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	4c 01       	movw	r8, r24
    223a:	7b 87       	std	Y+11, r23	; 0x0b
    223c:	6a 87       	std	Y+10, r22	; 0x0a
    223e:	1a 01       	movw	r2, r20
    2240:	0e 83       	std	Y+6, r16	; 0x06
    2242:	1f 83       	std	Y+7, r17	; 0x07
    2244:	28 87       	std	Y+8, r18	; 0x08
    2246:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2248:	fc 01       	movw	r30, r24
    224a:	84 81       	ldd	r24, Z+4	; 0x04
    224c:	95 81       	ldd	r25, Z+5	; 0x05
    224e:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2250:	26 85       	ldd	r18, Z+14	; 0x0e
    2252:	20 ff       	sbrs	r18, 0
    2254:	0c c0       	rjmp	.+24     	; 0x226e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2256:	2a 01       	movw	r4, r20
    2258:	f2 e0       	ldi	r31, 0x02	; 2
    225a:	4f 0e       	add	r4, r31
    225c:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    225e:	84 15       	cp	r24, r4
    2260:	95 05       	cpc	r25, r5
    2262:	58 f4       	brcc	.+22     	; 0x227a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    2264:	1e 82       	std	Y+6, r1	; 0x06
    2266:	1f 82       	std	Y+7, r1	; 0x07
    2268:	18 86       	std	Y+8, r1	; 0x08
    226a:	19 86       	std	Y+9, r1	; 0x09
    226c:	06 c0       	rjmp	.+12     	; 0x227a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    226e:	84 17       	cp	r24, r20
    2270:	95 07       	cpc	r25, r21
    2272:	10 f0       	brcs	.+4      	; 0x2278 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    2274:	2a 01       	movw	r4, r20
    2276:	01 c0       	rjmp	.+2      	; 0x227a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    2278:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	a8 85       	ldd	r26, Y+8	; 0x08
    2280:	b9 85       	ldd	r27, Y+9	; 0x09
    2282:	89 2b       	or	r24, r25
    2284:	8a 2b       	or	r24, r26
    2286:	8b 2b       	or	r24, r27
    2288:	09 f4       	brne	.+2      	; 0x228c <xStreamBufferSend+0x88>
    228a:	38 c0       	rjmp	.+112    	; 0x22fc <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    228c:	ce 01       	movw	r24, r28
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	0e 94 17 1a 	call	0x342e	; 0x342e <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    229a:	c4 01       	movw	r24, r8
    229c:	a1 df       	rcall	.-190    	; 0x21e0 <xStreamBufferSpacesAvailable>
    229e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    22a0:	84 15       	cp	r24, r4
    22a2:	95 05       	cpc	r25, r5
    22a4:	40 f5       	brcc	.+80     	; 0x22f6 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    22b0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <xTaskGetCurrentTaskHandle>
    22b4:	f4 01       	movw	r30, r8
    22b6:	93 87       	std	Z+11, r25	; 0x0b
    22b8:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    22be:	ae 80       	ldd	r10, Y+6	; 0x06
    22c0:	bf 80       	ldd	r11, Y+7	; 0x07
    22c2:	c8 84       	ldd	r12, Y+8	; 0x08
    22c4:	d9 84       	ldd	r13, Y+9	; 0x09
    22c6:	e1 2c       	mov	r14, r1
    22c8:	f1 2c       	mov	r15, r1
    22ca:	00 e0       	ldi	r16, 0x00	; 0
    22cc:	10 e0       	ldi	r17, 0x00	; 0
    22ce:	98 01       	movw	r18, r16
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	ba 01       	movw	r22, r20
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	0e 94 40 1c 	call	0x3880	; 0x3880 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    22dc:	f4 01       	movw	r30, r8
    22de:	13 86       	std	Z+11, r1	; 0x0b
    22e0:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    22e2:	be 01       	movw	r22, r28
    22e4:	6a 5f       	subi	r22, 0xFA	; 250
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	ce 01       	movw	r24, r28
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	0e 94 3e 1a 	call	0x347c	; 0x347c <xTaskCheckForTimeOut>
    22f0:	88 23       	and	r24, r24
    22f2:	81 f2       	breq	.-96     	; 0x2294 <xStreamBufferSend+0x90>
    22f4:	05 c0       	rjmp	.+10     	; 0x2300 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    22f6:	0f 90       	pop	r0
    22f8:	0f be       	out	0x3f, r0	; 63
                    break;
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    22fc:	61 2c       	mov	r6, r1
    22fe:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2300:	61 14       	cp	r6, r1
    2302:	71 04       	cpc	r7, r1
    2304:	19 f4       	brne	.+6      	; 0x230c <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2306:	c4 01       	movw	r24, r8
    2308:	6b df       	rcall	.-298    	; 0x21e0 <xStreamBufferSpacesAvailable>
    230a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    230c:	82 01       	movw	r16, r4
    230e:	93 01       	movw	r18, r6
    2310:	a1 01       	movw	r20, r2
    2312:	6a 85       	ldd	r22, Y+10	; 0x0a
    2314:	7b 85       	ldd	r23, Y+11	; 0x0b
    2316:	c4 01       	movw	r24, r8
    2318:	3c de       	rcall	.-904    	; 0x1f92 <prvWriteMessageToBuffer>
    231a:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    231c:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    231e:	e9 f0       	breq	.+58     	; 0x235a <xStreamBufferSend+0x156>
    2320:	c4 01       	movw	r24, r8
    2322:	cb dd       	rcall	.-1130   	; 0x1eba <prvBytesInBuffer>
    2324:	f4 01       	movw	r30, r8
    2326:	26 81       	ldd	r18, Z+6	; 0x06
    2328:	37 81       	ldd	r19, Z+7	; 0x07
    232a:	82 17       	cp	r24, r18
    232c:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    232e:	a8 f0       	brcs	.+42     	; 0x235a <xStreamBufferSend+0x156>
    2330:	91 d3       	rcall	.+1826   	; 0x2a54 <vTaskSuspendAll>
    2332:	f4 01       	movw	r30, r8
    2334:	80 85       	ldd	r24, Z+8	; 0x08
    2336:	91 85       	ldd	r25, Z+9	; 0x09
    2338:	89 2b       	or	r24, r25
    233a:	71 f0       	breq	.+28     	; 0x2358 <xStreamBufferSend+0x154>
    233c:	80 85       	ldd	r24, Z+8	; 0x08
    233e:	91 85       	ldd	r25, Z+9	; 0x09
    2340:	e1 2c       	mov	r14, r1
    2342:	f1 2c       	mov	r15, r1
    2344:	00 e0       	ldi	r16, 0x00	; 0
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	a9 01       	movw	r20, r18
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <xTaskGenericNotify>
    2352:	f4 01       	movw	r30, r8
    2354:	11 86       	std	Z+9, r1	; 0x09
    2356:	10 86       	std	Z+8, r1	; 0x08
    2358:	bd d4       	rcall	.+2426   	; 0x2cd4 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    235a:	c6 01       	movw	r24, r12
    235c:	2b 96       	adiw	r28, 0x0b	; 11
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	df 90       	pop	r13
    2376:	cf 90       	pop	r12
    2378:	bf 90       	pop	r11
    237a:	af 90       	pop	r10
    237c:	9f 90       	pop	r9
    237e:	8f 90       	pop	r8
    2380:	7f 90       	pop	r7
    2382:	6f 90       	pop	r6
    2384:	5f 90       	pop	r5
    2386:	4f 90       	pop	r4
    2388:	3f 90       	pop	r3
    238a:	2f 90       	pop	r2
    238c:	08 95       	ret

0000238e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	ec 01       	movw	r28, r24
    23a4:	7b 01       	movw	r14, r22
    23a6:	5a 01       	movw	r10, r20
    23a8:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    23aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ac:	80 ff       	sbrs	r24, 0
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    23b0:	8a 01       	movw	r16, r20
    23b2:	0e 5f       	subi	r16, 0xFE	; 254
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    23b8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    23ba:	ce 01       	movw	r24, r28
    23bc:	11 df       	rcall	.-478    	; 0x21e0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    23be:	9c 01       	movw	r18, r24
    23c0:	a5 01       	movw	r20, r10
    23c2:	b7 01       	movw	r22, r14
    23c4:	ce 01       	movw	r24, r28
    23c6:	e5 dd       	rcall	.-1078   	; 0x1f92 <prvWriteMessageToBuffer>
    23c8:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    23ca:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    23cc:	c1 f0       	breq	.+48     	; 0x23fe <xStreamBufferSendFromISR+0x70>
    23ce:	ce 01       	movw	r24, r28
    23d0:	74 dd       	rcall	.-1304   	; 0x1eba <prvBytesInBuffer>
    23d2:	2e 81       	ldd	r18, Y+6	; 0x06
    23d4:	3f 81       	ldd	r19, Y+7	; 0x07
    23d6:	82 17       	cp	r24, r18
    23d8:	93 07       	cpc	r25, r19
    23da:	88 f0       	brcs	.+34     	; 0x23fe <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    23dc:	88 85       	ldd	r24, Y+8	; 0x08
    23de:	99 85       	ldd	r25, Y+9	; 0x09
    23e0:	89 2b       	or	r24, r25
    23e2:	69 f0       	breq	.+26     	; 0x23fe <xStreamBufferSendFromISR+0x70>
    23e4:	88 85       	ldd	r24, Y+8	; 0x08
    23e6:	99 85       	ldd	r25, Y+9	; 0x09
    23e8:	e1 2c       	mov	r14, r1
    23ea:	f1 2c       	mov	r15, r1
    23ec:	00 e0       	ldi	r16, 0x00	; 0
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	a9 01       	movw	r20, r18
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <xTaskGenericNotifyFromISR>
    23fa:	19 86       	std	Y+9, r1	; 0x09
    23fc:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    23fe:	c5 01       	movw	r24, r10
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	08 95       	ret

00002416 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2416:	4f 92       	push	r4
    2418:	5f 92       	push	r5
    241a:	6f 92       	push	r6
    241c:	7f 92       	push	r7
    241e:	8f 92       	push	r8
    2420:	9f 92       	push	r9
    2422:	af 92       	push	r10
    2424:	bf 92       	push	r11
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	ec 01       	movw	r28, r24
    2438:	2b 01       	movw	r4, r22
    243a:	3a 01       	movw	r6, r20
    243c:	58 01       	movw	r10, r16
    243e:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2440:	8e 85       	ldd	r24, Y+14	; 0x0e
    2442:	80 ff       	sbrs	r24, 0
    2444:	05 c0       	rjmp	.+10     	; 0x2450 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2446:	68 94       	set
    2448:	88 24       	eor	r8, r8
    244a:	81 f8       	bld	r8, 1
    244c:	91 2c       	mov	r9, r1
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2450:	81 2c       	mov	r8, r1
    2452:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2454:	a1 14       	cp	r10, r1
    2456:	b1 04       	cpc	r11, r1
    2458:	c1 04       	cpc	r12, r1
    245a:	d1 04       	cpc	r13, r1
    245c:	41 f1       	breq	.+80     	; 0x24ae <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2464:	ce 01       	movw	r24, r28
    2466:	29 dd       	rcall	.-1454   	; 0x1eba <prvBytesInBuffer>
    2468:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    246a:	88 16       	cp	r8, r24
    246c:	99 06       	cpc	r9, r25
    246e:	48 f0       	brcs	.+18     	; 0x2482 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    247a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <xTaskGetCurrentTaskHandle>
    247e:	99 87       	std	Y+9, r25	; 0x09
    2480:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2482:	0f 90       	pop	r0
    2484:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2486:	8e 14       	cp	r8, r14
    2488:	9f 04       	cpc	r9, r15
    248a:	a0 f0       	brcs	.+40     	; 0x24b4 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    248c:	e1 2c       	mov	r14, r1
    248e:	f1 2c       	mov	r15, r1
    2490:	00 e0       	ldi	r16, 0x00	; 0
    2492:	10 e0       	ldi	r17, 0x00	; 0
    2494:	98 01       	movw	r18, r16
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	ba 01       	movw	r22, r20
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	0e 94 40 1c 	call	0x3880	; 0x3880 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    24a2:	19 86       	std	Y+9, r1	; 0x09
    24a4:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    24a6:	ce 01       	movw	r24, r28
    24a8:	08 dd       	rcall	.-1520   	; 0x1eba <prvBytesInBuffer>
    24aa:	7c 01       	movw	r14, r24
    24ac:	03 c0       	rjmp	.+6      	; 0x24b4 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    24ae:	ce 01       	movw	r24, r28
    24b0:	04 dd       	rcall	.-1528   	; 0x1eba <prvBytesInBuffer>
    24b2:	7c 01       	movw	r14, r24
    24b4:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    24b6:	9f 04       	cpc	r9, r15
    24b8:	e8 f4       	brcc	.+58     	; 0x24f4 <xStreamBufferReceive+0xde>
    24ba:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    24bc:	97 01       	movw	r18, r14
    24be:	a3 01       	movw	r20, r6
    24c0:	b2 01       	movw	r22, r4
    24c2:	ce 01       	movw	r24, r28
    24c4:	f8 dd       	rcall	.-1040   	; 0x20b6 <prvReadMessageFromBuffer>
    24c6:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    24c8:	89 2b       	or	r24, r25
    24ca:	b1 f0       	breq	.+44     	; 0x24f8 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    24cc:	c3 d2       	rcall	.+1414   	; 0x2a54 <vTaskSuspendAll>
    24ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d2:	89 2b       	or	r24, r25
    24d4:	69 f0       	breq	.+26     	; 0x24f0 <xStreamBufferReceive+0xda>
    24d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24da:	e1 2c       	mov	r14, r1
    24dc:	f1 2c       	mov	r15, r1
    24de:	00 e0       	ldi	r16, 0x00	; 0
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	a9 01       	movw	r20, r18
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <xTaskGenericNotify>
    24ec:	1b 86       	std	Y+11, r1	; 0x0b
    24ee:	1a 86       	std	Y+10, r1	; 0x0a
    24f0:	f1 d3       	rcall	.+2018   	; 0x2cd4 <xTaskResumeAll>
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <xStreamBufferReceive+0xe2>
    24f4:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    24f6:	d1 2c       	mov	r13, r1
    24f8:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	ff 90       	pop	r15
    2504:	ef 90       	pop	r14
    2506:	df 90       	pop	r13
    2508:	cf 90       	pop	r12
    250a:	bf 90       	pop	r11
    250c:	af 90       	pop	r10
    250e:	9f 90       	pop	r9
    2510:	8f 90       	pop	r8
    2512:	7f 90       	pop	r7
    2514:	6f 90       	pop	r6
    2516:	5f 90       	pop	r5
    2518:	4f 90       	pop	r4
    251a:	08 95       	ret

0000251c <prvResetNextTaskUnblockTime>:
    251c:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <pxDelayedTaskList>
    2520:	f0 91 e0 13 	lds	r31, 0x13E0	; 0x8013e0 <pxDelayedTaskList+0x1>
    2524:	80 81       	ld	r24, Z
    2526:	81 11       	cpse	r24, r1
    2528:	0c c0       	rjmp	.+24     	; 0x2542 <prvResetNextTaskUnblockTime+0x26>
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	9f ef       	ldi	r25, 0xFF	; 255
    252e:	dc 01       	movw	r26, r24
    2530:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xNextTaskUnblockTime>
    2534:	90 93 aa 13 	sts	0x13AA, r25	; 0x8013aa <xNextTaskUnblockTime+0x1>
    2538:	a0 93 ab 13 	sts	0x13AB, r26	; 0x8013ab <xNextTaskUnblockTime+0x2>
    253c:	b0 93 ac 13 	sts	0x13AC, r27	; 0x8013ac <xNextTaskUnblockTime+0x3>
    2540:	08 95       	ret
    2542:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <pxDelayedTaskList>
    2546:	f0 91 e0 13 	lds	r31, 0x13E0	; 0x8013e0 <pxDelayedTaskList+0x1>
    254a:	07 80       	ldd	r0, Z+7	; 0x07
    254c:	f0 85       	ldd	r31, Z+8	; 0x08
    254e:	e0 2d       	mov	r30, r0
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	a2 81       	ldd	r26, Z+2	; 0x02
    2556:	b3 81       	ldd	r27, Z+3	; 0x03
    2558:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xNextTaskUnblockTime>
    255c:	90 93 aa 13 	sts	0x13AA, r25	; 0x8013aa <xNextTaskUnblockTime+0x1>
    2560:	a0 93 ab 13 	sts	0x13AB, r26	; 0x8013ab <xNextTaskUnblockTime+0x2>
    2564:	b0 93 ac 13 	sts	0x13AC, r27	; 0x8013ac <xNextTaskUnblockTime+0x3>
    2568:	08 95       	ret

0000256a <prvDeleteTCB>:
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	ec 01       	movw	r28, r24
    2570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2574:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <vPortFree>
    2578:	ce 01       	movw	r24, r28
    257a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <vPortFree>
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <prvInitialiseNewTask>:
    2584:	4f 92       	push	r4
    2586:	5f 92       	push	r5
    2588:	6f 92       	push	r6
    258a:	7f 92       	push	r7
    258c:	8f 92       	push	r8
    258e:	9f 92       	push	r9
    2590:	af 92       	push	r10
    2592:	bf 92       	push	r11
    2594:	cf 92       	push	r12
    2596:	df 92       	push	r13
    2598:	ef 92       	push	r14
    259a:	ff 92       	push	r15
    259c:	0f 93       	push	r16
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	2c 01       	movw	r4, r24
    25a4:	5b 01       	movw	r10, r22
    25a6:	4a 01       	movw	r8, r20
    25a8:	39 01       	movw	r6, r18
    25aa:	e6 01       	movw	r28, r12
    25ac:	65 ea       	ldi	r22, 0xA5	; 165
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b4:	0e 94 09 38 	call	0x7012	; 0x7012 <memset>
    25b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25bc:	21 e0       	ldi	r18, 0x01	; 1
    25be:	82 1a       	sub	r8, r18
    25c0:	91 08       	sbc	r9, r1
    25c2:	88 0e       	add	r8, r24
    25c4:	99 1e       	adc	r9, r25
    25c6:	a1 14       	cp	r10, r1
    25c8:	b1 04       	cpc	r11, r1
    25ca:	89 f4       	brne	.+34     	; 0x25ee <prvInitialiseNewTask+0x6a>
    25cc:	15 c0       	rjmp	.+42     	; 0x25f8 <prvInitialiseNewTask+0x74>
    25ce:	82 2f       	mov	r24, r18
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	f5 01       	movw	r30, r10
    25d4:	e8 0f       	add	r30, r24
    25d6:	f9 1f       	adc	r31, r25
    25d8:	30 81       	ld	r19, Z
    25da:	de 01       	movw	r26, r28
    25dc:	a8 0f       	add	r26, r24
    25de:	b9 1f       	adc	r27, r25
    25e0:	5d 96       	adiw	r26, 0x1d	; 29
    25e2:	3c 93       	st	X, r19
    25e4:	80 81       	ld	r24, Z
    25e6:	88 23       	and	r24, r24
    25e8:	29 f0       	breq	.+10     	; 0x25f4 <prvInitialiseNewTask+0x70>
    25ea:	2f 5f       	subi	r18, 0xFF	; 255
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <prvInitialiseNewTask+0x6c>
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	20 31       	cpi	r18, 0x10	; 16
    25f2:	68 f3       	brcs	.-38     	; 0x25ce <prvInitialiseNewTask+0x4a>
    25f4:	1c a6       	std	Y+44, r1	; 0x2c
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <prvInitialiseNewTask+0x76>
    25f8:	1d 8e       	std	Y+29, r1	; 0x1d
    25fa:	0a 30       	cpi	r16, 0x0A	; 10
    25fc:	08 f0       	brcs	.+2      	; 0x2600 <prvInitialiseNewTask+0x7c>
    25fe:	09 e0       	ldi	r16, 0x09	; 9
    2600:	0a 8f       	std	Y+26, r16	; 0x1a
    2602:	0d a7       	std	Y+45, r16	; 0x2d
    2604:	1e a6       	std	Y+46, r1	; 0x2e
    2606:	ce 01       	movw	r24, r28
    2608:	02 96       	adiw	r24, 0x02	; 2
    260a:	0e 94 41 0a 	call	0x1482	; 0x1482 <vListInitialiseItem>
    260e:	ce 01       	movw	r24, r28
    2610:	0e 96       	adiw	r24, 0x0e	; 14
    2612:	0e 94 41 0a 	call	0x1482	; 0x1482 <vListInitialiseItem>
    2616:	db 87       	std	Y+11, r29	; 0x0b
    2618:	ca 87       	std	Y+10, r28	; 0x0a
    261a:	8a e0       	ldi	r24, 0x0A	; 10
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e0       	ldi	r26, 0x00	; 0
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	80 1b       	sub	r24, r16
    2624:	91 09       	sbc	r25, r1
    2626:	a1 09       	sbc	r26, r1
    2628:	b1 09       	sbc	r27, r1
    262a:	8e 87       	std	Y+14, r24	; 0x0e
    262c:	9f 87       	std	Y+15, r25	; 0x0f
    262e:	a8 8b       	std	Y+16, r26	; 0x10
    2630:	b9 8b       	std	Y+17, r27	; 0x11
    2632:	df 8b       	std	Y+23, r29	; 0x17
    2634:	ce 8b       	std	Y+22, r28	; 0x16
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	fe 01       	movw	r30, r28
    263a:	bf 96       	adiw	r30, 0x2f	; 47
    263c:	df 01       	movw	r26, r30
    263e:	1d 92       	st	X+, r1
    2640:	8a 95       	dec	r24
    2642:	e9 f7       	brne	.-6      	; 0x263e <prvInitialiseNewTask+0xba>
    2644:	1b aa       	std	Y+51, r1	; 0x33
    2646:	a3 01       	movw	r20, r6
    2648:	b2 01       	movw	r22, r4
    264a:	c4 01       	movw	r24, r8
    264c:	0e 94 b5 0a 	call	0x156a	; 0x156a <pxPortInitialiseStack>
    2650:	99 83       	std	Y+1, r25	; 0x01
    2652:	88 83       	st	Y, r24
    2654:	e1 14       	cp	r14, r1
    2656:	f1 04       	cpc	r15, r1
    2658:	19 f0       	breq	.+6      	; 0x2660 <prvInitialiseNewTask+0xdc>
    265a:	f7 01       	movw	r30, r14
    265c:	d1 83       	std	Z+1, r29	; 0x01
    265e:	c0 83       	st	Z, r28
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	bf 90       	pop	r11
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	7f 90       	pop	r7
    2678:	6f 90       	pop	r6
    267a:	5f 90       	pop	r5
    267c:	4f 90       	pop	r4
    267e:	08 95       	ret

00002680 <prvInitialiseTaskLists>:
    2680:	cf 93       	push	r28
    2682:	c0 e0       	ldi	r28, 0x00	; 0
    2684:	09 c0       	rjmp	.+18     	; 0x2698 <prvInitialiseTaskLists+0x18>
    2686:	2b e0       	ldi	r18, 0x0B	; 11
    2688:	c2 9f       	mul	r28, r18
    268a:	c0 01       	movw	r24, r0
    268c:	11 24       	eor	r1, r1
    268e:	89 50       	subi	r24, 0x09	; 9
    2690:	9c 4e       	sbci	r25, 0xEC	; 236
    2692:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    2696:	cf 5f       	subi	r28, 0xFF	; 255
    2698:	ca 30       	cpi	r28, 0x0A	; 10
    269a:	a8 f3       	brcs	.-22     	; 0x2686 <prvInitialiseTaskLists+0x6>
    269c:	8c ee       	ldi	r24, 0xEC	; 236
    269e:	93 e1       	ldi	r25, 0x13	; 19
    26a0:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    26a4:	81 ee       	ldi	r24, 0xE1	; 225
    26a6:	93 e1       	ldi	r25, 0x13	; 19
    26a8:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    26ac:	82 ed       	ldi	r24, 0xD2	; 210
    26ae:	93 e1       	ldi	r25, 0x13	; 19
    26b0:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    26b4:	87 ec       	ldi	r24, 0xC7	; 199
    26b6:	93 e1       	ldi	r25, 0x13	; 19
    26b8:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    26bc:	8b eb       	ldi	r24, 0xBB	; 187
    26be:	93 e1       	ldi	r25, 0x13	; 19
    26c0:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    26c4:	8c ee       	ldi	r24, 0xEC	; 236
    26c6:	93 e1       	ldi	r25, 0x13	; 19
    26c8:	90 93 e0 13 	sts	0x13E0, r25	; 0x8013e0 <pxDelayedTaskList+0x1>
    26cc:	80 93 df 13 	sts	0x13DF, r24	; 0x8013df <pxDelayedTaskList>
    26d0:	81 ee       	ldi	r24, 0xE1	; 225
    26d2:	93 e1       	ldi	r25, 0x13	; 19
    26d4:	90 93 de 13 	sts	0x13DE, r25	; 0x8013de <pxOverflowDelayedTaskList+0x1>
    26d8:	80 93 dd 13 	sts	0x13DD, r24	; 0x8013dd <pxOverflowDelayedTaskList>
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <prvAddNewTaskToReadyList>:
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	ec 01       	movw	r28, r24
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	0f 92       	push	r0
    26ec:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <uxCurrentNumberOfTasks>
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	80 93 ba 13 	sts	0x13BA, r24	; 0x8013ba <uxCurrentNumberOfTasks>
    26f6:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    26fa:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    26fe:	89 2b       	or	r24, r25
    2700:	51 f4       	brne	.+20     	; 0x2716 <prvAddNewTaskToReadyList+0x36>
    2702:	d0 93 66 14 	sts	0x1466, r29	; 0x801466 <pxCurrentTCB+0x1>
    2706:	c0 93 65 14 	sts	0x1465, r28	; 0x801465 <pxCurrentTCB>
    270a:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <uxCurrentNumberOfTasks>
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	91 f4       	brne	.+36     	; 0x2736 <prvAddNewTaskToReadyList+0x56>
    2712:	b6 df       	rcall	.-148    	; 0x2680 <prvInitialiseTaskLists>
    2714:	10 c0       	rjmp	.+32     	; 0x2736 <prvAddNewTaskToReadyList+0x56>
    2716:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <xSchedulerRunning>
    271a:	81 11       	cpse	r24, r1
    271c:	0c c0       	rjmp	.+24     	; 0x2736 <prvAddNewTaskToReadyList+0x56>
    271e:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    2722:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2726:	92 8d       	ldd	r25, Z+26	; 0x1a
    2728:	8a 8d       	ldd	r24, Y+26	; 0x1a
    272a:	89 17       	cp	r24, r25
    272c:	20 f0       	brcs	.+8      	; 0x2736 <prvAddNewTaskToReadyList+0x56>
    272e:	d0 93 66 14 	sts	0x1466, r29	; 0x801466 <pxCurrentTCB+0x1>
    2732:	c0 93 65 14 	sts	0x1465, r28	; 0x801465 <pxCurrentTCB>
    2736:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <uxTaskNumber>
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	80 93 ad 13 	sts	0x13AD, r24	; 0x8013ad <uxTaskNumber>
    2740:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2742:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    2746:	8e 17       	cp	r24, r30
    2748:	10 f4       	brcc	.+4      	; 0x274e <prvAddNewTaskToReadyList+0x6e>
    274a:	e0 93 b5 13 	sts	0x13B5, r30	; 0x8013b5 <uxTopReadyPriority>
    274e:	8b e0       	ldi	r24, 0x0B	; 11
    2750:	8e 9f       	mul	r24, r30
    2752:	f0 01       	movw	r30, r0
    2754:	11 24       	eor	r1, r1
    2756:	e9 50       	subi	r30, 0x09	; 9
    2758:	fc 4e       	sbci	r31, 0xEC	; 236
    275a:	01 80       	ldd	r0, Z+1	; 0x01
    275c:	f2 81       	ldd	r31, Z+2	; 0x02
    275e:	e0 2d       	mov	r30, r0
    2760:	ff 83       	std	Y+7, r31	; 0x07
    2762:	ee 83       	std	Y+6, r30	; 0x06
    2764:	26 81       	ldd	r18, Z+6	; 0x06
    2766:	37 81       	ldd	r19, Z+7	; 0x07
    2768:	39 87       	std	Y+9, r19	; 0x09
    276a:	28 87       	std	Y+8, r18	; 0x08
    276c:	a6 81       	ldd	r26, Z+6	; 0x06
    276e:	b7 81       	ldd	r27, Z+7	; 0x07
    2770:	9e 01       	movw	r18, r28
    2772:	2e 5f       	subi	r18, 0xFE	; 254
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	15 96       	adiw	r26, 0x05	; 5
    2778:	3c 93       	st	X, r19
    277a:	2e 93       	st	-X, r18
    277c:	14 97       	sbiw	r26, 0x04	; 4
    277e:	37 83       	std	Z+7, r19	; 0x07
    2780:	26 83       	std	Z+6, r18	; 0x06
    2782:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2784:	8e 9f       	mul	r24, r30
    2786:	f0 01       	movw	r30, r0
    2788:	11 24       	eor	r1, r1
    278a:	e9 50       	subi	r30, 0x09	; 9
    278c:	fc 4e       	sbci	r31, 0xEC	; 236
    278e:	fd 87       	std	Y+13, r31	; 0x0d
    2790:	ec 87       	std	Y+12, r30	; 0x0c
    2792:	80 81       	ld	r24, Z
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	80 83       	st	Z, r24
    2798:	0f 90       	pop	r0
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <xSchedulerRunning>
    27a0:	88 23       	and	r24, r24
    27a2:	51 f0       	breq	.+20     	; 0x27b8 <prvAddNewTaskToReadyList+0xd8>
    27a4:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    27a8:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    27ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    27ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27b0:	98 17       	cp	r25, r24
    27b2:	10 f4       	brcc	.+4      	; 0x27b8 <prvAddNewTaskToReadyList+0xd8>
    27b4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <prvCheckTasksWaitingTermination>:
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	1b c0       	rjmp	.+54     	; 0x27fa <prvCheckTasksWaitingTermination+0x3c>
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	0f 92       	push	r0
    27ca:	e0 91 ce 13 	lds	r30, 0x13CE	; 0x8013ce <xTasksWaitingTermination+0x7>
    27ce:	f0 91 cf 13 	lds	r31, 0x13CF	; 0x8013cf <xTasksWaitingTermination+0x8>
    27d2:	c0 85       	ldd	r28, Z+8	; 0x08
    27d4:	d1 85       	ldd	r29, Z+9	; 0x09
    27d6:	ce 01       	movw	r24, r28
    27d8:	02 96       	adiw	r24, 0x02	; 2
    27da:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
    27de:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <uxCurrentNumberOfTasks>
    27e2:	81 50       	subi	r24, 0x01	; 1
    27e4:	80 93 ba 13 	sts	0x13BA, r24	; 0x8013ba <uxCurrentNumberOfTasks>
    27e8:	80 91 c6 13 	lds	r24, 0x13C6	; 0x8013c6 <uxDeletedTasksWaitingCleanUp>
    27ec:	81 50       	subi	r24, 0x01	; 1
    27ee:	80 93 c6 13 	sts	0x13C6, r24	; 0x8013c6 <uxDeletedTasksWaitingCleanUp>
    27f2:	0f 90       	pop	r0
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	ce 01       	movw	r24, r28
    27f8:	b8 de       	rcall	.-656    	; 0x256a <prvDeleteTCB>
    27fa:	80 91 c6 13 	lds	r24, 0x13C6	; 0x8013c6 <uxDeletedTasksWaitingCleanUp>
    27fe:	81 11       	cpse	r24, r1
    2800:	e1 cf       	rjmp	.-62     	; 0x27c4 <prvCheckTasksWaitingTermination+0x6>
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	08 95       	ret

00002808 <prvAddCurrentTaskToDelayedList>:
    2808:	8f 92       	push	r8
    280a:	9f 92       	push	r9
    280c:	af 92       	push	r10
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	6b 01       	movw	r12, r22
    281e:	7c 01       	movw	r14, r24
    2820:	c4 2f       	mov	r28, r20
    2822:	80 90 b6 13 	lds	r8, 0x13B6	; 0x8013b6 <xTickCount>
    2826:	90 90 b7 13 	lds	r9, 0x13B7	; 0x8013b7 <xTickCount+0x1>
    282a:	a0 90 b8 13 	lds	r10, 0x13B8	; 0x8013b8 <xTickCount+0x2>
    282e:	b0 90 b9 13 	lds	r11, 0x13B9	; 0x8013b9 <xTickCount+0x3>
    2832:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    2836:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    283a:	02 96       	adiw	r24, 0x02	; 2
    283c:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
    2840:	8f ef       	ldi	r24, 0xFF	; 255
    2842:	c8 16       	cp	r12, r24
    2844:	d8 06       	cpc	r13, r24
    2846:	e8 06       	cpc	r14, r24
    2848:	f8 06       	cpc	r15, r24
    284a:	b1 f5       	brne	.+108    	; 0x28b8 <prvAddCurrentTaskToDelayedList+0xb0>
    284c:	cc 23       	and	r28, r28
    284e:	a1 f1       	breq	.+104    	; 0x28b8 <prvAddCurrentTaskToDelayedList+0xb0>
    2850:	eb eb       	ldi	r30, 0xBB	; 187
    2852:	f3 e1       	ldi	r31, 0x13	; 19
    2854:	a1 81       	ldd	r26, Z+1	; 0x01
    2856:	b2 81       	ldd	r27, Z+2	; 0x02
    2858:	c0 91 65 14 	lds	r28, 0x1465	; 0x801465 <pxCurrentTCB>
    285c:	d0 91 66 14 	lds	r29, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2860:	bf 83       	std	Y+7, r27	; 0x07
    2862:	ae 83       	std	Y+6, r26	; 0x06
    2864:	c0 91 65 14 	lds	r28, 0x1465	; 0x801465 <pxCurrentTCB>
    2868:	d0 91 66 14 	lds	r29, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    286c:	16 96       	adiw	r26, 0x06	; 6
    286e:	8d 91       	ld	r24, X+
    2870:	9c 91       	ld	r25, X
    2872:	17 97       	sbiw	r26, 0x07	; 7
    2874:	99 87       	std	Y+9, r25	; 0x09
    2876:	88 87       	std	Y+8, r24	; 0x08
    2878:	16 96       	adiw	r26, 0x06	; 6
    287a:	cd 91       	ld	r28, X+
    287c:	dc 91       	ld	r29, X
    287e:	17 97       	sbiw	r26, 0x07	; 7
    2880:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    2884:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2888:	02 96       	adiw	r24, 0x02	; 2
    288a:	9d 83       	std	Y+5, r25	; 0x05
    288c:	8c 83       	std	Y+4, r24	; 0x04
    288e:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    2892:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2896:	02 96       	adiw	r24, 0x02	; 2
    2898:	17 96       	adiw	r26, 0x07	; 7
    289a:	9c 93       	st	X, r25
    289c:	8e 93       	st	-X, r24
    289e:	16 97       	sbiw	r26, 0x06	; 6
    28a0:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    28a4:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    28a8:	1d 96       	adiw	r26, 0x0d	; 13
    28aa:	fc 93       	st	X, r31
    28ac:	ee 93       	st	-X, r30
    28ae:	1c 97       	sbiw	r26, 0x0c	; 12
    28b0:	80 81       	ld	r24, Z
    28b2:	8f 5f       	subi	r24, 0xFF	; 255
    28b4:	80 83       	st	Z, r24
    28b6:	3f c0       	rjmp	.+126    	; 0x2936 <prvAddCurrentTaskToDelayedList+0x12e>
    28b8:	c8 0c       	add	r12, r8
    28ba:	d9 1c       	adc	r13, r9
    28bc:	ea 1c       	adc	r14, r10
    28be:	fb 1c       	adc	r15, r11
    28c0:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    28c4:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    28c8:	c2 82       	std	Z+2, r12	; 0x02
    28ca:	d3 82       	std	Z+3, r13	; 0x03
    28cc:	e4 82       	std	Z+4, r14	; 0x04
    28ce:	f5 82       	std	Z+5, r15	; 0x05
    28d0:	c8 14       	cp	r12, r8
    28d2:	d9 04       	cpc	r13, r9
    28d4:	ea 04       	cpc	r14, r10
    28d6:	fb 04       	cpc	r15, r11
    28d8:	68 f4       	brcc	.+26     	; 0x28f4 <prvAddCurrentTaskToDelayedList+0xec>
    28da:	60 91 65 14 	lds	r22, 0x1465	; 0x801465 <pxCurrentTCB>
    28de:	70 91 66 14 	lds	r23, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    28e2:	80 91 dd 13 	lds	r24, 0x13DD	; 0x8013dd <pxOverflowDelayedTaskList>
    28e6:	90 91 de 13 	lds	r25, 0x13DE	; 0x8013de <pxOverflowDelayedTaskList+0x1>
    28ea:	6e 5f       	subi	r22, 0xFE	; 254
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	0e 94 45 0a 	call	0x148a	; 0x148a <vListInsert>
    28f2:	21 c0       	rjmp	.+66     	; 0x2936 <prvAddCurrentTaskToDelayedList+0x12e>
    28f4:	60 91 65 14 	lds	r22, 0x1465	; 0x801465 <pxCurrentTCB>
    28f8:	70 91 66 14 	lds	r23, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    28fc:	80 91 df 13 	lds	r24, 0x13DF	; 0x8013df <pxDelayedTaskList>
    2900:	90 91 e0 13 	lds	r25, 0x13E0	; 0x8013e0 <pxDelayedTaskList+0x1>
    2904:	6e 5f       	subi	r22, 0xFE	; 254
    2906:	7f 4f       	sbci	r23, 0xFF	; 255
    2908:	0e 94 45 0a 	call	0x148a	; 0x148a <vListInsert>
    290c:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <xNextTaskUnblockTime>
    2910:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <xNextTaskUnblockTime+0x1>
    2914:	a0 91 ab 13 	lds	r26, 0x13AB	; 0x8013ab <xNextTaskUnblockTime+0x2>
    2918:	b0 91 ac 13 	lds	r27, 0x13AC	; 0x8013ac <xNextTaskUnblockTime+0x3>
    291c:	c8 16       	cp	r12, r24
    291e:	d9 06       	cpc	r13, r25
    2920:	ea 06       	cpc	r14, r26
    2922:	fb 06       	cpc	r15, r27
    2924:	40 f4       	brcc	.+16     	; 0x2936 <prvAddCurrentTaskToDelayedList+0x12e>
    2926:	c0 92 a9 13 	sts	0x13A9, r12	; 0x8013a9 <xNextTaskUnblockTime>
    292a:	d0 92 aa 13 	sts	0x13AA, r13	; 0x8013aa <xNextTaskUnblockTime+0x1>
    292e:	e0 92 ab 13 	sts	0x13AB, r14	; 0x8013ab <xNextTaskUnblockTime+0x2>
    2932:	f0 92 ac 13 	sts	0x13AC, r15	; 0x8013ac <xNextTaskUnblockTime+0x3>
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	df 90       	pop	r13
    2940:	cf 90       	pop	r12
    2942:	bf 90       	pop	r11
    2944:	af 90       	pop	r10
    2946:	9f 90       	pop	r9
    2948:	8f 90       	pop	r8
    294a:	08 95       	ret

0000294c <xTaskCreate>:
    294c:	2f 92       	push	r2
    294e:	3f 92       	push	r3
    2950:	4f 92       	push	r4
    2952:	5f 92       	push	r5
    2954:	6f 92       	push	r6
    2956:	7f 92       	push	r7
    2958:	8f 92       	push	r8
    295a:	9f 92       	push	r9
    295c:	af 92       	push	r10
    295e:	bf 92       	push	r11
    2960:	cf 92       	push	r12
    2962:	df 92       	push	r13
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	0f 93       	push	r16
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	3c 01       	movw	r6, r24
    2970:	1b 01       	movw	r2, r22
    2972:	4a 01       	movw	r8, r20
    2974:	29 01       	movw	r4, r18
    2976:	ca 01       	movw	r24, r20
    2978:	0e 94 4a 09 	call	0x1294	; 0x1294 <pvPortMalloc>
    297c:	6c 01       	movw	r12, r24
    297e:	89 2b       	or	r24, r25
    2980:	71 f0       	breq	.+28     	; 0x299e <xTaskCreate+0x52>
    2982:	84 e3       	ldi	r24, 0x34	; 52
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 4a 09 	call	0x1294	; 0x1294 <pvPortMalloc>
    298a:	ec 01       	movw	r28, r24
    298c:	89 2b       	or	r24, r25
    298e:	19 f0       	breq	.+6      	; 0x2996 <xTaskCreate+0x4a>
    2990:	dc 8e       	std	Y+28, r13	; 0x1c
    2992:	cb 8e       	std	Y+27, r12	; 0x1b
    2994:	06 c0       	rjmp	.+12     	; 0x29a2 <xTaskCreate+0x56>
    2996:	c6 01       	movw	r24, r12
    2998:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <vPortFree>
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <xTaskCreate+0x56>
    299e:	c0 e0       	ldi	r28, 0x00	; 0
    29a0:	d0 e0       	ldi	r29, 0x00	; 0
    29a2:	20 97       	sbiw	r28, 0x00	; 0
    29a4:	61 f0       	breq	.+24     	; 0x29be <xTaskCreate+0x72>
    29a6:	a1 2c       	mov	r10, r1
    29a8:	b1 2c       	mov	r11, r1
    29aa:	6e 01       	movw	r12, r28
    29ac:	92 01       	movw	r18, r4
    29ae:	a4 01       	movw	r20, r8
    29b0:	b1 01       	movw	r22, r2
    29b2:	c3 01       	movw	r24, r6
    29b4:	e7 dd       	rcall	.-1074   	; 0x2584 <prvInitialiseNewTask>
    29b6:	ce 01       	movw	r24, r28
    29b8:	93 de       	rcall	.-730    	; 0x26e0 <prvAddNewTaskToReadyList>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	01 c0       	rjmp	.+2      	; 0x29c0 <xTaskCreate+0x74>
    29be:	8f ef       	ldi	r24, 0xFF	; 255
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	0f 91       	pop	r16
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	bf 90       	pop	r11
    29d0:	af 90       	pop	r10
    29d2:	9f 90       	pop	r9
    29d4:	8f 90       	pop	r8
    29d6:	7f 90       	pop	r7
    29d8:	6f 90       	pop	r6
    29da:	5f 90       	pop	r5
    29dc:	4f 90       	pop	r4
    29de:	3f 90       	pop	r3
    29e0:	2f 90       	pop	r2
    29e2:	08 95       	ret

000029e4 <vTaskStartScheduler>:
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	0f 2e       	mov	r0, r31
    29ec:	f7 ea       	ldi	r31, 0xA7	; 167
    29ee:	ef 2e       	mov	r14, r31
    29f0:	f3 e1       	ldi	r31, 0x13	; 19
    29f2:	ff 2e       	mov	r15, r31
    29f4:	f0 2d       	mov	r31, r0
    29f6:	00 e0       	ldi	r16, 0x00	; 0
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 ec       	ldi	r20, 0xC0	; 192
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	68 ec       	ldi	r22, 0xC8	; 200
    2a02:	74 e0       	ldi	r23, 0x04	; 4
    2a04:	8e e4       	ldi	r24, 0x4E	; 78
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	a1 df       	rcall	.-190    	; 0x294c <xTaskCreate>
    2a0a:	81 30       	cpi	r24, 0x01	; 1
    2a0c:	11 f4       	brne	.+4      	; 0x2a12 <vTaskStartScheduler+0x2e>
    2a0e:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <xTimerCreateTimerTask>
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	c9 f4       	brne	.+50     	; 0x2a48 <vTaskStartScheduler+0x64>
    2a16:	f8 94       	cli
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	9f ef       	ldi	r25, 0xFF	; 255
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xNextTaskUnblockTime>
    2a22:	90 93 aa 13 	sts	0x13AA, r25	; 0x8013aa <xNextTaskUnblockTime+0x1>
    2a26:	a0 93 ab 13 	sts	0x13AB, r26	; 0x8013ab <xNextTaskUnblockTime+0x2>
    2a2a:	b0 93 ac 13 	sts	0x13AC, r27	; 0x8013ac <xNextTaskUnblockTime+0x3>
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	80 93 b4 13 	sts	0x13B4, r24	; 0x8013b4 <xSchedulerRunning>
    2a34:	10 92 b6 13 	sts	0x13B6, r1	; 0x8013b6 <xTickCount>
    2a38:	10 92 b7 13 	sts	0x13B7, r1	; 0x8013b7 <xTickCount+0x1>
    2a3c:	10 92 b8 13 	sts	0x13B8, r1	; 0x8013b8 <xTickCount+0x2>
    2a40:	10 92 b9 13 	sts	0x13B9, r1	; 0x8013b9 <xTickCount+0x3>
    2a44:	0e 94 cc 0a 	call	0x1598	; 0x1598 <xPortStartScheduler>
    2a48:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2a4c:	0f 91       	pop	r16
    2a4e:	ff 90       	pop	r15
    2a50:	ef 90       	pop	r14
    2a52:	08 95       	ret

00002a54 <vTaskSuspendAll>:
    2a54:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	80 93 a6 13 	sts	0x13A6, r24	; 0x8013a6 <uxSchedulerSuspended>
    2a5e:	08 95       	ret

00002a60 <xTaskGetTickCount>:
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	0f 92       	push	r0
    2a66:	60 91 b6 13 	lds	r22, 0x13B6	; 0x8013b6 <xTickCount>
    2a6a:	70 91 b7 13 	lds	r23, 0x13B7	; 0x8013b7 <xTickCount+0x1>
    2a6e:	80 91 b8 13 	lds	r24, 0x13B8	; 0x8013b8 <xTickCount+0x2>
    2a72:	90 91 b9 13 	lds	r25, 0x13B9	; 0x8013b9 <xTickCount+0x3>
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	08 95       	ret

00002a7c <xTaskIncrementTick>:
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	05 c1       	rjmp	.+522    	; 0x2c9a <xTaskIncrementTick+0x21e>
    2a90:	c0 90 b6 13 	lds	r12, 0x13B6	; 0x8013b6 <xTickCount>
    2a94:	d0 90 b7 13 	lds	r13, 0x13B7	; 0x8013b7 <xTickCount+0x1>
    2a98:	e0 90 b8 13 	lds	r14, 0x13B8	; 0x8013b8 <xTickCount+0x2>
    2a9c:	f0 90 b9 13 	lds	r15, 0x13B9	; 0x8013b9 <xTickCount+0x3>
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	c8 1a       	sub	r12, r24
    2aa4:	d8 0a       	sbc	r13, r24
    2aa6:	e8 0a       	sbc	r14, r24
    2aa8:	f8 0a       	sbc	r15, r24
    2aaa:	c0 92 b6 13 	sts	0x13B6, r12	; 0x8013b6 <xTickCount>
    2aae:	d0 92 b7 13 	sts	0x13B7, r13	; 0x8013b7 <xTickCount+0x1>
    2ab2:	e0 92 b8 13 	sts	0x13B8, r14	; 0x8013b8 <xTickCount+0x2>
    2ab6:	f0 92 b9 13 	sts	0x13B9, r15	; 0x8013b9 <xTickCount+0x3>
    2aba:	c1 14       	cp	r12, r1
    2abc:	d1 04       	cpc	r13, r1
    2abe:	e1 04       	cpc	r14, r1
    2ac0:	f1 04       	cpc	r15, r1
    2ac2:	b1 f4       	brne	.+44     	; 0x2af0 <xTaskIncrementTick+0x74>
    2ac4:	80 91 df 13 	lds	r24, 0x13DF	; 0x8013df <pxDelayedTaskList>
    2ac8:	90 91 e0 13 	lds	r25, 0x13E0	; 0x8013e0 <pxDelayedTaskList+0x1>
    2acc:	20 91 dd 13 	lds	r18, 0x13DD	; 0x8013dd <pxOverflowDelayedTaskList>
    2ad0:	30 91 de 13 	lds	r19, 0x13DE	; 0x8013de <pxOverflowDelayedTaskList+0x1>
    2ad4:	30 93 e0 13 	sts	0x13E0, r19	; 0x8013e0 <pxDelayedTaskList+0x1>
    2ad8:	20 93 df 13 	sts	0x13DF, r18	; 0x8013df <pxDelayedTaskList>
    2adc:	90 93 de 13 	sts	0x13DE, r25	; 0x8013de <pxOverflowDelayedTaskList+0x1>
    2ae0:	80 93 dd 13 	sts	0x13DD, r24	; 0x8013dd <pxOverflowDelayedTaskList>
    2ae4:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <xNumOfOverflows>
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	80 93 ae 13 	sts	0x13AE, r24	; 0x8013ae <xNumOfOverflows>
    2aee:	16 dd       	rcall	.-1492   	; 0x251c <prvResetNextTaskUnblockTime>
    2af0:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <xNextTaskUnblockTime>
    2af4:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <xNextTaskUnblockTime+0x1>
    2af8:	a0 91 ab 13 	lds	r26, 0x13AB	; 0x8013ab <xNextTaskUnblockTime+0x2>
    2afc:	b0 91 ac 13 	lds	r27, 0x13AC	; 0x8013ac <xNextTaskUnblockTime+0x3>
    2b00:	c8 16       	cp	r12, r24
    2b02:	d9 06       	cpc	r13, r25
    2b04:	ea 06       	cpc	r14, r26
    2b06:	fb 06       	cpc	r15, r27
    2b08:	20 f4       	brcc	.+8      	; 0x2b12 <xTaskIncrementTick+0x96>
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	b2 c0       	rjmp	.+356    	; 0x2c72 <xTaskIncrementTick+0x1f6>
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <xTaskIncrementTick+0x98>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <pxDelayedTaskList>
    2b18:	f0 91 e0 13 	lds	r31, 0x13E0	; 0x8013e0 <pxDelayedTaskList+0x1>
    2b1c:	90 81       	ld	r25, Z
    2b1e:	91 11       	cpse	r25, r1
    2b20:	0c c0       	rjmp	.+24     	; 0x2b3a <xTaskIncrementTick+0xbe>
    2b22:	4f ef       	ldi	r20, 0xFF	; 255
    2b24:	5f ef       	ldi	r21, 0xFF	; 255
    2b26:	ba 01       	movw	r22, r20
    2b28:	40 93 a9 13 	sts	0x13A9, r20	; 0x8013a9 <xNextTaskUnblockTime>
    2b2c:	50 93 aa 13 	sts	0x13AA, r21	; 0x8013aa <xNextTaskUnblockTime+0x1>
    2b30:	60 93 ab 13 	sts	0x13AB, r22	; 0x8013ab <xNextTaskUnblockTime+0x2>
    2b34:	70 93 ac 13 	sts	0x13AC, r23	; 0x8013ac <xNextTaskUnblockTime+0x3>
    2b38:	9c c0       	rjmp	.+312    	; 0x2c72 <xTaskIncrementTick+0x1f6>
    2b3a:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <pxDelayedTaskList>
    2b3e:	f0 91 e0 13 	lds	r31, 0x13E0	; 0x8013e0 <pxDelayedTaskList+0x1>
    2b42:	07 80       	ldd	r0, Z+7	; 0x07
    2b44:	f0 85       	ldd	r31, Z+8	; 0x08
    2b46:	e0 2d       	mov	r30, r0
    2b48:	00 84       	ldd	r0, Z+8	; 0x08
    2b4a:	f1 85       	ldd	r31, Z+9	; 0x09
    2b4c:	e0 2d       	mov	r30, r0
    2b4e:	42 81       	ldd	r20, Z+2	; 0x02
    2b50:	53 81       	ldd	r21, Z+3	; 0x03
    2b52:	64 81       	ldd	r22, Z+4	; 0x04
    2b54:	75 81       	ldd	r23, Z+5	; 0x05
    2b56:	c4 16       	cp	r12, r20
    2b58:	d5 06       	cpc	r13, r21
    2b5a:	e6 06       	cpc	r14, r22
    2b5c:	f7 06       	cpc	r15, r23
    2b5e:	48 f4       	brcc	.+18     	; 0x2b72 <xTaskIncrementTick+0xf6>
    2b60:	40 93 a9 13 	sts	0x13A9, r20	; 0x8013a9 <xNextTaskUnblockTime>
    2b64:	50 93 aa 13 	sts	0x13AA, r21	; 0x8013aa <xNextTaskUnblockTime+0x1>
    2b68:	60 93 ab 13 	sts	0x13AB, r22	; 0x8013ab <xNextTaskUnblockTime+0x2>
    2b6c:	70 93 ac 13 	sts	0x13AC, r23	; 0x8013ac <xNextTaskUnblockTime+0x3>
    2b70:	80 c0       	rjmp	.+256    	; 0x2c72 <xTaskIncrementTick+0x1f6>
    2b72:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b74:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b76:	c6 81       	ldd	r28, Z+6	; 0x06
    2b78:	d7 81       	ldd	r29, Z+7	; 0x07
    2b7a:	20 85       	ldd	r18, Z+8	; 0x08
    2b7c:	31 85       	ldd	r19, Z+9	; 0x09
    2b7e:	3f 83       	std	Y+7, r19	; 0x07
    2b80:	2e 83       	std	Y+6, r18	; 0x06
    2b82:	c0 85       	ldd	r28, Z+8	; 0x08
    2b84:	d1 85       	ldd	r29, Z+9	; 0x09
    2b86:	26 81       	ldd	r18, Z+6	; 0x06
    2b88:	37 81       	ldd	r19, Z+7	; 0x07
    2b8a:	3d 83       	std	Y+5, r19	; 0x05
    2b8c:	2c 83       	std	Y+4, r18	; 0x04
    2b8e:	11 96       	adiw	r26, 0x01	; 1
    2b90:	4d 91       	ld	r20, X+
    2b92:	5c 91       	ld	r21, X
    2b94:	12 97       	sbiw	r26, 0x02	; 2
    2b96:	9f 01       	movw	r18, r30
    2b98:	2e 5f       	subi	r18, 0xFE	; 254
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9c:	42 17       	cp	r20, r18
    2b9e:	53 07       	cpc	r21, r19
    2ba0:	31 f4       	brne	.+12     	; 0x2bae <xTaskIncrementTick+0x132>
    2ba2:	40 85       	ldd	r20, Z+8	; 0x08
    2ba4:	51 85       	ldd	r21, Z+9	; 0x09
    2ba6:	12 96       	adiw	r26, 0x02	; 2
    2ba8:	5c 93       	st	X, r21
    2baa:	4e 93       	st	-X, r20
    2bac:	11 97       	sbiw	r26, 0x01	; 1
    2bae:	15 86       	std	Z+13, r1	; 0x0d
    2bb0:	14 86       	std	Z+12, r1	; 0x0c
    2bb2:	9c 91       	ld	r25, X
    2bb4:	91 50       	subi	r25, 0x01	; 1
    2bb6:	9c 93       	st	X, r25
    2bb8:	a0 8d       	ldd	r26, Z+24	; 0x18
    2bba:	b1 8d       	ldd	r27, Z+25	; 0x19
    2bbc:	10 97       	sbiw	r26, 0x00	; 0
    2bbe:	09 f1       	breq	.+66     	; 0x2c02 <xTaskIncrementTick+0x186>
    2bc0:	c2 89       	ldd	r28, Z+18	; 0x12
    2bc2:	d3 89       	ldd	r29, Z+19	; 0x13
    2bc4:	44 89       	ldd	r20, Z+20	; 0x14
    2bc6:	55 89       	ldd	r21, Z+21	; 0x15
    2bc8:	5f 83       	std	Y+7, r21	; 0x07
    2bca:	4e 83       	std	Y+6, r20	; 0x06
    2bcc:	c4 89       	ldd	r28, Z+20	; 0x14
    2bce:	d5 89       	ldd	r29, Z+21	; 0x15
    2bd0:	42 89       	ldd	r20, Z+18	; 0x12
    2bd2:	53 89       	ldd	r21, Z+19	; 0x13
    2bd4:	5d 83       	std	Y+5, r21	; 0x05
    2bd6:	4c 83       	std	Y+4, r20	; 0x04
    2bd8:	11 96       	adiw	r26, 0x01	; 1
    2bda:	6d 91       	ld	r22, X+
    2bdc:	7c 91       	ld	r23, X
    2bde:	12 97       	sbiw	r26, 0x02	; 2
    2be0:	af 01       	movw	r20, r30
    2be2:	42 5f       	subi	r20, 0xF2	; 242
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	64 17       	cp	r22, r20
    2be8:	75 07       	cpc	r23, r21
    2bea:	31 f4       	brne	.+12     	; 0x2bf8 <xTaskIncrementTick+0x17c>
    2bec:	44 89       	ldd	r20, Z+20	; 0x14
    2bee:	55 89       	ldd	r21, Z+21	; 0x15
    2bf0:	12 96       	adiw	r26, 0x02	; 2
    2bf2:	5c 93       	st	X, r21
    2bf4:	4e 93       	st	-X, r20
    2bf6:	11 97       	sbiw	r26, 0x01	; 1
    2bf8:	11 8e       	std	Z+25, r1	; 0x19
    2bfa:	10 8e       	std	Z+24, r1	; 0x18
    2bfc:	9c 91       	ld	r25, X
    2bfe:	91 50       	subi	r25, 0x01	; 1
    2c00:	9c 93       	st	X, r25
    2c02:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c04:	90 91 b5 13 	lds	r25, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    2c08:	9a 17       	cp	r25, r26
    2c0a:	10 f4       	brcc	.+4      	; 0x2c10 <xTaskIncrementTick+0x194>
    2c0c:	a0 93 b5 13 	sts	0x13B5, r26	; 0x8013b5 <uxTopReadyPriority>
    2c10:	9b e0       	ldi	r25, 0x0B	; 11
    2c12:	9a 9f       	mul	r25, r26
    2c14:	d0 01       	movw	r26, r0
    2c16:	11 24       	eor	r1, r1
    2c18:	a9 50       	subi	r26, 0x09	; 9
    2c1a:	bc 4e       	sbci	r27, 0xEC	; 236
    2c1c:	11 96       	adiw	r26, 0x01	; 1
    2c1e:	0d 90       	ld	r0, X+
    2c20:	bc 91       	ld	r27, X
    2c22:	a0 2d       	mov	r26, r0
    2c24:	b7 83       	std	Z+7, r27	; 0x07
    2c26:	a6 83       	std	Z+6, r26	; 0x06
    2c28:	16 96       	adiw	r26, 0x06	; 6
    2c2a:	4d 91       	ld	r20, X+
    2c2c:	5c 91       	ld	r21, X
    2c2e:	17 97       	sbiw	r26, 0x07	; 7
    2c30:	51 87       	std	Z+9, r21	; 0x09
    2c32:	40 87       	std	Z+8, r20	; 0x08
    2c34:	16 96       	adiw	r26, 0x06	; 6
    2c36:	cd 91       	ld	r28, X+
    2c38:	dc 91       	ld	r29, X
    2c3a:	17 97       	sbiw	r26, 0x07	; 7
    2c3c:	3d 83       	std	Y+5, r19	; 0x05
    2c3e:	2c 83       	std	Y+4, r18	; 0x04
    2c40:	17 96       	adiw	r26, 0x07	; 7
    2c42:	3c 93       	st	X, r19
    2c44:	2e 93       	st	-X, r18
    2c46:	16 97       	sbiw	r26, 0x06	; 6
    2c48:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c4a:	9a 9f       	mul	r25, r26
    2c4c:	d0 01       	movw	r26, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	a9 50       	subi	r26, 0x09	; 9
    2c52:	bc 4e       	sbci	r27, 0xEC	; 236
    2c54:	b5 87       	std	Z+13, r27	; 0x0d
    2c56:	a4 87       	std	Z+12, r26	; 0x0c
    2c58:	9c 91       	ld	r25, X
    2c5a:	9f 5f       	subi	r25, 0xFF	; 255
    2c5c:	9c 93       	st	X, r25
    2c5e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c60:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    2c64:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2c68:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c6a:	29 17       	cp	r18, r25
    2c6c:	08 f0       	brcs	.+2      	; 0x2c70 <xTaskIncrementTick+0x1f4>
    2c6e:	4f cf       	rjmp	.-354    	; 0x2b0e <xTaskIncrementTick+0x92>
    2c70:	51 cf       	rjmp	.-350    	; 0x2b14 <xTaskIncrementTick+0x98>
    2c72:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    2c76:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2c7a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c7c:	9b e0       	ldi	r25, 0x0B	; 11
    2c7e:	e9 9f       	mul	r30, r25
    2c80:	f0 01       	movw	r30, r0
    2c82:	11 24       	eor	r1, r1
    2c84:	e9 50       	subi	r30, 0x09	; 9
    2c86:	fc 4e       	sbci	r31, 0xEC	; 236
    2c88:	90 81       	ld	r25, Z
    2c8a:	92 30       	cpi	r25, 0x02	; 2
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <xTaskIncrementTick+0x214>
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <xYieldPending>
    2c94:	91 11       	cpse	r25, r1
    2c96:	16 c0       	rjmp	.+44     	; 0x2cc4 <xTaskIncrementTick+0x248>
    2c98:	16 c0       	rjmp	.+44     	; 0x2cc6 <xTaskIncrementTick+0x24a>
    2c9a:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <xPendedTicks>
    2c9e:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <xPendedTicks+0x1>
    2ca2:	a0 91 b2 13 	lds	r26, 0x13B2	; 0x8013b2 <xPendedTicks+0x2>
    2ca6:	b0 91 b3 13 	lds	r27, 0x13B3	; 0x8013b3 <xPendedTicks+0x3>
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	a1 1d       	adc	r26, r1
    2cae:	b1 1d       	adc	r27, r1
    2cb0:	80 93 b0 13 	sts	0x13B0, r24	; 0x8013b0 <xPendedTicks>
    2cb4:	90 93 b1 13 	sts	0x13B1, r25	; 0x8013b1 <xPendedTicks+0x1>
    2cb8:	a0 93 b2 13 	sts	0x13B2, r26	; 0x8013b2 <xPendedTicks+0x2>
    2cbc:	b0 93 b3 13 	sts	0x13B3, r27	; 0x8013b3 <xPendedTicks+0x3>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <xTaskIncrementTick+0x24a>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	08 95       	ret

00002cd4 <xTaskResumeAll>:
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	0f 92       	push	r0
    2ce6:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    2cea:	81 50       	subi	r24, 0x01	; 1
    2cec:	80 93 a6 13 	sts	0x13A6, r24	; 0x8013a6 <uxSchedulerSuspended>
    2cf0:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    2cf4:	81 11       	cpse	r24, r1
    2cf6:	be c0       	rjmp	.+380    	; 0x2e74 <xTaskResumeAll+0x1a0>
    2cf8:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <uxCurrentNumberOfTasks>
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	88 c0       	rjmp	.+272    	; 0x2e10 <xTaskResumeAll+0x13c>
    2d00:	bc c0       	rjmp	.+376    	; 0x2e7a <xTaskResumeAll+0x1a6>
    2d02:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <xPendingReadyList+0x7>
    2d06:	f0 91 da 13 	lds	r31, 0x13DA	; 0x8013da <xPendingReadyList+0x8>
    2d0a:	00 84       	ldd	r0, Z+8	; 0x08
    2d0c:	f1 85       	ldd	r31, Z+9	; 0x09
    2d0e:	e0 2d       	mov	r30, r0
    2d10:	a0 8d       	ldd	r26, Z+24	; 0x18
    2d12:	b1 8d       	ldd	r27, Z+25	; 0x19
    2d14:	c2 89       	ldd	r28, Z+18	; 0x12
    2d16:	d3 89       	ldd	r29, Z+19	; 0x13
    2d18:	84 89       	ldd	r24, Z+20	; 0x14
    2d1a:	95 89       	ldd	r25, Z+21	; 0x15
    2d1c:	9f 83       	std	Y+7, r25	; 0x07
    2d1e:	8e 83       	std	Y+6, r24	; 0x06
    2d20:	c4 89       	ldd	r28, Z+20	; 0x14
    2d22:	d5 89       	ldd	r29, Z+21	; 0x15
    2d24:	82 89       	ldd	r24, Z+18	; 0x12
    2d26:	93 89       	ldd	r25, Z+19	; 0x13
    2d28:	9d 83       	std	Y+5, r25	; 0x05
    2d2a:	8c 83       	std	Y+4, r24	; 0x04
    2d2c:	11 96       	adiw	r26, 0x01	; 1
    2d2e:	2d 91       	ld	r18, X+
    2d30:	3c 91       	ld	r19, X
    2d32:	12 97       	sbiw	r26, 0x02	; 2
    2d34:	cf 01       	movw	r24, r30
    2d36:	0e 96       	adiw	r24, 0x0e	; 14
    2d38:	28 17       	cp	r18, r24
    2d3a:	39 07       	cpc	r19, r25
    2d3c:	31 f4       	brne	.+12     	; 0x2d4a <xTaskResumeAll+0x76>
    2d3e:	84 89       	ldd	r24, Z+20	; 0x14
    2d40:	95 89       	ldd	r25, Z+21	; 0x15
    2d42:	12 96       	adiw	r26, 0x02	; 2
    2d44:	9c 93       	st	X, r25
    2d46:	8e 93       	st	-X, r24
    2d48:	11 97       	sbiw	r26, 0x01	; 1
    2d4a:	11 8e       	std	Z+25, r1	; 0x19
    2d4c:	10 8e       	std	Z+24, r1	; 0x18
    2d4e:	8c 91       	ld	r24, X
    2d50:	81 50       	subi	r24, 0x01	; 1
    2d52:	8c 93       	st	X, r24
    2d54:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d56:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d58:	c6 81       	ldd	r28, Z+6	; 0x06
    2d5a:	d7 81       	ldd	r29, Z+7	; 0x07
    2d5c:	80 85       	ldd	r24, Z+8	; 0x08
    2d5e:	91 85       	ldd	r25, Z+9	; 0x09
    2d60:	9f 83       	std	Y+7, r25	; 0x07
    2d62:	8e 83       	std	Y+6, r24	; 0x06
    2d64:	c0 85       	ldd	r28, Z+8	; 0x08
    2d66:	d1 85       	ldd	r29, Z+9	; 0x09
    2d68:	86 81       	ldd	r24, Z+6	; 0x06
    2d6a:	97 81       	ldd	r25, Z+7	; 0x07
    2d6c:	9d 83       	std	Y+5, r25	; 0x05
    2d6e:	8c 83       	std	Y+4, r24	; 0x04
    2d70:	11 96       	adiw	r26, 0x01	; 1
    2d72:	8d 91       	ld	r24, X+
    2d74:	9c 91       	ld	r25, X
    2d76:	12 97       	sbiw	r26, 0x02	; 2
    2d78:	9f 01       	movw	r18, r30
    2d7a:	2e 5f       	subi	r18, 0xFE	; 254
    2d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7e:	82 17       	cp	r24, r18
    2d80:	93 07       	cpc	r25, r19
    2d82:	31 f4       	brne	.+12     	; 0x2d90 <xTaskResumeAll+0xbc>
    2d84:	80 85       	ldd	r24, Z+8	; 0x08
    2d86:	91 85       	ldd	r25, Z+9	; 0x09
    2d88:	12 96       	adiw	r26, 0x02	; 2
    2d8a:	9c 93       	st	X, r25
    2d8c:	8e 93       	st	-X, r24
    2d8e:	11 97       	sbiw	r26, 0x01	; 1
    2d90:	15 86       	std	Z+13, r1	; 0x0d
    2d92:	14 86       	std	Z+12, r1	; 0x0c
    2d94:	8c 91       	ld	r24, X
    2d96:	81 50       	subi	r24, 0x01	; 1
    2d98:	8c 93       	st	X, r24
    2d9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d9c:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    2da0:	8a 17       	cp	r24, r26
    2da2:	10 f4       	brcc	.+4      	; 0x2da8 <xTaskResumeAll+0xd4>
    2da4:	a0 93 b5 13 	sts	0x13B5, r26	; 0x8013b5 <uxTopReadyPriority>
    2da8:	8b e0       	ldi	r24, 0x0B	; 11
    2daa:	8a 9f       	mul	r24, r26
    2dac:	d0 01       	movw	r26, r0
    2dae:	11 24       	eor	r1, r1
    2db0:	a9 50       	subi	r26, 0x09	; 9
    2db2:	bc 4e       	sbci	r27, 0xEC	; 236
    2db4:	11 96       	adiw	r26, 0x01	; 1
    2db6:	0d 90       	ld	r0, X+
    2db8:	bc 91       	ld	r27, X
    2dba:	a0 2d       	mov	r26, r0
    2dbc:	b7 83       	std	Z+7, r27	; 0x07
    2dbe:	a6 83       	std	Z+6, r26	; 0x06
    2dc0:	16 96       	adiw	r26, 0x06	; 6
    2dc2:	4d 91       	ld	r20, X+
    2dc4:	5c 91       	ld	r21, X
    2dc6:	17 97       	sbiw	r26, 0x07	; 7
    2dc8:	51 87       	std	Z+9, r21	; 0x09
    2dca:	40 87       	std	Z+8, r20	; 0x08
    2dcc:	16 96       	adiw	r26, 0x06	; 6
    2dce:	cd 91       	ld	r28, X+
    2dd0:	dc 91       	ld	r29, X
    2dd2:	17 97       	sbiw	r26, 0x07	; 7
    2dd4:	3d 83       	std	Y+5, r19	; 0x05
    2dd6:	2c 83       	std	Y+4, r18	; 0x04
    2dd8:	17 96       	adiw	r26, 0x07	; 7
    2dda:	3c 93       	st	X, r19
    2ddc:	2e 93       	st	-X, r18
    2dde:	16 97       	sbiw	r26, 0x06	; 6
    2de0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2de2:	8a 9f       	mul	r24, r26
    2de4:	d0 01       	movw	r26, r0
    2de6:	11 24       	eor	r1, r1
    2de8:	a9 50       	subi	r26, 0x09	; 9
    2dea:	bc 4e       	sbci	r27, 0xEC	; 236
    2dec:	b5 87       	std	Z+13, r27	; 0x0d
    2dee:	a4 87       	std	Z+12, r26	; 0x0c
    2df0:	8c 91       	ld	r24, X
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	8c 93       	st	X, r24
    2df6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2df8:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    2dfc:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2e00:	5a 96       	adiw	r26, 0x1a	; 26
    2e02:	8c 91       	ld	r24, X
    2e04:	98 17       	cp	r25, r24
    2e06:	30 f0       	brcs	.+12     	; 0x2e14 <xTaskResumeAll+0x140>
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xYieldPending>
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <xTaskResumeAll+0x140>
    2e10:	e0 e0       	ldi	r30, 0x00	; 0
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 91 d2 13 	lds	r24, 0x13D2	; 0x8013d2 <xPendingReadyList>
    2e18:	81 11       	cpse	r24, r1
    2e1a:	73 cf       	rjmp	.-282    	; 0x2d02 <xTaskResumeAll+0x2e>
    2e1c:	ef 2b       	or	r30, r31
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <xTaskResumeAll+0x14e>
    2e20:	7d db       	rcall	.-2310   	; 0x251c <prvResetNextTaskUnblockTime>
    2e22:	c0 90 b0 13 	lds	r12, 0x13B0	; 0x8013b0 <xPendedTicks>
    2e26:	d0 90 b1 13 	lds	r13, 0x13B1	; 0x8013b1 <xPendedTicks+0x1>
    2e2a:	e0 90 b2 13 	lds	r14, 0x13B2	; 0x8013b2 <xPendedTicks+0x2>
    2e2e:	f0 90 b3 13 	lds	r15, 0x13B3	; 0x8013b3 <xPendedTicks+0x3>
    2e32:	c1 14       	cp	r12, r1
    2e34:	d1 04       	cpc	r13, r1
    2e36:	e1 04       	cpc	r14, r1
    2e38:	f1 04       	cpc	r15, r1
    2e3a:	a1 f0       	breq	.+40     	; 0x2e64 <xTaskResumeAll+0x190>
    2e3c:	1f de       	rcall	.-962    	; 0x2a7c <xTaskIncrementTick>
    2e3e:	88 23       	and	r24, r24
    2e40:	19 f0       	breq	.+6      	; 0x2e48 <xTaskResumeAll+0x174>
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xYieldPending>
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	c8 1a       	sub	r12, r24
    2e4c:	d1 08       	sbc	r13, r1
    2e4e:	e1 08       	sbc	r14, r1
    2e50:	f1 08       	sbc	r15, r1
    2e52:	a1 f7       	brne	.-24     	; 0x2e3c <xTaskResumeAll+0x168>
    2e54:	10 92 b0 13 	sts	0x13B0, r1	; 0x8013b0 <xPendedTicks>
    2e58:	10 92 b1 13 	sts	0x13B1, r1	; 0x8013b1 <xPendedTicks+0x1>
    2e5c:	10 92 b2 13 	sts	0x13B2, r1	; 0x8013b2 <xPendedTicks+0x2>
    2e60:	10 92 b3 13 	sts	0x13B3, r1	; 0x8013b3 <xPendedTicks+0x3>
    2e64:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <xYieldPending>
    2e68:	88 23       	and	r24, r24
    2e6a:	31 f0       	breq	.+12     	; 0x2e78 <xTaskResumeAll+0x1a4>
    2e6c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	03 c0       	rjmp	.+6      	; 0x2e7a <xTaskResumeAll+0x1a6>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	01 c0       	rjmp	.+2      	; 0x2e7a <xTaskResumeAll+0x1a6>
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    2e8a:	08 95       	ret

00002e8c <xTaskDelayUntil>:
    2e8c:	8f 92       	push	r8
    2e8e:	9f 92       	push	r9
    2e90:	af 92       	push	r10
    2e92:	bf 92       	push	r11
    2e94:	cf 92       	push	r12
    2e96:	df 92       	push	r13
    2e98:	ef 92       	push	r14
    2e9a:	ff 92       	push	r15
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	ec 01       	movw	r28, r24
    2ea4:	6a 01       	movw	r12, r20
    2ea6:	7b 01       	movw	r14, r22
    2ea8:	d5 dd       	rcall	.-1110   	; 0x2a54 <vTaskSuspendAll>
    2eaa:	80 90 b6 13 	lds	r8, 0x13B6	; 0x8013b6 <xTickCount>
    2eae:	90 90 b7 13 	lds	r9, 0x13B7	; 0x8013b7 <xTickCount+0x1>
    2eb2:	a0 90 b8 13 	lds	r10, 0x13B8	; 0x8013b8 <xTickCount+0x2>
    2eb6:	b0 90 b9 13 	lds	r11, 0x13B9	; 0x8013b9 <xTickCount+0x3>
    2eba:	88 81       	ld	r24, Y
    2ebc:	99 81       	ldd	r25, Y+1	; 0x01
    2ebe:	aa 81       	ldd	r26, Y+2	; 0x02
    2ec0:	bb 81       	ldd	r27, Y+3	; 0x03
    2ec2:	ac 01       	movw	r20, r24
    2ec4:	bd 01       	movw	r22, r26
    2ec6:	4c 0d       	add	r20, r12
    2ec8:	5d 1d       	adc	r21, r13
    2eca:	6e 1d       	adc	r22, r14
    2ecc:	7f 1d       	adc	r23, r15
    2ece:	88 16       	cp	r8, r24
    2ed0:	99 06       	cpc	r9, r25
    2ed2:	aa 06       	cpc	r10, r26
    2ed4:	bb 06       	cpc	r11, r27
    2ed6:	60 f4       	brcc	.+24     	; 0x2ef0 <xTaskDelayUntil+0x64>
    2ed8:	48 17       	cp	r20, r24
    2eda:	59 07       	cpc	r21, r25
    2edc:	6a 07       	cpc	r22, r26
    2ede:	7b 07       	cpc	r23, r27
    2ee0:	98 f4       	brcc	.+38     	; 0x2f08 <xTaskDelayUntil+0x7c>
    2ee2:	84 16       	cp	r8, r20
    2ee4:	95 06       	cpc	r9, r21
    2ee6:	a6 06       	cpc	r10, r22
    2ee8:	b7 06       	cpc	r11, r23
    2eea:	80 f0       	brcs	.+32     	; 0x2f0c <xTaskDelayUntil+0x80>
    2eec:	10 e0       	ldi	r17, 0x00	; 0
    2eee:	13 c0       	rjmp	.+38     	; 0x2f16 <xTaskDelayUntil+0x8a>
    2ef0:	48 17       	cp	r20, r24
    2ef2:	59 07       	cpc	r21, r25
    2ef4:	6a 07       	cpc	r22, r26
    2ef6:	7b 07       	cpc	r23, r27
    2ef8:	58 f0       	brcs	.+22     	; 0x2f10 <xTaskDelayUntil+0x84>
    2efa:	84 16       	cp	r8, r20
    2efc:	95 06       	cpc	r9, r21
    2efe:	a6 06       	cpc	r10, r22
    2f00:	b7 06       	cpc	r11, r23
    2f02:	40 f0       	brcs	.+16     	; 0x2f14 <xTaskDelayUntil+0x88>
    2f04:	10 e0       	ldi	r17, 0x00	; 0
    2f06:	07 c0       	rjmp	.+14     	; 0x2f16 <xTaskDelayUntil+0x8a>
    2f08:	10 e0       	ldi	r17, 0x00	; 0
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <xTaskDelayUntil+0x8a>
    2f0c:	11 e0       	ldi	r17, 0x01	; 1
    2f0e:	03 c0       	rjmp	.+6      	; 0x2f16 <xTaskDelayUntil+0x8a>
    2f10:	11 e0       	ldi	r17, 0x01	; 1
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <xTaskDelayUntil+0x8a>
    2f14:	11 e0       	ldi	r17, 0x01	; 1
    2f16:	48 83       	st	Y, r20
    2f18:	59 83       	std	Y+1, r21	; 0x01
    2f1a:	6a 83       	std	Y+2, r22	; 0x02
    2f1c:	7b 83       	std	Y+3, r23	; 0x03
    2f1e:	11 23       	and	r17, r17
    2f20:	41 f0       	breq	.+16     	; 0x2f32 <xTaskDelayUntil+0xa6>
    2f22:	cb 01       	movw	r24, r22
    2f24:	ba 01       	movw	r22, r20
    2f26:	68 19       	sub	r22, r8
    2f28:	79 09       	sbc	r23, r9
    2f2a:	8a 09       	sbc	r24, r10
    2f2c:	9b 09       	sbc	r25, r11
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	6b dc       	rcall	.-1834   	; 0x2808 <prvAddCurrentTaskToDelayedList>
    2f32:	d0 de       	rcall	.-608    	; 0x2cd4 <xTaskResumeAll>
    2f34:	81 11       	cpse	r24, r1
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <xTaskDelayUntil+0xb0>
    2f38:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    2f3c:	81 2f       	mov	r24, r17
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	bf 90       	pop	r11
    2f4e:	af 90       	pop	r10
    2f50:	9f 90       	pop	r9
    2f52:	8f 90       	pop	r8
    2f54:	08 95       	ret

00002f56 <vTaskDelay>:
    2f56:	cf 92       	push	r12
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	6b 01       	movw	r12, r22
    2f60:	7c 01       	movw	r14, r24
    2f62:	67 2b       	or	r22, r23
    2f64:	68 2b       	or	r22, r24
    2f66:	69 2b       	or	r22, r25
    2f68:	39 f0       	breq	.+14     	; 0x2f78 <vTaskDelay+0x22>
    2f6a:	74 dd       	rcall	.-1304   	; 0x2a54 <vTaskSuspendAll>
    2f6c:	40 e0       	ldi	r20, 0x00	; 0
    2f6e:	c7 01       	movw	r24, r14
    2f70:	b6 01       	movw	r22, r12
    2f72:	4a dc       	rcall	.-1900   	; 0x2808 <prvAddCurrentTaskToDelayedList>
    2f74:	af de       	rcall	.-674    	; 0x2cd4 <xTaskResumeAll>
    2f76:	01 c0       	rjmp	.+2      	; 0x2f7a <vTaskDelay+0x24>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	81 11       	cpse	r24, r1
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <vTaskDelay+0x2c>
    2f7e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    2f82:	ff 90       	pop	r15
    2f84:	ef 90       	pop	r14
    2f86:	df 90       	pop	r13
    2f88:	cf 90       	pop	r12
    2f8a:	08 95       	ret

00002f8c <vTaskSwitchContext>:
    2f8c:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    2f90:	88 23       	and	r24, r24
    2f92:	21 f0       	breq	.+8      	; 0x2f9c <vTaskSwitchContext+0x10>
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xYieldPending>
    2f9a:	08 95       	ret
    2f9c:	10 92 af 13 	sts	0x13AF, r1	; 0x8013af <xYieldPending>
    2fa0:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    2fa4:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2fa8:	20 81       	ld	r18, Z
    2faa:	31 81       	ldd	r19, Z+1	; 0x01
    2fac:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    2fb0:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2fb4:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fb6:	94 8d       	ldd	r25, Z+28	; 0x1c
    2fb8:	82 17       	cp	r24, r18
    2fba:	93 07       	cpc	r25, r19
    2fbc:	60 f0       	brcs	.+24     	; 0x2fd6 <vTaskSwitchContext+0x4a>
    2fbe:	60 91 65 14 	lds	r22, 0x1465	; 0x801465 <pxCurrentTCB>
    2fc2:	70 91 66 14 	lds	r23, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2fc6:	63 5e       	subi	r22, 0xE3	; 227
    2fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fca:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    2fce:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    2fd2:	0e 94 33 22 	call	0x4466	; 0x4466 <vApplicationStackOverflowHook>
    2fd6:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <vTaskSwitchContext+0x52>
    2fdc:	81 50       	subi	r24, 0x01	; 1
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	9b e0       	ldi	r25, 0x0B	; 11
    2fe4:	92 9f       	mul	r25, r18
    2fe6:	f0 01       	movw	r30, r0
    2fe8:	93 9f       	mul	r25, r19
    2fea:	f0 0d       	add	r31, r0
    2fec:	11 24       	eor	r1, r1
    2fee:	e9 50       	subi	r30, 0x09	; 9
    2ff0:	fc 4e       	sbci	r31, 0xEC	; 236
    2ff2:	90 81       	ld	r25, Z
    2ff4:	99 23       	and	r25, r25
    2ff6:	91 f3       	breq	.-28     	; 0x2fdc <vTaskSwitchContext+0x50>
    2ff8:	9b e0       	ldi	r25, 0x0B	; 11
    2ffa:	92 9f       	mul	r25, r18
    2ffc:	a0 01       	movw	r20, r0
    2ffe:	93 9f       	mul	r25, r19
    3000:	50 0d       	add	r21, r0
    3002:	11 24       	eor	r1, r1
    3004:	df 01       	movw	r26, r30
    3006:	01 80       	ldd	r0, Z+1	; 0x01
    3008:	f2 81       	ldd	r31, Z+2	; 0x02
    300a:	e0 2d       	mov	r30, r0
    300c:	04 80       	ldd	r0, Z+4	; 0x04
    300e:	f5 81       	ldd	r31, Z+5	; 0x05
    3010:	e0 2d       	mov	r30, r0
    3012:	12 96       	adiw	r26, 0x02	; 2
    3014:	fc 93       	st	X, r31
    3016:	ee 93       	st	-X, r30
    3018:	11 97       	sbiw	r26, 0x01	; 1
    301a:	46 50       	subi	r20, 0x06	; 6
    301c:	5c 4e       	sbci	r21, 0xEC	; 236
    301e:	e4 17       	cp	r30, r20
    3020:	f5 07       	cpc	r31, r21
    3022:	29 f4       	brne	.+10     	; 0x302e <vTaskSwitchContext+0xa2>
    3024:	44 81       	ldd	r20, Z+4	; 0x04
    3026:	55 81       	ldd	r21, Z+5	; 0x05
    3028:	fd 01       	movw	r30, r26
    302a:	52 83       	std	Z+2, r21	; 0x02
    302c:	41 83       	std	Z+1, r20	; 0x01
    302e:	9b e0       	ldi	r25, 0x0B	; 11
    3030:	92 9f       	mul	r25, r18
    3032:	f0 01       	movw	r30, r0
    3034:	93 9f       	mul	r25, r19
    3036:	f0 0d       	add	r31, r0
    3038:	11 24       	eor	r1, r1
    303a:	e9 50       	subi	r30, 0x09	; 9
    303c:	fc 4e       	sbci	r31, 0xEC	; 236
    303e:	01 80       	ldd	r0, Z+1	; 0x01
    3040:	f2 81       	ldd	r31, Z+2	; 0x02
    3042:	e0 2d       	mov	r30, r0
    3044:	20 85       	ldd	r18, Z+8	; 0x08
    3046:	31 85       	ldd	r19, Z+9	; 0x09
    3048:	30 93 66 14 	sts	0x1466, r19	; 0x801466 <pxCurrentTCB+0x1>
    304c:	20 93 65 14 	sts	0x1465, r18	; 0x801465 <pxCurrentTCB>
    3050:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <uxTopReadyPriority>
    3054:	08 95       	ret

00003056 <vTaskPlaceOnEventList>:
    3056:	cf 92       	push	r12
    3058:	df 92       	push	r13
    305a:	ef 92       	push	r14
    305c:	ff 92       	push	r15
    305e:	6a 01       	movw	r12, r20
    3060:	7b 01       	movw	r14, r22
    3062:	60 91 65 14 	lds	r22, 0x1465	; 0x801465 <pxCurrentTCB>
    3066:	70 91 66 14 	lds	r23, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    306a:	62 5f       	subi	r22, 0xF2	; 242
    306c:	7f 4f       	sbci	r23, 0xFF	; 255
    306e:	0e 94 45 0a 	call	0x148a	; 0x148a <vListInsert>
    3072:	41 e0       	ldi	r20, 0x01	; 1
    3074:	c7 01       	movw	r24, r14
    3076:	b6 01       	movw	r22, r12
    3078:	c7 db       	rcall	.-2162   	; 0x2808 <prvAddCurrentTaskToDelayedList>
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	08 95       	ret

00003084 <vTaskPlaceOnUnorderedEventList>:
    3084:	0f 93       	push	r16
    3086:	1f 93       	push	r17
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	fc 01       	movw	r30, r24
    308e:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    3092:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3096:	70 68       	ori	r23, 0x80	; 128
    3098:	1e 96       	adiw	r26, 0x0e	; 14
    309a:	4d 93       	st	X+, r20
    309c:	5d 93       	st	X+, r21
    309e:	6d 93       	st	X+, r22
    30a0:	7c 93       	st	X, r23
    30a2:	51 97       	sbiw	r26, 0x11	; 17
    30a4:	a1 81       	ldd	r26, Z+1	; 0x01
    30a6:	b2 81       	ldd	r27, Z+2	; 0x02
    30a8:	c0 91 65 14 	lds	r28, 0x1465	; 0x801465 <pxCurrentTCB>
    30ac:	d0 91 66 14 	lds	r29, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    30b0:	bb 8b       	std	Y+19, r27	; 0x13
    30b2:	aa 8b       	std	Y+18, r26	; 0x12
    30b4:	c0 91 65 14 	lds	r28, 0x1465	; 0x801465 <pxCurrentTCB>
    30b8:	d0 91 66 14 	lds	r29, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    30bc:	16 96       	adiw	r26, 0x06	; 6
    30be:	8d 91       	ld	r24, X+
    30c0:	9c 91       	ld	r25, X
    30c2:	17 97       	sbiw	r26, 0x07	; 7
    30c4:	9d 8b       	std	Y+21, r25	; 0x15
    30c6:	8c 8b       	std	Y+20, r24	; 0x14
    30c8:	16 96       	adiw	r26, 0x06	; 6
    30ca:	cd 91       	ld	r28, X+
    30cc:	dc 91       	ld	r29, X
    30ce:	17 97       	sbiw	r26, 0x07	; 7
    30d0:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    30d4:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    30d8:	0e 96       	adiw	r24, 0x0e	; 14
    30da:	9d 83       	std	Y+5, r25	; 0x05
    30dc:	8c 83       	std	Y+4, r24	; 0x04
    30de:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    30e2:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    30e6:	0e 96       	adiw	r24, 0x0e	; 14
    30e8:	17 96       	adiw	r26, 0x07	; 7
    30ea:	9c 93       	st	X, r25
    30ec:	8e 93       	st	-X, r24
    30ee:	16 97       	sbiw	r26, 0x06	; 6
    30f0:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    30f4:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    30f8:	59 96       	adiw	r26, 0x19	; 25
    30fa:	fc 93       	st	X, r31
    30fc:	ee 93       	st	-X, r30
    30fe:	58 97       	sbiw	r26, 0x18	; 24
    3100:	80 81       	ld	r24, Z
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	80 83       	st	Z, r24
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	c9 01       	movw	r24, r18
    310a:	b8 01       	movw	r22, r16
    310c:	7d db       	rcall	.-2310   	; 0x2808 <prvAddCurrentTaskToDelayedList>
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <vTaskPlaceOnEventListRestricted>:
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	fc 01       	movw	r30, r24
    311e:	cb 01       	movw	r24, r22
    3120:	ba 01       	movw	r22, r20
    3122:	a1 81       	ldd	r26, Z+1	; 0x01
    3124:	b2 81       	ldd	r27, Z+2	; 0x02
    3126:	c0 91 65 14 	lds	r28, 0x1465	; 0x801465 <pxCurrentTCB>
    312a:	d0 91 66 14 	lds	r29, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    312e:	bb 8b       	std	Y+19, r27	; 0x13
    3130:	aa 8b       	std	Y+18, r26	; 0x12
    3132:	c0 91 65 14 	lds	r28, 0x1465	; 0x801465 <pxCurrentTCB>
    3136:	d0 91 66 14 	lds	r29, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    313a:	16 96       	adiw	r26, 0x06	; 6
    313c:	4d 91       	ld	r20, X+
    313e:	5c 91       	ld	r21, X
    3140:	17 97       	sbiw	r26, 0x07	; 7
    3142:	5d 8b       	std	Y+21, r21	; 0x15
    3144:	4c 8b       	std	Y+20, r20	; 0x14
    3146:	16 96       	adiw	r26, 0x06	; 6
    3148:	cd 91       	ld	r28, X+
    314a:	dc 91       	ld	r29, X
    314c:	17 97       	sbiw	r26, 0x07	; 7
    314e:	40 91 65 14 	lds	r20, 0x1465	; 0x801465 <pxCurrentTCB>
    3152:	50 91 66 14 	lds	r21, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3156:	42 5f       	subi	r20, 0xF2	; 242
    3158:	5f 4f       	sbci	r21, 0xFF	; 255
    315a:	5d 83       	std	Y+5, r21	; 0x05
    315c:	4c 83       	std	Y+4, r20	; 0x04
    315e:	40 91 65 14 	lds	r20, 0x1465	; 0x801465 <pxCurrentTCB>
    3162:	50 91 66 14 	lds	r21, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3166:	42 5f       	subi	r20, 0xF2	; 242
    3168:	5f 4f       	sbci	r21, 0xFF	; 255
    316a:	17 96       	adiw	r26, 0x07	; 7
    316c:	5c 93       	st	X, r21
    316e:	4e 93       	st	-X, r20
    3170:	16 97       	sbiw	r26, 0x06	; 6
    3172:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    3176:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    317a:	59 96       	adiw	r26, 0x19	; 25
    317c:	fc 93       	st	X, r31
    317e:	ee 93       	st	-X, r30
    3180:	58 97       	sbiw	r26, 0x18	; 24
    3182:	30 81       	ld	r19, Z
    3184:	3f 5f       	subi	r19, 0xFF	; 255
    3186:	30 83       	st	Z, r19
    3188:	22 23       	and	r18, r18
    318a:	19 f0       	breq	.+6      	; 0x3192 <vTaskPlaceOnEventListRestricted+0x7a>
    318c:	6f ef       	ldi	r22, 0xFF	; 255
    318e:	7f ef       	ldi	r23, 0xFF	; 255
    3190:	cb 01       	movw	r24, r22
    3192:	42 2f       	mov	r20, r18
    3194:	39 db       	rcall	.-2446   	; 0x2808 <prvAddCurrentTaskToDelayedList>
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	08 95       	ret

0000319c <xTaskRemoveFromEventList>:
    319c:	cf 93       	push	r28
    319e:	df 93       	push	r29
    31a0:	dc 01       	movw	r26, r24
    31a2:	17 96       	adiw	r26, 0x07	; 7
    31a4:	ed 91       	ld	r30, X+
    31a6:	fc 91       	ld	r31, X
    31a8:	18 97       	sbiw	r26, 0x08	; 8
    31aa:	00 84       	ldd	r0, Z+8	; 0x08
    31ac:	f1 85       	ldd	r31, Z+9	; 0x09
    31ae:	e0 2d       	mov	r30, r0
    31b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    31b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    31b4:	c2 89       	ldd	r28, Z+18	; 0x12
    31b6:	d3 89       	ldd	r29, Z+19	; 0x13
    31b8:	84 89       	ldd	r24, Z+20	; 0x14
    31ba:	95 89       	ldd	r25, Z+21	; 0x15
    31bc:	9f 83       	std	Y+7, r25	; 0x07
    31be:	8e 83       	std	Y+6, r24	; 0x06
    31c0:	c4 89       	ldd	r28, Z+20	; 0x14
    31c2:	d5 89       	ldd	r29, Z+21	; 0x15
    31c4:	82 89       	ldd	r24, Z+18	; 0x12
    31c6:	93 89       	ldd	r25, Z+19	; 0x13
    31c8:	9d 83       	std	Y+5, r25	; 0x05
    31ca:	8c 83       	std	Y+4, r24	; 0x04
    31cc:	11 96       	adiw	r26, 0x01	; 1
    31ce:	8d 91       	ld	r24, X+
    31d0:	9c 91       	ld	r25, X
    31d2:	12 97       	sbiw	r26, 0x02	; 2
    31d4:	9f 01       	movw	r18, r30
    31d6:	22 5f       	subi	r18, 0xF2	; 242
    31d8:	3f 4f       	sbci	r19, 0xFF	; 255
    31da:	82 17       	cp	r24, r18
    31dc:	93 07       	cpc	r25, r19
    31de:	31 f4       	brne	.+12     	; 0x31ec <xTaskRemoveFromEventList+0x50>
    31e0:	84 89       	ldd	r24, Z+20	; 0x14
    31e2:	95 89       	ldd	r25, Z+21	; 0x15
    31e4:	12 96       	adiw	r26, 0x02	; 2
    31e6:	9c 93       	st	X, r25
    31e8:	8e 93       	st	-X, r24
    31ea:	11 97       	sbiw	r26, 0x01	; 1
    31ec:	11 8e       	std	Z+25, r1	; 0x19
    31ee:	10 8e       	std	Z+24, r1	; 0x18
    31f0:	8c 91       	ld	r24, X
    31f2:	81 50       	subi	r24, 0x01	; 1
    31f4:	8c 93       	st	X, r24
    31f6:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    31fa:	81 11       	cpse	r24, r1
    31fc:	52 c0       	rjmp	.+164    	; 0x32a2 <xTaskRemoveFromEventList+0x106>
    31fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    3200:	b5 85       	ldd	r27, Z+13	; 0x0d
    3202:	c6 81       	ldd	r28, Z+6	; 0x06
    3204:	d7 81       	ldd	r29, Z+7	; 0x07
    3206:	80 85       	ldd	r24, Z+8	; 0x08
    3208:	91 85       	ldd	r25, Z+9	; 0x09
    320a:	9f 83       	std	Y+7, r25	; 0x07
    320c:	8e 83       	std	Y+6, r24	; 0x06
    320e:	c0 85       	ldd	r28, Z+8	; 0x08
    3210:	d1 85       	ldd	r29, Z+9	; 0x09
    3212:	86 81       	ldd	r24, Z+6	; 0x06
    3214:	97 81       	ldd	r25, Z+7	; 0x07
    3216:	9d 83       	std	Y+5, r25	; 0x05
    3218:	8c 83       	std	Y+4, r24	; 0x04
    321a:	11 96       	adiw	r26, 0x01	; 1
    321c:	8d 91       	ld	r24, X+
    321e:	9c 91       	ld	r25, X
    3220:	12 97       	sbiw	r26, 0x02	; 2
    3222:	9f 01       	movw	r18, r30
    3224:	2e 5f       	subi	r18, 0xFE	; 254
    3226:	3f 4f       	sbci	r19, 0xFF	; 255
    3228:	82 17       	cp	r24, r18
    322a:	93 07       	cpc	r25, r19
    322c:	31 f4       	brne	.+12     	; 0x323a <xTaskRemoveFromEventList+0x9e>
    322e:	80 85       	ldd	r24, Z+8	; 0x08
    3230:	91 85       	ldd	r25, Z+9	; 0x09
    3232:	12 96       	adiw	r26, 0x02	; 2
    3234:	9c 93       	st	X, r25
    3236:	8e 93       	st	-X, r24
    3238:	11 97       	sbiw	r26, 0x01	; 1
    323a:	15 86       	std	Z+13, r1	; 0x0d
    323c:	14 86       	std	Z+12, r1	; 0x0c
    323e:	8c 91       	ld	r24, X
    3240:	81 50       	subi	r24, 0x01	; 1
    3242:	8c 93       	st	X, r24
    3244:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3246:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    324a:	8a 17       	cp	r24, r26
    324c:	10 f4       	brcc	.+4      	; 0x3252 <xTaskRemoveFromEventList+0xb6>
    324e:	a0 93 b5 13 	sts	0x13B5, r26	; 0x8013b5 <uxTopReadyPriority>
    3252:	8b e0       	ldi	r24, 0x0B	; 11
    3254:	8a 9f       	mul	r24, r26
    3256:	d0 01       	movw	r26, r0
    3258:	11 24       	eor	r1, r1
    325a:	a9 50       	subi	r26, 0x09	; 9
    325c:	bc 4e       	sbci	r27, 0xEC	; 236
    325e:	11 96       	adiw	r26, 0x01	; 1
    3260:	0d 90       	ld	r0, X+
    3262:	bc 91       	ld	r27, X
    3264:	a0 2d       	mov	r26, r0
    3266:	b7 83       	std	Z+7, r27	; 0x07
    3268:	a6 83       	std	Z+6, r26	; 0x06
    326a:	16 96       	adiw	r26, 0x06	; 6
    326c:	4d 91       	ld	r20, X+
    326e:	5c 91       	ld	r21, X
    3270:	17 97       	sbiw	r26, 0x07	; 7
    3272:	51 87       	std	Z+9, r21	; 0x09
    3274:	40 87       	std	Z+8, r20	; 0x08
    3276:	16 96       	adiw	r26, 0x06	; 6
    3278:	cd 91       	ld	r28, X+
    327a:	dc 91       	ld	r29, X
    327c:	17 97       	sbiw	r26, 0x07	; 7
    327e:	3d 83       	std	Y+5, r19	; 0x05
    3280:	2c 83       	std	Y+4, r18	; 0x04
    3282:	17 96       	adiw	r26, 0x07	; 7
    3284:	3c 93       	st	X, r19
    3286:	2e 93       	st	-X, r18
    3288:	16 97       	sbiw	r26, 0x06	; 6
    328a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    328c:	8a 9f       	mul	r24, r26
    328e:	d0 01       	movw	r26, r0
    3290:	11 24       	eor	r1, r1
    3292:	a9 50       	subi	r26, 0x09	; 9
    3294:	bc 4e       	sbci	r27, 0xEC	; 236
    3296:	b5 87       	std	Z+13, r27	; 0x0d
    3298:	a4 87       	std	Z+12, r26	; 0x0c
    329a:	8c 91       	ld	r24, X
    329c:	8f 5f       	subi	r24, 0xFF	; 255
    329e:	8c 93       	st	X, r24
    32a0:	1c c0       	rjmp	.+56     	; 0x32da <xTaskRemoveFromEventList+0x13e>
    32a2:	42 ed       	ldi	r20, 0xD2	; 210
    32a4:	53 e1       	ldi	r21, 0x13	; 19
    32a6:	da 01       	movw	r26, r20
    32a8:	11 96       	adiw	r26, 0x01	; 1
    32aa:	cd 91       	ld	r28, X+
    32ac:	dc 91       	ld	r29, X
    32ae:	12 97       	sbiw	r26, 0x02	; 2
    32b0:	d3 8b       	std	Z+19, r29	; 0x13
    32b2:	c2 8b       	std	Z+18, r28	; 0x12
    32b4:	8e 81       	ldd	r24, Y+6	; 0x06
    32b6:	9f 81       	ldd	r25, Y+7	; 0x07
    32b8:	95 8b       	std	Z+21, r25	; 0x15
    32ba:	84 8b       	std	Z+20, r24	; 0x14
    32bc:	8e 81       	ldd	r24, Y+6	; 0x06
    32be:	9f 81       	ldd	r25, Y+7	; 0x07
    32c0:	dc 01       	movw	r26, r24
    32c2:	15 96       	adiw	r26, 0x05	; 5
    32c4:	3c 93       	st	X, r19
    32c6:	2e 93       	st	-X, r18
    32c8:	14 97       	sbiw	r26, 0x04	; 4
    32ca:	3f 83       	std	Y+7, r19	; 0x07
    32cc:	2e 83       	std	Y+6, r18	; 0x06
    32ce:	51 8f       	std	Z+25, r21	; 0x19
    32d0:	40 8f       	std	Z+24, r20	; 0x18
    32d2:	da 01       	movw	r26, r20
    32d4:	8c 91       	ld	r24, X
    32d6:	8f 5f       	subi	r24, 0xFF	; 255
    32d8:	8c 93       	st	X, r24
    32da:	92 8d       	ldd	r25, Z+26	; 0x1a
    32dc:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    32e0:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    32e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e6:	89 17       	cp	r24, r25
    32e8:	20 f4       	brcc	.+8      	; 0x32f2 <xTaskRemoveFromEventList+0x156>
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xYieldPending>
    32f0:	01 c0       	rjmp	.+2      	; 0x32f4 <xTaskRemoveFromEventList+0x158>
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	08 95       	ret

000032fa <vTaskRemoveFromUnorderedEventList>:
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	dc 01       	movw	r26, r24
    3300:	70 68       	ori	r23, 0x80	; 128
    3302:	4d 93       	st	X+, r20
    3304:	5d 93       	st	X+, r21
    3306:	6d 93       	st	X+, r22
    3308:	7c 93       	st	X, r23
    330a:	13 97       	sbiw	r26, 0x03	; 3
    330c:	18 96       	adiw	r26, 0x08	; 8
    330e:	ed 91       	ld	r30, X+
    3310:	fc 91       	ld	r31, X
    3312:	19 97       	sbiw	r26, 0x09	; 9
    3314:	1a 96       	adiw	r26, 0x0a	; 10
    3316:	4d 91       	ld	r20, X+
    3318:	5c 91       	ld	r21, X
    331a:	1b 97       	sbiw	r26, 0x0b	; 11
    331c:	14 96       	adiw	r26, 0x04	; 4
    331e:	8d 91       	ld	r24, X+
    3320:	9c 91       	ld	r25, X
    3322:	15 97       	sbiw	r26, 0x05	; 5
    3324:	16 96       	adiw	r26, 0x06	; 6
    3326:	2d 91       	ld	r18, X+
    3328:	3c 91       	ld	r19, X
    332a:	17 97       	sbiw	r26, 0x07	; 7
    332c:	ec 01       	movw	r28, r24
    332e:	3f 83       	std	Y+7, r19	; 0x07
    3330:	2e 83       	std	Y+6, r18	; 0x06
    3332:	16 96       	adiw	r26, 0x06	; 6
    3334:	8d 91       	ld	r24, X+
    3336:	9c 91       	ld	r25, X
    3338:	17 97       	sbiw	r26, 0x07	; 7
    333a:	14 96       	adiw	r26, 0x04	; 4
    333c:	2d 91       	ld	r18, X+
    333e:	3c 91       	ld	r19, X
    3340:	15 97       	sbiw	r26, 0x05	; 5
    3342:	ec 01       	movw	r28, r24
    3344:	3d 83       	std	Y+5, r19	; 0x05
    3346:	2c 83       	std	Y+4, r18	; 0x04
    3348:	ea 01       	movw	r28, r20
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
    334e:	a8 17       	cp	r26, r24
    3350:	b9 07       	cpc	r27, r25
    3352:	31 f4       	brne	.+12     	; 0x3360 <vTaskRemoveFromUnorderedEventList+0x66>
    3354:	16 96       	adiw	r26, 0x06	; 6
    3356:	8d 91       	ld	r24, X+
    3358:	9c 91       	ld	r25, X
    335a:	17 97       	sbiw	r26, 0x07	; 7
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	1b 96       	adiw	r26, 0x0b	; 11
    3362:	1c 92       	st	X, r1
    3364:	1e 92       	st	-X, r1
    3366:	1a 97       	sbiw	r26, 0x0a	; 10
    3368:	da 01       	movw	r26, r20
    336a:	8c 91       	ld	r24, X
    336c:	81 50       	subi	r24, 0x01	; 1
    336e:	8c 93       	st	X, r24
    3370:	a4 85       	ldd	r26, Z+12	; 0x0c
    3372:	b5 85       	ldd	r27, Z+13	; 0x0d
    3374:	c6 81       	ldd	r28, Z+6	; 0x06
    3376:	d7 81       	ldd	r29, Z+7	; 0x07
    3378:	80 85       	ldd	r24, Z+8	; 0x08
    337a:	91 85       	ldd	r25, Z+9	; 0x09
    337c:	9f 83       	std	Y+7, r25	; 0x07
    337e:	8e 83       	std	Y+6, r24	; 0x06
    3380:	c0 85       	ldd	r28, Z+8	; 0x08
    3382:	d1 85       	ldd	r29, Z+9	; 0x09
    3384:	86 81       	ldd	r24, Z+6	; 0x06
    3386:	97 81       	ldd	r25, Z+7	; 0x07
    3388:	9d 83       	std	Y+5, r25	; 0x05
    338a:	8c 83       	std	Y+4, r24	; 0x04
    338c:	11 96       	adiw	r26, 0x01	; 1
    338e:	8d 91       	ld	r24, X+
    3390:	9c 91       	ld	r25, X
    3392:	12 97       	sbiw	r26, 0x02	; 2
    3394:	9f 01       	movw	r18, r30
    3396:	2e 5f       	subi	r18, 0xFE	; 254
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	82 17       	cp	r24, r18
    339c:	93 07       	cpc	r25, r19
    339e:	31 f4       	brne	.+12     	; 0x33ac <vTaskRemoveFromUnorderedEventList+0xb2>
    33a0:	80 85       	ldd	r24, Z+8	; 0x08
    33a2:	91 85       	ldd	r25, Z+9	; 0x09
    33a4:	12 96       	adiw	r26, 0x02	; 2
    33a6:	9c 93       	st	X, r25
    33a8:	8e 93       	st	-X, r24
    33aa:	11 97       	sbiw	r26, 0x01	; 1
    33ac:	15 86       	std	Z+13, r1	; 0x0d
    33ae:	14 86       	std	Z+12, r1	; 0x0c
    33b0:	8c 91       	ld	r24, X
    33b2:	81 50       	subi	r24, 0x01	; 1
    33b4:	8c 93       	st	X, r24
    33b6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    33b8:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    33bc:	8a 17       	cp	r24, r26
    33be:	10 f4       	brcc	.+4      	; 0x33c4 <vTaskRemoveFromUnorderedEventList+0xca>
    33c0:	a0 93 b5 13 	sts	0x13B5, r26	; 0x8013b5 <uxTopReadyPriority>
    33c4:	8b e0       	ldi	r24, 0x0B	; 11
    33c6:	8a 9f       	mul	r24, r26
    33c8:	d0 01       	movw	r26, r0
    33ca:	11 24       	eor	r1, r1
    33cc:	a9 50       	subi	r26, 0x09	; 9
    33ce:	bc 4e       	sbci	r27, 0xEC	; 236
    33d0:	11 96       	adiw	r26, 0x01	; 1
    33d2:	0d 90       	ld	r0, X+
    33d4:	bc 91       	ld	r27, X
    33d6:	a0 2d       	mov	r26, r0
    33d8:	b7 83       	std	Z+7, r27	; 0x07
    33da:	a6 83       	std	Z+6, r26	; 0x06
    33dc:	16 96       	adiw	r26, 0x06	; 6
    33de:	4d 91       	ld	r20, X+
    33e0:	5c 91       	ld	r21, X
    33e2:	17 97       	sbiw	r26, 0x07	; 7
    33e4:	51 87       	std	Z+9, r21	; 0x09
    33e6:	40 87       	std	Z+8, r20	; 0x08
    33e8:	16 96       	adiw	r26, 0x06	; 6
    33ea:	cd 91       	ld	r28, X+
    33ec:	dc 91       	ld	r29, X
    33ee:	17 97       	sbiw	r26, 0x07	; 7
    33f0:	3d 83       	std	Y+5, r19	; 0x05
    33f2:	2c 83       	std	Y+4, r18	; 0x04
    33f4:	17 96       	adiw	r26, 0x07	; 7
    33f6:	3c 93       	st	X, r19
    33f8:	2e 93       	st	-X, r18
    33fa:	16 97       	sbiw	r26, 0x06	; 6
    33fc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    33fe:	8a 9f       	mul	r24, r26
    3400:	d0 01       	movw	r26, r0
    3402:	11 24       	eor	r1, r1
    3404:	a9 50       	subi	r26, 0x09	; 9
    3406:	bc 4e       	sbci	r27, 0xEC	; 236
    3408:	b5 87       	std	Z+13, r27	; 0x0d
    340a:	a4 87       	std	Z+12, r26	; 0x0c
    340c:	8c 91       	ld	r24, X
    340e:	8f 5f       	subi	r24, 0xFF	; 255
    3410:	8c 93       	st	X, r24
    3412:	92 8d       	ldd	r25, Z+26	; 0x1a
    3414:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3418:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    341c:	82 8d       	ldd	r24, Z+26	; 0x1a
    341e:	89 17       	cp	r24, r25
    3420:	18 f4       	brcc	.+6      	; 0x3428 <vTaskRemoveFromUnorderedEventList+0x12e>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xYieldPending>
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	08 95       	ret

0000342e <vTaskSetTimeOutState>:
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	0f 92       	push	r0
    3434:	20 91 ae 13 	lds	r18, 0x13AE	; 0x8013ae <xNumOfOverflows>
    3438:	fc 01       	movw	r30, r24
    343a:	20 83       	st	Z, r18
    343c:	40 91 b6 13 	lds	r20, 0x13B6	; 0x8013b6 <xTickCount>
    3440:	50 91 b7 13 	lds	r21, 0x13B7	; 0x8013b7 <xTickCount+0x1>
    3444:	60 91 b8 13 	lds	r22, 0x13B8	; 0x8013b8 <xTickCount+0x2>
    3448:	70 91 b9 13 	lds	r23, 0x13B9	; 0x8013b9 <xTickCount+0x3>
    344c:	41 83       	std	Z+1, r20	; 0x01
    344e:	52 83       	std	Z+2, r21	; 0x02
    3450:	63 83       	std	Z+3, r22	; 0x03
    3452:	74 83       	std	Z+4, r23	; 0x04
    3454:	0f 90       	pop	r0
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	08 95       	ret

0000345a <vTaskInternalSetTimeOutState>:
    345a:	20 91 ae 13 	lds	r18, 0x13AE	; 0x8013ae <xNumOfOverflows>
    345e:	fc 01       	movw	r30, r24
    3460:	20 83       	st	Z, r18
    3462:	40 91 b6 13 	lds	r20, 0x13B6	; 0x8013b6 <xTickCount>
    3466:	50 91 b7 13 	lds	r21, 0x13B7	; 0x8013b7 <xTickCount+0x1>
    346a:	60 91 b8 13 	lds	r22, 0x13B8	; 0x8013b8 <xTickCount+0x2>
    346e:	70 91 b9 13 	lds	r23, 0x13B9	; 0x8013b9 <xTickCount+0x3>
    3472:	41 83       	std	Z+1, r20	; 0x01
    3474:	52 83       	std	Z+2, r21	; 0x02
    3476:	63 83       	std	Z+3, r22	; 0x03
    3478:	74 83       	std	Z+4, r23	; 0x04
    347a:	08 95       	ret

0000347c <xTaskCheckForTimeOut>:
    347c:	8f 92       	push	r8
    347e:	9f 92       	push	r9
    3480:	af 92       	push	r10
    3482:	bf 92       	push	r11
    3484:	cf 92       	push	r12
    3486:	df 92       	push	r13
    3488:	ef 92       	push	r14
    348a:	ff 92       	push	r15
    348c:	0f 93       	push	r16
    348e:	1f 93       	push	r17
    3490:	cf 93       	push	r28
    3492:	df 93       	push	r29
    3494:	fb 01       	movw	r30, r22
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	0f 92       	push	r0
    349c:	c0 90 b6 13 	lds	r12, 0x13B6	; 0x8013b6 <xTickCount>
    34a0:	d0 90 b7 13 	lds	r13, 0x13B7	; 0x8013b7 <xTickCount+0x1>
    34a4:	e0 90 b8 13 	lds	r14, 0x13B8	; 0x8013b8 <xTickCount+0x2>
    34a8:	f0 90 b9 13 	lds	r15, 0x13B9	; 0x8013b9 <xTickCount+0x3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	11 96       	adiw	r26, 0x01	; 1
    34b0:	0d 91       	ld	r16, X+
    34b2:	1d 91       	ld	r17, X+
    34b4:	2d 91       	ld	r18, X+
    34b6:	3c 91       	ld	r19, X
    34b8:	14 97       	sbiw	r26, 0x04	; 4
    34ba:	46 01       	movw	r8, r12
    34bc:	57 01       	movw	r10, r14
    34be:	80 1a       	sub	r8, r16
    34c0:	91 0a       	sbc	r9, r17
    34c2:	a2 0a       	sbc	r10, r18
    34c4:	b3 0a       	sbc	r11, r19
    34c6:	40 81       	ld	r20, Z
    34c8:	51 81       	ldd	r21, Z+1	; 0x01
    34ca:	62 81       	ldd	r22, Z+2	; 0x02
    34cc:	73 81       	ldd	r23, Z+3	; 0x03
    34ce:	4f 3f       	cpi	r20, 0xFF	; 255
    34d0:	bf ef       	ldi	r27, 0xFF	; 255
    34d2:	5b 07       	cpc	r21, r27
    34d4:	6b 07       	cpc	r22, r27
    34d6:	7b 07       	cpc	r23, r27
    34d8:	39 f1       	breq	.+78     	; 0x3528 <xTaskCheckForTimeOut+0xac>
    34da:	ec 01       	movw	r28, r24
    34dc:	b8 81       	ld	r27, Y
    34de:	a0 91 ae 13 	lds	r26, 0x13AE	; 0x8013ae <xNumOfOverflows>
    34e2:	ba 17       	cp	r27, r26
    34e4:	59 f0       	breq	.+22     	; 0x34fc <xTaskCheckForTimeOut+0x80>
    34e6:	c0 16       	cp	r12, r16
    34e8:	d1 06       	cpc	r13, r17
    34ea:	e2 06       	cpc	r14, r18
    34ec:	f3 06       	cpc	r15, r19
    34ee:	30 f0       	brcs	.+12     	; 0x34fc <xTaskCheckForTimeOut+0x80>
    34f0:	10 82       	st	Z, r1
    34f2:	11 82       	std	Z+1, r1	; 0x01
    34f4:	12 82       	std	Z+2, r1	; 0x02
    34f6:	13 82       	std	Z+3, r1	; 0x03
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	17 c0       	rjmp	.+46     	; 0x352a <xTaskCheckForTimeOut+0xae>
    34fc:	84 16       	cp	r8, r20
    34fe:	95 06       	cpc	r9, r21
    3500:	a6 06       	cpc	r10, r22
    3502:	b7 06       	cpc	r11, r23
    3504:	58 f4       	brcc	.+22     	; 0x351c <xTaskCheckForTimeOut+0xa0>
    3506:	48 19       	sub	r20, r8
    3508:	59 09       	sbc	r21, r9
    350a:	6a 09       	sbc	r22, r10
    350c:	7b 09       	sbc	r23, r11
    350e:	40 83       	st	Z, r20
    3510:	51 83       	std	Z+1, r21	; 0x01
    3512:	62 83       	std	Z+2, r22	; 0x02
    3514:	73 83       	std	Z+3, r23	; 0x03
    3516:	a1 df       	rcall	.-190    	; 0x345a <vTaskInternalSetTimeOutState>
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	07 c0       	rjmp	.+14     	; 0x352a <xTaskCheckForTimeOut+0xae>
    351c:	10 82       	st	Z, r1
    351e:	11 82       	std	Z+1, r1	; 0x01
    3520:	12 82       	std	Z+2, r1	; 0x02
    3522:	13 82       	std	Z+3, r1	; 0x03
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	01 c0       	rjmp	.+2      	; 0x352a <xTaskCheckForTimeOut+0xae>
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	0f 90       	pop	r0
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	ff 90       	pop	r15
    3538:	ef 90       	pop	r14
    353a:	df 90       	pop	r13
    353c:	cf 90       	pop	r12
    353e:	bf 90       	pop	r11
    3540:	af 90       	pop	r10
    3542:	9f 90       	pop	r9
    3544:	8f 90       	pop	r8
    3546:	08 95       	ret

00003548 <vTaskMissedYield>:
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xYieldPending>
    354e:	08 95       	ret

00003550 <xTaskGetCurrentTaskHandle>:
    3550:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    3554:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3558:	08 95       	ret

0000355a <xTaskGetSchedulerState>:
    355a:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <xSchedulerRunning>
    355e:	88 23       	and	r24, r24
    3560:	31 f0       	breq	.+12     	; 0x356e <xTaskGetSchedulerState+0x14>
    3562:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    3566:	81 11       	cpse	r24, r1
    3568:	04 c0       	rjmp	.+8      	; 0x3572 <xTaskGetSchedulerState+0x18>
    356a:	82 e0       	ldi	r24, 0x02	; 2
    356c:	08 95       	ret
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	08 95       	ret
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	08 95       	ret

00003576 <xTaskPriorityInherit>:
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	fc 01       	movw	r30, r24
    3580:	89 2b       	or	r24, r25
    3582:	09 f4       	brne	.+2      	; 0x3586 <xTaskPriorityInherit+0x10>
    3584:	77 c0       	rjmp	.+238    	; 0x3674 <xTaskPriorityInherit+0xfe>
    3586:	82 8d       	ldd	r24, Z+26	; 0x1a
    3588:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    358c:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3590:	5a 96       	adiw	r26, 0x1a	; 26
    3592:	9c 91       	ld	r25, X
    3594:	89 17       	cp	r24, r25
    3596:	08 f0       	brcs	.+2      	; 0x359a <xTaskPriorityInherit+0x24>
    3598:	63 c0       	rjmp	.+198    	; 0x3660 <xTaskPriorityInherit+0xea>
    359a:	46 85       	ldd	r20, Z+14	; 0x0e
    359c:	57 85       	ldd	r21, Z+15	; 0x0f
    359e:	60 89       	ldd	r22, Z+16	; 0x10
    35a0:	71 89       	ldd	r23, Z+17	; 0x11
    35a2:	77 23       	and	r23, r23
    35a4:	94 f0       	brlt	.+36     	; 0x35ca <xTaskPriorityInherit+0x54>
    35a6:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    35aa:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    35ae:	5a 96       	adiw	r26, 0x1a	; 26
    35b0:	9c 91       	ld	r25, X
    35b2:	4a e0       	ldi	r20, 0x0A	; 10
    35b4:	50 e0       	ldi	r21, 0x00	; 0
    35b6:	60 e0       	ldi	r22, 0x00	; 0
    35b8:	70 e0       	ldi	r23, 0x00	; 0
    35ba:	49 1b       	sub	r20, r25
    35bc:	51 09       	sbc	r21, r1
    35be:	61 09       	sbc	r22, r1
    35c0:	71 09       	sbc	r23, r1
    35c2:	46 87       	std	Z+14, r20	; 0x0e
    35c4:	57 87       	std	Z+15, r21	; 0x0f
    35c6:	60 8b       	std	Z+16, r22	; 0x10
    35c8:	71 8b       	std	Z+17, r23	; 0x11
    35ca:	24 85       	ldd	r18, Z+12	; 0x0c
    35cc:	35 85       	ldd	r19, Z+13	; 0x0d
    35ce:	4b e0       	ldi	r20, 0x0B	; 11
    35d0:	84 9f       	mul	r24, r20
    35d2:	c0 01       	movw	r24, r0
    35d4:	11 24       	eor	r1, r1
    35d6:	89 50       	subi	r24, 0x09	; 9
    35d8:	9c 4e       	sbci	r25, 0xEC	; 236
    35da:	28 17       	cp	r18, r24
    35dc:	39 07       	cpc	r19, r25
    35de:	b9 f5       	brne	.+110    	; 0x364e <xTaskPriorityInherit+0xd8>
    35e0:	ef 01       	movw	r28, r30
    35e2:	8f 01       	movw	r16, r30
    35e4:	0e 5f       	subi	r16, 0xFE	; 254
    35e6:	1f 4f       	sbci	r17, 0xFF	; 255
    35e8:	c8 01       	movw	r24, r16
    35ea:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
    35ee:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    35f2:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    35f6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    35f8:	ea 8f       	std	Y+26, r30	; 0x1a
    35fa:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    35fe:	8e 17       	cp	r24, r30
    3600:	10 f4       	brcc	.+4      	; 0x3606 <xTaskPriorityInherit+0x90>
    3602:	e0 93 b5 13 	sts	0x13B5, r30	; 0x8013b5 <uxTopReadyPriority>
    3606:	8b e0       	ldi	r24, 0x0B	; 11
    3608:	8e 9f       	mul	r24, r30
    360a:	f0 01       	movw	r30, r0
    360c:	11 24       	eor	r1, r1
    360e:	e9 50       	subi	r30, 0x09	; 9
    3610:	fc 4e       	sbci	r31, 0xEC	; 236
    3612:	01 80       	ldd	r0, Z+1	; 0x01
    3614:	f2 81       	ldd	r31, Z+2	; 0x02
    3616:	e0 2d       	mov	r30, r0
    3618:	ff 83       	std	Y+7, r31	; 0x07
    361a:	ee 83       	std	Y+6, r30	; 0x06
    361c:	26 81       	ldd	r18, Z+6	; 0x06
    361e:	37 81       	ldd	r19, Z+7	; 0x07
    3620:	39 87       	std	Y+9, r19	; 0x09
    3622:	28 87       	std	Y+8, r18	; 0x08
    3624:	a6 81       	ldd	r26, Z+6	; 0x06
    3626:	b7 81       	ldd	r27, Z+7	; 0x07
    3628:	15 96       	adiw	r26, 0x05	; 5
    362a:	1c 93       	st	X, r17
    362c:	0e 93       	st	-X, r16
    362e:	14 97       	sbiw	r26, 0x04	; 4
    3630:	17 83       	std	Z+7, r17	; 0x07
    3632:	06 83       	std	Z+6, r16	; 0x06
    3634:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3636:	8e 9f       	mul	r24, r30
    3638:	f0 01       	movw	r30, r0
    363a:	11 24       	eor	r1, r1
    363c:	e9 50       	subi	r30, 0x09	; 9
    363e:	fc 4e       	sbci	r31, 0xEC	; 236
    3640:	fd 87       	std	Y+13, r31	; 0x0d
    3642:	ec 87       	std	Y+12, r30	; 0x0c
    3644:	80 81       	ld	r24, Z
    3646:	8f 5f       	subi	r24, 0xFF	; 255
    3648:	80 83       	st	Z, r24
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	16 c0       	rjmp	.+44     	; 0x367a <xTaskPriorityInherit+0x104>
    364e:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    3652:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3656:	5a 96       	adiw	r26, 0x1a	; 26
    3658:	8c 91       	ld	r24, X
    365a:	82 8f       	std	Z+26, r24	; 0x1a
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	0d c0       	rjmp	.+26     	; 0x367a <xTaskPriorityInherit+0x104>
    3660:	95 a5       	ldd	r25, Z+45	; 0x2d
    3662:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3666:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    366a:	82 8d       	ldd	r24, Z+26	; 0x1a
    366c:	98 17       	cp	r25, r24
    366e:	20 f0       	brcs	.+8      	; 0x3678 <xTaskPriorityInherit+0x102>
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	03 c0       	rjmp	.+6      	; 0x367a <xTaskPriorityInherit+0x104>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	01 c0       	rjmp	.+2      	; 0x367a <xTaskPriorityInherit+0x104>
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	1f 91       	pop	r17
    3680:	0f 91       	pop	r16
    3682:	08 95       	ret

00003684 <xTaskPriorityDisinherit>:
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	fc 01       	movw	r30, r24
    368e:	89 2b       	or	r24, r25
    3690:	09 f4       	brne	.+2      	; 0x3694 <xTaskPriorityDisinherit+0x10>
    3692:	49 c0       	rjmp	.+146    	; 0x3726 <xTaskPriorityDisinherit+0xa2>
    3694:	86 a5       	ldd	r24, Z+46	; 0x2e
    3696:	81 50       	subi	r24, 0x01	; 1
    3698:	86 a7       	std	Z+46, r24	; 0x2e
    369a:	22 8d       	ldd	r18, Z+26	; 0x1a
    369c:	95 a5       	ldd	r25, Z+45	; 0x2d
    369e:	29 17       	cp	r18, r25
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <xTaskPriorityDisinherit+0x20>
    36a2:	43 c0       	rjmp	.+134    	; 0x372a <xTaskPriorityDisinherit+0xa6>
    36a4:	81 11       	cpse	r24, r1
    36a6:	43 c0       	rjmp	.+134    	; 0x372e <xTaskPriorityDisinherit+0xaa>
    36a8:	ef 01       	movw	r28, r30
    36aa:	8f 01       	movw	r16, r30
    36ac:	0e 5f       	subi	r16, 0xFE	; 254
    36ae:	1f 4f       	sbci	r17, 0xFF	; 255
    36b0:	c8 01       	movw	r24, r16
    36b2:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
    36b6:	ed a5       	ldd	r30, Y+45	; 0x2d
    36b8:	ea 8f       	std	Y+26, r30	; 0x1a
    36ba:	8a e0       	ldi	r24, 0x0A	; 10
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	a0 e0       	ldi	r26, 0x00	; 0
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	8e 1b       	sub	r24, r30
    36c4:	91 09       	sbc	r25, r1
    36c6:	a1 09       	sbc	r26, r1
    36c8:	b1 09       	sbc	r27, r1
    36ca:	8e 87       	std	Y+14, r24	; 0x0e
    36cc:	9f 87       	std	Y+15, r25	; 0x0f
    36ce:	a8 8b       	std	Y+16, r26	; 0x10
    36d0:	b9 8b       	std	Y+17, r27	; 0x11
    36d2:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    36d6:	8e 17       	cp	r24, r30
    36d8:	10 f4       	brcc	.+4      	; 0x36de <xTaskPriorityDisinherit+0x5a>
    36da:	e0 93 b5 13 	sts	0x13B5, r30	; 0x8013b5 <uxTopReadyPriority>
    36de:	8b e0       	ldi	r24, 0x0B	; 11
    36e0:	8e 9f       	mul	r24, r30
    36e2:	f0 01       	movw	r30, r0
    36e4:	11 24       	eor	r1, r1
    36e6:	e9 50       	subi	r30, 0x09	; 9
    36e8:	fc 4e       	sbci	r31, 0xEC	; 236
    36ea:	01 80       	ldd	r0, Z+1	; 0x01
    36ec:	f2 81       	ldd	r31, Z+2	; 0x02
    36ee:	e0 2d       	mov	r30, r0
    36f0:	ff 83       	std	Y+7, r31	; 0x07
    36f2:	ee 83       	std	Y+6, r30	; 0x06
    36f4:	26 81       	ldd	r18, Z+6	; 0x06
    36f6:	37 81       	ldd	r19, Z+7	; 0x07
    36f8:	39 87       	std	Y+9, r19	; 0x09
    36fa:	28 87       	std	Y+8, r18	; 0x08
    36fc:	a6 81       	ldd	r26, Z+6	; 0x06
    36fe:	b7 81       	ldd	r27, Z+7	; 0x07
    3700:	15 96       	adiw	r26, 0x05	; 5
    3702:	1c 93       	st	X, r17
    3704:	0e 93       	st	-X, r16
    3706:	14 97       	sbiw	r26, 0x04	; 4
    3708:	17 83       	std	Z+7, r17	; 0x07
    370a:	06 83       	std	Z+6, r16	; 0x06
    370c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    370e:	8e 9f       	mul	r24, r30
    3710:	f0 01       	movw	r30, r0
    3712:	11 24       	eor	r1, r1
    3714:	e9 50       	subi	r30, 0x09	; 9
    3716:	fc 4e       	sbci	r31, 0xEC	; 236
    3718:	fd 87       	std	Y+13, r31	; 0x0d
    371a:	ec 87       	std	Y+12, r30	; 0x0c
    371c:	80 81       	ld	r24, Z
    371e:	8f 5f       	subi	r24, 0xFF	; 255
    3720:	80 83       	st	Z, r24
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	05 c0       	rjmp	.+10     	; 0x3730 <xTaskPriorityDisinherit+0xac>
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	03 c0       	rjmp	.+6      	; 0x3730 <xTaskPriorityDisinherit+0xac>
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	01 c0       	rjmp	.+2      	; 0x3730 <xTaskPriorityDisinherit+0xac>
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
    3738:	08 95       	ret

0000373a <vTaskPriorityDisinheritAfterTimeout>:
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	fc 01       	movw	r30, r24
    3744:	89 2b       	or	r24, r25
    3746:	09 f4       	brne	.+2      	; 0x374a <vTaskPriorityDisinheritAfterTimeout+0x10>
    3748:	5a c0       	rjmp	.+180    	; 0x37fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    374a:	85 a5       	ldd	r24, Z+45	; 0x2d
    374c:	86 17       	cp	r24, r22
    374e:	08 f4       	brcc	.+2      	; 0x3752 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3750:	86 2f       	mov	r24, r22
    3752:	92 8d       	ldd	r25, Z+26	; 0x1a
    3754:	89 17       	cp	r24, r25
    3756:	09 f4       	brne	.+2      	; 0x375a <vTaskPriorityDisinheritAfterTimeout+0x20>
    3758:	52 c0       	rjmp	.+164    	; 0x37fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    375a:	26 a5       	ldd	r18, Z+46	; 0x2e
    375c:	21 30       	cpi	r18, 0x01	; 1
    375e:	09 f0       	breq	.+2      	; 0x3762 <vTaskPriorityDisinheritAfterTimeout+0x28>
    3760:	4e c0       	rjmp	.+156    	; 0x37fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3762:	82 8f       	std	Z+26, r24	; 0x1a
    3764:	46 85       	ldd	r20, Z+14	; 0x0e
    3766:	57 85       	ldd	r21, Z+15	; 0x0f
    3768:	60 89       	ldd	r22, Z+16	; 0x10
    376a:	71 89       	ldd	r23, Z+17	; 0x11
    376c:	77 23       	and	r23, r23
    376e:	64 f0       	brlt	.+24     	; 0x3788 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3770:	4a e0       	ldi	r20, 0x0A	; 10
    3772:	50 e0       	ldi	r21, 0x00	; 0
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	48 1b       	sub	r20, r24
    377a:	51 09       	sbc	r21, r1
    377c:	61 09       	sbc	r22, r1
    377e:	71 09       	sbc	r23, r1
    3780:	46 87       	std	Z+14, r20	; 0x0e
    3782:	57 87       	std	Z+15, r21	; 0x0f
    3784:	60 8b       	std	Z+16, r22	; 0x10
    3786:	71 8b       	std	Z+17, r23	; 0x11
    3788:	24 85       	ldd	r18, Z+12	; 0x0c
    378a:	35 85       	ldd	r19, Z+13	; 0x0d
    378c:	4b e0       	ldi	r20, 0x0B	; 11
    378e:	94 9f       	mul	r25, r20
    3790:	c0 01       	movw	r24, r0
    3792:	11 24       	eor	r1, r1
    3794:	89 50       	subi	r24, 0x09	; 9
    3796:	9c 4e       	sbci	r25, 0xEC	; 236
    3798:	28 17       	cp	r18, r24
    379a:	39 07       	cpc	r19, r25
    379c:	81 f5       	brne	.+96     	; 0x37fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    379e:	ef 01       	movw	r28, r30
    37a0:	8f 01       	movw	r16, r30
    37a2:	0e 5f       	subi	r16, 0xFE	; 254
    37a4:	1f 4f       	sbci	r17, 0xFF	; 255
    37a6:	c8 01       	movw	r24, r16
    37a8:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
    37ac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    37ae:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    37b2:	8e 17       	cp	r24, r30
    37b4:	10 f4       	brcc	.+4      	; 0x37ba <vTaskPriorityDisinheritAfterTimeout+0x80>
    37b6:	e0 93 b5 13 	sts	0x13B5, r30	; 0x8013b5 <uxTopReadyPriority>
    37ba:	8b e0       	ldi	r24, 0x0B	; 11
    37bc:	8e 9f       	mul	r24, r30
    37be:	f0 01       	movw	r30, r0
    37c0:	11 24       	eor	r1, r1
    37c2:	e9 50       	subi	r30, 0x09	; 9
    37c4:	fc 4e       	sbci	r31, 0xEC	; 236
    37c6:	01 80       	ldd	r0, Z+1	; 0x01
    37c8:	f2 81       	ldd	r31, Z+2	; 0x02
    37ca:	e0 2d       	mov	r30, r0
    37cc:	ff 83       	std	Y+7, r31	; 0x07
    37ce:	ee 83       	std	Y+6, r30	; 0x06
    37d0:	26 81       	ldd	r18, Z+6	; 0x06
    37d2:	37 81       	ldd	r19, Z+7	; 0x07
    37d4:	39 87       	std	Y+9, r19	; 0x09
    37d6:	28 87       	std	Y+8, r18	; 0x08
    37d8:	a6 81       	ldd	r26, Z+6	; 0x06
    37da:	b7 81       	ldd	r27, Z+7	; 0x07
    37dc:	15 96       	adiw	r26, 0x05	; 5
    37de:	1c 93       	st	X, r17
    37e0:	0e 93       	st	-X, r16
    37e2:	14 97       	sbiw	r26, 0x04	; 4
    37e4:	17 83       	std	Z+7, r17	; 0x07
    37e6:	06 83       	std	Z+6, r16	; 0x06
    37e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    37ea:	8e 9f       	mul	r24, r30
    37ec:	f0 01       	movw	r30, r0
    37ee:	11 24       	eor	r1, r1
    37f0:	e9 50       	subi	r30, 0x09	; 9
    37f2:	fc 4e       	sbci	r31, 0xEC	; 236
    37f4:	fd 87       	std	Y+13, r31	; 0x0d
    37f6:	ec 87       	std	Y+12, r30	; 0x0c
    37f8:	80 81       	ld	r24, Z
    37fa:	8f 5f       	subi	r24, 0xFF	; 255
    37fc:	80 83       	st	Z, r24
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	08 95       	ret

00003808 <uxTaskResetEventItemValue>:
    3808:	cf 92       	push	r12
    380a:	df 92       	push	r13
    380c:	ef 92       	push	r14
    380e:	ff 92       	push	r15
    3810:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3814:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3818:	66 85       	ldd	r22, Z+14	; 0x0e
    381a:	77 85       	ldd	r23, Z+15	; 0x0f
    381c:	80 89       	ldd	r24, Z+16	; 0x10
    381e:	91 89       	ldd	r25, Z+17	; 0x11
    3820:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3824:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3828:	a0 91 65 14 	lds	r26, 0x1465	; 0x801465 <pxCurrentTCB>
    382c:	b0 91 66 14 	lds	r27, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3830:	5a 96       	adiw	r26, 0x1a	; 26
    3832:	2c 91       	ld	r18, X
    3834:	0f 2e       	mov	r0, r31
    3836:	fa e0       	ldi	r31, 0x0A	; 10
    3838:	cf 2e       	mov	r12, r31
    383a:	d1 2c       	mov	r13, r1
    383c:	e1 2c       	mov	r14, r1
    383e:	f1 2c       	mov	r15, r1
    3840:	f0 2d       	mov	r31, r0
    3842:	c2 1a       	sub	r12, r18
    3844:	d1 08       	sbc	r13, r1
    3846:	e1 08       	sbc	r14, r1
    3848:	f1 08       	sbc	r15, r1
    384a:	c6 86       	std	Z+14, r12	; 0x0e
    384c:	d7 86       	std	Z+15, r13	; 0x0f
    384e:	e0 8a       	std	Z+16, r14	; 0x10
    3850:	f1 8a       	std	Z+17, r15	; 0x11
    3852:	ff 90       	pop	r15
    3854:	ef 90       	pop	r14
    3856:	df 90       	pop	r13
    3858:	cf 90       	pop	r12
    385a:	08 95       	ret

0000385c <pvTaskIncrementMutexHeldCount>:
    385c:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    3860:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3864:	89 2b       	or	r24, r25
    3866:	39 f0       	breq	.+14     	; 0x3876 <pvTaskIncrementMutexHeldCount+0x1a>
    3868:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    386c:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3870:	86 a5       	ldd	r24, Z+46	; 0x2e
    3872:	8f 5f       	subi	r24, 0xFF	; 255
    3874:	86 a7       	std	Z+46, r24	; 0x2e
    3876:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    387a:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    387e:	08 95       	ret

00003880 <xTaskGenericNotifyWait>:
    3880:	4f 92       	push	r4
    3882:	5f 92       	push	r5
    3884:	6f 92       	push	r6
    3886:	7f 92       	push	r7
    3888:	af 92       	push	r10
    388a:	bf 92       	push	r11
    388c:	cf 92       	push	r12
    388e:	df 92       	push	r13
    3890:	ef 92       	push	r14
    3892:	ff 92       	push	r15
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	28 01       	movw	r4, r16
    389e:	39 01       	movw	r6, r18
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	0f 92       	push	r0
    38a6:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    38aa:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    38ae:	c8 2f       	mov	r28, r24
    38b0:	d0 e0       	ldi	r29, 0x00	; 0
    38b2:	ec 0f       	add	r30, r28
    38b4:	fd 1f       	adc	r31, r29
    38b6:	83 a9       	ldd	r24, Z+51	; 0x33
    38b8:	82 30       	cpi	r24, 0x02	; 2
    38ba:	79 f1       	breq	.+94     	; 0x391a <xTaskGenericNotifyWait+0x9a>
    38bc:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    38c0:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    38c4:	ce 01       	movw	r24, r28
    38c6:	88 0f       	add	r24, r24
    38c8:	99 1f       	adc	r25, r25
    38ca:	88 0f       	add	r24, r24
    38cc:	99 1f       	adc	r25, r25
    38ce:	e8 0f       	add	r30, r24
    38d0:	f9 1f       	adc	r31, r25
    38d2:	87 a5       	ldd	r24, Z+47	; 0x2f
    38d4:	90 a9       	ldd	r25, Z+48	; 0x30
    38d6:	a1 a9       	ldd	r26, Z+49	; 0x31
    38d8:	b2 a9       	ldd	r27, Z+50	; 0x32
    38da:	40 95       	com	r20
    38dc:	50 95       	com	r21
    38de:	60 95       	com	r22
    38e0:	70 95       	com	r23
    38e2:	48 23       	and	r20, r24
    38e4:	59 23       	and	r21, r25
    38e6:	6a 23       	and	r22, r26
    38e8:	7b 23       	and	r23, r27
    38ea:	47 a7       	std	Z+47, r20	; 0x2f
    38ec:	50 ab       	std	Z+48, r21	; 0x30
    38ee:	61 ab       	std	Z+49, r22	; 0x31
    38f0:	72 ab       	std	Z+50, r23	; 0x32
    38f2:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    38f6:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    38fa:	ec 0f       	add	r30, r28
    38fc:	fd 1f       	adc	r31, r29
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	83 ab       	std	Z+51, r24	; 0x33
    3902:	a1 14       	cp	r10, r1
    3904:	b1 04       	cpc	r11, r1
    3906:	c1 04       	cpc	r12, r1
    3908:	d1 04       	cpc	r13, r1
    390a:	39 f0       	breq	.+14     	; 0x391a <xTaskGenericNotifyWait+0x9a>
    390c:	41 e0       	ldi	r20, 0x01	; 1
    390e:	c6 01       	movw	r24, r12
    3910:	b5 01       	movw	r22, r10
    3912:	0e 94 04 14 	call	0x2808	; 0x2808 <prvAddCurrentTaskToDelayedList>
    3916:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    391a:	0f 90       	pop	r0
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	0f 92       	push	r0
    3924:	e1 14       	cp	r14, r1
    3926:	f1 04       	cpc	r15, r1
    3928:	a1 f0       	breq	.+40     	; 0x3952 <xTaskGenericNotifyWait+0xd2>
    392a:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    392e:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3932:	ce 01       	movw	r24, r28
    3934:	88 0f       	add	r24, r24
    3936:	99 1f       	adc	r25, r25
    3938:	88 0f       	add	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	e8 0f       	add	r30, r24
    393e:	f9 1f       	adc	r31, r25
    3940:	87 a5       	ldd	r24, Z+47	; 0x2f
    3942:	90 a9       	ldd	r25, Z+48	; 0x30
    3944:	a1 a9       	ldd	r26, Z+49	; 0x31
    3946:	b2 a9       	ldd	r27, Z+50	; 0x32
    3948:	f7 01       	movw	r30, r14
    394a:	80 83       	st	Z, r24
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	a2 83       	std	Z+2, r26	; 0x02
    3950:	b3 83       	std	Z+3, r27	; 0x03
    3952:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3956:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    395a:	ec 0f       	add	r30, r28
    395c:	fd 1f       	adc	r31, r29
    395e:	83 a9       	ldd	r24, Z+51	; 0x33
    3960:	82 30       	cpi	r24, 0x02	; 2
    3962:	e9 f4       	brne	.+58     	; 0x399e <xTaskGenericNotifyWait+0x11e>
    3964:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3968:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    396c:	ce 01       	movw	r24, r28
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	e8 0f       	add	r30, r24
    3978:	f9 1f       	adc	r31, r25
    397a:	87 a5       	ldd	r24, Z+47	; 0x2f
    397c:	90 a9       	ldd	r25, Z+48	; 0x30
    397e:	a1 a9       	ldd	r26, Z+49	; 0x31
    3980:	b2 a9       	ldd	r27, Z+50	; 0x32
    3982:	40 94       	com	r4
    3984:	50 94       	com	r5
    3986:	60 94       	com	r6
    3988:	70 94       	com	r7
    398a:	48 22       	and	r4, r24
    398c:	59 22       	and	r5, r25
    398e:	6a 22       	and	r6, r26
    3990:	7b 22       	and	r7, r27
    3992:	47 a6       	std	Z+47, r4	; 0x2f
    3994:	50 aa       	std	Z+48, r5	; 0x30
    3996:	61 aa       	std	Z+49, r6	; 0x31
    3998:	72 aa       	std	Z+50, r7	; 0x32
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	01 c0       	rjmp	.+2      	; 0x39a0 <xTaskGenericNotifyWait+0x120>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	20 91 65 14 	lds	r18, 0x1465	; 0x801465 <pxCurrentTCB>
    39a4:	30 91 66 14 	lds	r19, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    39a8:	c2 0f       	add	r28, r18
    39aa:	d3 1f       	adc	r29, r19
    39ac:	1b aa       	std	Y+51, r1	; 0x33
    39ae:	0f 90       	pop	r0
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	df 91       	pop	r29
    39b4:	cf 91       	pop	r28
    39b6:	1f 91       	pop	r17
    39b8:	0f 91       	pop	r16
    39ba:	ff 90       	pop	r15
    39bc:	ef 90       	pop	r14
    39be:	df 90       	pop	r13
    39c0:	cf 90       	pop	r12
    39c2:	bf 90       	pop	r11
    39c4:	af 90       	pop	r10
    39c6:	7f 90       	pop	r7
    39c8:	6f 90       	pop	r6
    39ca:	5f 90       	pop	r5
    39cc:	4f 90       	pop	r4
    39ce:	08 95       	ret

000039d0 <xTaskGenericNotify>:
    39d0:	8f 92       	push	r8
    39d2:	9f 92       	push	r9
    39d4:	af 92       	push	r10
    39d6:	bf 92       	push	r11
    39d8:	ef 92       	push	r14
    39da:	ff 92       	push	r15
    39dc:	0f 93       	push	r16
    39de:	cf 93       	push	r28
    39e0:	df 93       	push	r29
    39e2:	dc 01       	movw	r26, r24
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	0f 92       	push	r0
    39ea:	e1 14       	cp	r14, r1
    39ec:	f1 04       	cpc	r15, r1
    39ee:	89 f0       	breq	.+34     	; 0x3a12 <xTaskGenericNotify+0x42>
    39f0:	e6 2f       	mov	r30, r22
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	ee 0f       	add	r30, r30
    39f6:	ff 1f       	adc	r31, r31
    39f8:	ee 0f       	add	r30, r30
    39fa:	ff 1f       	adc	r31, r31
    39fc:	e8 0f       	add	r30, r24
    39fe:	f9 1f       	adc	r31, r25
    3a00:	87 a4       	ldd	r8, Z+47	; 0x2f
    3a02:	90 a8       	ldd	r9, Z+48	; 0x30
    3a04:	a1 a8       	ldd	r10, Z+49	; 0x31
    3a06:	b2 a8       	ldd	r11, Z+50	; 0x32
    3a08:	f7 01       	movw	r30, r14
    3a0a:	80 82       	st	Z, r8
    3a0c:	91 82       	std	Z+1, r9	; 0x01
    3a0e:	a2 82       	std	Z+2, r10	; 0x02
    3a10:	b3 82       	std	Z+3, r11	; 0x03
    3a12:	70 e0       	ldi	r23, 0x00	; 0
    3a14:	fd 01       	movw	r30, r26
    3a16:	e6 0f       	add	r30, r22
    3a18:	f7 1f       	adc	r31, r23
    3a1a:	83 a9       	ldd	r24, Z+51	; 0x33
    3a1c:	92 e0       	ldi	r25, 0x02	; 2
    3a1e:	93 ab       	std	Z+51, r25	; 0x33
    3a20:	02 30       	cpi	r16, 0x02	; 2
    3a22:	01 f1       	breq	.+64     	; 0x3a64 <xTaskGenericNotify+0x94>
    3a24:	18 f4       	brcc	.+6      	; 0x3a2c <xTaskGenericNotify+0x5c>
    3a26:	01 30       	cpi	r16, 0x01	; 1
    3a28:	31 f0       	breq	.+12     	; 0x3a36 <xTaskGenericNotify+0x66>
    3a2a:	4d c0       	rjmp	.+154    	; 0x3ac6 <xTaskGenericNotify+0xf6>
    3a2c:	03 30       	cpi	r16, 0x03	; 3
    3a2e:	79 f1       	breq	.+94     	; 0x3a8e <xTaskGenericNotify+0xbe>
    3a30:	04 30       	cpi	r16, 0x04	; 4
    3a32:	d1 f1       	breq	.+116    	; 0x3aa8 <xTaskGenericNotify+0xd8>
    3a34:	48 c0       	rjmp	.+144    	; 0x3ac6 <xTaskGenericNotify+0xf6>
    3a36:	66 0f       	add	r22, r22
    3a38:	77 1f       	adc	r23, r23
    3a3a:	66 0f       	add	r22, r22
    3a3c:	77 1f       	adc	r23, r23
    3a3e:	fd 01       	movw	r30, r26
    3a40:	e6 0f       	add	r30, r22
    3a42:	f7 1f       	adc	r31, r23
    3a44:	87 a4       	ldd	r8, Z+47	; 0x2f
    3a46:	90 a8       	ldd	r9, Z+48	; 0x30
    3a48:	a1 a8       	ldd	r10, Z+49	; 0x31
    3a4a:	b2 a8       	ldd	r11, Z+50	; 0x32
    3a4c:	ba 01       	movw	r22, r20
    3a4e:	a9 01       	movw	r20, r18
    3a50:	48 29       	or	r20, r8
    3a52:	59 29       	or	r21, r9
    3a54:	6a 29       	or	r22, r10
    3a56:	7b 29       	or	r23, r11
    3a58:	47 a7       	std	Z+47, r20	; 0x2f
    3a5a:	50 ab       	std	Z+48, r21	; 0x30
    3a5c:	61 ab       	std	Z+49, r22	; 0x31
    3a5e:	72 ab       	std	Z+50, r23	; 0x32
    3a60:	01 e0       	ldi	r16, 0x01	; 1
    3a62:	34 c0       	rjmp	.+104    	; 0x3acc <xTaskGenericNotify+0xfc>
    3a64:	66 0f       	add	r22, r22
    3a66:	77 1f       	adc	r23, r23
    3a68:	66 0f       	add	r22, r22
    3a6a:	77 1f       	adc	r23, r23
    3a6c:	fd 01       	movw	r30, r26
    3a6e:	e6 0f       	add	r30, r22
    3a70:	f7 1f       	adc	r31, r23
    3a72:	47 a5       	ldd	r20, Z+47	; 0x2f
    3a74:	50 a9       	ldd	r21, Z+48	; 0x30
    3a76:	61 a9       	ldd	r22, Z+49	; 0x31
    3a78:	72 a9       	ldd	r23, Z+50	; 0x32
    3a7a:	4f 5f       	subi	r20, 0xFF	; 255
    3a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a7e:	6f 4f       	sbci	r22, 0xFF	; 255
    3a80:	7f 4f       	sbci	r23, 0xFF	; 255
    3a82:	47 a7       	std	Z+47, r20	; 0x2f
    3a84:	50 ab       	std	Z+48, r21	; 0x30
    3a86:	61 ab       	std	Z+49, r22	; 0x31
    3a88:	72 ab       	std	Z+50, r23	; 0x32
    3a8a:	01 e0       	ldi	r16, 0x01	; 1
    3a8c:	1f c0       	rjmp	.+62     	; 0x3acc <xTaskGenericNotify+0xfc>
    3a8e:	66 0f       	add	r22, r22
    3a90:	77 1f       	adc	r23, r23
    3a92:	66 0f       	add	r22, r22
    3a94:	77 1f       	adc	r23, r23
    3a96:	fd 01       	movw	r30, r26
    3a98:	e6 0f       	add	r30, r22
    3a9a:	f7 1f       	adc	r31, r23
    3a9c:	27 a7       	std	Z+47, r18	; 0x2f
    3a9e:	30 ab       	std	Z+48, r19	; 0x30
    3aa0:	41 ab       	std	Z+49, r20	; 0x31
    3aa2:	52 ab       	std	Z+50, r21	; 0x32
    3aa4:	01 e0       	ldi	r16, 0x01	; 1
    3aa6:	12 c0       	rjmp	.+36     	; 0x3acc <xTaskGenericNotify+0xfc>
    3aa8:	82 30       	cpi	r24, 0x02	; 2
    3aaa:	79 f0       	breq	.+30     	; 0x3aca <xTaskGenericNotify+0xfa>
    3aac:	66 0f       	add	r22, r22
    3aae:	77 1f       	adc	r23, r23
    3ab0:	66 0f       	add	r22, r22
    3ab2:	77 1f       	adc	r23, r23
    3ab4:	fd 01       	movw	r30, r26
    3ab6:	e6 0f       	add	r30, r22
    3ab8:	f7 1f       	adc	r31, r23
    3aba:	27 a7       	std	Z+47, r18	; 0x2f
    3abc:	30 ab       	std	Z+48, r19	; 0x30
    3abe:	41 ab       	std	Z+49, r20	; 0x31
    3ac0:	52 ab       	std	Z+50, r21	; 0x32
    3ac2:	01 e0       	ldi	r16, 0x01	; 1
    3ac4:	03 c0       	rjmp	.+6      	; 0x3acc <xTaskGenericNotify+0xfc>
    3ac6:	01 e0       	ldi	r16, 0x01	; 1
    3ac8:	01 c0       	rjmp	.+2      	; 0x3acc <xTaskGenericNotify+0xfc>
    3aca:	00 e0       	ldi	r16, 0x00	; 0
    3acc:	81 30       	cpi	r24, 0x01	; 1
    3ace:	09 f0       	breq	.+2      	; 0x3ad2 <xTaskGenericNotify+0x102>
    3ad0:	69 c0       	rjmp	.+210    	; 0x3ba4 <xTaskGenericNotify+0x1d4>
    3ad2:	1c 96       	adiw	r26, 0x0c	; 12
    3ad4:	ed 91       	ld	r30, X+
    3ad6:	fc 91       	ld	r31, X
    3ad8:	1d 97       	sbiw	r26, 0x0d	; 13
    3ada:	16 96       	adiw	r26, 0x06	; 6
    3adc:	cd 91       	ld	r28, X+
    3ade:	dc 91       	ld	r29, X
    3ae0:	17 97       	sbiw	r26, 0x07	; 7
    3ae2:	18 96       	adiw	r26, 0x08	; 8
    3ae4:	8d 91       	ld	r24, X+
    3ae6:	9c 91       	ld	r25, X
    3ae8:	19 97       	sbiw	r26, 0x09	; 9
    3aea:	9f 83       	std	Y+7, r25	; 0x07
    3aec:	8e 83       	std	Y+6, r24	; 0x06
    3aee:	18 96       	adiw	r26, 0x08	; 8
    3af0:	cd 91       	ld	r28, X+
    3af2:	dc 91       	ld	r29, X
    3af4:	19 97       	sbiw	r26, 0x09	; 9
    3af6:	16 96       	adiw	r26, 0x06	; 6
    3af8:	8d 91       	ld	r24, X+
    3afa:	9c 91       	ld	r25, X
    3afc:	17 97       	sbiw	r26, 0x07	; 7
    3afe:	9d 83       	std	Y+5, r25	; 0x05
    3b00:	8c 83       	std	Y+4, r24	; 0x04
    3b02:	81 81       	ldd	r24, Z+1	; 0x01
    3b04:	92 81       	ldd	r25, Z+2	; 0x02
    3b06:	9d 01       	movw	r18, r26
    3b08:	2e 5f       	subi	r18, 0xFE	; 254
    3b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0c:	82 17       	cp	r24, r18
    3b0e:	93 07       	cpc	r25, r19
    3b10:	31 f4       	brne	.+12     	; 0x3b1e <xTaskGenericNotify+0x14e>
    3b12:	18 96       	adiw	r26, 0x08	; 8
    3b14:	8d 91       	ld	r24, X+
    3b16:	9c 91       	ld	r25, X
    3b18:	19 97       	sbiw	r26, 0x09	; 9
    3b1a:	92 83       	std	Z+2, r25	; 0x02
    3b1c:	81 83       	std	Z+1, r24	; 0x01
    3b1e:	1d 96       	adiw	r26, 0x0d	; 13
    3b20:	1c 92       	st	X, r1
    3b22:	1e 92       	st	-X, r1
    3b24:	1c 97       	sbiw	r26, 0x0c	; 12
    3b26:	80 81       	ld	r24, Z
    3b28:	81 50       	subi	r24, 0x01	; 1
    3b2a:	80 83       	st	Z, r24
    3b2c:	5a 96       	adiw	r26, 0x1a	; 26
    3b2e:	ec 91       	ld	r30, X
    3b30:	5a 97       	sbiw	r26, 0x1a	; 26
    3b32:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    3b36:	8e 17       	cp	r24, r30
    3b38:	10 f4       	brcc	.+4      	; 0x3b3e <xTaskGenericNotify+0x16e>
    3b3a:	e0 93 b5 13 	sts	0x13B5, r30	; 0x8013b5 <uxTopReadyPriority>
    3b3e:	8b e0       	ldi	r24, 0x0B	; 11
    3b40:	8e 9f       	mul	r24, r30
    3b42:	f0 01       	movw	r30, r0
    3b44:	11 24       	eor	r1, r1
    3b46:	e9 50       	subi	r30, 0x09	; 9
    3b48:	fc 4e       	sbci	r31, 0xEC	; 236
    3b4a:	01 80       	ldd	r0, Z+1	; 0x01
    3b4c:	f2 81       	ldd	r31, Z+2	; 0x02
    3b4e:	e0 2d       	mov	r30, r0
    3b50:	17 96       	adiw	r26, 0x07	; 7
    3b52:	fc 93       	st	X, r31
    3b54:	ee 93       	st	-X, r30
    3b56:	16 97       	sbiw	r26, 0x06	; 6
    3b58:	46 81       	ldd	r20, Z+6	; 0x06
    3b5a:	57 81       	ldd	r21, Z+7	; 0x07
    3b5c:	19 96       	adiw	r26, 0x09	; 9
    3b5e:	5c 93       	st	X, r21
    3b60:	4e 93       	st	-X, r20
    3b62:	18 97       	sbiw	r26, 0x08	; 8
    3b64:	c6 81       	ldd	r28, Z+6	; 0x06
    3b66:	d7 81       	ldd	r29, Z+7	; 0x07
    3b68:	3d 83       	std	Y+5, r19	; 0x05
    3b6a:	2c 83       	std	Y+4, r18	; 0x04
    3b6c:	37 83       	std	Z+7, r19	; 0x07
    3b6e:	26 83       	std	Z+6, r18	; 0x06
    3b70:	5a 96       	adiw	r26, 0x1a	; 26
    3b72:	ec 91       	ld	r30, X
    3b74:	5a 97       	sbiw	r26, 0x1a	; 26
    3b76:	8e 9f       	mul	r24, r30
    3b78:	f0 01       	movw	r30, r0
    3b7a:	11 24       	eor	r1, r1
    3b7c:	e9 50       	subi	r30, 0x09	; 9
    3b7e:	fc 4e       	sbci	r31, 0xEC	; 236
    3b80:	1d 96       	adiw	r26, 0x0d	; 13
    3b82:	fc 93       	st	X, r31
    3b84:	ee 93       	st	-X, r30
    3b86:	1c 97       	sbiw	r26, 0x0c	; 12
    3b88:	80 81       	ld	r24, Z
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	80 83       	st	Z, r24
    3b8e:	5a 96       	adiw	r26, 0x1a	; 26
    3b90:	9c 91       	ld	r25, X
    3b92:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3b96:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3b9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b9c:	89 17       	cp	r24, r25
    3b9e:	10 f4       	brcc	.+4      	; 0x3ba4 <xTaskGenericNotify+0x1d4>
    3ba0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    3ba4:	0f 90       	pop	r0
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	80 2f       	mov	r24, r16
    3baa:	df 91       	pop	r29
    3bac:	cf 91       	pop	r28
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	ef 90       	pop	r14
    3bb4:	bf 90       	pop	r11
    3bb6:	af 90       	pop	r10
    3bb8:	9f 90       	pop	r9
    3bba:	8f 90       	pop	r8
    3bbc:	08 95       	ret

00003bbe <xTaskGenericNotifyFromISR>:
    3bbe:	8f 92       	push	r8
    3bc0:	9f 92       	push	r9
    3bc2:	af 92       	push	r10
    3bc4:	bf 92       	push	r11
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	e1 14       	cp	r14, r1
    3bd8:	f1 04       	cpc	r15, r1
    3bda:	89 f0       	breq	.+34     	; 0x3bfe <xTaskGenericNotifyFromISR+0x40>
    3bdc:	e6 2f       	mov	r30, r22
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	ee 0f       	add	r30, r30
    3be2:	ff 1f       	adc	r31, r31
    3be4:	ee 0f       	add	r30, r30
    3be6:	ff 1f       	adc	r31, r31
    3be8:	e8 0f       	add	r30, r24
    3bea:	f9 1f       	adc	r31, r25
    3bec:	87 a4       	ldd	r8, Z+47	; 0x2f
    3bee:	90 a8       	ldd	r9, Z+48	; 0x30
    3bf0:	a1 a8       	ldd	r10, Z+49	; 0x31
    3bf2:	b2 a8       	ldd	r11, Z+50	; 0x32
    3bf4:	f7 01       	movw	r30, r14
    3bf6:	80 82       	st	Z, r8
    3bf8:	91 82       	std	Z+1, r9	; 0x01
    3bfa:	a2 82       	std	Z+2, r10	; 0x02
    3bfc:	b3 82       	std	Z+3, r11	; 0x03
    3bfe:	70 e0       	ldi	r23, 0x00	; 0
    3c00:	fd 01       	movw	r30, r26
    3c02:	e6 0f       	add	r30, r22
    3c04:	f7 1f       	adc	r31, r23
    3c06:	93 a9       	ldd	r25, Z+51	; 0x33
    3c08:	82 e0       	ldi	r24, 0x02	; 2
    3c0a:	83 ab       	std	Z+51, r24	; 0x33
    3c0c:	02 30       	cpi	r16, 0x02	; 2
    3c0e:	01 f1       	breq	.+64     	; 0x3c50 <xTaskGenericNotifyFromISR+0x92>
    3c10:	18 f4       	brcc	.+6      	; 0x3c18 <xTaskGenericNotifyFromISR+0x5a>
    3c12:	01 30       	cpi	r16, 0x01	; 1
    3c14:	31 f0       	breq	.+12     	; 0x3c22 <xTaskGenericNotifyFromISR+0x64>
    3c16:	4d c0       	rjmp	.+154    	; 0x3cb2 <xTaskGenericNotifyFromISR+0xf4>
    3c18:	03 30       	cpi	r16, 0x03	; 3
    3c1a:	79 f1       	breq	.+94     	; 0x3c7a <xTaskGenericNotifyFromISR+0xbc>
    3c1c:	04 30       	cpi	r16, 0x04	; 4
    3c1e:	d1 f1       	breq	.+116    	; 0x3c94 <xTaskGenericNotifyFromISR+0xd6>
    3c20:	48 c0       	rjmp	.+144    	; 0x3cb2 <xTaskGenericNotifyFromISR+0xf4>
    3c22:	66 0f       	add	r22, r22
    3c24:	77 1f       	adc	r23, r23
    3c26:	66 0f       	add	r22, r22
    3c28:	77 1f       	adc	r23, r23
    3c2a:	fd 01       	movw	r30, r26
    3c2c:	e6 0f       	add	r30, r22
    3c2e:	f7 1f       	adc	r31, r23
    3c30:	87 a4       	ldd	r8, Z+47	; 0x2f
    3c32:	90 a8       	ldd	r9, Z+48	; 0x30
    3c34:	a1 a8       	ldd	r10, Z+49	; 0x31
    3c36:	b2 a8       	ldd	r11, Z+50	; 0x32
    3c38:	ba 01       	movw	r22, r20
    3c3a:	a9 01       	movw	r20, r18
    3c3c:	48 29       	or	r20, r8
    3c3e:	59 29       	or	r21, r9
    3c40:	6a 29       	or	r22, r10
    3c42:	7b 29       	or	r23, r11
    3c44:	47 a7       	std	Z+47, r20	; 0x2f
    3c46:	50 ab       	std	Z+48, r21	; 0x30
    3c48:	61 ab       	std	Z+49, r22	; 0x31
    3c4a:	72 ab       	std	Z+50, r23	; 0x32
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	34 c0       	rjmp	.+104    	; 0x3cb8 <xTaskGenericNotifyFromISR+0xfa>
    3c50:	66 0f       	add	r22, r22
    3c52:	77 1f       	adc	r23, r23
    3c54:	66 0f       	add	r22, r22
    3c56:	77 1f       	adc	r23, r23
    3c58:	fd 01       	movw	r30, r26
    3c5a:	e6 0f       	add	r30, r22
    3c5c:	f7 1f       	adc	r31, r23
    3c5e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3c60:	50 a9       	ldd	r21, Z+48	; 0x30
    3c62:	61 a9       	ldd	r22, Z+49	; 0x31
    3c64:	72 a9       	ldd	r23, Z+50	; 0x32
    3c66:	4f 5f       	subi	r20, 0xFF	; 255
    3c68:	5f 4f       	sbci	r21, 0xFF	; 255
    3c6a:	6f 4f       	sbci	r22, 0xFF	; 255
    3c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6e:	47 a7       	std	Z+47, r20	; 0x2f
    3c70:	50 ab       	std	Z+48, r21	; 0x30
    3c72:	61 ab       	std	Z+49, r22	; 0x31
    3c74:	72 ab       	std	Z+50, r23	; 0x32
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	1f c0       	rjmp	.+62     	; 0x3cb8 <xTaskGenericNotifyFromISR+0xfa>
    3c7a:	66 0f       	add	r22, r22
    3c7c:	77 1f       	adc	r23, r23
    3c7e:	66 0f       	add	r22, r22
    3c80:	77 1f       	adc	r23, r23
    3c82:	fd 01       	movw	r30, r26
    3c84:	e6 0f       	add	r30, r22
    3c86:	f7 1f       	adc	r31, r23
    3c88:	27 a7       	std	Z+47, r18	; 0x2f
    3c8a:	30 ab       	std	Z+48, r19	; 0x30
    3c8c:	41 ab       	std	Z+49, r20	; 0x31
    3c8e:	52 ab       	std	Z+50, r21	; 0x32
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	12 c0       	rjmp	.+36     	; 0x3cb8 <xTaskGenericNotifyFromISR+0xfa>
    3c94:	92 30       	cpi	r25, 0x02	; 2
    3c96:	79 f0       	breq	.+30     	; 0x3cb6 <xTaskGenericNotifyFromISR+0xf8>
    3c98:	66 0f       	add	r22, r22
    3c9a:	77 1f       	adc	r23, r23
    3c9c:	66 0f       	add	r22, r22
    3c9e:	77 1f       	adc	r23, r23
    3ca0:	fd 01       	movw	r30, r26
    3ca2:	e6 0f       	add	r30, r22
    3ca4:	f7 1f       	adc	r31, r23
    3ca6:	27 a7       	std	Z+47, r18	; 0x2f
    3ca8:	30 ab       	std	Z+48, r19	; 0x30
    3caa:	41 ab       	std	Z+49, r20	; 0x31
    3cac:	52 ab       	std	Z+50, r21	; 0x32
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	03 c0       	rjmp	.+6      	; 0x3cb8 <xTaskGenericNotifyFromISR+0xfa>
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	01 c0       	rjmp	.+2      	; 0x3cb8 <xTaskGenericNotifyFromISR+0xfa>
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	91 30       	cpi	r25, 0x01	; 1
    3cba:	09 f0       	breq	.+2      	; 0x3cbe <xTaskGenericNotifyFromISR+0x100>
    3cbc:	96 c0       	rjmp	.+300    	; 0x3dea <xTaskGenericNotifyFromISR+0x22c>
    3cbe:	90 91 a6 13 	lds	r25, 0x13A6	; 0x8013a6 <uxSchedulerSuspended>
    3cc2:	91 11       	cpse	r25, r1
    3cc4:	5f c0       	rjmp	.+190    	; 0x3d84 <xTaskGenericNotifyFromISR+0x1c6>
    3cc6:	1c 96       	adiw	r26, 0x0c	; 12
    3cc8:	ed 91       	ld	r30, X+
    3cca:	fc 91       	ld	r31, X
    3ccc:	1d 97       	sbiw	r26, 0x0d	; 13
    3cce:	16 96       	adiw	r26, 0x06	; 6
    3cd0:	cd 91       	ld	r28, X+
    3cd2:	dc 91       	ld	r29, X
    3cd4:	17 97       	sbiw	r26, 0x07	; 7
    3cd6:	18 96       	adiw	r26, 0x08	; 8
    3cd8:	2d 91       	ld	r18, X+
    3cda:	3c 91       	ld	r19, X
    3cdc:	19 97       	sbiw	r26, 0x09	; 9
    3cde:	3f 83       	std	Y+7, r19	; 0x07
    3ce0:	2e 83       	std	Y+6, r18	; 0x06
    3ce2:	18 96       	adiw	r26, 0x08	; 8
    3ce4:	cd 91       	ld	r28, X+
    3ce6:	dc 91       	ld	r29, X
    3ce8:	19 97       	sbiw	r26, 0x09	; 9
    3cea:	16 96       	adiw	r26, 0x06	; 6
    3cec:	2d 91       	ld	r18, X+
    3cee:	3c 91       	ld	r19, X
    3cf0:	17 97       	sbiw	r26, 0x07	; 7
    3cf2:	3d 83       	std	Y+5, r19	; 0x05
    3cf4:	2c 83       	std	Y+4, r18	; 0x04
    3cf6:	41 81       	ldd	r20, Z+1	; 0x01
    3cf8:	52 81       	ldd	r21, Z+2	; 0x02
    3cfa:	9d 01       	movw	r18, r26
    3cfc:	2e 5f       	subi	r18, 0xFE	; 254
    3cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    3d00:	42 17       	cp	r20, r18
    3d02:	53 07       	cpc	r21, r19
    3d04:	31 f4       	brne	.+12     	; 0x3d12 <xTaskGenericNotifyFromISR+0x154>
    3d06:	18 96       	adiw	r26, 0x08	; 8
    3d08:	4d 91       	ld	r20, X+
    3d0a:	5c 91       	ld	r21, X
    3d0c:	19 97       	sbiw	r26, 0x09	; 9
    3d0e:	52 83       	std	Z+2, r21	; 0x02
    3d10:	41 83       	std	Z+1, r20	; 0x01
    3d12:	1d 96       	adiw	r26, 0x0d	; 13
    3d14:	1c 92       	st	X, r1
    3d16:	1e 92       	st	-X, r1
    3d18:	1c 97       	sbiw	r26, 0x0c	; 12
    3d1a:	90 81       	ld	r25, Z
    3d1c:	91 50       	subi	r25, 0x01	; 1
    3d1e:	90 83       	st	Z, r25
    3d20:	5a 96       	adiw	r26, 0x1a	; 26
    3d22:	ec 91       	ld	r30, X
    3d24:	5a 97       	sbiw	r26, 0x1a	; 26
    3d26:	90 91 b5 13 	lds	r25, 0x13B5	; 0x8013b5 <uxTopReadyPriority>
    3d2a:	9e 17       	cp	r25, r30
    3d2c:	10 f4       	brcc	.+4      	; 0x3d32 <xTaskGenericNotifyFromISR+0x174>
    3d2e:	e0 93 b5 13 	sts	0x13B5, r30	; 0x8013b5 <uxTopReadyPriority>
    3d32:	9b e0       	ldi	r25, 0x0B	; 11
    3d34:	9e 9f       	mul	r25, r30
    3d36:	f0 01       	movw	r30, r0
    3d38:	11 24       	eor	r1, r1
    3d3a:	e9 50       	subi	r30, 0x09	; 9
    3d3c:	fc 4e       	sbci	r31, 0xEC	; 236
    3d3e:	01 80       	ldd	r0, Z+1	; 0x01
    3d40:	f2 81       	ldd	r31, Z+2	; 0x02
    3d42:	e0 2d       	mov	r30, r0
    3d44:	17 96       	adiw	r26, 0x07	; 7
    3d46:	fc 93       	st	X, r31
    3d48:	ee 93       	st	-X, r30
    3d4a:	16 97       	sbiw	r26, 0x06	; 6
    3d4c:	46 81       	ldd	r20, Z+6	; 0x06
    3d4e:	57 81       	ldd	r21, Z+7	; 0x07
    3d50:	19 96       	adiw	r26, 0x09	; 9
    3d52:	5c 93       	st	X, r21
    3d54:	4e 93       	st	-X, r20
    3d56:	18 97       	sbiw	r26, 0x08	; 8
    3d58:	c6 81       	ldd	r28, Z+6	; 0x06
    3d5a:	d7 81       	ldd	r29, Z+7	; 0x07
    3d5c:	3d 83       	std	Y+5, r19	; 0x05
    3d5e:	2c 83       	std	Y+4, r18	; 0x04
    3d60:	37 83       	std	Z+7, r19	; 0x07
    3d62:	26 83       	std	Z+6, r18	; 0x06
    3d64:	5a 96       	adiw	r26, 0x1a	; 26
    3d66:	ec 91       	ld	r30, X
    3d68:	5a 97       	sbiw	r26, 0x1a	; 26
    3d6a:	9e 9f       	mul	r25, r30
    3d6c:	f0 01       	movw	r30, r0
    3d6e:	11 24       	eor	r1, r1
    3d70:	e9 50       	subi	r30, 0x09	; 9
    3d72:	fc 4e       	sbci	r31, 0xEC	; 236
    3d74:	1d 96       	adiw	r26, 0x0d	; 13
    3d76:	fc 93       	st	X, r31
    3d78:	ee 93       	st	-X, r30
    3d7a:	1c 97       	sbiw	r26, 0x0c	; 12
    3d7c:	90 81       	ld	r25, Z
    3d7e:	9f 5f       	subi	r25, 0xFF	; 255
    3d80:	90 83       	st	Z, r25
    3d82:	21 c0       	rjmp	.+66     	; 0x3dc6 <xTaskGenericNotifyFromISR+0x208>
    3d84:	62 ed       	ldi	r22, 0xD2	; 210
    3d86:	73 e1       	ldi	r23, 0x13	; 19
    3d88:	fb 01       	movw	r30, r22
    3d8a:	c1 81       	ldd	r28, Z+1	; 0x01
    3d8c:	d2 81       	ldd	r29, Z+2	; 0x02
    3d8e:	53 96       	adiw	r26, 0x13	; 19
    3d90:	dc 93       	st	X, r29
    3d92:	ce 93       	st	-X, r28
    3d94:	52 97       	sbiw	r26, 0x12	; 18
    3d96:	2e 81       	ldd	r18, Y+6	; 0x06
    3d98:	3f 81       	ldd	r19, Y+7	; 0x07
    3d9a:	55 96       	adiw	r26, 0x15	; 21
    3d9c:	3c 93       	st	X, r19
    3d9e:	2e 93       	st	-X, r18
    3da0:	54 97       	sbiw	r26, 0x14	; 20
    3da2:	4e 81       	ldd	r20, Y+6	; 0x06
    3da4:	5f 81       	ldd	r21, Y+7	; 0x07
    3da6:	9d 01       	movw	r18, r26
    3da8:	22 5f       	subi	r18, 0xF2	; 242
    3daa:	3f 4f       	sbci	r19, 0xFF	; 255
    3dac:	fa 01       	movw	r30, r20
    3dae:	35 83       	std	Z+5, r19	; 0x05
    3db0:	24 83       	std	Z+4, r18	; 0x04
    3db2:	3f 83       	std	Y+7, r19	; 0x07
    3db4:	2e 83       	std	Y+6, r18	; 0x06
    3db6:	59 96       	adiw	r26, 0x19	; 25
    3db8:	7c 93       	st	X, r23
    3dba:	6e 93       	st	-X, r22
    3dbc:	58 97       	sbiw	r26, 0x18	; 24
    3dbe:	fb 01       	movw	r30, r22
    3dc0:	90 81       	ld	r25, Z
    3dc2:	9f 5f       	subi	r25, 0xFF	; 255
    3dc4:	90 83       	st	Z, r25
    3dc6:	5a 96       	adiw	r26, 0x1a	; 26
    3dc8:	2c 91       	ld	r18, X
    3dca:	e0 91 65 14 	lds	r30, 0x1465	; 0x801465 <pxCurrentTCB>
    3dce:	f0 91 66 14 	lds	r31, 0x1466	; 0x801466 <pxCurrentTCB+0x1>
    3dd2:	92 8d       	ldd	r25, Z+26	; 0x1a
    3dd4:	92 17       	cp	r25, r18
    3dd6:	48 f4       	brcc	.+18     	; 0x3dea <xTaskGenericNotifyFromISR+0x22c>
    3dd8:	c1 14       	cp	r12, r1
    3dda:	d1 04       	cpc	r13, r1
    3ddc:	19 f0       	breq	.+6      	; 0x3de4 <xTaskGenericNotifyFromISR+0x226>
    3dde:	91 e0       	ldi	r25, 0x01	; 1
    3de0:	f6 01       	movw	r30, r12
    3de2:	90 83       	st	Z, r25
    3de4:	91 e0       	ldi	r25, 0x01	; 1
    3de6:	90 93 af 13 	sts	0x13AF, r25	; 0x8013af <xYieldPending>
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	0f 91       	pop	r16
    3df0:	ff 90       	pop	r15
    3df2:	ef 90       	pop	r14
    3df4:	df 90       	pop	r13
    3df6:	cf 90       	pop	r12
    3df8:	bf 90       	pop	r11
    3dfa:	af 90       	pop	r10
    3dfc:	9f 90       	pop	r9
    3dfe:	8f 90       	pop	r8
    3e00:	08 95       	ret

00003e02 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	21 f4       	brne	.+8      	; 0x3e0e <xTaskGenericNotifyStateClear+0xc>
    3e06:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <pxCurrentTCB>
    3e0a:	90 91 66 14 	lds	r25, 0x1466	; 0x801466 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	fc 01       	movw	r30, r24
    3e18:	e6 0f       	add	r30, r22
    3e1a:	f7 1f       	adc	r31, r23
    3e1c:	23 a9       	ldd	r18, Z+51	; 0x33
    3e1e:	22 30       	cpi	r18, 0x02	; 2
    3e20:	31 f4       	brne	.+12     	; 0x3e2e <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3e22:	fc 01       	movw	r30, r24
    3e24:	e6 0f       	add	r30, r22
    3e26:	f7 1f       	adc	r31, r23
    3e28:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	01 c0       	rjmp	.+2      	; 0x3e30 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3e30:	0f 90       	pop	r0
    3e32:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3e34:	08 95       	ret

00003e36 <prvGetNextExpireTime>:
    3e36:	dc 01       	movw	r26, r24
    3e38:	e0 91 71 14 	lds	r30, 0x1471	; 0x801471 <pxCurrentTimerList>
    3e3c:	f0 91 72 14 	lds	r31, 0x1472	; 0x801472 <pxCurrentTimerList+0x1>
    3e40:	80 81       	ld	r24, Z
    3e42:	91 e0       	ldi	r25, 0x01	; 1
    3e44:	81 11       	cpse	r24, r1
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	9c 93       	st	X, r25
    3e4a:	91 11       	cpse	r25, r1
    3e4c:	08 c0       	rjmp	.+16     	; 0x3e5e <prvGetNextExpireTime+0x28>
    3e4e:	07 80       	ldd	r0, Z+7	; 0x07
    3e50:	f0 85       	ldd	r31, Z+8	; 0x08
    3e52:	e0 2d       	mov	r30, r0
    3e54:	60 81       	ld	r22, Z
    3e56:	71 81       	ldd	r23, Z+1	; 0x01
    3e58:	82 81       	ldd	r24, Z+2	; 0x02
    3e5a:	93 81       	ldd	r25, Z+3	; 0x03
    3e5c:	08 95       	ret
    3e5e:	60 e0       	ldi	r22, 0x00	; 0
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	cb 01       	movw	r24, r22
    3e64:	08 95       	ret

00003e66 <prvInsertTimerInActiveList>:
    3e66:	cf 92       	push	r12
    3e68:	df 92       	push	r13
    3e6a:	ef 92       	push	r14
    3e6c:	ff 92       	push	r15
    3e6e:	0f 93       	push	r16
    3e70:	1f 93       	push	r17
    3e72:	fc 01       	movw	r30, r24
    3e74:	42 83       	std	Z+2, r20	; 0x02
    3e76:	53 83       	std	Z+3, r21	; 0x03
    3e78:	64 83       	std	Z+4, r22	; 0x04
    3e7a:	75 83       	std	Z+5, r23	; 0x05
    3e7c:	93 87       	std	Z+11, r25	; 0x0b
    3e7e:	82 87       	std	Z+10, r24	; 0x0a
    3e80:	04 17       	cp	r16, r20
    3e82:	15 07       	cpc	r17, r21
    3e84:	26 07       	cpc	r18, r22
    3e86:	37 07       	cpc	r19, r23
    3e88:	c0 f0       	brcs	.+48     	; 0x3eba <prvInsertTimerInActiveList+0x54>
    3e8a:	0c 19       	sub	r16, r12
    3e8c:	1d 09       	sbc	r17, r13
    3e8e:	2e 09       	sbc	r18, r14
    3e90:	3f 09       	sbc	r19, r15
    3e92:	86 85       	ldd	r24, Z+14	; 0x0e
    3e94:	97 85       	ldd	r25, Z+15	; 0x0f
    3e96:	a0 89       	ldd	r26, Z+16	; 0x10
    3e98:	b1 89       	ldd	r27, Z+17	; 0x11
    3e9a:	08 17       	cp	r16, r24
    3e9c:	19 07       	cpc	r17, r25
    3e9e:	2a 07       	cpc	r18, r26
    3ea0:	3b 07       	cpc	r19, r27
    3ea2:	00 f5       	brcc	.+64     	; 0x3ee4 <prvInsertTimerInActiveList+0x7e>
    3ea4:	bf 01       	movw	r22, r30
    3ea6:	6e 5f       	subi	r22, 0xFE	; 254
    3ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eaa:	80 91 6f 14 	lds	r24, 0x146F	; 0x80146f <pxOverflowTimerList>
    3eae:	90 91 70 14 	lds	r25, 0x1470	; 0x801470 <pxOverflowTimerList+0x1>
    3eb2:	0e 94 45 0a 	call	0x148a	; 0x148a <vListInsert>
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	18 c0       	rjmp	.+48     	; 0x3eea <prvInsertTimerInActiveList+0x84>
    3eba:	0c 15       	cp	r16, r12
    3ebc:	1d 05       	cpc	r17, r13
    3ebe:	2e 05       	cpc	r18, r14
    3ec0:	3f 05       	cpc	r19, r15
    3ec2:	28 f4       	brcc	.+10     	; 0x3ece <prvInsertTimerInActiveList+0x68>
    3ec4:	4c 15       	cp	r20, r12
    3ec6:	5d 05       	cpc	r21, r13
    3ec8:	6e 05       	cpc	r22, r14
    3eca:	7f 05       	cpc	r23, r15
    3ecc:	68 f4       	brcc	.+26     	; 0x3ee8 <prvInsertTimerInActiveList+0x82>
    3ece:	bf 01       	movw	r22, r30
    3ed0:	6e 5f       	subi	r22, 0xFE	; 254
    3ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed4:	80 91 71 14 	lds	r24, 0x1471	; 0x801471 <pxCurrentTimerList>
    3ed8:	90 91 72 14 	lds	r25, 0x1472	; 0x801472 <pxCurrentTimerList+0x1>
    3edc:	0e 94 45 0a 	call	0x148a	; 0x148a <vListInsert>
    3ee0:	80 e0       	ldi	r24, 0x00	; 0
    3ee2:	03 c0       	rjmp	.+6      	; 0x3eea <prvInsertTimerInActiveList+0x84>
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	01 c0       	rjmp	.+2      	; 0x3eea <prvInsertTimerInActiveList+0x84>
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	ff 90       	pop	r15
    3ef0:	ef 90       	pop	r14
    3ef2:	df 90       	pop	r13
    3ef4:	cf 90       	pop	r12
    3ef6:	08 95       	ret

00003ef8 <prvCheckForValidListAndQueue>:
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	0f 92       	push	r0
    3efe:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <xTimerQueue>
    3f02:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <xTimerQueue+0x1>
    3f06:	89 2b       	or	r24, r25
    3f08:	e9 f4       	brne	.+58     	; 0x3f44 <prvCheckForValidListAndQueue+0x4c>
    3f0a:	8e e7       	ldi	r24, 0x7E	; 126
    3f0c:	94 e1       	ldi	r25, 0x14	; 20
    3f0e:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    3f12:	83 e7       	ldi	r24, 0x73	; 115
    3f14:	94 e1       	ldi	r25, 0x14	; 20
    3f16:	0e 94 30 0a 	call	0x1460	; 0x1460 <vListInitialise>
    3f1a:	8e e7       	ldi	r24, 0x7E	; 126
    3f1c:	94 e1       	ldi	r25, 0x14	; 20
    3f1e:	90 93 72 14 	sts	0x1472, r25	; 0x801472 <pxCurrentTimerList+0x1>
    3f22:	80 93 71 14 	sts	0x1471, r24	; 0x801471 <pxCurrentTimerList>
    3f26:	83 e7       	ldi	r24, 0x73	; 115
    3f28:	94 e1       	ldi	r25, 0x14	; 20
    3f2a:	90 93 70 14 	sts	0x1470, r25	; 0x801470 <pxOverflowTimerList+0x1>
    3f2e:	80 93 6f 14 	sts	0x146F, r24	; 0x80146f <pxOverflowTimerList>
    3f32:	40 e0       	ldi	r20, 0x00	; 0
    3f34:	67 e0       	ldi	r22, 0x07	; 7
    3f36:	8a e0       	ldi	r24, 0x0A	; 10
    3f38:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericCreate>
    3f3c:	90 93 6e 14 	sts	0x146E, r25	; 0x80146e <xTimerQueue+0x1>
    3f40:	80 93 6d 14 	sts	0x146D, r24	; 0x80146d <xTimerQueue>
    3f44:	0f 90       	pop	r0
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	08 95       	ret

00003f4a <xTimerCreateTimerTask>:
    3f4a:	ef 92       	push	r14
    3f4c:	ff 92       	push	r15
    3f4e:	0f 93       	push	r16
    3f50:	d3 df       	rcall	.-90     	; 0x3ef8 <prvCheckForValidListAndQueue>
    3f52:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <xTimerQueue>
    3f56:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <xTimerQueue+0x1>
    3f5a:	89 2b       	or	r24, r25
    3f5c:	91 f0       	breq	.+36     	; 0x3f82 <xTimerCreateTimerTask+0x38>
    3f5e:	0f 2e       	mov	r0, r31
    3f60:	fb e6       	ldi	r31, 0x6B	; 107
    3f62:	ef 2e       	mov	r14, r31
    3f64:	f4 e1       	ldi	r31, 0x14	; 20
    3f66:	ff 2e       	mov	r15, r31
    3f68:	f0 2d       	mov	r31, r0
    3f6a:	03 e0       	ldi	r16, 0x03	; 3
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 ec       	ldi	r20, 0xC0	; 192
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	6d ec       	ldi	r22, 0xCD	; 205
    3f76:	74 e0       	ldi	r23, 0x04	; 4
    3f78:	89 e5       	ldi	r24, 0x59	; 89
    3f7a:	91 e0       	ldi	r25, 0x01	; 1
    3f7c:	0e 94 a6 14 	call	0x294c	; 0x294c <xTaskCreate>
    3f80:	01 c0       	rjmp	.+2      	; 0x3f84 <xTimerCreateTimerTask+0x3a>
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	0f 91       	pop	r16
    3f86:	ff 90       	pop	r15
    3f88:	ef 90       	pop	r14
    3f8a:	08 95       	ret

00003f8c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3f8c:	8f 92       	push	r8
    3f8e:	9f 92       	push	r9
    3f90:	af 92       	push	r10
    3f92:	bf 92       	push	r11
    3f94:	cf 92       	push	r12
    3f96:	df 92       	push	r13
    3f98:	ef 92       	push	r14
    3f9a:	ff 92       	push	r15
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	cf 93       	push	r28
    3fa2:	df 93       	push	r29
    3fa4:	cd b7       	in	r28, 0x3d	; 61
    3fa6:	de b7       	in	r29, 0x3e	; 62
    3fa8:	27 97       	sbiw	r28, 0x07	; 7
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3fb4:	e0 91 6d 14 	lds	r30, 0x146D	; 0x80146d <xTimerQueue>
    3fb8:	f0 91 6e 14 	lds	r31, 0x146E	; 0x80146e <xTimerQueue+0x1>
    3fbc:	30 97       	sbiw	r30, 0x00	; 0
    3fbe:	81 f1       	breq	.+96     	; 0x4020 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3fc0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3fc2:	2a 83       	std	Y+2, r18	; 0x02
    3fc4:	3b 83       	std	Y+3, r19	; 0x03
    3fc6:	4c 83       	std	Y+4, r20	; 0x04
    3fc8:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3fca:	9f 83       	std	Y+7, r25	; 0x07
    3fcc:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3fce:	66 30       	cpi	r22, 0x06	; 6
    3fd0:	f4 f4       	brge	.+60     	; 0x400e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3fd2:	c3 da       	rcall	.-2682   	; 0x355a <xTaskGetSchedulerState>
    3fd4:	82 30       	cpi	r24, 0x02	; 2
    3fd6:	69 f4       	brne	.+26     	; 0x3ff2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3fd8:	00 e0       	ldi	r16, 0x00	; 0
    3fda:	a7 01       	movw	r20, r14
    3fdc:	96 01       	movw	r18, r12
    3fde:	be 01       	movw	r22, r28
    3fe0:	6f 5f       	subi	r22, 0xFF	; 255
    3fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe4:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <xTimerQueue>
    3fe8:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <xTimerQueue+0x1>
    3fec:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
    3ff0:	18 c0       	rjmp	.+48     	; 0x4022 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3ff2:	00 e0       	ldi	r16, 0x00	; 0
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	a9 01       	movw	r20, r18
    3ffa:	be 01       	movw	r22, r28
    3ffc:	6f 5f       	subi	r22, 0xFF	; 255
    3ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    4000:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <xTimerQueue>
    4004:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <xTimerQueue+0x1>
    4008:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <xQueueGenericSend>
    400c:	0a c0       	rjmp	.+20     	; 0x4022 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	a8 01       	movw	r20, r16
    4012:	be 01       	movw	r22, r28
    4014:	6f 5f       	subi	r22, 0xFF	; 255
    4016:	7f 4f       	sbci	r23, 0xFF	; 255
    4018:	cf 01       	movw	r24, r30
    401a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <xQueueGenericSendFromISR>
    401e:	01 c0       	rjmp	.+2      	; 0x4022 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    4020:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    4022:	27 96       	adiw	r28, 0x07	; 7
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	ff 90       	pop	r15
    4038:	ef 90       	pop	r14
    403a:	df 90       	pop	r13
    403c:	cf 90       	pop	r12
    403e:	bf 90       	pop	r11
    4040:	af 90       	pop	r10
    4042:	9f 90       	pop	r9
    4044:	8f 90       	pop	r8
    4046:	08 95       	ret

00004048 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    4048:	8f 92       	push	r8
    404a:	9f 92       	push	r9
    404c:	af 92       	push	r10
    404e:	bf 92       	push	r11
    4050:	cf 92       	push	r12
    4052:	df 92       	push	r13
    4054:	ef 92       	push	r14
    4056:	ff 92       	push	r15
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4060:	3b c0       	rjmp	.+118    	; 0x40d8 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4062:	07 80       	ldd	r0, Z+7	; 0x07
    4064:	f0 85       	ldd	r31, Z+8	; 0x08
    4066:	e0 2d       	mov	r30, r0
    4068:	80 80       	ld	r8, Z
    406a:	91 80       	ldd	r9, Z+1	; 0x01
    406c:	a2 80       	ldd	r10, Z+2	; 0x02
    406e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4070:	c0 85       	ldd	r28, Z+8	; 0x08
    4072:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4074:	8e 01       	movw	r16, r28
    4076:	0e 5f       	subi	r16, 0xFE	; 254
    4078:	1f 4f       	sbci	r17, 0xFF	; 255
    407a:	c8 01       	movw	r24, r16
    407c:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4080:	ec 89       	ldd	r30, Y+20	; 0x14
    4082:	fd 89       	ldd	r31, Y+21	; 0x15
    4084:	ce 01       	movw	r24, r28
    4086:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4088:	8e 89       	ldd	r24, Y+22	; 0x16
    408a:	82 ff       	sbrs	r24, 2
    408c:	25 c0       	rjmp	.+74     	; 0x40d8 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    408e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4090:	9f 85       	ldd	r25, Y+15	; 0x0f
    4092:	a8 89       	ldd	r26, Y+16	; 0x10
    4094:	b9 89       	ldd	r27, Y+17	; 0x11
    4096:	88 0d       	add	r24, r8
    4098:	99 1d       	adc	r25, r9
    409a:	aa 1d       	adc	r26, r10
    409c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    409e:	88 16       	cp	r8, r24
    40a0:	99 06       	cpc	r9, r25
    40a2:	aa 06       	cpc	r10, r26
    40a4:	bb 06       	cpc	r11, r27
    40a6:	70 f4       	brcc	.+28     	; 0x40c4 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    40a8:	8a 83       	std	Y+2, r24	; 0x02
    40aa:	9b 83       	std	Y+3, r25	; 0x03
    40ac:	ac 83       	std	Y+4, r26	; 0x04
    40ae:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    40b0:	db 87       	std	Y+11, r29	; 0x0b
    40b2:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    40b4:	b8 01       	movw	r22, r16
    40b6:	80 91 71 14 	lds	r24, 0x1471	; 0x801471 <pxCurrentTimerList>
    40ba:	90 91 72 14 	lds	r25, 0x1472	; 0x801472 <pxCurrentTimerList+0x1>
    40be:	0e 94 45 0a 	call	0x148a	; 0x148a <vListInsert>
    40c2:	0a c0       	rjmp	.+20     	; 0x40d8 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    40c4:	c1 2c       	mov	r12, r1
    40c6:	d1 2c       	mov	r13, r1
    40c8:	76 01       	movw	r14, r12
    40ca:	00 e0       	ldi	r16, 0x00	; 0
    40cc:	10 e0       	ldi	r17, 0x00	; 0
    40ce:	a5 01       	movw	r20, r10
    40d0:	94 01       	movw	r18, r8
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	ce 01       	movw	r24, r28
    40d6:	5a df       	rcall	.-332    	; 0x3f8c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    40d8:	e0 91 71 14 	lds	r30, 0x1471	; 0x801471 <pxCurrentTimerList>
    40dc:	f0 91 72 14 	lds	r31, 0x1472	; 0x801472 <pxCurrentTimerList+0x1>
    40e0:	80 81       	ld	r24, Z
    40e2:	81 11       	cpse	r24, r1
    40e4:	be cf       	rjmp	.-132    	; 0x4062 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    40e6:	80 91 6f 14 	lds	r24, 0x146F	; 0x80146f <pxOverflowTimerList>
    40ea:	90 91 70 14 	lds	r25, 0x1470	; 0x801470 <pxOverflowTimerList+0x1>
    40ee:	90 93 72 14 	sts	0x1472, r25	; 0x801472 <pxCurrentTimerList+0x1>
    40f2:	80 93 71 14 	sts	0x1471, r24	; 0x801471 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    40f6:	f0 93 70 14 	sts	0x1470, r31	; 0x801470 <pxOverflowTimerList+0x1>
    40fa:	e0 93 6f 14 	sts	0x146F, r30	; 0x80146f <pxOverflowTimerList>
    }
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	1f 91       	pop	r17
    4104:	0f 91       	pop	r16
    4106:	ff 90       	pop	r15
    4108:	ef 90       	pop	r14
    410a:	df 90       	pop	r13
    410c:	cf 90       	pop	r12
    410e:	bf 90       	pop	r11
    4110:	af 90       	pop	r10
    4112:	9f 90       	pop	r9
    4114:	8f 90       	pop	r8
    4116:	08 95       	ret

00004118 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    4118:	cf 92       	push	r12
    411a:	df 92       	push	r13
    411c:	ef 92       	push	r14
    411e:	ff 92       	push	r15
    4120:	cf 93       	push	r28
    4122:	df 93       	push	r29
    4124:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    4126:	0e 94 30 15 	call	0x2a60	; 0x2a60 <xTaskGetTickCount>
    412a:	6b 01       	movw	r12, r22
    412c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    412e:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xLastTime.2436>
    4132:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <xLastTime.2436+0x1>
    4136:	a0 91 69 14 	lds	r26, 0x1469	; 0x801469 <xLastTime.2436+0x2>
    413a:	b0 91 6a 14 	lds	r27, 0x146A	; 0x80146a <xLastTime.2436+0x3>
    413e:	c8 16       	cp	r12, r24
    4140:	d9 06       	cpc	r13, r25
    4142:	ea 06       	cpc	r14, r26
    4144:	fb 06       	cpc	r15, r27
    4146:	20 f4       	brcc	.+8      	; 0x4150 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    4148:	7f df       	rcall	.-258    	; 0x4048 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	88 83       	st	Y, r24
    414e:	01 c0       	rjmp	.+2      	; 0x4152 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    4150:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    4152:	c0 92 67 14 	sts	0x1467, r12	; 0x801467 <xLastTime.2436>
    4156:	d0 92 68 14 	sts	0x1468, r13	; 0x801468 <xLastTime.2436+0x1>
    415a:	e0 92 69 14 	sts	0x1469, r14	; 0x801469 <xLastTime.2436+0x2>
    415e:	f0 92 6a 14 	sts	0x146A, r15	; 0x80146a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    4162:	c7 01       	movw	r24, r14
    4164:	b6 01       	movw	r22, r12
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	ff 90       	pop	r15
    416c:	ef 90       	pop	r14
    416e:	df 90       	pop	r13
    4170:	cf 90       	pop	r12
    4172:	08 95       	ret

00004174 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    4174:	4f 92       	push	r4
    4176:	5f 92       	push	r5
    4178:	6f 92       	push	r6
    417a:	7f 92       	push	r7
    417c:	8f 92       	push	r8
    417e:	9f 92       	push	r9
    4180:	af 92       	push	r10
    4182:	bf 92       	push	r11
    4184:	cf 92       	push	r12
    4186:	df 92       	push	r13
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	4b 01       	movw	r8, r22
    4196:	5c 01       	movw	r10, r24
    4198:	29 01       	movw	r4, r18
    419a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    419c:	e0 91 71 14 	lds	r30, 0x1471	; 0x801471 <pxCurrentTimerList>
    41a0:	f0 91 72 14 	lds	r31, 0x1472	; 0x801472 <pxCurrentTimerList+0x1>
    41a4:	07 80       	ldd	r0, Z+7	; 0x07
    41a6:	f0 85       	ldd	r31, Z+8	; 0x08
    41a8:	e0 2d       	mov	r30, r0
    41aa:	c0 85       	ldd	r28, Z+8	; 0x08
    41ac:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    41ae:	ce 01       	movw	r24, r28
    41b0:	02 96       	adiw	r24, 0x02	; 2
    41b2:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    41b6:	8e 89       	ldd	r24, Y+22	; 0x16
    41b8:	82 ff       	sbrs	r24, 2
    41ba:	1b c0       	rjmp	.+54     	; 0x41f2 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    41bc:	4e 85       	ldd	r20, Y+14	; 0x0e
    41be:	5f 85       	ldd	r21, Y+15	; 0x0f
    41c0:	68 89       	ldd	r22, Y+16	; 0x10
    41c2:	79 89       	ldd	r23, Y+17	; 0x11
    41c4:	48 0d       	add	r20, r8
    41c6:	59 1d       	adc	r21, r9
    41c8:	6a 1d       	adc	r22, r10
    41ca:	7b 1d       	adc	r23, r11
    41cc:	75 01       	movw	r14, r10
    41ce:	64 01       	movw	r12, r8
    41d0:	93 01       	movw	r18, r6
    41d2:	82 01       	movw	r16, r4
    41d4:	ce 01       	movw	r24, r28
    41d6:	47 de       	rcall	.-882    	; 0x3e66 <prvInsertTimerInActiveList>
    41d8:	88 23       	and	r24, r24
    41da:	69 f0       	breq	.+26     	; 0x41f6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    41dc:	c1 2c       	mov	r12, r1
    41de:	d1 2c       	mov	r13, r1
    41e0:	76 01       	movw	r14, r12
    41e2:	00 e0       	ldi	r16, 0x00	; 0
    41e4:	10 e0       	ldi	r17, 0x00	; 0
    41e6:	a5 01       	movw	r20, r10
    41e8:	94 01       	movw	r18, r8
    41ea:	60 e0       	ldi	r22, 0x00	; 0
    41ec:	ce 01       	movw	r24, r28
    41ee:	ce de       	rcall	.-612    	; 0x3f8c <xTimerGenericCommand>
    41f0:	02 c0       	rjmp	.+4      	; 0x41f6 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    41f2:	8e 7f       	andi	r24, 0xFE	; 254
    41f4:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    41f6:	ec 89       	ldd	r30, Y+20	; 0x14
    41f8:	fd 89       	ldd	r31, Y+21	; 0x15
    41fa:	ce 01       	movw	r24, r28
    41fc:	19 95       	eicall
    }
    41fe:	df 91       	pop	r29
    4200:	cf 91       	pop	r28
    4202:	1f 91       	pop	r17
    4204:	0f 91       	pop	r16
    4206:	ff 90       	pop	r15
    4208:	ef 90       	pop	r14
    420a:	df 90       	pop	r13
    420c:	cf 90       	pop	r12
    420e:	bf 90       	pop	r11
    4210:	af 90       	pop	r10
    4212:	9f 90       	pop	r9
    4214:	8f 90       	pop	r8
    4216:	7f 90       	pop	r7
    4218:	6f 90       	pop	r6
    421a:	5f 90       	pop	r5
    421c:	4f 90       	pop	r4
    421e:	08 95       	ret

00004220 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    4220:	8f 92       	push	r8
    4222:	9f 92       	push	r9
    4224:	af 92       	push	r10
    4226:	bf 92       	push	r11
    4228:	cf 92       	push	r12
    422a:	df 92       	push	r13
    422c:	ef 92       	push	r14
    422e:	ff 92       	push	r15
    4230:	1f 93       	push	r17
    4232:	cf 93       	push	r28
    4234:	df 93       	push	r29
    4236:	1f 92       	push	r1
    4238:	cd b7       	in	r28, 0x3d	; 61
    423a:	de b7       	in	r29, 0x3e	; 62
    423c:	6b 01       	movw	r12, r22
    423e:	7c 01       	movw	r14, r24
    4240:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    4242:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4246:	ce 01       	movw	r24, r28
    4248:	01 96       	adiw	r24, 0x01	; 1
    424a:	66 df       	rcall	.-308    	; 0x4118 <prvSampleTimeNow>
    424c:	4b 01       	movw	r8, r22
    424e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	81 11       	cpse	r24, r1
    4254:	2d c0       	rjmp	.+90     	; 0x42b0 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4256:	11 11       	cpse	r17, r1
    4258:	0d c0       	rjmp	.+26     	; 0x4274 <prvProcessTimerOrBlockTask+0x54>
    425a:	8c 14       	cp	r8, r12
    425c:	9d 04       	cpc	r9, r13
    425e:	ae 04       	cpc	r10, r14
    4260:	bf 04       	cpc	r11, r15
    4262:	40 f0       	brcs	.+16     	; 0x4274 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    4264:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4268:	a5 01       	movw	r20, r10
    426a:	94 01       	movw	r18, r8
    426c:	c7 01       	movw	r24, r14
    426e:	b6 01       	movw	r22, r12
    4270:	81 df       	rcall	.-254    	; 0x4174 <prvProcessExpiredTimer>
    4272:	20 c0       	rjmp	.+64     	; 0x42b4 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    4274:	11 23       	and	r17, r17
    4276:	41 f0       	breq	.+16     	; 0x4288 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4278:	e0 91 6f 14 	lds	r30, 0x146F	; 0x80146f <pxOverflowTimerList>
    427c:	f0 91 70 14 	lds	r31, 0x1470	; 0x801470 <pxOverflowTimerList+0x1>
    4280:	80 81       	ld	r24, Z
    4282:	11 e0       	ldi	r17, 0x01	; 1
    4284:	81 11       	cpse	r24, r1
    4286:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4288:	b7 01       	movw	r22, r14
    428a:	a6 01       	movw	r20, r12
    428c:	48 19       	sub	r20, r8
    428e:	59 09       	sbc	r21, r9
    4290:	6a 09       	sbc	r22, r10
    4292:	7b 09       	sbc	r23, r11
    4294:	21 2f       	mov	r18, r17
    4296:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <xTimerQueue>
    429a:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <xTimerQueue+0x1>
    429e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    42a2:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
    42a6:	81 11       	cpse	r24, r1
    42a8:	05 c0       	rjmp	.+10     	; 0x42b4 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    42aa:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    42ae:	02 c0       	rjmp	.+4      	; 0x42b4 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    42b0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <xTaskResumeAll>
            }
        }
    }
    42b4:	0f 90       	pop	r0
    42b6:	df 91       	pop	r29
    42b8:	cf 91       	pop	r28
    42ba:	1f 91       	pop	r17
    42bc:	ff 90       	pop	r15
    42be:	ef 90       	pop	r14
    42c0:	df 90       	pop	r13
    42c2:	cf 90       	pop	r12
    42c4:	bf 90       	pop	r11
    42c6:	af 90       	pop	r10
    42c8:	9f 90       	pop	r9
    42ca:	8f 90       	pop	r8
    42cc:	08 95       	ret

000042ce <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    42ce:	af 92       	push	r10
    42d0:	bf 92       	push	r11
    42d2:	cf 92       	push	r12
    42d4:	df 92       	push	r13
    42d6:	ef 92       	push	r14
    42d8:	ff 92       	push	r15
    42da:	0f 93       	push	r16
    42dc:	1f 93       	push	r17
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	28 97       	sbiw	r28, 0x08	; 8
    42e8:	0f b6       	in	r0, 0x3f	; 63
    42ea:	f8 94       	cli
    42ec:	de bf       	out	0x3e, r29	; 62
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    42f2:	82 c0       	rjmp	.+260    	; 0x43f8 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	88 23       	and	r24, r24
    42f8:	0c f4       	brge	.+2      	; 0x42fc <prvProcessReceivedCommands+0x2e>
    42fa:	7e c0       	rjmp	.+252    	; 0x43f8 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    42fc:	ae 80       	ldd	r10, Y+6	; 0x06
    42fe:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    4300:	d5 01       	movw	r26, r10
    4302:	1c 96       	adiw	r26, 0x0c	; 12
    4304:	8d 91       	ld	r24, X+
    4306:	9c 91       	ld	r25, X
    4308:	1d 97       	sbiw	r26, 0x0d	; 13
    430a:	89 2b       	or	r24, r25
    430c:	21 f0       	breq	.+8      	; 0x4316 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    430e:	c5 01       	movw	r24, r10
    4310:	02 96       	adiw	r24, 0x02	; 2
    4312:	0e 94 82 0a 	call	0x1504	; 0x1504 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4316:	ce 01       	movw	r24, r28
    4318:	08 96       	adiw	r24, 0x08	; 8
    431a:	fe de       	rcall	.-516    	; 0x4118 <prvSampleTimeNow>
    431c:	8b 01       	movw	r16, r22
    431e:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    4320:	e9 81       	ldd	r30, Y+1	; 0x01
    4322:	0e 2e       	mov	r0, r30
    4324:	00 0c       	add	r0, r0
    4326:	ff 0b       	sbc	r31, r31
    4328:	ea 30       	cpi	r30, 0x0A	; 10
    432a:	f1 05       	cpc	r31, r1
    432c:	08 f0       	brcs	.+2      	; 0x4330 <prvProcessReceivedCommands+0x62>
    432e:	64 c0       	rjmp	.+200    	; 0x43f8 <prvProcessReceivedCommands+0x12a>
    4330:	88 27       	eor	r24, r24
    4332:	ee 58       	subi	r30, 0x8E	; 142
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	8f 4f       	sbci	r24, 0xFF	; 255
    4338:	0c 94 c7 35 	jmp	0x6b8e	; 0x6b8e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    433c:	f5 01       	movw	r30, r10
    433e:	86 89       	ldd	r24, Z+22	; 0x16
    4340:	81 60       	ori	r24, 0x01	; 1
    4342:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    4344:	ca 80       	ldd	r12, Y+2	; 0x02
    4346:	db 80       	ldd	r13, Y+3	; 0x03
    4348:	ec 80       	ldd	r14, Y+4	; 0x04
    434a:	fd 80       	ldd	r15, Y+5	; 0x05
    434c:	46 85       	ldd	r20, Z+14	; 0x0e
    434e:	57 85       	ldd	r21, Z+15	; 0x0f
    4350:	60 89       	ldd	r22, Z+16	; 0x10
    4352:	71 89       	ldd	r23, Z+17	; 0x11
    4354:	4c 0d       	add	r20, r12
    4356:	5d 1d       	adc	r21, r13
    4358:	6e 1d       	adc	r22, r14
    435a:	7f 1d       	adc	r23, r15
    435c:	c5 01       	movw	r24, r10
    435e:	83 dd       	rcall	.-1274   	; 0x3e66 <prvInsertTimerInActiveList>
    4360:	88 23       	and	r24, r24
    4362:	09 f4       	brne	.+2      	; 0x4366 <prvProcessReceivedCommands+0x98>
    4364:	49 c0       	rjmp	.+146    	; 0x43f8 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4366:	d5 01       	movw	r26, r10
    4368:	54 96       	adiw	r26, 0x14	; 20
    436a:	ed 91       	ld	r30, X+
    436c:	fc 91       	ld	r31, X
    436e:	55 97       	sbiw	r26, 0x15	; 21
    4370:	c5 01       	movw	r24, r10
    4372:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4374:	f5 01       	movw	r30, r10
    4376:	86 89       	ldd	r24, Z+22	; 0x16
    4378:	82 ff       	sbrs	r24, 2
    437a:	3e c0       	rjmp	.+124    	; 0x43f8 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    437c:	4a 81       	ldd	r20, Y+2	; 0x02
    437e:	5b 81       	ldd	r21, Y+3	; 0x03
    4380:	6c 81       	ldd	r22, Y+4	; 0x04
    4382:	7d 81       	ldd	r23, Y+5	; 0x05
    4384:	86 85       	ldd	r24, Z+14	; 0x0e
    4386:	97 85       	ldd	r25, Z+15	; 0x0f
    4388:	a0 89       	ldd	r26, Z+16	; 0x10
    438a:	b1 89       	ldd	r27, Z+17	; 0x11
    438c:	9a 01       	movw	r18, r20
    438e:	ab 01       	movw	r20, r22
    4390:	28 0f       	add	r18, r24
    4392:	39 1f       	adc	r19, r25
    4394:	4a 1f       	adc	r20, r26
    4396:	5b 1f       	adc	r21, r27
    4398:	c1 2c       	mov	r12, r1
    439a:	d1 2c       	mov	r13, r1
    439c:	76 01       	movw	r14, r12
    439e:	00 e0       	ldi	r16, 0x00	; 0
    43a0:	10 e0       	ldi	r17, 0x00	; 0
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	c5 01       	movw	r24, r10
    43a6:	f2 dd       	rcall	.-1052   	; 0x3f8c <xTimerGenericCommand>
    43a8:	27 c0       	rjmp	.+78     	; 0x43f8 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    43aa:	d5 01       	movw	r26, r10
    43ac:	56 96       	adiw	r26, 0x16	; 22
    43ae:	8c 91       	ld	r24, X
    43b0:	56 97       	sbiw	r26, 0x16	; 22
    43b2:	8e 7f       	andi	r24, 0xFE	; 254
    43b4:	56 96       	adiw	r26, 0x16	; 22
    43b6:	8c 93       	st	X, r24
                        break;
    43b8:	1f c0       	rjmp	.+62     	; 0x43f8 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    43ba:	f5 01       	movw	r30, r10
    43bc:	86 89       	ldd	r24, Z+22	; 0x16
    43be:	81 60       	ori	r24, 0x01	; 1
    43c0:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    43c2:	4a 81       	ldd	r20, Y+2	; 0x02
    43c4:	5b 81       	ldd	r21, Y+3	; 0x03
    43c6:	6c 81       	ldd	r22, Y+4	; 0x04
    43c8:	7d 81       	ldd	r23, Y+5	; 0x05
    43ca:	46 87       	std	Z+14, r20	; 0x0e
    43cc:	57 87       	std	Z+15, r21	; 0x0f
    43ce:	60 8b       	std	Z+16, r22	; 0x10
    43d0:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    43d2:	40 0f       	add	r20, r16
    43d4:	51 1f       	adc	r21, r17
    43d6:	62 1f       	adc	r22, r18
    43d8:	73 1f       	adc	r23, r19
    43da:	68 01       	movw	r12, r16
    43dc:	79 01       	movw	r14, r18
    43de:	c5 01       	movw	r24, r10
    43e0:	42 dd       	rcall	.-1404   	; 0x3e66 <prvInsertTimerInActiveList>
                        break;
    43e2:	0a c0       	rjmp	.+20     	; 0x43f8 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    43e4:	f5 01       	movw	r30, r10
    43e6:	86 89       	ldd	r24, Z+22	; 0x16
    43e8:	81 fd       	sbrc	r24, 1
    43ea:	04 c0       	rjmp	.+8      	; 0x43f4 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    43ec:	c5 01       	movw	r24, r10
    43ee:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <vPortFree>
    43f2:	02 c0       	rjmp	.+4      	; 0x43f8 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    43f4:	8e 7f       	andi	r24, 0xFE	; 254
    43f6:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	a9 01       	movw	r20, r18
    43fe:	be 01       	movw	r22, r28
    4400:	6f 5f       	subi	r22, 0xFF	; 255
    4402:	7f 4f       	sbci	r23, 0xFF	; 255
    4404:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <xTimerQueue>
    4408:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <xTimerQueue+0x1>
    440c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xQueueReceive>
    4410:	81 11       	cpse	r24, r1
    4412:	70 cf       	rjmp	.-288    	; 0x42f4 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    4414:	28 96       	adiw	r28, 0x08	; 8
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	f8 94       	cli
    441a:	de bf       	out	0x3e, r29	; 62
    441c:	0f be       	out	0x3f, r0	; 63
    441e:	cd bf       	out	0x3d, r28	; 61
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	ff 90       	pop	r15
    442a:	ef 90       	pop	r14
    442c:	df 90       	pop	r13
    442e:	cf 90       	pop	r12
    4430:	bf 90       	pop	r11
    4432:	af 90       	pop	r10
    4434:	08 95       	ret

00004436 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    4436:	08 95       	ret

00004438 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4438:	84 b1       	in	r24, 0x04	; 4
    443a:	80 68       	ori	r24, 0x80	; 128
    443c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    443e:	85 b1       	in	r24, 0x05	; 5
    4440:	80 68       	ori	r24, 0x80	; 128
    4442:	85 b9       	out	0x05, r24	; 5
    4444:	08 95       	ret

00004446 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    4446:	83 b1       	in	r24, 0x03	; 3
    4448:	80 68       	ori	r24, 0x80	; 128
    444a:	83 b9       	out	0x03, r24	; 3
    444c:	08 95       	ret

0000444e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    444e:	f4 df       	rcall	.-24     	; 0x4438 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4450:	2f ef       	ldi	r18, 0xFF	; 255
    4452:	80 e7       	ldi	r24, 0x70	; 112
    4454:	92 e0       	ldi	r25, 0x02	; 2
    4456:	21 50       	subi	r18, 0x01	; 1
    4458:	80 40       	sbci	r24, 0x00	; 0
    445a:	90 40       	sbci	r25, 0x00	; 0
    445c:	e1 f7       	brne	.-8      	; 0x4456 <vApplicationMallocFailedHook+0x8>
    445e:	00 c0       	rjmp	.+0      	; 0x4460 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    4460:	00 00       	nop
    4462:	f1 df       	rcall	.-30     	; 0x4446 <prvBlinkMainLed>
    4464:	f5 cf       	rjmp	.-22     	; 0x4450 <vApplicationMallocFailedHook+0x2>

00004466 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    4466:	e8 df       	rcall	.-48     	; 0x4438 <prvSetMainLedOn>
    4468:	2f ef       	ldi	r18, 0xFF	; 255
    446a:	87 ea       	ldi	r24, 0xA7	; 167
    446c:	91 e6       	ldi	r25, 0x61	; 97
    446e:	21 50       	subi	r18, 0x01	; 1
    4470:	80 40       	sbci	r24, 0x00	; 0
    4472:	90 40       	sbci	r25, 0x00	; 0
    4474:	e1 f7       	brne	.-8      	; 0x446e <vApplicationStackOverflowHook+0x8>
    4476:	00 c0       	rjmp	.+0      	; 0x4478 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    4478:	00 00       	nop
    447a:	e5 df       	rcall	.-54     	; 0x4446 <prvBlinkMainLed>
    447c:	f5 cf       	rjmp	.-22     	; 0x4468 <vApplicationStackOverflowHook+0x2>

0000447e <createTasksForSensors>:

/*
* Function call to initialize all sensors
*/
void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    447e:	60 91 8b 14 	lds	r22, 0x148B	; 0x80148b <taskReadyBits>
    4482:	70 91 8c 14 	lds	r23, 0x148C	; 0x80148c <taskReadyBits+0x1>
    4486:	21 e0       	ldi	r18, 0x01	; 1
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	40 e0       	ldi	r20, 0x00	; 0
    448c:	50 e0       	ldi	r21, 0x00	; 0
    448e:	83 e0       	ldi	r24, 0x03	; 3
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	0e 94 6b 05 	call	0xad6	; 0xad6 <createTemp>
    4496:	90 93 c4 15 	sts	0x15C4, r25	; 0x8015c4 <temperature_sensor+0x1>
    449a:	80 93 c3 15 	sts	0x15C3, r24	; 0x8015c3 <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    449e:	60 91 8b 14 	lds	r22, 0x148B	; 0x80148b <taskReadyBits>
    44a2:	70 91 8c 14 	lds	r23, 0x148C	; 0x80148c <taskReadyBits+0x1>
    44a6:	22 e0       	ldi	r18, 0x02	; 2
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	40 e0       	ldi	r20, 0x00	; 0
    44ac:	50 e0       	ldi	r21, 0x00	; 0
    44ae:	83 e0       	ldi	r24, 0x03	; 3
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <createCO2>
    44b6:	90 93 c8 15 	sts	0x15C8, r25	; 0x8015c8 <co2_sensor+0x1>
    44ba:	80 93 c7 15 	sts	0x15C7, r24	; 0x8015c7 <co2_sensor>
	lighthandler = createLightSensor(3, taskReadyBits, BIT_LIGHT_READY);
    44be:	60 91 8b 14 	lds	r22, 0x148B	; 0x80148b <taskReadyBits>
    44c2:	70 91 8c 14 	lds	r23, 0x148C	; 0x80148c <taskReadyBits+0x1>
    44c6:	24 e0       	ldi	r18, 0x04	; 4
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e0       	ldi	r20, 0x00	; 0
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	83 e0       	ldi	r24, 0x03	; 3
    44d0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <createLightSensor>
    44d4:	90 93 c6 15 	sts	0x15C6, r25	; 0x8015c6 <lighthandler+0x1>
    44d8:	80 93 c5 15 	sts	0x15C5, r24	; 0x8015c5 <lighthandler>
    44dc:	08 95       	ret

000044de <create_tasks_and_semaphores>:
/*
* Function call that initializes all needed tasks for sensors and shared print, as well as LoRaWAN uplink
*/
void create_tasks_and_semaphores(void)
{
	create_shared_printf();
    44de:	0e 94 96 03 	call	0x72c	; 0x72c <create_shared_printf>
	print_sharedf("Board started.");
    44e2:	85 ed       	ldi	r24, 0xD5	; 213
    44e4:	94 e0       	ldi	r25, 0x04	; 4
    44e6:	9f 93       	push	r25
    44e8:	8f 93       	push	r24
    44ea:	0e 94 a4 03 	call	0x748	; 0x748 <print_sharedf>
	createTasksForSensors();
    44ee:	c7 df       	rcall	.-114    	; 0x447e <createTasksForSensors>
	create_semaphore_mutex_and_sensors(temperature_sensor, co2_sensor, lighthandler);
    44f0:	40 91 c5 15 	lds	r20, 0x15C5	; 0x8015c5 <lighthandler>
    44f4:	50 91 c6 15 	lds	r21, 0x15C6	; 0x8015c6 <lighthandler+0x1>
    44f8:	60 91 c7 15 	lds	r22, 0x15C7	; 0x8015c7 <co2_sensor>
    44fc:	70 91 c8 15 	lds	r23, 0x15C8	; 0x8015c8 <co2_sensor+0x1>
    4500:	80 91 c3 15 	lds	r24, 0x15C3	; 0x8015c3 <temperature_sensor>
    4504:	90 91 c4 15 	lds	r25, 0x15C4	; 0x8015c4 <temperature_sensor+0x1>
    4508:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <create_semaphore_mutex_and_sensors>
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
    450c:	60 91 89 14 	lds	r22, 0x1489	; 0x801489 <downLinkMessageBufferHandle>
    4510:	70 91 8a 14 	lds	r23, 0x148A	; 0x80148a <downLinkMessageBufferHandle+0x1>
    4514:	84 e0       	ldi	r24, 0x04	; 4
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	0e 94 46 02 	call	0x48c	; 0x48c <DownLinkHandler_Create>
	lora_handler_initialize(2);
    451c:	82 e0       	ldi	r24, 0x02	; 2
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	0e 94 61 07 	call	0xec2	; 0xec2 <lora_handler_initialize>
}
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	08 95       	ret

0000452a <initializeSystem>:
/*
* Function call that initializes the Event groups, the Arduino board, Downlink message buffer, tasks, and Sempahore mutex
*/
void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    452a:	0e 94 96 07 	call	0xf2c	; 0xf2c <xEventGroupCreate>
    452e:	90 93 8c 14 	sts	0x148C, r25	; 0x80148c <taskReadyBits+0x1>
    4532:	80 93 8b 14 	sts	0x148B, r24	; 0x80148b <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <stdio_initialise>
	
	rc_servo_initialise();
    453c:	91 d7       	rcall	.+3874   	; 0x5460 <rc_servo_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    453e:	41 e0       	ldi	r20, 0x01	; 1
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	70 e0       	ldi	r23, 0x00	; 0
    4544:	8c e2       	ldi	r24, 0x2C	; 44
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0e 94 a0 10 	call	0x2140	; 0x2140 <xStreamBufferGenericCreate>
    454c:	90 93 8a 14 	sts	0x148A, r25	; 0x80148a <downLinkMessageBufferHandle+0x1>
    4550:	80 93 89 14 	sts	0x1489, r24	; 0x801489 <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    4554:	bc 01       	movw	r22, r24
    4556:	81 e0       	ldi	r24, 0x01	; 1
	create_tasks_and_semaphores();
    4558:	6b d3       	rcall	.+1750   	; 0x4c30 <lora_driver_initialise>
    455a:	c1 cf       	rjmp	.-126    	; 0x44de <create_tasks_and_semaphores>
    455c:	08 95       	ret

0000455e <main>:
}

int main(void){
	initializeSystem();
    455e:	e5 df       	rcall	.-54     	; 0x452a <initializeSystem>
	vTaskStartScheduler();
    4560:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskStartScheduler>
    4564:	ff cf       	rjmp	.-2      	; 0x4564 <main+0x6>

00004566 <__cmpsf2>:
    4566:	34 d0       	rcall	.+104    	; 0x45d0 <__fp_cmp>
    4568:	08 f4       	brcc	.+2      	; 0x456c <__cmpsf2+0x6>
    456a:	81 e0       	ldi	r24, 0x01	; 1
    456c:	08 95       	ret

0000456e <__fixsfsi>:
    456e:	04 d0       	rcall	.+8      	; 0x4578 <__fixunssfsi>
    4570:	68 94       	set
    4572:	b1 11       	cpse	r27, r1
    4574:	74 c0       	rjmp	.+232    	; 0x465e <__fp_szero>
    4576:	08 95       	ret

00004578 <__fixunssfsi>:
    4578:	57 d0       	rcall	.+174    	; 0x4628 <__fp_splitA>
    457a:	88 f0       	brcs	.+34     	; 0x459e <__fixunssfsi+0x26>
    457c:	9f 57       	subi	r25, 0x7F	; 127
    457e:	90 f0       	brcs	.+36     	; 0x45a4 <__fixunssfsi+0x2c>
    4580:	b9 2f       	mov	r27, r25
    4582:	99 27       	eor	r25, r25
    4584:	b7 51       	subi	r27, 0x17	; 23
    4586:	a0 f0       	brcs	.+40     	; 0x45b0 <__fixunssfsi+0x38>
    4588:	d1 f0       	breq	.+52     	; 0x45be <__fixunssfsi+0x46>
    458a:	66 0f       	add	r22, r22
    458c:	77 1f       	adc	r23, r23
    458e:	88 1f       	adc	r24, r24
    4590:	99 1f       	adc	r25, r25
    4592:	1a f0       	brmi	.+6      	; 0x459a <__fixunssfsi+0x22>
    4594:	ba 95       	dec	r27
    4596:	c9 f7       	brne	.-14     	; 0x458a <__fixunssfsi+0x12>
    4598:	12 c0       	rjmp	.+36     	; 0x45be <__fixunssfsi+0x46>
    459a:	b1 30       	cpi	r27, 0x01	; 1
    459c:	81 f0       	breq	.+32     	; 0x45be <__fixunssfsi+0x46>
    459e:	5e d0       	rcall	.+188    	; 0x465c <__fp_zero>
    45a0:	b1 e0       	ldi	r27, 0x01	; 1
    45a2:	08 95       	ret
    45a4:	5b c0       	rjmp	.+182    	; 0x465c <__fp_zero>
    45a6:	67 2f       	mov	r22, r23
    45a8:	78 2f       	mov	r23, r24
    45aa:	88 27       	eor	r24, r24
    45ac:	b8 5f       	subi	r27, 0xF8	; 248
    45ae:	39 f0       	breq	.+14     	; 0x45be <__fixunssfsi+0x46>
    45b0:	b9 3f       	cpi	r27, 0xF9	; 249
    45b2:	cc f3       	brlt	.-14     	; 0x45a6 <__fixunssfsi+0x2e>
    45b4:	86 95       	lsr	r24
    45b6:	77 95       	ror	r23
    45b8:	67 95       	ror	r22
    45ba:	b3 95       	inc	r27
    45bc:	d9 f7       	brne	.-10     	; 0x45b4 <__fixunssfsi+0x3c>
    45be:	3e f4       	brtc	.+14     	; 0x45ce <__fixunssfsi+0x56>
    45c0:	90 95       	com	r25
    45c2:	80 95       	com	r24
    45c4:	70 95       	com	r23
    45c6:	61 95       	neg	r22
    45c8:	7f 4f       	sbci	r23, 0xFF	; 255
    45ca:	8f 4f       	sbci	r24, 0xFF	; 255
    45cc:	9f 4f       	sbci	r25, 0xFF	; 255
    45ce:	08 95       	ret

000045d0 <__fp_cmp>:
    45d0:	99 0f       	add	r25, r25
    45d2:	00 08       	sbc	r0, r0
    45d4:	55 0f       	add	r21, r21
    45d6:	aa 0b       	sbc	r26, r26
    45d8:	e0 e8       	ldi	r30, 0x80	; 128
    45da:	fe ef       	ldi	r31, 0xFE	; 254
    45dc:	16 16       	cp	r1, r22
    45de:	17 06       	cpc	r1, r23
    45e0:	e8 07       	cpc	r30, r24
    45e2:	f9 07       	cpc	r31, r25
    45e4:	c0 f0       	brcs	.+48     	; 0x4616 <__fp_cmp+0x46>
    45e6:	12 16       	cp	r1, r18
    45e8:	13 06       	cpc	r1, r19
    45ea:	e4 07       	cpc	r30, r20
    45ec:	f5 07       	cpc	r31, r21
    45ee:	98 f0       	brcs	.+38     	; 0x4616 <__fp_cmp+0x46>
    45f0:	62 1b       	sub	r22, r18
    45f2:	73 0b       	sbc	r23, r19
    45f4:	84 0b       	sbc	r24, r20
    45f6:	95 0b       	sbc	r25, r21
    45f8:	39 f4       	brne	.+14     	; 0x4608 <__fp_cmp+0x38>
    45fa:	0a 26       	eor	r0, r26
    45fc:	61 f0       	breq	.+24     	; 0x4616 <__fp_cmp+0x46>
    45fe:	23 2b       	or	r18, r19
    4600:	24 2b       	or	r18, r20
    4602:	25 2b       	or	r18, r21
    4604:	21 f4       	brne	.+8      	; 0x460e <__fp_cmp+0x3e>
    4606:	08 95       	ret
    4608:	0a 26       	eor	r0, r26
    460a:	09 f4       	brne	.+2      	; 0x460e <__fp_cmp+0x3e>
    460c:	a1 40       	sbci	r26, 0x01	; 1
    460e:	a6 95       	lsr	r26
    4610:	8f ef       	ldi	r24, 0xFF	; 255
    4612:	81 1d       	adc	r24, r1
    4614:	81 1d       	adc	r24, r1
    4616:	08 95       	ret

00004618 <__fp_split3>:
    4618:	57 fd       	sbrc	r21, 7
    461a:	90 58       	subi	r25, 0x80	; 128
    461c:	44 0f       	add	r20, r20
    461e:	55 1f       	adc	r21, r21
    4620:	59 f0       	breq	.+22     	; 0x4638 <__fp_splitA+0x10>
    4622:	5f 3f       	cpi	r21, 0xFF	; 255
    4624:	71 f0       	breq	.+28     	; 0x4642 <__fp_splitA+0x1a>
    4626:	47 95       	ror	r20

00004628 <__fp_splitA>:
    4628:	88 0f       	add	r24, r24
    462a:	97 fb       	bst	r25, 7
    462c:	99 1f       	adc	r25, r25
    462e:	61 f0       	breq	.+24     	; 0x4648 <__fp_splitA+0x20>
    4630:	9f 3f       	cpi	r25, 0xFF	; 255
    4632:	79 f0       	breq	.+30     	; 0x4652 <__fp_splitA+0x2a>
    4634:	87 95       	ror	r24
    4636:	08 95       	ret
    4638:	12 16       	cp	r1, r18
    463a:	13 06       	cpc	r1, r19
    463c:	14 06       	cpc	r1, r20
    463e:	55 1f       	adc	r21, r21
    4640:	f2 cf       	rjmp	.-28     	; 0x4626 <__fp_split3+0xe>
    4642:	46 95       	lsr	r20
    4644:	f1 df       	rcall	.-30     	; 0x4628 <__fp_splitA>
    4646:	08 c0       	rjmp	.+16     	; 0x4658 <__fp_splitA+0x30>
    4648:	16 16       	cp	r1, r22
    464a:	17 06       	cpc	r1, r23
    464c:	18 06       	cpc	r1, r24
    464e:	99 1f       	adc	r25, r25
    4650:	f1 cf       	rjmp	.-30     	; 0x4634 <__fp_splitA+0xc>
    4652:	86 95       	lsr	r24
    4654:	71 05       	cpc	r23, r1
    4656:	61 05       	cpc	r22, r1
    4658:	08 94       	sec
    465a:	08 95       	ret

0000465c <__fp_zero>:
    465c:	e8 94       	clt

0000465e <__fp_szero>:
    465e:	bb 27       	eor	r27, r27
    4660:	66 27       	eor	r22, r22
    4662:	77 27       	eor	r23, r23
    4664:	cb 01       	movw	r24, r22
    4666:	97 f9       	bld	r25, 7
    4668:	08 95       	ret

0000466a <modf>:
    466a:	fa 01       	movw	r30, r20
    466c:	dc 01       	movw	r26, r24
    466e:	aa 0f       	add	r26, r26
    4670:	bb 1f       	adc	r27, r27
    4672:	9b 01       	movw	r18, r22
    4674:	ac 01       	movw	r20, r24
    4676:	bf 57       	subi	r27, 0x7F	; 127
    4678:	28 f4       	brcc	.+10     	; 0x4684 <modf+0x1a>
    467a:	22 27       	eor	r18, r18
    467c:	33 27       	eor	r19, r19
    467e:	44 27       	eor	r20, r20
    4680:	50 78       	andi	r21, 0x80	; 128
    4682:	1f c0       	rjmp	.+62     	; 0x46c2 <modf+0x58>
    4684:	b7 51       	subi	r27, 0x17	; 23
    4686:	88 f4       	brcc	.+34     	; 0x46aa <modf+0x40>
    4688:	ab 2f       	mov	r26, r27
    468a:	00 24       	eor	r0, r0
    468c:	46 95       	lsr	r20
    468e:	37 95       	ror	r19
    4690:	27 95       	ror	r18
    4692:	01 1c       	adc	r0, r1
    4694:	a3 95       	inc	r26
    4696:	d2 f3       	brmi	.-12     	; 0x468c <modf+0x22>
    4698:	00 20       	and	r0, r0
    469a:	69 f0       	breq	.+26     	; 0x46b6 <modf+0x4c>
    469c:	22 0f       	add	r18, r18
    469e:	33 1f       	adc	r19, r19
    46a0:	44 1f       	adc	r20, r20
    46a2:	b3 95       	inc	r27
    46a4:	da f3       	brmi	.-10     	; 0x469c <modf+0x32>
    46a6:	0d d0       	rcall	.+26     	; 0x46c2 <modf+0x58>
    46a8:	76 c0       	rjmp	.+236    	; 0x4796 <__subsf3>
    46aa:	61 30       	cpi	r22, 0x01	; 1
    46ac:	71 05       	cpc	r23, r1
    46ae:	a0 e8       	ldi	r26, 0x80	; 128
    46b0:	8a 07       	cpc	r24, r26
    46b2:	b9 46       	sbci	r27, 0x69	; 105
    46b4:	30 f4       	brcc	.+12     	; 0x46c2 <modf+0x58>
    46b6:	9b 01       	movw	r18, r22
    46b8:	ac 01       	movw	r20, r24
    46ba:	66 27       	eor	r22, r22
    46bc:	77 27       	eor	r23, r23
    46be:	88 27       	eor	r24, r24
    46c0:	90 78       	andi	r25, 0x80	; 128
    46c2:	30 96       	adiw	r30, 0x00	; 0
    46c4:	21 f0       	breq	.+8      	; 0x46ce <modf+0x64>
    46c6:	20 83       	st	Z, r18
    46c8:	31 83       	std	Z+1, r19	; 0x01
    46ca:	42 83       	std	Z+2, r20	; 0x02
    46cc:	53 83       	std	Z+3, r21	; 0x03
    46ce:	08 95       	ret

000046d0 <__mulsf3>:
    46d0:	0b d0       	rcall	.+22     	; 0x46e8 <__mulsf3x>
    46d2:	dd c0       	rjmp	.+442    	; 0x488e <__fp_round>
    46d4:	ce d0       	rcall	.+412    	; 0x4872 <__fp_pscA>
    46d6:	28 f0       	brcs	.+10     	; 0x46e2 <__mulsf3+0x12>
    46d8:	d3 d0       	rcall	.+422    	; 0x4880 <__fp_pscB>
    46da:	18 f0       	brcs	.+6      	; 0x46e2 <__mulsf3+0x12>
    46dc:	95 23       	and	r25, r21
    46de:	09 f0       	breq	.+2      	; 0x46e2 <__mulsf3+0x12>
    46e0:	bf c0       	rjmp	.+382    	; 0x4860 <__fp_inf>
    46e2:	c4 c0       	rjmp	.+392    	; 0x486c <__fp_nan>
    46e4:	11 24       	eor	r1, r1
    46e6:	bb cf       	rjmp	.-138    	; 0x465e <__fp_szero>

000046e8 <__mulsf3x>:
    46e8:	97 df       	rcall	.-210    	; 0x4618 <__fp_split3>
    46ea:	a0 f3       	brcs	.-24     	; 0x46d4 <__mulsf3+0x4>

000046ec <__mulsf3_pse>:
    46ec:	95 9f       	mul	r25, r21
    46ee:	d1 f3       	breq	.-12     	; 0x46e4 <__mulsf3+0x14>
    46f0:	95 0f       	add	r25, r21
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	55 1f       	adc	r21, r21
    46f6:	62 9f       	mul	r22, r18
    46f8:	f0 01       	movw	r30, r0
    46fa:	72 9f       	mul	r23, r18
    46fc:	bb 27       	eor	r27, r27
    46fe:	f0 0d       	add	r31, r0
    4700:	b1 1d       	adc	r27, r1
    4702:	63 9f       	mul	r22, r19
    4704:	aa 27       	eor	r26, r26
    4706:	f0 0d       	add	r31, r0
    4708:	b1 1d       	adc	r27, r1
    470a:	aa 1f       	adc	r26, r26
    470c:	64 9f       	mul	r22, r20
    470e:	66 27       	eor	r22, r22
    4710:	b0 0d       	add	r27, r0
    4712:	a1 1d       	adc	r26, r1
    4714:	66 1f       	adc	r22, r22
    4716:	82 9f       	mul	r24, r18
    4718:	22 27       	eor	r18, r18
    471a:	b0 0d       	add	r27, r0
    471c:	a1 1d       	adc	r26, r1
    471e:	62 1f       	adc	r22, r18
    4720:	73 9f       	mul	r23, r19
    4722:	b0 0d       	add	r27, r0
    4724:	a1 1d       	adc	r26, r1
    4726:	62 1f       	adc	r22, r18
    4728:	83 9f       	mul	r24, r19
    472a:	a0 0d       	add	r26, r0
    472c:	61 1d       	adc	r22, r1
    472e:	22 1f       	adc	r18, r18
    4730:	74 9f       	mul	r23, r20
    4732:	33 27       	eor	r19, r19
    4734:	a0 0d       	add	r26, r0
    4736:	61 1d       	adc	r22, r1
    4738:	23 1f       	adc	r18, r19
    473a:	84 9f       	mul	r24, r20
    473c:	60 0d       	add	r22, r0
    473e:	21 1d       	adc	r18, r1
    4740:	82 2f       	mov	r24, r18
    4742:	76 2f       	mov	r23, r22
    4744:	6a 2f       	mov	r22, r26
    4746:	11 24       	eor	r1, r1
    4748:	9f 57       	subi	r25, 0x7F	; 127
    474a:	50 40       	sbci	r21, 0x00	; 0
    474c:	8a f0       	brmi	.+34     	; 0x4770 <__mulsf3_pse+0x84>
    474e:	e1 f0       	breq	.+56     	; 0x4788 <__mulsf3_pse+0x9c>
    4750:	88 23       	and	r24, r24
    4752:	4a f0       	brmi	.+18     	; 0x4766 <__mulsf3_pse+0x7a>
    4754:	ee 0f       	add	r30, r30
    4756:	ff 1f       	adc	r31, r31
    4758:	bb 1f       	adc	r27, r27
    475a:	66 1f       	adc	r22, r22
    475c:	77 1f       	adc	r23, r23
    475e:	88 1f       	adc	r24, r24
    4760:	91 50       	subi	r25, 0x01	; 1
    4762:	50 40       	sbci	r21, 0x00	; 0
    4764:	a9 f7       	brne	.-22     	; 0x4750 <__mulsf3_pse+0x64>
    4766:	9e 3f       	cpi	r25, 0xFE	; 254
    4768:	51 05       	cpc	r21, r1
    476a:	70 f0       	brcs	.+28     	; 0x4788 <__mulsf3_pse+0x9c>
    476c:	79 c0       	rjmp	.+242    	; 0x4860 <__fp_inf>
    476e:	77 cf       	rjmp	.-274    	; 0x465e <__fp_szero>
    4770:	5f 3f       	cpi	r21, 0xFF	; 255
    4772:	ec f3       	brlt	.-6      	; 0x476e <__mulsf3_pse+0x82>
    4774:	98 3e       	cpi	r25, 0xE8	; 232
    4776:	dc f3       	brlt	.-10     	; 0x476e <__mulsf3_pse+0x82>
    4778:	86 95       	lsr	r24
    477a:	77 95       	ror	r23
    477c:	67 95       	ror	r22
    477e:	b7 95       	ror	r27
    4780:	f7 95       	ror	r31
    4782:	e7 95       	ror	r30
    4784:	9f 5f       	subi	r25, 0xFF	; 255
    4786:	c1 f7       	brne	.-16     	; 0x4778 <__mulsf3_pse+0x8c>
    4788:	fe 2b       	or	r31, r30
    478a:	88 0f       	add	r24, r24
    478c:	91 1d       	adc	r25, r1
    478e:	96 95       	lsr	r25
    4790:	87 95       	ror	r24
    4792:	97 f9       	bld	r25, 7
    4794:	08 95       	ret

00004796 <__subsf3>:
    4796:	50 58       	subi	r21, 0x80	; 128

00004798 <__addsf3>:
    4798:	bb 27       	eor	r27, r27
    479a:	aa 27       	eor	r26, r26
    479c:	0e d0       	rcall	.+28     	; 0x47ba <__addsf3x>
    479e:	77 c0       	rjmp	.+238    	; 0x488e <__fp_round>
    47a0:	68 d0       	rcall	.+208    	; 0x4872 <__fp_pscA>
    47a2:	30 f0       	brcs	.+12     	; 0x47b0 <__addsf3+0x18>
    47a4:	6d d0       	rcall	.+218    	; 0x4880 <__fp_pscB>
    47a6:	20 f0       	brcs	.+8      	; 0x47b0 <__addsf3+0x18>
    47a8:	31 f4       	brne	.+12     	; 0x47b6 <__addsf3+0x1e>
    47aa:	9f 3f       	cpi	r25, 0xFF	; 255
    47ac:	11 f4       	brne	.+4      	; 0x47b2 <__addsf3+0x1a>
    47ae:	1e f4       	brtc	.+6      	; 0x47b6 <__addsf3+0x1e>
    47b0:	5d c0       	rjmp	.+186    	; 0x486c <__fp_nan>
    47b2:	0e f4       	brtc	.+2      	; 0x47b6 <__addsf3+0x1e>
    47b4:	e0 95       	com	r30
    47b6:	e7 fb       	bst	r30, 7
    47b8:	53 c0       	rjmp	.+166    	; 0x4860 <__fp_inf>

000047ba <__addsf3x>:
    47ba:	e9 2f       	mov	r30, r25
    47bc:	2d df       	rcall	.-422    	; 0x4618 <__fp_split3>
    47be:	80 f3       	brcs	.-32     	; 0x47a0 <__addsf3+0x8>
    47c0:	ba 17       	cp	r27, r26
    47c2:	62 07       	cpc	r22, r18
    47c4:	73 07       	cpc	r23, r19
    47c6:	84 07       	cpc	r24, r20
    47c8:	95 07       	cpc	r25, r21
    47ca:	18 f0       	brcs	.+6      	; 0x47d2 <__addsf3x+0x18>
    47cc:	71 f4       	brne	.+28     	; 0x47ea <__addsf3x+0x30>
    47ce:	9e f5       	brtc	.+102    	; 0x4836 <__addsf3x+0x7c>
    47d0:	45 cf       	rjmp	.-374    	; 0x465c <__fp_zero>
    47d2:	0e f4       	brtc	.+2      	; 0x47d6 <__addsf3x+0x1c>
    47d4:	e0 95       	com	r30
    47d6:	0b 2e       	mov	r0, r27
    47d8:	ba 2f       	mov	r27, r26
    47da:	a0 2d       	mov	r26, r0
    47dc:	0b 01       	movw	r0, r22
    47de:	b9 01       	movw	r22, r18
    47e0:	90 01       	movw	r18, r0
    47e2:	0c 01       	movw	r0, r24
    47e4:	ca 01       	movw	r24, r20
    47e6:	a0 01       	movw	r20, r0
    47e8:	11 24       	eor	r1, r1
    47ea:	ff 27       	eor	r31, r31
    47ec:	59 1b       	sub	r21, r25
    47ee:	99 f0       	breq	.+38     	; 0x4816 <__addsf3x+0x5c>
    47f0:	59 3f       	cpi	r21, 0xF9	; 249
    47f2:	50 f4       	brcc	.+20     	; 0x4808 <__addsf3x+0x4e>
    47f4:	50 3e       	cpi	r21, 0xE0	; 224
    47f6:	68 f1       	brcs	.+90     	; 0x4852 <__addsf3x+0x98>
    47f8:	1a 16       	cp	r1, r26
    47fa:	f0 40       	sbci	r31, 0x00	; 0
    47fc:	a2 2f       	mov	r26, r18
    47fe:	23 2f       	mov	r18, r19
    4800:	34 2f       	mov	r19, r20
    4802:	44 27       	eor	r20, r20
    4804:	58 5f       	subi	r21, 0xF8	; 248
    4806:	f3 cf       	rjmp	.-26     	; 0x47ee <__addsf3x+0x34>
    4808:	46 95       	lsr	r20
    480a:	37 95       	ror	r19
    480c:	27 95       	ror	r18
    480e:	a7 95       	ror	r26
    4810:	f0 40       	sbci	r31, 0x00	; 0
    4812:	53 95       	inc	r21
    4814:	c9 f7       	brne	.-14     	; 0x4808 <__addsf3x+0x4e>
    4816:	7e f4       	brtc	.+30     	; 0x4836 <__addsf3x+0x7c>
    4818:	1f 16       	cp	r1, r31
    481a:	ba 0b       	sbc	r27, r26
    481c:	62 0b       	sbc	r22, r18
    481e:	73 0b       	sbc	r23, r19
    4820:	84 0b       	sbc	r24, r20
    4822:	ba f0       	brmi	.+46     	; 0x4852 <__addsf3x+0x98>
    4824:	91 50       	subi	r25, 0x01	; 1
    4826:	a1 f0       	breq	.+40     	; 0x4850 <__addsf3x+0x96>
    4828:	ff 0f       	add	r31, r31
    482a:	bb 1f       	adc	r27, r27
    482c:	66 1f       	adc	r22, r22
    482e:	77 1f       	adc	r23, r23
    4830:	88 1f       	adc	r24, r24
    4832:	c2 f7       	brpl	.-16     	; 0x4824 <__addsf3x+0x6a>
    4834:	0e c0       	rjmp	.+28     	; 0x4852 <__addsf3x+0x98>
    4836:	ba 0f       	add	r27, r26
    4838:	62 1f       	adc	r22, r18
    483a:	73 1f       	adc	r23, r19
    483c:	84 1f       	adc	r24, r20
    483e:	48 f4       	brcc	.+18     	; 0x4852 <__addsf3x+0x98>
    4840:	87 95       	ror	r24
    4842:	77 95       	ror	r23
    4844:	67 95       	ror	r22
    4846:	b7 95       	ror	r27
    4848:	f7 95       	ror	r31
    484a:	9e 3f       	cpi	r25, 0xFE	; 254
    484c:	08 f0       	brcs	.+2      	; 0x4850 <__addsf3x+0x96>
    484e:	b3 cf       	rjmp	.-154    	; 0x47b6 <__addsf3+0x1e>
    4850:	93 95       	inc	r25
    4852:	88 0f       	add	r24, r24
    4854:	08 f0       	brcs	.+2      	; 0x4858 <__addsf3x+0x9e>
    4856:	99 27       	eor	r25, r25
    4858:	ee 0f       	add	r30, r30
    485a:	97 95       	ror	r25
    485c:	87 95       	ror	r24
    485e:	08 95       	ret

00004860 <__fp_inf>:
    4860:	97 f9       	bld	r25, 7
    4862:	9f 67       	ori	r25, 0x7F	; 127
    4864:	80 e8       	ldi	r24, 0x80	; 128
    4866:	70 e0       	ldi	r23, 0x00	; 0
    4868:	60 e0       	ldi	r22, 0x00	; 0
    486a:	08 95       	ret

0000486c <__fp_nan>:
    486c:	9f ef       	ldi	r25, 0xFF	; 255
    486e:	80 ec       	ldi	r24, 0xC0	; 192
    4870:	08 95       	ret

00004872 <__fp_pscA>:
    4872:	00 24       	eor	r0, r0
    4874:	0a 94       	dec	r0
    4876:	16 16       	cp	r1, r22
    4878:	17 06       	cpc	r1, r23
    487a:	18 06       	cpc	r1, r24
    487c:	09 06       	cpc	r0, r25
    487e:	08 95       	ret

00004880 <__fp_pscB>:
    4880:	00 24       	eor	r0, r0
    4882:	0a 94       	dec	r0
    4884:	12 16       	cp	r1, r18
    4886:	13 06       	cpc	r1, r19
    4888:	14 06       	cpc	r1, r20
    488a:	05 06       	cpc	r0, r21
    488c:	08 95       	ret

0000488e <__fp_round>:
    488e:	09 2e       	mov	r0, r25
    4890:	03 94       	inc	r0
    4892:	00 0c       	add	r0, r0
    4894:	11 f4       	brne	.+4      	; 0x489a <__fp_round+0xc>
    4896:	88 23       	and	r24, r24
    4898:	52 f0       	brmi	.+20     	; 0x48ae <__fp_round+0x20>
    489a:	bb 0f       	add	r27, r27
    489c:	40 f4       	brcc	.+16     	; 0x48ae <__fp_round+0x20>
    489e:	bf 2b       	or	r27, r31
    48a0:	11 f4       	brne	.+4      	; 0x48a6 <__fp_round+0x18>
    48a2:	60 ff       	sbrs	r22, 0
    48a4:	04 c0       	rjmp	.+8      	; 0x48ae <__fp_round+0x20>
    48a6:	6f 5f       	subi	r22, 0xFF	; 255
    48a8:	7f 4f       	sbci	r23, 0xFF	; 255
    48aa:	8f 4f       	sbci	r24, 0xFF	; 255
    48ac:	9f 4f       	sbci	r25, 0xFF	; 255
    48ae:	08 95       	ret

000048b0 <_hihTwiCallback>:
    48b0:	65 30       	cpi	r22, 0x05	; 5
    48b2:	f1 f4       	brne	.+60     	; 0x48f0 <_hihTwiCallback+0x40>
    48b4:	fa 01       	movw	r30, r20
    48b6:	80 81       	ld	r24, Z
    48b8:	8f 73       	andi	r24, 0x3F	; 63
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	98 2f       	mov	r25, r24
    48be:	88 27       	eor	r24, r24
    48c0:	21 81       	ldd	r18, Z+1	; 0x01
    48c2:	82 2b       	or	r24, r18
    48c4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    48c8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	f0 e4       	ldi	r31, 0x40	; 64
    48d0:	8f 9f       	mul	r24, r31
    48d2:	c0 01       	movw	r24, r0
    48d4:	11 24       	eor	r1, r1
    48d6:	fa 01       	movw	r30, r20
    48d8:	23 81       	ldd	r18, Z+3	; 0x03
    48da:	26 95       	lsr	r18
    48dc:	26 95       	lsr	r18
    48de:	82 2b       	or	r24, r18
    48e0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    48e4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	80 93 8d 14 	sts	0x148D, r24	; 0x80148d <_measuringIsReady>
    48ee:	08 95       	ret
    48f0:	64 30       	cpi	r22, 0x04	; 4
    48f2:	51 f0       	breq	.+20     	; 0x4908 <_hihTwiCallback+0x58>
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	90 e4       	ldi	r25, 0x40	; 64
    48f8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    48fc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4900:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4904:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4908:	08 95       	ret

0000490a <hih8120_initialise>:
    490a:	0f 93       	push	r16
    490c:	1f 93       	push	r17
    490e:	08 e5       	ldi	r16, 0x58	; 88
    4910:	14 e2       	ldi	r17, 0x24	; 36
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	34 e2       	ldi	r19, 0x24	; 36
    4916:	44 ef       	ldi	r20, 0xF4	; 244
    4918:	50 e0       	ldi	r21, 0x00	; 0
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	87 e2       	ldi	r24, 0x27	; 39
    491e:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <twiCreate>
    4922:	90 93 8f 14 	sts	0x148F, r25	; 0x80148f <_hih8120Handler+0x1>
    4926:	80 93 8e 14 	sts	0x148E, r24	; 0x80148e <_hih8120Handler>
    492a:	21 e0       	ldi	r18, 0x01	; 1
    492c:	89 2b       	or	r24, r25
    492e:	09 f0       	breq	.+2      	; 0x4932 <hih8120_initialise+0x28>
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	82 2f       	mov	r24, r18
    4934:	1f 91       	pop	r17
    4936:	0f 91       	pop	r16
    4938:	08 95       	ret

0000493a <hih8120_wakeup>:
    493a:	80 91 8e 14 	lds	r24, 0x148E	; 0x80148e <_hih8120Handler>
    493e:	90 91 8f 14 	lds	r25, 0x148F	; 0x80148f <_hih8120Handler+0x1>
    4942:	00 97       	sbiw	r24, 0x00	; 0
    4944:	59 f0       	breq	.+22     	; 0x495c <hih8120_wakeup+0x22>
    4946:	40 e0       	ldi	r20, 0x00	; 0
    4948:	60 e0       	ldi	r22, 0x00	; 0
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	0e 94 11 30 	call	0x6022	; 0x6022 <twiTransmit>
    4950:	84 30       	cpi	r24, 0x04	; 4
    4952:	31 f4       	brne	.+12     	; 0x4960 <hih8120_wakeup+0x26>
    4954:	10 92 8d 14 	sts	0x148D, r1	; 0x80148d <_measuringIsReady>
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	08 95       	ret
    495c:	82 e0       	ldi	r24, 0x02	; 2
    495e:	08 95       	ret
    4960:	83 e0       	ldi	r24, 0x03	; 3
    4962:	08 95       	ret

00004964 <hih8120_measure>:
    4964:	80 91 8e 14 	lds	r24, 0x148E	; 0x80148e <_hih8120Handler>
    4968:	90 91 8f 14 	lds	r25, 0x148F	; 0x80148f <_hih8120Handler+0x1>
    496c:	00 97       	sbiw	r24, 0x00	; 0
    496e:	39 f0       	breq	.+14     	; 0x497e <hih8120_measure+0x1a>
    4970:	64 e0       	ldi	r22, 0x04	; 4
    4972:	0e 94 5d 30 	call	0x60ba	; 0x60ba <twiReceive>
    4976:	85 30       	cpi	r24, 0x05	; 5
    4978:	21 f0       	breq	.+8      	; 0x4982 <hih8120_measure+0x1e>
    497a:	83 e0       	ldi	r24, 0x03	; 3
    497c:	08 95       	ret
    497e:	82 e0       	ldi	r24, 0x02	; 2
    4980:	08 95       	ret
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	08 95       	ret

00004986 <hih8120_getHumidity>:
    4986:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    498a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__floatunsisf>
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	48 ec       	ldi	r20, 0xC8	; 200
    499c:	52 e4       	ldi	r21, 0x42	; 66
    499e:	98 de       	rcall	.-720    	; 0x46d0 <__mulsf3>
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	38 ef       	ldi	r19, 0xF8	; 248
    49a4:	4f e7       	ldi	r20, 0x7F	; 127
    49a6:	56 e4       	ldi	r21, 0x46	; 70
    49a8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__divsf3>
    49ac:	08 95       	ret

000049ae <hih8120_getHumidityPercent_x10>:
    49ae:	eb df       	rcall	.-42     	; 0x4986 <hih8120_getHumidity>
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	40 e2       	ldi	r20, 0x20	; 32
    49b6:	51 e4       	ldi	r21, 0x41	; 65
    49b8:	8b de       	rcall	.-746    	; 0x46d0 <__mulsf3>
    49ba:	de dd       	rcall	.-1092   	; 0x4578 <__fixunssfsi>
    49bc:	cb 01       	movw	r24, r22
    49be:	08 95       	ret

000049c0 <hih8120_getTemperature>:
    49c0:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    49c4:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__floatunsisf>
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	45 e2       	ldi	r20, 0x25	; 37
    49d6:	53 e4       	ldi	r21, 0x43	; 67
    49d8:	7b de       	rcall	.-778    	; 0x46d0 <__mulsf3>
    49da:	20 e0       	ldi	r18, 0x00	; 0
    49dc:	38 ef       	ldi	r19, 0xF8	; 248
    49de:	4f e7       	ldi	r20, 0x7F	; 127
    49e0:	56 e4       	ldi	r21, 0x46	; 70
    49e2:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <__divsf3>
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e2       	ldi	r20, 0x20	; 32
    49ec:	52 e4       	ldi	r21, 0x42	; 66
    49ee:	d3 ce       	rjmp	.-602    	; 0x4796 <__subsf3>
    49f0:	08 95       	ret

000049f2 <_serialCallBack>:
    49f2:	0f 93       	push	r16
    49f4:	1f 93       	push	r17
    49f6:	cf 93       	push	r28
    49f8:	df 93       	push	r29
    49fa:	1f 92       	push	r1
    49fc:	1f 92       	push	r1
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
    4a02:	8c 01       	movw	r16, r24
    4a04:	19 82       	std	Y+1, r1	; 0x01
    4a06:	2d c0       	rjmp	.+90     	; 0x4a62 <_serialCallBack+0x70>
    4a08:	e0 91 c7 14 	lds	r30, 0x14C7	; 0x8014c7 <rec_buf_inp.2878>
    4a0c:	ec 32       	cpi	r30, 0x2C	; 44
    4a0e:	50 f4       	brcc	.+20     	; 0x4a24 <_serialCallBack+0x32>
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	8e 0f       	add	r24, r30
    4a14:	80 93 c7 14 	sts	0x14C7, r24	; 0x8014c7 <rec_buf_inp.2878>
    4a18:	f0 e0       	ldi	r31, 0x00	; 0
    4a1a:	e7 50       	subi	r30, 0x07	; 7
    4a1c:	fb 4e       	sbci	r31, 0xEB	; 235
    4a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a20:	80 83       	st	Z, r24
    4a22:	02 c0       	rjmp	.+4      	; 0x4a28 <_serialCallBack+0x36>
    4a24:	10 92 c7 14 	sts	0x14C7, r1	; 0x8014c7 <rec_buf_inp.2878>
    4a28:	8a 81       	ldd	r24, Y+2	; 0x02
    4a2a:	8a 30       	cpi	r24, 0x0A	; 10
    4a2c:	d1 f4       	brne	.+52     	; 0x4a62 <_serialCallBack+0x70>
    4a2e:	40 91 c7 14 	lds	r20, 0x14C7	; 0x8014c7 <rec_buf_inp.2878>
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	fa 01       	movw	r30, r20
    4a36:	e9 50       	subi	r30, 0x09	; 9
    4a38:	fb 4e       	sbci	r31, 0xEB	; 235
    4a3a:	10 82       	st	Z, r1
    4a3c:	41 50       	subi	r20, 0x01	; 1
    4a3e:	51 09       	sbc	r21, r1
    4a40:	9e 01       	movw	r18, r28
    4a42:	2f 5f       	subi	r18, 0xFF	; 255
    4a44:	3f 4f       	sbci	r19, 0xFF	; 255
    4a46:	69 ef       	ldi	r22, 0xF9	; 249
    4a48:	74 e1       	ldi	r23, 0x14	; 20
    4a4a:	80 91 ca 14 	lds	r24, 0x14CA	; 0x8014ca <_serialReplyBufferHandle>
    4a4e:	90 91 cb 14 	lds	r25, 0x14CB	; 0x8014cb <_serialReplyBufferHandle+0x1>
    4a52:	0e 94 c7 11 	call	0x238e	; 0x238e <xStreamBufferSendFromISR>
    4a56:	89 81       	ldd	r24, Y+1	; 0x01
    4a58:	81 11       	cpse	r24, r1
    4a5a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vPortYield>
    4a5e:	10 92 c7 14 	sts	0x14C7, r1	; 0x8014c7 <rec_buf_inp.2878>
    4a62:	be 01       	movw	r22, r28
    4a64:	6e 5f       	subi	r22, 0xFE	; 254
    4a66:	7f 4f       	sbci	r23, 0xFF	; 255
    4a68:	c8 01       	movw	r24, r16
    4a6a:	3a d6       	rcall	.+3188   	; 0x56e0 <serial_getByte>
    4a6c:	88 23       	and	r24, r24
    4a6e:	61 f2       	breq	.-104    	; 0x4a08 <_serialCallBack+0x16>
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	df 91       	pop	r29
    4a76:	cf 91       	pop	r28
    4a78:	1f 91       	pop	r17
    4a7a:	0f 91       	pop	r16
    4a7c:	08 95       	ret

00004a7e <_uploadMessage>:
    4a7e:	0f 93       	push	r16
    4a80:	1f 93       	push	r17
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	8c 01       	movw	r16, r24
    4a88:	eb 01       	movw	r28, r22
    4a8a:	80 91 ca 14 	lds	r24, 0x14CA	; 0x8014ca <_serialReplyBufferHandle>
    4a8e:	90 91 cb 14 	lds	r25, 0x14CB	; 0x8014cb <_serialReplyBufferHandle+0x1>
    4a92:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <xStreamBufferReset>
    4a96:	b8 01       	movw	r22, r16
    4a98:	80 e9       	ldi	r24, 0x90	; 144
    4a9a:	94 e1       	ldi	r25, 0x14	; 20
    4a9c:	0e 94 40 38 	call	0x7080	; 0x7080 <strcpy>
    4aa0:	20 97       	sbiw	r28, 0x00	; 0
    4aa2:	79 f0       	breq	.+30     	; 0x4ac2 <_uploadMessage+0x44>
    4aa4:	e0 e9       	ldi	r30, 0x90	; 144
    4aa6:	f4 e1       	ldi	r31, 0x14	; 20
    4aa8:	01 90       	ld	r0, Z+
    4aaa:	00 20       	and	r0, r0
    4aac:	e9 f7       	brne	.-6      	; 0x4aa8 <_uploadMessage+0x2a>
    4aae:	31 97       	sbiw	r30, 0x01	; 1
    4ab0:	80 e2       	ldi	r24, 0x20	; 32
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	91 83       	std	Z+1, r25	; 0x01
    4ab6:	80 83       	st	Z, r24
    4ab8:	be 01       	movw	r22, r28
    4aba:	80 e9       	ldi	r24, 0x90	; 144
    4abc:	94 e1       	ldi	r25, 0x14	; 20
    4abe:	0e 94 35 38 	call	0x706a	; 0x706a <strcat>
    4ac2:	e0 e9       	ldi	r30, 0x90	; 144
    4ac4:	f4 e1       	ldi	r31, 0x14	; 20
    4ac6:	df 01       	movw	r26, r30
    4ac8:	0d 90       	ld	r0, X+
    4aca:	00 20       	and	r0, r0
    4acc:	e9 f7       	brne	.-6      	; 0x4ac8 <_uploadMessage+0x4a>
    4ace:	11 97       	sbiw	r26, 0x01	; 1
    4ad0:	8d e0       	ldi	r24, 0x0D	; 13
    4ad2:	9a e0       	ldi	r25, 0x0A	; 10
    4ad4:	11 96       	adiw	r26, 0x01	; 1
    4ad6:	9c 93       	st	X, r25
    4ad8:	8e 93       	st	-X, r24
    4ada:	12 96       	adiw	r26, 0x02	; 2
    4adc:	1c 92       	st	X, r1
    4ade:	01 90       	ld	r0, Z+
    4ae0:	00 20       	and	r0, r0
    4ae2:	e9 f7       	brne	.-6      	; 0x4ade <_uploadMessage+0x60>
    4ae4:	31 97       	sbiw	r30, 0x01	; 1
    4ae6:	e0 59       	subi	r30, 0x90	; 144
    4ae8:	f4 41       	sbci	r31, 0x14	; 20
    4aea:	ae 2f       	mov	r26, r30
    4aec:	80 e9       	ldi	r24, 0x90	; 144
    4aee:	94 e1       	ldi	r25, 0x14	; 20
    4af0:	ac 01       	movw	r20, r24
    4af2:	6a 2f       	mov	r22, r26
    4af4:	80 91 cc 14 	lds	r24, 0x14CC	; 0x8014cc <_rn2483_serial>
    4af8:	90 91 cd 14 	lds	r25, 0x14CD	; 0x8014cd <_rn2483_serial+0x1>
    4afc:	9c d5       	rcall	.+2872   	; 0x5636 <serial_sendBytes>
    4afe:	81 11       	cpse	r24, r1
    4b00:	11 c0       	rjmp	.+34     	; 0x4b24 <_uploadMessage+0xa6>
    4b02:	08 e2       	ldi	r16, 0x28	; 40
    4b04:	15 e0       	ldi	r17, 0x05	; 5
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	4d e2       	ldi	r20, 0x2D	; 45
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	63 e5       	ldi	r22, 0x53	; 83
    4b10:	75 e1       	ldi	r23, 0x15	; 21
    4b12:	80 91 ca 14 	lds	r24, 0x14CA	; 0x8014ca <_serialReplyBufferHandle>
    4b16:	90 91 cb 14 	lds	r25, 0x14CB	; 0x8014cb <_serialReplyBufferHandle+0x1>
    4b1a:	0e 94 0b 12 	call	0x2416	; 0x2416 <xStreamBufferReceive>
    4b1e:	83 e5       	ldi	r24, 0x53	; 83
    4b20:	95 e1       	ldi	r25, 0x15	; 21
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <_uploadMessage+0xaa>
    4b24:	80 e0       	ldi	r24, 0x00	; 0
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	df 91       	pop	r29
    4b2a:	cf 91       	pop	r28
    4b2c:	1f 91       	pop	r17
    4b2e:	0f 91       	pop	r16
    4b30:	08 95       	ret

00004b32 <_reply2ReturnCode>:
    4b32:	2f 92       	push	r2
    4b34:	3f 92       	push	r3
    4b36:	4f 92       	push	r4
    4b38:	5f 92       	push	r5
    4b3a:	6f 92       	push	r6
    4b3c:	7f 92       	push	r7
    4b3e:	8f 92       	push	r8
    4b40:	9f 92       	push	r9
    4b42:	af 92       	push	r10
    4b44:	bf 92       	push	r11
    4b46:	cf 92       	push	r12
    4b48:	df 92       	push	r13
    4b4a:	ef 92       	push	r14
    4b4c:	ff 92       	push	r15
    4b4e:	0f 93       	push	r16
    4b50:	1f 93       	push	r17
    4b52:	cf 93       	push	r28
    4b54:	df 93       	push	r29
    4b56:	5c 01       	movw	r10, r24
    4b58:	fc 01       	movw	r30, r24
    4b5a:	01 90       	ld	r0, Z+
    4b5c:	00 20       	and	r0, r0
    4b5e:	e9 f7       	brne	.-6      	; 0x4b5a <_reply2ReturnCode+0x28>
    4b60:	31 97       	sbiw	r30, 0x01	; 1
    4b62:	6f 01       	movw	r12, r30
    4b64:	c8 1a       	sub	r12, r24
    4b66:	d9 0a       	sbc	r13, r25
    4b68:	5c 2c       	mov	r5, r12
    4b6a:	0f 2e       	mov	r0, r31
    4b6c:	fd e7       	ldi	r31, 0x7D	; 125
    4b6e:	8f 2e       	mov	r8, r31
    4b70:	f7 e0       	ldi	r31, 0x07	; 7
    4b72:	9f 2e       	mov	r9, r31
    4b74:	f0 2d       	mov	r31, r0
    4b76:	e1 2c       	mov	r14, r1
    4b78:	f1 2c       	mov	r15, r1
    4b7a:	4c 2c       	mov	r4, r12
    4b7c:	37 01       	movw	r6, r14
    4b7e:	f4 01       	movw	r30, r8
    4b80:	01 81       	ldd	r16, Z+1	; 0x01
    4b82:	12 81       	ldd	r17, Z+2	; 0x02
    4b84:	e8 01       	movw	r28, r16
    4b86:	09 90       	ld	r0, Y+
    4b88:	00 20       	and	r0, r0
    4b8a:	e9 f7       	brne	.-6      	; 0x4b86 <_reply2ReturnCode+0x54>
    4b8c:	21 97       	sbiw	r28, 0x01	; 1
    4b8e:	c0 1b       	sub	r28, r16
    4b90:	d1 0b       	sbc	r29, r17
    4b92:	3c 2e       	mov	r3, r28
    4b94:	f9 e0       	ldi	r31, 0x09	; 9
    4b96:	cf 16       	cp	r12, r31
    4b98:	d1 04       	cpc	r13, r1
    4b9a:	58 f0       	brcs	.+22     	; 0x4bb2 <_reply2ReturnCode+0x80>
    4b9c:	f4 01       	movw	r30, r8
    4b9e:	20 80       	ld	r2, Z
    4ba0:	fe e0       	ldi	r31, 0x0E	; 14
    4ba2:	2f 12       	cpse	r2, r31
    4ba4:	06 c0       	rjmp	.+12     	; 0x4bb2 <_reply2ReturnCode+0x80>
    4ba6:	b8 01       	movw	r22, r16
    4ba8:	c5 01       	movw	r24, r10
    4baa:	0e 94 10 38 	call	0x7020	; 0x7020 <strcasestr>
    4bae:	89 2b       	or	r24, r25
    4bb0:	09 f5       	brne	.+66     	; 0x4bf4 <_reply2ReturnCode+0xc2>
    4bb2:	44 2d       	mov	r20, r4
    4bb4:	35 14       	cp	r3, r5
    4bb6:	08 f4       	brcc	.+2      	; 0x4bba <_reply2ReturnCode+0x88>
    4bb8:	4c 2f       	mov	r20, r28
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	b8 01       	movw	r22, r16
    4bbe:	c5 01       	movw	r24, r10
    4bc0:	0e 94 47 38 	call	0x708e	; 0x708e <strncasecmp>
    4bc4:	89 2b       	or	r24, r25
    4bc6:	49 f4       	brne	.+18     	; 0x4bda <_reply2ReturnCode+0xa8>
    4bc8:	f3 01       	movw	r30, r6
    4bca:	ee 0f       	add	r30, r30
    4bcc:	ff 1f       	adc	r31, r31
    4bce:	e6 0d       	add	r30, r6
    4bd0:	f7 1d       	adc	r31, r7
    4bd2:	e3 58       	subi	r30, 0x83	; 131
    4bd4:	f8 4f       	sbci	r31, 0xF8	; 248
    4bd6:	20 80       	ld	r2, Z
    4bd8:	0d c0       	rjmp	.+26     	; 0x4bf4 <_reply2ReturnCode+0xc2>
    4bda:	8f ef       	ldi	r24, 0xFF	; 255
    4bdc:	e8 1a       	sub	r14, r24
    4bde:	f8 0a       	sbc	r15, r24
    4be0:	e3 e0       	ldi	r30, 0x03	; 3
    4be2:	8e 0e       	add	r8, r30
    4be4:	91 1c       	adc	r9, r1
    4be6:	f1 e1       	ldi	r31, 0x11	; 17
    4be8:	ef 16       	cp	r14, r31
    4bea:	f1 04       	cpc	r15, r1
    4bec:	39 f6       	brne	.-114    	; 0x4b7c <_reply2ReturnCode+0x4a>
    4bee:	68 94       	set
    4bf0:	22 24       	eor	r2, r2
    4bf2:	24 f8       	bld	r2, 4
    4bf4:	82 2d       	mov	r24, r2
    4bf6:	df 91       	pop	r29
    4bf8:	cf 91       	pop	r28
    4bfa:	1f 91       	pop	r17
    4bfc:	0f 91       	pop	r16
    4bfe:	ff 90       	pop	r15
    4c00:	ef 90       	pop	r14
    4c02:	df 90       	pop	r13
    4c04:	cf 90       	pop	r12
    4c06:	bf 90       	pop	r11
    4c08:	af 90       	pop	r10
    4c0a:	9f 90       	pop	r9
    4c0c:	8f 90       	pop	r8
    4c0e:	7f 90       	pop	r7
    4c10:	6f 90       	pop	r6
    4c12:	5f 90       	pop	r5
    4c14:	4f 90       	pop	r4
    4c16:	3f 90       	pop	r3
    4c18:	2f 90       	pop	r2
    4c1a:	08 95       	ret

00004c1c <_uploadMessageRc>:
    4c1c:	30 df       	rcall	.-416    	; 0x4a7e <_uploadMessage>
    4c1e:	89 cf       	rjmp	.-238    	; 0x4b32 <_reply2ReturnCode>
    4c20:	08 95       	ret

00004c22 <lora_driver_flushBuffers>:
    4c22:	80 91 ca 14 	lds	r24, 0x14CA	; 0x8014ca <_serialReplyBufferHandle>
    4c26:	90 91 cb 14 	lds	r25, 0x14CB	; 0x8014cb <_serialReplyBufferHandle+0x1>
    4c2a:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <xStreamBufferReset>
    4c2e:	08 95       	ret

00004c30 <lora_driver_initialise>:
    4c30:	8f 92       	push	r8
    4c32:	9f 92       	push	r9
    4c34:	af 92       	push	r10
    4c36:	cf 92       	push	r12
    4c38:	ef 92       	push	r14
    4c3a:	0f 93       	push	r16
    4c3c:	1f 93       	push	r17
    4c3e:	cf 93       	push	r28
    4c40:	c8 2f       	mov	r28, r24
    4c42:	8b 01       	movw	r16, r22
    4c44:	41 e0       	ldi	r20, 0x01	; 1
    4c46:	60 e0       	ldi	r22, 0x00	; 0
    4c48:	70 e0       	ldi	r23, 0x00	; 0
    4c4a:	88 ec       	ldi	r24, 0xC8	; 200
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	0e 94 a0 10 	call	0x2140	; 0x2140 <xStreamBufferGenericCreate>
    4c52:	90 93 cb 14 	sts	0x14CB, r25	; 0x8014cb <_serialReplyBufferHandle+0x1>
    4c56:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_serialReplyBufferHandle>
    4c5a:	10 93 c9 14 	sts	0x14C9, r17	; 0x8014c9 <_downlinkMessageBuffer+0x1>
    4c5e:	00 93 c8 14 	sts	0x14C8, r16	; 0x8014c8 <_downlinkMessageBuffer>
    4c62:	0f 2e       	mov	r0, r31
    4c64:	f9 ef       	ldi	r31, 0xF9	; 249
    4c66:	8f 2e       	mov	r8, r31
    4c68:	f4 e2       	ldi	r31, 0x24	; 36
    4c6a:	9f 2e       	mov	r9, r31
    4c6c:	f0 2d       	mov	r31, r0
    4c6e:	68 94       	set
    4c70:	aa 24       	eor	r10, r10
    4c72:	a6 f8       	bld	r10, 6
    4c74:	68 94       	set
    4c76:	cc 24       	eor	r12, r12
    4c78:	c6 f8       	bld	r12, 6
    4c7a:	e1 2c       	mov	r14, r1
    4c7c:	00 e0       	ldi	r16, 0x00	; 0
    4c7e:	23 e0       	ldi	r18, 0x03	; 3
    4c80:	40 e0       	ldi	r20, 0x00	; 0
    4c82:	51 ee       	ldi	r21, 0xE1	; 225
    4c84:	60 e0       	ldi	r22, 0x00	; 0
    4c86:	70 e0       	ldi	r23, 0x00	; 0
    4c88:	8c 2f       	mov	r24, r28
    4c8a:	06 d4       	rcall	.+2060   	; 0x5498 <serial_create>
    4c8c:	90 93 cd 14 	sts	0x14CD, r25	; 0x8014cd <_rn2483_serial+0x1>
    4c90:	80 93 cc 14 	sts	0x14CC, r24	; 0x8014cc <_rn2483_serial>
    4c94:	e7 e0       	ldi	r30, 0x07	; 7
    4c96:	f1 e0       	ldi	r31, 0x01	; 1
    4c98:	80 81       	ld	r24, Z
    4c9a:	80 61       	ori	r24, 0x10	; 16
    4c9c:	80 83       	st	Z, r24
    4c9e:	cf 91       	pop	r28
    4ca0:	1f 91       	pop	r17
    4ca2:	0f 91       	pop	r16
    4ca4:	ef 90       	pop	r14
    4ca6:	cf 90       	pop	r12
    4ca8:	af 90       	pop	r10
    4caa:	9f 90       	pop	r9
    4cac:	8f 90       	pop	r8
    4cae:	08 95       	ret

00004cb0 <lora_driver_resetRn2483>:
    4cb0:	88 23       	and	r24, r24
    4cb2:	31 f0       	breq	.+12     	; 0x4cc0 <lora_driver_resetRn2483+0x10>
    4cb4:	e8 e0       	ldi	r30, 0x08	; 8
    4cb6:	f1 e0       	ldi	r31, 0x01	; 1
    4cb8:	80 81       	ld	r24, Z
    4cba:	8f 7e       	andi	r24, 0xEF	; 239
    4cbc:	80 83       	st	Z, r24
    4cbe:	08 95       	ret
    4cc0:	e8 e0       	ldi	r30, 0x08	; 8
    4cc2:	f1 e0       	ldi	r31, 0x01	; 1
    4cc4:	80 81       	ld	r24, Z
    4cc6:	80 61       	ori	r24, 0x10	; 16
    4cc8:	80 83       	st	Z, r24
    4cca:	08 95       	ret

00004ccc <lora_driver_rn2483FactoryReset>:
    4ccc:	60 e0       	ldi	r22, 0x00	; 0
    4cce:	70 e0       	ldi	r23, 0x00	; 0
    4cd0:	83 e0       	ldi	r24, 0x03	; 3
    4cd2:	95 e0       	ldi	r25, 0x05	; 5
    4cd4:	d4 de       	rcall	.-600    	; 0x4a7e <_uploadMessage>
    4cd6:	e3 e5       	ldi	r30, 0x53	; 83
    4cd8:	f5 e1       	ldi	r31, 0x15	; 21
    4cda:	01 90       	ld	r0, Z+
    4cdc:	00 20       	and	r0, r0
    4cde:	e9 f7       	brne	.-6      	; 0x4cda <lora_driver_rn2483FactoryReset+0xe>
    4ce0:	31 97       	sbiw	r30, 0x01	; 1
    4ce2:	e3 55       	subi	r30, 0x53	; 83
    4ce4:	f5 41       	sbci	r31, 0x15	; 21
    4ce6:	81 e0       	ldi	r24, 0x01	; 1
    4ce8:	75 97       	sbiw	r30, 0x15	; 21
    4cea:	08 f0       	brcs	.+2      	; 0x4cee <lora_driver_rn2483FactoryReset+0x22>
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	08 95       	ret

00004cf0 <lora_driver_getRn2483Hweui>:
    4cf0:	cf 93       	push	r28
    4cf2:	df 93       	push	r29
    4cf4:	ec 01       	movw	r28, r24
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
    4cfa:	84 e1       	ldi	r24, 0x14	; 20
    4cfc:	95 e0       	ldi	r25, 0x05	; 5
    4cfe:	bf de       	rcall	.-642    	; 0x4a7e <_uploadMessage>
    4d00:	e3 e5       	ldi	r30, 0x53	; 83
    4d02:	f5 e1       	ldi	r31, 0x15	; 21
    4d04:	01 90       	ld	r0, Z+
    4d06:	00 20       	and	r0, r0
    4d08:	e9 f7       	brne	.-6      	; 0x4d04 <lora_driver_getRn2483Hweui+0x14>
    4d0a:	e4 56       	subi	r30, 0x64	; 100
    4d0c:	f5 41       	sbci	r31, 0x15	; 21
    4d0e:	39 f4       	brne	.+14     	; 0x4d1e <lora_driver_getRn2483Hweui+0x2e>
    4d10:	63 e5       	ldi	r22, 0x53	; 83
    4d12:	75 e1       	ldi	r23, 0x15	; 21
    4d14:	ce 01       	movw	r24, r28
    4d16:	0e 94 40 38 	call	0x7080	; 0x7080 <strcpy>
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	02 c0       	rjmp	.+4      	; 0x4d22 <lora_driver_getRn2483Hweui+0x32>
    4d1e:	18 82       	st	Y, r1
    4d20:	81 e0       	ldi	r24, 0x01	; 1
    4d22:	df 91       	pop	r29
    4d24:	cf 91       	pop	r28
    4d26:	08 95       	ret

00004d28 <lora_driver_setDeviceIdentifier>:
    4d28:	fc 01       	movw	r30, r24
    4d2a:	01 90       	ld	r0, Z+
    4d2c:	00 20       	and	r0, r0
    4d2e:	e9 f7       	brne	.-6      	; 0x4d2a <lora_driver_setDeviceIdentifier+0x2>
    4d30:	9f 01       	movw	r18, r30
    4d32:	21 51       	subi	r18, 0x11	; 17
    4d34:	31 09       	sbc	r19, r1
    4d36:	28 17       	cp	r18, r24
    4d38:	39 07       	cpc	r19, r25
    4d3a:	29 f4       	brne	.+10     	; 0x4d46 <lora_driver_setDeviceIdentifier+0x1e>
    4d3c:	bc 01       	movw	r22, r24
    4d3e:	82 e4       	ldi	r24, 0x42	; 66
    4d40:	95 e0       	ldi	r25, 0x05	; 5
    4d42:	6c cf       	rjmp	.-296    	; 0x4c1c <_uploadMessageRc>
    4d44:	08 95       	ret
    4d46:	89 e0       	ldi	r24, 0x09	; 9
    4d48:	08 95       	ret

00004d4a <lora_driver_setApplicationIdentifier>:
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	01 90       	ld	r0, Z+
    4d4e:	00 20       	and	r0, r0
    4d50:	e9 f7       	brne	.-6      	; 0x4d4c <lora_driver_setApplicationIdentifier+0x2>
    4d52:	9f 01       	movw	r18, r30
    4d54:	21 51       	subi	r18, 0x11	; 17
    4d56:	31 09       	sbc	r19, r1
    4d58:	28 17       	cp	r18, r24
    4d5a:	39 07       	cpc	r19, r25
    4d5c:	29 f4       	brne	.+10     	; 0x4d68 <lora_driver_setApplicationIdentifier+0x1e>
    4d5e:	bc 01       	movw	r22, r24
    4d60:	81 e5       	ldi	r24, 0x51	; 81
    4d62:	95 e0       	ldi	r25, 0x05	; 5
    4d64:	5b cf       	rjmp	.-330    	; 0x4c1c <_uploadMessageRc>
    4d66:	08 95       	ret
    4d68:	89 e0       	ldi	r24, 0x09	; 9
    4d6a:	08 95       	ret

00004d6c <lora_driver_setApplicationKey>:
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	01 90       	ld	r0, Z+
    4d70:	00 20       	and	r0, r0
    4d72:	e9 f7       	brne	.-6      	; 0x4d6e <lora_driver_setApplicationKey+0x2>
    4d74:	9f 01       	movw	r18, r30
    4d76:	21 52       	subi	r18, 0x21	; 33
    4d78:	31 09       	sbc	r19, r1
    4d7a:	28 17       	cp	r18, r24
    4d7c:	39 07       	cpc	r19, r25
    4d7e:	29 f4       	brne	.+10     	; 0x4d8a <lora_driver_setApplicationKey+0x1e>
    4d80:	bc 01       	movw	r22, r24
    4d82:	80 e6       	ldi	r24, 0x60	; 96
    4d84:	95 e0       	ldi	r25, 0x05	; 5
    4d86:	4a cf       	rjmp	.-364    	; 0x4c1c <_uploadMessageRc>
    4d88:	08 95       	ret
    4d8a:	89 e0       	ldi	r24, 0x09	; 9
    4d8c:	08 95       	ret

00004d8e <lora_driver_saveMac>:
    4d8e:	60 e0       	ldi	r22, 0x00	; 0
    4d90:	70 e0       	ldi	r23, 0x00	; 0
    4d92:	8f e9       	ldi	r24, 0x9F	; 159
    4d94:	95 e0       	ldi	r25, 0x05	; 5
    4d96:	42 cf       	rjmp	.-380    	; 0x4c1c <_uploadMessageRc>
    4d98:	08 95       	ret

00004d9a <lora_driver_join>:
    4d9a:	0f 93       	push	r16
    4d9c:	1f 93       	push	r17
    4d9e:	e8 2f       	mov	r30, r24
    4da0:	f0 e0       	ldi	r31, 0x00	; 0
    4da2:	ee 0f       	add	r30, r30
    4da4:	ff 1f       	adc	r31, r31
    4da6:	e7 58       	subi	r30, 0x87	; 135
    4da8:	f8 4f       	sbci	r31, 0xF8	; 248
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	88 ea       	ldi	r24, 0xA8	; 168
    4db0:	95 e0       	ldi	r25, 0x05	; 5
    4db2:	34 df       	rcall	.-408    	; 0x4c1c <_uploadMessageRc>
    4db4:	81 11       	cpse	r24, r1
    4db6:	14 c0       	rjmp	.+40     	; 0x4de0 <lora_driver_join+0x46>
    4db8:	08 e2       	ldi	r16, 0x28	; 40
    4dba:	15 e0       	ldi	r17, 0x05	; 5
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	4d e2       	ldi	r20, 0x2D	; 45
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	63 e5       	ldi	r22, 0x53	; 83
    4dc6:	75 e1       	ldi	r23, 0x15	; 21
    4dc8:	80 91 ca 14 	lds	r24, 0x14CA	; 0x8014ca <_serialReplyBufferHandle>
    4dcc:	90 91 cb 14 	lds	r25, 0x14CB	; 0x8014cb <_serialReplyBufferHandle+0x1>
    4dd0:	0e 94 0b 12 	call	0x2416	; 0x2416 <xStreamBufferReceive>
    4dd4:	88 23       	and	r24, r24
    4dd6:	21 f0       	breq	.+8      	; 0x4de0 <lora_driver_join+0x46>
    4dd8:	83 e5       	ldi	r24, 0x53	; 83
    4dda:	95 e1       	ldi	r25, 0x15	; 21
    4ddc:	aa de       	rcall	.-684    	; 0x4b32 <_reply2ReturnCode>
    4dde:	03 c0       	rjmp	.+6      	; 0x4de6 <lora_driver_join+0x4c>
    4de0:	83 e5       	ldi	r24, 0x53	; 83
    4de2:	95 e1       	ldi	r25, 0x15	; 21
    4de4:	a6 de       	rcall	.-692    	; 0x4b32 <_reply2ReturnCode>
    4de6:	1f 91       	pop	r17
    4de8:	0f 91       	pop	r16
    4dea:	08 95       	ret

00004dec <lora_driver_sendUploadMessage>:
    4dec:	0f 93       	push	r16
    4dee:	1f 93       	push	r17
    4df0:	cf 93       	push	r28
    4df2:	df 93       	push	r29
    4df4:	1f 92       	push	r1
    4df6:	cd b7       	in	r28, 0x3d	; 61
    4df8:	de b7       	in	r29, 0x3e	; 62
    4dfa:	db 01       	movw	r26, r22
    4dfc:	11 96       	adiw	r26, 0x01	; 1
    4dfe:	9c 91       	ld	r25, X
    4e00:	11 97       	sbiw	r26, 0x01	; 1
    4e02:	95 31       	cpi	r25, 0x15	; 21
    4e04:	08 f0       	brcs	.+2      	; 0x4e08 <lora_driver_sendUploadMessage+0x1c>
    4e06:	b4 c0       	rjmp	.+360    	; 0x4f70 <lora_driver_sendUploadMessage+0x184>
    4e08:	99 23       	and	r25, r25
    4e0a:	81 f1       	breq	.+96     	; 0x4e6c <lora_driver_sendUploadMessage+0x80>
    4e0c:	60 e0       	ldi	r22, 0x00	; 0
    4e0e:	70 e0       	ldi	r23, 0x00	; 0
    4e10:	27 2f       	mov	r18, r23
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	46 2f       	mov	r20, r22
    4e16:	50 e0       	ldi	r21, 0x00	; 0
    4e18:	fd 01       	movw	r30, r26
    4e1a:	e4 0f       	add	r30, r20
    4e1c:	f5 1f       	adc	r31, r21
    4e1e:	92 81       	ldd	r25, Z+2	; 0x02
    4e20:	92 95       	swap	r25
    4e22:	9f 70       	andi	r25, 0x0F	; 15
    4e24:	9a 30       	cpi	r25, 0x0A	; 10
    4e26:	10 f0       	brcs	.+4      	; 0x4e2c <lora_driver_sendUploadMessage+0x40>
    4e28:	99 5c       	subi	r25, 0xC9	; 201
    4e2a:	01 c0       	rjmp	.+2      	; 0x4e2e <lora_driver_sendUploadMessage+0x42>
    4e2c:	90 5d       	subi	r25, 0xD0	; 208
    4e2e:	f9 01       	movw	r30, r18
    4e30:	ec 51       	subi	r30, 0x1C	; 28
    4e32:	fb 4e       	sbci	r31, 0xEB	; 235
    4e34:	90 83       	st	Z, r25
    4e36:	2f 5f       	subi	r18, 0xFF	; 255
    4e38:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3a:	fd 01       	movw	r30, r26
    4e3c:	e4 0f       	add	r30, r20
    4e3e:	f5 1f       	adc	r31, r21
    4e40:	92 81       	ldd	r25, Z+2	; 0x02
    4e42:	9f 70       	andi	r25, 0x0F	; 15
    4e44:	49 2f       	mov	r20, r25
    4e46:	50 e0       	ldi	r21, 0x00	; 0
    4e48:	4a 30       	cpi	r20, 0x0A	; 10
    4e4a:	51 05       	cpc	r21, r1
    4e4c:	14 f0       	brlt	.+4      	; 0x4e52 <lora_driver_sendUploadMessage+0x66>
    4e4e:	99 5c       	subi	r25, 0xC9	; 201
    4e50:	01 c0       	rjmp	.+2      	; 0x4e54 <lora_driver_sendUploadMessage+0x68>
    4e52:	90 5d       	subi	r25, 0xD0	; 208
    4e54:	f9 01       	movw	r30, r18
    4e56:	ec 51       	subi	r30, 0x1C	; 28
    4e58:	fb 4e       	sbci	r31, 0xEB	; 235
    4e5a:	90 83       	st	Z, r25
    4e5c:	7e 5f       	subi	r23, 0xFE	; 254
    4e5e:	6f 5f       	subi	r22, 0xFF	; 255
    4e60:	11 96       	adiw	r26, 0x01	; 1
    4e62:	9c 91       	ld	r25, X
    4e64:	11 97       	sbiw	r26, 0x01	; 1
    4e66:	69 17       	cp	r22, r25
    4e68:	98 f2       	brcs	.-90     	; 0x4e10 <lora_driver_sendUploadMessage+0x24>
    4e6a:	01 c0       	rjmp	.+2      	; 0x4e6e <lora_driver_sendUploadMessage+0x82>
    4e6c:	70 e0       	ldi	r23, 0x00	; 0
    4e6e:	e7 2f       	mov	r30, r23
    4e70:	f0 e0       	ldi	r31, 0x00	; 0
    4e72:	ec 51       	subi	r30, 0x1C	; 28
    4e74:	fb 4e       	sbci	r31, 0xEB	; 235
    4e76:	10 82       	st	Z, r1
    4e78:	4c 91       	ld	r20, X
    4e7a:	81 11       	cpse	r24, r1
    4e7c:	03 c0       	rjmp	.+6      	; 0x4e84 <lora_driver_sendUploadMessage+0x98>
    4e7e:	81 eb       	ldi	r24, 0xB1	; 177
    4e80:	95 e0       	ldi	r25, 0x05	; 5
    4e82:	02 c0       	rjmp	.+4      	; 0x4e88 <lora_driver_sendUploadMessage+0x9c>
    4e84:	83 eb       	ldi	r24, 0xB3	; 179
    4e86:	95 e0       	ldi	r25, 0x05	; 5
    4e88:	24 ee       	ldi	r18, 0xE4	; 228
    4e8a:	34 e1       	ldi	r19, 0x14	; 20
    4e8c:	3f 93       	push	r19
    4e8e:	2f 93       	push	r18
    4e90:	1f 92       	push	r1
    4e92:	4f 93       	push	r20
    4e94:	9f 93       	push	r25
    4e96:	8f 93       	push	r24
    4e98:	87 eb       	ldi	r24, 0xB7	; 183
    4e9a:	95 e0       	ldi	r25, 0x05	; 5
    4e9c:	9f 93       	push	r25
    4e9e:	8f 93       	push	r24
    4ea0:	86 e2       	ldi	r24, 0x26	; 38
    4ea2:	95 e1       	ldi	r25, 0x15	; 21
    4ea4:	9f 93       	push	r25
    4ea6:	8f 93       	push	r24
    4ea8:	0e 94 ab 38 	call	0x7156	; 0x7156 <sprintf>
    4eac:	60 e0       	ldi	r22, 0x00	; 0
    4eae:	70 e0       	ldi	r23, 0x00	; 0
    4eb0:	86 e2       	ldi	r24, 0x26	; 38
    4eb2:	95 e1       	ldi	r25, 0x15	; 21
    4eb4:	b3 de       	rcall	.-666    	; 0x4c1c <_uploadMessageRc>
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	f8 94       	cli
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	0f be       	out	0x3f, r0	; 63
    4ebe:	cd bf       	out	0x3d, r28	; 61
    4ec0:	81 11       	cpse	r24, r1
    4ec2:	59 c0       	rjmp	.+178    	; 0x4f76 <lora_driver_sendUploadMessage+0x18a>
    4ec4:	08 e2       	ldi	r16, 0x28	; 40
    4ec6:	15 e0       	ldi	r17, 0x05	; 5
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	4d e2       	ldi	r20, 0x2D	; 45
    4ece:	50 e0       	ldi	r21, 0x00	; 0
    4ed0:	63 e5       	ldi	r22, 0x53	; 83
    4ed2:	75 e1       	ldi	r23, 0x15	; 21
    4ed4:	80 91 ca 14 	lds	r24, 0x14CA	; 0x8014ca <_serialReplyBufferHandle>
    4ed8:	90 91 cb 14 	lds	r25, 0x14CB	; 0x8014cb <_serialReplyBufferHandle+0x1>
    4edc:	0e 94 0b 12 	call	0x2416	; 0x2416 <xStreamBufferReceive>
    4ee0:	88 23       	and	r24, r24
    4ee2:	09 f4       	brne	.+2      	; 0x4ee6 <lora_driver_sendUploadMessage+0xfa>
    4ee4:	47 c0       	rjmp	.+142    	; 0x4f74 <lora_driver_sendUploadMessage+0x188>
    4ee6:	83 e5       	ldi	r24, 0x53	; 83
    4ee8:	95 e1       	ldi	r25, 0x15	; 21
    4eea:	23 de       	rcall	.-954    	; 0x4b32 <_reply2ReturnCode>
    4eec:	8e 30       	cpi	r24, 0x0E	; 14
    4eee:	09 f0       	breq	.+2      	; 0x4ef2 <lora_driver_sendUploadMessage+0x106>
    4ef0:	42 c0       	rjmp	.+132    	; 0x4f76 <lora_driver_sendUploadMessage+0x18a>
    4ef2:	87 e0       	ldi	r24, 0x07	; 7
    4ef4:	89 83       	std	Y+1, r24	; 0x01
    4ef6:	80 91 c8 14 	lds	r24, 0x14C8	; 0x8014c8 <_downlinkMessageBuffer>
    4efa:	90 91 c9 14 	lds	r25, 0x14C9	; 0x8014c9 <_downlinkMessageBuffer+0x1>
    4efe:	89 2b       	or	r24, r25
    4f00:	a9 f1       	breq	.+106    	; 0x4f6c <lora_driver_sendUploadMessage+0x180>
    4f02:	be 01       	movw	r22, r28
    4f04:	6f 5f       	subi	r22, 0xFF	; 255
    4f06:	7f 4f       	sbci	r23, 0xFF	; 255
    4f08:	83 e5       	ldi	r24, 0x53	; 83
    4f0a:	95 e1       	ldi	r25, 0x15	; 21
    4f0c:	68 d1       	rcall	.+720    	; 0x51de <decode_port_no>
    4f0e:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <_downlinkPayload>
    4f12:	e9 81       	ldd	r30, Y+1	; 0x01
    4f14:	f0 e0       	ldi	r31, 0x00	; 0
    4f16:	ed 5a       	subi	r30, 0xAD	; 173
    4f18:	fa 4e       	sbci	r31, 0xEA	; 234
    4f1a:	df 01       	movw	r26, r30
    4f1c:	0d 90       	ld	r0, X+
    4f1e:	00 20       	and	r0, r0
    4f20:	e9 f7       	brne	.-6      	; 0x4f1c <lora_driver_sendUploadMessage+0x130>
    4f22:	11 97       	sbiw	r26, 0x01	; 1
    4f24:	ae 1b       	sub	r26, r30
    4f26:	bf 0b       	sbc	r27, r31
    4f28:	aa 23       	and	r26, r26
    4f2a:	91 f0       	breq	.+36     	; 0x4f50 <lora_driver_sendUploadMessage+0x164>
    4f2c:	bb 27       	eor	r27, r27
    4f2e:	cd 01       	movw	r24, r26
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	9c 01       	movw	r18, r24
    4f34:	12 f4       	brpl	.+4      	; 0x4f3a <lora_driver_sendUploadMessage+0x14e>
    4f36:	2f 5f       	subi	r18, 0xFF	; 255
    4f38:	3f 4f       	sbci	r19, 0xFF	; 255
    4f3a:	35 95       	asr	r19
    4f3c:	27 95       	ror	r18
    4f3e:	20 93 cf 14 	sts	0x14CF, r18	; 0x8014cf <_downlinkPayload+0x1>
    4f42:	af 01       	movw	r20, r30
    4f44:	4f 5f       	subi	r20, 0xFF	; 255
    4f46:	5f 4f       	sbci	r21, 0xFF	; 255
    4f48:	64 e1       	ldi	r22, 0x14	; 20
    4f4a:	80 ed       	ldi	r24, 0xD0	; 208
    4f4c:	94 e1       	ldi	r25, 0x14	; 20
    4f4e:	73 d1       	rcall	.+742    	; 0x5236 <decode_hexadecimal_string_bytes>
    4f50:	01 e0       	ldi	r16, 0x01	; 1
    4f52:	10 e0       	ldi	r17, 0x00	; 0
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	46 e1       	ldi	r20, 0x16	; 22
    4f5a:	50 e0       	ldi	r21, 0x00	; 0
    4f5c:	6e ec       	ldi	r22, 0xCE	; 206
    4f5e:	74 e1       	ldi	r23, 0x14	; 20
    4f60:	80 91 c8 14 	lds	r24, 0x14C8	; 0x8014c8 <_downlinkMessageBuffer>
    4f64:	90 91 c9 14 	lds	r25, 0x14C9	; 0x8014c9 <_downlinkMessageBuffer+0x1>
    4f68:	0e 94 02 11 	call	0x2204	; 0x2204 <xStreamBufferSend>
    4f6c:	8e e0       	ldi	r24, 0x0E	; 14
    4f6e:	03 c0       	rjmp	.+6      	; 0x4f76 <lora_driver_sendUploadMessage+0x18a>
    4f70:	84 e1       	ldi	r24, 0x14	; 20
    4f72:	01 c0       	rjmp	.+2      	; 0x4f76 <lora_driver_sendUploadMessage+0x18a>
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	0f 90       	pop	r0
    4f78:	df 91       	pop	r29
    4f7a:	cf 91       	pop	r28
    4f7c:	1f 91       	pop	r17
    4f7e:	0f 91       	pop	r16
    4f80:	08 95       	ret

00004f82 <lora_driver_setAdaptiveDataRate>:
    4f82:	81 30       	cpi	r24, 0x01	; 1
    4f84:	19 f0       	breq	.+6      	; 0x4f8c <lora_driver_setAdaptiveDataRate+0xa>
    4f86:	67 ec       	ldi	r22, 0xC7	; 199
    4f88:	75 e0       	ldi	r23, 0x05	; 5
    4f8a:	02 c0       	rjmp	.+4      	; 0x4f90 <lora_driver_setAdaptiveDataRate+0xe>
    4f8c:	60 ea       	ldi	r22, 0xA0	; 160
    4f8e:	76 e0       	ldi	r23, 0x06	; 6
    4f90:	8b ec       	ldi	r24, 0xCB	; 203
    4f92:	95 e0       	ldi	r25, 0x05	; 5
    4f94:	43 ce       	rjmp	.-890    	; 0x4c1c <_uploadMessageRc>
    4f96:	08 95       	ret

00004f98 <lora_driver_setReceiveDelay>:
    4f98:	9f 93       	push	r25
    4f9a:	8f 93       	push	r24
    4f9c:	8c ef       	ldi	r24, 0xFC	; 252
    4f9e:	95 e0       	ldi	r25, 0x05	; 5
    4fa0:	9f 93       	push	r25
    4fa2:	8f 93       	push	r24
    4fa4:	86 e2       	ldi	r24, 0x26	; 38
    4fa6:	95 e1       	ldi	r25, 0x15	; 21
    4fa8:	9f 93       	push	r25
    4faa:	8f 93       	push	r24
    4fac:	0e 94 ab 38 	call	0x7156	; 0x7156 <sprintf>
    4fb0:	60 e0       	ldi	r22, 0x00	; 0
    4fb2:	70 e0       	ldi	r23, 0x00	; 0
    4fb4:	86 e2       	ldi	r24, 0x26	; 38
    4fb6:	95 e1       	ldi	r25, 0x15	; 21
    4fb8:	31 de       	rcall	.-926    	; 0x4c1c <_uploadMessageRc>
    4fba:	0f 90       	pop	r0
    4fbc:	0f 90       	pop	r0
    4fbe:	0f 90       	pop	r0
    4fc0:	0f 90       	pop	r0
    4fc2:	0f 90       	pop	r0
    4fc4:	0f 90       	pop	r0
    4fc6:	08 95       	ret

00004fc8 <lora_driver_configureToEu868>:
    4fc8:	2f 92       	push	r2
    4fca:	3f 92       	push	r3
    4fcc:	4f 92       	push	r4
    4fce:	5f 92       	push	r5
    4fd0:	6f 92       	push	r6
    4fd2:	7f 92       	push	r7
    4fd4:	8f 92       	push	r8
    4fd6:	9f 92       	push	r9
    4fd8:	af 92       	push	r10
    4fda:	bf 92       	push	r11
    4fdc:	cf 92       	push	r12
    4fde:	df 92       	push	r13
    4fe0:	ef 92       	push	r14
    4fe2:	ff 92       	push	r15
    4fe4:	0f 93       	push	r16
    4fe6:	1f 93       	push	r17
    4fe8:	cf 93       	push	r28
    4fea:	df 93       	push	r29
    4fec:	cd b7       	in	r28, 0x3d	; 61
    4fee:	de b7       	in	r29, 0x3e	; 62
    4ff0:	a0 97       	sbiw	r28, 0x20	; 32
    4ff2:	0f b6       	in	r0, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	de bf       	out	0x3e, r29	; 62
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	cd bf       	out	0x3d, r28	; 61
    4ffc:	69 e2       	ldi	r22, 0x29	; 41
    4ffe:	76 e0       	ldi	r23, 0x06	; 6
    5000:	85 e3       	ldi	r24, 0x35	; 53
    5002:	96 e0       	ldi	r25, 0x06	; 6
    5004:	3c dd       	rcall	.-1416   	; 0x4a7e <_uploadMessage>
    5006:	95 dd       	rcall	.-1238   	; 0x4b32 <_reply2ReturnCode>
    5008:	81 11       	cpse	r24, r1
    500a:	a3 c0       	rjmp	.+326    	; 0x5152 <lora_driver_configureToEu868+0x18a>
    500c:	80 e2       	ldi	r24, 0x20	; 32
    500e:	e2 e2       	ldi	r30, 0x22	; 34
    5010:	f2 e0       	ldi	r31, 0x02	; 2
    5012:	de 01       	movw	r26, r28
    5014:	11 96       	adiw	r26, 0x01	; 1
    5016:	01 90       	ld	r0, Z+
    5018:	0d 92       	st	X+, r0
    501a:	8a 95       	dec	r24
    501c:	e1 f7       	brne	.-8      	; 0x5016 <lora_driver_configureToEu868+0x4e>
    501e:	9e 01       	movw	r18, r28
    5020:	2f 5f       	subi	r18, 0xFF	; 255
    5022:	3f 4f       	sbci	r19, 0xFF	; 255
    5024:	69 01       	movw	r12, r18
    5026:	e1 2c       	mov	r14, r1
    5028:	f1 2c       	mov	r15, r1
    502a:	0f 2e       	mov	r0, r31
    502c:	f1 e4       	ldi	r31, 0x41	; 65
    502e:	af 2e       	mov	r10, r31
    5030:	f6 e0       	ldi	r31, 0x06	; 6
    5032:	bf 2e       	mov	r11, r31
    5034:	f0 2d       	mov	r31, r0
    5036:	06 e2       	ldi	r16, 0x26	; 38
    5038:	15 e1       	ldi	r17, 0x15	; 21
    503a:	0f 2e       	mov	r0, r31
    503c:	fa e5       	ldi	r31, 0x5A	; 90
    503e:	4f 2e       	mov	r4, r31
    5040:	f6 e0       	ldi	r31, 0x06	; 6
    5042:	5f 2e       	mov	r5, r31
    5044:	f0 2d       	mov	r31, r0
    5046:	0f 2e       	mov	r0, r31
    5048:	f1 e7       	ldi	r31, 0x71	; 113
    504a:	8f 2e       	mov	r8, r31
    504c:	f6 e0       	ldi	r31, 0x06	; 6
    504e:	9f 2e       	mov	r9, r31
    5050:	f0 2d       	mov	r31, r0
    5052:	0f 2e       	mov	r0, r31
    5054:	fb e8       	ldi	r31, 0x8B	; 139
    5056:	6f 2e       	mov	r6, r31
    5058:	f6 e0       	ldi	r31, 0x06	; 6
    505a:	7f 2e       	mov	r7, r31
    505c:	f0 2d       	mov	r31, r0
    505e:	3e 2c       	mov	r3, r14
    5060:	2f 2c       	mov	r2, r15
    5062:	ff 92       	push	r15
    5064:	ef 92       	push	r14
    5066:	bf 92       	push	r11
    5068:	af 92       	push	r10
    506a:	1f 93       	push	r17
    506c:	0f 93       	push	r16
    506e:	0e 94 ab 38 	call	0x7156	; 0x7156 <sprintf>
    5072:	60 e0       	ldi	r22, 0x00	; 0
    5074:	70 e0       	ldi	r23, 0x00	; 0
    5076:	c8 01       	movw	r24, r16
    5078:	02 dd       	rcall	.-1532   	; 0x4a7e <_uploadMessage>
    507a:	5b dd       	rcall	.-1354   	; 0x4b32 <_reply2ReturnCode>
    507c:	0f 90       	pop	r0
    507e:	0f 90       	pop	r0
    5080:	0f 90       	pop	r0
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	81 11       	cpse	r24, r1
    508a:	63 c0       	rjmp	.+198    	; 0x5152 <lora_driver_configureToEu868+0x18a>
    508c:	32 e0       	ldi	r19, 0x02	; 2
    508e:	3e 15       	cp	r19, r14
    5090:	e8 f4       	brcc	.+58     	; 0x50cc <lora_driver_configureToEu868+0x104>
    5092:	f6 01       	movw	r30, r12
    5094:	83 81       	ldd	r24, Z+3	; 0x03
    5096:	8f 93       	push	r24
    5098:	82 81       	ldd	r24, Z+2	; 0x02
    509a:	8f 93       	push	r24
    509c:	81 81       	ldd	r24, Z+1	; 0x01
    509e:	8f 93       	push	r24
    50a0:	80 81       	ld	r24, Z
    50a2:	8f 93       	push	r24
    50a4:	ff 92       	push	r15
    50a6:	ef 92       	push	r14
    50a8:	5f 92       	push	r5
    50aa:	4f 92       	push	r4
    50ac:	1f 93       	push	r17
    50ae:	0f 93       	push	r16
    50b0:	0e 94 ab 38 	call	0x7156	; 0x7156 <sprintf>
    50b4:	60 e0       	ldi	r22, 0x00	; 0
    50b6:	70 e0       	ldi	r23, 0x00	; 0
    50b8:	c8 01       	movw	r24, r16
    50ba:	e1 dc       	rcall	.-1598   	; 0x4a7e <_uploadMessage>
    50bc:	3a dd       	rcall	.-1420   	; 0x4b32 <_reply2ReturnCode>
    50be:	0f b6       	in	r0, 0x3f	; 63
    50c0:	f8 94       	cli
    50c2:	de bf       	out	0x3e, r29	; 62
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	cd bf       	out	0x3d, r28	; 61
    50c8:	81 11       	cpse	r24, r1
    50ca:	43 c0       	rjmp	.+134    	; 0x5152 <lora_driver_configureToEu868+0x18a>
    50cc:	2f 92       	push	r2
    50ce:	3f 92       	push	r3
    50d0:	9f 92       	push	r9
    50d2:	8f 92       	push	r8
    50d4:	1f 93       	push	r17
    50d6:	0f 93       	push	r16
    50d8:	0e 94 ab 38 	call	0x7156	; 0x7156 <sprintf>
    50dc:	60 e0       	ldi	r22, 0x00	; 0
    50de:	70 e0       	ldi	r23, 0x00	; 0
    50e0:	c8 01       	movw	r24, r16
    50e2:	cd dc       	rcall	.-1638   	; 0x4a7e <_uploadMessage>
    50e4:	26 dd       	rcall	.-1460   	; 0x4b32 <_reply2ReturnCode>
    50e6:	0f 90       	pop	r0
    50e8:	0f 90       	pop	r0
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
    50f2:	81 11       	cpse	r24, r1
    50f4:	2e c0       	rjmp	.+92     	; 0x5152 <lora_driver_configureToEu868+0x18a>
    50f6:	2f 92       	push	r2
    50f8:	3f 92       	push	r3
    50fa:	7f 92       	push	r7
    50fc:	6f 92       	push	r6
    50fe:	1f 93       	push	r17
    5100:	0f 93       	push	r16
    5102:	0e 94 ab 38 	call	0x7156	; 0x7156 <sprintf>
    5106:	60 e0       	ldi	r22, 0x00	; 0
    5108:	70 e0       	ldi	r23, 0x00	; 0
    510a:	c8 01       	movw	r24, r16
    510c:	b8 dc       	rcall	.-1680   	; 0x4a7e <_uploadMessage>
    510e:	11 dd       	rcall	.-1502   	; 0x4b32 <_reply2ReturnCode>
    5110:	0f 90       	pop	r0
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	0f 90       	pop	r0
    5118:	0f 90       	pop	r0
    511a:	0f 90       	pop	r0
    511c:	81 11       	cpse	r24, r1
    511e:	19 c0       	rjmp	.+50     	; 0x5152 <lora_driver_configureToEu868+0x18a>
    5120:	3f ef       	ldi	r19, 0xFF	; 255
    5122:	e3 1a       	sub	r14, r19
    5124:	f3 0a       	sbc	r15, r19
    5126:	84 e0       	ldi	r24, 0x04	; 4
    5128:	c8 0e       	add	r12, r24
    512a:	d1 1c       	adc	r13, r1
    512c:	98 e0       	ldi	r25, 0x08	; 8
    512e:	e9 16       	cp	r14, r25
    5130:	f1 04       	cpc	r15, r1
    5132:	09 f0       	breq	.+2      	; 0x5136 <lora_driver_configureToEu868+0x16e>
    5134:	94 cf       	rjmp	.-216    	; 0x505e <lora_driver_configureToEu868+0x96>
    5136:	60 e0       	ldi	r22, 0x00	; 0
    5138:	70 e0       	ldi	r23, 0x00	; 0
    513a:	83 ea       	ldi	r24, 0xA3	; 163
    513c:	96 e0       	ldi	r25, 0x06	; 6
    513e:	9f dc       	rcall	.-1730   	; 0x4a7e <_uploadMessage>
    5140:	f8 dc       	rcall	.-1552   	; 0x4b32 <_reply2ReturnCode>
    5142:	81 11       	cpse	r24, r1
    5144:	06 c0       	rjmp	.+12     	; 0x5152 <lora_driver_configureToEu868+0x18a>
    5146:	60 e0       	ldi	r22, 0x00	; 0
    5148:	70 e0       	ldi	r23, 0x00	; 0
    514a:	84 eb       	ldi	r24, 0xB4	; 180
    514c:	96 e0       	ldi	r25, 0x06	; 6
    514e:	97 dc       	rcall	.-1746   	; 0x4a7e <_uploadMessage>
    5150:	f0 dc       	rcall	.-1568   	; 0x4b32 <_reply2ReturnCode>
    5152:	a0 96       	adiw	r28, 0x20	; 32
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	f8 94       	cli
    5158:	de bf       	out	0x3e, r29	; 62
    515a:	0f be       	out	0x3f, r0	; 63
    515c:	cd bf       	out	0x3d, r28	; 61
    515e:	df 91       	pop	r29
    5160:	cf 91       	pop	r28
    5162:	1f 91       	pop	r17
    5164:	0f 91       	pop	r16
    5166:	ff 90       	pop	r15
    5168:	ef 90       	pop	r14
    516a:	df 90       	pop	r13
    516c:	cf 90       	pop	r12
    516e:	bf 90       	pop	r11
    5170:	af 90       	pop	r10
    5172:	9f 90       	pop	r9
    5174:	8f 90       	pop	r8
    5176:	7f 90       	pop	r7
    5178:	6f 90       	pop	r6
    517a:	5f 90       	pop	r5
    517c:	4f 90       	pop	r4
    517e:	3f 90       	pop	r3
    5180:	2f 90       	pop	r2
    5182:	08 95       	ret

00005184 <lora_driver_setOtaaIdentity>:
    5184:	ef 92       	push	r14
    5186:	ff 92       	push	r15
    5188:	0f 93       	push	r16
    518a:	1f 93       	push	r17
    518c:	cf 93       	push	r28
    518e:	df 93       	push	r29
    5190:	ec 01       	movw	r28, r24
    5192:	8b 01       	movw	r16, r22
    5194:	7a 01       	movw	r14, r20
    5196:	81 e0       	ldi	r24, 0x01	; 1
    5198:	f4 de       	rcall	.-536    	; 0x4f82 <lora_driver_setAdaptiveDataRate>
    519a:	81 11       	cpse	r24, r1
    519c:	0d c0       	rjmp	.+26     	; 0x51b8 <lora_driver_setOtaaIdentity+0x34>
    519e:	ce 01       	movw	r24, r28
    51a0:	d4 dd       	rcall	.-1112   	; 0x4d4a <lora_driver_setApplicationIdentifier>
    51a2:	81 11       	cpse	r24, r1
    51a4:	09 c0       	rjmp	.+18     	; 0x51b8 <lora_driver_setOtaaIdentity+0x34>
    51a6:	c8 01       	movw	r24, r16
    51a8:	e1 dd       	rcall	.-1086   	; 0x4d6c <lora_driver_setApplicationKey>
    51aa:	81 11       	cpse	r24, r1
    51ac:	05 c0       	rjmp	.+10     	; 0x51b8 <lora_driver_setOtaaIdentity+0x34>
    51ae:	c7 01       	movw	r24, r14
    51b0:	bb dd       	rcall	.-1162   	; 0x4d28 <lora_driver_setDeviceIdentifier>
    51b2:	81 11       	cpse	r24, r1
    51b4:	01 c0       	rjmp	.+2      	; 0x51b8 <lora_driver_setOtaaIdentity+0x34>
    51b6:	eb dd       	rcall	.-1066   	; 0x4d8e <lora_driver_saveMac>
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	1f 91       	pop	r17
    51be:	0f 91       	pop	r16
    51c0:	ff 90       	pop	r15
    51c2:	ef 90       	pop	r14
    51c4:	08 95       	ret

000051c6 <lora_driver_mapReturnCodeToText>:
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	fc 01       	movw	r30, r24
    51ca:	ee 0f       	add	r30, r30
    51cc:	ff 1f       	adc	r31, r31
    51ce:	8e 0f       	add	r24, r30
    51d0:	9f 1f       	adc	r25, r31
    51d2:	fc 01       	movw	r30, r24
    51d4:	e3 58       	subi	r30, 0x83	; 131
    51d6:	f8 4f       	sbci	r31, 0xF8	; 248
    51d8:	81 81       	ldd	r24, Z+1	; 0x01
    51da:	92 81       	ldd	r25, Z+2	; 0x02
    51dc:	08 95       	ret

000051de <decode_port_no>:
    51de:	dc 01       	movw	r26, r24
    51e0:	00 97       	sbiw	r24, 0x00	; 0
    51e2:	29 f1       	breq	.+74     	; 0x522e <decode_port_no+0x50>
    51e4:	fb 01       	movw	r30, r22
    51e6:	20 81       	ld	r18, Z
    51e8:	fc 01       	movw	r30, r24
    51ea:	01 90       	ld	r0, Z+
    51ec:	00 20       	and	r0, r0
    51ee:	e9 f7       	brne	.-6      	; 0x51ea <decode_port_no+0xc>
    51f0:	31 97       	sbiw	r30, 0x01	; 1
    51f2:	e8 1b       	sub	r30, r24
    51f4:	f9 0b       	sbc	r31, r25
    51f6:	82 2f       	mov	r24, r18
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	e8 17       	cp	r30, r24
    51fc:	f9 07       	cpc	r31, r25
    51fe:	c8 f0       	brcs	.+50     	; 0x5232 <decode_port_no+0x54>
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	08 c0       	rjmp	.+16     	; 0x5214 <decode_port_no+0x36>
    5204:	88 0f       	add	r24, r24
    5206:	38 2f       	mov	r19, r24
    5208:	33 0f       	add	r19, r19
    520a:	33 0f       	add	r19, r19
    520c:	83 0f       	add	r24, r19
    520e:	80 53       	subi	r24, 0x30	; 48
    5210:	89 0f       	add	r24, r25
    5212:	2f 5f       	subi	r18, 0xFF	; 255
    5214:	fd 01       	movw	r30, r26
    5216:	e2 0f       	add	r30, r18
    5218:	f1 1d       	adc	r31, r1
    521a:	90 81       	ld	r25, Z
    521c:	30 ed       	ldi	r19, 0xD0	; 208
    521e:	39 0f       	add	r19, r25
    5220:	3a 30       	cpi	r19, 0x0A	; 10
    5222:	10 f4       	brcc	.+4      	; 0x5228 <decode_port_no+0x4a>
    5224:	91 11       	cpse	r25, r1
    5226:	ee cf       	rjmp	.-36     	; 0x5204 <decode_port_no+0x26>
    5228:	fb 01       	movw	r30, r22
    522a:	20 83       	st	Z, r18
    522c:	08 95       	ret
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	08 95       	ret
    5232:	80 e0       	ldi	r24, 0x00	; 0
    5234:	08 95       	ret

00005236 <decode_hexadecimal_string_bytes>:
    5236:	0f 93       	push	r16
    5238:	1f 93       	push	r17
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	dc 01       	movw	r26, r24
    5240:	ea 01       	movw	r28, r20
    5242:	20 97       	sbiw	r28, 0x00	; 0
    5244:	e1 f1       	breq	.+120    	; 0x52be <decode_hexadecimal_string_bytes+0x88>
    5246:	fa 01       	movw	r30, r20
    5248:	01 90       	ld	r0, Z+
    524a:	00 20       	and	r0, r0
    524c:	e9 f7       	brne	.-6      	; 0x5248 <decode_hexadecimal_string_bytes+0x12>
    524e:	31 97       	sbiw	r30, 0x01	; 1
    5250:	e4 1b       	sub	r30, r20
    5252:	f5 0b       	sbc	r31, r21
    5254:	32 97       	sbiw	r30, 0x02	; 2
    5256:	10 f5       	brcc	.+68     	; 0x529c <decode_hexadecimal_string_bytes+0x66>
    5258:	32 c0       	rjmp	.+100    	; 0x52be <decode_hexadecimal_string_bytes+0x88>
    525a:	8d 01       	movw	r16, r26
    525c:	04 0f       	add	r16, r20
    525e:	15 1f       	adc	r17, r21
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	ae 01       	movw	r20, r28
    5264:	42 0f       	add	r20, r18
    5266:	53 1f       	adc	r21, r19
    5268:	fa 01       	movw	r30, r20
    526a:	90 81       	ld	r25, Z
    526c:	91 34       	cpi	r25, 0x41	; 65
    526e:	28 f0       	brcs	.+10     	; 0x527a <decode_hexadecimal_string_bytes+0x44>
    5270:	97 53       	subi	r25, 0x37	; 55
    5272:	59 2f       	mov	r21, r25
    5274:	52 95       	swap	r21
    5276:	50 7f       	andi	r21, 0xF0	; 240
    5278:	03 c0       	rjmp	.+6      	; 0x5280 <decode_hexadecimal_string_bytes+0x4a>
    527a:	59 2f       	mov	r21, r25
    527c:	52 95       	swap	r21
    527e:	50 7f       	andi	r21, 0xF0	; 240
    5280:	2c 0f       	add	r18, r28
    5282:	3d 1f       	adc	r19, r29
    5284:	f9 01       	movw	r30, r18
    5286:	91 81       	ldd	r25, Z+1	; 0x01
    5288:	91 34       	cpi	r25, 0x41	; 65
    528a:	10 f0       	brcs	.+4      	; 0x5290 <decode_hexadecimal_string_bytes+0x5a>
    528c:	97 53       	subi	r25, 0x37	; 55
    528e:	01 c0       	rjmp	.+2      	; 0x5292 <decode_hexadecimal_string_bytes+0x5c>
    5290:	90 53       	subi	r25, 0x30	; 48
    5292:	95 0f       	add	r25, r21
    5294:	f8 01       	movw	r30, r16
    5296:	90 83       	st	Z, r25
    5298:	8f 5f       	subi	r24, 0xFF	; 255
    529a:	01 c0       	rjmp	.+2      	; 0x529e <decode_hexadecimal_string_bytes+0x68>
    529c:	80 e0       	ldi	r24, 0x00	; 0
    529e:	28 2f       	mov	r18, r24
    52a0:	22 0f       	add	r18, r18
    52a2:	48 2f       	mov	r20, r24
    52a4:	50 e0       	ldi	r21, 0x00	; 0
    52a6:	fe 01       	movw	r30, r28
    52a8:	01 90       	ld	r0, Z+
    52aa:	00 20       	and	r0, r0
    52ac:	e9 f7       	brne	.-6      	; 0x52a8 <decode_hexadecimal_string_bytes+0x72>
    52ae:	31 97       	sbiw	r30, 0x01	; 1
    52b0:	ec 1b       	sub	r30, r28
    52b2:	fd 0b       	sbc	r31, r29
    52b4:	4e 17       	cp	r20, r30
    52b6:	5f 07       	cpc	r21, r31
    52b8:	10 f4       	brcc	.+4      	; 0x52be <decode_hexadecimal_string_bytes+0x88>
    52ba:	86 13       	cpse	r24, r22
    52bc:	ce cf       	rjmp	.-100    	; 0x525a <decode_hexadecimal_string_bytes+0x24>
    52be:	df 91       	pop	r29
    52c0:	cf 91       	pop	r28
    52c2:	1f 91       	pop	r17
    52c4:	0f 91       	pop	r16
    52c6:	08 95       	ret

000052c8 <_serialCallBack>:
    52c8:	80 91 83 15 	lds	r24, 0x1583	; 0x801583 <crc_sum.1945>
    52cc:	86 0f       	add	r24, r22
    52ce:	80 93 83 15 	sts	0x1583, r24	; 0x801583 <crc_sum.1945>
    52d2:	90 91 86 15 	lds	r25, 0x1586	; 0x801586 <_mh_state>
    52d6:	91 30       	cpi	r25, 0x01	; 1
    52d8:	79 f0       	breq	.+30     	; 0x52f8 <_serialCallBack+0x30>
    52da:	28 f0       	brcs	.+10     	; 0x52e6 <_serialCallBack+0x1e>
    52dc:	92 30       	cpi	r25, 0x02	; 2
    52de:	a9 f0       	breq	.+42     	; 0x530a <_serialCallBack+0x42>
    52e0:	93 30       	cpi	r25, 0x03	; 3
    52e2:	19 f1       	breq	.+70     	; 0x532a <_serialCallBack+0x62>
    52e4:	08 95       	ret
    52e6:	6f 3f       	cpi	r22, 0xFF	; 255
    52e8:	09 f0       	breq	.+2      	; 0x52ec <_serialCallBack+0x24>
    52ea:	48 c0       	rjmp	.+144    	; 0x537c <_serialCallBack+0xb4>
    52ec:	10 92 83 15 	sts	0x1583, r1	; 0x801583 <crc_sum.1945>
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	80 93 86 15 	sts	0x1586, r24	; 0x801586 <_mh_state>
    52f6:	08 95       	ret
    52f8:	66 38       	cpi	r22, 0x86	; 134
    52fa:	09 f0       	breq	.+2      	; 0x52fe <_serialCallBack+0x36>
    52fc:	3f c0       	rjmp	.+126    	; 0x537c <_serialCallBack+0xb4>
    52fe:	10 92 82 15 	sts	0x1582, r1	; 0x801582 <inDex.1943>
    5302:	82 e0       	ldi	r24, 0x02	; 2
    5304:	80 93 86 15 	sts	0x1586, r24	; 0x801586 <_mh_state>
    5308:	08 95       	ret
    530a:	e0 91 82 15 	lds	r30, 0x1582	; 0x801582 <inDex.1943>
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	8e 0f       	add	r24, r30
    5312:	80 93 82 15 	sts	0x1582, r24	; 0x801582 <inDex.1943>
    5316:	f0 e0       	ldi	r31, 0x00	; 0
    5318:	e0 58       	subi	r30, 0x80	; 128
    531a:	fa 4e       	sbci	r31, 0xEA	; 234
    531c:	60 83       	st	Z, r22
    531e:	82 30       	cpi	r24, 0x02	; 2
    5320:	69 f5       	brne	.+90     	; 0x537c <_serialCallBack+0xb4>
    5322:	83 e0       	ldi	r24, 0x03	; 3
    5324:	80 93 86 15 	sts	0x1586, r24	; 0x801586 <_mh_state>
    5328:	08 95       	ret
    532a:	90 91 82 15 	lds	r25, 0x1582	; 0x801582 <inDex.1943>
    532e:	21 e0       	ldi	r18, 0x01	; 1
    5330:	29 0f       	add	r18, r25
    5332:	20 93 82 15 	sts	0x1582, r18	; 0x801582 <inDex.1943>
    5336:	96 30       	cpi	r25, 0x06	; 6
    5338:	09 f5       	brne	.+66     	; 0x537c <_serialCallBack+0xb4>
    533a:	81 11       	cpse	r24, r1
    533c:	0e c0       	rjmp	.+28     	; 0x535a <_serialCallBack+0x92>
    533e:	e0 e8       	ldi	r30, 0x80	; 128
    5340:	f5 e1       	ldi	r31, 0x15	; 21
    5342:	80 81       	ld	r24, Z
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	98 2f       	mov	r25, r24
    5348:	88 27       	eor	r24, r24
    534a:	21 81       	ldd	r18, Z+1	; 0x01
    534c:	82 0f       	add	r24, r18
    534e:	91 1d       	adc	r25, r1
    5350:	90 93 88 15 	sts	0x1588, r25	; 0x801588 <_ppm+0x1>
    5354:	80 93 87 15 	sts	0x1587, r24	; 0x801587 <_ppm>
    5358:	04 c0       	rjmp	.+8      	; 0x5362 <_serialCallBack+0x9a>
    535a:	10 92 88 15 	sts	0x1588, r1	; 0x801588 <_ppm+0x1>
    535e:	10 92 87 15 	sts	0x1587, r1	; 0x801587 <_ppm>
    5362:	10 92 86 15 	sts	0x1586, r1	; 0x801586 <_mh_state>
    5366:	e0 91 84 15 	lds	r30, 0x1584	; 0x801584 <_appCallBack>
    536a:	f0 91 85 15 	lds	r31, 0x1585	; 0x801585 <_appCallBack+0x1>
    536e:	30 97       	sbiw	r30, 0x00	; 0
    5370:	29 f0       	breq	.+10     	; 0x537c <_serialCallBack+0xb4>
    5372:	80 91 87 15 	lds	r24, 0x1587	; 0x801587 <_ppm>
    5376:	90 91 88 15 	lds	r25, 0x1588	; 0x801588 <_ppm+0x1>
    537a:	19 95       	eicall
    537c:	08 95       	ret

0000537e <mh_z19_initialise>:
    537e:	8f 92       	push	r8
    5380:	9f 92       	push	r9
    5382:	af 92       	push	r10
    5384:	cf 92       	push	r12
    5386:	ef 92       	push	r14
    5388:	0f 93       	push	r16
    538a:	0f 2e       	mov	r0, r31
    538c:	f4 e6       	ldi	r31, 0x64	; 100
    538e:	8f 2e       	mov	r8, r31
    5390:	f9 e2       	ldi	r31, 0x29	; 41
    5392:	9f 2e       	mov	r9, r31
    5394:	f0 2d       	mov	r31, r0
    5396:	68 94       	set
    5398:	aa 24       	eor	r10, r10
    539a:	a4 f8       	bld	r10, 4
    539c:	68 94       	set
    539e:	cc 24       	eor	r12, r12
    53a0:	c4 f8       	bld	r12, 4
    53a2:	e1 2c       	mov	r14, r1
    53a4:	00 e0       	ldi	r16, 0x00	; 0
    53a6:	23 e0       	ldi	r18, 0x03	; 3
    53a8:	40 e8       	ldi	r20, 0x80	; 128
    53aa:	55 e2       	ldi	r21, 0x25	; 37
    53ac:	60 e0       	ldi	r22, 0x00	; 0
    53ae:	70 e0       	ldi	r23, 0x00	; 0
    53b0:	73 d0       	rcall	.+230    	; 0x5498 <serial_create>
    53b2:	90 93 8a 15 	sts	0x158A, r25	; 0x80158a <_serial+0x1>
    53b6:	80 93 89 15 	sts	0x1589, r24	; 0x801589 <_serial>
    53ba:	0f 91       	pop	r16
    53bc:	ef 90       	pop	r14
    53be:	cf 90       	pop	r12
    53c0:	af 90       	pop	r10
    53c2:	9f 90       	pop	r9
    53c4:	8f 90       	pop	r8
    53c6:	08 95       	ret

000053c8 <mh_z19_injectCallBack>:
    53c8:	90 93 85 15 	sts	0x1585, r25	; 0x801585 <_appCallBack+0x1>
    53cc:	80 93 84 15 	sts	0x1584, r24	; 0x801584 <_appCallBack>
    53d0:	08 95       	ret

000053d2 <mh_z19_takeMeassuring>:
    53d2:	cf 93       	push	r28
    53d4:	df 93       	push	r29
    53d6:	cd b7       	in	r28, 0x3d	; 61
    53d8:	de b7       	in	r29, 0x3e	; 62
    53da:	29 97       	sbiw	r28, 0x09	; 9
    53dc:	0f b6       	in	r0, 0x3f	; 63
    53de:	f8 94       	cli
    53e0:	de bf       	out	0x3e, r29	; 62
    53e2:	0f be       	out	0x3f, r0	; 63
    53e4:	cd bf       	out	0x3d, r28	; 61
    53e6:	89 e0       	ldi	r24, 0x09	; 9
    53e8:	e2 e4       	ldi	r30, 0x42	; 66
    53ea:	f2 e0       	ldi	r31, 0x02	; 2
    53ec:	9e 01       	movw	r18, r28
    53ee:	2f 5f       	subi	r18, 0xFF	; 255
    53f0:	3f 4f       	sbci	r19, 0xFF	; 255
    53f2:	d9 01       	movw	r26, r18
    53f4:	01 90       	ld	r0, Z+
    53f6:	0d 92       	st	X+, r0
    53f8:	8a 95       	dec	r24
    53fa:	e1 f7       	brne	.-8      	; 0x53f4 <mh_z19_takeMeassuring+0x22>
    53fc:	10 92 88 15 	sts	0x1588, r1	; 0x801588 <_ppm+0x1>
    5400:	10 92 87 15 	sts	0x1587, r1	; 0x801587 <_ppm>
    5404:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <_serial>
    5408:	90 91 8a 15 	lds	r25, 0x158A	; 0x80158a <_serial+0x1>
    540c:	00 97       	sbiw	r24, 0x00	; 0
    540e:	31 f0       	breq	.+12     	; 0x541c <mh_z19_takeMeassuring+0x4a>
    5410:	42 2f       	mov	r20, r18
    5412:	53 2f       	mov	r21, r19
    5414:	69 e0       	ldi	r22, 0x09	; 9
    5416:	0f d1       	rcall	.+542    	; 0x5636 <serial_sendBytes>
    5418:	80 e0       	ldi	r24, 0x00	; 0
    541a:	01 c0       	rjmp	.+2      	; 0x541e <mh_z19_takeMeassuring+0x4c>
    541c:	82 e0       	ldi	r24, 0x02	; 2
    541e:	29 96       	adiw	r28, 0x09	; 9
    5420:	0f b6       	in	r0, 0x3f	; 63
    5422:	f8 94       	cli
    5424:	de bf       	out	0x3e, r29	; 62
    5426:	0f be       	out	0x3f, r0	; 63
    5428:	cd bf       	out	0x3d, r28	; 61
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	08 95       	ret

00005430 <rc_servo_setPosition>:
    5430:	65 36       	cpi	r22, 0x65	; 101
    5432:	0c f0       	brlt	.+2      	; 0x5436 <rc_servo_setPosition+0x6>
    5434:	64 e6       	ldi	r22, 0x64	; 100
    5436:	6c 39       	cpi	r22, 0x9C	; 156
    5438:	0c f4       	brge	.+2      	; 0x543c <rc_servo_setPosition+0xc>
    543a:	6c e9       	ldi	r22, 0x9C	; 156
    543c:	96 ef       	ldi	r25, 0xF6	; 246
    543e:	69 02       	muls	r22, r25
    5440:	b0 01       	movw	r22, r0
    5442:	11 24       	eor	r1, r1
    5444:	68 54       	subi	r22, 0x48	; 72
    5446:	74 4f       	sbci	r23, 0xF4	; 244
    5448:	81 11       	cpse	r24, r1
    544a:	05 c0       	rjmp	.+10     	; 0x5456 <rc_servo_setPosition+0x26>
    544c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    5450:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    5454:	08 95       	ret
    5456:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    545a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    545e:	08 95       	ret

00005460 <rc_servo_initialise>:
    5460:	ea e0       	ldi	r30, 0x0A	; 10
    5462:	f1 e0       	ldi	r31, 0x01	; 1
    5464:	80 81       	ld	r24, Z
    5466:	88 61       	ori	r24, 0x18	; 24
    5468:	80 83       	st	Z, r24
    546a:	8f e3       	ldi	r24, 0x3F	; 63
    546c:	9c e9       	ldi	r25, 0x9C	; 156
    546e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    5472:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    5476:	60 e0       	ldi	r22, 0x00	; 0
    5478:	80 e0       	ldi	r24, 0x00	; 0
    547a:	da df       	rcall	.-76     	; 0x5430 <rc_servo_setPosition>
    547c:	60 e0       	ldi	r22, 0x00	; 0
    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	d7 df       	rcall	.-82     	; 0x5430 <rc_servo_setPosition>
    5482:	e0 e2       	ldi	r30, 0x20	; 32
    5484:	f1 e0       	ldi	r31, 0x01	; 1
    5486:	80 81       	ld	r24, Z
    5488:	82 6a       	ori	r24, 0xA2	; 162
    548a:	80 83       	st	Z, r24
    548c:	e1 e2       	ldi	r30, 0x21	; 33
    548e:	f1 e0       	ldi	r31, 0x01	; 1
    5490:	80 81       	ld	r24, Z
    5492:	8a 61       	ori	r24, 0x1A	; 26
    5494:	80 83       	st	Z, r24
    5496:	08 95       	ret

00005498 <serial_create>:
    5498:	2f 92       	push	r2
    549a:	3f 92       	push	r3
    549c:	4f 92       	push	r4
    549e:	5f 92       	push	r5
    54a0:	6f 92       	push	r6
    54a2:	7f 92       	push	r7
    54a4:	8f 92       	push	r8
    54a6:	9f 92       	push	r9
    54a8:	af 92       	push	r10
    54aa:	cf 92       	push	r12
    54ac:	ef 92       	push	r14
    54ae:	ff 92       	push	r15
    54b0:	0f 93       	push	r16
    54b2:	1f 93       	push	r17
    54b4:	cf 93       	push	r28
    54b6:	df 93       	push	r29
    54b8:	cd b7       	in	r28, 0x3d	; 61
    54ba:	de b7       	in	r29, 0x3e	; 62
    54bc:	f8 2e       	mov	r15, r24
    54be:	2a 01       	movw	r4, r20
    54c0:	3b 01       	movw	r6, r22
    54c2:	88 e0       	ldi	r24, 0x08	; 8
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <malloc>
    54ca:	8c 01       	movw	r16, r24
    54cc:	8f 2d       	mov	r24, r15
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	fc 01       	movw	r30, r24
    54d2:	ee 0f       	add	r30, r30
    54d4:	ff 1f       	adc	r31, r31
    54d6:	e5 57       	subi	r30, 0x75	; 117
    54d8:	fa 4e       	sbci	r31, 0xEA	; 234
    54da:	11 83       	std	Z+1, r17	; 0x01
    54dc:	00 83       	st	Z, r16
    54de:	01 15       	cp	r16, r1
    54e0:	11 05       	cpc	r17, r1
    54e2:	09 f4       	brne	.+2      	; 0x54e6 <serial_create+0x4e>
    54e4:	6b c0       	rjmp	.+214    	; 0x55bc <serial_create+0x124>
    54e6:	88 0f       	add	r24, r24
    54e8:	99 1f       	adc	r25, r25
    54ea:	fc 01       	movw	r30, r24
    54ec:	e5 5f       	subi	r30, 0xF5	; 245
    54ee:	fd 4f       	sbci	r31, 0xFD	; 253
    54f0:	80 81       	ld	r24, Z
    54f2:	91 81       	ldd	r25, Z+1	; 0x01
    54f4:	d8 01       	movw	r26, r16
    54f6:	8d 93       	st	X+, r24
    54f8:	9c 93       	st	X, r25
    54fa:	8c 2d       	mov	r24, r12
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	88 0f       	add	r24, r24
    5500:	99 1f       	adc	r25, r25
    5502:	88 0f       	add	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <malloc>
    550a:	1c 01       	movw	r2, r24
    550c:	86 e0       	ldi	r24, 0x06	; 6
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <malloc>
    5514:	7c 01       	movw	r14, r24
    5516:	4c 2d       	mov	r20, r12
    5518:	b1 01       	movw	r22, r2
    551a:	bf d6       	rcall	.+3454   	; 0x629a <fifo_init>
    551c:	f8 01       	movw	r30, r16
    551e:	f5 82       	std	Z+5, r15	; 0x05
    5520:	e4 82       	std	Z+4, r14	; 0x04
    5522:	8a 2d       	mov	r24, r10
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	88 0f       	add	r24, r24
    5528:	99 1f       	adc	r25, r25
    552a:	88 0f       	add	r24, r24
    552c:	99 1f       	adc	r25, r25
    552e:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <malloc>
    5532:	1c 01       	movw	r2, r24
    5534:	86 e0       	ldi	r24, 0x06	; 6
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <malloc>
    553c:	7c 01       	movw	r14, r24
    553e:	4a 2d       	mov	r20, r10
    5540:	b1 01       	movw	r22, r2
    5542:	ab d6       	rcall	.+3414   	; 0x629a <fifo_init>
    5544:	d8 01       	movw	r26, r16
    5546:	13 96       	adiw	r26, 0x03	; 3
    5548:	fc 92       	st	X, r15
    554a:	ee 92       	st	-X, r14
    554c:	12 97       	sbiw	r26, 0x02	; 2
    554e:	17 96       	adiw	r26, 0x07	; 7
    5550:	9c 92       	st	X, r9
    5552:	8e 92       	st	-X, r8
    5554:	16 97       	sbiw	r26, 0x06	; 6
    5556:	ff b6       	in	r15, 0x3f	; 63
    5558:	f8 94       	cli
    555a:	ed 91       	ld	r30, X+
    555c:	fc 91       	ld	r31, X
    555e:	11 97       	sbiw	r26, 0x01	; 1
    5560:	36 97       	sbiw	r30, 0x06	; 6
    5562:	80 81       	ld	r24, Z
    5564:	82 60       	ori	r24, 0x02	; 2
    5566:	80 83       	st	Z, r24
    5568:	8d 90       	ld	r8, X+
    556a:	9c 90       	ld	r9, X
    556c:	c3 01       	movw	r24, r6
    556e:	b2 01       	movw	r22, r4
    5570:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__floatunsisf>
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	40 e0       	ldi	r20, 0x00	; 0
    557a:	51 e4       	ldi	r21, 0x41	; 65
    557c:	a9 d8       	rcall	.-3758   	; 0x46d0 <__mulsf3>
    557e:	9b 01       	movw	r18, r22
    5580:	ac 01       	movw	r20, r24
    5582:	60 e0       	ldi	r22, 0x00	; 0
    5584:	74 e2       	ldi	r23, 0x24	; 36
    5586:	84 e7       	ldi	r24, 0x74	; 116
    5588:	9b e4       	ldi	r25, 0x4B	; 75
    558a:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <__divsf3>
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e8       	ldi	r20, 0x80	; 128
    5594:	5f e3       	ldi	r21, 0x3F	; 63
    5596:	ff d8       	rcall	.-3586   	; 0x4796 <__subsf3>
    5598:	0e 94 bc 22 	call	0x4578	; 0x4578 <__fixunssfsi>
    559c:	f4 01       	movw	r30, r8
    559e:	32 97       	sbiw	r30, 0x02	; 2
    55a0:	60 83       	st	Z, r22
    55a2:	d8 01       	movw	r26, r16
    55a4:	ed 91       	ld	r30, X+
    55a6:	fc 91       	ld	r31, X
    55a8:	11 97       	sbiw	r26, 0x01	; 1
    55aa:	35 97       	sbiw	r30, 0x05	; 5
    55ac:	88 e9       	ldi	r24, 0x98	; 152
    55ae:	80 83       	st	Z, r24
    55b0:	ed 91       	ld	r30, X+
    55b2:	fc 91       	ld	r31, X
    55b4:	34 97       	sbiw	r30, 0x04	; 4
    55b6:	86 e0       	ldi	r24, 0x06	; 6
    55b8:	80 83       	st	Z, r24
    55ba:	ff be       	out	0x3f, r15	; 63
    55bc:	c8 01       	movw	r24, r16
    55be:	df 91       	pop	r29
    55c0:	cf 91       	pop	r28
    55c2:	1f 91       	pop	r17
    55c4:	0f 91       	pop	r16
    55c6:	ff 90       	pop	r15
    55c8:	ef 90       	pop	r14
    55ca:	cf 90       	pop	r12
    55cc:	af 90       	pop	r10
    55ce:	9f 90       	pop	r9
    55d0:	8f 90       	pop	r8
    55d2:	7f 90       	pop	r7
    55d4:	6f 90       	pop	r6
    55d6:	5f 90       	pop	r5
    55d8:	4f 90       	pop	r4
    55da:	3f 90       	pop	r3
    55dc:	2f 90       	pop	r2
    55de:	08 95       	ret

000055e0 <serial_sendByte>:
    55e0:	cf 93       	push	r28
    55e2:	df 93       	push	r29
    55e4:	dc 01       	movw	r26, r24
    55e6:	89 2b       	or	r24, r25
    55e8:	01 f1       	breq	.+64     	; 0x562a <serial_sendByte+0x4a>
    55ea:	12 96       	adiw	r26, 0x02	; 2
    55ec:	ed 91       	ld	r30, X+
    55ee:	fc 91       	ld	r31, X
    55f0:	13 97       	sbiw	r26, 0x03	; 3
    55f2:	93 81       	ldd	r25, Z+3	; 0x03
    55f4:	82 81       	ldd	r24, Z+2	; 0x02
    55f6:	25 81       	ldd	r18, Z+5	; 0x05
    55f8:	98 1b       	sub	r25, r24
    55fa:	92 23       	and	r25, r18
    55fc:	84 81       	ldd	r24, Z+4	; 0x04
    55fe:	98 17       	cp	r25, r24
    5600:	b1 f0       	breq	.+44     	; 0x562e <serial_sendByte+0x4e>
    5602:	83 81       	ldd	r24, Z+3	; 0x03
    5604:	26 95       	lsr	r18
    5606:	28 23       	and	r18, r24
    5608:	c0 81       	ld	r28, Z
    560a:	d1 81       	ldd	r29, Z+1	; 0x01
    560c:	c2 0f       	add	r28, r18
    560e:	d1 1d       	adc	r29, r1
    5610:	68 83       	st	Y, r22
    5612:	8f 5f       	subi	r24, 0xFF	; 255
    5614:	95 81       	ldd	r25, Z+5	; 0x05
    5616:	89 23       	and	r24, r25
    5618:	83 83       	std	Z+3, r24	; 0x03
    561a:	ed 91       	ld	r30, X+
    561c:	fc 91       	ld	r31, X
    561e:	35 97       	sbiw	r30, 0x05	; 5
    5620:	80 81       	ld	r24, Z
    5622:	80 62       	ori	r24, 0x20	; 32
    5624:	80 83       	st	Z, r24
    5626:	80 e0       	ldi	r24, 0x00	; 0
    5628:	03 c0       	rjmp	.+6      	; 0x5630 <serial_sendByte+0x50>
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	01 c0       	rjmp	.+2      	; 0x5630 <serial_sendByte+0x50>
    562e:	82 e0       	ldi	r24, 0x02	; 2
    5630:	df 91       	pop	r29
    5632:	cf 91       	pop	r28
    5634:	08 95       	ret

00005636 <serial_sendBytes>:
    5636:	ef 92       	push	r14
    5638:	ff 92       	push	r15
    563a:	0f 93       	push	r16
    563c:	1f 93       	push	r17
    563e:	cf 93       	push	r28
    5640:	df 93       	push	r29
    5642:	7c 01       	movw	r14, r24
    5644:	00 97       	sbiw	r24, 0x00	; 0
    5646:	09 f4       	brne	.+2      	; 0x564a <serial_sendBytes+0x14>
    5648:	41 c0       	rjmp	.+130    	; 0x56cc <serial_sendBytes+0x96>
    564a:	dc 01       	movw	r26, r24
    564c:	12 96       	adiw	r26, 0x02	; 2
    564e:	ed 91       	ld	r30, X+
    5650:	fc 91       	ld	r31, X
    5652:	13 97       	sbiw	r26, 0x03	; 3
    5654:	93 81       	ldd	r25, Z+3	; 0x03
    5656:	82 81       	ldd	r24, Z+2	; 0x02
    5658:	98 1b       	sub	r25, r24
    565a:	85 81       	ldd	r24, Z+5	; 0x05
    565c:	98 23       	and	r25, r24
    565e:	84 81       	ldd	r24, Z+4	; 0x04
    5660:	89 1b       	sub	r24, r25
    5662:	86 17       	cp	r24, r22
    5664:	a8 f1       	brcs	.+106    	; 0x56d0 <serial_sendBytes+0x9a>
    5666:	66 23       	and	r22, r22
    5668:	41 f1       	breq	.+80     	; 0x56ba <serial_sendBytes+0x84>
    566a:	84 2f       	mov	r24, r20
    566c:	95 2f       	mov	r25, r21
    566e:	dc 01       	movw	r26, r24
    5670:	61 50       	subi	r22, 0x01	; 1
    5672:	46 2f       	mov	r20, r22
    5674:	50 e0       	ldi	r21, 0x00	; 0
    5676:	4f 5f       	subi	r20, 0xFF	; 255
    5678:	5f 4f       	sbci	r21, 0xFF	; 255
    567a:	48 0f       	add	r20, r24
    567c:	59 1f       	adc	r21, r25
    567e:	e7 01       	movw	r28, r14
    5680:	ea 81       	ldd	r30, Y+2	; 0x02
    5682:	fb 81       	ldd	r31, Y+3	; 0x03
    5684:	93 81       	ldd	r25, Z+3	; 0x03
    5686:	82 81       	ldd	r24, Z+2	; 0x02
    5688:	25 81       	ldd	r18, Z+5	; 0x05
    568a:	98 1b       	sub	r25, r24
    568c:	92 23       	and	r25, r18
    568e:	84 81       	ldd	r24, Z+4	; 0x04
    5690:	98 17       	cp	r25, r24
    5692:	79 f0       	breq	.+30     	; 0x56b2 <serial_sendBytes+0x7c>
    5694:	8c 91       	ld	r24, X
    5696:	93 81       	ldd	r25, Z+3	; 0x03
    5698:	26 95       	lsr	r18
    569a:	29 23       	and	r18, r25
    569c:	60 81       	ld	r22, Z
    569e:	71 81       	ldd	r23, Z+1	; 0x01
    56a0:	8b 01       	movw	r16, r22
    56a2:	02 0f       	add	r16, r18
    56a4:	11 1d       	adc	r17, r1
    56a6:	e8 01       	movw	r28, r16
    56a8:	88 83       	st	Y, r24
    56aa:	9f 5f       	subi	r25, 0xFF	; 255
    56ac:	85 81       	ldd	r24, Z+5	; 0x05
    56ae:	98 23       	and	r25, r24
    56b0:	93 83       	std	Z+3, r25	; 0x03
    56b2:	11 96       	adiw	r26, 0x01	; 1
    56b4:	a4 17       	cp	r26, r20
    56b6:	b5 07       	cpc	r27, r21
    56b8:	11 f7       	brne	.-60     	; 0x567e <serial_sendBytes+0x48>
    56ba:	d7 01       	movw	r26, r14
    56bc:	ed 91       	ld	r30, X+
    56be:	fc 91       	ld	r31, X
    56c0:	35 97       	sbiw	r30, 0x05	; 5
    56c2:	80 81       	ld	r24, Z
    56c4:	80 62       	ori	r24, 0x20	; 32
    56c6:	80 83       	st	Z, r24
    56c8:	80 e0       	ldi	r24, 0x00	; 0
    56ca:	03 c0       	rjmp	.+6      	; 0x56d2 <serial_sendBytes+0x9c>
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	01 c0       	rjmp	.+2      	; 0x56d2 <serial_sendBytes+0x9c>
    56d0:	82 e0       	ldi	r24, 0x02	; 2
    56d2:	df 91       	pop	r29
    56d4:	cf 91       	pop	r28
    56d6:	1f 91       	pop	r17
    56d8:	0f 91       	pop	r16
    56da:	ff 90       	pop	r15
    56dc:	ef 90       	pop	r14
    56de:	08 95       	ret

000056e0 <serial_getByte>:
    56e0:	00 97       	sbiw	r24, 0x00	; 0
    56e2:	d1 f0       	breq	.+52     	; 0x5718 <serial_getByte+0x38>
    56e4:	dc 01       	movw	r26, r24
    56e6:	14 96       	adiw	r26, 0x04	; 4
    56e8:	ed 91       	ld	r30, X+
    56ea:	fc 91       	ld	r31, X
    56ec:	15 97       	sbiw	r26, 0x05	; 5
    56ee:	93 81       	ldd	r25, Z+3	; 0x03
    56f0:	82 81       	ldd	r24, Z+2	; 0x02
    56f2:	98 17       	cp	r25, r24
    56f4:	99 f0       	breq	.+38     	; 0x571c <serial_getByte+0x3c>
    56f6:	92 81       	ldd	r25, Z+2	; 0x02
    56f8:	85 81       	ldd	r24, Z+5	; 0x05
    56fa:	86 95       	lsr	r24
    56fc:	89 23       	and	r24, r25
    56fe:	a0 81       	ld	r26, Z
    5700:	b1 81       	ldd	r27, Z+1	; 0x01
    5702:	a8 0f       	add	r26, r24
    5704:	b1 1d       	adc	r27, r1
    5706:	8c 91       	ld	r24, X
    5708:	db 01       	movw	r26, r22
    570a:	8c 93       	st	X, r24
    570c:	9f 5f       	subi	r25, 0xFF	; 255
    570e:	85 81       	ldd	r24, Z+5	; 0x05
    5710:	98 23       	and	r25, r24
    5712:	92 83       	std	Z+2, r25	; 0x02
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	08 95       	ret
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	08 95       	ret
    571c:	83 e0       	ldi	r24, 0x03	; 3
    571e:	08 95       	ret

00005720 <__vector_25>:
    5720:	1f 92       	push	r1
    5722:	0f 92       	push	r0
    5724:	0f b6       	in	r0, 0x3f	; 63
    5726:	0f 92       	push	r0
    5728:	11 24       	eor	r1, r1
    572a:	0b b6       	in	r0, 0x3b	; 59
    572c:	0f 92       	push	r0
    572e:	2f 93       	push	r18
    5730:	3f 93       	push	r19
    5732:	4f 93       	push	r20
    5734:	5f 93       	push	r21
    5736:	6f 93       	push	r22
    5738:	7f 93       	push	r23
    573a:	8f 93       	push	r24
    573c:	9f 93       	push	r25
    573e:	af 93       	push	r26
    5740:	bf 93       	push	r27
    5742:	cf 93       	push	r28
    5744:	df 93       	push	r29
    5746:	ef 93       	push	r30
    5748:	ff 93       	push	r31
    574a:	a0 91 8b 15 	lds	r26, 0x158B	; 0x80158b <_ser_handle>
    574e:	b0 91 8c 15 	lds	r27, 0x158C	; 0x80158c <_ser_handle+0x1>
    5752:	10 97       	sbiw	r26, 0x00	; 0
    5754:	11 f1       	breq	.+68     	; 0x579a <__vector_25+0x7a>
    5756:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    575a:	14 96       	adiw	r26, 0x04	; 4
    575c:	ed 91       	ld	r30, X+
    575e:	fc 91       	ld	r31, X
    5760:	15 97       	sbiw	r26, 0x05	; 5
    5762:	93 81       	ldd	r25, Z+3	; 0x03
    5764:	82 81       	ldd	r24, Z+2	; 0x02
    5766:	25 81       	ldd	r18, Z+5	; 0x05
    5768:	98 1b       	sub	r25, r24
    576a:	92 23       	and	r25, r18
    576c:	84 81       	ldd	r24, Z+4	; 0x04
    576e:	98 17       	cp	r25, r24
    5770:	61 f0       	breq	.+24     	; 0x578a <__vector_25+0x6a>
    5772:	83 81       	ldd	r24, Z+3	; 0x03
    5774:	26 95       	lsr	r18
    5776:	28 23       	and	r18, r24
    5778:	c0 81       	ld	r28, Z
    577a:	d1 81       	ldd	r29, Z+1	; 0x01
    577c:	c2 0f       	add	r28, r18
    577e:	d1 1d       	adc	r29, r1
    5780:	68 83       	st	Y, r22
    5782:	8f 5f       	subi	r24, 0xFF	; 255
    5784:	95 81       	ldd	r25, Z+5	; 0x05
    5786:	89 23       	and	r24, r25
    5788:	83 83       	std	Z+3, r24	; 0x03
    578a:	16 96       	adiw	r26, 0x06	; 6
    578c:	ed 91       	ld	r30, X+
    578e:	fc 91       	ld	r31, X
    5790:	17 97       	sbiw	r26, 0x07	; 7
    5792:	30 97       	sbiw	r30, 0x00	; 0
    5794:	11 f0       	breq	.+4      	; 0x579a <__vector_25+0x7a>
    5796:	cd 01       	movw	r24, r26
    5798:	19 95       	eicall
    579a:	ff 91       	pop	r31
    579c:	ef 91       	pop	r30
    579e:	df 91       	pop	r29
    57a0:	cf 91       	pop	r28
    57a2:	bf 91       	pop	r27
    57a4:	af 91       	pop	r26
    57a6:	9f 91       	pop	r25
    57a8:	8f 91       	pop	r24
    57aa:	7f 91       	pop	r23
    57ac:	6f 91       	pop	r22
    57ae:	5f 91       	pop	r21
    57b0:	4f 91       	pop	r20
    57b2:	3f 91       	pop	r19
    57b4:	2f 91       	pop	r18
    57b6:	0f 90       	pop	r0
    57b8:	0b be       	out	0x3b, r0	; 59
    57ba:	0f 90       	pop	r0
    57bc:	0f be       	out	0x3f, r0	; 63
    57be:	0f 90       	pop	r0
    57c0:	1f 90       	pop	r1
    57c2:	18 95       	reti

000057c4 <__vector_26>:
    57c4:	1f 92       	push	r1
    57c6:	0f 92       	push	r0
    57c8:	0f b6       	in	r0, 0x3f	; 63
    57ca:	0f 92       	push	r0
    57cc:	11 24       	eor	r1, r1
    57ce:	0b b6       	in	r0, 0x3b	; 59
    57d0:	0f 92       	push	r0
    57d2:	2f 93       	push	r18
    57d4:	8f 93       	push	r24
    57d6:	9f 93       	push	r25
    57d8:	af 93       	push	r26
    57da:	bf 93       	push	r27
    57dc:	ef 93       	push	r30
    57de:	ff 93       	push	r31
    57e0:	e0 91 8b 15 	lds	r30, 0x158B	; 0x80158b <_ser_handle>
    57e4:	f0 91 8c 15 	lds	r31, 0x158C	; 0x80158c <_ser_handle+0x1>
    57e8:	30 97       	sbiw	r30, 0x00	; 0
    57ea:	b9 f0       	breq	.+46     	; 0x581a <__vector_26+0x56>
    57ec:	02 80       	ldd	r0, Z+2	; 0x02
    57ee:	f3 81       	ldd	r31, Z+3	; 0x03
    57f0:	e0 2d       	mov	r30, r0
    57f2:	93 81       	ldd	r25, Z+3	; 0x03
    57f4:	82 81       	ldd	r24, Z+2	; 0x02
    57f6:	98 17       	cp	r25, r24
    57f8:	b1 f0       	breq	.+44     	; 0x5826 <__vector_26+0x62>
    57fa:	92 81       	ldd	r25, Z+2	; 0x02
    57fc:	85 81       	ldd	r24, Z+5	; 0x05
    57fe:	28 2f       	mov	r18, r24
    5800:	26 95       	lsr	r18
    5802:	29 23       	and	r18, r25
    5804:	a0 81       	ld	r26, Z
    5806:	b1 81       	ldd	r27, Z+1	; 0x01
    5808:	a2 0f       	add	r26, r18
    580a:	b1 1d       	adc	r27, r1
    580c:	2c 91       	ld	r18, X
    580e:	9f 5f       	subi	r25, 0xFF	; 255
    5810:	89 23       	and	r24, r25
    5812:	82 83       	std	Z+2, r24	; 0x02
    5814:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5818:	0b c0       	rjmp	.+22     	; 0x5830 <__vector_26+0x6c>
    581a:	e1 ec       	ldi	r30, 0xC1	; 193
    581c:	f0 e0       	ldi	r31, 0x00	; 0
    581e:	80 81       	ld	r24, Z
    5820:	8f 7d       	andi	r24, 0xDF	; 223
    5822:	80 83       	st	Z, r24
    5824:	05 c0       	rjmp	.+10     	; 0x5830 <__vector_26+0x6c>
    5826:	e1 ec       	ldi	r30, 0xC1	; 193
    5828:	f0 e0       	ldi	r31, 0x00	; 0
    582a:	80 81       	ld	r24, Z
    582c:	8f 7d       	andi	r24, 0xDF	; 223
    582e:	80 83       	st	Z, r24
    5830:	ff 91       	pop	r31
    5832:	ef 91       	pop	r30
    5834:	bf 91       	pop	r27
    5836:	af 91       	pop	r26
    5838:	9f 91       	pop	r25
    583a:	8f 91       	pop	r24
    583c:	2f 91       	pop	r18
    583e:	0f 90       	pop	r0
    5840:	0b be       	out	0x3b, r0	; 59
    5842:	0f 90       	pop	r0
    5844:	0f be       	out	0x3f, r0	; 63
    5846:	0f 90       	pop	r0
    5848:	1f 90       	pop	r1
    584a:	18 95       	reti

0000584c <__vector_36>:
    584c:	1f 92       	push	r1
    584e:	0f 92       	push	r0
    5850:	0f b6       	in	r0, 0x3f	; 63
    5852:	0f 92       	push	r0
    5854:	11 24       	eor	r1, r1
    5856:	0b b6       	in	r0, 0x3b	; 59
    5858:	0f 92       	push	r0
    585a:	2f 93       	push	r18
    585c:	3f 93       	push	r19
    585e:	4f 93       	push	r20
    5860:	5f 93       	push	r21
    5862:	6f 93       	push	r22
    5864:	7f 93       	push	r23
    5866:	8f 93       	push	r24
    5868:	9f 93       	push	r25
    586a:	af 93       	push	r26
    586c:	bf 93       	push	r27
    586e:	cf 93       	push	r28
    5870:	df 93       	push	r29
    5872:	ef 93       	push	r30
    5874:	ff 93       	push	r31
    5876:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <_ser_handle+0x2>
    587a:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <_ser_handle+0x3>
    587e:	10 97       	sbiw	r26, 0x00	; 0
    5880:	11 f1       	breq	.+68     	; 0x58c6 <__vector_36+0x7a>
    5882:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5886:	14 96       	adiw	r26, 0x04	; 4
    5888:	ed 91       	ld	r30, X+
    588a:	fc 91       	ld	r31, X
    588c:	15 97       	sbiw	r26, 0x05	; 5
    588e:	93 81       	ldd	r25, Z+3	; 0x03
    5890:	82 81       	ldd	r24, Z+2	; 0x02
    5892:	25 81       	ldd	r18, Z+5	; 0x05
    5894:	98 1b       	sub	r25, r24
    5896:	92 23       	and	r25, r18
    5898:	84 81       	ldd	r24, Z+4	; 0x04
    589a:	98 17       	cp	r25, r24
    589c:	61 f0       	breq	.+24     	; 0x58b6 <__vector_36+0x6a>
    589e:	83 81       	ldd	r24, Z+3	; 0x03
    58a0:	26 95       	lsr	r18
    58a2:	28 23       	and	r18, r24
    58a4:	c0 81       	ld	r28, Z
    58a6:	d1 81       	ldd	r29, Z+1	; 0x01
    58a8:	c2 0f       	add	r28, r18
    58aa:	d1 1d       	adc	r29, r1
    58ac:	68 83       	st	Y, r22
    58ae:	8f 5f       	subi	r24, 0xFF	; 255
    58b0:	95 81       	ldd	r25, Z+5	; 0x05
    58b2:	89 23       	and	r24, r25
    58b4:	83 83       	std	Z+3, r24	; 0x03
    58b6:	16 96       	adiw	r26, 0x06	; 6
    58b8:	ed 91       	ld	r30, X+
    58ba:	fc 91       	ld	r31, X
    58bc:	17 97       	sbiw	r26, 0x07	; 7
    58be:	30 97       	sbiw	r30, 0x00	; 0
    58c0:	11 f0       	breq	.+4      	; 0x58c6 <__vector_36+0x7a>
    58c2:	cd 01       	movw	r24, r26
    58c4:	19 95       	eicall
    58c6:	ff 91       	pop	r31
    58c8:	ef 91       	pop	r30
    58ca:	df 91       	pop	r29
    58cc:	cf 91       	pop	r28
    58ce:	bf 91       	pop	r27
    58d0:	af 91       	pop	r26
    58d2:	9f 91       	pop	r25
    58d4:	8f 91       	pop	r24
    58d6:	7f 91       	pop	r23
    58d8:	6f 91       	pop	r22
    58da:	5f 91       	pop	r21
    58dc:	4f 91       	pop	r20
    58de:	3f 91       	pop	r19
    58e0:	2f 91       	pop	r18
    58e2:	0f 90       	pop	r0
    58e4:	0b be       	out	0x3b, r0	; 59
    58e6:	0f 90       	pop	r0
    58e8:	0f be       	out	0x3f, r0	; 63
    58ea:	0f 90       	pop	r0
    58ec:	1f 90       	pop	r1
    58ee:	18 95       	reti

000058f0 <__vector_37>:
    58f0:	1f 92       	push	r1
    58f2:	0f 92       	push	r0
    58f4:	0f b6       	in	r0, 0x3f	; 63
    58f6:	0f 92       	push	r0
    58f8:	11 24       	eor	r1, r1
    58fa:	0b b6       	in	r0, 0x3b	; 59
    58fc:	0f 92       	push	r0
    58fe:	2f 93       	push	r18
    5900:	8f 93       	push	r24
    5902:	9f 93       	push	r25
    5904:	af 93       	push	r26
    5906:	bf 93       	push	r27
    5908:	ef 93       	push	r30
    590a:	ff 93       	push	r31
    590c:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <_ser_handle+0x2>
    5910:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <_ser_handle+0x3>
    5914:	30 97       	sbiw	r30, 0x00	; 0
    5916:	b9 f0       	breq	.+46     	; 0x5946 <__vector_37+0x56>
    5918:	02 80       	ldd	r0, Z+2	; 0x02
    591a:	f3 81       	ldd	r31, Z+3	; 0x03
    591c:	e0 2d       	mov	r30, r0
    591e:	93 81       	ldd	r25, Z+3	; 0x03
    5920:	82 81       	ldd	r24, Z+2	; 0x02
    5922:	98 17       	cp	r25, r24
    5924:	b1 f0       	breq	.+44     	; 0x5952 <__vector_37+0x62>
    5926:	92 81       	ldd	r25, Z+2	; 0x02
    5928:	85 81       	ldd	r24, Z+5	; 0x05
    592a:	28 2f       	mov	r18, r24
    592c:	26 95       	lsr	r18
    592e:	29 23       	and	r18, r25
    5930:	a0 81       	ld	r26, Z
    5932:	b1 81       	ldd	r27, Z+1	; 0x01
    5934:	a2 0f       	add	r26, r18
    5936:	b1 1d       	adc	r27, r1
    5938:	2c 91       	ld	r18, X
    593a:	9f 5f       	subi	r25, 0xFF	; 255
    593c:	89 23       	and	r24, r25
    593e:	82 83       	std	Z+2, r24	; 0x02
    5940:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5944:	0b c0       	rjmp	.+22     	; 0x595c <__vector_37+0x6c>
    5946:	e9 ec       	ldi	r30, 0xC9	; 201
    5948:	f0 e0       	ldi	r31, 0x00	; 0
    594a:	80 81       	ld	r24, Z
    594c:	8f 7d       	andi	r24, 0xDF	; 223
    594e:	80 83       	st	Z, r24
    5950:	05 c0       	rjmp	.+10     	; 0x595c <__vector_37+0x6c>
    5952:	e9 ec       	ldi	r30, 0xC9	; 201
    5954:	f0 e0       	ldi	r31, 0x00	; 0
    5956:	80 81       	ld	r24, Z
    5958:	8f 7d       	andi	r24, 0xDF	; 223
    595a:	80 83       	st	Z, r24
    595c:	ff 91       	pop	r31
    595e:	ef 91       	pop	r30
    5960:	bf 91       	pop	r27
    5962:	af 91       	pop	r26
    5964:	9f 91       	pop	r25
    5966:	8f 91       	pop	r24
    5968:	2f 91       	pop	r18
    596a:	0f 90       	pop	r0
    596c:	0b be       	out	0x3b, r0	; 59
    596e:	0f 90       	pop	r0
    5970:	0f be       	out	0x3f, r0	; 63
    5972:	0f 90       	pop	r0
    5974:	1f 90       	pop	r1
    5976:	18 95       	reti

00005978 <__vector_51>:
    5978:	1f 92       	push	r1
    597a:	0f 92       	push	r0
    597c:	0f b6       	in	r0, 0x3f	; 63
    597e:	0f 92       	push	r0
    5980:	11 24       	eor	r1, r1
    5982:	0b b6       	in	r0, 0x3b	; 59
    5984:	0f 92       	push	r0
    5986:	2f 93       	push	r18
    5988:	3f 93       	push	r19
    598a:	4f 93       	push	r20
    598c:	5f 93       	push	r21
    598e:	6f 93       	push	r22
    5990:	7f 93       	push	r23
    5992:	8f 93       	push	r24
    5994:	9f 93       	push	r25
    5996:	af 93       	push	r26
    5998:	bf 93       	push	r27
    599a:	cf 93       	push	r28
    599c:	df 93       	push	r29
    599e:	ef 93       	push	r30
    59a0:	ff 93       	push	r31
    59a2:	a0 91 8f 15 	lds	r26, 0x158F	; 0x80158f <_ser_handle+0x4>
    59a6:	b0 91 90 15 	lds	r27, 0x1590	; 0x801590 <_ser_handle+0x5>
    59aa:	10 97       	sbiw	r26, 0x00	; 0
    59ac:	11 f1       	breq	.+68     	; 0x59f2 <__vector_51+0x7a>
    59ae:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    59b2:	14 96       	adiw	r26, 0x04	; 4
    59b4:	ed 91       	ld	r30, X+
    59b6:	fc 91       	ld	r31, X
    59b8:	15 97       	sbiw	r26, 0x05	; 5
    59ba:	93 81       	ldd	r25, Z+3	; 0x03
    59bc:	82 81       	ldd	r24, Z+2	; 0x02
    59be:	25 81       	ldd	r18, Z+5	; 0x05
    59c0:	98 1b       	sub	r25, r24
    59c2:	92 23       	and	r25, r18
    59c4:	84 81       	ldd	r24, Z+4	; 0x04
    59c6:	98 17       	cp	r25, r24
    59c8:	61 f0       	breq	.+24     	; 0x59e2 <__vector_51+0x6a>
    59ca:	83 81       	ldd	r24, Z+3	; 0x03
    59cc:	26 95       	lsr	r18
    59ce:	28 23       	and	r18, r24
    59d0:	c0 81       	ld	r28, Z
    59d2:	d1 81       	ldd	r29, Z+1	; 0x01
    59d4:	c2 0f       	add	r28, r18
    59d6:	d1 1d       	adc	r29, r1
    59d8:	68 83       	st	Y, r22
    59da:	8f 5f       	subi	r24, 0xFF	; 255
    59dc:	95 81       	ldd	r25, Z+5	; 0x05
    59de:	89 23       	and	r24, r25
    59e0:	83 83       	std	Z+3, r24	; 0x03
    59e2:	16 96       	adiw	r26, 0x06	; 6
    59e4:	ed 91       	ld	r30, X+
    59e6:	fc 91       	ld	r31, X
    59e8:	17 97       	sbiw	r26, 0x07	; 7
    59ea:	30 97       	sbiw	r30, 0x00	; 0
    59ec:	11 f0       	breq	.+4      	; 0x59f2 <__vector_51+0x7a>
    59ee:	cd 01       	movw	r24, r26
    59f0:	19 95       	eicall
    59f2:	ff 91       	pop	r31
    59f4:	ef 91       	pop	r30
    59f6:	df 91       	pop	r29
    59f8:	cf 91       	pop	r28
    59fa:	bf 91       	pop	r27
    59fc:	af 91       	pop	r26
    59fe:	9f 91       	pop	r25
    5a00:	8f 91       	pop	r24
    5a02:	7f 91       	pop	r23
    5a04:	6f 91       	pop	r22
    5a06:	5f 91       	pop	r21
    5a08:	4f 91       	pop	r20
    5a0a:	3f 91       	pop	r19
    5a0c:	2f 91       	pop	r18
    5a0e:	0f 90       	pop	r0
    5a10:	0b be       	out	0x3b, r0	; 59
    5a12:	0f 90       	pop	r0
    5a14:	0f be       	out	0x3f, r0	; 63
    5a16:	0f 90       	pop	r0
    5a18:	1f 90       	pop	r1
    5a1a:	18 95       	reti

00005a1c <__vector_52>:
    5a1c:	1f 92       	push	r1
    5a1e:	0f 92       	push	r0
    5a20:	0f b6       	in	r0, 0x3f	; 63
    5a22:	0f 92       	push	r0
    5a24:	11 24       	eor	r1, r1
    5a26:	0b b6       	in	r0, 0x3b	; 59
    5a28:	0f 92       	push	r0
    5a2a:	2f 93       	push	r18
    5a2c:	8f 93       	push	r24
    5a2e:	9f 93       	push	r25
    5a30:	af 93       	push	r26
    5a32:	bf 93       	push	r27
    5a34:	ef 93       	push	r30
    5a36:	ff 93       	push	r31
    5a38:	e0 91 8f 15 	lds	r30, 0x158F	; 0x80158f <_ser_handle+0x4>
    5a3c:	f0 91 90 15 	lds	r31, 0x1590	; 0x801590 <_ser_handle+0x5>
    5a40:	30 97       	sbiw	r30, 0x00	; 0
    5a42:	b9 f0       	breq	.+46     	; 0x5a72 <__vector_52+0x56>
    5a44:	02 80       	ldd	r0, Z+2	; 0x02
    5a46:	f3 81       	ldd	r31, Z+3	; 0x03
    5a48:	e0 2d       	mov	r30, r0
    5a4a:	93 81       	ldd	r25, Z+3	; 0x03
    5a4c:	82 81       	ldd	r24, Z+2	; 0x02
    5a4e:	98 17       	cp	r25, r24
    5a50:	b1 f0       	breq	.+44     	; 0x5a7e <__vector_52+0x62>
    5a52:	92 81       	ldd	r25, Z+2	; 0x02
    5a54:	85 81       	ldd	r24, Z+5	; 0x05
    5a56:	28 2f       	mov	r18, r24
    5a58:	26 95       	lsr	r18
    5a5a:	29 23       	and	r18, r25
    5a5c:	a0 81       	ld	r26, Z
    5a5e:	b1 81       	ldd	r27, Z+1	; 0x01
    5a60:	a2 0f       	add	r26, r18
    5a62:	b1 1d       	adc	r27, r1
    5a64:	2c 91       	ld	r18, X
    5a66:	9f 5f       	subi	r25, 0xFF	; 255
    5a68:	89 23       	and	r24, r25
    5a6a:	82 83       	std	Z+2, r24	; 0x02
    5a6c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5a70:	0b c0       	rjmp	.+22     	; 0x5a88 <__vector_52+0x6c>
    5a72:	e1 ed       	ldi	r30, 0xD1	; 209
    5a74:	f0 e0       	ldi	r31, 0x00	; 0
    5a76:	80 81       	ld	r24, Z
    5a78:	8f 7d       	andi	r24, 0xDF	; 223
    5a7a:	80 83       	st	Z, r24
    5a7c:	05 c0       	rjmp	.+10     	; 0x5a88 <__vector_52+0x6c>
    5a7e:	e1 ed       	ldi	r30, 0xD1	; 209
    5a80:	f0 e0       	ldi	r31, 0x00	; 0
    5a82:	80 81       	ld	r24, Z
    5a84:	8f 7d       	andi	r24, 0xDF	; 223
    5a86:	80 83       	st	Z, r24
    5a88:	ff 91       	pop	r31
    5a8a:	ef 91       	pop	r30
    5a8c:	bf 91       	pop	r27
    5a8e:	af 91       	pop	r26
    5a90:	9f 91       	pop	r25
    5a92:	8f 91       	pop	r24
    5a94:	2f 91       	pop	r18
    5a96:	0f 90       	pop	r0
    5a98:	0b be       	out	0x3b, r0	; 59
    5a9a:	0f 90       	pop	r0
    5a9c:	0f be       	out	0x3f, r0	; 63
    5a9e:	0f 90       	pop	r0
    5aa0:	1f 90       	pop	r1
    5aa2:	18 95       	reti

00005aa4 <__vector_54>:
    5aa4:	1f 92       	push	r1
    5aa6:	0f 92       	push	r0
    5aa8:	0f b6       	in	r0, 0x3f	; 63
    5aaa:	0f 92       	push	r0
    5aac:	11 24       	eor	r1, r1
    5aae:	0b b6       	in	r0, 0x3b	; 59
    5ab0:	0f 92       	push	r0
    5ab2:	2f 93       	push	r18
    5ab4:	3f 93       	push	r19
    5ab6:	4f 93       	push	r20
    5ab8:	5f 93       	push	r21
    5aba:	6f 93       	push	r22
    5abc:	7f 93       	push	r23
    5abe:	8f 93       	push	r24
    5ac0:	9f 93       	push	r25
    5ac2:	af 93       	push	r26
    5ac4:	bf 93       	push	r27
    5ac6:	cf 93       	push	r28
    5ac8:	df 93       	push	r29
    5aca:	ef 93       	push	r30
    5acc:	ff 93       	push	r31
    5ace:	a0 91 91 15 	lds	r26, 0x1591	; 0x801591 <_ser_handle+0x6>
    5ad2:	b0 91 92 15 	lds	r27, 0x1592	; 0x801592 <_ser_handle+0x7>
    5ad6:	10 97       	sbiw	r26, 0x00	; 0
    5ad8:	11 f1       	breq	.+68     	; 0x5b1e <__vector_54+0x7a>
    5ada:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5ade:	14 96       	adiw	r26, 0x04	; 4
    5ae0:	ed 91       	ld	r30, X+
    5ae2:	fc 91       	ld	r31, X
    5ae4:	15 97       	sbiw	r26, 0x05	; 5
    5ae6:	93 81       	ldd	r25, Z+3	; 0x03
    5ae8:	82 81       	ldd	r24, Z+2	; 0x02
    5aea:	25 81       	ldd	r18, Z+5	; 0x05
    5aec:	98 1b       	sub	r25, r24
    5aee:	92 23       	and	r25, r18
    5af0:	84 81       	ldd	r24, Z+4	; 0x04
    5af2:	98 17       	cp	r25, r24
    5af4:	61 f0       	breq	.+24     	; 0x5b0e <__vector_54+0x6a>
    5af6:	83 81       	ldd	r24, Z+3	; 0x03
    5af8:	26 95       	lsr	r18
    5afa:	28 23       	and	r18, r24
    5afc:	c0 81       	ld	r28, Z
    5afe:	d1 81       	ldd	r29, Z+1	; 0x01
    5b00:	c2 0f       	add	r28, r18
    5b02:	d1 1d       	adc	r29, r1
    5b04:	68 83       	st	Y, r22
    5b06:	8f 5f       	subi	r24, 0xFF	; 255
    5b08:	95 81       	ldd	r25, Z+5	; 0x05
    5b0a:	89 23       	and	r24, r25
    5b0c:	83 83       	std	Z+3, r24	; 0x03
    5b0e:	16 96       	adiw	r26, 0x06	; 6
    5b10:	ed 91       	ld	r30, X+
    5b12:	fc 91       	ld	r31, X
    5b14:	17 97       	sbiw	r26, 0x07	; 7
    5b16:	30 97       	sbiw	r30, 0x00	; 0
    5b18:	11 f0       	breq	.+4      	; 0x5b1e <__vector_54+0x7a>
    5b1a:	cd 01       	movw	r24, r26
    5b1c:	19 95       	eicall
    5b1e:	ff 91       	pop	r31
    5b20:	ef 91       	pop	r30
    5b22:	df 91       	pop	r29
    5b24:	cf 91       	pop	r28
    5b26:	bf 91       	pop	r27
    5b28:	af 91       	pop	r26
    5b2a:	9f 91       	pop	r25
    5b2c:	8f 91       	pop	r24
    5b2e:	7f 91       	pop	r23
    5b30:	6f 91       	pop	r22
    5b32:	5f 91       	pop	r21
    5b34:	4f 91       	pop	r20
    5b36:	3f 91       	pop	r19
    5b38:	2f 91       	pop	r18
    5b3a:	0f 90       	pop	r0
    5b3c:	0b be       	out	0x3b, r0	; 59
    5b3e:	0f 90       	pop	r0
    5b40:	0f be       	out	0x3f, r0	; 63
    5b42:	0f 90       	pop	r0
    5b44:	1f 90       	pop	r1
    5b46:	18 95       	reti

00005b48 <__vector_55>:
    5b48:	1f 92       	push	r1
    5b4a:	0f 92       	push	r0
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	0f 92       	push	r0
    5b50:	11 24       	eor	r1, r1
    5b52:	0b b6       	in	r0, 0x3b	; 59
    5b54:	0f 92       	push	r0
    5b56:	2f 93       	push	r18
    5b58:	8f 93       	push	r24
    5b5a:	9f 93       	push	r25
    5b5c:	af 93       	push	r26
    5b5e:	bf 93       	push	r27
    5b60:	ef 93       	push	r30
    5b62:	ff 93       	push	r31
    5b64:	e0 91 91 15 	lds	r30, 0x1591	; 0x801591 <_ser_handle+0x6>
    5b68:	f0 91 92 15 	lds	r31, 0x1592	; 0x801592 <_ser_handle+0x7>
    5b6c:	30 97       	sbiw	r30, 0x00	; 0
    5b6e:	b9 f0       	breq	.+46     	; 0x5b9e <__vector_55+0x56>
    5b70:	02 80       	ldd	r0, Z+2	; 0x02
    5b72:	f3 81       	ldd	r31, Z+3	; 0x03
    5b74:	e0 2d       	mov	r30, r0
    5b76:	93 81       	ldd	r25, Z+3	; 0x03
    5b78:	82 81       	ldd	r24, Z+2	; 0x02
    5b7a:	98 17       	cp	r25, r24
    5b7c:	b1 f0       	breq	.+44     	; 0x5baa <__vector_55+0x62>
    5b7e:	92 81       	ldd	r25, Z+2	; 0x02
    5b80:	85 81       	ldd	r24, Z+5	; 0x05
    5b82:	28 2f       	mov	r18, r24
    5b84:	26 95       	lsr	r18
    5b86:	29 23       	and	r18, r25
    5b88:	a0 81       	ld	r26, Z
    5b8a:	b1 81       	ldd	r27, Z+1	; 0x01
    5b8c:	a2 0f       	add	r26, r18
    5b8e:	b1 1d       	adc	r27, r1
    5b90:	2c 91       	ld	r18, X
    5b92:	9f 5f       	subi	r25, 0xFF	; 255
    5b94:	89 23       	and	r24, r25
    5b96:	82 83       	std	Z+2, r24	; 0x02
    5b98:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5b9c:	0b c0       	rjmp	.+22     	; 0x5bb4 <__vector_55+0x6c>
    5b9e:	e1 e3       	ldi	r30, 0x31	; 49
    5ba0:	f1 e0       	ldi	r31, 0x01	; 1
    5ba2:	80 81       	ld	r24, Z
    5ba4:	8f 7d       	andi	r24, 0xDF	; 223
    5ba6:	80 83       	st	Z, r24
    5ba8:	05 c0       	rjmp	.+10     	; 0x5bb4 <__vector_55+0x6c>
    5baa:	e1 e3       	ldi	r30, 0x31	; 49
    5bac:	f1 e0       	ldi	r31, 0x01	; 1
    5bae:	80 81       	ld	r24, Z
    5bb0:	8f 7d       	andi	r24, 0xDF	; 223
    5bb2:	80 83       	st	Z, r24
    5bb4:	ff 91       	pop	r31
    5bb6:	ef 91       	pop	r30
    5bb8:	bf 91       	pop	r27
    5bba:	af 91       	pop	r26
    5bbc:	9f 91       	pop	r25
    5bbe:	8f 91       	pop	r24
    5bc0:	2f 91       	pop	r18
    5bc2:	0f 90       	pop	r0
    5bc4:	0b be       	out	0x3b, r0	; 59
    5bc6:	0f 90       	pop	r0
    5bc8:	0f be       	out	0x3f, r0	; 63
    5bca:	0f 90       	pop	r0
    5bcc:	1f 90       	pop	r1
    5bce:	18 95       	reti

00005bd0 <usart_getchar>:
    5bd0:	cf 93       	push	r28
    5bd2:	df 93       	push	r29
    5bd4:	1f 92       	push	r1
    5bd6:	cd b7       	in	r28, 0x3d	; 61
    5bd8:	de b7       	in	r29, 0x3e	; 62
    5bda:	be 01       	movw	r22, r28
    5bdc:	6f 5f       	subi	r22, 0xFF	; 255
    5bde:	7f 4f       	sbci	r23, 0xFF	; 255
    5be0:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <_com_serial_instance>
    5be4:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <_com_serial_instance+0x1>
    5be8:	7b dd       	rcall	.-1290   	; 0x56e0 <serial_getByte>
    5bea:	81 11       	cpse	r24, r1
    5bec:	f6 cf       	rjmp	.-20     	; 0x5bda <usart_getchar+0xa>
    5bee:	89 81       	ldd	r24, Y+1	; 0x01
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	0f 90       	pop	r0
    5bf4:	df 91       	pop	r29
    5bf6:	cf 91       	pop	r28
    5bf8:	08 95       	ret

00005bfa <usart_putchar>:
    5bfa:	68 2f       	mov	r22, r24
    5bfc:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <_com_serial_instance>
    5c00:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <_com_serial_instance+0x1>
    5c04:	ed dc       	rcall	.-1574   	; 0x55e0 <serial_sendByte>
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	08 95       	ret

00005c0c <stdio_initialise>:
    5c0c:	8f 92       	push	r8
    5c0e:	9f 92       	push	r9
    5c10:	af 92       	push	r10
    5c12:	cf 92       	push	r12
    5c14:	ef 92       	push	r14
    5c16:	0f 93       	push	r16
    5c18:	81 2c       	mov	r8, r1
    5c1a:	91 2c       	mov	r9, r1
    5c1c:	68 94       	set
    5c1e:	aa 24       	eor	r10, r10
    5c20:	a7 f8       	bld	r10, 7
    5c22:	68 94       	set
    5c24:	cc 24       	eor	r12, r12
    5c26:	c7 f8       	bld	r12, 7
    5c28:	e1 2c       	mov	r14, r1
    5c2a:	00 e0       	ldi	r16, 0x00	; 0
    5c2c:	23 e0       	ldi	r18, 0x03	; 3
    5c2e:	40 e0       	ldi	r20, 0x00	; 0
    5c30:	51 ee       	ldi	r21, 0xE1	; 225
    5c32:	60 e0       	ldi	r22, 0x00	; 0
    5c34:	70 e0       	ldi	r23, 0x00	; 0
    5c36:	30 dc       	rcall	.-1952   	; 0x5498 <serial_create>
    5c38:	90 93 94 15 	sts	0x1594, r25	; 0x801594 <_com_serial_instance+0x1>
    5c3c:	80 93 93 15 	sts	0x1593, r24	; 0x801593 <_com_serial_instance>
    5c40:	ed ec       	ldi	r30, 0xCD	; 205
    5c42:	f5 e1       	ldi	r31, 0x15	; 21
    5c44:	83 e1       	ldi	r24, 0x13	; 19
    5c46:	92 e0       	ldi	r25, 0x02	; 2
    5c48:	91 83       	std	Z+1, r25	; 0x01
    5c4a:	80 83       	st	Z, r24
    5c4c:	93 83       	std	Z+3, r25	; 0x03
    5c4e:	82 83       	std	Z+2, r24	; 0x02
    5c50:	0f 91       	pop	r16
    5c52:	ef 90       	pop	r14
    5c54:	cf 90       	pop	r12
    5c56:	af 90       	pop	r10
    5c58:	9f 90       	pop	r9
    5c5a:	8f 90       	pop	r8
    5c5c:	08 95       	ret

00005c5e <_callBack>:
    5c5e:	e0 91 9d 15 	lds	r30, 0x159D	; 0x80159d <_callBackFunction>
    5c62:	f0 91 9e 15 	lds	r31, 0x159E	; 0x80159e <_callBackFunction+0x1>
    5c66:	30 97       	sbiw	r30, 0x00	; 0
    5c68:	09 f0       	breq	.+2      	; 0x5c6c <_callBack+0xe>
    5c6a:	19 95       	eicall
    5c6c:	08 95       	ret

00005c6e <_tsl2591TwiCallback>:
    5c6e:	64 50       	subi	r22, 0x04	; 4
    5c70:	62 30       	cpi	r22, 0x02	; 2
    5c72:	08 f0       	brcs	.+2      	; 0x5c76 <_tsl2591TwiCallback+0x8>
    5c74:	3b c0       	rjmp	.+118    	; 0x5cec <_tsl2591TwiCallback+0x7e>
    5c76:	20 91 9c 15 	lds	r18, 0x159C	; 0x80159c <_nextState>
    5c7a:	22 30       	cpi	r18, 0x02	; 2
    5c7c:	79 f0       	breq	.+30     	; 0x5c9c <_tsl2591TwiCallback+0x2e>
    5c7e:	18 f4       	brcc	.+6      	; 0x5c86 <_tsl2591TwiCallback+0x18>
    5c80:	21 30       	cpi	r18, 0x01	; 1
    5c82:	31 f0       	breq	.+12     	; 0x5c90 <_tsl2591TwiCallback+0x22>
    5c84:	30 c0       	rjmp	.+96     	; 0x5ce6 <_tsl2591TwiCallback+0x78>
    5c86:	23 30       	cpi	r18, 0x03	; 3
    5c88:	81 f0       	breq	.+32     	; 0x5caa <_tsl2591TwiCallback+0x3c>
    5c8a:	24 30       	cpi	r18, 0x04	; 4
    5c8c:	a1 f0       	breq	.+40     	; 0x5cb6 <_tsl2591TwiCallback+0x48>
    5c8e:	2b c0       	rjmp	.+86     	; 0x5ce6 <_tsl2591TwiCallback+0x78>
    5c90:	22 e0       	ldi	r18, 0x02	; 2
    5c92:	20 93 9c 15 	sts	0x159C, r18	; 0x80159c <_nextState>
    5c96:	61 e0       	ldi	r22, 0x01	; 1
    5c98:	10 c2       	rjmp	.+1056   	; 0x60ba <twiReceive>
    5c9a:	08 95       	ret
    5c9c:	fa 01       	movw	r30, r20
    5c9e:	80 81       	ld	r24, Z
    5ca0:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <_deviceId>
    5ca4:	82 e0       	ldi	r24, 0x02	; 2
    5ca6:	db cf       	rjmp	.-74     	; 0x5c5e <_callBack>
    5ca8:	08 95       	ret
    5caa:	24 e0       	ldi	r18, 0x04	; 4
    5cac:	20 93 9c 15 	sts	0x159C, r18	; 0x80159c <_nextState>
    5cb0:	64 e0       	ldi	r22, 0x04	; 4
    5cb2:	03 c2       	rjmp	.+1030   	; 0x60ba <twiReceive>
    5cb4:	08 95       	ret
    5cb6:	fa 01       	movw	r30, r20
    5cb8:	81 81       	ldd	r24, Z+1	; 0x01
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	98 2f       	mov	r25, r24
    5cbe:	88 27       	eor	r24, r24
    5cc0:	20 81       	ld	r18, Z
    5cc2:	82 2b       	or	r24, r18
    5cc4:	90 93 98 15 	sts	0x1598, r25	; 0x801598 <_fullSpectrumRaw+0x1>
    5cc8:	80 93 97 15 	sts	0x1597, r24	; 0x801597 <_fullSpectrumRaw>
    5ccc:	83 81       	ldd	r24, Z+3	; 0x03
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	98 2f       	mov	r25, r24
    5cd2:	88 27       	eor	r24, r24
    5cd4:	22 81       	ldd	r18, Z+2	; 0x02
    5cd6:	82 2b       	or	r24, r18
    5cd8:	90 93 96 15 	sts	0x1596, r25	; 0x801596 <_infraredRaw+0x1>
    5cdc:	80 93 95 15 	sts	0x1595, r24	; 0x801595 <_infraredRaw>
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	bd cf       	rjmp	.-134    	; 0x5c5e <_callBack>
    5ce4:	08 95       	ret
    5ce6:	80 e0       	ldi	r24, 0x00	; 0
    5ce8:	ba cf       	rjmp	.-140    	; 0x5c5e <_callBack>
    5cea:	08 95       	ret
    5cec:	10 92 9c 15 	sts	0x159C, r1	; 0x80159c <_nextState>
    5cf0:	86 e0       	ldi	r24, 0x06	; 6
    5cf2:	b5 cf       	rjmp	.-150    	; 0x5c5e <_callBack>
    5cf4:	08 95       	ret

00005cf6 <_twiTransmit>:
    5cf6:	20 91 9f 15 	lds	r18, 0x159F	; 0x80159f <_twiHandler>
    5cfa:	30 91 a0 15 	lds	r19, 0x15A0	; 0x8015a0 <_twiHandler+0x1>
    5cfe:	21 15       	cp	r18, r1
    5d00:	31 05       	cpc	r19, r1
    5d02:	41 f0       	breq	.+16     	; 0x5d14 <_twiTransmit+0x1e>
    5d04:	46 2f       	mov	r20, r22
    5d06:	bc 01       	movw	r22, r24
    5d08:	c9 01       	movw	r24, r18
    5d0a:	8b d1       	rcall	.+790    	; 0x6022 <twiTransmit>
    5d0c:	82 30       	cpi	r24, 0x02	; 2
    5d0e:	21 f0       	breq	.+8      	; 0x5d18 <_twiTransmit+0x22>
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	08 95       	ret
    5d14:	87 e0       	ldi	r24, 0x07	; 7
    5d16:	08 95       	ret
    5d18:	85 e0       	ldi	r24, 0x05	; 5
    5d1a:	08 95       	ret

00005d1c <tsl2591_initialise>:
    5d1c:	0f 93       	push	r16
    5d1e:	1f 93       	push	r17
    5d20:	90 93 9e 15 	sts	0x159E, r25	; 0x80159e <_callBackFunction+0x1>
    5d24:	80 93 9d 15 	sts	0x159D, r24	; 0x80159d <_callBackFunction>
    5d28:	07 e3       	ldi	r16, 0x37	; 55
    5d2a:	1e e2       	ldi	r17, 0x2E	; 46
    5d2c:	20 e0       	ldi	r18, 0x00	; 0
    5d2e:	34 e2       	ldi	r19, 0x24	; 36
    5d30:	44 ef       	ldi	r20, 0xF4	; 244
    5d32:	50 e0       	ldi	r21, 0x00	; 0
    5d34:	60 e0       	ldi	r22, 0x00	; 0
    5d36:	89 e2       	ldi	r24, 0x29	; 41
    5d38:	23 d1       	rcall	.+582    	; 0x5f80 <twiCreate>
    5d3a:	90 93 a0 15 	sts	0x15A0, r25	; 0x8015a0 <_twiHandler+0x1>
    5d3e:	80 93 9f 15 	sts	0x159F, r24	; 0x80159f <_twiHandler>
    5d42:	89 2b       	or	r24, r25
    5d44:	11 f0       	breq	.+4      	; 0x5d4a <tsl2591_initialise+0x2e>
    5d46:	80 e0       	ldi	r24, 0x00	; 0
    5d48:	01 c0       	rjmp	.+2      	; 0x5d4c <tsl2591_initialise+0x30>
    5d4a:	88 e0       	ldi	r24, 0x08	; 8
    5d4c:	1f 91       	pop	r17
    5d4e:	0f 91       	pop	r16
    5d50:	08 95       	ret

00005d52 <tsl2591_enable>:
    5d52:	cf 93       	push	r28
    5d54:	df 93       	push	r29
    5d56:	1f 92       	push	r1
    5d58:	1f 92       	push	r1
    5d5a:	cd b7       	in	r28, 0x3d	; 61
    5d5c:	de b7       	in	r29, 0x3e	; 62
    5d5e:	80 ea       	ldi	r24, 0xA0	; 160
    5d60:	89 83       	std	Y+1, r24	; 0x01
    5d62:	83 e0       	ldi	r24, 0x03	; 3
    5d64:	8a 83       	std	Y+2, r24	; 0x02
    5d66:	10 92 9c 15 	sts	0x159C, r1	; 0x80159c <_nextState>
    5d6a:	62 e0       	ldi	r22, 0x02	; 2
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	01 96       	adiw	r24, 0x01	; 1
    5d70:	c2 df       	rcall	.-124    	; 0x5cf6 <_twiTransmit>
    5d72:	0f 90       	pop	r0
    5d74:	0f 90       	pop	r0
    5d76:	df 91       	pop	r29
    5d78:	cf 91       	pop	r28
    5d7a:	08 95       	ret

00005d7c <tsl2591_fetchData>:
    5d7c:	cf 93       	push	r28
    5d7e:	df 93       	push	r29
    5d80:	1f 92       	push	r1
    5d82:	cd b7       	in	r28, 0x3d	; 61
    5d84:	de b7       	in	r29, 0x3e	; 62
    5d86:	84 eb       	ldi	r24, 0xB4	; 180
    5d88:	89 83       	std	Y+1, r24	; 0x01
    5d8a:	83 e0       	ldi	r24, 0x03	; 3
    5d8c:	80 93 9c 15 	sts	0x159C, r24	; 0x80159c <_nextState>
    5d90:	61 e0       	ldi	r22, 0x01	; 1
    5d92:	ce 01       	movw	r24, r28
    5d94:	01 96       	adiw	r24, 0x01	; 1
    5d96:	af df       	rcall	.-162    	; 0x5cf6 <_twiTransmit>
    5d98:	0f 90       	pop	r0
    5d9a:	df 91       	pop	r29
    5d9c:	cf 91       	pop	r28
    5d9e:	08 95       	ret

00005da0 <tsl2591_getLux>:
    5da0:	2f 92       	push	r2
    5da2:	3f 92       	push	r3
    5da4:	4f 92       	push	r4
    5da6:	5f 92       	push	r5
    5da8:	6f 92       	push	r6
    5daa:	7f 92       	push	r7
    5dac:	8f 92       	push	r8
    5dae:	9f 92       	push	r9
    5db0:	af 92       	push	r10
    5db2:	bf 92       	push	r11
    5db4:	cf 92       	push	r12
    5db6:	df 92       	push	r13
    5db8:	ef 92       	push	r14
    5dba:	ff 92       	push	r15
    5dbc:	0f 93       	push	r16
    5dbe:	1f 93       	push	r17
    5dc0:	cf 93       	push	r28
    5dc2:	df 93       	push	r29
    5dc4:	c0 91 95 15 	lds	r28, 0x1595	; 0x801595 <_infraredRaw>
    5dc8:	d0 91 96 15 	lds	r29, 0x1596	; 0x801596 <_infraredRaw+0x1>
    5dcc:	cf 3f       	cpi	r28, 0xFF	; 255
    5dce:	2f ef       	ldi	r18, 0xFF	; 255
    5dd0:	d2 07       	cpc	r29, r18
    5dd2:	41 f0       	breq	.+16     	; 0x5de4 <tsl2591_getLux+0x44>
    5dd4:	60 91 97 15 	lds	r22, 0x1597	; 0x801597 <_fullSpectrumRaw>
    5dd8:	70 91 98 15 	lds	r23, 0x1598	; 0x801598 <_fullSpectrumRaw+0x1>
    5ddc:	6f 3f       	cpi	r22, 0xFF	; 255
    5dde:	ef ef       	ldi	r30, 0xFF	; 255
    5de0:	7e 07       	cpc	r23, r30
    5de2:	59 f4       	brne	.+22     	; 0x5dfa <tsl2591_getLux+0x5a>
    5de4:	4f ef       	ldi	r20, 0xFF	; 255
    5de6:	5f ef       	ldi	r21, 0xFF	; 255
    5de8:	6f e7       	ldi	r22, 0x7F	; 127
    5dea:	7f e7       	ldi	r23, 0x7F	; 127
    5dec:	fc 01       	movw	r30, r24
    5dee:	40 83       	st	Z, r20
    5df0:	51 83       	std	Z+1, r21	; 0x01
    5df2:	62 83       	std	Z+2, r22	; 0x02
    5df4:	73 83       	std	Z+3, r23	; 0x03
    5df6:	83 e0       	ldi	r24, 0x03	; 3
    5df8:	9f c0       	rjmp	.+318    	; 0x5f38 <tsl2591_getLux+0x198>
    5dfa:	1c 01       	movw	r2, r24
    5dfc:	80 e0       	ldi	r24, 0x00	; 0
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	62 d6       	rcall	.+3268   	; 0x6ac6 <__floatunsisf>
    5e02:	2b 01       	movw	r4, r22
    5e04:	3c 01       	movw	r6, r24
    5e06:	be 01       	movw	r22, r28
    5e08:	80 e0       	ldi	r24, 0x00	; 0
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	5c d6       	rcall	.+3256   	; 0x6ac6 <__floatunsisf>
    5e0e:	4b 01       	movw	r8, r22
    5e10:	5c 01       	movw	r10, r24
    5e12:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <_currentIntegrationTime>
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	01 96       	adiw	r24, 0x01	; 1
    5e1a:	24 e6       	ldi	r18, 0x64	; 100
    5e1c:	28 9f       	mul	r18, r24
    5e1e:	b0 01       	movw	r22, r0
    5e20:	29 9f       	mul	r18, r25
    5e22:	70 0d       	add	r23, r0
    5e24:	11 24       	eor	r1, r1
    5e26:	80 91 9b 15 	lds	r24, 0x159B	; 0x80159b <_currentGain>
    5e2a:	80 32       	cpi	r24, 0x20	; 32
    5e2c:	69 f0       	breq	.+26     	; 0x5e48 <tsl2591_getLux+0xa8>
    5e2e:	80 33       	cpi	r24, 0x30	; 48
    5e30:	a1 f0       	breq	.+40     	; 0x5e5a <tsl2591_getLux+0xba>
    5e32:	80 31       	cpi	r24, 0x10	; 16
    5e34:	e1 f4       	brne	.+56     	; 0x5e6e <tsl2591_getLux+0xce>
    5e36:	0f 2e       	mov	r0, r31
    5e38:	c1 2c       	mov	r12, r1
    5e3a:	d1 2c       	mov	r13, r1
    5e3c:	f8 ec       	ldi	r31, 0xC8	; 200
    5e3e:	ef 2e       	mov	r14, r31
    5e40:	f1 e4       	ldi	r31, 0x41	; 65
    5e42:	ff 2e       	mov	r15, r31
    5e44:	f0 2d       	mov	r31, r0
    5e46:	1b c0       	rjmp	.+54     	; 0x5e7e <tsl2591_getLux+0xde>
    5e48:	0f 2e       	mov	r0, r31
    5e4a:	c1 2c       	mov	r12, r1
    5e4c:	d1 2c       	mov	r13, r1
    5e4e:	f6 ed       	ldi	r31, 0xD6	; 214
    5e50:	ef 2e       	mov	r14, r31
    5e52:	f3 e4       	ldi	r31, 0x43	; 67
    5e54:	ff 2e       	mov	r15, r31
    5e56:	f0 2d       	mov	r31, r0
    5e58:	12 c0       	rjmp	.+36     	; 0x5e7e <tsl2591_getLux+0xde>
    5e5a:	0f 2e       	mov	r0, r31
    5e5c:	c1 2c       	mov	r12, r1
    5e5e:	f0 e5       	ldi	r31, 0x50	; 80
    5e60:	df 2e       	mov	r13, r31
    5e62:	fa e1       	ldi	r31, 0x1A	; 26
    5e64:	ef 2e       	mov	r14, r31
    5e66:	f6 e4       	ldi	r31, 0x46	; 70
    5e68:	ff 2e       	mov	r15, r31
    5e6a:	f0 2d       	mov	r31, r0
    5e6c:	08 c0       	rjmp	.+16     	; 0x5e7e <tsl2591_getLux+0xde>
    5e6e:	0f 2e       	mov	r0, r31
    5e70:	c1 2c       	mov	r12, r1
    5e72:	d1 2c       	mov	r13, r1
    5e74:	f0 e8       	ldi	r31, 0x80	; 128
    5e76:	ef 2e       	mov	r14, r31
    5e78:	ff e3       	ldi	r31, 0x3F	; 63
    5e7a:	ff 2e       	mov	r15, r31
    5e7c:	f0 2d       	mov	r31, r0
    5e7e:	07 2e       	mov	r0, r23
    5e80:	00 0c       	add	r0, r0
    5e82:	88 0b       	sbc	r24, r24
    5e84:	99 0b       	sbc	r25, r25
    5e86:	21 d6       	rcall	.+3138   	; 0x6aca <__floatsisf>
    5e88:	a7 01       	movw	r20, r14
    5e8a:	96 01       	movw	r18, r12
    5e8c:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__mulsf3>
    5e90:	20 e0       	ldi	r18, 0x00	; 0
    5e92:	30 e0       	ldi	r19, 0x00	; 0
    5e94:	4c ec       	ldi	r20, 0xCC	; 204
    5e96:	53 e4       	ldi	r21, 0x43	; 67
    5e98:	a5 d5       	rcall	.+2890   	; 0x69e4 <__divsf3>
    5e9a:	6b 01       	movw	r12, r22
    5e9c:	7c 01       	movw	r14, r24
    5e9e:	25 e8       	ldi	r18, 0x85	; 133
    5ea0:	3b ee       	ldi	r19, 0xEB	; 235
    5ea2:	41 ed       	ldi	r20, 0xD1	; 209
    5ea4:	5f e3       	ldi	r21, 0x3F	; 63
    5ea6:	c5 01       	movw	r24, r10
    5ea8:	b4 01       	movw	r22, r8
    5eaa:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__mulsf3>
    5eae:	9b 01       	movw	r18, r22
    5eb0:	ac 01       	movw	r20, r24
    5eb2:	c3 01       	movw	r24, r6
    5eb4:	b2 01       	movw	r22, r4
    5eb6:	0e 94 cb 23 	call	0x4796	; 0x4796 <__subsf3>
    5eba:	a7 01       	movw	r20, r14
    5ebc:	96 01       	movw	r18, r12
    5ebe:	92 d5       	rcall	.+2852   	; 0x69e4 <__divsf3>
    5ec0:	16 2f       	mov	r17, r22
    5ec2:	d7 2f       	mov	r29, r23
    5ec4:	c8 2f       	mov	r28, r24
    5ec6:	09 2f       	mov	r16, r25
    5ec8:	2d e3       	ldi	r18, 0x3D	; 61
    5eca:	3a e0       	ldi	r19, 0x0A	; 10
    5ecc:	47 e1       	ldi	r20, 0x17	; 23
    5ece:	5f e3       	ldi	r21, 0x3F	; 63
    5ed0:	c3 01       	movw	r24, r6
    5ed2:	b2 01       	movw	r22, r4
    5ed4:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__mulsf3>
    5ed8:	2b 01       	movw	r4, r22
    5eda:	3c 01       	movw	r6, r24
    5edc:	26 ef       	ldi	r18, 0xF6	; 246
    5ede:	38 e2       	ldi	r19, 0x28	; 40
    5ee0:	4c e5       	ldi	r20, 0x5C	; 92
    5ee2:	5f e3       	ldi	r21, 0x3F	; 63
    5ee4:	c5 01       	movw	r24, r10
    5ee6:	b4 01       	movw	r22, r8
    5ee8:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__mulsf3>
    5eec:	9b 01       	movw	r18, r22
    5eee:	ac 01       	movw	r20, r24
    5ef0:	c3 01       	movw	r24, r6
    5ef2:	b2 01       	movw	r22, r4
    5ef4:	0e 94 cb 23 	call	0x4796	; 0x4796 <__subsf3>
    5ef8:	a7 01       	movw	r20, r14
    5efa:	96 01       	movw	r18, r12
    5efc:	73 d5       	rcall	.+2790   	; 0x69e4 <__divsf3>
    5efe:	c6 2e       	mov	r12, r22
    5f00:	d7 2e       	mov	r13, r23
    5f02:	e8 2e       	mov	r14, r24
    5f04:	f9 2e       	mov	r15, r25
    5f06:	26 2f       	mov	r18, r22
    5f08:	37 2f       	mov	r19, r23
    5f0a:	48 2f       	mov	r20, r24
    5f0c:	59 2f       	mov	r21, r25
    5f0e:	61 2f       	mov	r22, r17
    5f10:	7d 2f       	mov	r23, r29
    5f12:	8c 2f       	mov	r24, r28
    5f14:	90 2f       	mov	r25, r16
    5f16:	14 d6       	rcall	.+3112   	; 0x6b40 <__gesf2>
    5f18:	18 16       	cp	r1, r24
    5f1a:	24 f0       	brlt	.+8      	; 0x5f24 <tsl2591_getLux+0x184>
    5f1c:	1c 2d       	mov	r17, r12
    5f1e:	dd 2d       	mov	r29, r13
    5f20:	ce 2d       	mov	r28, r14
    5f22:	0f 2d       	mov	r16, r15
    5f24:	41 2f       	mov	r20, r17
    5f26:	5d 2f       	mov	r21, r29
    5f28:	6c 2f       	mov	r22, r28
    5f2a:	70 2f       	mov	r23, r16
    5f2c:	f1 01       	movw	r30, r2
    5f2e:	40 83       	st	Z, r20
    5f30:	51 83       	std	Z+1, r21	; 0x01
    5f32:	62 83       	std	Z+2, r22	; 0x02
    5f34:	73 83       	std	Z+3, r23	; 0x03
    5f36:	80 e0       	ldi	r24, 0x00	; 0
    5f38:	df 91       	pop	r29
    5f3a:	cf 91       	pop	r28
    5f3c:	1f 91       	pop	r17
    5f3e:	0f 91       	pop	r16
    5f40:	ff 90       	pop	r15
    5f42:	ef 90       	pop	r14
    5f44:	df 90       	pop	r13
    5f46:	cf 90       	pop	r12
    5f48:	bf 90       	pop	r11
    5f4a:	af 90       	pop	r10
    5f4c:	9f 90       	pop	r9
    5f4e:	8f 90       	pop	r8
    5f50:	7f 90       	pop	r7
    5f52:	6f 90       	pop	r6
    5f54:	5f 90       	pop	r5
    5f56:	4f 90       	pop	r4
    5f58:	3f 90       	pop	r3
    5f5a:	2f 90       	pop	r2
    5f5c:	08 95       	ret

00005f5e <_initTwiInterface>:
    5f5e:	80 91 af 15 	lds	r24, 0x15AF	; 0x8015af <_twiIsInitiated>
    5f62:	81 11       	cpse	r24, r1
    5f64:	0c c0       	rjmp	.+24     	; 0x5f7e <_initTwiInterface+0x20>
    5f66:	8c e0       	ldi	r24, 0x0C	; 12
    5f68:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5f6c:	8f ef       	ldi	r24, 0xFF	; 255
    5f6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5f72:	84 e0       	ldi	r24, 0x04	; 4
    5f74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f78:	81 e0       	ldi	r24, 0x01	; 1
    5f7a:	80 93 af 15 	sts	0x15AF, r24	; 0x8015af <_twiIsInitiated>
    5f7e:	08 95       	ret

00005f80 <twiCreate>:
    5f80:	af 92       	push	r10
    5f82:	bf 92       	push	r11
    5f84:	cf 92       	push	r12
    5f86:	df 92       	push	r13
    5f88:	ef 92       	push	r14
    5f8a:	ff 92       	push	r15
    5f8c:	0f 93       	push	r16
    5f8e:	1f 93       	push	r17
    5f90:	cf 93       	push	r28
    5f92:	df 93       	push	r29
    5f94:	a8 2e       	mov	r10, r24
    5f96:	b6 2e       	mov	r11, r22
    5f98:	69 01       	movw	r12, r18
    5f9a:	7a 01       	movw	r14, r20
    5f9c:	84 e0       	ldi	r24, 0x04	; 4
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	27 d6       	rcall	.+3150   	; 0x6bf0 <malloc>
    5fa2:	ec 01       	movw	r28, r24
    5fa4:	89 2b       	or	r24, r25
    5fa6:	61 f1       	breq	.+88     	; 0x6000 <twiCreate+0x80>
    5fa8:	a8 82       	st	Y, r10
    5faa:	81 e0       	ldi	r24, 0x01	; 1
    5fac:	b8 12       	cpse	r11, r24
    5fae:	12 c0       	rjmp	.+36     	; 0x5fd4 <twiCreate+0x54>
    5fb0:	c7 01       	movw	r24, r14
    5fb2:	b6 01       	movw	r22, r12
    5fb4:	20 ea       	ldi	r18, 0xA0	; 160
    5fb6:	36 e8       	ldi	r19, 0x86	; 134
    5fb8:	41 e0       	ldi	r20, 0x01	; 1
    5fba:	50 e0       	ldi	r21, 0x00	; 0
    5fbc:	c6 d5       	rcall	.+2956   	; 0x6b4a <__udivmodsi4>
    5fbe:	da 01       	movw	r26, r20
    5fc0:	c9 01       	movw	r24, r18
    5fc2:	40 97       	sbiw	r24, 0x10	; 16
    5fc4:	a1 09       	sbc	r26, r1
    5fc6:	b1 09       	sbc	r27, r1
    5fc8:	b6 95       	lsr	r27
    5fca:	a7 95       	ror	r26
    5fcc:	97 95       	ror	r25
    5fce:	87 95       	ror	r24
    5fd0:	89 83       	std	Y+1, r24	; 0x01
    5fd2:	11 c0       	rjmp	.+34     	; 0x5ff6 <twiCreate+0x76>
    5fd4:	c7 01       	movw	r24, r14
    5fd6:	b6 01       	movw	r22, r12
    5fd8:	20 e8       	ldi	r18, 0x80	; 128
    5fda:	3a e1       	ldi	r19, 0x1A	; 26
    5fdc:	46 e0       	ldi	r20, 0x06	; 6
    5fde:	50 e0       	ldi	r21, 0x00	; 0
    5fe0:	b4 d5       	rcall	.+2920   	; 0x6b4a <__udivmodsi4>
    5fe2:	da 01       	movw	r26, r20
    5fe4:	c9 01       	movw	r24, r18
    5fe6:	40 97       	sbiw	r24, 0x10	; 16
    5fe8:	a1 09       	sbc	r26, r1
    5fea:	b1 09       	sbc	r27, r1
    5fec:	b6 95       	lsr	r27
    5fee:	a7 95       	ror	r26
    5ff0:	97 95       	ror	r25
    5ff2:	87 95       	ror	r24
    5ff4:	89 83       	std	Y+1, r24	; 0x01
    5ff6:	1b 83       	std	Y+3, r17	; 0x03
    5ff8:	0a 83       	std	Y+2, r16	; 0x02
    5ffa:	8c 2f       	mov	r24, r28
    5ffc:	9d 2f       	mov	r25, r29
    5ffe:	02 c0       	rjmp	.+4      	; 0x6004 <twiCreate+0x84>
    6000:	80 e0       	ldi	r24, 0x00	; 0
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	df 91       	pop	r29
    6006:	cf 91       	pop	r28
    6008:	1f 91       	pop	r17
    600a:	0f 91       	pop	r16
    600c:	ff 90       	pop	r15
    600e:	ef 90       	pop	r14
    6010:	df 90       	pop	r13
    6012:	cf 90       	pop	r12
    6014:	bf 90       	pop	r11
    6016:	af 90       	pop	r10
    6018:	08 95       	ret

0000601a <twiIsBusy>:
    601a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    601e:	81 70       	andi	r24, 0x01	; 1
    6020:	08 95       	ret

00006022 <twiTransmit>:
    6022:	ff 92       	push	r15
    6024:	0f 93       	push	r16
    6026:	1f 93       	push	r17
    6028:	cf 93       	push	r28
    602a:	df 93       	push	r29
    602c:	00 97       	sbiw	r24, 0x00	; 0
    602e:	d1 f1       	breq	.+116    	; 0x60a4 <twiTransmit+0x82>
    6030:	4a 30       	cpi	r20, 0x0A	; 10
    6032:	d0 f5       	brcc	.+116    	; 0x60a8 <twiTransmit+0x86>
    6034:	f4 2e       	mov	r15, r20
    6036:	8b 01       	movw	r16, r22
    6038:	ec 01       	movw	r28, r24
    603a:	ef df       	rcall	.-34     	; 0x601a <twiIsBusy>
    603c:	81 11       	cpse	r24, r1
    603e:	36 c0       	rjmp	.+108    	; 0x60ac <twiTransmit+0x8a>
    6040:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <_twiCurrentHandler>
    6044:	90 91 a3 15 	lds	r25, 0x15A3	; 0x8015a3 <_twiCurrentHandler+0x1>
    6048:	c8 17       	cp	r28, r24
    604a:	d9 07       	cpc	r29, r25
    604c:	41 f0       	breq	.+16     	; 0x605e <twiTransmit+0x3c>
    604e:	87 df       	rcall	.-242    	; 0x5f5e <_initTwiInterface>
    6050:	89 81       	ldd	r24, Y+1	; 0x01
    6052:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    6056:	d0 93 a3 15 	sts	0x15A3, r29	; 0x8015a3 <_twiCurrentHandler+0x1>
    605a:	c0 93 a2 15 	sts	0x15A2, r28	; 0x8015a2 <_twiCurrentHandler>
    605e:	81 e0       	ldi	r24, 0x01	; 1
    6060:	8f 0d       	add	r24, r15
    6062:	80 93 a4 15 	sts	0x15A4, r24	; 0x8015a4 <_twiMessageLen>
    6066:	88 81       	ld	r24, Y
    6068:	88 0f       	add	r24, r24
    606a:	80 93 a5 15 	sts	0x15A5, r24	; 0x8015a5 <_twiMessageBuffer>
    606e:	ff 20       	and	r15, r15
    6070:	89 f0       	breq	.+34     	; 0x6094 <twiTransmit+0x72>
    6072:	f8 01       	movw	r30, r16
    6074:	a6 ea       	ldi	r26, 0xA6	; 166
    6076:	b5 e1       	ldi	r27, 0x15	; 21
    6078:	4f ef       	ldi	r20, 0xFF	; 255
    607a:	4f 0d       	add	r20, r15
    607c:	64 2f       	mov	r22, r20
    607e:	70 e0       	ldi	r23, 0x00	; 0
    6080:	cb 01       	movw	r24, r22
    6082:	01 96       	adiw	r24, 0x01	; 1
    6084:	b8 01       	movw	r22, r16
    6086:	68 0f       	add	r22, r24
    6088:	79 1f       	adc	r23, r25
    608a:	81 91       	ld	r24, Z+
    608c:	8d 93       	st	X+, r24
    608e:	e6 17       	cp	r30, r22
    6090:	f7 07       	cpc	r31, r23
    6092:	d9 f7       	brne	.-10     	; 0x608a <twiTransmit+0x68>
    6094:	88 ef       	ldi	r24, 0xF8	; 248
    6096:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    609a:	85 ea       	ldi	r24, 0xA5	; 165
    609c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60a0:	84 e0       	ldi	r24, 0x04	; 4
    60a2:	05 c0       	rjmp	.+10     	; 0x60ae <twiTransmit+0x8c>
    60a4:	86 e0       	ldi	r24, 0x06	; 6
    60a6:	03 c0       	rjmp	.+6      	; 0x60ae <twiTransmit+0x8c>
    60a8:	87 e0       	ldi	r24, 0x07	; 7
    60aa:	01 c0       	rjmp	.+2      	; 0x60ae <twiTransmit+0x8c>
    60ac:	82 e0       	ldi	r24, 0x02	; 2
    60ae:	df 91       	pop	r29
    60b0:	cf 91       	pop	r28
    60b2:	1f 91       	pop	r17
    60b4:	0f 91       	pop	r16
    60b6:	ff 90       	pop	r15
    60b8:	08 95       	ret

000060ba <twiReceive>:
    60ba:	1f 93       	push	r17
    60bc:	cf 93       	push	r28
    60be:	df 93       	push	r29
    60c0:	00 97       	sbiw	r24, 0x00	; 0
    60c2:	29 f1       	breq	.+74     	; 0x610e <twiReceive+0x54>
    60c4:	6b 30       	cpi	r22, 0x0B	; 11
    60c6:	28 f5       	brcc	.+74     	; 0x6112 <twiReceive+0x58>
    60c8:	16 2f       	mov	r17, r22
    60ca:	ec 01       	movw	r28, r24
    60cc:	a6 df       	rcall	.-180    	; 0x601a <twiIsBusy>
    60ce:	81 11       	cpse	r24, r1
    60d0:	22 c0       	rjmp	.+68     	; 0x6116 <twiReceive+0x5c>
    60d2:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <_twiCurrentHandler>
    60d6:	90 91 a3 15 	lds	r25, 0x15A3	; 0x8015a3 <_twiCurrentHandler+0x1>
    60da:	c8 17       	cp	r28, r24
    60dc:	d9 07       	cpc	r29, r25
    60de:	41 f0       	breq	.+16     	; 0x60f0 <twiReceive+0x36>
    60e0:	3e df       	rcall	.-388    	; 0x5f5e <_initTwiInterface>
    60e2:	89 81       	ldd	r24, Y+1	; 0x01
    60e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    60e8:	d0 93 a3 15 	sts	0x15A3, r29	; 0x8015a3 <_twiCurrentHandler+0x1>
    60ec:	c0 93 a2 15 	sts	0x15A2, r28	; 0x8015a2 <_twiCurrentHandler>
    60f0:	10 93 a4 15 	sts	0x15A4, r17	; 0x8015a4 <_twiMessageLen>
    60f4:	88 81       	ld	r24, Y
    60f6:	88 0f       	add	r24, r24
    60f8:	81 60       	ori	r24, 0x01	; 1
    60fa:	80 93 a5 15 	sts	0x15A5, r24	; 0x8015a5 <_twiMessageBuffer>
    60fe:	88 ef       	ldi	r24, 0xF8	; 248
    6100:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6104:	85 ea       	ldi	r24, 0xA5	; 165
    6106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    610a:	85 e0       	ldi	r24, 0x05	; 5
    610c:	05 c0       	rjmp	.+10     	; 0x6118 <twiReceive+0x5e>
    610e:	86 e0       	ldi	r24, 0x06	; 6
    6110:	03 c0       	rjmp	.+6      	; 0x6118 <twiReceive+0x5e>
    6112:	87 e0       	ldi	r24, 0x07	; 7
    6114:	01 c0       	rjmp	.+2      	; 0x6118 <twiReceive+0x5e>
    6116:	82 e0       	ldi	r24, 0x02	; 2
    6118:	df 91       	pop	r29
    611a:	cf 91       	pop	r28
    611c:	1f 91       	pop	r17
    611e:	08 95       	ret

00006120 <__vector_39>:
    6120:	1f 92       	push	r1
    6122:	0f 92       	push	r0
    6124:	0f b6       	in	r0, 0x3f	; 63
    6126:	0f 92       	push	r0
    6128:	11 24       	eor	r1, r1
    612a:	0b b6       	in	r0, 0x3b	; 59
    612c:	0f 92       	push	r0
    612e:	2f 93       	push	r18
    6130:	3f 93       	push	r19
    6132:	4f 93       	push	r20
    6134:	5f 93       	push	r21
    6136:	6f 93       	push	r22
    6138:	7f 93       	push	r23
    613a:	8f 93       	push	r24
    613c:	9f 93       	push	r25
    613e:	af 93       	push	r26
    6140:	bf 93       	push	r27
    6142:	ef 93       	push	r30
    6144:	ff 93       	push	r31
    6146:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    614a:	8e 2f       	mov	r24, r30
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	fc 01       	movw	r30, r24
    6150:	38 97       	sbiw	r30, 0x08	; 8
    6152:	e1 35       	cpi	r30, 0x51	; 81
    6154:	f1 05       	cpc	r31, r1
    6156:	08 f0       	brcs	.+2      	; 0x615a <__vector_39+0x3a>
    6158:	75 c0       	rjmp	.+234    	; 0x6244 <__vector_39+0x124>
    615a:	88 27       	eor	r24, r24
    615c:	e4 58       	subi	r30, 0x84	; 132
    615e:	ff 4f       	sbci	r31, 0xFF	; 255
    6160:	8f 4f       	sbci	r24, 0xFF	; 255
    6162:	15 c5       	rjmp	.+2602   	; 0x6b8e <__tablejump2__>
    6164:	10 92 a1 15 	sts	0x15A1, r1	; 0x8015a1 <_index.1885>
    6168:	e0 91 a1 15 	lds	r30, 0x15A1	; 0x8015a1 <_index.1885>
    616c:	80 91 a4 15 	lds	r24, 0x15A4	; 0x8015a4 <_twiMessageLen>
    6170:	e8 17       	cp	r30, r24
    6172:	70 f4       	brcc	.+28     	; 0x6190 <__vector_39+0x70>
    6174:	81 e0       	ldi	r24, 0x01	; 1
    6176:	8e 0f       	add	r24, r30
    6178:	80 93 a1 15 	sts	0x15A1, r24	; 0x8015a1 <_index.1885>
    617c:	f0 e0       	ldi	r31, 0x00	; 0
    617e:	eb 55       	subi	r30, 0x5B	; 91
    6180:	fa 4e       	sbci	r31, 0xEA	; 234
    6182:	80 81       	ld	r24, Z
    6184:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6188:	85 e8       	ldi	r24, 0x85	; 133
    618a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    618e:	72 c0       	rjmp	.+228    	; 0x6274 <__vector_39+0x154>
    6190:	84 e9       	ldi	r24, 0x94	; 148
    6192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6196:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <_twiCurrentHandler>
    619a:	90 91 a3 15 	lds	r25, 0x15A3	; 0x8015a3 <_twiCurrentHandler+0x1>
    619e:	dc 01       	movw	r26, r24
    61a0:	12 96       	adiw	r26, 0x02	; 2
    61a2:	ed 91       	ld	r30, X+
    61a4:	fc 91       	ld	r31, X
    61a6:	13 97       	sbiw	r26, 0x03	; 3
    61a8:	30 97       	sbiw	r30, 0x00	; 0
    61aa:	09 f4       	brne	.+2      	; 0x61ae <__vector_39+0x8e>
    61ac:	63 c0       	rjmp	.+198    	; 0x6274 <__vector_39+0x154>
    61ae:	20 e0       	ldi	r18, 0x00	; 0
    61b0:	40 e0       	ldi	r20, 0x00	; 0
    61b2:	50 e0       	ldi	r21, 0x00	; 0
    61b4:	64 e0       	ldi	r22, 0x04	; 4
    61b6:	19 95       	eicall
    61b8:	5d c0       	rjmp	.+186    	; 0x6274 <__vector_39+0x154>
    61ba:	e0 91 a1 15 	lds	r30, 0x15A1	; 0x8015a1 <_index.1885>
    61be:	81 e0       	ldi	r24, 0x01	; 1
    61c0:	8e 0f       	add	r24, r30
    61c2:	80 93 a1 15 	sts	0x15A1, r24	; 0x8015a1 <_index.1885>
    61c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    61ca:	f0 e0       	ldi	r31, 0x00	; 0
    61cc:	eb 55       	subi	r30, 0x5B	; 91
    61ce:	fa 4e       	sbci	r31, 0xEA	; 234
    61d0:	80 83       	st	Z, r24
    61d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    61d6:	80 34       	cpi	r24, 0x40	; 64
    61d8:	11 f4       	brne	.+4      	; 0x61de <__vector_39+0xbe>
    61da:	10 92 a1 15 	sts	0x15A1, r1	; 0x8015a1 <_index.1885>
    61de:	20 91 a1 15 	lds	r18, 0x15A1	; 0x8015a1 <_index.1885>
    61e2:	30 e0       	ldi	r19, 0x00	; 0
    61e4:	80 91 a4 15 	lds	r24, 0x15A4	; 0x8015a4 <_twiMessageLen>
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	01 97       	sbiw	r24, 0x01	; 1
    61ec:	28 17       	cp	r18, r24
    61ee:	39 07       	cpc	r19, r25
    61f0:	24 f4       	brge	.+8      	; 0x61fa <__vector_39+0xda>
    61f2:	85 ec       	ldi	r24, 0xC5	; 197
    61f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61f8:	3d c0       	rjmp	.+122    	; 0x6274 <__vector_39+0x154>
    61fa:	85 e8       	ldi	r24, 0x85	; 133
    61fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6200:	39 c0       	rjmp	.+114    	; 0x6274 <__vector_39+0x154>
    6202:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6206:	e0 91 a1 15 	lds	r30, 0x15A1	; 0x8015a1 <_index.1885>
    620a:	f0 e0       	ldi	r31, 0x00	; 0
    620c:	eb 55       	subi	r30, 0x5B	; 91
    620e:	fa 4e       	sbci	r31, 0xEA	; 234
    6210:	80 83       	st	Z, r24
    6212:	84 e9       	ldi	r24, 0x94	; 148
    6214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6218:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <_twiCurrentHandler>
    621c:	90 91 a3 15 	lds	r25, 0x15A3	; 0x8015a3 <_twiCurrentHandler+0x1>
    6220:	dc 01       	movw	r26, r24
    6222:	12 96       	adiw	r26, 0x02	; 2
    6224:	ed 91       	ld	r30, X+
    6226:	fc 91       	ld	r31, X
    6228:	13 97       	sbiw	r26, 0x03	; 3
    622a:	30 97       	sbiw	r30, 0x00	; 0
    622c:	19 f1       	breq	.+70     	; 0x6274 <__vector_39+0x154>
    622e:	20 91 a4 15 	lds	r18, 0x15A4	; 0x8015a4 <_twiMessageLen>
    6232:	45 ea       	ldi	r20, 0xA5	; 165
    6234:	55 e1       	ldi	r21, 0x15	; 21
    6236:	65 e0       	ldi	r22, 0x05	; 5
    6238:	19 95       	eicall
    623a:	1c c0       	rjmp	.+56     	; 0x6274 <__vector_39+0x154>
    623c:	85 ea       	ldi	r24, 0xA5	; 165
    623e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6242:	18 c0       	rjmp	.+48     	; 0x6274 <__vector_39+0x154>
    6244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6248:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    624c:	84 e0       	ldi	r24, 0x04	; 4
    624e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6252:	80 91 a2 15 	lds	r24, 0x15A2	; 0x8015a2 <_twiCurrentHandler>
    6256:	90 91 a3 15 	lds	r25, 0x15A3	; 0x8015a3 <_twiCurrentHandler+0x1>
    625a:	dc 01       	movw	r26, r24
    625c:	12 96       	adiw	r26, 0x02	; 2
    625e:	ed 91       	ld	r30, X+
    6260:	fc 91       	ld	r31, X
    6262:	13 97       	sbiw	r26, 0x03	; 3
    6264:	30 97       	sbiw	r30, 0x00	; 0
    6266:	31 f0       	breq	.+12     	; 0x6274 <__vector_39+0x154>
    6268:	20 e0       	ldi	r18, 0x00	; 0
    626a:	40 e0       	ldi	r20, 0x00	; 0
    626c:	50 e0       	ldi	r21, 0x00	; 0
    626e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    6272:	19 95       	eicall
    6274:	ff 91       	pop	r31
    6276:	ef 91       	pop	r30
    6278:	bf 91       	pop	r27
    627a:	af 91       	pop	r26
    627c:	9f 91       	pop	r25
    627e:	8f 91       	pop	r24
    6280:	7f 91       	pop	r23
    6282:	6f 91       	pop	r22
    6284:	5f 91       	pop	r21
    6286:	4f 91       	pop	r20
    6288:	3f 91       	pop	r19
    628a:	2f 91       	pop	r18
    628c:	0f 90       	pop	r0
    628e:	0b be       	out	0x3b, r0	; 59
    6290:	0f 90       	pop	r0
    6292:	0f be       	out	0x3f, r0	; 63
    6294:	0f 90       	pop	r0
    6296:	1f 90       	pop	r1
    6298:	18 95       	reti

0000629a <fifo_init>:
    629a:	fc 01       	movw	r30, r24
    629c:	41 11       	cpse	r20, r1
    629e:	01 c0       	rjmp	.+2      	; 0x62a2 <fifo_init+0x8>
    62a0:	c8 d5       	rcall	.+2960   	; 0x6e32 <abort>
    62a2:	84 2f       	mov	r24, r20
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	9c 01       	movw	r18, r24
    62a8:	21 50       	subi	r18, 0x01	; 1
    62aa:	31 09       	sbc	r19, r1
    62ac:	82 23       	and	r24, r18
    62ae:	93 23       	and	r25, r19
    62b0:	89 2b       	or	r24, r25
    62b2:	09 f0       	breq	.+2      	; 0x62b6 <fifo_init+0x1c>
    62b4:	be d5       	rcall	.+2940   	; 0x6e32 <abort>
    62b6:	41 38       	cpi	r20, 0x81	; 129
    62b8:	08 f0       	brcs	.+2      	; 0x62bc <fifo_init+0x22>
    62ba:	bb d5       	rcall	.+2934   	; 0x6e32 <abort>
    62bc:	12 82       	std	Z+2, r1	; 0x02
    62be:	13 82       	std	Z+3, r1	; 0x03
    62c0:	44 83       	std	Z+4, r20	; 0x04
    62c2:	44 0f       	add	r20, r20
    62c4:	41 50       	subi	r20, 0x01	; 1
    62c6:	45 83       	std	Z+5, r20	; 0x05
    62c8:	71 83       	std	Z+1, r23	; 0x01
    62ca:	60 83       	st	Z, r22
    62cc:	80 e0       	ldi	r24, 0x00	; 0
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	08 95       	ret

000062d2 <vfprintf>:
    62d2:	2f 92       	push	r2
    62d4:	3f 92       	push	r3
    62d6:	4f 92       	push	r4
    62d8:	5f 92       	push	r5
    62da:	6f 92       	push	r6
    62dc:	7f 92       	push	r7
    62de:	8f 92       	push	r8
    62e0:	9f 92       	push	r9
    62e2:	af 92       	push	r10
    62e4:	bf 92       	push	r11
    62e6:	cf 92       	push	r12
    62e8:	df 92       	push	r13
    62ea:	ef 92       	push	r14
    62ec:	ff 92       	push	r15
    62ee:	0f 93       	push	r16
    62f0:	1f 93       	push	r17
    62f2:	cf 93       	push	r28
    62f4:	df 93       	push	r29
    62f6:	cd b7       	in	r28, 0x3d	; 61
    62f8:	de b7       	in	r29, 0x3e	; 62
    62fa:	60 97       	sbiw	r28, 0x10	; 16
    62fc:	0f b6       	in	r0, 0x3f	; 63
    62fe:	f8 94       	cli
    6300:	de bf       	out	0x3e, r29	; 62
    6302:	0f be       	out	0x3f, r0	; 63
    6304:	cd bf       	out	0x3d, r28	; 61
    6306:	7c 01       	movw	r14, r24
    6308:	1b 01       	movw	r2, r22
    630a:	6a 01       	movw	r12, r20
    630c:	fc 01       	movw	r30, r24
    630e:	17 82       	std	Z+7, r1	; 0x07
    6310:	16 82       	std	Z+6, r1	; 0x06
    6312:	83 81       	ldd	r24, Z+3	; 0x03
    6314:	81 ff       	sbrs	r24, 1
    6316:	2a c3       	rjmp	.+1620   	; 0x696c <vfprintf+0x69a>
    6318:	9e 01       	movw	r18, r28
    631a:	2f 5f       	subi	r18, 0xFF	; 255
    631c:	3f 4f       	sbci	r19, 0xFF	; 255
    631e:	39 01       	movw	r6, r18
    6320:	f7 01       	movw	r30, r14
    6322:	93 81       	ldd	r25, Z+3	; 0x03
    6324:	f1 01       	movw	r30, r2
    6326:	93 fd       	sbrc	r25, 3
    6328:	85 91       	lpm	r24, Z+
    632a:	93 ff       	sbrs	r25, 3
    632c:	81 91       	ld	r24, Z+
    632e:	1f 01       	movw	r2, r30
    6330:	88 23       	and	r24, r24
    6332:	09 f4       	brne	.+2      	; 0x6336 <vfprintf+0x64>
    6334:	17 c3       	rjmp	.+1582   	; 0x6964 <vfprintf+0x692>
    6336:	85 32       	cpi	r24, 0x25	; 37
    6338:	39 f4       	brne	.+14     	; 0x6348 <vfprintf+0x76>
    633a:	93 fd       	sbrc	r25, 3
    633c:	85 91       	lpm	r24, Z+
    633e:	93 ff       	sbrs	r25, 3
    6340:	81 91       	ld	r24, Z+
    6342:	1f 01       	movw	r2, r30
    6344:	85 32       	cpi	r24, 0x25	; 37
    6346:	31 f4       	brne	.+12     	; 0x6354 <vfprintf+0x82>
    6348:	b7 01       	movw	r22, r14
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	c3 d6       	rcall	.+3462   	; 0x70d4 <fputc>
    634e:	56 01       	movw	r10, r12
    6350:	65 01       	movw	r12, r10
    6352:	e6 cf       	rjmp	.-52     	; 0x6320 <vfprintf+0x4e>
    6354:	10 e0       	ldi	r17, 0x00	; 0
    6356:	51 2c       	mov	r5, r1
    6358:	91 2c       	mov	r9, r1
    635a:	ff e1       	ldi	r31, 0x1F	; 31
    635c:	f9 15       	cp	r31, r9
    635e:	d8 f0       	brcs	.+54     	; 0x6396 <vfprintf+0xc4>
    6360:	8b 32       	cpi	r24, 0x2B	; 43
    6362:	79 f0       	breq	.+30     	; 0x6382 <vfprintf+0xb0>
    6364:	38 f4       	brcc	.+14     	; 0x6374 <vfprintf+0xa2>
    6366:	80 32       	cpi	r24, 0x20	; 32
    6368:	79 f0       	breq	.+30     	; 0x6388 <vfprintf+0xb6>
    636a:	83 32       	cpi	r24, 0x23	; 35
    636c:	a1 f4       	brne	.+40     	; 0x6396 <vfprintf+0xc4>
    636e:	f9 2d       	mov	r31, r9
    6370:	f0 61       	ori	r31, 0x10	; 16
    6372:	2e c0       	rjmp	.+92     	; 0x63d0 <vfprintf+0xfe>
    6374:	8d 32       	cpi	r24, 0x2D	; 45
    6376:	61 f0       	breq	.+24     	; 0x6390 <vfprintf+0xbe>
    6378:	80 33       	cpi	r24, 0x30	; 48
    637a:	69 f4       	brne	.+26     	; 0x6396 <vfprintf+0xc4>
    637c:	29 2d       	mov	r18, r9
    637e:	21 60       	ori	r18, 0x01	; 1
    6380:	2d c0       	rjmp	.+90     	; 0x63dc <vfprintf+0x10a>
    6382:	39 2d       	mov	r19, r9
    6384:	32 60       	ori	r19, 0x02	; 2
    6386:	93 2e       	mov	r9, r19
    6388:	89 2d       	mov	r24, r9
    638a:	84 60       	ori	r24, 0x04	; 4
    638c:	98 2e       	mov	r9, r24
    638e:	2a c0       	rjmp	.+84     	; 0x63e4 <vfprintf+0x112>
    6390:	e9 2d       	mov	r30, r9
    6392:	e8 60       	ori	r30, 0x08	; 8
    6394:	15 c0       	rjmp	.+42     	; 0x63c0 <vfprintf+0xee>
    6396:	97 fc       	sbrc	r9, 7
    6398:	2d c0       	rjmp	.+90     	; 0x63f4 <vfprintf+0x122>
    639a:	20 ed       	ldi	r18, 0xD0	; 208
    639c:	28 0f       	add	r18, r24
    639e:	2a 30       	cpi	r18, 0x0A	; 10
    63a0:	88 f4       	brcc	.+34     	; 0x63c4 <vfprintf+0xf2>
    63a2:	96 fe       	sbrs	r9, 6
    63a4:	06 c0       	rjmp	.+12     	; 0x63b2 <vfprintf+0xe0>
    63a6:	3a e0       	ldi	r19, 0x0A	; 10
    63a8:	13 9f       	mul	r17, r19
    63aa:	20 0d       	add	r18, r0
    63ac:	11 24       	eor	r1, r1
    63ae:	12 2f       	mov	r17, r18
    63b0:	19 c0       	rjmp	.+50     	; 0x63e4 <vfprintf+0x112>
    63b2:	8a e0       	ldi	r24, 0x0A	; 10
    63b4:	58 9e       	mul	r5, r24
    63b6:	20 0d       	add	r18, r0
    63b8:	11 24       	eor	r1, r1
    63ba:	52 2e       	mov	r5, r18
    63bc:	e9 2d       	mov	r30, r9
    63be:	e0 62       	ori	r30, 0x20	; 32
    63c0:	9e 2e       	mov	r9, r30
    63c2:	10 c0       	rjmp	.+32     	; 0x63e4 <vfprintf+0x112>
    63c4:	8e 32       	cpi	r24, 0x2E	; 46
    63c6:	31 f4       	brne	.+12     	; 0x63d4 <vfprintf+0x102>
    63c8:	96 fc       	sbrc	r9, 6
    63ca:	cc c2       	rjmp	.+1432   	; 0x6964 <vfprintf+0x692>
    63cc:	f9 2d       	mov	r31, r9
    63ce:	f0 64       	ori	r31, 0x40	; 64
    63d0:	9f 2e       	mov	r9, r31
    63d2:	08 c0       	rjmp	.+16     	; 0x63e4 <vfprintf+0x112>
    63d4:	8c 36       	cpi	r24, 0x6C	; 108
    63d6:	21 f4       	brne	.+8      	; 0x63e0 <vfprintf+0x10e>
    63d8:	29 2d       	mov	r18, r9
    63da:	20 68       	ori	r18, 0x80	; 128
    63dc:	92 2e       	mov	r9, r18
    63de:	02 c0       	rjmp	.+4      	; 0x63e4 <vfprintf+0x112>
    63e0:	88 36       	cpi	r24, 0x68	; 104
    63e2:	41 f4       	brne	.+16     	; 0x63f4 <vfprintf+0x122>
    63e4:	f1 01       	movw	r30, r2
    63e6:	93 fd       	sbrc	r25, 3
    63e8:	85 91       	lpm	r24, Z+
    63ea:	93 ff       	sbrs	r25, 3
    63ec:	81 91       	ld	r24, Z+
    63ee:	1f 01       	movw	r2, r30
    63f0:	81 11       	cpse	r24, r1
    63f2:	b3 cf       	rjmp	.-154    	; 0x635a <vfprintf+0x88>
    63f4:	9b eb       	ldi	r25, 0xBB	; 187
    63f6:	98 0f       	add	r25, r24
    63f8:	93 30       	cpi	r25, 0x03	; 3
    63fa:	20 f4       	brcc	.+8      	; 0x6404 <vfprintf+0x132>
    63fc:	99 2d       	mov	r25, r9
    63fe:	90 61       	ori	r25, 0x10	; 16
    6400:	80 5e       	subi	r24, 0xE0	; 224
    6402:	07 c0       	rjmp	.+14     	; 0x6412 <vfprintf+0x140>
    6404:	9b e9       	ldi	r25, 0x9B	; 155
    6406:	98 0f       	add	r25, r24
    6408:	93 30       	cpi	r25, 0x03	; 3
    640a:	08 f0       	brcs	.+2      	; 0x640e <vfprintf+0x13c>
    640c:	59 c1       	rjmp	.+690    	; 0x66c0 <vfprintf+0x3ee>
    640e:	99 2d       	mov	r25, r9
    6410:	9f 7e       	andi	r25, 0xEF	; 239
    6412:	96 ff       	sbrs	r25, 6
    6414:	16 e0       	ldi	r17, 0x06	; 6
    6416:	9f 73       	andi	r25, 0x3F	; 63
    6418:	99 2e       	mov	r9, r25
    641a:	85 36       	cpi	r24, 0x65	; 101
    641c:	19 f4       	brne	.+6      	; 0x6424 <vfprintf+0x152>
    641e:	90 64       	ori	r25, 0x40	; 64
    6420:	99 2e       	mov	r9, r25
    6422:	08 c0       	rjmp	.+16     	; 0x6434 <vfprintf+0x162>
    6424:	86 36       	cpi	r24, 0x66	; 102
    6426:	21 f4       	brne	.+8      	; 0x6430 <vfprintf+0x15e>
    6428:	39 2f       	mov	r19, r25
    642a:	30 68       	ori	r19, 0x80	; 128
    642c:	93 2e       	mov	r9, r19
    642e:	02 c0       	rjmp	.+4      	; 0x6434 <vfprintf+0x162>
    6430:	11 11       	cpse	r17, r1
    6432:	11 50       	subi	r17, 0x01	; 1
    6434:	97 fe       	sbrs	r9, 7
    6436:	07 c0       	rjmp	.+14     	; 0x6446 <vfprintf+0x174>
    6438:	1c 33       	cpi	r17, 0x3C	; 60
    643a:	50 f4       	brcc	.+20     	; 0x6450 <vfprintf+0x17e>
    643c:	44 24       	eor	r4, r4
    643e:	43 94       	inc	r4
    6440:	41 0e       	add	r4, r17
    6442:	27 e0       	ldi	r18, 0x07	; 7
    6444:	0b c0       	rjmp	.+22     	; 0x645c <vfprintf+0x18a>
    6446:	18 30       	cpi	r17, 0x08	; 8
    6448:	38 f0       	brcs	.+14     	; 0x6458 <vfprintf+0x186>
    644a:	27 e0       	ldi	r18, 0x07	; 7
    644c:	17 e0       	ldi	r17, 0x07	; 7
    644e:	05 c0       	rjmp	.+10     	; 0x645a <vfprintf+0x188>
    6450:	27 e0       	ldi	r18, 0x07	; 7
    6452:	9c e3       	ldi	r25, 0x3C	; 60
    6454:	49 2e       	mov	r4, r25
    6456:	02 c0       	rjmp	.+4      	; 0x645c <vfprintf+0x18a>
    6458:	21 2f       	mov	r18, r17
    645a:	41 2c       	mov	r4, r1
    645c:	56 01       	movw	r10, r12
    645e:	84 e0       	ldi	r24, 0x04	; 4
    6460:	a8 0e       	add	r10, r24
    6462:	b1 1c       	adc	r11, r1
    6464:	f6 01       	movw	r30, r12
    6466:	60 81       	ld	r22, Z
    6468:	71 81       	ldd	r23, Z+1	; 0x01
    646a:	82 81       	ldd	r24, Z+2	; 0x02
    646c:	93 81       	ldd	r25, Z+3	; 0x03
    646e:	04 2d       	mov	r16, r4
    6470:	a3 01       	movw	r20, r6
    6472:	e3 d4       	rcall	.+2502   	; 0x6e3a <__ftoa_engine>
    6474:	6c 01       	movw	r12, r24
    6476:	f9 81       	ldd	r31, Y+1	; 0x01
    6478:	fc 87       	std	Y+12, r31	; 0x0c
    647a:	f0 ff       	sbrs	r31, 0
    647c:	02 c0       	rjmp	.+4      	; 0x6482 <vfprintf+0x1b0>
    647e:	f3 ff       	sbrs	r31, 3
    6480:	06 c0       	rjmp	.+12     	; 0x648e <vfprintf+0x1bc>
    6482:	91 fc       	sbrc	r9, 1
    6484:	06 c0       	rjmp	.+12     	; 0x6492 <vfprintf+0x1c0>
    6486:	92 fe       	sbrs	r9, 2
    6488:	06 c0       	rjmp	.+12     	; 0x6496 <vfprintf+0x1c4>
    648a:	00 e2       	ldi	r16, 0x20	; 32
    648c:	05 c0       	rjmp	.+10     	; 0x6498 <vfprintf+0x1c6>
    648e:	0d e2       	ldi	r16, 0x2D	; 45
    6490:	03 c0       	rjmp	.+6      	; 0x6498 <vfprintf+0x1c6>
    6492:	0b e2       	ldi	r16, 0x2B	; 43
    6494:	01 c0       	rjmp	.+2      	; 0x6498 <vfprintf+0x1c6>
    6496:	00 e0       	ldi	r16, 0x00	; 0
    6498:	8c 85       	ldd	r24, Y+12	; 0x0c
    649a:	8c 70       	andi	r24, 0x0C	; 12
    649c:	19 f0       	breq	.+6      	; 0x64a4 <vfprintf+0x1d2>
    649e:	01 11       	cpse	r16, r1
    64a0:	43 c2       	rjmp	.+1158   	; 0x6928 <vfprintf+0x656>
    64a2:	80 c2       	rjmp	.+1280   	; 0x69a4 <vfprintf+0x6d2>
    64a4:	97 fe       	sbrs	r9, 7
    64a6:	10 c0       	rjmp	.+32     	; 0x64c8 <vfprintf+0x1f6>
    64a8:	4c 0c       	add	r4, r12
    64aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    64ac:	f4 ff       	sbrs	r31, 4
    64ae:	04 c0       	rjmp	.+8      	; 0x64b8 <vfprintf+0x1e6>
    64b0:	8a 81       	ldd	r24, Y+2	; 0x02
    64b2:	81 33       	cpi	r24, 0x31	; 49
    64b4:	09 f4       	brne	.+2      	; 0x64b8 <vfprintf+0x1e6>
    64b6:	4a 94       	dec	r4
    64b8:	14 14       	cp	r1, r4
    64ba:	74 f5       	brge	.+92     	; 0x6518 <vfprintf+0x246>
    64bc:	28 e0       	ldi	r18, 0x08	; 8
    64be:	24 15       	cp	r18, r4
    64c0:	78 f5       	brcc	.+94     	; 0x6520 <vfprintf+0x24e>
    64c2:	88 e0       	ldi	r24, 0x08	; 8
    64c4:	48 2e       	mov	r4, r24
    64c6:	2c c0       	rjmp	.+88     	; 0x6520 <vfprintf+0x24e>
    64c8:	96 fc       	sbrc	r9, 6
    64ca:	2a c0       	rjmp	.+84     	; 0x6520 <vfprintf+0x24e>
    64cc:	81 2f       	mov	r24, r17
    64ce:	90 e0       	ldi	r25, 0x00	; 0
    64d0:	8c 15       	cp	r24, r12
    64d2:	9d 05       	cpc	r25, r13
    64d4:	9c f0       	brlt	.+38     	; 0x64fc <vfprintf+0x22a>
    64d6:	3c ef       	ldi	r19, 0xFC	; 252
    64d8:	c3 16       	cp	r12, r19
    64da:	3f ef       	ldi	r19, 0xFF	; 255
    64dc:	d3 06       	cpc	r13, r19
    64de:	74 f0       	brlt	.+28     	; 0x64fc <vfprintf+0x22a>
    64e0:	89 2d       	mov	r24, r9
    64e2:	80 68       	ori	r24, 0x80	; 128
    64e4:	98 2e       	mov	r9, r24
    64e6:	0a c0       	rjmp	.+20     	; 0x64fc <vfprintf+0x22a>
    64e8:	e2 e0       	ldi	r30, 0x02	; 2
    64ea:	f0 e0       	ldi	r31, 0x00	; 0
    64ec:	ec 0f       	add	r30, r28
    64ee:	fd 1f       	adc	r31, r29
    64f0:	e1 0f       	add	r30, r17
    64f2:	f1 1d       	adc	r31, r1
    64f4:	80 81       	ld	r24, Z
    64f6:	80 33       	cpi	r24, 0x30	; 48
    64f8:	19 f4       	brne	.+6      	; 0x6500 <vfprintf+0x22e>
    64fa:	11 50       	subi	r17, 0x01	; 1
    64fc:	11 11       	cpse	r17, r1
    64fe:	f4 cf       	rjmp	.-24     	; 0x64e8 <vfprintf+0x216>
    6500:	97 fe       	sbrs	r9, 7
    6502:	0e c0       	rjmp	.+28     	; 0x6520 <vfprintf+0x24e>
    6504:	44 24       	eor	r4, r4
    6506:	43 94       	inc	r4
    6508:	41 0e       	add	r4, r17
    650a:	81 2f       	mov	r24, r17
    650c:	90 e0       	ldi	r25, 0x00	; 0
    650e:	c8 16       	cp	r12, r24
    6510:	d9 06       	cpc	r13, r25
    6512:	2c f4       	brge	.+10     	; 0x651e <vfprintf+0x24c>
    6514:	1c 19       	sub	r17, r12
    6516:	04 c0       	rjmp	.+8      	; 0x6520 <vfprintf+0x24e>
    6518:	44 24       	eor	r4, r4
    651a:	43 94       	inc	r4
    651c:	01 c0       	rjmp	.+2      	; 0x6520 <vfprintf+0x24e>
    651e:	10 e0       	ldi	r17, 0x00	; 0
    6520:	97 fe       	sbrs	r9, 7
    6522:	06 c0       	rjmp	.+12     	; 0x6530 <vfprintf+0x25e>
    6524:	1c 14       	cp	r1, r12
    6526:	1d 04       	cpc	r1, r13
    6528:	34 f4       	brge	.+12     	; 0x6536 <vfprintf+0x264>
    652a:	c6 01       	movw	r24, r12
    652c:	01 96       	adiw	r24, 0x01	; 1
    652e:	05 c0       	rjmp	.+10     	; 0x653a <vfprintf+0x268>
    6530:	85 e0       	ldi	r24, 0x05	; 5
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	02 c0       	rjmp	.+4      	; 0x653a <vfprintf+0x268>
    6536:	81 e0       	ldi	r24, 0x01	; 1
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	01 11       	cpse	r16, r1
    653c:	01 96       	adiw	r24, 0x01	; 1
    653e:	11 23       	and	r17, r17
    6540:	31 f0       	breq	.+12     	; 0x654e <vfprintf+0x27c>
    6542:	21 2f       	mov	r18, r17
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	2f 5f       	subi	r18, 0xFF	; 255
    6548:	3f 4f       	sbci	r19, 0xFF	; 255
    654a:	82 0f       	add	r24, r18
    654c:	93 1f       	adc	r25, r19
    654e:	25 2d       	mov	r18, r5
    6550:	30 e0       	ldi	r19, 0x00	; 0
    6552:	82 17       	cp	r24, r18
    6554:	93 07       	cpc	r25, r19
    6556:	14 f4       	brge	.+4      	; 0x655c <vfprintf+0x28a>
    6558:	58 1a       	sub	r5, r24
    655a:	01 c0       	rjmp	.+2      	; 0x655e <vfprintf+0x28c>
    655c:	51 2c       	mov	r5, r1
    655e:	89 2d       	mov	r24, r9
    6560:	89 70       	andi	r24, 0x09	; 9
    6562:	41 f4       	brne	.+16     	; 0x6574 <vfprintf+0x2a2>
    6564:	55 20       	and	r5, r5
    6566:	31 f0       	breq	.+12     	; 0x6574 <vfprintf+0x2a2>
    6568:	b7 01       	movw	r22, r14
    656a:	80 e2       	ldi	r24, 0x20	; 32
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	b2 d5       	rcall	.+2916   	; 0x70d4 <fputc>
    6570:	5a 94       	dec	r5
    6572:	f8 cf       	rjmp	.-16     	; 0x6564 <vfprintf+0x292>
    6574:	00 23       	and	r16, r16
    6576:	21 f0       	breq	.+8      	; 0x6580 <vfprintf+0x2ae>
    6578:	b7 01       	movw	r22, r14
    657a:	80 2f       	mov	r24, r16
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	aa d5       	rcall	.+2900   	; 0x70d4 <fputc>
    6580:	93 fc       	sbrc	r9, 3
    6582:	08 c0       	rjmp	.+16     	; 0x6594 <vfprintf+0x2c2>
    6584:	55 20       	and	r5, r5
    6586:	31 f0       	breq	.+12     	; 0x6594 <vfprintf+0x2c2>
    6588:	b7 01       	movw	r22, r14
    658a:	80 e3       	ldi	r24, 0x30	; 48
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	a2 d5       	rcall	.+2884   	; 0x70d4 <fputc>
    6590:	5a 94       	dec	r5
    6592:	f8 cf       	rjmp	.-16     	; 0x6584 <vfprintf+0x2b2>
    6594:	97 fe       	sbrs	r9, 7
    6596:	4a c0       	rjmp	.+148    	; 0x662c <vfprintf+0x35a>
    6598:	46 01       	movw	r8, r12
    659a:	d7 fe       	sbrs	r13, 7
    659c:	02 c0       	rjmp	.+4      	; 0x65a2 <vfprintf+0x2d0>
    659e:	81 2c       	mov	r8, r1
    65a0:	91 2c       	mov	r9, r1
    65a2:	c6 01       	movw	r24, r12
    65a4:	88 19       	sub	r24, r8
    65a6:	99 09       	sbc	r25, r9
    65a8:	f3 01       	movw	r30, r6
    65aa:	e8 0f       	add	r30, r24
    65ac:	f9 1f       	adc	r31, r25
    65ae:	fe 87       	std	Y+14, r31	; 0x0e
    65b0:	ed 87       	std	Y+13, r30	; 0x0d
    65b2:	96 01       	movw	r18, r12
    65b4:	24 19       	sub	r18, r4
    65b6:	31 09       	sbc	r19, r1
    65b8:	38 8b       	std	Y+16, r19	; 0x10
    65ba:	2f 87       	std	Y+15, r18	; 0x0f
    65bc:	01 2f       	mov	r16, r17
    65be:	10 e0       	ldi	r17, 0x00	; 0
    65c0:	11 95       	neg	r17
    65c2:	01 95       	neg	r16
    65c4:	11 09       	sbc	r17, r1
    65c6:	3f ef       	ldi	r19, 0xFF	; 255
    65c8:	83 16       	cp	r8, r19
    65ca:	93 06       	cpc	r9, r19
    65cc:	21 f4       	brne	.+8      	; 0x65d6 <vfprintf+0x304>
    65ce:	b7 01       	movw	r22, r14
    65d0:	8e e2       	ldi	r24, 0x2E	; 46
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	7f d5       	rcall	.+2814   	; 0x70d4 <fputc>
    65d6:	c8 14       	cp	r12, r8
    65d8:	d9 04       	cpc	r13, r9
    65da:	4c f0       	brlt	.+18     	; 0x65ee <vfprintf+0x31c>
    65dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    65de:	98 89       	ldd	r25, Y+16	; 0x10
    65e0:	88 15       	cp	r24, r8
    65e2:	99 05       	cpc	r25, r9
    65e4:	24 f4       	brge	.+8      	; 0x65ee <vfprintf+0x31c>
    65e6:	ed 85       	ldd	r30, Y+13	; 0x0d
    65e8:	fe 85       	ldd	r31, Y+14	; 0x0e
    65ea:	81 81       	ldd	r24, Z+1	; 0x01
    65ec:	01 c0       	rjmp	.+2      	; 0x65f0 <vfprintf+0x31e>
    65ee:	80 e3       	ldi	r24, 0x30	; 48
    65f0:	f1 e0       	ldi	r31, 0x01	; 1
    65f2:	8f 1a       	sub	r8, r31
    65f4:	91 08       	sbc	r9, r1
    65f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    65f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    65fa:	2f 5f       	subi	r18, 0xFF	; 255
    65fc:	3f 4f       	sbci	r19, 0xFF	; 255
    65fe:	3e 87       	std	Y+14, r19	; 0x0e
    6600:	2d 87       	std	Y+13, r18	; 0x0d
    6602:	80 16       	cp	r8, r16
    6604:	91 06       	cpc	r9, r17
    6606:	24 f0       	brlt	.+8      	; 0x6610 <vfprintf+0x33e>
    6608:	b7 01       	movw	r22, r14
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	63 d5       	rcall	.+2758   	; 0x70d4 <fputc>
    660e:	db cf       	rjmp	.-74     	; 0x65c6 <vfprintf+0x2f4>
    6610:	c8 14       	cp	r12, r8
    6612:	d9 04       	cpc	r13, r9
    6614:	41 f4       	brne	.+16     	; 0x6626 <vfprintf+0x354>
    6616:	9a 81       	ldd	r25, Y+2	; 0x02
    6618:	96 33       	cpi	r25, 0x36	; 54
    661a:	20 f4       	brcc	.+8      	; 0x6624 <vfprintf+0x352>
    661c:	95 33       	cpi	r25, 0x35	; 53
    661e:	19 f4       	brne	.+6      	; 0x6626 <vfprintf+0x354>
    6620:	3c 85       	ldd	r19, Y+12	; 0x0c
    6622:	34 ff       	sbrs	r19, 4
    6624:	81 e3       	ldi	r24, 0x31	; 49
    6626:	b7 01       	movw	r22, r14
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	48 c0       	rjmp	.+144    	; 0x66bc <vfprintf+0x3ea>
    662c:	8a 81       	ldd	r24, Y+2	; 0x02
    662e:	81 33       	cpi	r24, 0x31	; 49
    6630:	19 f0       	breq	.+6      	; 0x6638 <vfprintf+0x366>
    6632:	9c 85       	ldd	r25, Y+12	; 0x0c
    6634:	9f 7e       	andi	r25, 0xEF	; 239
    6636:	9c 87       	std	Y+12, r25	; 0x0c
    6638:	b7 01       	movw	r22, r14
    663a:	90 e0       	ldi	r25, 0x00	; 0
    663c:	4b d5       	rcall	.+2710   	; 0x70d4 <fputc>
    663e:	11 11       	cpse	r17, r1
    6640:	05 c0       	rjmp	.+10     	; 0x664c <vfprintf+0x37a>
    6642:	94 fc       	sbrc	r9, 4
    6644:	16 c0       	rjmp	.+44     	; 0x6672 <vfprintf+0x3a0>
    6646:	85 e6       	ldi	r24, 0x65	; 101
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	15 c0       	rjmp	.+42     	; 0x6676 <vfprintf+0x3a4>
    664c:	b7 01       	movw	r22, r14
    664e:	8e e2       	ldi	r24, 0x2E	; 46
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	40 d5       	rcall	.+2688   	; 0x70d4 <fputc>
    6654:	1e 5f       	subi	r17, 0xFE	; 254
    6656:	82 e0       	ldi	r24, 0x02	; 2
    6658:	01 e0       	ldi	r16, 0x01	; 1
    665a:	08 0f       	add	r16, r24
    665c:	f3 01       	movw	r30, r6
    665e:	e8 0f       	add	r30, r24
    6660:	f1 1d       	adc	r31, r1
    6662:	80 81       	ld	r24, Z
    6664:	b7 01       	movw	r22, r14
    6666:	90 e0       	ldi	r25, 0x00	; 0
    6668:	35 d5       	rcall	.+2666   	; 0x70d4 <fputc>
    666a:	80 2f       	mov	r24, r16
    666c:	01 13       	cpse	r16, r17
    666e:	f4 cf       	rjmp	.-24     	; 0x6658 <vfprintf+0x386>
    6670:	e8 cf       	rjmp	.-48     	; 0x6642 <vfprintf+0x370>
    6672:	85 e4       	ldi	r24, 0x45	; 69
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	b7 01       	movw	r22, r14
    6678:	2d d5       	rcall	.+2650   	; 0x70d4 <fputc>
    667a:	d7 fc       	sbrc	r13, 7
    667c:	06 c0       	rjmp	.+12     	; 0x668a <vfprintf+0x3b8>
    667e:	c1 14       	cp	r12, r1
    6680:	d1 04       	cpc	r13, r1
    6682:	41 f4       	brne	.+16     	; 0x6694 <vfprintf+0x3c2>
    6684:	ec 85       	ldd	r30, Y+12	; 0x0c
    6686:	e4 ff       	sbrs	r30, 4
    6688:	05 c0       	rjmp	.+10     	; 0x6694 <vfprintf+0x3c2>
    668a:	d1 94       	neg	r13
    668c:	c1 94       	neg	r12
    668e:	d1 08       	sbc	r13, r1
    6690:	8d e2       	ldi	r24, 0x2D	; 45
    6692:	01 c0       	rjmp	.+2      	; 0x6696 <vfprintf+0x3c4>
    6694:	8b e2       	ldi	r24, 0x2B	; 43
    6696:	b7 01       	movw	r22, r14
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	1c d5       	rcall	.+2616   	; 0x70d4 <fputc>
    669c:	80 e3       	ldi	r24, 0x30	; 48
    669e:	2a e0       	ldi	r18, 0x0A	; 10
    66a0:	c2 16       	cp	r12, r18
    66a2:	d1 04       	cpc	r13, r1
    66a4:	2c f0       	brlt	.+10     	; 0x66b0 <vfprintf+0x3de>
    66a6:	8f 5f       	subi	r24, 0xFF	; 255
    66a8:	fa e0       	ldi	r31, 0x0A	; 10
    66aa:	cf 1a       	sub	r12, r31
    66ac:	d1 08       	sbc	r13, r1
    66ae:	f7 cf       	rjmp	.-18     	; 0x669e <vfprintf+0x3cc>
    66b0:	b7 01       	movw	r22, r14
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	0f d5       	rcall	.+2590   	; 0x70d4 <fputc>
    66b6:	b7 01       	movw	r22, r14
    66b8:	c6 01       	movw	r24, r12
    66ba:	c0 96       	adiw	r24, 0x30	; 48
    66bc:	0b d5       	rcall	.+2582   	; 0x70d4 <fputc>
    66be:	49 c1       	rjmp	.+658    	; 0x6952 <vfprintf+0x680>
    66c0:	83 36       	cpi	r24, 0x63	; 99
    66c2:	31 f0       	breq	.+12     	; 0x66d0 <vfprintf+0x3fe>
    66c4:	83 37       	cpi	r24, 0x73	; 115
    66c6:	79 f0       	breq	.+30     	; 0x66e6 <vfprintf+0x414>
    66c8:	83 35       	cpi	r24, 0x53	; 83
    66ca:	09 f0       	breq	.+2      	; 0x66ce <vfprintf+0x3fc>
    66cc:	52 c0       	rjmp	.+164    	; 0x6772 <vfprintf+0x4a0>
    66ce:	1f c0       	rjmp	.+62     	; 0x670e <vfprintf+0x43c>
    66d0:	56 01       	movw	r10, r12
    66d2:	32 e0       	ldi	r19, 0x02	; 2
    66d4:	a3 0e       	add	r10, r19
    66d6:	b1 1c       	adc	r11, r1
    66d8:	f6 01       	movw	r30, r12
    66da:	80 81       	ld	r24, Z
    66dc:	89 83       	std	Y+1, r24	; 0x01
    66de:	01 e0       	ldi	r16, 0x01	; 1
    66e0:	10 e0       	ldi	r17, 0x00	; 0
    66e2:	63 01       	movw	r12, r6
    66e4:	11 c0       	rjmp	.+34     	; 0x6708 <vfprintf+0x436>
    66e6:	56 01       	movw	r10, r12
    66e8:	f2 e0       	ldi	r31, 0x02	; 2
    66ea:	af 0e       	add	r10, r31
    66ec:	b1 1c       	adc	r11, r1
    66ee:	f6 01       	movw	r30, r12
    66f0:	c0 80       	ld	r12, Z
    66f2:	d1 80       	ldd	r13, Z+1	; 0x01
    66f4:	96 fe       	sbrs	r9, 6
    66f6:	03 c0       	rjmp	.+6      	; 0x66fe <vfprintf+0x42c>
    66f8:	61 2f       	mov	r22, r17
    66fa:	70 e0       	ldi	r23, 0x00	; 0
    66fc:	02 c0       	rjmp	.+4      	; 0x6702 <vfprintf+0x430>
    66fe:	6f ef       	ldi	r22, 0xFF	; 255
    6700:	7f ef       	ldi	r23, 0xFF	; 255
    6702:	c6 01       	movw	r24, r12
    6704:	dc d4       	rcall	.+2488   	; 0x70be <strnlen>
    6706:	8c 01       	movw	r16, r24
    6708:	f9 2d       	mov	r31, r9
    670a:	ff 77       	andi	r31, 0x7F	; 127
    670c:	13 c0       	rjmp	.+38     	; 0x6734 <vfprintf+0x462>
    670e:	56 01       	movw	r10, r12
    6710:	22 e0       	ldi	r18, 0x02	; 2
    6712:	a2 0e       	add	r10, r18
    6714:	b1 1c       	adc	r11, r1
    6716:	f6 01       	movw	r30, r12
    6718:	c0 80       	ld	r12, Z
    671a:	d1 80       	ldd	r13, Z+1	; 0x01
    671c:	96 fe       	sbrs	r9, 6
    671e:	03 c0       	rjmp	.+6      	; 0x6726 <vfprintf+0x454>
    6720:	61 2f       	mov	r22, r17
    6722:	70 e0       	ldi	r23, 0x00	; 0
    6724:	02 c0       	rjmp	.+4      	; 0x672a <vfprintf+0x458>
    6726:	6f ef       	ldi	r22, 0xFF	; 255
    6728:	7f ef       	ldi	r23, 0xFF	; 255
    672a:	c6 01       	movw	r24, r12
    672c:	5e d4       	rcall	.+2236   	; 0x6fea <strnlen_P>
    672e:	8c 01       	movw	r16, r24
    6730:	f9 2d       	mov	r31, r9
    6732:	f0 68       	ori	r31, 0x80	; 128
    6734:	9f 2e       	mov	r9, r31
    6736:	f3 fd       	sbrc	r31, 3
    6738:	18 c0       	rjmp	.+48     	; 0x676a <vfprintf+0x498>
    673a:	85 2d       	mov	r24, r5
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	08 17       	cp	r16, r24
    6740:	19 07       	cpc	r17, r25
    6742:	98 f4       	brcc	.+38     	; 0x676a <vfprintf+0x498>
    6744:	b7 01       	movw	r22, r14
    6746:	80 e2       	ldi	r24, 0x20	; 32
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	c4 d4       	rcall	.+2440   	; 0x70d4 <fputc>
    674c:	5a 94       	dec	r5
    674e:	f5 cf       	rjmp	.-22     	; 0x673a <vfprintf+0x468>
    6750:	f6 01       	movw	r30, r12
    6752:	97 fc       	sbrc	r9, 7
    6754:	85 91       	lpm	r24, Z+
    6756:	97 fe       	sbrs	r9, 7
    6758:	81 91       	ld	r24, Z+
    675a:	6f 01       	movw	r12, r30
    675c:	b7 01       	movw	r22, r14
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	b9 d4       	rcall	.+2418   	; 0x70d4 <fputc>
    6762:	51 10       	cpse	r5, r1
    6764:	5a 94       	dec	r5
    6766:	01 50       	subi	r16, 0x01	; 1
    6768:	11 09       	sbc	r17, r1
    676a:	01 15       	cp	r16, r1
    676c:	11 05       	cpc	r17, r1
    676e:	81 f7       	brne	.-32     	; 0x6750 <vfprintf+0x47e>
    6770:	f0 c0       	rjmp	.+480    	; 0x6952 <vfprintf+0x680>
    6772:	84 36       	cpi	r24, 0x64	; 100
    6774:	11 f0       	breq	.+4      	; 0x677a <vfprintf+0x4a8>
    6776:	89 36       	cpi	r24, 0x69	; 105
    6778:	59 f5       	brne	.+86     	; 0x67d0 <vfprintf+0x4fe>
    677a:	56 01       	movw	r10, r12
    677c:	97 fe       	sbrs	r9, 7
    677e:	09 c0       	rjmp	.+18     	; 0x6792 <vfprintf+0x4c0>
    6780:	24 e0       	ldi	r18, 0x04	; 4
    6782:	a2 0e       	add	r10, r18
    6784:	b1 1c       	adc	r11, r1
    6786:	f6 01       	movw	r30, r12
    6788:	60 81       	ld	r22, Z
    678a:	71 81       	ldd	r23, Z+1	; 0x01
    678c:	82 81       	ldd	r24, Z+2	; 0x02
    678e:	93 81       	ldd	r25, Z+3	; 0x03
    6790:	0a c0       	rjmp	.+20     	; 0x67a6 <vfprintf+0x4d4>
    6792:	f2 e0       	ldi	r31, 0x02	; 2
    6794:	af 0e       	add	r10, r31
    6796:	b1 1c       	adc	r11, r1
    6798:	f6 01       	movw	r30, r12
    679a:	60 81       	ld	r22, Z
    679c:	71 81       	ldd	r23, Z+1	; 0x01
    679e:	07 2e       	mov	r0, r23
    67a0:	00 0c       	add	r0, r0
    67a2:	88 0b       	sbc	r24, r24
    67a4:	99 0b       	sbc	r25, r25
    67a6:	f9 2d       	mov	r31, r9
    67a8:	ff 76       	andi	r31, 0x6F	; 111
    67aa:	9f 2e       	mov	r9, r31
    67ac:	97 ff       	sbrs	r25, 7
    67ae:	09 c0       	rjmp	.+18     	; 0x67c2 <vfprintf+0x4f0>
    67b0:	90 95       	com	r25
    67b2:	80 95       	com	r24
    67b4:	70 95       	com	r23
    67b6:	61 95       	neg	r22
    67b8:	7f 4f       	sbci	r23, 0xFF	; 255
    67ba:	8f 4f       	sbci	r24, 0xFF	; 255
    67bc:	9f 4f       	sbci	r25, 0xFF	; 255
    67be:	f0 68       	ori	r31, 0x80	; 128
    67c0:	9f 2e       	mov	r9, r31
    67c2:	2a e0       	ldi	r18, 0x0A	; 10
    67c4:	30 e0       	ldi	r19, 0x00	; 0
    67c6:	a3 01       	movw	r20, r6
    67c8:	fb d4       	rcall	.+2550   	; 0x71c0 <__ultoa_invert>
    67ca:	c8 2e       	mov	r12, r24
    67cc:	c6 18       	sub	r12, r6
    67ce:	3e c0       	rjmp	.+124    	; 0x684c <vfprintf+0x57a>
    67d0:	09 2d       	mov	r16, r9
    67d2:	85 37       	cpi	r24, 0x75	; 117
    67d4:	21 f4       	brne	.+8      	; 0x67de <vfprintf+0x50c>
    67d6:	0f 7e       	andi	r16, 0xEF	; 239
    67d8:	2a e0       	ldi	r18, 0x0A	; 10
    67da:	30 e0       	ldi	r19, 0x00	; 0
    67dc:	1d c0       	rjmp	.+58     	; 0x6818 <vfprintf+0x546>
    67de:	09 7f       	andi	r16, 0xF9	; 249
    67e0:	8f 36       	cpi	r24, 0x6F	; 111
    67e2:	91 f0       	breq	.+36     	; 0x6808 <vfprintf+0x536>
    67e4:	18 f4       	brcc	.+6      	; 0x67ec <vfprintf+0x51a>
    67e6:	88 35       	cpi	r24, 0x58	; 88
    67e8:	59 f0       	breq	.+22     	; 0x6800 <vfprintf+0x52e>
    67ea:	bc c0       	rjmp	.+376    	; 0x6964 <vfprintf+0x692>
    67ec:	80 37       	cpi	r24, 0x70	; 112
    67ee:	19 f0       	breq	.+6      	; 0x67f6 <vfprintf+0x524>
    67f0:	88 37       	cpi	r24, 0x78	; 120
    67f2:	11 f0       	breq	.+4      	; 0x67f8 <vfprintf+0x526>
    67f4:	b7 c0       	rjmp	.+366    	; 0x6964 <vfprintf+0x692>
    67f6:	00 61       	ori	r16, 0x10	; 16
    67f8:	04 ff       	sbrs	r16, 4
    67fa:	09 c0       	rjmp	.+18     	; 0x680e <vfprintf+0x53c>
    67fc:	04 60       	ori	r16, 0x04	; 4
    67fe:	07 c0       	rjmp	.+14     	; 0x680e <vfprintf+0x53c>
    6800:	94 fe       	sbrs	r9, 4
    6802:	08 c0       	rjmp	.+16     	; 0x6814 <vfprintf+0x542>
    6804:	06 60       	ori	r16, 0x06	; 6
    6806:	06 c0       	rjmp	.+12     	; 0x6814 <vfprintf+0x542>
    6808:	28 e0       	ldi	r18, 0x08	; 8
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	05 c0       	rjmp	.+10     	; 0x6818 <vfprintf+0x546>
    680e:	20 e1       	ldi	r18, 0x10	; 16
    6810:	30 e0       	ldi	r19, 0x00	; 0
    6812:	02 c0       	rjmp	.+4      	; 0x6818 <vfprintf+0x546>
    6814:	20 e1       	ldi	r18, 0x10	; 16
    6816:	32 e0       	ldi	r19, 0x02	; 2
    6818:	56 01       	movw	r10, r12
    681a:	07 ff       	sbrs	r16, 7
    681c:	09 c0       	rjmp	.+18     	; 0x6830 <vfprintf+0x55e>
    681e:	84 e0       	ldi	r24, 0x04	; 4
    6820:	a8 0e       	add	r10, r24
    6822:	b1 1c       	adc	r11, r1
    6824:	f6 01       	movw	r30, r12
    6826:	60 81       	ld	r22, Z
    6828:	71 81       	ldd	r23, Z+1	; 0x01
    682a:	82 81       	ldd	r24, Z+2	; 0x02
    682c:	93 81       	ldd	r25, Z+3	; 0x03
    682e:	08 c0       	rjmp	.+16     	; 0x6840 <vfprintf+0x56e>
    6830:	f2 e0       	ldi	r31, 0x02	; 2
    6832:	af 0e       	add	r10, r31
    6834:	b1 1c       	adc	r11, r1
    6836:	f6 01       	movw	r30, r12
    6838:	60 81       	ld	r22, Z
    683a:	71 81       	ldd	r23, Z+1	; 0x01
    683c:	80 e0       	ldi	r24, 0x00	; 0
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	a3 01       	movw	r20, r6
    6842:	be d4       	rcall	.+2428   	; 0x71c0 <__ultoa_invert>
    6844:	c8 2e       	mov	r12, r24
    6846:	c6 18       	sub	r12, r6
    6848:	0f 77       	andi	r16, 0x7F	; 127
    684a:	90 2e       	mov	r9, r16
    684c:	96 fe       	sbrs	r9, 6
    684e:	0b c0       	rjmp	.+22     	; 0x6866 <vfprintf+0x594>
    6850:	09 2d       	mov	r16, r9
    6852:	0e 7f       	andi	r16, 0xFE	; 254
    6854:	c1 16       	cp	r12, r17
    6856:	50 f4       	brcc	.+20     	; 0x686c <vfprintf+0x59a>
    6858:	94 fe       	sbrs	r9, 4
    685a:	0a c0       	rjmp	.+20     	; 0x6870 <vfprintf+0x59e>
    685c:	92 fc       	sbrc	r9, 2
    685e:	08 c0       	rjmp	.+16     	; 0x6870 <vfprintf+0x59e>
    6860:	09 2d       	mov	r16, r9
    6862:	0e 7e       	andi	r16, 0xEE	; 238
    6864:	05 c0       	rjmp	.+10     	; 0x6870 <vfprintf+0x59e>
    6866:	dc 2c       	mov	r13, r12
    6868:	09 2d       	mov	r16, r9
    686a:	03 c0       	rjmp	.+6      	; 0x6872 <vfprintf+0x5a0>
    686c:	dc 2c       	mov	r13, r12
    686e:	01 c0       	rjmp	.+2      	; 0x6872 <vfprintf+0x5a0>
    6870:	d1 2e       	mov	r13, r17
    6872:	04 ff       	sbrs	r16, 4
    6874:	0d c0       	rjmp	.+26     	; 0x6890 <vfprintf+0x5be>
    6876:	fe 01       	movw	r30, r28
    6878:	ec 0d       	add	r30, r12
    687a:	f1 1d       	adc	r31, r1
    687c:	80 81       	ld	r24, Z
    687e:	80 33       	cpi	r24, 0x30	; 48
    6880:	11 f4       	brne	.+4      	; 0x6886 <vfprintf+0x5b4>
    6882:	09 7e       	andi	r16, 0xE9	; 233
    6884:	09 c0       	rjmp	.+18     	; 0x6898 <vfprintf+0x5c6>
    6886:	02 ff       	sbrs	r16, 2
    6888:	06 c0       	rjmp	.+12     	; 0x6896 <vfprintf+0x5c4>
    688a:	d3 94       	inc	r13
    688c:	d3 94       	inc	r13
    688e:	04 c0       	rjmp	.+8      	; 0x6898 <vfprintf+0x5c6>
    6890:	80 2f       	mov	r24, r16
    6892:	86 78       	andi	r24, 0x86	; 134
    6894:	09 f0       	breq	.+2      	; 0x6898 <vfprintf+0x5c6>
    6896:	d3 94       	inc	r13
    6898:	03 fd       	sbrc	r16, 3
    689a:	10 c0       	rjmp	.+32     	; 0x68bc <vfprintf+0x5ea>
    689c:	00 ff       	sbrs	r16, 0
    689e:	06 c0       	rjmp	.+12     	; 0x68ac <vfprintf+0x5da>
    68a0:	1c 2d       	mov	r17, r12
    68a2:	d5 14       	cp	r13, r5
    68a4:	78 f4       	brcc	.+30     	; 0x68c4 <vfprintf+0x5f2>
    68a6:	15 0d       	add	r17, r5
    68a8:	1d 19       	sub	r17, r13
    68aa:	0c c0       	rjmp	.+24     	; 0x68c4 <vfprintf+0x5f2>
    68ac:	d5 14       	cp	r13, r5
    68ae:	50 f4       	brcc	.+20     	; 0x68c4 <vfprintf+0x5f2>
    68b0:	b7 01       	movw	r22, r14
    68b2:	80 e2       	ldi	r24, 0x20	; 32
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	0e d4       	rcall	.+2076   	; 0x70d4 <fputc>
    68b8:	d3 94       	inc	r13
    68ba:	f8 cf       	rjmp	.-16     	; 0x68ac <vfprintf+0x5da>
    68bc:	d5 14       	cp	r13, r5
    68be:	10 f4       	brcc	.+4      	; 0x68c4 <vfprintf+0x5f2>
    68c0:	5d 18       	sub	r5, r13
    68c2:	01 c0       	rjmp	.+2      	; 0x68c6 <vfprintf+0x5f4>
    68c4:	51 2c       	mov	r5, r1
    68c6:	04 ff       	sbrs	r16, 4
    68c8:	0f c0       	rjmp	.+30     	; 0x68e8 <vfprintf+0x616>
    68ca:	b7 01       	movw	r22, r14
    68cc:	80 e3       	ldi	r24, 0x30	; 48
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	01 d4       	rcall	.+2050   	; 0x70d4 <fputc>
    68d2:	02 ff       	sbrs	r16, 2
    68d4:	16 c0       	rjmp	.+44     	; 0x6902 <vfprintf+0x630>
    68d6:	01 fd       	sbrc	r16, 1
    68d8:	03 c0       	rjmp	.+6      	; 0x68e0 <vfprintf+0x60e>
    68da:	88 e7       	ldi	r24, 0x78	; 120
    68dc:	90 e0       	ldi	r25, 0x00	; 0
    68de:	02 c0       	rjmp	.+4      	; 0x68e4 <vfprintf+0x612>
    68e0:	88 e5       	ldi	r24, 0x58	; 88
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	b7 01       	movw	r22, r14
    68e6:	0c c0       	rjmp	.+24     	; 0x6900 <vfprintf+0x62e>
    68e8:	80 2f       	mov	r24, r16
    68ea:	86 78       	andi	r24, 0x86	; 134
    68ec:	51 f0       	breq	.+20     	; 0x6902 <vfprintf+0x630>
    68ee:	01 ff       	sbrs	r16, 1
    68f0:	02 c0       	rjmp	.+4      	; 0x68f6 <vfprintf+0x624>
    68f2:	8b e2       	ldi	r24, 0x2B	; 43
    68f4:	01 c0       	rjmp	.+2      	; 0x68f8 <vfprintf+0x626>
    68f6:	80 e2       	ldi	r24, 0x20	; 32
    68f8:	07 fd       	sbrc	r16, 7
    68fa:	8d e2       	ldi	r24, 0x2D	; 45
    68fc:	b7 01       	movw	r22, r14
    68fe:	90 e0       	ldi	r25, 0x00	; 0
    6900:	e9 d3       	rcall	.+2002   	; 0x70d4 <fputc>
    6902:	c1 16       	cp	r12, r17
    6904:	30 f4       	brcc	.+12     	; 0x6912 <vfprintf+0x640>
    6906:	b7 01       	movw	r22, r14
    6908:	80 e3       	ldi	r24, 0x30	; 48
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	e3 d3       	rcall	.+1990   	; 0x70d4 <fputc>
    690e:	11 50       	subi	r17, 0x01	; 1
    6910:	f8 cf       	rjmp	.-16     	; 0x6902 <vfprintf+0x630>
    6912:	ca 94       	dec	r12
    6914:	f3 01       	movw	r30, r6
    6916:	ec 0d       	add	r30, r12
    6918:	f1 1d       	adc	r31, r1
    691a:	80 81       	ld	r24, Z
    691c:	b7 01       	movw	r22, r14
    691e:	90 e0       	ldi	r25, 0x00	; 0
    6920:	d9 d3       	rcall	.+1970   	; 0x70d4 <fputc>
    6922:	c1 10       	cpse	r12, r1
    6924:	f6 cf       	rjmp	.-20     	; 0x6912 <vfprintf+0x640>
    6926:	15 c0       	rjmp	.+42     	; 0x6952 <vfprintf+0x680>
    6928:	f4 e0       	ldi	r31, 0x04	; 4
    692a:	f5 15       	cp	r31, r5
    692c:	50 f5       	brcc	.+84     	; 0x6982 <vfprintf+0x6b0>
    692e:	84 e0       	ldi	r24, 0x04	; 4
    6930:	58 1a       	sub	r5, r24
    6932:	93 fe       	sbrs	r9, 3
    6934:	1e c0       	rjmp	.+60     	; 0x6972 <vfprintf+0x6a0>
    6936:	01 11       	cpse	r16, r1
    6938:	25 c0       	rjmp	.+74     	; 0x6984 <vfprintf+0x6b2>
    693a:	2c 85       	ldd	r18, Y+12	; 0x0c
    693c:	23 ff       	sbrs	r18, 3
    693e:	27 c0       	rjmp	.+78     	; 0x698e <vfprintf+0x6bc>
    6940:	0a e9       	ldi	r16, 0x9A	; 154
    6942:	11 e0       	ldi	r17, 0x01	; 1
    6944:	39 2d       	mov	r19, r9
    6946:	30 71       	andi	r19, 0x10	; 16
    6948:	93 2e       	mov	r9, r19
    694a:	f8 01       	movw	r30, r16
    694c:	84 91       	lpm	r24, Z
    694e:	81 11       	cpse	r24, r1
    6950:	21 c0       	rjmp	.+66     	; 0x6994 <vfprintf+0x6c2>
    6952:	55 20       	and	r5, r5
    6954:	09 f4       	brne	.+2      	; 0x6958 <vfprintf+0x686>
    6956:	fc cc       	rjmp	.-1544   	; 0x6350 <vfprintf+0x7e>
    6958:	b7 01       	movw	r22, r14
    695a:	80 e2       	ldi	r24, 0x20	; 32
    695c:	90 e0       	ldi	r25, 0x00	; 0
    695e:	ba d3       	rcall	.+1908   	; 0x70d4 <fputc>
    6960:	5a 94       	dec	r5
    6962:	f7 cf       	rjmp	.-18     	; 0x6952 <vfprintf+0x680>
    6964:	f7 01       	movw	r30, r14
    6966:	86 81       	ldd	r24, Z+6	; 0x06
    6968:	97 81       	ldd	r25, Z+7	; 0x07
    696a:	23 c0       	rjmp	.+70     	; 0x69b2 <vfprintf+0x6e0>
    696c:	8f ef       	ldi	r24, 0xFF	; 255
    696e:	9f ef       	ldi	r25, 0xFF	; 255
    6970:	20 c0       	rjmp	.+64     	; 0x69b2 <vfprintf+0x6e0>
    6972:	b7 01       	movw	r22, r14
    6974:	80 e2       	ldi	r24, 0x20	; 32
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	ad d3       	rcall	.+1882   	; 0x70d4 <fputc>
    697a:	5a 94       	dec	r5
    697c:	51 10       	cpse	r5, r1
    697e:	f9 cf       	rjmp	.-14     	; 0x6972 <vfprintf+0x6a0>
    6980:	da cf       	rjmp	.-76     	; 0x6936 <vfprintf+0x664>
    6982:	51 2c       	mov	r5, r1
    6984:	b7 01       	movw	r22, r14
    6986:	80 2f       	mov	r24, r16
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	a4 d3       	rcall	.+1864   	; 0x70d4 <fputc>
    698c:	d6 cf       	rjmp	.-84     	; 0x693a <vfprintf+0x668>
    698e:	0e e9       	ldi	r16, 0x9E	; 158
    6990:	11 e0       	ldi	r17, 0x01	; 1
    6992:	d8 cf       	rjmp	.-80     	; 0x6944 <vfprintf+0x672>
    6994:	91 10       	cpse	r9, r1
    6996:	80 52       	subi	r24, 0x20	; 32
    6998:	b7 01       	movw	r22, r14
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	9b d3       	rcall	.+1846   	; 0x70d4 <fputc>
    699e:	0f 5f       	subi	r16, 0xFF	; 255
    69a0:	1f 4f       	sbci	r17, 0xFF	; 255
    69a2:	d3 cf       	rjmp	.-90     	; 0x694a <vfprintf+0x678>
    69a4:	23 e0       	ldi	r18, 0x03	; 3
    69a6:	25 15       	cp	r18, r5
    69a8:	10 f4       	brcc	.+4      	; 0x69ae <vfprintf+0x6dc>
    69aa:	83 e0       	ldi	r24, 0x03	; 3
    69ac:	c1 cf       	rjmp	.-126    	; 0x6930 <vfprintf+0x65e>
    69ae:	51 2c       	mov	r5, r1
    69b0:	c4 cf       	rjmp	.-120    	; 0x693a <vfprintf+0x668>
    69b2:	60 96       	adiw	r28, 0x10	; 16
    69b4:	0f b6       	in	r0, 0x3f	; 63
    69b6:	f8 94       	cli
    69b8:	de bf       	out	0x3e, r29	; 62
    69ba:	0f be       	out	0x3f, r0	; 63
    69bc:	cd bf       	out	0x3d, r28	; 61
    69be:	df 91       	pop	r29
    69c0:	cf 91       	pop	r28
    69c2:	1f 91       	pop	r17
    69c4:	0f 91       	pop	r16
    69c6:	ff 90       	pop	r15
    69c8:	ef 90       	pop	r14
    69ca:	df 90       	pop	r13
    69cc:	cf 90       	pop	r12
    69ce:	bf 90       	pop	r11
    69d0:	af 90       	pop	r10
    69d2:	9f 90       	pop	r9
    69d4:	8f 90       	pop	r8
    69d6:	7f 90       	pop	r7
    69d8:	6f 90       	pop	r6
    69da:	5f 90       	pop	r5
    69dc:	4f 90       	pop	r4
    69de:	3f 90       	pop	r3
    69e0:	2f 90       	pop	r2
    69e2:	08 95       	ret

000069e4 <__divsf3>:
    69e4:	12 d0       	rcall	.+36     	; 0x6a0a <__divsf3x>
    69e6:	0c 94 47 24 	jmp	0x488e	; 0x488e <__fp_round>
    69ea:	0e 94 40 24 	call	0x4880	; 0x4880 <__fp_pscB>
    69ee:	58 f0       	brcs	.+22     	; 0x6a06 <__divsf3+0x22>
    69f0:	0e 94 39 24 	call	0x4872	; 0x4872 <__fp_pscA>
    69f4:	40 f0       	brcs	.+16     	; 0x6a06 <__divsf3+0x22>
    69f6:	29 f4       	brne	.+10     	; 0x6a02 <__divsf3+0x1e>
    69f8:	5f 3f       	cpi	r21, 0xFF	; 255
    69fa:	29 f0       	breq	.+10     	; 0x6a06 <__divsf3+0x22>
    69fc:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__fp_inf>
    6a00:	51 11       	cpse	r21, r1
    6a02:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__fp_szero>
    6a06:	0c 94 36 24 	jmp	0x486c	; 0x486c <__fp_nan>

00006a0a <__divsf3x>:
    6a0a:	0e 94 0c 23 	call	0x4618	; 0x4618 <__fp_split3>
    6a0e:	68 f3       	brcs	.-38     	; 0x69ea <__divsf3+0x6>

00006a10 <__divsf3_pse>:
    6a10:	99 23       	and	r25, r25
    6a12:	b1 f3       	breq	.-20     	; 0x6a00 <__divsf3+0x1c>
    6a14:	55 23       	and	r21, r21
    6a16:	91 f3       	breq	.-28     	; 0x69fc <__divsf3+0x18>
    6a18:	95 1b       	sub	r25, r21
    6a1a:	55 0b       	sbc	r21, r21
    6a1c:	bb 27       	eor	r27, r27
    6a1e:	aa 27       	eor	r26, r26
    6a20:	62 17       	cp	r22, r18
    6a22:	73 07       	cpc	r23, r19
    6a24:	84 07       	cpc	r24, r20
    6a26:	38 f0       	brcs	.+14     	; 0x6a36 <__divsf3_pse+0x26>
    6a28:	9f 5f       	subi	r25, 0xFF	; 255
    6a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a2c:	22 0f       	add	r18, r18
    6a2e:	33 1f       	adc	r19, r19
    6a30:	44 1f       	adc	r20, r20
    6a32:	aa 1f       	adc	r26, r26
    6a34:	a9 f3       	breq	.-22     	; 0x6a20 <__divsf3_pse+0x10>
    6a36:	35 d0       	rcall	.+106    	; 0x6aa2 <__divsf3_pse+0x92>
    6a38:	0e 2e       	mov	r0, r30
    6a3a:	3a f0       	brmi	.+14     	; 0x6a4a <__divsf3_pse+0x3a>
    6a3c:	e0 e8       	ldi	r30, 0x80	; 128
    6a3e:	32 d0       	rcall	.+100    	; 0x6aa4 <__divsf3_pse+0x94>
    6a40:	91 50       	subi	r25, 0x01	; 1
    6a42:	50 40       	sbci	r21, 0x00	; 0
    6a44:	e6 95       	lsr	r30
    6a46:	00 1c       	adc	r0, r0
    6a48:	ca f7       	brpl	.-14     	; 0x6a3c <__divsf3_pse+0x2c>
    6a4a:	2b d0       	rcall	.+86     	; 0x6aa2 <__divsf3_pse+0x92>
    6a4c:	fe 2f       	mov	r31, r30
    6a4e:	29 d0       	rcall	.+82     	; 0x6aa2 <__divsf3_pse+0x92>
    6a50:	66 0f       	add	r22, r22
    6a52:	77 1f       	adc	r23, r23
    6a54:	88 1f       	adc	r24, r24
    6a56:	bb 1f       	adc	r27, r27
    6a58:	26 17       	cp	r18, r22
    6a5a:	37 07       	cpc	r19, r23
    6a5c:	48 07       	cpc	r20, r24
    6a5e:	ab 07       	cpc	r26, r27
    6a60:	b0 e8       	ldi	r27, 0x80	; 128
    6a62:	09 f0       	breq	.+2      	; 0x6a66 <__divsf3_pse+0x56>
    6a64:	bb 0b       	sbc	r27, r27
    6a66:	80 2d       	mov	r24, r0
    6a68:	bf 01       	movw	r22, r30
    6a6a:	ff 27       	eor	r31, r31
    6a6c:	93 58       	subi	r25, 0x83	; 131
    6a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a70:	3a f0       	brmi	.+14     	; 0x6a80 <__divsf3_pse+0x70>
    6a72:	9e 3f       	cpi	r25, 0xFE	; 254
    6a74:	51 05       	cpc	r21, r1
    6a76:	78 f0       	brcs	.+30     	; 0x6a96 <__divsf3_pse+0x86>
    6a78:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__fp_inf>
    6a7c:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__fp_szero>
    6a80:	5f 3f       	cpi	r21, 0xFF	; 255
    6a82:	e4 f3       	brlt	.-8      	; 0x6a7c <__divsf3_pse+0x6c>
    6a84:	98 3e       	cpi	r25, 0xE8	; 232
    6a86:	d4 f3       	brlt	.-12     	; 0x6a7c <__divsf3_pse+0x6c>
    6a88:	86 95       	lsr	r24
    6a8a:	77 95       	ror	r23
    6a8c:	67 95       	ror	r22
    6a8e:	b7 95       	ror	r27
    6a90:	f7 95       	ror	r31
    6a92:	9f 5f       	subi	r25, 0xFF	; 255
    6a94:	c9 f7       	brne	.-14     	; 0x6a88 <__divsf3_pse+0x78>
    6a96:	88 0f       	add	r24, r24
    6a98:	91 1d       	adc	r25, r1
    6a9a:	96 95       	lsr	r25
    6a9c:	87 95       	ror	r24
    6a9e:	97 f9       	bld	r25, 7
    6aa0:	08 95       	ret
    6aa2:	e1 e0       	ldi	r30, 0x01	; 1
    6aa4:	66 0f       	add	r22, r22
    6aa6:	77 1f       	adc	r23, r23
    6aa8:	88 1f       	adc	r24, r24
    6aaa:	bb 1f       	adc	r27, r27
    6aac:	62 17       	cp	r22, r18
    6aae:	73 07       	cpc	r23, r19
    6ab0:	84 07       	cpc	r24, r20
    6ab2:	ba 07       	cpc	r27, r26
    6ab4:	20 f0       	brcs	.+8      	; 0x6abe <__divsf3_pse+0xae>
    6ab6:	62 1b       	sub	r22, r18
    6ab8:	73 0b       	sbc	r23, r19
    6aba:	84 0b       	sbc	r24, r20
    6abc:	ba 0b       	sbc	r27, r26
    6abe:	ee 1f       	adc	r30, r30
    6ac0:	88 f7       	brcc	.-30     	; 0x6aa4 <__divsf3_pse+0x94>
    6ac2:	e0 95       	com	r30
    6ac4:	08 95       	ret

00006ac6 <__floatunsisf>:
    6ac6:	e8 94       	clt
    6ac8:	09 c0       	rjmp	.+18     	; 0x6adc <__floatsisf+0x12>

00006aca <__floatsisf>:
    6aca:	97 fb       	bst	r25, 7
    6acc:	3e f4       	brtc	.+14     	; 0x6adc <__floatsisf+0x12>
    6ace:	90 95       	com	r25
    6ad0:	80 95       	com	r24
    6ad2:	70 95       	com	r23
    6ad4:	61 95       	neg	r22
    6ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    6ada:	9f 4f       	sbci	r25, 0xFF	; 255
    6adc:	99 23       	and	r25, r25
    6ade:	a9 f0       	breq	.+42     	; 0x6b0a <__floatsisf+0x40>
    6ae0:	f9 2f       	mov	r31, r25
    6ae2:	96 e9       	ldi	r25, 0x96	; 150
    6ae4:	bb 27       	eor	r27, r27
    6ae6:	93 95       	inc	r25
    6ae8:	f6 95       	lsr	r31
    6aea:	87 95       	ror	r24
    6aec:	77 95       	ror	r23
    6aee:	67 95       	ror	r22
    6af0:	b7 95       	ror	r27
    6af2:	f1 11       	cpse	r31, r1
    6af4:	f8 cf       	rjmp	.-16     	; 0x6ae6 <__floatsisf+0x1c>
    6af6:	fa f4       	brpl	.+62     	; 0x6b36 <__floatsisf+0x6c>
    6af8:	bb 0f       	add	r27, r27
    6afa:	11 f4       	brne	.+4      	; 0x6b00 <__floatsisf+0x36>
    6afc:	60 ff       	sbrs	r22, 0
    6afe:	1b c0       	rjmp	.+54     	; 0x6b36 <__floatsisf+0x6c>
    6b00:	6f 5f       	subi	r22, 0xFF	; 255
    6b02:	7f 4f       	sbci	r23, 0xFF	; 255
    6b04:	8f 4f       	sbci	r24, 0xFF	; 255
    6b06:	9f 4f       	sbci	r25, 0xFF	; 255
    6b08:	16 c0       	rjmp	.+44     	; 0x6b36 <__floatsisf+0x6c>
    6b0a:	88 23       	and	r24, r24
    6b0c:	11 f0       	breq	.+4      	; 0x6b12 <__floatsisf+0x48>
    6b0e:	96 e9       	ldi	r25, 0x96	; 150
    6b10:	11 c0       	rjmp	.+34     	; 0x6b34 <__floatsisf+0x6a>
    6b12:	77 23       	and	r23, r23
    6b14:	21 f0       	breq	.+8      	; 0x6b1e <__floatsisf+0x54>
    6b16:	9e e8       	ldi	r25, 0x8E	; 142
    6b18:	87 2f       	mov	r24, r23
    6b1a:	76 2f       	mov	r23, r22
    6b1c:	05 c0       	rjmp	.+10     	; 0x6b28 <__floatsisf+0x5e>
    6b1e:	66 23       	and	r22, r22
    6b20:	71 f0       	breq	.+28     	; 0x6b3e <__floatsisf+0x74>
    6b22:	96 e8       	ldi	r25, 0x86	; 134
    6b24:	86 2f       	mov	r24, r22
    6b26:	70 e0       	ldi	r23, 0x00	; 0
    6b28:	60 e0       	ldi	r22, 0x00	; 0
    6b2a:	2a f0       	brmi	.+10     	; 0x6b36 <__floatsisf+0x6c>
    6b2c:	9a 95       	dec	r25
    6b2e:	66 0f       	add	r22, r22
    6b30:	77 1f       	adc	r23, r23
    6b32:	88 1f       	adc	r24, r24
    6b34:	da f7       	brpl	.-10     	; 0x6b2c <__floatsisf+0x62>
    6b36:	88 0f       	add	r24, r24
    6b38:	96 95       	lsr	r25
    6b3a:	87 95       	ror	r24
    6b3c:	97 f9       	bld	r25, 7
    6b3e:	08 95       	ret

00006b40 <__gesf2>:
    6b40:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <__fp_cmp>
    6b44:	08 f4       	brcc	.+2      	; 0x6b48 <__gesf2+0x8>
    6b46:	8f ef       	ldi	r24, 0xFF	; 255
    6b48:	08 95       	ret

00006b4a <__udivmodsi4>:
    6b4a:	a1 e2       	ldi	r26, 0x21	; 33
    6b4c:	1a 2e       	mov	r1, r26
    6b4e:	aa 1b       	sub	r26, r26
    6b50:	bb 1b       	sub	r27, r27
    6b52:	fd 01       	movw	r30, r26
    6b54:	0d c0       	rjmp	.+26     	; 0x6b70 <__udivmodsi4_ep>

00006b56 <__udivmodsi4_loop>:
    6b56:	aa 1f       	adc	r26, r26
    6b58:	bb 1f       	adc	r27, r27
    6b5a:	ee 1f       	adc	r30, r30
    6b5c:	ff 1f       	adc	r31, r31
    6b5e:	a2 17       	cp	r26, r18
    6b60:	b3 07       	cpc	r27, r19
    6b62:	e4 07       	cpc	r30, r20
    6b64:	f5 07       	cpc	r31, r21
    6b66:	20 f0       	brcs	.+8      	; 0x6b70 <__udivmodsi4_ep>
    6b68:	a2 1b       	sub	r26, r18
    6b6a:	b3 0b       	sbc	r27, r19
    6b6c:	e4 0b       	sbc	r30, r20
    6b6e:	f5 0b       	sbc	r31, r21

00006b70 <__udivmodsi4_ep>:
    6b70:	66 1f       	adc	r22, r22
    6b72:	77 1f       	adc	r23, r23
    6b74:	88 1f       	adc	r24, r24
    6b76:	99 1f       	adc	r25, r25
    6b78:	1a 94       	dec	r1
    6b7a:	69 f7       	brne	.-38     	; 0x6b56 <__udivmodsi4_loop>
    6b7c:	60 95       	com	r22
    6b7e:	70 95       	com	r23
    6b80:	80 95       	com	r24
    6b82:	90 95       	com	r25
    6b84:	9b 01       	movw	r18, r22
    6b86:	ac 01       	movw	r20, r24
    6b88:	bd 01       	movw	r22, r26
    6b8a:	cf 01       	movw	r24, r30
    6b8c:	08 95       	ret

00006b8e <__tablejump2__>:
    6b8e:	ee 0f       	add	r30, r30
    6b90:	ff 1f       	adc	r31, r31
    6b92:	88 1f       	adc	r24, r24
    6b94:	8b bf       	out	0x3b, r24	; 59
    6b96:	07 90       	elpm	r0, Z+
    6b98:	f6 91       	elpm	r31, Z
    6b9a:	e0 2d       	mov	r30, r0
    6b9c:	19 94       	eijmp

00006b9e <__umulhisi3>:
    6b9e:	a2 9f       	mul	r26, r18
    6ba0:	b0 01       	movw	r22, r0
    6ba2:	b3 9f       	mul	r27, r19
    6ba4:	c0 01       	movw	r24, r0
    6ba6:	a3 9f       	mul	r26, r19
    6ba8:	70 0d       	add	r23, r0
    6baa:	81 1d       	adc	r24, r1
    6bac:	11 24       	eor	r1, r1
    6bae:	91 1d       	adc	r25, r1
    6bb0:	b2 9f       	mul	r27, r18
    6bb2:	70 0d       	add	r23, r0
    6bb4:	81 1d       	adc	r24, r1
    6bb6:	11 24       	eor	r1, r1
    6bb8:	91 1d       	adc	r25, r1
    6bba:	08 95       	ret

00006bbc <calloc>:
    6bbc:	0f 93       	push	r16
    6bbe:	1f 93       	push	r17
    6bc0:	cf 93       	push	r28
    6bc2:	df 93       	push	r29
    6bc4:	86 9f       	mul	r24, r22
    6bc6:	80 01       	movw	r16, r0
    6bc8:	87 9f       	mul	r24, r23
    6bca:	10 0d       	add	r17, r0
    6bcc:	96 9f       	mul	r25, r22
    6bce:	10 0d       	add	r17, r0
    6bd0:	11 24       	eor	r1, r1
    6bd2:	c8 01       	movw	r24, r16
    6bd4:	0d d0       	rcall	.+26     	; 0x6bf0 <malloc>
    6bd6:	ec 01       	movw	r28, r24
    6bd8:	00 97       	sbiw	r24, 0x00	; 0
    6bda:	21 f0       	breq	.+8      	; 0x6be4 <calloc+0x28>
    6bdc:	a8 01       	movw	r20, r16
    6bde:	60 e0       	ldi	r22, 0x00	; 0
    6be0:	70 e0       	ldi	r23, 0x00	; 0
    6be2:	17 d2       	rcall	.+1070   	; 0x7012 <memset>
    6be4:	ce 01       	movw	r24, r28
    6be6:	df 91       	pop	r29
    6be8:	cf 91       	pop	r28
    6bea:	1f 91       	pop	r17
    6bec:	0f 91       	pop	r16
    6bee:	08 95       	ret

00006bf0 <malloc>:
    6bf0:	0f 93       	push	r16
    6bf2:	1f 93       	push	r17
    6bf4:	cf 93       	push	r28
    6bf6:	df 93       	push	r29
    6bf8:	82 30       	cpi	r24, 0x02	; 2
    6bfa:	91 05       	cpc	r25, r1
    6bfc:	10 f4       	brcc	.+4      	; 0x6c02 <malloc+0x12>
    6bfe:	82 e0       	ldi	r24, 0x02	; 2
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <__flp>
    6c06:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <__flp+0x1>
    6c0a:	20 e0       	ldi	r18, 0x00	; 0
    6c0c:	30 e0       	ldi	r19, 0x00	; 0
    6c0e:	a0 e0       	ldi	r26, 0x00	; 0
    6c10:	b0 e0       	ldi	r27, 0x00	; 0
    6c12:	30 97       	sbiw	r30, 0x00	; 0
    6c14:	19 f1       	breq	.+70     	; 0x6c5c <malloc+0x6c>
    6c16:	40 81       	ld	r20, Z
    6c18:	51 81       	ldd	r21, Z+1	; 0x01
    6c1a:	02 81       	ldd	r16, Z+2	; 0x02
    6c1c:	13 81       	ldd	r17, Z+3	; 0x03
    6c1e:	48 17       	cp	r20, r24
    6c20:	59 07       	cpc	r21, r25
    6c22:	c8 f0       	brcs	.+50     	; 0x6c56 <malloc+0x66>
    6c24:	84 17       	cp	r24, r20
    6c26:	95 07       	cpc	r25, r21
    6c28:	69 f4       	brne	.+26     	; 0x6c44 <malloc+0x54>
    6c2a:	10 97       	sbiw	r26, 0x00	; 0
    6c2c:	31 f0       	breq	.+12     	; 0x6c3a <malloc+0x4a>
    6c2e:	12 96       	adiw	r26, 0x02	; 2
    6c30:	0c 93       	st	X, r16
    6c32:	12 97       	sbiw	r26, 0x02	; 2
    6c34:	13 96       	adiw	r26, 0x03	; 3
    6c36:	1c 93       	st	X, r17
    6c38:	27 c0       	rjmp	.+78     	; 0x6c88 <malloc+0x98>
    6c3a:	00 93 cb 15 	sts	0x15CB, r16	; 0x8015cb <__flp>
    6c3e:	10 93 cc 15 	sts	0x15CC, r17	; 0x8015cc <__flp+0x1>
    6c42:	22 c0       	rjmp	.+68     	; 0x6c88 <malloc+0x98>
    6c44:	21 15       	cp	r18, r1
    6c46:	31 05       	cpc	r19, r1
    6c48:	19 f0       	breq	.+6      	; 0x6c50 <malloc+0x60>
    6c4a:	42 17       	cp	r20, r18
    6c4c:	53 07       	cpc	r21, r19
    6c4e:	18 f4       	brcc	.+6      	; 0x6c56 <malloc+0x66>
    6c50:	9a 01       	movw	r18, r20
    6c52:	bd 01       	movw	r22, r26
    6c54:	ef 01       	movw	r28, r30
    6c56:	df 01       	movw	r26, r30
    6c58:	f8 01       	movw	r30, r16
    6c5a:	db cf       	rjmp	.-74     	; 0x6c12 <malloc+0x22>
    6c5c:	21 15       	cp	r18, r1
    6c5e:	31 05       	cpc	r19, r1
    6c60:	f9 f0       	breq	.+62     	; 0x6ca0 <malloc+0xb0>
    6c62:	28 1b       	sub	r18, r24
    6c64:	39 0b       	sbc	r19, r25
    6c66:	24 30       	cpi	r18, 0x04	; 4
    6c68:	31 05       	cpc	r19, r1
    6c6a:	80 f4       	brcc	.+32     	; 0x6c8c <malloc+0x9c>
    6c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    6c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    6c70:	61 15       	cp	r22, r1
    6c72:	71 05       	cpc	r23, r1
    6c74:	21 f0       	breq	.+8      	; 0x6c7e <malloc+0x8e>
    6c76:	fb 01       	movw	r30, r22
    6c78:	93 83       	std	Z+3, r25	; 0x03
    6c7a:	82 83       	std	Z+2, r24	; 0x02
    6c7c:	04 c0       	rjmp	.+8      	; 0x6c86 <malloc+0x96>
    6c7e:	90 93 cc 15 	sts	0x15CC, r25	; 0x8015cc <__flp+0x1>
    6c82:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <__flp>
    6c86:	fe 01       	movw	r30, r28
    6c88:	32 96       	adiw	r30, 0x02	; 2
    6c8a:	44 c0       	rjmp	.+136    	; 0x6d14 <malloc+0x124>
    6c8c:	fe 01       	movw	r30, r28
    6c8e:	e2 0f       	add	r30, r18
    6c90:	f3 1f       	adc	r31, r19
    6c92:	81 93       	st	Z+, r24
    6c94:	91 93       	st	Z+, r25
    6c96:	22 50       	subi	r18, 0x02	; 2
    6c98:	31 09       	sbc	r19, r1
    6c9a:	39 83       	std	Y+1, r19	; 0x01
    6c9c:	28 83       	st	Y, r18
    6c9e:	3a c0       	rjmp	.+116    	; 0x6d14 <malloc+0x124>
    6ca0:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <__brkval>
    6ca4:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <__brkval+0x1>
    6ca8:	23 2b       	or	r18, r19
    6caa:	41 f4       	brne	.+16     	; 0x6cbc <malloc+0xcc>
    6cac:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6cb0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6cb4:	30 93 ca 15 	sts	0x15CA, r19	; 0x8015ca <__brkval+0x1>
    6cb8:	20 93 c9 15 	sts	0x15C9, r18	; 0x8015c9 <__brkval>
    6cbc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6cc0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6cc4:	21 15       	cp	r18, r1
    6cc6:	31 05       	cpc	r19, r1
    6cc8:	41 f4       	brne	.+16     	; 0x6cda <malloc+0xea>
    6cca:	2d b7       	in	r18, 0x3d	; 61
    6ccc:	3e b7       	in	r19, 0x3e	; 62
    6cce:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6cd2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6cd6:	24 1b       	sub	r18, r20
    6cd8:	35 0b       	sbc	r19, r21
    6cda:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <__brkval>
    6cde:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <__brkval+0x1>
    6ce2:	e2 17       	cp	r30, r18
    6ce4:	f3 07       	cpc	r31, r19
    6ce6:	a0 f4       	brcc	.+40     	; 0x6d10 <malloc+0x120>
    6ce8:	2e 1b       	sub	r18, r30
    6cea:	3f 0b       	sbc	r19, r31
    6cec:	28 17       	cp	r18, r24
    6cee:	39 07       	cpc	r19, r25
    6cf0:	78 f0       	brcs	.+30     	; 0x6d10 <malloc+0x120>
    6cf2:	ac 01       	movw	r20, r24
    6cf4:	4e 5f       	subi	r20, 0xFE	; 254
    6cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    6cf8:	24 17       	cp	r18, r20
    6cfa:	35 07       	cpc	r19, r21
    6cfc:	48 f0       	brcs	.+18     	; 0x6d10 <malloc+0x120>
    6cfe:	4e 0f       	add	r20, r30
    6d00:	5f 1f       	adc	r21, r31
    6d02:	50 93 ca 15 	sts	0x15CA, r21	; 0x8015ca <__brkval+0x1>
    6d06:	40 93 c9 15 	sts	0x15C9, r20	; 0x8015c9 <__brkval>
    6d0a:	81 93       	st	Z+, r24
    6d0c:	91 93       	st	Z+, r25
    6d0e:	02 c0       	rjmp	.+4      	; 0x6d14 <malloc+0x124>
    6d10:	e0 e0       	ldi	r30, 0x00	; 0
    6d12:	f0 e0       	ldi	r31, 0x00	; 0
    6d14:	cf 01       	movw	r24, r30
    6d16:	df 91       	pop	r29
    6d18:	cf 91       	pop	r28
    6d1a:	1f 91       	pop	r17
    6d1c:	0f 91       	pop	r16
    6d1e:	08 95       	ret

00006d20 <free>:
    6d20:	cf 93       	push	r28
    6d22:	df 93       	push	r29
    6d24:	00 97       	sbiw	r24, 0x00	; 0
    6d26:	09 f4       	brne	.+2      	; 0x6d2a <free+0xa>
    6d28:	81 c0       	rjmp	.+258    	; 0x6e2c <free+0x10c>
    6d2a:	fc 01       	movw	r30, r24
    6d2c:	32 97       	sbiw	r30, 0x02	; 2
    6d2e:	13 82       	std	Z+3, r1	; 0x03
    6d30:	12 82       	std	Z+2, r1	; 0x02
    6d32:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <__flp>
    6d36:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <__flp+0x1>
    6d3a:	10 97       	sbiw	r26, 0x00	; 0
    6d3c:	81 f4       	brne	.+32     	; 0x6d5e <free+0x3e>
    6d3e:	20 81       	ld	r18, Z
    6d40:	31 81       	ldd	r19, Z+1	; 0x01
    6d42:	82 0f       	add	r24, r18
    6d44:	93 1f       	adc	r25, r19
    6d46:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <__brkval>
    6d4a:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <__brkval+0x1>
    6d4e:	28 17       	cp	r18, r24
    6d50:	39 07       	cpc	r19, r25
    6d52:	51 f5       	brne	.+84     	; 0x6da8 <free+0x88>
    6d54:	f0 93 ca 15 	sts	0x15CA, r31	; 0x8015ca <__brkval+0x1>
    6d58:	e0 93 c9 15 	sts	0x15C9, r30	; 0x8015c9 <__brkval>
    6d5c:	67 c0       	rjmp	.+206    	; 0x6e2c <free+0x10c>
    6d5e:	ed 01       	movw	r28, r26
    6d60:	20 e0       	ldi	r18, 0x00	; 0
    6d62:	30 e0       	ldi	r19, 0x00	; 0
    6d64:	ce 17       	cp	r28, r30
    6d66:	df 07       	cpc	r29, r31
    6d68:	40 f4       	brcc	.+16     	; 0x6d7a <free+0x5a>
    6d6a:	4a 81       	ldd	r20, Y+2	; 0x02
    6d6c:	5b 81       	ldd	r21, Y+3	; 0x03
    6d6e:	9e 01       	movw	r18, r28
    6d70:	41 15       	cp	r20, r1
    6d72:	51 05       	cpc	r21, r1
    6d74:	f1 f0       	breq	.+60     	; 0x6db2 <free+0x92>
    6d76:	ea 01       	movw	r28, r20
    6d78:	f5 cf       	rjmp	.-22     	; 0x6d64 <free+0x44>
    6d7a:	d3 83       	std	Z+3, r29	; 0x03
    6d7c:	c2 83       	std	Z+2, r28	; 0x02
    6d7e:	40 81       	ld	r20, Z
    6d80:	51 81       	ldd	r21, Z+1	; 0x01
    6d82:	84 0f       	add	r24, r20
    6d84:	95 1f       	adc	r25, r21
    6d86:	c8 17       	cp	r28, r24
    6d88:	d9 07       	cpc	r29, r25
    6d8a:	59 f4       	brne	.+22     	; 0x6da2 <free+0x82>
    6d8c:	88 81       	ld	r24, Y
    6d8e:	99 81       	ldd	r25, Y+1	; 0x01
    6d90:	84 0f       	add	r24, r20
    6d92:	95 1f       	adc	r25, r21
    6d94:	02 96       	adiw	r24, 0x02	; 2
    6d96:	91 83       	std	Z+1, r25	; 0x01
    6d98:	80 83       	st	Z, r24
    6d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    6d9e:	93 83       	std	Z+3, r25	; 0x03
    6da0:	82 83       	std	Z+2, r24	; 0x02
    6da2:	21 15       	cp	r18, r1
    6da4:	31 05       	cpc	r19, r1
    6da6:	29 f4       	brne	.+10     	; 0x6db2 <free+0x92>
    6da8:	f0 93 cc 15 	sts	0x15CC, r31	; 0x8015cc <__flp+0x1>
    6dac:	e0 93 cb 15 	sts	0x15CB, r30	; 0x8015cb <__flp>
    6db0:	3d c0       	rjmp	.+122    	; 0x6e2c <free+0x10c>
    6db2:	e9 01       	movw	r28, r18
    6db4:	fb 83       	std	Y+3, r31	; 0x03
    6db6:	ea 83       	std	Y+2, r30	; 0x02
    6db8:	49 91       	ld	r20, Y+
    6dba:	59 91       	ld	r21, Y+
    6dbc:	c4 0f       	add	r28, r20
    6dbe:	d5 1f       	adc	r29, r21
    6dc0:	ec 17       	cp	r30, r28
    6dc2:	fd 07       	cpc	r31, r29
    6dc4:	61 f4       	brne	.+24     	; 0x6dde <free+0xbe>
    6dc6:	80 81       	ld	r24, Z
    6dc8:	91 81       	ldd	r25, Z+1	; 0x01
    6dca:	84 0f       	add	r24, r20
    6dcc:	95 1f       	adc	r25, r21
    6dce:	02 96       	adiw	r24, 0x02	; 2
    6dd0:	e9 01       	movw	r28, r18
    6dd2:	99 83       	std	Y+1, r25	; 0x01
    6dd4:	88 83       	st	Y, r24
    6dd6:	82 81       	ldd	r24, Z+2	; 0x02
    6dd8:	93 81       	ldd	r25, Z+3	; 0x03
    6dda:	9b 83       	std	Y+3, r25	; 0x03
    6ddc:	8a 83       	std	Y+2, r24	; 0x02
    6dde:	e0 e0       	ldi	r30, 0x00	; 0
    6de0:	f0 e0       	ldi	r31, 0x00	; 0
    6de2:	12 96       	adiw	r26, 0x02	; 2
    6de4:	8d 91       	ld	r24, X+
    6de6:	9c 91       	ld	r25, X
    6de8:	13 97       	sbiw	r26, 0x03	; 3
    6dea:	00 97       	sbiw	r24, 0x00	; 0
    6dec:	19 f0       	breq	.+6      	; 0x6df4 <free+0xd4>
    6dee:	fd 01       	movw	r30, r26
    6df0:	dc 01       	movw	r26, r24
    6df2:	f7 cf       	rjmp	.-18     	; 0x6de2 <free+0xc2>
    6df4:	8d 91       	ld	r24, X+
    6df6:	9c 91       	ld	r25, X
    6df8:	11 97       	sbiw	r26, 0x01	; 1
    6dfa:	9d 01       	movw	r18, r26
    6dfc:	2e 5f       	subi	r18, 0xFE	; 254
    6dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    6e00:	82 0f       	add	r24, r18
    6e02:	93 1f       	adc	r25, r19
    6e04:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <__brkval>
    6e08:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <__brkval+0x1>
    6e0c:	28 17       	cp	r18, r24
    6e0e:	39 07       	cpc	r19, r25
    6e10:	69 f4       	brne	.+26     	; 0x6e2c <free+0x10c>
    6e12:	30 97       	sbiw	r30, 0x00	; 0
    6e14:	29 f4       	brne	.+10     	; 0x6e20 <free+0x100>
    6e16:	10 92 cc 15 	sts	0x15CC, r1	; 0x8015cc <__flp+0x1>
    6e1a:	10 92 cb 15 	sts	0x15CB, r1	; 0x8015cb <__flp>
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <free+0x104>
    6e20:	13 82       	std	Z+3, r1	; 0x03
    6e22:	12 82       	std	Z+2, r1	; 0x02
    6e24:	b0 93 ca 15 	sts	0x15CA, r27	; 0x8015ca <__brkval+0x1>
    6e28:	a0 93 c9 15 	sts	0x15C9, r26	; 0x8015c9 <__brkval>
    6e2c:	df 91       	pop	r29
    6e2e:	cf 91       	pop	r28
    6e30:	08 95       	ret

00006e32 <abort>:
    6e32:	81 e0       	ldi	r24, 0x01	; 1
    6e34:	90 e0       	ldi	r25, 0x00	; 0
    6e36:	f8 94       	cli
    6e38:	21 c2       	rjmp	.+1090   	; 0x727c <_exit>

00006e3a <__ftoa_engine>:
    6e3a:	28 30       	cpi	r18, 0x08	; 8
    6e3c:	08 f0       	brcs	.+2      	; 0x6e40 <__ftoa_engine+0x6>
    6e3e:	27 e0       	ldi	r18, 0x07	; 7
    6e40:	33 27       	eor	r19, r19
    6e42:	da 01       	movw	r26, r20
    6e44:	99 0f       	add	r25, r25
    6e46:	31 1d       	adc	r19, r1
    6e48:	87 fd       	sbrc	r24, 7
    6e4a:	91 60       	ori	r25, 0x01	; 1
    6e4c:	00 96       	adiw	r24, 0x00	; 0
    6e4e:	61 05       	cpc	r22, r1
    6e50:	71 05       	cpc	r23, r1
    6e52:	39 f4       	brne	.+14     	; 0x6e62 <__ftoa_engine+0x28>
    6e54:	32 60       	ori	r19, 0x02	; 2
    6e56:	2e 5f       	subi	r18, 0xFE	; 254
    6e58:	3d 93       	st	X+, r19
    6e5a:	30 e3       	ldi	r19, 0x30	; 48
    6e5c:	2a 95       	dec	r18
    6e5e:	e1 f7       	brne	.-8      	; 0x6e58 <__ftoa_engine+0x1e>
    6e60:	08 95       	ret
    6e62:	9f 3f       	cpi	r25, 0xFF	; 255
    6e64:	30 f0       	brcs	.+12     	; 0x6e72 <__ftoa_engine+0x38>
    6e66:	80 38       	cpi	r24, 0x80	; 128
    6e68:	71 05       	cpc	r23, r1
    6e6a:	61 05       	cpc	r22, r1
    6e6c:	09 f0       	breq	.+2      	; 0x6e70 <__ftoa_engine+0x36>
    6e6e:	3c 5f       	subi	r19, 0xFC	; 252
    6e70:	3c 5f       	subi	r19, 0xFC	; 252
    6e72:	3d 93       	st	X+, r19
    6e74:	91 30       	cpi	r25, 0x01	; 1
    6e76:	08 f0       	brcs	.+2      	; 0x6e7a <__ftoa_engine+0x40>
    6e78:	80 68       	ori	r24, 0x80	; 128
    6e7a:	91 1d       	adc	r25, r1
    6e7c:	df 93       	push	r29
    6e7e:	cf 93       	push	r28
    6e80:	1f 93       	push	r17
    6e82:	0f 93       	push	r16
    6e84:	ff 92       	push	r15
    6e86:	ef 92       	push	r14
    6e88:	19 2f       	mov	r17, r25
    6e8a:	98 7f       	andi	r25, 0xF8	; 248
    6e8c:	96 95       	lsr	r25
    6e8e:	e9 2f       	mov	r30, r25
    6e90:	96 95       	lsr	r25
    6e92:	96 95       	lsr	r25
    6e94:	e9 0f       	add	r30, r25
    6e96:	ff 27       	eor	r31, r31
    6e98:	e4 50       	subi	r30, 0x04	; 4
    6e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    6e9c:	99 27       	eor	r25, r25
    6e9e:	33 27       	eor	r19, r19
    6ea0:	ee 24       	eor	r14, r14
    6ea2:	ff 24       	eor	r15, r15
    6ea4:	a7 01       	movw	r20, r14
    6ea6:	e7 01       	movw	r28, r14
    6ea8:	05 90       	lpm	r0, Z+
    6eaa:	08 94       	sec
    6eac:	07 94       	ror	r0
    6eae:	28 f4       	brcc	.+10     	; 0x6eba <__ftoa_engine+0x80>
    6eb0:	36 0f       	add	r19, r22
    6eb2:	e7 1e       	adc	r14, r23
    6eb4:	f8 1e       	adc	r15, r24
    6eb6:	49 1f       	adc	r20, r25
    6eb8:	51 1d       	adc	r21, r1
    6eba:	66 0f       	add	r22, r22
    6ebc:	77 1f       	adc	r23, r23
    6ebe:	88 1f       	adc	r24, r24
    6ec0:	99 1f       	adc	r25, r25
    6ec2:	06 94       	lsr	r0
    6ec4:	a1 f7       	brne	.-24     	; 0x6eae <__ftoa_engine+0x74>
    6ec6:	05 90       	lpm	r0, Z+
    6ec8:	07 94       	ror	r0
    6eca:	28 f4       	brcc	.+10     	; 0x6ed6 <__ftoa_engine+0x9c>
    6ecc:	e7 0e       	add	r14, r23
    6ece:	f8 1e       	adc	r15, r24
    6ed0:	49 1f       	adc	r20, r25
    6ed2:	56 1f       	adc	r21, r22
    6ed4:	c1 1d       	adc	r28, r1
    6ed6:	77 0f       	add	r23, r23
    6ed8:	88 1f       	adc	r24, r24
    6eda:	99 1f       	adc	r25, r25
    6edc:	66 1f       	adc	r22, r22
    6ede:	06 94       	lsr	r0
    6ee0:	a1 f7       	brne	.-24     	; 0x6eca <__ftoa_engine+0x90>
    6ee2:	05 90       	lpm	r0, Z+
    6ee4:	07 94       	ror	r0
    6ee6:	28 f4       	brcc	.+10     	; 0x6ef2 <__ftoa_engine+0xb8>
    6ee8:	f8 0e       	add	r15, r24
    6eea:	49 1f       	adc	r20, r25
    6eec:	56 1f       	adc	r21, r22
    6eee:	c7 1f       	adc	r28, r23
    6ef0:	d1 1d       	adc	r29, r1
    6ef2:	88 0f       	add	r24, r24
    6ef4:	99 1f       	adc	r25, r25
    6ef6:	66 1f       	adc	r22, r22
    6ef8:	77 1f       	adc	r23, r23
    6efa:	06 94       	lsr	r0
    6efc:	a1 f7       	brne	.-24     	; 0x6ee6 <__ftoa_engine+0xac>
    6efe:	05 90       	lpm	r0, Z+
    6f00:	07 94       	ror	r0
    6f02:	20 f4       	brcc	.+8      	; 0x6f0c <__ftoa_engine+0xd2>
    6f04:	49 0f       	add	r20, r25
    6f06:	56 1f       	adc	r21, r22
    6f08:	c7 1f       	adc	r28, r23
    6f0a:	d8 1f       	adc	r29, r24
    6f0c:	99 0f       	add	r25, r25
    6f0e:	66 1f       	adc	r22, r22
    6f10:	77 1f       	adc	r23, r23
    6f12:	88 1f       	adc	r24, r24
    6f14:	06 94       	lsr	r0
    6f16:	a9 f7       	brne	.-22     	; 0x6f02 <__ftoa_engine+0xc8>
    6f18:	84 91       	lpm	r24, Z
    6f1a:	10 95       	com	r17
    6f1c:	17 70       	andi	r17, 0x07	; 7
    6f1e:	41 f0       	breq	.+16     	; 0x6f30 <__ftoa_engine+0xf6>
    6f20:	d6 95       	lsr	r29
    6f22:	c7 95       	ror	r28
    6f24:	57 95       	ror	r21
    6f26:	47 95       	ror	r20
    6f28:	f7 94       	ror	r15
    6f2a:	e7 94       	ror	r14
    6f2c:	1a 95       	dec	r17
    6f2e:	c1 f7       	brne	.-16     	; 0x6f20 <__ftoa_engine+0xe6>
    6f30:	e2 ea       	ldi	r30, 0xA2	; 162
    6f32:	f1 e0       	ldi	r31, 0x01	; 1
    6f34:	68 94       	set
    6f36:	15 90       	lpm	r1, Z+
    6f38:	15 91       	lpm	r17, Z+
    6f3a:	35 91       	lpm	r19, Z+
    6f3c:	65 91       	lpm	r22, Z+
    6f3e:	95 91       	lpm	r25, Z+
    6f40:	05 90       	lpm	r0, Z+
    6f42:	7f e2       	ldi	r23, 0x2F	; 47
    6f44:	73 95       	inc	r23
    6f46:	e1 18       	sub	r14, r1
    6f48:	f1 0a       	sbc	r15, r17
    6f4a:	43 0b       	sbc	r20, r19
    6f4c:	56 0b       	sbc	r21, r22
    6f4e:	c9 0b       	sbc	r28, r25
    6f50:	d0 09       	sbc	r29, r0
    6f52:	c0 f7       	brcc	.-16     	; 0x6f44 <__ftoa_engine+0x10a>
    6f54:	e1 0c       	add	r14, r1
    6f56:	f1 1e       	adc	r15, r17
    6f58:	43 1f       	adc	r20, r19
    6f5a:	56 1f       	adc	r21, r22
    6f5c:	c9 1f       	adc	r28, r25
    6f5e:	d0 1d       	adc	r29, r0
    6f60:	7e f4       	brtc	.+30     	; 0x6f80 <__ftoa_engine+0x146>
    6f62:	70 33       	cpi	r23, 0x30	; 48
    6f64:	11 f4       	brne	.+4      	; 0x6f6a <__ftoa_engine+0x130>
    6f66:	8a 95       	dec	r24
    6f68:	e6 cf       	rjmp	.-52     	; 0x6f36 <__ftoa_engine+0xfc>
    6f6a:	e8 94       	clt
    6f6c:	01 50       	subi	r16, 0x01	; 1
    6f6e:	30 f0       	brcs	.+12     	; 0x6f7c <__ftoa_engine+0x142>
    6f70:	08 0f       	add	r16, r24
    6f72:	0a f4       	brpl	.+2      	; 0x6f76 <__ftoa_engine+0x13c>
    6f74:	00 27       	eor	r16, r16
    6f76:	02 17       	cp	r16, r18
    6f78:	08 f4       	brcc	.+2      	; 0x6f7c <__ftoa_engine+0x142>
    6f7a:	20 2f       	mov	r18, r16
    6f7c:	23 95       	inc	r18
    6f7e:	02 2f       	mov	r16, r18
    6f80:	7a 33       	cpi	r23, 0x3A	; 58
    6f82:	28 f0       	brcs	.+10     	; 0x6f8e <__ftoa_engine+0x154>
    6f84:	79 e3       	ldi	r23, 0x39	; 57
    6f86:	7d 93       	st	X+, r23
    6f88:	2a 95       	dec	r18
    6f8a:	e9 f7       	brne	.-6      	; 0x6f86 <__ftoa_engine+0x14c>
    6f8c:	10 c0       	rjmp	.+32     	; 0x6fae <__ftoa_engine+0x174>
    6f8e:	7d 93       	st	X+, r23
    6f90:	2a 95       	dec	r18
    6f92:	89 f6       	brne	.-94     	; 0x6f36 <__ftoa_engine+0xfc>
    6f94:	06 94       	lsr	r0
    6f96:	97 95       	ror	r25
    6f98:	67 95       	ror	r22
    6f9a:	37 95       	ror	r19
    6f9c:	17 95       	ror	r17
    6f9e:	17 94       	ror	r1
    6fa0:	e1 18       	sub	r14, r1
    6fa2:	f1 0a       	sbc	r15, r17
    6fa4:	43 0b       	sbc	r20, r19
    6fa6:	56 0b       	sbc	r21, r22
    6fa8:	c9 0b       	sbc	r28, r25
    6faa:	d0 09       	sbc	r29, r0
    6fac:	98 f0       	brcs	.+38     	; 0x6fd4 <__ftoa_engine+0x19a>
    6fae:	23 95       	inc	r18
    6fb0:	7e 91       	ld	r23, -X
    6fb2:	73 95       	inc	r23
    6fb4:	7a 33       	cpi	r23, 0x3A	; 58
    6fb6:	08 f0       	brcs	.+2      	; 0x6fba <__ftoa_engine+0x180>
    6fb8:	70 e3       	ldi	r23, 0x30	; 48
    6fba:	7c 93       	st	X, r23
    6fbc:	20 13       	cpse	r18, r16
    6fbe:	b8 f7       	brcc	.-18     	; 0x6fae <__ftoa_engine+0x174>
    6fc0:	7e 91       	ld	r23, -X
    6fc2:	70 61       	ori	r23, 0x10	; 16
    6fc4:	7d 93       	st	X+, r23
    6fc6:	30 f0       	brcs	.+12     	; 0x6fd4 <__ftoa_engine+0x19a>
    6fc8:	83 95       	inc	r24
    6fca:	71 e3       	ldi	r23, 0x31	; 49
    6fcc:	7d 93       	st	X+, r23
    6fce:	70 e3       	ldi	r23, 0x30	; 48
    6fd0:	2a 95       	dec	r18
    6fd2:	e1 f7       	brne	.-8      	; 0x6fcc <__ftoa_engine+0x192>
    6fd4:	11 24       	eor	r1, r1
    6fd6:	ef 90       	pop	r14
    6fd8:	ff 90       	pop	r15
    6fda:	0f 91       	pop	r16
    6fdc:	1f 91       	pop	r17
    6fde:	cf 91       	pop	r28
    6fe0:	df 91       	pop	r29
    6fe2:	99 27       	eor	r25, r25
    6fe4:	87 fd       	sbrc	r24, 7
    6fe6:	90 95       	com	r25
    6fe8:	08 95       	ret

00006fea <strnlen_P>:
    6fea:	fc 01       	movw	r30, r24
    6fec:	05 90       	lpm	r0, Z+
    6fee:	61 50       	subi	r22, 0x01	; 1
    6ff0:	70 40       	sbci	r23, 0x00	; 0
    6ff2:	01 10       	cpse	r0, r1
    6ff4:	d8 f7       	brcc	.-10     	; 0x6fec <strnlen_P+0x2>
    6ff6:	80 95       	com	r24
    6ff8:	90 95       	com	r25
    6ffa:	8e 0f       	add	r24, r30
    6ffc:	9f 1f       	adc	r25, r31
    6ffe:	08 95       	ret

00007000 <memcpy>:
    7000:	fb 01       	movw	r30, r22
    7002:	dc 01       	movw	r26, r24
    7004:	02 c0       	rjmp	.+4      	; 0x700a <memcpy+0xa>
    7006:	01 90       	ld	r0, Z+
    7008:	0d 92       	st	X+, r0
    700a:	41 50       	subi	r20, 0x01	; 1
    700c:	50 40       	sbci	r21, 0x00	; 0
    700e:	d8 f7       	brcc	.-10     	; 0x7006 <memcpy+0x6>
    7010:	08 95       	ret

00007012 <memset>:
    7012:	dc 01       	movw	r26, r24
    7014:	01 c0       	rjmp	.+2      	; 0x7018 <memset+0x6>
    7016:	6d 93       	st	X+, r22
    7018:	41 50       	subi	r20, 0x01	; 1
    701a:	50 40       	sbci	r21, 0x00	; 0
    701c:	e0 f7       	brcc	.-8      	; 0x7016 <memset+0x4>
    701e:	08 95       	ret

00007020 <strcasestr>:
    7020:	fb 01       	movw	r30, r22
    7022:	51 91       	ld	r21, Z+
    7024:	55 23       	and	r21, r21
    7026:	b1 f0       	breq	.+44     	; 0x7054 <strcasestr+0x34>
    7028:	bf 01       	movw	r22, r30
    702a:	dc 01       	movw	r26, r24
    702c:	05 2e       	mov	r0, r21
    702e:	4d 91       	ld	r20, X+
    7030:	44 23       	and	r20, r20
    7032:	69 f0       	breq	.+26     	; 0x704e <strcasestr+0x2e>
    7034:	10 d0       	rcall	.+32     	; 0x7056 <strcasestr+0x36>
    7036:	d9 f7       	brne	.-10     	; 0x702e <strcasestr+0xe>
    7038:	cd 01       	movw	r24, r26
    703a:	01 90       	ld	r0, Z+
    703c:	00 20       	and	r0, r0
    703e:	49 f0       	breq	.+18     	; 0x7052 <strcasestr+0x32>
    7040:	4d 91       	ld	r20, X+
    7042:	41 11       	cpse	r20, r1
    7044:	08 d0       	rcall	.+16     	; 0x7056 <strcasestr+0x36>
    7046:	c9 f3       	breq	.-14     	; 0x703a <strcasestr+0x1a>
    7048:	fb 01       	movw	r30, r22
    704a:	41 11       	cpse	r20, r1
    704c:	ee cf       	rjmp	.-36     	; 0x702a <strcasestr+0xa>
    704e:	81 e0       	ldi	r24, 0x01	; 1
    7050:	90 e0       	ldi	r25, 0x00	; 0
    7052:	01 97       	sbiw	r24, 0x01	; 1
    7054:	08 95       	ret
    7056:	40 25       	eor	r20, r0
    7058:	39 f0       	breq	.+14     	; 0x7068 <strcasestr+0x48>
    705a:	40 32       	cpi	r20, 0x20	; 32
    705c:	29 f4       	brne	.+10     	; 0x7068 <strcasestr+0x48>
    705e:	40 29       	or	r20, r0
    7060:	4b 57       	subi	r20, 0x7B	; 123
    7062:	46 5e       	subi	r20, 0xE6	; 230
    7064:	08 f0       	brcs	.+2      	; 0x7068 <strcasestr+0x48>
    7066:	18 94       	sez
    7068:	08 95       	ret

0000706a <strcat>:
    706a:	fb 01       	movw	r30, r22
    706c:	dc 01       	movw	r26, r24
    706e:	0d 90       	ld	r0, X+
    7070:	00 20       	and	r0, r0
    7072:	e9 f7       	brne	.-6      	; 0x706e <strcat+0x4>
    7074:	11 97       	sbiw	r26, 0x01	; 1
    7076:	01 90       	ld	r0, Z+
    7078:	0d 92       	st	X+, r0
    707a:	00 20       	and	r0, r0
    707c:	e1 f7       	brne	.-8      	; 0x7076 <strcat+0xc>
    707e:	08 95       	ret

00007080 <strcpy>:
    7080:	fb 01       	movw	r30, r22
    7082:	dc 01       	movw	r26, r24
    7084:	01 90       	ld	r0, Z+
    7086:	0d 92       	st	X+, r0
    7088:	00 20       	and	r0, r0
    708a:	e1 f7       	brne	.-8      	; 0x7084 <strcpy+0x4>
    708c:	08 95       	ret

0000708e <strncasecmp>:
    708e:	fb 01       	movw	r30, r22
    7090:	dc 01       	movw	r26, r24
    7092:	41 50       	subi	r20, 0x01	; 1
    7094:	50 40       	sbci	r21, 0x00	; 0
    7096:	88 f0       	brcs	.+34     	; 0x70ba <strncasecmp+0x2c>
    7098:	8d 91       	ld	r24, X+
    709a:	81 34       	cpi	r24, 0x41	; 65
    709c:	1c f0       	brlt	.+6      	; 0x70a4 <strncasecmp+0x16>
    709e:	8b 35       	cpi	r24, 0x5B	; 91
    70a0:	0c f4       	brge	.+2      	; 0x70a4 <strncasecmp+0x16>
    70a2:	80 5e       	subi	r24, 0xE0	; 224
    70a4:	61 91       	ld	r22, Z+
    70a6:	61 34       	cpi	r22, 0x41	; 65
    70a8:	1c f0       	brlt	.+6      	; 0x70b0 <strncasecmp+0x22>
    70aa:	6b 35       	cpi	r22, 0x5B	; 91
    70ac:	0c f4       	brge	.+2      	; 0x70b0 <strncasecmp+0x22>
    70ae:	60 5e       	subi	r22, 0xE0	; 224
    70b0:	86 1b       	sub	r24, r22
    70b2:	61 11       	cpse	r22, r1
    70b4:	71 f3       	breq	.-36     	; 0x7092 <strncasecmp+0x4>
    70b6:	99 0b       	sbc	r25, r25
    70b8:	08 95       	ret
    70ba:	88 1b       	sub	r24, r24
    70bc:	fc cf       	rjmp	.-8      	; 0x70b6 <strncasecmp+0x28>

000070be <strnlen>:
    70be:	fc 01       	movw	r30, r24
    70c0:	61 50       	subi	r22, 0x01	; 1
    70c2:	70 40       	sbci	r23, 0x00	; 0
    70c4:	01 90       	ld	r0, Z+
    70c6:	01 10       	cpse	r0, r1
    70c8:	d8 f7       	brcc	.-10     	; 0x70c0 <strnlen+0x2>
    70ca:	80 95       	com	r24
    70cc:	90 95       	com	r25
    70ce:	8e 0f       	add	r24, r30
    70d0:	9f 1f       	adc	r25, r31
    70d2:	08 95       	ret

000070d4 <fputc>:
    70d4:	0f 93       	push	r16
    70d6:	1f 93       	push	r17
    70d8:	cf 93       	push	r28
    70da:	df 93       	push	r29
    70dc:	fb 01       	movw	r30, r22
    70de:	23 81       	ldd	r18, Z+3	; 0x03
    70e0:	21 fd       	sbrc	r18, 1
    70e2:	03 c0       	rjmp	.+6      	; 0x70ea <fputc+0x16>
    70e4:	8f ef       	ldi	r24, 0xFF	; 255
    70e6:	9f ef       	ldi	r25, 0xFF	; 255
    70e8:	2c c0       	rjmp	.+88     	; 0x7142 <fputc+0x6e>
    70ea:	22 ff       	sbrs	r18, 2
    70ec:	16 c0       	rjmp	.+44     	; 0x711a <fputc+0x46>
    70ee:	46 81       	ldd	r20, Z+6	; 0x06
    70f0:	57 81       	ldd	r21, Z+7	; 0x07
    70f2:	24 81       	ldd	r18, Z+4	; 0x04
    70f4:	35 81       	ldd	r19, Z+5	; 0x05
    70f6:	42 17       	cp	r20, r18
    70f8:	53 07       	cpc	r21, r19
    70fa:	44 f4       	brge	.+16     	; 0x710c <fputc+0x38>
    70fc:	a0 81       	ld	r26, Z
    70fe:	b1 81       	ldd	r27, Z+1	; 0x01
    7100:	9d 01       	movw	r18, r26
    7102:	2f 5f       	subi	r18, 0xFF	; 255
    7104:	3f 4f       	sbci	r19, 0xFF	; 255
    7106:	31 83       	std	Z+1, r19	; 0x01
    7108:	20 83       	st	Z, r18
    710a:	8c 93       	st	X, r24
    710c:	26 81       	ldd	r18, Z+6	; 0x06
    710e:	37 81       	ldd	r19, Z+7	; 0x07
    7110:	2f 5f       	subi	r18, 0xFF	; 255
    7112:	3f 4f       	sbci	r19, 0xFF	; 255
    7114:	37 83       	std	Z+7, r19	; 0x07
    7116:	26 83       	std	Z+6, r18	; 0x06
    7118:	14 c0       	rjmp	.+40     	; 0x7142 <fputc+0x6e>
    711a:	8b 01       	movw	r16, r22
    711c:	ec 01       	movw	r28, r24
    711e:	fb 01       	movw	r30, r22
    7120:	00 84       	ldd	r0, Z+8	; 0x08
    7122:	f1 85       	ldd	r31, Z+9	; 0x09
    7124:	e0 2d       	mov	r30, r0
    7126:	19 95       	eicall
    7128:	89 2b       	or	r24, r25
    712a:	e1 f6       	brne	.-72     	; 0x70e4 <fputc+0x10>
    712c:	d8 01       	movw	r26, r16
    712e:	16 96       	adiw	r26, 0x06	; 6
    7130:	8d 91       	ld	r24, X+
    7132:	9c 91       	ld	r25, X
    7134:	17 97       	sbiw	r26, 0x07	; 7
    7136:	01 96       	adiw	r24, 0x01	; 1
    7138:	17 96       	adiw	r26, 0x07	; 7
    713a:	9c 93       	st	X, r25
    713c:	8e 93       	st	-X, r24
    713e:	16 97       	sbiw	r26, 0x06	; 6
    7140:	ce 01       	movw	r24, r28
    7142:	df 91       	pop	r29
    7144:	cf 91       	pop	r28
    7146:	1f 91       	pop	r17
    7148:	0f 91       	pop	r16
    714a:	08 95       	ret

0000714c <putchar>:
    714c:	60 91 cf 15 	lds	r22, 0x15CF	; 0x8015cf <__iob+0x2>
    7150:	70 91 d0 15 	lds	r23, 0x15D0	; 0x8015d0 <__iob+0x3>
    7154:	bf cf       	rjmp	.-130    	; 0x70d4 <fputc>

00007156 <sprintf>:
    7156:	0f 93       	push	r16
    7158:	1f 93       	push	r17
    715a:	cf 93       	push	r28
    715c:	df 93       	push	r29
    715e:	cd b7       	in	r28, 0x3d	; 61
    7160:	de b7       	in	r29, 0x3e	; 62
    7162:	2e 97       	sbiw	r28, 0x0e	; 14
    7164:	0f b6       	in	r0, 0x3f	; 63
    7166:	f8 94       	cli
    7168:	de bf       	out	0x3e, r29	; 62
    716a:	0f be       	out	0x3f, r0	; 63
    716c:	cd bf       	out	0x3d, r28	; 61
    716e:	0e 89       	ldd	r16, Y+22	; 0x16
    7170:	1f 89       	ldd	r17, Y+23	; 0x17
    7172:	86 e0       	ldi	r24, 0x06	; 6
    7174:	8c 83       	std	Y+4, r24	; 0x04
    7176:	1a 83       	std	Y+2, r17	; 0x02
    7178:	09 83       	std	Y+1, r16	; 0x01
    717a:	8f ef       	ldi	r24, 0xFF	; 255
    717c:	9f e7       	ldi	r25, 0x7F	; 127
    717e:	9e 83       	std	Y+6, r25	; 0x06
    7180:	8d 83       	std	Y+5, r24	; 0x05
    7182:	ae 01       	movw	r20, r28
    7184:	46 5e       	subi	r20, 0xE6	; 230
    7186:	5f 4f       	sbci	r21, 0xFF	; 255
    7188:	68 8d       	ldd	r22, Y+24	; 0x18
    718a:	79 8d       	ldd	r23, Y+25	; 0x19
    718c:	ce 01       	movw	r24, r28
    718e:	01 96       	adiw	r24, 0x01	; 1
    7190:	a0 d8       	rcall	.-3776   	; 0x62d2 <vfprintf>
    7192:	ef 81       	ldd	r30, Y+7	; 0x07
    7194:	f8 85       	ldd	r31, Y+8	; 0x08
    7196:	e0 0f       	add	r30, r16
    7198:	f1 1f       	adc	r31, r17
    719a:	10 82       	st	Z, r1
    719c:	2e 96       	adiw	r28, 0x0e	; 14
    719e:	0f b6       	in	r0, 0x3f	; 63
    71a0:	f8 94       	cli
    71a2:	de bf       	out	0x3e, r29	; 62
    71a4:	0f be       	out	0x3f, r0	; 63
    71a6:	cd bf       	out	0x3d, r28	; 61
    71a8:	df 91       	pop	r29
    71aa:	cf 91       	pop	r28
    71ac:	1f 91       	pop	r17
    71ae:	0f 91       	pop	r16
    71b0:	08 95       	ret

000071b2 <vprintf>:
    71b2:	ab 01       	movw	r20, r22
    71b4:	bc 01       	movw	r22, r24
    71b6:	80 91 cf 15 	lds	r24, 0x15CF	; 0x8015cf <__iob+0x2>
    71ba:	90 91 d0 15 	lds	r25, 0x15D0	; 0x8015d0 <__iob+0x3>
    71be:	89 c8       	rjmp	.-3822   	; 0x62d2 <vfprintf>

000071c0 <__ultoa_invert>:
    71c0:	fa 01       	movw	r30, r20
    71c2:	aa 27       	eor	r26, r26
    71c4:	28 30       	cpi	r18, 0x08	; 8
    71c6:	51 f1       	breq	.+84     	; 0x721c <__ultoa_invert+0x5c>
    71c8:	20 31       	cpi	r18, 0x10	; 16
    71ca:	81 f1       	breq	.+96     	; 0x722c <__ultoa_invert+0x6c>
    71cc:	e8 94       	clt
    71ce:	6f 93       	push	r22
    71d0:	6e 7f       	andi	r22, 0xFE	; 254
    71d2:	6e 5f       	subi	r22, 0xFE	; 254
    71d4:	7f 4f       	sbci	r23, 0xFF	; 255
    71d6:	8f 4f       	sbci	r24, 0xFF	; 255
    71d8:	9f 4f       	sbci	r25, 0xFF	; 255
    71da:	af 4f       	sbci	r26, 0xFF	; 255
    71dc:	b1 e0       	ldi	r27, 0x01	; 1
    71de:	3e d0       	rcall	.+124    	; 0x725c <__ultoa_invert+0x9c>
    71e0:	b4 e0       	ldi	r27, 0x04	; 4
    71e2:	3c d0       	rcall	.+120    	; 0x725c <__ultoa_invert+0x9c>
    71e4:	67 0f       	add	r22, r23
    71e6:	78 1f       	adc	r23, r24
    71e8:	89 1f       	adc	r24, r25
    71ea:	9a 1f       	adc	r25, r26
    71ec:	a1 1d       	adc	r26, r1
    71ee:	68 0f       	add	r22, r24
    71f0:	79 1f       	adc	r23, r25
    71f2:	8a 1f       	adc	r24, r26
    71f4:	91 1d       	adc	r25, r1
    71f6:	a1 1d       	adc	r26, r1
    71f8:	6a 0f       	add	r22, r26
    71fa:	71 1d       	adc	r23, r1
    71fc:	81 1d       	adc	r24, r1
    71fe:	91 1d       	adc	r25, r1
    7200:	a1 1d       	adc	r26, r1
    7202:	20 d0       	rcall	.+64     	; 0x7244 <__ultoa_invert+0x84>
    7204:	09 f4       	brne	.+2      	; 0x7208 <__ultoa_invert+0x48>
    7206:	68 94       	set
    7208:	3f 91       	pop	r19
    720a:	2a e0       	ldi	r18, 0x0A	; 10
    720c:	26 9f       	mul	r18, r22
    720e:	11 24       	eor	r1, r1
    7210:	30 19       	sub	r19, r0
    7212:	30 5d       	subi	r19, 0xD0	; 208
    7214:	31 93       	st	Z+, r19
    7216:	de f6       	brtc	.-74     	; 0x71ce <__ultoa_invert+0xe>
    7218:	cf 01       	movw	r24, r30
    721a:	08 95       	ret
    721c:	46 2f       	mov	r20, r22
    721e:	47 70       	andi	r20, 0x07	; 7
    7220:	40 5d       	subi	r20, 0xD0	; 208
    7222:	41 93       	st	Z+, r20
    7224:	b3 e0       	ldi	r27, 0x03	; 3
    7226:	0f d0       	rcall	.+30     	; 0x7246 <__ultoa_invert+0x86>
    7228:	c9 f7       	brne	.-14     	; 0x721c <__ultoa_invert+0x5c>
    722a:	f6 cf       	rjmp	.-20     	; 0x7218 <__ultoa_invert+0x58>
    722c:	46 2f       	mov	r20, r22
    722e:	4f 70       	andi	r20, 0x0F	; 15
    7230:	40 5d       	subi	r20, 0xD0	; 208
    7232:	4a 33       	cpi	r20, 0x3A	; 58
    7234:	18 f0       	brcs	.+6      	; 0x723c <__ultoa_invert+0x7c>
    7236:	49 5d       	subi	r20, 0xD9	; 217
    7238:	31 fd       	sbrc	r19, 1
    723a:	40 52       	subi	r20, 0x20	; 32
    723c:	41 93       	st	Z+, r20
    723e:	02 d0       	rcall	.+4      	; 0x7244 <__ultoa_invert+0x84>
    7240:	a9 f7       	brne	.-22     	; 0x722c <__ultoa_invert+0x6c>
    7242:	ea cf       	rjmp	.-44     	; 0x7218 <__ultoa_invert+0x58>
    7244:	b4 e0       	ldi	r27, 0x04	; 4
    7246:	a6 95       	lsr	r26
    7248:	97 95       	ror	r25
    724a:	87 95       	ror	r24
    724c:	77 95       	ror	r23
    724e:	67 95       	ror	r22
    7250:	ba 95       	dec	r27
    7252:	c9 f7       	brne	.-14     	; 0x7246 <__ultoa_invert+0x86>
    7254:	00 97       	sbiw	r24, 0x00	; 0
    7256:	61 05       	cpc	r22, r1
    7258:	71 05       	cpc	r23, r1
    725a:	08 95       	ret
    725c:	9b 01       	movw	r18, r22
    725e:	ac 01       	movw	r20, r24
    7260:	0a 2e       	mov	r0, r26
    7262:	06 94       	lsr	r0
    7264:	57 95       	ror	r21
    7266:	47 95       	ror	r20
    7268:	37 95       	ror	r19
    726a:	27 95       	ror	r18
    726c:	ba 95       	dec	r27
    726e:	c9 f7       	brne	.-14     	; 0x7262 <__ultoa_invert+0xa2>
    7270:	62 0f       	add	r22, r18
    7272:	73 1f       	adc	r23, r19
    7274:	84 1f       	adc	r24, r20
    7276:	95 1f       	adc	r25, r21
    7278:	a0 1d       	adc	r26, r0
    727a:	08 95       	ret

0000727c <_exit>:
    727c:	f8 94       	cli

0000727e <__stop_program>:
    727e:	ff cf       	rjmp	.-2      	; 0x727e <__stop_program>
