
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000506  00800200  00006090  00006124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bc2  00800706  00800706  0000662a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000662a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a08  00000000  00000000  000066c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cea7  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003254  00000000  00000000  00013f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006318  00000000  00000000  000171cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002564  00000000  00000000  0001d4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f83  00000000  00000000  0001fa48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c0d8  00000000  00000000  000239cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0002faa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__vector_25>
      68:	0c 94 c5 23 	jmp	0x478a	; 0x478a <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__vector_36>
      94:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f3 26 	jmp	0x4de6	; 0x4de6 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 9f 24 	jmp	0x493e	; 0x493e <__vector_51>
      d0:	0c 94 f1 24 	jmp	0x49e2	; 0x49e2 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 35 25 	jmp	0x4a6a	; 0x4a6a <__vector_54>
      dc:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c5 1b       	sub	r28, r21
      e6:	c5 1b       	sub	r28, r21
      e8:	c5 1b       	sub	r28, r21
      ea:	fc 1b       	sub	r31, r28
      ec:	04 1c       	adc	r0, r4
      ee:	19 1c       	adc	r1, r9
      f0:	c5 1b       	sub	r28, r21
      f2:	c5 1b       	sub	r28, r21
      f4:	fc 1b       	sub	r31, r28
      f6:	04 1c       	adc	r0, r4
      f8:	15 27       	eor	r17, r21
      fa:	85 27       	eor	r24, r21
      fc:	85 27       	eor	r24, r21
      fe:	85 27       	eor	r24, r21
     100:	85 27       	eor	r24, r21
     102:	85 27       	eor	r24, r21
     104:	85 27       	eor	r24, r21
     106:	85 27       	eor	r24, r21
     108:	15 27       	eor	r17, r21
     10a:	85 27       	eor	r24, r21
     10c:	85 27       	eor	r24, r21
     10e:	85 27       	eor	r24, r21
     110:	85 27       	eor	r24, r21
     112:	85 27       	eor	r24, r21
     114:	85 27       	eor	r24, r21
     116:	85 27       	eor	r24, r21
     118:	17 27       	eor	r17, r23
     11a:	85 27       	eor	r24, r21
     11c:	85 27       	eor	r24, r21
     11e:	85 27       	eor	r24, r21
     120:	85 27       	eor	r24, r21
     122:	85 27       	eor	r24, r21
     124:	85 27       	eor	r24, r21
     126:	85 27       	eor	r24, r21
     128:	85 27       	eor	r24, r21
     12a:	85 27       	eor	r24, r21
     12c:	85 27       	eor	r24, r21
     12e:	85 27       	eor	r24, r21
     130:	85 27       	eor	r24, r21
     132:	85 27       	eor	r24, r21
     134:	85 27       	eor	r24, r21
     136:	85 27       	eor	r24, r21
     138:	17 27       	eor	r17, r23
     13a:	85 27       	eor	r24, r21
     13c:	85 27       	eor	r24, r21
     13e:	85 27       	eor	r24, r21
     140:	85 27       	eor	r24, r21
     142:	85 27       	eor	r24, r21
     144:	85 27       	eor	r24, r21
     146:	85 27       	eor	r24, r21
     148:	85 27       	eor	r24, r21
     14a:	85 27       	eor	r24, r21
     14c:	85 27       	eor	r24, r21
     14e:	85 27       	eor	r24, r21
     150:	85 27       	eor	r24, r21
     152:	85 27       	eor	r24, r21
     154:	85 27       	eor	r24, r21
     156:	85 27       	eor	r24, r21
     158:	81 27       	eor	r24, r17
     15a:	85 27       	eor	r24, r21
     15c:	85 27       	eor	r24, r21
     15e:	85 27       	eor	r24, r21
     160:	85 27       	eor	r24, r21
     162:	85 27       	eor	r24, r21
     164:	85 27       	eor	r24, r21
     166:	85 27       	eor	r24, r21
     168:	4c 27       	eor	r20, r28
     16a:	85 27       	eor	r24, r21
     16c:	85 27       	eor	r24, r21
     16e:	85 27       	eor	r24, r21
     170:	85 27       	eor	r24, r21
     172:	85 27       	eor	r24, r21
     174:	85 27       	eor	r24, r21
     176:	85 27       	eor	r24, r21
     178:	85 27       	eor	r24, r21
     17a:	85 27       	eor	r24, r21
     17c:	85 27       	eor	r24, r21
     17e:	85 27       	eor	r24, r21
     180:	85 27       	eor	r24, r21
     182:	85 27       	eor	r24, r21
     184:	85 27       	eor	r24, r21
     186:	85 27       	eor	r24, r21
     188:	40 27       	eor	r20, r16
     18a:	85 27       	eor	r24, r21
     18c:	85 27       	eor	r24, r21
     18e:	85 27       	eor	r24, r21
     190:	85 27       	eor	r24, r21
     192:	85 27       	eor	r24, r21
     194:	85 27       	eor	r24, r21
     196:	85 27       	eor	r24, r21
     198:	64 27       	eor	r22, r20

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <prvCheckTasksWaitingTermination>
     2a0:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	7d d6       	rcall	.+3322   	; 0xfa4 <vPortYield>
     2aa:	0e 94 42 1c 	call	0x3884	; 0x3884 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 42 19 	call	0x3284	; 0x3284 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 37 1b 	call	0x366e	; 0x366e <prvProcessTimerOrBlockTask>
     2c8:	0e 94 8e 1b 	call	0x371c	; 0x371c <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	17 e0       	ldi	r17, 0x07	; 7
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e0 e9       	ldi	r30, 0x90	; 144
     2e6:	f0 e6       	ldi	r31, 0x60	; 96
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a6 30       	cpi	r26, 0x06	; 6
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	22 e1       	ldi	r18, 0x12	; 18
     2fa:	a6 e0       	ldi	r26, 0x06	; 6
     2fc:	b7 e0       	ldi	r27, 0x07	; 7
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a8 3c       	cpi	r26, 0xC8	; 200
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 bd 1c 	call	0x397a	; 0x397a <main>
     30c:	0c 94 46 30 	jmp	0x608c	; 0x608c <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <CO2_callback>:
	uint16_t CO2;
	} CO2Handler;
	
	
void CO2_callback(uint16_t callback){
	ppm = callback;
     312:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <ppm+0x1>
     316:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <ppm>
     31a:	08 95       	ret

0000031c <startReadingCO2>:

uint16_t getCO2(CO2_t self){
	return self->CO2;
}

void startReadingCO2(void* self) {
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <startReadingCO2+0x6>
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskGetTickCount>
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     336:	40 ee       	ldi	r20, 0xE0	; 224
     338:	53 e0       	ldi	r21, 0x03	; 3
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 84 12 	call	0x2508	; 0x2508 <xTaskDelayUntil>
		//need to set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     346:	40 91 ae 12 	lds	r20, 0x12AE	; 0x8012ae <ready_bit>
     34a:	50 91 af 12 	lds	r21, 0x12AF	; 0x8012af <ready_bit+0x1>
     34e:	60 91 b0 12 	lds	r22, 0x12B0	; 0x8012b0 <ready_bit+0x2>
     352:	70 91 b1 12 	lds	r23, 0x12B1	; 0x8012b1 <ready_bit+0x3>
     356:	cc 24       	eor	r12, r12
     358:	ca 94       	dec	r12
     35a:	dc 2c       	mov	r13, r12
     35c:	76 01       	movw	r14, r12
     35e:	01 e0       	ldi	r16, 0x01	; 1
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <group_start>
     366:	90 91 b3 12 	lds	r25, 0x12B3	; 0x8012b3 <group_start+0x1>
     36a:	c7 d2       	rcall	.+1422   	; 0x8fa <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		rc = mh_z19_takeMeassuring();
     36c:	0e 94 ff 21 	call	0x43fe	; 0x43fe <mh_z19_takeMeassuring>
     370:	80 93 ab 12 	sts	0x12AB, r24	; 0x8012ab <rc>
		if (rc != MHZ19_OK)
     374:	81 11       	cpse	r24, r1
     376:	df cf       	rjmp	.-66     	; 0x336 <startReadingCO2+0x1a>
		{
			// Something went wrong
		} else {
			((CO2_t)self)->CO2 = ppm;
     378:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <ppm>
     37c:	90 91 ad 12 	lds	r25, 0x12AD	; 0x8012ad <ppm+0x1>
     380:	f5 01       	movw	r30, r10
     382:	91 83       	std	Z+1, r25	; 0x01
     384:	80 83       	st	Z, r24
			printf("CO2 %d", ppm);
     386:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <ppm+0x1>
     38a:	8f 93       	push	r24
     38c:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <ppm>
     390:	8f 93       	push	r24
     392:	8f e6       	ldi	r24, 0x6F	; 111
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	9f 93       	push	r25
     398:	8f 93       	push	r24
     39a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	c7 cf       	rjmp	.-114    	; 0x336 <startReadingCO2+0x1a>

000003a8 <getCO2>:
	return new_measure;
}

uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	08 95       	ret

000003b0 <CO2_handler_init>:
		}
		
	}
}

void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	08 2f       	mov	r16, r24
     3bc:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     3be:	40 91 ae 12 	lds	r20, 0x12AE	; 0x8012ae <ready_bit>
     3c2:	50 91 af 12 	lds	r21, 0x12AF	; 0x8012af <ready_bit+0x1>
     3c6:	60 91 b0 12 	lds	r22, 0x12B0	; 0x8012b0 <ready_bit+0x2>
     3ca:	70 91 b1 12 	lds	r23, 0x12B1	; 0x8012b1 <ready_bit+0x3>
     3ce:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <group_start>
     3d2:	90 91 b3 12 	lds	r25, 0x12B3	; 0x8012b3 <group_start+0x1>
     3d6:	31 d3       	rcall	.+1634   	; 0xa3a <xEventGroupSetBits>

	xTaskCreate(
     3d8:	e1 2c       	mov	r14, r1
     3da:	f1 2c       	mov	r15, r1
     3dc:	9e 01       	movw	r18, r28
     3de:	44 e2       	ldi	r20, 0x24	; 36
     3e0:	51 e0       	ldi	r21, 0x01	; 1
     3e2:	66 e7       	ldi	r22, 0x76	; 118
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	8e e8       	ldi	r24, 0x8E	; 142
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
	puts("CO2 initialized");
     3ee:	8e e7       	ldi	r24, 0x7E	; 126
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <puts>
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	08 95       	ret

00000402 <createCO2>:
void CO2_callback(uint16_t callback){
	ppm = callback;
}

CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	8c 01       	movw	r16, r24
     418:	5b 01       	movw	r10, r22
     41a:	69 01       	movw	r12, r18
     41c:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 c8 2c 	call	0x5990	; 0x5990 <malloc>
     426:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     428:	89 2b       	or	r24, r25
     42a:	d9 f0       	breq	.+54     	; 0x462 <createCO2+0x60>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	18 82       	st	Y, r1
	
	group_start = taskBits;
     430:	b0 92 b3 12 	sts	0x12B3, r11	; 0x8012b3 <group_start+0x1>
     434:	a0 92 b2 12 	sts	0x12B2, r10	; 0x8012b2 <group_start>
	ready_bit = bit;
     438:	c0 92 ae 12 	sts	0x12AE, r12	; 0x8012ae <ready_bit>
     43c:	d0 92 af 12 	sts	0x12AF, r13	; 0x8012af <ready_bit+0x1>
     440:	e0 92 b0 12 	sts	0x12B0, r14	; 0x8012b0 <ready_bit+0x2>
     444:	f0 92 b1 12 	sts	0x12B1, r15	; 0x8012b1 <ready_bit+0x3>
	
	//maybe wait time here?
	mh_z19_initialise(ser_USART3);
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <mh_z19_initialise>
	
	mh_z19_injectCallBack(CO2_callback);
     44e:	89 e8       	ldi	r24, 0x89	; 137
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     456:	be 01       	movw	r22, r28
     458:	c8 01       	movw	r24, r16
     45a:	aa df       	rcall	.-172    	; 0x3b0 <CO2_handler_init>
	return new_measure;
     45c:	8c 2f       	mov	r24, r28
     45e:	9d 2f       	mov	r25, r29
     460:	02 c0       	rjmp	.+4      	; 0x466 <createCO2+0x64>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
	
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	08 95       	ret

0000047c <measureTempAndHum>:
		
		measureTempAndHum((Temperature_t) self);
	}
}

void measureTempAndHum(Temperature_t self){
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     482:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <hih8120_getTemperature>
     486:	68 83       	st	Y, r22
     488:	79 83       	std	Y+1, r23	; 0x01
     48a:	8a 83       	std	Y+2, r24	; 0x02
     48c:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10();
     48e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <hih8120_getHumidityPercent_x10>
     492:	9d 83       	std	Y+5, r25	; 0x05
     494:	8c 83       	std	Y+4, r24	; 0x04
	//printf("%f \n", self->temperature);
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <startReading>:
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}

void startReading(void* self){
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <startReading+0x6>
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     4aa:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskGetTickCount>
     4ae:	69 83       	std	Y+1, r22	; 0x01
     4b0:	7a 83       	std	Y+2, r23	; 0x02
     4b2:	8b 83       	std	Y+3, r24	; 0x03
     4b4:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     4b6:	42 ea       	ldi	r20, 0xA2	; 162
     4b8:	53 e0       	ldi	r21, 0x03	; 3
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	ce 01       	movw	r24, r28
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	0e 94 84 12 	call	0x2508	; 0x2508 <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     4c6:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <hih8120_wakeup>
     4ca:	88 23       	and	r24, r24
     4cc:	21 f0       	breq	.+8      	; 0x4d6 <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     4ce:	8e e8       	ldi	r24, 0x8E	; 142
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     4d6:	40 91 ae 12 	lds	r20, 0x12AE	; 0x8012ae <ready_bit>
     4da:	50 91 af 12 	lds	r21, 0x12AF	; 0x8012af <ready_bit+0x1>
     4de:	60 91 b0 12 	lds	r22, 0x12B0	; 0x8012b0 <ready_bit+0x2>
     4e2:	70 91 b1 12 	lds	r23, 0x12B1	; 0x8012b1 <ready_bit+0x3>
     4e6:	cc 24       	eor	r12, r12
     4e8:	ca 94       	dec	r12
     4ea:	dc 2c       	mov	r13, r12
     4ec:	76 01       	movw	r14, r12
     4ee:	01 e0       	ldi	r16, 0x01	; 1
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <group_start>
     4f6:	90 91 b3 12 	lds	r25, 0x12B3	; 0x8012b3 <group_start+0x1>
     4fa:	ff d1       	rcall	.+1022   	; 0x8fa <xEventGroupWaitBits>
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     508:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	cb 01       	movw	r24, r22
     512:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vTaskDelay>
		
		measureTempAndHum((Temperature_t) self);
     516:	c5 01       	movw	r24, r10
     518:	b1 df       	rcall	.-158    	; 0x47c <measureTempAndHum>
	}
     51a:	cd cf       	rjmp	.-102    	; 0x4b6 <startReading+0x1a>

0000051c <temperature_handler_init>:
	self->temperature = hih8120_getTemperature();
	self->humidity = hih8120_getHumidityPercent_x10();
	//printf("%f \n", self->temperature);
}

void temperature_handler_init(Temperature_t self, uint16_t priority){
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     52a:	40 91 ae 12 	lds	r20, 0x12AE	; 0x8012ae <ready_bit>
     52e:	50 91 af 12 	lds	r21, 0x12AF	; 0x8012af <ready_bit+0x1>
     532:	60 91 b0 12 	lds	r22, 0x12B0	; 0x8012b0 <ready_bit+0x2>
     536:	70 91 b1 12 	lds	r23, 0x12B1	; 0x8012b1 <ready_bit+0x3>
     53a:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <group_start>
     53e:	90 91 b3 12 	lds	r25, 0x12B3	; 0x8012b3 <group_start+0x1>
     542:	7b d2       	rcall	.+1270   	; 0xa3a <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     544:	e1 2c       	mov	r14, r1
     546:	f1 2c       	mov	r15, r1
     548:	9e 01       	movw	r18, r28
     54a:	40 ec       	ldi	r20, 0xC0	; 192
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	68 ea       	ldi	r22, 0xA8	; 168
     550:	72 e0       	ldi	r23, 0x02	; 2
     552:	8e e4       	ldi	r24, 0x4E	; 78
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <xTaskCreate>
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	08 95       	ret

00000566 <createTemp>:
	float temperature;
	uint16_t humidity;
	} TemperatureHandler;
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	8c 01       	movw	r16, r24
     57c:	5b 01       	movw	r10, r22
     57e:	69 01       	movw	r12, r18
     580:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     582:	86 e0       	ldi	r24, 0x06	; 6
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 c8 2c 	call	0x5990	; 0x5990 <malloc>
     58a:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     58c:	89 2b       	or	r24, r25
     58e:	01 f1       	breq	.+64     	; 0x5d0 <createTemp+0x6a>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     590:	18 82       	st	Y, r1
     592:	19 82       	std	Y+1, r1	; 0x01
     594:	1a 82       	std	Y+2, r1	; 0x02
     596:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     598:	1d 82       	std	Y+5, r1	; 0x05
     59a:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     59c:	b0 92 b3 12 	sts	0x12B3, r11	; 0x8012b3 <group_start+0x1>
     5a0:	a0 92 b2 12 	sts	0x12B2, r10	; 0x8012b2 <group_start>
	ready_bit = bit;
     5a4:	c0 92 ae 12 	sts	0x12AE, r12	; 0x8012ae <ready_bit>
     5a8:	d0 92 af 12 	sts	0x12AF, r13	; 0x8012af <ready_bit+0x1>
     5ac:	e0 92 b0 12 	sts	0x12B0, r14	; 0x8012b0 <ready_bit+0x2>
     5b0:	f0 92 b1 12 	sts	0x12B1, r15	; 0x8012b1 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     5b4:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <hih8120_initialise>
     5b8:	81 11       	cpse	r24, r1
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <createTemp+0x5e>
	{
		puts("Temp sensor initialized.");
     5bc:	89 eb       	ldi	r24, 0xB9	; 185
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     5c4:	b8 01       	movw	r22, r16
     5c6:	ce 01       	movw	r24, r28
     5c8:	a9 df       	rcall	.-174    	; 0x51c <temperature_handler_init>
	return new_measure;
     5ca:	8c 2f       	mov	r24, r28
     5cc:	9d 2f       	mov	r25, r29
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <createTemp+0x6e>
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	08 95       	ret

000005ea <getTemperature>:
	xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
}

float getTemperature(Temperature_t self){
	return self->temperature;
     5ea:	fc 01       	movw	r30, r24
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
}
     5f4:	08 95       	ret

000005f6 <getHumidity>:

uint16_t getHumidity(Temperature_t self)
{
	return self -> humidity;
}
     5f6:	fc 01       	movw	r30, r24
     5f8:	84 81       	ldd	r24, Z+4	; 0x04
     5fa:	95 81       	ldd	r25, Z+5	; 0x05
     5fc:	08 95       	ret

000005fe <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	64 97       	sbiw	r28, 0x14	; 20
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	//status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     616:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <lora_driver_rn2483FactoryReset>
     61a:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	82 ed       	ldi	r24, 0xD2	; 210
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     62e:	0e 94 6f 20 	call	0x40de	; 0x40de <lora_driver_configureToEu868>
     632:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	85 ee       	ldi	r24, 0xE5	; 229
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     646:	8e 01       	movw	r16, r28
     648:	0f 5f       	subi	r16, 0xFF	; 255
     64a:	1f 4f       	sbci	r17, 0xFF	; 255
     64c:	c8 01       	movw	r24, r16
     64e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     652:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     656:	1f 93       	push	r17
     658:	0f 93       	push	r16
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	8e ef       	ldi	r24, 0xFE	; 254
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     66a:	c8 01       	movw	r24, r16
     66c:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <lora_driver_setDeviceIdentifier>
     670:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	1f 93       	push	r17
     67a:	0f 93       	push	r16
     67c:	82 e1       	ldi	r24, 0x12	; 18
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     688:	a8 01       	movw	r20, r16
     68a:	67 e2       	ldi	r22, 0x27	; 39
     68c:	73 e0       	ldi	r23, 0x03	; 3
     68e:	88 e4       	ldi	r24, 0x48	; 72
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	0e 94 4d 21 	call	0x429a	; 0x429a <lora_driver_setOtaaIdentity>
     696:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	1f 93       	push	r17
     6a0:	0f 93       	push	r16
     6a2:	87 e2       	ldi	r24, 0x27	; 39
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	88 e4       	ldi	r24, 0x48	; 72
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	89 e5       	ldi	r24, 0x59	; 89
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     6be:	0e 94 1d 20 	call	0x403a	; 0x403a <lora_driver_saveMac>
     6c2:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	8f e8       	ldi	r24, 0x8F	; 143
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	0e 94 4c 20 	call	0x4098	; 0x4098 <lora_driver_setAdaptiveDataRate>
     6e6:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	8e e9       	ldi	r24, 0x9E	; 158
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     6fa:	84 ef       	ldi	r24, 0xF4	; 244
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 57 20 	call	0x40ae	; 0x40ae <lora_driver_setReceiveDelay>
     702:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     706:	9f 93       	push	r25
     708:	8f 93       	push	r24
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	8f 93       	push	r24
     70e:	84 ef       	ldi	r24, 0xF4	; 244
     710:	8f 93       	push	r24
     712:	8f eb       	ldi	r24, 0xBF	; 191
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     728:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 23 20 	call	0x4046	; 0x4046 <lora_driver_join>
     730:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     732:	0e 94 6e 21 	call	0x42dc	; 0x42dc <lora_driver_mapReturnCodeToText>
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	1f 92       	push	r1
     73c:	1f 93       	push	r17
     73e:	8f ed       	ldi	r24, 0xDF	; 223
     740:	93 e0       	ldi	r25, 0x03	; 3
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>

		if ( rc != LORA_ACCEPTED)
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	08 30       	cpi	r16, 0x08	; 8
     758:	41 f0       	breq	.+16     	; 0x76a <_lora_setup+0x16c>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     75a:	66 e3       	ldi	r22, 0x36	; 54
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     766:	11 50       	subi	r17, 0x01	; 1
     768:	01 f7       	brne	.-64     	; 0x72a <_lora_setup+0x12c>

	if (rc == LORA_ACCEPTED)
     76a:	08 30       	cpi	r16, 0x08	; 8
     76c:	11 f0       	breq	.+4      	; 0x772 <_lora_setup+0x174>
		//status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     76e:	1a d4       	rcall	.+2100   	; 0xfa4 <vPortYield>
     770:	fe cf       	rjmp	.-4      	; 0x76e <_lora_setup+0x170>
		}
	}
}
     772:	64 96       	adiw	r28, 0x14	; 20
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <lora_handler_task>:

void lora_handler_task(void* pvParameters){
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	28 97       	sbiw	r28, 0x08	; 8
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <lora_driver_resetRn2483>
	vTaskDelay(2);
     7a2:	62 e0       	ldi	r22, 0x02	; 2
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vTaskDelay>
	lora_driver_resetRn2483(0);
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     7b4:	66 e9       	ldi	r22, 0x96	; 150
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     7c0:	0e 94 67 1f 	call	0x3ece	; 0x3ece <lora_driver_flushBuffers>

	_lora_setup();
     7c4:	1c df       	rcall	.-456    	; 0x5fe <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     7c6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskGetTickCount>
     7ca:	69 83       	std	Y+1, r22	; 0x01
     7cc:	7a 83       	std	Y+2, r23	; 0x02
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     7d2:	4c e6       	ldi	r20, 0x6C	; 108
     7d4:	52 e0       	ldi	r21, 0x02	; 2
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	ce 01       	movw	r24, r28
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	0e 94 84 12 	call	0x2508	; 0x2508 <xTaskDelayUntil>
		_uplink_payload.portNo = 1;
		
		lora_driver_payload_t downlinkPayload;
		
		//temperature
		double temp =(double) getTemperature(temperatureAndHumidity);
     7e2:	80 91 b6 12 	lds	r24, 0x12B6	; 0x8012b6 <temperatureAndHumidity>
     7e6:	90 91 b7 12 	lds	r25, 0x12B7	; 0x8012b7 <temperatureAndHumidity+0x1>
     7ea:	ff de       	rcall	.-514    	; 0x5ea <getTemperature>
     7ec:	16 2f       	mov	r17, r22
     7ee:	07 2f       	mov	r16, r23
     7f0:	f8 2e       	mov	r15, r24
     7f2:	e9 2e       	mov	r14, r25
		double val1=0;
     7f4:	1d 82       	std	Y+5, r1	; 0x05
     7f6:	1e 82       	std	Y+6, r1	; 0x06
     7f8:	1f 82       	std	Y+7, r1	; 0x07
     7fa:	18 86       	std	Y+8, r1	; 0x08
		double val2=0;
		val2 = modf(temp, &val1);
     7fc:	ae 01       	movw	r20, r28
     7fe:	4b 5f       	subi	r20, 0xFB	; 251
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	0e 94 c1 1c 	call	0x3982	; 0x3982 <modf>
		val2 = val2 * 100;
		printf("\ntemp: %f", temp);
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>
		_uplink_payload.bytes[0] = (int) val1;
		_uplink_payload.bytes[1] = (int) val2;	
		
		//humidity
		uint16_t humidity = getHumidity(temperatureAndHumidity);
     81a:	80 91 b6 12 	lds	r24, 0x12B6	; 0x8012b6 <temperatureAndHumidity>
     81e:	90 91 b7 12 	lds	r25, 0x12B7	; 0x8012b7 <temperatureAndHumidity+0x1>
     822:	e9 de       	rcall	.-558    	; 0x5f6 <getHumidity>
		printf("\nhumidity: %d", humidity);
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	89 e0       	ldi	r24, 0x09	; 9
     82a:	94 e0       	ldi	r25, 0x04	; 4
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>
		_uplink_payload.bytes[2] = humidity;
		
		//co2
		uint16_t co2_val = getCO2(co2);
     834:	80 91 b4 12 	lds	r24, 0x12B4	; 0x8012b4 <co2>
     838:	90 91 b5 12 	lds	r25, 0x12B5	; 0x8012b5 <co2+0x1>
     83c:	b5 dd       	rcall	.-1174   	; 0x3a8 <getCO2>
		printf("\nco2: %d", co2_val);
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	87 e1       	ldi	r24, 0x17	; 23
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <printf>
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	bc cf       	rjmp	.-136    	; 0x7d2 <lora_handler_task+0x4a>

0000085a <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;


void lora_handler_task(void* pvParameters);

void lora_handler_initialize(uint16_t lora_handler_task_priority, Temperature_t temperatureObject, CO2_t co2Object){
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
	
	temperatureAndHumidity = temperatureObject;
     860:	70 93 b7 12 	sts	0x12B7, r23	; 0x8012b7 <temperatureAndHumidity+0x1>
     864:	60 93 b6 12 	sts	0x12B6, r22	; 0x8012b6 <temperatureAndHumidity>
	co2 = co2Object;
     868:	50 93 b5 12 	sts	0x12B5, r21	; 0x8012b5 <co2+0x1>
     86c:	40 93 b4 12 	sts	0x12B4, r20	; 0x8012b4 <co2>

	xTaskCreate(
     870:	e1 2c       	mov	r14, r1
     872:	f1 2c       	mov	r15, r1
     874:	08 2f       	mov	r16, r24
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	48 e8       	ldi	r20, 0x88	; 136
     87c:	51 e0       	ldi	r21, 0x01	; 1
     87e:	60 e2       	ldi	r22, 0x20	; 32
     880:	74 e0       	ldi	r23, 0x04	; 4
     882:	84 ec       	ldi	r24, 0xC4	; 196
     884:	93 e0       	ldi	r25, 0x03	; 3
     886:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	08 95       	ret

00000892 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     892:	0f 93       	push	r16
     894:	01 11       	cpse	r16, r1
     896:	0c c0       	rjmp	.+24     	; 0x8b0 <prvTestWaitCondition+0x1e>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	82 23       	and	r24, r18
     89e:	93 23       	and	r25, r19
     8a0:	a4 23       	and	r26, r20
     8a2:	b5 23       	and	r27, r21
     8a4:	89 2b       	or	r24, r25
     8a6:	8a 2b       	or	r24, r26
     8a8:	8b 2b       	or	r24, r27
     8aa:	79 f4       	brne	.+30     	; 0x8ca <prvTestWaitCondition+0x38>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <prvTestWaitCondition+0x3e>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	82 23       	and	r24, r18
     8b6:	93 23       	and	r25, r19
     8b8:	a4 23       	and	r26, r20
     8ba:	b5 23       	and	r27, r21
     8bc:	28 17       	cp	r18, r24
     8be:	39 07       	cpc	r19, r25
     8c0:	4a 07       	cpc	r20, r26
     8c2:	5b 07       	cpc	r21, r27
     8c4:	21 f0       	breq	.+8      	; 0x8ce <prvTestWaitCondition+0x3c>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <prvTestWaitCondition+0x3e>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <prvTestWaitCondition+0x3e>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0f 91       	pop	r16
     8d2:	08 95       	ret

000008d4 <xEventGroupCreate>:
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	8f e0       	ldi	r24, 0x0F	; 15
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	af d1       	rcall	.+862    	; 0xc3c <pvPortMalloc>
     8de:	ec 01       	movw	r28, r24
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	39 f0       	breq	.+14     	; 0x8f2 <xEventGroupCreate+0x1e>
     8e4:	fc 01       	movw	r30, r24
     8e6:	11 92       	st	Z+, r1
     8e8:	11 92       	st	Z+, r1
     8ea:	11 92       	st	Z+, r1
     8ec:	11 92       	st	Z+, r1
     8ee:	cf 01       	movw	r24, r30
     8f0:	8b d2       	rcall	.+1302   	; 0xe08 <vListInitialise>
     8f2:	ce 01       	movw	r24, r28
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <xEventGroupWaitBits>:
     8fa:	2f 92       	push	r2
     8fc:	3f 92       	push	r3
     8fe:	4f 92       	push	r4
     900:	5f 92       	push	r5
     902:	6f 92       	push	r6
     904:	7f 92       	push	r7
     906:	8f 92       	push	r8
     908:	9f 92       	push	r9
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
     920:	4a 01       	movw	r8, r20
     922:	5b 01       	movw	r10, r22
     924:	62 2e       	mov	r6, r18
     926:	70 2e       	mov	r7, r16
     928:	0e 94 68 10 	call	0x20d0	; 0x20d0 <vTaskSuspendAll>
     92c:	28 80       	ld	r2, Y
     92e:	39 80       	ldd	r3, Y+1	; 0x01
     930:	4a 80       	ldd	r4, Y+2	; 0x02
     932:	5b 80       	ldd	r5, Y+3	; 0x03
     934:	a5 01       	movw	r20, r10
     936:	94 01       	movw	r18, r8
     938:	c2 01       	movw	r24, r4
     93a:	b1 01       	movw	r22, r2
     93c:	aa df       	rcall	.-172    	; 0x892 <prvTestWaitCondition>
     93e:	88 23       	and	r24, r24
     940:	a1 f0       	breq	.+40     	; 0x96a <xEventGroupWaitBits+0x70>
     942:	66 20       	and	r6, r6
     944:	89 f1       	breq	.+98     	; 0x9a8 <xEventGroupWaitBits+0xae>
     946:	d5 01       	movw	r26, r10
     948:	c4 01       	movw	r24, r8
     94a:	80 95       	com	r24
     94c:	90 95       	com	r25
     94e:	a0 95       	com	r26
     950:	b0 95       	com	r27
     952:	82 21       	and	r24, r2
     954:	93 21       	and	r25, r3
     956:	a4 21       	and	r26, r4
     958:	b5 21       	and	r27, r5
     95a:	88 83       	st	Y, r24
     95c:	99 83       	std	Y+1, r25	; 0x01
     95e:	aa 83       	std	Y+2, r26	; 0x02
     960:	bb 83       	std	Y+3, r27	; 0x03
     962:	c1 2c       	mov	r12, r1
     964:	d1 2c       	mov	r13, r1
     966:	76 01       	movw	r14, r12
     968:	22 c0       	rjmp	.+68     	; 0x9ae <xEventGroupWaitBits+0xb4>
     96a:	c1 14       	cp	r12, r1
     96c:	d1 04       	cpc	r13, r1
     96e:	e1 04       	cpc	r14, r1
     970:	f1 04       	cpc	r15, r1
     972:	e9 f0       	breq	.+58     	; 0x9ae <xEventGroupWaitBits+0xb4>
     974:	61 10       	cpse	r6, r1
     976:	04 c0       	rjmp	.+8      	; 0x980 <xEventGroupWaitBits+0x86>
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	ba 01       	movw	r22, r20
     97e:	04 c0       	rjmp	.+8      	; 0x988 <xEventGroupWaitBits+0x8e>
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	71 e0       	ldi	r23, 0x01	; 1
     988:	71 10       	cpse	r7, r1
     98a:	74 60       	ori	r23, 0x04	; 4
     98c:	48 29       	or	r20, r8
     98e:	59 29       	or	r21, r9
     990:	6a 29       	or	r22, r10
     992:	7b 29       	or	r23, r11
     994:	97 01       	movw	r18, r14
     996:	86 01       	movw	r16, r12
     998:	ce 01       	movw	r24, r28
     99a:	04 96       	adiw	r24, 0x04	; 4
     99c:	0e 94 80 13 	call	0x2700	; 0x2700 <vTaskPlaceOnUnorderedEventList>
     9a0:	21 2c       	mov	r2, r1
     9a2:	31 2c       	mov	r3, r1
     9a4:	21 01       	movw	r4, r2
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <xEventGroupWaitBits+0xb4>
     9a8:	c1 2c       	mov	r12, r1
     9aa:	d1 2c       	mov	r13, r1
     9ac:	76 01       	movw	r14, r12
     9ae:	0e 94 a8 11 	call	0x2350	; 0x2350 <xTaskResumeAll>
     9b2:	cd 28       	or	r12, r13
     9b4:	ce 28       	or	r12, r14
     9b6:	cf 28       	or	r12, r15
     9b8:	59 f1       	breq	.+86     	; 0xa10 <xEventGroupWaitBits+0x116>
     9ba:	81 11       	cpse	r24, r1
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <xEventGroupWaitBits+0xc6>
     9be:	f2 d2       	rcall	.+1508   	; 0xfa4 <vPortYield>
     9c0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <uxTaskResetEventItemValue>
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
     9c8:	91 fd       	sbrc	r25, 1
     9ca:	1f c0       	rjmp	.+62     	; 0xa0a <xEventGroupWaitBits+0x110>
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	0f 92       	push	r0
     9d2:	c8 80       	ld	r12, Y
     9d4:	d9 80       	ldd	r13, Y+1	; 0x01
     9d6:	ea 80       	ldd	r14, Y+2	; 0x02
     9d8:	fb 80       	ldd	r15, Y+3	; 0x03
     9da:	07 2d       	mov	r16, r7
     9dc:	a5 01       	movw	r20, r10
     9de:	94 01       	movw	r18, r8
     9e0:	c7 01       	movw	r24, r14
     9e2:	b6 01       	movw	r22, r12
     9e4:	56 df       	rcall	.-340    	; 0x892 <prvTestWaitCondition>
     9e6:	88 23       	and	r24, r24
     9e8:	71 f0       	breq	.+28     	; 0xa06 <xEventGroupWaitBits+0x10c>
     9ea:	66 20       	and	r6, r6
     9ec:	61 f0       	breq	.+24     	; 0xa06 <xEventGroupWaitBits+0x10c>
     9ee:	80 94       	com	r8
     9f0:	90 94       	com	r9
     9f2:	a0 94       	com	r10
     9f4:	b0 94       	com	r11
     9f6:	8c 20       	and	r8, r12
     9f8:	9d 20       	and	r9, r13
     9fa:	ae 20       	and	r10, r14
     9fc:	bf 20       	and	r11, r15
     9fe:	88 82       	st	Y, r8
     a00:	99 82       	std	Y+1, r9	; 0x01
     a02:	aa 82       	std	Y+2, r10	; 0x02
     a04:	bb 82       	std	Y+3, r11	; 0x03
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	16 01       	movw	r2, r12
     a0c:	27 01       	movw	r4, r14
     a0e:	55 24       	eor	r5, r5
     a10:	c2 01       	movw	r24, r4
     a12:	b1 01       	movw	r22, r2
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	3f 90       	pop	r3
     a36:	2f 90       	pop	r2
     a38:	08 95       	ret

00000a3a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     a3a:	4f 92       	push	r4
     a3c:	5f 92       	push	r5
     a3e:	6f 92       	push	r6
     a40:	7f 92       	push	r7
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	ec 01       	movw	r28, r24
     a58:	6a 01       	movw	r12, r20
     a5a:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a5c:	8c 01       	movw	r16, r24
     a5e:	09 5f       	subi	r16, 0xF9	; 249
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     a62:	0e 94 68 10 	call	0x20d0	; 0x20d0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     a66:	eb 85       	ldd	r30, Y+11	; 0x0b
     a68:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     a6a:	88 81       	ld	r24, Y
     a6c:	99 81       	ldd	r25, Y+1	; 0x01
     a6e:	aa 81       	ldd	r26, Y+2	; 0x02
     a70:	bb 81       	ldd	r27, Y+3	; 0x03
     a72:	c8 2a       	or	r12, r24
     a74:	d9 2a       	or	r13, r25
     a76:	ea 2a       	or	r14, r26
     a78:	fb 2a       	or	r15, r27
     a7a:	c8 82       	st	Y, r12
     a7c:	d9 82       	std	Y+1, r13	; 0x01
     a7e:	ea 82       	std	Y+2, r14	; 0x02
     a80:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     a82:	c1 2c       	mov	r12, r1
     a84:	d1 2c       	mov	r13, r1
     a86:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     a88:	3d c0       	rjmp	.+122    	; 0xb04 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     a8a:	a4 80       	ldd	r10, Z+4	; 0x04
     a8c:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	a2 81       	ldd	r26, Z+2	; 0x02
     a94:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     a96:	ac 01       	movw	r20, r24
     a98:	bd 01       	movw	r22, r26
     a9a:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     a9c:	b2 fd       	sbrc	r27, 2
     a9e:	0e c0       	rjmp	.+28     	; 0xabc <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     aa0:	48 80       	ld	r4, Y
     aa2:	59 80       	ldd	r5, Y+1	; 0x01
     aa4:	6a 80       	ldd	r6, Y+2	; 0x02
     aa6:	7b 80       	ldd	r7, Y+3	; 0x03
     aa8:	44 22       	and	r4, r20
     aaa:	55 22       	and	r5, r21
     aac:	66 22       	and	r6, r22
     aae:	77 22       	and	r7, r23
     ab0:	45 28       	or	r4, r5
     ab2:	46 28       	or	r4, r6
     ab4:	47 28       	or	r4, r7
     ab6:	89 f4       	brne	.+34     	; 0xada <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	12 c0       	rjmp	.+36     	; 0xae0 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     abc:	48 80       	ld	r4, Y
     abe:	59 80       	ldd	r5, Y+1	; 0x01
     ac0:	6a 80       	ldd	r6, Y+2	; 0x02
     ac2:	7b 80       	ldd	r7, Y+3	; 0x03
     ac4:	44 22       	and	r4, r20
     ac6:	55 22       	and	r5, r21
     ac8:	66 22       	and	r6, r22
     aca:	77 22       	and	r7, r23
     acc:	44 15       	cp	r20, r4
     ace:	55 05       	cpc	r21, r5
     ad0:	66 05       	cpc	r22, r6
     ad2:	77 05       	cpc	r23, r7
     ad4:	21 f0       	breq	.+8      	; 0xade <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     ade:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     ae0:	22 23       	and	r18, r18
     ae2:	71 f0       	breq	.+28     	; 0xb00 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     ae4:	b0 ff       	sbrs	r27, 0
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     ae8:	c4 2a       	or	r12, r20
     aea:	d5 2a       	or	r13, r21
     aec:	e6 2a       	or	r14, r22
     aee:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     af0:	48 81       	ld	r20, Y
     af2:	59 81       	ldd	r21, Y+1	; 0x01
     af4:	6a 81       	ldd	r22, Y+2	; 0x02
     af6:	7b 81       	ldd	r23, Y+3	; 0x03
     af8:	72 60       	ori	r23, 0x02	; 2
     afa:	cf 01       	movw	r24, r30
     afc:	0e 94 bb 14 	call	0x2976	; 0x2976 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b00:	ea 2d       	mov	r30, r10
     b02:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b04:	e0 17       	cp	r30, r16
     b06:	f1 07       	cpc	r31, r17
     b08:	09 f0       	breq	.+2      	; 0xb0c <xEventGroupSetBits+0xd2>
     b0a:	bf cf       	rjmp	.-130    	; 0xa8a <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     b0c:	c0 94       	com	r12
     b0e:	d0 94       	com	r13
     b10:	e0 94       	com	r14
     b12:	f0 94       	com	r15
     b14:	88 81       	ld	r24, Y
     b16:	99 81       	ldd	r25, Y+1	; 0x01
     b18:	aa 81       	ldd	r26, Y+2	; 0x02
     b1a:	bb 81       	ldd	r27, Y+3	; 0x03
     b1c:	c8 22       	and	r12, r24
     b1e:	d9 22       	and	r13, r25
     b20:	ea 22       	and	r14, r26
     b22:	fb 22       	and	r15, r27
     b24:	c8 82       	st	Y, r12
     b26:	d9 82       	std	Y+1, r13	; 0x01
     b28:	ea 82       	std	Y+2, r14	; 0x02
     b2a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     b2c:	0e 94 a8 11 	call	0x2350	; 0x2350 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     b30:	68 81       	ld	r22, Y
     b32:	79 81       	ldd	r23, Y+1	; 0x01
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	9b 81       	ldd	r25, Y+3	; 0x03
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	bf 90       	pop	r11
     b4a:	af 90       	pop	r10
     b4c:	7f 90       	pop	r7
     b4e:	6f 90       	pop	r6
     b50:	5f 90       	pop	r5
     b52:	4f 90       	pop	r4
     b54:	08 95       	ret

00000b56 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b56:	e2 e1       	ldi	r30, 0x12	; 18
     b58:	f7 e0       	ldi	r31, 0x07	; 7
     b5a:	a6 e1       	ldi	r26, 0x16	; 22
     b5c:	b7 e0       	ldi	r27, 0x07	; 7
     b5e:	b1 83       	std	Z+1, r27	; 0x01
     b60:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     b62:	13 82       	std	Z+3, r1	; 0x03
     b64:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     b66:	e6 ed       	ldi	r30, 0xD6	; 214
     b68:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     b6a:	f0 93 11 07 	sts	0x0711, r31	; 0x800711 <pxEnd+0x1>
     b6e:	e0 93 10 07 	sts	0x0710, r30	; 0x800710 <pxEnd>
    pxEnd->xBlockSize = 0;
     b72:	13 82       	std	Z+3, r1	; 0x03
     b74:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     b76:	11 82       	std	Z+1, r1	; 0x01
     b78:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     b7a:	80 ec       	ldi	r24, 0xC0	; 192
     b7c:	99 e0       	ldi	r25, 0x09	; 9
     b7e:	13 96       	adiw	r26, 0x03	; 3
     b80:	9c 93       	st	X, r25
     b82:	8e 93       	st	-X, r24
     b84:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     b86:	ed 93       	st	X+, r30
     b88:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     b8a:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <xMinimumEverFreeBytesRemaining+0x1>
     b8e:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     b92:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <xFreeBytesRemaining+0x1>
     b96:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e8       	ldi	r25, 0x80	; 128
     b9e:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <__data_end+0x1>
     ba2:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__data_end>
     ba6:	08 95       	ret

00000ba8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     bae:	a2 e1       	ldi	r26, 0x12	; 18
     bb0:	b7 e0       	ldi	r27, 0x07	; 7
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <prvInsertBlockIntoFreeList+0xe>
     bb4:	df 01       	movw	r26, r30
     bb6:	ed 91       	ld	r30, X+
     bb8:	fc 91       	ld	r31, X
     bba:	11 97       	sbiw	r26, 0x01	; 1
     bbc:	ec 17       	cp	r30, r28
     bbe:	fd 07       	cpc	r31, r29
     bc0:	c8 f3       	brcs	.-14     	; 0xbb4 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     bc2:	12 96       	adiw	r26, 0x02	; 2
     bc4:	8d 91       	ld	r24, X+
     bc6:	9c 91       	ld	r25, X
     bc8:	13 97       	sbiw	r26, 0x03	; 3
     bca:	9d 01       	movw	r18, r26
     bcc:	28 0f       	add	r18, r24
     bce:	39 1f       	adc	r19, r25
     bd0:	c2 17       	cp	r28, r18
     bd2:	d3 07       	cpc	r29, r19
     bd4:	49 f4       	brne	.+18     	; 0xbe8 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     bd6:	2a 81       	ldd	r18, Y+2	; 0x02
     bd8:	3b 81       	ldd	r19, Y+3	; 0x03
     bda:	82 0f       	add	r24, r18
     bdc:	93 1f       	adc	r25, r19
     bde:	13 96       	adiw	r26, 0x03	; 3
     be0:	9c 93       	st	X, r25
     be2:	8e 93       	st	-X, r24
     be4:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     be6:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	9b 81       	ldd	r25, Y+3	; 0x03
     bec:	9e 01       	movw	r18, r28
     bee:	28 0f       	add	r18, r24
     bf0:	39 1f       	adc	r19, r25
     bf2:	e2 17       	cp	r30, r18
     bf4:	f3 07       	cpc	r31, r19
     bf6:	c1 f4       	brne	.+48     	; 0xc28 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     bf8:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <pxEnd>
     bfc:	30 91 11 07 	lds	r19, 0x0711	; 0x800711 <pxEnd+0x1>
     c00:	e2 17       	cp	r30, r18
     c02:	f3 07       	cpc	r31, r19
     c04:	71 f0       	breq	.+28     	; 0xc22 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c06:	22 81       	ldd	r18, Z+2	; 0x02
     c08:	33 81       	ldd	r19, Z+3	; 0x03
     c0a:	82 0f       	add	r24, r18
     c0c:	93 1f       	adc	r25, r19
     c0e:	9b 83       	std	Y+3, r25	; 0x03
     c10:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c12:	ed 91       	ld	r30, X+
     c14:	fc 91       	ld	r31, X
     c16:	11 97       	sbiw	r26, 0x01	; 1
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	99 83       	std	Y+1, r25	; 0x01
     c1e:	88 83       	st	Y, r24
     c20:	05 c0       	rjmp	.+10     	; 0xc2c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c22:	39 83       	std	Y+1, r19	; 0x01
     c24:	28 83       	st	Y, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     c28:	f9 83       	std	Y+1, r31	; 0x01
     c2a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     c2c:	ca 17       	cp	r28, r26
     c2e:	db 07       	cpc	r29, r27
     c30:	11 f0       	breq	.+4      	; 0xc36 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     c32:	cd 93       	st	X+, r28
     c34:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     c4a:	0e 94 68 10 	call	0x20d0	; 0x20d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     c4e:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <pxEnd>
     c52:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <pxEnd+0x1>
     c56:	89 2b       	or	r24, r25
     c58:	09 f4       	brne	.+2      	; 0xc5c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     c5a:	7d df       	rcall	.-262    	; 0xb56 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     c5c:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <__data_end>
     c60:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <__data_end+0x1>
     c64:	80 23       	and	r24, r16
     c66:	91 23       	and	r25, r17
     c68:	89 2b       	or	r24, r25
     c6a:	09 f0       	breq	.+2      	; 0xc6e <pvPortMalloc+0x32>
     c6c:	76 c0       	rjmp	.+236    	; 0xd5a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c6e:	01 15       	cp	r16, r1
     c70:	11 05       	cpc	r17, r1
     c72:	49 f0       	breq	.+18     	; 0xc86 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     c74:	c8 01       	movw	r24, r16
     c76:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c78:	08 17       	cp	r16, r24
     c7a:	19 07       	cpc	r17, r25
     c7c:	18 f0       	brcs	.+6      	; 0xc84 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     c84:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     c86:	01 15       	cp	r16, r1
     c88:	11 05       	cpc	r17, r1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <pvPortMalloc+0x52>
     c8c:	69 c0       	rjmp	.+210    	; 0xd60 <pvPortMalloc+0x124>
     c8e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xFreeBytesRemaining>
     c92:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xFreeBytesRemaining+0x1>
     c96:	80 17       	cp	r24, r16
     c98:	91 07       	cpc	r25, r17
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <pvPortMalloc+0x62>
     c9c:	64 c0       	rjmp	.+200    	; 0xd66 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     c9e:	c0 91 12 07 	lds	r28, 0x0712	; 0x800712 <xStart>
     ca2:	d0 91 13 07 	lds	r29, 0x0713	; 0x800713 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     ca6:	e2 e1       	ldi	r30, 0x12	; 18
     ca8:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     cac:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     cae:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	80 17       	cp	r24, r16
     cb6:	91 07       	cpc	r25, r17
     cb8:	20 f4       	brcc	.+8      	; 0xcc2 <pvPortMalloc+0x86>
     cba:	88 81       	ld	r24, Y
     cbc:	99 81       	ldd	r25, Y+1	; 0x01
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	a9 f7       	brne	.-22     	; 0xcac <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     cc2:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <pxEnd>
     cc6:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <pxEnd+0x1>
     cca:	c8 17       	cp	r28, r24
     ccc:	d9 07       	cpc	r29, r25
     cce:	09 f4       	brne	.+2      	; 0xcd2 <pvPortMalloc+0x96>
     cd0:	4d c0       	rjmp	.+154    	; 0xd6c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     cd2:	e0 80       	ld	r14, Z
     cd4:	f1 80       	ldd	r15, Z+1	; 0x01
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	e8 0e       	add	r14, r24
     cda:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     cdc:	88 81       	ld	r24, Y
     cde:	99 81       	ldd	r25, Y+1	; 0x01
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     ce4:	2a 81       	ldd	r18, Y+2	; 0x02
     ce6:	3b 81       	ldd	r19, Y+3	; 0x03
     ce8:	20 1b       	sub	r18, r16
     cea:	31 0b       	sbc	r19, r17
     cec:	29 30       	cpi	r18, 0x09	; 9
     cee:	31 05       	cpc	r19, r1
     cf0:	48 f0       	brcs	.+18     	; 0xd04 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     cf2:	ce 01       	movw	r24, r28
     cf4:	80 0f       	add	r24, r16
     cf6:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     cf8:	fc 01       	movw	r30, r24
     cfa:	33 83       	std	Z+3, r19	; 0x03
     cfc:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     cfe:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     d00:	0a 83       	std	Y+2, r16	; 0x02
     d02:	52 df       	rcall	.-348    	; 0xba8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     d04:	2a 81       	ldd	r18, Y+2	; 0x02
     d06:	3b 81       	ldd	r19, Y+3	; 0x03
     d08:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xFreeBytesRemaining>
     d0c:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xFreeBytesRemaining+0x1>
     d10:	82 1b       	sub	r24, r18
     d12:	93 0b       	sbc	r25, r19
     d14:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <xFreeBytesRemaining+0x1>
     d18:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     d1c:	40 91 0c 07 	lds	r20, 0x070C	; 0x80070c <xMinimumEverFreeBytesRemaining>
     d20:	50 91 0d 07 	lds	r21, 0x070D	; 0x80070d <xMinimumEverFreeBytesRemaining+0x1>
     d24:	84 17       	cp	r24, r20
     d26:	95 07       	cpc	r25, r21
     d28:	20 f4       	brcc	.+8      	; 0xd32 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     d2a:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <xMinimumEverFreeBytesRemaining+0x1>
     d2e:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     d32:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <__data_end>
     d36:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <__data_end+0x1>
     d3a:	28 2b       	or	r18, r24
     d3c:	39 2b       	or	r19, r25
     d3e:	3b 83       	std	Y+3, r19	; 0x03
     d40:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     d42:	19 82       	std	Y+1, r1	; 0x01
     d44:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     d46:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <xNumberOfSuccessfulAllocations>
     d4a:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <xNumberOfSuccessfulAllocations+0x1>
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <xNumberOfSuccessfulAllocations+0x1>
     d54:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xNumberOfSuccessfulAllocations>
     d58:	0b c0       	rjmp	.+22     	; 0xd70 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     d5a:	e1 2c       	mov	r14, r1
     d5c:	f1 2c       	mov	r15, r1
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <pvPortMalloc+0x134>
     d60:	e1 2c       	mov	r14, r1
     d62:	f1 2c       	mov	r15, r1
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <pvPortMalloc+0x134>
     d66:	e1 2c       	mov	r14, r1
     d68:	f1 2c       	mov	r15, r1
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <pvPortMalloc+0x134>
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     d70:	0e 94 a8 11 	call	0x2350	; 0x2350 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     d74:	e1 14       	cp	r14, r1
     d76:	f1 04       	cpc	r15, r1
     d78:	11 f4       	brne	.+4      	; 0xd7e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     d7a:	0e 94 4e 1c 	call	0x389c	; 0x389c <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     d7e:	c7 01       	movw	r24, r14
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	08 95       	ret

00000d8e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	91 f1       	breq	.+100    	; 0xdfe <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     d9a:	ec 01       	movw	r28, r24
     d9c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     d9e:	4a 81       	ldd	r20, Y+2	; 0x02
     da0:	5b 81       	ldd	r21, Y+3	; 0x03
     da2:	20 91 06 07 	lds	r18, 0x0706	; 0x800706 <__data_end>
     da6:	30 91 07 07 	lds	r19, 0x0707	; 0x800707 <__data_end+0x1>
     daa:	ba 01       	movw	r22, r20
     dac:	62 23       	and	r22, r18
     dae:	73 23       	and	r23, r19
     db0:	67 2b       	or	r22, r23
     db2:	29 f1       	breq	.+74     	; 0xdfe <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     db4:	68 81       	ld	r22, Y
     db6:	79 81       	ldd	r23, Y+1	; 0x01
     db8:	67 2b       	or	r22, r23
     dba:	09 f5       	brne	.+66     	; 0xdfe <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     dbc:	20 95       	com	r18
     dbe:	30 95       	com	r19
     dc0:	24 23       	and	r18, r20
     dc2:	35 23       	and	r19, r21
     dc4:	3b 83       	std	Y+3, r19	; 0x03
     dc6:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     dc8:	0e 94 68 10 	call	0x20d0	; 0x20d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <xFreeBytesRemaining>
     dd4:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <xFreeBytesRemaining+0x1>
     dd8:	82 0f       	add	r24, r18
     dda:	93 1f       	adc	r25, r19
     ddc:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <xFreeBytesRemaining+0x1>
     de0:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     de4:	ce 01       	movw	r24, r28
     de6:	e0 de       	rcall	.-576    	; 0xba8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     de8:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xNumberOfSuccessfulFrees>
     dec:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <xNumberOfSuccessfulFrees+0x1>
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <xNumberOfSuccessfulFrees+0x1>
     df6:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     dfa:	0e 94 a8 11 	call	0x2350	; 0x2350 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e08:	fc 01       	movw	r30, r24
     e0a:	03 96       	adiw	r24, 0x03	; 3
     e0c:	92 83       	std	Z+2, r25	; 0x02
     e0e:	81 83       	std	Z+1, r24	; 0x01
     e10:	4f ef       	ldi	r20, 0xFF	; 255
     e12:	5f ef       	ldi	r21, 0xFF	; 255
     e14:	ba 01       	movw	r22, r20
     e16:	43 83       	std	Z+3, r20	; 0x03
     e18:	54 83       	std	Z+4, r21	; 0x04
     e1a:	65 83       	std	Z+5, r22	; 0x05
     e1c:	76 83       	std	Z+6, r23	; 0x06
     e1e:	90 87       	std	Z+8, r25	; 0x08
     e20:	87 83       	std	Z+7, r24	; 0x07
     e22:	92 87       	std	Z+10, r25	; 0x0a
     e24:	81 87       	std	Z+9, r24	; 0x09
     e26:	10 82       	st	Z, r1
     e28:	08 95       	ret

00000e2a <vListInitialiseItem>:
     e2a:	fc 01       	movw	r30, r24
     e2c:	13 86       	std	Z+11, r1	; 0x0b
     e2e:	12 86       	std	Z+10, r1	; 0x0a
     e30:	08 95       	ret

00000e32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e3c:	08 81       	ld	r16, Y
     e3e:	19 81       	ldd	r17, Y+1	; 0x01
     e40:	2a 81       	ldd	r18, Y+2	; 0x02
     e42:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e44:	0f 3f       	cpi	r16, 0xFF	; 255
     e46:	4f ef       	ldi	r20, 0xFF	; 255
     e48:	14 07       	cpc	r17, r20
     e4a:	24 07       	cpc	r18, r20
     e4c:	34 07       	cpc	r19, r20
     e4e:	21 f4       	brne	.+8      	; 0xe58 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     e50:	fc 01       	movw	r30, r24
     e52:	a1 85       	ldd	r26, Z+9	; 0x09
     e54:	b2 85       	ldd	r27, Z+10	; 0x0a
     e56:	11 c0       	rjmp	.+34     	; 0xe7a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     e58:	dc 01       	movw	r26, r24
     e5a:	13 96       	adiw	r26, 0x03	; 3
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <vListInsert+0x2e>
     e5e:	df 01       	movw	r26, r30
     e60:	14 96       	adiw	r26, 0x04	; 4
     e62:	ed 91       	ld	r30, X+
     e64:	fc 91       	ld	r31, X
     e66:	15 97       	sbiw	r26, 0x05	; 5
     e68:	40 81       	ld	r20, Z
     e6a:	51 81       	ldd	r21, Z+1	; 0x01
     e6c:	62 81       	ldd	r22, Z+2	; 0x02
     e6e:	73 81       	ldd	r23, Z+3	; 0x03
     e70:	04 17       	cp	r16, r20
     e72:	15 07       	cpc	r17, r21
     e74:	26 07       	cpc	r18, r22
     e76:	37 07       	cpc	r19, r23
     e78:	90 f7       	brcc	.-28     	; 0xe5e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     e7a:	14 96       	adiw	r26, 0x04	; 4
     e7c:	ed 91       	ld	r30, X+
     e7e:	fc 91       	ld	r31, X
     e80:	15 97       	sbiw	r26, 0x05	; 5
     e82:	fd 83       	std	Y+5, r31	; 0x05
     e84:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     e86:	d7 83       	std	Z+7, r29	; 0x07
     e88:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     e8a:	bf 83       	std	Y+7, r27	; 0x07
     e8c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     e8e:	15 96       	adiw	r26, 0x05	; 5
     e90:	dc 93       	st	X, r29
     e92:	ce 93       	st	-X, r28
     e94:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     e96:	9b 87       	std	Y+11, r25	; 0x0b
     e98:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 81       	ld	r18, Z
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	20 83       	st	Z, r18
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	08 95       	ret

00000eac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     eb2:	a2 85       	ldd	r26, Z+10	; 0x0a
     eb4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     eb6:	c4 81       	ldd	r28, Z+4	; 0x04
     eb8:	d5 81       	ldd	r29, Z+5	; 0x05
     eba:	86 81       	ldd	r24, Z+6	; 0x06
     ebc:	97 81       	ldd	r25, Z+7	; 0x07
     ebe:	9f 83       	std	Y+7, r25	; 0x07
     ec0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ec2:	c6 81       	ldd	r28, Z+6	; 0x06
     ec4:	d7 81       	ldd	r29, Z+7	; 0x07
     ec6:	84 81       	ldd	r24, Z+4	; 0x04
     ec8:	95 81       	ldd	r25, Z+5	; 0x05
     eca:	9d 83       	std	Y+5, r25	; 0x05
     ecc:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	8d 91       	ld	r24, X+
     ed2:	9c 91       	ld	r25, X
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	e8 17       	cp	r30, r24
     ed8:	f9 07       	cpc	r31, r25
     eda:	31 f4       	brne	.+12     	; 0xee8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     edc:	86 81       	ldd	r24, Z+6	; 0x06
     ede:	97 81       	ldd	r25, Z+7	; 0x07
     ee0:	12 96       	adiw	r26, 0x02	; 2
     ee2:	9c 93       	st	X, r25
     ee4:	8e 93       	st	-X, r24
     ee6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ee8:	13 86       	std	Z+11, r1	; 0x0b
     eea:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     eec:	8c 91       	ld	r24, X
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ef2:	8c 91       	ld	r24, X
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     efa:	a8 95       	wdr
     efc:	90 ec       	ldi	r25, 0xC0	; 192
     efe:	88 e1       	ldi	r24, 0x18	; 24
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	a8 95       	wdr
     f06:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f10:	08 95       	ret

00000f12 <pxPortInitialiseStack>:
     f12:	fc 01       	movw	r30, r24
     f14:	60 83       	st	Z, r22
     f16:	31 97       	sbiw	r30, 0x01	; 1
     f18:	70 83       	st	Z, r23
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	10 82       	st	Z, r1
     f1e:	31 97       	sbiw	r30, 0x01	; 1
     f20:	10 82       	st	Z, r1
     f22:	31 97       	sbiw	r30, 0x01	; 1
     f24:	20 e8       	ldi	r18, 0x80	; 128
     f26:	20 83       	st	Z, r18
     f28:	31 97       	sbiw	r30, 0x01	; 1
     f2a:	10 82       	st	Z, r1
     f2c:	31 97       	sbiw	r30, 0x01	; 1
     f2e:	10 82       	st	Z, r1
     f30:	31 97       	sbiw	r30, 0x01	; 1
     f32:	10 82       	st	Z, r1
     f34:	77 97       	sbiw	r30, 0x17	; 23
     f36:	40 83       	st	Z, r20
     f38:	31 97       	sbiw	r30, 0x01	; 1
     f3a:	50 83       	st	Z, r21
     f3c:	86 97       	sbiw	r24, 0x26	; 38
     f3e:	08 95       	ret

00000f40 <xPortStartScheduler>:
     f40:	dc df       	rcall	.-72     	; 0xefa <prvSetupTimerInterrupt>
     f42:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
     f46:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
     f4a:	cd 91       	ld	r28, X+
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	dd 91       	ld	r29, X+
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	7f 90       	pop	r7
     f84:	6f 90       	pop	r6
     f86:	5f 90       	pop	r5
     f88:	4f 90       	pop	r4
     f8a:	3f 90       	pop	r3
     f8c:	2f 90       	pop	r2
     f8e:	1f 90       	pop	r1
     f90:	0f 90       	pop	r0
     f92:	0c be       	out	0x3c, r0	; 60
     f94:	0f 90       	pop	r0
     f96:	0b be       	out	0x3b, r0	; 59
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	08 95       	ret
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	08 95       	ret

00000fa4 <vPortYield>:
     fa4:	0f 92       	push	r0
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	0f 92       	push	r0
     fac:	0b b6       	in	r0, 0x3b	; 59
     fae:	0f 92       	push	r0
     fb0:	0c b6       	in	r0, 0x3c	; 60
     fb2:	0f 92       	push	r0
     fb4:	1f 92       	push	r1
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 92       	push	r2
     fba:	3f 92       	push	r3
     fbc:	4f 92       	push	r4
     fbe:	5f 92       	push	r5
     fc0:	6f 92       	push	r6
     fc2:	7f 92       	push	r7
     fc4:	8f 92       	push	r8
     fc6:	9f 92       	push	r9
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31
     ff4:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
     ff8:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
     ffc:	0d b6       	in	r0, 0x3d	; 61
     ffe:	0d 92       	st	X+, r0
    1000:	0e b6       	in	r0, 0x3e	; 62
    1002:	0d 92       	st	X+, r0
    1004:	0e 94 04 13 	call	0x2608	; 0x2608 <vTaskSwitchContext>
    1008:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    100c:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1010:	cd 91       	ld	r28, X+
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	dd 91       	ld	r29, X+
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	bf 91       	pop	r27
    1022:	af 91       	pop	r26
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	7f 91       	pop	r23
    102a:	6f 91       	pop	r22
    102c:	5f 91       	pop	r21
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	9f 90       	pop	r9
    1046:	8f 90       	pop	r8
    1048:	7f 90       	pop	r7
    104a:	6f 90       	pop	r6
    104c:	5f 90       	pop	r5
    104e:	4f 90       	pop	r4
    1050:	3f 90       	pop	r3
    1052:	2f 90       	pop	r2
    1054:	1f 90       	pop	r1
    1056:	0f 90       	pop	r0
    1058:	0c be       	out	0x3c, r0	; 60
    105a:	0f 90       	pop	r0
    105c:	0b be       	out	0x3b, r0	; 59
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	08 95       	ret

00001066 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	0f 92       	push	r0
    106e:	0b b6       	in	r0, 0x3b	; 59
    1070:	0f 92       	push	r0
    1072:	0c b6       	in	r0, 0x3c	; 60
    1074:	0f 92       	push	r0
    1076:	1f 92       	push	r1
    1078:	11 24       	eor	r1, r1
    107a:	2f 92       	push	r2
    107c:	3f 92       	push	r3
    107e:	4f 92       	push	r4
    1080:	5f 92       	push	r5
    1082:	6f 92       	push	r6
    1084:	7f 92       	push	r7
    1086:	8f 92       	push	r8
    1088:	9f 92       	push	r9
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	4f 93       	push	r20
    10a0:	5f 93       	push	r21
    10a2:	6f 93       	push	r22
    10a4:	7f 93       	push	r23
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
    10b6:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    10ba:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    10be:	0d b6       	in	r0, 0x3d	; 61
    10c0:	0d 92       	st	X+, r0
    10c2:	0e b6       	in	r0, 0x3e	; 62
    10c4:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    10c6:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    10c8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskIncrementTick>
    10cc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    10ce:	0e 94 04 13 	call	0x2608	; 0x2608 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    10d2:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    10d6:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    10da:	cd 91       	ld	r28, X+
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	dd 91       	ld	r29, X+
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	9f 90       	pop	r9
    1110:	8f 90       	pop	r8
    1112:	7f 90       	pop	r7
    1114:	6f 90       	pop	r6
    1116:	5f 90       	pop	r5
    1118:	4f 90       	pop	r4
    111a:	3f 90       	pop	r3
    111c:	2f 90       	pop	r2
    111e:	1f 90       	pop	r1
    1120:	0f 90       	pop	r0
    1122:	0c be       	out	0x3c, r0	; 60
    1124:	0f 90       	pop	r0
    1126:	0b be       	out	0x3b, r0	; 59
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    112e:	08 95       	ret

00001130 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1130:	9a df       	rcall	.-204    	; 0x1066 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1132:	18 95       	reti

00001134 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	0f 92       	push	r0
    113a:	fc 01       	movw	r30, r24
    113c:	86 8d       	ldd	r24, Z+30	; 0x1e
    113e:	81 11       	cpse	r24, r1
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <prvIsQueueEmpty+0x12>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <prvIsQueueEmpty+0x14>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	08 95       	ret

0000114e <prvIsQueueFull>:
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	0f 92       	push	r0
    1154:	fc 01       	movw	r30, r24
    1156:	26 8d       	ldd	r18, Z+30	; 0x1e
    1158:	87 8d       	ldd	r24, Z+31	; 0x1f
    115a:	28 13       	cpse	r18, r24
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <prvIsQueueFull+0x14>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <prvIsQueueFull+0x16>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	08 95       	ret

0000116a <prvCopyDataToQueue>:
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	04 2f       	mov	r16, r20
    1176:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1178:	48 a1       	ldd	r20, Y+32	; 0x20
    117a:	41 11       	cpse	r20, r1
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <prvCopyDataToQueue+0x2c>
    117e:	88 81       	ld	r24, Y
    1180:	99 81       	ldd	r25, Y+1	; 0x01
    1182:	89 2b       	or	r24, r25
    1184:	09 f0       	breq	.+2      	; 0x1188 <prvCopyDataToQueue+0x1e>
    1186:	42 c0       	rjmp	.+132    	; 0x120c <prvCopyDataToQueue+0xa2>
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <xTaskPriorityDisinherit>
    1190:	1d 82       	std	Y+5, r1	; 0x05
    1192:	1c 82       	std	Y+4, r1	; 0x04
    1194:	42 c0       	rjmp	.+132    	; 0x121a <prvCopyDataToQueue+0xb0>
    1196:	01 11       	cpse	r16, r1
    1198:	17 c0       	rjmp	.+46     	; 0x11c8 <prvCopyDataToQueue+0x5e>
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	9b 81       	ldd	r25, Y+3	; 0x03
    11a0:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <memcpy>
    11a4:	28 a1       	ldd	r18, Y+32	; 0x20
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	82 0f       	add	r24, r18
    11ac:	91 1d       	adc	r25, r1
    11ae:	9b 83       	std	Y+3, r25	; 0x03
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	82 17       	cp	r24, r18
    11b8:	93 07       	cpc	r25, r19
    11ba:	50 f1       	brcs	.+84     	; 0x1210 <prvCopyDataToQueue+0xa6>
    11bc:	88 81       	ld	r24, Y
    11be:	99 81       	ldd	r25, Y+1	; 0x01
    11c0:	9b 83       	std	Y+3, r25	; 0x03
    11c2:	8a 83       	std	Y+2, r24	; 0x02
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	29 c0       	rjmp	.+82     	; 0x121a <prvCopyDataToQueue+0xb0>
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	9f 81       	ldd	r25, Y+7	; 0x07
    11ce:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <memcpy>
    11d2:	88 a1       	ldd	r24, Y+32	; 0x20
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	91 95       	neg	r25
    11d8:	81 95       	neg	r24
    11da:	91 09       	sbc	r25, r1
    11dc:	2e 81       	ldd	r18, Y+6	; 0x06
    11de:	3f 81       	ldd	r19, Y+7	; 0x07
    11e0:	28 0f       	add	r18, r24
    11e2:	39 1f       	adc	r19, r25
    11e4:	3f 83       	std	Y+7, r19	; 0x07
    11e6:	2e 83       	std	Y+6, r18	; 0x06
    11e8:	48 81       	ld	r20, Y
    11ea:	59 81       	ldd	r21, Y+1	; 0x01
    11ec:	24 17       	cp	r18, r20
    11ee:	35 07       	cpc	r19, r21
    11f0:	30 f4       	brcc	.+12     	; 0x11fe <prvCopyDataToQueue+0x94>
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
    11f4:	3d 81       	ldd	r19, Y+5	; 0x05
    11f6:	82 0f       	add	r24, r18
    11f8:	93 1f       	adc	r25, r19
    11fa:	9f 83       	std	Y+7, r25	; 0x07
    11fc:	8e 83       	std	Y+6, r24	; 0x06
    11fe:	02 30       	cpi	r16, 0x02	; 2
    1200:	49 f4       	brne	.+18     	; 0x1214 <prvCopyDataToQueue+0xaa>
    1202:	11 23       	and	r17, r17
    1204:	49 f0       	breq	.+18     	; 0x1218 <prvCopyDataToQueue+0xae>
    1206:	11 50       	subi	r17, 0x01	; 1
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	07 c0       	rjmp	.+14     	; 0x121a <prvCopyDataToQueue+0xb0>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <prvCopyDataToQueue+0xb0>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	03 c0       	rjmp	.+6      	; 0x121a <prvCopyDataToQueue+0xb0>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	01 c0       	rjmp	.+2      	; 0x121a <prvCopyDataToQueue+0xb0>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	1f 5f       	subi	r17, 0xFF	; 255
    121c:	1e 8f       	std	Y+30, r17	; 0x1e
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <prvCopyDataFromQueue>:
    1228:	fc 01       	movw	r30, r24
    122a:	40 a1       	ldd	r20, Z+32	; 0x20
    122c:	44 23       	and	r20, r20
    122e:	a9 f0       	breq	.+42     	; 0x125a <prvCopyDataFromQueue+0x32>
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	26 81       	ldd	r18, Z+6	; 0x06
    1234:	37 81       	ldd	r19, Z+7	; 0x07
    1236:	24 0f       	add	r18, r20
    1238:	35 1f       	adc	r19, r21
    123a:	37 83       	std	Z+7, r19	; 0x07
    123c:	26 83       	std	Z+6, r18	; 0x06
    123e:	84 81       	ldd	r24, Z+4	; 0x04
    1240:	95 81       	ldd	r25, Z+5	; 0x05
    1242:	28 17       	cp	r18, r24
    1244:	39 07       	cpc	r19, r25
    1246:	20 f0       	brcs	.+8      	; 0x1250 <prvCopyDataFromQueue+0x28>
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	97 83       	std	Z+7, r25	; 0x07
    124e:	86 83       	std	Z+6, r24	; 0x06
    1250:	cb 01       	movw	r24, r22
    1252:	66 81       	ldd	r22, Z+6	; 0x06
    1254:	77 81       	ldd	r23, Z+7	; 0x07
    1256:	0c 94 d0 2e 	jmp	0x5da0	; 0x5da0 <memcpy>
    125a:	08 95       	ret

0000125c <prvUnlockQueue>:
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	0f 92       	push	r0
    126a:	1a a1       	ldd	r17, Y+34	; 0x22
    126c:	0b c0       	rjmp	.+22     	; 0x1284 <prvUnlockQueue+0x28>
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	88 23       	and	r24, r24
    1272:	51 f0       	breq	.+20     	; 0x1288 <prvUnlockQueue+0x2c>
    1274:	ce 01       	movw	r24, r28
    1276:	43 96       	adiw	r24, 0x13	; 19
    1278:	0e 94 0c 14 	call	0x2818	; 0x2818 <xTaskRemoveFromEventList>
    127c:	81 11       	cpse	r24, r1
    127e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <vTaskMissedYield>
    1282:	11 50       	subi	r17, 0x01	; 1
    1284:	11 16       	cp	r1, r17
    1286:	9c f3       	brlt	.-26     	; 0x126e <prvUnlockQueue+0x12>
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	8a a3       	std	Y+34, r24	; 0x22
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	0f 92       	push	r0
    1296:	19 a1       	ldd	r17, Y+33	; 0x21
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <prvUnlockQueue+0x54>
    129a:	88 85       	ldd	r24, Y+8	; 0x08
    129c:	88 23       	and	r24, r24
    129e:	51 f0       	breq	.+20     	; 0x12b4 <prvUnlockQueue+0x58>
    12a0:	ce 01       	movw	r24, r28
    12a2:	08 96       	adiw	r24, 0x08	; 8
    12a4:	0e 94 0c 14 	call	0x2818	; 0x2818 <xTaskRemoveFromEventList>
    12a8:	81 11       	cpse	r24, r1
    12aa:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <vTaskMissedYield>
    12ae:	11 50       	subi	r17, 0x01	; 1
    12b0:	11 16       	cp	r1, r17
    12b2:	9c f3       	brlt	.-26     	; 0x129a <prvUnlockQueue+0x3e>
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	89 a3       	std	Y+33, r24	; 0x21
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	08 95       	ret

000012c4 <xQueueGenericReset>:
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	0f 92       	push	r0
    12d0:	e8 81       	ld	r30, Y
    12d2:	f9 81       	ldd	r31, Y+1	; 0x01
    12d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12d6:	28 a1       	ldd	r18, Y+32	; 0x20
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	82 9f       	mul	r24, r18
    12de:	a0 01       	movw	r20, r0
    12e0:	83 9f       	mul	r24, r19
    12e2:	50 0d       	add	r21, r0
    12e4:	92 9f       	mul	r25, r18
    12e6:	50 0d       	add	r21, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	4e 0f       	add	r20, r30
    12ec:	5f 1f       	adc	r21, r31
    12ee:	5d 83       	std	Y+5, r21	; 0x05
    12f0:	4c 83       	std	Y+4, r20	; 0x04
    12f2:	1e 8e       	std	Y+30, r1	; 0x1e
    12f4:	fb 83       	std	Y+3, r31	; 0x03
    12f6:	ea 83       	std	Y+2, r30	; 0x02
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	28 9f       	mul	r18, r24
    12fc:	a0 01       	movw	r20, r0
    12fe:	29 9f       	mul	r18, r25
    1300:	50 0d       	add	r21, r0
    1302:	38 9f       	mul	r19, r24
    1304:	50 0d       	add	r21, r0
    1306:	11 24       	eor	r1, r1
    1308:	cf 01       	movw	r24, r30
    130a:	84 0f       	add	r24, r20
    130c:	95 1f       	adc	r25, r21
    130e:	9f 83       	std	Y+7, r25	; 0x07
    1310:	8e 83       	std	Y+6, r24	; 0x06
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	89 a3       	std	Y+33, r24	; 0x21
    1316:	8a a3       	std	Y+34, r24	; 0x22
    1318:	61 11       	cpse	r22, r1
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <xQueueGenericReset+0x6e>
    131c:	88 85       	ldd	r24, Y+8	; 0x08
    131e:	88 23       	and	r24, r24
    1320:	71 f0       	breq	.+28     	; 0x133e <xQueueGenericReset+0x7a>
    1322:	ce 01       	movw	r24, r28
    1324:	08 96       	adiw	r24, 0x08	; 8
    1326:	0e 94 0c 14 	call	0x2818	; 0x2818 <xTaskRemoveFromEventList>
    132a:	88 23       	and	r24, r24
    132c:	41 f0       	breq	.+16     	; 0x133e <xQueueGenericReset+0x7a>
    132e:	3a de       	rcall	.-908    	; 0xfa4 <vPortYield>
    1330:	06 c0       	rjmp	.+12     	; 0x133e <xQueueGenericReset+0x7a>
    1332:	ce 01       	movw	r24, r28
    1334:	08 96       	adiw	r24, 0x08	; 8
    1336:	68 dd       	rcall	.-1328   	; 0xe08 <vListInitialise>
    1338:	ce 01       	movw	r24, r28
    133a:	43 96       	adiw	r24, 0x13	; 19
    133c:	65 dd       	rcall	.-1334   	; 0xe08 <vListInitialise>
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <prvInitialiseNewQueue>:
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	f8 01       	movw	r30, r16
    1350:	61 11       	cpse	r22, r1
    1352:	03 c0       	rjmp	.+6      	; 0x135a <prvInitialiseNewQueue+0x10>
    1354:	11 83       	std	Z+1, r17	; 0x01
    1356:	00 83       	st	Z, r16
    1358:	02 c0       	rjmp	.+4      	; 0x135e <prvInitialiseNewQueue+0x14>
    135a:	51 83       	std	Z+1, r21	; 0x01
    135c:	40 83       	st	Z, r20
    135e:	87 8f       	std	Z+31, r24	; 0x1f
    1360:	60 a3       	std	Z+32, r22	; 0x20
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	cf 01       	movw	r24, r30
    1366:	ae df       	rcall	.-164    	; 0x12c4 <xQueueGenericReset>
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <xQueueGenericCreate>:
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	f8 2e       	mov	r15, r24
    137e:	e6 2e       	mov	r14, r22
    1380:	d4 2e       	mov	r13, r20
    1382:	86 9f       	mul	r24, r22
    1384:	c0 01       	movw	r24, r0
    1386:	11 24       	eor	r1, r1
    1388:	83 96       	adiw	r24, 0x23	; 35
    138a:	58 dc       	rcall	.-1872   	; 0xc3c <pvPortMalloc>
    138c:	ec 01       	movw	r28, r24
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	41 f0       	breq	.+16     	; 0x13a2 <xQueueGenericCreate+0x34>
    1392:	8c 01       	movw	r16, r24
    1394:	2d 2d       	mov	r18, r13
    1396:	ac 01       	movw	r20, r24
    1398:	4d 5d       	subi	r20, 0xDD	; 221
    139a:	5f 4f       	sbci	r21, 0xFF	; 255
    139c:	6e 2d       	mov	r22, r14
    139e:	8f 2d       	mov	r24, r15
    13a0:	d4 df       	rcall	.-88     	; 0x134a <prvInitialiseNewQueue>
    13a2:	ce 01       	movw	r24, r28
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	08 95       	ret

000013b4 <xQueueGenericSend>:
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	29 97       	sbiw	r28, 0x09	; 9
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	7c 01       	movw	r14, r24
    13d6:	6b 01       	movw	r12, r22
    13d8:	2e 83       	std	Y+6, r18	; 0x06
    13da:	3f 83       	std	Y+7, r19	; 0x07
    13dc:	48 87       	std	Y+8, r20	; 0x08
    13de:	59 87       	std	Y+9, r21	; 0x09
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	0f 92       	push	r0
    13e8:	f7 01       	movw	r30, r14
    13ea:	96 8d       	ldd	r25, Z+30	; 0x1e
    13ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    13ee:	98 17       	cp	r25, r24
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <xQueueGenericSend+0x42>
    13f2:	02 30       	cpi	r16, 0x02	; 2
    13f4:	b1 f4       	brne	.+44     	; 0x1422 <xQueueGenericSend+0x6e>
    13f6:	40 2f       	mov	r20, r16
    13f8:	b6 01       	movw	r22, r12
    13fa:	c7 01       	movw	r24, r14
    13fc:	b6 de       	rcall	.-660    	; 0x116a <prvCopyDataToQueue>
    13fe:	f7 01       	movw	r30, r14
    1400:	93 89       	ldd	r25, Z+19	; 0x13
    1402:	99 23       	and	r25, r25
    1404:	41 f0       	breq	.+16     	; 0x1416 <xQueueGenericSend+0x62>
    1406:	c7 01       	movw	r24, r14
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 0c 14 	call	0x2818	; 0x2818 <xTaskRemoveFromEventList>
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <xQueueGenericSend+0x66>
    1412:	c8 dd       	rcall	.-1136   	; 0xfa4 <vPortYield>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <xQueueGenericSend+0x66>
    1416:	81 11       	cpse	r24, r1
    1418:	c5 dd       	rcall	.-1142   	; 0xfa4 <vPortYield>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	49 c0       	rjmp	.+146    	; 0x14b4 <xQueueGenericSend+0x100>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	a8 85       	ldd	r26, Y+8	; 0x08
    1428:	b9 85       	ldd	r27, Y+9	; 0x09
    142a:	89 2b       	or	r24, r25
    142c:	8a 2b       	or	r24, r26
    142e:	8b 2b       	or	r24, r27
    1430:	21 f4       	brne	.+8      	; 0x143a <xQueueGenericSend+0x86>
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	3d c0       	rjmp	.+122    	; 0x14b4 <xQueueGenericSend+0x100>
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <xQueueGenericSend+0x94>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <vTaskInternalSetTimeOutState>
    1446:	11 e0       	ldi	r17, 0x01	; 1
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	41 d6       	rcall	.+3202   	; 0x20d0 <vTaskSuspendAll>
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	0f 92       	push	r0
    1454:	f7 01       	movw	r30, r14
    1456:	81 a1       	ldd	r24, Z+33	; 0x21
    1458:	8f 3f       	cpi	r24, 0xFF	; 255
    145a:	09 f4       	brne	.+2      	; 0x145e <xQueueGenericSend+0xaa>
    145c:	11 a2       	std	Z+33, r1	; 0x21
    145e:	f7 01       	movw	r30, r14
    1460:	82 a1       	ldd	r24, Z+34	; 0x22
    1462:	8f 3f       	cpi	r24, 0xFF	; 255
    1464:	09 f4       	brne	.+2      	; 0x1468 <xQueueGenericSend+0xb4>
    1466:	12 a2       	std	Z+34, r1	; 0x22
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	be 01       	movw	r22, r28
    146e:	6a 5f       	subi	r22, 0xFA	; 250
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	0e 94 66 15 	call	0x2acc	; 0x2acc <xTaskCheckForTimeOut>
    147a:	81 11       	cpse	r24, r1
    147c:	17 c0       	rjmp	.+46     	; 0x14ac <xQueueGenericSend+0xf8>
    147e:	c7 01       	movw	r24, r14
    1480:	66 de       	rcall	.-820    	; 0x114e <prvIsQueueFull>
    1482:	88 23       	and	r24, r24
    1484:	79 f0       	breq	.+30     	; 0x14a4 <xQueueGenericSend+0xf0>
    1486:	4e 81       	ldd	r20, Y+6	; 0x06
    1488:	5f 81       	ldd	r21, Y+7	; 0x07
    148a:	68 85       	ldd	r22, Y+8	; 0x08
    148c:	79 85       	ldd	r23, Y+9	; 0x09
    148e:	c7 01       	movw	r24, r14
    1490:	08 96       	adiw	r24, 0x08	; 8
    1492:	0e 94 69 13 	call	0x26d2	; 0x26d2 <vTaskPlaceOnEventList>
    1496:	c7 01       	movw	r24, r14
    1498:	e1 de       	rcall	.-574    	; 0x125c <prvUnlockQueue>
    149a:	5a d7       	rcall	.+3764   	; 0x2350 <xTaskResumeAll>
    149c:	81 11       	cpse	r24, r1
    149e:	a1 cf       	rjmp	.-190    	; 0x13e2 <xQueueGenericSend+0x2e>
    14a0:	81 dd       	rcall	.-1278   	; 0xfa4 <vPortYield>
    14a2:	9f cf       	rjmp	.-194    	; 0x13e2 <xQueueGenericSend+0x2e>
    14a4:	c7 01       	movw	r24, r14
    14a6:	da de       	rcall	.-588    	; 0x125c <prvUnlockQueue>
    14a8:	53 d7       	rcall	.+3750   	; 0x2350 <xTaskResumeAll>
    14aa:	9b cf       	rjmp	.-202    	; 0x13e2 <xQueueGenericSend+0x2e>
    14ac:	c7 01       	movw	r24, r14
    14ae:	d6 de       	rcall	.-596    	; 0x125c <prvUnlockQueue>
    14b0:	4f d7       	rcall	.+3742   	; 0x2350 <xTaskResumeAll>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	29 96       	adiw	r28, 0x09	; 9
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	08 95       	ret

000014d2 <prvInitialiseMutex>:
    14d2:	0f 93       	push	r16
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	69 f0       	breq	.+26     	; 0x14f2 <prvInitialiseMutex+0x20>
    14d8:	fc 01       	movw	r30, r24
    14da:	15 82       	std	Z+5, r1	; 0x05
    14dc:	14 82       	std	Z+4, r1	; 0x04
    14de:	11 82       	std	Z+1, r1	; 0x01
    14e0:	10 82       	st	Z, r1
    14e2:	16 82       	std	Z+6, r1	; 0x06
    14e4:	00 e0       	ldi	r16, 0x00	; 0
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	61 df       	rcall	.-318    	; 0x13b4 <xQueueGenericSend>
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <xQueueCreateMutex>:
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	48 2f       	mov	r20, r24
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	36 df       	rcall	.-404    	; 0x136e <xQueueGenericCreate>
    1502:	ec 01       	movw	r28, r24
    1504:	e6 df       	rcall	.-52     	; 0x14d2 <prvInitialiseMutex>
    1506:	ce 01       	movw	r24, r28
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <xQueueGenericSendFromISR>:
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	8a 01       	movw	r16, r20
    151c:	fc 01       	movw	r30, r24
    151e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1520:	37 8d       	ldd	r19, Z+31	; 0x1f
    1522:	53 17       	cp	r21, r19
    1524:	10 f0       	brcs	.+4      	; 0x152a <xQueueGenericSendFromISR+0x1c>
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	f9 f4       	brne	.+62     	; 0x1568 <xQueueGenericSendFromISR+0x5a>
    152a:	42 2f       	mov	r20, r18
    152c:	78 01       	movw	r14, r16
    152e:	ec 01       	movw	r28, r24
    1530:	1a a1       	ldd	r17, Y+34	; 0x22
    1532:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1534:	ce 01       	movw	r24, r28
    1536:	19 de       	rcall	.-974    	; 0x116a <prvCopyDataToQueue>
    1538:	1f 3f       	cpi	r17, 0xFF	; 255
    153a:	81 f4       	brne	.+32     	; 0x155c <xQueueGenericSendFromISR+0x4e>
    153c:	8b 89       	ldd	r24, Y+19	; 0x13
    153e:	88 23       	and	r24, r24
    1540:	a9 f0       	breq	.+42     	; 0x156c <xQueueGenericSendFromISR+0x5e>
    1542:	ce 01       	movw	r24, r28
    1544:	43 96       	adiw	r24, 0x13	; 19
    1546:	0e 94 0c 14 	call	0x2818	; 0x2818 <xTaskRemoveFromEventList>
    154a:	88 23       	and	r24, r24
    154c:	89 f0       	breq	.+34     	; 0x1570 <xQueueGenericSendFromISR+0x62>
    154e:	e1 14       	cp	r14, r1
    1550:	f1 04       	cpc	r15, r1
    1552:	81 f0       	breq	.+32     	; 0x1574 <xQueueGenericSendFromISR+0x66>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	f7 01       	movw	r30, r14
    1558:	80 83       	st	Z, r24
    155a:	0d c0       	rjmp	.+26     	; 0x1576 <xQueueGenericSendFromISR+0x68>
    155c:	ff 24       	eor	r15, r15
    155e:	f3 94       	inc	r15
    1560:	f1 0e       	add	r15, r17
    1562:	fa a2       	std	Y+34, r15	; 0x22
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <xQueueGenericSendFromISR+0x68>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <xQueueGenericSendFromISR+0x68>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <xQueueGenericSendFromISR+0x68>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <xQueueGenericSendFromISR+0x68>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	08 95       	ret

00001584 <xQueueReceive>:
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	29 97       	sbiw	r28, 0x09	; 9
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	8c 01       	movw	r16, r24
    15a6:	6b 01       	movw	r12, r22
    15a8:	2e 83       	std	Y+6, r18	; 0x06
    15aa:	3f 83       	std	Y+7, r19	; 0x07
    15ac:	48 87       	std	Y+8, r20	; 0x08
    15ae:	59 87       	std	Y+9, r21	; 0x09
    15b0:	e1 2c       	mov	r14, r1
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	0f 92       	push	r0
    15b8:	f8 01       	movw	r30, r16
    15ba:	f6 8c       	ldd	r15, Z+30	; 0x1e
    15bc:	ff 20       	and	r15, r15
    15be:	99 f0       	breq	.+38     	; 0x15e6 <xQueueReceive+0x62>
    15c0:	b6 01       	movw	r22, r12
    15c2:	c8 01       	movw	r24, r16
    15c4:	31 de       	rcall	.-926    	; 0x1228 <prvCopyDataFromQueue>
    15c6:	fa 94       	dec	r15
    15c8:	f8 01       	movw	r30, r16
    15ca:	f6 8e       	std	Z+30, r15	; 0x1e
    15cc:	80 85       	ldd	r24, Z+8	; 0x08
    15ce:	88 23       	and	r24, r24
    15d0:	31 f0       	breq	.+12     	; 0x15de <xQueueReceive+0x5a>
    15d2:	c8 01       	movw	r24, r16
    15d4:	08 96       	adiw	r24, 0x08	; 8
    15d6:	0e 94 0c 14 	call	0x2818	; 0x2818 <xTaskRemoveFromEventList>
    15da:	81 11       	cpse	r24, r1
    15dc:	e3 dc       	rcall	.-1594   	; 0xfa4 <vPortYield>
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	4f c0       	rjmp	.+158    	; 0x1684 <xQueueReceive+0x100>
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ea:	a8 85       	ldd	r26, Y+8	; 0x08
    15ec:	b9 85       	ldd	r27, Y+9	; 0x09
    15ee:	89 2b       	or	r24, r25
    15f0:	8a 2b       	or	r24, r26
    15f2:	8b 2b       	or	r24, r27
    15f4:	21 f4       	brne	.+8      	; 0x15fe <xQueueReceive+0x7a>
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	43 c0       	rjmp	.+134    	; 0x1684 <xQueueReceive+0x100>
    15fe:	e1 10       	cpse	r14, r1
    1600:	06 c0       	rjmp	.+12     	; 0x160e <xQueueReceive+0x8a>
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <vTaskInternalSetTimeOutState>
    160a:	ee 24       	eor	r14, r14
    160c:	e3 94       	inc	r14
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	5e d5       	rcall	.+2748   	; 0x20d0 <vTaskSuspendAll>
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	0f 92       	push	r0
    161a:	f8 01       	movw	r30, r16
    161c:	81 a1       	ldd	r24, Z+33	; 0x21
    161e:	8f 3f       	cpi	r24, 0xFF	; 255
    1620:	09 f4       	brne	.+2      	; 0x1624 <xQueueReceive+0xa0>
    1622:	11 a2       	std	Z+33, r1	; 0x21
    1624:	f8 01       	movw	r30, r16
    1626:	82 a1       	ldd	r24, Z+34	; 0x22
    1628:	8f 3f       	cpi	r24, 0xFF	; 255
    162a:	09 f4       	brne	.+2      	; 0x162e <xQueueReceive+0xaa>
    162c:	12 a2       	std	Z+34, r1	; 0x22
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	be 01       	movw	r22, r28
    1634:	6a 5f       	subi	r22, 0xFA	; 250
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	0e 94 66 15 	call	0x2acc	; 0x2acc <xTaskCheckForTimeOut>
    1640:	81 11       	cpse	r24, r1
    1642:	17 c0       	rjmp	.+46     	; 0x1672 <xQueueReceive+0xee>
    1644:	c8 01       	movw	r24, r16
    1646:	76 dd       	rcall	.-1300   	; 0x1134 <prvIsQueueEmpty>
    1648:	88 23       	and	r24, r24
    164a:	79 f0       	breq	.+30     	; 0x166a <xQueueReceive+0xe6>
    164c:	4e 81       	ldd	r20, Y+6	; 0x06
    164e:	5f 81       	ldd	r21, Y+7	; 0x07
    1650:	68 85       	ldd	r22, Y+8	; 0x08
    1652:	79 85       	ldd	r23, Y+9	; 0x09
    1654:	c8 01       	movw	r24, r16
    1656:	43 96       	adiw	r24, 0x13	; 19
    1658:	0e 94 69 13 	call	0x26d2	; 0x26d2 <vTaskPlaceOnEventList>
    165c:	c8 01       	movw	r24, r16
    165e:	fe dd       	rcall	.-1028   	; 0x125c <prvUnlockQueue>
    1660:	77 d6       	rcall	.+3310   	; 0x2350 <xTaskResumeAll>
    1662:	81 11       	cpse	r24, r1
    1664:	a6 cf       	rjmp	.-180    	; 0x15b2 <xQueueReceive+0x2e>
    1666:	9e dc       	rcall	.-1732   	; 0xfa4 <vPortYield>
    1668:	a4 cf       	rjmp	.-184    	; 0x15b2 <xQueueReceive+0x2e>
    166a:	c8 01       	movw	r24, r16
    166c:	f7 dd       	rcall	.-1042   	; 0x125c <prvUnlockQueue>
    166e:	70 d6       	rcall	.+3296   	; 0x2350 <xTaskResumeAll>
    1670:	a0 cf       	rjmp	.-192    	; 0x15b2 <xQueueReceive+0x2e>
    1672:	c8 01       	movw	r24, r16
    1674:	f3 dd       	rcall	.-1050   	; 0x125c <prvUnlockQueue>
    1676:	6c d6       	rcall	.+3288   	; 0x2350 <xTaskResumeAll>
    1678:	c8 01       	movw	r24, r16
    167a:	5c dd       	rcall	.-1352   	; 0x1134 <prvIsQueueEmpty>
    167c:	88 23       	and	r24, r24
    167e:	09 f4       	brne	.+2      	; 0x1682 <xQueueReceive+0xfe>
    1680:	98 cf       	rjmp	.-208    	; 0x15b2 <xQueueReceive+0x2e>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	29 96       	adiw	r28, 0x09	; 9
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	cf 90       	pop	r12
    16a0:	08 95       	ret

000016a2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	0f 92       	push	r0
    16ae:	89 a1       	ldd	r24, Y+33	; 0x21
    16b0:	8f 3f       	cpi	r24, 0xFF	; 255
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <vQueueWaitForMessageRestricted+0x14>
    16b4:	19 a2       	std	Y+33, r1	; 0x21
    16b6:	8a a1       	ldd	r24, Y+34	; 0x22
    16b8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ba:	09 f4       	brne	.+2      	; 0x16be <vQueueWaitForMessageRestricted+0x1c>
    16bc:	1a a2       	std	Y+34, r1	; 0x22
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16c4:	81 11       	cpse	r24, r1
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16c8:	ce 01       	movw	r24, r28
    16ca:	43 96       	adiw	r24, 0x13	; 19
    16cc:	0e 94 ca 13 	call	0x2794	; 0x2794 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    16d0:	ce 01       	movw	r24, r28
    16d2:	c4 dd       	rcall	.-1144   	; 0x125c <prvUnlockQueue>
    }
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    16da:	fc 01       	movw	r30, r24
    16dc:	44 81       	ldd	r20, Z+4	; 0x04
    16de:	55 81       	ldd	r21, Z+5	; 0x05
    16e0:	22 81       	ldd	r18, Z+2	; 0x02
    16e2:	33 81       	ldd	r19, Z+3	; 0x03
    16e4:	24 0f       	add	r18, r20
    16e6:	35 1f       	adc	r19, r21
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	b9 01       	movw	r22, r18
    16ee:	68 1b       	sub	r22, r24
    16f0:	79 0b       	sbc	r23, r25
    16f2:	cb 01       	movw	r24, r22
    16f4:	64 17       	cp	r22, r20
    16f6:	75 07       	cpc	r23, r21
    16f8:	10 f0       	brcs	.+4      	; 0x16fe <prvBytesInBuffer+0x24>
    16fa:	84 1b       	sub	r24, r20
    16fc:	95 0b       	sbc	r25, r21
    16fe:	08 95       	ret

00001700 <prvInitialiseNewStreamBuffer>:
    1700:	0f 93       	push	r16
    1702:	fc 01       	movw	r30, r24
    1704:	8f e0       	ldi	r24, 0x0F	; 15
    1706:	df 01       	movw	r26, r30
    1708:	1d 92       	st	X+, r1
    170a:	8a 95       	dec	r24
    170c:	e9 f7       	brne	.-6      	; 0x1708 <prvInitialiseNewStreamBuffer+0x8>
    170e:	75 87       	std	Z+13, r23	; 0x0d
    1710:	64 87       	std	Z+12, r22	; 0x0c
    1712:	55 83       	std	Z+5, r21	; 0x05
    1714:	44 83       	std	Z+4, r20	; 0x04
    1716:	37 83       	std	Z+7, r19	; 0x07
    1718:	26 83       	std	Z+6, r18	; 0x06
    171a:	06 87       	std	Z+14, r16	; 0x0e
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <prvWriteBytesToBuffer>:
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	6c 01       	movw	r12, r24
    1736:	5b 01       	movw	r10, r22
    1738:	7a 01       	movw	r14, r20
    173a:	fc 01       	movw	r30, r24
    173c:	c2 81       	ldd	r28, Z+2	; 0x02
    173e:	d3 81       	ldd	r29, Z+3	; 0x03
    1740:	04 81       	ldd	r16, Z+4	; 0x04
    1742:	15 81       	ldd	r17, Z+5	; 0x05
    1744:	0c 1b       	sub	r16, r28
    1746:	1d 0b       	sbc	r17, r29
    1748:	40 17       	cp	r20, r16
    174a:	51 07       	cpc	r21, r17
    174c:	08 f4       	brcc	.+2      	; 0x1750 <prvWriteBytesToBuffer+0x30>
    174e:	8a 01       	movw	r16, r20
    1750:	f6 01       	movw	r30, r12
    1752:	84 85       	ldd	r24, Z+12	; 0x0c
    1754:	95 85       	ldd	r25, Z+13	; 0x0d
    1756:	a8 01       	movw	r20, r16
    1758:	b5 01       	movw	r22, r10
    175a:	8c 0f       	add	r24, r28
    175c:	9d 1f       	adc	r25, r29
    175e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <memcpy>
    1762:	0e 15       	cp	r16, r14
    1764:	1f 05       	cpc	r17, r15
    1766:	58 f4       	brcc	.+22     	; 0x177e <prvWriteBytesToBuffer+0x5e>
    1768:	a7 01       	movw	r20, r14
    176a:	40 1b       	sub	r20, r16
    176c:	51 0b       	sbc	r21, r17
    176e:	b5 01       	movw	r22, r10
    1770:	60 0f       	add	r22, r16
    1772:	71 1f       	adc	r23, r17
    1774:	f6 01       	movw	r30, r12
    1776:	84 85       	ldd	r24, Z+12	; 0x0c
    1778:	95 85       	ldd	r25, Z+13	; 0x0d
    177a:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <memcpy>
    177e:	ce 01       	movw	r24, r28
    1780:	8e 0d       	add	r24, r14
    1782:	9f 1d       	adc	r25, r15
    1784:	f6 01       	movw	r30, r12
    1786:	24 81       	ldd	r18, Z+4	; 0x04
    1788:	35 81       	ldd	r19, Z+5	; 0x05
    178a:	82 17       	cp	r24, r18
    178c:	93 07       	cpc	r25, r19
    178e:	10 f0       	brcs	.+4      	; 0x1794 <prvWriteBytesToBuffer+0x74>
    1790:	82 1b       	sub	r24, r18
    1792:	93 0b       	sbc	r25, r19
    1794:	f6 01       	movw	r30, r12
    1796:	93 83       	std	Z+3, r25	; 0x03
    1798:	82 83       	std	Z+2, r24	; 0x02
    179a:	c7 01       	movw	r24, r14
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	08 95       	ret

000017b2 <prvWriteMessageToBuffer>:
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	1f 92       	push	r1
    17c4:	1f 92       	push	r1
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	7c 01       	movw	r14, r24
    17cc:	6b 01       	movw	r12, r22
    17ce:	5a 83       	std	Y+2, r21	; 0x02
    17d0:	49 83       	std	Y+1, r20	; 0x01
    17d2:	21 15       	cp	r18, r1
    17d4:	31 05       	cpc	r19, r1
    17d6:	c1 f0       	breq	.+48     	; 0x1808 <prvWriteMessageToBuffer+0x56>
    17d8:	fc 01       	movw	r30, r24
    17da:	86 85       	ldd	r24, Z+14	; 0x0e
    17dc:	80 fd       	sbrc	r24, 0
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <prvWriteMessageToBuffer+0x3e>
    17e0:	42 17       	cp	r20, r18
    17e2:	53 07       	cpc	r21, r19
    17e4:	08 f4       	brcc	.+2      	; 0x17e8 <prvWriteMessageToBuffer+0x36>
    17e6:	9a 01       	movw	r18, r20
    17e8:	3a 83       	std	Y+2, r19	; 0x02
    17ea:	29 83       	std	Y+1, r18	; 0x01
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0f c0       	rjmp	.+30     	; 0x180e <prvWriteMessageToBuffer+0x5c>
    17f0:	20 17       	cp	r18, r16
    17f2:	31 07       	cpc	r19, r17
    17f4:	58 f0       	brcs	.+22     	; 0x180c <prvWriteMessageToBuffer+0x5a>
    17f6:	42 e0       	ldi	r20, 0x02	; 2
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	be 01       	movw	r22, r28
    17fc:	6f 5f       	subi	r22, 0xFF	; 255
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	c7 01       	movw	r24, r14
    1802:	8e df       	rcall	.-228    	; 0x1720 <prvWriteBytesToBuffer>
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	03 c0       	rjmp	.+6      	; 0x180e <prvWriteMessageToBuffer+0x5c>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	01 c0       	rjmp	.+2      	; 0x180e <prvWriteMessageToBuffer+0x5c>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	88 23       	and	r24, r24
    1810:	31 f0       	breq	.+12     	; 0x181e <prvWriteMessageToBuffer+0x6c>
    1812:	49 81       	ldd	r20, Y+1	; 0x01
    1814:	5a 81       	ldd	r21, Y+2	; 0x02
    1816:	b6 01       	movw	r22, r12
    1818:	c7 01       	movw	r24, r14
    181a:	82 df       	rcall	.-252    	; 0x1720 <prvWriteBytesToBuffer>
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <prvWriteMessageToBuffer+0x70>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	08 95       	ret

00001838 <prvReadBytesFromBuffer>:
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	7c 01       	movw	r14, r24
    184e:	5b 01       	movw	r10, r22
    1850:	e9 01       	movw	r28, r18
    1852:	42 17       	cp	r20, r18
    1854:	53 07       	cpc	r21, r19
    1856:	08 f4       	brcc	.+2      	; 0x185a <prvReadBytesFromBuffer+0x22>
    1858:	ea 01       	movw	r28, r20
    185a:	20 97       	sbiw	r28, 0x00	; 0
    185c:	81 f1       	breq	.+96     	; 0x18be <prvReadBytesFromBuffer+0x86>
    185e:	f7 01       	movw	r30, r14
    1860:	00 81       	ld	r16, Z
    1862:	11 81       	ldd	r17, Z+1	; 0x01
    1864:	84 81       	ldd	r24, Z+4	; 0x04
    1866:	95 81       	ldd	r25, Z+5	; 0x05
    1868:	80 1b       	sub	r24, r16
    186a:	91 0b       	sbc	r25, r17
    186c:	6e 01       	movw	r12, r28
    186e:	8c 17       	cp	r24, r28
    1870:	9d 07       	cpc	r25, r29
    1872:	08 f4       	brcc	.+2      	; 0x1876 <prvReadBytesFromBuffer+0x3e>
    1874:	6c 01       	movw	r12, r24
    1876:	f7 01       	movw	r30, r14
    1878:	64 85       	ldd	r22, Z+12	; 0x0c
    187a:	75 85       	ldd	r23, Z+13	; 0x0d
    187c:	60 0f       	add	r22, r16
    187e:	71 1f       	adc	r23, r17
    1880:	a6 01       	movw	r20, r12
    1882:	c5 01       	movw	r24, r10
    1884:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <memcpy>
    1888:	cc 16       	cp	r12, r28
    188a:	dd 06       	cpc	r13, r29
    188c:	58 f4       	brcc	.+22     	; 0x18a4 <prvReadBytesFromBuffer+0x6c>
    188e:	ae 01       	movw	r20, r28
    1890:	4c 19       	sub	r20, r12
    1892:	5d 09       	sbc	r21, r13
    1894:	f7 01       	movw	r30, r14
    1896:	64 85       	ldd	r22, Z+12	; 0x0c
    1898:	75 85       	ldd	r23, Z+13	; 0x0d
    189a:	c5 01       	movw	r24, r10
    189c:	8c 0d       	add	r24, r12
    189e:	9d 1d       	adc	r25, r13
    18a0:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <memcpy>
    18a4:	0c 0f       	add	r16, r28
    18a6:	1d 1f       	adc	r17, r29
    18a8:	f7 01       	movw	r30, r14
    18aa:	84 81       	ldd	r24, Z+4	; 0x04
    18ac:	95 81       	ldd	r25, Z+5	; 0x05
    18ae:	08 17       	cp	r16, r24
    18b0:	19 07       	cpc	r17, r25
    18b2:	10 f0       	brcs	.+4      	; 0x18b8 <prvReadBytesFromBuffer+0x80>
    18b4:	08 1b       	sub	r16, r24
    18b6:	19 0b       	sbc	r17, r25
    18b8:	f7 01       	movw	r30, r14
    18ba:	11 83       	std	Z+1, r17	; 0x01
    18bc:	00 83       	st	Z, r16
    18be:	ce 01       	movw	r24, r28
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	08 95       	ret

000018d6 <prvReadMessageFromBuffer>:
    18d6:	6f 92       	push	r6
    18d8:	7f 92       	push	r7
    18da:	8f 92       	push	r8
    18dc:	9f 92       	push	r9
    18de:	af 92       	push	r10
    18e0:	bf 92       	push	r11
    18e2:	cf 92       	push	r12
    18e4:	df 92       	push	r13
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	1f 92       	push	r1
    18f4:	1f 92       	push	r1
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	6c 01       	movw	r12, r24
    18fc:	4b 01       	movw	r8, r22
    18fe:	5a 01       	movw	r10, r20
    1900:	79 01       	movw	r14, r18
    1902:	01 15       	cp	r16, r1
    1904:	11 05       	cpc	r17, r1
    1906:	b1 f0       	breq	.+44     	; 0x1934 <prvReadMessageFromBuffer+0x5e>
    1908:	fc 01       	movw	r30, r24
    190a:	60 80       	ld	r6, Z
    190c:	71 80       	ldd	r7, Z+1	; 0x01
    190e:	a8 01       	movw	r20, r16
    1910:	be 01       	movw	r22, r28
    1912:	6f 5f       	subi	r22, 0xFF	; 255
    1914:	7f 4f       	sbci	r23, 0xFF	; 255
    1916:	90 df       	rcall	.-224    	; 0x1838 <prvReadBytesFromBuffer>
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	e0 1a       	sub	r14, r16
    191e:	f1 0a       	sbc	r15, r17
    1920:	a8 16       	cp	r10, r24
    1922:	b9 06       	cpc	r11, r25
    1924:	30 f4       	brcc	.+12     	; 0x1932 <prvReadMessageFromBuffer+0x5c>
    1926:	f6 01       	movw	r30, r12
    1928:	71 82       	std	Z+1, r7	; 0x01
    192a:	60 82       	st	Z, r6
    192c:	a1 2c       	mov	r10, r1
    192e:	b1 2c       	mov	r11, r1
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <prvReadMessageFromBuffer+0x5e>
    1932:	5c 01       	movw	r10, r24
    1934:	97 01       	movw	r18, r14
    1936:	a5 01       	movw	r20, r10
    1938:	b4 01       	movw	r22, r8
    193a:	c6 01       	movw	r24, r12
    193c:	7d df       	rcall	.-262    	; 0x1838 <prvReadBytesFromBuffer>
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	bf 90       	pop	r11
    1954:	af 90       	pop	r10
    1956:	9f 90       	pop	r9
    1958:	8f 90       	pop	r8
    195a:	7f 90       	pop	r7
    195c:	6f 90       	pop	r6
    195e:	08 95       	ret

00001960 <xStreamBufferGenericCreate>:
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	ec 01       	movw	r28, r24
    1970:	6b 01       	movw	r12, r22
    1972:	41 30       	cpi	r20, 0x01	; 1
    1974:	11 f4       	brne	.+4      	; 0x197a <xStreamBufferGenericCreate+0x1a>
    1976:	01 e0       	ldi	r16, 0x01	; 1
    1978:	01 c0       	rjmp	.+2      	; 0x197c <xStreamBufferGenericCreate+0x1c>
    197a:	00 e0       	ldi	r16, 0x00	; 0
    197c:	c1 14       	cp	r12, r1
    197e:	d1 04       	cpc	r13, r1
    1980:	19 f4       	brne	.+6      	; 0x1988 <xStreamBufferGenericCreate+0x28>
    1982:	cc 24       	eor	r12, r12
    1984:	c3 94       	inc	r12
    1986:	d1 2c       	mov	r13, r1
    1988:	ce 01       	movw	r24, r28
    198a:	40 96       	adiw	r24, 0x10	; 16
    198c:	c8 17       	cp	r28, r24
    198e:	d9 07       	cpc	r29, r25
    1990:	20 f4       	brcc	.+8      	; 0x199a <xStreamBufferGenericCreate+0x3a>
    1992:	21 96       	adiw	r28, 0x01	; 1
    1994:	53 d9       	rcall	.-3418   	; 0xc3c <pvPortMalloc>
    1996:	7c 01       	movw	r14, r24
    1998:	02 c0       	rjmp	.+4      	; 0x199e <xStreamBufferGenericCreate+0x3e>
    199a:	e1 2c       	mov	r14, r1
    199c:	f1 2c       	mov	r15, r1
    199e:	e1 14       	cp	r14, r1
    19a0:	f1 04       	cpc	r15, r1
    19a2:	39 f0       	breq	.+14     	; 0x19b2 <xStreamBufferGenericCreate+0x52>
    19a4:	96 01       	movw	r18, r12
    19a6:	ae 01       	movw	r20, r28
    19a8:	b7 01       	movw	r22, r14
    19aa:	61 5f       	subi	r22, 0xF1	; 241
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	c7 01       	movw	r24, r14
    19b0:	a7 de       	rcall	.-690    	; 0x1700 <prvInitialiseNewStreamBuffer>
    19b2:	c7 01       	movw	r24, r14
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	cf 90       	pop	r12
    19c2:	08 95       	ret

000019c4 <xStreamBufferReset>:
    19c4:	0f 93       	push	r16
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	0f 92       	push	r0
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 85       	ldd	r18, Z+8	; 0x08
    19d0:	31 85       	ldd	r19, Z+9	; 0x09
    19d2:	23 2b       	or	r18, r19
    19d4:	71 f4       	brne	.+28     	; 0x19f2 <xStreamBufferReset+0x2e>
    19d6:	22 85       	ldd	r18, Z+10	; 0x0a
    19d8:	33 85       	ldd	r19, Z+11	; 0x0b
    19da:	23 2b       	or	r18, r19
    19dc:	61 f4       	brne	.+24     	; 0x19f6 <xStreamBufferReset+0x32>
    19de:	26 81       	ldd	r18, Z+6	; 0x06
    19e0:	37 81       	ldd	r19, Z+7	; 0x07
    19e2:	44 81       	ldd	r20, Z+4	; 0x04
    19e4:	55 81       	ldd	r21, Z+5	; 0x05
    19e6:	64 85       	ldd	r22, Z+12	; 0x0c
    19e8:	75 85       	ldd	r23, Z+13	; 0x0d
    19ea:	06 85       	ldd	r16, Z+14	; 0x0e
    19ec:	89 de       	rcall	.-750    	; 0x1700 <prvInitialiseNewStreamBuffer>
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <xStreamBufferReset+0x34>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <xStreamBufferReset+0x34>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <xStreamBufferSpacesAvailable>:
    1a00:	fc 01       	movw	r30, r24
    1a02:	24 81       	ldd	r18, Z+4	; 0x04
    1a04:	35 81       	ldd	r19, Z+5	; 0x05
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	82 0f       	add	r24, r18
    1a0c:	93 1f       	adc	r25, r19
    1a0e:	42 81       	ldd	r20, Z+2	; 0x02
    1a10:	53 81       	ldd	r21, Z+3	; 0x03
    1a12:	84 1b       	sub	r24, r20
    1a14:	95 0b       	sbc	r25, r21
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	82 17       	cp	r24, r18
    1a1a:	93 07       	cpc	r25, r19
    1a1c:	10 f0       	brcs	.+4      	; 0x1a22 <xStreamBufferSpacesAvailable+0x22>
    1a1e:	82 1b       	sub	r24, r18
    1a20:	93 0b       	sbc	r25, r19
    1a22:	08 95       	ret

00001a24 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1a24:	af 92       	push	r10
    1a26:	bf 92       	push	r11
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	ec 01       	movw	r28, r24
    1a3a:	7b 01       	movw	r14, r22
    1a3c:	5a 01       	movw	r10, r20
    1a3e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a42:	80 ff       	sbrs	r24, 0
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a46:	8a 01       	movw	r16, r20
    1a48:	0e 5f       	subi	r16, 0xFE	; 254
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1a4e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a50:	ce 01       	movw	r24, r28
    1a52:	d6 df       	rcall	.-84     	; 0x1a00 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a54:	9c 01       	movw	r18, r24
    1a56:	a5 01       	movw	r20, r10
    1a58:	b7 01       	movw	r22, r14
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	aa de       	rcall	.-684    	; 0x17b2 <prvWriteMessageToBuffer>
    1a5e:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1a60:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a62:	c1 f0       	breq	.+48     	; 0x1a94 <xStreamBufferSendFromISR+0x70>
    1a64:	ce 01       	movw	r24, r28
    1a66:	39 de       	rcall	.-910    	; 0x16da <prvBytesInBuffer>
    1a68:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6c:	82 17       	cp	r24, r18
    1a6e:	93 07       	cpc	r25, r19
    1a70:	88 f0       	brcs	.+34     	; 0x1a94 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1a72:	88 85       	ldd	r24, Y+8	; 0x08
    1a74:	99 85       	ldd	r25, Y+9	; 0x09
    1a76:	89 2b       	or	r24, r25
    1a78:	69 f0       	breq	.+26     	; 0x1a94 <xStreamBufferSendFromISR+0x70>
    1a7a:	88 85       	ldd	r24, Y+8	; 0x08
    1a7c:	99 85       	ldd	r25, Y+9	; 0x09
    1a7e:	e1 2c       	mov	r14, r1
    1a80:	f1 2c       	mov	r15, r1
    1a82:	00 e0       	ldi	r16, 0x00	; 0
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	0e 94 06 18 	call	0x300c	; 0x300c <xTaskGenericNotifyFromISR>
    1a90:	19 86       	std	Y+9, r1	; 0x09
    1a92:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1a94:	c5 01       	movw	r24, r10
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	ff 90       	pop	r15
    1aa0:	ef 90       	pop	r14
    1aa2:	df 90       	pop	r13
    1aa4:	cf 90       	pop	r12
    1aa6:	bf 90       	pop	r11
    1aa8:	af 90       	pop	r10
    1aaa:	08 95       	ret

00001aac <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1aac:	4f 92       	push	r4
    1aae:	5f 92       	push	r5
    1ab0:	6f 92       	push	r6
    1ab2:	7f 92       	push	r7
    1ab4:	8f 92       	push	r8
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ec 01       	movw	r28, r24
    1ace:	2b 01       	movw	r4, r22
    1ad0:	3a 01       	movw	r6, r20
    1ad2:	58 01       	movw	r10, r16
    1ad4:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ad6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ad8:	80 ff       	sbrs	r24, 0
    1ada:	05 c0       	rjmp	.+10     	; 0x1ae6 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1adc:	68 94       	set
    1ade:	88 24       	eor	r8, r8
    1ae0:	81 f8       	bld	r8, 1
    1ae2:	91 2c       	mov	r9, r1
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1ae6:	81 2c       	mov	r8, r1
    1ae8:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1aea:	a1 14       	cp	r10, r1
    1aec:	b1 04       	cpc	r11, r1
    1aee:	c1 04       	cpc	r12, r1
    1af0:	d1 04       	cpc	r13, r1
    1af2:	41 f1       	breq	.+80     	; 0x1b44 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1afa:	ce 01       	movw	r24, r28
    1afc:	ee dd       	rcall	.-1060   	; 0x16da <prvBytesInBuffer>
    1afe:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1b00:	88 16       	cp	r8, r24
    1b02:	99 06       	cpc	r9, r25
    1b04:	48 f0       	brcs	.+18     	; 0x1b18 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 28 19 	call	0x3250	; 0x3250 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1b10:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <xTaskGetCurrentTaskHandle>
    1b14:	99 87       	std	Y+9, r25	; 0x09
    1b16:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1b1c:	8e 14       	cp	r8, r14
    1b1e:	9f 04       	cpc	r9, r15
    1b20:	a0 f0       	brcs	.+40     	; 0x1b4a <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1b22:	e1 2c       	mov	r14, r1
    1b24:	f1 2c       	mov	r15, r1
    1b26:	00 e0       	ldi	r16, 0x00	; 0
    1b28:	10 e0       	ldi	r17, 0x00	; 0
    1b2a:	98 01       	movw	r18, r16
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	ba 01       	movw	r22, r20
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1b38:	19 86       	std	Y+9, r1	; 0x09
    1b3a:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	cd dd       	rcall	.-1126   	; 0x16da <prvBytesInBuffer>
    1b40:	7c 01       	movw	r14, r24
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b44:	ce 01       	movw	r24, r28
    1b46:	c9 dd       	rcall	.-1134   	; 0x16da <prvBytesInBuffer>
    1b48:	7c 01       	movw	r14, r24
    1b4a:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1b4c:	9f 04       	cpc	r9, r15
    1b4e:	e8 f4       	brcc	.+58     	; 0x1b8a <xStreamBufferReceive+0xde>
    1b50:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1b52:	97 01       	movw	r18, r14
    1b54:	a3 01       	movw	r20, r6
    1b56:	b2 01       	movw	r22, r4
    1b58:	ce 01       	movw	r24, r28
    1b5a:	bd de       	rcall	.-646    	; 0x18d6 <prvReadMessageFromBuffer>
    1b5c:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1b5e:	89 2b       	or	r24, r25
    1b60:	b1 f0       	breq	.+44     	; 0x1b8e <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1b62:	b6 d2       	rcall	.+1388   	; 0x20d0 <vTaskSuspendAll>
    1b64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b68:	89 2b       	or	r24, r25
    1b6a:	69 f0       	breq	.+26     	; 0x1b86 <xStreamBufferReceive+0xda>
    1b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b70:	e1 2c       	mov	r14, r1
    1b72:	f1 2c       	mov	r15, r1
    1b74:	00 e0       	ldi	r16, 0x00	; 0
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <xTaskGenericNotify>
    1b82:	1b 86       	std	Y+11, r1	; 0x0b
    1b84:	1a 86       	std	Y+10, r1	; 0x0a
    1b86:	e4 d3       	rcall	.+1992   	; 0x2350 <xTaskResumeAll>
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <xStreamBufferReceive+0xe2>
    1b8a:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1b8c:	d1 2c       	mov	r13, r1
    1b8e:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	bf 90       	pop	r11
    1ba2:	af 90       	pop	r10
    1ba4:	9f 90       	pop	r9
    1ba6:	8f 90       	pop	r8
    1ba8:	7f 90       	pop	r7
    1baa:	6f 90       	pop	r6
    1bac:	5f 90       	pop	r5
    1bae:	4f 90       	pop	r4
    1bb0:	08 95       	ret

00001bb2 <prvResetNextTaskUnblockTime>:
    1bb2:	e0 91 13 11 	lds	r30, 0x1113	; 0x801113 <pxDelayedTaskList>
    1bb6:	f0 91 14 11 	lds	r31, 0x1114	; 0x801114 <pxDelayedTaskList+0x1>
    1bba:	80 81       	ld	r24, Z
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	0c c0       	rjmp	.+24     	; 0x1bd8 <prvResetNextTaskUnblockTime+0x26>
    1bc0:	8f ef       	ldi	r24, 0xFF	; 255
    1bc2:	9f ef       	ldi	r25, 0xFF	; 255
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <xNextTaskUnblockTime>
    1bca:	90 93 de 10 	sts	0x10DE, r25	; 0x8010de <xNextTaskUnblockTime+0x1>
    1bce:	a0 93 df 10 	sts	0x10DF, r26	; 0x8010df <xNextTaskUnblockTime+0x2>
    1bd2:	b0 93 e0 10 	sts	0x10E0, r27	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    1bd6:	08 95       	ret
    1bd8:	e0 91 13 11 	lds	r30, 0x1113	; 0x801113 <pxDelayedTaskList>
    1bdc:	f0 91 14 11 	lds	r31, 0x1114	; 0x801114 <pxDelayedTaskList+0x1>
    1be0:	07 80       	ldd	r0, Z+7	; 0x07
    1be2:	f0 85       	ldd	r31, Z+8	; 0x08
    1be4:	e0 2d       	mov	r30, r0
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	a2 81       	ldd	r26, Z+2	; 0x02
    1bec:	b3 81       	ldd	r27, Z+3	; 0x03
    1bee:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <xNextTaskUnblockTime>
    1bf2:	90 93 de 10 	sts	0x10DE, r25	; 0x8010de <xNextTaskUnblockTime+0x1>
    1bf6:	a0 93 df 10 	sts	0x10DF, r26	; 0x8010df <xNextTaskUnblockTime+0x2>
    1bfa:	b0 93 e0 10 	sts	0x10E0, r27	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    1bfe:	08 95       	ret

00001c00 <prvDeleteTCB>:
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
    1c06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c0a:	c1 d8       	rcall	.-3710   	; 0xd8e <vPortFree>
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	bf d8       	rcall	.-3714   	; 0xd8e <vPortFree>
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <prvInitialiseNewTask>:
    1c16:	4f 92       	push	r4
    1c18:	5f 92       	push	r5
    1c1a:	6f 92       	push	r6
    1c1c:	7f 92       	push	r7
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	2c 01       	movw	r4, r24
    1c36:	5b 01       	movw	r10, r22
    1c38:	4a 01       	movw	r8, r20
    1c3a:	39 01       	movw	r6, r18
    1c3c:	e6 01       	movw	r28, r12
    1c3e:	65 ea       	ldi	r22, 0xA5	; 165
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c46:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <memset>
    1c4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4e:	21 e0       	ldi	r18, 0x01	; 1
    1c50:	82 1a       	sub	r8, r18
    1c52:	91 08       	sbc	r9, r1
    1c54:	88 0e       	add	r8, r24
    1c56:	99 1e       	adc	r9, r25
    1c58:	a1 14       	cp	r10, r1
    1c5a:	b1 04       	cpc	r11, r1
    1c5c:	89 f4       	brne	.+34     	; 0x1c80 <prvInitialiseNewTask+0x6a>
    1c5e:	15 c0       	rjmp	.+42     	; 0x1c8a <prvInitialiseNewTask+0x74>
    1c60:	82 2f       	mov	r24, r18
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	f5 01       	movw	r30, r10
    1c66:	e8 0f       	add	r30, r24
    1c68:	f9 1f       	adc	r31, r25
    1c6a:	30 81       	ld	r19, Z
    1c6c:	de 01       	movw	r26, r28
    1c6e:	a8 0f       	add	r26, r24
    1c70:	b9 1f       	adc	r27, r25
    1c72:	5d 96       	adiw	r26, 0x1d	; 29
    1c74:	3c 93       	st	X, r19
    1c76:	80 81       	ld	r24, Z
    1c78:	88 23       	and	r24, r24
    1c7a:	29 f0       	breq	.+10     	; 0x1c86 <prvInitialiseNewTask+0x70>
    1c7c:	2f 5f       	subi	r18, 0xFF	; 255
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <prvInitialiseNewTask+0x6c>
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	20 31       	cpi	r18, 0x10	; 16
    1c84:	68 f3       	brcs	.-38     	; 0x1c60 <prvInitialiseNewTask+0x4a>
    1c86:	1c a6       	std	Y+44, r1	; 0x2c
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <prvInitialiseNewTask+0x76>
    1c8a:	1d 8e       	std	Y+29, r1	; 0x1d
    1c8c:	0a 30       	cpi	r16, 0x0A	; 10
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <prvInitialiseNewTask+0x7c>
    1c90:	09 e0       	ldi	r16, 0x09	; 9
    1c92:	0a 8f       	std	Y+26, r16	; 0x1a
    1c94:	0d a7       	std	Y+45, r16	; 0x2d
    1c96:	1e a6       	std	Y+46, r1	; 0x2e
    1c98:	ce 01       	movw	r24, r28
    1c9a:	02 96       	adiw	r24, 0x02	; 2
    1c9c:	c6 d8       	rcall	.-3700   	; 0xe2a <vListInitialiseItem>
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	0e 96       	adiw	r24, 0x0e	; 14
    1ca2:	c3 d8       	rcall	.-3706   	; 0xe2a <vListInitialiseItem>
    1ca4:	db 87       	std	Y+11, r29	; 0x0b
    1ca6:	ca 87       	std	Y+10, r28	; 0x0a
    1ca8:	8a e0       	ldi	r24, 0x0A	; 10
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	80 1b       	sub	r24, r16
    1cb2:	91 09       	sbc	r25, r1
    1cb4:	a1 09       	sbc	r26, r1
    1cb6:	b1 09       	sbc	r27, r1
    1cb8:	8e 87       	std	Y+14, r24	; 0x0e
    1cba:	9f 87       	std	Y+15, r25	; 0x0f
    1cbc:	a8 8b       	std	Y+16, r26	; 0x10
    1cbe:	b9 8b       	std	Y+17, r27	; 0x11
    1cc0:	df 8b       	std	Y+23, r29	; 0x17
    1cc2:	ce 8b       	std	Y+22, r28	; 0x16
    1cc4:	84 e0       	ldi	r24, 0x04	; 4
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	bf 96       	adiw	r30, 0x2f	; 47
    1cca:	df 01       	movw	r26, r30
    1ccc:	1d 92       	st	X+, r1
    1cce:	8a 95       	dec	r24
    1cd0:	e9 f7       	brne	.-6      	; 0x1ccc <prvInitialiseNewTask+0xb6>
    1cd2:	1b aa       	std	Y+51, r1	; 0x33
    1cd4:	a3 01       	movw	r20, r6
    1cd6:	b2 01       	movw	r22, r4
    1cd8:	c4 01       	movw	r24, r8
    1cda:	1b d9       	rcall	.-3530   	; 0xf12 <pxPortInitialiseStack>
    1cdc:	99 83       	std	Y+1, r25	; 0x01
    1cde:	88 83       	st	Y, r24
    1ce0:	e1 14       	cp	r14, r1
    1ce2:	f1 04       	cpc	r15, r1
    1ce4:	19 f0       	breq	.+6      	; 0x1cec <prvInitialiseNewTask+0xd6>
    1ce6:	f7 01       	movw	r30, r14
    1ce8:	d1 83       	std	Z+1, r29	; 0x01
    1cea:	c0 83       	st	Z, r28
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	df 90       	pop	r13
    1cf8:	cf 90       	pop	r12
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	9f 90       	pop	r9
    1d00:	8f 90       	pop	r8
    1d02:	7f 90       	pop	r7
    1d04:	6f 90       	pop	r6
    1d06:	5f 90       	pop	r5
    1d08:	4f 90       	pop	r4
    1d0a:	08 95       	ret

00001d0c <prvInitialiseTaskLists>:
    1d0c:	cf 93       	push	r28
    1d0e:	c0 e0       	ldi	r28, 0x00	; 0
    1d10:	08 c0       	rjmp	.+16     	; 0x1d22 <prvInitialiseTaskLists+0x16>
    1d12:	2b e0       	ldi	r18, 0x0B	; 11
    1d14:	c2 9f       	mul	r28, r18
    1d16:	c0 01       	movw	r24, r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	85 5d       	subi	r24, 0xD5	; 213
    1d1c:	9e 4e       	sbci	r25, 0xEE	; 238
    1d1e:	74 d8       	rcall	.-3864   	; 0xe08 <vListInitialise>
    1d20:	cf 5f       	subi	r28, 0xFF	; 255
    1d22:	ca 30       	cpi	r28, 0x0A	; 10
    1d24:	b0 f3       	brcs	.-20     	; 0x1d12 <prvInitialiseTaskLists+0x6>
    1d26:	80 e2       	ldi	r24, 0x20	; 32
    1d28:	91 e1       	ldi	r25, 0x11	; 17
    1d2a:	6e d8       	rcall	.-3876   	; 0xe08 <vListInitialise>
    1d2c:	85 e1       	ldi	r24, 0x15	; 21
    1d2e:	91 e1       	ldi	r25, 0x11	; 17
    1d30:	6b d8       	rcall	.-3882   	; 0xe08 <vListInitialise>
    1d32:	86 e0       	ldi	r24, 0x06	; 6
    1d34:	91 e1       	ldi	r25, 0x11	; 17
    1d36:	68 d8       	rcall	.-3888   	; 0xe08 <vListInitialise>
    1d38:	8b ef       	ldi	r24, 0xFB	; 251
    1d3a:	90 e1       	ldi	r25, 0x10	; 16
    1d3c:	65 d8       	rcall	.-3894   	; 0xe08 <vListInitialise>
    1d3e:	8f ee       	ldi	r24, 0xEF	; 239
    1d40:	90 e1       	ldi	r25, 0x10	; 16
    1d42:	62 d8       	rcall	.-3900   	; 0xe08 <vListInitialise>
    1d44:	80 e2       	ldi	r24, 0x20	; 32
    1d46:	91 e1       	ldi	r25, 0x11	; 17
    1d48:	90 93 14 11 	sts	0x1114, r25	; 0x801114 <pxDelayedTaskList+0x1>
    1d4c:	80 93 13 11 	sts	0x1113, r24	; 0x801113 <pxDelayedTaskList>
    1d50:	85 e1       	ldi	r24, 0x15	; 21
    1d52:	91 e1       	ldi	r25, 0x11	; 17
    1d54:	90 93 12 11 	sts	0x1112, r25	; 0x801112 <pxOverflowDelayedTaskList+0x1>
    1d58:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <pxOverflowDelayedTaskList>
    1d5c:	cf 91       	pop	r28
    1d5e:	08 95       	ret

00001d60 <prvAddNewTaskToReadyList>:
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	ec 01       	movw	r28, r24
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	0f 92       	push	r0
    1d6c:	80 91 ee 10 	lds	r24, 0x10EE	; 0x8010ee <uxCurrentNumberOfTasks>
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	80 93 ee 10 	sts	0x10EE, r24	; 0x8010ee <uxCurrentNumberOfTasks>
    1d76:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    1d7a:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1d7e:	89 2b       	or	r24, r25
    1d80:	51 f4       	brne	.+20     	; 0x1d96 <prvAddNewTaskToReadyList+0x36>
    1d82:	d0 93 9a 11 	sts	0x119A, r29	; 0x80119a <pxCurrentTCB+0x1>
    1d86:	c0 93 99 11 	sts	0x1199, r28	; 0x801199 <pxCurrentTCB>
    1d8a:	80 91 ee 10 	lds	r24, 0x10EE	; 0x8010ee <uxCurrentNumberOfTasks>
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	91 f4       	brne	.+36     	; 0x1db6 <prvAddNewTaskToReadyList+0x56>
    1d92:	bc df       	rcall	.-136    	; 0x1d0c <prvInitialiseTaskLists>
    1d94:	10 c0       	rjmp	.+32     	; 0x1db6 <prvAddNewTaskToReadyList+0x56>
    1d96:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <xSchedulerRunning>
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	0c c0       	rjmp	.+24     	; 0x1db6 <prvAddNewTaskToReadyList+0x56>
    1d9e:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    1da2:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1da6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1da8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1daa:	89 17       	cp	r24, r25
    1dac:	20 f0       	brcs	.+8      	; 0x1db6 <prvAddNewTaskToReadyList+0x56>
    1dae:	d0 93 9a 11 	sts	0x119A, r29	; 0x80119a <pxCurrentTCB+0x1>
    1db2:	c0 93 99 11 	sts	0x1199, r28	; 0x801199 <pxCurrentTCB>
    1db6:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <uxTaskNumber>
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <uxTaskNumber>
    1dc0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1dc2:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    1dc6:	8e 17       	cp	r24, r30
    1dc8:	10 f4       	brcc	.+4      	; 0x1dce <prvAddNewTaskToReadyList+0x6e>
    1dca:	e0 93 e9 10 	sts	0x10E9, r30	; 0x8010e9 <uxTopReadyPriority>
    1dce:	8b e0       	ldi	r24, 0x0B	; 11
    1dd0:	8e 9f       	mul	r24, r30
    1dd2:	f0 01       	movw	r30, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	e5 5d       	subi	r30, 0xD5	; 213
    1dd8:	fe 4e       	sbci	r31, 0xEE	; 238
    1dda:	01 80       	ldd	r0, Z+1	; 0x01
    1ddc:	f2 81       	ldd	r31, Z+2	; 0x02
    1dde:	e0 2d       	mov	r30, r0
    1de0:	ff 83       	std	Y+7, r31	; 0x07
    1de2:	ee 83       	std	Y+6, r30	; 0x06
    1de4:	26 81       	ldd	r18, Z+6	; 0x06
    1de6:	37 81       	ldd	r19, Z+7	; 0x07
    1de8:	39 87       	std	Y+9, r19	; 0x09
    1dea:	28 87       	std	Y+8, r18	; 0x08
    1dec:	a6 81       	ldd	r26, Z+6	; 0x06
    1dee:	b7 81       	ldd	r27, Z+7	; 0x07
    1df0:	9e 01       	movw	r18, r28
    1df2:	2e 5f       	subi	r18, 0xFE	; 254
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	15 96       	adiw	r26, 0x05	; 5
    1df8:	3c 93       	st	X, r19
    1dfa:	2e 93       	st	-X, r18
    1dfc:	14 97       	sbiw	r26, 0x04	; 4
    1dfe:	37 83       	std	Z+7, r19	; 0x07
    1e00:	26 83       	std	Z+6, r18	; 0x06
    1e02:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e04:	8e 9f       	mul	r24, r30
    1e06:	f0 01       	movw	r30, r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	e5 5d       	subi	r30, 0xD5	; 213
    1e0c:	fe 4e       	sbci	r31, 0xEE	; 238
    1e0e:	fd 87       	std	Y+13, r31	; 0x0d
    1e10:	ec 87       	std	Y+12, r30	; 0x0c
    1e12:	80 81       	ld	r24, Z
    1e14:	8f 5f       	subi	r24, 0xFF	; 255
    1e16:	80 83       	st	Z, r24
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <xSchedulerRunning>
    1e20:	88 23       	and	r24, r24
    1e22:	49 f0       	breq	.+18     	; 0x1e36 <prvAddNewTaskToReadyList+0xd6>
    1e24:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    1e28:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1e2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e30:	98 17       	cp	r25, r24
    1e32:	08 f4       	brcc	.+2      	; 0x1e36 <prvAddNewTaskToReadyList+0xd6>
    1e34:	b7 d8       	rcall	.-3730   	; 0xfa4 <vPortYield>
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <prvCheckTasksWaitingTermination>:
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	1a c0       	rjmp	.+52     	; 0x1e76 <prvCheckTasksWaitingTermination+0x3a>
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	0f 92       	push	r0
    1e48:	e0 91 02 11 	lds	r30, 0x1102	; 0x801102 <xTasksWaitingTermination+0x7>
    1e4c:	f0 91 03 11 	lds	r31, 0x1103	; 0x801103 <xTasksWaitingTermination+0x8>
    1e50:	c0 85       	ldd	r28, Z+8	; 0x08
    1e52:	d1 85       	ldd	r29, Z+9	; 0x09
    1e54:	ce 01       	movw	r24, r28
    1e56:	02 96       	adiw	r24, 0x02	; 2
    1e58:	29 d8       	rcall	.-4014   	; 0xeac <uxListRemove>
    1e5a:	80 91 ee 10 	lds	r24, 0x10EE	; 0x8010ee <uxCurrentNumberOfTasks>
    1e5e:	81 50       	subi	r24, 0x01	; 1
    1e60:	80 93 ee 10 	sts	0x10EE, r24	; 0x8010ee <uxCurrentNumberOfTasks>
    1e64:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <uxDeletedTasksWaitingCleanUp>
    1e68:	81 50       	subi	r24, 0x01	; 1
    1e6a:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <uxDeletedTasksWaitingCleanUp>
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	ce 01       	movw	r24, r28
    1e74:	c5 de       	rcall	.-630    	; 0x1c00 <prvDeleteTCB>
    1e76:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <uxDeletedTasksWaitingCleanUp>
    1e7a:	81 11       	cpse	r24, r1
    1e7c:	e2 cf       	rjmp	.-60     	; 0x1e42 <prvCheckTasksWaitingTermination+0x6>
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <prvAddCurrentTaskToDelayedList>:
    1e84:	8f 92       	push	r8
    1e86:	9f 92       	push	r9
    1e88:	af 92       	push	r10
    1e8a:	bf 92       	push	r11
    1e8c:	cf 92       	push	r12
    1e8e:	df 92       	push	r13
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	6b 01       	movw	r12, r22
    1e9a:	7c 01       	movw	r14, r24
    1e9c:	c4 2f       	mov	r28, r20
    1e9e:	80 90 ea 10 	lds	r8, 0x10EA	; 0x8010ea <xTickCount>
    1ea2:	90 90 eb 10 	lds	r9, 0x10EB	; 0x8010eb <xTickCount+0x1>
    1ea6:	a0 90 ec 10 	lds	r10, 0x10EC	; 0x8010ec <xTickCount+0x2>
    1eaa:	b0 90 ed 10 	lds	r11, 0x10ED	; 0x8010ed <xTickCount+0x3>
    1eae:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    1eb2:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1eb6:	02 96       	adiw	r24, 0x02	; 2
    1eb8:	0e 94 56 07 	call	0xeac	; 0xeac <uxListRemove>
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	c8 16       	cp	r12, r24
    1ec0:	d8 06       	cpc	r13, r24
    1ec2:	e8 06       	cpc	r14, r24
    1ec4:	f8 06       	cpc	r15, r24
    1ec6:	b1 f5       	brne	.+108    	; 0x1f34 <prvAddCurrentTaskToDelayedList+0xb0>
    1ec8:	cc 23       	and	r28, r28
    1eca:	a1 f1       	breq	.+104    	; 0x1f34 <prvAddCurrentTaskToDelayedList+0xb0>
    1ecc:	ef ee       	ldi	r30, 0xEF	; 239
    1ece:	f0 e1       	ldi	r31, 0x10	; 16
    1ed0:	a1 81       	ldd	r26, Z+1	; 0x01
    1ed2:	b2 81       	ldd	r27, Z+2	; 0x02
    1ed4:	c0 91 99 11 	lds	r28, 0x1199	; 0x801199 <pxCurrentTCB>
    1ed8:	d0 91 9a 11 	lds	r29, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1edc:	bf 83       	std	Y+7, r27	; 0x07
    1ede:	ae 83       	std	Y+6, r26	; 0x06
    1ee0:	c0 91 99 11 	lds	r28, 0x1199	; 0x801199 <pxCurrentTCB>
    1ee4:	d0 91 9a 11 	lds	r29, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1ee8:	16 96       	adiw	r26, 0x06	; 6
    1eea:	8d 91       	ld	r24, X+
    1eec:	9c 91       	ld	r25, X
    1eee:	17 97       	sbiw	r26, 0x07	; 7
    1ef0:	99 87       	std	Y+9, r25	; 0x09
    1ef2:	88 87       	std	Y+8, r24	; 0x08
    1ef4:	16 96       	adiw	r26, 0x06	; 6
    1ef6:	cd 91       	ld	r28, X+
    1ef8:	dc 91       	ld	r29, X
    1efa:	17 97       	sbiw	r26, 0x07	; 7
    1efc:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    1f00:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1f04:	02 96       	adiw	r24, 0x02	; 2
    1f06:	9d 83       	std	Y+5, r25	; 0x05
    1f08:	8c 83       	std	Y+4, r24	; 0x04
    1f0a:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    1f0e:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1f12:	02 96       	adiw	r24, 0x02	; 2
    1f14:	17 96       	adiw	r26, 0x07	; 7
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
    1f1a:	16 97       	sbiw	r26, 0x06	; 6
    1f1c:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    1f20:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1f24:	1d 96       	adiw	r26, 0x0d	; 13
    1f26:	fc 93       	st	X, r31
    1f28:	ee 93       	st	-X, r30
    1f2a:	1c 97       	sbiw	r26, 0x0c	; 12
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	80 83       	st	Z, r24
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <prvAddCurrentTaskToDelayedList+0x12e>
    1f34:	c8 0c       	add	r12, r8
    1f36:	d9 1c       	adc	r13, r9
    1f38:	ea 1c       	adc	r14, r10
    1f3a:	fb 1c       	adc	r15, r11
    1f3c:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    1f40:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1f44:	c2 82       	std	Z+2, r12	; 0x02
    1f46:	d3 82       	std	Z+3, r13	; 0x03
    1f48:	e4 82       	std	Z+4, r14	; 0x04
    1f4a:	f5 82       	std	Z+5, r15	; 0x05
    1f4c:	c8 14       	cp	r12, r8
    1f4e:	d9 04       	cpc	r13, r9
    1f50:	ea 04       	cpc	r14, r10
    1f52:	fb 04       	cpc	r15, r11
    1f54:	68 f4       	brcc	.+26     	; 0x1f70 <prvAddCurrentTaskToDelayedList+0xec>
    1f56:	60 91 99 11 	lds	r22, 0x1199	; 0x801199 <pxCurrentTCB>
    1f5a:	70 91 9a 11 	lds	r23, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1f5e:	80 91 11 11 	lds	r24, 0x1111	; 0x801111 <pxOverflowDelayedTaskList>
    1f62:	90 91 12 11 	lds	r25, 0x1112	; 0x801112 <pxOverflowDelayedTaskList+0x1>
    1f66:	6e 5f       	subi	r22, 0xFE	; 254
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6a:	0e 94 19 07 	call	0xe32	; 0xe32 <vListInsert>
    1f6e:	21 c0       	rjmp	.+66     	; 0x1fb2 <prvAddCurrentTaskToDelayedList+0x12e>
    1f70:	60 91 99 11 	lds	r22, 0x1199	; 0x801199 <pxCurrentTCB>
    1f74:	70 91 9a 11 	lds	r23, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    1f78:	80 91 13 11 	lds	r24, 0x1113	; 0x801113 <pxDelayedTaskList>
    1f7c:	90 91 14 11 	lds	r25, 0x1114	; 0x801114 <pxDelayedTaskList+0x1>
    1f80:	6e 5f       	subi	r22, 0xFE	; 254
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	0e 94 19 07 	call	0xe32	; 0xe32 <vListInsert>
    1f88:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <xNextTaskUnblockTime>
    1f8c:	90 91 de 10 	lds	r25, 0x10DE	; 0x8010de <xNextTaskUnblockTime+0x1>
    1f90:	a0 91 df 10 	lds	r26, 0x10DF	; 0x8010df <xNextTaskUnblockTime+0x2>
    1f94:	b0 91 e0 10 	lds	r27, 0x10E0	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    1f98:	c8 16       	cp	r12, r24
    1f9a:	d9 06       	cpc	r13, r25
    1f9c:	ea 06       	cpc	r14, r26
    1f9e:	fb 06       	cpc	r15, r27
    1fa0:	40 f4       	brcc	.+16     	; 0x1fb2 <prvAddCurrentTaskToDelayedList+0x12e>
    1fa2:	c0 92 dd 10 	sts	0x10DD, r12	; 0x8010dd <xNextTaskUnblockTime>
    1fa6:	d0 92 de 10 	sts	0x10DE, r13	; 0x8010de <xNextTaskUnblockTime+0x1>
    1faa:	e0 92 df 10 	sts	0x10DF, r14	; 0x8010df <xNextTaskUnblockTime+0x2>
    1fae:	f0 92 e0 10 	sts	0x10E0, r15	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	08 95       	ret

00001fc8 <xTaskCreate>:
    1fc8:	2f 92       	push	r2
    1fca:	3f 92       	push	r3
    1fcc:	4f 92       	push	r4
    1fce:	5f 92       	push	r5
    1fd0:	6f 92       	push	r6
    1fd2:	7f 92       	push	r7
    1fd4:	8f 92       	push	r8
    1fd6:	9f 92       	push	r9
    1fd8:	af 92       	push	r10
    1fda:	bf 92       	push	r11
    1fdc:	cf 92       	push	r12
    1fde:	df 92       	push	r13
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	0f 93       	push	r16
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	3c 01       	movw	r6, r24
    1fec:	1b 01       	movw	r2, r22
    1fee:	4a 01       	movw	r8, r20
    1ff0:	29 01       	movw	r4, r18
    1ff2:	ca 01       	movw	r24, r20
    1ff4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <pvPortMalloc>
    1ff8:	6c 01       	movw	r12, r24
    1ffa:	89 2b       	or	r24, r25
    1ffc:	71 f0       	breq	.+28     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1ffe:	84 e3       	ldi	r24, 0x34	; 52
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 1e 06 	call	0xc3c	; 0xc3c <pvPortMalloc>
    2006:	ec 01       	movw	r28, r24
    2008:	89 2b       	or	r24, r25
    200a:	19 f0       	breq	.+6      	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    200c:	dc 8e       	std	Y+28, r13	; 0x1c
    200e:	cb 8e       	std	Y+27, r12	; 0x1b
    2010:	06 c0       	rjmp	.+12     	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    2012:	c6 01       	movw	r24, r12
    2014:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vPortFree>
    2018:	02 c0       	rjmp	.+4      	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    201a:	c0 e0       	ldi	r28, 0x00	; 0
    201c:	d0 e0       	ldi	r29, 0x00	; 0
    201e:	20 97       	sbiw	r28, 0x00	; 0
    2020:	61 f0       	breq	.+24     	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    2022:	a1 2c       	mov	r10, r1
    2024:	b1 2c       	mov	r11, r1
    2026:	6e 01       	movw	r12, r28
    2028:	92 01       	movw	r18, r4
    202a:	a4 01       	movw	r20, r8
    202c:	b1 01       	movw	r22, r2
    202e:	c3 01       	movw	r24, r6
    2030:	f2 dd       	rcall	.-1052   	; 0x1c16 <prvInitialiseNewTask>
    2032:	ce 01       	movw	r24, r28
    2034:	95 de       	rcall	.-726    	; 0x1d60 <prvAddNewTaskToReadyList>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	01 c0       	rjmp	.+2      	; 0x203c <__DATA_REGION_LENGTH__+0x3c>
    203a:	8f ef       	ldi	r24, 0xFF	; 255
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	cf 90       	pop	r12
    204a:	bf 90       	pop	r11
    204c:	af 90       	pop	r10
    204e:	9f 90       	pop	r9
    2050:	8f 90       	pop	r8
    2052:	7f 90       	pop	r7
    2054:	6f 90       	pop	r6
    2056:	5f 90       	pop	r5
    2058:	4f 90       	pop	r4
    205a:	3f 90       	pop	r3
    205c:	2f 90       	pop	r2
    205e:	08 95       	ret

00002060 <vTaskStartScheduler>:
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	0f 93       	push	r16
    2066:	0f 2e       	mov	r0, r31
    2068:	fb ed       	ldi	r31, 0xDB	; 219
    206a:	ef 2e       	mov	r14, r31
    206c:	f0 e1       	ldi	r31, 0x10	; 16
    206e:	ff 2e       	mov	r15, r31
    2070:	f0 2d       	mov	r31, r0
    2072:	00 e0       	ldi	r16, 0x00	; 0
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 ec       	ldi	r20, 0xC0	; 192
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	6d e2       	ldi	r22, 0x2D	; 45
    207e:	74 e0       	ldi	r23, 0x04	; 4
    2080:	8e e4       	ldi	r24, 0x4E	; 78
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	a1 df       	rcall	.-190    	; 0x1fc8 <xTaskCreate>
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	11 f4       	brne	.+4      	; 0x208e <vTaskStartScheduler+0x2e>
    208a:	0e 94 cc 19 	call	0x3398	; 0x3398 <xTimerCreateTimerTask>
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	c9 f4       	brne	.+50     	; 0x20c4 <vTaskStartScheduler+0x64>
    2092:	f8 94       	cli
    2094:	8f ef       	ldi	r24, 0xFF	; 255
    2096:	9f ef       	ldi	r25, 0xFF	; 255
    2098:	dc 01       	movw	r26, r24
    209a:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <xNextTaskUnblockTime>
    209e:	90 93 de 10 	sts	0x10DE, r25	; 0x8010de <xNextTaskUnblockTime+0x1>
    20a2:	a0 93 df 10 	sts	0x10DF, r26	; 0x8010df <xNextTaskUnblockTime+0x2>
    20a6:	b0 93 e0 10 	sts	0x10E0, r27	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 93 e8 10 	sts	0x10E8, r24	; 0x8010e8 <xSchedulerRunning>
    20b0:	10 92 ea 10 	sts	0x10EA, r1	; 0x8010ea <xTickCount>
    20b4:	10 92 eb 10 	sts	0x10EB, r1	; 0x8010eb <xTickCount+0x1>
    20b8:	10 92 ec 10 	sts	0x10EC, r1	; 0x8010ec <xTickCount+0x2>
    20bc:	10 92 ed 10 	sts	0x10ED, r1	; 0x8010ed <xTickCount+0x3>
    20c0:	0e 94 a0 07 	call	0xf40	; 0xf40 <xPortStartScheduler>
    20c4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	08 95       	ret

000020d0 <vTaskSuspendAll>:
    20d0:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    20d4:	8f 5f       	subi	r24, 0xFF	; 255
    20d6:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <uxSchedulerSuspended>
    20da:	08 95       	ret

000020dc <xTaskGetTickCount>:
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	0f 92       	push	r0
    20e2:	60 91 ea 10 	lds	r22, 0x10EA	; 0x8010ea <xTickCount>
    20e6:	70 91 eb 10 	lds	r23, 0x10EB	; 0x8010eb <xTickCount+0x1>
    20ea:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <xTickCount+0x2>
    20ee:	90 91 ed 10 	lds	r25, 0x10ED	; 0x8010ed <xTickCount+0x3>
    20f2:	0f 90       	pop	r0
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	08 95       	ret

000020f8 <xTaskIncrementTick>:
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    2108:	81 11       	cpse	r24, r1
    210a:	05 c1       	rjmp	.+522    	; 0x2316 <__stack+0x117>
    210c:	c0 90 ea 10 	lds	r12, 0x10EA	; 0x8010ea <xTickCount>
    2110:	d0 90 eb 10 	lds	r13, 0x10EB	; 0x8010eb <xTickCount+0x1>
    2114:	e0 90 ec 10 	lds	r14, 0x10EC	; 0x8010ec <xTickCount+0x2>
    2118:	f0 90 ed 10 	lds	r15, 0x10ED	; 0x8010ed <xTickCount+0x3>
    211c:	8f ef       	ldi	r24, 0xFF	; 255
    211e:	c8 1a       	sub	r12, r24
    2120:	d8 0a       	sbc	r13, r24
    2122:	e8 0a       	sbc	r14, r24
    2124:	f8 0a       	sbc	r15, r24
    2126:	c0 92 ea 10 	sts	0x10EA, r12	; 0x8010ea <xTickCount>
    212a:	d0 92 eb 10 	sts	0x10EB, r13	; 0x8010eb <xTickCount+0x1>
    212e:	e0 92 ec 10 	sts	0x10EC, r14	; 0x8010ec <xTickCount+0x2>
    2132:	f0 92 ed 10 	sts	0x10ED, r15	; 0x8010ed <xTickCount+0x3>
    2136:	c1 14       	cp	r12, r1
    2138:	d1 04       	cpc	r13, r1
    213a:	e1 04       	cpc	r14, r1
    213c:	f1 04       	cpc	r15, r1
    213e:	b1 f4       	brne	.+44     	; 0x216c <xTaskIncrementTick+0x74>
    2140:	80 91 13 11 	lds	r24, 0x1113	; 0x801113 <pxDelayedTaskList>
    2144:	90 91 14 11 	lds	r25, 0x1114	; 0x801114 <pxDelayedTaskList+0x1>
    2148:	20 91 11 11 	lds	r18, 0x1111	; 0x801111 <pxOverflowDelayedTaskList>
    214c:	30 91 12 11 	lds	r19, 0x1112	; 0x801112 <pxOverflowDelayedTaskList+0x1>
    2150:	30 93 14 11 	sts	0x1114, r19	; 0x801114 <pxDelayedTaskList+0x1>
    2154:	20 93 13 11 	sts	0x1113, r18	; 0x801113 <pxDelayedTaskList>
    2158:	90 93 12 11 	sts	0x1112, r25	; 0x801112 <pxOverflowDelayedTaskList+0x1>
    215c:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <pxOverflowDelayedTaskList>
    2160:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <xNumOfOverflows>
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	80 93 e2 10 	sts	0x10E2, r24	; 0x8010e2 <xNumOfOverflows>
    216a:	23 dd       	rcall	.-1466   	; 0x1bb2 <prvResetNextTaskUnblockTime>
    216c:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <xNextTaskUnblockTime>
    2170:	90 91 de 10 	lds	r25, 0x10DE	; 0x8010de <xNextTaskUnblockTime+0x1>
    2174:	a0 91 df 10 	lds	r26, 0x10DF	; 0x8010df <xNextTaskUnblockTime+0x2>
    2178:	b0 91 e0 10 	lds	r27, 0x10E0	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    217c:	c8 16       	cp	r12, r24
    217e:	d9 06       	cpc	r13, r25
    2180:	ea 06       	cpc	r14, r26
    2182:	fb 06       	cpc	r15, r27
    2184:	20 f4       	brcc	.+8      	; 0x218e <xTaskIncrementTick+0x96>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	b2 c0       	rjmp	.+356    	; 0x22ee <__stack+0xef>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <xTaskIncrementTick+0x98>
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	e0 91 13 11 	lds	r30, 0x1113	; 0x801113 <pxDelayedTaskList>
    2194:	f0 91 14 11 	lds	r31, 0x1114	; 0x801114 <pxDelayedTaskList+0x1>
    2198:	90 81       	ld	r25, Z
    219a:	91 11       	cpse	r25, r1
    219c:	0c c0       	rjmp	.+24     	; 0x21b6 <xTaskIncrementTick+0xbe>
    219e:	4f ef       	ldi	r20, 0xFF	; 255
    21a0:	5f ef       	ldi	r21, 0xFF	; 255
    21a2:	ba 01       	movw	r22, r20
    21a4:	40 93 dd 10 	sts	0x10DD, r20	; 0x8010dd <xNextTaskUnblockTime>
    21a8:	50 93 de 10 	sts	0x10DE, r21	; 0x8010de <xNextTaskUnblockTime+0x1>
    21ac:	60 93 df 10 	sts	0x10DF, r22	; 0x8010df <xNextTaskUnblockTime+0x2>
    21b0:	70 93 e0 10 	sts	0x10E0, r23	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    21b4:	9c c0       	rjmp	.+312    	; 0x22ee <__stack+0xef>
    21b6:	e0 91 13 11 	lds	r30, 0x1113	; 0x801113 <pxDelayedTaskList>
    21ba:	f0 91 14 11 	lds	r31, 0x1114	; 0x801114 <pxDelayedTaskList+0x1>
    21be:	07 80       	ldd	r0, Z+7	; 0x07
    21c0:	f0 85       	ldd	r31, Z+8	; 0x08
    21c2:	e0 2d       	mov	r30, r0
    21c4:	00 84       	ldd	r0, Z+8	; 0x08
    21c6:	f1 85       	ldd	r31, Z+9	; 0x09
    21c8:	e0 2d       	mov	r30, r0
    21ca:	42 81       	ldd	r20, Z+2	; 0x02
    21cc:	53 81       	ldd	r21, Z+3	; 0x03
    21ce:	64 81       	ldd	r22, Z+4	; 0x04
    21d0:	75 81       	ldd	r23, Z+5	; 0x05
    21d2:	c4 16       	cp	r12, r20
    21d4:	d5 06       	cpc	r13, r21
    21d6:	e6 06       	cpc	r14, r22
    21d8:	f7 06       	cpc	r15, r23
    21da:	48 f4       	brcc	.+18     	; 0x21ee <xTaskIncrementTick+0xf6>
    21dc:	40 93 dd 10 	sts	0x10DD, r20	; 0x8010dd <xNextTaskUnblockTime>
    21e0:	50 93 de 10 	sts	0x10DE, r21	; 0x8010de <xNextTaskUnblockTime+0x1>
    21e4:	60 93 df 10 	sts	0x10DF, r22	; 0x8010df <xNextTaskUnblockTime+0x2>
    21e8:	70 93 e0 10 	sts	0x10E0, r23	; 0x8010e0 <xNextTaskUnblockTime+0x3>
    21ec:	80 c0       	rjmp	.+256    	; 0x22ee <__stack+0xef>
    21ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    21f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    21f2:	c6 81       	ldd	r28, Z+6	; 0x06
    21f4:	d7 81       	ldd	r29, Z+7	; 0x07
    21f6:	20 85       	ldd	r18, Z+8	; 0x08
    21f8:	31 85       	ldd	r19, Z+9	; 0x09
    21fa:	3f 83       	std	Y+7, r19	; 0x07
    21fc:	2e 83       	std	Y+6, r18	; 0x06
    21fe:	c0 85       	ldd	r28, Z+8	; 0x08
    2200:	d1 85       	ldd	r29, Z+9	; 0x09
    2202:	26 81       	ldd	r18, Z+6	; 0x06
    2204:	37 81       	ldd	r19, Z+7	; 0x07
    2206:	3d 83       	std	Y+5, r19	; 0x05
    2208:	2c 83       	std	Y+4, r18	; 0x04
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	4d 91       	ld	r20, X+
    220e:	5c 91       	ld	r21, X
    2210:	12 97       	sbiw	r26, 0x02	; 2
    2212:	9f 01       	movw	r18, r30
    2214:	2e 5f       	subi	r18, 0xFE	; 254
    2216:	3f 4f       	sbci	r19, 0xFF	; 255
    2218:	42 17       	cp	r20, r18
    221a:	53 07       	cpc	r21, r19
    221c:	31 f4       	brne	.+12     	; 0x222a <__stack+0x2b>
    221e:	40 85       	ldd	r20, Z+8	; 0x08
    2220:	51 85       	ldd	r21, Z+9	; 0x09
    2222:	12 96       	adiw	r26, 0x02	; 2
    2224:	5c 93       	st	X, r21
    2226:	4e 93       	st	-X, r20
    2228:	11 97       	sbiw	r26, 0x01	; 1
    222a:	15 86       	std	Z+13, r1	; 0x0d
    222c:	14 86       	std	Z+12, r1	; 0x0c
    222e:	9c 91       	ld	r25, X
    2230:	91 50       	subi	r25, 0x01	; 1
    2232:	9c 93       	st	X, r25
    2234:	a0 8d       	ldd	r26, Z+24	; 0x18
    2236:	b1 8d       	ldd	r27, Z+25	; 0x19
    2238:	10 97       	sbiw	r26, 0x00	; 0
    223a:	09 f1       	breq	.+66     	; 0x227e <__stack+0x7f>
    223c:	c2 89       	ldd	r28, Z+18	; 0x12
    223e:	d3 89       	ldd	r29, Z+19	; 0x13
    2240:	44 89       	ldd	r20, Z+20	; 0x14
    2242:	55 89       	ldd	r21, Z+21	; 0x15
    2244:	5f 83       	std	Y+7, r21	; 0x07
    2246:	4e 83       	std	Y+6, r20	; 0x06
    2248:	c4 89       	ldd	r28, Z+20	; 0x14
    224a:	d5 89       	ldd	r29, Z+21	; 0x15
    224c:	42 89       	ldd	r20, Z+18	; 0x12
    224e:	53 89       	ldd	r21, Z+19	; 0x13
    2250:	5d 83       	std	Y+5, r21	; 0x05
    2252:	4c 83       	std	Y+4, r20	; 0x04
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	6d 91       	ld	r22, X+
    2258:	7c 91       	ld	r23, X
    225a:	12 97       	sbiw	r26, 0x02	; 2
    225c:	af 01       	movw	r20, r30
    225e:	42 5f       	subi	r20, 0xF2	; 242
    2260:	5f 4f       	sbci	r21, 0xFF	; 255
    2262:	64 17       	cp	r22, r20
    2264:	75 07       	cpc	r23, r21
    2266:	31 f4       	brne	.+12     	; 0x2274 <__stack+0x75>
    2268:	44 89       	ldd	r20, Z+20	; 0x14
    226a:	55 89       	ldd	r21, Z+21	; 0x15
    226c:	12 96       	adiw	r26, 0x02	; 2
    226e:	5c 93       	st	X, r21
    2270:	4e 93       	st	-X, r20
    2272:	11 97       	sbiw	r26, 0x01	; 1
    2274:	11 8e       	std	Z+25, r1	; 0x19
    2276:	10 8e       	std	Z+24, r1	; 0x18
    2278:	9c 91       	ld	r25, X
    227a:	91 50       	subi	r25, 0x01	; 1
    227c:	9c 93       	st	X, r25
    227e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2280:	90 91 e9 10 	lds	r25, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    2284:	9a 17       	cp	r25, r26
    2286:	10 f4       	brcc	.+4      	; 0x228c <__stack+0x8d>
    2288:	a0 93 e9 10 	sts	0x10E9, r26	; 0x8010e9 <uxTopReadyPriority>
    228c:	9b e0       	ldi	r25, 0x0B	; 11
    228e:	9a 9f       	mul	r25, r26
    2290:	d0 01       	movw	r26, r0
    2292:	11 24       	eor	r1, r1
    2294:	a5 5d       	subi	r26, 0xD5	; 213
    2296:	be 4e       	sbci	r27, 0xEE	; 238
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	0d 90       	ld	r0, X+
    229c:	bc 91       	ld	r27, X
    229e:	a0 2d       	mov	r26, r0
    22a0:	b7 83       	std	Z+7, r27	; 0x07
    22a2:	a6 83       	std	Z+6, r26	; 0x06
    22a4:	16 96       	adiw	r26, 0x06	; 6
    22a6:	4d 91       	ld	r20, X+
    22a8:	5c 91       	ld	r21, X
    22aa:	17 97       	sbiw	r26, 0x07	; 7
    22ac:	51 87       	std	Z+9, r21	; 0x09
    22ae:	40 87       	std	Z+8, r20	; 0x08
    22b0:	16 96       	adiw	r26, 0x06	; 6
    22b2:	cd 91       	ld	r28, X+
    22b4:	dc 91       	ld	r29, X
    22b6:	17 97       	sbiw	r26, 0x07	; 7
    22b8:	3d 83       	std	Y+5, r19	; 0x05
    22ba:	2c 83       	std	Y+4, r18	; 0x04
    22bc:	17 96       	adiw	r26, 0x07	; 7
    22be:	3c 93       	st	X, r19
    22c0:	2e 93       	st	-X, r18
    22c2:	16 97       	sbiw	r26, 0x06	; 6
    22c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22c6:	9a 9f       	mul	r25, r26
    22c8:	d0 01       	movw	r26, r0
    22ca:	11 24       	eor	r1, r1
    22cc:	a5 5d       	subi	r26, 0xD5	; 213
    22ce:	be 4e       	sbci	r27, 0xEE	; 238
    22d0:	b5 87       	std	Z+13, r27	; 0x0d
    22d2:	a4 87       	std	Z+12, r26	; 0x0c
    22d4:	9c 91       	ld	r25, X
    22d6:	9f 5f       	subi	r25, 0xFF	; 255
    22d8:	9c 93       	st	X, r25
    22da:	22 8d       	ldd	r18, Z+26	; 0x1a
    22dc:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    22e0:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    22e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    22e6:	29 17       	cp	r18, r25
    22e8:	08 f0       	brcs	.+2      	; 0x22ec <__stack+0xed>
    22ea:	4f cf       	rjmp	.-354    	; 0x218a <xTaskIncrementTick+0x92>
    22ec:	51 cf       	rjmp	.-350    	; 0x2190 <xTaskIncrementTick+0x98>
    22ee:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    22f2:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    22f6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    22f8:	9b e0       	ldi	r25, 0x0B	; 11
    22fa:	e9 9f       	mul	r30, r25
    22fc:	f0 01       	movw	r30, r0
    22fe:	11 24       	eor	r1, r1
    2300:	e5 5d       	subi	r30, 0xD5	; 213
    2302:	fe 4e       	sbci	r31, 0xEE	; 238
    2304:	90 81       	ld	r25, Z
    2306:	92 30       	cpi	r25, 0x02	; 2
    2308:	08 f0       	brcs	.+2      	; 0x230c <__stack+0x10d>
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 91 e3 10 	lds	r25, 0x10E3	; 0x8010e3 <xYieldPending>
    2310:	91 11       	cpse	r25, r1
    2312:	16 c0       	rjmp	.+44     	; 0x2340 <__stack+0x141>
    2314:	16 c0       	rjmp	.+44     	; 0x2342 <__stack+0x143>
    2316:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <xPendedTicks>
    231a:	90 91 e5 10 	lds	r25, 0x10E5	; 0x8010e5 <xPendedTicks+0x1>
    231e:	a0 91 e6 10 	lds	r26, 0x10E6	; 0x8010e6 <xPendedTicks+0x2>
    2322:	b0 91 e7 10 	lds	r27, 0x10E7	; 0x8010e7 <xPendedTicks+0x3>
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	a1 1d       	adc	r26, r1
    232a:	b1 1d       	adc	r27, r1
    232c:	80 93 e4 10 	sts	0x10E4, r24	; 0x8010e4 <xPendedTicks>
    2330:	90 93 e5 10 	sts	0x10E5, r25	; 0x8010e5 <xPendedTicks+0x1>
    2334:	a0 93 e6 10 	sts	0x10E6, r26	; 0x8010e6 <xPendedTicks+0x2>
    2338:	b0 93 e7 10 	sts	0x10E7, r27	; 0x8010e7 <xPendedTicks+0x3>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	01 c0       	rjmp	.+2      	; 0x2342 <__stack+0x143>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	08 95       	ret

00002350 <xTaskResumeAll>:
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	0f 92       	push	r0
    2362:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    2366:	81 50       	subi	r24, 0x01	; 1
    2368:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <uxSchedulerSuspended>
    236c:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    2370:	81 11       	cpse	r24, r1
    2372:	be c0       	rjmp	.+380    	; 0x24f0 <xTaskResumeAll+0x1a0>
    2374:	80 91 ee 10 	lds	r24, 0x10EE	; 0x8010ee <uxCurrentNumberOfTasks>
    2378:	81 11       	cpse	r24, r1
    237a:	88 c0       	rjmp	.+272    	; 0x248c <xTaskResumeAll+0x13c>
    237c:	bc c0       	rjmp	.+376    	; 0x24f6 <xTaskResumeAll+0x1a6>
    237e:	e0 91 0d 11 	lds	r30, 0x110D	; 0x80110d <xPendingReadyList+0x7>
    2382:	f0 91 0e 11 	lds	r31, 0x110E	; 0x80110e <xPendingReadyList+0x8>
    2386:	00 84       	ldd	r0, Z+8	; 0x08
    2388:	f1 85       	ldd	r31, Z+9	; 0x09
    238a:	e0 2d       	mov	r30, r0
    238c:	a0 8d       	ldd	r26, Z+24	; 0x18
    238e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2390:	c2 89       	ldd	r28, Z+18	; 0x12
    2392:	d3 89       	ldd	r29, Z+19	; 0x13
    2394:	84 89       	ldd	r24, Z+20	; 0x14
    2396:	95 89       	ldd	r25, Z+21	; 0x15
    2398:	9f 83       	std	Y+7, r25	; 0x07
    239a:	8e 83       	std	Y+6, r24	; 0x06
    239c:	c4 89       	ldd	r28, Z+20	; 0x14
    239e:	d5 89       	ldd	r29, Z+21	; 0x15
    23a0:	82 89       	ldd	r24, Z+18	; 0x12
    23a2:	93 89       	ldd	r25, Z+19	; 0x13
    23a4:	9d 83       	std	Y+5, r25	; 0x05
    23a6:	8c 83       	std	Y+4, r24	; 0x04
    23a8:	11 96       	adiw	r26, 0x01	; 1
    23aa:	2d 91       	ld	r18, X+
    23ac:	3c 91       	ld	r19, X
    23ae:	12 97       	sbiw	r26, 0x02	; 2
    23b0:	cf 01       	movw	r24, r30
    23b2:	0e 96       	adiw	r24, 0x0e	; 14
    23b4:	28 17       	cp	r18, r24
    23b6:	39 07       	cpc	r19, r25
    23b8:	31 f4       	brne	.+12     	; 0x23c6 <xTaskResumeAll+0x76>
    23ba:	84 89       	ldd	r24, Z+20	; 0x14
    23bc:	95 89       	ldd	r25, Z+21	; 0x15
    23be:	12 96       	adiw	r26, 0x02	; 2
    23c0:	9c 93       	st	X, r25
    23c2:	8e 93       	st	-X, r24
    23c4:	11 97       	sbiw	r26, 0x01	; 1
    23c6:	11 8e       	std	Z+25, r1	; 0x19
    23c8:	10 8e       	std	Z+24, r1	; 0x18
    23ca:	8c 91       	ld	r24, X
    23cc:	81 50       	subi	r24, 0x01	; 1
    23ce:	8c 93       	st	X, r24
    23d0:	a4 85       	ldd	r26, Z+12	; 0x0c
    23d2:	b5 85       	ldd	r27, Z+13	; 0x0d
    23d4:	c6 81       	ldd	r28, Z+6	; 0x06
    23d6:	d7 81       	ldd	r29, Z+7	; 0x07
    23d8:	80 85       	ldd	r24, Z+8	; 0x08
    23da:	91 85       	ldd	r25, Z+9	; 0x09
    23dc:	9f 83       	std	Y+7, r25	; 0x07
    23de:	8e 83       	std	Y+6, r24	; 0x06
    23e0:	c0 85       	ldd	r28, Z+8	; 0x08
    23e2:	d1 85       	ldd	r29, Z+9	; 0x09
    23e4:	86 81       	ldd	r24, Z+6	; 0x06
    23e6:	97 81       	ldd	r25, Z+7	; 0x07
    23e8:	9d 83       	std	Y+5, r25	; 0x05
    23ea:	8c 83       	std	Y+4, r24	; 0x04
    23ec:	11 96       	adiw	r26, 0x01	; 1
    23ee:	8d 91       	ld	r24, X+
    23f0:	9c 91       	ld	r25, X
    23f2:	12 97       	sbiw	r26, 0x02	; 2
    23f4:	9f 01       	movw	r18, r30
    23f6:	2e 5f       	subi	r18, 0xFE	; 254
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	82 17       	cp	r24, r18
    23fc:	93 07       	cpc	r25, r19
    23fe:	31 f4       	brne	.+12     	; 0x240c <xTaskResumeAll+0xbc>
    2400:	80 85       	ldd	r24, Z+8	; 0x08
    2402:	91 85       	ldd	r25, Z+9	; 0x09
    2404:	12 96       	adiw	r26, 0x02	; 2
    2406:	9c 93       	st	X, r25
    2408:	8e 93       	st	-X, r24
    240a:	11 97       	sbiw	r26, 0x01	; 1
    240c:	15 86       	std	Z+13, r1	; 0x0d
    240e:	14 86       	std	Z+12, r1	; 0x0c
    2410:	8c 91       	ld	r24, X
    2412:	81 50       	subi	r24, 0x01	; 1
    2414:	8c 93       	st	X, r24
    2416:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2418:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    241c:	8a 17       	cp	r24, r26
    241e:	10 f4       	brcc	.+4      	; 0x2424 <xTaskResumeAll+0xd4>
    2420:	a0 93 e9 10 	sts	0x10E9, r26	; 0x8010e9 <uxTopReadyPriority>
    2424:	8b e0       	ldi	r24, 0x0B	; 11
    2426:	8a 9f       	mul	r24, r26
    2428:	d0 01       	movw	r26, r0
    242a:	11 24       	eor	r1, r1
    242c:	a5 5d       	subi	r26, 0xD5	; 213
    242e:	be 4e       	sbci	r27, 0xEE	; 238
    2430:	11 96       	adiw	r26, 0x01	; 1
    2432:	0d 90       	ld	r0, X+
    2434:	bc 91       	ld	r27, X
    2436:	a0 2d       	mov	r26, r0
    2438:	b7 83       	std	Z+7, r27	; 0x07
    243a:	a6 83       	std	Z+6, r26	; 0x06
    243c:	16 96       	adiw	r26, 0x06	; 6
    243e:	4d 91       	ld	r20, X+
    2440:	5c 91       	ld	r21, X
    2442:	17 97       	sbiw	r26, 0x07	; 7
    2444:	51 87       	std	Z+9, r21	; 0x09
    2446:	40 87       	std	Z+8, r20	; 0x08
    2448:	16 96       	adiw	r26, 0x06	; 6
    244a:	cd 91       	ld	r28, X+
    244c:	dc 91       	ld	r29, X
    244e:	17 97       	sbiw	r26, 0x07	; 7
    2450:	3d 83       	std	Y+5, r19	; 0x05
    2452:	2c 83       	std	Y+4, r18	; 0x04
    2454:	17 96       	adiw	r26, 0x07	; 7
    2456:	3c 93       	st	X, r19
    2458:	2e 93       	st	-X, r18
    245a:	16 97       	sbiw	r26, 0x06	; 6
    245c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    245e:	8a 9f       	mul	r24, r26
    2460:	d0 01       	movw	r26, r0
    2462:	11 24       	eor	r1, r1
    2464:	a5 5d       	subi	r26, 0xD5	; 213
    2466:	be 4e       	sbci	r27, 0xEE	; 238
    2468:	b5 87       	std	Z+13, r27	; 0x0d
    246a:	a4 87       	std	Z+12, r26	; 0x0c
    246c:	8c 91       	ld	r24, X
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	8c 93       	st	X, r24
    2472:	92 8d       	ldd	r25, Z+26	; 0x1a
    2474:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    2478:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    247c:	5a 96       	adiw	r26, 0x1a	; 26
    247e:	8c 91       	ld	r24, X
    2480:	98 17       	cp	r25, r24
    2482:	30 f0       	brcs	.+12     	; 0x2490 <xTaskResumeAll+0x140>
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <xYieldPending>
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <xTaskResumeAll+0x140>
    248c:	e0 e0       	ldi	r30, 0x00	; 0
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <xPendingReadyList>
    2494:	81 11       	cpse	r24, r1
    2496:	73 cf       	rjmp	.-282    	; 0x237e <xTaskResumeAll+0x2e>
    2498:	ef 2b       	or	r30, r31
    249a:	09 f0       	breq	.+2      	; 0x249e <xTaskResumeAll+0x14e>
    249c:	8a db       	rcall	.-2284   	; 0x1bb2 <prvResetNextTaskUnblockTime>
    249e:	c0 90 e4 10 	lds	r12, 0x10E4	; 0x8010e4 <xPendedTicks>
    24a2:	d0 90 e5 10 	lds	r13, 0x10E5	; 0x8010e5 <xPendedTicks+0x1>
    24a6:	e0 90 e6 10 	lds	r14, 0x10E6	; 0x8010e6 <xPendedTicks+0x2>
    24aa:	f0 90 e7 10 	lds	r15, 0x10E7	; 0x8010e7 <xPendedTicks+0x3>
    24ae:	c1 14       	cp	r12, r1
    24b0:	d1 04       	cpc	r13, r1
    24b2:	e1 04       	cpc	r14, r1
    24b4:	f1 04       	cpc	r15, r1
    24b6:	a1 f0       	breq	.+40     	; 0x24e0 <xTaskResumeAll+0x190>
    24b8:	1f de       	rcall	.-962    	; 0x20f8 <xTaskIncrementTick>
    24ba:	88 23       	and	r24, r24
    24bc:	19 f0       	breq	.+6      	; 0x24c4 <xTaskResumeAll+0x174>
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <xYieldPending>
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	c8 1a       	sub	r12, r24
    24c8:	d1 08       	sbc	r13, r1
    24ca:	e1 08       	sbc	r14, r1
    24cc:	f1 08       	sbc	r15, r1
    24ce:	a1 f7       	brne	.-24     	; 0x24b8 <xTaskResumeAll+0x168>
    24d0:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <xPendedTicks>
    24d4:	10 92 e5 10 	sts	0x10E5, r1	; 0x8010e5 <xPendedTicks+0x1>
    24d8:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <xPendedTicks+0x2>
    24dc:	10 92 e7 10 	sts	0x10E7, r1	; 0x8010e7 <xPendedTicks+0x3>
    24e0:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <xYieldPending>
    24e4:	88 23       	and	r24, r24
    24e6:	31 f0       	breq	.+12     	; 0x24f4 <xTaskResumeAll+0x1a4>
    24e8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vPortYield>
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <xTaskResumeAll+0x1a6>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <xTaskResumeAll+0x1a6>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	0f 90       	pop	r0
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	df 90       	pop	r13
    2504:	cf 90       	pop	r12
    2506:	08 95       	ret

00002508 <xTaskDelayUntil>:
    2508:	8f 92       	push	r8
    250a:	9f 92       	push	r9
    250c:	af 92       	push	r10
    250e:	bf 92       	push	r11
    2510:	cf 92       	push	r12
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	ec 01       	movw	r28, r24
    2520:	6a 01       	movw	r12, r20
    2522:	7b 01       	movw	r14, r22
    2524:	d5 dd       	rcall	.-1110   	; 0x20d0 <vTaskSuspendAll>
    2526:	80 90 ea 10 	lds	r8, 0x10EA	; 0x8010ea <xTickCount>
    252a:	90 90 eb 10 	lds	r9, 0x10EB	; 0x8010eb <xTickCount+0x1>
    252e:	a0 90 ec 10 	lds	r10, 0x10EC	; 0x8010ec <xTickCount+0x2>
    2532:	b0 90 ed 10 	lds	r11, 0x10ED	; 0x8010ed <xTickCount+0x3>
    2536:	88 81       	ld	r24, Y
    2538:	99 81       	ldd	r25, Y+1	; 0x01
    253a:	aa 81       	ldd	r26, Y+2	; 0x02
    253c:	bb 81       	ldd	r27, Y+3	; 0x03
    253e:	ac 01       	movw	r20, r24
    2540:	bd 01       	movw	r22, r26
    2542:	4c 0d       	add	r20, r12
    2544:	5d 1d       	adc	r21, r13
    2546:	6e 1d       	adc	r22, r14
    2548:	7f 1d       	adc	r23, r15
    254a:	88 16       	cp	r8, r24
    254c:	99 06       	cpc	r9, r25
    254e:	aa 06       	cpc	r10, r26
    2550:	bb 06       	cpc	r11, r27
    2552:	60 f4       	brcc	.+24     	; 0x256c <xTaskDelayUntil+0x64>
    2554:	48 17       	cp	r20, r24
    2556:	59 07       	cpc	r21, r25
    2558:	6a 07       	cpc	r22, r26
    255a:	7b 07       	cpc	r23, r27
    255c:	98 f4       	brcc	.+38     	; 0x2584 <xTaskDelayUntil+0x7c>
    255e:	84 16       	cp	r8, r20
    2560:	95 06       	cpc	r9, r21
    2562:	a6 06       	cpc	r10, r22
    2564:	b7 06       	cpc	r11, r23
    2566:	80 f0       	brcs	.+32     	; 0x2588 <xTaskDelayUntil+0x80>
    2568:	10 e0       	ldi	r17, 0x00	; 0
    256a:	13 c0       	rjmp	.+38     	; 0x2592 <xTaskDelayUntil+0x8a>
    256c:	48 17       	cp	r20, r24
    256e:	59 07       	cpc	r21, r25
    2570:	6a 07       	cpc	r22, r26
    2572:	7b 07       	cpc	r23, r27
    2574:	58 f0       	brcs	.+22     	; 0x258c <xTaskDelayUntil+0x84>
    2576:	84 16       	cp	r8, r20
    2578:	95 06       	cpc	r9, r21
    257a:	a6 06       	cpc	r10, r22
    257c:	b7 06       	cpc	r11, r23
    257e:	40 f0       	brcs	.+16     	; 0x2590 <xTaskDelayUntil+0x88>
    2580:	10 e0       	ldi	r17, 0x00	; 0
    2582:	07 c0       	rjmp	.+14     	; 0x2592 <xTaskDelayUntil+0x8a>
    2584:	10 e0       	ldi	r17, 0x00	; 0
    2586:	05 c0       	rjmp	.+10     	; 0x2592 <xTaskDelayUntil+0x8a>
    2588:	11 e0       	ldi	r17, 0x01	; 1
    258a:	03 c0       	rjmp	.+6      	; 0x2592 <xTaskDelayUntil+0x8a>
    258c:	11 e0       	ldi	r17, 0x01	; 1
    258e:	01 c0       	rjmp	.+2      	; 0x2592 <xTaskDelayUntil+0x8a>
    2590:	11 e0       	ldi	r17, 0x01	; 1
    2592:	48 83       	st	Y, r20
    2594:	59 83       	std	Y+1, r21	; 0x01
    2596:	6a 83       	std	Y+2, r22	; 0x02
    2598:	7b 83       	std	Y+3, r23	; 0x03
    259a:	11 23       	and	r17, r17
    259c:	41 f0       	breq	.+16     	; 0x25ae <xTaskDelayUntil+0xa6>
    259e:	cb 01       	movw	r24, r22
    25a0:	ba 01       	movw	r22, r20
    25a2:	68 19       	sub	r22, r8
    25a4:	79 09       	sbc	r23, r9
    25a6:	8a 09       	sbc	r24, r10
    25a8:	9b 09       	sbc	r25, r11
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	6b dc       	rcall	.-1834   	; 0x1e84 <prvAddCurrentTaskToDelayedList>
    25ae:	d0 de       	rcall	.-608    	; 0x2350 <xTaskResumeAll>
    25b0:	81 11       	cpse	r24, r1
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <xTaskDelayUntil+0xb0>
    25b4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vPortYield>
    25b8:	81 2f       	mov	r24, r17
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	ff 90       	pop	r15
    25c2:	ef 90       	pop	r14
    25c4:	df 90       	pop	r13
    25c6:	cf 90       	pop	r12
    25c8:	bf 90       	pop	r11
    25ca:	af 90       	pop	r10
    25cc:	9f 90       	pop	r9
    25ce:	8f 90       	pop	r8
    25d0:	08 95       	ret

000025d2 <vTaskDelay>:
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	6b 01       	movw	r12, r22
    25dc:	7c 01       	movw	r14, r24
    25de:	67 2b       	or	r22, r23
    25e0:	68 2b       	or	r22, r24
    25e2:	69 2b       	or	r22, r25
    25e4:	39 f0       	breq	.+14     	; 0x25f4 <vTaskDelay+0x22>
    25e6:	74 dd       	rcall	.-1304   	; 0x20d0 <vTaskSuspendAll>
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	c7 01       	movw	r24, r14
    25ec:	b6 01       	movw	r22, r12
    25ee:	4a dc       	rcall	.-1900   	; 0x1e84 <prvAddCurrentTaskToDelayedList>
    25f0:	af de       	rcall	.-674    	; 0x2350 <xTaskResumeAll>
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <vTaskDelay+0x24>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	81 11       	cpse	r24, r1
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <vTaskDelay+0x2c>
    25fa:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vPortYield>
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	df 90       	pop	r13
    2604:	cf 90       	pop	r12
    2606:	08 95       	ret

00002608 <vTaskSwitchContext>:
    2608:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    260c:	88 23       	and	r24, r24
    260e:	21 f0       	breq	.+8      	; 0x2618 <vTaskSwitchContext+0x10>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <xYieldPending>
    2616:	08 95       	ret
    2618:	10 92 e3 10 	sts	0x10E3, r1	; 0x8010e3 <xYieldPending>
    261c:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2620:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2624:	20 81       	ld	r18, Z
    2626:	31 81       	ldd	r19, Z+1	; 0x01
    2628:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    262c:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2630:	83 8d       	ldd	r24, Z+27	; 0x1b
    2632:	94 8d       	ldd	r25, Z+28	; 0x1c
    2634:	82 17       	cp	r24, r18
    2636:	93 07       	cpc	r25, r19
    2638:	60 f0       	brcs	.+24     	; 0x2652 <vTaskSwitchContext+0x4a>
    263a:	60 91 99 11 	lds	r22, 0x1199	; 0x801199 <pxCurrentTCB>
    263e:	70 91 9a 11 	lds	r23, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2642:	63 5e       	subi	r22, 0xE3	; 227
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    264a:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    264e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <vApplicationStackOverflowHook>
    2652:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    2656:	01 c0       	rjmp	.+2      	; 0x265a <vTaskSwitchContext+0x52>
    2658:	81 50       	subi	r24, 0x01	; 1
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	9b e0       	ldi	r25, 0x0B	; 11
    2660:	92 9f       	mul	r25, r18
    2662:	f0 01       	movw	r30, r0
    2664:	93 9f       	mul	r25, r19
    2666:	f0 0d       	add	r31, r0
    2668:	11 24       	eor	r1, r1
    266a:	e5 5d       	subi	r30, 0xD5	; 213
    266c:	fe 4e       	sbci	r31, 0xEE	; 238
    266e:	90 81       	ld	r25, Z
    2670:	99 23       	and	r25, r25
    2672:	91 f3       	breq	.-28     	; 0x2658 <vTaskSwitchContext+0x50>
    2674:	9b e0       	ldi	r25, 0x0B	; 11
    2676:	92 9f       	mul	r25, r18
    2678:	a0 01       	movw	r20, r0
    267a:	93 9f       	mul	r25, r19
    267c:	50 0d       	add	r21, r0
    267e:	11 24       	eor	r1, r1
    2680:	df 01       	movw	r26, r30
    2682:	01 80       	ldd	r0, Z+1	; 0x01
    2684:	f2 81       	ldd	r31, Z+2	; 0x02
    2686:	e0 2d       	mov	r30, r0
    2688:	04 80       	ldd	r0, Z+4	; 0x04
    268a:	f5 81       	ldd	r31, Z+5	; 0x05
    268c:	e0 2d       	mov	r30, r0
    268e:	12 96       	adiw	r26, 0x02	; 2
    2690:	fc 93       	st	X, r31
    2692:	ee 93       	st	-X, r30
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	42 5d       	subi	r20, 0xD2	; 210
    2698:	5e 4e       	sbci	r21, 0xEE	; 238
    269a:	e4 17       	cp	r30, r20
    269c:	f5 07       	cpc	r31, r21
    269e:	29 f4       	brne	.+10     	; 0x26aa <vTaskSwitchContext+0xa2>
    26a0:	44 81       	ldd	r20, Z+4	; 0x04
    26a2:	55 81       	ldd	r21, Z+5	; 0x05
    26a4:	fd 01       	movw	r30, r26
    26a6:	52 83       	std	Z+2, r21	; 0x02
    26a8:	41 83       	std	Z+1, r20	; 0x01
    26aa:	9b e0       	ldi	r25, 0x0B	; 11
    26ac:	92 9f       	mul	r25, r18
    26ae:	f0 01       	movw	r30, r0
    26b0:	93 9f       	mul	r25, r19
    26b2:	f0 0d       	add	r31, r0
    26b4:	11 24       	eor	r1, r1
    26b6:	e5 5d       	subi	r30, 0xD5	; 213
    26b8:	fe 4e       	sbci	r31, 0xEE	; 238
    26ba:	01 80       	ldd	r0, Z+1	; 0x01
    26bc:	f2 81       	ldd	r31, Z+2	; 0x02
    26be:	e0 2d       	mov	r30, r0
    26c0:	20 85       	ldd	r18, Z+8	; 0x08
    26c2:	31 85       	ldd	r19, Z+9	; 0x09
    26c4:	30 93 9a 11 	sts	0x119A, r19	; 0x80119a <pxCurrentTCB+0x1>
    26c8:	20 93 99 11 	sts	0x1199, r18	; 0x801199 <pxCurrentTCB>
    26cc:	80 93 e9 10 	sts	0x10E9, r24	; 0x8010e9 <uxTopReadyPriority>
    26d0:	08 95       	ret

000026d2 <vTaskPlaceOnEventList>:
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	6a 01       	movw	r12, r20
    26dc:	7b 01       	movw	r14, r22
    26de:	60 91 99 11 	lds	r22, 0x1199	; 0x801199 <pxCurrentTCB>
    26e2:	70 91 9a 11 	lds	r23, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    26e6:	62 5f       	subi	r22, 0xF2	; 242
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	0e 94 19 07 	call	0xe32	; 0xe32 <vListInsert>
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	c7 01       	movw	r24, r14
    26f2:	b6 01       	movw	r22, r12
    26f4:	c7 db       	rcall	.-2162   	; 0x1e84 <prvAddCurrentTaskToDelayedList>
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	08 95       	ret

00002700 <vTaskPlaceOnUnorderedEventList>:
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	fc 01       	movw	r30, r24
    270a:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    270e:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2712:	70 68       	ori	r23, 0x80	; 128
    2714:	1e 96       	adiw	r26, 0x0e	; 14
    2716:	4d 93       	st	X+, r20
    2718:	5d 93       	st	X+, r21
    271a:	6d 93       	st	X+, r22
    271c:	7c 93       	st	X, r23
    271e:	51 97       	sbiw	r26, 0x11	; 17
    2720:	a1 81       	ldd	r26, Z+1	; 0x01
    2722:	b2 81       	ldd	r27, Z+2	; 0x02
    2724:	c0 91 99 11 	lds	r28, 0x1199	; 0x801199 <pxCurrentTCB>
    2728:	d0 91 9a 11 	lds	r29, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    272c:	bb 8b       	std	Y+19, r27	; 0x13
    272e:	aa 8b       	std	Y+18, r26	; 0x12
    2730:	c0 91 99 11 	lds	r28, 0x1199	; 0x801199 <pxCurrentTCB>
    2734:	d0 91 9a 11 	lds	r29, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2738:	16 96       	adiw	r26, 0x06	; 6
    273a:	8d 91       	ld	r24, X+
    273c:	9c 91       	ld	r25, X
    273e:	17 97       	sbiw	r26, 0x07	; 7
    2740:	9d 8b       	std	Y+21, r25	; 0x15
    2742:	8c 8b       	std	Y+20, r24	; 0x14
    2744:	16 96       	adiw	r26, 0x06	; 6
    2746:	cd 91       	ld	r28, X+
    2748:	dc 91       	ld	r29, X
    274a:	17 97       	sbiw	r26, 0x07	; 7
    274c:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    2750:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2754:	0e 96       	adiw	r24, 0x0e	; 14
    2756:	9d 83       	std	Y+5, r25	; 0x05
    2758:	8c 83       	std	Y+4, r24	; 0x04
    275a:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    275e:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2762:	0e 96       	adiw	r24, 0x0e	; 14
    2764:	17 96       	adiw	r26, 0x07	; 7
    2766:	9c 93       	st	X, r25
    2768:	8e 93       	st	-X, r24
    276a:	16 97       	sbiw	r26, 0x06	; 6
    276c:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    2770:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2774:	59 96       	adiw	r26, 0x19	; 25
    2776:	fc 93       	st	X, r31
    2778:	ee 93       	st	-X, r30
    277a:	58 97       	sbiw	r26, 0x18	; 24
    277c:	80 81       	ld	r24, Z
    277e:	8f 5f       	subi	r24, 0xFF	; 255
    2780:	80 83       	st	Z, r24
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	c9 01       	movw	r24, r18
    2786:	b8 01       	movw	r22, r16
    2788:	7d db       	rcall	.-2310   	; 0x1e84 <prvAddCurrentTaskToDelayedList>
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	08 95       	ret

00002794 <vTaskPlaceOnEventListRestricted>:
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	fc 01       	movw	r30, r24
    279a:	cb 01       	movw	r24, r22
    279c:	ba 01       	movw	r22, r20
    279e:	a1 81       	ldd	r26, Z+1	; 0x01
    27a0:	b2 81       	ldd	r27, Z+2	; 0x02
    27a2:	c0 91 99 11 	lds	r28, 0x1199	; 0x801199 <pxCurrentTCB>
    27a6:	d0 91 9a 11 	lds	r29, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    27aa:	bb 8b       	std	Y+19, r27	; 0x13
    27ac:	aa 8b       	std	Y+18, r26	; 0x12
    27ae:	c0 91 99 11 	lds	r28, 0x1199	; 0x801199 <pxCurrentTCB>
    27b2:	d0 91 9a 11 	lds	r29, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    27b6:	16 96       	adiw	r26, 0x06	; 6
    27b8:	4d 91       	ld	r20, X+
    27ba:	5c 91       	ld	r21, X
    27bc:	17 97       	sbiw	r26, 0x07	; 7
    27be:	5d 8b       	std	Y+21, r21	; 0x15
    27c0:	4c 8b       	std	Y+20, r20	; 0x14
    27c2:	16 96       	adiw	r26, 0x06	; 6
    27c4:	cd 91       	ld	r28, X+
    27c6:	dc 91       	ld	r29, X
    27c8:	17 97       	sbiw	r26, 0x07	; 7
    27ca:	40 91 99 11 	lds	r20, 0x1199	; 0x801199 <pxCurrentTCB>
    27ce:	50 91 9a 11 	lds	r21, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    27d2:	42 5f       	subi	r20, 0xF2	; 242
    27d4:	5f 4f       	sbci	r21, 0xFF	; 255
    27d6:	5d 83       	std	Y+5, r21	; 0x05
    27d8:	4c 83       	std	Y+4, r20	; 0x04
    27da:	40 91 99 11 	lds	r20, 0x1199	; 0x801199 <pxCurrentTCB>
    27de:	50 91 9a 11 	lds	r21, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    27e2:	42 5f       	subi	r20, 0xF2	; 242
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	17 96       	adiw	r26, 0x07	; 7
    27e8:	5c 93       	st	X, r21
    27ea:	4e 93       	st	-X, r20
    27ec:	16 97       	sbiw	r26, 0x06	; 6
    27ee:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    27f2:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    27f6:	59 96       	adiw	r26, 0x19	; 25
    27f8:	fc 93       	st	X, r31
    27fa:	ee 93       	st	-X, r30
    27fc:	58 97       	sbiw	r26, 0x18	; 24
    27fe:	30 81       	ld	r19, Z
    2800:	3f 5f       	subi	r19, 0xFF	; 255
    2802:	30 83       	st	Z, r19
    2804:	22 23       	and	r18, r18
    2806:	19 f0       	breq	.+6      	; 0x280e <vTaskPlaceOnEventListRestricted+0x7a>
    2808:	6f ef       	ldi	r22, 0xFF	; 255
    280a:	7f ef       	ldi	r23, 0xFF	; 255
    280c:	cb 01       	movw	r24, r22
    280e:	42 2f       	mov	r20, r18
    2810:	39 db       	rcall	.-2446   	; 0x1e84 <prvAddCurrentTaskToDelayedList>
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	08 95       	ret

00002818 <xTaskRemoveFromEventList>:
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	dc 01       	movw	r26, r24
    281e:	17 96       	adiw	r26, 0x07	; 7
    2820:	ed 91       	ld	r30, X+
    2822:	fc 91       	ld	r31, X
    2824:	18 97       	sbiw	r26, 0x08	; 8
    2826:	00 84       	ldd	r0, Z+8	; 0x08
    2828:	f1 85       	ldd	r31, Z+9	; 0x09
    282a:	e0 2d       	mov	r30, r0
    282c:	a0 8d       	ldd	r26, Z+24	; 0x18
    282e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2830:	c2 89       	ldd	r28, Z+18	; 0x12
    2832:	d3 89       	ldd	r29, Z+19	; 0x13
    2834:	84 89       	ldd	r24, Z+20	; 0x14
    2836:	95 89       	ldd	r25, Z+21	; 0x15
    2838:	9f 83       	std	Y+7, r25	; 0x07
    283a:	8e 83       	std	Y+6, r24	; 0x06
    283c:	c4 89       	ldd	r28, Z+20	; 0x14
    283e:	d5 89       	ldd	r29, Z+21	; 0x15
    2840:	82 89       	ldd	r24, Z+18	; 0x12
    2842:	93 89       	ldd	r25, Z+19	; 0x13
    2844:	9d 83       	std	Y+5, r25	; 0x05
    2846:	8c 83       	std	Y+4, r24	; 0x04
    2848:	11 96       	adiw	r26, 0x01	; 1
    284a:	8d 91       	ld	r24, X+
    284c:	9c 91       	ld	r25, X
    284e:	12 97       	sbiw	r26, 0x02	; 2
    2850:	9f 01       	movw	r18, r30
    2852:	22 5f       	subi	r18, 0xF2	; 242
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	82 17       	cp	r24, r18
    2858:	93 07       	cpc	r25, r19
    285a:	31 f4       	brne	.+12     	; 0x2868 <xTaskRemoveFromEventList+0x50>
    285c:	84 89       	ldd	r24, Z+20	; 0x14
    285e:	95 89       	ldd	r25, Z+21	; 0x15
    2860:	12 96       	adiw	r26, 0x02	; 2
    2862:	9c 93       	st	X, r25
    2864:	8e 93       	st	-X, r24
    2866:	11 97       	sbiw	r26, 0x01	; 1
    2868:	11 8e       	std	Z+25, r1	; 0x19
    286a:	10 8e       	std	Z+24, r1	; 0x18
    286c:	8c 91       	ld	r24, X
    286e:	81 50       	subi	r24, 0x01	; 1
    2870:	8c 93       	st	X, r24
    2872:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    2876:	81 11       	cpse	r24, r1
    2878:	52 c0       	rjmp	.+164    	; 0x291e <xTaskRemoveFromEventList+0x106>
    287a:	a4 85       	ldd	r26, Z+12	; 0x0c
    287c:	b5 85       	ldd	r27, Z+13	; 0x0d
    287e:	c6 81       	ldd	r28, Z+6	; 0x06
    2880:	d7 81       	ldd	r29, Z+7	; 0x07
    2882:	80 85       	ldd	r24, Z+8	; 0x08
    2884:	91 85       	ldd	r25, Z+9	; 0x09
    2886:	9f 83       	std	Y+7, r25	; 0x07
    2888:	8e 83       	std	Y+6, r24	; 0x06
    288a:	c0 85       	ldd	r28, Z+8	; 0x08
    288c:	d1 85       	ldd	r29, Z+9	; 0x09
    288e:	86 81       	ldd	r24, Z+6	; 0x06
    2890:	97 81       	ldd	r25, Z+7	; 0x07
    2892:	9d 83       	std	Y+5, r25	; 0x05
    2894:	8c 83       	std	Y+4, r24	; 0x04
    2896:	11 96       	adiw	r26, 0x01	; 1
    2898:	8d 91       	ld	r24, X+
    289a:	9c 91       	ld	r25, X
    289c:	12 97       	sbiw	r26, 0x02	; 2
    289e:	9f 01       	movw	r18, r30
    28a0:	2e 5f       	subi	r18, 0xFE	; 254
    28a2:	3f 4f       	sbci	r19, 0xFF	; 255
    28a4:	82 17       	cp	r24, r18
    28a6:	93 07       	cpc	r25, r19
    28a8:	31 f4       	brne	.+12     	; 0x28b6 <xTaskRemoveFromEventList+0x9e>
    28aa:	80 85       	ldd	r24, Z+8	; 0x08
    28ac:	91 85       	ldd	r25, Z+9	; 0x09
    28ae:	12 96       	adiw	r26, 0x02	; 2
    28b0:	9c 93       	st	X, r25
    28b2:	8e 93       	st	-X, r24
    28b4:	11 97       	sbiw	r26, 0x01	; 1
    28b6:	15 86       	std	Z+13, r1	; 0x0d
    28b8:	14 86       	std	Z+12, r1	; 0x0c
    28ba:	8c 91       	ld	r24, X
    28bc:	81 50       	subi	r24, 0x01	; 1
    28be:	8c 93       	st	X, r24
    28c0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    28c2:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    28c6:	8a 17       	cp	r24, r26
    28c8:	10 f4       	brcc	.+4      	; 0x28ce <xTaskRemoveFromEventList+0xb6>
    28ca:	a0 93 e9 10 	sts	0x10E9, r26	; 0x8010e9 <uxTopReadyPriority>
    28ce:	8b e0       	ldi	r24, 0x0B	; 11
    28d0:	8a 9f       	mul	r24, r26
    28d2:	d0 01       	movw	r26, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	a5 5d       	subi	r26, 0xD5	; 213
    28d8:	be 4e       	sbci	r27, 0xEE	; 238
    28da:	11 96       	adiw	r26, 0x01	; 1
    28dc:	0d 90       	ld	r0, X+
    28de:	bc 91       	ld	r27, X
    28e0:	a0 2d       	mov	r26, r0
    28e2:	b7 83       	std	Z+7, r27	; 0x07
    28e4:	a6 83       	std	Z+6, r26	; 0x06
    28e6:	16 96       	adiw	r26, 0x06	; 6
    28e8:	4d 91       	ld	r20, X+
    28ea:	5c 91       	ld	r21, X
    28ec:	17 97       	sbiw	r26, 0x07	; 7
    28ee:	51 87       	std	Z+9, r21	; 0x09
    28f0:	40 87       	std	Z+8, r20	; 0x08
    28f2:	16 96       	adiw	r26, 0x06	; 6
    28f4:	cd 91       	ld	r28, X+
    28f6:	dc 91       	ld	r29, X
    28f8:	17 97       	sbiw	r26, 0x07	; 7
    28fa:	3d 83       	std	Y+5, r19	; 0x05
    28fc:	2c 83       	std	Y+4, r18	; 0x04
    28fe:	17 96       	adiw	r26, 0x07	; 7
    2900:	3c 93       	st	X, r19
    2902:	2e 93       	st	-X, r18
    2904:	16 97       	sbiw	r26, 0x06	; 6
    2906:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2908:	8a 9f       	mul	r24, r26
    290a:	d0 01       	movw	r26, r0
    290c:	11 24       	eor	r1, r1
    290e:	a5 5d       	subi	r26, 0xD5	; 213
    2910:	be 4e       	sbci	r27, 0xEE	; 238
    2912:	b5 87       	std	Z+13, r27	; 0x0d
    2914:	a4 87       	std	Z+12, r26	; 0x0c
    2916:	8c 91       	ld	r24, X
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	8c 93       	st	X, r24
    291c:	1c c0       	rjmp	.+56     	; 0x2956 <xTaskRemoveFromEventList+0x13e>
    291e:	46 e0       	ldi	r20, 0x06	; 6
    2920:	51 e1       	ldi	r21, 0x11	; 17
    2922:	da 01       	movw	r26, r20
    2924:	11 96       	adiw	r26, 0x01	; 1
    2926:	cd 91       	ld	r28, X+
    2928:	dc 91       	ld	r29, X
    292a:	12 97       	sbiw	r26, 0x02	; 2
    292c:	d3 8b       	std	Z+19, r29	; 0x13
    292e:	c2 8b       	std	Z+18, r28	; 0x12
    2930:	8e 81       	ldd	r24, Y+6	; 0x06
    2932:	9f 81       	ldd	r25, Y+7	; 0x07
    2934:	95 8b       	std	Z+21, r25	; 0x15
    2936:	84 8b       	std	Z+20, r24	; 0x14
    2938:	8e 81       	ldd	r24, Y+6	; 0x06
    293a:	9f 81       	ldd	r25, Y+7	; 0x07
    293c:	dc 01       	movw	r26, r24
    293e:	15 96       	adiw	r26, 0x05	; 5
    2940:	3c 93       	st	X, r19
    2942:	2e 93       	st	-X, r18
    2944:	14 97       	sbiw	r26, 0x04	; 4
    2946:	3f 83       	std	Y+7, r19	; 0x07
    2948:	2e 83       	std	Y+6, r18	; 0x06
    294a:	51 8f       	std	Z+25, r21	; 0x19
    294c:	40 8f       	std	Z+24, r20	; 0x18
    294e:	da 01       	movw	r26, r20
    2950:	8c 91       	ld	r24, X
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	8c 93       	st	X, r24
    2956:	92 8d       	ldd	r25, Z+26	; 0x1a
    2958:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    295c:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2960:	82 8d       	ldd	r24, Z+26	; 0x1a
    2962:	89 17       	cp	r24, r25
    2964:	20 f4       	brcc	.+8      	; 0x296e <xTaskRemoveFromEventList+0x156>
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <xYieldPending>
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <xTaskRemoveFromEventList+0x158>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	08 95       	ret

00002976 <vTaskRemoveFromUnorderedEventList>:
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	dc 01       	movw	r26, r24
    297c:	70 68       	ori	r23, 0x80	; 128
    297e:	4d 93       	st	X+, r20
    2980:	5d 93       	st	X+, r21
    2982:	6d 93       	st	X+, r22
    2984:	7c 93       	st	X, r23
    2986:	13 97       	sbiw	r26, 0x03	; 3
    2988:	18 96       	adiw	r26, 0x08	; 8
    298a:	ed 91       	ld	r30, X+
    298c:	fc 91       	ld	r31, X
    298e:	19 97       	sbiw	r26, 0x09	; 9
    2990:	1a 96       	adiw	r26, 0x0a	; 10
    2992:	4d 91       	ld	r20, X+
    2994:	5c 91       	ld	r21, X
    2996:	1b 97       	sbiw	r26, 0x0b	; 11
    2998:	14 96       	adiw	r26, 0x04	; 4
    299a:	8d 91       	ld	r24, X+
    299c:	9c 91       	ld	r25, X
    299e:	15 97       	sbiw	r26, 0x05	; 5
    29a0:	16 96       	adiw	r26, 0x06	; 6
    29a2:	2d 91       	ld	r18, X+
    29a4:	3c 91       	ld	r19, X
    29a6:	17 97       	sbiw	r26, 0x07	; 7
    29a8:	ec 01       	movw	r28, r24
    29aa:	3f 83       	std	Y+7, r19	; 0x07
    29ac:	2e 83       	std	Y+6, r18	; 0x06
    29ae:	16 96       	adiw	r26, 0x06	; 6
    29b0:	8d 91       	ld	r24, X+
    29b2:	9c 91       	ld	r25, X
    29b4:	17 97       	sbiw	r26, 0x07	; 7
    29b6:	14 96       	adiw	r26, 0x04	; 4
    29b8:	2d 91       	ld	r18, X+
    29ba:	3c 91       	ld	r19, X
    29bc:	15 97       	sbiw	r26, 0x05	; 5
    29be:	ec 01       	movw	r28, r24
    29c0:	3d 83       	std	Y+5, r19	; 0x05
    29c2:	2c 83       	std	Y+4, r18	; 0x04
    29c4:	ea 01       	movw	r28, r20
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	a8 17       	cp	r26, r24
    29cc:	b9 07       	cpc	r27, r25
    29ce:	31 f4       	brne	.+12     	; 0x29dc <vTaskRemoveFromUnorderedEventList+0x66>
    29d0:	16 96       	adiw	r26, 0x06	; 6
    29d2:	8d 91       	ld	r24, X+
    29d4:	9c 91       	ld	r25, X
    29d6:	17 97       	sbiw	r26, 0x07	; 7
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	1b 96       	adiw	r26, 0x0b	; 11
    29de:	1c 92       	st	X, r1
    29e0:	1e 92       	st	-X, r1
    29e2:	1a 97       	sbiw	r26, 0x0a	; 10
    29e4:	da 01       	movw	r26, r20
    29e6:	8c 91       	ld	r24, X
    29e8:	81 50       	subi	r24, 0x01	; 1
    29ea:	8c 93       	st	X, r24
    29ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    29ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    29f0:	c6 81       	ldd	r28, Z+6	; 0x06
    29f2:	d7 81       	ldd	r29, Z+7	; 0x07
    29f4:	80 85       	ldd	r24, Z+8	; 0x08
    29f6:	91 85       	ldd	r25, Z+9	; 0x09
    29f8:	9f 83       	std	Y+7, r25	; 0x07
    29fa:	8e 83       	std	Y+6, r24	; 0x06
    29fc:	c0 85       	ldd	r28, Z+8	; 0x08
    29fe:	d1 85       	ldd	r29, Z+9	; 0x09
    2a00:	86 81       	ldd	r24, Z+6	; 0x06
    2a02:	97 81       	ldd	r25, Z+7	; 0x07
    2a04:	9d 83       	std	Y+5, r25	; 0x05
    2a06:	8c 83       	std	Y+4, r24	; 0x04
    2a08:	11 96       	adiw	r26, 0x01	; 1
    2a0a:	8d 91       	ld	r24, X+
    2a0c:	9c 91       	ld	r25, X
    2a0e:	12 97       	sbiw	r26, 0x02	; 2
    2a10:	9f 01       	movw	r18, r30
    2a12:	2e 5f       	subi	r18, 0xFE	; 254
    2a14:	3f 4f       	sbci	r19, 0xFF	; 255
    2a16:	82 17       	cp	r24, r18
    2a18:	93 07       	cpc	r25, r19
    2a1a:	31 f4       	brne	.+12     	; 0x2a28 <vTaskRemoveFromUnorderedEventList+0xb2>
    2a1c:	80 85       	ldd	r24, Z+8	; 0x08
    2a1e:	91 85       	ldd	r25, Z+9	; 0x09
    2a20:	12 96       	adiw	r26, 0x02	; 2
    2a22:	9c 93       	st	X, r25
    2a24:	8e 93       	st	-X, r24
    2a26:	11 97       	sbiw	r26, 0x01	; 1
    2a28:	15 86       	std	Z+13, r1	; 0x0d
    2a2a:	14 86       	std	Z+12, r1	; 0x0c
    2a2c:	8c 91       	ld	r24, X
    2a2e:	81 50       	subi	r24, 0x01	; 1
    2a30:	8c 93       	st	X, r24
    2a32:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a34:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    2a38:	8a 17       	cp	r24, r26
    2a3a:	10 f4       	brcc	.+4      	; 0x2a40 <vTaskRemoveFromUnorderedEventList+0xca>
    2a3c:	a0 93 e9 10 	sts	0x10E9, r26	; 0x8010e9 <uxTopReadyPriority>
    2a40:	8b e0       	ldi	r24, 0x0B	; 11
    2a42:	8a 9f       	mul	r24, r26
    2a44:	d0 01       	movw	r26, r0
    2a46:	11 24       	eor	r1, r1
    2a48:	a5 5d       	subi	r26, 0xD5	; 213
    2a4a:	be 4e       	sbci	r27, 0xEE	; 238
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	0d 90       	ld	r0, X+
    2a50:	bc 91       	ld	r27, X
    2a52:	a0 2d       	mov	r26, r0
    2a54:	b7 83       	std	Z+7, r27	; 0x07
    2a56:	a6 83       	std	Z+6, r26	; 0x06
    2a58:	16 96       	adiw	r26, 0x06	; 6
    2a5a:	4d 91       	ld	r20, X+
    2a5c:	5c 91       	ld	r21, X
    2a5e:	17 97       	sbiw	r26, 0x07	; 7
    2a60:	51 87       	std	Z+9, r21	; 0x09
    2a62:	40 87       	std	Z+8, r20	; 0x08
    2a64:	16 96       	adiw	r26, 0x06	; 6
    2a66:	cd 91       	ld	r28, X+
    2a68:	dc 91       	ld	r29, X
    2a6a:	17 97       	sbiw	r26, 0x07	; 7
    2a6c:	3d 83       	std	Y+5, r19	; 0x05
    2a6e:	2c 83       	std	Y+4, r18	; 0x04
    2a70:	17 96       	adiw	r26, 0x07	; 7
    2a72:	3c 93       	st	X, r19
    2a74:	2e 93       	st	-X, r18
    2a76:	16 97       	sbiw	r26, 0x06	; 6
    2a78:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a7a:	8a 9f       	mul	r24, r26
    2a7c:	d0 01       	movw	r26, r0
    2a7e:	11 24       	eor	r1, r1
    2a80:	a5 5d       	subi	r26, 0xD5	; 213
    2a82:	be 4e       	sbci	r27, 0xEE	; 238
    2a84:	b5 87       	std	Z+13, r27	; 0x0d
    2a86:	a4 87       	std	Z+12, r26	; 0x0c
    2a88:	8c 91       	ld	r24, X
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	8c 93       	st	X, r24
    2a8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a90:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2a94:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2a98:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a9a:	89 17       	cp	r24, r25
    2a9c:	18 f4       	brcc	.+6      	; 0x2aa4 <vTaskRemoveFromUnorderedEventList+0x12e>
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <xYieldPending>
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	08 95       	ret

00002aaa <vTaskInternalSetTimeOutState>:
    2aaa:	20 91 e2 10 	lds	r18, 0x10E2	; 0x8010e2 <xNumOfOverflows>
    2aae:	fc 01       	movw	r30, r24
    2ab0:	20 83       	st	Z, r18
    2ab2:	40 91 ea 10 	lds	r20, 0x10EA	; 0x8010ea <xTickCount>
    2ab6:	50 91 eb 10 	lds	r21, 0x10EB	; 0x8010eb <xTickCount+0x1>
    2aba:	60 91 ec 10 	lds	r22, 0x10EC	; 0x8010ec <xTickCount+0x2>
    2abe:	70 91 ed 10 	lds	r23, 0x10ED	; 0x8010ed <xTickCount+0x3>
    2ac2:	41 83       	std	Z+1, r20	; 0x01
    2ac4:	52 83       	std	Z+2, r21	; 0x02
    2ac6:	63 83       	std	Z+3, r22	; 0x03
    2ac8:	74 83       	std	Z+4, r23	; 0x04
    2aca:	08 95       	ret

00002acc <xTaskCheckForTimeOut>:
    2acc:	8f 92       	push	r8
    2ace:	9f 92       	push	r9
    2ad0:	af 92       	push	r10
    2ad2:	bf 92       	push	r11
    2ad4:	cf 92       	push	r12
    2ad6:	df 92       	push	r13
    2ad8:	ef 92       	push	r14
    2ada:	ff 92       	push	r15
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	fb 01       	movw	r30, r22
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	0f 92       	push	r0
    2aec:	c0 90 ea 10 	lds	r12, 0x10EA	; 0x8010ea <xTickCount>
    2af0:	d0 90 eb 10 	lds	r13, 0x10EB	; 0x8010eb <xTickCount+0x1>
    2af4:	e0 90 ec 10 	lds	r14, 0x10EC	; 0x8010ec <xTickCount+0x2>
    2af8:	f0 90 ed 10 	lds	r15, 0x10ED	; 0x8010ed <xTickCount+0x3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	11 96       	adiw	r26, 0x01	; 1
    2b00:	0d 91       	ld	r16, X+
    2b02:	1d 91       	ld	r17, X+
    2b04:	2d 91       	ld	r18, X+
    2b06:	3c 91       	ld	r19, X
    2b08:	14 97       	sbiw	r26, 0x04	; 4
    2b0a:	46 01       	movw	r8, r12
    2b0c:	57 01       	movw	r10, r14
    2b0e:	80 1a       	sub	r8, r16
    2b10:	91 0a       	sbc	r9, r17
    2b12:	a2 0a       	sbc	r10, r18
    2b14:	b3 0a       	sbc	r11, r19
    2b16:	40 81       	ld	r20, Z
    2b18:	51 81       	ldd	r21, Z+1	; 0x01
    2b1a:	62 81       	ldd	r22, Z+2	; 0x02
    2b1c:	73 81       	ldd	r23, Z+3	; 0x03
    2b1e:	4f 3f       	cpi	r20, 0xFF	; 255
    2b20:	bf ef       	ldi	r27, 0xFF	; 255
    2b22:	5b 07       	cpc	r21, r27
    2b24:	6b 07       	cpc	r22, r27
    2b26:	7b 07       	cpc	r23, r27
    2b28:	39 f1       	breq	.+78     	; 0x2b78 <xTaskCheckForTimeOut+0xac>
    2b2a:	ec 01       	movw	r28, r24
    2b2c:	b8 81       	ld	r27, Y
    2b2e:	a0 91 e2 10 	lds	r26, 0x10E2	; 0x8010e2 <xNumOfOverflows>
    2b32:	ba 17       	cp	r27, r26
    2b34:	59 f0       	breq	.+22     	; 0x2b4c <xTaskCheckForTimeOut+0x80>
    2b36:	c0 16       	cp	r12, r16
    2b38:	d1 06       	cpc	r13, r17
    2b3a:	e2 06       	cpc	r14, r18
    2b3c:	f3 06       	cpc	r15, r19
    2b3e:	30 f0       	brcs	.+12     	; 0x2b4c <xTaskCheckForTimeOut+0x80>
    2b40:	10 82       	st	Z, r1
    2b42:	11 82       	std	Z+1, r1	; 0x01
    2b44:	12 82       	std	Z+2, r1	; 0x02
    2b46:	13 82       	std	Z+3, r1	; 0x03
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	17 c0       	rjmp	.+46     	; 0x2b7a <xTaskCheckForTimeOut+0xae>
    2b4c:	84 16       	cp	r8, r20
    2b4e:	95 06       	cpc	r9, r21
    2b50:	a6 06       	cpc	r10, r22
    2b52:	b7 06       	cpc	r11, r23
    2b54:	58 f4       	brcc	.+22     	; 0x2b6c <xTaskCheckForTimeOut+0xa0>
    2b56:	48 19       	sub	r20, r8
    2b58:	59 09       	sbc	r21, r9
    2b5a:	6a 09       	sbc	r22, r10
    2b5c:	7b 09       	sbc	r23, r11
    2b5e:	40 83       	st	Z, r20
    2b60:	51 83       	std	Z+1, r21	; 0x01
    2b62:	62 83       	std	Z+2, r22	; 0x02
    2b64:	73 83       	std	Z+3, r23	; 0x03
    2b66:	a1 df       	rcall	.-190    	; 0x2aaa <vTaskInternalSetTimeOutState>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	07 c0       	rjmp	.+14     	; 0x2b7a <xTaskCheckForTimeOut+0xae>
    2b6c:	10 82       	st	Z, r1
    2b6e:	11 82       	std	Z+1, r1	; 0x01
    2b70:	12 82       	std	Z+2, r1	; 0x02
    2b72:	13 82       	std	Z+3, r1	; 0x03
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <xTaskCheckForTimeOut+0xae>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	ff 90       	pop	r15
    2b88:	ef 90       	pop	r14
    2b8a:	df 90       	pop	r13
    2b8c:	cf 90       	pop	r12
    2b8e:	bf 90       	pop	r11
    2b90:	af 90       	pop	r10
    2b92:	9f 90       	pop	r9
    2b94:	8f 90       	pop	r8
    2b96:	08 95       	ret

00002b98 <vTaskMissedYield>:
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <xYieldPending>
    2b9e:	08 95       	ret

00002ba0 <xTaskGetCurrentTaskHandle>:
    2ba0:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    2ba4:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2ba8:	08 95       	ret

00002baa <xTaskGetSchedulerState>:
    2baa:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <xSchedulerRunning>
    2bae:	88 23       	and	r24, r24
    2bb0:	31 f0       	breq	.+12     	; 0x2bbe <xTaskGetSchedulerState+0x14>
    2bb2:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    2bb6:	81 11       	cpse	r24, r1
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <xTaskGetSchedulerState+0x18>
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	08 95       	ret
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	08 95       	ret
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	08 95       	ret

00002bc6 <xTaskPriorityDisinherit>:
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	fc 01       	movw	r30, r24
    2bd0:	89 2b       	or	r24, r25
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <xTaskPriorityDisinherit+0x10>
    2bd4:	49 c0       	rjmp	.+146    	; 0x2c68 <xTaskPriorityDisinherit+0xa2>
    2bd6:	86 a5       	ldd	r24, Z+46	; 0x2e
    2bd8:	81 50       	subi	r24, 0x01	; 1
    2bda:	86 a7       	std	Z+46, r24	; 0x2e
    2bdc:	22 8d       	ldd	r18, Z+26	; 0x1a
    2bde:	95 a5       	ldd	r25, Z+45	; 0x2d
    2be0:	29 17       	cp	r18, r25
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <xTaskPriorityDisinherit+0x20>
    2be4:	43 c0       	rjmp	.+134    	; 0x2c6c <xTaskPriorityDisinherit+0xa6>
    2be6:	81 11       	cpse	r24, r1
    2be8:	43 c0       	rjmp	.+134    	; 0x2c70 <xTaskPriorityDisinherit+0xaa>
    2bea:	ef 01       	movw	r28, r30
    2bec:	8f 01       	movw	r16, r30
    2bee:	0e 5f       	subi	r16, 0xFE	; 254
    2bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	0e 94 56 07 	call	0xeac	; 0xeac <uxListRemove>
    2bf8:	ed a5       	ldd	r30, Y+45	; 0x2d
    2bfa:	ea 8f       	std	Y+26, r30	; 0x1a
    2bfc:	8a e0       	ldi	r24, 0x0A	; 10
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	a0 e0       	ldi	r26, 0x00	; 0
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	8e 1b       	sub	r24, r30
    2c06:	91 09       	sbc	r25, r1
    2c08:	a1 09       	sbc	r26, r1
    2c0a:	b1 09       	sbc	r27, r1
    2c0c:	8e 87       	std	Y+14, r24	; 0x0e
    2c0e:	9f 87       	std	Y+15, r25	; 0x0f
    2c10:	a8 8b       	std	Y+16, r26	; 0x10
    2c12:	b9 8b       	std	Y+17, r27	; 0x11
    2c14:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    2c18:	8e 17       	cp	r24, r30
    2c1a:	10 f4       	brcc	.+4      	; 0x2c20 <xTaskPriorityDisinherit+0x5a>
    2c1c:	e0 93 e9 10 	sts	0x10E9, r30	; 0x8010e9 <uxTopReadyPriority>
    2c20:	8b e0       	ldi	r24, 0x0B	; 11
    2c22:	8e 9f       	mul	r24, r30
    2c24:	f0 01       	movw	r30, r0
    2c26:	11 24       	eor	r1, r1
    2c28:	e5 5d       	subi	r30, 0xD5	; 213
    2c2a:	fe 4e       	sbci	r31, 0xEE	; 238
    2c2c:	01 80       	ldd	r0, Z+1	; 0x01
    2c2e:	f2 81       	ldd	r31, Z+2	; 0x02
    2c30:	e0 2d       	mov	r30, r0
    2c32:	ff 83       	std	Y+7, r31	; 0x07
    2c34:	ee 83       	std	Y+6, r30	; 0x06
    2c36:	26 81       	ldd	r18, Z+6	; 0x06
    2c38:	37 81       	ldd	r19, Z+7	; 0x07
    2c3a:	39 87       	std	Y+9, r19	; 0x09
    2c3c:	28 87       	std	Y+8, r18	; 0x08
    2c3e:	a6 81       	ldd	r26, Z+6	; 0x06
    2c40:	b7 81       	ldd	r27, Z+7	; 0x07
    2c42:	15 96       	adiw	r26, 0x05	; 5
    2c44:	1c 93       	st	X, r17
    2c46:	0e 93       	st	-X, r16
    2c48:	14 97       	sbiw	r26, 0x04	; 4
    2c4a:	17 83       	std	Z+7, r17	; 0x07
    2c4c:	06 83       	std	Z+6, r16	; 0x06
    2c4e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c50:	8e 9f       	mul	r24, r30
    2c52:	f0 01       	movw	r30, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	e5 5d       	subi	r30, 0xD5	; 213
    2c58:	fe 4e       	sbci	r31, 0xEE	; 238
    2c5a:	fd 87       	std	Y+13, r31	; 0x0d
    2c5c:	ec 87       	std	Y+12, r30	; 0x0c
    2c5e:	80 81       	ld	r24, Z
    2c60:	8f 5f       	subi	r24, 0xFF	; 255
    2c62:	80 83       	st	Z, r24
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	05 c0       	rjmp	.+10     	; 0x2c72 <xTaskPriorityDisinherit+0xac>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <xTaskPriorityDisinherit+0xac>
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	01 c0       	rjmp	.+2      	; 0x2c72 <xTaskPriorityDisinherit+0xac>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	08 95       	ret

00002c7c <uxTaskResetEventItemValue>:
    2c7c:	cf 92       	push	r12
    2c7e:	df 92       	push	r13
    2c80:	ef 92       	push	r14
    2c82:	ff 92       	push	r15
    2c84:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2c88:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2c8c:	66 85       	ldd	r22, Z+14	; 0x0e
    2c8e:	77 85       	ldd	r23, Z+15	; 0x0f
    2c90:	80 89       	ldd	r24, Z+16	; 0x10
    2c92:	91 89       	ldd	r25, Z+17	; 0x11
    2c94:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2c98:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2c9c:	a0 91 99 11 	lds	r26, 0x1199	; 0x801199 <pxCurrentTCB>
    2ca0:	b0 91 9a 11 	lds	r27, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2ca4:	5a 96       	adiw	r26, 0x1a	; 26
    2ca6:	2c 91       	ld	r18, X
    2ca8:	0f 2e       	mov	r0, r31
    2caa:	fa e0       	ldi	r31, 0x0A	; 10
    2cac:	cf 2e       	mov	r12, r31
    2cae:	d1 2c       	mov	r13, r1
    2cb0:	e1 2c       	mov	r14, r1
    2cb2:	f1 2c       	mov	r15, r1
    2cb4:	f0 2d       	mov	r31, r0
    2cb6:	c2 1a       	sub	r12, r18
    2cb8:	d1 08       	sbc	r13, r1
    2cba:	e1 08       	sbc	r14, r1
    2cbc:	f1 08       	sbc	r15, r1
    2cbe:	c6 86       	std	Z+14, r12	; 0x0e
    2cc0:	d7 86       	std	Z+15, r13	; 0x0f
    2cc2:	e0 8a       	std	Z+16, r14	; 0x10
    2cc4:	f1 8a       	std	Z+17, r15	; 0x11
    2cc6:	ff 90       	pop	r15
    2cc8:	ef 90       	pop	r14
    2cca:	df 90       	pop	r13
    2ccc:	cf 90       	pop	r12
    2cce:	08 95       	ret

00002cd0 <xTaskGenericNotifyWait>:
    2cd0:	4f 92       	push	r4
    2cd2:	5f 92       	push	r5
    2cd4:	6f 92       	push	r6
    2cd6:	7f 92       	push	r7
    2cd8:	af 92       	push	r10
    2cda:	bf 92       	push	r11
    2cdc:	cf 92       	push	r12
    2cde:	df 92       	push	r13
    2ce0:	ef 92       	push	r14
    2ce2:	ff 92       	push	r15
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	28 01       	movw	r4, r16
    2cee:	39 01       	movw	r6, r18
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	0f 92       	push	r0
    2cf6:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2cfa:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2cfe:	c8 2f       	mov	r28, r24
    2d00:	d0 e0       	ldi	r29, 0x00	; 0
    2d02:	ec 0f       	add	r30, r28
    2d04:	fd 1f       	adc	r31, r29
    2d06:	83 a9       	ldd	r24, Z+51	; 0x33
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	71 f1       	breq	.+92     	; 0x2d68 <xTaskGenericNotifyWait+0x98>
    2d0c:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2d10:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2d14:	ce 01       	movw	r24, r28
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	e8 0f       	add	r30, r24
    2d20:	f9 1f       	adc	r31, r25
    2d22:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d24:	90 a9       	ldd	r25, Z+48	; 0x30
    2d26:	a1 a9       	ldd	r26, Z+49	; 0x31
    2d28:	b2 a9       	ldd	r27, Z+50	; 0x32
    2d2a:	40 95       	com	r20
    2d2c:	50 95       	com	r21
    2d2e:	60 95       	com	r22
    2d30:	70 95       	com	r23
    2d32:	48 23       	and	r20, r24
    2d34:	59 23       	and	r21, r25
    2d36:	6a 23       	and	r22, r26
    2d38:	7b 23       	and	r23, r27
    2d3a:	47 a7       	std	Z+47, r20	; 0x2f
    2d3c:	50 ab       	std	Z+48, r21	; 0x30
    2d3e:	61 ab       	std	Z+49, r22	; 0x31
    2d40:	72 ab       	std	Z+50, r23	; 0x32
    2d42:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2d46:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2d4a:	ec 0f       	add	r30, r28
    2d4c:	fd 1f       	adc	r31, r29
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	83 ab       	std	Z+51, r24	; 0x33
    2d52:	a1 14       	cp	r10, r1
    2d54:	b1 04       	cpc	r11, r1
    2d56:	c1 04       	cpc	r12, r1
    2d58:	d1 04       	cpc	r13, r1
    2d5a:	31 f0       	breq	.+12     	; 0x2d68 <xTaskGenericNotifyWait+0x98>
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	c6 01       	movw	r24, r12
    2d60:	b5 01       	movw	r22, r10
    2d62:	90 d8       	rcall	.-3808   	; 0x1e84 <prvAddCurrentTaskToDelayedList>
    2d64:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vPortYield>
    2d68:	0f 90       	pop	r0
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	0f 92       	push	r0
    2d72:	e1 14       	cp	r14, r1
    2d74:	f1 04       	cpc	r15, r1
    2d76:	a1 f0       	breq	.+40     	; 0x2da0 <xTaskGenericNotifyWait+0xd0>
    2d78:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2d7c:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2d80:	ce 01       	movw	r24, r28
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	e8 0f       	add	r30, r24
    2d8c:	f9 1f       	adc	r31, r25
    2d8e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d90:	90 a9       	ldd	r25, Z+48	; 0x30
    2d92:	a1 a9       	ldd	r26, Z+49	; 0x31
    2d94:	b2 a9       	ldd	r27, Z+50	; 0x32
    2d96:	f7 01       	movw	r30, r14
    2d98:	80 83       	st	Z, r24
    2d9a:	91 83       	std	Z+1, r25	; 0x01
    2d9c:	a2 83       	std	Z+2, r26	; 0x02
    2d9e:	b3 83       	std	Z+3, r27	; 0x03
    2da0:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2da4:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2da8:	ec 0f       	add	r30, r28
    2daa:	fd 1f       	adc	r31, r29
    2dac:	83 a9       	ldd	r24, Z+51	; 0x33
    2dae:	82 30       	cpi	r24, 0x02	; 2
    2db0:	e9 f4       	brne	.+58     	; 0x2dec <xTaskGenericNotifyWait+0x11c>
    2db2:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2db6:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2dba:	ce 01       	movw	r24, r28
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	e8 0f       	add	r30, r24
    2dc6:	f9 1f       	adc	r31, r25
    2dc8:	87 a5       	ldd	r24, Z+47	; 0x2f
    2dca:	90 a9       	ldd	r25, Z+48	; 0x30
    2dcc:	a1 a9       	ldd	r26, Z+49	; 0x31
    2dce:	b2 a9       	ldd	r27, Z+50	; 0x32
    2dd0:	40 94       	com	r4
    2dd2:	50 94       	com	r5
    2dd4:	60 94       	com	r6
    2dd6:	70 94       	com	r7
    2dd8:	48 22       	and	r4, r24
    2dda:	59 22       	and	r5, r25
    2ddc:	6a 22       	and	r6, r26
    2dde:	7b 22       	and	r7, r27
    2de0:	47 a6       	std	Z+47, r4	; 0x2f
    2de2:	50 aa       	std	Z+48, r5	; 0x30
    2de4:	61 aa       	std	Z+49, r6	; 0x31
    2de6:	72 aa       	std	Z+50, r7	; 0x32
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <xTaskGenericNotifyWait+0x11e>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	20 91 99 11 	lds	r18, 0x1199	; 0x801199 <pxCurrentTCB>
    2df2:	30 91 9a 11 	lds	r19, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2df6:	c2 0f       	add	r28, r18
    2df8:	d3 1f       	adc	r29, r19
    2dfa:	1b aa       	std	Y+51, r1	; 0x33
    2dfc:	0f 90       	pop	r0
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	ff 90       	pop	r15
    2e0a:	ef 90       	pop	r14
    2e0c:	df 90       	pop	r13
    2e0e:	cf 90       	pop	r12
    2e10:	bf 90       	pop	r11
    2e12:	af 90       	pop	r10
    2e14:	7f 90       	pop	r7
    2e16:	6f 90       	pop	r6
    2e18:	5f 90       	pop	r5
    2e1a:	4f 90       	pop	r4
    2e1c:	08 95       	ret

00002e1e <xTaskGenericNotify>:
    2e1e:	8f 92       	push	r8
    2e20:	9f 92       	push	r9
    2e22:	af 92       	push	r10
    2e24:	bf 92       	push	r11
    2e26:	ef 92       	push	r14
    2e28:	ff 92       	push	r15
    2e2a:	0f 93       	push	r16
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	dc 01       	movw	r26, r24
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	0f 92       	push	r0
    2e38:	e1 14       	cp	r14, r1
    2e3a:	f1 04       	cpc	r15, r1
    2e3c:	89 f0       	breq	.+34     	; 0x2e60 <xTaskGenericNotify+0x42>
    2e3e:	e6 2f       	mov	r30, r22
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	ee 0f       	add	r30, r30
    2e44:	ff 1f       	adc	r31, r31
    2e46:	ee 0f       	add	r30, r30
    2e48:	ff 1f       	adc	r31, r31
    2e4a:	e8 0f       	add	r30, r24
    2e4c:	f9 1f       	adc	r31, r25
    2e4e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e50:	90 a8       	ldd	r9, Z+48	; 0x30
    2e52:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e54:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e56:	f7 01       	movw	r30, r14
    2e58:	80 82       	st	Z, r8
    2e5a:	91 82       	std	Z+1, r9	; 0x01
    2e5c:	a2 82       	std	Z+2, r10	; 0x02
    2e5e:	b3 82       	std	Z+3, r11	; 0x03
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	fd 01       	movw	r30, r26
    2e64:	e6 0f       	add	r30, r22
    2e66:	f7 1f       	adc	r31, r23
    2e68:	83 a9       	ldd	r24, Z+51	; 0x33
    2e6a:	92 e0       	ldi	r25, 0x02	; 2
    2e6c:	93 ab       	std	Z+51, r25	; 0x33
    2e6e:	02 30       	cpi	r16, 0x02	; 2
    2e70:	01 f1       	breq	.+64     	; 0x2eb2 <xTaskGenericNotify+0x94>
    2e72:	18 f4       	brcc	.+6      	; 0x2e7a <xTaskGenericNotify+0x5c>
    2e74:	01 30       	cpi	r16, 0x01	; 1
    2e76:	31 f0       	breq	.+12     	; 0x2e84 <xTaskGenericNotify+0x66>
    2e78:	4d c0       	rjmp	.+154    	; 0x2f14 <xTaskGenericNotify+0xf6>
    2e7a:	03 30       	cpi	r16, 0x03	; 3
    2e7c:	79 f1       	breq	.+94     	; 0x2edc <xTaskGenericNotify+0xbe>
    2e7e:	04 30       	cpi	r16, 0x04	; 4
    2e80:	d1 f1       	breq	.+116    	; 0x2ef6 <xTaskGenericNotify+0xd8>
    2e82:	48 c0       	rjmp	.+144    	; 0x2f14 <xTaskGenericNotify+0xf6>
    2e84:	66 0f       	add	r22, r22
    2e86:	77 1f       	adc	r23, r23
    2e88:	66 0f       	add	r22, r22
    2e8a:	77 1f       	adc	r23, r23
    2e8c:	fd 01       	movw	r30, r26
    2e8e:	e6 0f       	add	r30, r22
    2e90:	f7 1f       	adc	r31, r23
    2e92:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e94:	90 a8       	ldd	r9, Z+48	; 0x30
    2e96:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e98:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e9a:	ba 01       	movw	r22, r20
    2e9c:	a9 01       	movw	r20, r18
    2e9e:	48 29       	or	r20, r8
    2ea0:	59 29       	or	r21, r9
    2ea2:	6a 29       	or	r22, r10
    2ea4:	7b 29       	or	r23, r11
    2ea6:	47 a7       	std	Z+47, r20	; 0x2f
    2ea8:	50 ab       	std	Z+48, r21	; 0x30
    2eaa:	61 ab       	std	Z+49, r22	; 0x31
    2eac:	72 ab       	std	Z+50, r23	; 0x32
    2eae:	01 e0       	ldi	r16, 0x01	; 1
    2eb0:	34 c0       	rjmp	.+104    	; 0x2f1a <xTaskGenericNotify+0xfc>
    2eb2:	66 0f       	add	r22, r22
    2eb4:	77 1f       	adc	r23, r23
    2eb6:	66 0f       	add	r22, r22
    2eb8:	77 1f       	adc	r23, r23
    2eba:	fd 01       	movw	r30, r26
    2ebc:	e6 0f       	add	r30, r22
    2ebe:	f7 1f       	adc	r31, r23
    2ec0:	47 a5       	ldd	r20, Z+47	; 0x2f
    2ec2:	50 a9       	ldd	r21, Z+48	; 0x30
    2ec4:	61 a9       	ldd	r22, Z+49	; 0x31
    2ec6:	72 a9       	ldd	r23, Z+50	; 0x32
    2ec8:	4f 5f       	subi	r20, 0xFF	; 255
    2eca:	5f 4f       	sbci	r21, 0xFF	; 255
    2ecc:	6f 4f       	sbci	r22, 0xFF	; 255
    2ece:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed0:	47 a7       	std	Z+47, r20	; 0x2f
    2ed2:	50 ab       	std	Z+48, r21	; 0x30
    2ed4:	61 ab       	std	Z+49, r22	; 0x31
    2ed6:	72 ab       	std	Z+50, r23	; 0x32
    2ed8:	01 e0       	ldi	r16, 0x01	; 1
    2eda:	1f c0       	rjmp	.+62     	; 0x2f1a <xTaskGenericNotify+0xfc>
    2edc:	66 0f       	add	r22, r22
    2ede:	77 1f       	adc	r23, r23
    2ee0:	66 0f       	add	r22, r22
    2ee2:	77 1f       	adc	r23, r23
    2ee4:	fd 01       	movw	r30, r26
    2ee6:	e6 0f       	add	r30, r22
    2ee8:	f7 1f       	adc	r31, r23
    2eea:	27 a7       	std	Z+47, r18	; 0x2f
    2eec:	30 ab       	std	Z+48, r19	; 0x30
    2eee:	41 ab       	std	Z+49, r20	; 0x31
    2ef0:	52 ab       	std	Z+50, r21	; 0x32
    2ef2:	01 e0       	ldi	r16, 0x01	; 1
    2ef4:	12 c0       	rjmp	.+36     	; 0x2f1a <xTaskGenericNotify+0xfc>
    2ef6:	82 30       	cpi	r24, 0x02	; 2
    2ef8:	79 f0       	breq	.+30     	; 0x2f18 <xTaskGenericNotify+0xfa>
    2efa:	66 0f       	add	r22, r22
    2efc:	77 1f       	adc	r23, r23
    2efe:	66 0f       	add	r22, r22
    2f00:	77 1f       	adc	r23, r23
    2f02:	fd 01       	movw	r30, r26
    2f04:	e6 0f       	add	r30, r22
    2f06:	f7 1f       	adc	r31, r23
    2f08:	27 a7       	std	Z+47, r18	; 0x2f
    2f0a:	30 ab       	std	Z+48, r19	; 0x30
    2f0c:	41 ab       	std	Z+49, r20	; 0x31
    2f0e:	52 ab       	std	Z+50, r21	; 0x32
    2f10:	01 e0       	ldi	r16, 0x01	; 1
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <xTaskGenericNotify+0xfc>
    2f14:	01 e0       	ldi	r16, 0x01	; 1
    2f16:	01 c0       	rjmp	.+2      	; 0x2f1a <xTaskGenericNotify+0xfc>
    2f18:	00 e0       	ldi	r16, 0x00	; 0
    2f1a:	81 30       	cpi	r24, 0x01	; 1
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <xTaskGenericNotify+0x102>
    2f1e:	69 c0       	rjmp	.+210    	; 0x2ff2 <xTaskGenericNotify+0x1d4>
    2f20:	1c 96       	adiw	r26, 0x0c	; 12
    2f22:	ed 91       	ld	r30, X+
    2f24:	fc 91       	ld	r31, X
    2f26:	1d 97       	sbiw	r26, 0x0d	; 13
    2f28:	16 96       	adiw	r26, 0x06	; 6
    2f2a:	cd 91       	ld	r28, X+
    2f2c:	dc 91       	ld	r29, X
    2f2e:	17 97       	sbiw	r26, 0x07	; 7
    2f30:	18 96       	adiw	r26, 0x08	; 8
    2f32:	8d 91       	ld	r24, X+
    2f34:	9c 91       	ld	r25, X
    2f36:	19 97       	sbiw	r26, 0x09	; 9
    2f38:	9f 83       	std	Y+7, r25	; 0x07
    2f3a:	8e 83       	std	Y+6, r24	; 0x06
    2f3c:	18 96       	adiw	r26, 0x08	; 8
    2f3e:	cd 91       	ld	r28, X+
    2f40:	dc 91       	ld	r29, X
    2f42:	19 97       	sbiw	r26, 0x09	; 9
    2f44:	16 96       	adiw	r26, 0x06	; 6
    2f46:	8d 91       	ld	r24, X+
    2f48:	9c 91       	ld	r25, X
    2f4a:	17 97       	sbiw	r26, 0x07	; 7
    2f4c:	9d 83       	std	Y+5, r25	; 0x05
    2f4e:	8c 83       	std	Y+4, r24	; 0x04
    2f50:	81 81       	ldd	r24, Z+1	; 0x01
    2f52:	92 81       	ldd	r25, Z+2	; 0x02
    2f54:	9d 01       	movw	r18, r26
    2f56:	2e 5f       	subi	r18, 0xFE	; 254
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	82 17       	cp	r24, r18
    2f5c:	93 07       	cpc	r25, r19
    2f5e:	31 f4       	brne	.+12     	; 0x2f6c <xTaskGenericNotify+0x14e>
    2f60:	18 96       	adiw	r26, 0x08	; 8
    2f62:	8d 91       	ld	r24, X+
    2f64:	9c 91       	ld	r25, X
    2f66:	19 97       	sbiw	r26, 0x09	; 9
    2f68:	92 83       	std	Z+2, r25	; 0x02
    2f6a:	81 83       	std	Z+1, r24	; 0x01
    2f6c:	1d 96       	adiw	r26, 0x0d	; 13
    2f6e:	1c 92       	st	X, r1
    2f70:	1e 92       	st	-X, r1
    2f72:	1c 97       	sbiw	r26, 0x0c	; 12
    2f74:	80 81       	ld	r24, Z
    2f76:	81 50       	subi	r24, 0x01	; 1
    2f78:	80 83       	st	Z, r24
    2f7a:	5a 96       	adiw	r26, 0x1a	; 26
    2f7c:	ec 91       	ld	r30, X
    2f7e:	5a 97       	sbiw	r26, 0x1a	; 26
    2f80:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    2f84:	8e 17       	cp	r24, r30
    2f86:	10 f4       	brcc	.+4      	; 0x2f8c <xTaskGenericNotify+0x16e>
    2f88:	e0 93 e9 10 	sts	0x10E9, r30	; 0x8010e9 <uxTopReadyPriority>
    2f8c:	8b e0       	ldi	r24, 0x0B	; 11
    2f8e:	8e 9f       	mul	r24, r30
    2f90:	f0 01       	movw	r30, r0
    2f92:	11 24       	eor	r1, r1
    2f94:	e5 5d       	subi	r30, 0xD5	; 213
    2f96:	fe 4e       	sbci	r31, 0xEE	; 238
    2f98:	01 80       	ldd	r0, Z+1	; 0x01
    2f9a:	f2 81       	ldd	r31, Z+2	; 0x02
    2f9c:	e0 2d       	mov	r30, r0
    2f9e:	17 96       	adiw	r26, 0x07	; 7
    2fa0:	fc 93       	st	X, r31
    2fa2:	ee 93       	st	-X, r30
    2fa4:	16 97       	sbiw	r26, 0x06	; 6
    2fa6:	46 81       	ldd	r20, Z+6	; 0x06
    2fa8:	57 81       	ldd	r21, Z+7	; 0x07
    2faa:	19 96       	adiw	r26, 0x09	; 9
    2fac:	5c 93       	st	X, r21
    2fae:	4e 93       	st	-X, r20
    2fb0:	18 97       	sbiw	r26, 0x08	; 8
    2fb2:	c6 81       	ldd	r28, Z+6	; 0x06
    2fb4:	d7 81       	ldd	r29, Z+7	; 0x07
    2fb6:	3d 83       	std	Y+5, r19	; 0x05
    2fb8:	2c 83       	std	Y+4, r18	; 0x04
    2fba:	37 83       	std	Z+7, r19	; 0x07
    2fbc:	26 83       	std	Z+6, r18	; 0x06
    2fbe:	5a 96       	adiw	r26, 0x1a	; 26
    2fc0:	ec 91       	ld	r30, X
    2fc2:	5a 97       	sbiw	r26, 0x1a	; 26
    2fc4:	8e 9f       	mul	r24, r30
    2fc6:	f0 01       	movw	r30, r0
    2fc8:	11 24       	eor	r1, r1
    2fca:	e5 5d       	subi	r30, 0xD5	; 213
    2fcc:	fe 4e       	sbci	r31, 0xEE	; 238
    2fce:	1d 96       	adiw	r26, 0x0d	; 13
    2fd0:	fc 93       	st	X, r31
    2fd2:	ee 93       	st	-X, r30
    2fd4:	1c 97       	sbiw	r26, 0x0c	; 12
    2fd6:	80 81       	ld	r24, Z
    2fd8:	8f 5f       	subi	r24, 0xFF	; 255
    2fda:	80 83       	st	Z, r24
    2fdc:	5a 96       	adiw	r26, 0x1a	; 26
    2fde:	9c 91       	ld	r25, X
    2fe0:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    2fe4:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    2fe8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fea:	89 17       	cp	r24, r25
    2fec:	10 f4       	brcc	.+4      	; 0x2ff2 <xTaskGenericNotify+0x1d4>
    2fee:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vPortYield>
    2ff2:	0f 90       	pop	r0
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	80 2f       	mov	r24, r16
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	bf 90       	pop	r11
    3004:	af 90       	pop	r10
    3006:	9f 90       	pop	r9
    3008:	8f 90       	pop	r8
    300a:	08 95       	ret

0000300c <xTaskGenericNotifyFromISR>:
    300c:	8f 92       	push	r8
    300e:	9f 92       	push	r9
    3010:	af 92       	push	r10
    3012:	bf 92       	push	r11
    3014:	cf 92       	push	r12
    3016:	df 92       	push	r13
    3018:	ef 92       	push	r14
    301a:	ff 92       	push	r15
    301c:	0f 93       	push	r16
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	dc 01       	movw	r26, r24
    3024:	e1 14       	cp	r14, r1
    3026:	f1 04       	cpc	r15, r1
    3028:	89 f0       	breq	.+34     	; 0x304c <xTaskGenericNotifyFromISR+0x40>
    302a:	e6 2f       	mov	r30, r22
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	ee 0f       	add	r30, r30
    3030:	ff 1f       	adc	r31, r31
    3032:	ee 0f       	add	r30, r30
    3034:	ff 1f       	adc	r31, r31
    3036:	e8 0f       	add	r30, r24
    3038:	f9 1f       	adc	r31, r25
    303a:	87 a4       	ldd	r8, Z+47	; 0x2f
    303c:	90 a8       	ldd	r9, Z+48	; 0x30
    303e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3040:	b2 a8       	ldd	r11, Z+50	; 0x32
    3042:	f7 01       	movw	r30, r14
    3044:	80 82       	st	Z, r8
    3046:	91 82       	std	Z+1, r9	; 0x01
    3048:	a2 82       	std	Z+2, r10	; 0x02
    304a:	b3 82       	std	Z+3, r11	; 0x03
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	fd 01       	movw	r30, r26
    3050:	e6 0f       	add	r30, r22
    3052:	f7 1f       	adc	r31, r23
    3054:	93 a9       	ldd	r25, Z+51	; 0x33
    3056:	82 e0       	ldi	r24, 0x02	; 2
    3058:	83 ab       	std	Z+51, r24	; 0x33
    305a:	02 30       	cpi	r16, 0x02	; 2
    305c:	01 f1       	breq	.+64     	; 0x309e <xTaskGenericNotifyFromISR+0x92>
    305e:	18 f4       	brcc	.+6      	; 0x3066 <xTaskGenericNotifyFromISR+0x5a>
    3060:	01 30       	cpi	r16, 0x01	; 1
    3062:	31 f0       	breq	.+12     	; 0x3070 <xTaskGenericNotifyFromISR+0x64>
    3064:	4d c0       	rjmp	.+154    	; 0x3100 <xTaskGenericNotifyFromISR+0xf4>
    3066:	03 30       	cpi	r16, 0x03	; 3
    3068:	79 f1       	breq	.+94     	; 0x30c8 <xTaskGenericNotifyFromISR+0xbc>
    306a:	04 30       	cpi	r16, 0x04	; 4
    306c:	d1 f1       	breq	.+116    	; 0x30e2 <xTaskGenericNotifyFromISR+0xd6>
    306e:	48 c0       	rjmp	.+144    	; 0x3100 <xTaskGenericNotifyFromISR+0xf4>
    3070:	66 0f       	add	r22, r22
    3072:	77 1f       	adc	r23, r23
    3074:	66 0f       	add	r22, r22
    3076:	77 1f       	adc	r23, r23
    3078:	fd 01       	movw	r30, r26
    307a:	e6 0f       	add	r30, r22
    307c:	f7 1f       	adc	r31, r23
    307e:	87 a4       	ldd	r8, Z+47	; 0x2f
    3080:	90 a8       	ldd	r9, Z+48	; 0x30
    3082:	a1 a8       	ldd	r10, Z+49	; 0x31
    3084:	b2 a8       	ldd	r11, Z+50	; 0x32
    3086:	ba 01       	movw	r22, r20
    3088:	a9 01       	movw	r20, r18
    308a:	48 29       	or	r20, r8
    308c:	59 29       	or	r21, r9
    308e:	6a 29       	or	r22, r10
    3090:	7b 29       	or	r23, r11
    3092:	47 a7       	std	Z+47, r20	; 0x2f
    3094:	50 ab       	std	Z+48, r21	; 0x30
    3096:	61 ab       	std	Z+49, r22	; 0x31
    3098:	72 ab       	std	Z+50, r23	; 0x32
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	34 c0       	rjmp	.+104    	; 0x3106 <xTaskGenericNotifyFromISR+0xfa>
    309e:	66 0f       	add	r22, r22
    30a0:	77 1f       	adc	r23, r23
    30a2:	66 0f       	add	r22, r22
    30a4:	77 1f       	adc	r23, r23
    30a6:	fd 01       	movw	r30, r26
    30a8:	e6 0f       	add	r30, r22
    30aa:	f7 1f       	adc	r31, r23
    30ac:	47 a5       	ldd	r20, Z+47	; 0x2f
    30ae:	50 a9       	ldd	r21, Z+48	; 0x30
    30b0:	61 a9       	ldd	r22, Z+49	; 0x31
    30b2:	72 a9       	ldd	r23, Z+50	; 0x32
    30b4:	4f 5f       	subi	r20, 0xFF	; 255
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255
    30b8:	6f 4f       	sbci	r22, 0xFF	; 255
    30ba:	7f 4f       	sbci	r23, 0xFF	; 255
    30bc:	47 a7       	std	Z+47, r20	; 0x2f
    30be:	50 ab       	std	Z+48, r21	; 0x30
    30c0:	61 ab       	std	Z+49, r22	; 0x31
    30c2:	72 ab       	std	Z+50, r23	; 0x32
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	1f c0       	rjmp	.+62     	; 0x3106 <xTaskGenericNotifyFromISR+0xfa>
    30c8:	66 0f       	add	r22, r22
    30ca:	77 1f       	adc	r23, r23
    30cc:	66 0f       	add	r22, r22
    30ce:	77 1f       	adc	r23, r23
    30d0:	fd 01       	movw	r30, r26
    30d2:	e6 0f       	add	r30, r22
    30d4:	f7 1f       	adc	r31, r23
    30d6:	27 a7       	std	Z+47, r18	; 0x2f
    30d8:	30 ab       	std	Z+48, r19	; 0x30
    30da:	41 ab       	std	Z+49, r20	; 0x31
    30dc:	52 ab       	std	Z+50, r21	; 0x32
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	12 c0       	rjmp	.+36     	; 0x3106 <xTaskGenericNotifyFromISR+0xfa>
    30e2:	92 30       	cpi	r25, 0x02	; 2
    30e4:	79 f0       	breq	.+30     	; 0x3104 <xTaskGenericNotifyFromISR+0xf8>
    30e6:	66 0f       	add	r22, r22
    30e8:	77 1f       	adc	r23, r23
    30ea:	66 0f       	add	r22, r22
    30ec:	77 1f       	adc	r23, r23
    30ee:	fd 01       	movw	r30, r26
    30f0:	e6 0f       	add	r30, r22
    30f2:	f7 1f       	adc	r31, r23
    30f4:	27 a7       	std	Z+47, r18	; 0x2f
    30f6:	30 ab       	std	Z+48, r19	; 0x30
    30f8:	41 ab       	std	Z+49, r20	; 0x31
    30fa:	52 ab       	std	Z+50, r21	; 0x32
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	03 c0       	rjmp	.+6      	; 0x3106 <xTaskGenericNotifyFromISR+0xfa>
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <xTaskGenericNotifyFromISR+0xfa>
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	91 30       	cpi	r25, 0x01	; 1
    3108:	09 f0       	breq	.+2      	; 0x310c <xTaskGenericNotifyFromISR+0x100>
    310a:	96 c0       	rjmp	.+300    	; 0x3238 <xTaskGenericNotifyFromISR+0x22c>
    310c:	90 91 da 10 	lds	r25, 0x10DA	; 0x8010da <uxSchedulerSuspended>
    3110:	91 11       	cpse	r25, r1
    3112:	5f c0       	rjmp	.+190    	; 0x31d2 <xTaskGenericNotifyFromISR+0x1c6>
    3114:	1c 96       	adiw	r26, 0x0c	; 12
    3116:	ed 91       	ld	r30, X+
    3118:	fc 91       	ld	r31, X
    311a:	1d 97       	sbiw	r26, 0x0d	; 13
    311c:	16 96       	adiw	r26, 0x06	; 6
    311e:	cd 91       	ld	r28, X+
    3120:	dc 91       	ld	r29, X
    3122:	17 97       	sbiw	r26, 0x07	; 7
    3124:	18 96       	adiw	r26, 0x08	; 8
    3126:	2d 91       	ld	r18, X+
    3128:	3c 91       	ld	r19, X
    312a:	19 97       	sbiw	r26, 0x09	; 9
    312c:	3f 83       	std	Y+7, r19	; 0x07
    312e:	2e 83       	std	Y+6, r18	; 0x06
    3130:	18 96       	adiw	r26, 0x08	; 8
    3132:	cd 91       	ld	r28, X+
    3134:	dc 91       	ld	r29, X
    3136:	19 97       	sbiw	r26, 0x09	; 9
    3138:	16 96       	adiw	r26, 0x06	; 6
    313a:	2d 91       	ld	r18, X+
    313c:	3c 91       	ld	r19, X
    313e:	17 97       	sbiw	r26, 0x07	; 7
    3140:	3d 83       	std	Y+5, r19	; 0x05
    3142:	2c 83       	std	Y+4, r18	; 0x04
    3144:	41 81       	ldd	r20, Z+1	; 0x01
    3146:	52 81       	ldd	r21, Z+2	; 0x02
    3148:	9d 01       	movw	r18, r26
    314a:	2e 5f       	subi	r18, 0xFE	; 254
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	42 17       	cp	r20, r18
    3150:	53 07       	cpc	r21, r19
    3152:	31 f4       	brne	.+12     	; 0x3160 <xTaskGenericNotifyFromISR+0x154>
    3154:	18 96       	adiw	r26, 0x08	; 8
    3156:	4d 91       	ld	r20, X+
    3158:	5c 91       	ld	r21, X
    315a:	19 97       	sbiw	r26, 0x09	; 9
    315c:	52 83       	std	Z+2, r21	; 0x02
    315e:	41 83       	std	Z+1, r20	; 0x01
    3160:	1d 96       	adiw	r26, 0x0d	; 13
    3162:	1c 92       	st	X, r1
    3164:	1e 92       	st	-X, r1
    3166:	1c 97       	sbiw	r26, 0x0c	; 12
    3168:	90 81       	ld	r25, Z
    316a:	91 50       	subi	r25, 0x01	; 1
    316c:	90 83       	st	Z, r25
    316e:	5a 96       	adiw	r26, 0x1a	; 26
    3170:	ec 91       	ld	r30, X
    3172:	5a 97       	sbiw	r26, 0x1a	; 26
    3174:	90 91 e9 10 	lds	r25, 0x10E9	; 0x8010e9 <uxTopReadyPriority>
    3178:	9e 17       	cp	r25, r30
    317a:	10 f4       	brcc	.+4      	; 0x3180 <xTaskGenericNotifyFromISR+0x174>
    317c:	e0 93 e9 10 	sts	0x10E9, r30	; 0x8010e9 <uxTopReadyPriority>
    3180:	9b e0       	ldi	r25, 0x0B	; 11
    3182:	9e 9f       	mul	r25, r30
    3184:	f0 01       	movw	r30, r0
    3186:	11 24       	eor	r1, r1
    3188:	e5 5d       	subi	r30, 0xD5	; 213
    318a:	fe 4e       	sbci	r31, 0xEE	; 238
    318c:	01 80       	ldd	r0, Z+1	; 0x01
    318e:	f2 81       	ldd	r31, Z+2	; 0x02
    3190:	e0 2d       	mov	r30, r0
    3192:	17 96       	adiw	r26, 0x07	; 7
    3194:	fc 93       	st	X, r31
    3196:	ee 93       	st	-X, r30
    3198:	16 97       	sbiw	r26, 0x06	; 6
    319a:	46 81       	ldd	r20, Z+6	; 0x06
    319c:	57 81       	ldd	r21, Z+7	; 0x07
    319e:	19 96       	adiw	r26, 0x09	; 9
    31a0:	5c 93       	st	X, r21
    31a2:	4e 93       	st	-X, r20
    31a4:	18 97       	sbiw	r26, 0x08	; 8
    31a6:	c6 81       	ldd	r28, Z+6	; 0x06
    31a8:	d7 81       	ldd	r29, Z+7	; 0x07
    31aa:	3d 83       	std	Y+5, r19	; 0x05
    31ac:	2c 83       	std	Y+4, r18	; 0x04
    31ae:	37 83       	std	Z+7, r19	; 0x07
    31b0:	26 83       	std	Z+6, r18	; 0x06
    31b2:	5a 96       	adiw	r26, 0x1a	; 26
    31b4:	ec 91       	ld	r30, X
    31b6:	5a 97       	sbiw	r26, 0x1a	; 26
    31b8:	9e 9f       	mul	r25, r30
    31ba:	f0 01       	movw	r30, r0
    31bc:	11 24       	eor	r1, r1
    31be:	e5 5d       	subi	r30, 0xD5	; 213
    31c0:	fe 4e       	sbci	r31, 0xEE	; 238
    31c2:	1d 96       	adiw	r26, 0x0d	; 13
    31c4:	fc 93       	st	X, r31
    31c6:	ee 93       	st	-X, r30
    31c8:	1c 97       	sbiw	r26, 0x0c	; 12
    31ca:	90 81       	ld	r25, Z
    31cc:	9f 5f       	subi	r25, 0xFF	; 255
    31ce:	90 83       	st	Z, r25
    31d0:	21 c0       	rjmp	.+66     	; 0x3214 <xTaskGenericNotifyFromISR+0x208>
    31d2:	66 e0       	ldi	r22, 0x06	; 6
    31d4:	71 e1       	ldi	r23, 0x11	; 17
    31d6:	fb 01       	movw	r30, r22
    31d8:	c1 81       	ldd	r28, Z+1	; 0x01
    31da:	d2 81       	ldd	r29, Z+2	; 0x02
    31dc:	53 96       	adiw	r26, 0x13	; 19
    31de:	dc 93       	st	X, r29
    31e0:	ce 93       	st	-X, r28
    31e2:	52 97       	sbiw	r26, 0x12	; 18
    31e4:	2e 81       	ldd	r18, Y+6	; 0x06
    31e6:	3f 81       	ldd	r19, Y+7	; 0x07
    31e8:	55 96       	adiw	r26, 0x15	; 21
    31ea:	3c 93       	st	X, r19
    31ec:	2e 93       	st	-X, r18
    31ee:	54 97       	sbiw	r26, 0x14	; 20
    31f0:	4e 81       	ldd	r20, Y+6	; 0x06
    31f2:	5f 81       	ldd	r21, Y+7	; 0x07
    31f4:	9d 01       	movw	r18, r26
    31f6:	22 5f       	subi	r18, 0xF2	; 242
    31f8:	3f 4f       	sbci	r19, 0xFF	; 255
    31fa:	fa 01       	movw	r30, r20
    31fc:	35 83       	std	Z+5, r19	; 0x05
    31fe:	24 83       	std	Z+4, r18	; 0x04
    3200:	3f 83       	std	Y+7, r19	; 0x07
    3202:	2e 83       	std	Y+6, r18	; 0x06
    3204:	59 96       	adiw	r26, 0x19	; 25
    3206:	7c 93       	st	X, r23
    3208:	6e 93       	st	-X, r22
    320a:	58 97       	sbiw	r26, 0x18	; 24
    320c:	fb 01       	movw	r30, r22
    320e:	90 81       	ld	r25, Z
    3210:	9f 5f       	subi	r25, 0xFF	; 255
    3212:	90 83       	st	Z, r25
    3214:	5a 96       	adiw	r26, 0x1a	; 26
    3216:	2c 91       	ld	r18, X
    3218:	e0 91 99 11 	lds	r30, 0x1199	; 0x801199 <pxCurrentTCB>
    321c:	f0 91 9a 11 	lds	r31, 0x119A	; 0x80119a <pxCurrentTCB+0x1>
    3220:	92 8d       	ldd	r25, Z+26	; 0x1a
    3222:	92 17       	cp	r25, r18
    3224:	48 f4       	brcc	.+18     	; 0x3238 <xTaskGenericNotifyFromISR+0x22c>
    3226:	c1 14       	cp	r12, r1
    3228:	d1 04       	cpc	r13, r1
    322a:	19 f0       	breq	.+6      	; 0x3232 <xTaskGenericNotifyFromISR+0x226>
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	f6 01       	movw	r30, r12
    3230:	90 83       	st	Z, r25
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	90 93 e3 10 	sts	0x10E3, r25	; 0x8010e3 <xYieldPending>
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	bf 90       	pop	r11
    3248:	af 90       	pop	r10
    324a:	9f 90       	pop	r9
    324c:	8f 90       	pop	r8
    324e:	08 95       	ret

00003250 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	21 f4       	brne	.+8      	; 0x325c <xTaskGenericNotifyStateClear+0xc>
    3254:	80 91 99 11 	lds	r24, 0x1199	; 0x801199 <pxCurrentTCB>
    3258:	90 91 9a 11 	lds	r25, 0x119A	; 0x80119a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	fc 01       	movw	r30, r24
    3266:	e6 0f       	add	r30, r22
    3268:	f7 1f       	adc	r31, r23
    326a:	23 a9       	ldd	r18, Z+51	; 0x33
    326c:	22 30       	cpi	r18, 0x02	; 2
    326e:	31 f4       	brne	.+12     	; 0x327c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3270:	fc 01       	movw	r30, r24
    3272:	e6 0f       	add	r30, r22
    3274:	f7 1f       	adc	r31, r23
    3276:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	01 c0       	rjmp	.+2      	; 0x327e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    327c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    327e:	0f 90       	pop	r0
    3280:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3282:	08 95       	ret

00003284 <prvGetNextExpireTime>:
    3284:	dc 01       	movw	r26, r24
    3286:	e0 91 a5 11 	lds	r30, 0x11A5	; 0x8011a5 <pxCurrentTimerList>
    328a:	f0 91 a6 11 	lds	r31, 0x11A6	; 0x8011a6 <pxCurrentTimerList+0x1>
    328e:	80 81       	ld	r24, Z
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	81 11       	cpse	r24, r1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9c 93       	st	X, r25
    3298:	91 11       	cpse	r25, r1
    329a:	08 c0       	rjmp	.+16     	; 0x32ac <prvGetNextExpireTime+0x28>
    329c:	07 80       	ldd	r0, Z+7	; 0x07
    329e:	f0 85       	ldd	r31, Z+8	; 0x08
    32a0:	e0 2d       	mov	r30, r0
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	08 95       	ret
    32ac:	60 e0       	ldi	r22, 0x00	; 0
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	cb 01       	movw	r24, r22
    32b2:	08 95       	ret

000032b4 <prvInsertTimerInActiveList>:
    32b4:	cf 92       	push	r12
    32b6:	df 92       	push	r13
    32b8:	ef 92       	push	r14
    32ba:	ff 92       	push	r15
    32bc:	0f 93       	push	r16
    32be:	1f 93       	push	r17
    32c0:	fc 01       	movw	r30, r24
    32c2:	42 83       	std	Z+2, r20	; 0x02
    32c4:	53 83       	std	Z+3, r21	; 0x03
    32c6:	64 83       	std	Z+4, r22	; 0x04
    32c8:	75 83       	std	Z+5, r23	; 0x05
    32ca:	93 87       	std	Z+11, r25	; 0x0b
    32cc:	82 87       	std	Z+10, r24	; 0x0a
    32ce:	04 17       	cp	r16, r20
    32d0:	15 07       	cpc	r17, r21
    32d2:	26 07       	cpc	r18, r22
    32d4:	37 07       	cpc	r19, r23
    32d6:	c0 f0       	brcs	.+48     	; 0x3308 <prvInsertTimerInActiveList+0x54>
    32d8:	0c 19       	sub	r16, r12
    32da:	1d 09       	sbc	r17, r13
    32dc:	2e 09       	sbc	r18, r14
    32de:	3f 09       	sbc	r19, r15
    32e0:	86 85       	ldd	r24, Z+14	; 0x0e
    32e2:	97 85       	ldd	r25, Z+15	; 0x0f
    32e4:	a0 89       	ldd	r26, Z+16	; 0x10
    32e6:	b1 89       	ldd	r27, Z+17	; 0x11
    32e8:	08 17       	cp	r16, r24
    32ea:	19 07       	cpc	r17, r25
    32ec:	2a 07       	cpc	r18, r26
    32ee:	3b 07       	cpc	r19, r27
    32f0:	00 f5       	brcc	.+64     	; 0x3332 <prvInsertTimerInActiveList+0x7e>
    32f2:	bf 01       	movw	r22, r30
    32f4:	6e 5f       	subi	r22, 0xFE	; 254
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <pxOverflowTimerList>
    32fc:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <pxOverflowTimerList+0x1>
    3300:	0e 94 19 07 	call	0xe32	; 0xe32 <vListInsert>
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	18 c0       	rjmp	.+48     	; 0x3338 <prvInsertTimerInActiveList+0x84>
    3308:	0c 15       	cp	r16, r12
    330a:	1d 05       	cpc	r17, r13
    330c:	2e 05       	cpc	r18, r14
    330e:	3f 05       	cpc	r19, r15
    3310:	28 f4       	brcc	.+10     	; 0x331c <prvInsertTimerInActiveList+0x68>
    3312:	4c 15       	cp	r20, r12
    3314:	5d 05       	cpc	r21, r13
    3316:	6e 05       	cpc	r22, r14
    3318:	7f 05       	cpc	r23, r15
    331a:	68 f4       	brcc	.+26     	; 0x3336 <prvInsertTimerInActiveList+0x82>
    331c:	bf 01       	movw	r22, r30
    331e:	6e 5f       	subi	r22, 0xFE	; 254
    3320:	7f 4f       	sbci	r23, 0xFF	; 255
    3322:	80 91 a5 11 	lds	r24, 0x11A5	; 0x8011a5 <pxCurrentTimerList>
    3326:	90 91 a6 11 	lds	r25, 0x11A6	; 0x8011a6 <pxCurrentTimerList+0x1>
    332a:	0e 94 19 07 	call	0xe32	; 0xe32 <vListInsert>
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	03 c0       	rjmp	.+6      	; 0x3338 <prvInsertTimerInActiveList+0x84>
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <prvInsertTimerInActiveList+0x84>
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	df 90       	pop	r13
    3342:	cf 90       	pop	r12
    3344:	08 95       	ret

00003346 <prvCheckForValidListAndQueue>:
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	0f 92       	push	r0
    334c:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <xTimerQueue>
    3350:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <xTimerQueue+0x1>
    3354:	89 2b       	or	r24, r25
    3356:	e9 f4       	brne	.+58     	; 0x3392 <prvCheckForValidListAndQueue+0x4c>
    3358:	82 eb       	ldi	r24, 0xB2	; 178
    335a:	91 e1       	ldi	r25, 0x11	; 17
    335c:	0e 94 04 07 	call	0xe08	; 0xe08 <vListInitialise>
    3360:	87 ea       	ldi	r24, 0xA7	; 167
    3362:	91 e1       	ldi	r25, 0x11	; 17
    3364:	0e 94 04 07 	call	0xe08	; 0xe08 <vListInitialise>
    3368:	82 eb       	ldi	r24, 0xB2	; 178
    336a:	91 e1       	ldi	r25, 0x11	; 17
    336c:	90 93 a6 11 	sts	0x11A6, r25	; 0x8011a6 <pxCurrentTimerList+0x1>
    3370:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <pxCurrentTimerList>
    3374:	87 ea       	ldi	r24, 0xA7	; 167
    3376:	91 e1       	ldi	r25, 0x11	; 17
    3378:	90 93 a4 11 	sts	0x11A4, r25	; 0x8011a4 <pxOverflowTimerList+0x1>
    337c:	80 93 a3 11 	sts	0x11A3, r24	; 0x8011a3 <pxOverflowTimerList>
    3380:	40 e0       	ldi	r20, 0x00	; 0
    3382:	67 e0       	ldi	r22, 0x07	; 7
    3384:	8a e0       	ldi	r24, 0x0A	; 10
    3386:	0e 94 b7 09 	call	0x136e	; 0x136e <xQueueGenericCreate>
    338a:	90 93 a2 11 	sts	0x11A2, r25	; 0x8011a2 <xTimerQueue+0x1>
    338e:	80 93 a1 11 	sts	0x11A1, r24	; 0x8011a1 <xTimerQueue>
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	08 95       	ret

00003398 <xTimerCreateTimerTask>:
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	d3 df       	rcall	.-90     	; 0x3346 <prvCheckForValidListAndQueue>
    33a0:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <xTimerQueue>
    33a4:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <xTimerQueue+0x1>
    33a8:	89 2b       	or	r24, r25
    33aa:	91 f0       	breq	.+36     	; 0x33d0 <xTimerCreateTimerTask+0x38>
    33ac:	0f 2e       	mov	r0, r31
    33ae:	ff e9       	ldi	r31, 0x9F	; 159
    33b0:	ef 2e       	mov	r14, r31
    33b2:	f1 e1       	ldi	r31, 0x11	; 17
    33b4:	ff 2e       	mov	r15, r31
    33b6:	f0 2d       	mov	r31, r0
    33b8:	03 e0       	ldi	r16, 0x03	; 3
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 ec       	ldi	r20, 0xC0	; 192
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	62 e3       	ldi	r22, 0x32	; 50
    33c4:	74 e0       	ldi	r23, 0x04	; 4
    33c6:	88 e5       	ldi	r24, 0x58	; 88
    33c8:	91 e0       	ldi	r25, 0x01	; 1
    33ca:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <xTaskCreate>
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <xTimerCreateTimerTask+0x3a>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	ef 90       	pop	r14
    33d8:	08 95       	ret

000033da <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    33da:	8f 92       	push	r8
    33dc:	9f 92       	push	r9
    33de:	af 92       	push	r10
    33e0:	bf 92       	push	r11
    33e2:	cf 92       	push	r12
    33e4:	df 92       	push	r13
    33e6:	ef 92       	push	r14
    33e8:	ff 92       	push	r15
    33ea:	0f 93       	push	r16
    33ec:	1f 93       	push	r17
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	27 97       	sbiw	r28, 0x07	; 7
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3402:	e0 91 a1 11 	lds	r30, 0x11A1	; 0x8011a1 <xTimerQueue>
    3406:	f0 91 a2 11 	lds	r31, 0x11A2	; 0x8011a2 <xTimerQueue+0x1>
    340a:	30 97       	sbiw	r30, 0x00	; 0
    340c:	81 f1       	breq	.+96     	; 0x346e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    340e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3410:	2a 83       	std	Y+2, r18	; 0x02
    3412:	3b 83       	std	Y+3, r19	; 0x03
    3414:	4c 83       	std	Y+4, r20	; 0x04
    3416:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3418:	9f 83       	std	Y+7, r25	; 0x07
    341a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    341c:	66 30       	cpi	r22, 0x06	; 6
    341e:	f4 f4       	brge	.+60     	; 0x345c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3420:	c4 db       	rcall	.-2168   	; 0x2baa <xTaskGetSchedulerState>
    3422:	82 30       	cpi	r24, 0x02	; 2
    3424:	69 f4       	brne	.+26     	; 0x3440 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3426:	00 e0       	ldi	r16, 0x00	; 0
    3428:	a7 01       	movw	r20, r14
    342a:	96 01       	movw	r18, r12
    342c:	be 01       	movw	r22, r28
    342e:	6f 5f       	subi	r22, 0xFF	; 255
    3430:	7f 4f       	sbci	r23, 0xFF	; 255
    3432:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <xTimerQueue>
    3436:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <xTimerQueue+0x1>
    343a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <xQueueGenericSend>
    343e:	18 c0       	rjmp	.+48     	; 0x3470 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3440:	00 e0       	ldi	r16, 0x00	; 0
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	a9 01       	movw	r20, r18
    3448:	be 01       	movw	r22, r28
    344a:	6f 5f       	subi	r22, 0xFF	; 255
    344c:	7f 4f       	sbci	r23, 0xFF	; 255
    344e:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <xTimerQueue>
    3452:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <xTimerQueue+0x1>
    3456:	0e 94 da 09 	call	0x13b4	; 0x13b4 <xQueueGenericSend>
    345a:	0a c0       	rjmp	.+20     	; 0x3470 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	a8 01       	movw	r20, r16
    3460:	be 01       	movw	r22, r28
    3462:	6f 5f       	subi	r22, 0xFF	; 255
    3464:	7f 4f       	sbci	r23, 0xFF	; 255
    3466:	cf 01       	movw	r24, r30
    3468:	0e 94 87 0a 	call	0x150e	; 0x150e <xQueueGenericSendFromISR>
    346c:	01 c0       	rjmp	.+2      	; 0x3470 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    346e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3470:	27 96       	adiw	r28, 0x07	; 7
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	df 91       	pop	r29
    347e:	cf 91       	pop	r28
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    3484:	ff 90       	pop	r15
    3486:	ef 90       	pop	r14
    3488:	df 90       	pop	r13
    348a:	cf 90       	pop	r12
    348c:	bf 90       	pop	r11
    348e:	af 90       	pop	r10
    3490:	9f 90       	pop	r9
    3492:	8f 90       	pop	r8
    3494:	08 95       	ret

00003496 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3496:	8f 92       	push	r8
    3498:	9f 92       	push	r9
    349a:	af 92       	push	r10
    349c:	bf 92       	push	r11
    349e:	cf 92       	push	r12
    34a0:	df 92       	push	r13
    34a2:	ef 92       	push	r14
    34a4:	ff 92       	push	r15
    34a6:	0f 93       	push	r16
    34a8:	1f 93       	push	r17
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    34ae:	3b c0       	rjmp	.+118    	; 0x3526 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    34b0:	07 80       	ldd	r0, Z+7	; 0x07
    34b2:	f0 85       	ldd	r31, Z+8	; 0x08
    34b4:	e0 2d       	mov	r30, r0
    34b6:	80 80       	ld	r8, Z
    34b8:	91 80       	ldd	r9, Z+1	; 0x01
    34ba:	a2 80       	ldd	r10, Z+2	; 0x02
    34bc:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34be:	c0 85       	ldd	r28, Z+8	; 0x08
    34c0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34c2:	8e 01       	movw	r16, r28
    34c4:	0e 5f       	subi	r16, 0xFE	; 254
    34c6:	1f 4f       	sbci	r17, 0xFF	; 255
    34c8:	c8 01       	movw	r24, r16
    34ca:	0e 94 56 07 	call	0xeac	; 0xeac <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    34ce:	ec 89       	ldd	r30, Y+20	; 0x14
    34d0:	fd 89       	ldd	r31, Y+21	; 0x15
    34d2:	ce 01       	movw	r24, r28
    34d4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34d6:	8e 89       	ldd	r24, Y+22	; 0x16
    34d8:	82 ff       	sbrs	r24, 2
    34da:	25 c0       	rjmp	.+74     	; 0x3526 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    34dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    34de:	9f 85       	ldd	r25, Y+15	; 0x0f
    34e0:	a8 89       	ldd	r26, Y+16	; 0x10
    34e2:	b9 89       	ldd	r27, Y+17	; 0x11
    34e4:	88 0d       	add	r24, r8
    34e6:	99 1d       	adc	r25, r9
    34e8:	aa 1d       	adc	r26, r10
    34ea:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    34ec:	88 16       	cp	r8, r24
    34ee:	99 06       	cpc	r9, r25
    34f0:	aa 06       	cpc	r10, r26
    34f2:	bb 06       	cpc	r11, r27
    34f4:	70 f4       	brcc	.+28     	; 0x3512 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    34f6:	8a 83       	std	Y+2, r24	; 0x02
    34f8:	9b 83       	std	Y+3, r25	; 0x03
    34fa:	ac 83       	std	Y+4, r26	; 0x04
    34fc:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    34fe:	db 87       	std	Y+11, r29	; 0x0b
    3500:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3502:	b8 01       	movw	r22, r16
    3504:	80 91 a5 11 	lds	r24, 0x11A5	; 0x8011a5 <pxCurrentTimerList>
    3508:	90 91 a6 11 	lds	r25, 0x11A6	; 0x8011a6 <pxCurrentTimerList+0x1>
    350c:	0e 94 19 07 	call	0xe32	; 0xe32 <vListInsert>
    3510:	0a c0       	rjmp	.+20     	; 0x3526 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3512:	c1 2c       	mov	r12, r1
    3514:	d1 2c       	mov	r13, r1
    3516:	76 01       	movw	r14, r12
    3518:	00 e0       	ldi	r16, 0x00	; 0
    351a:	10 e0       	ldi	r17, 0x00	; 0
    351c:	a5 01       	movw	r20, r10
    351e:	94 01       	movw	r18, r8
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	ce 01       	movw	r24, r28
    3524:	5a df       	rcall	.-332    	; 0x33da <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3526:	e0 91 a5 11 	lds	r30, 0x11A5	; 0x8011a5 <pxCurrentTimerList>
    352a:	f0 91 a6 11 	lds	r31, 0x11A6	; 0x8011a6 <pxCurrentTimerList+0x1>
    352e:	80 81       	ld	r24, Z
    3530:	81 11       	cpse	r24, r1
    3532:	be cf       	rjmp	.-132    	; 0x34b0 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3534:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <pxOverflowTimerList>
    3538:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <pxOverflowTimerList+0x1>
    353c:	90 93 a6 11 	sts	0x11A6, r25	; 0x8011a6 <pxCurrentTimerList+0x1>
    3540:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3544:	f0 93 a4 11 	sts	0x11A4, r31	; 0x8011a4 <pxOverflowTimerList+0x1>
    3548:	e0 93 a3 11 	sts	0x11A3, r30	; 0x8011a3 <pxOverflowTimerList>
    }
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	ff 90       	pop	r15
    3556:	ef 90       	pop	r14
    3558:	df 90       	pop	r13
    355a:	cf 90       	pop	r12
    355c:	bf 90       	pop	r11
    355e:	af 90       	pop	r10
    3560:	9f 90       	pop	r9
    3562:	8f 90       	pop	r8
    3564:	08 95       	ret

00003566 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3566:	cf 92       	push	r12
    3568:	df 92       	push	r13
    356a:	ef 92       	push	r14
    356c:	ff 92       	push	r15
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3574:	0e 94 6e 10 	call	0x20dc	; 0x20dc <xTaskGetTickCount>
    3578:	6b 01       	movw	r12, r22
    357a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    357c:	80 91 9b 11 	lds	r24, 0x119B	; 0x80119b <xLastTime.2436>
    3580:	90 91 9c 11 	lds	r25, 0x119C	; 0x80119c <xLastTime.2436+0x1>
    3584:	a0 91 9d 11 	lds	r26, 0x119D	; 0x80119d <xLastTime.2436+0x2>
    3588:	b0 91 9e 11 	lds	r27, 0x119E	; 0x80119e <xLastTime.2436+0x3>
    358c:	c8 16       	cp	r12, r24
    358e:	d9 06       	cpc	r13, r25
    3590:	ea 06       	cpc	r14, r26
    3592:	fb 06       	cpc	r15, r27
    3594:	20 f4       	brcc	.+8      	; 0x359e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3596:	7f df       	rcall	.-258    	; 0x3496 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	88 83       	st	Y, r24
    359c:	01 c0       	rjmp	.+2      	; 0x35a0 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    359e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    35a0:	c0 92 9b 11 	sts	0x119B, r12	; 0x80119b <xLastTime.2436>
    35a4:	d0 92 9c 11 	sts	0x119C, r13	; 0x80119c <xLastTime.2436+0x1>
    35a8:	e0 92 9d 11 	sts	0x119D, r14	; 0x80119d <xLastTime.2436+0x2>
    35ac:	f0 92 9e 11 	sts	0x119E, r15	; 0x80119e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    35b0:	c7 01       	movw	r24, r14
    35b2:	b6 01       	movw	r22, r12
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	df 90       	pop	r13
    35be:	cf 90       	pop	r12
    35c0:	08 95       	ret

000035c2 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    35c2:	4f 92       	push	r4
    35c4:	5f 92       	push	r5
    35c6:	6f 92       	push	r6
    35c8:	7f 92       	push	r7
    35ca:	8f 92       	push	r8
    35cc:	9f 92       	push	r9
    35ce:	af 92       	push	r10
    35d0:	bf 92       	push	r11
    35d2:	cf 92       	push	r12
    35d4:	df 92       	push	r13
    35d6:	ef 92       	push	r14
    35d8:	ff 92       	push	r15
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	cf 93       	push	r28
    35e0:	df 93       	push	r29
    35e2:	4b 01       	movw	r8, r22
    35e4:	5c 01       	movw	r10, r24
    35e6:	29 01       	movw	r4, r18
    35e8:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    35ea:	e0 91 a5 11 	lds	r30, 0x11A5	; 0x8011a5 <pxCurrentTimerList>
    35ee:	f0 91 a6 11 	lds	r31, 0x11A6	; 0x8011a6 <pxCurrentTimerList+0x1>
    35f2:	07 80       	ldd	r0, Z+7	; 0x07
    35f4:	f0 85       	ldd	r31, Z+8	; 0x08
    35f6:	e0 2d       	mov	r30, r0
    35f8:	c0 85       	ldd	r28, Z+8	; 0x08
    35fa:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    35fc:	ce 01       	movw	r24, r28
    35fe:	02 96       	adiw	r24, 0x02	; 2
    3600:	0e 94 56 07 	call	0xeac	; 0xeac <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3604:	8e 89       	ldd	r24, Y+22	; 0x16
    3606:	82 ff       	sbrs	r24, 2
    3608:	1b c0       	rjmp	.+54     	; 0x3640 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    360a:	4e 85       	ldd	r20, Y+14	; 0x0e
    360c:	5f 85       	ldd	r21, Y+15	; 0x0f
    360e:	68 89       	ldd	r22, Y+16	; 0x10
    3610:	79 89       	ldd	r23, Y+17	; 0x11
    3612:	48 0d       	add	r20, r8
    3614:	59 1d       	adc	r21, r9
    3616:	6a 1d       	adc	r22, r10
    3618:	7b 1d       	adc	r23, r11
    361a:	75 01       	movw	r14, r10
    361c:	64 01       	movw	r12, r8
    361e:	93 01       	movw	r18, r6
    3620:	82 01       	movw	r16, r4
    3622:	ce 01       	movw	r24, r28
    3624:	47 de       	rcall	.-882    	; 0x32b4 <prvInsertTimerInActiveList>
    3626:	88 23       	and	r24, r24
    3628:	69 f0       	breq	.+26     	; 0x3644 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    362a:	c1 2c       	mov	r12, r1
    362c:	d1 2c       	mov	r13, r1
    362e:	76 01       	movw	r14, r12
    3630:	00 e0       	ldi	r16, 0x00	; 0
    3632:	10 e0       	ldi	r17, 0x00	; 0
    3634:	a5 01       	movw	r20, r10
    3636:	94 01       	movw	r18, r8
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	ce 01       	movw	r24, r28
    363c:	ce de       	rcall	.-612    	; 0x33da <xTimerGenericCommand>
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3640:	8e 7f       	andi	r24, 0xFE	; 254
    3642:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3644:	ec 89       	ldd	r30, Y+20	; 0x14
    3646:	fd 89       	ldd	r31, Y+21	; 0x15
    3648:	ce 01       	movw	r24, r28
    364a:	19 95       	eicall
    }
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	1f 91       	pop	r17
    3652:	0f 91       	pop	r16
    3654:	ff 90       	pop	r15
    3656:	ef 90       	pop	r14
    3658:	df 90       	pop	r13
    365a:	cf 90       	pop	r12
    365c:	bf 90       	pop	r11
    365e:	af 90       	pop	r10
    3660:	9f 90       	pop	r9
    3662:	8f 90       	pop	r8
    3664:	7f 90       	pop	r7
    3666:	6f 90       	pop	r6
    3668:	5f 90       	pop	r5
    366a:	4f 90       	pop	r4
    366c:	08 95       	ret

0000366e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    366e:	8f 92       	push	r8
    3670:	9f 92       	push	r9
    3672:	af 92       	push	r10
    3674:	bf 92       	push	r11
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	1f 93       	push	r17
    3680:	cf 93       	push	r28
    3682:	df 93       	push	r29
    3684:	1f 92       	push	r1
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	6b 01       	movw	r12, r22
    368c:	7c 01       	movw	r14, r24
    368e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3690:	0e 94 68 10 	call	0x20d0	; 0x20d0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3694:	ce 01       	movw	r24, r28
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	66 df       	rcall	.-308    	; 0x3566 <prvSampleTimeNow>
    369a:	4b 01       	movw	r8, r22
    369c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	81 11       	cpse	r24, r1
    36a2:	2d c0       	rjmp	.+90     	; 0x36fe <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    36a4:	11 11       	cpse	r17, r1
    36a6:	0d c0       	rjmp	.+26     	; 0x36c2 <prvProcessTimerOrBlockTask+0x54>
    36a8:	8c 14       	cp	r8, r12
    36aa:	9d 04       	cpc	r9, r13
    36ac:	ae 04       	cpc	r10, r14
    36ae:	bf 04       	cpc	r11, r15
    36b0:	40 f0       	brcs	.+16     	; 0x36c2 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    36b2:	0e 94 a8 11 	call	0x2350	; 0x2350 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    36b6:	a5 01       	movw	r20, r10
    36b8:	94 01       	movw	r18, r8
    36ba:	c7 01       	movw	r24, r14
    36bc:	b6 01       	movw	r22, r12
    36be:	81 df       	rcall	.-254    	; 0x35c2 <prvProcessExpiredTimer>
    36c0:	20 c0       	rjmp	.+64     	; 0x3702 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    36c2:	11 23       	and	r17, r17
    36c4:	41 f0       	breq	.+16     	; 0x36d6 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    36c6:	e0 91 a3 11 	lds	r30, 0x11A3	; 0x8011a3 <pxOverflowTimerList>
    36ca:	f0 91 a4 11 	lds	r31, 0x11A4	; 0x8011a4 <pxOverflowTimerList+0x1>
    36ce:	80 81       	ld	r24, Z
    36d0:	11 e0       	ldi	r17, 0x01	; 1
    36d2:	81 11       	cpse	r24, r1
    36d4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    36d6:	b7 01       	movw	r22, r14
    36d8:	a6 01       	movw	r20, r12
    36da:	48 19       	sub	r20, r8
    36dc:	59 09       	sbc	r21, r9
    36de:	6a 09       	sbc	r22, r10
    36e0:	7b 09       	sbc	r23, r11
    36e2:	21 2f       	mov	r18, r17
    36e4:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <xTimerQueue>
    36e8:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <xTimerQueue+0x1>
    36ec:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    36f0:	0e 94 a8 11 	call	0x2350	; 0x2350 <xTaskResumeAll>
    36f4:	81 11       	cpse	r24, r1
    36f6:	05 c0       	rjmp	.+10     	; 0x3702 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    36f8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vPortYield>
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    36fe:	0e 94 a8 11 	call	0x2350	; 0x2350 <xTaskResumeAll>
            }
        }
    }
    3702:	0f 90       	pop	r0
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	1f 91       	pop	r17
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	df 90       	pop	r13
    3710:	cf 90       	pop	r12
    3712:	bf 90       	pop	r11
    3714:	af 90       	pop	r10
    3716:	9f 90       	pop	r9
    3718:	8f 90       	pop	r8
    371a:	08 95       	ret

0000371c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    371c:	af 92       	push	r10
    371e:	bf 92       	push	r11
    3720:	cf 92       	push	r12
    3722:	df 92       	push	r13
    3724:	ef 92       	push	r14
    3726:	ff 92       	push	r15
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	28 97       	sbiw	r28, 0x08	; 8
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3740:	82 c0       	rjmp	.+260    	; 0x3846 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	88 23       	and	r24, r24
    3746:	0c f4       	brge	.+2      	; 0x374a <prvProcessReceivedCommands+0x2e>
    3748:	7e c0       	rjmp	.+252    	; 0x3846 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    374a:	ae 80       	ldd	r10, Y+6	; 0x06
    374c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    374e:	d5 01       	movw	r26, r10
    3750:	1c 96       	adiw	r26, 0x0c	; 12
    3752:	8d 91       	ld	r24, X+
    3754:	9c 91       	ld	r25, X
    3756:	1d 97       	sbiw	r26, 0x0d	; 13
    3758:	89 2b       	or	r24, r25
    375a:	21 f0       	breq	.+8      	; 0x3764 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    375c:	c5 01       	movw	r24, r10
    375e:	02 96       	adiw	r24, 0x02	; 2
    3760:	0e 94 56 07 	call	0xeac	; 0xeac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3764:	ce 01       	movw	r24, r28
    3766:	08 96       	adiw	r24, 0x08	; 8
    3768:	fe de       	rcall	.-516    	; 0x3566 <prvSampleTimeNow>
    376a:	8b 01       	movw	r16, r22
    376c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    376e:	e9 81       	ldd	r30, Y+1	; 0x01
    3770:	0e 2e       	mov	r0, r30
    3772:	00 0c       	add	r0, r0
    3774:	ff 0b       	sbc	r31, r31
    3776:	ea 30       	cpi	r30, 0x0A	; 10
    3778:	f1 05       	cpc	r31, r1
    377a:	08 f0       	brcs	.+2      	; 0x377e <prvProcessReceivedCommands+0x62>
    377c:	64 c0       	rjmp	.+200    	; 0x3846 <prvProcessReceivedCommands+0x12a>
    377e:	88 27       	eor	r24, r24
    3780:	ee 58       	subi	r30, 0x8E	; 142
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	8f 4f       	sbci	r24, 0xFF	; 255
    3786:	0c 94 c0 2c 	jmp	0x5980	; 0x5980 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    378a:	f5 01       	movw	r30, r10
    378c:	86 89       	ldd	r24, Z+22	; 0x16
    378e:	81 60       	ori	r24, 0x01	; 1
    3790:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3792:	ca 80       	ldd	r12, Y+2	; 0x02
    3794:	db 80       	ldd	r13, Y+3	; 0x03
    3796:	ec 80       	ldd	r14, Y+4	; 0x04
    3798:	fd 80       	ldd	r15, Y+5	; 0x05
    379a:	46 85       	ldd	r20, Z+14	; 0x0e
    379c:	57 85       	ldd	r21, Z+15	; 0x0f
    379e:	60 89       	ldd	r22, Z+16	; 0x10
    37a0:	71 89       	ldd	r23, Z+17	; 0x11
    37a2:	4c 0d       	add	r20, r12
    37a4:	5d 1d       	adc	r21, r13
    37a6:	6e 1d       	adc	r22, r14
    37a8:	7f 1d       	adc	r23, r15
    37aa:	c5 01       	movw	r24, r10
    37ac:	83 dd       	rcall	.-1274   	; 0x32b4 <prvInsertTimerInActiveList>
    37ae:	88 23       	and	r24, r24
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <prvProcessReceivedCommands+0x98>
    37b2:	49 c0       	rjmp	.+146    	; 0x3846 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37b4:	d5 01       	movw	r26, r10
    37b6:	54 96       	adiw	r26, 0x14	; 20
    37b8:	ed 91       	ld	r30, X+
    37ba:	fc 91       	ld	r31, X
    37bc:	55 97       	sbiw	r26, 0x15	; 21
    37be:	c5 01       	movw	r24, r10
    37c0:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37c2:	f5 01       	movw	r30, r10
    37c4:	86 89       	ldd	r24, Z+22	; 0x16
    37c6:	82 ff       	sbrs	r24, 2
    37c8:	3e c0       	rjmp	.+124    	; 0x3846 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    37ca:	4a 81       	ldd	r20, Y+2	; 0x02
    37cc:	5b 81       	ldd	r21, Y+3	; 0x03
    37ce:	6c 81       	ldd	r22, Y+4	; 0x04
    37d0:	7d 81       	ldd	r23, Y+5	; 0x05
    37d2:	86 85       	ldd	r24, Z+14	; 0x0e
    37d4:	97 85       	ldd	r25, Z+15	; 0x0f
    37d6:	a0 89       	ldd	r26, Z+16	; 0x10
    37d8:	b1 89       	ldd	r27, Z+17	; 0x11
    37da:	9a 01       	movw	r18, r20
    37dc:	ab 01       	movw	r20, r22
    37de:	28 0f       	add	r18, r24
    37e0:	39 1f       	adc	r19, r25
    37e2:	4a 1f       	adc	r20, r26
    37e4:	5b 1f       	adc	r21, r27
    37e6:	c1 2c       	mov	r12, r1
    37e8:	d1 2c       	mov	r13, r1
    37ea:	76 01       	movw	r14, r12
    37ec:	00 e0       	ldi	r16, 0x00	; 0
    37ee:	10 e0       	ldi	r17, 0x00	; 0
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	c5 01       	movw	r24, r10
    37f4:	f2 dd       	rcall	.-1052   	; 0x33da <xTimerGenericCommand>
    37f6:	27 c0       	rjmp	.+78     	; 0x3846 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    37f8:	d5 01       	movw	r26, r10
    37fa:	56 96       	adiw	r26, 0x16	; 22
    37fc:	8c 91       	ld	r24, X
    37fe:	56 97       	sbiw	r26, 0x16	; 22
    3800:	8e 7f       	andi	r24, 0xFE	; 254
    3802:	56 96       	adiw	r26, 0x16	; 22
    3804:	8c 93       	st	X, r24
                        break;
    3806:	1f c0       	rjmp	.+62     	; 0x3846 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3808:	f5 01       	movw	r30, r10
    380a:	86 89       	ldd	r24, Z+22	; 0x16
    380c:	81 60       	ori	r24, 0x01	; 1
    380e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3810:	4a 81       	ldd	r20, Y+2	; 0x02
    3812:	5b 81       	ldd	r21, Y+3	; 0x03
    3814:	6c 81       	ldd	r22, Y+4	; 0x04
    3816:	7d 81       	ldd	r23, Y+5	; 0x05
    3818:	46 87       	std	Z+14, r20	; 0x0e
    381a:	57 87       	std	Z+15, r21	; 0x0f
    381c:	60 8b       	std	Z+16, r22	; 0x10
    381e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3820:	40 0f       	add	r20, r16
    3822:	51 1f       	adc	r21, r17
    3824:	62 1f       	adc	r22, r18
    3826:	73 1f       	adc	r23, r19
    3828:	68 01       	movw	r12, r16
    382a:	79 01       	movw	r14, r18
    382c:	c5 01       	movw	r24, r10
    382e:	42 dd       	rcall	.-1404   	; 0x32b4 <prvInsertTimerInActiveList>
                        break;
    3830:	0a c0       	rjmp	.+20     	; 0x3846 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3832:	f5 01       	movw	r30, r10
    3834:	86 89       	ldd	r24, Z+22	; 0x16
    3836:	81 fd       	sbrc	r24, 1
    3838:	04 c0       	rjmp	.+8      	; 0x3842 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    383a:	c5 01       	movw	r24, r10
    383c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vPortFree>
    3840:	02 c0       	rjmp	.+4      	; 0x3846 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3842:	8e 7f       	andi	r24, 0xFE	; 254
    3844:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	a9 01       	movw	r20, r18
    384c:	be 01       	movw	r22, r28
    384e:	6f 5f       	subi	r22, 0xFF	; 255
    3850:	7f 4f       	sbci	r23, 0xFF	; 255
    3852:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <xTimerQueue>
    3856:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <xTimerQueue+0x1>
    385a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <xQueueReceive>
    385e:	81 11       	cpse	r24, r1
    3860:	70 cf       	rjmp	.-288    	; 0x3742 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3862:	28 96       	adiw	r28, 0x08	; 8
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	ff 90       	pop	r15
    3878:	ef 90       	pop	r14
    387a:	df 90       	pop	r13
    387c:	cf 90       	pop	r12
    387e:	bf 90       	pop	r11
    3880:	af 90       	pop	r10
    3882:	08 95       	ret

00003884 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3884:	08 95       	ret

00003886 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3886:	84 b1       	in	r24, 0x04	; 4
    3888:	80 68       	ori	r24, 0x80	; 128
    388a:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    388c:	85 b1       	in	r24, 0x05	; 5
    388e:	80 68       	ori	r24, 0x80	; 128
    3890:	85 b9       	out	0x05, r24	; 5
    3892:	08 95       	ret

00003894 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3894:	83 b1       	in	r24, 0x03	; 3
    3896:	80 68       	ori	r24, 0x80	; 128
    3898:	83 b9       	out	0x03, r24	; 3
    389a:	08 95       	ret

0000389c <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    389c:	f4 df       	rcall	.-24     	; 0x3886 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    389e:	2f ef       	ldi	r18, 0xFF	; 255
    38a0:	80 e7       	ldi	r24, 0x70	; 112
    38a2:	92 e0       	ldi	r25, 0x02	; 2
    38a4:	21 50       	subi	r18, 0x01	; 1
    38a6:	80 40       	sbci	r24, 0x00	; 0
    38a8:	90 40       	sbci	r25, 0x00	; 0
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <vApplicationMallocFailedHook+0x8>
    38ac:	00 c0       	rjmp	.+0      	; 0x38ae <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    38ae:	00 00       	nop
    38b0:	f1 df       	rcall	.-30     	; 0x3894 <prvBlinkMainLed>
    38b2:	f5 cf       	rjmp	.-22     	; 0x389e <vApplicationMallocFailedHook+0x2>

000038b4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    38b4:	e8 df       	rcall	.-48     	; 0x3886 <prvSetMainLedOn>
    38b6:	2f ef       	ldi	r18, 0xFF	; 255
    38b8:	87 ea       	ldi	r24, 0xA7	; 167
    38ba:	91 e6       	ldi	r25, 0x61	; 97
    38bc:	21 50       	subi	r18, 0x01	; 1
    38be:	80 40       	sbci	r24, 0x00	; 0
    38c0:	90 40       	sbci	r25, 0x00	; 0
    38c2:	e1 f7       	brne	.-8      	; 0x38bc <vApplicationStackOverflowHook+0x8>
    38c4:	00 c0       	rjmp	.+0      	; 0x38c6 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    38c6:	00 00       	nop
    38c8:	e5 df       	rcall	.-54     	; 0x3894 <prvBlinkMainLed>
    38ca:	f5 cf       	rjmp	.-22     	; 0x38b6 <vApplicationStackOverflowHook+0x2>

000038cc <createTasksForSensors>:
	createTasksForSensors();
	lora_handler_initialize(4, temperature_sensor, co2_sensor);
}

void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    38cc:	60 91 bd 11 	lds	r22, 0x11BD	; 0x8011bd <taskReadyBits>
    38d0:	70 91 be 11 	lds	r23, 0x11BE	; 0x8011be <taskReadyBits+0x1>
    38d4:	21 e0       	ldi	r18, 0x01	; 1
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e0       	ldi	r20, 0x00	; 0
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	83 e0       	ldi	r24, 0x03	; 3
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	0e 94 b3 02 	call	0x566	; 0x566 <createTemp>
    38e4:	90 93 b9 12 	sts	0x12B9, r25	; 0x8012b9 <temperature_sensor+0x1>
    38e8:	80 93 b8 12 	sts	0x12B8, r24	; 0x8012b8 <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    38ec:	60 91 bd 11 	lds	r22, 0x11BD	; 0x8011bd <taskReadyBits>
    38f0:	70 91 be 11 	lds	r23, 0x11BE	; 0x8011be <taskReadyBits+0x1>
    38f4:	22 e0       	ldi	r18, 0x02	; 2
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	83 e0       	ldi	r24, 0x03	; 3
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	0e 94 01 02 	call	0x402	; 0x402 <createCO2>
    3904:	90 93 bd 12 	sts	0x12BD, r25	; 0x8012bd <co2_sensor+0x1>
    3908:	80 93 bc 12 	sts	0x12BC, r24	; 0x8012bc <co2_sensor>
    390c:	08 95       	ret

0000390e <create_tasks_and_semaphores>:
#define BIT_TEMP_READY (1 << 0)
#define BIT_CO2_READY (1 << 1)


void create_tasks_and_semaphores(void)
{
    390e:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3910:	80 91 ba 12 	lds	r24, 0x12BA	; 0x8012ba <xTestSemaphore>
    3914:	90 91 bb 12 	lds	r25, 0x12BB	; 0x8012bb <xTestSemaphore+0x1>
    3918:	89 2b       	or	r24, r25
    391a:	89 f4       	brne	.+34     	; 0x393e <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <xQueueCreateMutex>
    3922:	90 93 bb 12 	sts	0x12BB, r25	; 0x8012bb <xTestSemaphore+0x1>
    3926:	80 93 ba 12 	sts	0x12BA, r24	; 0x8012ba <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	41 f0       	breq	.+16     	; 0x393e <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    392e:	00 e0       	ldi	r16, 0x00	; 0
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	a9 01       	movw	r20, r18
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <xQueueGenericSend>
		}
	}
	
	
	createTasksForSensors();
    393e:	c6 df       	rcall	.-116    	; 0x38cc <createTasksForSensors>
	lora_handler_initialize(4, temperature_sensor, co2_sensor);
    3940:	40 91 bc 12 	lds	r20, 0x12BC	; 0x8012bc <co2_sensor>
    3944:	50 91 bd 12 	lds	r21, 0x12BD	; 0x8012bd <co2_sensor+0x1>
    3948:	60 91 b8 12 	lds	r22, 0x12B8	; 0x8012b8 <temperature_sensor>
    394c:	70 91 b9 12 	lds	r23, 0x12B9	; 0x8012b9 <temperature_sensor+0x1>
    3950:	84 e0       	ldi	r24, 0x04	; 4
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 2d 04 	call	0x85a	; 0x85a <lora_handler_initialize>
}
    3958:	0f 91       	pop	r16
    395a:	08 95       	ret

0000395c <initializeSystem>:
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    395c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <xEventGroupCreate>
    3960:	90 93 be 11 	sts	0x11BE, r25	; 0x8011be <taskReadyBits+0x1>
    3964:	80 93 bd 11 	sts	0x11BD, r24	; 0x8011bd <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <stdio_initialise>
	// Method for tasks and semaphore
	lora_driver_initialise(ser_USART1, NULL);
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	b3 d2       	rcall	.+1382   	; 0x3edc <lora_driver_initialise>
	create_tasks_and_semaphores();
    3976:	cb cf       	rjmp	.-106    	; 0x390e <create_tasks_and_semaphores>
    3978:	08 95       	ret

0000397a <main>:
    397a:	f0 df       	rcall	.-32     	; 0x395c <initializeSystem>
}

int main(void){
	initializeSystem();
	vTaskStartScheduler();
    397c:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskStartScheduler>
    3980:	ff cf       	rjmp	.-2      	; 0x3980 <main+0x6>

00003982 <modf>:
    3982:	fa 01       	movw	r30, r20
    3984:	dc 01       	movw	r26, r24
    3986:	aa 0f       	add	r26, r26
    3988:	bb 1f       	adc	r27, r27
    398a:	9b 01       	movw	r18, r22
    398c:	ac 01       	movw	r20, r24
    398e:	bf 57       	subi	r27, 0x7F	; 127
    3990:	28 f4       	brcc	.+10     	; 0x399c <modf+0x1a>
    3992:	22 27       	eor	r18, r18
    3994:	33 27       	eor	r19, r19
    3996:	44 27       	eor	r20, r20
    3998:	50 78       	andi	r21, 0x80	; 128
    399a:	1f c0       	rjmp	.+62     	; 0x39da <modf+0x58>
    399c:	b7 51       	subi	r27, 0x17	; 23
    399e:	88 f4       	brcc	.+34     	; 0x39c2 <modf+0x40>
    39a0:	ab 2f       	mov	r26, r27
    39a2:	00 24       	eor	r0, r0
    39a4:	46 95       	lsr	r20
    39a6:	37 95       	ror	r19
    39a8:	27 95       	ror	r18
    39aa:	01 1c       	adc	r0, r1
    39ac:	a3 95       	inc	r26
    39ae:	d2 f3       	brmi	.-12     	; 0x39a4 <modf+0x22>
    39b0:	00 20       	and	r0, r0
    39b2:	69 f0       	breq	.+26     	; 0x39ce <modf+0x4c>
    39b4:	22 0f       	add	r18, r18
    39b6:	33 1f       	adc	r19, r19
    39b8:	44 1f       	adc	r20, r20
    39ba:	b3 95       	inc	r27
    39bc:	da f3       	brmi	.-10     	; 0x39b4 <modf+0x32>
    39be:	0d d0       	rcall	.+26     	; 0x39da <modf+0x58>
    39c0:	13 c0       	rjmp	.+38     	; 0x39e8 <__subsf3>
    39c2:	61 30       	cpi	r22, 0x01	; 1
    39c4:	71 05       	cpc	r23, r1
    39c6:	a0 e8       	ldi	r26, 0x80	; 128
    39c8:	8a 07       	cpc	r24, r26
    39ca:	b9 46       	sbci	r27, 0x69	; 105
    39cc:	30 f4       	brcc	.+12     	; 0x39da <modf+0x58>
    39ce:	9b 01       	movw	r18, r22
    39d0:	ac 01       	movw	r20, r24
    39d2:	66 27       	eor	r22, r22
    39d4:	77 27       	eor	r23, r23
    39d6:	88 27       	eor	r24, r24
    39d8:	90 78       	andi	r25, 0x80	; 128
    39da:	30 96       	adiw	r30, 0x00	; 0
    39dc:	21 f0       	breq	.+8      	; 0x39e6 <modf+0x64>
    39de:	20 83       	st	Z, r18
    39e0:	31 83       	std	Z+1, r19	; 0x01
    39e2:	42 83       	std	Z+2, r20	; 0x02
    39e4:	53 83       	std	Z+3, r21	; 0x03
    39e6:	08 95       	ret

000039e8 <__subsf3>:
    39e8:	50 58       	subi	r21, 0x80	; 128

000039ea <__addsf3>:
    39ea:	bb 27       	eor	r27, r27
    39ec:	aa 27       	eor	r26, r26
    39ee:	0e d0       	rcall	.+28     	; 0x3a0c <__addsf3x>
    39f0:	77 c0       	rjmp	.+238    	; 0x3ae0 <__fp_round>
    39f2:	68 d0       	rcall	.+208    	; 0x3ac4 <__fp_pscA>
    39f4:	30 f0       	brcs	.+12     	; 0x3a02 <__addsf3+0x18>
    39f6:	6d d0       	rcall	.+218    	; 0x3ad2 <__fp_pscB>
    39f8:	20 f0       	brcs	.+8      	; 0x3a02 <__addsf3+0x18>
    39fa:	31 f4       	brne	.+12     	; 0x3a08 <__addsf3+0x1e>
    39fc:	9f 3f       	cpi	r25, 0xFF	; 255
    39fe:	11 f4       	brne	.+4      	; 0x3a04 <__addsf3+0x1a>
    3a00:	1e f4       	brtc	.+6      	; 0x3a08 <__addsf3+0x1e>
    3a02:	5d c0       	rjmp	.+186    	; 0x3abe <__fp_nan>
    3a04:	0e f4       	brtc	.+2      	; 0x3a08 <__addsf3+0x1e>
    3a06:	e0 95       	com	r30
    3a08:	e7 fb       	bst	r30, 7
    3a0a:	53 c0       	rjmp	.+166    	; 0x3ab2 <__fp_inf>

00003a0c <__addsf3x>:
    3a0c:	e9 2f       	mov	r30, r25
    3a0e:	79 d0       	rcall	.+242    	; 0x3b02 <__fp_split3>
    3a10:	80 f3       	brcs	.-32     	; 0x39f2 <__addsf3+0x8>
    3a12:	ba 17       	cp	r27, r26
    3a14:	62 07       	cpc	r22, r18
    3a16:	73 07       	cpc	r23, r19
    3a18:	84 07       	cpc	r24, r20
    3a1a:	95 07       	cpc	r25, r21
    3a1c:	18 f0       	brcs	.+6      	; 0x3a24 <__addsf3x+0x18>
    3a1e:	71 f4       	brne	.+28     	; 0x3a3c <__addsf3x+0x30>
    3a20:	9e f5       	brtc	.+102    	; 0x3a88 <__addsf3x+0x7c>
    3a22:	91 c0       	rjmp	.+290    	; 0x3b46 <__fp_zero>
    3a24:	0e f4       	brtc	.+2      	; 0x3a28 <__addsf3x+0x1c>
    3a26:	e0 95       	com	r30
    3a28:	0b 2e       	mov	r0, r27
    3a2a:	ba 2f       	mov	r27, r26
    3a2c:	a0 2d       	mov	r26, r0
    3a2e:	0b 01       	movw	r0, r22
    3a30:	b9 01       	movw	r22, r18
    3a32:	90 01       	movw	r18, r0
    3a34:	0c 01       	movw	r0, r24
    3a36:	ca 01       	movw	r24, r20
    3a38:	a0 01       	movw	r20, r0
    3a3a:	11 24       	eor	r1, r1
    3a3c:	ff 27       	eor	r31, r31
    3a3e:	59 1b       	sub	r21, r25
    3a40:	99 f0       	breq	.+38     	; 0x3a68 <__addsf3x+0x5c>
    3a42:	59 3f       	cpi	r21, 0xF9	; 249
    3a44:	50 f4       	brcc	.+20     	; 0x3a5a <__addsf3x+0x4e>
    3a46:	50 3e       	cpi	r21, 0xE0	; 224
    3a48:	68 f1       	brcs	.+90     	; 0x3aa4 <__addsf3x+0x98>
    3a4a:	1a 16       	cp	r1, r26
    3a4c:	f0 40       	sbci	r31, 0x00	; 0
    3a4e:	a2 2f       	mov	r26, r18
    3a50:	23 2f       	mov	r18, r19
    3a52:	34 2f       	mov	r19, r20
    3a54:	44 27       	eor	r20, r20
    3a56:	58 5f       	subi	r21, 0xF8	; 248
    3a58:	f3 cf       	rjmp	.-26     	; 0x3a40 <__addsf3x+0x34>
    3a5a:	46 95       	lsr	r20
    3a5c:	37 95       	ror	r19
    3a5e:	27 95       	ror	r18
    3a60:	a7 95       	ror	r26
    3a62:	f0 40       	sbci	r31, 0x00	; 0
    3a64:	53 95       	inc	r21
    3a66:	c9 f7       	brne	.-14     	; 0x3a5a <__addsf3x+0x4e>
    3a68:	7e f4       	brtc	.+30     	; 0x3a88 <__addsf3x+0x7c>
    3a6a:	1f 16       	cp	r1, r31
    3a6c:	ba 0b       	sbc	r27, r26
    3a6e:	62 0b       	sbc	r22, r18
    3a70:	73 0b       	sbc	r23, r19
    3a72:	84 0b       	sbc	r24, r20
    3a74:	ba f0       	brmi	.+46     	; 0x3aa4 <__addsf3x+0x98>
    3a76:	91 50       	subi	r25, 0x01	; 1
    3a78:	a1 f0       	breq	.+40     	; 0x3aa2 <__addsf3x+0x96>
    3a7a:	ff 0f       	add	r31, r31
    3a7c:	bb 1f       	adc	r27, r27
    3a7e:	66 1f       	adc	r22, r22
    3a80:	77 1f       	adc	r23, r23
    3a82:	88 1f       	adc	r24, r24
    3a84:	c2 f7       	brpl	.-16     	; 0x3a76 <__addsf3x+0x6a>
    3a86:	0e c0       	rjmp	.+28     	; 0x3aa4 <__addsf3x+0x98>
    3a88:	ba 0f       	add	r27, r26
    3a8a:	62 1f       	adc	r22, r18
    3a8c:	73 1f       	adc	r23, r19
    3a8e:	84 1f       	adc	r24, r20
    3a90:	48 f4       	brcc	.+18     	; 0x3aa4 <__addsf3x+0x98>
    3a92:	87 95       	ror	r24
    3a94:	77 95       	ror	r23
    3a96:	67 95       	ror	r22
    3a98:	b7 95       	ror	r27
    3a9a:	f7 95       	ror	r31
    3a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a9e:	08 f0       	brcs	.+2      	; 0x3aa2 <__addsf3x+0x96>
    3aa0:	b3 cf       	rjmp	.-154    	; 0x3a08 <__addsf3+0x1e>
    3aa2:	93 95       	inc	r25
    3aa4:	88 0f       	add	r24, r24
    3aa6:	08 f0       	brcs	.+2      	; 0x3aaa <__addsf3x+0x9e>
    3aa8:	99 27       	eor	r25, r25
    3aaa:	ee 0f       	add	r30, r30
    3aac:	97 95       	ror	r25
    3aae:	87 95       	ror	r24
    3ab0:	08 95       	ret

00003ab2 <__fp_inf>:
    3ab2:	97 f9       	bld	r25, 7
    3ab4:	9f 67       	ori	r25, 0x7F	; 127
    3ab6:	80 e8       	ldi	r24, 0x80	; 128
    3ab8:	70 e0       	ldi	r23, 0x00	; 0
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	08 95       	ret

00003abe <__fp_nan>:
    3abe:	9f ef       	ldi	r25, 0xFF	; 255
    3ac0:	80 ec       	ldi	r24, 0xC0	; 192
    3ac2:	08 95       	ret

00003ac4 <__fp_pscA>:
    3ac4:	00 24       	eor	r0, r0
    3ac6:	0a 94       	dec	r0
    3ac8:	16 16       	cp	r1, r22
    3aca:	17 06       	cpc	r1, r23
    3acc:	18 06       	cpc	r1, r24
    3ace:	09 06       	cpc	r0, r25
    3ad0:	08 95       	ret

00003ad2 <__fp_pscB>:
    3ad2:	00 24       	eor	r0, r0
    3ad4:	0a 94       	dec	r0
    3ad6:	12 16       	cp	r1, r18
    3ad8:	13 06       	cpc	r1, r19
    3ada:	14 06       	cpc	r1, r20
    3adc:	05 06       	cpc	r0, r21
    3ade:	08 95       	ret

00003ae0 <__fp_round>:
    3ae0:	09 2e       	mov	r0, r25
    3ae2:	03 94       	inc	r0
    3ae4:	00 0c       	add	r0, r0
    3ae6:	11 f4       	brne	.+4      	; 0x3aec <__fp_round+0xc>
    3ae8:	88 23       	and	r24, r24
    3aea:	52 f0       	brmi	.+20     	; 0x3b00 <__fp_round+0x20>
    3aec:	bb 0f       	add	r27, r27
    3aee:	40 f4       	brcc	.+16     	; 0x3b00 <__fp_round+0x20>
    3af0:	bf 2b       	or	r27, r31
    3af2:	11 f4       	brne	.+4      	; 0x3af8 <__fp_round+0x18>
    3af4:	60 ff       	sbrs	r22, 0
    3af6:	04 c0       	rjmp	.+8      	; 0x3b00 <__fp_round+0x20>
    3af8:	6f 5f       	subi	r22, 0xFF	; 255
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	8f 4f       	sbci	r24, 0xFF	; 255
    3afe:	9f 4f       	sbci	r25, 0xFF	; 255
    3b00:	08 95       	ret

00003b02 <__fp_split3>:
    3b02:	57 fd       	sbrc	r21, 7
    3b04:	90 58       	subi	r25, 0x80	; 128
    3b06:	44 0f       	add	r20, r20
    3b08:	55 1f       	adc	r21, r21
    3b0a:	59 f0       	breq	.+22     	; 0x3b22 <__fp_splitA+0x10>
    3b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b0e:	71 f0       	breq	.+28     	; 0x3b2c <__fp_splitA+0x1a>
    3b10:	47 95       	ror	r20

00003b12 <__fp_splitA>:
    3b12:	88 0f       	add	r24, r24
    3b14:	97 fb       	bst	r25, 7
    3b16:	99 1f       	adc	r25, r25
    3b18:	61 f0       	breq	.+24     	; 0x3b32 <__fp_splitA+0x20>
    3b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    3b1c:	79 f0       	breq	.+30     	; 0x3b3c <__fp_splitA+0x2a>
    3b1e:	87 95       	ror	r24
    3b20:	08 95       	ret
    3b22:	12 16       	cp	r1, r18
    3b24:	13 06       	cpc	r1, r19
    3b26:	14 06       	cpc	r1, r20
    3b28:	55 1f       	adc	r21, r21
    3b2a:	f2 cf       	rjmp	.-28     	; 0x3b10 <__fp_split3+0xe>
    3b2c:	46 95       	lsr	r20
    3b2e:	f1 df       	rcall	.-30     	; 0x3b12 <__fp_splitA>
    3b30:	08 c0       	rjmp	.+16     	; 0x3b42 <__fp_splitA+0x30>
    3b32:	16 16       	cp	r1, r22
    3b34:	17 06       	cpc	r1, r23
    3b36:	18 06       	cpc	r1, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	f1 cf       	rjmp	.-30     	; 0x3b1e <__fp_splitA+0xc>
    3b3c:	86 95       	lsr	r24
    3b3e:	71 05       	cpc	r23, r1
    3b40:	61 05       	cpc	r22, r1
    3b42:	08 94       	sec
    3b44:	08 95       	ret

00003b46 <__fp_zero>:
    3b46:	e8 94       	clt

00003b48 <__fp_szero>:
    3b48:	bb 27       	eor	r27, r27
    3b4a:	66 27       	eor	r22, r22
    3b4c:	77 27       	eor	r23, r23
    3b4e:	cb 01       	movw	r24, r22
    3b50:	97 f9       	bld	r25, 7
    3b52:	08 95       	ret

00003b54 <_hihTwiCallback>:
    3b54:	65 30       	cpi	r22, 0x05	; 5
    3b56:	f1 f4       	brne	.+60     	; 0x3b94 <_hihTwiCallback+0x40>
    3b58:	fa 01       	movw	r30, r20
    3b5a:	80 81       	ld	r24, Z
    3b5c:	8f 73       	andi	r24, 0x3F	; 63
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	98 2f       	mov	r25, r24
    3b62:	88 27       	eor	r24, r24
    3b64:	21 81       	ldd	r18, Z+1	; 0x01
    3b66:	82 2b       	or	r24, r18
    3b68:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3b6c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	f0 e4       	ldi	r31, 0x40	; 64
    3b74:	8f 9f       	mul	r24, r31
    3b76:	c0 01       	movw	r24, r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	fa 01       	movw	r30, r20
    3b7c:	23 81       	ldd	r18, Z+3	; 0x03
    3b7e:	26 95       	lsr	r18
    3b80:	26 95       	lsr	r18
    3b82:	82 2b       	or	r24, r18
    3b84:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3b88:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	80 93 bf 11 	sts	0x11BF, r24	; 0x8011bf <_measuringIsReady>
    3b92:	08 95       	ret
    3b94:	64 30       	cpi	r22, 0x04	; 4
    3b96:	51 f0       	breq	.+20     	; 0x3bac <_hihTwiCallback+0x58>
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e4       	ldi	r25, 0x40	; 64
    3b9c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ba0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ba4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3ba8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3bac:	08 95       	ret

00003bae <hih8120_initialise>:
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
    3bb2:	0a ea       	ldi	r16, 0xAA	; 170
    3bb4:	1d e1       	ldi	r17, 0x1D	; 29
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	34 e2       	ldi	r19, 0x24	; 36
    3bba:	44 ef       	ldi	r20, 0xF4	; 244
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	87 e2       	ldi	r24, 0x27	; 39
    3bc2:	0e 94 23 26 	call	0x4c46	; 0x4c46 <twiCreate>
    3bc6:	90 93 c1 11 	sts	0x11C1, r25	; 0x8011c1 <_hih8120Handler+0x1>
    3bca:	80 93 c0 11 	sts	0x11C0, r24	; 0x8011c0 <_hih8120Handler>
    3bce:	21 e0       	ldi	r18, 0x01	; 1
    3bd0:	89 2b       	or	r24, r25
    3bd2:	09 f0       	breq	.+2      	; 0x3bd6 <hih8120_initialise+0x28>
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	82 2f       	mov	r24, r18
    3bd8:	1f 91       	pop	r17
    3bda:	0f 91       	pop	r16
    3bdc:	08 95       	ret

00003bde <hih8120_wakeup>:
    3bde:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_hih8120Handler>
    3be2:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_hih8120Handler+0x1>
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	59 f0       	breq	.+22     	; 0x3c00 <hih8120_wakeup+0x22>
    3bea:	40 e0       	ldi	r20, 0x00	; 0
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	70 e0       	ldi	r23, 0x00	; 0
    3bf0:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <twiTransmit>
    3bf4:	84 30       	cpi	r24, 0x04	; 4
    3bf6:	31 f4       	brne	.+12     	; 0x3c04 <hih8120_wakeup+0x26>
    3bf8:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <_measuringIsReady>
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	08 95       	ret
    3c00:	82 e0       	ldi	r24, 0x02	; 2
    3c02:	08 95       	ret
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	08 95       	ret

00003c08 <hih8120_measure>:
    3c08:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <_hih8120Handler>
    3c0c:	90 91 c1 11 	lds	r25, 0x11C1	; 0x8011c1 <_hih8120Handler+0x1>
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	39 f0       	breq	.+14     	; 0x3c22 <hih8120_measure+0x1a>
    3c14:	64 e0       	ldi	r22, 0x04	; 4
    3c16:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <twiReceive>
    3c1a:	85 30       	cpi	r24, 0x05	; 5
    3c1c:	21 f0       	breq	.+8      	; 0x3c26 <hih8120_measure+0x1e>
    3c1e:	83 e0       	ldi	r24, 0x03	; 3
    3c20:	08 95       	ret
    3c22:	82 e0       	ldi	r24, 0x02	; 2
    3c24:	08 95       	ret
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	08 95       	ret

00003c2a <hih8120_getHumidity>:
    3c2a:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3c2e:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__floatunsisf>
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	48 ec       	ldi	r20, 0xC8	; 200
    3c40:	52 e4       	ldi	r21, 0x42	; 66
    3c42:	0e 94 32 2c 	call	0x5864	; 0x5864 <__mulsf3>
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	38 ef       	ldi	r19, 0xF8	; 248
    3c4a:	4f e7       	ldi	r20, 0x7F	; 127
    3c4c:	56 e4       	ldi	r21, 0x46	; 70
    3c4e:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__divsf3>
    3c52:	08 95       	ret

00003c54 <hih8120_getHumidityPercent_x10>:
    3c54:	ea df       	rcall	.-44     	; 0x3c2a <hih8120_getHumidity>
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e2       	ldi	r20, 0x20	; 32
    3c5c:	51 e4       	ldi	r21, 0x41	; 65
    3c5e:	0e 94 32 2c 	call	0x5864	; 0x5864 <__mulsf3>
    3c62:	0e 94 c6 2b 	call	0x578c	; 0x578c <__fixunssfsi>
    3c66:	cb 01       	movw	r24, r22
    3c68:	08 95       	ret

00003c6a <hih8120_getTemperature>:
    3c6a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3c6e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__floatunsisf>
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	45 e2       	ldi	r20, 0x25	; 37
    3c80:	53 e4       	ldi	r21, 0x43	; 67
    3c82:	0e 94 32 2c 	call	0x5864	; 0x5864 <__mulsf3>
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	38 ef       	ldi	r19, 0xF8	; 248
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	56 e4       	ldi	r21, 0x46	; 70
    3c8e:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__divsf3>
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e2       	ldi	r20, 0x20	; 32
    3c98:	52 e4       	ldi	r21, 0x42	; 66
    3c9a:	a6 ce       	rjmp	.-692    	; 0x39e8 <__subsf3>
    3c9c:	08 95       	ret

00003c9e <_serialCallBack>:
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	1f 92       	push	r1
    3ca8:	1f 92       	push	r1
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	8c 01       	movw	r16, r24
    3cb0:	19 82       	std	Y+1, r1	; 0x01
    3cb2:	2d c0       	rjmp	.+90     	; 0x3d0e <_serialCallBack+0x70>
    3cb4:	e0 91 f9 11 	lds	r30, 0x11F9	; 0x8011f9 <rec_buf_inp.2878>
    3cb8:	ec 32       	cpi	r30, 0x2C	; 44
    3cba:	50 f4       	brcc	.+20     	; 0x3cd0 <_serialCallBack+0x32>
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	8e 0f       	add	r24, r30
    3cc0:	80 93 f9 11 	sts	0x11F9, r24	; 0x8011f9 <rec_buf_inp.2878>
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	e0 50       	subi	r30, 0x00	; 0
    3cc8:	fe 4e       	sbci	r31, 0xEE	; 238
    3cca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ccc:	80 83       	st	Z, r24
    3cce:	02 c0       	rjmp	.+4      	; 0x3cd4 <_serialCallBack+0x36>
    3cd0:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <rec_buf_inp.2878>
    3cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd6:	8a 30       	cpi	r24, 0x0A	; 10
    3cd8:	d1 f4       	brne	.+52     	; 0x3d0e <_serialCallBack+0x70>
    3cda:	40 91 f9 11 	lds	r20, 0x11F9	; 0x8011f9 <rec_buf_inp.2878>
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	fa 01       	movw	r30, r20
    3ce2:	e2 50       	subi	r30, 0x02	; 2
    3ce4:	fe 4e       	sbci	r31, 0xEE	; 238
    3ce6:	10 82       	st	Z, r1
    3ce8:	41 50       	subi	r20, 0x01	; 1
    3cea:	51 09       	sbc	r21, r1
    3cec:	9e 01       	movw	r18, r28
    3cee:	2f 5f       	subi	r18, 0xFF	; 255
    3cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	72 e1       	ldi	r23, 0x12	; 18
    3cf6:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <_serialReplyBufferHandle>
    3cfa:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <_serialReplyBufferHandle+0x1>
    3cfe:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <xStreamBufferSendFromISR>
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	81 11       	cpse	r24, r1
    3d06:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vPortYield>
    3d0a:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <rec_buf_inp.2878>
    3d0e:	be 01       	movw	r22, r28
    3d10:	6e 5f       	subi	r22, 0xFE	; 254
    3d12:	7f 4f       	sbci	r23, 0xFF	; 255
    3d14:	c8 01       	movw	r24, r16
    3d16:	c7 d4       	rcall	.+2446   	; 0x46a6 <serial_getByte>
    3d18:	88 23       	and	r24, r24
    3d1a:	61 f2       	breq	.-104    	; 0x3cb4 <_serialCallBack+0x16>
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	08 95       	ret

00003d2a <_uploadMessage>:
    3d2a:	0f 93       	push	r16
    3d2c:	1f 93       	push	r17
    3d2e:	cf 93       	push	r28
    3d30:	df 93       	push	r29
    3d32:	8c 01       	movw	r16, r24
    3d34:	eb 01       	movw	r28, r22
    3d36:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <_serialReplyBufferHandle>
    3d3a:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <_serialReplyBufferHandle+0x1>
    3d3e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xStreamBufferReset>
    3d42:	b8 01       	movw	r22, r16
    3d44:	82 ec       	ldi	r24, 0xC2	; 194
    3d46:	91 e1       	ldi	r25, 0x11	; 17
    3d48:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <strcpy>
    3d4c:	20 97       	sbiw	r28, 0x00	; 0
    3d4e:	79 f0       	breq	.+30     	; 0x3d6e <_uploadMessage+0x44>
    3d50:	e2 ec       	ldi	r30, 0xC2	; 194
    3d52:	f1 e1       	ldi	r31, 0x11	; 17
    3d54:	01 90       	ld	r0, Z+
    3d56:	00 20       	and	r0, r0
    3d58:	e9 f7       	brne	.-6      	; 0x3d54 <_uploadMessage+0x2a>
    3d5a:	31 97       	sbiw	r30, 0x01	; 1
    3d5c:	80 e2       	ldi	r24, 0x20	; 32
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
    3d64:	be 01       	movw	r22, r28
    3d66:	82 ec       	ldi	r24, 0xC2	; 194
    3d68:	91 e1       	ldi	r25, 0x11	; 17
    3d6a:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <strcat>
    3d6e:	e2 ec       	ldi	r30, 0xC2	; 194
    3d70:	f1 e1       	ldi	r31, 0x11	; 17
    3d72:	df 01       	movw	r26, r30
    3d74:	0d 90       	ld	r0, X+
    3d76:	00 20       	and	r0, r0
    3d78:	e9 f7       	brne	.-6      	; 0x3d74 <_uploadMessage+0x4a>
    3d7a:	11 97       	sbiw	r26, 0x01	; 1
    3d7c:	8d e0       	ldi	r24, 0x0D	; 13
    3d7e:	9a e0       	ldi	r25, 0x0A	; 10
    3d80:	11 96       	adiw	r26, 0x01	; 1
    3d82:	9c 93       	st	X, r25
    3d84:	8e 93       	st	-X, r24
    3d86:	12 96       	adiw	r26, 0x02	; 2
    3d88:	1c 92       	st	X, r1
    3d8a:	01 90       	ld	r0, Z+
    3d8c:	00 20       	and	r0, r0
    3d8e:	e9 f7       	brne	.-6      	; 0x3d8a <_uploadMessage+0x60>
    3d90:	31 97       	sbiw	r30, 0x01	; 1
    3d92:	e2 5c       	subi	r30, 0xC2	; 194
    3d94:	f1 41       	sbci	r31, 0x11	; 17
    3d96:	ae 2f       	mov	r26, r30
    3d98:	82 ec       	ldi	r24, 0xC2	; 194
    3d9a:	91 e1       	ldi	r25, 0x11	; 17
    3d9c:	ac 01       	movw	r20, r24
    3d9e:	6a 2f       	mov	r22, r26
    3da0:	80 91 fe 11 	lds	r24, 0x11FE	; 0x8011fe <_rn2483_serial>
    3da4:	90 91 ff 11 	lds	r25, 0x11FF	; 0x8011ff <_rn2483_serial+0x1>
    3da8:	29 d4       	rcall	.+2130   	; 0x45fc <serial_sendBytes>
    3daa:	81 11       	cpse	r24, r1
    3dac:	11 c0       	rjmp	.+34     	; 0x3dd0 <_uploadMessage+0xa6>
    3dae:	08 e2       	ldi	r16, 0x28	; 40
    3db0:	15 e0       	ldi	r17, 0x05	; 5
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	4d e2       	ldi	r20, 0x2D	; 45
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	6a e5       	ldi	r22, 0x5A	; 90
    3dbc:	72 e1       	ldi	r23, 0x12	; 18
    3dbe:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <_serialReplyBufferHandle>
    3dc2:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <_serialReplyBufferHandle+0x1>
    3dc6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <xStreamBufferReceive>
    3dca:	8a e5       	ldi	r24, 0x5A	; 90
    3dcc:	92 e1       	ldi	r25, 0x12	; 18
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <_uploadMessage+0xaa>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	1f 91       	pop	r17
    3dda:	0f 91       	pop	r16
    3ddc:	08 95       	ret

00003dde <_reply2ReturnCode>:
    3dde:	2f 92       	push	r2
    3de0:	3f 92       	push	r3
    3de2:	4f 92       	push	r4
    3de4:	5f 92       	push	r5
    3de6:	6f 92       	push	r6
    3de8:	7f 92       	push	r7
    3dea:	8f 92       	push	r8
    3dec:	9f 92       	push	r9
    3dee:	af 92       	push	r10
    3df0:	bf 92       	push	r11
    3df2:	cf 92       	push	r12
    3df4:	df 92       	push	r13
    3df6:	ef 92       	push	r14
    3df8:	ff 92       	push	r15
    3dfa:	0f 93       	push	r16
    3dfc:	1f 93       	push	r17
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	5c 01       	movw	r10, r24
    3e04:	fc 01       	movw	r30, r24
    3e06:	01 90       	ld	r0, Z+
    3e08:	00 20       	and	r0, r0
    3e0a:	e9 f7       	brne	.-6      	; 0x3e06 <_reply2ReturnCode+0x28>
    3e0c:	31 97       	sbiw	r30, 0x01	; 1
    3e0e:	6f 01       	movw	r12, r30
    3e10:	c8 1a       	sub	r12, r24
    3e12:	d9 0a       	sbc	r13, r25
    3e14:	5c 2c       	mov	r5, r12
    3e16:	0f 2e       	mov	r0, r31
    3e18:	f3 ed       	ldi	r31, 0xD3	; 211
    3e1a:	8f 2e       	mov	r8, r31
    3e1c:	f6 e0       	ldi	r31, 0x06	; 6
    3e1e:	9f 2e       	mov	r9, r31
    3e20:	f0 2d       	mov	r31, r0
    3e22:	e1 2c       	mov	r14, r1
    3e24:	f1 2c       	mov	r15, r1
    3e26:	4c 2c       	mov	r4, r12
    3e28:	37 01       	movw	r6, r14
    3e2a:	f4 01       	movw	r30, r8
    3e2c:	01 81       	ldd	r16, Z+1	; 0x01
    3e2e:	12 81       	ldd	r17, Z+2	; 0x02
    3e30:	e8 01       	movw	r28, r16
    3e32:	09 90       	ld	r0, Y+
    3e34:	00 20       	and	r0, r0
    3e36:	e9 f7       	brne	.-6      	; 0x3e32 <_reply2ReturnCode+0x54>
    3e38:	21 97       	sbiw	r28, 0x01	; 1
    3e3a:	c0 1b       	sub	r28, r16
    3e3c:	d1 0b       	sbc	r29, r17
    3e3e:	3c 2e       	mov	r3, r28
    3e40:	f9 e0       	ldi	r31, 0x09	; 9
    3e42:	cf 16       	cp	r12, r31
    3e44:	d1 04       	cpc	r13, r1
    3e46:	58 f0       	brcs	.+22     	; 0x3e5e <_reply2ReturnCode+0x80>
    3e48:	f4 01       	movw	r30, r8
    3e4a:	20 80       	ld	r2, Z
    3e4c:	fe e0       	ldi	r31, 0x0E	; 14
    3e4e:	2f 12       	cpse	r2, r31
    3e50:	06 c0       	rjmp	.+12     	; 0x3e5e <_reply2ReturnCode+0x80>
    3e52:	b8 01       	movw	r22, r16
    3e54:	c5 01       	movw	r24, r10
    3e56:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <strcasestr>
    3e5a:	89 2b       	or	r24, r25
    3e5c:	09 f5       	brne	.+66     	; 0x3ea0 <_reply2ReturnCode+0xc2>
    3e5e:	44 2d       	mov	r20, r4
    3e60:	35 14       	cp	r3, r5
    3e62:	08 f4       	brcc	.+2      	; 0x3e66 <_reply2ReturnCode+0x88>
    3e64:	4c 2f       	mov	r20, r28
    3e66:	50 e0       	ldi	r21, 0x00	; 0
    3e68:	b8 01       	movw	r22, r16
    3e6a:	c5 01       	movw	r24, r10
    3e6c:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <strncasecmp>
    3e70:	89 2b       	or	r24, r25
    3e72:	49 f4       	brne	.+18     	; 0x3e86 <_reply2ReturnCode+0xa8>
    3e74:	f3 01       	movw	r30, r6
    3e76:	ee 0f       	add	r30, r30
    3e78:	ff 1f       	adc	r31, r31
    3e7a:	e6 0d       	add	r30, r6
    3e7c:	f7 1d       	adc	r31, r7
    3e7e:	ed 52       	subi	r30, 0x2D	; 45
    3e80:	f9 4f       	sbci	r31, 0xF9	; 249
    3e82:	20 80       	ld	r2, Z
    3e84:	0d c0       	rjmp	.+26     	; 0x3ea0 <_reply2ReturnCode+0xc2>
    3e86:	8f ef       	ldi	r24, 0xFF	; 255
    3e88:	e8 1a       	sub	r14, r24
    3e8a:	f8 0a       	sbc	r15, r24
    3e8c:	e3 e0       	ldi	r30, 0x03	; 3
    3e8e:	8e 0e       	add	r8, r30
    3e90:	91 1c       	adc	r9, r1
    3e92:	f1 e1       	ldi	r31, 0x11	; 17
    3e94:	ef 16       	cp	r14, r31
    3e96:	f1 04       	cpc	r15, r1
    3e98:	39 f6       	brne	.-114    	; 0x3e28 <_reply2ReturnCode+0x4a>
    3e9a:	68 94       	set
    3e9c:	22 24       	eor	r2, r2
    3e9e:	24 f8       	bld	r2, 4
    3ea0:	82 2d       	mov	r24, r2
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	ff 90       	pop	r15
    3eac:	ef 90       	pop	r14
    3eae:	df 90       	pop	r13
    3eb0:	cf 90       	pop	r12
    3eb2:	bf 90       	pop	r11
    3eb4:	af 90       	pop	r10
    3eb6:	9f 90       	pop	r9
    3eb8:	8f 90       	pop	r8
    3eba:	7f 90       	pop	r7
    3ebc:	6f 90       	pop	r6
    3ebe:	5f 90       	pop	r5
    3ec0:	4f 90       	pop	r4
    3ec2:	3f 90       	pop	r3
    3ec4:	2f 90       	pop	r2
    3ec6:	08 95       	ret

00003ec8 <_uploadMessageRc>:
    3ec8:	30 df       	rcall	.-416    	; 0x3d2a <_uploadMessage>
    3eca:	89 cf       	rjmp	.-238    	; 0x3dde <_reply2ReturnCode>
    3ecc:	08 95       	ret

00003ece <lora_driver_flushBuffers>:
    3ece:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <_serialReplyBufferHandle>
    3ed2:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <_serialReplyBufferHandle+0x1>
    3ed6:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <xStreamBufferReset>
    3eda:	08 95       	ret

00003edc <lora_driver_initialise>:
    3edc:	8f 92       	push	r8
    3ede:	9f 92       	push	r9
    3ee0:	af 92       	push	r10
    3ee2:	cf 92       	push	r12
    3ee4:	ef 92       	push	r14
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	c8 2f       	mov	r28, r24
    3eee:	8b 01       	movw	r16, r22
    3ef0:	41 e0       	ldi	r20, 0x01	; 1
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	88 ec       	ldi	r24, 0xC8	; 200
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	0e 94 b0 0c 	call	0x1960	; 0x1960 <xStreamBufferGenericCreate>
    3efe:	90 93 fd 11 	sts	0x11FD, r25	; 0x8011fd <_serialReplyBufferHandle+0x1>
    3f02:	80 93 fc 11 	sts	0x11FC, r24	; 0x8011fc <_serialReplyBufferHandle>
    3f06:	10 93 fb 11 	sts	0x11FB, r17	; 0x8011fb <_downlinkMessageBuffer+0x1>
    3f0a:	00 93 fa 11 	sts	0x11FA, r16	; 0x8011fa <_downlinkMessageBuffer>
    3f0e:	0f 2e       	mov	r0, r31
    3f10:	ff e4       	ldi	r31, 0x4F	; 79
    3f12:	8f 2e       	mov	r8, r31
    3f14:	fe e1       	ldi	r31, 0x1E	; 30
    3f16:	9f 2e       	mov	r9, r31
    3f18:	f0 2d       	mov	r31, r0
    3f1a:	68 94       	set
    3f1c:	aa 24       	eor	r10, r10
    3f1e:	a6 f8       	bld	r10, 6
    3f20:	68 94       	set
    3f22:	cc 24       	eor	r12, r12
    3f24:	c6 f8       	bld	r12, 6
    3f26:	e1 2c       	mov	r14, r1
    3f28:	00 e0       	ldi	r16, 0x00	; 0
    3f2a:	23 e0       	ldi	r18, 0x03	; 3
    3f2c:	40 e0       	ldi	r20, 0x00	; 0
    3f2e:	51 ee       	ldi	r21, 0xE1	; 225
    3f30:	60 e0       	ldi	r22, 0x00	; 0
    3f32:	70 e0       	ldi	r23, 0x00	; 0
    3f34:	8c 2f       	mov	r24, r28
    3f36:	92 d2       	rcall	.+1316   	; 0x445c <serial_create>
    3f38:	90 93 ff 11 	sts	0x11FF, r25	; 0x8011ff <_rn2483_serial+0x1>
    3f3c:	80 93 fe 11 	sts	0x11FE, r24	; 0x8011fe <_rn2483_serial>
    3f40:	e7 e0       	ldi	r30, 0x07	; 7
    3f42:	f1 e0       	ldi	r31, 0x01	; 1
    3f44:	80 81       	ld	r24, Z
    3f46:	80 61       	ori	r24, 0x10	; 16
    3f48:	80 83       	st	Z, r24
    3f4a:	cf 91       	pop	r28
    3f4c:	1f 91       	pop	r17
    3f4e:	0f 91       	pop	r16
    3f50:	ef 90       	pop	r14
    3f52:	cf 90       	pop	r12
    3f54:	af 90       	pop	r10
    3f56:	9f 90       	pop	r9
    3f58:	8f 90       	pop	r8
    3f5a:	08 95       	ret

00003f5c <lora_driver_resetRn2483>:
    3f5c:	88 23       	and	r24, r24
    3f5e:	31 f0       	breq	.+12     	; 0x3f6c <lora_driver_resetRn2483+0x10>
    3f60:	e8 e0       	ldi	r30, 0x08	; 8
    3f62:	f1 e0       	ldi	r31, 0x01	; 1
    3f64:	80 81       	ld	r24, Z
    3f66:	8f 7e       	andi	r24, 0xEF	; 239
    3f68:	80 83       	st	Z, r24
    3f6a:	08 95       	ret
    3f6c:	e8 e0       	ldi	r30, 0x08	; 8
    3f6e:	f1 e0       	ldi	r31, 0x01	; 1
    3f70:	80 81       	ld	r24, Z
    3f72:	80 61       	ori	r24, 0x10	; 16
    3f74:	80 83       	st	Z, r24
    3f76:	08 95       	ret

00003f78 <lora_driver_rn2483FactoryReset>:
    3f78:	60 e0       	ldi	r22, 0x00	; 0
    3f7a:	70 e0       	ldi	r23, 0x00	; 0
    3f7c:	89 e5       	ldi	r24, 0x59	; 89
    3f7e:	94 e0       	ldi	r25, 0x04	; 4
    3f80:	d4 de       	rcall	.-600    	; 0x3d2a <_uploadMessage>
    3f82:	ea e5       	ldi	r30, 0x5A	; 90
    3f84:	f2 e1       	ldi	r31, 0x12	; 18
    3f86:	01 90       	ld	r0, Z+
    3f88:	00 20       	and	r0, r0
    3f8a:	e9 f7       	brne	.-6      	; 0x3f86 <lora_driver_rn2483FactoryReset+0xe>
    3f8c:	31 97       	sbiw	r30, 0x01	; 1
    3f8e:	ea 55       	subi	r30, 0x5A	; 90
    3f90:	f2 41       	sbci	r31, 0x12	; 18
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	75 97       	sbiw	r30, 0x15	; 21
    3f96:	08 f0       	brcs	.+2      	; 0x3f9a <lora_driver_rn2483FactoryReset+0x22>
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	08 95       	ret

00003f9c <lora_driver_getRn2483Hweui>:
    3f9c:	cf 93       	push	r28
    3f9e:	df 93       	push	r29
    3fa0:	ec 01       	movw	r28, r24
    3fa2:	60 e0       	ldi	r22, 0x00	; 0
    3fa4:	70 e0       	ldi	r23, 0x00	; 0
    3fa6:	8a e6       	ldi	r24, 0x6A	; 106
    3fa8:	94 e0       	ldi	r25, 0x04	; 4
    3faa:	bf de       	rcall	.-642    	; 0x3d2a <_uploadMessage>
    3fac:	ea e5       	ldi	r30, 0x5A	; 90
    3fae:	f2 e1       	ldi	r31, 0x12	; 18
    3fb0:	01 90       	ld	r0, Z+
    3fb2:	00 20       	and	r0, r0
    3fb4:	e9 f7       	brne	.-6      	; 0x3fb0 <lora_driver_getRn2483Hweui+0x14>
    3fb6:	eb 56       	subi	r30, 0x6B	; 107
    3fb8:	f2 41       	sbci	r31, 0x12	; 18
    3fba:	39 f4       	brne	.+14     	; 0x3fca <lora_driver_getRn2483Hweui+0x2e>
    3fbc:	6a e5       	ldi	r22, 0x5A	; 90
    3fbe:	72 e1       	ldi	r23, 0x12	; 18
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <strcpy>
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	02 c0       	rjmp	.+4      	; 0x3fce <lora_driver_getRn2483Hweui+0x32>
    3fca:	18 82       	st	Y, r1
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	08 95       	ret

00003fd4 <lora_driver_setDeviceIdentifier>:
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	01 90       	ld	r0, Z+
    3fd8:	00 20       	and	r0, r0
    3fda:	e9 f7       	brne	.-6      	; 0x3fd6 <lora_driver_setDeviceIdentifier+0x2>
    3fdc:	9f 01       	movw	r18, r30
    3fde:	21 51       	subi	r18, 0x11	; 17
    3fe0:	31 09       	sbc	r19, r1
    3fe2:	28 17       	cp	r18, r24
    3fe4:	39 07       	cpc	r19, r25
    3fe6:	29 f4       	brne	.+10     	; 0x3ff2 <lora_driver_setDeviceIdentifier+0x1e>
    3fe8:	bc 01       	movw	r22, r24
    3fea:	88 e9       	ldi	r24, 0x98	; 152
    3fec:	94 e0       	ldi	r25, 0x04	; 4
    3fee:	6c cf       	rjmp	.-296    	; 0x3ec8 <_uploadMessageRc>
    3ff0:	08 95       	ret
    3ff2:	89 e0       	ldi	r24, 0x09	; 9
    3ff4:	08 95       	ret

00003ff6 <lora_driver_setApplicationIdentifier>:
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	01 90       	ld	r0, Z+
    3ffa:	00 20       	and	r0, r0
    3ffc:	e9 f7       	brne	.-6      	; 0x3ff8 <lora_driver_setApplicationIdentifier+0x2>
    3ffe:	9f 01       	movw	r18, r30
    4000:	21 51       	subi	r18, 0x11	; 17
    4002:	31 09       	sbc	r19, r1
    4004:	28 17       	cp	r18, r24
    4006:	39 07       	cpc	r19, r25
    4008:	29 f4       	brne	.+10     	; 0x4014 <lora_driver_setApplicationIdentifier+0x1e>
    400a:	bc 01       	movw	r22, r24
    400c:	87 ea       	ldi	r24, 0xA7	; 167
    400e:	94 e0       	ldi	r25, 0x04	; 4
    4010:	5b cf       	rjmp	.-330    	; 0x3ec8 <_uploadMessageRc>
    4012:	08 95       	ret
    4014:	89 e0       	ldi	r24, 0x09	; 9
    4016:	08 95       	ret

00004018 <lora_driver_setApplicationKey>:
    4018:	fc 01       	movw	r30, r24
    401a:	01 90       	ld	r0, Z+
    401c:	00 20       	and	r0, r0
    401e:	e9 f7       	brne	.-6      	; 0x401a <lora_driver_setApplicationKey+0x2>
    4020:	9f 01       	movw	r18, r30
    4022:	21 52       	subi	r18, 0x21	; 33
    4024:	31 09       	sbc	r19, r1
    4026:	28 17       	cp	r18, r24
    4028:	39 07       	cpc	r19, r25
    402a:	29 f4       	brne	.+10     	; 0x4036 <lora_driver_setApplicationKey+0x1e>
    402c:	bc 01       	movw	r22, r24
    402e:	86 eb       	ldi	r24, 0xB6	; 182
    4030:	94 e0       	ldi	r25, 0x04	; 4
    4032:	4a cf       	rjmp	.-364    	; 0x3ec8 <_uploadMessageRc>
    4034:	08 95       	ret
    4036:	89 e0       	ldi	r24, 0x09	; 9
    4038:	08 95       	ret

0000403a <lora_driver_saveMac>:
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	70 e0       	ldi	r23, 0x00	; 0
    403e:	85 ef       	ldi	r24, 0xF5	; 245
    4040:	94 e0       	ldi	r25, 0x04	; 4
    4042:	42 cf       	rjmp	.-380    	; 0x3ec8 <_uploadMessageRc>
    4044:	08 95       	ret

00004046 <lora_driver_join>:
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	e8 2f       	mov	r30, r24
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	ee 0f       	add	r30, r30
    4050:	ff 1f       	adc	r31, r31
    4052:	e1 53       	subi	r30, 0x31	; 49
    4054:	f9 4f       	sbci	r31, 0xF9	; 249
    4056:	60 81       	ld	r22, Z
    4058:	71 81       	ldd	r23, Z+1	; 0x01
    405a:	8e ef       	ldi	r24, 0xFE	; 254
    405c:	94 e0       	ldi	r25, 0x04	; 4
    405e:	34 df       	rcall	.-408    	; 0x3ec8 <_uploadMessageRc>
    4060:	81 11       	cpse	r24, r1
    4062:	14 c0       	rjmp	.+40     	; 0x408c <lora_driver_join+0x46>
    4064:	08 e2       	ldi	r16, 0x28	; 40
    4066:	15 e0       	ldi	r17, 0x05	; 5
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	4d e2       	ldi	r20, 0x2D	; 45
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	6a e5       	ldi	r22, 0x5A	; 90
    4072:	72 e1       	ldi	r23, 0x12	; 18
    4074:	80 91 fc 11 	lds	r24, 0x11FC	; 0x8011fc <_serialReplyBufferHandle>
    4078:	90 91 fd 11 	lds	r25, 0x11FD	; 0x8011fd <_serialReplyBufferHandle+0x1>
    407c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <xStreamBufferReceive>
    4080:	88 23       	and	r24, r24
    4082:	21 f0       	breq	.+8      	; 0x408c <lora_driver_join+0x46>
    4084:	8a e5       	ldi	r24, 0x5A	; 90
    4086:	92 e1       	ldi	r25, 0x12	; 18
    4088:	aa de       	rcall	.-684    	; 0x3dde <_reply2ReturnCode>
    408a:	03 c0       	rjmp	.+6      	; 0x4092 <lora_driver_join+0x4c>
    408c:	8a e5       	ldi	r24, 0x5A	; 90
    408e:	92 e1       	ldi	r25, 0x12	; 18
    4090:	a6 de       	rcall	.-692    	; 0x3dde <_reply2ReturnCode>
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	08 95       	ret

00004098 <lora_driver_setAdaptiveDataRate>:
    4098:	81 30       	cpi	r24, 0x01	; 1
    409a:	19 f0       	breq	.+6      	; 0x40a2 <lora_driver_setAdaptiveDataRate+0xa>
    409c:	6d e1       	ldi	r22, 0x1D	; 29
    409e:	75 e0       	ldi	r23, 0x05	; 5
    40a0:	02 c0       	rjmp	.+4      	; 0x40a6 <lora_driver_setAdaptiveDataRate+0xe>
    40a2:	66 ef       	ldi	r22, 0xF6	; 246
    40a4:	75 e0       	ldi	r23, 0x05	; 5
    40a6:	81 e2       	ldi	r24, 0x21	; 33
    40a8:	95 e0       	ldi	r25, 0x05	; 5
    40aa:	0e cf       	rjmp	.-484    	; 0x3ec8 <_uploadMessageRc>
    40ac:	08 95       	ret

000040ae <lora_driver_setReceiveDelay>:
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	82 e5       	ldi	r24, 0x52	; 82
    40b4:	95 e0       	ldi	r25, 0x05	; 5
    40b6:	9f 93       	push	r25
    40b8:	8f 93       	push	r24
    40ba:	8d e2       	ldi	r24, 0x2D	; 45
    40bc:	92 e1       	ldi	r25, 0x12	; 18
    40be:	9f 93       	push	r25
    40c0:	8f 93       	push	r24
    40c2:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <sprintf>
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	70 e0       	ldi	r23, 0x00	; 0
    40ca:	8d e2       	ldi	r24, 0x2D	; 45
    40cc:	92 e1       	ldi	r25, 0x12	; 18
    40ce:	fc de       	rcall	.-520    	; 0x3ec8 <_uploadMessageRc>
    40d0:	0f 90       	pop	r0
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	08 95       	ret

000040de <lora_driver_configureToEu868>:
    40de:	2f 92       	push	r2
    40e0:	3f 92       	push	r3
    40e2:	4f 92       	push	r4
    40e4:	5f 92       	push	r5
    40e6:	6f 92       	push	r6
    40e8:	7f 92       	push	r7
    40ea:	8f 92       	push	r8
    40ec:	9f 92       	push	r9
    40ee:	af 92       	push	r10
    40f0:	bf 92       	push	r11
    40f2:	cf 92       	push	r12
    40f4:	df 92       	push	r13
    40f6:	ef 92       	push	r14
    40f8:	ff 92       	push	r15
    40fa:	0f 93       	push	r16
    40fc:	1f 93       	push	r17
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	a0 97       	sbiw	r28, 0x20	; 32
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	6f e7       	ldi	r22, 0x7F	; 127
    4114:	75 e0       	ldi	r23, 0x05	; 5
    4116:	8b e8       	ldi	r24, 0x8B	; 139
    4118:	95 e0       	ldi	r25, 0x05	; 5
    411a:	07 de       	rcall	.-1010   	; 0x3d2a <_uploadMessage>
    411c:	60 de       	rcall	.-832    	; 0x3dde <_reply2ReturnCode>
    411e:	81 11       	cpse	r24, r1
    4120:	a3 c0       	rjmp	.+326    	; 0x4268 <lora_driver_configureToEu868+0x18a>
    4122:	80 e2       	ldi	r24, 0x20	; 32
    4124:	e2 e2       	ldi	r30, 0x22	; 34
    4126:	f2 e0       	ldi	r31, 0x02	; 2
    4128:	de 01       	movw	r26, r28
    412a:	11 96       	adiw	r26, 0x01	; 1
    412c:	01 90       	ld	r0, Z+
    412e:	0d 92       	st	X+, r0
    4130:	8a 95       	dec	r24
    4132:	e1 f7       	brne	.-8      	; 0x412c <lora_driver_configureToEu868+0x4e>
    4134:	9e 01       	movw	r18, r28
    4136:	2f 5f       	subi	r18, 0xFF	; 255
    4138:	3f 4f       	sbci	r19, 0xFF	; 255
    413a:	69 01       	movw	r12, r18
    413c:	e1 2c       	mov	r14, r1
    413e:	f1 2c       	mov	r15, r1
    4140:	0f 2e       	mov	r0, r31
    4142:	f7 e9       	ldi	r31, 0x97	; 151
    4144:	af 2e       	mov	r10, r31
    4146:	f5 e0       	ldi	r31, 0x05	; 5
    4148:	bf 2e       	mov	r11, r31
    414a:	f0 2d       	mov	r31, r0
    414c:	0d e2       	ldi	r16, 0x2D	; 45
    414e:	12 e1       	ldi	r17, 0x12	; 18
    4150:	0f 2e       	mov	r0, r31
    4152:	f0 eb       	ldi	r31, 0xB0	; 176
    4154:	4f 2e       	mov	r4, r31
    4156:	f5 e0       	ldi	r31, 0x05	; 5
    4158:	5f 2e       	mov	r5, r31
    415a:	f0 2d       	mov	r31, r0
    415c:	0f 2e       	mov	r0, r31
    415e:	f7 ec       	ldi	r31, 0xC7	; 199
    4160:	8f 2e       	mov	r8, r31
    4162:	f5 e0       	ldi	r31, 0x05	; 5
    4164:	9f 2e       	mov	r9, r31
    4166:	f0 2d       	mov	r31, r0
    4168:	0f 2e       	mov	r0, r31
    416a:	f1 ee       	ldi	r31, 0xE1	; 225
    416c:	6f 2e       	mov	r6, r31
    416e:	f5 e0       	ldi	r31, 0x05	; 5
    4170:	7f 2e       	mov	r7, r31
    4172:	f0 2d       	mov	r31, r0
    4174:	3e 2c       	mov	r3, r14
    4176:	2f 2c       	mov	r2, r15
    4178:	ff 92       	push	r15
    417a:	ef 92       	push	r14
    417c:	bf 92       	push	r11
    417e:	af 92       	push	r10
    4180:	1f 93       	push	r17
    4182:	0f 93       	push	r16
    4184:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <sprintf>
    4188:	60 e0       	ldi	r22, 0x00	; 0
    418a:	70 e0       	ldi	r23, 0x00	; 0
    418c:	c8 01       	movw	r24, r16
    418e:	cd dd       	rcall	.-1126   	; 0x3d2a <_uploadMessage>
    4190:	26 de       	rcall	.-948    	; 0x3dde <_reply2ReturnCode>
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	81 11       	cpse	r24, r1
    41a0:	63 c0       	rjmp	.+198    	; 0x4268 <lora_driver_configureToEu868+0x18a>
    41a2:	32 e0       	ldi	r19, 0x02	; 2
    41a4:	3e 15       	cp	r19, r14
    41a6:	e8 f4       	brcc	.+58     	; 0x41e2 <lora_driver_configureToEu868+0x104>
    41a8:	f6 01       	movw	r30, r12
    41aa:	83 81       	ldd	r24, Z+3	; 0x03
    41ac:	8f 93       	push	r24
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	8f 93       	push	r24
    41b2:	81 81       	ldd	r24, Z+1	; 0x01
    41b4:	8f 93       	push	r24
    41b6:	80 81       	ld	r24, Z
    41b8:	8f 93       	push	r24
    41ba:	ff 92       	push	r15
    41bc:	ef 92       	push	r14
    41be:	5f 92       	push	r5
    41c0:	4f 92       	push	r4
    41c2:	1f 93       	push	r17
    41c4:	0f 93       	push	r16
    41c6:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <sprintf>
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	c8 01       	movw	r24, r16
    41d0:	ac dd       	rcall	.-1192   	; 0x3d2a <_uploadMessage>
    41d2:	05 de       	rcall	.-1014   	; 0x3dde <_reply2ReturnCode>
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	f8 94       	cli
    41d8:	de bf       	out	0x3e, r29	; 62
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	cd bf       	out	0x3d, r28	; 61
    41de:	81 11       	cpse	r24, r1
    41e0:	43 c0       	rjmp	.+134    	; 0x4268 <lora_driver_configureToEu868+0x18a>
    41e2:	2f 92       	push	r2
    41e4:	3f 92       	push	r3
    41e6:	9f 92       	push	r9
    41e8:	8f 92       	push	r8
    41ea:	1f 93       	push	r17
    41ec:	0f 93       	push	r16
    41ee:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <sprintf>
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	c8 01       	movw	r24, r16
    41f8:	98 dd       	rcall	.-1232   	; 0x3d2a <_uploadMessage>
    41fa:	f1 dd       	rcall	.-1054   	; 0x3dde <_reply2ReturnCode>
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	81 11       	cpse	r24, r1
    420a:	2e c0       	rjmp	.+92     	; 0x4268 <lora_driver_configureToEu868+0x18a>
    420c:	2f 92       	push	r2
    420e:	3f 92       	push	r3
    4210:	7f 92       	push	r7
    4212:	6f 92       	push	r6
    4214:	1f 93       	push	r17
    4216:	0f 93       	push	r16
    4218:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <sprintf>
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	c8 01       	movw	r24, r16
    4222:	83 dd       	rcall	.-1274   	; 0x3d2a <_uploadMessage>
    4224:	dc dd       	rcall	.-1096   	; 0x3dde <_reply2ReturnCode>
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	81 11       	cpse	r24, r1
    4234:	19 c0       	rjmp	.+50     	; 0x4268 <lora_driver_configureToEu868+0x18a>
    4236:	3f ef       	ldi	r19, 0xFF	; 255
    4238:	e3 1a       	sub	r14, r19
    423a:	f3 0a       	sbc	r15, r19
    423c:	84 e0       	ldi	r24, 0x04	; 4
    423e:	c8 0e       	add	r12, r24
    4240:	d1 1c       	adc	r13, r1
    4242:	98 e0       	ldi	r25, 0x08	; 8
    4244:	e9 16       	cp	r14, r25
    4246:	f1 04       	cpc	r15, r1
    4248:	09 f0       	breq	.+2      	; 0x424c <lora_driver_configureToEu868+0x16e>
    424a:	94 cf       	rjmp	.-216    	; 0x4174 <lora_driver_configureToEu868+0x96>
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	89 ef       	ldi	r24, 0xF9	; 249
    4252:	95 e0       	ldi	r25, 0x05	; 5
    4254:	6a dd       	rcall	.-1324   	; 0x3d2a <_uploadMessage>
    4256:	c3 dd       	rcall	.-1146   	; 0x3dde <_reply2ReturnCode>
    4258:	81 11       	cpse	r24, r1
    425a:	06 c0       	rjmp	.+12     	; 0x4268 <lora_driver_configureToEu868+0x18a>
    425c:	60 e0       	ldi	r22, 0x00	; 0
    425e:	70 e0       	ldi	r23, 0x00	; 0
    4260:	8a e0       	ldi	r24, 0x0A	; 10
    4262:	96 e0       	ldi	r25, 0x06	; 6
    4264:	62 dd       	rcall	.-1340   	; 0x3d2a <_uploadMessage>
    4266:	bb dd       	rcall	.-1162   	; 0x3dde <_reply2ReturnCode>
    4268:	a0 96       	adiw	r28, 0x20	; 32
    426a:	0f b6       	in	r0, 0x3f	; 63
    426c:	f8 94       	cli
    426e:	de bf       	out	0x3e, r29	; 62
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	1f 91       	pop	r17
    427a:	0f 91       	pop	r16
    427c:	ff 90       	pop	r15
    427e:	ef 90       	pop	r14
    4280:	df 90       	pop	r13
    4282:	cf 90       	pop	r12
    4284:	bf 90       	pop	r11
    4286:	af 90       	pop	r10
    4288:	9f 90       	pop	r9
    428a:	8f 90       	pop	r8
    428c:	7f 90       	pop	r7
    428e:	6f 90       	pop	r6
    4290:	5f 90       	pop	r5
    4292:	4f 90       	pop	r4
    4294:	3f 90       	pop	r3
    4296:	2f 90       	pop	r2
    4298:	08 95       	ret

0000429a <lora_driver_setOtaaIdentity>:
    429a:	ef 92       	push	r14
    429c:	ff 92       	push	r15
    429e:	0f 93       	push	r16
    42a0:	1f 93       	push	r17
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
    42a6:	ec 01       	movw	r28, r24
    42a8:	8b 01       	movw	r16, r22
    42aa:	7a 01       	movw	r14, r20
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	f4 de       	rcall	.-536    	; 0x4098 <lora_driver_setAdaptiveDataRate>
    42b0:	81 11       	cpse	r24, r1
    42b2:	0d c0       	rjmp	.+26     	; 0x42ce <lora_driver_setOtaaIdentity+0x34>
    42b4:	ce 01       	movw	r24, r28
    42b6:	9f de       	rcall	.-706    	; 0x3ff6 <lora_driver_setApplicationIdentifier>
    42b8:	81 11       	cpse	r24, r1
    42ba:	09 c0       	rjmp	.+18     	; 0x42ce <lora_driver_setOtaaIdentity+0x34>
    42bc:	c8 01       	movw	r24, r16
    42be:	ac de       	rcall	.-680    	; 0x4018 <lora_driver_setApplicationKey>
    42c0:	81 11       	cpse	r24, r1
    42c2:	05 c0       	rjmp	.+10     	; 0x42ce <lora_driver_setOtaaIdentity+0x34>
    42c4:	c7 01       	movw	r24, r14
    42c6:	86 de       	rcall	.-756    	; 0x3fd4 <lora_driver_setDeviceIdentifier>
    42c8:	81 11       	cpse	r24, r1
    42ca:	01 c0       	rjmp	.+2      	; 0x42ce <lora_driver_setOtaaIdentity+0x34>
    42cc:	b6 de       	rcall	.-660    	; 0x403a <lora_driver_saveMac>
    42ce:	df 91       	pop	r29
    42d0:	cf 91       	pop	r28
    42d2:	1f 91       	pop	r17
    42d4:	0f 91       	pop	r16
    42d6:	ff 90       	pop	r15
    42d8:	ef 90       	pop	r14
    42da:	08 95       	ret

000042dc <lora_driver_mapReturnCodeToText>:
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	fc 01       	movw	r30, r24
    42e0:	ee 0f       	add	r30, r30
    42e2:	ff 1f       	adc	r31, r31
    42e4:	8e 0f       	add	r24, r30
    42e6:	9f 1f       	adc	r25, r31
    42e8:	fc 01       	movw	r30, r24
    42ea:	ed 52       	subi	r30, 0x2D	; 45
    42ec:	f9 4f       	sbci	r31, 0xF9	; 249
    42ee:	81 81       	ldd	r24, Z+1	; 0x01
    42f0:	92 81       	ldd	r25, Z+2	; 0x02
    42f2:	08 95       	ret

000042f4 <_serialCallBack>:
    42f4:	80 91 8a 12 	lds	r24, 0x128A	; 0x80128a <crc_sum.1945>
    42f8:	86 0f       	add	r24, r22
    42fa:	80 93 8a 12 	sts	0x128A, r24	; 0x80128a <crc_sum.1945>
    42fe:	90 91 8d 12 	lds	r25, 0x128D	; 0x80128d <_mh_state>
    4302:	91 30       	cpi	r25, 0x01	; 1
    4304:	79 f0       	breq	.+30     	; 0x4324 <_serialCallBack+0x30>
    4306:	28 f0       	brcs	.+10     	; 0x4312 <_serialCallBack+0x1e>
    4308:	92 30       	cpi	r25, 0x02	; 2
    430a:	a9 f0       	breq	.+42     	; 0x4336 <_serialCallBack+0x42>
    430c:	93 30       	cpi	r25, 0x03	; 3
    430e:	19 f1       	breq	.+70     	; 0x4356 <_serialCallBack+0x62>
    4310:	08 95       	ret
    4312:	6f 3f       	cpi	r22, 0xFF	; 255
    4314:	09 f0       	breq	.+2      	; 0x4318 <_serialCallBack+0x24>
    4316:	48 c0       	rjmp	.+144    	; 0x43a8 <_serialCallBack+0xb4>
    4318:	10 92 8a 12 	sts	0x128A, r1	; 0x80128a <crc_sum.1945>
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <_mh_state>
    4322:	08 95       	ret
    4324:	66 38       	cpi	r22, 0x86	; 134
    4326:	09 f0       	breq	.+2      	; 0x432a <_serialCallBack+0x36>
    4328:	3f c0       	rjmp	.+126    	; 0x43a8 <_serialCallBack+0xb4>
    432a:	10 92 89 12 	sts	0x1289, r1	; 0x801289 <inDex.1943>
    432e:	82 e0       	ldi	r24, 0x02	; 2
    4330:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <_mh_state>
    4334:	08 95       	ret
    4336:	e0 91 89 12 	lds	r30, 0x1289	; 0x801289 <inDex.1943>
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	8e 0f       	add	r24, r30
    433e:	80 93 89 12 	sts	0x1289, r24	; 0x801289 <inDex.1943>
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	e9 57       	subi	r30, 0x79	; 121
    4346:	fd 4e       	sbci	r31, 0xED	; 237
    4348:	60 83       	st	Z, r22
    434a:	82 30       	cpi	r24, 0x02	; 2
    434c:	69 f5       	brne	.+90     	; 0x43a8 <_serialCallBack+0xb4>
    434e:	83 e0       	ldi	r24, 0x03	; 3
    4350:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <_mh_state>
    4354:	08 95       	ret
    4356:	90 91 89 12 	lds	r25, 0x1289	; 0x801289 <inDex.1943>
    435a:	21 e0       	ldi	r18, 0x01	; 1
    435c:	29 0f       	add	r18, r25
    435e:	20 93 89 12 	sts	0x1289, r18	; 0x801289 <inDex.1943>
    4362:	96 30       	cpi	r25, 0x06	; 6
    4364:	09 f5       	brne	.+66     	; 0x43a8 <_serialCallBack+0xb4>
    4366:	81 11       	cpse	r24, r1
    4368:	0e c0       	rjmp	.+28     	; 0x4386 <_serialCallBack+0x92>
    436a:	e7 e8       	ldi	r30, 0x87	; 135
    436c:	f2 e1       	ldi	r31, 0x12	; 18
    436e:	80 81       	ld	r24, Z
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	98 2f       	mov	r25, r24
    4374:	88 27       	eor	r24, r24
    4376:	21 81       	ldd	r18, Z+1	; 0x01
    4378:	82 0f       	add	r24, r18
    437a:	91 1d       	adc	r25, r1
    437c:	90 93 8f 12 	sts	0x128F, r25	; 0x80128f <_ppm+0x1>
    4380:	80 93 8e 12 	sts	0x128E, r24	; 0x80128e <_ppm>
    4384:	04 c0       	rjmp	.+8      	; 0x438e <_serialCallBack+0x9a>
    4386:	10 92 8f 12 	sts	0x128F, r1	; 0x80128f <_ppm+0x1>
    438a:	10 92 8e 12 	sts	0x128E, r1	; 0x80128e <_ppm>
    438e:	10 92 8d 12 	sts	0x128D, r1	; 0x80128d <_mh_state>
    4392:	e0 91 8b 12 	lds	r30, 0x128B	; 0x80128b <_appCallBack>
    4396:	f0 91 8c 12 	lds	r31, 0x128C	; 0x80128c <_appCallBack+0x1>
    439a:	30 97       	sbiw	r30, 0x00	; 0
    439c:	29 f0       	breq	.+10     	; 0x43a8 <_serialCallBack+0xb4>
    439e:	80 91 8e 12 	lds	r24, 0x128E	; 0x80128e <_ppm>
    43a2:	90 91 8f 12 	lds	r25, 0x128F	; 0x80128f <_ppm+0x1>
    43a6:	19 95       	eicall
    43a8:	08 95       	ret

000043aa <mh_z19_initialise>:
    43aa:	8f 92       	push	r8
    43ac:	9f 92       	push	r9
    43ae:	af 92       	push	r10
    43b0:	cf 92       	push	r12
    43b2:	ef 92       	push	r14
    43b4:	0f 93       	push	r16
    43b6:	0f 2e       	mov	r0, r31
    43b8:	fa e7       	ldi	r31, 0x7A	; 122
    43ba:	8f 2e       	mov	r8, r31
    43bc:	f1 e2       	ldi	r31, 0x21	; 33
    43be:	9f 2e       	mov	r9, r31
    43c0:	f0 2d       	mov	r31, r0
    43c2:	68 94       	set
    43c4:	aa 24       	eor	r10, r10
    43c6:	a4 f8       	bld	r10, 4
    43c8:	68 94       	set
    43ca:	cc 24       	eor	r12, r12
    43cc:	c4 f8       	bld	r12, 4
    43ce:	e1 2c       	mov	r14, r1
    43d0:	00 e0       	ldi	r16, 0x00	; 0
    43d2:	23 e0       	ldi	r18, 0x03	; 3
    43d4:	40 e8       	ldi	r20, 0x80	; 128
    43d6:	55 e2       	ldi	r21, 0x25	; 37
    43d8:	60 e0       	ldi	r22, 0x00	; 0
    43da:	70 e0       	ldi	r23, 0x00	; 0
    43dc:	3f d0       	rcall	.+126    	; 0x445c <serial_create>
    43de:	90 93 91 12 	sts	0x1291, r25	; 0x801291 <_serial+0x1>
    43e2:	80 93 90 12 	sts	0x1290, r24	; 0x801290 <_serial>
    43e6:	0f 91       	pop	r16
    43e8:	ef 90       	pop	r14
    43ea:	cf 90       	pop	r12
    43ec:	af 90       	pop	r10
    43ee:	9f 90       	pop	r9
    43f0:	8f 90       	pop	r8
    43f2:	08 95       	ret

000043f4 <mh_z19_injectCallBack>:
    43f4:	90 93 8c 12 	sts	0x128C, r25	; 0x80128c <_appCallBack+0x1>
    43f8:	80 93 8b 12 	sts	0x128B, r24	; 0x80128b <_appCallBack>
    43fc:	08 95       	ret

000043fe <mh_z19_takeMeassuring>:
    43fe:	cf 93       	push	r28
    4400:	df 93       	push	r29
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	29 97       	sbiw	r28, 0x09	; 9
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	89 e0       	ldi	r24, 0x09	; 9
    4414:	e2 e4       	ldi	r30, 0x42	; 66
    4416:	f2 e0       	ldi	r31, 0x02	; 2
    4418:	9e 01       	movw	r18, r28
    441a:	2f 5f       	subi	r18, 0xFF	; 255
    441c:	3f 4f       	sbci	r19, 0xFF	; 255
    441e:	d9 01       	movw	r26, r18
    4420:	01 90       	ld	r0, Z+
    4422:	0d 92       	st	X+, r0
    4424:	8a 95       	dec	r24
    4426:	e1 f7       	brne	.-8      	; 0x4420 <mh_z19_takeMeassuring+0x22>
    4428:	10 92 8f 12 	sts	0x128F, r1	; 0x80128f <_ppm+0x1>
    442c:	10 92 8e 12 	sts	0x128E, r1	; 0x80128e <_ppm>
    4430:	80 91 90 12 	lds	r24, 0x1290	; 0x801290 <_serial>
    4434:	90 91 91 12 	lds	r25, 0x1291	; 0x801291 <_serial+0x1>
    4438:	00 97       	sbiw	r24, 0x00	; 0
    443a:	31 f0       	breq	.+12     	; 0x4448 <mh_z19_takeMeassuring+0x4a>
    443c:	42 2f       	mov	r20, r18
    443e:	53 2f       	mov	r21, r19
    4440:	69 e0       	ldi	r22, 0x09	; 9
    4442:	dc d0       	rcall	.+440    	; 0x45fc <serial_sendBytes>
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	01 c0       	rjmp	.+2      	; 0x444a <mh_z19_takeMeassuring+0x4c>
    4448:	82 e0       	ldi	r24, 0x02	; 2
    444a:	29 96       	adiw	r28, 0x09	; 9
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	f8 94       	cli
    4450:	de bf       	out	0x3e, r29	; 62
    4452:	0f be       	out	0x3f, r0	; 63
    4454:	cd bf       	out	0x3d, r28	; 61
    4456:	df 91       	pop	r29
    4458:	cf 91       	pop	r28
    445a:	08 95       	ret

0000445c <serial_create>:
    445c:	2f 92       	push	r2
    445e:	3f 92       	push	r3
    4460:	4f 92       	push	r4
    4462:	5f 92       	push	r5
    4464:	6f 92       	push	r6
    4466:	7f 92       	push	r7
    4468:	8f 92       	push	r8
    446a:	9f 92       	push	r9
    446c:	af 92       	push	r10
    446e:	cf 92       	push	r12
    4470:	ef 92       	push	r14
    4472:	ff 92       	push	r15
    4474:	0f 93       	push	r16
    4476:	1f 93       	push	r17
    4478:	cf 93       	push	r28
    447a:	df 93       	push	r29
    447c:	cd b7       	in	r28, 0x3d	; 61
    447e:	de b7       	in	r29, 0x3e	; 62
    4480:	f8 2e       	mov	r15, r24
    4482:	2a 01       	movw	r4, r20
    4484:	3b 01       	movw	r6, r22
    4486:	88 e0       	ldi	r24, 0x08	; 8
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <malloc>
    448e:	8c 01       	movw	r16, r24
    4490:	8f 2d       	mov	r24, r15
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	fc 01       	movw	r30, r24
    4496:	ee 0f       	add	r30, r30
    4498:	ff 1f       	adc	r31, r31
    449a:	ee 56       	subi	r30, 0x6E	; 110
    449c:	fd 4e       	sbci	r31, 0xED	; 237
    449e:	11 83       	std	Z+1, r17	; 0x01
    44a0:	00 83       	st	Z, r16
    44a2:	01 15       	cp	r16, r1
    44a4:	11 05       	cpc	r17, r1
    44a6:	09 f4       	brne	.+2      	; 0x44aa <serial_create+0x4e>
    44a8:	6c c0       	rjmp	.+216    	; 0x4582 <serial_create+0x126>
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	fc 01       	movw	r30, r24
    44b0:	e5 5f       	subi	r30, 0xF5	; 245
    44b2:	fd 4f       	sbci	r31, 0xFD	; 253
    44b4:	80 81       	ld	r24, Z
    44b6:	91 81       	ldd	r25, Z+1	; 0x01
    44b8:	d8 01       	movw	r26, r16
    44ba:	8d 93       	st	X+, r24
    44bc:	9c 93       	st	X, r25
    44be:	8c 2d       	mov	r24, r12
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	88 0f       	add	r24, r24
    44c8:	99 1f       	adc	r25, r25
    44ca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <malloc>
    44ce:	1c 01       	movw	r2, r24
    44d0:	86 e0       	ldi	r24, 0x06	; 6
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <malloc>
    44d8:	7c 01       	movw	r14, r24
    44da:	4c 2d       	mov	r20, r12
    44dc:	b1 01       	movw	r22, r2
    44de:	40 d5       	rcall	.+2688   	; 0x4f60 <fifo_init>
    44e0:	f8 01       	movw	r30, r16
    44e2:	f5 82       	std	Z+5, r15	; 0x05
    44e4:	e4 82       	std	Z+4, r14	; 0x04
    44e6:	8a 2d       	mov	r24, r10
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	88 0f       	add	r24, r24
    44f0:	99 1f       	adc	r25, r25
    44f2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <malloc>
    44f6:	1c 01       	movw	r2, r24
    44f8:	86 e0       	ldi	r24, 0x06	; 6
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	0e 94 c8 2c 	call	0x5990	; 0x5990 <malloc>
    4500:	7c 01       	movw	r14, r24
    4502:	4a 2d       	mov	r20, r10
    4504:	b1 01       	movw	r22, r2
    4506:	2c d5       	rcall	.+2648   	; 0x4f60 <fifo_init>
    4508:	d8 01       	movw	r26, r16
    450a:	13 96       	adiw	r26, 0x03	; 3
    450c:	fc 92       	st	X, r15
    450e:	ee 92       	st	-X, r14
    4510:	12 97       	sbiw	r26, 0x02	; 2
    4512:	17 96       	adiw	r26, 0x07	; 7
    4514:	9c 92       	st	X, r9
    4516:	8e 92       	st	-X, r8
    4518:	16 97       	sbiw	r26, 0x06	; 6
    451a:	ff b6       	in	r15, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	ed 91       	ld	r30, X+
    4520:	fc 91       	ld	r31, X
    4522:	11 97       	sbiw	r26, 0x01	; 1
    4524:	36 97       	sbiw	r30, 0x06	; 6
    4526:	80 81       	ld	r24, Z
    4528:	82 60       	ori	r24, 0x02	; 2
    452a:	80 83       	st	Z, r24
    452c:	8d 90       	ld	r8, X+
    452e:	9c 90       	ld	r9, X
    4530:	c3 01       	movw	r24, r6
    4532:	b2 01       	movw	r22, r4
    4534:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__floatunsisf>
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	51 e4       	ldi	r21, 0x41	; 65
    4540:	0e 94 32 2c 	call	0x5864	; 0x5864 <__mulsf3>
    4544:	9b 01       	movw	r18, r22
    4546:	ac 01       	movw	r20, r24
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	74 e2       	ldi	r23, 0x24	; 36
    454c:	84 e7       	ldi	r24, 0x74	; 116
    454e:	9b e4       	ldi	r25, 0x4B	; 75
    4550:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__divsf3>
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	40 e8       	ldi	r20, 0x80	; 128
    455a:	5f e3       	ldi	r21, 0x3F	; 63
    455c:	45 da       	rcall	.-2934   	; 0x39e8 <__subsf3>
    455e:	0e 94 c6 2b 	call	0x578c	; 0x578c <__fixunssfsi>
    4562:	f4 01       	movw	r30, r8
    4564:	32 97       	sbiw	r30, 0x02	; 2
    4566:	60 83       	st	Z, r22
    4568:	d8 01       	movw	r26, r16
    456a:	ed 91       	ld	r30, X+
    456c:	fc 91       	ld	r31, X
    456e:	11 97       	sbiw	r26, 0x01	; 1
    4570:	35 97       	sbiw	r30, 0x05	; 5
    4572:	88 e9       	ldi	r24, 0x98	; 152
    4574:	80 83       	st	Z, r24
    4576:	ed 91       	ld	r30, X+
    4578:	fc 91       	ld	r31, X
    457a:	34 97       	sbiw	r30, 0x04	; 4
    457c:	86 e0       	ldi	r24, 0x06	; 6
    457e:	80 83       	st	Z, r24
    4580:	ff be       	out	0x3f, r15	; 63
    4582:	c8 01       	movw	r24, r16
    4584:	df 91       	pop	r29
    4586:	cf 91       	pop	r28
    4588:	1f 91       	pop	r17
    458a:	0f 91       	pop	r16
    458c:	ff 90       	pop	r15
    458e:	ef 90       	pop	r14
    4590:	cf 90       	pop	r12
    4592:	af 90       	pop	r10
    4594:	9f 90       	pop	r9
    4596:	8f 90       	pop	r8
    4598:	7f 90       	pop	r7
    459a:	6f 90       	pop	r6
    459c:	5f 90       	pop	r5
    459e:	4f 90       	pop	r4
    45a0:	3f 90       	pop	r3
    45a2:	2f 90       	pop	r2
    45a4:	08 95       	ret

000045a6 <serial_sendByte>:
    45a6:	cf 93       	push	r28
    45a8:	df 93       	push	r29
    45aa:	dc 01       	movw	r26, r24
    45ac:	89 2b       	or	r24, r25
    45ae:	01 f1       	breq	.+64     	; 0x45f0 <serial_sendByte+0x4a>
    45b0:	12 96       	adiw	r26, 0x02	; 2
    45b2:	ed 91       	ld	r30, X+
    45b4:	fc 91       	ld	r31, X
    45b6:	13 97       	sbiw	r26, 0x03	; 3
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	82 81       	ldd	r24, Z+2	; 0x02
    45bc:	25 81       	ldd	r18, Z+5	; 0x05
    45be:	98 1b       	sub	r25, r24
    45c0:	92 23       	and	r25, r18
    45c2:	84 81       	ldd	r24, Z+4	; 0x04
    45c4:	98 17       	cp	r25, r24
    45c6:	b1 f0       	breq	.+44     	; 0x45f4 <serial_sendByte+0x4e>
    45c8:	83 81       	ldd	r24, Z+3	; 0x03
    45ca:	26 95       	lsr	r18
    45cc:	28 23       	and	r18, r24
    45ce:	c0 81       	ld	r28, Z
    45d0:	d1 81       	ldd	r29, Z+1	; 0x01
    45d2:	c2 0f       	add	r28, r18
    45d4:	d1 1d       	adc	r29, r1
    45d6:	68 83       	st	Y, r22
    45d8:	8f 5f       	subi	r24, 0xFF	; 255
    45da:	95 81       	ldd	r25, Z+5	; 0x05
    45dc:	89 23       	and	r24, r25
    45de:	83 83       	std	Z+3, r24	; 0x03
    45e0:	ed 91       	ld	r30, X+
    45e2:	fc 91       	ld	r31, X
    45e4:	35 97       	sbiw	r30, 0x05	; 5
    45e6:	80 81       	ld	r24, Z
    45e8:	80 62       	ori	r24, 0x20	; 32
    45ea:	80 83       	st	Z, r24
    45ec:	80 e0       	ldi	r24, 0x00	; 0
    45ee:	03 c0       	rjmp	.+6      	; 0x45f6 <serial_sendByte+0x50>
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	01 c0       	rjmp	.+2      	; 0x45f6 <serial_sendByte+0x50>
    45f4:	82 e0       	ldi	r24, 0x02	; 2
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	08 95       	ret

000045fc <serial_sendBytes>:
    45fc:	ef 92       	push	r14
    45fe:	ff 92       	push	r15
    4600:	0f 93       	push	r16
    4602:	1f 93       	push	r17
    4604:	cf 93       	push	r28
    4606:	df 93       	push	r29
    4608:	7c 01       	movw	r14, r24
    460a:	00 97       	sbiw	r24, 0x00	; 0
    460c:	09 f4       	brne	.+2      	; 0x4610 <serial_sendBytes+0x14>
    460e:	41 c0       	rjmp	.+130    	; 0x4692 <serial_sendBytes+0x96>
    4610:	dc 01       	movw	r26, r24
    4612:	12 96       	adiw	r26, 0x02	; 2
    4614:	ed 91       	ld	r30, X+
    4616:	fc 91       	ld	r31, X
    4618:	13 97       	sbiw	r26, 0x03	; 3
    461a:	93 81       	ldd	r25, Z+3	; 0x03
    461c:	82 81       	ldd	r24, Z+2	; 0x02
    461e:	98 1b       	sub	r25, r24
    4620:	85 81       	ldd	r24, Z+5	; 0x05
    4622:	98 23       	and	r25, r24
    4624:	84 81       	ldd	r24, Z+4	; 0x04
    4626:	89 1b       	sub	r24, r25
    4628:	86 17       	cp	r24, r22
    462a:	a8 f1       	brcs	.+106    	; 0x4696 <serial_sendBytes+0x9a>
    462c:	66 23       	and	r22, r22
    462e:	41 f1       	breq	.+80     	; 0x4680 <serial_sendBytes+0x84>
    4630:	84 2f       	mov	r24, r20
    4632:	95 2f       	mov	r25, r21
    4634:	dc 01       	movw	r26, r24
    4636:	61 50       	subi	r22, 0x01	; 1
    4638:	46 2f       	mov	r20, r22
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	4f 5f       	subi	r20, 0xFF	; 255
    463e:	5f 4f       	sbci	r21, 0xFF	; 255
    4640:	48 0f       	add	r20, r24
    4642:	59 1f       	adc	r21, r25
    4644:	e7 01       	movw	r28, r14
    4646:	ea 81       	ldd	r30, Y+2	; 0x02
    4648:	fb 81       	ldd	r31, Y+3	; 0x03
    464a:	93 81       	ldd	r25, Z+3	; 0x03
    464c:	82 81       	ldd	r24, Z+2	; 0x02
    464e:	25 81       	ldd	r18, Z+5	; 0x05
    4650:	98 1b       	sub	r25, r24
    4652:	92 23       	and	r25, r18
    4654:	84 81       	ldd	r24, Z+4	; 0x04
    4656:	98 17       	cp	r25, r24
    4658:	79 f0       	breq	.+30     	; 0x4678 <serial_sendBytes+0x7c>
    465a:	8c 91       	ld	r24, X
    465c:	93 81       	ldd	r25, Z+3	; 0x03
    465e:	26 95       	lsr	r18
    4660:	29 23       	and	r18, r25
    4662:	60 81       	ld	r22, Z
    4664:	71 81       	ldd	r23, Z+1	; 0x01
    4666:	8b 01       	movw	r16, r22
    4668:	02 0f       	add	r16, r18
    466a:	11 1d       	adc	r17, r1
    466c:	e8 01       	movw	r28, r16
    466e:	88 83       	st	Y, r24
    4670:	9f 5f       	subi	r25, 0xFF	; 255
    4672:	85 81       	ldd	r24, Z+5	; 0x05
    4674:	98 23       	and	r25, r24
    4676:	93 83       	std	Z+3, r25	; 0x03
    4678:	11 96       	adiw	r26, 0x01	; 1
    467a:	a4 17       	cp	r26, r20
    467c:	b5 07       	cpc	r27, r21
    467e:	11 f7       	brne	.-60     	; 0x4644 <serial_sendBytes+0x48>
    4680:	d7 01       	movw	r26, r14
    4682:	ed 91       	ld	r30, X+
    4684:	fc 91       	ld	r31, X
    4686:	35 97       	sbiw	r30, 0x05	; 5
    4688:	80 81       	ld	r24, Z
    468a:	80 62       	ori	r24, 0x20	; 32
    468c:	80 83       	st	Z, r24
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	03 c0       	rjmp	.+6      	; 0x4698 <serial_sendBytes+0x9c>
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	01 c0       	rjmp	.+2      	; 0x4698 <serial_sendBytes+0x9c>
    4696:	82 e0       	ldi	r24, 0x02	; 2
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	0f 91       	pop	r16
    46a0:	ff 90       	pop	r15
    46a2:	ef 90       	pop	r14
    46a4:	08 95       	ret

000046a6 <serial_getByte>:
    46a6:	00 97       	sbiw	r24, 0x00	; 0
    46a8:	d1 f0       	breq	.+52     	; 0x46de <serial_getByte+0x38>
    46aa:	dc 01       	movw	r26, r24
    46ac:	14 96       	adiw	r26, 0x04	; 4
    46ae:	ed 91       	ld	r30, X+
    46b0:	fc 91       	ld	r31, X
    46b2:	15 97       	sbiw	r26, 0x05	; 5
    46b4:	93 81       	ldd	r25, Z+3	; 0x03
    46b6:	82 81       	ldd	r24, Z+2	; 0x02
    46b8:	98 17       	cp	r25, r24
    46ba:	99 f0       	breq	.+38     	; 0x46e2 <serial_getByte+0x3c>
    46bc:	92 81       	ldd	r25, Z+2	; 0x02
    46be:	85 81       	ldd	r24, Z+5	; 0x05
    46c0:	86 95       	lsr	r24
    46c2:	89 23       	and	r24, r25
    46c4:	a0 81       	ld	r26, Z
    46c6:	b1 81       	ldd	r27, Z+1	; 0x01
    46c8:	a8 0f       	add	r26, r24
    46ca:	b1 1d       	adc	r27, r1
    46cc:	8c 91       	ld	r24, X
    46ce:	db 01       	movw	r26, r22
    46d0:	8c 93       	st	X, r24
    46d2:	9f 5f       	subi	r25, 0xFF	; 255
    46d4:	85 81       	ldd	r24, Z+5	; 0x05
    46d6:	98 23       	and	r25, r24
    46d8:	92 83       	std	Z+2, r25	; 0x02
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	08 95       	ret
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	08 95       	ret
    46e2:	83 e0       	ldi	r24, 0x03	; 3
    46e4:	08 95       	ret

000046e6 <__vector_25>:
    46e6:	1f 92       	push	r1
    46e8:	0f 92       	push	r0
    46ea:	0f b6       	in	r0, 0x3f	; 63
    46ec:	0f 92       	push	r0
    46ee:	11 24       	eor	r1, r1
    46f0:	0b b6       	in	r0, 0x3b	; 59
    46f2:	0f 92       	push	r0
    46f4:	2f 93       	push	r18
    46f6:	3f 93       	push	r19
    46f8:	4f 93       	push	r20
    46fa:	5f 93       	push	r21
    46fc:	6f 93       	push	r22
    46fe:	7f 93       	push	r23
    4700:	8f 93       	push	r24
    4702:	9f 93       	push	r25
    4704:	af 93       	push	r26
    4706:	bf 93       	push	r27
    4708:	cf 93       	push	r28
    470a:	df 93       	push	r29
    470c:	ef 93       	push	r30
    470e:	ff 93       	push	r31
    4710:	a0 91 92 12 	lds	r26, 0x1292	; 0x801292 <_ser_handle>
    4714:	b0 91 93 12 	lds	r27, 0x1293	; 0x801293 <_ser_handle+0x1>
    4718:	10 97       	sbiw	r26, 0x00	; 0
    471a:	11 f1       	breq	.+68     	; 0x4760 <__vector_25+0x7a>
    471c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4720:	14 96       	adiw	r26, 0x04	; 4
    4722:	ed 91       	ld	r30, X+
    4724:	fc 91       	ld	r31, X
    4726:	15 97       	sbiw	r26, 0x05	; 5
    4728:	93 81       	ldd	r25, Z+3	; 0x03
    472a:	82 81       	ldd	r24, Z+2	; 0x02
    472c:	25 81       	ldd	r18, Z+5	; 0x05
    472e:	98 1b       	sub	r25, r24
    4730:	92 23       	and	r25, r18
    4732:	84 81       	ldd	r24, Z+4	; 0x04
    4734:	98 17       	cp	r25, r24
    4736:	61 f0       	breq	.+24     	; 0x4750 <__vector_25+0x6a>
    4738:	83 81       	ldd	r24, Z+3	; 0x03
    473a:	26 95       	lsr	r18
    473c:	28 23       	and	r18, r24
    473e:	c0 81       	ld	r28, Z
    4740:	d1 81       	ldd	r29, Z+1	; 0x01
    4742:	c2 0f       	add	r28, r18
    4744:	d1 1d       	adc	r29, r1
    4746:	68 83       	st	Y, r22
    4748:	8f 5f       	subi	r24, 0xFF	; 255
    474a:	95 81       	ldd	r25, Z+5	; 0x05
    474c:	89 23       	and	r24, r25
    474e:	83 83       	std	Z+3, r24	; 0x03
    4750:	16 96       	adiw	r26, 0x06	; 6
    4752:	ed 91       	ld	r30, X+
    4754:	fc 91       	ld	r31, X
    4756:	17 97       	sbiw	r26, 0x07	; 7
    4758:	30 97       	sbiw	r30, 0x00	; 0
    475a:	11 f0       	breq	.+4      	; 0x4760 <__vector_25+0x7a>
    475c:	cd 01       	movw	r24, r26
    475e:	19 95       	eicall
    4760:	ff 91       	pop	r31
    4762:	ef 91       	pop	r30
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	bf 91       	pop	r27
    476a:	af 91       	pop	r26
    476c:	9f 91       	pop	r25
    476e:	8f 91       	pop	r24
    4770:	7f 91       	pop	r23
    4772:	6f 91       	pop	r22
    4774:	5f 91       	pop	r21
    4776:	4f 91       	pop	r20
    4778:	3f 91       	pop	r19
    477a:	2f 91       	pop	r18
    477c:	0f 90       	pop	r0
    477e:	0b be       	out	0x3b, r0	; 59
    4780:	0f 90       	pop	r0
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	0f 90       	pop	r0
    4786:	1f 90       	pop	r1
    4788:	18 95       	reti

0000478a <__vector_26>:
    478a:	1f 92       	push	r1
    478c:	0f 92       	push	r0
    478e:	0f b6       	in	r0, 0x3f	; 63
    4790:	0f 92       	push	r0
    4792:	11 24       	eor	r1, r1
    4794:	0b b6       	in	r0, 0x3b	; 59
    4796:	0f 92       	push	r0
    4798:	2f 93       	push	r18
    479a:	8f 93       	push	r24
    479c:	9f 93       	push	r25
    479e:	af 93       	push	r26
    47a0:	bf 93       	push	r27
    47a2:	ef 93       	push	r30
    47a4:	ff 93       	push	r31
    47a6:	e0 91 92 12 	lds	r30, 0x1292	; 0x801292 <_ser_handle>
    47aa:	f0 91 93 12 	lds	r31, 0x1293	; 0x801293 <_ser_handle+0x1>
    47ae:	30 97       	sbiw	r30, 0x00	; 0
    47b0:	b9 f0       	breq	.+46     	; 0x47e0 <__vector_26+0x56>
    47b2:	02 80       	ldd	r0, Z+2	; 0x02
    47b4:	f3 81       	ldd	r31, Z+3	; 0x03
    47b6:	e0 2d       	mov	r30, r0
    47b8:	93 81       	ldd	r25, Z+3	; 0x03
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	98 17       	cp	r25, r24
    47be:	b1 f0       	breq	.+44     	; 0x47ec <__vector_26+0x62>
    47c0:	92 81       	ldd	r25, Z+2	; 0x02
    47c2:	85 81       	ldd	r24, Z+5	; 0x05
    47c4:	28 2f       	mov	r18, r24
    47c6:	26 95       	lsr	r18
    47c8:	29 23       	and	r18, r25
    47ca:	a0 81       	ld	r26, Z
    47cc:	b1 81       	ldd	r27, Z+1	; 0x01
    47ce:	a2 0f       	add	r26, r18
    47d0:	b1 1d       	adc	r27, r1
    47d2:	2c 91       	ld	r18, X
    47d4:	9f 5f       	subi	r25, 0xFF	; 255
    47d6:	89 23       	and	r24, r25
    47d8:	82 83       	std	Z+2, r24	; 0x02
    47da:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    47de:	0b c0       	rjmp	.+22     	; 0x47f6 <__vector_26+0x6c>
    47e0:	e1 ec       	ldi	r30, 0xC1	; 193
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	8f 7d       	andi	r24, 0xDF	; 223
    47e8:	80 83       	st	Z, r24
    47ea:	05 c0       	rjmp	.+10     	; 0x47f6 <__vector_26+0x6c>
    47ec:	e1 ec       	ldi	r30, 0xC1	; 193
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	80 81       	ld	r24, Z
    47f2:	8f 7d       	andi	r24, 0xDF	; 223
    47f4:	80 83       	st	Z, r24
    47f6:	ff 91       	pop	r31
    47f8:	ef 91       	pop	r30
    47fa:	bf 91       	pop	r27
    47fc:	af 91       	pop	r26
    47fe:	9f 91       	pop	r25
    4800:	8f 91       	pop	r24
    4802:	2f 91       	pop	r18
    4804:	0f 90       	pop	r0
    4806:	0b be       	out	0x3b, r0	; 59
    4808:	0f 90       	pop	r0
    480a:	0f be       	out	0x3f, r0	; 63
    480c:	0f 90       	pop	r0
    480e:	1f 90       	pop	r1
    4810:	18 95       	reti

00004812 <__vector_36>:
    4812:	1f 92       	push	r1
    4814:	0f 92       	push	r0
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	0f 92       	push	r0
    481a:	11 24       	eor	r1, r1
    481c:	0b b6       	in	r0, 0x3b	; 59
    481e:	0f 92       	push	r0
    4820:	2f 93       	push	r18
    4822:	3f 93       	push	r19
    4824:	4f 93       	push	r20
    4826:	5f 93       	push	r21
    4828:	6f 93       	push	r22
    482a:	7f 93       	push	r23
    482c:	8f 93       	push	r24
    482e:	9f 93       	push	r25
    4830:	af 93       	push	r26
    4832:	bf 93       	push	r27
    4834:	cf 93       	push	r28
    4836:	df 93       	push	r29
    4838:	ef 93       	push	r30
    483a:	ff 93       	push	r31
    483c:	a0 91 94 12 	lds	r26, 0x1294	; 0x801294 <_ser_handle+0x2>
    4840:	b0 91 95 12 	lds	r27, 0x1295	; 0x801295 <_ser_handle+0x3>
    4844:	10 97       	sbiw	r26, 0x00	; 0
    4846:	11 f1       	breq	.+68     	; 0x488c <__vector_36+0x7a>
    4848:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    484c:	14 96       	adiw	r26, 0x04	; 4
    484e:	ed 91       	ld	r30, X+
    4850:	fc 91       	ld	r31, X
    4852:	15 97       	sbiw	r26, 0x05	; 5
    4854:	93 81       	ldd	r25, Z+3	; 0x03
    4856:	82 81       	ldd	r24, Z+2	; 0x02
    4858:	25 81       	ldd	r18, Z+5	; 0x05
    485a:	98 1b       	sub	r25, r24
    485c:	92 23       	and	r25, r18
    485e:	84 81       	ldd	r24, Z+4	; 0x04
    4860:	98 17       	cp	r25, r24
    4862:	61 f0       	breq	.+24     	; 0x487c <__vector_36+0x6a>
    4864:	83 81       	ldd	r24, Z+3	; 0x03
    4866:	26 95       	lsr	r18
    4868:	28 23       	and	r18, r24
    486a:	c0 81       	ld	r28, Z
    486c:	d1 81       	ldd	r29, Z+1	; 0x01
    486e:	c2 0f       	add	r28, r18
    4870:	d1 1d       	adc	r29, r1
    4872:	68 83       	st	Y, r22
    4874:	8f 5f       	subi	r24, 0xFF	; 255
    4876:	95 81       	ldd	r25, Z+5	; 0x05
    4878:	89 23       	and	r24, r25
    487a:	83 83       	std	Z+3, r24	; 0x03
    487c:	16 96       	adiw	r26, 0x06	; 6
    487e:	ed 91       	ld	r30, X+
    4880:	fc 91       	ld	r31, X
    4882:	17 97       	sbiw	r26, 0x07	; 7
    4884:	30 97       	sbiw	r30, 0x00	; 0
    4886:	11 f0       	breq	.+4      	; 0x488c <__vector_36+0x7a>
    4888:	cd 01       	movw	r24, r26
    488a:	19 95       	eicall
    488c:	ff 91       	pop	r31
    488e:	ef 91       	pop	r30
    4890:	df 91       	pop	r29
    4892:	cf 91       	pop	r28
    4894:	bf 91       	pop	r27
    4896:	af 91       	pop	r26
    4898:	9f 91       	pop	r25
    489a:	8f 91       	pop	r24
    489c:	7f 91       	pop	r23
    489e:	6f 91       	pop	r22
    48a0:	5f 91       	pop	r21
    48a2:	4f 91       	pop	r20
    48a4:	3f 91       	pop	r19
    48a6:	2f 91       	pop	r18
    48a8:	0f 90       	pop	r0
    48aa:	0b be       	out	0x3b, r0	; 59
    48ac:	0f 90       	pop	r0
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	0f 90       	pop	r0
    48b2:	1f 90       	pop	r1
    48b4:	18 95       	reti

000048b6 <__vector_37>:
    48b6:	1f 92       	push	r1
    48b8:	0f 92       	push	r0
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	0f 92       	push	r0
    48be:	11 24       	eor	r1, r1
    48c0:	0b b6       	in	r0, 0x3b	; 59
    48c2:	0f 92       	push	r0
    48c4:	2f 93       	push	r18
    48c6:	8f 93       	push	r24
    48c8:	9f 93       	push	r25
    48ca:	af 93       	push	r26
    48cc:	bf 93       	push	r27
    48ce:	ef 93       	push	r30
    48d0:	ff 93       	push	r31
    48d2:	e0 91 94 12 	lds	r30, 0x1294	; 0x801294 <_ser_handle+0x2>
    48d6:	f0 91 95 12 	lds	r31, 0x1295	; 0x801295 <_ser_handle+0x3>
    48da:	30 97       	sbiw	r30, 0x00	; 0
    48dc:	b9 f0       	breq	.+46     	; 0x490c <__vector_37+0x56>
    48de:	02 80       	ldd	r0, Z+2	; 0x02
    48e0:	f3 81       	ldd	r31, Z+3	; 0x03
    48e2:	e0 2d       	mov	r30, r0
    48e4:	93 81       	ldd	r25, Z+3	; 0x03
    48e6:	82 81       	ldd	r24, Z+2	; 0x02
    48e8:	98 17       	cp	r25, r24
    48ea:	b1 f0       	breq	.+44     	; 0x4918 <__vector_37+0x62>
    48ec:	92 81       	ldd	r25, Z+2	; 0x02
    48ee:	85 81       	ldd	r24, Z+5	; 0x05
    48f0:	28 2f       	mov	r18, r24
    48f2:	26 95       	lsr	r18
    48f4:	29 23       	and	r18, r25
    48f6:	a0 81       	ld	r26, Z
    48f8:	b1 81       	ldd	r27, Z+1	; 0x01
    48fa:	a2 0f       	add	r26, r18
    48fc:	b1 1d       	adc	r27, r1
    48fe:	2c 91       	ld	r18, X
    4900:	9f 5f       	subi	r25, 0xFF	; 255
    4902:	89 23       	and	r24, r25
    4904:	82 83       	std	Z+2, r24	; 0x02
    4906:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    490a:	0b c0       	rjmp	.+22     	; 0x4922 <__vector_37+0x6c>
    490c:	e9 ec       	ldi	r30, 0xC9	; 201
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	80 81       	ld	r24, Z
    4912:	8f 7d       	andi	r24, 0xDF	; 223
    4914:	80 83       	st	Z, r24
    4916:	05 c0       	rjmp	.+10     	; 0x4922 <__vector_37+0x6c>
    4918:	e9 ec       	ldi	r30, 0xC9	; 201
    491a:	f0 e0       	ldi	r31, 0x00	; 0
    491c:	80 81       	ld	r24, Z
    491e:	8f 7d       	andi	r24, 0xDF	; 223
    4920:	80 83       	st	Z, r24
    4922:	ff 91       	pop	r31
    4924:	ef 91       	pop	r30
    4926:	bf 91       	pop	r27
    4928:	af 91       	pop	r26
    492a:	9f 91       	pop	r25
    492c:	8f 91       	pop	r24
    492e:	2f 91       	pop	r18
    4930:	0f 90       	pop	r0
    4932:	0b be       	out	0x3b, r0	; 59
    4934:	0f 90       	pop	r0
    4936:	0f be       	out	0x3f, r0	; 63
    4938:	0f 90       	pop	r0
    493a:	1f 90       	pop	r1
    493c:	18 95       	reti

0000493e <__vector_51>:
    493e:	1f 92       	push	r1
    4940:	0f 92       	push	r0
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	0f 92       	push	r0
    4946:	11 24       	eor	r1, r1
    4948:	0b b6       	in	r0, 0x3b	; 59
    494a:	0f 92       	push	r0
    494c:	2f 93       	push	r18
    494e:	3f 93       	push	r19
    4950:	4f 93       	push	r20
    4952:	5f 93       	push	r21
    4954:	6f 93       	push	r22
    4956:	7f 93       	push	r23
    4958:	8f 93       	push	r24
    495a:	9f 93       	push	r25
    495c:	af 93       	push	r26
    495e:	bf 93       	push	r27
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	ef 93       	push	r30
    4966:	ff 93       	push	r31
    4968:	a0 91 96 12 	lds	r26, 0x1296	; 0x801296 <_ser_handle+0x4>
    496c:	b0 91 97 12 	lds	r27, 0x1297	; 0x801297 <_ser_handle+0x5>
    4970:	10 97       	sbiw	r26, 0x00	; 0
    4972:	11 f1       	breq	.+68     	; 0x49b8 <__vector_51+0x7a>
    4974:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4978:	14 96       	adiw	r26, 0x04	; 4
    497a:	ed 91       	ld	r30, X+
    497c:	fc 91       	ld	r31, X
    497e:	15 97       	sbiw	r26, 0x05	; 5
    4980:	93 81       	ldd	r25, Z+3	; 0x03
    4982:	82 81       	ldd	r24, Z+2	; 0x02
    4984:	25 81       	ldd	r18, Z+5	; 0x05
    4986:	98 1b       	sub	r25, r24
    4988:	92 23       	and	r25, r18
    498a:	84 81       	ldd	r24, Z+4	; 0x04
    498c:	98 17       	cp	r25, r24
    498e:	61 f0       	breq	.+24     	; 0x49a8 <__vector_51+0x6a>
    4990:	83 81       	ldd	r24, Z+3	; 0x03
    4992:	26 95       	lsr	r18
    4994:	28 23       	and	r18, r24
    4996:	c0 81       	ld	r28, Z
    4998:	d1 81       	ldd	r29, Z+1	; 0x01
    499a:	c2 0f       	add	r28, r18
    499c:	d1 1d       	adc	r29, r1
    499e:	68 83       	st	Y, r22
    49a0:	8f 5f       	subi	r24, 0xFF	; 255
    49a2:	95 81       	ldd	r25, Z+5	; 0x05
    49a4:	89 23       	and	r24, r25
    49a6:	83 83       	std	Z+3, r24	; 0x03
    49a8:	16 96       	adiw	r26, 0x06	; 6
    49aa:	ed 91       	ld	r30, X+
    49ac:	fc 91       	ld	r31, X
    49ae:	17 97       	sbiw	r26, 0x07	; 7
    49b0:	30 97       	sbiw	r30, 0x00	; 0
    49b2:	11 f0       	breq	.+4      	; 0x49b8 <__vector_51+0x7a>
    49b4:	cd 01       	movw	r24, r26
    49b6:	19 95       	eicall
    49b8:	ff 91       	pop	r31
    49ba:	ef 91       	pop	r30
    49bc:	df 91       	pop	r29
    49be:	cf 91       	pop	r28
    49c0:	bf 91       	pop	r27
    49c2:	af 91       	pop	r26
    49c4:	9f 91       	pop	r25
    49c6:	8f 91       	pop	r24
    49c8:	7f 91       	pop	r23
    49ca:	6f 91       	pop	r22
    49cc:	5f 91       	pop	r21
    49ce:	4f 91       	pop	r20
    49d0:	3f 91       	pop	r19
    49d2:	2f 91       	pop	r18
    49d4:	0f 90       	pop	r0
    49d6:	0b be       	out	0x3b, r0	; 59
    49d8:	0f 90       	pop	r0
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	0f 90       	pop	r0
    49de:	1f 90       	pop	r1
    49e0:	18 95       	reti

000049e2 <__vector_52>:
    49e2:	1f 92       	push	r1
    49e4:	0f 92       	push	r0
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	0f 92       	push	r0
    49ea:	11 24       	eor	r1, r1
    49ec:	0b b6       	in	r0, 0x3b	; 59
    49ee:	0f 92       	push	r0
    49f0:	2f 93       	push	r18
    49f2:	8f 93       	push	r24
    49f4:	9f 93       	push	r25
    49f6:	af 93       	push	r26
    49f8:	bf 93       	push	r27
    49fa:	ef 93       	push	r30
    49fc:	ff 93       	push	r31
    49fe:	e0 91 96 12 	lds	r30, 0x1296	; 0x801296 <_ser_handle+0x4>
    4a02:	f0 91 97 12 	lds	r31, 0x1297	; 0x801297 <_ser_handle+0x5>
    4a06:	30 97       	sbiw	r30, 0x00	; 0
    4a08:	b9 f0       	breq	.+46     	; 0x4a38 <__vector_52+0x56>
    4a0a:	02 80       	ldd	r0, Z+2	; 0x02
    4a0c:	f3 81       	ldd	r31, Z+3	; 0x03
    4a0e:	e0 2d       	mov	r30, r0
    4a10:	93 81       	ldd	r25, Z+3	; 0x03
    4a12:	82 81       	ldd	r24, Z+2	; 0x02
    4a14:	98 17       	cp	r25, r24
    4a16:	b1 f0       	breq	.+44     	; 0x4a44 <__vector_52+0x62>
    4a18:	92 81       	ldd	r25, Z+2	; 0x02
    4a1a:	85 81       	ldd	r24, Z+5	; 0x05
    4a1c:	28 2f       	mov	r18, r24
    4a1e:	26 95       	lsr	r18
    4a20:	29 23       	and	r18, r25
    4a22:	a0 81       	ld	r26, Z
    4a24:	b1 81       	ldd	r27, Z+1	; 0x01
    4a26:	a2 0f       	add	r26, r18
    4a28:	b1 1d       	adc	r27, r1
    4a2a:	2c 91       	ld	r18, X
    4a2c:	9f 5f       	subi	r25, 0xFF	; 255
    4a2e:	89 23       	and	r24, r25
    4a30:	82 83       	std	Z+2, r24	; 0x02
    4a32:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4a36:	0b c0       	rjmp	.+22     	; 0x4a4e <__vector_52+0x6c>
    4a38:	e1 ed       	ldi	r30, 0xD1	; 209
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	8f 7d       	andi	r24, 0xDF	; 223
    4a40:	80 83       	st	Z, r24
    4a42:	05 c0       	rjmp	.+10     	; 0x4a4e <__vector_52+0x6c>
    4a44:	e1 ed       	ldi	r30, 0xD1	; 209
    4a46:	f0 e0       	ldi	r31, 0x00	; 0
    4a48:	80 81       	ld	r24, Z
    4a4a:	8f 7d       	andi	r24, 0xDF	; 223
    4a4c:	80 83       	st	Z, r24
    4a4e:	ff 91       	pop	r31
    4a50:	ef 91       	pop	r30
    4a52:	bf 91       	pop	r27
    4a54:	af 91       	pop	r26
    4a56:	9f 91       	pop	r25
    4a58:	8f 91       	pop	r24
    4a5a:	2f 91       	pop	r18
    4a5c:	0f 90       	pop	r0
    4a5e:	0b be       	out	0x3b, r0	; 59
    4a60:	0f 90       	pop	r0
    4a62:	0f be       	out	0x3f, r0	; 63
    4a64:	0f 90       	pop	r0
    4a66:	1f 90       	pop	r1
    4a68:	18 95       	reti

00004a6a <__vector_54>:
    4a6a:	1f 92       	push	r1
    4a6c:	0f 92       	push	r0
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	0f 92       	push	r0
    4a72:	11 24       	eor	r1, r1
    4a74:	0b b6       	in	r0, 0x3b	; 59
    4a76:	0f 92       	push	r0
    4a78:	2f 93       	push	r18
    4a7a:	3f 93       	push	r19
    4a7c:	4f 93       	push	r20
    4a7e:	5f 93       	push	r21
    4a80:	6f 93       	push	r22
    4a82:	7f 93       	push	r23
    4a84:	8f 93       	push	r24
    4a86:	9f 93       	push	r25
    4a88:	af 93       	push	r26
    4a8a:	bf 93       	push	r27
    4a8c:	cf 93       	push	r28
    4a8e:	df 93       	push	r29
    4a90:	ef 93       	push	r30
    4a92:	ff 93       	push	r31
    4a94:	a0 91 98 12 	lds	r26, 0x1298	; 0x801298 <_ser_handle+0x6>
    4a98:	b0 91 99 12 	lds	r27, 0x1299	; 0x801299 <_ser_handle+0x7>
    4a9c:	10 97       	sbiw	r26, 0x00	; 0
    4a9e:	11 f1       	breq	.+68     	; 0x4ae4 <__vector_54+0x7a>
    4aa0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4aa4:	14 96       	adiw	r26, 0x04	; 4
    4aa6:	ed 91       	ld	r30, X+
    4aa8:	fc 91       	ld	r31, X
    4aaa:	15 97       	sbiw	r26, 0x05	; 5
    4aac:	93 81       	ldd	r25, Z+3	; 0x03
    4aae:	82 81       	ldd	r24, Z+2	; 0x02
    4ab0:	25 81       	ldd	r18, Z+5	; 0x05
    4ab2:	98 1b       	sub	r25, r24
    4ab4:	92 23       	and	r25, r18
    4ab6:	84 81       	ldd	r24, Z+4	; 0x04
    4ab8:	98 17       	cp	r25, r24
    4aba:	61 f0       	breq	.+24     	; 0x4ad4 <__vector_54+0x6a>
    4abc:	83 81       	ldd	r24, Z+3	; 0x03
    4abe:	26 95       	lsr	r18
    4ac0:	28 23       	and	r18, r24
    4ac2:	c0 81       	ld	r28, Z
    4ac4:	d1 81       	ldd	r29, Z+1	; 0x01
    4ac6:	c2 0f       	add	r28, r18
    4ac8:	d1 1d       	adc	r29, r1
    4aca:	68 83       	st	Y, r22
    4acc:	8f 5f       	subi	r24, 0xFF	; 255
    4ace:	95 81       	ldd	r25, Z+5	; 0x05
    4ad0:	89 23       	and	r24, r25
    4ad2:	83 83       	std	Z+3, r24	; 0x03
    4ad4:	16 96       	adiw	r26, 0x06	; 6
    4ad6:	ed 91       	ld	r30, X+
    4ad8:	fc 91       	ld	r31, X
    4ada:	17 97       	sbiw	r26, 0x07	; 7
    4adc:	30 97       	sbiw	r30, 0x00	; 0
    4ade:	11 f0       	breq	.+4      	; 0x4ae4 <__vector_54+0x7a>
    4ae0:	cd 01       	movw	r24, r26
    4ae2:	19 95       	eicall
    4ae4:	ff 91       	pop	r31
    4ae6:	ef 91       	pop	r30
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	bf 91       	pop	r27
    4aee:	af 91       	pop	r26
    4af0:	9f 91       	pop	r25
    4af2:	8f 91       	pop	r24
    4af4:	7f 91       	pop	r23
    4af6:	6f 91       	pop	r22
    4af8:	5f 91       	pop	r21
    4afa:	4f 91       	pop	r20
    4afc:	3f 91       	pop	r19
    4afe:	2f 91       	pop	r18
    4b00:	0f 90       	pop	r0
    4b02:	0b be       	out	0x3b, r0	; 59
    4b04:	0f 90       	pop	r0
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	0f 90       	pop	r0
    4b0a:	1f 90       	pop	r1
    4b0c:	18 95       	reti

00004b0e <__vector_55>:
    4b0e:	1f 92       	push	r1
    4b10:	0f 92       	push	r0
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	0f 92       	push	r0
    4b16:	11 24       	eor	r1, r1
    4b18:	0b b6       	in	r0, 0x3b	; 59
    4b1a:	0f 92       	push	r0
    4b1c:	2f 93       	push	r18
    4b1e:	8f 93       	push	r24
    4b20:	9f 93       	push	r25
    4b22:	af 93       	push	r26
    4b24:	bf 93       	push	r27
    4b26:	ef 93       	push	r30
    4b28:	ff 93       	push	r31
    4b2a:	e0 91 98 12 	lds	r30, 0x1298	; 0x801298 <_ser_handle+0x6>
    4b2e:	f0 91 99 12 	lds	r31, 0x1299	; 0x801299 <_ser_handle+0x7>
    4b32:	30 97       	sbiw	r30, 0x00	; 0
    4b34:	b9 f0       	breq	.+46     	; 0x4b64 <__vector_55+0x56>
    4b36:	02 80       	ldd	r0, Z+2	; 0x02
    4b38:	f3 81       	ldd	r31, Z+3	; 0x03
    4b3a:	e0 2d       	mov	r30, r0
    4b3c:	93 81       	ldd	r25, Z+3	; 0x03
    4b3e:	82 81       	ldd	r24, Z+2	; 0x02
    4b40:	98 17       	cp	r25, r24
    4b42:	b1 f0       	breq	.+44     	; 0x4b70 <__vector_55+0x62>
    4b44:	92 81       	ldd	r25, Z+2	; 0x02
    4b46:	85 81       	ldd	r24, Z+5	; 0x05
    4b48:	28 2f       	mov	r18, r24
    4b4a:	26 95       	lsr	r18
    4b4c:	29 23       	and	r18, r25
    4b4e:	a0 81       	ld	r26, Z
    4b50:	b1 81       	ldd	r27, Z+1	; 0x01
    4b52:	a2 0f       	add	r26, r18
    4b54:	b1 1d       	adc	r27, r1
    4b56:	2c 91       	ld	r18, X
    4b58:	9f 5f       	subi	r25, 0xFF	; 255
    4b5a:	89 23       	and	r24, r25
    4b5c:	82 83       	std	Z+2, r24	; 0x02
    4b5e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4b62:	0b c0       	rjmp	.+22     	; 0x4b7a <__vector_55+0x6c>
    4b64:	e1 e3       	ldi	r30, 0x31	; 49
    4b66:	f1 e0       	ldi	r31, 0x01	; 1
    4b68:	80 81       	ld	r24, Z
    4b6a:	8f 7d       	andi	r24, 0xDF	; 223
    4b6c:	80 83       	st	Z, r24
    4b6e:	05 c0       	rjmp	.+10     	; 0x4b7a <__vector_55+0x6c>
    4b70:	e1 e3       	ldi	r30, 0x31	; 49
    4b72:	f1 e0       	ldi	r31, 0x01	; 1
    4b74:	80 81       	ld	r24, Z
    4b76:	8f 7d       	andi	r24, 0xDF	; 223
    4b78:	80 83       	st	Z, r24
    4b7a:	ff 91       	pop	r31
    4b7c:	ef 91       	pop	r30
    4b7e:	bf 91       	pop	r27
    4b80:	af 91       	pop	r26
    4b82:	9f 91       	pop	r25
    4b84:	8f 91       	pop	r24
    4b86:	2f 91       	pop	r18
    4b88:	0f 90       	pop	r0
    4b8a:	0b be       	out	0x3b, r0	; 59
    4b8c:	0f 90       	pop	r0
    4b8e:	0f be       	out	0x3f, r0	; 63
    4b90:	0f 90       	pop	r0
    4b92:	1f 90       	pop	r1
    4b94:	18 95       	reti

00004b96 <usart_getchar>:
    4b96:	cf 93       	push	r28
    4b98:	df 93       	push	r29
    4b9a:	1f 92       	push	r1
    4b9c:	cd b7       	in	r28, 0x3d	; 61
    4b9e:	de b7       	in	r29, 0x3e	; 62
    4ba0:	be 01       	movw	r22, r28
    4ba2:	6f 5f       	subi	r22, 0xFF	; 255
    4ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba6:	80 91 9a 12 	lds	r24, 0x129A	; 0x80129a <_com_serial_instance>
    4baa:	90 91 9b 12 	lds	r25, 0x129B	; 0x80129b <_com_serial_instance+0x1>
    4bae:	7b dd       	rcall	.-1290   	; 0x46a6 <serial_getByte>
    4bb0:	81 11       	cpse	r24, r1
    4bb2:	f6 cf       	rjmp	.-20     	; 0x4ba0 <usart_getchar+0xa>
    4bb4:	89 81       	ldd	r24, Y+1	; 0x01
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	0f 90       	pop	r0
    4bba:	df 91       	pop	r29
    4bbc:	cf 91       	pop	r28
    4bbe:	08 95       	ret

00004bc0 <usart_putchar>:
    4bc0:	68 2f       	mov	r22, r24
    4bc2:	80 91 9a 12 	lds	r24, 0x129A	; 0x80129a <_com_serial_instance>
    4bc6:	90 91 9b 12 	lds	r25, 0x129B	; 0x80129b <_com_serial_instance+0x1>
    4bca:	ed dc       	rcall	.-1574   	; 0x45a6 <serial_sendByte>
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	08 95       	ret

00004bd2 <stdio_initialise>:
    4bd2:	8f 92       	push	r8
    4bd4:	9f 92       	push	r9
    4bd6:	af 92       	push	r10
    4bd8:	cf 92       	push	r12
    4bda:	ef 92       	push	r14
    4bdc:	0f 93       	push	r16
    4bde:	81 2c       	mov	r8, r1
    4be0:	91 2c       	mov	r9, r1
    4be2:	68 94       	set
    4be4:	aa 24       	eor	r10, r10
    4be6:	a7 f8       	bld	r10, 7
    4be8:	68 94       	set
    4bea:	cc 24       	eor	r12, r12
    4bec:	c7 f8       	bld	r12, 7
    4bee:	e1 2c       	mov	r14, r1
    4bf0:	00 e0       	ldi	r16, 0x00	; 0
    4bf2:	23 e0       	ldi	r18, 0x03	; 3
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	51 ee       	ldi	r21, 0xE1	; 225
    4bf8:	60 e0       	ldi	r22, 0x00	; 0
    4bfa:	70 e0       	ldi	r23, 0x00	; 0
    4bfc:	2f dc       	rcall	.-1954   	; 0x445c <serial_create>
    4bfe:	90 93 9b 12 	sts	0x129B, r25	; 0x80129b <_com_serial_instance+0x1>
    4c02:	80 93 9a 12 	sts	0x129A, r24	; 0x80129a <_com_serial_instance>
    4c06:	e2 ec       	ldi	r30, 0xC2	; 194
    4c08:	f2 e1       	ldi	r31, 0x12	; 18
    4c0a:	83 e1       	ldi	r24, 0x13	; 19
    4c0c:	92 e0       	ldi	r25, 0x02	; 2
    4c0e:	91 83       	std	Z+1, r25	; 0x01
    4c10:	80 83       	st	Z, r24
    4c12:	93 83       	std	Z+3, r25	; 0x03
    4c14:	82 83       	std	Z+2, r24	; 0x02
    4c16:	0f 91       	pop	r16
    4c18:	ef 90       	pop	r14
    4c1a:	cf 90       	pop	r12
    4c1c:	af 90       	pop	r10
    4c1e:	9f 90       	pop	r9
    4c20:	8f 90       	pop	r8
    4c22:	08 95       	ret

00004c24 <_initTwiInterface>:
    4c24:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <_twiIsInitiated>
    4c28:	81 11       	cpse	r24, r1
    4c2a:	0c c0       	rjmp	.+24     	; 0x4c44 <_initTwiInterface+0x20>
    4c2c:	8c e0       	ldi	r24, 0x0C	; 12
    4c2e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4c32:	8f ef       	ldi	r24, 0xFF	; 255
    4c34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c38:	84 e0       	ldi	r24, 0x04	; 4
    4c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
    4c40:	80 93 aa 12 	sts	0x12AA, r24	; 0x8012aa <_twiIsInitiated>
    4c44:	08 95       	ret

00004c46 <twiCreate>:
    4c46:	af 92       	push	r10
    4c48:	bf 92       	push	r11
    4c4a:	cf 92       	push	r12
    4c4c:	df 92       	push	r13
    4c4e:	ef 92       	push	r14
    4c50:	ff 92       	push	r15
    4c52:	0f 93       	push	r16
    4c54:	1f 93       	push	r17
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	a8 2e       	mov	r10, r24
    4c5c:	b6 2e       	mov	r11, r22
    4c5e:	69 01       	movw	r12, r18
    4c60:	7a 01       	movw	r14, r20
    4c62:	84 e0       	ldi	r24, 0x04	; 4
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	94 d6       	rcall	.+3368   	; 0x5990 <malloc>
    4c68:	ec 01       	movw	r28, r24
    4c6a:	89 2b       	or	r24, r25
    4c6c:	61 f1       	breq	.+88     	; 0x4cc6 <twiCreate+0x80>
    4c6e:	a8 82       	st	Y, r10
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	b8 12       	cpse	r11, r24
    4c74:	12 c0       	rjmp	.+36     	; 0x4c9a <twiCreate+0x54>
    4c76:	c7 01       	movw	r24, r14
    4c78:	b6 01       	movw	r22, r12
    4c7a:	20 ea       	ldi	r18, 0xA0	; 160
    4c7c:	36 e8       	ldi	r19, 0x86	; 134
    4c7e:	41 e0       	ldi	r20, 0x01	; 1
    4c80:	50 e0       	ldi	r21, 0x00	; 0
    4c82:	5c d6       	rcall	.+3256   	; 0x593c <__udivmodsi4>
    4c84:	da 01       	movw	r26, r20
    4c86:	c9 01       	movw	r24, r18
    4c88:	40 97       	sbiw	r24, 0x10	; 16
    4c8a:	a1 09       	sbc	r26, r1
    4c8c:	b1 09       	sbc	r27, r1
    4c8e:	b6 95       	lsr	r27
    4c90:	a7 95       	ror	r26
    4c92:	97 95       	ror	r25
    4c94:	87 95       	ror	r24
    4c96:	89 83       	std	Y+1, r24	; 0x01
    4c98:	11 c0       	rjmp	.+34     	; 0x4cbc <twiCreate+0x76>
    4c9a:	c7 01       	movw	r24, r14
    4c9c:	b6 01       	movw	r22, r12
    4c9e:	20 e8       	ldi	r18, 0x80	; 128
    4ca0:	3a e1       	ldi	r19, 0x1A	; 26
    4ca2:	46 e0       	ldi	r20, 0x06	; 6
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	4a d6       	rcall	.+3220   	; 0x593c <__udivmodsi4>
    4ca8:	da 01       	movw	r26, r20
    4caa:	c9 01       	movw	r24, r18
    4cac:	40 97       	sbiw	r24, 0x10	; 16
    4cae:	a1 09       	sbc	r26, r1
    4cb0:	b1 09       	sbc	r27, r1
    4cb2:	b6 95       	lsr	r27
    4cb4:	a7 95       	ror	r26
    4cb6:	97 95       	ror	r25
    4cb8:	87 95       	ror	r24
    4cba:	89 83       	std	Y+1, r24	; 0x01
    4cbc:	1b 83       	std	Y+3, r17	; 0x03
    4cbe:	0a 83       	std	Y+2, r16	; 0x02
    4cc0:	8c 2f       	mov	r24, r28
    4cc2:	9d 2f       	mov	r25, r29
    4cc4:	02 c0       	rjmp	.+4      	; 0x4cca <twiCreate+0x84>
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	1f 91       	pop	r17
    4cd0:	0f 91       	pop	r16
    4cd2:	ff 90       	pop	r15
    4cd4:	ef 90       	pop	r14
    4cd6:	df 90       	pop	r13
    4cd8:	cf 90       	pop	r12
    4cda:	bf 90       	pop	r11
    4cdc:	af 90       	pop	r10
    4cde:	08 95       	ret

00004ce0 <twiIsBusy>:
    4ce0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ce4:	81 70       	andi	r24, 0x01	; 1
    4ce6:	08 95       	ret

00004ce8 <twiTransmit>:
    4ce8:	ff 92       	push	r15
    4cea:	0f 93       	push	r16
    4cec:	1f 93       	push	r17
    4cee:	cf 93       	push	r28
    4cf0:	df 93       	push	r29
    4cf2:	00 97       	sbiw	r24, 0x00	; 0
    4cf4:	d1 f1       	breq	.+116    	; 0x4d6a <twiTransmit+0x82>
    4cf6:	4a 30       	cpi	r20, 0x0A	; 10
    4cf8:	d0 f5       	brcc	.+116    	; 0x4d6e <twiTransmit+0x86>
    4cfa:	f4 2e       	mov	r15, r20
    4cfc:	8b 01       	movw	r16, r22
    4cfe:	ec 01       	movw	r28, r24
    4d00:	ef df       	rcall	.-34     	; 0x4ce0 <twiIsBusy>
    4d02:	81 11       	cpse	r24, r1
    4d04:	36 c0       	rjmp	.+108    	; 0x4d72 <twiTransmit+0x8a>
    4d06:	80 91 9d 12 	lds	r24, 0x129D	; 0x80129d <_twiCurrentHandler>
    4d0a:	90 91 9e 12 	lds	r25, 0x129E	; 0x80129e <_twiCurrentHandler+0x1>
    4d0e:	c8 17       	cp	r28, r24
    4d10:	d9 07       	cpc	r29, r25
    4d12:	41 f0       	breq	.+16     	; 0x4d24 <twiTransmit+0x3c>
    4d14:	87 df       	rcall	.-242    	; 0x4c24 <_initTwiInterface>
    4d16:	89 81       	ldd	r24, Y+1	; 0x01
    4d18:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4d1c:	d0 93 9e 12 	sts	0x129E, r29	; 0x80129e <_twiCurrentHandler+0x1>
    4d20:	c0 93 9d 12 	sts	0x129D, r28	; 0x80129d <_twiCurrentHandler>
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	8f 0d       	add	r24, r15
    4d28:	80 93 9f 12 	sts	0x129F, r24	; 0x80129f <_twiMessageLen>
    4d2c:	88 81       	ld	r24, Y
    4d2e:	88 0f       	add	r24, r24
    4d30:	80 93 a0 12 	sts	0x12A0, r24	; 0x8012a0 <_twiMessageBuffer>
    4d34:	ff 20       	and	r15, r15
    4d36:	89 f0       	breq	.+34     	; 0x4d5a <twiTransmit+0x72>
    4d38:	f8 01       	movw	r30, r16
    4d3a:	a1 ea       	ldi	r26, 0xA1	; 161
    4d3c:	b2 e1       	ldi	r27, 0x12	; 18
    4d3e:	4f ef       	ldi	r20, 0xFF	; 255
    4d40:	4f 0d       	add	r20, r15
    4d42:	64 2f       	mov	r22, r20
    4d44:	70 e0       	ldi	r23, 0x00	; 0
    4d46:	cb 01       	movw	r24, r22
    4d48:	01 96       	adiw	r24, 0x01	; 1
    4d4a:	b8 01       	movw	r22, r16
    4d4c:	68 0f       	add	r22, r24
    4d4e:	79 1f       	adc	r23, r25
    4d50:	81 91       	ld	r24, Z+
    4d52:	8d 93       	st	X+, r24
    4d54:	e6 17       	cp	r30, r22
    4d56:	f7 07       	cpc	r31, r23
    4d58:	d9 f7       	brne	.-10     	; 0x4d50 <twiTransmit+0x68>
    4d5a:	88 ef       	ldi	r24, 0xF8	; 248
    4d5c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4d60:	85 ea       	ldi	r24, 0xA5	; 165
    4d62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d66:	84 e0       	ldi	r24, 0x04	; 4
    4d68:	05 c0       	rjmp	.+10     	; 0x4d74 <twiTransmit+0x8c>
    4d6a:	86 e0       	ldi	r24, 0x06	; 6
    4d6c:	03 c0       	rjmp	.+6      	; 0x4d74 <twiTransmit+0x8c>
    4d6e:	87 e0       	ldi	r24, 0x07	; 7
    4d70:	01 c0       	rjmp	.+2      	; 0x4d74 <twiTransmit+0x8c>
    4d72:	82 e0       	ldi	r24, 0x02	; 2
    4d74:	df 91       	pop	r29
    4d76:	cf 91       	pop	r28
    4d78:	1f 91       	pop	r17
    4d7a:	0f 91       	pop	r16
    4d7c:	ff 90       	pop	r15
    4d7e:	08 95       	ret

00004d80 <twiReceive>:
    4d80:	1f 93       	push	r17
    4d82:	cf 93       	push	r28
    4d84:	df 93       	push	r29
    4d86:	00 97       	sbiw	r24, 0x00	; 0
    4d88:	29 f1       	breq	.+74     	; 0x4dd4 <twiReceive+0x54>
    4d8a:	6b 30       	cpi	r22, 0x0B	; 11
    4d8c:	28 f5       	brcc	.+74     	; 0x4dd8 <twiReceive+0x58>
    4d8e:	16 2f       	mov	r17, r22
    4d90:	ec 01       	movw	r28, r24
    4d92:	a6 df       	rcall	.-180    	; 0x4ce0 <twiIsBusy>
    4d94:	81 11       	cpse	r24, r1
    4d96:	22 c0       	rjmp	.+68     	; 0x4ddc <twiReceive+0x5c>
    4d98:	80 91 9d 12 	lds	r24, 0x129D	; 0x80129d <_twiCurrentHandler>
    4d9c:	90 91 9e 12 	lds	r25, 0x129E	; 0x80129e <_twiCurrentHandler+0x1>
    4da0:	c8 17       	cp	r28, r24
    4da2:	d9 07       	cpc	r29, r25
    4da4:	41 f0       	breq	.+16     	; 0x4db6 <twiReceive+0x36>
    4da6:	3e df       	rcall	.-388    	; 0x4c24 <_initTwiInterface>
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4dae:	d0 93 9e 12 	sts	0x129E, r29	; 0x80129e <_twiCurrentHandler+0x1>
    4db2:	c0 93 9d 12 	sts	0x129D, r28	; 0x80129d <_twiCurrentHandler>
    4db6:	10 93 9f 12 	sts	0x129F, r17	; 0x80129f <_twiMessageLen>
    4dba:	88 81       	ld	r24, Y
    4dbc:	88 0f       	add	r24, r24
    4dbe:	81 60       	ori	r24, 0x01	; 1
    4dc0:	80 93 a0 12 	sts	0x12A0, r24	; 0x8012a0 <_twiMessageBuffer>
    4dc4:	88 ef       	ldi	r24, 0xF8	; 248
    4dc6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4dca:	85 ea       	ldi	r24, 0xA5	; 165
    4dcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4dd0:	85 e0       	ldi	r24, 0x05	; 5
    4dd2:	05 c0       	rjmp	.+10     	; 0x4dde <twiReceive+0x5e>
    4dd4:	86 e0       	ldi	r24, 0x06	; 6
    4dd6:	03 c0       	rjmp	.+6      	; 0x4dde <twiReceive+0x5e>
    4dd8:	87 e0       	ldi	r24, 0x07	; 7
    4dda:	01 c0       	rjmp	.+2      	; 0x4dde <twiReceive+0x5e>
    4ddc:	82 e0       	ldi	r24, 0x02	; 2
    4dde:	df 91       	pop	r29
    4de0:	cf 91       	pop	r28
    4de2:	1f 91       	pop	r17
    4de4:	08 95       	ret

00004de6 <__vector_39>:
    4de6:	1f 92       	push	r1
    4de8:	0f 92       	push	r0
    4dea:	0f b6       	in	r0, 0x3f	; 63
    4dec:	0f 92       	push	r0
    4dee:	11 24       	eor	r1, r1
    4df0:	0b b6       	in	r0, 0x3b	; 59
    4df2:	0f 92       	push	r0
    4df4:	2f 93       	push	r18
    4df6:	3f 93       	push	r19
    4df8:	4f 93       	push	r20
    4dfa:	5f 93       	push	r21
    4dfc:	6f 93       	push	r22
    4dfe:	7f 93       	push	r23
    4e00:	8f 93       	push	r24
    4e02:	9f 93       	push	r25
    4e04:	af 93       	push	r26
    4e06:	bf 93       	push	r27
    4e08:	ef 93       	push	r30
    4e0a:	ff 93       	push	r31
    4e0c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4e10:	8e 2f       	mov	r24, r30
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	fc 01       	movw	r30, r24
    4e16:	38 97       	sbiw	r30, 0x08	; 8
    4e18:	e1 35       	cpi	r30, 0x51	; 81
    4e1a:	f1 05       	cpc	r31, r1
    4e1c:	08 f0       	brcs	.+2      	; 0x4e20 <__vector_39+0x3a>
    4e1e:	75 c0       	rjmp	.+234    	; 0x4f0a <__vector_39+0x124>
    4e20:	88 27       	eor	r24, r24
    4e22:	e4 58       	subi	r30, 0x84	; 132
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	8f 4f       	sbci	r24, 0xFF	; 255
    4e28:	ab c5       	rjmp	.+2902   	; 0x5980 <__tablejump2__>
    4e2a:	10 92 9c 12 	sts	0x129C, r1	; 0x80129c <_index.1885>
    4e2e:	e0 91 9c 12 	lds	r30, 0x129C	; 0x80129c <_index.1885>
    4e32:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <_twiMessageLen>
    4e36:	e8 17       	cp	r30, r24
    4e38:	70 f4       	brcc	.+28     	; 0x4e56 <__vector_39+0x70>
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	8e 0f       	add	r24, r30
    4e3e:	80 93 9c 12 	sts	0x129C, r24	; 0x80129c <_index.1885>
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	e0 56       	subi	r30, 0x60	; 96
    4e46:	fd 4e       	sbci	r31, 0xED	; 237
    4e48:	80 81       	ld	r24, Z
    4e4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4e4e:	85 e8       	ldi	r24, 0x85	; 133
    4e50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e54:	72 c0       	rjmp	.+228    	; 0x4f3a <__vector_39+0x154>
    4e56:	84 e9       	ldi	r24, 0x94	; 148
    4e58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e5c:	80 91 9d 12 	lds	r24, 0x129D	; 0x80129d <_twiCurrentHandler>
    4e60:	90 91 9e 12 	lds	r25, 0x129E	; 0x80129e <_twiCurrentHandler+0x1>
    4e64:	dc 01       	movw	r26, r24
    4e66:	12 96       	adiw	r26, 0x02	; 2
    4e68:	ed 91       	ld	r30, X+
    4e6a:	fc 91       	ld	r31, X
    4e6c:	13 97       	sbiw	r26, 0x03	; 3
    4e6e:	30 97       	sbiw	r30, 0x00	; 0
    4e70:	09 f4       	brne	.+2      	; 0x4e74 <__vector_39+0x8e>
    4e72:	63 c0       	rjmp	.+198    	; 0x4f3a <__vector_39+0x154>
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	40 e0       	ldi	r20, 0x00	; 0
    4e78:	50 e0       	ldi	r21, 0x00	; 0
    4e7a:	64 e0       	ldi	r22, 0x04	; 4
    4e7c:	19 95       	eicall
    4e7e:	5d c0       	rjmp	.+186    	; 0x4f3a <__vector_39+0x154>
    4e80:	e0 91 9c 12 	lds	r30, 0x129C	; 0x80129c <_index.1885>
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	8e 0f       	add	r24, r30
    4e88:	80 93 9c 12 	sts	0x129C, r24	; 0x80129c <_index.1885>
    4e8c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4e90:	f0 e0       	ldi	r31, 0x00	; 0
    4e92:	e0 56       	subi	r30, 0x60	; 96
    4e94:	fd 4e       	sbci	r31, 0xED	; 237
    4e96:	80 83       	st	Z, r24
    4e98:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4e9c:	80 34       	cpi	r24, 0x40	; 64
    4e9e:	11 f4       	brne	.+4      	; 0x4ea4 <__vector_39+0xbe>
    4ea0:	10 92 9c 12 	sts	0x129C, r1	; 0x80129c <_index.1885>
    4ea4:	20 91 9c 12 	lds	r18, 0x129C	; 0x80129c <_index.1885>
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <_twiMessageLen>
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	01 97       	sbiw	r24, 0x01	; 1
    4eb2:	28 17       	cp	r18, r24
    4eb4:	39 07       	cpc	r19, r25
    4eb6:	24 f4       	brge	.+8      	; 0x4ec0 <__vector_39+0xda>
    4eb8:	85 ec       	ldi	r24, 0xC5	; 197
    4eba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ebe:	3d c0       	rjmp	.+122    	; 0x4f3a <__vector_39+0x154>
    4ec0:	85 e8       	ldi	r24, 0x85	; 133
    4ec2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ec6:	39 c0       	rjmp	.+114    	; 0x4f3a <__vector_39+0x154>
    4ec8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4ecc:	e0 91 9c 12 	lds	r30, 0x129C	; 0x80129c <_index.1885>
    4ed0:	f0 e0       	ldi	r31, 0x00	; 0
    4ed2:	e0 56       	subi	r30, 0x60	; 96
    4ed4:	fd 4e       	sbci	r31, 0xED	; 237
    4ed6:	80 83       	st	Z, r24
    4ed8:	84 e9       	ldi	r24, 0x94	; 148
    4eda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ede:	80 91 9d 12 	lds	r24, 0x129D	; 0x80129d <_twiCurrentHandler>
    4ee2:	90 91 9e 12 	lds	r25, 0x129E	; 0x80129e <_twiCurrentHandler+0x1>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	12 96       	adiw	r26, 0x02	; 2
    4eea:	ed 91       	ld	r30, X+
    4eec:	fc 91       	ld	r31, X
    4eee:	13 97       	sbiw	r26, 0x03	; 3
    4ef0:	30 97       	sbiw	r30, 0x00	; 0
    4ef2:	19 f1       	breq	.+70     	; 0x4f3a <__vector_39+0x154>
    4ef4:	20 91 9f 12 	lds	r18, 0x129F	; 0x80129f <_twiMessageLen>
    4ef8:	40 ea       	ldi	r20, 0xA0	; 160
    4efa:	52 e1       	ldi	r21, 0x12	; 18
    4efc:	65 e0       	ldi	r22, 0x05	; 5
    4efe:	19 95       	eicall
    4f00:	1c c0       	rjmp	.+56     	; 0x4f3a <__vector_39+0x154>
    4f02:	85 ea       	ldi	r24, 0xA5	; 165
    4f04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f08:	18 c0       	rjmp	.+48     	; 0x4f3a <__vector_39+0x154>
    4f0a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f0e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4f12:	84 e0       	ldi	r24, 0x04	; 4
    4f14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f18:	80 91 9d 12 	lds	r24, 0x129D	; 0x80129d <_twiCurrentHandler>
    4f1c:	90 91 9e 12 	lds	r25, 0x129E	; 0x80129e <_twiCurrentHandler+0x1>
    4f20:	dc 01       	movw	r26, r24
    4f22:	12 96       	adiw	r26, 0x02	; 2
    4f24:	ed 91       	ld	r30, X+
    4f26:	fc 91       	ld	r31, X
    4f28:	13 97       	sbiw	r26, 0x03	; 3
    4f2a:	30 97       	sbiw	r30, 0x00	; 0
    4f2c:	31 f0       	breq	.+12     	; 0x4f3a <__vector_39+0x154>
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	40 e0       	ldi	r20, 0x00	; 0
    4f32:	50 e0       	ldi	r21, 0x00	; 0
    4f34:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4f38:	19 95       	eicall
    4f3a:	ff 91       	pop	r31
    4f3c:	ef 91       	pop	r30
    4f3e:	bf 91       	pop	r27
    4f40:	af 91       	pop	r26
    4f42:	9f 91       	pop	r25
    4f44:	8f 91       	pop	r24
    4f46:	7f 91       	pop	r23
    4f48:	6f 91       	pop	r22
    4f4a:	5f 91       	pop	r21
    4f4c:	4f 91       	pop	r20
    4f4e:	3f 91       	pop	r19
    4f50:	2f 91       	pop	r18
    4f52:	0f 90       	pop	r0
    4f54:	0b be       	out	0x3b, r0	; 59
    4f56:	0f 90       	pop	r0
    4f58:	0f be       	out	0x3f, r0	; 63
    4f5a:	0f 90       	pop	r0
    4f5c:	1f 90       	pop	r1
    4f5e:	18 95       	reti

00004f60 <fifo_init>:
    4f60:	fc 01       	movw	r30, r24
    4f62:	41 11       	cpse	r20, r1
    4f64:	01 c0       	rjmp	.+2      	; 0x4f68 <fifo_init+0x8>
    4f66:	35 d6       	rcall	.+3178   	; 0x5bd2 <abort>
    4f68:	84 2f       	mov	r24, r20
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	9c 01       	movw	r18, r24
    4f6e:	21 50       	subi	r18, 0x01	; 1
    4f70:	31 09       	sbc	r19, r1
    4f72:	82 23       	and	r24, r18
    4f74:	93 23       	and	r25, r19
    4f76:	89 2b       	or	r24, r25
    4f78:	09 f0       	breq	.+2      	; 0x4f7c <fifo_init+0x1c>
    4f7a:	2b d6       	rcall	.+3158   	; 0x5bd2 <abort>
    4f7c:	41 38       	cpi	r20, 0x81	; 129
    4f7e:	08 f0       	brcs	.+2      	; 0x4f82 <fifo_init+0x22>
    4f80:	28 d6       	rcall	.+3152   	; 0x5bd2 <abort>
    4f82:	12 82       	std	Z+2, r1	; 0x02
    4f84:	13 82       	std	Z+3, r1	; 0x03
    4f86:	44 83       	std	Z+4, r20	; 0x04
    4f88:	44 0f       	add	r20, r20
    4f8a:	41 50       	subi	r20, 0x01	; 1
    4f8c:	45 83       	std	Z+5, r20	; 0x05
    4f8e:	71 83       	std	Z+1, r23	; 0x01
    4f90:	60 83       	st	Z, r22
    4f92:	80 e0       	ldi	r24, 0x00	; 0
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	08 95       	ret

00004f98 <vfprintf>:
    4f98:	2f 92       	push	r2
    4f9a:	3f 92       	push	r3
    4f9c:	4f 92       	push	r4
    4f9e:	5f 92       	push	r5
    4fa0:	6f 92       	push	r6
    4fa2:	7f 92       	push	r7
    4fa4:	8f 92       	push	r8
    4fa6:	9f 92       	push	r9
    4fa8:	af 92       	push	r10
    4faa:	bf 92       	push	r11
    4fac:	cf 92       	push	r12
    4fae:	df 92       	push	r13
    4fb0:	ef 92       	push	r14
    4fb2:	ff 92       	push	r15
    4fb4:	0f 93       	push	r16
    4fb6:	1f 93       	push	r17
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	60 97       	sbiw	r28, 0x10	; 16
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	7c 01       	movw	r14, r24
    4fce:	1b 01       	movw	r2, r22
    4fd0:	6a 01       	movw	r12, r20
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	17 82       	std	Z+7, r1	; 0x07
    4fd6:	16 82       	std	Z+6, r1	; 0x06
    4fd8:	83 81       	ldd	r24, Z+3	; 0x03
    4fda:	81 ff       	sbrs	r24, 1
    4fdc:	2a c3       	rjmp	.+1620   	; 0x5632 <vfprintf+0x69a>
    4fde:	9e 01       	movw	r18, r28
    4fe0:	2f 5f       	subi	r18, 0xFF	; 255
    4fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe4:	39 01       	movw	r6, r18
    4fe6:	f7 01       	movw	r30, r14
    4fe8:	93 81       	ldd	r25, Z+3	; 0x03
    4fea:	f1 01       	movw	r30, r2
    4fec:	93 fd       	sbrc	r25, 3
    4fee:	85 91       	lpm	r24, Z+
    4ff0:	93 ff       	sbrs	r25, 3
    4ff2:	81 91       	ld	r24, Z+
    4ff4:	1f 01       	movw	r2, r30
    4ff6:	88 23       	and	r24, r24
    4ff8:	09 f4       	brne	.+2      	; 0x4ffc <vfprintf+0x64>
    4ffa:	17 c3       	rjmp	.+1582   	; 0x562a <vfprintf+0x692>
    4ffc:	85 32       	cpi	r24, 0x25	; 37
    4ffe:	39 f4       	brne	.+14     	; 0x500e <vfprintf+0x76>
    5000:	93 fd       	sbrc	r25, 3
    5002:	85 91       	lpm	r24, Z+
    5004:	93 ff       	sbrs	r25, 3
    5006:	81 91       	ld	r24, Z+
    5008:	1f 01       	movw	r2, r30
    500a:	85 32       	cpi	r24, 0x25	; 37
    500c:	31 f4       	brne	.+12     	; 0x501a <vfprintf+0x82>
    500e:	b7 01       	movw	r22, r14
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	30 d7       	rcall	.+3680   	; 0x5e74 <fputc>
    5014:	56 01       	movw	r10, r12
    5016:	65 01       	movw	r12, r10
    5018:	e6 cf       	rjmp	.-52     	; 0x4fe6 <vfprintf+0x4e>
    501a:	10 e0       	ldi	r17, 0x00	; 0
    501c:	51 2c       	mov	r5, r1
    501e:	91 2c       	mov	r9, r1
    5020:	ff e1       	ldi	r31, 0x1F	; 31
    5022:	f9 15       	cp	r31, r9
    5024:	d8 f0       	brcs	.+54     	; 0x505c <vfprintf+0xc4>
    5026:	8b 32       	cpi	r24, 0x2B	; 43
    5028:	79 f0       	breq	.+30     	; 0x5048 <vfprintf+0xb0>
    502a:	38 f4       	brcc	.+14     	; 0x503a <vfprintf+0xa2>
    502c:	80 32       	cpi	r24, 0x20	; 32
    502e:	79 f0       	breq	.+30     	; 0x504e <vfprintf+0xb6>
    5030:	83 32       	cpi	r24, 0x23	; 35
    5032:	a1 f4       	brne	.+40     	; 0x505c <vfprintf+0xc4>
    5034:	f9 2d       	mov	r31, r9
    5036:	f0 61       	ori	r31, 0x10	; 16
    5038:	2e c0       	rjmp	.+92     	; 0x5096 <vfprintf+0xfe>
    503a:	8d 32       	cpi	r24, 0x2D	; 45
    503c:	61 f0       	breq	.+24     	; 0x5056 <vfprintf+0xbe>
    503e:	80 33       	cpi	r24, 0x30	; 48
    5040:	69 f4       	brne	.+26     	; 0x505c <vfprintf+0xc4>
    5042:	29 2d       	mov	r18, r9
    5044:	21 60       	ori	r18, 0x01	; 1
    5046:	2d c0       	rjmp	.+90     	; 0x50a2 <vfprintf+0x10a>
    5048:	39 2d       	mov	r19, r9
    504a:	32 60       	ori	r19, 0x02	; 2
    504c:	93 2e       	mov	r9, r19
    504e:	89 2d       	mov	r24, r9
    5050:	84 60       	ori	r24, 0x04	; 4
    5052:	98 2e       	mov	r9, r24
    5054:	2a c0       	rjmp	.+84     	; 0x50aa <vfprintf+0x112>
    5056:	e9 2d       	mov	r30, r9
    5058:	e8 60       	ori	r30, 0x08	; 8
    505a:	15 c0       	rjmp	.+42     	; 0x5086 <vfprintf+0xee>
    505c:	97 fc       	sbrc	r9, 7
    505e:	2d c0       	rjmp	.+90     	; 0x50ba <vfprintf+0x122>
    5060:	20 ed       	ldi	r18, 0xD0	; 208
    5062:	28 0f       	add	r18, r24
    5064:	2a 30       	cpi	r18, 0x0A	; 10
    5066:	88 f4       	brcc	.+34     	; 0x508a <vfprintf+0xf2>
    5068:	96 fe       	sbrs	r9, 6
    506a:	06 c0       	rjmp	.+12     	; 0x5078 <vfprintf+0xe0>
    506c:	3a e0       	ldi	r19, 0x0A	; 10
    506e:	13 9f       	mul	r17, r19
    5070:	20 0d       	add	r18, r0
    5072:	11 24       	eor	r1, r1
    5074:	12 2f       	mov	r17, r18
    5076:	19 c0       	rjmp	.+50     	; 0x50aa <vfprintf+0x112>
    5078:	8a e0       	ldi	r24, 0x0A	; 10
    507a:	58 9e       	mul	r5, r24
    507c:	20 0d       	add	r18, r0
    507e:	11 24       	eor	r1, r1
    5080:	52 2e       	mov	r5, r18
    5082:	e9 2d       	mov	r30, r9
    5084:	e0 62       	ori	r30, 0x20	; 32
    5086:	9e 2e       	mov	r9, r30
    5088:	10 c0       	rjmp	.+32     	; 0x50aa <vfprintf+0x112>
    508a:	8e 32       	cpi	r24, 0x2E	; 46
    508c:	31 f4       	brne	.+12     	; 0x509a <vfprintf+0x102>
    508e:	96 fc       	sbrc	r9, 6
    5090:	cc c2       	rjmp	.+1432   	; 0x562a <vfprintf+0x692>
    5092:	f9 2d       	mov	r31, r9
    5094:	f0 64       	ori	r31, 0x40	; 64
    5096:	9f 2e       	mov	r9, r31
    5098:	08 c0       	rjmp	.+16     	; 0x50aa <vfprintf+0x112>
    509a:	8c 36       	cpi	r24, 0x6C	; 108
    509c:	21 f4       	brne	.+8      	; 0x50a6 <vfprintf+0x10e>
    509e:	29 2d       	mov	r18, r9
    50a0:	20 68       	ori	r18, 0x80	; 128
    50a2:	92 2e       	mov	r9, r18
    50a4:	02 c0       	rjmp	.+4      	; 0x50aa <vfprintf+0x112>
    50a6:	88 36       	cpi	r24, 0x68	; 104
    50a8:	41 f4       	brne	.+16     	; 0x50ba <vfprintf+0x122>
    50aa:	f1 01       	movw	r30, r2
    50ac:	93 fd       	sbrc	r25, 3
    50ae:	85 91       	lpm	r24, Z+
    50b0:	93 ff       	sbrs	r25, 3
    50b2:	81 91       	ld	r24, Z+
    50b4:	1f 01       	movw	r2, r30
    50b6:	81 11       	cpse	r24, r1
    50b8:	b3 cf       	rjmp	.-154    	; 0x5020 <vfprintf+0x88>
    50ba:	9b eb       	ldi	r25, 0xBB	; 187
    50bc:	98 0f       	add	r25, r24
    50be:	93 30       	cpi	r25, 0x03	; 3
    50c0:	20 f4       	brcc	.+8      	; 0x50ca <vfprintf+0x132>
    50c2:	99 2d       	mov	r25, r9
    50c4:	90 61       	ori	r25, 0x10	; 16
    50c6:	80 5e       	subi	r24, 0xE0	; 224
    50c8:	07 c0       	rjmp	.+14     	; 0x50d8 <vfprintf+0x140>
    50ca:	9b e9       	ldi	r25, 0x9B	; 155
    50cc:	98 0f       	add	r25, r24
    50ce:	93 30       	cpi	r25, 0x03	; 3
    50d0:	08 f0       	brcs	.+2      	; 0x50d4 <vfprintf+0x13c>
    50d2:	59 c1       	rjmp	.+690    	; 0x5386 <vfprintf+0x3ee>
    50d4:	99 2d       	mov	r25, r9
    50d6:	9f 7e       	andi	r25, 0xEF	; 239
    50d8:	96 ff       	sbrs	r25, 6
    50da:	16 e0       	ldi	r17, 0x06	; 6
    50dc:	9f 73       	andi	r25, 0x3F	; 63
    50de:	99 2e       	mov	r9, r25
    50e0:	85 36       	cpi	r24, 0x65	; 101
    50e2:	19 f4       	brne	.+6      	; 0x50ea <vfprintf+0x152>
    50e4:	90 64       	ori	r25, 0x40	; 64
    50e6:	99 2e       	mov	r9, r25
    50e8:	08 c0       	rjmp	.+16     	; 0x50fa <vfprintf+0x162>
    50ea:	86 36       	cpi	r24, 0x66	; 102
    50ec:	21 f4       	brne	.+8      	; 0x50f6 <vfprintf+0x15e>
    50ee:	39 2f       	mov	r19, r25
    50f0:	30 68       	ori	r19, 0x80	; 128
    50f2:	93 2e       	mov	r9, r19
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <vfprintf+0x162>
    50f6:	11 11       	cpse	r17, r1
    50f8:	11 50       	subi	r17, 0x01	; 1
    50fa:	97 fe       	sbrs	r9, 7
    50fc:	07 c0       	rjmp	.+14     	; 0x510c <vfprintf+0x174>
    50fe:	1c 33       	cpi	r17, 0x3C	; 60
    5100:	50 f4       	brcc	.+20     	; 0x5116 <vfprintf+0x17e>
    5102:	44 24       	eor	r4, r4
    5104:	43 94       	inc	r4
    5106:	41 0e       	add	r4, r17
    5108:	27 e0       	ldi	r18, 0x07	; 7
    510a:	0b c0       	rjmp	.+22     	; 0x5122 <vfprintf+0x18a>
    510c:	18 30       	cpi	r17, 0x08	; 8
    510e:	38 f0       	brcs	.+14     	; 0x511e <vfprintf+0x186>
    5110:	27 e0       	ldi	r18, 0x07	; 7
    5112:	17 e0       	ldi	r17, 0x07	; 7
    5114:	05 c0       	rjmp	.+10     	; 0x5120 <vfprintf+0x188>
    5116:	27 e0       	ldi	r18, 0x07	; 7
    5118:	9c e3       	ldi	r25, 0x3C	; 60
    511a:	49 2e       	mov	r4, r25
    511c:	02 c0       	rjmp	.+4      	; 0x5122 <vfprintf+0x18a>
    511e:	21 2f       	mov	r18, r17
    5120:	41 2c       	mov	r4, r1
    5122:	56 01       	movw	r10, r12
    5124:	84 e0       	ldi	r24, 0x04	; 4
    5126:	a8 0e       	add	r10, r24
    5128:	b1 1c       	adc	r11, r1
    512a:	f6 01       	movw	r30, r12
    512c:	60 81       	ld	r22, Z
    512e:	71 81       	ldd	r23, Z+1	; 0x01
    5130:	82 81       	ldd	r24, Z+2	; 0x02
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	04 2d       	mov	r16, r4
    5136:	a3 01       	movw	r20, r6
    5138:	50 d5       	rcall	.+2720   	; 0x5bda <__ftoa_engine>
    513a:	6c 01       	movw	r12, r24
    513c:	f9 81       	ldd	r31, Y+1	; 0x01
    513e:	fc 87       	std	Y+12, r31	; 0x0c
    5140:	f0 ff       	sbrs	r31, 0
    5142:	02 c0       	rjmp	.+4      	; 0x5148 <vfprintf+0x1b0>
    5144:	f3 ff       	sbrs	r31, 3
    5146:	06 c0       	rjmp	.+12     	; 0x5154 <vfprintf+0x1bc>
    5148:	91 fc       	sbrc	r9, 1
    514a:	06 c0       	rjmp	.+12     	; 0x5158 <vfprintf+0x1c0>
    514c:	92 fe       	sbrs	r9, 2
    514e:	06 c0       	rjmp	.+12     	; 0x515c <vfprintf+0x1c4>
    5150:	00 e2       	ldi	r16, 0x20	; 32
    5152:	05 c0       	rjmp	.+10     	; 0x515e <vfprintf+0x1c6>
    5154:	0d e2       	ldi	r16, 0x2D	; 45
    5156:	03 c0       	rjmp	.+6      	; 0x515e <vfprintf+0x1c6>
    5158:	0b e2       	ldi	r16, 0x2B	; 43
    515a:	01 c0       	rjmp	.+2      	; 0x515e <vfprintf+0x1c6>
    515c:	00 e0       	ldi	r16, 0x00	; 0
    515e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5160:	8c 70       	andi	r24, 0x0C	; 12
    5162:	19 f0       	breq	.+6      	; 0x516a <vfprintf+0x1d2>
    5164:	01 11       	cpse	r16, r1
    5166:	43 c2       	rjmp	.+1158   	; 0x55ee <vfprintf+0x656>
    5168:	80 c2       	rjmp	.+1280   	; 0x566a <vfprintf+0x6d2>
    516a:	97 fe       	sbrs	r9, 7
    516c:	10 c0       	rjmp	.+32     	; 0x518e <vfprintf+0x1f6>
    516e:	4c 0c       	add	r4, r12
    5170:	fc 85       	ldd	r31, Y+12	; 0x0c
    5172:	f4 ff       	sbrs	r31, 4
    5174:	04 c0       	rjmp	.+8      	; 0x517e <vfprintf+0x1e6>
    5176:	8a 81       	ldd	r24, Y+2	; 0x02
    5178:	81 33       	cpi	r24, 0x31	; 49
    517a:	09 f4       	brne	.+2      	; 0x517e <vfprintf+0x1e6>
    517c:	4a 94       	dec	r4
    517e:	14 14       	cp	r1, r4
    5180:	74 f5       	brge	.+92     	; 0x51de <vfprintf+0x246>
    5182:	28 e0       	ldi	r18, 0x08	; 8
    5184:	24 15       	cp	r18, r4
    5186:	78 f5       	brcc	.+94     	; 0x51e6 <vfprintf+0x24e>
    5188:	88 e0       	ldi	r24, 0x08	; 8
    518a:	48 2e       	mov	r4, r24
    518c:	2c c0       	rjmp	.+88     	; 0x51e6 <vfprintf+0x24e>
    518e:	96 fc       	sbrc	r9, 6
    5190:	2a c0       	rjmp	.+84     	; 0x51e6 <vfprintf+0x24e>
    5192:	81 2f       	mov	r24, r17
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	8c 15       	cp	r24, r12
    5198:	9d 05       	cpc	r25, r13
    519a:	9c f0       	brlt	.+38     	; 0x51c2 <vfprintf+0x22a>
    519c:	3c ef       	ldi	r19, 0xFC	; 252
    519e:	c3 16       	cp	r12, r19
    51a0:	3f ef       	ldi	r19, 0xFF	; 255
    51a2:	d3 06       	cpc	r13, r19
    51a4:	74 f0       	brlt	.+28     	; 0x51c2 <vfprintf+0x22a>
    51a6:	89 2d       	mov	r24, r9
    51a8:	80 68       	ori	r24, 0x80	; 128
    51aa:	98 2e       	mov	r9, r24
    51ac:	0a c0       	rjmp	.+20     	; 0x51c2 <vfprintf+0x22a>
    51ae:	e2 e0       	ldi	r30, 0x02	; 2
    51b0:	f0 e0       	ldi	r31, 0x00	; 0
    51b2:	ec 0f       	add	r30, r28
    51b4:	fd 1f       	adc	r31, r29
    51b6:	e1 0f       	add	r30, r17
    51b8:	f1 1d       	adc	r31, r1
    51ba:	80 81       	ld	r24, Z
    51bc:	80 33       	cpi	r24, 0x30	; 48
    51be:	19 f4       	brne	.+6      	; 0x51c6 <vfprintf+0x22e>
    51c0:	11 50       	subi	r17, 0x01	; 1
    51c2:	11 11       	cpse	r17, r1
    51c4:	f4 cf       	rjmp	.-24     	; 0x51ae <vfprintf+0x216>
    51c6:	97 fe       	sbrs	r9, 7
    51c8:	0e c0       	rjmp	.+28     	; 0x51e6 <vfprintf+0x24e>
    51ca:	44 24       	eor	r4, r4
    51cc:	43 94       	inc	r4
    51ce:	41 0e       	add	r4, r17
    51d0:	81 2f       	mov	r24, r17
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	c8 16       	cp	r12, r24
    51d6:	d9 06       	cpc	r13, r25
    51d8:	2c f4       	brge	.+10     	; 0x51e4 <vfprintf+0x24c>
    51da:	1c 19       	sub	r17, r12
    51dc:	04 c0       	rjmp	.+8      	; 0x51e6 <vfprintf+0x24e>
    51de:	44 24       	eor	r4, r4
    51e0:	43 94       	inc	r4
    51e2:	01 c0       	rjmp	.+2      	; 0x51e6 <vfprintf+0x24e>
    51e4:	10 e0       	ldi	r17, 0x00	; 0
    51e6:	97 fe       	sbrs	r9, 7
    51e8:	06 c0       	rjmp	.+12     	; 0x51f6 <vfprintf+0x25e>
    51ea:	1c 14       	cp	r1, r12
    51ec:	1d 04       	cpc	r1, r13
    51ee:	34 f4       	brge	.+12     	; 0x51fc <vfprintf+0x264>
    51f0:	c6 01       	movw	r24, r12
    51f2:	01 96       	adiw	r24, 0x01	; 1
    51f4:	05 c0       	rjmp	.+10     	; 0x5200 <vfprintf+0x268>
    51f6:	85 e0       	ldi	r24, 0x05	; 5
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	02 c0       	rjmp	.+4      	; 0x5200 <vfprintf+0x268>
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	90 e0       	ldi	r25, 0x00	; 0
    5200:	01 11       	cpse	r16, r1
    5202:	01 96       	adiw	r24, 0x01	; 1
    5204:	11 23       	and	r17, r17
    5206:	31 f0       	breq	.+12     	; 0x5214 <vfprintf+0x27c>
    5208:	21 2f       	mov	r18, r17
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	2f 5f       	subi	r18, 0xFF	; 255
    520e:	3f 4f       	sbci	r19, 0xFF	; 255
    5210:	82 0f       	add	r24, r18
    5212:	93 1f       	adc	r25, r19
    5214:	25 2d       	mov	r18, r5
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	82 17       	cp	r24, r18
    521a:	93 07       	cpc	r25, r19
    521c:	14 f4       	brge	.+4      	; 0x5222 <vfprintf+0x28a>
    521e:	58 1a       	sub	r5, r24
    5220:	01 c0       	rjmp	.+2      	; 0x5224 <vfprintf+0x28c>
    5222:	51 2c       	mov	r5, r1
    5224:	89 2d       	mov	r24, r9
    5226:	89 70       	andi	r24, 0x09	; 9
    5228:	41 f4       	brne	.+16     	; 0x523a <vfprintf+0x2a2>
    522a:	55 20       	and	r5, r5
    522c:	31 f0       	breq	.+12     	; 0x523a <vfprintf+0x2a2>
    522e:	b7 01       	movw	r22, r14
    5230:	80 e2       	ldi	r24, 0x20	; 32
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	1f d6       	rcall	.+3134   	; 0x5e74 <fputc>
    5236:	5a 94       	dec	r5
    5238:	f8 cf       	rjmp	.-16     	; 0x522a <vfprintf+0x292>
    523a:	00 23       	and	r16, r16
    523c:	21 f0       	breq	.+8      	; 0x5246 <vfprintf+0x2ae>
    523e:	b7 01       	movw	r22, r14
    5240:	80 2f       	mov	r24, r16
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	17 d6       	rcall	.+3118   	; 0x5e74 <fputc>
    5246:	93 fc       	sbrc	r9, 3
    5248:	08 c0       	rjmp	.+16     	; 0x525a <vfprintf+0x2c2>
    524a:	55 20       	and	r5, r5
    524c:	31 f0       	breq	.+12     	; 0x525a <vfprintf+0x2c2>
    524e:	b7 01       	movw	r22, r14
    5250:	80 e3       	ldi	r24, 0x30	; 48
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	0f d6       	rcall	.+3102   	; 0x5e74 <fputc>
    5256:	5a 94       	dec	r5
    5258:	f8 cf       	rjmp	.-16     	; 0x524a <vfprintf+0x2b2>
    525a:	97 fe       	sbrs	r9, 7
    525c:	4a c0       	rjmp	.+148    	; 0x52f2 <vfprintf+0x35a>
    525e:	46 01       	movw	r8, r12
    5260:	d7 fe       	sbrs	r13, 7
    5262:	02 c0       	rjmp	.+4      	; 0x5268 <vfprintf+0x2d0>
    5264:	81 2c       	mov	r8, r1
    5266:	91 2c       	mov	r9, r1
    5268:	c6 01       	movw	r24, r12
    526a:	88 19       	sub	r24, r8
    526c:	99 09       	sbc	r25, r9
    526e:	f3 01       	movw	r30, r6
    5270:	e8 0f       	add	r30, r24
    5272:	f9 1f       	adc	r31, r25
    5274:	fe 87       	std	Y+14, r31	; 0x0e
    5276:	ed 87       	std	Y+13, r30	; 0x0d
    5278:	96 01       	movw	r18, r12
    527a:	24 19       	sub	r18, r4
    527c:	31 09       	sbc	r19, r1
    527e:	38 8b       	std	Y+16, r19	; 0x10
    5280:	2f 87       	std	Y+15, r18	; 0x0f
    5282:	01 2f       	mov	r16, r17
    5284:	10 e0       	ldi	r17, 0x00	; 0
    5286:	11 95       	neg	r17
    5288:	01 95       	neg	r16
    528a:	11 09       	sbc	r17, r1
    528c:	3f ef       	ldi	r19, 0xFF	; 255
    528e:	83 16       	cp	r8, r19
    5290:	93 06       	cpc	r9, r19
    5292:	21 f4       	brne	.+8      	; 0x529c <vfprintf+0x304>
    5294:	b7 01       	movw	r22, r14
    5296:	8e e2       	ldi	r24, 0x2E	; 46
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	ec d5       	rcall	.+3032   	; 0x5e74 <fputc>
    529c:	c8 14       	cp	r12, r8
    529e:	d9 04       	cpc	r13, r9
    52a0:	4c f0       	brlt	.+18     	; 0x52b4 <vfprintf+0x31c>
    52a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    52a4:	98 89       	ldd	r25, Y+16	; 0x10
    52a6:	88 15       	cp	r24, r8
    52a8:	99 05       	cpc	r25, r9
    52aa:	24 f4       	brge	.+8      	; 0x52b4 <vfprintf+0x31c>
    52ac:	ed 85       	ldd	r30, Y+13	; 0x0d
    52ae:	fe 85       	ldd	r31, Y+14	; 0x0e
    52b0:	81 81       	ldd	r24, Z+1	; 0x01
    52b2:	01 c0       	rjmp	.+2      	; 0x52b6 <vfprintf+0x31e>
    52b4:	80 e3       	ldi	r24, 0x30	; 48
    52b6:	f1 e0       	ldi	r31, 0x01	; 1
    52b8:	8f 1a       	sub	r8, r31
    52ba:	91 08       	sbc	r9, r1
    52bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    52be:	3e 85       	ldd	r19, Y+14	; 0x0e
    52c0:	2f 5f       	subi	r18, 0xFF	; 255
    52c2:	3f 4f       	sbci	r19, 0xFF	; 255
    52c4:	3e 87       	std	Y+14, r19	; 0x0e
    52c6:	2d 87       	std	Y+13, r18	; 0x0d
    52c8:	80 16       	cp	r8, r16
    52ca:	91 06       	cpc	r9, r17
    52cc:	24 f0       	brlt	.+8      	; 0x52d6 <vfprintf+0x33e>
    52ce:	b7 01       	movw	r22, r14
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	d0 d5       	rcall	.+2976   	; 0x5e74 <fputc>
    52d4:	db cf       	rjmp	.-74     	; 0x528c <vfprintf+0x2f4>
    52d6:	c8 14       	cp	r12, r8
    52d8:	d9 04       	cpc	r13, r9
    52da:	41 f4       	brne	.+16     	; 0x52ec <vfprintf+0x354>
    52dc:	9a 81       	ldd	r25, Y+2	; 0x02
    52de:	96 33       	cpi	r25, 0x36	; 54
    52e0:	20 f4       	brcc	.+8      	; 0x52ea <vfprintf+0x352>
    52e2:	95 33       	cpi	r25, 0x35	; 53
    52e4:	19 f4       	brne	.+6      	; 0x52ec <vfprintf+0x354>
    52e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    52e8:	34 ff       	sbrs	r19, 4
    52ea:	81 e3       	ldi	r24, 0x31	; 49
    52ec:	b7 01       	movw	r22, r14
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	48 c0       	rjmp	.+144    	; 0x5382 <vfprintf+0x3ea>
    52f2:	8a 81       	ldd	r24, Y+2	; 0x02
    52f4:	81 33       	cpi	r24, 0x31	; 49
    52f6:	19 f0       	breq	.+6      	; 0x52fe <vfprintf+0x366>
    52f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    52fa:	9f 7e       	andi	r25, 0xEF	; 239
    52fc:	9c 87       	std	Y+12, r25	; 0x0c
    52fe:	b7 01       	movw	r22, r14
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	b8 d5       	rcall	.+2928   	; 0x5e74 <fputc>
    5304:	11 11       	cpse	r17, r1
    5306:	05 c0       	rjmp	.+10     	; 0x5312 <vfprintf+0x37a>
    5308:	94 fc       	sbrc	r9, 4
    530a:	16 c0       	rjmp	.+44     	; 0x5338 <vfprintf+0x3a0>
    530c:	85 e6       	ldi	r24, 0x65	; 101
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	15 c0       	rjmp	.+42     	; 0x533c <vfprintf+0x3a4>
    5312:	b7 01       	movw	r22, r14
    5314:	8e e2       	ldi	r24, 0x2E	; 46
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	ad d5       	rcall	.+2906   	; 0x5e74 <fputc>
    531a:	1e 5f       	subi	r17, 0xFE	; 254
    531c:	82 e0       	ldi	r24, 0x02	; 2
    531e:	01 e0       	ldi	r16, 0x01	; 1
    5320:	08 0f       	add	r16, r24
    5322:	f3 01       	movw	r30, r6
    5324:	e8 0f       	add	r30, r24
    5326:	f1 1d       	adc	r31, r1
    5328:	80 81       	ld	r24, Z
    532a:	b7 01       	movw	r22, r14
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	a2 d5       	rcall	.+2884   	; 0x5e74 <fputc>
    5330:	80 2f       	mov	r24, r16
    5332:	01 13       	cpse	r16, r17
    5334:	f4 cf       	rjmp	.-24     	; 0x531e <vfprintf+0x386>
    5336:	e8 cf       	rjmp	.-48     	; 0x5308 <vfprintf+0x370>
    5338:	85 e4       	ldi	r24, 0x45	; 69
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	b7 01       	movw	r22, r14
    533e:	9a d5       	rcall	.+2868   	; 0x5e74 <fputc>
    5340:	d7 fc       	sbrc	r13, 7
    5342:	06 c0       	rjmp	.+12     	; 0x5350 <vfprintf+0x3b8>
    5344:	c1 14       	cp	r12, r1
    5346:	d1 04       	cpc	r13, r1
    5348:	41 f4       	brne	.+16     	; 0x535a <vfprintf+0x3c2>
    534a:	ec 85       	ldd	r30, Y+12	; 0x0c
    534c:	e4 ff       	sbrs	r30, 4
    534e:	05 c0       	rjmp	.+10     	; 0x535a <vfprintf+0x3c2>
    5350:	d1 94       	neg	r13
    5352:	c1 94       	neg	r12
    5354:	d1 08       	sbc	r13, r1
    5356:	8d e2       	ldi	r24, 0x2D	; 45
    5358:	01 c0       	rjmp	.+2      	; 0x535c <vfprintf+0x3c4>
    535a:	8b e2       	ldi	r24, 0x2B	; 43
    535c:	b7 01       	movw	r22, r14
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	89 d5       	rcall	.+2834   	; 0x5e74 <fputc>
    5362:	80 e3       	ldi	r24, 0x30	; 48
    5364:	2a e0       	ldi	r18, 0x0A	; 10
    5366:	c2 16       	cp	r12, r18
    5368:	d1 04       	cpc	r13, r1
    536a:	2c f0       	brlt	.+10     	; 0x5376 <vfprintf+0x3de>
    536c:	8f 5f       	subi	r24, 0xFF	; 255
    536e:	fa e0       	ldi	r31, 0x0A	; 10
    5370:	cf 1a       	sub	r12, r31
    5372:	d1 08       	sbc	r13, r1
    5374:	f7 cf       	rjmp	.-18     	; 0x5364 <vfprintf+0x3cc>
    5376:	b7 01       	movw	r22, r14
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	7c d5       	rcall	.+2808   	; 0x5e74 <fputc>
    537c:	b7 01       	movw	r22, r14
    537e:	c6 01       	movw	r24, r12
    5380:	c0 96       	adiw	r24, 0x30	; 48
    5382:	78 d5       	rcall	.+2800   	; 0x5e74 <fputc>
    5384:	49 c1       	rjmp	.+658    	; 0x5618 <vfprintf+0x680>
    5386:	83 36       	cpi	r24, 0x63	; 99
    5388:	31 f0       	breq	.+12     	; 0x5396 <vfprintf+0x3fe>
    538a:	83 37       	cpi	r24, 0x73	; 115
    538c:	79 f0       	breq	.+30     	; 0x53ac <vfprintf+0x414>
    538e:	83 35       	cpi	r24, 0x53	; 83
    5390:	09 f0       	breq	.+2      	; 0x5394 <vfprintf+0x3fc>
    5392:	52 c0       	rjmp	.+164    	; 0x5438 <vfprintf+0x4a0>
    5394:	1f c0       	rjmp	.+62     	; 0x53d4 <vfprintf+0x43c>
    5396:	56 01       	movw	r10, r12
    5398:	32 e0       	ldi	r19, 0x02	; 2
    539a:	a3 0e       	add	r10, r19
    539c:	b1 1c       	adc	r11, r1
    539e:	f6 01       	movw	r30, r12
    53a0:	80 81       	ld	r24, Z
    53a2:	89 83       	std	Y+1, r24	; 0x01
    53a4:	01 e0       	ldi	r16, 0x01	; 1
    53a6:	10 e0       	ldi	r17, 0x00	; 0
    53a8:	63 01       	movw	r12, r6
    53aa:	11 c0       	rjmp	.+34     	; 0x53ce <vfprintf+0x436>
    53ac:	56 01       	movw	r10, r12
    53ae:	f2 e0       	ldi	r31, 0x02	; 2
    53b0:	af 0e       	add	r10, r31
    53b2:	b1 1c       	adc	r11, r1
    53b4:	f6 01       	movw	r30, r12
    53b6:	c0 80       	ld	r12, Z
    53b8:	d1 80       	ldd	r13, Z+1	; 0x01
    53ba:	96 fe       	sbrs	r9, 6
    53bc:	03 c0       	rjmp	.+6      	; 0x53c4 <vfprintf+0x42c>
    53be:	61 2f       	mov	r22, r17
    53c0:	70 e0       	ldi	r23, 0x00	; 0
    53c2:	02 c0       	rjmp	.+4      	; 0x53c8 <vfprintf+0x430>
    53c4:	6f ef       	ldi	r22, 0xFF	; 255
    53c6:	7f ef       	ldi	r23, 0xFF	; 255
    53c8:	c6 01       	movw	r24, r12
    53ca:	49 d5       	rcall	.+2706   	; 0x5e5e <strnlen>
    53cc:	8c 01       	movw	r16, r24
    53ce:	f9 2d       	mov	r31, r9
    53d0:	ff 77       	andi	r31, 0x7F	; 127
    53d2:	13 c0       	rjmp	.+38     	; 0x53fa <vfprintf+0x462>
    53d4:	56 01       	movw	r10, r12
    53d6:	22 e0       	ldi	r18, 0x02	; 2
    53d8:	a2 0e       	add	r10, r18
    53da:	b1 1c       	adc	r11, r1
    53dc:	f6 01       	movw	r30, r12
    53de:	c0 80       	ld	r12, Z
    53e0:	d1 80       	ldd	r13, Z+1	; 0x01
    53e2:	96 fe       	sbrs	r9, 6
    53e4:	03 c0       	rjmp	.+6      	; 0x53ec <vfprintf+0x454>
    53e6:	61 2f       	mov	r22, r17
    53e8:	70 e0       	ldi	r23, 0x00	; 0
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <vfprintf+0x458>
    53ec:	6f ef       	ldi	r22, 0xFF	; 255
    53ee:	7f ef       	ldi	r23, 0xFF	; 255
    53f0:	c6 01       	movw	r24, r12
    53f2:	cb d4       	rcall	.+2454   	; 0x5d8a <strnlen_P>
    53f4:	8c 01       	movw	r16, r24
    53f6:	f9 2d       	mov	r31, r9
    53f8:	f0 68       	ori	r31, 0x80	; 128
    53fa:	9f 2e       	mov	r9, r31
    53fc:	f3 fd       	sbrc	r31, 3
    53fe:	18 c0       	rjmp	.+48     	; 0x5430 <vfprintf+0x498>
    5400:	85 2d       	mov	r24, r5
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	08 17       	cp	r16, r24
    5406:	19 07       	cpc	r17, r25
    5408:	98 f4       	brcc	.+38     	; 0x5430 <vfprintf+0x498>
    540a:	b7 01       	movw	r22, r14
    540c:	80 e2       	ldi	r24, 0x20	; 32
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	31 d5       	rcall	.+2658   	; 0x5e74 <fputc>
    5412:	5a 94       	dec	r5
    5414:	f5 cf       	rjmp	.-22     	; 0x5400 <vfprintf+0x468>
    5416:	f6 01       	movw	r30, r12
    5418:	97 fc       	sbrc	r9, 7
    541a:	85 91       	lpm	r24, Z+
    541c:	97 fe       	sbrs	r9, 7
    541e:	81 91       	ld	r24, Z+
    5420:	6f 01       	movw	r12, r30
    5422:	b7 01       	movw	r22, r14
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	26 d5       	rcall	.+2636   	; 0x5e74 <fputc>
    5428:	51 10       	cpse	r5, r1
    542a:	5a 94       	dec	r5
    542c:	01 50       	subi	r16, 0x01	; 1
    542e:	11 09       	sbc	r17, r1
    5430:	01 15       	cp	r16, r1
    5432:	11 05       	cpc	r17, r1
    5434:	81 f7       	brne	.-32     	; 0x5416 <vfprintf+0x47e>
    5436:	f0 c0       	rjmp	.+480    	; 0x5618 <vfprintf+0x680>
    5438:	84 36       	cpi	r24, 0x64	; 100
    543a:	11 f0       	breq	.+4      	; 0x5440 <vfprintf+0x4a8>
    543c:	89 36       	cpi	r24, 0x69	; 105
    543e:	59 f5       	brne	.+86     	; 0x5496 <vfprintf+0x4fe>
    5440:	56 01       	movw	r10, r12
    5442:	97 fe       	sbrs	r9, 7
    5444:	09 c0       	rjmp	.+18     	; 0x5458 <vfprintf+0x4c0>
    5446:	24 e0       	ldi	r18, 0x04	; 4
    5448:	a2 0e       	add	r10, r18
    544a:	b1 1c       	adc	r11, r1
    544c:	f6 01       	movw	r30, r12
    544e:	60 81       	ld	r22, Z
    5450:	71 81       	ldd	r23, Z+1	; 0x01
    5452:	82 81       	ldd	r24, Z+2	; 0x02
    5454:	93 81       	ldd	r25, Z+3	; 0x03
    5456:	0a c0       	rjmp	.+20     	; 0x546c <vfprintf+0x4d4>
    5458:	f2 e0       	ldi	r31, 0x02	; 2
    545a:	af 0e       	add	r10, r31
    545c:	b1 1c       	adc	r11, r1
    545e:	f6 01       	movw	r30, r12
    5460:	60 81       	ld	r22, Z
    5462:	71 81       	ldd	r23, Z+1	; 0x01
    5464:	07 2e       	mov	r0, r23
    5466:	00 0c       	add	r0, r0
    5468:	88 0b       	sbc	r24, r24
    546a:	99 0b       	sbc	r25, r25
    546c:	f9 2d       	mov	r31, r9
    546e:	ff 76       	andi	r31, 0x6F	; 111
    5470:	9f 2e       	mov	r9, r31
    5472:	97 ff       	sbrs	r25, 7
    5474:	09 c0       	rjmp	.+18     	; 0x5488 <vfprintf+0x4f0>
    5476:	90 95       	com	r25
    5478:	80 95       	com	r24
    547a:	70 95       	com	r23
    547c:	61 95       	neg	r22
    547e:	7f 4f       	sbci	r23, 0xFF	; 255
    5480:	8f 4f       	sbci	r24, 0xFF	; 255
    5482:	9f 4f       	sbci	r25, 0xFF	; 255
    5484:	f0 68       	ori	r31, 0x80	; 128
    5486:	9f 2e       	mov	r9, r31
    5488:	2a e0       	ldi	r18, 0x0A	; 10
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	a3 01       	movw	r20, r6
    548e:	a0 d5       	rcall	.+2880   	; 0x5fd0 <__ultoa_invert>
    5490:	c8 2e       	mov	r12, r24
    5492:	c6 18       	sub	r12, r6
    5494:	3e c0       	rjmp	.+124    	; 0x5512 <vfprintf+0x57a>
    5496:	09 2d       	mov	r16, r9
    5498:	85 37       	cpi	r24, 0x75	; 117
    549a:	21 f4       	brne	.+8      	; 0x54a4 <vfprintf+0x50c>
    549c:	0f 7e       	andi	r16, 0xEF	; 239
    549e:	2a e0       	ldi	r18, 0x0A	; 10
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	1d c0       	rjmp	.+58     	; 0x54de <vfprintf+0x546>
    54a4:	09 7f       	andi	r16, 0xF9	; 249
    54a6:	8f 36       	cpi	r24, 0x6F	; 111
    54a8:	91 f0       	breq	.+36     	; 0x54ce <vfprintf+0x536>
    54aa:	18 f4       	brcc	.+6      	; 0x54b2 <vfprintf+0x51a>
    54ac:	88 35       	cpi	r24, 0x58	; 88
    54ae:	59 f0       	breq	.+22     	; 0x54c6 <vfprintf+0x52e>
    54b0:	bc c0       	rjmp	.+376    	; 0x562a <vfprintf+0x692>
    54b2:	80 37       	cpi	r24, 0x70	; 112
    54b4:	19 f0       	breq	.+6      	; 0x54bc <vfprintf+0x524>
    54b6:	88 37       	cpi	r24, 0x78	; 120
    54b8:	11 f0       	breq	.+4      	; 0x54be <vfprintf+0x526>
    54ba:	b7 c0       	rjmp	.+366    	; 0x562a <vfprintf+0x692>
    54bc:	00 61       	ori	r16, 0x10	; 16
    54be:	04 ff       	sbrs	r16, 4
    54c0:	09 c0       	rjmp	.+18     	; 0x54d4 <vfprintf+0x53c>
    54c2:	04 60       	ori	r16, 0x04	; 4
    54c4:	07 c0       	rjmp	.+14     	; 0x54d4 <vfprintf+0x53c>
    54c6:	94 fe       	sbrs	r9, 4
    54c8:	08 c0       	rjmp	.+16     	; 0x54da <vfprintf+0x542>
    54ca:	06 60       	ori	r16, 0x06	; 6
    54cc:	06 c0       	rjmp	.+12     	; 0x54da <vfprintf+0x542>
    54ce:	28 e0       	ldi	r18, 0x08	; 8
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	05 c0       	rjmp	.+10     	; 0x54de <vfprintf+0x546>
    54d4:	20 e1       	ldi	r18, 0x10	; 16
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	02 c0       	rjmp	.+4      	; 0x54de <vfprintf+0x546>
    54da:	20 e1       	ldi	r18, 0x10	; 16
    54dc:	32 e0       	ldi	r19, 0x02	; 2
    54de:	56 01       	movw	r10, r12
    54e0:	07 ff       	sbrs	r16, 7
    54e2:	09 c0       	rjmp	.+18     	; 0x54f6 <vfprintf+0x55e>
    54e4:	84 e0       	ldi	r24, 0x04	; 4
    54e6:	a8 0e       	add	r10, r24
    54e8:	b1 1c       	adc	r11, r1
    54ea:	f6 01       	movw	r30, r12
    54ec:	60 81       	ld	r22, Z
    54ee:	71 81       	ldd	r23, Z+1	; 0x01
    54f0:	82 81       	ldd	r24, Z+2	; 0x02
    54f2:	93 81       	ldd	r25, Z+3	; 0x03
    54f4:	08 c0       	rjmp	.+16     	; 0x5506 <vfprintf+0x56e>
    54f6:	f2 e0       	ldi	r31, 0x02	; 2
    54f8:	af 0e       	add	r10, r31
    54fa:	b1 1c       	adc	r11, r1
    54fc:	f6 01       	movw	r30, r12
    54fe:	60 81       	ld	r22, Z
    5500:	71 81       	ldd	r23, Z+1	; 0x01
    5502:	80 e0       	ldi	r24, 0x00	; 0
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	a3 01       	movw	r20, r6
    5508:	63 d5       	rcall	.+2758   	; 0x5fd0 <__ultoa_invert>
    550a:	c8 2e       	mov	r12, r24
    550c:	c6 18       	sub	r12, r6
    550e:	0f 77       	andi	r16, 0x7F	; 127
    5510:	90 2e       	mov	r9, r16
    5512:	96 fe       	sbrs	r9, 6
    5514:	0b c0       	rjmp	.+22     	; 0x552c <vfprintf+0x594>
    5516:	09 2d       	mov	r16, r9
    5518:	0e 7f       	andi	r16, 0xFE	; 254
    551a:	c1 16       	cp	r12, r17
    551c:	50 f4       	brcc	.+20     	; 0x5532 <vfprintf+0x59a>
    551e:	94 fe       	sbrs	r9, 4
    5520:	0a c0       	rjmp	.+20     	; 0x5536 <vfprintf+0x59e>
    5522:	92 fc       	sbrc	r9, 2
    5524:	08 c0       	rjmp	.+16     	; 0x5536 <vfprintf+0x59e>
    5526:	09 2d       	mov	r16, r9
    5528:	0e 7e       	andi	r16, 0xEE	; 238
    552a:	05 c0       	rjmp	.+10     	; 0x5536 <vfprintf+0x59e>
    552c:	dc 2c       	mov	r13, r12
    552e:	09 2d       	mov	r16, r9
    5530:	03 c0       	rjmp	.+6      	; 0x5538 <vfprintf+0x5a0>
    5532:	dc 2c       	mov	r13, r12
    5534:	01 c0       	rjmp	.+2      	; 0x5538 <vfprintf+0x5a0>
    5536:	d1 2e       	mov	r13, r17
    5538:	04 ff       	sbrs	r16, 4
    553a:	0d c0       	rjmp	.+26     	; 0x5556 <vfprintf+0x5be>
    553c:	fe 01       	movw	r30, r28
    553e:	ec 0d       	add	r30, r12
    5540:	f1 1d       	adc	r31, r1
    5542:	80 81       	ld	r24, Z
    5544:	80 33       	cpi	r24, 0x30	; 48
    5546:	11 f4       	brne	.+4      	; 0x554c <vfprintf+0x5b4>
    5548:	09 7e       	andi	r16, 0xE9	; 233
    554a:	09 c0       	rjmp	.+18     	; 0x555e <vfprintf+0x5c6>
    554c:	02 ff       	sbrs	r16, 2
    554e:	06 c0       	rjmp	.+12     	; 0x555c <vfprintf+0x5c4>
    5550:	d3 94       	inc	r13
    5552:	d3 94       	inc	r13
    5554:	04 c0       	rjmp	.+8      	; 0x555e <vfprintf+0x5c6>
    5556:	80 2f       	mov	r24, r16
    5558:	86 78       	andi	r24, 0x86	; 134
    555a:	09 f0       	breq	.+2      	; 0x555e <vfprintf+0x5c6>
    555c:	d3 94       	inc	r13
    555e:	03 fd       	sbrc	r16, 3
    5560:	10 c0       	rjmp	.+32     	; 0x5582 <vfprintf+0x5ea>
    5562:	00 ff       	sbrs	r16, 0
    5564:	06 c0       	rjmp	.+12     	; 0x5572 <vfprintf+0x5da>
    5566:	1c 2d       	mov	r17, r12
    5568:	d5 14       	cp	r13, r5
    556a:	78 f4       	brcc	.+30     	; 0x558a <vfprintf+0x5f2>
    556c:	15 0d       	add	r17, r5
    556e:	1d 19       	sub	r17, r13
    5570:	0c c0       	rjmp	.+24     	; 0x558a <vfprintf+0x5f2>
    5572:	d5 14       	cp	r13, r5
    5574:	50 f4       	brcc	.+20     	; 0x558a <vfprintf+0x5f2>
    5576:	b7 01       	movw	r22, r14
    5578:	80 e2       	ldi	r24, 0x20	; 32
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	7b d4       	rcall	.+2294   	; 0x5e74 <fputc>
    557e:	d3 94       	inc	r13
    5580:	f8 cf       	rjmp	.-16     	; 0x5572 <vfprintf+0x5da>
    5582:	d5 14       	cp	r13, r5
    5584:	10 f4       	brcc	.+4      	; 0x558a <vfprintf+0x5f2>
    5586:	5d 18       	sub	r5, r13
    5588:	01 c0       	rjmp	.+2      	; 0x558c <vfprintf+0x5f4>
    558a:	51 2c       	mov	r5, r1
    558c:	04 ff       	sbrs	r16, 4
    558e:	0f c0       	rjmp	.+30     	; 0x55ae <vfprintf+0x616>
    5590:	b7 01       	movw	r22, r14
    5592:	80 e3       	ldi	r24, 0x30	; 48
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	6e d4       	rcall	.+2268   	; 0x5e74 <fputc>
    5598:	02 ff       	sbrs	r16, 2
    559a:	16 c0       	rjmp	.+44     	; 0x55c8 <vfprintf+0x630>
    559c:	01 fd       	sbrc	r16, 1
    559e:	03 c0       	rjmp	.+6      	; 0x55a6 <vfprintf+0x60e>
    55a0:	88 e7       	ldi	r24, 0x78	; 120
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	02 c0       	rjmp	.+4      	; 0x55aa <vfprintf+0x612>
    55a6:	88 e5       	ldi	r24, 0x58	; 88
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	b7 01       	movw	r22, r14
    55ac:	0c c0       	rjmp	.+24     	; 0x55c6 <vfprintf+0x62e>
    55ae:	80 2f       	mov	r24, r16
    55b0:	86 78       	andi	r24, 0x86	; 134
    55b2:	51 f0       	breq	.+20     	; 0x55c8 <vfprintf+0x630>
    55b4:	01 ff       	sbrs	r16, 1
    55b6:	02 c0       	rjmp	.+4      	; 0x55bc <vfprintf+0x624>
    55b8:	8b e2       	ldi	r24, 0x2B	; 43
    55ba:	01 c0       	rjmp	.+2      	; 0x55be <vfprintf+0x626>
    55bc:	80 e2       	ldi	r24, 0x20	; 32
    55be:	07 fd       	sbrc	r16, 7
    55c0:	8d e2       	ldi	r24, 0x2D	; 45
    55c2:	b7 01       	movw	r22, r14
    55c4:	90 e0       	ldi	r25, 0x00	; 0
    55c6:	56 d4       	rcall	.+2220   	; 0x5e74 <fputc>
    55c8:	c1 16       	cp	r12, r17
    55ca:	30 f4       	brcc	.+12     	; 0x55d8 <vfprintf+0x640>
    55cc:	b7 01       	movw	r22, r14
    55ce:	80 e3       	ldi	r24, 0x30	; 48
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	50 d4       	rcall	.+2208   	; 0x5e74 <fputc>
    55d4:	11 50       	subi	r17, 0x01	; 1
    55d6:	f8 cf       	rjmp	.-16     	; 0x55c8 <vfprintf+0x630>
    55d8:	ca 94       	dec	r12
    55da:	f3 01       	movw	r30, r6
    55dc:	ec 0d       	add	r30, r12
    55de:	f1 1d       	adc	r31, r1
    55e0:	80 81       	ld	r24, Z
    55e2:	b7 01       	movw	r22, r14
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	46 d4       	rcall	.+2188   	; 0x5e74 <fputc>
    55e8:	c1 10       	cpse	r12, r1
    55ea:	f6 cf       	rjmp	.-20     	; 0x55d8 <vfprintf+0x640>
    55ec:	15 c0       	rjmp	.+42     	; 0x5618 <vfprintf+0x680>
    55ee:	f4 e0       	ldi	r31, 0x04	; 4
    55f0:	f5 15       	cp	r31, r5
    55f2:	50 f5       	brcc	.+84     	; 0x5648 <vfprintf+0x6b0>
    55f4:	84 e0       	ldi	r24, 0x04	; 4
    55f6:	58 1a       	sub	r5, r24
    55f8:	93 fe       	sbrs	r9, 3
    55fa:	1e c0       	rjmp	.+60     	; 0x5638 <vfprintf+0x6a0>
    55fc:	01 11       	cpse	r16, r1
    55fe:	25 c0       	rjmp	.+74     	; 0x564a <vfprintf+0x6b2>
    5600:	2c 85       	ldd	r18, Y+12	; 0x0c
    5602:	23 ff       	sbrs	r18, 3
    5604:	27 c0       	rjmp	.+78     	; 0x5654 <vfprintf+0x6bc>
    5606:	0a e9       	ldi	r16, 0x9A	; 154
    5608:	11 e0       	ldi	r17, 0x01	; 1
    560a:	39 2d       	mov	r19, r9
    560c:	30 71       	andi	r19, 0x10	; 16
    560e:	93 2e       	mov	r9, r19
    5610:	f8 01       	movw	r30, r16
    5612:	84 91       	lpm	r24, Z
    5614:	81 11       	cpse	r24, r1
    5616:	21 c0       	rjmp	.+66     	; 0x565a <vfprintf+0x6c2>
    5618:	55 20       	and	r5, r5
    561a:	09 f4       	brne	.+2      	; 0x561e <vfprintf+0x686>
    561c:	fc cc       	rjmp	.-1544   	; 0x5016 <vfprintf+0x7e>
    561e:	b7 01       	movw	r22, r14
    5620:	80 e2       	ldi	r24, 0x20	; 32
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	27 d4       	rcall	.+2126   	; 0x5e74 <fputc>
    5626:	5a 94       	dec	r5
    5628:	f7 cf       	rjmp	.-18     	; 0x5618 <vfprintf+0x680>
    562a:	f7 01       	movw	r30, r14
    562c:	86 81       	ldd	r24, Z+6	; 0x06
    562e:	97 81       	ldd	r25, Z+7	; 0x07
    5630:	23 c0       	rjmp	.+70     	; 0x5678 <vfprintf+0x6e0>
    5632:	8f ef       	ldi	r24, 0xFF	; 255
    5634:	9f ef       	ldi	r25, 0xFF	; 255
    5636:	20 c0       	rjmp	.+64     	; 0x5678 <vfprintf+0x6e0>
    5638:	b7 01       	movw	r22, r14
    563a:	80 e2       	ldi	r24, 0x20	; 32
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	1a d4       	rcall	.+2100   	; 0x5e74 <fputc>
    5640:	5a 94       	dec	r5
    5642:	51 10       	cpse	r5, r1
    5644:	f9 cf       	rjmp	.-14     	; 0x5638 <vfprintf+0x6a0>
    5646:	da cf       	rjmp	.-76     	; 0x55fc <vfprintf+0x664>
    5648:	51 2c       	mov	r5, r1
    564a:	b7 01       	movw	r22, r14
    564c:	80 2f       	mov	r24, r16
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	11 d4       	rcall	.+2082   	; 0x5e74 <fputc>
    5652:	d6 cf       	rjmp	.-84     	; 0x5600 <vfprintf+0x668>
    5654:	0e e9       	ldi	r16, 0x9E	; 158
    5656:	11 e0       	ldi	r17, 0x01	; 1
    5658:	d8 cf       	rjmp	.-80     	; 0x560a <vfprintf+0x672>
    565a:	91 10       	cpse	r9, r1
    565c:	80 52       	subi	r24, 0x20	; 32
    565e:	b7 01       	movw	r22, r14
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	08 d4       	rcall	.+2064   	; 0x5e74 <fputc>
    5664:	0f 5f       	subi	r16, 0xFF	; 255
    5666:	1f 4f       	sbci	r17, 0xFF	; 255
    5668:	d3 cf       	rjmp	.-90     	; 0x5610 <vfprintf+0x678>
    566a:	23 e0       	ldi	r18, 0x03	; 3
    566c:	25 15       	cp	r18, r5
    566e:	10 f4       	brcc	.+4      	; 0x5674 <vfprintf+0x6dc>
    5670:	83 e0       	ldi	r24, 0x03	; 3
    5672:	c1 cf       	rjmp	.-126    	; 0x55f6 <vfprintf+0x65e>
    5674:	51 2c       	mov	r5, r1
    5676:	c4 cf       	rjmp	.-120    	; 0x5600 <vfprintf+0x668>
    5678:	60 96       	adiw	r28, 0x10	; 16
    567a:	0f b6       	in	r0, 0x3f	; 63
    567c:	f8 94       	cli
    567e:	de bf       	out	0x3e, r29	; 62
    5680:	0f be       	out	0x3f, r0	; 63
    5682:	cd bf       	out	0x3d, r28	; 61
    5684:	df 91       	pop	r29
    5686:	cf 91       	pop	r28
    5688:	1f 91       	pop	r17
    568a:	0f 91       	pop	r16
    568c:	ff 90       	pop	r15
    568e:	ef 90       	pop	r14
    5690:	df 90       	pop	r13
    5692:	cf 90       	pop	r12
    5694:	bf 90       	pop	r11
    5696:	af 90       	pop	r10
    5698:	9f 90       	pop	r9
    569a:	8f 90       	pop	r8
    569c:	7f 90       	pop	r7
    569e:	6f 90       	pop	r6
    56a0:	5f 90       	pop	r5
    56a2:	4f 90       	pop	r4
    56a4:	3f 90       	pop	r3
    56a6:	2f 90       	pop	r2
    56a8:	08 95       	ret

000056aa <__divsf3>:
    56aa:	12 d0       	rcall	.+36     	; 0x56d0 <__divsf3x>
    56ac:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__fp_round>
    56b0:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <__fp_pscB>
    56b4:	58 f0       	brcs	.+22     	; 0x56cc <__divsf3+0x22>
    56b6:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__fp_pscA>
    56ba:	40 f0       	brcs	.+16     	; 0x56cc <__divsf3+0x22>
    56bc:	29 f4       	brne	.+10     	; 0x56c8 <__divsf3+0x1e>
    56be:	5f 3f       	cpi	r21, 0xFF	; 255
    56c0:	29 f0       	breq	.+10     	; 0x56cc <__divsf3+0x22>
    56c2:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__fp_inf>
    56c6:	51 11       	cpse	r21, r1
    56c8:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__fp_szero>
    56cc:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__fp_nan>

000056d0 <__divsf3x>:
    56d0:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__fp_split3>
    56d4:	68 f3       	brcs	.-38     	; 0x56b0 <__divsf3+0x6>

000056d6 <__divsf3_pse>:
    56d6:	99 23       	and	r25, r25
    56d8:	b1 f3       	breq	.-20     	; 0x56c6 <__divsf3+0x1c>
    56da:	55 23       	and	r21, r21
    56dc:	91 f3       	breq	.-28     	; 0x56c2 <__divsf3+0x18>
    56de:	95 1b       	sub	r25, r21
    56e0:	55 0b       	sbc	r21, r21
    56e2:	bb 27       	eor	r27, r27
    56e4:	aa 27       	eor	r26, r26
    56e6:	62 17       	cp	r22, r18
    56e8:	73 07       	cpc	r23, r19
    56ea:	84 07       	cpc	r24, r20
    56ec:	38 f0       	brcs	.+14     	; 0x56fc <__divsf3_pse+0x26>
    56ee:	9f 5f       	subi	r25, 0xFF	; 255
    56f0:	5f 4f       	sbci	r21, 0xFF	; 255
    56f2:	22 0f       	add	r18, r18
    56f4:	33 1f       	adc	r19, r19
    56f6:	44 1f       	adc	r20, r20
    56f8:	aa 1f       	adc	r26, r26
    56fa:	a9 f3       	breq	.-22     	; 0x56e6 <__divsf3_pse+0x10>
    56fc:	35 d0       	rcall	.+106    	; 0x5768 <__divsf3_pse+0x92>
    56fe:	0e 2e       	mov	r0, r30
    5700:	3a f0       	brmi	.+14     	; 0x5710 <__divsf3_pse+0x3a>
    5702:	e0 e8       	ldi	r30, 0x80	; 128
    5704:	32 d0       	rcall	.+100    	; 0x576a <__divsf3_pse+0x94>
    5706:	91 50       	subi	r25, 0x01	; 1
    5708:	50 40       	sbci	r21, 0x00	; 0
    570a:	e6 95       	lsr	r30
    570c:	00 1c       	adc	r0, r0
    570e:	ca f7       	brpl	.-14     	; 0x5702 <__divsf3_pse+0x2c>
    5710:	2b d0       	rcall	.+86     	; 0x5768 <__divsf3_pse+0x92>
    5712:	fe 2f       	mov	r31, r30
    5714:	29 d0       	rcall	.+82     	; 0x5768 <__divsf3_pse+0x92>
    5716:	66 0f       	add	r22, r22
    5718:	77 1f       	adc	r23, r23
    571a:	88 1f       	adc	r24, r24
    571c:	bb 1f       	adc	r27, r27
    571e:	26 17       	cp	r18, r22
    5720:	37 07       	cpc	r19, r23
    5722:	48 07       	cpc	r20, r24
    5724:	ab 07       	cpc	r26, r27
    5726:	b0 e8       	ldi	r27, 0x80	; 128
    5728:	09 f0       	breq	.+2      	; 0x572c <__divsf3_pse+0x56>
    572a:	bb 0b       	sbc	r27, r27
    572c:	80 2d       	mov	r24, r0
    572e:	bf 01       	movw	r22, r30
    5730:	ff 27       	eor	r31, r31
    5732:	93 58       	subi	r25, 0x83	; 131
    5734:	5f 4f       	sbci	r21, 0xFF	; 255
    5736:	3a f0       	brmi	.+14     	; 0x5746 <__divsf3_pse+0x70>
    5738:	9e 3f       	cpi	r25, 0xFE	; 254
    573a:	51 05       	cpc	r21, r1
    573c:	78 f0       	brcs	.+30     	; 0x575c <__divsf3_pse+0x86>
    573e:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__fp_inf>
    5742:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__fp_szero>
    5746:	5f 3f       	cpi	r21, 0xFF	; 255
    5748:	e4 f3       	brlt	.-8      	; 0x5742 <__divsf3_pse+0x6c>
    574a:	98 3e       	cpi	r25, 0xE8	; 232
    574c:	d4 f3       	brlt	.-12     	; 0x5742 <__divsf3_pse+0x6c>
    574e:	86 95       	lsr	r24
    5750:	77 95       	ror	r23
    5752:	67 95       	ror	r22
    5754:	b7 95       	ror	r27
    5756:	f7 95       	ror	r31
    5758:	9f 5f       	subi	r25, 0xFF	; 255
    575a:	c9 f7       	brne	.-14     	; 0x574e <__divsf3_pse+0x78>
    575c:	88 0f       	add	r24, r24
    575e:	91 1d       	adc	r25, r1
    5760:	96 95       	lsr	r25
    5762:	87 95       	ror	r24
    5764:	97 f9       	bld	r25, 7
    5766:	08 95       	ret
    5768:	e1 e0       	ldi	r30, 0x01	; 1
    576a:	66 0f       	add	r22, r22
    576c:	77 1f       	adc	r23, r23
    576e:	88 1f       	adc	r24, r24
    5770:	bb 1f       	adc	r27, r27
    5772:	62 17       	cp	r22, r18
    5774:	73 07       	cpc	r23, r19
    5776:	84 07       	cpc	r24, r20
    5778:	ba 07       	cpc	r27, r26
    577a:	20 f0       	brcs	.+8      	; 0x5784 <__divsf3_pse+0xae>
    577c:	62 1b       	sub	r22, r18
    577e:	73 0b       	sbc	r23, r19
    5780:	84 0b       	sbc	r24, r20
    5782:	ba 0b       	sbc	r27, r26
    5784:	ee 1f       	adc	r30, r30
    5786:	88 f7       	brcc	.-30     	; 0x576a <__divsf3_pse+0x94>
    5788:	e0 95       	com	r30
    578a:	08 95       	ret

0000578c <__fixunssfsi>:
    578c:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <__fp_splitA>
    5790:	88 f0       	brcs	.+34     	; 0x57b4 <__fixunssfsi+0x28>
    5792:	9f 57       	subi	r25, 0x7F	; 127
    5794:	98 f0       	brcs	.+38     	; 0x57bc <__fixunssfsi+0x30>
    5796:	b9 2f       	mov	r27, r25
    5798:	99 27       	eor	r25, r25
    579a:	b7 51       	subi	r27, 0x17	; 23
    579c:	b0 f0       	brcs	.+44     	; 0x57ca <__fixunssfsi+0x3e>
    579e:	e1 f0       	breq	.+56     	; 0x57d8 <__fixunssfsi+0x4c>
    57a0:	66 0f       	add	r22, r22
    57a2:	77 1f       	adc	r23, r23
    57a4:	88 1f       	adc	r24, r24
    57a6:	99 1f       	adc	r25, r25
    57a8:	1a f0       	brmi	.+6      	; 0x57b0 <__fixunssfsi+0x24>
    57aa:	ba 95       	dec	r27
    57ac:	c9 f7       	brne	.-14     	; 0x57a0 <__fixunssfsi+0x14>
    57ae:	14 c0       	rjmp	.+40     	; 0x57d8 <__fixunssfsi+0x4c>
    57b0:	b1 30       	cpi	r27, 0x01	; 1
    57b2:	91 f0       	breq	.+36     	; 0x57d8 <__fixunssfsi+0x4c>
    57b4:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__fp_zero>
    57b8:	b1 e0       	ldi	r27, 0x01	; 1
    57ba:	08 95       	ret
    57bc:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__fp_zero>
    57c0:	67 2f       	mov	r22, r23
    57c2:	78 2f       	mov	r23, r24
    57c4:	88 27       	eor	r24, r24
    57c6:	b8 5f       	subi	r27, 0xF8	; 248
    57c8:	39 f0       	breq	.+14     	; 0x57d8 <__fixunssfsi+0x4c>
    57ca:	b9 3f       	cpi	r27, 0xF9	; 249
    57cc:	cc f3       	brlt	.-14     	; 0x57c0 <__fixunssfsi+0x34>
    57ce:	86 95       	lsr	r24
    57d0:	77 95       	ror	r23
    57d2:	67 95       	ror	r22
    57d4:	b3 95       	inc	r27
    57d6:	d9 f7       	brne	.-10     	; 0x57ce <__fixunssfsi+0x42>
    57d8:	3e f4       	brtc	.+14     	; 0x57e8 <__fixunssfsi+0x5c>
    57da:	90 95       	com	r25
    57dc:	80 95       	com	r24
    57de:	70 95       	com	r23
    57e0:	61 95       	neg	r22
    57e2:	7f 4f       	sbci	r23, 0xFF	; 255
    57e4:	8f 4f       	sbci	r24, 0xFF	; 255
    57e6:	9f 4f       	sbci	r25, 0xFF	; 255
    57e8:	08 95       	ret

000057ea <__floatunsisf>:
    57ea:	e8 94       	clt
    57ec:	09 c0       	rjmp	.+18     	; 0x5800 <__floatsisf+0x12>

000057ee <__floatsisf>:
    57ee:	97 fb       	bst	r25, 7
    57f0:	3e f4       	brtc	.+14     	; 0x5800 <__floatsisf+0x12>
    57f2:	90 95       	com	r25
    57f4:	80 95       	com	r24
    57f6:	70 95       	com	r23
    57f8:	61 95       	neg	r22
    57fa:	7f 4f       	sbci	r23, 0xFF	; 255
    57fc:	8f 4f       	sbci	r24, 0xFF	; 255
    57fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5800:	99 23       	and	r25, r25
    5802:	a9 f0       	breq	.+42     	; 0x582e <__floatsisf+0x40>
    5804:	f9 2f       	mov	r31, r25
    5806:	96 e9       	ldi	r25, 0x96	; 150
    5808:	bb 27       	eor	r27, r27
    580a:	93 95       	inc	r25
    580c:	f6 95       	lsr	r31
    580e:	87 95       	ror	r24
    5810:	77 95       	ror	r23
    5812:	67 95       	ror	r22
    5814:	b7 95       	ror	r27
    5816:	f1 11       	cpse	r31, r1
    5818:	f8 cf       	rjmp	.-16     	; 0x580a <__floatsisf+0x1c>
    581a:	fa f4       	brpl	.+62     	; 0x585a <__floatsisf+0x6c>
    581c:	bb 0f       	add	r27, r27
    581e:	11 f4       	brne	.+4      	; 0x5824 <__floatsisf+0x36>
    5820:	60 ff       	sbrs	r22, 0
    5822:	1b c0       	rjmp	.+54     	; 0x585a <__floatsisf+0x6c>
    5824:	6f 5f       	subi	r22, 0xFF	; 255
    5826:	7f 4f       	sbci	r23, 0xFF	; 255
    5828:	8f 4f       	sbci	r24, 0xFF	; 255
    582a:	9f 4f       	sbci	r25, 0xFF	; 255
    582c:	16 c0       	rjmp	.+44     	; 0x585a <__floatsisf+0x6c>
    582e:	88 23       	and	r24, r24
    5830:	11 f0       	breq	.+4      	; 0x5836 <__floatsisf+0x48>
    5832:	96 e9       	ldi	r25, 0x96	; 150
    5834:	11 c0       	rjmp	.+34     	; 0x5858 <__floatsisf+0x6a>
    5836:	77 23       	and	r23, r23
    5838:	21 f0       	breq	.+8      	; 0x5842 <__floatsisf+0x54>
    583a:	9e e8       	ldi	r25, 0x8E	; 142
    583c:	87 2f       	mov	r24, r23
    583e:	76 2f       	mov	r23, r22
    5840:	05 c0       	rjmp	.+10     	; 0x584c <__floatsisf+0x5e>
    5842:	66 23       	and	r22, r22
    5844:	71 f0       	breq	.+28     	; 0x5862 <__floatsisf+0x74>
    5846:	96 e8       	ldi	r25, 0x86	; 134
    5848:	86 2f       	mov	r24, r22
    584a:	70 e0       	ldi	r23, 0x00	; 0
    584c:	60 e0       	ldi	r22, 0x00	; 0
    584e:	2a f0       	brmi	.+10     	; 0x585a <__floatsisf+0x6c>
    5850:	9a 95       	dec	r25
    5852:	66 0f       	add	r22, r22
    5854:	77 1f       	adc	r23, r23
    5856:	88 1f       	adc	r24, r24
    5858:	da f7       	brpl	.-10     	; 0x5850 <__floatsisf+0x62>
    585a:	88 0f       	add	r24, r24
    585c:	96 95       	lsr	r25
    585e:	87 95       	ror	r24
    5860:	97 f9       	bld	r25, 7
    5862:	08 95       	ret

00005864 <__mulsf3>:
    5864:	11 d0       	rcall	.+34     	; 0x5888 <__mulsf3x>
    5866:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__fp_round>
    586a:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__fp_pscA>
    586e:	38 f0       	brcs	.+14     	; 0x587e <__mulsf3+0x1a>
    5870:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <__fp_pscB>
    5874:	20 f0       	brcs	.+8      	; 0x587e <__mulsf3+0x1a>
    5876:	95 23       	and	r25, r21
    5878:	11 f0       	breq	.+4      	; 0x587e <__mulsf3+0x1a>
    587a:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__fp_inf>
    587e:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__fp_nan>
    5882:	11 24       	eor	r1, r1
    5884:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__fp_szero>

00005888 <__mulsf3x>:
    5888:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__fp_split3>
    588c:	70 f3       	brcs	.-36     	; 0x586a <__mulsf3+0x6>

0000588e <__mulsf3_pse>:
    588e:	95 9f       	mul	r25, r21
    5890:	c1 f3       	breq	.-16     	; 0x5882 <__mulsf3+0x1e>
    5892:	95 0f       	add	r25, r21
    5894:	50 e0       	ldi	r21, 0x00	; 0
    5896:	55 1f       	adc	r21, r21
    5898:	62 9f       	mul	r22, r18
    589a:	f0 01       	movw	r30, r0
    589c:	72 9f       	mul	r23, r18
    589e:	bb 27       	eor	r27, r27
    58a0:	f0 0d       	add	r31, r0
    58a2:	b1 1d       	adc	r27, r1
    58a4:	63 9f       	mul	r22, r19
    58a6:	aa 27       	eor	r26, r26
    58a8:	f0 0d       	add	r31, r0
    58aa:	b1 1d       	adc	r27, r1
    58ac:	aa 1f       	adc	r26, r26
    58ae:	64 9f       	mul	r22, r20
    58b0:	66 27       	eor	r22, r22
    58b2:	b0 0d       	add	r27, r0
    58b4:	a1 1d       	adc	r26, r1
    58b6:	66 1f       	adc	r22, r22
    58b8:	82 9f       	mul	r24, r18
    58ba:	22 27       	eor	r18, r18
    58bc:	b0 0d       	add	r27, r0
    58be:	a1 1d       	adc	r26, r1
    58c0:	62 1f       	adc	r22, r18
    58c2:	73 9f       	mul	r23, r19
    58c4:	b0 0d       	add	r27, r0
    58c6:	a1 1d       	adc	r26, r1
    58c8:	62 1f       	adc	r22, r18
    58ca:	83 9f       	mul	r24, r19
    58cc:	a0 0d       	add	r26, r0
    58ce:	61 1d       	adc	r22, r1
    58d0:	22 1f       	adc	r18, r18
    58d2:	74 9f       	mul	r23, r20
    58d4:	33 27       	eor	r19, r19
    58d6:	a0 0d       	add	r26, r0
    58d8:	61 1d       	adc	r22, r1
    58da:	23 1f       	adc	r18, r19
    58dc:	84 9f       	mul	r24, r20
    58de:	60 0d       	add	r22, r0
    58e0:	21 1d       	adc	r18, r1
    58e2:	82 2f       	mov	r24, r18
    58e4:	76 2f       	mov	r23, r22
    58e6:	6a 2f       	mov	r22, r26
    58e8:	11 24       	eor	r1, r1
    58ea:	9f 57       	subi	r25, 0x7F	; 127
    58ec:	50 40       	sbci	r21, 0x00	; 0
    58ee:	9a f0       	brmi	.+38     	; 0x5916 <__mulsf3_pse+0x88>
    58f0:	f1 f0       	breq	.+60     	; 0x592e <__mulsf3_pse+0xa0>
    58f2:	88 23       	and	r24, r24
    58f4:	4a f0       	brmi	.+18     	; 0x5908 <__mulsf3_pse+0x7a>
    58f6:	ee 0f       	add	r30, r30
    58f8:	ff 1f       	adc	r31, r31
    58fa:	bb 1f       	adc	r27, r27
    58fc:	66 1f       	adc	r22, r22
    58fe:	77 1f       	adc	r23, r23
    5900:	88 1f       	adc	r24, r24
    5902:	91 50       	subi	r25, 0x01	; 1
    5904:	50 40       	sbci	r21, 0x00	; 0
    5906:	a9 f7       	brne	.-22     	; 0x58f2 <__mulsf3_pse+0x64>
    5908:	9e 3f       	cpi	r25, 0xFE	; 254
    590a:	51 05       	cpc	r21, r1
    590c:	80 f0       	brcs	.+32     	; 0x592e <__mulsf3_pse+0xa0>
    590e:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__fp_inf>
    5912:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__fp_szero>
    5916:	5f 3f       	cpi	r21, 0xFF	; 255
    5918:	e4 f3       	brlt	.-8      	; 0x5912 <__mulsf3_pse+0x84>
    591a:	98 3e       	cpi	r25, 0xE8	; 232
    591c:	d4 f3       	brlt	.-12     	; 0x5912 <__mulsf3_pse+0x84>
    591e:	86 95       	lsr	r24
    5920:	77 95       	ror	r23
    5922:	67 95       	ror	r22
    5924:	b7 95       	ror	r27
    5926:	f7 95       	ror	r31
    5928:	e7 95       	ror	r30
    592a:	9f 5f       	subi	r25, 0xFF	; 255
    592c:	c1 f7       	brne	.-16     	; 0x591e <__mulsf3_pse+0x90>
    592e:	fe 2b       	or	r31, r30
    5930:	88 0f       	add	r24, r24
    5932:	91 1d       	adc	r25, r1
    5934:	96 95       	lsr	r25
    5936:	87 95       	ror	r24
    5938:	97 f9       	bld	r25, 7
    593a:	08 95       	ret

0000593c <__udivmodsi4>:
    593c:	a1 e2       	ldi	r26, 0x21	; 33
    593e:	1a 2e       	mov	r1, r26
    5940:	aa 1b       	sub	r26, r26
    5942:	bb 1b       	sub	r27, r27
    5944:	fd 01       	movw	r30, r26
    5946:	0d c0       	rjmp	.+26     	; 0x5962 <__udivmodsi4_ep>

00005948 <__udivmodsi4_loop>:
    5948:	aa 1f       	adc	r26, r26
    594a:	bb 1f       	adc	r27, r27
    594c:	ee 1f       	adc	r30, r30
    594e:	ff 1f       	adc	r31, r31
    5950:	a2 17       	cp	r26, r18
    5952:	b3 07       	cpc	r27, r19
    5954:	e4 07       	cpc	r30, r20
    5956:	f5 07       	cpc	r31, r21
    5958:	20 f0       	brcs	.+8      	; 0x5962 <__udivmodsi4_ep>
    595a:	a2 1b       	sub	r26, r18
    595c:	b3 0b       	sbc	r27, r19
    595e:	e4 0b       	sbc	r30, r20
    5960:	f5 0b       	sbc	r31, r21

00005962 <__udivmodsi4_ep>:
    5962:	66 1f       	adc	r22, r22
    5964:	77 1f       	adc	r23, r23
    5966:	88 1f       	adc	r24, r24
    5968:	99 1f       	adc	r25, r25
    596a:	1a 94       	dec	r1
    596c:	69 f7       	brne	.-38     	; 0x5948 <__udivmodsi4_loop>
    596e:	60 95       	com	r22
    5970:	70 95       	com	r23
    5972:	80 95       	com	r24
    5974:	90 95       	com	r25
    5976:	9b 01       	movw	r18, r22
    5978:	ac 01       	movw	r20, r24
    597a:	bd 01       	movw	r22, r26
    597c:	cf 01       	movw	r24, r30
    597e:	08 95       	ret

00005980 <__tablejump2__>:
    5980:	ee 0f       	add	r30, r30
    5982:	ff 1f       	adc	r31, r31
    5984:	88 1f       	adc	r24, r24
    5986:	8b bf       	out	0x3b, r24	; 59
    5988:	07 90       	elpm	r0, Z+
    598a:	f6 91       	elpm	r31, Z
    598c:	e0 2d       	mov	r30, r0
    598e:	19 94       	eijmp

00005990 <malloc>:
    5990:	0f 93       	push	r16
    5992:	1f 93       	push	r17
    5994:	cf 93       	push	r28
    5996:	df 93       	push	r29
    5998:	82 30       	cpi	r24, 0x02	; 2
    599a:	91 05       	cpc	r25, r1
    599c:	10 f4       	brcc	.+4      	; 0x59a2 <malloc+0x12>
    599e:	82 e0       	ldi	r24, 0x02	; 2
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	e0 91 c0 12 	lds	r30, 0x12C0	; 0x8012c0 <__flp>
    59a6:	f0 91 c1 12 	lds	r31, 0x12C1	; 0x8012c1 <__flp+0x1>
    59aa:	20 e0       	ldi	r18, 0x00	; 0
    59ac:	30 e0       	ldi	r19, 0x00	; 0
    59ae:	a0 e0       	ldi	r26, 0x00	; 0
    59b0:	b0 e0       	ldi	r27, 0x00	; 0
    59b2:	30 97       	sbiw	r30, 0x00	; 0
    59b4:	19 f1       	breq	.+70     	; 0x59fc <malloc+0x6c>
    59b6:	40 81       	ld	r20, Z
    59b8:	51 81       	ldd	r21, Z+1	; 0x01
    59ba:	02 81       	ldd	r16, Z+2	; 0x02
    59bc:	13 81       	ldd	r17, Z+3	; 0x03
    59be:	48 17       	cp	r20, r24
    59c0:	59 07       	cpc	r21, r25
    59c2:	c8 f0       	brcs	.+50     	; 0x59f6 <malloc+0x66>
    59c4:	84 17       	cp	r24, r20
    59c6:	95 07       	cpc	r25, r21
    59c8:	69 f4       	brne	.+26     	; 0x59e4 <malloc+0x54>
    59ca:	10 97       	sbiw	r26, 0x00	; 0
    59cc:	31 f0       	breq	.+12     	; 0x59da <malloc+0x4a>
    59ce:	12 96       	adiw	r26, 0x02	; 2
    59d0:	0c 93       	st	X, r16
    59d2:	12 97       	sbiw	r26, 0x02	; 2
    59d4:	13 96       	adiw	r26, 0x03	; 3
    59d6:	1c 93       	st	X, r17
    59d8:	27 c0       	rjmp	.+78     	; 0x5a28 <malloc+0x98>
    59da:	00 93 c0 12 	sts	0x12C0, r16	; 0x8012c0 <__flp>
    59de:	10 93 c1 12 	sts	0x12C1, r17	; 0x8012c1 <__flp+0x1>
    59e2:	22 c0       	rjmp	.+68     	; 0x5a28 <malloc+0x98>
    59e4:	21 15       	cp	r18, r1
    59e6:	31 05       	cpc	r19, r1
    59e8:	19 f0       	breq	.+6      	; 0x59f0 <malloc+0x60>
    59ea:	42 17       	cp	r20, r18
    59ec:	53 07       	cpc	r21, r19
    59ee:	18 f4       	brcc	.+6      	; 0x59f6 <malloc+0x66>
    59f0:	9a 01       	movw	r18, r20
    59f2:	bd 01       	movw	r22, r26
    59f4:	ef 01       	movw	r28, r30
    59f6:	df 01       	movw	r26, r30
    59f8:	f8 01       	movw	r30, r16
    59fa:	db cf       	rjmp	.-74     	; 0x59b2 <malloc+0x22>
    59fc:	21 15       	cp	r18, r1
    59fe:	31 05       	cpc	r19, r1
    5a00:	f9 f0       	breq	.+62     	; 0x5a40 <malloc+0xb0>
    5a02:	28 1b       	sub	r18, r24
    5a04:	39 0b       	sbc	r19, r25
    5a06:	24 30       	cpi	r18, 0x04	; 4
    5a08:	31 05       	cpc	r19, r1
    5a0a:	80 f4       	brcc	.+32     	; 0x5a2c <malloc+0x9c>
    5a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a10:	61 15       	cp	r22, r1
    5a12:	71 05       	cpc	r23, r1
    5a14:	21 f0       	breq	.+8      	; 0x5a1e <malloc+0x8e>
    5a16:	fb 01       	movw	r30, r22
    5a18:	93 83       	std	Z+3, r25	; 0x03
    5a1a:	82 83       	std	Z+2, r24	; 0x02
    5a1c:	04 c0       	rjmp	.+8      	; 0x5a26 <malloc+0x96>
    5a1e:	90 93 c1 12 	sts	0x12C1, r25	; 0x8012c1 <__flp+0x1>
    5a22:	80 93 c0 12 	sts	0x12C0, r24	; 0x8012c0 <__flp>
    5a26:	fe 01       	movw	r30, r28
    5a28:	32 96       	adiw	r30, 0x02	; 2
    5a2a:	44 c0       	rjmp	.+136    	; 0x5ab4 <malloc+0x124>
    5a2c:	fe 01       	movw	r30, r28
    5a2e:	e2 0f       	add	r30, r18
    5a30:	f3 1f       	adc	r31, r19
    5a32:	81 93       	st	Z+, r24
    5a34:	91 93       	st	Z+, r25
    5a36:	22 50       	subi	r18, 0x02	; 2
    5a38:	31 09       	sbc	r19, r1
    5a3a:	39 83       	std	Y+1, r19	; 0x01
    5a3c:	28 83       	st	Y, r18
    5a3e:	3a c0       	rjmp	.+116    	; 0x5ab4 <malloc+0x124>
    5a40:	20 91 be 12 	lds	r18, 0x12BE	; 0x8012be <__brkval>
    5a44:	30 91 bf 12 	lds	r19, 0x12BF	; 0x8012bf <__brkval+0x1>
    5a48:	23 2b       	or	r18, r19
    5a4a:	41 f4       	brne	.+16     	; 0x5a5c <malloc+0xcc>
    5a4c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5a50:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5a54:	30 93 bf 12 	sts	0x12BF, r19	; 0x8012bf <__brkval+0x1>
    5a58:	20 93 be 12 	sts	0x12BE, r18	; 0x8012be <__brkval>
    5a5c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5a60:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5a64:	21 15       	cp	r18, r1
    5a66:	31 05       	cpc	r19, r1
    5a68:	41 f4       	brne	.+16     	; 0x5a7a <malloc+0xea>
    5a6a:	2d b7       	in	r18, 0x3d	; 61
    5a6c:	3e b7       	in	r19, 0x3e	; 62
    5a6e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5a72:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5a76:	24 1b       	sub	r18, r20
    5a78:	35 0b       	sbc	r19, r21
    5a7a:	e0 91 be 12 	lds	r30, 0x12BE	; 0x8012be <__brkval>
    5a7e:	f0 91 bf 12 	lds	r31, 0x12BF	; 0x8012bf <__brkval+0x1>
    5a82:	e2 17       	cp	r30, r18
    5a84:	f3 07       	cpc	r31, r19
    5a86:	a0 f4       	brcc	.+40     	; 0x5ab0 <malloc+0x120>
    5a88:	2e 1b       	sub	r18, r30
    5a8a:	3f 0b       	sbc	r19, r31
    5a8c:	28 17       	cp	r18, r24
    5a8e:	39 07       	cpc	r19, r25
    5a90:	78 f0       	brcs	.+30     	; 0x5ab0 <malloc+0x120>
    5a92:	ac 01       	movw	r20, r24
    5a94:	4e 5f       	subi	r20, 0xFE	; 254
    5a96:	5f 4f       	sbci	r21, 0xFF	; 255
    5a98:	24 17       	cp	r18, r20
    5a9a:	35 07       	cpc	r19, r21
    5a9c:	48 f0       	brcs	.+18     	; 0x5ab0 <malloc+0x120>
    5a9e:	4e 0f       	add	r20, r30
    5aa0:	5f 1f       	adc	r21, r31
    5aa2:	50 93 bf 12 	sts	0x12BF, r21	; 0x8012bf <__brkval+0x1>
    5aa6:	40 93 be 12 	sts	0x12BE, r20	; 0x8012be <__brkval>
    5aaa:	81 93       	st	Z+, r24
    5aac:	91 93       	st	Z+, r25
    5aae:	02 c0       	rjmp	.+4      	; 0x5ab4 <malloc+0x124>
    5ab0:	e0 e0       	ldi	r30, 0x00	; 0
    5ab2:	f0 e0       	ldi	r31, 0x00	; 0
    5ab4:	cf 01       	movw	r24, r30
    5ab6:	df 91       	pop	r29
    5ab8:	cf 91       	pop	r28
    5aba:	1f 91       	pop	r17
    5abc:	0f 91       	pop	r16
    5abe:	08 95       	ret

00005ac0 <free>:
    5ac0:	cf 93       	push	r28
    5ac2:	df 93       	push	r29
    5ac4:	00 97       	sbiw	r24, 0x00	; 0
    5ac6:	09 f4       	brne	.+2      	; 0x5aca <free+0xa>
    5ac8:	81 c0       	rjmp	.+258    	; 0x5bcc <free+0x10c>
    5aca:	fc 01       	movw	r30, r24
    5acc:	32 97       	sbiw	r30, 0x02	; 2
    5ace:	13 82       	std	Z+3, r1	; 0x03
    5ad0:	12 82       	std	Z+2, r1	; 0x02
    5ad2:	a0 91 c0 12 	lds	r26, 0x12C0	; 0x8012c0 <__flp>
    5ad6:	b0 91 c1 12 	lds	r27, 0x12C1	; 0x8012c1 <__flp+0x1>
    5ada:	10 97       	sbiw	r26, 0x00	; 0
    5adc:	81 f4       	brne	.+32     	; 0x5afe <free+0x3e>
    5ade:	20 81       	ld	r18, Z
    5ae0:	31 81       	ldd	r19, Z+1	; 0x01
    5ae2:	82 0f       	add	r24, r18
    5ae4:	93 1f       	adc	r25, r19
    5ae6:	20 91 be 12 	lds	r18, 0x12BE	; 0x8012be <__brkval>
    5aea:	30 91 bf 12 	lds	r19, 0x12BF	; 0x8012bf <__brkval+0x1>
    5aee:	28 17       	cp	r18, r24
    5af0:	39 07       	cpc	r19, r25
    5af2:	51 f5       	brne	.+84     	; 0x5b48 <free+0x88>
    5af4:	f0 93 bf 12 	sts	0x12BF, r31	; 0x8012bf <__brkval+0x1>
    5af8:	e0 93 be 12 	sts	0x12BE, r30	; 0x8012be <__brkval>
    5afc:	67 c0       	rjmp	.+206    	; 0x5bcc <free+0x10c>
    5afe:	ed 01       	movw	r28, r26
    5b00:	20 e0       	ldi	r18, 0x00	; 0
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	ce 17       	cp	r28, r30
    5b06:	df 07       	cpc	r29, r31
    5b08:	40 f4       	brcc	.+16     	; 0x5b1a <free+0x5a>
    5b0a:	4a 81       	ldd	r20, Y+2	; 0x02
    5b0c:	5b 81       	ldd	r21, Y+3	; 0x03
    5b0e:	9e 01       	movw	r18, r28
    5b10:	41 15       	cp	r20, r1
    5b12:	51 05       	cpc	r21, r1
    5b14:	f1 f0       	breq	.+60     	; 0x5b52 <free+0x92>
    5b16:	ea 01       	movw	r28, r20
    5b18:	f5 cf       	rjmp	.-22     	; 0x5b04 <free+0x44>
    5b1a:	d3 83       	std	Z+3, r29	; 0x03
    5b1c:	c2 83       	std	Z+2, r28	; 0x02
    5b1e:	40 81       	ld	r20, Z
    5b20:	51 81       	ldd	r21, Z+1	; 0x01
    5b22:	84 0f       	add	r24, r20
    5b24:	95 1f       	adc	r25, r21
    5b26:	c8 17       	cp	r28, r24
    5b28:	d9 07       	cpc	r29, r25
    5b2a:	59 f4       	brne	.+22     	; 0x5b42 <free+0x82>
    5b2c:	88 81       	ld	r24, Y
    5b2e:	99 81       	ldd	r25, Y+1	; 0x01
    5b30:	84 0f       	add	r24, r20
    5b32:	95 1f       	adc	r25, r21
    5b34:	02 96       	adiw	r24, 0x02	; 2
    5b36:	91 83       	std	Z+1, r25	; 0x01
    5b38:	80 83       	st	Z, r24
    5b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b3e:	93 83       	std	Z+3, r25	; 0x03
    5b40:	82 83       	std	Z+2, r24	; 0x02
    5b42:	21 15       	cp	r18, r1
    5b44:	31 05       	cpc	r19, r1
    5b46:	29 f4       	brne	.+10     	; 0x5b52 <free+0x92>
    5b48:	f0 93 c1 12 	sts	0x12C1, r31	; 0x8012c1 <__flp+0x1>
    5b4c:	e0 93 c0 12 	sts	0x12C0, r30	; 0x8012c0 <__flp>
    5b50:	3d c0       	rjmp	.+122    	; 0x5bcc <free+0x10c>
    5b52:	e9 01       	movw	r28, r18
    5b54:	fb 83       	std	Y+3, r31	; 0x03
    5b56:	ea 83       	std	Y+2, r30	; 0x02
    5b58:	49 91       	ld	r20, Y+
    5b5a:	59 91       	ld	r21, Y+
    5b5c:	c4 0f       	add	r28, r20
    5b5e:	d5 1f       	adc	r29, r21
    5b60:	ec 17       	cp	r30, r28
    5b62:	fd 07       	cpc	r31, r29
    5b64:	61 f4       	brne	.+24     	; 0x5b7e <free+0xbe>
    5b66:	80 81       	ld	r24, Z
    5b68:	91 81       	ldd	r25, Z+1	; 0x01
    5b6a:	84 0f       	add	r24, r20
    5b6c:	95 1f       	adc	r25, r21
    5b6e:	02 96       	adiw	r24, 0x02	; 2
    5b70:	e9 01       	movw	r28, r18
    5b72:	99 83       	std	Y+1, r25	; 0x01
    5b74:	88 83       	st	Y, r24
    5b76:	82 81       	ldd	r24, Z+2	; 0x02
    5b78:	93 81       	ldd	r25, Z+3	; 0x03
    5b7a:	9b 83       	std	Y+3, r25	; 0x03
    5b7c:	8a 83       	std	Y+2, r24	; 0x02
    5b7e:	e0 e0       	ldi	r30, 0x00	; 0
    5b80:	f0 e0       	ldi	r31, 0x00	; 0
    5b82:	12 96       	adiw	r26, 0x02	; 2
    5b84:	8d 91       	ld	r24, X+
    5b86:	9c 91       	ld	r25, X
    5b88:	13 97       	sbiw	r26, 0x03	; 3
    5b8a:	00 97       	sbiw	r24, 0x00	; 0
    5b8c:	19 f0       	breq	.+6      	; 0x5b94 <free+0xd4>
    5b8e:	fd 01       	movw	r30, r26
    5b90:	dc 01       	movw	r26, r24
    5b92:	f7 cf       	rjmp	.-18     	; 0x5b82 <free+0xc2>
    5b94:	8d 91       	ld	r24, X+
    5b96:	9c 91       	ld	r25, X
    5b98:	11 97       	sbiw	r26, 0x01	; 1
    5b9a:	9d 01       	movw	r18, r26
    5b9c:	2e 5f       	subi	r18, 0xFE	; 254
    5b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5ba0:	82 0f       	add	r24, r18
    5ba2:	93 1f       	adc	r25, r19
    5ba4:	20 91 be 12 	lds	r18, 0x12BE	; 0x8012be <__brkval>
    5ba8:	30 91 bf 12 	lds	r19, 0x12BF	; 0x8012bf <__brkval+0x1>
    5bac:	28 17       	cp	r18, r24
    5bae:	39 07       	cpc	r19, r25
    5bb0:	69 f4       	brne	.+26     	; 0x5bcc <free+0x10c>
    5bb2:	30 97       	sbiw	r30, 0x00	; 0
    5bb4:	29 f4       	brne	.+10     	; 0x5bc0 <free+0x100>
    5bb6:	10 92 c1 12 	sts	0x12C1, r1	; 0x8012c1 <__flp+0x1>
    5bba:	10 92 c0 12 	sts	0x12C0, r1	; 0x8012c0 <__flp>
    5bbe:	02 c0       	rjmp	.+4      	; 0x5bc4 <free+0x104>
    5bc0:	13 82       	std	Z+3, r1	; 0x03
    5bc2:	12 82       	std	Z+2, r1	; 0x02
    5bc4:	b0 93 bf 12 	sts	0x12BF, r27	; 0x8012bf <__brkval+0x1>
    5bc8:	a0 93 be 12 	sts	0x12BE, r26	; 0x8012be <__brkval>
    5bcc:	df 91       	pop	r29
    5bce:	cf 91       	pop	r28
    5bd0:	08 95       	ret

00005bd2 <abort>:
    5bd2:	81 e0       	ldi	r24, 0x01	; 1
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	f8 94       	cli
    5bd8:	59 c2       	rjmp	.+1202   	; 0x608c <_exit>

00005bda <__ftoa_engine>:
    5bda:	28 30       	cpi	r18, 0x08	; 8
    5bdc:	08 f0       	brcs	.+2      	; 0x5be0 <__ftoa_engine+0x6>
    5bde:	27 e0       	ldi	r18, 0x07	; 7
    5be0:	33 27       	eor	r19, r19
    5be2:	da 01       	movw	r26, r20
    5be4:	99 0f       	add	r25, r25
    5be6:	31 1d       	adc	r19, r1
    5be8:	87 fd       	sbrc	r24, 7
    5bea:	91 60       	ori	r25, 0x01	; 1
    5bec:	00 96       	adiw	r24, 0x00	; 0
    5bee:	61 05       	cpc	r22, r1
    5bf0:	71 05       	cpc	r23, r1
    5bf2:	39 f4       	brne	.+14     	; 0x5c02 <__ftoa_engine+0x28>
    5bf4:	32 60       	ori	r19, 0x02	; 2
    5bf6:	2e 5f       	subi	r18, 0xFE	; 254
    5bf8:	3d 93       	st	X+, r19
    5bfa:	30 e3       	ldi	r19, 0x30	; 48
    5bfc:	2a 95       	dec	r18
    5bfe:	e1 f7       	brne	.-8      	; 0x5bf8 <__ftoa_engine+0x1e>
    5c00:	08 95       	ret
    5c02:	9f 3f       	cpi	r25, 0xFF	; 255
    5c04:	30 f0       	brcs	.+12     	; 0x5c12 <__ftoa_engine+0x38>
    5c06:	80 38       	cpi	r24, 0x80	; 128
    5c08:	71 05       	cpc	r23, r1
    5c0a:	61 05       	cpc	r22, r1
    5c0c:	09 f0       	breq	.+2      	; 0x5c10 <__ftoa_engine+0x36>
    5c0e:	3c 5f       	subi	r19, 0xFC	; 252
    5c10:	3c 5f       	subi	r19, 0xFC	; 252
    5c12:	3d 93       	st	X+, r19
    5c14:	91 30       	cpi	r25, 0x01	; 1
    5c16:	08 f0       	brcs	.+2      	; 0x5c1a <__ftoa_engine+0x40>
    5c18:	80 68       	ori	r24, 0x80	; 128
    5c1a:	91 1d       	adc	r25, r1
    5c1c:	df 93       	push	r29
    5c1e:	cf 93       	push	r28
    5c20:	1f 93       	push	r17
    5c22:	0f 93       	push	r16
    5c24:	ff 92       	push	r15
    5c26:	ef 92       	push	r14
    5c28:	19 2f       	mov	r17, r25
    5c2a:	98 7f       	andi	r25, 0xF8	; 248
    5c2c:	96 95       	lsr	r25
    5c2e:	e9 2f       	mov	r30, r25
    5c30:	96 95       	lsr	r25
    5c32:	96 95       	lsr	r25
    5c34:	e9 0f       	add	r30, r25
    5c36:	ff 27       	eor	r31, r31
    5c38:	e4 50       	subi	r30, 0x04	; 4
    5c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c3c:	99 27       	eor	r25, r25
    5c3e:	33 27       	eor	r19, r19
    5c40:	ee 24       	eor	r14, r14
    5c42:	ff 24       	eor	r15, r15
    5c44:	a7 01       	movw	r20, r14
    5c46:	e7 01       	movw	r28, r14
    5c48:	05 90       	lpm	r0, Z+
    5c4a:	08 94       	sec
    5c4c:	07 94       	ror	r0
    5c4e:	28 f4       	brcc	.+10     	; 0x5c5a <__ftoa_engine+0x80>
    5c50:	36 0f       	add	r19, r22
    5c52:	e7 1e       	adc	r14, r23
    5c54:	f8 1e       	adc	r15, r24
    5c56:	49 1f       	adc	r20, r25
    5c58:	51 1d       	adc	r21, r1
    5c5a:	66 0f       	add	r22, r22
    5c5c:	77 1f       	adc	r23, r23
    5c5e:	88 1f       	adc	r24, r24
    5c60:	99 1f       	adc	r25, r25
    5c62:	06 94       	lsr	r0
    5c64:	a1 f7       	brne	.-24     	; 0x5c4e <__ftoa_engine+0x74>
    5c66:	05 90       	lpm	r0, Z+
    5c68:	07 94       	ror	r0
    5c6a:	28 f4       	brcc	.+10     	; 0x5c76 <__ftoa_engine+0x9c>
    5c6c:	e7 0e       	add	r14, r23
    5c6e:	f8 1e       	adc	r15, r24
    5c70:	49 1f       	adc	r20, r25
    5c72:	56 1f       	adc	r21, r22
    5c74:	c1 1d       	adc	r28, r1
    5c76:	77 0f       	add	r23, r23
    5c78:	88 1f       	adc	r24, r24
    5c7a:	99 1f       	adc	r25, r25
    5c7c:	66 1f       	adc	r22, r22
    5c7e:	06 94       	lsr	r0
    5c80:	a1 f7       	brne	.-24     	; 0x5c6a <__ftoa_engine+0x90>
    5c82:	05 90       	lpm	r0, Z+
    5c84:	07 94       	ror	r0
    5c86:	28 f4       	brcc	.+10     	; 0x5c92 <__ftoa_engine+0xb8>
    5c88:	f8 0e       	add	r15, r24
    5c8a:	49 1f       	adc	r20, r25
    5c8c:	56 1f       	adc	r21, r22
    5c8e:	c7 1f       	adc	r28, r23
    5c90:	d1 1d       	adc	r29, r1
    5c92:	88 0f       	add	r24, r24
    5c94:	99 1f       	adc	r25, r25
    5c96:	66 1f       	adc	r22, r22
    5c98:	77 1f       	adc	r23, r23
    5c9a:	06 94       	lsr	r0
    5c9c:	a1 f7       	brne	.-24     	; 0x5c86 <__ftoa_engine+0xac>
    5c9e:	05 90       	lpm	r0, Z+
    5ca0:	07 94       	ror	r0
    5ca2:	20 f4       	brcc	.+8      	; 0x5cac <__ftoa_engine+0xd2>
    5ca4:	49 0f       	add	r20, r25
    5ca6:	56 1f       	adc	r21, r22
    5ca8:	c7 1f       	adc	r28, r23
    5caa:	d8 1f       	adc	r29, r24
    5cac:	99 0f       	add	r25, r25
    5cae:	66 1f       	adc	r22, r22
    5cb0:	77 1f       	adc	r23, r23
    5cb2:	88 1f       	adc	r24, r24
    5cb4:	06 94       	lsr	r0
    5cb6:	a9 f7       	brne	.-22     	; 0x5ca2 <__ftoa_engine+0xc8>
    5cb8:	84 91       	lpm	r24, Z
    5cba:	10 95       	com	r17
    5cbc:	17 70       	andi	r17, 0x07	; 7
    5cbe:	41 f0       	breq	.+16     	; 0x5cd0 <__ftoa_engine+0xf6>
    5cc0:	d6 95       	lsr	r29
    5cc2:	c7 95       	ror	r28
    5cc4:	57 95       	ror	r21
    5cc6:	47 95       	ror	r20
    5cc8:	f7 94       	ror	r15
    5cca:	e7 94       	ror	r14
    5ccc:	1a 95       	dec	r17
    5cce:	c1 f7       	brne	.-16     	; 0x5cc0 <__ftoa_engine+0xe6>
    5cd0:	e2 ea       	ldi	r30, 0xA2	; 162
    5cd2:	f1 e0       	ldi	r31, 0x01	; 1
    5cd4:	68 94       	set
    5cd6:	15 90       	lpm	r1, Z+
    5cd8:	15 91       	lpm	r17, Z+
    5cda:	35 91       	lpm	r19, Z+
    5cdc:	65 91       	lpm	r22, Z+
    5cde:	95 91       	lpm	r25, Z+
    5ce0:	05 90       	lpm	r0, Z+
    5ce2:	7f e2       	ldi	r23, 0x2F	; 47
    5ce4:	73 95       	inc	r23
    5ce6:	e1 18       	sub	r14, r1
    5ce8:	f1 0a       	sbc	r15, r17
    5cea:	43 0b       	sbc	r20, r19
    5cec:	56 0b       	sbc	r21, r22
    5cee:	c9 0b       	sbc	r28, r25
    5cf0:	d0 09       	sbc	r29, r0
    5cf2:	c0 f7       	brcc	.-16     	; 0x5ce4 <__ftoa_engine+0x10a>
    5cf4:	e1 0c       	add	r14, r1
    5cf6:	f1 1e       	adc	r15, r17
    5cf8:	43 1f       	adc	r20, r19
    5cfa:	56 1f       	adc	r21, r22
    5cfc:	c9 1f       	adc	r28, r25
    5cfe:	d0 1d       	adc	r29, r0
    5d00:	7e f4       	brtc	.+30     	; 0x5d20 <__ftoa_engine+0x146>
    5d02:	70 33       	cpi	r23, 0x30	; 48
    5d04:	11 f4       	brne	.+4      	; 0x5d0a <__ftoa_engine+0x130>
    5d06:	8a 95       	dec	r24
    5d08:	e6 cf       	rjmp	.-52     	; 0x5cd6 <__ftoa_engine+0xfc>
    5d0a:	e8 94       	clt
    5d0c:	01 50       	subi	r16, 0x01	; 1
    5d0e:	30 f0       	brcs	.+12     	; 0x5d1c <__ftoa_engine+0x142>
    5d10:	08 0f       	add	r16, r24
    5d12:	0a f4       	brpl	.+2      	; 0x5d16 <__ftoa_engine+0x13c>
    5d14:	00 27       	eor	r16, r16
    5d16:	02 17       	cp	r16, r18
    5d18:	08 f4       	brcc	.+2      	; 0x5d1c <__ftoa_engine+0x142>
    5d1a:	20 2f       	mov	r18, r16
    5d1c:	23 95       	inc	r18
    5d1e:	02 2f       	mov	r16, r18
    5d20:	7a 33       	cpi	r23, 0x3A	; 58
    5d22:	28 f0       	brcs	.+10     	; 0x5d2e <__ftoa_engine+0x154>
    5d24:	79 e3       	ldi	r23, 0x39	; 57
    5d26:	7d 93       	st	X+, r23
    5d28:	2a 95       	dec	r18
    5d2a:	e9 f7       	brne	.-6      	; 0x5d26 <__ftoa_engine+0x14c>
    5d2c:	10 c0       	rjmp	.+32     	; 0x5d4e <__ftoa_engine+0x174>
    5d2e:	7d 93       	st	X+, r23
    5d30:	2a 95       	dec	r18
    5d32:	89 f6       	brne	.-94     	; 0x5cd6 <__ftoa_engine+0xfc>
    5d34:	06 94       	lsr	r0
    5d36:	97 95       	ror	r25
    5d38:	67 95       	ror	r22
    5d3a:	37 95       	ror	r19
    5d3c:	17 95       	ror	r17
    5d3e:	17 94       	ror	r1
    5d40:	e1 18       	sub	r14, r1
    5d42:	f1 0a       	sbc	r15, r17
    5d44:	43 0b       	sbc	r20, r19
    5d46:	56 0b       	sbc	r21, r22
    5d48:	c9 0b       	sbc	r28, r25
    5d4a:	d0 09       	sbc	r29, r0
    5d4c:	98 f0       	brcs	.+38     	; 0x5d74 <__ftoa_engine+0x19a>
    5d4e:	23 95       	inc	r18
    5d50:	7e 91       	ld	r23, -X
    5d52:	73 95       	inc	r23
    5d54:	7a 33       	cpi	r23, 0x3A	; 58
    5d56:	08 f0       	brcs	.+2      	; 0x5d5a <__ftoa_engine+0x180>
    5d58:	70 e3       	ldi	r23, 0x30	; 48
    5d5a:	7c 93       	st	X, r23
    5d5c:	20 13       	cpse	r18, r16
    5d5e:	b8 f7       	brcc	.-18     	; 0x5d4e <__ftoa_engine+0x174>
    5d60:	7e 91       	ld	r23, -X
    5d62:	70 61       	ori	r23, 0x10	; 16
    5d64:	7d 93       	st	X+, r23
    5d66:	30 f0       	brcs	.+12     	; 0x5d74 <__ftoa_engine+0x19a>
    5d68:	83 95       	inc	r24
    5d6a:	71 e3       	ldi	r23, 0x31	; 49
    5d6c:	7d 93       	st	X+, r23
    5d6e:	70 e3       	ldi	r23, 0x30	; 48
    5d70:	2a 95       	dec	r18
    5d72:	e1 f7       	brne	.-8      	; 0x5d6c <__ftoa_engine+0x192>
    5d74:	11 24       	eor	r1, r1
    5d76:	ef 90       	pop	r14
    5d78:	ff 90       	pop	r15
    5d7a:	0f 91       	pop	r16
    5d7c:	1f 91       	pop	r17
    5d7e:	cf 91       	pop	r28
    5d80:	df 91       	pop	r29
    5d82:	99 27       	eor	r25, r25
    5d84:	87 fd       	sbrc	r24, 7
    5d86:	90 95       	com	r25
    5d88:	08 95       	ret

00005d8a <strnlen_P>:
    5d8a:	fc 01       	movw	r30, r24
    5d8c:	05 90       	lpm	r0, Z+
    5d8e:	61 50       	subi	r22, 0x01	; 1
    5d90:	70 40       	sbci	r23, 0x00	; 0
    5d92:	01 10       	cpse	r0, r1
    5d94:	d8 f7       	brcc	.-10     	; 0x5d8c <strnlen_P+0x2>
    5d96:	80 95       	com	r24
    5d98:	90 95       	com	r25
    5d9a:	8e 0f       	add	r24, r30
    5d9c:	9f 1f       	adc	r25, r31
    5d9e:	08 95       	ret

00005da0 <memcpy>:
    5da0:	fb 01       	movw	r30, r22
    5da2:	dc 01       	movw	r26, r24
    5da4:	02 c0       	rjmp	.+4      	; 0x5daa <memcpy+0xa>
    5da6:	01 90       	ld	r0, Z+
    5da8:	0d 92       	st	X+, r0
    5daa:	41 50       	subi	r20, 0x01	; 1
    5dac:	50 40       	sbci	r21, 0x00	; 0
    5dae:	d8 f7       	brcc	.-10     	; 0x5da6 <memcpy+0x6>
    5db0:	08 95       	ret

00005db2 <memset>:
    5db2:	dc 01       	movw	r26, r24
    5db4:	01 c0       	rjmp	.+2      	; 0x5db8 <memset+0x6>
    5db6:	6d 93       	st	X+, r22
    5db8:	41 50       	subi	r20, 0x01	; 1
    5dba:	50 40       	sbci	r21, 0x00	; 0
    5dbc:	e0 f7       	brcc	.-8      	; 0x5db6 <memset+0x4>
    5dbe:	08 95       	ret

00005dc0 <strcasestr>:
    5dc0:	fb 01       	movw	r30, r22
    5dc2:	51 91       	ld	r21, Z+
    5dc4:	55 23       	and	r21, r21
    5dc6:	b1 f0       	breq	.+44     	; 0x5df4 <strcasestr+0x34>
    5dc8:	bf 01       	movw	r22, r30
    5dca:	dc 01       	movw	r26, r24
    5dcc:	05 2e       	mov	r0, r21
    5dce:	4d 91       	ld	r20, X+
    5dd0:	44 23       	and	r20, r20
    5dd2:	69 f0       	breq	.+26     	; 0x5dee <strcasestr+0x2e>
    5dd4:	10 d0       	rcall	.+32     	; 0x5df6 <strcasestr+0x36>
    5dd6:	d9 f7       	brne	.-10     	; 0x5dce <strcasestr+0xe>
    5dd8:	cd 01       	movw	r24, r26
    5dda:	01 90       	ld	r0, Z+
    5ddc:	00 20       	and	r0, r0
    5dde:	49 f0       	breq	.+18     	; 0x5df2 <strcasestr+0x32>
    5de0:	4d 91       	ld	r20, X+
    5de2:	41 11       	cpse	r20, r1
    5de4:	08 d0       	rcall	.+16     	; 0x5df6 <strcasestr+0x36>
    5de6:	c9 f3       	breq	.-14     	; 0x5dda <strcasestr+0x1a>
    5de8:	fb 01       	movw	r30, r22
    5dea:	41 11       	cpse	r20, r1
    5dec:	ee cf       	rjmp	.-36     	; 0x5dca <strcasestr+0xa>
    5dee:	81 e0       	ldi	r24, 0x01	; 1
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	01 97       	sbiw	r24, 0x01	; 1
    5df4:	08 95       	ret
    5df6:	40 25       	eor	r20, r0
    5df8:	39 f0       	breq	.+14     	; 0x5e08 <strcasestr+0x48>
    5dfa:	40 32       	cpi	r20, 0x20	; 32
    5dfc:	29 f4       	brne	.+10     	; 0x5e08 <strcasestr+0x48>
    5dfe:	40 29       	or	r20, r0
    5e00:	4b 57       	subi	r20, 0x7B	; 123
    5e02:	46 5e       	subi	r20, 0xE6	; 230
    5e04:	08 f0       	brcs	.+2      	; 0x5e08 <strcasestr+0x48>
    5e06:	18 94       	sez
    5e08:	08 95       	ret

00005e0a <strcat>:
    5e0a:	fb 01       	movw	r30, r22
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	0d 90       	ld	r0, X+
    5e10:	00 20       	and	r0, r0
    5e12:	e9 f7       	brne	.-6      	; 0x5e0e <strcat+0x4>
    5e14:	11 97       	sbiw	r26, 0x01	; 1
    5e16:	01 90       	ld	r0, Z+
    5e18:	0d 92       	st	X+, r0
    5e1a:	00 20       	and	r0, r0
    5e1c:	e1 f7       	brne	.-8      	; 0x5e16 <strcat+0xc>
    5e1e:	08 95       	ret

00005e20 <strcpy>:
    5e20:	fb 01       	movw	r30, r22
    5e22:	dc 01       	movw	r26, r24
    5e24:	01 90       	ld	r0, Z+
    5e26:	0d 92       	st	X+, r0
    5e28:	00 20       	and	r0, r0
    5e2a:	e1 f7       	brne	.-8      	; 0x5e24 <strcpy+0x4>
    5e2c:	08 95       	ret

00005e2e <strncasecmp>:
    5e2e:	fb 01       	movw	r30, r22
    5e30:	dc 01       	movw	r26, r24
    5e32:	41 50       	subi	r20, 0x01	; 1
    5e34:	50 40       	sbci	r21, 0x00	; 0
    5e36:	88 f0       	brcs	.+34     	; 0x5e5a <strncasecmp+0x2c>
    5e38:	8d 91       	ld	r24, X+
    5e3a:	81 34       	cpi	r24, 0x41	; 65
    5e3c:	1c f0       	brlt	.+6      	; 0x5e44 <strncasecmp+0x16>
    5e3e:	8b 35       	cpi	r24, 0x5B	; 91
    5e40:	0c f4       	brge	.+2      	; 0x5e44 <strncasecmp+0x16>
    5e42:	80 5e       	subi	r24, 0xE0	; 224
    5e44:	61 91       	ld	r22, Z+
    5e46:	61 34       	cpi	r22, 0x41	; 65
    5e48:	1c f0       	brlt	.+6      	; 0x5e50 <strncasecmp+0x22>
    5e4a:	6b 35       	cpi	r22, 0x5B	; 91
    5e4c:	0c f4       	brge	.+2      	; 0x5e50 <strncasecmp+0x22>
    5e4e:	60 5e       	subi	r22, 0xE0	; 224
    5e50:	86 1b       	sub	r24, r22
    5e52:	61 11       	cpse	r22, r1
    5e54:	71 f3       	breq	.-36     	; 0x5e32 <strncasecmp+0x4>
    5e56:	99 0b       	sbc	r25, r25
    5e58:	08 95       	ret
    5e5a:	88 1b       	sub	r24, r24
    5e5c:	fc cf       	rjmp	.-8      	; 0x5e56 <strncasecmp+0x28>

00005e5e <strnlen>:
    5e5e:	fc 01       	movw	r30, r24
    5e60:	61 50       	subi	r22, 0x01	; 1
    5e62:	70 40       	sbci	r23, 0x00	; 0
    5e64:	01 90       	ld	r0, Z+
    5e66:	01 10       	cpse	r0, r1
    5e68:	d8 f7       	brcc	.-10     	; 0x5e60 <strnlen+0x2>
    5e6a:	80 95       	com	r24
    5e6c:	90 95       	com	r25
    5e6e:	8e 0f       	add	r24, r30
    5e70:	9f 1f       	adc	r25, r31
    5e72:	08 95       	ret

00005e74 <fputc>:
    5e74:	0f 93       	push	r16
    5e76:	1f 93       	push	r17
    5e78:	cf 93       	push	r28
    5e7a:	df 93       	push	r29
    5e7c:	fb 01       	movw	r30, r22
    5e7e:	23 81       	ldd	r18, Z+3	; 0x03
    5e80:	21 fd       	sbrc	r18, 1
    5e82:	03 c0       	rjmp	.+6      	; 0x5e8a <fputc+0x16>
    5e84:	8f ef       	ldi	r24, 0xFF	; 255
    5e86:	9f ef       	ldi	r25, 0xFF	; 255
    5e88:	2c c0       	rjmp	.+88     	; 0x5ee2 <fputc+0x6e>
    5e8a:	22 ff       	sbrs	r18, 2
    5e8c:	16 c0       	rjmp	.+44     	; 0x5eba <fputc+0x46>
    5e8e:	46 81       	ldd	r20, Z+6	; 0x06
    5e90:	57 81       	ldd	r21, Z+7	; 0x07
    5e92:	24 81       	ldd	r18, Z+4	; 0x04
    5e94:	35 81       	ldd	r19, Z+5	; 0x05
    5e96:	42 17       	cp	r20, r18
    5e98:	53 07       	cpc	r21, r19
    5e9a:	44 f4       	brge	.+16     	; 0x5eac <fputc+0x38>
    5e9c:	a0 81       	ld	r26, Z
    5e9e:	b1 81       	ldd	r27, Z+1	; 0x01
    5ea0:	9d 01       	movw	r18, r26
    5ea2:	2f 5f       	subi	r18, 0xFF	; 255
    5ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea6:	31 83       	std	Z+1, r19	; 0x01
    5ea8:	20 83       	st	Z, r18
    5eaa:	8c 93       	st	X, r24
    5eac:	26 81       	ldd	r18, Z+6	; 0x06
    5eae:	37 81       	ldd	r19, Z+7	; 0x07
    5eb0:	2f 5f       	subi	r18, 0xFF	; 255
    5eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    5eb4:	37 83       	std	Z+7, r19	; 0x07
    5eb6:	26 83       	std	Z+6, r18	; 0x06
    5eb8:	14 c0       	rjmp	.+40     	; 0x5ee2 <fputc+0x6e>
    5eba:	8b 01       	movw	r16, r22
    5ebc:	ec 01       	movw	r28, r24
    5ebe:	fb 01       	movw	r30, r22
    5ec0:	00 84       	ldd	r0, Z+8	; 0x08
    5ec2:	f1 85       	ldd	r31, Z+9	; 0x09
    5ec4:	e0 2d       	mov	r30, r0
    5ec6:	19 95       	eicall
    5ec8:	89 2b       	or	r24, r25
    5eca:	e1 f6       	brne	.-72     	; 0x5e84 <fputc+0x10>
    5ecc:	d8 01       	movw	r26, r16
    5ece:	16 96       	adiw	r26, 0x06	; 6
    5ed0:	8d 91       	ld	r24, X+
    5ed2:	9c 91       	ld	r25, X
    5ed4:	17 97       	sbiw	r26, 0x07	; 7
    5ed6:	01 96       	adiw	r24, 0x01	; 1
    5ed8:	17 96       	adiw	r26, 0x07	; 7
    5eda:	9c 93       	st	X, r25
    5edc:	8e 93       	st	-X, r24
    5ede:	16 97       	sbiw	r26, 0x06	; 6
    5ee0:	ce 01       	movw	r24, r28
    5ee2:	df 91       	pop	r29
    5ee4:	cf 91       	pop	r28
    5ee6:	1f 91       	pop	r17
    5ee8:	0f 91       	pop	r16
    5eea:	08 95       	ret

00005eec <printf>:
    5eec:	cf 93       	push	r28
    5eee:	df 93       	push	r29
    5ef0:	cd b7       	in	r28, 0x3d	; 61
    5ef2:	de b7       	in	r29, 0x3e	; 62
    5ef4:	ae 01       	movw	r20, r28
    5ef6:	4a 5f       	subi	r20, 0xFA	; 250
    5ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    5efa:	fa 01       	movw	r30, r20
    5efc:	61 91       	ld	r22, Z+
    5efe:	71 91       	ld	r23, Z+
    5f00:	af 01       	movw	r20, r30
    5f02:	80 91 c4 12 	lds	r24, 0x12C4	; 0x8012c4 <__iob+0x2>
    5f06:	90 91 c5 12 	lds	r25, 0x12C5	; 0x8012c5 <__iob+0x3>
    5f0a:	46 d8       	rcall	.-3956   	; 0x4f98 <vfprintf>
    5f0c:	df 91       	pop	r29
    5f0e:	cf 91       	pop	r28
    5f10:	08 95       	ret

00005f12 <puts>:
    5f12:	0f 93       	push	r16
    5f14:	1f 93       	push	r17
    5f16:	cf 93       	push	r28
    5f18:	df 93       	push	r29
    5f1a:	e0 91 c4 12 	lds	r30, 0x12C4	; 0x8012c4 <__iob+0x2>
    5f1e:	f0 91 c5 12 	lds	r31, 0x12C5	; 0x8012c5 <__iob+0x3>
    5f22:	23 81       	ldd	r18, Z+3	; 0x03
    5f24:	21 ff       	sbrs	r18, 1
    5f26:	1b c0       	rjmp	.+54     	; 0x5f5e <puts+0x4c>
    5f28:	8c 01       	movw	r16, r24
    5f2a:	d0 e0       	ldi	r29, 0x00	; 0
    5f2c:	c0 e0       	ldi	r28, 0x00	; 0
    5f2e:	f8 01       	movw	r30, r16
    5f30:	81 91       	ld	r24, Z+
    5f32:	8f 01       	movw	r16, r30
    5f34:	60 91 c4 12 	lds	r22, 0x12C4	; 0x8012c4 <__iob+0x2>
    5f38:	70 91 c5 12 	lds	r23, 0x12C5	; 0x8012c5 <__iob+0x3>
    5f3c:	db 01       	movw	r26, r22
    5f3e:	18 96       	adiw	r26, 0x08	; 8
    5f40:	ed 91       	ld	r30, X+
    5f42:	fc 91       	ld	r31, X
    5f44:	19 97       	sbiw	r26, 0x09	; 9
    5f46:	88 23       	and	r24, r24
    5f48:	31 f0       	breq	.+12     	; 0x5f56 <puts+0x44>
    5f4a:	19 95       	eicall
    5f4c:	89 2b       	or	r24, r25
    5f4e:	79 f3       	breq	.-34     	; 0x5f2e <puts+0x1c>
    5f50:	df ef       	ldi	r29, 0xFF	; 255
    5f52:	cf ef       	ldi	r28, 0xFF	; 255
    5f54:	ec cf       	rjmp	.-40     	; 0x5f2e <puts+0x1c>
    5f56:	8a e0       	ldi	r24, 0x0A	; 10
    5f58:	19 95       	eicall
    5f5a:	89 2b       	or	r24, r25
    5f5c:	19 f0       	breq	.+6      	; 0x5f64 <puts+0x52>
    5f5e:	8f ef       	ldi	r24, 0xFF	; 255
    5f60:	9f ef       	ldi	r25, 0xFF	; 255
    5f62:	02 c0       	rjmp	.+4      	; 0x5f68 <puts+0x56>
    5f64:	8d 2f       	mov	r24, r29
    5f66:	9c 2f       	mov	r25, r28
    5f68:	df 91       	pop	r29
    5f6a:	cf 91       	pop	r28
    5f6c:	1f 91       	pop	r17
    5f6e:	0f 91       	pop	r16
    5f70:	08 95       	ret

00005f72 <sprintf>:
    5f72:	0f 93       	push	r16
    5f74:	1f 93       	push	r17
    5f76:	cf 93       	push	r28
    5f78:	df 93       	push	r29
    5f7a:	cd b7       	in	r28, 0x3d	; 61
    5f7c:	de b7       	in	r29, 0x3e	; 62
    5f7e:	2e 97       	sbiw	r28, 0x0e	; 14
    5f80:	0f b6       	in	r0, 0x3f	; 63
    5f82:	f8 94       	cli
    5f84:	de bf       	out	0x3e, r29	; 62
    5f86:	0f be       	out	0x3f, r0	; 63
    5f88:	cd bf       	out	0x3d, r28	; 61
    5f8a:	0e 89       	ldd	r16, Y+22	; 0x16
    5f8c:	1f 89       	ldd	r17, Y+23	; 0x17
    5f8e:	86 e0       	ldi	r24, 0x06	; 6
    5f90:	8c 83       	std	Y+4, r24	; 0x04
    5f92:	1a 83       	std	Y+2, r17	; 0x02
    5f94:	09 83       	std	Y+1, r16	; 0x01
    5f96:	8f ef       	ldi	r24, 0xFF	; 255
    5f98:	9f e7       	ldi	r25, 0x7F	; 127
    5f9a:	9e 83       	std	Y+6, r25	; 0x06
    5f9c:	8d 83       	std	Y+5, r24	; 0x05
    5f9e:	ae 01       	movw	r20, r28
    5fa0:	46 5e       	subi	r20, 0xE6	; 230
    5fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa4:	68 8d       	ldd	r22, Y+24	; 0x18
    5fa6:	79 8d       	ldd	r23, Y+25	; 0x19
    5fa8:	ce 01       	movw	r24, r28
    5faa:	01 96       	adiw	r24, 0x01	; 1
    5fac:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <vfprintf>
    5fb0:	ef 81       	ldd	r30, Y+7	; 0x07
    5fb2:	f8 85       	ldd	r31, Y+8	; 0x08
    5fb4:	e0 0f       	add	r30, r16
    5fb6:	f1 1f       	adc	r31, r17
    5fb8:	10 82       	st	Z, r1
    5fba:	2e 96       	adiw	r28, 0x0e	; 14
    5fbc:	0f b6       	in	r0, 0x3f	; 63
    5fbe:	f8 94       	cli
    5fc0:	de bf       	out	0x3e, r29	; 62
    5fc2:	0f be       	out	0x3f, r0	; 63
    5fc4:	cd bf       	out	0x3d, r28	; 61
    5fc6:	df 91       	pop	r29
    5fc8:	cf 91       	pop	r28
    5fca:	1f 91       	pop	r17
    5fcc:	0f 91       	pop	r16
    5fce:	08 95       	ret

00005fd0 <__ultoa_invert>:
    5fd0:	fa 01       	movw	r30, r20
    5fd2:	aa 27       	eor	r26, r26
    5fd4:	28 30       	cpi	r18, 0x08	; 8
    5fd6:	51 f1       	breq	.+84     	; 0x602c <__ultoa_invert+0x5c>
    5fd8:	20 31       	cpi	r18, 0x10	; 16
    5fda:	81 f1       	breq	.+96     	; 0x603c <__ultoa_invert+0x6c>
    5fdc:	e8 94       	clt
    5fde:	6f 93       	push	r22
    5fe0:	6e 7f       	andi	r22, 0xFE	; 254
    5fe2:	6e 5f       	subi	r22, 0xFE	; 254
    5fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    5fea:	af 4f       	sbci	r26, 0xFF	; 255
    5fec:	b1 e0       	ldi	r27, 0x01	; 1
    5fee:	3e d0       	rcall	.+124    	; 0x606c <__ultoa_invert+0x9c>
    5ff0:	b4 e0       	ldi	r27, 0x04	; 4
    5ff2:	3c d0       	rcall	.+120    	; 0x606c <__ultoa_invert+0x9c>
    5ff4:	67 0f       	add	r22, r23
    5ff6:	78 1f       	adc	r23, r24
    5ff8:	89 1f       	adc	r24, r25
    5ffa:	9a 1f       	adc	r25, r26
    5ffc:	a1 1d       	adc	r26, r1
    5ffe:	68 0f       	add	r22, r24
    6000:	79 1f       	adc	r23, r25
    6002:	8a 1f       	adc	r24, r26
    6004:	91 1d       	adc	r25, r1
    6006:	a1 1d       	adc	r26, r1
    6008:	6a 0f       	add	r22, r26
    600a:	71 1d       	adc	r23, r1
    600c:	81 1d       	adc	r24, r1
    600e:	91 1d       	adc	r25, r1
    6010:	a1 1d       	adc	r26, r1
    6012:	20 d0       	rcall	.+64     	; 0x6054 <__ultoa_invert+0x84>
    6014:	09 f4       	brne	.+2      	; 0x6018 <__ultoa_invert+0x48>
    6016:	68 94       	set
    6018:	3f 91       	pop	r19
    601a:	2a e0       	ldi	r18, 0x0A	; 10
    601c:	26 9f       	mul	r18, r22
    601e:	11 24       	eor	r1, r1
    6020:	30 19       	sub	r19, r0
    6022:	30 5d       	subi	r19, 0xD0	; 208
    6024:	31 93       	st	Z+, r19
    6026:	de f6       	brtc	.-74     	; 0x5fde <__ultoa_invert+0xe>
    6028:	cf 01       	movw	r24, r30
    602a:	08 95       	ret
    602c:	46 2f       	mov	r20, r22
    602e:	47 70       	andi	r20, 0x07	; 7
    6030:	40 5d       	subi	r20, 0xD0	; 208
    6032:	41 93       	st	Z+, r20
    6034:	b3 e0       	ldi	r27, 0x03	; 3
    6036:	0f d0       	rcall	.+30     	; 0x6056 <__ultoa_invert+0x86>
    6038:	c9 f7       	brne	.-14     	; 0x602c <__ultoa_invert+0x5c>
    603a:	f6 cf       	rjmp	.-20     	; 0x6028 <__ultoa_invert+0x58>
    603c:	46 2f       	mov	r20, r22
    603e:	4f 70       	andi	r20, 0x0F	; 15
    6040:	40 5d       	subi	r20, 0xD0	; 208
    6042:	4a 33       	cpi	r20, 0x3A	; 58
    6044:	18 f0       	brcs	.+6      	; 0x604c <__ultoa_invert+0x7c>
    6046:	49 5d       	subi	r20, 0xD9	; 217
    6048:	31 fd       	sbrc	r19, 1
    604a:	40 52       	subi	r20, 0x20	; 32
    604c:	41 93       	st	Z+, r20
    604e:	02 d0       	rcall	.+4      	; 0x6054 <__ultoa_invert+0x84>
    6050:	a9 f7       	brne	.-22     	; 0x603c <__ultoa_invert+0x6c>
    6052:	ea cf       	rjmp	.-44     	; 0x6028 <__ultoa_invert+0x58>
    6054:	b4 e0       	ldi	r27, 0x04	; 4
    6056:	a6 95       	lsr	r26
    6058:	97 95       	ror	r25
    605a:	87 95       	ror	r24
    605c:	77 95       	ror	r23
    605e:	67 95       	ror	r22
    6060:	ba 95       	dec	r27
    6062:	c9 f7       	brne	.-14     	; 0x6056 <__ultoa_invert+0x86>
    6064:	00 97       	sbiw	r24, 0x00	; 0
    6066:	61 05       	cpc	r22, r1
    6068:	71 05       	cpc	r23, r1
    606a:	08 95       	ret
    606c:	9b 01       	movw	r18, r22
    606e:	ac 01       	movw	r20, r24
    6070:	0a 2e       	mov	r0, r26
    6072:	06 94       	lsr	r0
    6074:	57 95       	ror	r21
    6076:	47 95       	ror	r20
    6078:	37 95       	ror	r19
    607a:	27 95       	ror	r18
    607c:	ba 95       	dec	r27
    607e:	c9 f7       	brne	.-14     	; 0x6072 <__ultoa_invert+0xa2>
    6080:	62 0f       	add	r22, r18
    6082:	73 1f       	adc	r23, r19
    6084:	84 1f       	adc	r24, r20
    6086:	95 1f       	adc	r25, r21
    6088:	a0 1d       	adc	r26, r0
    608a:	08 95       	ret

0000608c <_exit>:
    608c:	f8 94       	cli

0000608e <__stop_program>:
    608e:	ff cf       	rjmp	.-2      	; 0x608e <__stop_program>
