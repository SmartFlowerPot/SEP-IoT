
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000051c  00800200  00006562  000065f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c03  0080071c  0080071c  00006b12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a30  00000000  00000000  00006bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d027  00000000  00000000  000075e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003314  00000000  00000000  00014607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006507  00000000  00000000  0001791b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025ac  00000000  00000000  0001de24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fd2  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c270  00000000  00000000  000243a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  00030612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 69 26 	jmp	0x4cd2	; 0x4cd2 <__vector_25>
      68:	0c 94 bb 26 	jmp	0x4d76	; 0x4d76 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__vector_36>
      94:	0c 94 51 27 	jmp	0x4ea2	; 0x4ea2 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e9 29 	jmp	0x53d2	; 0x53d2 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 95 27 	jmp	0x4f2a	; 0x4f2a <__vector_51>
      d0:	0c 94 e7 27 	jmp	0x4fce	; 0x4fce <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__vector_54>
      dc:	0c 94 7d 28 	jmp	0x50fa	; 0x50fa <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ed 1c       	adc	r14, r13
      e6:	ed 1c       	adc	r14, r13
      e8:	ed 1c       	adc	r14, r13
      ea:	24 1d       	adc	r18, r4
      ec:	2c 1d       	adc	r18, r12
      ee:	41 1d       	adc	r20, r1
      f0:	ed 1c       	adc	r14, r13
      f2:	ed 1c       	adc	r14, r13
      f4:	24 1d       	adc	r18, r4
      f6:	2c 1d       	adc	r18, r12
      f8:	0b 2a       	or	r0, r27
      fa:	7b 2a       	or	r7, r27
      fc:	7b 2a       	or	r7, r27
      fe:	7b 2a       	or	r7, r27
     100:	7b 2a       	or	r7, r27
     102:	7b 2a       	or	r7, r27
     104:	7b 2a       	or	r7, r27
     106:	7b 2a       	or	r7, r27
     108:	0b 2a       	or	r0, r27
     10a:	7b 2a       	or	r7, r27
     10c:	7b 2a       	or	r7, r27
     10e:	7b 2a       	or	r7, r27
     110:	7b 2a       	or	r7, r27
     112:	7b 2a       	or	r7, r27
     114:	7b 2a       	or	r7, r27
     116:	7b 2a       	or	r7, r27
     118:	0d 2a       	or	r0, r29
     11a:	7b 2a       	or	r7, r27
     11c:	7b 2a       	or	r7, r27
     11e:	7b 2a       	or	r7, r27
     120:	7b 2a       	or	r7, r27
     122:	7b 2a       	or	r7, r27
     124:	7b 2a       	or	r7, r27
     126:	7b 2a       	or	r7, r27
     128:	7b 2a       	or	r7, r27
     12a:	7b 2a       	or	r7, r27
     12c:	7b 2a       	or	r7, r27
     12e:	7b 2a       	or	r7, r27
     130:	7b 2a       	or	r7, r27
     132:	7b 2a       	or	r7, r27
     134:	7b 2a       	or	r7, r27
     136:	7b 2a       	or	r7, r27
     138:	0d 2a       	or	r0, r29
     13a:	7b 2a       	or	r7, r27
     13c:	7b 2a       	or	r7, r27
     13e:	7b 2a       	or	r7, r27
     140:	7b 2a       	or	r7, r27
     142:	7b 2a       	or	r7, r27
     144:	7b 2a       	or	r7, r27
     146:	7b 2a       	or	r7, r27
     148:	7b 2a       	or	r7, r27
     14a:	7b 2a       	or	r7, r27
     14c:	7b 2a       	or	r7, r27
     14e:	7b 2a       	or	r7, r27
     150:	7b 2a       	or	r7, r27
     152:	7b 2a       	or	r7, r27
     154:	7b 2a       	or	r7, r27
     156:	7b 2a       	or	r7, r27
     158:	77 2a       	or	r7, r23
     15a:	7b 2a       	or	r7, r27
     15c:	7b 2a       	or	r7, r27
     15e:	7b 2a       	or	r7, r27
     160:	7b 2a       	or	r7, r27
     162:	7b 2a       	or	r7, r27
     164:	7b 2a       	or	r7, r27
     166:	7b 2a       	or	r7, r27
     168:	42 2a       	or	r4, r18
     16a:	7b 2a       	or	r7, r27
     16c:	7b 2a       	or	r7, r27
     16e:	7b 2a       	or	r7, r27
     170:	7b 2a       	or	r7, r27
     172:	7b 2a       	or	r7, r27
     174:	7b 2a       	or	r7, r27
     176:	7b 2a       	or	r7, r27
     178:	7b 2a       	or	r7, r27
     17a:	7b 2a       	or	r7, r27
     17c:	7b 2a       	or	r7, r27
     17e:	7b 2a       	or	r7, r27
     180:	7b 2a       	or	r7, r27
     182:	7b 2a       	or	r7, r27
     184:	7b 2a       	or	r7, r27
     186:	7b 2a       	or	r7, r27
     188:	36 2a       	or	r3, r22
     18a:	7b 2a       	or	r7, r27
     18c:	7b 2a       	or	r7, r27
     18e:	7b 2a       	or	r7, r27
     190:	7b 2a       	or	r7, r27
     192:	7b 2a       	or	r7, r27
     194:	7b 2a       	or	r7, r27
     196:	7b 2a       	or	r7, r27
     198:	5a 2a       	or	r5, r26

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 2f 10 	call	0x205e	; 0x205e <prvCheckTasksWaitingTermination>
     2a0:	80 91 57 11 	lds	r24, 0x1157	; 0x801157 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	bb d6       	rcall	.+3446   	; 0x1020 <vPortYield>
     2aa:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 5f 1c 	call	0x38be	; 0x38be <prvProcessTimerOrBlockTask>
     2c8:	0e 94 b6 1c 	call	0x396c	; 0x396c <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	17 e0       	ldi	r17, 0x07	; 7
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e2 e6       	ldi	r30, 0x62	; 98
     2e6:	f5 e6       	ldi	r31, 0x65	; 101
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ac 31       	cpi	r26, 0x1C	; 28
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	23 e1       	ldi	r18, 0x13	; 19
     2fa:	ac e1       	ldi	r26, 0x1C	; 28
     2fc:	b7 e0       	ldi	r27, 0x07	; 7
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	af 31       	cpi	r26, 0x1F	; 31
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <main>
     30c:	0c 94 af 32 	jmp	0x655e	; 0x655e <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <CO2_callback>:
	uint16_t CO2;
	} CO2Handler;
	
	
void CO2_callback(uint16_t callback){
	ppm = callback;
     312:	90 93 04 13 	sts	0x1304, r25	; 0x801304 <ppm+0x1>
     316:	80 93 03 13 	sts	0x1303, r24	; 0x801303 <ppm>
     31a:	08 95       	ret

0000031c <startReadingCO2>:

uint16_t getCO2(CO2_t self){
	return self->CO2;
}

void startReadingCO2(void* self) {
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <startReadingCO2+0x6>
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32a:	0e 94 80 11 	call	0x2300	; 0x2300 <xTaskGetTickCount>
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     336:	40 ee       	ldi	r20, 0xE0	; 224
     338:	53 e0       	ldi	r21, 0x03	; 3
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskDelayUntil>
		//need to set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     346:	40 91 05 13 	lds	r20, 0x1305	; 0x801305 <ready_bit>
     34a:	50 91 06 13 	lds	r21, 0x1306	; 0x801306 <ready_bit+0x1>
     34e:	60 91 07 13 	lds	r22, 0x1307	; 0x801307 <ready_bit+0x2>
     352:	70 91 08 13 	lds	r23, 0x1308	; 0x801308 <ready_bit+0x3>
     356:	cc 24       	eor	r12, r12
     358:	ca 94       	dec	r12
     35a:	dc 2c       	mov	r13, r12
     35c:	76 01       	movw	r14, r12
     35e:	01 e0       	ldi	r16, 0x01	; 1
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	80 91 09 13 	lds	r24, 0x1309	; 0x801309 <group_start>
     366:	90 91 0a 13 	lds	r25, 0x130A	; 0x80130a <group_start+0x1>
     36a:	05 d3       	rcall	.+1546   	; 0x976 <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		rc = mh_z19_takeMeassuring();
     36c:	0e 94 f7 24 	call	0x49ee	; 0x49ee <mh_z19_takeMeassuring>
     370:	80 93 02 13 	sts	0x1302, r24	; 0x801302 <rc>
		if (rc != MHZ19_OK)
     374:	81 11       	cpse	r24, r1
     376:	df cf       	rjmp	.-66     	; 0x336 <startReadingCO2+0x1a>
		{
			// Something went wrong
		} else {
			((CO2_t)self)->CO2 = ppm;
     378:	80 91 03 13 	lds	r24, 0x1303	; 0x801303 <ppm>
     37c:	90 91 04 13 	lds	r25, 0x1304	; 0x801304 <ppm+0x1>
     380:	f5 01       	movw	r30, r10
     382:	91 83       	std	Z+1, r25	; 0x01
     384:	80 83       	st	Z, r24
			printf("CO2 %d", ppm);
     386:	80 91 04 13 	lds	r24, 0x1304	; 0x801304 <ppm+0x1>
     38a:	8f 93       	push	r24
     38c:	80 91 03 13 	lds	r24, 0x1303	; 0x801303 <ppm>
     390:	8f 93       	push	r24
     392:	8f e6       	ldi	r24, 0x6F	; 111
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	9f 93       	push	r25
     398:	8f 93       	push	r24
     39a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	c7 cf       	rjmp	.-114    	; 0x336 <startReadingCO2+0x1a>

000003a8 <getCO2>:
	return new_measure;
}

uint16_t getCO2(CO2_t self){
	return self->CO2;
}
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	08 95       	ret

000003b0 <CO2_handler_init>:
		}
		
	}
}

void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	08 2f       	mov	r16, r24
     3bc:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     3be:	40 91 05 13 	lds	r20, 0x1305	; 0x801305 <ready_bit>
     3c2:	50 91 06 13 	lds	r21, 0x1306	; 0x801306 <ready_bit+0x1>
     3c6:	60 91 07 13 	lds	r22, 0x1307	; 0x801307 <ready_bit+0x2>
     3ca:	70 91 08 13 	lds	r23, 0x1308	; 0x801308 <ready_bit+0x3>
     3ce:	80 91 09 13 	lds	r24, 0x1309	; 0x801309 <group_start>
     3d2:	90 91 0a 13 	lds	r25, 0x130A	; 0x80130a <group_start+0x1>
     3d6:	6f d3       	rcall	.+1758   	; 0xab6 <xEventGroupSetBits>

	xTaskCreate(
     3d8:	e1 2c       	mov	r14, r1
     3da:	f1 2c       	mov	r15, r1
     3dc:	9e 01       	movw	r18, r28
     3de:	44 e2       	ldi	r20, 0x24	; 36
     3e0:	51 e0       	ldi	r21, 0x01	; 1
     3e2:	66 e7       	ldi	r22, 0x76	; 118
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	8e e8       	ldi	r24, 0x8E	; 142
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
	puts("CO2 initialized");
     3ee:	8e e7       	ldi	r24, 0x7E	; 126
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <puts>
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	08 95       	ret

00000402 <createCO2>:
void CO2_callback(uint16_t callback){
	ppm = callback;
}

CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	8c 01       	movw	r16, r24
     418:	5b 01       	movw	r10, r22
     41a:	69 01       	movw	r12, r18
     41c:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <malloc>
     426:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     428:	89 2b       	or	r24, r25
     42a:	d9 f0       	breq	.+54     	; 0x462 <createCO2+0x60>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	18 82       	st	Y, r1
	
	group_start = taskBits;
     430:	b0 92 0a 13 	sts	0x130A, r11	; 0x80130a <group_start+0x1>
     434:	a0 92 09 13 	sts	0x1309, r10	; 0x801309 <group_start>
	ready_bit = bit;
     438:	c0 92 05 13 	sts	0x1305, r12	; 0x801305 <ready_bit>
     43c:	d0 92 06 13 	sts	0x1306, r13	; 0x801306 <ready_bit+0x1>
     440:	e0 92 07 13 	sts	0x1307, r14	; 0x801307 <ready_bit+0x2>
     444:	f0 92 08 13 	sts	0x1308, r15	; 0x801308 <ready_bit+0x3>
	
	//maybe wait time here?
	mh_z19_initialise(ser_USART3);
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	0e 94 cd 24 	call	0x499a	; 0x499a <mh_z19_initialise>
	
	mh_z19_injectCallBack(CO2_callback);
     44e:	89 e8       	ldi	r24, 0x89	; 137
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     456:	be 01       	movw	r22, r28
     458:	c8 01       	movw	r24, r16
     45a:	aa df       	rcall	.-172    	; 0x3b0 <CO2_handler_init>
	return new_measure;
     45c:	8c 2f       	mov	r24, r28
     45e:	9d 2f       	mov	r25, r29
     460:	02 c0       	rjmp	.+4      	; 0x466 <createCO2+0x64>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
	
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	08 95       	ret

0000047c <measureTempAndHum>:
		
		measureTempAndHum((Temperature_t) self);
	}
}

void measureTempAndHum(Temperature_t self){
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
	self->temperature = hih8120_getTemperature();
     482:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <hih8120_getTemperature>
     486:	68 83       	st	Y, r22
     488:	79 83       	std	Y+1, r23	; 0x01
     48a:	8a 83       	std	Y+2, r24	; 0x02
     48c:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10();
     48e:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <hih8120_getHumidityPercent_x10>
     492:	9d 83       	std	Y+5, r25	; 0x05
     494:	8c 83       	std	Y+4, r24	; 0x04
	//printf("%f \n", self->temperature);
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <startReading>:
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}

void startReading(void* self){
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <startReading+0x6>
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     4aa:	0e 94 80 11 	call	0x2300	; 0x2300 <xTaskGetTickCount>
     4ae:	69 83       	std	Y+1, r22	; 0x01
     4b0:	7a 83       	std	Y+2, r23	; 0x02
     4b2:	8b 83       	std	Y+3, r24	; 0x03
     4b4:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     4b6:	42 ea       	ldi	r20, 0xA2	; 162
     4b8:	53 e0       	ldi	r21, 0x03	; 3
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	ce 01       	movw	r24, r28
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskDelayUntil>
		if (HIH8120_OK != hih8120_wakeup())
     4c6:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <hih8120_wakeup>
     4ca:	88 23       	and	r24, r24
     4cc:	21 f0       	breq	.+8      	; 0x4d6 <startReading+0x3a>
		{
			puts("Temp task failed to work!");
     4ce:	8e e8       	ldi	r24, 0x8E	; 142
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <puts>
		}
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     4d6:	40 91 05 13 	lds	r20, 0x1305	; 0x801305 <ready_bit>
     4da:	50 91 06 13 	lds	r21, 0x1306	; 0x801306 <ready_bit+0x1>
     4de:	60 91 07 13 	lds	r22, 0x1307	; 0x801307 <ready_bit+0x2>
     4e2:	70 91 08 13 	lds	r23, 0x1308	; 0x801308 <ready_bit+0x3>
     4e6:	cc 24       	eor	r12, r12
     4e8:	ca 94       	dec	r12
     4ea:	dc 2c       	mov	r13, r12
     4ec:	76 01       	movw	r14, r12
     4ee:	01 e0       	ldi	r16, 0x01	; 1
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	80 91 09 13 	lds	r24, 0x1309	; 0x801309 <group_start>
     4f6:	90 91 0a 13 	lds	r25, 0x130A	; 0x80130a <group_start+0x1>
     4fa:	3d d2       	rcall	.+1146   	; 0x976 <xEventGroupWaitBits>
													ready_bit,
													pdFALSE,
													pdTRUE,
													portMAX_DELAY);
		
		vTaskDelay(pdMS_TO_TICKS(70));
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vTaskDelay>
		hih8120_measure(); //measure temperature and humidity
     508:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <hih8120_measure>
		vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	cb 01       	movw	r24, r22
     512:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vTaskDelay>
		
		measureTempAndHum((Temperature_t) self);
     516:	c5 01       	movw	r24, r10
     518:	b1 df       	rcall	.-158    	; 0x47c <measureTempAndHum>
	}
     51a:	cd cf       	rjmp	.-102    	; 0x4b6 <startReading+0x1a>

0000051c <temperature_handler_init>:
	self->temperature = hih8120_getTemperature();
	self->humidity = hih8120_getHumidityPercent_x10();
	//printf("%f \n", self->temperature);
}

void temperature_handler_init(Temperature_t self, uint16_t priority){
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     52a:	40 91 05 13 	lds	r20, 0x1305	; 0x801305 <ready_bit>
     52e:	50 91 06 13 	lds	r21, 0x1306	; 0x801306 <ready_bit+0x1>
     532:	60 91 07 13 	lds	r22, 0x1307	; 0x801307 <ready_bit+0x2>
     536:	70 91 08 13 	lds	r23, 0x1308	; 0x801308 <ready_bit+0x3>
     53a:	80 91 09 13 	lds	r24, 0x1309	; 0x801309 <group_start>
     53e:	90 91 0a 13 	lds	r25, 0x130A	; 0x80130a <group_start+0x1>
     542:	b9 d2       	rcall	.+1394   	; 0xab6 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     544:	e1 2c       	mov	r14, r1
     546:	f1 2c       	mov	r15, r1
     548:	9e 01       	movw	r18, r28
     54a:	40 ec       	ldi	r20, 0xC0	; 192
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	68 ea       	ldi	r22, 0xA8	; 168
     550:	72 e0       	ldi	r23, 0x02	; 2
     552:	8e e4       	ldi	r24, 0x4E	; 78
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskCreate>
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	08 95       	ret

00000566 <createTemp>:
	float temperature;
	uint16_t humidity;
	} TemperatureHandler;
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	8c 01       	movw	r16, r24
     57c:	5b 01       	movw	r10, r22
     57e:	69 01       	movw	r12, r18
     580:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     582:	86 e0       	ldi	r24, 0x06	; 6
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <malloc>
     58a:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     58c:	89 2b       	or	r24, r25
     58e:	01 f1       	breq	.+64     	; 0x5d0 <createTemp+0x6a>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     590:	18 82       	st	Y, r1
     592:	19 82       	std	Y+1, r1	; 0x01
     594:	1a 82       	std	Y+2, r1	; 0x02
     596:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     598:	1d 82       	std	Y+5, r1	; 0x05
     59a:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     59c:	b0 92 0a 13 	sts	0x130A, r11	; 0x80130a <group_start+0x1>
     5a0:	a0 92 09 13 	sts	0x1309, r10	; 0x801309 <group_start>
	ready_bit = bit;
     5a4:	c0 92 05 13 	sts	0x1305, r12	; 0x801305 <ready_bit>
     5a8:	d0 92 06 13 	sts	0x1306, r13	; 0x801306 <ready_bit+0x1>
     5ac:	e0 92 07 13 	sts	0x1307, r14	; 0x801307 <ready_bit+0x2>
     5b0:	f0 92 08 13 	sts	0x1308, r15	; 0x801308 <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     5b4:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <hih8120_initialise>
     5b8:	81 11       	cpse	r24, r1
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <createTemp+0x5e>
	{
		puts("Temp sensor initialized.");
     5bc:	89 eb       	ldi	r24, 0xB9	; 185
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <puts>
	}
	
	temperature_handler_init(new_measure, priority);
     5c4:	b8 01       	movw	r22, r16
     5c6:	ce 01       	movw	r24, r28
     5c8:	a9 df       	rcall	.-174    	; 0x51c <temperature_handler_init>
	return new_measure;
     5ca:	8c 2f       	mov	r24, r28
     5cc:	9d 2f       	mov	r25, r29
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <createTemp+0x6e>
	

Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
		puts("Temp sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	08 95       	ret

000005ea <getTemperature>:
	xEventGroupSetBits(group_start, ready_bit);
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
}

float getTemperature(Temperature_t self){
	return self->temperature;
     5ea:	fc 01       	movw	r30, r24
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
}
     5f4:	08 95       	ret

000005f6 <getHumidity>:

uint16_t getHumidity(Temperature_t self)
{
	return self -> humidity;
}
     5f6:	fc 01       	movw	r30, r24
     5f8:	84 81       	ldd	r24, Z+4	; 0x04
     5fa:	95 81       	ldd	r25, Z+5	; 0x05
     5fc:	08 95       	ret

000005fe <_lora_setup>:
	, NULL);
}


static void _lora_setup(void)
{
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	64 97       	sbiw	r28, 0x14	; 20
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	//status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     616:	0e 94 74 21 	call	0x42e8	; 0x42e8 <lora_driver_rn2483FactoryReset>
     61a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	82 ed       	ldi	r24, 0xD2	; 210
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     62e:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <lora_driver_configureToEu868>
     632:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	85 ee       	ldi	r24, 0xE5	; 229
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     646:	8e 01       	movw	r16, r28
     648:	0f 5f       	subi	r16, 0xFF	; 255
     64a:	1f 4f       	sbci	r17, 0xFF	; 255
     64c:	c8 01       	movw	r24, r16
     64e:	0e 94 86 21 	call	0x430c	; 0x430c <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     652:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     656:	1f 93       	push	r17
     658:	0f 93       	push	r16
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	8e ef       	ldi	r24, 0xFE	; 254
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     66a:	c8 01       	movw	r24, r16
     66c:	0e 94 a2 21 	call	0x4344	; 0x4344 <lora_driver_setDeviceIdentifier>
     670:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	1f 93       	push	r17
     67a:	0f 93       	push	r16
     67c:	82 e1       	ldi	r24, 0x12	; 18
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     688:	a8 01       	movw	r20, r16
     68a:	67 e2       	ldi	r22, 0x27	; 39
     68c:	73 e0       	ldi	r23, 0x03	; 3
     68e:	88 e4       	ldi	r24, 0x48	; 72
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <lora_driver_setOtaaIdentity>
     696:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	1f 93       	push	r17
     6a0:	0f 93       	push	r16
     6a2:	87 e2       	ldi	r24, 0x27	; 39
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	88 e4       	ldi	r24, 0x48	; 72
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	89 e5       	ldi	r24, 0x59	; 89
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     6be:	0e 94 d5 21 	call	0x43aa	; 0x43aa <lora_driver_saveMac>
     6c2:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	8f e8       	ldi	r24, 0x8F	; 143
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	0e 94 cf 22 	call	0x459e	; 0x459e <lora_driver_setAdaptiveDataRate>
     6e6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	8e e9       	ldi	r24, 0x9E	; 158
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     6fa:	84 ef       	ldi	r24, 0xF4	; 244
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 da 22 	call	0x45b4	; 0x45b4 <lora_driver_setReceiveDelay>
     702:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     706:	9f 93       	push	r25
     708:	8f 93       	push	r24
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	8f 93       	push	r24
     70e:	84 ef       	ldi	r24, 0xF4	; 244
     710:	8f 93       	push	r24
     712:	8f eb       	ldi	r24, 0xBF	; 191
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     728:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 db 21 	call	0x43b6	; 0x43b6 <lora_driver_join>
     730:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     732:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	1f 92       	push	r1
     73c:	1f 93       	push	r17
     73e:	8f ed       	ldi	r24, 0xDF	; 223
     740:	93 e0       	ldi	r25, 0x03	; 3
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>

		if ( rc != LORA_ACCEPTED)
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	08 30       	cpi	r16, 0x08	; 8
     758:	41 f0       	breq	.+16     	; 0x76a <_lora_setup+0x16c>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     75a:	66 e3       	ldi	r22, 0x36	; 54
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     766:	11 50       	subi	r17, 0x01	; 1
     768:	01 f7       	brne	.-64     	; 0x72a <_lora_setup+0x12c>

	if (rc == LORA_ACCEPTED)
     76a:	08 30       	cpi	r16, 0x08	; 8
     76c:	11 f0       	breq	.+4      	; 0x772 <_lora_setup+0x174>
		//status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     76e:	58 d4       	rcall	.+2224   	; 0x1020 <vPortYield>
     770:	fe cf       	rjmp	.-4      	; 0x76e <_lora_setup+0x170>
		}
	}
}
     772:	64 96       	adiw	r28, 0x14	; 20
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <lora_handler_task>:

void lora_handler_task(void* pvParameters){
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	28 97       	sbiw	r28, 0x08	; 8
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0e 94 66 21 	call	0x42cc	; 0x42cc <lora_driver_resetRn2483>
	vTaskDelay(2);
     7a2:	62 e0       	ldi	r22, 0x02	; 2
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vTaskDelay>
	lora_driver_resetRn2483(0);
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e 94 66 21 	call	0x42cc	; 0x42cc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     7b4:	66 e9       	ldi	r22, 0x96	; 150
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     7c0:	0e 94 1f 21 	call	0x423e	; 0x423e <lora_driver_flushBuffers>

	_lora_setup();
     7c4:	1c df       	rcall	.-456    	; 0x5fe <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     7c6:	0e 94 80 11 	call	0x2300	; 0x2300 <xTaskGetTickCount>
     7ca:	69 83       	std	Y+1, r22	; 0x01
     7cc:	7a 83       	std	Y+2, r23	; 0x02
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     7d2:	4c e6       	ldi	r20, 0x6C	; 108
     7d4:	52 e0       	ldi	r21, 0x02	; 2
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	ce 01       	movw	r24, r28
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskDelayUntil>
		_uplink_payload.len = 5;
     7e2:	0c e1       	ldi	r16, 0x1C	; 28
     7e4:	17 e0       	ldi	r17, 0x07	; 7
     7e6:	85 e0       	ldi	r24, 0x05	; 5
     7e8:	f8 01       	movw	r30, r16
     7ea:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 83       	st	Z, r24
		
		lora_driver_payload_t downlinkPayload;
		
		//temperature
		double temp =(double) getTemperature(temperatureAndHumidity);
     7f0:	80 91 0d 13 	lds	r24, 0x130D	; 0x80130d <temperatureAndHumidity>
     7f4:	90 91 0e 13 	lds	r25, 0x130E	; 0x80130e <temperatureAndHumidity+0x1>
     7f8:	f8 de       	rcall	.-528    	; 0x5ea <getTemperature>
     7fa:	f6 2e       	mov	r15, r22
     7fc:	e7 2e       	mov	r14, r23
     7fe:	d8 2e       	mov	r13, r24
     800:	c9 2e       	mov	r12, r25
		double val1=0;
     802:	1d 82       	std	Y+5, r1	; 0x05
     804:	1e 82       	std	Y+6, r1	; 0x06
     806:	1f 82       	std	Y+7, r1	; 0x07
     808:	18 86       	std	Y+8, r1	; 0x08
		double val2=0;
		val2 = modf(temp, &val1);
     80a:	ae 01       	movw	r20, r28
     80c:	4b 5f       	subi	r20, 0xFB	; 251
     80e:	5f 4f       	sbci	r21, 0xFF	; 255
     810:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <modf>
		val2 = val2 * 100;
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	48 ec       	ldi	r20, 0xC8	; 200
     81a:	52 e4       	ldi	r21, 0x42	; 66
     81c:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__mulsf3>
     820:	4b 01       	movw	r8, r22
     822:	5c 01       	movw	r10, r24
		printf("\ntemp: %f", temp);
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	9f 93       	push	r25
     832:	8f 93       	push	r24
     834:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>
		_uplink_payload.bytes[0] = (int) val1;
     838:	6d 81       	ldd	r22, Y+5	; 0x05
     83a:	7e 81       	ldd	r23, Y+6	; 0x06
     83c:	8f 81       	ldd	r24, Y+7	; 0x07
     83e:	98 85       	ldd	r25, Y+8	; 0x08
     840:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
     844:	f8 01       	movw	r30, r16
     846:	62 83       	std	Z+2, r22	; 0x02
		_uplink_payload.bytes[1] = (int) val2;	
     848:	c5 01       	movw	r24, r10
     84a:	b4 01       	movw	r22, r8
     84c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
     850:	f8 01       	movw	r30, r16
     852:	63 83       	std	Z+3, r22	; 0x03
		
		//humidity
		uint16_t humidity = getHumidity(temperatureAndHumidity)/10;
     854:	80 91 0d 13 	lds	r24, 0x130D	; 0x80130d <temperatureAndHumidity>
     858:	90 91 0e 13 	lds	r25, 0x130E	; 0x80130e <temperatureAndHumidity+0x1>
     85c:	cc de       	rcall	.-616    	; 0x5f6 <getHumidity>
     85e:	9c 01       	movw	r18, r24
     860:	ad ec       	ldi	r26, 0xCD	; 205
     862:	bc ec       	ldi	r27, 0xCC	; 204
     864:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <__umulhisi3>
     868:	7c 01       	movw	r14, r24
     86a:	f6 94       	lsr	r15
     86c:	e7 94       	ror	r14
     86e:	f6 94       	lsr	r15
     870:	e7 94       	ror	r14
     872:	f6 94       	lsr	r15
     874:	e7 94       	ror	r14
		printf("\nhumidity: %d", humidity);
     876:	ff 92       	push	r15
     878:	ef 92       	push	r14
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	94 e0       	ldi	r25, 0x04	; 4
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>
		_uplink_payload.bytes[2] = humidity;
     886:	f8 01       	movw	r30, r16
     888:	e4 82       	std	Z+4, r14	; 0x04
		
		//co2
		uint16_t co2_val = getCO2(co2);
     88a:	80 91 0b 13 	lds	r24, 0x130B	; 0x80130b <co2>
     88e:	90 91 0c 13 	lds	r25, 0x130C	; 0x80130c <co2+0x1>
     892:	8a dd       	rcall	.-1260   	; 0x3a8 <getCO2>
     894:	f8 2e       	mov	r15, r24
     896:	e9 2e       	mov	r14, r25
		printf("\nco2: %d", co2_val);
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	87 e1       	ldi	r24, 0x17	; 23
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>
		_uplink_payload.bytes[3] = co2_val>>8;
     8a8:	f8 01       	movw	r30, r16
     8aa:	e5 82       	std	Z+5, r14	; 0x05
		_uplink_payload.bytes[4] = co2_val&0xFF;
     8ac:	f6 82       	std	Z+6, r15	; 0x06
		
		
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     8ae:	b8 01       	movw	r22, r16
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 04 22 	call	0x4408	; 0x4408 <lora_driver_sendUploadMessage>
     8b6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <lora_driver_mapReturnCodeToText>
     8ba:	9f 93       	push	r25
     8bc:	8f 93       	push	r24
     8be:	80 e2       	ldi	r24, 0x20	; 32
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	9f 93       	push	r25
     8c4:	8f 93       	push	r24
     8c6:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <printf>
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	7e cf       	rjmp	.-260    	; 0x7d2 <lora_handler_task+0x4a>

000008d6 <lora_handler_initialize>:
static lora_driver_payload_t _uplink_payload;


void lora_handler_task(void* pvParameters);

void lora_handler_initialize(uint16_t lora_handler_task_priority, Temperature_t temperatureObject, CO2_t co2Object){
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
	
	temperatureAndHumidity = temperatureObject;
     8dc:	70 93 0e 13 	sts	0x130E, r23	; 0x80130e <temperatureAndHumidity+0x1>
     8e0:	60 93 0d 13 	sts	0x130D, r22	; 0x80130d <temperatureAndHumidity>
	co2 = co2Object;
     8e4:	50 93 0c 13 	sts	0x130C, r21	; 0x80130c <co2+0x1>
     8e8:	40 93 0b 13 	sts	0x130B, r20	; 0x80130b <co2>

	xTaskCreate(
     8ec:	e1 2c       	mov	r14, r1
     8ee:	f1 2c       	mov	r15, r1
     8f0:	08 2f       	mov	r16, r24
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	48 e8       	ldi	r20, 0x88	; 136
     8f8:	51 e0       	ldi	r21, 0x01	; 1
     8fa:	65 e3       	ldi	r22, 0x35	; 53
     8fc:	74 e0       	ldi	r23, 0x04	; 4
     8fe:	84 ec       	ldi	r24, 0xC4	; 196
     900:	93 e0       	ldi	r25, 0x03	; 3
     902:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     90e:	0f 93       	push	r16
     910:	01 11       	cpse	r16, r1
     912:	0c c0       	rjmp	.+24     	; 0x92c <prvTestWaitCondition+0x1e>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	82 23       	and	r24, r18
     91a:	93 23       	and	r25, r19
     91c:	a4 23       	and	r26, r20
     91e:	b5 23       	and	r27, r21
     920:	89 2b       	or	r24, r25
     922:	8a 2b       	or	r24, r26
     924:	8b 2b       	or	r24, r27
     926:	79 f4       	brne	.+30     	; 0x946 <prvTestWaitCondition+0x38>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	10 c0       	rjmp	.+32     	; 0x94c <prvTestWaitCondition+0x3e>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	82 23       	and	r24, r18
     932:	93 23       	and	r25, r19
     934:	a4 23       	and	r26, r20
     936:	b5 23       	and	r27, r21
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	4a 07       	cpc	r20, r26
     93e:	5b 07       	cpc	r21, r27
     940:	21 f0       	breq	.+8      	; 0x94a <prvTestWaitCondition+0x3c>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	03 c0       	rjmp	.+6      	; 0x94c <prvTestWaitCondition+0x3e>
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	01 c0       	rjmp	.+2      	; 0x94c <prvTestWaitCondition+0x3e>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <xEventGroupCreate>:
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	8f e0       	ldi	r24, 0x0F	; 15
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	af d1       	rcall	.+862    	; 0xcb8 <pvPortMalloc>
     95a:	ec 01       	movw	r28, r24
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	39 f0       	breq	.+14     	; 0x96e <xEventGroupCreate+0x1e>
     960:	fc 01       	movw	r30, r24
     962:	11 92       	st	Z+, r1
     964:	11 92       	st	Z+, r1
     966:	11 92       	st	Z+, r1
     968:	11 92       	st	Z+, r1
     96a:	cf 01       	movw	r24, r30
     96c:	8b d2       	rcall	.+1302   	; 0xe84 <vListInitialise>
     96e:	ce 01       	movw	r24, r28
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <xEventGroupWaitBits>:
     976:	2f 92       	push	r2
     978:	3f 92       	push	r3
     97a:	4f 92       	push	r4
     97c:	5f 92       	push	r5
     97e:	6f 92       	push	r6
     980:	7f 92       	push	r7
     982:	8f 92       	push	r8
     984:	9f 92       	push	r9
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24
     99c:	4a 01       	movw	r8, r20
     99e:	5b 01       	movw	r10, r22
     9a0:	62 2e       	mov	r6, r18
     9a2:	70 2e       	mov	r7, r16
     9a4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskSuspendAll>
     9a8:	28 80       	ld	r2, Y
     9aa:	39 80       	ldd	r3, Y+1	; 0x01
     9ac:	4a 80       	ldd	r4, Y+2	; 0x02
     9ae:	5b 80       	ldd	r5, Y+3	; 0x03
     9b0:	a5 01       	movw	r20, r10
     9b2:	94 01       	movw	r18, r8
     9b4:	c2 01       	movw	r24, r4
     9b6:	b1 01       	movw	r22, r2
     9b8:	aa df       	rcall	.-172    	; 0x90e <prvTestWaitCondition>
     9ba:	88 23       	and	r24, r24
     9bc:	a1 f0       	breq	.+40     	; 0x9e6 <xEventGroupWaitBits+0x70>
     9be:	66 20       	and	r6, r6
     9c0:	89 f1       	breq	.+98     	; 0xa24 <xEventGroupWaitBits+0xae>
     9c2:	d5 01       	movw	r26, r10
     9c4:	c4 01       	movw	r24, r8
     9c6:	80 95       	com	r24
     9c8:	90 95       	com	r25
     9ca:	a0 95       	com	r26
     9cc:	b0 95       	com	r27
     9ce:	82 21       	and	r24, r2
     9d0:	93 21       	and	r25, r3
     9d2:	a4 21       	and	r26, r4
     9d4:	b5 21       	and	r27, r5
     9d6:	88 83       	st	Y, r24
     9d8:	99 83       	std	Y+1, r25	; 0x01
     9da:	aa 83       	std	Y+2, r26	; 0x02
     9dc:	bb 83       	std	Y+3, r27	; 0x03
     9de:	c1 2c       	mov	r12, r1
     9e0:	d1 2c       	mov	r13, r1
     9e2:	76 01       	movw	r14, r12
     9e4:	22 c0       	rjmp	.+68     	; 0xa2a <xEventGroupWaitBits+0xb4>
     9e6:	c1 14       	cp	r12, r1
     9e8:	d1 04       	cpc	r13, r1
     9ea:	e1 04       	cpc	r14, r1
     9ec:	f1 04       	cpc	r15, r1
     9ee:	e9 f0       	breq	.+58     	; 0xa2a <xEventGroupWaitBits+0xb4>
     9f0:	61 10       	cpse	r6, r1
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <xEventGroupWaitBits+0x86>
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	ba 01       	movw	r22, r20
     9fa:	04 c0       	rjmp	.+8      	; 0xa04 <xEventGroupWaitBits+0x8e>
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	71 e0       	ldi	r23, 0x01	; 1
     a04:	71 10       	cpse	r7, r1
     a06:	74 60       	ori	r23, 0x04	; 4
     a08:	48 29       	or	r20, r8
     a0a:	59 29       	or	r21, r9
     a0c:	6a 29       	or	r22, r10
     a0e:	7b 29       	or	r23, r11
     a10:	97 01       	movw	r18, r14
     a12:	86 01       	movw	r16, r12
     a14:	ce 01       	movw	r24, r28
     a16:	04 96       	adiw	r24, 0x04	; 4
     a18:	0e 94 92 14 	call	0x2924	; 0x2924 <vTaskPlaceOnUnorderedEventList>
     a1c:	21 2c       	mov	r2, r1
     a1e:	31 2c       	mov	r3, r1
     a20:	21 01       	movw	r4, r2
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <xEventGroupWaitBits+0xb4>
     a24:	c1 2c       	mov	r12, r1
     a26:	d1 2c       	mov	r13, r1
     a28:	76 01       	movw	r14, r12
     a2a:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
     a2e:	cd 28       	or	r12, r13
     a30:	ce 28       	or	r12, r14
     a32:	cf 28       	or	r12, r15
     a34:	59 f1       	breq	.+86     	; 0xa8c <xEventGroupWaitBits+0x116>
     a36:	81 11       	cpse	r24, r1
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <xEventGroupWaitBits+0xc6>
     a3a:	f2 d2       	rcall	.+1508   	; 0x1020 <vPortYield>
     a3c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <uxTaskResetEventItemValue>
     a40:	6b 01       	movw	r12, r22
     a42:	7c 01       	movw	r14, r24
     a44:	91 fd       	sbrc	r25, 1
     a46:	1f c0       	rjmp	.+62     	; 0xa86 <xEventGroupWaitBits+0x110>
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	0f 92       	push	r0
     a4e:	c8 80       	ld	r12, Y
     a50:	d9 80       	ldd	r13, Y+1	; 0x01
     a52:	ea 80       	ldd	r14, Y+2	; 0x02
     a54:	fb 80       	ldd	r15, Y+3	; 0x03
     a56:	07 2d       	mov	r16, r7
     a58:	a5 01       	movw	r20, r10
     a5a:	94 01       	movw	r18, r8
     a5c:	c7 01       	movw	r24, r14
     a5e:	b6 01       	movw	r22, r12
     a60:	56 df       	rcall	.-340    	; 0x90e <prvTestWaitCondition>
     a62:	88 23       	and	r24, r24
     a64:	71 f0       	breq	.+28     	; 0xa82 <xEventGroupWaitBits+0x10c>
     a66:	66 20       	and	r6, r6
     a68:	61 f0       	breq	.+24     	; 0xa82 <xEventGroupWaitBits+0x10c>
     a6a:	80 94       	com	r8
     a6c:	90 94       	com	r9
     a6e:	a0 94       	com	r10
     a70:	b0 94       	com	r11
     a72:	8c 20       	and	r8, r12
     a74:	9d 20       	and	r9, r13
     a76:	ae 20       	and	r10, r14
     a78:	bf 20       	and	r11, r15
     a7a:	88 82       	st	Y, r8
     a7c:	99 82       	std	Y+1, r9	; 0x01
     a7e:	aa 82       	std	Y+2, r10	; 0x02
     a80:	bb 82       	std	Y+3, r11	; 0x03
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	16 01       	movw	r2, r12
     a88:	27 01       	movw	r4, r14
     a8a:	55 24       	eor	r5, r5
     a8c:	c2 01       	movw	r24, r4
     a8e:	b1 01       	movw	r22, r2
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	bf 90       	pop	r11
     aa2:	af 90       	pop	r10
     aa4:	9f 90       	pop	r9
     aa6:	8f 90       	pop	r8
     aa8:	7f 90       	pop	r7
     aaa:	6f 90       	pop	r6
     aac:	5f 90       	pop	r5
     aae:	4f 90       	pop	r4
     ab0:	3f 90       	pop	r3
     ab2:	2f 90       	pop	r2
     ab4:	08 95       	ret

00000ab6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     ab6:	4f 92       	push	r4
     ab8:	5f 92       	push	r5
     aba:	6f 92       	push	r6
     abc:	7f 92       	push	r7
     abe:	af 92       	push	r10
     ac0:	bf 92       	push	r11
     ac2:	cf 92       	push	r12
     ac4:	df 92       	push	r13
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
     ad4:	6a 01       	movw	r12, r20
     ad6:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ad8:	8c 01       	movw	r16, r24
     ada:	09 5f       	subi	r16, 0xF9	; 249
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     ade:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     ae2:	eb 85       	ldd	r30, Y+11	; 0x0b
     ae4:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     ae6:	88 81       	ld	r24, Y
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	aa 81       	ldd	r26, Y+2	; 0x02
     aec:	bb 81       	ldd	r27, Y+3	; 0x03
     aee:	c8 2a       	or	r12, r24
     af0:	d9 2a       	or	r13, r25
     af2:	ea 2a       	or	r14, r26
     af4:	fb 2a       	or	r15, r27
     af6:	c8 82       	st	Y, r12
     af8:	d9 82       	std	Y+1, r13	; 0x01
     afa:	ea 82       	std	Y+2, r14	; 0x02
     afc:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     afe:	c1 2c       	mov	r12, r1
     b00:	d1 2c       	mov	r13, r1
     b02:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b04:	3d c0       	rjmp	.+122    	; 0xb80 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     b06:	a4 80       	ldd	r10, Z+4	; 0x04
     b08:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	a2 81       	ldd	r26, Z+2	; 0x02
     b10:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     b12:	ac 01       	movw	r20, r24
     b14:	bd 01       	movw	r22, r26
     b16:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     b18:	b2 fd       	sbrc	r27, 2
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     b1c:	48 80       	ld	r4, Y
     b1e:	59 80       	ldd	r5, Y+1	; 0x01
     b20:	6a 80       	ldd	r6, Y+2	; 0x02
     b22:	7b 80       	ldd	r7, Y+3	; 0x03
     b24:	44 22       	and	r4, r20
     b26:	55 22       	and	r5, r21
     b28:	66 22       	and	r6, r22
     b2a:	77 22       	and	r7, r23
     b2c:	45 28       	or	r4, r5
     b2e:	46 28       	or	r4, r6
     b30:	47 28       	or	r4, r7
     b32:	89 f4       	brne	.+34     	; 0xb56 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	12 c0       	rjmp	.+36     	; 0xb5c <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     b38:	48 80       	ld	r4, Y
     b3a:	59 80       	ldd	r5, Y+1	; 0x01
     b3c:	6a 80       	ldd	r6, Y+2	; 0x02
     b3e:	7b 80       	ldd	r7, Y+3	; 0x03
     b40:	44 22       	and	r4, r20
     b42:	55 22       	and	r5, r21
     b44:	66 22       	and	r6, r22
     b46:	77 22       	and	r7, r23
     b48:	44 15       	cp	r20, r4
     b4a:	55 05       	cpc	r21, r5
     b4c:	66 05       	cpc	r22, r6
     b4e:	77 05       	cpc	r23, r7
     b50:	21 f0       	breq	.+8      	; 0xb5a <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     b5a:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     b5c:	22 23       	and	r18, r18
     b5e:	71 f0       	breq	.+28     	; 0xb7c <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     b60:	b0 ff       	sbrs	r27, 0
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     b64:	c4 2a       	or	r12, r20
     b66:	d5 2a       	or	r13, r21
     b68:	e6 2a       	or	r14, r22
     b6a:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     b6c:	48 81       	ld	r20, Y
     b6e:	59 81       	ldd	r21, Y+1	; 0x01
     b70:	6a 81       	ldd	r22, Y+2	; 0x02
     b72:	7b 81       	ldd	r23, Y+3	; 0x03
     b74:	72 60       	ori	r23, 0x02	; 2
     b76:	cf 01       	movw	r24, r30
     b78:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b7c:	ea 2d       	mov	r30, r10
     b7e:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b80:	e0 17       	cp	r30, r16
     b82:	f1 07       	cpc	r31, r17
     b84:	09 f0       	breq	.+2      	; 0xb88 <xEventGroupSetBits+0xd2>
     b86:	bf cf       	rjmp	.-130    	; 0xb06 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     b88:	c0 94       	com	r12
     b8a:	d0 94       	com	r13
     b8c:	e0 94       	com	r14
     b8e:	f0 94       	com	r15
     b90:	88 81       	ld	r24, Y
     b92:	99 81       	ldd	r25, Y+1	; 0x01
     b94:	aa 81       	ldd	r26, Y+2	; 0x02
     b96:	bb 81       	ldd	r27, Y+3	; 0x03
     b98:	c8 22       	and	r12, r24
     b9a:	d9 22       	and	r13, r25
     b9c:	ea 22       	and	r14, r26
     b9e:	fb 22       	and	r15, r27
     ba0:	c8 82       	st	Y, r12
     ba2:	d9 82       	std	Y+1, r13	; 0x01
     ba4:	ea 82       	std	Y+2, r14	; 0x02
     ba6:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     ba8:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     bac:	68 81       	ld	r22, Y
     bae:	79 81       	ldd	r23, Y+1	; 0x01
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	9b 81       	ldd	r25, Y+3	; 0x03
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	7f 90       	pop	r7
     bca:	6f 90       	pop	r6
     bcc:	5f 90       	pop	r5
     bce:	4f 90       	pop	r4
     bd0:	08 95       	ret

00000bd2 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     bd2:	ee e3       	ldi	r30, 0x3E	; 62
     bd4:	f7 e0       	ldi	r31, 0x07	; 7
     bd6:	a2 e4       	ldi	r26, 0x42	; 66
     bd8:	b7 e0       	ldi	r27, 0x07	; 7
     bda:	b1 83       	std	Z+1, r27	; 0x01
     bdc:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     be2:	e2 e0       	ldi	r30, 0x02	; 2
     be4:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     be6:	f0 93 3d 07 	sts	0x073D, r31	; 0x80073d <pxEnd+0x1>
     bea:	e0 93 3c 07 	sts	0x073C, r30	; 0x80073c <pxEnd>
    pxEnd->xBlockSize = 0;
     bee:	13 82       	std	Z+3, r1	; 0x03
     bf0:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     bf2:	11 82       	std	Z+1, r1	; 0x01
     bf4:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     bf6:	80 ec       	ldi	r24, 0xC0	; 192
     bf8:	99 e0       	ldi	r25, 0x09	; 9
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	9c 93       	st	X, r25
     bfe:	8e 93       	st	-X, r24
     c00:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     c02:	ed 93       	st	X+, r30
     c04:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     c06:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <xMinimumEverFreeBytesRemaining+0x1>
     c0a:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     c0e:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <xFreeBytesRemaining+0x1>
     c12:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e8       	ldi	r25, 0x80	; 128
     c1a:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <xBlockAllocatedBit+0x1>
     c1e:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <xBlockAllocatedBit>
     c22:	08 95       	ret

00000c24 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     c2a:	ae e3       	ldi	r26, 0x3E	; 62
     c2c:	b7 e0       	ldi	r27, 0x07	; 7
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <prvInsertBlockIntoFreeList+0xe>
     c30:	df 01       	movw	r26, r30
     c32:	ed 91       	ld	r30, X+
     c34:	fc 91       	ld	r31, X
     c36:	11 97       	sbiw	r26, 0x01	; 1
     c38:	ec 17       	cp	r30, r28
     c3a:	fd 07       	cpc	r31, r29
     c3c:	c8 f3       	brcs	.-14     	; 0xc30 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	8d 91       	ld	r24, X+
     c42:	9c 91       	ld	r25, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	9d 01       	movw	r18, r26
     c48:	28 0f       	add	r18, r24
     c4a:	39 1f       	adc	r19, r25
     c4c:	c2 17       	cp	r28, r18
     c4e:	d3 07       	cpc	r29, r19
     c50:	49 f4       	brne	.+18     	; 0xc64 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     c52:	2a 81       	ldd	r18, Y+2	; 0x02
     c54:	3b 81       	ldd	r19, Y+3	; 0x03
     c56:	82 0f       	add	r24, r18
     c58:	93 1f       	adc	r25, r19
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	9c 93       	st	X, r25
     c5e:	8e 93       	st	-X, r24
     c60:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     c62:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	9e 01       	movw	r18, r28
     c6a:	28 0f       	add	r18, r24
     c6c:	39 1f       	adc	r19, r25
     c6e:	e2 17       	cp	r30, r18
     c70:	f3 07       	cpc	r31, r19
     c72:	c1 f4       	brne	.+48     	; 0xca4 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     c74:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <pxEnd>
     c78:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <pxEnd+0x1>
     c7c:	e2 17       	cp	r30, r18
     c7e:	f3 07       	cpc	r31, r19
     c80:	71 f0       	breq	.+28     	; 0xc9e <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c82:	22 81       	ldd	r18, Z+2	; 0x02
     c84:	33 81       	ldd	r19, Z+3	; 0x03
     c86:	82 0f       	add	r24, r18
     c88:	93 1f       	adc	r25, r19
     c8a:	9b 83       	std	Y+3, r25	; 0x03
     c8c:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c8e:	ed 91       	ld	r30, X+
     c90:	fc 91       	ld	r31, X
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	99 83       	std	Y+1, r25	; 0x01
     c9a:	88 83       	st	Y, r24
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c9e:	39 83       	std	Y+1, r19	; 0x01
     ca0:	28 83       	st	Y, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     ca4:	f9 83       	std	Y+1, r31	; 0x01
     ca6:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     ca8:	ca 17       	cp	r28, r26
     caa:	db 07       	cpc	r29, r27
     cac:	11 f0       	breq	.+4      	; 0xcb2 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     cae:	cd 93       	st	X+, r28
     cb0:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     cc6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     cca:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <pxEnd>
     cce:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <pxEnd+0x1>
     cd2:	89 2b       	or	r24, r25
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     cd6:	7d df       	rcall	.-262    	; 0xbd2 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     cd8:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <xBlockAllocatedBit>
     cdc:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <xBlockAllocatedBit+0x1>
     ce0:	80 23       	and	r24, r16
     ce2:	91 23       	and	r25, r17
     ce4:	89 2b       	or	r24, r25
     ce6:	09 f0       	breq	.+2      	; 0xcea <pvPortMalloc+0x32>
     ce8:	76 c0       	rjmp	.+236    	; 0xdd6 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cea:	01 15       	cp	r16, r1
     cec:	11 05       	cpc	r17, r1
     cee:	49 f0       	breq	.+18     	; 0xd02 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     cf0:	c8 01       	movw	r24, r16
     cf2:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cf4:	08 17       	cp	r16, r24
     cf6:	19 07       	cpc	r17, r25
     cf8:	18 f0       	brcs	.+6      	; 0xd00 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	10 e0       	ldi	r17, 0x00	; 0
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     d00:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     d02:	01 15       	cp	r16, r1
     d04:	11 05       	cpc	r17, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <pvPortMalloc+0x52>
     d08:	69 c0       	rjmp	.+210    	; 0xddc <pvPortMalloc+0x124>
     d0a:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xFreeBytesRemaining>
     d0e:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xFreeBytesRemaining+0x1>
     d12:	80 17       	cp	r24, r16
     d14:	91 07       	cpc	r25, r17
     d16:	08 f4       	brcc	.+2      	; 0xd1a <pvPortMalloc+0x62>
     d18:	64 c0       	rjmp	.+200    	; 0xde2 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     d1a:	c0 91 3e 07 	lds	r28, 0x073E	; 0x80073e <xStart>
     d1e:	d0 91 3f 07 	lds	r29, 0x073F	; 0x80073f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     d22:	ee e3       	ldi	r30, 0x3E	; 62
     d24:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     d28:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     d2a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	80 17       	cp	r24, r16
     d32:	91 07       	cpc	r25, r17
     d34:	20 f4       	brcc	.+8      	; 0xd3e <pvPortMalloc+0x86>
     d36:	88 81       	ld	r24, Y
     d38:	99 81       	ldd	r25, Y+1	; 0x01
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	a9 f7       	brne	.-22     	; 0xd28 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     d3e:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <pxEnd>
     d42:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <pxEnd+0x1>
     d46:	c8 17       	cp	r28, r24
     d48:	d9 07       	cpc	r29, r25
     d4a:	09 f4       	brne	.+2      	; 0xd4e <pvPortMalloc+0x96>
     d4c:	4d c0       	rjmp	.+154    	; 0xde8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     d4e:	e0 80       	ld	r14, Z
     d50:	f1 80       	ldd	r15, Z+1	; 0x01
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	e8 0e       	add	r14, r24
     d56:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     d58:	88 81       	ld	r24, Y
     d5a:	99 81       	ldd	r25, Y+1	; 0x01
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     d60:	2a 81       	ldd	r18, Y+2	; 0x02
     d62:	3b 81       	ldd	r19, Y+3	; 0x03
     d64:	20 1b       	sub	r18, r16
     d66:	31 0b       	sbc	r19, r17
     d68:	29 30       	cpi	r18, 0x09	; 9
     d6a:	31 05       	cpc	r19, r1
     d6c:	48 f0       	brcs	.+18     	; 0xd80 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     d6e:	ce 01       	movw	r24, r28
     d70:	80 0f       	add	r24, r16
     d72:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     d74:	fc 01       	movw	r30, r24
     d76:	33 83       	std	Z+3, r19	; 0x03
     d78:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     d7a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     d7c:	0a 83       	std	Y+2, r16	; 0x02
     d7e:	52 df       	rcall	.-348    	; 0xc24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     d80:	2a 81       	ldd	r18, Y+2	; 0x02
     d82:	3b 81       	ldd	r19, Y+3	; 0x03
     d84:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xFreeBytesRemaining>
     d88:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xFreeBytesRemaining+0x1>
     d8c:	82 1b       	sub	r24, r18
     d8e:	93 0b       	sbc	r25, r19
     d90:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <xFreeBytesRemaining+0x1>
     d94:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     d98:	40 91 38 07 	lds	r20, 0x0738	; 0x800738 <xMinimumEverFreeBytesRemaining>
     d9c:	50 91 39 07 	lds	r21, 0x0739	; 0x800739 <xMinimumEverFreeBytesRemaining+0x1>
     da0:	84 17       	cp	r24, r20
     da2:	95 07       	cpc	r25, r21
     da4:	20 f4       	brcc	.+8      	; 0xdae <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     da6:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <xMinimumEverFreeBytesRemaining+0x1>
     daa:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     dae:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <xBlockAllocatedBit>
     db2:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <xBlockAllocatedBit+0x1>
     db6:	28 2b       	or	r18, r24
     db8:	39 2b       	or	r19, r25
     dba:	3b 83       	std	Y+3, r19	; 0x03
     dbc:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     dc2:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <xNumberOfSuccessfulAllocations>
     dc6:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <xNumberOfSuccessfulAllocations+0x1>
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <xNumberOfSuccessfulAllocations+0x1>
     dd0:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xNumberOfSuccessfulAllocations>
     dd4:	0b c0       	rjmp	.+22     	; 0xdec <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     dd6:	e1 2c       	mov	r14, r1
     dd8:	f1 2c       	mov	r15, r1
     dda:	08 c0       	rjmp	.+16     	; 0xdec <pvPortMalloc+0x134>
     ddc:	e1 2c       	mov	r14, r1
     dde:	f1 2c       	mov	r15, r1
     de0:	05 c0       	rjmp	.+10     	; 0xdec <pvPortMalloc+0x134>
     de2:	e1 2c       	mov	r14, r1
     de4:	f1 2c       	mov	r15, r1
     de6:	02 c0       	rjmp	.+4      	; 0xdec <pvPortMalloc+0x134>
     de8:	e1 2c       	mov	r14, r1
     dea:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     dec:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     df0:	e1 14       	cp	r14, r1
     df2:	f1 04       	cpc	r15, r1
     df4:	11 f4       	brne	.+4      	; 0xdfa <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     df6:	0e 94 76 1d 	call	0x3aec	; 0x3aec <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     dfa:	c7 01       	movw	r24, r14
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	08 95       	ret

00000e0a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	91 f1       	breq	.+100    	; 0xe7a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     e16:	ec 01       	movw	r28, r24
     e18:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     e1a:	4a 81       	ldd	r20, Y+2	; 0x02
     e1c:	5b 81       	ldd	r21, Y+3	; 0x03
     e1e:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <xBlockAllocatedBit>
     e22:	30 91 33 07 	lds	r19, 0x0733	; 0x800733 <xBlockAllocatedBit+0x1>
     e26:	ba 01       	movw	r22, r20
     e28:	62 23       	and	r22, r18
     e2a:	73 23       	and	r23, r19
     e2c:	67 2b       	or	r22, r23
     e2e:	29 f1       	breq	.+74     	; 0xe7a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     e30:	68 81       	ld	r22, Y
     e32:	79 81       	ldd	r23, Y+1	; 0x01
     e34:	67 2b       	or	r22, r23
     e36:	09 f5       	brne	.+66     	; 0xe7a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     e38:	20 95       	com	r18
     e3a:	30 95       	com	r19
     e3c:	24 23       	and	r18, r20
     e3e:	35 23       	and	r19, r21
     e40:	3b 83       	std	Y+3, r19	; 0x03
     e42:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     e44:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <xFreeBytesRemaining>
     e50:	30 91 3b 07 	lds	r19, 0x073B	; 0x80073b <xFreeBytesRemaining+0x1>
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <xFreeBytesRemaining+0x1>
     e5c:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     e60:	ce 01       	movw	r24, r28
     e62:	e0 de       	rcall	.-576    	; 0xc24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     e64:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <xNumberOfSuccessfulFrees>
     e68:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <xNumberOfSuccessfulFrees+0x1>
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <xNumberOfSuccessfulFrees+0x1>
     e72:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     e76:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e84:	fc 01       	movw	r30, r24
     e86:	03 96       	adiw	r24, 0x03	; 3
     e88:	92 83       	std	Z+2, r25	; 0x02
     e8a:	81 83       	std	Z+1, r24	; 0x01
     e8c:	4f ef       	ldi	r20, 0xFF	; 255
     e8e:	5f ef       	ldi	r21, 0xFF	; 255
     e90:	ba 01       	movw	r22, r20
     e92:	43 83       	std	Z+3, r20	; 0x03
     e94:	54 83       	std	Z+4, r21	; 0x04
     e96:	65 83       	std	Z+5, r22	; 0x05
     e98:	76 83       	std	Z+6, r23	; 0x06
     e9a:	90 87       	std	Z+8, r25	; 0x08
     e9c:	87 83       	std	Z+7, r24	; 0x07
     e9e:	92 87       	std	Z+10, r25	; 0x0a
     ea0:	81 87       	std	Z+9, r24	; 0x09
     ea2:	10 82       	st	Z, r1
     ea4:	08 95       	ret

00000ea6 <vListInitialiseItem>:
     ea6:	fc 01       	movw	r30, r24
     ea8:	13 86       	std	Z+11, r1	; 0x0b
     eaa:	12 86       	std	Z+10, r1	; 0x0a
     eac:	08 95       	ret

00000eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     eb8:	08 81       	ld	r16, Y
     eba:	19 81       	ldd	r17, Y+1	; 0x01
     ebc:	2a 81       	ldd	r18, Y+2	; 0x02
     ebe:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     ec0:	0f 3f       	cpi	r16, 0xFF	; 255
     ec2:	4f ef       	ldi	r20, 0xFF	; 255
     ec4:	14 07       	cpc	r17, r20
     ec6:	24 07       	cpc	r18, r20
     ec8:	34 07       	cpc	r19, r20
     eca:	21 f4       	brne	.+8      	; 0xed4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     ecc:	fc 01       	movw	r30, r24
     ece:	a1 85       	ldd	r26, Z+9	; 0x09
     ed0:	b2 85       	ldd	r27, Z+10	; 0x0a
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ed4:	dc 01       	movw	r26, r24
     ed6:	13 96       	adiw	r26, 0x03	; 3
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <vListInsert+0x2e>
     eda:	df 01       	movw	r26, r30
     edc:	14 96       	adiw	r26, 0x04	; 4
     ede:	ed 91       	ld	r30, X+
     ee0:	fc 91       	ld	r31, X
     ee2:	15 97       	sbiw	r26, 0x05	; 5
     ee4:	40 81       	ld	r20, Z
     ee6:	51 81       	ldd	r21, Z+1	; 0x01
     ee8:	62 81       	ldd	r22, Z+2	; 0x02
     eea:	73 81       	ldd	r23, Z+3	; 0x03
     eec:	04 17       	cp	r16, r20
     eee:	15 07       	cpc	r17, r21
     ef0:	26 07       	cpc	r18, r22
     ef2:	37 07       	cpc	r19, r23
     ef4:	90 f7       	brcc	.-28     	; 0xeda <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     ef6:	14 96       	adiw	r26, 0x04	; 4
     ef8:	ed 91       	ld	r30, X+
     efa:	fc 91       	ld	r31, X
     efc:	15 97       	sbiw	r26, 0x05	; 5
     efe:	fd 83       	std	Y+5, r31	; 0x05
     f00:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     f02:	d7 83       	std	Z+7, r29	; 0x07
     f04:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     f06:	bf 83       	std	Y+7, r27	; 0x07
     f08:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     f0a:	15 96       	adiw	r26, 0x05	; 5
     f0c:	dc 93       	st	X, r29
     f0e:	ce 93       	st	-X, r28
     f10:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     f12:	9b 87       	std	Y+11, r25	; 0x0b
     f14:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     f16:	fc 01       	movw	r30, r24
     f18:	20 81       	ld	r18, Z
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	20 83       	st	Z, r18
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	08 95       	ret

00000f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     f2e:	a2 85       	ldd	r26, Z+10	; 0x0a
     f30:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f32:	c4 81       	ldd	r28, Z+4	; 0x04
     f34:	d5 81       	ldd	r29, Z+5	; 0x05
     f36:	86 81       	ldd	r24, Z+6	; 0x06
     f38:	97 81       	ldd	r25, Z+7	; 0x07
     f3a:	9f 83       	std	Y+7, r25	; 0x07
     f3c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f3e:	c6 81       	ldd	r28, Z+6	; 0x06
     f40:	d7 81       	ldd	r29, Z+7	; 0x07
     f42:	84 81       	ldd	r24, Z+4	; 0x04
     f44:	95 81       	ldd	r25, Z+5	; 0x05
     f46:	9d 83       	std	Y+5, r25	; 0x05
     f48:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     f4a:	11 96       	adiw	r26, 0x01	; 1
     f4c:	8d 91       	ld	r24, X+
     f4e:	9c 91       	ld	r25, X
     f50:	12 97       	sbiw	r26, 0x02	; 2
     f52:	e8 17       	cp	r30, r24
     f54:	f9 07       	cpc	r31, r25
     f56:	31 f4       	brne	.+12     	; 0xf64 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     f58:	86 81       	ldd	r24, Z+6	; 0x06
     f5a:	97 81       	ldd	r25, Z+7	; 0x07
     f5c:	12 96       	adiw	r26, 0x02	; 2
     f5e:	9c 93       	st	X, r25
     f60:	8e 93       	st	-X, r24
     f62:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     f64:	13 86       	std	Z+11, r1	; 0x0b
     f66:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     f68:	8c 91       	ld	r24, X
     f6a:	81 50       	subi	r24, 0x01	; 1
     f6c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     f6e:	8c 91       	ld	r24, X
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     f76:	a8 95       	wdr
     f78:	90 ec       	ldi	r25, 0xC0	; 192
     f7a:	88 e1       	ldi	r24, 0x18	; 24
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	a8 95       	wdr
     f82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f8c:	08 95       	ret

00000f8e <pxPortInitialiseStack>:
     f8e:	fc 01       	movw	r30, r24
     f90:	60 83       	st	Z, r22
     f92:	31 97       	sbiw	r30, 0x01	; 1
     f94:	70 83       	st	Z, r23
     f96:	31 97       	sbiw	r30, 0x01	; 1
     f98:	10 82       	st	Z, r1
     f9a:	31 97       	sbiw	r30, 0x01	; 1
     f9c:	10 82       	st	Z, r1
     f9e:	31 97       	sbiw	r30, 0x01	; 1
     fa0:	20 e8       	ldi	r18, 0x80	; 128
     fa2:	20 83       	st	Z, r18
     fa4:	31 97       	sbiw	r30, 0x01	; 1
     fa6:	10 82       	st	Z, r1
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	10 82       	st	Z, r1
     fac:	31 97       	sbiw	r30, 0x01	; 1
     fae:	10 82       	st	Z, r1
     fb0:	77 97       	sbiw	r30, 0x17	; 23
     fb2:	40 83       	st	Z, r20
     fb4:	31 97       	sbiw	r30, 0x01	; 1
     fb6:	50 83       	st	Z, r21
     fb8:	86 97       	sbiw	r24, 0x26	; 38
     fba:	08 95       	ret

00000fbc <xPortStartScheduler>:
     fbc:	dc df       	rcall	.-72     	; 0xf76 <prvSetupTimerInterrupt>
     fbe:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
     fc2:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
     fc6:	cd 91       	ld	r28, X+
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	dd 91       	ld	r29, X+
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	7f 90       	pop	r7
    1000:	6f 90       	pop	r6
    1002:	5f 90       	pop	r5
    1004:	4f 90       	pop	r4
    1006:	3f 90       	pop	r3
    1008:	2f 90       	pop	r2
    100a:	1f 90       	pop	r1
    100c:	0f 90       	pop	r0
    100e:	0c be       	out	0x3c, r0	; 60
    1010:	0f 90       	pop	r0
    1012:	0b be       	out	0x3b, r0	; 59
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	08 95       	ret
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	08 95       	ret

00001020 <vPortYield>:
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	0f 92       	push	r0
    1028:	0b b6       	in	r0, 0x3b	; 59
    102a:	0f 92       	push	r0
    102c:	0c b6       	in	r0, 0x3c	; 60
    102e:	0f 92       	push	r0
    1030:	1f 92       	push	r1
    1032:	11 24       	eor	r1, r1
    1034:	2f 92       	push	r2
    1036:	3f 92       	push	r3
    1038:	4f 92       	push	r4
    103a:	5f 92       	push	r5
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	6f 93       	push	r22
    105e:	7f 93       	push	r23
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    1074:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    1078:	0d b6       	in	r0, 0x3d	; 61
    107a:	0d 92       	st	X+, r0
    107c:	0e b6       	in	r0, 0x3e	; 62
    107e:	0d 92       	st	X+, r0
    1080:	0e 94 16 14 	call	0x282c	; 0x282c <vTaskSwitchContext>
    1084:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    1088:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    108c:	cd 91       	ld	r28, X+
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	dd 91       	ld	r29, X+
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	bf 91       	pop	r27
    109e:	af 91       	pop	r26
    10a0:	9f 91       	pop	r25
    10a2:	8f 91       	pop	r24
    10a4:	7f 91       	pop	r23
    10a6:	6f 91       	pop	r22
    10a8:	5f 91       	pop	r21
    10aa:	4f 91       	pop	r20
    10ac:	3f 91       	pop	r19
    10ae:	2f 91       	pop	r18
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	7f 90       	pop	r7
    10c6:	6f 90       	pop	r6
    10c8:	5f 90       	pop	r5
    10ca:	4f 90       	pop	r4
    10cc:	3f 90       	pop	r3
    10ce:	2f 90       	pop	r2
    10d0:	1f 90       	pop	r1
    10d2:	0f 90       	pop	r0
    10d4:	0c be       	out	0x3c, r0	; 60
    10d6:	0f 90       	pop	r0
    10d8:	0b be       	out	0x3b, r0	; 59
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	08 95       	ret

000010e2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	0f 92       	push	r0
    10ea:	0b b6       	in	r0, 0x3b	; 59
    10ec:	0f 92       	push	r0
    10ee:	0c b6       	in	r0, 0x3c	; 60
    10f0:	0f 92       	push	r0
    10f2:	1f 92       	push	r1
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 92       	push	r2
    10f8:	3f 92       	push	r3
    10fa:	4f 92       	push	r4
    10fc:	5f 92       	push	r5
    10fe:	6f 92       	push	r6
    1100:	7f 92       	push	r7
    1102:	8f 92       	push	r8
    1104:	9f 92       	push	r9
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31
    1132:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    1136:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    113a:	0d b6       	in	r0, 0x3d	; 61
    113c:	0d 92       	st	X+, r0
    113e:	0e b6       	in	r0, 0x3e	; 62
    1140:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1142:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1144:	0e 94 8e 11 	call	0x231c	; 0x231c <xTaskIncrementTick>
    1148:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    114a:	0e 94 16 14 	call	0x282c	; 0x282c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    114e:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    1152:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    1156:	cd 91       	ld	r28, X+
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	dd 91       	ld	r29, X+
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	bf 90       	pop	r11
    1188:	af 90       	pop	r10
    118a:	9f 90       	pop	r9
    118c:	8f 90       	pop	r8
    118e:	7f 90       	pop	r7
    1190:	6f 90       	pop	r6
    1192:	5f 90       	pop	r5
    1194:	4f 90       	pop	r4
    1196:	3f 90       	pop	r3
    1198:	2f 90       	pop	r2
    119a:	1f 90       	pop	r1
    119c:	0f 90       	pop	r0
    119e:	0c be       	out	0x3c, r0	; 60
    11a0:	0f 90       	pop	r0
    11a2:	0b be       	out	0x3b, r0	; 59
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    11aa:	08 95       	ret

000011ac <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    11ac:	9a df       	rcall	.-204    	; 0x10e2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    11ae:	18 95       	reti

000011b0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	0f 92       	push	r0
    11b6:	fc 01       	movw	r30, r24
    11b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    11ba:	81 11       	cpse	r24, r1
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <prvIsQueueEmpty+0x12>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <prvIsQueueEmpty+0x14>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	08 95       	ret

000011ca <prvIsQueueFull>:
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	0f 92       	push	r0
    11d0:	fc 01       	movw	r30, r24
    11d2:	26 8d       	ldd	r18, Z+30	; 0x1e
    11d4:	87 8d       	ldd	r24, Z+31	; 0x1f
    11d6:	28 13       	cpse	r18, r24
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <prvIsQueueFull+0x14>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <prvIsQueueFull+0x16>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	08 95       	ret

000011e6 <prvCopyDataToQueue>:
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	04 2f       	mov	r16, r20
    11f2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11f4:	48 a1       	ldd	r20, Y+32	; 0x20
    11f6:	41 11       	cpse	r20, r1
    11f8:	0c c0       	rjmp	.+24     	; 0x1212 <prvCopyDataToQueue+0x2c>
    11fa:	88 81       	ld	r24, Y
    11fc:	99 81       	ldd	r25, Y+1	; 0x01
    11fe:	89 2b       	or	r24, r25
    1200:	09 f0       	breq	.+2      	; 0x1204 <prvCopyDataToQueue+0x1e>
    1202:	42 c0       	rjmp	.+132    	; 0x1288 <prvCopyDataToQueue+0xa2>
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <xTaskPriorityDisinherit>
    120c:	1d 82       	std	Y+5, r1	; 0x05
    120e:	1c 82       	std	Y+4, r1	; 0x04
    1210:	42 c0       	rjmp	.+132    	; 0x1296 <prvCopyDataToQueue+0xb0>
    1212:	01 11       	cpse	r16, r1
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <prvCopyDataToQueue+0x5e>
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	9b 81       	ldd	r25, Y+3	; 0x03
    121c:	0e 94 3a 31 	call	0x6274	; 0x6274 <memcpy>
    1220:	28 a1       	ldd	r18, Y+32	; 0x20
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	82 0f       	add	r24, r18
    1228:	91 1d       	adc	r25, r1
    122a:	9b 83       	std	Y+3, r25	; 0x03
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	82 17       	cp	r24, r18
    1234:	93 07       	cpc	r25, r19
    1236:	50 f1       	brcs	.+84     	; 0x128c <prvCopyDataToQueue+0xa6>
    1238:	88 81       	ld	r24, Y
    123a:	99 81       	ldd	r25, Y+1	; 0x01
    123c:	9b 83       	std	Y+3, r25	; 0x03
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	29 c0       	rjmp	.+82     	; 0x1296 <prvCopyDataToQueue+0xb0>
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	8e 81       	ldd	r24, Y+6	; 0x06
    1248:	9f 81       	ldd	r25, Y+7	; 0x07
    124a:	0e 94 3a 31 	call	0x6274	; 0x6274 <memcpy>
    124e:	88 a1       	ldd	r24, Y+32	; 0x20
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	91 95       	neg	r25
    1254:	81 95       	neg	r24
    1256:	91 09       	sbc	r25, r1
    1258:	2e 81       	ldd	r18, Y+6	; 0x06
    125a:	3f 81       	ldd	r19, Y+7	; 0x07
    125c:	28 0f       	add	r18, r24
    125e:	39 1f       	adc	r19, r25
    1260:	3f 83       	std	Y+7, r19	; 0x07
    1262:	2e 83       	std	Y+6, r18	; 0x06
    1264:	48 81       	ld	r20, Y
    1266:	59 81       	ldd	r21, Y+1	; 0x01
    1268:	24 17       	cp	r18, r20
    126a:	35 07       	cpc	r19, r21
    126c:	30 f4       	brcc	.+12     	; 0x127a <prvCopyDataToQueue+0x94>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	82 0f       	add	r24, r18
    1274:	93 1f       	adc	r25, r19
    1276:	9f 83       	std	Y+7, r25	; 0x07
    1278:	8e 83       	std	Y+6, r24	; 0x06
    127a:	02 30       	cpi	r16, 0x02	; 2
    127c:	49 f4       	brne	.+18     	; 0x1290 <prvCopyDataToQueue+0xaa>
    127e:	11 23       	and	r17, r17
    1280:	49 f0       	breq	.+18     	; 0x1294 <prvCopyDataToQueue+0xae>
    1282:	11 50       	subi	r17, 0x01	; 1
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <prvCopyDataToQueue+0xb0>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <prvCopyDataToQueue+0xb0>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <prvCopyDataToQueue+0xb0>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <prvCopyDataToQueue+0xb0>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	1f 5f       	subi	r17, 0xFF	; 255
    1298:	1e 8f       	std	Y+30, r17	; 0x1e
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	08 95       	ret

000012a4 <prvCopyDataFromQueue>:
    12a4:	fc 01       	movw	r30, r24
    12a6:	40 a1       	ldd	r20, Z+32	; 0x20
    12a8:	44 23       	and	r20, r20
    12aa:	a9 f0       	breq	.+42     	; 0x12d6 <prvCopyDataFromQueue+0x32>
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	26 81       	ldd	r18, Z+6	; 0x06
    12b0:	37 81       	ldd	r19, Z+7	; 0x07
    12b2:	24 0f       	add	r18, r20
    12b4:	35 1f       	adc	r19, r21
    12b6:	37 83       	std	Z+7, r19	; 0x07
    12b8:	26 83       	std	Z+6, r18	; 0x06
    12ba:	84 81       	ldd	r24, Z+4	; 0x04
    12bc:	95 81       	ldd	r25, Z+5	; 0x05
    12be:	28 17       	cp	r18, r24
    12c0:	39 07       	cpc	r19, r25
    12c2:	20 f0       	brcs	.+8      	; 0x12cc <prvCopyDataFromQueue+0x28>
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	97 83       	std	Z+7, r25	; 0x07
    12ca:	86 83       	std	Z+6, r24	; 0x06
    12cc:	cb 01       	movw	r24, r22
    12ce:	66 81       	ldd	r22, Z+6	; 0x06
    12d0:	77 81       	ldd	r23, Z+7	; 0x07
    12d2:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <memcpy>
    12d6:	08 95       	ret

000012d8 <prvUnlockQueue>:
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	1a a1       	ldd	r17, Y+34	; 0x22
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <prvUnlockQueue+0x28>
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	88 23       	and	r24, r24
    12ee:	51 f0       	breq	.+20     	; 0x1304 <prvUnlockQueue+0x2c>
    12f0:	ce 01       	movw	r24, r28
    12f2:	43 96       	adiw	r24, 0x13	; 19
    12f4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <xTaskRemoveFromEventList>
    12f8:	81 11       	cpse	r24, r1
    12fa:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <vTaskMissedYield>
    12fe:	11 50       	subi	r17, 0x01	; 1
    1300:	11 16       	cp	r1, r17
    1302:	9c f3       	brlt	.-26     	; 0x12ea <prvUnlockQueue+0x12>
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	8a a3       	std	Y+34, r24	; 0x22
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	0f 92       	push	r0
    1312:	19 a1       	ldd	r17, Y+33	; 0x21
    1314:	0b c0       	rjmp	.+22     	; 0x132c <prvUnlockQueue+0x54>
    1316:	88 85       	ldd	r24, Y+8	; 0x08
    1318:	88 23       	and	r24, r24
    131a:	51 f0       	breq	.+20     	; 0x1330 <prvUnlockQueue+0x58>
    131c:	ce 01       	movw	r24, r28
    131e:	08 96       	adiw	r24, 0x08	; 8
    1320:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <xTaskRemoveFromEventList>
    1324:	81 11       	cpse	r24, r1
    1326:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <vTaskMissedYield>
    132a:	11 50       	subi	r17, 0x01	; 1
    132c:	11 16       	cp	r1, r17
    132e:	9c f3       	brlt	.-26     	; 0x1316 <prvUnlockQueue+0x3e>
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	89 a3       	std	Y+33, r24	; 0x21
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	08 95       	ret

00001340 <xQueueGenericReset>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	ec 01       	movw	r28, r24
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	0f 92       	push	r0
    134c:	e8 81       	ld	r30, Y
    134e:	f9 81       	ldd	r31, Y+1	; 0x01
    1350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1352:	28 a1       	ldd	r18, Y+32	; 0x20
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	82 9f       	mul	r24, r18
    135a:	a0 01       	movw	r20, r0
    135c:	83 9f       	mul	r24, r19
    135e:	50 0d       	add	r21, r0
    1360:	92 9f       	mul	r25, r18
    1362:	50 0d       	add	r21, r0
    1364:	11 24       	eor	r1, r1
    1366:	4e 0f       	add	r20, r30
    1368:	5f 1f       	adc	r21, r31
    136a:	5d 83       	std	Y+5, r21	; 0x05
    136c:	4c 83       	std	Y+4, r20	; 0x04
    136e:	1e 8e       	std	Y+30, r1	; 0x1e
    1370:	fb 83       	std	Y+3, r31	; 0x03
    1372:	ea 83       	std	Y+2, r30	; 0x02
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	28 9f       	mul	r18, r24
    1378:	a0 01       	movw	r20, r0
    137a:	29 9f       	mul	r18, r25
    137c:	50 0d       	add	r21, r0
    137e:	38 9f       	mul	r19, r24
    1380:	50 0d       	add	r21, r0
    1382:	11 24       	eor	r1, r1
    1384:	cf 01       	movw	r24, r30
    1386:	84 0f       	add	r24, r20
    1388:	95 1f       	adc	r25, r21
    138a:	9f 83       	std	Y+7, r25	; 0x07
    138c:	8e 83       	std	Y+6, r24	; 0x06
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	89 a3       	std	Y+33, r24	; 0x21
    1392:	8a a3       	std	Y+34, r24	; 0x22
    1394:	61 11       	cpse	r22, r1
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <xQueueGenericReset+0x6e>
    1398:	88 85       	ldd	r24, Y+8	; 0x08
    139a:	88 23       	and	r24, r24
    139c:	71 f0       	breq	.+28     	; 0x13ba <xQueueGenericReset+0x7a>
    139e:	ce 01       	movw	r24, r28
    13a0:	08 96       	adiw	r24, 0x08	; 8
    13a2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <xTaskRemoveFromEventList>
    13a6:	88 23       	and	r24, r24
    13a8:	41 f0       	breq	.+16     	; 0x13ba <xQueueGenericReset+0x7a>
    13aa:	3a de       	rcall	.-908    	; 0x1020 <vPortYield>
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <xQueueGenericReset+0x7a>
    13ae:	ce 01       	movw	r24, r28
    13b0:	08 96       	adiw	r24, 0x08	; 8
    13b2:	68 dd       	rcall	.-1328   	; 0xe84 <vListInitialise>
    13b4:	ce 01       	movw	r24, r28
    13b6:	43 96       	adiw	r24, 0x13	; 19
    13b8:	65 dd       	rcall	.-1334   	; 0xe84 <vListInitialise>
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <prvInitialiseNewQueue>:
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	f8 01       	movw	r30, r16
    13cc:	61 11       	cpse	r22, r1
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <prvInitialiseNewQueue+0x10>
    13d0:	11 83       	std	Z+1, r17	; 0x01
    13d2:	00 83       	st	Z, r16
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <prvInitialiseNewQueue+0x14>
    13d6:	51 83       	std	Z+1, r21	; 0x01
    13d8:	40 83       	st	Z, r20
    13da:	87 8f       	std	Z+31, r24	; 0x1f
    13dc:	60 a3       	std	Z+32, r22	; 0x20
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	cf 01       	movw	r24, r30
    13e2:	ae df       	rcall	.-164    	; 0x1340 <xQueueGenericReset>
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <xQueueGenericCreate>:
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	f8 2e       	mov	r15, r24
    13fa:	e6 2e       	mov	r14, r22
    13fc:	d4 2e       	mov	r13, r20
    13fe:	86 9f       	mul	r24, r22
    1400:	c0 01       	movw	r24, r0
    1402:	11 24       	eor	r1, r1
    1404:	83 96       	adiw	r24, 0x23	; 35
    1406:	58 dc       	rcall	.-1872   	; 0xcb8 <pvPortMalloc>
    1408:	ec 01       	movw	r28, r24
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	41 f0       	breq	.+16     	; 0x141e <xQueueGenericCreate+0x34>
    140e:	8c 01       	movw	r16, r24
    1410:	2d 2d       	mov	r18, r13
    1412:	ac 01       	movw	r20, r24
    1414:	4d 5d       	subi	r20, 0xDD	; 221
    1416:	5f 4f       	sbci	r21, 0xFF	; 255
    1418:	6e 2d       	mov	r22, r14
    141a:	8f 2d       	mov	r24, r15
    141c:	d4 df       	rcall	.-88     	; 0x13c6 <prvInitialiseNewQueue>
    141e:	ce 01       	movw	r24, r28
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	08 95       	ret

00001430 <xQueueGenericSend>:
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	29 97       	sbiw	r28, 0x09	; 9
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	7c 01       	movw	r14, r24
    1452:	6b 01       	movw	r12, r22
    1454:	2e 83       	std	Y+6, r18	; 0x06
    1456:	3f 83       	std	Y+7, r19	; 0x07
    1458:	48 87       	std	Y+8, r20	; 0x08
    145a:	59 87       	std	Y+9, r21	; 0x09
    145c:	10 e0       	ldi	r17, 0x00	; 0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	0f 92       	push	r0
    1464:	f7 01       	movw	r30, r14
    1466:	96 8d       	ldd	r25, Z+30	; 0x1e
    1468:	87 8d       	ldd	r24, Z+31	; 0x1f
    146a:	98 17       	cp	r25, r24
    146c:	10 f0       	brcs	.+4      	; 0x1472 <xQueueGenericSend+0x42>
    146e:	02 30       	cpi	r16, 0x02	; 2
    1470:	b1 f4       	brne	.+44     	; 0x149e <xQueueGenericSend+0x6e>
    1472:	40 2f       	mov	r20, r16
    1474:	b6 01       	movw	r22, r12
    1476:	c7 01       	movw	r24, r14
    1478:	b6 de       	rcall	.-660    	; 0x11e6 <prvCopyDataToQueue>
    147a:	f7 01       	movw	r30, r14
    147c:	93 89       	ldd	r25, Z+19	; 0x13
    147e:	99 23       	and	r25, r25
    1480:	41 f0       	breq	.+16     	; 0x1492 <xQueueGenericSend+0x62>
    1482:	c7 01       	movw	r24, r14
    1484:	43 96       	adiw	r24, 0x13	; 19
    1486:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <xTaskRemoveFromEventList>
    148a:	88 23       	and	r24, r24
    148c:	21 f0       	breq	.+8      	; 0x1496 <xQueueGenericSend+0x66>
    148e:	c8 dd       	rcall	.-1136   	; 0x1020 <vPortYield>
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <xQueueGenericSend+0x66>
    1492:	81 11       	cpse	r24, r1
    1494:	c5 dd       	rcall	.-1142   	; 0x1020 <vPortYield>
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	4c c0       	rjmp	.+152    	; 0x1536 <xQueueGenericSend+0x106>
    149e:	8e 81       	ldd	r24, Y+6	; 0x06
    14a0:	9f 81       	ldd	r25, Y+7	; 0x07
    14a2:	a8 85       	ldd	r26, Y+8	; 0x08
    14a4:	b9 85       	ldd	r27, Y+9	; 0x09
    14a6:	89 2b       	or	r24, r25
    14a8:	8a 2b       	or	r24, r26
    14aa:	8b 2b       	or	r24, r27
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <xQueueGenericSend+0x86>
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	40 c0       	rjmp	.+128    	; 0x1536 <xQueueGenericSend+0x106>
    14b6:	11 11       	cpse	r17, r1
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <xQueueGenericSend+0x94>
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <vTaskInternalSetTimeOutState>
    14c2:	11 e0       	ldi	r17, 0x01	; 1
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	15 d7       	rcall	.+3626   	; 0x22f4 <vTaskSuspendAll>
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	0f 92       	push	r0
    14d0:	f7 01       	movw	r30, r14
    14d2:	81 a1       	ldd	r24, Z+33	; 0x21
    14d4:	8f 3f       	cpi	r24, 0xFF	; 255
    14d6:	09 f4       	brne	.+2      	; 0x14da <xQueueGenericSend+0xaa>
    14d8:	11 a2       	std	Z+33, r1	; 0x21
    14da:	f7 01       	movw	r30, r14
    14dc:	82 a1       	ldd	r24, Z+34	; 0x22
    14de:	8f 3f       	cpi	r24, 0xFF	; 255
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <xQueueGenericSend+0xb4>
    14e2:	12 a2       	std	Z+34, r1	; 0x22
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	be 01       	movw	r22, r28
    14ea:	6a 5f       	subi	r22, 0xFA	; 250
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <xTaskCheckForTimeOut>
    14f6:	81 11       	cpse	r24, r1
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <xQueueGenericSend+0xfc>
    14fa:	c7 01       	movw	r24, r14
    14fc:	66 de       	rcall	.-820    	; 0x11ca <prvIsQueueFull>
    14fe:	88 23       	and	r24, r24
    1500:	81 f0       	breq	.+32     	; 0x1522 <xQueueGenericSend+0xf2>
    1502:	4e 81       	ldd	r20, Y+6	; 0x06
    1504:	5f 81       	ldd	r21, Y+7	; 0x07
    1506:	68 85       	ldd	r22, Y+8	; 0x08
    1508:	79 85       	ldd	r23, Y+9	; 0x09
    150a:	c7 01       	movw	r24, r14
    150c:	08 96       	adiw	r24, 0x08	; 8
    150e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <vTaskPlaceOnEventList>
    1512:	c7 01       	movw	r24, r14
    1514:	e1 de       	rcall	.-574    	; 0x12d8 <prvUnlockQueue>
    1516:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
    151a:	81 11       	cpse	r24, r1
    151c:	a0 cf       	rjmp	.-192    	; 0x145e <xQueueGenericSend+0x2e>
    151e:	80 dd       	rcall	.-1280   	; 0x1020 <vPortYield>
    1520:	9e cf       	rjmp	.-196    	; 0x145e <xQueueGenericSend+0x2e>
    1522:	c7 01       	movw	r24, r14
    1524:	d9 de       	rcall	.-590    	; 0x12d8 <prvUnlockQueue>
    1526:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
    152a:	99 cf       	rjmp	.-206    	; 0x145e <xQueueGenericSend+0x2e>
    152c:	c7 01       	movw	r24, r14
    152e:	d4 de       	rcall	.-600    	; 0x12d8 <prvUnlockQueue>
    1530:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	29 96       	adiw	r28, 0x09	; 9
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	08 95       	ret

00001554 <prvInitialiseMutex>:
    1554:	0f 93       	push	r16
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	69 f0       	breq	.+26     	; 0x1574 <prvInitialiseMutex+0x20>
    155a:	fc 01       	movw	r30, r24
    155c:	15 82       	std	Z+5, r1	; 0x05
    155e:	14 82       	std	Z+4, r1	; 0x04
    1560:	11 82       	std	Z+1, r1	; 0x01
    1562:	10 82       	st	Z, r1
    1564:	16 82       	std	Z+6, r1	; 0x06
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	5e df       	rcall	.-324    	; 0x1430 <xQueueGenericSend>
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <xQueueCreateMutex>:
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	48 2f       	mov	r20, r24
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	33 df       	rcall	.-410    	; 0x13ea <xQueueGenericCreate>
    1584:	ec 01       	movw	r28, r24
    1586:	e6 df       	rcall	.-52     	; 0x1554 <prvInitialiseMutex>
    1588:	ce 01       	movw	r24, r28
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <xQueueGenericSendFromISR>:
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	8a 01       	movw	r16, r20
    159e:	fc 01       	movw	r30, r24
    15a0:	56 8d       	ldd	r21, Z+30	; 0x1e
    15a2:	37 8d       	ldd	r19, Z+31	; 0x1f
    15a4:	53 17       	cp	r21, r19
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <xQueueGenericSendFromISR+0x1c>
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	f9 f4       	brne	.+62     	; 0x15ea <xQueueGenericSendFromISR+0x5a>
    15ac:	42 2f       	mov	r20, r18
    15ae:	78 01       	movw	r14, r16
    15b0:	ec 01       	movw	r28, r24
    15b2:	1a a1       	ldd	r17, Y+34	; 0x22
    15b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b6:	ce 01       	movw	r24, r28
    15b8:	16 de       	rcall	.-980    	; 0x11e6 <prvCopyDataToQueue>
    15ba:	1f 3f       	cpi	r17, 0xFF	; 255
    15bc:	81 f4       	brne	.+32     	; 0x15de <xQueueGenericSendFromISR+0x4e>
    15be:	8b 89       	ldd	r24, Y+19	; 0x13
    15c0:	88 23       	and	r24, r24
    15c2:	a9 f0       	breq	.+42     	; 0x15ee <xQueueGenericSendFromISR+0x5e>
    15c4:	ce 01       	movw	r24, r28
    15c6:	43 96       	adiw	r24, 0x13	; 19
    15c8:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <xTaskRemoveFromEventList>
    15cc:	88 23       	and	r24, r24
    15ce:	89 f0       	breq	.+34     	; 0x15f2 <xQueueGenericSendFromISR+0x62>
    15d0:	e1 14       	cp	r14, r1
    15d2:	f1 04       	cpc	r15, r1
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <xQueueGenericSendFromISR+0x66>
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	f7 01       	movw	r30, r14
    15da:	80 83       	st	Z, r24
    15dc:	0d c0       	rjmp	.+26     	; 0x15f8 <xQueueGenericSendFromISR+0x68>
    15de:	ff 24       	eor	r15, r15
    15e0:	f3 94       	inc	r15
    15e2:	f1 0e       	add	r15, r17
    15e4:	fa a2       	std	Y+34, r15	; 0x22
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <xQueueGenericSendFromISR+0x68>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <xQueueGenericSendFromISR+0x68>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <xQueueGenericSendFromISR+0x68>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <xQueueGenericSendFromISR+0x68>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	08 95       	ret

00001606 <xQueueReceive>:
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	29 97       	sbiw	r28, 0x09	; 9
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	8c 01       	movw	r16, r24
    1628:	6b 01       	movw	r12, r22
    162a:	2e 83       	std	Y+6, r18	; 0x06
    162c:	3f 83       	std	Y+7, r19	; 0x07
    162e:	48 87       	std	Y+8, r20	; 0x08
    1630:	59 87       	std	Y+9, r21	; 0x09
    1632:	e1 2c       	mov	r14, r1
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	0f 92       	push	r0
    163a:	f8 01       	movw	r30, r16
    163c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    163e:	ff 20       	and	r15, r15
    1640:	99 f0       	breq	.+38     	; 0x1668 <xQueueReceive+0x62>
    1642:	b6 01       	movw	r22, r12
    1644:	c8 01       	movw	r24, r16
    1646:	2e de       	rcall	.-932    	; 0x12a4 <prvCopyDataFromQueue>
    1648:	fa 94       	dec	r15
    164a:	f8 01       	movw	r30, r16
    164c:	f6 8e       	std	Z+30, r15	; 0x1e
    164e:	80 85       	ldd	r24, Z+8	; 0x08
    1650:	88 23       	and	r24, r24
    1652:	31 f0       	breq	.+12     	; 0x1660 <xQueueReceive+0x5a>
    1654:	c8 01       	movw	r24, r16
    1656:	08 96       	adiw	r24, 0x08	; 8
    1658:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <xTaskRemoveFromEventList>
    165c:	81 11       	cpse	r24, r1
    165e:	e0 dc       	rcall	.-1600   	; 0x1020 <vPortYield>
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	4f c0       	rjmp	.+158    	; 0x1706 <xQueueReceive+0x100>
    1668:	8e 81       	ldd	r24, Y+6	; 0x06
    166a:	9f 81       	ldd	r25, Y+7	; 0x07
    166c:	a8 85       	ldd	r26, Y+8	; 0x08
    166e:	b9 85       	ldd	r27, Y+9	; 0x09
    1670:	89 2b       	or	r24, r25
    1672:	8a 2b       	or	r24, r26
    1674:	8b 2b       	or	r24, r27
    1676:	21 f4       	brne	.+8      	; 0x1680 <xQueueReceive+0x7a>
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	43 c0       	rjmp	.+134    	; 0x1706 <xQueueReceive+0x100>
    1680:	e1 10       	cpse	r14, r1
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <xQueueReceive+0x8a>
    1684:	ce 01       	movw	r24, r28
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <vTaskInternalSetTimeOutState>
    168c:	ee 24       	eor	r14, r14
    168e:	e3 94       	inc	r14
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	2f d6       	rcall	.+3166   	; 0x22f4 <vTaskSuspendAll>
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	0f 92       	push	r0
    169c:	f8 01       	movw	r30, r16
    169e:	81 a1       	ldd	r24, Z+33	; 0x21
    16a0:	8f 3f       	cpi	r24, 0xFF	; 255
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <xQueueReceive+0xa0>
    16a4:	11 a2       	std	Z+33, r1	; 0x21
    16a6:	f8 01       	movw	r30, r16
    16a8:	82 a1       	ldd	r24, Z+34	; 0x22
    16aa:	8f 3f       	cpi	r24, 0xFF	; 255
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <xQueueReceive+0xaa>
    16ae:	12 a2       	std	Z+34, r1	; 0x22
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	be 01       	movw	r22, r28
    16b6:	6a 5f       	subi	r22, 0xFA	; 250
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	ce 01       	movw	r24, r28
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <xTaskCheckForTimeOut>
    16c2:	81 11       	cpse	r24, r1
    16c4:	17 c0       	rjmp	.+46     	; 0x16f4 <xQueueReceive+0xee>
    16c6:	c8 01       	movw	r24, r16
    16c8:	73 dd       	rcall	.-1306   	; 0x11b0 <prvIsQueueEmpty>
    16ca:	88 23       	and	r24, r24
    16cc:	79 f0       	breq	.+30     	; 0x16ec <xQueueReceive+0xe6>
    16ce:	4e 81       	ldd	r20, Y+6	; 0x06
    16d0:	5f 81       	ldd	r21, Y+7	; 0x07
    16d2:	68 85       	ldd	r22, Y+8	; 0x08
    16d4:	79 85       	ldd	r23, Y+9	; 0x09
    16d6:	c8 01       	movw	r24, r16
    16d8:	43 96       	adiw	r24, 0x13	; 19
    16da:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <vTaskPlaceOnEventList>
    16de:	c8 01       	movw	r24, r16
    16e0:	fb dd       	rcall	.-1034   	; 0x12d8 <prvUnlockQueue>
    16e2:	48 d7       	rcall	.+3728   	; 0x2574 <xTaskResumeAll>
    16e4:	81 11       	cpse	r24, r1
    16e6:	a6 cf       	rjmp	.-180    	; 0x1634 <xQueueReceive+0x2e>
    16e8:	9b dc       	rcall	.-1738   	; 0x1020 <vPortYield>
    16ea:	a4 cf       	rjmp	.-184    	; 0x1634 <xQueueReceive+0x2e>
    16ec:	c8 01       	movw	r24, r16
    16ee:	f4 dd       	rcall	.-1048   	; 0x12d8 <prvUnlockQueue>
    16f0:	41 d7       	rcall	.+3714   	; 0x2574 <xTaskResumeAll>
    16f2:	a0 cf       	rjmp	.-192    	; 0x1634 <xQueueReceive+0x2e>
    16f4:	c8 01       	movw	r24, r16
    16f6:	f0 dd       	rcall	.-1056   	; 0x12d8 <prvUnlockQueue>
    16f8:	3d d7       	rcall	.+3706   	; 0x2574 <xTaskResumeAll>
    16fa:	c8 01       	movw	r24, r16
    16fc:	59 dd       	rcall	.-1358   	; 0x11b0 <prvIsQueueEmpty>
    16fe:	88 23       	and	r24, r24
    1700:	09 f4       	brne	.+2      	; 0x1704 <xQueueReceive+0xfe>
    1702:	98 cf       	rjmp	.-208    	; 0x1634 <xQueueReceive+0x2e>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	29 96       	adiw	r28, 0x09	; 9
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	08 95       	ret

00001724 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	0f 92       	push	r0
    1730:	89 a1       	ldd	r24, Y+33	; 0x21
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	09 f4       	brne	.+2      	; 0x1738 <vQueueWaitForMessageRestricted+0x14>
    1736:	19 a2       	std	Y+33, r1	; 0x21
    1738:	8a a1       	ldd	r24, Y+34	; 0x22
    173a:	8f 3f       	cpi	r24, 0xFF	; 255
    173c:	09 f4       	brne	.+2      	; 0x1740 <vQueueWaitForMessageRestricted+0x1c>
    173e:	1a a2       	std	Y+34, r1	; 0x22
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1744:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1746:	81 11       	cpse	r24, r1
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    174a:	ce 01       	movw	r24, r28
    174c:	43 96       	adiw	r24, 0x13	; 19
    174e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1752:	ce 01       	movw	r24, r28
    1754:	c1 dd       	rcall	.-1150   	; 0x12d8 <prvUnlockQueue>
    }
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    175c:	fc 01       	movw	r30, r24
    175e:	44 81       	ldd	r20, Z+4	; 0x04
    1760:	55 81       	ldd	r21, Z+5	; 0x05
    1762:	22 81       	ldd	r18, Z+2	; 0x02
    1764:	33 81       	ldd	r19, Z+3	; 0x03
    1766:	24 0f       	add	r18, r20
    1768:	35 1f       	adc	r19, r21
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	b9 01       	movw	r22, r18
    1770:	68 1b       	sub	r22, r24
    1772:	79 0b       	sbc	r23, r25
    1774:	cb 01       	movw	r24, r22
    1776:	64 17       	cp	r22, r20
    1778:	75 07       	cpc	r23, r21
    177a:	10 f0       	brcs	.+4      	; 0x1780 <prvBytesInBuffer+0x24>
    177c:	84 1b       	sub	r24, r20
    177e:	95 0b       	sbc	r25, r21
    1780:	08 95       	ret

00001782 <prvInitialiseNewStreamBuffer>:
    1782:	0f 93       	push	r16
    1784:	fc 01       	movw	r30, r24
    1786:	8f e0       	ldi	r24, 0x0F	; 15
    1788:	df 01       	movw	r26, r30
    178a:	1d 92       	st	X+, r1
    178c:	8a 95       	dec	r24
    178e:	e9 f7       	brne	.-6      	; 0x178a <prvInitialiseNewStreamBuffer+0x8>
    1790:	75 87       	std	Z+13, r23	; 0x0d
    1792:	64 87       	std	Z+12, r22	; 0x0c
    1794:	55 83       	std	Z+5, r21	; 0x05
    1796:	44 83       	std	Z+4, r20	; 0x04
    1798:	37 83       	std	Z+7, r19	; 0x07
    179a:	26 83       	std	Z+6, r18	; 0x06
    179c:	06 87       	std	Z+14, r16	; 0x0e
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <prvWriteBytesToBuffer>:
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	6c 01       	movw	r12, r24
    17b8:	5b 01       	movw	r10, r22
    17ba:	7a 01       	movw	r14, r20
    17bc:	fc 01       	movw	r30, r24
    17be:	c2 81       	ldd	r28, Z+2	; 0x02
    17c0:	d3 81       	ldd	r29, Z+3	; 0x03
    17c2:	04 81       	ldd	r16, Z+4	; 0x04
    17c4:	15 81       	ldd	r17, Z+5	; 0x05
    17c6:	0c 1b       	sub	r16, r28
    17c8:	1d 0b       	sbc	r17, r29
    17ca:	40 17       	cp	r20, r16
    17cc:	51 07       	cpc	r21, r17
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <prvWriteBytesToBuffer+0x30>
    17d0:	8a 01       	movw	r16, r20
    17d2:	f6 01       	movw	r30, r12
    17d4:	84 85       	ldd	r24, Z+12	; 0x0c
    17d6:	95 85       	ldd	r25, Z+13	; 0x0d
    17d8:	a8 01       	movw	r20, r16
    17da:	b5 01       	movw	r22, r10
    17dc:	8c 0f       	add	r24, r28
    17de:	9d 1f       	adc	r25, r29
    17e0:	0e 94 3a 31 	call	0x6274	; 0x6274 <memcpy>
    17e4:	0e 15       	cp	r16, r14
    17e6:	1f 05       	cpc	r17, r15
    17e8:	58 f4       	brcc	.+22     	; 0x1800 <prvWriteBytesToBuffer+0x5e>
    17ea:	a7 01       	movw	r20, r14
    17ec:	40 1b       	sub	r20, r16
    17ee:	51 0b       	sbc	r21, r17
    17f0:	b5 01       	movw	r22, r10
    17f2:	60 0f       	add	r22, r16
    17f4:	71 1f       	adc	r23, r17
    17f6:	f6 01       	movw	r30, r12
    17f8:	84 85       	ldd	r24, Z+12	; 0x0c
    17fa:	95 85       	ldd	r25, Z+13	; 0x0d
    17fc:	0e 94 3a 31 	call	0x6274	; 0x6274 <memcpy>
    1800:	ce 01       	movw	r24, r28
    1802:	8e 0d       	add	r24, r14
    1804:	9f 1d       	adc	r25, r15
    1806:	f6 01       	movw	r30, r12
    1808:	24 81       	ldd	r18, Z+4	; 0x04
    180a:	35 81       	ldd	r19, Z+5	; 0x05
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
    1810:	10 f0       	brcs	.+4      	; 0x1816 <prvWriteBytesToBuffer+0x74>
    1812:	82 1b       	sub	r24, r18
    1814:	93 0b       	sbc	r25, r19
    1816:	f6 01       	movw	r30, r12
    1818:	93 83       	std	Z+3, r25	; 0x03
    181a:	82 83       	std	Z+2, r24	; 0x02
    181c:	c7 01       	movw	r24, r14
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	08 95       	ret

00001834 <prvWriteMessageToBuffer>:
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	1f 92       	push	r1
    1846:	1f 92       	push	r1
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	7c 01       	movw	r14, r24
    184e:	6b 01       	movw	r12, r22
    1850:	5a 83       	std	Y+2, r21	; 0x02
    1852:	49 83       	std	Y+1, r20	; 0x01
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	c1 f0       	breq	.+48     	; 0x188a <prvWriteMessageToBuffer+0x56>
    185a:	fc 01       	movw	r30, r24
    185c:	86 85       	ldd	r24, Z+14	; 0x0e
    185e:	80 fd       	sbrc	r24, 0
    1860:	08 c0       	rjmp	.+16     	; 0x1872 <prvWriteMessageToBuffer+0x3e>
    1862:	42 17       	cp	r20, r18
    1864:	53 07       	cpc	r21, r19
    1866:	08 f4       	brcc	.+2      	; 0x186a <prvWriteMessageToBuffer+0x36>
    1868:	9a 01       	movw	r18, r20
    186a:	3a 83       	std	Y+2, r19	; 0x02
    186c:	29 83       	std	Y+1, r18	; 0x01
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <prvWriteMessageToBuffer+0x5c>
    1872:	20 17       	cp	r18, r16
    1874:	31 07       	cpc	r19, r17
    1876:	58 f0       	brcs	.+22     	; 0x188e <prvWriteMessageToBuffer+0x5a>
    1878:	42 e0       	ldi	r20, 0x02	; 2
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	be 01       	movw	r22, r28
    187e:	6f 5f       	subi	r22, 0xFF	; 255
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	c7 01       	movw	r24, r14
    1884:	8e df       	rcall	.-228    	; 0x17a2 <prvWriteBytesToBuffer>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	03 c0       	rjmp	.+6      	; 0x1890 <prvWriteMessageToBuffer+0x5c>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <prvWriteMessageToBuffer+0x5c>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	88 23       	and	r24, r24
    1892:	31 f0       	breq	.+12     	; 0x18a0 <prvWriteMessageToBuffer+0x6c>
    1894:	49 81       	ldd	r20, Y+1	; 0x01
    1896:	5a 81       	ldd	r21, Y+2	; 0x02
    1898:	b6 01       	movw	r22, r12
    189a:	c7 01       	movw	r24, r14
    189c:	82 df       	rcall	.-252    	; 0x17a2 <prvWriteBytesToBuffer>
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <prvWriteMessageToBuffer+0x70>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	df 90       	pop	r13
    18b6:	cf 90       	pop	r12
    18b8:	08 95       	ret

000018ba <prvReadBytesFromBuffer>:
    18ba:	af 92       	push	r10
    18bc:	bf 92       	push	r11
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	7c 01       	movw	r14, r24
    18d0:	5b 01       	movw	r10, r22
    18d2:	e9 01       	movw	r28, r18
    18d4:	42 17       	cp	r20, r18
    18d6:	53 07       	cpc	r21, r19
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <prvReadBytesFromBuffer+0x22>
    18da:	ea 01       	movw	r28, r20
    18dc:	20 97       	sbiw	r28, 0x00	; 0
    18de:	81 f1       	breq	.+96     	; 0x1940 <prvReadBytesFromBuffer+0x86>
    18e0:	f7 01       	movw	r30, r14
    18e2:	00 81       	ld	r16, Z
    18e4:	11 81       	ldd	r17, Z+1	; 0x01
    18e6:	84 81       	ldd	r24, Z+4	; 0x04
    18e8:	95 81       	ldd	r25, Z+5	; 0x05
    18ea:	80 1b       	sub	r24, r16
    18ec:	91 0b       	sbc	r25, r17
    18ee:	6e 01       	movw	r12, r28
    18f0:	8c 17       	cp	r24, r28
    18f2:	9d 07       	cpc	r25, r29
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <prvReadBytesFromBuffer+0x3e>
    18f6:	6c 01       	movw	r12, r24
    18f8:	f7 01       	movw	r30, r14
    18fa:	64 85       	ldd	r22, Z+12	; 0x0c
    18fc:	75 85       	ldd	r23, Z+13	; 0x0d
    18fe:	60 0f       	add	r22, r16
    1900:	71 1f       	adc	r23, r17
    1902:	a6 01       	movw	r20, r12
    1904:	c5 01       	movw	r24, r10
    1906:	0e 94 3a 31 	call	0x6274	; 0x6274 <memcpy>
    190a:	cc 16       	cp	r12, r28
    190c:	dd 06       	cpc	r13, r29
    190e:	58 f4       	brcc	.+22     	; 0x1926 <prvReadBytesFromBuffer+0x6c>
    1910:	ae 01       	movw	r20, r28
    1912:	4c 19       	sub	r20, r12
    1914:	5d 09       	sbc	r21, r13
    1916:	f7 01       	movw	r30, r14
    1918:	64 85       	ldd	r22, Z+12	; 0x0c
    191a:	75 85       	ldd	r23, Z+13	; 0x0d
    191c:	c5 01       	movw	r24, r10
    191e:	8c 0d       	add	r24, r12
    1920:	9d 1d       	adc	r25, r13
    1922:	0e 94 3a 31 	call	0x6274	; 0x6274 <memcpy>
    1926:	0c 0f       	add	r16, r28
    1928:	1d 1f       	adc	r17, r29
    192a:	f7 01       	movw	r30, r14
    192c:	84 81       	ldd	r24, Z+4	; 0x04
    192e:	95 81       	ldd	r25, Z+5	; 0x05
    1930:	08 17       	cp	r16, r24
    1932:	19 07       	cpc	r17, r25
    1934:	10 f0       	brcs	.+4      	; 0x193a <prvReadBytesFromBuffer+0x80>
    1936:	08 1b       	sub	r16, r24
    1938:	19 0b       	sbc	r17, r25
    193a:	f7 01       	movw	r30, r14
    193c:	11 83       	std	Z+1, r17	; 0x01
    193e:	00 83       	st	Z, r16
    1940:	ce 01       	movw	r24, r28
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	bf 90       	pop	r11
    1954:	af 90       	pop	r10
    1956:	08 95       	ret

00001958 <prvReadMessageFromBuffer>:
    1958:	6f 92       	push	r6
    195a:	7f 92       	push	r7
    195c:	8f 92       	push	r8
    195e:	9f 92       	push	r9
    1960:	af 92       	push	r10
    1962:	bf 92       	push	r11
    1964:	cf 92       	push	r12
    1966:	df 92       	push	r13
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	1f 92       	push	r1
    1976:	1f 92       	push	r1
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	6c 01       	movw	r12, r24
    197e:	4b 01       	movw	r8, r22
    1980:	5a 01       	movw	r10, r20
    1982:	79 01       	movw	r14, r18
    1984:	01 15       	cp	r16, r1
    1986:	11 05       	cpc	r17, r1
    1988:	b1 f0       	breq	.+44     	; 0x19b6 <prvReadMessageFromBuffer+0x5e>
    198a:	fc 01       	movw	r30, r24
    198c:	60 80       	ld	r6, Z
    198e:	71 80       	ldd	r7, Z+1	; 0x01
    1990:	a8 01       	movw	r20, r16
    1992:	be 01       	movw	r22, r28
    1994:	6f 5f       	subi	r22, 0xFF	; 255
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	90 df       	rcall	.-224    	; 0x18ba <prvReadBytesFromBuffer>
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	e0 1a       	sub	r14, r16
    19a0:	f1 0a       	sbc	r15, r17
    19a2:	a8 16       	cp	r10, r24
    19a4:	b9 06       	cpc	r11, r25
    19a6:	30 f4       	brcc	.+12     	; 0x19b4 <prvReadMessageFromBuffer+0x5c>
    19a8:	f6 01       	movw	r30, r12
    19aa:	71 82       	std	Z+1, r7	; 0x01
    19ac:	60 82       	st	Z, r6
    19ae:	a1 2c       	mov	r10, r1
    19b0:	b1 2c       	mov	r11, r1
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <prvReadMessageFromBuffer+0x5e>
    19b4:	5c 01       	movw	r10, r24
    19b6:	97 01       	movw	r18, r14
    19b8:	a5 01       	movw	r20, r10
    19ba:	b4 01       	movw	r22, r8
    19bc:	c6 01       	movw	r24, r12
    19be:	7d df       	rcall	.-262    	; 0x18ba <prvReadBytesFromBuffer>
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	bf 90       	pop	r11
    19d6:	af 90       	pop	r10
    19d8:	9f 90       	pop	r9
    19da:	8f 90       	pop	r8
    19dc:	7f 90       	pop	r7
    19de:	6f 90       	pop	r6
    19e0:	08 95       	ret

000019e2 <xStreamBufferGenericCreate>:
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	ec 01       	movw	r28, r24
    19f2:	6b 01       	movw	r12, r22
    19f4:	41 30       	cpi	r20, 0x01	; 1
    19f6:	11 f4       	brne	.+4      	; 0x19fc <xStreamBufferGenericCreate+0x1a>
    19f8:	01 e0       	ldi	r16, 0x01	; 1
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <xStreamBufferGenericCreate+0x1c>
    19fc:	00 e0       	ldi	r16, 0x00	; 0
    19fe:	c1 14       	cp	r12, r1
    1a00:	d1 04       	cpc	r13, r1
    1a02:	19 f4       	brne	.+6      	; 0x1a0a <xStreamBufferGenericCreate+0x28>
    1a04:	cc 24       	eor	r12, r12
    1a06:	c3 94       	inc	r12
    1a08:	d1 2c       	mov	r13, r1
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	40 96       	adiw	r24, 0x10	; 16
    1a0e:	c8 17       	cp	r28, r24
    1a10:	d9 07       	cpc	r29, r25
    1a12:	20 f4       	brcc	.+8      	; 0x1a1c <xStreamBufferGenericCreate+0x3a>
    1a14:	21 96       	adiw	r28, 0x01	; 1
    1a16:	50 d9       	rcall	.-3424   	; 0xcb8 <pvPortMalloc>
    1a18:	7c 01       	movw	r14, r24
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <xStreamBufferGenericCreate+0x3e>
    1a1c:	e1 2c       	mov	r14, r1
    1a1e:	f1 2c       	mov	r15, r1
    1a20:	e1 14       	cp	r14, r1
    1a22:	f1 04       	cpc	r15, r1
    1a24:	39 f0       	breq	.+14     	; 0x1a34 <xStreamBufferGenericCreate+0x52>
    1a26:	96 01       	movw	r18, r12
    1a28:	ae 01       	movw	r20, r28
    1a2a:	b7 01       	movw	r22, r14
    1a2c:	61 5f       	subi	r22, 0xF1	; 241
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	c7 01       	movw	r24, r14
    1a32:	a7 de       	rcall	.-690    	; 0x1782 <prvInitialiseNewStreamBuffer>
    1a34:	c7 01       	movw	r24, r14
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	08 95       	ret

00001a46 <xStreamBufferReset>:
    1a46:	0f 93       	push	r16
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	0f 92       	push	r0
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 85       	ldd	r18, Z+8	; 0x08
    1a52:	31 85       	ldd	r19, Z+9	; 0x09
    1a54:	23 2b       	or	r18, r19
    1a56:	71 f4       	brne	.+28     	; 0x1a74 <xStreamBufferReset+0x2e>
    1a58:	22 85       	ldd	r18, Z+10	; 0x0a
    1a5a:	33 85       	ldd	r19, Z+11	; 0x0b
    1a5c:	23 2b       	or	r18, r19
    1a5e:	61 f4       	brne	.+24     	; 0x1a78 <xStreamBufferReset+0x32>
    1a60:	26 81       	ldd	r18, Z+6	; 0x06
    1a62:	37 81       	ldd	r19, Z+7	; 0x07
    1a64:	44 81       	ldd	r20, Z+4	; 0x04
    1a66:	55 81       	ldd	r21, Z+5	; 0x05
    1a68:	64 85       	ldd	r22, Z+12	; 0x0c
    1a6a:	75 85       	ldd	r23, Z+13	; 0x0d
    1a6c:	06 85       	ldd	r16, Z+14	; 0x0e
    1a6e:	89 de       	rcall	.-750    	; 0x1782 <prvInitialiseNewStreamBuffer>
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <xStreamBufferReset+0x34>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <xStreamBufferReset+0x34>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <xStreamBufferSpacesAvailable>:
    1a82:	fc 01       	movw	r30, r24
    1a84:	24 81       	ldd	r18, Z+4	; 0x04
    1a86:	35 81       	ldd	r19, Z+5	; 0x05
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	82 0f       	add	r24, r18
    1a8e:	93 1f       	adc	r25, r19
    1a90:	42 81       	ldd	r20, Z+2	; 0x02
    1a92:	53 81       	ldd	r21, Z+3	; 0x03
    1a94:	84 1b       	sub	r24, r20
    1a96:	95 0b       	sbc	r25, r21
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	82 17       	cp	r24, r18
    1a9c:	93 07       	cpc	r25, r19
    1a9e:	10 f0       	brcs	.+4      	; 0x1aa4 <xStreamBufferSpacesAvailable+0x22>
    1aa0:	82 1b       	sub	r24, r18
    1aa2:	93 0b       	sbc	r25, r19
    1aa4:	08 95       	ret

00001aa6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1aa6:	2f 92       	push	r2
    1aa8:	3f 92       	push	r3
    1aaa:	4f 92       	push	r4
    1aac:	5f 92       	push	r5
    1aae:	6f 92       	push	r6
    1ab0:	7f 92       	push	r7
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	cf 92       	push	r12
    1abc:	df 92       	push	r13
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	2b 97       	sbiw	r28, 0x0b	; 11
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	4c 01       	movw	r8, r24
    1adc:	7b 87       	std	Y+11, r23	; 0x0b
    1ade:	6a 87       	std	Y+10, r22	; 0x0a
    1ae0:	1a 01       	movw	r2, r20
    1ae2:	0e 83       	std	Y+6, r16	; 0x06
    1ae4:	1f 83       	std	Y+7, r17	; 0x07
    1ae6:	28 87       	std	Y+8, r18	; 0x08
    1ae8:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1aea:	fc 01       	movw	r30, r24
    1aec:	84 81       	ldd	r24, Z+4	; 0x04
    1aee:	95 81       	ldd	r25, Z+5	; 0x05
    1af0:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1af2:	26 85       	ldd	r18, Z+14	; 0x0e
    1af4:	20 ff       	sbrs	r18, 0
    1af6:	0c c0       	rjmp	.+24     	; 0x1b10 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1af8:	2a 01       	movw	r4, r20
    1afa:	f2 e0       	ldi	r31, 0x02	; 2
    1afc:	4f 0e       	add	r4, r31
    1afe:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1b00:	84 15       	cp	r24, r4
    1b02:	95 05       	cpc	r25, r5
    1b04:	58 f4       	brcc	.+22     	; 0x1b1c <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1b06:	1e 82       	std	Y+6, r1	; 0x06
    1b08:	1f 82       	std	Y+7, r1	; 0x07
    1b0a:	18 86       	std	Y+8, r1	; 0x08
    1b0c:	19 86       	std	Y+9, r1	; 0x09
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1b10:	84 17       	cp	r24, r20
    1b12:	95 07       	cpc	r25, r21
    1b14:	10 f0       	brcs	.+4      	; 0x1b1a <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1b16:	2a 01       	movw	r4, r20
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1b1a:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b20:	a8 85       	ldd	r26, Y+8	; 0x08
    1b22:	b9 85       	ldd	r27, Y+9	; 0x09
    1b24:	89 2b       	or	r24, r25
    1b26:	8a 2b       	or	r24, r26
    1b28:	8b 2b       	or	r24, r27
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <xStreamBufferSend+0x88>
    1b2c:	38 c0       	rjmp	.+112    	; 0x1b9e <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1b2e:	ce 01       	movw	r24, r28
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	0e 94 67 16 	call	0x2cce	; 0x2cce <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b3c:	c4 01       	movw	r24, r8
    1b3e:	a1 df       	rcall	.-190    	; 0x1a82 <xStreamBufferSpacesAvailable>
    1b40:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1b42:	84 15       	cp	r24, r4
    1b44:	95 05       	cpc	r25, r5
    1b46:	40 f5       	brcc	.+80     	; 0x1b98 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1b52:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <xTaskGetCurrentTaskHandle>
    1b56:	f4 01       	movw	r30, r8
    1b58:	93 87       	std	Z+11, r25	; 0x0b
    1b5a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1b60:	ae 80       	ldd	r10, Y+6	; 0x06
    1b62:	bf 80       	ldd	r11, Y+7	; 0x07
    1b64:	c8 84       	ldd	r12, Y+8	; 0x08
    1b66:	d9 84       	ldd	r13, Y+9	; 0x09
    1b68:	e1 2c       	mov	r14, r1
    1b6a:	f1 2c       	mov	r15, r1
    1b6c:	00 e0       	ldi	r16, 0x00	; 0
    1b6e:	10 e0       	ldi	r17, 0x00	; 0
    1b70:	98 01       	movw	r18, r16
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	ba 01       	movw	r22, r20
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1b7e:	f4 01       	movw	r30, r8
    1b80:	13 86       	std	Z+11, r1	; 0x0b
    1b82:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1b84:	be 01       	movw	r22, r28
    1b86:	6a 5f       	subi	r22, 0xFA	; 250
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <xTaskCheckForTimeOut>
    1b92:	88 23       	and	r24, r24
    1b94:	81 f2       	breq	.-96     	; 0x1b36 <xStreamBufferSend+0x90>
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
                    break;
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1b9e:	61 2c       	mov	r6, r1
    1ba0:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1ba2:	61 14       	cp	r6, r1
    1ba4:	71 04       	cpc	r7, r1
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1ba8:	c4 01       	movw	r24, r8
    1baa:	6b df       	rcall	.-298    	; 0x1a82 <xStreamBufferSpacesAvailable>
    1bac:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1bae:	82 01       	movw	r16, r4
    1bb0:	93 01       	movw	r18, r6
    1bb2:	a1 01       	movw	r20, r2
    1bb4:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bb6:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bb8:	c4 01       	movw	r24, r8
    1bba:	3c de       	rcall	.-904    	; 0x1834 <prvWriteMessageToBuffer>
    1bbc:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1bbe:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1bc0:	e9 f0       	breq	.+58     	; 0x1bfc <xStreamBufferSend+0x156>
    1bc2:	c4 01       	movw	r24, r8
    1bc4:	cb dd       	rcall	.-1130   	; 0x175c <prvBytesInBuffer>
    1bc6:	f4 01       	movw	r30, r8
    1bc8:	26 81       	ldd	r18, Z+6	; 0x06
    1bca:	37 81       	ldd	r19, Z+7	; 0x07
    1bcc:	82 17       	cp	r24, r18
    1bce:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1bd0:	a8 f0       	brcs	.+42     	; 0x1bfc <xStreamBufferSend+0x156>
    1bd2:	90 d3       	rcall	.+1824   	; 0x22f4 <vTaskSuspendAll>
    1bd4:	f4 01       	movw	r30, r8
    1bd6:	80 85       	ldd	r24, Z+8	; 0x08
    1bd8:	91 85       	ldd	r25, Z+9	; 0x09
    1bda:	89 2b       	or	r24, r25
    1bdc:	71 f0       	breq	.+28     	; 0x1bfa <xStreamBufferSend+0x154>
    1bde:	80 85       	ldd	r24, Z+8	; 0x08
    1be0:	91 85       	ldd	r25, Z+9	; 0x09
    1be2:	e1 2c       	mov	r14, r1
    1be4:	f1 2c       	mov	r15, r1
    1be6:	00 e0       	ldi	r16, 0x00	; 0
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	0e 94 37 18 	call	0x306e	; 0x306e <xTaskGenericNotify>
    1bf4:	f4 01       	movw	r30, r8
    1bf6:	11 86       	std	Z+9, r1	; 0x09
    1bf8:	10 86       	std	Z+8, r1	; 0x08
    1bfa:	bc d4       	rcall	.+2424   	; 0x2574 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1bfc:	c6 01       	movw	r24, r12
    1bfe:	2b 96       	adiw	r28, 0x0b	; 11
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	bf 90       	pop	r11
    1c1c:	af 90       	pop	r10
    1c1e:	9f 90       	pop	r9
    1c20:	8f 90       	pop	r8
    1c22:	7f 90       	pop	r7
    1c24:	6f 90       	pop	r6
    1c26:	5f 90       	pop	r5
    1c28:	4f 90       	pop	r4
    1c2a:	3f 90       	pop	r3
    1c2c:	2f 90       	pop	r2
    1c2e:	08 95       	ret

00001c30 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1c30:	af 92       	push	r10
    1c32:	bf 92       	push	r11
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ec 01       	movw	r28, r24
    1c46:	7b 01       	movw	r14, r22
    1c48:	5a 01       	movw	r10, r20
    1c4a:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c4e:	80 ff       	sbrs	r24, 0
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c52:	8a 01       	movw	r16, r20
    1c54:	0e 5f       	subi	r16, 0xFE	; 254
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1c5a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	11 df       	rcall	.-478    	; 0x1a82 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1c60:	9c 01       	movw	r18, r24
    1c62:	a5 01       	movw	r20, r10
    1c64:	b7 01       	movw	r22, r14
    1c66:	ce 01       	movw	r24, r28
    1c68:	e5 dd       	rcall	.-1078   	; 0x1834 <prvWriteMessageToBuffer>
    1c6a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1c6c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1c6e:	c1 f0       	breq	.+48     	; 0x1ca0 <xStreamBufferSendFromISR+0x70>
    1c70:	ce 01       	movw	r24, r28
    1c72:	74 dd       	rcall	.-1304   	; 0x175c <prvBytesInBuffer>
    1c74:	2e 81       	ldd	r18, Y+6	; 0x06
    1c76:	3f 81       	ldd	r19, Y+7	; 0x07
    1c78:	82 17       	cp	r24, r18
    1c7a:	93 07       	cpc	r25, r19
    1c7c:	88 f0       	brcs	.+34     	; 0x1ca0 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1c7e:	88 85       	ldd	r24, Y+8	; 0x08
    1c80:	99 85       	ldd	r25, Y+9	; 0x09
    1c82:	89 2b       	or	r24, r25
    1c84:	69 f0       	breq	.+26     	; 0x1ca0 <xStreamBufferSendFromISR+0x70>
    1c86:	88 85       	ldd	r24, Y+8	; 0x08
    1c88:	99 85       	ldd	r25, Y+9	; 0x09
    1c8a:	e1 2c       	mov	r14, r1
    1c8c:	f1 2c       	mov	r15, r1
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	0e 94 2e 19 	call	0x325c	; 0x325c <xTaskGenericNotifyFromISR>
    1c9c:	19 86       	std	Y+9, r1	; 0x09
    1c9e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1ca0:	c5 01       	movw	r24, r10
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	bf 90       	pop	r11
    1cb4:	af 90       	pop	r10
    1cb6:	08 95       	ret

00001cb8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1cb8:	4f 92       	push	r4
    1cba:	5f 92       	push	r5
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	ec 01       	movw	r28, r24
    1cda:	2b 01       	movw	r4, r22
    1cdc:	3a 01       	movw	r6, r20
    1cde:	58 01       	movw	r10, r16
    1ce0:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ce2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ce4:	80 ff       	sbrs	r24, 0
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ce8:	68 94       	set
    1cea:	88 24       	eor	r8, r8
    1cec:	81 f8       	bld	r8, 1
    1cee:	91 2c       	mov	r9, r1
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1cf2:	81 2c       	mov	r8, r1
    1cf4:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1cf6:	a1 14       	cp	r10, r1
    1cf8:	b1 04       	cpc	r11, r1
    1cfa:	c1 04       	cpc	r12, r1
    1cfc:	d1 04       	cpc	r13, r1
    1cfe:	41 f1       	breq	.+80     	; 0x1d50 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d06:	ce 01       	movw	r24, r28
    1d08:	29 dd       	rcall	.-1454   	; 0x175c <prvBytesInBuffer>
    1d0a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1d0c:	88 16       	cp	r8, r24
    1d0e:	99 06       	cpc	r9, r25
    1d10:	48 f0       	brcs	.+18     	; 0x1d24 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1d1c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <xTaskGetCurrentTaskHandle>
    1d20:	99 87       	std	Y+9, r25	; 0x09
    1d22:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1d28:	8e 14       	cp	r8, r14
    1d2a:	9f 04       	cpc	r9, r15
    1d2c:	a0 f0       	brcs	.+40     	; 0x1d56 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1d2e:	e1 2c       	mov	r14, r1
    1d30:	f1 2c       	mov	r15, r1
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    1d34:	10 e0       	ldi	r17, 0x00	; 0
    1d36:	98 01       	movw	r18, r16
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	ba 01       	movw	r22, r20
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	0e 94 90 17 	call	0x2f20	; 0x2f20 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1d44:	19 86       	std	Y+9, r1	; 0x09
    1d46:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d48:	ce 01       	movw	r24, r28
    1d4a:	08 dd       	rcall	.-1520   	; 0x175c <prvBytesInBuffer>
    1d4c:	7c 01       	movw	r14, r24
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d50:	ce 01       	movw	r24, r28
    1d52:	04 dd       	rcall	.-1528   	; 0x175c <prvBytesInBuffer>
    1d54:	7c 01       	movw	r14, r24
    1d56:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1d58:	9f 04       	cpc	r9, r15
    1d5a:	e8 f4       	brcc	.+58     	; 0x1d96 <xStreamBufferReceive+0xde>
    1d5c:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1d5e:	97 01       	movw	r18, r14
    1d60:	a3 01       	movw	r20, r6
    1d62:	b2 01       	movw	r22, r4
    1d64:	ce 01       	movw	r24, r28
    1d66:	f8 dd       	rcall	.-1040   	; 0x1958 <prvReadMessageFromBuffer>
    1d68:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1d6a:	89 2b       	or	r24, r25
    1d6c:	b1 f0       	breq	.+44     	; 0x1d9a <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1d6e:	c2 d2       	rcall	.+1412   	; 0x22f4 <vTaskSuspendAll>
    1d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d74:	89 2b       	or	r24, r25
    1d76:	69 f0       	breq	.+26     	; 0x1d92 <xStreamBufferReceive+0xda>
    1d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d7c:	e1 2c       	mov	r14, r1
    1d7e:	f1 2c       	mov	r15, r1
    1d80:	00 e0       	ldi	r16, 0x00	; 0
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	a9 01       	movw	r20, r18
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	0e 94 37 18 	call	0x306e	; 0x306e <xTaskGenericNotify>
    1d8e:	1b 86       	std	Y+11, r1	; 0x0b
    1d90:	1a 86       	std	Y+10, r1	; 0x0a
    1d92:	f0 d3       	rcall	.+2016   	; 0x2574 <xTaskResumeAll>
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <xStreamBufferReceive+0xe2>
    1d96:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1d98:	d1 2c       	mov	r13, r1
    1d9a:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	bf 90       	pop	r11
    1dae:	af 90       	pop	r10
    1db0:	9f 90       	pop	r9
    1db2:	8f 90       	pop	r8
    1db4:	7f 90       	pop	r7
    1db6:	6f 90       	pop	r6
    1db8:	5f 90       	pop	r5
    1dba:	4f 90       	pop	r4
    1dbc:	08 95       	ret

00001dbe <prvResetNextTaskUnblockTime>:
    1dbe:	e0 91 3f 11 	lds	r30, 0x113F	; 0x80113f <pxDelayedTaskList>
    1dc2:	f0 91 40 11 	lds	r31, 0x1140	; 0x801140 <pxDelayedTaskList+0x1>
    1dc6:	80 81       	ld	r24, Z
    1dc8:	81 11       	cpse	r24, r1
    1dca:	0c c0       	rjmp	.+24     	; 0x1de4 <prvResetNextTaskUnblockTime+0x26>
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	9f ef       	ldi	r25, 0xFF	; 255
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xNextTaskUnblockTime>
    1dd6:	90 93 0a 11 	sts	0x110A, r25	; 0x80110a <xNextTaskUnblockTime+0x1>
    1dda:	a0 93 0b 11 	sts	0x110B, r26	; 0x80110b <xNextTaskUnblockTime+0x2>
    1dde:	b0 93 0c 11 	sts	0x110C, r27	; 0x80110c <xNextTaskUnblockTime+0x3>
    1de2:	08 95       	ret
    1de4:	e0 91 3f 11 	lds	r30, 0x113F	; 0x80113f <pxDelayedTaskList>
    1de8:	f0 91 40 11 	lds	r31, 0x1140	; 0x801140 <pxDelayedTaskList+0x1>
    1dec:	07 80       	ldd	r0, Z+7	; 0x07
    1dee:	f0 85       	ldd	r31, Z+8	; 0x08
    1df0:	e0 2d       	mov	r30, r0
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	a2 81       	ldd	r26, Z+2	; 0x02
    1df8:	b3 81       	ldd	r27, Z+3	; 0x03
    1dfa:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xNextTaskUnblockTime>
    1dfe:	90 93 0a 11 	sts	0x110A, r25	; 0x80110a <xNextTaskUnblockTime+0x1>
    1e02:	a0 93 0b 11 	sts	0x110B, r26	; 0x80110b <xNextTaskUnblockTime+0x2>
    1e06:	b0 93 0c 11 	sts	0x110C, r27	; 0x80110c <xNextTaskUnblockTime+0x3>
    1e0a:	08 95       	ret

00001e0c <prvDeleteTCB>:
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	ec 01       	movw	r28, r24
    1e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e16:	0e 94 05 07 	call	0xe0a	; 0xe0a <vPortFree>
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	0e 94 05 07 	call	0xe0a	; 0xe0a <vPortFree>
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <prvInitialiseNewTask>:
    1e26:	4f 92       	push	r4
    1e28:	5f 92       	push	r5
    1e2a:	6f 92       	push	r6
    1e2c:	7f 92       	push	r7
    1e2e:	8f 92       	push	r8
    1e30:	9f 92       	push	r9
    1e32:	af 92       	push	r10
    1e34:	bf 92       	push	r11
    1e36:	cf 92       	push	r12
    1e38:	df 92       	push	r13
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	2c 01       	movw	r4, r24
    1e46:	5b 01       	movw	r10, r22
    1e48:	4a 01       	movw	r8, r20
    1e4a:	39 01       	movw	r6, r18
    1e4c:	e6 01       	movw	r28, r12
    1e4e:	65 ea       	ldi	r22, 0xA5	; 165
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e56:	0e 94 43 31 	call	0x6286	; 0x6286 <memset>
    1e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5e:	21 e0       	ldi	r18, 0x01	; 1
    1e60:	82 1a       	sub	r8, r18
    1e62:	91 08       	sbc	r9, r1
    1e64:	88 0e       	add	r8, r24
    1e66:	99 1e       	adc	r9, r25
    1e68:	a1 14       	cp	r10, r1
    1e6a:	b1 04       	cpc	r11, r1
    1e6c:	89 f4       	brne	.+34     	; 0x1e90 <prvInitialiseNewTask+0x6a>
    1e6e:	15 c0       	rjmp	.+42     	; 0x1e9a <prvInitialiseNewTask+0x74>
    1e70:	82 2f       	mov	r24, r18
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	f5 01       	movw	r30, r10
    1e76:	e8 0f       	add	r30, r24
    1e78:	f9 1f       	adc	r31, r25
    1e7a:	30 81       	ld	r19, Z
    1e7c:	de 01       	movw	r26, r28
    1e7e:	a8 0f       	add	r26, r24
    1e80:	b9 1f       	adc	r27, r25
    1e82:	5d 96       	adiw	r26, 0x1d	; 29
    1e84:	3c 93       	st	X, r19
    1e86:	80 81       	ld	r24, Z
    1e88:	88 23       	and	r24, r24
    1e8a:	29 f0       	breq	.+10     	; 0x1e96 <prvInitialiseNewTask+0x70>
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <prvInitialiseNewTask+0x6c>
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	20 31       	cpi	r18, 0x10	; 16
    1e94:	68 f3       	brcs	.-38     	; 0x1e70 <prvInitialiseNewTask+0x4a>
    1e96:	1c a6       	std	Y+44, r1	; 0x2c
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <prvInitialiseNewTask+0x76>
    1e9a:	1d 8e       	std	Y+29, r1	; 0x1d
    1e9c:	0a 30       	cpi	r16, 0x0A	; 10
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <prvInitialiseNewTask+0x7c>
    1ea0:	09 e0       	ldi	r16, 0x09	; 9
    1ea2:	0a 8f       	std	Y+26, r16	; 0x1a
    1ea4:	0d a7       	std	Y+45, r16	; 0x2d
    1ea6:	1e a6       	std	Y+46, r1	; 0x2e
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	02 96       	adiw	r24, 0x02	; 2
    1eac:	0e 94 53 07 	call	0xea6	; 0xea6 <vListInitialiseItem>
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	0e 96       	adiw	r24, 0x0e	; 14
    1eb4:	0e 94 53 07 	call	0xea6	; 0xea6 <vListInitialiseItem>
    1eb8:	db 87       	std	Y+11, r29	; 0x0b
    1eba:	ca 87       	std	Y+10, r28	; 0x0a
    1ebc:	8a e0       	ldi	r24, 0x0A	; 10
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e0       	ldi	r26, 0x00	; 0
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	80 1b       	sub	r24, r16
    1ec6:	91 09       	sbc	r25, r1
    1ec8:	a1 09       	sbc	r26, r1
    1eca:	b1 09       	sbc	r27, r1
    1ecc:	8e 87       	std	Y+14, r24	; 0x0e
    1ece:	9f 87       	std	Y+15, r25	; 0x0f
    1ed0:	a8 8b       	std	Y+16, r26	; 0x10
    1ed2:	b9 8b       	std	Y+17, r27	; 0x11
    1ed4:	df 8b       	std	Y+23, r29	; 0x17
    1ed6:	ce 8b       	std	Y+22, r28	; 0x16
    1ed8:	84 e0       	ldi	r24, 0x04	; 4
    1eda:	fe 01       	movw	r30, r28
    1edc:	bf 96       	adiw	r30, 0x2f	; 47
    1ede:	df 01       	movw	r26, r30
    1ee0:	1d 92       	st	X+, r1
    1ee2:	8a 95       	dec	r24
    1ee4:	e9 f7       	brne	.-6      	; 0x1ee0 <prvInitialiseNewTask+0xba>
    1ee6:	1b aa       	std	Y+51, r1	; 0x33
    1ee8:	a3 01       	movw	r20, r6
    1eea:	b2 01       	movw	r22, r4
    1eec:	c4 01       	movw	r24, r8
    1eee:	4f d8       	rcall	.-3938   	; 0xf8e <pxPortInitialiseStack>
    1ef0:	99 83       	std	Y+1, r25	; 0x01
    1ef2:	88 83       	st	Y, r24
    1ef4:	e1 14       	cp	r14, r1
    1ef6:	f1 04       	cpc	r15, r1
    1ef8:	19 f0       	breq	.+6      	; 0x1f00 <prvInitialiseNewTask+0xda>
    1efa:	f7 01       	movw	r30, r14
    1efc:	d1 83       	std	Z+1, r29	; 0x01
    1efe:	c0 83       	st	Z, r28
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	9f 90       	pop	r9
    1f14:	8f 90       	pop	r8
    1f16:	7f 90       	pop	r7
    1f18:	6f 90       	pop	r6
    1f1a:	5f 90       	pop	r5
    1f1c:	4f 90       	pop	r4
    1f1e:	08 95       	ret

00001f20 <prvInitialiseTaskLists>:
    1f20:	cf 93       	push	r28
    1f22:	c0 e0       	ldi	r28, 0x00	; 0
    1f24:	09 c0       	rjmp	.+18     	; 0x1f38 <prvInitialiseTaskLists+0x18>
    1f26:	2b e0       	ldi	r18, 0x0B	; 11
    1f28:	c2 9f       	mul	r28, r18
    1f2a:	c0 01       	movw	r24, r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	89 5a       	subi	r24, 0xA9	; 169
    1f30:	9e 4e       	sbci	r25, 0xEE	; 238
    1f32:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    1f36:	cf 5f       	subi	r28, 0xFF	; 255
    1f38:	ca 30       	cpi	r28, 0x0A	; 10
    1f3a:	a8 f3       	brcs	.-22     	; 0x1f26 <prvInitialiseTaskLists+0x6>
    1f3c:	8c e4       	ldi	r24, 0x4C	; 76
    1f3e:	91 e1       	ldi	r25, 0x11	; 17
    1f40:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    1f44:	81 e4       	ldi	r24, 0x41	; 65
    1f46:	91 e1       	ldi	r25, 0x11	; 17
    1f48:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    1f4c:	82 e3       	ldi	r24, 0x32	; 50
    1f4e:	91 e1       	ldi	r25, 0x11	; 17
    1f50:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    1f54:	87 e2       	ldi	r24, 0x27	; 39
    1f56:	91 e1       	ldi	r25, 0x11	; 17
    1f58:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    1f5c:	8b e1       	ldi	r24, 0x1B	; 27
    1f5e:	91 e1       	ldi	r25, 0x11	; 17
    1f60:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    1f64:	8c e4       	ldi	r24, 0x4C	; 76
    1f66:	91 e1       	ldi	r25, 0x11	; 17
    1f68:	90 93 40 11 	sts	0x1140, r25	; 0x801140 <pxDelayedTaskList+0x1>
    1f6c:	80 93 3f 11 	sts	0x113F, r24	; 0x80113f <pxDelayedTaskList>
    1f70:	81 e4       	ldi	r24, 0x41	; 65
    1f72:	91 e1       	ldi	r25, 0x11	; 17
    1f74:	90 93 3e 11 	sts	0x113E, r25	; 0x80113e <pxOverflowDelayedTaskList+0x1>
    1f78:	80 93 3d 11 	sts	0x113D, r24	; 0x80113d <pxOverflowDelayedTaskList>
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <prvAddNewTaskToReadyList>:
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	ec 01       	movw	r28, r24
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	0f 92       	push	r0
    1f8c:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxCurrentNumberOfTasks>
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	80 93 1a 11 	sts	0x111A, r24	; 0x80111a <uxCurrentNumberOfTasks>
    1f96:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    1f9a:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    1f9e:	89 2b       	or	r24, r25
    1fa0:	51 f4       	brne	.+20     	; 0x1fb6 <prvAddNewTaskToReadyList+0x36>
    1fa2:	d0 93 c6 11 	sts	0x11C6, r29	; 0x8011c6 <pxCurrentTCB+0x1>
    1fa6:	c0 93 c5 11 	sts	0x11C5, r28	; 0x8011c5 <pxCurrentTCB>
    1faa:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxCurrentNumberOfTasks>
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 f4       	brne	.+36     	; 0x1fd6 <prvAddNewTaskToReadyList+0x56>
    1fb2:	b6 df       	rcall	.-148    	; 0x1f20 <prvInitialiseTaskLists>
    1fb4:	10 c0       	rjmp	.+32     	; 0x1fd6 <prvAddNewTaskToReadyList+0x56>
    1fb6:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <xSchedulerRunning>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	0c c0       	rjmp	.+24     	; 0x1fd6 <prvAddNewTaskToReadyList+0x56>
    1fbe:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    1fc2:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    1fc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fca:	89 17       	cp	r24, r25
    1fcc:	20 f0       	brcs	.+8      	; 0x1fd6 <prvAddNewTaskToReadyList+0x56>
    1fce:	d0 93 c6 11 	sts	0x11C6, r29	; 0x8011c6 <pxCurrentTCB+0x1>
    1fd2:	c0 93 c5 11 	sts	0x11C5, r28	; 0x8011c5 <pxCurrentTCB>
    1fd6:	80 91 0d 11 	lds	r24, 0x110D	; 0x80110d <uxTaskNumber>
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	80 93 0d 11 	sts	0x110D, r24	; 0x80110d <uxTaskNumber>
    1fe0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1fe2:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <uxTopReadyPriority>
    1fe6:	8e 17       	cp	r24, r30
    1fe8:	10 f4       	brcc	.+4      	; 0x1fee <prvAddNewTaskToReadyList+0x6e>
    1fea:	e0 93 15 11 	sts	0x1115, r30	; 0x801115 <uxTopReadyPriority>
    1fee:	8b e0       	ldi	r24, 0x0B	; 11
    1ff0:	8e 9f       	mul	r24, r30
    1ff2:	f0 01       	movw	r30, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	e9 5a       	subi	r30, 0xA9	; 169
    1ff8:	fe 4e       	sbci	r31, 0xEE	; 238
    1ffa:	01 80       	ldd	r0, Z+1	; 0x01
    1ffc:	f2 81       	ldd	r31, Z+2	; 0x02
    1ffe:	e0 2d       	mov	r30, r0
    2000:	ff 83       	std	Y+7, r31	; 0x07
    2002:	ee 83       	std	Y+6, r30	; 0x06
    2004:	26 81       	ldd	r18, Z+6	; 0x06
    2006:	37 81       	ldd	r19, Z+7	; 0x07
    2008:	39 87       	std	Y+9, r19	; 0x09
    200a:	28 87       	std	Y+8, r18	; 0x08
    200c:	a6 81       	ldd	r26, Z+6	; 0x06
    200e:	b7 81       	ldd	r27, Z+7	; 0x07
    2010:	9e 01       	movw	r18, r28
    2012:	2e 5f       	subi	r18, 0xFE	; 254
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
    2016:	15 96       	adiw	r26, 0x05	; 5
    2018:	3c 93       	st	X, r19
    201a:	2e 93       	st	-X, r18
    201c:	14 97       	sbiw	r26, 0x04	; 4
    201e:	37 83       	std	Z+7, r19	; 0x07
    2020:	26 83       	std	Z+6, r18	; 0x06
    2022:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2024:	8e 9f       	mul	r24, r30
    2026:	f0 01       	movw	r30, r0
    2028:	11 24       	eor	r1, r1
    202a:	e9 5a       	subi	r30, 0xA9	; 169
    202c:	fe 4e       	sbci	r31, 0xEE	; 238
    202e:	fd 87       	std	Y+13, r31	; 0x0d
    2030:	ec 87       	std	Y+12, r30	; 0x0c
    2032:	80 81       	ld	r24, Z
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	80 83       	st	Z, r24
    2038:	0f 90       	pop	r0
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <xSchedulerRunning>
    2040:	88 23       	and	r24, r24
    2042:	51 f0       	breq	.+20     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2044:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2048:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    204c:	92 8d       	ldd	r25, Z+26	; 0x1a
    204e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2050:	98 17       	cp	r25, r24
    2052:	10 f4       	brcc	.+4      	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2054:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	08 95       	ret

0000205e <prvCheckTasksWaitingTermination>:
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	1b c0       	rjmp	.+54     	; 0x209a <prvCheckTasksWaitingTermination+0x3c>
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	0f 92       	push	r0
    206a:	e0 91 2e 11 	lds	r30, 0x112E	; 0x80112e <xTasksWaitingTermination+0x7>
    206e:	f0 91 2f 11 	lds	r31, 0x112F	; 0x80112f <xTasksWaitingTermination+0x8>
    2072:	c0 85       	ldd	r28, Z+8	; 0x08
    2074:	d1 85       	ldd	r29, Z+9	; 0x09
    2076:	ce 01       	movw	r24, r28
    2078:	02 96       	adiw	r24, 0x02	; 2
    207a:	0e 94 94 07 	call	0xf28	; 0xf28 <uxListRemove>
    207e:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxCurrentNumberOfTasks>
    2082:	81 50       	subi	r24, 0x01	; 1
    2084:	80 93 1a 11 	sts	0x111A, r24	; 0x80111a <uxCurrentNumberOfTasks>
    2088:	80 91 26 11 	lds	r24, 0x1126	; 0x801126 <uxDeletedTasksWaitingCleanUp>
    208c:	81 50       	subi	r24, 0x01	; 1
    208e:	80 93 26 11 	sts	0x1126, r24	; 0x801126 <uxDeletedTasksWaitingCleanUp>
    2092:	0f 90       	pop	r0
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	ce 01       	movw	r24, r28
    2098:	b9 de       	rcall	.-654    	; 0x1e0c <prvDeleteTCB>
    209a:	80 91 26 11 	lds	r24, 0x1126	; 0x801126 <uxDeletedTasksWaitingCleanUp>
    209e:	81 11       	cpse	r24, r1
    20a0:	e1 cf       	rjmp	.-62     	; 0x2064 <prvCheckTasksWaitingTermination+0x6>
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	08 95       	ret

000020a8 <prvAddCurrentTaskToDelayedList>:
    20a8:	8f 92       	push	r8
    20aa:	9f 92       	push	r9
    20ac:	af 92       	push	r10
    20ae:	bf 92       	push	r11
    20b0:	cf 92       	push	r12
    20b2:	df 92       	push	r13
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	6b 01       	movw	r12, r22
    20be:	7c 01       	movw	r14, r24
    20c0:	c4 2f       	mov	r28, r20
    20c2:	80 90 16 11 	lds	r8, 0x1116	; 0x801116 <xTickCount>
    20c6:	90 90 17 11 	lds	r9, 0x1117	; 0x801117 <xTickCount+0x1>
    20ca:	a0 90 18 11 	lds	r10, 0x1118	; 0x801118 <xTickCount+0x2>
    20ce:	b0 90 19 11 	lds	r11, 0x1119	; 0x801119 <xTickCount+0x3>
    20d2:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    20d6:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    20da:	02 96       	adiw	r24, 0x02	; 2
    20dc:	0e 94 94 07 	call	0xf28	; 0xf28 <uxListRemove>
    20e0:	8f ef       	ldi	r24, 0xFF	; 255
    20e2:	c8 16       	cp	r12, r24
    20e4:	d8 06       	cpc	r13, r24
    20e6:	e8 06       	cpc	r14, r24
    20e8:	f8 06       	cpc	r15, r24
    20ea:	b1 f5       	brne	.+108    	; 0x2158 <prvAddCurrentTaskToDelayedList+0xb0>
    20ec:	cc 23       	and	r28, r28
    20ee:	a1 f1       	breq	.+104    	; 0x2158 <prvAddCurrentTaskToDelayedList+0xb0>
    20f0:	eb e1       	ldi	r30, 0x1B	; 27
    20f2:	f1 e1       	ldi	r31, 0x11	; 17
    20f4:	a1 81       	ldd	r26, Z+1	; 0x01
    20f6:	b2 81       	ldd	r27, Z+2	; 0x02
    20f8:	c0 91 c5 11 	lds	r28, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    20fc:	d0 91 c6 11 	lds	r29, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2100:	bf 83       	std	Y+7, r27	; 0x07
    2102:	ae 83       	std	Y+6, r26	; 0x06
    2104:	c0 91 c5 11 	lds	r28, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2108:	d0 91 c6 11 	lds	r29, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    210c:	16 96       	adiw	r26, 0x06	; 6
    210e:	8d 91       	ld	r24, X+
    2110:	9c 91       	ld	r25, X
    2112:	17 97       	sbiw	r26, 0x07	; 7
    2114:	99 87       	std	Y+9, r25	; 0x09
    2116:	88 87       	std	Y+8, r24	; 0x08
    2118:	16 96       	adiw	r26, 0x06	; 6
    211a:	cd 91       	ld	r28, X+
    211c:	dc 91       	ld	r29, X
    211e:	17 97       	sbiw	r26, 0x07	; 7
    2120:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2124:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2128:	02 96       	adiw	r24, 0x02	; 2
    212a:	9d 83       	std	Y+5, r25	; 0x05
    212c:	8c 83       	std	Y+4, r24	; 0x04
    212e:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2132:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2136:	02 96       	adiw	r24, 0x02	; 2
    2138:	17 96       	adiw	r26, 0x07	; 7
    213a:	9c 93       	st	X, r25
    213c:	8e 93       	st	-X, r24
    213e:	16 97       	sbiw	r26, 0x06	; 6
    2140:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2144:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2148:	1d 96       	adiw	r26, 0x0d	; 13
    214a:	fc 93       	st	X, r31
    214c:	ee 93       	st	-X, r30
    214e:	1c 97       	sbiw	r26, 0x0c	; 12
    2150:	80 81       	ld	r24, Z
    2152:	8f 5f       	subi	r24, 0xFF	; 255
    2154:	80 83       	st	Z, r24
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <prvAddCurrentTaskToDelayedList+0x12e>
    2158:	c8 0c       	add	r12, r8
    215a:	d9 1c       	adc	r13, r9
    215c:	ea 1c       	adc	r14, r10
    215e:	fb 1c       	adc	r15, r11
    2160:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2164:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2168:	c2 82       	std	Z+2, r12	; 0x02
    216a:	d3 82       	std	Z+3, r13	; 0x03
    216c:	e4 82       	std	Z+4, r14	; 0x04
    216e:	f5 82       	std	Z+5, r15	; 0x05
    2170:	c8 14       	cp	r12, r8
    2172:	d9 04       	cpc	r13, r9
    2174:	ea 04       	cpc	r14, r10
    2176:	fb 04       	cpc	r15, r11
    2178:	68 f4       	brcc	.+26     	; 0x2194 <prvAddCurrentTaskToDelayedList+0xec>
    217a:	60 91 c5 11 	lds	r22, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    217e:	70 91 c6 11 	lds	r23, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2182:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <pxOverflowDelayedTaskList>
    2186:	90 91 3e 11 	lds	r25, 0x113E	; 0x80113e <pxOverflowDelayedTaskList+0x1>
    218a:	6e 5f       	subi	r22, 0xFE	; 254
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	0e 94 57 07 	call	0xeae	; 0xeae <vListInsert>
    2192:	21 c0       	rjmp	.+66     	; 0x21d6 <prvAddCurrentTaskToDelayedList+0x12e>
    2194:	60 91 c5 11 	lds	r22, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2198:	70 91 c6 11 	lds	r23, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    219c:	80 91 3f 11 	lds	r24, 0x113F	; 0x80113f <pxDelayedTaskList>
    21a0:	90 91 40 11 	lds	r25, 0x1140	; 0x801140 <pxDelayedTaskList+0x1>
    21a4:	6e 5f       	subi	r22, 0xFE	; 254
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	0e 94 57 07 	call	0xeae	; 0xeae <vListInsert>
    21ac:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <xNextTaskUnblockTime>
    21b0:	90 91 0a 11 	lds	r25, 0x110A	; 0x80110a <xNextTaskUnblockTime+0x1>
    21b4:	a0 91 0b 11 	lds	r26, 0x110B	; 0x80110b <xNextTaskUnblockTime+0x2>
    21b8:	b0 91 0c 11 	lds	r27, 0x110C	; 0x80110c <xNextTaskUnblockTime+0x3>
    21bc:	c8 16       	cp	r12, r24
    21be:	d9 06       	cpc	r13, r25
    21c0:	ea 06       	cpc	r14, r26
    21c2:	fb 06       	cpc	r15, r27
    21c4:	40 f4       	brcc	.+16     	; 0x21d6 <prvAddCurrentTaskToDelayedList+0x12e>
    21c6:	c0 92 09 11 	sts	0x1109, r12	; 0x801109 <xNextTaskUnblockTime>
    21ca:	d0 92 0a 11 	sts	0x110A, r13	; 0x80110a <xNextTaskUnblockTime+0x1>
    21ce:	e0 92 0b 11 	sts	0x110B, r14	; 0x80110b <xNextTaskUnblockTime+0x2>
    21d2:	f0 92 0c 11 	sts	0x110C, r15	; 0x80110c <xNextTaskUnblockTime+0x3>
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	ff 90       	pop	r15
    21dc:	ef 90       	pop	r14
    21de:	df 90       	pop	r13
    21e0:	cf 90       	pop	r12
    21e2:	bf 90       	pop	r11
    21e4:	af 90       	pop	r10
    21e6:	9f 90       	pop	r9
    21e8:	8f 90       	pop	r8
    21ea:	08 95       	ret

000021ec <xTaskCreate>:
    21ec:	2f 92       	push	r2
    21ee:	3f 92       	push	r3
    21f0:	4f 92       	push	r4
    21f2:	5f 92       	push	r5
    21f4:	6f 92       	push	r6
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	3c 01       	movw	r6, r24
    2210:	1b 01       	movw	r2, r22
    2212:	4a 01       	movw	r8, r20
    2214:	29 01       	movw	r4, r18
    2216:	ca 01       	movw	r24, r20
    2218:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <pvPortMalloc>
    221c:	6c 01       	movw	r12, r24
    221e:	89 2b       	or	r24, r25
    2220:	71 f0       	breq	.+28     	; 0x223e <__stack+0x3f>
    2222:	84 e3       	ldi	r24, 0x34	; 52
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <pvPortMalloc>
    222a:	ec 01       	movw	r28, r24
    222c:	89 2b       	or	r24, r25
    222e:	19 f0       	breq	.+6      	; 0x2236 <__stack+0x37>
    2230:	dc 8e       	std	Y+28, r13	; 0x1c
    2232:	cb 8e       	std	Y+27, r12	; 0x1b
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <__stack+0x43>
    2236:	c6 01       	movw	r24, r12
    2238:	0e 94 05 07 	call	0xe0a	; 0xe0a <vPortFree>
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <__stack+0x43>
    223e:	c0 e0       	ldi	r28, 0x00	; 0
    2240:	d0 e0       	ldi	r29, 0x00	; 0
    2242:	20 97       	sbiw	r28, 0x00	; 0
    2244:	61 f0       	breq	.+24     	; 0x225e <__stack+0x5f>
    2246:	a1 2c       	mov	r10, r1
    2248:	b1 2c       	mov	r11, r1
    224a:	6e 01       	movw	r12, r28
    224c:	92 01       	movw	r18, r4
    224e:	a4 01       	movw	r20, r8
    2250:	b1 01       	movw	r22, r2
    2252:	c3 01       	movw	r24, r6
    2254:	e8 dd       	rcall	.-1072   	; 0x1e26 <prvInitialiseNewTask>
    2256:	ce 01       	movw	r24, r28
    2258:	93 de       	rcall	.-730    	; 0x1f80 <prvAddNewTaskToReadyList>
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	01 c0       	rjmp	.+2      	; 0x2260 <__stack+0x61>
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	0f 91       	pop	r16
    2266:	ff 90       	pop	r15
    2268:	ef 90       	pop	r14
    226a:	df 90       	pop	r13
    226c:	cf 90       	pop	r12
    226e:	bf 90       	pop	r11
    2270:	af 90       	pop	r10
    2272:	9f 90       	pop	r9
    2274:	8f 90       	pop	r8
    2276:	7f 90       	pop	r7
    2278:	6f 90       	pop	r6
    227a:	5f 90       	pop	r5
    227c:	4f 90       	pop	r4
    227e:	3f 90       	pop	r3
    2280:	2f 90       	pop	r2
    2282:	08 95       	ret

00002284 <vTaskStartScheduler>:
    2284:	ef 92       	push	r14
    2286:	ff 92       	push	r15
    2288:	0f 93       	push	r16
    228a:	0f 2e       	mov	r0, r31
    228c:	f7 e0       	ldi	r31, 0x07	; 7
    228e:	ef 2e       	mov	r14, r31
    2290:	f1 e1       	ldi	r31, 0x11	; 17
    2292:	ff 2e       	mov	r15, r31
    2294:	f0 2d       	mov	r31, r0
    2296:	00 e0       	ldi	r16, 0x00	; 0
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 ec       	ldi	r20, 0xC0	; 192
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	62 e4       	ldi	r22, 0x42	; 66
    22a2:	74 e0       	ldi	r23, 0x04	; 4
    22a4:	8e e4       	ldi	r24, 0x4E	; 78
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	a1 df       	rcall	.-190    	; 0x21ec <xTaskCreate>
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	11 f4       	brne	.+4      	; 0x22b2 <vTaskStartScheduler+0x2e>
    22ae:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <xTimerCreateTimerTask>
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	c9 f4       	brne	.+50     	; 0x22e8 <vTaskStartScheduler+0x64>
    22b6:	f8 94       	cli
    22b8:	8f ef       	ldi	r24, 0xFF	; 255
    22ba:	9f ef       	ldi	r25, 0xFF	; 255
    22bc:	dc 01       	movw	r26, r24
    22be:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xNextTaskUnblockTime>
    22c2:	90 93 0a 11 	sts	0x110A, r25	; 0x80110a <xNextTaskUnblockTime+0x1>
    22c6:	a0 93 0b 11 	sts	0x110B, r26	; 0x80110b <xNextTaskUnblockTime+0x2>
    22ca:	b0 93 0c 11 	sts	0x110C, r27	; 0x80110c <xNextTaskUnblockTime+0x3>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xSchedulerRunning>
    22d4:	10 92 16 11 	sts	0x1116, r1	; 0x801116 <xTickCount>
    22d8:	10 92 17 11 	sts	0x1117, r1	; 0x801117 <xTickCount+0x1>
    22dc:	10 92 18 11 	sts	0x1118, r1	; 0x801118 <xTickCount+0x2>
    22e0:	10 92 19 11 	sts	0x1119, r1	; 0x801119 <xTickCount+0x3>
    22e4:	0e 94 de 07 	call	0xfbc	; 0xfbc <xPortStartScheduler>
    22e8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	08 95       	ret

000022f4 <vTaskSuspendAll>:
    22f4:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxSchedulerSuspended>
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <uxSchedulerSuspended>
    22fe:	08 95       	ret

00002300 <xTaskGetTickCount>:
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	0f 92       	push	r0
    2306:	60 91 16 11 	lds	r22, 0x1116	; 0x801116 <xTickCount>
    230a:	70 91 17 11 	lds	r23, 0x1117	; 0x801117 <xTickCount+0x1>
    230e:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <xTickCount+0x2>
    2312:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <xTickCount+0x3>
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	08 95       	ret

0000231c <xTaskIncrementTick>:
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxSchedulerSuspended>
    232c:	81 11       	cpse	r24, r1
    232e:	05 c1       	rjmp	.+522    	; 0x253a <xTaskIncrementTick+0x21e>
    2330:	c0 90 16 11 	lds	r12, 0x1116	; 0x801116 <xTickCount>
    2334:	d0 90 17 11 	lds	r13, 0x1117	; 0x801117 <xTickCount+0x1>
    2338:	e0 90 18 11 	lds	r14, 0x1118	; 0x801118 <xTickCount+0x2>
    233c:	f0 90 19 11 	lds	r15, 0x1119	; 0x801119 <xTickCount+0x3>
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	c8 1a       	sub	r12, r24
    2344:	d8 0a       	sbc	r13, r24
    2346:	e8 0a       	sbc	r14, r24
    2348:	f8 0a       	sbc	r15, r24
    234a:	c0 92 16 11 	sts	0x1116, r12	; 0x801116 <xTickCount>
    234e:	d0 92 17 11 	sts	0x1117, r13	; 0x801117 <xTickCount+0x1>
    2352:	e0 92 18 11 	sts	0x1118, r14	; 0x801118 <xTickCount+0x2>
    2356:	f0 92 19 11 	sts	0x1119, r15	; 0x801119 <xTickCount+0x3>
    235a:	c1 14       	cp	r12, r1
    235c:	d1 04       	cpc	r13, r1
    235e:	e1 04       	cpc	r14, r1
    2360:	f1 04       	cpc	r15, r1
    2362:	b1 f4       	brne	.+44     	; 0x2390 <xTaskIncrementTick+0x74>
    2364:	80 91 3f 11 	lds	r24, 0x113F	; 0x80113f <pxDelayedTaskList>
    2368:	90 91 40 11 	lds	r25, 0x1140	; 0x801140 <pxDelayedTaskList+0x1>
    236c:	20 91 3d 11 	lds	r18, 0x113D	; 0x80113d <pxOverflowDelayedTaskList>
    2370:	30 91 3e 11 	lds	r19, 0x113E	; 0x80113e <pxOverflowDelayedTaskList+0x1>
    2374:	30 93 40 11 	sts	0x1140, r19	; 0x801140 <pxDelayedTaskList+0x1>
    2378:	20 93 3f 11 	sts	0x113F, r18	; 0x80113f <pxDelayedTaskList>
    237c:	90 93 3e 11 	sts	0x113E, r25	; 0x80113e <pxOverflowDelayedTaskList+0x1>
    2380:	80 93 3d 11 	sts	0x113D, r24	; 0x80113d <pxOverflowDelayedTaskList>
    2384:	80 91 0e 11 	lds	r24, 0x110E	; 0x80110e <xNumOfOverflows>
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	80 93 0e 11 	sts	0x110E, r24	; 0x80110e <xNumOfOverflows>
    238e:	17 dd       	rcall	.-1490   	; 0x1dbe <prvResetNextTaskUnblockTime>
    2390:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <xNextTaskUnblockTime>
    2394:	90 91 0a 11 	lds	r25, 0x110A	; 0x80110a <xNextTaskUnblockTime+0x1>
    2398:	a0 91 0b 11 	lds	r26, 0x110B	; 0x80110b <xNextTaskUnblockTime+0x2>
    239c:	b0 91 0c 11 	lds	r27, 0x110C	; 0x80110c <xNextTaskUnblockTime+0x3>
    23a0:	c8 16       	cp	r12, r24
    23a2:	d9 06       	cpc	r13, r25
    23a4:	ea 06       	cpc	r14, r26
    23a6:	fb 06       	cpc	r15, r27
    23a8:	20 f4       	brcc	.+8      	; 0x23b2 <xTaskIncrementTick+0x96>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	b2 c0       	rjmp	.+356    	; 0x2512 <xTaskIncrementTick+0x1f6>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <xTaskIncrementTick+0x98>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	e0 91 3f 11 	lds	r30, 0x113F	; 0x80113f <pxDelayedTaskList>
    23b8:	f0 91 40 11 	lds	r31, 0x1140	; 0x801140 <pxDelayedTaskList+0x1>
    23bc:	90 81       	ld	r25, Z
    23be:	91 11       	cpse	r25, r1
    23c0:	0c c0       	rjmp	.+24     	; 0x23da <xTaskIncrementTick+0xbe>
    23c2:	4f ef       	ldi	r20, 0xFF	; 255
    23c4:	5f ef       	ldi	r21, 0xFF	; 255
    23c6:	ba 01       	movw	r22, r20
    23c8:	40 93 09 11 	sts	0x1109, r20	; 0x801109 <xNextTaskUnblockTime>
    23cc:	50 93 0a 11 	sts	0x110A, r21	; 0x80110a <xNextTaskUnblockTime+0x1>
    23d0:	60 93 0b 11 	sts	0x110B, r22	; 0x80110b <xNextTaskUnblockTime+0x2>
    23d4:	70 93 0c 11 	sts	0x110C, r23	; 0x80110c <xNextTaskUnblockTime+0x3>
    23d8:	9c c0       	rjmp	.+312    	; 0x2512 <xTaskIncrementTick+0x1f6>
    23da:	e0 91 3f 11 	lds	r30, 0x113F	; 0x80113f <pxDelayedTaskList>
    23de:	f0 91 40 11 	lds	r31, 0x1140	; 0x801140 <pxDelayedTaskList+0x1>
    23e2:	07 80       	ldd	r0, Z+7	; 0x07
    23e4:	f0 85       	ldd	r31, Z+8	; 0x08
    23e6:	e0 2d       	mov	r30, r0
    23e8:	00 84       	ldd	r0, Z+8	; 0x08
    23ea:	f1 85       	ldd	r31, Z+9	; 0x09
    23ec:	e0 2d       	mov	r30, r0
    23ee:	42 81       	ldd	r20, Z+2	; 0x02
    23f0:	53 81       	ldd	r21, Z+3	; 0x03
    23f2:	64 81       	ldd	r22, Z+4	; 0x04
    23f4:	75 81       	ldd	r23, Z+5	; 0x05
    23f6:	c4 16       	cp	r12, r20
    23f8:	d5 06       	cpc	r13, r21
    23fa:	e6 06       	cpc	r14, r22
    23fc:	f7 06       	cpc	r15, r23
    23fe:	48 f4       	brcc	.+18     	; 0x2412 <xTaskIncrementTick+0xf6>
    2400:	40 93 09 11 	sts	0x1109, r20	; 0x801109 <xNextTaskUnblockTime>
    2404:	50 93 0a 11 	sts	0x110A, r21	; 0x80110a <xNextTaskUnblockTime+0x1>
    2408:	60 93 0b 11 	sts	0x110B, r22	; 0x80110b <xNextTaskUnblockTime+0x2>
    240c:	70 93 0c 11 	sts	0x110C, r23	; 0x80110c <xNextTaskUnblockTime+0x3>
    2410:	80 c0       	rjmp	.+256    	; 0x2512 <xTaskIncrementTick+0x1f6>
    2412:	a4 85       	ldd	r26, Z+12	; 0x0c
    2414:	b5 85       	ldd	r27, Z+13	; 0x0d
    2416:	c6 81       	ldd	r28, Z+6	; 0x06
    2418:	d7 81       	ldd	r29, Z+7	; 0x07
    241a:	20 85       	ldd	r18, Z+8	; 0x08
    241c:	31 85       	ldd	r19, Z+9	; 0x09
    241e:	3f 83       	std	Y+7, r19	; 0x07
    2420:	2e 83       	std	Y+6, r18	; 0x06
    2422:	c0 85       	ldd	r28, Z+8	; 0x08
    2424:	d1 85       	ldd	r29, Z+9	; 0x09
    2426:	26 81       	ldd	r18, Z+6	; 0x06
    2428:	37 81       	ldd	r19, Z+7	; 0x07
    242a:	3d 83       	std	Y+5, r19	; 0x05
    242c:	2c 83       	std	Y+4, r18	; 0x04
    242e:	11 96       	adiw	r26, 0x01	; 1
    2430:	4d 91       	ld	r20, X+
    2432:	5c 91       	ld	r21, X
    2434:	12 97       	sbiw	r26, 0x02	; 2
    2436:	9f 01       	movw	r18, r30
    2438:	2e 5f       	subi	r18, 0xFE	; 254
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	42 17       	cp	r20, r18
    243e:	53 07       	cpc	r21, r19
    2440:	31 f4       	brne	.+12     	; 0x244e <xTaskIncrementTick+0x132>
    2442:	40 85       	ldd	r20, Z+8	; 0x08
    2444:	51 85       	ldd	r21, Z+9	; 0x09
    2446:	12 96       	adiw	r26, 0x02	; 2
    2448:	5c 93       	st	X, r21
    244a:	4e 93       	st	-X, r20
    244c:	11 97       	sbiw	r26, 0x01	; 1
    244e:	15 86       	std	Z+13, r1	; 0x0d
    2450:	14 86       	std	Z+12, r1	; 0x0c
    2452:	9c 91       	ld	r25, X
    2454:	91 50       	subi	r25, 0x01	; 1
    2456:	9c 93       	st	X, r25
    2458:	a0 8d       	ldd	r26, Z+24	; 0x18
    245a:	b1 8d       	ldd	r27, Z+25	; 0x19
    245c:	10 97       	sbiw	r26, 0x00	; 0
    245e:	09 f1       	breq	.+66     	; 0x24a2 <xTaskIncrementTick+0x186>
    2460:	c2 89       	ldd	r28, Z+18	; 0x12
    2462:	d3 89       	ldd	r29, Z+19	; 0x13
    2464:	44 89       	ldd	r20, Z+20	; 0x14
    2466:	55 89       	ldd	r21, Z+21	; 0x15
    2468:	5f 83       	std	Y+7, r21	; 0x07
    246a:	4e 83       	std	Y+6, r20	; 0x06
    246c:	c4 89       	ldd	r28, Z+20	; 0x14
    246e:	d5 89       	ldd	r29, Z+21	; 0x15
    2470:	42 89       	ldd	r20, Z+18	; 0x12
    2472:	53 89       	ldd	r21, Z+19	; 0x13
    2474:	5d 83       	std	Y+5, r21	; 0x05
    2476:	4c 83       	std	Y+4, r20	; 0x04
    2478:	11 96       	adiw	r26, 0x01	; 1
    247a:	6d 91       	ld	r22, X+
    247c:	7c 91       	ld	r23, X
    247e:	12 97       	sbiw	r26, 0x02	; 2
    2480:	af 01       	movw	r20, r30
    2482:	42 5f       	subi	r20, 0xF2	; 242
    2484:	5f 4f       	sbci	r21, 0xFF	; 255
    2486:	64 17       	cp	r22, r20
    2488:	75 07       	cpc	r23, r21
    248a:	31 f4       	brne	.+12     	; 0x2498 <xTaskIncrementTick+0x17c>
    248c:	44 89       	ldd	r20, Z+20	; 0x14
    248e:	55 89       	ldd	r21, Z+21	; 0x15
    2490:	12 96       	adiw	r26, 0x02	; 2
    2492:	5c 93       	st	X, r21
    2494:	4e 93       	st	-X, r20
    2496:	11 97       	sbiw	r26, 0x01	; 1
    2498:	11 8e       	std	Z+25, r1	; 0x19
    249a:	10 8e       	std	Z+24, r1	; 0x18
    249c:	9c 91       	ld	r25, X
    249e:	91 50       	subi	r25, 0x01	; 1
    24a0:	9c 93       	st	X, r25
    24a2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24a4:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <uxTopReadyPriority>
    24a8:	9a 17       	cp	r25, r26
    24aa:	10 f4       	brcc	.+4      	; 0x24b0 <xTaskIncrementTick+0x194>
    24ac:	a0 93 15 11 	sts	0x1115, r26	; 0x801115 <uxTopReadyPriority>
    24b0:	9b e0       	ldi	r25, 0x0B	; 11
    24b2:	9a 9f       	mul	r25, r26
    24b4:	d0 01       	movw	r26, r0
    24b6:	11 24       	eor	r1, r1
    24b8:	a9 5a       	subi	r26, 0xA9	; 169
    24ba:	be 4e       	sbci	r27, 0xEE	; 238
    24bc:	11 96       	adiw	r26, 0x01	; 1
    24be:	0d 90       	ld	r0, X+
    24c0:	bc 91       	ld	r27, X
    24c2:	a0 2d       	mov	r26, r0
    24c4:	b7 83       	std	Z+7, r27	; 0x07
    24c6:	a6 83       	std	Z+6, r26	; 0x06
    24c8:	16 96       	adiw	r26, 0x06	; 6
    24ca:	4d 91       	ld	r20, X+
    24cc:	5c 91       	ld	r21, X
    24ce:	17 97       	sbiw	r26, 0x07	; 7
    24d0:	51 87       	std	Z+9, r21	; 0x09
    24d2:	40 87       	std	Z+8, r20	; 0x08
    24d4:	16 96       	adiw	r26, 0x06	; 6
    24d6:	cd 91       	ld	r28, X+
    24d8:	dc 91       	ld	r29, X
    24da:	17 97       	sbiw	r26, 0x07	; 7
    24dc:	3d 83       	std	Y+5, r19	; 0x05
    24de:	2c 83       	std	Y+4, r18	; 0x04
    24e0:	17 96       	adiw	r26, 0x07	; 7
    24e2:	3c 93       	st	X, r19
    24e4:	2e 93       	st	-X, r18
    24e6:	16 97       	sbiw	r26, 0x06	; 6
    24e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24ea:	9a 9f       	mul	r25, r26
    24ec:	d0 01       	movw	r26, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	a9 5a       	subi	r26, 0xA9	; 169
    24f2:	be 4e       	sbci	r27, 0xEE	; 238
    24f4:	b5 87       	std	Z+13, r27	; 0x0d
    24f6:	a4 87       	std	Z+12, r26	; 0x0c
    24f8:	9c 91       	ld	r25, X
    24fa:	9f 5f       	subi	r25, 0xFF	; 255
    24fc:	9c 93       	st	X, r25
    24fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    2500:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2504:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2508:	92 8d       	ldd	r25, Z+26	; 0x1a
    250a:	29 17       	cp	r18, r25
    250c:	08 f0       	brcs	.+2      	; 0x2510 <xTaskIncrementTick+0x1f4>
    250e:	4f cf       	rjmp	.-354    	; 0x23ae <xTaskIncrementTick+0x92>
    2510:	51 cf       	rjmp	.-350    	; 0x23b4 <xTaskIncrementTick+0x98>
    2512:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2516:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    251a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    251c:	9b e0       	ldi	r25, 0x0B	; 11
    251e:	e9 9f       	mul	r30, r25
    2520:	f0 01       	movw	r30, r0
    2522:	11 24       	eor	r1, r1
    2524:	e9 5a       	subi	r30, 0xA9	; 169
    2526:	fe 4e       	sbci	r31, 0xEE	; 238
    2528:	90 81       	ld	r25, Z
    252a:	92 30       	cpi	r25, 0x02	; 2
    252c:	08 f0       	brcs	.+2      	; 0x2530 <xTaskIncrementTick+0x214>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 91 0f 11 	lds	r25, 0x110F	; 0x80110f <xYieldPending>
    2534:	91 11       	cpse	r25, r1
    2536:	16 c0       	rjmp	.+44     	; 0x2564 <xTaskIncrementTick+0x248>
    2538:	16 c0       	rjmp	.+44     	; 0x2566 <xTaskIncrementTick+0x24a>
    253a:	80 91 10 11 	lds	r24, 0x1110	; 0x801110 <xPendedTicks>
    253e:	90 91 11 11 	lds	r25, 0x1111	; 0x801111 <xPendedTicks+0x1>
    2542:	a0 91 12 11 	lds	r26, 0x1112	; 0x801112 <xPendedTicks+0x2>
    2546:	b0 91 13 11 	lds	r27, 0x1113	; 0x801113 <xPendedTicks+0x3>
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	a1 1d       	adc	r26, r1
    254e:	b1 1d       	adc	r27, r1
    2550:	80 93 10 11 	sts	0x1110, r24	; 0x801110 <xPendedTicks>
    2554:	90 93 11 11 	sts	0x1111, r25	; 0x801111 <xPendedTicks+0x1>
    2558:	a0 93 12 11 	sts	0x1112, r26	; 0x801112 <xPendedTicks+0x2>
    255c:	b0 93 13 11 	sts	0x1113, r27	; 0x801113 <xPendedTicks+0x3>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	01 c0       	rjmp	.+2      	; 0x2566 <xTaskIncrementTick+0x24a>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	ff 90       	pop	r15
    256c:	ef 90       	pop	r14
    256e:	df 90       	pop	r13
    2570:	cf 90       	pop	r12
    2572:	08 95       	ret

00002574 <xTaskResumeAll>:
    2574:	cf 92       	push	r12
    2576:	df 92       	push	r13
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	0f 92       	push	r0
    2586:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxSchedulerSuspended>
    258a:	81 50       	subi	r24, 0x01	; 1
    258c:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <uxSchedulerSuspended>
    2590:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxSchedulerSuspended>
    2594:	81 11       	cpse	r24, r1
    2596:	be c0       	rjmp	.+380    	; 0x2714 <xTaskResumeAll+0x1a0>
    2598:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxCurrentNumberOfTasks>
    259c:	81 11       	cpse	r24, r1
    259e:	88 c0       	rjmp	.+272    	; 0x26b0 <xTaskResumeAll+0x13c>
    25a0:	bc c0       	rjmp	.+376    	; 0x271a <xTaskResumeAll+0x1a6>
    25a2:	e0 91 39 11 	lds	r30, 0x1139	; 0x801139 <xPendingReadyList+0x7>
    25a6:	f0 91 3a 11 	lds	r31, 0x113A	; 0x80113a <xPendingReadyList+0x8>
    25aa:	00 84       	ldd	r0, Z+8	; 0x08
    25ac:	f1 85       	ldd	r31, Z+9	; 0x09
    25ae:	e0 2d       	mov	r30, r0
    25b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    25b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    25b4:	c2 89       	ldd	r28, Z+18	; 0x12
    25b6:	d3 89       	ldd	r29, Z+19	; 0x13
    25b8:	84 89       	ldd	r24, Z+20	; 0x14
    25ba:	95 89       	ldd	r25, Z+21	; 0x15
    25bc:	9f 83       	std	Y+7, r25	; 0x07
    25be:	8e 83       	std	Y+6, r24	; 0x06
    25c0:	c4 89       	ldd	r28, Z+20	; 0x14
    25c2:	d5 89       	ldd	r29, Z+21	; 0x15
    25c4:	82 89       	ldd	r24, Z+18	; 0x12
    25c6:	93 89       	ldd	r25, Z+19	; 0x13
    25c8:	9d 83       	std	Y+5, r25	; 0x05
    25ca:	8c 83       	std	Y+4, r24	; 0x04
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	2d 91       	ld	r18, X+
    25d0:	3c 91       	ld	r19, X
    25d2:	12 97       	sbiw	r26, 0x02	; 2
    25d4:	cf 01       	movw	r24, r30
    25d6:	0e 96       	adiw	r24, 0x0e	; 14
    25d8:	28 17       	cp	r18, r24
    25da:	39 07       	cpc	r19, r25
    25dc:	31 f4       	brne	.+12     	; 0x25ea <xTaskResumeAll+0x76>
    25de:	84 89       	ldd	r24, Z+20	; 0x14
    25e0:	95 89       	ldd	r25, Z+21	; 0x15
    25e2:	12 96       	adiw	r26, 0x02	; 2
    25e4:	9c 93       	st	X, r25
    25e6:	8e 93       	st	-X, r24
    25e8:	11 97       	sbiw	r26, 0x01	; 1
    25ea:	11 8e       	std	Z+25, r1	; 0x19
    25ec:	10 8e       	std	Z+24, r1	; 0x18
    25ee:	8c 91       	ld	r24, X
    25f0:	81 50       	subi	r24, 0x01	; 1
    25f2:	8c 93       	st	X, r24
    25f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    25f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    25f8:	c6 81       	ldd	r28, Z+6	; 0x06
    25fa:	d7 81       	ldd	r29, Z+7	; 0x07
    25fc:	80 85       	ldd	r24, Z+8	; 0x08
    25fe:	91 85       	ldd	r25, Z+9	; 0x09
    2600:	9f 83       	std	Y+7, r25	; 0x07
    2602:	8e 83       	std	Y+6, r24	; 0x06
    2604:	c0 85       	ldd	r28, Z+8	; 0x08
    2606:	d1 85       	ldd	r29, Z+9	; 0x09
    2608:	86 81       	ldd	r24, Z+6	; 0x06
    260a:	97 81       	ldd	r25, Z+7	; 0x07
    260c:	9d 83       	std	Y+5, r25	; 0x05
    260e:	8c 83       	std	Y+4, r24	; 0x04
    2610:	11 96       	adiw	r26, 0x01	; 1
    2612:	8d 91       	ld	r24, X+
    2614:	9c 91       	ld	r25, X
    2616:	12 97       	sbiw	r26, 0x02	; 2
    2618:	9f 01       	movw	r18, r30
    261a:	2e 5f       	subi	r18, 0xFE	; 254
    261c:	3f 4f       	sbci	r19, 0xFF	; 255
    261e:	82 17       	cp	r24, r18
    2620:	93 07       	cpc	r25, r19
    2622:	31 f4       	brne	.+12     	; 0x2630 <xTaskResumeAll+0xbc>
    2624:	80 85       	ldd	r24, Z+8	; 0x08
    2626:	91 85       	ldd	r25, Z+9	; 0x09
    2628:	12 96       	adiw	r26, 0x02	; 2
    262a:	9c 93       	st	X, r25
    262c:	8e 93       	st	-X, r24
    262e:	11 97       	sbiw	r26, 0x01	; 1
    2630:	15 86       	std	Z+13, r1	; 0x0d
    2632:	14 86       	std	Z+12, r1	; 0x0c
    2634:	8c 91       	ld	r24, X
    2636:	81 50       	subi	r24, 0x01	; 1
    2638:	8c 93       	st	X, r24
    263a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    263c:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <uxTopReadyPriority>
    2640:	8a 17       	cp	r24, r26
    2642:	10 f4       	brcc	.+4      	; 0x2648 <xTaskResumeAll+0xd4>
    2644:	a0 93 15 11 	sts	0x1115, r26	; 0x801115 <uxTopReadyPriority>
    2648:	8b e0       	ldi	r24, 0x0B	; 11
    264a:	8a 9f       	mul	r24, r26
    264c:	d0 01       	movw	r26, r0
    264e:	11 24       	eor	r1, r1
    2650:	a9 5a       	subi	r26, 0xA9	; 169
    2652:	be 4e       	sbci	r27, 0xEE	; 238
    2654:	11 96       	adiw	r26, 0x01	; 1
    2656:	0d 90       	ld	r0, X+
    2658:	bc 91       	ld	r27, X
    265a:	a0 2d       	mov	r26, r0
    265c:	b7 83       	std	Z+7, r27	; 0x07
    265e:	a6 83       	std	Z+6, r26	; 0x06
    2660:	16 96       	adiw	r26, 0x06	; 6
    2662:	4d 91       	ld	r20, X+
    2664:	5c 91       	ld	r21, X
    2666:	17 97       	sbiw	r26, 0x07	; 7
    2668:	51 87       	std	Z+9, r21	; 0x09
    266a:	40 87       	std	Z+8, r20	; 0x08
    266c:	16 96       	adiw	r26, 0x06	; 6
    266e:	cd 91       	ld	r28, X+
    2670:	dc 91       	ld	r29, X
    2672:	17 97       	sbiw	r26, 0x07	; 7
    2674:	3d 83       	std	Y+5, r19	; 0x05
    2676:	2c 83       	std	Y+4, r18	; 0x04
    2678:	17 96       	adiw	r26, 0x07	; 7
    267a:	3c 93       	st	X, r19
    267c:	2e 93       	st	-X, r18
    267e:	16 97       	sbiw	r26, 0x06	; 6
    2680:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2682:	8a 9f       	mul	r24, r26
    2684:	d0 01       	movw	r26, r0
    2686:	11 24       	eor	r1, r1
    2688:	a9 5a       	subi	r26, 0xA9	; 169
    268a:	be 4e       	sbci	r27, 0xEE	; 238
    268c:	b5 87       	std	Z+13, r27	; 0x0d
    268e:	a4 87       	std	Z+12, r26	; 0x0c
    2690:	8c 91       	ld	r24, X
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	8c 93       	st	X, r24
    2696:	92 8d       	ldd	r25, Z+26	; 0x1a
    2698:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    269c:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    26a0:	5a 96       	adiw	r26, 0x1a	; 26
    26a2:	8c 91       	ld	r24, X
    26a4:	98 17       	cp	r25, r24
    26a6:	30 f0       	brcs	.+12     	; 0x26b4 <xTaskResumeAll+0x140>
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 0f 11 	sts	0x110F, r24	; 0x80110f <xYieldPending>
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <xTaskResumeAll+0x140>
    26b0:	e0 e0       	ldi	r30, 0x00	; 0
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 91 32 11 	lds	r24, 0x1132	; 0x801132 <xPendingReadyList>
    26b8:	81 11       	cpse	r24, r1
    26ba:	73 cf       	rjmp	.-282    	; 0x25a2 <xTaskResumeAll+0x2e>
    26bc:	ef 2b       	or	r30, r31
    26be:	09 f0       	breq	.+2      	; 0x26c2 <xTaskResumeAll+0x14e>
    26c0:	7e db       	rcall	.-2308   	; 0x1dbe <prvResetNextTaskUnblockTime>
    26c2:	c0 90 10 11 	lds	r12, 0x1110	; 0x801110 <xPendedTicks>
    26c6:	d0 90 11 11 	lds	r13, 0x1111	; 0x801111 <xPendedTicks+0x1>
    26ca:	e0 90 12 11 	lds	r14, 0x1112	; 0x801112 <xPendedTicks+0x2>
    26ce:	f0 90 13 11 	lds	r15, 0x1113	; 0x801113 <xPendedTicks+0x3>
    26d2:	c1 14       	cp	r12, r1
    26d4:	d1 04       	cpc	r13, r1
    26d6:	e1 04       	cpc	r14, r1
    26d8:	f1 04       	cpc	r15, r1
    26da:	a1 f0       	breq	.+40     	; 0x2704 <xTaskResumeAll+0x190>
    26dc:	1f de       	rcall	.-962    	; 0x231c <xTaskIncrementTick>
    26de:	88 23       	and	r24, r24
    26e0:	19 f0       	breq	.+6      	; 0x26e8 <xTaskResumeAll+0x174>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 93 0f 11 	sts	0x110F, r24	; 0x80110f <xYieldPending>
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	c8 1a       	sub	r12, r24
    26ec:	d1 08       	sbc	r13, r1
    26ee:	e1 08       	sbc	r14, r1
    26f0:	f1 08       	sbc	r15, r1
    26f2:	a1 f7       	brne	.-24     	; 0x26dc <xTaskResumeAll+0x168>
    26f4:	10 92 10 11 	sts	0x1110, r1	; 0x801110 <xPendedTicks>
    26f8:	10 92 11 11 	sts	0x1111, r1	; 0x801111 <xPendedTicks+0x1>
    26fc:	10 92 12 11 	sts	0x1112, r1	; 0x801112 <xPendedTicks+0x2>
    2700:	10 92 13 11 	sts	0x1113, r1	; 0x801113 <xPendedTicks+0x3>
    2704:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <xYieldPending>
    2708:	88 23       	and	r24, r24
    270a:	31 f0       	breq	.+12     	; 0x2718 <xTaskResumeAll+0x1a4>
    270c:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	03 c0       	rjmp	.+6      	; 0x271a <xTaskResumeAll+0x1a6>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	01 c0       	rjmp	.+2      	; 0x271a <xTaskResumeAll+0x1a6>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	ff 90       	pop	r15
    2724:	ef 90       	pop	r14
    2726:	df 90       	pop	r13
    2728:	cf 90       	pop	r12
    272a:	08 95       	ret

0000272c <xTaskDelayUntil>:
    272c:	8f 92       	push	r8
    272e:	9f 92       	push	r9
    2730:	af 92       	push	r10
    2732:	bf 92       	push	r11
    2734:	cf 92       	push	r12
    2736:	df 92       	push	r13
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	ec 01       	movw	r28, r24
    2744:	6a 01       	movw	r12, r20
    2746:	7b 01       	movw	r14, r22
    2748:	d5 dd       	rcall	.-1110   	; 0x22f4 <vTaskSuspendAll>
    274a:	80 90 16 11 	lds	r8, 0x1116	; 0x801116 <xTickCount>
    274e:	90 90 17 11 	lds	r9, 0x1117	; 0x801117 <xTickCount+0x1>
    2752:	a0 90 18 11 	lds	r10, 0x1118	; 0x801118 <xTickCount+0x2>
    2756:	b0 90 19 11 	lds	r11, 0x1119	; 0x801119 <xTickCount+0x3>
    275a:	88 81       	ld	r24, Y
    275c:	99 81       	ldd	r25, Y+1	; 0x01
    275e:	aa 81       	ldd	r26, Y+2	; 0x02
    2760:	bb 81       	ldd	r27, Y+3	; 0x03
    2762:	ac 01       	movw	r20, r24
    2764:	bd 01       	movw	r22, r26
    2766:	4c 0d       	add	r20, r12
    2768:	5d 1d       	adc	r21, r13
    276a:	6e 1d       	adc	r22, r14
    276c:	7f 1d       	adc	r23, r15
    276e:	88 16       	cp	r8, r24
    2770:	99 06       	cpc	r9, r25
    2772:	aa 06       	cpc	r10, r26
    2774:	bb 06       	cpc	r11, r27
    2776:	60 f4       	brcc	.+24     	; 0x2790 <xTaskDelayUntil+0x64>
    2778:	48 17       	cp	r20, r24
    277a:	59 07       	cpc	r21, r25
    277c:	6a 07       	cpc	r22, r26
    277e:	7b 07       	cpc	r23, r27
    2780:	98 f4       	brcc	.+38     	; 0x27a8 <xTaskDelayUntil+0x7c>
    2782:	84 16       	cp	r8, r20
    2784:	95 06       	cpc	r9, r21
    2786:	a6 06       	cpc	r10, r22
    2788:	b7 06       	cpc	r11, r23
    278a:	80 f0       	brcs	.+32     	; 0x27ac <xTaskDelayUntil+0x80>
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	13 c0       	rjmp	.+38     	; 0x27b6 <xTaskDelayUntil+0x8a>
    2790:	48 17       	cp	r20, r24
    2792:	59 07       	cpc	r21, r25
    2794:	6a 07       	cpc	r22, r26
    2796:	7b 07       	cpc	r23, r27
    2798:	58 f0       	brcs	.+22     	; 0x27b0 <xTaskDelayUntil+0x84>
    279a:	84 16       	cp	r8, r20
    279c:	95 06       	cpc	r9, r21
    279e:	a6 06       	cpc	r10, r22
    27a0:	b7 06       	cpc	r11, r23
    27a2:	40 f0       	brcs	.+16     	; 0x27b4 <xTaskDelayUntil+0x88>
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	07 c0       	rjmp	.+14     	; 0x27b6 <xTaskDelayUntil+0x8a>
    27a8:	10 e0       	ldi	r17, 0x00	; 0
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <xTaskDelayUntil+0x8a>
    27ac:	11 e0       	ldi	r17, 0x01	; 1
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <xTaskDelayUntil+0x8a>
    27b0:	11 e0       	ldi	r17, 0x01	; 1
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <xTaskDelayUntil+0x8a>
    27b4:	11 e0       	ldi	r17, 0x01	; 1
    27b6:	48 83       	st	Y, r20
    27b8:	59 83       	std	Y+1, r21	; 0x01
    27ba:	6a 83       	std	Y+2, r22	; 0x02
    27bc:	7b 83       	std	Y+3, r23	; 0x03
    27be:	11 23       	and	r17, r17
    27c0:	41 f0       	breq	.+16     	; 0x27d2 <xTaskDelayUntil+0xa6>
    27c2:	cb 01       	movw	r24, r22
    27c4:	ba 01       	movw	r22, r20
    27c6:	68 19       	sub	r22, r8
    27c8:	79 09       	sbc	r23, r9
    27ca:	8a 09       	sbc	r24, r10
    27cc:	9b 09       	sbc	r25, r11
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	6b dc       	rcall	.-1834   	; 0x20a8 <prvAddCurrentTaskToDelayedList>
    27d2:	d0 de       	rcall	.-608    	; 0x2574 <xTaskResumeAll>
    27d4:	81 11       	cpse	r24, r1
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <xTaskDelayUntil+0xb0>
    27d8:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    27dc:	81 2f       	mov	r24, r17
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	ff 90       	pop	r15
    27e6:	ef 90       	pop	r14
    27e8:	df 90       	pop	r13
    27ea:	cf 90       	pop	r12
    27ec:	bf 90       	pop	r11
    27ee:	af 90       	pop	r10
    27f0:	9f 90       	pop	r9
    27f2:	8f 90       	pop	r8
    27f4:	08 95       	ret

000027f6 <vTaskDelay>:
    27f6:	cf 92       	push	r12
    27f8:	df 92       	push	r13
    27fa:	ef 92       	push	r14
    27fc:	ff 92       	push	r15
    27fe:	6b 01       	movw	r12, r22
    2800:	7c 01       	movw	r14, r24
    2802:	67 2b       	or	r22, r23
    2804:	68 2b       	or	r22, r24
    2806:	69 2b       	or	r22, r25
    2808:	39 f0       	breq	.+14     	; 0x2818 <vTaskDelay+0x22>
    280a:	74 dd       	rcall	.-1304   	; 0x22f4 <vTaskSuspendAll>
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	c7 01       	movw	r24, r14
    2810:	b6 01       	movw	r22, r12
    2812:	4a dc       	rcall	.-1900   	; 0x20a8 <prvAddCurrentTaskToDelayedList>
    2814:	af de       	rcall	.-674    	; 0x2574 <xTaskResumeAll>
    2816:	01 c0       	rjmp	.+2      	; 0x281a <vTaskDelay+0x24>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	81 11       	cpse	r24, r1
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <vTaskDelay+0x2c>
    281e:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	df 90       	pop	r13
    2828:	cf 90       	pop	r12
    282a:	08 95       	ret

0000282c <vTaskSwitchContext>:
    282c:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxSchedulerSuspended>
    2830:	88 23       	and	r24, r24
    2832:	21 f0       	breq	.+8      	; 0x283c <vTaskSwitchContext+0x10>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	80 93 0f 11 	sts	0x110F, r24	; 0x80110f <xYieldPending>
    283a:	08 95       	ret
    283c:	10 92 0f 11 	sts	0x110F, r1	; 0x80110f <xYieldPending>
    2840:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2844:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2848:	20 81       	ld	r18, Z
    284a:	31 81       	ldd	r19, Z+1	; 0x01
    284c:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2850:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2854:	83 8d       	ldd	r24, Z+27	; 0x1b
    2856:	94 8d       	ldd	r25, Z+28	; 0x1c
    2858:	82 17       	cp	r24, r18
    285a:	93 07       	cpc	r25, r19
    285c:	60 f0       	brcs	.+24     	; 0x2876 <vTaskSwitchContext+0x4a>
    285e:	60 91 c5 11 	lds	r22, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2862:	70 91 c6 11 	lds	r23, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2866:	63 5e       	subi	r22, 0xE3	; 227
    2868:	7f 4f       	sbci	r23, 0xFF	; 255
    286a:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    286e:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2872:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <vApplicationStackOverflowHook>
    2876:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <uxTopReadyPriority>
    287a:	01 c0       	rjmp	.+2      	; 0x287e <vTaskSwitchContext+0x52>
    287c:	81 50       	subi	r24, 0x01	; 1
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	9b e0       	ldi	r25, 0x0B	; 11
    2884:	92 9f       	mul	r25, r18
    2886:	f0 01       	movw	r30, r0
    2888:	93 9f       	mul	r25, r19
    288a:	f0 0d       	add	r31, r0
    288c:	11 24       	eor	r1, r1
    288e:	e9 5a       	subi	r30, 0xA9	; 169
    2890:	fe 4e       	sbci	r31, 0xEE	; 238
    2892:	90 81       	ld	r25, Z
    2894:	99 23       	and	r25, r25
    2896:	91 f3       	breq	.-28     	; 0x287c <vTaskSwitchContext+0x50>
    2898:	9b e0       	ldi	r25, 0x0B	; 11
    289a:	92 9f       	mul	r25, r18
    289c:	a0 01       	movw	r20, r0
    289e:	93 9f       	mul	r25, r19
    28a0:	50 0d       	add	r21, r0
    28a2:	11 24       	eor	r1, r1
    28a4:	df 01       	movw	r26, r30
    28a6:	01 80       	ldd	r0, Z+1	; 0x01
    28a8:	f2 81       	ldd	r31, Z+2	; 0x02
    28aa:	e0 2d       	mov	r30, r0
    28ac:	04 80       	ldd	r0, Z+4	; 0x04
    28ae:	f5 81       	ldd	r31, Z+5	; 0x05
    28b0:	e0 2d       	mov	r30, r0
    28b2:	12 96       	adiw	r26, 0x02	; 2
    28b4:	fc 93       	st	X, r31
    28b6:	ee 93       	st	-X, r30
    28b8:	11 97       	sbiw	r26, 0x01	; 1
    28ba:	46 5a       	subi	r20, 0xA6	; 166
    28bc:	5e 4e       	sbci	r21, 0xEE	; 238
    28be:	e4 17       	cp	r30, r20
    28c0:	f5 07       	cpc	r31, r21
    28c2:	29 f4       	brne	.+10     	; 0x28ce <vTaskSwitchContext+0xa2>
    28c4:	44 81       	ldd	r20, Z+4	; 0x04
    28c6:	55 81       	ldd	r21, Z+5	; 0x05
    28c8:	fd 01       	movw	r30, r26
    28ca:	52 83       	std	Z+2, r21	; 0x02
    28cc:	41 83       	std	Z+1, r20	; 0x01
    28ce:	9b e0       	ldi	r25, 0x0B	; 11
    28d0:	92 9f       	mul	r25, r18
    28d2:	f0 01       	movw	r30, r0
    28d4:	93 9f       	mul	r25, r19
    28d6:	f0 0d       	add	r31, r0
    28d8:	11 24       	eor	r1, r1
    28da:	e9 5a       	subi	r30, 0xA9	; 169
    28dc:	fe 4e       	sbci	r31, 0xEE	; 238
    28de:	01 80       	ldd	r0, Z+1	; 0x01
    28e0:	f2 81       	ldd	r31, Z+2	; 0x02
    28e2:	e0 2d       	mov	r30, r0
    28e4:	20 85       	ldd	r18, Z+8	; 0x08
    28e6:	31 85       	ldd	r19, Z+9	; 0x09
    28e8:	30 93 c6 11 	sts	0x11C6, r19	; 0x8011c6 <pxCurrentTCB+0x1>
    28ec:	20 93 c5 11 	sts	0x11C5, r18	; 0x8011c5 <pxCurrentTCB>
    28f0:	80 93 15 11 	sts	0x1115, r24	; 0x801115 <uxTopReadyPriority>
    28f4:	08 95       	ret

000028f6 <vTaskPlaceOnEventList>:
    28f6:	cf 92       	push	r12
    28f8:	df 92       	push	r13
    28fa:	ef 92       	push	r14
    28fc:	ff 92       	push	r15
    28fe:	6a 01       	movw	r12, r20
    2900:	7b 01       	movw	r14, r22
    2902:	60 91 c5 11 	lds	r22, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2906:	70 91 c6 11 	lds	r23, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    290a:	62 5f       	subi	r22, 0xF2	; 242
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	0e 94 57 07 	call	0xeae	; 0xeae <vListInsert>
    2912:	41 e0       	ldi	r20, 0x01	; 1
    2914:	c7 01       	movw	r24, r14
    2916:	b6 01       	movw	r22, r12
    2918:	c7 db       	rcall	.-2162   	; 0x20a8 <prvAddCurrentTaskToDelayedList>
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
    2922:	08 95       	ret

00002924 <vTaskPlaceOnUnorderedEventList>:
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	fc 01       	movw	r30, r24
    292e:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2932:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2936:	70 68       	ori	r23, 0x80	; 128
    2938:	1e 96       	adiw	r26, 0x0e	; 14
    293a:	4d 93       	st	X+, r20
    293c:	5d 93       	st	X+, r21
    293e:	6d 93       	st	X+, r22
    2940:	7c 93       	st	X, r23
    2942:	51 97       	sbiw	r26, 0x11	; 17
    2944:	a1 81       	ldd	r26, Z+1	; 0x01
    2946:	b2 81       	ldd	r27, Z+2	; 0x02
    2948:	c0 91 c5 11 	lds	r28, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    294c:	d0 91 c6 11 	lds	r29, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2950:	bb 8b       	std	Y+19, r27	; 0x13
    2952:	aa 8b       	std	Y+18, r26	; 0x12
    2954:	c0 91 c5 11 	lds	r28, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2958:	d0 91 c6 11 	lds	r29, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    295c:	16 96       	adiw	r26, 0x06	; 6
    295e:	8d 91       	ld	r24, X+
    2960:	9c 91       	ld	r25, X
    2962:	17 97       	sbiw	r26, 0x07	; 7
    2964:	9d 8b       	std	Y+21, r25	; 0x15
    2966:	8c 8b       	std	Y+20, r24	; 0x14
    2968:	16 96       	adiw	r26, 0x06	; 6
    296a:	cd 91       	ld	r28, X+
    296c:	dc 91       	ld	r29, X
    296e:	17 97       	sbiw	r26, 0x07	; 7
    2970:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2974:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2978:	0e 96       	adiw	r24, 0x0e	; 14
    297a:	9d 83       	std	Y+5, r25	; 0x05
    297c:	8c 83       	std	Y+4, r24	; 0x04
    297e:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2982:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2986:	0e 96       	adiw	r24, 0x0e	; 14
    2988:	17 96       	adiw	r26, 0x07	; 7
    298a:	9c 93       	st	X, r25
    298c:	8e 93       	st	-X, r24
    298e:	16 97       	sbiw	r26, 0x06	; 6
    2990:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2994:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2998:	59 96       	adiw	r26, 0x19	; 25
    299a:	fc 93       	st	X, r31
    299c:	ee 93       	st	-X, r30
    299e:	58 97       	sbiw	r26, 0x18	; 24
    29a0:	80 81       	ld	r24, Z
    29a2:	8f 5f       	subi	r24, 0xFF	; 255
    29a4:	80 83       	st	Z, r24
    29a6:	41 e0       	ldi	r20, 0x01	; 1
    29a8:	c9 01       	movw	r24, r18
    29aa:	b8 01       	movw	r22, r16
    29ac:	7d db       	rcall	.-2310   	; 0x20a8 <prvAddCurrentTaskToDelayedList>
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	08 95       	ret

000029b8 <vTaskPlaceOnEventListRestricted>:
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	fc 01       	movw	r30, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	ba 01       	movw	r22, r20
    29c2:	a1 81       	ldd	r26, Z+1	; 0x01
    29c4:	b2 81       	ldd	r27, Z+2	; 0x02
    29c6:	c0 91 c5 11 	lds	r28, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    29ca:	d0 91 c6 11 	lds	r29, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    29ce:	bb 8b       	std	Y+19, r27	; 0x13
    29d0:	aa 8b       	std	Y+18, r26	; 0x12
    29d2:	c0 91 c5 11 	lds	r28, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    29d6:	d0 91 c6 11 	lds	r29, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    29da:	16 96       	adiw	r26, 0x06	; 6
    29dc:	4d 91       	ld	r20, X+
    29de:	5c 91       	ld	r21, X
    29e0:	17 97       	sbiw	r26, 0x07	; 7
    29e2:	5d 8b       	std	Y+21, r21	; 0x15
    29e4:	4c 8b       	std	Y+20, r20	; 0x14
    29e6:	16 96       	adiw	r26, 0x06	; 6
    29e8:	cd 91       	ld	r28, X+
    29ea:	dc 91       	ld	r29, X
    29ec:	17 97       	sbiw	r26, 0x07	; 7
    29ee:	40 91 c5 11 	lds	r20, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    29f2:	50 91 c6 11 	lds	r21, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    29f6:	42 5f       	subi	r20, 0xF2	; 242
    29f8:	5f 4f       	sbci	r21, 0xFF	; 255
    29fa:	5d 83       	std	Y+5, r21	; 0x05
    29fc:	4c 83       	std	Y+4, r20	; 0x04
    29fe:	40 91 c5 11 	lds	r20, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2a02:	50 91 c6 11 	lds	r21, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2a06:	42 5f       	subi	r20, 0xF2	; 242
    2a08:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0a:	17 96       	adiw	r26, 0x07	; 7
    2a0c:	5c 93       	st	X, r21
    2a0e:	4e 93       	st	-X, r20
    2a10:	16 97       	sbiw	r26, 0x06	; 6
    2a12:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2a16:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2a1a:	59 96       	adiw	r26, 0x19	; 25
    2a1c:	fc 93       	st	X, r31
    2a1e:	ee 93       	st	-X, r30
    2a20:	58 97       	sbiw	r26, 0x18	; 24
    2a22:	30 81       	ld	r19, Z
    2a24:	3f 5f       	subi	r19, 0xFF	; 255
    2a26:	30 83       	st	Z, r19
    2a28:	22 23       	and	r18, r18
    2a2a:	19 f0       	breq	.+6      	; 0x2a32 <vTaskPlaceOnEventListRestricted+0x7a>
    2a2c:	6f ef       	ldi	r22, 0xFF	; 255
    2a2e:	7f ef       	ldi	r23, 0xFF	; 255
    2a30:	cb 01       	movw	r24, r22
    2a32:	42 2f       	mov	r20, r18
    2a34:	39 db       	rcall	.-2446   	; 0x20a8 <prvAddCurrentTaskToDelayedList>
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	08 95       	ret

00002a3c <xTaskRemoveFromEventList>:
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	dc 01       	movw	r26, r24
    2a42:	17 96       	adiw	r26, 0x07	; 7
    2a44:	ed 91       	ld	r30, X+
    2a46:	fc 91       	ld	r31, X
    2a48:	18 97       	sbiw	r26, 0x08	; 8
    2a4a:	00 84       	ldd	r0, Z+8	; 0x08
    2a4c:	f1 85       	ldd	r31, Z+9	; 0x09
    2a4e:	e0 2d       	mov	r30, r0
    2a50:	a0 8d       	ldd	r26, Z+24	; 0x18
    2a52:	b1 8d       	ldd	r27, Z+25	; 0x19
    2a54:	c2 89       	ldd	r28, Z+18	; 0x12
    2a56:	d3 89       	ldd	r29, Z+19	; 0x13
    2a58:	84 89       	ldd	r24, Z+20	; 0x14
    2a5a:	95 89       	ldd	r25, Z+21	; 0x15
    2a5c:	9f 83       	std	Y+7, r25	; 0x07
    2a5e:	8e 83       	std	Y+6, r24	; 0x06
    2a60:	c4 89       	ldd	r28, Z+20	; 0x14
    2a62:	d5 89       	ldd	r29, Z+21	; 0x15
    2a64:	82 89       	ldd	r24, Z+18	; 0x12
    2a66:	93 89       	ldd	r25, Z+19	; 0x13
    2a68:	9d 83       	std	Y+5, r25	; 0x05
    2a6a:	8c 83       	std	Y+4, r24	; 0x04
    2a6c:	11 96       	adiw	r26, 0x01	; 1
    2a6e:	8d 91       	ld	r24, X+
    2a70:	9c 91       	ld	r25, X
    2a72:	12 97       	sbiw	r26, 0x02	; 2
    2a74:	9f 01       	movw	r18, r30
    2a76:	22 5f       	subi	r18, 0xF2	; 242
    2a78:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7a:	82 17       	cp	r24, r18
    2a7c:	93 07       	cpc	r25, r19
    2a7e:	31 f4       	brne	.+12     	; 0x2a8c <xTaskRemoveFromEventList+0x50>
    2a80:	84 89       	ldd	r24, Z+20	; 0x14
    2a82:	95 89       	ldd	r25, Z+21	; 0x15
    2a84:	12 96       	adiw	r26, 0x02	; 2
    2a86:	9c 93       	st	X, r25
    2a88:	8e 93       	st	-X, r24
    2a8a:	11 97       	sbiw	r26, 0x01	; 1
    2a8c:	11 8e       	std	Z+25, r1	; 0x19
    2a8e:	10 8e       	std	Z+24, r1	; 0x18
    2a90:	8c 91       	ld	r24, X
    2a92:	81 50       	subi	r24, 0x01	; 1
    2a94:	8c 93       	st	X, r24
    2a96:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxSchedulerSuspended>
    2a9a:	81 11       	cpse	r24, r1
    2a9c:	52 c0       	rjmp	.+164    	; 0x2b42 <xTaskRemoveFromEventList+0x106>
    2a9e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2aa0:	b5 85       	ldd	r27, Z+13	; 0x0d
    2aa2:	c6 81       	ldd	r28, Z+6	; 0x06
    2aa4:	d7 81       	ldd	r29, Z+7	; 0x07
    2aa6:	80 85       	ldd	r24, Z+8	; 0x08
    2aa8:	91 85       	ldd	r25, Z+9	; 0x09
    2aaa:	9f 83       	std	Y+7, r25	; 0x07
    2aac:	8e 83       	std	Y+6, r24	; 0x06
    2aae:	c0 85       	ldd	r28, Z+8	; 0x08
    2ab0:	d1 85       	ldd	r29, Z+9	; 0x09
    2ab2:	86 81       	ldd	r24, Z+6	; 0x06
    2ab4:	97 81       	ldd	r25, Z+7	; 0x07
    2ab6:	9d 83       	std	Y+5, r25	; 0x05
    2ab8:	8c 83       	std	Y+4, r24	; 0x04
    2aba:	11 96       	adiw	r26, 0x01	; 1
    2abc:	8d 91       	ld	r24, X+
    2abe:	9c 91       	ld	r25, X
    2ac0:	12 97       	sbiw	r26, 0x02	; 2
    2ac2:	9f 01       	movw	r18, r30
    2ac4:	2e 5f       	subi	r18, 0xFE	; 254
    2ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac8:	82 17       	cp	r24, r18
    2aca:	93 07       	cpc	r25, r19
    2acc:	31 f4       	brne	.+12     	; 0x2ada <xTaskRemoveFromEventList+0x9e>
    2ace:	80 85       	ldd	r24, Z+8	; 0x08
    2ad0:	91 85       	ldd	r25, Z+9	; 0x09
    2ad2:	12 96       	adiw	r26, 0x02	; 2
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 93       	st	-X, r24
    2ad8:	11 97       	sbiw	r26, 0x01	; 1
    2ada:	15 86       	std	Z+13, r1	; 0x0d
    2adc:	14 86       	std	Z+12, r1	; 0x0c
    2ade:	8c 91       	ld	r24, X
    2ae0:	81 50       	subi	r24, 0x01	; 1
    2ae2:	8c 93       	st	X, r24
    2ae4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2ae6:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <uxTopReadyPriority>
    2aea:	8a 17       	cp	r24, r26
    2aec:	10 f4       	brcc	.+4      	; 0x2af2 <xTaskRemoveFromEventList+0xb6>
    2aee:	a0 93 15 11 	sts	0x1115, r26	; 0x801115 <uxTopReadyPriority>
    2af2:	8b e0       	ldi	r24, 0x0B	; 11
    2af4:	8a 9f       	mul	r24, r26
    2af6:	d0 01       	movw	r26, r0
    2af8:	11 24       	eor	r1, r1
    2afa:	a9 5a       	subi	r26, 0xA9	; 169
    2afc:	be 4e       	sbci	r27, 0xEE	; 238
    2afe:	11 96       	adiw	r26, 0x01	; 1
    2b00:	0d 90       	ld	r0, X+
    2b02:	bc 91       	ld	r27, X
    2b04:	a0 2d       	mov	r26, r0
    2b06:	b7 83       	std	Z+7, r27	; 0x07
    2b08:	a6 83       	std	Z+6, r26	; 0x06
    2b0a:	16 96       	adiw	r26, 0x06	; 6
    2b0c:	4d 91       	ld	r20, X+
    2b0e:	5c 91       	ld	r21, X
    2b10:	17 97       	sbiw	r26, 0x07	; 7
    2b12:	51 87       	std	Z+9, r21	; 0x09
    2b14:	40 87       	std	Z+8, r20	; 0x08
    2b16:	16 96       	adiw	r26, 0x06	; 6
    2b18:	cd 91       	ld	r28, X+
    2b1a:	dc 91       	ld	r29, X
    2b1c:	17 97       	sbiw	r26, 0x07	; 7
    2b1e:	3d 83       	std	Y+5, r19	; 0x05
    2b20:	2c 83       	std	Y+4, r18	; 0x04
    2b22:	17 96       	adiw	r26, 0x07	; 7
    2b24:	3c 93       	st	X, r19
    2b26:	2e 93       	st	-X, r18
    2b28:	16 97       	sbiw	r26, 0x06	; 6
    2b2a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b2c:	8a 9f       	mul	r24, r26
    2b2e:	d0 01       	movw	r26, r0
    2b30:	11 24       	eor	r1, r1
    2b32:	a9 5a       	subi	r26, 0xA9	; 169
    2b34:	be 4e       	sbci	r27, 0xEE	; 238
    2b36:	b5 87       	std	Z+13, r27	; 0x0d
    2b38:	a4 87       	std	Z+12, r26	; 0x0c
    2b3a:	8c 91       	ld	r24, X
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	8c 93       	st	X, r24
    2b40:	1c c0       	rjmp	.+56     	; 0x2b7a <xTaskRemoveFromEventList+0x13e>
    2b42:	42 e3       	ldi	r20, 0x32	; 50
    2b44:	51 e1       	ldi	r21, 0x11	; 17
    2b46:	da 01       	movw	r26, r20
    2b48:	11 96       	adiw	r26, 0x01	; 1
    2b4a:	cd 91       	ld	r28, X+
    2b4c:	dc 91       	ld	r29, X
    2b4e:	12 97       	sbiw	r26, 0x02	; 2
    2b50:	d3 8b       	std	Z+19, r29	; 0x13
    2b52:	c2 8b       	std	Z+18, r28	; 0x12
    2b54:	8e 81       	ldd	r24, Y+6	; 0x06
    2b56:	9f 81       	ldd	r25, Y+7	; 0x07
    2b58:	95 8b       	std	Z+21, r25	; 0x15
    2b5a:	84 8b       	std	Z+20, r24	; 0x14
    2b5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b60:	dc 01       	movw	r26, r24
    2b62:	15 96       	adiw	r26, 0x05	; 5
    2b64:	3c 93       	st	X, r19
    2b66:	2e 93       	st	-X, r18
    2b68:	14 97       	sbiw	r26, 0x04	; 4
    2b6a:	3f 83       	std	Y+7, r19	; 0x07
    2b6c:	2e 83       	std	Y+6, r18	; 0x06
    2b6e:	51 8f       	std	Z+25, r21	; 0x19
    2b70:	40 8f       	std	Z+24, r20	; 0x18
    2b72:	da 01       	movw	r26, r20
    2b74:	8c 91       	ld	r24, X
    2b76:	8f 5f       	subi	r24, 0xFF	; 255
    2b78:	8c 93       	st	X, r24
    2b7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b7c:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2b80:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2b84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b86:	89 17       	cp	r24, r25
    2b88:	20 f4       	brcc	.+8      	; 0x2b92 <xTaskRemoveFromEventList+0x156>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 0f 11 	sts	0x110F, r24	; 0x80110f <xYieldPending>
    2b90:	01 c0       	rjmp	.+2      	; 0x2b94 <xTaskRemoveFromEventList+0x158>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	08 95       	ret

00002b9a <vTaskRemoveFromUnorderedEventList>:
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	70 68       	ori	r23, 0x80	; 128
    2ba2:	4d 93       	st	X+, r20
    2ba4:	5d 93       	st	X+, r21
    2ba6:	6d 93       	st	X+, r22
    2ba8:	7c 93       	st	X, r23
    2baa:	13 97       	sbiw	r26, 0x03	; 3
    2bac:	18 96       	adiw	r26, 0x08	; 8
    2bae:	ed 91       	ld	r30, X+
    2bb0:	fc 91       	ld	r31, X
    2bb2:	19 97       	sbiw	r26, 0x09	; 9
    2bb4:	1a 96       	adiw	r26, 0x0a	; 10
    2bb6:	4d 91       	ld	r20, X+
    2bb8:	5c 91       	ld	r21, X
    2bba:	1b 97       	sbiw	r26, 0x0b	; 11
    2bbc:	14 96       	adiw	r26, 0x04	; 4
    2bbe:	8d 91       	ld	r24, X+
    2bc0:	9c 91       	ld	r25, X
    2bc2:	15 97       	sbiw	r26, 0x05	; 5
    2bc4:	16 96       	adiw	r26, 0x06	; 6
    2bc6:	2d 91       	ld	r18, X+
    2bc8:	3c 91       	ld	r19, X
    2bca:	17 97       	sbiw	r26, 0x07	; 7
    2bcc:	ec 01       	movw	r28, r24
    2bce:	3f 83       	std	Y+7, r19	; 0x07
    2bd0:	2e 83       	std	Y+6, r18	; 0x06
    2bd2:	16 96       	adiw	r26, 0x06	; 6
    2bd4:	8d 91       	ld	r24, X+
    2bd6:	9c 91       	ld	r25, X
    2bd8:	17 97       	sbiw	r26, 0x07	; 7
    2bda:	14 96       	adiw	r26, 0x04	; 4
    2bdc:	2d 91       	ld	r18, X+
    2bde:	3c 91       	ld	r19, X
    2be0:	15 97       	sbiw	r26, 0x05	; 5
    2be2:	ec 01       	movw	r28, r24
    2be4:	3d 83       	std	Y+5, r19	; 0x05
    2be6:	2c 83       	std	Y+4, r18	; 0x04
    2be8:	ea 01       	movw	r28, r20
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	a8 17       	cp	r26, r24
    2bf0:	b9 07       	cpc	r27, r25
    2bf2:	31 f4       	brne	.+12     	; 0x2c00 <vTaskRemoveFromUnorderedEventList+0x66>
    2bf4:	16 96       	adiw	r26, 0x06	; 6
    2bf6:	8d 91       	ld	r24, X+
    2bf8:	9c 91       	ld	r25, X
    2bfa:	17 97       	sbiw	r26, 0x07	; 7
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	1b 96       	adiw	r26, 0x0b	; 11
    2c02:	1c 92       	st	X, r1
    2c04:	1e 92       	st	-X, r1
    2c06:	1a 97       	sbiw	r26, 0x0a	; 10
    2c08:	da 01       	movw	r26, r20
    2c0a:	8c 91       	ld	r24, X
    2c0c:	81 50       	subi	r24, 0x01	; 1
    2c0e:	8c 93       	st	X, r24
    2c10:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c12:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c14:	c6 81       	ldd	r28, Z+6	; 0x06
    2c16:	d7 81       	ldd	r29, Z+7	; 0x07
    2c18:	80 85       	ldd	r24, Z+8	; 0x08
    2c1a:	91 85       	ldd	r25, Z+9	; 0x09
    2c1c:	9f 83       	std	Y+7, r25	; 0x07
    2c1e:	8e 83       	std	Y+6, r24	; 0x06
    2c20:	c0 85       	ldd	r28, Z+8	; 0x08
    2c22:	d1 85       	ldd	r29, Z+9	; 0x09
    2c24:	86 81       	ldd	r24, Z+6	; 0x06
    2c26:	97 81       	ldd	r25, Z+7	; 0x07
    2c28:	9d 83       	std	Y+5, r25	; 0x05
    2c2a:	8c 83       	std	Y+4, r24	; 0x04
    2c2c:	11 96       	adiw	r26, 0x01	; 1
    2c2e:	8d 91       	ld	r24, X+
    2c30:	9c 91       	ld	r25, X
    2c32:	12 97       	sbiw	r26, 0x02	; 2
    2c34:	9f 01       	movw	r18, r30
    2c36:	2e 5f       	subi	r18, 0xFE	; 254
    2c38:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3a:	82 17       	cp	r24, r18
    2c3c:	93 07       	cpc	r25, r19
    2c3e:	31 f4       	brne	.+12     	; 0x2c4c <vTaskRemoveFromUnorderedEventList+0xb2>
    2c40:	80 85       	ldd	r24, Z+8	; 0x08
    2c42:	91 85       	ldd	r25, Z+9	; 0x09
    2c44:	12 96       	adiw	r26, 0x02	; 2
    2c46:	9c 93       	st	X, r25
    2c48:	8e 93       	st	-X, r24
    2c4a:	11 97       	sbiw	r26, 0x01	; 1
    2c4c:	15 86       	std	Z+13, r1	; 0x0d
    2c4e:	14 86       	std	Z+12, r1	; 0x0c
    2c50:	8c 91       	ld	r24, X
    2c52:	81 50       	subi	r24, 0x01	; 1
    2c54:	8c 93       	st	X, r24
    2c56:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c58:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <uxTopReadyPriority>
    2c5c:	8a 17       	cp	r24, r26
    2c5e:	10 f4       	brcc	.+4      	; 0x2c64 <vTaskRemoveFromUnorderedEventList+0xca>
    2c60:	a0 93 15 11 	sts	0x1115, r26	; 0x801115 <uxTopReadyPriority>
    2c64:	8b e0       	ldi	r24, 0x0B	; 11
    2c66:	8a 9f       	mul	r24, r26
    2c68:	d0 01       	movw	r26, r0
    2c6a:	11 24       	eor	r1, r1
    2c6c:	a9 5a       	subi	r26, 0xA9	; 169
    2c6e:	be 4e       	sbci	r27, 0xEE	; 238
    2c70:	11 96       	adiw	r26, 0x01	; 1
    2c72:	0d 90       	ld	r0, X+
    2c74:	bc 91       	ld	r27, X
    2c76:	a0 2d       	mov	r26, r0
    2c78:	b7 83       	std	Z+7, r27	; 0x07
    2c7a:	a6 83       	std	Z+6, r26	; 0x06
    2c7c:	16 96       	adiw	r26, 0x06	; 6
    2c7e:	4d 91       	ld	r20, X+
    2c80:	5c 91       	ld	r21, X
    2c82:	17 97       	sbiw	r26, 0x07	; 7
    2c84:	51 87       	std	Z+9, r21	; 0x09
    2c86:	40 87       	std	Z+8, r20	; 0x08
    2c88:	16 96       	adiw	r26, 0x06	; 6
    2c8a:	cd 91       	ld	r28, X+
    2c8c:	dc 91       	ld	r29, X
    2c8e:	17 97       	sbiw	r26, 0x07	; 7
    2c90:	3d 83       	std	Y+5, r19	; 0x05
    2c92:	2c 83       	std	Y+4, r18	; 0x04
    2c94:	17 96       	adiw	r26, 0x07	; 7
    2c96:	3c 93       	st	X, r19
    2c98:	2e 93       	st	-X, r18
    2c9a:	16 97       	sbiw	r26, 0x06	; 6
    2c9c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c9e:	8a 9f       	mul	r24, r26
    2ca0:	d0 01       	movw	r26, r0
    2ca2:	11 24       	eor	r1, r1
    2ca4:	a9 5a       	subi	r26, 0xA9	; 169
    2ca6:	be 4e       	sbci	r27, 0xEE	; 238
    2ca8:	b5 87       	std	Z+13, r27	; 0x0d
    2caa:	a4 87       	std	Z+12, r26	; 0x0c
    2cac:	8c 91       	ld	r24, X
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	8c 93       	st	X, r24
    2cb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cb4:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2cb8:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2cbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cbe:	89 17       	cp	r24, r25
    2cc0:	18 f4       	brcc	.+6      	; 0x2cc8 <vTaskRemoveFromUnorderedEventList+0x12e>
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 0f 11 	sts	0x110F, r24	; 0x80110f <xYieldPending>
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

00002cce <vTaskSetTimeOutState>:
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	0f 92       	push	r0
    2cd4:	20 91 0e 11 	lds	r18, 0x110E	; 0x80110e <xNumOfOverflows>
    2cd8:	fc 01       	movw	r30, r24
    2cda:	20 83       	st	Z, r18
    2cdc:	40 91 16 11 	lds	r20, 0x1116	; 0x801116 <xTickCount>
    2ce0:	50 91 17 11 	lds	r21, 0x1117	; 0x801117 <xTickCount+0x1>
    2ce4:	60 91 18 11 	lds	r22, 0x1118	; 0x801118 <xTickCount+0x2>
    2ce8:	70 91 19 11 	lds	r23, 0x1119	; 0x801119 <xTickCount+0x3>
    2cec:	41 83       	std	Z+1, r20	; 0x01
    2cee:	52 83       	std	Z+2, r21	; 0x02
    2cf0:	63 83       	std	Z+3, r22	; 0x03
    2cf2:	74 83       	std	Z+4, r23	; 0x04
    2cf4:	0f 90       	pop	r0
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	08 95       	ret

00002cfa <vTaskInternalSetTimeOutState>:
    2cfa:	20 91 0e 11 	lds	r18, 0x110E	; 0x80110e <xNumOfOverflows>
    2cfe:	fc 01       	movw	r30, r24
    2d00:	20 83       	st	Z, r18
    2d02:	40 91 16 11 	lds	r20, 0x1116	; 0x801116 <xTickCount>
    2d06:	50 91 17 11 	lds	r21, 0x1117	; 0x801117 <xTickCount+0x1>
    2d0a:	60 91 18 11 	lds	r22, 0x1118	; 0x801118 <xTickCount+0x2>
    2d0e:	70 91 19 11 	lds	r23, 0x1119	; 0x801119 <xTickCount+0x3>
    2d12:	41 83       	std	Z+1, r20	; 0x01
    2d14:	52 83       	std	Z+2, r21	; 0x02
    2d16:	63 83       	std	Z+3, r22	; 0x03
    2d18:	74 83       	std	Z+4, r23	; 0x04
    2d1a:	08 95       	ret

00002d1c <xTaskCheckForTimeOut>:
    2d1c:	8f 92       	push	r8
    2d1e:	9f 92       	push	r9
    2d20:	af 92       	push	r10
    2d22:	bf 92       	push	r11
    2d24:	cf 92       	push	r12
    2d26:	df 92       	push	r13
    2d28:	ef 92       	push	r14
    2d2a:	ff 92       	push	r15
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	fb 01       	movw	r30, r22
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	0f 92       	push	r0
    2d3c:	c0 90 16 11 	lds	r12, 0x1116	; 0x801116 <xTickCount>
    2d40:	d0 90 17 11 	lds	r13, 0x1117	; 0x801117 <xTickCount+0x1>
    2d44:	e0 90 18 11 	lds	r14, 0x1118	; 0x801118 <xTickCount+0x2>
    2d48:	f0 90 19 11 	lds	r15, 0x1119	; 0x801119 <xTickCount+0x3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	11 96       	adiw	r26, 0x01	; 1
    2d50:	0d 91       	ld	r16, X+
    2d52:	1d 91       	ld	r17, X+
    2d54:	2d 91       	ld	r18, X+
    2d56:	3c 91       	ld	r19, X
    2d58:	14 97       	sbiw	r26, 0x04	; 4
    2d5a:	46 01       	movw	r8, r12
    2d5c:	57 01       	movw	r10, r14
    2d5e:	80 1a       	sub	r8, r16
    2d60:	91 0a       	sbc	r9, r17
    2d62:	a2 0a       	sbc	r10, r18
    2d64:	b3 0a       	sbc	r11, r19
    2d66:	40 81       	ld	r20, Z
    2d68:	51 81       	ldd	r21, Z+1	; 0x01
    2d6a:	62 81       	ldd	r22, Z+2	; 0x02
    2d6c:	73 81       	ldd	r23, Z+3	; 0x03
    2d6e:	4f 3f       	cpi	r20, 0xFF	; 255
    2d70:	bf ef       	ldi	r27, 0xFF	; 255
    2d72:	5b 07       	cpc	r21, r27
    2d74:	6b 07       	cpc	r22, r27
    2d76:	7b 07       	cpc	r23, r27
    2d78:	39 f1       	breq	.+78     	; 0x2dc8 <xTaskCheckForTimeOut+0xac>
    2d7a:	ec 01       	movw	r28, r24
    2d7c:	b8 81       	ld	r27, Y
    2d7e:	a0 91 0e 11 	lds	r26, 0x110E	; 0x80110e <xNumOfOverflows>
    2d82:	ba 17       	cp	r27, r26
    2d84:	59 f0       	breq	.+22     	; 0x2d9c <xTaskCheckForTimeOut+0x80>
    2d86:	c0 16       	cp	r12, r16
    2d88:	d1 06       	cpc	r13, r17
    2d8a:	e2 06       	cpc	r14, r18
    2d8c:	f3 06       	cpc	r15, r19
    2d8e:	30 f0       	brcs	.+12     	; 0x2d9c <xTaskCheckForTimeOut+0x80>
    2d90:	10 82       	st	Z, r1
    2d92:	11 82       	std	Z+1, r1	; 0x01
    2d94:	12 82       	std	Z+2, r1	; 0x02
    2d96:	13 82       	std	Z+3, r1	; 0x03
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	17 c0       	rjmp	.+46     	; 0x2dca <xTaskCheckForTimeOut+0xae>
    2d9c:	84 16       	cp	r8, r20
    2d9e:	95 06       	cpc	r9, r21
    2da0:	a6 06       	cpc	r10, r22
    2da2:	b7 06       	cpc	r11, r23
    2da4:	58 f4       	brcc	.+22     	; 0x2dbc <xTaskCheckForTimeOut+0xa0>
    2da6:	48 19       	sub	r20, r8
    2da8:	59 09       	sbc	r21, r9
    2daa:	6a 09       	sbc	r22, r10
    2dac:	7b 09       	sbc	r23, r11
    2dae:	40 83       	st	Z, r20
    2db0:	51 83       	std	Z+1, r21	; 0x01
    2db2:	62 83       	std	Z+2, r22	; 0x02
    2db4:	73 83       	std	Z+3, r23	; 0x03
    2db6:	a1 df       	rcall	.-190    	; 0x2cfa <vTaskInternalSetTimeOutState>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	07 c0       	rjmp	.+14     	; 0x2dca <xTaskCheckForTimeOut+0xae>
    2dbc:	10 82       	st	Z, r1
    2dbe:	11 82       	std	Z+1, r1	; 0x01
    2dc0:	12 82       	std	Z+2, r1	; 0x02
    2dc2:	13 82       	std	Z+3, r1	; 0x03
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <xTaskCheckForTimeOut+0xae>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	0f 90       	pop	r0
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	df 90       	pop	r13
    2ddc:	cf 90       	pop	r12
    2dde:	bf 90       	pop	r11
    2de0:	af 90       	pop	r10
    2de2:	9f 90       	pop	r9
    2de4:	8f 90       	pop	r8
    2de6:	08 95       	ret

00002de8 <vTaskMissedYield>:
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	80 93 0f 11 	sts	0x110F, r24	; 0x80110f <xYieldPending>
    2dee:	08 95       	ret

00002df0 <xTaskGetCurrentTaskHandle>:
    2df0:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2df4:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2df8:	08 95       	ret

00002dfa <xTaskGetSchedulerState>:
    2dfa:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <xSchedulerRunning>
    2dfe:	88 23       	and	r24, r24
    2e00:	31 f0       	breq	.+12     	; 0x2e0e <xTaskGetSchedulerState+0x14>
    2e02:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxSchedulerSuspended>
    2e06:	81 11       	cpse	r24, r1
    2e08:	04 c0       	rjmp	.+8      	; 0x2e12 <xTaskGetSchedulerState+0x18>
    2e0a:	82 e0       	ldi	r24, 0x02	; 2
    2e0c:	08 95       	ret
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	08 95       	ret
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	08 95       	ret

00002e16 <xTaskPriorityDisinherit>:
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	fc 01       	movw	r30, r24
    2e20:	89 2b       	or	r24, r25
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <xTaskPriorityDisinherit+0x10>
    2e24:	49 c0       	rjmp	.+146    	; 0x2eb8 <xTaskPriorityDisinherit+0xa2>
    2e26:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e28:	81 50       	subi	r24, 0x01	; 1
    2e2a:	86 a7       	std	Z+46, r24	; 0x2e
    2e2c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e2e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2e30:	29 17       	cp	r18, r25
    2e32:	09 f4       	brne	.+2      	; 0x2e36 <xTaskPriorityDisinherit+0x20>
    2e34:	43 c0       	rjmp	.+134    	; 0x2ebc <xTaskPriorityDisinherit+0xa6>
    2e36:	81 11       	cpse	r24, r1
    2e38:	43 c0       	rjmp	.+134    	; 0x2ec0 <xTaskPriorityDisinherit+0xaa>
    2e3a:	ef 01       	movw	r28, r30
    2e3c:	8f 01       	movw	r16, r30
    2e3e:	0e 5f       	subi	r16, 0xFE	; 254
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	c8 01       	movw	r24, r16
    2e44:	0e 94 94 07 	call	0xf28	; 0xf28 <uxListRemove>
    2e48:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e4a:	ea 8f       	std	Y+26, r30	; 0x1a
    2e4c:	8a e0       	ldi	r24, 0x0A	; 10
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a0 e0       	ldi	r26, 0x00	; 0
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	8e 1b       	sub	r24, r30
    2e56:	91 09       	sbc	r25, r1
    2e58:	a1 09       	sbc	r26, r1
    2e5a:	b1 09       	sbc	r27, r1
    2e5c:	8e 87       	std	Y+14, r24	; 0x0e
    2e5e:	9f 87       	std	Y+15, r25	; 0x0f
    2e60:	a8 8b       	std	Y+16, r26	; 0x10
    2e62:	b9 8b       	std	Y+17, r27	; 0x11
    2e64:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <uxTopReadyPriority>
    2e68:	8e 17       	cp	r24, r30
    2e6a:	10 f4       	brcc	.+4      	; 0x2e70 <xTaskPriorityDisinherit+0x5a>
    2e6c:	e0 93 15 11 	sts	0x1115, r30	; 0x801115 <uxTopReadyPriority>
    2e70:	8b e0       	ldi	r24, 0x0B	; 11
    2e72:	8e 9f       	mul	r24, r30
    2e74:	f0 01       	movw	r30, r0
    2e76:	11 24       	eor	r1, r1
    2e78:	e9 5a       	subi	r30, 0xA9	; 169
    2e7a:	fe 4e       	sbci	r31, 0xEE	; 238
    2e7c:	01 80       	ldd	r0, Z+1	; 0x01
    2e7e:	f2 81       	ldd	r31, Z+2	; 0x02
    2e80:	e0 2d       	mov	r30, r0
    2e82:	ff 83       	std	Y+7, r31	; 0x07
    2e84:	ee 83       	std	Y+6, r30	; 0x06
    2e86:	26 81       	ldd	r18, Z+6	; 0x06
    2e88:	37 81       	ldd	r19, Z+7	; 0x07
    2e8a:	39 87       	std	Y+9, r19	; 0x09
    2e8c:	28 87       	std	Y+8, r18	; 0x08
    2e8e:	a6 81       	ldd	r26, Z+6	; 0x06
    2e90:	b7 81       	ldd	r27, Z+7	; 0x07
    2e92:	15 96       	adiw	r26, 0x05	; 5
    2e94:	1c 93       	st	X, r17
    2e96:	0e 93       	st	-X, r16
    2e98:	14 97       	sbiw	r26, 0x04	; 4
    2e9a:	17 83       	std	Z+7, r17	; 0x07
    2e9c:	06 83       	std	Z+6, r16	; 0x06
    2e9e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ea0:	8e 9f       	mul	r24, r30
    2ea2:	f0 01       	movw	r30, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	e9 5a       	subi	r30, 0xA9	; 169
    2ea8:	fe 4e       	sbci	r31, 0xEE	; 238
    2eaa:	fd 87       	std	Y+13, r31	; 0x0d
    2eac:	ec 87       	std	Y+12, r30	; 0x0c
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	80 83       	st	Z, r24
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <xTaskPriorityDisinherit+0xac>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	03 c0       	rjmp	.+6      	; 0x2ec2 <xTaskPriorityDisinherit+0xac>
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <xTaskPriorityDisinherit+0xac>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <uxTaskResetEventItemValue>:
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2ed8:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2edc:	66 85       	ldd	r22, Z+14	; 0x0e
    2ede:	77 85       	ldd	r23, Z+15	; 0x0f
    2ee0:	80 89       	ldd	r24, Z+16	; 0x10
    2ee2:	91 89       	ldd	r25, Z+17	; 0x11
    2ee4:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2ee8:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2eec:	a0 91 c5 11 	lds	r26, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2ef0:	b0 91 c6 11 	lds	r27, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2ef4:	5a 96       	adiw	r26, 0x1a	; 26
    2ef6:	2c 91       	ld	r18, X
    2ef8:	0f 2e       	mov	r0, r31
    2efa:	fa e0       	ldi	r31, 0x0A	; 10
    2efc:	cf 2e       	mov	r12, r31
    2efe:	d1 2c       	mov	r13, r1
    2f00:	e1 2c       	mov	r14, r1
    2f02:	f1 2c       	mov	r15, r1
    2f04:	f0 2d       	mov	r31, r0
    2f06:	c2 1a       	sub	r12, r18
    2f08:	d1 08       	sbc	r13, r1
    2f0a:	e1 08       	sbc	r14, r1
    2f0c:	f1 08       	sbc	r15, r1
    2f0e:	c6 86       	std	Z+14, r12	; 0x0e
    2f10:	d7 86       	std	Z+15, r13	; 0x0f
    2f12:	e0 8a       	std	Z+16, r14	; 0x10
    2f14:	f1 8a       	std	Z+17, r15	; 0x11
    2f16:	ff 90       	pop	r15
    2f18:	ef 90       	pop	r14
    2f1a:	df 90       	pop	r13
    2f1c:	cf 90       	pop	r12
    2f1e:	08 95       	ret

00002f20 <xTaskGenericNotifyWait>:
    2f20:	4f 92       	push	r4
    2f22:	5f 92       	push	r5
    2f24:	6f 92       	push	r6
    2f26:	7f 92       	push	r7
    2f28:	af 92       	push	r10
    2f2a:	bf 92       	push	r11
    2f2c:	cf 92       	push	r12
    2f2e:	df 92       	push	r13
    2f30:	ef 92       	push	r14
    2f32:	ff 92       	push	r15
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	28 01       	movw	r4, r16
    2f3e:	39 01       	movw	r6, r18
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	0f 92       	push	r0
    2f46:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2f4a:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2f4e:	c8 2f       	mov	r28, r24
    2f50:	d0 e0       	ldi	r29, 0x00	; 0
    2f52:	ec 0f       	add	r30, r28
    2f54:	fd 1f       	adc	r31, r29
    2f56:	83 a9       	ldd	r24, Z+51	; 0x33
    2f58:	82 30       	cpi	r24, 0x02	; 2
    2f5a:	71 f1       	breq	.+92     	; 0x2fb8 <xTaskGenericNotifyWait+0x98>
    2f5c:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2f60:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2f64:	ce 01       	movw	r24, r28
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	e8 0f       	add	r30, r24
    2f70:	f9 1f       	adc	r31, r25
    2f72:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f74:	90 a9       	ldd	r25, Z+48	; 0x30
    2f76:	a1 a9       	ldd	r26, Z+49	; 0x31
    2f78:	b2 a9       	ldd	r27, Z+50	; 0x32
    2f7a:	40 95       	com	r20
    2f7c:	50 95       	com	r21
    2f7e:	60 95       	com	r22
    2f80:	70 95       	com	r23
    2f82:	48 23       	and	r20, r24
    2f84:	59 23       	and	r21, r25
    2f86:	6a 23       	and	r22, r26
    2f88:	7b 23       	and	r23, r27
    2f8a:	47 a7       	std	Z+47, r20	; 0x2f
    2f8c:	50 ab       	std	Z+48, r21	; 0x30
    2f8e:	61 ab       	std	Z+49, r22	; 0x31
    2f90:	72 ab       	std	Z+50, r23	; 0x32
    2f92:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2f96:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2f9a:	ec 0f       	add	r30, r28
    2f9c:	fd 1f       	adc	r31, r29
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	83 ab       	std	Z+51, r24	; 0x33
    2fa2:	a1 14       	cp	r10, r1
    2fa4:	b1 04       	cpc	r11, r1
    2fa6:	c1 04       	cpc	r12, r1
    2fa8:	d1 04       	cpc	r13, r1
    2faa:	31 f0       	breq	.+12     	; 0x2fb8 <xTaskGenericNotifyWait+0x98>
    2fac:	41 e0       	ldi	r20, 0x01	; 1
    2fae:	c6 01       	movw	r24, r12
    2fb0:	b5 01       	movw	r22, r10
    2fb2:	7a d8       	rcall	.-3852   	; 0x20a8 <prvAddCurrentTaskToDelayedList>
    2fb4:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    2fb8:	0f 90       	pop	r0
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	0f 92       	push	r0
    2fc2:	e1 14       	cp	r14, r1
    2fc4:	f1 04       	cpc	r15, r1
    2fc6:	a1 f0       	breq	.+40     	; 0x2ff0 <xTaskGenericNotifyWait+0xd0>
    2fc8:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2fcc:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	e8 0f       	add	r30, r24
    2fdc:	f9 1f       	adc	r31, r25
    2fde:	87 a5       	ldd	r24, Z+47	; 0x2f
    2fe0:	90 a9       	ldd	r25, Z+48	; 0x30
    2fe2:	a1 a9       	ldd	r26, Z+49	; 0x31
    2fe4:	b2 a9       	ldd	r27, Z+50	; 0x32
    2fe6:	f7 01       	movw	r30, r14
    2fe8:	80 83       	st	Z, r24
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	a2 83       	std	Z+2, r26	; 0x02
    2fee:	b3 83       	std	Z+3, r27	; 0x03
    2ff0:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    2ff4:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    2ff8:	ec 0f       	add	r30, r28
    2ffa:	fd 1f       	adc	r31, r29
    2ffc:	83 a9       	ldd	r24, Z+51	; 0x33
    2ffe:	82 30       	cpi	r24, 0x02	; 2
    3000:	e9 f4       	brne	.+58     	; 0x303c <xTaskGenericNotifyWait+0x11c>
    3002:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    3006:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    300a:	ce 01       	movw	r24, r28
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	e8 0f       	add	r30, r24
    3016:	f9 1f       	adc	r31, r25
    3018:	87 a5       	ldd	r24, Z+47	; 0x2f
    301a:	90 a9       	ldd	r25, Z+48	; 0x30
    301c:	a1 a9       	ldd	r26, Z+49	; 0x31
    301e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3020:	40 94       	com	r4
    3022:	50 94       	com	r5
    3024:	60 94       	com	r6
    3026:	70 94       	com	r7
    3028:	48 22       	and	r4, r24
    302a:	59 22       	and	r5, r25
    302c:	6a 22       	and	r6, r26
    302e:	7b 22       	and	r7, r27
    3030:	47 a6       	std	Z+47, r4	; 0x2f
    3032:	50 aa       	std	Z+48, r5	; 0x30
    3034:	61 aa       	std	Z+49, r6	; 0x31
    3036:	72 aa       	std	Z+50, r7	; 0x32
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	01 c0       	rjmp	.+2      	; 0x303e <xTaskGenericNotifyWait+0x11e>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	20 91 c5 11 	lds	r18, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    3042:	30 91 c6 11 	lds	r19, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    3046:	c2 0f       	add	r28, r18
    3048:	d3 1f       	adc	r29, r19
    304a:	1b aa       	std	Y+51, r1	; 0x33
    304c:	0f 90       	pop	r0
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	ff 90       	pop	r15
    305a:	ef 90       	pop	r14
    305c:	df 90       	pop	r13
    305e:	cf 90       	pop	r12
    3060:	bf 90       	pop	r11
    3062:	af 90       	pop	r10
    3064:	7f 90       	pop	r7
    3066:	6f 90       	pop	r6
    3068:	5f 90       	pop	r5
    306a:	4f 90       	pop	r4
    306c:	08 95       	ret

0000306e <xTaskGenericNotify>:
    306e:	8f 92       	push	r8
    3070:	9f 92       	push	r9
    3072:	af 92       	push	r10
    3074:	bf 92       	push	r11
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	dc 01       	movw	r26, r24
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	0f 92       	push	r0
    3088:	e1 14       	cp	r14, r1
    308a:	f1 04       	cpc	r15, r1
    308c:	89 f0       	breq	.+34     	; 0x30b0 <xTaskGenericNotify+0x42>
    308e:	e6 2f       	mov	r30, r22
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	ee 0f       	add	r30, r30
    3094:	ff 1f       	adc	r31, r31
    3096:	ee 0f       	add	r30, r30
    3098:	ff 1f       	adc	r31, r31
    309a:	e8 0f       	add	r30, r24
    309c:	f9 1f       	adc	r31, r25
    309e:	87 a4       	ldd	r8, Z+47	; 0x2f
    30a0:	90 a8       	ldd	r9, Z+48	; 0x30
    30a2:	a1 a8       	ldd	r10, Z+49	; 0x31
    30a4:	b2 a8       	ldd	r11, Z+50	; 0x32
    30a6:	f7 01       	movw	r30, r14
    30a8:	80 82       	st	Z, r8
    30aa:	91 82       	std	Z+1, r9	; 0x01
    30ac:	a2 82       	std	Z+2, r10	; 0x02
    30ae:	b3 82       	std	Z+3, r11	; 0x03
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	fd 01       	movw	r30, r26
    30b4:	e6 0f       	add	r30, r22
    30b6:	f7 1f       	adc	r31, r23
    30b8:	83 a9       	ldd	r24, Z+51	; 0x33
    30ba:	92 e0       	ldi	r25, 0x02	; 2
    30bc:	93 ab       	std	Z+51, r25	; 0x33
    30be:	02 30       	cpi	r16, 0x02	; 2
    30c0:	01 f1       	breq	.+64     	; 0x3102 <xTaskGenericNotify+0x94>
    30c2:	18 f4       	brcc	.+6      	; 0x30ca <xTaskGenericNotify+0x5c>
    30c4:	01 30       	cpi	r16, 0x01	; 1
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <xTaskGenericNotify+0x66>
    30c8:	4d c0       	rjmp	.+154    	; 0x3164 <xTaskGenericNotify+0xf6>
    30ca:	03 30       	cpi	r16, 0x03	; 3
    30cc:	79 f1       	breq	.+94     	; 0x312c <xTaskGenericNotify+0xbe>
    30ce:	04 30       	cpi	r16, 0x04	; 4
    30d0:	d1 f1       	breq	.+116    	; 0x3146 <xTaskGenericNotify+0xd8>
    30d2:	48 c0       	rjmp	.+144    	; 0x3164 <xTaskGenericNotify+0xf6>
    30d4:	66 0f       	add	r22, r22
    30d6:	77 1f       	adc	r23, r23
    30d8:	66 0f       	add	r22, r22
    30da:	77 1f       	adc	r23, r23
    30dc:	fd 01       	movw	r30, r26
    30de:	e6 0f       	add	r30, r22
    30e0:	f7 1f       	adc	r31, r23
    30e2:	87 a4       	ldd	r8, Z+47	; 0x2f
    30e4:	90 a8       	ldd	r9, Z+48	; 0x30
    30e6:	a1 a8       	ldd	r10, Z+49	; 0x31
    30e8:	b2 a8       	ldd	r11, Z+50	; 0x32
    30ea:	ba 01       	movw	r22, r20
    30ec:	a9 01       	movw	r20, r18
    30ee:	48 29       	or	r20, r8
    30f0:	59 29       	or	r21, r9
    30f2:	6a 29       	or	r22, r10
    30f4:	7b 29       	or	r23, r11
    30f6:	47 a7       	std	Z+47, r20	; 0x2f
    30f8:	50 ab       	std	Z+48, r21	; 0x30
    30fa:	61 ab       	std	Z+49, r22	; 0x31
    30fc:	72 ab       	std	Z+50, r23	; 0x32
    30fe:	01 e0       	ldi	r16, 0x01	; 1
    3100:	34 c0       	rjmp	.+104    	; 0x316a <xTaskGenericNotify+0xfc>
    3102:	66 0f       	add	r22, r22
    3104:	77 1f       	adc	r23, r23
    3106:	66 0f       	add	r22, r22
    3108:	77 1f       	adc	r23, r23
    310a:	fd 01       	movw	r30, r26
    310c:	e6 0f       	add	r30, r22
    310e:	f7 1f       	adc	r31, r23
    3110:	47 a5       	ldd	r20, Z+47	; 0x2f
    3112:	50 a9       	ldd	r21, Z+48	; 0x30
    3114:	61 a9       	ldd	r22, Z+49	; 0x31
    3116:	72 a9       	ldd	r23, Z+50	; 0x32
    3118:	4f 5f       	subi	r20, 0xFF	; 255
    311a:	5f 4f       	sbci	r21, 0xFF	; 255
    311c:	6f 4f       	sbci	r22, 0xFF	; 255
    311e:	7f 4f       	sbci	r23, 0xFF	; 255
    3120:	47 a7       	std	Z+47, r20	; 0x2f
    3122:	50 ab       	std	Z+48, r21	; 0x30
    3124:	61 ab       	std	Z+49, r22	; 0x31
    3126:	72 ab       	std	Z+50, r23	; 0x32
    3128:	01 e0       	ldi	r16, 0x01	; 1
    312a:	1f c0       	rjmp	.+62     	; 0x316a <xTaskGenericNotify+0xfc>
    312c:	66 0f       	add	r22, r22
    312e:	77 1f       	adc	r23, r23
    3130:	66 0f       	add	r22, r22
    3132:	77 1f       	adc	r23, r23
    3134:	fd 01       	movw	r30, r26
    3136:	e6 0f       	add	r30, r22
    3138:	f7 1f       	adc	r31, r23
    313a:	27 a7       	std	Z+47, r18	; 0x2f
    313c:	30 ab       	std	Z+48, r19	; 0x30
    313e:	41 ab       	std	Z+49, r20	; 0x31
    3140:	52 ab       	std	Z+50, r21	; 0x32
    3142:	01 e0       	ldi	r16, 0x01	; 1
    3144:	12 c0       	rjmp	.+36     	; 0x316a <xTaskGenericNotify+0xfc>
    3146:	82 30       	cpi	r24, 0x02	; 2
    3148:	79 f0       	breq	.+30     	; 0x3168 <xTaskGenericNotify+0xfa>
    314a:	66 0f       	add	r22, r22
    314c:	77 1f       	adc	r23, r23
    314e:	66 0f       	add	r22, r22
    3150:	77 1f       	adc	r23, r23
    3152:	fd 01       	movw	r30, r26
    3154:	e6 0f       	add	r30, r22
    3156:	f7 1f       	adc	r31, r23
    3158:	27 a7       	std	Z+47, r18	; 0x2f
    315a:	30 ab       	std	Z+48, r19	; 0x30
    315c:	41 ab       	std	Z+49, r20	; 0x31
    315e:	52 ab       	std	Z+50, r21	; 0x32
    3160:	01 e0       	ldi	r16, 0x01	; 1
    3162:	03 c0       	rjmp	.+6      	; 0x316a <xTaskGenericNotify+0xfc>
    3164:	01 e0       	ldi	r16, 0x01	; 1
    3166:	01 c0       	rjmp	.+2      	; 0x316a <xTaskGenericNotify+0xfc>
    3168:	00 e0       	ldi	r16, 0x00	; 0
    316a:	81 30       	cpi	r24, 0x01	; 1
    316c:	09 f0       	breq	.+2      	; 0x3170 <xTaskGenericNotify+0x102>
    316e:	69 c0       	rjmp	.+210    	; 0x3242 <xTaskGenericNotify+0x1d4>
    3170:	1c 96       	adiw	r26, 0x0c	; 12
    3172:	ed 91       	ld	r30, X+
    3174:	fc 91       	ld	r31, X
    3176:	1d 97       	sbiw	r26, 0x0d	; 13
    3178:	16 96       	adiw	r26, 0x06	; 6
    317a:	cd 91       	ld	r28, X+
    317c:	dc 91       	ld	r29, X
    317e:	17 97       	sbiw	r26, 0x07	; 7
    3180:	18 96       	adiw	r26, 0x08	; 8
    3182:	8d 91       	ld	r24, X+
    3184:	9c 91       	ld	r25, X
    3186:	19 97       	sbiw	r26, 0x09	; 9
    3188:	9f 83       	std	Y+7, r25	; 0x07
    318a:	8e 83       	std	Y+6, r24	; 0x06
    318c:	18 96       	adiw	r26, 0x08	; 8
    318e:	cd 91       	ld	r28, X+
    3190:	dc 91       	ld	r29, X
    3192:	19 97       	sbiw	r26, 0x09	; 9
    3194:	16 96       	adiw	r26, 0x06	; 6
    3196:	8d 91       	ld	r24, X+
    3198:	9c 91       	ld	r25, X
    319a:	17 97       	sbiw	r26, 0x07	; 7
    319c:	9d 83       	std	Y+5, r25	; 0x05
    319e:	8c 83       	std	Y+4, r24	; 0x04
    31a0:	81 81       	ldd	r24, Z+1	; 0x01
    31a2:	92 81       	ldd	r25, Z+2	; 0x02
    31a4:	9d 01       	movw	r18, r26
    31a6:	2e 5f       	subi	r18, 0xFE	; 254
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
    31aa:	82 17       	cp	r24, r18
    31ac:	93 07       	cpc	r25, r19
    31ae:	31 f4       	brne	.+12     	; 0x31bc <xTaskGenericNotify+0x14e>
    31b0:	18 96       	adiw	r26, 0x08	; 8
    31b2:	8d 91       	ld	r24, X+
    31b4:	9c 91       	ld	r25, X
    31b6:	19 97       	sbiw	r26, 0x09	; 9
    31b8:	92 83       	std	Z+2, r25	; 0x02
    31ba:	81 83       	std	Z+1, r24	; 0x01
    31bc:	1d 96       	adiw	r26, 0x0d	; 13
    31be:	1c 92       	st	X, r1
    31c0:	1e 92       	st	-X, r1
    31c2:	1c 97       	sbiw	r26, 0x0c	; 12
    31c4:	80 81       	ld	r24, Z
    31c6:	81 50       	subi	r24, 0x01	; 1
    31c8:	80 83       	st	Z, r24
    31ca:	5a 96       	adiw	r26, 0x1a	; 26
    31cc:	ec 91       	ld	r30, X
    31ce:	5a 97       	sbiw	r26, 0x1a	; 26
    31d0:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <uxTopReadyPriority>
    31d4:	8e 17       	cp	r24, r30
    31d6:	10 f4       	brcc	.+4      	; 0x31dc <xTaskGenericNotify+0x16e>
    31d8:	e0 93 15 11 	sts	0x1115, r30	; 0x801115 <uxTopReadyPriority>
    31dc:	8b e0       	ldi	r24, 0x0B	; 11
    31de:	8e 9f       	mul	r24, r30
    31e0:	f0 01       	movw	r30, r0
    31e2:	11 24       	eor	r1, r1
    31e4:	e9 5a       	subi	r30, 0xA9	; 169
    31e6:	fe 4e       	sbci	r31, 0xEE	; 238
    31e8:	01 80       	ldd	r0, Z+1	; 0x01
    31ea:	f2 81       	ldd	r31, Z+2	; 0x02
    31ec:	e0 2d       	mov	r30, r0
    31ee:	17 96       	adiw	r26, 0x07	; 7
    31f0:	fc 93       	st	X, r31
    31f2:	ee 93       	st	-X, r30
    31f4:	16 97       	sbiw	r26, 0x06	; 6
    31f6:	46 81       	ldd	r20, Z+6	; 0x06
    31f8:	57 81       	ldd	r21, Z+7	; 0x07
    31fa:	19 96       	adiw	r26, 0x09	; 9
    31fc:	5c 93       	st	X, r21
    31fe:	4e 93       	st	-X, r20
    3200:	18 97       	sbiw	r26, 0x08	; 8
    3202:	c6 81       	ldd	r28, Z+6	; 0x06
    3204:	d7 81       	ldd	r29, Z+7	; 0x07
    3206:	3d 83       	std	Y+5, r19	; 0x05
    3208:	2c 83       	std	Y+4, r18	; 0x04
    320a:	37 83       	std	Z+7, r19	; 0x07
    320c:	26 83       	std	Z+6, r18	; 0x06
    320e:	5a 96       	adiw	r26, 0x1a	; 26
    3210:	ec 91       	ld	r30, X
    3212:	5a 97       	sbiw	r26, 0x1a	; 26
    3214:	8e 9f       	mul	r24, r30
    3216:	f0 01       	movw	r30, r0
    3218:	11 24       	eor	r1, r1
    321a:	e9 5a       	subi	r30, 0xA9	; 169
    321c:	fe 4e       	sbci	r31, 0xEE	; 238
    321e:	1d 96       	adiw	r26, 0x0d	; 13
    3220:	fc 93       	st	X, r31
    3222:	ee 93       	st	-X, r30
    3224:	1c 97       	sbiw	r26, 0x0c	; 12
    3226:	80 81       	ld	r24, Z
    3228:	8f 5f       	subi	r24, 0xFF	; 255
    322a:	80 83       	st	Z, r24
    322c:	5a 96       	adiw	r26, 0x1a	; 26
    322e:	9c 91       	ld	r25, X
    3230:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    3234:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    3238:	82 8d       	ldd	r24, Z+26	; 0x1a
    323a:	89 17       	cp	r24, r25
    323c:	10 f4       	brcc	.+4      	; 0x3242 <xTaskGenericNotify+0x1d4>
    323e:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    3242:	0f 90       	pop	r0
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	80 2f       	mov	r24, r16
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	bf 90       	pop	r11
    3254:	af 90       	pop	r10
    3256:	9f 90       	pop	r9
    3258:	8f 90       	pop	r8
    325a:	08 95       	ret

0000325c <xTaskGenericNotifyFromISR>:
    325c:	8f 92       	push	r8
    325e:	9f 92       	push	r9
    3260:	af 92       	push	r10
    3262:	bf 92       	push	r11
    3264:	cf 92       	push	r12
    3266:	df 92       	push	r13
    3268:	ef 92       	push	r14
    326a:	ff 92       	push	r15
    326c:	0f 93       	push	r16
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	dc 01       	movw	r26, r24
    3274:	e1 14       	cp	r14, r1
    3276:	f1 04       	cpc	r15, r1
    3278:	89 f0       	breq	.+34     	; 0x329c <xTaskGenericNotifyFromISR+0x40>
    327a:	e6 2f       	mov	r30, r22
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	ee 0f       	add	r30, r30
    3280:	ff 1f       	adc	r31, r31
    3282:	ee 0f       	add	r30, r30
    3284:	ff 1f       	adc	r31, r31
    3286:	e8 0f       	add	r30, r24
    3288:	f9 1f       	adc	r31, r25
    328a:	87 a4       	ldd	r8, Z+47	; 0x2f
    328c:	90 a8       	ldd	r9, Z+48	; 0x30
    328e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3290:	b2 a8       	ldd	r11, Z+50	; 0x32
    3292:	f7 01       	movw	r30, r14
    3294:	80 82       	st	Z, r8
    3296:	91 82       	std	Z+1, r9	; 0x01
    3298:	a2 82       	std	Z+2, r10	; 0x02
    329a:	b3 82       	std	Z+3, r11	; 0x03
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	fd 01       	movw	r30, r26
    32a0:	e6 0f       	add	r30, r22
    32a2:	f7 1f       	adc	r31, r23
    32a4:	93 a9       	ldd	r25, Z+51	; 0x33
    32a6:	82 e0       	ldi	r24, 0x02	; 2
    32a8:	83 ab       	std	Z+51, r24	; 0x33
    32aa:	02 30       	cpi	r16, 0x02	; 2
    32ac:	01 f1       	breq	.+64     	; 0x32ee <xTaskGenericNotifyFromISR+0x92>
    32ae:	18 f4       	brcc	.+6      	; 0x32b6 <xTaskGenericNotifyFromISR+0x5a>
    32b0:	01 30       	cpi	r16, 0x01	; 1
    32b2:	31 f0       	breq	.+12     	; 0x32c0 <xTaskGenericNotifyFromISR+0x64>
    32b4:	4d c0       	rjmp	.+154    	; 0x3350 <xTaskGenericNotifyFromISR+0xf4>
    32b6:	03 30       	cpi	r16, 0x03	; 3
    32b8:	79 f1       	breq	.+94     	; 0x3318 <xTaskGenericNotifyFromISR+0xbc>
    32ba:	04 30       	cpi	r16, 0x04	; 4
    32bc:	d1 f1       	breq	.+116    	; 0x3332 <xTaskGenericNotifyFromISR+0xd6>
    32be:	48 c0       	rjmp	.+144    	; 0x3350 <xTaskGenericNotifyFromISR+0xf4>
    32c0:	66 0f       	add	r22, r22
    32c2:	77 1f       	adc	r23, r23
    32c4:	66 0f       	add	r22, r22
    32c6:	77 1f       	adc	r23, r23
    32c8:	fd 01       	movw	r30, r26
    32ca:	e6 0f       	add	r30, r22
    32cc:	f7 1f       	adc	r31, r23
    32ce:	87 a4       	ldd	r8, Z+47	; 0x2f
    32d0:	90 a8       	ldd	r9, Z+48	; 0x30
    32d2:	a1 a8       	ldd	r10, Z+49	; 0x31
    32d4:	b2 a8       	ldd	r11, Z+50	; 0x32
    32d6:	ba 01       	movw	r22, r20
    32d8:	a9 01       	movw	r20, r18
    32da:	48 29       	or	r20, r8
    32dc:	59 29       	or	r21, r9
    32de:	6a 29       	or	r22, r10
    32e0:	7b 29       	or	r23, r11
    32e2:	47 a7       	std	Z+47, r20	; 0x2f
    32e4:	50 ab       	std	Z+48, r21	; 0x30
    32e6:	61 ab       	std	Z+49, r22	; 0x31
    32e8:	72 ab       	std	Z+50, r23	; 0x32
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	34 c0       	rjmp	.+104    	; 0x3356 <xTaskGenericNotifyFromISR+0xfa>
    32ee:	66 0f       	add	r22, r22
    32f0:	77 1f       	adc	r23, r23
    32f2:	66 0f       	add	r22, r22
    32f4:	77 1f       	adc	r23, r23
    32f6:	fd 01       	movw	r30, r26
    32f8:	e6 0f       	add	r30, r22
    32fa:	f7 1f       	adc	r31, r23
    32fc:	47 a5       	ldd	r20, Z+47	; 0x2f
    32fe:	50 a9       	ldd	r21, Z+48	; 0x30
    3300:	61 a9       	ldd	r22, Z+49	; 0x31
    3302:	72 a9       	ldd	r23, Z+50	; 0x32
    3304:	4f 5f       	subi	r20, 0xFF	; 255
    3306:	5f 4f       	sbci	r21, 0xFF	; 255
    3308:	6f 4f       	sbci	r22, 0xFF	; 255
    330a:	7f 4f       	sbci	r23, 0xFF	; 255
    330c:	47 a7       	std	Z+47, r20	; 0x2f
    330e:	50 ab       	std	Z+48, r21	; 0x30
    3310:	61 ab       	std	Z+49, r22	; 0x31
    3312:	72 ab       	std	Z+50, r23	; 0x32
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	1f c0       	rjmp	.+62     	; 0x3356 <xTaskGenericNotifyFromISR+0xfa>
    3318:	66 0f       	add	r22, r22
    331a:	77 1f       	adc	r23, r23
    331c:	66 0f       	add	r22, r22
    331e:	77 1f       	adc	r23, r23
    3320:	fd 01       	movw	r30, r26
    3322:	e6 0f       	add	r30, r22
    3324:	f7 1f       	adc	r31, r23
    3326:	27 a7       	std	Z+47, r18	; 0x2f
    3328:	30 ab       	std	Z+48, r19	; 0x30
    332a:	41 ab       	std	Z+49, r20	; 0x31
    332c:	52 ab       	std	Z+50, r21	; 0x32
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	12 c0       	rjmp	.+36     	; 0x3356 <xTaskGenericNotifyFromISR+0xfa>
    3332:	92 30       	cpi	r25, 0x02	; 2
    3334:	79 f0       	breq	.+30     	; 0x3354 <xTaskGenericNotifyFromISR+0xf8>
    3336:	66 0f       	add	r22, r22
    3338:	77 1f       	adc	r23, r23
    333a:	66 0f       	add	r22, r22
    333c:	77 1f       	adc	r23, r23
    333e:	fd 01       	movw	r30, r26
    3340:	e6 0f       	add	r30, r22
    3342:	f7 1f       	adc	r31, r23
    3344:	27 a7       	std	Z+47, r18	; 0x2f
    3346:	30 ab       	std	Z+48, r19	; 0x30
    3348:	41 ab       	std	Z+49, r20	; 0x31
    334a:	52 ab       	std	Z+50, r21	; 0x32
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	03 c0       	rjmp	.+6      	; 0x3356 <xTaskGenericNotifyFromISR+0xfa>
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	01 c0       	rjmp	.+2      	; 0x3356 <xTaskGenericNotifyFromISR+0xfa>
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	91 30       	cpi	r25, 0x01	; 1
    3358:	09 f0       	breq	.+2      	; 0x335c <xTaskGenericNotifyFromISR+0x100>
    335a:	96 c0       	rjmp	.+300    	; 0x3488 <xTaskGenericNotifyFromISR+0x22c>
    335c:	90 91 06 11 	lds	r25, 0x1106	; 0x801106 <uxSchedulerSuspended>
    3360:	91 11       	cpse	r25, r1
    3362:	5f c0       	rjmp	.+190    	; 0x3422 <xTaskGenericNotifyFromISR+0x1c6>
    3364:	1c 96       	adiw	r26, 0x0c	; 12
    3366:	ed 91       	ld	r30, X+
    3368:	fc 91       	ld	r31, X
    336a:	1d 97       	sbiw	r26, 0x0d	; 13
    336c:	16 96       	adiw	r26, 0x06	; 6
    336e:	cd 91       	ld	r28, X+
    3370:	dc 91       	ld	r29, X
    3372:	17 97       	sbiw	r26, 0x07	; 7
    3374:	18 96       	adiw	r26, 0x08	; 8
    3376:	2d 91       	ld	r18, X+
    3378:	3c 91       	ld	r19, X
    337a:	19 97       	sbiw	r26, 0x09	; 9
    337c:	3f 83       	std	Y+7, r19	; 0x07
    337e:	2e 83       	std	Y+6, r18	; 0x06
    3380:	18 96       	adiw	r26, 0x08	; 8
    3382:	cd 91       	ld	r28, X+
    3384:	dc 91       	ld	r29, X
    3386:	19 97       	sbiw	r26, 0x09	; 9
    3388:	16 96       	adiw	r26, 0x06	; 6
    338a:	2d 91       	ld	r18, X+
    338c:	3c 91       	ld	r19, X
    338e:	17 97       	sbiw	r26, 0x07	; 7
    3390:	3d 83       	std	Y+5, r19	; 0x05
    3392:	2c 83       	std	Y+4, r18	; 0x04
    3394:	41 81       	ldd	r20, Z+1	; 0x01
    3396:	52 81       	ldd	r21, Z+2	; 0x02
    3398:	9d 01       	movw	r18, r26
    339a:	2e 5f       	subi	r18, 0xFE	; 254
    339c:	3f 4f       	sbci	r19, 0xFF	; 255
    339e:	42 17       	cp	r20, r18
    33a0:	53 07       	cpc	r21, r19
    33a2:	31 f4       	brne	.+12     	; 0x33b0 <xTaskGenericNotifyFromISR+0x154>
    33a4:	18 96       	adiw	r26, 0x08	; 8
    33a6:	4d 91       	ld	r20, X+
    33a8:	5c 91       	ld	r21, X
    33aa:	19 97       	sbiw	r26, 0x09	; 9
    33ac:	52 83       	std	Z+2, r21	; 0x02
    33ae:	41 83       	std	Z+1, r20	; 0x01
    33b0:	1d 96       	adiw	r26, 0x0d	; 13
    33b2:	1c 92       	st	X, r1
    33b4:	1e 92       	st	-X, r1
    33b6:	1c 97       	sbiw	r26, 0x0c	; 12
    33b8:	90 81       	ld	r25, Z
    33ba:	91 50       	subi	r25, 0x01	; 1
    33bc:	90 83       	st	Z, r25
    33be:	5a 96       	adiw	r26, 0x1a	; 26
    33c0:	ec 91       	ld	r30, X
    33c2:	5a 97       	sbiw	r26, 0x1a	; 26
    33c4:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <uxTopReadyPriority>
    33c8:	9e 17       	cp	r25, r30
    33ca:	10 f4       	brcc	.+4      	; 0x33d0 <xTaskGenericNotifyFromISR+0x174>
    33cc:	e0 93 15 11 	sts	0x1115, r30	; 0x801115 <uxTopReadyPriority>
    33d0:	9b e0       	ldi	r25, 0x0B	; 11
    33d2:	9e 9f       	mul	r25, r30
    33d4:	f0 01       	movw	r30, r0
    33d6:	11 24       	eor	r1, r1
    33d8:	e9 5a       	subi	r30, 0xA9	; 169
    33da:	fe 4e       	sbci	r31, 0xEE	; 238
    33dc:	01 80       	ldd	r0, Z+1	; 0x01
    33de:	f2 81       	ldd	r31, Z+2	; 0x02
    33e0:	e0 2d       	mov	r30, r0
    33e2:	17 96       	adiw	r26, 0x07	; 7
    33e4:	fc 93       	st	X, r31
    33e6:	ee 93       	st	-X, r30
    33e8:	16 97       	sbiw	r26, 0x06	; 6
    33ea:	46 81       	ldd	r20, Z+6	; 0x06
    33ec:	57 81       	ldd	r21, Z+7	; 0x07
    33ee:	19 96       	adiw	r26, 0x09	; 9
    33f0:	5c 93       	st	X, r21
    33f2:	4e 93       	st	-X, r20
    33f4:	18 97       	sbiw	r26, 0x08	; 8
    33f6:	c6 81       	ldd	r28, Z+6	; 0x06
    33f8:	d7 81       	ldd	r29, Z+7	; 0x07
    33fa:	3d 83       	std	Y+5, r19	; 0x05
    33fc:	2c 83       	std	Y+4, r18	; 0x04
    33fe:	37 83       	std	Z+7, r19	; 0x07
    3400:	26 83       	std	Z+6, r18	; 0x06
    3402:	5a 96       	adiw	r26, 0x1a	; 26
    3404:	ec 91       	ld	r30, X
    3406:	5a 97       	sbiw	r26, 0x1a	; 26
    3408:	9e 9f       	mul	r25, r30
    340a:	f0 01       	movw	r30, r0
    340c:	11 24       	eor	r1, r1
    340e:	e9 5a       	subi	r30, 0xA9	; 169
    3410:	fe 4e       	sbci	r31, 0xEE	; 238
    3412:	1d 96       	adiw	r26, 0x0d	; 13
    3414:	fc 93       	st	X, r31
    3416:	ee 93       	st	-X, r30
    3418:	1c 97       	sbiw	r26, 0x0c	; 12
    341a:	90 81       	ld	r25, Z
    341c:	9f 5f       	subi	r25, 0xFF	; 255
    341e:	90 83       	st	Z, r25
    3420:	21 c0       	rjmp	.+66     	; 0x3464 <xTaskGenericNotifyFromISR+0x208>
    3422:	62 e3       	ldi	r22, 0x32	; 50
    3424:	71 e1       	ldi	r23, 0x11	; 17
    3426:	fb 01       	movw	r30, r22
    3428:	c1 81       	ldd	r28, Z+1	; 0x01
    342a:	d2 81       	ldd	r29, Z+2	; 0x02
    342c:	53 96       	adiw	r26, 0x13	; 19
    342e:	dc 93       	st	X, r29
    3430:	ce 93       	st	-X, r28
    3432:	52 97       	sbiw	r26, 0x12	; 18
    3434:	2e 81       	ldd	r18, Y+6	; 0x06
    3436:	3f 81       	ldd	r19, Y+7	; 0x07
    3438:	55 96       	adiw	r26, 0x15	; 21
    343a:	3c 93       	st	X, r19
    343c:	2e 93       	st	-X, r18
    343e:	54 97       	sbiw	r26, 0x14	; 20
    3440:	4e 81       	ldd	r20, Y+6	; 0x06
    3442:	5f 81       	ldd	r21, Y+7	; 0x07
    3444:	9d 01       	movw	r18, r26
    3446:	22 5f       	subi	r18, 0xF2	; 242
    3448:	3f 4f       	sbci	r19, 0xFF	; 255
    344a:	fa 01       	movw	r30, r20
    344c:	35 83       	std	Z+5, r19	; 0x05
    344e:	24 83       	std	Z+4, r18	; 0x04
    3450:	3f 83       	std	Y+7, r19	; 0x07
    3452:	2e 83       	std	Y+6, r18	; 0x06
    3454:	59 96       	adiw	r26, 0x19	; 25
    3456:	7c 93       	st	X, r23
    3458:	6e 93       	st	-X, r22
    345a:	58 97       	sbiw	r26, 0x18	; 24
    345c:	fb 01       	movw	r30, r22
    345e:	90 81       	ld	r25, Z
    3460:	9f 5f       	subi	r25, 0xFF	; 255
    3462:	90 83       	st	Z, r25
    3464:	5a 96       	adiw	r26, 0x1a	; 26
    3466:	2c 91       	ld	r18, X
    3468:	e0 91 c5 11 	lds	r30, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    346c:	f0 91 c6 11 	lds	r31, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>
    3470:	92 8d       	ldd	r25, Z+26	; 0x1a
    3472:	92 17       	cp	r25, r18
    3474:	48 f4       	brcc	.+18     	; 0x3488 <xTaskGenericNotifyFromISR+0x22c>
    3476:	c1 14       	cp	r12, r1
    3478:	d1 04       	cpc	r13, r1
    347a:	19 f0       	breq	.+6      	; 0x3482 <xTaskGenericNotifyFromISR+0x226>
    347c:	91 e0       	ldi	r25, 0x01	; 1
    347e:	f6 01       	movw	r30, r12
    3480:	90 83       	st	Z, r25
    3482:	91 e0       	ldi	r25, 0x01	; 1
    3484:	90 93 0f 11 	sts	0x110F, r25	; 0x80110f <xYieldPending>
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	0f 91       	pop	r16
    348e:	ff 90       	pop	r15
    3490:	ef 90       	pop	r14
    3492:	df 90       	pop	r13
    3494:	cf 90       	pop	r12
    3496:	bf 90       	pop	r11
    3498:	af 90       	pop	r10
    349a:	9f 90       	pop	r9
    349c:	8f 90       	pop	r8
    349e:	08 95       	ret

000034a0 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	21 f4       	brne	.+8      	; 0x34ac <xTaskGenericNotifyStateClear+0xc>
    34a4:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <pxCurrentTCB>
    34a8:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    34b2:	70 e0       	ldi	r23, 0x00	; 0
    34b4:	fc 01       	movw	r30, r24
    34b6:	e6 0f       	add	r30, r22
    34b8:	f7 1f       	adc	r31, r23
    34ba:	23 a9       	ldd	r18, Z+51	; 0x33
    34bc:	22 30       	cpi	r18, 0x02	; 2
    34be:	31 f4       	brne	.+12     	; 0x34cc <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    34c0:	fc 01       	movw	r30, r24
    34c2:	e6 0f       	add	r30, r22
    34c4:	f7 1f       	adc	r31, r23
    34c6:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    34cc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    34ce:	0f 90       	pop	r0
    34d0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    34d2:	08 95       	ret

000034d4 <prvGetNextExpireTime>:
    34d4:	dc 01       	movw	r26, r24
    34d6:	e0 91 d1 11 	lds	r30, 0x11D1	; 0x8011d1 <pxCurrentTimerList>
    34da:	f0 91 d2 11 	lds	r31, 0x11D2	; 0x8011d2 <pxCurrentTimerList+0x1>
    34de:	80 81       	ld	r24, Z
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	81 11       	cpse	r24, r1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9c 93       	st	X, r25
    34e8:	91 11       	cpse	r25, r1
    34ea:	08 c0       	rjmp	.+16     	; 0x34fc <prvGetNextExpireTime+0x28>
    34ec:	07 80       	ldd	r0, Z+7	; 0x07
    34ee:	f0 85       	ldd	r31, Z+8	; 0x08
    34f0:	e0 2d       	mov	r30, r0
    34f2:	60 81       	ld	r22, Z
    34f4:	71 81       	ldd	r23, Z+1	; 0x01
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	93 81       	ldd	r25, Z+3	; 0x03
    34fa:	08 95       	ret
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	cb 01       	movw	r24, r22
    3502:	08 95       	ret

00003504 <prvInsertTimerInActiveList>:
    3504:	cf 92       	push	r12
    3506:	df 92       	push	r13
    3508:	ef 92       	push	r14
    350a:	ff 92       	push	r15
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	fc 01       	movw	r30, r24
    3512:	42 83       	std	Z+2, r20	; 0x02
    3514:	53 83       	std	Z+3, r21	; 0x03
    3516:	64 83       	std	Z+4, r22	; 0x04
    3518:	75 83       	std	Z+5, r23	; 0x05
    351a:	93 87       	std	Z+11, r25	; 0x0b
    351c:	82 87       	std	Z+10, r24	; 0x0a
    351e:	04 17       	cp	r16, r20
    3520:	15 07       	cpc	r17, r21
    3522:	26 07       	cpc	r18, r22
    3524:	37 07       	cpc	r19, r23
    3526:	c0 f0       	brcs	.+48     	; 0x3558 <prvInsertTimerInActiveList+0x54>
    3528:	0c 19       	sub	r16, r12
    352a:	1d 09       	sbc	r17, r13
    352c:	2e 09       	sbc	r18, r14
    352e:	3f 09       	sbc	r19, r15
    3530:	86 85       	ldd	r24, Z+14	; 0x0e
    3532:	97 85       	ldd	r25, Z+15	; 0x0f
    3534:	a0 89       	ldd	r26, Z+16	; 0x10
    3536:	b1 89       	ldd	r27, Z+17	; 0x11
    3538:	08 17       	cp	r16, r24
    353a:	19 07       	cpc	r17, r25
    353c:	2a 07       	cpc	r18, r26
    353e:	3b 07       	cpc	r19, r27
    3540:	00 f5       	brcc	.+64     	; 0x3582 <prvInsertTimerInActiveList+0x7e>
    3542:	bf 01       	movw	r22, r30
    3544:	6e 5f       	subi	r22, 0xFE	; 254
    3546:	7f 4f       	sbci	r23, 0xFF	; 255
    3548:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <pxOverflowTimerList>
    354c:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <pxOverflowTimerList+0x1>
    3550:	0e 94 57 07 	call	0xeae	; 0xeae <vListInsert>
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	18 c0       	rjmp	.+48     	; 0x3588 <prvInsertTimerInActiveList+0x84>
    3558:	0c 15       	cp	r16, r12
    355a:	1d 05       	cpc	r17, r13
    355c:	2e 05       	cpc	r18, r14
    355e:	3f 05       	cpc	r19, r15
    3560:	28 f4       	brcc	.+10     	; 0x356c <prvInsertTimerInActiveList+0x68>
    3562:	4c 15       	cp	r20, r12
    3564:	5d 05       	cpc	r21, r13
    3566:	6e 05       	cpc	r22, r14
    3568:	7f 05       	cpc	r23, r15
    356a:	68 f4       	brcc	.+26     	; 0x3586 <prvInsertTimerInActiveList+0x82>
    356c:	bf 01       	movw	r22, r30
    356e:	6e 5f       	subi	r22, 0xFE	; 254
    3570:	7f 4f       	sbci	r23, 0xFF	; 255
    3572:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <pxCurrentTimerList>
    3576:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <pxCurrentTimerList+0x1>
    357a:	0e 94 57 07 	call	0xeae	; 0xeae <vListInsert>
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	03 c0       	rjmp	.+6      	; 0x3588 <prvInsertTimerInActiveList+0x84>
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <prvInsertTimerInActiveList+0x84>
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	08 95       	ret

00003596 <prvCheckForValidListAndQueue>:
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	0f 92       	push	r0
    359c:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <xTimerQueue>
    35a0:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <xTimerQueue+0x1>
    35a4:	89 2b       	or	r24, r25
    35a6:	e9 f4       	brne	.+58     	; 0x35e2 <prvCheckForValidListAndQueue+0x4c>
    35a8:	8e ed       	ldi	r24, 0xDE	; 222
    35aa:	91 e1       	ldi	r25, 0x11	; 17
    35ac:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    35b0:	83 ed       	ldi	r24, 0xD3	; 211
    35b2:	91 e1       	ldi	r25, 0x11	; 17
    35b4:	0e 94 42 07 	call	0xe84	; 0xe84 <vListInitialise>
    35b8:	8e ed       	ldi	r24, 0xDE	; 222
    35ba:	91 e1       	ldi	r25, 0x11	; 17
    35bc:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <pxCurrentTimerList+0x1>
    35c0:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <pxCurrentTimerList>
    35c4:	83 ed       	ldi	r24, 0xD3	; 211
    35c6:	91 e1       	ldi	r25, 0x11	; 17
    35c8:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <pxOverflowTimerList+0x1>
    35cc:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <pxOverflowTimerList>
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	67 e0       	ldi	r22, 0x07	; 7
    35d4:	8a e0       	ldi	r24, 0x0A	; 10
    35d6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <xQueueGenericCreate>
    35da:	90 93 ce 11 	sts	0x11CE, r25	; 0x8011ce <xTimerQueue+0x1>
    35de:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <xTimerQueue>
    35e2:	0f 90       	pop	r0
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	08 95       	ret

000035e8 <xTimerCreateTimerTask>:
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	d3 df       	rcall	.-90     	; 0x3596 <prvCheckForValidListAndQueue>
    35f0:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <xTimerQueue>
    35f4:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <xTimerQueue+0x1>
    35f8:	89 2b       	or	r24, r25
    35fa:	91 f0       	breq	.+36     	; 0x3620 <xTimerCreateTimerTask+0x38>
    35fc:	0f 2e       	mov	r0, r31
    35fe:	fb ec       	ldi	r31, 0xCB	; 203
    3600:	ef 2e       	mov	r14, r31
    3602:	f1 e1       	ldi	r31, 0x11	; 17
    3604:	ff 2e       	mov	r15, r31
    3606:	f0 2d       	mov	r31, r0
    3608:	03 e0       	ldi	r16, 0x03	; 3
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 ec       	ldi	r20, 0xC0	; 192
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	67 e4       	ldi	r22, 0x47	; 71
    3614:	74 e0       	ldi	r23, 0x04	; 4
    3616:	88 e5       	ldi	r24, 0x58	; 88
    3618:	91 e0       	ldi	r25, 0x01	; 1
    361a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskCreate>
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <xTimerCreateTimerTask+0x3a>
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	0f 91       	pop	r16
    3624:	ff 90       	pop	r15
    3626:	ef 90       	pop	r14
    3628:	08 95       	ret

0000362a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    362a:	8f 92       	push	r8
    362c:	9f 92       	push	r9
    362e:	af 92       	push	r10
    3630:	bf 92       	push	r11
    3632:	cf 92       	push	r12
    3634:	df 92       	push	r13
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	27 97       	sbiw	r28, 0x07	; 7
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3652:	e0 91 cd 11 	lds	r30, 0x11CD	; 0x8011cd <xTimerQueue>
    3656:	f0 91 ce 11 	lds	r31, 0x11CE	; 0x8011ce <xTimerQueue+0x1>
    365a:	30 97       	sbiw	r30, 0x00	; 0
    365c:	81 f1       	breq	.+96     	; 0x36be <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    365e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3660:	2a 83       	std	Y+2, r18	; 0x02
    3662:	3b 83       	std	Y+3, r19	; 0x03
    3664:	4c 83       	std	Y+4, r20	; 0x04
    3666:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3668:	9f 83       	std	Y+7, r25	; 0x07
    366a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    366c:	66 30       	cpi	r22, 0x06	; 6
    366e:	f4 f4       	brge	.+60     	; 0x36ac <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3670:	c4 db       	rcall	.-2168   	; 0x2dfa <xTaskGetSchedulerState>
    3672:	82 30       	cpi	r24, 0x02	; 2
    3674:	69 f4       	brne	.+26     	; 0x3690 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3676:	00 e0       	ldi	r16, 0x00	; 0
    3678:	a7 01       	movw	r20, r14
    367a:	96 01       	movw	r18, r12
    367c:	be 01       	movw	r22, r28
    367e:	6f 5f       	subi	r22, 0xFF	; 255
    3680:	7f 4f       	sbci	r23, 0xFF	; 255
    3682:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <xTimerQueue>
    3686:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <xTimerQueue+0x1>
    368a:	0e 94 18 0a 	call	0x1430	; 0x1430 <xQueueGenericSend>
    368e:	18 c0       	rjmp	.+48     	; 0x36c0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3690:	00 e0       	ldi	r16, 0x00	; 0
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	a9 01       	movw	r20, r18
    3698:	be 01       	movw	r22, r28
    369a:	6f 5f       	subi	r22, 0xFF	; 255
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
    369e:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <xTimerQueue>
    36a2:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <xTimerQueue+0x1>
    36a6:	0e 94 18 0a 	call	0x1430	; 0x1430 <xQueueGenericSend>
    36aa:	0a c0       	rjmp	.+20     	; 0x36c0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	a8 01       	movw	r20, r16
    36b0:	be 01       	movw	r22, r28
    36b2:	6f 5f       	subi	r22, 0xFF	; 255
    36b4:	7f 4f       	sbci	r23, 0xFF	; 255
    36b6:	cf 01       	movw	r24, r30
    36b8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xQueueGenericSendFromISR>
    36bc:	01 c0       	rjmp	.+2      	; 0x36c0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    36be:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    36c0:	27 96       	adiw	r28, 0x07	; 7
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ff 90       	pop	r15
    36d6:	ef 90       	pop	r14
    36d8:	df 90       	pop	r13
    36da:	cf 90       	pop	r12
    36dc:	bf 90       	pop	r11
    36de:	af 90       	pop	r10
    36e0:	9f 90       	pop	r9
    36e2:	8f 90       	pop	r8
    36e4:	08 95       	ret

000036e6 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    36e6:	8f 92       	push	r8
    36e8:	9f 92       	push	r9
    36ea:	af 92       	push	r10
    36ec:	bf 92       	push	r11
    36ee:	cf 92       	push	r12
    36f0:	df 92       	push	r13
    36f2:	ef 92       	push	r14
    36f4:	ff 92       	push	r15
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    36fe:	3b c0       	rjmp	.+118    	; 0x3776 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3700:	07 80       	ldd	r0, Z+7	; 0x07
    3702:	f0 85       	ldd	r31, Z+8	; 0x08
    3704:	e0 2d       	mov	r30, r0
    3706:	80 80       	ld	r8, Z
    3708:	91 80       	ldd	r9, Z+1	; 0x01
    370a:	a2 80       	ldd	r10, Z+2	; 0x02
    370c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    370e:	c0 85       	ldd	r28, Z+8	; 0x08
    3710:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3712:	8e 01       	movw	r16, r28
    3714:	0e 5f       	subi	r16, 0xFE	; 254
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	c8 01       	movw	r24, r16
    371a:	0e 94 94 07 	call	0xf28	; 0xf28 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    371e:	ec 89       	ldd	r30, Y+20	; 0x14
    3720:	fd 89       	ldd	r31, Y+21	; 0x15
    3722:	ce 01       	movw	r24, r28
    3724:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3726:	8e 89       	ldd	r24, Y+22	; 0x16
    3728:	82 ff       	sbrs	r24, 2
    372a:	25 c0       	rjmp	.+74     	; 0x3776 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    372c:	8e 85       	ldd	r24, Y+14	; 0x0e
    372e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3730:	a8 89       	ldd	r26, Y+16	; 0x10
    3732:	b9 89       	ldd	r27, Y+17	; 0x11
    3734:	88 0d       	add	r24, r8
    3736:	99 1d       	adc	r25, r9
    3738:	aa 1d       	adc	r26, r10
    373a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    373c:	88 16       	cp	r8, r24
    373e:	99 06       	cpc	r9, r25
    3740:	aa 06       	cpc	r10, r26
    3742:	bb 06       	cpc	r11, r27
    3744:	70 f4       	brcc	.+28     	; 0x3762 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3746:	8a 83       	std	Y+2, r24	; 0x02
    3748:	9b 83       	std	Y+3, r25	; 0x03
    374a:	ac 83       	std	Y+4, r26	; 0x04
    374c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    374e:	db 87       	std	Y+11, r29	; 0x0b
    3750:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3752:	b8 01       	movw	r22, r16
    3754:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <pxCurrentTimerList>
    3758:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <pxCurrentTimerList+0x1>
    375c:	0e 94 57 07 	call	0xeae	; 0xeae <vListInsert>
    3760:	0a c0       	rjmp	.+20     	; 0x3776 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3762:	c1 2c       	mov	r12, r1
    3764:	d1 2c       	mov	r13, r1
    3766:	76 01       	movw	r14, r12
    3768:	00 e0       	ldi	r16, 0x00	; 0
    376a:	10 e0       	ldi	r17, 0x00	; 0
    376c:	a5 01       	movw	r20, r10
    376e:	94 01       	movw	r18, r8
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	ce 01       	movw	r24, r28
    3774:	5a df       	rcall	.-332    	; 0x362a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3776:	e0 91 d1 11 	lds	r30, 0x11D1	; 0x8011d1 <pxCurrentTimerList>
    377a:	f0 91 d2 11 	lds	r31, 0x11D2	; 0x8011d2 <pxCurrentTimerList+0x1>
    377e:	80 81       	ld	r24, Z
    3780:	81 11       	cpse	r24, r1
    3782:	be cf       	rjmp	.-132    	; 0x3700 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3784:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <pxOverflowTimerList>
    3788:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <pxOverflowTimerList+0x1>
    378c:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <pxCurrentTimerList+0x1>
    3790:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3794:	f0 93 d0 11 	sts	0x11D0, r31	; 0x8011d0 <pxOverflowTimerList+0x1>
    3798:	e0 93 cf 11 	sts	0x11CF, r30	; 0x8011cf <pxOverflowTimerList>
    }
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	ff 90       	pop	r15
    37a6:	ef 90       	pop	r14
    37a8:	df 90       	pop	r13
    37aa:	cf 90       	pop	r12
    37ac:	bf 90       	pop	r11
    37ae:	af 90       	pop	r10
    37b0:	9f 90       	pop	r9
    37b2:	8f 90       	pop	r8
    37b4:	08 95       	ret

000037b6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    37b6:	cf 92       	push	r12
    37b8:	df 92       	push	r13
    37ba:	ef 92       	push	r14
    37bc:	ff 92       	push	r15
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    37c4:	0e 94 80 11 	call	0x2300	; 0x2300 <xTaskGetTickCount>
    37c8:	6b 01       	movw	r12, r22
    37ca:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    37cc:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xLastTime.2436>
    37d0:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xLastTime.2436+0x1>
    37d4:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <xLastTime.2436+0x2>
    37d8:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <xLastTime.2436+0x3>
    37dc:	c8 16       	cp	r12, r24
    37de:	d9 06       	cpc	r13, r25
    37e0:	ea 06       	cpc	r14, r26
    37e2:	fb 06       	cpc	r15, r27
    37e4:	20 f4       	brcc	.+8      	; 0x37ee <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    37e6:	7f df       	rcall	.-258    	; 0x36e6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	88 83       	st	Y, r24
    37ec:	01 c0       	rjmp	.+2      	; 0x37f0 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    37ee:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    37f0:	c0 92 c7 11 	sts	0x11C7, r12	; 0x8011c7 <xLastTime.2436>
    37f4:	d0 92 c8 11 	sts	0x11C8, r13	; 0x8011c8 <xLastTime.2436+0x1>
    37f8:	e0 92 c9 11 	sts	0x11C9, r14	; 0x8011c9 <xLastTime.2436+0x2>
    37fc:	f0 92 ca 11 	sts	0x11CA, r15	; 0x8011ca <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3800:	c7 01       	movw	r24, r14
    3802:	b6 01       	movw	r22, r12
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	df 90       	pop	r13
    380e:	cf 90       	pop	r12
    3810:	08 95       	ret

00003812 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3812:	4f 92       	push	r4
    3814:	5f 92       	push	r5
    3816:	6f 92       	push	r6
    3818:	7f 92       	push	r7
    381a:	8f 92       	push	r8
    381c:	9f 92       	push	r9
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	4b 01       	movw	r8, r22
    3834:	5c 01       	movw	r10, r24
    3836:	29 01       	movw	r4, r18
    3838:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    383a:	e0 91 d1 11 	lds	r30, 0x11D1	; 0x8011d1 <pxCurrentTimerList>
    383e:	f0 91 d2 11 	lds	r31, 0x11D2	; 0x8011d2 <pxCurrentTimerList+0x1>
    3842:	07 80       	ldd	r0, Z+7	; 0x07
    3844:	f0 85       	ldd	r31, Z+8	; 0x08
    3846:	e0 2d       	mov	r30, r0
    3848:	c0 85       	ldd	r28, Z+8	; 0x08
    384a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    384c:	ce 01       	movw	r24, r28
    384e:	02 96       	adiw	r24, 0x02	; 2
    3850:	0e 94 94 07 	call	0xf28	; 0xf28 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3854:	8e 89       	ldd	r24, Y+22	; 0x16
    3856:	82 ff       	sbrs	r24, 2
    3858:	1b c0       	rjmp	.+54     	; 0x3890 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    385a:	4e 85       	ldd	r20, Y+14	; 0x0e
    385c:	5f 85       	ldd	r21, Y+15	; 0x0f
    385e:	68 89       	ldd	r22, Y+16	; 0x10
    3860:	79 89       	ldd	r23, Y+17	; 0x11
    3862:	48 0d       	add	r20, r8
    3864:	59 1d       	adc	r21, r9
    3866:	6a 1d       	adc	r22, r10
    3868:	7b 1d       	adc	r23, r11
    386a:	75 01       	movw	r14, r10
    386c:	64 01       	movw	r12, r8
    386e:	93 01       	movw	r18, r6
    3870:	82 01       	movw	r16, r4
    3872:	ce 01       	movw	r24, r28
    3874:	47 de       	rcall	.-882    	; 0x3504 <prvInsertTimerInActiveList>
    3876:	88 23       	and	r24, r24
    3878:	69 f0       	breq	.+26     	; 0x3894 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    387a:	c1 2c       	mov	r12, r1
    387c:	d1 2c       	mov	r13, r1
    387e:	76 01       	movw	r14, r12
    3880:	00 e0       	ldi	r16, 0x00	; 0
    3882:	10 e0       	ldi	r17, 0x00	; 0
    3884:	a5 01       	movw	r20, r10
    3886:	94 01       	movw	r18, r8
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	ce 01       	movw	r24, r28
    388c:	ce de       	rcall	.-612    	; 0x362a <xTimerGenericCommand>
    388e:	02 c0       	rjmp	.+4      	; 0x3894 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3890:	8e 7f       	andi	r24, 0xFE	; 254
    3892:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3894:	ec 89       	ldd	r30, Y+20	; 0x14
    3896:	fd 89       	ldd	r31, Y+21	; 0x15
    3898:	ce 01       	movw	r24, r28
    389a:	19 95       	eicall
    }
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	ef 90       	pop	r14
    38a8:	df 90       	pop	r13
    38aa:	cf 90       	pop	r12
    38ac:	bf 90       	pop	r11
    38ae:	af 90       	pop	r10
    38b0:	9f 90       	pop	r9
    38b2:	8f 90       	pop	r8
    38b4:	7f 90       	pop	r7
    38b6:	6f 90       	pop	r6
    38b8:	5f 90       	pop	r5
    38ba:	4f 90       	pop	r4
    38bc:	08 95       	ret

000038be <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    38be:	8f 92       	push	r8
    38c0:	9f 92       	push	r9
    38c2:	af 92       	push	r10
    38c4:	bf 92       	push	r11
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	1f 92       	push	r1
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	6b 01       	movw	r12, r22
    38dc:	7c 01       	movw	r14, r24
    38de:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    38e0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    38e4:	ce 01       	movw	r24, r28
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	66 df       	rcall	.-308    	; 0x37b6 <prvSampleTimeNow>
    38ea:	4b 01       	movw	r8, r22
    38ec:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	81 11       	cpse	r24, r1
    38f2:	2d c0       	rjmp	.+90     	; 0x394e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    38f4:	11 11       	cpse	r17, r1
    38f6:	0d c0       	rjmp	.+26     	; 0x3912 <prvProcessTimerOrBlockTask+0x54>
    38f8:	8c 14       	cp	r8, r12
    38fa:	9d 04       	cpc	r9, r13
    38fc:	ae 04       	cpc	r10, r14
    38fe:	bf 04       	cpc	r11, r15
    3900:	40 f0       	brcs	.+16     	; 0x3912 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3902:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3906:	a5 01       	movw	r20, r10
    3908:	94 01       	movw	r18, r8
    390a:	c7 01       	movw	r24, r14
    390c:	b6 01       	movw	r22, r12
    390e:	81 df       	rcall	.-254    	; 0x3812 <prvProcessExpiredTimer>
    3910:	20 c0       	rjmp	.+64     	; 0x3952 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3912:	11 23       	and	r17, r17
    3914:	41 f0       	breq	.+16     	; 0x3926 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3916:	e0 91 cf 11 	lds	r30, 0x11CF	; 0x8011cf <pxOverflowTimerList>
    391a:	f0 91 d0 11 	lds	r31, 0x11D0	; 0x8011d0 <pxOverflowTimerList+0x1>
    391e:	80 81       	ld	r24, Z
    3920:	11 e0       	ldi	r17, 0x01	; 1
    3922:	81 11       	cpse	r24, r1
    3924:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3926:	b7 01       	movw	r22, r14
    3928:	a6 01       	movw	r20, r12
    392a:	48 19       	sub	r20, r8
    392c:	59 09       	sbc	r21, r9
    392e:	6a 09       	sbc	r22, r10
    3930:	7b 09       	sbc	r23, r11
    3932:	21 2f       	mov	r18, r17
    3934:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <xTimerQueue>
    3938:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <xTimerQueue+0x1>
    393c:	0e 94 92 0b 	call	0x1724	; 0x1724 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3940:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
    3944:	81 11       	cpse	r24, r1
    3946:	05 c0       	rjmp	.+10     	; 0x3952 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3948:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    394e:	0e 94 ba 12 	call	0x2574	; 0x2574 <xTaskResumeAll>
            }
        }
    }
    3952:	0f 90       	pop	r0
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	1f 91       	pop	r17
    395a:	ff 90       	pop	r15
    395c:	ef 90       	pop	r14
    395e:	df 90       	pop	r13
    3960:	cf 90       	pop	r12
    3962:	bf 90       	pop	r11
    3964:	af 90       	pop	r10
    3966:	9f 90       	pop	r9
    3968:	8f 90       	pop	r8
    396a:	08 95       	ret

0000396c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    396c:	af 92       	push	r10
    396e:	bf 92       	push	r11
    3970:	cf 92       	push	r12
    3972:	df 92       	push	r13
    3974:	ef 92       	push	r14
    3976:	ff 92       	push	r15
    3978:	0f 93       	push	r16
    397a:	1f 93       	push	r17
    397c:	cf 93       	push	r28
    397e:	df 93       	push	r29
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
    3984:	28 97       	sbiw	r28, 0x08	; 8
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3990:	82 c0       	rjmp	.+260    	; 0x3a96 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	88 23       	and	r24, r24
    3996:	0c f4       	brge	.+2      	; 0x399a <prvProcessReceivedCommands+0x2e>
    3998:	7e c0       	rjmp	.+252    	; 0x3a96 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    399a:	ae 80       	ldd	r10, Y+6	; 0x06
    399c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    399e:	d5 01       	movw	r26, r10
    39a0:	1c 96       	adiw	r26, 0x0c	; 12
    39a2:	8d 91       	ld	r24, X+
    39a4:	9c 91       	ld	r25, X
    39a6:	1d 97       	sbiw	r26, 0x0d	; 13
    39a8:	89 2b       	or	r24, r25
    39aa:	21 f0       	breq	.+8      	; 0x39b4 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    39ac:	c5 01       	movw	r24, r10
    39ae:	02 96       	adiw	r24, 0x02	; 2
    39b0:	0e 94 94 07 	call	0xf28	; 0xf28 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    39b4:	ce 01       	movw	r24, r28
    39b6:	08 96       	adiw	r24, 0x08	; 8
    39b8:	fe de       	rcall	.-516    	; 0x37b6 <prvSampleTimeNow>
    39ba:	8b 01       	movw	r16, r22
    39bc:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    39be:	e9 81       	ldd	r30, Y+1	; 0x01
    39c0:	0e 2e       	mov	r0, r30
    39c2:	00 0c       	add	r0, r0
    39c4:	ff 0b       	sbc	r31, r31
    39c6:	ea 30       	cpi	r30, 0x0A	; 10
    39c8:	f1 05       	cpc	r31, r1
    39ca:	08 f0       	brcs	.+2      	; 0x39ce <prvProcessReceivedCommands+0x62>
    39cc:	64 c0       	rjmp	.+200    	; 0x3a96 <prvProcessReceivedCommands+0x12a>
    39ce:	88 27       	eor	r24, r24
    39d0:	ee 58       	subi	r30, 0x8E	; 142
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	8f 4f       	sbci	r24, 0xFF	; 255
    39d6:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    39da:	f5 01       	movw	r30, r10
    39dc:	86 89       	ldd	r24, Z+22	; 0x16
    39de:	81 60       	ori	r24, 0x01	; 1
    39e0:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    39e2:	ca 80       	ldd	r12, Y+2	; 0x02
    39e4:	db 80       	ldd	r13, Y+3	; 0x03
    39e6:	ec 80       	ldd	r14, Y+4	; 0x04
    39e8:	fd 80       	ldd	r15, Y+5	; 0x05
    39ea:	46 85       	ldd	r20, Z+14	; 0x0e
    39ec:	57 85       	ldd	r21, Z+15	; 0x0f
    39ee:	60 89       	ldd	r22, Z+16	; 0x10
    39f0:	71 89       	ldd	r23, Z+17	; 0x11
    39f2:	4c 0d       	add	r20, r12
    39f4:	5d 1d       	adc	r21, r13
    39f6:	6e 1d       	adc	r22, r14
    39f8:	7f 1d       	adc	r23, r15
    39fa:	c5 01       	movw	r24, r10
    39fc:	83 dd       	rcall	.-1274   	; 0x3504 <prvInsertTimerInActiveList>
    39fe:	88 23       	and	r24, r24
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <prvProcessReceivedCommands+0x98>
    3a02:	49 c0       	rjmp	.+146    	; 0x3a96 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a04:	d5 01       	movw	r26, r10
    3a06:	54 96       	adiw	r26, 0x14	; 20
    3a08:	ed 91       	ld	r30, X+
    3a0a:	fc 91       	ld	r31, X
    3a0c:	55 97       	sbiw	r26, 0x15	; 21
    3a0e:	c5 01       	movw	r24, r10
    3a10:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a12:	f5 01       	movw	r30, r10
    3a14:	86 89       	ldd	r24, Z+22	; 0x16
    3a16:	82 ff       	sbrs	r24, 2
    3a18:	3e c0       	rjmp	.+124    	; 0x3a96 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3a1a:	4a 81       	ldd	r20, Y+2	; 0x02
    3a1c:	5b 81       	ldd	r21, Y+3	; 0x03
    3a1e:	6c 81       	ldd	r22, Y+4	; 0x04
    3a20:	7d 81       	ldd	r23, Y+5	; 0x05
    3a22:	86 85       	ldd	r24, Z+14	; 0x0e
    3a24:	97 85       	ldd	r25, Z+15	; 0x0f
    3a26:	a0 89       	ldd	r26, Z+16	; 0x10
    3a28:	b1 89       	ldd	r27, Z+17	; 0x11
    3a2a:	9a 01       	movw	r18, r20
    3a2c:	ab 01       	movw	r20, r22
    3a2e:	28 0f       	add	r18, r24
    3a30:	39 1f       	adc	r19, r25
    3a32:	4a 1f       	adc	r20, r26
    3a34:	5b 1f       	adc	r21, r27
    3a36:	c1 2c       	mov	r12, r1
    3a38:	d1 2c       	mov	r13, r1
    3a3a:	76 01       	movw	r14, r12
    3a3c:	00 e0       	ldi	r16, 0x00	; 0
    3a3e:	10 e0       	ldi	r17, 0x00	; 0
    3a40:	60 e0       	ldi	r22, 0x00	; 0
    3a42:	c5 01       	movw	r24, r10
    3a44:	f2 dd       	rcall	.-1052   	; 0x362a <xTimerGenericCommand>
    3a46:	27 c0       	rjmp	.+78     	; 0x3a96 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3a48:	d5 01       	movw	r26, r10
    3a4a:	56 96       	adiw	r26, 0x16	; 22
    3a4c:	8c 91       	ld	r24, X
    3a4e:	56 97       	sbiw	r26, 0x16	; 22
    3a50:	8e 7f       	andi	r24, 0xFE	; 254
    3a52:	56 96       	adiw	r26, 0x16	; 22
    3a54:	8c 93       	st	X, r24
                        break;
    3a56:	1f c0       	rjmp	.+62     	; 0x3a96 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3a58:	f5 01       	movw	r30, r10
    3a5a:	86 89       	ldd	r24, Z+22	; 0x16
    3a5c:	81 60       	ori	r24, 0x01	; 1
    3a5e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3a60:	4a 81       	ldd	r20, Y+2	; 0x02
    3a62:	5b 81       	ldd	r21, Y+3	; 0x03
    3a64:	6c 81       	ldd	r22, Y+4	; 0x04
    3a66:	7d 81       	ldd	r23, Y+5	; 0x05
    3a68:	46 87       	std	Z+14, r20	; 0x0e
    3a6a:	57 87       	std	Z+15, r21	; 0x0f
    3a6c:	60 8b       	std	Z+16, r22	; 0x10
    3a6e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3a70:	40 0f       	add	r20, r16
    3a72:	51 1f       	adc	r21, r17
    3a74:	62 1f       	adc	r22, r18
    3a76:	73 1f       	adc	r23, r19
    3a78:	68 01       	movw	r12, r16
    3a7a:	79 01       	movw	r14, r18
    3a7c:	c5 01       	movw	r24, r10
    3a7e:	42 dd       	rcall	.-1404   	; 0x3504 <prvInsertTimerInActiveList>
                        break;
    3a80:	0a c0       	rjmp	.+20     	; 0x3a96 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3a82:	f5 01       	movw	r30, r10
    3a84:	86 89       	ldd	r24, Z+22	; 0x16
    3a86:	81 fd       	sbrc	r24, 1
    3a88:	04 c0       	rjmp	.+8      	; 0x3a92 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3a8a:	c5 01       	movw	r24, r10
    3a8c:	0e 94 05 07 	call	0xe0a	; 0xe0a <vPortFree>
    3a90:	02 c0       	rjmp	.+4      	; 0x3a96 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3a92:	8e 7f       	andi	r24, 0xFE	; 254
    3a94:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	a9 01       	movw	r20, r18
    3a9c:	be 01       	movw	r22, r28
    3a9e:	6f 5f       	subi	r22, 0xFF	; 255
    3aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa2:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <xTimerQueue>
    3aa6:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <xTimerQueue+0x1>
    3aaa:	0e 94 03 0b 	call	0x1606	; 0x1606 <xQueueReceive>
    3aae:	81 11       	cpse	r24, r1
    3ab0:	70 cf       	rjmp	.-288    	; 0x3992 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3ab2:	28 96       	adiw	r28, 0x08	; 8
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	df 90       	pop	r13
    3acc:	cf 90       	pop	r12
    3ace:	bf 90       	pop	r11
    3ad0:	af 90       	pop	r10
    3ad2:	08 95       	ret

00003ad4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3ad4:	08 95       	ret

00003ad6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3ad6:	84 b1       	in	r24, 0x04	; 4
    3ad8:	80 68       	ori	r24, 0x80	; 128
    3ada:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3adc:	85 b1       	in	r24, 0x05	; 5
    3ade:	80 68       	ori	r24, 0x80	; 128
    3ae0:	85 b9       	out	0x05, r24	; 5
    3ae2:	08 95       	ret

00003ae4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3ae4:	83 b1       	in	r24, 0x03	; 3
    3ae6:	80 68       	ori	r24, 0x80	; 128
    3ae8:	83 b9       	out	0x03, r24	; 3
    3aea:	08 95       	ret

00003aec <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3aec:	f4 df       	rcall	.-24     	; 0x3ad6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3aee:	2f ef       	ldi	r18, 0xFF	; 255
    3af0:	80 e7       	ldi	r24, 0x70	; 112
    3af2:	92 e0       	ldi	r25, 0x02	; 2
    3af4:	21 50       	subi	r18, 0x01	; 1
    3af6:	80 40       	sbci	r24, 0x00	; 0
    3af8:	90 40       	sbci	r25, 0x00	; 0
    3afa:	e1 f7       	brne	.-8      	; 0x3af4 <vApplicationMallocFailedHook+0x8>
    3afc:	00 c0       	rjmp	.+0      	; 0x3afe <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3afe:	00 00       	nop
    3b00:	f1 df       	rcall	.-30     	; 0x3ae4 <prvBlinkMainLed>
    3b02:	f5 cf       	rjmp	.-22     	; 0x3aee <vApplicationMallocFailedHook+0x2>

00003b04 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3b04:	e8 df       	rcall	.-48     	; 0x3ad6 <prvSetMainLedOn>
    3b06:	2f ef       	ldi	r18, 0xFF	; 255
    3b08:	87 ea       	ldi	r24, 0xA7	; 167
    3b0a:	91 e6       	ldi	r25, 0x61	; 97
    3b0c:	21 50       	subi	r18, 0x01	; 1
    3b0e:	80 40       	sbci	r24, 0x00	; 0
    3b10:	90 40       	sbci	r25, 0x00	; 0
    3b12:	e1 f7       	brne	.-8      	; 0x3b0c <vApplicationStackOverflowHook+0x8>
    3b14:	00 c0       	rjmp	.+0      	; 0x3b16 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3b16:	00 00       	nop
    3b18:	e5 df       	rcall	.-54     	; 0x3ae4 <prvBlinkMainLed>
    3b1a:	f5 cf       	rjmp	.-22     	; 0x3b06 <vApplicationStackOverflowHook+0x2>

00003b1c <createTasksForSensors>:
	createTasksForSensors();
	lora_handler_initialize(4, temperature_sensor, co2_sensor);
}

void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    3b1c:	60 91 e9 11 	lds	r22, 0x11E9	; 0x8011e9 <taskReadyBits>
    3b20:	70 91 ea 11 	lds	r23, 0x11EA	; 0x8011ea <taskReadyBits+0x1>
    3b24:	21 e0       	ldi	r18, 0x01	; 1
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	83 e0       	ldi	r24, 0x03	; 3
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	0e 94 b3 02 	call	0x566	; 0x566 <createTemp>
    3b34:	90 93 10 13 	sts	0x1310, r25	; 0x801310 <temperature_sensor+0x1>
    3b38:	80 93 0f 13 	sts	0x130F, r24	; 0x80130f <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    3b3c:	60 91 e9 11 	lds	r22, 0x11E9	; 0x8011e9 <taskReadyBits>
    3b40:	70 91 ea 11 	lds	r23, 0x11EA	; 0x8011ea <taskReadyBits+0x1>
    3b44:	22 e0       	ldi	r18, 0x02	; 2
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	83 e0       	ldi	r24, 0x03	; 3
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	0e 94 01 02 	call	0x402	; 0x402 <createCO2>
    3b54:	90 93 14 13 	sts	0x1314, r25	; 0x801314 <co2_sensor+0x1>
    3b58:	80 93 13 13 	sts	0x1313, r24	; 0x801313 <co2_sensor>
    3b5c:	08 95       	ret

00003b5e <create_tasks_and_semaphores>:
#define BIT_TEMP_READY (1 << 0)
#define BIT_CO2_READY (1 << 1)


void create_tasks_and_semaphores(void)
{
    3b5e:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3b60:	80 91 11 13 	lds	r24, 0x1311	; 0x801311 <xTestSemaphore>
    3b64:	90 91 12 13 	lds	r25, 0x1312	; 0x801312 <xTestSemaphore+0x1>
    3b68:	89 2b       	or	r24, r25
    3b6a:	89 f4       	brne	.+34     	; 0x3b8e <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <xQueueCreateMutex>
    3b72:	90 93 12 13 	sts	0x1312, r25	; 0x801312 <xTestSemaphore+0x1>
    3b76:	80 93 11 13 	sts	0x1311, r24	; 0x801311 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	41 f0       	breq	.+16     	; 0x3b8e <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3b7e:	00 e0       	ldi	r16, 0x00	; 0
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	a9 01       	movw	r20, r18
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	70 e0       	ldi	r23, 0x00	; 0
    3b8a:	0e 94 18 0a 	call	0x1430	; 0x1430 <xQueueGenericSend>
		}
	}
	
	
	createTasksForSensors();
    3b8e:	c6 df       	rcall	.-116    	; 0x3b1c <createTasksForSensors>
	lora_handler_initialize(4, temperature_sensor, co2_sensor);
    3b90:	40 91 13 13 	lds	r20, 0x1313	; 0x801313 <co2_sensor>
    3b94:	50 91 14 13 	lds	r21, 0x1314	; 0x801314 <co2_sensor+0x1>
    3b98:	60 91 0f 13 	lds	r22, 0x130F	; 0x80130f <temperature_sensor>
    3b9c:	70 91 10 13 	lds	r23, 0x1310	; 0x801310 <temperature_sensor+0x1>
    3ba0:	84 e0       	ldi	r24, 0x04	; 4
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <lora_handler_initialize>
}
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret

00003bac <initializeSystem>:
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
}

void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    3bac:	0e 94 a8 04 	call	0x950	; 0x950 <xEventGroupCreate>
    3bb0:	90 93 ea 11 	sts	0x11EA, r25	; 0x8011ea <taskReadyBits+0x1>
    3bb4:	80 93 e9 11 	sts	0x11E9, r24	; 0x8011e9 <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	0e 94 df 28 	call	0x51be	; 0x51be <stdio_initialise>
	// Method for tasks and semaphore
	lora_driver_initialise(ser_USART1, NULL);
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	70 e0       	ldi	r23, 0x00	; 0
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	43 d3       	rcall	.+1670   	; 0x424c <lora_driver_initialise>
	create_tasks_and_semaphores();
    3bc6:	cb cf       	rjmp	.-106    	; 0x3b5e <create_tasks_and_semaphores>
    3bc8:	08 95       	ret

00003bca <main>:
    3bca:	f0 df       	rcall	.-32     	; 0x3bac <initializeSystem>
}

int main(void){
	initializeSystem();
	vTaskStartScheduler();
    3bcc:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskStartScheduler>
    3bd0:	ff cf       	rjmp	.-2      	; 0x3bd0 <main+0x6>

00003bd2 <__fixsfsi>:
    3bd2:	04 d0       	rcall	.+8      	; 0x3bdc <__fixunssfsi>
    3bd4:	68 94       	set
    3bd6:	b1 11       	cpse	r27, r1
    3bd8:	50 c0       	rjmp	.+160    	; 0x3c7a <__fp_szero>
    3bda:	08 95       	ret

00003bdc <__fixunssfsi>:
    3bdc:	33 d0       	rcall	.+102    	; 0x3c44 <__fp_splitA>
    3bde:	88 f0       	brcs	.+34     	; 0x3c02 <__fixunssfsi+0x26>
    3be0:	9f 57       	subi	r25, 0x7F	; 127
    3be2:	90 f0       	brcs	.+36     	; 0x3c08 <__fixunssfsi+0x2c>
    3be4:	b9 2f       	mov	r27, r25
    3be6:	99 27       	eor	r25, r25
    3be8:	b7 51       	subi	r27, 0x17	; 23
    3bea:	a0 f0       	brcs	.+40     	; 0x3c14 <__fixunssfsi+0x38>
    3bec:	d1 f0       	breq	.+52     	; 0x3c22 <__fixunssfsi+0x46>
    3bee:	66 0f       	add	r22, r22
    3bf0:	77 1f       	adc	r23, r23
    3bf2:	88 1f       	adc	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	1a f0       	brmi	.+6      	; 0x3bfe <__fixunssfsi+0x22>
    3bf8:	ba 95       	dec	r27
    3bfa:	c9 f7       	brne	.-14     	; 0x3bee <__fixunssfsi+0x12>
    3bfc:	12 c0       	rjmp	.+36     	; 0x3c22 <__fixunssfsi+0x46>
    3bfe:	b1 30       	cpi	r27, 0x01	; 1
    3c00:	81 f0       	breq	.+32     	; 0x3c22 <__fixunssfsi+0x46>
    3c02:	3a d0       	rcall	.+116    	; 0x3c78 <__fp_zero>
    3c04:	b1 e0       	ldi	r27, 0x01	; 1
    3c06:	08 95       	ret
    3c08:	37 c0       	rjmp	.+110    	; 0x3c78 <__fp_zero>
    3c0a:	67 2f       	mov	r22, r23
    3c0c:	78 2f       	mov	r23, r24
    3c0e:	88 27       	eor	r24, r24
    3c10:	b8 5f       	subi	r27, 0xF8	; 248
    3c12:	39 f0       	breq	.+14     	; 0x3c22 <__fixunssfsi+0x46>
    3c14:	b9 3f       	cpi	r27, 0xF9	; 249
    3c16:	cc f3       	brlt	.-14     	; 0x3c0a <__fixunssfsi+0x2e>
    3c18:	86 95       	lsr	r24
    3c1a:	77 95       	ror	r23
    3c1c:	67 95       	ror	r22
    3c1e:	b3 95       	inc	r27
    3c20:	d9 f7       	brne	.-10     	; 0x3c18 <__fixunssfsi+0x3c>
    3c22:	3e f4       	brtc	.+14     	; 0x3c32 <__fixunssfsi+0x56>
    3c24:	90 95       	com	r25
    3c26:	80 95       	com	r24
    3c28:	70 95       	com	r23
    3c2a:	61 95       	neg	r22
    3c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c30:	9f 4f       	sbci	r25, 0xFF	; 255
    3c32:	08 95       	ret

00003c34 <__fp_split3>:
    3c34:	57 fd       	sbrc	r21, 7
    3c36:	90 58       	subi	r25, 0x80	; 128
    3c38:	44 0f       	add	r20, r20
    3c3a:	55 1f       	adc	r21, r21
    3c3c:	59 f0       	breq	.+22     	; 0x3c54 <__fp_splitA+0x10>
    3c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c40:	71 f0       	breq	.+28     	; 0x3c5e <__fp_splitA+0x1a>
    3c42:	47 95       	ror	r20

00003c44 <__fp_splitA>:
    3c44:	88 0f       	add	r24, r24
    3c46:	97 fb       	bst	r25, 7
    3c48:	99 1f       	adc	r25, r25
    3c4a:	61 f0       	breq	.+24     	; 0x3c64 <__fp_splitA+0x20>
    3c4c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c4e:	79 f0       	breq	.+30     	; 0x3c6e <__fp_splitA+0x2a>
    3c50:	87 95       	ror	r24
    3c52:	08 95       	ret
    3c54:	12 16       	cp	r1, r18
    3c56:	13 06       	cpc	r1, r19
    3c58:	14 06       	cpc	r1, r20
    3c5a:	55 1f       	adc	r21, r21
    3c5c:	f2 cf       	rjmp	.-28     	; 0x3c42 <__fp_split3+0xe>
    3c5e:	46 95       	lsr	r20
    3c60:	f1 df       	rcall	.-30     	; 0x3c44 <__fp_splitA>
    3c62:	08 c0       	rjmp	.+16     	; 0x3c74 <__fp_splitA+0x30>
    3c64:	16 16       	cp	r1, r22
    3c66:	17 06       	cpc	r1, r23
    3c68:	18 06       	cpc	r1, r24
    3c6a:	99 1f       	adc	r25, r25
    3c6c:	f1 cf       	rjmp	.-30     	; 0x3c50 <__fp_splitA+0xc>
    3c6e:	86 95       	lsr	r24
    3c70:	71 05       	cpc	r23, r1
    3c72:	61 05       	cpc	r22, r1
    3c74:	08 94       	sec
    3c76:	08 95       	ret

00003c78 <__fp_zero>:
    3c78:	e8 94       	clt

00003c7a <__fp_szero>:
    3c7a:	bb 27       	eor	r27, r27
    3c7c:	66 27       	eor	r22, r22
    3c7e:	77 27       	eor	r23, r23
    3c80:	cb 01       	movw	r24, r22
    3c82:	97 f9       	bld	r25, 7
    3c84:	08 95       	ret

00003c86 <modf>:
    3c86:	fa 01       	movw	r30, r20
    3c88:	dc 01       	movw	r26, r24
    3c8a:	aa 0f       	add	r26, r26
    3c8c:	bb 1f       	adc	r27, r27
    3c8e:	9b 01       	movw	r18, r22
    3c90:	ac 01       	movw	r20, r24
    3c92:	bf 57       	subi	r27, 0x7F	; 127
    3c94:	28 f4       	brcc	.+10     	; 0x3ca0 <modf+0x1a>
    3c96:	22 27       	eor	r18, r18
    3c98:	33 27       	eor	r19, r19
    3c9a:	44 27       	eor	r20, r20
    3c9c:	50 78       	andi	r21, 0x80	; 128
    3c9e:	1f c0       	rjmp	.+62     	; 0x3cde <modf+0x58>
    3ca0:	b7 51       	subi	r27, 0x17	; 23
    3ca2:	88 f4       	brcc	.+34     	; 0x3cc6 <modf+0x40>
    3ca4:	ab 2f       	mov	r26, r27
    3ca6:	00 24       	eor	r0, r0
    3ca8:	46 95       	lsr	r20
    3caa:	37 95       	ror	r19
    3cac:	27 95       	ror	r18
    3cae:	01 1c       	adc	r0, r1
    3cb0:	a3 95       	inc	r26
    3cb2:	d2 f3       	brmi	.-12     	; 0x3ca8 <modf+0x22>
    3cb4:	00 20       	and	r0, r0
    3cb6:	69 f0       	breq	.+26     	; 0x3cd2 <modf+0x4c>
    3cb8:	22 0f       	add	r18, r18
    3cba:	33 1f       	adc	r19, r19
    3cbc:	44 1f       	adc	r20, r20
    3cbe:	b3 95       	inc	r27
    3cc0:	da f3       	brmi	.-10     	; 0x3cb8 <modf+0x32>
    3cc2:	0d d0       	rcall	.+26     	; 0x3cde <modf+0x58>
    3cc4:	76 c0       	rjmp	.+236    	; 0x3db2 <__subsf3>
    3cc6:	61 30       	cpi	r22, 0x01	; 1
    3cc8:	71 05       	cpc	r23, r1
    3cca:	a0 e8       	ldi	r26, 0x80	; 128
    3ccc:	8a 07       	cpc	r24, r26
    3cce:	b9 46       	sbci	r27, 0x69	; 105
    3cd0:	30 f4       	brcc	.+12     	; 0x3cde <modf+0x58>
    3cd2:	9b 01       	movw	r18, r22
    3cd4:	ac 01       	movw	r20, r24
    3cd6:	66 27       	eor	r22, r22
    3cd8:	77 27       	eor	r23, r23
    3cda:	88 27       	eor	r24, r24
    3cdc:	90 78       	andi	r25, 0x80	; 128
    3cde:	30 96       	adiw	r30, 0x00	; 0
    3ce0:	21 f0       	breq	.+8      	; 0x3cea <modf+0x64>
    3ce2:	20 83       	st	Z, r18
    3ce4:	31 83       	std	Z+1, r19	; 0x01
    3ce6:	42 83       	std	Z+2, r20	; 0x02
    3ce8:	53 83       	std	Z+3, r21	; 0x03
    3cea:	08 95       	ret

00003cec <__mulsf3>:
    3cec:	0b d0       	rcall	.+22     	; 0x3d04 <__mulsf3x>
    3cee:	dd c0       	rjmp	.+442    	; 0x3eaa <__fp_round>
    3cf0:	ce d0       	rcall	.+412    	; 0x3e8e <__fp_pscA>
    3cf2:	28 f0       	brcs	.+10     	; 0x3cfe <__mulsf3+0x12>
    3cf4:	d3 d0       	rcall	.+422    	; 0x3e9c <__fp_pscB>
    3cf6:	18 f0       	brcs	.+6      	; 0x3cfe <__mulsf3+0x12>
    3cf8:	95 23       	and	r25, r21
    3cfa:	09 f0       	breq	.+2      	; 0x3cfe <__mulsf3+0x12>
    3cfc:	bf c0       	rjmp	.+382    	; 0x3e7c <__fp_inf>
    3cfe:	c4 c0       	rjmp	.+392    	; 0x3e88 <__fp_nan>
    3d00:	11 24       	eor	r1, r1
    3d02:	bb cf       	rjmp	.-138    	; 0x3c7a <__fp_szero>

00003d04 <__mulsf3x>:
    3d04:	97 df       	rcall	.-210    	; 0x3c34 <__fp_split3>
    3d06:	a0 f3       	brcs	.-24     	; 0x3cf0 <__mulsf3+0x4>

00003d08 <__mulsf3_pse>:
    3d08:	95 9f       	mul	r25, r21
    3d0a:	d1 f3       	breq	.-12     	; 0x3d00 <__mulsf3+0x14>
    3d0c:	95 0f       	add	r25, r21
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	55 1f       	adc	r21, r21
    3d12:	62 9f       	mul	r22, r18
    3d14:	f0 01       	movw	r30, r0
    3d16:	72 9f       	mul	r23, r18
    3d18:	bb 27       	eor	r27, r27
    3d1a:	f0 0d       	add	r31, r0
    3d1c:	b1 1d       	adc	r27, r1
    3d1e:	63 9f       	mul	r22, r19
    3d20:	aa 27       	eor	r26, r26
    3d22:	f0 0d       	add	r31, r0
    3d24:	b1 1d       	adc	r27, r1
    3d26:	aa 1f       	adc	r26, r26
    3d28:	64 9f       	mul	r22, r20
    3d2a:	66 27       	eor	r22, r22
    3d2c:	b0 0d       	add	r27, r0
    3d2e:	a1 1d       	adc	r26, r1
    3d30:	66 1f       	adc	r22, r22
    3d32:	82 9f       	mul	r24, r18
    3d34:	22 27       	eor	r18, r18
    3d36:	b0 0d       	add	r27, r0
    3d38:	a1 1d       	adc	r26, r1
    3d3a:	62 1f       	adc	r22, r18
    3d3c:	73 9f       	mul	r23, r19
    3d3e:	b0 0d       	add	r27, r0
    3d40:	a1 1d       	adc	r26, r1
    3d42:	62 1f       	adc	r22, r18
    3d44:	83 9f       	mul	r24, r19
    3d46:	a0 0d       	add	r26, r0
    3d48:	61 1d       	adc	r22, r1
    3d4a:	22 1f       	adc	r18, r18
    3d4c:	74 9f       	mul	r23, r20
    3d4e:	33 27       	eor	r19, r19
    3d50:	a0 0d       	add	r26, r0
    3d52:	61 1d       	adc	r22, r1
    3d54:	23 1f       	adc	r18, r19
    3d56:	84 9f       	mul	r24, r20
    3d58:	60 0d       	add	r22, r0
    3d5a:	21 1d       	adc	r18, r1
    3d5c:	82 2f       	mov	r24, r18
    3d5e:	76 2f       	mov	r23, r22
    3d60:	6a 2f       	mov	r22, r26
    3d62:	11 24       	eor	r1, r1
    3d64:	9f 57       	subi	r25, 0x7F	; 127
    3d66:	50 40       	sbci	r21, 0x00	; 0
    3d68:	8a f0       	brmi	.+34     	; 0x3d8c <__mulsf3_pse+0x84>
    3d6a:	e1 f0       	breq	.+56     	; 0x3da4 <__mulsf3_pse+0x9c>
    3d6c:	88 23       	and	r24, r24
    3d6e:	4a f0       	brmi	.+18     	; 0x3d82 <__mulsf3_pse+0x7a>
    3d70:	ee 0f       	add	r30, r30
    3d72:	ff 1f       	adc	r31, r31
    3d74:	bb 1f       	adc	r27, r27
    3d76:	66 1f       	adc	r22, r22
    3d78:	77 1f       	adc	r23, r23
    3d7a:	88 1f       	adc	r24, r24
    3d7c:	91 50       	subi	r25, 0x01	; 1
    3d7e:	50 40       	sbci	r21, 0x00	; 0
    3d80:	a9 f7       	brne	.-22     	; 0x3d6c <__mulsf3_pse+0x64>
    3d82:	9e 3f       	cpi	r25, 0xFE	; 254
    3d84:	51 05       	cpc	r21, r1
    3d86:	70 f0       	brcs	.+28     	; 0x3da4 <__mulsf3_pse+0x9c>
    3d88:	79 c0       	rjmp	.+242    	; 0x3e7c <__fp_inf>
    3d8a:	77 cf       	rjmp	.-274    	; 0x3c7a <__fp_szero>
    3d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d8e:	ec f3       	brlt	.-6      	; 0x3d8a <__mulsf3_pse+0x82>
    3d90:	98 3e       	cpi	r25, 0xE8	; 232
    3d92:	dc f3       	brlt	.-10     	; 0x3d8a <__mulsf3_pse+0x82>
    3d94:	86 95       	lsr	r24
    3d96:	77 95       	ror	r23
    3d98:	67 95       	ror	r22
    3d9a:	b7 95       	ror	r27
    3d9c:	f7 95       	ror	r31
    3d9e:	e7 95       	ror	r30
    3da0:	9f 5f       	subi	r25, 0xFF	; 255
    3da2:	c1 f7       	brne	.-16     	; 0x3d94 <__mulsf3_pse+0x8c>
    3da4:	fe 2b       	or	r31, r30
    3da6:	88 0f       	add	r24, r24
    3da8:	91 1d       	adc	r25, r1
    3daa:	96 95       	lsr	r25
    3dac:	87 95       	ror	r24
    3dae:	97 f9       	bld	r25, 7
    3db0:	08 95       	ret

00003db2 <__subsf3>:
    3db2:	50 58       	subi	r21, 0x80	; 128

00003db4 <__addsf3>:
    3db4:	bb 27       	eor	r27, r27
    3db6:	aa 27       	eor	r26, r26
    3db8:	0e d0       	rcall	.+28     	; 0x3dd6 <__addsf3x>
    3dba:	77 c0       	rjmp	.+238    	; 0x3eaa <__fp_round>
    3dbc:	68 d0       	rcall	.+208    	; 0x3e8e <__fp_pscA>
    3dbe:	30 f0       	brcs	.+12     	; 0x3dcc <__addsf3+0x18>
    3dc0:	6d d0       	rcall	.+218    	; 0x3e9c <__fp_pscB>
    3dc2:	20 f0       	brcs	.+8      	; 0x3dcc <__addsf3+0x18>
    3dc4:	31 f4       	brne	.+12     	; 0x3dd2 <__addsf3+0x1e>
    3dc6:	9f 3f       	cpi	r25, 0xFF	; 255
    3dc8:	11 f4       	brne	.+4      	; 0x3dce <__addsf3+0x1a>
    3dca:	1e f4       	brtc	.+6      	; 0x3dd2 <__addsf3+0x1e>
    3dcc:	5d c0       	rjmp	.+186    	; 0x3e88 <__fp_nan>
    3dce:	0e f4       	brtc	.+2      	; 0x3dd2 <__addsf3+0x1e>
    3dd0:	e0 95       	com	r30
    3dd2:	e7 fb       	bst	r30, 7
    3dd4:	53 c0       	rjmp	.+166    	; 0x3e7c <__fp_inf>

00003dd6 <__addsf3x>:
    3dd6:	e9 2f       	mov	r30, r25
    3dd8:	2d df       	rcall	.-422    	; 0x3c34 <__fp_split3>
    3dda:	80 f3       	brcs	.-32     	; 0x3dbc <__addsf3+0x8>
    3ddc:	ba 17       	cp	r27, r26
    3dde:	62 07       	cpc	r22, r18
    3de0:	73 07       	cpc	r23, r19
    3de2:	84 07       	cpc	r24, r20
    3de4:	95 07       	cpc	r25, r21
    3de6:	18 f0       	brcs	.+6      	; 0x3dee <__addsf3x+0x18>
    3de8:	71 f4       	brne	.+28     	; 0x3e06 <__addsf3x+0x30>
    3dea:	9e f5       	brtc	.+102    	; 0x3e52 <__addsf3x+0x7c>
    3dec:	45 cf       	rjmp	.-374    	; 0x3c78 <__fp_zero>
    3dee:	0e f4       	brtc	.+2      	; 0x3df2 <__addsf3x+0x1c>
    3df0:	e0 95       	com	r30
    3df2:	0b 2e       	mov	r0, r27
    3df4:	ba 2f       	mov	r27, r26
    3df6:	a0 2d       	mov	r26, r0
    3df8:	0b 01       	movw	r0, r22
    3dfa:	b9 01       	movw	r22, r18
    3dfc:	90 01       	movw	r18, r0
    3dfe:	0c 01       	movw	r0, r24
    3e00:	ca 01       	movw	r24, r20
    3e02:	a0 01       	movw	r20, r0
    3e04:	11 24       	eor	r1, r1
    3e06:	ff 27       	eor	r31, r31
    3e08:	59 1b       	sub	r21, r25
    3e0a:	99 f0       	breq	.+38     	; 0x3e32 <__addsf3x+0x5c>
    3e0c:	59 3f       	cpi	r21, 0xF9	; 249
    3e0e:	50 f4       	brcc	.+20     	; 0x3e24 <__addsf3x+0x4e>
    3e10:	50 3e       	cpi	r21, 0xE0	; 224
    3e12:	68 f1       	brcs	.+90     	; 0x3e6e <__addsf3x+0x98>
    3e14:	1a 16       	cp	r1, r26
    3e16:	f0 40       	sbci	r31, 0x00	; 0
    3e18:	a2 2f       	mov	r26, r18
    3e1a:	23 2f       	mov	r18, r19
    3e1c:	34 2f       	mov	r19, r20
    3e1e:	44 27       	eor	r20, r20
    3e20:	58 5f       	subi	r21, 0xF8	; 248
    3e22:	f3 cf       	rjmp	.-26     	; 0x3e0a <__addsf3x+0x34>
    3e24:	46 95       	lsr	r20
    3e26:	37 95       	ror	r19
    3e28:	27 95       	ror	r18
    3e2a:	a7 95       	ror	r26
    3e2c:	f0 40       	sbci	r31, 0x00	; 0
    3e2e:	53 95       	inc	r21
    3e30:	c9 f7       	brne	.-14     	; 0x3e24 <__addsf3x+0x4e>
    3e32:	7e f4       	brtc	.+30     	; 0x3e52 <__addsf3x+0x7c>
    3e34:	1f 16       	cp	r1, r31
    3e36:	ba 0b       	sbc	r27, r26
    3e38:	62 0b       	sbc	r22, r18
    3e3a:	73 0b       	sbc	r23, r19
    3e3c:	84 0b       	sbc	r24, r20
    3e3e:	ba f0       	brmi	.+46     	; 0x3e6e <__addsf3x+0x98>
    3e40:	91 50       	subi	r25, 0x01	; 1
    3e42:	a1 f0       	breq	.+40     	; 0x3e6c <__addsf3x+0x96>
    3e44:	ff 0f       	add	r31, r31
    3e46:	bb 1f       	adc	r27, r27
    3e48:	66 1f       	adc	r22, r22
    3e4a:	77 1f       	adc	r23, r23
    3e4c:	88 1f       	adc	r24, r24
    3e4e:	c2 f7       	brpl	.-16     	; 0x3e40 <__addsf3x+0x6a>
    3e50:	0e c0       	rjmp	.+28     	; 0x3e6e <__addsf3x+0x98>
    3e52:	ba 0f       	add	r27, r26
    3e54:	62 1f       	adc	r22, r18
    3e56:	73 1f       	adc	r23, r19
    3e58:	84 1f       	adc	r24, r20
    3e5a:	48 f4       	brcc	.+18     	; 0x3e6e <__addsf3x+0x98>
    3e5c:	87 95       	ror	r24
    3e5e:	77 95       	ror	r23
    3e60:	67 95       	ror	r22
    3e62:	b7 95       	ror	r27
    3e64:	f7 95       	ror	r31
    3e66:	9e 3f       	cpi	r25, 0xFE	; 254
    3e68:	08 f0       	brcs	.+2      	; 0x3e6c <__addsf3x+0x96>
    3e6a:	b3 cf       	rjmp	.-154    	; 0x3dd2 <__addsf3+0x1e>
    3e6c:	93 95       	inc	r25
    3e6e:	88 0f       	add	r24, r24
    3e70:	08 f0       	brcs	.+2      	; 0x3e74 <__addsf3x+0x9e>
    3e72:	99 27       	eor	r25, r25
    3e74:	ee 0f       	add	r30, r30
    3e76:	97 95       	ror	r25
    3e78:	87 95       	ror	r24
    3e7a:	08 95       	ret

00003e7c <__fp_inf>:
    3e7c:	97 f9       	bld	r25, 7
    3e7e:	9f 67       	ori	r25, 0x7F	; 127
    3e80:	80 e8       	ldi	r24, 0x80	; 128
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	60 e0       	ldi	r22, 0x00	; 0
    3e86:	08 95       	ret

00003e88 <__fp_nan>:
    3e88:	9f ef       	ldi	r25, 0xFF	; 255
    3e8a:	80 ec       	ldi	r24, 0xC0	; 192
    3e8c:	08 95       	ret

00003e8e <__fp_pscA>:
    3e8e:	00 24       	eor	r0, r0
    3e90:	0a 94       	dec	r0
    3e92:	16 16       	cp	r1, r22
    3e94:	17 06       	cpc	r1, r23
    3e96:	18 06       	cpc	r1, r24
    3e98:	09 06       	cpc	r0, r25
    3e9a:	08 95       	ret

00003e9c <__fp_pscB>:
    3e9c:	00 24       	eor	r0, r0
    3e9e:	0a 94       	dec	r0
    3ea0:	12 16       	cp	r1, r18
    3ea2:	13 06       	cpc	r1, r19
    3ea4:	14 06       	cpc	r1, r20
    3ea6:	05 06       	cpc	r0, r21
    3ea8:	08 95       	ret

00003eaa <__fp_round>:
    3eaa:	09 2e       	mov	r0, r25
    3eac:	03 94       	inc	r0
    3eae:	00 0c       	add	r0, r0
    3eb0:	11 f4       	brne	.+4      	; 0x3eb6 <__fp_round+0xc>
    3eb2:	88 23       	and	r24, r24
    3eb4:	52 f0       	brmi	.+20     	; 0x3eca <__fp_round+0x20>
    3eb6:	bb 0f       	add	r27, r27
    3eb8:	40 f4       	brcc	.+16     	; 0x3eca <__fp_round+0x20>
    3eba:	bf 2b       	or	r27, r31
    3ebc:	11 f4       	brne	.+4      	; 0x3ec2 <__fp_round+0x18>
    3ebe:	60 ff       	sbrs	r22, 0
    3ec0:	04 c0       	rjmp	.+8      	; 0x3eca <__fp_round+0x20>
    3ec2:	6f 5f       	subi	r22, 0xFF	; 255
    3ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eca:	08 95       	ret

00003ecc <_hihTwiCallback>:
    3ecc:	65 30       	cpi	r22, 0x05	; 5
    3ece:	f1 f4       	brne	.+60     	; 0x3f0c <_hihTwiCallback+0x40>
    3ed0:	fa 01       	movw	r30, r20
    3ed2:	80 81       	ld	r24, Z
    3ed4:	8f 73       	andi	r24, 0x3F	; 63
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	98 2f       	mov	r25, r24
    3eda:	88 27       	eor	r24, r24
    3edc:	21 81       	ldd	r18, Z+1	; 0x01
    3ede:	82 2b       	or	r24, r18
    3ee0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3ee4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3ee8:	82 81       	ldd	r24, Z+2	; 0x02
    3eea:	f0 e4       	ldi	r31, 0x40	; 64
    3eec:	8f 9f       	mul	r24, r31
    3eee:	c0 01       	movw	r24, r0
    3ef0:	11 24       	eor	r1, r1
    3ef2:	fa 01       	movw	r30, r20
    3ef4:	23 81       	ldd	r18, Z+3	; 0x03
    3ef6:	26 95       	lsr	r18
    3ef8:	26 95       	lsr	r18
    3efa:	82 2b       	or	r24, r18
    3efc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3f00:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	80 93 eb 11 	sts	0x11EB, r24	; 0x8011eb <_measuringIsReady>
    3f0a:	08 95       	ret
    3f0c:	64 30       	cpi	r22, 0x04	; 4
    3f0e:	51 f0       	breq	.+20     	; 0x3f24 <_hihTwiCallback+0x58>
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	90 e4       	ldi	r25, 0x40	; 64
    3f14:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3f18:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3f1c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3f20:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3f24:	08 95       	ret

00003f26 <hih8120_initialise>:
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	06 e6       	ldi	r16, 0x66	; 102
    3f2c:	1f e1       	ldi	r17, 0x1F	; 31
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	34 e2       	ldi	r19, 0x24	; 36
    3f32:	44 ef       	ldi	r20, 0xF4	; 244
    3f34:	50 e0       	ldi	r21, 0x00	; 0
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	87 e2       	ldi	r24, 0x27	; 39
    3f3a:	0e 94 19 29 	call	0x5232	; 0x5232 <twiCreate>
    3f3e:	90 93 ed 11 	sts	0x11ED, r25	; 0x8011ed <_hih8120Handler+0x1>
    3f42:	80 93 ec 11 	sts	0x11EC, r24	; 0x8011ec <_hih8120Handler>
    3f46:	21 e0       	ldi	r18, 0x01	; 1
    3f48:	89 2b       	or	r24, r25
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <hih8120_initialise+0x28>
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	82 2f       	mov	r24, r18
    3f50:	1f 91       	pop	r17
    3f52:	0f 91       	pop	r16
    3f54:	08 95       	ret

00003f56 <hih8120_wakeup>:
    3f56:	80 91 ec 11 	lds	r24, 0x11EC	; 0x8011ec <_hih8120Handler>
    3f5a:	90 91 ed 11 	lds	r25, 0x11ED	; 0x8011ed <_hih8120Handler+0x1>
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	59 f0       	breq	.+22     	; 0x3f78 <hih8120_wakeup+0x22>
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	60 e0       	ldi	r22, 0x00	; 0
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <twiTransmit>
    3f6c:	84 30       	cpi	r24, 0x04	; 4
    3f6e:	31 f4       	brne	.+12     	; 0x3f7c <hih8120_wakeup+0x26>
    3f70:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <_measuringIsReady>
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	08 95       	ret
    3f78:	82 e0       	ldi	r24, 0x02	; 2
    3f7a:	08 95       	ret
    3f7c:	83 e0       	ldi	r24, 0x03	; 3
    3f7e:	08 95       	ret

00003f80 <hih8120_measure>:
    3f80:	80 91 ec 11 	lds	r24, 0x11EC	; 0x8011ec <_hih8120Handler>
    3f84:	90 91 ed 11 	lds	r25, 0x11ED	; 0x8011ed <_hih8120Handler+0x1>
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	39 f0       	breq	.+14     	; 0x3f9a <hih8120_measure+0x1a>
    3f8c:	64 e0       	ldi	r22, 0x04	; 4
    3f8e:	0e 94 b6 29 	call	0x536c	; 0x536c <twiReceive>
    3f92:	85 30       	cpi	r24, 0x05	; 5
    3f94:	21 f0       	breq	.+8      	; 0x3f9e <hih8120_measure+0x1e>
    3f96:	83 e0       	ldi	r24, 0x03	; 3
    3f98:	08 95       	ret
    3f9a:	82 e0       	ldi	r24, 0x02	; 2
    3f9c:	08 95       	ret
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	08 95       	ret

00003fa2 <hih8120_getHumidity>:
    3fa2:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3fa6:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	48 ec       	ldi	r20, 0xC8	; 200
    3fb8:	52 e4       	ldi	r21, 0x42	; 66
    3fba:	98 de       	rcall	.-720    	; 0x3cec <__mulsf3>
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	38 ef       	ldi	r19, 0xF8	; 248
    3fc0:	4f e7       	ldi	r20, 0x7F	; 127
    3fc2:	56 e4       	ldi	r21, 0x46	; 70
    3fc4:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__divsf3>
    3fc8:	08 95       	ret

00003fca <hih8120_getHumidityPercent_x10>:
    3fca:	eb df       	rcall	.-42     	; 0x3fa2 <hih8120_getHumidity>
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e2       	ldi	r20, 0x20	; 32
    3fd2:	51 e4       	ldi	r21, 0x41	; 65
    3fd4:	8b de       	rcall	.-746    	; 0x3cec <__mulsf3>
    3fd6:	02 de       	rcall	.-1020   	; 0x3bdc <__fixunssfsi>
    3fd8:	cb 01       	movw	r24, r22
    3fda:	08 95       	ret

00003fdc <hih8120_getTemperature>:
    3fdc:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3fe0:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	45 e2       	ldi	r20, 0x25	; 37
    3ff2:	53 e4       	ldi	r21, 0x43	; 67
    3ff4:	7b de       	rcall	.-778    	; 0x3cec <__mulsf3>
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	38 ef       	ldi	r19, 0xF8	; 248
    3ffa:	4f e7       	ldi	r20, 0x7F	; 127
    3ffc:	56 e4       	ldi	r21, 0x46	; 70
    3ffe:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <__divsf3>
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	40 e2       	ldi	r20, 0x20	; 32
    4008:	52 e4       	ldi	r21, 0x42	; 66
    400a:	d3 ce       	rjmp	.-602    	; 0x3db2 <__subsf3>
    400c:	08 95       	ret

0000400e <_serialCallBack>:
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	1f 92       	push	r1
    4018:	1f 92       	push	r1
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
    401e:	8c 01       	movw	r16, r24
    4020:	19 82       	std	Y+1, r1	; 0x01
    4022:	2d c0       	rjmp	.+90     	; 0x407e <_serialCallBack+0x70>
    4024:	e0 91 25 12 	lds	r30, 0x1225	; 0x801225 <rec_buf_inp.2878>
    4028:	ec 32       	cpi	r30, 0x2C	; 44
    402a:	50 f4       	brcc	.+20     	; 0x4040 <_serialCallBack+0x32>
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	8e 0f       	add	r24, r30
    4030:	80 93 25 12 	sts	0x1225, r24	; 0x801225 <rec_buf_inp.2878>
    4034:	f0 e0       	ldi	r31, 0x00	; 0
    4036:	e9 5a       	subi	r30, 0xA9	; 169
    4038:	fd 4e       	sbci	r31, 0xED	; 237
    403a:	8a 81       	ldd	r24, Y+2	; 0x02
    403c:	80 83       	st	Z, r24
    403e:	02 c0       	rjmp	.+4      	; 0x4044 <_serialCallBack+0x36>
    4040:	10 92 25 12 	sts	0x1225, r1	; 0x801225 <rec_buf_inp.2878>
    4044:	8a 81       	ldd	r24, Y+2	; 0x02
    4046:	8a 30       	cpi	r24, 0x0A	; 10
    4048:	d1 f4       	brne	.+52     	; 0x407e <_serialCallBack+0x70>
    404a:	40 91 25 12 	lds	r20, 0x1225	; 0x801225 <rec_buf_inp.2878>
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	fa 01       	movw	r30, r20
    4052:	eb 5a       	subi	r30, 0xAB	; 171
    4054:	fd 4e       	sbci	r31, 0xED	; 237
    4056:	10 82       	st	Z, r1
    4058:	41 50       	subi	r20, 0x01	; 1
    405a:	51 09       	sbc	r21, r1
    405c:	9e 01       	movw	r18, r28
    405e:	2f 5f       	subi	r18, 0xFF	; 255
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	67 e5       	ldi	r22, 0x57	; 87
    4064:	72 e1       	ldi	r23, 0x12	; 18
    4066:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_serialReplyBufferHandle>
    406a:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_serialReplyBufferHandle+0x1>
    406e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <xStreamBufferSendFromISR>
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	81 11       	cpse	r24, r1
    4076:	0e 94 10 08 	call	0x1020	; 0x1020 <vPortYield>
    407a:	10 92 25 12 	sts	0x1225, r1	; 0x801225 <rec_buf_inp.2878>
    407e:	be 01       	movw	r22, r28
    4080:	6e 5f       	subi	r22, 0xFE	; 254
    4082:	7f 4f       	sbci	r23, 0xFF	; 255
    4084:	c8 01       	movw	r24, r16
    4086:	05 d6       	rcall	.+3082   	; 0x4c92 <serial_getByte>
    4088:	88 23       	and	r24, r24
    408a:	61 f2       	breq	.-104    	; 0x4024 <_serialCallBack+0x16>
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	08 95       	ret

0000409a <_uploadMessage>:
    409a:	0f 93       	push	r16
    409c:	1f 93       	push	r17
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	8c 01       	movw	r16, r24
    40a4:	eb 01       	movw	r28, r22
    40a6:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_serialReplyBufferHandle>
    40aa:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_serialReplyBufferHandle+0x1>
    40ae:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <xStreamBufferReset>
    40b2:	b8 01       	movw	r22, r16
    40b4:	8e ee       	ldi	r24, 0xEE	; 238
    40b6:	91 e1       	ldi	r25, 0x11	; 17
    40b8:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <strcpy>
    40bc:	20 97       	sbiw	r28, 0x00	; 0
    40be:	79 f0       	breq	.+30     	; 0x40de <_uploadMessage+0x44>
    40c0:	ee ee       	ldi	r30, 0xEE	; 238
    40c2:	f1 e1       	ldi	r31, 0x11	; 17
    40c4:	01 90       	ld	r0, Z+
    40c6:	00 20       	and	r0, r0
    40c8:	e9 f7       	brne	.-6      	; 0x40c4 <_uploadMessage+0x2a>
    40ca:	31 97       	sbiw	r30, 0x01	; 1
    40cc:	80 e2       	ldi	r24, 0x20	; 32
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	80 83       	st	Z, r24
    40d4:	be 01       	movw	r22, r28
    40d6:	8e ee       	ldi	r24, 0xEE	; 238
    40d8:	91 e1       	ldi	r25, 0x11	; 17
    40da:	0e 94 6f 31 	call	0x62de	; 0x62de <strcat>
    40de:	ee ee       	ldi	r30, 0xEE	; 238
    40e0:	f1 e1       	ldi	r31, 0x11	; 17
    40e2:	df 01       	movw	r26, r30
    40e4:	0d 90       	ld	r0, X+
    40e6:	00 20       	and	r0, r0
    40e8:	e9 f7       	brne	.-6      	; 0x40e4 <_uploadMessage+0x4a>
    40ea:	11 97       	sbiw	r26, 0x01	; 1
    40ec:	8d e0       	ldi	r24, 0x0D	; 13
    40ee:	9a e0       	ldi	r25, 0x0A	; 10
    40f0:	11 96       	adiw	r26, 0x01	; 1
    40f2:	9c 93       	st	X, r25
    40f4:	8e 93       	st	-X, r24
    40f6:	12 96       	adiw	r26, 0x02	; 2
    40f8:	1c 92       	st	X, r1
    40fa:	01 90       	ld	r0, Z+
    40fc:	00 20       	and	r0, r0
    40fe:	e9 f7       	brne	.-6      	; 0x40fa <_uploadMessage+0x60>
    4100:	31 97       	sbiw	r30, 0x01	; 1
    4102:	ee 5e       	subi	r30, 0xEE	; 238
    4104:	f1 41       	sbci	r31, 0x11	; 17
    4106:	ae 2f       	mov	r26, r30
    4108:	8e ee       	ldi	r24, 0xEE	; 238
    410a:	91 e1       	ldi	r25, 0x11	; 17
    410c:	ac 01       	movw	r20, r24
    410e:	6a 2f       	mov	r22, r26
    4110:	80 91 2a 12 	lds	r24, 0x122A	; 0x80122a <_rn2483_serial>
    4114:	90 91 2b 12 	lds	r25, 0x122B	; 0x80122b <_rn2483_serial+0x1>
    4118:	67 d5       	rcall	.+2766   	; 0x4be8 <serial_sendBytes>
    411a:	81 11       	cpse	r24, r1
    411c:	11 c0       	rjmp	.+34     	; 0x4140 <_uploadMessage+0xa6>
    411e:	08 e2       	ldi	r16, 0x28	; 40
    4120:	15 e0       	ldi	r17, 0x05	; 5
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	4d e2       	ldi	r20, 0x2D	; 45
    4128:	50 e0       	ldi	r21, 0x00	; 0
    412a:	61 eb       	ldi	r22, 0xB1	; 177
    412c:	72 e1       	ldi	r23, 0x12	; 18
    412e:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_serialReplyBufferHandle>
    4132:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_serialReplyBufferHandle+0x1>
    4136:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <xStreamBufferReceive>
    413a:	81 eb       	ldi	r24, 0xB1	; 177
    413c:	92 e1       	ldi	r25, 0x12	; 18
    413e:	02 c0       	rjmp	.+4      	; 0x4144 <_uploadMessage+0xaa>
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	1f 91       	pop	r17
    414a:	0f 91       	pop	r16
    414c:	08 95       	ret

0000414e <_reply2ReturnCode>:
    414e:	2f 92       	push	r2
    4150:	3f 92       	push	r3
    4152:	4f 92       	push	r4
    4154:	5f 92       	push	r5
    4156:	6f 92       	push	r6
    4158:	7f 92       	push	r7
    415a:	8f 92       	push	r8
    415c:	9f 92       	push	r9
    415e:	af 92       	push	r10
    4160:	bf 92       	push	r11
    4162:	cf 92       	push	r12
    4164:	df 92       	push	r13
    4166:	ef 92       	push	r14
    4168:	ff 92       	push	r15
    416a:	0f 93       	push	r16
    416c:	1f 93       	push	r17
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
    4172:	5c 01       	movw	r10, r24
    4174:	fc 01       	movw	r30, r24
    4176:	01 90       	ld	r0, Z+
    4178:	00 20       	and	r0, r0
    417a:	e9 f7       	brne	.-6      	; 0x4176 <_reply2ReturnCode+0x28>
    417c:	31 97       	sbiw	r30, 0x01	; 1
    417e:	6f 01       	movw	r12, r30
    4180:	c8 1a       	sub	r12, r24
    4182:	d9 0a       	sbc	r13, r25
    4184:	5c 2c       	mov	r5, r12
    4186:	0f 2e       	mov	r0, r31
    4188:	f8 ee       	ldi	r31, 0xE8	; 232
    418a:	8f 2e       	mov	r8, r31
    418c:	f6 e0       	ldi	r31, 0x06	; 6
    418e:	9f 2e       	mov	r9, r31
    4190:	f0 2d       	mov	r31, r0
    4192:	e1 2c       	mov	r14, r1
    4194:	f1 2c       	mov	r15, r1
    4196:	4c 2c       	mov	r4, r12
    4198:	37 01       	movw	r6, r14
    419a:	f4 01       	movw	r30, r8
    419c:	01 81       	ldd	r16, Z+1	; 0x01
    419e:	12 81       	ldd	r17, Z+2	; 0x02
    41a0:	e8 01       	movw	r28, r16
    41a2:	09 90       	ld	r0, Y+
    41a4:	00 20       	and	r0, r0
    41a6:	e9 f7       	brne	.-6      	; 0x41a2 <_reply2ReturnCode+0x54>
    41a8:	21 97       	sbiw	r28, 0x01	; 1
    41aa:	c0 1b       	sub	r28, r16
    41ac:	d1 0b       	sbc	r29, r17
    41ae:	3c 2e       	mov	r3, r28
    41b0:	f9 e0       	ldi	r31, 0x09	; 9
    41b2:	cf 16       	cp	r12, r31
    41b4:	d1 04       	cpc	r13, r1
    41b6:	58 f0       	brcs	.+22     	; 0x41ce <_reply2ReturnCode+0x80>
    41b8:	f4 01       	movw	r30, r8
    41ba:	20 80       	ld	r2, Z
    41bc:	fe e0       	ldi	r31, 0x0E	; 14
    41be:	2f 12       	cpse	r2, r31
    41c0:	06 c0       	rjmp	.+12     	; 0x41ce <_reply2ReturnCode+0x80>
    41c2:	b8 01       	movw	r22, r16
    41c4:	c5 01       	movw	r24, r10
    41c6:	0e 94 4a 31 	call	0x6294	; 0x6294 <strcasestr>
    41ca:	89 2b       	or	r24, r25
    41cc:	09 f5       	brne	.+66     	; 0x4210 <_reply2ReturnCode+0xc2>
    41ce:	44 2d       	mov	r20, r4
    41d0:	35 14       	cp	r3, r5
    41d2:	08 f4       	brcc	.+2      	; 0x41d6 <_reply2ReturnCode+0x88>
    41d4:	4c 2f       	mov	r20, r28
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	b8 01       	movw	r22, r16
    41da:	c5 01       	movw	r24, r10
    41dc:	0e 94 81 31 	call	0x6302	; 0x6302 <strncasecmp>
    41e0:	89 2b       	or	r24, r25
    41e2:	49 f4       	brne	.+18     	; 0x41f6 <_reply2ReturnCode+0xa8>
    41e4:	f3 01       	movw	r30, r6
    41e6:	ee 0f       	add	r30, r30
    41e8:	ff 1f       	adc	r31, r31
    41ea:	e6 0d       	add	r30, r6
    41ec:	f7 1d       	adc	r31, r7
    41ee:	e8 51       	subi	r30, 0x18	; 24
    41f0:	f9 4f       	sbci	r31, 0xF9	; 249
    41f2:	20 80       	ld	r2, Z
    41f4:	0d c0       	rjmp	.+26     	; 0x4210 <_reply2ReturnCode+0xc2>
    41f6:	8f ef       	ldi	r24, 0xFF	; 255
    41f8:	e8 1a       	sub	r14, r24
    41fa:	f8 0a       	sbc	r15, r24
    41fc:	e3 e0       	ldi	r30, 0x03	; 3
    41fe:	8e 0e       	add	r8, r30
    4200:	91 1c       	adc	r9, r1
    4202:	f1 e1       	ldi	r31, 0x11	; 17
    4204:	ef 16       	cp	r14, r31
    4206:	f1 04       	cpc	r15, r1
    4208:	39 f6       	brne	.-114    	; 0x4198 <_reply2ReturnCode+0x4a>
    420a:	68 94       	set
    420c:	22 24       	eor	r2, r2
    420e:	24 f8       	bld	r2, 4
    4210:	82 2d       	mov	r24, r2
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	ff 90       	pop	r15
    421c:	ef 90       	pop	r14
    421e:	df 90       	pop	r13
    4220:	cf 90       	pop	r12
    4222:	bf 90       	pop	r11
    4224:	af 90       	pop	r10
    4226:	9f 90       	pop	r9
    4228:	8f 90       	pop	r8
    422a:	7f 90       	pop	r7
    422c:	6f 90       	pop	r6
    422e:	5f 90       	pop	r5
    4230:	4f 90       	pop	r4
    4232:	3f 90       	pop	r3
    4234:	2f 90       	pop	r2
    4236:	08 95       	ret

00004238 <_uploadMessageRc>:
    4238:	30 df       	rcall	.-416    	; 0x409a <_uploadMessage>
    423a:	89 cf       	rjmp	.-238    	; 0x414e <_reply2ReturnCode>
    423c:	08 95       	ret

0000423e <lora_driver_flushBuffers>:
    423e:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_serialReplyBufferHandle>
    4242:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_serialReplyBufferHandle+0x1>
    4246:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <xStreamBufferReset>
    424a:	08 95       	ret

0000424c <lora_driver_initialise>:
    424c:	8f 92       	push	r8
    424e:	9f 92       	push	r9
    4250:	af 92       	push	r10
    4252:	cf 92       	push	r12
    4254:	ef 92       	push	r14
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	c8 2f       	mov	r28, r24
    425e:	8b 01       	movw	r16, r22
    4260:	41 e0       	ldi	r20, 0x01	; 1
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	70 e0       	ldi	r23, 0x00	; 0
    4266:	88 ec       	ldi	r24, 0xC8	; 200
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <xStreamBufferGenericCreate>
    426e:	90 93 29 12 	sts	0x1229, r25	; 0x801229 <_serialReplyBufferHandle+0x1>
    4272:	80 93 28 12 	sts	0x1228, r24	; 0x801228 <_serialReplyBufferHandle>
    4276:	10 93 27 12 	sts	0x1227, r17	; 0x801227 <_downlinkMessageBuffer+0x1>
    427a:	00 93 26 12 	sts	0x1226, r16	; 0x801226 <_downlinkMessageBuffer>
    427e:	0f 2e       	mov	r0, r31
    4280:	f7 e0       	ldi	r31, 0x07	; 7
    4282:	8f 2e       	mov	r8, r31
    4284:	f0 e2       	ldi	r31, 0x20	; 32
    4286:	9f 2e       	mov	r9, r31
    4288:	f0 2d       	mov	r31, r0
    428a:	68 94       	set
    428c:	aa 24       	eor	r10, r10
    428e:	a6 f8       	bld	r10, 6
    4290:	68 94       	set
    4292:	cc 24       	eor	r12, r12
    4294:	c6 f8       	bld	r12, 6
    4296:	e1 2c       	mov	r14, r1
    4298:	00 e0       	ldi	r16, 0x00	; 0
    429a:	23 e0       	ldi	r18, 0x03	; 3
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	51 ee       	ldi	r21, 0xE1	; 225
    42a0:	60 e0       	ldi	r22, 0x00	; 0
    42a2:	70 e0       	ldi	r23, 0x00	; 0
    42a4:	8c 2f       	mov	r24, r28
    42a6:	d2 d3       	rcall	.+1956   	; 0x4a4c <serial_create>
    42a8:	90 93 2b 12 	sts	0x122B, r25	; 0x80122b <_rn2483_serial+0x1>
    42ac:	80 93 2a 12 	sts	0x122A, r24	; 0x80122a <_rn2483_serial>
    42b0:	e7 e0       	ldi	r30, 0x07	; 7
    42b2:	f1 e0       	ldi	r31, 0x01	; 1
    42b4:	80 81       	ld	r24, Z
    42b6:	80 61       	ori	r24, 0x10	; 16
    42b8:	80 83       	st	Z, r24
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	ef 90       	pop	r14
    42c2:	cf 90       	pop	r12
    42c4:	af 90       	pop	r10
    42c6:	9f 90       	pop	r9
    42c8:	8f 90       	pop	r8
    42ca:	08 95       	ret

000042cc <lora_driver_resetRn2483>:
    42cc:	88 23       	and	r24, r24
    42ce:	31 f0       	breq	.+12     	; 0x42dc <lora_driver_resetRn2483+0x10>
    42d0:	e8 e0       	ldi	r30, 0x08	; 8
    42d2:	f1 e0       	ldi	r31, 0x01	; 1
    42d4:	80 81       	ld	r24, Z
    42d6:	8f 7e       	andi	r24, 0xEF	; 239
    42d8:	80 83       	st	Z, r24
    42da:	08 95       	ret
    42dc:	e8 e0       	ldi	r30, 0x08	; 8
    42de:	f1 e0       	ldi	r31, 0x01	; 1
    42e0:	80 81       	ld	r24, Z
    42e2:	80 61       	ori	r24, 0x10	; 16
    42e4:	80 83       	st	Z, r24
    42e6:	08 95       	ret

000042e8 <lora_driver_rn2483FactoryReset>:
    42e8:	60 e0       	ldi	r22, 0x00	; 0
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	8e e6       	ldi	r24, 0x6E	; 110
    42ee:	94 e0       	ldi	r25, 0x04	; 4
    42f0:	d4 de       	rcall	.-600    	; 0x409a <_uploadMessage>
    42f2:	e1 eb       	ldi	r30, 0xB1	; 177
    42f4:	f2 e1       	ldi	r31, 0x12	; 18
    42f6:	01 90       	ld	r0, Z+
    42f8:	00 20       	and	r0, r0
    42fa:	e9 f7       	brne	.-6      	; 0x42f6 <lora_driver_rn2483FactoryReset+0xe>
    42fc:	31 97       	sbiw	r30, 0x01	; 1
    42fe:	e1 5b       	subi	r30, 0xB1	; 177
    4300:	f2 41       	sbci	r31, 0x12	; 18
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	75 97       	sbiw	r30, 0x15	; 21
    4306:	08 f0       	brcs	.+2      	; 0x430a <lora_driver_rn2483FactoryReset+0x22>
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	08 95       	ret

0000430c <lora_driver_getRn2483Hweui>:
    430c:	cf 93       	push	r28
    430e:	df 93       	push	r29
    4310:	ec 01       	movw	r28, r24
    4312:	60 e0       	ldi	r22, 0x00	; 0
    4314:	70 e0       	ldi	r23, 0x00	; 0
    4316:	8f e7       	ldi	r24, 0x7F	; 127
    4318:	94 e0       	ldi	r25, 0x04	; 4
    431a:	bf de       	rcall	.-642    	; 0x409a <_uploadMessage>
    431c:	e1 eb       	ldi	r30, 0xB1	; 177
    431e:	f2 e1       	ldi	r31, 0x12	; 18
    4320:	01 90       	ld	r0, Z+
    4322:	00 20       	and	r0, r0
    4324:	e9 f7       	brne	.-6      	; 0x4320 <lora_driver_getRn2483Hweui+0x14>
    4326:	e2 5c       	subi	r30, 0xC2	; 194
    4328:	f2 41       	sbci	r31, 0x12	; 18
    432a:	39 f4       	brne	.+14     	; 0x433a <lora_driver_getRn2483Hweui+0x2e>
    432c:	61 eb       	ldi	r22, 0xB1	; 177
    432e:	72 e1       	ldi	r23, 0x12	; 18
    4330:	ce 01       	movw	r24, r28
    4332:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <strcpy>
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	02 c0       	rjmp	.+4      	; 0x433e <lora_driver_getRn2483Hweui+0x32>
    433a:	18 82       	st	Y, r1
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	08 95       	ret

00004344 <lora_driver_setDeviceIdentifier>:
    4344:	fc 01       	movw	r30, r24
    4346:	01 90       	ld	r0, Z+
    4348:	00 20       	and	r0, r0
    434a:	e9 f7       	brne	.-6      	; 0x4346 <lora_driver_setDeviceIdentifier+0x2>
    434c:	9f 01       	movw	r18, r30
    434e:	21 51       	subi	r18, 0x11	; 17
    4350:	31 09       	sbc	r19, r1
    4352:	28 17       	cp	r18, r24
    4354:	39 07       	cpc	r19, r25
    4356:	29 f4       	brne	.+10     	; 0x4362 <lora_driver_setDeviceIdentifier+0x1e>
    4358:	bc 01       	movw	r22, r24
    435a:	8d ea       	ldi	r24, 0xAD	; 173
    435c:	94 e0       	ldi	r25, 0x04	; 4
    435e:	6c cf       	rjmp	.-296    	; 0x4238 <_uploadMessageRc>
    4360:	08 95       	ret
    4362:	89 e0       	ldi	r24, 0x09	; 9
    4364:	08 95       	ret

00004366 <lora_driver_setApplicationIdentifier>:
    4366:	fc 01       	movw	r30, r24
    4368:	01 90       	ld	r0, Z+
    436a:	00 20       	and	r0, r0
    436c:	e9 f7       	brne	.-6      	; 0x4368 <lora_driver_setApplicationIdentifier+0x2>
    436e:	9f 01       	movw	r18, r30
    4370:	21 51       	subi	r18, 0x11	; 17
    4372:	31 09       	sbc	r19, r1
    4374:	28 17       	cp	r18, r24
    4376:	39 07       	cpc	r19, r25
    4378:	29 f4       	brne	.+10     	; 0x4384 <lora_driver_setApplicationIdentifier+0x1e>
    437a:	bc 01       	movw	r22, r24
    437c:	8c eb       	ldi	r24, 0xBC	; 188
    437e:	94 e0       	ldi	r25, 0x04	; 4
    4380:	5b cf       	rjmp	.-330    	; 0x4238 <_uploadMessageRc>
    4382:	08 95       	ret
    4384:	89 e0       	ldi	r24, 0x09	; 9
    4386:	08 95       	ret

00004388 <lora_driver_setApplicationKey>:
    4388:	fc 01       	movw	r30, r24
    438a:	01 90       	ld	r0, Z+
    438c:	00 20       	and	r0, r0
    438e:	e9 f7       	brne	.-6      	; 0x438a <lora_driver_setApplicationKey+0x2>
    4390:	9f 01       	movw	r18, r30
    4392:	21 52       	subi	r18, 0x21	; 33
    4394:	31 09       	sbc	r19, r1
    4396:	28 17       	cp	r18, r24
    4398:	39 07       	cpc	r19, r25
    439a:	29 f4       	brne	.+10     	; 0x43a6 <lora_driver_setApplicationKey+0x1e>
    439c:	bc 01       	movw	r22, r24
    439e:	8b ec       	ldi	r24, 0xCB	; 203
    43a0:	94 e0       	ldi	r25, 0x04	; 4
    43a2:	4a cf       	rjmp	.-364    	; 0x4238 <_uploadMessageRc>
    43a4:	08 95       	ret
    43a6:	89 e0       	ldi	r24, 0x09	; 9
    43a8:	08 95       	ret

000043aa <lora_driver_saveMac>:
    43aa:	60 e0       	ldi	r22, 0x00	; 0
    43ac:	70 e0       	ldi	r23, 0x00	; 0
    43ae:	8a e0       	ldi	r24, 0x0A	; 10
    43b0:	95 e0       	ldi	r25, 0x05	; 5
    43b2:	42 cf       	rjmp	.-380    	; 0x4238 <_uploadMessageRc>
    43b4:	08 95       	ret

000043b6 <lora_driver_join>:
    43b6:	0f 93       	push	r16
    43b8:	1f 93       	push	r17
    43ba:	e8 2f       	mov	r30, r24
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	ee 0f       	add	r30, r30
    43c0:	ff 1f       	adc	r31, r31
    43c2:	ec 51       	subi	r30, 0x1C	; 28
    43c4:	f9 4f       	sbci	r31, 0xF9	; 249
    43c6:	60 81       	ld	r22, Z
    43c8:	71 81       	ldd	r23, Z+1	; 0x01
    43ca:	83 e1       	ldi	r24, 0x13	; 19
    43cc:	95 e0       	ldi	r25, 0x05	; 5
    43ce:	34 df       	rcall	.-408    	; 0x4238 <_uploadMessageRc>
    43d0:	81 11       	cpse	r24, r1
    43d2:	14 c0       	rjmp	.+40     	; 0x43fc <lora_driver_join+0x46>
    43d4:	08 e2       	ldi	r16, 0x28	; 40
    43d6:	15 e0       	ldi	r17, 0x05	; 5
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	4d e2       	ldi	r20, 0x2D	; 45
    43de:	50 e0       	ldi	r21, 0x00	; 0
    43e0:	61 eb       	ldi	r22, 0xB1	; 177
    43e2:	72 e1       	ldi	r23, 0x12	; 18
    43e4:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_serialReplyBufferHandle>
    43e8:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_serialReplyBufferHandle+0x1>
    43ec:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <xStreamBufferReceive>
    43f0:	88 23       	and	r24, r24
    43f2:	21 f0       	breq	.+8      	; 0x43fc <lora_driver_join+0x46>
    43f4:	81 eb       	ldi	r24, 0xB1	; 177
    43f6:	92 e1       	ldi	r25, 0x12	; 18
    43f8:	aa de       	rcall	.-684    	; 0x414e <_reply2ReturnCode>
    43fa:	03 c0       	rjmp	.+6      	; 0x4402 <lora_driver_join+0x4c>
    43fc:	81 eb       	ldi	r24, 0xB1	; 177
    43fe:	92 e1       	ldi	r25, 0x12	; 18
    4400:	a6 de       	rcall	.-692    	; 0x414e <_reply2ReturnCode>
    4402:	1f 91       	pop	r17
    4404:	0f 91       	pop	r16
    4406:	08 95       	ret

00004408 <lora_driver_sendUploadMessage>:
    4408:	0f 93       	push	r16
    440a:	1f 93       	push	r17
    440c:	cf 93       	push	r28
    440e:	df 93       	push	r29
    4410:	1f 92       	push	r1
    4412:	cd b7       	in	r28, 0x3d	; 61
    4414:	de b7       	in	r29, 0x3e	; 62
    4416:	db 01       	movw	r26, r22
    4418:	11 96       	adiw	r26, 0x01	; 1
    441a:	9c 91       	ld	r25, X
    441c:	11 97       	sbiw	r26, 0x01	; 1
    441e:	95 31       	cpi	r25, 0x15	; 21
    4420:	08 f0       	brcs	.+2      	; 0x4424 <lora_driver_sendUploadMessage+0x1c>
    4422:	b4 c0       	rjmp	.+360    	; 0x458c <lora_driver_sendUploadMessage+0x184>
    4424:	99 23       	and	r25, r25
    4426:	81 f1       	breq	.+96     	; 0x4488 <lora_driver_sendUploadMessage+0x80>
    4428:	60 e0       	ldi	r22, 0x00	; 0
    442a:	70 e0       	ldi	r23, 0x00	; 0
    442c:	27 2f       	mov	r18, r23
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	46 2f       	mov	r20, r22
    4432:	50 e0       	ldi	r21, 0x00	; 0
    4434:	fd 01       	movw	r30, r26
    4436:	e4 0f       	add	r30, r20
    4438:	f5 1f       	adc	r31, r21
    443a:	92 81       	ldd	r25, Z+2	; 0x02
    443c:	92 95       	swap	r25
    443e:	9f 70       	andi	r25, 0x0F	; 15
    4440:	9a 30       	cpi	r25, 0x0A	; 10
    4442:	10 f0       	brcs	.+4      	; 0x4448 <lora_driver_sendUploadMessage+0x40>
    4444:	99 5c       	subi	r25, 0xC9	; 201
    4446:	01 c0       	rjmp	.+2      	; 0x444a <lora_driver_sendUploadMessage+0x42>
    4448:	90 5d       	subi	r25, 0xD0	; 208
    444a:	f9 01       	movw	r30, r18
    444c:	ee 5b       	subi	r30, 0xBE	; 190
    444e:	fd 4e       	sbci	r31, 0xED	; 237
    4450:	90 83       	st	Z, r25
    4452:	2f 5f       	subi	r18, 0xFF	; 255
    4454:	3f 4f       	sbci	r19, 0xFF	; 255
    4456:	fd 01       	movw	r30, r26
    4458:	e4 0f       	add	r30, r20
    445a:	f5 1f       	adc	r31, r21
    445c:	92 81       	ldd	r25, Z+2	; 0x02
    445e:	9f 70       	andi	r25, 0x0F	; 15
    4460:	49 2f       	mov	r20, r25
    4462:	50 e0       	ldi	r21, 0x00	; 0
    4464:	4a 30       	cpi	r20, 0x0A	; 10
    4466:	51 05       	cpc	r21, r1
    4468:	14 f0       	brlt	.+4      	; 0x446e <lora_driver_sendUploadMessage+0x66>
    446a:	99 5c       	subi	r25, 0xC9	; 201
    446c:	01 c0       	rjmp	.+2      	; 0x4470 <lora_driver_sendUploadMessage+0x68>
    446e:	90 5d       	subi	r25, 0xD0	; 208
    4470:	f9 01       	movw	r30, r18
    4472:	ee 5b       	subi	r30, 0xBE	; 190
    4474:	fd 4e       	sbci	r31, 0xED	; 237
    4476:	90 83       	st	Z, r25
    4478:	7e 5f       	subi	r23, 0xFE	; 254
    447a:	6f 5f       	subi	r22, 0xFF	; 255
    447c:	11 96       	adiw	r26, 0x01	; 1
    447e:	9c 91       	ld	r25, X
    4480:	11 97       	sbiw	r26, 0x01	; 1
    4482:	69 17       	cp	r22, r25
    4484:	98 f2       	brcs	.-90     	; 0x442c <lora_driver_sendUploadMessage+0x24>
    4486:	01 c0       	rjmp	.+2      	; 0x448a <lora_driver_sendUploadMessage+0x82>
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	e7 2f       	mov	r30, r23
    448c:	f0 e0       	ldi	r31, 0x00	; 0
    448e:	ee 5b       	subi	r30, 0xBE	; 190
    4490:	fd 4e       	sbci	r31, 0xED	; 237
    4492:	10 82       	st	Z, r1
    4494:	4c 91       	ld	r20, X
    4496:	81 11       	cpse	r24, r1
    4498:	03 c0       	rjmp	.+6      	; 0x44a0 <lora_driver_sendUploadMessage+0x98>
    449a:	8c e1       	ldi	r24, 0x1C	; 28
    449c:	95 e0       	ldi	r25, 0x05	; 5
    449e:	02 c0       	rjmp	.+4      	; 0x44a4 <lora_driver_sendUploadMessage+0x9c>
    44a0:	8e e1       	ldi	r24, 0x1E	; 30
    44a2:	95 e0       	ldi	r25, 0x05	; 5
    44a4:	22 e4       	ldi	r18, 0x42	; 66
    44a6:	32 e1       	ldi	r19, 0x12	; 18
    44a8:	3f 93       	push	r19
    44aa:	2f 93       	push	r18
    44ac:	1f 92       	push	r1
    44ae:	4f 93       	push	r20
    44b0:	9f 93       	push	r25
    44b2:	8f 93       	push	r24
    44b4:	82 e2       	ldi	r24, 0x22	; 34
    44b6:	95 e0       	ldi	r25, 0x05	; 5
    44b8:	9f 93       	push	r25
    44ba:	8f 93       	push	r24
    44bc:	84 e8       	ldi	r24, 0x84	; 132
    44be:	92 e1       	ldi	r25, 0x12	; 18
    44c0:	9f 93       	push	r25
    44c2:	8f 93       	push	r24
    44c4:	0e 94 23 32 	call	0x6446	; 0x6446 <sprintf>
    44c8:	60 e0       	ldi	r22, 0x00	; 0
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	84 e8       	ldi	r24, 0x84	; 132
    44ce:	92 e1       	ldi	r25, 0x12	; 18
    44d0:	b3 de       	rcall	.-666    	; 0x4238 <_uploadMessageRc>
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	cd bf       	out	0x3d, r28	; 61
    44dc:	81 11       	cpse	r24, r1
    44de:	59 c0       	rjmp	.+178    	; 0x4592 <lora_driver_sendUploadMessage+0x18a>
    44e0:	08 e2       	ldi	r16, 0x28	; 40
    44e2:	15 e0       	ldi	r17, 0x05	; 5
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	4d e2       	ldi	r20, 0x2D	; 45
    44ea:	50 e0       	ldi	r21, 0x00	; 0
    44ec:	61 eb       	ldi	r22, 0xB1	; 177
    44ee:	72 e1       	ldi	r23, 0x12	; 18
    44f0:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <_serialReplyBufferHandle>
    44f4:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <_serialReplyBufferHandle+0x1>
    44f8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <xStreamBufferReceive>
    44fc:	88 23       	and	r24, r24
    44fe:	09 f4       	brne	.+2      	; 0x4502 <lora_driver_sendUploadMessage+0xfa>
    4500:	47 c0       	rjmp	.+142    	; 0x4590 <lora_driver_sendUploadMessage+0x188>
    4502:	81 eb       	ldi	r24, 0xB1	; 177
    4504:	92 e1       	ldi	r25, 0x12	; 18
    4506:	23 de       	rcall	.-954    	; 0x414e <_reply2ReturnCode>
    4508:	8e 30       	cpi	r24, 0x0E	; 14
    450a:	09 f0       	breq	.+2      	; 0x450e <lora_driver_sendUploadMessage+0x106>
    450c:	42 c0       	rjmp	.+132    	; 0x4592 <lora_driver_sendUploadMessage+0x18a>
    450e:	87 e0       	ldi	r24, 0x07	; 7
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <_downlinkMessageBuffer>
    4516:	90 91 27 12 	lds	r25, 0x1227	; 0x801227 <_downlinkMessageBuffer+0x1>
    451a:	89 2b       	or	r24, r25
    451c:	a9 f1       	breq	.+106    	; 0x4588 <lora_driver_sendUploadMessage+0x180>
    451e:	be 01       	movw	r22, r28
    4520:	6f 5f       	subi	r22, 0xFF	; 255
    4522:	7f 4f       	sbci	r23, 0xFF	; 255
    4524:	81 eb       	ldi	r24, 0xB1	; 177
    4526:	92 e1       	ldi	r25, 0x12	; 18
    4528:	68 d1       	rcall	.+720    	; 0x47fa <decode_port_no>
    452a:	80 93 2c 12 	sts	0x122C, r24	; 0x80122c <_downlinkPayload>
    452e:	e9 81       	ldd	r30, Y+1	; 0x01
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	ef 54       	subi	r30, 0x4F	; 79
    4534:	fd 4e       	sbci	r31, 0xED	; 237
    4536:	df 01       	movw	r26, r30
    4538:	0d 90       	ld	r0, X+
    453a:	00 20       	and	r0, r0
    453c:	e9 f7       	brne	.-6      	; 0x4538 <lora_driver_sendUploadMessage+0x130>
    453e:	11 97       	sbiw	r26, 0x01	; 1
    4540:	ae 1b       	sub	r26, r30
    4542:	bf 0b       	sbc	r27, r31
    4544:	aa 23       	and	r26, r26
    4546:	91 f0       	breq	.+36     	; 0x456c <lora_driver_sendUploadMessage+0x164>
    4548:	bb 27       	eor	r27, r27
    454a:	cd 01       	movw	r24, r26
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	9c 01       	movw	r18, r24
    4550:	12 f4       	brpl	.+4      	; 0x4556 <lora_driver_sendUploadMessage+0x14e>
    4552:	2f 5f       	subi	r18, 0xFF	; 255
    4554:	3f 4f       	sbci	r19, 0xFF	; 255
    4556:	35 95       	asr	r19
    4558:	27 95       	ror	r18
    455a:	20 93 2d 12 	sts	0x122D, r18	; 0x80122d <_downlinkPayload+0x1>
    455e:	af 01       	movw	r20, r30
    4560:	4f 5f       	subi	r20, 0xFF	; 255
    4562:	5f 4f       	sbci	r21, 0xFF	; 255
    4564:	64 e1       	ldi	r22, 0x14	; 20
    4566:	8e e2       	ldi	r24, 0x2E	; 46
    4568:	92 e1       	ldi	r25, 0x12	; 18
    456a:	73 d1       	rcall	.+742    	; 0x4852 <decode_hexadecimal_string_bytes>
    456c:	01 e0       	ldi	r16, 0x01	; 1
    456e:	10 e0       	ldi	r17, 0x00	; 0
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	46 e1       	ldi	r20, 0x16	; 22
    4576:	50 e0       	ldi	r21, 0x00	; 0
    4578:	6c e2       	ldi	r22, 0x2C	; 44
    457a:	72 e1       	ldi	r23, 0x12	; 18
    457c:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <_downlinkMessageBuffer>
    4580:	90 91 27 12 	lds	r25, 0x1227	; 0x801227 <_downlinkMessageBuffer+0x1>
    4584:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <xStreamBufferSend>
    4588:	8e e0       	ldi	r24, 0x0E	; 14
    458a:	03 c0       	rjmp	.+6      	; 0x4592 <lora_driver_sendUploadMessage+0x18a>
    458c:	84 e1       	ldi	r24, 0x14	; 20
    458e:	01 c0       	rjmp	.+2      	; 0x4592 <lora_driver_sendUploadMessage+0x18a>
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	0f 90       	pop	r0
    4594:	df 91       	pop	r29
    4596:	cf 91       	pop	r28
    4598:	1f 91       	pop	r17
    459a:	0f 91       	pop	r16
    459c:	08 95       	ret

0000459e <lora_driver_setAdaptiveDataRate>:
    459e:	81 30       	cpi	r24, 0x01	; 1
    45a0:	19 f0       	breq	.+6      	; 0x45a8 <lora_driver_setAdaptiveDataRate+0xa>
    45a2:	62 e3       	ldi	r22, 0x32	; 50
    45a4:	75 e0       	ldi	r23, 0x05	; 5
    45a6:	02 c0       	rjmp	.+4      	; 0x45ac <lora_driver_setAdaptiveDataRate+0xe>
    45a8:	6b e0       	ldi	r22, 0x0B	; 11
    45aa:	76 e0       	ldi	r23, 0x06	; 6
    45ac:	86 e3       	ldi	r24, 0x36	; 54
    45ae:	95 e0       	ldi	r25, 0x05	; 5
    45b0:	43 ce       	rjmp	.-890    	; 0x4238 <_uploadMessageRc>
    45b2:	08 95       	ret

000045b4 <lora_driver_setReceiveDelay>:
    45b4:	9f 93       	push	r25
    45b6:	8f 93       	push	r24
    45b8:	87 e6       	ldi	r24, 0x67	; 103
    45ba:	95 e0       	ldi	r25, 0x05	; 5
    45bc:	9f 93       	push	r25
    45be:	8f 93       	push	r24
    45c0:	84 e8       	ldi	r24, 0x84	; 132
    45c2:	92 e1       	ldi	r25, 0x12	; 18
    45c4:	9f 93       	push	r25
    45c6:	8f 93       	push	r24
    45c8:	0e 94 23 32 	call	0x6446	; 0x6446 <sprintf>
    45cc:	60 e0       	ldi	r22, 0x00	; 0
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	84 e8       	ldi	r24, 0x84	; 132
    45d2:	92 e1       	ldi	r25, 0x12	; 18
    45d4:	31 de       	rcall	.-926    	; 0x4238 <_uploadMessageRc>
    45d6:	0f 90       	pop	r0
    45d8:	0f 90       	pop	r0
    45da:	0f 90       	pop	r0
    45dc:	0f 90       	pop	r0
    45de:	0f 90       	pop	r0
    45e0:	0f 90       	pop	r0
    45e2:	08 95       	ret

000045e4 <lora_driver_configureToEu868>:
    45e4:	2f 92       	push	r2
    45e6:	3f 92       	push	r3
    45e8:	4f 92       	push	r4
    45ea:	5f 92       	push	r5
    45ec:	6f 92       	push	r6
    45ee:	7f 92       	push	r7
    45f0:	8f 92       	push	r8
    45f2:	9f 92       	push	r9
    45f4:	af 92       	push	r10
    45f6:	bf 92       	push	r11
    45f8:	cf 92       	push	r12
    45fa:	df 92       	push	r13
    45fc:	ef 92       	push	r14
    45fe:	ff 92       	push	r15
    4600:	0f 93       	push	r16
    4602:	1f 93       	push	r17
    4604:	cf 93       	push	r28
    4606:	df 93       	push	r29
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
    460c:	a0 97       	sbiw	r28, 0x20	; 32
    460e:	0f b6       	in	r0, 0x3f	; 63
    4610:	f8 94       	cli
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	cd bf       	out	0x3d, r28	; 61
    4618:	64 e9       	ldi	r22, 0x94	; 148
    461a:	75 e0       	ldi	r23, 0x05	; 5
    461c:	80 ea       	ldi	r24, 0xA0	; 160
    461e:	95 e0       	ldi	r25, 0x05	; 5
    4620:	3c dd       	rcall	.-1416   	; 0x409a <_uploadMessage>
    4622:	95 dd       	rcall	.-1238   	; 0x414e <_reply2ReturnCode>
    4624:	81 11       	cpse	r24, r1
    4626:	a3 c0       	rjmp	.+326    	; 0x476e <lora_driver_configureToEu868+0x18a>
    4628:	80 e2       	ldi	r24, 0x20	; 32
    462a:	e2 e2       	ldi	r30, 0x22	; 34
    462c:	f2 e0       	ldi	r31, 0x02	; 2
    462e:	de 01       	movw	r26, r28
    4630:	11 96       	adiw	r26, 0x01	; 1
    4632:	01 90       	ld	r0, Z+
    4634:	0d 92       	st	X+, r0
    4636:	8a 95       	dec	r24
    4638:	e1 f7       	brne	.-8      	; 0x4632 <lora_driver_configureToEu868+0x4e>
    463a:	9e 01       	movw	r18, r28
    463c:	2f 5f       	subi	r18, 0xFF	; 255
    463e:	3f 4f       	sbci	r19, 0xFF	; 255
    4640:	69 01       	movw	r12, r18
    4642:	e1 2c       	mov	r14, r1
    4644:	f1 2c       	mov	r15, r1
    4646:	0f 2e       	mov	r0, r31
    4648:	fc ea       	ldi	r31, 0xAC	; 172
    464a:	af 2e       	mov	r10, r31
    464c:	f5 e0       	ldi	r31, 0x05	; 5
    464e:	bf 2e       	mov	r11, r31
    4650:	f0 2d       	mov	r31, r0
    4652:	04 e8       	ldi	r16, 0x84	; 132
    4654:	12 e1       	ldi	r17, 0x12	; 18
    4656:	0f 2e       	mov	r0, r31
    4658:	f5 ec       	ldi	r31, 0xC5	; 197
    465a:	4f 2e       	mov	r4, r31
    465c:	f5 e0       	ldi	r31, 0x05	; 5
    465e:	5f 2e       	mov	r5, r31
    4660:	f0 2d       	mov	r31, r0
    4662:	0f 2e       	mov	r0, r31
    4664:	fc ed       	ldi	r31, 0xDC	; 220
    4666:	8f 2e       	mov	r8, r31
    4668:	f5 e0       	ldi	r31, 0x05	; 5
    466a:	9f 2e       	mov	r9, r31
    466c:	f0 2d       	mov	r31, r0
    466e:	0f 2e       	mov	r0, r31
    4670:	f6 ef       	ldi	r31, 0xF6	; 246
    4672:	6f 2e       	mov	r6, r31
    4674:	f5 e0       	ldi	r31, 0x05	; 5
    4676:	7f 2e       	mov	r7, r31
    4678:	f0 2d       	mov	r31, r0
    467a:	3e 2c       	mov	r3, r14
    467c:	2f 2c       	mov	r2, r15
    467e:	ff 92       	push	r15
    4680:	ef 92       	push	r14
    4682:	bf 92       	push	r11
    4684:	af 92       	push	r10
    4686:	1f 93       	push	r17
    4688:	0f 93       	push	r16
    468a:	0e 94 23 32 	call	0x6446	; 0x6446 <sprintf>
    468e:	60 e0       	ldi	r22, 0x00	; 0
    4690:	70 e0       	ldi	r23, 0x00	; 0
    4692:	c8 01       	movw	r24, r16
    4694:	02 dd       	rcall	.-1532   	; 0x409a <_uploadMessage>
    4696:	5b dd       	rcall	.-1354   	; 0x414e <_reply2ReturnCode>
    4698:	0f 90       	pop	r0
    469a:	0f 90       	pop	r0
    469c:	0f 90       	pop	r0
    469e:	0f 90       	pop	r0
    46a0:	0f 90       	pop	r0
    46a2:	0f 90       	pop	r0
    46a4:	81 11       	cpse	r24, r1
    46a6:	63 c0       	rjmp	.+198    	; 0x476e <lora_driver_configureToEu868+0x18a>
    46a8:	32 e0       	ldi	r19, 0x02	; 2
    46aa:	3e 15       	cp	r19, r14
    46ac:	e8 f4       	brcc	.+58     	; 0x46e8 <lora_driver_configureToEu868+0x104>
    46ae:	f6 01       	movw	r30, r12
    46b0:	83 81       	ldd	r24, Z+3	; 0x03
    46b2:	8f 93       	push	r24
    46b4:	82 81       	ldd	r24, Z+2	; 0x02
    46b6:	8f 93       	push	r24
    46b8:	81 81       	ldd	r24, Z+1	; 0x01
    46ba:	8f 93       	push	r24
    46bc:	80 81       	ld	r24, Z
    46be:	8f 93       	push	r24
    46c0:	ff 92       	push	r15
    46c2:	ef 92       	push	r14
    46c4:	5f 92       	push	r5
    46c6:	4f 92       	push	r4
    46c8:	1f 93       	push	r17
    46ca:	0f 93       	push	r16
    46cc:	0e 94 23 32 	call	0x6446	; 0x6446 <sprintf>
    46d0:	60 e0       	ldi	r22, 0x00	; 0
    46d2:	70 e0       	ldi	r23, 0x00	; 0
    46d4:	c8 01       	movw	r24, r16
    46d6:	e1 dc       	rcall	.-1598   	; 0x409a <_uploadMessage>
    46d8:	3a dd       	rcall	.-1420   	; 0x414e <_reply2ReturnCode>
    46da:	0f b6       	in	r0, 0x3f	; 63
    46dc:	f8 94       	cli
    46de:	de bf       	out	0x3e, r29	; 62
    46e0:	0f be       	out	0x3f, r0	; 63
    46e2:	cd bf       	out	0x3d, r28	; 61
    46e4:	81 11       	cpse	r24, r1
    46e6:	43 c0       	rjmp	.+134    	; 0x476e <lora_driver_configureToEu868+0x18a>
    46e8:	2f 92       	push	r2
    46ea:	3f 92       	push	r3
    46ec:	9f 92       	push	r9
    46ee:	8f 92       	push	r8
    46f0:	1f 93       	push	r17
    46f2:	0f 93       	push	r16
    46f4:	0e 94 23 32 	call	0x6446	; 0x6446 <sprintf>
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	70 e0       	ldi	r23, 0x00	; 0
    46fc:	c8 01       	movw	r24, r16
    46fe:	cd dc       	rcall	.-1638   	; 0x409a <_uploadMessage>
    4700:	26 dd       	rcall	.-1460   	; 0x414e <_reply2ReturnCode>
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	0f 90       	pop	r0
    4708:	0f 90       	pop	r0
    470a:	0f 90       	pop	r0
    470c:	0f 90       	pop	r0
    470e:	81 11       	cpse	r24, r1
    4710:	2e c0       	rjmp	.+92     	; 0x476e <lora_driver_configureToEu868+0x18a>
    4712:	2f 92       	push	r2
    4714:	3f 92       	push	r3
    4716:	7f 92       	push	r7
    4718:	6f 92       	push	r6
    471a:	1f 93       	push	r17
    471c:	0f 93       	push	r16
    471e:	0e 94 23 32 	call	0x6446	; 0x6446 <sprintf>
    4722:	60 e0       	ldi	r22, 0x00	; 0
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	c8 01       	movw	r24, r16
    4728:	b8 dc       	rcall	.-1680   	; 0x409a <_uploadMessage>
    472a:	11 dd       	rcall	.-1502   	; 0x414e <_reply2ReturnCode>
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	0f 90       	pop	r0
    4734:	0f 90       	pop	r0
    4736:	0f 90       	pop	r0
    4738:	81 11       	cpse	r24, r1
    473a:	19 c0       	rjmp	.+50     	; 0x476e <lora_driver_configureToEu868+0x18a>
    473c:	3f ef       	ldi	r19, 0xFF	; 255
    473e:	e3 1a       	sub	r14, r19
    4740:	f3 0a       	sbc	r15, r19
    4742:	84 e0       	ldi	r24, 0x04	; 4
    4744:	c8 0e       	add	r12, r24
    4746:	d1 1c       	adc	r13, r1
    4748:	98 e0       	ldi	r25, 0x08	; 8
    474a:	e9 16       	cp	r14, r25
    474c:	f1 04       	cpc	r15, r1
    474e:	09 f0       	breq	.+2      	; 0x4752 <lora_driver_configureToEu868+0x16e>
    4750:	94 cf       	rjmp	.-216    	; 0x467a <lora_driver_configureToEu868+0x96>
    4752:	60 e0       	ldi	r22, 0x00	; 0
    4754:	70 e0       	ldi	r23, 0x00	; 0
    4756:	8e e0       	ldi	r24, 0x0E	; 14
    4758:	96 e0       	ldi	r25, 0x06	; 6
    475a:	9f dc       	rcall	.-1730   	; 0x409a <_uploadMessage>
    475c:	f8 dc       	rcall	.-1552   	; 0x414e <_reply2ReturnCode>
    475e:	81 11       	cpse	r24, r1
    4760:	06 c0       	rjmp	.+12     	; 0x476e <lora_driver_configureToEu868+0x18a>
    4762:	60 e0       	ldi	r22, 0x00	; 0
    4764:	70 e0       	ldi	r23, 0x00	; 0
    4766:	8f e1       	ldi	r24, 0x1F	; 31
    4768:	96 e0       	ldi	r25, 0x06	; 6
    476a:	97 dc       	rcall	.-1746   	; 0x409a <_uploadMessage>
    476c:	f0 dc       	rcall	.-1568   	; 0x414e <_reply2ReturnCode>
    476e:	a0 96       	adiw	r28, 0x20	; 32
    4770:	0f b6       	in	r0, 0x3f	; 63
    4772:	f8 94       	cli
    4774:	de bf       	out	0x3e, r29	; 62
    4776:	0f be       	out	0x3f, r0	; 63
    4778:	cd bf       	out	0x3d, r28	; 61
    477a:	df 91       	pop	r29
    477c:	cf 91       	pop	r28
    477e:	1f 91       	pop	r17
    4780:	0f 91       	pop	r16
    4782:	ff 90       	pop	r15
    4784:	ef 90       	pop	r14
    4786:	df 90       	pop	r13
    4788:	cf 90       	pop	r12
    478a:	bf 90       	pop	r11
    478c:	af 90       	pop	r10
    478e:	9f 90       	pop	r9
    4790:	8f 90       	pop	r8
    4792:	7f 90       	pop	r7
    4794:	6f 90       	pop	r6
    4796:	5f 90       	pop	r5
    4798:	4f 90       	pop	r4
    479a:	3f 90       	pop	r3
    479c:	2f 90       	pop	r2
    479e:	08 95       	ret

000047a0 <lora_driver_setOtaaIdentity>:
    47a0:	ef 92       	push	r14
    47a2:	ff 92       	push	r15
    47a4:	0f 93       	push	r16
    47a6:	1f 93       	push	r17
    47a8:	cf 93       	push	r28
    47aa:	df 93       	push	r29
    47ac:	ec 01       	movw	r28, r24
    47ae:	8b 01       	movw	r16, r22
    47b0:	7a 01       	movw	r14, r20
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	f4 de       	rcall	.-536    	; 0x459e <lora_driver_setAdaptiveDataRate>
    47b6:	81 11       	cpse	r24, r1
    47b8:	0d c0       	rjmp	.+26     	; 0x47d4 <lora_driver_setOtaaIdentity+0x34>
    47ba:	ce 01       	movw	r24, r28
    47bc:	d4 dd       	rcall	.-1112   	; 0x4366 <lora_driver_setApplicationIdentifier>
    47be:	81 11       	cpse	r24, r1
    47c0:	09 c0       	rjmp	.+18     	; 0x47d4 <lora_driver_setOtaaIdentity+0x34>
    47c2:	c8 01       	movw	r24, r16
    47c4:	e1 dd       	rcall	.-1086   	; 0x4388 <lora_driver_setApplicationKey>
    47c6:	81 11       	cpse	r24, r1
    47c8:	05 c0       	rjmp	.+10     	; 0x47d4 <lora_driver_setOtaaIdentity+0x34>
    47ca:	c7 01       	movw	r24, r14
    47cc:	bb dd       	rcall	.-1162   	; 0x4344 <lora_driver_setDeviceIdentifier>
    47ce:	81 11       	cpse	r24, r1
    47d0:	01 c0       	rjmp	.+2      	; 0x47d4 <lora_driver_setOtaaIdentity+0x34>
    47d2:	eb dd       	rcall	.-1066   	; 0x43aa <lora_driver_saveMac>
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	ff 90       	pop	r15
    47de:	ef 90       	pop	r14
    47e0:	08 95       	ret

000047e2 <lora_driver_mapReturnCodeToText>:
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	fc 01       	movw	r30, r24
    47e6:	ee 0f       	add	r30, r30
    47e8:	ff 1f       	adc	r31, r31
    47ea:	8e 0f       	add	r24, r30
    47ec:	9f 1f       	adc	r25, r31
    47ee:	fc 01       	movw	r30, r24
    47f0:	e8 51       	subi	r30, 0x18	; 24
    47f2:	f9 4f       	sbci	r31, 0xF9	; 249
    47f4:	81 81       	ldd	r24, Z+1	; 0x01
    47f6:	92 81       	ldd	r25, Z+2	; 0x02
    47f8:	08 95       	ret

000047fa <decode_port_no>:
    47fa:	dc 01       	movw	r26, r24
    47fc:	00 97       	sbiw	r24, 0x00	; 0
    47fe:	29 f1       	breq	.+74     	; 0x484a <decode_port_no+0x50>
    4800:	fb 01       	movw	r30, r22
    4802:	20 81       	ld	r18, Z
    4804:	fc 01       	movw	r30, r24
    4806:	01 90       	ld	r0, Z+
    4808:	00 20       	and	r0, r0
    480a:	e9 f7       	brne	.-6      	; 0x4806 <decode_port_no+0xc>
    480c:	31 97       	sbiw	r30, 0x01	; 1
    480e:	e8 1b       	sub	r30, r24
    4810:	f9 0b       	sbc	r31, r25
    4812:	82 2f       	mov	r24, r18
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	e8 17       	cp	r30, r24
    4818:	f9 07       	cpc	r31, r25
    481a:	c8 f0       	brcs	.+50     	; 0x484e <decode_port_no+0x54>
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	08 c0       	rjmp	.+16     	; 0x4830 <decode_port_no+0x36>
    4820:	88 0f       	add	r24, r24
    4822:	38 2f       	mov	r19, r24
    4824:	33 0f       	add	r19, r19
    4826:	33 0f       	add	r19, r19
    4828:	83 0f       	add	r24, r19
    482a:	80 53       	subi	r24, 0x30	; 48
    482c:	89 0f       	add	r24, r25
    482e:	2f 5f       	subi	r18, 0xFF	; 255
    4830:	fd 01       	movw	r30, r26
    4832:	e2 0f       	add	r30, r18
    4834:	f1 1d       	adc	r31, r1
    4836:	90 81       	ld	r25, Z
    4838:	30 ed       	ldi	r19, 0xD0	; 208
    483a:	39 0f       	add	r19, r25
    483c:	3a 30       	cpi	r19, 0x0A	; 10
    483e:	10 f4       	brcc	.+4      	; 0x4844 <decode_port_no+0x4a>
    4840:	91 11       	cpse	r25, r1
    4842:	ee cf       	rjmp	.-36     	; 0x4820 <decode_port_no+0x26>
    4844:	fb 01       	movw	r30, r22
    4846:	20 83       	st	Z, r18
    4848:	08 95       	ret
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	08 95       	ret
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	08 95       	ret

00004852 <decode_hexadecimal_string_bytes>:
    4852:	0f 93       	push	r16
    4854:	1f 93       	push	r17
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	dc 01       	movw	r26, r24
    485c:	ea 01       	movw	r28, r20
    485e:	20 97       	sbiw	r28, 0x00	; 0
    4860:	e1 f1       	breq	.+120    	; 0x48da <decode_hexadecimal_string_bytes+0x88>
    4862:	fa 01       	movw	r30, r20
    4864:	01 90       	ld	r0, Z+
    4866:	00 20       	and	r0, r0
    4868:	e9 f7       	brne	.-6      	; 0x4864 <decode_hexadecimal_string_bytes+0x12>
    486a:	31 97       	sbiw	r30, 0x01	; 1
    486c:	e4 1b       	sub	r30, r20
    486e:	f5 0b       	sbc	r31, r21
    4870:	32 97       	sbiw	r30, 0x02	; 2
    4872:	10 f5       	brcc	.+68     	; 0x48b8 <decode_hexadecimal_string_bytes+0x66>
    4874:	32 c0       	rjmp	.+100    	; 0x48da <decode_hexadecimal_string_bytes+0x88>
    4876:	8d 01       	movw	r16, r26
    4878:	04 0f       	add	r16, r20
    487a:	15 1f       	adc	r17, r21
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	ae 01       	movw	r20, r28
    4880:	42 0f       	add	r20, r18
    4882:	53 1f       	adc	r21, r19
    4884:	fa 01       	movw	r30, r20
    4886:	90 81       	ld	r25, Z
    4888:	91 34       	cpi	r25, 0x41	; 65
    488a:	28 f0       	brcs	.+10     	; 0x4896 <decode_hexadecimal_string_bytes+0x44>
    488c:	97 53       	subi	r25, 0x37	; 55
    488e:	59 2f       	mov	r21, r25
    4890:	52 95       	swap	r21
    4892:	50 7f       	andi	r21, 0xF0	; 240
    4894:	03 c0       	rjmp	.+6      	; 0x489c <decode_hexadecimal_string_bytes+0x4a>
    4896:	59 2f       	mov	r21, r25
    4898:	52 95       	swap	r21
    489a:	50 7f       	andi	r21, 0xF0	; 240
    489c:	2c 0f       	add	r18, r28
    489e:	3d 1f       	adc	r19, r29
    48a0:	f9 01       	movw	r30, r18
    48a2:	91 81       	ldd	r25, Z+1	; 0x01
    48a4:	91 34       	cpi	r25, 0x41	; 65
    48a6:	10 f0       	brcs	.+4      	; 0x48ac <decode_hexadecimal_string_bytes+0x5a>
    48a8:	97 53       	subi	r25, 0x37	; 55
    48aa:	01 c0       	rjmp	.+2      	; 0x48ae <decode_hexadecimal_string_bytes+0x5c>
    48ac:	90 53       	subi	r25, 0x30	; 48
    48ae:	95 0f       	add	r25, r21
    48b0:	f8 01       	movw	r30, r16
    48b2:	90 83       	st	Z, r25
    48b4:	8f 5f       	subi	r24, 0xFF	; 255
    48b6:	01 c0       	rjmp	.+2      	; 0x48ba <decode_hexadecimal_string_bytes+0x68>
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	28 2f       	mov	r18, r24
    48bc:	22 0f       	add	r18, r18
    48be:	48 2f       	mov	r20, r24
    48c0:	50 e0       	ldi	r21, 0x00	; 0
    48c2:	fe 01       	movw	r30, r28
    48c4:	01 90       	ld	r0, Z+
    48c6:	00 20       	and	r0, r0
    48c8:	e9 f7       	brne	.-6      	; 0x48c4 <decode_hexadecimal_string_bytes+0x72>
    48ca:	31 97       	sbiw	r30, 0x01	; 1
    48cc:	ec 1b       	sub	r30, r28
    48ce:	fd 0b       	sbc	r31, r29
    48d0:	4e 17       	cp	r20, r30
    48d2:	5f 07       	cpc	r21, r31
    48d4:	10 f4       	brcc	.+4      	; 0x48da <decode_hexadecimal_string_bytes+0x88>
    48d6:	86 13       	cpse	r24, r22
    48d8:	ce cf       	rjmp	.-100    	; 0x4876 <decode_hexadecimal_string_bytes+0x24>
    48da:	df 91       	pop	r29
    48dc:	cf 91       	pop	r28
    48de:	1f 91       	pop	r17
    48e0:	0f 91       	pop	r16
    48e2:	08 95       	ret

000048e4 <_serialCallBack>:
    48e4:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <crc_sum.1945>
    48e8:	86 0f       	add	r24, r22
    48ea:	80 93 e1 12 	sts	0x12E1, r24	; 0x8012e1 <crc_sum.1945>
    48ee:	90 91 e4 12 	lds	r25, 0x12E4	; 0x8012e4 <_mh_state>
    48f2:	91 30       	cpi	r25, 0x01	; 1
    48f4:	79 f0       	breq	.+30     	; 0x4914 <_serialCallBack+0x30>
    48f6:	28 f0       	brcs	.+10     	; 0x4902 <_serialCallBack+0x1e>
    48f8:	92 30       	cpi	r25, 0x02	; 2
    48fa:	a9 f0       	breq	.+42     	; 0x4926 <_serialCallBack+0x42>
    48fc:	93 30       	cpi	r25, 0x03	; 3
    48fe:	19 f1       	breq	.+70     	; 0x4946 <_serialCallBack+0x62>
    4900:	08 95       	ret
    4902:	6f 3f       	cpi	r22, 0xFF	; 255
    4904:	09 f0       	breq	.+2      	; 0x4908 <_serialCallBack+0x24>
    4906:	48 c0       	rjmp	.+144    	; 0x4998 <_serialCallBack+0xb4>
    4908:	10 92 e1 12 	sts	0x12E1, r1	; 0x8012e1 <crc_sum.1945>
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	80 93 e4 12 	sts	0x12E4, r24	; 0x8012e4 <_mh_state>
    4912:	08 95       	ret
    4914:	66 38       	cpi	r22, 0x86	; 134
    4916:	09 f0       	breq	.+2      	; 0x491a <_serialCallBack+0x36>
    4918:	3f c0       	rjmp	.+126    	; 0x4998 <_serialCallBack+0xb4>
    491a:	10 92 e0 12 	sts	0x12E0, r1	; 0x8012e0 <inDex.1943>
    491e:	82 e0       	ldi	r24, 0x02	; 2
    4920:	80 93 e4 12 	sts	0x12E4, r24	; 0x8012e4 <_mh_state>
    4924:	08 95       	ret
    4926:	e0 91 e0 12 	lds	r30, 0x12E0	; 0x8012e0 <inDex.1943>
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	8e 0f       	add	r24, r30
    492e:	80 93 e0 12 	sts	0x12E0, r24	; 0x8012e0 <inDex.1943>
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	e2 52       	subi	r30, 0x22	; 34
    4936:	fd 4e       	sbci	r31, 0xED	; 237
    4938:	60 83       	st	Z, r22
    493a:	82 30       	cpi	r24, 0x02	; 2
    493c:	69 f5       	brne	.+90     	; 0x4998 <_serialCallBack+0xb4>
    493e:	83 e0       	ldi	r24, 0x03	; 3
    4940:	80 93 e4 12 	sts	0x12E4, r24	; 0x8012e4 <_mh_state>
    4944:	08 95       	ret
    4946:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <inDex.1943>
    494a:	21 e0       	ldi	r18, 0x01	; 1
    494c:	29 0f       	add	r18, r25
    494e:	20 93 e0 12 	sts	0x12E0, r18	; 0x8012e0 <inDex.1943>
    4952:	96 30       	cpi	r25, 0x06	; 6
    4954:	09 f5       	brne	.+66     	; 0x4998 <_serialCallBack+0xb4>
    4956:	81 11       	cpse	r24, r1
    4958:	0e c0       	rjmp	.+28     	; 0x4976 <_serialCallBack+0x92>
    495a:	ee ed       	ldi	r30, 0xDE	; 222
    495c:	f2 e1       	ldi	r31, 0x12	; 18
    495e:	80 81       	ld	r24, Z
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	98 2f       	mov	r25, r24
    4964:	88 27       	eor	r24, r24
    4966:	21 81       	ldd	r18, Z+1	; 0x01
    4968:	82 0f       	add	r24, r18
    496a:	91 1d       	adc	r25, r1
    496c:	90 93 e6 12 	sts	0x12E6, r25	; 0x8012e6 <_ppm+0x1>
    4970:	80 93 e5 12 	sts	0x12E5, r24	; 0x8012e5 <_ppm>
    4974:	04 c0       	rjmp	.+8      	; 0x497e <_serialCallBack+0x9a>
    4976:	10 92 e6 12 	sts	0x12E6, r1	; 0x8012e6 <_ppm+0x1>
    497a:	10 92 e5 12 	sts	0x12E5, r1	; 0x8012e5 <_ppm>
    497e:	10 92 e4 12 	sts	0x12E4, r1	; 0x8012e4 <_mh_state>
    4982:	e0 91 e2 12 	lds	r30, 0x12E2	; 0x8012e2 <_appCallBack>
    4986:	f0 91 e3 12 	lds	r31, 0x12E3	; 0x8012e3 <_appCallBack+0x1>
    498a:	30 97       	sbiw	r30, 0x00	; 0
    498c:	29 f0       	breq	.+10     	; 0x4998 <_serialCallBack+0xb4>
    498e:	80 91 e5 12 	lds	r24, 0x12E5	; 0x8012e5 <_ppm>
    4992:	90 91 e6 12 	lds	r25, 0x12E6	; 0x8012e6 <_ppm+0x1>
    4996:	19 95       	eicall
    4998:	08 95       	ret

0000499a <mh_z19_initialise>:
    499a:	8f 92       	push	r8
    499c:	9f 92       	push	r9
    499e:	af 92       	push	r10
    49a0:	cf 92       	push	r12
    49a2:	ef 92       	push	r14
    49a4:	0f 93       	push	r16
    49a6:	0f 2e       	mov	r0, r31
    49a8:	f2 e7       	ldi	r31, 0x72	; 114
    49aa:	8f 2e       	mov	r8, r31
    49ac:	f4 e2       	ldi	r31, 0x24	; 36
    49ae:	9f 2e       	mov	r9, r31
    49b0:	f0 2d       	mov	r31, r0
    49b2:	68 94       	set
    49b4:	aa 24       	eor	r10, r10
    49b6:	a4 f8       	bld	r10, 4
    49b8:	68 94       	set
    49ba:	cc 24       	eor	r12, r12
    49bc:	c4 f8       	bld	r12, 4
    49be:	e1 2c       	mov	r14, r1
    49c0:	00 e0       	ldi	r16, 0x00	; 0
    49c2:	23 e0       	ldi	r18, 0x03	; 3
    49c4:	40 e8       	ldi	r20, 0x80	; 128
    49c6:	55 e2       	ldi	r21, 0x25	; 37
    49c8:	60 e0       	ldi	r22, 0x00	; 0
    49ca:	70 e0       	ldi	r23, 0x00	; 0
    49cc:	3f d0       	rcall	.+126    	; 0x4a4c <serial_create>
    49ce:	90 93 e8 12 	sts	0x12E8, r25	; 0x8012e8 <_serial+0x1>
    49d2:	80 93 e7 12 	sts	0x12E7, r24	; 0x8012e7 <_serial>
    49d6:	0f 91       	pop	r16
    49d8:	ef 90       	pop	r14
    49da:	cf 90       	pop	r12
    49dc:	af 90       	pop	r10
    49de:	9f 90       	pop	r9
    49e0:	8f 90       	pop	r8
    49e2:	08 95       	ret

000049e4 <mh_z19_injectCallBack>:
    49e4:	90 93 e3 12 	sts	0x12E3, r25	; 0x8012e3 <_appCallBack+0x1>
    49e8:	80 93 e2 12 	sts	0x12E2, r24	; 0x8012e2 <_appCallBack>
    49ec:	08 95       	ret

000049ee <mh_z19_takeMeassuring>:
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
    49f2:	cd b7       	in	r28, 0x3d	; 61
    49f4:	de b7       	in	r29, 0x3e	; 62
    49f6:	29 97       	sbiw	r28, 0x09	; 9
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	cd bf       	out	0x3d, r28	; 61
    4a02:	89 e0       	ldi	r24, 0x09	; 9
    4a04:	e2 e4       	ldi	r30, 0x42	; 66
    4a06:	f2 e0       	ldi	r31, 0x02	; 2
    4a08:	9e 01       	movw	r18, r28
    4a0a:	2f 5f       	subi	r18, 0xFF	; 255
    4a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0e:	d9 01       	movw	r26, r18
    4a10:	01 90       	ld	r0, Z+
    4a12:	0d 92       	st	X+, r0
    4a14:	8a 95       	dec	r24
    4a16:	e1 f7       	brne	.-8      	; 0x4a10 <mh_z19_takeMeassuring+0x22>
    4a18:	10 92 e6 12 	sts	0x12E6, r1	; 0x8012e6 <_ppm+0x1>
    4a1c:	10 92 e5 12 	sts	0x12E5, r1	; 0x8012e5 <_ppm>
    4a20:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <_serial>
    4a24:	90 91 e8 12 	lds	r25, 0x12E8	; 0x8012e8 <_serial+0x1>
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	31 f0       	breq	.+12     	; 0x4a38 <mh_z19_takeMeassuring+0x4a>
    4a2c:	42 2f       	mov	r20, r18
    4a2e:	53 2f       	mov	r21, r19
    4a30:	69 e0       	ldi	r22, 0x09	; 9
    4a32:	da d0       	rcall	.+436    	; 0x4be8 <serial_sendBytes>
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	01 c0       	rjmp	.+2      	; 0x4a3a <mh_z19_takeMeassuring+0x4c>
    4a38:	82 e0       	ldi	r24, 0x02	; 2
    4a3a:	29 96       	adiw	r28, 0x09	; 9
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	f8 94       	cli
    4a40:	de bf       	out	0x3e, r29	; 62
    4a42:	0f be       	out	0x3f, r0	; 63
    4a44:	cd bf       	out	0x3d, r28	; 61
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	08 95       	ret

00004a4c <serial_create>:
    4a4c:	2f 92       	push	r2
    4a4e:	3f 92       	push	r3
    4a50:	4f 92       	push	r4
    4a52:	5f 92       	push	r5
    4a54:	6f 92       	push	r6
    4a56:	7f 92       	push	r7
    4a58:	8f 92       	push	r8
    4a5a:	9f 92       	push	r9
    4a5c:	af 92       	push	r10
    4a5e:	cf 92       	push	r12
    4a60:	ef 92       	push	r14
    4a62:	ff 92       	push	r15
    4a64:	0f 93       	push	r16
    4a66:	1f 93       	push	r17
    4a68:	cf 93       	push	r28
    4a6a:	df 93       	push	r29
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
    4a70:	f8 2e       	mov	r15, r24
    4a72:	2a 01       	movw	r4, r20
    4a74:	3b 01       	movw	r6, r22
    4a76:	88 e0       	ldi	r24, 0x08	; 8
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <malloc>
    4a7e:	8c 01       	movw	r16, r24
    4a80:	8f 2d       	mov	r24, r15
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	fc 01       	movw	r30, r24
    4a86:	ee 0f       	add	r30, r30
    4a88:	ff 1f       	adc	r31, r31
    4a8a:	e7 51       	subi	r30, 0x17	; 23
    4a8c:	fd 4e       	sbci	r31, 0xED	; 237
    4a8e:	11 83       	std	Z+1, r17	; 0x01
    4a90:	00 83       	st	Z, r16
    4a92:	01 15       	cp	r16, r1
    4a94:	11 05       	cpc	r17, r1
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <serial_create+0x4e>
    4a98:	6a c0       	rjmp	.+212    	; 0x4b6e <serial_create+0x122>
    4a9a:	88 0f       	add	r24, r24
    4a9c:	99 1f       	adc	r25, r25
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	e5 5f       	subi	r30, 0xF5	; 245
    4aa2:	fd 4f       	sbci	r31, 0xFD	; 253
    4aa4:	80 81       	ld	r24, Z
    4aa6:	91 81       	ldd	r25, Z+1	; 0x01
    4aa8:	d8 01       	movw	r26, r16
    4aaa:	8d 93       	st	X+, r24
    4aac:	9c 93       	st	X, r25
    4aae:	8c 2d       	mov	r24, r12
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	88 0f       	add	r24, r24
    4ab8:	99 1f       	adc	r25, r25
    4aba:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <malloc>
    4abe:	1c 01       	movw	r2, r24
    4ac0:	86 e0       	ldi	r24, 0x06	; 6
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <malloc>
    4ac8:	7c 01       	movw	r14, r24
    4aca:	4c 2d       	mov	r20, r12
    4acc:	b1 01       	movw	r22, r2
    4ace:	3e d5       	rcall	.+2684   	; 0x554c <fifo_init>
    4ad0:	f8 01       	movw	r30, r16
    4ad2:	f5 82       	std	Z+5, r15	; 0x05
    4ad4:	e4 82       	std	Z+4, r14	; 0x04
    4ad6:	8a 2d       	mov	r24, r10
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	88 0f       	add	r24, r24
    4adc:	99 1f       	adc	r25, r25
    4ade:	88 0f       	add	r24, r24
    4ae0:	99 1f       	adc	r25, r25
    4ae2:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <malloc>
    4ae6:	1c 01       	movw	r2, r24
    4ae8:	86 e0       	ldi	r24, 0x06	; 6
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <malloc>
    4af0:	7c 01       	movw	r14, r24
    4af2:	4a 2d       	mov	r20, r10
    4af4:	b1 01       	movw	r22, r2
    4af6:	2a d5       	rcall	.+2644   	; 0x554c <fifo_init>
    4af8:	d8 01       	movw	r26, r16
    4afa:	13 96       	adiw	r26, 0x03	; 3
    4afc:	fc 92       	st	X, r15
    4afe:	ee 92       	st	-X, r14
    4b00:	12 97       	sbiw	r26, 0x02	; 2
    4b02:	17 96       	adiw	r26, 0x07	; 7
    4b04:	9c 92       	st	X, r9
    4b06:	8e 92       	st	-X, r8
    4b08:	16 97       	sbiw	r26, 0x06	; 6
    4b0a:	ff b6       	in	r15, 0x3f	; 63
    4b0c:	f8 94       	cli
    4b0e:	ed 91       	ld	r30, X+
    4b10:	fc 91       	ld	r31, X
    4b12:	11 97       	sbiw	r26, 0x01	; 1
    4b14:	36 97       	sbiw	r30, 0x06	; 6
    4b16:	80 81       	ld	r24, Z
    4b18:	82 60       	ori	r24, 0x02	; 2
    4b1a:	80 83       	st	Z, r24
    4b1c:	8d 90       	ld	r8, X+
    4b1e:	9c 90       	ld	r9, X
    4b20:	c3 01       	movw	r24, r6
    4b22:	b2 01       	movw	r22, r4
    4b24:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	40 e0       	ldi	r20, 0x00	; 0
    4b2e:	51 e4       	ldi	r21, 0x41	; 65
    4b30:	dd d8       	rcall	.-3654   	; 0x3cec <__mulsf3>
    4b32:	9b 01       	movw	r18, r22
    4b34:	ac 01       	movw	r20, r24
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	74 e2       	ldi	r23, 0x24	; 36
    4b3a:	84 e7       	ldi	r24, 0x74	; 116
    4b3c:	9b e4       	ldi	r25, 0x4B	; 75
    4b3e:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <__divsf3>
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e8       	ldi	r20, 0x80	; 128
    4b48:	5f e3       	ldi	r21, 0x3F	; 63
    4b4a:	33 d9       	rcall	.-3482   	; 0x3db2 <__subsf3>
    4b4c:	47 d8       	rcall	.-3954   	; 0x3bdc <__fixunssfsi>
    4b4e:	f4 01       	movw	r30, r8
    4b50:	32 97       	sbiw	r30, 0x02	; 2
    4b52:	60 83       	st	Z, r22
    4b54:	d8 01       	movw	r26, r16
    4b56:	ed 91       	ld	r30, X+
    4b58:	fc 91       	ld	r31, X
    4b5a:	11 97       	sbiw	r26, 0x01	; 1
    4b5c:	35 97       	sbiw	r30, 0x05	; 5
    4b5e:	88 e9       	ldi	r24, 0x98	; 152
    4b60:	80 83       	st	Z, r24
    4b62:	ed 91       	ld	r30, X+
    4b64:	fc 91       	ld	r31, X
    4b66:	34 97       	sbiw	r30, 0x04	; 4
    4b68:	86 e0       	ldi	r24, 0x06	; 6
    4b6a:	80 83       	st	Z, r24
    4b6c:	ff be       	out	0x3f, r15	; 63
    4b6e:	c8 01       	movw	r24, r16
    4b70:	df 91       	pop	r29
    4b72:	cf 91       	pop	r28
    4b74:	1f 91       	pop	r17
    4b76:	0f 91       	pop	r16
    4b78:	ff 90       	pop	r15
    4b7a:	ef 90       	pop	r14
    4b7c:	cf 90       	pop	r12
    4b7e:	af 90       	pop	r10
    4b80:	9f 90       	pop	r9
    4b82:	8f 90       	pop	r8
    4b84:	7f 90       	pop	r7
    4b86:	6f 90       	pop	r6
    4b88:	5f 90       	pop	r5
    4b8a:	4f 90       	pop	r4
    4b8c:	3f 90       	pop	r3
    4b8e:	2f 90       	pop	r2
    4b90:	08 95       	ret

00004b92 <serial_sendByte>:
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
    4b96:	dc 01       	movw	r26, r24
    4b98:	89 2b       	or	r24, r25
    4b9a:	01 f1       	breq	.+64     	; 0x4bdc <serial_sendByte+0x4a>
    4b9c:	12 96       	adiw	r26, 0x02	; 2
    4b9e:	ed 91       	ld	r30, X+
    4ba0:	fc 91       	ld	r31, X
    4ba2:	13 97       	sbiw	r26, 0x03	; 3
    4ba4:	93 81       	ldd	r25, Z+3	; 0x03
    4ba6:	82 81       	ldd	r24, Z+2	; 0x02
    4ba8:	25 81       	ldd	r18, Z+5	; 0x05
    4baa:	98 1b       	sub	r25, r24
    4bac:	92 23       	and	r25, r18
    4bae:	84 81       	ldd	r24, Z+4	; 0x04
    4bb0:	98 17       	cp	r25, r24
    4bb2:	b1 f0       	breq	.+44     	; 0x4be0 <serial_sendByte+0x4e>
    4bb4:	83 81       	ldd	r24, Z+3	; 0x03
    4bb6:	26 95       	lsr	r18
    4bb8:	28 23       	and	r18, r24
    4bba:	c0 81       	ld	r28, Z
    4bbc:	d1 81       	ldd	r29, Z+1	; 0x01
    4bbe:	c2 0f       	add	r28, r18
    4bc0:	d1 1d       	adc	r29, r1
    4bc2:	68 83       	st	Y, r22
    4bc4:	8f 5f       	subi	r24, 0xFF	; 255
    4bc6:	95 81       	ldd	r25, Z+5	; 0x05
    4bc8:	89 23       	and	r24, r25
    4bca:	83 83       	std	Z+3, r24	; 0x03
    4bcc:	ed 91       	ld	r30, X+
    4bce:	fc 91       	ld	r31, X
    4bd0:	35 97       	sbiw	r30, 0x05	; 5
    4bd2:	80 81       	ld	r24, Z
    4bd4:	80 62       	ori	r24, 0x20	; 32
    4bd6:	80 83       	st	Z, r24
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	03 c0       	rjmp	.+6      	; 0x4be2 <serial_sendByte+0x50>
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	01 c0       	rjmp	.+2      	; 0x4be2 <serial_sendByte+0x50>
    4be0:	82 e0       	ldi	r24, 0x02	; 2
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	08 95       	ret

00004be8 <serial_sendBytes>:
    4be8:	ef 92       	push	r14
    4bea:	ff 92       	push	r15
    4bec:	0f 93       	push	r16
    4bee:	1f 93       	push	r17
    4bf0:	cf 93       	push	r28
    4bf2:	df 93       	push	r29
    4bf4:	7c 01       	movw	r14, r24
    4bf6:	00 97       	sbiw	r24, 0x00	; 0
    4bf8:	09 f4       	brne	.+2      	; 0x4bfc <serial_sendBytes+0x14>
    4bfa:	41 c0       	rjmp	.+130    	; 0x4c7e <serial_sendBytes+0x96>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	12 96       	adiw	r26, 0x02	; 2
    4c00:	ed 91       	ld	r30, X+
    4c02:	fc 91       	ld	r31, X
    4c04:	13 97       	sbiw	r26, 0x03	; 3
    4c06:	93 81       	ldd	r25, Z+3	; 0x03
    4c08:	82 81       	ldd	r24, Z+2	; 0x02
    4c0a:	98 1b       	sub	r25, r24
    4c0c:	85 81       	ldd	r24, Z+5	; 0x05
    4c0e:	98 23       	and	r25, r24
    4c10:	84 81       	ldd	r24, Z+4	; 0x04
    4c12:	89 1b       	sub	r24, r25
    4c14:	86 17       	cp	r24, r22
    4c16:	a8 f1       	brcs	.+106    	; 0x4c82 <serial_sendBytes+0x9a>
    4c18:	66 23       	and	r22, r22
    4c1a:	41 f1       	breq	.+80     	; 0x4c6c <serial_sendBytes+0x84>
    4c1c:	84 2f       	mov	r24, r20
    4c1e:	95 2f       	mov	r25, r21
    4c20:	dc 01       	movw	r26, r24
    4c22:	61 50       	subi	r22, 0x01	; 1
    4c24:	46 2f       	mov	r20, r22
    4c26:	50 e0       	ldi	r21, 0x00	; 0
    4c28:	4f 5f       	subi	r20, 0xFF	; 255
    4c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c2c:	48 0f       	add	r20, r24
    4c2e:	59 1f       	adc	r21, r25
    4c30:	e7 01       	movw	r28, r14
    4c32:	ea 81       	ldd	r30, Y+2	; 0x02
    4c34:	fb 81       	ldd	r31, Y+3	; 0x03
    4c36:	93 81       	ldd	r25, Z+3	; 0x03
    4c38:	82 81       	ldd	r24, Z+2	; 0x02
    4c3a:	25 81       	ldd	r18, Z+5	; 0x05
    4c3c:	98 1b       	sub	r25, r24
    4c3e:	92 23       	and	r25, r18
    4c40:	84 81       	ldd	r24, Z+4	; 0x04
    4c42:	98 17       	cp	r25, r24
    4c44:	79 f0       	breq	.+30     	; 0x4c64 <serial_sendBytes+0x7c>
    4c46:	8c 91       	ld	r24, X
    4c48:	93 81       	ldd	r25, Z+3	; 0x03
    4c4a:	26 95       	lsr	r18
    4c4c:	29 23       	and	r18, r25
    4c4e:	60 81       	ld	r22, Z
    4c50:	71 81       	ldd	r23, Z+1	; 0x01
    4c52:	8b 01       	movw	r16, r22
    4c54:	02 0f       	add	r16, r18
    4c56:	11 1d       	adc	r17, r1
    4c58:	e8 01       	movw	r28, r16
    4c5a:	88 83       	st	Y, r24
    4c5c:	9f 5f       	subi	r25, 0xFF	; 255
    4c5e:	85 81       	ldd	r24, Z+5	; 0x05
    4c60:	98 23       	and	r25, r24
    4c62:	93 83       	std	Z+3, r25	; 0x03
    4c64:	11 96       	adiw	r26, 0x01	; 1
    4c66:	a4 17       	cp	r26, r20
    4c68:	b5 07       	cpc	r27, r21
    4c6a:	11 f7       	brne	.-60     	; 0x4c30 <serial_sendBytes+0x48>
    4c6c:	d7 01       	movw	r26, r14
    4c6e:	ed 91       	ld	r30, X+
    4c70:	fc 91       	ld	r31, X
    4c72:	35 97       	sbiw	r30, 0x05	; 5
    4c74:	80 81       	ld	r24, Z
    4c76:	80 62       	ori	r24, 0x20	; 32
    4c78:	80 83       	st	Z, r24
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	03 c0       	rjmp	.+6      	; 0x4c84 <serial_sendBytes+0x9c>
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	01 c0       	rjmp	.+2      	; 0x4c84 <serial_sendBytes+0x9c>
    4c82:	82 e0       	ldi	r24, 0x02	; 2
    4c84:	df 91       	pop	r29
    4c86:	cf 91       	pop	r28
    4c88:	1f 91       	pop	r17
    4c8a:	0f 91       	pop	r16
    4c8c:	ff 90       	pop	r15
    4c8e:	ef 90       	pop	r14
    4c90:	08 95       	ret

00004c92 <serial_getByte>:
    4c92:	00 97       	sbiw	r24, 0x00	; 0
    4c94:	d1 f0       	breq	.+52     	; 0x4cca <serial_getByte+0x38>
    4c96:	dc 01       	movw	r26, r24
    4c98:	14 96       	adiw	r26, 0x04	; 4
    4c9a:	ed 91       	ld	r30, X+
    4c9c:	fc 91       	ld	r31, X
    4c9e:	15 97       	sbiw	r26, 0x05	; 5
    4ca0:	93 81       	ldd	r25, Z+3	; 0x03
    4ca2:	82 81       	ldd	r24, Z+2	; 0x02
    4ca4:	98 17       	cp	r25, r24
    4ca6:	99 f0       	breq	.+38     	; 0x4cce <serial_getByte+0x3c>
    4ca8:	92 81       	ldd	r25, Z+2	; 0x02
    4caa:	85 81       	ldd	r24, Z+5	; 0x05
    4cac:	86 95       	lsr	r24
    4cae:	89 23       	and	r24, r25
    4cb0:	a0 81       	ld	r26, Z
    4cb2:	b1 81       	ldd	r27, Z+1	; 0x01
    4cb4:	a8 0f       	add	r26, r24
    4cb6:	b1 1d       	adc	r27, r1
    4cb8:	8c 91       	ld	r24, X
    4cba:	db 01       	movw	r26, r22
    4cbc:	8c 93       	st	X, r24
    4cbe:	9f 5f       	subi	r25, 0xFF	; 255
    4cc0:	85 81       	ldd	r24, Z+5	; 0x05
    4cc2:	98 23       	and	r25, r24
    4cc4:	92 83       	std	Z+2, r25	; 0x02
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	08 95       	ret
    4cca:	81 e0       	ldi	r24, 0x01	; 1
    4ccc:	08 95       	ret
    4cce:	83 e0       	ldi	r24, 0x03	; 3
    4cd0:	08 95       	ret

00004cd2 <__vector_25>:
    4cd2:	1f 92       	push	r1
    4cd4:	0f 92       	push	r0
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	0f 92       	push	r0
    4cda:	11 24       	eor	r1, r1
    4cdc:	0b b6       	in	r0, 0x3b	; 59
    4cde:	0f 92       	push	r0
    4ce0:	2f 93       	push	r18
    4ce2:	3f 93       	push	r19
    4ce4:	4f 93       	push	r20
    4ce6:	5f 93       	push	r21
    4ce8:	6f 93       	push	r22
    4cea:	7f 93       	push	r23
    4cec:	8f 93       	push	r24
    4cee:	9f 93       	push	r25
    4cf0:	af 93       	push	r26
    4cf2:	bf 93       	push	r27
    4cf4:	cf 93       	push	r28
    4cf6:	df 93       	push	r29
    4cf8:	ef 93       	push	r30
    4cfa:	ff 93       	push	r31
    4cfc:	a0 91 e9 12 	lds	r26, 0x12E9	; 0x8012e9 <_ser_handle>
    4d00:	b0 91 ea 12 	lds	r27, 0x12EA	; 0x8012ea <_ser_handle+0x1>
    4d04:	10 97       	sbiw	r26, 0x00	; 0
    4d06:	11 f1       	breq	.+68     	; 0x4d4c <__vector_25+0x7a>
    4d08:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4d0c:	14 96       	adiw	r26, 0x04	; 4
    4d0e:	ed 91       	ld	r30, X+
    4d10:	fc 91       	ld	r31, X
    4d12:	15 97       	sbiw	r26, 0x05	; 5
    4d14:	93 81       	ldd	r25, Z+3	; 0x03
    4d16:	82 81       	ldd	r24, Z+2	; 0x02
    4d18:	25 81       	ldd	r18, Z+5	; 0x05
    4d1a:	98 1b       	sub	r25, r24
    4d1c:	92 23       	and	r25, r18
    4d1e:	84 81       	ldd	r24, Z+4	; 0x04
    4d20:	98 17       	cp	r25, r24
    4d22:	61 f0       	breq	.+24     	; 0x4d3c <__vector_25+0x6a>
    4d24:	83 81       	ldd	r24, Z+3	; 0x03
    4d26:	26 95       	lsr	r18
    4d28:	28 23       	and	r18, r24
    4d2a:	c0 81       	ld	r28, Z
    4d2c:	d1 81       	ldd	r29, Z+1	; 0x01
    4d2e:	c2 0f       	add	r28, r18
    4d30:	d1 1d       	adc	r29, r1
    4d32:	68 83       	st	Y, r22
    4d34:	8f 5f       	subi	r24, 0xFF	; 255
    4d36:	95 81       	ldd	r25, Z+5	; 0x05
    4d38:	89 23       	and	r24, r25
    4d3a:	83 83       	std	Z+3, r24	; 0x03
    4d3c:	16 96       	adiw	r26, 0x06	; 6
    4d3e:	ed 91       	ld	r30, X+
    4d40:	fc 91       	ld	r31, X
    4d42:	17 97       	sbiw	r26, 0x07	; 7
    4d44:	30 97       	sbiw	r30, 0x00	; 0
    4d46:	11 f0       	breq	.+4      	; 0x4d4c <__vector_25+0x7a>
    4d48:	cd 01       	movw	r24, r26
    4d4a:	19 95       	eicall
    4d4c:	ff 91       	pop	r31
    4d4e:	ef 91       	pop	r30
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	bf 91       	pop	r27
    4d56:	af 91       	pop	r26
    4d58:	9f 91       	pop	r25
    4d5a:	8f 91       	pop	r24
    4d5c:	7f 91       	pop	r23
    4d5e:	6f 91       	pop	r22
    4d60:	5f 91       	pop	r21
    4d62:	4f 91       	pop	r20
    4d64:	3f 91       	pop	r19
    4d66:	2f 91       	pop	r18
    4d68:	0f 90       	pop	r0
    4d6a:	0b be       	out	0x3b, r0	; 59
    4d6c:	0f 90       	pop	r0
    4d6e:	0f be       	out	0x3f, r0	; 63
    4d70:	0f 90       	pop	r0
    4d72:	1f 90       	pop	r1
    4d74:	18 95       	reti

00004d76 <__vector_26>:
    4d76:	1f 92       	push	r1
    4d78:	0f 92       	push	r0
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	0f 92       	push	r0
    4d7e:	11 24       	eor	r1, r1
    4d80:	0b b6       	in	r0, 0x3b	; 59
    4d82:	0f 92       	push	r0
    4d84:	2f 93       	push	r18
    4d86:	8f 93       	push	r24
    4d88:	9f 93       	push	r25
    4d8a:	af 93       	push	r26
    4d8c:	bf 93       	push	r27
    4d8e:	ef 93       	push	r30
    4d90:	ff 93       	push	r31
    4d92:	e0 91 e9 12 	lds	r30, 0x12E9	; 0x8012e9 <_ser_handle>
    4d96:	f0 91 ea 12 	lds	r31, 0x12EA	; 0x8012ea <_ser_handle+0x1>
    4d9a:	30 97       	sbiw	r30, 0x00	; 0
    4d9c:	b9 f0       	breq	.+46     	; 0x4dcc <__vector_26+0x56>
    4d9e:	02 80       	ldd	r0, Z+2	; 0x02
    4da0:	f3 81       	ldd	r31, Z+3	; 0x03
    4da2:	e0 2d       	mov	r30, r0
    4da4:	93 81       	ldd	r25, Z+3	; 0x03
    4da6:	82 81       	ldd	r24, Z+2	; 0x02
    4da8:	98 17       	cp	r25, r24
    4daa:	b1 f0       	breq	.+44     	; 0x4dd8 <__vector_26+0x62>
    4dac:	92 81       	ldd	r25, Z+2	; 0x02
    4dae:	85 81       	ldd	r24, Z+5	; 0x05
    4db0:	28 2f       	mov	r18, r24
    4db2:	26 95       	lsr	r18
    4db4:	29 23       	and	r18, r25
    4db6:	a0 81       	ld	r26, Z
    4db8:	b1 81       	ldd	r27, Z+1	; 0x01
    4dba:	a2 0f       	add	r26, r18
    4dbc:	b1 1d       	adc	r27, r1
    4dbe:	2c 91       	ld	r18, X
    4dc0:	9f 5f       	subi	r25, 0xFF	; 255
    4dc2:	89 23       	and	r24, r25
    4dc4:	82 83       	std	Z+2, r24	; 0x02
    4dc6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4dca:	0b c0       	rjmp	.+22     	; 0x4de2 <__vector_26+0x6c>
    4dcc:	e1 ec       	ldi	r30, 0xC1	; 193
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	80 81       	ld	r24, Z
    4dd2:	8f 7d       	andi	r24, 0xDF	; 223
    4dd4:	80 83       	st	Z, r24
    4dd6:	05 c0       	rjmp	.+10     	; 0x4de2 <__vector_26+0x6c>
    4dd8:	e1 ec       	ldi	r30, 0xC1	; 193
    4dda:	f0 e0       	ldi	r31, 0x00	; 0
    4ddc:	80 81       	ld	r24, Z
    4dde:	8f 7d       	andi	r24, 0xDF	; 223
    4de0:	80 83       	st	Z, r24
    4de2:	ff 91       	pop	r31
    4de4:	ef 91       	pop	r30
    4de6:	bf 91       	pop	r27
    4de8:	af 91       	pop	r26
    4dea:	9f 91       	pop	r25
    4dec:	8f 91       	pop	r24
    4dee:	2f 91       	pop	r18
    4df0:	0f 90       	pop	r0
    4df2:	0b be       	out	0x3b, r0	; 59
    4df4:	0f 90       	pop	r0
    4df6:	0f be       	out	0x3f, r0	; 63
    4df8:	0f 90       	pop	r0
    4dfa:	1f 90       	pop	r1
    4dfc:	18 95       	reti

00004dfe <__vector_36>:
    4dfe:	1f 92       	push	r1
    4e00:	0f 92       	push	r0
    4e02:	0f b6       	in	r0, 0x3f	; 63
    4e04:	0f 92       	push	r0
    4e06:	11 24       	eor	r1, r1
    4e08:	0b b6       	in	r0, 0x3b	; 59
    4e0a:	0f 92       	push	r0
    4e0c:	2f 93       	push	r18
    4e0e:	3f 93       	push	r19
    4e10:	4f 93       	push	r20
    4e12:	5f 93       	push	r21
    4e14:	6f 93       	push	r22
    4e16:	7f 93       	push	r23
    4e18:	8f 93       	push	r24
    4e1a:	9f 93       	push	r25
    4e1c:	af 93       	push	r26
    4e1e:	bf 93       	push	r27
    4e20:	cf 93       	push	r28
    4e22:	df 93       	push	r29
    4e24:	ef 93       	push	r30
    4e26:	ff 93       	push	r31
    4e28:	a0 91 eb 12 	lds	r26, 0x12EB	; 0x8012eb <_ser_handle+0x2>
    4e2c:	b0 91 ec 12 	lds	r27, 0x12EC	; 0x8012ec <_ser_handle+0x3>
    4e30:	10 97       	sbiw	r26, 0x00	; 0
    4e32:	11 f1       	breq	.+68     	; 0x4e78 <__vector_36+0x7a>
    4e34:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4e38:	14 96       	adiw	r26, 0x04	; 4
    4e3a:	ed 91       	ld	r30, X+
    4e3c:	fc 91       	ld	r31, X
    4e3e:	15 97       	sbiw	r26, 0x05	; 5
    4e40:	93 81       	ldd	r25, Z+3	; 0x03
    4e42:	82 81       	ldd	r24, Z+2	; 0x02
    4e44:	25 81       	ldd	r18, Z+5	; 0x05
    4e46:	98 1b       	sub	r25, r24
    4e48:	92 23       	and	r25, r18
    4e4a:	84 81       	ldd	r24, Z+4	; 0x04
    4e4c:	98 17       	cp	r25, r24
    4e4e:	61 f0       	breq	.+24     	; 0x4e68 <__vector_36+0x6a>
    4e50:	83 81       	ldd	r24, Z+3	; 0x03
    4e52:	26 95       	lsr	r18
    4e54:	28 23       	and	r18, r24
    4e56:	c0 81       	ld	r28, Z
    4e58:	d1 81       	ldd	r29, Z+1	; 0x01
    4e5a:	c2 0f       	add	r28, r18
    4e5c:	d1 1d       	adc	r29, r1
    4e5e:	68 83       	st	Y, r22
    4e60:	8f 5f       	subi	r24, 0xFF	; 255
    4e62:	95 81       	ldd	r25, Z+5	; 0x05
    4e64:	89 23       	and	r24, r25
    4e66:	83 83       	std	Z+3, r24	; 0x03
    4e68:	16 96       	adiw	r26, 0x06	; 6
    4e6a:	ed 91       	ld	r30, X+
    4e6c:	fc 91       	ld	r31, X
    4e6e:	17 97       	sbiw	r26, 0x07	; 7
    4e70:	30 97       	sbiw	r30, 0x00	; 0
    4e72:	11 f0       	breq	.+4      	; 0x4e78 <__vector_36+0x7a>
    4e74:	cd 01       	movw	r24, r26
    4e76:	19 95       	eicall
    4e78:	ff 91       	pop	r31
    4e7a:	ef 91       	pop	r30
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	bf 91       	pop	r27
    4e82:	af 91       	pop	r26
    4e84:	9f 91       	pop	r25
    4e86:	8f 91       	pop	r24
    4e88:	7f 91       	pop	r23
    4e8a:	6f 91       	pop	r22
    4e8c:	5f 91       	pop	r21
    4e8e:	4f 91       	pop	r20
    4e90:	3f 91       	pop	r19
    4e92:	2f 91       	pop	r18
    4e94:	0f 90       	pop	r0
    4e96:	0b be       	out	0x3b, r0	; 59
    4e98:	0f 90       	pop	r0
    4e9a:	0f be       	out	0x3f, r0	; 63
    4e9c:	0f 90       	pop	r0
    4e9e:	1f 90       	pop	r1
    4ea0:	18 95       	reti

00004ea2 <__vector_37>:
    4ea2:	1f 92       	push	r1
    4ea4:	0f 92       	push	r0
    4ea6:	0f b6       	in	r0, 0x3f	; 63
    4ea8:	0f 92       	push	r0
    4eaa:	11 24       	eor	r1, r1
    4eac:	0b b6       	in	r0, 0x3b	; 59
    4eae:	0f 92       	push	r0
    4eb0:	2f 93       	push	r18
    4eb2:	8f 93       	push	r24
    4eb4:	9f 93       	push	r25
    4eb6:	af 93       	push	r26
    4eb8:	bf 93       	push	r27
    4eba:	ef 93       	push	r30
    4ebc:	ff 93       	push	r31
    4ebe:	e0 91 eb 12 	lds	r30, 0x12EB	; 0x8012eb <_ser_handle+0x2>
    4ec2:	f0 91 ec 12 	lds	r31, 0x12EC	; 0x8012ec <_ser_handle+0x3>
    4ec6:	30 97       	sbiw	r30, 0x00	; 0
    4ec8:	b9 f0       	breq	.+46     	; 0x4ef8 <__vector_37+0x56>
    4eca:	02 80       	ldd	r0, Z+2	; 0x02
    4ecc:	f3 81       	ldd	r31, Z+3	; 0x03
    4ece:	e0 2d       	mov	r30, r0
    4ed0:	93 81       	ldd	r25, Z+3	; 0x03
    4ed2:	82 81       	ldd	r24, Z+2	; 0x02
    4ed4:	98 17       	cp	r25, r24
    4ed6:	b1 f0       	breq	.+44     	; 0x4f04 <__vector_37+0x62>
    4ed8:	92 81       	ldd	r25, Z+2	; 0x02
    4eda:	85 81       	ldd	r24, Z+5	; 0x05
    4edc:	28 2f       	mov	r18, r24
    4ede:	26 95       	lsr	r18
    4ee0:	29 23       	and	r18, r25
    4ee2:	a0 81       	ld	r26, Z
    4ee4:	b1 81       	ldd	r27, Z+1	; 0x01
    4ee6:	a2 0f       	add	r26, r18
    4ee8:	b1 1d       	adc	r27, r1
    4eea:	2c 91       	ld	r18, X
    4eec:	9f 5f       	subi	r25, 0xFF	; 255
    4eee:	89 23       	and	r24, r25
    4ef0:	82 83       	std	Z+2, r24	; 0x02
    4ef2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4ef6:	0b c0       	rjmp	.+22     	; 0x4f0e <__vector_37+0x6c>
    4ef8:	e9 ec       	ldi	r30, 0xC9	; 201
    4efa:	f0 e0       	ldi	r31, 0x00	; 0
    4efc:	80 81       	ld	r24, Z
    4efe:	8f 7d       	andi	r24, 0xDF	; 223
    4f00:	80 83       	st	Z, r24
    4f02:	05 c0       	rjmp	.+10     	; 0x4f0e <__vector_37+0x6c>
    4f04:	e9 ec       	ldi	r30, 0xC9	; 201
    4f06:	f0 e0       	ldi	r31, 0x00	; 0
    4f08:	80 81       	ld	r24, Z
    4f0a:	8f 7d       	andi	r24, 0xDF	; 223
    4f0c:	80 83       	st	Z, r24
    4f0e:	ff 91       	pop	r31
    4f10:	ef 91       	pop	r30
    4f12:	bf 91       	pop	r27
    4f14:	af 91       	pop	r26
    4f16:	9f 91       	pop	r25
    4f18:	8f 91       	pop	r24
    4f1a:	2f 91       	pop	r18
    4f1c:	0f 90       	pop	r0
    4f1e:	0b be       	out	0x3b, r0	; 59
    4f20:	0f 90       	pop	r0
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	0f 90       	pop	r0
    4f26:	1f 90       	pop	r1
    4f28:	18 95       	reti

00004f2a <__vector_51>:
    4f2a:	1f 92       	push	r1
    4f2c:	0f 92       	push	r0
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	0f 92       	push	r0
    4f32:	11 24       	eor	r1, r1
    4f34:	0b b6       	in	r0, 0x3b	; 59
    4f36:	0f 92       	push	r0
    4f38:	2f 93       	push	r18
    4f3a:	3f 93       	push	r19
    4f3c:	4f 93       	push	r20
    4f3e:	5f 93       	push	r21
    4f40:	6f 93       	push	r22
    4f42:	7f 93       	push	r23
    4f44:	8f 93       	push	r24
    4f46:	9f 93       	push	r25
    4f48:	af 93       	push	r26
    4f4a:	bf 93       	push	r27
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	ef 93       	push	r30
    4f52:	ff 93       	push	r31
    4f54:	a0 91 ed 12 	lds	r26, 0x12ED	; 0x8012ed <_ser_handle+0x4>
    4f58:	b0 91 ee 12 	lds	r27, 0x12EE	; 0x8012ee <_ser_handle+0x5>
    4f5c:	10 97       	sbiw	r26, 0x00	; 0
    4f5e:	11 f1       	breq	.+68     	; 0x4fa4 <__vector_51+0x7a>
    4f60:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4f64:	14 96       	adiw	r26, 0x04	; 4
    4f66:	ed 91       	ld	r30, X+
    4f68:	fc 91       	ld	r31, X
    4f6a:	15 97       	sbiw	r26, 0x05	; 5
    4f6c:	93 81       	ldd	r25, Z+3	; 0x03
    4f6e:	82 81       	ldd	r24, Z+2	; 0x02
    4f70:	25 81       	ldd	r18, Z+5	; 0x05
    4f72:	98 1b       	sub	r25, r24
    4f74:	92 23       	and	r25, r18
    4f76:	84 81       	ldd	r24, Z+4	; 0x04
    4f78:	98 17       	cp	r25, r24
    4f7a:	61 f0       	breq	.+24     	; 0x4f94 <__vector_51+0x6a>
    4f7c:	83 81       	ldd	r24, Z+3	; 0x03
    4f7e:	26 95       	lsr	r18
    4f80:	28 23       	and	r18, r24
    4f82:	c0 81       	ld	r28, Z
    4f84:	d1 81       	ldd	r29, Z+1	; 0x01
    4f86:	c2 0f       	add	r28, r18
    4f88:	d1 1d       	adc	r29, r1
    4f8a:	68 83       	st	Y, r22
    4f8c:	8f 5f       	subi	r24, 0xFF	; 255
    4f8e:	95 81       	ldd	r25, Z+5	; 0x05
    4f90:	89 23       	and	r24, r25
    4f92:	83 83       	std	Z+3, r24	; 0x03
    4f94:	16 96       	adiw	r26, 0x06	; 6
    4f96:	ed 91       	ld	r30, X+
    4f98:	fc 91       	ld	r31, X
    4f9a:	17 97       	sbiw	r26, 0x07	; 7
    4f9c:	30 97       	sbiw	r30, 0x00	; 0
    4f9e:	11 f0       	breq	.+4      	; 0x4fa4 <__vector_51+0x7a>
    4fa0:	cd 01       	movw	r24, r26
    4fa2:	19 95       	eicall
    4fa4:	ff 91       	pop	r31
    4fa6:	ef 91       	pop	r30
    4fa8:	df 91       	pop	r29
    4faa:	cf 91       	pop	r28
    4fac:	bf 91       	pop	r27
    4fae:	af 91       	pop	r26
    4fb0:	9f 91       	pop	r25
    4fb2:	8f 91       	pop	r24
    4fb4:	7f 91       	pop	r23
    4fb6:	6f 91       	pop	r22
    4fb8:	5f 91       	pop	r21
    4fba:	4f 91       	pop	r20
    4fbc:	3f 91       	pop	r19
    4fbe:	2f 91       	pop	r18
    4fc0:	0f 90       	pop	r0
    4fc2:	0b be       	out	0x3b, r0	; 59
    4fc4:	0f 90       	pop	r0
    4fc6:	0f be       	out	0x3f, r0	; 63
    4fc8:	0f 90       	pop	r0
    4fca:	1f 90       	pop	r1
    4fcc:	18 95       	reti

00004fce <__vector_52>:
    4fce:	1f 92       	push	r1
    4fd0:	0f 92       	push	r0
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	0f 92       	push	r0
    4fd6:	11 24       	eor	r1, r1
    4fd8:	0b b6       	in	r0, 0x3b	; 59
    4fda:	0f 92       	push	r0
    4fdc:	2f 93       	push	r18
    4fde:	8f 93       	push	r24
    4fe0:	9f 93       	push	r25
    4fe2:	af 93       	push	r26
    4fe4:	bf 93       	push	r27
    4fe6:	ef 93       	push	r30
    4fe8:	ff 93       	push	r31
    4fea:	e0 91 ed 12 	lds	r30, 0x12ED	; 0x8012ed <_ser_handle+0x4>
    4fee:	f0 91 ee 12 	lds	r31, 0x12EE	; 0x8012ee <_ser_handle+0x5>
    4ff2:	30 97       	sbiw	r30, 0x00	; 0
    4ff4:	b9 f0       	breq	.+46     	; 0x5024 <__vector_52+0x56>
    4ff6:	02 80       	ldd	r0, Z+2	; 0x02
    4ff8:	f3 81       	ldd	r31, Z+3	; 0x03
    4ffa:	e0 2d       	mov	r30, r0
    4ffc:	93 81       	ldd	r25, Z+3	; 0x03
    4ffe:	82 81       	ldd	r24, Z+2	; 0x02
    5000:	98 17       	cp	r25, r24
    5002:	b1 f0       	breq	.+44     	; 0x5030 <__vector_52+0x62>
    5004:	92 81       	ldd	r25, Z+2	; 0x02
    5006:	85 81       	ldd	r24, Z+5	; 0x05
    5008:	28 2f       	mov	r18, r24
    500a:	26 95       	lsr	r18
    500c:	29 23       	and	r18, r25
    500e:	a0 81       	ld	r26, Z
    5010:	b1 81       	ldd	r27, Z+1	; 0x01
    5012:	a2 0f       	add	r26, r18
    5014:	b1 1d       	adc	r27, r1
    5016:	2c 91       	ld	r18, X
    5018:	9f 5f       	subi	r25, 0xFF	; 255
    501a:	89 23       	and	r24, r25
    501c:	82 83       	std	Z+2, r24	; 0x02
    501e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5022:	0b c0       	rjmp	.+22     	; 0x503a <__vector_52+0x6c>
    5024:	e1 ed       	ldi	r30, 0xD1	; 209
    5026:	f0 e0       	ldi	r31, 0x00	; 0
    5028:	80 81       	ld	r24, Z
    502a:	8f 7d       	andi	r24, 0xDF	; 223
    502c:	80 83       	st	Z, r24
    502e:	05 c0       	rjmp	.+10     	; 0x503a <__vector_52+0x6c>
    5030:	e1 ed       	ldi	r30, 0xD1	; 209
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	80 81       	ld	r24, Z
    5036:	8f 7d       	andi	r24, 0xDF	; 223
    5038:	80 83       	st	Z, r24
    503a:	ff 91       	pop	r31
    503c:	ef 91       	pop	r30
    503e:	bf 91       	pop	r27
    5040:	af 91       	pop	r26
    5042:	9f 91       	pop	r25
    5044:	8f 91       	pop	r24
    5046:	2f 91       	pop	r18
    5048:	0f 90       	pop	r0
    504a:	0b be       	out	0x3b, r0	; 59
    504c:	0f 90       	pop	r0
    504e:	0f be       	out	0x3f, r0	; 63
    5050:	0f 90       	pop	r0
    5052:	1f 90       	pop	r1
    5054:	18 95       	reti

00005056 <__vector_54>:
    5056:	1f 92       	push	r1
    5058:	0f 92       	push	r0
    505a:	0f b6       	in	r0, 0x3f	; 63
    505c:	0f 92       	push	r0
    505e:	11 24       	eor	r1, r1
    5060:	0b b6       	in	r0, 0x3b	; 59
    5062:	0f 92       	push	r0
    5064:	2f 93       	push	r18
    5066:	3f 93       	push	r19
    5068:	4f 93       	push	r20
    506a:	5f 93       	push	r21
    506c:	6f 93       	push	r22
    506e:	7f 93       	push	r23
    5070:	8f 93       	push	r24
    5072:	9f 93       	push	r25
    5074:	af 93       	push	r26
    5076:	bf 93       	push	r27
    5078:	cf 93       	push	r28
    507a:	df 93       	push	r29
    507c:	ef 93       	push	r30
    507e:	ff 93       	push	r31
    5080:	a0 91 ef 12 	lds	r26, 0x12EF	; 0x8012ef <_ser_handle+0x6>
    5084:	b0 91 f0 12 	lds	r27, 0x12F0	; 0x8012f0 <_ser_handle+0x7>
    5088:	10 97       	sbiw	r26, 0x00	; 0
    508a:	11 f1       	breq	.+68     	; 0x50d0 <__vector_54+0x7a>
    508c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5090:	14 96       	adiw	r26, 0x04	; 4
    5092:	ed 91       	ld	r30, X+
    5094:	fc 91       	ld	r31, X
    5096:	15 97       	sbiw	r26, 0x05	; 5
    5098:	93 81       	ldd	r25, Z+3	; 0x03
    509a:	82 81       	ldd	r24, Z+2	; 0x02
    509c:	25 81       	ldd	r18, Z+5	; 0x05
    509e:	98 1b       	sub	r25, r24
    50a0:	92 23       	and	r25, r18
    50a2:	84 81       	ldd	r24, Z+4	; 0x04
    50a4:	98 17       	cp	r25, r24
    50a6:	61 f0       	breq	.+24     	; 0x50c0 <__vector_54+0x6a>
    50a8:	83 81       	ldd	r24, Z+3	; 0x03
    50aa:	26 95       	lsr	r18
    50ac:	28 23       	and	r18, r24
    50ae:	c0 81       	ld	r28, Z
    50b0:	d1 81       	ldd	r29, Z+1	; 0x01
    50b2:	c2 0f       	add	r28, r18
    50b4:	d1 1d       	adc	r29, r1
    50b6:	68 83       	st	Y, r22
    50b8:	8f 5f       	subi	r24, 0xFF	; 255
    50ba:	95 81       	ldd	r25, Z+5	; 0x05
    50bc:	89 23       	and	r24, r25
    50be:	83 83       	std	Z+3, r24	; 0x03
    50c0:	16 96       	adiw	r26, 0x06	; 6
    50c2:	ed 91       	ld	r30, X+
    50c4:	fc 91       	ld	r31, X
    50c6:	17 97       	sbiw	r26, 0x07	; 7
    50c8:	30 97       	sbiw	r30, 0x00	; 0
    50ca:	11 f0       	breq	.+4      	; 0x50d0 <__vector_54+0x7a>
    50cc:	cd 01       	movw	r24, r26
    50ce:	19 95       	eicall
    50d0:	ff 91       	pop	r31
    50d2:	ef 91       	pop	r30
    50d4:	df 91       	pop	r29
    50d6:	cf 91       	pop	r28
    50d8:	bf 91       	pop	r27
    50da:	af 91       	pop	r26
    50dc:	9f 91       	pop	r25
    50de:	8f 91       	pop	r24
    50e0:	7f 91       	pop	r23
    50e2:	6f 91       	pop	r22
    50e4:	5f 91       	pop	r21
    50e6:	4f 91       	pop	r20
    50e8:	3f 91       	pop	r19
    50ea:	2f 91       	pop	r18
    50ec:	0f 90       	pop	r0
    50ee:	0b be       	out	0x3b, r0	; 59
    50f0:	0f 90       	pop	r0
    50f2:	0f be       	out	0x3f, r0	; 63
    50f4:	0f 90       	pop	r0
    50f6:	1f 90       	pop	r1
    50f8:	18 95       	reti

000050fa <__vector_55>:
    50fa:	1f 92       	push	r1
    50fc:	0f 92       	push	r0
    50fe:	0f b6       	in	r0, 0x3f	; 63
    5100:	0f 92       	push	r0
    5102:	11 24       	eor	r1, r1
    5104:	0b b6       	in	r0, 0x3b	; 59
    5106:	0f 92       	push	r0
    5108:	2f 93       	push	r18
    510a:	8f 93       	push	r24
    510c:	9f 93       	push	r25
    510e:	af 93       	push	r26
    5110:	bf 93       	push	r27
    5112:	ef 93       	push	r30
    5114:	ff 93       	push	r31
    5116:	e0 91 ef 12 	lds	r30, 0x12EF	; 0x8012ef <_ser_handle+0x6>
    511a:	f0 91 f0 12 	lds	r31, 0x12F0	; 0x8012f0 <_ser_handle+0x7>
    511e:	30 97       	sbiw	r30, 0x00	; 0
    5120:	b9 f0       	breq	.+46     	; 0x5150 <__vector_55+0x56>
    5122:	02 80       	ldd	r0, Z+2	; 0x02
    5124:	f3 81       	ldd	r31, Z+3	; 0x03
    5126:	e0 2d       	mov	r30, r0
    5128:	93 81       	ldd	r25, Z+3	; 0x03
    512a:	82 81       	ldd	r24, Z+2	; 0x02
    512c:	98 17       	cp	r25, r24
    512e:	b1 f0       	breq	.+44     	; 0x515c <__vector_55+0x62>
    5130:	92 81       	ldd	r25, Z+2	; 0x02
    5132:	85 81       	ldd	r24, Z+5	; 0x05
    5134:	28 2f       	mov	r18, r24
    5136:	26 95       	lsr	r18
    5138:	29 23       	and	r18, r25
    513a:	a0 81       	ld	r26, Z
    513c:	b1 81       	ldd	r27, Z+1	; 0x01
    513e:	a2 0f       	add	r26, r18
    5140:	b1 1d       	adc	r27, r1
    5142:	2c 91       	ld	r18, X
    5144:	9f 5f       	subi	r25, 0xFF	; 255
    5146:	89 23       	and	r24, r25
    5148:	82 83       	std	Z+2, r24	; 0x02
    514a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    514e:	0b c0       	rjmp	.+22     	; 0x5166 <__vector_55+0x6c>
    5150:	e1 e3       	ldi	r30, 0x31	; 49
    5152:	f1 e0       	ldi	r31, 0x01	; 1
    5154:	80 81       	ld	r24, Z
    5156:	8f 7d       	andi	r24, 0xDF	; 223
    5158:	80 83       	st	Z, r24
    515a:	05 c0       	rjmp	.+10     	; 0x5166 <__vector_55+0x6c>
    515c:	e1 e3       	ldi	r30, 0x31	; 49
    515e:	f1 e0       	ldi	r31, 0x01	; 1
    5160:	80 81       	ld	r24, Z
    5162:	8f 7d       	andi	r24, 0xDF	; 223
    5164:	80 83       	st	Z, r24
    5166:	ff 91       	pop	r31
    5168:	ef 91       	pop	r30
    516a:	bf 91       	pop	r27
    516c:	af 91       	pop	r26
    516e:	9f 91       	pop	r25
    5170:	8f 91       	pop	r24
    5172:	2f 91       	pop	r18
    5174:	0f 90       	pop	r0
    5176:	0b be       	out	0x3b, r0	; 59
    5178:	0f 90       	pop	r0
    517a:	0f be       	out	0x3f, r0	; 63
    517c:	0f 90       	pop	r0
    517e:	1f 90       	pop	r1
    5180:	18 95       	reti

00005182 <usart_getchar>:
    5182:	cf 93       	push	r28
    5184:	df 93       	push	r29
    5186:	1f 92       	push	r1
    5188:	cd b7       	in	r28, 0x3d	; 61
    518a:	de b7       	in	r29, 0x3e	; 62
    518c:	be 01       	movw	r22, r28
    518e:	6f 5f       	subi	r22, 0xFF	; 255
    5190:	7f 4f       	sbci	r23, 0xFF	; 255
    5192:	80 91 f1 12 	lds	r24, 0x12F1	; 0x8012f1 <_com_serial_instance>
    5196:	90 91 f2 12 	lds	r25, 0x12F2	; 0x8012f2 <_com_serial_instance+0x1>
    519a:	7b dd       	rcall	.-1290   	; 0x4c92 <serial_getByte>
    519c:	81 11       	cpse	r24, r1
    519e:	f6 cf       	rjmp	.-20     	; 0x518c <usart_getchar+0xa>
    51a0:	89 81       	ldd	r24, Y+1	; 0x01
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	0f 90       	pop	r0
    51a6:	df 91       	pop	r29
    51a8:	cf 91       	pop	r28
    51aa:	08 95       	ret

000051ac <usart_putchar>:
    51ac:	68 2f       	mov	r22, r24
    51ae:	80 91 f1 12 	lds	r24, 0x12F1	; 0x8012f1 <_com_serial_instance>
    51b2:	90 91 f2 12 	lds	r25, 0x12F2	; 0x8012f2 <_com_serial_instance+0x1>
    51b6:	ed dc       	rcall	.-1574   	; 0x4b92 <serial_sendByte>
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	08 95       	ret

000051be <stdio_initialise>:
    51be:	8f 92       	push	r8
    51c0:	9f 92       	push	r9
    51c2:	af 92       	push	r10
    51c4:	cf 92       	push	r12
    51c6:	ef 92       	push	r14
    51c8:	0f 93       	push	r16
    51ca:	81 2c       	mov	r8, r1
    51cc:	91 2c       	mov	r9, r1
    51ce:	68 94       	set
    51d0:	aa 24       	eor	r10, r10
    51d2:	a7 f8       	bld	r10, 7
    51d4:	68 94       	set
    51d6:	cc 24       	eor	r12, r12
    51d8:	c7 f8       	bld	r12, 7
    51da:	e1 2c       	mov	r14, r1
    51dc:	00 e0       	ldi	r16, 0x00	; 0
    51de:	23 e0       	ldi	r18, 0x03	; 3
    51e0:	40 e0       	ldi	r20, 0x00	; 0
    51e2:	51 ee       	ldi	r21, 0xE1	; 225
    51e4:	60 e0       	ldi	r22, 0x00	; 0
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	31 dc       	rcall	.-1950   	; 0x4a4c <serial_create>
    51ea:	90 93 f2 12 	sts	0x12F2, r25	; 0x8012f2 <_com_serial_instance+0x1>
    51ee:	80 93 f1 12 	sts	0x12F1, r24	; 0x8012f1 <_com_serial_instance>
    51f2:	e9 e1       	ldi	r30, 0x19	; 25
    51f4:	f3 e1       	ldi	r31, 0x13	; 19
    51f6:	83 e1       	ldi	r24, 0x13	; 19
    51f8:	92 e0       	ldi	r25, 0x02	; 2
    51fa:	91 83       	std	Z+1, r25	; 0x01
    51fc:	80 83       	st	Z, r24
    51fe:	93 83       	std	Z+3, r25	; 0x03
    5200:	82 83       	std	Z+2, r24	; 0x02
    5202:	0f 91       	pop	r16
    5204:	ef 90       	pop	r14
    5206:	cf 90       	pop	r12
    5208:	af 90       	pop	r10
    520a:	9f 90       	pop	r9
    520c:	8f 90       	pop	r8
    520e:	08 95       	ret

00005210 <_initTwiInterface>:
    5210:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <_twiIsInitiated>
    5214:	81 11       	cpse	r24, r1
    5216:	0c c0       	rjmp	.+24     	; 0x5230 <_initTwiInterface+0x20>
    5218:	8c e0       	ldi	r24, 0x0C	; 12
    521a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    521e:	8f ef       	ldi	r24, 0xFF	; 255
    5220:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5224:	84 e0       	ldi	r24, 0x04	; 4
    5226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	80 93 01 13 	sts	0x1301, r24	; 0x801301 <_twiIsInitiated>
    5230:	08 95       	ret

00005232 <twiCreate>:
    5232:	af 92       	push	r10
    5234:	bf 92       	push	r11
    5236:	cf 92       	push	r12
    5238:	df 92       	push	r13
    523a:	ef 92       	push	r14
    523c:	ff 92       	push	r15
    523e:	0f 93       	push	r16
    5240:	1f 93       	push	r17
    5242:	cf 93       	push	r28
    5244:	df 93       	push	r29
    5246:	a8 2e       	mov	r10, r24
    5248:	b6 2e       	mov	r11, r22
    524a:	69 01       	movw	r12, r18
    524c:	7a 01       	movw	r14, r20
    524e:	84 e0       	ldi	r24, 0x04	; 4
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	08 d6       	rcall	.+3088   	; 0x5e64 <malloc>
    5254:	ec 01       	movw	r28, r24
    5256:	89 2b       	or	r24, r25
    5258:	61 f1       	breq	.+88     	; 0x52b2 <twiCreate+0x80>
    525a:	a8 82       	st	Y, r10
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	b8 12       	cpse	r11, r24
    5260:	12 c0       	rjmp	.+36     	; 0x5286 <twiCreate+0x54>
    5262:	c7 01       	movw	r24, r14
    5264:	b6 01       	movw	r22, r12
    5266:	20 ea       	ldi	r18, 0xA0	; 160
    5268:	36 e8       	ldi	r19, 0x86	; 134
    526a:	41 e0       	ldi	r20, 0x01	; 1
    526c:	50 e0       	ldi	r21, 0x00	; 0
    526e:	c1 d5       	rcall	.+2946   	; 0x5df2 <__udivmodsi4>
    5270:	da 01       	movw	r26, r20
    5272:	c9 01       	movw	r24, r18
    5274:	40 97       	sbiw	r24, 0x10	; 16
    5276:	a1 09       	sbc	r26, r1
    5278:	b1 09       	sbc	r27, r1
    527a:	b6 95       	lsr	r27
    527c:	a7 95       	ror	r26
    527e:	97 95       	ror	r25
    5280:	87 95       	ror	r24
    5282:	89 83       	std	Y+1, r24	; 0x01
    5284:	11 c0       	rjmp	.+34     	; 0x52a8 <twiCreate+0x76>
    5286:	c7 01       	movw	r24, r14
    5288:	b6 01       	movw	r22, r12
    528a:	20 e8       	ldi	r18, 0x80	; 128
    528c:	3a e1       	ldi	r19, 0x1A	; 26
    528e:	46 e0       	ldi	r20, 0x06	; 6
    5290:	50 e0       	ldi	r21, 0x00	; 0
    5292:	af d5       	rcall	.+2910   	; 0x5df2 <__udivmodsi4>
    5294:	da 01       	movw	r26, r20
    5296:	c9 01       	movw	r24, r18
    5298:	40 97       	sbiw	r24, 0x10	; 16
    529a:	a1 09       	sbc	r26, r1
    529c:	b1 09       	sbc	r27, r1
    529e:	b6 95       	lsr	r27
    52a0:	a7 95       	ror	r26
    52a2:	97 95       	ror	r25
    52a4:	87 95       	ror	r24
    52a6:	89 83       	std	Y+1, r24	; 0x01
    52a8:	1b 83       	std	Y+3, r17	; 0x03
    52aa:	0a 83       	std	Y+2, r16	; 0x02
    52ac:	8c 2f       	mov	r24, r28
    52ae:	9d 2f       	mov	r25, r29
    52b0:	02 c0       	rjmp	.+4      	; 0x52b6 <twiCreate+0x84>
    52b2:	80 e0       	ldi	r24, 0x00	; 0
    52b4:	90 e0       	ldi	r25, 0x00	; 0
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	1f 91       	pop	r17
    52bc:	0f 91       	pop	r16
    52be:	ff 90       	pop	r15
    52c0:	ef 90       	pop	r14
    52c2:	df 90       	pop	r13
    52c4:	cf 90       	pop	r12
    52c6:	bf 90       	pop	r11
    52c8:	af 90       	pop	r10
    52ca:	08 95       	ret

000052cc <twiIsBusy>:
    52cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52d0:	81 70       	andi	r24, 0x01	; 1
    52d2:	08 95       	ret

000052d4 <twiTransmit>:
    52d4:	ff 92       	push	r15
    52d6:	0f 93       	push	r16
    52d8:	1f 93       	push	r17
    52da:	cf 93       	push	r28
    52dc:	df 93       	push	r29
    52de:	00 97       	sbiw	r24, 0x00	; 0
    52e0:	d1 f1       	breq	.+116    	; 0x5356 <twiTransmit+0x82>
    52e2:	4a 30       	cpi	r20, 0x0A	; 10
    52e4:	d0 f5       	brcc	.+116    	; 0x535a <twiTransmit+0x86>
    52e6:	f4 2e       	mov	r15, r20
    52e8:	8b 01       	movw	r16, r22
    52ea:	ec 01       	movw	r28, r24
    52ec:	ef df       	rcall	.-34     	; 0x52cc <twiIsBusy>
    52ee:	81 11       	cpse	r24, r1
    52f0:	36 c0       	rjmp	.+108    	; 0x535e <twiTransmit+0x8a>
    52f2:	80 91 f4 12 	lds	r24, 0x12F4	; 0x8012f4 <_twiCurrentHandler>
    52f6:	90 91 f5 12 	lds	r25, 0x12F5	; 0x8012f5 <_twiCurrentHandler+0x1>
    52fa:	c8 17       	cp	r28, r24
    52fc:	d9 07       	cpc	r29, r25
    52fe:	41 f0       	breq	.+16     	; 0x5310 <twiTransmit+0x3c>
    5300:	87 df       	rcall	.-242    	; 0x5210 <_initTwiInterface>
    5302:	89 81       	ldd	r24, Y+1	; 0x01
    5304:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5308:	d0 93 f5 12 	sts	0x12F5, r29	; 0x8012f5 <_twiCurrentHandler+0x1>
    530c:	c0 93 f4 12 	sts	0x12F4, r28	; 0x8012f4 <_twiCurrentHandler>
    5310:	81 e0       	ldi	r24, 0x01	; 1
    5312:	8f 0d       	add	r24, r15
    5314:	80 93 f6 12 	sts	0x12F6, r24	; 0x8012f6 <_twiMessageLen>
    5318:	88 81       	ld	r24, Y
    531a:	88 0f       	add	r24, r24
    531c:	80 93 f7 12 	sts	0x12F7, r24	; 0x8012f7 <_twiMessageBuffer>
    5320:	ff 20       	and	r15, r15
    5322:	89 f0       	breq	.+34     	; 0x5346 <twiTransmit+0x72>
    5324:	f8 01       	movw	r30, r16
    5326:	a8 ef       	ldi	r26, 0xF8	; 248
    5328:	b2 e1       	ldi	r27, 0x12	; 18
    532a:	4f ef       	ldi	r20, 0xFF	; 255
    532c:	4f 0d       	add	r20, r15
    532e:	64 2f       	mov	r22, r20
    5330:	70 e0       	ldi	r23, 0x00	; 0
    5332:	cb 01       	movw	r24, r22
    5334:	01 96       	adiw	r24, 0x01	; 1
    5336:	b8 01       	movw	r22, r16
    5338:	68 0f       	add	r22, r24
    533a:	79 1f       	adc	r23, r25
    533c:	81 91       	ld	r24, Z+
    533e:	8d 93       	st	X+, r24
    5340:	e6 17       	cp	r30, r22
    5342:	f7 07       	cpc	r31, r23
    5344:	d9 f7       	brne	.-10     	; 0x533c <twiTransmit+0x68>
    5346:	88 ef       	ldi	r24, 0xF8	; 248
    5348:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    534c:	85 ea       	ldi	r24, 0xA5	; 165
    534e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5352:	84 e0       	ldi	r24, 0x04	; 4
    5354:	05 c0       	rjmp	.+10     	; 0x5360 <twiTransmit+0x8c>
    5356:	86 e0       	ldi	r24, 0x06	; 6
    5358:	03 c0       	rjmp	.+6      	; 0x5360 <twiTransmit+0x8c>
    535a:	87 e0       	ldi	r24, 0x07	; 7
    535c:	01 c0       	rjmp	.+2      	; 0x5360 <twiTransmit+0x8c>
    535e:	82 e0       	ldi	r24, 0x02	; 2
    5360:	df 91       	pop	r29
    5362:	cf 91       	pop	r28
    5364:	1f 91       	pop	r17
    5366:	0f 91       	pop	r16
    5368:	ff 90       	pop	r15
    536a:	08 95       	ret

0000536c <twiReceive>:
    536c:	1f 93       	push	r17
    536e:	cf 93       	push	r28
    5370:	df 93       	push	r29
    5372:	00 97       	sbiw	r24, 0x00	; 0
    5374:	29 f1       	breq	.+74     	; 0x53c0 <twiReceive+0x54>
    5376:	6b 30       	cpi	r22, 0x0B	; 11
    5378:	28 f5       	brcc	.+74     	; 0x53c4 <twiReceive+0x58>
    537a:	16 2f       	mov	r17, r22
    537c:	ec 01       	movw	r28, r24
    537e:	a6 df       	rcall	.-180    	; 0x52cc <twiIsBusy>
    5380:	81 11       	cpse	r24, r1
    5382:	22 c0       	rjmp	.+68     	; 0x53c8 <twiReceive+0x5c>
    5384:	80 91 f4 12 	lds	r24, 0x12F4	; 0x8012f4 <_twiCurrentHandler>
    5388:	90 91 f5 12 	lds	r25, 0x12F5	; 0x8012f5 <_twiCurrentHandler+0x1>
    538c:	c8 17       	cp	r28, r24
    538e:	d9 07       	cpc	r29, r25
    5390:	41 f0       	breq	.+16     	; 0x53a2 <twiReceive+0x36>
    5392:	3e df       	rcall	.-388    	; 0x5210 <_initTwiInterface>
    5394:	89 81       	ldd	r24, Y+1	; 0x01
    5396:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    539a:	d0 93 f5 12 	sts	0x12F5, r29	; 0x8012f5 <_twiCurrentHandler+0x1>
    539e:	c0 93 f4 12 	sts	0x12F4, r28	; 0x8012f4 <_twiCurrentHandler>
    53a2:	10 93 f6 12 	sts	0x12F6, r17	; 0x8012f6 <_twiMessageLen>
    53a6:	88 81       	ld	r24, Y
    53a8:	88 0f       	add	r24, r24
    53aa:	81 60       	ori	r24, 0x01	; 1
    53ac:	80 93 f7 12 	sts	0x12F7, r24	; 0x8012f7 <_twiMessageBuffer>
    53b0:	88 ef       	ldi	r24, 0xF8	; 248
    53b2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    53b6:	85 ea       	ldi	r24, 0xA5	; 165
    53b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53bc:	85 e0       	ldi	r24, 0x05	; 5
    53be:	05 c0       	rjmp	.+10     	; 0x53ca <twiReceive+0x5e>
    53c0:	86 e0       	ldi	r24, 0x06	; 6
    53c2:	03 c0       	rjmp	.+6      	; 0x53ca <twiReceive+0x5e>
    53c4:	87 e0       	ldi	r24, 0x07	; 7
    53c6:	01 c0       	rjmp	.+2      	; 0x53ca <twiReceive+0x5e>
    53c8:	82 e0       	ldi	r24, 0x02	; 2
    53ca:	df 91       	pop	r29
    53cc:	cf 91       	pop	r28
    53ce:	1f 91       	pop	r17
    53d0:	08 95       	ret

000053d2 <__vector_39>:
    53d2:	1f 92       	push	r1
    53d4:	0f 92       	push	r0
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	0f 92       	push	r0
    53da:	11 24       	eor	r1, r1
    53dc:	0b b6       	in	r0, 0x3b	; 59
    53de:	0f 92       	push	r0
    53e0:	2f 93       	push	r18
    53e2:	3f 93       	push	r19
    53e4:	4f 93       	push	r20
    53e6:	5f 93       	push	r21
    53e8:	6f 93       	push	r22
    53ea:	7f 93       	push	r23
    53ec:	8f 93       	push	r24
    53ee:	9f 93       	push	r25
    53f0:	af 93       	push	r26
    53f2:	bf 93       	push	r27
    53f4:	ef 93       	push	r30
    53f6:	ff 93       	push	r31
    53f8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    53fc:	8e 2f       	mov	r24, r30
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	fc 01       	movw	r30, r24
    5402:	38 97       	sbiw	r30, 0x08	; 8
    5404:	e1 35       	cpi	r30, 0x51	; 81
    5406:	f1 05       	cpc	r31, r1
    5408:	08 f0       	brcs	.+2      	; 0x540c <__vector_39+0x3a>
    540a:	75 c0       	rjmp	.+234    	; 0x54f6 <__vector_39+0x124>
    540c:	88 27       	eor	r24, r24
    540e:	e4 58       	subi	r30, 0x84	; 132
    5410:	ff 4f       	sbci	r31, 0xFF	; 255
    5412:	8f 4f       	sbci	r24, 0xFF	; 255
    5414:	10 c5       	rjmp	.+2592   	; 0x5e36 <__tablejump2__>
    5416:	10 92 f3 12 	sts	0x12F3, r1	; 0x8012f3 <_index.1885>
    541a:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <_index.1885>
    541e:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <_twiMessageLen>
    5422:	e8 17       	cp	r30, r24
    5424:	70 f4       	brcc	.+28     	; 0x5442 <__vector_39+0x70>
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	8e 0f       	add	r24, r30
    542a:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <_index.1885>
    542e:	f0 e0       	ldi	r31, 0x00	; 0
    5430:	e9 50       	subi	r30, 0x09	; 9
    5432:	fd 4e       	sbci	r31, 0xED	; 237
    5434:	80 81       	ld	r24, Z
    5436:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    543a:	85 e8       	ldi	r24, 0x85	; 133
    543c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5440:	72 c0       	rjmp	.+228    	; 0x5526 <__vector_39+0x154>
    5442:	84 e9       	ldi	r24, 0x94	; 148
    5444:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5448:	80 91 f4 12 	lds	r24, 0x12F4	; 0x8012f4 <_twiCurrentHandler>
    544c:	90 91 f5 12 	lds	r25, 0x12F5	; 0x8012f5 <_twiCurrentHandler+0x1>
    5450:	dc 01       	movw	r26, r24
    5452:	12 96       	adiw	r26, 0x02	; 2
    5454:	ed 91       	ld	r30, X+
    5456:	fc 91       	ld	r31, X
    5458:	13 97       	sbiw	r26, 0x03	; 3
    545a:	30 97       	sbiw	r30, 0x00	; 0
    545c:	09 f4       	brne	.+2      	; 0x5460 <__vector_39+0x8e>
    545e:	63 c0       	rjmp	.+198    	; 0x5526 <__vector_39+0x154>
    5460:	20 e0       	ldi	r18, 0x00	; 0
    5462:	40 e0       	ldi	r20, 0x00	; 0
    5464:	50 e0       	ldi	r21, 0x00	; 0
    5466:	64 e0       	ldi	r22, 0x04	; 4
    5468:	19 95       	eicall
    546a:	5d c0       	rjmp	.+186    	; 0x5526 <__vector_39+0x154>
    546c:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <_index.1885>
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	8e 0f       	add	r24, r30
    5474:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <_index.1885>
    5478:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    547c:	f0 e0       	ldi	r31, 0x00	; 0
    547e:	e9 50       	subi	r30, 0x09	; 9
    5480:	fd 4e       	sbci	r31, 0xED	; 237
    5482:	80 83       	st	Z, r24
    5484:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5488:	80 34       	cpi	r24, 0x40	; 64
    548a:	11 f4       	brne	.+4      	; 0x5490 <__vector_39+0xbe>
    548c:	10 92 f3 12 	sts	0x12F3, r1	; 0x8012f3 <_index.1885>
    5490:	20 91 f3 12 	lds	r18, 0x12F3	; 0x8012f3 <_index.1885>
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <_twiMessageLen>
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	28 17       	cp	r18, r24
    54a0:	39 07       	cpc	r19, r25
    54a2:	24 f4       	brge	.+8      	; 0x54ac <__vector_39+0xda>
    54a4:	85 ec       	ldi	r24, 0xC5	; 197
    54a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54aa:	3d c0       	rjmp	.+122    	; 0x5526 <__vector_39+0x154>
    54ac:	85 e8       	ldi	r24, 0x85	; 133
    54ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54b2:	39 c0       	rjmp	.+114    	; 0x5526 <__vector_39+0x154>
    54b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54b8:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <_index.1885>
    54bc:	f0 e0       	ldi	r31, 0x00	; 0
    54be:	e9 50       	subi	r30, 0x09	; 9
    54c0:	fd 4e       	sbci	r31, 0xED	; 237
    54c2:	80 83       	st	Z, r24
    54c4:	84 e9       	ldi	r24, 0x94	; 148
    54c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54ca:	80 91 f4 12 	lds	r24, 0x12F4	; 0x8012f4 <_twiCurrentHandler>
    54ce:	90 91 f5 12 	lds	r25, 0x12F5	; 0x8012f5 <_twiCurrentHandler+0x1>
    54d2:	dc 01       	movw	r26, r24
    54d4:	12 96       	adiw	r26, 0x02	; 2
    54d6:	ed 91       	ld	r30, X+
    54d8:	fc 91       	ld	r31, X
    54da:	13 97       	sbiw	r26, 0x03	; 3
    54dc:	30 97       	sbiw	r30, 0x00	; 0
    54de:	19 f1       	breq	.+70     	; 0x5526 <__vector_39+0x154>
    54e0:	20 91 f6 12 	lds	r18, 0x12F6	; 0x8012f6 <_twiMessageLen>
    54e4:	47 ef       	ldi	r20, 0xF7	; 247
    54e6:	52 e1       	ldi	r21, 0x12	; 18
    54e8:	65 e0       	ldi	r22, 0x05	; 5
    54ea:	19 95       	eicall
    54ec:	1c c0       	rjmp	.+56     	; 0x5526 <__vector_39+0x154>
    54ee:	85 ea       	ldi	r24, 0xA5	; 165
    54f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54f4:	18 c0       	rjmp	.+48     	; 0x5526 <__vector_39+0x154>
    54f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54fa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54fe:	84 e0       	ldi	r24, 0x04	; 4
    5500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5504:	80 91 f4 12 	lds	r24, 0x12F4	; 0x8012f4 <_twiCurrentHandler>
    5508:	90 91 f5 12 	lds	r25, 0x12F5	; 0x8012f5 <_twiCurrentHandler+0x1>
    550c:	dc 01       	movw	r26, r24
    550e:	12 96       	adiw	r26, 0x02	; 2
    5510:	ed 91       	ld	r30, X+
    5512:	fc 91       	ld	r31, X
    5514:	13 97       	sbiw	r26, 0x03	; 3
    5516:	30 97       	sbiw	r30, 0x00	; 0
    5518:	31 f0       	breq	.+12     	; 0x5526 <__vector_39+0x154>
    551a:	20 e0       	ldi	r18, 0x00	; 0
    551c:	40 e0       	ldi	r20, 0x00	; 0
    551e:	50 e0       	ldi	r21, 0x00	; 0
    5520:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5524:	19 95       	eicall
    5526:	ff 91       	pop	r31
    5528:	ef 91       	pop	r30
    552a:	bf 91       	pop	r27
    552c:	af 91       	pop	r26
    552e:	9f 91       	pop	r25
    5530:	8f 91       	pop	r24
    5532:	7f 91       	pop	r23
    5534:	6f 91       	pop	r22
    5536:	5f 91       	pop	r21
    5538:	4f 91       	pop	r20
    553a:	3f 91       	pop	r19
    553c:	2f 91       	pop	r18
    553e:	0f 90       	pop	r0
    5540:	0b be       	out	0x3b, r0	; 59
    5542:	0f 90       	pop	r0
    5544:	0f be       	out	0x3f, r0	; 63
    5546:	0f 90       	pop	r0
    5548:	1f 90       	pop	r1
    554a:	18 95       	reti

0000554c <fifo_init>:
    554c:	fc 01       	movw	r30, r24
    554e:	41 11       	cpse	r20, r1
    5550:	01 c0       	rjmp	.+2      	; 0x5554 <fifo_init+0x8>
    5552:	a9 d5       	rcall	.+2898   	; 0x60a6 <abort>
    5554:	84 2f       	mov	r24, r20
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	9c 01       	movw	r18, r24
    555a:	21 50       	subi	r18, 0x01	; 1
    555c:	31 09       	sbc	r19, r1
    555e:	82 23       	and	r24, r18
    5560:	93 23       	and	r25, r19
    5562:	89 2b       	or	r24, r25
    5564:	09 f0       	breq	.+2      	; 0x5568 <fifo_init+0x1c>
    5566:	9f d5       	rcall	.+2878   	; 0x60a6 <abort>
    5568:	41 38       	cpi	r20, 0x81	; 129
    556a:	08 f0       	brcs	.+2      	; 0x556e <fifo_init+0x22>
    556c:	9c d5       	rcall	.+2872   	; 0x60a6 <abort>
    556e:	12 82       	std	Z+2, r1	; 0x02
    5570:	13 82       	std	Z+3, r1	; 0x03
    5572:	44 83       	std	Z+4, r20	; 0x04
    5574:	44 0f       	add	r20, r20
    5576:	41 50       	subi	r20, 0x01	; 1
    5578:	45 83       	std	Z+5, r20	; 0x05
    557a:	71 83       	std	Z+1, r23	; 0x01
    557c:	60 83       	st	Z, r22
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	08 95       	ret

00005584 <vfprintf>:
    5584:	2f 92       	push	r2
    5586:	3f 92       	push	r3
    5588:	4f 92       	push	r4
    558a:	5f 92       	push	r5
    558c:	6f 92       	push	r6
    558e:	7f 92       	push	r7
    5590:	8f 92       	push	r8
    5592:	9f 92       	push	r9
    5594:	af 92       	push	r10
    5596:	bf 92       	push	r11
    5598:	cf 92       	push	r12
    559a:	df 92       	push	r13
    559c:	ef 92       	push	r14
    559e:	ff 92       	push	r15
    55a0:	0f 93       	push	r16
    55a2:	1f 93       	push	r17
    55a4:	cf 93       	push	r28
    55a6:	df 93       	push	r29
    55a8:	cd b7       	in	r28, 0x3d	; 61
    55aa:	de b7       	in	r29, 0x3e	; 62
    55ac:	60 97       	sbiw	r28, 0x10	; 16
    55ae:	0f b6       	in	r0, 0x3f	; 63
    55b0:	f8 94       	cli
    55b2:	de bf       	out	0x3e, r29	; 62
    55b4:	0f be       	out	0x3f, r0	; 63
    55b6:	cd bf       	out	0x3d, r28	; 61
    55b8:	7c 01       	movw	r14, r24
    55ba:	1b 01       	movw	r2, r22
    55bc:	6a 01       	movw	r12, r20
    55be:	fc 01       	movw	r30, r24
    55c0:	17 82       	std	Z+7, r1	; 0x07
    55c2:	16 82       	std	Z+6, r1	; 0x06
    55c4:	83 81       	ldd	r24, Z+3	; 0x03
    55c6:	81 ff       	sbrs	r24, 1
    55c8:	2a c3       	rjmp	.+1620   	; 0x5c1e <vfprintf+0x69a>
    55ca:	9e 01       	movw	r18, r28
    55cc:	2f 5f       	subi	r18, 0xFF	; 255
    55ce:	3f 4f       	sbci	r19, 0xFF	; 255
    55d0:	39 01       	movw	r6, r18
    55d2:	f7 01       	movw	r30, r14
    55d4:	93 81       	ldd	r25, Z+3	; 0x03
    55d6:	f1 01       	movw	r30, r2
    55d8:	93 fd       	sbrc	r25, 3
    55da:	85 91       	lpm	r24, Z+
    55dc:	93 ff       	sbrs	r25, 3
    55de:	81 91       	ld	r24, Z+
    55e0:	1f 01       	movw	r2, r30
    55e2:	88 23       	and	r24, r24
    55e4:	09 f4       	brne	.+2      	; 0x55e8 <vfprintf+0x64>
    55e6:	17 c3       	rjmp	.+1582   	; 0x5c16 <vfprintf+0x692>
    55e8:	85 32       	cpi	r24, 0x25	; 37
    55ea:	39 f4       	brne	.+14     	; 0x55fa <vfprintf+0x76>
    55ec:	93 fd       	sbrc	r25, 3
    55ee:	85 91       	lpm	r24, Z+
    55f0:	93 ff       	sbrs	r25, 3
    55f2:	81 91       	ld	r24, Z+
    55f4:	1f 01       	movw	r2, r30
    55f6:	85 32       	cpi	r24, 0x25	; 37
    55f8:	31 f4       	brne	.+12     	; 0x5606 <vfprintf+0x82>
    55fa:	b7 01       	movw	r22, r14
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	a4 d6       	rcall	.+3400   	; 0x6348 <fputc>
    5600:	56 01       	movw	r10, r12
    5602:	65 01       	movw	r12, r10
    5604:	e6 cf       	rjmp	.-52     	; 0x55d2 <vfprintf+0x4e>
    5606:	10 e0       	ldi	r17, 0x00	; 0
    5608:	51 2c       	mov	r5, r1
    560a:	91 2c       	mov	r9, r1
    560c:	ff e1       	ldi	r31, 0x1F	; 31
    560e:	f9 15       	cp	r31, r9
    5610:	d8 f0       	brcs	.+54     	; 0x5648 <vfprintf+0xc4>
    5612:	8b 32       	cpi	r24, 0x2B	; 43
    5614:	79 f0       	breq	.+30     	; 0x5634 <vfprintf+0xb0>
    5616:	38 f4       	brcc	.+14     	; 0x5626 <vfprintf+0xa2>
    5618:	80 32       	cpi	r24, 0x20	; 32
    561a:	79 f0       	breq	.+30     	; 0x563a <vfprintf+0xb6>
    561c:	83 32       	cpi	r24, 0x23	; 35
    561e:	a1 f4       	brne	.+40     	; 0x5648 <vfprintf+0xc4>
    5620:	f9 2d       	mov	r31, r9
    5622:	f0 61       	ori	r31, 0x10	; 16
    5624:	2e c0       	rjmp	.+92     	; 0x5682 <vfprintf+0xfe>
    5626:	8d 32       	cpi	r24, 0x2D	; 45
    5628:	61 f0       	breq	.+24     	; 0x5642 <vfprintf+0xbe>
    562a:	80 33       	cpi	r24, 0x30	; 48
    562c:	69 f4       	brne	.+26     	; 0x5648 <vfprintf+0xc4>
    562e:	29 2d       	mov	r18, r9
    5630:	21 60       	ori	r18, 0x01	; 1
    5632:	2d c0       	rjmp	.+90     	; 0x568e <vfprintf+0x10a>
    5634:	39 2d       	mov	r19, r9
    5636:	32 60       	ori	r19, 0x02	; 2
    5638:	93 2e       	mov	r9, r19
    563a:	89 2d       	mov	r24, r9
    563c:	84 60       	ori	r24, 0x04	; 4
    563e:	98 2e       	mov	r9, r24
    5640:	2a c0       	rjmp	.+84     	; 0x5696 <vfprintf+0x112>
    5642:	e9 2d       	mov	r30, r9
    5644:	e8 60       	ori	r30, 0x08	; 8
    5646:	15 c0       	rjmp	.+42     	; 0x5672 <vfprintf+0xee>
    5648:	97 fc       	sbrc	r9, 7
    564a:	2d c0       	rjmp	.+90     	; 0x56a6 <vfprintf+0x122>
    564c:	20 ed       	ldi	r18, 0xD0	; 208
    564e:	28 0f       	add	r18, r24
    5650:	2a 30       	cpi	r18, 0x0A	; 10
    5652:	88 f4       	brcc	.+34     	; 0x5676 <vfprintf+0xf2>
    5654:	96 fe       	sbrs	r9, 6
    5656:	06 c0       	rjmp	.+12     	; 0x5664 <vfprintf+0xe0>
    5658:	3a e0       	ldi	r19, 0x0A	; 10
    565a:	13 9f       	mul	r17, r19
    565c:	20 0d       	add	r18, r0
    565e:	11 24       	eor	r1, r1
    5660:	12 2f       	mov	r17, r18
    5662:	19 c0       	rjmp	.+50     	; 0x5696 <vfprintf+0x112>
    5664:	8a e0       	ldi	r24, 0x0A	; 10
    5666:	58 9e       	mul	r5, r24
    5668:	20 0d       	add	r18, r0
    566a:	11 24       	eor	r1, r1
    566c:	52 2e       	mov	r5, r18
    566e:	e9 2d       	mov	r30, r9
    5670:	e0 62       	ori	r30, 0x20	; 32
    5672:	9e 2e       	mov	r9, r30
    5674:	10 c0       	rjmp	.+32     	; 0x5696 <vfprintf+0x112>
    5676:	8e 32       	cpi	r24, 0x2E	; 46
    5678:	31 f4       	brne	.+12     	; 0x5686 <vfprintf+0x102>
    567a:	96 fc       	sbrc	r9, 6
    567c:	cc c2       	rjmp	.+1432   	; 0x5c16 <vfprintf+0x692>
    567e:	f9 2d       	mov	r31, r9
    5680:	f0 64       	ori	r31, 0x40	; 64
    5682:	9f 2e       	mov	r9, r31
    5684:	08 c0       	rjmp	.+16     	; 0x5696 <vfprintf+0x112>
    5686:	8c 36       	cpi	r24, 0x6C	; 108
    5688:	21 f4       	brne	.+8      	; 0x5692 <vfprintf+0x10e>
    568a:	29 2d       	mov	r18, r9
    568c:	20 68       	ori	r18, 0x80	; 128
    568e:	92 2e       	mov	r9, r18
    5690:	02 c0       	rjmp	.+4      	; 0x5696 <vfprintf+0x112>
    5692:	88 36       	cpi	r24, 0x68	; 104
    5694:	41 f4       	brne	.+16     	; 0x56a6 <vfprintf+0x122>
    5696:	f1 01       	movw	r30, r2
    5698:	93 fd       	sbrc	r25, 3
    569a:	85 91       	lpm	r24, Z+
    569c:	93 ff       	sbrs	r25, 3
    569e:	81 91       	ld	r24, Z+
    56a0:	1f 01       	movw	r2, r30
    56a2:	81 11       	cpse	r24, r1
    56a4:	b3 cf       	rjmp	.-154    	; 0x560c <vfprintf+0x88>
    56a6:	9b eb       	ldi	r25, 0xBB	; 187
    56a8:	98 0f       	add	r25, r24
    56aa:	93 30       	cpi	r25, 0x03	; 3
    56ac:	20 f4       	brcc	.+8      	; 0x56b6 <vfprintf+0x132>
    56ae:	99 2d       	mov	r25, r9
    56b0:	90 61       	ori	r25, 0x10	; 16
    56b2:	80 5e       	subi	r24, 0xE0	; 224
    56b4:	07 c0       	rjmp	.+14     	; 0x56c4 <vfprintf+0x140>
    56b6:	9b e9       	ldi	r25, 0x9B	; 155
    56b8:	98 0f       	add	r25, r24
    56ba:	93 30       	cpi	r25, 0x03	; 3
    56bc:	08 f0       	brcs	.+2      	; 0x56c0 <vfprintf+0x13c>
    56be:	59 c1       	rjmp	.+690    	; 0x5972 <vfprintf+0x3ee>
    56c0:	99 2d       	mov	r25, r9
    56c2:	9f 7e       	andi	r25, 0xEF	; 239
    56c4:	96 ff       	sbrs	r25, 6
    56c6:	16 e0       	ldi	r17, 0x06	; 6
    56c8:	9f 73       	andi	r25, 0x3F	; 63
    56ca:	99 2e       	mov	r9, r25
    56cc:	85 36       	cpi	r24, 0x65	; 101
    56ce:	19 f4       	brne	.+6      	; 0x56d6 <vfprintf+0x152>
    56d0:	90 64       	ori	r25, 0x40	; 64
    56d2:	99 2e       	mov	r9, r25
    56d4:	08 c0       	rjmp	.+16     	; 0x56e6 <vfprintf+0x162>
    56d6:	86 36       	cpi	r24, 0x66	; 102
    56d8:	21 f4       	brne	.+8      	; 0x56e2 <vfprintf+0x15e>
    56da:	39 2f       	mov	r19, r25
    56dc:	30 68       	ori	r19, 0x80	; 128
    56de:	93 2e       	mov	r9, r19
    56e0:	02 c0       	rjmp	.+4      	; 0x56e6 <vfprintf+0x162>
    56e2:	11 11       	cpse	r17, r1
    56e4:	11 50       	subi	r17, 0x01	; 1
    56e6:	97 fe       	sbrs	r9, 7
    56e8:	07 c0       	rjmp	.+14     	; 0x56f8 <vfprintf+0x174>
    56ea:	1c 33       	cpi	r17, 0x3C	; 60
    56ec:	50 f4       	brcc	.+20     	; 0x5702 <vfprintf+0x17e>
    56ee:	44 24       	eor	r4, r4
    56f0:	43 94       	inc	r4
    56f2:	41 0e       	add	r4, r17
    56f4:	27 e0       	ldi	r18, 0x07	; 7
    56f6:	0b c0       	rjmp	.+22     	; 0x570e <vfprintf+0x18a>
    56f8:	18 30       	cpi	r17, 0x08	; 8
    56fa:	38 f0       	brcs	.+14     	; 0x570a <vfprintf+0x186>
    56fc:	27 e0       	ldi	r18, 0x07	; 7
    56fe:	17 e0       	ldi	r17, 0x07	; 7
    5700:	05 c0       	rjmp	.+10     	; 0x570c <vfprintf+0x188>
    5702:	27 e0       	ldi	r18, 0x07	; 7
    5704:	9c e3       	ldi	r25, 0x3C	; 60
    5706:	49 2e       	mov	r4, r25
    5708:	02 c0       	rjmp	.+4      	; 0x570e <vfprintf+0x18a>
    570a:	21 2f       	mov	r18, r17
    570c:	41 2c       	mov	r4, r1
    570e:	56 01       	movw	r10, r12
    5710:	84 e0       	ldi	r24, 0x04	; 4
    5712:	a8 0e       	add	r10, r24
    5714:	b1 1c       	adc	r11, r1
    5716:	f6 01       	movw	r30, r12
    5718:	60 81       	ld	r22, Z
    571a:	71 81       	ldd	r23, Z+1	; 0x01
    571c:	82 81       	ldd	r24, Z+2	; 0x02
    571e:	93 81       	ldd	r25, Z+3	; 0x03
    5720:	04 2d       	mov	r16, r4
    5722:	a3 01       	movw	r20, r6
    5724:	c4 d4       	rcall	.+2440   	; 0x60ae <__ftoa_engine>
    5726:	6c 01       	movw	r12, r24
    5728:	f9 81       	ldd	r31, Y+1	; 0x01
    572a:	fc 87       	std	Y+12, r31	; 0x0c
    572c:	f0 ff       	sbrs	r31, 0
    572e:	02 c0       	rjmp	.+4      	; 0x5734 <vfprintf+0x1b0>
    5730:	f3 ff       	sbrs	r31, 3
    5732:	06 c0       	rjmp	.+12     	; 0x5740 <vfprintf+0x1bc>
    5734:	91 fc       	sbrc	r9, 1
    5736:	06 c0       	rjmp	.+12     	; 0x5744 <vfprintf+0x1c0>
    5738:	92 fe       	sbrs	r9, 2
    573a:	06 c0       	rjmp	.+12     	; 0x5748 <vfprintf+0x1c4>
    573c:	00 e2       	ldi	r16, 0x20	; 32
    573e:	05 c0       	rjmp	.+10     	; 0x574a <vfprintf+0x1c6>
    5740:	0d e2       	ldi	r16, 0x2D	; 45
    5742:	03 c0       	rjmp	.+6      	; 0x574a <vfprintf+0x1c6>
    5744:	0b e2       	ldi	r16, 0x2B	; 43
    5746:	01 c0       	rjmp	.+2      	; 0x574a <vfprintf+0x1c6>
    5748:	00 e0       	ldi	r16, 0x00	; 0
    574a:	8c 85       	ldd	r24, Y+12	; 0x0c
    574c:	8c 70       	andi	r24, 0x0C	; 12
    574e:	19 f0       	breq	.+6      	; 0x5756 <vfprintf+0x1d2>
    5750:	01 11       	cpse	r16, r1
    5752:	43 c2       	rjmp	.+1158   	; 0x5bda <vfprintf+0x656>
    5754:	80 c2       	rjmp	.+1280   	; 0x5c56 <vfprintf+0x6d2>
    5756:	97 fe       	sbrs	r9, 7
    5758:	10 c0       	rjmp	.+32     	; 0x577a <vfprintf+0x1f6>
    575a:	4c 0c       	add	r4, r12
    575c:	fc 85       	ldd	r31, Y+12	; 0x0c
    575e:	f4 ff       	sbrs	r31, 4
    5760:	04 c0       	rjmp	.+8      	; 0x576a <vfprintf+0x1e6>
    5762:	8a 81       	ldd	r24, Y+2	; 0x02
    5764:	81 33       	cpi	r24, 0x31	; 49
    5766:	09 f4       	brne	.+2      	; 0x576a <vfprintf+0x1e6>
    5768:	4a 94       	dec	r4
    576a:	14 14       	cp	r1, r4
    576c:	74 f5       	brge	.+92     	; 0x57ca <vfprintf+0x246>
    576e:	28 e0       	ldi	r18, 0x08	; 8
    5770:	24 15       	cp	r18, r4
    5772:	78 f5       	brcc	.+94     	; 0x57d2 <vfprintf+0x24e>
    5774:	88 e0       	ldi	r24, 0x08	; 8
    5776:	48 2e       	mov	r4, r24
    5778:	2c c0       	rjmp	.+88     	; 0x57d2 <vfprintf+0x24e>
    577a:	96 fc       	sbrc	r9, 6
    577c:	2a c0       	rjmp	.+84     	; 0x57d2 <vfprintf+0x24e>
    577e:	81 2f       	mov	r24, r17
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	8c 15       	cp	r24, r12
    5784:	9d 05       	cpc	r25, r13
    5786:	9c f0       	brlt	.+38     	; 0x57ae <vfprintf+0x22a>
    5788:	3c ef       	ldi	r19, 0xFC	; 252
    578a:	c3 16       	cp	r12, r19
    578c:	3f ef       	ldi	r19, 0xFF	; 255
    578e:	d3 06       	cpc	r13, r19
    5790:	74 f0       	brlt	.+28     	; 0x57ae <vfprintf+0x22a>
    5792:	89 2d       	mov	r24, r9
    5794:	80 68       	ori	r24, 0x80	; 128
    5796:	98 2e       	mov	r9, r24
    5798:	0a c0       	rjmp	.+20     	; 0x57ae <vfprintf+0x22a>
    579a:	e2 e0       	ldi	r30, 0x02	; 2
    579c:	f0 e0       	ldi	r31, 0x00	; 0
    579e:	ec 0f       	add	r30, r28
    57a0:	fd 1f       	adc	r31, r29
    57a2:	e1 0f       	add	r30, r17
    57a4:	f1 1d       	adc	r31, r1
    57a6:	80 81       	ld	r24, Z
    57a8:	80 33       	cpi	r24, 0x30	; 48
    57aa:	19 f4       	brne	.+6      	; 0x57b2 <vfprintf+0x22e>
    57ac:	11 50       	subi	r17, 0x01	; 1
    57ae:	11 11       	cpse	r17, r1
    57b0:	f4 cf       	rjmp	.-24     	; 0x579a <vfprintf+0x216>
    57b2:	97 fe       	sbrs	r9, 7
    57b4:	0e c0       	rjmp	.+28     	; 0x57d2 <vfprintf+0x24e>
    57b6:	44 24       	eor	r4, r4
    57b8:	43 94       	inc	r4
    57ba:	41 0e       	add	r4, r17
    57bc:	81 2f       	mov	r24, r17
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	c8 16       	cp	r12, r24
    57c2:	d9 06       	cpc	r13, r25
    57c4:	2c f4       	brge	.+10     	; 0x57d0 <vfprintf+0x24c>
    57c6:	1c 19       	sub	r17, r12
    57c8:	04 c0       	rjmp	.+8      	; 0x57d2 <vfprintf+0x24e>
    57ca:	44 24       	eor	r4, r4
    57cc:	43 94       	inc	r4
    57ce:	01 c0       	rjmp	.+2      	; 0x57d2 <vfprintf+0x24e>
    57d0:	10 e0       	ldi	r17, 0x00	; 0
    57d2:	97 fe       	sbrs	r9, 7
    57d4:	06 c0       	rjmp	.+12     	; 0x57e2 <vfprintf+0x25e>
    57d6:	1c 14       	cp	r1, r12
    57d8:	1d 04       	cpc	r1, r13
    57da:	34 f4       	brge	.+12     	; 0x57e8 <vfprintf+0x264>
    57dc:	c6 01       	movw	r24, r12
    57de:	01 96       	adiw	r24, 0x01	; 1
    57e0:	05 c0       	rjmp	.+10     	; 0x57ec <vfprintf+0x268>
    57e2:	85 e0       	ldi	r24, 0x05	; 5
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	02 c0       	rjmp	.+4      	; 0x57ec <vfprintf+0x268>
    57e8:	81 e0       	ldi	r24, 0x01	; 1
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	01 11       	cpse	r16, r1
    57ee:	01 96       	adiw	r24, 0x01	; 1
    57f0:	11 23       	and	r17, r17
    57f2:	31 f0       	breq	.+12     	; 0x5800 <vfprintf+0x27c>
    57f4:	21 2f       	mov	r18, r17
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	2f 5f       	subi	r18, 0xFF	; 255
    57fa:	3f 4f       	sbci	r19, 0xFF	; 255
    57fc:	82 0f       	add	r24, r18
    57fe:	93 1f       	adc	r25, r19
    5800:	25 2d       	mov	r18, r5
    5802:	30 e0       	ldi	r19, 0x00	; 0
    5804:	82 17       	cp	r24, r18
    5806:	93 07       	cpc	r25, r19
    5808:	14 f4       	brge	.+4      	; 0x580e <vfprintf+0x28a>
    580a:	58 1a       	sub	r5, r24
    580c:	01 c0       	rjmp	.+2      	; 0x5810 <vfprintf+0x28c>
    580e:	51 2c       	mov	r5, r1
    5810:	89 2d       	mov	r24, r9
    5812:	89 70       	andi	r24, 0x09	; 9
    5814:	41 f4       	brne	.+16     	; 0x5826 <vfprintf+0x2a2>
    5816:	55 20       	and	r5, r5
    5818:	31 f0       	breq	.+12     	; 0x5826 <vfprintf+0x2a2>
    581a:	b7 01       	movw	r22, r14
    581c:	80 e2       	ldi	r24, 0x20	; 32
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	93 d5       	rcall	.+2854   	; 0x6348 <fputc>
    5822:	5a 94       	dec	r5
    5824:	f8 cf       	rjmp	.-16     	; 0x5816 <vfprintf+0x292>
    5826:	00 23       	and	r16, r16
    5828:	21 f0       	breq	.+8      	; 0x5832 <vfprintf+0x2ae>
    582a:	b7 01       	movw	r22, r14
    582c:	80 2f       	mov	r24, r16
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	8b d5       	rcall	.+2838   	; 0x6348 <fputc>
    5832:	93 fc       	sbrc	r9, 3
    5834:	08 c0       	rjmp	.+16     	; 0x5846 <vfprintf+0x2c2>
    5836:	55 20       	and	r5, r5
    5838:	31 f0       	breq	.+12     	; 0x5846 <vfprintf+0x2c2>
    583a:	b7 01       	movw	r22, r14
    583c:	80 e3       	ldi	r24, 0x30	; 48
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	83 d5       	rcall	.+2822   	; 0x6348 <fputc>
    5842:	5a 94       	dec	r5
    5844:	f8 cf       	rjmp	.-16     	; 0x5836 <vfprintf+0x2b2>
    5846:	97 fe       	sbrs	r9, 7
    5848:	4a c0       	rjmp	.+148    	; 0x58de <vfprintf+0x35a>
    584a:	46 01       	movw	r8, r12
    584c:	d7 fe       	sbrs	r13, 7
    584e:	02 c0       	rjmp	.+4      	; 0x5854 <vfprintf+0x2d0>
    5850:	81 2c       	mov	r8, r1
    5852:	91 2c       	mov	r9, r1
    5854:	c6 01       	movw	r24, r12
    5856:	88 19       	sub	r24, r8
    5858:	99 09       	sbc	r25, r9
    585a:	f3 01       	movw	r30, r6
    585c:	e8 0f       	add	r30, r24
    585e:	f9 1f       	adc	r31, r25
    5860:	fe 87       	std	Y+14, r31	; 0x0e
    5862:	ed 87       	std	Y+13, r30	; 0x0d
    5864:	96 01       	movw	r18, r12
    5866:	24 19       	sub	r18, r4
    5868:	31 09       	sbc	r19, r1
    586a:	38 8b       	std	Y+16, r19	; 0x10
    586c:	2f 87       	std	Y+15, r18	; 0x0f
    586e:	01 2f       	mov	r16, r17
    5870:	10 e0       	ldi	r17, 0x00	; 0
    5872:	11 95       	neg	r17
    5874:	01 95       	neg	r16
    5876:	11 09       	sbc	r17, r1
    5878:	3f ef       	ldi	r19, 0xFF	; 255
    587a:	83 16       	cp	r8, r19
    587c:	93 06       	cpc	r9, r19
    587e:	21 f4       	brne	.+8      	; 0x5888 <vfprintf+0x304>
    5880:	b7 01       	movw	r22, r14
    5882:	8e e2       	ldi	r24, 0x2E	; 46
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	60 d5       	rcall	.+2752   	; 0x6348 <fputc>
    5888:	c8 14       	cp	r12, r8
    588a:	d9 04       	cpc	r13, r9
    588c:	4c f0       	brlt	.+18     	; 0x58a0 <vfprintf+0x31c>
    588e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5890:	98 89       	ldd	r25, Y+16	; 0x10
    5892:	88 15       	cp	r24, r8
    5894:	99 05       	cpc	r25, r9
    5896:	24 f4       	brge	.+8      	; 0x58a0 <vfprintf+0x31c>
    5898:	ed 85       	ldd	r30, Y+13	; 0x0d
    589a:	fe 85       	ldd	r31, Y+14	; 0x0e
    589c:	81 81       	ldd	r24, Z+1	; 0x01
    589e:	01 c0       	rjmp	.+2      	; 0x58a2 <vfprintf+0x31e>
    58a0:	80 e3       	ldi	r24, 0x30	; 48
    58a2:	f1 e0       	ldi	r31, 0x01	; 1
    58a4:	8f 1a       	sub	r8, r31
    58a6:	91 08       	sbc	r9, r1
    58a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    58aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    58ac:	2f 5f       	subi	r18, 0xFF	; 255
    58ae:	3f 4f       	sbci	r19, 0xFF	; 255
    58b0:	3e 87       	std	Y+14, r19	; 0x0e
    58b2:	2d 87       	std	Y+13, r18	; 0x0d
    58b4:	80 16       	cp	r8, r16
    58b6:	91 06       	cpc	r9, r17
    58b8:	24 f0       	brlt	.+8      	; 0x58c2 <vfprintf+0x33e>
    58ba:	b7 01       	movw	r22, r14
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	44 d5       	rcall	.+2696   	; 0x6348 <fputc>
    58c0:	db cf       	rjmp	.-74     	; 0x5878 <vfprintf+0x2f4>
    58c2:	c8 14       	cp	r12, r8
    58c4:	d9 04       	cpc	r13, r9
    58c6:	41 f4       	brne	.+16     	; 0x58d8 <vfprintf+0x354>
    58c8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ca:	96 33       	cpi	r25, 0x36	; 54
    58cc:	20 f4       	brcc	.+8      	; 0x58d6 <vfprintf+0x352>
    58ce:	95 33       	cpi	r25, 0x35	; 53
    58d0:	19 f4       	brne	.+6      	; 0x58d8 <vfprintf+0x354>
    58d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    58d4:	34 ff       	sbrs	r19, 4
    58d6:	81 e3       	ldi	r24, 0x31	; 49
    58d8:	b7 01       	movw	r22, r14
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	48 c0       	rjmp	.+144    	; 0x596e <vfprintf+0x3ea>
    58de:	8a 81       	ldd	r24, Y+2	; 0x02
    58e0:	81 33       	cpi	r24, 0x31	; 49
    58e2:	19 f0       	breq	.+6      	; 0x58ea <vfprintf+0x366>
    58e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    58e6:	9f 7e       	andi	r25, 0xEF	; 239
    58e8:	9c 87       	std	Y+12, r25	; 0x0c
    58ea:	b7 01       	movw	r22, r14
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	2c d5       	rcall	.+2648   	; 0x6348 <fputc>
    58f0:	11 11       	cpse	r17, r1
    58f2:	05 c0       	rjmp	.+10     	; 0x58fe <vfprintf+0x37a>
    58f4:	94 fc       	sbrc	r9, 4
    58f6:	16 c0       	rjmp	.+44     	; 0x5924 <vfprintf+0x3a0>
    58f8:	85 e6       	ldi	r24, 0x65	; 101
    58fa:	90 e0       	ldi	r25, 0x00	; 0
    58fc:	15 c0       	rjmp	.+42     	; 0x5928 <vfprintf+0x3a4>
    58fe:	b7 01       	movw	r22, r14
    5900:	8e e2       	ldi	r24, 0x2E	; 46
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	21 d5       	rcall	.+2626   	; 0x6348 <fputc>
    5906:	1e 5f       	subi	r17, 0xFE	; 254
    5908:	82 e0       	ldi	r24, 0x02	; 2
    590a:	01 e0       	ldi	r16, 0x01	; 1
    590c:	08 0f       	add	r16, r24
    590e:	f3 01       	movw	r30, r6
    5910:	e8 0f       	add	r30, r24
    5912:	f1 1d       	adc	r31, r1
    5914:	80 81       	ld	r24, Z
    5916:	b7 01       	movw	r22, r14
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	16 d5       	rcall	.+2604   	; 0x6348 <fputc>
    591c:	80 2f       	mov	r24, r16
    591e:	01 13       	cpse	r16, r17
    5920:	f4 cf       	rjmp	.-24     	; 0x590a <vfprintf+0x386>
    5922:	e8 cf       	rjmp	.-48     	; 0x58f4 <vfprintf+0x370>
    5924:	85 e4       	ldi	r24, 0x45	; 69
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	b7 01       	movw	r22, r14
    592a:	0e d5       	rcall	.+2588   	; 0x6348 <fputc>
    592c:	d7 fc       	sbrc	r13, 7
    592e:	06 c0       	rjmp	.+12     	; 0x593c <vfprintf+0x3b8>
    5930:	c1 14       	cp	r12, r1
    5932:	d1 04       	cpc	r13, r1
    5934:	41 f4       	brne	.+16     	; 0x5946 <vfprintf+0x3c2>
    5936:	ec 85       	ldd	r30, Y+12	; 0x0c
    5938:	e4 ff       	sbrs	r30, 4
    593a:	05 c0       	rjmp	.+10     	; 0x5946 <vfprintf+0x3c2>
    593c:	d1 94       	neg	r13
    593e:	c1 94       	neg	r12
    5940:	d1 08       	sbc	r13, r1
    5942:	8d e2       	ldi	r24, 0x2D	; 45
    5944:	01 c0       	rjmp	.+2      	; 0x5948 <vfprintf+0x3c4>
    5946:	8b e2       	ldi	r24, 0x2B	; 43
    5948:	b7 01       	movw	r22, r14
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	fd d4       	rcall	.+2554   	; 0x6348 <fputc>
    594e:	80 e3       	ldi	r24, 0x30	; 48
    5950:	2a e0       	ldi	r18, 0x0A	; 10
    5952:	c2 16       	cp	r12, r18
    5954:	d1 04       	cpc	r13, r1
    5956:	2c f0       	brlt	.+10     	; 0x5962 <vfprintf+0x3de>
    5958:	8f 5f       	subi	r24, 0xFF	; 255
    595a:	fa e0       	ldi	r31, 0x0A	; 10
    595c:	cf 1a       	sub	r12, r31
    595e:	d1 08       	sbc	r13, r1
    5960:	f7 cf       	rjmp	.-18     	; 0x5950 <vfprintf+0x3cc>
    5962:	b7 01       	movw	r22, r14
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	f0 d4       	rcall	.+2528   	; 0x6348 <fputc>
    5968:	b7 01       	movw	r22, r14
    596a:	c6 01       	movw	r24, r12
    596c:	c0 96       	adiw	r24, 0x30	; 48
    596e:	ec d4       	rcall	.+2520   	; 0x6348 <fputc>
    5970:	49 c1       	rjmp	.+658    	; 0x5c04 <vfprintf+0x680>
    5972:	83 36       	cpi	r24, 0x63	; 99
    5974:	31 f0       	breq	.+12     	; 0x5982 <vfprintf+0x3fe>
    5976:	83 37       	cpi	r24, 0x73	; 115
    5978:	79 f0       	breq	.+30     	; 0x5998 <vfprintf+0x414>
    597a:	83 35       	cpi	r24, 0x53	; 83
    597c:	09 f0       	breq	.+2      	; 0x5980 <vfprintf+0x3fc>
    597e:	52 c0       	rjmp	.+164    	; 0x5a24 <vfprintf+0x4a0>
    5980:	1f c0       	rjmp	.+62     	; 0x59c0 <vfprintf+0x43c>
    5982:	56 01       	movw	r10, r12
    5984:	32 e0       	ldi	r19, 0x02	; 2
    5986:	a3 0e       	add	r10, r19
    5988:	b1 1c       	adc	r11, r1
    598a:	f6 01       	movw	r30, r12
    598c:	80 81       	ld	r24, Z
    598e:	89 83       	std	Y+1, r24	; 0x01
    5990:	01 e0       	ldi	r16, 0x01	; 1
    5992:	10 e0       	ldi	r17, 0x00	; 0
    5994:	63 01       	movw	r12, r6
    5996:	11 c0       	rjmp	.+34     	; 0x59ba <vfprintf+0x436>
    5998:	56 01       	movw	r10, r12
    599a:	f2 e0       	ldi	r31, 0x02	; 2
    599c:	af 0e       	add	r10, r31
    599e:	b1 1c       	adc	r11, r1
    59a0:	f6 01       	movw	r30, r12
    59a2:	c0 80       	ld	r12, Z
    59a4:	d1 80       	ldd	r13, Z+1	; 0x01
    59a6:	96 fe       	sbrs	r9, 6
    59a8:	03 c0       	rjmp	.+6      	; 0x59b0 <vfprintf+0x42c>
    59aa:	61 2f       	mov	r22, r17
    59ac:	70 e0       	ldi	r23, 0x00	; 0
    59ae:	02 c0       	rjmp	.+4      	; 0x59b4 <vfprintf+0x430>
    59b0:	6f ef       	ldi	r22, 0xFF	; 255
    59b2:	7f ef       	ldi	r23, 0xFF	; 255
    59b4:	c6 01       	movw	r24, r12
    59b6:	bd d4       	rcall	.+2426   	; 0x6332 <strnlen>
    59b8:	8c 01       	movw	r16, r24
    59ba:	f9 2d       	mov	r31, r9
    59bc:	ff 77       	andi	r31, 0x7F	; 127
    59be:	13 c0       	rjmp	.+38     	; 0x59e6 <vfprintf+0x462>
    59c0:	56 01       	movw	r10, r12
    59c2:	22 e0       	ldi	r18, 0x02	; 2
    59c4:	a2 0e       	add	r10, r18
    59c6:	b1 1c       	adc	r11, r1
    59c8:	f6 01       	movw	r30, r12
    59ca:	c0 80       	ld	r12, Z
    59cc:	d1 80       	ldd	r13, Z+1	; 0x01
    59ce:	96 fe       	sbrs	r9, 6
    59d0:	03 c0       	rjmp	.+6      	; 0x59d8 <vfprintf+0x454>
    59d2:	61 2f       	mov	r22, r17
    59d4:	70 e0       	ldi	r23, 0x00	; 0
    59d6:	02 c0       	rjmp	.+4      	; 0x59dc <vfprintf+0x458>
    59d8:	6f ef       	ldi	r22, 0xFF	; 255
    59da:	7f ef       	ldi	r23, 0xFF	; 255
    59dc:	c6 01       	movw	r24, r12
    59de:	3f d4       	rcall	.+2174   	; 0x625e <strnlen_P>
    59e0:	8c 01       	movw	r16, r24
    59e2:	f9 2d       	mov	r31, r9
    59e4:	f0 68       	ori	r31, 0x80	; 128
    59e6:	9f 2e       	mov	r9, r31
    59e8:	f3 fd       	sbrc	r31, 3
    59ea:	18 c0       	rjmp	.+48     	; 0x5a1c <vfprintf+0x498>
    59ec:	85 2d       	mov	r24, r5
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	08 17       	cp	r16, r24
    59f2:	19 07       	cpc	r17, r25
    59f4:	98 f4       	brcc	.+38     	; 0x5a1c <vfprintf+0x498>
    59f6:	b7 01       	movw	r22, r14
    59f8:	80 e2       	ldi	r24, 0x20	; 32
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	a5 d4       	rcall	.+2378   	; 0x6348 <fputc>
    59fe:	5a 94       	dec	r5
    5a00:	f5 cf       	rjmp	.-22     	; 0x59ec <vfprintf+0x468>
    5a02:	f6 01       	movw	r30, r12
    5a04:	97 fc       	sbrc	r9, 7
    5a06:	85 91       	lpm	r24, Z+
    5a08:	97 fe       	sbrs	r9, 7
    5a0a:	81 91       	ld	r24, Z+
    5a0c:	6f 01       	movw	r12, r30
    5a0e:	b7 01       	movw	r22, r14
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	9a d4       	rcall	.+2356   	; 0x6348 <fputc>
    5a14:	51 10       	cpse	r5, r1
    5a16:	5a 94       	dec	r5
    5a18:	01 50       	subi	r16, 0x01	; 1
    5a1a:	11 09       	sbc	r17, r1
    5a1c:	01 15       	cp	r16, r1
    5a1e:	11 05       	cpc	r17, r1
    5a20:	81 f7       	brne	.-32     	; 0x5a02 <vfprintf+0x47e>
    5a22:	f0 c0       	rjmp	.+480    	; 0x5c04 <vfprintf+0x680>
    5a24:	84 36       	cpi	r24, 0x64	; 100
    5a26:	11 f0       	breq	.+4      	; 0x5a2c <vfprintf+0x4a8>
    5a28:	89 36       	cpi	r24, 0x69	; 105
    5a2a:	59 f5       	brne	.+86     	; 0x5a82 <vfprintf+0x4fe>
    5a2c:	56 01       	movw	r10, r12
    5a2e:	97 fe       	sbrs	r9, 7
    5a30:	09 c0       	rjmp	.+18     	; 0x5a44 <vfprintf+0x4c0>
    5a32:	24 e0       	ldi	r18, 0x04	; 4
    5a34:	a2 0e       	add	r10, r18
    5a36:	b1 1c       	adc	r11, r1
    5a38:	f6 01       	movw	r30, r12
    5a3a:	60 81       	ld	r22, Z
    5a3c:	71 81       	ldd	r23, Z+1	; 0x01
    5a3e:	82 81       	ldd	r24, Z+2	; 0x02
    5a40:	93 81       	ldd	r25, Z+3	; 0x03
    5a42:	0a c0       	rjmp	.+20     	; 0x5a58 <vfprintf+0x4d4>
    5a44:	f2 e0       	ldi	r31, 0x02	; 2
    5a46:	af 0e       	add	r10, r31
    5a48:	b1 1c       	adc	r11, r1
    5a4a:	f6 01       	movw	r30, r12
    5a4c:	60 81       	ld	r22, Z
    5a4e:	71 81       	ldd	r23, Z+1	; 0x01
    5a50:	07 2e       	mov	r0, r23
    5a52:	00 0c       	add	r0, r0
    5a54:	88 0b       	sbc	r24, r24
    5a56:	99 0b       	sbc	r25, r25
    5a58:	f9 2d       	mov	r31, r9
    5a5a:	ff 76       	andi	r31, 0x6F	; 111
    5a5c:	9f 2e       	mov	r9, r31
    5a5e:	97 ff       	sbrs	r25, 7
    5a60:	09 c0       	rjmp	.+18     	; 0x5a74 <vfprintf+0x4f0>
    5a62:	90 95       	com	r25
    5a64:	80 95       	com	r24
    5a66:	70 95       	com	r23
    5a68:	61 95       	neg	r22
    5a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a70:	f0 68       	ori	r31, 0x80	; 128
    5a72:	9f 2e       	mov	r9, r31
    5a74:	2a e0       	ldi	r18, 0x0A	; 10
    5a76:	30 e0       	ldi	r19, 0x00	; 0
    5a78:	a3 01       	movw	r20, r6
    5a7a:	13 d5       	rcall	.+2598   	; 0x64a2 <__ultoa_invert>
    5a7c:	c8 2e       	mov	r12, r24
    5a7e:	c6 18       	sub	r12, r6
    5a80:	3e c0       	rjmp	.+124    	; 0x5afe <vfprintf+0x57a>
    5a82:	09 2d       	mov	r16, r9
    5a84:	85 37       	cpi	r24, 0x75	; 117
    5a86:	21 f4       	brne	.+8      	; 0x5a90 <vfprintf+0x50c>
    5a88:	0f 7e       	andi	r16, 0xEF	; 239
    5a8a:	2a e0       	ldi	r18, 0x0A	; 10
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	1d c0       	rjmp	.+58     	; 0x5aca <vfprintf+0x546>
    5a90:	09 7f       	andi	r16, 0xF9	; 249
    5a92:	8f 36       	cpi	r24, 0x6F	; 111
    5a94:	91 f0       	breq	.+36     	; 0x5aba <vfprintf+0x536>
    5a96:	18 f4       	brcc	.+6      	; 0x5a9e <vfprintf+0x51a>
    5a98:	88 35       	cpi	r24, 0x58	; 88
    5a9a:	59 f0       	breq	.+22     	; 0x5ab2 <vfprintf+0x52e>
    5a9c:	bc c0       	rjmp	.+376    	; 0x5c16 <vfprintf+0x692>
    5a9e:	80 37       	cpi	r24, 0x70	; 112
    5aa0:	19 f0       	breq	.+6      	; 0x5aa8 <vfprintf+0x524>
    5aa2:	88 37       	cpi	r24, 0x78	; 120
    5aa4:	11 f0       	breq	.+4      	; 0x5aaa <vfprintf+0x526>
    5aa6:	b7 c0       	rjmp	.+366    	; 0x5c16 <vfprintf+0x692>
    5aa8:	00 61       	ori	r16, 0x10	; 16
    5aaa:	04 ff       	sbrs	r16, 4
    5aac:	09 c0       	rjmp	.+18     	; 0x5ac0 <vfprintf+0x53c>
    5aae:	04 60       	ori	r16, 0x04	; 4
    5ab0:	07 c0       	rjmp	.+14     	; 0x5ac0 <vfprintf+0x53c>
    5ab2:	94 fe       	sbrs	r9, 4
    5ab4:	08 c0       	rjmp	.+16     	; 0x5ac6 <vfprintf+0x542>
    5ab6:	06 60       	ori	r16, 0x06	; 6
    5ab8:	06 c0       	rjmp	.+12     	; 0x5ac6 <vfprintf+0x542>
    5aba:	28 e0       	ldi	r18, 0x08	; 8
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	05 c0       	rjmp	.+10     	; 0x5aca <vfprintf+0x546>
    5ac0:	20 e1       	ldi	r18, 0x10	; 16
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	02 c0       	rjmp	.+4      	; 0x5aca <vfprintf+0x546>
    5ac6:	20 e1       	ldi	r18, 0x10	; 16
    5ac8:	32 e0       	ldi	r19, 0x02	; 2
    5aca:	56 01       	movw	r10, r12
    5acc:	07 ff       	sbrs	r16, 7
    5ace:	09 c0       	rjmp	.+18     	; 0x5ae2 <vfprintf+0x55e>
    5ad0:	84 e0       	ldi	r24, 0x04	; 4
    5ad2:	a8 0e       	add	r10, r24
    5ad4:	b1 1c       	adc	r11, r1
    5ad6:	f6 01       	movw	r30, r12
    5ad8:	60 81       	ld	r22, Z
    5ada:	71 81       	ldd	r23, Z+1	; 0x01
    5adc:	82 81       	ldd	r24, Z+2	; 0x02
    5ade:	93 81       	ldd	r25, Z+3	; 0x03
    5ae0:	08 c0       	rjmp	.+16     	; 0x5af2 <vfprintf+0x56e>
    5ae2:	f2 e0       	ldi	r31, 0x02	; 2
    5ae4:	af 0e       	add	r10, r31
    5ae6:	b1 1c       	adc	r11, r1
    5ae8:	f6 01       	movw	r30, r12
    5aea:	60 81       	ld	r22, Z
    5aec:	71 81       	ldd	r23, Z+1	; 0x01
    5aee:	80 e0       	ldi	r24, 0x00	; 0
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	a3 01       	movw	r20, r6
    5af4:	d6 d4       	rcall	.+2476   	; 0x64a2 <__ultoa_invert>
    5af6:	c8 2e       	mov	r12, r24
    5af8:	c6 18       	sub	r12, r6
    5afa:	0f 77       	andi	r16, 0x7F	; 127
    5afc:	90 2e       	mov	r9, r16
    5afe:	96 fe       	sbrs	r9, 6
    5b00:	0b c0       	rjmp	.+22     	; 0x5b18 <vfprintf+0x594>
    5b02:	09 2d       	mov	r16, r9
    5b04:	0e 7f       	andi	r16, 0xFE	; 254
    5b06:	c1 16       	cp	r12, r17
    5b08:	50 f4       	brcc	.+20     	; 0x5b1e <vfprintf+0x59a>
    5b0a:	94 fe       	sbrs	r9, 4
    5b0c:	0a c0       	rjmp	.+20     	; 0x5b22 <vfprintf+0x59e>
    5b0e:	92 fc       	sbrc	r9, 2
    5b10:	08 c0       	rjmp	.+16     	; 0x5b22 <vfprintf+0x59e>
    5b12:	09 2d       	mov	r16, r9
    5b14:	0e 7e       	andi	r16, 0xEE	; 238
    5b16:	05 c0       	rjmp	.+10     	; 0x5b22 <vfprintf+0x59e>
    5b18:	dc 2c       	mov	r13, r12
    5b1a:	09 2d       	mov	r16, r9
    5b1c:	03 c0       	rjmp	.+6      	; 0x5b24 <vfprintf+0x5a0>
    5b1e:	dc 2c       	mov	r13, r12
    5b20:	01 c0       	rjmp	.+2      	; 0x5b24 <vfprintf+0x5a0>
    5b22:	d1 2e       	mov	r13, r17
    5b24:	04 ff       	sbrs	r16, 4
    5b26:	0d c0       	rjmp	.+26     	; 0x5b42 <vfprintf+0x5be>
    5b28:	fe 01       	movw	r30, r28
    5b2a:	ec 0d       	add	r30, r12
    5b2c:	f1 1d       	adc	r31, r1
    5b2e:	80 81       	ld	r24, Z
    5b30:	80 33       	cpi	r24, 0x30	; 48
    5b32:	11 f4       	brne	.+4      	; 0x5b38 <vfprintf+0x5b4>
    5b34:	09 7e       	andi	r16, 0xE9	; 233
    5b36:	09 c0       	rjmp	.+18     	; 0x5b4a <vfprintf+0x5c6>
    5b38:	02 ff       	sbrs	r16, 2
    5b3a:	06 c0       	rjmp	.+12     	; 0x5b48 <vfprintf+0x5c4>
    5b3c:	d3 94       	inc	r13
    5b3e:	d3 94       	inc	r13
    5b40:	04 c0       	rjmp	.+8      	; 0x5b4a <vfprintf+0x5c6>
    5b42:	80 2f       	mov	r24, r16
    5b44:	86 78       	andi	r24, 0x86	; 134
    5b46:	09 f0       	breq	.+2      	; 0x5b4a <vfprintf+0x5c6>
    5b48:	d3 94       	inc	r13
    5b4a:	03 fd       	sbrc	r16, 3
    5b4c:	10 c0       	rjmp	.+32     	; 0x5b6e <vfprintf+0x5ea>
    5b4e:	00 ff       	sbrs	r16, 0
    5b50:	06 c0       	rjmp	.+12     	; 0x5b5e <vfprintf+0x5da>
    5b52:	1c 2d       	mov	r17, r12
    5b54:	d5 14       	cp	r13, r5
    5b56:	78 f4       	brcc	.+30     	; 0x5b76 <vfprintf+0x5f2>
    5b58:	15 0d       	add	r17, r5
    5b5a:	1d 19       	sub	r17, r13
    5b5c:	0c c0       	rjmp	.+24     	; 0x5b76 <vfprintf+0x5f2>
    5b5e:	d5 14       	cp	r13, r5
    5b60:	50 f4       	brcc	.+20     	; 0x5b76 <vfprintf+0x5f2>
    5b62:	b7 01       	movw	r22, r14
    5b64:	80 e2       	ldi	r24, 0x20	; 32
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	ef d3       	rcall	.+2014   	; 0x6348 <fputc>
    5b6a:	d3 94       	inc	r13
    5b6c:	f8 cf       	rjmp	.-16     	; 0x5b5e <vfprintf+0x5da>
    5b6e:	d5 14       	cp	r13, r5
    5b70:	10 f4       	brcc	.+4      	; 0x5b76 <vfprintf+0x5f2>
    5b72:	5d 18       	sub	r5, r13
    5b74:	01 c0       	rjmp	.+2      	; 0x5b78 <vfprintf+0x5f4>
    5b76:	51 2c       	mov	r5, r1
    5b78:	04 ff       	sbrs	r16, 4
    5b7a:	0f c0       	rjmp	.+30     	; 0x5b9a <vfprintf+0x616>
    5b7c:	b7 01       	movw	r22, r14
    5b7e:	80 e3       	ldi	r24, 0x30	; 48
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	e2 d3       	rcall	.+1988   	; 0x6348 <fputc>
    5b84:	02 ff       	sbrs	r16, 2
    5b86:	16 c0       	rjmp	.+44     	; 0x5bb4 <vfprintf+0x630>
    5b88:	01 fd       	sbrc	r16, 1
    5b8a:	03 c0       	rjmp	.+6      	; 0x5b92 <vfprintf+0x60e>
    5b8c:	88 e7       	ldi	r24, 0x78	; 120
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <vfprintf+0x612>
    5b92:	88 e5       	ldi	r24, 0x58	; 88
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	b7 01       	movw	r22, r14
    5b98:	0c c0       	rjmp	.+24     	; 0x5bb2 <vfprintf+0x62e>
    5b9a:	80 2f       	mov	r24, r16
    5b9c:	86 78       	andi	r24, 0x86	; 134
    5b9e:	51 f0       	breq	.+20     	; 0x5bb4 <vfprintf+0x630>
    5ba0:	01 ff       	sbrs	r16, 1
    5ba2:	02 c0       	rjmp	.+4      	; 0x5ba8 <vfprintf+0x624>
    5ba4:	8b e2       	ldi	r24, 0x2B	; 43
    5ba6:	01 c0       	rjmp	.+2      	; 0x5baa <vfprintf+0x626>
    5ba8:	80 e2       	ldi	r24, 0x20	; 32
    5baa:	07 fd       	sbrc	r16, 7
    5bac:	8d e2       	ldi	r24, 0x2D	; 45
    5bae:	b7 01       	movw	r22, r14
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	ca d3       	rcall	.+1940   	; 0x6348 <fputc>
    5bb4:	c1 16       	cp	r12, r17
    5bb6:	30 f4       	brcc	.+12     	; 0x5bc4 <vfprintf+0x640>
    5bb8:	b7 01       	movw	r22, r14
    5bba:	80 e3       	ldi	r24, 0x30	; 48
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	c4 d3       	rcall	.+1928   	; 0x6348 <fputc>
    5bc0:	11 50       	subi	r17, 0x01	; 1
    5bc2:	f8 cf       	rjmp	.-16     	; 0x5bb4 <vfprintf+0x630>
    5bc4:	ca 94       	dec	r12
    5bc6:	f3 01       	movw	r30, r6
    5bc8:	ec 0d       	add	r30, r12
    5bca:	f1 1d       	adc	r31, r1
    5bcc:	80 81       	ld	r24, Z
    5bce:	b7 01       	movw	r22, r14
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	ba d3       	rcall	.+1908   	; 0x6348 <fputc>
    5bd4:	c1 10       	cpse	r12, r1
    5bd6:	f6 cf       	rjmp	.-20     	; 0x5bc4 <vfprintf+0x640>
    5bd8:	15 c0       	rjmp	.+42     	; 0x5c04 <vfprintf+0x680>
    5bda:	f4 e0       	ldi	r31, 0x04	; 4
    5bdc:	f5 15       	cp	r31, r5
    5bde:	50 f5       	brcc	.+84     	; 0x5c34 <vfprintf+0x6b0>
    5be0:	84 e0       	ldi	r24, 0x04	; 4
    5be2:	58 1a       	sub	r5, r24
    5be4:	93 fe       	sbrs	r9, 3
    5be6:	1e c0       	rjmp	.+60     	; 0x5c24 <vfprintf+0x6a0>
    5be8:	01 11       	cpse	r16, r1
    5bea:	25 c0       	rjmp	.+74     	; 0x5c36 <vfprintf+0x6b2>
    5bec:	2c 85       	ldd	r18, Y+12	; 0x0c
    5bee:	23 ff       	sbrs	r18, 3
    5bf0:	27 c0       	rjmp	.+78     	; 0x5c40 <vfprintf+0x6bc>
    5bf2:	0a e9       	ldi	r16, 0x9A	; 154
    5bf4:	11 e0       	ldi	r17, 0x01	; 1
    5bf6:	39 2d       	mov	r19, r9
    5bf8:	30 71       	andi	r19, 0x10	; 16
    5bfa:	93 2e       	mov	r9, r19
    5bfc:	f8 01       	movw	r30, r16
    5bfe:	84 91       	lpm	r24, Z
    5c00:	81 11       	cpse	r24, r1
    5c02:	21 c0       	rjmp	.+66     	; 0x5c46 <vfprintf+0x6c2>
    5c04:	55 20       	and	r5, r5
    5c06:	09 f4       	brne	.+2      	; 0x5c0a <vfprintf+0x686>
    5c08:	fc cc       	rjmp	.-1544   	; 0x5602 <vfprintf+0x7e>
    5c0a:	b7 01       	movw	r22, r14
    5c0c:	80 e2       	ldi	r24, 0x20	; 32
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	9b d3       	rcall	.+1846   	; 0x6348 <fputc>
    5c12:	5a 94       	dec	r5
    5c14:	f7 cf       	rjmp	.-18     	; 0x5c04 <vfprintf+0x680>
    5c16:	f7 01       	movw	r30, r14
    5c18:	86 81       	ldd	r24, Z+6	; 0x06
    5c1a:	97 81       	ldd	r25, Z+7	; 0x07
    5c1c:	23 c0       	rjmp	.+70     	; 0x5c64 <vfprintf+0x6e0>
    5c1e:	8f ef       	ldi	r24, 0xFF	; 255
    5c20:	9f ef       	ldi	r25, 0xFF	; 255
    5c22:	20 c0       	rjmp	.+64     	; 0x5c64 <vfprintf+0x6e0>
    5c24:	b7 01       	movw	r22, r14
    5c26:	80 e2       	ldi	r24, 0x20	; 32
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	8e d3       	rcall	.+1820   	; 0x6348 <fputc>
    5c2c:	5a 94       	dec	r5
    5c2e:	51 10       	cpse	r5, r1
    5c30:	f9 cf       	rjmp	.-14     	; 0x5c24 <vfprintf+0x6a0>
    5c32:	da cf       	rjmp	.-76     	; 0x5be8 <vfprintf+0x664>
    5c34:	51 2c       	mov	r5, r1
    5c36:	b7 01       	movw	r22, r14
    5c38:	80 2f       	mov	r24, r16
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	85 d3       	rcall	.+1802   	; 0x6348 <fputc>
    5c3e:	d6 cf       	rjmp	.-84     	; 0x5bec <vfprintf+0x668>
    5c40:	0e e9       	ldi	r16, 0x9E	; 158
    5c42:	11 e0       	ldi	r17, 0x01	; 1
    5c44:	d8 cf       	rjmp	.-80     	; 0x5bf6 <vfprintf+0x672>
    5c46:	91 10       	cpse	r9, r1
    5c48:	80 52       	subi	r24, 0x20	; 32
    5c4a:	b7 01       	movw	r22, r14
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	7c d3       	rcall	.+1784   	; 0x6348 <fputc>
    5c50:	0f 5f       	subi	r16, 0xFF	; 255
    5c52:	1f 4f       	sbci	r17, 0xFF	; 255
    5c54:	d3 cf       	rjmp	.-90     	; 0x5bfc <vfprintf+0x678>
    5c56:	23 e0       	ldi	r18, 0x03	; 3
    5c58:	25 15       	cp	r18, r5
    5c5a:	10 f4       	brcc	.+4      	; 0x5c60 <vfprintf+0x6dc>
    5c5c:	83 e0       	ldi	r24, 0x03	; 3
    5c5e:	c1 cf       	rjmp	.-126    	; 0x5be2 <vfprintf+0x65e>
    5c60:	51 2c       	mov	r5, r1
    5c62:	c4 cf       	rjmp	.-120    	; 0x5bec <vfprintf+0x668>
    5c64:	60 96       	adiw	r28, 0x10	; 16
    5c66:	0f b6       	in	r0, 0x3f	; 63
    5c68:	f8 94       	cli
    5c6a:	de bf       	out	0x3e, r29	; 62
    5c6c:	0f be       	out	0x3f, r0	; 63
    5c6e:	cd bf       	out	0x3d, r28	; 61
    5c70:	df 91       	pop	r29
    5c72:	cf 91       	pop	r28
    5c74:	1f 91       	pop	r17
    5c76:	0f 91       	pop	r16
    5c78:	ff 90       	pop	r15
    5c7a:	ef 90       	pop	r14
    5c7c:	df 90       	pop	r13
    5c7e:	cf 90       	pop	r12
    5c80:	bf 90       	pop	r11
    5c82:	af 90       	pop	r10
    5c84:	9f 90       	pop	r9
    5c86:	8f 90       	pop	r8
    5c88:	7f 90       	pop	r7
    5c8a:	6f 90       	pop	r6
    5c8c:	5f 90       	pop	r5
    5c8e:	4f 90       	pop	r4
    5c90:	3f 90       	pop	r3
    5c92:	2f 90       	pop	r2
    5c94:	08 95       	ret

00005c96 <__divsf3>:
    5c96:	12 d0       	rcall	.+36     	; 0x5cbc <__divsf3x>
    5c98:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__fp_round>
    5c9c:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <__fp_pscB>
    5ca0:	58 f0       	brcs	.+22     	; 0x5cb8 <__divsf3+0x22>
    5ca2:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__fp_pscA>
    5ca6:	40 f0       	brcs	.+16     	; 0x5cb8 <__divsf3+0x22>
    5ca8:	29 f4       	brne	.+10     	; 0x5cb4 <__divsf3+0x1e>
    5caa:	5f 3f       	cpi	r21, 0xFF	; 255
    5cac:	29 f0       	breq	.+10     	; 0x5cb8 <__divsf3+0x22>
    5cae:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__fp_inf>
    5cb2:	51 11       	cpse	r21, r1
    5cb4:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>
    5cb8:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__fp_nan>

00005cbc <__divsf3x>:
    5cbc:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fp_split3>
    5cc0:	68 f3       	brcs	.-38     	; 0x5c9c <__divsf3+0x6>

00005cc2 <__divsf3_pse>:
    5cc2:	99 23       	and	r25, r25
    5cc4:	b1 f3       	breq	.-20     	; 0x5cb2 <__divsf3+0x1c>
    5cc6:	55 23       	and	r21, r21
    5cc8:	91 f3       	breq	.-28     	; 0x5cae <__divsf3+0x18>
    5cca:	95 1b       	sub	r25, r21
    5ccc:	55 0b       	sbc	r21, r21
    5cce:	bb 27       	eor	r27, r27
    5cd0:	aa 27       	eor	r26, r26
    5cd2:	62 17       	cp	r22, r18
    5cd4:	73 07       	cpc	r23, r19
    5cd6:	84 07       	cpc	r24, r20
    5cd8:	38 f0       	brcs	.+14     	; 0x5ce8 <__divsf3_pse+0x26>
    5cda:	9f 5f       	subi	r25, 0xFF	; 255
    5cdc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cde:	22 0f       	add	r18, r18
    5ce0:	33 1f       	adc	r19, r19
    5ce2:	44 1f       	adc	r20, r20
    5ce4:	aa 1f       	adc	r26, r26
    5ce6:	a9 f3       	breq	.-22     	; 0x5cd2 <__divsf3_pse+0x10>
    5ce8:	35 d0       	rcall	.+106    	; 0x5d54 <__divsf3_pse+0x92>
    5cea:	0e 2e       	mov	r0, r30
    5cec:	3a f0       	brmi	.+14     	; 0x5cfc <__divsf3_pse+0x3a>
    5cee:	e0 e8       	ldi	r30, 0x80	; 128
    5cf0:	32 d0       	rcall	.+100    	; 0x5d56 <__divsf3_pse+0x94>
    5cf2:	91 50       	subi	r25, 0x01	; 1
    5cf4:	50 40       	sbci	r21, 0x00	; 0
    5cf6:	e6 95       	lsr	r30
    5cf8:	00 1c       	adc	r0, r0
    5cfa:	ca f7       	brpl	.-14     	; 0x5cee <__divsf3_pse+0x2c>
    5cfc:	2b d0       	rcall	.+86     	; 0x5d54 <__divsf3_pse+0x92>
    5cfe:	fe 2f       	mov	r31, r30
    5d00:	29 d0       	rcall	.+82     	; 0x5d54 <__divsf3_pse+0x92>
    5d02:	66 0f       	add	r22, r22
    5d04:	77 1f       	adc	r23, r23
    5d06:	88 1f       	adc	r24, r24
    5d08:	bb 1f       	adc	r27, r27
    5d0a:	26 17       	cp	r18, r22
    5d0c:	37 07       	cpc	r19, r23
    5d0e:	48 07       	cpc	r20, r24
    5d10:	ab 07       	cpc	r26, r27
    5d12:	b0 e8       	ldi	r27, 0x80	; 128
    5d14:	09 f0       	breq	.+2      	; 0x5d18 <__divsf3_pse+0x56>
    5d16:	bb 0b       	sbc	r27, r27
    5d18:	80 2d       	mov	r24, r0
    5d1a:	bf 01       	movw	r22, r30
    5d1c:	ff 27       	eor	r31, r31
    5d1e:	93 58       	subi	r25, 0x83	; 131
    5d20:	5f 4f       	sbci	r21, 0xFF	; 255
    5d22:	3a f0       	brmi	.+14     	; 0x5d32 <__divsf3_pse+0x70>
    5d24:	9e 3f       	cpi	r25, 0xFE	; 254
    5d26:	51 05       	cpc	r21, r1
    5d28:	78 f0       	brcs	.+30     	; 0x5d48 <__divsf3_pse+0x86>
    5d2a:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__fp_inf>
    5d2e:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>
    5d32:	5f 3f       	cpi	r21, 0xFF	; 255
    5d34:	e4 f3       	brlt	.-8      	; 0x5d2e <__divsf3_pse+0x6c>
    5d36:	98 3e       	cpi	r25, 0xE8	; 232
    5d38:	d4 f3       	brlt	.-12     	; 0x5d2e <__divsf3_pse+0x6c>
    5d3a:	86 95       	lsr	r24
    5d3c:	77 95       	ror	r23
    5d3e:	67 95       	ror	r22
    5d40:	b7 95       	ror	r27
    5d42:	f7 95       	ror	r31
    5d44:	9f 5f       	subi	r25, 0xFF	; 255
    5d46:	c9 f7       	brne	.-14     	; 0x5d3a <__divsf3_pse+0x78>
    5d48:	88 0f       	add	r24, r24
    5d4a:	91 1d       	adc	r25, r1
    5d4c:	96 95       	lsr	r25
    5d4e:	87 95       	ror	r24
    5d50:	97 f9       	bld	r25, 7
    5d52:	08 95       	ret
    5d54:	e1 e0       	ldi	r30, 0x01	; 1
    5d56:	66 0f       	add	r22, r22
    5d58:	77 1f       	adc	r23, r23
    5d5a:	88 1f       	adc	r24, r24
    5d5c:	bb 1f       	adc	r27, r27
    5d5e:	62 17       	cp	r22, r18
    5d60:	73 07       	cpc	r23, r19
    5d62:	84 07       	cpc	r24, r20
    5d64:	ba 07       	cpc	r27, r26
    5d66:	20 f0       	brcs	.+8      	; 0x5d70 <__divsf3_pse+0xae>
    5d68:	62 1b       	sub	r22, r18
    5d6a:	73 0b       	sbc	r23, r19
    5d6c:	84 0b       	sbc	r24, r20
    5d6e:	ba 0b       	sbc	r27, r26
    5d70:	ee 1f       	adc	r30, r30
    5d72:	88 f7       	brcc	.-30     	; 0x5d56 <__divsf3_pse+0x94>
    5d74:	e0 95       	com	r30
    5d76:	08 95       	ret

00005d78 <__floatunsisf>:
    5d78:	e8 94       	clt
    5d7a:	09 c0       	rjmp	.+18     	; 0x5d8e <__floatsisf+0x12>

00005d7c <__floatsisf>:
    5d7c:	97 fb       	bst	r25, 7
    5d7e:	3e f4       	brtc	.+14     	; 0x5d8e <__floatsisf+0x12>
    5d80:	90 95       	com	r25
    5d82:	80 95       	com	r24
    5d84:	70 95       	com	r23
    5d86:	61 95       	neg	r22
    5d88:	7f 4f       	sbci	r23, 0xFF	; 255
    5d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8e:	99 23       	and	r25, r25
    5d90:	a9 f0       	breq	.+42     	; 0x5dbc <__floatsisf+0x40>
    5d92:	f9 2f       	mov	r31, r25
    5d94:	96 e9       	ldi	r25, 0x96	; 150
    5d96:	bb 27       	eor	r27, r27
    5d98:	93 95       	inc	r25
    5d9a:	f6 95       	lsr	r31
    5d9c:	87 95       	ror	r24
    5d9e:	77 95       	ror	r23
    5da0:	67 95       	ror	r22
    5da2:	b7 95       	ror	r27
    5da4:	f1 11       	cpse	r31, r1
    5da6:	f8 cf       	rjmp	.-16     	; 0x5d98 <__floatsisf+0x1c>
    5da8:	fa f4       	brpl	.+62     	; 0x5de8 <__floatsisf+0x6c>
    5daa:	bb 0f       	add	r27, r27
    5dac:	11 f4       	brne	.+4      	; 0x5db2 <__floatsisf+0x36>
    5dae:	60 ff       	sbrs	r22, 0
    5db0:	1b c0       	rjmp	.+54     	; 0x5de8 <__floatsisf+0x6c>
    5db2:	6f 5f       	subi	r22, 0xFF	; 255
    5db4:	7f 4f       	sbci	r23, 0xFF	; 255
    5db6:	8f 4f       	sbci	r24, 0xFF	; 255
    5db8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dba:	16 c0       	rjmp	.+44     	; 0x5de8 <__floatsisf+0x6c>
    5dbc:	88 23       	and	r24, r24
    5dbe:	11 f0       	breq	.+4      	; 0x5dc4 <__floatsisf+0x48>
    5dc0:	96 e9       	ldi	r25, 0x96	; 150
    5dc2:	11 c0       	rjmp	.+34     	; 0x5de6 <__floatsisf+0x6a>
    5dc4:	77 23       	and	r23, r23
    5dc6:	21 f0       	breq	.+8      	; 0x5dd0 <__floatsisf+0x54>
    5dc8:	9e e8       	ldi	r25, 0x8E	; 142
    5dca:	87 2f       	mov	r24, r23
    5dcc:	76 2f       	mov	r23, r22
    5dce:	05 c0       	rjmp	.+10     	; 0x5dda <__floatsisf+0x5e>
    5dd0:	66 23       	and	r22, r22
    5dd2:	71 f0       	breq	.+28     	; 0x5df0 <__floatsisf+0x74>
    5dd4:	96 e8       	ldi	r25, 0x86	; 134
    5dd6:	86 2f       	mov	r24, r22
    5dd8:	70 e0       	ldi	r23, 0x00	; 0
    5dda:	60 e0       	ldi	r22, 0x00	; 0
    5ddc:	2a f0       	brmi	.+10     	; 0x5de8 <__floatsisf+0x6c>
    5dde:	9a 95       	dec	r25
    5de0:	66 0f       	add	r22, r22
    5de2:	77 1f       	adc	r23, r23
    5de4:	88 1f       	adc	r24, r24
    5de6:	da f7       	brpl	.-10     	; 0x5dde <__floatsisf+0x62>
    5de8:	88 0f       	add	r24, r24
    5dea:	96 95       	lsr	r25
    5dec:	87 95       	ror	r24
    5dee:	97 f9       	bld	r25, 7
    5df0:	08 95       	ret

00005df2 <__udivmodsi4>:
    5df2:	a1 e2       	ldi	r26, 0x21	; 33
    5df4:	1a 2e       	mov	r1, r26
    5df6:	aa 1b       	sub	r26, r26
    5df8:	bb 1b       	sub	r27, r27
    5dfa:	fd 01       	movw	r30, r26
    5dfc:	0d c0       	rjmp	.+26     	; 0x5e18 <__udivmodsi4_ep>

00005dfe <__udivmodsi4_loop>:
    5dfe:	aa 1f       	adc	r26, r26
    5e00:	bb 1f       	adc	r27, r27
    5e02:	ee 1f       	adc	r30, r30
    5e04:	ff 1f       	adc	r31, r31
    5e06:	a2 17       	cp	r26, r18
    5e08:	b3 07       	cpc	r27, r19
    5e0a:	e4 07       	cpc	r30, r20
    5e0c:	f5 07       	cpc	r31, r21
    5e0e:	20 f0       	brcs	.+8      	; 0x5e18 <__udivmodsi4_ep>
    5e10:	a2 1b       	sub	r26, r18
    5e12:	b3 0b       	sbc	r27, r19
    5e14:	e4 0b       	sbc	r30, r20
    5e16:	f5 0b       	sbc	r31, r21

00005e18 <__udivmodsi4_ep>:
    5e18:	66 1f       	adc	r22, r22
    5e1a:	77 1f       	adc	r23, r23
    5e1c:	88 1f       	adc	r24, r24
    5e1e:	99 1f       	adc	r25, r25
    5e20:	1a 94       	dec	r1
    5e22:	69 f7       	brne	.-38     	; 0x5dfe <__udivmodsi4_loop>
    5e24:	60 95       	com	r22
    5e26:	70 95       	com	r23
    5e28:	80 95       	com	r24
    5e2a:	90 95       	com	r25
    5e2c:	9b 01       	movw	r18, r22
    5e2e:	ac 01       	movw	r20, r24
    5e30:	bd 01       	movw	r22, r26
    5e32:	cf 01       	movw	r24, r30
    5e34:	08 95       	ret

00005e36 <__tablejump2__>:
    5e36:	ee 0f       	add	r30, r30
    5e38:	ff 1f       	adc	r31, r31
    5e3a:	88 1f       	adc	r24, r24
    5e3c:	8b bf       	out	0x3b, r24	; 59
    5e3e:	07 90       	elpm	r0, Z+
    5e40:	f6 91       	elpm	r31, Z
    5e42:	e0 2d       	mov	r30, r0
    5e44:	19 94       	eijmp

00005e46 <__umulhisi3>:
    5e46:	a2 9f       	mul	r26, r18
    5e48:	b0 01       	movw	r22, r0
    5e4a:	b3 9f       	mul	r27, r19
    5e4c:	c0 01       	movw	r24, r0
    5e4e:	a3 9f       	mul	r26, r19
    5e50:	70 0d       	add	r23, r0
    5e52:	81 1d       	adc	r24, r1
    5e54:	11 24       	eor	r1, r1
    5e56:	91 1d       	adc	r25, r1
    5e58:	b2 9f       	mul	r27, r18
    5e5a:	70 0d       	add	r23, r0
    5e5c:	81 1d       	adc	r24, r1
    5e5e:	11 24       	eor	r1, r1
    5e60:	91 1d       	adc	r25, r1
    5e62:	08 95       	ret

00005e64 <malloc>:
    5e64:	0f 93       	push	r16
    5e66:	1f 93       	push	r17
    5e68:	cf 93       	push	r28
    5e6a:	df 93       	push	r29
    5e6c:	82 30       	cpi	r24, 0x02	; 2
    5e6e:	91 05       	cpc	r25, r1
    5e70:	10 f4       	brcc	.+4      	; 0x5e76 <malloc+0x12>
    5e72:	82 e0       	ldi	r24, 0x02	; 2
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	e0 91 17 13 	lds	r30, 0x1317	; 0x801317 <__flp>
    5e7a:	f0 91 18 13 	lds	r31, 0x1318	; 0x801318 <__flp+0x1>
    5e7e:	20 e0       	ldi	r18, 0x00	; 0
    5e80:	30 e0       	ldi	r19, 0x00	; 0
    5e82:	a0 e0       	ldi	r26, 0x00	; 0
    5e84:	b0 e0       	ldi	r27, 0x00	; 0
    5e86:	30 97       	sbiw	r30, 0x00	; 0
    5e88:	19 f1       	breq	.+70     	; 0x5ed0 <malloc+0x6c>
    5e8a:	40 81       	ld	r20, Z
    5e8c:	51 81       	ldd	r21, Z+1	; 0x01
    5e8e:	02 81       	ldd	r16, Z+2	; 0x02
    5e90:	13 81       	ldd	r17, Z+3	; 0x03
    5e92:	48 17       	cp	r20, r24
    5e94:	59 07       	cpc	r21, r25
    5e96:	c8 f0       	brcs	.+50     	; 0x5eca <malloc+0x66>
    5e98:	84 17       	cp	r24, r20
    5e9a:	95 07       	cpc	r25, r21
    5e9c:	69 f4       	brne	.+26     	; 0x5eb8 <malloc+0x54>
    5e9e:	10 97       	sbiw	r26, 0x00	; 0
    5ea0:	31 f0       	breq	.+12     	; 0x5eae <malloc+0x4a>
    5ea2:	12 96       	adiw	r26, 0x02	; 2
    5ea4:	0c 93       	st	X, r16
    5ea6:	12 97       	sbiw	r26, 0x02	; 2
    5ea8:	13 96       	adiw	r26, 0x03	; 3
    5eaa:	1c 93       	st	X, r17
    5eac:	27 c0       	rjmp	.+78     	; 0x5efc <malloc+0x98>
    5eae:	00 93 17 13 	sts	0x1317, r16	; 0x801317 <__flp>
    5eb2:	10 93 18 13 	sts	0x1318, r17	; 0x801318 <__flp+0x1>
    5eb6:	22 c0       	rjmp	.+68     	; 0x5efc <malloc+0x98>
    5eb8:	21 15       	cp	r18, r1
    5eba:	31 05       	cpc	r19, r1
    5ebc:	19 f0       	breq	.+6      	; 0x5ec4 <malloc+0x60>
    5ebe:	42 17       	cp	r20, r18
    5ec0:	53 07       	cpc	r21, r19
    5ec2:	18 f4       	brcc	.+6      	; 0x5eca <malloc+0x66>
    5ec4:	9a 01       	movw	r18, r20
    5ec6:	bd 01       	movw	r22, r26
    5ec8:	ef 01       	movw	r28, r30
    5eca:	df 01       	movw	r26, r30
    5ecc:	f8 01       	movw	r30, r16
    5ece:	db cf       	rjmp	.-74     	; 0x5e86 <malloc+0x22>
    5ed0:	21 15       	cp	r18, r1
    5ed2:	31 05       	cpc	r19, r1
    5ed4:	f9 f0       	breq	.+62     	; 0x5f14 <malloc+0xb0>
    5ed6:	28 1b       	sub	r18, r24
    5ed8:	39 0b       	sbc	r19, r25
    5eda:	24 30       	cpi	r18, 0x04	; 4
    5edc:	31 05       	cpc	r19, r1
    5ede:	80 f4       	brcc	.+32     	; 0x5f00 <malloc+0x9c>
    5ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee4:	61 15       	cp	r22, r1
    5ee6:	71 05       	cpc	r23, r1
    5ee8:	21 f0       	breq	.+8      	; 0x5ef2 <malloc+0x8e>
    5eea:	fb 01       	movw	r30, r22
    5eec:	93 83       	std	Z+3, r25	; 0x03
    5eee:	82 83       	std	Z+2, r24	; 0x02
    5ef0:	04 c0       	rjmp	.+8      	; 0x5efa <malloc+0x96>
    5ef2:	90 93 18 13 	sts	0x1318, r25	; 0x801318 <__flp+0x1>
    5ef6:	80 93 17 13 	sts	0x1317, r24	; 0x801317 <__flp>
    5efa:	fe 01       	movw	r30, r28
    5efc:	32 96       	adiw	r30, 0x02	; 2
    5efe:	44 c0       	rjmp	.+136    	; 0x5f88 <malloc+0x124>
    5f00:	fe 01       	movw	r30, r28
    5f02:	e2 0f       	add	r30, r18
    5f04:	f3 1f       	adc	r31, r19
    5f06:	81 93       	st	Z+, r24
    5f08:	91 93       	st	Z+, r25
    5f0a:	22 50       	subi	r18, 0x02	; 2
    5f0c:	31 09       	sbc	r19, r1
    5f0e:	39 83       	std	Y+1, r19	; 0x01
    5f10:	28 83       	st	Y, r18
    5f12:	3a c0       	rjmp	.+116    	; 0x5f88 <malloc+0x124>
    5f14:	20 91 15 13 	lds	r18, 0x1315	; 0x801315 <__brkval>
    5f18:	30 91 16 13 	lds	r19, 0x1316	; 0x801316 <__brkval+0x1>
    5f1c:	23 2b       	or	r18, r19
    5f1e:	41 f4       	brne	.+16     	; 0x5f30 <malloc+0xcc>
    5f20:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5f24:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5f28:	30 93 16 13 	sts	0x1316, r19	; 0x801316 <__brkval+0x1>
    5f2c:	20 93 15 13 	sts	0x1315, r18	; 0x801315 <__brkval>
    5f30:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5f34:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5f38:	21 15       	cp	r18, r1
    5f3a:	31 05       	cpc	r19, r1
    5f3c:	41 f4       	brne	.+16     	; 0x5f4e <malloc+0xea>
    5f3e:	2d b7       	in	r18, 0x3d	; 61
    5f40:	3e b7       	in	r19, 0x3e	; 62
    5f42:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5f46:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5f4a:	24 1b       	sub	r18, r20
    5f4c:	35 0b       	sbc	r19, r21
    5f4e:	e0 91 15 13 	lds	r30, 0x1315	; 0x801315 <__brkval>
    5f52:	f0 91 16 13 	lds	r31, 0x1316	; 0x801316 <__brkval+0x1>
    5f56:	e2 17       	cp	r30, r18
    5f58:	f3 07       	cpc	r31, r19
    5f5a:	a0 f4       	brcc	.+40     	; 0x5f84 <malloc+0x120>
    5f5c:	2e 1b       	sub	r18, r30
    5f5e:	3f 0b       	sbc	r19, r31
    5f60:	28 17       	cp	r18, r24
    5f62:	39 07       	cpc	r19, r25
    5f64:	78 f0       	brcs	.+30     	; 0x5f84 <malloc+0x120>
    5f66:	ac 01       	movw	r20, r24
    5f68:	4e 5f       	subi	r20, 0xFE	; 254
    5f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f6c:	24 17       	cp	r18, r20
    5f6e:	35 07       	cpc	r19, r21
    5f70:	48 f0       	brcs	.+18     	; 0x5f84 <malloc+0x120>
    5f72:	4e 0f       	add	r20, r30
    5f74:	5f 1f       	adc	r21, r31
    5f76:	50 93 16 13 	sts	0x1316, r21	; 0x801316 <__brkval+0x1>
    5f7a:	40 93 15 13 	sts	0x1315, r20	; 0x801315 <__brkval>
    5f7e:	81 93       	st	Z+, r24
    5f80:	91 93       	st	Z+, r25
    5f82:	02 c0       	rjmp	.+4      	; 0x5f88 <malloc+0x124>
    5f84:	e0 e0       	ldi	r30, 0x00	; 0
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	cf 01       	movw	r24, r30
    5f8a:	df 91       	pop	r29
    5f8c:	cf 91       	pop	r28
    5f8e:	1f 91       	pop	r17
    5f90:	0f 91       	pop	r16
    5f92:	08 95       	ret

00005f94 <free>:
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	00 97       	sbiw	r24, 0x00	; 0
    5f9a:	09 f4       	brne	.+2      	; 0x5f9e <free+0xa>
    5f9c:	81 c0       	rjmp	.+258    	; 0x60a0 <free+0x10c>
    5f9e:	fc 01       	movw	r30, r24
    5fa0:	32 97       	sbiw	r30, 0x02	; 2
    5fa2:	13 82       	std	Z+3, r1	; 0x03
    5fa4:	12 82       	std	Z+2, r1	; 0x02
    5fa6:	a0 91 17 13 	lds	r26, 0x1317	; 0x801317 <__flp>
    5faa:	b0 91 18 13 	lds	r27, 0x1318	; 0x801318 <__flp+0x1>
    5fae:	10 97       	sbiw	r26, 0x00	; 0
    5fb0:	81 f4       	brne	.+32     	; 0x5fd2 <free+0x3e>
    5fb2:	20 81       	ld	r18, Z
    5fb4:	31 81       	ldd	r19, Z+1	; 0x01
    5fb6:	82 0f       	add	r24, r18
    5fb8:	93 1f       	adc	r25, r19
    5fba:	20 91 15 13 	lds	r18, 0x1315	; 0x801315 <__brkval>
    5fbe:	30 91 16 13 	lds	r19, 0x1316	; 0x801316 <__brkval+0x1>
    5fc2:	28 17       	cp	r18, r24
    5fc4:	39 07       	cpc	r19, r25
    5fc6:	51 f5       	brne	.+84     	; 0x601c <free+0x88>
    5fc8:	f0 93 16 13 	sts	0x1316, r31	; 0x801316 <__brkval+0x1>
    5fcc:	e0 93 15 13 	sts	0x1315, r30	; 0x801315 <__brkval>
    5fd0:	67 c0       	rjmp	.+206    	; 0x60a0 <free+0x10c>
    5fd2:	ed 01       	movw	r28, r26
    5fd4:	20 e0       	ldi	r18, 0x00	; 0
    5fd6:	30 e0       	ldi	r19, 0x00	; 0
    5fd8:	ce 17       	cp	r28, r30
    5fda:	df 07       	cpc	r29, r31
    5fdc:	40 f4       	brcc	.+16     	; 0x5fee <free+0x5a>
    5fde:	4a 81       	ldd	r20, Y+2	; 0x02
    5fe0:	5b 81       	ldd	r21, Y+3	; 0x03
    5fe2:	9e 01       	movw	r18, r28
    5fe4:	41 15       	cp	r20, r1
    5fe6:	51 05       	cpc	r21, r1
    5fe8:	f1 f0       	breq	.+60     	; 0x6026 <free+0x92>
    5fea:	ea 01       	movw	r28, r20
    5fec:	f5 cf       	rjmp	.-22     	; 0x5fd8 <free+0x44>
    5fee:	d3 83       	std	Z+3, r29	; 0x03
    5ff0:	c2 83       	std	Z+2, r28	; 0x02
    5ff2:	40 81       	ld	r20, Z
    5ff4:	51 81       	ldd	r21, Z+1	; 0x01
    5ff6:	84 0f       	add	r24, r20
    5ff8:	95 1f       	adc	r25, r21
    5ffa:	c8 17       	cp	r28, r24
    5ffc:	d9 07       	cpc	r29, r25
    5ffe:	59 f4       	brne	.+22     	; 0x6016 <free+0x82>
    6000:	88 81       	ld	r24, Y
    6002:	99 81       	ldd	r25, Y+1	; 0x01
    6004:	84 0f       	add	r24, r20
    6006:	95 1f       	adc	r25, r21
    6008:	02 96       	adiw	r24, 0x02	; 2
    600a:	91 83       	std	Z+1, r25	; 0x01
    600c:	80 83       	st	Z, r24
    600e:	8a 81       	ldd	r24, Y+2	; 0x02
    6010:	9b 81       	ldd	r25, Y+3	; 0x03
    6012:	93 83       	std	Z+3, r25	; 0x03
    6014:	82 83       	std	Z+2, r24	; 0x02
    6016:	21 15       	cp	r18, r1
    6018:	31 05       	cpc	r19, r1
    601a:	29 f4       	brne	.+10     	; 0x6026 <free+0x92>
    601c:	f0 93 18 13 	sts	0x1318, r31	; 0x801318 <__flp+0x1>
    6020:	e0 93 17 13 	sts	0x1317, r30	; 0x801317 <__flp>
    6024:	3d c0       	rjmp	.+122    	; 0x60a0 <free+0x10c>
    6026:	e9 01       	movw	r28, r18
    6028:	fb 83       	std	Y+3, r31	; 0x03
    602a:	ea 83       	std	Y+2, r30	; 0x02
    602c:	49 91       	ld	r20, Y+
    602e:	59 91       	ld	r21, Y+
    6030:	c4 0f       	add	r28, r20
    6032:	d5 1f       	adc	r29, r21
    6034:	ec 17       	cp	r30, r28
    6036:	fd 07       	cpc	r31, r29
    6038:	61 f4       	brne	.+24     	; 0x6052 <free+0xbe>
    603a:	80 81       	ld	r24, Z
    603c:	91 81       	ldd	r25, Z+1	; 0x01
    603e:	84 0f       	add	r24, r20
    6040:	95 1f       	adc	r25, r21
    6042:	02 96       	adiw	r24, 0x02	; 2
    6044:	e9 01       	movw	r28, r18
    6046:	99 83       	std	Y+1, r25	; 0x01
    6048:	88 83       	st	Y, r24
    604a:	82 81       	ldd	r24, Z+2	; 0x02
    604c:	93 81       	ldd	r25, Z+3	; 0x03
    604e:	9b 83       	std	Y+3, r25	; 0x03
    6050:	8a 83       	std	Y+2, r24	; 0x02
    6052:	e0 e0       	ldi	r30, 0x00	; 0
    6054:	f0 e0       	ldi	r31, 0x00	; 0
    6056:	12 96       	adiw	r26, 0x02	; 2
    6058:	8d 91       	ld	r24, X+
    605a:	9c 91       	ld	r25, X
    605c:	13 97       	sbiw	r26, 0x03	; 3
    605e:	00 97       	sbiw	r24, 0x00	; 0
    6060:	19 f0       	breq	.+6      	; 0x6068 <free+0xd4>
    6062:	fd 01       	movw	r30, r26
    6064:	dc 01       	movw	r26, r24
    6066:	f7 cf       	rjmp	.-18     	; 0x6056 <free+0xc2>
    6068:	8d 91       	ld	r24, X+
    606a:	9c 91       	ld	r25, X
    606c:	11 97       	sbiw	r26, 0x01	; 1
    606e:	9d 01       	movw	r18, r26
    6070:	2e 5f       	subi	r18, 0xFE	; 254
    6072:	3f 4f       	sbci	r19, 0xFF	; 255
    6074:	82 0f       	add	r24, r18
    6076:	93 1f       	adc	r25, r19
    6078:	20 91 15 13 	lds	r18, 0x1315	; 0x801315 <__brkval>
    607c:	30 91 16 13 	lds	r19, 0x1316	; 0x801316 <__brkval+0x1>
    6080:	28 17       	cp	r18, r24
    6082:	39 07       	cpc	r19, r25
    6084:	69 f4       	brne	.+26     	; 0x60a0 <free+0x10c>
    6086:	30 97       	sbiw	r30, 0x00	; 0
    6088:	29 f4       	brne	.+10     	; 0x6094 <free+0x100>
    608a:	10 92 18 13 	sts	0x1318, r1	; 0x801318 <__flp+0x1>
    608e:	10 92 17 13 	sts	0x1317, r1	; 0x801317 <__flp>
    6092:	02 c0       	rjmp	.+4      	; 0x6098 <free+0x104>
    6094:	13 82       	std	Z+3, r1	; 0x03
    6096:	12 82       	std	Z+2, r1	; 0x02
    6098:	b0 93 16 13 	sts	0x1316, r27	; 0x801316 <__brkval+0x1>
    609c:	a0 93 15 13 	sts	0x1315, r26	; 0x801315 <__brkval>
    60a0:	df 91       	pop	r29
    60a2:	cf 91       	pop	r28
    60a4:	08 95       	ret

000060a6 <abort>:
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	f8 94       	cli
    60ac:	58 c2       	rjmp	.+1200   	; 0x655e <_exit>

000060ae <__ftoa_engine>:
    60ae:	28 30       	cpi	r18, 0x08	; 8
    60b0:	08 f0       	brcs	.+2      	; 0x60b4 <__ftoa_engine+0x6>
    60b2:	27 e0       	ldi	r18, 0x07	; 7
    60b4:	33 27       	eor	r19, r19
    60b6:	da 01       	movw	r26, r20
    60b8:	99 0f       	add	r25, r25
    60ba:	31 1d       	adc	r19, r1
    60bc:	87 fd       	sbrc	r24, 7
    60be:	91 60       	ori	r25, 0x01	; 1
    60c0:	00 96       	adiw	r24, 0x00	; 0
    60c2:	61 05       	cpc	r22, r1
    60c4:	71 05       	cpc	r23, r1
    60c6:	39 f4       	brne	.+14     	; 0x60d6 <__ftoa_engine+0x28>
    60c8:	32 60       	ori	r19, 0x02	; 2
    60ca:	2e 5f       	subi	r18, 0xFE	; 254
    60cc:	3d 93       	st	X+, r19
    60ce:	30 e3       	ldi	r19, 0x30	; 48
    60d0:	2a 95       	dec	r18
    60d2:	e1 f7       	brne	.-8      	; 0x60cc <__ftoa_engine+0x1e>
    60d4:	08 95       	ret
    60d6:	9f 3f       	cpi	r25, 0xFF	; 255
    60d8:	30 f0       	brcs	.+12     	; 0x60e6 <__ftoa_engine+0x38>
    60da:	80 38       	cpi	r24, 0x80	; 128
    60dc:	71 05       	cpc	r23, r1
    60de:	61 05       	cpc	r22, r1
    60e0:	09 f0       	breq	.+2      	; 0x60e4 <__ftoa_engine+0x36>
    60e2:	3c 5f       	subi	r19, 0xFC	; 252
    60e4:	3c 5f       	subi	r19, 0xFC	; 252
    60e6:	3d 93       	st	X+, r19
    60e8:	91 30       	cpi	r25, 0x01	; 1
    60ea:	08 f0       	brcs	.+2      	; 0x60ee <__ftoa_engine+0x40>
    60ec:	80 68       	ori	r24, 0x80	; 128
    60ee:	91 1d       	adc	r25, r1
    60f0:	df 93       	push	r29
    60f2:	cf 93       	push	r28
    60f4:	1f 93       	push	r17
    60f6:	0f 93       	push	r16
    60f8:	ff 92       	push	r15
    60fa:	ef 92       	push	r14
    60fc:	19 2f       	mov	r17, r25
    60fe:	98 7f       	andi	r25, 0xF8	; 248
    6100:	96 95       	lsr	r25
    6102:	e9 2f       	mov	r30, r25
    6104:	96 95       	lsr	r25
    6106:	96 95       	lsr	r25
    6108:	e9 0f       	add	r30, r25
    610a:	ff 27       	eor	r31, r31
    610c:	e4 50       	subi	r30, 0x04	; 4
    610e:	fe 4f       	sbci	r31, 0xFE	; 254
    6110:	99 27       	eor	r25, r25
    6112:	33 27       	eor	r19, r19
    6114:	ee 24       	eor	r14, r14
    6116:	ff 24       	eor	r15, r15
    6118:	a7 01       	movw	r20, r14
    611a:	e7 01       	movw	r28, r14
    611c:	05 90       	lpm	r0, Z+
    611e:	08 94       	sec
    6120:	07 94       	ror	r0
    6122:	28 f4       	brcc	.+10     	; 0x612e <__ftoa_engine+0x80>
    6124:	36 0f       	add	r19, r22
    6126:	e7 1e       	adc	r14, r23
    6128:	f8 1e       	adc	r15, r24
    612a:	49 1f       	adc	r20, r25
    612c:	51 1d       	adc	r21, r1
    612e:	66 0f       	add	r22, r22
    6130:	77 1f       	adc	r23, r23
    6132:	88 1f       	adc	r24, r24
    6134:	99 1f       	adc	r25, r25
    6136:	06 94       	lsr	r0
    6138:	a1 f7       	brne	.-24     	; 0x6122 <__ftoa_engine+0x74>
    613a:	05 90       	lpm	r0, Z+
    613c:	07 94       	ror	r0
    613e:	28 f4       	brcc	.+10     	; 0x614a <__ftoa_engine+0x9c>
    6140:	e7 0e       	add	r14, r23
    6142:	f8 1e       	adc	r15, r24
    6144:	49 1f       	adc	r20, r25
    6146:	56 1f       	adc	r21, r22
    6148:	c1 1d       	adc	r28, r1
    614a:	77 0f       	add	r23, r23
    614c:	88 1f       	adc	r24, r24
    614e:	99 1f       	adc	r25, r25
    6150:	66 1f       	adc	r22, r22
    6152:	06 94       	lsr	r0
    6154:	a1 f7       	brne	.-24     	; 0x613e <__ftoa_engine+0x90>
    6156:	05 90       	lpm	r0, Z+
    6158:	07 94       	ror	r0
    615a:	28 f4       	brcc	.+10     	; 0x6166 <__ftoa_engine+0xb8>
    615c:	f8 0e       	add	r15, r24
    615e:	49 1f       	adc	r20, r25
    6160:	56 1f       	adc	r21, r22
    6162:	c7 1f       	adc	r28, r23
    6164:	d1 1d       	adc	r29, r1
    6166:	88 0f       	add	r24, r24
    6168:	99 1f       	adc	r25, r25
    616a:	66 1f       	adc	r22, r22
    616c:	77 1f       	adc	r23, r23
    616e:	06 94       	lsr	r0
    6170:	a1 f7       	brne	.-24     	; 0x615a <__ftoa_engine+0xac>
    6172:	05 90       	lpm	r0, Z+
    6174:	07 94       	ror	r0
    6176:	20 f4       	brcc	.+8      	; 0x6180 <__ftoa_engine+0xd2>
    6178:	49 0f       	add	r20, r25
    617a:	56 1f       	adc	r21, r22
    617c:	c7 1f       	adc	r28, r23
    617e:	d8 1f       	adc	r29, r24
    6180:	99 0f       	add	r25, r25
    6182:	66 1f       	adc	r22, r22
    6184:	77 1f       	adc	r23, r23
    6186:	88 1f       	adc	r24, r24
    6188:	06 94       	lsr	r0
    618a:	a9 f7       	brne	.-22     	; 0x6176 <__ftoa_engine+0xc8>
    618c:	84 91       	lpm	r24, Z
    618e:	10 95       	com	r17
    6190:	17 70       	andi	r17, 0x07	; 7
    6192:	41 f0       	breq	.+16     	; 0x61a4 <__ftoa_engine+0xf6>
    6194:	d6 95       	lsr	r29
    6196:	c7 95       	ror	r28
    6198:	57 95       	ror	r21
    619a:	47 95       	ror	r20
    619c:	f7 94       	ror	r15
    619e:	e7 94       	ror	r14
    61a0:	1a 95       	dec	r17
    61a2:	c1 f7       	brne	.-16     	; 0x6194 <__ftoa_engine+0xe6>
    61a4:	e2 ea       	ldi	r30, 0xA2	; 162
    61a6:	f1 e0       	ldi	r31, 0x01	; 1
    61a8:	68 94       	set
    61aa:	15 90       	lpm	r1, Z+
    61ac:	15 91       	lpm	r17, Z+
    61ae:	35 91       	lpm	r19, Z+
    61b0:	65 91       	lpm	r22, Z+
    61b2:	95 91       	lpm	r25, Z+
    61b4:	05 90       	lpm	r0, Z+
    61b6:	7f e2       	ldi	r23, 0x2F	; 47
    61b8:	73 95       	inc	r23
    61ba:	e1 18       	sub	r14, r1
    61bc:	f1 0a       	sbc	r15, r17
    61be:	43 0b       	sbc	r20, r19
    61c0:	56 0b       	sbc	r21, r22
    61c2:	c9 0b       	sbc	r28, r25
    61c4:	d0 09       	sbc	r29, r0
    61c6:	c0 f7       	brcc	.-16     	; 0x61b8 <__ftoa_engine+0x10a>
    61c8:	e1 0c       	add	r14, r1
    61ca:	f1 1e       	adc	r15, r17
    61cc:	43 1f       	adc	r20, r19
    61ce:	56 1f       	adc	r21, r22
    61d0:	c9 1f       	adc	r28, r25
    61d2:	d0 1d       	adc	r29, r0
    61d4:	7e f4       	brtc	.+30     	; 0x61f4 <__ftoa_engine+0x146>
    61d6:	70 33       	cpi	r23, 0x30	; 48
    61d8:	11 f4       	brne	.+4      	; 0x61de <__ftoa_engine+0x130>
    61da:	8a 95       	dec	r24
    61dc:	e6 cf       	rjmp	.-52     	; 0x61aa <__ftoa_engine+0xfc>
    61de:	e8 94       	clt
    61e0:	01 50       	subi	r16, 0x01	; 1
    61e2:	30 f0       	brcs	.+12     	; 0x61f0 <__ftoa_engine+0x142>
    61e4:	08 0f       	add	r16, r24
    61e6:	0a f4       	brpl	.+2      	; 0x61ea <__ftoa_engine+0x13c>
    61e8:	00 27       	eor	r16, r16
    61ea:	02 17       	cp	r16, r18
    61ec:	08 f4       	brcc	.+2      	; 0x61f0 <__ftoa_engine+0x142>
    61ee:	20 2f       	mov	r18, r16
    61f0:	23 95       	inc	r18
    61f2:	02 2f       	mov	r16, r18
    61f4:	7a 33       	cpi	r23, 0x3A	; 58
    61f6:	28 f0       	brcs	.+10     	; 0x6202 <__ftoa_engine+0x154>
    61f8:	79 e3       	ldi	r23, 0x39	; 57
    61fa:	7d 93       	st	X+, r23
    61fc:	2a 95       	dec	r18
    61fe:	e9 f7       	brne	.-6      	; 0x61fa <__ftoa_engine+0x14c>
    6200:	10 c0       	rjmp	.+32     	; 0x6222 <__ftoa_engine+0x174>
    6202:	7d 93       	st	X+, r23
    6204:	2a 95       	dec	r18
    6206:	89 f6       	brne	.-94     	; 0x61aa <__ftoa_engine+0xfc>
    6208:	06 94       	lsr	r0
    620a:	97 95       	ror	r25
    620c:	67 95       	ror	r22
    620e:	37 95       	ror	r19
    6210:	17 95       	ror	r17
    6212:	17 94       	ror	r1
    6214:	e1 18       	sub	r14, r1
    6216:	f1 0a       	sbc	r15, r17
    6218:	43 0b       	sbc	r20, r19
    621a:	56 0b       	sbc	r21, r22
    621c:	c9 0b       	sbc	r28, r25
    621e:	d0 09       	sbc	r29, r0
    6220:	98 f0       	brcs	.+38     	; 0x6248 <__ftoa_engine+0x19a>
    6222:	23 95       	inc	r18
    6224:	7e 91       	ld	r23, -X
    6226:	73 95       	inc	r23
    6228:	7a 33       	cpi	r23, 0x3A	; 58
    622a:	08 f0       	brcs	.+2      	; 0x622e <__ftoa_engine+0x180>
    622c:	70 e3       	ldi	r23, 0x30	; 48
    622e:	7c 93       	st	X, r23
    6230:	20 13       	cpse	r18, r16
    6232:	b8 f7       	brcc	.-18     	; 0x6222 <__ftoa_engine+0x174>
    6234:	7e 91       	ld	r23, -X
    6236:	70 61       	ori	r23, 0x10	; 16
    6238:	7d 93       	st	X+, r23
    623a:	30 f0       	brcs	.+12     	; 0x6248 <__ftoa_engine+0x19a>
    623c:	83 95       	inc	r24
    623e:	71 e3       	ldi	r23, 0x31	; 49
    6240:	7d 93       	st	X+, r23
    6242:	70 e3       	ldi	r23, 0x30	; 48
    6244:	2a 95       	dec	r18
    6246:	e1 f7       	brne	.-8      	; 0x6240 <__ftoa_engine+0x192>
    6248:	11 24       	eor	r1, r1
    624a:	ef 90       	pop	r14
    624c:	ff 90       	pop	r15
    624e:	0f 91       	pop	r16
    6250:	1f 91       	pop	r17
    6252:	cf 91       	pop	r28
    6254:	df 91       	pop	r29
    6256:	99 27       	eor	r25, r25
    6258:	87 fd       	sbrc	r24, 7
    625a:	90 95       	com	r25
    625c:	08 95       	ret

0000625e <strnlen_P>:
    625e:	fc 01       	movw	r30, r24
    6260:	05 90       	lpm	r0, Z+
    6262:	61 50       	subi	r22, 0x01	; 1
    6264:	70 40       	sbci	r23, 0x00	; 0
    6266:	01 10       	cpse	r0, r1
    6268:	d8 f7       	brcc	.-10     	; 0x6260 <strnlen_P+0x2>
    626a:	80 95       	com	r24
    626c:	90 95       	com	r25
    626e:	8e 0f       	add	r24, r30
    6270:	9f 1f       	adc	r25, r31
    6272:	08 95       	ret

00006274 <memcpy>:
    6274:	fb 01       	movw	r30, r22
    6276:	dc 01       	movw	r26, r24
    6278:	02 c0       	rjmp	.+4      	; 0x627e <memcpy+0xa>
    627a:	01 90       	ld	r0, Z+
    627c:	0d 92       	st	X+, r0
    627e:	41 50       	subi	r20, 0x01	; 1
    6280:	50 40       	sbci	r21, 0x00	; 0
    6282:	d8 f7       	brcc	.-10     	; 0x627a <memcpy+0x6>
    6284:	08 95       	ret

00006286 <memset>:
    6286:	dc 01       	movw	r26, r24
    6288:	01 c0       	rjmp	.+2      	; 0x628c <memset+0x6>
    628a:	6d 93       	st	X+, r22
    628c:	41 50       	subi	r20, 0x01	; 1
    628e:	50 40       	sbci	r21, 0x00	; 0
    6290:	e0 f7       	brcc	.-8      	; 0x628a <memset+0x4>
    6292:	08 95       	ret

00006294 <strcasestr>:
    6294:	fb 01       	movw	r30, r22
    6296:	51 91       	ld	r21, Z+
    6298:	55 23       	and	r21, r21
    629a:	b1 f0       	breq	.+44     	; 0x62c8 <strcasestr+0x34>
    629c:	bf 01       	movw	r22, r30
    629e:	dc 01       	movw	r26, r24
    62a0:	05 2e       	mov	r0, r21
    62a2:	4d 91       	ld	r20, X+
    62a4:	44 23       	and	r20, r20
    62a6:	69 f0       	breq	.+26     	; 0x62c2 <strcasestr+0x2e>
    62a8:	10 d0       	rcall	.+32     	; 0x62ca <strcasestr+0x36>
    62aa:	d9 f7       	brne	.-10     	; 0x62a2 <strcasestr+0xe>
    62ac:	cd 01       	movw	r24, r26
    62ae:	01 90       	ld	r0, Z+
    62b0:	00 20       	and	r0, r0
    62b2:	49 f0       	breq	.+18     	; 0x62c6 <strcasestr+0x32>
    62b4:	4d 91       	ld	r20, X+
    62b6:	41 11       	cpse	r20, r1
    62b8:	08 d0       	rcall	.+16     	; 0x62ca <strcasestr+0x36>
    62ba:	c9 f3       	breq	.-14     	; 0x62ae <strcasestr+0x1a>
    62bc:	fb 01       	movw	r30, r22
    62be:	41 11       	cpse	r20, r1
    62c0:	ee cf       	rjmp	.-36     	; 0x629e <strcasestr+0xa>
    62c2:	81 e0       	ldi	r24, 0x01	; 1
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	01 97       	sbiw	r24, 0x01	; 1
    62c8:	08 95       	ret
    62ca:	40 25       	eor	r20, r0
    62cc:	39 f0       	breq	.+14     	; 0x62dc <strcasestr+0x48>
    62ce:	40 32       	cpi	r20, 0x20	; 32
    62d0:	29 f4       	brne	.+10     	; 0x62dc <strcasestr+0x48>
    62d2:	40 29       	or	r20, r0
    62d4:	4b 57       	subi	r20, 0x7B	; 123
    62d6:	46 5e       	subi	r20, 0xE6	; 230
    62d8:	08 f0       	brcs	.+2      	; 0x62dc <strcasestr+0x48>
    62da:	18 94       	sez
    62dc:	08 95       	ret

000062de <strcat>:
    62de:	fb 01       	movw	r30, r22
    62e0:	dc 01       	movw	r26, r24
    62e2:	0d 90       	ld	r0, X+
    62e4:	00 20       	and	r0, r0
    62e6:	e9 f7       	brne	.-6      	; 0x62e2 <strcat+0x4>
    62e8:	11 97       	sbiw	r26, 0x01	; 1
    62ea:	01 90       	ld	r0, Z+
    62ec:	0d 92       	st	X+, r0
    62ee:	00 20       	and	r0, r0
    62f0:	e1 f7       	brne	.-8      	; 0x62ea <strcat+0xc>
    62f2:	08 95       	ret

000062f4 <strcpy>:
    62f4:	fb 01       	movw	r30, r22
    62f6:	dc 01       	movw	r26, r24
    62f8:	01 90       	ld	r0, Z+
    62fa:	0d 92       	st	X+, r0
    62fc:	00 20       	and	r0, r0
    62fe:	e1 f7       	brne	.-8      	; 0x62f8 <strcpy+0x4>
    6300:	08 95       	ret

00006302 <strncasecmp>:
    6302:	fb 01       	movw	r30, r22
    6304:	dc 01       	movw	r26, r24
    6306:	41 50       	subi	r20, 0x01	; 1
    6308:	50 40       	sbci	r21, 0x00	; 0
    630a:	88 f0       	brcs	.+34     	; 0x632e <strncasecmp+0x2c>
    630c:	8d 91       	ld	r24, X+
    630e:	81 34       	cpi	r24, 0x41	; 65
    6310:	1c f0       	brlt	.+6      	; 0x6318 <strncasecmp+0x16>
    6312:	8b 35       	cpi	r24, 0x5B	; 91
    6314:	0c f4       	brge	.+2      	; 0x6318 <strncasecmp+0x16>
    6316:	80 5e       	subi	r24, 0xE0	; 224
    6318:	61 91       	ld	r22, Z+
    631a:	61 34       	cpi	r22, 0x41	; 65
    631c:	1c f0       	brlt	.+6      	; 0x6324 <strncasecmp+0x22>
    631e:	6b 35       	cpi	r22, 0x5B	; 91
    6320:	0c f4       	brge	.+2      	; 0x6324 <strncasecmp+0x22>
    6322:	60 5e       	subi	r22, 0xE0	; 224
    6324:	86 1b       	sub	r24, r22
    6326:	61 11       	cpse	r22, r1
    6328:	71 f3       	breq	.-36     	; 0x6306 <strncasecmp+0x4>
    632a:	99 0b       	sbc	r25, r25
    632c:	08 95       	ret
    632e:	88 1b       	sub	r24, r24
    6330:	fc cf       	rjmp	.-8      	; 0x632a <strncasecmp+0x28>

00006332 <strnlen>:
    6332:	fc 01       	movw	r30, r24
    6334:	61 50       	subi	r22, 0x01	; 1
    6336:	70 40       	sbci	r23, 0x00	; 0
    6338:	01 90       	ld	r0, Z+
    633a:	01 10       	cpse	r0, r1
    633c:	d8 f7       	brcc	.-10     	; 0x6334 <strnlen+0x2>
    633e:	80 95       	com	r24
    6340:	90 95       	com	r25
    6342:	8e 0f       	add	r24, r30
    6344:	9f 1f       	adc	r25, r31
    6346:	08 95       	ret

00006348 <fputc>:
    6348:	0f 93       	push	r16
    634a:	1f 93       	push	r17
    634c:	cf 93       	push	r28
    634e:	df 93       	push	r29
    6350:	fb 01       	movw	r30, r22
    6352:	23 81       	ldd	r18, Z+3	; 0x03
    6354:	21 fd       	sbrc	r18, 1
    6356:	03 c0       	rjmp	.+6      	; 0x635e <fputc+0x16>
    6358:	8f ef       	ldi	r24, 0xFF	; 255
    635a:	9f ef       	ldi	r25, 0xFF	; 255
    635c:	2c c0       	rjmp	.+88     	; 0x63b6 <fputc+0x6e>
    635e:	22 ff       	sbrs	r18, 2
    6360:	16 c0       	rjmp	.+44     	; 0x638e <fputc+0x46>
    6362:	46 81       	ldd	r20, Z+6	; 0x06
    6364:	57 81       	ldd	r21, Z+7	; 0x07
    6366:	24 81       	ldd	r18, Z+4	; 0x04
    6368:	35 81       	ldd	r19, Z+5	; 0x05
    636a:	42 17       	cp	r20, r18
    636c:	53 07       	cpc	r21, r19
    636e:	44 f4       	brge	.+16     	; 0x6380 <fputc+0x38>
    6370:	a0 81       	ld	r26, Z
    6372:	b1 81       	ldd	r27, Z+1	; 0x01
    6374:	9d 01       	movw	r18, r26
    6376:	2f 5f       	subi	r18, 0xFF	; 255
    6378:	3f 4f       	sbci	r19, 0xFF	; 255
    637a:	31 83       	std	Z+1, r19	; 0x01
    637c:	20 83       	st	Z, r18
    637e:	8c 93       	st	X, r24
    6380:	26 81       	ldd	r18, Z+6	; 0x06
    6382:	37 81       	ldd	r19, Z+7	; 0x07
    6384:	2f 5f       	subi	r18, 0xFF	; 255
    6386:	3f 4f       	sbci	r19, 0xFF	; 255
    6388:	37 83       	std	Z+7, r19	; 0x07
    638a:	26 83       	std	Z+6, r18	; 0x06
    638c:	14 c0       	rjmp	.+40     	; 0x63b6 <fputc+0x6e>
    638e:	8b 01       	movw	r16, r22
    6390:	ec 01       	movw	r28, r24
    6392:	fb 01       	movw	r30, r22
    6394:	00 84       	ldd	r0, Z+8	; 0x08
    6396:	f1 85       	ldd	r31, Z+9	; 0x09
    6398:	e0 2d       	mov	r30, r0
    639a:	19 95       	eicall
    639c:	89 2b       	or	r24, r25
    639e:	e1 f6       	brne	.-72     	; 0x6358 <fputc+0x10>
    63a0:	d8 01       	movw	r26, r16
    63a2:	16 96       	adiw	r26, 0x06	; 6
    63a4:	8d 91       	ld	r24, X+
    63a6:	9c 91       	ld	r25, X
    63a8:	17 97       	sbiw	r26, 0x07	; 7
    63aa:	01 96       	adiw	r24, 0x01	; 1
    63ac:	17 96       	adiw	r26, 0x07	; 7
    63ae:	9c 93       	st	X, r25
    63b0:	8e 93       	st	-X, r24
    63b2:	16 97       	sbiw	r26, 0x06	; 6
    63b4:	ce 01       	movw	r24, r28
    63b6:	df 91       	pop	r29
    63b8:	cf 91       	pop	r28
    63ba:	1f 91       	pop	r17
    63bc:	0f 91       	pop	r16
    63be:	08 95       	ret

000063c0 <printf>:
    63c0:	cf 93       	push	r28
    63c2:	df 93       	push	r29
    63c4:	cd b7       	in	r28, 0x3d	; 61
    63c6:	de b7       	in	r29, 0x3e	; 62
    63c8:	ae 01       	movw	r20, r28
    63ca:	4a 5f       	subi	r20, 0xFA	; 250
    63cc:	5f 4f       	sbci	r21, 0xFF	; 255
    63ce:	fa 01       	movw	r30, r20
    63d0:	61 91       	ld	r22, Z+
    63d2:	71 91       	ld	r23, Z+
    63d4:	af 01       	movw	r20, r30
    63d6:	80 91 1b 13 	lds	r24, 0x131B	; 0x80131b <__iob+0x2>
    63da:	90 91 1c 13 	lds	r25, 0x131C	; 0x80131c <__iob+0x3>
    63de:	d2 d8       	rcall	.-3676   	; 0x5584 <vfprintf>
    63e0:	df 91       	pop	r29
    63e2:	cf 91       	pop	r28
    63e4:	08 95       	ret

000063e6 <puts>:
    63e6:	0f 93       	push	r16
    63e8:	1f 93       	push	r17
    63ea:	cf 93       	push	r28
    63ec:	df 93       	push	r29
    63ee:	e0 91 1b 13 	lds	r30, 0x131B	; 0x80131b <__iob+0x2>
    63f2:	f0 91 1c 13 	lds	r31, 0x131C	; 0x80131c <__iob+0x3>
    63f6:	23 81       	ldd	r18, Z+3	; 0x03
    63f8:	21 ff       	sbrs	r18, 1
    63fa:	1b c0       	rjmp	.+54     	; 0x6432 <puts+0x4c>
    63fc:	8c 01       	movw	r16, r24
    63fe:	d0 e0       	ldi	r29, 0x00	; 0
    6400:	c0 e0       	ldi	r28, 0x00	; 0
    6402:	f8 01       	movw	r30, r16
    6404:	81 91       	ld	r24, Z+
    6406:	8f 01       	movw	r16, r30
    6408:	60 91 1b 13 	lds	r22, 0x131B	; 0x80131b <__iob+0x2>
    640c:	70 91 1c 13 	lds	r23, 0x131C	; 0x80131c <__iob+0x3>
    6410:	db 01       	movw	r26, r22
    6412:	18 96       	adiw	r26, 0x08	; 8
    6414:	ed 91       	ld	r30, X+
    6416:	fc 91       	ld	r31, X
    6418:	19 97       	sbiw	r26, 0x09	; 9
    641a:	88 23       	and	r24, r24
    641c:	31 f0       	breq	.+12     	; 0x642a <puts+0x44>
    641e:	19 95       	eicall
    6420:	89 2b       	or	r24, r25
    6422:	79 f3       	breq	.-34     	; 0x6402 <puts+0x1c>
    6424:	df ef       	ldi	r29, 0xFF	; 255
    6426:	cf ef       	ldi	r28, 0xFF	; 255
    6428:	ec cf       	rjmp	.-40     	; 0x6402 <puts+0x1c>
    642a:	8a e0       	ldi	r24, 0x0A	; 10
    642c:	19 95       	eicall
    642e:	89 2b       	or	r24, r25
    6430:	19 f0       	breq	.+6      	; 0x6438 <puts+0x52>
    6432:	8f ef       	ldi	r24, 0xFF	; 255
    6434:	9f ef       	ldi	r25, 0xFF	; 255
    6436:	02 c0       	rjmp	.+4      	; 0x643c <puts+0x56>
    6438:	8d 2f       	mov	r24, r29
    643a:	9c 2f       	mov	r25, r28
    643c:	df 91       	pop	r29
    643e:	cf 91       	pop	r28
    6440:	1f 91       	pop	r17
    6442:	0f 91       	pop	r16
    6444:	08 95       	ret

00006446 <sprintf>:
    6446:	0f 93       	push	r16
    6448:	1f 93       	push	r17
    644a:	cf 93       	push	r28
    644c:	df 93       	push	r29
    644e:	cd b7       	in	r28, 0x3d	; 61
    6450:	de b7       	in	r29, 0x3e	; 62
    6452:	2e 97       	sbiw	r28, 0x0e	; 14
    6454:	0f b6       	in	r0, 0x3f	; 63
    6456:	f8 94       	cli
    6458:	de bf       	out	0x3e, r29	; 62
    645a:	0f be       	out	0x3f, r0	; 63
    645c:	cd bf       	out	0x3d, r28	; 61
    645e:	0e 89       	ldd	r16, Y+22	; 0x16
    6460:	1f 89       	ldd	r17, Y+23	; 0x17
    6462:	86 e0       	ldi	r24, 0x06	; 6
    6464:	8c 83       	std	Y+4, r24	; 0x04
    6466:	1a 83       	std	Y+2, r17	; 0x02
    6468:	09 83       	std	Y+1, r16	; 0x01
    646a:	8f ef       	ldi	r24, 0xFF	; 255
    646c:	9f e7       	ldi	r25, 0x7F	; 127
    646e:	9e 83       	std	Y+6, r25	; 0x06
    6470:	8d 83       	std	Y+5, r24	; 0x05
    6472:	ae 01       	movw	r20, r28
    6474:	46 5e       	subi	r20, 0xE6	; 230
    6476:	5f 4f       	sbci	r21, 0xFF	; 255
    6478:	68 8d       	ldd	r22, Y+24	; 0x18
    647a:	79 8d       	ldd	r23, Y+25	; 0x19
    647c:	ce 01       	movw	r24, r28
    647e:	01 96       	adiw	r24, 0x01	; 1
    6480:	81 d8       	rcall	.-3838   	; 0x5584 <vfprintf>
    6482:	ef 81       	ldd	r30, Y+7	; 0x07
    6484:	f8 85       	ldd	r31, Y+8	; 0x08
    6486:	e0 0f       	add	r30, r16
    6488:	f1 1f       	adc	r31, r17
    648a:	10 82       	st	Z, r1
    648c:	2e 96       	adiw	r28, 0x0e	; 14
    648e:	0f b6       	in	r0, 0x3f	; 63
    6490:	f8 94       	cli
    6492:	de bf       	out	0x3e, r29	; 62
    6494:	0f be       	out	0x3f, r0	; 63
    6496:	cd bf       	out	0x3d, r28	; 61
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	08 95       	ret

000064a2 <__ultoa_invert>:
    64a2:	fa 01       	movw	r30, r20
    64a4:	aa 27       	eor	r26, r26
    64a6:	28 30       	cpi	r18, 0x08	; 8
    64a8:	51 f1       	breq	.+84     	; 0x64fe <__ultoa_invert+0x5c>
    64aa:	20 31       	cpi	r18, 0x10	; 16
    64ac:	81 f1       	breq	.+96     	; 0x650e <__ultoa_invert+0x6c>
    64ae:	e8 94       	clt
    64b0:	6f 93       	push	r22
    64b2:	6e 7f       	andi	r22, 0xFE	; 254
    64b4:	6e 5f       	subi	r22, 0xFE	; 254
    64b6:	7f 4f       	sbci	r23, 0xFF	; 255
    64b8:	8f 4f       	sbci	r24, 0xFF	; 255
    64ba:	9f 4f       	sbci	r25, 0xFF	; 255
    64bc:	af 4f       	sbci	r26, 0xFF	; 255
    64be:	b1 e0       	ldi	r27, 0x01	; 1
    64c0:	3e d0       	rcall	.+124    	; 0x653e <__ultoa_invert+0x9c>
    64c2:	b4 e0       	ldi	r27, 0x04	; 4
    64c4:	3c d0       	rcall	.+120    	; 0x653e <__ultoa_invert+0x9c>
    64c6:	67 0f       	add	r22, r23
    64c8:	78 1f       	adc	r23, r24
    64ca:	89 1f       	adc	r24, r25
    64cc:	9a 1f       	adc	r25, r26
    64ce:	a1 1d       	adc	r26, r1
    64d0:	68 0f       	add	r22, r24
    64d2:	79 1f       	adc	r23, r25
    64d4:	8a 1f       	adc	r24, r26
    64d6:	91 1d       	adc	r25, r1
    64d8:	a1 1d       	adc	r26, r1
    64da:	6a 0f       	add	r22, r26
    64dc:	71 1d       	adc	r23, r1
    64de:	81 1d       	adc	r24, r1
    64e0:	91 1d       	adc	r25, r1
    64e2:	a1 1d       	adc	r26, r1
    64e4:	20 d0       	rcall	.+64     	; 0x6526 <__ultoa_invert+0x84>
    64e6:	09 f4       	brne	.+2      	; 0x64ea <__ultoa_invert+0x48>
    64e8:	68 94       	set
    64ea:	3f 91       	pop	r19
    64ec:	2a e0       	ldi	r18, 0x0A	; 10
    64ee:	26 9f       	mul	r18, r22
    64f0:	11 24       	eor	r1, r1
    64f2:	30 19       	sub	r19, r0
    64f4:	30 5d       	subi	r19, 0xD0	; 208
    64f6:	31 93       	st	Z+, r19
    64f8:	de f6       	brtc	.-74     	; 0x64b0 <__ultoa_invert+0xe>
    64fa:	cf 01       	movw	r24, r30
    64fc:	08 95       	ret
    64fe:	46 2f       	mov	r20, r22
    6500:	47 70       	andi	r20, 0x07	; 7
    6502:	40 5d       	subi	r20, 0xD0	; 208
    6504:	41 93       	st	Z+, r20
    6506:	b3 e0       	ldi	r27, 0x03	; 3
    6508:	0f d0       	rcall	.+30     	; 0x6528 <__ultoa_invert+0x86>
    650a:	c9 f7       	brne	.-14     	; 0x64fe <__ultoa_invert+0x5c>
    650c:	f6 cf       	rjmp	.-20     	; 0x64fa <__ultoa_invert+0x58>
    650e:	46 2f       	mov	r20, r22
    6510:	4f 70       	andi	r20, 0x0F	; 15
    6512:	40 5d       	subi	r20, 0xD0	; 208
    6514:	4a 33       	cpi	r20, 0x3A	; 58
    6516:	18 f0       	brcs	.+6      	; 0x651e <__ultoa_invert+0x7c>
    6518:	49 5d       	subi	r20, 0xD9	; 217
    651a:	31 fd       	sbrc	r19, 1
    651c:	40 52       	subi	r20, 0x20	; 32
    651e:	41 93       	st	Z+, r20
    6520:	02 d0       	rcall	.+4      	; 0x6526 <__ultoa_invert+0x84>
    6522:	a9 f7       	brne	.-22     	; 0x650e <__ultoa_invert+0x6c>
    6524:	ea cf       	rjmp	.-44     	; 0x64fa <__ultoa_invert+0x58>
    6526:	b4 e0       	ldi	r27, 0x04	; 4
    6528:	a6 95       	lsr	r26
    652a:	97 95       	ror	r25
    652c:	87 95       	ror	r24
    652e:	77 95       	ror	r23
    6530:	67 95       	ror	r22
    6532:	ba 95       	dec	r27
    6534:	c9 f7       	brne	.-14     	; 0x6528 <__ultoa_invert+0x86>
    6536:	00 97       	sbiw	r24, 0x00	; 0
    6538:	61 05       	cpc	r22, r1
    653a:	71 05       	cpc	r23, r1
    653c:	08 95       	ret
    653e:	9b 01       	movw	r18, r22
    6540:	ac 01       	movw	r20, r24
    6542:	0a 2e       	mov	r0, r26
    6544:	06 94       	lsr	r0
    6546:	57 95       	ror	r21
    6548:	47 95       	ror	r20
    654a:	37 95       	ror	r19
    654c:	27 95       	ror	r18
    654e:	ba 95       	dec	r27
    6550:	c9 f7       	brne	.-14     	; 0x6544 <__ultoa_invert+0xa2>
    6552:	62 0f       	add	r22, r18
    6554:	73 1f       	adc	r23, r19
    6556:	84 1f       	adc	r24, r20
    6558:	95 1f       	adc	r25, r21
    655a:	a0 1d       	adc	r26, r0
    655c:	08 95       	ret

0000655e <_exit>:
    655e:	f8 94       	cli

00006560 <__stop_program>:
    6560:	ff cf       	rjmp	.-2      	; 0x6560 <__stop_program>
