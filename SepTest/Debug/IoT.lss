
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ac  00800200  00007238  000072cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e27  008007ac  008007ac  00007878  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007878  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000078d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bd8  00000000  00000000  00007914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e906  00000000  00000000  000084ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a5a  00000000  00000000  00016df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007388  00000000  00000000  0001a84c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002af0  00000000  00000000  00021bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a04  00000000  00000000  000246c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d61c  00000000  00000000  000290c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  000366e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__vector_12>
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6c 2b 	jmp	0x56d8	; 0x56d8 <__vector_25>
      68:	0c 94 be 2b 	jmp	0x577c	; 0x577c <__vector_26>
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <__vector_36>
      94:	0c 94 54 2c 	jmp	0x58a8	; 0x58a8 <__vector_37>
      98:	3c c1       	rjmp	.+632    	; 0x312 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <__vector_39>
      a0:	38 c1       	rjmp	.+624    	; 0x312 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	36 c1       	rjmp	.+620    	; 0x312 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	34 c1       	rjmp	.+616    	; 0x312 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	32 c1       	rjmp	.+612    	; 0x312 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	30 c1       	rjmp	.+608    	; 0x312 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2e c1       	rjmp	.+604    	; 0x312 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2c c1       	rjmp	.+600    	; 0x312 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c1       	rjmp	.+596    	; 0x312 <__bad_interrupt>
      be:	00 00       	nop
      c0:	28 c1       	rjmp	.+592    	; 0x312 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	26 c1       	rjmp	.+588    	; 0x312 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	24 c1       	rjmp	.+584    	; 0x312 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 98 2c 	jmp	0x5930	; 0x5930 <__vector_51>
      d0:	0c 94 ea 2c 	jmp	0x59d4	; 0x59d4 <__vector_52>
      d4:	1e c1       	rjmp	.+572    	; 0x312 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__vector_54>
      dc:	0c 94 80 2d 	jmp	0x5b00	; 0x5b00 <__vector_55>
      e0:	18 c1       	rjmp	.+560    	; 0x312 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	86 21       	and	r24, r6
      e6:	86 21       	and	r24, r6
      e8:	86 21       	and	r24, r6
      ea:	bd 21       	and	r27, r13
      ec:	c5 21       	and	r28, r5
      ee:	da 21       	and	r29, r10
      f0:	86 21       	and	r24, r6
      f2:	86 21       	and	r24, r6
      f4:	bd 21       	and	r27, r13
      f6:	c5 21       	and	r28, r5
      f8:	8e 30       	cpi	r24, 0x0E	; 14
      fa:	fe 30       	cpi	r31, 0x0E	; 14
      fc:	fe 30       	cpi	r31, 0x0E	; 14
      fe:	fe 30       	cpi	r31, 0x0E	; 14
     100:	fe 30       	cpi	r31, 0x0E	; 14
     102:	fe 30       	cpi	r31, 0x0E	; 14
     104:	fe 30       	cpi	r31, 0x0E	; 14
     106:	fe 30       	cpi	r31, 0x0E	; 14
     108:	8e 30       	cpi	r24, 0x0E	; 14
     10a:	fe 30       	cpi	r31, 0x0E	; 14
     10c:	fe 30       	cpi	r31, 0x0E	; 14
     10e:	fe 30       	cpi	r31, 0x0E	; 14
     110:	fe 30       	cpi	r31, 0x0E	; 14
     112:	fe 30       	cpi	r31, 0x0E	; 14
     114:	fe 30       	cpi	r31, 0x0E	; 14
     116:	fe 30       	cpi	r31, 0x0E	; 14
     118:	90 30       	cpi	r25, 0x00	; 0
     11a:	fe 30       	cpi	r31, 0x0E	; 14
     11c:	fe 30       	cpi	r31, 0x0E	; 14
     11e:	fe 30       	cpi	r31, 0x0E	; 14
     120:	fe 30       	cpi	r31, 0x0E	; 14
     122:	fe 30       	cpi	r31, 0x0E	; 14
     124:	fe 30       	cpi	r31, 0x0E	; 14
     126:	fe 30       	cpi	r31, 0x0E	; 14
     128:	fe 30       	cpi	r31, 0x0E	; 14
     12a:	fe 30       	cpi	r31, 0x0E	; 14
     12c:	fe 30       	cpi	r31, 0x0E	; 14
     12e:	fe 30       	cpi	r31, 0x0E	; 14
     130:	fe 30       	cpi	r31, 0x0E	; 14
     132:	fe 30       	cpi	r31, 0x0E	; 14
     134:	fe 30       	cpi	r31, 0x0E	; 14
     136:	fe 30       	cpi	r31, 0x0E	; 14
     138:	90 30       	cpi	r25, 0x00	; 0
     13a:	fe 30       	cpi	r31, 0x0E	; 14
     13c:	fe 30       	cpi	r31, 0x0E	; 14
     13e:	fe 30       	cpi	r31, 0x0E	; 14
     140:	fe 30       	cpi	r31, 0x0E	; 14
     142:	fe 30       	cpi	r31, 0x0E	; 14
     144:	fe 30       	cpi	r31, 0x0E	; 14
     146:	fe 30       	cpi	r31, 0x0E	; 14
     148:	fe 30       	cpi	r31, 0x0E	; 14
     14a:	fe 30       	cpi	r31, 0x0E	; 14
     14c:	fe 30       	cpi	r31, 0x0E	; 14
     14e:	fe 30       	cpi	r31, 0x0E	; 14
     150:	fe 30       	cpi	r31, 0x0E	; 14
     152:	fe 30       	cpi	r31, 0x0E	; 14
     154:	fe 30       	cpi	r31, 0x0E	; 14
     156:	fe 30       	cpi	r31, 0x0E	; 14
     158:	fa 30       	cpi	r31, 0x0A	; 10
     15a:	fe 30       	cpi	r31, 0x0E	; 14
     15c:	fe 30       	cpi	r31, 0x0E	; 14
     15e:	fe 30       	cpi	r31, 0x0E	; 14
     160:	fe 30       	cpi	r31, 0x0E	; 14
     162:	fe 30       	cpi	r31, 0x0E	; 14
     164:	fe 30       	cpi	r31, 0x0E	; 14
     166:	fe 30       	cpi	r31, 0x0E	; 14
     168:	c5 30       	cpi	r28, 0x05	; 5
     16a:	fe 30       	cpi	r31, 0x0E	; 14
     16c:	fe 30       	cpi	r31, 0x0E	; 14
     16e:	fe 30       	cpi	r31, 0x0E	; 14
     170:	fe 30       	cpi	r31, 0x0E	; 14
     172:	fe 30       	cpi	r31, 0x0E	; 14
     174:	fe 30       	cpi	r31, 0x0E	; 14
     176:	fe 30       	cpi	r31, 0x0E	; 14
     178:	fe 30       	cpi	r31, 0x0E	; 14
     17a:	fe 30       	cpi	r31, 0x0E	; 14
     17c:	fe 30       	cpi	r31, 0x0E	; 14
     17e:	fe 30       	cpi	r31, 0x0E	; 14
     180:	fe 30       	cpi	r31, 0x0E	; 14
     182:	fe 30       	cpi	r31, 0x0E	; 14
     184:	fe 30       	cpi	r31, 0x0E	; 14
     186:	fe 30       	cpi	r31, 0x0E	; 14
     188:	b9 30       	cpi	r27, 0x09	; 9
     18a:	fe 30       	cpi	r31, 0x0E	; 14
     18c:	fe 30       	cpi	r31, 0x0E	; 14
     18e:	fe 30       	cpi	r31, 0x0E	; 14
     190:	fe 30       	cpi	r31, 0x0E	; 14
     192:	fe 30       	cpi	r31, 0x0E	; 14
     194:	fe 30       	cpi	r31, 0x0E	; 14
     196:	fe 30       	cpi	r31, 0x0E	; 14
     198:	dd 30       	cpi	r29, 0x0D	; 13

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 c7 13 	call	0x278e	; 0x278e <prvCheckTasksWaitingTermination>
     2a0:	80 91 fd 13 	lds	r24, 0x13FD	; 0x8013fd <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	10 f0       	brcs	.+4      	; 0x2ac <prvIdleTask+0x10>
     2a8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
     2ac:	0e 94 03 22 	call	0x4406	; 0x4406 <vApplicationIdleHook>
     2b0:	f5 cf       	rjmp	.-22     	; 0x29c <prvIdleTask>

000002b2 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <prvGetNextExpireTime>
     2c4:	49 81       	ldd	r20, Y+1	; 0x01
     2c6:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <prvProcessTimerOrBlockTask>
     2ca:	0e 94 4f 21 	call	0x429e	; 0x429e <prvProcessReceivedCommands>
     2ce:	f6 cf       	rjmp	.-20     	; 0x2bc <prvTimerTask+0xa>

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d1 e2       	ldi	r29, 0x21	; 33
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0c bf       	out	0x3c, r16	; 60

000002e0 <__do_copy_data>:
     2e0:	17 e0       	ldi	r17, 0x07	; 7
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	e8 e3       	ldi	r30, 0x38	; 56
     2e8:	f2 e7       	ldi	r31, 0x72	; 114
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	ac 3a       	cpi	r26, 0xAC	; 172
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	25 e1       	ldi	r18, 0x15	; 21
     2fc:	ac ea       	ldi	r26, 0xAC	; 172
     2fe:	b7 e0       	ldi	r27, 0x07	; 7
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a3 3d       	cpi	r26, 0xD3	; 211
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 8b 22 	call	0x4516	; 0x4516 <main>
     30e:	0c 94 1a 39 	jmp	0x7234	; 0x7234 <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <CO2_callback>:

/*
* Callback function called by the driver when the new CO2 measure is received.
*/
void CO2_callback(uint16_t callback){
	ppm = callback;
     314:	90 93 b8 15 	sts	0x15B8, r25	; 0x8015b8 <ppm+0x1>
     318:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <ppm>
     31c:	08 95       	ret

0000031e <startReadingCO2>:


/*
* Task for taking the CO2 measurements and setting the CO2 value accordingly.
*/
void startReadingCO2(void* self) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <startReadingCO2+0x6>
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(16000UL);
	xLastWakeTime = xTaskGetTickCount();
     32c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <xTaskGetTickCount>
     330:	69 83       	std	Y+1, r22	; 0x01
     332:	7a 83       	std	Y+2, r23	; 0x02
     334:	8b 83       	std	Y+3, r24	; 0x03
     336:	9c 83       	std	Y+4, r25	; 0x04
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     338:	40 ee       	ldi	r20, 0xE0	; 224
     33a:	53 e0       	ldi	r21, 0x03	; 3
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <xTaskDelayUntil>
		
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     348:	40 91 b9 15 	lds	r20, 0x15B9	; 0x8015b9 <ready_bit>
     34c:	50 91 ba 15 	lds	r21, 0x15BA	; 0x8015ba <ready_bit+0x1>
     350:	60 91 bb 15 	lds	r22, 0x15BB	; 0x8015bb <ready_bit+0x2>
     354:	70 91 bc 15 	lds	r23, 0x15BC	; 0x8015bc <ready_bit+0x3>
     358:	cc 24       	eor	r12, r12
     35a:	ca 94       	dec	r12
     35c:	dc 2c       	mov	r13, r12
     35e:	76 01       	movw	r14, r12
     360:	01 e0       	ldi	r16, 0x01	; 1
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <group_start>
     368:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <group_start+0x1>
     36c:	da d5       	rcall	.+2996   	; 0xf22 <xEventGroupWaitBits>
		ready_bit,
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     36e:	00 91 b9 15 	lds	r16, 0x15B9	; 0x8015b9 <ready_bit>
     372:	10 91 ba 15 	lds	r17, 0x15BA	; 0x8015ba <ready_bit+0x1>
     376:	20 91 bb 15 	lds	r18, 0x15BB	; 0x8015bb <ready_bit+0x2>
     37a:	30 91 bc 15 	lds	r19, 0x15BC	; 0x8015bc <ready_bit+0x3>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	80 23       	and	r24, r16
     384:	91 23       	and	r25, r17
     386:	a2 23       	and	r26, r18
     388:	b3 23       	and	r27, r19
     38a:	08 17       	cp	r16, r24
     38c:	19 07       	cpc	r17, r25
     38e:	2a 07       	cpc	r18, r26
     390:	3b 07       	cpc	r19, r27
     392:	91 f6       	brne	.-92     	; 0x338 <startReadingCO2+0x1a>
			rc = mh_z19_takeMeassuring();
     394:	0e 94 c5 29 	call	0x538a	; 0x538a <mh_z19_takeMeassuring>
     398:	80 93 b6 15 	sts	0x15B6, r24	; 0x8015b6 <rc>
			if (rc != MHZ19_OK){
     39c:	81 11       	cpse	r24, r1
     39e:	cc cf       	rjmp	.-104    	; 0x338 <startReadingCO2+0x1a>
				// Something went wrong
				} else {
				((CO2_t)self)->CO2 = ppm;
     3a0:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <ppm>
     3a4:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <ppm+0x1>
     3a8:	f5 01       	movw	r30, r10
     3aa:	91 83       	std	Z+1, r25	; 0x01
     3ac:	80 83       	st	Z, r24
				set_co2(ppm);
     3ae:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <ppm>
     3b2:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <ppm+0x1>
     3b6:	b1 d2       	rcall	.+1378   	; 0x91a <set_co2>
     3b8:	bf cf       	rjmp	.-130    	; 0x338 <startReadingCO2+0x1a>

000003ba <CO2_handler_init>:
}

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void CO2_handler_init(uint16_t CO2_task_priority, CO2_t self){
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	08 2f       	mov	r16, r24
     3c6:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     3c8:	40 91 b9 15 	lds	r20, 0x15B9	; 0x8015b9 <ready_bit>
     3cc:	50 91 ba 15 	lds	r21, 0x15BA	; 0x8015ba <ready_bit+0x1>
     3d0:	60 91 bb 15 	lds	r22, 0x15BB	; 0x8015bb <ready_bit+0x2>
     3d4:	70 91 bc 15 	lds	r23, 0x15BC	; 0x8015bc <ready_bit+0x3>
     3d8:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <group_start>
     3dc:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <group_start+0x1>
     3e0:	40 d6       	rcall	.+3200   	; 0x1062 <xEventGroupSetBits>

	xTaskCreate(
     3e2:	e1 2c       	mov	r14, r1
     3e4:	f1 2c       	mov	r15, r1
     3e6:	9e 01       	movw	r18, r28
     3e8:	44 e2       	ldi	r20, 0x24	; 36
     3ea:	51 e0       	ldi	r21, 0x01	; 1
     3ec:	6f e6       	ldi	r22, 0x6F	; 111
     3ee:	72 e0       	ldi	r23, 0x02	; 2
     3f0:	8f e8       	ldi	r24, 0x8F	; 143
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 8e 14 	call	0x291c	; 0x291c <xTaskCreate>
	, configMINIMAL_STACK_SIZE + 100
	, (void*)self
	, CO2_task_priority
	, NULL);
	
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <createCO2>:
/*
* Method used for allocating memory for CO2 struct and returning it, initializing the CO2 value to 0, setting groups and bits,
* initializing the driver, injecting callback and creating a CO2 task.
*/
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	8c 01       	movw	r16, r24
     41a:	5b 01       	movw	r10, r22
     41c:	69 01       	movw	r12, r18
     41e:	7a 01       	movw	r14, r20
	CO2_t new_measure = malloc(sizeof(CO2Handler));
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <malloc>
     428:	ec 01       	movw	r28, r24
	if(new_measure == NULL)
     42a:	89 2b       	or	r24, r25
     42c:	11 f1       	breq	.+68     	; 0x472 <createCO2+0x6e>
	{
		return NULL;
	}
	new_measure ->CO2 = 0;
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	18 82       	st	Y, r1
	
	group_start = taskBits;
     432:	b0 92 be 15 	sts	0x15BE, r11	; 0x8015be <group_start+0x1>
     436:	a0 92 bd 15 	sts	0x15BD, r10	; 0x8015bd <group_start>
	ready_bit = bit;
     43a:	c0 92 b9 15 	sts	0x15B9, r12	; 0x8015b9 <ready_bit>
     43e:	d0 92 ba 15 	sts	0x15BA, r13	; 0x8015ba <ready_bit+0x1>
     442:	e0 92 bb 15 	sts	0x15BB, r14	; 0x8015bb <ready_bit+0x2>
     446:	f0 92 bc 15 	sts	0x15BC, r15	; 0x8015bc <ready_bit+0x3>
	
	mh_z19_initialise(ser_USART3);
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	0e 94 9b 29 	call	0x5336	; 0x5336 <mh_z19_initialise>
	print_sharedf("CO2 sensor initialized");
     450:	87 e7       	ldi	r24, 0x77	; 119
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	9f 93       	push	r25
     456:	8f 93       	push	r24
     458:	7a d1       	rcall	.+756    	; 0x74e <print_sharedf>
	mh_z19_injectCallBack(CO2_callback);
     45a:	8a e8       	ldi	r24, 0x8A	; 138
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 c0 29 	call	0x5380	; 0x5380 <mh_z19_injectCallBack>
	
	CO2_handler_init(priority, new_measure);
     462:	be 01       	movw	r22, r28
     464:	c8 01       	movw	r24, r16
     466:	a9 df       	rcall	.-174    	; 0x3ba <CO2_handler_init>
	return new_measure;
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	8c 2f       	mov	r24, r28
     46e:	9d 2f       	mov	r25, r29
     470:	02 c0       	rjmp	.+4      	; 0x476 <createCO2+0x72>
CO2_t createCO2(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit)
{
	CO2_t new_measure = malloc(sizeof(CO2Handler));
	if(new_measure == NULL)
	{
		return NULL;
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
	print_sharedf("CO2 sensor initialized");
	mh_z19_injectCallBack(CO2_callback);
	
	CO2_handler_init(priority, new_measure);
	return new_measure;
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	bf 90       	pop	r11
     488:	af 90       	pop	r10
     48a:	08 95       	ret

0000048c <DownLinkHandler_Create>:
void lora_downlink_handler_task(void* messageBuffer);

/*
* Function that creates the listener task
*/
void DownLinkHandler_Create(uint16_t lora_handler_task_priority, MessageBufferHandle_t downLinkMessageBuffer){
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	9b 01       	movw	r18, r22
	xTaskCreate(
     494:	e1 2c       	mov	r14, r1
     496:	f1 2c       	mov	r15, r1
     498:	08 2f       	mov	r16, r24
     49a:	48 e8       	ldi	r20, 0x88	; 136
     49c:	51 e0       	ldi	r21, 0x01	; 1
     49e:	6e e8       	ldi	r22, 0x8E	; 142
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	8b e9       	ldi	r24, 0x9B	; 155
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 8e 14 	call	0x291c	; 0x291c <xTaskCreate>
	, "LoRaWAN Handler Down link"
	, configMINIMAL_STACK_SIZE + 200
	, (void*)downLinkMessageBuffer
	, lora_handler_task_priority
	, NULL);
}
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	08 95       	ret

000004b2 <lora_DownLinkHandler_StartTask>:

/*
* Function that contains task body and accepts incoming messages to open/close the window
*/
void lora_DownLinkHandler_StartTask(MessageBufferHandle_t downLinkMessageBuffer){
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
	
	xMessageBufferReceive(downLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
     4ba:	0f ef       	ldi	r16, 0xFF	; 255
     4bc:	1f ef       	ldi	r17, 0xFF	; 255
     4be:	98 01       	movw	r18, r16
     4c0:	46 e1       	ldi	r20, 0x16	; 22
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	6c ea       	ldi	r22, 0xAC	; 172
     4c6:	77 e0       	ldi	r23, 0x07	; 7
     4c8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <xStreamBufferReceive>
	print_sharedf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len);
     4cc:	cc ea       	ldi	r28, 0xAC	; 172
     4ce:	d7 e0       	ldi	r29, 0x07	; 7
     4d0:	99 81       	ldd	r25, Y+1	; 0x01
     4d2:	88 81       	ld	r24, Y
     4d4:	1f 92       	push	r1
     4d6:	9f 93       	push	r25
     4d8:	1f 92       	push	r1
     4da:	8f 93       	push	r24
     4dc:	88 ea       	ldi	r24, 0xA8	; 168
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	34 d1       	rcall	.+616    	; 0x74e <print_sharedf>
	if (1 == downlinkPayload.len){
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	d1 f4       	brne	.+52     	; 0x52c <lora_DownLinkHandler_StartTask+0x7a>
		if(downlinkPayload.bytes[0] == 1){
     4f8:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <__data_end+0x2>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	59 f4       	brne	.+22     	; 0x516 <lora_DownLinkHandler_StartTask+0x64>
			rc_servo_setPosition(1,-100); // fully open
     500:	6c e9       	ldi	r22, 0x9C	; 156
     502:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <rc_servo_setPosition>
			print_sharedf("Window opened");
     506:	89 ed       	ldi	r24, 0xD9	; 217
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	1f d1       	rcall	.+574    	; 0x74e <print_sharedf>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0b c0       	rjmp	.+22     	; 0x52c <lora_DownLinkHandler_StartTask+0x7a>
		}
		else{
			rc_servo_setPosition(1, 100); // fully close
     516:	64 e6       	ldi	r22, 0x64	; 100
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <rc_servo_setPosition>
			print_sharedf("Window closed");
     51e:	87 ee       	ldi	r24, 0xE7	; 231
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	13 d1       	rcall	.+550    	; 0x74e <print_sharedf>
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
		}
	}
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <lora_downlink_handler_task>:

/*
* Task method used to run the actual task
*/
void lora_downlink_handler_task(void* downLinkMessageBuffer){
     536:	ec 01       	movw	r28, r24
	for(;;){
		lora_DownLinkHandler_StartTask((MessageBufferHandle_t) downLinkMessageBuffer);
     538:	ce 01       	movw	r24, r28
     53a:	bb df       	rcall	.-138    	; 0x4b2 <lora_DownLinkHandler_StartTask>
     53c:	fd cf       	rjmp	.-6      	; 0x538 <lora_downlink_handler_task+0x2>

0000053e <tsl2591Callback>:

/*
* Callback function called when the new lux data is fetched.
*/
void tsl2591Callback(tsl2591_returnCode_t rc, LightHandler_t self)
{
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	00 d0       	rcall	.+0      	; 0x548 <tsl2591Callback+0xa>
     548:	1f 92       	push	r1
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
	
	float _lux;
	switch (rc)
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	31 f5       	brne	.+76     	; 0x59e <tsl2591Callback+0x60>
     552:	8b 01       	movw	r16, r22
	{
		case TSL2591_DATA_READY:
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <tsl2591_getLux>
     55c:	81 11       	cpse	r24, r1
     55e:	16 c0       	rjmp	.+44     	; 0x58c <tsl2591Callback+0x4e>
		{
			lux_val = _lux;
     560:	69 81       	ldd	r22, Y+1	; 0x01
     562:	7a 81       	ldd	r23, Y+2	; 0x02
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	9c 81       	ldd	r25, Y+4	; 0x04
     568:	0e 94 98 22 	call	0x4530	; 0x4530 <__fixunssfsi>
     56c:	70 93 c3 07 	sts	0x07C3, r23	; 0x8007c3 <lux_val+0x1>
     570:	60 93 c2 07 	sts	0x07C2, r22	; 0x8007c2 <lux_val>
			//setting data using the shared sensor data c file
			set_light(_lux);
     574:	cb 01       	movw	r24, r22
     576:	2c d2       	rcall	.+1112   	; 0x9d0 <set_light>
			self ->lux = _lux;
     578:	69 81       	ldd	r22, Y+1	; 0x01
     57a:	7a 81       	ldd	r23, Y+2	; 0x02
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	9c 81       	ldd	r25, Y+4	; 0x04
     580:	0e 94 98 22 	call	0x4530	; 0x4530 <__fixunssfsi>
     584:	f8 01       	movw	r30, r16
     586:	71 83       	std	Z+1, r23	; 0x01
     588:	60 83       	st	Z, r22
     58a:	09 c0       	rjmp	.+18     	; 0x59e <tsl2591Callback+0x60>
			
		}
		else if( TSL2591_OVERFLOW == rc )
     58c:	83 30       	cpi	r24, 0x03	; 3
     58e:	39 f4       	brne	.+14     	; 0x59e <tsl2591Callback+0x60>
		{
			print_sharedf("Lux overflow - change gain and integration time\n"); //switch
     590:	85 ef       	ldi	r24, 0xF5	; 245
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	da d0       	rcall	.+436    	; 0x74e <print_sharedf>
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
		break;
		
		default:
		break;
	}
}
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <createLightTask>:
} LightHandler;

/*
* Method used for setting bits within an RTOS event group and for creating task.
*/
void createLightTask(UBaseType_t light_priority, LightHandler_t self){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	08 2f       	mov	r16, r24
     5bc:	eb 01       	movw	r28, r22
	xEventGroupSetBits(group_start, ready_bit);
     5be:	40 91 b9 15 	lds	r20, 0x15B9	; 0x8015b9 <ready_bit>
     5c2:	50 91 ba 15 	lds	r21, 0x15BA	; 0x8015ba <ready_bit+0x1>
     5c6:	60 91 bb 15 	lds	r22, 0x15BB	; 0x8015bb <ready_bit+0x2>
     5ca:	70 91 bc 15 	lds	r23, 0x15BC	; 0x8015bc <ready_bit+0x3>
     5ce:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <group_start>
     5d2:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <group_start+0x1>
     5d6:	45 d5       	rcall	.+2698   	; 0x1062 <xEventGroupSetBits>
	
	xTaskCreate(startReadingLight
     5d8:	e1 2c       	mov	r14, r1
     5da:	f1 2c       	mov	r15, r1
     5dc:	9e 01       	movw	r18, r28
     5de:	48 e8       	ldi	r20, 0x88	; 136
     5e0:	51 e0       	ldi	r21, 0x01	; 1
     5e2:	66 e2       	ldi	r22, 0x26	; 38
     5e4:	73 e0       	ldi	r23, 0x03	; 3
     5e6:	81 e8       	ldi	r24, 0x81	; 129
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	0e 94 8e 14 	call	0x291c	; 0x291c <xTaskCreate>
	, "Light task"
	, configMINIMAL_STACK_SIZE + 200,
	(void*) self,
	light_priority,
	NULL);
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	08 95       	ret

000005fa <createLightSensor>:
/*
* Method used for allocating memory for LightHandler struct and returning it, initializing the lux value to 0, setting groups and bits,
* initializing the driver, injecting callback, enabling the driver and creating a light task.
*/
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
     5fa:	8f 92       	push	r8
     5fc:	9f 92       	push	r9
     5fe:	af 92       	push	r10
     600:	bf 92       	push	r11
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	18 2f       	mov	r17, r24
     60e:	7b 01       	movw	r14, r22
     610:	49 01       	movw	r8, r18
     612:	5a 01       	movw	r10, r20
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <calloc>
     620:	ec 01       	movw	r28, r24
	
	if(new_measure == NULL){
     622:	89 2b       	or	r24, r25
     624:	19 f1       	breq	.+70     	; 0x66c <createLightSensor+0x72>
		return NULL;
	}
	new_measure -> lux = 0;
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	18 82       	st	Y, r1
	ready_bit = bits;
     62a:	80 92 b9 15 	sts	0x15B9, r8	; 0x8015b9 <ready_bit>
     62e:	90 92 ba 15 	sts	0x15BA, r9	; 0x8015ba <ready_bit+0x1>
     632:	a0 92 bb 15 	sts	0x15BB, r10	; 0x8015bb <ready_bit+0x2>
     636:	b0 92 bc 15 	sts	0x15BC, r11	; 0x8015bc <ready_bit+0x3>
	group_start = eventBits;
     63a:	f0 92 be 15 	sts	0x15BE, r15	; 0x8015be <group_start+0x1>
     63e:	e0 92 bd 15 	sts	0x15BD, r14	; 0x8015bd <group_start>
	
	//initialize sensor with the callback function
	if ( TSL2591_OK == tsl2591_initialise(tsl2591Callback))
     642:	8f e9       	ldi	r24, 0x9F	; 159
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <tsl2591_initialise>
     64a:	81 11       	cpse	r24, r1
     64c:	07 c0       	rjmp	.+14     	; 0x65c <createLightSensor+0x62>
	{
		print_sharedf("Light sensor initialized");
     64e:	81 e3       	ldi	r24, 0x31	; 49
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	7b d0       	rcall	.+246    	; 0x74e <print_sharedf>
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
	}
	
	//enable sensor
	if ( TSL2591_OK != tsl2591_enable() )
     65c:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <tsl2591_enable>
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
     660:	be 01       	movw	r22, r28
     662:	81 2f       	mov	r24, r17
     664:	a5 df       	rcall	.-182    	; 0x5b0 <createLightTask>
	return new_measure;
     666:	8c 2f       	mov	r24, r28
     668:	9d 2f       	mov	r25, r29
     66a:	02 c0       	rjmp	.+4      	; 0x670 <createLightSensor+0x76>
LightHandler_t createLightSensor(UBaseType_t light_priority, EventGroupHandle_t eventBits, EventBits_t bits)
{
	LightHandler_t new_measure = calloc(1, sizeof(LightHandler));
	
	if(new_measure == NULL){
		return NULL;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
	{
		//some error handling here
	}
	createLightTask(light_priority, new_measure);
	return new_measure;
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	bf 90       	pop	r11
     67c:	af 90       	pop	r10
     67e:	9f 90       	pop	r9
     680:	8f 90       	pop	r8
     682:	08 95       	ret

00000684 <measure_light>:

/*
* Function used for measuring
*/
void measure_light(LightHandler_t self){
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24
	
	//set bits
	EventBits_t readyBits = xEventGroupWaitBits(group_start,
     696:	40 91 b9 15 	lds	r20, 0x15B9	; 0x8015b9 <ready_bit>
     69a:	50 91 ba 15 	lds	r21, 0x15BA	; 0x8015ba <ready_bit+0x1>
     69e:	60 91 bb 15 	lds	r22, 0x15BB	; 0x8015bb <ready_bit+0x2>
     6a2:	70 91 bc 15 	lds	r23, 0x15BC	; 0x8015bc <ready_bit+0x3>
     6a6:	cc 24       	eor	r12, r12
     6a8:	ca 94       	dec	r12
     6aa:	dc 2c       	mov	r13, r12
     6ac:	76 01       	movw	r14, r12
     6ae:	01 e0       	ldi	r16, 0x01	; 1
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <group_start>
     6b6:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <group_start+0x1>
     6ba:	33 d4       	rcall	.+2150   	; 0xf22 <xEventGroupWaitBits>
	pdFALSE,
	pdTRUE,
	portMAX_DELAY);
	
	//check if all bits are set
	if ((readyBits & (ready_bit)) == (ready_bit)) {
     6bc:	00 91 b9 15 	lds	r16, 0x15B9	; 0x8015b9 <ready_bit>
     6c0:	10 91 ba 15 	lds	r17, 0x15BA	; 0x8015ba <ready_bit+0x1>
     6c4:	20 91 bb 15 	lds	r18, 0x15BB	; 0x8015bb <ready_bit+0x2>
     6c8:	30 91 bc 15 	lds	r19, 0x15BC	; 0x8015bc <ready_bit+0x3>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	80 23       	and	r24, r16
     6d2:	91 23       	and	r25, r17
     6d4:	a2 23       	and	r26, r18
     6d6:	b3 23       	and	r27, r19
     6d8:	08 17       	cp	r16, r24
     6da:	19 07       	cpc	r17, r25
     6dc:	2a 07       	cpc	r18, r26
     6de:	3b 07       	cpc	r19, r27
     6e0:	39 f4       	brne	.+14     	; 0x6f0 <measure_light+0x6c>
		if ( TSL2591_OK != tsl2591_fetchData() )
     6e2:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <tsl2591_fetchData>
     6e6:	81 11       	cpse	r24, r1
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <measure_light+0x6c>
			// Investigate the return code further
		}
		else
		{
			//The light data will be ready after the driver calls the call back function with
			tsl2591Callback(TSL2591_DATA_READY, self);
     6ea:	be 01       	movw	r22, r28
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	27 df       	rcall	.-434    	; 0x53e <tsl2591Callback>
		}
	}
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	08 95       	ret

00000702 <startReadingLight>:

/*
* Reading task for sensor
*/
void startReadingLight(void* self){
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <startReadingLight+0x6>
     708:	1f 92       	push	r1
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	8c 01       	movw	r16, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     710:	0e 94 18 15 	call	0x2a30	; 0x2a30 <xTaskGetTickCount>
     714:	69 83       	std	Y+1, r22	; 0x01
     716:	7a 83       	std	Y+2, r23	; 0x02
     718:	8b 83       	std	Y+3, r24	; 0x03
     71a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds to read
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     71c:	42 ea       	ldi	r20, 0xA2	; 162
     71e:	53 e0       	ldi	r21, 0x03	; 3
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <xTaskDelayUntil>
		measure_light((LightHandler_t) self);
     72c:	c8 01       	movw	r24, r16
     72e:	aa df       	rcall	.-172    	; 0x684 <measure_light>
     730:	f5 cf       	rjmp	.-22     	; 0x71c <startReadingLight+0x1a>

00000732 <create_shared_printf>:

/*
* Initialize the semaphore mutex used to print text to the terminal
*/
void create_shared_printf(){
	if (xMutexPrint == NULL ){
     732:	80 91 bf 15 	lds	r24, 0x15BF	; 0x8015bf <xMutexPrint>
     736:	90 91 c0 15 	lds	r25, 0x15C0	; 0x8015c0 <xMutexPrint+0x1>
     73a:	89 2b       	or	r24, r25
     73c:	39 f4       	brne	.+14     	; 0x74c <create_shared_printf+0x1a>
		xMutexPrint = xSemaphoreCreateMutex();
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <xQueueCreateMutex>
     744:	90 93 c0 15 	sts	0x15C0, r25	; 0x8015c0 <xMutexPrint+0x1>
     748:	80 93 bf 15 	sts	0x15BF, r24	; 0x8015bf <xMutexPrint>
     74c:	08 95       	ret

0000074e <print_sharedf>:
}

/*
* Method used to print to the terminal, synchronized with the mutex
*/
void print_sharedf(char* format, ...){
     74e:	0f 93       	push	r16
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	va_list lst;
	if (xSemaphoreTake(xMutexPrint, (TickType_t) 300) == pdTRUE) {
     758:	4c e2       	ldi	r20, 0x2C	; 44
     75a:	51 e0       	ldi	r21, 0x01	; 1
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 91 bf 15 	lds	r24, 0x15BF	; 0x8015bf <xMutexPrint>
     764:	90 91 c0 15 	lds	r25, 0x15C0	; 0x8015c0 <xMutexPrint+0x1>
     768:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	b9 f4       	brne	.+46     	; 0x79e <print_sharedf+0x50>
		va_start(lst, format);
		//needs testing
		vprintf(format, lst);
     770:	be 01       	movw	r22, r28
     772:	67 5f       	subi	r22, 0xF7	; 247
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	8f 81       	ldd	r24, Y+7	; 0x07
     778:	98 85       	ldd	r25, Y+8	; 0x08
     77a:	0e 94 b5 38 	call	0x716a	; 0x716a <vprintf>
		printf("\n");
     77e:	8a e0       	ldi	r24, 0x0A	; 10
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 82 38 	call	0x7104	; 0x7104 <putchar>
		xSemaphoreGive(xMutexPrint);
     786:	00 e0       	ldi	r16, 0x00	; 0
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	a9 01       	movw	r20, r18
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	80 91 bf 15 	lds	r24, 0x15BF	; 0x8015bf <xMutexPrint>
     796:	90 91 c0 15 	lds	r25, 0x15C0	; 0x8015c0 <xMutexPrint+0x1>
     79a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
	}
	else {}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <create_semaphore_mutex_and_sensors>:
static uint16_t light_value = 0;
/*
* Function used to initialize pointers to the necessary structs and initializing the mutex for the shared data
*/
void create_semaphore_mutex_and_sensors(){
	if (xMutexSemaphore == NULL){
     7a6:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     7aa:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     7ae:	89 2b       	or	r24, r25
     7b0:	39 f4       	brne	.+14     	; 0x7c0 <create_semaphore_mutex_and_sensors+0x1a>
		xMutexSemaphore = xSemaphoreCreateMutex();
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <xQueueCreateMutex>
     7b8:	90 93 c2 15 	sts	0x15C2, r25	; 0x8015c2 <xMutexSemaphore+0x1>
     7bc:	80 93 c1 15 	sts	0x15C1, r24	; 0x8015c1 <xMutexSemaphore>
     7c0:	08 95       	ret

000007c2 <set_temp_hum>:
}

/*
* Function used to set the temperature and humidity, protected by the mutex 
*/
void set_temp_hum(float temp, uint16_t hum){
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	6b 01       	movw	r12, r22
     7d2:	7c 01       	movw	r14, r24
     7d4:	ea 01       	movw	r28, r20
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     7d6:	4c e2       	ldi	r20, 0x2C	; 44
     7d8:	51 e0       	ldi	r21, 0x01	; 1
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     7e2:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     7e6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	c9 f4       	brne	.+50     	; 0x820 <set_temp_hum+0x5e>
		temperature_value = temp;
     7ee:	c0 92 ca 07 	sts	0x07CA, r12	; 0x8007ca <temperature_value>
     7f2:	d0 92 cb 07 	sts	0x07CB, r13	; 0x8007cb <temperature_value+0x1>
     7f6:	e0 92 cc 07 	sts	0x07CC, r14	; 0x8007cc <temperature_value+0x2>
     7fa:	f0 92 cd 07 	sts	0x07CD, r15	; 0x8007cd <temperature_value+0x3>
		humidity_value = hum;
     7fe:	d0 93 c9 07 	sts	0x07C9, r29	; 0x8007c9 <humidity_value+0x1>
     802:	c0 93 c8 07 	sts	0x07C8, r28	; 0x8007c8 <humidity_value>
		xSemaphoreGive(xMutexSemaphore);
     806:	00 e0       	ldi	r16, 0x00	; 0
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	a9 01       	movw	r20, r18
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     816:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     81a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
     81e:	07 c0       	rjmp	.+14     	; 0x82e <set_temp_hum+0x6c>
		} else{
		print_sharedf("The mutex could not be obtained.");
     820:	8a e4       	ldi	r24, 0x4A	; 74
     822:	93 e0       	ldi	r25, 0x03	; 3
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	92 df       	rcall	.-220    	; 0x74e <print_sharedf>
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
	}
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	08 95       	ret

0000083e <get_humidity>:

/*
* Getter for the humidity, protected by the mutex
*/
uint16_t get_humidity(){
     83e:	0f 93       	push	r16
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
	uint16_t tmp;

	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     844:	4c e2       	ldi	r20, 0x2C	; 44
     846:	51 e0       	ldi	r21, 0x01	; 1
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     850:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     854:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	99 f4       	brne	.+38     	; 0x882 <get_humidity+0x44>
		tmp = humidity_value;
     85c:	d0 91 c8 07 	lds	r29, 0x07C8	; 0x8007c8 <humidity_value>
     860:	c0 91 c9 07 	lds	r28, 0x07C9	; 0x8007c9 <humidity_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	a9 01       	movw	r20, r18
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     874:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     878:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
		return tmp;
     87c:	8d 2f       	mov	r24, r29
     87e:	9c 2f       	mov	r25, r28
     880:	09 c0       	rjmp	.+18     	; 0x894 <get_humidity+0x56>
		} else{
		print_sharedf("The mutex could not be obtained.");
     882:	8a e4       	ldi	r24, 0x4A	; 74
     884:	93 e0       	ldi	r25, 0x03	; 3
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	61 df       	rcall	.-318    	; 0x74e <print_sharedf>
		return 0;
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	0f 91       	pop	r16
     89a:	08 95       	ret

0000089c <get_temp>:

/*
* Getter for the temperature, protected by the mutex
*/
float get_temp(){
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
	float tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     8a6:	4c e2       	ldi	r20, 0x2C	; 44
     8a8:	51 e0       	ldi	r21, 0x01	; 1
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     8b2:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     8b6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	c9 f4       	brne	.+50     	; 0x8f0 <get_temp+0x54>
		tmp = temperature_value;
     8be:	f0 90 ca 07 	lds	r15, 0x07CA	; 0x8007ca <temperature_value>
     8c2:	10 91 cb 07 	lds	r17, 0x07CB	; 0x8007cb <temperature_value+0x1>
     8c6:	d0 91 cc 07 	lds	r29, 0x07CC	; 0x8007cc <temperature_value+0x2>
     8ca:	c0 91 cd 07 	lds	r28, 0x07CD	; 0x8007cd <temperature_value+0x3>
		xSemaphoreGive(xMutexSemaphore);
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	a9 01       	movw	r20, r18
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     8de:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     8e2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
		return tmp;
     8e6:	5f 2d       	mov	r21, r15
     8e8:	41 2f       	mov	r20, r17
     8ea:	3d 2f       	mov	r19, r29
     8ec:	2c 2f       	mov	r18, r28
     8ee:	0b c0       	rjmp	.+22     	; 0x906 <get_temp+0x6a>
		} else{
		print_sharedf("The mutex could not be obtained.");
     8f0:	8a e4       	ldi	r24, 0x4A	; 74
     8f2:	93 e0       	ldi	r25, 0x03	; 3
     8f4:	9f 93       	push	r25
     8f6:	8f 93       	push	r24
     8f8:	2a df       	rcall	.-428    	; 0x74e <print_sharedf>
		return 0.0;
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     906:	65 2f       	mov	r22, r21
     908:	74 2f       	mov	r23, r20
     90a:	83 2f       	mov	r24, r19
     90c:	92 2f       	mov	r25, r18
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	08 95       	ret

0000091a <set_co2>:

/*
* Setter for the co2, protected by the mutex
*/
void set_co2(uint16_t co2){
     91a:	0f 93       	push	r16
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     922:	4c e2       	ldi	r20, 0x2C	; 44
     924:	51 e0       	ldi	r21, 0x01	; 1
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     92e:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     932:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	89 f4       	brne	.+34     	; 0x95c <set_co2+0x42>
		co2_value = co2;
     93a:	d0 93 c7 07 	sts	0x07C7, r29	; 0x8007c7 <co2_value+0x1>
     93e:	c0 93 c6 07 	sts	0x07C6, r28	; 0x8007c6 <co2_value>
		xSemaphoreGive(xMutexSemaphore);
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     952:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     956:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
     95a:	07 c0       	rjmp	.+14     	; 0x96a <set_co2+0x50>
		} else{
		print_sharedf("The mutex could not be obtained.");
     95c:	8a e4       	ldi	r24, 0x4A	; 74
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	f4 de       	rcall	.-536    	; 0x74e <print_sharedf>
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <get_co2>:

/*
* Getter for co2, protected by the mutex
*/
uint16_t get_co2(){
     972:	0f 93       	push	r16
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     978:	4c e2       	ldi	r20, 0x2C	; 44
     97a:	51 e0       	ldi	r21, 0x01	; 1
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     984:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     988:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	99 f4       	brne	.+38     	; 0x9b6 <get_co2+0x44>
		tmp = co2_value;
     990:	d0 91 c6 07 	lds	r29, 0x07C6	; 0x8007c6 <co2_value>
     994:	c0 91 c7 07 	lds	r28, 0x07C7	; 0x8007c7 <co2_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     998:	00 e0       	ldi	r16, 0x00	; 0
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	a9 01       	movw	r20, r18
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     9a8:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     9ac:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
		return tmp;
     9b0:	8d 2f       	mov	r24, r29
     9b2:	9c 2f       	mov	r25, r28
     9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <get_co2+0x56>
		} else{
		print_sharedf("The mutex could not be obtained.");
     9b6:	8a e4       	ldi	r24, 0x4A	; 74
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	c7 de       	rcall	.-626    	; 0x74e <print_sharedf>
		return 0;
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <set_light>:

/*
* Setter for light levels, protected by the mutex
*/
void set_light(uint16_t light_lux){
     9d0:	0f 93       	push	r16
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     9d8:	4c e2       	ldi	r20, 0x2C	; 44
     9da:	51 e0       	ldi	r21, 0x01	; 1
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     9e4:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     9e8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	81 f4       	brne	.+32     	; 0xa10 <set_light+0x40>
		light_value = light_lux;
     9f0:	d0 93 c5 07 	sts	0x07C5, r29	; 0x8007c5 <light_value+0x1>
     9f4:	c0 93 c4 07 	sts	0x07C4, r28	; 0x8007c4 <light_value>
		xSemaphoreGive(xMutexSemaphore);
     9f8:	00 e0       	ldi	r16, 0x00	; 0
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	a9 01       	movw	r20, r18
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     a08:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     a0c:	f7 d7       	rcall	.+4078   	; 0x19fc <xQueueGenericSend>
     a0e:	07 c0       	rjmp	.+14     	; 0xa1e <set_light+0x4e>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a10:	8a e4       	ldi	r24, 0x4A	; 74
     a12:	93 e0       	ldi	r25, 0x03	; 3
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	9a de       	rcall	.-716    	; 0x74e <print_sharedf>
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
	}
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <get_light>:

/*
* Getter for the light levels, protected by the mutex
*/
uint16_t get_light(){
     a26:	0f 93       	push	r16
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
	uint16_t tmp;
	
	if(xSemaphoreTake(xMutexSemaphore, (TickType_t) 300) == pdTRUE){
     a2c:	4c e2       	ldi	r20, 0x2C	; 44
     a2e:	51 e0       	ldi	r21, 0x01	; 1
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     a38:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     a3c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <xQueueSemaphoreTake>
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	91 f4       	brne	.+36     	; 0xa68 <get_light+0x42>
		tmp = light_value;
     a44:	d0 91 c4 07 	lds	r29, 0x07C4	; 0x8007c4 <light_value>
     a48:	c0 91 c5 07 	lds	r28, 0x07C5	; 0x8007c5 <light_value+0x1>
		xSemaphoreGive(xMutexSemaphore);
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	a9 01       	movw	r20, r18
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 91 c1 15 	lds	r24, 0x15C1	; 0x8015c1 <xMutexSemaphore>
     a5c:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <xMutexSemaphore+0x1>
     a60:	cd d7       	rcall	.+3994   	; 0x19fc <xQueueGenericSend>
		return tmp;
     a62:	8d 2f       	mov	r24, r29
     a64:	9c 2f       	mov	r25, r28
     a66:	09 c0       	rjmp	.+18     	; 0xa7a <get_light+0x54>
		} else{
		print_sharedf("The mutex could not be obtained.");
     a68:	8a e4       	ldi	r24, 0x4A	; 74
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	6e de       	rcall	.-804    	; 0x74e <print_sharedf>
		return 0;
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
	}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	0f 91       	pop	r16
     a80:	08 95       	ret

00000a82 <temperature_handler_init>:
} TemperatureHandler;

/*
* initialize bits and create the task
*/
void temperature_handler_init(Temperature_t self, uint16_t priority){
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	06 2f       	mov	r16, r22
	xEventGroupSetBits(group_start, ready_bit);
     a90:	40 91 b9 15 	lds	r20, 0x15B9	; 0x8015b9 <ready_bit>
     a94:	50 91 ba 15 	lds	r21, 0x15BA	; 0x8015ba <ready_bit+0x1>
     a98:	60 91 bb 15 	lds	r22, 0x15BB	; 0x8015bb <ready_bit+0x2>
     a9c:	70 91 bc 15 	lds	r23, 0x15BC	; 0x8015bc <ready_bit+0x3>
     aa0:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <group_start>
     aa4:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <group_start+0x1>
     aa8:	dc d2       	rcall	.+1464   	; 0x1062 <xEventGroupSetBits>
	xTaskCreate(startReading, "Temperature task", configMINIMAL_STACK_SIZE,(void *) self, priority, NULL);
     aaa:	e1 2c       	mov	r14, r1
     aac:	f1 2c       	mov	r15, r1
     aae:	9e 01       	movw	r18, r28
     ab0:	40 ec       	ldi	r20, 0xC0	; 192
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	6b e6       	ldi	r22, 0x6B	; 107
     ab6:	73 e0       	ldi	r23, 0x03	; 3
     ab8:	8c ec       	ldi	r24, 0xCC	; 204
     aba:	95 e0       	ldi	r25, 0x05	; 5
     abc:	0e 94 8e 14 	call	0x291c	; 0x291c <xTaskCreate>
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	08 95       	ret

00000acc <createTemp>:

/*
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	8c 01       	movw	r16, r24
     ae2:	5b 01       	movw	r10, r22
     ae4:	69 01       	movw	r12, r18
     ae6:	7a 01       	movw	r14, r20
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
     ae8:	86 e0       	ldi	r24, 0x06	; 6
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <malloc>
     af0:	ec 01       	movw	r28, r24
	if(new_measure == NULL){
     af2:	89 2b       	or	r24, r25
     af4:	19 f1       	breq	.+70     	; 0xb3c <createTemp+0x70>
		return NULL;
	}
	new_measure ->temperature = 0.0;
     af6:	18 82       	st	Y, r1
     af8:	19 82       	std	Y+1, r1	; 0x01
     afa:	1a 82       	std	Y+2, r1	; 0x02
     afc:	1b 82       	std	Y+3, r1	; 0x03
	new_measure ->humidity = 0;
     afe:	1d 82       	std	Y+5, r1	; 0x05
     b00:	1c 82       	std	Y+4, r1	; 0x04
	
	group_start = taskBits;
     b02:	b0 92 be 15 	sts	0x15BE, r11	; 0x8015be <group_start+0x1>
     b06:	a0 92 bd 15 	sts	0x15BD, r10	; 0x8015bd <group_start>
	ready_bit = bit;
     b0a:	c0 92 b9 15 	sts	0x15B9, r12	; 0x8015b9 <ready_bit>
     b0e:	d0 92 ba 15 	sts	0x15BA, r13	; 0x8015ba <ready_bit+0x1>
     b12:	e0 92 bb 15 	sts	0x15BB, r14	; 0x8015bb <ready_bit+0x2>
     b16:	f0 92 bc 15 	sts	0x15BC, r15	; 0x8015bc <ready_bit+0x3>
	
	if (HIH8120_OK == hih8120_initialise())
     b1a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <hih8120_initialise>
     b1e:	81 11       	cpse	r24, r1
     b20:	07 c0       	rjmp	.+14     	; 0xb30 <createTemp+0x64>
	{
		print_sharedf("Temperature and humidity sensor initialized.");
     b22:	8c e7       	ldi	r24, 0x7C	; 124
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	9f 93       	push	r25
     b28:	8f 93       	push	r24
     b2a:	11 de       	rcall	.-990    	; 0x74e <print_sharedf>
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
	}
	
	temperature_handler_init(new_measure, priority);
     b30:	b8 01       	movw	r22, r16
     b32:	ce 01       	movw	r24, r28
     b34:	a6 df       	rcall	.-180    	; 0xa82 <temperature_handler_init>
	return new_measure;
     b36:	8c 2f       	mov	r24, r28
     b38:	9d 2f       	mov	r25, r29
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <createTemp+0x74>
* create the struct, allocate memory, and initialize the sensor
*/
Temperature_t createTemp(uint16_t priority, EventGroupHandle_t taskBits, EventBits_t bit){
	Temperature_t new_measure = malloc(sizeof(TemperatureHandler));
	if(new_measure == NULL){
		return NULL;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
		print_sharedf("Temperature and humidity sensor initialized.");
	}
	
	temperature_handler_init(new_measure, priority);
	return new_measure;
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	08 95       	ret

00000b56 <measureTempAndHum>:

/*
* set data using the shared sensor data c file
*/
void measureTempAndHum(Temperature_t self){
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ec 01       	movw	r28, r24

	self->temperature = hih8120_getTemperature();
     b5c:	0e 94 bc 24 	call	0x4978	; 0x4978 <hih8120_getTemperature>
     b60:	68 83       	st	Y, r22
     b62:	79 83       	std	Y+1, r23	; 0x01
     b64:	8a 83       	std	Y+2, r24	; 0x02
     b66:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120_getHumidityPercent_x10()/10;
     b68:	0e 94 b3 24 	call	0x4966	; 0x4966 <hih8120_getHumidityPercent_x10>
     b6c:	9c 01       	movw	r18, r24
     b6e:	ad ec       	ldi	r26, 0xCD	; 205
     b70:	bc ec       	ldi	r27, 0xCC	; 204
     b72:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <__umulhisi3>
     b76:	ac 01       	movw	r20, r24
     b78:	56 95       	lsr	r21
     b7a:	47 95       	ror	r20
     b7c:	56 95       	lsr	r21
     b7e:	47 95       	ror	r20
     b80:	56 95       	lsr	r21
     b82:	47 95       	ror	r20
     b84:	5d 83       	std	Y+5, r21	; 0x05
     b86:	4c 83       	std	Y+4, r20	; 0x04
	
	set_temp_hum(self->temperature, self->humidity);
     b88:	68 81       	ld	r22, Y
     b8a:	79 81       	ldd	r23, Y+1	; 0x01
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	9b 81       	ldd	r25, Y+3	; 0x03
     b90:	18 de       	rcall	.-976    	; 0x7c2 <set_temp_hum>
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <startReading>:

/*
* start reading data
*/
void startReading(void* self){
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <startReading+0x6>
     b9e:	1f 92       	push	r1
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	5c 01       	movw	r10, r24
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(15000UL);
	xLastWakeTime = xTaskGetTickCount();
     ba6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <xTaskGetTickCount>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		//wait 15 seconds
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     bb2:	42 ea       	ldi	r20, 0xA2	; 162
     bb4:	53 e0       	ldi	r21, 0x03	; 3
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <xTaskDelayUntil>
		//wake-up sensor
		if (HIH8120_OK != hih8120_wakeup())
     bc2:	0e 94 79 24 	call	0x48f2	; 0x48f2 <hih8120_wakeup>
     bc6:	88 23       	and	r24, r24
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <startReading+0x40>
		{
			print_sharedf("Temp task failed to work!");
     bca:	89 ea       	ldi	r24, 0xA9	; 169
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	bd dd       	rcall	.-1158   	; 0x74e <print_sharedf>
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
		}
		
		//set bits
		EventBits_t readyBits = xEventGroupWaitBits(group_start,
     bd8:	40 91 b9 15 	lds	r20, 0x15B9	; 0x8015b9 <ready_bit>
     bdc:	50 91 ba 15 	lds	r21, 0x15BA	; 0x8015ba <ready_bit+0x1>
     be0:	60 91 bb 15 	lds	r22, 0x15BB	; 0x8015bb <ready_bit+0x2>
     be4:	70 91 bc 15 	lds	r23, 0x15BC	; 0x8015bc <ready_bit+0x3>
     be8:	cc 24       	eor	r12, r12
     bea:	ca 94       	dec	r12
     bec:	dc 2c       	mov	r13, r12
     bee:	76 01       	movw	r14, r12
     bf0:	01 e0       	ldi	r16, 0x01	; 1
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <group_start>
     bf8:	90 91 be 15 	lds	r25, 0x15BE	; 0x8015be <group_start+0x1>
     bfc:	92 d1       	rcall	.+804    	; 0xf22 <xEventGroupWaitBits>
     bfe:	6b 01       	movw	r12, r22
     c00:	7c 01       	movw	r14, r24
		pdFALSE,
		pdTRUE,
		portMAX_DELAY);
		
		//give the sensor time to wake up
		vTaskDelay(pdMS_TO_TICKS(70));
     c02:	64 e0       	ldi	r22, 0x04	; 4
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <vTaskDelay>
		//check if the bits are set
		if ((readyBits & (ready_bit)) == (ready_bit)) {
     c0e:	80 91 b9 15 	lds	r24, 0x15B9	; 0x8015b9 <ready_bit>
     c12:	90 91 ba 15 	lds	r25, 0x15BA	; 0x8015ba <ready_bit+0x1>
     c16:	a0 91 bb 15 	lds	r26, 0x15BB	; 0x8015bb <ready_bit+0x2>
     c1a:	b0 91 bc 15 	lds	r27, 0x15BC	; 0x8015bc <ready_bit+0x3>
     c1e:	c8 22       	and	r12, r24
     c20:	d9 22       	and	r13, r25
     c22:	ea 22       	and	r14, r26
     c24:	fb 22       	and	r15, r27
     c26:	8c 15       	cp	r24, r12
     c28:	9d 05       	cpc	r25, r13
     c2a:	ae 05       	cpc	r26, r14
     c2c:	bf 05       	cpc	r27, r15
     c2e:	09 f0       	breq	.+2      	; 0xc32 <startReading+0x9a>
     c30:	c0 cf       	rjmp	.-128    	; 0xbb2 <startReading+0x1a>
			hih8120_measure(); //measure temperature and humidity
     c32:	0e 94 8e 24 	call	0x491c	; 0x491c <hih8120_measure>
			vTaskDelay(pdMS_TO_TICKS(15)); //wait for the measuring to be finished
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	cb 01       	movw	r24, r22
     c3c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <vTaskDelay>
			
			measureTempAndHum((Temperature_t) self);
     c40:	c5 01       	movw	r24, r10
     c42:	89 df       	rcall	.-238    	; 0xb56 <measureTempAndHum>
     c44:	b6 cf       	rjmp	.-148    	; 0xbb2 <startReading+0x1a>

00000c46 <_lora_setup>:

/*
* Setup function that initializes the LoRaWAN Parameters
*/
static void _lora_setup(void)
{
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	64 97       	sbiw	r28, 0x14	; 20
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;

	// Factory reset the transceiver
	lora_driver_rn2483FactoryReset();
     c5e:	0e 94 42 26 	call	0x4c84	; 0x4c84 <lora_driver_rn2483FactoryReset>
	
	// Configure to EU868 LoRaWAN standards
	lora_driver_configureToEu868();
     c62:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <lora_driver_configureToEu868>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <lora_driver_getRn2483Hweui>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	lora_driver_setDeviceIdentifier(_out_buf);
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <lora_driver_setDeviceIdentifier>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf);
     c76:	ae 01       	movw	r20, r28
     c78:	4f 5f       	subi	r20, 0xFF	; 255
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
     c7c:	63 ec       	ldi	r22, 0xC3	; 195
     c7e:	73 e0       	ldi	r23, 0x03	; 3
     c80:	84 ee       	ldi	r24, 0xE4	; 228
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	0e 94 9e 28 	call	0x513c	; 0x513c <lora_driver_setOtaaIdentity>

	// Save all the MAC settings in the transceiver
	lora_driver_saveMac();
     c88:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <lora_driver_saveMac>

	// Enable Adaptive Data Rate
	lora_driver_setAdaptiveDataRate(LORA_ON);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <lora_driver_setAdaptiveDataRate>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	lora_driver_setReceiveDelay(500);
     c92:	84 ef       	ldi	r24, 0xF4	; 244
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <lora_driver_setReceiveDelay>

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     c9a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <lora_driver_join>
     ca2:	08 2f       	mov	r16, r24
		print_sharedf("Join Network Tries Left:%d >%s<", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     ca4:	0e 94 bf 28 	call	0x517e	; 0x517e <lora_driver_mapReturnCodeToText>
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	1f 92       	push	r1
     cae:	1f 93       	push	r17
     cb0:	85 ef       	ldi	r24, 0xF5	; 245
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	4a dd       	rcall	.-1388   	; 0x74e <print_sharedf>

		if ( rc != LORA_ACCEPTED)
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	08 30       	cpi	r16, 0x08	; 8
     cc8:	41 f0       	breq	.+16     	; 0xcda <_lora_setup+0x94>
		{
			// Make the red led pulse to tell something went wrong
			// status_leds_longPuls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     cca:	66 e3       	ldi	r22, 0x36	; 54
     ccc:	71 e0       	ldi	r23, 0x01	; 1
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 93 17 	call	0x2f26	; 0x2f26 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     cd6:	11 50       	subi	r17, 0x01	; 1
     cd8:	09 f7       	brne	.-62     	; 0xc9c <_lora_setup+0x56>

	if (rc == LORA_ACCEPTED)
     cda:	08 30       	cpi	r16, 0x08	; 8
     cdc:	41 f4       	brne	.+16     	; 0xcee <_lora_setup+0xa8>
	{
		// Connected to LoRaWAN :-)
		print_sharedf("Connected to the LoRaWAN Network successfully.");
     cde:	85 e1       	ldi	r24, 0x15	; 21
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	33 dd       	rcall	.-1434   	; 0x74e <print_sharedf>
		while (1)
		{
			taskYIELD();
		}
	}
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
	{
		// Something went wrong
		// Lets stay here
		while (1)
		{
			taskYIELD();
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <_lora_setup+0xac>
     cee:	6e d4       	rcall	.+2268   	; 0x15cc <vPortYield>
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <_lora_setup+0xa8>
		}
	}
}
     cf2:	64 96       	adiw	r28, 0x14	; 20
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <lora_handler_task>:

/*
* Function task that stars sending data in the specified 5 minute interval
*/
void lora_handler_task(void* pvParameters){
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	28 97       	sbiw	r28, 0x08	; 8
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 34 26 	call	0x4c68	; 0x4c68 <lora_driver_resetRn2483>
	vTaskDelay(2);
     d22:	62 e0       	ldi	r22, 0x02	; 2
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <vTaskDelay>
	lora_driver_resetRn2483(0);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 34 26 	call	0x4c68	; 0x4c68 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     d34:	66 e9       	ldi	r22, 0x96	; 150
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     d40:	0e 94 ed 25 	call	0x4bda	; 0x4bda <lora_driver_flushBuffers>

	_lora_setup();
     d44:	80 df       	rcall	.-256    	; 0xc46 <_lora_setup>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     d46:	0e 94 18 15 	call	0x2a30	; 0x2a30 <xTaskGetTickCount>
     d4a:	69 83       	std	Y+1, r22	; 0x01
     d4c:	7a 83       	std	Y+2, r23	; 0x02
     d4e:	8b 83       	std	Y+3, r24	; 0x03
     d50:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     d52:	4c e6       	ldi	r20, 0x6C	; 108
     d54:	52 e0       	ldi	r21, 0x02	; 2
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <xTaskDelayUntil>
		_uplink_payload.len = 7;
     d62:	ee ec       	ldi	r30, 0xCE	; 206
     d64:	f7 e0       	ldi	r31, 0x07	; 7
     d66:	87 e0       	ldi	r24, 0x07	; 7
     d68:	81 83       	std	Z+1, r24	; 0x01
		_uplink_payload.portNo = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
		
		double temp = (double) get_temp();
     d6c:	80 83       	st	Z, r24
     d6e:	96 dd       	rcall	.-1236   	; 0x89c <get_temp>
     d70:	d6 2e       	mov	r13, r22
     d72:	c7 2e       	mov	r12, r23
     d74:	b8 2e       	mov	r11, r24
		uint16_t humidity = get_humidity();
     d76:	a9 2e       	mov	r10, r25
     d78:	62 dd       	rcall	.-1340   	; 0x83e <get_humidity>
		uint16_t co2_val = get_co2();
     d7a:	8c 01       	movw	r16, r24
     d7c:	fa dd       	rcall	.-1036   	; 0x972 <get_co2>
     d7e:	7c 01       	movw	r14, r24
		uint16_t light_val = get_light();
     d80:	52 de       	rcall	.-860    	; 0xa26 <get_light>
     d82:	88 2e       	mov	r8, r24
     d84:	99 2e       	mov	r9, r25
     d86:	20 e0       	ldi	r18, 0x00	; 0
		
		if(temp == 0.0 || humidity == 0 || co2_val == 0){
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	a9 01       	movw	r20, r18
     d8c:	6d 2d       	mov	r22, r13
     d8e:	7c 2d       	mov	r23, r12
     d90:	8b 2d       	mov	r24, r11
     d92:	9a 2d       	mov	r25, r10
     d94:	0e 94 8f 22 	call	0x451e	; 0x451e <__cmpsf2>
     d98:	88 23       	and	r24, r24
     d9a:	31 f0       	breq	.+12     	; 0xda8 <lora_handler_task+0xa0>
     d9c:	01 15       	cp	r16, r1
     d9e:	11 05       	cpc	r17, r1
     da0:	19 f0       	breq	.+6      	; 0xda8 <lora_handler_task+0xa0>
     da2:	e1 14       	cp	r14, r1
     da4:	f1 04       	cpc	r15, r1
     da6:	99 f4       	brne	.+38     	; 0xdce <lora_handler_task+0xc6>
     da8:	ff 92       	push	r15
			print_sharedf("Sensors are still calibrating %f, %d, %d", temp, humidity, co2_val);
     daa:	ef 92       	push	r14
     dac:	1f 93       	push	r17
     dae:	0f 93       	push	r16
     db0:	af 92       	push	r10
     db2:	bf 92       	push	r11
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	84 e4       	ldi	r24, 0x44	; 68
     dba:	94 e0       	ldi	r25, 0x04	; 4
     dbc:	9f 93       	push	r25
     dbe:	8f 93       	push	r24
     dc0:	c6 dc       	rcall	.-1652   	; 0x74e <print_sharedf>
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	c2 cf       	rjmp	.-124    	; 0xd52 <lora_handler_task+0x4a>
     dce:	1d 82       	std	Y+5, r1	; 0x05
		}
		else{
		double val1=0;
     dd0:	1e 82       	std	Y+6, r1	; 0x06
     dd2:	1f 82       	std	Y+7, r1	; 0x07
     dd4:	18 86       	std	Y+8, r1	; 0x08
     dd6:	ae 01       	movw	r20, r28
		double val2=0;
		val2 = modf(temp, &val1);
     dd8:	4b 5f       	subi	r20, 0xFB	; 251
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	6d 2d       	mov	r22, r13
     dde:	7c 2d       	mov	r23, r12
     de0:	8b 2d       	mov	r24, r11
     de2:	9a 2d       	mov	r25, r10
     de4:	0e 94 11 23 	call	0x4622	; 0x4622 <modf>
     de8:	20 e0       	ldi	r18, 0x00	; 0
		val2 = val2 * 100;
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	48 ec       	ldi	r20, 0xC8	; 200
     dee:	52 e4       	ldi	r21, 0x42	; 66
     df0:	0e 94 44 23 	call	0x4688	; 0x4688 <__mulsf3>
     df4:	2b 01       	movw	r4, r22
     df6:	3c 01       	movw	r6, r24
     df8:	af 92       	push	r10
		
		//temperature
		print_sharedf("Temperature: %f", temp);
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	8d e6       	ldi	r24, 0x6D	; 109
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	9f 93       	push	r25
     e06:	8f 93       	push	r24
     e08:	a2 dc       	rcall	.-1724   	; 0x74e <print_sharedf>
     e0a:	6d 81       	ldd	r22, Y+5	; 0x05
		_uplink_payload.bytes[0] = (int) val1;
     e0c:	7e 81       	ldd	r23, Y+6	; 0x06
     e0e:	8f 81       	ldd	r24, Y+7	; 0x07
     e10:	98 85       	ldd	r25, Y+8	; 0x08
     e12:	0e 94 93 22 	call	0x4526	; 0x4526 <__fixsfsi>
     e16:	0f 2e       	mov	r0, r31
     e18:	fe ec       	ldi	r31, 0xCE	; 206
     e1a:	cf 2e       	mov	r12, r31
     e1c:	f7 e0       	ldi	r31, 0x07	; 7
     e1e:	df 2e       	mov	r13, r31
     e20:	f0 2d       	mov	r31, r0
     e22:	f6 01       	movw	r30, r12
     e24:	62 83       	std	Z+2, r22	; 0x02
     e26:	c3 01       	movw	r24, r6
		_uplink_payload.bytes[1] = (int) val2;
     e28:	b2 01       	movw	r22, r4
     e2a:	0e 94 93 22 	call	0x4526	; 0x4526 <__fixsfsi>
     e2e:	f6 01       	movw	r30, r12
     e30:	63 83       	std	Z+3, r22	; 0x03
		
		//humidity
		print_sharedf("Humidity: %d", humidity);
     e32:	1f 93       	push	r17
     e34:	0f 93       	push	r16
     e36:	8d e7       	ldi	r24, 0x7D	; 125
     e38:	94 e0       	ldi	r25, 0x04	; 4
     e3a:	9f 93       	push	r25
     e3c:	8f 93       	push	r24
     e3e:	87 dc       	rcall	.-1778   	; 0x74e <print_sharedf>
     e40:	f6 01       	movw	r30, r12
		_uplink_payload.bytes[2] = humidity;
     e42:	04 83       	std	Z+4, r16	; 0x04
		
		//co2
		print_sharedf("CO2: %d", co2_val);
     e44:	ff 92       	push	r15
     e46:	ef 92       	push	r14
     e48:	8a e8       	ldi	r24, 0x8A	; 138
     e4a:	94 e0       	ldi	r25, 0x04	; 4
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	7e dc       	rcall	.-1796   	; 0x74e <print_sharedf>
     e52:	f6 01       	movw	r30, r12
		_uplink_payload.bytes[3] = co2_val >> 8;
     e54:	f5 82       	std	Z+5, r15	; 0x05
		_uplink_payload.bytes[4] = co2_val & 0xFF;
     e56:	e6 82       	std	Z+6, r14	; 0x06
		
		//light
		print_sharedf("Light in lux: %d", light_val);
     e58:	9f 92       	push	r9
     e5a:	8f 92       	push	r8
     e5c:	82 e9       	ldi	r24, 0x92	; 146
     e5e:	94 e0       	ldi	r25, 0x04	; 4
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	74 dc       	rcall	.-1816   	; 0x74e <print_sharedf>
     e66:	f6 01       	movw	r30, r12
		_uplink_payload.bytes[5] = light_val >> 8;
     e68:	97 82       	std	Z+7, r9	; 0x07
     e6a:	80 86       	std	Z+8, r8	; 0x08
		_uplink_payload.bytes[6] = light_val & 0xFF;
     e6c:	b6 01       	movw	r22, r12
		
		char* message = lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload));
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <lora_driver_sendUploadMessage>
     e74:	0e 94 bf 28 	call	0x517e	; 0x517e <lora_driver_mapReturnCodeToText>
		print_sharedf("Upload Message >%s<", message);
     e78:	9f 93       	push	r25
     e7a:	8f 93       	push	r24
     e7c:	83 ea       	ldi	r24, 0xA3	; 163
     e7e:	94 e0       	ldi	r25, 0x04	; 4
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	64 dc       	rcall	.-1848   	; 0x74e <print_sharedf>
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	60 cf       	rjmp	.-320    	; 0xd52 <lora_handler_task+0x4a>

00000e92 <lora_handler_initialize>:
     e92:	ef 92       	push	r14
void lora_handler_task(void* pvParameters);

/*
* Function call used to start the networking task
*/
void lora_handler_initialize(uint16_t lora_handler_task_priority){
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
	
	xTaskCreate(
     e98:	e1 2c       	mov	r14, r1
     e9a:	f1 2c       	mov	r15, r1
     e9c:	08 2f       	mov	r16, r24
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	48 e8       	ldi	r20, 0x88	; 136
     ea4:	51 e0       	ldi	r21, 0x01	; 1
     ea6:	67 eb       	ldi	r22, 0xB7	; 183
     ea8:	74 e0       	ldi	r23, 0x04	; 4
     eaa:	84 e8       	ldi	r24, 0x84	; 132
     eac:	96 e0       	ldi	r25, 0x06	; 6
     eae:	0e 94 8e 14 	call	0x291c	; 0x291c <xTaskCreate>
	, "LoRaWAN Hand"
	, configMINIMAL_STACK_SIZE + 200
	, NULL
	, lora_handler_task_priority
	, NULL);
}
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     eba:	0f 93       	push	r16
     ebc:	01 11       	cpse	r16, r1
     ebe:	0c c0       	rjmp	.+24     	; 0xed8 <prvTestWaitCondition+0x1e>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	82 23       	and	r24, r18
     ec6:	93 23       	and	r25, r19
     ec8:	a4 23       	and	r26, r20
     eca:	b5 23       	and	r27, r21
     ecc:	89 2b       	or	r24, r25
     ece:	8a 2b       	or	r24, r26
     ed0:	8b 2b       	or	r24, r27
     ed2:	79 f4       	brne	.+30     	; 0xef2 <prvTestWaitCondition+0x38>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	10 c0       	rjmp	.+32     	; 0xef8 <prvTestWaitCondition+0x3e>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	82 23       	and	r24, r18
     ede:	93 23       	and	r25, r19
     ee0:	a4 23       	and	r26, r20
     ee2:	b5 23       	and	r27, r21
     ee4:	28 17       	cp	r18, r24
     ee6:	39 07       	cpc	r19, r25
     ee8:	4a 07       	cpc	r20, r26
     eea:	5b 07       	cpc	r21, r27
     eec:	21 f0       	breq	.+8      	; 0xef6 <prvTestWaitCondition+0x3c>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <prvTestWaitCondition+0x3e>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <prvTestWaitCondition+0x3e>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <xEventGroupCreate>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	8f e0       	ldi	r24, 0x0F	; 15
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	af d1       	rcall	.+862    	; 0x1264 <pvPortMalloc>
     f06:	ec 01       	movw	r28, r24
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	39 f0       	breq	.+14     	; 0xf1a <xEventGroupCreate+0x1e>
     f0c:	fc 01       	movw	r30, r24
     f0e:	11 92       	st	Z+, r1
     f10:	11 92       	st	Z+, r1
     f12:	11 92       	st	Z+, r1
     f14:	11 92       	st	Z+, r1
     f16:	cf 01       	movw	r24, r30
     f18:	8b d2       	rcall	.+1302   	; 0x1430 <vListInitialise>
     f1a:	ce 01       	movw	r24, r28
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <xEventGroupWaitBits>:
     f22:	2f 92       	push	r2
     f24:	3f 92       	push	r3
     f26:	4f 92       	push	r4
     f28:	5f 92       	push	r5
     f2a:	6f 92       	push	r6
     f2c:	7f 92       	push	r7
     f2e:	8f 92       	push	r8
     f30:	9f 92       	push	r9
     f32:	af 92       	push	r10
     f34:	bf 92       	push	r11
     f36:	cf 92       	push	r12
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
     f48:	4a 01       	movw	r8, r20
     f4a:	5b 01       	movw	r10, r22
     f4c:	62 2e       	mov	r6, r18
     f4e:	70 2e       	mov	r7, r16
     f50:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskSuspendAll>
     f54:	28 80       	ld	r2, Y
     f56:	39 80       	ldd	r3, Y+1	; 0x01
     f58:	4a 80       	ldd	r4, Y+2	; 0x02
     f5a:	5b 80       	ldd	r5, Y+3	; 0x03
     f5c:	a5 01       	movw	r20, r10
     f5e:	94 01       	movw	r18, r8
     f60:	c2 01       	movw	r24, r4
     f62:	b1 01       	movw	r22, r2
     f64:	aa df       	rcall	.-172    	; 0xeba <prvTestWaitCondition>
     f66:	88 23       	and	r24, r24
     f68:	a1 f0       	breq	.+40     	; 0xf92 <xEventGroupWaitBits+0x70>
     f6a:	66 20       	and	r6, r6
     f6c:	89 f1       	breq	.+98     	; 0xfd0 <xEventGroupWaitBits+0xae>
     f6e:	d5 01       	movw	r26, r10
     f70:	c4 01       	movw	r24, r8
     f72:	80 95       	com	r24
     f74:	90 95       	com	r25
     f76:	a0 95       	com	r26
     f78:	b0 95       	com	r27
     f7a:	82 21       	and	r24, r2
     f7c:	93 21       	and	r25, r3
     f7e:	a4 21       	and	r26, r4
     f80:	b5 21       	and	r27, r5
     f82:	88 83       	st	Y, r24
     f84:	99 83       	std	Y+1, r25	; 0x01
     f86:	aa 83       	std	Y+2, r26	; 0x02
     f88:	bb 83       	std	Y+3, r27	; 0x03
     f8a:	c1 2c       	mov	r12, r1
     f8c:	d1 2c       	mov	r13, r1
     f8e:	76 01       	movw	r14, r12
     f90:	22 c0       	rjmp	.+68     	; 0xfd6 <xEventGroupWaitBits+0xb4>
     f92:	c1 14       	cp	r12, r1
     f94:	d1 04       	cpc	r13, r1
     f96:	e1 04       	cpc	r14, r1
     f98:	f1 04       	cpc	r15, r1
     f9a:	e9 f0       	breq	.+58     	; 0xfd6 <xEventGroupWaitBits+0xb4>
     f9c:	61 10       	cpse	r6, r1
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <xEventGroupWaitBits+0x86>
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	ba 01       	movw	r22, r20
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <xEventGroupWaitBits+0x8e>
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	71 e0       	ldi	r23, 0x01	; 1
     fb0:	71 10       	cpse	r7, r1
     fb2:	74 60       	ori	r23, 0x04	; 4
     fb4:	48 29       	or	r20, r8
     fb6:	59 29       	or	r21, r9
     fb8:	6a 29       	or	r22, r10
     fba:	7b 29       	or	r23, r11
     fbc:	97 01       	movw	r18, r14
     fbe:	86 01       	movw	r16, r12
     fc0:	ce 01       	movw	r24, r28
     fc2:	04 96       	adiw	r24, 0x04	; 4
     fc4:	0e 94 2a 18 	call	0x3054	; 0x3054 <vTaskPlaceOnUnorderedEventList>
     fc8:	21 2c       	mov	r2, r1
     fca:	31 2c       	mov	r3, r1
     fcc:	21 01       	movw	r4, r2
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <xEventGroupWaitBits+0xb4>
     fd0:	c1 2c       	mov	r12, r1
     fd2:	d1 2c       	mov	r13, r1
     fd4:	76 01       	movw	r14, r12
     fd6:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
     fda:	cd 28       	or	r12, r13
     fdc:	ce 28       	or	r12, r14
     fde:	cf 28       	or	r12, r15
     fe0:	59 f1       	breq	.+86     	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
     fe2:	81 11       	cpse	r24, r1
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <xEventGroupWaitBits+0xc6>
     fe6:	f2 d2       	rcall	.+1508   	; 0x15cc <vPortYield>
     fe8:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <uxTaskResetEventItemValue>
     fec:	6b 01       	movw	r12, r22
     fee:	7c 01       	movw	r14, r24
     ff0:	91 fd       	sbrc	r25, 1
     ff2:	1f c0       	rjmp	.+62     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	0f 92       	push	r0
     ffa:	c8 80       	ld	r12, Y
     ffc:	d9 80       	ldd	r13, Y+1	; 0x01
     ffe:	ea 80       	ldd	r14, Y+2	; 0x02
    1000:	fb 80       	ldd	r15, Y+3	; 0x03
    1002:	07 2d       	mov	r16, r7
    1004:	a5 01       	movw	r20, r10
    1006:	94 01       	movw	r18, r8
    1008:	c7 01       	movw	r24, r14
    100a:	b6 01       	movw	r22, r12
    100c:	56 df       	rcall	.-340    	; 0xeba <prvTestWaitCondition>
    100e:	88 23       	and	r24, r24
    1010:	71 f0       	breq	.+28     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1012:	66 20       	and	r6, r6
    1014:	61 f0       	breq	.+24     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1016:	80 94       	com	r8
    1018:	90 94       	com	r9
    101a:	a0 94       	com	r10
    101c:	b0 94       	com	r11
    101e:	8c 20       	and	r8, r12
    1020:	9d 20       	and	r9, r13
    1022:	ae 20       	and	r10, r14
    1024:	bf 20       	and	r11, r15
    1026:	88 82       	st	Y, r8
    1028:	99 82       	std	Y+1, r9	; 0x01
    102a:	aa 82       	std	Y+2, r10	; 0x02
    102c:	bb 82       	std	Y+3, r11	; 0x03
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	16 01       	movw	r2, r12
    1034:	27 01       	movw	r4, r14
    1036:	55 24       	eor	r5, r5
    1038:	c2 01       	movw	r24, r4
    103a:	b1 01       	movw	r22, r2
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	9f 90       	pop	r9
    1052:	8f 90       	pop	r8
    1054:	7f 90       	pop	r7
    1056:	6f 90       	pop	r6
    1058:	5f 90       	pop	r5
    105a:	4f 90       	pop	r4
    105c:	3f 90       	pop	r3
    105e:	2f 90       	pop	r2
    1060:	08 95       	ret

00001062 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
    1062:	4f 92       	push	r4
    1064:	5f 92       	push	r5
    1066:	6f 92       	push	r6
    1068:	7f 92       	push	r7
    106a:	af 92       	push	r10
    106c:	bf 92       	push	r11
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	6a 01       	movw	r12, r20
    1082:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1084:	8c 01       	movw	r16, r24
    1086:	09 5f       	subi	r16, 0xF9	; 249
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
    108a:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    108e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1090:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    1092:	88 81       	ld	r24, Y
    1094:	99 81       	ldd	r25, Y+1	; 0x01
    1096:	aa 81       	ldd	r26, Y+2	; 0x02
    1098:	bb 81       	ldd	r27, Y+3	; 0x03
    109a:	c8 2a       	or	r12, r24
    109c:	d9 2a       	or	r13, r25
    109e:	ea 2a       	or	r14, r26
    10a0:	fb 2a       	or	r15, r27
    10a2:	c8 82       	st	Y, r12
    10a4:	d9 82       	std	Y+1, r13	; 0x01
    10a6:	ea 82       	std	Y+2, r14	; 0x02
    10a8:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    10aa:	c1 2c       	mov	r12, r1
    10ac:	d1 2c       	mov	r13, r1
    10ae:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    10b0:	3d c0       	rjmp	.+122    	; 0x112c <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
    10b2:	a4 80       	ldd	r10, Z+4	; 0x04
    10b4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	a2 81       	ldd	r26, Z+2	; 0x02
    10bc:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    10be:	ac 01       	movw	r20, r24
    10c0:	bd 01       	movw	r22, r26
    10c2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    10c4:	b2 fd       	sbrc	r27, 2
    10c6:	0e c0       	rjmp	.+28     	; 0x10e4 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    10c8:	48 80       	ld	r4, Y
    10ca:	59 80       	ldd	r5, Y+1	; 0x01
    10cc:	6a 80       	ldd	r6, Y+2	; 0x02
    10ce:	7b 80       	ldd	r7, Y+3	; 0x03
    10d0:	44 22       	and	r4, r20
    10d2:	55 22       	and	r5, r21
    10d4:	66 22       	and	r6, r22
    10d6:	77 22       	and	r7, r23
    10d8:	45 28       	or	r4, r5
    10da:	46 28       	or	r4, r6
    10dc:	47 28       	or	r4, r7
    10de:	89 f4       	brne	.+34     	; 0x1102 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	12 c0       	rjmp	.+36     	; 0x1108 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    10e4:	48 80       	ld	r4, Y
    10e6:	59 80       	ldd	r5, Y+1	; 0x01
    10e8:	6a 80       	ldd	r6, Y+2	; 0x02
    10ea:	7b 80       	ldd	r7, Y+3	; 0x03
    10ec:	44 22       	and	r4, r20
    10ee:	55 22       	and	r5, r21
    10f0:	66 22       	and	r6, r22
    10f2:	77 22       	and	r7, r23
    10f4:	44 15       	cp	r20, r4
    10f6:	55 05       	cpc	r21, r5
    10f8:	66 05       	cpc	r22, r6
    10fa:	77 05       	cpc	r23, r7
    10fc:	21 f0       	breq	.+8      	; 0x1106 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    1106:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1108:	22 23       	and	r18, r18
    110a:	71 f0       	breq	.+28     	; 0x1128 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    110c:	b0 ff       	sbrs	r27, 0
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1110:	c4 2a       	or	r12, r20
    1112:	d5 2a       	or	r13, r21
    1114:	e6 2a       	or	r14, r22
    1116:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1118:	48 81       	ld	r20, Y
    111a:	59 81       	ldd	r21, Y+1	; 0x01
    111c:	6a 81       	ldd	r22, Y+2	; 0x02
    111e:	7b 81       	ldd	r23, Y+3	; 0x03
    1120:	72 60       	ori	r23, 0x02	; 2
    1122:	cf 01       	movw	r24, r30
    1124:	0e 94 65 19 	call	0x32ca	; 0x32ca <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1128:	ea 2d       	mov	r30, r10
    112a:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    112c:	e0 17       	cp	r30, r16
    112e:	f1 07       	cpc	r31, r17
    1130:	09 f0       	breq	.+2      	; 0x1134 <xEventGroupSetBits+0xd2>
    1132:	bf cf       	rjmp	.-130    	; 0x10b2 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    1134:	c0 94       	com	r12
    1136:	d0 94       	com	r13
    1138:	e0 94       	com	r14
    113a:	f0 94       	com	r15
    113c:	88 81       	ld	r24, Y
    113e:	99 81       	ldd	r25, Y+1	; 0x01
    1140:	aa 81       	ldd	r26, Y+2	; 0x02
    1142:	bb 81       	ldd	r27, Y+3	; 0x03
    1144:	c8 22       	and	r12, r24
    1146:	d9 22       	and	r13, r25
    1148:	ea 22       	and	r14, r26
    114a:	fb 22       	and	r15, r27
    114c:	c8 82       	st	Y, r12
    114e:	d9 82       	std	Y+1, r13	; 0x01
    1150:	ea 82       	std	Y+2, r14	; 0x02
    1152:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
    1154:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    1158:	68 81       	ld	r22, Y
    115a:	79 81       	ldd	r23, Y+1	; 0x01
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	7f 90       	pop	r7
    1176:	6f 90       	pop	r6
    1178:	5f 90       	pop	r5
    117a:	4f 90       	pop	r4
    117c:	08 95       	ret

0000117e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    117e:	e0 ef       	ldi	r30, 0xF0	; 240
    1180:	f7 e0       	ldi	r31, 0x07	; 7
    1182:	a4 ef       	ldi	r26, 0xF4	; 244
    1184:	b7 e0       	ldi	r27, 0x07	; 7
    1186:	b1 83       	std	Z+1, r27	; 0x01
    1188:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    118a:	13 82       	std	Z+3, r1	; 0x03
    118c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    118e:	e8 ea       	ldi	r30, 0xA8	; 168
    1190:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1192:	f0 93 ef 07 	sts	0x07EF, r31	; 0x8007ef <pxEnd+0x1>
    1196:	e0 93 ee 07 	sts	0x07EE, r30	; 0x8007ee <pxEnd>
    pxEnd->xBlockSize = 0;
    119a:	13 82       	std	Z+3, r1	; 0x03
    119c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    119e:	11 82       	std	Z+1, r1	; 0x01
    11a0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    11a2:	84 eb       	ldi	r24, 0xB4	; 180
    11a4:	9b e0       	ldi	r25, 0x0B	; 11
    11a6:	13 96       	adiw	r26, 0x03	; 3
    11a8:	9c 93       	st	X, r25
    11aa:	8e 93       	st	-X, r24
    11ac:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    11ae:	ed 93       	st	X+, r30
    11b0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11b2:	90 93 eb 07 	sts	0x07EB, r25	; 0x8007eb <xMinimumEverFreeBytesRemaining+0x1>
    11b6:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11ba:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <xFreeBytesRemaining+0x1>
    11be:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e8       	ldi	r25, 0x80	; 128
    11c6:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <xBlockAllocatedBit+0x1>
    11ca:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <xBlockAllocatedBit>
    11ce:	08 95       	ret

000011d0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    11d6:	a0 ef       	ldi	r26, 0xF0	; 240
    11d8:	b7 e0       	ldi	r27, 0x07	; 7
    11da:	01 c0       	rjmp	.+2      	; 0x11de <prvInsertBlockIntoFreeList+0xe>
    11dc:	df 01       	movw	r26, r30
    11de:	ed 91       	ld	r30, X+
    11e0:	fc 91       	ld	r31, X
    11e2:	11 97       	sbiw	r26, 0x01	; 1
    11e4:	ec 17       	cp	r30, r28
    11e6:	fd 07       	cpc	r31, r29
    11e8:	c8 f3       	brcs	.-14     	; 0x11dc <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	8d 91       	ld	r24, X+
    11ee:	9c 91       	ld	r25, X
    11f0:	13 97       	sbiw	r26, 0x03	; 3
    11f2:	9d 01       	movw	r18, r26
    11f4:	28 0f       	add	r18, r24
    11f6:	39 1f       	adc	r19, r25
    11f8:	c2 17       	cp	r28, r18
    11fa:	d3 07       	cpc	r29, r19
    11fc:	49 f4       	brne	.+18     	; 0x1210 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    11fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1200:	3b 81       	ldd	r19, Y+3	; 0x03
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	13 96       	adiw	r26, 0x03	; 3
    1208:	9c 93       	st	X, r25
    120a:	8e 93       	st	-X, r24
    120c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    120e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	9e 01       	movw	r18, r28
    1216:	28 0f       	add	r18, r24
    1218:	39 1f       	adc	r19, r25
    121a:	e2 17       	cp	r30, r18
    121c:	f3 07       	cpc	r31, r19
    121e:	c1 f4       	brne	.+48     	; 0x1250 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    1220:	20 91 ee 07 	lds	r18, 0x07EE	; 0x8007ee <pxEnd>
    1224:	30 91 ef 07 	lds	r19, 0x07EF	; 0x8007ef <pxEnd+0x1>
    1228:	e2 17       	cp	r30, r18
    122a:	f3 07       	cpc	r31, r19
    122c:	71 f0       	breq	.+28     	; 0x124a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    122e:	22 81       	ldd	r18, Z+2	; 0x02
    1230:	33 81       	ldd	r19, Z+3	; 0x03
    1232:	82 0f       	add	r24, r18
    1234:	93 1f       	adc	r25, r19
    1236:	9b 83       	std	Y+3, r25	; 0x03
    1238:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    123a:	ed 91       	ld	r30, X+
    123c:	fc 91       	ld	r31, X
    123e:	11 97       	sbiw	r26, 0x01	; 1
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	99 83       	std	Y+1, r25	; 0x01
    1246:	88 83       	st	Y, r24
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    124a:	39 83       	std	Y+1, r19	; 0x01
    124c:	28 83       	st	Y, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1250:	f9 83       	std	Y+1, r31	; 0x01
    1252:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1254:	ca 17       	cp	r28, r26
    1256:	db 07       	cpc	r29, r27
    1258:	11 f0       	breq	.+4      	; 0x125e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    125a:	cd 93       	st	X+, r28
    125c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    1272:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    1276:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <pxEnd>
    127a:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <pxEnd+0x1>
    127e:	89 2b       	or	r24, r25
    1280:	09 f4       	brne	.+2      	; 0x1284 <pvPortMalloc+0x20>
        {
            prvHeapInit();
    1282:	7d df       	rcall	.-262    	; 0x117e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1284:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <xBlockAllocatedBit>
    1288:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <xBlockAllocatedBit+0x1>
    128c:	80 23       	and	r24, r16
    128e:	91 23       	and	r25, r17
    1290:	89 2b       	or	r24, r25
    1292:	09 f0       	breq	.+2      	; 0x1296 <pvPortMalloc+0x32>
    1294:	76 c0       	rjmp	.+236    	; 0x1382 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    1296:	01 15       	cp	r16, r1
    1298:	11 05       	cpc	r17, r1
    129a:	49 f0       	breq	.+18     	; 0x12ae <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    129c:	c8 01       	movw	r24, r16
    129e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    12a0:	08 17       	cp	r16, r24
    12a2:	19 07       	cpc	r17, r25
    12a4:	18 f0       	brcs	.+6      	; 0x12ac <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    12ac:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    12ae:	01 15       	cp	r16, r1
    12b0:	11 05       	cpc	r17, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <pvPortMalloc+0x52>
    12b4:	69 c0       	rjmp	.+210    	; 0x1388 <pvPortMalloc+0x124>
    12b6:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <xFreeBytesRemaining>
    12ba:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <xFreeBytesRemaining+0x1>
    12be:	80 17       	cp	r24, r16
    12c0:	91 07       	cpc	r25, r17
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <pvPortMalloc+0x62>
    12c4:	64 c0       	rjmp	.+200    	; 0x138e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    12c6:	c0 91 f0 07 	lds	r28, 0x07F0	; 0x8007f0 <xStart>
    12ca:	d0 91 f1 07 	lds	r29, 0x07F1	; 0x8007f1 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    12ce:	e0 ef       	ldi	r30, 0xF0	; 240
    12d0:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
    12d4:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    12d6:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	9b 81       	ldd	r25, Y+3	; 0x03
    12dc:	80 17       	cp	r24, r16
    12de:	91 07       	cpc	r25, r17
    12e0:	20 f4       	brcc	.+8      	; 0x12ea <pvPortMalloc+0x86>
    12e2:	88 81       	ld	r24, Y
    12e4:	99 81       	ldd	r25, Y+1	; 0x01
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	a9 f7       	brne	.-22     	; 0x12d4 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    12ea:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <pxEnd>
    12ee:	90 91 ef 07 	lds	r25, 0x07EF	; 0x8007ef <pxEnd+0x1>
    12f2:	c8 17       	cp	r28, r24
    12f4:	d9 07       	cpc	r29, r25
    12f6:	09 f4       	brne	.+2      	; 0x12fa <pvPortMalloc+0x96>
    12f8:	4d c0       	rjmp	.+154    	; 0x1394 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    12fa:	e0 80       	ld	r14, Z
    12fc:	f1 80       	ldd	r15, Z+1	; 0x01
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	e8 0e       	add	r14, r24
    1302:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1304:	88 81       	ld	r24, Y
    1306:	99 81       	ldd	r25, Y+1	; 0x01
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    130c:	2a 81       	ldd	r18, Y+2	; 0x02
    130e:	3b 81       	ldd	r19, Y+3	; 0x03
    1310:	20 1b       	sub	r18, r16
    1312:	31 0b       	sbc	r19, r17
    1314:	29 30       	cpi	r18, 0x09	; 9
    1316:	31 05       	cpc	r19, r1
    1318:	48 f0       	brcs	.+18     	; 0x132c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    131a:	ce 01       	movw	r24, r28
    131c:	80 0f       	add	r24, r16
    131e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1320:	fc 01       	movw	r30, r24
    1322:	33 83       	std	Z+3, r19	; 0x03
    1324:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    1326:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    1328:	0a 83       	std	Y+2, r16	; 0x02
    132a:	52 df       	rcall	.-348    	; 0x11d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <xFreeBytesRemaining>
    1334:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <xFreeBytesRemaining+0x1>
    1338:	82 1b       	sub	r24, r18
    133a:	93 0b       	sbc	r25, r19
    133c:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <xFreeBytesRemaining+0x1>
    1340:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1344:	40 91 ea 07 	lds	r20, 0x07EA	; 0x8007ea <xMinimumEverFreeBytesRemaining>
    1348:	50 91 eb 07 	lds	r21, 0x07EB	; 0x8007eb <xMinimumEverFreeBytesRemaining+0x1>
    134c:	84 17       	cp	r24, r20
    134e:	95 07       	cpc	r25, r21
    1350:	20 f4       	brcc	.+8      	; 0x135a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1352:	90 93 eb 07 	sts	0x07EB, r25	; 0x8007eb <xMinimumEverFreeBytesRemaining+0x1>
    1356:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    135a:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <xBlockAllocatedBit>
    135e:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <xBlockAllocatedBit+0x1>
    1362:	28 2b       	or	r18, r24
    1364:	39 2b       	or	r19, r25
    1366:	3b 83       	std	Y+3, r19	; 0x03
    1368:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    136a:	19 82       	std	Y+1, r1	; 0x01
    136c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    136e:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <xNumberOfSuccessfulAllocations>
    1372:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <xNumberOfSuccessfulAllocations+0x1>
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <xNumberOfSuccessfulAllocations+0x1>
    137c:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <xNumberOfSuccessfulAllocations>
    1380:	0b c0       	rjmp	.+22     	; 0x1398 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    1382:	e1 2c       	mov	r14, r1
    1384:	f1 2c       	mov	r15, r1
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <pvPortMalloc+0x134>
    1388:	e1 2c       	mov	r14, r1
    138a:	f1 2c       	mov	r15, r1
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <pvPortMalloc+0x134>
    138e:	e1 2c       	mov	r14, r1
    1390:	f1 2c       	mov	r15, r1
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <pvPortMalloc+0x134>
    1394:	e1 2c       	mov	r14, r1
    1396:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1398:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
    139c:	e1 14       	cp	r14, r1
    139e:	f1 04       	cpc	r15, r1
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
    13a2:	0e 94 0f 22 	call	0x441e	; 0x441e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    13a6:	c7 01       	movw	r24, r14
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	08 95       	ret

000013b6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	91 f1       	breq	.+100    	; 0x1426 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    13c2:	ec 01       	movw	r28, r24
    13c4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    13c6:	4a 81       	ldd	r20, Y+2	; 0x02
    13c8:	5b 81       	ldd	r21, Y+3	; 0x03
    13ca:	20 91 e4 07 	lds	r18, 0x07E4	; 0x8007e4 <xBlockAllocatedBit>
    13ce:	30 91 e5 07 	lds	r19, 0x07E5	; 0x8007e5 <xBlockAllocatedBit+0x1>
    13d2:	ba 01       	movw	r22, r20
    13d4:	62 23       	and	r22, r18
    13d6:	73 23       	and	r23, r19
    13d8:	67 2b       	or	r22, r23
    13da:	29 f1       	breq	.+74     	; 0x1426 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    13dc:	68 81       	ld	r22, Y
    13de:	79 81       	ldd	r23, Y+1	; 0x01
    13e0:	67 2b       	or	r22, r23
    13e2:	09 f5       	brne	.+66     	; 0x1426 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    13e4:	20 95       	com	r18
    13e6:	30 95       	com	r19
    13e8:	24 23       	and	r18, r20
    13ea:	35 23       	and	r19, r21
    13ec:	3b 83       	std	Y+3, r19	; 0x03
    13ee:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    13f0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	20 91 ec 07 	lds	r18, 0x07EC	; 0x8007ec <xFreeBytesRemaining>
    13fc:	30 91 ed 07 	lds	r19, 0x07ED	; 0x8007ed <xFreeBytesRemaining+0x1>
    1400:	82 0f       	add	r24, r18
    1402:	93 1f       	adc	r25, r19
    1404:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <xFreeBytesRemaining+0x1>
    1408:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    140c:	ce 01       	movw	r24, r28
    140e:	e0 de       	rcall	.-576    	; 0x11d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    1410:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <xNumberOfSuccessfulFrees>
    1414:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <xNumberOfSuccessfulFrees+0x1>
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <xNumberOfSuccessfulFrees+0x1>
    141e:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    1422:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	08 95       	ret

00001430 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1430:	fc 01       	movw	r30, r24
    1432:	03 96       	adiw	r24, 0x03	; 3
    1434:	92 83       	std	Z+2, r25	; 0x02
    1436:	81 83       	std	Z+1, r24	; 0x01
    1438:	4f ef       	ldi	r20, 0xFF	; 255
    143a:	5f ef       	ldi	r21, 0xFF	; 255
    143c:	ba 01       	movw	r22, r20
    143e:	43 83       	std	Z+3, r20	; 0x03
    1440:	54 83       	std	Z+4, r21	; 0x04
    1442:	65 83       	std	Z+5, r22	; 0x05
    1444:	76 83       	std	Z+6, r23	; 0x06
    1446:	90 87       	std	Z+8, r25	; 0x08
    1448:	87 83       	std	Z+7, r24	; 0x07
    144a:	92 87       	std	Z+10, r25	; 0x0a
    144c:	81 87       	std	Z+9, r24	; 0x09
    144e:	10 82       	st	Z, r1
    1450:	08 95       	ret

00001452 <vListInitialiseItem>:
    1452:	fc 01       	movw	r30, r24
    1454:	13 86       	std	Z+11, r1	; 0x0b
    1456:	12 86       	std	Z+10, r1	; 0x0a
    1458:	08 95       	ret

0000145a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1464:	08 81       	ld	r16, Y
    1466:	19 81       	ldd	r17, Y+1	; 0x01
    1468:	2a 81       	ldd	r18, Y+2	; 0x02
    146a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    146c:	0f 3f       	cpi	r16, 0xFF	; 255
    146e:	4f ef       	ldi	r20, 0xFF	; 255
    1470:	14 07       	cpc	r17, r20
    1472:	24 07       	cpc	r18, r20
    1474:	34 07       	cpc	r19, r20
    1476:	21 f4       	brne	.+8      	; 0x1480 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1478:	fc 01       	movw	r30, r24
    147a:	a1 85       	ldd	r26, Z+9	; 0x09
    147c:	b2 85       	ldd	r27, Z+10	; 0x0a
    147e:	11 c0       	rjmp	.+34     	; 0x14a2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1480:	dc 01       	movw	r26, r24
    1482:	13 96       	adiw	r26, 0x03	; 3
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <vListInsert+0x2e>
    1486:	df 01       	movw	r26, r30
    1488:	14 96       	adiw	r26, 0x04	; 4
    148a:	ed 91       	ld	r30, X+
    148c:	fc 91       	ld	r31, X
    148e:	15 97       	sbiw	r26, 0x05	; 5
    1490:	40 81       	ld	r20, Z
    1492:	51 81       	ldd	r21, Z+1	; 0x01
    1494:	62 81       	ldd	r22, Z+2	; 0x02
    1496:	73 81       	ldd	r23, Z+3	; 0x03
    1498:	04 17       	cp	r16, r20
    149a:	15 07       	cpc	r17, r21
    149c:	26 07       	cpc	r18, r22
    149e:	37 07       	cpc	r19, r23
    14a0:	90 f7       	brcc	.-28     	; 0x1486 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    14a2:	14 96       	adiw	r26, 0x04	; 4
    14a4:	ed 91       	ld	r30, X+
    14a6:	fc 91       	ld	r31, X
    14a8:	15 97       	sbiw	r26, 0x05	; 5
    14aa:	fd 83       	std	Y+5, r31	; 0x05
    14ac:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14ae:	d7 83       	std	Z+7, r29	; 0x07
    14b0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    14b2:	bf 83       	std	Y+7, r27	; 0x07
    14b4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
    14b6:	15 96       	adiw	r26, 0x05	; 5
    14b8:	dc 93       	st	X, r29
    14ba:	ce 93       	st	-X, r28
    14bc:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    14be:	9b 87       	std	Y+11, r25	; 0x0b
    14c0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
    14c2:	fc 01       	movw	r30, r24
    14c4:	20 81       	ld	r18, Z
    14c6:	2f 5f       	subi	r18, 0xFF	; 255
    14c8:	20 83       	st	Z, r18
}
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    14da:	a2 85       	ldd	r26, Z+10	; 0x0a
    14dc:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14de:	c4 81       	ldd	r28, Z+4	; 0x04
    14e0:	d5 81       	ldd	r29, Z+5	; 0x05
    14e2:	86 81       	ldd	r24, Z+6	; 0x06
    14e4:	97 81       	ldd	r25, Z+7	; 0x07
    14e6:	9f 83       	std	Y+7, r25	; 0x07
    14e8:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14ea:	c6 81       	ldd	r28, Z+6	; 0x06
    14ec:	d7 81       	ldd	r29, Z+7	; 0x07
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	95 81       	ldd	r25, Z+5	; 0x05
    14f2:	9d 83       	std	Y+5, r25	; 0x05
    14f4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	8d 91       	ld	r24, X+
    14fa:	9c 91       	ld	r25, X
    14fc:	12 97       	sbiw	r26, 0x02	; 2
    14fe:	e8 17       	cp	r30, r24
    1500:	f9 07       	cpc	r31, r25
    1502:	31 f4       	brne	.+12     	; 0x1510 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1504:	86 81       	ldd	r24, Z+6	; 0x06
    1506:	97 81       	ldd	r25, Z+7	; 0x07
    1508:	12 96       	adiw	r26, 0x02	; 2
    150a:	9c 93       	st	X, r25
    150c:	8e 93       	st	-X, r24
    150e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1510:	13 86       	std	Z+11, r1	; 0x0b
    1512:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1514:	8c 91       	ld	r24, X
    1516:	81 50       	subi	r24, 0x01	; 1
    1518:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    151a:	8c 91       	ld	r24, X
}
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	08 95       	ret

00001522 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    1522:	a8 95       	wdr
    1524:	90 ec       	ldi	r25, 0xC0	; 192
    1526:	88 e1       	ldi	r24, 0x18	; 24
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	a8 95       	wdr
    152e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1538:	08 95       	ret

0000153a <pxPortInitialiseStack>:
    153a:	fc 01       	movw	r30, r24
    153c:	60 83       	st	Z, r22
    153e:	31 97       	sbiw	r30, 0x01	; 1
    1540:	70 83       	st	Z, r23
    1542:	31 97       	sbiw	r30, 0x01	; 1
    1544:	10 82       	st	Z, r1
    1546:	31 97       	sbiw	r30, 0x01	; 1
    1548:	10 82       	st	Z, r1
    154a:	31 97       	sbiw	r30, 0x01	; 1
    154c:	20 e8       	ldi	r18, 0x80	; 128
    154e:	20 83       	st	Z, r18
    1550:	31 97       	sbiw	r30, 0x01	; 1
    1552:	10 82       	st	Z, r1
    1554:	31 97       	sbiw	r30, 0x01	; 1
    1556:	10 82       	st	Z, r1
    1558:	31 97       	sbiw	r30, 0x01	; 1
    155a:	10 82       	st	Z, r1
    155c:	77 97       	sbiw	r30, 0x17	; 23
    155e:	40 83       	st	Z, r20
    1560:	31 97       	sbiw	r30, 0x01	; 1
    1562:	50 83       	st	Z, r21
    1564:	86 97       	sbiw	r24, 0x26	; 38
    1566:	08 95       	ret

00001568 <xPortStartScheduler>:
    1568:	dc df       	rcall	.-72     	; 0x1522 <prvSetupTimerInterrupt>
    156a:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    156e:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    1572:	cd 91       	ld	r28, X+
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	dd 91       	ld	r29, X+
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	7f 91       	pop	r23
    158c:	6f 91       	pop	r22
    158e:	5f 91       	pop	r21
    1590:	4f 91       	pop	r20
    1592:	3f 91       	pop	r19
    1594:	2f 91       	pop	r18
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	df 90       	pop	r13
    15a0:	cf 90       	pop	r12
    15a2:	bf 90       	pop	r11
    15a4:	af 90       	pop	r10
    15a6:	9f 90       	pop	r9
    15a8:	8f 90       	pop	r8
    15aa:	7f 90       	pop	r7
    15ac:	6f 90       	pop	r6
    15ae:	5f 90       	pop	r5
    15b0:	4f 90       	pop	r4
    15b2:	3f 90       	pop	r3
    15b4:	2f 90       	pop	r2
    15b6:	1f 90       	pop	r1
    15b8:	0f 90       	pop	r0
    15ba:	0c be       	out	0x3c, r0	; 60
    15bc:	0f 90       	pop	r0
    15be:	0b be       	out	0x3b, r0	; 59
    15c0:	0f 90       	pop	r0
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	0f 90       	pop	r0
    15c6:	08 95       	ret
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	08 95       	ret

000015cc <vPortYield>:
    15cc:	0f 92       	push	r0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	0f 92       	push	r0
    15d4:	0b b6       	in	r0, 0x3b	; 59
    15d6:	0f 92       	push	r0
    15d8:	0c b6       	in	r0, 0x3c	; 60
    15da:	0f 92       	push	r0
    15dc:	1f 92       	push	r1
    15de:	11 24       	eor	r1, r1
    15e0:	2f 92       	push	r2
    15e2:	3f 92       	push	r3
    15e4:	4f 92       	push	r4
    15e6:	5f 92       	push	r5
    15e8:	6f 92       	push	r6
    15ea:	7f 92       	push	r7
    15ec:	8f 92       	push	r8
    15ee:	9f 92       	push	r9
    15f0:	af 92       	push	r10
    15f2:	bf 92       	push	r11
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
    161c:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    1620:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    1624:	0d b6       	in	r0, 0x3d	; 61
    1626:	0d 92       	st	X+, r0
    1628:	0e b6       	in	r0, 0x3e	; 62
    162a:	0d 92       	st	X+, r0
    162c:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <vTaskSwitchContext>
    1630:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    1634:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    1638:	cd 91       	ld	r28, X+
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	dd 91       	ld	r29, X+
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	bf 90       	pop	r11
    166a:	af 90       	pop	r10
    166c:	9f 90       	pop	r9
    166e:	8f 90       	pop	r8
    1670:	7f 90       	pop	r7
    1672:	6f 90       	pop	r6
    1674:	5f 90       	pop	r5
    1676:	4f 90       	pop	r4
    1678:	3f 90       	pop	r3
    167a:	2f 90       	pop	r2
    167c:	1f 90       	pop	r1
    167e:	0f 90       	pop	r0
    1680:	0c be       	out	0x3c, r0	; 60
    1682:	0f 90       	pop	r0
    1684:	0b be       	out	0x3b, r0	; 59
    1686:	0f 90       	pop	r0
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	0f 90       	pop	r0
    168c:	08 95       	ret

0000168e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    168e:	0f 92       	push	r0
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	0f 92       	push	r0
    1696:	0b b6       	in	r0, 0x3b	; 59
    1698:	0f 92       	push	r0
    169a:	0c b6       	in	r0, 0x3c	; 60
    169c:	0f 92       	push	r0
    169e:	1f 92       	push	r1
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 92       	push	r2
    16a4:	3f 92       	push	r3
    16a6:	4f 92       	push	r4
    16a8:	5f 92       	push	r5
    16aa:	6f 92       	push	r6
    16ac:	7f 92       	push	r7
    16ae:	8f 92       	push	r8
    16b0:	9f 92       	push	r9
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
    16de:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    16e2:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    16e6:	0d b6       	in	r0, 0x3d	; 61
    16e8:	0d 92       	st	X+, r0
    16ea:	0e b6       	in	r0, 0x3e	; 62
    16ec:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    16ee:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    16f0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <xTaskIncrementTick>
    16f4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    16f6:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    16fa:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    16fe:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    1702:	cd 91       	ld	r28, X+
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	dd 91       	ld	r29, X+
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	ff 91       	pop	r31
    170c:	ef 91       	pop	r30
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	8f 90       	pop	r8
    173a:	7f 90       	pop	r7
    173c:	6f 90       	pop	r6
    173e:	5f 90       	pop	r5
    1740:	4f 90       	pop	r4
    1742:	3f 90       	pop	r3
    1744:	2f 90       	pop	r2
    1746:	1f 90       	pop	r1
    1748:	0f 90       	pop	r0
    174a:	0c be       	out	0x3c, r0	; 60
    174c:	0f 90       	pop	r0
    174e:	0b be       	out	0x3b, r0	; 59
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1756:	08 95       	ret

00001758 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1758:	9a df       	rcall	.-204    	; 0x168e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    175a:	18 95       	reti

0000175c <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    175c:	dc 01       	movw	r26, r24
    175e:	53 96       	adiw	r26, 0x13	; 19
    1760:	2c 91       	ld	r18, X
    1762:	53 97       	sbiw	r26, 0x13	; 19
    1764:	22 23       	and	r18, r18
    1766:	41 f0       	breq	.+16     	; 0x1778 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1768:	5a 96       	adiw	r26, 0x1a	; 26
    176a:	ed 91       	ld	r30, X+
    176c:	fc 91       	ld	r31, X
    176e:	5b 97       	sbiw	r26, 0x1b	; 27
    1770:	90 81       	ld	r25, Z
    1772:	8a e0       	ldi	r24, 0x0A	; 10
    1774:	89 1b       	sub	r24, r25
    1776:	08 95       	ret
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	08 95       	ret

0000177c <prvIsQueueEmpty>:
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	0f 92       	push	r0
    1782:	fc 01       	movw	r30, r24
    1784:	86 8d       	ldd	r24, Z+30	; 0x1e
    1786:	81 11       	cpse	r24, r1
    1788:	02 c0       	rjmp	.+4      	; 0x178e <prvIsQueueEmpty+0x12>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <prvIsQueueEmpty+0x14>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0f 90       	pop	r0
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	08 95       	ret

00001796 <prvIsQueueFull>:
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	0f 92       	push	r0
    179c:	fc 01       	movw	r30, r24
    179e:	26 8d       	ldd	r18, Z+30	; 0x1e
    17a0:	87 8d       	ldd	r24, Z+31	; 0x1f
    17a2:	28 13       	cpse	r18, r24
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <prvIsQueueFull+0x14>
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <prvIsQueueFull+0x16>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	08 95       	ret

000017b2 <prvCopyDataToQueue>:
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
    17bc:	04 2f       	mov	r16, r20
    17be:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17c0:	48 a1       	ldd	r20, Y+32	; 0x20
    17c2:	41 11       	cpse	r20, r1
    17c4:	0c c0       	rjmp	.+24     	; 0x17de <prvCopyDataToQueue+0x2c>
    17c6:	88 81       	ld	r24, Y
    17c8:	99 81       	ldd	r25, Y+1	; 0x01
    17ca:	89 2b       	or	r24, r25
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <prvCopyDataToQueue+0x1e>
    17ce:	42 c0       	rjmp	.+132    	; 0x1854 <prvCopyDataToQueue+0xa2>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	0e 94 2a 1b 	call	0x3654	; 0x3654 <xTaskPriorityDisinherit>
    17d8:	1d 82       	std	Y+5, r1	; 0x05
    17da:	1c 82       	std	Y+4, r1	; 0x04
    17dc:	42 c0       	rjmp	.+132    	; 0x1862 <prvCopyDataToQueue+0xb0>
    17de:	01 11       	cpse	r16, r1
    17e0:	17 c0       	rjmp	.+46     	; 0x1810 <prvCopyDataToQueue+0x5e>
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <memcpy>
    17ec:	28 a1       	ldd	r18, Y+32	; 0x20
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	82 0f       	add	r24, r18
    17f4:	91 1d       	adc	r25, r1
    17f6:	9b 83       	std	Y+3, r25	; 0x03
    17f8:	8a 83       	std	Y+2, r24	; 0x02
    17fa:	2c 81       	ldd	r18, Y+4	; 0x04
    17fc:	3d 81       	ldd	r19, Y+5	; 0x05
    17fe:	82 17       	cp	r24, r18
    1800:	93 07       	cpc	r25, r19
    1802:	50 f1       	brcs	.+84     	; 0x1858 <prvCopyDataToQueue+0xa6>
    1804:	88 81       	ld	r24, Y
    1806:	99 81       	ldd	r25, Y+1	; 0x01
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	29 c0       	rjmp	.+82     	; 0x1862 <prvCopyDataToQueue+0xb0>
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	9f 81       	ldd	r25, Y+7	; 0x07
    1816:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <memcpy>
    181a:	88 a1       	ldd	r24, Y+32	; 0x20
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	91 95       	neg	r25
    1820:	81 95       	neg	r24
    1822:	91 09       	sbc	r25, r1
    1824:	2e 81       	ldd	r18, Y+6	; 0x06
    1826:	3f 81       	ldd	r19, Y+7	; 0x07
    1828:	28 0f       	add	r18, r24
    182a:	39 1f       	adc	r19, r25
    182c:	3f 83       	std	Y+7, r19	; 0x07
    182e:	2e 83       	std	Y+6, r18	; 0x06
    1830:	48 81       	ld	r20, Y
    1832:	59 81       	ldd	r21, Y+1	; 0x01
    1834:	24 17       	cp	r18, r20
    1836:	35 07       	cpc	r19, r21
    1838:	30 f4       	brcc	.+12     	; 0x1846 <prvCopyDataToQueue+0x94>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	82 0f       	add	r24, r18
    1840:	93 1f       	adc	r25, r19
    1842:	9f 83       	std	Y+7, r25	; 0x07
    1844:	8e 83       	std	Y+6, r24	; 0x06
    1846:	02 30       	cpi	r16, 0x02	; 2
    1848:	49 f4       	brne	.+18     	; 0x185c <prvCopyDataToQueue+0xaa>
    184a:	11 23       	and	r17, r17
    184c:	49 f0       	breq	.+18     	; 0x1860 <prvCopyDataToQueue+0xae>
    184e:	11 50       	subi	r17, 0x01	; 1
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <prvCopyDataToQueue+0xb0>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <prvCopyDataToQueue+0xb0>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <prvCopyDataToQueue+0xb0>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <prvCopyDataToQueue+0xb0>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	1f 5f       	subi	r17, 0xFF	; 255
    1864:	1e 8f       	std	Y+30, r17	; 0x1e
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret

00001870 <prvCopyDataFromQueue>:
    1870:	fc 01       	movw	r30, r24
    1872:	40 a1       	ldd	r20, Z+32	; 0x20
    1874:	44 23       	and	r20, r20
    1876:	a9 f0       	breq	.+42     	; 0x18a2 <prvCopyDataFromQueue+0x32>
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	26 81       	ldd	r18, Z+6	; 0x06
    187c:	37 81       	ldd	r19, Z+7	; 0x07
    187e:	24 0f       	add	r18, r20
    1880:	35 1f       	adc	r19, r21
    1882:	37 83       	std	Z+7, r19	; 0x07
    1884:	26 83       	std	Z+6, r18	; 0x06
    1886:	84 81       	ldd	r24, Z+4	; 0x04
    1888:	95 81       	ldd	r25, Z+5	; 0x05
    188a:	28 17       	cp	r18, r24
    188c:	39 07       	cpc	r19, r25
    188e:	20 f0       	brcs	.+8      	; 0x1898 <prvCopyDataFromQueue+0x28>
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	97 83       	std	Z+7, r25	; 0x07
    1896:	86 83       	std	Z+6, r24	; 0x06
    1898:	cb 01       	movw	r24, r22
    189a:	66 81       	ldd	r22, Z+6	; 0x06
    189c:	77 81       	ldd	r23, Z+7	; 0x07
    189e:	0c 94 dc 37 	jmp	0x6fb8	; 0x6fb8 <memcpy>
    18a2:	08 95       	ret

000018a4 <prvUnlockQueue>:
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	ec 01       	movw	r28, r24
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	0f 92       	push	r0
    18b2:	1a a1       	ldd	r17, Y+34	; 0x22
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <prvUnlockQueue+0x28>
    18b6:	8b 89       	ldd	r24, Y+19	; 0x13
    18b8:	88 23       	and	r24, r24
    18ba:	51 f0       	breq	.+20     	; 0x18d0 <prvUnlockQueue+0x2c>
    18bc:	ce 01       	movw	r24, r28
    18be:	43 96       	adiw	r24, 0x13	; 19
    18c0:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskRemoveFromEventList>
    18c4:	81 11       	cpse	r24, r1
    18c6:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskMissedYield>
    18ca:	11 50       	subi	r17, 0x01	; 1
    18cc:	11 16       	cp	r1, r17
    18ce:	9c f3       	brlt	.-26     	; 0x18b6 <prvUnlockQueue+0x12>
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	8a a3       	std	Y+34, r24	; 0x22
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	0f 92       	push	r0
    18de:	19 a1       	ldd	r17, Y+33	; 0x21
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <prvUnlockQueue+0x54>
    18e2:	88 85       	ldd	r24, Y+8	; 0x08
    18e4:	88 23       	and	r24, r24
    18e6:	51 f0       	breq	.+20     	; 0x18fc <prvUnlockQueue+0x58>
    18e8:	ce 01       	movw	r24, r28
    18ea:	08 96       	adiw	r24, 0x08	; 8
    18ec:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskRemoveFromEventList>
    18f0:	81 11       	cpse	r24, r1
    18f2:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskMissedYield>
    18f6:	11 50       	subi	r17, 0x01	; 1
    18f8:	11 16       	cp	r1, r17
    18fa:	9c f3       	brlt	.-26     	; 0x18e2 <prvUnlockQueue+0x3e>
    18fc:	8f ef       	ldi	r24, 0xFF	; 255
    18fe:	89 a3       	std	Y+33, r24	; 0x21
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	08 95       	ret

0000190c <xQueueGenericReset>:
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	ec 01       	movw	r28, r24
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	0f 92       	push	r0
    1918:	e8 81       	ld	r30, Y
    191a:	f9 81       	ldd	r31, Y+1	; 0x01
    191c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    191e:	28 a1       	ldd	r18, Y+32	; 0x20
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	82 9f       	mul	r24, r18
    1926:	a0 01       	movw	r20, r0
    1928:	83 9f       	mul	r24, r19
    192a:	50 0d       	add	r21, r0
    192c:	92 9f       	mul	r25, r18
    192e:	50 0d       	add	r21, r0
    1930:	11 24       	eor	r1, r1
    1932:	4e 0f       	add	r20, r30
    1934:	5f 1f       	adc	r21, r31
    1936:	5d 83       	std	Y+5, r21	; 0x05
    1938:	4c 83       	std	Y+4, r20	; 0x04
    193a:	1e 8e       	std	Y+30, r1	; 0x1e
    193c:	fb 83       	std	Y+3, r31	; 0x03
    193e:	ea 83       	std	Y+2, r30	; 0x02
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	28 9f       	mul	r18, r24
    1944:	a0 01       	movw	r20, r0
    1946:	29 9f       	mul	r18, r25
    1948:	50 0d       	add	r21, r0
    194a:	38 9f       	mul	r19, r24
    194c:	50 0d       	add	r21, r0
    194e:	11 24       	eor	r1, r1
    1950:	cf 01       	movw	r24, r30
    1952:	84 0f       	add	r24, r20
    1954:	95 1f       	adc	r25, r21
    1956:	9f 83       	std	Y+7, r25	; 0x07
    1958:	8e 83       	std	Y+6, r24	; 0x06
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	89 a3       	std	Y+33, r24	; 0x21
    195e:	8a a3       	std	Y+34, r24	; 0x22
    1960:	61 11       	cpse	r22, r1
    1962:	0b c0       	rjmp	.+22     	; 0x197a <xQueueGenericReset+0x6e>
    1964:	88 85       	ldd	r24, Y+8	; 0x08
    1966:	88 23       	and	r24, r24
    1968:	71 f0       	breq	.+28     	; 0x1986 <xQueueGenericReset+0x7a>
    196a:	ce 01       	movw	r24, r28
    196c:	08 96       	adiw	r24, 0x08	; 8
    196e:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskRemoveFromEventList>
    1972:	88 23       	and	r24, r24
    1974:	41 f0       	breq	.+16     	; 0x1986 <xQueueGenericReset+0x7a>
    1976:	2a de       	rcall	.-940    	; 0x15cc <vPortYield>
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <xQueueGenericReset+0x7a>
    197a:	ce 01       	movw	r24, r28
    197c:	08 96       	adiw	r24, 0x08	; 8
    197e:	58 dd       	rcall	.-1360   	; 0x1430 <vListInitialise>
    1980:	ce 01       	movw	r24, r28
    1982:	43 96       	adiw	r24, 0x13	; 19
    1984:	55 dd       	rcall	.-1366   	; 0x1430 <vListInitialise>
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret

00001992 <prvInitialiseNewQueue>:
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	f8 01       	movw	r30, r16
    1998:	61 11       	cpse	r22, r1
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <prvInitialiseNewQueue+0x10>
    199c:	11 83       	std	Z+1, r17	; 0x01
    199e:	00 83       	st	Z, r16
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <prvInitialiseNewQueue+0x14>
    19a2:	51 83       	std	Z+1, r21	; 0x01
    19a4:	40 83       	st	Z, r20
    19a6:	87 8f       	std	Z+31, r24	; 0x1f
    19a8:	60 a3       	std	Z+32, r22	; 0x20
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	cf 01       	movw	r24, r30
    19ae:	ae df       	rcall	.-164    	; 0x190c <xQueueGenericReset>
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	08 95       	ret

000019b6 <xQueueGenericCreate>:
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	f8 2e       	mov	r15, r24
    19c6:	e6 2e       	mov	r14, r22
    19c8:	d4 2e       	mov	r13, r20
    19ca:	86 9f       	mul	r24, r22
    19cc:	c0 01       	movw	r24, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	83 96       	adiw	r24, 0x23	; 35
    19d2:	48 dc       	rcall	.-1904   	; 0x1264 <pvPortMalloc>
    19d4:	ec 01       	movw	r28, r24
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	41 f0       	breq	.+16     	; 0x19ea <xQueueGenericCreate+0x34>
    19da:	8c 01       	movw	r16, r24
    19dc:	2d 2d       	mov	r18, r13
    19de:	ac 01       	movw	r20, r24
    19e0:	4d 5d       	subi	r20, 0xDD	; 221
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	6e 2d       	mov	r22, r14
    19e6:	8f 2d       	mov	r24, r15
    19e8:	d4 df       	rcall	.-88     	; 0x1992 <prvInitialiseNewQueue>
    19ea:	ce 01       	movw	r24, r28
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	08 95       	ret

000019fc <xQueueGenericSend>:
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	29 97       	sbiw	r28, 0x09	; 9
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	7c 01       	movw	r14, r24
    1a1e:	6b 01       	movw	r12, r22
    1a20:	2e 83       	std	Y+6, r18	; 0x06
    1a22:	3f 83       	std	Y+7, r19	; 0x07
    1a24:	48 87       	std	Y+8, r20	; 0x08
    1a26:	59 87       	std	Y+9, r21	; 0x09
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	0f 92       	push	r0
    1a30:	f7 01       	movw	r30, r14
    1a32:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a34:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a36:	98 17       	cp	r25, r24
    1a38:	10 f0       	brcs	.+4      	; 0x1a3e <xQueueGenericSend+0x42>
    1a3a:	02 30       	cpi	r16, 0x02	; 2
    1a3c:	b1 f4       	brne	.+44     	; 0x1a6a <xQueueGenericSend+0x6e>
    1a3e:	40 2f       	mov	r20, r16
    1a40:	b6 01       	movw	r22, r12
    1a42:	c7 01       	movw	r24, r14
    1a44:	b6 de       	rcall	.-660    	; 0x17b2 <prvCopyDataToQueue>
    1a46:	f7 01       	movw	r30, r14
    1a48:	93 89       	ldd	r25, Z+19	; 0x13
    1a4a:	99 23       	and	r25, r25
    1a4c:	41 f0       	breq	.+16     	; 0x1a5e <xQueueGenericSend+0x62>
    1a4e:	c7 01       	movw	r24, r14
    1a50:	43 96       	adiw	r24, 0x13	; 19
    1a52:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskRemoveFromEventList>
    1a56:	88 23       	and	r24, r24
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <xQueueGenericSend+0x66>
    1a5a:	b8 dd       	rcall	.-1168   	; 0x15cc <vPortYield>
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <xQueueGenericSend+0x66>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	b5 dd       	rcall	.-1174   	; 0x15cc <vPortYield>
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	4c c0       	rjmp	.+152    	; 0x1b02 <xQueueGenericSend+0x106>
    1a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6e:	a8 85       	ldd	r26, Y+8	; 0x08
    1a70:	b9 85       	ldd	r27, Y+9	; 0x09
    1a72:	89 2b       	or	r24, r25
    1a74:	8a 2b       	or	r24, r26
    1a76:	8b 2b       	or	r24, r27
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <xQueueGenericSend+0x86>
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	40 c0       	rjmp	.+128    	; 0x1b02 <xQueueGenericSend+0x106>
    1a82:	11 11       	cpse	r17, r1
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <xQueueGenericSend+0x94>
    1a86:	ce 01       	movw	r24, r28
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	0e 94 15 1a 	call	0x342a	; 0x342a <vTaskInternalSetTimeOutState>
    1a8e:	11 e0       	ldi	r17, 0x01	; 1
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	c7 d7       	rcall	.+3982   	; 0x2a24 <vTaskSuspendAll>
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	0f 92       	push	r0
    1a9c:	f7 01       	movw	r30, r14
    1a9e:	81 a1       	ldd	r24, Z+33	; 0x21
    1aa0:	8f 3f       	cpi	r24, 0xFF	; 255
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <xQueueGenericSend+0xaa>
    1aa4:	11 a2       	std	Z+33, r1	; 0x21
    1aa6:	f7 01       	movw	r30, r14
    1aa8:	82 a1       	ldd	r24, Z+34	; 0x22
    1aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <xQueueGenericSend+0xb4>
    1aae:	12 a2       	std	Z+34, r1	; 0x22
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	be 01       	movw	r22, r28
    1ab6:	6a 5f       	subi	r22, 0xFA	; 250
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	0e 94 26 1a 	call	0x344c	; 0x344c <xTaskCheckForTimeOut>
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	19 c0       	rjmp	.+50     	; 0x1af8 <xQueueGenericSend+0xfc>
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	66 de       	rcall	.-820    	; 0x1796 <prvIsQueueFull>
    1aca:	88 23       	and	r24, r24
    1acc:	81 f0       	breq	.+32     	; 0x1aee <xQueueGenericSend+0xf2>
    1ace:	4e 81       	ldd	r20, Y+6	; 0x06
    1ad0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ad2:	68 85       	ldd	r22, Y+8	; 0x08
    1ad4:	79 85       	ldd	r23, Y+9	; 0x09
    1ad6:	c7 01       	movw	r24, r14
    1ad8:	08 96       	adiw	r24, 0x08	; 8
    1ada:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskPlaceOnEventList>
    1ade:	c7 01       	movw	r24, r14
    1ae0:	e1 de       	rcall	.-574    	; 0x18a4 <prvUnlockQueue>
    1ae2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	a0 cf       	rjmp	.-192    	; 0x1a2a <xQueueGenericSend+0x2e>
    1aea:	70 dd       	rcall	.-1312   	; 0x15cc <vPortYield>
    1aec:	9e cf       	rjmp	.-196    	; 0x1a2a <xQueueGenericSend+0x2e>
    1aee:	c7 01       	movw	r24, r14
    1af0:	d9 de       	rcall	.-590    	; 0x18a4 <prvUnlockQueue>
    1af2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
    1af6:	99 cf       	rjmp	.-206    	; 0x1a2a <xQueueGenericSend+0x2e>
    1af8:	c7 01       	movw	r24, r14
    1afa:	d4 de       	rcall	.-600    	; 0x18a4 <prvUnlockQueue>
    1afc:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	29 96       	adiw	r28, 0x09	; 9
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	08 95       	ret

00001b20 <prvInitialiseMutex>:
    1b20:	0f 93       	push	r16
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f0       	breq	.+26     	; 0x1b40 <prvInitialiseMutex+0x20>
    1b26:	fc 01       	movw	r30, r24
    1b28:	15 82       	std	Z+5, r1	; 0x05
    1b2a:	14 82       	std	Z+4, r1	; 0x04
    1b2c:	11 82       	std	Z+1, r1	; 0x01
    1b2e:	10 82       	st	Z, r1
    1b30:	16 82       	std	Z+6, r1	; 0x06
    1b32:	00 e0       	ldi	r16, 0x00	; 0
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	a9 01       	movw	r20, r18
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	5e df       	rcall	.-324    	; 0x19fc <xQueueGenericSend>
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <xQueueCreateMutex>:
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	48 2f       	mov	r20, r24
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	33 df       	rcall	.-410    	; 0x19b6 <xQueueGenericCreate>
    1b50:	ec 01       	movw	r28, r24
    1b52:	e6 df       	rcall	.-52     	; 0x1b20 <prvInitialiseMutex>
    1b54:	ce 01       	movw	r24, r28
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <xQueueGenericSendFromISR>:
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	8a 01       	movw	r16, r20
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b6e:	37 8d       	ldd	r19, Z+31	; 0x1f
    1b70:	53 17       	cp	r21, r19
    1b72:	10 f0       	brcs	.+4      	; 0x1b78 <xQueueGenericSendFromISR+0x1c>
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	f9 f4       	brne	.+62     	; 0x1bb6 <xQueueGenericSendFromISR+0x5a>
    1b78:	42 2f       	mov	r20, r18
    1b7a:	78 01       	movw	r14, r16
    1b7c:	ec 01       	movw	r28, r24
    1b7e:	1a a1       	ldd	r17, Y+34	; 0x22
    1b80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b82:	ce 01       	movw	r24, r28
    1b84:	16 de       	rcall	.-980    	; 0x17b2 <prvCopyDataToQueue>
    1b86:	1f 3f       	cpi	r17, 0xFF	; 255
    1b88:	81 f4       	brne	.+32     	; 0x1baa <xQueueGenericSendFromISR+0x4e>
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	88 23       	and	r24, r24
    1b8e:	a9 f0       	breq	.+42     	; 0x1bba <xQueueGenericSendFromISR+0x5e>
    1b90:	ce 01       	movw	r24, r28
    1b92:	43 96       	adiw	r24, 0x13	; 19
    1b94:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskRemoveFromEventList>
    1b98:	88 23       	and	r24, r24
    1b9a:	89 f0       	breq	.+34     	; 0x1bbe <xQueueGenericSendFromISR+0x62>
    1b9c:	e1 14       	cp	r14, r1
    1b9e:	f1 04       	cpc	r15, r1
    1ba0:	81 f0       	breq	.+32     	; 0x1bc2 <xQueueGenericSendFromISR+0x66>
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	f7 01       	movw	r30, r14
    1ba6:	80 83       	st	Z, r24
    1ba8:	0d c0       	rjmp	.+26     	; 0x1bc4 <xQueueGenericSendFromISR+0x68>
    1baa:	ff 24       	eor	r15, r15
    1bac:	f3 94       	inc	r15
    1bae:	f1 0e       	add	r15, r17
    1bb0:	fa a2       	std	Y+34, r15	; 0x22
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <xQueueGenericSendFromISR+0x68>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <xQueueGenericSendFromISR+0x68>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <xQueueGenericSendFromISR+0x68>
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <xQueueGenericSendFromISR+0x68>
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	08 95       	ret

00001bd2 <xQueueReceive>:
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	29 97       	sbiw	r28, 0x09	; 9
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	8c 01       	movw	r16, r24
    1bf4:	6b 01       	movw	r12, r22
    1bf6:	2e 83       	std	Y+6, r18	; 0x06
    1bf8:	3f 83       	std	Y+7, r19	; 0x07
    1bfa:	48 87       	std	Y+8, r20	; 0x08
    1bfc:	59 87       	std	Y+9, r21	; 0x09
    1bfe:	e1 2c       	mov	r14, r1
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	0f 92       	push	r0
    1c06:	f8 01       	movw	r30, r16
    1c08:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1c0a:	ff 20       	and	r15, r15
    1c0c:	99 f0       	breq	.+38     	; 0x1c34 <xQueueReceive+0x62>
    1c0e:	b6 01       	movw	r22, r12
    1c10:	c8 01       	movw	r24, r16
    1c12:	2e de       	rcall	.-932    	; 0x1870 <prvCopyDataFromQueue>
    1c14:	fa 94       	dec	r15
    1c16:	f8 01       	movw	r30, r16
    1c18:	f6 8e       	std	Z+30, r15	; 0x1e
    1c1a:	80 85       	ldd	r24, Z+8	; 0x08
    1c1c:	88 23       	and	r24, r24
    1c1e:	31 f0       	breq	.+12     	; 0x1c2c <xQueueReceive+0x5a>
    1c20:	c8 01       	movw	r24, r16
    1c22:	08 96       	adiw	r24, 0x08	; 8
    1c24:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskRemoveFromEventList>
    1c28:	81 11       	cpse	r24, r1
    1c2a:	d0 dc       	rcall	.-1632   	; 0x15cc <vPortYield>
    1c2c:	0f 90       	pop	r0
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	4f c0       	rjmp	.+158    	; 0x1cd2 <xQueueReceive+0x100>
    1c34:	8e 81       	ldd	r24, Y+6	; 0x06
    1c36:	9f 81       	ldd	r25, Y+7	; 0x07
    1c38:	a8 85       	ldd	r26, Y+8	; 0x08
    1c3a:	b9 85       	ldd	r27, Y+9	; 0x09
    1c3c:	89 2b       	or	r24, r25
    1c3e:	8a 2b       	or	r24, r26
    1c40:	8b 2b       	or	r24, r27
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <xQueueReceive+0x7a>
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	43 c0       	rjmp	.+134    	; 0x1cd2 <xQueueReceive+0x100>
    1c4c:	e1 10       	cpse	r14, r1
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <xQueueReceive+0x8a>
    1c50:	ce 01       	movw	r24, r28
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	0e 94 15 1a 	call	0x342a	; 0x342a <vTaskInternalSetTimeOutState>
    1c58:	ee 24       	eor	r14, r14
    1c5a:	e3 94       	inc	r14
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	e1 d6       	rcall	.+3522   	; 0x2a24 <vTaskSuspendAll>
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	0f 92       	push	r0
    1c68:	f8 01       	movw	r30, r16
    1c6a:	81 a1       	ldd	r24, Z+33	; 0x21
    1c6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <xQueueReceive+0xa0>
    1c70:	11 a2       	std	Z+33, r1	; 0x21
    1c72:	f8 01       	movw	r30, r16
    1c74:	82 a1       	ldd	r24, Z+34	; 0x22
    1c76:	8f 3f       	cpi	r24, 0xFF	; 255
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <xQueueReceive+0xaa>
    1c7a:	12 a2       	std	Z+34, r1	; 0x22
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	be 01       	movw	r22, r28
    1c82:	6a 5f       	subi	r22, 0xFA	; 250
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	ce 01       	movw	r24, r28
    1c88:	01 96       	adiw	r24, 0x01	; 1
    1c8a:	0e 94 26 1a 	call	0x344c	; 0x344c <xTaskCheckForTimeOut>
    1c8e:	81 11       	cpse	r24, r1
    1c90:	17 c0       	rjmp	.+46     	; 0x1cc0 <xQueueReceive+0xee>
    1c92:	c8 01       	movw	r24, r16
    1c94:	73 dd       	rcall	.-1306   	; 0x177c <prvIsQueueEmpty>
    1c96:	88 23       	and	r24, r24
    1c98:	79 f0       	breq	.+30     	; 0x1cb8 <xQueueReceive+0xe6>
    1c9a:	4e 81       	ldd	r20, Y+6	; 0x06
    1c9c:	5f 81       	ldd	r21, Y+7	; 0x07
    1c9e:	68 85       	ldd	r22, Y+8	; 0x08
    1ca0:	79 85       	ldd	r23, Y+9	; 0x09
    1ca2:	c8 01       	movw	r24, r16
    1ca4:	43 96       	adiw	r24, 0x13	; 19
    1ca6:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskPlaceOnEventList>
    1caa:	c8 01       	movw	r24, r16
    1cac:	fb dd       	rcall	.-1034   	; 0x18a4 <prvUnlockQueue>
    1cae:	fa d7       	rcall	.+4084   	; 0x2ca4 <xTaskResumeAll>
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	a6 cf       	rjmp	.-180    	; 0x1c00 <xQueueReceive+0x2e>
    1cb4:	8b dc       	rcall	.-1770   	; 0x15cc <vPortYield>
    1cb6:	a4 cf       	rjmp	.-184    	; 0x1c00 <xQueueReceive+0x2e>
    1cb8:	c8 01       	movw	r24, r16
    1cba:	f4 dd       	rcall	.-1048   	; 0x18a4 <prvUnlockQueue>
    1cbc:	f3 d7       	rcall	.+4070   	; 0x2ca4 <xTaskResumeAll>
    1cbe:	a0 cf       	rjmp	.-192    	; 0x1c00 <xQueueReceive+0x2e>
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	f0 dd       	rcall	.-1056   	; 0x18a4 <prvUnlockQueue>
    1cc4:	ef d7       	rcall	.+4062   	; 0x2ca4 <xTaskResumeAll>
    1cc6:	c8 01       	movw	r24, r16
    1cc8:	59 dd       	rcall	.-1358   	; 0x177c <prvIsQueueEmpty>
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <xQueueReceive+0xfe>
    1cce:	98 cf       	rjmp	.-208    	; 0x1c00 <xQueueReceive+0x2e>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	29 96       	adiw	r28, 0x09	; 9
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <xQueueSemaphoreTake>:
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	29 97       	sbiw	r28, 0x09	; 9
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	8c 01       	movw	r16, r24
    1d0e:	4e 83       	std	Y+6, r20	; 0x06
    1d10:	5f 83       	std	Y+7, r21	; 0x07
    1d12:	68 87       	std	Y+8, r22	; 0x08
    1d14:	79 87       	std	Y+9, r23	; 0x09
    1d16:	e1 2c       	mov	r14, r1
    1d18:	f1 2c       	mov	r15, r1
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	f8 01       	movw	r30, r16
    1d22:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d24:	88 23       	and	r24, r24
    1d26:	c9 f0       	breq	.+50     	; 0x1d5a <xQueueSemaphoreTake+0x6a>
    1d28:	81 50       	subi	r24, 0x01	; 1
    1d2a:	86 8f       	std	Z+30, r24	; 0x1e
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	89 2b       	or	r24, r25
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <xQueueSemaphoreTake+0x4e>
    1d34:	0e 94 16 1c 	call	0x382c	; 0x382c <pvTaskIncrementMutexHeldCount>
    1d38:	f8 01       	movw	r30, r16
    1d3a:	95 83       	std	Z+5, r25	; 0x05
    1d3c:	84 83       	std	Z+4, r24	; 0x04
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 85       	ldd	r24, Z+8	; 0x08
    1d42:	88 23       	and	r24, r24
    1d44:	31 f0       	breq	.+12     	; 0x1d52 <xQueueSemaphoreTake+0x62>
    1d46:	c8 01       	movw	r24, r16
    1d48:	08 96       	adiw	r24, 0x08	; 8
    1d4a:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskRemoveFromEventList>
    1d4e:	81 11       	cpse	r24, r1
    1d50:	3d dc       	rcall	.-1926   	; 0x15cc <vPortYield>
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	6f c0       	rjmp	.+222    	; 0x1e38 <xQueueSemaphoreTake+0x148>
    1d5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5e:	a8 85       	ldd	r26, Y+8	; 0x08
    1d60:	b9 85       	ldd	r27, Y+9	; 0x09
    1d62:	89 2b       	or	r24, r25
    1d64:	8a 2b       	or	r24, r26
    1d66:	8b 2b       	or	r24, r27
    1d68:	21 f4       	brne	.+8      	; 0x1d72 <xQueueSemaphoreTake+0x82>
    1d6a:	0f 90       	pop	r0
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	63 c0       	rjmp	.+198    	; 0x1e38 <xQueueSemaphoreTake+0x148>
    1d72:	f1 10       	cpse	r15, r1
    1d74:	06 c0       	rjmp	.+12     	; 0x1d82 <xQueueSemaphoreTake+0x92>
    1d76:	ce 01       	movw	r24, r28
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	0e 94 15 1a 	call	0x342a	; 0x342a <vTaskInternalSetTimeOutState>
    1d7e:	ff 24       	eor	r15, r15
    1d80:	f3 94       	inc	r15
    1d82:	0f 90       	pop	r0
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	4e d6       	rcall	.+3228   	; 0x2a24 <vTaskSuspendAll>
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	0f 92       	push	r0
    1d8e:	f8 01       	movw	r30, r16
    1d90:	81 a1       	ldd	r24, Z+33	; 0x21
    1d92:	8f 3f       	cpi	r24, 0xFF	; 255
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <xQueueSemaphoreTake+0xa8>
    1d96:	11 a2       	std	Z+33, r1	; 0x21
    1d98:	f8 01       	movw	r30, r16
    1d9a:	82 a1       	ldd	r24, Z+34	; 0x22
    1d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <xQueueSemaphoreTake+0xb2>
    1da0:	12 a2       	std	Z+34, r1	; 0x22
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	be 01       	movw	r22, r28
    1da8:	6a 5f       	subi	r22, 0xFA	; 250
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	ce 01       	movw	r24, r28
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	0e 94 26 1a 	call	0x344c	; 0x344c <xTaskCheckForTimeOut>
    1db4:	81 11       	cpse	r24, r1
    1db6:	26 c0       	rjmp	.+76     	; 0x1e04 <xQueueSemaphoreTake+0x114>
    1db8:	c8 01       	movw	r24, r16
    1dba:	e0 dc       	rcall	.-1600   	; 0x177c <prvIsQueueEmpty>
    1dbc:	88 23       	and	r24, r24
    1dbe:	f1 f0       	breq	.+60     	; 0x1dfc <xQueueSemaphoreTake+0x10c>
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	89 2b       	or	r24, r25
    1dc8:	51 f4       	brne	.+20     	; 0x1dde <xQueueSemaphoreTake+0xee>
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	0f 92       	push	r0
    1dd0:	84 81       	ldd	r24, Z+4	; 0x04
    1dd2:	95 81       	ldd	r25, Z+5	; 0x05
    1dd4:	0e 94 a3 1a 	call	0x3546	; 0x3546 <xTaskPriorityInherit>
    1dd8:	e8 2e       	mov	r14, r24
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	4e 81       	ldd	r20, Y+6	; 0x06
    1de0:	5f 81       	ldd	r21, Y+7	; 0x07
    1de2:	68 85       	ldd	r22, Y+8	; 0x08
    1de4:	79 85       	ldd	r23, Y+9	; 0x09
    1de6:	c8 01       	movw	r24, r16
    1de8:	43 96       	adiw	r24, 0x13	; 19
    1dea:	0e 94 13 18 	call	0x3026	; 0x3026 <vTaskPlaceOnEventList>
    1dee:	c8 01       	movw	r24, r16
    1df0:	59 dd       	rcall	.-1358   	; 0x18a4 <prvUnlockQueue>
    1df2:	58 d7       	rcall	.+3760   	; 0x2ca4 <xTaskResumeAll>
    1df4:	81 11       	cpse	r24, r1
    1df6:	91 cf       	rjmp	.-222    	; 0x1d1a <xQueueSemaphoreTake+0x2a>
    1df8:	e9 db       	rcall	.-2094   	; 0x15cc <vPortYield>
    1dfa:	8f cf       	rjmp	.-226    	; 0x1d1a <xQueueSemaphoreTake+0x2a>
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	52 dd       	rcall	.-1372   	; 0x18a4 <prvUnlockQueue>
    1e00:	51 d7       	rcall	.+3746   	; 0x2ca4 <xTaskResumeAll>
    1e02:	8b cf       	rjmp	.-234    	; 0x1d1a <xQueueSemaphoreTake+0x2a>
    1e04:	c8 01       	movw	r24, r16
    1e06:	4e dd       	rcall	.-1380   	; 0x18a4 <prvUnlockQueue>
    1e08:	4d d7       	rcall	.+3738   	; 0x2ca4 <xTaskResumeAll>
    1e0a:	c8 01       	movw	r24, r16
    1e0c:	b7 dc       	rcall	.-1682   	; 0x177c <prvIsQueueEmpty>
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <xQueueSemaphoreTake+0x124>
    1e12:	83 cf       	rjmp	.-250    	; 0x1d1a <xQueueSemaphoreTake+0x2a>
    1e14:	ee 20       	and	r14, r14
    1e16:	79 f0       	breq	.+30     	; 0x1e36 <xQueueSemaphoreTake+0x146>
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	0f 92       	push	r0
    1e1e:	c8 01       	movw	r24, r16
    1e20:	9d dc       	rcall	.-1734   	; 0x175c <prvGetDisinheritPriorityAfterTimeout>
    1e22:	68 2f       	mov	r22, r24
    1e24:	f8 01       	movw	r30, r16
    1e26:	84 81       	ldd	r24, Z+4	; 0x04
    1e28:	95 81       	ldd	r25, Z+5	; 0x05
    1e2a:	0e 94 85 1b 	call	0x370a	; 0x370a <vTaskPriorityDisinheritAfterTimeout>
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <xQueueSemaphoreTake+0x148>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	29 96       	adiw	r28, 0x09	; 9
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	08 95       	ret

00001e52 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	0f 92       	push	r0
    1e5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e60:	8f 3f       	cpi	r24, 0xFF	; 255
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <vQueueWaitForMessageRestricted+0x14>
    1e64:	19 a2       	std	Y+33, r1	; 0x21
    1e66:	8a a1       	ldd	r24, Y+34	; 0x22
    1e68:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <vQueueWaitForMessageRestricted+0x1c>
    1e6c:	1a a2       	std	Y+34, r1	; 0x22
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1e72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e74:	81 11       	cpse	r24, r1
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1e78:	ce 01       	movw	r24, r28
    1e7a:	43 96       	adiw	r24, 0x13	; 19
    1e7c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1e80:	ce 01       	movw	r24, r28
    1e82:	10 dd       	rcall	.-1504   	; 0x18a4 <prvUnlockQueue>
    }
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	44 81       	ldd	r20, Z+4	; 0x04
    1e8e:	55 81       	ldd	r21, Z+5	; 0x05
    1e90:	22 81       	ldd	r18, Z+2	; 0x02
    1e92:	33 81       	ldd	r19, Z+3	; 0x03
    1e94:	24 0f       	add	r18, r20
    1e96:	35 1f       	adc	r19, r21
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	b9 01       	movw	r22, r18
    1e9e:	68 1b       	sub	r22, r24
    1ea0:	79 0b       	sbc	r23, r25
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	64 17       	cp	r22, r20
    1ea6:	75 07       	cpc	r23, r21
    1ea8:	10 f0       	brcs	.+4      	; 0x1eae <prvBytesInBuffer+0x24>
    1eaa:	84 1b       	sub	r24, r20
    1eac:	95 0b       	sbc	r25, r21
    1eae:	08 95       	ret

00001eb0 <prvInitialiseNewStreamBuffer>:
    1eb0:	0f 93       	push	r16
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	8f e0       	ldi	r24, 0x0F	; 15
    1eb6:	df 01       	movw	r26, r30
    1eb8:	1d 92       	st	X+, r1
    1eba:	8a 95       	dec	r24
    1ebc:	e9 f7       	brne	.-6      	; 0x1eb8 <prvInitialiseNewStreamBuffer+0x8>
    1ebe:	75 87       	std	Z+13, r23	; 0x0d
    1ec0:	64 87       	std	Z+12, r22	; 0x0c
    1ec2:	55 83       	std	Z+5, r21	; 0x05
    1ec4:	44 83       	std	Z+4, r20	; 0x04
    1ec6:	37 83       	std	Z+7, r19	; 0x07
    1ec8:	26 83       	std	Z+6, r18	; 0x06
    1eca:	06 87       	std	Z+14, r16	; 0x0e
    1ecc:	0f 91       	pop	r16
    1ece:	08 95       	ret

00001ed0 <prvWriteBytesToBuffer>:
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	cf 92       	push	r12
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	6c 01       	movw	r12, r24
    1ee6:	5b 01       	movw	r10, r22
    1ee8:	7a 01       	movw	r14, r20
    1eea:	fc 01       	movw	r30, r24
    1eec:	c2 81       	ldd	r28, Z+2	; 0x02
    1eee:	d3 81       	ldd	r29, Z+3	; 0x03
    1ef0:	04 81       	ldd	r16, Z+4	; 0x04
    1ef2:	15 81       	ldd	r17, Z+5	; 0x05
    1ef4:	0c 1b       	sub	r16, r28
    1ef6:	1d 0b       	sbc	r17, r29
    1ef8:	40 17       	cp	r20, r16
    1efa:	51 07       	cpc	r21, r17
    1efc:	08 f4       	brcc	.+2      	; 0x1f00 <prvWriteBytesToBuffer+0x30>
    1efe:	8a 01       	movw	r16, r20
    1f00:	f6 01       	movw	r30, r12
    1f02:	84 85       	ldd	r24, Z+12	; 0x0c
    1f04:	95 85       	ldd	r25, Z+13	; 0x0d
    1f06:	a8 01       	movw	r20, r16
    1f08:	b5 01       	movw	r22, r10
    1f0a:	8c 0f       	add	r24, r28
    1f0c:	9d 1f       	adc	r25, r29
    1f0e:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <memcpy>
    1f12:	0e 15       	cp	r16, r14
    1f14:	1f 05       	cpc	r17, r15
    1f16:	58 f4       	brcc	.+22     	; 0x1f2e <prvWriteBytesToBuffer+0x5e>
    1f18:	a7 01       	movw	r20, r14
    1f1a:	40 1b       	sub	r20, r16
    1f1c:	51 0b       	sbc	r21, r17
    1f1e:	b5 01       	movw	r22, r10
    1f20:	60 0f       	add	r22, r16
    1f22:	71 1f       	adc	r23, r17
    1f24:	f6 01       	movw	r30, r12
    1f26:	84 85       	ldd	r24, Z+12	; 0x0c
    1f28:	95 85       	ldd	r25, Z+13	; 0x0d
    1f2a:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <memcpy>
    1f2e:	ce 01       	movw	r24, r28
    1f30:	8e 0d       	add	r24, r14
    1f32:	9f 1d       	adc	r25, r15
    1f34:	f6 01       	movw	r30, r12
    1f36:	24 81       	ldd	r18, Z+4	; 0x04
    1f38:	35 81       	ldd	r19, Z+5	; 0x05
    1f3a:	82 17       	cp	r24, r18
    1f3c:	93 07       	cpc	r25, r19
    1f3e:	10 f0       	brcs	.+4      	; 0x1f44 <prvWriteBytesToBuffer+0x74>
    1f40:	82 1b       	sub	r24, r18
    1f42:	93 0b       	sbc	r25, r19
    1f44:	f6 01       	movw	r30, r12
    1f46:	93 83       	std	Z+3, r25	; 0x03
    1f48:	82 83       	std	Z+2, r24	; 0x02
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	bf 90       	pop	r11
    1f5e:	af 90       	pop	r10
    1f60:	08 95       	ret

00001f62 <prvWriteMessageToBuffer>:
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	1f 92       	push	r1
    1f74:	1f 92       	push	r1
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	7c 01       	movw	r14, r24
    1f7c:	6b 01       	movw	r12, r22
    1f7e:	5a 83       	std	Y+2, r21	; 0x02
    1f80:	49 83       	std	Y+1, r20	; 0x01
    1f82:	21 15       	cp	r18, r1
    1f84:	31 05       	cpc	r19, r1
    1f86:	c1 f0       	breq	.+48     	; 0x1fb8 <prvWriteMessageToBuffer+0x56>
    1f88:	fc 01       	movw	r30, r24
    1f8a:	86 85       	ldd	r24, Z+14	; 0x0e
    1f8c:	80 fd       	sbrc	r24, 0
    1f8e:	08 c0       	rjmp	.+16     	; 0x1fa0 <prvWriteMessageToBuffer+0x3e>
    1f90:	42 17       	cp	r20, r18
    1f92:	53 07       	cpc	r21, r19
    1f94:	08 f4       	brcc	.+2      	; 0x1f98 <prvWriteMessageToBuffer+0x36>
    1f96:	9a 01       	movw	r18, r20
    1f98:	3a 83       	std	Y+2, r19	; 0x02
    1f9a:	29 83       	std	Y+1, r18	; 0x01
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <prvWriteMessageToBuffer+0x5c>
    1fa0:	20 17       	cp	r18, r16
    1fa2:	31 07       	cpc	r19, r17
    1fa4:	58 f0       	brcs	.+22     	; 0x1fbc <prvWriteMessageToBuffer+0x5a>
    1fa6:	42 e0       	ldi	r20, 0x02	; 2
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	be 01       	movw	r22, r28
    1fac:	6f 5f       	subi	r22, 0xFF	; 255
    1fae:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb0:	c7 01       	movw	r24, r14
    1fb2:	8e df       	rcall	.-228    	; 0x1ed0 <prvWriteBytesToBuffer>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <prvWriteMessageToBuffer+0x5c>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <prvWriteMessageToBuffer+0x5c>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	88 23       	and	r24, r24
    1fc0:	31 f0       	breq	.+12     	; 0x1fce <prvWriteMessageToBuffer+0x6c>
    1fc2:	49 81       	ldd	r20, Y+1	; 0x01
    1fc4:	5a 81       	ldd	r21, Y+2	; 0x02
    1fc6:	b6 01       	movw	r22, r12
    1fc8:	c7 01       	movw	r24, r14
    1fca:	82 df       	rcall	.-252    	; 0x1ed0 <prvWriteBytesToBuffer>
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <prvWriteMessageToBuffer+0x70>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	1f 91       	pop	r17
    1fdc:	0f 91       	pop	r16
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    1fe6:	08 95       	ret

00001fe8 <prvReadBytesFromBuffer>:
    1fe8:	af 92       	push	r10
    1fea:	bf 92       	push	r11
    1fec:	cf 92       	push	r12
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	7c 01       	movw	r14, r24
    1ffe:	5b 01       	movw	r10, r22
    2000:	e9 01       	movw	r28, r18
    2002:	42 17       	cp	r20, r18
    2004:	53 07       	cpc	r21, r19
    2006:	08 f4       	brcc	.+2      	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    2008:	ea 01       	movw	r28, r20
    200a:	20 97       	sbiw	r28, 0x00	; 0
    200c:	81 f1       	breq	.+96     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    200e:	f7 01       	movw	r30, r14
    2010:	00 81       	ld	r16, Z
    2012:	11 81       	ldd	r17, Z+1	; 0x01
    2014:	84 81       	ldd	r24, Z+4	; 0x04
    2016:	95 81       	ldd	r25, Z+5	; 0x05
    2018:	80 1b       	sub	r24, r16
    201a:	91 0b       	sbc	r25, r17
    201c:	6e 01       	movw	r12, r28
    201e:	8c 17       	cp	r24, r28
    2020:	9d 07       	cpc	r25, r29
    2022:	08 f4       	brcc	.+2      	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    2024:	6c 01       	movw	r12, r24
    2026:	f7 01       	movw	r30, r14
    2028:	64 85       	ldd	r22, Z+12	; 0x0c
    202a:	75 85       	ldd	r23, Z+13	; 0x0d
    202c:	60 0f       	add	r22, r16
    202e:	71 1f       	adc	r23, r17
    2030:	a6 01       	movw	r20, r12
    2032:	c5 01       	movw	r24, r10
    2034:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <memcpy>
    2038:	cc 16       	cp	r12, r28
    203a:	dd 06       	cpc	r13, r29
    203c:	58 f4       	brcc	.+22     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    203e:	ae 01       	movw	r20, r28
    2040:	4c 19       	sub	r20, r12
    2042:	5d 09       	sbc	r21, r13
    2044:	f7 01       	movw	r30, r14
    2046:	64 85       	ldd	r22, Z+12	; 0x0c
    2048:	75 85       	ldd	r23, Z+13	; 0x0d
    204a:	c5 01       	movw	r24, r10
    204c:	8c 0d       	add	r24, r12
    204e:	9d 1d       	adc	r25, r13
    2050:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <memcpy>
    2054:	0c 0f       	add	r16, r28
    2056:	1d 1f       	adc	r17, r29
    2058:	f7 01       	movw	r30, r14
    205a:	84 81       	ldd	r24, Z+4	; 0x04
    205c:	95 81       	ldd	r25, Z+5	; 0x05
    205e:	08 17       	cp	r16, r24
    2060:	19 07       	cpc	r17, r25
    2062:	10 f0       	brcs	.+4      	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    2064:	08 1b       	sub	r16, r24
    2066:	19 0b       	sbc	r17, r25
    2068:	f7 01       	movw	r30, r14
    206a:	11 83       	std	Z+1, r17	; 0x01
    206c:	00 83       	st	Z, r16
    206e:	ce 01       	movw	r24, r28
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	08 95       	ret

00002086 <prvReadMessageFromBuffer>:
    2086:	6f 92       	push	r6
    2088:	7f 92       	push	r7
    208a:	8f 92       	push	r8
    208c:	9f 92       	push	r9
    208e:	af 92       	push	r10
    2090:	bf 92       	push	r11
    2092:	cf 92       	push	r12
    2094:	df 92       	push	r13
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	1f 92       	push	r1
    20a4:	1f 92       	push	r1
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	6c 01       	movw	r12, r24
    20ac:	4b 01       	movw	r8, r22
    20ae:	5a 01       	movw	r10, r20
    20b0:	79 01       	movw	r14, r18
    20b2:	01 15       	cp	r16, r1
    20b4:	11 05       	cpc	r17, r1
    20b6:	b1 f0       	breq	.+44     	; 0x20e4 <prvReadMessageFromBuffer+0x5e>
    20b8:	fc 01       	movw	r30, r24
    20ba:	60 80       	ld	r6, Z
    20bc:	71 80       	ldd	r7, Z+1	; 0x01
    20be:	a8 01       	movw	r20, r16
    20c0:	be 01       	movw	r22, r28
    20c2:	6f 5f       	subi	r22, 0xFF	; 255
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	90 df       	rcall	.-224    	; 0x1fe8 <prvReadBytesFromBuffer>
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	e0 1a       	sub	r14, r16
    20ce:	f1 0a       	sbc	r15, r17
    20d0:	a8 16       	cp	r10, r24
    20d2:	b9 06       	cpc	r11, r25
    20d4:	30 f4       	brcc	.+12     	; 0x20e2 <prvReadMessageFromBuffer+0x5c>
    20d6:	f6 01       	movw	r30, r12
    20d8:	71 82       	std	Z+1, r7	; 0x01
    20da:	60 82       	st	Z, r6
    20dc:	a1 2c       	mov	r10, r1
    20de:	b1 2c       	mov	r11, r1
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <prvReadMessageFromBuffer+0x5e>
    20e2:	5c 01       	movw	r10, r24
    20e4:	97 01       	movw	r18, r14
    20e6:	a5 01       	movw	r20, r10
    20e8:	b4 01       	movw	r22, r8
    20ea:	c6 01       	movw	r24, r12
    20ec:	7d df       	rcall	.-262    	; 0x1fe8 <prvReadBytesFromBuffer>
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	9f 90       	pop	r9
    2108:	8f 90       	pop	r8
    210a:	7f 90       	pop	r7
    210c:	6f 90       	pop	r6
    210e:	08 95       	ret

00002110 <xStreamBufferGenericCreate>:
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	ec 01       	movw	r28, r24
    2120:	6b 01       	movw	r12, r22
    2122:	41 30       	cpi	r20, 0x01	; 1
    2124:	11 f4       	brne	.+4      	; 0x212a <xStreamBufferGenericCreate+0x1a>
    2126:	01 e0       	ldi	r16, 0x01	; 1
    2128:	01 c0       	rjmp	.+2      	; 0x212c <xStreamBufferGenericCreate+0x1c>
    212a:	00 e0       	ldi	r16, 0x00	; 0
    212c:	c1 14       	cp	r12, r1
    212e:	d1 04       	cpc	r13, r1
    2130:	19 f4       	brne	.+6      	; 0x2138 <xStreamBufferGenericCreate+0x28>
    2132:	cc 24       	eor	r12, r12
    2134:	c3 94       	inc	r12
    2136:	d1 2c       	mov	r13, r1
    2138:	ce 01       	movw	r24, r28
    213a:	40 96       	adiw	r24, 0x10	; 16
    213c:	c8 17       	cp	r28, r24
    213e:	d9 07       	cpc	r29, r25
    2140:	20 f4       	brcc	.+8      	; 0x214a <xStreamBufferGenericCreate+0x3a>
    2142:	21 96       	adiw	r28, 0x01	; 1
    2144:	8f d8       	rcall	.-3810   	; 0x1264 <pvPortMalloc>
    2146:	7c 01       	movw	r14, r24
    2148:	02 c0       	rjmp	.+4      	; 0x214e <xStreamBufferGenericCreate+0x3e>
    214a:	e1 2c       	mov	r14, r1
    214c:	f1 2c       	mov	r15, r1
    214e:	e1 14       	cp	r14, r1
    2150:	f1 04       	cpc	r15, r1
    2152:	39 f0       	breq	.+14     	; 0x2162 <xStreamBufferGenericCreate+0x52>
    2154:	96 01       	movw	r18, r12
    2156:	ae 01       	movw	r20, r28
    2158:	b7 01       	movw	r22, r14
    215a:	61 5f       	subi	r22, 0xF1	; 241
    215c:	7f 4f       	sbci	r23, 0xFF	; 255
    215e:	c7 01       	movw	r24, r14
    2160:	a7 de       	rcall	.-690    	; 0x1eb0 <prvInitialiseNewStreamBuffer>
    2162:	c7 01       	movw	r24, r14
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	df 90       	pop	r13
    2170:	cf 90       	pop	r12
    2172:	08 95       	ret

00002174 <xStreamBufferReset>:
    2174:	0f 93       	push	r16
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	0f 92       	push	r0
    217c:	fc 01       	movw	r30, r24
    217e:	20 85       	ldd	r18, Z+8	; 0x08
    2180:	31 85       	ldd	r19, Z+9	; 0x09
    2182:	23 2b       	or	r18, r19
    2184:	71 f4       	brne	.+28     	; 0x21a2 <xStreamBufferReset+0x2e>
    2186:	22 85       	ldd	r18, Z+10	; 0x0a
    2188:	33 85       	ldd	r19, Z+11	; 0x0b
    218a:	23 2b       	or	r18, r19
    218c:	61 f4       	brne	.+24     	; 0x21a6 <xStreamBufferReset+0x32>
    218e:	26 81       	ldd	r18, Z+6	; 0x06
    2190:	37 81       	ldd	r19, Z+7	; 0x07
    2192:	44 81       	ldd	r20, Z+4	; 0x04
    2194:	55 81       	ldd	r21, Z+5	; 0x05
    2196:	64 85       	ldd	r22, Z+12	; 0x0c
    2198:	75 85       	ldd	r23, Z+13	; 0x0d
    219a:	06 85       	ldd	r16, Z+14	; 0x0e
    219c:	89 de       	rcall	.-750    	; 0x1eb0 <prvInitialiseNewStreamBuffer>
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <xStreamBufferReset+0x34>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <xStreamBufferReset+0x34>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	0f 90       	pop	r0
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	0f 91       	pop	r16
    21ae:	08 95       	ret

000021b0 <xStreamBufferSpacesAvailable>:
    21b0:	fc 01       	movw	r30, r24
    21b2:	24 81       	ldd	r18, Z+4	; 0x04
    21b4:	35 81       	ldd	r19, Z+5	; 0x05
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	82 0f       	add	r24, r18
    21bc:	93 1f       	adc	r25, r19
    21be:	42 81       	ldd	r20, Z+2	; 0x02
    21c0:	53 81       	ldd	r21, Z+3	; 0x03
    21c2:	84 1b       	sub	r24, r20
    21c4:	95 0b       	sbc	r25, r21
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	82 17       	cp	r24, r18
    21ca:	93 07       	cpc	r25, r19
    21cc:	10 f0       	brcs	.+4      	; 0x21d2 <xStreamBufferSpacesAvailable+0x22>
    21ce:	82 1b       	sub	r24, r18
    21d0:	93 0b       	sbc	r25, r19
    21d2:	08 95       	ret

000021d4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    21d4:	2f 92       	push	r2
    21d6:	3f 92       	push	r3
    21d8:	4f 92       	push	r4
    21da:	5f 92       	push	r5
    21dc:	6f 92       	push	r6
    21de:	7f 92       	push	r7
    21e0:	8f 92       	push	r8
    21e2:	9f 92       	push	r9
    21e4:	af 92       	push	r10
    21e6:	bf 92       	push	r11
    21e8:	cf 92       	push	r12
    21ea:	df 92       	push	r13
    21ec:	ef 92       	push	r14
    21ee:	ff 92       	push	r15
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	2b 97       	sbiw	r28, 0x0b	; 11
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	4c 01       	movw	r8, r24
    220a:	7b 87       	std	Y+11, r23	; 0x0b
    220c:	6a 87       	std	Y+10, r22	; 0x0a
    220e:	1a 01       	movw	r2, r20
    2210:	0e 83       	std	Y+6, r16	; 0x06
    2212:	1f 83       	std	Y+7, r17	; 0x07
    2214:	28 87       	std	Y+8, r18	; 0x08
    2216:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2218:	fc 01       	movw	r30, r24
    221a:	84 81       	ldd	r24, Z+4	; 0x04
    221c:	95 81       	ldd	r25, Z+5	; 0x05
    221e:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2220:	26 85       	ldd	r18, Z+14	; 0x0e
    2222:	20 ff       	sbrs	r18, 0
    2224:	0c c0       	rjmp	.+24     	; 0x223e <__stack+0x3f>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2226:	2a 01       	movw	r4, r20
    2228:	f2 e0       	ldi	r31, 0x02	; 2
    222a:	4f 0e       	add	r4, r31
    222c:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    222e:	84 15       	cp	r24, r4
    2230:	95 05       	cpc	r25, r5
    2232:	58 f4       	brcc	.+22     	; 0x224a <__stack+0x4b>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    2234:	1e 82       	std	Y+6, r1	; 0x06
    2236:	1f 82       	std	Y+7, r1	; 0x07
    2238:	18 86       	std	Y+8, r1	; 0x08
    223a:	19 86       	std	Y+9, r1	; 0x09
    223c:	06 c0       	rjmp	.+12     	; 0x224a <__stack+0x4b>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    223e:	84 17       	cp	r24, r20
    2240:	95 07       	cpc	r25, r21
    2242:	10 f0       	brcs	.+4      	; 0x2248 <__stack+0x49>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    2244:	2a 01       	movw	r4, r20
    2246:	01 c0       	rjmp	.+2      	; 0x224a <__stack+0x4b>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    2248:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	9f 81       	ldd	r25, Y+7	; 0x07
    224e:	a8 85       	ldd	r26, Y+8	; 0x08
    2250:	b9 85       	ldd	r27, Y+9	; 0x09
    2252:	89 2b       	or	r24, r25
    2254:	8a 2b       	or	r24, r26
    2256:	8b 2b       	or	r24, r27
    2258:	09 f4       	brne	.+2      	; 0x225c <__stack+0x5d>
    225a:	38 c0       	rjmp	.+112    	; 0x22cc <__stack+0xcd>
    {
        vTaskSetTimeOutState( &xTimeOut );
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	0e 94 ff 19 	call	0x33fe	; 0x33fe <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    226a:	c4 01       	movw	r24, r8
    226c:	a1 df       	rcall	.-190    	; 0x21b0 <xStreamBufferSpacesAvailable>
    226e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    2270:	84 15       	cp	r24, r4
    2272:	95 05       	cpc	r25, r5
    2274:	40 f5       	brcc	.+80     	; 0x22c6 <__stack+0xc7>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2280:	0e 94 90 1a 	call	0x3520	; 0x3520 <xTaskGetCurrentTaskHandle>
    2284:	f4 01       	movw	r30, r8
    2286:	93 87       	std	Z+11, r25	; 0x0b
    2288:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    228a:	0f 90       	pop	r0
    228c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    228e:	ae 80       	ldd	r10, Y+6	; 0x06
    2290:	bf 80       	ldd	r11, Y+7	; 0x07
    2292:	c8 84       	ldd	r12, Y+8	; 0x08
    2294:	d9 84       	ldd	r13, Y+9	; 0x09
    2296:	e1 2c       	mov	r14, r1
    2298:	f1 2c       	mov	r15, r1
    229a:	00 e0       	ldi	r16, 0x00	; 0
    229c:	10 e0       	ldi	r17, 0x00	; 0
    229e:	98 01       	movw	r18, r16
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	ba 01       	movw	r22, r20
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	0e 94 28 1c 	call	0x3850	; 0x3850 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    22ac:	f4 01       	movw	r30, r8
    22ae:	13 86       	std	Z+11, r1	; 0x0b
    22b0:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    22b2:	be 01       	movw	r22, r28
    22b4:	6a 5f       	subi	r22, 0xFA	; 250
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	ce 01       	movw	r24, r28
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	0e 94 26 1a 	call	0x344c	; 0x344c <xTaskCheckForTimeOut>
    22c0:	88 23       	and	r24, r24
    22c2:	81 f2       	breq	.-96     	; 0x2264 <__stack+0x65>
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <__stack+0xd1>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
                    break;
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <__stack+0xd1>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    22cc:	61 2c       	mov	r6, r1
    22ce:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    22d0:	61 14       	cp	r6, r1
    22d2:	71 04       	cpc	r7, r1
    22d4:	19 f4       	brne	.+6      	; 0x22dc <__stack+0xdd>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    22d6:	c4 01       	movw	r24, r8
    22d8:	6b df       	rcall	.-298    	; 0x21b0 <xStreamBufferSpacesAvailable>
    22da:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    22dc:	82 01       	movw	r16, r4
    22de:	93 01       	movw	r18, r6
    22e0:	a1 01       	movw	r20, r2
    22e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    22e4:	7b 85       	ldd	r23, Y+11	; 0x0b
    22e6:	c4 01       	movw	r24, r8
    22e8:	3c de       	rcall	.-904    	; 0x1f62 <prvWriteMessageToBuffer>
    22ea:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    22ec:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    22ee:	e9 f0       	breq	.+58     	; 0x232a <__stack+0x12b>
    22f0:	c4 01       	movw	r24, r8
    22f2:	cb dd       	rcall	.-1130   	; 0x1e8a <prvBytesInBuffer>
    22f4:	f4 01       	movw	r30, r8
    22f6:	26 81       	ldd	r18, Z+6	; 0x06
    22f8:	37 81       	ldd	r19, Z+7	; 0x07
    22fa:	82 17       	cp	r24, r18
    22fc:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    22fe:	a8 f0       	brcs	.+42     	; 0x232a <__stack+0x12b>
    2300:	91 d3       	rcall	.+1826   	; 0x2a24 <vTaskSuspendAll>
    2302:	f4 01       	movw	r30, r8
    2304:	80 85       	ldd	r24, Z+8	; 0x08
    2306:	91 85       	ldd	r25, Z+9	; 0x09
    2308:	89 2b       	or	r24, r25
    230a:	71 f0       	breq	.+28     	; 0x2328 <__stack+0x129>
    230c:	80 85       	ldd	r24, Z+8	; 0x08
    230e:	91 85       	ldd	r25, Z+9	; 0x09
    2310:	e1 2c       	mov	r14, r1
    2312:	f1 2c       	mov	r15, r1
    2314:	00 e0       	ldi	r16, 0x00	; 0
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <xTaskGenericNotify>
    2322:	f4 01       	movw	r30, r8
    2324:	11 86       	std	Z+9, r1	; 0x09
    2326:	10 86       	std	Z+8, r1	; 0x08
    2328:	bd d4       	rcall	.+2426   	; 0x2ca4 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    232a:	c6 01       	movw	r24, r12
    232c:	2b 96       	adiw	r28, 0x0b	; 11
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	ff 90       	pop	r15
    2342:	ef 90       	pop	r14
    2344:	df 90       	pop	r13
    2346:	cf 90       	pop	r12
    2348:	bf 90       	pop	r11
    234a:	af 90       	pop	r10
    234c:	9f 90       	pop	r9
    234e:	8f 90       	pop	r8
    2350:	7f 90       	pop	r7
    2352:	6f 90       	pop	r6
    2354:	5f 90       	pop	r5
    2356:	4f 90       	pop	r4
    2358:	3f 90       	pop	r3
    235a:	2f 90       	pop	r2
    235c:	08 95       	ret

0000235e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
    2374:	7b 01       	movw	r14, r22
    2376:	5a 01       	movw	r10, r20
    2378:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    237a:	8e 85       	ldd	r24, Y+14	; 0x0e
    237c:	80 ff       	sbrs	r24, 0
    237e:	04 c0       	rjmp	.+8      	; 0x2388 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2380:	8a 01       	movw	r16, r20
    2382:	0e 5f       	subi	r16, 0xFE	; 254
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	01 c0       	rjmp	.+2      	; 0x238a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    2388:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    238a:	ce 01       	movw	r24, r28
    238c:	11 df       	rcall	.-478    	; 0x21b0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    238e:	9c 01       	movw	r18, r24
    2390:	a5 01       	movw	r20, r10
    2392:	b7 01       	movw	r22, r14
    2394:	ce 01       	movw	r24, r28
    2396:	e5 dd       	rcall	.-1078   	; 0x1f62 <prvWriteMessageToBuffer>
    2398:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    239a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    239c:	c1 f0       	breq	.+48     	; 0x23ce <xStreamBufferSendFromISR+0x70>
    239e:	ce 01       	movw	r24, r28
    23a0:	74 dd       	rcall	.-1304   	; 0x1e8a <prvBytesInBuffer>
    23a2:	2e 81       	ldd	r18, Y+6	; 0x06
    23a4:	3f 81       	ldd	r19, Y+7	; 0x07
    23a6:	82 17       	cp	r24, r18
    23a8:	93 07       	cpc	r25, r19
    23aa:	88 f0       	brcs	.+34     	; 0x23ce <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    23ac:	88 85       	ldd	r24, Y+8	; 0x08
    23ae:	99 85       	ldd	r25, Y+9	; 0x09
    23b0:	89 2b       	or	r24, r25
    23b2:	69 f0       	breq	.+26     	; 0x23ce <xStreamBufferSendFromISR+0x70>
    23b4:	88 85       	ldd	r24, Y+8	; 0x08
    23b6:	99 85       	ldd	r25, Y+9	; 0x09
    23b8:	e1 2c       	mov	r14, r1
    23ba:	f1 2c       	mov	r15, r1
    23bc:	00 e0       	ldi	r16, 0x00	; 0
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	a9 01       	movw	r20, r18
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <xTaskGenericNotifyFromISR>
    23ca:	19 86       	std	Y+9, r1	; 0x09
    23cc:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    23ce:	c5 01       	movw	r24, r10
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	bf 90       	pop	r11
    23e2:	af 90       	pop	r10
    23e4:	08 95       	ret

000023e6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    23e6:	4f 92       	push	r4
    23e8:	5f 92       	push	r5
    23ea:	6f 92       	push	r6
    23ec:	7f 92       	push	r7
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	ec 01       	movw	r28, r24
    2408:	2b 01       	movw	r4, r22
    240a:	3a 01       	movw	r6, r20
    240c:	58 01       	movw	r10, r16
    240e:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2410:	8e 85       	ldd	r24, Y+14	; 0x0e
    2412:	80 ff       	sbrs	r24, 0
    2414:	05 c0       	rjmp	.+10     	; 0x2420 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2416:	68 94       	set
    2418:	88 24       	eor	r8, r8
    241a:	81 f8       	bld	r8, 1
    241c:	91 2c       	mov	r9, r1
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2420:	81 2c       	mov	r8, r1
    2422:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2424:	a1 14       	cp	r10, r1
    2426:	b1 04       	cpc	r11, r1
    2428:	c1 04       	cpc	r12, r1
    242a:	d1 04       	cpc	r13, r1
    242c:	41 f1       	breq	.+80     	; 0x247e <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2434:	ce 01       	movw	r24, r28
    2436:	29 dd       	rcall	.-1454   	; 0x1e8a <prvBytesInBuffer>
    2438:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    243a:	88 16       	cp	r8, r24
    243c:	99 06       	cpc	r9, r25
    243e:	48 f0       	brcs	.+18     	; 0x2452 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    244a:	0e 94 90 1a 	call	0x3520	; 0x3520 <xTaskGetCurrentTaskHandle>
    244e:	99 87       	std	Y+9, r25	; 0x09
    2450:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2452:	0f 90       	pop	r0
    2454:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2456:	8e 14       	cp	r8, r14
    2458:	9f 04       	cpc	r9, r15
    245a:	a0 f0       	brcs	.+40     	; 0x2484 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    245c:	e1 2c       	mov	r14, r1
    245e:	f1 2c       	mov	r15, r1
    2460:	00 e0       	ldi	r16, 0x00	; 0
    2462:	10 e0       	ldi	r17, 0x00	; 0
    2464:	98 01       	movw	r18, r16
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	50 e0       	ldi	r21, 0x00	; 0
    246a:	ba 01       	movw	r22, r20
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	0e 94 28 1c 	call	0x3850	; 0x3850 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2472:	19 86       	std	Y+9, r1	; 0x09
    2474:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2476:	ce 01       	movw	r24, r28
    2478:	08 dd       	rcall	.-1520   	; 0x1e8a <prvBytesInBuffer>
    247a:	7c 01       	movw	r14, r24
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    247e:	ce 01       	movw	r24, r28
    2480:	04 dd       	rcall	.-1528   	; 0x1e8a <prvBytesInBuffer>
    2482:	7c 01       	movw	r14, r24
    2484:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2486:	9f 04       	cpc	r9, r15
    2488:	e8 f4       	brcc	.+58     	; 0x24c4 <xStreamBufferReceive+0xde>
    248a:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    248c:	97 01       	movw	r18, r14
    248e:	a3 01       	movw	r20, r6
    2490:	b2 01       	movw	r22, r4
    2492:	ce 01       	movw	r24, r28
    2494:	f8 dd       	rcall	.-1040   	; 0x2086 <prvReadMessageFromBuffer>
    2496:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2498:	89 2b       	or	r24, r25
    249a:	b1 f0       	breq	.+44     	; 0x24c8 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    249c:	c3 d2       	rcall	.+1414   	; 0x2a24 <vTaskSuspendAll>
    249e:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a2:	89 2b       	or	r24, r25
    24a4:	69 f0       	breq	.+26     	; 0x24c0 <xStreamBufferReceive+0xda>
    24a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24aa:	e1 2c       	mov	r14, r1
    24ac:	f1 2c       	mov	r15, r1
    24ae:	00 e0       	ldi	r16, 0x00	; 0
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	a9 01       	movw	r20, r18
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <xTaskGenericNotify>
    24bc:	1b 86       	std	Y+11, r1	; 0x0b
    24be:	1a 86       	std	Y+10, r1	; 0x0a
    24c0:	f1 d3       	rcall	.+2018   	; 0x2ca4 <xTaskResumeAll>
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <xStreamBufferReceive+0xe2>
    24c4:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    24c6:	d1 2c       	mov	r13, r1
    24c8:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	7f 90       	pop	r7
    24e4:	6f 90       	pop	r6
    24e6:	5f 90       	pop	r5
    24e8:	4f 90       	pop	r4
    24ea:	08 95       	ret

000024ec <prvResetNextTaskUnblockTime>:
    24ec:	e0 91 e5 13 	lds	r30, 0x13E5	; 0x8013e5 <pxDelayedTaskList>
    24f0:	f0 91 e6 13 	lds	r31, 0x13E6	; 0x8013e6 <pxDelayedTaskList+0x1>
    24f4:	80 81       	ld	r24, Z
    24f6:	81 11       	cpse	r24, r1
    24f8:	0c c0       	rjmp	.+24     	; 0x2512 <prvResetNextTaskUnblockTime+0x26>
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	9f ef       	ldi	r25, 0xFF	; 255
    24fe:	dc 01       	movw	r26, r24
    2500:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xNextTaskUnblockTime>
    2504:	90 93 b0 13 	sts	0x13B0, r25	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    2508:	a0 93 b1 13 	sts	0x13B1, r26	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    250c:	b0 93 b2 13 	sts	0x13B2, r27	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    2510:	08 95       	ret
    2512:	e0 91 e5 13 	lds	r30, 0x13E5	; 0x8013e5 <pxDelayedTaskList>
    2516:	f0 91 e6 13 	lds	r31, 0x13E6	; 0x8013e6 <pxDelayedTaskList+0x1>
    251a:	07 80       	ldd	r0, Z+7	; 0x07
    251c:	f0 85       	ldd	r31, Z+8	; 0x08
    251e:	e0 2d       	mov	r30, r0
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	a2 81       	ldd	r26, Z+2	; 0x02
    2526:	b3 81       	ldd	r27, Z+3	; 0x03
    2528:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xNextTaskUnblockTime>
    252c:	90 93 b0 13 	sts	0x13B0, r25	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    2530:	a0 93 b1 13 	sts	0x13B1, r26	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    2534:	b0 93 b2 13 	sts	0x13B2, r27	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    2538:	08 95       	ret

0000253a <prvDeleteTCB>:
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	ec 01       	movw	r28, r24
    2540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2544:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vPortFree>
    2548:	ce 01       	movw	r24, r28
    254a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vPortFree>
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <prvInitialiseNewTask>:
    2554:	4f 92       	push	r4
    2556:	5f 92       	push	r5
    2558:	6f 92       	push	r6
    255a:	7f 92       	push	r7
    255c:	8f 92       	push	r8
    255e:	9f 92       	push	r9
    2560:	af 92       	push	r10
    2562:	bf 92       	push	r11
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	2c 01       	movw	r4, r24
    2574:	5b 01       	movw	r10, r22
    2576:	4a 01       	movw	r8, r20
    2578:	39 01       	movw	r6, r18
    257a:	e6 01       	movw	r28, r12
    257c:	65 ea       	ldi	r22, 0xA5	; 165
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2582:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2584:	0e 94 e5 37 	call	0x6fca	; 0x6fca <memset>
    2588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    258c:	21 e0       	ldi	r18, 0x01	; 1
    258e:	82 1a       	sub	r8, r18
    2590:	91 08       	sbc	r9, r1
    2592:	88 0e       	add	r8, r24
    2594:	99 1e       	adc	r9, r25
    2596:	a1 14       	cp	r10, r1
    2598:	b1 04       	cpc	r11, r1
    259a:	89 f4       	brne	.+34     	; 0x25be <prvInitialiseNewTask+0x6a>
    259c:	15 c0       	rjmp	.+42     	; 0x25c8 <prvInitialiseNewTask+0x74>
    259e:	82 2f       	mov	r24, r18
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	f5 01       	movw	r30, r10
    25a4:	e8 0f       	add	r30, r24
    25a6:	f9 1f       	adc	r31, r25
    25a8:	30 81       	ld	r19, Z
    25aa:	de 01       	movw	r26, r28
    25ac:	a8 0f       	add	r26, r24
    25ae:	b9 1f       	adc	r27, r25
    25b0:	5d 96       	adiw	r26, 0x1d	; 29
    25b2:	3c 93       	st	X, r19
    25b4:	80 81       	ld	r24, Z
    25b6:	88 23       	and	r24, r24
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <prvInitialiseNewTask+0x70>
    25ba:	2f 5f       	subi	r18, 0xFF	; 255
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <prvInitialiseNewTask+0x6c>
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	20 31       	cpi	r18, 0x10	; 16
    25c2:	68 f3       	brcs	.-38     	; 0x259e <prvInitialiseNewTask+0x4a>
    25c4:	1c a6       	std	Y+44, r1	; 0x2c
    25c6:	01 c0       	rjmp	.+2      	; 0x25ca <prvInitialiseNewTask+0x76>
    25c8:	1d 8e       	std	Y+29, r1	; 0x1d
    25ca:	0a 30       	cpi	r16, 0x0A	; 10
    25cc:	08 f0       	brcs	.+2      	; 0x25d0 <prvInitialiseNewTask+0x7c>
    25ce:	09 e0       	ldi	r16, 0x09	; 9
    25d0:	0a 8f       	std	Y+26, r16	; 0x1a
    25d2:	0d a7       	std	Y+45, r16	; 0x2d
    25d4:	1e a6       	std	Y+46, r1	; 0x2e
    25d6:	ce 01       	movw	r24, r28
    25d8:	02 96       	adiw	r24, 0x02	; 2
    25da:	0e 94 29 0a 	call	0x1452	; 0x1452 <vListInitialiseItem>
    25de:	ce 01       	movw	r24, r28
    25e0:	0e 96       	adiw	r24, 0x0e	; 14
    25e2:	0e 94 29 0a 	call	0x1452	; 0x1452 <vListInitialiseItem>
    25e6:	db 87       	std	Y+11, r29	; 0x0b
    25e8:	ca 87       	std	Y+10, r28	; 0x0a
    25ea:	8a e0       	ldi	r24, 0x0A	; 10
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e0       	ldi	r26, 0x00	; 0
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	80 1b       	sub	r24, r16
    25f4:	91 09       	sbc	r25, r1
    25f6:	a1 09       	sbc	r26, r1
    25f8:	b1 09       	sbc	r27, r1
    25fa:	8e 87       	std	Y+14, r24	; 0x0e
    25fc:	9f 87       	std	Y+15, r25	; 0x0f
    25fe:	a8 8b       	std	Y+16, r26	; 0x10
    2600:	b9 8b       	std	Y+17, r27	; 0x11
    2602:	df 8b       	std	Y+23, r29	; 0x17
    2604:	ce 8b       	std	Y+22, r28	; 0x16
    2606:	84 e0       	ldi	r24, 0x04	; 4
    2608:	fe 01       	movw	r30, r28
    260a:	bf 96       	adiw	r30, 0x2f	; 47
    260c:	df 01       	movw	r26, r30
    260e:	1d 92       	st	X+, r1
    2610:	8a 95       	dec	r24
    2612:	e9 f7       	brne	.-6      	; 0x260e <prvInitialiseNewTask+0xba>
    2614:	1b aa       	std	Y+51, r1	; 0x33
    2616:	a3 01       	movw	r20, r6
    2618:	b2 01       	movw	r22, r4
    261a:	c4 01       	movw	r24, r8
    261c:	0e 94 9d 0a 	call	0x153a	; 0x153a <pxPortInitialiseStack>
    2620:	99 83       	std	Y+1, r25	; 0x01
    2622:	88 83       	st	Y, r24
    2624:	e1 14       	cp	r14, r1
    2626:	f1 04       	cpc	r15, r1
    2628:	19 f0       	breq	.+6      	; 0x2630 <prvInitialiseNewTask+0xdc>
    262a:	f7 01       	movw	r30, r14
    262c:	d1 83       	std	Z+1, r29	; 0x01
    262e:	c0 83       	st	Z, r28
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
    263e:	bf 90       	pop	r11
    2640:	af 90       	pop	r10
    2642:	9f 90       	pop	r9
    2644:	8f 90       	pop	r8
    2646:	7f 90       	pop	r7
    2648:	6f 90       	pop	r6
    264a:	5f 90       	pop	r5
    264c:	4f 90       	pop	r4
    264e:	08 95       	ret

00002650 <prvInitialiseTaskLists>:
    2650:	cf 93       	push	r28
    2652:	c0 e0       	ldi	r28, 0x00	; 0
    2654:	09 c0       	rjmp	.+18     	; 0x2668 <prvInitialiseTaskLists+0x18>
    2656:	2b e0       	ldi	r18, 0x0B	; 11
    2658:	c2 9f       	mul	r28, r18
    265a:	c0 01       	movw	r24, r0
    265c:	11 24       	eor	r1, r1
    265e:	83 50       	subi	r24, 0x03	; 3
    2660:	9c 4e       	sbci	r25, 0xEC	; 236
    2662:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    2666:	cf 5f       	subi	r28, 0xFF	; 255
    2668:	ca 30       	cpi	r28, 0x0A	; 10
    266a:	a8 f3       	brcs	.-22     	; 0x2656 <prvInitialiseTaskLists+0x6>
    266c:	82 ef       	ldi	r24, 0xF2	; 242
    266e:	93 e1       	ldi	r25, 0x13	; 19
    2670:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    2674:	87 ee       	ldi	r24, 0xE7	; 231
    2676:	93 e1       	ldi	r25, 0x13	; 19
    2678:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    267c:	88 ed       	ldi	r24, 0xD8	; 216
    267e:	93 e1       	ldi	r25, 0x13	; 19
    2680:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    2684:	8d ec       	ldi	r24, 0xCD	; 205
    2686:	93 e1       	ldi	r25, 0x13	; 19
    2688:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    268c:	81 ec       	ldi	r24, 0xC1	; 193
    268e:	93 e1       	ldi	r25, 0x13	; 19
    2690:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    2694:	82 ef       	ldi	r24, 0xF2	; 242
    2696:	93 e1       	ldi	r25, 0x13	; 19
    2698:	90 93 e6 13 	sts	0x13E6, r25	; 0x8013e6 <pxDelayedTaskList+0x1>
    269c:	80 93 e5 13 	sts	0x13E5, r24	; 0x8013e5 <pxDelayedTaskList>
    26a0:	87 ee       	ldi	r24, 0xE7	; 231
    26a2:	93 e1       	ldi	r25, 0x13	; 19
    26a4:	90 93 e4 13 	sts	0x13E4, r25	; 0x8013e4 <pxOverflowDelayedTaskList+0x1>
    26a8:	80 93 e3 13 	sts	0x13E3, r24	; 0x8013e3 <pxOverflowDelayedTaskList>
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <prvAddNewTaskToReadyList>:
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	ec 01       	movw	r28, r24
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	0f 92       	push	r0
    26bc:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxCurrentNumberOfTasks>
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	80 93 c0 13 	sts	0x13C0, r24	; 0x8013c0 <uxCurrentNumberOfTasks>
    26c6:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    26ca:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    26ce:	89 2b       	or	r24, r25
    26d0:	51 f4       	brne	.+20     	; 0x26e6 <prvAddNewTaskToReadyList+0x36>
    26d2:	d0 93 6c 14 	sts	0x146C, r29	; 0x80146c <pxCurrentTCB+0x1>
    26d6:	c0 93 6b 14 	sts	0x146B, r28	; 0x80146b <pxCurrentTCB>
    26da:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxCurrentNumberOfTasks>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 f4       	brne	.+36     	; 0x2706 <prvAddNewTaskToReadyList+0x56>
    26e2:	b6 df       	rcall	.-148    	; 0x2650 <prvInitialiseTaskLists>
    26e4:	10 c0       	rjmp	.+32     	; 0x2706 <prvAddNewTaskToReadyList+0x56>
    26e6:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <xSchedulerRunning>
    26ea:	81 11       	cpse	r24, r1
    26ec:	0c c0       	rjmp	.+24     	; 0x2706 <prvAddNewTaskToReadyList+0x56>
    26ee:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    26f2:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    26f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    26f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26fa:	89 17       	cp	r24, r25
    26fc:	20 f0       	brcs	.+8      	; 0x2706 <prvAddNewTaskToReadyList+0x56>
    26fe:	d0 93 6c 14 	sts	0x146C, r29	; 0x80146c <pxCurrentTCB+0x1>
    2702:	c0 93 6b 14 	sts	0x146B, r28	; 0x80146b <pxCurrentTCB>
    2706:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <uxTaskNumber>
    270a:	8f 5f       	subi	r24, 0xFF	; 255
    270c:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <uxTaskNumber>
    2710:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2712:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    2716:	8e 17       	cp	r24, r30
    2718:	10 f4       	brcc	.+4      	; 0x271e <prvAddNewTaskToReadyList+0x6e>
    271a:	e0 93 bb 13 	sts	0x13BB, r30	; 0x8013bb <uxTopReadyPriority>
    271e:	8b e0       	ldi	r24, 0x0B	; 11
    2720:	8e 9f       	mul	r24, r30
    2722:	f0 01       	movw	r30, r0
    2724:	11 24       	eor	r1, r1
    2726:	e3 50       	subi	r30, 0x03	; 3
    2728:	fc 4e       	sbci	r31, 0xEC	; 236
    272a:	01 80       	ldd	r0, Z+1	; 0x01
    272c:	f2 81       	ldd	r31, Z+2	; 0x02
    272e:	e0 2d       	mov	r30, r0
    2730:	ff 83       	std	Y+7, r31	; 0x07
    2732:	ee 83       	std	Y+6, r30	; 0x06
    2734:	26 81       	ldd	r18, Z+6	; 0x06
    2736:	37 81       	ldd	r19, Z+7	; 0x07
    2738:	39 87       	std	Y+9, r19	; 0x09
    273a:	28 87       	std	Y+8, r18	; 0x08
    273c:	a6 81       	ldd	r26, Z+6	; 0x06
    273e:	b7 81       	ldd	r27, Z+7	; 0x07
    2740:	9e 01       	movw	r18, r28
    2742:	2e 5f       	subi	r18, 0xFE	; 254
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	15 96       	adiw	r26, 0x05	; 5
    2748:	3c 93       	st	X, r19
    274a:	2e 93       	st	-X, r18
    274c:	14 97       	sbiw	r26, 0x04	; 4
    274e:	37 83       	std	Z+7, r19	; 0x07
    2750:	26 83       	std	Z+6, r18	; 0x06
    2752:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2754:	8e 9f       	mul	r24, r30
    2756:	f0 01       	movw	r30, r0
    2758:	11 24       	eor	r1, r1
    275a:	e3 50       	subi	r30, 0x03	; 3
    275c:	fc 4e       	sbci	r31, 0xEC	; 236
    275e:	fd 87       	std	Y+13, r31	; 0x0d
    2760:	ec 87       	std	Y+12, r30	; 0x0c
    2762:	80 81       	ld	r24, Z
    2764:	8f 5f       	subi	r24, 0xFF	; 255
    2766:	80 83       	st	Z, r24
    2768:	0f 90       	pop	r0
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <xSchedulerRunning>
    2770:	88 23       	and	r24, r24
    2772:	51 f0       	breq	.+20     	; 0x2788 <prvAddNewTaskToReadyList+0xd8>
    2774:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    2778:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    277c:	92 8d       	ldd	r25, Z+26	; 0x1a
    277e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2780:	98 17       	cp	r25, r24
    2782:	10 f4       	brcc	.+4      	; 0x2788 <prvAddNewTaskToReadyList+0xd8>
    2784:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	08 95       	ret

0000278e <prvCheckTasksWaitingTermination>:
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	1b c0       	rjmp	.+54     	; 0x27ca <prvCheckTasksWaitingTermination+0x3c>
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	0f 92       	push	r0
    279a:	e0 91 d4 13 	lds	r30, 0x13D4	; 0x8013d4 <xTasksWaitingTermination+0x7>
    279e:	f0 91 d5 13 	lds	r31, 0x13D5	; 0x8013d5 <xTasksWaitingTermination+0x8>
    27a2:	c0 85       	ldd	r28, Z+8	; 0x08
    27a4:	d1 85       	ldd	r29, Z+9	; 0x09
    27a6:	ce 01       	movw	r24, r28
    27a8:	02 96       	adiw	r24, 0x02	; 2
    27aa:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
    27ae:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxCurrentNumberOfTasks>
    27b2:	81 50       	subi	r24, 0x01	; 1
    27b4:	80 93 c0 13 	sts	0x13C0, r24	; 0x8013c0 <uxCurrentNumberOfTasks>
    27b8:	80 91 cc 13 	lds	r24, 0x13CC	; 0x8013cc <uxDeletedTasksWaitingCleanUp>
    27bc:	81 50       	subi	r24, 0x01	; 1
    27be:	80 93 cc 13 	sts	0x13CC, r24	; 0x8013cc <uxDeletedTasksWaitingCleanUp>
    27c2:	0f 90       	pop	r0
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	ce 01       	movw	r24, r28
    27c8:	b8 de       	rcall	.-656    	; 0x253a <prvDeleteTCB>
    27ca:	80 91 cc 13 	lds	r24, 0x13CC	; 0x8013cc <uxDeletedTasksWaitingCleanUp>
    27ce:	81 11       	cpse	r24, r1
    27d0:	e1 cf       	rjmp	.-62     	; 0x2794 <prvCheckTasksWaitingTermination+0x6>
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	08 95       	ret

000027d8 <prvAddCurrentTaskToDelayedList>:
    27d8:	8f 92       	push	r8
    27da:	9f 92       	push	r9
    27dc:	af 92       	push	r10
    27de:	bf 92       	push	r11
    27e0:	cf 92       	push	r12
    27e2:	df 92       	push	r13
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	6b 01       	movw	r12, r22
    27ee:	7c 01       	movw	r14, r24
    27f0:	c4 2f       	mov	r28, r20
    27f2:	80 90 bc 13 	lds	r8, 0x13BC	; 0x8013bc <xTickCount>
    27f6:	90 90 bd 13 	lds	r9, 0x13BD	; 0x8013bd <xTickCount+0x1>
    27fa:	a0 90 be 13 	lds	r10, 0x13BE	; 0x8013be <xTickCount+0x2>
    27fe:	b0 90 bf 13 	lds	r11, 0x13BF	; 0x8013bf <xTickCount+0x3>
    2802:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    2806:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    280a:	02 96       	adiw	r24, 0x02	; 2
    280c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
    2810:	8f ef       	ldi	r24, 0xFF	; 255
    2812:	c8 16       	cp	r12, r24
    2814:	d8 06       	cpc	r13, r24
    2816:	e8 06       	cpc	r14, r24
    2818:	f8 06       	cpc	r15, r24
    281a:	b1 f5       	brne	.+108    	; 0x2888 <prvAddCurrentTaskToDelayedList+0xb0>
    281c:	cc 23       	and	r28, r28
    281e:	a1 f1       	breq	.+104    	; 0x2888 <prvAddCurrentTaskToDelayedList+0xb0>
    2820:	e1 ec       	ldi	r30, 0xC1	; 193
    2822:	f3 e1       	ldi	r31, 0x13	; 19
    2824:	a1 81       	ldd	r26, Z+1	; 0x01
    2826:	b2 81       	ldd	r27, Z+2	; 0x02
    2828:	c0 91 6b 14 	lds	r28, 0x146B	; 0x80146b <pxCurrentTCB>
    282c:	d0 91 6c 14 	lds	r29, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2830:	bf 83       	std	Y+7, r27	; 0x07
    2832:	ae 83       	std	Y+6, r26	; 0x06
    2834:	c0 91 6b 14 	lds	r28, 0x146B	; 0x80146b <pxCurrentTCB>
    2838:	d0 91 6c 14 	lds	r29, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    283c:	16 96       	adiw	r26, 0x06	; 6
    283e:	8d 91       	ld	r24, X+
    2840:	9c 91       	ld	r25, X
    2842:	17 97       	sbiw	r26, 0x07	; 7
    2844:	99 87       	std	Y+9, r25	; 0x09
    2846:	88 87       	std	Y+8, r24	; 0x08
    2848:	16 96       	adiw	r26, 0x06	; 6
    284a:	cd 91       	ld	r28, X+
    284c:	dc 91       	ld	r29, X
    284e:	17 97       	sbiw	r26, 0x07	; 7
    2850:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    2854:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2858:	02 96       	adiw	r24, 0x02	; 2
    285a:	9d 83       	std	Y+5, r25	; 0x05
    285c:	8c 83       	std	Y+4, r24	; 0x04
    285e:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    2862:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2866:	02 96       	adiw	r24, 0x02	; 2
    2868:	17 96       	adiw	r26, 0x07	; 7
    286a:	9c 93       	st	X, r25
    286c:	8e 93       	st	-X, r24
    286e:	16 97       	sbiw	r26, 0x06	; 6
    2870:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    2874:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2878:	1d 96       	adiw	r26, 0x0d	; 13
    287a:	fc 93       	st	X, r31
    287c:	ee 93       	st	-X, r30
    287e:	1c 97       	sbiw	r26, 0x0c	; 12
    2880:	80 81       	ld	r24, Z
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	80 83       	st	Z, r24
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <prvAddCurrentTaskToDelayedList+0x12e>
    2888:	c8 0c       	add	r12, r8
    288a:	d9 1c       	adc	r13, r9
    288c:	ea 1c       	adc	r14, r10
    288e:	fb 1c       	adc	r15, r11
    2890:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    2894:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2898:	c2 82       	std	Z+2, r12	; 0x02
    289a:	d3 82       	std	Z+3, r13	; 0x03
    289c:	e4 82       	std	Z+4, r14	; 0x04
    289e:	f5 82       	std	Z+5, r15	; 0x05
    28a0:	c8 14       	cp	r12, r8
    28a2:	d9 04       	cpc	r13, r9
    28a4:	ea 04       	cpc	r14, r10
    28a6:	fb 04       	cpc	r15, r11
    28a8:	68 f4       	brcc	.+26     	; 0x28c4 <prvAddCurrentTaskToDelayedList+0xec>
    28aa:	60 91 6b 14 	lds	r22, 0x146B	; 0x80146b <pxCurrentTCB>
    28ae:	70 91 6c 14 	lds	r23, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    28b2:	80 91 e3 13 	lds	r24, 0x13E3	; 0x8013e3 <pxOverflowDelayedTaskList>
    28b6:	90 91 e4 13 	lds	r25, 0x13E4	; 0x8013e4 <pxOverflowDelayedTaskList+0x1>
    28ba:	6e 5f       	subi	r22, 0xFE	; 254
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	0e 94 2d 0a 	call	0x145a	; 0x145a <vListInsert>
    28c2:	21 c0       	rjmp	.+66     	; 0x2906 <prvAddCurrentTaskToDelayedList+0x12e>
    28c4:	60 91 6b 14 	lds	r22, 0x146B	; 0x80146b <pxCurrentTCB>
    28c8:	70 91 6c 14 	lds	r23, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    28cc:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <pxDelayedTaskList>
    28d0:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <pxDelayedTaskList+0x1>
    28d4:	6e 5f       	subi	r22, 0xFE	; 254
    28d6:	7f 4f       	sbci	r23, 0xFF	; 255
    28d8:	0e 94 2d 0a 	call	0x145a	; 0x145a <vListInsert>
    28dc:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <xNextTaskUnblockTime>
    28e0:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    28e4:	a0 91 b1 13 	lds	r26, 0x13B1	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    28e8:	b0 91 b2 13 	lds	r27, 0x13B2	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    28ec:	c8 16       	cp	r12, r24
    28ee:	d9 06       	cpc	r13, r25
    28f0:	ea 06       	cpc	r14, r26
    28f2:	fb 06       	cpc	r15, r27
    28f4:	40 f4       	brcc	.+16     	; 0x2906 <prvAddCurrentTaskToDelayedList+0x12e>
    28f6:	c0 92 af 13 	sts	0x13AF, r12	; 0x8013af <xNextTaskUnblockTime>
    28fa:	d0 92 b0 13 	sts	0x13B0, r13	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    28fe:	e0 92 b1 13 	sts	0x13B1, r14	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    2902:	f0 92 b2 13 	sts	0x13B2, r15	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	df 90       	pop	r13
    2910:	cf 90       	pop	r12
    2912:	bf 90       	pop	r11
    2914:	af 90       	pop	r10
    2916:	9f 90       	pop	r9
    2918:	8f 90       	pop	r8
    291a:	08 95       	ret

0000291c <xTaskCreate>:
    291c:	2f 92       	push	r2
    291e:	3f 92       	push	r3
    2920:	4f 92       	push	r4
    2922:	5f 92       	push	r5
    2924:	6f 92       	push	r6
    2926:	7f 92       	push	r7
    2928:	8f 92       	push	r8
    292a:	9f 92       	push	r9
    292c:	af 92       	push	r10
    292e:	bf 92       	push	r11
    2930:	cf 92       	push	r12
    2932:	df 92       	push	r13
    2934:	ef 92       	push	r14
    2936:	ff 92       	push	r15
    2938:	0f 93       	push	r16
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	3c 01       	movw	r6, r24
    2940:	1b 01       	movw	r2, r22
    2942:	4a 01       	movw	r8, r20
    2944:	29 01       	movw	r4, r18
    2946:	ca 01       	movw	r24, r20
    2948:	0e 94 32 09 	call	0x1264	; 0x1264 <pvPortMalloc>
    294c:	6c 01       	movw	r12, r24
    294e:	89 2b       	or	r24, r25
    2950:	71 f0       	breq	.+28     	; 0x296e <xTaskCreate+0x52>
    2952:	84 e3       	ldi	r24, 0x34	; 52
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	0e 94 32 09 	call	0x1264	; 0x1264 <pvPortMalloc>
    295a:	ec 01       	movw	r28, r24
    295c:	89 2b       	or	r24, r25
    295e:	19 f0       	breq	.+6      	; 0x2966 <xTaskCreate+0x4a>
    2960:	dc 8e       	std	Y+28, r13	; 0x1c
    2962:	cb 8e       	std	Y+27, r12	; 0x1b
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <xTaskCreate+0x56>
    2966:	c6 01       	movw	r24, r12
    2968:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vPortFree>
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <xTaskCreate+0x56>
    296e:	c0 e0       	ldi	r28, 0x00	; 0
    2970:	d0 e0       	ldi	r29, 0x00	; 0
    2972:	20 97       	sbiw	r28, 0x00	; 0
    2974:	61 f0       	breq	.+24     	; 0x298e <xTaskCreate+0x72>
    2976:	a1 2c       	mov	r10, r1
    2978:	b1 2c       	mov	r11, r1
    297a:	6e 01       	movw	r12, r28
    297c:	92 01       	movw	r18, r4
    297e:	a4 01       	movw	r20, r8
    2980:	b1 01       	movw	r22, r2
    2982:	c3 01       	movw	r24, r6
    2984:	e7 dd       	rcall	.-1074   	; 0x2554 <prvInitialiseNewTask>
    2986:	ce 01       	movw	r24, r28
    2988:	93 de       	rcall	.-730    	; 0x26b0 <prvAddNewTaskToReadyList>
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <xTaskCreate+0x74>
    298e:	8f ef       	ldi	r24, 0xFF	; 255
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	bf 90       	pop	r11
    29a0:	af 90       	pop	r10
    29a2:	9f 90       	pop	r9
    29a4:	8f 90       	pop	r8
    29a6:	7f 90       	pop	r7
    29a8:	6f 90       	pop	r6
    29aa:	5f 90       	pop	r5
    29ac:	4f 90       	pop	r4
    29ae:	3f 90       	pop	r3
    29b0:	2f 90       	pop	r2
    29b2:	08 95       	ret

000029b4 <vTaskStartScheduler>:
    29b4:	ef 92       	push	r14
    29b6:	ff 92       	push	r15
    29b8:	0f 93       	push	r16
    29ba:	0f 2e       	mov	r0, r31
    29bc:	fd ea       	ldi	r31, 0xAD	; 173
    29be:	ef 2e       	mov	r14, r31
    29c0:	f3 e1       	ldi	r31, 0x13	; 19
    29c2:	ff 2e       	mov	r15, r31
    29c4:	f0 2d       	mov	r31, r0
    29c6:	00 e0       	ldi	r16, 0x00	; 0
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 ec       	ldi	r20, 0xC0	; 192
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	64 ec       	ldi	r22, 0xC4	; 196
    29d2:	74 e0       	ldi	r23, 0x04	; 4
    29d4:	8e e4       	ldi	r24, 0x4E	; 78
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	a1 df       	rcall	.-190    	; 0x291c <xTaskCreate>
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	11 f4       	brne	.+4      	; 0x29e2 <vTaskStartScheduler+0x2e>
    29de:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xTimerCreateTimerTask>
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	c9 f4       	brne	.+50     	; 0x2a18 <vTaskStartScheduler+0x64>
    29e6:	f8 94       	cli
    29e8:	8f ef       	ldi	r24, 0xFF	; 255
    29ea:	9f ef       	ldi	r25, 0xFF	; 255
    29ec:	dc 01       	movw	r26, r24
    29ee:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xNextTaskUnblockTime>
    29f2:	90 93 b0 13 	sts	0x13B0, r25	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    29f6:	a0 93 b1 13 	sts	0x13B1, r26	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    29fa:	b0 93 b2 13 	sts	0x13B2, r27	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	80 93 ba 13 	sts	0x13BA, r24	; 0x8013ba <xSchedulerRunning>
    2a04:	10 92 bc 13 	sts	0x13BC, r1	; 0x8013bc <xTickCount>
    2a08:	10 92 bd 13 	sts	0x13BD, r1	; 0x8013bd <xTickCount+0x1>
    2a0c:	10 92 be 13 	sts	0x13BE, r1	; 0x8013be <xTickCount+0x2>
    2a10:	10 92 bf 13 	sts	0x13BF, r1	; 0x8013bf <xTickCount+0x3>
    2a14:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xPortStartScheduler>
    2a18:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2a1c:	0f 91       	pop	r16
    2a1e:	ff 90       	pop	r15
    2a20:	ef 90       	pop	r14
    2a22:	08 95       	ret

00002a24 <vTaskSuspendAll>:
    2a24:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    2a28:	8f 5f       	subi	r24, 0xFF	; 255
    2a2a:	80 93 ac 13 	sts	0x13AC, r24	; 0x8013ac <uxSchedulerSuspended>
    2a2e:	08 95       	ret

00002a30 <xTaskGetTickCount>:
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	0f 92       	push	r0
    2a36:	60 91 bc 13 	lds	r22, 0x13BC	; 0x8013bc <xTickCount>
    2a3a:	70 91 bd 13 	lds	r23, 0x13BD	; 0x8013bd <xTickCount+0x1>
    2a3e:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <xTickCount+0x2>
    2a42:	90 91 bf 13 	lds	r25, 0x13BF	; 0x8013bf <xTickCount+0x3>
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	08 95       	ret

00002a4c <xTaskIncrementTick>:
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	cf 93       	push	r28
    2a56:	df 93       	push	r29
    2a58:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    2a5c:	81 11       	cpse	r24, r1
    2a5e:	05 c1       	rjmp	.+522    	; 0x2c6a <xTaskIncrementTick+0x21e>
    2a60:	c0 90 bc 13 	lds	r12, 0x13BC	; 0x8013bc <xTickCount>
    2a64:	d0 90 bd 13 	lds	r13, 0x13BD	; 0x8013bd <xTickCount+0x1>
    2a68:	e0 90 be 13 	lds	r14, 0x13BE	; 0x8013be <xTickCount+0x2>
    2a6c:	f0 90 bf 13 	lds	r15, 0x13BF	; 0x8013bf <xTickCount+0x3>
    2a70:	8f ef       	ldi	r24, 0xFF	; 255
    2a72:	c8 1a       	sub	r12, r24
    2a74:	d8 0a       	sbc	r13, r24
    2a76:	e8 0a       	sbc	r14, r24
    2a78:	f8 0a       	sbc	r15, r24
    2a7a:	c0 92 bc 13 	sts	0x13BC, r12	; 0x8013bc <xTickCount>
    2a7e:	d0 92 bd 13 	sts	0x13BD, r13	; 0x8013bd <xTickCount+0x1>
    2a82:	e0 92 be 13 	sts	0x13BE, r14	; 0x8013be <xTickCount+0x2>
    2a86:	f0 92 bf 13 	sts	0x13BF, r15	; 0x8013bf <xTickCount+0x3>
    2a8a:	c1 14       	cp	r12, r1
    2a8c:	d1 04       	cpc	r13, r1
    2a8e:	e1 04       	cpc	r14, r1
    2a90:	f1 04       	cpc	r15, r1
    2a92:	b1 f4       	brne	.+44     	; 0x2ac0 <xTaskIncrementTick+0x74>
    2a94:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <pxDelayedTaskList>
    2a98:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <pxDelayedTaskList+0x1>
    2a9c:	20 91 e3 13 	lds	r18, 0x13E3	; 0x8013e3 <pxOverflowDelayedTaskList>
    2aa0:	30 91 e4 13 	lds	r19, 0x13E4	; 0x8013e4 <pxOverflowDelayedTaskList+0x1>
    2aa4:	30 93 e6 13 	sts	0x13E6, r19	; 0x8013e6 <pxDelayedTaskList+0x1>
    2aa8:	20 93 e5 13 	sts	0x13E5, r18	; 0x8013e5 <pxDelayedTaskList>
    2aac:	90 93 e4 13 	sts	0x13E4, r25	; 0x8013e4 <pxOverflowDelayedTaskList+0x1>
    2ab0:	80 93 e3 13 	sts	0x13E3, r24	; 0x8013e3 <pxOverflowDelayedTaskList>
    2ab4:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <xNumOfOverflows>
    2ab8:	8f 5f       	subi	r24, 0xFF	; 255
    2aba:	80 93 b4 13 	sts	0x13B4, r24	; 0x8013b4 <xNumOfOverflows>
    2abe:	16 dd       	rcall	.-1492   	; 0x24ec <prvResetNextTaskUnblockTime>
    2ac0:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <xNextTaskUnblockTime>
    2ac4:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    2ac8:	a0 91 b1 13 	lds	r26, 0x13B1	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    2acc:	b0 91 b2 13 	lds	r27, 0x13B2	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    2ad0:	c8 16       	cp	r12, r24
    2ad2:	d9 06       	cpc	r13, r25
    2ad4:	ea 06       	cpc	r14, r26
    2ad6:	fb 06       	cpc	r15, r27
    2ad8:	20 f4       	brcc	.+8      	; 0x2ae2 <xTaskIncrementTick+0x96>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	b2 c0       	rjmp	.+356    	; 0x2c42 <xTaskIncrementTick+0x1f6>
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <xTaskIncrementTick+0x98>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	e0 91 e5 13 	lds	r30, 0x13E5	; 0x8013e5 <pxDelayedTaskList>
    2ae8:	f0 91 e6 13 	lds	r31, 0x13E6	; 0x8013e6 <pxDelayedTaskList+0x1>
    2aec:	90 81       	ld	r25, Z
    2aee:	91 11       	cpse	r25, r1
    2af0:	0c c0       	rjmp	.+24     	; 0x2b0a <xTaskIncrementTick+0xbe>
    2af2:	4f ef       	ldi	r20, 0xFF	; 255
    2af4:	5f ef       	ldi	r21, 0xFF	; 255
    2af6:	ba 01       	movw	r22, r20
    2af8:	40 93 af 13 	sts	0x13AF, r20	; 0x8013af <xNextTaskUnblockTime>
    2afc:	50 93 b0 13 	sts	0x13B0, r21	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    2b00:	60 93 b1 13 	sts	0x13B1, r22	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    2b04:	70 93 b2 13 	sts	0x13B2, r23	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    2b08:	9c c0       	rjmp	.+312    	; 0x2c42 <xTaskIncrementTick+0x1f6>
    2b0a:	e0 91 e5 13 	lds	r30, 0x13E5	; 0x8013e5 <pxDelayedTaskList>
    2b0e:	f0 91 e6 13 	lds	r31, 0x13E6	; 0x8013e6 <pxDelayedTaskList+0x1>
    2b12:	07 80       	ldd	r0, Z+7	; 0x07
    2b14:	f0 85       	ldd	r31, Z+8	; 0x08
    2b16:	e0 2d       	mov	r30, r0
    2b18:	00 84       	ldd	r0, Z+8	; 0x08
    2b1a:	f1 85       	ldd	r31, Z+9	; 0x09
    2b1c:	e0 2d       	mov	r30, r0
    2b1e:	42 81       	ldd	r20, Z+2	; 0x02
    2b20:	53 81       	ldd	r21, Z+3	; 0x03
    2b22:	64 81       	ldd	r22, Z+4	; 0x04
    2b24:	75 81       	ldd	r23, Z+5	; 0x05
    2b26:	c4 16       	cp	r12, r20
    2b28:	d5 06       	cpc	r13, r21
    2b2a:	e6 06       	cpc	r14, r22
    2b2c:	f7 06       	cpc	r15, r23
    2b2e:	48 f4       	brcc	.+18     	; 0x2b42 <xTaskIncrementTick+0xf6>
    2b30:	40 93 af 13 	sts	0x13AF, r20	; 0x8013af <xNextTaskUnblockTime>
    2b34:	50 93 b0 13 	sts	0x13B0, r21	; 0x8013b0 <xNextTaskUnblockTime+0x1>
    2b38:	60 93 b1 13 	sts	0x13B1, r22	; 0x8013b1 <xNextTaskUnblockTime+0x2>
    2b3c:	70 93 b2 13 	sts	0x13B2, r23	; 0x8013b2 <xNextTaskUnblockTime+0x3>
    2b40:	80 c0       	rjmp	.+256    	; 0x2c42 <xTaskIncrementTick+0x1f6>
    2b42:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b44:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b46:	c6 81       	ldd	r28, Z+6	; 0x06
    2b48:	d7 81       	ldd	r29, Z+7	; 0x07
    2b4a:	20 85       	ldd	r18, Z+8	; 0x08
    2b4c:	31 85       	ldd	r19, Z+9	; 0x09
    2b4e:	3f 83       	std	Y+7, r19	; 0x07
    2b50:	2e 83       	std	Y+6, r18	; 0x06
    2b52:	c0 85       	ldd	r28, Z+8	; 0x08
    2b54:	d1 85       	ldd	r29, Z+9	; 0x09
    2b56:	26 81       	ldd	r18, Z+6	; 0x06
    2b58:	37 81       	ldd	r19, Z+7	; 0x07
    2b5a:	3d 83       	std	Y+5, r19	; 0x05
    2b5c:	2c 83       	std	Y+4, r18	; 0x04
    2b5e:	11 96       	adiw	r26, 0x01	; 1
    2b60:	4d 91       	ld	r20, X+
    2b62:	5c 91       	ld	r21, X
    2b64:	12 97       	sbiw	r26, 0x02	; 2
    2b66:	9f 01       	movw	r18, r30
    2b68:	2e 5f       	subi	r18, 0xFE	; 254
    2b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6c:	42 17       	cp	r20, r18
    2b6e:	53 07       	cpc	r21, r19
    2b70:	31 f4       	brne	.+12     	; 0x2b7e <xTaskIncrementTick+0x132>
    2b72:	40 85       	ldd	r20, Z+8	; 0x08
    2b74:	51 85       	ldd	r21, Z+9	; 0x09
    2b76:	12 96       	adiw	r26, 0x02	; 2
    2b78:	5c 93       	st	X, r21
    2b7a:	4e 93       	st	-X, r20
    2b7c:	11 97       	sbiw	r26, 0x01	; 1
    2b7e:	15 86       	std	Z+13, r1	; 0x0d
    2b80:	14 86       	std	Z+12, r1	; 0x0c
    2b82:	9c 91       	ld	r25, X
    2b84:	91 50       	subi	r25, 0x01	; 1
    2b86:	9c 93       	st	X, r25
    2b88:	a0 8d       	ldd	r26, Z+24	; 0x18
    2b8a:	b1 8d       	ldd	r27, Z+25	; 0x19
    2b8c:	10 97       	sbiw	r26, 0x00	; 0
    2b8e:	09 f1       	breq	.+66     	; 0x2bd2 <xTaskIncrementTick+0x186>
    2b90:	c2 89       	ldd	r28, Z+18	; 0x12
    2b92:	d3 89       	ldd	r29, Z+19	; 0x13
    2b94:	44 89       	ldd	r20, Z+20	; 0x14
    2b96:	55 89       	ldd	r21, Z+21	; 0x15
    2b98:	5f 83       	std	Y+7, r21	; 0x07
    2b9a:	4e 83       	std	Y+6, r20	; 0x06
    2b9c:	c4 89       	ldd	r28, Z+20	; 0x14
    2b9e:	d5 89       	ldd	r29, Z+21	; 0x15
    2ba0:	42 89       	ldd	r20, Z+18	; 0x12
    2ba2:	53 89       	ldd	r21, Z+19	; 0x13
    2ba4:	5d 83       	std	Y+5, r21	; 0x05
    2ba6:	4c 83       	std	Y+4, r20	; 0x04
    2ba8:	11 96       	adiw	r26, 0x01	; 1
    2baa:	6d 91       	ld	r22, X+
    2bac:	7c 91       	ld	r23, X
    2bae:	12 97       	sbiw	r26, 0x02	; 2
    2bb0:	af 01       	movw	r20, r30
    2bb2:	42 5f       	subi	r20, 0xF2	; 242
    2bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb6:	64 17       	cp	r22, r20
    2bb8:	75 07       	cpc	r23, r21
    2bba:	31 f4       	brne	.+12     	; 0x2bc8 <xTaskIncrementTick+0x17c>
    2bbc:	44 89       	ldd	r20, Z+20	; 0x14
    2bbe:	55 89       	ldd	r21, Z+21	; 0x15
    2bc0:	12 96       	adiw	r26, 0x02	; 2
    2bc2:	5c 93       	st	X, r21
    2bc4:	4e 93       	st	-X, r20
    2bc6:	11 97       	sbiw	r26, 0x01	; 1
    2bc8:	11 8e       	std	Z+25, r1	; 0x19
    2bca:	10 8e       	std	Z+24, r1	; 0x18
    2bcc:	9c 91       	ld	r25, X
    2bce:	91 50       	subi	r25, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bd4:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    2bd8:	9a 17       	cp	r25, r26
    2bda:	10 f4       	brcc	.+4      	; 0x2be0 <xTaskIncrementTick+0x194>
    2bdc:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <uxTopReadyPriority>
    2be0:	9b e0       	ldi	r25, 0x0B	; 11
    2be2:	9a 9f       	mul	r25, r26
    2be4:	d0 01       	movw	r26, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	a3 50       	subi	r26, 0x03	; 3
    2bea:	bc 4e       	sbci	r27, 0xEC	; 236
    2bec:	11 96       	adiw	r26, 0x01	; 1
    2bee:	0d 90       	ld	r0, X+
    2bf0:	bc 91       	ld	r27, X
    2bf2:	a0 2d       	mov	r26, r0
    2bf4:	b7 83       	std	Z+7, r27	; 0x07
    2bf6:	a6 83       	std	Z+6, r26	; 0x06
    2bf8:	16 96       	adiw	r26, 0x06	; 6
    2bfa:	4d 91       	ld	r20, X+
    2bfc:	5c 91       	ld	r21, X
    2bfe:	17 97       	sbiw	r26, 0x07	; 7
    2c00:	51 87       	std	Z+9, r21	; 0x09
    2c02:	40 87       	std	Z+8, r20	; 0x08
    2c04:	16 96       	adiw	r26, 0x06	; 6
    2c06:	cd 91       	ld	r28, X+
    2c08:	dc 91       	ld	r29, X
    2c0a:	17 97       	sbiw	r26, 0x07	; 7
    2c0c:	3d 83       	std	Y+5, r19	; 0x05
    2c0e:	2c 83       	std	Y+4, r18	; 0x04
    2c10:	17 96       	adiw	r26, 0x07	; 7
    2c12:	3c 93       	st	X, r19
    2c14:	2e 93       	st	-X, r18
    2c16:	16 97       	sbiw	r26, 0x06	; 6
    2c18:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c1a:	9a 9f       	mul	r25, r26
    2c1c:	d0 01       	movw	r26, r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	a3 50       	subi	r26, 0x03	; 3
    2c22:	bc 4e       	sbci	r27, 0xEC	; 236
    2c24:	b5 87       	std	Z+13, r27	; 0x0d
    2c26:	a4 87       	std	Z+12, r26	; 0x0c
    2c28:	9c 91       	ld	r25, X
    2c2a:	9f 5f       	subi	r25, 0xFF	; 255
    2c2c:	9c 93       	st	X, r25
    2c2e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c30:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    2c34:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2c38:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c3a:	29 17       	cp	r18, r25
    2c3c:	08 f0       	brcs	.+2      	; 0x2c40 <xTaskIncrementTick+0x1f4>
    2c3e:	4f cf       	rjmp	.-354    	; 0x2ade <xTaskIncrementTick+0x92>
    2c40:	51 cf       	rjmp	.-350    	; 0x2ae4 <xTaskIncrementTick+0x98>
    2c42:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    2c46:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2c4a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2c4c:	9b e0       	ldi	r25, 0x0B	; 11
    2c4e:	e9 9f       	mul	r30, r25
    2c50:	f0 01       	movw	r30, r0
    2c52:	11 24       	eor	r1, r1
    2c54:	e3 50       	subi	r30, 0x03	; 3
    2c56:	fc 4e       	sbci	r31, 0xEC	; 236
    2c58:	90 81       	ld	r25, Z
    2c5a:	92 30       	cpi	r25, 0x02	; 2
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <xTaskIncrementTick+0x214>
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 91 b5 13 	lds	r25, 0x13B5	; 0x8013b5 <xYieldPending>
    2c64:	91 11       	cpse	r25, r1
    2c66:	16 c0       	rjmp	.+44     	; 0x2c94 <xTaskIncrementTick+0x248>
    2c68:	16 c0       	rjmp	.+44     	; 0x2c96 <xTaskIncrementTick+0x24a>
    2c6a:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <xPendedTicks>
    2c6e:	90 91 b7 13 	lds	r25, 0x13B7	; 0x8013b7 <xPendedTicks+0x1>
    2c72:	a0 91 b8 13 	lds	r26, 0x13B8	; 0x8013b8 <xPendedTicks+0x2>
    2c76:	b0 91 b9 13 	lds	r27, 0x13B9	; 0x8013b9 <xPendedTicks+0x3>
    2c7a:	01 96       	adiw	r24, 0x01	; 1
    2c7c:	a1 1d       	adc	r26, r1
    2c7e:	b1 1d       	adc	r27, r1
    2c80:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <xPendedTicks>
    2c84:	90 93 b7 13 	sts	0x13B7, r25	; 0x8013b7 <xPendedTicks+0x1>
    2c88:	a0 93 b8 13 	sts	0x13B8, r26	; 0x8013b8 <xPendedTicks+0x2>
    2c8c:	b0 93 b9 13 	sts	0x13B9, r27	; 0x8013b9 <xPendedTicks+0x3>
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	01 c0       	rjmp	.+2      	; 0x2c96 <xTaskIncrementTick+0x24a>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	df 91       	pop	r29
    2c98:	cf 91       	pop	r28
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	cf 90       	pop	r12
    2ca2:	08 95       	ret

00002ca4 <xTaskResumeAll>:
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	0f 92       	push	r0
    2cb6:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    2cba:	81 50       	subi	r24, 0x01	; 1
    2cbc:	80 93 ac 13 	sts	0x13AC, r24	; 0x8013ac <uxSchedulerSuspended>
    2cc0:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    2cc4:	81 11       	cpse	r24, r1
    2cc6:	be c0       	rjmp	.+380    	; 0x2e44 <xTaskResumeAll+0x1a0>
    2cc8:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxCurrentNumberOfTasks>
    2ccc:	81 11       	cpse	r24, r1
    2cce:	88 c0       	rjmp	.+272    	; 0x2de0 <xTaskResumeAll+0x13c>
    2cd0:	bc c0       	rjmp	.+376    	; 0x2e4a <xTaskResumeAll+0x1a6>
    2cd2:	e0 91 df 13 	lds	r30, 0x13DF	; 0x8013df <xPendingReadyList+0x7>
    2cd6:	f0 91 e0 13 	lds	r31, 0x13E0	; 0x8013e0 <xPendingReadyList+0x8>
    2cda:	00 84       	ldd	r0, Z+8	; 0x08
    2cdc:	f1 85       	ldd	r31, Z+9	; 0x09
    2cde:	e0 2d       	mov	r30, r0
    2ce0:	a0 8d       	ldd	r26, Z+24	; 0x18
    2ce2:	b1 8d       	ldd	r27, Z+25	; 0x19
    2ce4:	c2 89       	ldd	r28, Z+18	; 0x12
    2ce6:	d3 89       	ldd	r29, Z+19	; 0x13
    2ce8:	84 89       	ldd	r24, Z+20	; 0x14
    2cea:	95 89       	ldd	r25, Z+21	; 0x15
    2cec:	9f 83       	std	Y+7, r25	; 0x07
    2cee:	8e 83       	std	Y+6, r24	; 0x06
    2cf0:	c4 89       	ldd	r28, Z+20	; 0x14
    2cf2:	d5 89       	ldd	r29, Z+21	; 0x15
    2cf4:	82 89       	ldd	r24, Z+18	; 0x12
    2cf6:	93 89       	ldd	r25, Z+19	; 0x13
    2cf8:	9d 83       	std	Y+5, r25	; 0x05
    2cfa:	8c 83       	std	Y+4, r24	; 0x04
    2cfc:	11 96       	adiw	r26, 0x01	; 1
    2cfe:	2d 91       	ld	r18, X+
    2d00:	3c 91       	ld	r19, X
    2d02:	12 97       	sbiw	r26, 0x02	; 2
    2d04:	cf 01       	movw	r24, r30
    2d06:	0e 96       	adiw	r24, 0x0e	; 14
    2d08:	28 17       	cp	r18, r24
    2d0a:	39 07       	cpc	r19, r25
    2d0c:	31 f4       	brne	.+12     	; 0x2d1a <xTaskResumeAll+0x76>
    2d0e:	84 89       	ldd	r24, Z+20	; 0x14
    2d10:	95 89       	ldd	r25, Z+21	; 0x15
    2d12:	12 96       	adiw	r26, 0x02	; 2
    2d14:	9c 93       	st	X, r25
    2d16:	8e 93       	st	-X, r24
    2d18:	11 97       	sbiw	r26, 0x01	; 1
    2d1a:	11 8e       	std	Z+25, r1	; 0x19
    2d1c:	10 8e       	std	Z+24, r1	; 0x18
    2d1e:	8c 91       	ld	r24, X
    2d20:	81 50       	subi	r24, 0x01	; 1
    2d22:	8c 93       	st	X, r24
    2d24:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d26:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d28:	c6 81       	ldd	r28, Z+6	; 0x06
    2d2a:	d7 81       	ldd	r29, Z+7	; 0x07
    2d2c:	80 85       	ldd	r24, Z+8	; 0x08
    2d2e:	91 85       	ldd	r25, Z+9	; 0x09
    2d30:	9f 83       	std	Y+7, r25	; 0x07
    2d32:	8e 83       	std	Y+6, r24	; 0x06
    2d34:	c0 85       	ldd	r28, Z+8	; 0x08
    2d36:	d1 85       	ldd	r29, Z+9	; 0x09
    2d38:	86 81       	ldd	r24, Z+6	; 0x06
    2d3a:	97 81       	ldd	r25, Z+7	; 0x07
    2d3c:	9d 83       	std	Y+5, r25	; 0x05
    2d3e:	8c 83       	std	Y+4, r24	; 0x04
    2d40:	11 96       	adiw	r26, 0x01	; 1
    2d42:	8d 91       	ld	r24, X+
    2d44:	9c 91       	ld	r25, X
    2d46:	12 97       	sbiw	r26, 0x02	; 2
    2d48:	9f 01       	movw	r18, r30
    2d4a:	2e 5f       	subi	r18, 0xFE	; 254
    2d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4e:	82 17       	cp	r24, r18
    2d50:	93 07       	cpc	r25, r19
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <xTaskResumeAll+0xbc>
    2d54:	80 85       	ldd	r24, Z+8	; 0x08
    2d56:	91 85       	ldd	r25, Z+9	; 0x09
    2d58:	12 96       	adiw	r26, 0x02	; 2
    2d5a:	9c 93       	st	X, r25
    2d5c:	8e 93       	st	-X, r24
    2d5e:	11 97       	sbiw	r26, 0x01	; 1
    2d60:	15 86       	std	Z+13, r1	; 0x0d
    2d62:	14 86       	std	Z+12, r1	; 0x0c
    2d64:	8c 91       	ld	r24, X
    2d66:	81 50       	subi	r24, 0x01	; 1
    2d68:	8c 93       	st	X, r24
    2d6a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d6c:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    2d70:	8a 17       	cp	r24, r26
    2d72:	10 f4       	brcc	.+4      	; 0x2d78 <xTaskResumeAll+0xd4>
    2d74:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <uxTopReadyPriority>
    2d78:	8b e0       	ldi	r24, 0x0B	; 11
    2d7a:	8a 9f       	mul	r24, r26
    2d7c:	d0 01       	movw	r26, r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	a3 50       	subi	r26, 0x03	; 3
    2d82:	bc 4e       	sbci	r27, 0xEC	; 236
    2d84:	11 96       	adiw	r26, 0x01	; 1
    2d86:	0d 90       	ld	r0, X+
    2d88:	bc 91       	ld	r27, X
    2d8a:	a0 2d       	mov	r26, r0
    2d8c:	b7 83       	std	Z+7, r27	; 0x07
    2d8e:	a6 83       	std	Z+6, r26	; 0x06
    2d90:	16 96       	adiw	r26, 0x06	; 6
    2d92:	4d 91       	ld	r20, X+
    2d94:	5c 91       	ld	r21, X
    2d96:	17 97       	sbiw	r26, 0x07	; 7
    2d98:	51 87       	std	Z+9, r21	; 0x09
    2d9a:	40 87       	std	Z+8, r20	; 0x08
    2d9c:	16 96       	adiw	r26, 0x06	; 6
    2d9e:	cd 91       	ld	r28, X+
    2da0:	dc 91       	ld	r29, X
    2da2:	17 97       	sbiw	r26, 0x07	; 7
    2da4:	3d 83       	std	Y+5, r19	; 0x05
    2da6:	2c 83       	std	Y+4, r18	; 0x04
    2da8:	17 96       	adiw	r26, 0x07	; 7
    2daa:	3c 93       	st	X, r19
    2dac:	2e 93       	st	-X, r18
    2dae:	16 97       	sbiw	r26, 0x06	; 6
    2db0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2db2:	8a 9f       	mul	r24, r26
    2db4:	d0 01       	movw	r26, r0
    2db6:	11 24       	eor	r1, r1
    2db8:	a3 50       	subi	r26, 0x03	; 3
    2dba:	bc 4e       	sbci	r27, 0xEC	; 236
    2dbc:	b5 87       	std	Z+13, r27	; 0x0d
    2dbe:	a4 87       	std	Z+12, r26	; 0x0c
    2dc0:	8c 91       	ld	r24, X
    2dc2:	8f 5f       	subi	r24, 0xFF	; 255
    2dc4:	8c 93       	st	X, r24
    2dc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dc8:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    2dcc:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2dd0:	5a 96       	adiw	r26, 0x1a	; 26
    2dd2:	8c 91       	ld	r24, X
    2dd4:	98 17       	cp	r25, r24
    2dd6:	30 f0       	brcs	.+12     	; 0x2de4 <xTaskResumeAll+0x140>
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <xYieldPending>
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <xTaskResumeAll+0x140>
    2de0:	e0 e0       	ldi	r30, 0x00	; 0
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 91 d8 13 	lds	r24, 0x13D8	; 0x8013d8 <xPendingReadyList>
    2de8:	81 11       	cpse	r24, r1
    2dea:	73 cf       	rjmp	.-282    	; 0x2cd2 <xTaskResumeAll+0x2e>
    2dec:	ef 2b       	or	r30, r31
    2dee:	09 f0       	breq	.+2      	; 0x2df2 <xTaskResumeAll+0x14e>
    2df0:	7d db       	rcall	.-2310   	; 0x24ec <prvResetNextTaskUnblockTime>
    2df2:	c0 90 b6 13 	lds	r12, 0x13B6	; 0x8013b6 <xPendedTicks>
    2df6:	d0 90 b7 13 	lds	r13, 0x13B7	; 0x8013b7 <xPendedTicks+0x1>
    2dfa:	e0 90 b8 13 	lds	r14, 0x13B8	; 0x8013b8 <xPendedTicks+0x2>
    2dfe:	f0 90 b9 13 	lds	r15, 0x13B9	; 0x8013b9 <xPendedTicks+0x3>
    2e02:	c1 14       	cp	r12, r1
    2e04:	d1 04       	cpc	r13, r1
    2e06:	e1 04       	cpc	r14, r1
    2e08:	f1 04       	cpc	r15, r1
    2e0a:	a1 f0       	breq	.+40     	; 0x2e34 <xTaskResumeAll+0x190>
    2e0c:	1f de       	rcall	.-962    	; 0x2a4c <xTaskIncrementTick>
    2e0e:	88 23       	and	r24, r24
    2e10:	19 f0       	breq	.+6      	; 0x2e18 <xTaskResumeAll+0x174>
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <xYieldPending>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	c8 1a       	sub	r12, r24
    2e1c:	d1 08       	sbc	r13, r1
    2e1e:	e1 08       	sbc	r14, r1
    2e20:	f1 08       	sbc	r15, r1
    2e22:	a1 f7       	brne	.-24     	; 0x2e0c <xTaskResumeAll+0x168>
    2e24:	10 92 b6 13 	sts	0x13B6, r1	; 0x8013b6 <xPendedTicks>
    2e28:	10 92 b7 13 	sts	0x13B7, r1	; 0x8013b7 <xPendedTicks+0x1>
    2e2c:	10 92 b8 13 	sts	0x13B8, r1	; 0x8013b8 <xPendedTicks+0x2>
    2e30:	10 92 b9 13 	sts	0x13B9, r1	; 0x8013b9 <xPendedTicks+0x3>
    2e34:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <xYieldPending>
    2e38:	88 23       	and	r24, r24
    2e3a:	31 f0       	breq	.+12     	; 0x2e48 <xTaskResumeAll+0x1a4>
    2e3c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	03 c0       	rjmp	.+6      	; 0x2e4a <xTaskResumeAll+0x1a6>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <xTaskResumeAll+0x1a6>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	ff 90       	pop	r15
    2e54:	ef 90       	pop	r14
    2e56:	df 90       	pop	r13
    2e58:	cf 90       	pop	r12
    2e5a:	08 95       	ret

00002e5c <xTaskDelayUntil>:
    2e5c:	8f 92       	push	r8
    2e5e:	9f 92       	push	r9
    2e60:	af 92       	push	r10
    2e62:	bf 92       	push	r11
    2e64:	cf 92       	push	r12
    2e66:	df 92       	push	r13
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	1f 93       	push	r17
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	ec 01       	movw	r28, r24
    2e74:	6a 01       	movw	r12, r20
    2e76:	7b 01       	movw	r14, r22
    2e78:	d5 dd       	rcall	.-1110   	; 0x2a24 <vTaskSuspendAll>
    2e7a:	80 90 bc 13 	lds	r8, 0x13BC	; 0x8013bc <xTickCount>
    2e7e:	90 90 bd 13 	lds	r9, 0x13BD	; 0x8013bd <xTickCount+0x1>
    2e82:	a0 90 be 13 	lds	r10, 0x13BE	; 0x8013be <xTickCount+0x2>
    2e86:	b0 90 bf 13 	lds	r11, 0x13BF	; 0x8013bf <xTickCount+0x3>
    2e8a:	88 81       	ld	r24, Y
    2e8c:	99 81       	ldd	r25, Y+1	; 0x01
    2e8e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e90:	bb 81       	ldd	r27, Y+3	; 0x03
    2e92:	ac 01       	movw	r20, r24
    2e94:	bd 01       	movw	r22, r26
    2e96:	4c 0d       	add	r20, r12
    2e98:	5d 1d       	adc	r21, r13
    2e9a:	6e 1d       	adc	r22, r14
    2e9c:	7f 1d       	adc	r23, r15
    2e9e:	88 16       	cp	r8, r24
    2ea0:	99 06       	cpc	r9, r25
    2ea2:	aa 06       	cpc	r10, r26
    2ea4:	bb 06       	cpc	r11, r27
    2ea6:	60 f4       	brcc	.+24     	; 0x2ec0 <xTaskDelayUntil+0x64>
    2ea8:	48 17       	cp	r20, r24
    2eaa:	59 07       	cpc	r21, r25
    2eac:	6a 07       	cpc	r22, r26
    2eae:	7b 07       	cpc	r23, r27
    2eb0:	98 f4       	brcc	.+38     	; 0x2ed8 <xTaskDelayUntil+0x7c>
    2eb2:	84 16       	cp	r8, r20
    2eb4:	95 06       	cpc	r9, r21
    2eb6:	a6 06       	cpc	r10, r22
    2eb8:	b7 06       	cpc	r11, r23
    2eba:	80 f0       	brcs	.+32     	; 0x2edc <xTaskDelayUntil+0x80>
    2ebc:	10 e0       	ldi	r17, 0x00	; 0
    2ebe:	13 c0       	rjmp	.+38     	; 0x2ee6 <xTaskDelayUntil+0x8a>
    2ec0:	48 17       	cp	r20, r24
    2ec2:	59 07       	cpc	r21, r25
    2ec4:	6a 07       	cpc	r22, r26
    2ec6:	7b 07       	cpc	r23, r27
    2ec8:	58 f0       	brcs	.+22     	; 0x2ee0 <xTaskDelayUntil+0x84>
    2eca:	84 16       	cp	r8, r20
    2ecc:	95 06       	cpc	r9, r21
    2ece:	a6 06       	cpc	r10, r22
    2ed0:	b7 06       	cpc	r11, r23
    2ed2:	40 f0       	brcs	.+16     	; 0x2ee4 <xTaskDelayUntil+0x88>
    2ed4:	10 e0       	ldi	r17, 0x00	; 0
    2ed6:	07 c0       	rjmp	.+14     	; 0x2ee6 <xTaskDelayUntil+0x8a>
    2ed8:	10 e0       	ldi	r17, 0x00	; 0
    2eda:	05 c0       	rjmp	.+10     	; 0x2ee6 <xTaskDelayUntil+0x8a>
    2edc:	11 e0       	ldi	r17, 0x01	; 1
    2ede:	03 c0       	rjmp	.+6      	; 0x2ee6 <xTaskDelayUntil+0x8a>
    2ee0:	11 e0       	ldi	r17, 0x01	; 1
    2ee2:	01 c0       	rjmp	.+2      	; 0x2ee6 <xTaskDelayUntil+0x8a>
    2ee4:	11 e0       	ldi	r17, 0x01	; 1
    2ee6:	48 83       	st	Y, r20
    2ee8:	59 83       	std	Y+1, r21	; 0x01
    2eea:	6a 83       	std	Y+2, r22	; 0x02
    2eec:	7b 83       	std	Y+3, r23	; 0x03
    2eee:	11 23       	and	r17, r17
    2ef0:	41 f0       	breq	.+16     	; 0x2f02 <xTaskDelayUntil+0xa6>
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	ba 01       	movw	r22, r20
    2ef6:	68 19       	sub	r22, r8
    2ef8:	79 09       	sbc	r23, r9
    2efa:	8a 09       	sbc	r24, r10
    2efc:	9b 09       	sbc	r25, r11
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	6b dc       	rcall	.-1834   	; 0x27d8 <prvAddCurrentTaskToDelayedList>
    2f02:	d0 de       	rcall	.-608    	; 0x2ca4 <xTaskResumeAll>
    2f04:	81 11       	cpse	r24, r1
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <xTaskDelayUntil+0xb0>
    2f08:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    2f0c:	81 2f       	mov	r24, r17
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	ff 90       	pop	r15
    2f16:	ef 90       	pop	r14
    2f18:	df 90       	pop	r13
    2f1a:	cf 90       	pop	r12
    2f1c:	bf 90       	pop	r11
    2f1e:	af 90       	pop	r10
    2f20:	9f 90       	pop	r9
    2f22:	8f 90       	pop	r8
    2f24:	08 95       	ret

00002f26 <vTaskDelay>:
    2f26:	cf 92       	push	r12
    2f28:	df 92       	push	r13
    2f2a:	ef 92       	push	r14
    2f2c:	ff 92       	push	r15
    2f2e:	6b 01       	movw	r12, r22
    2f30:	7c 01       	movw	r14, r24
    2f32:	67 2b       	or	r22, r23
    2f34:	68 2b       	or	r22, r24
    2f36:	69 2b       	or	r22, r25
    2f38:	39 f0       	breq	.+14     	; 0x2f48 <vTaskDelay+0x22>
    2f3a:	74 dd       	rcall	.-1304   	; 0x2a24 <vTaskSuspendAll>
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	c7 01       	movw	r24, r14
    2f40:	b6 01       	movw	r22, r12
    2f42:	4a dc       	rcall	.-1900   	; 0x27d8 <prvAddCurrentTaskToDelayedList>
    2f44:	af de       	rcall	.-674    	; 0x2ca4 <xTaskResumeAll>
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <vTaskDelay+0x24>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <vTaskDelay+0x2c>
    2f4e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	df 90       	pop	r13
    2f58:	cf 90       	pop	r12
    2f5a:	08 95       	ret

00002f5c <vTaskSwitchContext>:
    2f5c:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    2f60:	88 23       	and	r24, r24
    2f62:	21 f0       	breq	.+8      	; 0x2f6c <vTaskSwitchContext+0x10>
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <xYieldPending>
    2f6a:	08 95       	ret
    2f6c:	10 92 b5 13 	sts	0x13B5, r1	; 0x8013b5 <xYieldPending>
    2f70:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    2f74:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2f78:	20 81       	ld	r18, Z
    2f7a:	31 81       	ldd	r19, Z+1	; 0x01
    2f7c:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    2f80:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2f84:	83 8d       	ldd	r24, Z+27	; 0x1b
    2f86:	94 8d       	ldd	r25, Z+28	; 0x1c
    2f88:	82 17       	cp	r24, r18
    2f8a:	93 07       	cpc	r25, r19
    2f8c:	60 f0       	brcs	.+24     	; 0x2fa6 <vTaskSwitchContext+0x4a>
    2f8e:	60 91 6b 14 	lds	r22, 0x146B	; 0x80146b <pxCurrentTCB>
    2f92:	70 91 6c 14 	lds	r23, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2f96:	63 5e       	subi	r22, 0xE3	; 227
    2f98:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9a:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    2f9e:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    2fa2:	0e 94 1b 22 	call	0x4436	; 0x4436 <vApplicationStackOverflowHook>
    2fa6:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    2faa:	01 c0       	rjmp	.+2      	; 0x2fae <vTaskSwitchContext+0x52>
    2fac:	81 50       	subi	r24, 0x01	; 1
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	9b e0       	ldi	r25, 0x0B	; 11
    2fb4:	92 9f       	mul	r25, r18
    2fb6:	f0 01       	movw	r30, r0
    2fb8:	93 9f       	mul	r25, r19
    2fba:	f0 0d       	add	r31, r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	e3 50       	subi	r30, 0x03	; 3
    2fc0:	fc 4e       	sbci	r31, 0xEC	; 236
    2fc2:	90 81       	ld	r25, Z
    2fc4:	99 23       	and	r25, r25
    2fc6:	91 f3       	breq	.-28     	; 0x2fac <vTaskSwitchContext+0x50>
    2fc8:	9b e0       	ldi	r25, 0x0B	; 11
    2fca:	92 9f       	mul	r25, r18
    2fcc:	a0 01       	movw	r20, r0
    2fce:	93 9f       	mul	r25, r19
    2fd0:	50 0d       	add	r21, r0
    2fd2:	11 24       	eor	r1, r1
    2fd4:	df 01       	movw	r26, r30
    2fd6:	01 80       	ldd	r0, Z+1	; 0x01
    2fd8:	f2 81       	ldd	r31, Z+2	; 0x02
    2fda:	e0 2d       	mov	r30, r0
    2fdc:	04 80       	ldd	r0, Z+4	; 0x04
    2fde:	f5 81       	ldd	r31, Z+5	; 0x05
    2fe0:	e0 2d       	mov	r30, r0
    2fe2:	12 96       	adiw	r26, 0x02	; 2
    2fe4:	fc 93       	st	X, r31
    2fe6:	ee 93       	st	-X, r30
    2fe8:	11 97       	sbiw	r26, 0x01	; 1
    2fea:	40 50       	subi	r20, 0x00	; 0
    2fec:	5c 4e       	sbci	r21, 0xEC	; 236
    2fee:	e4 17       	cp	r30, r20
    2ff0:	f5 07       	cpc	r31, r21
    2ff2:	29 f4       	brne	.+10     	; 0x2ffe <vTaskSwitchContext+0xa2>
    2ff4:	44 81       	ldd	r20, Z+4	; 0x04
    2ff6:	55 81       	ldd	r21, Z+5	; 0x05
    2ff8:	fd 01       	movw	r30, r26
    2ffa:	52 83       	std	Z+2, r21	; 0x02
    2ffc:	41 83       	std	Z+1, r20	; 0x01
    2ffe:	9b e0       	ldi	r25, 0x0B	; 11
    3000:	92 9f       	mul	r25, r18
    3002:	f0 01       	movw	r30, r0
    3004:	93 9f       	mul	r25, r19
    3006:	f0 0d       	add	r31, r0
    3008:	11 24       	eor	r1, r1
    300a:	e3 50       	subi	r30, 0x03	; 3
    300c:	fc 4e       	sbci	r31, 0xEC	; 236
    300e:	01 80       	ldd	r0, Z+1	; 0x01
    3010:	f2 81       	ldd	r31, Z+2	; 0x02
    3012:	e0 2d       	mov	r30, r0
    3014:	20 85       	ldd	r18, Z+8	; 0x08
    3016:	31 85       	ldd	r19, Z+9	; 0x09
    3018:	30 93 6c 14 	sts	0x146C, r19	; 0x80146c <pxCurrentTCB+0x1>
    301c:	20 93 6b 14 	sts	0x146B, r18	; 0x80146b <pxCurrentTCB>
    3020:	80 93 bb 13 	sts	0x13BB, r24	; 0x8013bb <uxTopReadyPriority>
    3024:	08 95       	ret

00003026 <vTaskPlaceOnEventList>:
    3026:	cf 92       	push	r12
    3028:	df 92       	push	r13
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	6a 01       	movw	r12, r20
    3030:	7b 01       	movw	r14, r22
    3032:	60 91 6b 14 	lds	r22, 0x146B	; 0x80146b <pxCurrentTCB>
    3036:	70 91 6c 14 	lds	r23, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    303a:	62 5f       	subi	r22, 0xF2	; 242
    303c:	7f 4f       	sbci	r23, 0xFF	; 255
    303e:	0e 94 2d 0a 	call	0x145a	; 0x145a <vListInsert>
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	c7 01       	movw	r24, r14
    3046:	b6 01       	movw	r22, r12
    3048:	c7 db       	rcall	.-2162   	; 0x27d8 <prvAddCurrentTaskToDelayedList>
    304a:	ff 90       	pop	r15
    304c:	ef 90       	pop	r14
    304e:	df 90       	pop	r13
    3050:	cf 90       	pop	r12
    3052:	08 95       	ret

00003054 <vTaskPlaceOnUnorderedEventList>:
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	fc 01       	movw	r30, r24
    305e:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    3062:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3066:	70 68       	ori	r23, 0x80	; 128
    3068:	1e 96       	adiw	r26, 0x0e	; 14
    306a:	4d 93       	st	X+, r20
    306c:	5d 93       	st	X+, r21
    306e:	6d 93       	st	X+, r22
    3070:	7c 93       	st	X, r23
    3072:	51 97       	sbiw	r26, 0x11	; 17
    3074:	a1 81       	ldd	r26, Z+1	; 0x01
    3076:	b2 81       	ldd	r27, Z+2	; 0x02
    3078:	c0 91 6b 14 	lds	r28, 0x146B	; 0x80146b <pxCurrentTCB>
    307c:	d0 91 6c 14 	lds	r29, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3080:	bb 8b       	std	Y+19, r27	; 0x13
    3082:	aa 8b       	std	Y+18, r26	; 0x12
    3084:	c0 91 6b 14 	lds	r28, 0x146B	; 0x80146b <pxCurrentTCB>
    3088:	d0 91 6c 14 	lds	r29, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    308c:	16 96       	adiw	r26, 0x06	; 6
    308e:	8d 91       	ld	r24, X+
    3090:	9c 91       	ld	r25, X
    3092:	17 97       	sbiw	r26, 0x07	; 7
    3094:	9d 8b       	std	Y+21, r25	; 0x15
    3096:	8c 8b       	std	Y+20, r24	; 0x14
    3098:	16 96       	adiw	r26, 0x06	; 6
    309a:	cd 91       	ld	r28, X+
    309c:	dc 91       	ld	r29, X
    309e:	17 97       	sbiw	r26, 0x07	; 7
    30a0:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    30a4:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    30a8:	0e 96       	adiw	r24, 0x0e	; 14
    30aa:	9d 83       	std	Y+5, r25	; 0x05
    30ac:	8c 83       	std	Y+4, r24	; 0x04
    30ae:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    30b2:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    30b6:	0e 96       	adiw	r24, 0x0e	; 14
    30b8:	17 96       	adiw	r26, 0x07	; 7
    30ba:	9c 93       	st	X, r25
    30bc:	8e 93       	st	-X, r24
    30be:	16 97       	sbiw	r26, 0x06	; 6
    30c0:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    30c4:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    30c8:	59 96       	adiw	r26, 0x19	; 25
    30ca:	fc 93       	st	X, r31
    30cc:	ee 93       	st	-X, r30
    30ce:	58 97       	sbiw	r26, 0x18	; 24
    30d0:	80 81       	ld	r24, Z
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	80 83       	st	Z, r24
    30d6:	41 e0       	ldi	r20, 0x01	; 1
    30d8:	c9 01       	movw	r24, r18
    30da:	b8 01       	movw	r22, r16
    30dc:	7d db       	rcall	.-2310   	; 0x27d8 <prvAddCurrentTaskToDelayedList>
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	08 95       	ret

000030e8 <vTaskPlaceOnEventListRestricted>:
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	fc 01       	movw	r30, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	ba 01       	movw	r22, r20
    30f2:	a1 81       	ldd	r26, Z+1	; 0x01
    30f4:	b2 81       	ldd	r27, Z+2	; 0x02
    30f6:	c0 91 6b 14 	lds	r28, 0x146B	; 0x80146b <pxCurrentTCB>
    30fa:	d0 91 6c 14 	lds	r29, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    30fe:	bb 8b       	std	Y+19, r27	; 0x13
    3100:	aa 8b       	std	Y+18, r26	; 0x12
    3102:	c0 91 6b 14 	lds	r28, 0x146B	; 0x80146b <pxCurrentTCB>
    3106:	d0 91 6c 14 	lds	r29, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    310a:	16 96       	adiw	r26, 0x06	; 6
    310c:	4d 91       	ld	r20, X+
    310e:	5c 91       	ld	r21, X
    3110:	17 97       	sbiw	r26, 0x07	; 7
    3112:	5d 8b       	std	Y+21, r21	; 0x15
    3114:	4c 8b       	std	Y+20, r20	; 0x14
    3116:	16 96       	adiw	r26, 0x06	; 6
    3118:	cd 91       	ld	r28, X+
    311a:	dc 91       	ld	r29, X
    311c:	17 97       	sbiw	r26, 0x07	; 7
    311e:	40 91 6b 14 	lds	r20, 0x146B	; 0x80146b <pxCurrentTCB>
    3122:	50 91 6c 14 	lds	r21, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3126:	42 5f       	subi	r20, 0xF2	; 242
    3128:	5f 4f       	sbci	r21, 0xFF	; 255
    312a:	5d 83       	std	Y+5, r21	; 0x05
    312c:	4c 83       	std	Y+4, r20	; 0x04
    312e:	40 91 6b 14 	lds	r20, 0x146B	; 0x80146b <pxCurrentTCB>
    3132:	50 91 6c 14 	lds	r21, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3136:	42 5f       	subi	r20, 0xF2	; 242
    3138:	5f 4f       	sbci	r21, 0xFF	; 255
    313a:	17 96       	adiw	r26, 0x07	; 7
    313c:	5c 93       	st	X, r21
    313e:	4e 93       	st	-X, r20
    3140:	16 97       	sbiw	r26, 0x06	; 6
    3142:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    3146:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    314a:	59 96       	adiw	r26, 0x19	; 25
    314c:	fc 93       	st	X, r31
    314e:	ee 93       	st	-X, r30
    3150:	58 97       	sbiw	r26, 0x18	; 24
    3152:	30 81       	ld	r19, Z
    3154:	3f 5f       	subi	r19, 0xFF	; 255
    3156:	30 83       	st	Z, r19
    3158:	22 23       	and	r18, r18
    315a:	19 f0       	breq	.+6      	; 0x3162 <vTaskPlaceOnEventListRestricted+0x7a>
    315c:	6f ef       	ldi	r22, 0xFF	; 255
    315e:	7f ef       	ldi	r23, 0xFF	; 255
    3160:	cb 01       	movw	r24, r22
    3162:	42 2f       	mov	r20, r18
    3164:	39 db       	rcall	.-2446   	; 0x27d8 <prvAddCurrentTaskToDelayedList>
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	08 95       	ret

0000316c <xTaskRemoveFromEventList>:
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	dc 01       	movw	r26, r24
    3172:	17 96       	adiw	r26, 0x07	; 7
    3174:	ed 91       	ld	r30, X+
    3176:	fc 91       	ld	r31, X
    3178:	18 97       	sbiw	r26, 0x08	; 8
    317a:	00 84       	ldd	r0, Z+8	; 0x08
    317c:	f1 85       	ldd	r31, Z+9	; 0x09
    317e:	e0 2d       	mov	r30, r0
    3180:	a0 8d       	ldd	r26, Z+24	; 0x18
    3182:	b1 8d       	ldd	r27, Z+25	; 0x19
    3184:	c2 89       	ldd	r28, Z+18	; 0x12
    3186:	d3 89       	ldd	r29, Z+19	; 0x13
    3188:	84 89       	ldd	r24, Z+20	; 0x14
    318a:	95 89       	ldd	r25, Z+21	; 0x15
    318c:	9f 83       	std	Y+7, r25	; 0x07
    318e:	8e 83       	std	Y+6, r24	; 0x06
    3190:	c4 89       	ldd	r28, Z+20	; 0x14
    3192:	d5 89       	ldd	r29, Z+21	; 0x15
    3194:	82 89       	ldd	r24, Z+18	; 0x12
    3196:	93 89       	ldd	r25, Z+19	; 0x13
    3198:	9d 83       	std	Y+5, r25	; 0x05
    319a:	8c 83       	std	Y+4, r24	; 0x04
    319c:	11 96       	adiw	r26, 0x01	; 1
    319e:	8d 91       	ld	r24, X+
    31a0:	9c 91       	ld	r25, X
    31a2:	12 97       	sbiw	r26, 0x02	; 2
    31a4:	9f 01       	movw	r18, r30
    31a6:	22 5f       	subi	r18, 0xF2	; 242
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
    31aa:	82 17       	cp	r24, r18
    31ac:	93 07       	cpc	r25, r19
    31ae:	31 f4       	brne	.+12     	; 0x31bc <xTaskRemoveFromEventList+0x50>
    31b0:	84 89       	ldd	r24, Z+20	; 0x14
    31b2:	95 89       	ldd	r25, Z+21	; 0x15
    31b4:	12 96       	adiw	r26, 0x02	; 2
    31b6:	9c 93       	st	X, r25
    31b8:	8e 93       	st	-X, r24
    31ba:	11 97       	sbiw	r26, 0x01	; 1
    31bc:	11 8e       	std	Z+25, r1	; 0x19
    31be:	10 8e       	std	Z+24, r1	; 0x18
    31c0:	8c 91       	ld	r24, X
    31c2:	81 50       	subi	r24, 0x01	; 1
    31c4:	8c 93       	st	X, r24
    31c6:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    31ca:	81 11       	cpse	r24, r1
    31cc:	52 c0       	rjmp	.+164    	; 0x3272 <xTaskRemoveFromEventList+0x106>
    31ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    31d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    31d2:	c6 81       	ldd	r28, Z+6	; 0x06
    31d4:	d7 81       	ldd	r29, Z+7	; 0x07
    31d6:	80 85       	ldd	r24, Z+8	; 0x08
    31d8:	91 85       	ldd	r25, Z+9	; 0x09
    31da:	9f 83       	std	Y+7, r25	; 0x07
    31dc:	8e 83       	std	Y+6, r24	; 0x06
    31de:	c0 85       	ldd	r28, Z+8	; 0x08
    31e0:	d1 85       	ldd	r29, Z+9	; 0x09
    31e2:	86 81       	ldd	r24, Z+6	; 0x06
    31e4:	97 81       	ldd	r25, Z+7	; 0x07
    31e6:	9d 83       	std	Y+5, r25	; 0x05
    31e8:	8c 83       	std	Y+4, r24	; 0x04
    31ea:	11 96       	adiw	r26, 0x01	; 1
    31ec:	8d 91       	ld	r24, X+
    31ee:	9c 91       	ld	r25, X
    31f0:	12 97       	sbiw	r26, 0x02	; 2
    31f2:	9f 01       	movw	r18, r30
    31f4:	2e 5f       	subi	r18, 0xFE	; 254
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	82 17       	cp	r24, r18
    31fa:	93 07       	cpc	r25, r19
    31fc:	31 f4       	brne	.+12     	; 0x320a <xTaskRemoveFromEventList+0x9e>
    31fe:	80 85       	ldd	r24, Z+8	; 0x08
    3200:	91 85       	ldd	r25, Z+9	; 0x09
    3202:	12 96       	adiw	r26, 0x02	; 2
    3204:	9c 93       	st	X, r25
    3206:	8e 93       	st	-X, r24
    3208:	11 97       	sbiw	r26, 0x01	; 1
    320a:	15 86       	std	Z+13, r1	; 0x0d
    320c:	14 86       	std	Z+12, r1	; 0x0c
    320e:	8c 91       	ld	r24, X
    3210:	81 50       	subi	r24, 0x01	; 1
    3212:	8c 93       	st	X, r24
    3214:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3216:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    321a:	8a 17       	cp	r24, r26
    321c:	10 f4       	brcc	.+4      	; 0x3222 <xTaskRemoveFromEventList+0xb6>
    321e:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <uxTopReadyPriority>
    3222:	8b e0       	ldi	r24, 0x0B	; 11
    3224:	8a 9f       	mul	r24, r26
    3226:	d0 01       	movw	r26, r0
    3228:	11 24       	eor	r1, r1
    322a:	a3 50       	subi	r26, 0x03	; 3
    322c:	bc 4e       	sbci	r27, 0xEC	; 236
    322e:	11 96       	adiw	r26, 0x01	; 1
    3230:	0d 90       	ld	r0, X+
    3232:	bc 91       	ld	r27, X
    3234:	a0 2d       	mov	r26, r0
    3236:	b7 83       	std	Z+7, r27	; 0x07
    3238:	a6 83       	std	Z+6, r26	; 0x06
    323a:	16 96       	adiw	r26, 0x06	; 6
    323c:	4d 91       	ld	r20, X+
    323e:	5c 91       	ld	r21, X
    3240:	17 97       	sbiw	r26, 0x07	; 7
    3242:	51 87       	std	Z+9, r21	; 0x09
    3244:	40 87       	std	Z+8, r20	; 0x08
    3246:	16 96       	adiw	r26, 0x06	; 6
    3248:	cd 91       	ld	r28, X+
    324a:	dc 91       	ld	r29, X
    324c:	17 97       	sbiw	r26, 0x07	; 7
    324e:	3d 83       	std	Y+5, r19	; 0x05
    3250:	2c 83       	std	Y+4, r18	; 0x04
    3252:	17 96       	adiw	r26, 0x07	; 7
    3254:	3c 93       	st	X, r19
    3256:	2e 93       	st	-X, r18
    3258:	16 97       	sbiw	r26, 0x06	; 6
    325a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    325c:	8a 9f       	mul	r24, r26
    325e:	d0 01       	movw	r26, r0
    3260:	11 24       	eor	r1, r1
    3262:	a3 50       	subi	r26, 0x03	; 3
    3264:	bc 4e       	sbci	r27, 0xEC	; 236
    3266:	b5 87       	std	Z+13, r27	; 0x0d
    3268:	a4 87       	std	Z+12, r26	; 0x0c
    326a:	8c 91       	ld	r24, X
    326c:	8f 5f       	subi	r24, 0xFF	; 255
    326e:	8c 93       	st	X, r24
    3270:	1c c0       	rjmp	.+56     	; 0x32aa <xTaskRemoveFromEventList+0x13e>
    3272:	48 ed       	ldi	r20, 0xD8	; 216
    3274:	53 e1       	ldi	r21, 0x13	; 19
    3276:	da 01       	movw	r26, r20
    3278:	11 96       	adiw	r26, 0x01	; 1
    327a:	cd 91       	ld	r28, X+
    327c:	dc 91       	ld	r29, X
    327e:	12 97       	sbiw	r26, 0x02	; 2
    3280:	d3 8b       	std	Z+19, r29	; 0x13
    3282:	c2 8b       	std	Z+18, r28	; 0x12
    3284:	8e 81       	ldd	r24, Y+6	; 0x06
    3286:	9f 81       	ldd	r25, Y+7	; 0x07
    3288:	95 8b       	std	Z+21, r25	; 0x15
    328a:	84 8b       	std	Z+20, r24	; 0x14
    328c:	8e 81       	ldd	r24, Y+6	; 0x06
    328e:	9f 81       	ldd	r25, Y+7	; 0x07
    3290:	dc 01       	movw	r26, r24
    3292:	15 96       	adiw	r26, 0x05	; 5
    3294:	3c 93       	st	X, r19
    3296:	2e 93       	st	-X, r18
    3298:	14 97       	sbiw	r26, 0x04	; 4
    329a:	3f 83       	std	Y+7, r19	; 0x07
    329c:	2e 83       	std	Y+6, r18	; 0x06
    329e:	51 8f       	std	Z+25, r21	; 0x19
    32a0:	40 8f       	std	Z+24, r20	; 0x18
    32a2:	da 01       	movw	r26, r20
    32a4:	8c 91       	ld	r24, X
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	8c 93       	st	X, r24
    32aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    32ac:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    32b0:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    32b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    32b6:	89 17       	cp	r24, r25
    32b8:	20 f4       	brcc	.+8      	; 0x32c2 <xTaskRemoveFromEventList+0x156>
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <xYieldPending>
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <xTaskRemoveFromEventList+0x158>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	08 95       	ret

000032ca <vTaskRemoveFromUnorderedEventList>:
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	dc 01       	movw	r26, r24
    32d0:	70 68       	ori	r23, 0x80	; 128
    32d2:	4d 93       	st	X+, r20
    32d4:	5d 93       	st	X+, r21
    32d6:	6d 93       	st	X+, r22
    32d8:	7c 93       	st	X, r23
    32da:	13 97       	sbiw	r26, 0x03	; 3
    32dc:	18 96       	adiw	r26, 0x08	; 8
    32de:	ed 91       	ld	r30, X+
    32e0:	fc 91       	ld	r31, X
    32e2:	19 97       	sbiw	r26, 0x09	; 9
    32e4:	1a 96       	adiw	r26, 0x0a	; 10
    32e6:	4d 91       	ld	r20, X+
    32e8:	5c 91       	ld	r21, X
    32ea:	1b 97       	sbiw	r26, 0x0b	; 11
    32ec:	14 96       	adiw	r26, 0x04	; 4
    32ee:	8d 91       	ld	r24, X+
    32f0:	9c 91       	ld	r25, X
    32f2:	15 97       	sbiw	r26, 0x05	; 5
    32f4:	16 96       	adiw	r26, 0x06	; 6
    32f6:	2d 91       	ld	r18, X+
    32f8:	3c 91       	ld	r19, X
    32fa:	17 97       	sbiw	r26, 0x07	; 7
    32fc:	ec 01       	movw	r28, r24
    32fe:	3f 83       	std	Y+7, r19	; 0x07
    3300:	2e 83       	std	Y+6, r18	; 0x06
    3302:	16 96       	adiw	r26, 0x06	; 6
    3304:	8d 91       	ld	r24, X+
    3306:	9c 91       	ld	r25, X
    3308:	17 97       	sbiw	r26, 0x07	; 7
    330a:	14 96       	adiw	r26, 0x04	; 4
    330c:	2d 91       	ld	r18, X+
    330e:	3c 91       	ld	r19, X
    3310:	15 97       	sbiw	r26, 0x05	; 5
    3312:	ec 01       	movw	r28, r24
    3314:	3d 83       	std	Y+5, r19	; 0x05
    3316:	2c 83       	std	Y+4, r18	; 0x04
    3318:	ea 01       	movw	r28, r20
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	9a 81       	ldd	r25, Y+2	; 0x02
    331e:	a8 17       	cp	r26, r24
    3320:	b9 07       	cpc	r27, r25
    3322:	31 f4       	brne	.+12     	; 0x3330 <vTaskRemoveFromUnorderedEventList+0x66>
    3324:	16 96       	adiw	r26, 0x06	; 6
    3326:	8d 91       	ld	r24, X+
    3328:	9c 91       	ld	r25, X
    332a:	17 97       	sbiw	r26, 0x07	; 7
    332c:	9a 83       	std	Y+2, r25	; 0x02
    332e:	89 83       	std	Y+1, r24	; 0x01
    3330:	1b 96       	adiw	r26, 0x0b	; 11
    3332:	1c 92       	st	X, r1
    3334:	1e 92       	st	-X, r1
    3336:	1a 97       	sbiw	r26, 0x0a	; 10
    3338:	da 01       	movw	r26, r20
    333a:	8c 91       	ld	r24, X
    333c:	81 50       	subi	r24, 0x01	; 1
    333e:	8c 93       	st	X, r24
    3340:	a4 85       	ldd	r26, Z+12	; 0x0c
    3342:	b5 85       	ldd	r27, Z+13	; 0x0d
    3344:	c6 81       	ldd	r28, Z+6	; 0x06
    3346:	d7 81       	ldd	r29, Z+7	; 0x07
    3348:	80 85       	ldd	r24, Z+8	; 0x08
    334a:	91 85       	ldd	r25, Z+9	; 0x09
    334c:	9f 83       	std	Y+7, r25	; 0x07
    334e:	8e 83       	std	Y+6, r24	; 0x06
    3350:	c0 85       	ldd	r28, Z+8	; 0x08
    3352:	d1 85       	ldd	r29, Z+9	; 0x09
    3354:	86 81       	ldd	r24, Z+6	; 0x06
    3356:	97 81       	ldd	r25, Z+7	; 0x07
    3358:	9d 83       	std	Y+5, r25	; 0x05
    335a:	8c 83       	std	Y+4, r24	; 0x04
    335c:	11 96       	adiw	r26, 0x01	; 1
    335e:	8d 91       	ld	r24, X+
    3360:	9c 91       	ld	r25, X
    3362:	12 97       	sbiw	r26, 0x02	; 2
    3364:	9f 01       	movw	r18, r30
    3366:	2e 5f       	subi	r18, 0xFE	; 254
    3368:	3f 4f       	sbci	r19, 0xFF	; 255
    336a:	82 17       	cp	r24, r18
    336c:	93 07       	cpc	r25, r19
    336e:	31 f4       	brne	.+12     	; 0x337c <vTaskRemoveFromUnorderedEventList+0xb2>
    3370:	80 85       	ldd	r24, Z+8	; 0x08
    3372:	91 85       	ldd	r25, Z+9	; 0x09
    3374:	12 96       	adiw	r26, 0x02	; 2
    3376:	9c 93       	st	X, r25
    3378:	8e 93       	st	-X, r24
    337a:	11 97       	sbiw	r26, 0x01	; 1
    337c:	15 86       	std	Z+13, r1	; 0x0d
    337e:	14 86       	std	Z+12, r1	; 0x0c
    3380:	8c 91       	ld	r24, X
    3382:	81 50       	subi	r24, 0x01	; 1
    3384:	8c 93       	st	X, r24
    3386:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3388:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    338c:	8a 17       	cp	r24, r26
    338e:	10 f4       	brcc	.+4      	; 0x3394 <vTaskRemoveFromUnorderedEventList+0xca>
    3390:	a0 93 bb 13 	sts	0x13BB, r26	; 0x8013bb <uxTopReadyPriority>
    3394:	8b e0       	ldi	r24, 0x0B	; 11
    3396:	8a 9f       	mul	r24, r26
    3398:	d0 01       	movw	r26, r0
    339a:	11 24       	eor	r1, r1
    339c:	a3 50       	subi	r26, 0x03	; 3
    339e:	bc 4e       	sbci	r27, 0xEC	; 236
    33a0:	11 96       	adiw	r26, 0x01	; 1
    33a2:	0d 90       	ld	r0, X+
    33a4:	bc 91       	ld	r27, X
    33a6:	a0 2d       	mov	r26, r0
    33a8:	b7 83       	std	Z+7, r27	; 0x07
    33aa:	a6 83       	std	Z+6, r26	; 0x06
    33ac:	16 96       	adiw	r26, 0x06	; 6
    33ae:	4d 91       	ld	r20, X+
    33b0:	5c 91       	ld	r21, X
    33b2:	17 97       	sbiw	r26, 0x07	; 7
    33b4:	51 87       	std	Z+9, r21	; 0x09
    33b6:	40 87       	std	Z+8, r20	; 0x08
    33b8:	16 96       	adiw	r26, 0x06	; 6
    33ba:	cd 91       	ld	r28, X+
    33bc:	dc 91       	ld	r29, X
    33be:	17 97       	sbiw	r26, 0x07	; 7
    33c0:	3d 83       	std	Y+5, r19	; 0x05
    33c2:	2c 83       	std	Y+4, r18	; 0x04
    33c4:	17 96       	adiw	r26, 0x07	; 7
    33c6:	3c 93       	st	X, r19
    33c8:	2e 93       	st	-X, r18
    33ca:	16 97       	sbiw	r26, 0x06	; 6
    33cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    33ce:	8a 9f       	mul	r24, r26
    33d0:	d0 01       	movw	r26, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	a3 50       	subi	r26, 0x03	; 3
    33d6:	bc 4e       	sbci	r27, 0xEC	; 236
    33d8:	b5 87       	std	Z+13, r27	; 0x0d
    33da:	a4 87       	std	Z+12, r26	; 0x0c
    33dc:	8c 91       	ld	r24, X
    33de:	8f 5f       	subi	r24, 0xFF	; 255
    33e0:	8c 93       	st	X, r24
    33e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    33e4:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    33e8:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    33ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    33ee:	89 17       	cp	r24, r25
    33f0:	18 f4       	brcc	.+6      	; 0x33f8 <vTaskRemoveFromUnorderedEventList+0x12e>
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <xYieldPending>
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	08 95       	ret

000033fe <vTaskSetTimeOutState>:
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	0f 92       	push	r0
    3404:	20 91 b4 13 	lds	r18, 0x13B4	; 0x8013b4 <xNumOfOverflows>
    3408:	fc 01       	movw	r30, r24
    340a:	20 83       	st	Z, r18
    340c:	40 91 bc 13 	lds	r20, 0x13BC	; 0x8013bc <xTickCount>
    3410:	50 91 bd 13 	lds	r21, 0x13BD	; 0x8013bd <xTickCount+0x1>
    3414:	60 91 be 13 	lds	r22, 0x13BE	; 0x8013be <xTickCount+0x2>
    3418:	70 91 bf 13 	lds	r23, 0x13BF	; 0x8013bf <xTickCount+0x3>
    341c:	41 83       	std	Z+1, r20	; 0x01
    341e:	52 83       	std	Z+2, r21	; 0x02
    3420:	63 83       	std	Z+3, r22	; 0x03
    3422:	74 83       	std	Z+4, r23	; 0x04
    3424:	0f 90       	pop	r0
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	08 95       	ret

0000342a <vTaskInternalSetTimeOutState>:
    342a:	20 91 b4 13 	lds	r18, 0x13B4	; 0x8013b4 <xNumOfOverflows>
    342e:	fc 01       	movw	r30, r24
    3430:	20 83       	st	Z, r18
    3432:	40 91 bc 13 	lds	r20, 0x13BC	; 0x8013bc <xTickCount>
    3436:	50 91 bd 13 	lds	r21, 0x13BD	; 0x8013bd <xTickCount+0x1>
    343a:	60 91 be 13 	lds	r22, 0x13BE	; 0x8013be <xTickCount+0x2>
    343e:	70 91 bf 13 	lds	r23, 0x13BF	; 0x8013bf <xTickCount+0x3>
    3442:	41 83       	std	Z+1, r20	; 0x01
    3444:	52 83       	std	Z+2, r21	; 0x02
    3446:	63 83       	std	Z+3, r22	; 0x03
    3448:	74 83       	std	Z+4, r23	; 0x04
    344a:	08 95       	ret

0000344c <xTaskCheckForTimeOut>:
    344c:	8f 92       	push	r8
    344e:	9f 92       	push	r9
    3450:	af 92       	push	r10
    3452:	bf 92       	push	r11
    3454:	cf 92       	push	r12
    3456:	df 92       	push	r13
    3458:	ef 92       	push	r14
    345a:	ff 92       	push	r15
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	fb 01       	movw	r30, r22
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	0f 92       	push	r0
    346c:	c0 90 bc 13 	lds	r12, 0x13BC	; 0x8013bc <xTickCount>
    3470:	d0 90 bd 13 	lds	r13, 0x13BD	; 0x8013bd <xTickCount+0x1>
    3474:	e0 90 be 13 	lds	r14, 0x13BE	; 0x8013be <xTickCount+0x2>
    3478:	f0 90 bf 13 	lds	r15, 0x13BF	; 0x8013bf <xTickCount+0x3>
    347c:	dc 01       	movw	r26, r24
    347e:	11 96       	adiw	r26, 0x01	; 1
    3480:	0d 91       	ld	r16, X+
    3482:	1d 91       	ld	r17, X+
    3484:	2d 91       	ld	r18, X+
    3486:	3c 91       	ld	r19, X
    3488:	14 97       	sbiw	r26, 0x04	; 4
    348a:	46 01       	movw	r8, r12
    348c:	57 01       	movw	r10, r14
    348e:	80 1a       	sub	r8, r16
    3490:	91 0a       	sbc	r9, r17
    3492:	a2 0a       	sbc	r10, r18
    3494:	b3 0a       	sbc	r11, r19
    3496:	40 81       	ld	r20, Z
    3498:	51 81       	ldd	r21, Z+1	; 0x01
    349a:	62 81       	ldd	r22, Z+2	; 0x02
    349c:	73 81       	ldd	r23, Z+3	; 0x03
    349e:	4f 3f       	cpi	r20, 0xFF	; 255
    34a0:	bf ef       	ldi	r27, 0xFF	; 255
    34a2:	5b 07       	cpc	r21, r27
    34a4:	6b 07       	cpc	r22, r27
    34a6:	7b 07       	cpc	r23, r27
    34a8:	39 f1       	breq	.+78     	; 0x34f8 <xTaskCheckForTimeOut+0xac>
    34aa:	ec 01       	movw	r28, r24
    34ac:	b8 81       	ld	r27, Y
    34ae:	a0 91 b4 13 	lds	r26, 0x13B4	; 0x8013b4 <xNumOfOverflows>
    34b2:	ba 17       	cp	r27, r26
    34b4:	59 f0       	breq	.+22     	; 0x34cc <xTaskCheckForTimeOut+0x80>
    34b6:	c0 16       	cp	r12, r16
    34b8:	d1 06       	cpc	r13, r17
    34ba:	e2 06       	cpc	r14, r18
    34bc:	f3 06       	cpc	r15, r19
    34be:	30 f0       	brcs	.+12     	; 0x34cc <xTaskCheckForTimeOut+0x80>
    34c0:	10 82       	st	Z, r1
    34c2:	11 82       	std	Z+1, r1	; 0x01
    34c4:	12 82       	std	Z+2, r1	; 0x02
    34c6:	13 82       	std	Z+3, r1	; 0x03
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	17 c0       	rjmp	.+46     	; 0x34fa <xTaskCheckForTimeOut+0xae>
    34cc:	84 16       	cp	r8, r20
    34ce:	95 06       	cpc	r9, r21
    34d0:	a6 06       	cpc	r10, r22
    34d2:	b7 06       	cpc	r11, r23
    34d4:	58 f4       	brcc	.+22     	; 0x34ec <xTaskCheckForTimeOut+0xa0>
    34d6:	48 19       	sub	r20, r8
    34d8:	59 09       	sbc	r21, r9
    34da:	6a 09       	sbc	r22, r10
    34dc:	7b 09       	sbc	r23, r11
    34de:	40 83       	st	Z, r20
    34e0:	51 83       	std	Z+1, r21	; 0x01
    34e2:	62 83       	std	Z+2, r22	; 0x02
    34e4:	73 83       	std	Z+3, r23	; 0x03
    34e6:	a1 df       	rcall	.-190    	; 0x342a <vTaskInternalSetTimeOutState>
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	07 c0       	rjmp	.+14     	; 0x34fa <xTaskCheckForTimeOut+0xae>
    34ec:	10 82       	st	Z, r1
    34ee:	11 82       	std	Z+1, r1	; 0x01
    34f0:	12 82       	std	Z+2, r1	; 0x02
    34f2:	13 82       	std	Z+3, r1	; 0x03
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <xTaskCheckForTimeOut+0xae>
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	0f 90       	pop	r0
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	ff 90       	pop	r15
    3508:	ef 90       	pop	r14
    350a:	df 90       	pop	r13
    350c:	cf 90       	pop	r12
    350e:	bf 90       	pop	r11
    3510:	af 90       	pop	r10
    3512:	9f 90       	pop	r9
    3514:	8f 90       	pop	r8
    3516:	08 95       	ret

00003518 <vTaskMissedYield>:
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <xYieldPending>
    351e:	08 95       	ret

00003520 <xTaskGetCurrentTaskHandle>:
    3520:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    3524:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3528:	08 95       	ret

0000352a <xTaskGetSchedulerState>:
    352a:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <xSchedulerRunning>
    352e:	88 23       	and	r24, r24
    3530:	31 f0       	breq	.+12     	; 0x353e <xTaskGetSchedulerState+0x14>
    3532:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    3536:	81 11       	cpse	r24, r1
    3538:	04 c0       	rjmp	.+8      	; 0x3542 <xTaskGetSchedulerState+0x18>
    353a:	82 e0       	ldi	r24, 0x02	; 2
    353c:	08 95       	ret
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	08 95       	ret
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	08 95       	ret

00003546 <xTaskPriorityInherit>:
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	fc 01       	movw	r30, r24
    3550:	89 2b       	or	r24, r25
    3552:	09 f4       	brne	.+2      	; 0x3556 <xTaskPriorityInherit+0x10>
    3554:	77 c0       	rjmp	.+238    	; 0x3644 <xTaskPriorityInherit+0xfe>
    3556:	82 8d       	ldd	r24, Z+26	; 0x1a
    3558:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    355c:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3560:	5a 96       	adiw	r26, 0x1a	; 26
    3562:	9c 91       	ld	r25, X
    3564:	89 17       	cp	r24, r25
    3566:	08 f0       	brcs	.+2      	; 0x356a <xTaskPriorityInherit+0x24>
    3568:	63 c0       	rjmp	.+198    	; 0x3630 <xTaskPriorityInherit+0xea>
    356a:	46 85       	ldd	r20, Z+14	; 0x0e
    356c:	57 85       	ldd	r21, Z+15	; 0x0f
    356e:	60 89       	ldd	r22, Z+16	; 0x10
    3570:	71 89       	ldd	r23, Z+17	; 0x11
    3572:	77 23       	and	r23, r23
    3574:	94 f0       	brlt	.+36     	; 0x359a <xTaskPriorityInherit+0x54>
    3576:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    357a:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    357e:	5a 96       	adiw	r26, 0x1a	; 26
    3580:	9c 91       	ld	r25, X
    3582:	4a e0       	ldi	r20, 0x0A	; 10
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	49 1b       	sub	r20, r25
    358c:	51 09       	sbc	r21, r1
    358e:	61 09       	sbc	r22, r1
    3590:	71 09       	sbc	r23, r1
    3592:	46 87       	std	Z+14, r20	; 0x0e
    3594:	57 87       	std	Z+15, r21	; 0x0f
    3596:	60 8b       	std	Z+16, r22	; 0x10
    3598:	71 8b       	std	Z+17, r23	; 0x11
    359a:	24 85       	ldd	r18, Z+12	; 0x0c
    359c:	35 85       	ldd	r19, Z+13	; 0x0d
    359e:	4b e0       	ldi	r20, 0x0B	; 11
    35a0:	84 9f       	mul	r24, r20
    35a2:	c0 01       	movw	r24, r0
    35a4:	11 24       	eor	r1, r1
    35a6:	83 50       	subi	r24, 0x03	; 3
    35a8:	9c 4e       	sbci	r25, 0xEC	; 236
    35aa:	28 17       	cp	r18, r24
    35ac:	39 07       	cpc	r19, r25
    35ae:	b9 f5       	brne	.+110    	; 0x361e <xTaskPriorityInherit+0xd8>
    35b0:	ef 01       	movw	r28, r30
    35b2:	8f 01       	movw	r16, r30
    35b4:	0e 5f       	subi	r16, 0xFE	; 254
    35b6:	1f 4f       	sbci	r17, 0xFF	; 255
    35b8:	c8 01       	movw	r24, r16
    35ba:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
    35be:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    35c2:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    35c6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    35c8:	ea 8f       	std	Y+26, r30	; 0x1a
    35ca:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    35ce:	8e 17       	cp	r24, r30
    35d0:	10 f4       	brcc	.+4      	; 0x35d6 <xTaskPriorityInherit+0x90>
    35d2:	e0 93 bb 13 	sts	0x13BB, r30	; 0x8013bb <uxTopReadyPriority>
    35d6:	8b e0       	ldi	r24, 0x0B	; 11
    35d8:	8e 9f       	mul	r24, r30
    35da:	f0 01       	movw	r30, r0
    35dc:	11 24       	eor	r1, r1
    35de:	e3 50       	subi	r30, 0x03	; 3
    35e0:	fc 4e       	sbci	r31, 0xEC	; 236
    35e2:	01 80       	ldd	r0, Z+1	; 0x01
    35e4:	f2 81       	ldd	r31, Z+2	; 0x02
    35e6:	e0 2d       	mov	r30, r0
    35e8:	ff 83       	std	Y+7, r31	; 0x07
    35ea:	ee 83       	std	Y+6, r30	; 0x06
    35ec:	26 81       	ldd	r18, Z+6	; 0x06
    35ee:	37 81       	ldd	r19, Z+7	; 0x07
    35f0:	39 87       	std	Y+9, r19	; 0x09
    35f2:	28 87       	std	Y+8, r18	; 0x08
    35f4:	a6 81       	ldd	r26, Z+6	; 0x06
    35f6:	b7 81       	ldd	r27, Z+7	; 0x07
    35f8:	15 96       	adiw	r26, 0x05	; 5
    35fa:	1c 93       	st	X, r17
    35fc:	0e 93       	st	-X, r16
    35fe:	14 97       	sbiw	r26, 0x04	; 4
    3600:	17 83       	std	Z+7, r17	; 0x07
    3602:	06 83       	std	Z+6, r16	; 0x06
    3604:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3606:	8e 9f       	mul	r24, r30
    3608:	f0 01       	movw	r30, r0
    360a:	11 24       	eor	r1, r1
    360c:	e3 50       	subi	r30, 0x03	; 3
    360e:	fc 4e       	sbci	r31, 0xEC	; 236
    3610:	fd 87       	std	Y+13, r31	; 0x0d
    3612:	ec 87       	std	Y+12, r30	; 0x0c
    3614:	80 81       	ld	r24, Z
    3616:	8f 5f       	subi	r24, 0xFF	; 255
    3618:	80 83       	st	Z, r24
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	16 c0       	rjmp	.+44     	; 0x364a <xTaskPriorityInherit+0x104>
    361e:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    3622:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3626:	5a 96       	adiw	r26, 0x1a	; 26
    3628:	8c 91       	ld	r24, X
    362a:	82 8f       	std	Z+26, r24	; 0x1a
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	0d c0       	rjmp	.+26     	; 0x364a <xTaskPriorityInherit+0x104>
    3630:	95 a5       	ldd	r25, Z+45	; 0x2d
    3632:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    3636:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    363a:	82 8d       	ldd	r24, Z+26	; 0x1a
    363c:	98 17       	cp	r25, r24
    363e:	20 f0       	brcs	.+8      	; 0x3648 <xTaskPriorityInherit+0x102>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	03 c0       	rjmp	.+6      	; 0x364a <xTaskPriorityInherit+0x104>
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	01 c0       	rjmp	.+2      	; 0x364a <xTaskPriorityInherit+0x104>
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	df 91       	pop	r29
    364c:	cf 91       	pop	r28
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	08 95       	ret

00003654 <xTaskPriorityDisinherit>:
    3654:	0f 93       	push	r16
    3656:	1f 93       	push	r17
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	fc 01       	movw	r30, r24
    365e:	89 2b       	or	r24, r25
    3660:	09 f4       	brne	.+2      	; 0x3664 <xTaskPriorityDisinherit+0x10>
    3662:	49 c0       	rjmp	.+146    	; 0x36f6 <xTaskPriorityDisinherit+0xa2>
    3664:	86 a5       	ldd	r24, Z+46	; 0x2e
    3666:	81 50       	subi	r24, 0x01	; 1
    3668:	86 a7       	std	Z+46, r24	; 0x2e
    366a:	22 8d       	ldd	r18, Z+26	; 0x1a
    366c:	95 a5       	ldd	r25, Z+45	; 0x2d
    366e:	29 17       	cp	r18, r25
    3670:	09 f4       	brne	.+2      	; 0x3674 <xTaskPriorityDisinherit+0x20>
    3672:	43 c0       	rjmp	.+134    	; 0x36fa <xTaskPriorityDisinherit+0xa6>
    3674:	81 11       	cpse	r24, r1
    3676:	43 c0       	rjmp	.+134    	; 0x36fe <xTaskPriorityDisinherit+0xaa>
    3678:	ef 01       	movw	r28, r30
    367a:	8f 01       	movw	r16, r30
    367c:	0e 5f       	subi	r16, 0xFE	; 254
    367e:	1f 4f       	sbci	r17, 0xFF	; 255
    3680:	c8 01       	movw	r24, r16
    3682:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
    3686:	ed a5       	ldd	r30, Y+45	; 0x2d
    3688:	ea 8f       	std	Y+26, r30	; 0x1a
    368a:	8a e0       	ldi	r24, 0x0A	; 10
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	a0 e0       	ldi	r26, 0x00	; 0
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	8e 1b       	sub	r24, r30
    3694:	91 09       	sbc	r25, r1
    3696:	a1 09       	sbc	r26, r1
    3698:	b1 09       	sbc	r27, r1
    369a:	8e 87       	std	Y+14, r24	; 0x0e
    369c:	9f 87       	std	Y+15, r25	; 0x0f
    369e:	a8 8b       	std	Y+16, r26	; 0x10
    36a0:	b9 8b       	std	Y+17, r27	; 0x11
    36a2:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    36a6:	8e 17       	cp	r24, r30
    36a8:	10 f4       	brcc	.+4      	; 0x36ae <xTaskPriorityDisinherit+0x5a>
    36aa:	e0 93 bb 13 	sts	0x13BB, r30	; 0x8013bb <uxTopReadyPriority>
    36ae:	8b e0       	ldi	r24, 0x0B	; 11
    36b0:	8e 9f       	mul	r24, r30
    36b2:	f0 01       	movw	r30, r0
    36b4:	11 24       	eor	r1, r1
    36b6:	e3 50       	subi	r30, 0x03	; 3
    36b8:	fc 4e       	sbci	r31, 0xEC	; 236
    36ba:	01 80       	ldd	r0, Z+1	; 0x01
    36bc:	f2 81       	ldd	r31, Z+2	; 0x02
    36be:	e0 2d       	mov	r30, r0
    36c0:	ff 83       	std	Y+7, r31	; 0x07
    36c2:	ee 83       	std	Y+6, r30	; 0x06
    36c4:	26 81       	ldd	r18, Z+6	; 0x06
    36c6:	37 81       	ldd	r19, Z+7	; 0x07
    36c8:	39 87       	std	Y+9, r19	; 0x09
    36ca:	28 87       	std	Y+8, r18	; 0x08
    36cc:	a6 81       	ldd	r26, Z+6	; 0x06
    36ce:	b7 81       	ldd	r27, Z+7	; 0x07
    36d0:	15 96       	adiw	r26, 0x05	; 5
    36d2:	1c 93       	st	X, r17
    36d4:	0e 93       	st	-X, r16
    36d6:	14 97       	sbiw	r26, 0x04	; 4
    36d8:	17 83       	std	Z+7, r17	; 0x07
    36da:	06 83       	std	Z+6, r16	; 0x06
    36dc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    36de:	8e 9f       	mul	r24, r30
    36e0:	f0 01       	movw	r30, r0
    36e2:	11 24       	eor	r1, r1
    36e4:	e3 50       	subi	r30, 0x03	; 3
    36e6:	fc 4e       	sbci	r31, 0xEC	; 236
    36e8:	fd 87       	std	Y+13, r31	; 0x0d
    36ea:	ec 87       	std	Y+12, r30	; 0x0c
    36ec:	80 81       	ld	r24, Z
    36ee:	8f 5f       	subi	r24, 0xFF	; 255
    36f0:	80 83       	st	Z, r24
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	05 c0       	rjmp	.+10     	; 0x3700 <xTaskPriorityDisinherit+0xac>
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	03 c0       	rjmp	.+6      	; 0x3700 <xTaskPriorityDisinherit+0xac>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	01 c0       	rjmp	.+2      	; 0x3700 <xTaskPriorityDisinherit+0xac>
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	08 95       	ret

0000370a <vTaskPriorityDisinheritAfterTimeout>:
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	fc 01       	movw	r30, r24
    3714:	89 2b       	or	r24, r25
    3716:	09 f4       	brne	.+2      	; 0x371a <vTaskPriorityDisinheritAfterTimeout+0x10>
    3718:	5a c0       	rjmp	.+180    	; 0x37ce <vTaskPriorityDisinheritAfterTimeout+0xc4>
    371a:	85 a5       	ldd	r24, Z+45	; 0x2d
    371c:	86 17       	cp	r24, r22
    371e:	08 f4       	brcc	.+2      	; 0x3722 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3720:	86 2f       	mov	r24, r22
    3722:	92 8d       	ldd	r25, Z+26	; 0x1a
    3724:	89 17       	cp	r24, r25
    3726:	09 f4       	brne	.+2      	; 0x372a <vTaskPriorityDisinheritAfterTimeout+0x20>
    3728:	52 c0       	rjmp	.+164    	; 0x37ce <vTaskPriorityDisinheritAfterTimeout+0xc4>
    372a:	26 a5       	ldd	r18, Z+46	; 0x2e
    372c:	21 30       	cpi	r18, 0x01	; 1
    372e:	09 f0       	breq	.+2      	; 0x3732 <vTaskPriorityDisinheritAfterTimeout+0x28>
    3730:	4e c0       	rjmp	.+156    	; 0x37ce <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3732:	82 8f       	std	Z+26, r24	; 0x1a
    3734:	46 85       	ldd	r20, Z+14	; 0x0e
    3736:	57 85       	ldd	r21, Z+15	; 0x0f
    3738:	60 89       	ldd	r22, Z+16	; 0x10
    373a:	71 89       	ldd	r23, Z+17	; 0x11
    373c:	77 23       	and	r23, r23
    373e:	64 f0       	brlt	.+24     	; 0x3758 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3740:	4a e0       	ldi	r20, 0x0A	; 10
    3742:	50 e0       	ldi	r21, 0x00	; 0
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	70 e0       	ldi	r23, 0x00	; 0
    3748:	48 1b       	sub	r20, r24
    374a:	51 09       	sbc	r21, r1
    374c:	61 09       	sbc	r22, r1
    374e:	71 09       	sbc	r23, r1
    3750:	46 87       	std	Z+14, r20	; 0x0e
    3752:	57 87       	std	Z+15, r21	; 0x0f
    3754:	60 8b       	std	Z+16, r22	; 0x10
    3756:	71 8b       	std	Z+17, r23	; 0x11
    3758:	24 85       	ldd	r18, Z+12	; 0x0c
    375a:	35 85       	ldd	r19, Z+13	; 0x0d
    375c:	4b e0       	ldi	r20, 0x0B	; 11
    375e:	94 9f       	mul	r25, r20
    3760:	c0 01       	movw	r24, r0
    3762:	11 24       	eor	r1, r1
    3764:	83 50       	subi	r24, 0x03	; 3
    3766:	9c 4e       	sbci	r25, 0xEC	; 236
    3768:	28 17       	cp	r18, r24
    376a:	39 07       	cpc	r19, r25
    376c:	81 f5       	brne	.+96     	; 0x37ce <vTaskPriorityDisinheritAfterTimeout+0xc4>
    376e:	ef 01       	movw	r28, r30
    3770:	8f 01       	movw	r16, r30
    3772:	0e 5f       	subi	r16, 0xFE	; 254
    3774:	1f 4f       	sbci	r17, 0xFF	; 255
    3776:	c8 01       	movw	r24, r16
    3778:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
    377c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    377e:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    3782:	8e 17       	cp	r24, r30
    3784:	10 f4       	brcc	.+4      	; 0x378a <vTaskPriorityDisinheritAfterTimeout+0x80>
    3786:	e0 93 bb 13 	sts	0x13BB, r30	; 0x8013bb <uxTopReadyPriority>
    378a:	8b e0       	ldi	r24, 0x0B	; 11
    378c:	8e 9f       	mul	r24, r30
    378e:	f0 01       	movw	r30, r0
    3790:	11 24       	eor	r1, r1
    3792:	e3 50       	subi	r30, 0x03	; 3
    3794:	fc 4e       	sbci	r31, 0xEC	; 236
    3796:	01 80       	ldd	r0, Z+1	; 0x01
    3798:	f2 81       	ldd	r31, Z+2	; 0x02
    379a:	e0 2d       	mov	r30, r0
    379c:	ff 83       	std	Y+7, r31	; 0x07
    379e:	ee 83       	std	Y+6, r30	; 0x06
    37a0:	26 81       	ldd	r18, Z+6	; 0x06
    37a2:	37 81       	ldd	r19, Z+7	; 0x07
    37a4:	39 87       	std	Y+9, r19	; 0x09
    37a6:	28 87       	std	Y+8, r18	; 0x08
    37a8:	a6 81       	ldd	r26, Z+6	; 0x06
    37aa:	b7 81       	ldd	r27, Z+7	; 0x07
    37ac:	15 96       	adiw	r26, 0x05	; 5
    37ae:	1c 93       	st	X, r17
    37b0:	0e 93       	st	-X, r16
    37b2:	14 97       	sbiw	r26, 0x04	; 4
    37b4:	17 83       	std	Z+7, r17	; 0x07
    37b6:	06 83       	std	Z+6, r16	; 0x06
    37b8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    37ba:	8e 9f       	mul	r24, r30
    37bc:	f0 01       	movw	r30, r0
    37be:	11 24       	eor	r1, r1
    37c0:	e3 50       	subi	r30, 0x03	; 3
    37c2:	fc 4e       	sbci	r31, 0xEC	; 236
    37c4:	fd 87       	std	Y+13, r31	; 0x0d
    37c6:	ec 87       	std	Y+12, r30	; 0x0c
    37c8:	80 81       	ld	r24, Z
    37ca:	8f 5f       	subi	r24, 0xFF	; 255
    37cc:	80 83       	st	Z, r24
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <uxTaskResetEventItemValue>:
    37d8:	cf 92       	push	r12
    37da:	df 92       	push	r13
    37dc:	ef 92       	push	r14
    37de:	ff 92       	push	r15
    37e0:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    37e4:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    37e8:	66 85       	ldd	r22, Z+14	; 0x0e
    37ea:	77 85       	ldd	r23, Z+15	; 0x0f
    37ec:	80 89       	ldd	r24, Z+16	; 0x10
    37ee:	91 89       	ldd	r25, Z+17	; 0x11
    37f0:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    37f4:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    37f8:	a0 91 6b 14 	lds	r26, 0x146B	; 0x80146b <pxCurrentTCB>
    37fc:	b0 91 6c 14 	lds	r27, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3800:	5a 96       	adiw	r26, 0x1a	; 26
    3802:	2c 91       	ld	r18, X
    3804:	0f 2e       	mov	r0, r31
    3806:	fa e0       	ldi	r31, 0x0A	; 10
    3808:	cf 2e       	mov	r12, r31
    380a:	d1 2c       	mov	r13, r1
    380c:	e1 2c       	mov	r14, r1
    380e:	f1 2c       	mov	r15, r1
    3810:	f0 2d       	mov	r31, r0
    3812:	c2 1a       	sub	r12, r18
    3814:	d1 08       	sbc	r13, r1
    3816:	e1 08       	sbc	r14, r1
    3818:	f1 08       	sbc	r15, r1
    381a:	c6 86       	std	Z+14, r12	; 0x0e
    381c:	d7 86       	std	Z+15, r13	; 0x0f
    381e:	e0 8a       	std	Z+16, r14	; 0x10
    3820:	f1 8a       	std	Z+17, r15	; 0x11
    3822:	ff 90       	pop	r15
    3824:	ef 90       	pop	r14
    3826:	df 90       	pop	r13
    3828:	cf 90       	pop	r12
    382a:	08 95       	ret

0000382c <pvTaskIncrementMutexHeldCount>:
    382c:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    3830:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3834:	89 2b       	or	r24, r25
    3836:	39 f0       	breq	.+14     	; 0x3846 <pvTaskIncrementMutexHeldCount+0x1a>
    3838:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    383c:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3840:	86 a5       	ldd	r24, Z+46	; 0x2e
    3842:	8f 5f       	subi	r24, 0xFF	; 255
    3844:	86 a7       	std	Z+46, r24	; 0x2e
    3846:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    384a:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    384e:	08 95       	ret

00003850 <xTaskGenericNotifyWait>:
    3850:	4f 92       	push	r4
    3852:	5f 92       	push	r5
    3854:	6f 92       	push	r6
    3856:	7f 92       	push	r7
    3858:	af 92       	push	r10
    385a:	bf 92       	push	r11
    385c:	cf 92       	push	r12
    385e:	df 92       	push	r13
    3860:	ef 92       	push	r14
    3862:	ff 92       	push	r15
    3864:	0f 93       	push	r16
    3866:	1f 93       	push	r17
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	28 01       	movw	r4, r16
    386e:	39 01       	movw	r6, r18
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	0f 92       	push	r0
    3876:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    387a:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    387e:	c8 2f       	mov	r28, r24
    3880:	d0 e0       	ldi	r29, 0x00	; 0
    3882:	ec 0f       	add	r30, r28
    3884:	fd 1f       	adc	r31, r29
    3886:	83 a9       	ldd	r24, Z+51	; 0x33
    3888:	82 30       	cpi	r24, 0x02	; 2
    388a:	79 f1       	breq	.+94     	; 0x38ea <xTaskGenericNotifyWait+0x9a>
    388c:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    3890:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3894:	ce 01       	movw	r24, r28
    3896:	88 0f       	add	r24, r24
    3898:	99 1f       	adc	r25, r25
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	e8 0f       	add	r30, r24
    38a0:	f9 1f       	adc	r31, r25
    38a2:	87 a5       	ldd	r24, Z+47	; 0x2f
    38a4:	90 a9       	ldd	r25, Z+48	; 0x30
    38a6:	a1 a9       	ldd	r26, Z+49	; 0x31
    38a8:	b2 a9       	ldd	r27, Z+50	; 0x32
    38aa:	40 95       	com	r20
    38ac:	50 95       	com	r21
    38ae:	60 95       	com	r22
    38b0:	70 95       	com	r23
    38b2:	48 23       	and	r20, r24
    38b4:	59 23       	and	r21, r25
    38b6:	6a 23       	and	r22, r26
    38b8:	7b 23       	and	r23, r27
    38ba:	47 a7       	std	Z+47, r20	; 0x2f
    38bc:	50 ab       	std	Z+48, r21	; 0x30
    38be:	61 ab       	std	Z+49, r22	; 0x31
    38c0:	72 ab       	std	Z+50, r23	; 0x32
    38c2:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    38c6:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    38ca:	ec 0f       	add	r30, r28
    38cc:	fd 1f       	adc	r31, r29
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	83 ab       	std	Z+51, r24	; 0x33
    38d2:	a1 14       	cp	r10, r1
    38d4:	b1 04       	cpc	r11, r1
    38d6:	c1 04       	cpc	r12, r1
    38d8:	d1 04       	cpc	r13, r1
    38da:	39 f0       	breq	.+14     	; 0x38ea <xTaskGenericNotifyWait+0x9a>
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	c6 01       	movw	r24, r12
    38e0:	b5 01       	movw	r22, r10
    38e2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <prvAddCurrentTaskToDelayedList>
    38e6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    38ea:	0f 90       	pop	r0
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	0f 92       	push	r0
    38f4:	e1 14       	cp	r14, r1
    38f6:	f1 04       	cpc	r15, r1
    38f8:	a1 f0       	breq	.+40     	; 0x3922 <xTaskGenericNotifyWait+0xd2>
    38fa:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    38fe:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3902:	ce 01       	movw	r24, r28
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	e8 0f       	add	r30, r24
    390e:	f9 1f       	adc	r31, r25
    3910:	87 a5       	ldd	r24, Z+47	; 0x2f
    3912:	90 a9       	ldd	r25, Z+48	; 0x30
    3914:	a1 a9       	ldd	r26, Z+49	; 0x31
    3916:	b2 a9       	ldd	r27, Z+50	; 0x32
    3918:	f7 01       	movw	r30, r14
    391a:	80 83       	st	Z, r24
    391c:	91 83       	std	Z+1, r25	; 0x01
    391e:	a2 83       	std	Z+2, r26	; 0x02
    3920:	b3 83       	std	Z+3, r27	; 0x03
    3922:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    3926:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    392a:	ec 0f       	add	r30, r28
    392c:	fd 1f       	adc	r31, r29
    392e:	83 a9       	ldd	r24, Z+51	; 0x33
    3930:	82 30       	cpi	r24, 0x02	; 2
    3932:	e9 f4       	brne	.+58     	; 0x396e <xTaskGenericNotifyWait+0x11e>
    3934:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    3938:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    393c:	ce 01       	movw	r24, r28
    393e:	88 0f       	add	r24, r24
    3940:	99 1f       	adc	r25, r25
    3942:	88 0f       	add	r24, r24
    3944:	99 1f       	adc	r25, r25
    3946:	e8 0f       	add	r30, r24
    3948:	f9 1f       	adc	r31, r25
    394a:	87 a5       	ldd	r24, Z+47	; 0x2f
    394c:	90 a9       	ldd	r25, Z+48	; 0x30
    394e:	a1 a9       	ldd	r26, Z+49	; 0x31
    3950:	b2 a9       	ldd	r27, Z+50	; 0x32
    3952:	40 94       	com	r4
    3954:	50 94       	com	r5
    3956:	60 94       	com	r6
    3958:	70 94       	com	r7
    395a:	48 22       	and	r4, r24
    395c:	59 22       	and	r5, r25
    395e:	6a 22       	and	r6, r26
    3960:	7b 22       	and	r7, r27
    3962:	47 a6       	std	Z+47, r4	; 0x2f
    3964:	50 aa       	std	Z+48, r5	; 0x30
    3966:	61 aa       	std	Z+49, r6	; 0x31
    3968:	72 aa       	std	Z+50, r7	; 0x32
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	01 c0       	rjmp	.+2      	; 0x3970 <xTaskGenericNotifyWait+0x120>
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	20 91 6b 14 	lds	r18, 0x146B	; 0x80146b <pxCurrentTCB>
    3974:	30 91 6c 14 	lds	r19, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3978:	c2 0f       	add	r28, r18
    397a:	d3 1f       	adc	r29, r19
    397c:	1b aa       	std	Y+51, r1	; 0x33
    397e:	0f 90       	pop	r0
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	1f 91       	pop	r17
    3988:	0f 91       	pop	r16
    398a:	ff 90       	pop	r15
    398c:	ef 90       	pop	r14
    398e:	df 90       	pop	r13
    3990:	cf 90       	pop	r12
    3992:	bf 90       	pop	r11
    3994:	af 90       	pop	r10
    3996:	7f 90       	pop	r7
    3998:	6f 90       	pop	r6
    399a:	5f 90       	pop	r5
    399c:	4f 90       	pop	r4
    399e:	08 95       	ret

000039a0 <xTaskGenericNotify>:
    39a0:	8f 92       	push	r8
    39a2:	9f 92       	push	r9
    39a4:	af 92       	push	r10
    39a6:	bf 92       	push	r11
    39a8:	ef 92       	push	r14
    39aa:	ff 92       	push	r15
    39ac:	0f 93       	push	r16
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	dc 01       	movw	r26, r24
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	0f 92       	push	r0
    39ba:	e1 14       	cp	r14, r1
    39bc:	f1 04       	cpc	r15, r1
    39be:	89 f0       	breq	.+34     	; 0x39e2 <xTaskGenericNotify+0x42>
    39c0:	e6 2f       	mov	r30, r22
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	ee 0f       	add	r30, r30
    39c6:	ff 1f       	adc	r31, r31
    39c8:	ee 0f       	add	r30, r30
    39ca:	ff 1f       	adc	r31, r31
    39cc:	e8 0f       	add	r30, r24
    39ce:	f9 1f       	adc	r31, r25
    39d0:	87 a4       	ldd	r8, Z+47	; 0x2f
    39d2:	90 a8       	ldd	r9, Z+48	; 0x30
    39d4:	a1 a8       	ldd	r10, Z+49	; 0x31
    39d6:	b2 a8       	ldd	r11, Z+50	; 0x32
    39d8:	f7 01       	movw	r30, r14
    39da:	80 82       	st	Z, r8
    39dc:	91 82       	std	Z+1, r9	; 0x01
    39de:	a2 82       	std	Z+2, r10	; 0x02
    39e0:	b3 82       	std	Z+3, r11	; 0x03
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	fd 01       	movw	r30, r26
    39e6:	e6 0f       	add	r30, r22
    39e8:	f7 1f       	adc	r31, r23
    39ea:	83 a9       	ldd	r24, Z+51	; 0x33
    39ec:	92 e0       	ldi	r25, 0x02	; 2
    39ee:	93 ab       	std	Z+51, r25	; 0x33
    39f0:	02 30       	cpi	r16, 0x02	; 2
    39f2:	01 f1       	breq	.+64     	; 0x3a34 <xTaskGenericNotify+0x94>
    39f4:	18 f4       	brcc	.+6      	; 0x39fc <xTaskGenericNotify+0x5c>
    39f6:	01 30       	cpi	r16, 0x01	; 1
    39f8:	31 f0       	breq	.+12     	; 0x3a06 <xTaskGenericNotify+0x66>
    39fa:	4d c0       	rjmp	.+154    	; 0x3a96 <xTaskGenericNotify+0xf6>
    39fc:	03 30       	cpi	r16, 0x03	; 3
    39fe:	79 f1       	breq	.+94     	; 0x3a5e <xTaskGenericNotify+0xbe>
    3a00:	04 30       	cpi	r16, 0x04	; 4
    3a02:	d1 f1       	breq	.+116    	; 0x3a78 <xTaskGenericNotify+0xd8>
    3a04:	48 c0       	rjmp	.+144    	; 0x3a96 <xTaskGenericNotify+0xf6>
    3a06:	66 0f       	add	r22, r22
    3a08:	77 1f       	adc	r23, r23
    3a0a:	66 0f       	add	r22, r22
    3a0c:	77 1f       	adc	r23, r23
    3a0e:	fd 01       	movw	r30, r26
    3a10:	e6 0f       	add	r30, r22
    3a12:	f7 1f       	adc	r31, r23
    3a14:	87 a4       	ldd	r8, Z+47	; 0x2f
    3a16:	90 a8       	ldd	r9, Z+48	; 0x30
    3a18:	a1 a8       	ldd	r10, Z+49	; 0x31
    3a1a:	b2 a8       	ldd	r11, Z+50	; 0x32
    3a1c:	ba 01       	movw	r22, r20
    3a1e:	a9 01       	movw	r20, r18
    3a20:	48 29       	or	r20, r8
    3a22:	59 29       	or	r21, r9
    3a24:	6a 29       	or	r22, r10
    3a26:	7b 29       	or	r23, r11
    3a28:	47 a7       	std	Z+47, r20	; 0x2f
    3a2a:	50 ab       	std	Z+48, r21	; 0x30
    3a2c:	61 ab       	std	Z+49, r22	; 0x31
    3a2e:	72 ab       	std	Z+50, r23	; 0x32
    3a30:	01 e0       	ldi	r16, 0x01	; 1
    3a32:	34 c0       	rjmp	.+104    	; 0x3a9c <xTaskGenericNotify+0xfc>
    3a34:	66 0f       	add	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	66 0f       	add	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	fd 01       	movw	r30, r26
    3a3e:	e6 0f       	add	r30, r22
    3a40:	f7 1f       	adc	r31, r23
    3a42:	47 a5       	ldd	r20, Z+47	; 0x2f
    3a44:	50 a9       	ldd	r21, Z+48	; 0x30
    3a46:	61 a9       	ldd	r22, Z+49	; 0x31
    3a48:	72 a9       	ldd	r23, Z+50	; 0x32
    3a4a:	4f 5f       	subi	r20, 0xFF	; 255
    3a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a4e:	6f 4f       	sbci	r22, 0xFF	; 255
    3a50:	7f 4f       	sbci	r23, 0xFF	; 255
    3a52:	47 a7       	std	Z+47, r20	; 0x2f
    3a54:	50 ab       	std	Z+48, r21	; 0x30
    3a56:	61 ab       	std	Z+49, r22	; 0x31
    3a58:	72 ab       	std	Z+50, r23	; 0x32
    3a5a:	01 e0       	ldi	r16, 0x01	; 1
    3a5c:	1f c0       	rjmp	.+62     	; 0x3a9c <xTaskGenericNotify+0xfc>
    3a5e:	66 0f       	add	r22, r22
    3a60:	77 1f       	adc	r23, r23
    3a62:	66 0f       	add	r22, r22
    3a64:	77 1f       	adc	r23, r23
    3a66:	fd 01       	movw	r30, r26
    3a68:	e6 0f       	add	r30, r22
    3a6a:	f7 1f       	adc	r31, r23
    3a6c:	27 a7       	std	Z+47, r18	; 0x2f
    3a6e:	30 ab       	std	Z+48, r19	; 0x30
    3a70:	41 ab       	std	Z+49, r20	; 0x31
    3a72:	52 ab       	std	Z+50, r21	; 0x32
    3a74:	01 e0       	ldi	r16, 0x01	; 1
    3a76:	12 c0       	rjmp	.+36     	; 0x3a9c <xTaskGenericNotify+0xfc>
    3a78:	82 30       	cpi	r24, 0x02	; 2
    3a7a:	79 f0       	breq	.+30     	; 0x3a9a <xTaskGenericNotify+0xfa>
    3a7c:	66 0f       	add	r22, r22
    3a7e:	77 1f       	adc	r23, r23
    3a80:	66 0f       	add	r22, r22
    3a82:	77 1f       	adc	r23, r23
    3a84:	fd 01       	movw	r30, r26
    3a86:	e6 0f       	add	r30, r22
    3a88:	f7 1f       	adc	r31, r23
    3a8a:	27 a7       	std	Z+47, r18	; 0x2f
    3a8c:	30 ab       	std	Z+48, r19	; 0x30
    3a8e:	41 ab       	std	Z+49, r20	; 0x31
    3a90:	52 ab       	std	Z+50, r21	; 0x32
    3a92:	01 e0       	ldi	r16, 0x01	; 1
    3a94:	03 c0       	rjmp	.+6      	; 0x3a9c <xTaskGenericNotify+0xfc>
    3a96:	01 e0       	ldi	r16, 0x01	; 1
    3a98:	01 c0       	rjmp	.+2      	; 0x3a9c <xTaskGenericNotify+0xfc>
    3a9a:	00 e0       	ldi	r16, 0x00	; 0
    3a9c:	81 30       	cpi	r24, 0x01	; 1
    3a9e:	09 f0       	breq	.+2      	; 0x3aa2 <xTaskGenericNotify+0x102>
    3aa0:	69 c0       	rjmp	.+210    	; 0x3b74 <xTaskGenericNotify+0x1d4>
    3aa2:	1c 96       	adiw	r26, 0x0c	; 12
    3aa4:	ed 91       	ld	r30, X+
    3aa6:	fc 91       	ld	r31, X
    3aa8:	1d 97       	sbiw	r26, 0x0d	; 13
    3aaa:	16 96       	adiw	r26, 0x06	; 6
    3aac:	cd 91       	ld	r28, X+
    3aae:	dc 91       	ld	r29, X
    3ab0:	17 97       	sbiw	r26, 0x07	; 7
    3ab2:	18 96       	adiw	r26, 0x08	; 8
    3ab4:	8d 91       	ld	r24, X+
    3ab6:	9c 91       	ld	r25, X
    3ab8:	19 97       	sbiw	r26, 0x09	; 9
    3aba:	9f 83       	std	Y+7, r25	; 0x07
    3abc:	8e 83       	std	Y+6, r24	; 0x06
    3abe:	18 96       	adiw	r26, 0x08	; 8
    3ac0:	cd 91       	ld	r28, X+
    3ac2:	dc 91       	ld	r29, X
    3ac4:	19 97       	sbiw	r26, 0x09	; 9
    3ac6:	16 96       	adiw	r26, 0x06	; 6
    3ac8:	8d 91       	ld	r24, X+
    3aca:	9c 91       	ld	r25, X
    3acc:	17 97       	sbiw	r26, 0x07	; 7
    3ace:	9d 83       	std	Y+5, r25	; 0x05
    3ad0:	8c 83       	std	Y+4, r24	; 0x04
    3ad2:	81 81       	ldd	r24, Z+1	; 0x01
    3ad4:	92 81       	ldd	r25, Z+2	; 0x02
    3ad6:	9d 01       	movw	r18, r26
    3ad8:	2e 5f       	subi	r18, 0xFE	; 254
    3ada:	3f 4f       	sbci	r19, 0xFF	; 255
    3adc:	82 17       	cp	r24, r18
    3ade:	93 07       	cpc	r25, r19
    3ae0:	31 f4       	brne	.+12     	; 0x3aee <xTaskGenericNotify+0x14e>
    3ae2:	18 96       	adiw	r26, 0x08	; 8
    3ae4:	8d 91       	ld	r24, X+
    3ae6:	9c 91       	ld	r25, X
    3ae8:	19 97       	sbiw	r26, 0x09	; 9
    3aea:	92 83       	std	Z+2, r25	; 0x02
    3aec:	81 83       	std	Z+1, r24	; 0x01
    3aee:	1d 96       	adiw	r26, 0x0d	; 13
    3af0:	1c 92       	st	X, r1
    3af2:	1e 92       	st	-X, r1
    3af4:	1c 97       	sbiw	r26, 0x0c	; 12
    3af6:	80 81       	ld	r24, Z
    3af8:	81 50       	subi	r24, 0x01	; 1
    3afa:	80 83       	st	Z, r24
    3afc:	5a 96       	adiw	r26, 0x1a	; 26
    3afe:	ec 91       	ld	r30, X
    3b00:	5a 97       	sbiw	r26, 0x1a	; 26
    3b02:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    3b06:	8e 17       	cp	r24, r30
    3b08:	10 f4       	brcc	.+4      	; 0x3b0e <xTaskGenericNotify+0x16e>
    3b0a:	e0 93 bb 13 	sts	0x13BB, r30	; 0x8013bb <uxTopReadyPriority>
    3b0e:	8b e0       	ldi	r24, 0x0B	; 11
    3b10:	8e 9f       	mul	r24, r30
    3b12:	f0 01       	movw	r30, r0
    3b14:	11 24       	eor	r1, r1
    3b16:	e3 50       	subi	r30, 0x03	; 3
    3b18:	fc 4e       	sbci	r31, 0xEC	; 236
    3b1a:	01 80       	ldd	r0, Z+1	; 0x01
    3b1c:	f2 81       	ldd	r31, Z+2	; 0x02
    3b1e:	e0 2d       	mov	r30, r0
    3b20:	17 96       	adiw	r26, 0x07	; 7
    3b22:	fc 93       	st	X, r31
    3b24:	ee 93       	st	-X, r30
    3b26:	16 97       	sbiw	r26, 0x06	; 6
    3b28:	46 81       	ldd	r20, Z+6	; 0x06
    3b2a:	57 81       	ldd	r21, Z+7	; 0x07
    3b2c:	19 96       	adiw	r26, 0x09	; 9
    3b2e:	5c 93       	st	X, r21
    3b30:	4e 93       	st	-X, r20
    3b32:	18 97       	sbiw	r26, 0x08	; 8
    3b34:	c6 81       	ldd	r28, Z+6	; 0x06
    3b36:	d7 81       	ldd	r29, Z+7	; 0x07
    3b38:	3d 83       	std	Y+5, r19	; 0x05
    3b3a:	2c 83       	std	Y+4, r18	; 0x04
    3b3c:	37 83       	std	Z+7, r19	; 0x07
    3b3e:	26 83       	std	Z+6, r18	; 0x06
    3b40:	5a 96       	adiw	r26, 0x1a	; 26
    3b42:	ec 91       	ld	r30, X
    3b44:	5a 97       	sbiw	r26, 0x1a	; 26
    3b46:	8e 9f       	mul	r24, r30
    3b48:	f0 01       	movw	r30, r0
    3b4a:	11 24       	eor	r1, r1
    3b4c:	e3 50       	subi	r30, 0x03	; 3
    3b4e:	fc 4e       	sbci	r31, 0xEC	; 236
    3b50:	1d 96       	adiw	r26, 0x0d	; 13
    3b52:	fc 93       	st	X, r31
    3b54:	ee 93       	st	-X, r30
    3b56:	1c 97       	sbiw	r26, 0x0c	; 12
    3b58:	80 81       	ld	r24, Z
    3b5a:	8f 5f       	subi	r24, 0xFF	; 255
    3b5c:	80 83       	st	Z, r24
    3b5e:	5a 96       	adiw	r26, 0x1a	; 26
    3b60:	9c 91       	ld	r25, X
    3b62:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    3b66:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3b6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b6c:	89 17       	cp	r24, r25
    3b6e:	10 f4       	brcc	.+4      	; 0x3b74 <xTaskGenericNotify+0x1d4>
    3b70:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    3b74:	0f 90       	pop	r0
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	80 2f       	mov	r24, r16
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	0f 91       	pop	r16
    3b80:	ff 90       	pop	r15
    3b82:	ef 90       	pop	r14
    3b84:	bf 90       	pop	r11
    3b86:	af 90       	pop	r10
    3b88:	9f 90       	pop	r9
    3b8a:	8f 90       	pop	r8
    3b8c:	08 95       	ret

00003b8e <xTaskGenericNotifyFromISR>:
    3b8e:	8f 92       	push	r8
    3b90:	9f 92       	push	r9
    3b92:	af 92       	push	r10
    3b94:	bf 92       	push	r11
    3b96:	cf 92       	push	r12
    3b98:	df 92       	push	r13
    3b9a:	ef 92       	push	r14
    3b9c:	ff 92       	push	r15
    3b9e:	0f 93       	push	r16
    3ba0:	cf 93       	push	r28
    3ba2:	df 93       	push	r29
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	e1 14       	cp	r14, r1
    3ba8:	f1 04       	cpc	r15, r1
    3baa:	89 f0       	breq	.+34     	; 0x3bce <xTaskGenericNotifyFromISR+0x40>
    3bac:	e6 2f       	mov	r30, r22
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	ff 1f       	adc	r31, r31
    3bb4:	ee 0f       	add	r30, r30
    3bb6:	ff 1f       	adc	r31, r31
    3bb8:	e8 0f       	add	r30, r24
    3bba:	f9 1f       	adc	r31, r25
    3bbc:	87 a4       	ldd	r8, Z+47	; 0x2f
    3bbe:	90 a8       	ldd	r9, Z+48	; 0x30
    3bc0:	a1 a8       	ldd	r10, Z+49	; 0x31
    3bc2:	b2 a8       	ldd	r11, Z+50	; 0x32
    3bc4:	f7 01       	movw	r30, r14
    3bc6:	80 82       	st	Z, r8
    3bc8:	91 82       	std	Z+1, r9	; 0x01
    3bca:	a2 82       	std	Z+2, r10	; 0x02
    3bcc:	b3 82       	std	Z+3, r11	; 0x03
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    3bd0:	fd 01       	movw	r30, r26
    3bd2:	e6 0f       	add	r30, r22
    3bd4:	f7 1f       	adc	r31, r23
    3bd6:	93 a9       	ldd	r25, Z+51	; 0x33
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	83 ab       	std	Z+51, r24	; 0x33
    3bdc:	02 30       	cpi	r16, 0x02	; 2
    3bde:	01 f1       	breq	.+64     	; 0x3c20 <xTaskGenericNotifyFromISR+0x92>
    3be0:	18 f4       	brcc	.+6      	; 0x3be8 <xTaskGenericNotifyFromISR+0x5a>
    3be2:	01 30       	cpi	r16, 0x01	; 1
    3be4:	31 f0       	breq	.+12     	; 0x3bf2 <xTaskGenericNotifyFromISR+0x64>
    3be6:	4d c0       	rjmp	.+154    	; 0x3c82 <xTaskGenericNotifyFromISR+0xf4>
    3be8:	03 30       	cpi	r16, 0x03	; 3
    3bea:	79 f1       	breq	.+94     	; 0x3c4a <xTaskGenericNotifyFromISR+0xbc>
    3bec:	04 30       	cpi	r16, 0x04	; 4
    3bee:	d1 f1       	breq	.+116    	; 0x3c64 <xTaskGenericNotifyFromISR+0xd6>
    3bf0:	48 c0       	rjmp	.+144    	; 0x3c82 <xTaskGenericNotifyFromISR+0xf4>
    3bf2:	66 0f       	add	r22, r22
    3bf4:	77 1f       	adc	r23, r23
    3bf6:	66 0f       	add	r22, r22
    3bf8:	77 1f       	adc	r23, r23
    3bfa:	fd 01       	movw	r30, r26
    3bfc:	e6 0f       	add	r30, r22
    3bfe:	f7 1f       	adc	r31, r23
    3c00:	87 a4       	ldd	r8, Z+47	; 0x2f
    3c02:	90 a8       	ldd	r9, Z+48	; 0x30
    3c04:	a1 a8       	ldd	r10, Z+49	; 0x31
    3c06:	b2 a8       	ldd	r11, Z+50	; 0x32
    3c08:	ba 01       	movw	r22, r20
    3c0a:	a9 01       	movw	r20, r18
    3c0c:	48 29       	or	r20, r8
    3c0e:	59 29       	or	r21, r9
    3c10:	6a 29       	or	r22, r10
    3c12:	7b 29       	or	r23, r11
    3c14:	47 a7       	std	Z+47, r20	; 0x2f
    3c16:	50 ab       	std	Z+48, r21	; 0x30
    3c18:	61 ab       	std	Z+49, r22	; 0x31
    3c1a:	72 ab       	std	Z+50, r23	; 0x32
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	34 c0       	rjmp	.+104    	; 0x3c88 <xTaskGenericNotifyFromISR+0xfa>
    3c20:	66 0f       	add	r22, r22
    3c22:	77 1f       	adc	r23, r23
    3c24:	66 0f       	add	r22, r22
    3c26:	77 1f       	adc	r23, r23
    3c28:	fd 01       	movw	r30, r26
    3c2a:	e6 0f       	add	r30, r22
    3c2c:	f7 1f       	adc	r31, r23
    3c2e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3c30:	50 a9       	ldd	r21, Z+48	; 0x30
    3c32:	61 a9       	ldd	r22, Z+49	; 0x31
    3c34:	72 a9       	ldd	r23, Z+50	; 0x32
    3c36:	4f 5f       	subi	r20, 0xFF	; 255
    3c38:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3a:	6f 4f       	sbci	r22, 0xFF	; 255
    3c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3e:	47 a7       	std	Z+47, r20	; 0x2f
    3c40:	50 ab       	std	Z+48, r21	; 0x30
    3c42:	61 ab       	std	Z+49, r22	; 0x31
    3c44:	72 ab       	std	Z+50, r23	; 0x32
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	1f c0       	rjmp	.+62     	; 0x3c88 <xTaskGenericNotifyFromISR+0xfa>
    3c4a:	66 0f       	add	r22, r22
    3c4c:	77 1f       	adc	r23, r23
    3c4e:	66 0f       	add	r22, r22
    3c50:	77 1f       	adc	r23, r23
    3c52:	fd 01       	movw	r30, r26
    3c54:	e6 0f       	add	r30, r22
    3c56:	f7 1f       	adc	r31, r23
    3c58:	27 a7       	std	Z+47, r18	; 0x2f
    3c5a:	30 ab       	std	Z+48, r19	; 0x30
    3c5c:	41 ab       	std	Z+49, r20	; 0x31
    3c5e:	52 ab       	std	Z+50, r21	; 0x32
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	12 c0       	rjmp	.+36     	; 0x3c88 <xTaskGenericNotifyFromISR+0xfa>
    3c64:	92 30       	cpi	r25, 0x02	; 2
    3c66:	79 f0       	breq	.+30     	; 0x3c86 <xTaskGenericNotifyFromISR+0xf8>
    3c68:	66 0f       	add	r22, r22
    3c6a:	77 1f       	adc	r23, r23
    3c6c:	66 0f       	add	r22, r22
    3c6e:	77 1f       	adc	r23, r23
    3c70:	fd 01       	movw	r30, r26
    3c72:	e6 0f       	add	r30, r22
    3c74:	f7 1f       	adc	r31, r23
    3c76:	27 a7       	std	Z+47, r18	; 0x2f
    3c78:	30 ab       	std	Z+48, r19	; 0x30
    3c7a:	41 ab       	std	Z+49, r20	; 0x31
    3c7c:	52 ab       	std	Z+50, r21	; 0x32
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	03 c0       	rjmp	.+6      	; 0x3c88 <xTaskGenericNotifyFromISR+0xfa>
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	01 c0       	rjmp	.+2      	; 0x3c88 <xTaskGenericNotifyFromISR+0xfa>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	91 30       	cpi	r25, 0x01	; 1
    3c8a:	09 f0       	breq	.+2      	; 0x3c8e <xTaskGenericNotifyFromISR+0x100>
    3c8c:	96 c0       	rjmp	.+300    	; 0x3dba <xTaskGenericNotifyFromISR+0x22c>
    3c8e:	90 91 ac 13 	lds	r25, 0x13AC	; 0x8013ac <uxSchedulerSuspended>
    3c92:	91 11       	cpse	r25, r1
    3c94:	5f c0       	rjmp	.+190    	; 0x3d54 <xTaskGenericNotifyFromISR+0x1c6>
    3c96:	1c 96       	adiw	r26, 0x0c	; 12
    3c98:	ed 91       	ld	r30, X+
    3c9a:	fc 91       	ld	r31, X
    3c9c:	1d 97       	sbiw	r26, 0x0d	; 13
    3c9e:	16 96       	adiw	r26, 0x06	; 6
    3ca0:	cd 91       	ld	r28, X+
    3ca2:	dc 91       	ld	r29, X
    3ca4:	17 97       	sbiw	r26, 0x07	; 7
    3ca6:	18 96       	adiw	r26, 0x08	; 8
    3ca8:	2d 91       	ld	r18, X+
    3caa:	3c 91       	ld	r19, X
    3cac:	19 97       	sbiw	r26, 0x09	; 9
    3cae:	3f 83       	std	Y+7, r19	; 0x07
    3cb0:	2e 83       	std	Y+6, r18	; 0x06
    3cb2:	18 96       	adiw	r26, 0x08	; 8
    3cb4:	cd 91       	ld	r28, X+
    3cb6:	dc 91       	ld	r29, X
    3cb8:	19 97       	sbiw	r26, 0x09	; 9
    3cba:	16 96       	adiw	r26, 0x06	; 6
    3cbc:	2d 91       	ld	r18, X+
    3cbe:	3c 91       	ld	r19, X
    3cc0:	17 97       	sbiw	r26, 0x07	; 7
    3cc2:	3d 83       	std	Y+5, r19	; 0x05
    3cc4:	2c 83       	std	Y+4, r18	; 0x04
    3cc6:	41 81       	ldd	r20, Z+1	; 0x01
    3cc8:	52 81       	ldd	r21, Z+2	; 0x02
    3cca:	9d 01       	movw	r18, r26
    3ccc:	2e 5f       	subi	r18, 0xFE	; 254
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	42 17       	cp	r20, r18
    3cd2:	53 07       	cpc	r21, r19
    3cd4:	31 f4       	brne	.+12     	; 0x3ce2 <xTaskGenericNotifyFromISR+0x154>
    3cd6:	18 96       	adiw	r26, 0x08	; 8
    3cd8:	4d 91       	ld	r20, X+
    3cda:	5c 91       	ld	r21, X
    3cdc:	19 97       	sbiw	r26, 0x09	; 9
    3cde:	52 83       	std	Z+2, r21	; 0x02
    3ce0:	41 83       	std	Z+1, r20	; 0x01
    3ce2:	1d 96       	adiw	r26, 0x0d	; 13
    3ce4:	1c 92       	st	X, r1
    3ce6:	1e 92       	st	-X, r1
    3ce8:	1c 97       	sbiw	r26, 0x0c	; 12
    3cea:	90 81       	ld	r25, Z
    3cec:	91 50       	subi	r25, 0x01	; 1
    3cee:	90 83       	st	Z, r25
    3cf0:	5a 96       	adiw	r26, 0x1a	; 26
    3cf2:	ec 91       	ld	r30, X
    3cf4:	5a 97       	sbiw	r26, 0x1a	; 26
    3cf6:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <uxTopReadyPriority>
    3cfa:	9e 17       	cp	r25, r30
    3cfc:	10 f4       	brcc	.+4      	; 0x3d02 <xTaskGenericNotifyFromISR+0x174>
    3cfe:	e0 93 bb 13 	sts	0x13BB, r30	; 0x8013bb <uxTopReadyPriority>
    3d02:	9b e0       	ldi	r25, 0x0B	; 11
    3d04:	9e 9f       	mul	r25, r30
    3d06:	f0 01       	movw	r30, r0
    3d08:	11 24       	eor	r1, r1
    3d0a:	e3 50       	subi	r30, 0x03	; 3
    3d0c:	fc 4e       	sbci	r31, 0xEC	; 236
    3d0e:	01 80       	ldd	r0, Z+1	; 0x01
    3d10:	f2 81       	ldd	r31, Z+2	; 0x02
    3d12:	e0 2d       	mov	r30, r0
    3d14:	17 96       	adiw	r26, 0x07	; 7
    3d16:	fc 93       	st	X, r31
    3d18:	ee 93       	st	-X, r30
    3d1a:	16 97       	sbiw	r26, 0x06	; 6
    3d1c:	46 81       	ldd	r20, Z+6	; 0x06
    3d1e:	57 81       	ldd	r21, Z+7	; 0x07
    3d20:	19 96       	adiw	r26, 0x09	; 9
    3d22:	5c 93       	st	X, r21
    3d24:	4e 93       	st	-X, r20
    3d26:	18 97       	sbiw	r26, 0x08	; 8
    3d28:	c6 81       	ldd	r28, Z+6	; 0x06
    3d2a:	d7 81       	ldd	r29, Z+7	; 0x07
    3d2c:	3d 83       	std	Y+5, r19	; 0x05
    3d2e:	2c 83       	std	Y+4, r18	; 0x04
    3d30:	37 83       	std	Z+7, r19	; 0x07
    3d32:	26 83       	std	Z+6, r18	; 0x06
    3d34:	5a 96       	adiw	r26, 0x1a	; 26
    3d36:	ec 91       	ld	r30, X
    3d38:	5a 97       	sbiw	r26, 0x1a	; 26
    3d3a:	9e 9f       	mul	r25, r30
    3d3c:	f0 01       	movw	r30, r0
    3d3e:	11 24       	eor	r1, r1
    3d40:	e3 50       	subi	r30, 0x03	; 3
    3d42:	fc 4e       	sbci	r31, 0xEC	; 236
    3d44:	1d 96       	adiw	r26, 0x0d	; 13
    3d46:	fc 93       	st	X, r31
    3d48:	ee 93       	st	-X, r30
    3d4a:	1c 97       	sbiw	r26, 0x0c	; 12
    3d4c:	90 81       	ld	r25, Z
    3d4e:	9f 5f       	subi	r25, 0xFF	; 255
    3d50:	90 83       	st	Z, r25
    3d52:	21 c0       	rjmp	.+66     	; 0x3d96 <xTaskGenericNotifyFromISR+0x208>
    3d54:	68 ed       	ldi	r22, 0xD8	; 216
    3d56:	73 e1       	ldi	r23, 0x13	; 19
    3d58:	fb 01       	movw	r30, r22
    3d5a:	c1 81       	ldd	r28, Z+1	; 0x01
    3d5c:	d2 81       	ldd	r29, Z+2	; 0x02
    3d5e:	53 96       	adiw	r26, 0x13	; 19
    3d60:	dc 93       	st	X, r29
    3d62:	ce 93       	st	-X, r28
    3d64:	52 97       	sbiw	r26, 0x12	; 18
    3d66:	2e 81       	ldd	r18, Y+6	; 0x06
    3d68:	3f 81       	ldd	r19, Y+7	; 0x07
    3d6a:	55 96       	adiw	r26, 0x15	; 21
    3d6c:	3c 93       	st	X, r19
    3d6e:	2e 93       	st	-X, r18
    3d70:	54 97       	sbiw	r26, 0x14	; 20
    3d72:	4e 81       	ldd	r20, Y+6	; 0x06
    3d74:	5f 81       	ldd	r21, Y+7	; 0x07
    3d76:	9d 01       	movw	r18, r26
    3d78:	22 5f       	subi	r18, 0xF2	; 242
    3d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d7c:	fa 01       	movw	r30, r20
    3d7e:	35 83       	std	Z+5, r19	; 0x05
    3d80:	24 83       	std	Z+4, r18	; 0x04
    3d82:	3f 83       	std	Y+7, r19	; 0x07
    3d84:	2e 83       	std	Y+6, r18	; 0x06
    3d86:	59 96       	adiw	r26, 0x19	; 25
    3d88:	7c 93       	st	X, r23
    3d8a:	6e 93       	st	-X, r22
    3d8c:	58 97       	sbiw	r26, 0x18	; 24
    3d8e:	fb 01       	movw	r30, r22
    3d90:	90 81       	ld	r25, Z
    3d92:	9f 5f       	subi	r25, 0xFF	; 255
    3d94:	90 83       	st	Z, r25
    3d96:	5a 96       	adiw	r26, 0x1a	; 26
    3d98:	2c 91       	ld	r18, X
    3d9a:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTCB>
    3d9e:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTCB+0x1>
    3da2:	92 8d       	ldd	r25, Z+26	; 0x1a
    3da4:	92 17       	cp	r25, r18
    3da6:	48 f4       	brcc	.+18     	; 0x3dba <xTaskGenericNotifyFromISR+0x22c>
    3da8:	c1 14       	cp	r12, r1
    3daa:	d1 04       	cpc	r13, r1
    3dac:	19 f0       	breq	.+6      	; 0x3db4 <xTaskGenericNotifyFromISR+0x226>
    3dae:	91 e0       	ldi	r25, 0x01	; 1
    3db0:	f6 01       	movw	r30, r12
    3db2:	90 83       	st	Z, r25
    3db4:	91 e0       	ldi	r25, 0x01	; 1
    3db6:	90 93 b5 13 	sts	0x13B5, r25	; 0x8013b5 <xYieldPending>
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	0f 91       	pop	r16
    3dc0:	ff 90       	pop	r15
    3dc2:	ef 90       	pop	r14
    3dc4:	df 90       	pop	r13
    3dc6:	cf 90       	pop	r12
    3dc8:	bf 90       	pop	r11
    3dca:	af 90       	pop	r10
    3dcc:	9f 90       	pop	r9
    3dce:	8f 90       	pop	r8
    3dd0:	08 95       	ret

00003dd2 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	21 f4       	brne	.+8      	; 0x3dde <xTaskGenericNotifyStateClear+0xc>
    3dd6:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTCB>
    3dda:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	f8 94       	cli
    3de2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	fc 01       	movw	r30, r24
    3de8:	e6 0f       	add	r30, r22
    3dea:	f7 1f       	adc	r31, r23
    3dec:	23 a9       	ldd	r18, Z+51	; 0x33
    3dee:	22 30       	cpi	r18, 0x02	; 2
    3df0:	31 f4       	brne	.+12     	; 0x3dfe <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3df2:	fc 01       	movw	r30, r24
    3df4:	e6 0f       	add	r30, r22
    3df6:	f7 1f       	adc	r31, r23
    3df8:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	01 c0       	rjmp	.+2      	; 0x3e00 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3e00:	0f 90       	pop	r0
    3e02:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3e04:	08 95       	ret

00003e06 <prvGetNextExpireTime>:
    3e06:	dc 01       	movw	r26, r24
    3e08:	e0 91 77 14 	lds	r30, 0x1477	; 0x801477 <pxCurrentTimerList>
    3e0c:	f0 91 78 14 	lds	r31, 0x1478	; 0x801478 <pxCurrentTimerList+0x1>
    3e10:	80 81       	ld	r24, Z
    3e12:	91 e0       	ldi	r25, 0x01	; 1
    3e14:	81 11       	cpse	r24, r1
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	9c 93       	st	X, r25
    3e1a:	91 11       	cpse	r25, r1
    3e1c:	08 c0       	rjmp	.+16     	; 0x3e2e <prvGetNextExpireTime+0x28>
    3e1e:	07 80       	ldd	r0, Z+7	; 0x07
    3e20:	f0 85       	ldd	r31, Z+8	; 0x08
    3e22:	e0 2d       	mov	r30, r0
    3e24:	60 81       	ld	r22, Z
    3e26:	71 81       	ldd	r23, Z+1	; 0x01
    3e28:	82 81       	ldd	r24, Z+2	; 0x02
    3e2a:	93 81       	ldd	r25, Z+3	; 0x03
    3e2c:	08 95       	ret
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	cb 01       	movw	r24, r22
    3e34:	08 95       	ret

00003e36 <prvInsertTimerInActiveList>:
    3e36:	cf 92       	push	r12
    3e38:	df 92       	push	r13
    3e3a:	ef 92       	push	r14
    3e3c:	ff 92       	push	r15
    3e3e:	0f 93       	push	r16
    3e40:	1f 93       	push	r17
    3e42:	fc 01       	movw	r30, r24
    3e44:	42 83       	std	Z+2, r20	; 0x02
    3e46:	53 83       	std	Z+3, r21	; 0x03
    3e48:	64 83       	std	Z+4, r22	; 0x04
    3e4a:	75 83       	std	Z+5, r23	; 0x05
    3e4c:	93 87       	std	Z+11, r25	; 0x0b
    3e4e:	82 87       	std	Z+10, r24	; 0x0a
    3e50:	04 17       	cp	r16, r20
    3e52:	15 07       	cpc	r17, r21
    3e54:	26 07       	cpc	r18, r22
    3e56:	37 07       	cpc	r19, r23
    3e58:	c0 f0       	brcs	.+48     	; 0x3e8a <prvInsertTimerInActiveList+0x54>
    3e5a:	0c 19       	sub	r16, r12
    3e5c:	1d 09       	sbc	r17, r13
    3e5e:	2e 09       	sbc	r18, r14
    3e60:	3f 09       	sbc	r19, r15
    3e62:	86 85       	ldd	r24, Z+14	; 0x0e
    3e64:	97 85       	ldd	r25, Z+15	; 0x0f
    3e66:	a0 89       	ldd	r26, Z+16	; 0x10
    3e68:	b1 89       	ldd	r27, Z+17	; 0x11
    3e6a:	08 17       	cp	r16, r24
    3e6c:	19 07       	cpc	r17, r25
    3e6e:	2a 07       	cpc	r18, r26
    3e70:	3b 07       	cpc	r19, r27
    3e72:	00 f5       	brcc	.+64     	; 0x3eb4 <prvInsertTimerInActiveList+0x7e>
    3e74:	bf 01       	movw	r22, r30
    3e76:	6e 5f       	subi	r22, 0xFE	; 254
    3e78:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7a:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxOverflowTimerList>
    3e7e:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxOverflowTimerList+0x1>
    3e82:	0e 94 2d 0a 	call	0x145a	; 0x145a <vListInsert>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	18 c0       	rjmp	.+48     	; 0x3eba <prvInsertTimerInActiveList+0x84>
    3e8a:	0c 15       	cp	r16, r12
    3e8c:	1d 05       	cpc	r17, r13
    3e8e:	2e 05       	cpc	r18, r14
    3e90:	3f 05       	cpc	r19, r15
    3e92:	28 f4       	brcc	.+10     	; 0x3e9e <prvInsertTimerInActiveList+0x68>
    3e94:	4c 15       	cp	r20, r12
    3e96:	5d 05       	cpc	r21, r13
    3e98:	6e 05       	cpc	r22, r14
    3e9a:	7f 05       	cpc	r23, r15
    3e9c:	68 f4       	brcc	.+26     	; 0x3eb8 <prvInsertTimerInActiveList+0x82>
    3e9e:	bf 01       	movw	r22, r30
    3ea0:	6e 5f       	subi	r22, 0xFE	; 254
    3ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea4:	80 91 77 14 	lds	r24, 0x1477	; 0x801477 <pxCurrentTimerList>
    3ea8:	90 91 78 14 	lds	r25, 0x1478	; 0x801478 <pxCurrentTimerList+0x1>
    3eac:	0e 94 2d 0a 	call	0x145a	; 0x145a <vListInsert>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	03 c0       	rjmp	.+6      	; 0x3eba <prvInsertTimerInActiveList+0x84>
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	01 c0       	rjmp	.+2      	; 0x3eba <prvInsertTimerInActiveList+0x84>
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	ff 90       	pop	r15
    3ec0:	ef 90       	pop	r14
    3ec2:	df 90       	pop	r13
    3ec4:	cf 90       	pop	r12
    3ec6:	08 95       	ret

00003ec8 <prvCheckForValidListAndQueue>:
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	f8 94       	cli
    3ecc:	0f 92       	push	r0
    3ece:	80 91 73 14 	lds	r24, 0x1473	; 0x801473 <xTimerQueue>
    3ed2:	90 91 74 14 	lds	r25, 0x1474	; 0x801474 <xTimerQueue+0x1>
    3ed6:	89 2b       	or	r24, r25
    3ed8:	e9 f4       	brne	.+58     	; 0x3f14 <prvCheckForValidListAndQueue+0x4c>
    3eda:	84 e8       	ldi	r24, 0x84	; 132
    3edc:	94 e1       	ldi	r25, 0x14	; 20
    3ede:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    3ee2:	89 e7       	ldi	r24, 0x79	; 121
    3ee4:	94 e1       	ldi	r25, 0x14	; 20
    3ee6:	0e 94 18 0a 	call	0x1430	; 0x1430 <vListInitialise>
    3eea:	84 e8       	ldi	r24, 0x84	; 132
    3eec:	94 e1       	ldi	r25, 0x14	; 20
    3eee:	90 93 78 14 	sts	0x1478, r25	; 0x801478 <pxCurrentTimerList+0x1>
    3ef2:	80 93 77 14 	sts	0x1477, r24	; 0x801477 <pxCurrentTimerList>
    3ef6:	89 e7       	ldi	r24, 0x79	; 121
    3ef8:	94 e1       	ldi	r25, 0x14	; 20
    3efa:	90 93 76 14 	sts	0x1476, r25	; 0x801476 <pxOverflowTimerList+0x1>
    3efe:	80 93 75 14 	sts	0x1475, r24	; 0x801475 <pxOverflowTimerList>
    3f02:	40 e0       	ldi	r20, 0x00	; 0
    3f04:	67 e0       	ldi	r22, 0x07	; 7
    3f06:	8a e0       	ldi	r24, 0x0A	; 10
    3f08:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <xQueueGenericCreate>
    3f0c:	90 93 74 14 	sts	0x1474, r25	; 0x801474 <xTimerQueue+0x1>
    3f10:	80 93 73 14 	sts	0x1473, r24	; 0x801473 <xTimerQueue>
    3f14:	0f 90       	pop	r0
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	08 95       	ret

00003f1a <xTimerCreateTimerTask>:
    3f1a:	ef 92       	push	r14
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	d3 df       	rcall	.-90     	; 0x3ec8 <prvCheckForValidListAndQueue>
    3f22:	80 91 73 14 	lds	r24, 0x1473	; 0x801473 <xTimerQueue>
    3f26:	90 91 74 14 	lds	r25, 0x1474	; 0x801474 <xTimerQueue+0x1>
    3f2a:	89 2b       	or	r24, r25
    3f2c:	91 f0       	breq	.+36     	; 0x3f52 <xTimerCreateTimerTask+0x38>
    3f2e:	0f 2e       	mov	r0, r31
    3f30:	f1 e7       	ldi	r31, 0x71	; 113
    3f32:	ef 2e       	mov	r14, r31
    3f34:	f4 e1       	ldi	r31, 0x14	; 20
    3f36:	ff 2e       	mov	r15, r31
    3f38:	f0 2d       	mov	r31, r0
    3f3a:	03 e0       	ldi	r16, 0x03	; 3
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 ec       	ldi	r20, 0xC0	; 192
    3f42:	50 e0       	ldi	r21, 0x00	; 0
    3f44:	69 ec       	ldi	r22, 0xC9	; 201
    3f46:	74 e0       	ldi	r23, 0x04	; 4
    3f48:	89 e5       	ldi	r24, 0x59	; 89
    3f4a:	91 e0       	ldi	r25, 0x01	; 1
    3f4c:	0e 94 8e 14 	call	0x291c	; 0x291c <xTaskCreate>
    3f50:	01 c0       	rjmp	.+2      	; 0x3f54 <xTimerCreateTimerTask+0x3a>
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	0f 91       	pop	r16
    3f56:	ff 90       	pop	r15
    3f58:	ef 90       	pop	r14
    3f5a:	08 95       	ret

00003f5c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3f5c:	8f 92       	push	r8
    3f5e:	9f 92       	push	r9
    3f60:	af 92       	push	r10
    3f62:	bf 92       	push	r11
    3f64:	cf 92       	push	r12
    3f66:	df 92       	push	r13
    3f68:	ef 92       	push	r14
    3f6a:	ff 92       	push	r15
    3f6c:	0f 93       	push	r16
    3f6e:	1f 93       	push	r17
    3f70:	cf 93       	push	r28
    3f72:	df 93       	push	r29
    3f74:	cd b7       	in	r28, 0x3d	; 61
    3f76:	de b7       	in	r29, 0x3e	; 62
    3f78:	27 97       	sbiw	r28, 0x07	; 7
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	f8 94       	cli
    3f7e:	de bf       	out	0x3e, r29	; 62
    3f80:	0f be       	out	0x3f, r0	; 63
    3f82:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3f84:	e0 91 73 14 	lds	r30, 0x1473	; 0x801473 <xTimerQueue>
    3f88:	f0 91 74 14 	lds	r31, 0x1474	; 0x801474 <xTimerQueue+0x1>
    3f8c:	30 97       	sbiw	r30, 0x00	; 0
    3f8e:	81 f1       	breq	.+96     	; 0x3ff0 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3f90:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3f92:	2a 83       	std	Y+2, r18	; 0x02
    3f94:	3b 83       	std	Y+3, r19	; 0x03
    3f96:	4c 83       	std	Y+4, r20	; 0x04
    3f98:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3f9a:	9f 83       	std	Y+7, r25	; 0x07
    3f9c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3f9e:	66 30       	cpi	r22, 0x06	; 6
    3fa0:	f4 f4       	brge	.+60     	; 0x3fde <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3fa2:	c3 da       	rcall	.-2682   	; 0x352a <xTaskGetSchedulerState>
    3fa4:	82 30       	cpi	r24, 0x02	; 2
    3fa6:	69 f4       	brne	.+26     	; 0x3fc2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3fa8:	00 e0       	ldi	r16, 0x00	; 0
    3faa:	a7 01       	movw	r20, r14
    3fac:	96 01       	movw	r18, r12
    3fae:	be 01       	movw	r22, r28
    3fb0:	6f 5f       	subi	r22, 0xFF	; 255
    3fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb4:	80 91 73 14 	lds	r24, 0x1473	; 0x801473 <xTimerQueue>
    3fb8:	90 91 74 14 	lds	r25, 0x1474	; 0x801474 <xTimerQueue+0x1>
    3fbc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
    3fc0:	18 c0       	rjmp	.+48     	; 0x3ff2 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3fc2:	00 e0       	ldi	r16, 0x00	; 0
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	a9 01       	movw	r20, r18
    3fca:	be 01       	movw	r22, r28
    3fcc:	6f 5f       	subi	r22, 0xFF	; 255
    3fce:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd0:	80 91 73 14 	lds	r24, 0x1473	; 0x801473 <xTimerQueue>
    3fd4:	90 91 74 14 	lds	r25, 0x1474	; 0x801474 <xTimerQueue+0x1>
    3fd8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xQueueGenericSend>
    3fdc:	0a c0       	rjmp	.+20     	; 0x3ff2 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	a8 01       	movw	r20, r16
    3fe2:	be 01       	movw	r22, r28
    3fe4:	6f 5f       	subi	r22, 0xFF	; 255
    3fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe8:	cf 01       	movw	r24, r30
    3fea:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <xQueueGenericSendFromISR>
    3fee:	01 c0       	rjmp	.+2      	; 0x3ff2 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3ff2:	27 96       	adiw	r28, 0x07	; 7
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	de bf       	out	0x3e, r29	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	ff 90       	pop	r15
    4008:	ef 90       	pop	r14
    400a:	df 90       	pop	r13
    400c:	cf 90       	pop	r12
    400e:	bf 90       	pop	r11
    4010:	af 90       	pop	r10
    4012:	9f 90       	pop	r9
    4014:	8f 90       	pop	r8
    4016:	08 95       	ret

00004018 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    4018:	8f 92       	push	r8
    401a:	9f 92       	push	r9
    401c:	af 92       	push	r10
    401e:	bf 92       	push	r11
    4020:	cf 92       	push	r12
    4022:	df 92       	push	r13
    4024:	ef 92       	push	r14
    4026:	ff 92       	push	r15
    4028:	0f 93       	push	r16
    402a:	1f 93       	push	r17
    402c:	cf 93       	push	r28
    402e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4030:	3b c0       	rjmp	.+118    	; 0x40a8 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4032:	07 80       	ldd	r0, Z+7	; 0x07
    4034:	f0 85       	ldd	r31, Z+8	; 0x08
    4036:	e0 2d       	mov	r30, r0
    4038:	80 80       	ld	r8, Z
    403a:	91 80       	ldd	r9, Z+1	; 0x01
    403c:	a2 80       	ldd	r10, Z+2	; 0x02
    403e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4040:	c0 85       	ldd	r28, Z+8	; 0x08
    4042:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4044:	8e 01       	movw	r16, r28
    4046:	0e 5f       	subi	r16, 0xFE	; 254
    4048:	1f 4f       	sbci	r17, 0xFF	; 255
    404a:	c8 01       	movw	r24, r16
    404c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4050:	ec 89       	ldd	r30, Y+20	; 0x14
    4052:	fd 89       	ldd	r31, Y+21	; 0x15
    4054:	ce 01       	movw	r24, r28
    4056:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4058:	8e 89       	ldd	r24, Y+22	; 0x16
    405a:	82 ff       	sbrs	r24, 2
    405c:	25 c0       	rjmp	.+74     	; 0x40a8 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    405e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4060:	9f 85       	ldd	r25, Y+15	; 0x0f
    4062:	a8 89       	ldd	r26, Y+16	; 0x10
    4064:	b9 89       	ldd	r27, Y+17	; 0x11
    4066:	88 0d       	add	r24, r8
    4068:	99 1d       	adc	r25, r9
    406a:	aa 1d       	adc	r26, r10
    406c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    406e:	88 16       	cp	r8, r24
    4070:	99 06       	cpc	r9, r25
    4072:	aa 06       	cpc	r10, r26
    4074:	bb 06       	cpc	r11, r27
    4076:	70 f4       	brcc	.+28     	; 0x4094 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4078:	8a 83       	std	Y+2, r24	; 0x02
    407a:	9b 83       	std	Y+3, r25	; 0x03
    407c:	ac 83       	std	Y+4, r26	; 0x04
    407e:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4080:	db 87       	std	Y+11, r29	; 0x0b
    4082:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4084:	b8 01       	movw	r22, r16
    4086:	80 91 77 14 	lds	r24, 0x1477	; 0x801477 <pxCurrentTimerList>
    408a:	90 91 78 14 	lds	r25, 0x1478	; 0x801478 <pxCurrentTimerList+0x1>
    408e:	0e 94 2d 0a 	call	0x145a	; 0x145a <vListInsert>
    4092:	0a c0       	rjmp	.+20     	; 0x40a8 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4094:	c1 2c       	mov	r12, r1
    4096:	d1 2c       	mov	r13, r1
    4098:	76 01       	movw	r14, r12
    409a:	00 e0       	ldi	r16, 0x00	; 0
    409c:	10 e0       	ldi	r17, 0x00	; 0
    409e:	a5 01       	movw	r20, r10
    40a0:	94 01       	movw	r18, r8
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	ce 01       	movw	r24, r28
    40a6:	5a df       	rcall	.-332    	; 0x3f5c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    40a8:	e0 91 77 14 	lds	r30, 0x1477	; 0x801477 <pxCurrentTimerList>
    40ac:	f0 91 78 14 	lds	r31, 0x1478	; 0x801478 <pxCurrentTimerList+0x1>
    40b0:	80 81       	ld	r24, Z
    40b2:	81 11       	cpse	r24, r1
    40b4:	be cf       	rjmp	.-132    	; 0x4032 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    40b6:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <pxOverflowTimerList>
    40ba:	90 91 76 14 	lds	r25, 0x1476	; 0x801476 <pxOverflowTimerList+0x1>
    40be:	90 93 78 14 	sts	0x1478, r25	; 0x801478 <pxCurrentTimerList+0x1>
    40c2:	80 93 77 14 	sts	0x1477, r24	; 0x801477 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    40c6:	f0 93 76 14 	sts	0x1476, r31	; 0x801476 <pxOverflowTimerList+0x1>
    40ca:	e0 93 75 14 	sts	0x1475, r30	; 0x801475 <pxOverflowTimerList>
    }
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	1f 91       	pop	r17
    40d4:	0f 91       	pop	r16
    40d6:	ff 90       	pop	r15
    40d8:	ef 90       	pop	r14
    40da:	df 90       	pop	r13
    40dc:	cf 90       	pop	r12
    40de:	bf 90       	pop	r11
    40e0:	af 90       	pop	r10
    40e2:	9f 90       	pop	r9
    40e4:	8f 90       	pop	r8
    40e6:	08 95       	ret

000040e8 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    40e8:	cf 92       	push	r12
    40ea:	df 92       	push	r13
    40ec:	ef 92       	push	r14
    40ee:	ff 92       	push	r15
    40f0:	cf 93       	push	r28
    40f2:	df 93       	push	r29
    40f4:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    40f6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <xTaskGetTickCount>
    40fa:	6b 01       	movw	r12, r22
    40fc:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    40fe:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <xLastTime.2436>
    4102:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <xLastTime.2436+0x1>
    4106:	a0 91 6f 14 	lds	r26, 0x146F	; 0x80146f <xLastTime.2436+0x2>
    410a:	b0 91 70 14 	lds	r27, 0x1470	; 0x801470 <xLastTime.2436+0x3>
    410e:	c8 16       	cp	r12, r24
    4110:	d9 06       	cpc	r13, r25
    4112:	ea 06       	cpc	r14, r26
    4114:	fb 06       	cpc	r15, r27
    4116:	20 f4       	brcc	.+8      	; 0x4120 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    4118:	7f df       	rcall	.-258    	; 0x4018 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	88 83       	st	Y, r24
    411e:	01 c0       	rjmp	.+2      	; 0x4122 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    4120:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    4122:	c0 92 6d 14 	sts	0x146D, r12	; 0x80146d <xLastTime.2436>
    4126:	d0 92 6e 14 	sts	0x146E, r13	; 0x80146e <xLastTime.2436+0x1>
    412a:	e0 92 6f 14 	sts	0x146F, r14	; 0x80146f <xLastTime.2436+0x2>
    412e:	f0 92 70 14 	sts	0x1470, r15	; 0x801470 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    4132:	c7 01       	movw	r24, r14
    4134:	b6 01       	movw	r22, r12
    4136:	df 91       	pop	r29
    4138:	cf 91       	pop	r28
    413a:	ff 90       	pop	r15
    413c:	ef 90       	pop	r14
    413e:	df 90       	pop	r13
    4140:	cf 90       	pop	r12
    4142:	08 95       	ret

00004144 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    4144:	4f 92       	push	r4
    4146:	5f 92       	push	r5
    4148:	6f 92       	push	r6
    414a:	7f 92       	push	r7
    414c:	8f 92       	push	r8
    414e:	9f 92       	push	r9
    4150:	af 92       	push	r10
    4152:	bf 92       	push	r11
    4154:	cf 92       	push	r12
    4156:	df 92       	push	r13
    4158:	ef 92       	push	r14
    415a:	ff 92       	push	r15
    415c:	0f 93       	push	r16
    415e:	1f 93       	push	r17
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	4b 01       	movw	r8, r22
    4166:	5c 01       	movw	r10, r24
    4168:	29 01       	movw	r4, r18
    416a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    416c:	e0 91 77 14 	lds	r30, 0x1477	; 0x801477 <pxCurrentTimerList>
    4170:	f0 91 78 14 	lds	r31, 0x1478	; 0x801478 <pxCurrentTimerList+0x1>
    4174:	07 80       	ldd	r0, Z+7	; 0x07
    4176:	f0 85       	ldd	r31, Z+8	; 0x08
    4178:	e0 2d       	mov	r30, r0
    417a:	c0 85       	ldd	r28, Z+8	; 0x08
    417c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    417e:	ce 01       	movw	r24, r28
    4180:	02 96       	adiw	r24, 0x02	; 2
    4182:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4186:	8e 89       	ldd	r24, Y+22	; 0x16
    4188:	82 ff       	sbrs	r24, 2
    418a:	1b c0       	rjmp	.+54     	; 0x41c2 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    418c:	4e 85       	ldd	r20, Y+14	; 0x0e
    418e:	5f 85       	ldd	r21, Y+15	; 0x0f
    4190:	68 89       	ldd	r22, Y+16	; 0x10
    4192:	79 89       	ldd	r23, Y+17	; 0x11
    4194:	48 0d       	add	r20, r8
    4196:	59 1d       	adc	r21, r9
    4198:	6a 1d       	adc	r22, r10
    419a:	7b 1d       	adc	r23, r11
    419c:	75 01       	movw	r14, r10
    419e:	64 01       	movw	r12, r8
    41a0:	93 01       	movw	r18, r6
    41a2:	82 01       	movw	r16, r4
    41a4:	ce 01       	movw	r24, r28
    41a6:	47 de       	rcall	.-882    	; 0x3e36 <prvInsertTimerInActiveList>
    41a8:	88 23       	and	r24, r24
    41aa:	69 f0       	breq	.+26     	; 0x41c6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    41ac:	c1 2c       	mov	r12, r1
    41ae:	d1 2c       	mov	r13, r1
    41b0:	76 01       	movw	r14, r12
    41b2:	00 e0       	ldi	r16, 0x00	; 0
    41b4:	10 e0       	ldi	r17, 0x00	; 0
    41b6:	a5 01       	movw	r20, r10
    41b8:	94 01       	movw	r18, r8
    41ba:	60 e0       	ldi	r22, 0x00	; 0
    41bc:	ce 01       	movw	r24, r28
    41be:	ce de       	rcall	.-612    	; 0x3f5c <xTimerGenericCommand>
    41c0:	02 c0       	rjmp	.+4      	; 0x41c6 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    41c2:	8e 7f       	andi	r24, 0xFE	; 254
    41c4:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    41c6:	ec 89       	ldd	r30, Y+20	; 0x14
    41c8:	fd 89       	ldd	r31, Y+21	; 0x15
    41ca:	ce 01       	movw	r24, r28
    41cc:	19 95       	eicall
    }
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	ff 90       	pop	r15
    41d8:	ef 90       	pop	r14
    41da:	df 90       	pop	r13
    41dc:	cf 90       	pop	r12
    41de:	bf 90       	pop	r11
    41e0:	af 90       	pop	r10
    41e2:	9f 90       	pop	r9
    41e4:	8f 90       	pop	r8
    41e6:	7f 90       	pop	r7
    41e8:	6f 90       	pop	r6
    41ea:	5f 90       	pop	r5
    41ec:	4f 90       	pop	r4
    41ee:	08 95       	ret

000041f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    41f0:	8f 92       	push	r8
    41f2:	9f 92       	push	r9
    41f4:	af 92       	push	r10
    41f6:	bf 92       	push	r11
    41f8:	cf 92       	push	r12
    41fa:	df 92       	push	r13
    41fc:	ef 92       	push	r14
    41fe:	ff 92       	push	r15
    4200:	1f 93       	push	r17
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	1f 92       	push	r1
    4208:	cd b7       	in	r28, 0x3d	; 61
    420a:	de b7       	in	r29, 0x3e	; 62
    420c:	6b 01       	movw	r12, r22
    420e:	7c 01       	movw	r14, r24
    4210:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    4212:	0e 94 12 15 	call	0x2a24	; 0x2a24 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4216:	ce 01       	movw	r24, r28
    4218:	01 96       	adiw	r24, 0x01	; 1
    421a:	66 df       	rcall	.-308    	; 0x40e8 <prvSampleTimeNow>
    421c:	4b 01       	movw	r8, r22
    421e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	81 11       	cpse	r24, r1
    4224:	2d c0       	rjmp	.+90     	; 0x4280 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4226:	11 11       	cpse	r17, r1
    4228:	0d c0       	rjmp	.+26     	; 0x4244 <prvProcessTimerOrBlockTask+0x54>
    422a:	8c 14       	cp	r8, r12
    422c:	9d 04       	cpc	r9, r13
    422e:	ae 04       	cpc	r10, r14
    4230:	bf 04       	cpc	r11, r15
    4232:	40 f0       	brcs	.+16     	; 0x4244 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    4234:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4238:	a5 01       	movw	r20, r10
    423a:	94 01       	movw	r18, r8
    423c:	c7 01       	movw	r24, r14
    423e:	b6 01       	movw	r22, r12
    4240:	81 df       	rcall	.-254    	; 0x4144 <prvProcessExpiredTimer>
    4242:	20 c0       	rjmp	.+64     	; 0x4284 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    4244:	11 23       	and	r17, r17
    4246:	41 f0       	breq	.+16     	; 0x4258 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4248:	e0 91 75 14 	lds	r30, 0x1475	; 0x801475 <pxOverflowTimerList>
    424c:	f0 91 76 14 	lds	r31, 0x1476	; 0x801476 <pxOverflowTimerList+0x1>
    4250:	80 81       	ld	r24, Z
    4252:	11 e0       	ldi	r17, 0x01	; 1
    4254:	81 11       	cpse	r24, r1
    4256:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4258:	b7 01       	movw	r22, r14
    425a:	a6 01       	movw	r20, r12
    425c:	48 19       	sub	r20, r8
    425e:	59 09       	sbc	r21, r9
    4260:	6a 09       	sbc	r22, r10
    4262:	7b 09       	sbc	r23, r11
    4264:	21 2f       	mov	r18, r17
    4266:	80 91 73 14 	lds	r24, 0x1473	; 0x801473 <xTimerQueue>
    426a:	90 91 74 14 	lds	r25, 0x1474	; 0x801474 <xTimerQueue+0x1>
    426e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    4272:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
    4276:	81 11       	cpse	r24, r1
    4278:	05 c0       	rjmp	.+10     	; 0x4284 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    427a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    4280:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskResumeAll>
            }
        }
    }
    4284:	0f 90       	pop	r0
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	1f 91       	pop	r17
    428c:	ff 90       	pop	r15
    428e:	ef 90       	pop	r14
    4290:	df 90       	pop	r13
    4292:	cf 90       	pop	r12
    4294:	bf 90       	pop	r11
    4296:	af 90       	pop	r10
    4298:	9f 90       	pop	r9
    429a:	8f 90       	pop	r8
    429c:	08 95       	ret

0000429e <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    429e:	af 92       	push	r10
    42a0:	bf 92       	push	r11
    42a2:	cf 92       	push	r12
    42a4:	df 92       	push	r13
    42a6:	ef 92       	push	r14
    42a8:	ff 92       	push	r15
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	28 97       	sbiw	r28, 0x08	; 8
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    42c2:	82 c0       	rjmp	.+260    	; 0x43c8 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    42c4:	89 81       	ldd	r24, Y+1	; 0x01
    42c6:	88 23       	and	r24, r24
    42c8:	0c f4       	brge	.+2      	; 0x42cc <prvProcessReceivedCommands+0x2e>
    42ca:	7e c0       	rjmp	.+252    	; 0x43c8 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    42cc:	ae 80       	ldd	r10, Y+6	; 0x06
    42ce:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    42d0:	d5 01       	movw	r26, r10
    42d2:	1c 96       	adiw	r26, 0x0c	; 12
    42d4:	8d 91       	ld	r24, X+
    42d6:	9c 91       	ld	r25, X
    42d8:	1d 97       	sbiw	r26, 0x0d	; 13
    42da:	89 2b       	or	r24, r25
    42dc:	21 f0       	breq	.+8      	; 0x42e6 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    42de:	c5 01       	movw	r24, r10
    42e0:	02 96       	adiw	r24, 0x02	; 2
    42e2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    42e6:	ce 01       	movw	r24, r28
    42e8:	08 96       	adiw	r24, 0x08	; 8
    42ea:	fe de       	rcall	.-516    	; 0x40e8 <prvSampleTimeNow>
    42ec:	8b 01       	movw	r16, r22
    42ee:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    42f0:	e9 81       	ldd	r30, Y+1	; 0x01
    42f2:	0e 2e       	mov	r0, r30
    42f4:	00 0c       	add	r0, r0
    42f6:	ff 0b       	sbc	r31, r31
    42f8:	ea 30       	cpi	r30, 0x0A	; 10
    42fa:	f1 05       	cpc	r31, r1
    42fc:	08 f0       	brcs	.+2      	; 0x4300 <prvProcessReceivedCommands+0x62>
    42fe:	64 c0       	rjmp	.+200    	; 0x43c8 <prvProcessReceivedCommands+0x12a>
    4300:	88 27       	eor	r24, r24
    4302:	ee 58       	subi	r30, 0x8E	; 142
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	8f 4f       	sbci	r24, 0xFF	; 255
    4308:	0c 94 a3 35 	jmp	0x6b46	; 0x6b46 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    430c:	f5 01       	movw	r30, r10
    430e:	86 89       	ldd	r24, Z+22	; 0x16
    4310:	81 60       	ori	r24, 0x01	; 1
    4312:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    4314:	ca 80       	ldd	r12, Y+2	; 0x02
    4316:	db 80       	ldd	r13, Y+3	; 0x03
    4318:	ec 80       	ldd	r14, Y+4	; 0x04
    431a:	fd 80       	ldd	r15, Y+5	; 0x05
    431c:	46 85       	ldd	r20, Z+14	; 0x0e
    431e:	57 85       	ldd	r21, Z+15	; 0x0f
    4320:	60 89       	ldd	r22, Z+16	; 0x10
    4322:	71 89       	ldd	r23, Z+17	; 0x11
    4324:	4c 0d       	add	r20, r12
    4326:	5d 1d       	adc	r21, r13
    4328:	6e 1d       	adc	r22, r14
    432a:	7f 1d       	adc	r23, r15
    432c:	c5 01       	movw	r24, r10
    432e:	83 dd       	rcall	.-1274   	; 0x3e36 <prvInsertTimerInActiveList>
    4330:	88 23       	and	r24, r24
    4332:	09 f4       	brne	.+2      	; 0x4336 <prvProcessReceivedCommands+0x98>
    4334:	49 c0       	rjmp	.+146    	; 0x43c8 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4336:	d5 01       	movw	r26, r10
    4338:	54 96       	adiw	r26, 0x14	; 20
    433a:	ed 91       	ld	r30, X+
    433c:	fc 91       	ld	r31, X
    433e:	55 97       	sbiw	r26, 0x15	; 21
    4340:	c5 01       	movw	r24, r10
    4342:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4344:	f5 01       	movw	r30, r10
    4346:	86 89       	ldd	r24, Z+22	; 0x16
    4348:	82 ff       	sbrs	r24, 2
    434a:	3e c0       	rjmp	.+124    	; 0x43c8 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    434c:	4a 81       	ldd	r20, Y+2	; 0x02
    434e:	5b 81       	ldd	r21, Y+3	; 0x03
    4350:	6c 81       	ldd	r22, Y+4	; 0x04
    4352:	7d 81       	ldd	r23, Y+5	; 0x05
    4354:	86 85       	ldd	r24, Z+14	; 0x0e
    4356:	97 85       	ldd	r25, Z+15	; 0x0f
    4358:	a0 89       	ldd	r26, Z+16	; 0x10
    435a:	b1 89       	ldd	r27, Z+17	; 0x11
    435c:	9a 01       	movw	r18, r20
    435e:	ab 01       	movw	r20, r22
    4360:	28 0f       	add	r18, r24
    4362:	39 1f       	adc	r19, r25
    4364:	4a 1f       	adc	r20, r26
    4366:	5b 1f       	adc	r21, r27
    4368:	c1 2c       	mov	r12, r1
    436a:	d1 2c       	mov	r13, r1
    436c:	76 01       	movw	r14, r12
    436e:	00 e0       	ldi	r16, 0x00	; 0
    4370:	10 e0       	ldi	r17, 0x00	; 0
    4372:	60 e0       	ldi	r22, 0x00	; 0
    4374:	c5 01       	movw	r24, r10
    4376:	f2 dd       	rcall	.-1052   	; 0x3f5c <xTimerGenericCommand>
    4378:	27 c0       	rjmp	.+78     	; 0x43c8 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    437a:	d5 01       	movw	r26, r10
    437c:	56 96       	adiw	r26, 0x16	; 22
    437e:	8c 91       	ld	r24, X
    4380:	56 97       	sbiw	r26, 0x16	; 22
    4382:	8e 7f       	andi	r24, 0xFE	; 254
    4384:	56 96       	adiw	r26, 0x16	; 22
    4386:	8c 93       	st	X, r24
                        break;
    4388:	1f c0       	rjmp	.+62     	; 0x43c8 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    438a:	f5 01       	movw	r30, r10
    438c:	86 89       	ldd	r24, Z+22	; 0x16
    438e:	81 60       	ori	r24, 0x01	; 1
    4390:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4392:	4a 81       	ldd	r20, Y+2	; 0x02
    4394:	5b 81       	ldd	r21, Y+3	; 0x03
    4396:	6c 81       	ldd	r22, Y+4	; 0x04
    4398:	7d 81       	ldd	r23, Y+5	; 0x05
    439a:	46 87       	std	Z+14, r20	; 0x0e
    439c:	57 87       	std	Z+15, r21	; 0x0f
    439e:	60 8b       	std	Z+16, r22	; 0x10
    43a0:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    43a2:	40 0f       	add	r20, r16
    43a4:	51 1f       	adc	r21, r17
    43a6:	62 1f       	adc	r22, r18
    43a8:	73 1f       	adc	r23, r19
    43aa:	68 01       	movw	r12, r16
    43ac:	79 01       	movw	r14, r18
    43ae:	c5 01       	movw	r24, r10
    43b0:	42 dd       	rcall	.-1404   	; 0x3e36 <prvInsertTimerInActiveList>
                        break;
    43b2:	0a c0       	rjmp	.+20     	; 0x43c8 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    43b4:	f5 01       	movw	r30, r10
    43b6:	86 89       	ldd	r24, Z+22	; 0x16
    43b8:	81 fd       	sbrc	r24, 1
    43ba:	04 c0       	rjmp	.+8      	; 0x43c4 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    43bc:	c5 01       	movw	r24, r10
    43be:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vPortFree>
    43c2:	02 c0       	rjmp	.+4      	; 0x43c8 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    43c4:	8e 7f       	andi	r24, 0xFE	; 254
    43c6:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	a9 01       	movw	r20, r18
    43ce:	be 01       	movw	r22, r28
    43d0:	6f 5f       	subi	r22, 0xFF	; 255
    43d2:	7f 4f       	sbci	r23, 0xFF	; 255
    43d4:	80 91 73 14 	lds	r24, 0x1473	; 0x801473 <xTimerQueue>
    43d8:	90 91 74 14 	lds	r25, 0x1474	; 0x801474 <xTimerQueue+0x1>
    43dc:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <xQueueReceive>
    43e0:	81 11       	cpse	r24, r1
    43e2:	70 cf       	rjmp	.-288    	; 0x42c4 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    43e4:	28 96       	adiw	r28, 0x08	; 8
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	f8 94       	cli
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	0f be       	out	0x3f, r0	; 63
    43ee:	cd bf       	out	0x3d, r28	; 61
    43f0:	df 91       	pop	r29
    43f2:	cf 91       	pop	r28
    43f4:	1f 91       	pop	r17
    43f6:	0f 91       	pop	r16
    43f8:	ff 90       	pop	r15
    43fa:	ef 90       	pop	r14
    43fc:	df 90       	pop	r13
    43fe:	cf 90       	pop	r12
    4400:	bf 90       	pop	r11
    4402:	af 90       	pop	r10
    4404:	08 95       	ret

00004406 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    4406:	08 95       	ret

00004408 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4408:	84 b1       	in	r24, 0x04	; 4
    440a:	80 68       	ori	r24, 0x80	; 128
    440c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    440e:	85 b1       	in	r24, 0x05	; 5
    4410:	80 68       	ori	r24, 0x80	; 128
    4412:	85 b9       	out	0x05, r24	; 5
    4414:	08 95       	ret

00004416 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    4416:	83 b1       	in	r24, 0x03	; 3
    4418:	80 68       	ori	r24, 0x80	; 128
    441a:	83 b9       	out	0x03, r24	; 3
    441c:	08 95       	ret

0000441e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    441e:	f4 df       	rcall	.-24     	; 0x4408 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4420:	2f ef       	ldi	r18, 0xFF	; 255
    4422:	80 e7       	ldi	r24, 0x70	; 112
    4424:	92 e0       	ldi	r25, 0x02	; 2
    4426:	21 50       	subi	r18, 0x01	; 1
    4428:	80 40       	sbci	r24, 0x00	; 0
    442a:	90 40       	sbci	r25, 0x00	; 0
    442c:	e1 f7       	brne	.-8      	; 0x4426 <vApplicationMallocFailedHook+0x8>
    442e:	00 c0       	rjmp	.+0      	; 0x4430 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    4430:	00 00       	nop
    4432:	f1 df       	rcall	.-30     	; 0x4416 <prvBlinkMainLed>
    4434:	f5 cf       	rjmp	.-22     	; 0x4420 <vApplicationMallocFailedHook+0x2>

00004436 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    4436:	e8 df       	rcall	.-48     	; 0x4408 <prvSetMainLedOn>
    4438:	2f ef       	ldi	r18, 0xFF	; 255
    443a:	87 ea       	ldi	r24, 0xA7	; 167
    443c:	91 e6       	ldi	r25, 0x61	; 97
    443e:	21 50       	subi	r18, 0x01	; 1
    4440:	80 40       	sbci	r24, 0x00	; 0
    4442:	90 40       	sbci	r25, 0x00	; 0
    4444:	e1 f7       	brne	.-8      	; 0x443e <vApplicationStackOverflowHook+0x8>
    4446:	00 c0       	rjmp	.+0      	; 0x4448 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    4448:	00 00       	nop
    444a:	e5 df       	rcall	.-54     	; 0x4416 <prvBlinkMainLed>
    444c:	f5 cf       	rjmp	.-22     	; 0x4438 <vApplicationStackOverflowHook+0x2>

0000444e <createTasksForSensors>:

/*
* Function call to initialize all sensors
*/
void createTasksForSensors(){
	temperature_sensor = createTemp(3, taskReadyBits, BIT_TEMP_READY);
    444e:	60 91 91 14 	lds	r22, 0x1491	; 0x801491 <taskReadyBits>
    4452:	70 91 92 14 	lds	r23, 0x1492	; 0x801492 <taskReadyBits+0x1>
    4456:	21 e0       	ldi	r18, 0x01	; 1
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e0       	ldi	r20, 0x00	; 0
    445c:	50 e0       	ldi	r21, 0x00	; 0
    445e:	83 e0       	ldi	r24, 0x03	; 3
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	0e 94 66 05 	call	0xacc	; 0xacc <createTemp>
    4466:	90 93 c4 15 	sts	0x15C4, r25	; 0x8015c4 <temperature_sensor+0x1>
    446a:	80 93 c3 15 	sts	0x15C3, r24	; 0x8015c3 <temperature_sensor>
	co2_sensor = createCO2(3, taskReadyBits, BIT_CO2_READY);
    446e:	60 91 91 14 	lds	r22, 0x1491	; 0x801491 <taskReadyBits>
    4472:	70 91 92 14 	lds	r23, 0x1492	; 0x801492 <taskReadyBits+0x1>
    4476:	22 e0       	ldi	r18, 0x02	; 2
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	50 e0       	ldi	r21, 0x00	; 0
    447e:	83 e0       	ldi	r24, 0x03	; 3
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 02 02 	call	0x404	; 0x404 <createCO2>
    4486:	90 93 c8 15 	sts	0x15C8, r25	; 0x8015c8 <co2_sensor+0x1>
    448a:	80 93 c7 15 	sts	0x15C7, r24	; 0x8015c7 <co2_sensor>
	lighthandler = createLightSensor(3, taskReadyBits, BIT_LIGHT_READY);
    448e:	60 91 91 14 	lds	r22, 0x1491	; 0x801491 <taskReadyBits>
    4492:	70 91 92 14 	lds	r23, 0x1492	; 0x801492 <taskReadyBits+0x1>
    4496:	24 e0       	ldi	r18, 0x04	; 4
    4498:	30 e0       	ldi	r19, 0x00	; 0
    449a:	40 e0       	ldi	r20, 0x00	; 0
    449c:	50 e0       	ldi	r21, 0x00	; 0
    449e:	83 e0       	ldi	r24, 0x03	; 3
    44a0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <createLightSensor>
    44a4:	90 93 c6 15 	sts	0x15C6, r25	; 0x8015c6 <lighthandler+0x1>
    44a8:	80 93 c5 15 	sts	0x15C5, r24	; 0x8015c5 <lighthandler>
    44ac:	08 95       	ret

000044ae <create_tasks_and_semaphores>:
/*
* Function call that initializes all needed tasks for sensors and shared print, as well as LoRaWAN uplink
*/
void create_tasks_and_semaphores(void)
{
	create_shared_printf();
    44ae:	0e 94 99 03 	call	0x732	; 0x732 <create_shared_printf>
	print_sharedf("Board started.");
    44b2:	81 ed       	ldi	r24, 0xD1	; 209
    44b4:	94 e0       	ldi	r25, 0x04	; 4
    44b6:	9f 93       	push	r25
    44b8:	8f 93       	push	r24
    44ba:	0e 94 a7 03 	call	0x74e	; 0x74e <print_sharedf>
	createTasksForSensors();
    44be:	c7 df       	rcall	.-114    	; 0x444e <createTasksForSensors>
	create_semaphore_mutex_and_sensors();
    44c0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <create_semaphore_mutex_and_sensors>
	DownLinkHandler_Create(4, downLinkMessageBufferHandle);
    44c4:	60 91 8f 14 	lds	r22, 0x148F	; 0x80148f <downLinkMessageBufferHandle>
    44c8:	70 91 90 14 	lds	r23, 0x1490	; 0x801490 <downLinkMessageBufferHandle+0x1>
    44cc:	84 e0       	ldi	r24, 0x04	; 4
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	0e 94 46 02 	call	0x48c	; 0x48c <DownLinkHandler_Create>
	lora_handler_initialize(2);
    44d4:	82 e0       	ldi	r24, 0x02	; 2
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	0e 94 49 07 	call	0xe92	; 0xe92 <lora_handler_initialize>
}
    44dc:	0f 90       	pop	r0
    44de:	0f 90       	pop	r0
    44e0:	08 95       	ret

000044e2 <initializeSystem>:
/*
* Function call that initializes the Event groups, the Arduino board, Downlink message buffer, tasks, and Sempahore mutex
*/
void initializeSystem(){
	// initialize ready bits
	taskReadyBits = xEventGroupCreate();
    44e2:	0e 94 7e 07 	call	0xefc	; 0xefc <xEventGroupCreate>
    44e6:	90 93 92 14 	sts	0x1492, r25	; 0x801492 <taskReadyBits+0x1>
    44ea:	80 93 91 14 	sts	0x1491, r24	; 0x801491 <taskReadyBits>
	
	// Make it possible to use stdio on COM port 3 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    44ee:	80 e0       	ldi	r24, 0x00	; 0
    44f0:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <stdio_initialise>
	
	rc_servo_initialise();
    44f4:	91 d7       	rcall	.+3874   	; 0x5418 <rc_servo_initialise>
	// Method for tasks and semaphore
	downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    44f6:	41 e0       	ldi	r20, 0x01	; 1
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	70 e0       	ldi	r23, 0x00	; 0
    44fc:	8c e2       	ldi	r24, 0x2C	; 44
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 88 10 	call	0x2110	; 0x2110 <xStreamBufferGenericCreate>
    4504:	90 93 90 14 	sts	0x1490, r25	; 0x801490 <downLinkMessageBufferHandle+0x1>
    4508:	80 93 8f 14 	sts	0x148F, r24	; 0x80148f <downLinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);
    450c:	bc 01       	movw	r22, r24
    450e:	81 e0       	ldi	r24, 0x01	; 1
	create_tasks_and_semaphores();
    4510:	6b d3       	rcall	.+1750   	; 0x4be8 <lora_driver_initialise>
    4512:	cd cf       	rjmp	.-102    	; 0x44ae <create_tasks_and_semaphores>
    4514:	08 95       	ret

00004516 <main>:
}

int main(void){
	initializeSystem();
    4516:	e5 df       	rcall	.-54     	; 0x44e2 <initializeSystem>
	vTaskStartScheduler();
    4518:	0e 94 da 14 	call	0x29b4	; 0x29b4 <vTaskStartScheduler>
    451c:	ff cf       	rjmp	.-2      	; 0x451c <main+0x6>

0000451e <__cmpsf2>:
    451e:	34 d0       	rcall	.+104    	; 0x4588 <__fp_cmp>
    4520:	08 f4       	brcc	.+2      	; 0x4524 <__cmpsf2+0x6>
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	08 95       	ret

00004526 <__fixsfsi>:
    4526:	04 d0       	rcall	.+8      	; 0x4530 <__fixunssfsi>
    4528:	68 94       	set
    452a:	b1 11       	cpse	r27, r1
    452c:	74 c0       	rjmp	.+232    	; 0x4616 <__fp_szero>
    452e:	08 95       	ret

00004530 <__fixunssfsi>:
    4530:	57 d0       	rcall	.+174    	; 0x45e0 <__fp_splitA>
    4532:	88 f0       	brcs	.+34     	; 0x4556 <__fixunssfsi+0x26>
    4534:	9f 57       	subi	r25, 0x7F	; 127
    4536:	90 f0       	brcs	.+36     	; 0x455c <__fixunssfsi+0x2c>
    4538:	b9 2f       	mov	r27, r25
    453a:	99 27       	eor	r25, r25
    453c:	b7 51       	subi	r27, 0x17	; 23
    453e:	a0 f0       	brcs	.+40     	; 0x4568 <__fixunssfsi+0x38>
    4540:	d1 f0       	breq	.+52     	; 0x4576 <__fixunssfsi+0x46>
    4542:	66 0f       	add	r22, r22
    4544:	77 1f       	adc	r23, r23
    4546:	88 1f       	adc	r24, r24
    4548:	99 1f       	adc	r25, r25
    454a:	1a f0       	brmi	.+6      	; 0x4552 <__fixunssfsi+0x22>
    454c:	ba 95       	dec	r27
    454e:	c9 f7       	brne	.-14     	; 0x4542 <__fixunssfsi+0x12>
    4550:	12 c0       	rjmp	.+36     	; 0x4576 <__fixunssfsi+0x46>
    4552:	b1 30       	cpi	r27, 0x01	; 1
    4554:	81 f0       	breq	.+32     	; 0x4576 <__fixunssfsi+0x46>
    4556:	5e d0       	rcall	.+188    	; 0x4614 <__fp_zero>
    4558:	b1 e0       	ldi	r27, 0x01	; 1
    455a:	08 95       	ret
    455c:	5b c0       	rjmp	.+182    	; 0x4614 <__fp_zero>
    455e:	67 2f       	mov	r22, r23
    4560:	78 2f       	mov	r23, r24
    4562:	88 27       	eor	r24, r24
    4564:	b8 5f       	subi	r27, 0xF8	; 248
    4566:	39 f0       	breq	.+14     	; 0x4576 <__fixunssfsi+0x46>
    4568:	b9 3f       	cpi	r27, 0xF9	; 249
    456a:	cc f3       	brlt	.-14     	; 0x455e <__fixunssfsi+0x2e>
    456c:	86 95       	lsr	r24
    456e:	77 95       	ror	r23
    4570:	67 95       	ror	r22
    4572:	b3 95       	inc	r27
    4574:	d9 f7       	brne	.-10     	; 0x456c <__fixunssfsi+0x3c>
    4576:	3e f4       	brtc	.+14     	; 0x4586 <__fixunssfsi+0x56>
    4578:	90 95       	com	r25
    457a:	80 95       	com	r24
    457c:	70 95       	com	r23
    457e:	61 95       	neg	r22
    4580:	7f 4f       	sbci	r23, 0xFF	; 255
    4582:	8f 4f       	sbci	r24, 0xFF	; 255
    4584:	9f 4f       	sbci	r25, 0xFF	; 255
    4586:	08 95       	ret

00004588 <__fp_cmp>:
    4588:	99 0f       	add	r25, r25
    458a:	00 08       	sbc	r0, r0
    458c:	55 0f       	add	r21, r21
    458e:	aa 0b       	sbc	r26, r26
    4590:	e0 e8       	ldi	r30, 0x80	; 128
    4592:	fe ef       	ldi	r31, 0xFE	; 254
    4594:	16 16       	cp	r1, r22
    4596:	17 06       	cpc	r1, r23
    4598:	e8 07       	cpc	r30, r24
    459a:	f9 07       	cpc	r31, r25
    459c:	c0 f0       	brcs	.+48     	; 0x45ce <__fp_cmp+0x46>
    459e:	12 16       	cp	r1, r18
    45a0:	13 06       	cpc	r1, r19
    45a2:	e4 07       	cpc	r30, r20
    45a4:	f5 07       	cpc	r31, r21
    45a6:	98 f0       	brcs	.+38     	; 0x45ce <__fp_cmp+0x46>
    45a8:	62 1b       	sub	r22, r18
    45aa:	73 0b       	sbc	r23, r19
    45ac:	84 0b       	sbc	r24, r20
    45ae:	95 0b       	sbc	r25, r21
    45b0:	39 f4       	brne	.+14     	; 0x45c0 <__fp_cmp+0x38>
    45b2:	0a 26       	eor	r0, r26
    45b4:	61 f0       	breq	.+24     	; 0x45ce <__fp_cmp+0x46>
    45b6:	23 2b       	or	r18, r19
    45b8:	24 2b       	or	r18, r20
    45ba:	25 2b       	or	r18, r21
    45bc:	21 f4       	brne	.+8      	; 0x45c6 <__fp_cmp+0x3e>
    45be:	08 95       	ret
    45c0:	0a 26       	eor	r0, r26
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <__fp_cmp+0x3e>
    45c4:	a1 40       	sbci	r26, 0x01	; 1
    45c6:	a6 95       	lsr	r26
    45c8:	8f ef       	ldi	r24, 0xFF	; 255
    45ca:	81 1d       	adc	r24, r1
    45cc:	81 1d       	adc	r24, r1
    45ce:	08 95       	ret

000045d0 <__fp_split3>:
    45d0:	57 fd       	sbrc	r21, 7
    45d2:	90 58       	subi	r25, 0x80	; 128
    45d4:	44 0f       	add	r20, r20
    45d6:	55 1f       	adc	r21, r21
    45d8:	59 f0       	breq	.+22     	; 0x45f0 <__fp_splitA+0x10>
    45da:	5f 3f       	cpi	r21, 0xFF	; 255
    45dc:	71 f0       	breq	.+28     	; 0x45fa <__fp_splitA+0x1a>
    45de:	47 95       	ror	r20

000045e0 <__fp_splitA>:
    45e0:	88 0f       	add	r24, r24
    45e2:	97 fb       	bst	r25, 7
    45e4:	99 1f       	adc	r25, r25
    45e6:	61 f0       	breq	.+24     	; 0x4600 <__fp_splitA+0x20>
    45e8:	9f 3f       	cpi	r25, 0xFF	; 255
    45ea:	79 f0       	breq	.+30     	; 0x460a <__fp_splitA+0x2a>
    45ec:	87 95       	ror	r24
    45ee:	08 95       	ret
    45f0:	12 16       	cp	r1, r18
    45f2:	13 06       	cpc	r1, r19
    45f4:	14 06       	cpc	r1, r20
    45f6:	55 1f       	adc	r21, r21
    45f8:	f2 cf       	rjmp	.-28     	; 0x45de <__fp_split3+0xe>
    45fa:	46 95       	lsr	r20
    45fc:	f1 df       	rcall	.-30     	; 0x45e0 <__fp_splitA>
    45fe:	08 c0       	rjmp	.+16     	; 0x4610 <__fp_splitA+0x30>
    4600:	16 16       	cp	r1, r22
    4602:	17 06       	cpc	r1, r23
    4604:	18 06       	cpc	r1, r24
    4606:	99 1f       	adc	r25, r25
    4608:	f1 cf       	rjmp	.-30     	; 0x45ec <__fp_splitA+0xc>
    460a:	86 95       	lsr	r24
    460c:	71 05       	cpc	r23, r1
    460e:	61 05       	cpc	r22, r1
    4610:	08 94       	sec
    4612:	08 95       	ret

00004614 <__fp_zero>:
    4614:	e8 94       	clt

00004616 <__fp_szero>:
    4616:	bb 27       	eor	r27, r27
    4618:	66 27       	eor	r22, r22
    461a:	77 27       	eor	r23, r23
    461c:	cb 01       	movw	r24, r22
    461e:	97 f9       	bld	r25, 7
    4620:	08 95       	ret

00004622 <modf>:
    4622:	fa 01       	movw	r30, r20
    4624:	dc 01       	movw	r26, r24
    4626:	aa 0f       	add	r26, r26
    4628:	bb 1f       	adc	r27, r27
    462a:	9b 01       	movw	r18, r22
    462c:	ac 01       	movw	r20, r24
    462e:	bf 57       	subi	r27, 0x7F	; 127
    4630:	28 f4       	brcc	.+10     	; 0x463c <modf+0x1a>
    4632:	22 27       	eor	r18, r18
    4634:	33 27       	eor	r19, r19
    4636:	44 27       	eor	r20, r20
    4638:	50 78       	andi	r21, 0x80	; 128
    463a:	1f c0       	rjmp	.+62     	; 0x467a <modf+0x58>
    463c:	b7 51       	subi	r27, 0x17	; 23
    463e:	88 f4       	brcc	.+34     	; 0x4662 <modf+0x40>
    4640:	ab 2f       	mov	r26, r27
    4642:	00 24       	eor	r0, r0
    4644:	46 95       	lsr	r20
    4646:	37 95       	ror	r19
    4648:	27 95       	ror	r18
    464a:	01 1c       	adc	r0, r1
    464c:	a3 95       	inc	r26
    464e:	d2 f3       	brmi	.-12     	; 0x4644 <modf+0x22>
    4650:	00 20       	and	r0, r0
    4652:	69 f0       	breq	.+26     	; 0x466e <modf+0x4c>
    4654:	22 0f       	add	r18, r18
    4656:	33 1f       	adc	r19, r19
    4658:	44 1f       	adc	r20, r20
    465a:	b3 95       	inc	r27
    465c:	da f3       	brmi	.-10     	; 0x4654 <modf+0x32>
    465e:	0d d0       	rcall	.+26     	; 0x467a <modf+0x58>
    4660:	76 c0       	rjmp	.+236    	; 0x474e <__subsf3>
    4662:	61 30       	cpi	r22, 0x01	; 1
    4664:	71 05       	cpc	r23, r1
    4666:	a0 e8       	ldi	r26, 0x80	; 128
    4668:	8a 07       	cpc	r24, r26
    466a:	b9 46       	sbci	r27, 0x69	; 105
    466c:	30 f4       	brcc	.+12     	; 0x467a <modf+0x58>
    466e:	9b 01       	movw	r18, r22
    4670:	ac 01       	movw	r20, r24
    4672:	66 27       	eor	r22, r22
    4674:	77 27       	eor	r23, r23
    4676:	88 27       	eor	r24, r24
    4678:	90 78       	andi	r25, 0x80	; 128
    467a:	30 96       	adiw	r30, 0x00	; 0
    467c:	21 f0       	breq	.+8      	; 0x4686 <modf+0x64>
    467e:	20 83       	st	Z, r18
    4680:	31 83       	std	Z+1, r19	; 0x01
    4682:	42 83       	std	Z+2, r20	; 0x02
    4684:	53 83       	std	Z+3, r21	; 0x03
    4686:	08 95       	ret

00004688 <__mulsf3>:
    4688:	0b d0       	rcall	.+22     	; 0x46a0 <__mulsf3x>
    468a:	dd c0       	rjmp	.+442    	; 0x4846 <__fp_round>
    468c:	ce d0       	rcall	.+412    	; 0x482a <__fp_pscA>
    468e:	28 f0       	brcs	.+10     	; 0x469a <__mulsf3+0x12>
    4690:	d3 d0       	rcall	.+422    	; 0x4838 <__fp_pscB>
    4692:	18 f0       	brcs	.+6      	; 0x469a <__mulsf3+0x12>
    4694:	95 23       	and	r25, r21
    4696:	09 f0       	breq	.+2      	; 0x469a <__mulsf3+0x12>
    4698:	bf c0       	rjmp	.+382    	; 0x4818 <__fp_inf>
    469a:	c4 c0       	rjmp	.+392    	; 0x4824 <__fp_nan>
    469c:	11 24       	eor	r1, r1
    469e:	bb cf       	rjmp	.-138    	; 0x4616 <__fp_szero>

000046a0 <__mulsf3x>:
    46a0:	97 df       	rcall	.-210    	; 0x45d0 <__fp_split3>
    46a2:	a0 f3       	brcs	.-24     	; 0x468c <__mulsf3+0x4>

000046a4 <__mulsf3_pse>:
    46a4:	95 9f       	mul	r25, r21
    46a6:	d1 f3       	breq	.-12     	; 0x469c <__mulsf3+0x14>
    46a8:	95 0f       	add	r25, r21
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	55 1f       	adc	r21, r21
    46ae:	62 9f       	mul	r22, r18
    46b0:	f0 01       	movw	r30, r0
    46b2:	72 9f       	mul	r23, r18
    46b4:	bb 27       	eor	r27, r27
    46b6:	f0 0d       	add	r31, r0
    46b8:	b1 1d       	adc	r27, r1
    46ba:	63 9f       	mul	r22, r19
    46bc:	aa 27       	eor	r26, r26
    46be:	f0 0d       	add	r31, r0
    46c0:	b1 1d       	adc	r27, r1
    46c2:	aa 1f       	adc	r26, r26
    46c4:	64 9f       	mul	r22, r20
    46c6:	66 27       	eor	r22, r22
    46c8:	b0 0d       	add	r27, r0
    46ca:	a1 1d       	adc	r26, r1
    46cc:	66 1f       	adc	r22, r22
    46ce:	82 9f       	mul	r24, r18
    46d0:	22 27       	eor	r18, r18
    46d2:	b0 0d       	add	r27, r0
    46d4:	a1 1d       	adc	r26, r1
    46d6:	62 1f       	adc	r22, r18
    46d8:	73 9f       	mul	r23, r19
    46da:	b0 0d       	add	r27, r0
    46dc:	a1 1d       	adc	r26, r1
    46de:	62 1f       	adc	r22, r18
    46e0:	83 9f       	mul	r24, r19
    46e2:	a0 0d       	add	r26, r0
    46e4:	61 1d       	adc	r22, r1
    46e6:	22 1f       	adc	r18, r18
    46e8:	74 9f       	mul	r23, r20
    46ea:	33 27       	eor	r19, r19
    46ec:	a0 0d       	add	r26, r0
    46ee:	61 1d       	adc	r22, r1
    46f0:	23 1f       	adc	r18, r19
    46f2:	84 9f       	mul	r24, r20
    46f4:	60 0d       	add	r22, r0
    46f6:	21 1d       	adc	r18, r1
    46f8:	82 2f       	mov	r24, r18
    46fa:	76 2f       	mov	r23, r22
    46fc:	6a 2f       	mov	r22, r26
    46fe:	11 24       	eor	r1, r1
    4700:	9f 57       	subi	r25, 0x7F	; 127
    4702:	50 40       	sbci	r21, 0x00	; 0
    4704:	8a f0       	brmi	.+34     	; 0x4728 <__mulsf3_pse+0x84>
    4706:	e1 f0       	breq	.+56     	; 0x4740 <__mulsf3_pse+0x9c>
    4708:	88 23       	and	r24, r24
    470a:	4a f0       	brmi	.+18     	; 0x471e <__mulsf3_pse+0x7a>
    470c:	ee 0f       	add	r30, r30
    470e:	ff 1f       	adc	r31, r31
    4710:	bb 1f       	adc	r27, r27
    4712:	66 1f       	adc	r22, r22
    4714:	77 1f       	adc	r23, r23
    4716:	88 1f       	adc	r24, r24
    4718:	91 50       	subi	r25, 0x01	; 1
    471a:	50 40       	sbci	r21, 0x00	; 0
    471c:	a9 f7       	brne	.-22     	; 0x4708 <__mulsf3_pse+0x64>
    471e:	9e 3f       	cpi	r25, 0xFE	; 254
    4720:	51 05       	cpc	r21, r1
    4722:	70 f0       	brcs	.+28     	; 0x4740 <__mulsf3_pse+0x9c>
    4724:	79 c0       	rjmp	.+242    	; 0x4818 <__fp_inf>
    4726:	77 cf       	rjmp	.-274    	; 0x4616 <__fp_szero>
    4728:	5f 3f       	cpi	r21, 0xFF	; 255
    472a:	ec f3       	brlt	.-6      	; 0x4726 <__mulsf3_pse+0x82>
    472c:	98 3e       	cpi	r25, 0xE8	; 232
    472e:	dc f3       	brlt	.-10     	; 0x4726 <__mulsf3_pse+0x82>
    4730:	86 95       	lsr	r24
    4732:	77 95       	ror	r23
    4734:	67 95       	ror	r22
    4736:	b7 95       	ror	r27
    4738:	f7 95       	ror	r31
    473a:	e7 95       	ror	r30
    473c:	9f 5f       	subi	r25, 0xFF	; 255
    473e:	c1 f7       	brne	.-16     	; 0x4730 <__mulsf3_pse+0x8c>
    4740:	fe 2b       	or	r31, r30
    4742:	88 0f       	add	r24, r24
    4744:	91 1d       	adc	r25, r1
    4746:	96 95       	lsr	r25
    4748:	87 95       	ror	r24
    474a:	97 f9       	bld	r25, 7
    474c:	08 95       	ret

0000474e <__subsf3>:
    474e:	50 58       	subi	r21, 0x80	; 128

00004750 <__addsf3>:
    4750:	bb 27       	eor	r27, r27
    4752:	aa 27       	eor	r26, r26
    4754:	0e d0       	rcall	.+28     	; 0x4772 <__addsf3x>
    4756:	77 c0       	rjmp	.+238    	; 0x4846 <__fp_round>
    4758:	68 d0       	rcall	.+208    	; 0x482a <__fp_pscA>
    475a:	30 f0       	brcs	.+12     	; 0x4768 <__addsf3+0x18>
    475c:	6d d0       	rcall	.+218    	; 0x4838 <__fp_pscB>
    475e:	20 f0       	brcs	.+8      	; 0x4768 <__addsf3+0x18>
    4760:	31 f4       	brne	.+12     	; 0x476e <__addsf3+0x1e>
    4762:	9f 3f       	cpi	r25, 0xFF	; 255
    4764:	11 f4       	brne	.+4      	; 0x476a <__addsf3+0x1a>
    4766:	1e f4       	brtc	.+6      	; 0x476e <__addsf3+0x1e>
    4768:	5d c0       	rjmp	.+186    	; 0x4824 <__fp_nan>
    476a:	0e f4       	brtc	.+2      	; 0x476e <__addsf3+0x1e>
    476c:	e0 95       	com	r30
    476e:	e7 fb       	bst	r30, 7
    4770:	53 c0       	rjmp	.+166    	; 0x4818 <__fp_inf>

00004772 <__addsf3x>:
    4772:	e9 2f       	mov	r30, r25
    4774:	2d df       	rcall	.-422    	; 0x45d0 <__fp_split3>
    4776:	80 f3       	brcs	.-32     	; 0x4758 <__addsf3+0x8>
    4778:	ba 17       	cp	r27, r26
    477a:	62 07       	cpc	r22, r18
    477c:	73 07       	cpc	r23, r19
    477e:	84 07       	cpc	r24, r20
    4780:	95 07       	cpc	r25, r21
    4782:	18 f0       	brcs	.+6      	; 0x478a <__addsf3x+0x18>
    4784:	71 f4       	brne	.+28     	; 0x47a2 <__addsf3x+0x30>
    4786:	9e f5       	brtc	.+102    	; 0x47ee <__addsf3x+0x7c>
    4788:	45 cf       	rjmp	.-374    	; 0x4614 <__fp_zero>
    478a:	0e f4       	brtc	.+2      	; 0x478e <__addsf3x+0x1c>
    478c:	e0 95       	com	r30
    478e:	0b 2e       	mov	r0, r27
    4790:	ba 2f       	mov	r27, r26
    4792:	a0 2d       	mov	r26, r0
    4794:	0b 01       	movw	r0, r22
    4796:	b9 01       	movw	r22, r18
    4798:	90 01       	movw	r18, r0
    479a:	0c 01       	movw	r0, r24
    479c:	ca 01       	movw	r24, r20
    479e:	a0 01       	movw	r20, r0
    47a0:	11 24       	eor	r1, r1
    47a2:	ff 27       	eor	r31, r31
    47a4:	59 1b       	sub	r21, r25
    47a6:	99 f0       	breq	.+38     	; 0x47ce <__addsf3x+0x5c>
    47a8:	59 3f       	cpi	r21, 0xF9	; 249
    47aa:	50 f4       	brcc	.+20     	; 0x47c0 <__addsf3x+0x4e>
    47ac:	50 3e       	cpi	r21, 0xE0	; 224
    47ae:	68 f1       	brcs	.+90     	; 0x480a <__addsf3x+0x98>
    47b0:	1a 16       	cp	r1, r26
    47b2:	f0 40       	sbci	r31, 0x00	; 0
    47b4:	a2 2f       	mov	r26, r18
    47b6:	23 2f       	mov	r18, r19
    47b8:	34 2f       	mov	r19, r20
    47ba:	44 27       	eor	r20, r20
    47bc:	58 5f       	subi	r21, 0xF8	; 248
    47be:	f3 cf       	rjmp	.-26     	; 0x47a6 <__addsf3x+0x34>
    47c0:	46 95       	lsr	r20
    47c2:	37 95       	ror	r19
    47c4:	27 95       	ror	r18
    47c6:	a7 95       	ror	r26
    47c8:	f0 40       	sbci	r31, 0x00	; 0
    47ca:	53 95       	inc	r21
    47cc:	c9 f7       	brne	.-14     	; 0x47c0 <__addsf3x+0x4e>
    47ce:	7e f4       	brtc	.+30     	; 0x47ee <__addsf3x+0x7c>
    47d0:	1f 16       	cp	r1, r31
    47d2:	ba 0b       	sbc	r27, r26
    47d4:	62 0b       	sbc	r22, r18
    47d6:	73 0b       	sbc	r23, r19
    47d8:	84 0b       	sbc	r24, r20
    47da:	ba f0       	brmi	.+46     	; 0x480a <__addsf3x+0x98>
    47dc:	91 50       	subi	r25, 0x01	; 1
    47de:	a1 f0       	breq	.+40     	; 0x4808 <__addsf3x+0x96>
    47e0:	ff 0f       	add	r31, r31
    47e2:	bb 1f       	adc	r27, r27
    47e4:	66 1f       	adc	r22, r22
    47e6:	77 1f       	adc	r23, r23
    47e8:	88 1f       	adc	r24, r24
    47ea:	c2 f7       	brpl	.-16     	; 0x47dc <__addsf3x+0x6a>
    47ec:	0e c0       	rjmp	.+28     	; 0x480a <__addsf3x+0x98>
    47ee:	ba 0f       	add	r27, r26
    47f0:	62 1f       	adc	r22, r18
    47f2:	73 1f       	adc	r23, r19
    47f4:	84 1f       	adc	r24, r20
    47f6:	48 f4       	brcc	.+18     	; 0x480a <__addsf3x+0x98>
    47f8:	87 95       	ror	r24
    47fa:	77 95       	ror	r23
    47fc:	67 95       	ror	r22
    47fe:	b7 95       	ror	r27
    4800:	f7 95       	ror	r31
    4802:	9e 3f       	cpi	r25, 0xFE	; 254
    4804:	08 f0       	brcs	.+2      	; 0x4808 <__addsf3x+0x96>
    4806:	b3 cf       	rjmp	.-154    	; 0x476e <__addsf3+0x1e>
    4808:	93 95       	inc	r25
    480a:	88 0f       	add	r24, r24
    480c:	08 f0       	brcs	.+2      	; 0x4810 <__addsf3x+0x9e>
    480e:	99 27       	eor	r25, r25
    4810:	ee 0f       	add	r30, r30
    4812:	97 95       	ror	r25
    4814:	87 95       	ror	r24
    4816:	08 95       	ret

00004818 <__fp_inf>:
    4818:	97 f9       	bld	r25, 7
    481a:	9f 67       	ori	r25, 0x7F	; 127
    481c:	80 e8       	ldi	r24, 0x80	; 128
    481e:	70 e0       	ldi	r23, 0x00	; 0
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	08 95       	ret

00004824 <__fp_nan>:
    4824:	9f ef       	ldi	r25, 0xFF	; 255
    4826:	80 ec       	ldi	r24, 0xC0	; 192
    4828:	08 95       	ret

0000482a <__fp_pscA>:
    482a:	00 24       	eor	r0, r0
    482c:	0a 94       	dec	r0
    482e:	16 16       	cp	r1, r22
    4830:	17 06       	cpc	r1, r23
    4832:	18 06       	cpc	r1, r24
    4834:	09 06       	cpc	r0, r25
    4836:	08 95       	ret

00004838 <__fp_pscB>:
    4838:	00 24       	eor	r0, r0
    483a:	0a 94       	dec	r0
    483c:	12 16       	cp	r1, r18
    483e:	13 06       	cpc	r1, r19
    4840:	14 06       	cpc	r1, r20
    4842:	05 06       	cpc	r0, r21
    4844:	08 95       	ret

00004846 <__fp_round>:
    4846:	09 2e       	mov	r0, r25
    4848:	03 94       	inc	r0
    484a:	00 0c       	add	r0, r0
    484c:	11 f4       	brne	.+4      	; 0x4852 <__fp_round+0xc>
    484e:	88 23       	and	r24, r24
    4850:	52 f0       	brmi	.+20     	; 0x4866 <__fp_round+0x20>
    4852:	bb 0f       	add	r27, r27
    4854:	40 f4       	brcc	.+16     	; 0x4866 <__fp_round+0x20>
    4856:	bf 2b       	or	r27, r31
    4858:	11 f4       	brne	.+4      	; 0x485e <__fp_round+0x18>
    485a:	60 ff       	sbrs	r22, 0
    485c:	04 c0       	rjmp	.+8      	; 0x4866 <__fp_round+0x20>
    485e:	6f 5f       	subi	r22, 0xFF	; 255
    4860:	7f 4f       	sbci	r23, 0xFF	; 255
    4862:	8f 4f       	sbci	r24, 0xFF	; 255
    4864:	9f 4f       	sbci	r25, 0xFF	; 255
    4866:	08 95       	ret

00004868 <_hihTwiCallback>:
    4868:	65 30       	cpi	r22, 0x05	; 5
    486a:	f1 f4       	brne	.+60     	; 0x48a8 <_hihTwiCallback+0x40>
    486c:	fa 01       	movw	r30, r20
    486e:	80 81       	ld	r24, Z
    4870:	8f 73       	andi	r24, 0x3F	; 63
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	98 2f       	mov	r25, r24
    4876:	88 27       	eor	r24, r24
    4878:	21 81       	ldd	r18, Z+1	; 0x01
    487a:	82 2b       	or	r24, r18
    487c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4880:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4884:	82 81       	ldd	r24, Z+2	; 0x02
    4886:	f0 e4       	ldi	r31, 0x40	; 64
    4888:	8f 9f       	mul	r24, r31
    488a:	c0 01       	movw	r24, r0
    488c:	11 24       	eor	r1, r1
    488e:	fa 01       	movw	r30, r20
    4890:	23 81       	ldd	r18, Z+3	; 0x03
    4892:	26 95       	lsr	r18
    4894:	26 95       	lsr	r18
    4896:	82 2b       	or	r24, r18
    4898:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    489c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	80 93 93 14 	sts	0x1493, r24	; 0x801493 <_measuringIsReady>
    48a6:	08 95       	ret
    48a8:	64 30       	cpi	r22, 0x04	; 4
    48aa:	51 f0       	breq	.+20     	; 0x48c0 <_hihTwiCallback+0x58>
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e4       	ldi	r25, 0x40	; 64
    48b0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    48b4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    48b8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    48bc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    48c0:	08 95       	ret

000048c2 <hih8120_initialise>:
    48c2:	0f 93       	push	r16
    48c4:	1f 93       	push	r17
    48c6:	04 e3       	ldi	r16, 0x34	; 52
    48c8:	14 e2       	ldi	r17, 0x24	; 36
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	34 e2       	ldi	r19, 0x24	; 36
    48ce:	44 ef       	ldi	r20, 0xF4	; 244
    48d0:	50 e0       	ldi	r21, 0x00	; 0
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	87 e2       	ldi	r24, 0x27	; 39
    48d6:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <twiCreate>
    48da:	90 93 95 14 	sts	0x1495, r25	; 0x801495 <_hih8120Handler+0x1>
    48de:	80 93 94 14 	sts	0x1494, r24	; 0x801494 <_hih8120Handler>
    48e2:	21 e0       	ldi	r18, 0x01	; 1
    48e4:	89 2b       	or	r24, r25
    48e6:	09 f0       	breq	.+2      	; 0x48ea <hih8120_initialise+0x28>
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	82 2f       	mov	r24, r18
    48ec:	1f 91       	pop	r17
    48ee:	0f 91       	pop	r16
    48f0:	08 95       	ret

000048f2 <hih8120_wakeup>:
    48f2:	80 91 94 14 	lds	r24, 0x1494	; 0x801494 <_hih8120Handler>
    48f6:	90 91 95 14 	lds	r25, 0x1495	; 0x801495 <_hih8120Handler+0x1>
    48fa:	00 97       	sbiw	r24, 0x00	; 0
    48fc:	59 f0       	breq	.+22     	; 0x4914 <hih8120_wakeup+0x22>
    48fe:	40 e0       	ldi	r20, 0x00	; 0
    4900:	60 e0       	ldi	r22, 0x00	; 0
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <twiTransmit>
    4908:	84 30       	cpi	r24, 0x04	; 4
    490a:	31 f4       	brne	.+12     	; 0x4918 <hih8120_wakeup+0x26>
    490c:	10 92 93 14 	sts	0x1493, r1	; 0x801493 <_measuringIsReady>
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	08 95       	ret
    4914:	82 e0       	ldi	r24, 0x02	; 2
    4916:	08 95       	ret
    4918:	83 e0       	ldi	r24, 0x03	; 3
    491a:	08 95       	ret

0000491c <hih8120_measure>:
    491c:	80 91 94 14 	lds	r24, 0x1494	; 0x801494 <_hih8120Handler>
    4920:	90 91 95 14 	lds	r25, 0x1495	; 0x801495 <_hih8120Handler+0x1>
    4924:	00 97       	sbiw	r24, 0x00	; 0
    4926:	39 f0       	breq	.+14     	; 0x4936 <hih8120_measure+0x1a>
    4928:	64 e0       	ldi	r22, 0x04	; 4
    492a:	0e 94 39 30 	call	0x6072	; 0x6072 <twiReceive>
    492e:	85 30       	cpi	r24, 0x05	; 5
    4930:	21 f0       	breq	.+8      	; 0x493a <hih8120_measure+0x1e>
    4932:	83 e0       	ldi	r24, 0x03	; 3
    4934:	08 95       	ret
    4936:	82 e0       	ldi	r24, 0x02	; 2
    4938:	08 95       	ret
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	08 95       	ret

0000493e <hih8120_getHumidity>:
    493e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4942:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <__floatunsisf>
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	48 ec       	ldi	r20, 0xC8	; 200
    4954:	52 e4       	ldi	r21, 0x42	; 66
    4956:	98 de       	rcall	.-720    	; 0x4688 <__mulsf3>
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	38 ef       	ldi	r19, 0xF8	; 248
    495c:	4f e7       	ldi	r20, 0x7F	; 127
    495e:	56 e4       	ldi	r21, 0x46	; 70
    4960:	0c 94 ce 34 	jmp	0x699c	; 0x699c <__divsf3>
    4964:	08 95       	ret

00004966 <hih8120_getHumidityPercent_x10>:
    4966:	eb df       	rcall	.-42     	; 0x493e <hih8120_getHumidity>
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	40 e2       	ldi	r20, 0x20	; 32
    496e:	51 e4       	ldi	r21, 0x41	; 65
    4970:	8b de       	rcall	.-746    	; 0x4688 <__mulsf3>
    4972:	de dd       	rcall	.-1092   	; 0x4530 <__fixunssfsi>
    4974:	cb 01       	movw	r24, r22
    4976:	08 95       	ret

00004978 <hih8120_getTemperature>:
    4978:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    497c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <__floatunsisf>
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	45 e2       	ldi	r20, 0x25	; 37
    498e:	53 e4       	ldi	r21, 0x43	; 67
    4990:	7b de       	rcall	.-778    	; 0x4688 <__mulsf3>
    4992:	20 e0       	ldi	r18, 0x00	; 0
    4994:	38 ef       	ldi	r19, 0xF8	; 248
    4996:	4f e7       	ldi	r20, 0x7F	; 127
    4998:	56 e4       	ldi	r21, 0x46	; 70
    499a:	0e 94 ce 34 	call	0x699c	; 0x699c <__divsf3>
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	40 e2       	ldi	r20, 0x20	; 32
    49a4:	52 e4       	ldi	r21, 0x42	; 66
    49a6:	d3 ce       	rjmp	.-602    	; 0x474e <__subsf3>
    49a8:	08 95       	ret

000049aa <_serialCallBack>:
    49aa:	0f 93       	push	r16
    49ac:	1f 93       	push	r17
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	1f 92       	push	r1
    49b4:	1f 92       	push	r1
    49b6:	cd b7       	in	r28, 0x3d	; 61
    49b8:	de b7       	in	r29, 0x3e	; 62
    49ba:	8c 01       	movw	r16, r24
    49bc:	19 82       	std	Y+1, r1	; 0x01
    49be:	2d c0       	rjmp	.+90     	; 0x4a1a <_serialCallBack+0x70>
    49c0:	e0 91 cd 14 	lds	r30, 0x14CD	; 0x8014cd <rec_buf_inp.2878>
    49c4:	ec 32       	cpi	r30, 0x2C	; 44
    49c6:	50 f4       	brcc	.+20     	; 0x49dc <_serialCallBack+0x32>
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    49ca:	8e 0f       	add	r24, r30
    49cc:	80 93 cd 14 	sts	0x14CD, r24	; 0x8014cd <rec_buf_inp.2878>
    49d0:	f0 e0       	ldi	r31, 0x00	; 0
    49d2:	e1 50       	subi	r30, 0x01	; 1
    49d4:	fb 4e       	sbci	r31, 0xEB	; 235
    49d6:	8a 81       	ldd	r24, Y+2	; 0x02
    49d8:	80 83       	st	Z, r24
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <_serialCallBack+0x36>
    49dc:	10 92 cd 14 	sts	0x14CD, r1	; 0x8014cd <rec_buf_inp.2878>
    49e0:	8a 81       	ldd	r24, Y+2	; 0x02
    49e2:	8a 30       	cpi	r24, 0x0A	; 10
    49e4:	d1 f4       	brne	.+52     	; 0x4a1a <_serialCallBack+0x70>
    49e6:	40 91 cd 14 	lds	r20, 0x14CD	; 0x8014cd <rec_buf_inp.2878>
    49ea:	50 e0       	ldi	r21, 0x00	; 0
    49ec:	fa 01       	movw	r30, r20
    49ee:	e3 50       	subi	r30, 0x03	; 3
    49f0:	fb 4e       	sbci	r31, 0xEB	; 235
    49f2:	10 82       	st	Z, r1
    49f4:	41 50       	subi	r20, 0x01	; 1
    49f6:	51 09       	sbc	r21, r1
    49f8:	9e 01       	movw	r18, r28
    49fa:	2f 5f       	subi	r18, 0xFF	; 255
    49fc:	3f 4f       	sbci	r19, 0xFF	; 255
    49fe:	6f ef       	ldi	r22, 0xFF	; 255
    4a00:	74 e1       	ldi	r23, 0x14	; 20
    4a02:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <_serialReplyBufferHandle>
    4a06:	90 91 d1 14 	lds	r25, 0x14D1	; 0x8014d1 <_serialReplyBufferHandle+0x1>
    4a0a:	0e 94 af 11 	call	0x235e	; 0x235e <xStreamBufferSendFromISR>
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	81 11       	cpse	r24, r1
    4a12:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vPortYield>
    4a16:	10 92 cd 14 	sts	0x14CD, r1	; 0x8014cd <rec_buf_inp.2878>
    4a1a:	be 01       	movw	r22, r28
    4a1c:	6e 5f       	subi	r22, 0xFE	; 254
    4a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a20:	c8 01       	movw	r24, r16
    4a22:	3a d6       	rcall	.+3188   	; 0x5698 <serial_getByte>
    4a24:	88 23       	and	r24, r24
    4a26:	61 f2       	breq	.-104    	; 0x49c0 <_serialCallBack+0x16>
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	df 91       	pop	r29
    4a2e:	cf 91       	pop	r28
    4a30:	1f 91       	pop	r17
    4a32:	0f 91       	pop	r16
    4a34:	08 95       	ret

00004a36 <_uploadMessage>:
    4a36:	0f 93       	push	r16
    4a38:	1f 93       	push	r17
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	8c 01       	movw	r16, r24
    4a40:	eb 01       	movw	r28, r22
    4a42:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <_serialReplyBufferHandle>
    4a46:	90 91 d1 14 	lds	r25, 0x14D1	; 0x8014d1 <_serialReplyBufferHandle+0x1>
    4a4a:	0e 94 ba 10 	call	0x2174	; 0x2174 <xStreamBufferReset>
    4a4e:	b8 01       	movw	r22, r16
    4a50:	86 e9       	ldi	r24, 0x96	; 150
    4a52:	94 e1       	ldi	r25, 0x14	; 20
    4a54:	0e 94 1c 38 	call	0x7038	; 0x7038 <strcpy>
    4a58:	20 97       	sbiw	r28, 0x00	; 0
    4a5a:	79 f0       	breq	.+30     	; 0x4a7a <_uploadMessage+0x44>
    4a5c:	e6 e9       	ldi	r30, 0x96	; 150
    4a5e:	f4 e1       	ldi	r31, 0x14	; 20
    4a60:	01 90       	ld	r0, Z+
    4a62:	00 20       	and	r0, r0
    4a64:	e9 f7       	brne	.-6      	; 0x4a60 <_uploadMessage+0x2a>
    4a66:	31 97       	sbiw	r30, 0x01	; 1
    4a68:	80 e2       	ldi	r24, 0x20	; 32
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	91 83       	std	Z+1, r25	; 0x01
    4a6e:	80 83       	st	Z, r24
    4a70:	be 01       	movw	r22, r28
    4a72:	86 e9       	ldi	r24, 0x96	; 150
    4a74:	94 e1       	ldi	r25, 0x14	; 20
    4a76:	0e 94 11 38 	call	0x7022	; 0x7022 <strcat>
    4a7a:	e6 e9       	ldi	r30, 0x96	; 150
    4a7c:	f4 e1       	ldi	r31, 0x14	; 20
    4a7e:	df 01       	movw	r26, r30
    4a80:	0d 90       	ld	r0, X+
    4a82:	00 20       	and	r0, r0
    4a84:	e9 f7       	brne	.-6      	; 0x4a80 <_uploadMessage+0x4a>
    4a86:	11 97       	sbiw	r26, 0x01	; 1
    4a88:	8d e0       	ldi	r24, 0x0D	; 13
    4a8a:	9a e0       	ldi	r25, 0x0A	; 10
    4a8c:	11 96       	adiw	r26, 0x01	; 1
    4a8e:	9c 93       	st	X, r25
    4a90:	8e 93       	st	-X, r24
    4a92:	12 96       	adiw	r26, 0x02	; 2
    4a94:	1c 92       	st	X, r1
    4a96:	01 90       	ld	r0, Z+
    4a98:	00 20       	and	r0, r0
    4a9a:	e9 f7       	brne	.-6      	; 0x4a96 <_uploadMessage+0x60>
    4a9c:	31 97       	sbiw	r30, 0x01	; 1
    4a9e:	e6 59       	subi	r30, 0x96	; 150
    4aa0:	f4 41       	sbci	r31, 0x14	; 20
    4aa2:	ae 2f       	mov	r26, r30
    4aa4:	86 e9       	ldi	r24, 0x96	; 150
    4aa6:	94 e1       	ldi	r25, 0x14	; 20
    4aa8:	ac 01       	movw	r20, r24
    4aaa:	6a 2f       	mov	r22, r26
    4aac:	80 91 d2 14 	lds	r24, 0x14D2	; 0x8014d2 <_rn2483_serial>
    4ab0:	90 91 d3 14 	lds	r25, 0x14D3	; 0x8014d3 <_rn2483_serial+0x1>
    4ab4:	9c d5       	rcall	.+2872   	; 0x55ee <serial_sendBytes>
    4ab6:	81 11       	cpse	r24, r1
    4ab8:	11 c0       	rjmp	.+34     	; 0x4adc <_uploadMessage+0xa6>
    4aba:	08 e2       	ldi	r16, 0x28	; 40
    4abc:	15 e0       	ldi	r17, 0x05	; 5
    4abe:	20 e0       	ldi	r18, 0x00	; 0
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	4d e2       	ldi	r20, 0x2D	; 45
    4ac4:	50 e0       	ldi	r21, 0x00	; 0
    4ac6:	69 e5       	ldi	r22, 0x59	; 89
    4ac8:	75 e1       	ldi	r23, 0x15	; 21
    4aca:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <_serialReplyBufferHandle>
    4ace:	90 91 d1 14 	lds	r25, 0x14D1	; 0x8014d1 <_serialReplyBufferHandle+0x1>
    4ad2:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <xStreamBufferReceive>
    4ad6:	89 e5       	ldi	r24, 0x59	; 89
    4ad8:	95 e1       	ldi	r25, 0x15	; 21
    4ada:	02 c0       	rjmp	.+4      	; 0x4ae0 <_uploadMessage+0xaa>
    4adc:	80 e0       	ldi	r24, 0x00	; 0
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	df 91       	pop	r29
    4ae2:	cf 91       	pop	r28
    4ae4:	1f 91       	pop	r17
    4ae6:	0f 91       	pop	r16
    4ae8:	08 95       	ret

00004aea <_reply2ReturnCode>:
    4aea:	2f 92       	push	r2
    4aec:	3f 92       	push	r3
    4aee:	4f 92       	push	r4
    4af0:	5f 92       	push	r5
    4af2:	6f 92       	push	r6
    4af4:	7f 92       	push	r7
    4af6:	8f 92       	push	r8
    4af8:	9f 92       	push	r9
    4afa:	af 92       	push	r10
    4afc:	bf 92       	push	r11
    4afe:	cf 92       	push	r12
    4b00:	df 92       	push	r13
    4b02:	ef 92       	push	r14
    4b04:	ff 92       	push	r15
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	5c 01       	movw	r10, r24
    4b10:	fc 01       	movw	r30, r24
    4b12:	01 90       	ld	r0, Z+
    4b14:	00 20       	and	r0, r0
    4b16:	e9 f7       	brne	.-6      	; 0x4b12 <_reply2ReturnCode+0x28>
    4b18:	31 97       	sbiw	r30, 0x01	; 1
    4b1a:	6f 01       	movw	r12, r30
    4b1c:	c8 1a       	sub	r12, r24
    4b1e:	d9 0a       	sbc	r13, r25
    4b20:	5c 2c       	mov	r5, r12
    4b22:	0f 2e       	mov	r0, r31
    4b24:	f9 e7       	ldi	r31, 0x79	; 121
    4b26:	8f 2e       	mov	r8, r31
    4b28:	f7 e0       	ldi	r31, 0x07	; 7
    4b2a:	9f 2e       	mov	r9, r31
    4b2c:	f0 2d       	mov	r31, r0
    4b2e:	e1 2c       	mov	r14, r1
    4b30:	f1 2c       	mov	r15, r1
    4b32:	4c 2c       	mov	r4, r12
    4b34:	37 01       	movw	r6, r14
    4b36:	f4 01       	movw	r30, r8
    4b38:	01 81       	ldd	r16, Z+1	; 0x01
    4b3a:	12 81       	ldd	r17, Z+2	; 0x02
    4b3c:	e8 01       	movw	r28, r16
    4b3e:	09 90       	ld	r0, Y+
    4b40:	00 20       	and	r0, r0
    4b42:	e9 f7       	brne	.-6      	; 0x4b3e <_reply2ReturnCode+0x54>
    4b44:	21 97       	sbiw	r28, 0x01	; 1
    4b46:	c0 1b       	sub	r28, r16
    4b48:	d1 0b       	sbc	r29, r17
    4b4a:	3c 2e       	mov	r3, r28
    4b4c:	f9 e0       	ldi	r31, 0x09	; 9
    4b4e:	cf 16       	cp	r12, r31
    4b50:	d1 04       	cpc	r13, r1
    4b52:	58 f0       	brcs	.+22     	; 0x4b6a <_reply2ReturnCode+0x80>
    4b54:	f4 01       	movw	r30, r8
    4b56:	20 80       	ld	r2, Z
    4b58:	fe e0       	ldi	r31, 0x0E	; 14
    4b5a:	2f 12       	cpse	r2, r31
    4b5c:	06 c0       	rjmp	.+12     	; 0x4b6a <_reply2ReturnCode+0x80>
    4b5e:	b8 01       	movw	r22, r16
    4b60:	c5 01       	movw	r24, r10
    4b62:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <strcasestr>
    4b66:	89 2b       	or	r24, r25
    4b68:	09 f5       	brne	.+66     	; 0x4bac <_reply2ReturnCode+0xc2>
    4b6a:	44 2d       	mov	r20, r4
    4b6c:	35 14       	cp	r3, r5
    4b6e:	08 f4       	brcc	.+2      	; 0x4b72 <_reply2ReturnCode+0x88>
    4b70:	4c 2f       	mov	r20, r28
    4b72:	50 e0       	ldi	r21, 0x00	; 0
    4b74:	b8 01       	movw	r22, r16
    4b76:	c5 01       	movw	r24, r10
    4b78:	0e 94 23 38 	call	0x7046	; 0x7046 <strncasecmp>
    4b7c:	89 2b       	or	r24, r25
    4b7e:	49 f4       	brne	.+18     	; 0x4b92 <_reply2ReturnCode+0xa8>
    4b80:	f3 01       	movw	r30, r6
    4b82:	ee 0f       	add	r30, r30
    4b84:	ff 1f       	adc	r31, r31
    4b86:	e6 0d       	add	r30, r6
    4b88:	f7 1d       	adc	r31, r7
    4b8a:	e7 58       	subi	r30, 0x87	; 135
    4b8c:	f8 4f       	sbci	r31, 0xF8	; 248
    4b8e:	20 80       	ld	r2, Z
    4b90:	0d c0       	rjmp	.+26     	; 0x4bac <_reply2ReturnCode+0xc2>
    4b92:	8f ef       	ldi	r24, 0xFF	; 255
    4b94:	e8 1a       	sub	r14, r24
    4b96:	f8 0a       	sbc	r15, r24
    4b98:	e3 e0       	ldi	r30, 0x03	; 3
    4b9a:	8e 0e       	add	r8, r30
    4b9c:	91 1c       	adc	r9, r1
    4b9e:	f1 e1       	ldi	r31, 0x11	; 17
    4ba0:	ef 16       	cp	r14, r31
    4ba2:	f1 04       	cpc	r15, r1
    4ba4:	39 f6       	brne	.-114    	; 0x4b34 <_reply2ReturnCode+0x4a>
    4ba6:	68 94       	set
    4ba8:	22 24       	eor	r2, r2
    4baa:	24 f8       	bld	r2, 4
    4bac:	82 2d       	mov	r24, r2
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	1f 91       	pop	r17
    4bb4:	0f 91       	pop	r16
    4bb6:	ff 90       	pop	r15
    4bb8:	ef 90       	pop	r14
    4bba:	df 90       	pop	r13
    4bbc:	cf 90       	pop	r12
    4bbe:	bf 90       	pop	r11
    4bc0:	af 90       	pop	r10
    4bc2:	9f 90       	pop	r9
    4bc4:	8f 90       	pop	r8
    4bc6:	7f 90       	pop	r7
    4bc8:	6f 90       	pop	r6
    4bca:	5f 90       	pop	r5
    4bcc:	4f 90       	pop	r4
    4bce:	3f 90       	pop	r3
    4bd0:	2f 90       	pop	r2
    4bd2:	08 95       	ret

00004bd4 <_uploadMessageRc>:
    4bd4:	30 df       	rcall	.-416    	; 0x4a36 <_uploadMessage>
    4bd6:	89 cf       	rjmp	.-238    	; 0x4aea <_reply2ReturnCode>
    4bd8:	08 95       	ret

00004bda <lora_driver_flushBuffers>:
    4bda:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <_serialReplyBufferHandle>
    4bde:	90 91 d1 14 	lds	r25, 0x14D1	; 0x8014d1 <_serialReplyBufferHandle+0x1>
    4be2:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <xStreamBufferReset>
    4be6:	08 95       	ret

00004be8 <lora_driver_initialise>:
    4be8:	8f 92       	push	r8
    4bea:	9f 92       	push	r9
    4bec:	af 92       	push	r10
    4bee:	cf 92       	push	r12
    4bf0:	ef 92       	push	r14
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	cf 93       	push	r28
    4bf8:	c8 2f       	mov	r28, r24
    4bfa:	8b 01       	movw	r16, r22
    4bfc:	41 e0       	ldi	r20, 0x01	; 1
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
    4c00:	70 e0       	ldi	r23, 0x00	; 0
    4c02:	88 ec       	ldi	r24, 0xC8	; 200
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	0e 94 88 10 	call	0x2110	; 0x2110 <xStreamBufferGenericCreate>
    4c0a:	90 93 d1 14 	sts	0x14D1, r25	; 0x8014d1 <_serialReplyBufferHandle+0x1>
    4c0e:	80 93 d0 14 	sts	0x14D0, r24	; 0x8014d0 <_serialReplyBufferHandle>
    4c12:	10 93 cf 14 	sts	0x14CF, r17	; 0x8014cf <_downlinkMessageBuffer+0x1>
    4c16:	00 93 ce 14 	sts	0x14CE, r16	; 0x8014ce <_downlinkMessageBuffer>
    4c1a:	0f 2e       	mov	r0, r31
    4c1c:	f5 ed       	ldi	r31, 0xD5	; 213
    4c1e:	8f 2e       	mov	r8, r31
    4c20:	f4 e2       	ldi	r31, 0x24	; 36
    4c22:	9f 2e       	mov	r9, r31
    4c24:	f0 2d       	mov	r31, r0
    4c26:	68 94       	set
    4c28:	aa 24       	eor	r10, r10
    4c2a:	a6 f8       	bld	r10, 6
    4c2c:	68 94       	set
    4c2e:	cc 24       	eor	r12, r12
    4c30:	c6 f8       	bld	r12, 6
    4c32:	e1 2c       	mov	r14, r1
    4c34:	00 e0       	ldi	r16, 0x00	; 0
    4c36:	23 e0       	ldi	r18, 0x03	; 3
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	51 ee       	ldi	r21, 0xE1	; 225
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	8c 2f       	mov	r24, r28
    4c42:	06 d4       	rcall	.+2060   	; 0x5450 <serial_create>
    4c44:	90 93 d3 14 	sts	0x14D3, r25	; 0x8014d3 <_rn2483_serial+0x1>
    4c48:	80 93 d2 14 	sts	0x14D2, r24	; 0x8014d2 <_rn2483_serial>
    4c4c:	e7 e0       	ldi	r30, 0x07	; 7
    4c4e:	f1 e0       	ldi	r31, 0x01	; 1
    4c50:	80 81       	ld	r24, Z
    4c52:	80 61       	ori	r24, 0x10	; 16
    4c54:	80 83       	st	Z, r24
    4c56:	cf 91       	pop	r28
    4c58:	1f 91       	pop	r17
    4c5a:	0f 91       	pop	r16
    4c5c:	ef 90       	pop	r14
    4c5e:	cf 90       	pop	r12
    4c60:	af 90       	pop	r10
    4c62:	9f 90       	pop	r9
    4c64:	8f 90       	pop	r8
    4c66:	08 95       	ret

00004c68 <lora_driver_resetRn2483>:
    4c68:	88 23       	and	r24, r24
    4c6a:	31 f0       	breq	.+12     	; 0x4c78 <lora_driver_resetRn2483+0x10>
    4c6c:	e8 e0       	ldi	r30, 0x08	; 8
    4c6e:	f1 e0       	ldi	r31, 0x01	; 1
    4c70:	80 81       	ld	r24, Z
    4c72:	8f 7e       	andi	r24, 0xEF	; 239
    4c74:	80 83       	st	Z, r24
    4c76:	08 95       	ret
    4c78:	e8 e0       	ldi	r30, 0x08	; 8
    4c7a:	f1 e0       	ldi	r31, 0x01	; 1
    4c7c:	80 81       	ld	r24, Z
    4c7e:	80 61       	ori	r24, 0x10	; 16
    4c80:	80 83       	st	Z, r24
    4c82:	08 95       	ret

00004c84 <lora_driver_rn2483FactoryReset>:
    4c84:	60 e0       	ldi	r22, 0x00	; 0
    4c86:	70 e0       	ldi	r23, 0x00	; 0
    4c88:	8f ef       	ldi	r24, 0xFF	; 255
    4c8a:	94 e0       	ldi	r25, 0x04	; 4
    4c8c:	d4 de       	rcall	.-600    	; 0x4a36 <_uploadMessage>
    4c8e:	e9 e5       	ldi	r30, 0x59	; 89
    4c90:	f5 e1       	ldi	r31, 0x15	; 21
    4c92:	01 90       	ld	r0, Z+
    4c94:	00 20       	and	r0, r0
    4c96:	e9 f7       	brne	.-6      	; 0x4c92 <lora_driver_rn2483FactoryReset+0xe>
    4c98:	31 97       	sbiw	r30, 0x01	; 1
    4c9a:	e9 55       	subi	r30, 0x59	; 89
    4c9c:	f5 41       	sbci	r31, 0x15	; 21
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	75 97       	sbiw	r30, 0x15	; 21
    4ca2:	08 f0       	brcs	.+2      	; 0x4ca6 <lora_driver_rn2483FactoryReset+0x22>
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	08 95       	ret

00004ca8 <lora_driver_getRn2483Hweui>:
    4ca8:	cf 93       	push	r28
    4caa:	df 93       	push	r29
    4cac:	ec 01       	movw	r28, r24
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	70 e0       	ldi	r23, 0x00	; 0
    4cb2:	80 e1       	ldi	r24, 0x10	; 16
    4cb4:	95 e0       	ldi	r25, 0x05	; 5
    4cb6:	bf de       	rcall	.-642    	; 0x4a36 <_uploadMessage>
    4cb8:	e9 e5       	ldi	r30, 0x59	; 89
    4cba:	f5 e1       	ldi	r31, 0x15	; 21
    4cbc:	01 90       	ld	r0, Z+
    4cbe:	00 20       	and	r0, r0
    4cc0:	e9 f7       	brne	.-6      	; 0x4cbc <lora_driver_getRn2483Hweui+0x14>
    4cc2:	ea 56       	subi	r30, 0x6A	; 106
    4cc4:	f5 41       	sbci	r31, 0x15	; 21
    4cc6:	39 f4       	brne	.+14     	; 0x4cd6 <lora_driver_getRn2483Hweui+0x2e>
    4cc8:	69 e5       	ldi	r22, 0x59	; 89
    4cca:	75 e1       	ldi	r23, 0x15	; 21
    4ccc:	ce 01       	movw	r24, r28
    4cce:	0e 94 1c 38 	call	0x7038	; 0x7038 <strcpy>
    4cd2:	80 e0       	ldi	r24, 0x00	; 0
    4cd4:	02 c0       	rjmp	.+4      	; 0x4cda <lora_driver_getRn2483Hweui+0x32>
    4cd6:	18 82       	st	Y, r1
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	df 91       	pop	r29
    4cdc:	cf 91       	pop	r28
    4cde:	08 95       	ret

00004ce0 <lora_driver_setDeviceIdentifier>:
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	01 90       	ld	r0, Z+
    4ce4:	00 20       	and	r0, r0
    4ce6:	e9 f7       	brne	.-6      	; 0x4ce2 <lora_driver_setDeviceIdentifier+0x2>
    4ce8:	9f 01       	movw	r18, r30
    4cea:	21 51       	subi	r18, 0x11	; 17
    4cec:	31 09       	sbc	r19, r1
    4cee:	28 17       	cp	r18, r24
    4cf0:	39 07       	cpc	r19, r25
    4cf2:	29 f4       	brne	.+10     	; 0x4cfe <lora_driver_setDeviceIdentifier+0x1e>
    4cf4:	bc 01       	movw	r22, r24
    4cf6:	8e e3       	ldi	r24, 0x3E	; 62
    4cf8:	95 e0       	ldi	r25, 0x05	; 5
    4cfa:	6c cf       	rjmp	.-296    	; 0x4bd4 <_uploadMessageRc>
    4cfc:	08 95       	ret
    4cfe:	89 e0       	ldi	r24, 0x09	; 9
    4d00:	08 95       	ret

00004d02 <lora_driver_setApplicationIdentifier>:
    4d02:	fc 01       	movw	r30, r24
    4d04:	01 90       	ld	r0, Z+
    4d06:	00 20       	and	r0, r0
    4d08:	e9 f7       	brne	.-6      	; 0x4d04 <lora_driver_setApplicationIdentifier+0x2>
    4d0a:	9f 01       	movw	r18, r30
    4d0c:	21 51       	subi	r18, 0x11	; 17
    4d0e:	31 09       	sbc	r19, r1
    4d10:	28 17       	cp	r18, r24
    4d12:	39 07       	cpc	r19, r25
    4d14:	29 f4       	brne	.+10     	; 0x4d20 <lora_driver_setApplicationIdentifier+0x1e>
    4d16:	bc 01       	movw	r22, r24
    4d18:	8d e4       	ldi	r24, 0x4D	; 77
    4d1a:	95 e0       	ldi	r25, 0x05	; 5
    4d1c:	5b cf       	rjmp	.-330    	; 0x4bd4 <_uploadMessageRc>
    4d1e:	08 95       	ret
    4d20:	89 e0       	ldi	r24, 0x09	; 9
    4d22:	08 95       	ret

00004d24 <lora_driver_setApplicationKey>:
    4d24:	fc 01       	movw	r30, r24
    4d26:	01 90       	ld	r0, Z+
    4d28:	00 20       	and	r0, r0
    4d2a:	e9 f7       	brne	.-6      	; 0x4d26 <lora_driver_setApplicationKey+0x2>
    4d2c:	9f 01       	movw	r18, r30
    4d2e:	21 52       	subi	r18, 0x21	; 33
    4d30:	31 09       	sbc	r19, r1
    4d32:	28 17       	cp	r18, r24
    4d34:	39 07       	cpc	r19, r25
    4d36:	29 f4       	brne	.+10     	; 0x4d42 <lora_driver_setApplicationKey+0x1e>
    4d38:	bc 01       	movw	r22, r24
    4d3a:	8c e5       	ldi	r24, 0x5C	; 92
    4d3c:	95 e0       	ldi	r25, 0x05	; 5
    4d3e:	4a cf       	rjmp	.-364    	; 0x4bd4 <_uploadMessageRc>
    4d40:	08 95       	ret
    4d42:	89 e0       	ldi	r24, 0x09	; 9
    4d44:	08 95       	ret

00004d46 <lora_driver_saveMac>:
    4d46:	60 e0       	ldi	r22, 0x00	; 0
    4d48:	70 e0       	ldi	r23, 0x00	; 0
    4d4a:	8b e9       	ldi	r24, 0x9B	; 155
    4d4c:	95 e0       	ldi	r25, 0x05	; 5
    4d4e:	42 cf       	rjmp	.-380    	; 0x4bd4 <_uploadMessageRc>
    4d50:	08 95       	ret

00004d52 <lora_driver_join>:
    4d52:	0f 93       	push	r16
    4d54:	1f 93       	push	r17
    4d56:	e8 2f       	mov	r30, r24
    4d58:	f0 e0       	ldi	r31, 0x00	; 0
    4d5a:	ee 0f       	add	r30, r30
    4d5c:	ff 1f       	adc	r31, r31
    4d5e:	eb 58       	subi	r30, 0x8B	; 139
    4d60:	f8 4f       	sbci	r31, 0xF8	; 248
    4d62:	60 81       	ld	r22, Z
    4d64:	71 81       	ldd	r23, Z+1	; 0x01
    4d66:	84 ea       	ldi	r24, 0xA4	; 164
    4d68:	95 e0       	ldi	r25, 0x05	; 5
    4d6a:	34 df       	rcall	.-408    	; 0x4bd4 <_uploadMessageRc>
    4d6c:	81 11       	cpse	r24, r1
    4d6e:	14 c0       	rjmp	.+40     	; 0x4d98 <lora_driver_join+0x46>
    4d70:	08 e2       	ldi	r16, 0x28	; 40
    4d72:	15 e0       	ldi	r17, 0x05	; 5
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	4d e2       	ldi	r20, 0x2D	; 45
    4d7a:	50 e0       	ldi	r21, 0x00	; 0
    4d7c:	69 e5       	ldi	r22, 0x59	; 89
    4d7e:	75 e1       	ldi	r23, 0x15	; 21
    4d80:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <_serialReplyBufferHandle>
    4d84:	90 91 d1 14 	lds	r25, 0x14D1	; 0x8014d1 <_serialReplyBufferHandle+0x1>
    4d88:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <xStreamBufferReceive>
    4d8c:	88 23       	and	r24, r24
    4d8e:	21 f0       	breq	.+8      	; 0x4d98 <lora_driver_join+0x46>
    4d90:	89 e5       	ldi	r24, 0x59	; 89
    4d92:	95 e1       	ldi	r25, 0x15	; 21
    4d94:	aa de       	rcall	.-684    	; 0x4aea <_reply2ReturnCode>
    4d96:	03 c0       	rjmp	.+6      	; 0x4d9e <lora_driver_join+0x4c>
    4d98:	89 e5       	ldi	r24, 0x59	; 89
    4d9a:	95 e1       	ldi	r25, 0x15	; 21
    4d9c:	a6 de       	rcall	.-692    	; 0x4aea <_reply2ReturnCode>
    4d9e:	1f 91       	pop	r17
    4da0:	0f 91       	pop	r16
    4da2:	08 95       	ret

00004da4 <lora_driver_sendUploadMessage>:
    4da4:	0f 93       	push	r16
    4da6:	1f 93       	push	r17
    4da8:	cf 93       	push	r28
    4daa:	df 93       	push	r29
    4dac:	1f 92       	push	r1
    4dae:	cd b7       	in	r28, 0x3d	; 61
    4db0:	de b7       	in	r29, 0x3e	; 62
    4db2:	db 01       	movw	r26, r22
    4db4:	11 96       	adiw	r26, 0x01	; 1
    4db6:	9c 91       	ld	r25, X
    4db8:	11 97       	sbiw	r26, 0x01	; 1
    4dba:	95 31       	cpi	r25, 0x15	; 21
    4dbc:	08 f0       	brcs	.+2      	; 0x4dc0 <lora_driver_sendUploadMessage+0x1c>
    4dbe:	b4 c0       	rjmp	.+360    	; 0x4f28 <lora_driver_sendUploadMessage+0x184>
    4dc0:	99 23       	and	r25, r25
    4dc2:	81 f1       	breq	.+96     	; 0x4e24 <lora_driver_sendUploadMessage+0x80>
    4dc4:	60 e0       	ldi	r22, 0x00	; 0
    4dc6:	70 e0       	ldi	r23, 0x00	; 0
    4dc8:	27 2f       	mov	r18, r23
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	46 2f       	mov	r20, r22
    4dce:	50 e0       	ldi	r21, 0x00	; 0
    4dd0:	fd 01       	movw	r30, r26
    4dd2:	e4 0f       	add	r30, r20
    4dd4:	f5 1f       	adc	r31, r21
    4dd6:	92 81       	ldd	r25, Z+2	; 0x02
    4dd8:	92 95       	swap	r25
    4dda:	9f 70       	andi	r25, 0x0F	; 15
    4ddc:	9a 30       	cpi	r25, 0x0A	; 10
    4dde:	10 f0       	brcs	.+4      	; 0x4de4 <lora_driver_sendUploadMessage+0x40>
    4de0:	99 5c       	subi	r25, 0xC9	; 201
    4de2:	01 c0       	rjmp	.+2      	; 0x4de6 <lora_driver_sendUploadMessage+0x42>
    4de4:	90 5d       	subi	r25, 0xD0	; 208
    4de6:	f9 01       	movw	r30, r18
    4de8:	e6 51       	subi	r30, 0x16	; 22
    4dea:	fb 4e       	sbci	r31, 0xEB	; 235
    4dec:	90 83       	st	Z, r25
    4dee:	2f 5f       	subi	r18, 0xFF	; 255
    4df0:	3f 4f       	sbci	r19, 0xFF	; 255
    4df2:	fd 01       	movw	r30, r26
    4df4:	e4 0f       	add	r30, r20
    4df6:	f5 1f       	adc	r31, r21
    4df8:	92 81       	ldd	r25, Z+2	; 0x02
    4dfa:	9f 70       	andi	r25, 0x0F	; 15
    4dfc:	49 2f       	mov	r20, r25
    4dfe:	50 e0       	ldi	r21, 0x00	; 0
    4e00:	4a 30       	cpi	r20, 0x0A	; 10
    4e02:	51 05       	cpc	r21, r1
    4e04:	14 f0       	brlt	.+4      	; 0x4e0a <lora_driver_sendUploadMessage+0x66>
    4e06:	99 5c       	subi	r25, 0xC9	; 201
    4e08:	01 c0       	rjmp	.+2      	; 0x4e0c <lora_driver_sendUploadMessage+0x68>
    4e0a:	90 5d       	subi	r25, 0xD0	; 208
    4e0c:	f9 01       	movw	r30, r18
    4e0e:	e6 51       	subi	r30, 0x16	; 22
    4e10:	fb 4e       	sbci	r31, 0xEB	; 235
    4e12:	90 83       	st	Z, r25
    4e14:	7e 5f       	subi	r23, 0xFE	; 254
    4e16:	6f 5f       	subi	r22, 0xFF	; 255
    4e18:	11 96       	adiw	r26, 0x01	; 1
    4e1a:	9c 91       	ld	r25, X
    4e1c:	11 97       	sbiw	r26, 0x01	; 1
    4e1e:	69 17       	cp	r22, r25
    4e20:	98 f2       	brcs	.-90     	; 0x4dc8 <lora_driver_sendUploadMessage+0x24>
    4e22:	01 c0       	rjmp	.+2      	; 0x4e26 <lora_driver_sendUploadMessage+0x82>
    4e24:	70 e0       	ldi	r23, 0x00	; 0
    4e26:	e7 2f       	mov	r30, r23
    4e28:	f0 e0       	ldi	r31, 0x00	; 0
    4e2a:	e6 51       	subi	r30, 0x16	; 22
    4e2c:	fb 4e       	sbci	r31, 0xEB	; 235
    4e2e:	10 82       	st	Z, r1
    4e30:	4c 91       	ld	r20, X
    4e32:	81 11       	cpse	r24, r1
    4e34:	03 c0       	rjmp	.+6      	; 0x4e3c <lora_driver_sendUploadMessage+0x98>
    4e36:	8d ea       	ldi	r24, 0xAD	; 173
    4e38:	95 e0       	ldi	r25, 0x05	; 5
    4e3a:	02 c0       	rjmp	.+4      	; 0x4e40 <lora_driver_sendUploadMessage+0x9c>
    4e3c:	8f ea       	ldi	r24, 0xAF	; 175
    4e3e:	95 e0       	ldi	r25, 0x05	; 5
    4e40:	2a ee       	ldi	r18, 0xEA	; 234
    4e42:	34 e1       	ldi	r19, 0x14	; 20
    4e44:	3f 93       	push	r19
    4e46:	2f 93       	push	r18
    4e48:	1f 92       	push	r1
    4e4a:	4f 93       	push	r20
    4e4c:	9f 93       	push	r25
    4e4e:	8f 93       	push	r24
    4e50:	83 eb       	ldi	r24, 0xB3	; 179
    4e52:	95 e0       	ldi	r25, 0x05	; 5
    4e54:	9f 93       	push	r25
    4e56:	8f 93       	push	r24
    4e58:	8c e2       	ldi	r24, 0x2C	; 44
    4e5a:	95 e1       	ldi	r25, 0x15	; 21
    4e5c:	9f 93       	push	r25
    4e5e:	8f 93       	push	r24
    4e60:	0e 94 87 38 	call	0x710e	; 0x710e <sprintf>
    4e64:	60 e0       	ldi	r22, 0x00	; 0
    4e66:	70 e0       	ldi	r23, 0x00	; 0
    4e68:	8c e2       	ldi	r24, 0x2C	; 44
    4e6a:	95 e1       	ldi	r25, 0x15	; 21
    4e6c:	b3 de       	rcall	.-666    	; 0x4bd4 <_uploadMessageRc>
    4e6e:	0f b6       	in	r0, 0x3f	; 63
    4e70:	f8 94       	cli
    4e72:	de bf       	out	0x3e, r29	; 62
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	81 11       	cpse	r24, r1
    4e7a:	59 c0       	rjmp	.+178    	; 0x4f2e <lora_driver_sendUploadMessage+0x18a>
    4e7c:	08 e2       	ldi	r16, 0x28	; 40
    4e7e:	15 e0       	ldi	r17, 0x05	; 5
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	4d e2       	ldi	r20, 0x2D	; 45
    4e86:	50 e0       	ldi	r21, 0x00	; 0
    4e88:	69 e5       	ldi	r22, 0x59	; 89
    4e8a:	75 e1       	ldi	r23, 0x15	; 21
    4e8c:	80 91 d0 14 	lds	r24, 0x14D0	; 0x8014d0 <_serialReplyBufferHandle>
    4e90:	90 91 d1 14 	lds	r25, 0x14D1	; 0x8014d1 <_serialReplyBufferHandle+0x1>
    4e94:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <xStreamBufferReceive>
    4e98:	88 23       	and	r24, r24
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <lora_driver_sendUploadMessage+0xfa>
    4e9c:	47 c0       	rjmp	.+142    	; 0x4f2c <lora_driver_sendUploadMessage+0x188>
    4e9e:	89 e5       	ldi	r24, 0x59	; 89
    4ea0:	95 e1       	ldi	r25, 0x15	; 21
    4ea2:	23 de       	rcall	.-954    	; 0x4aea <_reply2ReturnCode>
    4ea4:	8e 30       	cpi	r24, 0x0E	; 14
    4ea6:	09 f0       	breq	.+2      	; 0x4eaa <lora_driver_sendUploadMessage+0x106>
    4ea8:	42 c0       	rjmp	.+132    	; 0x4f2e <lora_driver_sendUploadMessage+0x18a>
    4eaa:	87 e0       	ldi	r24, 0x07	; 7
    4eac:	89 83       	std	Y+1, r24	; 0x01
    4eae:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <_downlinkMessageBuffer>
    4eb2:	90 91 cf 14 	lds	r25, 0x14CF	; 0x8014cf <_downlinkMessageBuffer+0x1>
    4eb6:	89 2b       	or	r24, r25
    4eb8:	a9 f1       	breq	.+106    	; 0x4f24 <lora_driver_sendUploadMessage+0x180>
    4eba:	be 01       	movw	r22, r28
    4ebc:	6f 5f       	subi	r22, 0xFF	; 255
    4ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    4ec0:	89 e5       	ldi	r24, 0x59	; 89
    4ec2:	95 e1       	ldi	r25, 0x15	; 21
    4ec4:	68 d1       	rcall	.+720    	; 0x5196 <decode_port_no>
    4ec6:	80 93 d4 14 	sts	0x14D4, r24	; 0x8014d4 <_downlinkPayload>
    4eca:	e9 81       	ldd	r30, Y+1	; 0x01
    4ecc:	f0 e0       	ldi	r31, 0x00	; 0
    4ece:	e7 5a       	subi	r30, 0xA7	; 167
    4ed0:	fa 4e       	sbci	r31, 0xEA	; 234
    4ed2:	df 01       	movw	r26, r30
    4ed4:	0d 90       	ld	r0, X+
    4ed6:	00 20       	and	r0, r0
    4ed8:	e9 f7       	brne	.-6      	; 0x4ed4 <lora_driver_sendUploadMessage+0x130>
    4eda:	11 97       	sbiw	r26, 0x01	; 1
    4edc:	ae 1b       	sub	r26, r30
    4ede:	bf 0b       	sbc	r27, r31
    4ee0:	aa 23       	and	r26, r26
    4ee2:	91 f0       	breq	.+36     	; 0x4f08 <lora_driver_sendUploadMessage+0x164>
    4ee4:	bb 27       	eor	r27, r27
    4ee6:	cd 01       	movw	r24, r26
    4ee8:	01 97       	sbiw	r24, 0x01	; 1
    4eea:	9c 01       	movw	r18, r24
    4eec:	12 f4       	brpl	.+4      	; 0x4ef2 <lora_driver_sendUploadMessage+0x14e>
    4eee:	2f 5f       	subi	r18, 0xFF	; 255
    4ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef2:	35 95       	asr	r19
    4ef4:	27 95       	ror	r18
    4ef6:	20 93 d5 14 	sts	0x14D5, r18	; 0x8014d5 <_downlinkPayload+0x1>
    4efa:	af 01       	movw	r20, r30
    4efc:	4f 5f       	subi	r20, 0xFF	; 255
    4efe:	5f 4f       	sbci	r21, 0xFF	; 255
    4f00:	64 e1       	ldi	r22, 0x14	; 20
    4f02:	86 ed       	ldi	r24, 0xD6	; 214
    4f04:	94 e1       	ldi	r25, 0x14	; 20
    4f06:	73 d1       	rcall	.+742    	; 0x51ee <decode_hexadecimal_string_bytes>
    4f08:	01 e0       	ldi	r16, 0x01	; 1
    4f0a:	10 e0       	ldi	r17, 0x00	; 0
    4f0c:	20 e0       	ldi	r18, 0x00	; 0
    4f0e:	30 e0       	ldi	r19, 0x00	; 0
    4f10:	46 e1       	ldi	r20, 0x16	; 22
    4f12:	50 e0       	ldi	r21, 0x00	; 0
    4f14:	64 ed       	ldi	r22, 0xD4	; 212
    4f16:	74 e1       	ldi	r23, 0x14	; 20
    4f18:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <_downlinkMessageBuffer>
    4f1c:	90 91 cf 14 	lds	r25, 0x14CF	; 0x8014cf <_downlinkMessageBuffer+0x1>
    4f20:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <xStreamBufferSend>
    4f24:	8e e0       	ldi	r24, 0x0E	; 14
    4f26:	03 c0       	rjmp	.+6      	; 0x4f2e <lora_driver_sendUploadMessage+0x18a>
    4f28:	84 e1       	ldi	r24, 0x14	; 20
    4f2a:	01 c0       	rjmp	.+2      	; 0x4f2e <lora_driver_sendUploadMessage+0x18a>
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	0f 90       	pop	r0
    4f30:	df 91       	pop	r29
    4f32:	cf 91       	pop	r28
    4f34:	1f 91       	pop	r17
    4f36:	0f 91       	pop	r16
    4f38:	08 95       	ret

00004f3a <lora_driver_setAdaptiveDataRate>:
    4f3a:	81 30       	cpi	r24, 0x01	; 1
    4f3c:	19 f0       	breq	.+6      	; 0x4f44 <lora_driver_setAdaptiveDataRate+0xa>
    4f3e:	63 ec       	ldi	r22, 0xC3	; 195
    4f40:	75 e0       	ldi	r23, 0x05	; 5
    4f42:	02 c0       	rjmp	.+4      	; 0x4f48 <lora_driver_setAdaptiveDataRate+0xe>
    4f44:	6c e9       	ldi	r22, 0x9C	; 156
    4f46:	76 e0       	ldi	r23, 0x06	; 6
    4f48:	87 ec       	ldi	r24, 0xC7	; 199
    4f4a:	95 e0       	ldi	r25, 0x05	; 5
    4f4c:	43 ce       	rjmp	.-890    	; 0x4bd4 <_uploadMessageRc>
    4f4e:	08 95       	ret

00004f50 <lora_driver_setReceiveDelay>:
    4f50:	9f 93       	push	r25
    4f52:	8f 93       	push	r24
    4f54:	88 ef       	ldi	r24, 0xF8	; 248
    4f56:	95 e0       	ldi	r25, 0x05	; 5
    4f58:	9f 93       	push	r25
    4f5a:	8f 93       	push	r24
    4f5c:	8c e2       	ldi	r24, 0x2C	; 44
    4f5e:	95 e1       	ldi	r25, 0x15	; 21
    4f60:	9f 93       	push	r25
    4f62:	8f 93       	push	r24
    4f64:	0e 94 87 38 	call	0x710e	; 0x710e <sprintf>
    4f68:	60 e0       	ldi	r22, 0x00	; 0
    4f6a:	70 e0       	ldi	r23, 0x00	; 0
    4f6c:	8c e2       	ldi	r24, 0x2C	; 44
    4f6e:	95 e1       	ldi	r25, 0x15	; 21
    4f70:	31 de       	rcall	.-926    	; 0x4bd4 <_uploadMessageRc>
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
    4f76:	0f 90       	pop	r0
    4f78:	0f 90       	pop	r0
    4f7a:	0f 90       	pop	r0
    4f7c:	0f 90       	pop	r0
    4f7e:	08 95       	ret

00004f80 <lora_driver_configureToEu868>:
    4f80:	2f 92       	push	r2
    4f82:	3f 92       	push	r3
    4f84:	4f 92       	push	r4
    4f86:	5f 92       	push	r5
    4f88:	6f 92       	push	r6
    4f8a:	7f 92       	push	r7
    4f8c:	8f 92       	push	r8
    4f8e:	9f 92       	push	r9
    4f90:	af 92       	push	r10
    4f92:	bf 92       	push	r11
    4f94:	cf 92       	push	r12
    4f96:	df 92       	push	r13
    4f98:	ef 92       	push	r14
    4f9a:	ff 92       	push	r15
    4f9c:	0f 93       	push	r16
    4f9e:	1f 93       	push	r17
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
    4fa8:	a0 97       	sbiw	r28, 0x20	; 32
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	f8 94       	cli
    4fae:	de bf       	out	0x3e, r29	; 62
    4fb0:	0f be       	out	0x3f, r0	; 63
    4fb2:	cd bf       	out	0x3d, r28	; 61
    4fb4:	65 e2       	ldi	r22, 0x25	; 37
    4fb6:	76 e0       	ldi	r23, 0x06	; 6
    4fb8:	81 e3       	ldi	r24, 0x31	; 49
    4fba:	96 e0       	ldi	r25, 0x06	; 6
    4fbc:	3c dd       	rcall	.-1416   	; 0x4a36 <_uploadMessage>
    4fbe:	95 dd       	rcall	.-1238   	; 0x4aea <_reply2ReturnCode>
    4fc0:	81 11       	cpse	r24, r1
    4fc2:	a3 c0       	rjmp	.+326    	; 0x510a <lora_driver_configureToEu868+0x18a>
    4fc4:	80 e2       	ldi	r24, 0x20	; 32
    4fc6:	e2 e2       	ldi	r30, 0x22	; 34
    4fc8:	f2 e0       	ldi	r31, 0x02	; 2
    4fca:	de 01       	movw	r26, r28
    4fcc:	11 96       	adiw	r26, 0x01	; 1
    4fce:	01 90       	ld	r0, Z+
    4fd0:	0d 92       	st	X+, r0
    4fd2:	8a 95       	dec	r24
    4fd4:	e1 f7       	brne	.-8      	; 0x4fce <lora_driver_configureToEu868+0x4e>
    4fd6:	9e 01       	movw	r18, r28
    4fd8:	2f 5f       	subi	r18, 0xFF	; 255
    4fda:	3f 4f       	sbci	r19, 0xFF	; 255
    4fdc:	69 01       	movw	r12, r18
    4fde:	e1 2c       	mov	r14, r1
    4fe0:	f1 2c       	mov	r15, r1
    4fe2:	0f 2e       	mov	r0, r31
    4fe4:	fd e3       	ldi	r31, 0x3D	; 61
    4fe6:	af 2e       	mov	r10, r31
    4fe8:	f6 e0       	ldi	r31, 0x06	; 6
    4fea:	bf 2e       	mov	r11, r31
    4fec:	f0 2d       	mov	r31, r0
    4fee:	0c e2       	ldi	r16, 0x2C	; 44
    4ff0:	15 e1       	ldi	r17, 0x15	; 21
    4ff2:	0f 2e       	mov	r0, r31
    4ff4:	f6 e5       	ldi	r31, 0x56	; 86
    4ff6:	4f 2e       	mov	r4, r31
    4ff8:	f6 e0       	ldi	r31, 0x06	; 6
    4ffa:	5f 2e       	mov	r5, r31
    4ffc:	f0 2d       	mov	r31, r0
    4ffe:	0f 2e       	mov	r0, r31
    5000:	fd e6       	ldi	r31, 0x6D	; 109
    5002:	8f 2e       	mov	r8, r31
    5004:	f6 e0       	ldi	r31, 0x06	; 6
    5006:	9f 2e       	mov	r9, r31
    5008:	f0 2d       	mov	r31, r0
    500a:	0f 2e       	mov	r0, r31
    500c:	f7 e8       	ldi	r31, 0x87	; 135
    500e:	6f 2e       	mov	r6, r31
    5010:	f6 e0       	ldi	r31, 0x06	; 6
    5012:	7f 2e       	mov	r7, r31
    5014:	f0 2d       	mov	r31, r0
    5016:	3e 2c       	mov	r3, r14
    5018:	2f 2c       	mov	r2, r15
    501a:	ff 92       	push	r15
    501c:	ef 92       	push	r14
    501e:	bf 92       	push	r11
    5020:	af 92       	push	r10
    5022:	1f 93       	push	r17
    5024:	0f 93       	push	r16
    5026:	0e 94 87 38 	call	0x710e	; 0x710e <sprintf>
    502a:	60 e0       	ldi	r22, 0x00	; 0
    502c:	70 e0       	ldi	r23, 0x00	; 0
    502e:	c8 01       	movw	r24, r16
    5030:	02 dd       	rcall	.-1532   	; 0x4a36 <_uploadMessage>
    5032:	5b dd       	rcall	.-1354   	; 0x4aea <_reply2ReturnCode>
    5034:	0f 90       	pop	r0
    5036:	0f 90       	pop	r0
    5038:	0f 90       	pop	r0
    503a:	0f 90       	pop	r0
    503c:	0f 90       	pop	r0
    503e:	0f 90       	pop	r0
    5040:	81 11       	cpse	r24, r1
    5042:	63 c0       	rjmp	.+198    	; 0x510a <lora_driver_configureToEu868+0x18a>
    5044:	32 e0       	ldi	r19, 0x02	; 2
    5046:	3e 15       	cp	r19, r14
    5048:	e8 f4       	brcc	.+58     	; 0x5084 <lora_driver_configureToEu868+0x104>
    504a:	f6 01       	movw	r30, r12
    504c:	83 81       	ldd	r24, Z+3	; 0x03
    504e:	8f 93       	push	r24
    5050:	82 81       	ldd	r24, Z+2	; 0x02
    5052:	8f 93       	push	r24
    5054:	81 81       	ldd	r24, Z+1	; 0x01
    5056:	8f 93       	push	r24
    5058:	80 81       	ld	r24, Z
    505a:	8f 93       	push	r24
    505c:	ff 92       	push	r15
    505e:	ef 92       	push	r14
    5060:	5f 92       	push	r5
    5062:	4f 92       	push	r4
    5064:	1f 93       	push	r17
    5066:	0f 93       	push	r16
    5068:	0e 94 87 38 	call	0x710e	; 0x710e <sprintf>
    506c:	60 e0       	ldi	r22, 0x00	; 0
    506e:	70 e0       	ldi	r23, 0x00	; 0
    5070:	c8 01       	movw	r24, r16
    5072:	e1 dc       	rcall	.-1598   	; 0x4a36 <_uploadMessage>
    5074:	3a dd       	rcall	.-1420   	; 0x4aea <_reply2ReturnCode>
    5076:	0f b6       	in	r0, 0x3f	; 63
    5078:	f8 94       	cli
    507a:	de bf       	out	0x3e, r29	; 62
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	cd bf       	out	0x3d, r28	; 61
    5080:	81 11       	cpse	r24, r1
    5082:	43 c0       	rjmp	.+134    	; 0x510a <lora_driver_configureToEu868+0x18a>
    5084:	2f 92       	push	r2
    5086:	3f 92       	push	r3
    5088:	9f 92       	push	r9
    508a:	8f 92       	push	r8
    508c:	1f 93       	push	r17
    508e:	0f 93       	push	r16
    5090:	0e 94 87 38 	call	0x710e	; 0x710e <sprintf>
    5094:	60 e0       	ldi	r22, 0x00	; 0
    5096:	70 e0       	ldi	r23, 0x00	; 0
    5098:	c8 01       	movw	r24, r16
    509a:	cd dc       	rcall	.-1638   	; 0x4a36 <_uploadMessage>
    509c:	26 dd       	rcall	.-1460   	; 0x4aea <_reply2ReturnCode>
    509e:	0f 90       	pop	r0
    50a0:	0f 90       	pop	r0
    50a2:	0f 90       	pop	r0
    50a4:	0f 90       	pop	r0
    50a6:	0f 90       	pop	r0
    50a8:	0f 90       	pop	r0
    50aa:	81 11       	cpse	r24, r1
    50ac:	2e c0       	rjmp	.+92     	; 0x510a <lora_driver_configureToEu868+0x18a>
    50ae:	2f 92       	push	r2
    50b0:	3f 92       	push	r3
    50b2:	7f 92       	push	r7
    50b4:	6f 92       	push	r6
    50b6:	1f 93       	push	r17
    50b8:	0f 93       	push	r16
    50ba:	0e 94 87 38 	call	0x710e	; 0x710e <sprintf>
    50be:	60 e0       	ldi	r22, 0x00	; 0
    50c0:	70 e0       	ldi	r23, 0x00	; 0
    50c2:	c8 01       	movw	r24, r16
    50c4:	b8 dc       	rcall	.-1680   	; 0x4a36 <_uploadMessage>
    50c6:	11 dd       	rcall	.-1502   	; 0x4aea <_reply2ReturnCode>
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	0f 90       	pop	r0
    50d0:	0f 90       	pop	r0
    50d2:	0f 90       	pop	r0
    50d4:	81 11       	cpse	r24, r1
    50d6:	19 c0       	rjmp	.+50     	; 0x510a <lora_driver_configureToEu868+0x18a>
    50d8:	3f ef       	ldi	r19, 0xFF	; 255
    50da:	e3 1a       	sub	r14, r19
    50dc:	f3 0a       	sbc	r15, r19
    50de:	84 e0       	ldi	r24, 0x04	; 4
    50e0:	c8 0e       	add	r12, r24
    50e2:	d1 1c       	adc	r13, r1
    50e4:	98 e0       	ldi	r25, 0x08	; 8
    50e6:	e9 16       	cp	r14, r25
    50e8:	f1 04       	cpc	r15, r1
    50ea:	09 f0       	breq	.+2      	; 0x50ee <lora_driver_configureToEu868+0x16e>
    50ec:	94 cf       	rjmp	.-216    	; 0x5016 <lora_driver_configureToEu868+0x96>
    50ee:	60 e0       	ldi	r22, 0x00	; 0
    50f0:	70 e0       	ldi	r23, 0x00	; 0
    50f2:	8f e9       	ldi	r24, 0x9F	; 159
    50f4:	96 e0       	ldi	r25, 0x06	; 6
    50f6:	9f dc       	rcall	.-1730   	; 0x4a36 <_uploadMessage>
    50f8:	f8 dc       	rcall	.-1552   	; 0x4aea <_reply2ReturnCode>
    50fa:	81 11       	cpse	r24, r1
    50fc:	06 c0       	rjmp	.+12     	; 0x510a <lora_driver_configureToEu868+0x18a>
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	70 e0       	ldi	r23, 0x00	; 0
    5102:	80 eb       	ldi	r24, 0xB0	; 176
    5104:	96 e0       	ldi	r25, 0x06	; 6
    5106:	97 dc       	rcall	.-1746   	; 0x4a36 <_uploadMessage>
    5108:	f0 dc       	rcall	.-1568   	; 0x4aea <_reply2ReturnCode>
    510a:	a0 96       	adiw	r28, 0x20	; 32
    510c:	0f b6       	in	r0, 0x3f	; 63
    510e:	f8 94       	cli
    5110:	de bf       	out	0x3e, r29	; 62
    5112:	0f be       	out	0x3f, r0	; 63
    5114:	cd bf       	out	0x3d, r28	; 61
    5116:	df 91       	pop	r29
    5118:	cf 91       	pop	r28
    511a:	1f 91       	pop	r17
    511c:	0f 91       	pop	r16
    511e:	ff 90       	pop	r15
    5120:	ef 90       	pop	r14
    5122:	df 90       	pop	r13
    5124:	cf 90       	pop	r12
    5126:	bf 90       	pop	r11
    5128:	af 90       	pop	r10
    512a:	9f 90       	pop	r9
    512c:	8f 90       	pop	r8
    512e:	7f 90       	pop	r7
    5130:	6f 90       	pop	r6
    5132:	5f 90       	pop	r5
    5134:	4f 90       	pop	r4
    5136:	3f 90       	pop	r3
    5138:	2f 90       	pop	r2
    513a:	08 95       	ret

0000513c <lora_driver_setOtaaIdentity>:
    513c:	ef 92       	push	r14
    513e:	ff 92       	push	r15
    5140:	0f 93       	push	r16
    5142:	1f 93       	push	r17
    5144:	cf 93       	push	r28
    5146:	df 93       	push	r29
    5148:	ec 01       	movw	r28, r24
    514a:	8b 01       	movw	r16, r22
    514c:	7a 01       	movw	r14, r20
    514e:	81 e0       	ldi	r24, 0x01	; 1
    5150:	f4 de       	rcall	.-536    	; 0x4f3a <lora_driver_setAdaptiveDataRate>
    5152:	81 11       	cpse	r24, r1
    5154:	0d c0       	rjmp	.+26     	; 0x5170 <lora_driver_setOtaaIdentity+0x34>
    5156:	ce 01       	movw	r24, r28
    5158:	d4 dd       	rcall	.-1112   	; 0x4d02 <lora_driver_setApplicationIdentifier>
    515a:	81 11       	cpse	r24, r1
    515c:	09 c0       	rjmp	.+18     	; 0x5170 <lora_driver_setOtaaIdentity+0x34>
    515e:	c8 01       	movw	r24, r16
    5160:	e1 dd       	rcall	.-1086   	; 0x4d24 <lora_driver_setApplicationKey>
    5162:	81 11       	cpse	r24, r1
    5164:	05 c0       	rjmp	.+10     	; 0x5170 <lora_driver_setOtaaIdentity+0x34>
    5166:	c7 01       	movw	r24, r14
    5168:	bb dd       	rcall	.-1162   	; 0x4ce0 <lora_driver_setDeviceIdentifier>
    516a:	81 11       	cpse	r24, r1
    516c:	01 c0       	rjmp	.+2      	; 0x5170 <lora_driver_setOtaaIdentity+0x34>
    516e:	eb dd       	rcall	.-1066   	; 0x4d46 <lora_driver_saveMac>
    5170:	df 91       	pop	r29
    5172:	cf 91       	pop	r28
    5174:	1f 91       	pop	r17
    5176:	0f 91       	pop	r16
    5178:	ff 90       	pop	r15
    517a:	ef 90       	pop	r14
    517c:	08 95       	ret

0000517e <lora_driver_mapReturnCodeToText>:
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	fc 01       	movw	r30, r24
    5182:	ee 0f       	add	r30, r30
    5184:	ff 1f       	adc	r31, r31
    5186:	8e 0f       	add	r24, r30
    5188:	9f 1f       	adc	r25, r31
    518a:	fc 01       	movw	r30, r24
    518c:	e7 58       	subi	r30, 0x87	; 135
    518e:	f8 4f       	sbci	r31, 0xF8	; 248
    5190:	81 81       	ldd	r24, Z+1	; 0x01
    5192:	92 81       	ldd	r25, Z+2	; 0x02
    5194:	08 95       	ret

00005196 <decode_port_no>:
    5196:	dc 01       	movw	r26, r24
    5198:	00 97       	sbiw	r24, 0x00	; 0
    519a:	29 f1       	breq	.+74     	; 0x51e6 <decode_port_no+0x50>
    519c:	fb 01       	movw	r30, r22
    519e:	20 81       	ld	r18, Z
    51a0:	fc 01       	movw	r30, r24
    51a2:	01 90       	ld	r0, Z+
    51a4:	00 20       	and	r0, r0
    51a6:	e9 f7       	brne	.-6      	; 0x51a2 <decode_port_no+0xc>
    51a8:	31 97       	sbiw	r30, 0x01	; 1
    51aa:	e8 1b       	sub	r30, r24
    51ac:	f9 0b       	sbc	r31, r25
    51ae:	82 2f       	mov	r24, r18
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	e8 17       	cp	r30, r24
    51b4:	f9 07       	cpc	r31, r25
    51b6:	c8 f0       	brcs	.+50     	; 0x51ea <decode_port_no+0x54>
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	08 c0       	rjmp	.+16     	; 0x51cc <decode_port_no+0x36>
    51bc:	88 0f       	add	r24, r24
    51be:	38 2f       	mov	r19, r24
    51c0:	33 0f       	add	r19, r19
    51c2:	33 0f       	add	r19, r19
    51c4:	83 0f       	add	r24, r19
    51c6:	80 53       	subi	r24, 0x30	; 48
    51c8:	89 0f       	add	r24, r25
    51ca:	2f 5f       	subi	r18, 0xFF	; 255
    51cc:	fd 01       	movw	r30, r26
    51ce:	e2 0f       	add	r30, r18
    51d0:	f1 1d       	adc	r31, r1
    51d2:	90 81       	ld	r25, Z
    51d4:	30 ed       	ldi	r19, 0xD0	; 208
    51d6:	39 0f       	add	r19, r25
    51d8:	3a 30       	cpi	r19, 0x0A	; 10
    51da:	10 f4       	brcc	.+4      	; 0x51e0 <decode_port_no+0x4a>
    51dc:	91 11       	cpse	r25, r1
    51de:	ee cf       	rjmp	.-36     	; 0x51bc <decode_port_no+0x26>
    51e0:	fb 01       	movw	r30, r22
    51e2:	20 83       	st	Z, r18
    51e4:	08 95       	ret
    51e6:	80 e0       	ldi	r24, 0x00	; 0
    51e8:	08 95       	ret
    51ea:	80 e0       	ldi	r24, 0x00	; 0
    51ec:	08 95       	ret

000051ee <decode_hexadecimal_string_bytes>:
    51ee:	0f 93       	push	r16
    51f0:	1f 93       	push	r17
    51f2:	cf 93       	push	r28
    51f4:	df 93       	push	r29
    51f6:	dc 01       	movw	r26, r24
    51f8:	ea 01       	movw	r28, r20
    51fa:	20 97       	sbiw	r28, 0x00	; 0
    51fc:	e1 f1       	breq	.+120    	; 0x5276 <decode_hexadecimal_string_bytes+0x88>
    51fe:	fa 01       	movw	r30, r20
    5200:	01 90       	ld	r0, Z+
    5202:	00 20       	and	r0, r0
    5204:	e9 f7       	brne	.-6      	; 0x5200 <decode_hexadecimal_string_bytes+0x12>
    5206:	31 97       	sbiw	r30, 0x01	; 1
    5208:	e4 1b       	sub	r30, r20
    520a:	f5 0b       	sbc	r31, r21
    520c:	32 97       	sbiw	r30, 0x02	; 2
    520e:	10 f5       	brcc	.+68     	; 0x5254 <decode_hexadecimal_string_bytes+0x66>
    5210:	32 c0       	rjmp	.+100    	; 0x5276 <decode_hexadecimal_string_bytes+0x88>
    5212:	8d 01       	movw	r16, r26
    5214:	04 0f       	add	r16, r20
    5216:	15 1f       	adc	r17, r21
    5218:	30 e0       	ldi	r19, 0x00	; 0
    521a:	ae 01       	movw	r20, r28
    521c:	42 0f       	add	r20, r18
    521e:	53 1f       	adc	r21, r19
    5220:	fa 01       	movw	r30, r20
    5222:	90 81       	ld	r25, Z
    5224:	91 34       	cpi	r25, 0x41	; 65
    5226:	28 f0       	brcs	.+10     	; 0x5232 <decode_hexadecimal_string_bytes+0x44>
    5228:	97 53       	subi	r25, 0x37	; 55
    522a:	59 2f       	mov	r21, r25
    522c:	52 95       	swap	r21
    522e:	50 7f       	andi	r21, 0xF0	; 240
    5230:	03 c0       	rjmp	.+6      	; 0x5238 <decode_hexadecimal_string_bytes+0x4a>
    5232:	59 2f       	mov	r21, r25
    5234:	52 95       	swap	r21
    5236:	50 7f       	andi	r21, 0xF0	; 240
    5238:	2c 0f       	add	r18, r28
    523a:	3d 1f       	adc	r19, r29
    523c:	f9 01       	movw	r30, r18
    523e:	91 81       	ldd	r25, Z+1	; 0x01
    5240:	91 34       	cpi	r25, 0x41	; 65
    5242:	10 f0       	brcs	.+4      	; 0x5248 <decode_hexadecimal_string_bytes+0x5a>
    5244:	97 53       	subi	r25, 0x37	; 55
    5246:	01 c0       	rjmp	.+2      	; 0x524a <decode_hexadecimal_string_bytes+0x5c>
    5248:	90 53       	subi	r25, 0x30	; 48
    524a:	95 0f       	add	r25, r21
    524c:	f8 01       	movw	r30, r16
    524e:	90 83       	st	Z, r25
    5250:	8f 5f       	subi	r24, 0xFF	; 255
    5252:	01 c0       	rjmp	.+2      	; 0x5256 <decode_hexadecimal_string_bytes+0x68>
    5254:	80 e0       	ldi	r24, 0x00	; 0
    5256:	28 2f       	mov	r18, r24
    5258:	22 0f       	add	r18, r18
    525a:	48 2f       	mov	r20, r24
    525c:	50 e0       	ldi	r21, 0x00	; 0
    525e:	fe 01       	movw	r30, r28
    5260:	01 90       	ld	r0, Z+
    5262:	00 20       	and	r0, r0
    5264:	e9 f7       	brne	.-6      	; 0x5260 <decode_hexadecimal_string_bytes+0x72>
    5266:	31 97       	sbiw	r30, 0x01	; 1
    5268:	ec 1b       	sub	r30, r28
    526a:	fd 0b       	sbc	r31, r29
    526c:	4e 17       	cp	r20, r30
    526e:	5f 07       	cpc	r21, r31
    5270:	10 f4       	brcc	.+4      	; 0x5276 <decode_hexadecimal_string_bytes+0x88>
    5272:	86 13       	cpse	r24, r22
    5274:	ce cf       	rjmp	.-100    	; 0x5212 <decode_hexadecimal_string_bytes+0x24>
    5276:	df 91       	pop	r29
    5278:	cf 91       	pop	r28
    527a:	1f 91       	pop	r17
    527c:	0f 91       	pop	r16
    527e:	08 95       	ret

00005280 <_serialCallBack>:
    5280:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <crc_sum.1945>
    5284:	86 0f       	add	r24, r22
    5286:	80 93 89 15 	sts	0x1589, r24	; 0x801589 <crc_sum.1945>
    528a:	90 91 8c 15 	lds	r25, 0x158C	; 0x80158c <_mh_state>
    528e:	91 30       	cpi	r25, 0x01	; 1
    5290:	79 f0       	breq	.+30     	; 0x52b0 <_serialCallBack+0x30>
    5292:	28 f0       	brcs	.+10     	; 0x529e <_serialCallBack+0x1e>
    5294:	92 30       	cpi	r25, 0x02	; 2
    5296:	a9 f0       	breq	.+42     	; 0x52c2 <_serialCallBack+0x42>
    5298:	93 30       	cpi	r25, 0x03	; 3
    529a:	19 f1       	breq	.+70     	; 0x52e2 <_serialCallBack+0x62>
    529c:	08 95       	ret
    529e:	6f 3f       	cpi	r22, 0xFF	; 255
    52a0:	09 f0       	breq	.+2      	; 0x52a4 <_serialCallBack+0x24>
    52a2:	48 c0       	rjmp	.+144    	; 0x5334 <_serialCallBack+0xb4>
    52a4:	10 92 89 15 	sts	0x1589, r1	; 0x801589 <crc_sum.1945>
    52a8:	81 e0       	ldi	r24, 0x01	; 1
    52aa:	80 93 8c 15 	sts	0x158C, r24	; 0x80158c <_mh_state>
    52ae:	08 95       	ret
    52b0:	66 38       	cpi	r22, 0x86	; 134
    52b2:	09 f0       	breq	.+2      	; 0x52b6 <_serialCallBack+0x36>
    52b4:	3f c0       	rjmp	.+126    	; 0x5334 <_serialCallBack+0xb4>
    52b6:	10 92 88 15 	sts	0x1588, r1	; 0x801588 <inDex.1943>
    52ba:	82 e0       	ldi	r24, 0x02	; 2
    52bc:	80 93 8c 15 	sts	0x158C, r24	; 0x80158c <_mh_state>
    52c0:	08 95       	ret
    52c2:	e0 91 88 15 	lds	r30, 0x1588	; 0x801588 <inDex.1943>
    52c6:	81 e0       	ldi	r24, 0x01	; 1
    52c8:	8e 0f       	add	r24, r30
    52ca:	80 93 88 15 	sts	0x1588, r24	; 0x801588 <inDex.1943>
    52ce:	f0 e0       	ldi	r31, 0x00	; 0
    52d0:	ea 57       	subi	r30, 0x7A	; 122
    52d2:	fa 4e       	sbci	r31, 0xEA	; 234
    52d4:	60 83       	st	Z, r22
    52d6:	82 30       	cpi	r24, 0x02	; 2
    52d8:	69 f5       	brne	.+90     	; 0x5334 <_serialCallBack+0xb4>
    52da:	83 e0       	ldi	r24, 0x03	; 3
    52dc:	80 93 8c 15 	sts	0x158C, r24	; 0x80158c <_mh_state>
    52e0:	08 95       	ret
    52e2:	90 91 88 15 	lds	r25, 0x1588	; 0x801588 <inDex.1943>
    52e6:	21 e0       	ldi	r18, 0x01	; 1
    52e8:	29 0f       	add	r18, r25
    52ea:	20 93 88 15 	sts	0x1588, r18	; 0x801588 <inDex.1943>
    52ee:	96 30       	cpi	r25, 0x06	; 6
    52f0:	09 f5       	brne	.+66     	; 0x5334 <_serialCallBack+0xb4>
    52f2:	81 11       	cpse	r24, r1
    52f4:	0e c0       	rjmp	.+28     	; 0x5312 <_serialCallBack+0x92>
    52f6:	e6 e8       	ldi	r30, 0x86	; 134
    52f8:	f5 e1       	ldi	r31, 0x15	; 21
    52fa:	80 81       	ld	r24, Z
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	98 2f       	mov	r25, r24
    5300:	88 27       	eor	r24, r24
    5302:	21 81       	ldd	r18, Z+1	; 0x01
    5304:	82 0f       	add	r24, r18
    5306:	91 1d       	adc	r25, r1
    5308:	90 93 8e 15 	sts	0x158E, r25	; 0x80158e <_ppm+0x1>
    530c:	80 93 8d 15 	sts	0x158D, r24	; 0x80158d <_ppm>
    5310:	04 c0       	rjmp	.+8      	; 0x531a <_serialCallBack+0x9a>
    5312:	10 92 8e 15 	sts	0x158E, r1	; 0x80158e <_ppm+0x1>
    5316:	10 92 8d 15 	sts	0x158D, r1	; 0x80158d <_ppm>
    531a:	10 92 8c 15 	sts	0x158C, r1	; 0x80158c <_mh_state>
    531e:	e0 91 8a 15 	lds	r30, 0x158A	; 0x80158a <_appCallBack>
    5322:	f0 91 8b 15 	lds	r31, 0x158B	; 0x80158b <_appCallBack+0x1>
    5326:	30 97       	sbiw	r30, 0x00	; 0
    5328:	29 f0       	breq	.+10     	; 0x5334 <_serialCallBack+0xb4>
    532a:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <_ppm>
    532e:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <_ppm+0x1>
    5332:	19 95       	eicall
    5334:	08 95       	ret

00005336 <mh_z19_initialise>:
    5336:	8f 92       	push	r8
    5338:	9f 92       	push	r9
    533a:	af 92       	push	r10
    533c:	cf 92       	push	r12
    533e:	ef 92       	push	r14
    5340:	0f 93       	push	r16
    5342:	0f 2e       	mov	r0, r31
    5344:	f0 e4       	ldi	r31, 0x40	; 64
    5346:	8f 2e       	mov	r8, r31
    5348:	f9 e2       	ldi	r31, 0x29	; 41
    534a:	9f 2e       	mov	r9, r31
    534c:	f0 2d       	mov	r31, r0
    534e:	68 94       	set
    5350:	aa 24       	eor	r10, r10
    5352:	a4 f8       	bld	r10, 4
    5354:	68 94       	set
    5356:	cc 24       	eor	r12, r12
    5358:	c4 f8       	bld	r12, 4
    535a:	e1 2c       	mov	r14, r1
    535c:	00 e0       	ldi	r16, 0x00	; 0
    535e:	23 e0       	ldi	r18, 0x03	; 3
    5360:	40 e8       	ldi	r20, 0x80	; 128
    5362:	55 e2       	ldi	r21, 0x25	; 37
    5364:	60 e0       	ldi	r22, 0x00	; 0
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	73 d0       	rcall	.+230    	; 0x5450 <serial_create>
    536a:	90 93 90 15 	sts	0x1590, r25	; 0x801590 <_serial+0x1>
    536e:	80 93 8f 15 	sts	0x158F, r24	; 0x80158f <_serial>
    5372:	0f 91       	pop	r16
    5374:	ef 90       	pop	r14
    5376:	cf 90       	pop	r12
    5378:	af 90       	pop	r10
    537a:	9f 90       	pop	r9
    537c:	8f 90       	pop	r8
    537e:	08 95       	ret

00005380 <mh_z19_injectCallBack>:
    5380:	90 93 8b 15 	sts	0x158B, r25	; 0x80158b <_appCallBack+0x1>
    5384:	80 93 8a 15 	sts	0x158A, r24	; 0x80158a <_appCallBack>
    5388:	08 95       	ret

0000538a <mh_z19_takeMeassuring>:
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	cd b7       	in	r28, 0x3d	; 61
    5390:	de b7       	in	r29, 0x3e	; 62
    5392:	29 97       	sbiw	r28, 0x09	; 9
    5394:	0f b6       	in	r0, 0x3f	; 63
    5396:	f8 94       	cli
    5398:	de bf       	out	0x3e, r29	; 62
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	cd bf       	out	0x3d, r28	; 61
    539e:	89 e0       	ldi	r24, 0x09	; 9
    53a0:	e2 e4       	ldi	r30, 0x42	; 66
    53a2:	f2 e0       	ldi	r31, 0x02	; 2
    53a4:	9e 01       	movw	r18, r28
    53a6:	2f 5f       	subi	r18, 0xFF	; 255
    53a8:	3f 4f       	sbci	r19, 0xFF	; 255
    53aa:	d9 01       	movw	r26, r18
    53ac:	01 90       	ld	r0, Z+
    53ae:	0d 92       	st	X+, r0
    53b0:	8a 95       	dec	r24
    53b2:	e1 f7       	brne	.-8      	; 0x53ac <mh_z19_takeMeassuring+0x22>
    53b4:	10 92 8e 15 	sts	0x158E, r1	; 0x80158e <_ppm+0x1>
    53b8:	10 92 8d 15 	sts	0x158D, r1	; 0x80158d <_ppm>
    53bc:	80 91 8f 15 	lds	r24, 0x158F	; 0x80158f <_serial>
    53c0:	90 91 90 15 	lds	r25, 0x1590	; 0x801590 <_serial+0x1>
    53c4:	00 97       	sbiw	r24, 0x00	; 0
    53c6:	31 f0       	breq	.+12     	; 0x53d4 <mh_z19_takeMeassuring+0x4a>
    53c8:	42 2f       	mov	r20, r18
    53ca:	53 2f       	mov	r21, r19
    53cc:	69 e0       	ldi	r22, 0x09	; 9
    53ce:	0f d1       	rcall	.+542    	; 0x55ee <serial_sendBytes>
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	01 c0       	rjmp	.+2      	; 0x53d6 <mh_z19_takeMeassuring+0x4c>
    53d4:	82 e0       	ldi	r24, 0x02	; 2
    53d6:	29 96       	adiw	r28, 0x09	; 9
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	f8 94       	cli
    53dc:	de bf       	out	0x3e, r29	; 62
    53de:	0f be       	out	0x3f, r0	; 63
    53e0:	cd bf       	out	0x3d, r28	; 61
    53e2:	df 91       	pop	r29
    53e4:	cf 91       	pop	r28
    53e6:	08 95       	ret

000053e8 <rc_servo_setPosition>:
    53e8:	65 36       	cpi	r22, 0x65	; 101
    53ea:	0c f0       	brlt	.+2      	; 0x53ee <rc_servo_setPosition+0x6>
    53ec:	64 e6       	ldi	r22, 0x64	; 100
    53ee:	6c 39       	cpi	r22, 0x9C	; 156
    53f0:	0c f4       	brge	.+2      	; 0x53f4 <rc_servo_setPosition+0xc>
    53f2:	6c e9       	ldi	r22, 0x9C	; 156
    53f4:	96 ef       	ldi	r25, 0xF6	; 246
    53f6:	69 02       	muls	r22, r25
    53f8:	b0 01       	movw	r22, r0
    53fa:	11 24       	eor	r1, r1
    53fc:	68 54       	subi	r22, 0x48	; 72
    53fe:	74 4f       	sbci	r23, 0xF4	; 244
    5400:	81 11       	cpse	r24, r1
    5402:	05 c0       	rjmp	.+10     	; 0x540e <rc_servo_setPosition+0x26>
    5404:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    5408:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    540c:	08 95       	ret
    540e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    5412:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    5416:	08 95       	ret

00005418 <rc_servo_initialise>:
    5418:	ea e0       	ldi	r30, 0x0A	; 10
    541a:	f1 e0       	ldi	r31, 0x01	; 1
    541c:	80 81       	ld	r24, Z
    541e:	88 61       	ori	r24, 0x18	; 24
    5420:	80 83       	st	Z, r24
    5422:	8f e3       	ldi	r24, 0x3F	; 63
    5424:	9c e9       	ldi	r25, 0x9C	; 156
    5426:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    542a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    542e:	60 e0       	ldi	r22, 0x00	; 0
    5430:	80 e0       	ldi	r24, 0x00	; 0
    5432:	da df       	rcall	.-76     	; 0x53e8 <rc_servo_setPosition>
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	d7 df       	rcall	.-82     	; 0x53e8 <rc_servo_setPosition>
    543a:	e0 e2       	ldi	r30, 0x20	; 32
    543c:	f1 e0       	ldi	r31, 0x01	; 1
    543e:	80 81       	ld	r24, Z
    5440:	82 6a       	ori	r24, 0xA2	; 162
    5442:	80 83       	st	Z, r24
    5444:	e1 e2       	ldi	r30, 0x21	; 33
    5446:	f1 e0       	ldi	r31, 0x01	; 1
    5448:	80 81       	ld	r24, Z
    544a:	8a 61       	ori	r24, 0x1A	; 26
    544c:	80 83       	st	Z, r24
    544e:	08 95       	ret

00005450 <serial_create>:
    5450:	2f 92       	push	r2
    5452:	3f 92       	push	r3
    5454:	4f 92       	push	r4
    5456:	5f 92       	push	r5
    5458:	6f 92       	push	r6
    545a:	7f 92       	push	r7
    545c:	8f 92       	push	r8
    545e:	9f 92       	push	r9
    5460:	af 92       	push	r10
    5462:	cf 92       	push	r12
    5464:	ef 92       	push	r14
    5466:	ff 92       	push	r15
    5468:	0f 93       	push	r16
    546a:	1f 93       	push	r17
    546c:	cf 93       	push	r28
    546e:	df 93       	push	r29
    5470:	cd b7       	in	r28, 0x3d	; 61
    5472:	de b7       	in	r29, 0x3e	; 62
    5474:	f8 2e       	mov	r15, r24
    5476:	2a 01       	movw	r4, r20
    5478:	3b 01       	movw	r6, r22
    547a:	88 e0       	ldi	r24, 0x08	; 8
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <malloc>
    5482:	8c 01       	movw	r16, r24
    5484:	8f 2d       	mov	r24, r15
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	fc 01       	movw	r30, r24
    548a:	ee 0f       	add	r30, r30
    548c:	ff 1f       	adc	r31, r31
    548e:	ef 56       	subi	r30, 0x6F	; 111
    5490:	fa 4e       	sbci	r31, 0xEA	; 234
    5492:	11 83       	std	Z+1, r17	; 0x01
    5494:	00 83       	st	Z, r16
    5496:	01 15       	cp	r16, r1
    5498:	11 05       	cpc	r17, r1
    549a:	09 f4       	brne	.+2      	; 0x549e <serial_create+0x4e>
    549c:	6b c0       	rjmp	.+214    	; 0x5574 <serial_create+0x124>
    549e:	88 0f       	add	r24, r24
    54a0:	99 1f       	adc	r25, r25
    54a2:	fc 01       	movw	r30, r24
    54a4:	e5 5f       	subi	r30, 0xF5	; 245
    54a6:	fd 4f       	sbci	r31, 0xFD	; 253
    54a8:	80 81       	ld	r24, Z
    54aa:	91 81       	ldd	r25, Z+1	; 0x01
    54ac:	d8 01       	movw	r26, r16
    54ae:	8d 93       	st	X+, r24
    54b0:	9c 93       	st	X, r25
    54b2:	8c 2d       	mov	r24, r12
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	88 0f       	add	r24, r24
    54b8:	99 1f       	adc	r25, r25
    54ba:	88 0f       	add	r24, r24
    54bc:	99 1f       	adc	r25, r25
    54be:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <malloc>
    54c2:	1c 01       	movw	r2, r24
    54c4:	86 e0       	ldi	r24, 0x06	; 6
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <malloc>
    54cc:	7c 01       	movw	r14, r24
    54ce:	4c 2d       	mov	r20, r12
    54d0:	b1 01       	movw	r22, r2
    54d2:	bf d6       	rcall	.+3454   	; 0x6252 <fifo_init>
    54d4:	f8 01       	movw	r30, r16
    54d6:	f5 82       	std	Z+5, r15	; 0x05
    54d8:	e4 82       	std	Z+4, r14	; 0x04
    54da:	8a 2d       	mov	r24, r10
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	88 0f       	add	r24, r24
    54e0:	99 1f       	adc	r25, r25
    54e2:	88 0f       	add	r24, r24
    54e4:	99 1f       	adc	r25, r25
    54e6:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <malloc>
    54ea:	1c 01       	movw	r2, r24
    54ec:	86 e0       	ldi	r24, 0x06	; 6
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <malloc>
    54f4:	7c 01       	movw	r14, r24
    54f6:	4a 2d       	mov	r20, r10
    54f8:	b1 01       	movw	r22, r2
    54fa:	ab d6       	rcall	.+3414   	; 0x6252 <fifo_init>
    54fc:	d8 01       	movw	r26, r16
    54fe:	13 96       	adiw	r26, 0x03	; 3
    5500:	fc 92       	st	X, r15
    5502:	ee 92       	st	-X, r14
    5504:	12 97       	sbiw	r26, 0x02	; 2
    5506:	17 96       	adiw	r26, 0x07	; 7
    5508:	9c 92       	st	X, r9
    550a:	8e 92       	st	-X, r8
    550c:	16 97       	sbiw	r26, 0x06	; 6
    550e:	ff b6       	in	r15, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	ed 91       	ld	r30, X+
    5514:	fc 91       	ld	r31, X
    5516:	11 97       	sbiw	r26, 0x01	; 1
    5518:	36 97       	sbiw	r30, 0x06	; 6
    551a:	80 81       	ld	r24, Z
    551c:	82 60       	ori	r24, 0x02	; 2
    551e:	80 83       	st	Z, r24
    5520:	8d 90       	ld	r8, X+
    5522:	9c 90       	ld	r9, X
    5524:	c3 01       	movw	r24, r6
    5526:	b2 01       	movw	r22, r4
    5528:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <__floatunsisf>
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	30 e0       	ldi	r19, 0x00	; 0
    5530:	40 e0       	ldi	r20, 0x00	; 0
    5532:	51 e4       	ldi	r21, 0x41	; 65
    5534:	a9 d8       	rcall	.-3758   	; 0x4688 <__mulsf3>
    5536:	9b 01       	movw	r18, r22
    5538:	ac 01       	movw	r20, r24
    553a:	60 e0       	ldi	r22, 0x00	; 0
    553c:	74 e2       	ldi	r23, 0x24	; 36
    553e:	84 e7       	ldi	r24, 0x74	; 116
    5540:	9b e4       	ldi	r25, 0x4B	; 75
    5542:	0e 94 ce 34 	call	0x699c	; 0x699c <__divsf3>
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	40 e8       	ldi	r20, 0x80	; 128
    554c:	5f e3       	ldi	r21, 0x3F	; 63
    554e:	ff d8       	rcall	.-3586   	; 0x474e <__subsf3>
    5550:	0e 94 98 22 	call	0x4530	; 0x4530 <__fixunssfsi>
    5554:	f4 01       	movw	r30, r8
    5556:	32 97       	sbiw	r30, 0x02	; 2
    5558:	60 83       	st	Z, r22
    555a:	d8 01       	movw	r26, r16
    555c:	ed 91       	ld	r30, X+
    555e:	fc 91       	ld	r31, X
    5560:	11 97       	sbiw	r26, 0x01	; 1
    5562:	35 97       	sbiw	r30, 0x05	; 5
    5564:	88 e9       	ldi	r24, 0x98	; 152
    5566:	80 83       	st	Z, r24
    5568:	ed 91       	ld	r30, X+
    556a:	fc 91       	ld	r31, X
    556c:	34 97       	sbiw	r30, 0x04	; 4
    556e:	86 e0       	ldi	r24, 0x06	; 6
    5570:	80 83       	st	Z, r24
    5572:	ff be       	out	0x3f, r15	; 63
    5574:	c8 01       	movw	r24, r16
    5576:	df 91       	pop	r29
    5578:	cf 91       	pop	r28
    557a:	1f 91       	pop	r17
    557c:	0f 91       	pop	r16
    557e:	ff 90       	pop	r15
    5580:	ef 90       	pop	r14
    5582:	cf 90       	pop	r12
    5584:	af 90       	pop	r10
    5586:	9f 90       	pop	r9
    5588:	8f 90       	pop	r8
    558a:	7f 90       	pop	r7
    558c:	6f 90       	pop	r6
    558e:	5f 90       	pop	r5
    5590:	4f 90       	pop	r4
    5592:	3f 90       	pop	r3
    5594:	2f 90       	pop	r2
    5596:	08 95       	ret

00005598 <serial_sendByte>:
    5598:	cf 93       	push	r28
    559a:	df 93       	push	r29
    559c:	dc 01       	movw	r26, r24
    559e:	89 2b       	or	r24, r25
    55a0:	01 f1       	breq	.+64     	; 0x55e2 <serial_sendByte+0x4a>
    55a2:	12 96       	adiw	r26, 0x02	; 2
    55a4:	ed 91       	ld	r30, X+
    55a6:	fc 91       	ld	r31, X
    55a8:	13 97       	sbiw	r26, 0x03	; 3
    55aa:	93 81       	ldd	r25, Z+3	; 0x03
    55ac:	82 81       	ldd	r24, Z+2	; 0x02
    55ae:	25 81       	ldd	r18, Z+5	; 0x05
    55b0:	98 1b       	sub	r25, r24
    55b2:	92 23       	and	r25, r18
    55b4:	84 81       	ldd	r24, Z+4	; 0x04
    55b6:	98 17       	cp	r25, r24
    55b8:	b1 f0       	breq	.+44     	; 0x55e6 <serial_sendByte+0x4e>
    55ba:	83 81       	ldd	r24, Z+3	; 0x03
    55bc:	26 95       	lsr	r18
    55be:	28 23       	and	r18, r24
    55c0:	c0 81       	ld	r28, Z
    55c2:	d1 81       	ldd	r29, Z+1	; 0x01
    55c4:	c2 0f       	add	r28, r18
    55c6:	d1 1d       	adc	r29, r1
    55c8:	68 83       	st	Y, r22
    55ca:	8f 5f       	subi	r24, 0xFF	; 255
    55cc:	95 81       	ldd	r25, Z+5	; 0x05
    55ce:	89 23       	and	r24, r25
    55d0:	83 83       	std	Z+3, r24	; 0x03
    55d2:	ed 91       	ld	r30, X+
    55d4:	fc 91       	ld	r31, X
    55d6:	35 97       	sbiw	r30, 0x05	; 5
    55d8:	80 81       	ld	r24, Z
    55da:	80 62       	ori	r24, 0x20	; 32
    55dc:	80 83       	st	Z, r24
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	03 c0       	rjmp	.+6      	; 0x55e8 <serial_sendByte+0x50>
    55e2:	81 e0       	ldi	r24, 0x01	; 1
    55e4:	01 c0       	rjmp	.+2      	; 0x55e8 <serial_sendByte+0x50>
    55e6:	82 e0       	ldi	r24, 0x02	; 2
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	08 95       	ret

000055ee <serial_sendBytes>:
    55ee:	ef 92       	push	r14
    55f0:	ff 92       	push	r15
    55f2:	0f 93       	push	r16
    55f4:	1f 93       	push	r17
    55f6:	cf 93       	push	r28
    55f8:	df 93       	push	r29
    55fa:	7c 01       	movw	r14, r24
    55fc:	00 97       	sbiw	r24, 0x00	; 0
    55fe:	09 f4       	brne	.+2      	; 0x5602 <serial_sendBytes+0x14>
    5600:	41 c0       	rjmp	.+130    	; 0x5684 <serial_sendBytes+0x96>
    5602:	dc 01       	movw	r26, r24
    5604:	12 96       	adiw	r26, 0x02	; 2
    5606:	ed 91       	ld	r30, X+
    5608:	fc 91       	ld	r31, X
    560a:	13 97       	sbiw	r26, 0x03	; 3
    560c:	93 81       	ldd	r25, Z+3	; 0x03
    560e:	82 81       	ldd	r24, Z+2	; 0x02
    5610:	98 1b       	sub	r25, r24
    5612:	85 81       	ldd	r24, Z+5	; 0x05
    5614:	98 23       	and	r25, r24
    5616:	84 81       	ldd	r24, Z+4	; 0x04
    5618:	89 1b       	sub	r24, r25
    561a:	86 17       	cp	r24, r22
    561c:	a8 f1       	brcs	.+106    	; 0x5688 <serial_sendBytes+0x9a>
    561e:	66 23       	and	r22, r22
    5620:	41 f1       	breq	.+80     	; 0x5672 <serial_sendBytes+0x84>
    5622:	84 2f       	mov	r24, r20
    5624:	95 2f       	mov	r25, r21
    5626:	dc 01       	movw	r26, r24
    5628:	61 50       	subi	r22, 0x01	; 1
    562a:	46 2f       	mov	r20, r22
    562c:	50 e0       	ldi	r21, 0x00	; 0
    562e:	4f 5f       	subi	r20, 0xFF	; 255
    5630:	5f 4f       	sbci	r21, 0xFF	; 255
    5632:	48 0f       	add	r20, r24
    5634:	59 1f       	adc	r21, r25
    5636:	e7 01       	movw	r28, r14
    5638:	ea 81       	ldd	r30, Y+2	; 0x02
    563a:	fb 81       	ldd	r31, Y+3	; 0x03
    563c:	93 81       	ldd	r25, Z+3	; 0x03
    563e:	82 81       	ldd	r24, Z+2	; 0x02
    5640:	25 81       	ldd	r18, Z+5	; 0x05
    5642:	98 1b       	sub	r25, r24
    5644:	92 23       	and	r25, r18
    5646:	84 81       	ldd	r24, Z+4	; 0x04
    5648:	98 17       	cp	r25, r24
    564a:	79 f0       	breq	.+30     	; 0x566a <serial_sendBytes+0x7c>
    564c:	8c 91       	ld	r24, X
    564e:	93 81       	ldd	r25, Z+3	; 0x03
    5650:	26 95       	lsr	r18
    5652:	29 23       	and	r18, r25
    5654:	60 81       	ld	r22, Z
    5656:	71 81       	ldd	r23, Z+1	; 0x01
    5658:	8b 01       	movw	r16, r22
    565a:	02 0f       	add	r16, r18
    565c:	11 1d       	adc	r17, r1
    565e:	e8 01       	movw	r28, r16
    5660:	88 83       	st	Y, r24
    5662:	9f 5f       	subi	r25, 0xFF	; 255
    5664:	85 81       	ldd	r24, Z+5	; 0x05
    5666:	98 23       	and	r25, r24
    5668:	93 83       	std	Z+3, r25	; 0x03
    566a:	11 96       	adiw	r26, 0x01	; 1
    566c:	a4 17       	cp	r26, r20
    566e:	b5 07       	cpc	r27, r21
    5670:	11 f7       	brne	.-60     	; 0x5636 <serial_sendBytes+0x48>
    5672:	d7 01       	movw	r26, r14
    5674:	ed 91       	ld	r30, X+
    5676:	fc 91       	ld	r31, X
    5678:	35 97       	sbiw	r30, 0x05	; 5
    567a:	80 81       	ld	r24, Z
    567c:	80 62       	ori	r24, 0x20	; 32
    567e:	80 83       	st	Z, r24
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	03 c0       	rjmp	.+6      	; 0x568a <serial_sendBytes+0x9c>
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	01 c0       	rjmp	.+2      	; 0x568a <serial_sendBytes+0x9c>
    5688:	82 e0       	ldi	r24, 0x02	; 2
    568a:	df 91       	pop	r29
    568c:	cf 91       	pop	r28
    568e:	1f 91       	pop	r17
    5690:	0f 91       	pop	r16
    5692:	ff 90       	pop	r15
    5694:	ef 90       	pop	r14
    5696:	08 95       	ret

00005698 <serial_getByte>:
    5698:	00 97       	sbiw	r24, 0x00	; 0
    569a:	d1 f0       	breq	.+52     	; 0x56d0 <serial_getByte+0x38>
    569c:	dc 01       	movw	r26, r24
    569e:	14 96       	adiw	r26, 0x04	; 4
    56a0:	ed 91       	ld	r30, X+
    56a2:	fc 91       	ld	r31, X
    56a4:	15 97       	sbiw	r26, 0x05	; 5
    56a6:	93 81       	ldd	r25, Z+3	; 0x03
    56a8:	82 81       	ldd	r24, Z+2	; 0x02
    56aa:	98 17       	cp	r25, r24
    56ac:	99 f0       	breq	.+38     	; 0x56d4 <serial_getByte+0x3c>
    56ae:	92 81       	ldd	r25, Z+2	; 0x02
    56b0:	85 81       	ldd	r24, Z+5	; 0x05
    56b2:	86 95       	lsr	r24
    56b4:	89 23       	and	r24, r25
    56b6:	a0 81       	ld	r26, Z
    56b8:	b1 81       	ldd	r27, Z+1	; 0x01
    56ba:	a8 0f       	add	r26, r24
    56bc:	b1 1d       	adc	r27, r1
    56be:	8c 91       	ld	r24, X
    56c0:	db 01       	movw	r26, r22
    56c2:	8c 93       	st	X, r24
    56c4:	9f 5f       	subi	r25, 0xFF	; 255
    56c6:	85 81       	ldd	r24, Z+5	; 0x05
    56c8:	98 23       	and	r25, r24
    56ca:	92 83       	std	Z+2, r25	; 0x02
    56cc:	80 e0       	ldi	r24, 0x00	; 0
    56ce:	08 95       	ret
    56d0:	81 e0       	ldi	r24, 0x01	; 1
    56d2:	08 95       	ret
    56d4:	83 e0       	ldi	r24, 0x03	; 3
    56d6:	08 95       	ret

000056d8 <__vector_25>:
    56d8:	1f 92       	push	r1
    56da:	0f 92       	push	r0
    56dc:	0f b6       	in	r0, 0x3f	; 63
    56de:	0f 92       	push	r0
    56e0:	11 24       	eor	r1, r1
    56e2:	0b b6       	in	r0, 0x3b	; 59
    56e4:	0f 92       	push	r0
    56e6:	2f 93       	push	r18
    56e8:	3f 93       	push	r19
    56ea:	4f 93       	push	r20
    56ec:	5f 93       	push	r21
    56ee:	6f 93       	push	r22
    56f0:	7f 93       	push	r23
    56f2:	8f 93       	push	r24
    56f4:	9f 93       	push	r25
    56f6:	af 93       	push	r26
    56f8:	bf 93       	push	r27
    56fa:	cf 93       	push	r28
    56fc:	df 93       	push	r29
    56fe:	ef 93       	push	r30
    5700:	ff 93       	push	r31
    5702:	a0 91 91 15 	lds	r26, 0x1591	; 0x801591 <_ser_handle>
    5706:	b0 91 92 15 	lds	r27, 0x1592	; 0x801592 <_ser_handle+0x1>
    570a:	10 97       	sbiw	r26, 0x00	; 0
    570c:	11 f1       	breq	.+68     	; 0x5752 <__vector_25+0x7a>
    570e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5712:	14 96       	adiw	r26, 0x04	; 4
    5714:	ed 91       	ld	r30, X+
    5716:	fc 91       	ld	r31, X
    5718:	15 97       	sbiw	r26, 0x05	; 5
    571a:	93 81       	ldd	r25, Z+3	; 0x03
    571c:	82 81       	ldd	r24, Z+2	; 0x02
    571e:	25 81       	ldd	r18, Z+5	; 0x05
    5720:	98 1b       	sub	r25, r24
    5722:	92 23       	and	r25, r18
    5724:	84 81       	ldd	r24, Z+4	; 0x04
    5726:	98 17       	cp	r25, r24
    5728:	61 f0       	breq	.+24     	; 0x5742 <__vector_25+0x6a>
    572a:	83 81       	ldd	r24, Z+3	; 0x03
    572c:	26 95       	lsr	r18
    572e:	28 23       	and	r18, r24
    5730:	c0 81       	ld	r28, Z
    5732:	d1 81       	ldd	r29, Z+1	; 0x01
    5734:	c2 0f       	add	r28, r18
    5736:	d1 1d       	adc	r29, r1
    5738:	68 83       	st	Y, r22
    573a:	8f 5f       	subi	r24, 0xFF	; 255
    573c:	95 81       	ldd	r25, Z+5	; 0x05
    573e:	89 23       	and	r24, r25
    5740:	83 83       	std	Z+3, r24	; 0x03
    5742:	16 96       	adiw	r26, 0x06	; 6
    5744:	ed 91       	ld	r30, X+
    5746:	fc 91       	ld	r31, X
    5748:	17 97       	sbiw	r26, 0x07	; 7
    574a:	30 97       	sbiw	r30, 0x00	; 0
    574c:	11 f0       	breq	.+4      	; 0x5752 <__vector_25+0x7a>
    574e:	cd 01       	movw	r24, r26
    5750:	19 95       	eicall
    5752:	ff 91       	pop	r31
    5754:	ef 91       	pop	r30
    5756:	df 91       	pop	r29
    5758:	cf 91       	pop	r28
    575a:	bf 91       	pop	r27
    575c:	af 91       	pop	r26
    575e:	9f 91       	pop	r25
    5760:	8f 91       	pop	r24
    5762:	7f 91       	pop	r23
    5764:	6f 91       	pop	r22
    5766:	5f 91       	pop	r21
    5768:	4f 91       	pop	r20
    576a:	3f 91       	pop	r19
    576c:	2f 91       	pop	r18
    576e:	0f 90       	pop	r0
    5770:	0b be       	out	0x3b, r0	; 59
    5772:	0f 90       	pop	r0
    5774:	0f be       	out	0x3f, r0	; 63
    5776:	0f 90       	pop	r0
    5778:	1f 90       	pop	r1
    577a:	18 95       	reti

0000577c <__vector_26>:
    577c:	1f 92       	push	r1
    577e:	0f 92       	push	r0
    5780:	0f b6       	in	r0, 0x3f	; 63
    5782:	0f 92       	push	r0
    5784:	11 24       	eor	r1, r1
    5786:	0b b6       	in	r0, 0x3b	; 59
    5788:	0f 92       	push	r0
    578a:	2f 93       	push	r18
    578c:	8f 93       	push	r24
    578e:	9f 93       	push	r25
    5790:	af 93       	push	r26
    5792:	bf 93       	push	r27
    5794:	ef 93       	push	r30
    5796:	ff 93       	push	r31
    5798:	e0 91 91 15 	lds	r30, 0x1591	; 0x801591 <_ser_handle>
    579c:	f0 91 92 15 	lds	r31, 0x1592	; 0x801592 <_ser_handle+0x1>
    57a0:	30 97       	sbiw	r30, 0x00	; 0
    57a2:	b9 f0       	breq	.+46     	; 0x57d2 <__vector_26+0x56>
    57a4:	02 80       	ldd	r0, Z+2	; 0x02
    57a6:	f3 81       	ldd	r31, Z+3	; 0x03
    57a8:	e0 2d       	mov	r30, r0
    57aa:	93 81       	ldd	r25, Z+3	; 0x03
    57ac:	82 81       	ldd	r24, Z+2	; 0x02
    57ae:	98 17       	cp	r25, r24
    57b0:	b1 f0       	breq	.+44     	; 0x57de <__vector_26+0x62>
    57b2:	92 81       	ldd	r25, Z+2	; 0x02
    57b4:	85 81       	ldd	r24, Z+5	; 0x05
    57b6:	28 2f       	mov	r18, r24
    57b8:	26 95       	lsr	r18
    57ba:	29 23       	and	r18, r25
    57bc:	a0 81       	ld	r26, Z
    57be:	b1 81       	ldd	r27, Z+1	; 0x01
    57c0:	a2 0f       	add	r26, r18
    57c2:	b1 1d       	adc	r27, r1
    57c4:	2c 91       	ld	r18, X
    57c6:	9f 5f       	subi	r25, 0xFF	; 255
    57c8:	89 23       	and	r24, r25
    57ca:	82 83       	std	Z+2, r24	; 0x02
    57cc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    57d0:	0b c0       	rjmp	.+22     	; 0x57e8 <__vector_26+0x6c>
    57d2:	e1 ec       	ldi	r30, 0xC1	; 193
    57d4:	f0 e0       	ldi	r31, 0x00	; 0
    57d6:	80 81       	ld	r24, Z
    57d8:	8f 7d       	andi	r24, 0xDF	; 223
    57da:	80 83       	st	Z, r24
    57dc:	05 c0       	rjmp	.+10     	; 0x57e8 <__vector_26+0x6c>
    57de:	e1 ec       	ldi	r30, 0xC1	; 193
    57e0:	f0 e0       	ldi	r31, 0x00	; 0
    57e2:	80 81       	ld	r24, Z
    57e4:	8f 7d       	andi	r24, 0xDF	; 223
    57e6:	80 83       	st	Z, r24
    57e8:	ff 91       	pop	r31
    57ea:	ef 91       	pop	r30
    57ec:	bf 91       	pop	r27
    57ee:	af 91       	pop	r26
    57f0:	9f 91       	pop	r25
    57f2:	8f 91       	pop	r24
    57f4:	2f 91       	pop	r18
    57f6:	0f 90       	pop	r0
    57f8:	0b be       	out	0x3b, r0	; 59
    57fa:	0f 90       	pop	r0
    57fc:	0f be       	out	0x3f, r0	; 63
    57fe:	0f 90       	pop	r0
    5800:	1f 90       	pop	r1
    5802:	18 95       	reti

00005804 <__vector_36>:
    5804:	1f 92       	push	r1
    5806:	0f 92       	push	r0
    5808:	0f b6       	in	r0, 0x3f	; 63
    580a:	0f 92       	push	r0
    580c:	11 24       	eor	r1, r1
    580e:	0b b6       	in	r0, 0x3b	; 59
    5810:	0f 92       	push	r0
    5812:	2f 93       	push	r18
    5814:	3f 93       	push	r19
    5816:	4f 93       	push	r20
    5818:	5f 93       	push	r21
    581a:	6f 93       	push	r22
    581c:	7f 93       	push	r23
    581e:	8f 93       	push	r24
    5820:	9f 93       	push	r25
    5822:	af 93       	push	r26
    5824:	bf 93       	push	r27
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
    582a:	ef 93       	push	r30
    582c:	ff 93       	push	r31
    582e:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <_ser_handle+0x2>
    5832:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <_ser_handle+0x3>
    5836:	10 97       	sbiw	r26, 0x00	; 0
    5838:	11 f1       	breq	.+68     	; 0x587e <__vector_36+0x7a>
    583a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    583e:	14 96       	adiw	r26, 0x04	; 4
    5840:	ed 91       	ld	r30, X+
    5842:	fc 91       	ld	r31, X
    5844:	15 97       	sbiw	r26, 0x05	; 5
    5846:	93 81       	ldd	r25, Z+3	; 0x03
    5848:	82 81       	ldd	r24, Z+2	; 0x02
    584a:	25 81       	ldd	r18, Z+5	; 0x05
    584c:	98 1b       	sub	r25, r24
    584e:	92 23       	and	r25, r18
    5850:	84 81       	ldd	r24, Z+4	; 0x04
    5852:	98 17       	cp	r25, r24
    5854:	61 f0       	breq	.+24     	; 0x586e <__vector_36+0x6a>
    5856:	83 81       	ldd	r24, Z+3	; 0x03
    5858:	26 95       	lsr	r18
    585a:	28 23       	and	r18, r24
    585c:	c0 81       	ld	r28, Z
    585e:	d1 81       	ldd	r29, Z+1	; 0x01
    5860:	c2 0f       	add	r28, r18
    5862:	d1 1d       	adc	r29, r1
    5864:	68 83       	st	Y, r22
    5866:	8f 5f       	subi	r24, 0xFF	; 255
    5868:	95 81       	ldd	r25, Z+5	; 0x05
    586a:	89 23       	and	r24, r25
    586c:	83 83       	std	Z+3, r24	; 0x03
    586e:	16 96       	adiw	r26, 0x06	; 6
    5870:	ed 91       	ld	r30, X+
    5872:	fc 91       	ld	r31, X
    5874:	17 97       	sbiw	r26, 0x07	; 7
    5876:	30 97       	sbiw	r30, 0x00	; 0
    5878:	11 f0       	breq	.+4      	; 0x587e <__vector_36+0x7a>
    587a:	cd 01       	movw	r24, r26
    587c:	19 95       	eicall
    587e:	ff 91       	pop	r31
    5880:	ef 91       	pop	r30
    5882:	df 91       	pop	r29
    5884:	cf 91       	pop	r28
    5886:	bf 91       	pop	r27
    5888:	af 91       	pop	r26
    588a:	9f 91       	pop	r25
    588c:	8f 91       	pop	r24
    588e:	7f 91       	pop	r23
    5890:	6f 91       	pop	r22
    5892:	5f 91       	pop	r21
    5894:	4f 91       	pop	r20
    5896:	3f 91       	pop	r19
    5898:	2f 91       	pop	r18
    589a:	0f 90       	pop	r0
    589c:	0b be       	out	0x3b, r0	; 59
    589e:	0f 90       	pop	r0
    58a0:	0f be       	out	0x3f, r0	; 63
    58a2:	0f 90       	pop	r0
    58a4:	1f 90       	pop	r1
    58a6:	18 95       	reti

000058a8 <__vector_37>:
    58a8:	1f 92       	push	r1
    58aa:	0f 92       	push	r0
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	0f 92       	push	r0
    58b0:	11 24       	eor	r1, r1
    58b2:	0b b6       	in	r0, 0x3b	; 59
    58b4:	0f 92       	push	r0
    58b6:	2f 93       	push	r18
    58b8:	8f 93       	push	r24
    58ba:	9f 93       	push	r25
    58bc:	af 93       	push	r26
    58be:	bf 93       	push	r27
    58c0:	ef 93       	push	r30
    58c2:	ff 93       	push	r31
    58c4:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <_ser_handle+0x2>
    58c8:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <_ser_handle+0x3>
    58cc:	30 97       	sbiw	r30, 0x00	; 0
    58ce:	b9 f0       	breq	.+46     	; 0x58fe <__vector_37+0x56>
    58d0:	02 80       	ldd	r0, Z+2	; 0x02
    58d2:	f3 81       	ldd	r31, Z+3	; 0x03
    58d4:	e0 2d       	mov	r30, r0
    58d6:	93 81       	ldd	r25, Z+3	; 0x03
    58d8:	82 81       	ldd	r24, Z+2	; 0x02
    58da:	98 17       	cp	r25, r24
    58dc:	b1 f0       	breq	.+44     	; 0x590a <__vector_37+0x62>
    58de:	92 81       	ldd	r25, Z+2	; 0x02
    58e0:	85 81       	ldd	r24, Z+5	; 0x05
    58e2:	28 2f       	mov	r18, r24
    58e4:	26 95       	lsr	r18
    58e6:	29 23       	and	r18, r25
    58e8:	a0 81       	ld	r26, Z
    58ea:	b1 81       	ldd	r27, Z+1	; 0x01
    58ec:	a2 0f       	add	r26, r18
    58ee:	b1 1d       	adc	r27, r1
    58f0:	2c 91       	ld	r18, X
    58f2:	9f 5f       	subi	r25, 0xFF	; 255
    58f4:	89 23       	and	r24, r25
    58f6:	82 83       	std	Z+2, r24	; 0x02
    58f8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    58fc:	0b c0       	rjmp	.+22     	; 0x5914 <__vector_37+0x6c>
    58fe:	e9 ec       	ldi	r30, 0xC9	; 201
    5900:	f0 e0       	ldi	r31, 0x00	; 0
    5902:	80 81       	ld	r24, Z
    5904:	8f 7d       	andi	r24, 0xDF	; 223
    5906:	80 83       	st	Z, r24
    5908:	05 c0       	rjmp	.+10     	; 0x5914 <__vector_37+0x6c>
    590a:	e9 ec       	ldi	r30, 0xC9	; 201
    590c:	f0 e0       	ldi	r31, 0x00	; 0
    590e:	80 81       	ld	r24, Z
    5910:	8f 7d       	andi	r24, 0xDF	; 223
    5912:	80 83       	st	Z, r24
    5914:	ff 91       	pop	r31
    5916:	ef 91       	pop	r30
    5918:	bf 91       	pop	r27
    591a:	af 91       	pop	r26
    591c:	9f 91       	pop	r25
    591e:	8f 91       	pop	r24
    5920:	2f 91       	pop	r18
    5922:	0f 90       	pop	r0
    5924:	0b be       	out	0x3b, r0	; 59
    5926:	0f 90       	pop	r0
    5928:	0f be       	out	0x3f, r0	; 63
    592a:	0f 90       	pop	r0
    592c:	1f 90       	pop	r1
    592e:	18 95       	reti

00005930 <__vector_51>:
    5930:	1f 92       	push	r1
    5932:	0f 92       	push	r0
    5934:	0f b6       	in	r0, 0x3f	; 63
    5936:	0f 92       	push	r0
    5938:	11 24       	eor	r1, r1
    593a:	0b b6       	in	r0, 0x3b	; 59
    593c:	0f 92       	push	r0
    593e:	2f 93       	push	r18
    5940:	3f 93       	push	r19
    5942:	4f 93       	push	r20
    5944:	5f 93       	push	r21
    5946:	6f 93       	push	r22
    5948:	7f 93       	push	r23
    594a:	8f 93       	push	r24
    594c:	9f 93       	push	r25
    594e:	af 93       	push	r26
    5950:	bf 93       	push	r27
    5952:	cf 93       	push	r28
    5954:	df 93       	push	r29
    5956:	ef 93       	push	r30
    5958:	ff 93       	push	r31
    595a:	a0 91 95 15 	lds	r26, 0x1595	; 0x801595 <_ser_handle+0x4>
    595e:	b0 91 96 15 	lds	r27, 0x1596	; 0x801596 <_ser_handle+0x5>
    5962:	10 97       	sbiw	r26, 0x00	; 0
    5964:	11 f1       	breq	.+68     	; 0x59aa <__vector_51+0x7a>
    5966:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    596a:	14 96       	adiw	r26, 0x04	; 4
    596c:	ed 91       	ld	r30, X+
    596e:	fc 91       	ld	r31, X
    5970:	15 97       	sbiw	r26, 0x05	; 5
    5972:	93 81       	ldd	r25, Z+3	; 0x03
    5974:	82 81       	ldd	r24, Z+2	; 0x02
    5976:	25 81       	ldd	r18, Z+5	; 0x05
    5978:	98 1b       	sub	r25, r24
    597a:	92 23       	and	r25, r18
    597c:	84 81       	ldd	r24, Z+4	; 0x04
    597e:	98 17       	cp	r25, r24
    5980:	61 f0       	breq	.+24     	; 0x599a <__vector_51+0x6a>
    5982:	83 81       	ldd	r24, Z+3	; 0x03
    5984:	26 95       	lsr	r18
    5986:	28 23       	and	r18, r24
    5988:	c0 81       	ld	r28, Z
    598a:	d1 81       	ldd	r29, Z+1	; 0x01
    598c:	c2 0f       	add	r28, r18
    598e:	d1 1d       	adc	r29, r1
    5990:	68 83       	st	Y, r22
    5992:	8f 5f       	subi	r24, 0xFF	; 255
    5994:	95 81       	ldd	r25, Z+5	; 0x05
    5996:	89 23       	and	r24, r25
    5998:	83 83       	std	Z+3, r24	; 0x03
    599a:	16 96       	adiw	r26, 0x06	; 6
    599c:	ed 91       	ld	r30, X+
    599e:	fc 91       	ld	r31, X
    59a0:	17 97       	sbiw	r26, 0x07	; 7
    59a2:	30 97       	sbiw	r30, 0x00	; 0
    59a4:	11 f0       	breq	.+4      	; 0x59aa <__vector_51+0x7a>
    59a6:	cd 01       	movw	r24, r26
    59a8:	19 95       	eicall
    59aa:	ff 91       	pop	r31
    59ac:	ef 91       	pop	r30
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	bf 91       	pop	r27
    59b4:	af 91       	pop	r26
    59b6:	9f 91       	pop	r25
    59b8:	8f 91       	pop	r24
    59ba:	7f 91       	pop	r23
    59bc:	6f 91       	pop	r22
    59be:	5f 91       	pop	r21
    59c0:	4f 91       	pop	r20
    59c2:	3f 91       	pop	r19
    59c4:	2f 91       	pop	r18
    59c6:	0f 90       	pop	r0
    59c8:	0b be       	out	0x3b, r0	; 59
    59ca:	0f 90       	pop	r0
    59cc:	0f be       	out	0x3f, r0	; 63
    59ce:	0f 90       	pop	r0
    59d0:	1f 90       	pop	r1
    59d2:	18 95       	reti

000059d4 <__vector_52>:
    59d4:	1f 92       	push	r1
    59d6:	0f 92       	push	r0
    59d8:	0f b6       	in	r0, 0x3f	; 63
    59da:	0f 92       	push	r0
    59dc:	11 24       	eor	r1, r1
    59de:	0b b6       	in	r0, 0x3b	; 59
    59e0:	0f 92       	push	r0
    59e2:	2f 93       	push	r18
    59e4:	8f 93       	push	r24
    59e6:	9f 93       	push	r25
    59e8:	af 93       	push	r26
    59ea:	bf 93       	push	r27
    59ec:	ef 93       	push	r30
    59ee:	ff 93       	push	r31
    59f0:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <_ser_handle+0x4>
    59f4:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <_ser_handle+0x5>
    59f8:	30 97       	sbiw	r30, 0x00	; 0
    59fa:	b9 f0       	breq	.+46     	; 0x5a2a <__vector_52+0x56>
    59fc:	02 80       	ldd	r0, Z+2	; 0x02
    59fe:	f3 81       	ldd	r31, Z+3	; 0x03
    5a00:	e0 2d       	mov	r30, r0
    5a02:	93 81       	ldd	r25, Z+3	; 0x03
    5a04:	82 81       	ldd	r24, Z+2	; 0x02
    5a06:	98 17       	cp	r25, r24
    5a08:	b1 f0       	breq	.+44     	; 0x5a36 <__vector_52+0x62>
    5a0a:	92 81       	ldd	r25, Z+2	; 0x02
    5a0c:	85 81       	ldd	r24, Z+5	; 0x05
    5a0e:	28 2f       	mov	r18, r24
    5a10:	26 95       	lsr	r18
    5a12:	29 23       	and	r18, r25
    5a14:	a0 81       	ld	r26, Z
    5a16:	b1 81       	ldd	r27, Z+1	; 0x01
    5a18:	a2 0f       	add	r26, r18
    5a1a:	b1 1d       	adc	r27, r1
    5a1c:	2c 91       	ld	r18, X
    5a1e:	9f 5f       	subi	r25, 0xFF	; 255
    5a20:	89 23       	and	r24, r25
    5a22:	82 83       	std	Z+2, r24	; 0x02
    5a24:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5a28:	0b c0       	rjmp	.+22     	; 0x5a40 <__vector_52+0x6c>
    5a2a:	e1 ed       	ldi	r30, 0xD1	; 209
    5a2c:	f0 e0       	ldi	r31, 0x00	; 0
    5a2e:	80 81       	ld	r24, Z
    5a30:	8f 7d       	andi	r24, 0xDF	; 223
    5a32:	80 83       	st	Z, r24
    5a34:	05 c0       	rjmp	.+10     	; 0x5a40 <__vector_52+0x6c>
    5a36:	e1 ed       	ldi	r30, 0xD1	; 209
    5a38:	f0 e0       	ldi	r31, 0x00	; 0
    5a3a:	80 81       	ld	r24, Z
    5a3c:	8f 7d       	andi	r24, 0xDF	; 223
    5a3e:	80 83       	st	Z, r24
    5a40:	ff 91       	pop	r31
    5a42:	ef 91       	pop	r30
    5a44:	bf 91       	pop	r27
    5a46:	af 91       	pop	r26
    5a48:	9f 91       	pop	r25
    5a4a:	8f 91       	pop	r24
    5a4c:	2f 91       	pop	r18
    5a4e:	0f 90       	pop	r0
    5a50:	0b be       	out	0x3b, r0	; 59
    5a52:	0f 90       	pop	r0
    5a54:	0f be       	out	0x3f, r0	; 63
    5a56:	0f 90       	pop	r0
    5a58:	1f 90       	pop	r1
    5a5a:	18 95       	reti

00005a5c <__vector_54>:
    5a5c:	1f 92       	push	r1
    5a5e:	0f 92       	push	r0
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	0f 92       	push	r0
    5a64:	11 24       	eor	r1, r1
    5a66:	0b b6       	in	r0, 0x3b	; 59
    5a68:	0f 92       	push	r0
    5a6a:	2f 93       	push	r18
    5a6c:	3f 93       	push	r19
    5a6e:	4f 93       	push	r20
    5a70:	5f 93       	push	r21
    5a72:	6f 93       	push	r22
    5a74:	7f 93       	push	r23
    5a76:	8f 93       	push	r24
    5a78:	9f 93       	push	r25
    5a7a:	af 93       	push	r26
    5a7c:	bf 93       	push	r27
    5a7e:	cf 93       	push	r28
    5a80:	df 93       	push	r29
    5a82:	ef 93       	push	r30
    5a84:	ff 93       	push	r31
    5a86:	a0 91 97 15 	lds	r26, 0x1597	; 0x801597 <_ser_handle+0x6>
    5a8a:	b0 91 98 15 	lds	r27, 0x1598	; 0x801598 <_ser_handle+0x7>
    5a8e:	10 97       	sbiw	r26, 0x00	; 0
    5a90:	11 f1       	breq	.+68     	; 0x5ad6 <__vector_54+0x7a>
    5a92:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5a96:	14 96       	adiw	r26, 0x04	; 4
    5a98:	ed 91       	ld	r30, X+
    5a9a:	fc 91       	ld	r31, X
    5a9c:	15 97       	sbiw	r26, 0x05	; 5
    5a9e:	93 81       	ldd	r25, Z+3	; 0x03
    5aa0:	82 81       	ldd	r24, Z+2	; 0x02
    5aa2:	25 81       	ldd	r18, Z+5	; 0x05
    5aa4:	98 1b       	sub	r25, r24
    5aa6:	92 23       	and	r25, r18
    5aa8:	84 81       	ldd	r24, Z+4	; 0x04
    5aaa:	98 17       	cp	r25, r24
    5aac:	61 f0       	breq	.+24     	; 0x5ac6 <__vector_54+0x6a>
    5aae:	83 81       	ldd	r24, Z+3	; 0x03
    5ab0:	26 95       	lsr	r18
    5ab2:	28 23       	and	r18, r24
    5ab4:	c0 81       	ld	r28, Z
    5ab6:	d1 81       	ldd	r29, Z+1	; 0x01
    5ab8:	c2 0f       	add	r28, r18
    5aba:	d1 1d       	adc	r29, r1
    5abc:	68 83       	st	Y, r22
    5abe:	8f 5f       	subi	r24, 0xFF	; 255
    5ac0:	95 81       	ldd	r25, Z+5	; 0x05
    5ac2:	89 23       	and	r24, r25
    5ac4:	83 83       	std	Z+3, r24	; 0x03
    5ac6:	16 96       	adiw	r26, 0x06	; 6
    5ac8:	ed 91       	ld	r30, X+
    5aca:	fc 91       	ld	r31, X
    5acc:	17 97       	sbiw	r26, 0x07	; 7
    5ace:	30 97       	sbiw	r30, 0x00	; 0
    5ad0:	11 f0       	breq	.+4      	; 0x5ad6 <__vector_54+0x7a>
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	19 95       	eicall
    5ad6:	ff 91       	pop	r31
    5ad8:	ef 91       	pop	r30
    5ada:	df 91       	pop	r29
    5adc:	cf 91       	pop	r28
    5ade:	bf 91       	pop	r27
    5ae0:	af 91       	pop	r26
    5ae2:	9f 91       	pop	r25
    5ae4:	8f 91       	pop	r24
    5ae6:	7f 91       	pop	r23
    5ae8:	6f 91       	pop	r22
    5aea:	5f 91       	pop	r21
    5aec:	4f 91       	pop	r20
    5aee:	3f 91       	pop	r19
    5af0:	2f 91       	pop	r18
    5af2:	0f 90       	pop	r0
    5af4:	0b be       	out	0x3b, r0	; 59
    5af6:	0f 90       	pop	r0
    5af8:	0f be       	out	0x3f, r0	; 63
    5afa:	0f 90       	pop	r0
    5afc:	1f 90       	pop	r1
    5afe:	18 95       	reti

00005b00 <__vector_55>:
    5b00:	1f 92       	push	r1
    5b02:	0f 92       	push	r0
    5b04:	0f b6       	in	r0, 0x3f	; 63
    5b06:	0f 92       	push	r0
    5b08:	11 24       	eor	r1, r1
    5b0a:	0b b6       	in	r0, 0x3b	; 59
    5b0c:	0f 92       	push	r0
    5b0e:	2f 93       	push	r18
    5b10:	8f 93       	push	r24
    5b12:	9f 93       	push	r25
    5b14:	af 93       	push	r26
    5b16:	bf 93       	push	r27
    5b18:	ef 93       	push	r30
    5b1a:	ff 93       	push	r31
    5b1c:	e0 91 97 15 	lds	r30, 0x1597	; 0x801597 <_ser_handle+0x6>
    5b20:	f0 91 98 15 	lds	r31, 0x1598	; 0x801598 <_ser_handle+0x7>
    5b24:	30 97       	sbiw	r30, 0x00	; 0
    5b26:	b9 f0       	breq	.+46     	; 0x5b56 <__vector_55+0x56>
    5b28:	02 80       	ldd	r0, Z+2	; 0x02
    5b2a:	f3 81       	ldd	r31, Z+3	; 0x03
    5b2c:	e0 2d       	mov	r30, r0
    5b2e:	93 81       	ldd	r25, Z+3	; 0x03
    5b30:	82 81       	ldd	r24, Z+2	; 0x02
    5b32:	98 17       	cp	r25, r24
    5b34:	b1 f0       	breq	.+44     	; 0x5b62 <__vector_55+0x62>
    5b36:	92 81       	ldd	r25, Z+2	; 0x02
    5b38:	85 81       	ldd	r24, Z+5	; 0x05
    5b3a:	28 2f       	mov	r18, r24
    5b3c:	26 95       	lsr	r18
    5b3e:	29 23       	and	r18, r25
    5b40:	a0 81       	ld	r26, Z
    5b42:	b1 81       	ldd	r27, Z+1	; 0x01
    5b44:	a2 0f       	add	r26, r18
    5b46:	b1 1d       	adc	r27, r1
    5b48:	2c 91       	ld	r18, X
    5b4a:	9f 5f       	subi	r25, 0xFF	; 255
    5b4c:	89 23       	and	r24, r25
    5b4e:	82 83       	std	Z+2, r24	; 0x02
    5b50:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5b54:	0b c0       	rjmp	.+22     	; 0x5b6c <__vector_55+0x6c>
    5b56:	e1 e3       	ldi	r30, 0x31	; 49
    5b58:	f1 e0       	ldi	r31, 0x01	; 1
    5b5a:	80 81       	ld	r24, Z
    5b5c:	8f 7d       	andi	r24, 0xDF	; 223
    5b5e:	80 83       	st	Z, r24
    5b60:	05 c0       	rjmp	.+10     	; 0x5b6c <__vector_55+0x6c>
    5b62:	e1 e3       	ldi	r30, 0x31	; 49
    5b64:	f1 e0       	ldi	r31, 0x01	; 1
    5b66:	80 81       	ld	r24, Z
    5b68:	8f 7d       	andi	r24, 0xDF	; 223
    5b6a:	80 83       	st	Z, r24
    5b6c:	ff 91       	pop	r31
    5b6e:	ef 91       	pop	r30
    5b70:	bf 91       	pop	r27
    5b72:	af 91       	pop	r26
    5b74:	9f 91       	pop	r25
    5b76:	8f 91       	pop	r24
    5b78:	2f 91       	pop	r18
    5b7a:	0f 90       	pop	r0
    5b7c:	0b be       	out	0x3b, r0	; 59
    5b7e:	0f 90       	pop	r0
    5b80:	0f be       	out	0x3f, r0	; 63
    5b82:	0f 90       	pop	r0
    5b84:	1f 90       	pop	r1
    5b86:	18 95       	reti

00005b88 <usart_getchar>:
    5b88:	cf 93       	push	r28
    5b8a:	df 93       	push	r29
    5b8c:	1f 92       	push	r1
    5b8e:	cd b7       	in	r28, 0x3d	; 61
    5b90:	de b7       	in	r29, 0x3e	; 62
    5b92:	be 01       	movw	r22, r28
    5b94:	6f 5f       	subi	r22, 0xFF	; 255
    5b96:	7f 4f       	sbci	r23, 0xFF	; 255
    5b98:	80 91 99 15 	lds	r24, 0x1599	; 0x801599 <_com_serial_instance>
    5b9c:	90 91 9a 15 	lds	r25, 0x159A	; 0x80159a <_com_serial_instance+0x1>
    5ba0:	7b dd       	rcall	.-1290   	; 0x5698 <serial_getByte>
    5ba2:	81 11       	cpse	r24, r1
    5ba4:	f6 cf       	rjmp	.-20     	; 0x5b92 <usart_getchar+0xa>
    5ba6:	89 81       	ldd	r24, Y+1	; 0x01
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	0f 90       	pop	r0
    5bac:	df 91       	pop	r29
    5bae:	cf 91       	pop	r28
    5bb0:	08 95       	ret

00005bb2 <usart_putchar>:
    5bb2:	68 2f       	mov	r22, r24
    5bb4:	80 91 99 15 	lds	r24, 0x1599	; 0x801599 <_com_serial_instance>
    5bb8:	90 91 9a 15 	lds	r25, 0x159A	; 0x80159a <_com_serial_instance+0x1>
    5bbc:	ed dc       	rcall	.-1574   	; 0x5598 <serial_sendByte>
    5bbe:	80 e0       	ldi	r24, 0x00	; 0
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	08 95       	ret

00005bc4 <stdio_initialise>:
    5bc4:	8f 92       	push	r8
    5bc6:	9f 92       	push	r9
    5bc8:	af 92       	push	r10
    5bca:	cf 92       	push	r12
    5bcc:	ef 92       	push	r14
    5bce:	0f 93       	push	r16
    5bd0:	81 2c       	mov	r8, r1
    5bd2:	91 2c       	mov	r9, r1
    5bd4:	68 94       	set
    5bd6:	aa 24       	eor	r10, r10
    5bd8:	a7 f8       	bld	r10, 7
    5bda:	68 94       	set
    5bdc:	cc 24       	eor	r12, r12
    5bde:	c7 f8       	bld	r12, 7
    5be0:	e1 2c       	mov	r14, r1
    5be2:	00 e0       	ldi	r16, 0x00	; 0
    5be4:	23 e0       	ldi	r18, 0x03	; 3
    5be6:	40 e0       	ldi	r20, 0x00	; 0
    5be8:	51 ee       	ldi	r21, 0xE1	; 225
    5bea:	60 e0       	ldi	r22, 0x00	; 0
    5bec:	70 e0       	ldi	r23, 0x00	; 0
    5bee:	30 dc       	rcall	.-1952   	; 0x5450 <serial_create>
    5bf0:	90 93 9a 15 	sts	0x159A, r25	; 0x80159a <_com_serial_instance+0x1>
    5bf4:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <_com_serial_instance>
    5bf8:	ed ec       	ldi	r30, 0xCD	; 205
    5bfa:	f5 e1       	ldi	r31, 0x15	; 21
    5bfc:	83 e1       	ldi	r24, 0x13	; 19
    5bfe:	92 e0       	ldi	r25, 0x02	; 2
    5c00:	91 83       	std	Z+1, r25	; 0x01
    5c02:	80 83       	st	Z, r24
    5c04:	93 83       	std	Z+3, r25	; 0x03
    5c06:	82 83       	std	Z+2, r24	; 0x02
    5c08:	0f 91       	pop	r16
    5c0a:	ef 90       	pop	r14
    5c0c:	cf 90       	pop	r12
    5c0e:	af 90       	pop	r10
    5c10:	9f 90       	pop	r9
    5c12:	8f 90       	pop	r8
    5c14:	08 95       	ret

00005c16 <_callBack>:
    5c16:	e0 91 a3 15 	lds	r30, 0x15A3	; 0x8015a3 <_callBackFunction>
    5c1a:	f0 91 a4 15 	lds	r31, 0x15A4	; 0x8015a4 <_callBackFunction+0x1>
    5c1e:	30 97       	sbiw	r30, 0x00	; 0
    5c20:	09 f0       	breq	.+2      	; 0x5c24 <_callBack+0xe>
    5c22:	19 95       	eicall
    5c24:	08 95       	ret

00005c26 <_tsl2591TwiCallback>:
    5c26:	64 50       	subi	r22, 0x04	; 4
    5c28:	62 30       	cpi	r22, 0x02	; 2
    5c2a:	08 f0       	brcs	.+2      	; 0x5c2e <_tsl2591TwiCallback+0x8>
    5c2c:	3b c0       	rjmp	.+118    	; 0x5ca4 <_tsl2591TwiCallback+0x7e>
    5c2e:	20 91 a2 15 	lds	r18, 0x15A2	; 0x8015a2 <_nextState>
    5c32:	22 30       	cpi	r18, 0x02	; 2
    5c34:	79 f0       	breq	.+30     	; 0x5c54 <_tsl2591TwiCallback+0x2e>
    5c36:	18 f4       	brcc	.+6      	; 0x5c3e <_tsl2591TwiCallback+0x18>
    5c38:	21 30       	cpi	r18, 0x01	; 1
    5c3a:	31 f0       	breq	.+12     	; 0x5c48 <_tsl2591TwiCallback+0x22>
    5c3c:	30 c0       	rjmp	.+96     	; 0x5c9e <_tsl2591TwiCallback+0x78>
    5c3e:	23 30       	cpi	r18, 0x03	; 3
    5c40:	81 f0       	breq	.+32     	; 0x5c62 <_tsl2591TwiCallback+0x3c>
    5c42:	24 30       	cpi	r18, 0x04	; 4
    5c44:	a1 f0       	breq	.+40     	; 0x5c6e <_tsl2591TwiCallback+0x48>
    5c46:	2b c0       	rjmp	.+86     	; 0x5c9e <_tsl2591TwiCallback+0x78>
    5c48:	22 e0       	ldi	r18, 0x02	; 2
    5c4a:	20 93 a2 15 	sts	0x15A2, r18	; 0x8015a2 <_nextState>
    5c4e:	61 e0       	ldi	r22, 0x01	; 1
    5c50:	10 c2       	rjmp	.+1056   	; 0x6072 <twiReceive>
    5c52:	08 95       	ret
    5c54:	fa 01       	movw	r30, r20
    5c56:	80 81       	ld	r24, Z
    5c58:	80 93 9f 15 	sts	0x159F, r24	; 0x80159f <_deviceId>
    5c5c:	82 e0       	ldi	r24, 0x02	; 2
    5c5e:	db cf       	rjmp	.-74     	; 0x5c16 <_callBack>
    5c60:	08 95       	ret
    5c62:	24 e0       	ldi	r18, 0x04	; 4
    5c64:	20 93 a2 15 	sts	0x15A2, r18	; 0x8015a2 <_nextState>
    5c68:	64 e0       	ldi	r22, 0x04	; 4
    5c6a:	03 c2       	rjmp	.+1030   	; 0x6072 <twiReceive>
    5c6c:	08 95       	ret
    5c6e:	fa 01       	movw	r30, r20
    5c70:	81 81       	ldd	r24, Z+1	; 0x01
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	98 2f       	mov	r25, r24
    5c76:	88 27       	eor	r24, r24
    5c78:	20 81       	ld	r18, Z
    5c7a:	82 2b       	or	r24, r18
    5c7c:	90 93 9e 15 	sts	0x159E, r25	; 0x80159e <_fullSpectrumRaw+0x1>
    5c80:	80 93 9d 15 	sts	0x159D, r24	; 0x80159d <_fullSpectrumRaw>
    5c84:	83 81       	ldd	r24, Z+3	; 0x03
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	98 2f       	mov	r25, r24
    5c8a:	88 27       	eor	r24, r24
    5c8c:	22 81       	ldd	r18, Z+2	; 0x02
    5c8e:	82 2b       	or	r24, r18
    5c90:	90 93 9c 15 	sts	0x159C, r25	; 0x80159c <_infraredRaw+0x1>
    5c94:	80 93 9b 15 	sts	0x159B, r24	; 0x80159b <_infraredRaw>
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	bd cf       	rjmp	.-134    	; 0x5c16 <_callBack>
    5c9c:	08 95       	ret
    5c9e:	80 e0       	ldi	r24, 0x00	; 0
    5ca0:	ba cf       	rjmp	.-140    	; 0x5c16 <_callBack>
    5ca2:	08 95       	ret
    5ca4:	10 92 a2 15 	sts	0x15A2, r1	; 0x8015a2 <_nextState>
    5ca8:	86 e0       	ldi	r24, 0x06	; 6
    5caa:	b5 cf       	rjmp	.-150    	; 0x5c16 <_callBack>
    5cac:	08 95       	ret

00005cae <_twiTransmit>:
    5cae:	20 91 a5 15 	lds	r18, 0x15A5	; 0x8015a5 <_twiHandler>
    5cb2:	30 91 a6 15 	lds	r19, 0x15A6	; 0x8015a6 <_twiHandler+0x1>
    5cb6:	21 15       	cp	r18, r1
    5cb8:	31 05       	cpc	r19, r1
    5cba:	41 f0       	breq	.+16     	; 0x5ccc <_twiTransmit+0x1e>
    5cbc:	46 2f       	mov	r20, r22
    5cbe:	bc 01       	movw	r22, r24
    5cc0:	c9 01       	movw	r24, r18
    5cc2:	8b d1       	rcall	.+790    	; 0x5fda <twiTransmit>
    5cc4:	82 30       	cpi	r24, 0x02	; 2
    5cc6:	21 f0       	breq	.+8      	; 0x5cd0 <_twiTransmit+0x22>
    5cc8:	80 e0       	ldi	r24, 0x00	; 0
    5cca:	08 95       	ret
    5ccc:	87 e0       	ldi	r24, 0x07	; 7
    5cce:	08 95       	ret
    5cd0:	85 e0       	ldi	r24, 0x05	; 5
    5cd2:	08 95       	ret

00005cd4 <tsl2591_initialise>:
    5cd4:	0f 93       	push	r16
    5cd6:	1f 93       	push	r17
    5cd8:	90 93 a4 15 	sts	0x15A4, r25	; 0x8015a4 <_callBackFunction+0x1>
    5cdc:	80 93 a3 15 	sts	0x15A3, r24	; 0x8015a3 <_callBackFunction>
    5ce0:	03 e1       	ldi	r16, 0x13	; 19
    5ce2:	1e e2       	ldi	r17, 0x2E	; 46
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	34 e2       	ldi	r19, 0x24	; 36
    5ce8:	44 ef       	ldi	r20, 0xF4	; 244
    5cea:	50 e0       	ldi	r21, 0x00	; 0
    5cec:	60 e0       	ldi	r22, 0x00	; 0
    5cee:	89 e2       	ldi	r24, 0x29	; 41
    5cf0:	23 d1       	rcall	.+582    	; 0x5f38 <twiCreate>
    5cf2:	90 93 a6 15 	sts	0x15A6, r25	; 0x8015a6 <_twiHandler+0x1>
    5cf6:	80 93 a5 15 	sts	0x15A5, r24	; 0x8015a5 <_twiHandler>
    5cfa:	89 2b       	or	r24, r25
    5cfc:	11 f0       	breq	.+4      	; 0x5d02 <tsl2591_initialise+0x2e>
    5cfe:	80 e0       	ldi	r24, 0x00	; 0
    5d00:	01 c0       	rjmp	.+2      	; 0x5d04 <tsl2591_initialise+0x30>
    5d02:	88 e0       	ldi	r24, 0x08	; 8
    5d04:	1f 91       	pop	r17
    5d06:	0f 91       	pop	r16
    5d08:	08 95       	ret

00005d0a <tsl2591_enable>:
    5d0a:	cf 93       	push	r28
    5d0c:	df 93       	push	r29
    5d0e:	1f 92       	push	r1
    5d10:	1f 92       	push	r1
    5d12:	cd b7       	in	r28, 0x3d	; 61
    5d14:	de b7       	in	r29, 0x3e	; 62
    5d16:	80 ea       	ldi	r24, 0xA0	; 160
    5d18:	89 83       	std	Y+1, r24	; 0x01
    5d1a:	83 e0       	ldi	r24, 0x03	; 3
    5d1c:	8a 83       	std	Y+2, r24	; 0x02
    5d1e:	10 92 a2 15 	sts	0x15A2, r1	; 0x8015a2 <_nextState>
    5d22:	62 e0       	ldi	r22, 0x02	; 2
    5d24:	ce 01       	movw	r24, r28
    5d26:	01 96       	adiw	r24, 0x01	; 1
    5d28:	c2 df       	rcall	.-124    	; 0x5cae <_twiTransmit>
    5d2a:	0f 90       	pop	r0
    5d2c:	0f 90       	pop	r0
    5d2e:	df 91       	pop	r29
    5d30:	cf 91       	pop	r28
    5d32:	08 95       	ret

00005d34 <tsl2591_fetchData>:
    5d34:	cf 93       	push	r28
    5d36:	df 93       	push	r29
    5d38:	1f 92       	push	r1
    5d3a:	cd b7       	in	r28, 0x3d	; 61
    5d3c:	de b7       	in	r29, 0x3e	; 62
    5d3e:	84 eb       	ldi	r24, 0xB4	; 180
    5d40:	89 83       	std	Y+1, r24	; 0x01
    5d42:	83 e0       	ldi	r24, 0x03	; 3
    5d44:	80 93 a2 15 	sts	0x15A2, r24	; 0x8015a2 <_nextState>
    5d48:	61 e0       	ldi	r22, 0x01	; 1
    5d4a:	ce 01       	movw	r24, r28
    5d4c:	01 96       	adiw	r24, 0x01	; 1
    5d4e:	af df       	rcall	.-162    	; 0x5cae <_twiTransmit>
    5d50:	0f 90       	pop	r0
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	08 95       	ret

00005d58 <tsl2591_getLux>:
    5d58:	2f 92       	push	r2
    5d5a:	3f 92       	push	r3
    5d5c:	4f 92       	push	r4
    5d5e:	5f 92       	push	r5
    5d60:	6f 92       	push	r6
    5d62:	7f 92       	push	r7
    5d64:	8f 92       	push	r8
    5d66:	9f 92       	push	r9
    5d68:	af 92       	push	r10
    5d6a:	bf 92       	push	r11
    5d6c:	cf 92       	push	r12
    5d6e:	df 92       	push	r13
    5d70:	ef 92       	push	r14
    5d72:	ff 92       	push	r15
    5d74:	0f 93       	push	r16
    5d76:	1f 93       	push	r17
    5d78:	cf 93       	push	r28
    5d7a:	df 93       	push	r29
    5d7c:	c0 91 9b 15 	lds	r28, 0x159B	; 0x80159b <_infraredRaw>
    5d80:	d0 91 9c 15 	lds	r29, 0x159C	; 0x80159c <_infraredRaw+0x1>
    5d84:	cf 3f       	cpi	r28, 0xFF	; 255
    5d86:	2f ef       	ldi	r18, 0xFF	; 255
    5d88:	d2 07       	cpc	r29, r18
    5d8a:	41 f0       	breq	.+16     	; 0x5d9c <tsl2591_getLux+0x44>
    5d8c:	60 91 9d 15 	lds	r22, 0x159D	; 0x80159d <_fullSpectrumRaw>
    5d90:	70 91 9e 15 	lds	r23, 0x159E	; 0x80159e <_fullSpectrumRaw+0x1>
    5d94:	6f 3f       	cpi	r22, 0xFF	; 255
    5d96:	ef ef       	ldi	r30, 0xFF	; 255
    5d98:	7e 07       	cpc	r23, r30
    5d9a:	59 f4       	brne	.+22     	; 0x5db2 <tsl2591_getLux+0x5a>
    5d9c:	4f ef       	ldi	r20, 0xFF	; 255
    5d9e:	5f ef       	ldi	r21, 0xFF	; 255
    5da0:	6f e7       	ldi	r22, 0x7F	; 127
    5da2:	7f e7       	ldi	r23, 0x7F	; 127
    5da4:	fc 01       	movw	r30, r24
    5da6:	40 83       	st	Z, r20
    5da8:	51 83       	std	Z+1, r21	; 0x01
    5daa:	62 83       	std	Z+2, r22	; 0x02
    5dac:	73 83       	std	Z+3, r23	; 0x03
    5dae:	83 e0       	ldi	r24, 0x03	; 3
    5db0:	9f c0       	rjmp	.+318    	; 0x5ef0 <tsl2591_getLux+0x198>
    5db2:	1c 01       	movw	r2, r24
    5db4:	80 e0       	ldi	r24, 0x00	; 0
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	62 d6       	rcall	.+3268   	; 0x6a7e <__floatunsisf>
    5dba:	2b 01       	movw	r4, r22
    5dbc:	3c 01       	movw	r6, r24
    5dbe:	be 01       	movw	r22, r28
    5dc0:	80 e0       	ldi	r24, 0x00	; 0
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	5c d6       	rcall	.+3256   	; 0x6a7e <__floatunsisf>
    5dc6:	4b 01       	movw	r8, r22
    5dc8:	5c 01       	movw	r10, r24
    5dca:	80 91 a0 15 	lds	r24, 0x15A0	; 0x8015a0 <_currentIntegrationTime>
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	01 96       	adiw	r24, 0x01	; 1
    5dd2:	24 e6       	ldi	r18, 0x64	; 100
    5dd4:	28 9f       	mul	r18, r24
    5dd6:	b0 01       	movw	r22, r0
    5dd8:	29 9f       	mul	r18, r25
    5dda:	70 0d       	add	r23, r0
    5ddc:	11 24       	eor	r1, r1
    5dde:	80 91 a1 15 	lds	r24, 0x15A1	; 0x8015a1 <_currentGain>
    5de2:	80 32       	cpi	r24, 0x20	; 32
    5de4:	69 f0       	breq	.+26     	; 0x5e00 <tsl2591_getLux+0xa8>
    5de6:	80 33       	cpi	r24, 0x30	; 48
    5de8:	a1 f0       	breq	.+40     	; 0x5e12 <tsl2591_getLux+0xba>
    5dea:	80 31       	cpi	r24, 0x10	; 16
    5dec:	e1 f4       	brne	.+56     	; 0x5e26 <tsl2591_getLux+0xce>
    5dee:	0f 2e       	mov	r0, r31
    5df0:	c1 2c       	mov	r12, r1
    5df2:	d1 2c       	mov	r13, r1
    5df4:	f8 ec       	ldi	r31, 0xC8	; 200
    5df6:	ef 2e       	mov	r14, r31
    5df8:	f1 e4       	ldi	r31, 0x41	; 65
    5dfa:	ff 2e       	mov	r15, r31
    5dfc:	f0 2d       	mov	r31, r0
    5dfe:	1b c0       	rjmp	.+54     	; 0x5e36 <tsl2591_getLux+0xde>
    5e00:	0f 2e       	mov	r0, r31
    5e02:	c1 2c       	mov	r12, r1
    5e04:	d1 2c       	mov	r13, r1
    5e06:	f6 ed       	ldi	r31, 0xD6	; 214
    5e08:	ef 2e       	mov	r14, r31
    5e0a:	f3 e4       	ldi	r31, 0x43	; 67
    5e0c:	ff 2e       	mov	r15, r31
    5e0e:	f0 2d       	mov	r31, r0
    5e10:	12 c0       	rjmp	.+36     	; 0x5e36 <tsl2591_getLux+0xde>
    5e12:	0f 2e       	mov	r0, r31
    5e14:	c1 2c       	mov	r12, r1
    5e16:	f0 e5       	ldi	r31, 0x50	; 80
    5e18:	df 2e       	mov	r13, r31
    5e1a:	fa e1       	ldi	r31, 0x1A	; 26
    5e1c:	ef 2e       	mov	r14, r31
    5e1e:	f6 e4       	ldi	r31, 0x46	; 70
    5e20:	ff 2e       	mov	r15, r31
    5e22:	f0 2d       	mov	r31, r0
    5e24:	08 c0       	rjmp	.+16     	; 0x5e36 <tsl2591_getLux+0xde>
    5e26:	0f 2e       	mov	r0, r31
    5e28:	c1 2c       	mov	r12, r1
    5e2a:	d1 2c       	mov	r13, r1
    5e2c:	f0 e8       	ldi	r31, 0x80	; 128
    5e2e:	ef 2e       	mov	r14, r31
    5e30:	ff e3       	ldi	r31, 0x3F	; 63
    5e32:	ff 2e       	mov	r15, r31
    5e34:	f0 2d       	mov	r31, r0
    5e36:	07 2e       	mov	r0, r23
    5e38:	00 0c       	add	r0, r0
    5e3a:	88 0b       	sbc	r24, r24
    5e3c:	99 0b       	sbc	r25, r25
    5e3e:	21 d6       	rcall	.+3138   	; 0x6a82 <__floatsisf>
    5e40:	a7 01       	movw	r20, r14
    5e42:	96 01       	movw	r18, r12
    5e44:	0e 94 44 23 	call	0x4688	; 0x4688 <__mulsf3>
    5e48:	20 e0       	ldi	r18, 0x00	; 0
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	4c ec       	ldi	r20, 0xCC	; 204
    5e4e:	53 e4       	ldi	r21, 0x43	; 67
    5e50:	a5 d5       	rcall	.+2890   	; 0x699c <__divsf3>
    5e52:	6b 01       	movw	r12, r22
    5e54:	7c 01       	movw	r14, r24
    5e56:	25 e8       	ldi	r18, 0x85	; 133
    5e58:	3b ee       	ldi	r19, 0xEB	; 235
    5e5a:	41 ed       	ldi	r20, 0xD1	; 209
    5e5c:	5f e3       	ldi	r21, 0x3F	; 63
    5e5e:	c5 01       	movw	r24, r10
    5e60:	b4 01       	movw	r22, r8
    5e62:	0e 94 44 23 	call	0x4688	; 0x4688 <__mulsf3>
    5e66:	9b 01       	movw	r18, r22
    5e68:	ac 01       	movw	r20, r24
    5e6a:	c3 01       	movw	r24, r6
    5e6c:	b2 01       	movw	r22, r4
    5e6e:	0e 94 a7 23 	call	0x474e	; 0x474e <__subsf3>
    5e72:	a7 01       	movw	r20, r14
    5e74:	96 01       	movw	r18, r12
    5e76:	92 d5       	rcall	.+2852   	; 0x699c <__divsf3>
    5e78:	16 2f       	mov	r17, r22
    5e7a:	d7 2f       	mov	r29, r23
    5e7c:	c8 2f       	mov	r28, r24
    5e7e:	09 2f       	mov	r16, r25
    5e80:	2d e3       	ldi	r18, 0x3D	; 61
    5e82:	3a e0       	ldi	r19, 0x0A	; 10
    5e84:	47 e1       	ldi	r20, 0x17	; 23
    5e86:	5f e3       	ldi	r21, 0x3F	; 63
    5e88:	c3 01       	movw	r24, r6
    5e8a:	b2 01       	movw	r22, r4
    5e8c:	0e 94 44 23 	call	0x4688	; 0x4688 <__mulsf3>
    5e90:	2b 01       	movw	r4, r22
    5e92:	3c 01       	movw	r6, r24
    5e94:	26 ef       	ldi	r18, 0xF6	; 246
    5e96:	38 e2       	ldi	r19, 0x28	; 40
    5e98:	4c e5       	ldi	r20, 0x5C	; 92
    5e9a:	5f e3       	ldi	r21, 0x3F	; 63
    5e9c:	c5 01       	movw	r24, r10
    5e9e:	b4 01       	movw	r22, r8
    5ea0:	0e 94 44 23 	call	0x4688	; 0x4688 <__mulsf3>
    5ea4:	9b 01       	movw	r18, r22
    5ea6:	ac 01       	movw	r20, r24
    5ea8:	c3 01       	movw	r24, r6
    5eaa:	b2 01       	movw	r22, r4
    5eac:	0e 94 a7 23 	call	0x474e	; 0x474e <__subsf3>
    5eb0:	a7 01       	movw	r20, r14
    5eb2:	96 01       	movw	r18, r12
    5eb4:	73 d5       	rcall	.+2790   	; 0x699c <__divsf3>
    5eb6:	c6 2e       	mov	r12, r22
    5eb8:	d7 2e       	mov	r13, r23
    5eba:	e8 2e       	mov	r14, r24
    5ebc:	f9 2e       	mov	r15, r25
    5ebe:	26 2f       	mov	r18, r22
    5ec0:	37 2f       	mov	r19, r23
    5ec2:	48 2f       	mov	r20, r24
    5ec4:	59 2f       	mov	r21, r25
    5ec6:	61 2f       	mov	r22, r17
    5ec8:	7d 2f       	mov	r23, r29
    5eca:	8c 2f       	mov	r24, r28
    5ecc:	90 2f       	mov	r25, r16
    5ece:	14 d6       	rcall	.+3112   	; 0x6af8 <__gesf2>
    5ed0:	18 16       	cp	r1, r24
    5ed2:	24 f0       	brlt	.+8      	; 0x5edc <tsl2591_getLux+0x184>
    5ed4:	1c 2d       	mov	r17, r12
    5ed6:	dd 2d       	mov	r29, r13
    5ed8:	ce 2d       	mov	r28, r14
    5eda:	0f 2d       	mov	r16, r15
    5edc:	41 2f       	mov	r20, r17
    5ede:	5d 2f       	mov	r21, r29
    5ee0:	6c 2f       	mov	r22, r28
    5ee2:	70 2f       	mov	r23, r16
    5ee4:	f1 01       	movw	r30, r2
    5ee6:	40 83       	st	Z, r20
    5ee8:	51 83       	std	Z+1, r21	; 0x01
    5eea:	62 83       	std	Z+2, r22	; 0x02
    5eec:	73 83       	std	Z+3, r23	; 0x03
    5eee:	80 e0       	ldi	r24, 0x00	; 0
    5ef0:	df 91       	pop	r29
    5ef2:	cf 91       	pop	r28
    5ef4:	1f 91       	pop	r17
    5ef6:	0f 91       	pop	r16
    5ef8:	ff 90       	pop	r15
    5efa:	ef 90       	pop	r14
    5efc:	df 90       	pop	r13
    5efe:	cf 90       	pop	r12
    5f00:	bf 90       	pop	r11
    5f02:	af 90       	pop	r10
    5f04:	9f 90       	pop	r9
    5f06:	8f 90       	pop	r8
    5f08:	7f 90       	pop	r7
    5f0a:	6f 90       	pop	r6
    5f0c:	5f 90       	pop	r5
    5f0e:	4f 90       	pop	r4
    5f10:	3f 90       	pop	r3
    5f12:	2f 90       	pop	r2
    5f14:	08 95       	ret

00005f16 <_initTwiInterface>:
    5f16:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <_twiIsInitiated>
    5f1a:	81 11       	cpse	r24, r1
    5f1c:	0c c0       	rjmp	.+24     	; 0x5f36 <_initTwiInterface+0x20>
    5f1e:	8c e0       	ldi	r24, 0x0C	; 12
    5f20:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5f24:	8f ef       	ldi	r24, 0xFF	; 255
    5f26:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5f2a:	84 e0       	ldi	r24, 0x04	; 4
    5f2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f30:	81 e0       	ldi	r24, 0x01	; 1
    5f32:	80 93 b5 15 	sts	0x15B5, r24	; 0x8015b5 <_twiIsInitiated>
    5f36:	08 95       	ret

00005f38 <twiCreate>:
    5f38:	af 92       	push	r10
    5f3a:	bf 92       	push	r11
    5f3c:	cf 92       	push	r12
    5f3e:	df 92       	push	r13
    5f40:	ef 92       	push	r14
    5f42:	ff 92       	push	r15
    5f44:	0f 93       	push	r16
    5f46:	1f 93       	push	r17
    5f48:	cf 93       	push	r28
    5f4a:	df 93       	push	r29
    5f4c:	a8 2e       	mov	r10, r24
    5f4e:	b6 2e       	mov	r11, r22
    5f50:	69 01       	movw	r12, r18
    5f52:	7a 01       	movw	r14, r20
    5f54:	84 e0       	ldi	r24, 0x04	; 4
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	27 d6       	rcall	.+3150   	; 0x6ba8 <malloc>
    5f5a:	ec 01       	movw	r28, r24
    5f5c:	89 2b       	or	r24, r25
    5f5e:	61 f1       	breq	.+88     	; 0x5fb8 <twiCreate+0x80>
    5f60:	a8 82       	st	Y, r10
    5f62:	81 e0       	ldi	r24, 0x01	; 1
    5f64:	b8 12       	cpse	r11, r24
    5f66:	12 c0       	rjmp	.+36     	; 0x5f8c <twiCreate+0x54>
    5f68:	c7 01       	movw	r24, r14
    5f6a:	b6 01       	movw	r22, r12
    5f6c:	20 ea       	ldi	r18, 0xA0	; 160
    5f6e:	36 e8       	ldi	r19, 0x86	; 134
    5f70:	41 e0       	ldi	r20, 0x01	; 1
    5f72:	50 e0       	ldi	r21, 0x00	; 0
    5f74:	c6 d5       	rcall	.+2956   	; 0x6b02 <__udivmodsi4>
    5f76:	da 01       	movw	r26, r20
    5f78:	c9 01       	movw	r24, r18
    5f7a:	40 97       	sbiw	r24, 0x10	; 16
    5f7c:	a1 09       	sbc	r26, r1
    5f7e:	b1 09       	sbc	r27, r1
    5f80:	b6 95       	lsr	r27
    5f82:	a7 95       	ror	r26
    5f84:	97 95       	ror	r25
    5f86:	87 95       	ror	r24
    5f88:	89 83       	std	Y+1, r24	; 0x01
    5f8a:	11 c0       	rjmp	.+34     	; 0x5fae <twiCreate+0x76>
    5f8c:	c7 01       	movw	r24, r14
    5f8e:	b6 01       	movw	r22, r12
    5f90:	20 e8       	ldi	r18, 0x80	; 128
    5f92:	3a e1       	ldi	r19, 0x1A	; 26
    5f94:	46 e0       	ldi	r20, 0x06	; 6
    5f96:	50 e0       	ldi	r21, 0x00	; 0
    5f98:	b4 d5       	rcall	.+2920   	; 0x6b02 <__udivmodsi4>
    5f9a:	da 01       	movw	r26, r20
    5f9c:	c9 01       	movw	r24, r18
    5f9e:	40 97       	sbiw	r24, 0x10	; 16
    5fa0:	a1 09       	sbc	r26, r1
    5fa2:	b1 09       	sbc	r27, r1
    5fa4:	b6 95       	lsr	r27
    5fa6:	a7 95       	ror	r26
    5fa8:	97 95       	ror	r25
    5faa:	87 95       	ror	r24
    5fac:	89 83       	std	Y+1, r24	; 0x01
    5fae:	1b 83       	std	Y+3, r17	; 0x03
    5fb0:	0a 83       	std	Y+2, r16	; 0x02
    5fb2:	8c 2f       	mov	r24, r28
    5fb4:	9d 2f       	mov	r25, r29
    5fb6:	02 c0       	rjmp	.+4      	; 0x5fbc <twiCreate+0x84>
    5fb8:	80 e0       	ldi	r24, 0x00	; 0
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	df 91       	pop	r29
    5fbe:	cf 91       	pop	r28
    5fc0:	1f 91       	pop	r17
    5fc2:	0f 91       	pop	r16
    5fc4:	ff 90       	pop	r15
    5fc6:	ef 90       	pop	r14
    5fc8:	df 90       	pop	r13
    5fca:	cf 90       	pop	r12
    5fcc:	bf 90       	pop	r11
    5fce:	af 90       	pop	r10
    5fd0:	08 95       	ret

00005fd2 <twiIsBusy>:
    5fd2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fd6:	81 70       	andi	r24, 0x01	; 1
    5fd8:	08 95       	ret

00005fda <twiTransmit>:
    5fda:	ff 92       	push	r15
    5fdc:	0f 93       	push	r16
    5fde:	1f 93       	push	r17
    5fe0:	cf 93       	push	r28
    5fe2:	df 93       	push	r29
    5fe4:	00 97       	sbiw	r24, 0x00	; 0
    5fe6:	d1 f1       	breq	.+116    	; 0x605c <twiTransmit+0x82>
    5fe8:	4a 30       	cpi	r20, 0x0A	; 10
    5fea:	d0 f5       	brcc	.+116    	; 0x6060 <twiTransmit+0x86>
    5fec:	f4 2e       	mov	r15, r20
    5fee:	8b 01       	movw	r16, r22
    5ff0:	ec 01       	movw	r28, r24
    5ff2:	ef df       	rcall	.-34     	; 0x5fd2 <twiIsBusy>
    5ff4:	81 11       	cpse	r24, r1
    5ff6:	36 c0       	rjmp	.+108    	; 0x6064 <twiTransmit+0x8a>
    5ff8:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <_twiCurrentHandler>
    5ffc:	90 91 a9 15 	lds	r25, 0x15A9	; 0x8015a9 <_twiCurrentHandler+0x1>
    6000:	c8 17       	cp	r28, r24
    6002:	d9 07       	cpc	r29, r25
    6004:	41 f0       	breq	.+16     	; 0x6016 <twiTransmit+0x3c>
    6006:	87 df       	rcall	.-242    	; 0x5f16 <_initTwiInterface>
    6008:	89 81       	ldd	r24, Y+1	; 0x01
    600a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    600e:	d0 93 a9 15 	sts	0x15A9, r29	; 0x8015a9 <_twiCurrentHandler+0x1>
    6012:	c0 93 a8 15 	sts	0x15A8, r28	; 0x8015a8 <_twiCurrentHandler>
    6016:	81 e0       	ldi	r24, 0x01	; 1
    6018:	8f 0d       	add	r24, r15
    601a:	80 93 aa 15 	sts	0x15AA, r24	; 0x8015aa <_twiMessageLen>
    601e:	88 81       	ld	r24, Y
    6020:	88 0f       	add	r24, r24
    6022:	80 93 ab 15 	sts	0x15AB, r24	; 0x8015ab <_twiMessageBuffer>
    6026:	ff 20       	and	r15, r15
    6028:	89 f0       	breq	.+34     	; 0x604c <twiTransmit+0x72>
    602a:	f8 01       	movw	r30, r16
    602c:	ac ea       	ldi	r26, 0xAC	; 172
    602e:	b5 e1       	ldi	r27, 0x15	; 21
    6030:	4f ef       	ldi	r20, 0xFF	; 255
    6032:	4f 0d       	add	r20, r15
    6034:	64 2f       	mov	r22, r20
    6036:	70 e0       	ldi	r23, 0x00	; 0
    6038:	cb 01       	movw	r24, r22
    603a:	01 96       	adiw	r24, 0x01	; 1
    603c:	b8 01       	movw	r22, r16
    603e:	68 0f       	add	r22, r24
    6040:	79 1f       	adc	r23, r25
    6042:	81 91       	ld	r24, Z+
    6044:	8d 93       	st	X+, r24
    6046:	e6 17       	cp	r30, r22
    6048:	f7 07       	cpc	r31, r23
    604a:	d9 f7       	brne	.-10     	; 0x6042 <twiTransmit+0x68>
    604c:	88 ef       	ldi	r24, 0xF8	; 248
    604e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6052:	85 ea       	ldi	r24, 0xA5	; 165
    6054:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6058:	84 e0       	ldi	r24, 0x04	; 4
    605a:	05 c0       	rjmp	.+10     	; 0x6066 <twiTransmit+0x8c>
    605c:	86 e0       	ldi	r24, 0x06	; 6
    605e:	03 c0       	rjmp	.+6      	; 0x6066 <twiTransmit+0x8c>
    6060:	87 e0       	ldi	r24, 0x07	; 7
    6062:	01 c0       	rjmp	.+2      	; 0x6066 <twiTransmit+0x8c>
    6064:	82 e0       	ldi	r24, 0x02	; 2
    6066:	df 91       	pop	r29
    6068:	cf 91       	pop	r28
    606a:	1f 91       	pop	r17
    606c:	0f 91       	pop	r16
    606e:	ff 90       	pop	r15
    6070:	08 95       	ret

00006072 <twiReceive>:
    6072:	1f 93       	push	r17
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	00 97       	sbiw	r24, 0x00	; 0
    607a:	29 f1       	breq	.+74     	; 0x60c6 <twiReceive+0x54>
    607c:	6b 30       	cpi	r22, 0x0B	; 11
    607e:	28 f5       	brcc	.+74     	; 0x60ca <twiReceive+0x58>
    6080:	16 2f       	mov	r17, r22
    6082:	ec 01       	movw	r28, r24
    6084:	a6 df       	rcall	.-180    	; 0x5fd2 <twiIsBusy>
    6086:	81 11       	cpse	r24, r1
    6088:	22 c0       	rjmp	.+68     	; 0x60ce <twiReceive+0x5c>
    608a:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <_twiCurrentHandler>
    608e:	90 91 a9 15 	lds	r25, 0x15A9	; 0x8015a9 <_twiCurrentHandler+0x1>
    6092:	c8 17       	cp	r28, r24
    6094:	d9 07       	cpc	r29, r25
    6096:	41 f0       	breq	.+16     	; 0x60a8 <twiReceive+0x36>
    6098:	3e df       	rcall	.-388    	; 0x5f16 <_initTwiInterface>
    609a:	89 81       	ldd	r24, Y+1	; 0x01
    609c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    60a0:	d0 93 a9 15 	sts	0x15A9, r29	; 0x8015a9 <_twiCurrentHandler+0x1>
    60a4:	c0 93 a8 15 	sts	0x15A8, r28	; 0x8015a8 <_twiCurrentHandler>
    60a8:	10 93 aa 15 	sts	0x15AA, r17	; 0x8015aa <_twiMessageLen>
    60ac:	88 81       	ld	r24, Y
    60ae:	88 0f       	add	r24, r24
    60b0:	81 60       	ori	r24, 0x01	; 1
    60b2:	80 93 ab 15 	sts	0x15AB, r24	; 0x8015ab <_twiMessageBuffer>
    60b6:	88 ef       	ldi	r24, 0xF8	; 248
    60b8:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    60bc:	85 ea       	ldi	r24, 0xA5	; 165
    60be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60c2:	85 e0       	ldi	r24, 0x05	; 5
    60c4:	05 c0       	rjmp	.+10     	; 0x60d0 <twiReceive+0x5e>
    60c6:	86 e0       	ldi	r24, 0x06	; 6
    60c8:	03 c0       	rjmp	.+6      	; 0x60d0 <twiReceive+0x5e>
    60ca:	87 e0       	ldi	r24, 0x07	; 7
    60cc:	01 c0       	rjmp	.+2      	; 0x60d0 <twiReceive+0x5e>
    60ce:	82 e0       	ldi	r24, 0x02	; 2
    60d0:	df 91       	pop	r29
    60d2:	cf 91       	pop	r28
    60d4:	1f 91       	pop	r17
    60d6:	08 95       	ret

000060d8 <__vector_39>:
    60d8:	1f 92       	push	r1
    60da:	0f 92       	push	r0
    60dc:	0f b6       	in	r0, 0x3f	; 63
    60de:	0f 92       	push	r0
    60e0:	11 24       	eor	r1, r1
    60e2:	0b b6       	in	r0, 0x3b	; 59
    60e4:	0f 92       	push	r0
    60e6:	2f 93       	push	r18
    60e8:	3f 93       	push	r19
    60ea:	4f 93       	push	r20
    60ec:	5f 93       	push	r21
    60ee:	6f 93       	push	r22
    60f0:	7f 93       	push	r23
    60f2:	8f 93       	push	r24
    60f4:	9f 93       	push	r25
    60f6:	af 93       	push	r26
    60f8:	bf 93       	push	r27
    60fa:	ef 93       	push	r30
    60fc:	ff 93       	push	r31
    60fe:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6102:	8e 2f       	mov	r24, r30
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	fc 01       	movw	r30, r24
    6108:	38 97       	sbiw	r30, 0x08	; 8
    610a:	e1 35       	cpi	r30, 0x51	; 81
    610c:	f1 05       	cpc	r31, r1
    610e:	08 f0       	brcs	.+2      	; 0x6112 <__vector_39+0x3a>
    6110:	75 c0       	rjmp	.+234    	; 0x61fc <__vector_39+0x124>
    6112:	88 27       	eor	r24, r24
    6114:	e4 58       	subi	r30, 0x84	; 132
    6116:	ff 4f       	sbci	r31, 0xFF	; 255
    6118:	8f 4f       	sbci	r24, 0xFF	; 255
    611a:	15 c5       	rjmp	.+2602   	; 0x6b46 <__tablejump2__>
    611c:	10 92 a7 15 	sts	0x15A7, r1	; 0x8015a7 <_index.1885>
    6120:	e0 91 a7 15 	lds	r30, 0x15A7	; 0x8015a7 <_index.1885>
    6124:	80 91 aa 15 	lds	r24, 0x15AA	; 0x8015aa <_twiMessageLen>
    6128:	e8 17       	cp	r30, r24
    612a:	70 f4       	brcc	.+28     	; 0x6148 <__vector_39+0x70>
    612c:	81 e0       	ldi	r24, 0x01	; 1
    612e:	8e 0f       	add	r24, r30
    6130:	80 93 a7 15 	sts	0x15A7, r24	; 0x8015a7 <_index.1885>
    6134:	f0 e0       	ldi	r31, 0x00	; 0
    6136:	e5 55       	subi	r30, 0x55	; 85
    6138:	fa 4e       	sbci	r31, 0xEA	; 234
    613a:	80 81       	ld	r24, Z
    613c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6140:	85 e8       	ldi	r24, 0x85	; 133
    6142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6146:	72 c0       	rjmp	.+228    	; 0x622c <__vector_39+0x154>
    6148:	84 e9       	ldi	r24, 0x94	; 148
    614a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    614e:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <_twiCurrentHandler>
    6152:	90 91 a9 15 	lds	r25, 0x15A9	; 0x8015a9 <_twiCurrentHandler+0x1>
    6156:	dc 01       	movw	r26, r24
    6158:	12 96       	adiw	r26, 0x02	; 2
    615a:	ed 91       	ld	r30, X+
    615c:	fc 91       	ld	r31, X
    615e:	13 97       	sbiw	r26, 0x03	; 3
    6160:	30 97       	sbiw	r30, 0x00	; 0
    6162:	09 f4       	brne	.+2      	; 0x6166 <__vector_39+0x8e>
    6164:	63 c0       	rjmp	.+198    	; 0x622c <__vector_39+0x154>
    6166:	20 e0       	ldi	r18, 0x00	; 0
    6168:	40 e0       	ldi	r20, 0x00	; 0
    616a:	50 e0       	ldi	r21, 0x00	; 0
    616c:	64 e0       	ldi	r22, 0x04	; 4
    616e:	19 95       	eicall
    6170:	5d c0       	rjmp	.+186    	; 0x622c <__vector_39+0x154>
    6172:	e0 91 a7 15 	lds	r30, 0x15A7	; 0x8015a7 <_index.1885>
    6176:	81 e0       	ldi	r24, 0x01	; 1
    6178:	8e 0f       	add	r24, r30
    617a:	80 93 a7 15 	sts	0x15A7, r24	; 0x8015a7 <_index.1885>
    617e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6182:	f0 e0       	ldi	r31, 0x00	; 0
    6184:	e5 55       	subi	r30, 0x55	; 85
    6186:	fa 4e       	sbci	r31, 0xEA	; 234
    6188:	80 83       	st	Z, r24
    618a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    618e:	80 34       	cpi	r24, 0x40	; 64
    6190:	11 f4       	brne	.+4      	; 0x6196 <__vector_39+0xbe>
    6192:	10 92 a7 15 	sts	0x15A7, r1	; 0x8015a7 <_index.1885>
    6196:	20 91 a7 15 	lds	r18, 0x15A7	; 0x8015a7 <_index.1885>
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	80 91 aa 15 	lds	r24, 0x15AA	; 0x8015aa <_twiMessageLen>
    61a0:	90 e0       	ldi	r25, 0x00	; 0
    61a2:	01 97       	sbiw	r24, 0x01	; 1
    61a4:	28 17       	cp	r18, r24
    61a6:	39 07       	cpc	r19, r25
    61a8:	24 f4       	brge	.+8      	; 0x61b2 <__vector_39+0xda>
    61aa:	85 ec       	ldi	r24, 0xC5	; 197
    61ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61b0:	3d c0       	rjmp	.+122    	; 0x622c <__vector_39+0x154>
    61b2:	85 e8       	ldi	r24, 0x85	; 133
    61b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61b8:	39 c0       	rjmp	.+114    	; 0x622c <__vector_39+0x154>
    61ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    61be:	e0 91 a7 15 	lds	r30, 0x15A7	; 0x8015a7 <_index.1885>
    61c2:	f0 e0       	ldi	r31, 0x00	; 0
    61c4:	e5 55       	subi	r30, 0x55	; 85
    61c6:	fa 4e       	sbci	r31, 0xEA	; 234
    61c8:	80 83       	st	Z, r24
    61ca:	84 e9       	ldi	r24, 0x94	; 148
    61cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61d0:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <_twiCurrentHandler>
    61d4:	90 91 a9 15 	lds	r25, 0x15A9	; 0x8015a9 <_twiCurrentHandler+0x1>
    61d8:	dc 01       	movw	r26, r24
    61da:	12 96       	adiw	r26, 0x02	; 2
    61dc:	ed 91       	ld	r30, X+
    61de:	fc 91       	ld	r31, X
    61e0:	13 97       	sbiw	r26, 0x03	; 3
    61e2:	30 97       	sbiw	r30, 0x00	; 0
    61e4:	19 f1       	breq	.+70     	; 0x622c <__vector_39+0x154>
    61e6:	20 91 aa 15 	lds	r18, 0x15AA	; 0x8015aa <_twiMessageLen>
    61ea:	4b ea       	ldi	r20, 0xAB	; 171
    61ec:	55 e1       	ldi	r21, 0x15	; 21
    61ee:	65 e0       	ldi	r22, 0x05	; 5
    61f0:	19 95       	eicall
    61f2:	1c c0       	rjmp	.+56     	; 0x622c <__vector_39+0x154>
    61f4:	85 ea       	ldi	r24, 0xA5	; 165
    61f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61fa:	18 c0       	rjmp	.+48     	; 0x622c <__vector_39+0x154>
    61fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6200:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6204:	84 e0       	ldi	r24, 0x04	; 4
    6206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    620a:	80 91 a8 15 	lds	r24, 0x15A8	; 0x8015a8 <_twiCurrentHandler>
    620e:	90 91 a9 15 	lds	r25, 0x15A9	; 0x8015a9 <_twiCurrentHandler+0x1>
    6212:	dc 01       	movw	r26, r24
    6214:	12 96       	adiw	r26, 0x02	; 2
    6216:	ed 91       	ld	r30, X+
    6218:	fc 91       	ld	r31, X
    621a:	13 97       	sbiw	r26, 0x03	; 3
    621c:	30 97       	sbiw	r30, 0x00	; 0
    621e:	31 f0       	breq	.+12     	; 0x622c <__vector_39+0x154>
    6220:	20 e0       	ldi	r18, 0x00	; 0
    6222:	40 e0       	ldi	r20, 0x00	; 0
    6224:	50 e0       	ldi	r21, 0x00	; 0
    6226:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    622a:	19 95       	eicall
    622c:	ff 91       	pop	r31
    622e:	ef 91       	pop	r30
    6230:	bf 91       	pop	r27
    6232:	af 91       	pop	r26
    6234:	9f 91       	pop	r25
    6236:	8f 91       	pop	r24
    6238:	7f 91       	pop	r23
    623a:	6f 91       	pop	r22
    623c:	5f 91       	pop	r21
    623e:	4f 91       	pop	r20
    6240:	3f 91       	pop	r19
    6242:	2f 91       	pop	r18
    6244:	0f 90       	pop	r0
    6246:	0b be       	out	0x3b, r0	; 59
    6248:	0f 90       	pop	r0
    624a:	0f be       	out	0x3f, r0	; 63
    624c:	0f 90       	pop	r0
    624e:	1f 90       	pop	r1
    6250:	18 95       	reti

00006252 <fifo_init>:
    6252:	fc 01       	movw	r30, r24
    6254:	41 11       	cpse	r20, r1
    6256:	01 c0       	rjmp	.+2      	; 0x625a <fifo_init+0x8>
    6258:	c8 d5       	rcall	.+2960   	; 0x6dea <abort>
    625a:	84 2f       	mov	r24, r20
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	9c 01       	movw	r18, r24
    6260:	21 50       	subi	r18, 0x01	; 1
    6262:	31 09       	sbc	r19, r1
    6264:	82 23       	and	r24, r18
    6266:	93 23       	and	r25, r19
    6268:	89 2b       	or	r24, r25
    626a:	09 f0       	breq	.+2      	; 0x626e <fifo_init+0x1c>
    626c:	be d5       	rcall	.+2940   	; 0x6dea <abort>
    626e:	41 38       	cpi	r20, 0x81	; 129
    6270:	08 f0       	brcs	.+2      	; 0x6274 <fifo_init+0x22>
    6272:	bb d5       	rcall	.+2934   	; 0x6dea <abort>
    6274:	12 82       	std	Z+2, r1	; 0x02
    6276:	13 82       	std	Z+3, r1	; 0x03
    6278:	44 83       	std	Z+4, r20	; 0x04
    627a:	44 0f       	add	r20, r20
    627c:	41 50       	subi	r20, 0x01	; 1
    627e:	45 83       	std	Z+5, r20	; 0x05
    6280:	71 83       	std	Z+1, r23	; 0x01
    6282:	60 83       	st	Z, r22
    6284:	80 e0       	ldi	r24, 0x00	; 0
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	08 95       	ret

0000628a <vfprintf>:
    628a:	2f 92       	push	r2
    628c:	3f 92       	push	r3
    628e:	4f 92       	push	r4
    6290:	5f 92       	push	r5
    6292:	6f 92       	push	r6
    6294:	7f 92       	push	r7
    6296:	8f 92       	push	r8
    6298:	9f 92       	push	r9
    629a:	af 92       	push	r10
    629c:	bf 92       	push	r11
    629e:	cf 92       	push	r12
    62a0:	df 92       	push	r13
    62a2:	ef 92       	push	r14
    62a4:	ff 92       	push	r15
    62a6:	0f 93       	push	r16
    62a8:	1f 93       	push	r17
    62aa:	cf 93       	push	r28
    62ac:	df 93       	push	r29
    62ae:	cd b7       	in	r28, 0x3d	; 61
    62b0:	de b7       	in	r29, 0x3e	; 62
    62b2:	60 97       	sbiw	r28, 0x10	; 16
    62b4:	0f b6       	in	r0, 0x3f	; 63
    62b6:	f8 94       	cli
    62b8:	de bf       	out	0x3e, r29	; 62
    62ba:	0f be       	out	0x3f, r0	; 63
    62bc:	cd bf       	out	0x3d, r28	; 61
    62be:	7c 01       	movw	r14, r24
    62c0:	1b 01       	movw	r2, r22
    62c2:	6a 01       	movw	r12, r20
    62c4:	fc 01       	movw	r30, r24
    62c6:	17 82       	std	Z+7, r1	; 0x07
    62c8:	16 82       	std	Z+6, r1	; 0x06
    62ca:	83 81       	ldd	r24, Z+3	; 0x03
    62cc:	81 ff       	sbrs	r24, 1
    62ce:	2a c3       	rjmp	.+1620   	; 0x6924 <vfprintf+0x69a>
    62d0:	9e 01       	movw	r18, r28
    62d2:	2f 5f       	subi	r18, 0xFF	; 255
    62d4:	3f 4f       	sbci	r19, 0xFF	; 255
    62d6:	39 01       	movw	r6, r18
    62d8:	f7 01       	movw	r30, r14
    62da:	93 81       	ldd	r25, Z+3	; 0x03
    62dc:	f1 01       	movw	r30, r2
    62de:	93 fd       	sbrc	r25, 3
    62e0:	85 91       	lpm	r24, Z+
    62e2:	93 ff       	sbrs	r25, 3
    62e4:	81 91       	ld	r24, Z+
    62e6:	1f 01       	movw	r2, r30
    62e8:	88 23       	and	r24, r24
    62ea:	09 f4       	brne	.+2      	; 0x62ee <vfprintf+0x64>
    62ec:	17 c3       	rjmp	.+1582   	; 0x691c <vfprintf+0x692>
    62ee:	85 32       	cpi	r24, 0x25	; 37
    62f0:	39 f4       	brne	.+14     	; 0x6300 <vfprintf+0x76>
    62f2:	93 fd       	sbrc	r25, 3
    62f4:	85 91       	lpm	r24, Z+
    62f6:	93 ff       	sbrs	r25, 3
    62f8:	81 91       	ld	r24, Z+
    62fa:	1f 01       	movw	r2, r30
    62fc:	85 32       	cpi	r24, 0x25	; 37
    62fe:	31 f4       	brne	.+12     	; 0x630c <vfprintf+0x82>
    6300:	b7 01       	movw	r22, r14
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	c3 d6       	rcall	.+3462   	; 0x708c <fputc>
    6306:	56 01       	movw	r10, r12
    6308:	65 01       	movw	r12, r10
    630a:	e6 cf       	rjmp	.-52     	; 0x62d8 <vfprintf+0x4e>
    630c:	10 e0       	ldi	r17, 0x00	; 0
    630e:	51 2c       	mov	r5, r1
    6310:	91 2c       	mov	r9, r1
    6312:	ff e1       	ldi	r31, 0x1F	; 31
    6314:	f9 15       	cp	r31, r9
    6316:	d8 f0       	brcs	.+54     	; 0x634e <vfprintf+0xc4>
    6318:	8b 32       	cpi	r24, 0x2B	; 43
    631a:	79 f0       	breq	.+30     	; 0x633a <vfprintf+0xb0>
    631c:	38 f4       	brcc	.+14     	; 0x632c <vfprintf+0xa2>
    631e:	80 32       	cpi	r24, 0x20	; 32
    6320:	79 f0       	breq	.+30     	; 0x6340 <vfprintf+0xb6>
    6322:	83 32       	cpi	r24, 0x23	; 35
    6324:	a1 f4       	brne	.+40     	; 0x634e <vfprintf+0xc4>
    6326:	f9 2d       	mov	r31, r9
    6328:	f0 61       	ori	r31, 0x10	; 16
    632a:	2e c0       	rjmp	.+92     	; 0x6388 <vfprintf+0xfe>
    632c:	8d 32       	cpi	r24, 0x2D	; 45
    632e:	61 f0       	breq	.+24     	; 0x6348 <vfprintf+0xbe>
    6330:	80 33       	cpi	r24, 0x30	; 48
    6332:	69 f4       	brne	.+26     	; 0x634e <vfprintf+0xc4>
    6334:	29 2d       	mov	r18, r9
    6336:	21 60       	ori	r18, 0x01	; 1
    6338:	2d c0       	rjmp	.+90     	; 0x6394 <vfprintf+0x10a>
    633a:	39 2d       	mov	r19, r9
    633c:	32 60       	ori	r19, 0x02	; 2
    633e:	93 2e       	mov	r9, r19
    6340:	89 2d       	mov	r24, r9
    6342:	84 60       	ori	r24, 0x04	; 4
    6344:	98 2e       	mov	r9, r24
    6346:	2a c0       	rjmp	.+84     	; 0x639c <vfprintf+0x112>
    6348:	e9 2d       	mov	r30, r9
    634a:	e8 60       	ori	r30, 0x08	; 8
    634c:	15 c0       	rjmp	.+42     	; 0x6378 <vfprintf+0xee>
    634e:	97 fc       	sbrc	r9, 7
    6350:	2d c0       	rjmp	.+90     	; 0x63ac <vfprintf+0x122>
    6352:	20 ed       	ldi	r18, 0xD0	; 208
    6354:	28 0f       	add	r18, r24
    6356:	2a 30       	cpi	r18, 0x0A	; 10
    6358:	88 f4       	brcc	.+34     	; 0x637c <vfprintf+0xf2>
    635a:	96 fe       	sbrs	r9, 6
    635c:	06 c0       	rjmp	.+12     	; 0x636a <vfprintf+0xe0>
    635e:	3a e0       	ldi	r19, 0x0A	; 10
    6360:	13 9f       	mul	r17, r19
    6362:	20 0d       	add	r18, r0
    6364:	11 24       	eor	r1, r1
    6366:	12 2f       	mov	r17, r18
    6368:	19 c0       	rjmp	.+50     	; 0x639c <vfprintf+0x112>
    636a:	8a e0       	ldi	r24, 0x0A	; 10
    636c:	58 9e       	mul	r5, r24
    636e:	20 0d       	add	r18, r0
    6370:	11 24       	eor	r1, r1
    6372:	52 2e       	mov	r5, r18
    6374:	e9 2d       	mov	r30, r9
    6376:	e0 62       	ori	r30, 0x20	; 32
    6378:	9e 2e       	mov	r9, r30
    637a:	10 c0       	rjmp	.+32     	; 0x639c <vfprintf+0x112>
    637c:	8e 32       	cpi	r24, 0x2E	; 46
    637e:	31 f4       	brne	.+12     	; 0x638c <vfprintf+0x102>
    6380:	96 fc       	sbrc	r9, 6
    6382:	cc c2       	rjmp	.+1432   	; 0x691c <vfprintf+0x692>
    6384:	f9 2d       	mov	r31, r9
    6386:	f0 64       	ori	r31, 0x40	; 64
    6388:	9f 2e       	mov	r9, r31
    638a:	08 c0       	rjmp	.+16     	; 0x639c <vfprintf+0x112>
    638c:	8c 36       	cpi	r24, 0x6C	; 108
    638e:	21 f4       	brne	.+8      	; 0x6398 <vfprintf+0x10e>
    6390:	29 2d       	mov	r18, r9
    6392:	20 68       	ori	r18, 0x80	; 128
    6394:	92 2e       	mov	r9, r18
    6396:	02 c0       	rjmp	.+4      	; 0x639c <vfprintf+0x112>
    6398:	88 36       	cpi	r24, 0x68	; 104
    639a:	41 f4       	brne	.+16     	; 0x63ac <vfprintf+0x122>
    639c:	f1 01       	movw	r30, r2
    639e:	93 fd       	sbrc	r25, 3
    63a0:	85 91       	lpm	r24, Z+
    63a2:	93 ff       	sbrs	r25, 3
    63a4:	81 91       	ld	r24, Z+
    63a6:	1f 01       	movw	r2, r30
    63a8:	81 11       	cpse	r24, r1
    63aa:	b3 cf       	rjmp	.-154    	; 0x6312 <vfprintf+0x88>
    63ac:	9b eb       	ldi	r25, 0xBB	; 187
    63ae:	98 0f       	add	r25, r24
    63b0:	93 30       	cpi	r25, 0x03	; 3
    63b2:	20 f4       	brcc	.+8      	; 0x63bc <vfprintf+0x132>
    63b4:	99 2d       	mov	r25, r9
    63b6:	90 61       	ori	r25, 0x10	; 16
    63b8:	80 5e       	subi	r24, 0xE0	; 224
    63ba:	07 c0       	rjmp	.+14     	; 0x63ca <vfprintf+0x140>
    63bc:	9b e9       	ldi	r25, 0x9B	; 155
    63be:	98 0f       	add	r25, r24
    63c0:	93 30       	cpi	r25, 0x03	; 3
    63c2:	08 f0       	brcs	.+2      	; 0x63c6 <vfprintf+0x13c>
    63c4:	59 c1       	rjmp	.+690    	; 0x6678 <vfprintf+0x3ee>
    63c6:	99 2d       	mov	r25, r9
    63c8:	9f 7e       	andi	r25, 0xEF	; 239
    63ca:	96 ff       	sbrs	r25, 6
    63cc:	16 e0       	ldi	r17, 0x06	; 6
    63ce:	9f 73       	andi	r25, 0x3F	; 63
    63d0:	99 2e       	mov	r9, r25
    63d2:	85 36       	cpi	r24, 0x65	; 101
    63d4:	19 f4       	brne	.+6      	; 0x63dc <vfprintf+0x152>
    63d6:	90 64       	ori	r25, 0x40	; 64
    63d8:	99 2e       	mov	r9, r25
    63da:	08 c0       	rjmp	.+16     	; 0x63ec <vfprintf+0x162>
    63dc:	86 36       	cpi	r24, 0x66	; 102
    63de:	21 f4       	brne	.+8      	; 0x63e8 <vfprintf+0x15e>
    63e0:	39 2f       	mov	r19, r25
    63e2:	30 68       	ori	r19, 0x80	; 128
    63e4:	93 2e       	mov	r9, r19
    63e6:	02 c0       	rjmp	.+4      	; 0x63ec <vfprintf+0x162>
    63e8:	11 11       	cpse	r17, r1
    63ea:	11 50       	subi	r17, 0x01	; 1
    63ec:	97 fe       	sbrs	r9, 7
    63ee:	07 c0       	rjmp	.+14     	; 0x63fe <vfprintf+0x174>
    63f0:	1c 33       	cpi	r17, 0x3C	; 60
    63f2:	50 f4       	brcc	.+20     	; 0x6408 <vfprintf+0x17e>
    63f4:	44 24       	eor	r4, r4
    63f6:	43 94       	inc	r4
    63f8:	41 0e       	add	r4, r17
    63fa:	27 e0       	ldi	r18, 0x07	; 7
    63fc:	0b c0       	rjmp	.+22     	; 0x6414 <vfprintf+0x18a>
    63fe:	18 30       	cpi	r17, 0x08	; 8
    6400:	38 f0       	brcs	.+14     	; 0x6410 <vfprintf+0x186>
    6402:	27 e0       	ldi	r18, 0x07	; 7
    6404:	17 e0       	ldi	r17, 0x07	; 7
    6406:	05 c0       	rjmp	.+10     	; 0x6412 <vfprintf+0x188>
    6408:	27 e0       	ldi	r18, 0x07	; 7
    640a:	9c e3       	ldi	r25, 0x3C	; 60
    640c:	49 2e       	mov	r4, r25
    640e:	02 c0       	rjmp	.+4      	; 0x6414 <vfprintf+0x18a>
    6410:	21 2f       	mov	r18, r17
    6412:	41 2c       	mov	r4, r1
    6414:	56 01       	movw	r10, r12
    6416:	84 e0       	ldi	r24, 0x04	; 4
    6418:	a8 0e       	add	r10, r24
    641a:	b1 1c       	adc	r11, r1
    641c:	f6 01       	movw	r30, r12
    641e:	60 81       	ld	r22, Z
    6420:	71 81       	ldd	r23, Z+1	; 0x01
    6422:	82 81       	ldd	r24, Z+2	; 0x02
    6424:	93 81       	ldd	r25, Z+3	; 0x03
    6426:	04 2d       	mov	r16, r4
    6428:	a3 01       	movw	r20, r6
    642a:	e3 d4       	rcall	.+2502   	; 0x6df2 <__ftoa_engine>
    642c:	6c 01       	movw	r12, r24
    642e:	f9 81       	ldd	r31, Y+1	; 0x01
    6430:	fc 87       	std	Y+12, r31	; 0x0c
    6432:	f0 ff       	sbrs	r31, 0
    6434:	02 c0       	rjmp	.+4      	; 0x643a <vfprintf+0x1b0>
    6436:	f3 ff       	sbrs	r31, 3
    6438:	06 c0       	rjmp	.+12     	; 0x6446 <vfprintf+0x1bc>
    643a:	91 fc       	sbrc	r9, 1
    643c:	06 c0       	rjmp	.+12     	; 0x644a <vfprintf+0x1c0>
    643e:	92 fe       	sbrs	r9, 2
    6440:	06 c0       	rjmp	.+12     	; 0x644e <vfprintf+0x1c4>
    6442:	00 e2       	ldi	r16, 0x20	; 32
    6444:	05 c0       	rjmp	.+10     	; 0x6450 <vfprintf+0x1c6>
    6446:	0d e2       	ldi	r16, 0x2D	; 45
    6448:	03 c0       	rjmp	.+6      	; 0x6450 <vfprintf+0x1c6>
    644a:	0b e2       	ldi	r16, 0x2B	; 43
    644c:	01 c0       	rjmp	.+2      	; 0x6450 <vfprintf+0x1c6>
    644e:	00 e0       	ldi	r16, 0x00	; 0
    6450:	8c 85       	ldd	r24, Y+12	; 0x0c
    6452:	8c 70       	andi	r24, 0x0C	; 12
    6454:	19 f0       	breq	.+6      	; 0x645c <vfprintf+0x1d2>
    6456:	01 11       	cpse	r16, r1
    6458:	43 c2       	rjmp	.+1158   	; 0x68e0 <vfprintf+0x656>
    645a:	80 c2       	rjmp	.+1280   	; 0x695c <vfprintf+0x6d2>
    645c:	97 fe       	sbrs	r9, 7
    645e:	10 c0       	rjmp	.+32     	; 0x6480 <vfprintf+0x1f6>
    6460:	4c 0c       	add	r4, r12
    6462:	fc 85       	ldd	r31, Y+12	; 0x0c
    6464:	f4 ff       	sbrs	r31, 4
    6466:	04 c0       	rjmp	.+8      	; 0x6470 <vfprintf+0x1e6>
    6468:	8a 81       	ldd	r24, Y+2	; 0x02
    646a:	81 33       	cpi	r24, 0x31	; 49
    646c:	09 f4       	brne	.+2      	; 0x6470 <vfprintf+0x1e6>
    646e:	4a 94       	dec	r4
    6470:	14 14       	cp	r1, r4
    6472:	74 f5       	brge	.+92     	; 0x64d0 <vfprintf+0x246>
    6474:	28 e0       	ldi	r18, 0x08	; 8
    6476:	24 15       	cp	r18, r4
    6478:	78 f5       	brcc	.+94     	; 0x64d8 <vfprintf+0x24e>
    647a:	88 e0       	ldi	r24, 0x08	; 8
    647c:	48 2e       	mov	r4, r24
    647e:	2c c0       	rjmp	.+88     	; 0x64d8 <vfprintf+0x24e>
    6480:	96 fc       	sbrc	r9, 6
    6482:	2a c0       	rjmp	.+84     	; 0x64d8 <vfprintf+0x24e>
    6484:	81 2f       	mov	r24, r17
    6486:	90 e0       	ldi	r25, 0x00	; 0
    6488:	8c 15       	cp	r24, r12
    648a:	9d 05       	cpc	r25, r13
    648c:	9c f0       	brlt	.+38     	; 0x64b4 <vfprintf+0x22a>
    648e:	3c ef       	ldi	r19, 0xFC	; 252
    6490:	c3 16       	cp	r12, r19
    6492:	3f ef       	ldi	r19, 0xFF	; 255
    6494:	d3 06       	cpc	r13, r19
    6496:	74 f0       	brlt	.+28     	; 0x64b4 <vfprintf+0x22a>
    6498:	89 2d       	mov	r24, r9
    649a:	80 68       	ori	r24, 0x80	; 128
    649c:	98 2e       	mov	r9, r24
    649e:	0a c0       	rjmp	.+20     	; 0x64b4 <vfprintf+0x22a>
    64a0:	e2 e0       	ldi	r30, 0x02	; 2
    64a2:	f0 e0       	ldi	r31, 0x00	; 0
    64a4:	ec 0f       	add	r30, r28
    64a6:	fd 1f       	adc	r31, r29
    64a8:	e1 0f       	add	r30, r17
    64aa:	f1 1d       	adc	r31, r1
    64ac:	80 81       	ld	r24, Z
    64ae:	80 33       	cpi	r24, 0x30	; 48
    64b0:	19 f4       	brne	.+6      	; 0x64b8 <vfprintf+0x22e>
    64b2:	11 50       	subi	r17, 0x01	; 1
    64b4:	11 11       	cpse	r17, r1
    64b6:	f4 cf       	rjmp	.-24     	; 0x64a0 <vfprintf+0x216>
    64b8:	97 fe       	sbrs	r9, 7
    64ba:	0e c0       	rjmp	.+28     	; 0x64d8 <vfprintf+0x24e>
    64bc:	44 24       	eor	r4, r4
    64be:	43 94       	inc	r4
    64c0:	41 0e       	add	r4, r17
    64c2:	81 2f       	mov	r24, r17
    64c4:	90 e0       	ldi	r25, 0x00	; 0
    64c6:	c8 16       	cp	r12, r24
    64c8:	d9 06       	cpc	r13, r25
    64ca:	2c f4       	brge	.+10     	; 0x64d6 <vfprintf+0x24c>
    64cc:	1c 19       	sub	r17, r12
    64ce:	04 c0       	rjmp	.+8      	; 0x64d8 <vfprintf+0x24e>
    64d0:	44 24       	eor	r4, r4
    64d2:	43 94       	inc	r4
    64d4:	01 c0       	rjmp	.+2      	; 0x64d8 <vfprintf+0x24e>
    64d6:	10 e0       	ldi	r17, 0x00	; 0
    64d8:	97 fe       	sbrs	r9, 7
    64da:	06 c0       	rjmp	.+12     	; 0x64e8 <vfprintf+0x25e>
    64dc:	1c 14       	cp	r1, r12
    64de:	1d 04       	cpc	r1, r13
    64e0:	34 f4       	brge	.+12     	; 0x64ee <vfprintf+0x264>
    64e2:	c6 01       	movw	r24, r12
    64e4:	01 96       	adiw	r24, 0x01	; 1
    64e6:	05 c0       	rjmp	.+10     	; 0x64f2 <vfprintf+0x268>
    64e8:	85 e0       	ldi	r24, 0x05	; 5
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	02 c0       	rjmp	.+4      	; 0x64f2 <vfprintf+0x268>
    64ee:	81 e0       	ldi	r24, 0x01	; 1
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	01 11       	cpse	r16, r1
    64f4:	01 96       	adiw	r24, 0x01	; 1
    64f6:	11 23       	and	r17, r17
    64f8:	31 f0       	breq	.+12     	; 0x6506 <vfprintf+0x27c>
    64fa:	21 2f       	mov	r18, r17
    64fc:	30 e0       	ldi	r19, 0x00	; 0
    64fe:	2f 5f       	subi	r18, 0xFF	; 255
    6500:	3f 4f       	sbci	r19, 0xFF	; 255
    6502:	82 0f       	add	r24, r18
    6504:	93 1f       	adc	r25, r19
    6506:	25 2d       	mov	r18, r5
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	82 17       	cp	r24, r18
    650c:	93 07       	cpc	r25, r19
    650e:	14 f4       	brge	.+4      	; 0x6514 <vfprintf+0x28a>
    6510:	58 1a       	sub	r5, r24
    6512:	01 c0       	rjmp	.+2      	; 0x6516 <vfprintf+0x28c>
    6514:	51 2c       	mov	r5, r1
    6516:	89 2d       	mov	r24, r9
    6518:	89 70       	andi	r24, 0x09	; 9
    651a:	41 f4       	brne	.+16     	; 0x652c <vfprintf+0x2a2>
    651c:	55 20       	and	r5, r5
    651e:	31 f0       	breq	.+12     	; 0x652c <vfprintf+0x2a2>
    6520:	b7 01       	movw	r22, r14
    6522:	80 e2       	ldi	r24, 0x20	; 32
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	b2 d5       	rcall	.+2916   	; 0x708c <fputc>
    6528:	5a 94       	dec	r5
    652a:	f8 cf       	rjmp	.-16     	; 0x651c <vfprintf+0x292>
    652c:	00 23       	and	r16, r16
    652e:	21 f0       	breq	.+8      	; 0x6538 <vfprintf+0x2ae>
    6530:	b7 01       	movw	r22, r14
    6532:	80 2f       	mov	r24, r16
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	aa d5       	rcall	.+2900   	; 0x708c <fputc>
    6538:	93 fc       	sbrc	r9, 3
    653a:	08 c0       	rjmp	.+16     	; 0x654c <vfprintf+0x2c2>
    653c:	55 20       	and	r5, r5
    653e:	31 f0       	breq	.+12     	; 0x654c <vfprintf+0x2c2>
    6540:	b7 01       	movw	r22, r14
    6542:	80 e3       	ldi	r24, 0x30	; 48
    6544:	90 e0       	ldi	r25, 0x00	; 0
    6546:	a2 d5       	rcall	.+2884   	; 0x708c <fputc>
    6548:	5a 94       	dec	r5
    654a:	f8 cf       	rjmp	.-16     	; 0x653c <vfprintf+0x2b2>
    654c:	97 fe       	sbrs	r9, 7
    654e:	4a c0       	rjmp	.+148    	; 0x65e4 <vfprintf+0x35a>
    6550:	46 01       	movw	r8, r12
    6552:	d7 fe       	sbrs	r13, 7
    6554:	02 c0       	rjmp	.+4      	; 0x655a <vfprintf+0x2d0>
    6556:	81 2c       	mov	r8, r1
    6558:	91 2c       	mov	r9, r1
    655a:	c6 01       	movw	r24, r12
    655c:	88 19       	sub	r24, r8
    655e:	99 09       	sbc	r25, r9
    6560:	f3 01       	movw	r30, r6
    6562:	e8 0f       	add	r30, r24
    6564:	f9 1f       	adc	r31, r25
    6566:	fe 87       	std	Y+14, r31	; 0x0e
    6568:	ed 87       	std	Y+13, r30	; 0x0d
    656a:	96 01       	movw	r18, r12
    656c:	24 19       	sub	r18, r4
    656e:	31 09       	sbc	r19, r1
    6570:	38 8b       	std	Y+16, r19	; 0x10
    6572:	2f 87       	std	Y+15, r18	; 0x0f
    6574:	01 2f       	mov	r16, r17
    6576:	10 e0       	ldi	r17, 0x00	; 0
    6578:	11 95       	neg	r17
    657a:	01 95       	neg	r16
    657c:	11 09       	sbc	r17, r1
    657e:	3f ef       	ldi	r19, 0xFF	; 255
    6580:	83 16       	cp	r8, r19
    6582:	93 06       	cpc	r9, r19
    6584:	21 f4       	brne	.+8      	; 0x658e <vfprintf+0x304>
    6586:	b7 01       	movw	r22, r14
    6588:	8e e2       	ldi	r24, 0x2E	; 46
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	7f d5       	rcall	.+2814   	; 0x708c <fputc>
    658e:	c8 14       	cp	r12, r8
    6590:	d9 04       	cpc	r13, r9
    6592:	4c f0       	brlt	.+18     	; 0x65a6 <vfprintf+0x31c>
    6594:	8f 85       	ldd	r24, Y+15	; 0x0f
    6596:	98 89       	ldd	r25, Y+16	; 0x10
    6598:	88 15       	cp	r24, r8
    659a:	99 05       	cpc	r25, r9
    659c:	24 f4       	brge	.+8      	; 0x65a6 <vfprintf+0x31c>
    659e:	ed 85       	ldd	r30, Y+13	; 0x0d
    65a0:	fe 85       	ldd	r31, Y+14	; 0x0e
    65a2:	81 81       	ldd	r24, Z+1	; 0x01
    65a4:	01 c0       	rjmp	.+2      	; 0x65a8 <vfprintf+0x31e>
    65a6:	80 e3       	ldi	r24, 0x30	; 48
    65a8:	f1 e0       	ldi	r31, 0x01	; 1
    65aa:	8f 1a       	sub	r8, r31
    65ac:	91 08       	sbc	r9, r1
    65ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    65b0:	3e 85       	ldd	r19, Y+14	; 0x0e
    65b2:	2f 5f       	subi	r18, 0xFF	; 255
    65b4:	3f 4f       	sbci	r19, 0xFF	; 255
    65b6:	3e 87       	std	Y+14, r19	; 0x0e
    65b8:	2d 87       	std	Y+13, r18	; 0x0d
    65ba:	80 16       	cp	r8, r16
    65bc:	91 06       	cpc	r9, r17
    65be:	24 f0       	brlt	.+8      	; 0x65c8 <vfprintf+0x33e>
    65c0:	b7 01       	movw	r22, r14
    65c2:	90 e0       	ldi	r25, 0x00	; 0
    65c4:	63 d5       	rcall	.+2758   	; 0x708c <fputc>
    65c6:	db cf       	rjmp	.-74     	; 0x657e <vfprintf+0x2f4>
    65c8:	c8 14       	cp	r12, r8
    65ca:	d9 04       	cpc	r13, r9
    65cc:	41 f4       	brne	.+16     	; 0x65de <vfprintf+0x354>
    65ce:	9a 81       	ldd	r25, Y+2	; 0x02
    65d0:	96 33       	cpi	r25, 0x36	; 54
    65d2:	20 f4       	brcc	.+8      	; 0x65dc <vfprintf+0x352>
    65d4:	95 33       	cpi	r25, 0x35	; 53
    65d6:	19 f4       	brne	.+6      	; 0x65de <vfprintf+0x354>
    65d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    65da:	34 ff       	sbrs	r19, 4
    65dc:	81 e3       	ldi	r24, 0x31	; 49
    65de:	b7 01       	movw	r22, r14
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	48 c0       	rjmp	.+144    	; 0x6674 <vfprintf+0x3ea>
    65e4:	8a 81       	ldd	r24, Y+2	; 0x02
    65e6:	81 33       	cpi	r24, 0x31	; 49
    65e8:	19 f0       	breq	.+6      	; 0x65f0 <vfprintf+0x366>
    65ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    65ec:	9f 7e       	andi	r25, 0xEF	; 239
    65ee:	9c 87       	std	Y+12, r25	; 0x0c
    65f0:	b7 01       	movw	r22, r14
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	4b d5       	rcall	.+2710   	; 0x708c <fputc>
    65f6:	11 11       	cpse	r17, r1
    65f8:	05 c0       	rjmp	.+10     	; 0x6604 <vfprintf+0x37a>
    65fa:	94 fc       	sbrc	r9, 4
    65fc:	16 c0       	rjmp	.+44     	; 0x662a <vfprintf+0x3a0>
    65fe:	85 e6       	ldi	r24, 0x65	; 101
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	15 c0       	rjmp	.+42     	; 0x662e <vfprintf+0x3a4>
    6604:	b7 01       	movw	r22, r14
    6606:	8e e2       	ldi	r24, 0x2E	; 46
    6608:	90 e0       	ldi	r25, 0x00	; 0
    660a:	40 d5       	rcall	.+2688   	; 0x708c <fputc>
    660c:	1e 5f       	subi	r17, 0xFE	; 254
    660e:	82 e0       	ldi	r24, 0x02	; 2
    6610:	01 e0       	ldi	r16, 0x01	; 1
    6612:	08 0f       	add	r16, r24
    6614:	f3 01       	movw	r30, r6
    6616:	e8 0f       	add	r30, r24
    6618:	f1 1d       	adc	r31, r1
    661a:	80 81       	ld	r24, Z
    661c:	b7 01       	movw	r22, r14
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	35 d5       	rcall	.+2666   	; 0x708c <fputc>
    6622:	80 2f       	mov	r24, r16
    6624:	01 13       	cpse	r16, r17
    6626:	f4 cf       	rjmp	.-24     	; 0x6610 <vfprintf+0x386>
    6628:	e8 cf       	rjmp	.-48     	; 0x65fa <vfprintf+0x370>
    662a:	85 e4       	ldi	r24, 0x45	; 69
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	b7 01       	movw	r22, r14
    6630:	2d d5       	rcall	.+2650   	; 0x708c <fputc>
    6632:	d7 fc       	sbrc	r13, 7
    6634:	06 c0       	rjmp	.+12     	; 0x6642 <vfprintf+0x3b8>
    6636:	c1 14       	cp	r12, r1
    6638:	d1 04       	cpc	r13, r1
    663a:	41 f4       	brne	.+16     	; 0x664c <vfprintf+0x3c2>
    663c:	ec 85       	ldd	r30, Y+12	; 0x0c
    663e:	e4 ff       	sbrs	r30, 4
    6640:	05 c0       	rjmp	.+10     	; 0x664c <vfprintf+0x3c2>
    6642:	d1 94       	neg	r13
    6644:	c1 94       	neg	r12
    6646:	d1 08       	sbc	r13, r1
    6648:	8d e2       	ldi	r24, 0x2D	; 45
    664a:	01 c0       	rjmp	.+2      	; 0x664e <vfprintf+0x3c4>
    664c:	8b e2       	ldi	r24, 0x2B	; 43
    664e:	b7 01       	movw	r22, r14
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	1c d5       	rcall	.+2616   	; 0x708c <fputc>
    6654:	80 e3       	ldi	r24, 0x30	; 48
    6656:	2a e0       	ldi	r18, 0x0A	; 10
    6658:	c2 16       	cp	r12, r18
    665a:	d1 04       	cpc	r13, r1
    665c:	2c f0       	brlt	.+10     	; 0x6668 <vfprintf+0x3de>
    665e:	8f 5f       	subi	r24, 0xFF	; 255
    6660:	fa e0       	ldi	r31, 0x0A	; 10
    6662:	cf 1a       	sub	r12, r31
    6664:	d1 08       	sbc	r13, r1
    6666:	f7 cf       	rjmp	.-18     	; 0x6656 <vfprintf+0x3cc>
    6668:	b7 01       	movw	r22, r14
    666a:	90 e0       	ldi	r25, 0x00	; 0
    666c:	0f d5       	rcall	.+2590   	; 0x708c <fputc>
    666e:	b7 01       	movw	r22, r14
    6670:	c6 01       	movw	r24, r12
    6672:	c0 96       	adiw	r24, 0x30	; 48
    6674:	0b d5       	rcall	.+2582   	; 0x708c <fputc>
    6676:	49 c1       	rjmp	.+658    	; 0x690a <vfprintf+0x680>
    6678:	83 36       	cpi	r24, 0x63	; 99
    667a:	31 f0       	breq	.+12     	; 0x6688 <vfprintf+0x3fe>
    667c:	83 37       	cpi	r24, 0x73	; 115
    667e:	79 f0       	breq	.+30     	; 0x669e <vfprintf+0x414>
    6680:	83 35       	cpi	r24, 0x53	; 83
    6682:	09 f0       	breq	.+2      	; 0x6686 <vfprintf+0x3fc>
    6684:	52 c0       	rjmp	.+164    	; 0x672a <vfprintf+0x4a0>
    6686:	1f c0       	rjmp	.+62     	; 0x66c6 <vfprintf+0x43c>
    6688:	56 01       	movw	r10, r12
    668a:	32 e0       	ldi	r19, 0x02	; 2
    668c:	a3 0e       	add	r10, r19
    668e:	b1 1c       	adc	r11, r1
    6690:	f6 01       	movw	r30, r12
    6692:	80 81       	ld	r24, Z
    6694:	89 83       	std	Y+1, r24	; 0x01
    6696:	01 e0       	ldi	r16, 0x01	; 1
    6698:	10 e0       	ldi	r17, 0x00	; 0
    669a:	63 01       	movw	r12, r6
    669c:	11 c0       	rjmp	.+34     	; 0x66c0 <vfprintf+0x436>
    669e:	56 01       	movw	r10, r12
    66a0:	f2 e0       	ldi	r31, 0x02	; 2
    66a2:	af 0e       	add	r10, r31
    66a4:	b1 1c       	adc	r11, r1
    66a6:	f6 01       	movw	r30, r12
    66a8:	c0 80       	ld	r12, Z
    66aa:	d1 80       	ldd	r13, Z+1	; 0x01
    66ac:	96 fe       	sbrs	r9, 6
    66ae:	03 c0       	rjmp	.+6      	; 0x66b6 <vfprintf+0x42c>
    66b0:	61 2f       	mov	r22, r17
    66b2:	70 e0       	ldi	r23, 0x00	; 0
    66b4:	02 c0       	rjmp	.+4      	; 0x66ba <vfprintf+0x430>
    66b6:	6f ef       	ldi	r22, 0xFF	; 255
    66b8:	7f ef       	ldi	r23, 0xFF	; 255
    66ba:	c6 01       	movw	r24, r12
    66bc:	dc d4       	rcall	.+2488   	; 0x7076 <strnlen>
    66be:	8c 01       	movw	r16, r24
    66c0:	f9 2d       	mov	r31, r9
    66c2:	ff 77       	andi	r31, 0x7F	; 127
    66c4:	13 c0       	rjmp	.+38     	; 0x66ec <vfprintf+0x462>
    66c6:	56 01       	movw	r10, r12
    66c8:	22 e0       	ldi	r18, 0x02	; 2
    66ca:	a2 0e       	add	r10, r18
    66cc:	b1 1c       	adc	r11, r1
    66ce:	f6 01       	movw	r30, r12
    66d0:	c0 80       	ld	r12, Z
    66d2:	d1 80       	ldd	r13, Z+1	; 0x01
    66d4:	96 fe       	sbrs	r9, 6
    66d6:	03 c0       	rjmp	.+6      	; 0x66de <vfprintf+0x454>
    66d8:	61 2f       	mov	r22, r17
    66da:	70 e0       	ldi	r23, 0x00	; 0
    66dc:	02 c0       	rjmp	.+4      	; 0x66e2 <vfprintf+0x458>
    66de:	6f ef       	ldi	r22, 0xFF	; 255
    66e0:	7f ef       	ldi	r23, 0xFF	; 255
    66e2:	c6 01       	movw	r24, r12
    66e4:	5e d4       	rcall	.+2236   	; 0x6fa2 <strnlen_P>
    66e6:	8c 01       	movw	r16, r24
    66e8:	f9 2d       	mov	r31, r9
    66ea:	f0 68       	ori	r31, 0x80	; 128
    66ec:	9f 2e       	mov	r9, r31
    66ee:	f3 fd       	sbrc	r31, 3
    66f0:	18 c0       	rjmp	.+48     	; 0x6722 <vfprintf+0x498>
    66f2:	85 2d       	mov	r24, r5
    66f4:	90 e0       	ldi	r25, 0x00	; 0
    66f6:	08 17       	cp	r16, r24
    66f8:	19 07       	cpc	r17, r25
    66fa:	98 f4       	brcc	.+38     	; 0x6722 <vfprintf+0x498>
    66fc:	b7 01       	movw	r22, r14
    66fe:	80 e2       	ldi	r24, 0x20	; 32
    6700:	90 e0       	ldi	r25, 0x00	; 0
    6702:	c4 d4       	rcall	.+2440   	; 0x708c <fputc>
    6704:	5a 94       	dec	r5
    6706:	f5 cf       	rjmp	.-22     	; 0x66f2 <vfprintf+0x468>
    6708:	f6 01       	movw	r30, r12
    670a:	97 fc       	sbrc	r9, 7
    670c:	85 91       	lpm	r24, Z+
    670e:	97 fe       	sbrs	r9, 7
    6710:	81 91       	ld	r24, Z+
    6712:	6f 01       	movw	r12, r30
    6714:	b7 01       	movw	r22, r14
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	b9 d4       	rcall	.+2418   	; 0x708c <fputc>
    671a:	51 10       	cpse	r5, r1
    671c:	5a 94       	dec	r5
    671e:	01 50       	subi	r16, 0x01	; 1
    6720:	11 09       	sbc	r17, r1
    6722:	01 15       	cp	r16, r1
    6724:	11 05       	cpc	r17, r1
    6726:	81 f7       	brne	.-32     	; 0x6708 <vfprintf+0x47e>
    6728:	f0 c0       	rjmp	.+480    	; 0x690a <vfprintf+0x680>
    672a:	84 36       	cpi	r24, 0x64	; 100
    672c:	11 f0       	breq	.+4      	; 0x6732 <vfprintf+0x4a8>
    672e:	89 36       	cpi	r24, 0x69	; 105
    6730:	59 f5       	brne	.+86     	; 0x6788 <vfprintf+0x4fe>
    6732:	56 01       	movw	r10, r12
    6734:	97 fe       	sbrs	r9, 7
    6736:	09 c0       	rjmp	.+18     	; 0x674a <vfprintf+0x4c0>
    6738:	24 e0       	ldi	r18, 0x04	; 4
    673a:	a2 0e       	add	r10, r18
    673c:	b1 1c       	adc	r11, r1
    673e:	f6 01       	movw	r30, r12
    6740:	60 81       	ld	r22, Z
    6742:	71 81       	ldd	r23, Z+1	; 0x01
    6744:	82 81       	ldd	r24, Z+2	; 0x02
    6746:	93 81       	ldd	r25, Z+3	; 0x03
    6748:	0a c0       	rjmp	.+20     	; 0x675e <vfprintf+0x4d4>
    674a:	f2 e0       	ldi	r31, 0x02	; 2
    674c:	af 0e       	add	r10, r31
    674e:	b1 1c       	adc	r11, r1
    6750:	f6 01       	movw	r30, r12
    6752:	60 81       	ld	r22, Z
    6754:	71 81       	ldd	r23, Z+1	; 0x01
    6756:	07 2e       	mov	r0, r23
    6758:	00 0c       	add	r0, r0
    675a:	88 0b       	sbc	r24, r24
    675c:	99 0b       	sbc	r25, r25
    675e:	f9 2d       	mov	r31, r9
    6760:	ff 76       	andi	r31, 0x6F	; 111
    6762:	9f 2e       	mov	r9, r31
    6764:	97 ff       	sbrs	r25, 7
    6766:	09 c0       	rjmp	.+18     	; 0x677a <vfprintf+0x4f0>
    6768:	90 95       	com	r25
    676a:	80 95       	com	r24
    676c:	70 95       	com	r23
    676e:	61 95       	neg	r22
    6770:	7f 4f       	sbci	r23, 0xFF	; 255
    6772:	8f 4f       	sbci	r24, 0xFF	; 255
    6774:	9f 4f       	sbci	r25, 0xFF	; 255
    6776:	f0 68       	ori	r31, 0x80	; 128
    6778:	9f 2e       	mov	r9, r31
    677a:	2a e0       	ldi	r18, 0x0A	; 10
    677c:	30 e0       	ldi	r19, 0x00	; 0
    677e:	a3 01       	movw	r20, r6
    6780:	fb d4       	rcall	.+2550   	; 0x7178 <__ultoa_invert>
    6782:	c8 2e       	mov	r12, r24
    6784:	c6 18       	sub	r12, r6
    6786:	3e c0       	rjmp	.+124    	; 0x6804 <vfprintf+0x57a>
    6788:	09 2d       	mov	r16, r9
    678a:	85 37       	cpi	r24, 0x75	; 117
    678c:	21 f4       	brne	.+8      	; 0x6796 <vfprintf+0x50c>
    678e:	0f 7e       	andi	r16, 0xEF	; 239
    6790:	2a e0       	ldi	r18, 0x0A	; 10
    6792:	30 e0       	ldi	r19, 0x00	; 0
    6794:	1d c0       	rjmp	.+58     	; 0x67d0 <vfprintf+0x546>
    6796:	09 7f       	andi	r16, 0xF9	; 249
    6798:	8f 36       	cpi	r24, 0x6F	; 111
    679a:	91 f0       	breq	.+36     	; 0x67c0 <vfprintf+0x536>
    679c:	18 f4       	brcc	.+6      	; 0x67a4 <vfprintf+0x51a>
    679e:	88 35       	cpi	r24, 0x58	; 88
    67a0:	59 f0       	breq	.+22     	; 0x67b8 <vfprintf+0x52e>
    67a2:	bc c0       	rjmp	.+376    	; 0x691c <vfprintf+0x692>
    67a4:	80 37       	cpi	r24, 0x70	; 112
    67a6:	19 f0       	breq	.+6      	; 0x67ae <vfprintf+0x524>
    67a8:	88 37       	cpi	r24, 0x78	; 120
    67aa:	11 f0       	breq	.+4      	; 0x67b0 <vfprintf+0x526>
    67ac:	b7 c0       	rjmp	.+366    	; 0x691c <vfprintf+0x692>
    67ae:	00 61       	ori	r16, 0x10	; 16
    67b0:	04 ff       	sbrs	r16, 4
    67b2:	09 c0       	rjmp	.+18     	; 0x67c6 <vfprintf+0x53c>
    67b4:	04 60       	ori	r16, 0x04	; 4
    67b6:	07 c0       	rjmp	.+14     	; 0x67c6 <vfprintf+0x53c>
    67b8:	94 fe       	sbrs	r9, 4
    67ba:	08 c0       	rjmp	.+16     	; 0x67cc <vfprintf+0x542>
    67bc:	06 60       	ori	r16, 0x06	; 6
    67be:	06 c0       	rjmp	.+12     	; 0x67cc <vfprintf+0x542>
    67c0:	28 e0       	ldi	r18, 0x08	; 8
    67c2:	30 e0       	ldi	r19, 0x00	; 0
    67c4:	05 c0       	rjmp	.+10     	; 0x67d0 <vfprintf+0x546>
    67c6:	20 e1       	ldi	r18, 0x10	; 16
    67c8:	30 e0       	ldi	r19, 0x00	; 0
    67ca:	02 c0       	rjmp	.+4      	; 0x67d0 <vfprintf+0x546>
    67cc:	20 e1       	ldi	r18, 0x10	; 16
    67ce:	32 e0       	ldi	r19, 0x02	; 2
    67d0:	56 01       	movw	r10, r12
    67d2:	07 ff       	sbrs	r16, 7
    67d4:	09 c0       	rjmp	.+18     	; 0x67e8 <vfprintf+0x55e>
    67d6:	84 e0       	ldi	r24, 0x04	; 4
    67d8:	a8 0e       	add	r10, r24
    67da:	b1 1c       	adc	r11, r1
    67dc:	f6 01       	movw	r30, r12
    67de:	60 81       	ld	r22, Z
    67e0:	71 81       	ldd	r23, Z+1	; 0x01
    67e2:	82 81       	ldd	r24, Z+2	; 0x02
    67e4:	93 81       	ldd	r25, Z+3	; 0x03
    67e6:	08 c0       	rjmp	.+16     	; 0x67f8 <vfprintf+0x56e>
    67e8:	f2 e0       	ldi	r31, 0x02	; 2
    67ea:	af 0e       	add	r10, r31
    67ec:	b1 1c       	adc	r11, r1
    67ee:	f6 01       	movw	r30, r12
    67f0:	60 81       	ld	r22, Z
    67f2:	71 81       	ldd	r23, Z+1	; 0x01
    67f4:	80 e0       	ldi	r24, 0x00	; 0
    67f6:	90 e0       	ldi	r25, 0x00	; 0
    67f8:	a3 01       	movw	r20, r6
    67fa:	be d4       	rcall	.+2428   	; 0x7178 <__ultoa_invert>
    67fc:	c8 2e       	mov	r12, r24
    67fe:	c6 18       	sub	r12, r6
    6800:	0f 77       	andi	r16, 0x7F	; 127
    6802:	90 2e       	mov	r9, r16
    6804:	96 fe       	sbrs	r9, 6
    6806:	0b c0       	rjmp	.+22     	; 0x681e <vfprintf+0x594>
    6808:	09 2d       	mov	r16, r9
    680a:	0e 7f       	andi	r16, 0xFE	; 254
    680c:	c1 16       	cp	r12, r17
    680e:	50 f4       	brcc	.+20     	; 0x6824 <vfprintf+0x59a>
    6810:	94 fe       	sbrs	r9, 4
    6812:	0a c0       	rjmp	.+20     	; 0x6828 <vfprintf+0x59e>
    6814:	92 fc       	sbrc	r9, 2
    6816:	08 c0       	rjmp	.+16     	; 0x6828 <vfprintf+0x59e>
    6818:	09 2d       	mov	r16, r9
    681a:	0e 7e       	andi	r16, 0xEE	; 238
    681c:	05 c0       	rjmp	.+10     	; 0x6828 <vfprintf+0x59e>
    681e:	dc 2c       	mov	r13, r12
    6820:	09 2d       	mov	r16, r9
    6822:	03 c0       	rjmp	.+6      	; 0x682a <vfprintf+0x5a0>
    6824:	dc 2c       	mov	r13, r12
    6826:	01 c0       	rjmp	.+2      	; 0x682a <vfprintf+0x5a0>
    6828:	d1 2e       	mov	r13, r17
    682a:	04 ff       	sbrs	r16, 4
    682c:	0d c0       	rjmp	.+26     	; 0x6848 <vfprintf+0x5be>
    682e:	fe 01       	movw	r30, r28
    6830:	ec 0d       	add	r30, r12
    6832:	f1 1d       	adc	r31, r1
    6834:	80 81       	ld	r24, Z
    6836:	80 33       	cpi	r24, 0x30	; 48
    6838:	11 f4       	brne	.+4      	; 0x683e <vfprintf+0x5b4>
    683a:	09 7e       	andi	r16, 0xE9	; 233
    683c:	09 c0       	rjmp	.+18     	; 0x6850 <vfprintf+0x5c6>
    683e:	02 ff       	sbrs	r16, 2
    6840:	06 c0       	rjmp	.+12     	; 0x684e <vfprintf+0x5c4>
    6842:	d3 94       	inc	r13
    6844:	d3 94       	inc	r13
    6846:	04 c0       	rjmp	.+8      	; 0x6850 <vfprintf+0x5c6>
    6848:	80 2f       	mov	r24, r16
    684a:	86 78       	andi	r24, 0x86	; 134
    684c:	09 f0       	breq	.+2      	; 0x6850 <vfprintf+0x5c6>
    684e:	d3 94       	inc	r13
    6850:	03 fd       	sbrc	r16, 3
    6852:	10 c0       	rjmp	.+32     	; 0x6874 <vfprintf+0x5ea>
    6854:	00 ff       	sbrs	r16, 0
    6856:	06 c0       	rjmp	.+12     	; 0x6864 <vfprintf+0x5da>
    6858:	1c 2d       	mov	r17, r12
    685a:	d5 14       	cp	r13, r5
    685c:	78 f4       	brcc	.+30     	; 0x687c <vfprintf+0x5f2>
    685e:	15 0d       	add	r17, r5
    6860:	1d 19       	sub	r17, r13
    6862:	0c c0       	rjmp	.+24     	; 0x687c <vfprintf+0x5f2>
    6864:	d5 14       	cp	r13, r5
    6866:	50 f4       	brcc	.+20     	; 0x687c <vfprintf+0x5f2>
    6868:	b7 01       	movw	r22, r14
    686a:	80 e2       	ldi	r24, 0x20	; 32
    686c:	90 e0       	ldi	r25, 0x00	; 0
    686e:	0e d4       	rcall	.+2076   	; 0x708c <fputc>
    6870:	d3 94       	inc	r13
    6872:	f8 cf       	rjmp	.-16     	; 0x6864 <vfprintf+0x5da>
    6874:	d5 14       	cp	r13, r5
    6876:	10 f4       	brcc	.+4      	; 0x687c <vfprintf+0x5f2>
    6878:	5d 18       	sub	r5, r13
    687a:	01 c0       	rjmp	.+2      	; 0x687e <vfprintf+0x5f4>
    687c:	51 2c       	mov	r5, r1
    687e:	04 ff       	sbrs	r16, 4
    6880:	0f c0       	rjmp	.+30     	; 0x68a0 <vfprintf+0x616>
    6882:	b7 01       	movw	r22, r14
    6884:	80 e3       	ldi	r24, 0x30	; 48
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	01 d4       	rcall	.+2050   	; 0x708c <fputc>
    688a:	02 ff       	sbrs	r16, 2
    688c:	16 c0       	rjmp	.+44     	; 0x68ba <vfprintf+0x630>
    688e:	01 fd       	sbrc	r16, 1
    6890:	03 c0       	rjmp	.+6      	; 0x6898 <vfprintf+0x60e>
    6892:	88 e7       	ldi	r24, 0x78	; 120
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	02 c0       	rjmp	.+4      	; 0x689c <vfprintf+0x612>
    6898:	88 e5       	ldi	r24, 0x58	; 88
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	b7 01       	movw	r22, r14
    689e:	0c c0       	rjmp	.+24     	; 0x68b8 <vfprintf+0x62e>
    68a0:	80 2f       	mov	r24, r16
    68a2:	86 78       	andi	r24, 0x86	; 134
    68a4:	51 f0       	breq	.+20     	; 0x68ba <vfprintf+0x630>
    68a6:	01 ff       	sbrs	r16, 1
    68a8:	02 c0       	rjmp	.+4      	; 0x68ae <vfprintf+0x624>
    68aa:	8b e2       	ldi	r24, 0x2B	; 43
    68ac:	01 c0       	rjmp	.+2      	; 0x68b0 <vfprintf+0x626>
    68ae:	80 e2       	ldi	r24, 0x20	; 32
    68b0:	07 fd       	sbrc	r16, 7
    68b2:	8d e2       	ldi	r24, 0x2D	; 45
    68b4:	b7 01       	movw	r22, r14
    68b6:	90 e0       	ldi	r25, 0x00	; 0
    68b8:	e9 d3       	rcall	.+2002   	; 0x708c <fputc>
    68ba:	c1 16       	cp	r12, r17
    68bc:	30 f4       	brcc	.+12     	; 0x68ca <vfprintf+0x640>
    68be:	b7 01       	movw	r22, r14
    68c0:	80 e3       	ldi	r24, 0x30	; 48
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	e3 d3       	rcall	.+1990   	; 0x708c <fputc>
    68c6:	11 50       	subi	r17, 0x01	; 1
    68c8:	f8 cf       	rjmp	.-16     	; 0x68ba <vfprintf+0x630>
    68ca:	ca 94       	dec	r12
    68cc:	f3 01       	movw	r30, r6
    68ce:	ec 0d       	add	r30, r12
    68d0:	f1 1d       	adc	r31, r1
    68d2:	80 81       	ld	r24, Z
    68d4:	b7 01       	movw	r22, r14
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	d9 d3       	rcall	.+1970   	; 0x708c <fputc>
    68da:	c1 10       	cpse	r12, r1
    68dc:	f6 cf       	rjmp	.-20     	; 0x68ca <vfprintf+0x640>
    68de:	15 c0       	rjmp	.+42     	; 0x690a <vfprintf+0x680>
    68e0:	f4 e0       	ldi	r31, 0x04	; 4
    68e2:	f5 15       	cp	r31, r5
    68e4:	50 f5       	brcc	.+84     	; 0x693a <vfprintf+0x6b0>
    68e6:	84 e0       	ldi	r24, 0x04	; 4
    68e8:	58 1a       	sub	r5, r24
    68ea:	93 fe       	sbrs	r9, 3
    68ec:	1e c0       	rjmp	.+60     	; 0x692a <vfprintf+0x6a0>
    68ee:	01 11       	cpse	r16, r1
    68f0:	25 c0       	rjmp	.+74     	; 0x693c <vfprintf+0x6b2>
    68f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    68f4:	23 ff       	sbrs	r18, 3
    68f6:	27 c0       	rjmp	.+78     	; 0x6946 <vfprintf+0x6bc>
    68f8:	0a e9       	ldi	r16, 0x9A	; 154
    68fa:	11 e0       	ldi	r17, 0x01	; 1
    68fc:	39 2d       	mov	r19, r9
    68fe:	30 71       	andi	r19, 0x10	; 16
    6900:	93 2e       	mov	r9, r19
    6902:	f8 01       	movw	r30, r16
    6904:	84 91       	lpm	r24, Z
    6906:	81 11       	cpse	r24, r1
    6908:	21 c0       	rjmp	.+66     	; 0x694c <vfprintf+0x6c2>
    690a:	55 20       	and	r5, r5
    690c:	09 f4       	brne	.+2      	; 0x6910 <vfprintf+0x686>
    690e:	fc cc       	rjmp	.-1544   	; 0x6308 <vfprintf+0x7e>
    6910:	b7 01       	movw	r22, r14
    6912:	80 e2       	ldi	r24, 0x20	; 32
    6914:	90 e0       	ldi	r25, 0x00	; 0
    6916:	ba d3       	rcall	.+1908   	; 0x708c <fputc>
    6918:	5a 94       	dec	r5
    691a:	f7 cf       	rjmp	.-18     	; 0x690a <vfprintf+0x680>
    691c:	f7 01       	movw	r30, r14
    691e:	86 81       	ldd	r24, Z+6	; 0x06
    6920:	97 81       	ldd	r25, Z+7	; 0x07
    6922:	23 c0       	rjmp	.+70     	; 0x696a <vfprintf+0x6e0>
    6924:	8f ef       	ldi	r24, 0xFF	; 255
    6926:	9f ef       	ldi	r25, 0xFF	; 255
    6928:	20 c0       	rjmp	.+64     	; 0x696a <vfprintf+0x6e0>
    692a:	b7 01       	movw	r22, r14
    692c:	80 e2       	ldi	r24, 0x20	; 32
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	ad d3       	rcall	.+1882   	; 0x708c <fputc>
    6932:	5a 94       	dec	r5
    6934:	51 10       	cpse	r5, r1
    6936:	f9 cf       	rjmp	.-14     	; 0x692a <vfprintf+0x6a0>
    6938:	da cf       	rjmp	.-76     	; 0x68ee <vfprintf+0x664>
    693a:	51 2c       	mov	r5, r1
    693c:	b7 01       	movw	r22, r14
    693e:	80 2f       	mov	r24, r16
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	a4 d3       	rcall	.+1864   	; 0x708c <fputc>
    6944:	d6 cf       	rjmp	.-84     	; 0x68f2 <vfprintf+0x668>
    6946:	0e e9       	ldi	r16, 0x9E	; 158
    6948:	11 e0       	ldi	r17, 0x01	; 1
    694a:	d8 cf       	rjmp	.-80     	; 0x68fc <vfprintf+0x672>
    694c:	91 10       	cpse	r9, r1
    694e:	80 52       	subi	r24, 0x20	; 32
    6950:	b7 01       	movw	r22, r14
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	9b d3       	rcall	.+1846   	; 0x708c <fputc>
    6956:	0f 5f       	subi	r16, 0xFF	; 255
    6958:	1f 4f       	sbci	r17, 0xFF	; 255
    695a:	d3 cf       	rjmp	.-90     	; 0x6902 <vfprintf+0x678>
    695c:	23 e0       	ldi	r18, 0x03	; 3
    695e:	25 15       	cp	r18, r5
    6960:	10 f4       	brcc	.+4      	; 0x6966 <vfprintf+0x6dc>
    6962:	83 e0       	ldi	r24, 0x03	; 3
    6964:	c1 cf       	rjmp	.-126    	; 0x68e8 <vfprintf+0x65e>
    6966:	51 2c       	mov	r5, r1
    6968:	c4 cf       	rjmp	.-120    	; 0x68f2 <vfprintf+0x668>
    696a:	60 96       	adiw	r28, 0x10	; 16
    696c:	0f b6       	in	r0, 0x3f	; 63
    696e:	f8 94       	cli
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	0f be       	out	0x3f, r0	; 63
    6974:	cd bf       	out	0x3d, r28	; 61
    6976:	df 91       	pop	r29
    6978:	cf 91       	pop	r28
    697a:	1f 91       	pop	r17
    697c:	0f 91       	pop	r16
    697e:	ff 90       	pop	r15
    6980:	ef 90       	pop	r14
    6982:	df 90       	pop	r13
    6984:	cf 90       	pop	r12
    6986:	bf 90       	pop	r11
    6988:	af 90       	pop	r10
    698a:	9f 90       	pop	r9
    698c:	8f 90       	pop	r8
    698e:	7f 90       	pop	r7
    6990:	6f 90       	pop	r6
    6992:	5f 90       	pop	r5
    6994:	4f 90       	pop	r4
    6996:	3f 90       	pop	r3
    6998:	2f 90       	pop	r2
    699a:	08 95       	ret

0000699c <__divsf3>:
    699c:	12 d0       	rcall	.+36     	; 0x69c2 <__divsf3x>
    699e:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__fp_round>
    69a2:	0e 94 1c 24 	call	0x4838	; 0x4838 <__fp_pscB>
    69a6:	58 f0       	brcs	.+22     	; 0x69be <__divsf3+0x22>
    69a8:	0e 94 15 24 	call	0x482a	; 0x482a <__fp_pscA>
    69ac:	40 f0       	brcs	.+16     	; 0x69be <__divsf3+0x22>
    69ae:	29 f4       	brne	.+10     	; 0x69ba <__divsf3+0x1e>
    69b0:	5f 3f       	cpi	r21, 0xFF	; 255
    69b2:	29 f0       	breq	.+10     	; 0x69be <__divsf3+0x22>
    69b4:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__fp_inf>
    69b8:	51 11       	cpse	r21, r1
    69ba:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <__fp_szero>
    69be:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__fp_nan>

000069c2 <__divsf3x>:
    69c2:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <__fp_split3>
    69c6:	68 f3       	brcs	.-38     	; 0x69a2 <__divsf3+0x6>

000069c8 <__divsf3_pse>:
    69c8:	99 23       	and	r25, r25
    69ca:	b1 f3       	breq	.-20     	; 0x69b8 <__divsf3+0x1c>
    69cc:	55 23       	and	r21, r21
    69ce:	91 f3       	breq	.-28     	; 0x69b4 <__divsf3+0x18>
    69d0:	95 1b       	sub	r25, r21
    69d2:	55 0b       	sbc	r21, r21
    69d4:	bb 27       	eor	r27, r27
    69d6:	aa 27       	eor	r26, r26
    69d8:	62 17       	cp	r22, r18
    69da:	73 07       	cpc	r23, r19
    69dc:	84 07       	cpc	r24, r20
    69de:	38 f0       	brcs	.+14     	; 0x69ee <__divsf3_pse+0x26>
    69e0:	9f 5f       	subi	r25, 0xFF	; 255
    69e2:	5f 4f       	sbci	r21, 0xFF	; 255
    69e4:	22 0f       	add	r18, r18
    69e6:	33 1f       	adc	r19, r19
    69e8:	44 1f       	adc	r20, r20
    69ea:	aa 1f       	adc	r26, r26
    69ec:	a9 f3       	breq	.-22     	; 0x69d8 <__divsf3_pse+0x10>
    69ee:	35 d0       	rcall	.+106    	; 0x6a5a <__divsf3_pse+0x92>
    69f0:	0e 2e       	mov	r0, r30
    69f2:	3a f0       	brmi	.+14     	; 0x6a02 <__divsf3_pse+0x3a>
    69f4:	e0 e8       	ldi	r30, 0x80	; 128
    69f6:	32 d0       	rcall	.+100    	; 0x6a5c <__divsf3_pse+0x94>
    69f8:	91 50       	subi	r25, 0x01	; 1
    69fa:	50 40       	sbci	r21, 0x00	; 0
    69fc:	e6 95       	lsr	r30
    69fe:	00 1c       	adc	r0, r0
    6a00:	ca f7       	brpl	.-14     	; 0x69f4 <__divsf3_pse+0x2c>
    6a02:	2b d0       	rcall	.+86     	; 0x6a5a <__divsf3_pse+0x92>
    6a04:	fe 2f       	mov	r31, r30
    6a06:	29 d0       	rcall	.+82     	; 0x6a5a <__divsf3_pse+0x92>
    6a08:	66 0f       	add	r22, r22
    6a0a:	77 1f       	adc	r23, r23
    6a0c:	88 1f       	adc	r24, r24
    6a0e:	bb 1f       	adc	r27, r27
    6a10:	26 17       	cp	r18, r22
    6a12:	37 07       	cpc	r19, r23
    6a14:	48 07       	cpc	r20, r24
    6a16:	ab 07       	cpc	r26, r27
    6a18:	b0 e8       	ldi	r27, 0x80	; 128
    6a1a:	09 f0       	breq	.+2      	; 0x6a1e <__divsf3_pse+0x56>
    6a1c:	bb 0b       	sbc	r27, r27
    6a1e:	80 2d       	mov	r24, r0
    6a20:	bf 01       	movw	r22, r30
    6a22:	ff 27       	eor	r31, r31
    6a24:	93 58       	subi	r25, 0x83	; 131
    6a26:	5f 4f       	sbci	r21, 0xFF	; 255
    6a28:	3a f0       	brmi	.+14     	; 0x6a38 <__divsf3_pse+0x70>
    6a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    6a2c:	51 05       	cpc	r21, r1
    6a2e:	78 f0       	brcs	.+30     	; 0x6a4e <__divsf3_pse+0x86>
    6a30:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__fp_inf>
    6a34:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <__fp_szero>
    6a38:	5f 3f       	cpi	r21, 0xFF	; 255
    6a3a:	e4 f3       	brlt	.-8      	; 0x6a34 <__divsf3_pse+0x6c>
    6a3c:	98 3e       	cpi	r25, 0xE8	; 232
    6a3e:	d4 f3       	brlt	.-12     	; 0x6a34 <__divsf3_pse+0x6c>
    6a40:	86 95       	lsr	r24
    6a42:	77 95       	ror	r23
    6a44:	67 95       	ror	r22
    6a46:	b7 95       	ror	r27
    6a48:	f7 95       	ror	r31
    6a4a:	9f 5f       	subi	r25, 0xFF	; 255
    6a4c:	c9 f7       	brne	.-14     	; 0x6a40 <__divsf3_pse+0x78>
    6a4e:	88 0f       	add	r24, r24
    6a50:	91 1d       	adc	r25, r1
    6a52:	96 95       	lsr	r25
    6a54:	87 95       	ror	r24
    6a56:	97 f9       	bld	r25, 7
    6a58:	08 95       	ret
    6a5a:	e1 e0       	ldi	r30, 0x01	; 1
    6a5c:	66 0f       	add	r22, r22
    6a5e:	77 1f       	adc	r23, r23
    6a60:	88 1f       	adc	r24, r24
    6a62:	bb 1f       	adc	r27, r27
    6a64:	62 17       	cp	r22, r18
    6a66:	73 07       	cpc	r23, r19
    6a68:	84 07       	cpc	r24, r20
    6a6a:	ba 07       	cpc	r27, r26
    6a6c:	20 f0       	brcs	.+8      	; 0x6a76 <__divsf3_pse+0xae>
    6a6e:	62 1b       	sub	r22, r18
    6a70:	73 0b       	sbc	r23, r19
    6a72:	84 0b       	sbc	r24, r20
    6a74:	ba 0b       	sbc	r27, r26
    6a76:	ee 1f       	adc	r30, r30
    6a78:	88 f7       	brcc	.-30     	; 0x6a5c <__divsf3_pse+0x94>
    6a7a:	e0 95       	com	r30
    6a7c:	08 95       	ret

00006a7e <__floatunsisf>:
    6a7e:	e8 94       	clt
    6a80:	09 c0       	rjmp	.+18     	; 0x6a94 <__floatsisf+0x12>

00006a82 <__floatsisf>:
    6a82:	97 fb       	bst	r25, 7
    6a84:	3e f4       	brtc	.+14     	; 0x6a94 <__floatsisf+0x12>
    6a86:	90 95       	com	r25
    6a88:	80 95       	com	r24
    6a8a:	70 95       	com	r23
    6a8c:	61 95       	neg	r22
    6a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a90:	8f 4f       	sbci	r24, 0xFF	; 255
    6a92:	9f 4f       	sbci	r25, 0xFF	; 255
    6a94:	99 23       	and	r25, r25
    6a96:	a9 f0       	breq	.+42     	; 0x6ac2 <__floatsisf+0x40>
    6a98:	f9 2f       	mov	r31, r25
    6a9a:	96 e9       	ldi	r25, 0x96	; 150
    6a9c:	bb 27       	eor	r27, r27
    6a9e:	93 95       	inc	r25
    6aa0:	f6 95       	lsr	r31
    6aa2:	87 95       	ror	r24
    6aa4:	77 95       	ror	r23
    6aa6:	67 95       	ror	r22
    6aa8:	b7 95       	ror	r27
    6aaa:	f1 11       	cpse	r31, r1
    6aac:	f8 cf       	rjmp	.-16     	; 0x6a9e <__floatsisf+0x1c>
    6aae:	fa f4       	brpl	.+62     	; 0x6aee <__floatsisf+0x6c>
    6ab0:	bb 0f       	add	r27, r27
    6ab2:	11 f4       	brne	.+4      	; 0x6ab8 <__floatsisf+0x36>
    6ab4:	60 ff       	sbrs	r22, 0
    6ab6:	1b c0       	rjmp	.+54     	; 0x6aee <__floatsisf+0x6c>
    6ab8:	6f 5f       	subi	r22, 0xFF	; 255
    6aba:	7f 4f       	sbci	r23, 0xFF	; 255
    6abc:	8f 4f       	sbci	r24, 0xFF	; 255
    6abe:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac0:	16 c0       	rjmp	.+44     	; 0x6aee <__floatsisf+0x6c>
    6ac2:	88 23       	and	r24, r24
    6ac4:	11 f0       	breq	.+4      	; 0x6aca <__floatsisf+0x48>
    6ac6:	96 e9       	ldi	r25, 0x96	; 150
    6ac8:	11 c0       	rjmp	.+34     	; 0x6aec <__floatsisf+0x6a>
    6aca:	77 23       	and	r23, r23
    6acc:	21 f0       	breq	.+8      	; 0x6ad6 <__floatsisf+0x54>
    6ace:	9e e8       	ldi	r25, 0x8E	; 142
    6ad0:	87 2f       	mov	r24, r23
    6ad2:	76 2f       	mov	r23, r22
    6ad4:	05 c0       	rjmp	.+10     	; 0x6ae0 <__floatsisf+0x5e>
    6ad6:	66 23       	and	r22, r22
    6ad8:	71 f0       	breq	.+28     	; 0x6af6 <__floatsisf+0x74>
    6ada:	96 e8       	ldi	r25, 0x86	; 134
    6adc:	86 2f       	mov	r24, r22
    6ade:	70 e0       	ldi	r23, 0x00	; 0
    6ae0:	60 e0       	ldi	r22, 0x00	; 0
    6ae2:	2a f0       	brmi	.+10     	; 0x6aee <__floatsisf+0x6c>
    6ae4:	9a 95       	dec	r25
    6ae6:	66 0f       	add	r22, r22
    6ae8:	77 1f       	adc	r23, r23
    6aea:	88 1f       	adc	r24, r24
    6aec:	da f7       	brpl	.-10     	; 0x6ae4 <__floatsisf+0x62>
    6aee:	88 0f       	add	r24, r24
    6af0:	96 95       	lsr	r25
    6af2:	87 95       	ror	r24
    6af4:	97 f9       	bld	r25, 7
    6af6:	08 95       	ret

00006af8 <__gesf2>:
    6af8:	0e 94 c4 22 	call	0x4588	; 0x4588 <__fp_cmp>
    6afc:	08 f4       	brcc	.+2      	; 0x6b00 <__gesf2+0x8>
    6afe:	8f ef       	ldi	r24, 0xFF	; 255
    6b00:	08 95       	ret

00006b02 <__udivmodsi4>:
    6b02:	a1 e2       	ldi	r26, 0x21	; 33
    6b04:	1a 2e       	mov	r1, r26
    6b06:	aa 1b       	sub	r26, r26
    6b08:	bb 1b       	sub	r27, r27
    6b0a:	fd 01       	movw	r30, r26
    6b0c:	0d c0       	rjmp	.+26     	; 0x6b28 <__udivmodsi4_ep>

00006b0e <__udivmodsi4_loop>:
    6b0e:	aa 1f       	adc	r26, r26
    6b10:	bb 1f       	adc	r27, r27
    6b12:	ee 1f       	adc	r30, r30
    6b14:	ff 1f       	adc	r31, r31
    6b16:	a2 17       	cp	r26, r18
    6b18:	b3 07       	cpc	r27, r19
    6b1a:	e4 07       	cpc	r30, r20
    6b1c:	f5 07       	cpc	r31, r21
    6b1e:	20 f0       	brcs	.+8      	; 0x6b28 <__udivmodsi4_ep>
    6b20:	a2 1b       	sub	r26, r18
    6b22:	b3 0b       	sbc	r27, r19
    6b24:	e4 0b       	sbc	r30, r20
    6b26:	f5 0b       	sbc	r31, r21

00006b28 <__udivmodsi4_ep>:
    6b28:	66 1f       	adc	r22, r22
    6b2a:	77 1f       	adc	r23, r23
    6b2c:	88 1f       	adc	r24, r24
    6b2e:	99 1f       	adc	r25, r25
    6b30:	1a 94       	dec	r1
    6b32:	69 f7       	brne	.-38     	; 0x6b0e <__udivmodsi4_loop>
    6b34:	60 95       	com	r22
    6b36:	70 95       	com	r23
    6b38:	80 95       	com	r24
    6b3a:	90 95       	com	r25
    6b3c:	9b 01       	movw	r18, r22
    6b3e:	ac 01       	movw	r20, r24
    6b40:	bd 01       	movw	r22, r26
    6b42:	cf 01       	movw	r24, r30
    6b44:	08 95       	ret

00006b46 <__tablejump2__>:
    6b46:	ee 0f       	add	r30, r30
    6b48:	ff 1f       	adc	r31, r31
    6b4a:	88 1f       	adc	r24, r24
    6b4c:	8b bf       	out	0x3b, r24	; 59
    6b4e:	07 90       	elpm	r0, Z+
    6b50:	f6 91       	elpm	r31, Z
    6b52:	e0 2d       	mov	r30, r0
    6b54:	19 94       	eijmp

00006b56 <__umulhisi3>:
    6b56:	a2 9f       	mul	r26, r18
    6b58:	b0 01       	movw	r22, r0
    6b5a:	b3 9f       	mul	r27, r19
    6b5c:	c0 01       	movw	r24, r0
    6b5e:	a3 9f       	mul	r26, r19
    6b60:	70 0d       	add	r23, r0
    6b62:	81 1d       	adc	r24, r1
    6b64:	11 24       	eor	r1, r1
    6b66:	91 1d       	adc	r25, r1
    6b68:	b2 9f       	mul	r27, r18
    6b6a:	70 0d       	add	r23, r0
    6b6c:	81 1d       	adc	r24, r1
    6b6e:	11 24       	eor	r1, r1
    6b70:	91 1d       	adc	r25, r1
    6b72:	08 95       	ret

00006b74 <calloc>:
    6b74:	0f 93       	push	r16
    6b76:	1f 93       	push	r17
    6b78:	cf 93       	push	r28
    6b7a:	df 93       	push	r29
    6b7c:	86 9f       	mul	r24, r22
    6b7e:	80 01       	movw	r16, r0
    6b80:	87 9f       	mul	r24, r23
    6b82:	10 0d       	add	r17, r0
    6b84:	96 9f       	mul	r25, r22
    6b86:	10 0d       	add	r17, r0
    6b88:	11 24       	eor	r1, r1
    6b8a:	c8 01       	movw	r24, r16
    6b8c:	0d d0       	rcall	.+26     	; 0x6ba8 <malloc>
    6b8e:	ec 01       	movw	r28, r24
    6b90:	00 97       	sbiw	r24, 0x00	; 0
    6b92:	21 f0       	breq	.+8      	; 0x6b9c <calloc+0x28>
    6b94:	a8 01       	movw	r20, r16
    6b96:	60 e0       	ldi	r22, 0x00	; 0
    6b98:	70 e0       	ldi	r23, 0x00	; 0
    6b9a:	17 d2       	rcall	.+1070   	; 0x6fca <memset>
    6b9c:	ce 01       	movw	r24, r28
    6b9e:	df 91       	pop	r29
    6ba0:	cf 91       	pop	r28
    6ba2:	1f 91       	pop	r17
    6ba4:	0f 91       	pop	r16
    6ba6:	08 95       	ret

00006ba8 <malloc>:
    6ba8:	0f 93       	push	r16
    6baa:	1f 93       	push	r17
    6bac:	cf 93       	push	r28
    6bae:	df 93       	push	r29
    6bb0:	82 30       	cpi	r24, 0x02	; 2
    6bb2:	91 05       	cpc	r25, r1
    6bb4:	10 f4       	brcc	.+4      	; 0x6bba <malloc+0x12>
    6bb6:	82 e0       	ldi	r24, 0x02	; 2
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	e0 91 cb 15 	lds	r30, 0x15CB	; 0x8015cb <__flp>
    6bbe:	f0 91 cc 15 	lds	r31, 0x15CC	; 0x8015cc <__flp+0x1>
    6bc2:	20 e0       	ldi	r18, 0x00	; 0
    6bc4:	30 e0       	ldi	r19, 0x00	; 0
    6bc6:	a0 e0       	ldi	r26, 0x00	; 0
    6bc8:	b0 e0       	ldi	r27, 0x00	; 0
    6bca:	30 97       	sbiw	r30, 0x00	; 0
    6bcc:	19 f1       	breq	.+70     	; 0x6c14 <malloc+0x6c>
    6bce:	40 81       	ld	r20, Z
    6bd0:	51 81       	ldd	r21, Z+1	; 0x01
    6bd2:	02 81       	ldd	r16, Z+2	; 0x02
    6bd4:	13 81       	ldd	r17, Z+3	; 0x03
    6bd6:	48 17       	cp	r20, r24
    6bd8:	59 07       	cpc	r21, r25
    6bda:	c8 f0       	brcs	.+50     	; 0x6c0e <malloc+0x66>
    6bdc:	84 17       	cp	r24, r20
    6bde:	95 07       	cpc	r25, r21
    6be0:	69 f4       	brne	.+26     	; 0x6bfc <malloc+0x54>
    6be2:	10 97       	sbiw	r26, 0x00	; 0
    6be4:	31 f0       	breq	.+12     	; 0x6bf2 <malloc+0x4a>
    6be6:	12 96       	adiw	r26, 0x02	; 2
    6be8:	0c 93       	st	X, r16
    6bea:	12 97       	sbiw	r26, 0x02	; 2
    6bec:	13 96       	adiw	r26, 0x03	; 3
    6bee:	1c 93       	st	X, r17
    6bf0:	27 c0       	rjmp	.+78     	; 0x6c40 <malloc+0x98>
    6bf2:	00 93 cb 15 	sts	0x15CB, r16	; 0x8015cb <__flp>
    6bf6:	10 93 cc 15 	sts	0x15CC, r17	; 0x8015cc <__flp+0x1>
    6bfa:	22 c0       	rjmp	.+68     	; 0x6c40 <malloc+0x98>
    6bfc:	21 15       	cp	r18, r1
    6bfe:	31 05       	cpc	r19, r1
    6c00:	19 f0       	breq	.+6      	; 0x6c08 <malloc+0x60>
    6c02:	42 17       	cp	r20, r18
    6c04:	53 07       	cpc	r21, r19
    6c06:	18 f4       	brcc	.+6      	; 0x6c0e <malloc+0x66>
    6c08:	9a 01       	movw	r18, r20
    6c0a:	bd 01       	movw	r22, r26
    6c0c:	ef 01       	movw	r28, r30
    6c0e:	df 01       	movw	r26, r30
    6c10:	f8 01       	movw	r30, r16
    6c12:	db cf       	rjmp	.-74     	; 0x6bca <malloc+0x22>
    6c14:	21 15       	cp	r18, r1
    6c16:	31 05       	cpc	r19, r1
    6c18:	f9 f0       	breq	.+62     	; 0x6c58 <malloc+0xb0>
    6c1a:	28 1b       	sub	r18, r24
    6c1c:	39 0b       	sbc	r19, r25
    6c1e:	24 30       	cpi	r18, 0x04	; 4
    6c20:	31 05       	cpc	r19, r1
    6c22:	80 f4       	brcc	.+32     	; 0x6c44 <malloc+0x9c>
    6c24:	8a 81       	ldd	r24, Y+2	; 0x02
    6c26:	9b 81       	ldd	r25, Y+3	; 0x03
    6c28:	61 15       	cp	r22, r1
    6c2a:	71 05       	cpc	r23, r1
    6c2c:	21 f0       	breq	.+8      	; 0x6c36 <malloc+0x8e>
    6c2e:	fb 01       	movw	r30, r22
    6c30:	93 83       	std	Z+3, r25	; 0x03
    6c32:	82 83       	std	Z+2, r24	; 0x02
    6c34:	04 c0       	rjmp	.+8      	; 0x6c3e <malloc+0x96>
    6c36:	90 93 cc 15 	sts	0x15CC, r25	; 0x8015cc <__flp+0x1>
    6c3a:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <__flp>
    6c3e:	fe 01       	movw	r30, r28
    6c40:	32 96       	adiw	r30, 0x02	; 2
    6c42:	44 c0       	rjmp	.+136    	; 0x6ccc <malloc+0x124>
    6c44:	fe 01       	movw	r30, r28
    6c46:	e2 0f       	add	r30, r18
    6c48:	f3 1f       	adc	r31, r19
    6c4a:	81 93       	st	Z+, r24
    6c4c:	91 93       	st	Z+, r25
    6c4e:	22 50       	subi	r18, 0x02	; 2
    6c50:	31 09       	sbc	r19, r1
    6c52:	39 83       	std	Y+1, r19	; 0x01
    6c54:	28 83       	st	Y, r18
    6c56:	3a c0       	rjmp	.+116    	; 0x6ccc <malloc+0x124>
    6c58:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <__brkval>
    6c5c:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <__brkval+0x1>
    6c60:	23 2b       	or	r18, r19
    6c62:	41 f4       	brne	.+16     	; 0x6c74 <malloc+0xcc>
    6c64:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6c68:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6c6c:	30 93 ca 15 	sts	0x15CA, r19	; 0x8015ca <__brkval+0x1>
    6c70:	20 93 c9 15 	sts	0x15C9, r18	; 0x8015c9 <__brkval>
    6c74:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6c78:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6c7c:	21 15       	cp	r18, r1
    6c7e:	31 05       	cpc	r19, r1
    6c80:	41 f4       	brne	.+16     	; 0x6c92 <malloc+0xea>
    6c82:	2d b7       	in	r18, 0x3d	; 61
    6c84:	3e b7       	in	r19, 0x3e	; 62
    6c86:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6c8a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6c8e:	24 1b       	sub	r18, r20
    6c90:	35 0b       	sbc	r19, r21
    6c92:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <__brkval>
    6c96:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <__brkval+0x1>
    6c9a:	e2 17       	cp	r30, r18
    6c9c:	f3 07       	cpc	r31, r19
    6c9e:	a0 f4       	brcc	.+40     	; 0x6cc8 <malloc+0x120>
    6ca0:	2e 1b       	sub	r18, r30
    6ca2:	3f 0b       	sbc	r19, r31
    6ca4:	28 17       	cp	r18, r24
    6ca6:	39 07       	cpc	r19, r25
    6ca8:	78 f0       	brcs	.+30     	; 0x6cc8 <malloc+0x120>
    6caa:	ac 01       	movw	r20, r24
    6cac:	4e 5f       	subi	r20, 0xFE	; 254
    6cae:	5f 4f       	sbci	r21, 0xFF	; 255
    6cb0:	24 17       	cp	r18, r20
    6cb2:	35 07       	cpc	r19, r21
    6cb4:	48 f0       	brcs	.+18     	; 0x6cc8 <malloc+0x120>
    6cb6:	4e 0f       	add	r20, r30
    6cb8:	5f 1f       	adc	r21, r31
    6cba:	50 93 ca 15 	sts	0x15CA, r21	; 0x8015ca <__brkval+0x1>
    6cbe:	40 93 c9 15 	sts	0x15C9, r20	; 0x8015c9 <__brkval>
    6cc2:	81 93       	st	Z+, r24
    6cc4:	91 93       	st	Z+, r25
    6cc6:	02 c0       	rjmp	.+4      	; 0x6ccc <malloc+0x124>
    6cc8:	e0 e0       	ldi	r30, 0x00	; 0
    6cca:	f0 e0       	ldi	r31, 0x00	; 0
    6ccc:	cf 01       	movw	r24, r30
    6cce:	df 91       	pop	r29
    6cd0:	cf 91       	pop	r28
    6cd2:	1f 91       	pop	r17
    6cd4:	0f 91       	pop	r16
    6cd6:	08 95       	ret

00006cd8 <free>:
    6cd8:	cf 93       	push	r28
    6cda:	df 93       	push	r29
    6cdc:	00 97       	sbiw	r24, 0x00	; 0
    6cde:	09 f4       	brne	.+2      	; 0x6ce2 <free+0xa>
    6ce0:	81 c0       	rjmp	.+258    	; 0x6de4 <free+0x10c>
    6ce2:	fc 01       	movw	r30, r24
    6ce4:	32 97       	sbiw	r30, 0x02	; 2
    6ce6:	13 82       	std	Z+3, r1	; 0x03
    6ce8:	12 82       	std	Z+2, r1	; 0x02
    6cea:	a0 91 cb 15 	lds	r26, 0x15CB	; 0x8015cb <__flp>
    6cee:	b0 91 cc 15 	lds	r27, 0x15CC	; 0x8015cc <__flp+0x1>
    6cf2:	10 97       	sbiw	r26, 0x00	; 0
    6cf4:	81 f4       	brne	.+32     	; 0x6d16 <free+0x3e>
    6cf6:	20 81       	ld	r18, Z
    6cf8:	31 81       	ldd	r19, Z+1	; 0x01
    6cfa:	82 0f       	add	r24, r18
    6cfc:	93 1f       	adc	r25, r19
    6cfe:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <__brkval>
    6d02:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <__brkval+0x1>
    6d06:	28 17       	cp	r18, r24
    6d08:	39 07       	cpc	r19, r25
    6d0a:	51 f5       	brne	.+84     	; 0x6d60 <free+0x88>
    6d0c:	f0 93 ca 15 	sts	0x15CA, r31	; 0x8015ca <__brkval+0x1>
    6d10:	e0 93 c9 15 	sts	0x15C9, r30	; 0x8015c9 <__brkval>
    6d14:	67 c0       	rjmp	.+206    	; 0x6de4 <free+0x10c>
    6d16:	ed 01       	movw	r28, r26
    6d18:	20 e0       	ldi	r18, 0x00	; 0
    6d1a:	30 e0       	ldi	r19, 0x00	; 0
    6d1c:	ce 17       	cp	r28, r30
    6d1e:	df 07       	cpc	r29, r31
    6d20:	40 f4       	brcc	.+16     	; 0x6d32 <free+0x5a>
    6d22:	4a 81       	ldd	r20, Y+2	; 0x02
    6d24:	5b 81       	ldd	r21, Y+3	; 0x03
    6d26:	9e 01       	movw	r18, r28
    6d28:	41 15       	cp	r20, r1
    6d2a:	51 05       	cpc	r21, r1
    6d2c:	f1 f0       	breq	.+60     	; 0x6d6a <free+0x92>
    6d2e:	ea 01       	movw	r28, r20
    6d30:	f5 cf       	rjmp	.-22     	; 0x6d1c <free+0x44>
    6d32:	d3 83       	std	Z+3, r29	; 0x03
    6d34:	c2 83       	std	Z+2, r28	; 0x02
    6d36:	40 81       	ld	r20, Z
    6d38:	51 81       	ldd	r21, Z+1	; 0x01
    6d3a:	84 0f       	add	r24, r20
    6d3c:	95 1f       	adc	r25, r21
    6d3e:	c8 17       	cp	r28, r24
    6d40:	d9 07       	cpc	r29, r25
    6d42:	59 f4       	brne	.+22     	; 0x6d5a <free+0x82>
    6d44:	88 81       	ld	r24, Y
    6d46:	99 81       	ldd	r25, Y+1	; 0x01
    6d48:	84 0f       	add	r24, r20
    6d4a:	95 1f       	adc	r25, r21
    6d4c:	02 96       	adiw	r24, 0x02	; 2
    6d4e:	91 83       	std	Z+1, r25	; 0x01
    6d50:	80 83       	st	Z, r24
    6d52:	8a 81       	ldd	r24, Y+2	; 0x02
    6d54:	9b 81       	ldd	r25, Y+3	; 0x03
    6d56:	93 83       	std	Z+3, r25	; 0x03
    6d58:	82 83       	std	Z+2, r24	; 0x02
    6d5a:	21 15       	cp	r18, r1
    6d5c:	31 05       	cpc	r19, r1
    6d5e:	29 f4       	brne	.+10     	; 0x6d6a <free+0x92>
    6d60:	f0 93 cc 15 	sts	0x15CC, r31	; 0x8015cc <__flp+0x1>
    6d64:	e0 93 cb 15 	sts	0x15CB, r30	; 0x8015cb <__flp>
    6d68:	3d c0       	rjmp	.+122    	; 0x6de4 <free+0x10c>
    6d6a:	e9 01       	movw	r28, r18
    6d6c:	fb 83       	std	Y+3, r31	; 0x03
    6d6e:	ea 83       	std	Y+2, r30	; 0x02
    6d70:	49 91       	ld	r20, Y+
    6d72:	59 91       	ld	r21, Y+
    6d74:	c4 0f       	add	r28, r20
    6d76:	d5 1f       	adc	r29, r21
    6d78:	ec 17       	cp	r30, r28
    6d7a:	fd 07       	cpc	r31, r29
    6d7c:	61 f4       	brne	.+24     	; 0x6d96 <free+0xbe>
    6d7e:	80 81       	ld	r24, Z
    6d80:	91 81       	ldd	r25, Z+1	; 0x01
    6d82:	84 0f       	add	r24, r20
    6d84:	95 1f       	adc	r25, r21
    6d86:	02 96       	adiw	r24, 0x02	; 2
    6d88:	e9 01       	movw	r28, r18
    6d8a:	99 83       	std	Y+1, r25	; 0x01
    6d8c:	88 83       	st	Y, r24
    6d8e:	82 81       	ldd	r24, Z+2	; 0x02
    6d90:	93 81       	ldd	r25, Z+3	; 0x03
    6d92:	9b 83       	std	Y+3, r25	; 0x03
    6d94:	8a 83       	std	Y+2, r24	; 0x02
    6d96:	e0 e0       	ldi	r30, 0x00	; 0
    6d98:	f0 e0       	ldi	r31, 0x00	; 0
    6d9a:	12 96       	adiw	r26, 0x02	; 2
    6d9c:	8d 91       	ld	r24, X+
    6d9e:	9c 91       	ld	r25, X
    6da0:	13 97       	sbiw	r26, 0x03	; 3
    6da2:	00 97       	sbiw	r24, 0x00	; 0
    6da4:	19 f0       	breq	.+6      	; 0x6dac <free+0xd4>
    6da6:	fd 01       	movw	r30, r26
    6da8:	dc 01       	movw	r26, r24
    6daa:	f7 cf       	rjmp	.-18     	; 0x6d9a <free+0xc2>
    6dac:	8d 91       	ld	r24, X+
    6dae:	9c 91       	ld	r25, X
    6db0:	11 97       	sbiw	r26, 0x01	; 1
    6db2:	9d 01       	movw	r18, r26
    6db4:	2e 5f       	subi	r18, 0xFE	; 254
    6db6:	3f 4f       	sbci	r19, 0xFF	; 255
    6db8:	82 0f       	add	r24, r18
    6dba:	93 1f       	adc	r25, r19
    6dbc:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <__brkval>
    6dc0:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <__brkval+0x1>
    6dc4:	28 17       	cp	r18, r24
    6dc6:	39 07       	cpc	r19, r25
    6dc8:	69 f4       	brne	.+26     	; 0x6de4 <free+0x10c>
    6dca:	30 97       	sbiw	r30, 0x00	; 0
    6dcc:	29 f4       	brne	.+10     	; 0x6dd8 <free+0x100>
    6dce:	10 92 cc 15 	sts	0x15CC, r1	; 0x8015cc <__flp+0x1>
    6dd2:	10 92 cb 15 	sts	0x15CB, r1	; 0x8015cb <__flp>
    6dd6:	02 c0       	rjmp	.+4      	; 0x6ddc <free+0x104>
    6dd8:	13 82       	std	Z+3, r1	; 0x03
    6dda:	12 82       	std	Z+2, r1	; 0x02
    6ddc:	b0 93 ca 15 	sts	0x15CA, r27	; 0x8015ca <__brkval+0x1>
    6de0:	a0 93 c9 15 	sts	0x15C9, r26	; 0x8015c9 <__brkval>
    6de4:	df 91       	pop	r29
    6de6:	cf 91       	pop	r28
    6de8:	08 95       	ret

00006dea <abort>:
    6dea:	81 e0       	ldi	r24, 0x01	; 1
    6dec:	90 e0       	ldi	r25, 0x00	; 0
    6dee:	f8 94       	cli
    6df0:	21 c2       	rjmp	.+1090   	; 0x7234 <_exit>

00006df2 <__ftoa_engine>:
    6df2:	28 30       	cpi	r18, 0x08	; 8
    6df4:	08 f0       	brcs	.+2      	; 0x6df8 <__ftoa_engine+0x6>
    6df6:	27 e0       	ldi	r18, 0x07	; 7
    6df8:	33 27       	eor	r19, r19
    6dfa:	da 01       	movw	r26, r20
    6dfc:	99 0f       	add	r25, r25
    6dfe:	31 1d       	adc	r19, r1
    6e00:	87 fd       	sbrc	r24, 7
    6e02:	91 60       	ori	r25, 0x01	; 1
    6e04:	00 96       	adiw	r24, 0x00	; 0
    6e06:	61 05       	cpc	r22, r1
    6e08:	71 05       	cpc	r23, r1
    6e0a:	39 f4       	brne	.+14     	; 0x6e1a <__ftoa_engine+0x28>
    6e0c:	32 60       	ori	r19, 0x02	; 2
    6e0e:	2e 5f       	subi	r18, 0xFE	; 254
    6e10:	3d 93       	st	X+, r19
    6e12:	30 e3       	ldi	r19, 0x30	; 48
    6e14:	2a 95       	dec	r18
    6e16:	e1 f7       	brne	.-8      	; 0x6e10 <__ftoa_engine+0x1e>
    6e18:	08 95       	ret
    6e1a:	9f 3f       	cpi	r25, 0xFF	; 255
    6e1c:	30 f0       	brcs	.+12     	; 0x6e2a <__ftoa_engine+0x38>
    6e1e:	80 38       	cpi	r24, 0x80	; 128
    6e20:	71 05       	cpc	r23, r1
    6e22:	61 05       	cpc	r22, r1
    6e24:	09 f0       	breq	.+2      	; 0x6e28 <__ftoa_engine+0x36>
    6e26:	3c 5f       	subi	r19, 0xFC	; 252
    6e28:	3c 5f       	subi	r19, 0xFC	; 252
    6e2a:	3d 93       	st	X+, r19
    6e2c:	91 30       	cpi	r25, 0x01	; 1
    6e2e:	08 f0       	brcs	.+2      	; 0x6e32 <__ftoa_engine+0x40>
    6e30:	80 68       	ori	r24, 0x80	; 128
    6e32:	91 1d       	adc	r25, r1
    6e34:	df 93       	push	r29
    6e36:	cf 93       	push	r28
    6e38:	1f 93       	push	r17
    6e3a:	0f 93       	push	r16
    6e3c:	ff 92       	push	r15
    6e3e:	ef 92       	push	r14
    6e40:	19 2f       	mov	r17, r25
    6e42:	98 7f       	andi	r25, 0xF8	; 248
    6e44:	96 95       	lsr	r25
    6e46:	e9 2f       	mov	r30, r25
    6e48:	96 95       	lsr	r25
    6e4a:	96 95       	lsr	r25
    6e4c:	e9 0f       	add	r30, r25
    6e4e:	ff 27       	eor	r31, r31
    6e50:	e4 50       	subi	r30, 0x04	; 4
    6e52:	fe 4f       	sbci	r31, 0xFE	; 254
    6e54:	99 27       	eor	r25, r25
    6e56:	33 27       	eor	r19, r19
    6e58:	ee 24       	eor	r14, r14
    6e5a:	ff 24       	eor	r15, r15
    6e5c:	a7 01       	movw	r20, r14
    6e5e:	e7 01       	movw	r28, r14
    6e60:	05 90       	lpm	r0, Z+
    6e62:	08 94       	sec
    6e64:	07 94       	ror	r0
    6e66:	28 f4       	brcc	.+10     	; 0x6e72 <__ftoa_engine+0x80>
    6e68:	36 0f       	add	r19, r22
    6e6a:	e7 1e       	adc	r14, r23
    6e6c:	f8 1e       	adc	r15, r24
    6e6e:	49 1f       	adc	r20, r25
    6e70:	51 1d       	adc	r21, r1
    6e72:	66 0f       	add	r22, r22
    6e74:	77 1f       	adc	r23, r23
    6e76:	88 1f       	adc	r24, r24
    6e78:	99 1f       	adc	r25, r25
    6e7a:	06 94       	lsr	r0
    6e7c:	a1 f7       	brne	.-24     	; 0x6e66 <__ftoa_engine+0x74>
    6e7e:	05 90       	lpm	r0, Z+
    6e80:	07 94       	ror	r0
    6e82:	28 f4       	brcc	.+10     	; 0x6e8e <__ftoa_engine+0x9c>
    6e84:	e7 0e       	add	r14, r23
    6e86:	f8 1e       	adc	r15, r24
    6e88:	49 1f       	adc	r20, r25
    6e8a:	56 1f       	adc	r21, r22
    6e8c:	c1 1d       	adc	r28, r1
    6e8e:	77 0f       	add	r23, r23
    6e90:	88 1f       	adc	r24, r24
    6e92:	99 1f       	adc	r25, r25
    6e94:	66 1f       	adc	r22, r22
    6e96:	06 94       	lsr	r0
    6e98:	a1 f7       	brne	.-24     	; 0x6e82 <__ftoa_engine+0x90>
    6e9a:	05 90       	lpm	r0, Z+
    6e9c:	07 94       	ror	r0
    6e9e:	28 f4       	brcc	.+10     	; 0x6eaa <__ftoa_engine+0xb8>
    6ea0:	f8 0e       	add	r15, r24
    6ea2:	49 1f       	adc	r20, r25
    6ea4:	56 1f       	adc	r21, r22
    6ea6:	c7 1f       	adc	r28, r23
    6ea8:	d1 1d       	adc	r29, r1
    6eaa:	88 0f       	add	r24, r24
    6eac:	99 1f       	adc	r25, r25
    6eae:	66 1f       	adc	r22, r22
    6eb0:	77 1f       	adc	r23, r23
    6eb2:	06 94       	lsr	r0
    6eb4:	a1 f7       	brne	.-24     	; 0x6e9e <__ftoa_engine+0xac>
    6eb6:	05 90       	lpm	r0, Z+
    6eb8:	07 94       	ror	r0
    6eba:	20 f4       	brcc	.+8      	; 0x6ec4 <__ftoa_engine+0xd2>
    6ebc:	49 0f       	add	r20, r25
    6ebe:	56 1f       	adc	r21, r22
    6ec0:	c7 1f       	adc	r28, r23
    6ec2:	d8 1f       	adc	r29, r24
    6ec4:	99 0f       	add	r25, r25
    6ec6:	66 1f       	adc	r22, r22
    6ec8:	77 1f       	adc	r23, r23
    6eca:	88 1f       	adc	r24, r24
    6ecc:	06 94       	lsr	r0
    6ece:	a9 f7       	brne	.-22     	; 0x6eba <__ftoa_engine+0xc8>
    6ed0:	84 91       	lpm	r24, Z
    6ed2:	10 95       	com	r17
    6ed4:	17 70       	andi	r17, 0x07	; 7
    6ed6:	41 f0       	breq	.+16     	; 0x6ee8 <__ftoa_engine+0xf6>
    6ed8:	d6 95       	lsr	r29
    6eda:	c7 95       	ror	r28
    6edc:	57 95       	ror	r21
    6ede:	47 95       	ror	r20
    6ee0:	f7 94       	ror	r15
    6ee2:	e7 94       	ror	r14
    6ee4:	1a 95       	dec	r17
    6ee6:	c1 f7       	brne	.-16     	; 0x6ed8 <__ftoa_engine+0xe6>
    6ee8:	e2 ea       	ldi	r30, 0xA2	; 162
    6eea:	f1 e0       	ldi	r31, 0x01	; 1
    6eec:	68 94       	set
    6eee:	15 90       	lpm	r1, Z+
    6ef0:	15 91       	lpm	r17, Z+
    6ef2:	35 91       	lpm	r19, Z+
    6ef4:	65 91       	lpm	r22, Z+
    6ef6:	95 91       	lpm	r25, Z+
    6ef8:	05 90       	lpm	r0, Z+
    6efa:	7f e2       	ldi	r23, 0x2F	; 47
    6efc:	73 95       	inc	r23
    6efe:	e1 18       	sub	r14, r1
    6f00:	f1 0a       	sbc	r15, r17
    6f02:	43 0b       	sbc	r20, r19
    6f04:	56 0b       	sbc	r21, r22
    6f06:	c9 0b       	sbc	r28, r25
    6f08:	d0 09       	sbc	r29, r0
    6f0a:	c0 f7       	brcc	.-16     	; 0x6efc <__ftoa_engine+0x10a>
    6f0c:	e1 0c       	add	r14, r1
    6f0e:	f1 1e       	adc	r15, r17
    6f10:	43 1f       	adc	r20, r19
    6f12:	56 1f       	adc	r21, r22
    6f14:	c9 1f       	adc	r28, r25
    6f16:	d0 1d       	adc	r29, r0
    6f18:	7e f4       	brtc	.+30     	; 0x6f38 <__ftoa_engine+0x146>
    6f1a:	70 33       	cpi	r23, 0x30	; 48
    6f1c:	11 f4       	brne	.+4      	; 0x6f22 <__ftoa_engine+0x130>
    6f1e:	8a 95       	dec	r24
    6f20:	e6 cf       	rjmp	.-52     	; 0x6eee <__ftoa_engine+0xfc>
    6f22:	e8 94       	clt
    6f24:	01 50       	subi	r16, 0x01	; 1
    6f26:	30 f0       	brcs	.+12     	; 0x6f34 <__ftoa_engine+0x142>
    6f28:	08 0f       	add	r16, r24
    6f2a:	0a f4       	brpl	.+2      	; 0x6f2e <__ftoa_engine+0x13c>
    6f2c:	00 27       	eor	r16, r16
    6f2e:	02 17       	cp	r16, r18
    6f30:	08 f4       	brcc	.+2      	; 0x6f34 <__ftoa_engine+0x142>
    6f32:	20 2f       	mov	r18, r16
    6f34:	23 95       	inc	r18
    6f36:	02 2f       	mov	r16, r18
    6f38:	7a 33       	cpi	r23, 0x3A	; 58
    6f3a:	28 f0       	brcs	.+10     	; 0x6f46 <__ftoa_engine+0x154>
    6f3c:	79 e3       	ldi	r23, 0x39	; 57
    6f3e:	7d 93       	st	X+, r23
    6f40:	2a 95       	dec	r18
    6f42:	e9 f7       	brne	.-6      	; 0x6f3e <__ftoa_engine+0x14c>
    6f44:	10 c0       	rjmp	.+32     	; 0x6f66 <__ftoa_engine+0x174>
    6f46:	7d 93       	st	X+, r23
    6f48:	2a 95       	dec	r18
    6f4a:	89 f6       	brne	.-94     	; 0x6eee <__ftoa_engine+0xfc>
    6f4c:	06 94       	lsr	r0
    6f4e:	97 95       	ror	r25
    6f50:	67 95       	ror	r22
    6f52:	37 95       	ror	r19
    6f54:	17 95       	ror	r17
    6f56:	17 94       	ror	r1
    6f58:	e1 18       	sub	r14, r1
    6f5a:	f1 0a       	sbc	r15, r17
    6f5c:	43 0b       	sbc	r20, r19
    6f5e:	56 0b       	sbc	r21, r22
    6f60:	c9 0b       	sbc	r28, r25
    6f62:	d0 09       	sbc	r29, r0
    6f64:	98 f0       	brcs	.+38     	; 0x6f8c <__ftoa_engine+0x19a>
    6f66:	23 95       	inc	r18
    6f68:	7e 91       	ld	r23, -X
    6f6a:	73 95       	inc	r23
    6f6c:	7a 33       	cpi	r23, 0x3A	; 58
    6f6e:	08 f0       	brcs	.+2      	; 0x6f72 <__ftoa_engine+0x180>
    6f70:	70 e3       	ldi	r23, 0x30	; 48
    6f72:	7c 93       	st	X, r23
    6f74:	20 13       	cpse	r18, r16
    6f76:	b8 f7       	brcc	.-18     	; 0x6f66 <__ftoa_engine+0x174>
    6f78:	7e 91       	ld	r23, -X
    6f7a:	70 61       	ori	r23, 0x10	; 16
    6f7c:	7d 93       	st	X+, r23
    6f7e:	30 f0       	brcs	.+12     	; 0x6f8c <__ftoa_engine+0x19a>
    6f80:	83 95       	inc	r24
    6f82:	71 e3       	ldi	r23, 0x31	; 49
    6f84:	7d 93       	st	X+, r23
    6f86:	70 e3       	ldi	r23, 0x30	; 48
    6f88:	2a 95       	dec	r18
    6f8a:	e1 f7       	brne	.-8      	; 0x6f84 <__ftoa_engine+0x192>
    6f8c:	11 24       	eor	r1, r1
    6f8e:	ef 90       	pop	r14
    6f90:	ff 90       	pop	r15
    6f92:	0f 91       	pop	r16
    6f94:	1f 91       	pop	r17
    6f96:	cf 91       	pop	r28
    6f98:	df 91       	pop	r29
    6f9a:	99 27       	eor	r25, r25
    6f9c:	87 fd       	sbrc	r24, 7
    6f9e:	90 95       	com	r25
    6fa0:	08 95       	ret

00006fa2 <strnlen_P>:
    6fa2:	fc 01       	movw	r30, r24
    6fa4:	05 90       	lpm	r0, Z+
    6fa6:	61 50       	subi	r22, 0x01	; 1
    6fa8:	70 40       	sbci	r23, 0x00	; 0
    6faa:	01 10       	cpse	r0, r1
    6fac:	d8 f7       	brcc	.-10     	; 0x6fa4 <strnlen_P+0x2>
    6fae:	80 95       	com	r24
    6fb0:	90 95       	com	r25
    6fb2:	8e 0f       	add	r24, r30
    6fb4:	9f 1f       	adc	r25, r31
    6fb6:	08 95       	ret

00006fb8 <memcpy>:
    6fb8:	fb 01       	movw	r30, r22
    6fba:	dc 01       	movw	r26, r24
    6fbc:	02 c0       	rjmp	.+4      	; 0x6fc2 <memcpy+0xa>
    6fbe:	01 90       	ld	r0, Z+
    6fc0:	0d 92       	st	X+, r0
    6fc2:	41 50       	subi	r20, 0x01	; 1
    6fc4:	50 40       	sbci	r21, 0x00	; 0
    6fc6:	d8 f7       	brcc	.-10     	; 0x6fbe <memcpy+0x6>
    6fc8:	08 95       	ret

00006fca <memset>:
    6fca:	dc 01       	movw	r26, r24
    6fcc:	01 c0       	rjmp	.+2      	; 0x6fd0 <memset+0x6>
    6fce:	6d 93       	st	X+, r22
    6fd0:	41 50       	subi	r20, 0x01	; 1
    6fd2:	50 40       	sbci	r21, 0x00	; 0
    6fd4:	e0 f7       	brcc	.-8      	; 0x6fce <memset+0x4>
    6fd6:	08 95       	ret

00006fd8 <strcasestr>:
    6fd8:	fb 01       	movw	r30, r22
    6fda:	51 91       	ld	r21, Z+
    6fdc:	55 23       	and	r21, r21
    6fde:	b1 f0       	breq	.+44     	; 0x700c <strcasestr+0x34>
    6fe0:	bf 01       	movw	r22, r30
    6fe2:	dc 01       	movw	r26, r24
    6fe4:	05 2e       	mov	r0, r21
    6fe6:	4d 91       	ld	r20, X+
    6fe8:	44 23       	and	r20, r20
    6fea:	69 f0       	breq	.+26     	; 0x7006 <strcasestr+0x2e>
    6fec:	10 d0       	rcall	.+32     	; 0x700e <strcasestr+0x36>
    6fee:	d9 f7       	brne	.-10     	; 0x6fe6 <strcasestr+0xe>
    6ff0:	cd 01       	movw	r24, r26
    6ff2:	01 90       	ld	r0, Z+
    6ff4:	00 20       	and	r0, r0
    6ff6:	49 f0       	breq	.+18     	; 0x700a <strcasestr+0x32>
    6ff8:	4d 91       	ld	r20, X+
    6ffa:	41 11       	cpse	r20, r1
    6ffc:	08 d0       	rcall	.+16     	; 0x700e <strcasestr+0x36>
    6ffe:	c9 f3       	breq	.-14     	; 0x6ff2 <strcasestr+0x1a>
    7000:	fb 01       	movw	r30, r22
    7002:	41 11       	cpse	r20, r1
    7004:	ee cf       	rjmp	.-36     	; 0x6fe2 <strcasestr+0xa>
    7006:	81 e0       	ldi	r24, 0x01	; 1
    7008:	90 e0       	ldi	r25, 0x00	; 0
    700a:	01 97       	sbiw	r24, 0x01	; 1
    700c:	08 95       	ret
    700e:	40 25       	eor	r20, r0
    7010:	39 f0       	breq	.+14     	; 0x7020 <strcasestr+0x48>
    7012:	40 32       	cpi	r20, 0x20	; 32
    7014:	29 f4       	brne	.+10     	; 0x7020 <strcasestr+0x48>
    7016:	40 29       	or	r20, r0
    7018:	4b 57       	subi	r20, 0x7B	; 123
    701a:	46 5e       	subi	r20, 0xE6	; 230
    701c:	08 f0       	brcs	.+2      	; 0x7020 <strcasestr+0x48>
    701e:	18 94       	sez
    7020:	08 95       	ret

00007022 <strcat>:
    7022:	fb 01       	movw	r30, r22
    7024:	dc 01       	movw	r26, r24
    7026:	0d 90       	ld	r0, X+
    7028:	00 20       	and	r0, r0
    702a:	e9 f7       	brne	.-6      	; 0x7026 <strcat+0x4>
    702c:	11 97       	sbiw	r26, 0x01	; 1
    702e:	01 90       	ld	r0, Z+
    7030:	0d 92       	st	X+, r0
    7032:	00 20       	and	r0, r0
    7034:	e1 f7       	brne	.-8      	; 0x702e <strcat+0xc>
    7036:	08 95       	ret

00007038 <strcpy>:
    7038:	fb 01       	movw	r30, r22
    703a:	dc 01       	movw	r26, r24
    703c:	01 90       	ld	r0, Z+
    703e:	0d 92       	st	X+, r0
    7040:	00 20       	and	r0, r0
    7042:	e1 f7       	brne	.-8      	; 0x703c <strcpy+0x4>
    7044:	08 95       	ret

00007046 <strncasecmp>:
    7046:	fb 01       	movw	r30, r22
    7048:	dc 01       	movw	r26, r24
    704a:	41 50       	subi	r20, 0x01	; 1
    704c:	50 40       	sbci	r21, 0x00	; 0
    704e:	88 f0       	brcs	.+34     	; 0x7072 <strncasecmp+0x2c>
    7050:	8d 91       	ld	r24, X+
    7052:	81 34       	cpi	r24, 0x41	; 65
    7054:	1c f0       	brlt	.+6      	; 0x705c <strncasecmp+0x16>
    7056:	8b 35       	cpi	r24, 0x5B	; 91
    7058:	0c f4       	brge	.+2      	; 0x705c <strncasecmp+0x16>
    705a:	80 5e       	subi	r24, 0xE0	; 224
    705c:	61 91       	ld	r22, Z+
    705e:	61 34       	cpi	r22, 0x41	; 65
    7060:	1c f0       	brlt	.+6      	; 0x7068 <strncasecmp+0x22>
    7062:	6b 35       	cpi	r22, 0x5B	; 91
    7064:	0c f4       	brge	.+2      	; 0x7068 <strncasecmp+0x22>
    7066:	60 5e       	subi	r22, 0xE0	; 224
    7068:	86 1b       	sub	r24, r22
    706a:	61 11       	cpse	r22, r1
    706c:	71 f3       	breq	.-36     	; 0x704a <strncasecmp+0x4>
    706e:	99 0b       	sbc	r25, r25
    7070:	08 95       	ret
    7072:	88 1b       	sub	r24, r24
    7074:	fc cf       	rjmp	.-8      	; 0x706e <strncasecmp+0x28>

00007076 <strnlen>:
    7076:	fc 01       	movw	r30, r24
    7078:	61 50       	subi	r22, 0x01	; 1
    707a:	70 40       	sbci	r23, 0x00	; 0
    707c:	01 90       	ld	r0, Z+
    707e:	01 10       	cpse	r0, r1
    7080:	d8 f7       	brcc	.-10     	; 0x7078 <strnlen+0x2>
    7082:	80 95       	com	r24
    7084:	90 95       	com	r25
    7086:	8e 0f       	add	r24, r30
    7088:	9f 1f       	adc	r25, r31
    708a:	08 95       	ret

0000708c <fputc>:
    708c:	0f 93       	push	r16
    708e:	1f 93       	push	r17
    7090:	cf 93       	push	r28
    7092:	df 93       	push	r29
    7094:	fb 01       	movw	r30, r22
    7096:	23 81       	ldd	r18, Z+3	; 0x03
    7098:	21 fd       	sbrc	r18, 1
    709a:	03 c0       	rjmp	.+6      	; 0x70a2 <fputc+0x16>
    709c:	8f ef       	ldi	r24, 0xFF	; 255
    709e:	9f ef       	ldi	r25, 0xFF	; 255
    70a0:	2c c0       	rjmp	.+88     	; 0x70fa <fputc+0x6e>
    70a2:	22 ff       	sbrs	r18, 2
    70a4:	16 c0       	rjmp	.+44     	; 0x70d2 <fputc+0x46>
    70a6:	46 81       	ldd	r20, Z+6	; 0x06
    70a8:	57 81       	ldd	r21, Z+7	; 0x07
    70aa:	24 81       	ldd	r18, Z+4	; 0x04
    70ac:	35 81       	ldd	r19, Z+5	; 0x05
    70ae:	42 17       	cp	r20, r18
    70b0:	53 07       	cpc	r21, r19
    70b2:	44 f4       	brge	.+16     	; 0x70c4 <fputc+0x38>
    70b4:	a0 81       	ld	r26, Z
    70b6:	b1 81       	ldd	r27, Z+1	; 0x01
    70b8:	9d 01       	movw	r18, r26
    70ba:	2f 5f       	subi	r18, 0xFF	; 255
    70bc:	3f 4f       	sbci	r19, 0xFF	; 255
    70be:	31 83       	std	Z+1, r19	; 0x01
    70c0:	20 83       	st	Z, r18
    70c2:	8c 93       	st	X, r24
    70c4:	26 81       	ldd	r18, Z+6	; 0x06
    70c6:	37 81       	ldd	r19, Z+7	; 0x07
    70c8:	2f 5f       	subi	r18, 0xFF	; 255
    70ca:	3f 4f       	sbci	r19, 0xFF	; 255
    70cc:	37 83       	std	Z+7, r19	; 0x07
    70ce:	26 83       	std	Z+6, r18	; 0x06
    70d0:	14 c0       	rjmp	.+40     	; 0x70fa <fputc+0x6e>
    70d2:	8b 01       	movw	r16, r22
    70d4:	ec 01       	movw	r28, r24
    70d6:	fb 01       	movw	r30, r22
    70d8:	00 84       	ldd	r0, Z+8	; 0x08
    70da:	f1 85       	ldd	r31, Z+9	; 0x09
    70dc:	e0 2d       	mov	r30, r0
    70de:	19 95       	eicall
    70e0:	89 2b       	or	r24, r25
    70e2:	e1 f6       	brne	.-72     	; 0x709c <fputc+0x10>
    70e4:	d8 01       	movw	r26, r16
    70e6:	16 96       	adiw	r26, 0x06	; 6
    70e8:	8d 91       	ld	r24, X+
    70ea:	9c 91       	ld	r25, X
    70ec:	17 97       	sbiw	r26, 0x07	; 7
    70ee:	01 96       	adiw	r24, 0x01	; 1
    70f0:	17 96       	adiw	r26, 0x07	; 7
    70f2:	9c 93       	st	X, r25
    70f4:	8e 93       	st	-X, r24
    70f6:	16 97       	sbiw	r26, 0x06	; 6
    70f8:	ce 01       	movw	r24, r28
    70fa:	df 91       	pop	r29
    70fc:	cf 91       	pop	r28
    70fe:	1f 91       	pop	r17
    7100:	0f 91       	pop	r16
    7102:	08 95       	ret

00007104 <putchar>:
    7104:	60 91 cf 15 	lds	r22, 0x15CF	; 0x8015cf <__iob+0x2>
    7108:	70 91 d0 15 	lds	r23, 0x15D0	; 0x8015d0 <__iob+0x3>
    710c:	bf cf       	rjmp	.-130    	; 0x708c <fputc>

0000710e <sprintf>:
    710e:	0f 93       	push	r16
    7110:	1f 93       	push	r17
    7112:	cf 93       	push	r28
    7114:	df 93       	push	r29
    7116:	cd b7       	in	r28, 0x3d	; 61
    7118:	de b7       	in	r29, 0x3e	; 62
    711a:	2e 97       	sbiw	r28, 0x0e	; 14
    711c:	0f b6       	in	r0, 0x3f	; 63
    711e:	f8 94       	cli
    7120:	de bf       	out	0x3e, r29	; 62
    7122:	0f be       	out	0x3f, r0	; 63
    7124:	cd bf       	out	0x3d, r28	; 61
    7126:	0e 89       	ldd	r16, Y+22	; 0x16
    7128:	1f 89       	ldd	r17, Y+23	; 0x17
    712a:	86 e0       	ldi	r24, 0x06	; 6
    712c:	8c 83       	std	Y+4, r24	; 0x04
    712e:	1a 83       	std	Y+2, r17	; 0x02
    7130:	09 83       	std	Y+1, r16	; 0x01
    7132:	8f ef       	ldi	r24, 0xFF	; 255
    7134:	9f e7       	ldi	r25, 0x7F	; 127
    7136:	9e 83       	std	Y+6, r25	; 0x06
    7138:	8d 83       	std	Y+5, r24	; 0x05
    713a:	ae 01       	movw	r20, r28
    713c:	46 5e       	subi	r20, 0xE6	; 230
    713e:	5f 4f       	sbci	r21, 0xFF	; 255
    7140:	68 8d       	ldd	r22, Y+24	; 0x18
    7142:	79 8d       	ldd	r23, Y+25	; 0x19
    7144:	ce 01       	movw	r24, r28
    7146:	01 96       	adiw	r24, 0x01	; 1
    7148:	a0 d8       	rcall	.-3776   	; 0x628a <vfprintf>
    714a:	ef 81       	ldd	r30, Y+7	; 0x07
    714c:	f8 85       	ldd	r31, Y+8	; 0x08
    714e:	e0 0f       	add	r30, r16
    7150:	f1 1f       	adc	r31, r17
    7152:	10 82       	st	Z, r1
    7154:	2e 96       	adiw	r28, 0x0e	; 14
    7156:	0f b6       	in	r0, 0x3f	; 63
    7158:	f8 94       	cli
    715a:	de bf       	out	0x3e, r29	; 62
    715c:	0f be       	out	0x3f, r0	; 63
    715e:	cd bf       	out	0x3d, r28	; 61
    7160:	df 91       	pop	r29
    7162:	cf 91       	pop	r28
    7164:	1f 91       	pop	r17
    7166:	0f 91       	pop	r16
    7168:	08 95       	ret

0000716a <vprintf>:
    716a:	ab 01       	movw	r20, r22
    716c:	bc 01       	movw	r22, r24
    716e:	80 91 cf 15 	lds	r24, 0x15CF	; 0x8015cf <__iob+0x2>
    7172:	90 91 d0 15 	lds	r25, 0x15D0	; 0x8015d0 <__iob+0x3>
    7176:	89 c8       	rjmp	.-3822   	; 0x628a <vfprintf>

00007178 <__ultoa_invert>:
    7178:	fa 01       	movw	r30, r20
    717a:	aa 27       	eor	r26, r26
    717c:	28 30       	cpi	r18, 0x08	; 8
    717e:	51 f1       	breq	.+84     	; 0x71d4 <__ultoa_invert+0x5c>
    7180:	20 31       	cpi	r18, 0x10	; 16
    7182:	81 f1       	breq	.+96     	; 0x71e4 <__ultoa_invert+0x6c>
    7184:	e8 94       	clt
    7186:	6f 93       	push	r22
    7188:	6e 7f       	andi	r22, 0xFE	; 254
    718a:	6e 5f       	subi	r22, 0xFE	; 254
    718c:	7f 4f       	sbci	r23, 0xFF	; 255
    718e:	8f 4f       	sbci	r24, 0xFF	; 255
    7190:	9f 4f       	sbci	r25, 0xFF	; 255
    7192:	af 4f       	sbci	r26, 0xFF	; 255
    7194:	b1 e0       	ldi	r27, 0x01	; 1
    7196:	3e d0       	rcall	.+124    	; 0x7214 <__ultoa_invert+0x9c>
    7198:	b4 e0       	ldi	r27, 0x04	; 4
    719a:	3c d0       	rcall	.+120    	; 0x7214 <__ultoa_invert+0x9c>
    719c:	67 0f       	add	r22, r23
    719e:	78 1f       	adc	r23, r24
    71a0:	89 1f       	adc	r24, r25
    71a2:	9a 1f       	adc	r25, r26
    71a4:	a1 1d       	adc	r26, r1
    71a6:	68 0f       	add	r22, r24
    71a8:	79 1f       	adc	r23, r25
    71aa:	8a 1f       	adc	r24, r26
    71ac:	91 1d       	adc	r25, r1
    71ae:	a1 1d       	adc	r26, r1
    71b0:	6a 0f       	add	r22, r26
    71b2:	71 1d       	adc	r23, r1
    71b4:	81 1d       	adc	r24, r1
    71b6:	91 1d       	adc	r25, r1
    71b8:	a1 1d       	adc	r26, r1
    71ba:	20 d0       	rcall	.+64     	; 0x71fc <__ultoa_invert+0x84>
    71bc:	09 f4       	brne	.+2      	; 0x71c0 <__ultoa_invert+0x48>
    71be:	68 94       	set
    71c0:	3f 91       	pop	r19
    71c2:	2a e0       	ldi	r18, 0x0A	; 10
    71c4:	26 9f       	mul	r18, r22
    71c6:	11 24       	eor	r1, r1
    71c8:	30 19       	sub	r19, r0
    71ca:	30 5d       	subi	r19, 0xD0	; 208
    71cc:	31 93       	st	Z+, r19
    71ce:	de f6       	brtc	.-74     	; 0x7186 <__ultoa_invert+0xe>
    71d0:	cf 01       	movw	r24, r30
    71d2:	08 95       	ret
    71d4:	46 2f       	mov	r20, r22
    71d6:	47 70       	andi	r20, 0x07	; 7
    71d8:	40 5d       	subi	r20, 0xD0	; 208
    71da:	41 93       	st	Z+, r20
    71dc:	b3 e0       	ldi	r27, 0x03	; 3
    71de:	0f d0       	rcall	.+30     	; 0x71fe <__ultoa_invert+0x86>
    71e0:	c9 f7       	brne	.-14     	; 0x71d4 <__ultoa_invert+0x5c>
    71e2:	f6 cf       	rjmp	.-20     	; 0x71d0 <__ultoa_invert+0x58>
    71e4:	46 2f       	mov	r20, r22
    71e6:	4f 70       	andi	r20, 0x0F	; 15
    71e8:	40 5d       	subi	r20, 0xD0	; 208
    71ea:	4a 33       	cpi	r20, 0x3A	; 58
    71ec:	18 f0       	brcs	.+6      	; 0x71f4 <__ultoa_invert+0x7c>
    71ee:	49 5d       	subi	r20, 0xD9	; 217
    71f0:	31 fd       	sbrc	r19, 1
    71f2:	40 52       	subi	r20, 0x20	; 32
    71f4:	41 93       	st	Z+, r20
    71f6:	02 d0       	rcall	.+4      	; 0x71fc <__ultoa_invert+0x84>
    71f8:	a9 f7       	brne	.-22     	; 0x71e4 <__ultoa_invert+0x6c>
    71fa:	ea cf       	rjmp	.-44     	; 0x71d0 <__ultoa_invert+0x58>
    71fc:	b4 e0       	ldi	r27, 0x04	; 4
    71fe:	a6 95       	lsr	r26
    7200:	97 95       	ror	r25
    7202:	87 95       	ror	r24
    7204:	77 95       	ror	r23
    7206:	67 95       	ror	r22
    7208:	ba 95       	dec	r27
    720a:	c9 f7       	brne	.-14     	; 0x71fe <__ultoa_invert+0x86>
    720c:	00 97       	sbiw	r24, 0x00	; 0
    720e:	61 05       	cpc	r22, r1
    7210:	71 05       	cpc	r23, r1
    7212:	08 95       	ret
    7214:	9b 01       	movw	r18, r22
    7216:	ac 01       	movw	r20, r24
    7218:	0a 2e       	mov	r0, r26
    721a:	06 94       	lsr	r0
    721c:	57 95       	ror	r21
    721e:	47 95       	ror	r20
    7220:	37 95       	ror	r19
    7222:	27 95       	ror	r18
    7224:	ba 95       	dec	r27
    7226:	c9 f7       	brne	.-14     	; 0x721a <__ultoa_invert+0xa2>
    7228:	62 0f       	add	r22, r18
    722a:	73 1f       	adc	r23, r19
    722c:	84 1f       	adc	r24, r20
    722e:	95 1f       	adc	r25, r21
    7230:	a0 1d       	adc	r26, r0
    7232:	08 95       	ret

00007234 <_exit>:
    7234:	f8 94       	cli

00007236 <__stop_program>:
    7236:	ff cf       	rjmp	.-2      	; 0x7236 <__stop_program>
