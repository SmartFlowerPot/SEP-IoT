
SepTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800200  00004dae  00004e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b16  00800272  00800272  00004eb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000730  00000000  00000000  00004f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000952d  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000282d  00000000  00000000  0000ebad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d67  00000000  00000000  000113da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a9c  00000000  00000000  00016144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000317f  00000000  00000000  00017be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a60  00000000  00000000  0001ad5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  000237bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a6 c1       	rjmp	.+844    	; 0x34e <__ctors_end>
       2:	00 00       	nop
       4:	c5 c1       	rjmp	.+906    	; 0x390 <__bad_interrupt>
       6:	00 00       	nop
       8:	c3 c1       	rjmp	.+902    	; 0x390 <__bad_interrupt>
       a:	00 00       	nop
       c:	c1 c1       	rjmp	.+898    	; 0x390 <__bad_interrupt>
       e:	00 00       	nop
      10:	bf c1       	rjmp	.+894    	; 0x390 <__bad_interrupt>
      12:	00 00       	nop
      14:	bd c1       	rjmp	.+890    	; 0x390 <__bad_interrupt>
      16:	00 00       	nop
      18:	bb c1       	rjmp	.+886    	; 0x390 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b9 c1       	rjmp	.+882    	; 0x390 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b7 c1       	rjmp	.+878    	; 0x390 <__bad_interrupt>
      22:	00 00       	nop
      24:	b5 c1       	rjmp	.+874    	; 0x390 <__bad_interrupt>
      26:	00 00       	nop
      28:	b3 c1       	rjmp	.+870    	; 0x390 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b1 c1       	rjmp	.+866    	; 0x390 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9a c4       	rjmp	.+2356   	; 0x966 <__vector_12>
      32:	00 00       	nop
      34:	ad c1       	rjmp	.+858    	; 0x390 <__bad_interrupt>
      36:	00 00       	nop
      38:	ab c1       	rjmp	.+854    	; 0x390 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a9 c1       	rjmp	.+850    	; 0x390 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a7 c1       	rjmp	.+846    	; 0x390 <__bad_interrupt>
      42:	00 00       	nop
      44:	a5 c1       	rjmp	.+842    	; 0x390 <__bad_interrupt>
      46:	00 00       	nop
      48:	a3 c1       	rjmp	.+838    	; 0x390 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a1 c1       	rjmp	.+834    	; 0x390 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9f c1       	rjmp	.+830    	; 0x390 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__vector_21>
      58:	9b c1       	rjmp	.+822    	; 0x390 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	99 c1       	rjmp	.+818    	; 0x390 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__vector_24>
      64:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__vector_25>
      68:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__vector_26>
      6c:	91 c1       	rjmp	.+802    	; 0x390 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8f c1       	rjmp	.+798    	; 0x390 <__bad_interrupt>
      72:	00 00       	nop
      74:	8d c1       	rjmp	.+794    	; 0x390 <__bad_interrupt>
      76:	00 00       	nop
      78:	8b c1       	rjmp	.+790    	; 0x390 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	89 c1       	rjmp	.+786    	; 0x390 <__bad_interrupt>
      7e:	00 00       	nop
      80:	87 c1       	rjmp	.+782    	; 0x390 <__bad_interrupt>
      82:	00 00       	nop
      84:	85 c1       	rjmp	.+778    	; 0x390 <__bad_interrupt>
      86:	00 00       	nop
      88:	83 c1       	rjmp	.+774    	; 0x390 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	81 c1       	rjmp	.+770    	; 0x390 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__vector_36>
      94:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__vector_37>
      98:	7b c1       	rjmp	.+758    	; 0x390 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__vector_39>
      a0:	77 c1       	rjmp	.+750    	; 0x390 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	75 c1       	rjmp	.+746    	; 0x390 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	73 c1       	rjmp	.+742    	; 0x390 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	71 c1       	rjmp	.+738    	; 0x390 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	6f c1       	rjmp	.+734    	; 0x390 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6d c1       	rjmp	.+730    	; 0x390 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6b c1       	rjmp	.+726    	; 0x390 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	69 c1       	rjmp	.+722    	; 0x390 <__bad_interrupt>
      be:	00 00       	nop
      c0:	67 c1       	rjmp	.+718    	; 0x390 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	65 c1       	rjmp	.+714    	; 0x390 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	63 c1       	rjmp	.+710    	; 0x390 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_51>
      d0:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_52>
      d4:	5d c1       	rjmp	.+698    	; 0x390 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__vector_54>
      dc:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__vector_55>
      e0:	57 c1       	rjmp	.+686    	; 0x390 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6c 11       	cpse	r22, r12
      e6:	6c 11       	cpse	r22, r12
      e8:	6c 11       	cpse	r22, r12
      ea:	a3 11       	cpse	r26, r3
      ec:	ab 11       	cpse	r26, r11
      ee:	c0 11       	cpse	r28, r0
      f0:	6c 11       	cpse	r22, r12
      f2:	6c 11       	cpse	r22, r12
      f4:	a3 11       	cpse	r26, r3
      f6:	ab 11       	cpse	r26, r11
      f8:	cd 1b       	sub	r28, r29
      fa:	3d 1c       	adc	r3, r13
      fc:	3d 1c       	adc	r3, r13
      fe:	3d 1c       	adc	r3, r13
     100:	3d 1c       	adc	r3, r13
     102:	3d 1c       	adc	r3, r13
     104:	3d 1c       	adc	r3, r13
     106:	3d 1c       	adc	r3, r13
     108:	cd 1b       	sub	r28, r29
     10a:	3d 1c       	adc	r3, r13
     10c:	3d 1c       	adc	r3, r13
     10e:	3d 1c       	adc	r3, r13
     110:	3d 1c       	adc	r3, r13
     112:	3d 1c       	adc	r3, r13
     114:	3d 1c       	adc	r3, r13
     116:	3d 1c       	adc	r3, r13
     118:	cf 1b       	sub	r28, r31
     11a:	3d 1c       	adc	r3, r13
     11c:	3d 1c       	adc	r3, r13
     11e:	3d 1c       	adc	r3, r13
     120:	3d 1c       	adc	r3, r13
     122:	3d 1c       	adc	r3, r13
     124:	3d 1c       	adc	r3, r13
     126:	3d 1c       	adc	r3, r13
     128:	3d 1c       	adc	r3, r13
     12a:	3d 1c       	adc	r3, r13
     12c:	3d 1c       	adc	r3, r13
     12e:	3d 1c       	adc	r3, r13
     130:	3d 1c       	adc	r3, r13
     132:	3d 1c       	adc	r3, r13
     134:	3d 1c       	adc	r3, r13
     136:	3d 1c       	adc	r3, r13
     138:	cf 1b       	sub	r28, r31
     13a:	3d 1c       	adc	r3, r13
     13c:	3d 1c       	adc	r3, r13
     13e:	3d 1c       	adc	r3, r13
     140:	3d 1c       	adc	r3, r13
     142:	3d 1c       	adc	r3, r13
     144:	3d 1c       	adc	r3, r13
     146:	3d 1c       	adc	r3, r13
     148:	3d 1c       	adc	r3, r13
     14a:	3d 1c       	adc	r3, r13
     14c:	3d 1c       	adc	r3, r13
     14e:	3d 1c       	adc	r3, r13
     150:	3d 1c       	adc	r3, r13
     152:	3d 1c       	adc	r3, r13
     154:	3d 1c       	adc	r3, r13
     156:	3d 1c       	adc	r3, r13
     158:	39 1c       	adc	r3, r9
     15a:	3d 1c       	adc	r3, r13
     15c:	3d 1c       	adc	r3, r13
     15e:	3d 1c       	adc	r3, r13
     160:	3d 1c       	adc	r3, r13
     162:	3d 1c       	adc	r3, r13
     164:	3d 1c       	adc	r3, r13
     166:	3d 1c       	adc	r3, r13
     168:	04 1c       	adc	r0, r4
     16a:	3d 1c       	adc	r3, r13
     16c:	3d 1c       	adc	r3, r13
     16e:	3d 1c       	adc	r3, r13
     170:	3d 1c       	adc	r3, r13
     172:	3d 1c       	adc	r3, r13
     174:	3d 1c       	adc	r3, r13
     176:	3d 1c       	adc	r3, r13
     178:	3d 1c       	adc	r3, r13
     17a:	3d 1c       	adc	r3, r13
     17c:	3d 1c       	adc	r3, r13
     17e:	3d 1c       	adc	r3, r13
     180:	3d 1c       	adc	r3, r13
     182:	3d 1c       	adc	r3, r13
     184:	3d 1c       	adc	r3, r13
     186:	3d 1c       	adc	r3, r13
     188:	f8 1b       	sub	r31, r24
     18a:	3d 1c       	adc	r3, r13
     18c:	3d 1c       	adc	r3, r13
     18e:	3d 1c       	adc	r3, r13
     190:	3d 1c       	adc	r3, r13
     192:	3d 1c       	adc	r3, r13
     194:	3d 1c       	adc	r3, r13
     196:	3d 1c       	adc	r3, r13
     198:	1c 1c       	adc	r1, r12
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <prvCopyDataToQueue+0x76>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <__trampolines_end>:
     21c:	6e 61       	ori	r22, 0x1E	; 30
     21e:	6e 00       	.word	0x006e	; ????

00000220 <__c.2332>:
     220:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     230:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     240:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     250:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     260:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     270:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     280:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     290:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2a0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2b0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2c0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2d0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2e0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2f0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     300:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     310:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000031e <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     31e:	31 d7       	rcall	.+3682   	; 0x1182 <prvCheckTasksWaitingTermination>
     320:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <pxReadyTasksLists>
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	08 f0       	brcs	.+2      	; 0x32a <prvIdleTask+0xc>
     328:	59 d2       	rcall	.+1202   	; 0x7dc <vPortYield>
     32a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <vApplicationIdleHook>
     32e:	f7 cf       	rjmp	.-18     	; 0x31e <prvIdleTask>

00000330 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <prvGetNextExpireTime>
     342:	49 81       	ldd	r20, Y+1	; 0x01
     344:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <prvProcessTimerOrBlockTask>
     348:	0e 94 35 11 	call	0x226a	; 0x226a <prvProcessReceivedCommands>
     34c:	f6 cf       	rjmp	.-20     	; 0x33a <prvTimerTask+0xa>

0000034e <__ctors_end>:
     34e:	11 24       	eor	r1, r1
     350:	1f be       	out	0x3f, r1	; 63
     352:	cf ef       	ldi	r28, 0xFF	; 255
     354:	d1 e2       	ldi	r29, 0x21	; 33
     356:	de bf       	out	0x3e, r29	; 62
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	00 e0       	ldi	r16, 0x00	; 0
     35c:	0c bf       	out	0x3c, r16	; 60

0000035e <__do_copy_data>:
     35e:	12 e0       	ldi	r17, 0x02	; 2
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b2 e0       	ldi	r27, 0x02	; 2
     364:	ee ea       	ldi	r30, 0xAE	; 174
     366:	fd e4       	ldi	r31, 0x4D	; 77
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	0b bf       	out	0x3b, r16	; 59
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__do_copy_data+0x14>
     36e:	07 90       	elpm	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	a2 37       	cpi	r26, 0x72	; 114
     374:	b1 07       	cpc	r27, r17
     376:	d9 f7       	brne	.-10     	; 0x36e <__do_copy_data+0x10>

00000378 <__do_clear_bss>:
     378:	2d e0       	ldi	r18, 0x0D	; 13
     37a:	a2 e7       	ldi	r26, 0x72	; 114
     37c:	b2 e0       	ldi	r27, 0x02	; 2
     37e:	01 c0       	rjmp	.+2      	; 0x382 <.do_clear_bss_start>

00000380 <.do_clear_bss_loop>:
     380:	1d 92       	st	X+, r1

00000382 <.do_clear_bss_start>:
     382:	a8 38       	cpi	r26, 0x88	; 136
     384:	b2 07       	cpc	r27, r18
     386:	e1 f7       	brne	.-8      	; 0x380 <.do_clear_bss_loop>
     388:	0e 94 92 12 	call	0x2524	; 0x2524 <main>
     38c:	0c 94 d5 26 	jmp	0x4daa	; 0x4daa <_exit>

00000390 <__bad_interrupt>:
     390:	37 ce       	rjmp	.-914    	; 0x0 <__vectors>

00000392 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     392:	ee e7       	ldi	r30, 0x7E	; 126
     394:	f2 e0       	ldi	r31, 0x02	; 2
     396:	a2 e8       	ldi	r26, 0x82	; 130
     398:	b2 e0       	ldi	r27, 0x02	; 2
     39a:	b1 83       	std	Z+1, r27	; 0x01
     39c:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     39e:	13 82       	std	Z+3, r1	; 0x03
     3a0:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     3a2:	e2 e4       	ldi	r30, 0x42	; 66
     3a4:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     3a6:	f0 93 7d 02 	sts	0x027D, r31	; 0x80027d <pxEnd+0x1>
     3aa:	e0 93 7c 02 	sts	0x027C, r30	; 0x80027c <pxEnd>
    pxEnd->xBlockSize = 0;
     3ae:	13 82       	std	Z+3, r1	; 0x03
     3b0:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     3b2:	11 82       	std	Z+1, r1	; 0x01
     3b4:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     3b6:	80 ec       	ldi	r24, 0xC0	; 192
     3b8:	99 e0       	ldi	r25, 0x09	; 9
     3ba:	13 96       	adiw	r26, 0x03	; 3
     3bc:	9c 93       	st	X, r25
     3be:	8e 93       	st	-X, r24
     3c0:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     3c2:	ed 93       	st	X+, r30
     3c4:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     3c6:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <xMinimumEverFreeBytesRemaining+0x1>
     3ca:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     3ce:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <xFreeBytesRemaining+0x1>
     3d2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e8       	ldi	r25, 0x80	; 128
     3da:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <__data_end+0x1>
     3de:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <__data_end>
     3e2:	08 95       	ret

000003e4 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     3ea:	ae e7       	ldi	r26, 0x7E	; 126
     3ec:	b2 e0       	ldi	r27, 0x02	; 2
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <prvInsertBlockIntoFreeList+0xe>
     3f0:	df 01       	movw	r26, r30
     3f2:	ed 91       	ld	r30, X+
     3f4:	fc 91       	ld	r31, X
     3f6:	11 97       	sbiw	r26, 0x01	; 1
     3f8:	ec 17       	cp	r30, r28
     3fa:	fd 07       	cpc	r31, r29
     3fc:	c8 f3       	brcs	.-14     	; 0x3f0 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	8d 91       	ld	r24, X+
     402:	9c 91       	ld	r25, X
     404:	13 97       	sbiw	r26, 0x03	; 3
     406:	9d 01       	movw	r18, r26
     408:	28 0f       	add	r18, r24
     40a:	39 1f       	adc	r19, r25
     40c:	c2 17       	cp	r28, r18
     40e:	d3 07       	cpc	r29, r19
     410:	49 f4       	brne	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     412:	2a 81       	ldd	r18, Y+2	; 0x02
     414:	3b 81       	ldd	r19, Y+3	; 0x03
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	13 96       	adiw	r26, 0x03	; 3
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
     420:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     422:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	9b 81       	ldd	r25, Y+3	; 0x03
     428:	9e 01       	movw	r18, r28
     42a:	28 0f       	add	r18, r24
     42c:	39 1f       	adc	r19, r25
     42e:	e2 17       	cp	r30, r18
     430:	f3 07       	cpc	r31, r19
     432:	c1 f4       	brne	.+48     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     434:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <pxEnd>
     438:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <pxEnd+0x1>
     43c:	e2 17       	cp	r30, r18
     43e:	f3 07       	cpc	r31, r19
     440:	71 f0       	breq	.+28     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     442:	22 81       	ldd	r18, Z+2	; 0x02
     444:	33 81       	ldd	r19, Z+3	; 0x03
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	9b 83       	std	Y+3, r25	; 0x03
     44c:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     44e:	ed 91       	ld	r30, X+
     450:	fc 91       	ld	r31, X
     452:	11 97       	sbiw	r26, 0x01	; 1
     454:	80 81       	ld	r24, Z
     456:	91 81       	ldd	r25, Z+1	; 0x01
     458:	99 83       	std	Y+1, r25	; 0x01
     45a:	88 83       	st	Y, r24
     45c:	05 c0       	rjmp	.+10     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     45e:	39 83       	std	Y+1, r19	; 0x01
     460:	28 83       	st	Y, r18
     462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     464:	f9 83       	std	Y+1, r31	; 0x01
     466:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     468:	ca 17       	cp	r28, r26
     46a:	db 07       	cpc	r29, r27
     46c:	11 f0       	breq	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     46e:	cd 93       	st	X+, r28
     470:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     486:	bf d7       	rcall	.+3966   	; 0x1406 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     488:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <pxEnd>
     48c:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <pxEnd+0x1>
     490:	89 2b       	or	r24, r25
     492:	09 f4       	brne	.+2      	; 0x496 <pvPortMalloc+0x1e>
        {
            prvHeapInit();
     494:	7e df       	rcall	.-260    	; 0x392 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     496:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__data_end>
     49a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <__data_end+0x1>
     49e:	80 23       	and	r24, r16
     4a0:	91 23       	and	r25, r17
     4a2:	89 2b       	or	r24, r25
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <pvPortMalloc+0x30>
     4a6:	76 c0       	rjmp	.+236    	; 0x594 <pvPortMalloc+0x11c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     4a8:	01 15       	cp	r16, r1
     4aa:	11 05       	cpc	r17, r1
     4ac:	49 f0       	breq	.+18     	; 0x4c0 <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     4ae:	c8 01       	movw	r24, r16
     4b0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     4b2:	08 17       	cp	r16, r24
     4b4:	19 07       	cpc	r17, r25
     4b6:	18 f0       	brcs	.+6      	; 0x4be <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     4b8:	00 e0       	ldi	r16, 0x00	; 0
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     4be:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     4c0:	01 15       	cp	r16, r1
     4c2:	11 05       	cpc	r17, r1
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <pvPortMalloc+0x50>
     4c6:	69 c0       	rjmp	.+210    	; 0x59a <pvPortMalloc+0x122>
     4c8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <xFreeBytesRemaining>
     4cc:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <xFreeBytesRemaining+0x1>
     4d0:	80 17       	cp	r24, r16
     4d2:	91 07       	cpc	r25, r17
     4d4:	08 f4       	brcc	.+2      	; 0x4d8 <pvPortMalloc+0x60>
     4d6:	64 c0       	rjmp	.+200    	; 0x5a0 <pvPortMalloc+0x128>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     4d8:	c0 91 7e 02 	lds	r28, 0x027E	; 0x80027e <xStart>
     4dc:	d0 91 7f 02 	lds	r29, 0x027F	; 0x80027f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     4e0:	ee e7       	ldi	r30, 0x7E	; 126
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     4e6:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     4e8:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	9b 81       	ldd	r25, Y+3	; 0x03
     4ee:	80 17       	cp	r24, r16
     4f0:	91 07       	cpc	r25, r17
     4f2:	20 f4       	brcc	.+8      	; 0x4fc <pvPortMalloc+0x84>
     4f4:	88 81       	ld	r24, Y
     4f6:	99 81       	ldd	r25, Y+1	; 0x01
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	a9 f7       	brne	.-22     	; 0x4e6 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     4fc:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <pxEnd>
     500:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <pxEnd+0x1>
     504:	c8 17       	cp	r28, r24
     506:	d9 07       	cpc	r29, r25
     508:	09 f4       	brne	.+2      	; 0x50c <pvPortMalloc+0x94>
     50a:	4d c0       	rjmp	.+154    	; 0x5a6 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     50c:	e0 80       	ld	r14, Z
     50e:	f1 80       	ldd	r15, Z+1	; 0x01
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	e8 0e       	add	r14, r24
     514:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     516:	88 81       	ld	r24, Y
     518:	99 81       	ldd	r25, Y+1	; 0x01
     51a:	91 83       	std	Z+1, r25	; 0x01
     51c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     51e:	2a 81       	ldd	r18, Y+2	; 0x02
     520:	3b 81       	ldd	r19, Y+3	; 0x03
     522:	20 1b       	sub	r18, r16
     524:	31 0b       	sbc	r19, r17
     526:	29 30       	cpi	r18, 0x09	; 9
     528:	31 05       	cpc	r19, r1
     52a:	48 f0       	brcs	.+18     	; 0x53e <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     52c:	ce 01       	movw	r24, r28
     52e:	80 0f       	add	r24, r16
     530:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     532:	fc 01       	movw	r30, r24
     534:	33 83       	std	Z+3, r19	; 0x03
     536:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     538:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     53a:	0a 83       	std	Y+2, r16	; 0x02
     53c:	53 df       	rcall	.-346    	; 0x3e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     53e:	2a 81       	ldd	r18, Y+2	; 0x02
     540:	3b 81       	ldd	r19, Y+3	; 0x03
     542:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <xFreeBytesRemaining>
     546:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <xFreeBytesRemaining+0x1>
     54a:	82 1b       	sub	r24, r18
     54c:	93 0b       	sbc	r25, r19
     54e:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <xFreeBytesRemaining+0x1>
     552:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     556:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <xMinimumEverFreeBytesRemaining>
     55a:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <xMinimumEverFreeBytesRemaining+0x1>
     55e:	84 17       	cp	r24, r20
     560:	95 07       	cpc	r25, r21
     562:	20 f4       	brcc	.+8      	; 0x56c <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     564:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <xMinimumEverFreeBytesRemaining+0x1>
     568:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     56c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__data_end>
     570:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <__data_end+0x1>
     574:	28 2b       	or	r18, r24
     576:	39 2b       	or	r19, r25
     578:	3b 83       	std	Y+3, r19	; 0x03
     57a:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     57c:	19 82       	std	Y+1, r1	; 0x01
     57e:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     580:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <xNumberOfSuccessfulAllocations>
     584:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <xNumberOfSuccessfulAllocations+0x1>
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <xNumberOfSuccessfulAllocations+0x1>
     58e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <xNumberOfSuccessfulAllocations>
     592:	0b c0       	rjmp	.+22     	; 0x5aa <pvPortMalloc+0x132>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     594:	e1 2c       	mov	r14, r1
     596:	f1 2c       	mov	r15, r1
     598:	08 c0       	rjmp	.+16     	; 0x5aa <pvPortMalloc+0x132>
     59a:	e1 2c       	mov	r14, r1
     59c:	f1 2c       	mov	r15, r1
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <pvPortMalloc+0x132>
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <pvPortMalloc+0x132>
     5a6:	e1 2c       	mov	r14, r1
     5a8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     5aa:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     5ae:	e1 14       	cp	r14, r1
     5b0:	f1 04       	cpc	r15, r1
     5b2:	11 f4       	brne	.+4      	; 0x5b8 <pvPortMalloc+0x140>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     5b4:	0e 94 f5 11 	call	0x23ea	; 0x23ea <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     5b8:	c7 01       	movw	r24, r14
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	89 f1       	breq	.+98     	; 0x636 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     5d4:	ec 01       	movw	r28, r24
     5d6:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     5d8:	4a 81       	ldd	r20, Y+2	; 0x02
     5da:	5b 81       	ldd	r21, Y+3	; 0x03
     5dc:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__data_end>
     5e0:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__data_end+0x1>
     5e4:	ba 01       	movw	r22, r20
     5e6:	62 23       	and	r22, r18
     5e8:	73 23       	and	r23, r19
     5ea:	67 2b       	or	r22, r23
     5ec:	21 f1       	breq	.+72     	; 0x636 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     5ee:	68 81       	ld	r22, Y
     5f0:	79 81       	ldd	r23, Y+1	; 0x01
     5f2:	67 2b       	or	r22, r23
     5f4:	01 f5       	brne	.+64     	; 0x636 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     5f6:	20 95       	com	r18
     5f8:	30 95       	com	r19
     5fa:	24 23       	and	r18, r20
     5fc:	35 23       	and	r19, r21
     5fe:	3b 83       	std	Y+3, r19	; 0x03
     600:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     602:	01 d7       	rcall	.+3586   	; 0x1406 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     604:	8a 81       	ldd	r24, Y+2	; 0x02
     606:	9b 81       	ldd	r25, Y+3	; 0x03
     608:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <xFreeBytesRemaining>
     60c:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <xFreeBytesRemaining+0x1>
     610:	82 0f       	add	r24, r18
     612:	93 1f       	adc	r25, r19
     614:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <xFreeBytesRemaining+0x1>
     618:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     61c:	ce 01       	movw	r24, r28
     61e:	e2 de       	rcall	.-572    	; 0x3e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     620:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xNumberOfSuccessfulFrees>
     624:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xNumberOfSuccessfulFrees+0x1>
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <xNumberOfSuccessfulFrees+0x1>
     62e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     632:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     640:	fc 01       	movw	r30, r24
     642:	03 96       	adiw	r24, 0x03	; 3
     644:	92 83       	std	Z+2, r25	; 0x02
     646:	81 83       	std	Z+1, r24	; 0x01
     648:	4f ef       	ldi	r20, 0xFF	; 255
     64a:	5f ef       	ldi	r21, 0xFF	; 255
     64c:	ba 01       	movw	r22, r20
     64e:	43 83       	std	Z+3, r20	; 0x03
     650:	54 83       	std	Z+4, r21	; 0x04
     652:	65 83       	std	Z+5, r22	; 0x05
     654:	76 83       	std	Z+6, r23	; 0x06
     656:	90 87       	std	Z+8, r25	; 0x08
     658:	87 83       	std	Z+7, r24	; 0x07
     65a:	92 87       	std	Z+10, r25	; 0x0a
     65c:	81 87       	std	Z+9, r24	; 0x09
     65e:	10 82       	st	Z, r1
     660:	08 95       	ret

00000662 <vListInitialiseItem>:
     662:	fc 01       	movw	r30, r24
     664:	13 86       	std	Z+11, r1	; 0x0b
     666:	12 86       	std	Z+10, r1	; 0x0a
     668:	08 95       	ret

0000066a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     674:	08 81       	ld	r16, Y
     676:	19 81       	ldd	r17, Y+1	; 0x01
     678:	2a 81       	ldd	r18, Y+2	; 0x02
     67a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     67c:	0f 3f       	cpi	r16, 0xFF	; 255
     67e:	4f ef       	ldi	r20, 0xFF	; 255
     680:	14 07       	cpc	r17, r20
     682:	24 07       	cpc	r18, r20
     684:	34 07       	cpc	r19, r20
     686:	21 f4       	brne	.+8      	; 0x690 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     688:	fc 01       	movw	r30, r24
     68a:	a1 85       	ldd	r26, Z+9	; 0x09
     68c:	b2 85       	ldd	r27, Z+10	; 0x0a
     68e:	11 c0       	rjmp	.+34     	; 0x6b2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     690:	dc 01       	movw	r26, r24
     692:	13 96       	adiw	r26, 0x03	; 3
     694:	01 c0       	rjmp	.+2      	; 0x698 <vListInsert+0x2e>
     696:	df 01       	movw	r26, r30
     698:	14 96       	adiw	r26, 0x04	; 4
     69a:	ed 91       	ld	r30, X+
     69c:	fc 91       	ld	r31, X
     69e:	15 97       	sbiw	r26, 0x05	; 5
     6a0:	40 81       	ld	r20, Z
     6a2:	51 81       	ldd	r21, Z+1	; 0x01
     6a4:	62 81       	ldd	r22, Z+2	; 0x02
     6a6:	73 81       	ldd	r23, Z+3	; 0x03
     6a8:	04 17       	cp	r16, r20
     6aa:	15 07       	cpc	r17, r21
     6ac:	26 07       	cpc	r18, r22
     6ae:	37 07       	cpc	r19, r23
     6b0:	90 f7       	brcc	.-28     	; 0x696 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     6b2:	14 96       	adiw	r26, 0x04	; 4
     6b4:	ed 91       	ld	r30, X+
     6b6:	fc 91       	ld	r31, X
     6b8:	15 97       	sbiw	r26, 0x05	; 5
     6ba:	fd 83       	std	Y+5, r31	; 0x05
     6bc:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6be:	d7 83       	std	Z+7, r29	; 0x07
     6c0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     6c2:	bf 83       	std	Y+7, r27	; 0x07
     6c4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     6c6:	15 96       	adiw	r26, 0x05	; 5
     6c8:	dc 93       	st	X, r29
     6ca:	ce 93       	st	-X, r28
     6cc:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     6ce:	9b 87       	std	Y+11, r25	; 0x0b
     6d0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 81       	ld	r18, Z
     6d6:	2f 5f       	subi	r18, 0xFF	; 255
     6d8:	20 83       	st	Z, r18
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	08 95       	ret

000006e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     6ea:	a2 85       	ldd	r26, Z+10	; 0x0a
     6ec:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6ee:	c4 81       	ldd	r28, Z+4	; 0x04
     6f0:	d5 81       	ldd	r29, Z+5	; 0x05
     6f2:	86 81       	ldd	r24, Z+6	; 0x06
     6f4:	97 81       	ldd	r25, Z+7	; 0x07
     6f6:	9f 83       	std	Y+7, r25	; 0x07
     6f8:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6fa:	c6 81       	ldd	r28, Z+6	; 0x06
     6fc:	d7 81       	ldd	r29, Z+7	; 0x07
     6fe:	84 81       	ldd	r24, Z+4	; 0x04
     700:	95 81       	ldd	r25, Z+5	; 0x05
     702:	9d 83       	std	Y+5, r25	; 0x05
     704:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     706:	11 96       	adiw	r26, 0x01	; 1
     708:	8d 91       	ld	r24, X+
     70a:	9c 91       	ld	r25, X
     70c:	12 97       	sbiw	r26, 0x02	; 2
     70e:	e8 17       	cp	r30, r24
     710:	f9 07       	cpc	r31, r25
     712:	31 f4       	brne	.+12     	; 0x720 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     714:	86 81       	ldd	r24, Z+6	; 0x06
     716:	97 81       	ldd	r25, Z+7	; 0x07
     718:	12 96       	adiw	r26, 0x02	; 2
     71a:	9c 93       	st	X, r25
     71c:	8e 93       	st	-X, r24
     71e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     720:	13 86       	std	Z+11, r1	; 0x0b
     722:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     724:	8c 91       	ld	r24, X
     726:	81 50       	subi	r24, 0x01	; 1
     728:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     72a:	8c 91       	ld	r24, X
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     732:	a8 95       	wdr
     734:	90 ec       	ldi	r25, 0xC0	; 192
     736:	88 e1       	ldi	r24, 0x18	; 24
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	a8 95       	wdr
     73e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     742:	0f be       	out	0x3f, r0	; 63
     744:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     748:	08 95       	ret

0000074a <pxPortInitialiseStack>:
     74a:	fc 01       	movw	r30, r24
     74c:	60 83       	st	Z, r22
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	70 83       	st	Z, r23
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	10 82       	st	Z, r1
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	10 82       	st	Z, r1
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	20 e8       	ldi	r18, 0x80	; 128
     75e:	20 83       	st	Z, r18
     760:	31 97       	sbiw	r30, 0x01	; 1
     762:	10 82       	st	Z, r1
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	10 82       	st	Z, r1
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	10 82       	st	Z, r1
     76c:	77 97       	sbiw	r30, 0x17	; 23
     76e:	40 83       	st	Z, r20
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	50 83       	st	Z, r21
     774:	86 97       	sbiw	r24, 0x26	; 38
     776:	08 95       	ret

00000778 <xPortStartScheduler>:
     778:	dc df       	rcall	.-72     	; 0x732 <prvSetupTimerInterrupt>
     77a:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
     77e:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
     782:	cd 91       	ld	r28, X+
     784:	cd bf       	out	0x3d, r28	; 61
     786:	dd 91       	ld	r29, X+
     788:	de bf       	out	0x3e, r29	; 62
     78a:	ff 91       	pop	r31
     78c:	ef 91       	pop	r30
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	bf 91       	pop	r27
     794:	af 91       	pop	r26
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	7f 91       	pop	r23
     79c:	6f 91       	pop	r22
     79e:	5f 91       	pop	r21
     7a0:	4f 91       	pop	r20
     7a2:	3f 91       	pop	r19
     7a4:	2f 91       	pop	r18
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	7f 90       	pop	r7
     7bc:	6f 90       	pop	r6
     7be:	5f 90       	pop	r5
     7c0:	4f 90       	pop	r4
     7c2:	3f 90       	pop	r3
     7c4:	2f 90       	pop	r2
     7c6:	1f 90       	pop	r1
     7c8:	0f 90       	pop	r0
     7ca:	0c be       	out	0x3c, r0	; 60
     7cc:	0f 90       	pop	r0
     7ce:	0b be       	out	0x3b, r0	; 59
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	08 95       	ret
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	08 95       	ret

000007dc <vPortYield>:
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	0f 92       	push	r0
     7e4:	0b b6       	in	r0, 0x3b	; 59
     7e6:	0f 92       	push	r0
     7e8:	0c b6       	in	r0, 0x3c	; 60
     7ea:	0f 92       	push	r0
     7ec:	1f 92       	push	r1
     7ee:	11 24       	eor	r1, r1
     7f0:	2f 92       	push	r2
     7f2:	3f 92       	push	r3
     7f4:	4f 92       	push	r4
     7f6:	5f 92       	push	r5
     7f8:	6f 92       	push	r6
     7fa:	7f 92       	push	r7
     7fc:	8f 92       	push	r8
     7fe:	9f 92       	push	r9
     800:	af 92       	push	r10
     802:	bf 92       	push	r11
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	ef 93       	push	r30
     82a:	ff 93       	push	r31
     82c:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
     830:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
     834:	0d b6       	in	r0, 0x3d	; 61
     836:	0d 92       	st	X+, r0
     838:	0e b6       	in	r0, 0x3e	; 62
     83a:	0d 92       	st	X+, r0
     83c:	0e 94 9f 0c 	call	0x193e	; 0x193e <vTaskSwitchContext>
     840:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
     844:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
     848:	cd 91       	ld	r28, X+
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	dd 91       	ld	r29, X+
     84e:	de bf       	out	0x3e, r29	; 62
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	6f 90       	pop	r6
     884:	5f 90       	pop	r5
     886:	4f 90       	pop	r4
     888:	3f 90       	pop	r3
     88a:	2f 90       	pop	r2
     88c:	1f 90       	pop	r1
     88e:	0f 90       	pop	r0
     890:	0c be       	out	0x3c, r0	; 60
     892:	0f 90       	pop	r0
     894:	0b be       	out	0x3b, r0	; 59
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	08 95       	ret

0000089e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	0f 92       	push	r0
     8a6:	0b b6       	in	r0, 0x3b	; 59
     8a8:	0f 92       	push	r0
     8aa:	0c b6       	in	r0, 0x3c	; 60
     8ac:	0f 92       	push	r0
     8ae:	1f 92       	push	r1
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 92       	push	r2
     8b4:	3f 92       	push	r3
     8b6:	4f 92       	push	r4
     8b8:	5f 92       	push	r5
     8ba:	6f 92       	push	r6
     8bc:	7f 92       	push	r7
     8be:	8f 92       	push	r8
     8c0:	9f 92       	push	r9
     8c2:	af 92       	push	r10
     8c4:	bf 92       	push	r11
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ef 93       	push	r30
     8ec:	ff 93       	push	r31
     8ee:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
     8f2:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
     8f6:	0d b6       	in	r0, 0x3d	; 61
     8f8:	0d 92       	st	X+, r0
     8fa:	0e b6       	in	r0, 0x3e	; 62
     8fc:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     8fe:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     900:	96 d5       	rcall	.+2860   	; 0x142e <xTaskIncrementTick>
     902:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     904:	0e 94 9f 0c 	call	0x193e	; 0x193e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     908:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
     90c:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
     910:	cd 91       	ld	r28, X+
     912:	cd bf       	out	0x3d, r28	; 61
     914:	dd 91       	ld	r29, X+
     916:	de bf       	out	0x3e, r29	; 62
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	bf 91       	pop	r27
     922:	af 91       	pop	r26
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	7f 91       	pop	r23
     92a:	6f 91       	pop	r22
     92c:	5f 91       	pop	r21
     92e:	4f 91       	pop	r20
     930:	3f 91       	pop	r19
     932:	2f 91       	pop	r18
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	7f 90       	pop	r7
     94a:	6f 90       	pop	r6
     94c:	5f 90       	pop	r5
     94e:	4f 90       	pop	r4
     950:	3f 90       	pop	r3
     952:	2f 90       	pop	r2
     954:	1f 90       	pop	r1
     956:	0f 90       	pop	r0
     958:	0c be       	out	0x3c, r0	; 60
     95a:	0f 90       	pop	r0
     95c:	0b be       	out	0x3b, r0	; 59
     95e:	0f 90       	pop	r0
     960:	0f be       	out	0x3f, r0	; 63
     962:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     964:	08 95       	ret

00000966 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     966:	9b df       	rcall	.-202    	; 0x89e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     968:	18 95       	reti

0000096a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	0f 92       	push	r0
     970:	fc 01       	movw	r30, r24
     972:	86 8d       	ldd	r24, Z+30	; 0x1e
     974:	81 11       	cpse	r24, r1
     976:	02 c0       	rjmp	.+4      	; 0x97c <prvIsQueueEmpty+0x12>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	01 c0       	rjmp	.+2      	; 0x97e <prvIsQueueEmpty+0x14>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	08 95       	ret

00000984 <prvIsQueueFull>:
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	0f 92       	push	r0
     98a:	fc 01       	movw	r30, r24
     98c:	26 8d       	ldd	r18, Z+30	; 0x1e
     98e:	87 8d       	ldd	r24, Z+31	; 0x1f
     990:	28 13       	cpse	r18, r24
     992:	02 c0       	rjmp	.+4      	; 0x998 <prvIsQueueFull+0x14>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	01 c0       	rjmp	.+2      	; 0x99a <prvIsQueueFull+0x16>
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	08 95       	ret

000009a0 <prvCopyDataToQueue>:
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
     9aa:	04 2f       	mov	r16, r20
     9ac:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9ae:	48 a1       	ldd	r20, Y+32	; 0x20
     9b0:	41 11       	cpse	r20, r1
     9b2:	0c c0       	rjmp	.+24     	; 0x9cc <prvCopyDataToQueue+0x2c>
     9b4:	88 81       	ld	r24, Y
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
     9b8:	89 2b       	or	r24, r25
     9ba:	09 f0       	breq	.+2      	; 0x9be <prvCopyDataToQueue+0x1e>
     9bc:	42 c0       	rjmp	.+132    	; 0xa42 <prvCopyDataToQueue+0xa2>
     9be:	8c 81       	ldd	r24, Y+4	; 0x04
     9c0:	9d 81       	ldd	r25, Y+5	; 0x05
     9c2:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <xTaskPriorityDisinherit>
     9c6:	1d 82       	std	Y+5, r1	; 0x05
     9c8:	1c 82       	std	Y+4, r1	; 0x04
     9ca:	42 c0       	rjmp	.+132    	; 0xa50 <prvCopyDataToQueue+0xb0>
     9cc:	01 11       	cpse	r16, r1
     9ce:	17 c0       	rjmp	.+46     	; 0x9fe <prvCopyDataToQueue+0x5e>
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	9b 81       	ldd	r25, Y+3	; 0x03
     9d6:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <memcpy>
     9da:	28 a1       	ldd	r18, Y+32	; 0x20
     9dc:	8a 81       	ldd	r24, Y+2	; 0x02
     9de:	9b 81       	ldd	r25, Y+3	; 0x03
     9e0:	82 0f       	add	r24, r18
     9e2:	91 1d       	adc	r25, r1
     9e4:	9b 83       	std	Y+3, r25	; 0x03
     9e6:	8a 83       	std	Y+2, r24	; 0x02
     9e8:	2c 81       	ldd	r18, Y+4	; 0x04
     9ea:	3d 81       	ldd	r19, Y+5	; 0x05
     9ec:	82 17       	cp	r24, r18
     9ee:	93 07       	cpc	r25, r19
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <prvCopyDataToQueue+0xa6>
     9f2:	88 81       	ld	r24, Y
     9f4:	99 81       	ldd	r25, Y+1	; 0x01
     9f6:	9b 83       	std	Y+3, r25	; 0x03
     9f8:	8a 83       	std	Y+2, r24	; 0x02
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	29 c0       	rjmp	.+82     	; 0xa50 <prvCopyDataToQueue+0xb0>
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	8e 81       	ldd	r24, Y+6	; 0x06
     a02:	9f 81       	ldd	r25, Y+7	; 0x07
     a04:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <memcpy>
     a08:	88 a1       	ldd	r24, Y+32	; 0x20
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	91 95       	neg	r25
     a0e:	81 95       	neg	r24
     a10:	91 09       	sbc	r25, r1
     a12:	2e 81       	ldd	r18, Y+6	; 0x06
     a14:	3f 81       	ldd	r19, Y+7	; 0x07
     a16:	28 0f       	add	r18, r24
     a18:	39 1f       	adc	r19, r25
     a1a:	3f 83       	std	Y+7, r19	; 0x07
     a1c:	2e 83       	std	Y+6, r18	; 0x06
     a1e:	48 81       	ld	r20, Y
     a20:	59 81       	ldd	r21, Y+1	; 0x01
     a22:	24 17       	cp	r18, r20
     a24:	35 07       	cpc	r19, r21
     a26:	30 f4       	brcc	.+12     	; 0xa34 <prvCopyDataToQueue+0x94>
     a28:	2c 81       	ldd	r18, Y+4	; 0x04
     a2a:	3d 81       	ldd	r19, Y+5	; 0x05
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	9f 83       	std	Y+7, r25	; 0x07
     a32:	8e 83       	std	Y+6, r24	; 0x06
     a34:	02 30       	cpi	r16, 0x02	; 2
     a36:	49 f4       	brne	.+18     	; 0xa4a <prvCopyDataToQueue+0xaa>
     a38:	11 23       	and	r17, r17
     a3a:	49 f0       	breq	.+18     	; 0xa4e <prvCopyDataToQueue+0xae>
     a3c:	11 50       	subi	r17, 0x01	; 1
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <prvCopyDataToQueue+0xb0>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	05 c0       	rjmp	.+10     	; 0xa50 <prvCopyDataToQueue+0xb0>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <prvCopyDataToQueue+0xb0>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <prvCopyDataToQueue+0xb0>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	1f 5f       	subi	r17, 0xFF	; 255
     a52:	1e 8f       	std	Y+30, r17	; 0x1e
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	08 95       	ret

00000a5e <prvCopyDataFromQueue>:
     a5e:	fc 01       	movw	r30, r24
     a60:	40 a1       	ldd	r20, Z+32	; 0x20
     a62:	44 23       	and	r20, r20
     a64:	a9 f0       	breq	.+42     	; 0xa90 <prvCopyDataFromQueue+0x32>
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	26 81       	ldd	r18, Z+6	; 0x06
     a6a:	37 81       	ldd	r19, Z+7	; 0x07
     a6c:	24 0f       	add	r18, r20
     a6e:	35 1f       	adc	r19, r21
     a70:	37 83       	std	Z+7, r19	; 0x07
     a72:	26 83       	std	Z+6, r18	; 0x06
     a74:	84 81       	ldd	r24, Z+4	; 0x04
     a76:	95 81       	ldd	r25, Z+5	; 0x05
     a78:	28 17       	cp	r18, r24
     a7a:	39 07       	cpc	r19, r25
     a7c:	20 f0       	brcs	.+8      	; 0xa86 <prvCopyDataFromQueue+0x28>
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	97 83       	std	Z+7, r25	; 0x07
     a84:	86 83       	std	Z+6, r24	; 0x06
     a86:	cb 01       	movw	r24, r22
     a88:	66 81       	ldd	r22, Z+6	; 0x06
     a8a:	77 81       	ldd	r23, Z+7	; 0x07
     a8c:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <memcpy>
     a90:	08 95       	ret

00000a92 <prvUnlockQueue>:
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	0f 92       	push	r0
     aa0:	1a a1       	ldd	r17, Y+34	; 0x22
     aa2:	0b c0       	rjmp	.+22     	; 0xaba <prvUnlockQueue+0x28>
     aa4:	8b 89       	ldd	r24, Y+19	; 0x13
     aa6:	88 23       	and	r24, r24
     aa8:	51 f0       	breq	.+20     	; 0xabe <prvUnlockQueue+0x2c>
     aaa:	ce 01       	movw	r24, r28
     aac:	43 96       	adiw	r24, 0x13	; 19
     aae:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <xTaskRemoveFromEventList>
     ab2:	81 11       	cpse	r24, r1
     ab4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vTaskMissedYield>
     ab8:	11 50       	subi	r17, 0x01	; 1
     aba:	11 16       	cp	r1, r17
     abc:	9c f3       	brlt	.-26     	; 0xaa4 <prvUnlockQueue+0x12>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	8a a3       	std	Y+34, r24	; 0x22
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	0f 92       	push	r0
     acc:	19 a1       	ldd	r17, Y+33	; 0x21
     ace:	0a c0       	rjmp	.+20     	; 0xae4 <prvUnlockQueue+0x52>
     ad0:	88 85       	ldd	r24, Y+8	; 0x08
     ad2:	88 23       	and	r24, r24
     ad4:	49 f0       	breq	.+18     	; 0xae8 <prvUnlockQueue+0x56>
     ad6:	ce 01       	movw	r24, r28
     ad8:	08 96       	adiw	r24, 0x08	; 8
     ada:	ee d7       	rcall	.+4060   	; 0x1ab8 <xTaskRemoveFromEventList>
     adc:	81 11       	cpse	r24, r1
     ade:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vTaskMissedYield>
     ae2:	11 50       	subi	r17, 0x01	; 1
     ae4:	11 16       	cp	r1, r17
     ae6:	a4 f3       	brlt	.-24     	; 0xad0 <prvUnlockQueue+0x3e>
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	89 a3       	std	Y+33, r24	; 0x21
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	08 95       	ret

00000af8 <xQueueGenericReset>:
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	0f 92       	push	r0
     b04:	e8 81       	ld	r30, Y
     b06:	f9 81       	ldd	r31, Y+1	; 0x01
     b08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b0a:	28 a1       	ldd	r18, Y+32	; 0x20
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	82 9f       	mul	r24, r18
     b12:	a0 01       	movw	r20, r0
     b14:	83 9f       	mul	r24, r19
     b16:	50 0d       	add	r21, r0
     b18:	92 9f       	mul	r25, r18
     b1a:	50 0d       	add	r21, r0
     b1c:	11 24       	eor	r1, r1
     b1e:	4e 0f       	add	r20, r30
     b20:	5f 1f       	adc	r21, r31
     b22:	5d 83       	std	Y+5, r21	; 0x05
     b24:	4c 83       	std	Y+4, r20	; 0x04
     b26:	1e 8e       	std	Y+30, r1	; 0x1e
     b28:	fb 83       	std	Y+3, r31	; 0x03
     b2a:	ea 83       	std	Y+2, r30	; 0x02
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	28 9f       	mul	r18, r24
     b30:	a0 01       	movw	r20, r0
     b32:	29 9f       	mul	r18, r25
     b34:	50 0d       	add	r21, r0
     b36:	38 9f       	mul	r19, r24
     b38:	50 0d       	add	r21, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	cf 01       	movw	r24, r30
     b3e:	84 0f       	add	r24, r20
     b40:	95 1f       	adc	r25, r21
     b42:	9f 83       	std	Y+7, r25	; 0x07
     b44:	8e 83       	std	Y+6, r24	; 0x06
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	89 a3       	std	Y+33, r24	; 0x21
     b4a:	8a a3       	std	Y+34, r24	; 0x22
     b4c:	61 11       	cpse	r22, r1
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <xQueueGenericReset+0x6c>
     b50:	88 85       	ldd	r24, Y+8	; 0x08
     b52:	88 23       	and	r24, r24
     b54:	69 f0       	breq	.+26     	; 0xb70 <xQueueGenericReset+0x78>
     b56:	ce 01       	movw	r24, r28
     b58:	08 96       	adiw	r24, 0x08	; 8
     b5a:	ae d7       	rcall	.+3932   	; 0x1ab8 <xTaskRemoveFromEventList>
     b5c:	88 23       	and	r24, r24
     b5e:	41 f0       	breq	.+16     	; 0xb70 <xQueueGenericReset+0x78>
     b60:	3d de       	rcall	.-902    	; 0x7dc <vPortYield>
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <xQueueGenericReset+0x78>
     b64:	ce 01       	movw	r24, r28
     b66:	08 96       	adiw	r24, 0x08	; 8
     b68:	6b dd       	rcall	.-1322   	; 0x640 <vListInitialise>
     b6a:	ce 01       	movw	r24, r28
     b6c:	43 96       	adiw	r24, 0x13	; 19
     b6e:	68 dd       	rcall	.-1328   	; 0x640 <vListInitialise>
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <prvInitialiseNewQueue>:
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	f8 01       	movw	r30, r16
     b82:	61 11       	cpse	r22, r1
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <prvInitialiseNewQueue+0x10>
     b86:	11 83       	std	Z+1, r17	; 0x01
     b88:	00 83       	st	Z, r16
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <prvInitialiseNewQueue+0x14>
     b8c:	51 83       	std	Z+1, r21	; 0x01
     b8e:	40 83       	st	Z, r20
     b90:	87 8f       	std	Z+31, r24	; 0x1f
     b92:	60 a3       	std	Z+32, r22	; 0x20
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	cf 01       	movw	r24, r30
     b98:	af df       	rcall	.-162    	; 0xaf8 <xQueueGenericReset>
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	08 95       	ret

00000ba0 <xQueueGenericCreate>:
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	f8 2e       	mov	r15, r24
     bb0:	e6 2e       	mov	r14, r22
     bb2:	d4 2e       	mov	r13, r20
     bb4:	86 9f       	mul	r24, r22
     bb6:	c0 01       	movw	r24, r0
     bb8:	11 24       	eor	r1, r1
     bba:	83 96       	adiw	r24, 0x23	; 35
     bbc:	5d dc       	rcall	.-1862   	; 0x478 <pvPortMalloc>
     bbe:	ec 01       	movw	r28, r24
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	41 f0       	breq	.+16     	; 0xbd4 <xQueueGenericCreate+0x34>
     bc4:	8c 01       	movw	r16, r24
     bc6:	2d 2d       	mov	r18, r13
     bc8:	ac 01       	movw	r20, r24
     bca:	4d 5d       	subi	r20, 0xDD	; 221
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	6e 2d       	mov	r22, r14
     bd0:	8f 2d       	mov	r24, r15
     bd2:	d4 df       	rcall	.-88     	; 0xb7c <prvInitialiseNewQueue>
     bd4:	ce 01       	movw	r24, r28
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	08 95       	ret

00000be6 <xQueueGenericSend>:
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	29 97       	sbiw	r28, 0x09	; 9
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	7c 01       	movw	r14, r24
     c08:	6b 01       	movw	r12, r22
     c0a:	2e 83       	std	Y+6, r18	; 0x06
     c0c:	3f 83       	std	Y+7, r19	; 0x07
     c0e:	48 87       	std	Y+8, r20	; 0x08
     c10:	59 87       	std	Y+9, r21	; 0x09
     c12:	10 e0       	ldi	r17, 0x00	; 0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	0f 92       	push	r0
     c1a:	f7 01       	movw	r30, r14
     c1c:	96 8d       	ldd	r25, Z+30	; 0x1e
     c1e:	87 8d       	ldd	r24, Z+31	; 0x1f
     c20:	98 17       	cp	r25, r24
     c22:	10 f0       	brcs	.+4      	; 0xc28 <xQueueGenericSend+0x42>
     c24:	02 30       	cpi	r16, 0x02	; 2
     c26:	a9 f4       	brne	.+42     	; 0xc52 <xQueueGenericSend+0x6c>
     c28:	40 2f       	mov	r20, r16
     c2a:	b6 01       	movw	r22, r12
     c2c:	c7 01       	movw	r24, r14
     c2e:	b8 de       	rcall	.-656    	; 0x9a0 <prvCopyDataToQueue>
     c30:	f7 01       	movw	r30, r14
     c32:	93 89       	ldd	r25, Z+19	; 0x13
     c34:	99 23       	and	r25, r25
     c36:	39 f0       	breq	.+14     	; 0xc46 <xQueueGenericSend+0x60>
     c38:	c7 01       	movw	r24, r14
     c3a:	43 96       	adiw	r24, 0x13	; 19
     c3c:	3d d7       	rcall	.+3706   	; 0x1ab8 <xTaskRemoveFromEventList>
     c3e:	88 23       	and	r24, r24
     c40:	21 f0       	breq	.+8      	; 0xc4a <xQueueGenericSend+0x64>
     c42:	cc dd       	rcall	.-1128   	; 0x7dc <vPortYield>
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <xQueueGenericSend+0x64>
     c46:	81 11       	cpse	r24, r1
     c48:	c9 dd       	rcall	.-1134   	; 0x7dc <vPortYield>
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	46 c0       	rjmp	.+140    	; 0xcde <xQueueGenericSend+0xf8>
     c52:	8e 81       	ldd	r24, Y+6	; 0x06
     c54:	9f 81       	ldd	r25, Y+7	; 0x07
     c56:	a8 85       	ldd	r26, Y+8	; 0x08
     c58:	b9 85       	ldd	r27, Y+9	; 0x09
     c5a:	89 2b       	or	r24, r25
     c5c:	8a 2b       	or	r24, r26
     c5e:	8b 2b       	or	r24, r27
     c60:	21 f4       	brne	.+8      	; 0xc6a <xQueueGenericSend+0x84>
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	3a c0       	rjmp	.+116    	; 0xcde <xQueueGenericSend+0xf8>
     c6a:	11 11       	cpse	r17, r1
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <xQueueGenericSend+0x90>
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	d1 d7       	rcall	.+4002   	; 0x1c16 <vTaskInternalSetTimeOutState>
     c74:	11 e0       	ldi	r17, 0x01	; 1
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	c5 d3       	rcall	.+1930   	; 0x1406 <vTaskSuspendAll>
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	0f 92       	push	r0
     c82:	f7 01       	movw	r30, r14
     c84:	81 a1       	ldd	r24, Z+33	; 0x21
     c86:	8f 3f       	cpi	r24, 0xFF	; 255
     c88:	09 f4       	brne	.+2      	; 0xc8c <xQueueGenericSend+0xa6>
     c8a:	11 a2       	std	Z+33, r1	; 0x21
     c8c:	f7 01       	movw	r30, r14
     c8e:	82 a1       	ldd	r24, Z+34	; 0x22
     c90:	8f 3f       	cpi	r24, 0xFF	; 255
     c92:	09 f4       	brne	.+2      	; 0xc96 <xQueueGenericSend+0xb0>
     c94:	12 a2       	std	Z+34, r1	; 0x22
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	be 01       	movw	r22, r28
     c9c:	6a 5f       	subi	r22, 0xFA	; 250
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	c9 d7       	rcall	.+3986   	; 0x1c38 <xTaskCheckForTimeOut>
     ca6:	81 11       	cpse	r24, r1
     ca8:	16 c0       	rjmp	.+44     	; 0xcd6 <xQueueGenericSend+0xf0>
     caa:	c7 01       	movw	r24, r14
     cac:	6b de       	rcall	.-810    	; 0x984 <prvIsQueueFull>
     cae:	88 23       	and	r24, r24
     cb0:	71 f0       	breq	.+28     	; 0xcce <xQueueGenericSend+0xe8>
     cb2:	4e 81       	ldd	r20, Y+6	; 0x06
     cb4:	5f 81       	ldd	r21, Y+7	; 0x07
     cb6:	68 85       	ldd	r22, Y+8	; 0x08
     cb8:	79 85       	ldd	r23, Y+9	; 0x09
     cba:	c7 01       	movw	r24, r14
     cbc:	08 96       	adiw	r24, 0x08	; 8
     cbe:	a3 d6       	rcall	.+3398   	; 0x1a06 <vTaskPlaceOnEventList>
     cc0:	c7 01       	movw	r24, r14
     cc2:	e7 de       	rcall	.-562    	; 0xa92 <prvUnlockQueue>
     cc4:	e0 d4       	rcall	.+2496   	; 0x1686 <xTaskResumeAll>
     cc6:	81 11       	cpse	r24, r1
     cc8:	a5 cf       	rjmp	.-182    	; 0xc14 <xQueueGenericSend+0x2e>
     cca:	88 dd       	rcall	.-1264   	; 0x7dc <vPortYield>
     ccc:	a3 cf       	rjmp	.-186    	; 0xc14 <xQueueGenericSend+0x2e>
     cce:	c7 01       	movw	r24, r14
     cd0:	e0 de       	rcall	.-576    	; 0xa92 <prvUnlockQueue>
     cd2:	d9 d4       	rcall	.+2482   	; 0x1686 <xTaskResumeAll>
     cd4:	9f cf       	rjmp	.-194    	; 0xc14 <xQueueGenericSend+0x2e>
     cd6:	c7 01       	movw	r24, r14
     cd8:	dc de       	rcall	.-584    	; 0xa92 <prvUnlockQueue>
     cda:	d5 d4       	rcall	.+2474   	; 0x1686 <xTaskResumeAll>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	29 96       	adiw	r28, 0x09	; 9
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	08 95       	ret

00000cfc <prvInitialiseMutex>:
     cfc:	0f 93       	push	r16
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	69 f0       	breq	.+26     	; 0xd1c <prvInitialiseMutex+0x20>
     d02:	fc 01       	movw	r30, r24
     d04:	15 82       	std	Z+5, r1	; 0x05
     d06:	14 82       	std	Z+4, r1	; 0x04
     d08:	11 82       	std	Z+1, r1	; 0x01
     d0a:	10 82       	st	Z, r1
     d0c:	16 82       	std	Z+6, r1	; 0x06
     d0e:	00 e0       	ldi	r16, 0x00	; 0
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	65 df       	rcall	.-310    	; 0xbe6 <xQueueGenericSend>
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <xQueueCreateMutex>:
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	48 2f       	mov	r20, r24
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	3a df       	rcall	.-396    	; 0xba0 <xQueueGenericCreate>
     d2c:	ec 01       	movw	r28, r24
     d2e:	e6 df       	rcall	.-52     	; 0xcfc <prvInitialiseMutex>
     d30:	ce 01       	movw	r24, r28
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <xQueueGenericSendFromISR>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	8a 01       	movw	r16, r20
     d46:	fc 01       	movw	r30, r24
     d48:	56 8d       	ldd	r21, Z+30	; 0x1e
     d4a:	37 8d       	ldd	r19, Z+31	; 0x1f
     d4c:	53 17       	cp	r21, r19
     d4e:	10 f0       	brcs	.+4      	; 0xd54 <xQueueGenericSendFromISR+0x1c>
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	f1 f4       	brne	.+60     	; 0xd90 <xQueueGenericSendFromISR+0x58>
     d54:	42 2f       	mov	r20, r18
     d56:	78 01       	movw	r14, r16
     d58:	ec 01       	movw	r28, r24
     d5a:	1a a1       	ldd	r17, Y+34	; 0x22
     d5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d5e:	ce 01       	movw	r24, r28
     d60:	1f de       	rcall	.-962    	; 0x9a0 <prvCopyDataToQueue>
     d62:	1f 3f       	cpi	r17, 0xFF	; 255
     d64:	79 f4       	brne	.+30     	; 0xd84 <xQueueGenericSendFromISR+0x4c>
     d66:	8b 89       	ldd	r24, Y+19	; 0x13
     d68:	88 23       	and	r24, r24
     d6a:	a1 f0       	breq	.+40     	; 0xd94 <xQueueGenericSendFromISR+0x5c>
     d6c:	ce 01       	movw	r24, r28
     d6e:	43 96       	adiw	r24, 0x13	; 19
     d70:	a3 d6       	rcall	.+3398   	; 0x1ab8 <xTaskRemoveFromEventList>
     d72:	88 23       	and	r24, r24
     d74:	89 f0       	breq	.+34     	; 0xd98 <xQueueGenericSendFromISR+0x60>
     d76:	e1 14       	cp	r14, r1
     d78:	f1 04       	cpc	r15, r1
     d7a:	81 f0       	breq	.+32     	; 0xd9c <xQueueGenericSendFromISR+0x64>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	f7 01       	movw	r30, r14
     d80:	80 83       	st	Z, r24
     d82:	0d c0       	rjmp	.+26     	; 0xd9e <xQueueGenericSendFromISR+0x66>
     d84:	ff 24       	eor	r15, r15
     d86:	f3 94       	inc	r15
     d88:	f1 0e       	add	r15, r17
     d8a:	fa a2       	std	Y+34, r15	; 0x22
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <xQueueGenericSendFromISR+0x66>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <xQueueGenericSendFromISR+0x66>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <xQueueGenericSendFromISR+0x66>
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <xQueueGenericSendFromISR+0x66>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	08 95       	ret

00000dac <xQueueReceive>:
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	29 97       	sbiw	r28, 0x09	; 9
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	8c 01       	movw	r16, r24
     dce:	6b 01       	movw	r12, r22
     dd0:	2e 83       	std	Y+6, r18	; 0x06
     dd2:	3f 83       	std	Y+7, r19	; 0x07
     dd4:	48 87       	std	Y+8, r20	; 0x08
     dd6:	59 87       	std	Y+9, r21	; 0x09
     dd8:	e1 2c       	mov	r14, r1
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	0f 92       	push	r0
     de0:	f8 01       	movw	r30, r16
     de2:	f6 8c       	ldd	r15, Z+30	; 0x1e
     de4:	ff 20       	and	r15, r15
     de6:	91 f0       	breq	.+36     	; 0xe0c <xQueueReceive+0x60>
     de8:	b6 01       	movw	r22, r12
     dea:	c8 01       	movw	r24, r16
     dec:	38 de       	rcall	.-912    	; 0xa5e <prvCopyDataFromQueue>
     dee:	fa 94       	dec	r15
     df0:	f8 01       	movw	r30, r16
     df2:	f6 8e       	std	Z+30, r15	; 0x1e
     df4:	80 85       	ldd	r24, Z+8	; 0x08
     df6:	88 23       	and	r24, r24
     df8:	29 f0       	breq	.+10     	; 0xe04 <xQueueReceive+0x58>
     dfa:	c8 01       	movw	r24, r16
     dfc:	08 96       	adiw	r24, 0x08	; 8
     dfe:	5c d6       	rcall	.+3256   	; 0x1ab8 <xTaskRemoveFromEventList>
     e00:	81 11       	cpse	r24, r1
     e02:	ec dc       	rcall	.-1576   	; 0x7dc <vPortYield>
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	4c c0       	rjmp	.+152    	; 0xea4 <xQueueReceive+0xf8>
     e0c:	8e 81       	ldd	r24, Y+6	; 0x06
     e0e:	9f 81       	ldd	r25, Y+7	; 0x07
     e10:	a8 85       	ldd	r26, Y+8	; 0x08
     e12:	b9 85       	ldd	r27, Y+9	; 0x09
     e14:	89 2b       	or	r24, r25
     e16:	8a 2b       	or	r24, r26
     e18:	8b 2b       	or	r24, r27
     e1a:	21 f4       	brne	.+8      	; 0xe24 <xQueueReceive+0x78>
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	40 c0       	rjmp	.+128    	; 0xea4 <xQueueReceive+0xf8>
     e24:	e1 10       	cpse	r14, r1
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <xQueueReceive+0x86>
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	f4 d6       	rcall	.+3560   	; 0x1c16 <vTaskInternalSetTimeOutState>
     e2e:	ee 24       	eor	r14, r14
     e30:	e3 94       	inc	r14
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	e7 d2       	rcall	.+1486   	; 0x1406 <vTaskSuspendAll>
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	0f 92       	push	r0
     e3e:	f8 01       	movw	r30, r16
     e40:	81 a1       	ldd	r24, Z+33	; 0x21
     e42:	8f 3f       	cpi	r24, 0xFF	; 255
     e44:	09 f4       	brne	.+2      	; 0xe48 <xQueueReceive+0x9c>
     e46:	11 a2       	std	Z+33, r1	; 0x21
     e48:	f8 01       	movw	r30, r16
     e4a:	82 a1       	ldd	r24, Z+34	; 0x22
     e4c:	8f 3f       	cpi	r24, 0xFF	; 255
     e4e:	09 f4       	brne	.+2      	; 0xe52 <xQueueReceive+0xa6>
     e50:	12 a2       	std	Z+34, r1	; 0x22
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	be 01       	movw	r22, r28
     e58:	6a 5f       	subi	r22, 0xFA	; 250
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	eb d6       	rcall	.+3542   	; 0x1c38 <xTaskCheckForTimeOut>
     e62:	81 11       	cpse	r24, r1
     e64:	16 c0       	rjmp	.+44     	; 0xe92 <xQueueReceive+0xe6>
     e66:	c8 01       	movw	r24, r16
     e68:	80 dd       	rcall	.-1280   	; 0x96a <prvIsQueueEmpty>
     e6a:	88 23       	and	r24, r24
     e6c:	71 f0       	breq	.+28     	; 0xe8a <xQueueReceive+0xde>
     e6e:	4e 81       	ldd	r20, Y+6	; 0x06
     e70:	5f 81       	ldd	r21, Y+7	; 0x07
     e72:	68 85       	ldd	r22, Y+8	; 0x08
     e74:	79 85       	ldd	r23, Y+9	; 0x09
     e76:	c8 01       	movw	r24, r16
     e78:	43 96       	adiw	r24, 0x13	; 19
     e7a:	c5 d5       	rcall	.+2954   	; 0x1a06 <vTaskPlaceOnEventList>
     e7c:	c8 01       	movw	r24, r16
     e7e:	09 de       	rcall	.-1006   	; 0xa92 <prvUnlockQueue>
     e80:	02 d4       	rcall	.+2052   	; 0x1686 <xTaskResumeAll>
     e82:	81 11       	cpse	r24, r1
     e84:	aa cf       	rjmp	.-172    	; 0xdda <xQueueReceive+0x2e>
     e86:	aa dc       	rcall	.-1708   	; 0x7dc <vPortYield>
     e88:	a8 cf       	rjmp	.-176    	; 0xdda <xQueueReceive+0x2e>
     e8a:	c8 01       	movw	r24, r16
     e8c:	02 de       	rcall	.-1020   	; 0xa92 <prvUnlockQueue>
     e8e:	fb d3       	rcall	.+2038   	; 0x1686 <xTaskResumeAll>
     e90:	a4 cf       	rjmp	.-184    	; 0xdda <xQueueReceive+0x2e>
     e92:	c8 01       	movw	r24, r16
     e94:	fe dd       	rcall	.-1028   	; 0xa92 <prvUnlockQueue>
     e96:	f7 d3       	rcall	.+2030   	; 0x1686 <xTaskResumeAll>
     e98:	c8 01       	movw	r24, r16
     e9a:	67 dd       	rcall	.-1330   	; 0x96a <prvIsQueueEmpty>
     e9c:	88 23       	and	r24, r24
     e9e:	09 f4       	brne	.+2      	; 0xea2 <xQueueReceive+0xf6>
     ea0:	9c cf       	rjmp	.-200    	; 0xdda <xQueueReceive+0x2e>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	29 96       	adiw	r28, 0x09	; 9
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	08 95       	ret

00000ec2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	0f 92       	push	r0
     ece:	89 a1       	ldd	r24, Y+33	; 0x21
     ed0:	8f 3f       	cpi	r24, 0xFF	; 255
     ed2:	09 f4       	brne	.+2      	; 0xed6 <vQueueWaitForMessageRestricted+0x14>
     ed4:	19 a2       	std	Y+33, r1	; 0x21
     ed6:	8a a1       	ldd	r24, Y+34	; 0x22
     ed8:	8f 3f       	cpi	r24, 0xFF	; 255
     eda:	09 f4       	brne	.+2      	; 0xede <vQueueWaitForMessageRestricted+0x1c>
     edc:	1a a2       	std	Y+34, r1	; 0x22
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     ee2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee4:	81 11       	cpse	r24, r1
     ee6:	03 c0       	rjmp	.+6      	; 0xeee <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     ee8:	ce 01       	movw	r24, r28
     eea:	43 96       	adiw	r24, 0x13	; 19
     eec:	a3 d5       	rcall	.+2886   	; 0x1a34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     eee:	ce 01       	movw	r24, r28
     ef0:	d0 dd       	rcall	.-1120   	; 0xa92 <prvUnlockQueue>
    }
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <prvResetNextTaskUnblockTime>:
     ef8:	e0 91 7f 0c 	lds	r30, 0x0C7F	; 0x800c7f <pxDelayedTaskList>
     efc:	f0 91 80 0c 	lds	r31, 0x0C80	; 0x800c80 <pxDelayedTaskList+0x1>
     f00:	80 81       	ld	r24, Z
     f02:	81 11       	cpse	r24, r1
     f04:	0c c0       	rjmp	.+24     	; 0xf1e <prvResetNextTaskUnblockTime+0x26>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	dc 01       	movw	r26, r24
     f0c:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <xNextTaskUnblockTime>
     f10:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <xNextTaskUnblockTime+0x1>
     f14:	a0 93 4b 0c 	sts	0x0C4B, r26	; 0x800c4b <xNextTaskUnblockTime+0x2>
     f18:	b0 93 4c 0c 	sts	0x0C4C, r27	; 0x800c4c <xNextTaskUnblockTime+0x3>
     f1c:	08 95       	ret
     f1e:	e0 91 7f 0c 	lds	r30, 0x0C7F	; 0x800c7f <pxDelayedTaskList>
     f22:	f0 91 80 0c 	lds	r31, 0x0C80	; 0x800c80 <pxDelayedTaskList+0x1>
     f26:	07 80       	ldd	r0, Z+7	; 0x07
     f28:	f0 85       	ldd	r31, Z+8	; 0x08
     f2a:	e0 2d       	mov	r30, r0
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	a2 81       	ldd	r26, Z+2	; 0x02
     f32:	b3 81       	ldd	r27, Z+3	; 0x03
     f34:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <xNextTaskUnblockTime>
     f38:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <xNextTaskUnblockTime+0x1>
     f3c:	a0 93 4b 0c 	sts	0x0C4B, r26	; 0x800c4b <xNextTaskUnblockTime+0x2>
     f40:	b0 93 4c 0c 	sts	0x0C4C, r27	; 0x800c4c <xNextTaskUnblockTime+0x3>
     f44:	08 95       	ret

00000f46 <prvDeleteTCB>:
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
     f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f50:	3b db       	rcall	.-2442   	; 0x5c8 <vPortFree>
     f52:	ce 01       	movw	r24, r28
     f54:	39 db       	rcall	.-2446   	; 0x5c8 <vPortFree>
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <prvInitialiseNewTask>:
     f5c:	4f 92       	push	r4
     f5e:	5f 92       	push	r5
     f60:	6f 92       	push	r6
     f62:	7f 92       	push	r7
     f64:	8f 92       	push	r8
     f66:	9f 92       	push	r9
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	2c 01       	movw	r4, r24
     f7c:	5b 01       	movw	r10, r22
     f7e:	4a 01       	movw	r8, r20
     f80:	39 01       	movw	r6, r18
     f82:	e6 01       	movw	r28, r12
     f84:	65 ea       	ldi	r22, 0xA5	; 165
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f8c:	0e 94 e5 25 	call	0x4bca	; 0x4bca <memset>
     f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f94:	21 e0       	ldi	r18, 0x01	; 1
     f96:	82 1a       	sub	r8, r18
     f98:	91 08       	sbc	r9, r1
     f9a:	88 0e       	add	r8, r24
     f9c:	99 1e       	adc	r9, r25
     f9e:	a1 14       	cp	r10, r1
     fa0:	b1 04       	cpc	r11, r1
     fa2:	89 f4       	brne	.+34     	; 0xfc6 <prvInitialiseNewTask+0x6a>
     fa4:	15 c0       	rjmp	.+42     	; 0xfd0 <prvInitialiseNewTask+0x74>
     fa6:	82 2f       	mov	r24, r18
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	f5 01       	movw	r30, r10
     fac:	e8 0f       	add	r30, r24
     fae:	f9 1f       	adc	r31, r25
     fb0:	30 81       	ld	r19, Z
     fb2:	de 01       	movw	r26, r28
     fb4:	a8 0f       	add	r26, r24
     fb6:	b9 1f       	adc	r27, r25
     fb8:	5d 96       	adiw	r26, 0x1d	; 29
     fba:	3c 93       	st	X, r19
     fbc:	80 81       	ld	r24, Z
     fbe:	88 23       	and	r24, r24
     fc0:	29 f0       	breq	.+10     	; 0xfcc <prvInitialiseNewTask+0x70>
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <prvInitialiseNewTask+0x6c>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	20 31       	cpi	r18, 0x10	; 16
     fca:	68 f3       	brcs	.-38     	; 0xfa6 <prvInitialiseNewTask+0x4a>
     fcc:	1c a6       	std	Y+44, r1	; 0x2c
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <prvInitialiseNewTask+0x76>
     fd0:	1d 8e       	std	Y+29, r1	; 0x1d
     fd2:	0a 30       	cpi	r16, 0x0A	; 10
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <prvInitialiseNewTask+0x7c>
     fd6:	09 e0       	ldi	r16, 0x09	; 9
     fd8:	0a 8f       	std	Y+26, r16	; 0x1a
     fda:	0d a7       	std	Y+45, r16	; 0x2d
     fdc:	1e a6       	std	Y+46, r1	; 0x2e
     fde:	ce 01       	movw	r24, r28
     fe0:	02 96       	adiw	r24, 0x02	; 2
     fe2:	3f db       	rcall	.-2434   	; 0x662 <vListInitialiseItem>
     fe4:	ce 01       	movw	r24, r28
     fe6:	0e 96       	adiw	r24, 0x0e	; 14
     fe8:	3c db       	rcall	.-2440   	; 0x662 <vListInitialiseItem>
     fea:	db 87       	std	Y+11, r29	; 0x0b
     fec:	ca 87       	std	Y+10, r28	; 0x0a
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	80 1b       	sub	r24, r16
     ff8:	91 09       	sbc	r25, r1
     ffa:	a1 09       	sbc	r26, r1
     ffc:	b1 09       	sbc	r27, r1
     ffe:	8e 87       	std	Y+14, r24	; 0x0e
    1000:	9f 87       	std	Y+15, r25	; 0x0f
    1002:	a8 8b       	std	Y+16, r26	; 0x10
    1004:	b9 8b       	std	Y+17, r27	; 0x11
    1006:	df 8b       	std	Y+23, r29	; 0x17
    1008:	ce 8b       	std	Y+22, r28	; 0x16
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	fe 01       	movw	r30, r28
    100e:	bf 96       	adiw	r30, 0x2f	; 47
    1010:	df 01       	movw	r26, r30
    1012:	1d 92       	st	X+, r1
    1014:	8a 95       	dec	r24
    1016:	e9 f7       	brne	.-6      	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1018:	1b aa       	std	Y+51, r1	; 0x33
    101a:	a3 01       	movw	r20, r6
    101c:	b2 01       	movw	r22, r4
    101e:	c4 01       	movw	r24, r8
    1020:	94 db       	rcall	.-2264   	; 0x74a <pxPortInitialiseStack>
    1022:	99 83       	std	Y+1, r25	; 0x01
    1024:	88 83       	st	Y, r24
    1026:	e1 14       	cp	r14, r1
    1028:	f1 04       	cpc	r15, r1
    102a:	19 f0       	breq	.+6      	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    102c:	f7 01       	movw	r30, r14
    102e:	d1 83       	std	Z+1, r29	; 0x01
    1030:	c0 83       	st	Z, r28
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	9f 90       	pop	r9
    1046:	8f 90       	pop	r8
    1048:	7f 90       	pop	r7
    104a:	6f 90       	pop	r6
    104c:	5f 90       	pop	r5
    104e:	4f 90       	pop	r4
    1050:	08 95       	ret

00001052 <prvInitialiseTaskLists>:
    1052:	cf 93       	push	r28
    1054:	c0 e0       	ldi	r28, 0x00	; 0
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <prvInitialiseTaskLists+0x16>
    1058:	2b e0       	ldi	r18, 0x0B	; 11
    105a:	c2 9f       	mul	r28, r18
    105c:	c0 01       	movw	r24, r0
    105e:	11 24       	eor	r1, r1
    1060:	89 56       	subi	r24, 0x69	; 105
    1062:	93 4f       	sbci	r25, 0xF3	; 243
    1064:	ed da       	rcall	.-2598   	; 0x640 <vListInitialise>
    1066:	cf 5f       	subi	r28, 0xFF	; 255
    1068:	ca 30       	cpi	r28, 0x0A	; 10
    106a:	b0 f3       	brcs	.-20     	; 0x1058 <prvInitialiseTaskLists+0x6>
    106c:	8c e8       	ldi	r24, 0x8C	; 140
    106e:	9c e0       	ldi	r25, 0x0C	; 12
    1070:	e7 da       	rcall	.-2610   	; 0x640 <vListInitialise>
    1072:	81 e8       	ldi	r24, 0x81	; 129
    1074:	9c e0       	ldi	r25, 0x0C	; 12
    1076:	e4 da       	rcall	.-2616   	; 0x640 <vListInitialise>
    1078:	82 e7       	ldi	r24, 0x72	; 114
    107a:	9c e0       	ldi	r25, 0x0C	; 12
    107c:	e1 da       	rcall	.-2622   	; 0x640 <vListInitialise>
    107e:	87 e6       	ldi	r24, 0x67	; 103
    1080:	9c e0       	ldi	r25, 0x0C	; 12
    1082:	de da       	rcall	.-2628   	; 0x640 <vListInitialise>
    1084:	8b e5       	ldi	r24, 0x5B	; 91
    1086:	9c e0       	ldi	r25, 0x0C	; 12
    1088:	db da       	rcall	.-2634   	; 0x640 <vListInitialise>
    108a:	8c e8       	ldi	r24, 0x8C	; 140
    108c:	9c e0       	ldi	r25, 0x0C	; 12
    108e:	90 93 80 0c 	sts	0x0C80, r25	; 0x800c80 <pxDelayedTaskList+0x1>
    1092:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <pxDelayedTaskList>
    1096:	81 e8       	ldi	r24, 0x81	; 129
    1098:	9c e0       	ldi	r25, 0x0C	; 12
    109a:	90 93 7e 0c 	sts	0x0C7E, r25	; 0x800c7e <pxOverflowDelayedTaskList+0x1>
    109e:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <pxOverflowDelayedTaskList>
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <prvAddNewTaskToReadyList>:
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	0f 92       	push	r0
    10b2:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <uxCurrentNumberOfTasks>
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	80 93 5a 0c 	sts	0x0C5A, r24	; 0x800c5a <uxCurrentNumberOfTasks>
    10bc:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <pxCurrentTCB>
    10c0:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    10c4:	89 2b       	or	r24, r25
    10c6:	51 f4       	brne	.+20     	; 0x10dc <prvAddNewTaskToReadyList+0x36>
    10c8:	d0 93 06 0d 	sts	0x0D06, r29	; 0x800d06 <pxCurrentTCB+0x1>
    10cc:	c0 93 05 0d 	sts	0x0D05, r28	; 0x800d05 <pxCurrentTCB>
    10d0:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <uxCurrentNumberOfTasks>
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 f4       	brne	.+36     	; 0x10fc <prvAddNewTaskToReadyList+0x56>
    10d8:	bc df       	rcall	.-136    	; 0x1052 <prvInitialiseTaskLists>
    10da:	10 c0       	rjmp	.+32     	; 0x10fc <prvAddNewTaskToReadyList+0x56>
    10dc:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <xSchedulerRunning>
    10e0:	81 11       	cpse	r24, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <prvAddNewTaskToReadyList+0x56>
    10e4:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    10e8:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    10ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    10ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10f0:	89 17       	cp	r24, r25
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <prvAddNewTaskToReadyList+0x56>
    10f4:	d0 93 06 0d 	sts	0x0D06, r29	; 0x800d06 <pxCurrentTCB+0x1>
    10f8:	c0 93 05 0d 	sts	0x0D05, r28	; 0x800d05 <pxCurrentTCB>
    10fc:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <uxTaskNumber>
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	80 93 4d 0c 	sts	0x0C4D, r24	; 0x800c4d <uxTaskNumber>
    1106:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1108:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <uxTopReadyPriority>
    110c:	8e 17       	cp	r24, r30
    110e:	10 f4       	brcc	.+4      	; 0x1114 <prvAddNewTaskToReadyList+0x6e>
    1110:	e0 93 55 0c 	sts	0x0C55, r30	; 0x800c55 <uxTopReadyPriority>
    1114:	8b e0       	ldi	r24, 0x0B	; 11
    1116:	8e 9f       	mul	r24, r30
    1118:	f0 01       	movw	r30, r0
    111a:	11 24       	eor	r1, r1
    111c:	e9 56       	subi	r30, 0x69	; 105
    111e:	f3 4f       	sbci	r31, 0xF3	; 243
    1120:	01 80       	ldd	r0, Z+1	; 0x01
    1122:	f2 81       	ldd	r31, Z+2	; 0x02
    1124:	e0 2d       	mov	r30, r0
    1126:	ff 83       	std	Y+7, r31	; 0x07
    1128:	ee 83       	std	Y+6, r30	; 0x06
    112a:	26 81       	ldd	r18, Z+6	; 0x06
    112c:	37 81       	ldd	r19, Z+7	; 0x07
    112e:	39 87       	std	Y+9, r19	; 0x09
    1130:	28 87       	std	Y+8, r18	; 0x08
    1132:	a6 81       	ldd	r26, Z+6	; 0x06
    1134:	b7 81       	ldd	r27, Z+7	; 0x07
    1136:	9e 01       	movw	r18, r28
    1138:	2e 5f       	subi	r18, 0xFE	; 254
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	15 96       	adiw	r26, 0x05	; 5
    113e:	3c 93       	st	X, r19
    1140:	2e 93       	st	-X, r18
    1142:	14 97       	sbiw	r26, 0x04	; 4
    1144:	37 83       	std	Z+7, r19	; 0x07
    1146:	26 83       	std	Z+6, r18	; 0x06
    1148:	ea 8d       	ldd	r30, Y+26	; 0x1a
    114a:	8e 9f       	mul	r24, r30
    114c:	f0 01       	movw	r30, r0
    114e:	11 24       	eor	r1, r1
    1150:	e9 56       	subi	r30, 0x69	; 105
    1152:	f3 4f       	sbci	r31, 0xF3	; 243
    1154:	fd 87       	std	Y+13, r31	; 0x0d
    1156:	ec 87       	std	Y+12, r30	; 0x0c
    1158:	80 81       	ld	r24, Z
    115a:	8f 5f       	subi	r24, 0xFF	; 255
    115c:	80 83       	st	Z, r24
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <xSchedulerRunning>
    1166:	88 23       	and	r24, r24
    1168:	49 f0       	breq	.+18     	; 0x117c <prvAddNewTaskToReadyList+0xd6>
    116a:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    116e:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1172:	92 8d       	ldd	r25, Z+26	; 0x1a
    1174:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1176:	98 17       	cp	r25, r24
    1178:	08 f4       	brcc	.+2      	; 0x117c <prvAddNewTaskToReadyList+0xd6>
    117a:	30 db       	rcall	.-2464   	; 0x7dc <vPortYield>
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <prvCheckTasksWaitingTermination>:
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	1a c0       	rjmp	.+52     	; 0x11bc <prvCheckTasksWaitingTermination+0x3a>
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	0f 92       	push	r0
    118e:	e0 91 6e 0c 	lds	r30, 0x0C6E	; 0x800c6e <xTasksWaitingTermination+0x7>
    1192:	f0 91 6f 0c 	lds	r31, 0x0C6F	; 0x800c6f <xTasksWaitingTermination+0x8>
    1196:	c0 85       	ldd	r28, Z+8	; 0x08
    1198:	d1 85       	ldd	r29, Z+9	; 0x09
    119a:	ce 01       	movw	r24, r28
    119c:	02 96       	adiw	r24, 0x02	; 2
    119e:	a2 da       	rcall	.-2748   	; 0x6e4 <uxListRemove>
    11a0:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <uxCurrentNumberOfTasks>
    11a4:	81 50       	subi	r24, 0x01	; 1
    11a6:	80 93 5a 0c 	sts	0x0C5A, r24	; 0x800c5a <uxCurrentNumberOfTasks>
    11aa:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <uxDeletedTasksWaitingCleanUp>
    11ae:	81 50       	subi	r24, 0x01	; 1
    11b0:	80 93 66 0c 	sts	0x0C66, r24	; 0x800c66 <uxDeletedTasksWaitingCleanUp>
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	ce 01       	movw	r24, r28
    11ba:	c5 de       	rcall	.-630    	; 0xf46 <prvDeleteTCB>
    11bc:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <uxDeletedTasksWaitingCleanUp>
    11c0:	81 11       	cpse	r24, r1
    11c2:	e2 cf       	rjmp	.-60     	; 0x1188 <prvCheckTasksWaitingTermination+0x6>
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <prvAddCurrentTaskToDelayedList>:
    11ca:	8f 92       	push	r8
    11cc:	9f 92       	push	r9
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	6b 01       	movw	r12, r22
    11e0:	7c 01       	movw	r14, r24
    11e2:	c4 2f       	mov	r28, r20
    11e4:	80 90 56 0c 	lds	r8, 0x0C56	; 0x800c56 <xTickCount>
    11e8:	90 90 57 0c 	lds	r9, 0x0C57	; 0x800c57 <xTickCount+0x1>
    11ec:	a0 90 58 0c 	lds	r10, 0x0C58	; 0x800c58 <xTickCount+0x2>
    11f0:	b0 90 59 0c 	lds	r11, 0x0C59	; 0x800c59 <xTickCount+0x3>
    11f4:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <pxCurrentTCB>
    11f8:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    11fc:	02 96       	adiw	r24, 0x02	; 2
    11fe:	72 da       	rcall	.-2844   	; 0x6e4 <uxListRemove>
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	c8 16       	cp	r12, r24
    1204:	d8 06       	cpc	r13, r24
    1206:	e8 06       	cpc	r14, r24
    1208:	f8 06       	cpc	r15, r24
    120a:	b1 f5       	brne	.+108    	; 0x1278 <prvAddCurrentTaskToDelayedList+0xae>
    120c:	cc 23       	and	r28, r28
    120e:	a1 f1       	breq	.+104    	; 0x1278 <prvAddCurrentTaskToDelayedList+0xae>
    1210:	eb e5       	ldi	r30, 0x5B	; 91
    1212:	fc e0       	ldi	r31, 0x0C	; 12
    1214:	a1 81       	ldd	r26, Z+1	; 0x01
    1216:	b2 81       	ldd	r27, Z+2	; 0x02
    1218:	c0 91 05 0d 	lds	r28, 0x0D05	; 0x800d05 <pxCurrentTCB>
    121c:	d0 91 06 0d 	lds	r29, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1220:	bf 83       	std	Y+7, r27	; 0x07
    1222:	ae 83       	std	Y+6, r26	; 0x06
    1224:	c0 91 05 0d 	lds	r28, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1228:	d0 91 06 0d 	lds	r29, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    122c:	16 96       	adiw	r26, 0x06	; 6
    122e:	8d 91       	ld	r24, X+
    1230:	9c 91       	ld	r25, X
    1232:	17 97       	sbiw	r26, 0x07	; 7
    1234:	99 87       	std	Y+9, r25	; 0x09
    1236:	88 87       	std	Y+8, r24	; 0x08
    1238:	16 96       	adiw	r26, 0x06	; 6
    123a:	cd 91       	ld	r28, X+
    123c:	dc 91       	ld	r29, X
    123e:	17 97       	sbiw	r26, 0x07	; 7
    1240:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1244:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1248:	02 96       	adiw	r24, 0x02	; 2
    124a:	9d 83       	std	Y+5, r25	; 0x05
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1252:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1256:	02 96       	adiw	r24, 0x02	; 2
    1258:	17 96       	adiw	r26, 0x07	; 7
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
    125e:	16 97       	sbiw	r26, 0x06	; 6
    1260:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1264:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1268:	1d 96       	adiw	r26, 0x0d	; 13
    126a:	fc 93       	st	X, r31
    126c:	ee 93       	st	-X, r30
    126e:	1c 97       	sbiw	r26, 0x0c	; 12
    1270:	80 81       	ld	r24, Z
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 83       	st	Z, r24
    1276:	3d c0       	rjmp	.+122    	; 0x12f2 <prvAddCurrentTaskToDelayedList+0x128>
    1278:	c8 0c       	add	r12, r8
    127a:	d9 1c       	adc	r13, r9
    127c:	ea 1c       	adc	r14, r10
    127e:	fb 1c       	adc	r15, r11
    1280:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1284:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1288:	c2 82       	std	Z+2, r12	; 0x02
    128a:	d3 82       	std	Z+3, r13	; 0x03
    128c:	e4 82       	std	Z+4, r14	; 0x04
    128e:	f5 82       	std	Z+5, r15	; 0x05
    1290:	c8 14       	cp	r12, r8
    1292:	d9 04       	cpc	r13, r9
    1294:	ea 04       	cpc	r14, r10
    1296:	fb 04       	cpc	r15, r11
    1298:	60 f4       	brcc	.+24     	; 0x12b2 <prvAddCurrentTaskToDelayedList+0xe8>
    129a:	60 91 05 0d 	lds	r22, 0x0D05	; 0x800d05 <pxCurrentTCB>
    129e:	70 91 06 0d 	lds	r23, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    12a2:	80 91 7d 0c 	lds	r24, 0x0C7D	; 0x800c7d <pxOverflowDelayedTaskList>
    12a6:	90 91 7e 0c 	lds	r25, 0x0C7E	; 0x800c7e <pxOverflowDelayedTaskList+0x1>
    12aa:	6e 5f       	subi	r22, 0xFE	; 254
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	dd d9       	rcall	.-3142   	; 0x66a <vListInsert>
    12b0:	20 c0       	rjmp	.+64     	; 0x12f2 <prvAddCurrentTaskToDelayedList+0x128>
    12b2:	60 91 05 0d 	lds	r22, 0x0D05	; 0x800d05 <pxCurrentTCB>
    12b6:	70 91 06 0d 	lds	r23, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    12ba:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <pxDelayedTaskList>
    12be:	90 91 80 0c 	lds	r25, 0x0C80	; 0x800c80 <pxDelayedTaskList+0x1>
    12c2:	6e 5f       	subi	r22, 0xFE	; 254
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	d1 d9       	rcall	.-3166   	; 0x66a <vListInsert>
    12c8:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <xNextTaskUnblockTime>
    12cc:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <xNextTaskUnblockTime+0x1>
    12d0:	a0 91 4b 0c 	lds	r26, 0x0C4B	; 0x800c4b <xNextTaskUnblockTime+0x2>
    12d4:	b0 91 4c 0c 	lds	r27, 0x0C4C	; 0x800c4c <xNextTaskUnblockTime+0x3>
    12d8:	c8 16       	cp	r12, r24
    12da:	d9 06       	cpc	r13, r25
    12dc:	ea 06       	cpc	r14, r26
    12de:	fb 06       	cpc	r15, r27
    12e0:	40 f4       	brcc	.+16     	; 0x12f2 <prvAddCurrentTaskToDelayedList+0x128>
    12e2:	c0 92 49 0c 	sts	0x0C49, r12	; 0x800c49 <xNextTaskUnblockTime>
    12e6:	d0 92 4a 0c 	sts	0x0C4A, r13	; 0x800c4a <xNextTaskUnblockTime+0x1>
    12ea:	e0 92 4b 0c 	sts	0x0C4B, r14	; 0x800c4b <xNextTaskUnblockTime+0x2>
    12ee:	f0 92 4c 0c 	sts	0x0C4C, r15	; 0x800c4c <xNextTaskUnblockTime+0x3>
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	08 95       	ret

00001308 <xTaskCreate>:
    1308:	2f 92       	push	r2
    130a:	3f 92       	push	r3
    130c:	4f 92       	push	r4
    130e:	5f 92       	push	r5
    1310:	6f 92       	push	r6
    1312:	7f 92       	push	r7
    1314:	8f 92       	push	r8
    1316:	9f 92       	push	r9
    1318:	af 92       	push	r10
    131a:	bf 92       	push	r11
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	3c 01       	movw	r6, r24
    132c:	1b 01       	movw	r2, r22
    132e:	4a 01       	movw	r8, r20
    1330:	29 01       	movw	r4, r18
    1332:	ca 01       	movw	r24, r20
    1334:	a1 d8       	rcall	.-3774   	; 0x478 <pvPortMalloc>
    1336:	6c 01       	movw	r12, r24
    1338:	89 2b       	or	r24, r25
    133a:	61 f0       	breq	.+24     	; 0x1354 <xTaskCreate+0x4c>
    133c:	84 e3       	ldi	r24, 0x34	; 52
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	9b d8       	rcall	.-3786   	; 0x478 <pvPortMalloc>
    1342:	ec 01       	movw	r28, r24
    1344:	89 2b       	or	r24, r25
    1346:	19 f0       	breq	.+6      	; 0x134e <xTaskCreate+0x46>
    1348:	dc 8e       	std	Y+28, r13	; 0x1c
    134a:	cb 8e       	std	Y+27, r12	; 0x1b
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <xTaskCreate+0x50>
    134e:	c6 01       	movw	r24, r12
    1350:	3b d9       	rcall	.-3466   	; 0x5c8 <vPortFree>
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <xTaskCreate+0x50>
    1354:	c0 e0       	ldi	r28, 0x00	; 0
    1356:	d0 e0       	ldi	r29, 0x00	; 0
    1358:	20 97       	sbiw	r28, 0x00	; 0
    135a:	61 f0       	breq	.+24     	; 0x1374 <xTaskCreate+0x6c>
    135c:	a1 2c       	mov	r10, r1
    135e:	b1 2c       	mov	r11, r1
    1360:	6e 01       	movw	r12, r28
    1362:	92 01       	movw	r18, r4
    1364:	a4 01       	movw	r20, r8
    1366:	b1 01       	movw	r22, r2
    1368:	c3 01       	movw	r24, r6
    136a:	f8 dd       	rcall	.-1040   	; 0xf5c <prvInitialiseNewTask>
    136c:	ce 01       	movw	r24, r28
    136e:	9b de       	rcall	.-714    	; 0x10a6 <prvAddNewTaskToReadyList>
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <xTaskCreate+0x6e>
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	9f 90       	pop	r9
    138a:	8f 90       	pop	r8
    138c:	7f 90       	pop	r7
    138e:	6f 90       	pop	r6
    1390:	5f 90       	pop	r5
    1392:	4f 90       	pop	r4
    1394:	3f 90       	pop	r3
    1396:	2f 90       	pop	r2
    1398:	08 95       	ret

0000139a <vTaskStartScheduler>:
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	0f 2e       	mov	r0, r31
    13a2:	f7 e4       	ldi	r31, 0x47	; 71
    13a4:	ef 2e       	mov	r14, r31
    13a6:	fc e0       	ldi	r31, 0x0C	; 12
    13a8:	ff 2e       	mov	r15, r31
    13aa:	f0 2d       	mov	r31, r0
    13ac:	00 e0       	ldi	r16, 0x00	; 0
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 ec       	ldi	r20, 0xC0	; 192
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	62 e2       	ldi	r22, 0x22	; 34
    13b8:	72 e0       	ldi	r23, 0x02	; 2
    13ba:	8f e8       	ldi	r24, 0x8F	; 143
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	a4 df       	rcall	.-184    	; 0x1308 <xTaskCreate>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <vTaskStartScheduler+0x2c>
    13c4:	96 d5       	rcall	.+2860   	; 0x1ef2 <xTimerCreateTimerTask>
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	c1 f4       	brne	.+48     	; 0x13fa <vTaskStartScheduler+0x60>
    13ca:	f8 94       	cli
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	dc 01       	movw	r26, r24
    13d2:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <xNextTaskUnblockTime>
    13d6:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <xNextTaskUnblockTime+0x1>
    13da:	a0 93 4b 0c 	sts	0x0C4B, r26	; 0x800c4b <xNextTaskUnblockTime+0x2>
    13de:	b0 93 4c 0c 	sts	0x0C4C, r27	; 0x800c4c <xNextTaskUnblockTime+0x3>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <xSchedulerRunning>
    13e8:	10 92 56 0c 	sts	0x0C56, r1	; 0x800c56 <xTickCount>
    13ec:	10 92 57 0c 	sts	0x0C57, r1	; 0x800c57 <xTickCount+0x1>
    13f0:	10 92 58 0c 	sts	0x0C58, r1	; 0x800c58 <xTickCount+0x2>
    13f4:	10 92 59 0c 	sts	0x0C59, r1	; 0x800c59 <xTickCount+0x3>
    13f8:	bf d9       	rcall	.-3202   	; 0x778 <xPortStartScheduler>
    13fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	08 95       	ret

00001406 <vTaskSuspendAll>:
    1406:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxSchedulerSuspended>
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <uxSchedulerSuspended>
    1410:	08 95       	ret

00001412 <xTaskGetTickCount>:
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	0f 92       	push	r0
    1418:	60 91 56 0c 	lds	r22, 0x0C56	; 0x800c56 <xTickCount>
    141c:	70 91 57 0c 	lds	r23, 0x0C57	; 0x800c57 <xTickCount+0x1>
    1420:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <xTickCount+0x2>
    1424:	90 91 59 0c 	lds	r25, 0x0C59	; 0x800c59 <xTickCount+0x3>
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	08 95       	ret

0000142e <xTaskIncrementTick>:
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxSchedulerSuspended>
    143e:	81 11       	cpse	r24, r1
    1440:	05 c1       	rjmp	.+522    	; 0x164c <xTaskIncrementTick+0x21e>
    1442:	c0 90 56 0c 	lds	r12, 0x0C56	; 0x800c56 <xTickCount>
    1446:	d0 90 57 0c 	lds	r13, 0x0C57	; 0x800c57 <xTickCount+0x1>
    144a:	e0 90 58 0c 	lds	r14, 0x0C58	; 0x800c58 <xTickCount+0x2>
    144e:	f0 90 59 0c 	lds	r15, 0x0C59	; 0x800c59 <xTickCount+0x3>
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	c8 1a       	sub	r12, r24
    1456:	d8 0a       	sbc	r13, r24
    1458:	e8 0a       	sbc	r14, r24
    145a:	f8 0a       	sbc	r15, r24
    145c:	c0 92 56 0c 	sts	0x0C56, r12	; 0x800c56 <xTickCount>
    1460:	d0 92 57 0c 	sts	0x0C57, r13	; 0x800c57 <xTickCount+0x1>
    1464:	e0 92 58 0c 	sts	0x0C58, r14	; 0x800c58 <xTickCount+0x2>
    1468:	f0 92 59 0c 	sts	0x0C59, r15	; 0x800c59 <xTickCount+0x3>
    146c:	c1 14       	cp	r12, r1
    146e:	d1 04       	cpc	r13, r1
    1470:	e1 04       	cpc	r14, r1
    1472:	f1 04       	cpc	r15, r1
    1474:	b1 f4       	brne	.+44     	; 0x14a2 <xTaskIncrementTick+0x74>
    1476:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <pxDelayedTaskList>
    147a:	90 91 80 0c 	lds	r25, 0x0C80	; 0x800c80 <pxDelayedTaskList+0x1>
    147e:	20 91 7d 0c 	lds	r18, 0x0C7D	; 0x800c7d <pxOverflowDelayedTaskList>
    1482:	30 91 7e 0c 	lds	r19, 0x0C7E	; 0x800c7e <pxOverflowDelayedTaskList+0x1>
    1486:	30 93 80 0c 	sts	0x0C80, r19	; 0x800c80 <pxDelayedTaskList+0x1>
    148a:	20 93 7f 0c 	sts	0x0C7F, r18	; 0x800c7f <pxDelayedTaskList>
    148e:	90 93 7e 0c 	sts	0x0C7E, r25	; 0x800c7e <pxOverflowDelayedTaskList+0x1>
    1492:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <pxOverflowDelayedTaskList>
    1496:	80 91 4e 0c 	lds	r24, 0x0C4E	; 0x800c4e <xNumOfOverflows>
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <xNumOfOverflows>
    14a0:	2b dd       	rcall	.-1450   	; 0xef8 <prvResetNextTaskUnblockTime>
    14a2:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <xNextTaskUnblockTime>
    14a6:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <xNextTaskUnblockTime+0x1>
    14aa:	a0 91 4b 0c 	lds	r26, 0x0C4B	; 0x800c4b <xNextTaskUnblockTime+0x2>
    14ae:	b0 91 4c 0c 	lds	r27, 0x0C4C	; 0x800c4c <xNextTaskUnblockTime+0x3>
    14b2:	c8 16       	cp	r12, r24
    14b4:	d9 06       	cpc	r13, r25
    14b6:	ea 06       	cpc	r14, r26
    14b8:	fb 06       	cpc	r15, r27
    14ba:	20 f4       	brcc	.+8      	; 0x14c4 <xTaskIncrementTick+0x96>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	b2 c0       	rjmp	.+356    	; 0x1624 <xTaskIncrementTick+0x1f6>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <xTaskIncrementTick+0x98>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	e0 91 7f 0c 	lds	r30, 0x0C7F	; 0x800c7f <pxDelayedTaskList>
    14ca:	f0 91 80 0c 	lds	r31, 0x0C80	; 0x800c80 <pxDelayedTaskList+0x1>
    14ce:	90 81       	ld	r25, Z
    14d0:	91 11       	cpse	r25, r1
    14d2:	0c c0       	rjmp	.+24     	; 0x14ec <xTaskIncrementTick+0xbe>
    14d4:	4f ef       	ldi	r20, 0xFF	; 255
    14d6:	5f ef       	ldi	r21, 0xFF	; 255
    14d8:	ba 01       	movw	r22, r20
    14da:	40 93 49 0c 	sts	0x0C49, r20	; 0x800c49 <xNextTaskUnblockTime>
    14de:	50 93 4a 0c 	sts	0x0C4A, r21	; 0x800c4a <xNextTaskUnblockTime+0x1>
    14e2:	60 93 4b 0c 	sts	0x0C4B, r22	; 0x800c4b <xNextTaskUnblockTime+0x2>
    14e6:	70 93 4c 0c 	sts	0x0C4C, r23	; 0x800c4c <xNextTaskUnblockTime+0x3>
    14ea:	9c c0       	rjmp	.+312    	; 0x1624 <xTaskIncrementTick+0x1f6>
    14ec:	e0 91 7f 0c 	lds	r30, 0x0C7F	; 0x800c7f <pxDelayedTaskList>
    14f0:	f0 91 80 0c 	lds	r31, 0x0C80	; 0x800c80 <pxDelayedTaskList+0x1>
    14f4:	07 80       	ldd	r0, Z+7	; 0x07
    14f6:	f0 85       	ldd	r31, Z+8	; 0x08
    14f8:	e0 2d       	mov	r30, r0
    14fa:	00 84       	ldd	r0, Z+8	; 0x08
    14fc:	f1 85       	ldd	r31, Z+9	; 0x09
    14fe:	e0 2d       	mov	r30, r0
    1500:	42 81       	ldd	r20, Z+2	; 0x02
    1502:	53 81       	ldd	r21, Z+3	; 0x03
    1504:	64 81       	ldd	r22, Z+4	; 0x04
    1506:	75 81       	ldd	r23, Z+5	; 0x05
    1508:	c4 16       	cp	r12, r20
    150a:	d5 06       	cpc	r13, r21
    150c:	e6 06       	cpc	r14, r22
    150e:	f7 06       	cpc	r15, r23
    1510:	48 f4       	brcc	.+18     	; 0x1524 <xTaskIncrementTick+0xf6>
    1512:	40 93 49 0c 	sts	0x0C49, r20	; 0x800c49 <xNextTaskUnblockTime>
    1516:	50 93 4a 0c 	sts	0x0C4A, r21	; 0x800c4a <xNextTaskUnblockTime+0x1>
    151a:	60 93 4b 0c 	sts	0x0C4B, r22	; 0x800c4b <xNextTaskUnblockTime+0x2>
    151e:	70 93 4c 0c 	sts	0x0C4C, r23	; 0x800c4c <xNextTaskUnblockTime+0x3>
    1522:	80 c0       	rjmp	.+256    	; 0x1624 <xTaskIncrementTick+0x1f6>
    1524:	a4 85       	ldd	r26, Z+12	; 0x0c
    1526:	b5 85       	ldd	r27, Z+13	; 0x0d
    1528:	c6 81       	ldd	r28, Z+6	; 0x06
    152a:	d7 81       	ldd	r29, Z+7	; 0x07
    152c:	20 85       	ldd	r18, Z+8	; 0x08
    152e:	31 85       	ldd	r19, Z+9	; 0x09
    1530:	3f 83       	std	Y+7, r19	; 0x07
    1532:	2e 83       	std	Y+6, r18	; 0x06
    1534:	c0 85       	ldd	r28, Z+8	; 0x08
    1536:	d1 85       	ldd	r29, Z+9	; 0x09
    1538:	26 81       	ldd	r18, Z+6	; 0x06
    153a:	37 81       	ldd	r19, Z+7	; 0x07
    153c:	3d 83       	std	Y+5, r19	; 0x05
    153e:	2c 83       	std	Y+4, r18	; 0x04
    1540:	11 96       	adiw	r26, 0x01	; 1
    1542:	4d 91       	ld	r20, X+
    1544:	5c 91       	ld	r21, X
    1546:	12 97       	sbiw	r26, 0x02	; 2
    1548:	9f 01       	movw	r18, r30
    154a:	2e 5f       	subi	r18, 0xFE	; 254
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
    154e:	42 17       	cp	r20, r18
    1550:	53 07       	cpc	r21, r19
    1552:	31 f4       	brne	.+12     	; 0x1560 <xTaskIncrementTick+0x132>
    1554:	40 85       	ldd	r20, Z+8	; 0x08
    1556:	51 85       	ldd	r21, Z+9	; 0x09
    1558:	12 96       	adiw	r26, 0x02	; 2
    155a:	5c 93       	st	X, r21
    155c:	4e 93       	st	-X, r20
    155e:	11 97       	sbiw	r26, 0x01	; 1
    1560:	15 86       	std	Z+13, r1	; 0x0d
    1562:	14 86       	std	Z+12, r1	; 0x0c
    1564:	9c 91       	ld	r25, X
    1566:	91 50       	subi	r25, 0x01	; 1
    1568:	9c 93       	st	X, r25
    156a:	a0 8d       	ldd	r26, Z+24	; 0x18
    156c:	b1 8d       	ldd	r27, Z+25	; 0x19
    156e:	10 97       	sbiw	r26, 0x00	; 0
    1570:	09 f1       	breq	.+66     	; 0x15b4 <xTaskIncrementTick+0x186>
    1572:	c2 89       	ldd	r28, Z+18	; 0x12
    1574:	d3 89       	ldd	r29, Z+19	; 0x13
    1576:	44 89       	ldd	r20, Z+20	; 0x14
    1578:	55 89       	ldd	r21, Z+21	; 0x15
    157a:	5f 83       	std	Y+7, r21	; 0x07
    157c:	4e 83       	std	Y+6, r20	; 0x06
    157e:	c4 89       	ldd	r28, Z+20	; 0x14
    1580:	d5 89       	ldd	r29, Z+21	; 0x15
    1582:	42 89       	ldd	r20, Z+18	; 0x12
    1584:	53 89       	ldd	r21, Z+19	; 0x13
    1586:	5d 83       	std	Y+5, r21	; 0x05
    1588:	4c 83       	std	Y+4, r20	; 0x04
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	6d 91       	ld	r22, X+
    158e:	7c 91       	ld	r23, X
    1590:	12 97       	sbiw	r26, 0x02	; 2
    1592:	af 01       	movw	r20, r30
    1594:	42 5f       	subi	r20, 0xF2	; 242
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	64 17       	cp	r22, r20
    159a:	75 07       	cpc	r23, r21
    159c:	31 f4       	brne	.+12     	; 0x15aa <xTaskIncrementTick+0x17c>
    159e:	44 89       	ldd	r20, Z+20	; 0x14
    15a0:	55 89       	ldd	r21, Z+21	; 0x15
    15a2:	12 96       	adiw	r26, 0x02	; 2
    15a4:	5c 93       	st	X, r21
    15a6:	4e 93       	st	-X, r20
    15a8:	11 97       	sbiw	r26, 0x01	; 1
    15aa:	11 8e       	std	Z+25, r1	; 0x19
    15ac:	10 8e       	std	Z+24, r1	; 0x18
    15ae:	9c 91       	ld	r25, X
    15b0:	91 50       	subi	r25, 0x01	; 1
    15b2:	9c 93       	st	X, r25
    15b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15b6:	90 91 55 0c 	lds	r25, 0x0C55	; 0x800c55 <uxTopReadyPriority>
    15ba:	9a 17       	cp	r25, r26
    15bc:	10 f4       	brcc	.+4      	; 0x15c2 <xTaskIncrementTick+0x194>
    15be:	a0 93 55 0c 	sts	0x0C55, r26	; 0x800c55 <uxTopReadyPriority>
    15c2:	9b e0       	ldi	r25, 0x0B	; 11
    15c4:	9a 9f       	mul	r25, r26
    15c6:	d0 01       	movw	r26, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	a9 56       	subi	r26, 0x69	; 105
    15cc:	b3 4f       	sbci	r27, 0xF3	; 243
    15ce:	11 96       	adiw	r26, 0x01	; 1
    15d0:	0d 90       	ld	r0, X+
    15d2:	bc 91       	ld	r27, X
    15d4:	a0 2d       	mov	r26, r0
    15d6:	b7 83       	std	Z+7, r27	; 0x07
    15d8:	a6 83       	std	Z+6, r26	; 0x06
    15da:	16 96       	adiw	r26, 0x06	; 6
    15dc:	4d 91       	ld	r20, X+
    15de:	5c 91       	ld	r21, X
    15e0:	17 97       	sbiw	r26, 0x07	; 7
    15e2:	51 87       	std	Z+9, r21	; 0x09
    15e4:	40 87       	std	Z+8, r20	; 0x08
    15e6:	16 96       	adiw	r26, 0x06	; 6
    15e8:	cd 91       	ld	r28, X+
    15ea:	dc 91       	ld	r29, X
    15ec:	17 97       	sbiw	r26, 0x07	; 7
    15ee:	3d 83       	std	Y+5, r19	; 0x05
    15f0:	2c 83       	std	Y+4, r18	; 0x04
    15f2:	17 96       	adiw	r26, 0x07	; 7
    15f4:	3c 93       	st	X, r19
    15f6:	2e 93       	st	-X, r18
    15f8:	16 97       	sbiw	r26, 0x06	; 6
    15fa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15fc:	9a 9f       	mul	r25, r26
    15fe:	d0 01       	movw	r26, r0
    1600:	11 24       	eor	r1, r1
    1602:	a9 56       	subi	r26, 0x69	; 105
    1604:	b3 4f       	sbci	r27, 0xF3	; 243
    1606:	b5 87       	std	Z+13, r27	; 0x0d
    1608:	a4 87       	std	Z+12, r26	; 0x0c
    160a:	9c 91       	ld	r25, X
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	9c 93       	st	X, r25
    1610:	22 8d       	ldd	r18, Z+26	; 0x1a
    1612:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1616:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    161a:	92 8d       	ldd	r25, Z+26	; 0x1a
    161c:	29 17       	cp	r18, r25
    161e:	08 f0       	brcs	.+2      	; 0x1622 <xTaskIncrementTick+0x1f4>
    1620:	4f cf       	rjmp	.-354    	; 0x14c0 <xTaskIncrementTick+0x92>
    1622:	51 cf       	rjmp	.-350    	; 0x14c6 <xTaskIncrementTick+0x98>
    1624:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1628:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    162c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    162e:	9b e0       	ldi	r25, 0x0B	; 11
    1630:	e9 9f       	mul	r30, r25
    1632:	f0 01       	movw	r30, r0
    1634:	11 24       	eor	r1, r1
    1636:	e9 56       	subi	r30, 0x69	; 105
    1638:	f3 4f       	sbci	r31, 0xF3	; 243
    163a:	90 81       	ld	r25, Z
    163c:	92 30       	cpi	r25, 0x02	; 2
    163e:	08 f0       	brcs	.+2      	; 0x1642 <xTaskIncrementTick+0x214>
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 91 4f 0c 	lds	r25, 0x0C4F	; 0x800c4f <xYieldPending>
    1646:	91 11       	cpse	r25, r1
    1648:	16 c0       	rjmp	.+44     	; 0x1676 <xTaskIncrementTick+0x248>
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <xTaskIncrementTick+0x24a>
    164c:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <xPendedTicks>
    1650:	90 91 51 0c 	lds	r25, 0x0C51	; 0x800c51 <xPendedTicks+0x1>
    1654:	a0 91 52 0c 	lds	r26, 0x0C52	; 0x800c52 <xPendedTicks+0x2>
    1658:	b0 91 53 0c 	lds	r27, 0x0C53	; 0x800c53 <xPendedTicks+0x3>
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	a1 1d       	adc	r26, r1
    1660:	b1 1d       	adc	r27, r1
    1662:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <xPendedTicks>
    1666:	90 93 51 0c 	sts	0x0C51, r25	; 0x800c51 <xPendedTicks+0x1>
    166a:	a0 93 52 0c 	sts	0x0C52, r26	; 0x800c52 <xPendedTicks+0x2>
    166e:	b0 93 53 0c 	sts	0x0C53, r27	; 0x800c53 <xPendedTicks+0x3>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <xTaskIncrementTick+0x24a>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	08 95       	ret

00001686 <xTaskResumeAll>:
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	0f 92       	push	r0
    1698:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxSchedulerSuspended>
    169c:	81 50       	subi	r24, 0x01	; 1
    169e:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <uxSchedulerSuspended>
    16a2:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxSchedulerSuspended>
    16a6:	81 11       	cpse	r24, r1
    16a8:	be c0       	rjmp	.+380    	; 0x1826 <xTaskResumeAll+0x1a0>
    16aa:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <uxCurrentNumberOfTasks>
    16ae:	81 11       	cpse	r24, r1
    16b0:	88 c0       	rjmp	.+272    	; 0x17c2 <xTaskResumeAll+0x13c>
    16b2:	bc c0       	rjmp	.+376    	; 0x182c <xTaskResumeAll+0x1a6>
    16b4:	e0 91 79 0c 	lds	r30, 0x0C79	; 0x800c79 <xPendingReadyList+0x7>
    16b8:	f0 91 7a 0c 	lds	r31, 0x0C7A	; 0x800c7a <xPendingReadyList+0x8>
    16bc:	00 84       	ldd	r0, Z+8	; 0x08
    16be:	f1 85       	ldd	r31, Z+9	; 0x09
    16c0:	e0 2d       	mov	r30, r0
    16c2:	a0 8d       	ldd	r26, Z+24	; 0x18
    16c4:	b1 8d       	ldd	r27, Z+25	; 0x19
    16c6:	c2 89       	ldd	r28, Z+18	; 0x12
    16c8:	d3 89       	ldd	r29, Z+19	; 0x13
    16ca:	84 89       	ldd	r24, Z+20	; 0x14
    16cc:	95 89       	ldd	r25, Z+21	; 0x15
    16ce:	9f 83       	std	Y+7, r25	; 0x07
    16d0:	8e 83       	std	Y+6, r24	; 0x06
    16d2:	c4 89       	ldd	r28, Z+20	; 0x14
    16d4:	d5 89       	ldd	r29, Z+21	; 0x15
    16d6:	82 89       	ldd	r24, Z+18	; 0x12
    16d8:	93 89       	ldd	r25, Z+19	; 0x13
    16da:	9d 83       	std	Y+5, r25	; 0x05
    16dc:	8c 83       	std	Y+4, r24	; 0x04
    16de:	11 96       	adiw	r26, 0x01	; 1
    16e0:	2d 91       	ld	r18, X+
    16e2:	3c 91       	ld	r19, X
    16e4:	12 97       	sbiw	r26, 0x02	; 2
    16e6:	cf 01       	movw	r24, r30
    16e8:	0e 96       	adiw	r24, 0x0e	; 14
    16ea:	28 17       	cp	r18, r24
    16ec:	39 07       	cpc	r19, r25
    16ee:	31 f4       	brne	.+12     	; 0x16fc <xTaskResumeAll+0x76>
    16f0:	84 89       	ldd	r24, Z+20	; 0x14
    16f2:	95 89       	ldd	r25, Z+21	; 0x15
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	9c 93       	st	X, r25
    16f8:	8e 93       	st	-X, r24
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	11 8e       	std	Z+25, r1	; 0x19
    16fe:	10 8e       	std	Z+24, r1	; 0x18
    1700:	8c 91       	ld	r24, X
    1702:	81 50       	subi	r24, 0x01	; 1
    1704:	8c 93       	st	X, r24
    1706:	a4 85       	ldd	r26, Z+12	; 0x0c
    1708:	b5 85       	ldd	r27, Z+13	; 0x0d
    170a:	c6 81       	ldd	r28, Z+6	; 0x06
    170c:	d7 81       	ldd	r29, Z+7	; 0x07
    170e:	80 85       	ldd	r24, Z+8	; 0x08
    1710:	91 85       	ldd	r25, Z+9	; 0x09
    1712:	9f 83       	std	Y+7, r25	; 0x07
    1714:	8e 83       	std	Y+6, r24	; 0x06
    1716:	c0 85       	ldd	r28, Z+8	; 0x08
    1718:	d1 85       	ldd	r29, Z+9	; 0x09
    171a:	86 81       	ldd	r24, Z+6	; 0x06
    171c:	97 81       	ldd	r25, Z+7	; 0x07
    171e:	9d 83       	std	Y+5, r25	; 0x05
    1720:	8c 83       	std	Y+4, r24	; 0x04
    1722:	11 96       	adiw	r26, 0x01	; 1
    1724:	8d 91       	ld	r24, X+
    1726:	9c 91       	ld	r25, X
    1728:	12 97       	sbiw	r26, 0x02	; 2
    172a:	9f 01       	movw	r18, r30
    172c:	2e 5f       	subi	r18, 0xFE	; 254
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	82 17       	cp	r24, r18
    1732:	93 07       	cpc	r25, r19
    1734:	31 f4       	brne	.+12     	; 0x1742 <xTaskResumeAll+0xbc>
    1736:	80 85       	ldd	r24, Z+8	; 0x08
    1738:	91 85       	ldd	r25, Z+9	; 0x09
    173a:	12 96       	adiw	r26, 0x02	; 2
    173c:	9c 93       	st	X, r25
    173e:	8e 93       	st	-X, r24
    1740:	11 97       	sbiw	r26, 0x01	; 1
    1742:	15 86       	std	Z+13, r1	; 0x0d
    1744:	14 86       	std	Z+12, r1	; 0x0c
    1746:	8c 91       	ld	r24, X
    1748:	81 50       	subi	r24, 0x01	; 1
    174a:	8c 93       	st	X, r24
    174c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    174e:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <uxTopReadyPriority>
    1752:	8a 17       	cp	r24, r26
    1754:	10 f4       	brcc	.+4      	; 0x175a <xTaskResumeAll+0xd4>
    1756:	a0 93 55 0c 	sts	0x0C55, r26	; 0x800c55 <uxTopReadyPriority>
    175a:	8b e0       	ldi	r24, 0x0B	; 11
    175c:	8a 9f       	mul	r24, r26
    175e:	d0 01       	movw	r26, r0
    1760:	11 24       	eor	r1, r1
    1762:	a9 56       	subi	r26, 0x69	; 105
    1764:	b3 4f       	sbci	r27, 0xF3	; 243
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	0d 90       	ld	r0, X+
    176a:	bc 91       	ld	r27, X
    176c:	a0 2d       	mov	r26, r0
    176e:	b7 83       	std	Z+7, r27	; 0x07
    1770:	a6 83       	std	Z+6, r26	; 0x06
    1772:	16 96       	adiw	r26, 0x06	; 6
    1774:	4d 91       	ld	r20, X+
    1776:	5c 91       	ld	r21, X
    1778:	17 97       	sbiw	r26, 0x07	; 7
    177a:	51 87       	std	Z+9, r21	; 0x09
    177c:	40 87       	std	Z+8, r20	; 0x08
    177e:	16 96       	adiw	r26, 0x06	; 6
    1780:	cd 91       	ld	r28, X+
    1782:	dc 91       	ld	r29, X
    1784:	17 97       	sbiw	r26, 0x07	; 7
    1786:	3d 83       	std	Y+5, r19	; 0x05
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	17 96       	adiw	r26, 0x07	; 7
    178c:	3c 93       	st	X, r19
    178e:	2e 93       	st	-X, r18
    1790:	16 97       	sbiw	r26, 0x06	; 6
    1792:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1794:	8a 9f       	mul	r24, r26
    1796:	d0 01       	movw	r26, r0
    1798:	11 24       	eor	r1, r1
    179a:	a9 56       	subi	r26, 0x69	; 105
    179c:	b3 4f       	sbci	r27, 0xF3	; 243
    179e:	b5 87       	std	Z+13, r27	; 0x0d
    17a0:	a4 87       	std	Z+12, r26	; 0x0c
    17a2:	8c 91       	ld	r24, X
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	8c 93       	st	X, r24
    17a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    17aa:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
    17ae:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    17b2:	5a 96       	adiw	r26, 0x1a	; 26
    17b4:	8c 91       	ld	r24, X
    17b6:	98 17       	cp	r25, r24
    17b8:	30 f0       	brcs	.+12     	; 0x17c6 <xTaskResumeAll+0x140>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xYieldPending>
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <xTaskResumeAll+0x140>
    17c2:	e0 e0       	ldi	r30, 0x00	; 0
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <xPendingReadyList>
    17ca:	81 11       	cpse	r24, r1
    17cc:	73 cf       	rjmp	.-282    	; 0x16b4 <xTaskResumeAll+0x2e>
    17ce:	ef 2b       	or	r30, r31
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <xTaskResumeAll+0x14e>
    17d2:	92 db       	rcall	.-2268   	; 0xef8 <prvResetNextTaskUnblockTime>
    17d4:	c0 90 50 0c 	lds	r12, 0x0C50	; 0x800c50 <xPendedTicks>
    17d8:	d0 90 51 0c 	lds	r13, 0x0C51	; 0x800c51 <xPendedTicks+0x1>
    17dc:	e0 90 52 0c 	lds	r14, 0x0C52	; 0x800c52 <xPendedTicks+0x2>
    17e0:	f0 90 53 0c 	lds	r15, 0x0C53	; 0x800c53 <xPendedTicks+0x3>
    17e4:	c1 14       	cp	r12, r1
    17e6:	d1 04       	cpc	r13, r1
    17e8:	e1 04       	cpc	r14, r1
    17ea:	f1 04       	cpc	r15, r1
    17ec:	a1 f0       	breq	.+40     	; 0x1816 <xTaskResumeAll+0x190>
    17ee:	1f de       	rcall	.-962    	; 0x142e <xTaskIncrementTick>
    17f0:	88 23       	and	r24, r24
    17f2:	19 f0       	breq	.+6      	; 0x17fa <xTaskResumeAll+0x174>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xYieldPending>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	c8 1a       	sub	r12, r24
    17fe:	d1 08       	sbc	r13, r1
    1800:	e1 08       	sbc	r14, r1
    1802:	f1 08       	sbc	r15, r1
    1804:	a1 f7       	brne	.-24     	; 0x17ee <xTaskResumeAll+0x168>
    1806:	10 92 50 0c 	sts	0x0C50, r1	; 0x800c50 <xPendedTicks>
    180a:	10 92 51 0c 	sts	0x0C51, r1	; 0x800c51 <xPendedTicks+0x1>
    180e:	10 92 52 0c 	sts	0x0C52, r1	; 0x800c52 <xPendedTicks+0x2>
    1812:	10 92 53 0c 	sts	0x0C53, r1	; 0x800c53 <xPendedTicks+0x3>
    1816:	80 91 4f 0c 	lds	r24, 0x0C4F	; 0x800c4f <xYieldPending>
    181a:	88 23       	and	r24, r24
    181c:	31 f0       	breq	.+12     	; 0x182a <xTaskResumeAll+0x1a4>
    181e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vPortYield>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <xTaskResumeAll+0x1a6>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	01 c0       	rjmp	.+2      	; 0x182c <xTaskResumeAll+0x1a6>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	08 95       	ret

0000183e <xTaskDelayUntil>:
    183e:	8f 92       	push	r8
    1840:	9f 92       	push	r9
    1842:	af 92       	push	r10
    1844:	bf 92       	push	r11
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
    1856:	6a 01       	movw	r12, r20
    1858:	7b 01       	movw	r14, r22
    185a:	d5 dd       	rcall	.-1110   	; 0x1406 <vTaskSuspendAll>
    185c:	80 90 56 0c 	lds	r8, 0x0C56	; 0x800c56 <xTickCount>
    1860:	90 90 57 0c 	lds	r9, 0x0C57	; 0x800c57 <xTickCount+0x1>
    1864:	a0 90 58 0c 	lds	r10, 0x0C58	; 0x800c58 <xTickCount+0x2>
    1868:	b0 90 59 0c 	lds	r11, 0x0C59	; 0x800c59 <xTickCount+0x3>
    186c:	88 81       	ld	r24, Y
    186e:	99 81       	ldd	r25, Y+1	; 0x01
    1870:	aa 81       	ldd	r26, Y+2	; 0x02
    1872:	bb 81       	ldd	r27, Y+3	; 0x03
    1874:	ac 01       	movw	r20, r24
    1876:	bd 01       	movw	r22, r26
    1878:	4c 0d       	add	r20, r12
    187a:	5d 1d       	adc	r21, r13
    187c:	6e 1d       	adc	r22, r14
    187e:	7f 1d       	adc	r23, r15
    1880:	88 16       	cp	r8, r24
    1882:	99 06       	cpc	r9, r25
    1884:	aa 06       	cpc	r10, r26
    1886:	bb 06       	cpc	r11, r27
    1888:	60 f4       	brcc	.+24     	; 0x18a2 <xTaskDelayUntil+0x64>
    188a:	48 17       	cp	r20, r24
    188c:	59 07       	cpc	r21, r25
    188e:	6a 07       	cpc	r22, r26
    1890:	7b 07       	cpc	r23, r27
    1892:	98 f4       	brcc	.+38     	; 0x18ba <xTaskDelayUntil+0x7c>
    1894:	84 16       	cp	r8, r20
    1896:	95 06       	cpc	r9, r21
    1898:	a6 06       	cpc	r10, r22
    189a:	b7 06       	cpc	r11, r23
    189c:	80 f0       	brcs	.+32     	; 0x18be <xTaskDelayUntil+0x80>
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	13 c0       	rjmp	.+38     	; 0x18c8 <xTaskDelayUntil+0x8a>
    18a2:	48 17       	cp	r20, r24
    18a4:	59 07       	cpc	r21, r25
    18a6:	6a 07       	cpc	r22, r26
    18a8:	7b 07       	cpc	r23, r27
    18aa:	58 f0       	brcs	.+22     	; 0x18c2 <xTaskDelayUntil+0x84>
    18ac:	84 16       	cp	r8, r20
    18ae:	95 06       	cpc	r9, r21
    18b0:	a6 06       	cpc	r10, r22
    18b2:	b7 06       	cpc	r11, r23
    18b4:	40 f0       	brcs	.+16     	; 0x18c6 <xTaskDelayUntil+0x88>
    18b6:	10 e0       	ldi	r17, 0x00	; 0
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <xTaskDelayUntil+0x8a>
    18ba:	10 e0       	ldi	r17, 0x00	; 0
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <xTaskDelayUntil+0x8a>
    18be:	11 e0       	ldi	r17, 0x01	; 1
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <xTaskDelayUntil+0x8a>
    18c2:	11 e0       	ldi	r17, 0x01	; 1
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <xTaskDelayUntil+0x8a>
    18c6:	11 e0       	ldi	r17, 0x01	; 1
    18c8:	48 83       	st	Y, r20
    18ca:	59 83       	std	Y+1, r21	; 0x01
    18cc:	6a 83       	std	Y+2, r22	; 0x02
    18ce:	7b 83       	std	Y+3, r23	; 0x03
    18d0:	11 23       	and	r17, r17
    18d2:	41 f0       	breq	.+16     	; 0x18e4 <xTaskDelayUntil+0xa6>
    18d4:	cb 01       	movw	r24, r22
    18d6:	ba 01       	movw	r22, r20
    18d8:	68 19       	sub	r22, r8
    18da:	79 09       	sbc	r23, r9
    18dc:	8a 09       	sbc	r24, r10
    18de:	9b 09       	sbc	r25, r11
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	73 dc       	rcall	.-1818   	; 0x11ca <prvAddCurrentTaskToDelayedList>
    18e4:	d0 de       	rcall	.-608    	; 0x1686 <xTaskResumeAll>
    18e6:	81 11       	cpse	r24, r1
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <xTaskDelayUntil+0xb0>
    18ea:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vPortYield>
    18ee:	81 2f       	mov	r24, r17
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	bf 90       	pop	r11
    1900:	af 90       	pop	r10
    1902:	9f 90       	pop	r9
    1904:	8f 90       	pop	r8
    1906:	08 95       	ret

00001908 <vTaskDelay>:
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	6b 01       	movw	r12, r22
    1912:	7c 01       	movw	r14, r24
    1914:	67 2b       	or	r22, r23
    1916:	68 2b       	or	r22, r24
    1918:	69 2b       	or	r22, r25
    191a:	39 f0       	breq	.+14     	; 0x192a <vTaskDelay+0x22>
    191c:	74 dd       	rcall	.-1304   	; 0x1406 <vTaskSuspendAll>
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	c7 01       	movw	r24, r14
    1922:	b6 01       	movw	r22, r12
    1924:	52 dc       	rcall	.-1884   	; 0x11ca <prvAddCurrentTaskToDelayedList>
    1926:	af de       	rcall	.-674    	; 0x1686 <xTaskResumeAll>
    1928:	01 c0       	rjmp	.+2      	; 0x192c <vTaskDelay+0x24>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	81 11       	cpse	r24, r1
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vTaskDelay+0x2c>
    1930:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vPortYield>
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	08 95       	ret

0000193e <vTaskSwitchContext>:
    193e:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxSchedulerSuspended>
    1942:	88 23       	and	r24, r24
    1944:	21 f0       	breq	.+8      	; 0x194e <vTaskSwitchContext+0x10>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xYieldPending>
    194c:	08 95       	ret
    194e:	10 92 4f 0c 	sts	0x0C4F, r1	; 0x800c4f <xYieldPending>
    1952:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1956:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    195a:	20 81       	ld	r18, Z
    195c:	31 81       	ldd	r19, Z+1	; 0x01
    195e:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1962:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1966:	83 8d       	ldd	r24, Z+27	; 0x1b
    1968:	94 8d       	ldd	r25, Z+28	; 0x1c
    196a:	82 17       	cp	r24, r18
    196c:	93 07       	cpc	r25, r19
    196e:	58 f0       	brcs	.+22     	; 0x1986 <vTaskSwitchContext+0x48>
    1970:	60 91 05 0d 	lds	r22, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1974:	70 91 06 0d 	lds	r23, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1978:	63 5e       	subi	r22, 0xE3	; 227
    197a:	7f 4f       	sbci	r23, 0xFF	; 255
    197c:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1980:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1984:	3e d5       	rcall	.+2684   	; 0x2402 <vApplicationStackOverflowHook>
    1986:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <uxTopReadyPriority>
    198a:	01 c0       	rjmp	.+2      	; 0x198e <vTaskSwitchContext+0x50>
    198c:	81 50       	subi	r24, 0x01	; 1
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	9b e0       	ldi	r25, 0x0B	; 11
    1994:	92 9f       	mul	r25, r18
    1996:	f0 01       	movw	r30, r0
    1998:	93 9f       	mul	r25, r19
    199a:	f0 0d       	add	r31, r0
    199c:	11 24       	eor	r1, r1
    199e:	e9 56       	subi	r30, 0x69	; 105
    19a0:	f3 4f       	sbci	r31, 0xF3	; 243
    19a2:	90 81       	ld	r25, Z
    19a4:	99 23       	and	r25, r25
    19a6:	91 f3       	breq	.-28     	; 0x198c <vTaskSwitchContext+0x4e>
    19a8:	9b e0       	ldi	r25, 0x0B	; 11
    19aa:	92 9f       	mul	r25, r18
    19ac:	a0 01       	movw	r20, r0
    19ae:	93 9f       	mul	r25, r19
    19b0:	50 0d       	add	r21, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	df 01       	movw	r26, r30
    19b6:	01 80       	ldd	r0, Z+1	; 0x01
    19b8:	f2 81       	ldd	r31, Z+2	; 0x02
    19ba:	e0 2d       	mov	r30, r0
    19bc:	04 80       	ldd	r0, Z+4	; 0x04
    19be:	f5 81       	ldd	r31, Z+5	; 0x05
    19c0:	e0 2d       	mov	r30, r0
    19c2:	12 96       	adiw	r26, 0x02	; 2
    19c4:	fc 93       	st	X, r31
    19c6:	ee 93       	st	-X, r30
    19c8:	11 97       	sbiw	r26, 0x01	; 1
    19ca:	46 56       	subi	r20, 0x66	; 102
    19cc:	53 4f       	sbci	r21, 0xF3	; 243
    19ce:	e4 17       	cp	r30, r20
    19d0:	f5 07       	cpc	r31, r21
    19d2:	29 f4       	brne	.+10     	; 0x19de <vTaskSwitchContext+0xa0>
    19d4:	44 81       	ldd	r20, Z+4	; 0x04
    19d6:	55 81       	ldd	r21, Z+5	; 0x05
    19d8:	fd 01       	movw	r30, r26
    19da:	52 83       	std	Z+2, r21	; 0x02
    19dc:	41 83       	std	Z+1, r20	; 0x01
    19de:	9b e0       	ldi	r25, 0x0B	; 11
    19e0:	92 9f       	mul	r25, r18
    19e2:	f0 01       	movw	r30, r0
    19e4:	93 9f       	mul	r25, r19
    19e6:	f0 0d       	add	r31, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	e9 56       	subi	r30, 0x69	; 105
    19ec:	f3 4f       	sbci	r31, 0xF3	; 243
    19ee:	01 80       	ldd	r0, Z+1	; 0x01
    19f0:	f2 81       	ldd	r31, Z+2	; 0x02
    19f2:	e0 2d       	mov	r30, r0
    19f4:	20 85       	ldd	r18, Z+8	; 0x08
    19f6:	31 85       	ldd	r19, Z+9	; 0x09
    19f8:	30 93 06 0d 	sts	0x0D06, r19	; 0x800d06 <pxCurrentTCB+0x1>
    19fc:	20 93 05 0d 	sts	0x0D05, r18	; 0x800d05 <pxCurrentTCB>
    1a00:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <uxTopReadyPriority>
    1a04:	08 95       	ret

00001a06 <vTaskPlaceOnEventList>:
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	6a 01       	movw	r12, r20
    1a10:	7b 01       	movw	r14, r22
    1a12:	60 91 05 0d 	lds	r22, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1a16:	70 91 06 0d 	lds	r23, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1a1a:	62 5f       	subi	r22, 0xF2	; 242
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	0e 94 35 03 	call	0x66a	; 0x66a <vListInsert>
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	c7 01       	movw	r24, r14
    1a26:	b6 01       	movw	r22, r12
    1a28:	d0 db       	rcall	.-2144   	; 0x11ca <prvAddCurrentTaskToDelayedList>
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	08 95       	ret

00001a34 <vTaskPlaceOnEventListRestricted>:
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	fc 01       	movw	r30, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	ba 01       	movw	r22, r20
    1a3e:	a1 81       	ldd	r26, Z+1	; 0x01
    1a40:	b2 81       	ldd	r27, Z+2	; 0x02
    1a42:	c0 91 05 0d 	lds	r28, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1a46:	d0 91 06 0d 	lds	r29, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1a4a:	bb 8b       	std	Y+19, r27	; 0x13
    1a4c:	aa 8b       	std	Y+18, r26	; 0x12
    1a4e:	c0 91 05 0d 	lds	r28, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1a52:	d0 91 06 0d 	lds	r29, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1a56:	16 96       	adiw	r26, 0x06	; 6
    1a58:	4d 91       	ld	r20, X+
    1a5a:	5c 91       	ld	r21, X
    1a5c:	17 97       	sbiw	r26, 0x07	; 7
    1a5e:	5d 8b       	std	Y+21, r21	; 0x15
    1a60:	4c 8b       	std	Y+20, r20	; 0x14
    1a62:	16 96       	adiw	r26, 0x06	; 6
    1a64:	cd 91       	ld	r28, X+
    1a66:	dc 91       	ld	r29, X
    1a68:	17 97       	sbiw	r26, 0x07	; 7
    1a6a:	40 91 05 0d 	lds	r20, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1a6e:	50 91 06 0d 	lds	r21, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1a72:	42 5f       	subi	r20, 0xF2	; 242
    1a74:	5f 4f       	sbci	r21, 0xFF	; 255
    1a76:	5d 83       	std	Y+5, r21	; 0x05
    1a78:	4c 83       	std	Y+4, r20	; 0x04
    1a7a:	40 91 05 0d 	lds	r20, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1a7e:	50 91 06 0d 	lds	r21, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1a82:	42 5f       	subi	r20, 0xF2	; 242
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	17 96       	adiw	r26, 0x07	; 7
    1a88:	5c 93       	st	X, r21
    1a8a:	4e 93       	st	-X, r20
    1a8c:	16 97       	sbiw	r26, 0x06	; 6
    1a8e:	a0 91 05 0d 	lds	r26, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1a92:	b0 91 06 0d 	lds	r27, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1a96:	59 96       	adiw	r26, 0x19	; 25
    1a98:	fc 93       	st	X, r31
    1a9a:	ee 93       	st	-X, r30
    1a9c:	58 97       	sbiw	r26, 0x18	; 24
    1a9e:	30 81       	ld	r19, Z
    1aa0:	3f 5f       	subi	r19, 0xFF	; 255
    1aa2:	30 83       	st	Z, r19
    1aa4:	22 23       	and	r18, r18
    1aa6:	19 f0       	breq	.+6      	; 0x1aae <vTaskPlaceOnEventListRestricted+0x7a>
    1aa8:	6f ef       	ldi	r22, 0xFF	; 255
    1aaa:	7f ef       	ldi	r23, 0xFF	; 255
    1aac:	cb 01       	movw	r24, r22
    1aae:	42 2f       	mov	r20, r18
    1ab0:	8c db       	rcall	.-2280   	; 0x11ca <prvAddCurrentTaskToDelayedList>
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <xTaskRemoveFromEventList>:
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	dc 01       	movw	r26, r24
    1abe:	17 96       	adiw	r26, 0x07	; 7
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	18 97       	sbiw	r26, 0x08	; 8
    1ac6:	00 84       	ldd	r0, Z+8	; 0x08
    1ac8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aca:	e0 2d       	mov	r30, r0
    1acc:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ace:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ad0:	c2 89       	ldd	r28, Z+18	; 0x12
    1ad2:	d3 89       	ldd	r29, Z+19	; 0x13
    1ad4:	84 89       	ldd	r24, Z+20	; 0x14
    1ad6:	95 89       	ldd	r25, Z+21	; 0x15
    1ad8:	9f 83       	std	Y+7, r25	; 0x07
    1ada:	8e 83       	std	Y+6, r24	; 0x06
    1adc:	c4 89       	ldd	r28, Z+20	; 0x14
    1ade:	d5 89       	ldd	r29, Z+21	; 0x15
    1ae0:	82 89       	ldd	r24, Z+18	; 0x12
    1ae2:	93 89       	ldd	r25, Z+19	; 0x13
    1ae4:	9d 83       	std	Y+5, r25	; 0x05
    1ae6:	8c 83       	std	Y+4, r24	; 0x04
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	8d 91       	ld	r24, X+
    1aec:	9c 91       	ld	r25, X
    1aee:	12 97       	sbiw	r26, 0x02	; 2
    1af0:	9f 01       	movw	r18, r30
    1af2:	22 5f       	subi	r18, 0xF2	; 242
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	82 17       	cp	r24, r18
    1af8:	93 07       	cpc	r25, r19
    1afa:	31 f4       	brne	.+12     	; 0x1b08 <xTaskRemoveFromEventList+0x50>
    1afc:	84 89       	ldd	r24, Z+20	; 0x14
    1afe:	95 89       	ldd	r25, Z+21	; 0x15
    1b00:	12 96       	adiw	r26, 0x02	; 2
    1b02:	9c 93       	st	X, r25
    1b04:	8e 93       	st	-X, r24
    1b06:	11 97       	sbiw	r26, 0x01	; 1
    1b08:	11 8e       	std	Z+25, r1	; 0x19
    1b0a:	10 8e       	std	Z+24, r1	; 0x18
    1b0c:	8c 91       	ld	r24, X
    1b0e:	81 50       	subi	r24, 0x01	; 1
    1b10:	8c 93       	st	X, r24
    1b12:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxSchedulerSuspended>
    1b16:	81 11       	cpse	r24, r1
    1b18:	52 c0       	rjmp	.+164    	; 0x1bbe <xTaskRemoveFromEventList+0x106>
    1b1a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b1c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b1e:	c6 81       	ldd	r28, Z+6	; 0x06
    1b20:	d7 81       	ldd	r29, Z+7	; 0x07
    1b22:	80 85       	ldd	r24, Z+8	; 0x08
    1b24:	91 85       	ldd	r25, Z+9	; 0x09
    1b26:	9f 83       	std	Y+7, r25	; 0x07
    1b28:	8e 83       	std	Y+6, r24	; 0x06
    1b2a:	c0 85       	ldd	r28, Z+8	; 0x08
    1b2c:	d1 85       	ldd	r29, Z+9	; 0x09
    1b2e:	86 81       	ldd	r24, Z+6	; 0x06
    1b30:	97 81       	ldd	r25, Z+7	; 0x07
    1b32:	9d 83       	std	Y+5, r25	; 0x05
    1b34:	8c 83       	std	Y+4, r24	; 0x04
    1b36:	11 96       	adiw	r26, 0x01	; 1
    1b38:	8d 91       	ld	r24, X+
    1b3a:	9c 91       	ld	r25, X
    1b3c:	12 97       	sbiw	r26, 0x02	; 2
    1b3e:	9f 01       	movw	r18, r30
    1b40:	2e 5f       	subi	r18, 0xFE	; 254
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	82 17       	cp	r24, r18
    1b46:	93 07       	cpc	r25, r19
    1b48:	31 f4       	brne	.+12     	; 0x1b56 <xTaskRemoveFromEventList+0x9e>
    1b4a:	80 85       	ldd	r24, Z+8	; 0x08
    1b4c:	91 85       	ldd	r25, Z+9	; 0x09
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	9c 93       	st	X, r25
    1b52:	8e 93       	st	-X, r24
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	15 86       	std	Z+13, r1	; 0x0d
    1b58:	14 86       	std	Z+12, r1	; 0x0c
    1b5a:	8c 91       	ld	r24, X
    1b5c:	81 50       	subi	r24, 0x01	; 1
    1b5e:	8c 93       	st	X, r24
    1b60:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b62:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <uxTopReadyPriority>
    1b66:	8a 17       	cp	r24, r26
    1b68:	10 f4       	brcc	.+4      	; 0x1b6e <xTaskRemoveFromEventList+0xb6>
    1b6a:	a0 93 55 0c 	sts	0x0C55, r26	; 0x800c55 <uxTopReadyPriority>
    1b6e:	8b e0       	ldi	r24, 0x0B	; 11
    1b70:	8a 9f       	mul	r24, r26
    1b72:	d0 01       	movw	r26, r0
    1b74:	11 24       	eor	r1, r1
    1b76:	a9 56       	subi	r26, 0x69	; 105
    1b78:	b3 4f       	sbci	r27, 0xF3	; 243
    1b7a:	11 96       	adiw	r26, 0x01	; 1
    1b7c:	0d 90       	ld	r0, X+
    1b7e:	bc 91       	ld	r27, X
    1b80:	a0 2d       	mov	r26, r0
    1b82:	b7 83       	std	Z+7, r27	; 0x07
    1b84:	a6 83       	std	Z+6, r26	; 0x06
    1b86:	16 96       	adiw	r26, 0x06	; 6
    1b88:	4d 91       	ld	r20, X+
    1b8a:	5c 91       	ld	r21, X
    1b8c:	17 97       	sbiw	r26, 0x07	; 7
    1b8e:	51 87       	std	Z+9, r21	; 0x09
    1b90:	40 87       	std	Z+8, r20	; 0x08
    1b92:	16 96       	adiw	r26, 0x06	; 6
    1b94:	cd 91       	ld	r28, X+
    1b96:	dc 91       	ld	r29, X
    1b98:	17 97       	sbiw	r26, 0x07	; 7
    1b9a:	3d 83       	std	Y+5, r19	; 0x05
    1b9c:	2c 83       	std	Y+4, r18	; 0x04
    1b9e:	17 96       	adiw	r26, 0x07	; 7
    1ba0:	3c 93       	st	X, r19
    1ba2:	2e 93       	st	-X, r18
    1ba4:	16 97       	sbiw	r26, 0x06	; 6
    1ba6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ba8:	8a 9f       	mul	r24, r26
    1baa:	d0 01       	movw	r26, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	a9 56       	subi	r26, 0x69	; 105
    1bb0:	b3 4f       	sbci	r27, 0xF3	; 243
    1bb2:	b5 87       	std	Z+13, r27	; 0x0d
    1bb4:	a4 87       	std	Z+12, r26	; 0x0c
    1bb6:	8c 91       	ld	r24, X
    1bb8:	8f 5f       	subi	r24, 0xFF	; 255
    1bba:	8c 93       	st	X, r24
    1bbc:	1c c0       	rjmp	.+56     	; 0x1bf6 <xTaskRemoveFromEventList+0x13e>
    1bbe:	42 e7       	ldi	r20, 0x72	; 114
    1bc0:	5c e0       	ldi	r21, 0x0C	; 12
    1bc2:	da 01       	movw	r26, r20
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	cd 91       	ld	r28, X+
    1bc8:	dc 91       	ld	r29, X
    1bca:	12 97       	sbiw	r26, 0x02	; 2
    1bcc:	d3 8b       	std	Z+19, r29	; 0x13
    1bce:	c2 8b       	std	Z+18, r28	; 0x12
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd4:	95 8b       	std	Z+21, r25	; 0x15
    1bd6:	84 8b       	std	Z+20, r24	; 0x14
    1bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bda:	9f 81       	ldd	r25, Y+7	; 0x07
    1bdc:	dc 01       	movw	r26, r24
    1bde:	15 96       	adiw	r26, 0x05	; 5
    1be0:	3c 93       	st	X, r19
    1be2:	2e 93       	st	-X, r18
    1be4:	14 97       	sbiw	r26, 0x04	; 4
    1be6:	3f 83       	std	Y+7, r19	; 0x07
    1be8:	2e 83       	std	Y+6, r18	; 0x06
    1bea:	51 8f       	std	Z+25, r21	; 0x19
    1bec:	40 8f       	std	Z+24, r20	; 0x18
    1bee:	da 01       	movw	r26, r20
    1bf0:	8c 91       	ld	r24, X
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	8c 93       	st	X, r24
    1bf6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bf8:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <pxCurrentTCB>
    1bfc:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <pxCurrentTCB+0x1>
    1c00:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c02:	89 17       	cp	r24, r25
    1c04:	20 f4       	brcc	.+8      	; 0x1c0e <xTaskRemoveFromEventList+0x156>
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xYieldPending>
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <xTaskRemoveFromEventList+0x158>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <vTaskInternalSetTimeOutState>:
    1c16:	20 91 4e 0c 	lds	r18, 0x0C4E	; 0x800c4e <xNumOfOverflows>
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	20 83       	st	Z, r18
    1c1e:	40 91 56 0c 	lds	r20, 0x0C56	; 0x800c56 <xTickCount>
    1c22:	50 91 57 0c 	lds	r21, 0x0C57	; 0x800c57 <xTickCount+0x1>
    1c26:	60 91 58 0c 	lds	r22, 0x0C58	; 0x800c58 <xTickCount+0x2>
    1c2a:	70 91 59 0c 	lds	r23, 0x0C59	; 0x800c59 <xTickCount+0x3>
    1c2e:	41 83       	std	Z+1, r20	; 0x01
    1c30:	52 83       	std	Z+2, r21	; 0x02
    1c32:	63 83       	std	Z+3, r22	; 0x03
    1c34:	74 83       	std	Z+4, r23	; 0x04
    1c36:	08 95       	ret

00001c38 <xTaskCheckForTimeOut>:
    1c38:	8f 92       	push	r8
    1c3a:	9f 92       	push	r9
    1c3c:	af 92       	push	r10
    1c3e:	bf 92       	push	r11
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	fb 01       	movw	r30, r22
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	0f 92       	push	r0
    1c58:	c0 90 56 0c 	lds	r12, 0x0C56	; 0x800c56 <xTickCount>
    1c5c:	d0 90 57 0c 	lds	r13, 0x0C57	; 0x800c57 <xTickCount+0x1>
    1c60:	e0 90 58 0c 	lds	r14, 0x0C58	; 0x800c58 <xTickCount+0x2>
    1c64:	f0 90 59 0c 	lds	r15, 0x0C59	; 0x800c59 <xTickCount+0x3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	11 96       	adiw	r26, 0x01	; 1
    1c6c:	0d 91       	ld	r16, X+
    1c6e:	1d 91       	ld	r17, X+
    1c70:	2d 91       	ld	r18, X+
    1c72:	3c 91       	ld	r19, X
    1c74:	14 97       	sbiw	r26, 0x04	; 4
    1c76:	46 01       	movw	r8, r12
    1c78:	57 01       	movw	r10, r14
    1c7a:	80 1a       	sub	r8, r16
    1c7c:	91 0a       	sbc	r9, r17
    1c7e:	a2 0a       	sbc	r10, r18
    1c80:	b3 0a       	sbc	r11, r19
    1c82:	40 81       	ld	r20, Z
    1c84:	51 81       	ldd	r21, Z+1	; 0x01
    1c86:	62 81       	ldd	r22, Z+2	; 0x02
    1c88:	73 81       	ldd	r23, Z+3	; 0x03
    1c8a:	4f 3f       	cpi	r20, 0xFF	; 255
    1c8c:	bf ef       	ldi	r27, 0xFF	; 255
    1c8e:	5b 07       	cpc	r21, r27
    1c90:	6b 07       	cpc	r22, r27
    1c92:	7b 07       	cpc	r23, r27
    1c94:	39 f1       	breq	.+78     	; 0x1ce4 <xTaskCheckForTimeOut+0xac>
    1c96:	ec 01       	movw	r28, r24
    1c98:	b8 81       	ld	r27, Y
    1c9a:	a0 91 4e 0c 	lds	r26, 0x0C4E	; 0x800c4e <xNumOfOverflows>
    1c9e:	ba 17       	cp	r27, r26
    1ca0:	59 f0       	breq	.+22     	; 0x1cb8 <xTaskCheckForTimeOut+0x80>
    1ca2:	c0 16       	cp	r12, r16
    1ca4:	d1 06       	cpc	r13, r17
    1ca6:	e2 06       	cpc	r14, r18
    1ca8:	f3 06       	cpc	r15, r19
    1caa:	30 f0       	brcs	.+12     	; 0x1cb8 <xTaskCheckForTimeOut+0x80>
    1cac:	10 82       	st	Z, r1
    1cae:	11 82       	std	Z+1, r1	; 0x01
    1cb0:	12 82       	std	Z+2, r1	; 0x02
    1cb2:	13 82       	std	Z+3, r1	; 0x03
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	17 c0       	rjmp	.+46     	; 0x1ce6 <xTaskCheckForTimeOut+0xae>
    1cb8:	84 16       	cp	r8, r20
    1cba:	95 06       	cpc	r9, r21
    1cbc:	a6 06       	cpc	r10, r22
    1cbe:	b7 06       	cpc	r11, r23
    1cc0:	58 f4       	brcc	.+22     	; 0x1cd8 <xTaskCheckForTimeOut+0xa0>
    1cc2:	48 19       	sub	r20, r8
    1cc4:	59 09       	sbc	r21, r9
    1cc6:	6a 09       	sbc	r22, r10
    1cc8:	7b 09       	sbc	r23, r11
    1cca:	40 83       	st	Z, r20
    1ccc:	51 83       	std	Z+1, r21	; 0x01
    1cce:	62 83       	std	Z+2, r22	; 0x02
    1cd0:	73 83       	std	Z+3, r23	; 0x03
    1cd2:	a1 df       	rcall	.-190    	; 0x1c16 <vTaskInternalSetTimeOutState>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <xTaskCheckForTimeOut+0xae>
    1cd8:	10 82       	st	Z, r1
    1cda:	11 82       	std	Z+1, r1	; 0x01
    1cdc:	12 82       	std	Z+2, r1	; 0x02
    1cde:	13 82       	std	Z+3, r1	; 0x03
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <xTaskCheckForTimeOut+0xae>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	df 90       	pop	r13
    1cf8:	cf 90       	pop	r12
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	9f 90       	pop	r9
    1d00:	8f 90       	pop	r8
    1d02:	08 95       	ret

00001d04 <vTaskMissedYield>:
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <xYieldPending>
    1d0a:	08 95       	ret

00001d0c <xTaskGetSchedulerState>:
    1d0c:	80 91 54 0c 	lds	r24, 0x0C54	; 0x800c54 <xSchedulerRunning>
    1d10:	88 23       	and	r24, r24
    1d12:	31 f0       	breq	.+12     	; 0x1d20 <xTaskGetSchedulerState+0x14>
    1d14:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxSchedulerSuspended>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <xTaskGetSchedulerState+0x18>
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	08 95       	ret
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	08 95       	ret
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	08 95       	ret

00001d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1d32:	89 2b       	or	r24, r25
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <xTaskPriorityDisinherit+0x10>
    1d36:	49 c0       	rjmp	.+146    	; 0x1dca <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1d38:	86 a5       	ldd	r24, Z+46	; 0x2e
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1d3e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d40:	95 a5       	ldd	r25, Z+45	; 0x2d
    1d42:	29 17       	cp	r18, r25
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <xTaskPriorityDisinherit+0x20>
    1d46:	43 c0       	rjmp	.+134    	; 0x1dce <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1d48:	81 11       	cpse	r24, r1
    1d4a:	43 c0       	rjmp	.+134    	; 0x1dd2 <xTaskPriorityDisinherit+0xaa>
    1d4c:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1d4e:	8f 01       	movw	r16, r30
    1d50:	0e 5f       	subi	r16, 0xFE	; 254
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 72 03 	call	0x6e4	; 0x6e4 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1d5a:	ed a5       	ldd	r30, Y+45	; 0x2d
    1d5c:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d5e:	8a e0       	ldi	r24, 0x0A	; 10
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e0       	ldi	r26, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	8e 1b       	sub	r24, r30
    1d68:	91 09       	sbc	r25, r1
    1d6a:	a1 09       	sbc	r26, r1
    1d6c:	b1 09       	sbc	r27, r1
    1d6e:	8e 87       	std	Y+14, r24	; 0x0e
    1d70:	9f 87       	std	Y+15, r25	; 0x0f
    1d72:	a8 8b       	std	Y+16, r26	; 0x10
    1d74:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1d76:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <uxTopReadyPriority>
    1d7a:	8e 17       	cp	r24, r30
    1d7c:	10 f4       	brcc	.+4      	; 0x1d82 <xTaskPriorityDisinherit+0x5a>
    1d7e:	e0 93 55 0c 	sts	0x0C55, r30	; 0x800c55 <uxTopReadyPriority>
    1d82:	8b e0       	ldi	r24, 0x0B	; 11
    1d84:	8e 9f       	mul	r24, r30
    1d86:	f0 01       	movw	r30, r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	e9 56       	subi	r30, 0x69	; 105
    1d8c:	f3 4f       	sbci	r31, 0xF3	; 243
    1d8e:	01 80       	ldd	r0, Z+1	; 0x01
    1d90:	f2 81       	ldd	r31, Z+2	; 0x02
    1d92:	e0 2d       	mov	r30, r0
    1d94:	ff 83       	std	Y+7, r31	; 0x07
    1d96:	ee 83       	std	Y+6, r30	; 0x06
    1d98:	26 81       	ldd	r18, Z+6	; 0x06
    1d9a:	37 81       	ldd	r19, Z+7	; 0x07
    1d9c:	39 87       	std	Y+9, r19	; 0x09
    1d9e:	28 87       	std	Y+8, r18	; 0x08
    1da0:	a6 81       	ldd	r26, Z+6	; 0x06
    1da2:	b7 81       	ldd	r27, Z+7	; 0x07
    1da4:	15 96       	adiw	r26, 0x05	; 5
    1da6:	1c 93       	st	X, r17
    1da8:	0e 93       	st	-X, r16
    1daa:	14 97       	sbiw	r26, 0x04	; 4
    1dac:	17 83       	std	Z+7, r17	; 0x07
    1dae:	06 83       	std	Z+6, r16	; 0x06
    1db0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1db2:	8e 9f       	mul	r24, r30
    1db4:	f0 01       	movw	r30, r0
    1db6:	11 24       	eor	r1, r1
    1db8:	e9 56       	subi	r30, 0x69	; 105
    1dba:	f3 4f       	sbci	r31, 0xF3	; 243
    1dbc:	fd 87       	std	Y+13, r31	; 0x0d
    1dbe:	ec 87       	std	Y+12, r30	; 0x0c
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <xTaskPriorityDisinherit+0xac>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <xTaskPriorityDisinherit+0xac>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <prvGetNextExpireTime>:
    1dde:	dc 01       	movw	r26, r24
    1de0:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTimerList>
    1de4:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTimerList+0x1>
    1de8:	80 81       	ld	r24, Z
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	81 11       	cpse	r24, r1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9c 93       	st	X, r25
    1df2:	91 11       	cpse	r25, r1
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <prvGetNextExpireTime+0x28>
    1df6:	07 80       	ldd	r0, Z+7	; 0x07
    1df8:	f0 85       	ldd	r31, Z+8	; 0x08
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	08 95       	ret
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	08 95       	ret

00001e0e <prvInsertTimerInActiveList>:
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	42 83       	std	Z+2, r20	; 0x02
    1e1e:	53 83       	std	Z+3, r21	; 0x03
    1e20:	64 83       	std	Z+4, r22	; 0x04
    1e22:	75 83       	std	Z+5, r23	; 0x05
    1e24:	93 87       	std	Z+11, r25	; 0x0b
    1e26:	82 87       	std	Z+10, r24	; 0x0a
    1e28:	04 17       	cp	r16, r20
    1e2a:	15 07       	cpc	r17, r21
    1e2c:	26 07       	cpc	r18, r22
    1e2e:	37 07       	cpc	r19, r23
    1e30:	c0 f0       	brcs	.+48     	; 0x1e62 <prvInsertTimerInActiveList+0x54>
    1e32:	0c 19       	sub	r16, r12
    1e34:	1d 09       	sbc	r17, r13
    1e36:	2e 09       	sbc	r18, r14
    1e38:	3f 09       	sbc	r19, r15
    1e3a:	86 85       	ldd	r24, Z+14	; 0x0e
    1e3c:	97 85       	ldd	r25, Z+15	; 0x0f
    1e3e:	a0 89       	ldd	r26, Z+16	; 0x10
    1e40:	b1 89       	ldd	r27, Z+17	; 0x11
    1e42:	08 17       	cp	r16, r24
    1e44:	19 07       	cpc	r17, r25
    1e46:	2a 07       	cpc	r18, r26
    1e48:	3b 07       	cpc	r19, r27
    1e4a:	00 f5       	brcc	.+64     	; 0x1e8c <prvInsertTimerInActiveList+0x7e>
    1e4c:	bf 01       	movw	r22, r30
    1e4e:	6e 5f       	subi	r22, 0xFE	; 254
    1e50:	7f 4f       	sbci	r23, 0xFF	; 255
    1e52:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <pxOverflowTimerList>
    1e56:	90 91 10 0d 	lds	r25, 0x0D10	; 0x800d10 <pxOverflowTimerList+0x1>
    1e5a:	0e 94 35 03 	call	0x66a	; 0x66a <vListInsert>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	18 c0       	rjmp	.+48     	; 0x1e92 <prvInsertTimerInActiveList+0x84>
    1e62:	0c 15       	cp	r16, r12
    1e64:	1d 05       	cpc	r17, r13
    1e66:	2e 05       	cpc	r18, r14
    1e68:	3f 05       	cpc	r19, r15
    1e6a:	28 f4       	brcc	.+10     	; 0x1e76 <prvInsertTimerInActiveList+0x68>
    1e6c:	4c 15       	cp	r20, r12
    1e6e:	5d 05       	cpc	r21, r13
    1e70:	6e 05       	cpc	r22, r14
    1e72:	7f 05       	cpc	r23, r15
    1e74:	68 f4       	brcc	.+26     	; 0x1e90 <prvInsertTimerInActiveList+0x82>
    1e76:	bf 01       	movw	r22, r30
    1e78:	6e 5f       	subi	r22, 0xFE	; 254
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTimerList>
    1e80:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTimerList+0x1>
    1e84:	0e 94 35 03 	call	0x66a	; 0x66a <vListInsert>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <prvInsertTimerInActiveList+0x84>
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <prvInsertTimerInActiveList+0x84>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	08 95       	ret

00001ea0 <prvCheckForValidListAndQueue>:
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	0f 92       	push	r0
    1ea6:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <xTimerQueue>
    1eaa:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <xTimerQueue+0x1>
    1eae:	89 2b       	or	r24, r25
    1eb0:	e9 f4       	brne	.+58     	; 0x1eec <prvCheckForValidListAndQueue+0x4c>
    1eb2:	8e e1       	ldi	r24, 0x1E	; 30
    1eb4:	9d e0       	ldi	r25, 0x0D	; 13
    1eb6:	0e 94 20 03 	call	0x640	; 0x640 <vListInitialise>
    1eba:	83 e1       	ldi	r24, 0x13	; 19
    1ebc:	9d e0       	ldi	r25, 0x0D	; 13
    1ebe:	0e 94 20 03 	call	0x640	; 0x640 <vListInitialise>
    1ec2:	8e e1       	ldi	r24, 0x1E	; 30
    1ec4:	9d e0       	ldi	r25, 0x0D	; 13
    1ec6:	90 93 12 0d 	sts	0x0D12, r25	; 0x800d12 <pxCurrentTimerList+0x1>
    1eca:	80 93 11 0d 	sts	0x0D11, r24	; 0x800d11 <pxCurrentTimerList>
    1ece:	83 e1       	ldi	r24, 0x13	; 19
    1ed0:	9d e0       	ldi	r25, 0x0D	; 13
    1ed2:	90 93 10 0d 	sts	0x0D10, r25	; 0x800d10 <pxOverflowTimerList+0x1>
    1ed6:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <pxOverflowTimerList>
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	67 e0       	ldi	r22, 0x07	; 7
    1ede:	8a e0       	ldi	r24, 0x0A	; 10
    1ee0:	0e 94 d0 05 	call	0xba0	; 0xba0 <xQueueGenericCreate>
    1ee4:	90 93 0e 0d 	sts	0x0D0E, r25	; 0x800d0e <xTimerQueue+0x1>
    1ee8:	80 93 0d 0d 	sts	0x0D0D, r24	; 0x800d0d <xTimerQueue>
    1eec:	0f 90       	pop	r0
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	08 95       	ret

00001ef2 <xTimerCreateTimerTask>:
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	d3 df       	rcall	.-90     	; 0x1ea0 <prvCheckForValidListAndQueue>
    1efa:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <xTimerQueue>
    1efe:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <xTimerQueue+0x1>
    1f02:	89 2b       	or	r24, r25
    1f04:	89 f0       	breq	.+34     	; 0x1f28 <xTimerCreateTimerTask+0x36>
    1f06:	0f 2e       	mov	r0, r31
    1f08:	fb e0       	ldi	r31, 0x0B	; 11
    1f0a:	ef 2e       	mov	r14, r31
    1f0c:	fd e0       	ldi	r31, 0x0D	; 13
    1f0e:	ff 2e       	mov	r15, r31
    1f10:	f0 2d       	mov	r31, r0
    1f12:	03 e0       	ldi	r16, 0x03	; 3
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 ec       	ldi	r20, 0xC0	; 192
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	67 e2       	ldi	r22, 0x27	; 39
    1f1e:	72 e0       	ldi	r23, 0x02	; 2
    1f20:	88 e9       	ldi	r24, 0x98	; 152
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	f1 d9       	rcall	.-3102   	; 0x1308 <xTaskCreate>
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <xTimerCreateTimerTask+0x38>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	08 95       	ret

00001f32 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1f32:	8f 92       	push	r8
    1f34:	9f 92       	push	r9
    1f36:	af 92       	push	r10
    1f38:	bf 92       	push	r11
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	27 97       	sbiw	r28, 0x07	; 7
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1f5a:	e0 91 0d 0d 	lds	r30, 0x0D0D	; 0x800d0d <xTimerQueue>
    1f5e:	f0 91 0e 0d 	lds	r31, 0x0D0E	; 0x800d0e <xTimerQueue+0x1>
    1f62:	30 97       	sbiw	r30, 0x00	; 0
    1f64:	81 f1       	breq	.+96     	; 0x1fc6 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1f66:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1f68:	2a 83       	std	Y+2, r18	; 0x02
    1f6a:	3b 83       	std	Y+3, r19	; 0x03
    1f6c:	4c 83       	std	Y+4, r20	; 0x04
    1f6e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1f70:	9f 83       	std	Y+7, r25	; 0x07
    1f72:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1f74:	66 30       	cpi	r22, 0x06	; 6
    1f76:	f4 f4       	brge	.+60     	; 0x1fb4 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1f78:	c9 de       	rcall	.-622    	; 0x1d0c <xTaskGetSchedulerState>
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	69 f4       	brne	.+26     	; 0x1f98 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1f7e:	00 e0       	ldi	r16, 0x00	; 0
    1f80:	a7 01       	movw	r20, r14
    1f82:	96 01       	movw	r18, r12
    1f84:	be 01       	movw	r22, r28
    1f86:	6f 5f       	subi	r22, 0xFF	; 255
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <xTimerQueue>
    1f8e:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <xTimerQueue+0x1>
    1f92:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <xQueueGenericSend>
    1f96:	18 c0       	rjmp	.+48     	; 0x1fc8 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1f98:	00 e0       	ldi	r16, 0x00	; 0
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	a9 01       	movw	r20, r18
    1fa0:	be 01       	movw	r22, r28
    1fa2:	6f 5f       	subi	r22, 0xFF	; 255
    1fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa6:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <xTimerQueue>
    1faa:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <xTimerQueue+0x1>
    1fae:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <xQueueGenericSend>
    1fb2:	0a c0       	rjmp	.+20     	; 0x1fc8 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	a8 01       	movw	r20, r16
    1fb8:	be 01       	movw	r22, r28
    1fba:	6f 5f       	subi	r22, 0xFF	; 255
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	cf 01       	movw	r24, r30
    1fc0:	0e 94 9c 06 	call	0xd38	; 0xd38 <xQueueGenericSendFromISR>
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1fc8:	27 96       	adiw	r28, 0x07	; 7
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	df 90       	pop	r13
    1fe2:	cf 90       	pop	r12
    1fe4:	bf 90       	pop	r11
    1fe6:	af 90       	pop	r10
    1fe8:	9f 90       	pop	r9
    1fea:	8f 90       	pop	r8
    1fec:	08 95       	ret

00001fee <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1fee:	8f 92       	push	r8
    1ff0:	9f 92       	push	r9
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2006:	3b c0       	rjmp	.+118    	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2008:	07 80       	ldd	r0, Z+7	; 0x07
    200a:	f0 85       	ldd	r31, Z+8	; 0x08
    200c:	e0 2d       	mov	r30, r0
    200e:	80 80       	ld	r8, Z
    2010:	91 80       	ldd	r9, Z+1	; 0x01
    2012:	a2 80       	ldd	r10, Z+2	; 0x02
    2014:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2016:	c0 85       	ldd	r28, Z+8	; 0x08
    2018:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    201a:	8e 01       	movw	r16, r28
    201c:	0e 5f       	subi	r16, 0xFE	; 254
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
    2020:	c8 01       	movw	r24, r16
    2022:	0e 94 72 03 	call	0x6e4	; 0x6e4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2026:	ec 89       	ldd	r30, Y+20	; 0x14
    2028:	fd 89       	ldd	r31, Y+21	; 0x15
    202a:	ce 01       	movw	r24, r28
    202c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    202e:	8e 89       	ldd	r24, Y+22	; 0x16
    2030:	82 ff       	sbrs	r24, 2
    2032:	25 c0       	rjmp	.+74     	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2034:	8e 85       	ldd	r24, Y+14	; 0x0e
    2036:	9f 85       	ldd	r25, Y+15	; 0x0f
    2038:	a8 89       	ldd	r26, Y+16	; 0x10
    203a:	b9 89       	ldd	r27, Y+17	; 0x11
    203c:	88 0d       	add	r24, r8
    203e:	99 1d       	adc	r25, r9
    2040:	aa 1d       	adc	r26, r10
    2042:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2044:	88 16       	cp	r8, r24
    2046:	99 06       	cpc	r9, r25
    2048:	aa 06       	cpc	r10, r26
    204a:	bb 06       	cpc	r11, r27
    204c:	70 f4       	brcc	.+28     	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    204e:	8a 83       	std	Y+2, r24	; 0x02
    2050:	9b 83       	std	Y+3, r25	; 0x03
    2052:	ac 83       	std	Y+4, r26	; 0x04
    2054:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2056:	db 87       	std	Y+11, r29	; 0x0b
    2058:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    205a:	b8 01       	movw	r22, r16
    205c:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTimerList>
    2060:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTimerList+0x1>
    2064:	0e 94 35 03 	call	0x66a	; 0x66a <vListInsert>
    2068:	0a c0       	rjmp	.+20     	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    206a:	c1 2c       	mov	r12, r1
    206c:	d1 2c       	mov	r13, r1
    206e:	76 01       	movw	r14, r12
    2070:	00 e0       	ldi	r16, 0x00	; 0
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	a5 01       	movw	r20, r10
    2076:	94 01       	movw	r18, r8
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	ce 01       	movw	r24, r28
    207c:	5a df       	rcall	.-332    	; 0x1f32 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    207e:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTimerList>
    2082:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTimerList+0x1>
    2086:	80 81       	ld	r24, Z
    2088:	81 11       	cpse	r24, r1
    208a:	be cf       	rjmp	.-132    	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    208c:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <pxOverflowTimerList>
    2090:	90 91 10 0d 	lds	r25, 0x0D10	; 0x800d10 <pxOverflowTimerList+0x1>
    2094:	90 93 12 0d 	sts	0x0D12, r25	; 0x800d12 <pxCurrentTimerList+0x1>
    2098:	80 93 11 0d 	sts	0x0D11, r24	; 0x800d11 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    209c:	f0 93 10 0d 	sts	0x0D10, r31	; 0x800d10 <pxOverflowTimerList+0x1>
    20a0:	e0 93 0f 0d 	sts	0x0D0F, r30	; 0x800d0f <pxOverflowTimerList>
    }
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	df 90       	pop	r13
    20b2:	cf 90       	pop	r12
    20b4:	bf 90       	pop	r11
    20b6:	af 90       	pop	r10
    20b8:	9f 90       	pop	r9
    20ba:	8f 90       	pop	r8
    20bc:	08 95       	ret

000020be <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    20cc:	a2 d9       	rcall	.-3260   	; 0x1412 <xTaskGetTickCount>
    20ce:	6b 01       	movw	r12, r22
    20d0:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    20d2:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <xLastTime.2436>
    20d6:	90 91 08 0d 	lds	r25, 0x0D08	; 0x800d08 <xLastTime.2436+0x1>
    20da:	a0 91 09 0d 	lds	r26, 0x0D09	; 0x800d09 <xLastTime.2436+0x2>
    20de:	b0 91 0a 0d 	lds	r27, 0x0D0A	; 0x800d0a <xLastTime.2436+0x3>
    20e2:	c8 16       	cp	r12, r24
    20e4:	d9 06       	cpc	r13, r25
    20e6:	ea 06       	cpc	r14, r26
    20e8:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    20ea:	20 f4       	brcc	.+8      	; 0x20f4 <prvSampleTimeNow+0x36>
    20ec:	80 df       	rcall	.-256    	; 0x1fee <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	88 83       	st	Y, r24
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    20f4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    20f6:	c0 92 07 0d 	sts	0x0D07, r12	; 0x800d07 <xLastTime.2436>
    20fa:	d0 92 08 0d 	sts	0x0D08, r13	; 0x800d08 <xLastTime.2436+0x1>
    20fe:	e0 92 09 0d 	sts	0x0D09, r14	; 0x800d09 <xLastTime.2436+0x2>
    2102:	f0 92 0a 0d 	sts	0x0D0A, r15	; 0x800d0a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2106:	c7 01       	movw	r24, r14
    2108:	b6 01       	movw	r22, r12
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	08 95       	ret

00002118 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2118:	4f 92       	push	r4
    211a:	5f 92       	push	r5
    211c:	6f 92       	push	r6
    211e:	7f 92       	push	r7
    2120:	8f 92       	push	r8
    2122:	9f 92       	push	r9
    2124:	af 92       	push	r10
    2126:	bf 92       	push	r11
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	4b 01       	movw	r8, r22
    213a:	5c 01       	movw	r10, r24
    213c:	29 01       	movw	r4, r18
    213e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2140:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTimerList>
    2144:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTimerList+0x1>
    2148:	07 80       	ldd	r0, Z+7	; 0x07
    214a:	f0 85       	ldd	r31, Z+8	; 0x08
    214c:	e0 2d       	mov	r30, r0
    214e:	c0 85       	ldd	r28, Z+8	; 0x08
    2150:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2152:	ce 01       	movw	r24, r28
    2154:	02 96       	adiw	r24, 0x02	; 2
    2156:	0e 94 72 03 	call	0x6e4	; 0x6e4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    215a:	8e 89       	ldd	r24, Y+22	; 0x16
    215c:	82 ff       	sbrs	r24, 2
    215e:	1b c0       	rjmp	.+54     	; 0x2196 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2160:	4e 85       	ldd	r20, Y+14	; 0x0e
    2162:	5f 85       	ldd	r21, Y+15	; 0x0f
    2164:	68 89       	ldd	r22, Y+16	; 0x10
    2166:	79 89       	ldd	r23, Y+17	; 0x11
    2168:	48 0d       	add	r20, r8
    216a:	59 1d       	adc	r21, r9
    216c:	6a 1d       	adc	r22, r10
    216e:	7b 1d       	adc	r23, r11
    2170:	75 01       	movw	r14, r10
    2172:	64 01       	movw	r12, r8
    2174:	93 01       	movw	r18, r6
    2176:	82 01       	movw	r16, r4
    2178:	ce 01       	movw	r24, r28
    217a:	49 de       	rcall	.-878    	; 0x1e0e <prvInsertTimerInActiveList>
    217c:	88 23       	and	r24, r24
    217e:	69 f0       	breq	.+26     	; 0x219a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2180:	c1 2c       	mov	r12, r1
    2182:	d1 2c       	mov	r13, r1
    2184:	76 01       	movw	r14, r12
    2186:	00 e0       	ldi	r16, 0x00	; 0
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	a5 01       	movw	r20, r10
    218c:	94 01       	movw	r18, r8
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	ce 01       	movw	r24, r28
    2192:	cf de       	rcall	.-610    	; 0x1f32 <xTimerGenericCommand>
    2194:	02 c0       	rjmp	.+4      	; 0x219a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2196:	8e 7f       	andi	r24, 0xFE	; 254
    2198:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    219a:	ec 89       	ldd	r30, Y+20	; 0x14
    219c:	fd 89       	ldd	r31, Y+21	; 0x15
    219e:	ce 01       	movw	r24, r28
    21a0:	19 95       	eicall
    }
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	df 90       	pop	r13
    21b0:	cf 90       	pop	r12
    21b2:	bf 90       	pop	r11
    21b4:	af 90       	pop	r10
    21b6:	9f 90       	pop	r9
    21b8:	8f 90       	pop	r8
    21ba:	7f 90       	pop	r7
    21bc:	6f 90       	pop	r6
    21be:	5f 90       	pop	r5
    21c0:	4f 90       	pop	r4
    21c2:	08 95       	ret

000021c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    21c4:	8f 92       	push	r8
    21c6:	9f 92       	push	r9
    21c8:	af 92       	push	r10
    21ca:	bf 92       	push	r11
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	1f 92       	push	r1
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	6b 01       	movw	r12, r22
    21e2:	7c 01       	movw	r14, r24
    21e4:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    21e6:	0f d9       	rcall	.-3554   	; 0x1406 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    21e8:	ce 01       	movw	r24, r28
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	68 df       	rcall	.-304    	; 0x20be <prvSampleTimeNow>
    21ee:	4b 01       	movw	r8, r22
    21f0:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	81 11       	cpse	r24, r1
    21f6:	2b c0       	rjmp	.+86     	; 0x224e <__stack+0x4f>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    21f8:	11 11       	cpse	r17, r1
    21fa:	0c c0       	rjmp	.+24     	; 0x2214 <__stack+0x15>
    21fc:	8c 14       	cp	r8, r12
    21fe:	9d 04       	cpc	r9, r13
    2200:	ae 04       	cpc	r10, r14
    2202:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2204:	38 f0       	brcs	.+14     	; 0x2214 <__stack+0x15>
    2206:	3f da       	rcall	.-2946   	; 0x1686 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2208:	a5 01       	movw	r20, r10
    220a:	94 01       	movw	r18, r8
    220c:	c7 01       	movw	r24, r14
    220e:	b6 01       	movw	r22, r12
    2210:	83 df       	rcall	.-250    	; 0x2118 <prvProcessExpiredTimer>
    2212:	1e c0       	rjmp	.+60     	; 0x2250 <__stack+0x51>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2214:	11 23       	and	r17, r17
    2216:	41 f0       	breq	.+16     	; 0x2228 <__stack+0x29>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2218:	e0 91 0f 0d 	lds	r30, 0x0D0F	; 0x800d0f <pxOverflowTimerList>
    221c:	f0 91 10 0d 	lds	r31, 0x0D10	; 0x800d10 <pxOverflowTimerList+0x1>
    2220:	80 81       	ld	r24, Z
    2222:	11 e0       	ldi	r17, 0x01	; 1
    2224:	81 11       	cpse	r24, r1
    2226:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2228:	b7 01       	movw	r22, r14
    222a:	a6 01       	movw	r20, r12
    222c:	48 19       	sub	r20, r8
    222e:	59 09       	sbc	r21, r9
    2230:	6a 09       	sbc	r22, r10
    2232:	7b 09       	sbc	r23, r11
    2234:	21 2f       	mov	r18, r17
    2236:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <xTimerQueue>
    223a:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <xTimerQueue+0x1>
    223e:	0e 94 61 07 	call	0xec2	; 0xec2 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2242:	21 da       	rcall	.-3006   	; 0x1686 <xTaskResumeAll>
    2244:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <__stack+0x51>
    2248:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <__stack+0x51>
    224e:	1b da       	rcall	.-3018   	; 0x1686 <xTaskResumeAll>
            }
        }
    }
    2250:	0f 90       	pop	r0
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	bf 90       	pop	r11
    2262:	af 90       	pop	r10
    2264:	9f 90       	pop	r9
    2266:	8f 90       	pop	r8
    2268:	08 95       	ret

0000226a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    226a:	af 92       	push	r10
    226c:	bf 92       	push	r11
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	28 97       	sbiw	r28, 0x08	; 8
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    228e:	82 c0       	rjmp	.+260    	; 0x2394 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	88 23       	and	r24, r24
    2294:	0c f4       	brge	.+2      	; 0x2298 <prvProcessReceivedCommands+0x2e>
    2296:	7e c0       	rjmp	.+252    	; 0x2394 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2298:	ae 80       	ldd	r10, Y+6	; 0x06
    229a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    229c:	d5 01       	movw	r26, r10
    229e:	1c 96       	adiw	r26, 0x0c	; 12
    22a0:	8d 91       	ld	r24, X+
    22a2:	9c 91       	ld	r25, X
    22a4:	1d 97       	sbiw	r26, 0x0d	; 13
    22a6:	89 2b       	or	r24, r25
    22a8:	21 f0       	breq	.+8      	; 0x22b2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22aa:	c5 01       	movw	r24, r10
    22ac:	02 96       	adiw	r24, 0x02	; 2
    22ae:	0e 94 72 03 	call	0x6e4	; 0x6e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    22b2:	ce 01       	movw	r24, r28
    22b4:	08 96       	adiw	r24, 0x08	; 8
    22b6:	03 df       	rcall	.-506    	; 0x20be <prvSampleTimeNow>
    22b8:	8b 01       	movw	r16, r22
    22ba:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    22bc:	e9 81       	ldd	r30, Y+1	; 0x01
    22be:	0e 2e       	mov	r0, r30
    22c0:	00 0c       	add	r0, r0
    22c2:	ff 0b       	sbc	r31, r31
    22c4:	ea 30       	cpi	r30, 0x0A	; 10
    22c6:	f1 05       	cpc	r31, r1
    22c8:	08 f0       	brcs	.+2      	; 0x22cc <prvProcessReceivedCommands+0x62>
    22ca:	64 c0       	rjmp	.+200    	; 0x2394 <prvProcessReceivedCommands+0x12a>
    22cc:	88 27       	eor	r24, r24
    22ce:	ee 58       	subi	r30, 0x8E	; 142
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	8f 4f       	sbci	r24, 0xFF	; 255
    22d4:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    22d8:	f5 01       	movw	r30, r10
    22da:	86 89       	ldd	r24, Z+22	; 0x16
    22dc:	81 60       	ori	r24, 0x01	; 1
    22de:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    22e0:	ca 80       	ldd	r12, Y+2	; 0x02
    22e2:	db 80       	ldd	r13, Y+3	; 0x03
    22e4:	ec 80       	ldd	r14, Y+4	; 0x04
    22e6:	fd 80       	ldd	r15, Y+5	; 0x05
    22e8:	46 85       	ldd	r20, Z+14	; 0x0e
    22ea:	57 85       	ldd	r21, Z+15	; 0x0f
    22ec:	60 89       	ldd	r22, Z+16	; 0x10
    22ee:	71 89       	ldd	r23, Z+17	; 0x11
    22f0:	4c 0d       	add	r20, r12
    22f2:	5d 1d       	adc	r21, r13
    22f4:	6e 1d       	adc	r22, r14
    22f6:	7f 1d       	adc	r23, r15
    22f8:	c5 01       	movw	r24, r10
    22fa:	89 dd       	rcall	.-1262   	; 0x1e0e <prvInsertTimerInActiveList>
    22fc:	88 23       	and	r24, r24
    22fe:	09 f4       	brne	.+2      	; 0x2302 <prvProcessReceivedCommands+0x98>
    2300:	49 c0       	rjmp	.+146    	; 0x2394 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2302:	d5 01       	movw	r26, r10
    2304:	54 96       	adiw	r26, 0x14	; 20
    2306:	ed 91       	ld	r30, X+
    2308:	fc 91       	ld	r31, X
    230a:	55 97       	sbiw	r26, 0x15	; 21
    230c:	c5 01       	movw	r24, r10
    230e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2310:	f5 01       	movw	r30, r10
    2312:	86 89       	ldd	r24, Z+22	; 0x16
    2314:	82 ff       	sbrs	r24, 2
    2316:	3e c0       	rjmp	.+124    	; 0x2394 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2318:	4a 81       	ldd	r20, Y+2	; 0x02
    231a:	5b 81       	ldd	r21, Y+3	; 0x03
    231c:	6c 81       	ldd	r22, Y+4	; 0x04
    231e:	7d 81       	ldd	r23, Y+5	; 0x05
    2320:	86 85       	ldd	r24, Z+14	; 0x0e
    2322:	97 85       	ldd	r25, Z+15	; 0x0f
    2324:	a0 89       	ldd	r26, Z+16	; 0x10
    2326:	b1 89       	ldd	r27, Z+17	; 0x11
    2328:	9a 01       	movw	r18, r20
    232a:	ab 01       	movw	r20, r22
    232c:	28 0f       	add	r18, r24
    232e:	39 1f       	adc	r19, r25
    2330:	4a 1f       	adc	r20, r26
    2332:	5b 1f       	adc	r21, r27
    2334:	c1 2c       	mov	r12, r1
    2336:	d1 2c       	mov	r13, r1
    2338:	76 01       	movw	r14, r12
    233a:	00 e0       	ldi	r16, 0x00	; 0
    233c:	10 e0       	ldi	r17, 0x00	; 0
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	c5 01       	movw	r24, r10
    2342:	f7 dd       	rcall	.-1042   	; 0x1f32 <xTimerGenericCommand>
    2344:	27 c0       	rjmp	.+78     	; 0x2394 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2346:	d5 01       	movw	r26, r10
    2348:	56 96       	adiw	r26, 0x16	; 22
    234a:	8c 91       	ld	r24, X
    234c:	56 97       	sbiw	r26, 0x16	; 22
    234e:	8e 7f       	andi	r24, 0xFE	; 254
    2350:	56 96       	adiw	r26, 0x16	; 22
    2352:	8c 93       	st	X, r24
                        break;
    2354:	1f c0       	rjmp	.+62     	; 0x2394 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2356:	f5 01       	movw	r30, r10
    2358:	86 89       	ldd	r24, Z+22	; 0x16
    235a:	81 60       	ori	r24, 0x01	; 1
    235c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    235e:	4a 81       	ldd	r20, Y+2	; 0x02
    2360:	5b 81       	ldd	r21, Y+3	; 0x03
    2362:	6c 81       	ldd	r22, Y+4	; 0x04
    2364:	7d 81       	ldd	r23, Y+5	; 0x05
    2366:	46 87       	std	Z+14, r20	; 0x0e
    2368:	57 87       	std	Z+15, r21	; 0x0f
    236a:	60 8b       	std	Z+16, r22	; 0x10
    236c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    236e:	40 0f       	add	r20, r16
    2370:	51 1f       	adc	r21, r17
    2372:	62 1f       	adc	r22, r18
    2374:	73 1f       	adc	r23, r19
    2376:	68 01       	movw	r12, r16
    2378:	79 01       	movw	r14, r18
    237a:	c5 01       	movw	r24, r10
    237c:	48 dd       	rcall	.-1392   	; 0x1e0e <prvInsertTimerInActiveList>
                        break;
    237e:	0a c0       	rjmp	.+20     	; 0x2394 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2380:	f5 01       	movw	r30, r10
    2382:	86 89       	ldd	r24, Z+22	; 0x16
    2384:	81 fd       	sbrc	r24, 1
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2388:	c5 01       	movw	r24, r10
    238a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <vPortFree>
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2390:	8e 7f       	andi	r24, 0xFE	; 254
    2392:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	a9 01       	movw	r20, r18
    239a:	be 01       	movw	r22, r28
    239c:	6f 5f       	subi	r22, 0xFF	; 255
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <xTimerQueue>
    23a4:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <xTimerQueue+0x1>
    23a8:	0e 94 d6 06 	call	0xdac	; 0xdac <xQueueReceive>
    23ac:	81 11       	cpse	r24, r1
    23ae:	70 cf       	rjmp	.-288    	; 0x2290 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    23b0:	28 96       	adiw	r28, 0x08	; 8
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	ff 90       	pop	r15
    23c6:	ef 90       	pop	r14
    23c8:	df 90       	pop	r13
    23ca:	cf 90       	pop	r12
    23cc:	bf 90       	pop	r11
    23ce:	af 90       	pop	r10
    23d0:	08 95       	ret

000023d2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    23d2:	08 95       	ret

000023d4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    23d4:	84 b1       	in	r24, 0x04	; 4
    23d6:	80 68       	ori	r24, 0x80	; 128
    23d8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    23da:	85 b1       	in	r24, 0x05	; 5
    23dc:	80 68       	ori	r24, 0x80	; 128
    23de:	85 b9       	out	0x05, r24	; 5
    23e0:	08 95       	ret

000023e2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    23e2:	83 b1       	in	r24, 0x03	; 3
    23e4:	80 68       	ori	r24, 0x80	; 128
    23e6:	83 b9       	out	0x03, r24	; 3
    23e8:	08 95       	ret

000023ea <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    23ea:	f4 df       	rcall	.-24     	; 0x23d4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23ec:	2f ef       	ldi	r18, 0xFF	; 255
    23ee:	80 e7       	ldi	r24, 0x70	; 112
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	21 50       	subi	r18, 0x01	; 1
    23f4:	80 40       	sbci	r24, 0x00	; 0
    23f6:	90 40       	sbci	r25, 0x00	; 0
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <vApplicationMallocFailedHook+0x8>
    23fa:	00 c0       	rjmp	.+0      	; 0x23fc <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    23fc:	00 00       	nop
    23fe:	f1 df       	rcall	.-30     	; 0x23e2 <prvBlinkMainLed>
    2400:	f5 cf       	rjmp	.-22     	; 0x23ec <vApplicationMallocFailedHook+0x2>

00002402 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2402:	e8 df       	rcall	.-48     	; 0x23d4 <prvSetMainLedOn>
    2404:	2f ef       	ldi	r18, 0xFF	; 255
    2406:	87 ea       	ldi	r24, 0xA7	; 167
    2408:	91 e6       	ldi	r25, 0x61	; 97
    240a:	21 50       	subi	r18, 0x01	; 1
    240c:	80 40       	sbci	r24, 0x00	; 0
    240e:	90 40       	sbci	r25, 0x00	; 0
    2410:	e1 f7       	brne	.-8      	; 0x240a <vApplicationStackOverflowHook+0x8>
    2412:	00 c0       	rjmp	.+0      	; 0x2414 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2414:	00 00       	nop
    2416:	e5 df       	rcall	.-54     	; 0x23e2 <prvBlinkMainLed>
    2418:	f5 cf       	rjmp	.-22     	; 0x2404 <vApplicationStackOverflowHook+0x2>

0000241a <tempRead>:
	
	//temperature task
	xTaskCreate(tempRead, "Task 3 Temp", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
}

void tempRead( void *pvParameters ){
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	00 d0       	rcall	.+0      	; 0x2420 <tempRead+0x6>
    2420:	1f 92       	push	r1
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms
	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2426:	0e 94 09 0a 	call	0x1412	; 0x1412 <xTaskGetTickCount>
    242a:	69 83       	std	Y+1, r22	; 0x01
    242c:	7a 83       	std	Y+2, r23	; 0x02
    242e:	8b 83       	std	Y+3, r24	; 0x03
    2430:	9c 83       	std	Y+4, r25	; 0x04
	float temperature = 0.0;
	int humidity = 0;
	for(;;)
	{
		puts("it works");
    2432:	8f e2       	ldi	r24, 0x2F	; 47
    2434:	92 e0       	ldi	r25, 0x02	; 2
    2436:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <puts>
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    243a:	4f e1       	ldi	r20, 0x1F	; 31
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	ce 01       	movw	r24, r28
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	fb d9       	rcall	.-3082   	; 0x183e <xTaskDelayUntil>
		puts("it works");
    2448:	8f e2       	ldi	r24, 0x2F	; 47
    244a:	92 e0       	ldi	r25, 0x02	; 2
    244c:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <puts>
		hih8120_wakeup(); //wake up the sensor
    2450:	9b d2       	rcall	.+1334   	; 0x2988 <hih8120_wakeup>
		vTaskDelay(pdMS_TO_TICKS(60)); // Wait for sensor to wake up
    2452:	63 e0       	ldi	r22, 0x03	; 3
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
		hih8120_measure(); //measure temperature and humidity
    245a:	56 da       	rcall	.-2900   	; 0x1908 <vTaskDelay>
		vTaskDelay(pdMS_TO_TICKS(10)); //wait for the measuring to be finished
    245c:	a9 d2       	rcall	.+1362   	; 0x29b0 <hih8120_measure>
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	cb 01       	movw	r24, r22
		//if (hih8120_isReady()) {
			temperature = hih8120_getTemperature();
    2464:	51 da       	rcall	.-2910   	; 0x1908 <vTaskDelay>
    2466:	c9 d2       	rcall	.+1426   	; 0x29fa <hih8120_getTemperature>
    2468:	e6 2e       	mov	r14, r22
    246a:	f7 2e       	mov	r15, r23
    246c:	08 2f       	mov	r16, r24
    246e:	19 2f       	mov	r17, r25
			printf("%f", temperature);
    2470:	9f 93       	push	r25
    2472:	8f 93       	push	r24
    2474:	7f 93       	push	r23
    2476:	6f 93       	push	r22
    2478:	88 e3       	ldi	r24, 0x38	; 56
    247a:	92 e0       	ldi	r25, 0x02	; 2
    247c:	9f 93       	push	r25
    247e:	8f 93       	push	r24
    2480:	0e 94 33 26 	call	0x4c66	; 0x4c66 <printf>
			display_7seg_display(temperature, 1);
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	6e 2d       	mov	r22, r14
    2488:	7f 2d       	mov	r23, r15
    248a:	80 2f       	mov	r24, r16
			humidity = (uint8_t)hih8120_getHumidity();
    248c:	91 2f       	mov	r25, r17
    248e:	d6 d0       	rcall	.+428    	; 0x263c <display_7seg_display>
    2490:	9f d2       	rcall	.+1342   	; 0x29d0 <hih8120_getHumidity>
    2492:	59 d0       	rcall	.+178    	; 0x2546 <__fixunssfsi>
			printf("%d", humidity);
    2494:	1f 92       	push	r1
    2496:	6f 93       	push	r22
    2498:	8b e3       	ldi	r24, 0x3B	; 59
    249a:	92 e0       	ldi	r25, 0x02	; 2
    249c:	9f 93       	push	r25
    249e:	8f 93       	push	r24
    24a0:	0e 94 33 26 	call	0x4c66	; 0x4c66 <printf>
			vTaskDelay(pdMS_TO_TICKS(1000));
    24a4:	6e e3       	ldi	r22, 0x3E	; 62
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	2d da       	rcall	.-2982   	; 0x1908 <vTaskDelay>
			//display_7seg_display(humidity, 1);
		//}

		PORTA ^= _BV(PA7);
    24ae:	82 b1       	in	r24, 0x02	; 2
    24b0:	80 58       	subi	r24, 0x80	; 128
    24b2:	82 b9       	out	0x02, r24	; 2
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	b9 cf       	rjmp	.-142    	; 0x2432 <tempRead+0x18>

000024c0 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    24c0:	ef 92       	push	r14
    24c2:	ff 92       	push	r15
    24c4:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    24c6:	80 91 7c 0d 	lds	r24, 0x0D7C	; 0x800d7c <xTestSemaphore>
    24ca:	90 91 7d 0d 	lds	r25, 0x0D7D	; 0x800d7d <xTestSemaphore+0x1>
    24ce:	89 2b       	or	r24, r25
    24d0:	89 f4       	brne	.+34     	; 0x24f4 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	0e 94 90 06 	call	0xd20	; 0xd20 <xQueueCreateMutex>
    24d8:	90 93 7d 0d 	sts	0x0D7D, r25	; 0x800d7d <xTestSemaphore+0x1>
    24dc:	80 93 7c 0d 	sts	0x0D7C, r24	; 0x800d7c <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	41 f0       	breq	.+16     	; 0x24f4 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    24e4:	00 e0       	ldi	r16, 0x00	; 0
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	a9 01       	movw	r20, r18
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <xQueueGenericSend>
		}
	}
	
	//temperature task
	xTaskCreate(tempRead, "Task 3 Temp", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    24f4:	e1 2c       	mov	r14, r1
    24f6:	f1 2c       	mov	r15, r1
    24f8:	03 e0       	ldi	r16, 0x03	; 3
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 ec       	ldi	r20, 0xC0	; 192
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	6e e3       	ldi	r22, 0x3E	; 62
    2504:	72 e0       	ldi	r23, 0x02	; 2
    2506:	8d e0       	ldi	r24, 0x0D	; 13
    2508:	92 e1       	ldi	r25, 0x12	; 18
    250a:	0e 94 84 09 	call	0x1308	; 0x1308 <xTaskCreate>
}
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	08 95       	ret

00002516 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for LEDs used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2516:	81 b1       	in	r24, 0x01	; 1
    2518:	81 68       	ori	r24, 0x81	; 129
    251a:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	ee d5       	rcall	.+3036   	; 0x30fc <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    2520:	cf cf       	rjmp	.-98     	; 0x24c0 <create_tasks_and_semaphores>
    2522:	08 95       	ret

00002524 <main>:
    2524:	f8 df       	rcall	.-16     	; 0x2516 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program started.");
    2526:	8a e4       	ldi	r24, 0x4A	; 74
    2528:	92 e0       	ldi	r25, 0x02	; 2
    252a:	9f 93       	push	r25
    252c:	8f 93       	push	r24
    252e:	0e 94 33 26 	call	0x4c66	; 0x4c66 <printf>
	if ( HIH8120_OK != hih8120_initialise() )
    2532:	13 d2       	rcall	.+1062   	; 0x295a <hih8120_initialise>
	{
		//puts("Humidity&Temperature sensor initialized.");
	}
	// initialize display without any callback function
	display_7seg_initialise(NULL);
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
	// Power up the display
	display_7seg_powerUp();
    2538:	36 d1       	rcall	.+620    	; 0x27a6 <display_7seg_initialise>
    253a:	2a d1       	rcall	.+596    	; 0x2790 <display_7seg_powerUp>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    253c:	0e 94 cd 09 	call	0x139a	; 0x139a <vTaskStartScheduler>
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	ff cf       	rjmp	.-2      	; 0x2544 <main+0x20>

00002546 <__fixunssfsi>:
    2546:	33 d0       	rcall	.+102    	; 0x25ae <__fp_splitA>
    2548:	88 f0       	brcs	.+34     	; 0x256c <__fixunssfsi+0x26>
    254a:	9f 57       	subi	r25, 0x7F	; 127
    254c:	90 f0       	brcs	.+36     	; 0x2572 <__fixunssfsi+0x2c>
    254e:	b9 2f       	mov	r27, r25
    2550:	99 27       	eor	r25, r25
    2552:	b7 51       	subi	r27, 0x17	; 23
    2554:	a0 f0       	brcs	.+40     	; 0x257e <__fixunssfsi+0x38>
    2556:	d1 f0       	breq	.+52     	; 0x258c <__fixunssfsi+0x46>
    2558:	66 0f       	add	r22, r22
    255a:	77 1f       	adc	r23, r23
    255c:	88 1f       	adc	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	1a f0       	brmi	.+6      	; 0x2568 <__fixunssfsi+0x22>
    2562:	ba 95       	dec	r27
    2564:	c9 f7       	brne	.-14     	; 0x2558 <__fixunssfsi+0x12>
    2566:	12 c0       	rjmp	.+36     	; 0x258c <__fixunssfsi+0x46>
    2568:	b1 30       	cpi	r27, 0x01	; 1
    256a:	81 f0       	breq	.+32     	; 0x258c <__fixunssfsi+0x46>
    256c:	3a d0       	rcall	.+116    	; 0x25e2 <__fp_zero>
    256e:	b1 e0       	ldi	r27, 0x01	; 1
    2570:	08 95       	ret
    2572:	37 c0       	rjmp	.+110    	; 0x25e2 <__fp_zero>
    2574:	67 2f       	mov	r22, r23
    2576:	78 2f       	mov	r23, r24
    2578:	88 27       	eor	r24, r24
    257a:	b8 5f       	subi	r27, 0xF8	; 248
    257c:	39 f0       	breq	.+14     	; 0x258c <__fixunssfsi+0x46>
    257e:	b9 3f       	cpi	r27, 0xF9	; 249
    2580:	cc f3       	brlt	.-14     	; 0x2574 <__fixunssfsi+0x2e>
    2582:	86 95       	lsr	r24
    2584:	77 95       	ror	r23
    2586:	67 95       	ror	r22
    2588:	b3 95       	inc	r27
    258a:	d9 f7       	brne	.-10     	; 0x2582 <__fixunssfsi+0x3c>
    258c:	3e f4       	brtc	.+14     	; 0x259c <__fixunssfsi+0x56>
    258e:	90 95       	com	r25
    2590:	80 95       	com	r24
    2592:	70 95       	com	r23
    2594:	61 95       	neg	r22
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	8f 4f       	sbci	r24, 0xFF	; 255
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	08 95       	ret

0000259e <__fp_split3>:
    259e:	57 fd       	sbrc	r21, 7
    25a0:	90 58       	subi	r25, 0x80	; 128
    25a2:	44 0f       	add	r20, r20
    25a4:	55 1f       	adc	r21, r21
    25a6:	59 f0       	breq	.+22     	; 0x25be <__fp_splitA+0x10>
    25a8:	5f 3f       	cpi	r21, 0xFF	; 255
    25aa:	71 f0       	breq	.+28     	; 0x25c8 <__fp_splitA+0x1a>
    25ac:	47 95       	ror	r20

000025ae <__fp_splitA>:
    25ae:	88 0f       	add	r24, r24
    25b0:	97 fb       	bst	r25, 7
    25b2:	99 1f       	adc	r25, r25
    25b4:	61 f0       	breq	.+24     	; 0x25ce <__fp_splitA+0x20>
    25b6:	9f 3f       	cpi	r25, 0xFF	; 255
    25b8:	79 f0       	breq	.+30     	; 0x25d8 <__fp_splitA+0x2a>
    25ba:	87 95       	ror	r24
    25bc:	08 95       	ret
    25be:	12 16       	cp	r1, r18
    25c0:	13 06       	cpc	r1, r19
    25c2:	14 06       	cpc	r1, r20
    25c4:	55 1f       	adc	r21, r21
    25c6:	f2 cf       	rjmp	.-28     	; 0x25ac <__fp_split3+0xe>
    25c8:	46 95       	lsr	r20
    25ca:	f1 df       	rcall	.-30     	; 0x25ae <__fp_splitA>
    25cc:	08 c0       	rjmp	.+16     	; 0x25de <__fp_splitA+0x30>
    25ce:	16 16       	cp	r1, r22
    25d0:	17 06       	cpc	r1, r23
    25d2:	18 06       	cpc	r1, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	f1 cf       	rjmp	.-30     	; 0x25ba <__fp_splitA+0xc>
    25d8:	86 95       	lsr	r24
    25da:	71 05       	cpc	r23, r1
    25dc:	61 05       	cpc	r22, r1
    25de:	08 94       	sec
    25e0:	08 95       	ret

000025e2 <__fp_zero>:
    25e2:	e8 94       	clt

000025e4 <__fp_szero>:
    25e4:	bb 27       	eor	r27, r27
    25e6:	66 27       	eor	r22, r22
    25e8:	77 27       	eor	r23, r23
    25ea:	cb 01       	movw	r24, r22
    25ec:	97 f9       	bld	r25, 7
    25ee:	08 95       	ret

000025f0 <_spiCallBack>:
    25f0:	81 b3       	in	r24, 0x11	; 17
    25f2:	8f 60       	ori	r24, 0x0F	; 15
    25f4:	81 bb       	out	0x11, r24	; 17
    25f6:	28 98       	cbi	0x05, 0	; 5
    25f8:	28 9a       	sbi	0x05, 0	; 5
    25fa:	21 b3       	in	r18, 0x11	; 17
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	00 90 59 0d 	lds	r0, 0x0D59	; 0x800d59 <_digitNo>
    2604:	02 c0       	rjmp	.+4      	; 0x260a <_spiCallBack+0x1a>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	0a 94       	dec	r0
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <_spiCallBack+0x16>
    260e:	80 95       	com	r24
    2610:	82 23       	and	r24, r18
    2612:	81 bb       	out	0x11, r24	; 17
    2614:	e0 91 29 0d 	lds	r30, 0x0D29	; 0x800d29 <_displayDoneCallBack>
    2618:	f0 91 2a 0d 	lds	r31, 0x0D2A	; 0x800d2a <_displayDoneCallBack+0x1>
    261c:	30 97       	sbiw	r30, 0x00	; 0
    261e:	09 f0       	breq	.+2      	; 0x2622 <_spiCallBack+0x32>
    2620:	19 95       	eicall
    2622:	08 95       	ret

00002624 <display_7seg_displayErr>:
    2624:	9f b7       	in	r25, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	e5 e5       	ldi	r30, 0x55	; 85
    262a:	fd e0       	ldi	r31, 0x0D	; 13
    262c:	10 82       	st	Z, r1
    262e:	8e e9       	ldi	r24, 0x9E	; 158
    2630:	81 83       	std	Z+1, r24	; 0x01
    2632:	8a e0       	ldi	r24, 0x0A	; 10
    2634:	82 83       	std	Z+2, r24	; 0x02
    2636:	83 83       	std	Z+3, r24	; 0x03
    2638:	9f bf       	out	0x3f, r25	; 63
    263a:	08 95       	ret

0000263c <display_7seg_display>:
    263c:	bf 92       	push	r11
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	6b 01       	movw	r12, r22
    2650:	7c 01       	movw	r14, r24
    2652:	b4 2e       	mov	r11, r20
    2654:	10 92 2c 0d 	sts	0x0D2C, r1	; 0x800d2c <_maxHexSegmentindex>
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	84 17       	cp	r24, r20
    265c:	98 f1       	brcs	.+102    	; 0x26c4 <display_7seg_display+0x88>
    265e:	64 2f       	mov	r22, r20
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 ed 20 	call	0x41da	; 0x41da <__floatunsisf>
    266a:	9b 01       	movw	r18, r22
    266c:	ac 01       	movw	r20, r24
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	80 e2       	ldi	r24, 0x20	; 32
    2674:	91 e4       	ldi	r25, 0x41	; 65
    2676:	0e 94 0d 22 	call	0x441a	; 0x441a <pow>
    267a:	a7 01       	movw	r20, r14
    267c:	96 01       	movw	r18, r12
    267e:	0e 94 a7 21 	call	0x434e	; 0x434e <__mulsf3>
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 15 20 	call	0x402a	; 0x402a <__addsf3>
    268e:	0e 94 2a 21 	call	0x4254	; 0x4254 <floor>
    2692:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__fixsfsi>
    2696:	ab 01       	movw	r20, r22
    2698:	77 23       	and	r23, r23
    269a:	64 f4       	brge	.+24     	; 0x26b4 <display_7seg_display+0x78>
    269c:	44 27       	eor	r20, r20
    269e:	55 27       	eor	r21, r21
    26a0:	46 1b       	sub	r20, r22
    26a2:	57 0b       	sbc	r21, r23
    26a4:	21 e0       	ldi	r18, 0x01	; 1
    26a6:	48 3e       	cpi	r20, 0xE8	; 232
    26a8:	83 e0       	ldi	r24, 0x03	; 3
    26aa:	58 07       	cpc	r21, r24
    26ac:	0c f4       	brge	.+2      	; 0x26b0 <display_7seg_display+0x74>
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	11 e0       	ldi	r17, 0x01	; 1
    26b2:	0c c0       	rjmp	.+24     	; 0x26cc <display_7seg_display+0x90>
    26b4:	21 e0       	ldi	r18, 0x01	; 1
    26b6:	40 31       	cpi	r20, 0x10	; 16
    26b8:	87 e2       	ldi	r24, 0x27	; 39
    26ba:	58 07       	cpc	r21, r24
    26bc:	0c f4       	brge	.+2      	; 0x26c0 <display_7seg_display+0x84>
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	10 e0       	ldi	r17, 0x00	; 0
    26c2:	04 c0       	rjmp	.+8      	; 0x26cc <display_7seg_display+0x90>
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	21 e0       	ldi	r18, 0x01	; 1
    26ca:	10 e0       	ldi	r17, 0x00	; 0
    26cc:	0f b7       	in	r16, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	22 23       	and	r18, r18
    26d2:	11 f0       	breq	.+4      	; 0x26d8 <display_7seg_display+0x9c>
    26d4:	a7 df       	rcall	.-178    	; 0x2624 <display_7seg_displayErr>
    26d6:	51 c0       	rjmp	.+162    	; 0x277a <display_7seg_display+0x13e>
    26d8:	c9 e5       	ldi	r28, 0x59	; 89
    26da:	dd e0       	ldi	r29, 0x0D	; 13
    26dc:	0f 2e       	mov	r0, r31
    26de:	f5 e5       	ldi	r31, 0x55	; 85
    26e0:	cf 2e       	mov	r12, r31
    26e2:	fd e0       	ldi	r31, 0x0D	; 13
    26e4:	df 2e       	mov	r13, r31
    26e6:	f0 2d       	mov	r31, r0
    26e8:	0f 2e       	mov	r0, r31
    26ea:	fa e0       	ldi	r31, 0x0A	; 10
    26ec:	ef 2e       	mov	r14, r31
    26ee:	f1 2c       	mov	r15, r1
    26f0:	f0 2d       	mov	r31, r0
    26f2:	ca 01       	movw	r24, r20
    26f4:	b7 01       	movw	r22, r14
    26f6:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__divmodhi4>
    26fa:	fc 01       	movw	r30, r24
    26fc:	e5 5a       	subi	r30, 0xA5	; 165
    26fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2700:	80 81       	ld	r24, Z
    2702:	8a 93       	st	-Y, r24
    2704:	46 2f       	mov	r20, r22
    2706:	57 2f       	mov	r21, r23
    2708:	cc 15       	cp	r28, r12
    270a:	dd 05       	cpc	r29, r13
    270c:	91 f7       	brne	.-28     	; 0x26f2 <display_7seg_display+0xb6>
    270e:	43 e0       	ldi	r20, 0x03	; 3
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	4b 19       	sub	r20, r11
    2714:	51 09       	sbc	r21, r1
    2716:	14 16       	cp	r1, r20
    2718:	15 06       	cpc	r1, r21
    271a:	f4 f4       	brge	.+60     	; 0x2758 <display_7seg_display+0x11c>
    271c:	80 91 55 0d 	lds	r24, 0x0D55	; 0x800d55 <_digitSegments>
    2720:	8c 3f       	cpi	r24, 0xFC	; 252
    2722:	49 f0       	breq	.+18     	; 0x2736 <display_7seg_display+0xfa>
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	19 c0       	rjmp	.+50     	; 0x275a <display_7seg_display+0x11e>
    2728:	fc 01       	movw	r30, r24
    272a:	eb 5a       	subi	r30, 0xAB	; 171
    272c:	f2 4f       	sbci	r31, 0xF2	; 242
    272e:	30 81       	ld	r19, Z
    2730:	3c 3f       	cpi	r19, 0xFC	; 252
    2732:	21 f0       	breq	.+8      	; 0x273c <display_7seg_display+0x100>
    2734:	12 c0       	rjmp	.+36     	; 0x275a <display_7seg_display+0x11e>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	fc 01       	movw	r30, r24
    273e:	eb 5a       	subi	r30, 0xAB	; 171
    2740:	f2 4f       	sbci	r31, 0xF2	; 242
    2742:	10 82       	st	Z, r1
    2744:	62 2f       	mov	r22, r18
    2746:	2f 5f       	subi	r18, 0xFF	; 255
    2748:	82 2f       	mov	r24, r18
    274a:	02 2e       	mov	r0, r18
    274c:	00 0c       	add	r0, r0
    274e:	99 0b       	sbc	r25, r25
    2750:	84 17       	cp	r24, r20
    2752:	95 07       	cpc	r25, r21
    2754:	4c f3       	brlt	.-46     	; 0x2728 <display_7seg_display+0xec>
    2756:	01 c0       	rjmp	.+2      	; 0x275a <display_7seg_display+0x11e>
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	11 23       	and	r17, r17
    275c:	31 f0       	breq	.+12     	; 0x276a <display_7seg_display+0x12e>
    275e:	e6 2f       	mov	r30, r22
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	eb 5a       	subi	r30, 0xAB	; 171
    2764:	f2 4f       	sbci	r31, 0xF2	; 242
    2766:	82 e0       	ldi	r24, 0x02	; 2
    2768:	80 83       	st	Z, r24
    276a:	bb 20       	and	r11, r11
    276c:	31 f0       	breq	.+12     	; 0x277a <display_7seg_display+0x13e>
    276e:	fa 01       	movw	r30, r20
    2770:	eb 5a       	subi	r30, 0xAB	; 171
    2772:	f2 4f       	sbci	r31, 0xF2	; 242
    2774:	80 81       	ld	r24, Z
    2776:	81 60       	ori	r24, 0x01	; 1
    2778:	80 83       	st	Z, r24
    277a:	0f bf       	out	0x3f, r16	; 63
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	bf 90       	pop	r11
    278e:	08 95       	ret

00002790 <display_7seg_powerUp>:
    2790:	85 b5       	in	r24, 0x25	; 37
    2792:	85 60       	ori	r24, 0x05	; 5
    2794:	85 bd       	out	0x25, r24	; 37
    2796:	08 95       	ret

00002798 <display_7seg_powerDown>:
    2798:	85 b5       	in	r24, 0x25	; 37
    279a:	88 7f       	andi	r24, 0xF8	; 248
    279c:	85 bd       	out	0x25, r24	; 37
    279e:	81 b3       	in	r24, 0x11	; 17
    27a0:	8f 60       	ori	r24, 0x0F	; 15
    27a2:	81 bb       	out	0x11, r24	; 17
    27a4:	08 95       	ret

000027a6 <display_7seg_initialise>:
    27a6:	8f 92       	push	r8
    27a8:	af 92       	push	r10
    27aa:	cf 92       	push	r12
    27ac:	ef 92       	push	r14
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	ec 01       	movw	r28, r24
    27b8:	80 b3       	in	r24, 0x10	; 16
    27ba:	8f 60       	ori	r24, 0x0F	; 15
    27bc:	80 bb       	out	0x10, r24	; 16
    27be:	81 b3       	in	r24, 0x11	; 17
    27c0:	8f 60       	ori	r24, 0x0F	; 15
    27c2:	81 bb       	out	0x11, r24	; 17
    27c4:	20 9a       	sbi	0x04, 0	; 4
    27c6:	88 ef       	ldi	r24, 0xF8	; 248
    27c8:	92 e1       	ldi	r25, 0x12	; 18
    27ca:	9f 93       	push	r25
    27cc:	8f 93       	push	r24
    27ce:	81 2c       	mov	r8, r1
    27d0:	a1 2c       	mov	r10, r1
    27d2:	c1 2c       	mov	r12, r1
    27d4:	e1 2c       	mov	r14, r1
    27d6:	00 e0       	ldi	r16, 0x00	; 0
    27d8:	10 e0       	ldi	r17, 0x00	; 0
    27da:	20 e2       	ldi	r18, 0x20	; 32
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	63 e0       	ldi	r22, 0x03	; 3
    27e0:	80 e1       	ldi	r24, 0x10	; 16
    27e2:	ee d4       	rcall	.+2524   	; 0x31c0 <spi_create>
    27e4:	90 93 5b 0d 	sts	0x0D5B, r25	; 0x800d5b <_spi+0x1>
    27e8:	80 93 5a 0d 	sts	0x0D5A, r24	; 0x800d5a <_spi>
    27ec:	89 e1       	ldi	r24, 0x19	; 25
    27ee:	87 bd       	out	0x27, r24	; 39
    27f0:	84 b5       	in	r24, 0x24	; 36
    27f2:	82 60       	ori	r24, 0x02	; 2
    27f4:	84 bd       	out	0x24, r24	; 36
    27f6:	ee e6       	ldi	r30, 0x6E	; 110
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	82 60       	ori	r24, 0x02	; 2
    27fe:	80 83       	st	Z, r24
    2800:	cb df       	rcall	.-106    	; 0x2798 <display_7seg_powerDown>
    2802:	d0 93 2a 0d 	sts	0x0D2A, r29	; 0x800d2a <_displayDoneCallBack+0x1>
    2806:	c0 93 29 0d 	sts	0x0D29, r28	; 0x800d29 <_displayDoneCallBack>
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	ef 90       	pop	r14
    2818:	cf 90       	pop	r12
    281a:	af 90       	pop	r10
    281c:	8f 90       	pop	r8
    281e:	08 95       	ret

00002820 <__vector_21>:
    2820:	1f 92       	push	r1
    2822:	0f 92       	push	r0
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	0f 92       	push	r0
    2828:	11 24       	eor	r1, r1
    282a:	0b b6       	in	r0, 0x3b	; 59
    282c:	0f 92       	push	r0
    282e:	2f 93       	push	r18
    2830:	3f 93       	push	r19
    2832:	4f 93       	push	r20
    2834:	5f 93       	push	r21
    2836:	6f 93       	push	r22
    2838:	7f 93       	push	r23
    283a:	8f 93       	push	r24
    283c:	9f 93       	push	r25
    283e:	af 93       	push	r26
    2840:	bf 93       	push	r27
    2842:	ef 93       	push	r30
    2844:	ff 93       	push	r31
    2846:	80 91 2c 0d 	lds	r24, 0x0D2C	; 0x800d2c <_maxHexSegmentindex>
    284a:	88 23       	and	r24, r24
    284c:	69 f1       	breq	.+90     	; 0x28a8 <__vector_21+0x88>
    284e:	20 91 2d 0d 	lds	r18, 0x0D2D	; 0x800d2d <_intCounter>
    2852:	30 91 2e 0d 	lds	r19, 0x0D2E	; 0x800d2e <_intCounter+0x1>
    2856:	25 3f       	cpi	r18, 0xF5	; 245
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	39 07       	cpc	r19, r25
    285c:	38 f4       	brcc	.+14     	; 0x286c <__vector_21+0x4c>
    285e:	2f 5f       	subi	r18, 0xFF	; 255
    2860:	3f 4f       	sbci	r19, 0xFF	; 255
    2862:	30 93 2e 0d 	sts	0x0D2E, r19	; 0x800d2e <_intCounter+0x1>
    2866:	20 93 2d 0d 	sts	0x0D2D, r18	; 0x800d2d <_intCounter>
    286a:	1e c0       	rjmp	.+60     	; 0x28a8 <__vector_21+0x88>
    286c:	10 92 2e 0d 	sts	0x0D2E, r1	; 0x800d2e <_intCounter+0x1>
    2870:	10 92 2d 0d 	sts	0x0D2D, r1	; 0x800d2d <_intCounter>
    2874:	e0 91 2b 0d 	lds	r30, 0x0D2B	; 0x800d2b <_scrollIndex>
    2878:	2e 2f       	mov	r18, r30
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	04 97       	sbiw	r24, 0x04	; 4
    2880:	28 17       	cp	r18, r24
    2882:	39 07       	cpc	r19, r25
    2884:	14 f4       	brge	.+4      	; 0x288a <__vector_21+0x6a>
    2886:	ef 5f       	subi	r30, 0xFF	; 255
    2888:	01 c0       	rjmp	.+2      	; 0x288c <__vector_21+0x6c>
    288a:	e0 e0       	ldi	r30, 0x00	; 0
    288c:	e0 93 2b 0d 	sts	0x0D2B, r30	; 0x800d2b <_scrollIndex>
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	e1 5d       	subi	r30, 0xD1	; 209
    2894:	f2 4f       	sbci	r31, 0xF2	; 242
    2896:	a5 e5       	ldi	r26, 0x55	; 85
    2898:	bd e0       	ldi	r27, 0x0D	; 13
    289a:	29 e5       	ldi	r18, 0x59	; 89
    289c:	3d e0       	ldi	r19, 0x0D	; 13
    289e:	81 91       	ld	r24, Z+
    28a0:	8d 93       	st	X+, r24
    28a2:	a2 17       	cp	r26, r18
    28a4:	b3 07       	cpc	r27, r19
    28a6:	d9 f7       	brne	.-10     	; 0x289e <__vector_21+0x7e>
    28a8:	80 91 59 0d 	lds	r24, 0x0D59	; 0x800d59 <_digitNo>
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	83 70       	andi	r24, 0x03	; 3
    28b2:	90 78       	andi	r25, 0x80	; 128
    28b4:	99 23       	and	r25, r25
    28b6:	24 f4       	brge	.+8      	; 0x28c0 <__vector_21+0xa0>
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	8c 6f       	ori	r24, 0xFC	; 252
    28bc:	9f 6f       	ori	r25, 0xFF	; 255
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	80 93 59 0d 	sts	0x0D59, r24	; 0x800d59 <_digitNo>
    28c4:	99 27       	eor	r25, r25
    28c6:	fc 01       	movw	r30, r24
    28c8:	eb 5a       	subi	r30, 0xAB	; 171
    28ca:	f2 4f       	sbci	r31, 0xF2	; 242
    28cc:	60 81       	ld	r22, Z
    28ce:	60 95       	com	r22
    28d0:	80 91 5a 0d 	lds	r24, 0x0D5A	; 0x800d5a <_spi>
    28d4:	90 91 5b 0d 	lds	r25, 0x0D5B	; 0x800d5b <_spi+0x1>
    28d8:	4a d5       	rcall	.+2708   	; 0x336e <spi_sendByte>
    28da:	ff 91       	pop	r31
    28dc:	ef 91       	pop	r30
    28de:	bf 91       	pop	r27
    28e0:	af 91       	pop	r26
    28e2:	9f 91       	pop	r25
    28e4:	8f 91       	pop	r24
    28e6:	7f 91       	pop	r23
    28e8:	6f 91       	pop	r22
    28ea:	5f 91       	pop	r21
    28ec:	4f 91       	pop	r20
    28ee:	3f 91       	pop	r19
    28f0:	2f 91       	pop	r18
    28f2:	0f 90       	pop	r0
    28f4:	0b be       	out	0x3b, r0	; 59
    28f6:	0f 90       	pop	r0
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	0f 90       	pop	r0
    28fc:	1f 90       	pop	r1
    28fe:	18 95       	reti

00002900 <_hihTwiCallback>:
    2900:	65 30       	cpi	r22, 0x05	; 5
    2902:	f1 f4       	brne	.+60     	; 0x2940 <_hihTwiCallback+0x40>
    2904:	fa 01       	movw	r30, r20
    2906:	80 81       	ld	r24, Z
    2908:	8f 73       	andi	r24, 0x3F	; 63
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	98 2f       	mov	r25, r24
    290e:	88 27       	eor	r24, r24
    2910:	21 81       	ldd	r18, Z+1	; 0x01
    2912:	82 2b       	or	r24, r18
    2914:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2918:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	f0 e4       	ldi	r31, 0x40	; 64
    2920:	8f 9f       	mul	r24, r31
    2922:	c0 01       	movw	r24, r0
    2924:	11 24       	eor	r1, r1
    2926:	fa 01       	movw	r30, r20
    2928:	23 81       	ldd	r18, Z+3	; 0x03
    292a:	26 95       	lsr	r18
    292c:	26 95       	lsr	r18
    292e:	82 2b       	or	r24, r18
    2930:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2934:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	80 93 5c 0d 	sts	0x0D5C, r24	; 0x800d5c <_measuringIsReady>
    293e:	08 95       	ret
    2940:	64 30       	cpi	r22, 0x04	; 4
    2942:	51 f0       	breq	.+20     	; 0x2958 <_hihTwiCallback+0x58>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e4       	ldi	r25, 0x40	; 64
    2948:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    294c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2950:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2954:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2958:	08 95       	ret

0000295a <hih8120_initialise>:
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	00 e8       	ldi	r16, 0x80	; 128
    2960:	14 e1       	ldi	r17, 0x14	; 20
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	34 e2       	ldi	r19, 0x24	; 36
    2966:	44 ef       	ldi	r20, 0xF4	; 244
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	87 e2       	ldi	r24, 0x27	; 39
    296e:	20 d6       	rcall	.+3136   	; 0x35b0 <twiCreate>
    2970:	90 93 5e 0d 	sts	0x0D5E, r25	; 0x800d5e <_hih8120Handler+0x1>
    2974:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <_hih8120Handler>
    2978:	21 e0       	ldi	r18, 0x01	; 1
    297a:	89 2b       	or	r24, r25
    297c:	09 f0       	breq	.+2      	; 0x2980 <hih8120_initialise+0x26>
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	82 2f       	mov	r24, r18
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <hih8120_wakeup>:
    2988:	80 91 5d 0d 	lds	r24, 0x0D5D	; 0x800d5d <_hih8120Handler>
    298c:	90 91 5e 0d 	lds	r25, 0x0D5E	; 0x800d5e <_hih8120Handler+0x1>
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	51 f0       	breq	.+20     	; 0x29a8 <hih8120_wakeup+0x20>
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	5e d6       	rcall	.+3260   	; 0x3658 <twiTransmit>
    299c:	84 30       	cpi	r24, 0x04	; 4
    299e:	31 f4       	brne	.+12     	; 0x29ac <hih8120_wakeup+0x24>
    29a0:	10 92 5c 0d 	sts	0x0D5C, r1	; 0x800d5c <_measuringIsReady>
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	08 95       	ret
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	08 95       	ret
    29ac:	83 e0       	ldi	r24, 0x03	; 3
    29ae:	08 95       	ret

000029b0 <hih8120_measure>:
    29b0:	80 91 5d 0d 	lds	r24, 0x0D5D	; 0x800d5d <_hih8120Handler>
    29b4:	90 91 5e 0d 	lds	r25, 0x0D5E	; 0x800d5e <_hih8120Handler+0x1>
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	31 f0       	breq	.+12     	; 0x29c8 <hih8120_measure+0x18>
    29bc:	64 e0       	ldi	r22, 0x04	; 4
    29be:	98 d6       	rcall	.+3376   	; 0x36f0 <twiReceive>
    29c0:	85 30       	cpi	r24, 0x05	; 5
    29c2:	21 f0       	breq	.+8      	; 0x29cc <hih8120_measure+0x1c>
    29c4:	83 e0       	ldi	r24, 0x03	; 3
    29c6:	08 95       	ret
    29c8:	82 e0       	ldi	r24, 0x02	; 2
    29ca:	08 95       	ret
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	08 95       	ret

000029d0 <hih8120_getHumidity>:
    29d0:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    29d4:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 ed 20 	call	0x41da	; 0x41da <__floatunsisf>
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	48 ec       	ldi	r20, 0xC8	; 200
    29e6:	52 e4       	ldi	r21, 0x42	; 66
    29e8:	0e 94 a7 21 	call	0x434e	; 0x434e <__mulsf3>
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	38 ef       	ldi	r19, 0xF8	; 248
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	56 e4       	ldi	r21, 0x46	; 70
    29f4:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__divsf3>
    29f8:	08 95       	ret

000029fa <hih8120_getTemperature>:
    29fa:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    29fe:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 ed 20 	call	0x41da	; 0x41da <__floatunsisf>
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	45 e2       	ldi	r20, 0x25	; 37
    2a10:	53 e4       	ldi	r21, 0x43	; 67
    2a12:	0e 94 a7 21 	call	0x434e	; 0x434e <__mulsf3>
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	38 ef       	ldi	r19, 0xF8	; 248
    2a1a:	4f e7       	ldi	r20, 0x7F	; 127
    2a1c:	56 e4       	ldi	r21, 0x46	; 70
    2a1e:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__divsf3>
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	52 e4       	ldi	r21, 0x42	; 66
    2a2a:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__subsf3>
    2a2e:	08 95       	ret

00002a30 <serial_create>:
    2a30:	2f 92       	push	r2
    2a32:	3f 92       	push	r3
    2a34:	4f 92       	push	r4
    2a36:	5f 92       	push	r5
    2a38:	6f 92       	push	r6
    2a3a:	7f 92       	push	r7
    2a3c:	8f 92       	push	r8
    2a3e:	9f 92       	push	r9
    2a40:	af 92       	push	r10
    2a42:	cf 92       	push	r12
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	f8 2e       	mov	r15, r24
    2a56:	2a 01       	movw	r4, r20
    2a58:	3b 01       	movw	r6, r22
    2a5a:	88 e0       	ldi	r24, 0x08	; 8
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <malloc>
    2a62:	8c 01       	movw	r16, r24
    2a64:	8f 2d       	mov	r24, r15
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	fc 01       	movw	r30, r24
    2a6a:	ee 0f       	add	r30, r30
    2a6c:	ff 1f       	adc	r31, r31
    2a6e:	e1 5a       	subi	r30, 0xA1	; 161
    2a70:	f2 4f       	sbci	r31, 0xF2	; 242
    2a72:	11 83       	std	Z+1, r17	; 0x01
    2a74:	00 83       	st	Z, r16
    2a76:	01 15       	cp	r16, r1
    2a78:	11 05       	cpc	r17, r1
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <serial_create+0x4e>
    2a7c:	6c c0       	rjmp	.+216    	; 0x2b56 <serial_create+0x126>
    2a7e:	88 0f       	add	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	fc 01       	movw	r30, r24
    2a84:	e5 5f       	subi	r30, 0xF5	; 245
    2a86:	fd 4f       	sbci	r31, 0xFD	; 253
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	d8 01       	movw	r26, r16
    2a8e:	8d 93       	st	X+, r24
    2a90:	9c 93       	st	X, r25
    2a92:	8c 2d       	mov	r24, r12
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <malloc>
    2aa2:	1c 01       	movw	r2, r24
    2aa4:	86 e0       	ldi	r24, 0x06	; 6
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <malloc>
    2aac:	7c 01       	movw	r14, r24
    2aae:	4c 2d       	mov	r20, r12
    2ab0:	b1 01       	movw	r22, r2
    2ab2:	0e d7       	rcall	.+3612   	; 0x38d0 <fifo_init>
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	f5 82       	std	Z+5, r15	; 0x05
    2ab8:	e4 82       	std	Z+4, r14	; 0x04
    2aba:	8a 2d       	mov	r24, r10
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <malloc>
    2aca:	1c 01       	movw	r2, r24
    2acc:	86 e0       	ldi	r24, 0x06	; 6
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <malloc>
    2ad4:	7c 01       	movw	r14, r24
    2ad6:	4a 2d       	mov	r20, r10
    2ad8:	b1 01       	movw	r22, r2
    2ada:	fa d6       	rcall	.+3572   	; 0x38d0 <fifo_init>
    2adc:	d8 01       	movw	r26, r16
    2ade:	13 96       	adiw	r26, 0x03	; 3
    2ae0:	fc 92       	st	X, r15
    2ae2:	ee 92       	st	-X, r14
    2ae4:	12 97       	sbiw	r26, 0x02	; 2
    2ae6:	17 96       	adiw	r26, 0x07	; 7
    2ae8:	9c 92       	st	X, r9
    2aea:	8e 92       	st	-X, r8
    2aec:	16 97       	sbiw	r26, 0x06	; 6
    2aee:	ff b6       	in	r15, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	ed 91       	ld	r30, X+
    2af4:	fc 91       	ld	r31, X
    2af6:	11 97       	sbiw	r26, 0x01	; 1
    2af8:	36 97       	sbiw	r30, 0x06	; 6
    2afa:	80 81       	ld	r24, Z
    2afc:	82 60       	ori	r24, 0x02	; 2
    2afe:	80 83       	st	Z, r24
    2b00:	8d 90       	ld	r8, X+
    2b02:	9c 90       	ld	r9, X
    2b04:	c3 01       	movw	r24, r6
    2b06:	b2 01       	movw	r22, r4
    2b08:	0e 94 ed 20 	call	0x41da	; 0x41da <__floatunsisf>
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	51 e4       	ldi	r21, 0x41	; 65
    2b14:	0e 94 a7 21 	call	0x434e	; 0x434e <__mulsf3>
    2b18:	9b 01       	movw	r18, r22
    2b1a:	ac 01       	movw	r20, r24
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	74 e2       	ldi	r23, 0x24	; 36
    2b20:	84 e7       	ldi	r24, 0x74	; 116
    2b22:	9b e4       	ldi	r25, 0x4B	; 75
    2b24:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__divsf3>
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 14 20 	call	0x4028	; 0x4028 <__subsf3>
    2b34:	08 dd       	rcall	.-1520   	; 0x2546 <__fixunssfsi>
    2b36:	f4 01       	movw	r30, r8
    2b38:	32 97       	sbiw	r30, 0x02	; 2
    2b3a:	60 83       	st	Z, r22
    2b3c:	d8 01       	movw	r26, r16
    2b3e:	ed 91       	ld	r30, X+
    2b40:	fc 91       	ld	r31, X
    2b42:	11 97       	sbiw	r26, 0x01	; 1
    2b44:	35 97       	sbiw	r30, 0x05	; 5
    2b46:	88 e9       	ldi	r24, 0x98	; 152
    2b48:	80 83       	st	Z, r24
    2b4a:	ed 91       	ld	r30, X+
    2b4c:	fc 91       	ld	r31, X
    2b4e:	34 97       	sbiw	r30, 0x04	; 4
    2b50:	86 e0       	ldi	r24, 0x06	; 6
    2b52:	80 83       	st	Z, r24
    2b54:	ff be       	out	0x3f, r15	; 63
    2b56:	c8 01       	movw	r24, r16
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	ef 90       	pop	r14
    2b64:	cf 90       	pop	r12
    2b66:	af 90       	pop	r10
    2b68:	9f 90       	pop	r9
    2b6a:	8f 90       	pop	r8
    2b6c:	7f 90       	pop	r7
    2b6e:	6f 90       	pop	r6
    2b70:	5f 90       	pop	r5
    2b72:	4f 90       	pop	r4
    2b74:	3f 90       	pop	r3
    2b76:	2f 90       	pop	r2
    2b78:	08 95       	ret

00002b7a <serial_sendByte>:
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	dc 01       	movw	r26, r24
    2b80:	89 2b       	or	r24, r25
    2b82:	01 f1       	breq	.+64     	; 0x2bc4 <serial_sendByte+0x4a>
    2b84:	12 96       	adiw	r26, 0x02	; 2
    2b86:	ed 91       	ld	r30, X+
    2b88:	fc 91       	ld	r31, X
    2b8a:	13 97       	sbiw	r26, 0x03	; 3
    2b8c:	93 81       	ldd	r25, Z+3	; 0x03
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	25 81       	ldd	r18, Z+5	; 0x05
    2b92:	98 1b       	sub	r25, r24
    2b94:	92 23       	and	r25, r18
    2b96:	84 81       	ldd	r24, Z+4	; 0x04
    2b98:	98 17       	cp	r25, r24
    2b9a:	b1 f0       	breq	.+44     	; 0x2bc8 <serial_sendByte+0x4e>
    2b9c:	83 81       	ldd	r24, Z+3	; 0x03
    2b9e:	26 95       	lsr	r18
    2ba0:	28 23       	and	r18, r24
    2ba2:	c0 81       	ld	r28, Z
    2ba4:	d1 81       	ldd	r29, Z+1	; 0x01
    2ba6:	c2 0f       	add	r28, r18
    2ba8:	d1 1d       	adc	r29, r1
    2baa:	68 83       	st	Y, r22
    2bac:	8f 5f       	subi	r24, 0xFF	; 255
    2bae:	95 81       	ldd	r25, Z+5	; 0x05
    2bb0:	89 23       	and	r24, r25
    2bb2:	83 83       	std	Z+3, r24	; 0x03
    2bb4:	ed 91       	ld	r30, X+
    2bb6:	fc 91       	ld	r31, X
    2bb8:	35 97       	sbiw	r30, 0x05	; 5
    2bba:	80 81       	ld	r24, Z
    2bbc:	80 62       	ori	r24, 0x20	; 32
    2bbe:	80 83       	st	Z, r24
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	03 c0       	rjmp	.+6      	; 0x2bca <serial_sendByte+0x50>
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	01 c0       	rjmp	.+2      	; 0x2bca <serial_sendByte+0x50>
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

00002bd0 <serial_getByte>:
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	d1 f0       	breq	.+52     	; 0x2c08 <serial_getByte+0x38>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	14 96       	adiw	r26, 0x04	; 4
    2bd8:	ed 91       	ld	r30, X+
    2bda:	fc 91       	ld	r31, X
    2bdc:	15 97       	sbiw	r26, 0x05	; 5
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	82 81       	ldd	r24, Z+2	; 0x02
    2be2:	98 17       	cp	r25, r24
    2be4:	99 f0       	breq	.+38     	; 0x2c0c <serial_getByte+0x3c>
    2be6:	92 81       	ldd	r25, Z+2	; 0x02
    2be8:	85 81       	ldd	r24, Z+5	; 0x05
    2bea:	86 95       	lsr	r24
    2bec:	89 23       	and	r24, r25
    2bee:	a0 81       	ld	r26, Z
    2bf0:	b1 81       	ldd	r27, Z+1	; 0x01
    2bf2:	a8 0f       	add	r26, r24
    2bf4:	b1 1d       	adc	r27, r1
    2bf6:	8c 91       	ld	r24, X
    2bf8:	db 01       	movw	r26, r22
    2bfa:	8c 93       	st	X, r24
    2bfc:	9f 5f       	subi	r25, 0xFF	; 255
    2bfe:	85 81       	ldd	r24, Z+5	; 0x05
    2c00:	98 23       	and	r25, r24
    2c02:	92 83       	std	Z+2, r25	; 0x02
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	08 95       	ret
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	08 95       	ret
    2c0c:	83 e0       	ldi	r24, 0x03	; 3
    2c0e:	08 95       	ret

00002c10 <__vector_25>:
    2c10:	1f 92       	push	r1
    2c12:	0f 92       	push	r0
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	0f 92       	push	r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	0b b6       	in	r0, 0x3b	; 59
    2c1c:	0f 92       	push	r0
    2c1e:	2f 93       	push	r18
    2c20:	3f 93       	push	r19
    2c22:	4f 93       	push	r20
    2c24:	5f 93       	push	r21
    2c26:	6f 93       	push	r22
    2c28:	7f 93       	push	r23
    2c2a:	8f 93       	push	r24
    2c2c:	9f 93       	push	r25
    2c2e:	af 93       	push	r26
    2c30:	bf 93       	push	r27
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	ef 93       	push	r30
    2c38:	ff 93       	push	r31
    2c3a:	a0 91 5f 0d 	lds	r26, 0x0D5F	; 0x800d5f <_ser_handle>
    2c3e:	b0 91 60 0d 	lds	r27, 0x0D60	; 0x800d60 <_ser_handle+0x1>
    2c42:	10 97       	sbiw	r26, 0x00	; 0
    2c44:	11 f1       	breq	.+68     	; 0x2c8a <__vector_25+0x7a>
    2c46:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2c4a:	14 96       	adiw	r26, 0x04	; 4
    2c4c:	ed 91       	ld	r30, X+
    2c4e:	fc 91       	ld	r31, X
    2c50:	15 97       	sbiw	r26, 0x05	; 5
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	25 81       	ldd	r18, Z+5	; 0x05
    2c58:	98 1b       	sub	r25, r24
    2c5a:	92 23       	and	r25, r18
    2c5c:	84 81       	ldd	r24, Z+4	; 0x04
    2c5e:	98 17       	cp	r25, r24
    2c60:	61 f0       	breq	.+24     	; 0x2c7a <__vector_25+0x6a>
    2c62:	83 81       	ldd	r24, Z+3	; 0x03
    2c64:	26 95       	lsr	r18
    2c66:	28 23       	and	r18, r24
    2c68:	c0 81       	ld	r28, Z
    2c6a:	d1 81       	ldd	r29, Z+1	; 0x01
    2c6c:	c2 0f       	add	r28, r18
    2c6e:	d1 1d       	adc	r29, r1
    2c70:	68 83       	st	Y, r22
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
    2c74:	95 81       	ldd	r25, Z+5	; 0x05
    2c76:	89 23       	and	r24, r25
    2c78:	83 83       	std	Z+3, r24	; 0x03
    2c7a:	16 96       	adiw	r26, 0x06	; 6
    2c7c:	ed 91       	ld	r30, X+
    2c7e:	fc 91       	ld	r31, X
    2c80:	17 97       	sbiw	r26, 0x07	; 7
    2c82:	30 97       	sbiw	r30, 0x00	; 0
    2c84:	11 f0       	breq	.+4      	; 0x2c8a <__vector_25+0x7a>
    2c86:	cd 01       	movw	r24, r26
    2c88:	19 95       	eicall
    2c8a:	ff 91       	pop	r31
    2c8c:	ef 91       	pop	r30
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	bf 91       	pop	r27
    2c94:	af 91       	pop	r26
    2c96:	9f 91       	pop	r25
    2c98:	8f 91       	pop	r24
    2c9a:	7f 91       	pop	r23
    2c9c:	6f 91       	pop	r22
    2c9e:	5f 91       	pop	r21
    2ca0:	4f 91       	pop	r20
    2ca2:	3f 91       	pop	r19
    2ca4:	2f 91       	pop	r18
    2ca6:	0f 90       	pop	r0
    2ca8:	0b be       	out	0x3b, r0	; 59
    2caa:	0f 90       	pop	r0
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	0f 90       	pop	r0
    2cb0:	1f 90       	pop	r1
    2cb2:	18 95       	reti

00002cb4 <__vector_26>:
    2cb4:	1f 92       	push	r1
    2cb6:	0f 92       	push	r0
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	0f 92       	push	r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	0b b6       	in	r0, 0x3b	; 59
    2cc0:	0f 92       	push	r0
    2cc2:	2f 93       	push	r18
    2cc4:	8f 93       	push	r24
    2cc6:	9f 93       	push	r25
    2cc8:	af 93       	push	r26
    2cca:	bf 93       	push	r27
    2ccc:	ef 93       	push	r30
    2cce:	ff 93       	push	r31
    2cd0:	e0 91 5f 0d 	lds	r30, 0x0D5F	; 0x800d5f <_ser_handle>
    2cd4:	f0 91 60 0d 	lds	r31, 0x0D60	; 0x800d60 <_ser_handle+0x1>
    2cd8:	30 97       	sbiw	r30, 0x00	; 0
    2cda:	b9 f0       	breq	.+46     	; 0x2d0a <__vector_26+0x56>
    2cdc:	02 80       	ldd	r0, Z+2	; 0x02
    2cde:	f3 81       	ldd	r31, Z+3	; 0x03
    2ce0:	e0 2d       	mov	r30, r0
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	98 17       	cp	r25, r24
    2ce8:	b1 f0       	breq	.+44     	; 0x2d16 <__vector_26+0x62>
    2cea:	92 81       	ldd	r25, Z+2	; 0x02
    2cec:	85 81       	ldd	r24, Z+5	; 0x05
    2cee:	28 2f       	mov	r18, r24
    2cf0:	26 95       	lsr	r18
    2cf2:	29 23       	and	r18, r25
    2cf4:	a0 81       	ld	r26, Z
    2cf6:	b1 81       	ldd	r27, Z+1	; 0x01
    2cf8:	a2 0f       	add	r26, r18
    2cfa:	b1 1d       	adc	r27, r1
    2cfc:	2c 91       	ld	r18, X
    2cfe:	9f 5f       	subi	r25, 0xFF	; 255
    2d00:	89 23       	and	r24, r25
    2d02:	82 83       	std	Z+2, r24	; 0x02
    2d04:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2d08:	0b c0       	rjmp	.+22     	; 0x2d20 <__vector_26+0x6c>
    2d0a:	e1 ec       	ldi	r30, 0xC1	; 193
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	8f 7d       	andi	r24, 0xDF	; 223
    2d12:	80 83       	st	Z, r24
    2d14:	05 c0       	rjmp	.+10     	; 0x2d20 <__vector_26+0x6c>
    2d16:	e1 ec       	ldi	r30, 0xC1	; 193
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	8f 7d       	andi	r24, 0xDF	; 223
    2d1e:	80 83       	st	Z, r24
    2d20:	ff 91       	pop	r31
    2d22:	ef 91       	pop	r30
    2d24:	bf 91       	pop	r27
    2d26:	af 91       	pop	r26
    2d28:	9f 91       	pop	r25
    2d2a:	8f 91       	pop	r24
    2d2c:	2f 91       	pop	r18
    2d2e:	0f 90       	pop	r0
    2d30:	0b be       	out	0x3b, r0	; 59
    2d32:	0f 90       	pop	r0
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	0f 90       	pop	r0
    2d38:	1f 90       	pop	r1
    2d3a:	18 95       	reti

00002d3c <__vector_36>:
    2d3c:	1f 92       	push	r1
    2d3e:	0f 92       	push	r0
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	0f 92       	push	r0
    2d44:	11 24       	eor	r1, r1
    2d46:	0b b6       	in	r0, 0x3b	; 59
    2d48:	0f 92       	push	r0
    2d4a:	2f 93       	push	r18
    2d4c:	3f 93       	push	r19
    2d4e:	4f 93       	push	r20
    2d50:	5f 93       	push	r21
    2d52:	6f 93       	push	r22
    2d54:	7f 93       	push	r23
    2d56:	8f 93       	push	r24
    2d58:	9f 93       	push	r25
    2d5a:	af 93       	push	r26
    2d5c:	bf 93       	push	r27
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	ef 93       	push	r30
    2d64:	ff 93       	push	r31
    2d66:	a0 91 61 0d 	lds	r26, 0x0D61	; 0x800d61 <_ser_handle+0x2>
    2d6a:	b0 91 62 0d 	lds	r27, 0x0D62	; 0x800d62 <_ser_handle+0x3>
    2d6e:	10 97       	sbiw	r26, 0x00	; 0
    2d70:	11 f1       	breq	.+68     	; 0x2db6 <__vector_36+0x7a>
    2d72:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2d76:	14 96       	adiw	r26, 0x04	; 4
    2d78:	ed 91       	ld	r30, X+
    2d7a:	fc 91       	ld	r31, X
    2d7c:	15 97       	sbiw	r26, 0x05	; 5
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	82 81       	ldd	r24, Z+2	; 0x02
    2d82:	25 81       	ldd	r18, Z+5	; 0x05
    2d84:	98 1b       	sub	r25, r24
    2d86:	92 23       	and	r25, r18
    2d88:	84 81       	ldd	r24, Z+4	; 0x04
    2d8a:	98 17       	cp	r25, r24
    2d8c:	61 f0       	breq	.+24     	; 0x2da6 <__vector_36+0x6a>
    2d8e:	83 81       	ldd	r24, Z+3	; 0x03
    2d90:	26 95       	lsr	r18
    2d92:	28 23       	and	r18, r24
    2d94:	c0 81       	ld	r28, Z
    2d96:	d1 81       	ldd	r29, Z+1	; 0x01
    2d98:	c2 0f       	add	r28, r18
    2d9a:	d1 1d       	adc	r29, r1
    2d9c:	68 83       	st	Y, r22
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	95 81       	ldd	r25, Z+5	; 0x05
    2da2:	89 23       	and	r24, r25
    2da4:	83 83       	std	Z+3, r24	; 0x03
    2da6:	16 96       	adiw	r26, 0x06	; 6
    2da8:	ed 91       	ld	r30, X+
    2daa:	fc 91       	ld	r31, X
    2dac:	17 97       	sbiw	r26, 0x07	; 7
    2dae:	30 97       	sbiw	r30, 0x00	; 0
    2db0:	11 f0       	breq	.+4      	; 0x2db6 <__vector_36+0x7a>
    2db2:	cd 01       	movw	r24, r26
    2db4:	19 95       	eicall
    2db6:	ff 91       	pop	r31
    2db8:	ef 91       	pop	r30
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	bf 91       	pop	r27
    2dc0:	af 91       	pop	r26
    2dc2:	9f 91       	pop	r25
    2dc4:	8f 91       	pop	r24
    2dc6:	7f 91       	pop	r23
    2dc8:	6f 91       	pop	r22
    2dca:	5f 91       	pop	r21
    2dcc:	4f 91       	pop	r20
    2dce:	3f 91       	pop	r19
    2dd0:	2f 91       	pop	r18
    2dd2:	0f 90       	pop	r0
    2dd4:	0b be       	out	0x3b, r0	; 59
    2dd6:	0f 90       	pop	r0
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	0f 90       	pop	r0
    2ddc:	1f 90       	pop	r1
    2dde:	18 95       	reti

00002de0 <__vector_37>:
    2de0:	1f 92       	push	r1
    2de2:	0f 92       	push	r0
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	0f 92       	push	r0
    2de8:	11 24       	eor	r1, r1
    2dea:	0b b6       	in	r0, 0x3b	; 59
    2dec:	0f 92       	push	r0
    2dee:	2f 93       	push	r18
    2df0:	8f 93       	push	r24
    2df2:	9f 93       	push	r25
    2df4:	af 93       	push	r26
    2df6:	bf 93       	push	r27
    2df8:	ef 93       	push	r30
    2dfa:	ff 93       	push	r31
    2dfc:	e0 91 61 0d 	lds	r30, 0x0D61	; 0x800d61 <_ser_handle+0x2>
    2e00:	f0 91 62 0d 	lds	r31, 0x0D62	; 0x800d62 <_ser_handle+0x3>
    2e04:	30 97       	sbiw	r30, 0x00	; 0
    2e06:	b9 f0       	breq	.+46     	; 0x2e36 <__vector_37+0x56>
    2e08:	02 80       	ldd	r0, Z+2	; 0x02
    2e0a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e0c:	e0 2d       	mov	r30, r0
    2e0e:	93 81       	ldd	r25, Z+3	; 0x03
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	98 17       	cp	r25, r24
    2e14:	b1 f0       	breq	.+44     	; 0x2e42 <__vector_37+0x62>
    2e16:	92 81       	ldd	r25, Z+2	; 0x02
    2e18:	85 81       	ldd	r24, Z+5	; 0x05
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	26 95       	lsr	r18
    2e1e:	29 23       	and	r18, r25
    2e20:	a0 81       	ld	r26, Z
    2e22:	b1 81       	ldd	r27, Z+1	; 0x01
    2e24:	a2 0f       	add	r26, r18
    2e26:	b1 1d       	adc	r27, r1
    2e28:	2c 91       	ld	r18, X
    2e2a:	9f 5f       	subi	r25, 0xFF	; 255
    2e2c:	89 23       	and	r24, r25
    2e2e:	82 83       	std	Z+2, r24	; 0x02
    2e30:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2e34:	0b c0       	rjmp	.+22     	; 0x2e4c <__vector_37+0x6c>
    2e36:	e9 ec       	ldi	r30, 0xC9	; 201
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	8f 7d       	andi	r24, 0xDF	; 223
    2e3e:	80 83       	st	Z, r24
    2e40:	05 c0       	rjmp	.+10     	; 0x2e4c <__vector_37+0x6c>
    2e42:	e9 ec       	ldi	r30, 0xC9	; 201
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	8f 7d       	andi	r24, 0xDF	; 223
    2e4a:	80 83       	st	Z, r24
    2e4c:	ff 91       	pop	r31
    2e4e:	ef 91       	pop	r30
    2e50:	bf 91       	pop	r27
    2e52:	af 91       	pop	r26
    2e54:	9f 91       	pop	r25
    2e56:	8f 91       	pop	r24
    2e58:	2f 91       	pop	r18
    2e5a:	0f 90       	pop	r0
    2e5c:	0b be       	out	0x3b, r0	; 59
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	0f 90       	pop	r0
    2e64:	1f 90       	pop	r1
    2e66:	18 95       	reti

00002e68 <__vector_51>:
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	0b b6       	in	r0, 0x3b	; 59
    2e74:	0f 92       	push	r0
    2e76:	2f 93       	push	r18
    2e78:	3f 93       	push	r19
    2e7a:	4f 93       	push	r20
    2e7c:	5f 93       	push	r21
    2e7e:	6f 93       	push	r22
    2e80:	7f 93       	push	r23
    2e82:	8f 93       	push	r24
    2e84:	9f 93       	push	r25
    2e86:	af 93       	push	r26
    2e88:	bf 93       	push	r27
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	ef 93       	push	r30
    2e90:	ff 93       	push	r31
    2e92:	a0 91 63 0d 	lds	r26, 0x0D63	; 0x800d63 <_ser_handle+0x4>
    2e96:	b0 91 64 0d 	lds	r27, 0x0D64	; 0x800d64 <_ser_handle+0x5>
    2e9a:	10 97       	sbiw	r26, 0x00	; 0
    2e9c:	11 f1       	breq	.+68     	; 0x2ee2 <__vector_51+0x7a>
    2e9e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2ea2:	14 96       	adiw	r26, 0x04	; 4
    2ea4:	ed 91       	ld	r30, X+
    2ea6:	fc 91       	ld	r31, X
    2ea8:	15 97       	sbiw	r26, 0x05	; 5
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	25 81       	ldd	r18, Z+5	; 0x05
    2eb0:	98 1b       	sub	r25, r24
    2eb2:	92 23       	and	r25, r18
    2eb4:	84 81       	ldd	r24, Z+4	; 0x04
    2eb6:	98 17       	cp	r25, r24
    2eb8:	61 f0       	breq	.+24     	; 0x2ed2 <__vector_51+0x6a>
    2eba:	83 81       	ldd	r24, Z+3	; 0x03
    2ebc:	26 95       	lsr	r18
    2ebe:	28 23       	and	r18, r24
    2ec0:	c0 81       	ld	r28, Z
    2ec2:	d1 81       	ldd	r29, Z+1	; 0x01
    2ec4:	c2 0f       	add	r28, r18
    2ec6:	d1 1d       	adc	r29, r1
    2ec8:	68 83       	st	Y, r22
    2eca:	8f 5f       	subi	r24, 0xFF	; 255
    2ecc:	95 81       	ldd	r25, Z+5	; 0x05
    2ece:	89 23       	and	r24, r25
    2ed0:	83 83       	std	Z+3, r24	; 0x03
    2ed2:	16 96       	adiw	r26, 0x06	; 6
    2ed4:	ed 91       	ld	r30, X+
    2ed6:	fc 91       	ld	r31, X
    2ed8:	17 97       	sbiw	r26, 0x07	; 7
    2eda:	30 97       	sbiw	r30, 0x00	; 0
    2edc:	11 f0       	breq	.+4      	; 0x2ee2 <__vector_51+0x7a>
    2ede:	cd 01       	movw	r24, r26
    2ee0:	19 95       	eicall
    2ee2:	ff 91       	pop	r31
    2ee4:	ef 91       	pop	r30
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	bf 91       	pop	r27
    2eec:	af 91       	pop	r26
    2eee:	9f 91       	pop	r25
    2ef0:	8f 91       	pop	r24
    2ef2:	7f 91       	pop	r23
    2ef4:	6f 91       	pop	r22
    2ef6:	5f 91       	pop	r21
    2ef8:	4f 91       	pop	r20
    2efa:	3f 91       	pop	r19
    2efc:	2f 91       	pop	r18
    2efe:	0f 90       	pop	r0
    2f00:	0b be       	out	0x3b, r0	; 59
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	0f 90       	pop	r0
    2f08:	1f 90       	pop	r1
    2f0a:	18 95       	reti

00002f0c <__vector_52>:
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	0b b6       	in	r0, 0x3b	; 59
    2f18:	0f 92       	push	r0
    2f1a:	2f 93       	push	r18
    2f1c:	8f 93       	push	r24
    2f1e:	9f 93       	push	r25
    2f20:	af 93       	push	r26
    2f22:	bf 93       	push	r27
    2f24:	ef 93       	push	r30
    2f26:	ff 93       	push	r31
    2f28:	e0 91 63 0d 	lds	r30, 0x0D63	; 0x800d63 <_ser_handle+0x4>
    2f2c:	f0 91 64 0d 	lds	r31, 0x0D64	; 0x800d64 <_ser_handle+0x5>
    2f30:	30 97       	sbiw	r30, 0x00	; 0
    2f32:	b9 f0       	breq	.+46     	; 0x2f62 <__vector_52+0x56>
    2f34:	02 80       	ldd	r0, Z+2	; 0x02
    2f36:	f3 81       	ldd	r31, Z+3	; 0x03
    2f38:	e0 2d       	mov	r30, r0
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	98 17       	cp	r25, r24
    2f40:	b1 f0       	breq	.+44     	; 0x2f6e <__vector_52+0x62>
    2f42:	92 81       	ldd	r25, Z+2	; 0x02
    2f44:	85 81       	ldd	r24, Z+5	; 0x05
    2f46:	28 2f       	mov	r18, r24
    2f48:	26 95       	lsr	r18
    2f4a:	29 23       	and	r18, r25
    2f4c:	a0 81       	ld	r26, Z
    2f4e:	b1 81       	ldd	r27, Z+1	; 0x01
    2f50:	a2 0f       	add	r26, r18
    2f52:	b1 1d       	adc	r27, r1
    2f54:	2c 91       	ld	r18, X
    2f56:	9f 5f       	subi	r25, 0xFF	; 255
    2f58:	89 23       	and	r24, r25
    2f5a:	82 83       	std	Z+2, r24	; 0x02
    2f5c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2f60:	0b c0       	rjmp	.+22     	; 0x2f78 <__vector_52+0x6c>
    2f62:	e1 ed       	ldi	r30, 0xD1	; 209
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	8f 7d       	andi	r24, 0xDF	; 223
    2f6a:	80 83       	st	Z, r24
    2f6c:	05 c0       	rjmp	.+10     	; 0x2f78 <__vector_52+0x6c>
    2f6e:	e1 ed       	ldi	r30, 0xD1	; 209
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	8f 7d       	andi	r24, 0xDF	; 223
    2f76:	80 83       	st	Z, r24
    2f78:	ff 91       	pop	r31
    2f7a:	ef 91       	pop	r30
    2f7c:	bf 91       	pop	r27
    2f7e:	af 91       	pop	r26
    2f80:	9f 91       	pop	r25
    2f82:	8f 91       	pop	r24
    2f84:	2f 91       	pop	r18
    2f86:	0f 90       	pop	r0
    2f88:	0b be       	out	0x3b, r0	; 59
    2f8a:	0f 90       	pop	r0
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	0f 90       	pop	r0
    2f90:	1f 90       	pop	r1
    2f92:	18 95       	reti

00002f94 <__vector_54>:
    2f94:	1f 92       	push	r1
    2f96:	0f 92       	push	r0
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	0f 92       	push	r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	0b b6       	in	r0, 0x3b	; 59
    2fa0:	0f 92       	push	r0
    2fa2:	2f 93       	push	r18
    2fa4:	3f 93       	push	r19
    2fa6:	4f 93       	push	r20
    2fa8:	5f 93       	push	r21
    2faa:	6f 93       	push	r22
    2fac:	7f 93       	push	r23
    2fae:	8f 93       	push	r24
    2fb0:	9f 93       	push	r25
    2fb2:	af 93       	push	r26
    2fb4:	bf 93       	push	r27
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
    2fba:	ef 93       	push	r30
    2fbc:	ff 93       	push	r31
    2fbe:	a0 91 65 0d 	lds	r26, 0x0D65	; 0x800d65 <_ser_handle+0x6>
    2fc2:	b0 91 66 0d 	lds	r27, 0x0D66	; 0x800d66 <_ser_handle+0x7>
    2fc6:	10 97       	sbiw	r26, 0x00	; 0
    2fc8:	11 f1       	breq	.+68     	; 0x300e <__vector_54+0x7a>
    2fca:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2fce:	14 96       	adiw	r26, 0x04	; 4
    2fd0:	ed 91       	ld	r30, X+
    2fd2:	fc 91       	ld	r31, X
    2fd4:	15 97       	sbiw	r26, 0x05	; 5
    2fd6:	93 81       	ldd	r25, Z+3	; 0x03
    2fd8:	82 81       	ldd	r24, Z+2	; 0x02
    2fda:	25 81       	ldd	r18, Z+5	; 0x05
    2fdc:	98 1b       	sub	r25, r24
    2fde:	92 23       	and	r25, r18
    2fe0:	84 81       	ldd	r24, Z+4	; 0x04
    2fe2:	98 17       	cp	r25, r24
    2fe4:	61 f0       	breq	.+24     	; 0x2ffe <__vector_54+0x6a>
    2fe6:	83 81       	ldd	r24, Z+3	; 0x03
    2fe8:	26 95       	lsr	r18
    2fea:	28 23       	and	r18, r24
    2fec:	c0 81       	ld	r28, Z
    2fee:	d1 81       	ldd	r29, Z+1	; 0x01
    2ff0:	c2 0f       	add	r28, r18
    2ff2:	d1 1d       	adc	r29, r1
    2ff4:	68 83       	st	Y, r22
    2ff6:	8f 5f       	subi	r24, 0xFF	; 255
    2ff8:	95 81       	ldd	r25, Z+5	; 0x05
    2ffa:	89 23       	and	r24, r25
    2ffc:	83 83       	std	Z+3, r24	; 0x03
    2ffe:	16 96       	adiw	r26, 0x06	; 6
    3000:	ed 91       	ld	r30, X+
    3002:	fc 91       	ld	r31, X
    3004:	17 97       	sbiw	r26, 0x07	; 7
    3006:	30 97       	sbiw	r30, 0x00	; 0
    3008:	11 f0       	breq	.+4      	; 0x300e <__vector_54+0x7a>
    300a:	cd 01       	movw	r24, r26
    300c:	19 95       	eicall
    300e:	ff 91       	pop	r31
    3010:	ef 91       	pop	r30
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	bf 91       	pop	r27
    3018:	af 91       	pop	r26
    301a:	9f 91       	pop	r25
    301c:	8f 91       	pop	r24
    301e:	7f 91       	pop	r23
    3020:	6f 91       	pop	r22
    3022:	5f 91       	pop	r21
    3024:	4f 91       	pop	r20
    3026:	3f 91       	pop	r19
    3028:	2f 91       	pop	r18
    302a:	0f 90       	pop	r0
    302c:	0b be       	out	0x3b, r0	; 59
    302e:	0f 90       	pop	r0
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	0f 90       	pop	r0
    3034:	1f 90       	pop	r1
    3036:	18 95       	reti

00003038 <__vector_55>:
    3038:	1f 92       	push	r1
    303a:	0f 92       	push	r0
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	0f 92       	push	r0
    3040:	11 24       	eor	r1, r1
    3042:	0b b6       	in	r0, 0x3b	; 59
    3044:	0f 92       	push	r0
    3046:	2f 93       	push	r18
    3048:	8f 93       	push	r24
    304a:	9f 93       	push	r25
    304c:	af 93       	push	r26
    304e:	bf 93       	push	r27
    3050:	ef 93       	push	r30
    3052:	ff 93       	push	r31
    3054:	e0 91 65 0d 	lds	r30, 0x0D65	; 0x800d65 <_ser_handle+0x6>
    3058:	f0 91 66 0d 	lds	r31, 0x0D66	; 0x800d66 <_ser_handle+0x7>
    305c:	30 97       	sbiw	r30, 0x00	; 0
    305e:	b9 f0       	breq	.+46     	; 0x308e <__vector_55+0x56>
    3060:	02 80       	ldd	r0, Z+2	; 0x02
    3062:	f3 81       	ldd	r31, Z+3	; 0x03
    3064:	e0 2d       	mov	r30, r0
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	98 17       	cp	r25, r24
    306c:	b1 f0       	breq	.+44     	; 0x309a <__vector_55+0x62>
    306e:	92 81       	ldd	r25, Z+2	; 0x02
    3070:	85 81       	ldd	r24, Z+5	; 0x05
    3072:	28 2f       	mov	r18, r24
    3074:	26 95       	lsr	r18
    3076:	29 23       	and	r18, r25
    3078:	a0 81       	ld	r26, Z
    307a:	b1 81       	ldd	r27, Z+1	; 0x01
    307c:	a2 0f       	add	r26, r18
    307e:	b1 1d       	adc	r27, r1
    3080:	2c 91       	ld	r18, X
    3082:	9f 5f       	subi	r25, 0xFF	; 255
    3084:	89 23       	and	r24, r25
    3086:	82 83       	std	Z+2, r24	; 0x02
    3088:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    308c:	0b c0       	rjmp	.+22     	; 0x30a4 <__vector_55+0x6c>
    308e:	e1 e3       	ldi	r30, 0x31	; 49
    3090:	f1 e0       	ldi	r31, 0x01	; 1
    3092:	80 81       	ld	r24, Z
    3094:	8f 7d       	andi	r24, 0xDF	; 223
    3096:	80 83       	st	Z, r24
    3098:	05 c0       	rjmp	.+10     	; 0x30a4 <__vector_55+0x6c>
    309a:	e1 e3       	ldi	r30, 0x31	; 49
    309c:	f1 e0       	ldi	r31, 0x01	; 1
    309e:	80 81       	ld	r24, Z
    30a0:	8f 7d       	andi	r24, 0xDF	; 223
    30a2:	80 83       	st	Z, r24
    30a4:	ff 91       	pop	r31
    30a6:	ef 91       	pop	r30
    30a8:	bf 91       	pop	r27
    30aa:	af 91       	pop	r26
    30ac:	9f 91       	pop	r25
    30ae:	8f 91       	pop	r24
    30b0:	2f 91       	pop	r18
    30b2:	0f 90       	pop	r0
    30b4:	0b be       	out	0x3b, r0	; 59
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	0f 90       	pop	r0
    30bc:	1f 90       	pop	r1
    30be:	18 95       	reti

000030c0 <usart_getchar>:
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	1f 92       	push	r1
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	be 01       	movw	r22, r28
    30cc:	6f 5f       	subi	r22, 0xFF	; 255
    30ce:	7f 4f       	sbci	r23, 0xFF	; 255
    30d0:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <_com_serial_instance>
    30d4:	90 91 68 0d 	lds	r25, 0x0D68	; 0x800d68 <_com_serial_instance+0x1>
    30d8:	7b dd       	rcall	.-1290   	; 0x2bd0 <serial_getByte>
    30da:	81 11       	cpse	r24, r1
    30dc:	f6 cf       	rjmp	.-20     	; 0x30ca <usart_getchar+0xa>
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	0f 90       	pop	r0
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	08 95       	ret

000030ea <usart_putchar>:
    30ea:	68 2f       	mov	r22, r24
    30ec:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <_com_serial_instance>
    30f0:	90 91 68 0d 	lds	r25, 0x0D68	; 0x800d68 <_com_serial_instance+0x1>
    30f4:	42 dd       	rcall	.-1404   	; 0x2b7a <serial_sendByte>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	08 95       	ret

000030fc <stdio_initialise>:
    30fc:	8f 92       	push	r8
    30fe:	9f 92       	push	r9
    3100:	af 92       	push	r10
    3102:	cf 92       	push	r12
    3104:	ef 92       	push	r14
    3106:	0f 93       	push	r16
    3108:	81 2c       	mov	r8, r1
    310a:	91 2c       	mov	r9, r1
    310c:	68 94       	set
    310e:	aa 24       	eor	r10, r10
    3110:	a7 f8       	bld	r10, 7
    3112:	68 94       	set
    3114:	cc 24       	eor	r12, r12
    3116:	c7 f8       	bld	r12, 7
    3118:	e1 2c       	mov	r14, r1
    311a:	00 e0       	ldi	r16, 0x00	; 0
    311c:	23 e0       	ldi	r18, 0x03	; 3
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	51 ee       	ldi	r21, 0xE1	; 225
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	70 e0       	ldi	r23, 0x00	; 0
    3126:	84 dc       	rcall	.-1784   	; 0x2a30 <serial_create>
    3128:	90 93 68 0d 	sts	0x0D68, r25	; 0x800d68 <_com_serial_instance+0x1>
    312c:	80 93 67 0d 	sts	0x0D67, r24	; 0x800d67 <_com_serial_instance>
    3130:	e2 e8       	ldi	r30, 0x82	; 130
    3132:	fd e0       	ldi	r31, 0x0D	; 13
    3134:	83 e1       	ldi	r24, 0x13	; 19
    3136:	92 e0       	ldi	r25, 0x02	; 2
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
    313c:	93 83       	std	Z+3, r25	; 0x03
    313e:	82 83       	std	Z+2, r24	; 0x02
    3140:	0f 91       	pop	r16
    3142:	ef 90       	pop	r14
    3144:	cf 90       	pop	r12
    3146:	af 90       	pop	r10
    3148:	9f 90       	pop	r9
    314a:	8f 90       	pop	r8
    314c:	08 95       	ret

0000314e <_select_instance>:
    314e:	e0 91 6a 0d 	lds	r30, 0x0D6A	; 0x800d6a <_this>
    3152:	f0 91 6b 0d 	lds	r31, 0x0D6B	; 0x800d6b <_this+0x1>
    3156:	30 97       	sbiw	r30, 0x00	; 0
    3158:	f9 f0       	breq	.+62     	; 0x3198 <_select_instance+0x4a>
    315a:	a0 81       	ld	r26, Z
    315c:	b1 81       	ldd	r27, Z+1	; 0x01
    315e:	10 97       	sbiw	r26, 0x00	; 0
    3160:	d9 f0       	breq	.+54     	; 0x3198 <_select_instance+0x4a>
    3162:	23 81       	ldd	r18, Z+3	; 0x03
    3164:	21 30       	cpi	r18, 0x01	; 1
    3166:	69 f4       	brne	.+26     	; 0x3182 <_select_instance+0x34>
    3168:	4c 91       	ld	r20, X
    316a:	21 e0       	ldi	r18, 0x01	; 1
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	02 80       	ldd	r0, Z+2	; 0x02
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <_select_instance+0x28>
    3172:	22 0f       	add	r18, r18
    3174:	33 1f       	adc	r19, r19
    3176:	0a 94       	dec	r0
    3178:	e2 f7       	brpl	.-8      	; 0x3172 <_select_instance+0x24>
    317a:	20 95       	com	r18
    317c:	24 23       	and	r18, r20
    317e:	2c 93       	st	X, r18
    3180:	0b c0       	rjmp	.+22     	; 0x3198 <_select_instance+0x4a>
    3182:	4c 91       	ld	r20, X
    3184:	21 e0       	ldi	r18, 0x01	; 1
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	02 80       	ldd	r0, Z+2	; 0x02
    318a:	02 c0       	rjmp	.+4      	; 0x3190 <_select_instance+0x42>
    318c:	22 0f       	add	r18, r18
    318e:	33 1f       	adc	r19, r19
    3190:	0a 94       	dec	r0
    3192:	e2 f7       	brpl	.-8      	; 0x318c <_select_instance+0x3e>
    3194:	24 2b       	or	r18, r20
    3196:	2c 93       	st	X, r18
    3198:	90 93 6b 0d 	sts	0x0D6B, r25	; 0x800d6b <_this+0x1>
    319c:	80 93 6a 0d 	sts	0x0D6A, r24	; 0x800d6a <_this>
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	69 f0       	breq	.+26     	; 0x31be <_select_instance+0x70>
    31a4:	10 92 6c 0d 	sts	0x0D6C, r1	; 0x800d6c <_spi_active>
    31a8:	2c b5       	in	r18, 0x2c	; 44
    31aa:	2f 73       	andi	r18, 0x3F	; 63
    31ac:	2c bd       	out	0x2c, r18	; 44
    31ae:	fc 01       	movw	r30, r24
    31b0:	24 81       	ldd	r18, Z+4	; 0x04
    31b2:	2c bd       	out	0x2c, r18	; 44
    31b4:	85 81       	ldd	r24, Z+5	; 0x05
    31b6:	8d bd       	out	0x2d, r24	; 45
    31b8:	8c b5       	in	r24, 0x2c	; 44
    31ba:	80 64       	ori	r24, 0x40	; 64
    31bc:	8c bd       	out	0x2c, r24	; 44
    31be:	08 95       	ret

000031c0 <spi_create>:
    31c0:	4f 92       	push	r4
    31c2:	5f 92       	push	r5
    31c4:	6f 92       	push	r6
    31c6:	7f 92       	push	r7
    31c8:	8f 92       	push	r8
    31ca:	9f 92       	push	r9
    31cc:	af 92       	push	r10
    31ce:	bf 92       	push	r11
    31d0:	cf 92       	push	r12
    31d2:	df 92       	push	r13
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	0f 93       	push	r16
    31da:	1f 93       	push	r17
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	98 2e       	mov	r9, r24
    31e6:	b6 2e       	mov	r11, r22
    31e8:	d4 2e       	mov	r13, r20
    31ea:	f2 2e       	mov	r15, r18
    31ec:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <_initialised>
    31f0:	81 11       	cpse	r24, r1
    31f2:	06 c0       	rjmp	.+12     	; 0x3200 <spi_create+0x40>
    31f4:	84 b1       	in	r24, 0x04	; 4
    31f6:	87 60       	ori	r24, 0x07	; 7
    31f8:	84 b9       	out	0x04, r24	; 4
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	80 93 69 0d 	sts	0x0D69, r24	; 0x800d69 <_initialised>
    3200:	8c e0       	ldi	r24, 0x0C	; 12
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <malloc>
    3208:	3c 01       	movw	r6, r24
    320a:	dc 01       	movw	r26, r24
    320c:	11 96       	adiw	r26, 0x01	; 1
    320e:	1c 93       	st	X, r17
    3210:	0e 93       	st	-X, r16
    3212:	12 96       	adiw	r26, 0x02	; 2
    3214:	ec 92       	st	X, r14
    3216:	12 97       	sbiw	r26, 0x02	; 2
    3218:	13 96       	adiw	r26, 0x03	; 3
    321a:	cc 92       	st	X, r12
    321c:	13 97       	sbiw	r26, 0x03	; 3
    321e:	8d 2d       	mov	r24, r13
    3220:	88 0f       	add	r24, r24
    3222:	88 0f       	add	r24, r24
    3224:	f8 2a       	or	r15, r24
    3226:	eb 2d       	mov	r30, r11
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	e5 59       	subi	r30, 0x95	; 149
    322c:	fd 4f       	sbci	r31, 0xFD	; 253
    322e:	80 81       	ld	r24, Z
    3230:	98 2a       	or	r9, r24
    3232:	8f 2d       	mov	r24, r15
    3234:	89 29       	or	r24, r9
    3236:	14 96       	adiw	r26, 0x04	; 4
    3238:	8c 93       	st	X, r24
    323a:	b3 e0       	ldi	r27, 0x03	; 3
    323c:	bb 15       	cp	r27, r11
    323e:	18 f4       	brcc	.+6      	; 0x3246 <spi_create+0x86>
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	f3 01       	movw	r30, r6
    3244:	85 83       	std	Z+5, r24	; 0x05
    3246:	a1 10       	cpse	r10, r1
    3248:	06 c0       	rjmp	.+12     	; 0x3256 <spi_create+0x96>
    324a:	d3 01       	movw	r26, r6
    324c:	19 96       	adiw	r26, 0x09	; 9
    324e:	1c 92       	st	X, r1
    3250:	1e 92       	st	-X, r1
    3252:	18 97       	sbiw	r26, 0x08	; 8
    3254:	14 c0       	rjmp	.+40     	; 0x327e <spi_create+0xbe>
    3256:	6a 2d       	mov	r22, r10
    3258:	70 e0       	ldi	r23, 0x00	; 0
    325a:	84 e0       	ldi	r24, 0x04	; 4
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	0e 94 ba 23 	call	0x4774	; 0x4774 <calloc>
    3262:	2c 01       	movw	r4, r24
    3264:	61 e0       	ldi	r22, 0x01	; 1
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	86 e0       	ldi	r24, 0x06	; 6
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	0e 94 ba 23 	call	0x4774	; 0x4774 <calloc>
    3270:	6c 01       	movw	r12, r24
    3272:	4a 2d       	mov	r20, r10
    3274:	b2 01       	movw	r22, r4
    3276:	2c d3       	rcall	.+1624   	; 0x38d0 <fifo_init>
    3278:	f3 01       	movw	r30, r6
    327a:	d1 86       	std	Z+9, r13	; 0x09
    327c:	c0 86       	std	Z+8, r12	; 0x08
    327e:	81 10       	cpse	r8, r1
    3280:	06 c0       	rjmp	.+12     	; 0x328e <spi_create+0xce>
    3282:	d3 01       	movw	r26, r6
    3284:	17 96       	adiw	r26, 0x07	; 7
    3286:	1c 92       	st	X, r1
    3288:	1e 92       	st	-X, r1
    328a:	16 97       	sbiw	r26, 0x06	; 6
    328c:	14 c0       	rjmp	.+40     	; 0x32b6 <spi_create+0xf6>
    328e:	68 2d       	mov	r22, r8
    3290:	70 e0       	ldi	r23, 0x00	; 0
    3292:	84 e0       	ldi	r24, 0x04	; 4
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 ba 23 	call	0x4774	; 0x4774 <calloc>
    329a:	5c 01       	movw	r10, r24
    329c:	61 e0       	ldi	r22, 0x01	; 1
    329e:	70 e0       	ldi	r23, 0x00	; 0
    32a0:	86 e0       	ldi	r24, 0x06	; 6
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 ba 23 	call	0x4774	; 0x4774 <calloc>
    32a8:	6c 01       	movw	r12, r24
    32aa:	48 2d       	mov	r20, r8
    32ac:	b5 01       	movw	r22, r10
    32ae:	10 d3       	rcall	.+1568   	; 0x38d0 <fifo_init>
    32b0:	f3 01       	movw	r30, r6
    32b2:	d7 82       	std	Z+7, r13	; 0x07
    32b4:	c6 82       	std	Z+6, r12	; 0x06
    32b6:	8c 89       	ldd	r24, Y+20	; 0x14
    32b8:	9d 89       	ldd	r25, Y+21	; 0x15
    32ba:	d3 01       	movw	r26, r6
    32bc:	1b 96       	adiw	r26, 0x0b	; 11
    32be:	9c 93       	st	X, r25
    32c0:	8e 93       	st	-X, r24
    32c2:	1a 97       	sbiw	r26, 0x0a	; 10
    32c4:	01 15       	cp	r16, r1
    32c6:	11 05       	cpc	r17, r1
    32c8:	59 f0       	breq	.+22     	; 0x32e0 <spi_create+0x120>
    32ca:	f8 01       	movw	r30, r16
    32cc:	22 91       	ld	r18, -Z
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <spi_create+0x118>
    32d4:	88 0f       	add	r24, r24
    32d6:	99 1f       	adc	r25, r25
    32d8:	ea 94       	dec	r14
    32da:	e2 f7       	brpl	.-8      	; 0x32d4 <spi_create+0x114>
    32dc:	82 2b       	or	r24, r18
    32de:	80 83       	st	Z, r24
    32e0:	2f b7       	in	r18, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	40 91 6a 0d 	lds	r20, 0x0D6A	; 0x800d6a <_this>
    32e8:	50 91 6b 0d 	lds	r21, 0x0D6B	; 0x800d6b <_this+0x1>
    32ec:	70 92 6b 0d 	sts	0x0D6B, r7	; 0x800d6b <_this+0x1>
    32f0:	60 92 6a 0d 	sts	0x0D6A, r6	; 0x800d6a <_this>
    32f4:	d3 01       	movw	r26, r6
    32f6:	ed 91       	ld	r30, X+
    32f8:	fc 91       	ld	r31, X
    32fa:	11 97       	sbiw	r26, 0x01	; 1
    32fc:	30 97       	sbiw	r30, 0x00	; 0
    32fe:	01 f1       	breq	.+64     	; 0x3340 <spi_create+0x180>
    3300:	13 96       	adiw	r26, 0x03	; 3
    3302:	8c 91       	ld	r24, X
    3304:	13 97       	sbiw	r26, 0x03	; 3
    3306:	81 30       	cpi	r24, 0x01	; 1
    3308:	71 f4       	brne	.+28     	; 0x3326 <spi_create+0x166>
    330a:	30 81       	ld	r19, Z
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	12 96       	adiw	r26, 0x02	; 2
    3312:	0c 90       	ld	r0, X
    3314:	02 c0       	rjmp	.+4      	; 0x331a <spi_create+0x15a>
    3316:	88 0f       	add	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	0a 94       	dec	r0
    331c:	e2 f7       	brpl	.-8      	; 0x3316 <spi_create+0x156>
    331e:	80 95       	com	r24
    3320:	83 23       	and	r24, r19
    3322:	80 83       	st	Z, r24
    3324:	0d c0       	rjmp	.+26     	; 0x3340 <spi_create+0x180>
    3326:	30 81       	ld	r19, Z
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	d3 01       	movw	r26, r6
    332e:	12 96       	adiw	r26, 0x02	; 2
    3330:	0c 90       	ld	r0, X
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <spi_create+0x178>
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	0a 94       	dec	r0
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <spi_create+0x174>
    333c:	83 2b       	or	r24, r19
    333e:	80 83       	st	Z, r24
    3340:	50 93 6b 0d 	sts	0x0D6B, r21	; 0x800d6b <_this+0x1>
    3344:	40 93 6a 0d 	sts	0x0D6A, r20	; 0x800d6a <_this>
    3348:	2f bf       	out	0x3f, r18	; 63
    334a:	c3 01       	movw	r24, r6
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	ff 90       	pop	r15
    3356:	ef 90       	pop	r14
    3358:	df 90       	pop	r13
    335a:	cf 90       	pop	r12
    335c:	bf 90       	pop	r11
    335e:	af 90       	pop	r10
    3360:	9f 90       	pop	r9
    3362:	8f 90       	pop	r8
    3364:	7f 90       	pop	r7
    3366:	6f 90       	pop	r6
    3368:	5f 90       	pop	r5
    336a:	4f 90       	pop	r4
    336c:	08 95       	ret

0000336e <spi_sendByte>:
    336e:	1f 93       	push	r17
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	09 f4       	brne	.+2      	; 0x337a <spi_sendByte+0xc>
    3378:	6a c0       	rjmp	.+212    	; 0x344e <spi_sendByte+0xe0>
    337a:	16 2f       	mov	r17, r22
    337c:	ec 01       	movw	r28, r24
    337e:	80 91 6a 0d 	lds	r24, 0x0D6A	; 0x800d6a <_this>
    3382:	90 91 6b 0d 	lds	r25, 0x0D6B	; 0x800d6b <_this+0x1>
    3386:	c8 17       	cp	r28, r24
    3388:	d9 07       	cpc	r29, r25
    338a:	11 f0       	breq	.+4      	; 0x3390 <spi_sendByte+0x22>
    338c:	ce 01       	movw	r24, r28
    338e:	df de       	rcall	.-578    	; 0x314e <_select_instance>
    3390:	8f b7       	in	r24, 0x3f	; 63
    3392:	2f b7       	in	r18, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	80 91 6c 0d 	lds	r24, 0x0D6C	; 0x800d6c <_spi_active>
    339a:	81 11       	cpse	r24, r1
    339c:	31 c0       	rjmp	.+98     	; 0x3400 <spi_sendByte+0x92>
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	80 93 6c 0d 	sts	0x0D6C, r24	; 0x800d6c <_spi_active>
    33a4:	a0 91 6a 0d 	lds	r26, 0x0D6A	; 0x800d6a <_this>
    33a8:	b0 91 6b 0d 	lds	r27, 0x0D6B	; 0x800d6b <_this+0x1>
    33ac:	ed 91       	ld	r30, X+
    33ae:	fc 91       	ld	r31, X
    33b0:	11 97       	sbiw	r26, 0x01	; 1
    33b2:	30 97       	sbiw	r30, 0x00	; 0
    33b4:	f9 f0       	breq	.+62     	; 0x33f4 <spi_sendByte+0x86>
    33b6:	13 96       	adiw	r26, 0x03	; 3
    33b8:	8c 91       	ld	r24, X
    33ba:	13 97       	sbiw	r26, 0x03	; 3
    33bc:	81 30       	cpi	r24, 0x01	; 1
    33be:	69 f4       	brne	.+26     	; 0x33da <spi_sendByte+0x6c>
    33c0:	30 81       	ld	r19, Z
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	12 96       	adiw	r26, 0x02	; 2
    33c8:	0c 90       	ld	r0, X
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <spi_sendByte+0x62>
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	0a 94       	dec	r0
    33d2:	e2 f7       	brpl	.-8      	; 0x33cc <spi_sendByte+0x5e>
    33d4:	83 2b       	or	r24, r19
    33d6:	80 83       	st	Z, r24
    33d8:	0d c0       	rjmp	.+26     	; 0x33f4 <spi_sendByte+0x86>
    33da:	30 81       	ld	r19, Z
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	12 96       	adiw	r26, 0x02	; 2
    33e2:	0c 90       	ld	r0, X
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <spi_sendByte+0x7c>
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	0a 94       	dec	r0
    33ec:	e2 f7       	brpl	.-8      	; 0x33e6 <spi_sendByte+0x78>
    33ee:	80 95       	com	r24
    33f0:	83 23       	and	r24, r19
    33f2:	80 83       	st	Z, r24
    33f4:	8c b5       	in	r24, 0x2c	; 44
    33f6:	80 68       	ori	r24, 0x80	; 128
    33f8:	8c bd       	out	0x2c, r24	; 44
    33fa:	1e bd       	out	0x2e, r17	; 46
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	25 c0       	rjmp	.+74     	; 0x344a <spi_sendByte+0xdc>
    3400:	ee 81       	ldd	r30, Y+6	; 0x06
    3402:	ff 81       	ldd	r31, Y+7	; 0x07
    3404:	30 97       	sbiw	r30, 0x00	; 0
    3406:	e1 f0       	breq	.+56     	; 0x3440 <spi_sendByte+0xd2>
    3408:	34 81       	ldd	r19, Z+4	; 0x04
    340a:	83 81       	ldd	r24, Z+3	; 0x03
    340c:	42 81       	ldd	r20, Z+2	; 0x02
    340e:	95 81       	ldd	r25, Z+5	; 0x05
    3410:	84 1b       	sub	r24, r20
    3412:	89 23       	and	r24, r25
    3414:	38 17       	cp	r19, r24
    3416:	b1 f0       	breq	.+44     	; 0x3444 <spi_sendByte+0xd6>
    3418:	83 81       	ldd	r24, Z+3	; 0x03
    341a:	42 81       	ldd	r20, Z+2	; 0x02
    341c:	84 1b       	sub	r24, r20
    341e:	89 23       	and	r24, r25
    3420:	38 17       	cp	r19, r24
    3422:	91 f0       	breq	.+36     	; 0x3448 <spi_sendByte+0xda>
    3424:	83 81       	ldd	r24, Z+3	; 0x03
    3426:	96 95       	lsr	r25
    3428:	98 23       	and	r25, r24
    342a:	a0 81       	ld	r26, Z
    342c:	b1 81       	ldd	r27, Z+1	; 0x01
    342e:	a9 0f       	add	r26, r25
    3430:	b1 1d       	adc	r27, r1
    3432:	1c 93       	st	X, r17
    3434:	8f 5f       	subi	r24, 0xFF	; 255
    3436:	95 81       	ldd	r25, Z+5	; 0x05
    3438:	89 23       	and	r24, r25
    343a:	83 83       	std	Z+3, r24	; 0x03
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	05 c0       	rjmp	.+10     	; 0x344a <spi_sendByte+0xdc>
    3440:	82 e0       	ldi	r24, 0x02	; 2
    3442:	03 c0       	rjmp	.+6      	; 0x344a <spi_sendByte+0xdc>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	01 c0       	rjmp	.+2      	; 0x344a <spi_sendByte+0xdc>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	2f bf       	out	0x3f, r18	; 63
    344c:	01 c0       	rjmp	.+2      	; 0x3450 <spi_sendByte+0xe2>
    344e:	83 e0       	ldi	r24, 0x03	; 3
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	1f 91       	pop	r17
    3456:	08 95       	ret

00003458 <__vector_24>:
    3458:	1f 92       	push	r1
    345a:	0f 92       	push	r0
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	0f 92       	push	r0
    3460:	11 24       	eor	r1, r1
    3462:	0b b6       	in	r0, 0x3b	; 59
    3464:	0f 92       	push	r0
    3466:	2f 93       	push	r18
    3468:	3f 93       	push	r19
    346a:	4f 93       	push	r20
    346c:	5f 93       	push	r21
    346e:	6f 93       	push	r22
    3470:	7f 93       	push	r23
    3472:	8f 93       	push	r24
    3474:	9f 93       	push	r25
    3476:	af 93       	push	r26
    3478:	bf 93       	push	r27
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	ef 93       	push	r30
    3480:	ff 93       	push	r31
    3482:	6e b5       	in	r22, 0x2e	; 46
    3484:	a0 91 6a 0d 	lds	r26, 0x0D6A	; 0x800d6a <_this>
    3488:	b0 91 6b 0d 	lds	r27, 0x0D6B	; 0x800d6b <_this+0x1>
    348c:	18 96       	adiw	r26, 0x08	; 8
    348e:	ed 91       	ld	r30, X+
    3490:	fc 91       	ld	r31, X
    3492:	19 97       	sbiw	r26, 0x09	; 9
    3494:	30 97       	sbiw	r30, 0x00	; 0
    3496:	a1 f0       	breq	.+40     	; 0x34c0 <__vector_24+0x68>
    3498:	83 81       	ldd	r24, Z+3	; 0x03
    349a:	22 81       	ldd	r18, Z+2	; 0x02
    349c:	95 81       	ldd	r25, Z+5	; 0x05
    349e:	82 1b       	sub	r24, r18
    34a0:	89 23       	and	r24, r25
    34a2:	24 81       	ldd	r18, Z+4	; 0x04
    34a4:	82 17       	cp	r24, r18
    34a6:	61 f0       	breq	.+24     	; 0x34c0 <__vector_24+0x68>
    34a8:	83 81       	ldd	r24, Z+3	; 0x03
    34aa:	96 95       	lsr	r25
    34ac:	98 23       	and	r25, r24
    34ae:	c0 81       	ld	r28, Z
    34b0:	d1 81       	ldd	r29, Z+1	; 0x01
    34b2:	c9 0f       	add	r28, r25
    34b4:	d1 1d       	adc	r29, r1
    34b6:	68 83       	st	Y, r22
    34b8:	8f 5f       	subi	r24, 0xFF	; 255
    34ba:	95 81       	ldd	r25, Z+5	; 0x05
    34bc:	89 23       	and	r24, r25
    34be:	83 83       	std	Z+3, r24	; 0x03
    34c0:	16 96       	adiw	r26, 0x06	; 6
    34c2:	ed 91       	ld	r30, X+
    34c4:	fc 91       	ld	r31, X
    34c6:	17 97       	sbiw	r26, 0x07	; 7
    34c8:	30 97       	sbiw	r30, 0x00	; 0
    34ca:	99 f0       	breq	.+38     	; 0x34f2 <__vector_24+0x9a>
    34cc:	93 81       	ldd	r25, Z+3	; 0x03
    34ce:	82 81       	ldd	r24, Z+2	; 0x02
    34d0:	98 17       	cp	r25, r24
    34d2:	79 f0       	breq	.+30     	; 0x34f2 <__vector_24+0x9a>
    34d4:	92 81       	ldd	r25, Z+2	; 0x02
    34d6:	85 81       	ldd	r24, Z+5	; 0x05
    34d8:	28 2f       	mov	r18, r24
    34da:	26 95       	lsr	r18
    34dc:	29 23       	and	r18, r25
    34de:	a0 81       	ld	r26, Z
    34e0:	b1 81       	ldd	r27, Z+1	; 0x01
    34e2:	a2 0f       	add	r26, r18
    34e4:	b1 1d       	adc	r27, r1
    34e6:	2c 91       	ld	r18, X
    34e8:	9f 5f       	subi	r25, 0xFF	; 255
    34ea:	89 23       	and	r24, r25
    34ec:	82 83       	std	Z+2, r24	; 0x02
    34ee:	2e bd       	out	0x2e, r18	; 46
    34f0:	2d c0       	rjmp	.+90     	; 0x354c <__vector_24+0xf4>
    34f2:	8c b5       	in	r24, 0x2c	; 44
    34f4:	8f 77       	andi	r24, 0x7F	; 127
    34f6:	8c bd       	out	0x2c, r24	; 44
    34f8:	10 92 6c 0d 	sts	0x0D6C, r1	; 0x800d6c <_spi_active>
    34fc:	a0 91 6a 0d 	lds	r26, 0x0D6A	; 0x800d6a <_this>
    3500:	b0 91 6b 0d 	lds	r27, 0x0D6B	; 0x800d6b <_this+0x1>
    3504:	ed 91       	ld	r30, X+
    3506:	fc 91       	ld	r31, X
    3508:	11 97       	sbiw	r26, 0x01	; 1
    350a:	30 97       	sbiw	r30, 0x00	; 0
    350c:	f9 f0       	breq	.+62     	; 0x354c <__vector_24+0xf4>
    350e:	13 96       	adiw	r26, 0x03	; 3
    3510:	8c 91       	ld	r24, X
    3512:	13 97       	sbiw	r26, 0x03	; 3
    3514:	81 30       	cpi	r24, 0x01	; 1
    3516:	71 f4       	brne	.+28     	; 0x3534 <__vector_24+0xdc>
    3518:	20 81       	ld	r18, Z
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	12 96       	adiw	r26, 0x02	; 2
    3520:	0c 90       	ld	r0, X
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <__vector_24+0xd0>
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	0a 94       	dec	r0
    352a:	e2 f7       	brpl	.-8      	; 0x3524 <__vector_24+0xcc>
    352c:	80 95       	com	r24
    352e:	82 23       	and	r24, r18
    3530:	80 83       	st	Z, r24
    3532:	0c c0       	rjmp	.+24     	; 0x354c <__vector_24+0xf4>
    3534:	20 81       	ld	r18, Z
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	12 96       	adiw	r26, 0x02	; 2
    353c:	0c 90       	ld	r0, X
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <__vector_24+0xec>
    3540:	88 0f       	add	r24, r24
    3542:	99 1f       	adc	r25, r25
    3544:	0a 94       	dec	r0
    3546:	e2 f7       	brpl	.-8      	; 0x3540 <__vector_24+0xe8>
    3548:	82 2b       	or	r24, r18
    354a:	80 83       	st	Z, r24
    354c:	80 91 6a 0d 	lds	r24, 0x0D6A	; 0x800d6a <_this>
    3550:	90 91 6b 0d 	lds	r25, 0x0D6B	; 0x800d6b <_this+0x1>
    3554:	dc 01       	movw	r26, r24
    3556:	1a 96       	adiw	r26, 0x0a	; 10
    3558:	ed 91       	ld	r30, X+
    355a:	fc 91       	ld	r31, X
    355c:	1b 97       	sbiw	r26, 0x0b	; 11
    355e:	30 97       	sbiw	r30, 0x00	; 0
    3560:	09 f0       	breq	.+2      	; 0x3564 <__vector_24+0x10c>
    3562:	19 95       	eicall
    3564:	ff 91       	pop	r31
    3566:	ef 91       	pop	r30
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	bf 91       	pop	r27
    356e:	af 91       	pop	r26
    3570:	9f 91       	pop	r25
    3572:	8f 91       	pop	r24
    3574:	7f 91       	pop	r23
    3576:	6f 91       	pop	r22
    3578:	5f 91       	pop	r21
    357a:	4f 91       	pop	r20
    357c:	3f 91       	pop	r19
    357e:	2f 91       	pop	r18
    3580:	0f 90       	pop	r0
    3582:	0b be       	out	0x3b, r0	; 59
    3584:	0f 90       	pop	r0
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	0f 90       	pop	r0
    358a:	1f 90       	pop	r1
    358c:	18 95       	reti

0000358e <_initTwiInterface>:
    358e:	80 91 7b 0d 	lds	r24, 0x0D7B	; 0x800d7b <_twiIsInitiated>
    3592:	81 11       	cpse	r24, r1
    3594:	0c c0       	rjmp	.+24     	; 0x35ae <_initTwiInterface+0x20>
    3596:	8c e0       	ldi	r24, 0x0C	; 12
    3598:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    359c:	8f ef       	ldi	r24, 0xFF	; 255
    359e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    35a2:	84 e0       	ldi	r24, 0x04	; 4
    35a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	80 93 7b 0d 	sts	0x0D7B, r24	; 0x800d7b <_twiIsInitiated>
    35ae:	08 95       	ret

000035b0 <twiCreate>:
    35b0:	af 92       	push	r10
    35b2:	bf 92       	push	r11
    35b4:	cf 92       	push	r12
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	a8 2e       	mov	r10, r24
    35c6:	b6 2e       	mov	r11, r22
    35c8:	69 01       	movw	r12, r18
    35ca:	7a 01       	movw	r14, r20
    35cc:	84 e0       	ldi	r24, 0x04	; 4
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <malloc>
    35d4:	ec 01       	movw	r28, r24
    35d6:	89 2b       	or	r24, r25
    35d8:	71 f1       	breq	.+92     	; 0x3636 <twiCreate+0x86>
    35da:	a8 82       	st	Y, r10
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	b8 12       	cpse	r11, r24
    35e0:	13 c0       	rjmp	.+38     	; 0x3608 <twiCreate+0x58>
    35e2:	c7 01       	movw	r24, r14
    35e4:	b6 01       	movw	r22, r12
    35e6:	20 ea       	ldi	r18, 0xA0	; 160
    35e8:	36 e8       	ldi	r19, 0x86	; 134
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <__udivmodsi4>
    35f2:	da 01       	movw	r26, r20
    35f4:	c9 01       	movw	r24, r18
    35f6:	40 97       	sbiw	r24, 0x10	; 16
    35f8:	a1 09       	sbc	r26, r1
    35fa:	b1 09       	sbc	r27, r1
    35fc:	b6 95       	lsr	r27
    35fe:	a7 95       	ror	r26
    3600:	97 95       	ror	r25
    3602:	87 95       	ror	r24
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	12 c0       	rjmp	.+36     	; 0x362c <twiCreate+0x7c>
    3608:	c7 01       	movw	r24, r14
    360a:	b6 01       	movw	r22, r12
    360c:	20 e8       	ldi	r18, 0x80	; 128
    360e:	3a e1       	ldi	r19, 0x1A	; 26
    3610:	46 e0       	ldi	r20, 0x06	; 6
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <__udivmodsi4>
    3618:	da 01       	movw	r26, r20
    361a:	c9 01       	movw	r24, r18
    361c:	40 97       	sbiw	r24, 0x10	; 16
    361e:	a1 09       	sbc	r26, r1
    3620:	b1 09       	sbc	r27, r1
    3622:	b6 95       	lsr	r27
    3624:	a7 95       	ror	r26
    3626:	97 95       	ror	r25
    3628:	87 95       	ror	r24
    362a:	89 83       	std	Y+1, r24	; 0x01
    362c:	1b 83       	std	Y+3, r17	; 0x03
    362e:	0a 83       	std	Y+2, r16	; 0x02
    3630:	8c 2f       	mov	r24, r28
    3632:	9d 2f       	mov	r25, r29
    3634:	02 c0       	rjmp	.+4      	; 0x363a <twiCreate+0x8a>
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	ff 90       	pop	r15
    3644:	ef 90       	pop	r14
    3646:	df 90       	pop	r13
    3648:	cf 90       	pop	r12
    364a:	bf 90       	pop	r11
    364c:	af 90       	pop	r10
    364e:	08 95       	ret

00003650 <twiIsBusy>:
    3650:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3654:	81 70       	andi	r24, 0x01	; 1
    3656:	08 95       	ret

00003658 <twiTransmit>:
    3658:	ff 92       	push	r15
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	d1 f1       	breq	.+116    	; 0x36da <twiTransmit+0x82>
    3666:	4a 30       	cpi	r20, 0x0A	; 10
    3668:	d0 f5       	brcc	.+116    	; 0x36de <twiTransmit+0x86>
    366a:	f4 2e       	mov	r15, r20
    366c:	8b 01       	movw	r16, r22
    366e:	ec 01       	movw	r28, r24
    3670:	ef df       	rcall	.-34     	; 0x3650 <twiIsBusy>
    3672:	81 11       	cpse	r24, r1
    3674:	36 c0       	rjmp	.+108    	; 0x36e2 <twiTransmit+0x8a>
    3676:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <_twiCurrentHandler>
    367a:	90 91 6f 0d 	lds	r25, 0x0D6F	; 0x800d6f <_twiCurrentHandler+0x1>
    367e:	c8 17       	cp	r28, r24
    3680:	d9 07       	cpc	r29, r25
    3682:	41 f0       	breq	.+16     	; 0x3694 <twiTransmit+0x3c>
    3684:	84 df       	rcall	.-248    	; 0x358e <_initTwiInterface>
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    368c:	d0 93 6f 0d 	sts	0x0D6F, r29	; 0x800d6f <_twiCurrentHandler+0x1>
    3690:	c0 93 6e 0d 	sts	0x0D6E, r28	; 0x800d6e <_twiCurrentHandler>
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	8f 0d       	add	r24, r15
    3698:	80 93 70 0d 	sts	0x0D70, r24	; 0x800d70 <_twiMessageLen>
    369c:	88 81       	ld	r24, Y
    369e:	88 0f       	add	r24, r24
    36a0:	80 93 71 0d 	sts	0x0D71, r24	; 0x800d71 <_twiMessageBuffer>
    36a4:	ff 20       	and	r15, r15
    36a6:	89 f0       	breq	.+34     	; 0x36ca <twiTransmit+0x72>
    36a8:	f8 01       	movw	r30, r16
    36aa:	a2 e7       	ldi	r26, 0x72	; 114
    36ac:	bd e0       	ldi	r27, 0x0D	; 13
    36ae:	4f ef       	ldi	r20, 0xFF	; 255
    36b0:	4f 0d       	add	r20, r15
    36b2:	64 2f       	mov	r22, r20
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	cb 01       	movw	r24, r22
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	b8 01       	movw	r22, r16
    36bc:	68 0f       	add	r22, r24
    36be:	79 1f       	adc	r23, r25
    36c0:	81 91       	ld	r24, Z+
    36c2:	8d 93       	st	X+, r24
    36c4:	e6 17       	cp	r30, r22
    36c6:	f7 07       	cpc	r31, r23
    36c8:	d9 f7       	brne	.-10     	; 0x36c0 <twiTransmit+0x68>
    36ca:	88 ef       	ldi	r24, 0xF8	; 248
    36cc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    36d0:	85 ea       	ldi	r24, 0xA5	; 165
    36d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    36d6:	84 e0       	ldi	r24, 0x04	; 4
    36d8:	05 c0       	rjmp	.+10     	; 0x36e4 <twiTransmit+0x8c>
    36da:	86 e0       	ldi	r24, 0x06	; 6
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <twiTransmit+0x8c>
    36de:	87 e0       	ldi	r24, 0x07	; 7
    36e0:	01 c0       	rjmp	.+2      	; 0x36e4 <twiTransmit+0x8c>
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	1f 91       	pop	r17
    36ea:	0f 91       	pop	r16
    36ec:	ff 90       	pop	r15
    36ee:	08 95       	ret

000036f0 <twiReceive>:
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	29 f1       	breq	.+74     	; 0x3744 <twiReceive+0x54>
    36fa:	6b 30       	cpi	r22, 0x0B	; 11
    36fc:	28 f5       	brcc	.+74     	; 0x3748 <twiReceive+0x58>
    36fe:	16 2f       	mov	r17, r22
    3700:	ec 01       	movw	r28, r24
    3702:	a6 df       	rcall	.-180    	; 0x3650 <twiIsBusy>
    3704:	81 11       	cpse	r24, r1
    3706:	22 c0       	rjmp	.+68     	; 0x374c <twiReceive+0x5c>
    3708:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <_twiCurrentHandler>
    370c:	90 91 6f 0d 	lds	r25, 0x0D6F	; 0x800d6f <_twiCurrentHandler+0x1>
    3710:	c8 17       	cp	r28, r24
    3712:	d9 07       	cpc	r29, r25
    3714:	41 f0       	breq	.+16     	; 0x3726 <twiReceive+0x36>
    3716:	3b df       	rcall	.-394    	; 0x358e <_initTwiInterface>
    3718:	89 81       	ldd	r24, Y+1	; 0x01
    371a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    371e:	d0 93 6f 0d 	sts	0x0D6F, r29	; 0x800d6f <_twiCurrentHandler+0x1>
    3722:	c0 93 6e 0d 	sts	0x0D6E, r28	; 0x800d6e <_twiCurrentHandler>
    3726:	10 93 70 0d 	sts	0x0D70, r17	; 0x800d70 <_twiMessageLen>
    372a:	88 81       	ld	r24, Y
    372c:	88 0f       	add	r24, r24
    372e:	81 60       	ori	r24, 0x01	; 1
    3730:	80 93 71 0d 	sts	0x0D71, r24	; 0x800d71 <_twiMessageBuffer>
    3734:	88 ef       	ldi	r24, 0xF8	; 248
    3736:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    373a:	85 ea       	ldi	r24, 0xA5	; 165
    373c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3740:	85 e0       	ldi	r24, 0x05	; 5
    3742:	05 c0       	rjmp	.+10     	; 0x374e <twiReceive+0x5e>
    3744:	86 e0       	ldi	r24, 0x06	; 6
    3746:	03 c0       	rjmp	.+6      	; 0x374e <twiReceive+0x5e>
    3748:	87 e0       	ldi	r24, 0x07	; 7
    374a:	01 c0       	rjmp	.+2      	; 0x374e <twiReceive+0x5e>
    374c:	82 e0       	ldi	r24, 0x02	; 2
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	1f 91       	pop	r17
    3754:	08 95       	ret

00003756 <__vector_39>:
    3756:	1f 92       	push	r1
    3758:	0f 92       	push	r0
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	0f 92       	push	r0
    375e:	11 24       	eor	r1, r1
    3760:	0b b6       	in	r0, 0x3b	; 59
    3762:	0f 92       	push	r0
    3764:	2f 93       	push	r18
    3766:	3f 93       	push	r19
    3768:	4f 93       	push	r20
    376a:	5f 93       	push	r21
    376c:	6f 93       	push	r22
    376e:	7f 93       	push	r23
    3770:	8f 93       	push	r24
    3772:	9f 93       	push	r25
    3774:	af 93       	push	r26
    3776:	bf 93       	push	r27
    3778:	ef 93       	push	r30
    377a:	ff 93       	push	r31
    377c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3780:	8e 2f       	mov	r24, r30
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	fc 01       	movw	r30, r24
    3786:	38 97       	sbiw	r30, 0x08	; 8
    3788:	e1 35       	cpi	r30, 0x51	; 81
    378a:	f1 05       	cpc	r31, r1
    378c:	08 f0       	brcs	.+2      	; 0x3790 <__vector_39+0x3a>
    378e:	75 c0       	rjmp	.+234    	; 0x387a <__vector_39+0x124>
    3790:	88 27       	eor	r24, r24
    3792:	e4 58       	subi	r30, 0x84	; 132
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	8f 4f       	sbci	r24, 0xFF	; 255
    3798:	d1 c7       	rjmp	.+4002   	; 0x473c <__tablejump2__>
    379a:	10 92 6d 0d 	sts	0x0D6D, r1	; 0x800d6d <_index.1885>
    379e:	e0 91 6d 0d 	lds	r30, 0x0D6D	; 0x800d6d <_index.1885>
    37a2:	80 91 70 0d 	lds	r24, 0x0D70	; 0x800d70 <_twiMessageLen>
    37a6:	e8 17       	cp	r30, r24
    37a8:	70 f4       	brcc	.+28     	; 0x37c6 <__vector_39+0x70>
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	8e 0f       	add	r24, r30
    37ae:	80 93 6d 0d 	sts	0x0D6D, r24	; 0x800d6d <_index.1885>
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	ef 58       	subi	r30, 0x8F	; 143
    37b6:	f2 4f       	sbci	r31, 0xF2	; 242
    37b8:	80 81       	ld	r24, Z
    37ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    37be:	85 e8       	ldi	r24, 0x85	; 133
    37c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    37c4:	72 c0       	rjmp	.+228    	; 0x38aa <__vector_39+0x154>
    37c6:	84 e9       	ldi	r24, 0x94	; 148
    37c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    37cc:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <_twiCurrentHandler>
    37d0:	90 91 6f 0d 	lds	r25, 0x0D6F	; 0x800d6f <_twiCurrentHandler+0x1>
    37d4:	dc 01       	movw	r26, r24
    37d6:	12 96       	adiw	r26, 0x02	; 2
    37d8:	ed 91       	ld	r30, X+
    37da:	fc 91       	ld	r31, X
    37dc:	13 97       	sbiw	r26, 0x03	; 3
    37de:	30 97       	sbiw	r30, 0x00	; 0
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <__vector_39+0x8e>
    37e2:	63 c0       	rjmp	.+198    	; 0x38aa <__vector_39+0x154>
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	64 e0       	ldi	r22, 0x04	; 4
    37ec:	19 95       	eicall
    37ee:	5d c0       	rjmp	.+186    	; 0x38aa <__vector_39+0x154>
    37f0:	e0 91 6d 0d 	lds	r30, 0x0D6D	; 0x800d6d <_index.1885>
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	8e 0f       	add	r24, r30
    37f8:	80 93 6d 0d 	sts	0x0D6D, r24	; 0x800d6d <_index.1885>
    37fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	ef 58       	subi	r30, 0x8F	; 143
    3804:	f2 4f       	sbci	r31, 0xF2	; 242
    3806:	80 83       	st	Z, r24
    3808:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    380c:	80 34       	cpi	r24, 0x40	; 64
    380e:	11 f4       	brne	.+4      	; 0x3814 <__vector_39+0xbe>
    3810:	10 92 6d 0d 	sts	0x0D6D, r1	; 0x800d6d <_index.1885>
    3814:	20 91 6d 0d 	lds	r18, 0x0D6D	; 0x800d6d <_index.1885>
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	80 91 70 0d 	lds	r24, 0x0D70	; 0x800d70 <_twiMessageLen>
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	28 17       	cp	r18, r24
    3824:	39 07       	cpc	r19, r25
    3826:	24 f4       	brge	.+8      	; 0x3830 <__vector_39+0xda>
    3828:	85 ec       	ldi	r24, 0xC5	; 197
    382a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    382e:	3d c0       	rjmp	.+122    	; 0x38aa <__vector_39+0x154>
    3830:	85 e8       	ldi	r24, 0x85	; 133
    3832:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3836:	39 c0       	rjmp	.+114    	; 0x38aa <__vector_39+0x154>
    3838:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    383c:	e0 91 6d 0d 	lds	r30, 0x0D6D	; 0x800d6d <_index.1885>
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	ef 58       	subi	r30, 0x8F	; 143
    3844:	f2 4f       	sbci	r31, 0xF2	; 242
    3846:	80 83       	st	Z, r24
    3848:	84 e9       	ldi	r24, 0x94	; 148
    384a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    384e:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <_twiCurrentHandler>
    3852:	90 91 6f 0d 	lds	r25, 0x0D6F	; 0x800d6f <_twiCurrentHandler+0x1>
    3856:	dc 01       	movw	r26, r24
    3858:	12 96       	adiw	r26, 0x02	; 2
    385a:	ed 91       	ld	r30, X+
    385c:	fc 91       	ld	r31, X
    385e:	13 97       	sbiw	r26, 0x03	; 3
    3860:	30 97       	sbiw	r30, 0x00	; 0
    3862:	19 f1       	breq	.+70     	; 0x38aa <__vector_39+0x154>
    3864:	20 91 70 0d 	lds	r18, 0x0D70	; 0x800d70 <_twiMessageLen>
    3868:	41 e7       	ldi	r20, 0x71	; 113
    386a:	5d e0       	ldi	r21, 0x0D	; 13
    386c:	65 e0       	ldi	r22, 0x05	; 5
    386e:	19 95       	eicall
    3870:	1c c0       	rjmp	.+56     	; 0x38aa <__vector_39+0x154>
    3872:	85 ea       	ldi	r24, 0xA5	; 165
    3874:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3878:	18 c0       	rjmp	.+48     	; 0x38aa <__vector_39+0x154>
    387a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    387e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3882:	84 e0       	ldi	r24, 0x04	; 4
    3884:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3888:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <_twiCurrentHandler>
    388c:	90 91 6f 0d 	lds	r25, 0x0D6F	; 0x800d6f <_twiCurrentHandler+0x1>
    3890:	dc 01       	movw	r26, r24
    3892:	12 96       	adiw	r26, 0x02	; 2
    3894:	ed 91       	ld	r30, X+
    3896:	fc 91       	ld	r31, X
    3898:	13 97       	sbiw	r26, 0x03	; 3
    389a:	30 97       	sbiw	r30, 0x00	; 0
    389c:	31 f0       	breq	.+12     	; 0x38aa <__vector_39+0x154>
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	50 e0       	ldi	r21, 0x00	; 0
    38a4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    38a8:	19 95       	eicall
    38aa:	ff 91       	pop	r31
    38ac:	ef 91       	pop	r30
    38ae:	bf 91       	pop	r27
    38b0:	af 91       	pop	r26
    38b2:	9f 91       	pop	r25
    38b4:	8f 91       	pop	r24
    38b6:	7f 91       	pop	r23
    38b8:	6f 91       	pop	r22
    38ba:	5f 91       	pop	r21
    38bc:	4f 91       	pop	r20
    38be:	3f 91       	pop	r19
    38c0:	2f 91       	pop	r18
    38c2:	0f 90       	pop	r0
    38c4:	0b be       	out	0x3b, r0	; 59
    38c6:	0f 90       	pop	r0
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	0f 90       	pop	r0
    38cc:	1f 90       	pop	r1
    38ce:	18 95       	reti

000038d0 <fifo_init>:
    38d0:	fc 01       	movw	r30, r24
    38d2:	41 11       	cpse	r20, r1
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <fifo_init+0xa>
    38d6:	0e 94 f5 24 	call	0x49ea	; 0x49ea <abort>
    38da:	84 2f       	mov	r24, r20
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9c 01       	movw	r18, r24
    38e0:	21 50       	subi	r18, 0x01	; 1
    38e2:	31 09       	sbc	r19, r1
    38e4:	82 23       	and	r24, r18
    38e6:	93 23       	and	r25, r19
    38e8:	89 2b       	or	r24, r25
    38ea:	11 f0       	breq	.+4      	; 0x38f0 <fifo_init+0x20>
    38ec:	0e 94 f5 24 	call	0x49ea	; 0x49ea <abort>
    38f0:	41 38       	cpi	r20, 0x81	; 129
    38f2:	10 f0       	brcs	.+4      	; 0x38f8 <fifo_init+0x28>
    38f4:	0e 94 f5 24 	call	0x49ea	; 0x49ea <abort>
    38f8:	12 82       	std	Z+2, r1	; 0x02
    38fa:	13 82       	std	Z+3, r1	; 0x03
    38fc:	44 83       	std	Z+4, r20	; 0x04
    38fe:	44 0f       	add	r20, r20
    3900:	41 50       	subi	r20, 0x01	; 1
    3902:	45 83       	std	Z+5, r20	; 0x05
    3904:	71 83       	std	Z+1, r23	; 0x01
    3906:	60 83       	st	Z, r22
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	08 95       	ret

0000390e <vfprintf>:
    390e:	2f 92       	push	r2
    3910:	3f 92       	push	r3
    3912:	4f 92       	push	r4
    3914:	5f 92       	push	r5
    3916:	6f 92       	push	r6
    3918:	7f 92       	push	r7
    391a:	8f 92       	push	r8
    391c:	9f 92       	push	r9
    391e:	af 92       	push	r10
    3920:	bf 92       	push	r11
    3922:	cf 92       	push	r12
    3924:	df 92       	push	r13
    3926:	ef 92       	push	r14
    3928:	ff 92       	push	r15
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	60 97       	sbiw	r28, 0x10	; 16
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	7c 01       	movw	r14, r24
    3944:	1b 01       	movw	r2, r22
    3946:	6a 01       	movw	r12, r20
    3948:	fc 01       	movw	r30, r24
    394a:	17 82       	std	Z+7, r1	; 0x07
    394c:	16 82       	std	Z+6, r1	; 0x06
    394e:	83 81       	ldd	r24, Z+3	; 0x03
    3950:	81 ff       	sbrs	r24, 1
    3952:	2e c3       	rjmp	.+1628   	; 0x3fb0 <vfprintf+0x6a2>
    3954:	9e 01       	movw	r18, r28
    3956:	2f 5f       	subi	r18, 0xFF	; 255
    3958:	3f 4f       	sbci	r19, 0xFF	; 255
    395a:	39 01       	movw	r6, r18
    395c:	f7 01       	movw	r30, r14
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	f1 01       	movw	r30, r2
    3962:	93 fd       	sbrc	r25, 3
    3964:	85 91       	lpm	r24, Z+
    3966:	93 ff       	sbrs	r25, 3
    3968:	81 91       	ld	r24, Z+
    396a:	1f 01       	movw	r2, r30
    396c:	88 23       	and	r24, r24
    396e:	09 f4       	brne	.+2      	; 0x3972 <vfprintf+0x64>
    3970:	1b c3       	rjmp	.+1590   	; 0x3fa8 <vfprintf+0x69a>
    3972:	85 32       	cpi	r24, 0x25	; 37
    3974:	39 f4       	brne	.+14     	; 0x3984 <vfprintf+0x76>
    3976:	93 fd       	sbrc	r25, 3
    3978:	85 91       	lpm	r24, Z+
    397a:	93 ff       	sbrs	r25, 3
    397c:	81 91       	ld	r24, Z+
    397e:	1f 01       	movw	r2, r30
    3980:	85 32       	cpi	r24, 0x25	; 37
    3982:	39 f4       	brne	.+14     	; 0x3992 <vfprintf+0x84>
    3984:	b7 01       	movw	r22, r14
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	0e 94 f7 25 	call	0x4bee	; 0x4bee <fputc>
    398c:	56 01       	movw	r10, r12
    398e:	65 01       	movw	r12, r10
    3990:	e5 cf       	rjmp	.-54     	; 0x395c <vfprintf+0x4e>
    3992:	10 e0       	ldi	r17, 0x00	; 0
    3994:	51 2c       	mov	r5, r1
    3996:	91 2c       	mov	r9, r1
    3998:	ff e1       	ldi	r31, 0x1F	; 31
    399a:	f9 15       	cp	r31, r9
    399c:	d8 f0       	brcs	.+54     	; 0x39d4 <vfprintf+0xc6>
    399e:	8b 32       	cpi	r24, 0x2B	; 43
    39a0:	79 f0       	breq	.+30     	; 0x39c0 <vfprintf+0xb2>
    39a2:	38 f4       	brcc	.+14     	; 0x39b2 <vfprintf+0xa4>
    39a4:	80 32       	cpi	r24, 0x20	; 32
    39a6:	79 f0       	breq	.+30     	; 0x39c6 <vfprintf+0xb8>
    39a8:	83 32       	cpi	r24, 0x23	; 35
    39aa:	a1 f4       	brne	.+40     	; 0x39d4 <vfprintf+0xc6>
    39ac:	f9 2d       	mov	r31, r9
    39ae:	f0 61       	ori	r31, 0x10	; 16
    39b0:	2e c0       	rjmp	.+92     	; 0x3a0e <vfprintf+0x100>
    39b2:	8d 32       	cpi	r24, 0x2D	; 45
    39b4:	61 f0       	breq	.+24     	; 0x39ce <vfprintf+0xc0>
    39b6:	80 33       	cpi	r24, 0x30	; 48
    39b8:	69 f4       	brne	.+26     	; 0x39d4 <vfprintf+0xc6>
    39ba:	29 2d       	mov	r18, r9
    39bc:	21 60       	ori	r18, 0x01	; 1
    39be:	2d c0       	rjmp	.+90     	; 0x3a1a <vfprintf+0x10c>
    39c0:	39 2d       	mov	r19, r9
    39c2:	32 60       	ori	r19, 0x02	; 2
    39c4:	93 2e       	mov	r9, r19
    39c6:	89 2d       	mov	r24, r9
    39c8:	84 60       	ori	r24, 0x04	; 4
    39ca:	98 2e       	mov	r9, r24
    39cc:	2a c0       	rjmp	.+84     	; 0x3a22 <vfprintf+0x114>
    39ce:	e9 2d       	mov	r30, r9
    39d0:	e8 60       	ori	r30, 0x08	; 8
    39d2:	15 c0       	rjmp	.+42     	; 0x39fe <vfprintf+0xf0>
    39d4:	97 fc       	sbrc	r9, 7
    39d6:	2d c0       	rjmp	.+90     	; 0x3a32 <vfprintf+0x124>
    39d8:	20 ed       	ldi	r18, 0xD0	; 208
    39da:	28 0f       	add	r18, r24
    39dc:	2a 30       	cpi	r18, 0x0A	; 10
    39de:	88 f4       	brcc	.+34     	; 0x3a02 <vfprintf+0xf4>
    39e0:	96 fe       	sbrs	r9, 6
    39e2:	06 c0       	rjmp	.+12     	; 0x39f0 <vfprintf+0xe2>
    39e4:	3a e0       	ldi	r19, 0x0A	; 10
    39e6:	13 9f       	mul	r17, r19
    39e8:	20 0d       	add	r18, r0
    39ea:	11 24       	eor	r1, r1
    39ec:	12 2f       	mov	r17, r18
    39ee:	19 c0       	rjmp	.+50     	; 0x3a22 <vfprintf+0x114>
    39f0:	8a e0       	ldi	r24, 0x0A	; 10
    39f2:	58 9e       	mul	r5, r24
    39f4:	20 0d       	add	r18, r0
    39f6:	11 24       	eor	r1, r1
    39f8:	52 2e       	mov	r5, r18
    39fa:	e9 2d       	mov	r30, r9
    39fc:	e0 62       	ori	r30, 0x20	; 32
    39fe:	9e 2e       	mov	r9, r30
    3a00:	10 c0       	rjmp	.+32     	; 0x3a22 <vfprintf+0x114>
    3a02:	8e 32       	cpi	r24, 0x2E	; 46
    3a04:	31 f4       	brne	.+12     	; 0x3a12 <vfprintf+0x104>
    3a06:	96 fc       	sbrc	r9, 6
    3a08:	cf c2       	rjmp	.+1438   	; 0x3fa8 <vfprintf+0x69a>
    3a0a:	f9 2d       	mov	r31, r9
    3a0c:	f0 64       	ori	r31, 0x40	; 64
    3a0e:	9f 2e       	mov	r9, r31
    3a10:	08 c0       	rjmp	.+16     	; 0x3a22 <vfprintf+0x114>
    3a12:	8c 36       	cpi	r24, 0x6C	; 108
    3a14:	21 f4       	brne	.+8      	; 0x3a1e <vfprintf+0x110>
    3a16:	29 2d       	mov	r18, r9
    3a18:	20 68       	ori	r18, 0x80	; 128
    3a1a:	92 2e       	mov	r9, r18
    3a1c:	02 c0       	rjmp	.+4      	; 0x3a22 <vfprintf+0x114>
    3a1e:	88 36       	cpi	r24, 0x68	; 104
    3a20:	41 f4       	brne	.+16     	; 0x3a32 <vfprintf+0x124>
    3a22:	f1 01       	movw	r30, r2
    3a24:	93 fd       	sbrc	r25, 3
    3a26:	85 91       	lpm	r24, Z+
    3a28:	93 ff       	sbrs	r25, 3
    3a2a:	81 91       	ld	r24, Z+
    3a2c:	1f 01       	movw	r2, r30
    3a2e:	81 11       	cpse	r24, r1
    3a30:	b3 cf       	rjmp	.-154    	; 0x3998 <vfprintf+0x8a>
    3a32:	9b eb       	ldi	r25, 0xBB	; 187
    3a34:	98 0f       	add	r25, r24
    3a36:	93 30       	cpi	r25, 0x03	; 3
    3a38:	20 f4       	brcc	.+8      	; 0x3a42 <vfprintf+0x134>
    3a3a:	99 2d       	mov	r25, r9
    3a3c:	90 61       	ori	r25, 0x10	; 16
    3a3e:	80 5e       	subi	r24, 0xE0	; 224
    3a40:	07 c0       	rjmp	.+14     	; 0x3a50 <vfprintf+0x142>
    3a42:	9b e9       	ldi	r25, 0x9B	; 155
    3a44:	98 0f       	add	r25, r24
    3a46:	93 30       	cpi	r25, 0x03	; 3
    3a48:	08 f0       	brcs	.+2      	; 0x3a4c <vfprintf+0x13e>
    3a4a:	5c c1       	rjmp	.+696    	; 0x3d04 <vfprintf+0x3f6>
    3a4c:	99 2d       	mov	r25, r9
    3a4e:	9f 7e       	andi	r25, 0xEF	; 239
    3a50:	96 ff       	sbrs	r25, 6
    3a52:	16 e0       	ldi	r17, 0x06	; 6
    3a54:	9f 73       	andi	r25, 0x3F	; 63
    3a56:	99 2e       	mov	r9, r25
    3a58:	85 36       	cpi	r24, 0x65	; 101
    3a5a:	19 f4       	brne	.+6      	; 0x3a62 <vfprintf+0x154>
    3a5c:	90 64       	ori	r25, 0x40	; 64
    3a5e:	99 2e       	mov	r9, r25
    3a60:	08 c0       	rjmp	.+16     	; 0x3a72 <vfprintf+0x164>
    3a62:	86 36       	cpi	r24, 0x66	; 102
    3a64:	21 f4       	brne	.+8      	; 0x3a6e <vfprintf+0x160>
    3a66:	39 2f       	mov	r19, r25
    3a68:	30 68       	ori	r19, 0x80	; 128
    3a6a:	93 2e       	mov	r9, r19
    3a6c:	02 c0       	rjmp	.+4      	; 0x3a72 <vfprintf+0x164>
    3a6e:	11 11       	cpse	r17, r1
    3a70:	11 50       	subi	r17, 0x01	; 1
    3a72:	97 fe       	sbrs	r9, 7
    3a74:	07 c0       	rjmp	.+14     	; 0x3a84 <vfprintf+0x176>
    3a76:	1c 33       	cpi	r17, 0x3C	; 60
    3a78:	50 f4       	brcc	.+20     	; 0x3a8e <vfprintf+0x180>
    3a7a:	44 24       	eor	r4, r4
    3a7c:	43 94       	inc	r4
    3a7e:	41 0e       	add	r4, r17
    3a80:	27 e0       	ldi	r18, 0x07	; 7
    3a82:	0b c0       	rjmp	.+22     	; 0x3a9a <vfprintf+0x18c>
    3a84:	18 30       	cpi	r17, 0x08	; 8
    3a86:	38 f0       	brcs	.+14     	; 0x3a96 <vfprintf+0x188>
    3a88:	27 e0       	ldi	r18, 0x07	; 7
    3a8a:	17 e0       	ldi	r17, 0x07	; 7
    3a8c:	05 c0       	rjmp	.+10     	; 0x3a98 <vfprintf+0x18a>
    3a8e:	27 e0       	ldi	r18, 0x07	; 7
    3a90:	9c e3       	ldi	r25, 0x3C	; 60
    3a92:	49 2e       	mov	r4, r25
    3a94:	02 c0       	rjmp	.+4      	; 0x3a9a <vfprintf+0x18c>
    3a96:	21 2f       	mov	r18, r17
    3a98:	41 2c       	mov	r4, r1
    3a9a:	56 01       	movw	r10, r12
    3a9c:	84 e0       	ldi	r24, 0x04	; 4
    3a9e:	a8 0e       	add	r10, r24
    3aa0:	b1 1c       	adc	r11, r1
    3aa2:	f6 01       	movw	r30, r12
    3aa4:	60 81       	ld	r22, Z
    3aa6:	71 81       	ldd	r23, Z+1	; 0x01
    3aa8:	82 81       	ldd	r24, Z+2	; 0x02
    3aaa:	93 81       	ldd	r25, Z+3	; 0x03
    3aac:	04 2d       	mov	r16, r4
    3aae:	a3 01       	movw	r20, r6
    3ab0:	a0 d7       	rcall	.+3904   	; 0x49f2 <__ftoa_engine>
    3ab2:	6c 01       	movw	r12, r24
    3ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ab6:	fc 87       	std	Y+12, r31	; 0x0c
    3ab8:	f0 ff       	sbrs	r31, 0
    3aba:	02 c0       	rjmp	.+4      	; 0x3ac0 <vfprintf+0x1b2>
    3abc:	f3 ff       	sbrs	r31, 3
    3abe:	06 c0       	rjmp	.+12     	; 0x3acc <vfprintf+0x1be>
    3ac0:	91 fc       	sbrc	r9, 1
    3ac2:	06 c0       	rjmp	.+12     	; 0x3ad0 <vfprintf+0x1c2>
    3ac4:	92 fe       	sbrs	r9, 2
    3ac6:	06 c0       	rjmp	.+12     	; 0x3ad4 <vfprintf+0x1c6>
    3ac8:	00 e2       	ldi	r16, 0x20	; 32
    3aca:	05 c0       	rjmp	.+10     	; 0x3ad6 <vfprintf+0x1c8>
    3acc:	0d e2       	ldi	r16, 0x2D	; 45
    3ace:	03 c0       	rjmp	.+6      	; 0x3ad6 <vfprintf+0x1c8>
    3ad0:	0b e2       	ldi	r16, 0x2B	; 43
    3ad2:	01 c0       	rjmp	.+2      	; 0x3ad6 <vfprintf+0x1c8>
    3ad4:	00 e0       	ldi	r16, 0x00	; 0
    3ad6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ad8:	8c 70       	andi	r24, 0x0C	; 12
    3ada:	19 f0       	breq	.+6      	; 0x3ae2 <vfprintf+0x1d4>
    3adc:	01 11       	cpse	r16, r1
    3ade:	46 c2       	rjmp	.+1164   	; 0x3f6c <vfprintf+0x65e>
    3ae0:	83 c2       	rjmp	.+1286   	; 0x3fe8 <vfprintf+0x6da>
    3ae2:	97 fe       	sbrs	r9, 7
    3ae4:	10 c0       	rjmp	.+32     	; 0x3b06 <vfprintf+0x1f8>
    3ae6:	4c 0c       	add	r4, r12
    3ae8:	fc 85       	ldd	r31, Y+12	; 0x0c
    3aea:	f4 ff       	sbrs	r31, 4
    3aec:	04 c0       	rjmp	.+8      	; 0x3af6 <vfprintf+0x1e8>
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	81 33       	cpi	r24, 0x31	; 49
    3af2:	09 f4       	brne	.+2      	; 0x3af6 <vfprintf+0x1e8>
    3af4:	4a 94       	dec	r4
    3af6:	14 14       	cp	r1, r4
    3af8:	74 f5       	brge	.+92     	; 0x3b56 <vfprintf+0x248>
    3afa:	28 e0       	ldi	r18, 0x08	; 8
    3afc:	24 15       	cp	r18, r4
    3afe:	78 f5       	brcc	.+94     	; 0x3b5e <vfprintf+0x250>
    3b00:	88 e0       	ldi	r24, 0x08	; 8
    3b02:	48 2e       	mov	r4, r24
    3b04:	2c c0       	rjmp	.+88     	; 0x3b5e <vfprintf+0x250>
    3b06:	96 fc       	sbrc	r9, 6
    3b08:	2a c0       	rjmp	.+84     	; 0x3b5e <vfprintf+0x250>
    3b0a:	81 2f       	mov	r24, r17
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	8c 15       	cp	r24, r12
    3b10:	9d 05       	cpc	r25, r13
    3b12:	9c f0       	brlt	.+38     	; 0x3b3a <vfprintf+0x22c>
    3b14:	3c ef       	ldi	r19, 0xFC	; 252
    3b16:	c3 16       	cp	r12, r19
    3b18:	3f ef       	ldi	r19, 0xFF	; 255
    3b1a:	d3 06       	cpc	r13, r19
    3b1c:	74 f0       	brlt	.+28     	; 0x3b3a <vfprintf+0x22c>
    3b1e:	89 2d       	mov	r24, r9
    3b20:	80 68       	ori	r24, 0x80	; 128
    3b22:	98 2e       	mov	r9, r24
    3b24:	0a c0       	rjmp	.+20     	; 0x3b3a <vfprintf+0x22c>
    3b26:	e2 e0       	ldi	r30, 0x02	; 2
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	ec 0f       	add	r30, r28
    3b2c:	fd 1f       	adc	r31, r29
    3b2e:	e1 0f       	add	r30, r17
    3b30:	f1 1d       	adc	r31, r1
    3b32:	80 81       	ld	r24, Z
    3b34:	80 33       	cpi	r24, 0x30	; 48
    3b36:	19 f4       	brne	.+6      	; 0x3b3e <vfprintf+0x230>
    3b38:	11 50       	subi	r17, 0x01	; 1
    3b3a:	11 11       	cpse	r17, r1
    3b3c:	f4 cf       	rjmp	.-24     	; 0x3b26 <vfprintf+0x218>
    3b3e:	97 fe       	sbrs	r9, 7
    3b40:	0e c0       	rjmp	.+28     	; 0x3b5e <vfprintf+0x250>
    3b42:	44 24       	eor	r4, r4
    3b44:	43 94       	inc	r4
    3b46:	41 0e       	add	r4, r17
    3b48:	81 2f       	mov	r24, r17
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	c8 16       	cp	r12, r24
    3b4e:	d9 06       	cpc	r13, r25
    3b50:	2c f4       	brge	.+10     	; 0x3b5c <vfprintf+0x24e>
    3b52:	1c 19       	sub	r17, r12
    3b54:	04 c0       	rjmp	.+8      	; 0x3b5e <vfprintf+0x250>
    3b56:	44 24       	eor	r4, r4
    3b58:	43 94       	inc	r4
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <vfprintf+0x250>
    3b5c:	10 e0       	ldi	r17, 0x00	; 0
    3b5e:	97 fe       	sbrs	r9, 7
    3b60:	06 c0       	rjmp	.+12     	; 0x3b6e <vfprintf+0x260>
    3b62:	1c 14       	cp	r1, r12
    3b64:	1d 04       	cpc	r1, r13
    3b66:	34 f4       	brge	.+12     	; 0x3b74 <vfprintf+0x266>
    3b68:	c6 01       	movw	r24, r12
    3b6a:	01 96       	adiw	r24, 0x01	; 1
    3b6c:	05 c0       	rjmp	.+10     	; 0x3b78 <vfprintf+0x26a>
    3b6e:	85 e0       	ldi	r24, 0x05	; 5
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <vfprintf+0x26a>
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	01 11       	cpse	r16, r1
    3b7a:	01 96       	adiw	r24, 0x01	; 1
    3b7c:	11 23       	and	r17, r17
    3b7e:	31 f0       	breq	.+12     	; 0x3b8c <vfprintf+0x27e>
    3b80:	21 2f       	mov	r18, r17
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	2f 5f       	subi	r18, 0xFF	; 255
    3b86:	3f 4f       	sbci	r19, 0xFF	; 255
    3b88:	82 0f       	add	r24, r18
    3b8a:	93 1f       	adc	r25, r19
    3b8c:	25 2d       	mov	r18, r5
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	82 17       	cp	r24, r18
    3b92:	93 07       	cpc	r25, r19
    3b94:	14 f4       	brge	.+4      	; 0x3b9a <vfprintf+0x28c>
    3b96:	58 1a       	sub	r5, r24
    3b98:	01 c0       	rjmp	.+2      	; 0x3b9c <vfprintf+0x28e>
    3b9a:	51 2c       	mov	r5, r1
    3b9c:	89 2d       	mov	r24, r9
    3b9e:	89 70       	andi	r24, 0x09	; 9
    3ba0:	49 f4       	brne	.+18     	; 0x3bb4 <vfprintf+0x2a6>
    3ba2:	55 20       	and	r5, r5
    3ba4:	39 f0       	breq	.+14     	; 0x3bb4 <vfprintf+0x2a6>
    3ba6:	b7 01       	movw	r22, r14
    3ba8:	80 e2       	ldi	r24, 0x20	; 32
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	0e 94 f7 25 	call	0x4bee	; 0x4bee <fputc>
    3bb0:	5a 94       	dec	r5
    3bb2:	f7 cf       	rjmp	.-18     	; 0x3ba2 <vfprintf+0x294>
    3bb4:	00 23       	and	r16, r16
    3bb6:	29 f0       	breq	.+10     	; 0x3bc2 <vfprintf+0x2b4>
    3bb8:	b7 01       	movw	r22, r14
    3bba:	80 2f       	mov	r24, r16
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	0e 94 f7 25 	call	0x4bee	; 0x4bee <fputc>
    3bc2:	93 fc       	sbrc	r9, 3
    3bc4:	09 c0       	rjmp	.+18     	; 0x3bd8 <vfprintf+0x2ca>
    3bc6:	55 20       	and	r5, r5
    3bc8:	39 f0       	breq	.+14     	; 0x3bd8 <vfprintf+0x2ca>
    3bca:	b7 01       	movw	r22, r14
    3bcc:	80 e3       	ldi	r24, 0x30	; 48
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	0e 94 f7 25 	call	0x4bee	; 0x4bee <fputc>
    3bd4:	5a 94       	dec	r5
    3bd6:	f7 cf       	rjmp	.-18     	; 0x3bc6 <vfprintf+0x2b8>
    3bd8:	97 fe       	sbrs	r9, 7
    3bda:	4a c0       	rjmp	.+148    	; 0x3c70 <vfprintf+0x362>
    3bdc:	46 01       	movw	r8, r12
    3bde:	d7 fe       	sbrs	r13, 7
    3be0:	02 c0       	rjmp	.+4      	; 0x3be6 <vfprintf+0x2d8>
    3be2:	81 2c       	mov	r8, r1
    3be4:	91 2c       	mov	r9, r1
    3be6:	c6 01       	movw	r24, r12
    3be8:	88 19       	sub	r24, r8
    3bea:	99 09       	sbc	r25, r9
    3bec:	f3 01       	movw	r30, r6
    3bee:	e8 0f       	add	r30, r24
    3bf0:	f9 1f       	adc	r31, r25
    3bf2:	fe 87       	std	Y+14, r31	; 0x0e
    3bf4:	ed 87       	std	Y+13, r30	; 0x0d
    3bf6:	96 01       	movw	r18, r12
    3bf8:	24 19       	sub	r18, r4
    3bfa:	31 09       	sbc	r19, r1
    3bfc:	38 8b       	std	Y+16, r19	; 0x10
    3bfe:	2f 87       	std	Y+15, r18	; 0x0f
    3c00:	01 2f       	mov	r16, r17
    3c02:	10 e0       	ldi	r17, 0x00	; 0
    3c04:	11 95       	neg	r17
    3c06:	01 95       	neg	r16
    3c08:	11 09       	sbc	r17, r1
    3c0a:	3f ef       	ldi	r19, 0xFF	; 255
    3c0c:	83 16       	cp	r8, r19
    3c0e:	93 06       	cpc	r9, r19
    3c10:	21 f4       	brne	.+8      	; 0x3c1a <vfprintf+0x30c>
    3c12:	b7 01       	movw	r22, r14
    3c14:	8e e2       	ldi	r24, 0x2E	; 46
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	ea d7       	rcall	.+4052   	; 0x4bee <fputc>
    3c1a:	c8 14       	cp	r12, r8
    3c1c:	d9 04       	cpc	r13, r9
    3c1e:	4c f0       	brlt	.+18     	; 0x3c32 <vfprintf+0x324>
    3c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c22:	98 89       	ldd	r25, Y+16	; 0x10
    3c24:	88 15       	cp	r24, r8
    3c26:	99 05       	cpc	r25, r9
    3c28:	24 f4       	brge	.+8      	; 0x3c32 <vfprintf+0x324>
    3c2a:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c2c:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c2e:	81 81       	ldd	r24, Z+1	; 0x01
    3c30:	01 c0       	rjmp	.+2      	; 0x3c34 <vfprintf+0x326>
    3c32:	80 e3       	ldi	r24, 0x30	; 48
    3c34:	f1 e0       	ldi	r31, 0x01	; 1
    3c36:	8f 1a       	sub	r8, r31
    3c38:	91 08       	sbc	r9, r1
    3c3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c3e:	2f 5f       	subi	r18, 0xFF	; 255
    3c40:	3f 4f       	sbci	r19, 0xFF	; 255
    3c42:	3e 87       	std	Y+14, r19	; 0x0e
    3c44:	2d 87       	std	Y+13, r18	; 0x0d
    3c46:	80 16       	cp	r8, r16
    3c48:	91 06       	cpc	r9, r17
    3c4a:	24 f0       	brlt	.+8      	; 0x3c54 <vfprintf+0x346>
    3c4c:	b7 01       	movw	r22, r14
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	ce d7       	rcall	.+3996   	; 0x4bee <fputc>
    3c52:	db cf       	rjmp	.-74     	; 0x3c0a <vfprintf+0x2fc>
    3c54:	c8 14       	cp	r12, r8
    3c56:	d9 04       	cpc	r13, r9
    3c58:	41 f4       	brne	.+16     	; 0x3c6a <vfprintf+0x35c>
    3c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5c:	96 33       	cpi	r25, 0x36	; 54
    3c5e:	20 f4       	brcc	.+8      	; 0x3c68 <vfprintf+0x35a>
    3c60:	95 33       	cpi	r25, 0x35	; 53
    3c62:	19 f4       	brne	.+6      	; 0x3c6a <vfprintf+0x35c>
    3c64:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c66:	34 ff       	sbrs	r19, 4
    3c68:	81 e3       	ldi	r24, 0x31	; 49
    3c6a:	b7 01       	movw	r22, r14
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	48 c0       	rjmp	.+144    	; 0x3d00 <vfprintf+0x3f2>
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	81 33       	cpi	r24, 0x31	; 49
    3c74:	19 f0       	breq	.+6      	; 0x3c7c <vfprintf+0x36e>
    3c76:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c78:	9f 7e       	andi	r25, 0xEF	; 239
    3c7a:	9c 87       	std	Y+12, r25	; 0x0c
    3c7c:	b7 01       	movw	r22, r14
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	b6 d7       	rcall	.+3948   	; 0x4bee <fputc>
    3c82:	11 11       	cpse	r17, r1
    3c84:	05 c0       	rjmp	.+10     	; 0x3c90 <vfprintf+0x382>
    3c86:	94 fc       	sbrc	r9, 4
    3c88:	16 c0       	rjmp	.+44     	; 0x3cb6 <vfprintf+0x3a8>
    3c8a:	85 e6       	ldi	r24, 0x65	; 101
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	15 c0       	rjmp	.+42     	; 0x3cba <vfprintf+0x3ac>
    3c90:	b7 01       	movw	r22, r14
    3c92:	8e e2       	ldi	r24, 0x2E	; 46
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	ab d7       	rcall	.+3926   	; 0x4bee <fputc>
    3c98:	1e 5f       	subi	r17, 0xFE	; 254
    3c9a:	82 e0       	ldi	r24, 0x02	; 2
    3c9c:	01 e0       	ldi	r16, 0x01	; 1
    3c9e:	08 0f       	add	r16, r24
    3ca0:	f3 01       	movw	r30, r6
    3ca2:	e8 0f       	add	r30, r24
    3ca4:	f1 1d       	adc	r31, r1
    3ca6:	80 81       	ld	r24, Z
    3ca8:	b7 01       	movw	r22, r14
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	a0 d7       	rcall	.+3904   	; 0x4bee <fputc>
    3cae:	80 2f       	mov	r24, r16
    3cb0:	01 13       	cpse	r16, r17
    3cb2:	f4 cf       	rjmp	.-24     	; 0x3c9c <vfprintf+0x38e>
    3cb4:	e8 cf       	rjmp	.-48     	; 0x3c86 <vfprintf+0x378>
    3cb6:	85 e4       	ldi	r24, 0x45	; 69
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	b7 01       	movw	r22, r14
    3cbc:	98 d7       	rcall	.+3888   	; 0x4bee <fputc>
    3cbe:	d7 fc       	sbrc	r13, 7
    3cc0:	06 c0       	rjmp	.+12     	; 0x3cce <vfprintf+0x3c0>
    3cc2:	c1 14       	cp	r12, r1
    3cc4:	d1 04       	cpc	r13, r1
    3cc6:	41 f4       	brne	.+16     	; 0x3cd8 <vfprintf+0x3ca>
    3cc8:	ec 85       	ldd	r30, Y+12	; 0x0c
    3cca:	e4 ff       	sbrs	r30, 4
    3ccc:	05 c0       	rjmp	.+10     	; 0x3cd8 <vfprintf+0x3ca>
    3cce:	d1 94       	neg	r13
    3cd0:	c1 94       	neg	r12
    3cd2:	d1 08       	sbc	r13, r1
    3cd4:	8d e2       	ldi	r24, 0x2D	; 45
    3cd6:	01 c0       	rjmp	.+2      	; 0x3cda <vfprintf+0x3cc>
    3cd8:	8b e2       	ldi	r24, 0x2B	; 43
    3cda:	b7 01       	movw	r22, r14
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	87 d7       	rcall	.+3854   	; 0x4bee <fputc>
    3ce0:	80 e3       	ldi	r24, 0x30	; 48
    3ce2:	2a e0       	ldi	r18, 0x0A	; 10
    3ce4:	c2 16       	cp	r12, r18
    3ce6:	d1 04       	cpc	r13, r1
    3ce8:	2c f0       	brlt	.+10     	; 0x3cf4 <vfprintf+0x3e6>
    3cea:	8f 5f       	subi	r24, 0xFF	; 255
    3cec:	fa e0       	ldi	r31, 0x0A	; 10
    3cee:	cf 1a       	sub	r12, r31
    3cf0:	d1 08       	sbc	r13, r1
    3cf2:	f7 cf       	rjmp	.-18     	; 0x3ce2 <vfprintf+0x3d4>
    3cf4:	b7 01       	movw	r22, r14
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	7a d7       	rcall	.+3828   	; 0x4bee <fputc>
    3cfa:	b7 01       	movw	r22, r14
    3cfc:	c6 01       	movw	r24, r12
    3cfe:	c0 96       	adiw	r24, 0x30	; 48
    3d00:	76 d7       	rcall	.+3820   	; 0x4bee <fputc>
    3d02:	49 c1       	rjmp	.+658    	; 0x3f96 <vfprintf+0x688>
    3d04:	83 36       	cpi	r24, 0x63	; 99
    3d06:	31 f0       	breq	.+12     	; 0x3d14 <vfprintf+0x406>
    3d08:	83 37       	cpi	r24, 0x73	; 115
    3d0a:	79 f0       	breq	.+30     	; 0x3d2a <vfprintf+0x41c>
    3d0c:	83 35       	cpi	r24, 0x53	; 83
    3d0e:	09 f0       	breq	.+2      	; 0x3d12 <vfprintf+0x404>
    3d10:	52 c0       	rjmp	.+164    	; 0x3db6 <vfprintf+0x4a8>
    3d12:	1f c0       	rjmp	.+62     	; 0x3d52 <vfprintf+0x444>
    3d14:	56 01       	movw	r10, r12
    3d16:	32 e0       	ldi	r19, 0x02	; 2
    3d18:	a3 0e       	add	r10, r19
    3d1a:	b1 1c       	adc	r11, r1
    3d1c:	f6 01       	movw	r30, r12
    3d1e:	80 81       	ld	r24, Z
    3d20:	89 83       	std	Y+1, r24	; 0x01
    3d22:	01 e0       	ldi	r16, 0x01	; 1
    3d24:	10 e0       	ldi	r17, 0x00	; 0
    3d26:	63 01       	movw	r12, r6
    3d28:	11 c0       	rjmp	.+34     	; 0x3d4c <vfprintf+0x43e>
    3d2a:	56 01       	movw	r10, r12
    3d2c:	f2 e0       	ldi	r31, 0x02	; 2
    3d2e:	af 0e       	add	r10, r31
    3d30:	b1 1c       	adc	r11, r1
    3d32:	f6 01       	movw	r30, r12
    3d34:	c0 80       	ld	r12, Z
    3d36:	d1 80       	ldd	r13, Z+1	; 0x01
    3d38:	96 fe       	sbrs	r9, 6
    3d3a:	03 c0       	rjmp	.+6      	; 0x3d42 <vfprintf+0x434>
    3d3c:	61 2f       	mov	r22, r17
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <vfprintf+0x438>
    3d42:	6f ef       	ldi	r22, 0xFF	; 255
    3d44:	7f ef       	ldi	r23, 0xFF	; 255
    3d46:	c6 01       	movw	r24, r12
    3d48:	47 d7       	rcall	.+3726   	; 0x4bd8 <strnlen>
    3d4a:	8c 01       	movw	r16, r24
    3d4c:	f9 2d       	mov	r31, r9
    3d4e:	ff 77       	andi	r31, 0x7F	; 127
    3d50:	13 c0       	rjmp	.+38     	; 0x3d78 <vfprintf+0x46a>
    3d52:	56 01       	movw	r10, r12
    3d54:	22 e0       	ldi	r18, 0x02	; 2
    3d56:	a2 0e       	add	r10, r18
    3d58:	b1 1c       	adc	r11, r1
    3d5a:	f6 01       	movw	r30, r12
    3d5c:	c0 80       	ld	r12, Z
    3d5e:	d1 80       	ldd	r13, Z+1	; 0x01
    3d60:	96 fe       	sbrs	r9, 6
    3d62:	03 c0       	rjmp	.+6      	; 0x3d6a <vfprintf+0x45c>
    3d64:	61 2f       	mov	r22, r17
    3d66:	70 e0       	ldi	r23, 0x00	; 0
    3d68:	02 c0       	rjmp	.+4      	; 0x3d6e <vfprintf+0x460>
    3d6a:	6f ef       	ldi	r22, 0xFF	; 255
    3d6c:	7f ef       	ldi	r23, 0xFF	; 255
    3d6e:	c6 01       	movw	r24, r12
    3d70:	18 d7       	rcall	.+3632   	; 0x4ba2 <strnlen_P>
    3d72:	8c 01       	movw	r16, r24
    3d74:	f9 2d       	mov	r31, r9
    3d76:	f0 68       	ori	r31, 0x80	; 128
    3d78:	9f 2e       	mov	r9, r31
    3d7a:	f3 fd       	sbrc	r31, 3
    3d7c:	18 c0       	rjmp	.+48     	; 0x3dae <vfprintf+0x4a0>
    3d7e:	85 2d       	mov	r24, r5
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	08 17       	cp	r16, r24
    3d84:	19 07       	cpc	r17, r25
    3d86:	98 f4       	brcc	.+38     	; 0x3dae <vfprintf+0x4a0>
    3d88:	b7 01       	movw	r22, r14
    3d8a:	80 e2       	ldi	r24, 0x20	; 32
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	2f d7       	rcall	.+3678   	; 0x4bee <fputc>
    3d90:	5a 94       	dec	r5
    3d92:	f5 cf       	rjmp	.-22     	; 0x3d7e <vfprintf+0x470>
    3d94:	f6 01       	movw	r30, r12
    3d96:	97 fc       	sbrc	r9, 7
    3d98:	85 91       	lpm	r24, Z+
    3d9a:	97 fe       	sbrs	r9, 7
    3d9c:	81 91       	ld	r24, Z+
    3d9e:	6f 01       	movw	r12, r30
    3da0:	b7 01       	movw	r22, r14
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	24 d7       	rcall	.+3656   	; 0x4bee <fputc>
    3da6:	51 10       	cpse	r5, r1
    3da8:	5a 94       	dec	r5
    3daa:	01 50       	subi	r16, 0x01	; 1
    3dac:	11 09       	sbc	r17, r1
    3dae:	01 15       	cp	r16, r1
    3db0:	11 05       	cpc	r17, r1
    3db2:	81 f7       	brne	.-32     	; 0x3d94 <vfprintf+0x486>
    3db4:	f0 c0       	rjmp	.+480    	; 0x3f96 <vfprintf+0x688>
    3db6:	84 36       	cpi	r24, 0x64	; 100
    3db8:	11 f0       	breq	.+4      	; 0x3dbe <vfprintf+0x4b0>
    3dba:	89 36       	cpi	r24, 0x69	; 105
    3dbc:	59 f5       	brne	.+86     	; 0x3e14 <vfprintf+0x506>
    3dbe:	56 01       	movw	r10, r12
    3dc0:	97 fe       	sbrs	r9, 7
    3dc2:	09 c0       	rjmp	.+18     	; 0x3dd6 <vfprintf+0x4c8>
    3dc4:	24 e0       	ldi	r18, 0x04	; 4
    3dc6:	a2 0e       	add	r10, r18
    3dc8:	b1 1c       	adc	r11, r1
    3dca:	f6 01       	movw	r30, r12
    3dcc:	60 81       	ld	r22, Z
    3dce:	71 81       	ldd	r23, Z+1	; 0x01
    3dd0:	82 81       	ldd	r24, Z+2	; 0x02
    3dd2:	93 81       	ldd	r25, Z+3	; 0x03
    3dd4:	0a c0       	rjmp	.+20     	; 0x3dea <vfprintf+0x4dc>
    3dd6:	f2 e0       	ldi	r31, 0x02	; 2
    3dd8:	af 0e       	add	r10, r31
    3dda:	b1 1c       	adc	r11, r1
    3ddc:	f6 01       	movw	r30, r12
    3dde:	60 81       	ld	r22, Z
    3de0:	71 81       	ldd	r23, Z+1	; 0x01
    3de2:	07 2e       	mov	r0, r23
    3de4:	00 0c       	add	r0, r0
    3de6:	88 0b       	sbc	r24, r24
    3de8:	99 0b       	sbc	r25, r25
    3dea:	f9 2d       	mov	r31, r9
    3dec:	ff 76       	andi	r31, 0x6F	; 111
    3dee:	9f 2e       	mov	r9, r31
    3df0:	97 ff       	sbrs	r25, 7
    3df2:	09 c0       	rjmp	.+18     	; 0x3e06 <vfprintf+0x4f8>
    3df4:	90 95       	com	r25
    3df6:	80 95       	com	r24
    3df8:	70 95       	com	r23
    3dfa:	61 95       	neg	r22
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    3e00:	9f 4f       	sbci	r25, 0xFF	; 255
    3e02:	f0 68       	ori	r31, 0x80	; 128
    3e04:	9f 2e       	mov	r9, r31
    3e06:	2a e0       	ldi	r18, 0x0A	; 10
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	a3 01       	movw	r20, r6
    3e0c:	70 d7       	rcall	.+3808   	; 0x4cee <__ultoa_invert>
    3e0e:	c8 2e       	mov	r12, r24
    3e10:	c6 18       	sub	r12, r6
    3e12:	3e c0       	rjmp	.+124    	; 0x3e90 <vfprintf+0x582>
    3e14:	09 2d       	mov	r16, r9
    3e16:	85 37       	cpi	r24, 0x75	; 117
    3e18:	21 f4       	brne	.+8      	; 0x3e22 <vfprintf+0x514>
    3e1a:	0f 7e       	andi	r16, 0xEF	; 239
    3e1c:	2a e0       	ldi	r18, 0x0A	; 10
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	1d c0       	rjmp	.+58     	; 0x3e5c <vfprintf+0x54e>
    3e22:	09 7f       	andi	r16, 0xF9	; 249
    3e24:	8f 36       	cpi	r24, 0x6F	; 111
    3e26:	91 f0       	breq	.+36     	; 0x3e4c <vfprintf+0x53e>
    3e28:	18 f4       	brcc	.+6      	; 0x3e30 <vfprintf+0x522>
    3e2a:	88 35       	cpi	r24, 0x58	; 88
    3e2c:	59 f0       	breq	.+22     	; 0x3e44 <vfprintf+0x536>
    3e2e:	bc c0       	rjmp	.+376    	; 0x3fa8 <vfprintf+0x69a>
    3e30:	80 37       	cpi	r24, 0x70	; 112
    3e32:	19 f0       	breq	.+6      	; 0x3e3a <vfprintf+0x52c>
    3e34:	88 37       	cpi	r24, 0x78	; 120
    3e36:	11 f0       	breq	.+4      	; 0x3e3c <vfprintf+0x52e>
    3e38:	b7 c0       	rjmp	.+366    	; 0x3fa8 <vfprintf+0x69a>
    3e3a:	00 61       	ori	r16, 0x10	; 16
    3e3c:	04 ff       	sbrs	r16, 4
    3e3e:	09 c0       	rjmp	.+18     	; 0x3e52 <vfprintf+0x544>
    3e40:	04 60       	ori	r16, 0x04	; 4
    3e42:	07 c0       	rjmp	.+14     	; 0x3e52 <vfprintf+0x544>
    3e44:	94 fe       	sbrs	r9, 4
    3e46:	08 c0       	rjmp	.+16     	; 0x3e58 <vfprintf+0x54a>
    3e48:	06 60       	ori	r16, 0x06	; 6
    3e4a:	06 c0       	rjmp	.+12     	; 0x3e58 <vfprintf+0x54a>
    3e4c:	28 e0       	ldi	r18, 0x08	; 8
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	05 c0       	rjmp	.+10     	; 0x3e5c <vfprintf+0x54e>
    3e52:	20 e1       	ldi	r18, 0x10	; 16
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	02 c0       	rjmp	.+4      	; 0x3e5c <vfprintf+0x54e>
    3e58:	20 e1       	ldi	r18, 0x10	; 16
    3e5a:	32 e0       	ldi	r19, 0x02	; 2
    3e5c:	56 01       	movw	r10, r12
    3e5e:	07 ff       	sbrs	r16, 7
    3e60:	09 c0       	rjmp	.+18     	; 0x3e74 <vfprintf+0x566>
    3e62:	84 e0       	ldi	r24, 0x04	; 4
    3e64:	a8 0e       	add	r10, r24
    3e66:	b1 1c       	adc	r11, r1
    3e68:	f6 01       	movw	r30, r12
    3e6a:	60 81       	ld	r22, Z
    3e6c:	71 81       	ldd	r23, Z+1	; 0x01
    3e6e:	82 81       	ldd	r24, Z+2	; 0x02
    3e70:	93 81       	ldd	r25, Z+3	; 0x03
    3e72:	08 c0       	rjmp	.+16     	; 0x3e84 <vfprintf+0x576>
    3e74:	f2 e0       	ldi	r31, 0x02	; 2
    3e76:	af 0e       	add	r10, r31
    3e78:	b1 1c       	adc	r11, r1
    3e7a:	f6 01       	movw	r30, r12
    3e7c:	60 81       	ld	r22, Z
    3e7e:	71 81       	ldd	r23, Z+1	; 0x01
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	a3 01       	movw	r20, r6
    3e86:	33 d7       	rcall	.+3686   	; 0x4cee <__ultoa_invert>
    3e88:	c8 2e       	mov	r12, r24
    3e8a:	c6 18       	sub	r12, r6
    3e8c:	0f 77       	andi	r16, 0x7F	; 127
    3e8e:	90 2e       	mov	r9, r16
    3e90:	96 fe       	sbrs	r9, 6
    3e92:	0b c0       	rjmp	.+22     	; 0x3eaa <vfprintf+0x59c>
    3e94:	09 2d       	mov	r16, r9
    3e96:	0e 7f       	andi	r16, 0xFE	; 254
    3e98:	c1 16       	cp	r12, r17
    3e9a:	50 f4       	brcc	.+20     	; 0x3eb0 <vfprintf+0x5a2>
    3e9c:	94 fe       	sbrs	r9, 4
    3e9e:	0a c0       	rjmp	.+20     	; 0x3eb4 <vfprintf+0x5a6>
    3ea0:	92 fc       	sbrc	r9, 2
    3ea2:	08 c0       	rjmp	.+16     	; 0x3eb4 <vfprintf+0x5a6>
    3ea4:	09 2d       	mov	r16, r9
    3ea6:	0e 7e       	andi	r16, 0xEE	; 238
    3ea8:	05 c0       	rjmp	.+10     	; 0x3eb4 <vfprintf+0x5a6>
    3eaa:	dc 2c       	mov	r13, r12
    3eac:	09 2d       	mov	r16, r9
    3eae:	03 c0       	rjmp	.+6      	; 0x3eb6 <vfprintf+0x5a8>
    3eb0:	dc 2c       	mov	r13, r12
    3eb2:	01 c0       	rjmp	.+2      	; 0x3eb6 <vfprintf+0x5a8>
    3eb4:	d1 2e       	mov	r13, r17
    3eb6:	04 ff       	sbrs	r16, 4
    3eb8:	0d c0       	rjmp	.+26     	; 0x3ed4 <vfprintf+0x5c6>
    3eba:	fe 01       	movw	r30, r28
    3ebc:	ec 0d       	add	r30, r12
    3ebe:	f1 1d       	adc	r31, r1
    3ec0:	80 81       	ld	r24, Z
    3ec2:	80 33       	cpi	r24, 0x30	; 48
    3ec4:	11 f4       	brne	.+4      	; 0x3eca <vfprintf+0x5bc>
    3ec6:	09 7e       	andi	r16, 0xE9	; 233
    3ec8:	09 c0       	rjmp	.+18     	; 0x3edc <vfprintf+0x5ce>
    3eca:	02 ff       	sbrs	r16, 2
    3ecc:	06 c0       	rjmp	.+12     	; 0x3eda <vfprintf+0x5cc>
    3ece:	d3 94       	inc	r13
    3ed0:	d3 94       	inc	r13
    3ed2:	04 c0       	rjmp	.+8      	; 0x3edc <vfprintf+0x5ce>
    3ed4:	80 2f       	mov	r24, r16
    3ed6:	86 78       	andi	r24, 0x86	; 134
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <vfprintf+0x5ce>
    3eda:	d3 94       	inc	r13
    3edc:	03 fd       	sbrc	r16, 3
    3ede:	10 c0       	rjmp	.+32     	; 0x3f00 <vfprintf+0x5f2>
    3ee0:	00 ff       	sbrs	r16, 0
    3ee2:	06 c0       	rjmp	.+12     	; 0x3ef0 <vfprintf+0x5e2>
    3ee4:	1c 2d       	mov	r17, r12
    3ee6:	d5 14       	cp	r13, r5
    3ee8:	78 f4       	brcc	.+30     	; 0x3f08 <vfprintf+0x5fa>
    3eea:	15 0d       	add	r17, r5
    3eec:	1d 19       	sub	r17, r13
    3eee:	0c c0       	rjmp	.+24     	; 0x3f08 <vfprintf+0x5fa>
    3ef0:	d5 14       	cp	r13, r5
    3ef2:	50 f4       	brcc	.+20     	; 0x3f08 <vfprintf+0x5fa>
    3ef4:	b7 01       	movw	r22, r14
    3ef6:	80 e2       	ldi	r24, 0x20	; 32
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	79 d6       	rcall	.+3314   	; 0x4bee <fputc>
    3efc:	d3 94       	inc	r13
    3efe:	f8 cf       	rjmp	.-16     	; 0x3ef0 <vfprintf+0x5e2>
    3f00:	d5 14       	cp	r13, r5
    3f02:	10 f4       	brcc	.+4      	; 0x3f08 <vfprintf+0x5fa>
    3f04:	5d 18       	sub	r5, r13
    3f06:	01 c0       	rjmp	.+2      	; 0x3f0a <vfprintf+0x5fc>
    3f08:	51 2c       	mov	r5, r1
    3f0a:	04 ff       	sbrs	r16, 4
    3f0c:	0f c0       	rjmp	.+30     	; 0x3f2c <vfprintf+0x61e>
    3f0e:	b7 01       	movw	r22, r14
    3f10:	80 e3       	ldi	r24, 0x30	; 48
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	6c d6       	rcall	.+3288   	; 0x4bee <fputc>
    3f16:	02 ff       	sbrs	r16, 2
    3f18:	16 c0       	rjmp	.+44     	; 0x3f46 <vfprintf+0x638>
    3f1a:	01 fd       	sbrc	r16, 1
    3f1c:	03 c0       	rjmp	.+6      	; 0x3f24 <vfprintf+0x616>
    3f1e:	88 e7       	ldi	r24, 0x78	; 120
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	02 c0       	rjmp	.+4      	; 0x3f28 <vfprintf+0x61a>
    3f24:	88 e5       	ldi	r24, 0x58	; 88
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	b7 01       	movw	r22, r14
    3f2a:	0c c0       	rjmp	.+24     	; 0x3f44 <vfprintf+0x636>
    3f2c:	80 2f       	mov	r24, r16
    3f2e:	86 78       	andi	r24, 0x86	; 134
    3f30:	51 f0       	breq	.+20     	; 0x3f46 <vfprintf+0x638>
    3f32:	01 ff       	sbrs	r16, 1
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <vfprintf+0x62c>
    3f36:	8b e2       	ldi	r24, 0x2B	; 43
    3f38:	01 c0       	rjmp	.+2      	; 0x3f3c <vfprintf+0x62e>
    3f3a:	80 e2       	ldi	r24, 0x20	; 32
    3f3c:	07 fd       	sbrc	r16, 7
    3f3e:	8d e2       	ldi	r24, 0x2D	; 45
    3f40:	b7 01       	movw	r22, r14
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	54 d6       	rcall	.+3240   	; 0x4bee <fputc>
    3f46:	c1 16       	cp	r12, r17
    3f48:	30 f4       	brcc	.+12     	; 0x3f56 <vfprintf+0x648>
    3f4a:	b7 01       	movw	r22, r14
    3f4c:	80 e3       	ldi	r24, 0x30	; 48
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	4e d6       	rcall	.+3228   	; 0x4bee <fputc>
    3f52:	11 50       	subi	r17, 0x01	; 1
    3f54:	f8 cf       	rjmp	.-16     	; 0x3f46 <vfprintf+0x638>
    3f56:	ca 94       	dec	r12
    3f58:	f3 01       	movw	r30, r6
    3f5a:	ec 0d       	add	r30, r12
    3f5c:	f1 1d       	adc	r31, r1
    3f5e:	80 81       	ld	r24, Z
    3f60:	b7 01       	movw	r22, r14
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	44 d6       	rcall	.+3208   	; 0x4bee <fputc>
    3f66:	c1 10       	cpse	r12, r1
    3f68:	f6 cf       	rjmp	.-20     	; 0x3f56 <vfprintf+0x648>
    3f6a:	15 c0       	rjmp	.+42     	; 0x3f96 <vfprintf+0x688>
    3f6c:	f4 e0       	ldi	r31, 0x04	; 4
    3f6e:	f5 15       	cp	r31, r5
    3f70:	50 f5       	brcc	.+84     	; 0x3fc6 <vfprintf+0x6b8>
    3f72:	84 e0       	ldi	r24, 0x04	; 4
    3f74:	58 1a       	sub	r5, r24
    3f76:	93 fe       	sbrs	r9, 3
    3f78:	1e c0       	rjmp	.+60     	; 0x3fb6 <vfprintf+0x6a8>
    3f7a:	01 11       	cpse	r16, r1
    3f7c:	25 c0       	rjmp	.+74     	; 0x3fc8 <vfprintf+0x6ba>
    3f7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f80:	23 ff       	sbrs	r18, 3
    3f82:	27 c0       	rjmp	.+78     	; 0x3fd2 <vfprintf+0x6c4>
    3f84:	0c e1       	ldi	r16, 0x1C	; 28
    3f86:	12 e0       	ldi	r17, 0x02	; 2
    3f88:	39 2d       	mov	r19, r9
    3f8a:	30 71       	andi	r19, 0x10	; 16
    3f8c:	93 2e       	mov	r9, r19
    3f8e:	f8 01       	movw	r30, r16
    3f90:	84 91       	lpm	r24, Z
    3f92:	81 11       	cpse	r24, r1
    3f94:	21 c0       	rjmp	.+66     	; 0x3fd8 <vfprintf+0x6ca>
    3f96:	55 20       	and	r5, r5
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <vfprintf+0x68e>
    3f9a:	f9 cc       	rjmp	.-1550   	; 0x398e <vfprintf+0x80>
    3f9c:	b7 01       	movw	r22, r14
    3f9e:	80 e2       	ldi	r24, 0x20	; 32
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	25 d6       	rcall	.+3146   	; 0x4bee <fputc>
    3fa4:	5a 94       	dec	r5
    3fa6:	f7 cf       	rjmp	.-18     	; 0x3f96 <vfprintf+0x688>
    3fa8:	f7 01       	movw	r30, r14
    3faa:	86 81       	ldd	r24, Z+6	; 0x06
    3fac:	97 81       	ldd	r25, Z+7	; 0x07
    3fae:	23 c0       	rjmp	.+70     	; 0x3ff6 <vfprintf+0x6e8>
    3fb0:	8f ef       	ldi	r24, 0xFF	; 255
    3fb2:	9f ef       	ldi	r25, 0xFF	; 255
    3fb4:	20 c0       	rjmp	.+64     	; 0x3ff6 <vfprintf+0x6e8>
    3fb6:	b7 01       	movw	r22, r14
    3fb8:	80 e2       	ldi	r24, 0x20	; 32
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	18 d6       	rcall	.+3120   	; 0x4bee <fputc>
    3fbe:	5a 94       	dec	r5
    3fc0:	51 10       	cpse	r5, r1
    3fc2:	f9 cf       	rjmp	.-14     	; 0x3fb6 <vfprintf+0x6a8>
    3fc4:	da cf       	rjmp	.-76     	; 0x3f7a <vfprintf+0x66c>
    3fc6:	51 2c       	mov	r5, r1
    3fc8:	b7 01       	movw	r22, r14
    3fca:	80 2f       	mov	r24, r16
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0f d6       	rcall	.+3102   	; 0x4bee <fputc>
    3fd0:	d6 cf       	rjmp	.-84     	; 0x3f7e <vfprintf+0x670>
    3fd2:	00 e2       	ldi	r16, 0x20	; 32
    3fd4:	12 e0       	ldi	r17, 0x02	; 2
    3fd6:	d8 cf       	rjmp	.-80     	; 0x3f88 <vfprintf+0x67a>
    3fd8:	91 10       	cpse	r9, r1
    3fda:	80 52       	subi	r24, 0x20	; 32
    3fdc:	b7 01       	movw	r22, r14
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	06 d6       	rcall	.+3084   	; 0x4bee <fputc>
    3fe2:	0f 5f       	subi	r16, 0xFF	; 255
    3fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe6:	d3 cf       	rjmp	.-90     	; 0x3f8e <vfprintf+0x680>
    3fe8:	23 e0       	ldi	r18, 0x03	; 3
    3fea:	25 15       	cp	r18, r5
    3fec:	10 f4       	brcc	.+4      	; 0x3ff2 <vfprintf+0x6e4>
    3fee:	83 e0       	ldi	r24, 0x03	; 3
    3ff0:	c1 cf       	rjmp	.-126    	; 0x3f74 <vfprintf+0x666>
    3ff2:	51 2c       	mov	r5, r1
    3ff4:	c4 cf       	rjmp	.-120    	; 0x3f7e <vfprintf+0x670>
    3ff6:	60 96       	adiw	r28, 0x10	; 16
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	cd bf       	out	0x3d, r28	; 61
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	ff 90       	pop	r15
    400c:	ef 90       	pop	r14
    400e:	df 90       	pop	r13
    4010:	cf 90       	pop	r12
    4012:	bf 90       	pop	r11
    4014:	af 90       	pop	r10
    4016:	9f 90       	pop	r9
    4018:	8f 90       	pop	r8
    401a:	7f 90       	pop	r7
    401c:	6f 90       	pop	r6
    401e:	5f 90       	pop	r5
    4020:	4f 90       	pop	r4
    4022:	3f 90       	pop	r3
    4024:	2f 90       	pop	r2
    4026:	08 95       	ret

00004028 <__subsf3>:
    4028:	50 58       	subi	r21, 0x80	; 128

0000402a <__addsf3>:
    402a:	bb 27       	eor	r27, r27
    402c:	aa 27       	eor	r26, r26
    402e:	0e d0       	rcall	.+28     	; 0x404c <__addsf3x>
    4030:	65 c1       	rjmp	.+714    	; 0x42fc <__fp_round>
    4032:	56 d1       	rcall	.+684    	; 0x42e0 <__fp_pscA>
    4034:	30 f0       	brcs	.+12     	; 0x4042 <__addsf3+0x18>
    4036:	5b d1       	rcall	.+694    	; 0x42ee <__fp_pscB>
    4038:	20 f0       	brcs	.+8      	; 0x4042 <__addsf3+0x18>
    403a:	31 f4       	brne	.+12     	; 0x4048 <__addsf3+0x1e>
    403c:	9f 3f       	cpi	r25, 0xFF	; 255
    403e:	11 f4       	brne	.+4      	; 0x4044 <__addsf3+0x1a>
    4040:	1e f4       	brtc	.+6      	; 0x4048 <__addsf3+0x1e>
    4042:	4b c1       	rjmp	.+662    	; 0x42da <__fp_nan>
    4044:	0e f4       	brtc	.+2      	; 0x4048 <__addsf3+0x1e>
    4046:	e0 95       	com	r30
    4048:	e7 fb       	bst	r30, 7
    404a:	18 c1       	rjmp	.+560    	; 0x427c <__fp_inf>

0000404c <__addsf3x>:
    404c:	e9 2f       	mov	r30, r25
    404e:	0e 94 cf 12 	call	0x259e	; 0x259e <__fp_split3>
    4052:	78 f3       	brcs	.-34     	; 0x4032 <__addsf3+0x8>
    4054:	ba 17       	cp	r27, r26
    4056:	62 07       	cpc	r22, r18
    4058:	73 07       	cpc	r23, r19
    405a:	84 07       	cpc	r24, r20
    405c:	95 07       	cpc	r25, r21
    405e:	20 f0       	brcs	.+8      	; 0x4068 <__addsf3x+0x1c>
    4060:	79 f4       	brne	.+30     	; 0x4080 <__addsf3x+0x34>
    4062:	a6 f5       	brtc	.+104    	; 0x40cc <__addsf3x+0x80>
    4064:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__fp_zero>
    4068:	0e f4       	brtc	.+2      	; 0x406c <__addsf3x+0x20>
    406a:	e0 95       	com	r30
    406c:	0b 2e       	mov	r0, r27
    406e:	ba 2f       	mov	r27, r26
    4070:	a0 2d       	mov	r26, r0
    4072:	0b 01       	movw	r0, r22
    4074:	b9 01       	movw	r22, r18
    4076:	90 01       	movw	r18, r0
    4078:	0c 01       	movw	r0, r24
    407a:	ca 01       	movw	r24, r20
    407c:	a0 01       	movw	r20, r0
    407e:	11 24       	eor	r1, r1
    4080:	ff 27       	eor	r31, r31
    4082:	59 1b       	sub	r21, r25
    4084:	99 f0       	breq	.+38     	; 0x40ac <__addsf3x+0x60>
    4086:	59 3f       	cpi	r21, 0xF9	; 249
    4088:	50 f4       	brcc	.+20     	; 0x409e <__addsf3x+0x52>
    408a:	50 3e       	cpi	r21, 0xE0	; 224
    408c:	68 f1       	brcs	.+90     	; 0x40e8 <__addsf3x+0x9c>
    408e:	1a 16       	cp	r1, r26
    4090:	f0 40       	sbci	r31, 0x00	; 0
    4092:	a2 2f       	mov	r26, r18
    4094:	23 2f       	mov	r18, r19
    4096:	34 2f       	mov	r19, r20
    4098:	44 27       	eor	r20, r20
    409a:	58 5f       	subi	r21, 0xF8	; 248
    409c:	f3 cf       	rjmp	.-26     	; 0x4084 <__addsf3x+0x38>
    409e:	46 95       	lsr	r20
    40a0:	37 95       	ror	r19
    40a2:	27 95       	ror	r18
    40a4:	a7 95       	ror	r26
    40a6:	f0 40       	sbci	r31, 0x00	; 0
    40a8:	53 95       	inc	r21
    40aa:	c9 f7       	brne	.-14     	; 0x409e <__addsf3x+0x52>
    40ac:	7e f4       	brtc	.+30     	; 0x40cc <__addsf3x+0x80>
    40ae:	1f 16       	cp	r1, r31
    40b0:	ba 0b       	sbc	r27, r26
    40b2:	62 0b       	sbc	r22, r18
    40b4:	73 0b       	sbc	r23, r19
    40b6:	84 0b       	sbc	r24, r20
    40b8:	ba f0       	brmi	.+46     	; 0x40e8 <__addsf3x+0x9c>
    40ba:	91 50       	subi	r25, 0x01	; 1
    40bc:	a1 f0       	breq	.+40     	; 0x40e6 <__addsf3x+0x9a>
    40be:	ff 0f       	add	r31, r31
    40c0:	bb 1f       	adc	r27, r27
    40c2:	66 1f       	adc	r22, r22
    40c4:	77 1f       	adc	r23, r23
    40c6:	88 1f       	adc	r24, r24
    40c8:	c2 f7       	brpl	.-16     	; 0x40ba <__addsf3x+0x6e>
    40ca:	0e c0       	rjmp	.+28     	; 0x40e8 <__addsf3x+0x9c>
    40cc:	ba 0f       	add	r27, r26
    40ce:	62 1f       	adc	r22, r18
    40d0:	73 1f       	adc	r23, r19
    40d2:	84 1f       	adc	r24, r20
    40d4:	48 f4       	brcc	.+18     	; 0x40e8 <__addsf3x+0x9c>
    40d6:	87 95       	ror	r24
    40d8:	77 95       	ror	r23
    40da:	67 95       	ror	r22
    40dc:	b7 95       	ror	r27
    40de:	f7 95       	ror	r31
    40e0:	9e 3f       	cpi	r25, 0xFE	; 254
    40e2:	08 f0       	brcs	.+2      	; 0x40e6 <__addsf3x+0x9a>
    40e4:	b1 cf       	rjmp	.-158    	; 0x4048 <__addsf3+0x1e>
    40e6:	93 95       	inc	r25
    40e8:	88 0f       	add	r24, r24
    40ea:	08 f0       	brcs	.+2      	; 0x40ee <__addsf3x+0xa2>
    40ec:	99 27       	eor	r25, r25
    40ee:	ee 0f       	add	r30, r30
    40f0:	97 95       	ror	r25
    40f2:	87 95       	ror	r24
    40f4:	08 95       	ret

000040f6 <__divsf3>:
    40f6:	0d d0       	rcall	.+26     	; 0x4112 <__divsf3x>
    40f8:	01 c1       	rjmp	.+514    	; 0x42fc <__fp_round>
    40fa:	f9 d0       	rcall	.+498    	; 0x42ee <__fp_pscB>
    40fc:	48 f0       	brcs	.+18     	; 0x4110 <__divsf3+0x1a>
    40fe:	f0 d0       	rcall	.+480    	; 0x42e0 <__fp_pscA>
    4100:	38 f0       	brcs	.+14     	; 0x4110 <__divsf3+0x1a>
    4102:	21 f4       	brne	.+8      	; 0x410c <__divsf3+0x16>
    4104:	5f 3f       	cpi	r21, 0xFF	; 255
    4106:	21 f0       	breq	.+8      	; 0x4110 <__divsf3+0x1a>
    4108:	b9 c0       	rjmp	.+370    	; 0x427c <__fp_inf>
    410a:	51 11       	cpse	r21, r1
    410c:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_szero>
    4110:	e4 c0       	rjmp	.+456    	; 0x42da <__fp_nan>

00004112 <__divsf3x>:
    4112:	0e 94 cf 12 	call	0x259e	; 0x259e <__fp_split3>
    4116:	88 f3       	brcs	.-30     	; 0x40fa <__divsf3+0x4>

00004118 <__divsf3_pse>:
    4118:	99 23       	and	r25, r25
    411a:	b9 f3       	breq	.-18     	; 0x410a <__divsf3+0x14>
    411c:	55 23       	and	r21, r21
    411e:	a1 f3       	breq	.-24     	; 0x4108 <__divsf3+0x12>
    4120:	95 1b       	sub	r25, r21
    4122:	55 0b       	sbc	r21, r21
    4124:	bb 27       	eor	r27, r27
    4126:	aa 27       	eor	r26, r26
    4128:	62 17       	cp	r22, r18
    412a:	73 07       	cpc	r23, r19
    412c:	84 07       	cpc	r24, r20
    412e:	38 f0       	brcs	.+14     	; 0x413e <__divsf3_pse+0x26>
    4130:	9f 5f       	subi	r25, 0xFF	; 255
    4132:	5f 4f       	sbci	r21, 0xFF	; 255
    4134:	22 0f       	add	r18, r18
    4136:	33 1f       	adc	r19, r19
    4138:	44 1f       	adc	r20, r20
    413a:	aa 1f       	adc	r26, r26
    413c:	a9 f3       	breq	.-22     	; 0x4128 <__divsf3_pse+0x10>
    413e:	34 d0       	rcall	.+104    	; 0x41a8 <__divsf3_pse+0x90>
    4140:	0e 2e       	mov	r0, r30
    4142:	3a f0       	brmi	.+14     	; 0x4152 <__divsf3_pse+0x3a>
    4144:	e0 e8       	ldi	r30, 0x80	; 128
    4146:	31 d0       	rcall	.+98     	; 0x41aa <__divsf3_pse+0x92>
    4148:	91 50       	subi	r25, 0x01	; 1
    414a:	50 40       	sbci	r21, 0x00	; 0
    414c:	e6 95       	lsr	r30
    414e:	00 1c       	adc	r0, r0
    4150:	ca f7       	brpl	.-14     	; 0x4144 <__divsf3_pse+0x2c>
    4152:	2a d0       	rcall	.+84     	; 0x41a8 <__divsf3_pse+0x90>
    4154:	fe 2f       	mov	r31, r30
    4156:	28 d0       	rcall	.+80     	; 0x41a8 <__divsf3_pse+0x90>
    4158:	66 0f       	add	r22, r22
    415a:	77 1f       	adc	r23, r23
    415c:	88 1f       	adc	r24, r24
    415e:	bb 1f       	adc	r27, r27
    4160:	26 17       	cp	r18, r22
    4162:	37 07       	cpc	r19, r23
    4164:	48 07       	cpc	r20, r24
    4166:	ab 07       	cpc	r26, r27
    4168:	b0 e8       	ldi	r27, 0x80	; 128
    416a:	09 f0       	breq	.+2      	; 0x416e <__divsf3_pse+0x56>
    416c:	bb 0b       	sbc	r27, r27
    416e:	80 2d       	mov	r24, r0
    4170:	bf 01       	movw	r22, r30
    4172:	ff 27       	eor	r31, r31
    4174:	93 58       	subi	r25, 0x83	; 131
    4176:	5f 4f       	sbci	r21, 0xFF	; 255
    4178:	32 f0       	brmi	.+12     	; 0x4186 <__divsf3_pse+0x6e>
    417a:	9e 3f       	cpi	r25, 0xFE	; 254
    417c:	51 05       	cpc	r21, r1
    417e:	70 f0       	brcs	.+28     	; 0x419c <__divsf3_pse+0x84>
    4180:	7d c0       	rjmp	.+250    	; 0x427c <__fp_inf>
    4182:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_szero>
    4186:	5f 3f       	cpi	r21, 0xFF	; 255
    4188:	e4 f3       	brlt	.-8      	; 0x4182 <__divsf3_pse+0x6a>
    418a:	98 3e       	cpi	r25, 0xE8	; 232
    418c:	d4 f3       	brlt	.-12     	; 0x4182 <__divsf3_pse+0x6a>
    418e:	86 95       	lsr	r24
    4190:	77 95       	ror	r23
    4192:	67 95       	ror	r22
    4194:	b7 95       	ror	r27
    4196:	f7 95       	ror	r31
    4198:	9f 5f       	subi	r25, 0xFF	; 255
    419a:	c9 f7       	brne	.-14     	; 0x418e <__divsf3_pse+0x76>
    419c:	88 0f       	add	r24, r24
    419e:	91 1d       	adc	r25, r1
    41a0:	96 95       	lsr	r25
    41a2:	87 95       	ror	r24
    41a4:	97 f9       	bld	r25, 7
    41a6:	08 95       	ret
    41a8:	e1 e0       	ldi	r30, 0x01	; 1
    41aa:	66 0f       	add	r22, r22
    41ac:	77 1f       	adc	r23, r23
    41ae:	88 1f       	adc	r24, r24
    41b0:	bb 1f       	adc	r27, r27
    41b2:	62 17       	cp	r22, r18
    41b4:	73 07       	cpc	r23, r19
    41b6:	84 07       	cpc	r24, r20
    41b8:	ba 07       	cpc	r27, r26
    41ba:	20 f0       	brcs	.+8      	; 0x41c4 <__divsf3_pse+0xac>
    41bc:	62 1b       	sub	r22, r18
    41be:	73 0b       	sbc	r23, r19
    41c0:	84 0b       	sbc	r24, r20
    41c2:	ba 0b       	sbc	r27, r26
    41c4:	ee 1f       	adc	r30, r30
    41c6:	88 f7       	brcc	.-30     	; 0x41aa <__divsf3_pse+0x92>
    41c8:	e0 95       	com	r30
    41ca:	08 95       	ret

000041cc <__fixsfsi>:
    41cc:	0e 94 a3 12 	call	0x2546	; 0x2546 <__fixunssfsi>
    41d0:	68 94       	set
    41d2:	b1 11       	cpse	r27, r1
    41d4:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_szero>
    41d8:	08 95       	ret

000041da <__floatunsisf>:
    41da:	e8 94       	clt
    41dc:	09 c0       	rjmp	.+18     	; 0x41f0 <__floatsisf+0x12>

000041de <__floatsisf>:
    41de:	97 fb       	bst	r25, 7
    41e0:	3e f4       	brtc	.+14     	; 0x41f0 <__floatsisf+0x12>
    41e2:	90 95       	com	r25
    41e4:	80 95       	com	r24
    41e6:	70 95       	com	r23
    41e8:	61 95       	neg	r22
    41ea:	7f 4f       	sbci	r23, 0xFF	; 255
    41ec:	8f 4f       	sbci	r24, 0xFF	; 255
    41ee:	9f 4f       	sbci	r25, 0xFF	; 255
    41f0:	99 23       	and	r25, r25
    41f2:	a9 f0       	breq	.+42     	; 0x421e <__floatsisf+0x40>
    41f4:	f9 2f       	mov	r31, r25
    41f6:	96 e9       	ldi	r25, 0x96	; 150
    41f8:	bb 27       	eor	r27, r27
    41fa:	93 95       	inc	r25
    41fc:	f6 95       	lsr	r31
    41fe:	87 95       	ror	r24
    4200:	77 95       	ror	r23
    4202:	67 95       	ror	r22
    4204:	b7 95       	ror	r27
    4206:	f1 11       	cpse	r31, r1
    4208:	f8 cf       	rjmp	.-16     	; 0x41fa <__floatsisf+0x1c>
    420a:	fa f4       	brpl	.+62     	; 0x424a <__floatsisf+0x6c>
    420c:	bb 0f       	add	r27, r27
    420e:	11 f4       	brne	.+4      	; 0x4214 <__floatsisf+0x36>
    4210:	60 ff       	sbrs	r22, 0
    4212:	1b c0       	rjmp	.+54     	; 0x424a <__floatsisf+0x6c>
    4214:	6f 5f       	subi	r22, 0xFF	; 255
    4216:	7f 4f       	sbci	r23, 0xFF	; 255
    4218:	8f 4f       	sbci	r24, 0xFF	; 255
    421a:	9f 4f       	sbci	r25, 0xFF	; 255
    421c:	16 c0       	rjmp	.+44     	; 0x424a <__floatsisf+0x6c>
    421e:	88 23       	and	r24, r24
    4220:	11 f0       	breq	.+4      	; 0x4226 <__floatsisf+0x48>
    4222:	96 e9       	ldi	r25, 0x96	; 150
    4224:	11 c0       	rjmp	.+34     	; 0x4248 <__floatsisf+0x6a>
    4226:	77 23       	and	r23, r23
    4228:	21 f0       	breq	.+8      	; 0x4232 <__floatsisf+0x54>
    422a:	9e e8       	ldi	r25, 0x8E	; 142
    422c:	87 2f       	mov	r24, r23
    422e:	76 2f       	mov	r23, r22
    4230:	05 c0       	rjmp	.+10     	; 0x423c <__floatsisf+0x5e>
    4232:	66 23       	and	r22, r22
    4234:	71 f0       	breq	.+28     	; 0x4252 <__floatsisf+0x74>
    4236:	96 e8       	ldi	r25, 0x86	; 134
    4238:	86 2f       	mov	r24, r22
    423a:	70 e0       	ldi	r23, 0x00	; 0
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	2a f0       	brmi	.+10     	; 0x424a <__floatsisf+0x6c>
    4240:	9a 95       	dec	r25
    4242:	66 0f       	add	r22, r22
    4244:	77 1f       	adc	r23, r23
    4246:	88 1f       	adc	r24, r24
    4248:	da f7       	brpl	.-10     	; 0x4240 <__floatsisf+0x62>
    424a:	88 0f       	add	r24, r24
    424c:	96 95       	lsr	r25
    424e:	87 95       	ror	r24
    4250:	97 f9       	bld	r25, 7
    4252:	08 95       	ret

00004254 <floor>:
    4254:	64 d0       	rcall	.+200    	; 0x431e <__fp_trunc>
    4256:	88 f0       	brcs	.+34     	; 0x427a <floor+0x26>
    4258:	9f 37       	cpi	r25, 0x7F	; 127
    425a:	48 f4       	brcc	.+18     	; 0x426e <floor+0x1a>
    425c:	91 11       	cpse	r25, r1
    425e:	16 f0       	brts	.+4      	; 0x4264 <floor+0x10>
    4260:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_szero>
    4264:	60 e0       	ldi	r22, 0x00	; 0
    4266:	70 e0       	ldi	r23, 0x00	; 0
    4268:	80 e8       	ldi	r24, 0x80	; 128
    426a:	9f eb       	ldi	r25, 0xBF	; 191
    426c:	08 95       	ret
    426e:	26 f4       	brtc	.+8      	; 0x4278 <floor+0x24>
    4270:	1b 16       	cp	r1, r27
    4272:	61 1d       	adc	r22, r1
    4274:	71 1d       	adc	r23, r1
    4276:	81 1d       	adc	r24, r1
    4278:	07 c0       	rjmp	.+14     	; 0x4288 <__fp_mintl>
    427a:	21 c0       	rjmp	.+66     	; 0x42be <__fp_mpack>

0000427c <__fp_inf>:
    427c:	97 f9       	bld	r25, 7
    427e:	9f 67       	ori	r25, 0x7F	; 127
    4280:	80 e8       	ldi	r24, 0x80	; 128
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	08 95       	ret

00004288 <__fp_mintl>:
    4288:	88 23       	and	r24, r24
    428a:	71 f4       	brne	.+28     	; 0x42a8 <__fp_mintl+0x20>
    428c:	77 23       	and	r23, r23
    428e:	21 f0       	breq	.+8      	; 0x4298 <__fp_mintl+0x10>
    4290:	98 50       	subi	r25, 0x08	; 8
    4292:	87 2b       	or	r24, r23
    4294:	76 2f       	mov	r23, r22
    4296:	07 c0       	rjmp	.+14     	; 0x42a6 <__fp_mintl+0x1e>
    4298:	66 23       	and	r22, r22
    429a:	11 f4       	brne	.+4      	; 0x42a0 <__fp_mintl+0x18>
    429c:	99 27       	eor	r25, r25
    429e:	0d c0       	rjmp	.+26     	; 0x42ba <__fp_mintl+0x32>
    42a0:	90 51       	subi	r25, 0x10	; 16
    42a2:	86 2b       	or	r24, r22
    42a4:	70 e0       	ldi	r23, 0x00	; 0
    42a6:	60 e0       	ldi	r22, 0x00	; 0
    42a8:	2a f0       	brmi	.+10     	; 0x42b4 <__fp_mintl+0x2c>
    42aa:	9a 95       	dec	r25
    42ac:	66 0f       	add	r22, r22
    42ae:	77 1f       	adc	r23, r23
    42b0:	88 1f       	adc	r24, r24
    42b2:	da f7       	brpl	.-10     	; 0x42aa <__fp_mintl+0x22>
    42b4:	88 0f       	add	r24, r24
    42b6:	96 95       	lsr	r25
    42b8:	87 95       	ror	r24
    42ba:	97 f9       	bld	r25, 7
    42bc:	08 95       	ret

000042be <__fp_mpack>:
    42be:	9f 3f       	cpi	r25, 0xFF	; 255
    42c0:	31 f0       	breq	.+12     	; 0x42ce <__fp_mpack_finite+0xc>

000042c2 <__fp_mpack_finite>:
    42c2:	91 50       	subi	r25, 0x01	; 1
    42c4:	20 f4       	brcc	.+8      	; 0x42ce <__fp_mpack_finite+0xc>
    42c6:	87 95       	ror	r24
    42c8:	77 95       	ror	r23
    42ca:	67 95       	ror	r22
    42cc:	b7 95       	ror	r27
    42ce:	88 0f       	add	r24, r24
    42d0:	91 1d       	adc	r25, r1
    42d2:	96 95       	lsr	r25
    42d4:	87 95       	ror	r24
    42d6:	97 f9       	bld	r25, 7
    42d8:	08 95       	ret

000042da <__fp_nan>:
    42da:	9f ef       	ldi	r25, 0xFF	; 255
    42dc:	80 ec       	ldi	r24, 0xC0	; 192
    42de:	08 95       	ret

000042e0 <__fp_pscA>:
    42e0:	00 24       	eor	r0, r0
    42e2:	0a 94       	dec	r0
    42e4:	16 16       	cp	r1, r22
    42e6:	17 06       	cpc	r1, r23
    42e8:	18 06       	cpc	r1, r24
    42ea:	09 06       	cpc	r0, r25
    42ec:	08 95       	ret

000042ee <__fp_pscB>:
    42ee:	00 24       	eor	r0, r0
    42f0:	0a 94       	dec	r0
    42f2:	12 16       	cp	r1, r18
    42f4:	13 06       	cpc	r1, r19
    42f6:	14 06       	cpc	r1, r20
    42f8:	05 06       	cpc	r0, r21
    42fa:	08 95       	ret

000042fc <__fp_round>:
    42fc:	09 2e       	mov	r0, r25
    42fe:	03 94       	inc	r0
    4300:	00 0c       	add	r0, r0
    4302:	11 f4       	brne	.+4      	; 0x4308 <__fp_round+0xc>
    4304:	88 23       	and	r24, r24
    4306:	52 f0       	brmi	.+20     	; 0x431c <__fp_round+0x20>
    4308:	bb 0f       	add	r27, r27
    430a:	40 f4       	brcc	.+16     	; 0x431c <__fp_round+0x20>
    430c:	bf 2b       	or	r27, r31
    430e:	11 f4       	brne	.+4      	; 0x4314 <__fp_round+0x18>
    4310:	60 ff       	sbrs	r22, 0
    4312:	04 c0       	rjmp	.+8      	; 0x431c <__fp_round+0x20>
    4314:	6f 5f       	subi	r22, 0xFF	; 255
    4316:	7f 4f       	sbci	r23, 0xFF	; 255
    4318:	8f 4f       	sbci	r24, 0xFF	; 255
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	08 95       	ret

0000431e <__fp_trunc>:
    431e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fp_splitA>
    4322:	a0 f0       	brcs	.+40     	; 0x434c <__fp_trunc+0x2e>
    4324:	be e7       	ldi	r27, 0x7E	; 126
    4326:	b9 17       	cp	r27, r25
    4328:	88 f4       	brcc	.+34     	; 0x434c <__fp_trunc+0x2e>
    432a:	bb 27       	eor	r27, r27
    432c:	9f 38       	cpi	r25, 0x8F	; 143
    432e:	60 f4       	brcc	.+24     	; 0x4348 <__fp_trunc+0x2a>
    4330:	16 16       	cp	r1, r22
    4332:	b1 1d       	adc	r27, r1
    4334:	67 2f       	mov	r22, r23
    4336:	78 2f       	mov	r23, r24
    4338:	88 27       	eor	r24, r24
    433a:	98 5f       	subi	r25, 0xF8	; 248
    433c:	f7 cf       	rjmp	.-18     	; 0x432c <__fp_trunc+0xe>
    433e:	86 95       	lsr	r24
    4340:	77 95       	ror	r23
    4342:	67 95       	ror	r22
    4344:	b1 1d       	adc	r27, r1
    4346:	93 95       	inc	r25
    4348:	96 39       	cpi	r25, 0x96	; 150
    434a:	c8 f3       	brcs	.-14     	; 0x433e <__fp_trunc+0x20>
    434c:	08 95       	ret

0000434e <__mulsf3>:
    434e:	0c d0       	rcall	.+24     	; 0x4368 <__mulsf3x>
    4350:	d5 cf       	rjmp	.-86     	; 0x42fc <__fp_round>
    4352:	c6 df       	rcall	.-116    	; 0x42e0 <__fp_pscA>
    4354:	28 f0       	brcs	.+10     	; 0x4360 <__mulsf3+0x12>
    4356:	cb df       	rcall	.-106    	; 0x42ee <__fp_pscB>
    4358:	18 f0       	brcs	.+6      	; 0x4360 <__mulsf3+0x12>
    435a:	95 23       	and	r25, r21
    435c:	09 f0       	breq	.+2      	; 0x4360 <__mulsf3+0x12>
    435e:	8e cf       	rjmp	.-228    	; 0x427c <__fp_inf>
    4360:	bc cf       	rjmp	.-136    	; 0x42da <__fp_nan>
    4362:	11 24       	eor	r1, r1
    4364:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_szero>

00004368 <__mulsf3x>:
    4368:	0e 94 cf 12 	call	0x259e	; 0x259e <__fp_split3>
    436c:	90 f3       	brcs	.-28     	; 0x4352 <__mulsf3+0x4>

0000436e <__mulsf3_pse>:
    436e:	95 9f       	mul	r25, r21
    4370:	c1 f3       	breq	.-16     	; 0x4362 <__mulsf3+0x14>
    4372:	95 0f       	add	r25, r21
    4374:	50 e0       	ldi	r21, 0x00	; 0
    4376:	55 1f       	adc	r21, r21
    4378:	62 9f       	mul	r22, r18
    437a:	f0 01       	movw	r30, r0
    437c:	72 9f       	mul	r23, r18
    437e:	bb 27       	eor	r27, r27
    4380:	f0 0d       	add	r31, r0
    4382:	b1 1d       	adc	r27, r1
    4384:	63 9f       	mul	r22, r19
    4386:	aa 27       	eor	r26, r26
    4388:	f0 0d       	add	r31, r0
    438a:	b1 1d       	adc	r27, r1
    438c:	aa 1f       	adc	r26, r26
    438e:	64 9f       	mul	r22, r20
    4390:	66 27       	eor	r22, r22
    4392:	b0 0d       	add	r27, r0
    4394:	a1 1d       	adc	r26, r1
    4396:	66 1f       	adc	r22, r22
    4398:	82 9f       	mul	r24, r18
    439a:	22 27       	eor	r18, r18
    439c:	b0 0d       	add	r27, r0
    439e:	a1 1d       	adc	r26, r1
    43a0:	62 1f       	adc	r22, r18
    43a2:	73 9f       	mul	r23, r19
    43a4:	b0 0d       	add	r27, r0
    43a6:	a1 1d       	adc	r26, r1
    43a8:	62 1f       	adc	r22, r18
    43aa:	83 9f       	mul	r24, r19
    43ac:	a0 0d       	add	r26, r0
    43ae:	61 1d       	adc	r22, r1
    43b0:	22 1f       	adc	r18, r18
    43b2:	74 9f       	mul	r23, r20
    43b4:	33 27       	eor	r19, r19
    43b6:	a0 0d       	add	r26, r0
    43b8:	61 1d       	adc	r22, r1
    43ba:	23 1f       	adc	r18, r19
    43bc:	84 9f       	mul	r24, r20
    43be:	60 0d       	add	r22, r0
    43c0:	21 1d       	adc	r18, r1
    43c2:	82 2f       	mov	r24, r18
    43c4:	76 2f       	mov	r23, r22
    43c6:	6a 2f       	mov	r22, r26
    43c8:	11 24       	eor	r1, r1
    43ca:	9f 57       	subi	r25, 0x7F	; 127
    43cc:	50 40       	sbci	r21, 0x00	; 0
    43ce:	92 f0       	brmi	.+36     	; 0x43f4 <__mulsf3_pse+0x86>
    43d0:	e9 f0       	breq	.+58     	; 0x440c <__mulsf3_pse+0x9e>
    43d2:	88 23       	and	r24, r24
    43d4:	4a f0       	brmi	.+18     	; 0x43e8 <__mulsf3_pse+0x7a>
    43d6:	ee 0f       	add	r30, r30
    43d8:	ff 1f       	adc	r31, r31
    43da:	bb 1f       	adc	r27, r27
    43dc:	66 1f       	adc	r22, r22
    43de:	77 1f       	adc	r23, r23
    43e0:	88 1f       	adc	r24, r24
    43e2:	91 50       	subi	r25, 0x01	; 1
    43e4:	50 40       	sbci	r21, 0x00	; 0
    43e6:	a9 f7       	brne	.-22     	; 0x43d2 <__mulsf3_pse+0x64>
    43e8:	9e 3f       	cpi	r25, 0xFE	; 254
    43ea:	51 05       	cpc	r21, r1
    43ec:	78 f0       	brcs	.+30     	; 0x440c <__mulsf3_pse+0x9e>
    43ee:	46 cf       	rjmp	.-372    	; 0x427c <__fp_inf>
    43f0:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_szero>
    43f4:	5f 3f       	cpi	r21, 0xFF	; 255
    43f6:	e4 f3       	brlt	.-8      	; 0x43f0 <__mulsf3_pse+0x82>
    43f8:	98 3e       	cpi	r25, 0xE8	; 232
    43fa:	d4 f3       	brlt	.-12     	; 0x43f0 <__mulsf3_pse+0x82>
    43fc:	86 95       	lsr	r24
    43fe:	77 95       	ror	r23
    4400:	67 95       	ror	r22
    4402:	b7 95       	ror	r27
    4404:	f7 95       	ror	r31
    4406:	e7 95       	ror	r30
    4408:	9f 5f       	subi	r25, 0xFF	; 255
    440a:	c1 f7       	brne	.-16     	; 0x43fc <__mulsf3_pse+0x8e>
    440c:	fe 2b       	or	r31, r30
    440e:	88 0f       	add	r24, r24
    4410:	91 1d       	adc	r25, r1
    4412:	96 95       	lsr	r25
    4414:	87 95       	ror	r24
    4416:	97 f9       	bld	r25, 7
    4418:	08 95       	ret

0000441a <pow>:
    441a:	fa 01       	movw	r30, r20
    441c:	ee 0f       	add	r30, r30
    441e:	ff 1f       	adc	r31, r31
    4420:	30 96       	adiw	r30, 0x00	; 0
    4422:	21 05       	cpc	r18, r1
    4424:	31 05       	cpc	r19, r1
    4426:	99 f1       	breq	.+102    	; 0x448e <pow+0x74>
    4428:	61 15       	cp	r22, r1
    442a:	71 05       	cpc	r23, r1
    442c:	61 f4       	brne	.+24     	; 0x4446 <pow+0x2c>
    442e:	80 38       	cpi	r24, 0x80	; 128
    4430:	bf e3       	ldi	r27, 0x3F	; 63
    4432:	9b 07       	cpc	r25, r27
    4434:	49 f1       	breq	.+82     	; 0x4488 <pow+0x6e>
    4436:	68 94       	set
    4438:	90 38       	cpi	r25, 0x80	; 128
    443a:	81 05       	cpc	r24, r1
    443c:	61 f0       	breq	.+24     	; 0x4456 <pow+0x3c>
    443e:	80 38       	cpi	r24, 0x80	; 128
    4440:	bf ef       	ldi	r27, 0xFF	; 255
    4442:	9b 07       	cpc	r25, r27
    4444:	41 f0       	breq	.+16     	; 0x4456 <pow+0x3c>
    4446:	99 23       	and	r25, r25
    4448:	42 f5       	brpl	.+80     	; 0x449a <pow+0x80>
    444a:	ff 3f       	cpi	r31, 0xFF	; 255
    444c:	e1 05       	cpc	r30, r1
    444e:	31 05       	cpc	r19, r1
    4450:	21 05       	cpc	r18, r1
    4452:	11 f1       	breq	.+68     	; 0x4498 <pow+0x7e>
    4454:	e8 94       	clt
    4456:	08 94       	sec
    4458:	e7 95       	ror	r30
    445a:	d9 01       	movw	r26, r18
    445c:	aa 23       	and	r26, r26
    445e:	29 f4       	brne	.+10     	; 0x446a <pow+0x50>
    4460:	ab 2f       	mov	r26, r27
    4462:	be 2f       	mov	r27, r30
    4464:	f8 5f       	subi	r31, 0xF8	; 248
    4466:	d0 f3       	brcs	.-12     	; 0x445c <pow+0x42>
    4468:	10 c0       	rjmp	.+32     	; 0x448a <pow+0x70>
    446a:	ff 5f       	subi	r31, 0xFF	; 255
    446c:	70 f4       	brcc	.+28     	; 0x448a <pow+0x70>
    446e:	a6 95       	lsr	r26
    4470:	e0 f7       	brcc	.-8      	; 0x446a <pow+0x50>
    4472:	f7 39       	cpi	r31, 0x97	; 151
    4474:	50 f0       	brcs	.+20     	; 0x448a <pow+0x70>
    4476:	19 f0       	breq	.+6      	; 0x447e <pow+0x64>
    4478:	ff 3a       	cpi	r31, 0xAF	; 175
    447a:	38 f4       	brcc	.+14     	; 0x448a <pow+0x70>
    447c:	9f 77       	andi	r25, 0x7F	; 127
    447e:	9f 93       	push	r25
    4480:	0c d0       	rcall	.+24     	; 0x449a <pow+0x80>
    4482:	0f 90       	pop	r0
    4484:	07 fc       	sbrc	r0, 7
    4486:	90 58       	subi	r25, 0x80	; 128
    4488:	08 95       	ret
    448a:	3e f0       	brts	.+14     	; 0x449a <pow+0x80>
    448c:	26 cf       	rjmp	.-436    	; 0x42da <__fp_nan>
    448e:	60 e0       	ldi	r22, 0x00	; 0
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	80 e8       	ldi	r24, 0x80	; 128
    4494:	9f e3       	ldi	r25, 0x3F	; 63
    4496:	08 95       	ret
    4498:	4f e7       	ldi	r20, 0x7F	; 127
    449a:	9f 77       	andi	r25, 0x7F	; 127
    449c:	5f 93       	push	r21
    449e:	4f 93       	push	r20
    44a0:	3f 93       	push	r19
    44a2:	2f 93       	push	r18
    44a4:	a2 d0       	rcall	.+324    	; 0x45ea <log>
    44a6:	2f 91       	pop	r18
    44a8:	3f 91       	pop	r19
    44aa:	4f 91       	pop	r20
    44ac:	5f 91       	pop	r21
    44ae:	4f df       	rcall	.-354    	; 0x434e <__mulsf3>
    44b0:	06 c0       	rjmp	.+12     	; 0x44be <exp>
    44b2:	21 f4       	brne	.+8      	; 0x44bc <pow+0xa2>
    44b4:	0e f0       	brts	.+2      	; 0x44b8 <pow+0x9e>
    44b6:	e2 ce       	rjmp	.-572    	; 0x427c <__fp_inf>
    44b8:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__fp_zero>
    44bc:	0e cf       	rjmp	.-484    	; 0x42da <__fp_nan>

000044be <exp>:
    44be:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fp_splitA>
    44c2:	b8 f3       	brcs	.-18     	; 0x44b2 <pow+0x98>
    44c4:	96 38       	cpi	r25, 0x86	; 134
    44c6:	b0 f7       	brcc	.-20     	; 0x44b4 <pow+0x9a>
    44c8:	07 f8       	bld	r0, 7
    44ca:	0f 92       	push	r0
    44cc:	e8 94       	clt
    44ce:	2b e3       	ldi	r18, 0x3B	; 59
    44d0:	3a ea       	ldi	r19, 0xAA	; 170
    44d2:	48 eb       	ldi	r20, 0xB8	; 184
    44d4:	5f e7       	ldi	r21, 0x7F	; 127
    44d6:	4b df       	rcall	.-362    	; 0x436e <__mulsf3_pse>
    44d8:	0f 92       	push	r0
    44da:	0f 92       	push	r0
    44dc:	0f 92       	push	r0
    44de:	4d b7       	in	r20, 0x3d	; 61
    44e0:	5e b7       	in	r21, 0x3e	; 62
    44e2:	0f 92       	push	r0
    44e4:	c3 d0       	rcall	.+390    	; 0x466c <modf>
    44e6:	ea e9       	ldi	r30, 0x9A	; 154
    44e8:	f1 e0       	ldi	r31, 0x01	; 1
    44ea:	16 d0       	rcall	.+44     	; 0x4518 <__fp_powser>
    44ec:	4f 91       	pop	r20
    44ee:	5f 91       	pop	r21
    44f0:	ef 91       	pop	r30
    44f2:	ff 91       	pop	r31
    44f4:	e5 95       	asr	r30
    44f6:	ee 1f       	adc	r30, r30
    44f8:	ff 1f       	adc	r31, r31
    44fa:	49 f0       	breq	.+18     	; 0x450e <exp+0x50>
    44fc:	fe 57       	subi	r31, 0x7E	; 126
    44fe:	e0 68       	ori	r30, 0x80	; 128
    4500:	44 27       	eor	r20, r20
    4502:	ee 0f       	add	r30, r30
    4504:	44 1f       	adc	r20, r20
    4506:	fa 95       	dec	r31
    4508:	e1 f7       	brne	.-8      	; 0x4502 <exp+0x44>
    450a:	41 95       	neg	r20
    450c:	55 0b       	sbc	r21, r21
    450e:	32 d0       	rcall	.+100    	; 0x4574 <ldexp>
    4510:	0f 90       	pop	r0
    4512:	07 fe       	sbrs	r0, 7
    4514:	26 c0       	rjmp	.+76     	; 0x4562 <inverse>
    4516:	08 95       	ret

00004518 <__fp_powser>:
    4518:	df 93       	push	r29
    451a:	cf 93       	push	r28
    451c:	1f 93       	push	r17
    451e:	0f 93       	push	r16
    4520:	ff 92       	push	r15
    4522:	ef 92       	push	r14
    4524:	df 92       	push	r13
    4526:	7b 01       	movw	r14, r22
    4528:	8c 01       	movw	r16, r24
    452a:	68 94       	set
    452c:	05 c0       	rjmp	.+10     	; 0x4538 <__fp_powser+0x20>
    452e:	da 2e       	mov	r13, r26
    4530:	ef 01       	movw	r28, r30
    4532:	1a df       	rcall	.-460    	; 0x4368 <__mulsf3x>
    4534:	fe 01       	movw	r30, r28
    4536:	e8 94       	clt
    4538:	a5 91       	lpm	r26, Z+
    453a:	25 91       	lpm	r18, Z+
    453c:	35 91       	lpm	r19, Z+
    453e:	45 91       	lpm	r20, Z+
    4540:	55 91       	lpm	r21, Z+
    4542:	ae f3       	brts	.-22     	; 0x452e <__fp_powser+0x16>
    4544:	ef 01       	movw	r28, r30
    4546:	82 dd       	rcall	.-1276   	; 0x404c <__addsf3x>
    4548:	fe 01       	movw	r30, r28
    454a:	97 01       	movw	r18, r14
    454c:	a8 01       	movw	r20, r16
    454e:	da 94       	dec	r13
    4550:	79 f7       	brne	.-34     	; 0x4530 <__fp_powser+0x18>
    4552:	df 90       	pop	r13
    4554:	ef 90       	pop	r14
    4556:	ff 90       	pop	r15
    4558:	0f 91       	pop	r16
    455a:	1f 91       	pop	r17
    455c:	cf 91       	pop	r28
    455e:	df 91       	pop	r29
    4560:	08 95       	ret

00004562 <inverse>:
    4562:	9b 01       	movw	r18, r22
    4564:	ac 01       	movw	r20, r24
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	70 e0       	ldi	r23, 0x00	; 0
    456a:	80 e8       	ldi	r24, 0x80	; 128
    456c:	9f e3       	ldi	r25, 0x3F	; 63
    456e:	c3 cd       	rjmp	.-1146   	; 0x40f6 <__divsf3>
    4570:	85 ce       	rjmp	.-758    	; 0x427c <__fp_inf>
    4572:	a5 ce       	rjmp	.-694    	; 0x42be <__fp_mpack>

00004574 <ldexp>:
    4574:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fp_splitA>
    4578:	e0 f3       	brcs	.-8      	; 0x4572 <inverse+0x10>
    457a:	99 23       	and	r25, r25
    457c:	d1 f3       	breq	.-12     	; 0x4572 <inverse+0x10>
    457e:	94 0f       	add	r25, r20
    4580:	51 1d       	adc	r21, r1
    4582:	b3 f3       	brvs	.-20     	; 0x4570 <inverse+0xe>
    4584:	91 50       	subi	r25, 0x01	; 1
    4586:	50 40       	sbci	r21, 0x00	; 0
    4588:	94 f0       	brlt	.+36     	; 0x45ae <ldexp+0x3a>
    458a:	59 f0       	breq	.+22     	; 0x45a2 <ldexp+0x2e>
    458c:	88 23       	and	r24, r24
    458e:	32 f0       	brmi	.+12     	; 0x459c <ldexp+0x28>
    4590:	66 0f       	add	r22, r22
    4592:	77 1f       	adc	r23, r23
    4594:	88 1f       	adc	r24, r24
    4596:	91 50       	subi	r25, 0x01	; 1
    4598:	50 40       	sbci	r21, 0x00	; 0
    459a:	c1 f7       	brne	.-16     	; 0x458c <ldexp+0x18>
    459c:	9e 3f       	cpi	r25, 0xFE	; 254
    459e:	51 05       	cpc	r21, r1
    45a0:	3c f7       	brge	.-50     	; 0x4570 <inverse+0xe>
    45a2:	88 0f       	add	r24, r24
    45a4:	91 1d       	adc	r25, r1
    45a6:	96 95       	lsr	r25
    45a8:	87 95       	ror	r24
    45aa:	97 f9       	bld	r25, 7
    45ac:	08 95       	ret
    45ae:	5f 3f       	cpi	r21, 0xFF	; 255
    45b0:	ac f0       	brlt	.+42     	; 0x45dc <ldexp+0x68>
    45b2:	98 3e       	cpi	r25, 0xE8	; 232
    45b4:	9c f0       	brlt	.+38     	; 0x45dc <ldexp+0x68>
    45b6:	bb 27       	eor	r27, r27
    45b8:	86 95       	lsr	r24
    45ba:	77 95       	ror	r23
    45bc:	67 95       	ror	r22
    45be:	b7 95       	ror	r27
    45c0:	08 f4       	brcc	.+2      	; 0x45c4 <ldexp+0x50>
    45c2:	b1 60       	ori	r27, 0x01	; 1
    45c4:	93 95       	inc	r25
    45c6:	c1 f7       	brne	.-16     	; 0x45b8 <ldexp+0x44>
    45c8:	bb 0f       	add	r27, r27
    45ca:	58 f7       	brcc	.-42     	; 0x45a2 <ldexp+0x2e>
    45cc:	11 f4       	brne	.+4      	; 0x45d2 <ldexp+0x5e>
    45ce:	60 ff       	sbrs	r22, 0
    45d0:	e8 cf       	rjmp	.-48     	; 0x45a2 <ldexp+0x2e>
    45d2:	6f 5f       	subi	r22, 0xFF	; 255
    45d4:	7f 4f       	sbci	r23, 0xFF	; 255
    45d6:	8f 4f       	sbci	r24, 0xFF	; 255
    45d8:	9f 4f       	sbci	r25, 0xFF	; 255
    45da:	e3 cf       	rjmp	.-58     	; 0x45a2 <ldexp+0x2e>
    45dc:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_szero>
    45e0:	0e f0       	brts	.+2      	; 0x45e4 <ldexp+0x70>
    45e2:	6d ce       	rjmp	.-806    	; 0x42be <__fp_mpack>
    45e4:	7a ce       	rjmp	.-780    	; 0x42da <__fp_nan>
    45e6:	68 94       	set
    45e8:	49 ce       	rjmp	.-878    	; 0x427c <__fp_inf>

000045ea <log>:
    45ea:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__fp_splitA>
    45ee:	c0 f3       	brcs	.-16     	; 0x45e0 <ldexp+0x6c>
    45f0:	99 23       	and	r25, r25
    45f2:	c9 f3       	breq	.-14     	; 0x45e6 <ldexp+0x72>
    45f4:	be f3       	brts	.-18     	; 0x45e4 <ldexp+0x70>
    45f6:	df 93       	push	r29
    45f8:	cf 93       	push	r28
    45fa:	1f 93       	push	r17
    45fc:	0f 93       	push	r16
    45fe:	ff 92       	push	r15
    4600:	c9 2f       	mov	r28, r25
    4602:	dd 27       	eor	r29, r29
    4604:	88 23       	and	r24, r24
    4606:	2a f0       	brmi	.+10     	; 0x4612 <log+0x28>
    4608:	21 97       	sbiw	r28, 0x01	; 1
    460a:	66 0f       	add	r22, r22
    460c:	77 1f       	adc	r23, r23
    460e:	88 1f       	adc	r24, r24
    4610:	da f7       	brpl	.-10     	; 0x4608 <log+0x1e>
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	40 e8       	ldi	r20, 0x80	; 128
    4618:	5f eb       	ldi	r21, 0xBF	; 191
    461a:	9f e3       	ldi	r25, 0x3F	; 63
    461c:	88 39       	cpi	r24, 0x98	; 152
    461e:	20 f0       	brcs	.+8      	; 0x4628 <log+0x3e>
    4620:	80 3e       	cpi	r24, 0xE0	; 224
    4622:	30 f0       	brcs	.+12     	; 0x4630 <log+0x46>
    4624:	21 96       	adiw	r28, 0x01	; 1
    4626:	8f 77       	andi	r24, 0x7F	; 127
    4628:	00 dd       	rcall	.-1536   	; 0x402a <__addsf3>
    462a:	e2 ec       	ldi	r30, 0xC2	; 194
    462c:	f1 e0       	ldi	r31, 0x01	; 1
    462e:	03 c0       	rjmp	.+6      	; 0x4636 <log+0x4c>
    4630:	fc dc       	rcall	.-1544   	; 0x402a <__addsf3>
    4632:	ef ee       	ldi	r30, 0xEF	; 239
    4634:	f1 e0       	ldi	r31, 0x01	; 1
    4636:	70 df       	rcall	.-288    	; 0x4518 <__fp_powser>
    4638:	8b 01       	movw	r16, r22
    463a:	be 01       	movw	r22, r28
    463c:	ec 01       	movw	r28, r24
    463e:	fb 2e       	mov	r15, r27
    4640:	6f 57       	subi	r22, 0x7F	; 127
    4642:	71 09       	sbc	r23, r1
    4644:	75 95       	asr	r23
    4646:	77 1f       	adc	r23, r23
    4648:	88 0b       	sbc	r24, r24
    464a:	99 0b       	sbc	r25, r25
    464c:	c8 dd       	rcall	.-1136   	; 0x41de <__floatsisf>
    464e:	28 e1       	ldi	r18, 0x18	; 24
    4650:	32 e7       	ldi	r19, 0x72	; 114
    4652:	41 e3       	ldi	r20, 0x31	; 49
    4654:	5f e3       	ldi	r21, 0x3F	; 63
    4656:	88 de       	rcall	.-752    	; 0x4368 <__mulsf3x>
    4658:	af 2d       	mov	r26, r15
    465a:	98 01       	movw	r18, r16
    465c:	ae 01       	movw	r20, r28
    465e:	ff 90       	pop	r15
    4660:	0f 91       	pop	r16
    4662:	1f 91       	pop	r17
    4664:	cf 91       	pop	r28
    4666:	df 91       	pop	r29
    4668:	f1 dc       	rcall	.-1566   	; 0x404c <__addsf3x>
    466a:	48 ce       	rjmp	.-880    	; 0x42fc <__fp_round>

0000466c <modf>:
    466c:	fa 01       	movw	r30, r20
    466e:	dc 01       	movw	r26, r24
    4670:	aa 0f       	add	r26, r26
    4672:	bb 1f       	adc	r27, r27
    4674:	9b 01       	movw	r18, r22
    4676:	ac 01       	movw	r20, r24
    4678:	bf 57       	subi	r27, 0x7F	; 127
    467a:	28 f4       	brcc	.+10     	; 0x4686 <modf+0x1a>
    467c:	22 27       	eor	r18, r18
    467e:	33 27       	eor	r19, r19
    4680:	44 27       	eor	r20, r20
    4682:	50 78       	andi	r21, 0x80	; 128
    4684:	1f c0       	rjmp	.+62     	; 0x46c4 <modf+0x58>
    4686:	b7 51       	subi	r27, 0x17	; 23
    4688:	88 f4       	brcc	.+34     	; 0x46ac <modf+0x40>
    468a:	ab 2f       	mov	r26, r27
    468c:	00 24       	eor	r0, r0
    468e:	46 95       	lsr	r20
    4690:	37 95       	ror	r19
    4692:	27 95       	ror	r18
    4694:	01 1c       	adc	r0, r1
    4696:	a3 95       	inc	r26
    4698:	d2 f3       	brmi	.-12     	; 0x468e <modf+0x22>
    469a:	00 20       	and	r0, r0
    469c:	69 f0       	breq	.+26     	; 0x46b8 <modf+0x4c>
    469e:	22 0f       	add	r18, r18
    46a0:	33 1f       	adc	r19, r19
    46a2:	44 1f       	adc	r20, r20
    46a4:	b3 95       	inc	r27
    46a6:	da f3       	brmi	.-10     	; 0x469e <modf+0x32>
    46a8:	0d d0       	rcall	.+26     	; 0x46c4 <modf+0x58>
    46aa:	be cc       	rjmp	.-1668   	; 0x4028 <__subsf3>
    46ac:	61 30       	cpi	r22, 0x01	; 1
    46ae:	71 05       	cpc	r23, r1
    46b0:	a0 e8       	ldi	r26, 0x80	; 128
    46b2:	8a 07       	cpc	r24, r26
    46b4:	b9 46       	sbci	r27, 0x69	; 105
    46b6:	30 f4       	brcc	.+12     	; 0x46c4 <modf+0x58>
    46b8:	9b 01       	movw	r18, r22
    46ba:	ac 01       	movw	r20, r24
    46bc:	66 27       	eor	r22, r22
    46be:	77 27       	eor	r23, r23
    46c0:	88 27       	eor	r24, r24
    46c2:	90 78       	andi	r25, 0x80	; 128
    46c4:	30 96       	adiw	r30, 0x00	; 0
    46c6:	21 f0       	breq	.+8      	; 0x46d0 <modf+0x64>
    46c8:	20 83       	st	Z, r18
    46ca:	31 83       	std	Z+1, r19	; 0x01
    46cc:	42 83       	std	Z+2, r20	; 0x02
    46ce:	53 83       	std	Z+3, r21	; 0x03
    46d0:	08 95       	ret

000046d2 <__divmodhi4>:
    46d2:	97 fb       	bst	r25, 7
    46d4:	07 2e       	mov	r0, r23
    46d6:	16 f4       	brtc	.+4      	; 0x46dc <__divmodhi4+0xa>
    46d8:	00 94       	com	r0
    46da:	06 d0       	rcall	.+12     	; 0x46e8 <__divmodhi4_neg1>
    46dc:	77 fd       	sbrc	r23, 7
    46de:	08 d0       	rcall	.+16     	; 0x46f0 <__divmodhi4_neg2>
    46e0:	35 d0       	rcall	.+106    	; 0x474c <__udivmodhi4>
    46e2:	07 fc       	sbrc	r0, 7
    46e4:	05 d0       	rcall	.+10     	; 0x46f0 <__divmodhi4_neg2>
    46e6:	3e f4       	brtc	.+14     	; 0x46f6 <__divmodhi4_exit>

000046e8 <__divmodhi4_neg1>:
    46e8:	90 95       	com	r25
    46ea:	81 95       	neg	r24
    46ec:	9f 4f       	sbci	r25, 0xFF	; 255
    46ee:	08 95       	ret

000046f0 <__divmodhi4_neg2>:
    46f0:	70 95       	com	r23
    46f2:	61 95       	neg	r22
    46f4:	7f 4f       	sbci	r23, 0xFF	; 255

000046f6 <__divmodhi4_exit>:
    46f6:	08 95       	ret

000046f8 <__udivmodsi4>:
    46f8:	a1 e2       	ldi	r26, 0x21	; 33
    46fa:	1a 2e       	mov	r1, r26
    46fc:	aa 1b       	sub	r26, r26
    46fe:	bb 1b       	sub	r27, r27
    4700:	fd 01       	movw	r30, r26
    4702:	0d c0       	rjmp	.+26     	; 0x471e <__udivmodsi4_ep>

00004704 <__udivmodsi4_loop>:
    4704:	aa 1f       	adc	r26, r26
    4706:	bb 1f       	adc	r27, r27
    4708:	ee 1f       	adc	r30, r30
    470a:	ff 1f       	adc	r31, r31
    470c:	a2 17       	cp	r26, r18
    470e:	b3 07       	cpc	r27, r19
    4710:	e4 07       	cpc	r30, r20
    4712:	f5 07       	cpc	r31, r21
    4714:	20 f0       	brcs	.+8      	; 0x471e <__udivmodsi4_ep>
    4716:	a2 1b       	sub	r26, r18
    4718:	b3 0b       	sbc	r27, r19
    471a:	e4 0b       	sbc	r30, r20
    471c:	f5 0b       	sbc	r31, r21

0000471e <__udivmodsi4_ep>:
    471e:	66 1f       	adc	r22, r22
    4720:	77 1f       	adc	r23, r23
    4722:	88 1f       	adc	r24, r24
    4724:	99 1f       	adc	r25, r25
    4726:	1a 94       	dec	r1
    4728:	69 f7       	brne	.-38     	; 0x4704 <__udivmodsi4_loop>
    472a:	60 95       	com	r22
    472c:	70 95       	com	r23
    472e:	80 95       	com	r24
    4730:	90 95       	com	r25
    4732:	9b 01       	movw	r18, r22
    4734:	ac 01       	movw	r20, r24
    4736:	bd 01       	movw	r22, r26
    4738:	cf 01       	movw	r24, r30
    473a:	08 95       	ret

0000473c <__tablejump2__>:
    473c:	ee 0f       	add	r30, r30
    473e:	ff 1f       	adc	r31, r31
    4740:	88 1f       	adc	r24, r24
    4742:	8b bf       	out	0x3b, r24	; 59
    4744:	07 90       	elpm	r0, Z+
    4746:	f6 91       	elpm	r31, Z
    4748:	e0 2d       	mov	r30, r0
    474a:	19 94       	eijmp

0000474c <__udivmodhi4>:
    474c:	aa 1b       	sub	r26, r26
    474e:	bb 1b       	sub	r27, r27
    4750:	51 e1       	ldi	r21, 0x11	; 17
    4752:	07 c0       	rjmp	.+14     	; 0x4762 <__udivmodhi4_ep>

00004754 <__udivmodhi4_loop>:
    4754:	aa 1f       	adc	r26, r26
    4756:	bb 1f       	adc	r27, r27
    4758:	a6 17       	cp	r26, r22
    475a:	b7 07       	cpc	r27, r23
    475c:	10 f0       	brcs	.+4      	; 0x4762 <__udivmodhi4_ep>
    475e:	a6 1b       	sub	r26, r22
    4760:	b7 0b       	sbc	r27, r23

00004762 <__udivmodhi4_ep>:
    4762:	88 1f       	adc	r24, r24
    4764:	99 1f       	adc	r25, r25
    4766:	5a 95       	dec	r21
    4768:	a9 f7       	brne	.-22     	; 0x4754 <__udivmodhi4_loop>
    476a:	80 95       	com	r24
    476c:	90 95       	com	r25
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	08 95       	ret

00004774 <calloc>:
    4774:	0f 93       	push	r16
    4776:	1f 93       	push	r17
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	86 9f       	mul	r24, r22
    477e:	80 01       	movw	r16, r0
    4780:	87 9f       	mul	r24, r23
    4782:	10 0d       	add	r17, r0
    4784:	96 9f       	mul	r25, r22
    4786:	10 0d       	add	r17, r0
    4788:	11 24       	eor	r1, r1
    478a:	c8 01       	movw	r24, r16
    478c:	0d d0       	rcall	.+26     	; 0x47a8 <malloc>
    478e:	ec 01       	movw	r28, r24
    4790:	00 97       	sbiw	r24, 0x00	; 0
    4792:	21 f0       	breq	.+8      	; 0x479c <calloc+0x28>
    4794:	a8 01       	movw	r20, r16
    4796:	60 e0       	ldi	r22, 0x00	; 0
    4798:	70 e0       	ldi	r23, 0x00	; 0
    479a:	17 d2       	rcall	.+1070   	; 0x4bca <memset>
    479c:	ce 01       	movw	r24, r28
    479e:	df 91       	pop	r29
    47a0:	cf 91       	pop	r28
    47a2:	1f 91       	pop	r17
    47a4:	0f 91       	pop	r16
    47a6:	08 95       	ret

000047a8 <malloc>:
    47a8:	0f 93       	push	r16
    47aa:	1f 93       	push	r17
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	82 30       	cpi	r24, 0x02	; 2
    47b2:	91 05       	cpc	r25, r1
    47b4:	10 f4       	brcc	.+4      	; 0x47ba <malloc+0x12>
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	e0 91 80 0d 	lds	r30, 0x0D80	; 0x800d80 <__flp>
    47be:	f0 91 81 0d 	lds	r31, 0x0D81	; 0x800d81 <__flp+0x1>
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	a0 e0       	ldi	r26, 0x00	; 0
    47c8:	b0 e0       	ldi	r27, 0x00	; 0
    47ca:	30 97       	sbiw	r30, 0x00	; 0
    47cc:	19 f1       	breq	.+70     	; 0x4814 <malloc+0x6c>
    47ce:	40 81       	ld	r20, Z
    47d0:	51 81       	ldd	r21, Z+1	; 0x01
    47d2:	02 81       	ldd	r16, Z+2	; 0x02
    47d4:	13 81       	ldd	r17, Z+3	; 0x03
    47d6:	48 17       	cp	r20, r24
    47d8:	59 07       	cpc	r21, r25
    47da:	c8 f0       	brcs	.+50     	; 0x480e <malloc+0x66>
    47dc:	84 17       	cp	r24, r20
    47de:	95 07       	cpc	r25, r21
    47e0:	69 f4       	brne	.+26     	; 0x47fc <malloc+0x54>
    47e2:	10 97       	sbiw	r26, 0x00	; 0
    47e4:	31 f0       	breq	.+12     	; 0x47f2 <malloc+0x4a>
    47e6:	12 96       	adiw	r26, 0x02	; 2
    47e8:	0c 93       	st	X, r16
    47ea:	12 97       	sbiw	r26, 0x02	; 2
    47ec:	13 96       	adiw	r26, 0x03	; 3
    47ee:	1c 93       	st	X, r17
    47f0:	27 c0       	rjmp	.+78     	; 0x4840 <malloc+0x98>
    47f2:	00 93 80 0d 	sts	0x0D80, r16	; 0x800d80 <__flp>
    47f6:	10 93 81 0d 	sts	0x0D81, r17	; 0x800d81 <__flp+0x1>
    47fa:	22 c0       	rjmp	.+68     	; 0x4840 <malloc+0x98>
    47fc:	21 15       	cp	r18, r1
    47fe:	31 05       	cpc	r19, r1
    4800:	19 f0       	breq	.+6      	; 0x4808 <malloc+0x60>
    4802:	42 17       	cp	r20, r18
    4804:	53 07       	cpc	r21, r19
    4806:	18 f4       	brcc	.+6      	; 0x480e <malloc+0x66>
    4808:	9a 01       	movw	r18, r20
    480a:	bd 01       	movw	r22, r26
    480c:	ef 01       	movw	r28, r30
    480e:	df 01       	movw	r26, r30
    4810:	f8 01       	movw	r30, r16
    4812:	db cf       	rjmp	.-74     	; 0x47ca <malloc+0x22>
    4814:	21 15       	cp	r18, r1
    4816:	31 05       	cpc	r19, r1
    4818:	f9 f0       	breq	.+62     	; 0x4858 <malloc+0xb0>
    481a:	28 1b       	sub	r18, r24
    481c:	39 0b       	sbc	r19, r25
    481e:	24 30       	cpi	r18, 0x04	; 4
    4820:	31 05       	cpc	r19, r1
    4822:	80 f4       	brcc	.+32     	; 0x4844 <malloc+0x9c>
    4824:	8a 81       	ldd	r24, Y+2	; 0x02
    4826:	9b 81       	ldd	r25, Y+3	; 0x03
    4828:	61 15       	cp	r22, r1
    482a:	71 05       	cpc	r23, r1
    482c:	21 f0       	breq	.+8      	; 0x4836 <malloc+0x8e>
    482e:	fb 01       	movw	r30, r22
    4830:	93 83       	std	Z+3, r25	; 0x03
    4832:	82 83       	std	Z+2, r24	; 0x02
    4834:	04 c0       	rjmp	.+8      	; 0x483e <malloc+0x96>
    4836:	90 93 81 0d 	sts	0x0D81, r25	; 0x800d81 <__flp+0x1>
    483a:	80 93 80 0d 	sts	0x0D80, r24	; 0x800d80 <__flp>
    483e:	fe 01       	movw	r30, r28
    4840:	32 96       	adiw	r30, 0x02	; 2
    4842:	44 c0       	rjmp	.+136    	; 0x48cc <malloc+0x124>
    4844:	fe 01       	movw	r30, r28
    4846:	e2 0f       	add	r30, r18
    4848:	f3 1f       	adc	r31, r19
    484a:	81 93       	st	Z+, r24
    484c:	91 93       	st	Z+, r25
    484e:	22 50       	subi	r18, 0x02	; 2
    4850:	31 09       	sbc	r19, r1
    4852:	39 83       	std	Y+1, r19	; 0x01
    4854:	28 83       	st	Y, r18
    4856:	3a c0       	rjmp	.+116    	; 0x48cc <malloc+0x124>
    4858:	20 91 7e 0d 	lds	r18, 0x0D7E	; 0x800d7e <__brkval>
    485c:	30 91 7f 0d 	lds	r19, 0x0D7F	; 0x800d7f <__brkval+0x1>
    4860:	23 2b       	or	r18, r19
    4862:	41 f4       	brne	.+16     	; 0x4874 <malloc+0xcc>
    4864:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4868:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    486c:	30 93 7f 0d 	sts	0x0D7F, r19	; 0x800d7f <__brkval+0x1>
    4870:	20 93 7e 0d 	sts	0x0D7E, r18	; 0x800d7e <__brkval>
    4874:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4878:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    487c:	21 15       	cp	r18, r1
    487e:	31 05       	cpc	r19, r1
    4880:	41 f4       	brne	.+16     	; 0x4892 <malloc+0xea>
    4882:	2d b7       	in	r18, 0x3d	; 61
    4884:	3e b7       	in	r19, 0x3e	; 62
    4886:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    488a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    488e:	24 1b       	sub	r18, r20
    4890:	35 0b       	sbc	r19, r21
    4892:	e0 91 7e 0d 	lds	r30, 0x0D7E	; 0x800d7e <__brkval>
    4896:	f0 91 7f 0d 	lds	r31, 0x0D7F	; 0x800d7f <__brkval+0x1>
    489a:	e2 17       	cp	r30, r18
    489c:	f3 07       	cpc	r31, r19
    489e:	a0 f4       	brcc	.+40     	; 0x48c8 <malloc+0x120>
    48a0:	2e 1b       	sub	r18, r30
    48a2:	3f 0b       	sbc	r19, r31
    48a4:	28 17       	cp	r18, r24
    48a6:	39 07       	cpc	r19, r25
    48a8:	78 f0       	brcs	.+30     	; 0x48c8 <malloc+0x120>
    48aa:	ac 01       	movw	r20, r24
    48ac:	4e 5f       	subi	r20, 0xFE	; 254
    48ae:	5f 4f       	sbci	r21, 0xFF	; 255
    48b0:	24 17       	cp	r18, r20
    48b2:	35 07       	cpc	r19, r21
    48b4:	48 f0       	brcs	.+18     	; 0x48c8 <malloc+0x120>
    48b6:	4e 0f       	add	r20, r30
    48b8:	5f 1f       	adc	r21, r31
    48ba:	50 93 7f 0d 	sts	0x0D7F, r21	; 0x800d7f <__brkval+0x1>
    48be:	40 93 7e 0d 	sts	0x0D7E, r20	; 0x800d7e <__brkval>
    48c2:	81 93       	st	Z+, r24
    48c4:	91 93       	st	Z+, r25
    48c6:	02 c0       	rjmp	.+4      	; 0x48cc <malloc+0x124>
    48c8:	e0 e0       	ldi	r30, 0x00	; 0
    48ca:	f0 e0       	ldi	r31, 0x00	; 0
    48cc:	cf 01       	movw	r24, r30
    48ce:	df 91       	pop	r29
    48d0:	cf 91       	pop	r28
    48d2:	1f 91       	pop	r17
    48d4:	0f 91       	pop	r16
    48d6:	08 95       	ret

000048d8 <free>:
    48d8:	cf 93       	push	r28
    48da:	df 93       	push	r29
    48dc:	00 97       	sbiw	r24, 0x00	; 0
    48de:	09 f4       	brne	.+2      	; 0x48e2 <free+0xa>
    48e0:	81 c0       	rjmp	.+258    	; 0x49e4 <free+0x10c>
    48e2:	fc 01       	movw	r30, r24
    48e4:	32 97       	sbiw	r30, 0x02	; 2
    48e6:	13 82       	std	Z+3, r1	; 0x03
    48e8:	12 82       	std	Z+2, r1	; 0x02
    48ea:	a0 91 80 0d 	lds	r26, 0x0D80	; 0x800d80 <__flp>
    48ee:	b0 91 81 0d 	lds	r27, 0x0D81	; 0x800d81 <__flp+0x1>
    48f2:	10 97       	sbiw	r26, 0x00	; 0
    48f4:	81 f4       	brne	.+32     	; 0x4916 <free+0x3e>
    48f6:	20 81       	ld	r18, Z
    48f8:	31 81       	ldd	r19, Z+1	; 0x01
    48fa:	82 0f       	add	r24, r18
    48fc:	93 1f       	adc	r25, r19
    48fe:	20 91 7e 0d 	lds	r18, 0x0D7E	; 0x800d7e <__brkval>
    4902:	30 91 7f 0d 	lds	r19, 0x0D7F	; 0x800d7f <__brkval+0x1>
    4906:	28 17       	cp	r18, r24
    4908:	39 07       	cpc	r19, r25
    490a:	51 f5       	brne	.+84     	; 0x4960 <free+0x88>
    490c:	f0 93 7f 0d 	sts	0x0D7F, r31	; 0x800d7f <__brkval+0x1>
    4910:	e0 93 7e 0d 	sts	0x0D7E, r30	; 0x800d7e <__brkval>
    4914:	67 c0       	rjmp	.+206    	; 0x49e4 <free+0x10c>
    4916:	ed 01       	movw	r28, r26
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	ce 17       	cp	r28, r30
    491e:	df 07       	cpc	r29, r31
    4920:	40 f4       	brcc	.+16     	; 0x4932 <free+0x5a>
    4922:	4a 81       	ldd	r20, Y+2	; 0x02
    4924:	5b 81       	ldd	r21, Y+3	; 0x03
    4926:	9e 01       	movw	r18, r28
    4928:	41 15       	cp	r20, r1
    492a:	51 05       	cpc	r21, r1
    492c:	f1 f0       	breq	.+60     	; 0x496a <free+0x92>
    492e:	ea 01       	movw	r28, r20
    4930:	f5 cf       	rjmp	.-22     	; 0x491c <free+0x44>
    4932:	d3 83       	std	Z+3, r29	; 0x03
    4934:	c2 83       	std	Z+2, r28	; 0x02
    4936:	40 81       	ld	r20, Z
    4938:	51 81       	ldd	r21, Z+1	; 0x01
    493a:	84 0f       	add	r24, r20
    493c:	95 1f       	adc	r25, r21
    493e:	c8 17       	cp	r28, r24
    4940:	d9 07       	cpc	r29, r25
    4942:	59 f4       	brne	.+22     	; 0x495a <free+0x82>
    4944:	88 81       	ld	r24, Y
    4946:	99 81       	ldd	r25, Y+1	; 0x01
    4948:	84 0f       	add	r24, r20
    494a:	95 1f       	adc	r25, r21
    494c:	02 96       	adiw	r24, 0x02	; 2
    494e:	91 83       	std	Z+1, r25	; 0x01
    4950:	80 83       	st	Z, r24
    4952:	8a 81       	ldd	r24, Y+2	; 0x02
    4954:	9b 81       	ldd	r25, Y+3	; 0x03
    4956:	93 83       	std	Z+3, r25	; 0x03
    4958:	82 83       	std	Z+2, r24	; 0x02
    495a:	21 15       	cp	r18, r1
    495c:	31 05       	cpc	r19, r1
    495e:	29 f4       	brne	.+10     	; 0x496a <free+0x92>
    4960:	f0 93 81 0d 	sts	0x0D81, r31	; 0x800d81 <__flp+0x1>
    4964:	e0 93 80 0d 	sts	0x0D80, r30	; 0x800d80 <__flp>
    4968:	3d c0       	rjmp	.+122    	; 0x49e4 <free+0x10c>
    496a:	e9 01       	movw	r28, r18
    496c:	fb 83       	std	Y+3, r31	; 0x03
    496e:	ea 83       	std	Y+2, r30	; 0x02
    4970:	49 91       	ld	r20, Y+
    4972:	59 91       	ld	r21, Y+
    4974:	c4 0f       	add	r28, r20
    4976:	d5 1f       	adc	r29, r21
    4978:	ec 17       	cp	r30, r28
    497a:	fd 07       	cpc	r31, r29
    497c:	61 f4       	brne	.+24     	; 0x4996 <free+0xbe>
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	84 0f       	add	r24, r20
    4984:	95 1f       	adc	r25, r21
    4986:	02 96       	adiw	r24, 0x02	; 2
    4988:	e9 01       	movw	r28, r18
    498a:	99 83       	std	Y+1, r25	; 0x01
    498c:	88 83       	st	Y, r24
    498e:	82 81       	ldd	r24, Z+2	; 0x02
    4990:	93 81       	ldd	r25, Z+3	; 0x03
    4992:	9b 83       	std	Y+3, r25	; 0x03
    4994:	8a 83       	std	Y+2, r24	; 0x02
    4996:	e0 e0       	ldi	r30, 0x00	; 0
    4998:	f0 e0       	ldi	r31, 0x00	; 0
    499a:	12 96       	adiw	r26, 0x02	; 2
    499c:	8d 91       	ld	r24, X+
    499e:	9c 91       	ld	r25, X
    49a0:	13 97       	sbiw	r26, 0x03	; 3
    49a2:	00 97       	sbiw	r24, 0x00	; 0
    49a4:	19 f0       	breq	.+6      	; 0x49ac <free+0xd4>
    49a6:	fd 01       	movw	r30, r26
    49a8:	dc 01       	movw	r26, r24
    49aa:	f7 cf       	rjmp	.-18     	; 0x499a <free+0xc2>
    49ac:	8d 91       	ld	r24, X+
    49ae:	9c 91       	ld	r25, X
    49b0:	11 97       	sbiw	r26, 0x01	; 1
    49b2:	9d 01       	movw	r18, r26
    49b4:	2e 5f       	subi	r18, 0xFE	; 254
    49b6:	3f 4f       	sbci	r19, 0xFF	; 255
    49b8:	82 0f       	add	r24, r18
    49ba:	93 1f       	adc	r25, r19
    49bc:	20 91 7e 0d 	lds	r18, 0x0D7E	; 0x800d7e <__brkval>
    49c0:	30 91 7f 0d 	lds	r19, 0x0D7F	; 0x800d7f <__brkval+0x1>
    49c4:	28 17       	cp	r18, r24
    49c6:	39 07       	cpc	r19, r25
    49c8:	69 f4       	brne	.+26     	; 0x49e4 <free+0x10c>
    49ca:	30 97       	sbiw	r30, 0x00	; 0
    49cc:	29 f4       	brne	.+10     	; 0x49d8 <free+0x100>
    49ce:	10 92 81 0d 	sts	0x0D81, r1	; 0x800d81 <__flp+0x1>
    49d2:	10 92 80 0d 	sts	0x0D80, r1	; 0x800d80 <__flp>
    49d6:	02 c0       	rjmp	.+4      	; 0x49dc <free+0x104>
    49d8:	13 82       	std	Z+3, r1	; 0x03
    49da:	12 82       	std	Z+2, r1	; 0x02
    49dc:	b0 93 7f 0d 	sts	0x0D7F, r27	; 0x800d7f <__brkval+0x1>
    49e0:	a0 93 7e 0d 	sts	0x0D7E, r26	; 0x800d7e <__brkval>
    49e4:	df 91       	pop	r29
    49e6:	cf 91       	pop	r28
    49e8:	08 95       	ret

000049ea <abort>:
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	f8 94       	cli
    49f0:	dc c1       	rjmp	.+952    	; 0x4daa <_exit>

000049f2 <__ftoa_engine>:
    49f2:	28 30       	cpi	r18, 0x08	; 8
    49f4:	08 f0       	brcs	.+2      	; 0x49f8 <__ftoa_engine+0x6>
    49f6:	27 e0       	ldi	r18, 0x07	; 7
    49f8:	33 27       	eor	r19, r19
    49fa:	da 01       	movw	r26, r20
    49fc:	99 0f       	add	r25, r25
    49fe:	31 1d       	adc	r19, r1
    4a00:	87 fd       	sbrc	r24, 7
    4a02:	91 60       	ori	r25, 0x01	; 1
    4a04:	00 96       	adiw	r24, 0x00	; 0
    4a06:	61 05       	cpc	r22, r1
    4a08:	71 05       	cpc	r23, r1
    4a0a:	39 f4       	brne	.+14     	; 0x4a1a <__ftoa_engine+0x28>
    4a0c:	32 60       	ori	r19, 0x02	; 2
    4a0e:	2e 5f       	subi	r18, 0xFE	; 254
    4a10:	3d 93       	st	X+, r19
    4a12:	30 e3       	ldi	r19, 0x30	; 48
    4a14:	2a 95       	dec	r18
    4a16:	e1 f7       	brne	.-8      	; 0x4a10 <__ftoa_engine+0x1e>
    4a18:	08 95       	ret
    4a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    4a1c:	30 f0       	brcs	.+12     	; 0x4a2a <__ftoa_engine+0x38>
    4a1e:	80 38       	cpi	r24, 0x80	; 128
    4a20:	71 05       	cpc	r23, r1
    4a22:	61 05       	cpc	r22, r1
    4a24:	09 f0       	breq	.+2      	; 0x4a28 <__ftoa_engine+0x36>
    4a26:	3c 5f       	subi	r19, 0xFC	; 252
    4a28:	3c 5f       	subi	r19, 0xFC	; 252
    4a2a:	3d 93       	st	X+, r19
    4a2c:	91 30       	cpi	r25, 0x01	; 1
    4a2e:	08 f0       	brcs	.+2      	; 0x4a32 <__ftoa_engine+0x40>
    4a30:	80 68       	ori	r24, 0x80	; 128
    4a32:	91 1d       	adc	r25, r1
    4a34:	df 93       	push	r29
    4a36:	cf 93       	push	r28
    4a38:	1f 93       	push	r17
    4a3a:	0f 93       	push	r16
    4a3c:	ff 92       	push	r15
    4a3e:	ef 92       	push	r14
    4a40:	19 2f       	mov	r17, r25
    4a42:	98 7f       	andi	r25, 0xF8	; 248
    4a44:	96 95       	lsr	r25
    4a46:	e9 2f       	mov	r30, r25
    4a48:	96 95       	lsr	r25
    4a4a:	96 95       	lsr	r25
    4a4c:	e9 0f       	add	r30, r25
    4a4e:	ff 27       	eor	r31, r31
    4a50:	e2 58       	subi	r30, 0x82	; 130
    4a52:	fd 4f       	sbci	r31, 0xFD	; 253
    4a54:	99 27       	eor	r25, r25
    4a56:	33 27       	eor	r19, r19
    4a58:	ee 24       	eor	r14, r14
    4a5a:	ff 24       	eor	r15, r15
    4a5c:	a7 01       	movw	r20, r14
    4a5e:	e7 01       	movw	r28, r14
    4a60:	05 90       	lpm	r0, Z+
    4a62:	08 94       	sec
    4a64:	07 94       	ror	r0
    4a66:	28 f4       	brcc	.+10     	; 0x4a72 <__ftoa_engine+0x80>
    4a68:	36 0f       	add	r19, r22
    4a6a:	e7 1e       	adc	r14, r23
    4a6c:	f8 1e       	adc	r15, r24
    4a6e:	49 1f       	adc	r20, r25
    4a70:	51 1d       	adc	r21, r1
    4a72:	66 0f       	add	r22, r22
    4a74:	77 1f       	adc	r23, r23
    4a76:	88 1f       	adc	r24, r24
    4a78:	99 1f       	adc	r25, r25
    4a7a:	06 94       	lsr	r0
    4a7c:	a1 f7       	brne	.-24     	; 0x4a66 <__ftoa_engine+0x74>
    4a7e:	05 90       	lpm	r0, Z+
    4a80:	07 94       	ror	r0
    4a82:	28 f4       	brcc	.+10     	; 0x4a8e <__ftoa_engine+0x9c>
    4a84:	e7 0e       	add	r14, r23
    4a86:	f8 1e       	adc	r15, r24
    4a88:	49 1f       	adc	r20, r25
    4a8a:	56 1f       	adc	r21, r22
    4a8c:	c1 1d       	adc	r28, r1
    4a8e:	77 0f       	add	r23, r23
    4a90:	88 1f       	adc	r24, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	66 1f       	adc	r22, r22
    4a96:	06 94       	lsr	r0
    4a98:	a1 f7       	brne	.-24     	; 0x4a82 <__ftoa_engine+0x90>
    4a9a:	05 90       	lpm	r0, Z+
    4a9c:	07 94       	ror	r0
    4a9e:	28 f4       	brcc	.+10     	; 0x4aaa <__ftoa_engine+0xb8>
    4aa0:	f8 0e       	add	r15, r24
    4aa2:	49 1f       	adc	r20, r25
    4aa4:	56 1f       	adc	r21, r22
    4aa6:	c7 1f       	adc	r28, r23
    4aa8:	d1 1d       	adc	r29, r1
    4aaa:	88 0f       	add	r24, r24
    4aac:	99 1f       	adc	r25, r25
    4aae:	66 1f       	adc	r22, r22
    4ab0:	77 1f       	adc	r23, r23
    4ab2:	06 94       	lsr	r0
    4ab4:	a1 f7       	brne	.-24     	; 0x4a9e <__ftoa_engine+0xac>
    4ab6:	05 90       	lpm	r0, Z+
    4ab8:	07 94       	ror	r0
    4aba:	20 f4       	brcc	.+8      	; 0x4ac4 <__ftoa_engine+0xd2>
    4abc:	49 0f       	add	r20, r25
    4abe:	56 1f       	adc	r21, r22
    4ac0:	c7 1f       	adc	r28, r23
    4ac2:	d8 1f       	adc	r29, r24
    4ac4:	99 0f       	add	r25, r25
    4ac6:	66 1f       	adc	r22, r22
    4ac8:	77 1f       	adc	r23, r23
    4aca:	88 1f       	adc	r24, r24
    4acc:	06 94       	lsr	r0
    4ace:	a9 f7       	brne	.-22     	; 0x4aba <__ftoa_engine+0xc8>
    4ad0:	84 91       	lpm	r24, Z
    4ad2:	10 95       	com	r17
    4ad4:	17 70       	andi	r17, 0x07	; 7
    4ad6:	41 f0       	breq	.+16     	; 0x4ae8 <__ftoa_engine+0xf6>
    4ad8:	d6 95       	lsr	r29
    4ada:	c7 95       	ror	r28
    4adc:	57 95       	ror	r21
    4ade:	47 95       	ror	r20
    4ae0:	f7 94       	ror	r15
    4ae2:	e7 94       	ror	r14
    4ae4:	1a 95       	dec	r17
    4ae6:	c1 f7       	brne	.-16     	; 0x4ad8 <__ftoa_engine+0xe6>
    4ae8:	e4 e2       	ldi	r30, 0x24	; 36
    4aea:	f2 e0       	ldi	r31, 0x02	; 2
    4aec:	68 94       	set
    4aee:	15 90       	lpm	r1, Z+
    4af0:	15 91       	lpm	r17, Z+
    4af2:	35 91       	lpm	r19, Z+
    4af4:	65 91       	lpm	r22, Z+
    4af6:	95 91       	lpm	r25, Z+
    4af8:	05 90       	lpm	r0, Z+
    4afa:	7f e2       	ldi	r23, 0x2F	; 47
    4afc:	73 95       	inc	r23
    4afe:	e1 18       	sub	r14, r1
    4b00:	f1 0a       	sbc	r15, r17
    4b02:	43 0b       	sbc	r20, r19
    4b04:	56 0b       	sbc	r21, r22
    4b06:	c9 0b       	sbc	r28, r25
    4b08:	d0 09       	sbc	r29, r0
    4b0a:	c0 f7       	brcc	.-16     	; 0x4afc <__ftoa_engine+0x10a>
    4b0c:	e1 0c       	add	r14, r1
    4b0e:	f1 1e       	adc	r15, r17
    4b10:	43 1f       	adc	r20, r19
    4b12:	56 1f       	adc	r21, r22
    4b14:	c9 1f       	adc	r28, r25
    4b16:	d0 1d       	adc	r29, r0
    4b18:	7e f4       	brtc	.+30     	; 0x4b38 <__ftoa_engine+0x146>
    4b1a:	70 33       	cpi	r23, 0x30	; 48
    4b1c:	11 f4       	brne	.+4      	; 0x4b22 <__ftoa_engine+0x130>
    4b1e:	8a 95       	dec	r24
    4b20:	e6 cf       	rjmp	.-52     	; 0x4aee <__ftoa_engine+0xfc>
    4b22:	e8 94       	clt
    4b24:	01 50       	subi	r16, 0x01	; 1
    4b26:	30 f0       	brcs	.+12     	; 0x4b34 <__ftoa_engine+0x142>
    4b28:	08 0f       	add	r16, r24
    4b2a:	0a f4       	brpl	.+2      	; 0x4b2e <__ftoa_engine+0x13c>
    4b2c:	00 27       	eor	r16, r16
    4b2e:	02 17       	cp	r16, r18
    4b30:	08 f4       	brcc	.+2      	; 0x4b34 <__ftoa_engine+0x142>
    4b32:	20 2f       	mov	r18, r16
    4b34:	23 95       	inc	r18
    4b36:	02 2f       	mov	r16, r18
    4b38:	7a 33       	cpi	r23, 0x3A	; 58
    4b3a:	28 f0       	brcs	.+10     	; 0x4b46 <__ftoa_engine+0x154>
    4b3c:	79 e3       	ldi	r23, 0x39	; 57
    4b3e:	7d 93       	st	X+, r23
    4b40:	2a 95       	dec	r18
    4b42:	e9 f7       	brne	.-6      	; 0x4b3e <__ftoa_engine+0x14c>
    4b44:	10 c0       	rjmp	.+32     	; 0x4b66 <__ftoa_engine+0x174>
    4b46:	7d 93       	st	X+, r23
    4b48:	2a 95       	dec	r18
    4b4a:	89 f6       	brne	.-94     	; 0x4aee <__ftoa_engine+0xfc>
    4b4c:	06 94       	lsr	r0
    4b4e:	97 95       	ror	r25
    4b50:	67 95       	ror	r22
    4b52:	37 95       	ror	r19
    4b54:	17 95       	ror	r17
    4b56:	17 94       	ror	r1
    4b58:	e1 18       	sub	r14, r1
    4b5a:	f1 0a       	sbc	r15, r17
    4b5c:	43 0b       	sbc	r20, r19
    4b5e:	56 0b       	sbc	r21, r22
    4b60:	c9 0b       	sbc	r28, r25
    4b62:	d0 09       	sbc	r29, r0
    4b64:	98 f0       	brcs	.+38     	; 0x4b8c <__ftoa_engine+0x19a>
    4b66:	23 95       	inc	r18
    4b68:	7e 91       	ld	r23, -X
    4b6a:	73 95       	inc	r23
    4b6c:	7a 33       	cpi	r23, 0x3A	; 58
    4b6e:	08 f0       	brcs	.+2      	; 0x4b72 <__ftoa_engine+0x180>
    4b70:	70 e3       	ldi	r23, 0x30	; 48
    4b72:	7c 93       	st	X, r23
    4b74:	20 13       	cpse	r18, r16
    4b76:	b8 f7       	brcc	.-18     	; 0x4b66 <__ftoa_engine+0x174>
    4b78:	7e 91       	ld	r23, -X
    4b7a:	70 61       	ori	r23, 0x10	; 16
    4b7c:	7d 93       	st	X+, r23
    4b7e:	30 f0       	brcs	.+12     	; 0x4b8c <__ftoa_engine+0x19a>
    4b80:	83 95       	inc	r24
    4b82:	71 e3       	ldi	r23, 0x31	; 49
    4b84:	7d 93       	st	X+, r23
    4b86:	70 e3       	ldi	r23, 0x30	; 48
    4b88:	2a 95       	dec	r18
    4b8a:	e1 f7       	brne	.-8      	; 0x4b84 <__ftoa_engine+0x192>
    4b8c:	11 24       	eor	r1, r1
    4b8e:	ef 90       	pop	r14
    4b90:	ff 90       	pop	r15
    4b92:	0f 91       	pop	r16
    4b94:	1f 91       	pop	r17
    4b96:	cf 91       	pop	r28
    4b98:	df 91       	pop	r29
    4b9a:	99 27       	eor	r25, r25
    4b9c:	87 fd       	sbrc	r24, 7
    4b9e:	90 95       	com	r25
    4ba0:	08 95       	ret

00004ba2 <strnlen_P>:
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	05 90       	lpm	r0, Z+
    4ba6:	61 50       	subi	r22, 0x01	; 1
    4ba8:	70 40       	sbci	r23, 0x00	; 0
    4baa:	01 10       	cpse	r0, r1
    4bac:	d8 f7       	brcc	.-10     	; 0x4ba4 <strnlen_P+0x2>
    4bae:	80 95       	com	r24
    4bb0:	90 95       	com	r25
    4bb2:	8e 0f       	add	r24, r30
    4bb4:	9f 1f       	adc	r25, r31
    4bb6:	08 95       	ret

00004bb8 <memcpy>:
    4bb8:	fb 01       	movw	r30, r22
    4bba:	dc 01       	movw	r26, r24
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <memcpy+0xa>
    4bbe:	01 90       	ld	r0, Z+
    4bc0:	0d 92       	st	X+, r0
    4bc2:	41 50       	subi	r20, 0x01	; 1
    4bc4:	50 40       	sbci	r21, 0x00	; 0
    4bc6:	d8 f7       	brcc	.-10     	; 0x4bbe <memcpy+0x6>
    4bc8:	08 95       	ret

00004bca <memset>:
    4bca:	dc 01       	movw	r26, r24
    4bcc:	01 c0       	rjmp	.+2      	; 0x4bd0 <memset+0x6>
    4bce:	6d 93       	st	X+, r22
    4bd0:	41 50       	subi	r20, 0x01	; 1
    4bd2:	50 40       	sbci	r21, 0x00	; 0
    4bd4:	e0 f7       	brcc	.-8      	; 0x4bce <memset+0x4>
    4bd6:	08 95       	ret

00004bd8 <strnlen>:
    4bd8:	fc 01       	movw	r30, r24
    4bda:	61 50       	subi	r22, 0x01	; 1
    4bdc:	70 40       	sbci	r23, 0x00	; 0
    4bde:	01 90       	ld	r0, Z+
    4be0:	01 10       	cpse	r0, r1
    4be2:	d8 f7       	brcc	.-10     	; 0x4bda <strnlen+0x2>
    4be4:	80 95       	com	r24
    4be6:	90 95       	com	r25
    4be8:	8e 0f       	add	r24, r30
    4bea:	9f 1f       	adc	r25, r31
    4bec:	08 95       	ret

00004bee <fputc>:
    4bee:	0f 93       	push	r16
    4bf0:	1f 93       	push	r17
    4bf2:	cf 93       	push	r28
    4bf4:	df 93       	push	r29
    4bf6:	fb 01       	movw	r30, r22
    4bf8:	23 81       	ldd	r18, Z+3	; 0x03
    4bfa:	21 fd       	sbrc	r18, 1
    4bfc:	03 c0       	rjmp	.+6      	; 0x4c04 <fputc+0x16>
    4bfe:	8f ef       	ldi	r24, 0xFF	; 255
    4c00:	9f ef       	ldi	r25, 0xFF	; 255
    4c02:	2c c0       	rjmp	.+88     	; 0x4c5c <fputc+0x6e>
    4c04:	22 ff       	sbrs	r18, 2
    4c06:	16 c0       	rjmp	.+44     	; 0x4c34 <fputc+0x46>
    4c08:	46 81       	ldd	r20, Z+6	; 0x06
    4c0a:	57 81       	ldd	r21, Z+7	; 0x07
    4c0c:	24 81       	ldd	r18, Z+4	; 0x04
    4c0e:	35 81       	ldd	r19, Z+5	; 0x05
    4c10:	42 17       	cp	r20, r18
    4c12:	53 07       	cpc	r21, r19
    4c14:	44 f4       	brge	.+16     	; 0x4c26 <fputc+0x38>
    4c16:	a0 81       	ld	r26, Z
    4c18:	b1 81       	ldd	r27, Z+1	; 0x01
    4c1a:	9d 01       	movw	r18, r26
    4c1c:	2f 5f       	subi	r18, 0xFF	; 255
    4c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c20:	31 83       	std	Z+1, r19	; 0x01
    4c22:	20 83       	st	Z, r18
    4c24:	8c 93       	st	X, r24
    4c26:	26 81       	ldd	r18, Z+6	; 0x06
    4c28:	37 81       	ldd	r19, Z+7	; 0x07
    4c2a:	2f 5f       	subi	r18, 0xFF	; 255
    4c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2e:	37 83       	std	Z+7, r19	; 0x07
    4c30:	26 83       	std	Z+6, r18	; 0x06
    4c32:	14 c0       	rjmp	.+40     	; 0x4c5c <fputc+0x6e>
    4c34:	8b 01       	movw	r16, r22
    4c36:	ec 01       	movw	r28, r24
    4c38:	fb 01       	movw	r30, r22
    4c3a:	00 84       	ldd	r0, Z+8	; 0x08
    4c3c:	f1 85       	ldd	r31, Z+9	; 0x09
    4c3e:	e0 2d       	mov	r30, r0
    4c40:	19 95       	eicall
    4c42:	89 2b       	or	r24, r25
    4c44:	e1 f6       	brne	.-72     	; 0x4bfe <fputc+0x10>
    4c46:	d8 01       	movw	r26, r16
    4c48:	16 96       	adiw	r26, 0x06	; 6
    4c4a:	8d 91       	ld	r24, X+
    4c4c:	9c 91       	ld	r25, X
    4c4e:	17 97       	sbiw	r26, 0x07	; 7
    4c50:	01 96       	adiw	r24, 0x01	; 1
    4c52:	17 96       	adiw	r26, 0x07	; 7
    4c54:	9c 93       	st	X, r25
    4c56:	8e 93       	st	-X, r24
    4c58:	16 97       	sbiw	r26, 0x06	; 6
    4c5a:	ce 01       	movw	r24, r28
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	1f 91       	pop	r17
    4c62:	0f 91       	pop	r16
    4c64:	08 95       	ret

00004c66 <printf>:
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
    4c6e:	ae 01       	movw	r20, r28
    4c70:	4a 5f       	subi	r20, 0xFA	; 250
    4c72:	5f 4f       	sbci	r21, 0xFF	; 255
    4c74:	fa 01       	movw	r30, r20
    4c76:	61 91       	ld	r22, Z+
    4c78:	71 91       	ld	r23, Z+
    4c7a:	af 01       	movw	r20, r30
    4c7c:	80 91 84 0d 	lds	r24, 0x0D84	; 0x800d84 <__iob+0x2>
    4c80:	90 91 85 0d 	lds	r25, 0x0D85	; 0x800d85 <__iob+0x3>
    4c84:	0e 94 87 1c 	call	0x390e	; 0x390e <vfprintf>
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	08 95       	ret

00004c8e <puts>:
    4c8e:	0f 93       	push	r16
    4c90:	1f 93       	push	r17
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
    4c96:	e0 91 84 0d 	lds	r30, 0x0D84	; 0x800d84 <__iob+0x2>
    4c9a:	f0 91 85 0d 	lds	r31, 0x0D85	; 0x800d85 <__iob+0x3>
    4c9e:	23 81       	ldd	r18, Z+3	; 0x03
    4ca0:	21 ff       	sbrs	r18, 1
    4ca2:	1b c0       	rjmp	.+54     	; 0x4cda <puts+0x4c>
    4ca4:	8c 01       	movw	r16, r24
    4ca6:	d0 e0       	ldi	r29, 0x00	; 0
    4ca8:	c0 e0       	ldi	r28, 0x00	; 0
    4caa:	f8 01       	movw	r30, r16
    4cac:	81 91       	ld	r24, Z+
    4cae:	8f 01       	movw	r16, r30
    4cb0:	60 91 84 0d 	lds	r22, 0x0D84	; 0x800d84 <__iob+0x2>
    4cb4:	70 91 85 0d 	lds	r23, 0x0D85	; 0x800d85 <__iob+0x3>
    4cb8:	db 01       	movw	r26, r22
    4cba:	18 96       	adiw	r26, 0x08	; 8
    4cbc:	ed 91       	ld	r30, X+
    4cbe:	fc 91       	ld	r31, X
    4cc0:	19 97       	sbiw	r26, 0x09	; 9
    4cc2:	88 23       	and	r24, r24
    4cc4:	31 f0       	breq	.+12     	; 0x4cd2 <puts+0x44>
    4cc6:	19 95       	eicall
    4cc8:	89 2b       	or	r24, r25
    4cca:	79 f3       	breq	.-34     	; 0x4caa <puts+0x1c>
    4ccc:	df ef       	ldi	r29, 0xFF	; 255
    4cce:	cf ef       	ldi	r28, 0xFF	; 255
    4cd0:	ec cf       	rjmp	.-40     	; 0x4caa <puts+0x1c>
    4cd2:	8a e0       	ldi	r24, 0x0A	; 10
    4cd4:	19 95       	eicall
    4cd6:	89 2b       	or	r24, r25
    4cd8:	19 f0       	breq	.+6      	; 0x4ce0 <puts+0x52>
    4cda:	8f ef       	ldi	r24, 0xFF	; 255
    4cdc:	9f ef       	ldi	r25, 0xFF	; 255
    4cde:	02 c0       	rjmp	.+4      	; 0x4ce4 <puts+0x56>
    4ce0:	8d 2f       	mov	r24, r29
    4ce2:	9c 2f       	mov	r25, r28
    4ce4:	df 91       	pop	r29
    4ce6:	cf 91       	pop	r28
    4ce8:	1f 91       	pop	r17
    4cea:	0f 91       	pop	r16
    4cec:	08 95       	ret

00004cee <__ultoa_invert>:
    4cee:	fa 01       	movw	r30, r20
    4cf0:	aa 27       	eor	r26, r26
    4cf2:	28 30       	cpi	r18, 0x08	; 8
    4cf4:	51 f1       	breq	.+84     	; 0x4d4a <__ultoa_invert+0x5c>
    4cf6:	20 31       	cpi	r18, 0x10	; 16
    4cf8:	81 f1       	breq	.+96     	; 0x4d5a <__ultoa_invert+0x6c>
    4cfa:	e8 94       	clt
    4cfc:	6f 93       	push	r22
    4cfe:	6e 7f       	andi	r22, 0xFE	; 254
    4d00:	6e 5f       	subi	r22, 0xFE	; 254
    4d02:	7f 4f       	sbci	r23, 0xFF	; 255
    4d04:	8f 4f       	sbci	r24, 0xFF	; 255
    4d06:	9f 4f       	sbci	r25, 0xFF	; 255
    4d08:	af 4f       	sbci	r26, 0xFF	; 255
    4d0a:	b1 e0       	ldi	r27, 0x01	; 1
    4d0c:	3e d0       	rcall	.+124    	; 0x4d8a <__ultoa_invert+0x9c>
    4d0e:	b4 e0       	ldi	r27, 0x04	; 4
    4d10:	3c d0       	rcall	.+120    	; 0x4d8a <__ultoa_invert+0x9c>
    4d12:	67 0f       	add	r22, r23
    4d14:	78 1f       	adc	r23, r24
    4d16:	89 1f       	adc	r24, r25
    4d18:	9a 1f       	adc	r25, r26
    4d1a:	a1 1d       	adc	r26, r1
    4d1c:	68 0f       	add	r22, r24
    4d1e:	79 1f       	adc	r23, r25
    4d20:	8a 1f       	adc	r24, r26
    4d22:	91 1d       	adc	r25, r1
    4d24:	a1 1d       	adc	r26, r1
    4d26:	6a 0f       	add	r22, r26
    4d28:	71 1d       	adc	r23, r1
    4d2a:	81 1d       	adc	r24, r1
    4d2c:	91 1d       	adc	r25, r1
    4d2e:	a1 1d       	adc	r26, r1
    4d30:	20 d0       	rcall	.+64     	; 0x4d72 <__ultoa_invert+0x84>
    4d32:	09 f4       	brne	.+2      	; 0x4d36 <__ultoa_invert+0x48>
    4d34:	68 94       	set
    4d36:	3f 91       	pop	r19
    4d38:	2a e0       	ldi	r18, 0x0A	; 10
    4d3a:	26 9f       	mul	r18, r22
    4d3c:	11 24       	eor	r1, r1
    4d3e:	30 19       	sub	r19, r0
    4d40:	30 5d       	subi	r19, 0xD0	; 208
    4d42:	31 93       	st	Z+, r19
    4d44:	de f6       	brtc	.-74     	; 0x4cfc <__ultoa_invert+0xe>
    4d46:	cf 01       	movw	r24, r30
    4d48:	08 95       	ret
    4d4a:	46 2f       	mov	r20, r22
    4d4c:	47 70       	andi	r20, 0x07	; 7
    4d4e:	40 5d       	subi	r20, 0xD0	; 208
    4d50:	41 93       	st	Z+, r20
    4d52:	b3 e0       	ldi	r27, 0x03	; 3
    4d54:	0f d0       	rcall	.+30     	; 0x4d74 <__ultoa_invert+0x86>
    4d56:	c9 f7       	brne	.-14     	; 0x4d4a <__ultoa_invert+0x5c>
    4d58:	f6 cf       	rjmp	.-20     	; 0x4d46 <__ultoa_invert+0x58>
    4d5a:	46 2f       	mov	r20, r22
    4d5c:	4f 70       	andi	r20, 0x0F	; 15
    4d5e:	40 5d       	subi	r20, 0xD0	; 208
    4d60:	4a 33       	cpi	r20, 0x3A	; 58
    4d62:	18 f0       	brcs	.+6      	; 0x4d6a <__ultoa_invert+0x7c>
    4d64:	49 5d       	subi	r20, 0xD9	; 217
    4d66:	31 fd       	sbrc	r19, 1
    4d68:	40 52       	subi	r20, 0x20	; 32
    4d6a:	41 93       	st	Z+, r20
    4d6c:	02 d0       	rcall	.+4      	; 0x4d72 <__ultoa_invert+0x84>
    4d6e:	a9 f7       	brne	.-22     	; 0x4d5a <__ultoa_invert+0x6c>
    4d70:	ea cf       	rjmp	.-44     	; 0x4d46 <__ultoa_invert+0x58>
    4d72:	b4 e0       	ldi	r27, 0x04	; 4
    4d74:	a6 95       	lsr	r26
    4d76:	97 95       	ror	r25
    4d78:	87 95       	ror	r24
    4d7a:	77 95       	ror	r23
    4d7c:	67 95       	ror	r22
    4d7e:	ba 95       	dec	r27
    4d80:	c9 f7       	brne	.-14     	; 0x4d74 <__ultoa_invert+0x86>
    4d82:	00 97       	sbiw	r24, 0x00	; 0
    4d84:	61 05       	cpc	r22, r1
    4d86:	71 05       	cpc	r23, r1
    4d88:	08 95       	ret
    4d8a:	9b 01       	movw	r18, r22
    4d8c:	ac 01       	movw	r20, r24
    4d8e:	0a 2e       	mov	r0, r26
    4d90:	06 94       	lsr	r0
    4d92:	57 95       	ror	r21
    4d94:	47 95       	ror	r20
    4d96:	37 95       	ror	r19
    4d98:	27 95       	ror	r18
    4d9a:	ba 95       	dec	r27
    4d9c:	c9 f7       	brne	.-14     	; 0x4d90 <__ultoa_invert+0xa2>
    4d9e:	62 0f       	add	r22, r18
    4da0:	73 1f       	adc	r23, r19
    4da2:	84 1f       	adc	r24, r20
    4da4:	95 1f       	adc	r25, r21
    4da6:	a0 1d       	adc	r26, r0
    4da8:	08 95       	ret

00004daa <_exit>:
    4daa:	f8 94       	cli

00004dac <__stop_program>:
    4dac:	ff cf       	rjmp	.-2      	; 0x4dac <__stop_program>
